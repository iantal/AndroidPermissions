package org.afree.data.jdbc;

import android.util.Log;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import org.afree.data.Range;
import org.afree.data.RangeInfo;
import org.afree.data.xy.AbstractXYDataset;
import org.afree.data.xy.TableXYDataset;
import org.afree.data.xy.XYDataset;

public class JDBCXYDataset
  extends AbstractXYDataset
  implements XYDataset, TableXYDataset, RangeInfo
{
  private String[] columnNames = new String[0];
  private transient Connection connection;
  private boolean isTimeSeries = false;
  private double maxValue = 0.0D;
  private double minValue = 0.0D;
  private ArrayList rows = new ArrayList();
  
  private JDBCXYDataset() {}
  
  public JDBCXYDataset(String paramString1, String paramString2, String paramString3, String paramString4)
    throws SQLException, ClassNotFoundException
  {
    this();
    Class.forName(paramString2);
    this.connection = DriverManager.getConnection(paramString1, paramString3, paramString4);
  }
  
  public JDBCXYDataset(Connection paramConnection)
    throws SQLException
  {
    this();
    this.connection = paramConnection;
  }
  
  public JDBCXYDataset(Connection paramConnection, String paramString)
    throws SQLException
  {
    this(paramConnection);
    executeQuery(paramString);
  }
  
  public void close()
  {
    try
    {
      this.connection.close();
      return;
    }
    catch (Exception localException)
    {
      System.err.println("JdbcXYDataset: swallowing exception.");
    }
  }
  
  public void executeQuery(String paramString)
    throws SQLException
  {
    executeQuery(this.connection, paramString);
  }
  
  public void executeQuery(Connection paramConnection, String paramString)
    throws SQLException
  {
    if (paramConnection == null) {
      throw new SQLException("There is no database to execute the query.");
    }
    Object localObject3 = null;
    Object localObject2 = null;
    Object localObject1 = localObject3;
    Statement localStatement;
    ResultSetMetaData localResultSetMetaData;
    int i;
    int k;
    int j;
    label104:
    int m;
    try
    {
      localStatement = paramConnection.createStatement();
      localObject1 = localObject3;
      localObject2 = localStatement;
      paramString = localStatement.executeQuery(paramString);
      localObject1 = paramString;
      localObject2 = localStatement;
      localResultSetMetaData = paramString.getMetaData();
      if (localResultSetMetaData == null) {
        break label1196;
      }
      localObject1 = paramString;
      localObject2 = localStatement;
      i = localResultSetMetaData.getColumnCount();
      k = 0;
      localObject1 = paramString;
      localObject2 = localStatement;
      localObject3 = new int[i];
      j = 0;
      if (j >= i) {
        break label274;
      }
      if (localResultSetMetaData == null) {
        break label1202;
      }
      localObject1 = paramString;
      localObject2 = localStatement;
      try
      {
        m = localResultSetMetaData.getColumnType(j + 1);
      }
      catch (SQLException paramConnection)
      {
        label139:
        localObject3[j] = 0;
        localObject1 = paramString;
        localObject2 = localStatement;
        throw paramConnection;
      }
      localObject1 = paramString;
      localObject2 = localStatement;
      Log.i("warn", "Unable to load column " + j + " (" + m + "," + localResultSetMetaData.getColumnClassName(j + 1) + ")");
      localObject3[j] = 0;
    }
    finally
    {
      if (localObject1 == null) {
        break label260;
      }
    }
    k += 1;
    localObject3[j] = m;
    for (;;)
    {
      try
      {
        ((ResultSet)localObject1).close();
        label260:
        if (localObject2 == null) {}
      }
      catch (Exception paramString)
      {
        try
        {
          localObject2.close();
          throw paramConnection;
          label274:
          if (k <= 1)
          {
            localObject1 = paramString;
            localObject2 = localStatement;
            throw new SQLException("Not enough valid columns where generated by query.");
          }
          localObject1 = paramString;
          localObject2 = localStatement;
          this.columnNames = new String[k - 1];
          k = 0;
          j = 1;
          if (j < i)
          {
            m = k;
            if (localObject3[j] == 0) {
              break label1215;
            }
            if (localResultSetMetaData != null)
            {
              localObject1 = paramString;
              localObject2 = localStatement;
              this.columnNames[k] = localResultSetMetaData.getColumnLabel(j + 1);
              break label1209;
            }
            localObject1 = paramString;
            localObject2 = localStatement;
            this.columnNames[k] = "Y";
            break label1209;
          }
          localObject1 = paramString;
          localObject2 = localStatement;
          if (this.rows == null) {
            break label1228;
          }
          j = 0;
          localObject1 = paramString;
          localObject2 = localStatement;
          if (j < this.rows.size())
          {
            localObject1 = paramString;
            localObject2 = localStatement;
            ((ArrayList)this.rows.get(j)).clear();
            j += 1;
            continue;
          }
          localObject1 = paramString;
          localObject2 = localStatement;
          this.rows.clear();
          break label1228;
          localObject1 = paramString;
          localObject2 = localStatement;
          this.isTimeSeries = false;
          localObject1 = paramString;
          localObject2 = localStatement;
          if (paramString.next())
          {
            localObject1 = paramString;
            localObject2 = localStatement;
            ArrayList localArrayList = new ArrayList();
            j = 0;
            if (j < i)
            {
              if (localResultSetMetaData != null)
              {
                localObject1 = paramString;
                localObject2 = localStatement;
                paramConnection = paramString.getObject(j + 1);
                break label1263;
                localObject1 = paramString;
                localObject2 = localStatement;
                System.err.println("Unknown data");
                localObject3[j] = 0;
                break label1379;
                localObject1 = paramString;
                localObject2 = localStatement;
                this.isTimeSeries = true;
                continue;
              }
              localObject1 = paramString;
              localObject2 = localStatement;
              paramConnection = Float.valueOf(paramString.getFloat(j + 1));
              break label1263;
              localObject1 = paramString;
              localObject2 = localStatement;
              localArrayList.add(paramConnection);
              break label1379;
              localObject1 = paramString;
              localObject2 = localStatement;
              localArrayList.add(new Long(((Date)paramConnection).getTime()));
              break label1379;
            }
            localObject1 = paramString;
            localObject2 = localStatement;
            this.rows.add(localArrayList);
            continue;
          }
          localObject1 = paramString;
          localObject2 = localStatement;
          if (this.rows.size() == 0)
          {
            localObject1 = paramString;
            localObject2 = localStatement;
            paramConnection = new ArrayList();
            j = 0;
            if (j < i)
            {
              if (localObject3[j] == 0) {
                break label1388;
              }
              localObject1 = paramString;
              localObject2 = localStatement;
              paramConnection.add(new Integer(0));
              break label1388;
            }
            localObject1 = paramString;
            localObject2 = localStatement;
            this.rows.add(paramConnection);
          }
          localObject1 = paramString;
          localObject2 = localStatement;
          if (this.rows.size() < 1)
          {
            localObject1 = paramString;
            localObject2 = localStatement;
            this.maxValue = 0.0D;
            localObject1 = paramString;
            localObject2 = localStatement;
            this.minValue = 0.0D;
            localObject1 = paramString;
            localObject2 = localStatement;
            fireDatasetChanged();
            if (paramString == null) {}
          }
          try
          {
            paramString.close();
            if (localStatement != null) {}
            try
            {
              localStatement.close();
              return;
            }
            catch (Exception paramConnection)
            {
              double d;
              return;
            }
            localObject1 = paramString;
            localObject2 = localStatement;
            paramConnection = (ArrayList)this.rows.get(0);
            localObject1 = paramString;
            localObject2 = localStatement;
            this.maxValue = Double.NEGATIVE_INFINITY;
            localObject1 = paramString;
            localObject2 = localStatement;
            this.minValue = Double.POSITIVE_INFINITY;
            j = 0;
            localObject1 = paramString;
            localObject2 = localStatement;
            if (j >= this.rows.size()) {
              continue;
            }
            localObject1 = paramString;
            localObject2 = localStatement;
            paramConnection = (ArrayList)this.rows.get(j);
            k = 1;
            if (k < i)
            {
              localObject1 = paramString;
              localObject2 = localStatement;
              localObject3 = paramConnection.get(k);
              if (localObject3 != null)
              {
                localObject1 = paramString;
                localObject2 = localStatement;
                d = ((Number)localObject3).doubleValue();
                localObject1 = paramString;
                localObject2 = localStatement;
                if (d < this.minValue)
                {
                  localObject1 = paramString;
                  localObject2 = localStatement;
                  this.minValue = d;
                }
                localObject1 = paramString;
                localObject2 = localStatement;
                if (d > this.maxValue)
                {
                  localObject1 = paramString;
                  localObject2 = localStatement;
                  this.maxValue = d;
                }
              }
              k += 1;
              continue;
            }
            j += 1;
            continue;
          }
          catch (Exception paramConnection)
          {
            continue;
          }
          paramString = paramString;
        }
        catch (Exception paramString)
        {
          continue;
        }
      }
      for (;;)
      {
        switch (m)
        {
        }
        break label139;
        j += 1;
        break label104;
        label1196:
        i = 2;
        break;
        label1202:
        m = 7;
      }
      label1209:
      m = k + 1;
      label1215:
      j += 1;
      k = m;
      continue;
      label1228:
      switch (localObject3[0])
      {
      }
      continue;
      label1263:
      switch (localObject3[j])
      {
      case -5: 
      case 2: 
      case 3: 
      case 4: 
      case 5: 
      case 6: 
      case 7: 
      case 8: 
      case 91: 
      case 92: 
      case 93: 
      default: 
        break;
      case 0: 
        label1379:
        j += 1;
        continue;
        label1388:
        j += 1;
      }
    }
  }
  
  public int getItemCount()
  {
    return getItemCount(0);
  }
  
  public int getItemCount(int paramInt)
  {
    return this.rows.size();
  }
  
  public int getLegendItemCount()
  {
    return getSeriesCount();
  }
  
  public String[] getLegendItemLabels()
  {
    return this.columnNames;
  }
  
  public Range getRangeBounds(boolean paramBoolean)
  {
    return new Range(this.minValue, this.maxValue);
  }
  
  public double getRangeLowerBound(boolean paramBoolean)
  {
    return this.minValue;
  }
  
  public double getRangeUpperBound(boolean paramBoolean)
  {
    return this.maxValue;
  }
  
  public int getSeriesCount()
  {
    return this.columnNames.length;
  }
  
  public Comparable getSeriesKey(int paramInt)
  {
    if ((paramInt < this.columnNames.length) && (this.columnNames[paramInt] != null)) {
      return this.columnNames[paramInt];
    }
    return "";
  }
  
  public Number getX(int paramInt1, int paramInt2)
  {
    return (Number)((ArrayList)this.rows.get(paramInt2)).get(0);
  }
  
  public Number getY(int paramInt1, int paramInt2)
  {
    return (Number)((ArrayList)this.rows.get(paramInt2)).get(paramInt1 + 1);
  }
  
  public boolean isTimeSeries()
  {
    return this.isTimeSeries;
  }
  
  public void setTimeSeries(boolean paramBoolean)
  {
    this.isTimeSeries = paramBoolean;
  }
}
