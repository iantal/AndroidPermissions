{"findings": [{"title": "\n            Statically defined or predictable initialization vectors (IV) for encryption in CBC mode\n        ", "stat": "high", "description": "\n            Specifying a non-random IV leads to a deterministic and\n            stateless encryption scheme that is susceptible to a chosen-plaintext attack (CPA). In this scenario,\n            a malicious party can abuse the encryption scheme as an oracle (black box) to transform arbitrary\n            plaintext to ciphertext, without requiring the secret key. Assuming that the attacker learns the constant\n            or predictable IV and XOR-combines it with a chosen plaintext, the encryption result will be\n            deterministic.\n        ", "recommendation": "\n            For encipherment with feedback modes, such as CBC, an IV should\n            ensure that data patterns are hidden and distinct ciphertexts are produced for the repeated encryption\n            of identical plaintext blocks. \n            \n            \\begin{lstlisting}[laguage=Java]\n            // Constant IV\n            byte[] staticIv = new byte[] {0x0f, 0x01, 0x02, 0x03, 0x04, 0x02, 0x01};\n            IvParameterSpec ivParameterSpec = new IvParameterSpec(staticIv);\n            \n            Cipher cipher1 = Cipher.getInstance(\"AES/CBC/PKCS7Padding\");\n            cipher1.init(Cipher.ENCRYPT_MODE, key, ivParameterSpec);\n            \n            // Correct approach\n            Cipher cipher2 = Cipher.getInstance(\"AES/CBC/PKCS7Padding\");\n            cipher2.init(Cipher.ENCRYPT_MODE, key);\n            byte[] randomIv = cipher2.getIV();\n            \\end{lstlisting}\n        ", "evidence": ["/home/miki/Documents/GITHUB/AndroidPermissions/apks/crypto/PBE_ConstantSalt_InformationExposure_Lean_benign/app/smali/edu/ksu/cs/benign/Util/Encrypt.smali"]}]}