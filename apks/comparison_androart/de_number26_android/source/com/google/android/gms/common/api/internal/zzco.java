package com.google.android.gms.common.api.internal;

import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResult.zza;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.TransformedResult;
import com.google.android.gms.common.internal.Hide;
import java.util.concurrent.TimeUnit;

public final class zzco<R extends Result>
  extends OptionalPendingResult<R>
{
  private final BasePendingResult<R> zza;
  
  public zzco(PendingResult<R> paramPendingResult)
  {
    if (!(paramPendingResult instanceof BasePendingResult)) {
      throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
    }
    this.zza = ((BasePendingResult)paramPendingResult);
  }
  
  public final R await()
  {
    return this.zza.await();
  }
  
  public final R await(long paramLong, TimeUnit paramTimeUnit)
  {
    return this.zza.await(paramLong, paramTimeUnit);
  }
  
  public final void cancel()
  {
    this.zza.cancel();
  }
  
  public final R get()
  {
    if (isDone()) {
      return await(0L, TimeUnit.MILLISECONDS);
    }
    throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
  }
  
  public final boolean isCanceled()
  {
    return this.zza.isCanceled();
  }
  
  public final boolean isDone()
  {
    return this.zza.zze();
  }
  
  public final void setResultCallback(ResultCallback<? super R> paramResultCallback)
  {
    this.zza.setResultCallback(paramResultCallback);
  }
  
  public final void setResultCallback(ResultCallback<? super R> paramResultCallback, long paramLong, TimeUnit paramTimeUnit)
  {
    this.zza.setResultCallback(paramResultCallback, paramLong, paramTimeUnit);
  }
  
  public final <S extends Result> TransformedResult<S> then(ResultTransform<? super R, ? extends S> paramResultTransform)
  {
    return this.zza.then(paramResultTransform);
  }
  
  @Hide
  public final void zza(PendingResult.zza paramZza)
  {
    this.zza.zza(paramZza);
  }
  
  @Hide
  public final Integer zzb()
  {
    return this.zza.zzb();
  }
}
