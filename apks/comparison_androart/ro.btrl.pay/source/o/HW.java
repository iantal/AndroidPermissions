package o;

public final class HW
{
  public static final String ʻ;
  public static final String ʻॱ;
  public static final String ʼ;
  public static final String ʽ;
  private static int ʽॱ;
  private static int ˈ = 0;
  public static final String ˊ;
  public static final String ˊॱ;
  public static final String ˋ;
  public static final String ˋॱ;
  public static final String ˎ;
  public static final String ˏ;
  public static final String ˏॱ;
  public static final String ͺ;
  public static final String ॱ;
  public static final String ॱˊ;
  private static long ॱˋ;
  private static char[] ॱˎ;
  public static final String ॱॱ;
  public static final HW ॱᐝ;
  public static final String ᐝ;
  public static final String ᐝॱ;
  
  static
  {
    ʽॱ = 1;
    break label18;
    return;
    for (;;)
    {
      int i = 60;
      break label328;
      label18:
      ˊ();
      ॱᐝ = new HW();
      ˏ = ˊ(0, '\000', 23).intern();
      ˎ = ˊ(23, '㄄', 33).intern();
      ॱ = ˊ(56, 49594, 29).intern();
      ˋ = ˊ(85, '\000', 46).intern();
      ˊ = ˊ(131, '\000', 15).intern();
      ᐝ = ˊ(146, '\000', 23).intern();
      ʻ = ˊ(169, '\000', 22).intern();
      ʽ = ˊ(191, 'ⓤ', 15).intern();
      ʼ = ˊ(206, '\000', 13).intern();
      ॱॱ = ˊ(219, '懏', 15).intern();
      ˏॱ = ˊ(234, '\000', 24).intern();
      ˊॱ = ˊ(258, '\000', 26).intern();
      ॱˊ = ˊ(284, 53525, 16).intern();
      ͺ = ˊ(300, '\000', 19).intern();
      ˋॱ = ˊ(319, '\000', 30).intern();
      ᐝॱ = ˊ(349, '\000', 26).intern();
      ʻॱ = ˊ(375, '\000', 19).intern();
      break label298;
      i = 77 / 0;
      return;
      try
      {
        label298:
        i = ˈ + 107;
        ʽॱ = i % 128;
        if (i % 2 != 0) {}
        i = 50;
        label328:
        switch (i)
        {
        }
      }
      catch (Exception localException)
      {
        throw localException;
      }
    }
  }
  
  private HW() {}
  
  private static String ˊ(int paramInt1, char paramChar, int paramInt2)
  {
    label135:
    label155:
    int k;
    int m;
    for (;;)
    {
      switch (i)
      {
      default: 
        break label188;
        for (;;)
        {
          try
          {
            i = ʽॱ;
            i += 79;
            ˈ = i % 128;
            if (i % 2 != 0) {
              break;
            }
          }
          catch (Exception localException)
          {
            throw localException;
          }
        }
        int j = ʽॱ + 51;
        ˈ = j % 128;
        if (j % 2 == 0) {
          break label135;
        }
        for (;;)
        {
          switch (j)
          {
          default: 
            break label155;
            j = 92;
            continue;
            j = 17;
          }
        }
        i = 21;
        continue;
        localException[i] = ((char)(int)(ॱˎ[(k + i)] ^ i * ॱˋ ^ m));
        i += 1;
        break;
      case 21: 
        label188:
        arrayOfChar = new char[paramInt2];
        i = 0;
        break label221;
        i = 94;
      }
    }
    label204:
    return new String(arrayOfChar);
    char[] arrayOfChar = new char[paramInt2];
    int i = 0;
    for (;;)
    {
      label221:
      m = paramChar;
      k = paramInt1;
      if (i < paramInt2) {
        break;
      }
      break label204;
      arrayOfChar[i] = ((char)(int)((ॱˎ[(k >>> i)] ^ i * ॱˋ) + m));
      i += 96;
    }
  }
  
  static void ˊ()
  {
    ॱˋ = -430237013286300650L;
    ॱˎ = new char[] { 101, 21614, -22440, -976, 20537, -23503, -1808, 19688, -24367, -2904, 18607, -25453, -3733, 17770, -26275, -4827, 16654, -27351, -5633, 15809, -28201, -6722, 14721, 12641, 25962, -26276, -13004, 24893, -27339, -13843, 32241, -28198, -14937, 31137, -21079, -16264, 29800, -22447, -9184, 28695, -23532, -10003, 3284, -24349, -11092, 2191, -17268, -11399, 1917, -17572, -4301, 792, -18661, -5127, 8130, -19529, -15905, -27180, 27106, 15754, -28285, 25995, 14668, -29371, 24955, 13577, -30449, 23866, 12503, -31529, 22737, 11409, -32593, 21688, 10334, -899, 20588, 9216, -1993, 19491, 9163, -2072, 19439, 8071, -3140, 101, 21614, -22440, -976, 20537, -23503, -1802, 19711, -24383, -2893, 18613, -25472, -3731, 17773, -26261, -4821, 16661, -27390, -5660, 15815, -28202, -6726, 14733, -29287, -7567, 13906, -30123, -8643, 12806, -31199, -9486, 11992, -32081, -10565, 10931, 32622, -11401, 10061, 31535, -12539, 8963, 30693, -13330, 8151, 29613, -14416, 101, 21614, -22440, -976, 20537, -23503, -1813, 19694, -24384, -2919, 18607, -25455, -3737, 17774, -26287, 101, 21614, -22440, -976, 20537, -23503, -1801, 19711, -24380, -2894, 18613, -25444, -3729, 17773, -26261, -4823, 16641, -27390, -5655, 15813, -28201, -6724, 14749, 101, 21614, -22440, -976, 20537, -23503, -1817, 19707, -24382, -2910, 18563, -25446, -3737, 17778, -26288, -4817, 16658, -27351, -5662, 15811, -28203, -6741, 9345, 28810, -29508, -10028, 29917, -32555, -9213, 26655, -31706, -12218, 27751, -18312, -10867, 24983, -16971, 101, 21614, -22440, -976, 20537, -23503, -1805, 19711, -24366, -2919, 18601, -25472, -3740, 25002, 13729, -13929, -25089, 12790, -14850, -26308, 11568, -16099, -27306, 10599, -684, -28493, 9405, -1890, 101, 21614, -22440, -976, 20537, -23503, -1817, 19707, -24382, -2910, 18563, -25445, -3738, 17773, -26304, -4821, 16654, -27371, -5655, 15869, -28211, -6725, 14733, -29282, 101, 21614, -22440, -976, 20537, -23503, -1814, 19701, -24380, -2897, 18618, -25445, -3733, 17791, -26304, -4829, 16655, -27368, -5677, 15818, -28207, -6723, 14736, -29291, -7582, 13919, -11920, -31365, 31053, 11557, -32468, 29988, 10750, -25111, 29123, 9654, -26181, 19896, 8296, -27522, 18504, 15419, 101, 21614, -22440, -976, 20537, -23503, -1813, 19708, -24362, -2909, 18606, -25427, -3732, 17787, -26304, -4821, 16649, -27366, -5633, 101, 21614, -22440, -976, 20537, -23503, -1808, 19688, -24367, -2904, 18607, -25453, -3733, 17770, -26275, -4827, 16654, -27351, -5656, 15815, -28212, -6737, 14733, -29290, -7581, 13945, -30135, -8665, 12801, -31206, 101, 21614, -22440, -976, 20537, -23503, -1808, 19688, -24367, -2904, 18607, -25453, -3733, 17770, -26275, -4827, 16654, -27351, -5654, 15824, -28201, -6749, 14779, -29303, -7555, 13909, 101, 21614, -22440, -976, 20537, -23503, -1801, 19711, -24354, -2910, 18563, -25443, -3716, 17774, -26261, -4818, 16641, -27390, -5651 };
  }
}
