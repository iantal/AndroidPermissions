package o;

import android.os.Parcelable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public final class Aq
{
  private static final ˊ ˏ = new ˊ(null);
  
  static
  {
    ˏ.ˎ(Al.ˊ());
  }
  
  public static <T> Parcelable ˊ(Class<? extends T> paramClass, T paramT)
  {
    if (paramT == null) {
      return null;
    }
    return ˏ.ˎ(paramClass).ˎ(paramT);
  }
  
  public static <T> Parcelable ˎ(T paramT)
  {
    if (paramT == null) {
      return null;
    }
    return ˊ(paramT.getClass(), paramT);
  }
  
  public static <T> T ॱ(Parcelable paramParcelable)
  {
    if (paramParcelable == null) {
      return null;
    }
    return ((Ao)paramParcelable).ˋ();
  }
  
  public static abstract interface if<T>
  {
    public abstract Parcelable ˎ(T paramT);
  }
  
  static final class ˊ
  {
    private ConcurrentMap<Class, Aq.if> ˏ = new ConcurrentHashMap();
    
    private ˊ() {}
    
    private static String ˊ(Class paramClass)
    {
      return paramClass.getName() + "$$" + "Parcelable";
    }
    
    public Aq.if ˎ(Class paramClass)
    {
      Object localObject2 = (Aq.if)this.ˏ.get(paramClass);
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject2 = ॱ(paramClass);
        if (Parcelable.class.isAssignableFrom(paramClass)) {
          localObject2 = new Al.ᐧ();
        }
        if (localObject2 == null) {
          throw new As("Unable to find generated Parcelable class for " + paramClass.getName() + ", verify that your class is configured properly and that the Parcelable class " + ˊ(paramClass) + " is generated by Parceler.");
        }
        paramClass = (Aq.if)this.ˏ.putIfAbsent(paramClass, localObject2);
        localObject1 = paramClass;
        if (paramClass == null) {
          localObject1 = localObject2;
        }
      }
      return localObject1;
    }
    
    public void ˎ(Ap<Aq.if> paramAp)
    {
      this.ˏ.putAll(paramAp.ˎ());
    }
    
    public Aq.if ॱ(Class paramClass)
    {
      try
      {
        paramClass = new Aq.ˋ(paramClass, Class.forName(ˊ(paramClass)));
        return paramClass;
      }
      catch (ClassNotFoundException paramClass) {}
      return null;
    }
  }
  
  static final class ˋ<T>
    implements Aq.if<T>
  {
    private final Constructor<? extends Parcelable> ॱ;
    
    public ˋ(Class<T> paramClass, Class<? extends Parcelable> paramClass1)
    {
      try
      {
        this.ॱ = paramClass1.getConstructor(new Class[] { paramClass });
        return;
      }
      catch (NoSuchMethodException paramClass)
      {
        throw new As("Unable to create ParcelFactory Type", paramClass);
      }
    }
    
    public Parcelable ˎ(T paramT)
    {
      try
      {
        paramT = (Parcelable)this.ॱ.newInstance(new Object[] { paramT });
        return paramT;
      }
      catch (InstantiationException paramT)
      {
        throw new As("Unable to create ParcelFactory Type", paramT);
      }
      catch (IllegalAccessException paramT)
      {
        throw new As("Unable to create ParcelFactory Type", paramT);
      }
      catch (InvocationTargetException paramT)
      {
        throw new As("Unable to create ParcelFactory Type", paramT);
      }
    }
  }
}
