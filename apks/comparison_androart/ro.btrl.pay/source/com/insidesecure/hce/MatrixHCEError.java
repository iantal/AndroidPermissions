package com.insidesecure.hce;

public enum MatrixHCEError
{
  private static long ˊ;
  private static int ˋ = 0;
  private static char[] ˏ;
  private static int ॱ = 1;
  
  static
  {
    ˊ();
    SUCCESS = new MatrixHCEError(ˎ(0, '\000', 7).intern(), 0);
    SDK_UNINITIALIZED = new MatrixHCEError(ˎ(7, 62123, 17).intern(), 1);
    APPLICATION_PATH_ERROR = new MatrixHCEError(ˎ(24, 55161, 22).intern(), 2);
    CERTIFICATE_FILE_NOT_FOUND = new MatrixHCEError(ˎ(46, 48766, 26).intern(), 3);
    CERTIFICATE_INITIALIZATION_ERROR = new MatrixHCEError(ˎ(72, 52148, 32).intern(), 4);
    NATIVE_INITIALIZATION_ERROR = new MatrixHCEError(ˎ(104, '\000', 27).intern(), 5);
    INVALID_STATE = new MatrixHCEError(ˎ(131, 43820, 13).intern(), 6);
    ACCOUNT_SIGN_IN_REQUIRED = new MatrixHCEError(ˎ(144, '\000', 24).intern(), 7);
    ACCOUNT_SIGN_IN_AUTHENTICATION_FAILED = new MatrixHCEError(ˎ(168, 63513, 37).intern(), 8);
    ACCOUNT_SIGN_IN_USER_ALREADY_ACTIVATED = new MatrixHCEError(ˎ(205, '\000', 38).intern(), 9);
    NO_GCM_REGISTRATION_ID = new MatrixHCEError(ˎ(243, '\000', 22).intern(), 10);
    NETWORK_ERROR = new MatrixHCEError(ˎ(265, '\000', 13).intern(), 11);
    GENERAL_ERROR = new MatrixHCEError(ˎ(278, '\000', 13).intern(), 12);
    DEVICE_LOCK_NOT_SET = new MatrixHCEError(ˎ(291, 37240, 19).intern(), 13);
    UNINITIALIZED_PARAMETERS = new MatrixHCEError(ˎ(310, 65442, 24).intern(), 14);
    INVALID_JSON = new MatrixHCEError(ˎ(334, '\000', 12).intern(), 15);
    UNSUPPORTED = new MatrixHCEError(ˎ(346, 57580, 11).intern(), 16);
    UNKNOWN_RESPONSE_FROM_SERVER = new MatrixHCEError(ˎ(357, '◨', 28).intern(), 17);
    ERROR_RESPONSE_FROM_SERVER = new MatrixHCEError(ˎ(385, '⵵', 26).intern(), 18);
    INTERNAL_DATABASE_ERROR = new MatrixHCEError(ˎ(411, '擻', 23).intern(), 19);
    INVALID_DEVICE_TIME = new MatrixHCEError(ˎ(434, '㺞', 19).intern(), 20);
    INCORRECT_PIN = new MatrixHCEError(ˎ(453, '\000', 13).intern(), 21);
    UPDATE_REQUIRED = new MatrixHCEError(ˎ(466, '娼', 15).intern(), 22);
    CONNECTION_TIMED_OUT = new MatrixHCEError(ˎ(481, '篡', 20).intern(), 23);
    REASON_INVALID = new MatrixHCEError(ˎ(501, '\000', 14).intern(), 24);
    OPERATION_ALREADY_ONGOING = new MatrixHCEError(ˎ(515, 'ჟ', 25).intern(), 25);
    NEW_CARD_INVALID_NAME = new MatrixHCEError(ˎ(540, '夷', 21).intern(), 26);
    NEW_CARD_NAME_ALREADY_EXISTS = new MatrixHCEError(ˎ(561, 48819, 28).intern(), 27);
    MOBILE_KEYSET_MISSING = new MatrixHCEError(ˎ(589, 52925, 21).intern(), 28);
    APPLICATION_PROVIDER_ID_NOT_SET = new MatrixHCEError(ˎ(610, '\000', 31).intern(), 29);
    APPLICATION_INSTANCE_ID_NOT_SET = new MatrixHCEError(ˎ(641, 51862, 31).intern(), 30);
    CANNOT_RESUME_NONSUSPENDED_CARD = new MatrixHCEError(ˎ(672, 64457, 31).intern(), 31);
    CANNOT_SUSPEND_UNINITIALIZED_CARD = new MatrixHCEError(ˎ(703, '䅊', 33).intern(), 32);
    DEVICE_KEY_MISSING = new MatrixHCEError(ˎ(736, '\000', 18).intern(), 33);
    NO_NETWORK_SESSION_AVAILABLE = new MatrixHCEError(ˎ(754, '\000', 28).intern(), 34);
    REQUIRED_DATA_NOT_AVAILABLE = new MatrixHCEError(ˎ(782, '\000', 27).intern(), 35);
    OPERATION_INITIALIZATION_ERROR = new MatrixHCEError(ˎ(809, '\000', 30).intern(), 36);
    CRYPTOGRAPHIC_OPERATION_FAILED = new MatrixHCEError(ˎ(839, '\000', 30).intern(), 37);
    SECURITY_VIOLATION = new MatrixHCEError(ˎ(869, '\000', 18).intern(), 38);
    NETWORK_OPERATION_NOT_NEEDED = new MatrixHCEError(ˎ(887, '\000', 28).intern(), 39);
    UP_TO_DATE = new MatrixHCEError(ˎ(915, '挛', 10).intern(), 40);
    UPGRADED = new MatrixHCEError(ˎ(925, 59554, 8).intern(), 41);
    UPDATE_ERROR_VERSION_SKIPPED = new MatrixHCEError(ˎ(933, '\000', 28).intern(), 42);
    UPDATE_ERROR_UPGRADE_FAILURE = new MatrixHCEError(ˎ(961, 52069, 28).intern(), 43);
    UPDATE_ERROR_DOWNGRADING = new MatrixHCEError(ˎ(989, '\000', 24).intern(), 44);
    NO_DATA_TO_SEND = new MatrixHCEError(ˎ(1013, 61523, 15).intern(), 45);
    ACCOUNT_SERVER_ERROR = new MatrixHCEError(ˎ(1028, '\000', 20).intern(), 46);
    ˎ = new MatrixHCEError[] { SUCCESS, SDK_UNINITIALIZED, APPLICATION_PATH_ERROR, CERTIFICATE_FILE_NOT_FOUND, CERTIFICATE_INITIALIZATION_ERROR, NATIVE_INITIALIZATION_ERROR, INVALID_STATE, ACCOUNT_SIGN_IN_REQUIRED, ACCOUNT_SIGN_IN_AUTHENTICATION_FAILED, ACCOUNT_SIGN_IN_USER_ALREADY_ACTIVATED, NO_GCM_REGISTRATION_ID, NETWORK_ERROR, GENERAL_ERROR, DEVICE_LOCK_NOT_SET, UNINITIALIZED_PARAMETERS, INVALID_JSON, UNSUPPORTED, UNKNOWN_RESPONSE_FROM_SERVER, ERROR_RESPONSE_FROM_SERVER, INTERNAL_DATABASE_ERROR, INVALID_DEVICE_TIME, INCORRECT_PIN, UPDATE_REQUIRED, CONNECTION_TIMED_OUT, REASON_INVALID, OPERATION_ALREADY_ONGOING, NEW_CARD_INVALID_NAME, NEW_CARD_NAME_ALREADY_EXISTS, MOBILE_KEYSET_MISSING, APPLICATION_PROVIDER_ID_NOT_SET, APPLICATION_INSTANCE_ID_NOT_SET, CANNOT_RESUME_NONSUSPENDED_CARD, CANNOT_SUSPEND_UNINITIALIZED_CARD, DEVICE_KEY_MISSING, NO_NETWORK_SESSION_AVAILABLE, REQUIRED_DATA_NOT_AVAILABLE, OPERATION_INITIALIZATION_ERROR, CRYPTOGRAPHIC_OPERATION_FAILED, SECURITY_VIOLATION, NETWORK_OPERATION_NOT_NEEDED, UP_TO_DATE, UPGRADED, UPDATE_ERROR_VERSION_SKIPPED, UPDATE_ERROR_UPGRADE_FAILURE, UPDATE_ERROR_DOWNGRADING, NO_DATA_TO_SEND, ACCOUNT_SERVER_ERROR };
    int i = ˋ + 77;
    ॱ = i % 128;
    if (i % 2 != 0) {}
  }
  
  private MatrixHCEError() {}
  
  static void ˊ()
  {
    ˊ = 2632715088687659229L;
    ˏ = new char[] { 83, -1912, -3591, -5420, -7375, -9214, -10883, -3336, 2610, 858, 6243, 4490, 11956, 10188, 15598, 13322, 19770, 19008, 17301, 22715, 20955, 28391, 26141, 32575, -10440, 12276, 9875, 15778, 13380, 2923, 534, 6438, 4568, 26867, 28565, 26201, 32117, 29697, 19259, 17346, 23286, 20881, -22367, -20660, -22926, -17142, -16835, 18150, 20374, 21693, 23875, 25193, 27417, 28726, 30935, 495, 1689, 3934, 5220, 7438, 8740, 10952, 13297, 14493, -15941, -14771, -12443, -11239, -9009, -6672, -5496, -3153, -13321, 13100, 14940, 8567, 10377, 6051, 7891, 1532, 3357, 29733, 29523, 31380, 24993, 26819, 22507, 24339, 17965, 19800, -19342, -19558, -17750, -24108, -22242, -28634, -24765, -31121, -29287, -2882, -3126, -1297, -7651, -5851, 78, -1892, -3602, -5410, -7390, -9196, -10895, -12734, -14682, -16500, -18186, -20170, -21987, -23691, -25505, -27479, -29295, -30983, 32707, 30760, 28938, 27262, 25275, 23433, 21738, 19930, 17952, -21659, 21439, 23232, 16890, 18452, 30516, 32326, 25976, 28055, 5309, 5071, 6663, 309, 65, -1890, -3591, -5416, -7391, -9185, -10886, -12716, -14661, -16500, -18203, -20175, -22013, -23696, -25512, -27476, -29310, -31000, 32731, 30770, 28941, 27251, 25275, 23455, -1960, 135, 2528, 4801, 6968, 9222, 11619, 13901, 16034, 18325, 16636, 18728, 21018, 23401, 25665, 27829, 30088, 32481, -30777, -32714, -30440, -28042, -25933, -23669, -21278, -18995, -16833, -14561, -16262, -13986, -11872, -9572, -7176, -5075, -2801, -405, 1865, 65, -1890, -3591, -5416, -7391, -9185, -10886, -12716, -14661, -16500, -18203, -20175, -22013, -23696, -25512, -27476, -29307, -30978, 32719, 30773, 28955, 27232, 25266, 23433, 21757, 19924, 17974, 16150, 14451, 12616, 10661, 8855, 7145, 5163, 3355, 1635, -175, -2123, 78, -1902, -3611, -5424, -7369, -9188, -10895, -12711, -14675, -16510, -18197, -20180, -22008, -23701, -25513, -27481, -29287, -31006, 32708, 30776, 28941, 27237, 78, -1896, -3602, -5440, -7365, -9213, -10907, -12716, -14675, -16489, -18192, -20176, -22002, 71, -1896, -3596, -5422, -7386, -9200, -10910, -12716, -14675, -16489, -18192, -20176, -22002, -28356, 27104, 24724, 31654, 29263, 19820, 17417, 24383, 22495, 12030, 10641, 8280, 15210, 12814, 3386, 1492, 7419, 6032, -4442, -9, 1841, 3665, 5499, 7327, 9127, 10949, 12776, 14598, 16430, 18266, 20120, 21946, 23748, 25572, 27408, 29216, 31054, -32667, -30848, -29006, -27194, -25330, -23510, 73, -1901, -3604, -5418, -7368, -9192, -10902, -12716, -14686, -16490, -18195, -20175, -8007, 6271, 4357, 2606, 968, 15597, 13709, 11957, 9808, 24428, 22538, 9661, -8837, -11239, -12495, -14637, -1554, -3960, -5188, -7342, -26008, -25319, -27449, -28677, -31073, -18003, -20130, -22425, -23805, 23088, 24000, 21729, 20374, 18245, 32374, 28930, 26667, 25567, 6901, 11568, -10758, -9059, -14419, -12717, -3717, -2039, -7365, -5170, -27936, -27240, -25532, -30854, -29175, -20164, -17984, -24329, -21609, 21170, 21837, 23650, 18193, 20441, 30456, 31112, 24754, 25778, -25496, -27371, -29143, -30755, -18204, -20076, -21828, -23988, -9350, -9192, -10800, -12570, -14464, -1876, -4005, -5778, -7671, 6964, 7374, 5613, 3733, 1623, 16087, -14835, -12430, -11192, -8794, -7546, -5132, -3894, -1998, -32482, -31126, -28760, -27519, -25118, -23849, -21959, -19705, -18306, 16721, 73, -1901, -3591, -5416, -7386, -9213, -10901, -12728, -14660, -16486, -18190, -20170, -21998, 23145, -23887, -21566, -20246, -18148, -31192, -28851, -27547, -25455, -6744, -7477, -5366, -4046, -1728, -14738, 31650, -31885, -30187, -28360, -26416, -22541, -20837, -19037, -17082, -15254, -15588, -13622, -11788, -10091, -6222, -4266, -2450, -765, 1086, 978, 82, -1896, -3589, -5436, -7365, -9185, -10895, -12734, -14682, -16493, -18205, -20173, -21995, -23683, 4240, -6062, -7904, -1510, -3094, -13094, -14920, -8549, -10631, -20667, -22468, -24084, -17711, -19549, -29560, -31640, -25258, -27091, 28442, 26870, 25052, 31409, 29288, 19274, 17440, 22905, -24145, -22310, -19457, -17920, -31449, -29621, -26760, -24704, -6469, -7717, -6114, -3286, -1470, -15000, -12928, -11080, -8236, 9980, 8477, 10294, -16643, 17963, 20318, 21627, 23940, 25251, 27599, 28924, 30724, 312, 1616, 3969, 5290, 7637, 8932, 10764, 13105, 14427, -16008, -14704, -12370, -11059, -9208, -6864, -5566, -3211, -1899, -32337, -12560, 13871, 16197, 9315, 11653, 4777, 7116, 253, 2064, 28961, 30284, 32647, 25781, 28123, 21222, 23047, 17214, 18499, -20098, -18796, -16450, 65, -1907, -3606, -5413, -7363, -9198, -10897, -12705, -14687, -16502, -18196, -20192, -22004, -23701, -25511, -27483, -29287, -30999, 32719, 30773, 28955, 27240, 25274, 23428, 21750, 19930, 17958, 16144, 14463, 12620, 10674, -13609, 12827, 15228, 8269, 10667, 5764, 8185, 1225, 3127, 29980, 29306, 31670, 24707, 27105, 22227, 24113, 18183, 19573, -19105, -19788, -17523, -24322, -22484, -28398, -24992, -30900, -29520, -2682, -3351, -1062, -7388, -1142, 853, 2621, 4368, 6386, 10188, 11960, 13712, 15716, 17503, 17214, 19195, 20944, 22703, 26513, 28533, 30295, 32055, -31722, -31747, -29987, -28243, -26247, -24490, -20684, -18920, -16924, -15163, -15452, -13678, -11669, 16649, -17962, -20290, -21613, -23951, -25265, -27589, -28910, -30729, -292, -1608, -3984, -5288, -7625, -8957, -10772, -13100, -14418, 16014, 14692, 12378, 11042, 9205, 6877, 5563, 3205, 1917, 32321, 31033, 28672, 26861, 25563, 23214, 68, -1896, -3604, -5410, -7369, -9196, -10895, -12736, -14675, -16484, -18179, -20174, -21995, -23702, -25531, -27462, -29282, -30998, 78, -1902, -3611, -5415, -7375, -9211, -10887, -12732, -14662, -16498, -18179, -20180, -21991, -23702, -25531, -27462, -29281, -31005, 32725, 30758, 28946, 27232, 25271, 23447, 21753, 19927, 17982, 16138, 82, -1896, -3605, -5438, -7363, -9213, -10901, -12721, -14665, -16511, -18205, -20181, -21987, -23706, -25512, -27460, -29308, -30990, 32715, 30769, 28933, 27240, 25266, 23450, 21754, 19929, 17975, 79, -1907, -3585, -5435, -7371, -9211, -10905, -12732, -14682, -16486, -18197, -20175, -21995, -23699, -25505, -27470, -29284, -31004, 32720, 30758, 28944, 27240, 25265, 23445, 21735, 19920, 17952, 16157, 14435, 12635, 67, -1905, -3613, -5433, -7392, -9186, -10903, -12711, -14679, -16491, -18198, -20170, -21985, -23706, -25511, -27485, -29291, -30977, 32715, 30771, 28941, 27246, 25264, 23428, 21758, 19924, 17979, 16131, 14441, 12621, 83, -1896, -3591, -5438, -7386, -9192, -10886, -12718, -14665, -16493, -18197, -20176, -22000, -23688, -25534, -27462, -29281, -31005, 78, -1896, -3602, -5440, -7365, -9213, -10907, -12716, -14681, -16491, -18201, -20179, -21987, -23699, -25505, -27460, -29282, -30990, 32708, 30760, 28944, 27262, 25264, 23454, 21757, 19921, 17975, 16139, 25422, -25706, -27906, -30248, -32736, -16619, -18831, -21167, -23129, -9061, -5897, 4143, 6495, 615, 2967, 13495, 15817, 9965, 85, -1907, -3586, -5418, -7392, -9196, -10895, -12722, -14662, -16489, -18195, -20179, -22013, -23697, -25517, -27487, -29309, -31004, 32709, 30761, 28955, 27250, 25269, 23442, 21736, 19909, 17975, 16139, -13520, 13288, 15003, 8627, 10309, 6001, 7700, 1323, 3551, 29938, 29576, 31304, 24934, 26633, 22307, 24529, 18151, 19849, -19285, -19641, -17794, -24318, -22054, -28425, -24687, -31067, -29371, -2961, 85, -1907, -3586, -5418, -7392, -9196, -10895, -12722, -14662, -16489, -18195, -20179, -22013, -23683, -25511, -27484, -29282, -30998, 32728, 30758, 28928, 27240, 25264, 23452, -4067, 2241, 438, 6784, 4966, 11350, 9532, 15879, 14063, 20441, 18606, 16767, 23114, 21284, 27649, 65, -1890, -3591, -5416, -7391, -9185, -10886, -12716, -14661, -16512, -18192, -20183, -21991, -23701, -25527, -27466, -29310, -30977, 32709, 30773 };
  }
  
  private static String ˎ(int paramInt1, char paramChar, int paramInt2)
  {
    break label152;
    int i = 20;
    break label12;
    label9:
    break label43;
    switch (i)
    {
    default: 
      label12:
      break;
    }
    label43:
    char[] arrayOfChar2;
    for (;;)
    {
      try
      {
        char[] arrayOfChar1 = ˏ;
        long l1 = arrayOfChar1[(paramInt1 + i)];
        long l2 = i;
        try
        {
          long l3 = ˊ;
          arrayOfChar2[i] = ((char)(int)(l1 ^ l2 * l3 ^ paramChar));
          i += 1;
        }
        catch (Exception localException1)
        {
          throw localException1;
        }
        switch (j)
        {
        }
      }
      catch (Exception localException2)
      {
        label152:
        throw localException2;
      }
      if (i >= paramInt2) {
        break label240;
      }
      int j = 80;
      continue;
      i = j;
      continue;
      break label199;
      i = 97;
      break label12;
      i = j;
      continue;
      i = ˋ + 77;
      ॱ = i % 128;
      if (i % 2 != 0)
      {
        break;
        label199:
        arrayOfChar2 = new char[paramInt2];
        j = 0;
        continue;
        j = ˋ + 91;
        ॱ = j % 128;
        if (j % 2 == 0) {
          break label9;
        }
        continue;
        label240:
        j = 85;
      }
    }
    return new String(arrayOfChar2);
  }
}
