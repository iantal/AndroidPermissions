package com.bx.pay.a;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.telephony.TelephonyManager;
import android.telephony.cdma.CdmaCellLocation;
import android.telephony.gsm.GsmCellLocation;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import android.webkit.WebSettings;
import android.webkit.WebView;
import com.bx.pay.netx.b;
import com.bx.pay.utils.l;
import com.bx.pay.utils.n;
import java.io.File;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class d
{
  private static SharedPreferences A;
  public static boolean a = false;
  public static long b = 60000L;
  public static String c = "open";
  public static String d = "open";
  public static boolean e = false;
  public static boolean f = true;
  public static boolean g = true;
  public static boolean h = false;
  public static String i = "http://sdk.wiipay.cn";
  public static final String j = i + "/cn/wmSdk.do";
  public static final String k = i + "/cn/smsSdk.do";
  public static final String l = i + "/pc/verifyCode.do";
  public static final String m = i + "/cn/reportErrorLog.do";
  public static final String n = i + "/cn/prefetch.do";
  public static final String o = i + "/serverIP.do";
  public static String p = "send-sms-molife";
  public static String q = "send-sms-pc";
  public static String r = "send-sms-verify";
  public static String s;
  public static int t;
  public static int u;
  public static int v = 533;
  public static int w = 320;
  public static HashMap x = new HashMap();
  static Handler y = new e(Looper.getMainLooper());
  private static boolean z = false;
  
  public static String a()
  {
    File localFile;
    if (!z)
    {
      localFile = new File(c.a.getFilesDir().getAbsolutePath() + "/bx-sdk-libs/201/");
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      if (localFile.exists()) {
        return localFile.getAbsolutePath();
      }
    }
    if (Environment.getExternalStorageState().equals("mounted"))
    {
      localFile = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/wiipay/bx-sdk-libs/201/");
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      return localFile.getAbsolutePath();
    }
    return c.a.getFilesDir().getAbsolutePath() + "/bx-sdk-libs/201/";
  }
  
  public static String a(String paramString)
  {
    if (!z)
    {
      File localFile = new File(c.a.getFilesDir().getAbsolutePath() + "/bx-sdk-libs/" + paramString + "/");
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      if (localFile.exists()) {
        return localFile.getAbsolutePath();
      }
    }
    if (Environment.getExternalStorageState().equals("mounted"))
    {
      paramString = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/wiipay/bx-sdk-libs/" + paramString + "/");
      if (!paramString.exists()) {
        paramString.mkdirs();
      }
      return paramString.getAbsolutePath();
    }
    return c.a.getFilesDir().getAbsolutePath() + "/bx-sdk-libs/" + paramString + "/";
  }
  
  public static HashMap a(Context paramContext)
  {
    int i2 = 0;
    for (;;)
    {
      try
      {
        localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
        Object localObject3 = Build.MODEL;
        String str2 = "android" + Build.VERSION.RELEASE;
        localObject1 = localTelephonyManager.getDeviceId();
        String str3 = localTelephonyManager.getLine1Number();
        localObject2 = localTelephonyManager.getSimSerialNumber();
        str1 = localTelephonyManager.getSubscriberId();
        x.put("sdk_int", Build.VERSION.SDK_INT);
        x.put("manufacturer", Build.MANUFACTURER);
        x.put("brand", Build.BRAND);
        x.put("user-agent", new WebView(paramContext).getSettings().getUserAgentString());
        x.put("model", localObject3);
        x.put("os", str2);
        x.put("tel", str3);
        localObject3 = x;
        l.a(c.a);
        ((HashMap)localObject3).put("smsCenter", l.a());
        if ((localObject1 != null) && (!"".equals(localObject1))) {
          x.put("deviceId", localObject1);
        }
        if ((localObject2 != null) && (!"".equals(localObject2)))
        {
          x.put("imei", localObject2);
          x.put("iccid", localObject2);
        }
        if ((str1 != null) && (!"".equals(str1))) {
          x.put("imsi", str1);
        }
        x.put("localIp", c());
        localObject1 = (WindowManager)paramContext.getSystemService("window");
        localObject2 = new DisplayMetrics();
        ((WindowManager)localObject1).getDefaultDisplay().getMetrics((DisplayMetrics)localObject2);
        t = ((WindowManager)localObject1).getDefaultDisplay().getHeight();
        u = ((WindowManager)localObject1).getDefaultDisplay().getWidth();
        x.put("screenWidth", u);
        x.put("screenHeight", t);
        localObject1 = (ConnectivityManager)paramContext.getSystemService("connectivity");
        localObject2 = x;
        localObject1 = ((ConnectivityManager)localObject1).getActiveNetworkInfo();
        if (localObject1 == null)
        {
          localObject1 = "NONE";
          ((HashMap)localObject2).put("networkType", localObject1);
          localObject1 = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo();
          x.put("macAddress", ((WifiInfo)localObject1).getMacAddress());
          paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
          x.put("packageName", paramContext.applicationInfo.packageName);
          x.put("versionCode", paramContext.versionCode);
          x.put("versionName", paramContext.versionName);
          x.put("paysdk", String.valueOf(58));
          x.put("paysdkName", String.valueOf("5.8.16.stable"));
          x.put("sdkAppCode", "201");
          x.put("sdkChannelCode", "100000");
          x.put("sdkLoadVersion", "10");
          x.put("sdkLoadCode", "201");
          x.put("sdkLoadChannelCode", "100000");
        }
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        TelephonyManager localTelephonyManager;
        Object localObject2;
        String str1;
        int i3;
        paramContext.printStackTrace();
        continue;
        Object localObject1 = "";
        paramContext = "";
        int i1 = 0;
        continue;
      }
      try
      {
        i1 = localTelephonyManager.getNetworkType();
        localTelephonyManager.getPhoneType();
        if ((i1 != 1) && (i1 != 2) && (i1 != 8)) {
          continue;
        }
        localObject2 = (GsmCellLocation)localTelephonyManager.getCellLocation();
        if (localObject2 == null)
        {
          Log.e("GsmCellLocation", "GsmCellLocation is null!!!");
          return null;
          i1 = ((NetworkInfo)localObject1).getType();
          if (i1 == 1)
          {
            localObject1 = "WIFI";
            continue;
          }
          str1 = ((NetworkInfo)localObject1).getExtraInfo();
          if (str1 == null)
          {
            localObject1 = ((NetworkInfo)localObject1).getTypeName().toUpperCase();
            continue;
          }
          localObject1 = str1.toUpperCase();
          boolean bool = ((String)localObject1).contains("CMNET");
          if (bool)
          {
            localObject1 = "CMNET";
            continue;
          }
          bool = ((String)localObject1).contains("CMWAP");
          if (bool)
          {
            localObject1 = "CMWAP";
            continue;
          }
          bool = ((String)localObject1).contains("UNINET");
          if (bool)
          {
            localObject1 = "UNINET";
            continue;
          }
          bool = ((String)localObject1).contains("UNIWAP");
          if (bool)
          {
            localObject1 = "UNIWAP";
            continue;
          }
          bool = ((String)localObject1).contains("CTNET");
          if (bool)
          {
            localObject1 = "CTNET";
            continue;
          }
          bool = ((String)localObject1).contains("CTWAP");
          if (bool)
          {
            localObject1 = "CTWAP";
            continue;
          }
          if (localObject1 != null)
          {
            bool = "".equals(localObject1);
            if (!bool) {
              continue;
            }
          }
          localObject1 = "NONE";
          continue;
        }
        i1 = ((GsmCellLocation)localObject2).getLac();
        paramContext = localTelephonyManager.getNetworkOperator().substring(0, 3);
        localObject1 = localTelephonyManager.getNetworkOperator().substring(3, 5);
        i2 = ((GsmCellLocation)localObject2).getCid();
        x.put("mcc", paramContext);
        x.put("mnc", localObject1);
        x.put("cid", String.valueOf(i2));
        x.put("lac", String.valueOf(i1));
      }
      catch (Exception paramContext)
      {
        continue;
      }
      return x;
      if ((i1 != 4) && (i1 != 7) && (i1 != 5) && (i1 != 6)) {
        continue;
      }
      localObject1 = (CdmaCellLocation)localTelephonyManager.getCellLocation();
      if (localObject1 == null)
      {
        Log.e("CdmaCellLocation", "CdmaCellLocation is null!!!");
        return null;
      }
      i1 = ((CdmaCellLocation)localObject1).getNetworkId();
      paramContext = localTelephonyManager.getNetworkOperator().substring(0, 3);
      i3 = ((CdmaCellLocation)localObject1).getSystemId();
      i2 = ((CdmaCellLocation)localObject1).getBaseStationId();
      localObject1 = String.valueOf(i3);
    }
  }
  
  public static void a(String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("requestType", paramString1);
    localHashMap.put("resultMsg", paramString2);
    a(localHashMap);
  }
  
  private static void a(Map paramMap)
  {
    HashMap localHashMap = new HashMap();
    Object localObject = x.entrySet().iterator();
    if (!((Iterator)localObject).hasNext()) {
      paramMap = paramMap.entrySet().iterator();
    }
    for (;;)
    {
      if (!paramMap.hasNext())
      {
        new b(m, localHashMap, null).a(Boolean.valueOf(false)).a();
        return;
        Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
        if (n.a(localEntry.getValue())) {
          break;
        }
        localHashMap.put((String)localEntry.getKey(), (String)localEntry.getValue());
        break;
      }
      localObject = (Map.Entry)paramMap.next();
      if (!n.a(((Map.Entry)localObject).getValue())) {
        localHashMap.put((String)((Map.Entry)localObject).getKey(), (String)((Map.Entry)localObject).getValue());
      }
    }
  }
  
  public static int b(String paramString)
  {
    int i1 = 58;
    Object localObject1 = new File(a(paramString));
    int i2 = i1;
    int i3;
    if (((File)localObject1).exists())
    {
      i2 = i1;
      if (((File)localObject1).isDirectory())
      {
        paramString = new ArrayList();
        i2 = i1;
        if (((File)localObject1).listFiles() != null)
        {
          localObject1 = ((File)localObject1).listFiles();
          int i5 = localObject1.length;
          i3 = 0;
          if (i3 < i5) {
            break label94;
          }
          i2 = i1;
        }
        paramString = paramString.iterator();
      }
    }
    for (;;)
    {
      if (!paramString.hasNext())
      {
        return i2;
        label94:
        Object localObject2 = localObject1[i3];
        String str = localObject2.getName();
        i2 = i1;
        if (str.endsWith(".apk"))
        {
          if (localObject2.length() <= 0L)
          {
            localObject2.delete();
            i2 = i1;
          }
        }
        else
        {
          i3 += 1;
          i1 = i2;
          break;
        }
        str = str.substring(0, str.indexOf("."));
        if (!Pattern.compile("[0-9]*").matcher(str).matches()) {}
        for (int i4 = 0;; i4 = 1)
        {
          i2 = i1;
          if (i4 == 0) {
            break;
          }
          i4 = Integer.parseInt(str);
          i2 = i1;
          if (i4 >= i1) {
            i2 = i4;
          }
          paramString.add(localObject2);
          break;
        }
      }
      localObject1 = (File)paramString.next();
      if (!((File)localObject1).getName().startsWith(i2)) {
        ((File)localObject1).delete();
      }
    }
  }
  
  public static String b()
  {
    File localFile;
    if (!z)
    {
      localFile = new File(c.a.getFilesDir().getAbsolutePath() + "/bx-sdk-libs-tmp/201/");
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      if (localFile.exists()) {
        return localFile.getAbsolutePath();
      }
    }
    if (Environment.getExternalStorageState().equals("mounted"))
    {
      localFile = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/wiipay/bx-sdk-libs-tmp/201/");
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      return localFile.getAbsolutePath();
    }
    return c.a.getFilesDir().getAbsolutePath() + "/bx-sdk-libs-tmp/";
  }
  
  private static String c()
  {
    try
    {
      InetAddress localInetAddress;
      do
      {
        localObject = NetworkInterface.getNetworkInterfaces();
        Enumeration localEnumeration;
        while (!localEnumeration.hasMoreElements())
        {
          if (!((Enumeration)localObject).hasMoreElements()) {
            break;
          }
          localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
        }
        localInetAddress = (InetAddress)localEnumeration.nextElement();
      } while (localInetAddress.isLoopbackAddress());
      Object localObject = localInetAddress.getHostAddress().toString();
      return localObject;
    }
    catch (SocketException localSocketException)
    {
      Log.e("WifiPreference IpAddress", localSocketException.toString());
    }
    return null;
  }
  
  public static String c(String paramString)
  {
    if (A == null) {
      A = c.a.getSharedPreferences("wiipay", 0);
    }
    String str = A.getString("baseUrl", "");
    if ("".equals(str)) {
      return paramString;
    }
    return paramString.replaceFirst(i, str);
  }
}
