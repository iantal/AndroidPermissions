package com.bx.pay.utils;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.util.Log;
import java.io.File;

public final class h
{
  private static int a()
  {
    int i = 1;
    k localK = j.a("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm get-install-location", false, true);
    if ((localK.a == 0) && (localK.b != null) && (localK.b.length() > 0)) {}
    try
    {
      int j = Integer.parseInt(localK.b.substring(0, 1));
      switch (j)
      {
      }
    }
    catch (NumberFormatException localNumberFormatException)
    {
      for (;;)
      {
        localNumberFormatException.printStackTrace();
        Log.e("PackageUtils", "pm get-install-location error");
      }
    }
    i = 0;
    return i;
    return 2;
  }
  
  public static int a(Context paramContext, String paramString)
  {
    int j = -3;
    Object localObject2 = new StringBuilder(" -r ");
    Object localObject1;
    int i;
    switch (a())
    {
    default: 
      localObject1 = "";
      localObject2 = (String)localObject1;
      if ((paramString == null) || (paramString.length() == 0)) {
        i = -3;
      }
      break;
    }
    for (;;)
    {
      return i;
      localObject1 = "-f";
      break;
      localObject1 = "-s";
      break;
      localObject1 = new File(paramString);
      i = j;
      if (((File)localObject1).length() > 0L)
      {
        i = j;
        if (((File)localObject1).exists())
        {
          i = j;
          if (((File)localObject1).isFile())
          {
            StringBuilder localStringBuilder = new StringBuilder("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ");
            localObject1 = localObject2;
            if (localObject2 == null) {
              localObject1 = "";
            }
            paramString = (String)localObject1 + " " + paramString.replace(" ", "\\ ");
            if (a(paramContext)) {}
            for (boolean bool = false;; bool = true)
            {
              paramContext = j.a(paramString, bool, true);
              if ((paramContext.b != null) && ((paramContext.b.contains("Success")) || (paramContext.b.contains("success")))) {
                break label804;
              }
              Log.e("PackageUtils", "installSilent successMsg:" + paramContext.b + ", ErrorMsg:" + paramContext.c);
              if (paramContext.c == null) {
                break label801;
              }
              if (!paramContext.c.contains("INSTALL_FAILED_ALREADY_EXISTS")) {
                break;
              }
              return -1;
            }
            if (paramContext.c.contains("INSTALL_FAILED_INVALID_APK")) {
              return -2;
            }
            i = j;
            if (!paramContext.c.contains("INSTALL_FAILED_INVALID_URI"))
            {
              if (paramContext.c.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {
                return -4;
              }
              if (paramContext.c.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {
                return -5;
              }
              if (paramContext.c.contains("INSTALL_FAILED_NO_SHARED_USER")) {
                return -6;
              }
              if (paramContext.c.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {
                return -7;
              }
              if (paramContext.c.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {
                return -8;
              }
              if (paramContext.c.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {
                return -9;
              }
              if (paramContext.c.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {
                return -10;
              }
              if (paramContext.c.contains("INSTALL_FAILED_DEXOPT")) {
                return -11;
              }
              if (paramContext.c.contains("INSTALL_FAILED_OLDER_SDK")) {
                return -12;
              }
              if (paramContext.c.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {
                return -13;
              }
              if (paramContext.c.contains("INSTALL_FAILED_NEWER_SDK")) {
                return -14;
              }
              if (paramContext.c.contains("INSTALL_FAILED_TEST_ONLY")) {
                return -15;
              }
              if (paramContext.c.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {
                return -16;
              }
              if (paramContext.c.contains("INSTALL_FAILED_MISSING_FEATURE")) {
                return -17;
              }
              if (paramContext.c.contains("INSTALL_FAILED_CONTAINER_ERROR")) {
                return -18;
              }
              if (paramContext.c.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {
                return -19;
              }
              if (paramContext.c.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {
                return -20;
              }
              if (paramContext.c.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {
                return -21;
              }
              if (paramContext.c.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {
                return -22;
              }
              if (paramContext.c.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {
                return -23;
              }
              if (paramContext.c.contains("INSTALL_FAILED_UID_CHANGED")) {
                return -24;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_NOT_APK")) {
                return -100;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {
                return -101;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {
                return -102;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {
                return -103;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {
                return -104;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {
                return -105;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {
                return -106;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {
                return -107;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {
                return -108;
              }
              if (paramContext.c.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {
                return -109;
              }
              if (paramContext.c.contains("INSTALL_FAILED_INTERNAL_ERROR")) {
                return -110;
              }
              label801:
              return -1000000;
              label804:
              i = 1;
            }
          }
        }
      }
    }
  }
  
  public static boolean a(Context paramContext)
  {
    if (paramContext == null) {}
    String str;
    do
    {
      return false;
      str = paramContext.getPackageName();
    } while (paramContext == null);
    return a(paramContext.getPackageManager(), str);
  }
  
  private static boolean a(PackageManager paramPackageManager, String paramString)
  {
    if ((paramPackageManager == null) || (paramString == null) || (paramString.length() == 0)) {}
    for (;;)
    {
      return false;
      try
      {
        paramPackageManager = paramPackageManager.getApplicationInfo(paramString, 0);
        if (paramPackageManager != null)
        {
          int i = paramPackageManager.flags;
          if ((i & 0x1) > 0) {
            return true;
          }
        }
      }
      catch (PackageManager.NameNotFoundException paramPackageManager)
      {
        paramPackageManager.printStackTrace();
      }
    }
    return false;
  }
}
