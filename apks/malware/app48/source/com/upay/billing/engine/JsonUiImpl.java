package com.upay.billing.engine;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.text.TextUtils.TruncateAt;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.Window;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import com.upay.billing.JsonUi;
import com.upay.billing.UpayActivity;
import com.upay.billing.UpayActivityExt;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class JsonUiImpl
  extends JsonUi
{
  private static final int AUTO = Integer.MIN_VALUE;
  private static final Object[] CONTROLS;
  private static final Object[] ENUMS;
  @SuppressLint({"InlinedApi"})
  private static final Object[] GRAVITIES;
  private static final String TAG = "JsonUiImpl";
  private static HashMap<String, Integer> mapControls;
  private static HashMap<String, Object> mapEnums;
  private static HashMap<String, Integer> mapGravities;
  private static Pattern ptnDim;
  private UpayActivity activity;
  private String packageName = "";
  private Random rand = new Random();
  private Resources resources = null;
  private int resultCode = 0;
  private HashMap<String, View> views = new HashMap();
  
  static
  {
    int j = 0;
    CONTROLS = new Object[] { "relative-layout", Integer.valueOf(1), "linear-layout", Integer.valueOf(2), "scroll-view", Integer.valueOf(3), "image", Integer.valueOf(21), "text", Integer.valueOf(22), "button", Integer.valueOf(23), "checkbox", Integer.valueOf(24), "progressbar", Integer.valueOf(25), "spinner", Integer.valueOf(26), "edit-text", Integer.valueOf(27) };
    mapControls = new HashMap();
    ENUMS = new Object[] { "auto", Integer.valueOf(Integer.MIN_VALUE), "fill", Integer.valueOf(-1), "wrap", Integer.valueOf(-2), "horizontal", Integer.valueOf(0), "vertical", Integer.valueOf(1), "left", Integer.valueOf(9), "right", Integer.valueOf(11), "hcenter", Integer.valueOf(14), "top", Integer.valueOf(10), "bottom", Integer.valueOf(12), "vcenter", Integer.valueOf(15), "above", Integer.valueOf(2), "below", Integer.valueOf(3), "left-of", Integer.valueOf(0), "right-of", Integer.valueOf(1), "align-top", Integer.valueOf(6), "align-bottom", Integer.valueOf(8), "align-left", Integer.valueOf(5), "align-right", Integer.valueOf(7), "align-baseline", Integer.valueOf(4), "center", ImageView.ScaleType.CENTER, "center-crop", ImageView.ScaleType.CENTER_CROP, "center-inside", ImageView.ScaleType.CENTER_INSIDE, "fit-center", ImageView.ScaleType.FIT_CENTER, "fit-end", ImageView.ScaleType.FIT_END, "fit-start", ImageView.ScaleType.FIT_START, "fit-xy", ImageView.ScaleType.FIT_XY, "matrix", ImageView.ScaleType.MATRIX, "visible", Integer.valueOf(0), "invisible", Integer.valueOf(4), "gone", Integer.valueOf(8), "start", TextUtils.TruncateAt.START, "middle", TextUtils.TruncateAt.MIDDLE, "end", TextUtils.TruncateAt.END, "marquee", TextUtils.TruncateAt.MARQUEE };
    GRAVITIES = new Object[] { "center", Integer.valueOf(17), "left", Integer.valueOf(3), "right", Integer.valueOf(5), "top", Integer.valueOf(48), "bottom", Integer.valueOf(80), "start", Integer.valueOf(8388611), "end", Integer.valueOf(8388613), "no-gravity", Integer.valueOf(0), "fill", Integer.valueOf(119), "fill-horizontal", Integer.valueOf(7), "fill-vertical", Integer.valueOf(112) };
    ptnDim = Pattern.compile("(\\-?[0-9\\.]+)(dp|dip|sp|sip|px)?");
    mapEnums = new HashMap();
    int k = ENUMS.length;
    int i = 0;
    while (i < k)
    {
      mapEnums.put((String)ENUMS[i], ENUMS[(i + 1)]);
      i += 2;
    }
    mapGravities = new HashMap();
    k = GRAVITIES.length;
    i = 0;
    while (i < k)
    {
      mapGravities.put((String)GRAVITIES[i], (Integer)GRAVITIES[(i + 1)]);
      i += 2;
    }
    mapControls = new HashMap();
    k = CONTROLS.length;
    i = j;
    while (i < k)
    {
      mapControls.put((String)CONTROLS[i], (Integer)CONTROLS[(i + 1)]);
      i += 2;
    }
  }
  
  public JsonUiImpl() {}
  
  @SuppressLint({"DefaultLocale"})
  private final void applyAligns(RelativeLayout.LayoutParams paramLayoutParams, String paramString)
  {
    if (paramString == null) {}
    String[] arrayOfString;
    int i;
    int j;
    do
    {
      return;
      arrayOfString = paramString.trim().split("[ \t]+");
      i = 0;
      j = arrayOfString.length;
    } while (i >= j);
    Object localObject = arrayOfString[i];
    localObject = (Integer)mapEnums.get(localObject);
    if (localObject != null) {
      switch (((Integer)localObject).intValue())
      {
      }
    }
    for (;;)
    {
      i += 1;
      break;
      paramLayoutParams.addRule(((Integer)localObject).intValue());
      continue;
      if (i + 1 >= j) {
        throw new IllegalArgumentException(paramString);
      }
      i += 1;
      int k = viewId(arrayOfString[i]);
      paramLayoutParams.addRule(((Integer)localObject).intValue(), k);
    }
  }
  
  private Drawable getDrawable(String paramString)
  {
    Object localObject = this.activity.getExt();
    if (localObject != null) {}
    for (localObject = ((UpayActivityExt)localObject).getDrawable(this.activity, paramString); localObject != null; localObject = null) {
      return localObject;
    }
    return this.resources.getDrawable(identifier(paramString, "drawable"));
  }
  
  @SuppressLint({"NewApi"})
  private View getView(ViewGroup paramViewGroup, Json paramJson, ArrayList<Object[]> paramArrayList)
  {
    String str1 = paramJson.getStr("id");
    Object localObject1;
    if ((str1 != null) && (paramViewGroup != null))
    {
      localObject1 = paramViewGroup.findViewById(identifier(str1, "id"));
      if (localObject1 == null) {}
    }
    for (;;)
    {
      paramViewGroup = (ViewGroup)localObject1;
      int i;
      Object localObject2;
      if (localObject1 == null)
      {
        String str2 = paramJson.getStr("type");
        if (str2 == null) {}
        for (i = -1;; i = ((Integer)mapControls.get(str2)).intValue())
        {
          localObject2 = Integer.valueOf(i);
          paramViewGroup = (ViewGroup)localObject2;
          if (localObject2 == null) {
            paramViewGroup = Integer.valueOf(0);
          }
          switch (paramViewGroup.intValue())
          {
          default: 
            throw new IllegalArgumentException("unknown control type: " + str2);
          }
        }
        localObject2 = paramJson.getStr("layout");
        if (localObject2 != null)
        {
          i = identifier((String)localObject2, "layout");
          localObject1 = this.activity.getLayoutInflater().inflate(i, null);
        }
        paramViewGroup = (ViewGroup)localObject1;
        if (localObject1 == null)
        {
          throw new IllegalArgumentException("invalid layout property: " + (String)localObject2);
          localObject1 = new RelativeLayout(this.activity);
          paramViewGroup = paramJson.getStr("gravity");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((RelativeLayout)localObject1).setGravity(((Integer)paramViewGroup).intValue());
            }
          }
          paramViewGroup = paramJson.getStr("horizontal-gravity");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((RelativeLayout)localObject1).setHorizontalGravity(((Integer)paramViewGroup).intValue());
            }
          }
          paramViewGroup = paramJson.getStr("vertical-gravity");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((RelativeLayout)localObject1).setVerticalGravity(((Integer)paramViewGroup).intValue());
            }
          }
          localObject2 = Util.safeIter(paramJson.getArray("children")).iterator();
          for (;;)
          {
            paramViewGroup = (ViewGroup)localObject1;
            if (!((Iterator)localObject2).hasNext()) {
              break;
            }
            ((RelativeLayout)localObject1).addView(getView((ViewGroup)localObject1, (Json)((Iterator)localObject2).next(), paramArrayList));
          }
          localObject1 = new LinearLayout(this.activity);
          paramViewGroup = paramJson.getStr("orientation");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapEnums.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((LinearLayout)localObject1).setOrientation(((Integer)paramViewGroup).intValue());
            }
          }
          paramViewGroup = paramJson.getStr("gravity");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((LinearLayout)localObject1).setGravity(((Integer)paramViewGroup).intValue());
            }
          }
          paramViewGroup = paramJson.getStr("horizontal-gravity");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((LinearLayout)localObject1).setHorizontalGravity(((Integer)paramViewGroup).intValue());
            }
          }
          paramViewGroup = paramJson.getStr("vertical-gravity");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((LinearLayout)localObject1).setVerticalGravity(((Integer)paramViewGroup).intValue());
            }
          }
          localObject2 = Util.safeIter(paramJson.getArray("children")).iterator();
          for (;;)
          {
            paramViewGroup = (ViewGroup)localObject1;
            if (!((Iterator)localObject2).hasNext()) {
              break;
            }
            ((LinearLayout)localObject1).addView(getView((ViewGroup)localObject1, (Json)((Iterator)localObject2).next(), paramArrayList));
          }
          localObject1 = new ScrollView(this.activity);
          paramViewGroup = paramJson.getStr("scrollbar-size");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((ScrollView)localObject1).setScrollBarSize(((Integer)paramViewGroup).intValue());
            }
          }
          paramViewGroup = paramJson.getStr("scrollbar-style");
          if (!Util.empty(paramViewGroup))
          {
            paramViewGroup = mapGravities.get(paramViewGroup);
            if (paramViewGroup != null) {
              ((ScrollView)localObject1).setScrollBarStyle(((Integer)paramViewGroup).intValue());
            }
          }
          localObject2 = Util.safeIter(paramJson.getArray("children")).iterator();
          for (;;)
          {
            paramViewGroup = (ViewGroup)localObject1;
            if (!((Iterator)localObject2).hasNext()) {
              break;
            }
            ((ScrollView)localObject1).addView(getView((ViewGroup)localObject1, (Json)((Iterator)localObject2).next(), paramArrayList));
          }
          localObject1 = new ImageView(this.activity);
          paramViewGroup = paramJson.getStr("image-src");
          if (!Util.empty(paramViewGroup)) {
            ((ImageView)localObject1).setImageDrawable(getDrawable(paramViewGroup));
          }
          localObject2 = paramJson.getStr("image-scaleType");
          paramViewGroup = (ViewGroup)localObject1;
          if (!Util.empty((String)localObject2))
          {
            localObject2 = mapEnums.get(localObject2);
            paramViewGroup = (ViewGroup)localObject1;
            if (localObject2 != null)
            {
              ((ImageView)localObject1).setScaleType((ImageView.ScaleType)localObject2);
              paramViewGroup = (ViewGroup)localObject1;
            }
          }
        }
      }
      paramArrayList.add(new Object[] { paramJson, paramViewGroup });
      if ((paramViewGroup instanceof TextView))
      {
        paramArrayList = (TextView)paramViewGroup;
        localObject1 = paramJson.getStr("text");
        if (!Util.empty((String)localObject1))
        {
          localObject2 = this.activity.getExt();
          if ((localObject2 == null) || (!((UpayActivityExt)localObject2).setTextViewText(paramArrayList, (String)localObject1))) {
            paramArrayList.setText((CharSequence)localObject1);
          }
        }
        localObject1 = paramJson.getStr("text-color");
        if (!Util.empty((String)localObject1)) {
          paramArrayList.setTextColor(Color.parseColor((String)localObject1));
        }
        localObject1 = paramJson.getStr("text-size");
        if (!Util.empty((String)localObject1)) {
          paramArrayList.setTextSize(parseDimension(this.activity, (String)localObject1, 0.0F));
        }
        localObject1 = paramJson.getStr("max-lines");
        if (!Util.empty((String)localObject1))
        {
          paramArrayList.setMaxLines(Integer.valueOf((String)localObject1).intValue());
          paramArrayList.setMovementMethod(ScrollingMovementMethod.getInstance());
        }
        if (paramJson.getBool("single-line")) {
          paramArrayList.setSingleLine(paramJson.getBool("single-line"));
        }
        localObject1 = paramJson.getStr("ellipsize");
        if (!Util.empty((String)localObject1))
        {
          localObject1 = mapEnums.get(localObject1);
          if (localObject1 != null) {
            paramArrayList.setEllipsize((TextUtils.TruncateAt)localObject1);
          }
        }
        localObject1 = paramJson.getStr("marqueerepeatlimit");
        if (!Util.empty((String)localObject1)) {
          paramArrayList.setMarqueeRepeatLimit(Integer.valueOf((String)localObject1).intValue());
        }
        if (paramJson.getBool("focusable")) {
          paramArrayList.setFocusable(paramJson.getBool("focusable"));
        }
        if (paramJson.getBool("focusableintouchmode")) {
          paramArrayList.setFocusableInTouchMode(paramJson.getBool("focusableintouchmode"));
        }
        if (paramJson.getBool("scrollhorizontally")) {
          paramArrayList.setHorizontallyScrolling(paramJson.getBool("scrollhorizontally"));
        }
        localObject1 = paramJson.getStr("gravity");
        if (!Util.empty((String)localObject1))
        {
          localObject1 = mapGravities.get(localObject1);
          if (localObject1 != null) {
            paramArrayList.setGravity(((Integer)localObject1).intValue());
          }
        }
      }
      localObject1 = paramJson.getStr("padding");
      if (!Util.empty((String)localObject1))
      {
        paramArrayList = new String[4];
        localObject1 = ((String)localObject1).trim().split("[ ]+");
        if (localObject1.length <= 0) {}
      }
      switch (localObject1.length)
      {
      default: 
        paramArrayList = (ArrayList<Object[]>)localObject1;
        label1395:
        paramViewGroup.setPadding((int)parseDimension(this.activity, paramArrayList[3], 0.0F), (int)parseDimension(this.activity, paramArrayList[0], 0.0F), (int)parseDimension(this.activity, paramArrayList[1], 0.0F), (int)parseDimension(this.activity, paramArrayList[2], 0.0F));
        paramArrayList = paramJson.getStr("background");
        if (!Util.empty(paramArrayList))
        {
          if (paramArrayList.startsWith("#")) {
            paramViewGroup.setBackgroundColor(Color.parseColor(paramArrayList));
          }
        }
        else
        {
          label1480:
          paramArrayList = paramJson.getStr("visibility");
          if (!Util.empty(paramArrayList))
          {
            paramArrayList = mapEnums.get(paramArrayList);
            if (paramArrayList != null) {
              paramViewGroup.setVisibility(((Integer)paramArrayList).intValue());
            }
          }
          paramArrayList = paramJson.getStr("content-description");
          if (!Util.empty(paramArrayList)) {
            paramViewGroup.setContentDescription(paramArrayList);
          }
          paramJson = paramJson.getStr("result-code");
          if (!Util.empty(paramJson))
          {
            if (!"ok".equalsIgnoreCase(paramJson)) {
              break label1920;
            }
            i = -1;
          }
        }
        break;
      }
      for (;;)
      {
        paramViewGroup.setOnClickListener(new JsonUiImpl.1(this, i));
        if (paramViewGroup.getId() == -1) {
          paramViewGroup.setId(1056964608 + this.rand.nextInt(16777215));
        }
        if (str1 != null) {
          this.views.put(str1, paramViewGroup);
        }
        return paramViewGroup;
        paramViewGroup = new TextView(this.activity);
        break;
        paramViewGroup = new Button(this.activity);
        break;
        paramViewGroup = new CheckBox(this.activity);
        paramViewGroup.setChecked(paramJson.getBool("checked"));
        break;
        localObject1 = new ProgressBar(this.activity);
        localObject2 = paramJson.getStr("indeterminateDrawable");
        paramViewGroup = (ViewGroup)localObject1;
        if (Util.empty((String)localObject2)) {
          break;
        }
        ((ProgressBar)localObject1).setIndeterminateDrawable(getDrawable((String)localObject2));
        paramViewGroup = (ViewGroup)localObject1;
        break;
        paramViewGroup = new Spinner(this.activity);
        break;
        localObject1 = new EditText(this.activity);
        localObject2 = paramJson.getStr("hint");
        paramViewGroup = (ViewGroup)localObject1;
        if (Util.empty((String)localObject2)) {
          break;
        }
        ((EditText)localObject1).setHint((CharSequence)localObject2);
        paramViewGroup = (ViewGroup)localObject1;
        break;
        localObject1 = localObject1[0];
        paramArrayList[3] = localObject1;
        paramArrayList[1] = localObject1;
        paramArrayList[2] = localObject1;
        paramArrayList[0] = localObject1;
        break label1395;
        localObject2 = localObject1[0];
        paramArrayList[2] = localObject2;
        paramArrayList[0] = localObject2;
        localObject1 = localObject1[1];
        paramArrayList[3] = localObject1;
        paramArrayList[1] = localObject1;
        break label1395;
        paramArrayList[0] = localObject1[0];
        paramArrayList[2] = localObject1[2];
        localObject1 = localObject1[1];
        paramArrayList[3] = localObject1;
        paramArrayList[1] = localObject1;
        break label1395;
        if (Build.VERSION.SDK_INT >= 16)
        {
          paramViewGroup.setBackground(getDrawable(paramArrayList));
          break label1480;
        }
        paramViewGroup.setBackgroundDrawable(getDrawable(paramArrayList));
        break label1480;
        label1920:
        if ("canceled".equalsIgnoreCase(paramJson)) {
          i = 0;
        } else {
          i = Integer.parseInt(paramJson);
        }
      }
      localObject1 = null;
    }
  }
  
  private int identifier(String paramString1, String paramString2)
  {
    return this.resources.getIdentifier(paramString1, paramString2, this.packageName);
  }
  
  @SuppressLint({"DefaultLocale"})
  private static final float parseDimension(Context paramContext, String paramString, float paramFloat)
  {
    float f;
    if (Util.empty(paramString)) {
      f = paramFloat;
    }
    Integer localInteger;
    do
    {
      do
      {
        return f;
        paramString = paramString.toLowerCase();
        localInteger = (Integer)mapEnums.get(paramString);
        if (localInteger != null) {
          f = paramFloat;
        }
        switch (localInteger.intValue())
        {
        case -2147483648: 
        default: 
          paramString = ptnDim.matcher(paramString);
          f = paramFloat;
        }
      } while (!paramString.matches());
      paramFloat = Float.parseFloat(paramString.group(1));
      paramString = paramString.group(2);
      f = paramFloat;
    } while ("px".equals(paramString));
    if (("sp".equals(paramString)) || ("sip".equals(paramString)))
    {
      return Util.sp2px(paramContext, paramFloat);
      return localInteger.intValue();
    }
    return Util.dp2px(paramContext, paramFloat);
  }
  
  private final int viewId(String paramString)
  {
    View localView = (View)this.views.get(paramString);
    if (localView == null) {
      return identifier(paramString, "id");
    }
    return localView.getId();
  }
  
  public void doCreate(UpayActivity paramUpayActivity, Json paramJson)
  {
    Log.i("JsonUiImpl", "doCreate");
    this.activity = paramUpayActivity;
    this.resources = paramUpayActivity.getResources();
    this.packageName = paramUpayActivity.getPackageName();
    if (paramJson.getBool("window-no-title")) {
      paramUpayActivity.requestWindowFeature(1);
    }
    if (paramJson.getBool("window-full-screen")) {
      paramUpayActivity.getWindow().setFlags(1024, 1024);
    }
    Object localObject1 = new ArrayList();
    View localView1 = getView(null, paramJson.getObject("content-view"), (ArrayList)localObject1);
    Iterator localIterator = ((ArrayList)localObject1).iterator();
    if (localIterator.hasNext())
    {
      paramJson = (Object[])localIterator.next();
      Object localObject2 = (Json)paramJson[0];
      View localView2 = (View)paramJson[1];
      localObject1 = localView2.getLayoutParams();
      paramJson = (Json)localObject1;
      if (localObject1 == null)
      {
        paramJson = localView2.getParent();
        if ((paramJson instanceof RelativeLayout)) {
          paramJson = new RelativeLayout.LayoutParams(0, 0);
        }
      }
      else
      {
        label176:
        float f = parseDimension(paramUpayActivity, ((Json)localObject2).getStr("width"), -2.14748365E9F);
        if (f != -2.14748365E9F) {
          paramJson.width = ((int)f);
        }
        f = parseDimension(paramUpayActivity, ((Json)localObject2).getStr("height"), -2.14748365E9F);
        if (f != -2.14748365E9F) {
          paramJson.height = ((int)f);
        }
        if (!(paramJson instanceof RelativeLayout.LayoutParams)) {
          break label433;
        }
        applyAligns((RelativeLayout.LayoutParams)paramJson, ((Json)localObject2).getStr("align"));
        label259:
        if ((paramJson instanceof ViewGroup.MarginLayoutParams))
        {
          localObject2 = ((Json)localObject2).getStr("margin");
          if (!Util.empty((String)localObject2))
          {
            localObject1 = new String[4];
            localObject2 = ((String)localObject2).trim().split("[ ]+");
            if (localObject2.length > 0) {
              switch (localObject2.length)
              {
              default: 
                localObject1 = localObject2;
              }
            }
          }
        }
      }
      for (;;)
      {
        ((ViewGroup.MarginLayoutParams)paramJson).setMargins((int)parseDimension(paramUpayActivity, localObject1[3], 0.0F), (int)parseDimension(paramUpayActivity, localObject1[0], 0.0F), (int)parseDimension(paramUpayActivity, localObject1[1], 0.0F), (int)parseDimension(paramUpayActivity, localObject1[2], 0.0F));
        localView2.setLayoutParams(paramJson);
        break;
        if ((paramJson instanceof LinearLayout))
        {
          paramJson = new LinearLayout.LayoutParams(0, 0);
          break label176;
        }
        paramJson = new ViewGroup.LayoutParams(0, 0);
        break label176;
        label433:
        if (!(paramJson instanceof LinearLayout.LayoutParams)) {
          break label259;
        }
        localObject1 = ((Json)localObject2).getStr("weight");
        if (!Util.empty((String)localObject1)) {
          ((LinearLayout.LayoutParams)paramJson).weight = Float.parseFloat((String)localObject1);
        }
        localObject1 = ((Json)localObject2).getStr("layout-gravity");
        if (Util.empty((String)localObject1)) {
          break label259;
        }
        localObject1 = mapGravities.get(localObject1);
        if (localObject1 == null) {
          break label259;
        }
        ((LinearLayout.LayoutParams)paramJson).gravity = ((Integer)localObject1).intValue();
        break label259;
        localObject2 = localObject2[0];
        localObject1[3] = localObject2;
        localObject1[1] = localObject2;
        localObject1[2] = localObject2;
        localObject1[0] = localObject2;
        continue;
        Object localObject3 = localObject2[0];
        localObject1[2] = localObject3;
        localObject1[0] = localObject3;
        localObject2 = localObject2[1];
        localObject1[3] = localObject2;
        localObject1[1] = localObject2;
        continue;
        localObject1[0] = localObject2[0];
        localObject1[2] = localObject2[2];
        localObject2 = localObject2[1];
        localObject1[3] = localObject2;
        localObject1[1] = localObject2;
      }
    }
    paramUpayActivity.setContentView(localView1);
  }
  
  public View findView(String paramString)
  {
    return (View)this.views.get(paramString);
  }
  
  public int getResultCode()
  {
    return this.resultCode;
  }
}
