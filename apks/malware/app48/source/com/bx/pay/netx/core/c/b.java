package com.bx.pay.netx.core.c;

import android.text.TextUtils;
import com.bx.pay.netx.core.ab;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolVersion;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.message.BasicStatusLine;

public final class b
  implements a
{
  private String a;
  private final SSLSocketFactory b = null;
  
  public b(String paramString)
  {
    this.a = paramString;
  }
  
  private static HttpEntity a(HttpURLConnection paramHttpURLConnection)
  {
    BasicHttpEntity localBasicHttpEntity = new BasicHttpEntity();
    try
    {
      InputStream localInputStream1 = paramHttpURLConnection.getInputStream();
      localBasicHttpEntity.setContent(localInputStream1);
      localBasicHttpEntity.setContentLength(paramHttpURLConnection.getContentLength());
      localBasicHttpEntity.setContentEncoding(paramHttpURLConnection.getContentEncoding());
      localBasicHttpEntity.setContentType(paramHttpURLConnection.getContentType());
      return localBasicHttpEntity;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        InputStream localInputStream2 = paramHttpURLConnection.getErrorStream();
      }
    }
  }
  
  private static void a(HttpURLConnection paramHttpURLConnection, ab paramAb)
  {
    byte[] arrayOfByte = paramAb.k();
    if (arrayOfByte != null)
    {
      paramHttpURLConnection.setDoOutput(true);
      paramHttpURLConnection.addRequestProperty("Content-Type", paramAb.b());
      paramHttpURLConnection = new DataOutputStream(paramHttpURLConnection.getOutputStream());
      paramHttpURLConnection.write(arrayOfByte);
      paramHttpURLConnection.close();
    }
  }
  
  public final HttpResponse a(ab paramAb)
  {
    Object localObject2 = new HashMap();
    if (!TextUtils.isEmpty(this.a)) {
      ((HashMap)localObject2).put("User-Agent", this.a);
    }
    ((HashMap)localObject2).putAll(paramAb.j());
    Object localObject3 = new URL(paramAb.d());
    if (paramAb.y() == null)
    {
      localObject1 = (HttpURLConnection)((URL)localObject3).openConnection();
      label69:
      int i = paramAb.p();
      ((HttpURLConnection)localObject1).setConnectTimeout(i);
      ((HttpURLConnection)localObject1).setReadTimeout(i);
      ((HttpURLConnection)localObject1).setUseCaches(false);
      ((HttpURLConnection)localObject1).setDoInput(true);
      if (("https".equals(((URL)localObject3).getProtocol())) && (this.b != null)) {
        ((HttpsURLConnection)localObject1).setSSLSocketFactory(this.b);
      }
      localObject3 = ((HashMap)localObject2).keySet().iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject3).hasNext()) {}
      switch (paramAb.c())
      {
      default: 
        throw new IllegalStateException("Unknown method type.");
        localObject1 = (HttpURLConnection)((URL)localObject3).openConnection(paramAb.y());
        break label69;
        String str = (String)((Iterator)localObject3).next();
        ((HttpURLConnection)localObject1).addRequestProperty(str, (String)((HashMap)localObject2).get(str));
      }
    }
    ((HttpURLConnection)localObject1).setRequestMethod("GET");
    while (((HttpURLConnection)localObject1).getResponseCode() == -1)
    {
      throw new IOException("Could not retrieve response code from HttpUrlConnection.");
      ((HttpURLConnection)localObject1).setRequestMethod("DELETE");
      continue;
      ((HttpURLConnection)localObject1).setRequestMethod("POST");
      a((HttpURLConnection)localObject1, paramAb);
      continue;
      ((HttpURLConnection)localObject1).setRequestMethod("PUT");
      a((HttpURLConnection)localObject1, paramAb);
      continue;
      ((HttpURLConnection)localObject1).setRequestMethod("HEAD");
      continue;
      ((HttpURLConnection)localObject1).setRequestMethod("OPTIONS");
      continue;
      ((HttpURLConnection)localObject1).setRequestMethod("TRACE");
      continue;
      a((HttpURLConnection)localObject1, paramAb);
      ((HttpURLConnection)localObject1).setRequestMethod("PATCH");
    }
    paramAb = new BasicHttpResponse(new BasicStatusLine(new ProtocolVersion("HTTP", 1, 1), ((HttpURLConnection)localObject1).getResponseCode(), ((HttpURLConnection)localObject1).getResponseMessage()));
    paramAb.setEntity(a((HttpURLConnection)localObject1));
    Object localObject1 = ((HttpURLConnection)localObject1).getHeaderFields().entrySet().iterator();
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext()) {
        return paramAb;
      }
      localObject2 = (Map.Entry)((Iterator)localObject1).next();
      if (((Map.Entry)localObject2).getKey() != null) {
        paramAb.addHeader(new BasicHeader((String)((Map.Entry)localObject2).getKey(), (String)((List)((Map.Entry)localObject2).getValue()).get(0)));
      }
    }
  }
}
