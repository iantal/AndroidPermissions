package ru.dtlbox.databasereader;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class OperaMiniHistoryReader
  extends BaseBrowserHistoryReader
{
  private static final byte BROWSERHISTORY = 114;
  private static final String SOURCE_DB = "/data/data/com.opera.mini.android/databases/operamini.db";
  private static final String TABLE = "rms";
  private static final String TAG = "backup.service";
  private static final String USING_DB_NAME = "operamini.sqlite";
  public int EMPTY_ID = 0;
  
  public OperaMiniHistoryReader(Config paramConfig)
  {
    Log.v("backup.service", "OperaMiniHistoryReader::init");
    init(paramConfig, "/data/data/com.opera.mini.android/databases/operamini.db", "operamini.sqlite");
  }
  
  private byte[] getLastInStore()
  {
    Log.v("backup.service", "OMH::getLastInStore");
    this.mDataBaseHelper.opendatabase();
    Object localObject = this.mDataBaseHelper.getDataBase().query("rms", new String[] { "record" }, "store = 'b_4' AND record_id = 1", null, null, null, null);
    ((Cursor)localObject).moveToLast();
    localObject = ((Cursor)localObject).getBlob(0);
    this.mDataBaseHelper.close();
    return localObject;
  }
  
  private static int intFromBytes(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 24 | (paramArrayOfByte[1] & 0xFF) << 16 | (paramArrayOfByte[2] & 0xFF) << 8 | paramArrayOfByte[3] & 0xFF;
  }
  
  private static List<OperaMiniHistoryRecord> readBinary(byte[] paramArrayOfByte)
    throws IOException
  {
    ArrayList localArrayList = new ArrayList();
    Log.v("backup.service", "OMH::readBinary");
    byte[] arrayOfByte = (byte[])null;
    Object localObject = new byte[3];
    arrayOfByte = new byte[6];
    paramArrayOfByte = new ByteArrayInputStream(paramArrayOfByte);
    paramArrayOfByte.read((byte[])localObject);
    localObject = new OperaMiniHistoryRecord(null);
    int i = paramArrayOfByte.read();
    if (i == -1) {
      return localArrayList;
    }
    int j = ByteWorking.intFromTwoBytes((byte)i, (byte)paramArrayOfByte.read());
    if (j != 0) {}
    for (i = 1;; i = 0)
    {
      ((OperaMiniHistoryRecord)localObject).url = readString(paramArrayOfByte, j);
      ((OperaMiniHistoryRecord)localObject).title = readString(paramArrayOfByte, 0);
      if (i != 0) {
        readString(paramArrayOfByte, 0);
      }
      ((OperaMiniHistoryRecord)localObject).timestamp = (readInt(paramArrayOfByte) * 1000L);
      localArrayList.add(localObject);
      paramArrayOfByte.read(arrayOfByte);
      i = ByteWorking.intFromTwoBytes((byte)paramArrayOfByte.read(), (byte)paramArrayOfByte.read());
      localObject = new byte[i];
      if ((i == 0) || (paramArrayOfByte.read((byte[])localObject) > 0)) {
        break;
      }
      return localArrayList;
    }
  }
  
  private static int readInt(ByteArrayInputStream paramByteArrayInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[4];
    paramByteArrayInputStream.read(arrayOfByte);
    return intFromBytes(arrayOfByte);
  }
  
  private static String readString(ByteArrayInputStream paramByteArrayInputStream, int paramInt)
    throws IOException
  {
    int i = paramInt;
    if (paramInt == 0) {
      i = ByteWorking.intFromTwoBytes((byte)paramByteArrayInputStream.read(), (byte)paramByteArrayInputStream.read());
    }
    byte[] arrayOfByte = new byte[i];
    paramByteArrayInputStream.read(arrayOfByte);
    return new String(arrayOfByte);
  }
  
  public byte[] bytes()
  {
    return getLastInStore();
  }
  
  public void logIt()
  {
    Object localObject = getLastInStore();
    try
    {
      localObject = readBinary((byte[])localObject).iterator();
      for (;;)
      {
        if (!((Iterator)localObject).hasNext()) {
          return;
        }
        Log.v("backup.service", ((OperaMiniHistoryRecord)((Iterator)localObject).next()).toString());
      }
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public void lookAtTable(String paramString1, String paramString2)
  {
    this.mDataBaseHelper.opendatabase();
    SQLiteDatabase localSQLiteDatabase = this.mDataBaseHelper.getDataBase();
    String[] arrayOfString = localSQLiteDatabase.query(paramString1, null, null, null, null, null, null).getColumnNames();
    paramString1 = localSQLiteDatabase.query(paramString1, arrayOfString, paramString2, null, null, null, null, null);
    int i = 0;
    Log.v("backup.service", "OMH::");
    Log.v("backup.service", "OMH::" + String.valueOf(paramString1.getCount()));
    if (!paramString1.moveToNext())
    {
      this.mDataBaseHelper.close();
      return;
    }
    paramString2 = new StringBuilder();
    int j = 0;
    for (;;)
    {
      if (j >= arrayOfString.length)
      {
        Log.w(String.valueOf(i), paramString2.toString());
        i += 1;
        break;
      }
      try
      {
        paramString2.append("| " + arrayOfString[j] + " : " + paramString1.getString(j) + " ");
        j += 1;
      }
      catch (Exception localException1)
      {
        for (;;)
        {
          try
          {
            paramString2.append("| " + arrayOfString[j] + " : " + new String(paramString1.getBlob(j)) + " ");
          }
          catch (Exception localException2) {}
        }
      }
    }
  }
  
  @Deprecated
  public int read(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    return 0;
  }
  
  public long readHistory(OutputStream paramOutputStream, long paramLong)
  {
    Log.v("backup.service", "OMH::init " + paramLong);
    long l = System.currentTimeMillis() / 1000L;
    Object localObject = getLastInStore();
    int i = 1;
    try
    {
      localObject = readBinary((byte[])localObject);
      Log.v("backup.service", "OMH::list " + ((List)localObject).size());
      if (((List)localObject).size() == 0) {
        return 0L;
      }
      paramOutputStream.write(114);
      localObject = ((List)localObject).iterator();
      for (;;)
      {
        if (!((Iterator)localObject).hasNext())
        {
          paramOutputStream.write(2);
          paramLong = l;
          if (i == 0) {
            break;
          }
          return 0L;
        }
        OperaMiniHistoryRecord localOperaMiniHistoryRecord = (OperaMiniHistoryRecord)((Iterator)localObject).next();
        if (localOperaMiniHistoryRecord.timestamp / 1000L > paramLong)
        {
          Log.v("backup.service", "OMH::list " + localOperaMiniHistoryRecord.url);
          i = 0;
          addData(paramOutputStream, String.valueOf(localOperaMiniHistoryRecord.timestamp / 1000L));
          addData(paramOutputStream, localOperaMiniHistoryRecord.title);
          addData(paramOutputStream, localOperaMiniHistoryRecord.url);
          paramOutputStream.write(3);
        }
      }
      return paramLong;
    }
    catch (IOException paramOutputStream) {}
  }
  
  private static class OperaMiniHistoryRecord
  {
    long timestamp;
    String title;
    String url;
    
    private OperaMiniHistoryRecord() {}
    
    public String toString()
    {
      return this.title + " | " + this.url + " | " + this.timestamp;
    }
  }
}
