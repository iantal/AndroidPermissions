package ru.dtlbox.databasereader;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public abstract class BaseBrowserHistoryReader
{
  public static boolean DEBUG_MODE = false;
  final byte ATTACH_PACKET = 99;
  final byte END_OF_BLOCK = 2;
  final byte END_OF_FIELD = 1;
  final byte END_OF_LINE = 3;
  protected int count = 100;
  protected DataBaseHelper mDataBaseHelper;
  
  public BaseBrowserHistoryReader() {}
  
  protected void addData(OutputStream paramOutputStream, String paramString)
  {
    if (paramOutputStream == null) {
      return;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (str != null) {}
    try
    {
      paramOutputStream.write(str.getBytes());
      paramOutputStream.write(1);
      return;
    }
    catch (Exception paramOutputStream)
    {
      Log.e("data not added", str);
    }
  }
  
  protected void init(Config paramConfig, String paramString1, String paramString2)
  {
    paramConfig = new DataBaseHelper.DataBaseHelperParams(paramString1, paramConfig.getCachePath(), paramString2);
    try
    {
      this.mDataBaseHelper = new DataBaseHelper(paramConfig);
      return;
    }
    catch (IOException paramConfig) {}
  }
  
  public void lookAtMe()
  {
    this.mDataBaseHelper.opendatabase();
    SQLiteDatabase localSQLiteDatabase = this.mDataBaseHelper.getDataBase();
    Object localObject1 = localSQLiteDatabase.rawQuery("SELECT name FROM sqlite_master WHERE type='table'", null);
    Object localObject2 = new ArrayList();
    Log.d("cursor count", String.valueOf(((Cursor)localObject1).getCount()));
    if (!((Cursor)localObject1).moveToNext()) {
      localObject1 = ((List)localObject2).iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext())
      {
        this.mDataBaseHelper.close();
        return;
        ((List)localObject2).add(((Cursor)localObject1).getString(0));
        break;
      }
      localObject2 = (String)((Iterator)localObject1).next();
      Log.v("Table Name", (String)localObject2);
      localObject2 = localSQLiteDatabase.query((String)localObject2, null, null, null, null, null, null).getColumnNames();
      int j = localObject2.length;
      int i = 0;
      while (i < j)
      {
        String str = localObject2[i];
        Log.i("Column", str);
        i += 1;
      }
    }
  }
  
  public void lookAtTable(String paramString)
  {
    this.mDataBaseHelper.opendatabase();
    Object localObject = this.mDataBaseHelper.getDataBase();
    String[] arrayOfString = ((SQLiteDatabase)localObject).query(paramString, null, null, null, null, null, null).getColumnNames();
    paramString = ((SQLiteDatabase)localObject).query(paramString, arrayOfString, null, null, null, null, null, null);
    int i = 0;
    Log.w("COUNT", String.valueOf(paramString.getCount()));
    if (!paramString.moveToNext())
    {
      this.mDataBaseHelper.close();
      return;
    }
    localObject = new StringBuilder();
    int j = 0;
    for (;;)
    {
      if (j >= arrayOfString.length)
      {
        Log.w(String.valueOf(i), ((StringBuilder)localObject).toString());
        i += 1;
        break;
      }
      try
      {
        ((StringBuilder)localObject).append("| " + arrayOfString[j] + " : " + paramString.getString(j) + " ");
        j += 1;
      }
      catch (Exception localException1)
      {
        for (;;)
        {
          try
          {
            ((StringBuilder)localObject).append("| " + arrayOfString[j] + " : " + new String(paramString.getBlob(j)) + " ");
          }
          catch (Exception localException2) {}
        }
      }
    }
  }
  
  public abstract int read(OutputStream paramOutputStream, int paramInt)
    throws IOException;
  
  public void setCount(int paramInt)
  {
    this.count = paramInt;
  }
  
  public boolean update()
  {
    if (this.mDataBaseHelper != null) {
      return this.mDataBaseHelper.updateDataBase();
    }
    return false;
  }
}
