package com.advert.data;

import android.graphics.BitmapFactory;
import android.util.Log;
import com.advert.Constants;
import com.advert.data.json.AdJsonParser;
import com.advert.data.json.JsonParser;
import com.advert.http.HttpClient;
import com.advert.task.DataConsumer;
import com.advert.task.DataOperation;
import com.advert.task.DataTask;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

public class ConnectionDataManager
  implements Constants
{
  public static final String TAG = ConnectionDataManager.class.getName();
  
  private ConnectionDataManager() {}
  
  private static JSONObject getJson(int paramInt)
  {
    switch (paramInt)
    {
    }
    for (;;)
    {
      return null;
      try
      {
        JSONObject localJSONObject = new JSONObject();
        localJSONObject.put("cid", "26858366B9D87600482E1998ECE800C6");
        localJSONObject.put("lang", Locale.getDefault().getLanguage());
        if (DataManager.getInstance().isTablet())
        {
          String str = "t";
          localJSONObject.put("type", str);
          localJSONObject.put("is_first_time_launched", DataManager.isFirstTimeLaunched);
          localJSONObject.put("application_type", DataManager.applicationType);
          localJSONObject.put("application_release_version", DataManager.releaseVersion);
          return localJSONObject;
        }
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          localJSONException.printStackTrace();
          break;
          localObject = "p";
        }
        Object localObject = new JSONObject();
        ((JSONObject)localObject).put("cid", DataManager.getInstance().getDeviceId());
        ((JSONObject)localObject).put("aid", DataManager.getInstance().getCurrentAdId());
        ((JSONObject)localObject).put("is_first_time_launched", DataManager.isFirstTimeLaunched);
        ((JSONObject)localObject).put("application_type", DataManager.applicationType);
        ((JSONObject)localObject).put("application_release_version", DataManager.releaseVersion);
        return localObject;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private static JsonParser getJsonParser(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return null;
    }
    return new AdJsonParser();
  }
  
  private static String getUrl(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "";
    case 0: 
      return "http://188.240.34.210/pushest.php";
    case 1: 
      return "http://188.240.34.210/show.php";
    }
    return "http://188.240.34.210/cancel.php";
  }
  
  public static void postDataToUrl(DataConsumer paramDataConsumer, int paramInt)
  {
    DataOperation local1 = new DataOperation()
    {
      public int getEventType()
      {
        return this.val$dataEventType;
      }
      
      public Object launch()
        throws IOException, JSONException
      {
        Object localObject = HttpClient.getInstance();
        String str = ConnectionDataManager.getUrl(this.val$dataEventType);
        Log.d("@@@", "url is :" + str);
        str = ((HttpClient)localObject).post(ConnectionDataManager.getUrl(this.val$dataEventType), ConnectionDataManager.getJson(this.val$dataEventType));
        Log.d(ConnectionDataManager.TAG, "Server responce\n" + str);
        JsonParser localJsonParser = ConnectionDataManager.getJsonParser(this.val$dataEventType);
        localObject = str;
        if (localJsonParser != null) {
          localObject = localJsonParser.parseJson(str);
        }
        return localObject;
      }
    };
    new DataTask(paramDataConsumer).execute(new DataOperation[] { local1 });
  }
  
  public void getImage(DataConsumer paramDataConsumer, final int paramInt, final String paramString)
  {
    paramString = new DataOperation()
    {
      public int getEventType()
      {
        return paramInt;
      }
      
      public Object launch()
        throws IOException, JSONException
      {
        return BitmapFactory.decodeStream(new URL(paramString).openConnection().getInputStream());
      }
    };
    new DataTask(paramDataConsumer).execute(new DataOperation[] { paramString });
  }
}
