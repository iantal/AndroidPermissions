package com.advert.http;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.conn.scheme.LayeredSocketFactory;
import org.apache.http.conn.scheme.SocketFactory;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class CustomSSLSocketFactory
  implements SocketFactory, LayeredSocketFactory
{
  private static final String SSL_PROTOCOL_NAME = "TLS";
  private SSLContext sslContext = null;
  
  public CustomSSLSocketFactory() {}
  
  private static SSLContext createSSLContext()
    throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException
  {
    SSLContext localSSLContext = SSLContext.getInstance("TLS");
    localSSLContext.init(null, new TrustManager[] { new CustomX509TrustManager(null) }, null);
    return localSSLContext;
  }
  
  private SSLContext getSSLContext()
    throws IOException
  {
    if (this.sslContext == null) {}
    try
    {
      this.sslContext = createSSLContext();
      return this.sslContext;
    }
    catch (KeyManagementException localKeyManagementException)
    {
      throw new IOException(localKeyManagementException.getLocalizedMessage());
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      throw new IOException(localNoSuchAlgorithmException.getLocalizedMessage());
    }
    catch (KeyStoreException localKeyStoreException)
    {
      throw new IOException(localKeyStoreException.getLocalizedMessage());
    }
  }
  
  public Socket connectSocket(Socket paramSocket, String paramString, int paramInt1, InetAddress paramInetAddress, int paramInt2, HttpParams paramHttpParams)
    throws IOException, UnknownHostException, ConnectTimeoutException
  {
    int i = HttpConnectionParams.getConnectionTimeout(paramHttpParams);
    int j = HttpConnectionParams.getSoTimeout(paramHttpParams);
    paramString = new InetSocketAddress(paramString, paramInt1);
    if (paramSocket != null) {}
    for (paramSocket = (SSLSocket)paramSocket;; paramSocket = (SSLSocket)createSocket())
    {
      paramSocket.bind(new InetSocketAddress(paramInetAddress, paramInt2));
      paramSocket.connect(paramString, i);
      paramSocket.setSoTimeout(j);
      return paramSocket;
    }
  }
  
  public Socket createSocket()
    throws IOException
  {
    return getSSLContext().getSocketFactory().createSocket();
  }
  
  public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
    throws IOException, UnknownHostException
  {
    return getSSLContext().getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
  }
  
  public boolean isSecure(Socket paramSocket)
    throws IllegalArgumentException
  {
    return true;
  }
}
