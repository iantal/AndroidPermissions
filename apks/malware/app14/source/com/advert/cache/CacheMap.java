package com.advert.cache;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

public class CacheMap<T extends BaseCacheModel>
{
  private Long expiration;
  private List<String> keys;
  private HashMap<String, T> map;
  private int realSize;
  private int reservedSize;
  
  public CacheMap(int paramInt, Long paramLong)
  {
    this.reservedSize = paramInt;
    this.expiration = paramLong;
    this.map = new HashMap();
    this.keys = new ArrayList();
  }
  
  private void add(String paramString, T paramT)
  {
    Integer localInteger = paramT.getSize();
    int i = paramString.getBytes().length;
    this.realSize += localInteger.intValue();
    this.realSize += i;
    this.keys.add(paramString);
    this.map.put(paramString, paramT);
  }
  
  /* Error */
  public void clear(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: iconst_0
    //   3: istore_2
    //   4: aload_0
    //   5: getfield 35	com/advert/cache/CacheMap:keys	Ljava/util/List;
    //   8: invokeinterface 74 1 0
    //   13: istore_3
    //   14: iload_2
    //   15: iload_3
    //   16: iload_1
    //   17: isub
    //   18: if_icmplt +6 -> 24
    //   21: aload_0
    //   22: monitorexit
    //   23: return
    //   24: aload_0
    //   25: getfield 30	com/advert/cache/CacheMap:map	Ljava/util/HashMap;
    //   28: aload_0
    //   29: getfield 35	com/advert/cache/CacheMap:keys	Ljava/util/List;
    //   32: iconst_0
    //   33: invokeinterface 78 2 0
    //   38: invokevirtual 81	java/util/HashMap:remove	(Ljava/lang/Object;)Ljava/lang/Object;
    //   41: checkcast 40	com/advert/cache/BaseCacheModel
    //   44: invokevirtual 84	com/advert/cache/BaseCacheModel:dispose	()V
    //   47: iload_2
    //   48: iconst_1
    //   49: iadd
    //   50: istore_2
    //   51: goto -37 -> 14
    //   54: astore 4
    //   56: aload_0
    //   57: monitorexit
    //   58: aload 4
    //   60: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	61	0	this	CacheMap
    //   0	61	1	paramInt	int
    //   3	48	2	i	int
    //   13	5	3	j	int
    //   54	5	4	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   4	14	54	finally
    //   24	47	54	finally
  }
  
  public T get(String paramString)
  {
    BaseCacheModel localBaseCacheModel2 = (BaseCacheModel)this.map.get(paramString);
    BaseCacheModel localBaseCacheModel1 = localBaseCacheModel2;
    if (localBaseCacheModel2 != null)
    {
      localBaseCacheModel1 = localBaseCacheModel2;
      if (!isValid(localBaseCacheModel2).booleanValue())
      {
        remove(paramString, localBaseCacheModel2);
        localBaseCacheModel1 = null;
      }
    }
    return localBaseCacheModel1;
  }
  
  public int getRealSize()
  {
    return this.realSize;
  }
  
  public Boolean isValid(T paramT)
  {
    if (Long.valueOf(new Date().getTime() - paramT.getSaveDate().longValue()).longValue() < this.expiration.longValue()) {}
    for (boolean bool = true;; bool = false) {
      return Boolean.valueOf(bool);
    }
  }
  
  public void put(String paramString, T paramT)
  {
    if (this.keys.contains(paramString)) {
      remove(paramString, (BaseCacheModel)this.map.get(paramString));
    }
    int i = 0;
    for (;;)
    {
      if (i >= this.keys.size()) {}
      while (this.realSize <= this.reservedSize)
      {
        add(paramString, paramT);
        return;
      }
      String str = (String)this.keys.get(i);
      remove(str, (BaseCacheModel)this.map.get(str));
      i += 1;
    }
  }
  
  protected T remove(String paramString, T paramT)
  {
    this.realSize -= ((BaseCacheModel)this.map.get(paramString)).getSize().intValue() + paramString.getBytes().length;
    this.keys.remove(paramString);
    return (BaseCacheModel)this.map.remove(paramString);
  }
}
