package com.jeremyfeinstein.slidingmenu.lib;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.Log;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import java.lang.reflect.Method;

public class SlidingMenu
  extends RelativeLayout
{
  private boolean a = false;
  private CustomViewAbove b;
  private CustomViewBehind c;
  private n d;
  private l e;
  private Handler f = new Handler();
  
  public SlidingMenu(Activity paramActivity, int paramInt)
  {
    this(paramActivity, null);
    a(paramActivity, paramInt);
  }
  
  public SlidingMenu(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SlidingMenu(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public SlidingMenu(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-1, -1);
    this.c = new CustomViewBehind(paramContext);
    addView(this.c, localLayoutParams);
    localLayoutParams = new RelativeLayout.LayoutParams(-1, -1);
    this.b = new CustomViewAbove(paramContext);
    addView(this.b, localLayoutParams);
    this.b.setCustomViewBehind(this.c);
    this.c.setCustomViewAbove(this.b);
    this.b.setOnPageChangeListener(new i(this));
    paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, h.SlidingMenu);
    setMode(paramAttributeSet.getInt(0, 0));
    paramInt = paramAttributeSet.getResourceId(1, -1);
    if (paramInt != -1)
    {
      setContent(paramInt);
      paramInt = paramAttributeSet.getResourceId(2, -1);
      if (paramInt == -1) {
        break label256;
      }
      setMenu(paramInt);
    }
    int i;
    for (;;)
    {
      setTouchModeAbove(paramAttributeSet.getInt(6, 0));
      setTouchModeBehind(paramAttributeSet.getInt(7, 0));
      paramInt = (int)paramAttributeSet.getDimension(3, -1.0F);
      i = (int)paramAttributeSet.getDimension(4, -1.0F);
      if ((paramInt == -1) || (i == -1)) {
        break label271;
      }
      throw new IllegalStateException("Cannot set both behindOffset and behindWidth for a SlidingMenu");
      setContent(new FrameLayout(paramContext));
      break;
      label256:
      setMenu(new FrameLayout(paramContext));
    }
    label271:
    if (paramInt != -1) {
      setBehindOffset(paramInt);
    }
    for (;;)
    {
      setBehindScrollScale(paramAttributeSet.getFloat(5, 0.33F));
      paramInt = paramAttributeSet.getResourceId(8, -1);
      if (paramInt != -1) {
        setShadowDrawable(paramInt);
      }
      setShadowWidth((int)paramAttributeSet.getDimension(9, 0.0F));
      setFadeEnabled(paramAttributeSet.getBoolean(10, true));
      setFadeDegree(paramAttributeSet.getFloat(11, 0.33F));
      setSelectorEnabled(paramAttributeSet.getBoolean(12, false));
      paramInt = paramAttributeSet.getResourceId(13, -1);
      if (paramInt != -1) {
        setSelectorDrawable(paramInt);
      }
      paramAttributeSet.recycle();
      return;
      if (i != -1) {
        setBehindWidth(i);
      } else {
        setBehindOffset(0);
      }
    }
  }
  
  public void a()
  {
    a(true);
  }
  
  @TargetApi(11)
  public void a(float paramFloat)
  {
    int j = 0;
    if (Build.VERSION.SDK_INT < 11) {
      return;
    }
    if ((paramFloat > 0.0F) && (paramFloat < 1.0F)) {}
    for (int i = 1;; i = 0)
    {
      if (i != 0) {
        j = 2;
      }
      if (j == getContent().getLayerType()) {
        break;
      }
      this.f.post(new j(this, j));
      return;
    }
  }
  
  public void a(Activity paramActivity, int paramInt)
  {
    a(paramActivity, paramInt, false);
  }
  
  public void a(Activity paramActivity, int paramInt, boolean paramBoolean)
  {
    if ((paramInt != 0) && (paramInt != 1)) {
      throw new IllegalArgumentException("slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT");
    }
    if (getParent() != null) {
      throw new IllegalStateException("This SlidingMenu appears to already be attached");
    }
    Object localObject = paramActivity.getTheme().obtainStyledAttributes(new int[] { 16842836 });
    int i = ((TypedArray)localObject).getResourceId(0, 0);
    ((TypedArray)localObject).recycle();
    switch (paramInt)
    {
    }
    do
    {
      return;
      this.a = false;
      paramActivity = (ViewGroup)paramActivity.getWindow().getDecorView();
      localObject = (ViewGroup)paramActivity.getChildAt(0);
      ((ViewGroup)localObject).setBackgroundResource(i);
      paramActivity.removeView((View)localObject);
      paramActivity.addView(this);
      setContent((View)localObject);
      return;
      this.a = paramBoolean;
      paramActivity = (ViewGroup)paramActivity.findViewById(16908290);
      localObject = paramActivity.getChildAt(0);
      paramActivity.removeView((View)localObject);
      paramActivity.addView(this);
      setContent((View)localObject);
    } while (((View)localObject).getBackground() != null);
    ((View)localObject).setBackgroundResource(i);
  }
  
  public void a(boolean paramBoolean)
  {
    this.b.a(0, paramBoolean);
  }
  
  public void b()
  {
    c(true);
  }
  
  public void b(boolean paramBoolean)
  {
    this.b.a(2, paramBoolean);
  }
  
  public void c(boolean paramBoolean)
  {
    this.b.a(1, paramBoolean);
  }
  
  public boolean c()
  {
    return (this.b.getCurrentItem() == 0) || (this.b.getCurrentItem() == 2);
  }
  
  public boolean d()
  {
    return this.b.getCurrentItem() == 2;
  }
  
  @SuppressLint({"NewApi"})
  protected boolean fitSystemWindows(Rect paramRect)
  {
    int i = paramRect.left;
    int j = paramRect.right;
    int k = paramRect.top;
    int m = paramRect.bottom;
    if (!this.a)
    {
      Log.v("SlidingMenu", "setting padding!");
      setPadding(i, k, j, m);
    }
    return true;
  }
  
  public int getBehindOffset()
  {
    return ((RelativeLayout.LayoutParams)this.c.getLayoutParams()).rightMargin;
  }
  
  public float getBehindScrollScale()
  {
    return this.c.getScrollScale();
  }
  
  public View getContent()
  {
    return this.b.getContent();
  }
  
  public View getMenu()
  {
    return this.c.getContent();
  }
  
  public int getMode()
  {
    return this.c.getMode();
  }
  
  public View getSecondaryMenu()
  {
    return this.c.getSecondaryContent();
  }
  
  public int getTouchModeAbove()
  {
    return this.b.getTouchMode();
  }
  
  public int getTouchmodeMarginThreshold()
  {
    return this.c.getMarginThreshold();
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    paramParcelable = (SlidingMenu.SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    this.b.setCurrentItem(paramParcelable.a());
  }
  
  protected Parcelable onSaveInstanceState()
  {
    return new SlidingMenu.SavedState(super.onSaveInstanceState(), this.b.getCurrentItem());
  }
  
  public void setAboveOffset(int paramInt)
  {
    this.b.setAboveOffset(paramInt);
  }
  
  public void setAboveOffsetRes(int paramInt)
  {
    setAboveOffset((int)getContext().getResources().getDimension(paramInt));
  }
  
  public void setBehindCanvasTransformer(k paramK)
  {
    this.c.setCanvasTransformer(paramK);
  }
  
  public void setBehindOffset(int paramInt)
  {
    this.c.setWidthOffset(paramInt);
  }
  
  public void setBehindOffsetRes(int paramInt)
  {
    setBehindOffset((int)getContext().getResources().getDimension(paramInt));
  }
  
  public void setBehindScrollScale(float paramFloat)
  {
    if ((paramFloat < 0.0F) && (paramFloat > 1.0F)) {
      throw new IllegalStateException("ScrollScale must be between 0 and 1");
    }
    this.c.setScrollScale(paramFloat);
  }
  
  public void setBehindWidth(int paramInt)
  {
    Display localDisplay = ((WindowManager)getContext().getSystemService("window")).getDefaultDisplay();
    try
    {
      Point localPoint = new Point();
      Display.class.getMethod("getSize", new Class[] { Point.class }).invoke(localDisplay, new Object[] { localPoint });
      i = localPoint.x;
      setBehindOffset(i - paramInt);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        int i = localDisplay.getWidth();
      }
    }
  }
  
  public void setBehindWidthRes(int paramInt)
  {
    setBehindWidth((int)getContext().getResources().getDimension(paramInt));
  }
  
  public void setContent(int paramInt)
  {
    setContent(LayoutInflater.from(getContext()).inflate(paramInt, null));
  }
  
  public void setContent(View paramView)
  {
    this.b.setContent(paramView);
    b();
  }
  
  public void setFadeDegree(float paramFloat)
  {
    this.c.setFadeDegree(paramFloat);
  }
  
  public void setFadeEnabled(boolean paramBoolean)
  {
    this.c.setFadeEnabled(paramBoolean);
  }
  
  public void setMenu(int paramInt)
  {
    setMenu(LayoutInflater.from(getContext()).inflate(paramInt, null));
  }
  
  public void setMenu(View paramView)
  {
    this.c.setContent(paramView);
  }
  
  public void setMode(int paramInt)
  {
    if ((paramInt != 0) && (paramInt != 1) && (paramInt != 2)) {
      throw new IllegalStateException("SlidingMenu mode must be LEFT, RIGHT, or LEFT_RIGHT");
    }
    this.c.setMode(paramInt);
  }
  
  public void setOnCloseListener(l paramL)
  {
    this.e = paramL;
  }
  
  public void setOnClosedListener(m paramM)
  {
    this.b.setOnClosedListener(paramM);
  }
  
  public void setOnOpenListener(n paramN)
  {
    this.d = paramN;
  }
  
  public void setOnOpenedListener(o paramO)
  {
    this.b.setOnOpenedListener(paramO);
  }
  
  public void setSecondaryMenu(int paramInt)
  {
    setSecondaryMenu(LayoutInflater.from(getContext()).inflate(paramInt, null));
  }
  
  public void setSecondaryMenu(View paramView)
  {
    this.c.setSecondaryContent(paramView);
  }
  
  public void setSecondaryShadowDrawable(int paramInt)
  {
    setSecondaryShadowDrawable(getContext().getResources().getDrawable(paramInt));
  }
  
  public void setSecondaryShadowDrawable(Drawable paramDrawable)
  {
    this.c.setSecondaryShadowDrawable(paramDrawable);
  }
  
  public void setSelectedView(View paramView)
  {
    this.c.setSelectedView(paramView);
  }
  
  public void setSelectorBitmap(Bitmap paramBitmap)
  {
    this.c.setSelectorBitmap(paramBitmap);
  }
  
  public void setSelectorDrawable(int paramInt)
  {
    this.c.setSelectorBitmap(BitmapFactory.decodeResource(getResources(), paramInt));
  }
  
  public void setSelectorEnabled(boolean paramBoolean)
  {
    this.c.setSelectorEnabled(true);
  }
  
  public void setShadowDrawable(int paramInt)
  {
    setShadowDrawable(getContext().getResources().getDrawable(paramInt));
  }
  
  public void setShadowDrawable(Drawable paramDrawable)
  {
    this.c.setShadowDrawable(paramDrawable);
  }
  
  public void setShadowWidth(int paramInt)
  {
    this.c.setShadowWidth(paramInt);
  }
  
  public void setShadowWidthRes(int paramInt)
  {
    setShadowWidth((int)getResources().getDimension(paramInt));
  }
  
  public void setSlidingEnabled(boolean paramBoolean)
  {
    this.b.setSlidingEnabled(paramBoolean);
  }
  
  public void setStatic(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      setSlidingEnabled(false);
      this.b.setCustomViewBehind(null);
      this.b.setCurrentItem(1);
      return;
    }
    this.b.setCurrentItem(1);
    this.b.setCustomViewBehind(this.c);
    setSlidingEnabled(true);
  }
  
  public void setTouchModeAbove(int paramInt)
  {
    if ((paramInt != 1) && (paramInt != 0) && (paramInt != 2)) {
      throw new IllegalStateException("TouchMode must be set to eitherTOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN or TOUCHMODE_NONE.");
    }
    this.b.setTouchMode(paramInt);
  }
  
  public void setTouchModeBehind(int paramInt)
  {
    if ((paramInt != 1) && (paramInt != 0) && (paramInt != 2)) {
      throw new IllegalStateException("TouchMode must be set to eitherTOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN or TOUCHMODE_NONE.");
    }
    this.c.setTouchMode(paramInt);
  }
  
  public void setTouchmodeMarginThreshold(int paramInt)
  {
    this.c.setMarginThreshold(paramInt);
  }
}
