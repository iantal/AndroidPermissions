package de.tavendo.autobahn;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Base64;
import android.util.Log;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import org.apache.http.NameValuePair;

public class WebSocketWriter
  extends Handler
{
  private static final boolean DEBUG = true;
  private static final String TAG = WebSocketWriter.class.getName();
  private final ByteBufferOutputStream mBuffer;
  private final Looper mLooper;
  private final Handler mMaster;
  private final WebSocketOptions mOptions;
  private final Random mRng = new Random();
  private final SocketChannel mSocket;
  
  public WebSocketWriter(Looper paramLooper, Handler paramHandler, SocketChannel paramSocketChannel, WebSocketOptions paramWebSocketOptions)
  {
    super(paramLooper);
    this.mLooper = paramLooper;
    this.mMaster = paramHandler;
    this.mSocket = paramSocketChannel;
    this.mOptions = paramWebSocketOptions;
    this.mBuffer = new ByteBufferOutputStream(paramWebSocketOptions.getMaxFramePayloadSize() + 14, 262144);
    Log.d(TAG, "created");
  }
  
  private byte[] newFrameMask()
  {
    byte[] arrayOfByte = new byte[4];
    this.mRng.nextBytes(arrayOfByte);
    return arrayOfByte;
  }
  
  private String newHandshakeKey()
  {
    byte[] arrayOfByte = new byte[16];
    this.mRng.nextBytes(arrayOfByte);
    return Base64.encodeToString(arrayOfByte, 2);
  }
  
  private void notify(Object paramObject)
  {
    Message localMessage = this.mMaster.obtainMessage();
    localMessage.obj = paramObject;
    this.mMaster.sendMessage(localMessage);
  }
  
  private void sendBinaryMessage(WebSocketMessage.BinaryMessage paramBinaryMessage)
  {
    if (paramBinaryMessage.mPayload.length > this.mOptions.getMaxMessagePayloadSize()) {
      throw new WebSocketException("message payload exceeds payload limit");
    }
    sendFrame(2, true, paramBinaryMessage.mPayload);
  }
  
  private void sendClientHandshake(WebSocketMessage.ClientHandshake paramClientHandshake)
  {
    Object localObject;
    int i;
    if (paramClientHandshake.mQuery != null)
    {
      localObject = paramClientHandshake.mPath + "?" + paramClientHandshake.mQuery;
      this.mBuffer.write("GET " + (String)localObject + " HTTP/1.1");
      this.mBuffer.crlf();
      this.mBuffer.write("Host: " + paramClientHandshake.mHost);
      this.mBuffer.crlf();
      this.mBuffer.write("Upgrade: WebSocket");
      this.mBuffer.crlf();
      this.mBuffer.write("Connection: Upgrade");
      this.mBuffer.crlf();
      this.mBuffer.write("Sec-WebSocket-Key: " + newHandshakeKey());
      this.mBuffer.crlf();
      if ((paramClientHandshake.mOrigin != null) && (!paramClientHandshake.mOrigin.equals("")))
      {
        this.mBuffer.write("Origin: " + paramClientHandshake.mOrigin);
        this.mBuffer.crlf();
      }
      if ((paramClientHandshake.mSubprotocols != null) && (paramClientHandshake.mSubprotocols.length > 0))
      {
        this.mBuffer.write("Sec-WebSocket-Protocol: ");
        i = 0;
        label248:
        if (i < paramClientHandshake.mSubprotocols.length) {
          break label322;
        }
        this.mBuffer.crlf();
      }
      this.mBuffer.write("Sec-WebSocket-Version: 13");
      this.mBuffer.crlf();
      if (paramClientHandshake.mHeaderList != null) {
        paramClientHandshake = paramClientHandshake.mHeaderList.iterator();
      }
    }
    for (;;)
    {
      if (!paramClientHandshake.hasNext())
      {
        this.mBuffer.crlf();
        return;
        localObject = paramClientHandshake.mPath;
        break;
        label322:
        this.mBuffer.write(paramClientHandshake.mSubprotocols[i]);
        if (i != paramClientHandshake.mSubprotocols.length - 1) {
          this.mBuffer.write(", ");
        }
        i += 1;
        break label248;
      }
      localObject = (NameValuePair)paramClientHandshake.next();
      this.mBuffer.write(((NameValuePair)localObject).getName() + ":" + ((NameValuePair)localObject).getValue());
      this.mBuffer.crlf();
    }
  }
  
  private void sendClose(WebSocketMessage.Close paramClose)
  {
    if (paramClose.mCode > 0)
    {
      byte[] arrayOfByte2;
      byte[] arrayOfByte1;
      int i;
      if ((paramClose.mReason != null) && (!paramClose.mReason.equals("")))
      {
        arrayOfByte2 = paramClose.mReason.getBytes("UTF-8");
        arrayOfByte1 = new byte[arrayOfByte2.length + 2];
        i = 0;
        if (i < arrayOfByte2.length) {}
      }
      for (;;)
      {
        if ((arrayOfByte1 == null) || (arrayOfByte1.length <= 125)) {
          break label98;
        }
        throw new WebSocketException("close payload exceeds 125 octets");
        arrayOfByte1[(i + 2)] = arrayOfByte2[i];
        i += 1;
        break;
        arrayOfByte1 = new byte[2];
      }
      label98:
      arrayOfByte1[0] = ((byte)(paramClose.mCode >> 8 & 0xFF));
      arrayOfByte1[1] = ((byte)(paramClose.mCode & 0xFF));
      sendFrame(8, true, arrayOfByte1);
      return;
    }
    sendFrame(8, true, null);
  }
  
  private void sendPing(WebSocketMessage.Ping paramPing)
  {
    if ((paramPing.mPayload != null) && (paramPing.mPayload.length > 125)) {
      throw new WebSocketException("ping payload exceeds 125 octets");
    }
    sendFrame(9, true, paramPing.mPayload);
  }
  
  private void sendPong(WebSocketMessage.Pong paramPong)
  {
    if ((paramPong.mPayload != null) && (paramPong.mPayload.length > 125)) {
      throw new WebSocketException("pong payload exceeds 125 octets");
    }
    sendFrame(10, true, paramPong.mPayload);
  }
  
  private void sendRawTextMessage(WebSocketMessage.RawTextMessage paramRawTextMessage)
  {
    if (paramRawTextMessage.mPayload.length > this.mOptions.getMaxMessagePayloadSize()) {
      throw new WebSocketException("message payload exceeds payload limit");
    }
    sendFrame(1, true, paramRawTextMessage.mPayload);
  }
  
  private void sendTextMessage(WebSocketMessage.TextMessage paramTextMessage)
  {
    paramTextMessage = paramTextMessage.mPayload.getBytes("UTF-8");
    if (paramTextMessage.length > this.mOptions.getMaxMessagePayloadSize()) {
      throw new WebSocketException("message payload exceeds payload limit");
    }
    sendFrame(1, true, paramTextMessage);
  }
  
  public void forward(Object paramObject)
  {
    Message localMessage = obtainMessage();
    localMessage.obj = paramObject;
    sendMessage(localMessage);
  }
  
  public void handleMessage(Message paramMessage)
  {
    try
    {
      this.mBuffer.clear();
      processMessage(paramMessage.obj);
      this.mBuffer.flip();
      for (;;)
      {
        if (this.mBuffer.remaining() <= 0) {
          return;
        }
        this.mSocket.write(this.mBuffer.getBuffer());
      }
      return;
    }
    catch (SocketException paramMessage)
    {
      Log.d(TAG, "run() : SocketException (" + paramMessage.toString() + ")");
      notify(new WebSocketMessage.ConnectionLost());
      return;
    }
    catch (Exception paramMessage)
    {
      paramMessage.printStackTrace();
      notify(new WebSocketMessage.Error(paramMessage));
    }
  }
  
  protected void processAppMessage(Object paramObject)
  {
    throw new WebSocketException("unknown message received by WebSocketWriter");
  }
  
  protected void processMessage(Object paramObject)
  {
    if ((paramObject instanceof WebSocketMessage.TextMessage))
    {
      sendTextMessage((WebSocketMessage.TextMessage)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.RawTextMessage))
    {
      sendRawTextMessage((WebSocketMessage.RawTextMessage)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.BinaryMessage))
    {
      sendBinaryMessage((WebSocketMessage.BinaryMessage)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.Ping))
    {
      sendPing((WebSocketMessage.Ping)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.Pong))
    {
      sendPong((WebSocketMessage.Pong)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.Close))
    {
      sendClose((WebSocketMessage.Close)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.ClientHandshake))
    {
      sendClientHandshake((WebSocketMessage.ClientHandshake)paramObject);
      return;
    }
    if ((paramObject instanceof WebSocketMessage.Quit))
    {
      this.mLooper.quit();
      Log.d(TAG, "ended");
      return;
    }
    processAppMessage(paramObject);
  }
  
  protected void sendFrame(int paramInt, boolean paramBoolean, byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte != null)
    {
      sendFrame(paramInt, paramBoolean, paramArrayOfByte, 0, paramArrayOfByte.length);
      return;
    }
    sendFrame(paramInt, paramBoolean, null, 0, 0);
  }
  
  protected void sendFrame(int paramInt1, boolean paramBoolean, byte[] paramArrayOfByte, int paramInt2, int paramInt3)
  {
    int i = 0;
    if (paramBoolean) {
      i = (byte)Byte.MIN_VALUE;
    }
    paramInt1 = (byte)(i | (byte)paramInt1);
    this.mBuffer.write(paramInt1);
    paramInt1 = 0;
    if (this.mOptions.getMaskClientFrames()) {
      paramInt1 = -128;
    }
    long l = paramInt3;
    byte[] arrayOfByte;
    if (l <= 125L)
    {
      paramInt1 = (byte)(paramInt1 | (byte)(int)l);
      this.mBuffer.write(paramInt1);
      if (!this.mOptions.getMaskClientFrames()) {
        break label401;
      }
      arrayOfByte = newFrameMask();
      this.mBuffer.write(arrayOfByte[0]);
      this.mBuffer.write(arrayOfByte[1]);
      this.mBuffer.write(arrayOfByte[2]);
      this.mBuffer.write(arrayOfByte[3]);
    }
    for (;;)
    {
      if (l > 0L) {
        if (this.mOptions.getMaskClientFrames()) {
          paramInt1 = 0;
        }
      }
      for (;;)
      {
        if (paramInt1 >= l)
        {
          this.mBuffer.write(paramArrayOfByte, paramInt2, paramInt3);
          return;
          if (l <= 65535L)
          {
            paramInt1 = (byte)(paramInt1 | 0x7E);
            this.mBuffer.write(paramInt1);
            this.mBuffer.write(new byte[] { (byte)(int)(l >> 8 & 0xFF), (byte)(int)(0xFF & l) });
            break;
          }
          paramInt1 = (byte)(paramInt1 | 0x7F);
          this.mBuffer.write(paramInt1);
          this.mBuffer.write(new byte[] { (byte)(int)(l >> 56 & 0xFF), (byte)(int)(l >> 48 & 0xFF), (byte)(int)(l >> 40 & 0xFF), (byte)(int)(l >> 32 & 0xFF), (byte)(int)(l >> 24 & 0xFF), (byte)(int)(l >> 16 & 0xFF), (byte)(int)(l >> 8 & 0xFF), (byte)(int)(0xFF & l) });
          break;
        }
        i = paramInt1 + paramInt2;
        paramArrayOfByte[i] = ((byte)(paramArrayOfByte[i] ^ arrayOfByte[(paramInt1 % 4)]));
        paramInt1 += 1;
      }
      label401:
      arrayOfByte = null;
    }
  }
}
