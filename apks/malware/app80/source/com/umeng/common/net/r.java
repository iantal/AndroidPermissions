package com.umeng.common.net;

import com.umeng.common.Log;
import com.umeng.common.util.f;
import com.umeng.common.util.h;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.zip.GZIPInputStream;
import java.util.zip.InflaterInputStream;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.json.JSONException;
import org.json.JSONObject;

public class r
{
  private static final String a = r.class.getName();
  private Map b;
  
  public r() {}
  
  private static String a(InputStream paramInputStream)
  {
    BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramInputStream), 8192);
    StringBuilder localStringBuilder = new StringBuilder();
    try
    {
      for (;;)
      {
        String str = localBufferedReader.readLine();
        if (str == null) {
          break;
        }
        localStringBuilder.append(str + "\n");
      }
      return null;
    }
    catch (IOException localIOException)
    {
      Log.b(a, "Caught IOException in convertStreamToString()", localIOException);
      for (;;)
      {
        try
        {
          paramInputStream.close();
          return null;
        }
        catch (IOException paramInputStream)
        {
          Log.b(a, "Caught IOException in convertStreamToString()", paramInputStream);
          return null;
        }
        try
        {
          paramInputStream.close();
          return localStringBuilder.toString();
        }
        catch (IOException paramInputStream)
        {
          Log.b(a, "Caught IOException in convertStreamToString()", paramInputStream);
          return null;
        }
      }
    }
    finally
    {
      try
      {
        paramInputStream.close();
        throw localObject;
      }
      catch (IOException paramInputStream)
      {
        Log.b(a, "Caught IOException in convertStreamToString()", paramInputStream);
      }
    }
  }
  
  private JSONObject a(String paramString)
  {
    int i = new Random().nextInt(1000);
    label522:
    label524:
    for (;;)
    {
      Object localObject2;
      try
      {
        String str1 = System.getProperty("line.separator");
        if (paramString.length() <= 1)
        {
          Log.b(a, i + ":\tInvalid baseUrl.");
          return null;
        }
        Log.a(a, i + ":\tget: " + paramString);
        HttpGet localHttpGet = new HttpGet(paramString);
        if ((this.b != null) && (this.b.size() > 0))
        {
          localObject2 = this.b.keySet().iterator();
          if (((Iterator)localObject2).hasNext())
          {
            String str2 = (String)((Iterator)localObject2).next();
            localHttpGet.addHeader(str2, (String)this.b.get(str2));
            continue;
          }
        }
        Object localObject1;
        return new JSONObject(localException);
      }
      catch (ClientProtocolException localClientProtocolException)
      {
        Log.c(a, i + ":\tClientProtocolException,Failed to send message." + paramString, localClientProtocolException);
        return null;
        localObject2 = new DefaultHttpClient(b()).execute(localClientProtocolException);
        if (((HttpResponse)localObject2).getStatusLine().getStatusCode() == 200)
        {
          localObject1 = ((HttpResponse)localObject2).getEntity();
          if (localObject1 == null) {
            break label522;
          }
          localObject1 = ((HttpEntity)localObject1).getContent();
          localObject2 = ((HttpResponse)localObject2).getFirstHeader("Content-Encoding");
          if ((localObject2 != null) && (((Header)localObject2).getValue().equalsIgnoreCase("gzip")))
          {
            Log.a(a, i + "  Use GZIPInputStream get data....");
            localObject1 = new GZIPInputStream((InputStream)localObject1);
            localObject1 = a((InputStream)localObject1);
            Log.a(a, i + ":\tresponse: " + str1 + (String)localObject1);
            if (localObject1 == null) {
              return null;
            }
          }
          else
          {
            if ((localObject2 == null) || (!((Header)localObject2).getValue().equalsIgnoreCase("deflate"))) {
              break label524;
            }
            Log.a(a, i + "  Use InflaterInputStream get data....");
            localObject1 = new InflaterInputStream((InputStream)localObject1);
            continue;
          }
        }
      }
      catch (Exception localException)
      {
        Log.c(a, i + ":\tIOException,Failed to send message." + paramString, localException);
        return null;
      }
      Log.c(a, i + ":\tFailed to send message. StatusCode = " + ((HttpResponse)localObject2).getStatusLine().getStatusCode() + h.a + paramString);
      return null;
    }
  }
  
  private JSONObject a(String paramString, JSONObject paramJSONObject)
  {
    Object localObject2 = paramJSONObject.toString();
    int i = new Random().nextInt(1000);
    Log.c(a, i + ":\trequest: " + paramString + h.a + (String)localObject2);
    paramJSONObject = new HttpPost(paramString);
    Object localObject1 = new DefaultHttpClient(b());
    try
    {
      if (a())
      {
        localObject2 = f.a("content=" + (String)localObject2, Charset.defaultCharset().toString());
        paramJSONObject.addHeader("Content-Encoding", "deflate");
        paramJSONObject.setEntity(new InputStreamEntity(new ByteArrayInputStream((byte[])localObject2), localObject2.length));
        localObject1 = ((HttpClient)localObject1).execute(paramJSONObject);
        if (((HttpResponse)localObject1).getStatusLine().getStatusCode() != 200) {
          break label376;
        }
        paramJSONObject = ((HttpResponse)localObject1).getEntity();
        if (paramJSONObject == null) {
          break label497;
        }
        paramJSONObject = paramJSONObject.getContent();
        localObject1 = ((HttpResponse)localObject1).getFirstHeader("Content-Encoding");
        if ((localObject1 == null) || (!((Header)localObject1).getValue().equalsIgnoreCase("deflate"))) {
          break label494;
        }
        paramJSONObject = new InflaterInputStream(paramJSONObject);
      }
      label376:
      for (;;)
      {
        paramJSONObject = a(paramJSONObject);
        Log.a(a, i + ":\tresponse: " + h.a + paramJSONObject);
        if (paramJSONObject == null)
        {
          return null;
          ArrayList localArrayList = new ArrayList(1);
          localArrayList.add(new BasicNameValuePair("content", (String)localObject2));
          paramJSONObject.setEntity(new UrlEncodedFormEntity(localArrayList, "UTF-8"));
          break;
        }
      }
    }
    catch (ClientProtocolException paramJSONObject)
    {
      Log.c(a, i + ":\tClientProtocolException,Failed to send message." + paramString, paramJSONObject);
      return null;
      return new JSONObject(paramJSONObject);
      Log.c(a, i + ":\tFailed to send message. StatusCode = " + ((HttpResponse)localObject1).getStatusLine().getStatusCode() + h.a + paramString);
      return null;
    }
    catch (IOException paramJSONObject)
    {
      Log.c(a, i + ":\tIOException,Failed to send message." + paramString, paramJSONObject);
      return null;
    }
    catch (JSONException paramJSONObject)
    {
      Log.c(a, i + ":\tIOException,Failed to send message." + paramString, paramJSONObject);
      return null;
    }
    label494:
    label497:
    return null;
  }
  
  private HttpParams b()
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, 10000);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, 20000);
    HttpProtocolParams.setUserAgent(localBasicHttpParams, System.getProperty("http.agent"));
    return localBasicHttpParams;
  }
  
  private void b(String paramString)
  {
    if ((h.d(paramString)) || (!(s.c.equals(paramString.trim()) ^ s.b.equals(paramString.trim())))) {
      throw new RuntimeException("验证请求方式失败[" + paramString + "]");
    }
  }
  
  public r a(Map paramMap)
  {
    this.b = paramMap;
    return this;
  }
  
  public t a(s paramS, Class paramClass)
  {
    String str = paramS.c().trim();
    b(str);
    if (s.c.equals(str)) {
      paramS = a(paramS.b());
    }
    for (;;)
    {
      if (paramS == null)
      {
        return null;
        if (s.b.equals(str)) {
          paramS = a(paramS.d, paramS.a());
        }
      }
      else
      {
        try
        {
          paramS = (t)paramClass.getConstructor(new Class[] { JSONObject.class }).newInstance(new Object[] { paramS });
          return paramS;
        }
        catch (SecurityException paramS)
        {
          Log.b(a, "SecurityException", paramS);
          return null;
        }
        catch (NoSuchMethodException paramS)
        {
          for (;;)
          {
            Log.b(a, "NoSuchMethodException", paramS);
          }
        }
        catch (IllegalArgumentException paramS)
        {
          for (;;)
          {
            Log.b(a, "IllegalArgumentException", paramS);
          }
        }
        catch (InstantiationException paramS)
        {
          for (;;)
          {
            Log.b(a, "InstantiationException", paramS);
          }
        }
        catch (IllegalAccessException paramS)
        {
          for (;;)
          {
            Log.b(a, "IllegalAccessException", paramS);
          }
        }
        catch (InvocationTargetException paramS)
        {
          for (;;)
          {
            Log.b(a, "InvocationTargetException", paramS);
          }
        }
      }
      paramS = null;
    }
  }
  
  public boolean a()
  {
    return false;
  }
}
