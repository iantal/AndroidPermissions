package com.lepeng.fastjson.serializer;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.TreeSet;

public class CollectionSerializer
  implements ObjectSerializer
{
  public static final CollectionSerializer instance = new CollectionSerializer();
  
  public CollectionSerializer() {}
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType)
  {
    int i = 0;
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      if (localSerializeWriter.isEnabled(SerializerFeature.WriteNullListAsEmpty))
      {
        localSerializeWriter.write("[]");
        return;
      }
      localSerializeWriter.writeNull();
      return;
    }
    if ((paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName)) && ((paramType instanceof ParameterizedType))) {
      paramType = ((ParameterizedType)paramType).getActualTypeArguments()[0];
    }
    for (;;)
    {
      Object localObject = (Collection)paramObject1;
      SerialContext localSerialContext = paramJSONSerializer.getContext();
      paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2);
      if (paramJSONSerializer.isEnabled(SerializerFeature.WriteClassName))
      {
        if (HashSet.class != localObject.getClass()) {
          break label158;
        }
        localSerializeWriter.append("Set");
      }
      try
      {
        localSerializeWriter.append('[');
        paramObject1 = ((Collection)localObject).iterator();
        for (;;)
        {
          if (!paramObject1.hasNext())
          {
            localSerializeWriter.append(']');
            return;
            label158:
            if (TreeSet.class != localObject.getClass()) {
              break;
            }
            localSerializeWriter.append("TreeSet");
            break;
          }
          paramObject2 = paramObject1.next();
          int j = i + 1;
          if (i != 0) {
            localSerializeWriter.append(',');
          }
          if (paramObject2 == null)
          {
            localSerializeWriter.writeNull();
            i = j;
          }
          else
          {
            localObject = paramObject2.getClass();
            if (localObject == Integer.class)
            {
              localSerializeWriter.writeInt(((Integer)paramObject2).intValue());
              i = j;
            }
            else
            {
              if (localObject == Long.class)
              {
                localSerializeWriter.writeLong(((Long)paramObject2).longValue());
                if (localSerializeWriter.isEnabled(SerializerFeature.WriteClassName))
                {
                  localSerializeWriter.write('L');
                  i = j;
                }
              }
              else
              {
                paramJSONSerializer.getObjectWriter((Class)localObject).write(paramJSONSerializer, paramObject2, Integer.valueOf(j - 1), paramType);
              }
              i = j;
            }
          }
        }
        paramType = null;
      }
      finally
      {
        paramJSONSerializer.setContext(localSerialContext);
      }
    }
  }
}
