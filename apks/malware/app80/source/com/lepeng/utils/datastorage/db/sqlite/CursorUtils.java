package com.lepeng.utils.datastorage.db.sqlite;

import android.database.Cursor;
import com.lepeng.utils.datastorage.db.table.Id;
import com.lepeng.utils.datastorage.db.table.Property;
import com.lepeng.utils.datastorage.db.table.TableInfo;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class CursorUtils
{
  public CursorUtils() {}
  
  public static Object dbModel2Entity(DbModel paramDbModel, Class paramClass)
  {
    if (paramDbModel != null) {
      paramDbModel = paramDbModel.getDataMap();
    }
    Object localObject1;
    String str;
    TableInfo localTableInfo;
    do
    {
      for (;;)
      {
        try
        {
          localObject1 = paramClass.newInstance();
          Iterator localIterator = paramDbModel.entrySet().iterator();
          if (!localIterator.hasNext()) {
            return localObject1;
          }
          paramDbModel = (Map.Entry)localIterator.next();
          str = (String)paramDbModel.getKey();
          localTableInfo = TableInfo.get(paramClass);
          localObject2 = (Property)localTableInfo.propertyMap.get(str);
          if (localObject2 == null) {
            break;
          }
          if (paramDbModel.getValue() == null)
          {
            paramDbModel = null;
            ((Property)localObject2).setValue(localObject1, paramDbModel);
            continue;
            return null;
          }
        }
        catch (Exception paramDbModel)
        {
          CheckedExceptionHandler.handleException(paramDbModel);
        }
        paramDbModel = paramDbModel.getValue().toString();
      }
    } while (!localTableInfo.getId().getColumn().equals(str));
    Object localObject2 = localTableInfo.getId();
    if (paramDbModel.getValue() == null) {}
    for (paramDbModel = null;; paramDbModel = paramDbModel.getValue().toString())
    {
      ((Id)localObject2).setValue(localObject1, paramDbModel);
      break;
    }
  }
  
  public static DbModel getDbModel(Cursor paramCursor)
  {
    if ((paramCursor != null) && (paramCursor.getColumnCount() > 0))
    {
      DbModel localDbModel = new DbModel();
      int j = paramCursor.getColumnCount();
      int i = 0;
      for (;;)
      {
        if (i >= j) {
          return localDbModel;
        }
        localDbModel.set(paramCursor.getColumnName(i), paramCursor.getString(i));
        i += 1;
      }
    }
    return null;
  }
  
  public static Object getEntity(Cursor paramCursor, Class paramClass)
  {
    if (paramCursor != null) {}
    for (;;)
    {
      TableInfo localTableInfo;
      int j;
      int i;
      try
      {
        localTableInfo = TableInfo.get(paramClass);
        j = paramCursor.getColumnCount();
        if (j <= 0) {
          break label112;
        }
        paramClass = paramClass.newInstance();
        i = 0;
      }
      catch (Exception paramCursor) {}
      String str = paramCursor.getColumnName(i);
      Property localProperty = (Property)localTableInfo.propertyMap.get(str);
      if (localProperty != null)
      {
        localProperty.setValue(paramClass, paramCursor.getString(i));
      }
      else if (localTableInfo.getId().getColumn().equals(str))
      {
        localTableInfo.getId().setValue(paramClass, paramCursor.getString(i));
        break label121;
        label112:
        return null;
      }
      while (i >= j)
      {
        return paramClass;
        label121:
        i += 1;
      }
    }
  }
}
