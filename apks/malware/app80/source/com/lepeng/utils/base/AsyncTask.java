package com.lepeng.utils.base;

import android.os.Message;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class AsyncTask
{
  public static final Executor DUAL_THREAD_EXECUTOR = Executors.newFixedThreadPool(3, jdField_a_of_type_JavaUtilConcurrentThreadFactory);
  public static final Executor SERIAL_EXECUTOR;
  public static final Executor THREAD_POOL_EXECUTOR;
  private static final AsyncTask.b jdField_a_of_type_ComLepengUtilsBaseAsyncTask$b = new AsyncTask.b(null);
  private static final BlockingQueue jdField_a_of_type_JavaUtilConcurrentBlockingQueue;
  private static volatile Executor jdField_a_of_type_JavaUtilConcurrentExecutor = SERIAL_EXECUTOR;
  private static final ThreadFactory jdField_a_of_type_JavaUtilConcurrentThreadFactory = new AsyncTask.1();
  private static final int t = 5;
  private static final int u = 128;
  private static final int v = 1;
  private static final int w = 1;
  private static final int x = 2;
  private volatile AsyncTask.Status jdField_a_of_type_ComLepengUtilsBaseAsyncTask$Status = AsyncTask.Status.PENDING;
  private final AsyncTask.d jdField_a_of_type_ComLepengUtilsBaseAsyncTask$d = new AsyncTask.2(this);
  private final FutureTask jdField_a_of_type_JavaUtilConcurrentFutureTask = new AsyncTask.3(this, this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$d);
  private final AtomicBoolean jdField_a_of_type_JavaUtilConcurrentAtomicAtomicBoolean = new AtomicBoolean();
  private final AtomicBoolean b = new AtomicBoolean();
  
  static
  {
    jdField_a_of_type_JavaUtilConcurrentBlockingQueue = new LinkedBlockingQueue(10);
    THREAD_POOL_EXECUTOR = new ThreadPoolExecutor(5, 128, 1L, TimeUnit.SECONDS, jdField_a_of_type_JavaUtilConcurrentBlockingQueue, jdField_a_of_type_JavaUtilConcurrentThreadFactory, new ThreadPoolExecutor.DiscardOldestPolicy());
    SERIAL_EXECUTOR = new AsyncTask.c(null);
  }
  
  public AsyncTask() {}
  
  private Object a(Object paramObject)
  {
    jdField_a_of_type_ComLepengUtilsBaseAsyncTask$b.obtainMessage(1, new AsyncTask.a(this, new Object[] { paramObject })).sendToTarget();
    return paramObject;
  }
  
  private void a(Object paramObject)
  {
    if (!this.b.get()) {
      a(paramObject);
    }
  }
  
  private void b(Object paramObject)
  {
    if (isCancelled()) {
      onCancelled(paramObject);
    }
    for (;;)
    {
      this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$Status = AsyncTask.Status.FINISHED;
      return;
      onPostExecute(paramObject);
    }
  }
  
  public static void execute(Runnable paramRunnable)
  {
    jdField_a_of_type_JavaUtilConcurrentExecutor.execute(paramRunnable);
  }
  
  public static void init()
  {
    jdField_a_of_type_ComLepengUtilsBaseAsyncTask$b.getLooper();
  }
  
  public static void setDefaultExecutor(Executor paramExecutor)
  {
    jdField_a_of_type_JavaUtilConcurrentExecutor = paramExecutor;
  }
  
  public final boolean cancel(boolean paramBoolean)
  {
    this.jdField_a_of_type_JavaUtilConcurrentAtomicAtomicBoolean.set(true);
    return this.jdField_a_of_type_JavaUtilConcurrentFutureTask.cancel(paramBoolean);
  }
  
  protected abstract Object doInBackground(Object... paramVarArgs);
  
  public final AsyncTask execute(Object... paramVarArgs)
  {
    return executeOnExecutor(jdField_a_of_type_JavaUtilConcurrentExecutor, paramVarArgs);
  }
  
  public final AsyncTask executeOnExecutor(Executor paramExecutor, Object... paramVarArgs)
  {
    if (this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$Status != AsyncTask.Status.PENDING) {}
    switch (b()[this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$Status.ordinal()])
    {
    default: 
      this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$Status = AsyncTask.Status.RUNNING;
      onPreExecute();
      this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$d.d = paramVarArgs;
      paramExecutor.execute(this.jdField_a_of_type_JavaUtilConcurrentFutureTask);
      return this;
    case 2: 
      throw new IllegalStateException("Cannot execute task: the task is already running.");
    }
    throw new IllegalStateException("Cannot execute task: the task has already been executed (a task can be executed only once)");
  }
  
  public final Object get()
  {
    return this.jdField_a_of_type_JavaUtilConcurrentFutureTask.get();
  }
  
  public final Object get(long paramLong, TimeUnit paramTimeUnit)
  {
    return this.jdField_a_of_type_JavaUtilConcurrentFutureTask.get(paramLong, paramTimeUnit);
  }
  
  public final AsyncTask.Status getStatus()
  {
    return this.jdField_a_of_type_ComLepengUtilsBaseAsyncTask$Status;
  }
  
  public final boolean isCancelled()
  {
    return this.jdField_a_of_type_JavaUtilConcurrentAtomicAtomicBoolean.get();
  }
  
  protected void onCancelled() {}
  
  protected void onCancelled(Object paramObject)
  {
    onCancelled();
  }
  
  protected void onPostExecute(Object paramObject) {}
  
  protected void onPreExecute() {}
  
  public void onProgressUpdate(Object... paramVarArgs) {}
  
  protected final void publishProgress(Object... paramVarArgs)
  {
    if (!isCancelled()) {
      jdField_a_of_type_ComLepengUtilsBaseAsyncTask$b.obtainMessage(2, new AsyncTask.a(this, paramVarArgs)).sendToTarget();
    }
  }
}
