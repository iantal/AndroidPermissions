package com.lepeng.utils.base;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;

public abstract class AbstractCollection
  implements Collection
{
  protected AbstractCollection() {}
  
  public boolean add(Object paramObject)
  {
    throw new UnsupportedOperationException();
  }
  
  public boolean addAll(Collection paramCollection)
  {
    boolean bool = false;
    paramCollection = paramCollection.iterator();
    for (;;)
    {
      if (!paramCollection.hasNext()) {
        return bool;
      }
      if (add(paramCollection.next())) {
        bool = true;
      }
    }
  }
  
  public void clear()
  {
    Iterator localIterator = iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      localIterator.next();
      localIterator.remove();
    }
  }
  
  public boolean contains(Object paramObject)
  {
    boolean bool2 = true;
    Iterator localIterator = iterator();
    if (paramObject != null) {
      if (localIterator.hasNext()) {}
    }
    for (;;)
    {
      boolean bool1 = false;
      return bool1;
      if (!paramObject.equals(localIterator.next())) {
        break;
      }
      return true;
      do
      {
        bool1 = bool2;
        if (localIterator.next() == null) {
          break;
        }
      } while (localIterator.hasNext());
    }
  }
  
  public boolean containsAll(Collection paramCollection)
  {
    paramCollection = paramCollection.iterator();
    do
    {
      if (!paramCollection.hasNext()) {
        return true;
      }
    } while (contains(paramCollection.next()));
    return false;
  }
  
  public boolean isEmpty()
  {
    return size() == 0;
  }
  
  public abstract Iterator iterator();
  
  public boolean remove(Object paramObject)
  {
    Iterator localIterator = iterator();
    if (paramObject != null) {
      if (localIterator.hasNext()) {}
    }
    for (;;)
    {
      return false;
      if (!paramObject.equals(localIterator.next())) {
        break;
      }
      localIterator.remove();
      return true;
      do
      {
        if (localIterator.next() == null)
        {
          localIterator.remove();
          return true;
        }
      } while (localIterator.hasNext());
    }
  }
  
  public boolean removeAll(Collection paramCollection)
  {
    boolean bool = false;
    Iterator localIterator = iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return bool;
      }
      if (paramCollection.contains(localIterator.next()))
      {
        localIterator.remove();
        bool = true;
      }
    }
  }
  
  public boolean retainAll(Collection paramCollection)
  {
    boolean bool = false;
    Iterator localIterator = iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return bool;
      }
      if (!paramCollection.contains(localIterator.next()))
      {
        localIterator.remove();
        bool = true;
      }
    }
  }
  
  public abstract int size();
  
  public Object[] toArray()
  {
    int j = size();
    int i = 0;
    Iterator localIterator = iterator();
    Object[] arrayOfObject = new Object[j];
    for (;;)
    {
      if (i >= j) {
        return arrayOfObject;
      }
      arrayOfObject[i] = localIterator.next();
      i += 1;
    }
  }
  
  public Object[] toArray(Object[] paramArrayOfObject)
  {
    int j = size();
    int i = 0;
    Object[] arrayOfObject = paramArrayOfObject;
    if (j > paramArrayOfObject.length) {
      arrayOfObject = (Object[])Array.newInstance(paramArrayOfObject.getClass().getComponentType(), j);
    }
    paramArrayOfObject = iterator();
    for (;;)
    {
      if (!paramArrayOfObject.hasNext())
      {
        if (i < arrayOfObject.length) {
          arrayOfObject[i] = null;
        }
        return arrayOfObject;
      }
      arrayOfObject[i] = ((Object)paramArrayOfObject.next());
      i += 1;
    }
  }
  
  public String toString()
  {
    if (isEmpty()) {
      return "[]";
    }
    StringBuilder localStringBuilder = new StringBuilder(size() * 16);
    localStringBuilder.append('[');
    Iterator localIterator = iterator();
    label103:
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        localStringBuilder.append(']');
        return localStringBuilder.toString();
      }
      Object localObject = localIterator.next();
      if (localObject != this) {
        localStringBuilder.append(localObject);
      }
      for (;;)
      {
        if (!localIterator.hasNext()) {
          break label103;
        }
        localStringBuilder.append(", ");
        break;
        localStringBuilder.append("(this Collection)");
      }
    }
  }
}
