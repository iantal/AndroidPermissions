package com.zdtpay.net;

import android.content.Context;
import android.text.TextUtils;
import com.duowan.mobile.netroid.RequestQueue;
import com.duowan.mobile.netroid.b.a;
import com.zdtpay.ZDTPayParamInfo;
import com.zdtpay.ZDTPaySDK;
import com.zdtpay.tools.MyLogPrinter;
import com.zdtpay.tools.b;
import com.zdtpay.tools.i;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class DataRequestTask
{
  public static int a = 0;
  public static int b = 1;
  public static final String c = i.a(new int[] { 33, 45, 45, 41, 55, 54, 54, 58, 58, 59, 53, 58, 59, 63, 53, 63, 66, 53, 62, 58 });
  public static final String d = c + i.a(new int[] { 54, 40, 43, 29, 30, 43, 53, 41, 33, 41 });
  public static final String e = c + i.a(new int[] { 54, 40, 43, 29, 30, 43, 56, 44, 45, 26, 45, 46, 44, 53, 41, 33, 41 });
  public static final String f = c + "/install_report.php";
  public static final String g = c + i.a(new int[] { 54, 47, 30, 43, 44, 34, 40, 39, 53, 41, 33, 41 });
  public static final String h = c + i.a(new int[] { 54, 40, 43, 29, 30, 43, 56, 38, 40, 53, 41, 33, 41 });
  public static final String i = c + "/report_status.php";
  
  public static void a(Context paramContext, int paramInt, String paramString, HashMap paramHashMap, DataRequestTask.RequestCallBack paramRequestCallBack)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    RequestQueue localRequestQueue = com.zdtpay.f.b(paramContext);
    HashMap localHashMap = paramHashMap;
    if (paramHashMap == null) {}
    for (;;)
    {
      try
      {
        localHashMap = new HashMap();
        if (b.d != null)
        {
          localHashMap.put(com.zdtpay.tools.c.n, b.d.getAppkey());
          localHashMap.put("appsecret", b.d.getAppsecret());
          if (!TextUtils.isEmpty(b.d.getMobile()))
          {
            paramHashMap = new StringBuffer(b.d.getMobile());
            if (paramHashMap.length() > 11) {
              paramHashMap.delete(0, paramHashMap.length() - 11);
            }
            localHashMap.put(com.zdtpay.tools.c.o, paramHashMap.toString());
          }
          localHashMap.put(com.zdtpay.tools.c.p, b.d.getMobile_type());
          localHashMap.put(com.zdtpay.tools.c.r, b.d.getProvince());
        }
        localHashMap.put(com.zdtpay.tools.c.f, com.zdtpay.tools.f.h(paramContext));
        localHashMap.put(com.zdtpay.tools.c.g, com.zdtpay.tools.f.f(paramContext));
        localHashMap.put(com.zdtpay.tools.c.h, com.zdtpay.tools.f.g(paramContext));
        localHashMap.put("version", ZDTPaySDK.getVersion());
        localHashMap.put("type", com.zdtpay.tools.f.k(paramContext));
        localHashMap.put(com.zdtpay.tools.c.i, com.zdtpay.tools.f.b(paramContext));
        localHashMap.put(com.zdtpay.tools.c.j, com.zdtpay.tools.f.c(paramContext));
        paramContext = new com.zdtpay.tools.g(paramContext);
        if (paramContext.a())
        {
          paramContext.b();
          paramContext = paramContext.f();
          localHashMap.put(com.zdtpay.tools.c.l, paramContext.a());
          localHashMap.put(com.zdtpay.tools.c.k, paramContext.b());
          paramContext = localHashMap.keySet().iterator();
          if (!paramContext.hasNext())
          {
            if (localStringBuffer.length() != 0) {
              localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
            }
            paramContext = paramString;
            if (paramInt == a) {
              paramContext = paramString + "?" + localStringBuffer.toString().trim();
            }
            MyLogPrinter.b("get url type = " + paramInt + " url = " + paramContext);
            paramContext = new d(paramInt, paramContext, new c(paramRequestCallBack), localHashMap);
            paramContext.a(TimeUnit.SECONDS, 5);
            localRequestQueue.a(paramContext);
          }
        }
        else
        {
          localHashMap.put(com.zdtpay.tools.c.l, "");
          localHashMap.put(com.zdtpay.tools.c.k, "");
          continue;
        }
        paramHashMap = ((String)paramContext.next()).trim();
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
      if (localHashMap.get(paramHashMap) == null) {
        MyLogPrinter.b(paramHashMap + "=null");
      } else {
        localStringBuffer.append(paramHashMap + "=" + URLEncoder.encode((String)localHashMap.get(paramHashMap), "UTF-8") + "&");
      }
    }
  }
  
  public static void a(Context paramContext, int paramInt1, String paramString, HashMap paramHashMap, DataRequestTask.RequestCallBack paramRequestCallBack, int paramInt2)
  {
    new Thread(new f(paramHashMap, paramContext, paramInt1, paramString, new e(paramContext.getMainLooper(), paramRequestCallBack))).start();
  }
}
