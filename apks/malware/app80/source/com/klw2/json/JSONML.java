package com.klw2.json;

import java.util.Iterator;

public class JSONML
{
  public JSONML() {}
  
  private static Object parse(XMLTokener paramXMLTokener, boolean paramBoolean, JSONArray paramJSONArray)
  {
    for (;;)
    {
      if (!paramXMLTokener.more()) {
        throw paramXMLTokener.syntaxError("Bad XML");
      }
      Object localObject2 = paramXMLTokener.nextContent();
      Object localObject1;
      if (localObject2 == XML.LT)
      {
        localObject1 = paramXMLTokener.nextToken();
        label206:
        String str;
        JSONObject localJSONObject;
        Object localObject3;
        if ((localObject1 instanceof Character))
        {
          if (localObject1 == XML.SLASH)
          {
            paramJSONArray = paramXMLTokener.nextToken();
            if (!(paramJSONArray instanceof String)) {
              throw new JSONException("Expected a closing name instead of '" + paramJSONArray + "'.");
            }
            if (paramXMLTokener.nextToken() != XML.GT) {
              throw paramXMLTokener.syntaxError("Misshaped close tag");
            }
          }
          else
          {
            if (localObject1 == XML.BANG)
            {
              int i = paramXMLTokener.next();
              if (i == 45)
              {
                if (paramXMLTokener.next() == '-')
                {
                  paramXMLTokener.skipPast("-->");
                  continue;
                }
                paramXMLTokener.back();
                continue;
              }
              if (i == 91)
              {
                if ((paramXMLTokener.nextToken().equals("CDATA")) && (paramXMLTokener.next() == '['))
                {
                  if (paramJSONArray == null) {
                    continue;
                  }
                  paramJSONArray.put(paramXMLTokener.nextCDATA());
                  continue;
                }
                throw paramXMLTokener.syntaxError("Expected 'CDATA['");
              }
              int j = 1;
              localObject1 = paramXMLTokener.nextMeta();
              if (localObject1 == null) {
                throw paramXMLTokener.syntaxError("Missing '>' after '<!'.");
              }
              if (localObject1 == XML.LT) {
                i = j + 1;
              }
              for (;;)
              {
                j = i;
                if (i > 0) {
                  break label206;
                }
                break;
                i = j;
                if (localObject1 == XML.GT) {
                  i = j - 1;
                }
              }
            }
            if (localObject1 == XML.QUEST)
            {
              paramXMLTokener.skipPast("?>");
              continue;
            }
            throw paramXMLTokener.syntaxError("Misshaped tag");
          }
        }
        else
        {
          if (!(localObject1 instanceof String)) {
            throw paramXMLTokener.syntaxError("Bad tagName '" + localObject1 + "'.");
          }
          str = (String)localObject1;
          localObject2 = new JSONArray();
          localJSONObject = new JSONObject();
          if (paramBoolean)
          {
            ((JSONArray)localObject2).put(str);
            if (paramJSONArray != null) {
              paramJSONArray.put(localObject2);
            }
            localObject1 = null;
          }
          for (;;)
          {
            localObject3 = localObject1;
            if (localObject1 == null) {
              localObject3 = paramXMLTokener.nextToken();
            }
            if (localObject3 == null)
            {
              throw paramXMLTokener.syntaxError("Misshaped tag");
              localJSONObject.put("tagName", str);
              if (paramJSONArray == null) {
                break;
              }
              paramJSONArray.put(localJSONObject);
              break;
            }
            if (!(localObject3 instanceof String))
            {
              if ((paramBoolean) && (localJSONObject.length() > 0)) {
                ((JSONArray)localObject2).put(localJSONObject);
              }
              if (localObject3 != XML.SLASH) {
                break label606;
              }
              if (paramXMLTokener.nextToken() == XML.GT) {
                break label586;
              }
              throw paramXMLTokener.syntaxError("Misshaped tag");
            }
            localObject3 = (String)localObject3;
            if ((!paramBoolean) && (("tagName".equals(localObject3)) || ("childNode".equals(localObject3)))) {
              throw paramXMLTokener.syntaxError("Reserved attribute.");
            }
            localObject1 = paramXMLTokener.nextToken();
            if (localObject1 == XML.EQ)
            {
              localObject1 = paramXMLTokener.nextToken();
              if (!(localObject1 instanceof String)) {
                throw paramXMLTokener.syntaxError("Missing value");
              }
              localJSONObject.accumulate((String)localObject3, XML.stringToValue((String)localObject1));
              break;
            }
            localJSONObject.accumulate((String)localObject3, "");
          }
          label586:
          if (paramJSONArray != null) {
            continue;
          }
          if (!paramBoolean) {
            break label603;
          }
          paramJSONArray = (JSONArray)localObject2;
        }
        localObject2 = paramJSONArray;
        label603:
        label606:
        do
        {
          return localObject2;
          return localJSONObject;
          if (localObject3 != XML.GT) {
            throw paramXMLTokener.syntaxError("Misshaped tag");
          }
          localObject1 = (String)parse(paramXMLTokener, paramBoolean, (JSONArray)localObject2);
          if (localObject1 == null) {
            break;
          }
          if (!((String)localObject1).equals(str)) {
            throw paramXMLTokener.syntaxError("Mismatched '" + str + "' and '" + (String)localObject1 + "'");
          }
          if ((!paramBoolean) && (((JSONArray)localObject2).length() > 0)) {
            localJSONObject.put("childNodes", localObject2);
          }
          if (paramJSONArray != null) {
            break;
          }
        } while (paramBoolean);
        return localJSONObject;
      }
      else if (paramJSONArray != null)
      {
        localObject1 = localObject2;
        if ((localObject2 instanceof String)) {
          localObject1 = XML.stringToValue((String)localObject2);
        }
        paramJSONArray.put(localObject1);
      }
    }
  }
  
  public static JSONArray toJSONArray(XMLTokener paramXMLTokener)
  {
    return (JSONArray)parse(paramXMLTokener, true, null);
  }
  
  public static JSONArray toJSONArray(String paramString)
  {
    return toJSONArray(new XMLTokener(paramString));
  }
  
  public static JSONObject toJSONObject(XMLTokener paramXMLTokener)
  {
    return (JSONObject)parse(paramXMLTokener, false, null);
  }
  
  public static JSONObject toJSONObject(String paramString)
  {
    return toJSONObject(new XMLTokener(paramString));
  }
  
  public static String toString(JSONArray paramJSONArray)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    String str1 = paramJSONArray.getString(0);
    XML.noSpace(str1);
    str1 = XML.escape(str1);
    localStringBuilder.append('<');
    localStringBuilder.append(str1);
    Object localObject = paramJSONArray.opt(1);
    Iterator localIterator;
    if ((localObject instanceof JSONObject))
    {
      localObject = (JSONObject)localObject;
      localIterator = ((JSONObject)localObject).keys();
      if (localIterator.hasNext()) {}
    }
    int k;
    for (int i = 2;; i = 1)
    {
      k = paramJSONArray.length();
      if (i < k) {
        break label210;
      }
      localStringBuilder.append('/');
      localStringBuilder.append('>');
      return localStringBuilder.toString();
      String str2 = (String)localIterator.next();
      XML.noSpace(str2);
      String str3 = ((JSONObject)localObject).optString(str2);
      if (str3 == null) {
        break;
      }
      localStringBuilder.append(' ');
      localStringBuilder.append(XML.escape(str2));
      localStringBuilder.append('=');
      localStringBuilder.append('"');
      localStringBuilder.append(XML.escape(str3));
      localStringBuilder.append('"');
      break;
    }
    label210:
    localStringBuilder.append('>');
    label218:
    localObject = paramJSONArray.get(i);
    int j = i + 1;
    if (localObject != null)
    {
      if (!(localObject instanceof String)) {
        break label298;
      }
      localStringBuilder.append(XML.escape(localObject.toString()));
    }
    for (;;)
    {
      i = j;
      if (j < k) {
        break label218;
      }
      localStringBuilder.append('<');
      localStringBuilder.append('/');
      localStringBuilder.append(str1);
      localStringBuilder.append('>');
      break;
      label298:
      if ((localObject instanceof JSONObject)) {
        localStringBuilder.append(toString((JSONObject)localObject));
      } else if ((localObject instanceof JSONArray)) {
        localStringBuilder.append(toString((JSONArray)localObject));
      }
    }
  }
  
  public static String toString(JSONObject paramJSONObject)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    String str1 = paramJSONObject.optString("tagName");
    if (str1 == null) {
      return XML.escape(paramJSONObject.toString());
    }
    XML.noSpace(str1);
    str1 = XML.escape(str1);
    localStringBuilder.append('<');
    localStringBuilder.append(str1);
    Object localObject = paramJSONObject.keys();
    if (!((Iterator)localObject).hasNext())
    {
      paramJSONObject = paramJSONObject.optJSONArray("childNodes");
      if (paramJSONObject != null) {
        break label202;
      }
      localStringBuilder.append('/');
      localStringBuilder.append('>');
    }
    label202:
    int i;
    for (;;)
    {
      return localStringBuilder.toString();
      String str2 = (String)((Iterator)localObject).next();
      if (("tagName".equals(str2)) || ("childNodes".equals(str2))) {
        break;
      }
      XML.noSpace(str2);
      String str3 = paramJSONObject.optString(str2);
      if (str3 == null) {
        break;
      }
      localStringBuilder.append(' ');
      localStringBuilder.append(XML.escape(str2));
      localStringBuilder.append('=');
      localStringBuilder.append('"');
      localStringBuilder.append(XML.escape(str3));
      localStringBuilder.append('"');
      break;
      localStringBuilder.append('>');
      int j = paramJSONObject.length();
      i = 0;
      if (i < j) {
        break label252;
      }
      localStringBuilder.append('<');
      localStringBuilder.append('/');
      localStringBuilder.append(str1);
      localStringBuilder.append('>');
    }
    label252:
    localObject = paramJSONObject.get(i);
    if (localObject != null)
    {
      if (!(localObject instanceof String)) {
        break label292;
      }
      localStringBuilder.append(XML.escape(localObject.toString()));
    }
    for (;;)
    {
      i += 1;
      break;
      label292:
      if ((localObject instanceof JSONObject)) {
        localStringBuilder.append(toString((JSONObject)localObject));
      } else if ((localObject instanceof JSONArray)) {
        localStringBuilder.append(toString((JSONArray)localObject));
      } else {
        localStringBuilder.append(localObject.toString());
      }
    }
  }
}
