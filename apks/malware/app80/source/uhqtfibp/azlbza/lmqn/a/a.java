package uhqtfibp.azlbza.lmqn.a;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import java.lang.ref.SoftReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import uhqtfibp.azlbza.lmqn.tools.i;
import uhqtfibp.azlbza.lmqn.tools.l;
import uhqtfibp.azlbza.lmqn.tools.m;

public abstract class a
  extends Activity
{
  public static float A;
  public static int y;
  public static int z;
  protected ProgressDialog B;
  protected AlertDialog C;
  protected AlertDialog D;
  protected AlertDialog.Builder E;
  private LinearLayout a;
  private LinearLayout b;
  private LinearLayout c;
  public final HashMap n = new HashMap();
  protected boolean o;
  protected boolean p;
  protected boolean q;
  protected boolean r;
  protected boolean s;
  protected boolean t;
  protected boolean u;
  protected String v = "";
  protected RelativeLayout w;
  public DisplayMetrics x;
  
  public a() {}
  
  private final void d()
  {
    Thread.currentThread().setUncaughtExceptionHandler(new b(this));
  }
  
  private void e()
  {
    if (this.s)
    {
      m.b().a().add(new SoftReference(this));
      i.a("SingletonTopUtil hashCode: " + m.b().hashCode());
      return;
    }
    l.b().a().add(new SoftReference(this));
    i.a("SingletonChildUtil hashCode : " + l.b().hashCode());
  }
  
  private void f()
  {
    if (this.s)
    {
      m.b().a().remove(this);
      return;
    }
    l.b().a().remove(this);
  }
  
  private void g()
  {
    this.w = ((RelativeLayout)getLayoutInflater().inflate(2130903043, null));
    this.a = ((LinearLayout)this.w.findViewById(2131230730));
    this.b = ((LinearLayout)this.w.findViewById(2131230733));
    this.c = ((LinearLayout)this.w.findViewById(2131230731));
    setContentView(this.w);
  }
  
  private void h()
  {
    if (this.o) {
      getWindow().setFlags(1024, 1024);
    }
    if (this.p) {
      requestWindowFeature(1);
    }
  }
  
  private void i()
  {
    if (this.q)
    {
      LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, (int)(50.0F * this.x.density));
      View localView = b();
      if (localView != null) {
        this.a.addView(localView, localLayoutParams);
      }
    }
  }
  
  private void j()
  {
    LinearLayout.LayoutParams localLayoutParams;
    View localView;
    if (this.r)
    {
      localLayoutParams = new LinearLayout.LayoutParams(-1, -1);
      localView = o();
      if (localView == null) {
        break label79;
      }
      this.b.setVisibility(0);
      this.b.addView(localView, localLayoutParams);
    }
    for (;;)
    {
      localView = c();
      if (localView == null) {
        break;
      }
      this.c.setVisibility(0);
      this.b.setVisibility(8);
      this.c.addView(localView, localLayoutParams);
      return;
      label79:
      this.b.setVisibility(8);
    }
    this.c.setVisibility(8);
  }
  
  public static void s()
  {
    ArrayList localArrayList = l.b().a();
    i.a(" SingletonChildUtil.getInstance().getActivityList().size() = " + l.b().a().size());
    Iterator localIterator = localArrayList.iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        localArrayList.clear();
        return;
      }
      Activity localActivity = (Activity)((SoftReference)localIterator.next()).get();
      if ((localActivity != null) && (!localActivity.isFinishing())) {
        localActivity.finish();
      }
    }
  }
  
  public static void t()
  {
    s();
    ArrayList localArrayList = m.b().a();
    i.a(" SingletonTopUtil.getInstance().getActivityList().size() = " + m.b().a().size());
    Iterator localIterator = localArrayList.iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        localArrayList.clear();
        return;
      }
      Activity localActivity = (Activity)((SoftReference)localIterator.next()).get();
      if ((localActivity != null) && (!localActivity.isFinishing())) {
        localActivity.finish();
      }
    }
  }
  
  protected abstract void a();
  
  protected void a(Bundle paramBundle) {}
  
  protected View b()
  {
    new c(this);
    return (RelativeLayout)getLayoutInflater().inflate(2130903041, null);
  }
  
  protected View c()
  {
    return null;
  }
  
  protected void n() {}
  
  protected View o()
  {
    return null;
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.E = new AlertDialog.Builder(this);
    d();
    i.a("BaseActivity.onCreate(): " + this);
    a();
    h();
    e();
    this.x = new DisplayMetrics();
    getWindowManager().getDefaultDisplay().getMetrics(this.x);
    y = this.x.widthPixels;
    z = this.x.heightPixels;
    A = this.x.density;
    g();
    i();
    j();
    a(paramBundle);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    i.a("BaseActivity.onDestroy(): " + this);
    f();
  }
  
  protected void onPause()
  {
    super.onPause();
    i.a("BaseActivity.onPause(): " + this);
  }
  
  protected void onResume()
  {
    super.onResume();
    if (this.s) {
      s();
    }
    i.a("BaseActivity.onResume(): " + this);
    if (!this.u) {
      n();
    }
  }
  
  protected void onStart()
  {
    super.onStart();
    i.a("BaseActivity.onStart(): " + this);
    this.t = true;
  }
  
  protected void onStop()
  {
    super.onStop();
    i.a("BaseActivity.onStop(): " + this);
    this.t = false;
    p();
    q();
    r();
  }
  
  public void p()
  {
    if (this.B != null) {
      this.B.dismiss();
    }
  }
  
  public void q()
  {
    if (this.C != null) {
      this.C.dismiss();
    }
  }
  
  public void r()
  {
    if (this.D != null) {
      this.D.dismiss();
    }
  }
  
  public void u()
  {
    t();
    finish();
  }
}
