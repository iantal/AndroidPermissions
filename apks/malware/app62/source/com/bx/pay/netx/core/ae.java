package com.bx.pay.netx.core;

import android.os.Handler;
import android.os.Looper;
import com.bx.pay.netx.core.a.a;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public final class ae
{
  private AtomicInteger a = new AtomicInteger();
  private final Map b = new HashMap();
  private final Set c = new HashSet();
  private final PriorityBlockingQueue d = new PriorityBlockingQueue();
  private final PriorityBlockingQueue e = new PriorityBlockingQueue();
  private final a f;
  private final r g;
  private final e h;
  private s[] i;
  private b j;
  
  public ae(r paramR, int paramInt, a paramA)
  {
    this(paramR, paramInt, new f(new Handler(Looper.getMainLooper())), paramA);
  }
  
  private ae(r paramR, int paramInt, e paramE, a paramA)
  {
    this.f = paramA;
    this.g = paramR;
    this.h = paramE;
    this.g.a(paramE);
    this.i = new s[paramInt];
  }
  
  public final ab a(ab paramAb)
  {
    paramAb.a(this);
    synchronized (this.c)
    {
      this.c.add(paramAb);
      paramAb.a(this.a.incrementAndGet());
      paramAb.a("add-to-queue");
      if ((paramAb.f()) || (!paramAb.n()))
      {
        this.h.e(paramAb);
        this.e.add(paramAb);
        return paramAb;
      }
    }
    for (;;)
    {
      String str;
      synchronized (this.b)
      {
        str = paramAb.e();
        if (this.b.containsKey(str))
        {
          Queue localQueue = (Queue)this.b.get(str);
          ??? = localQueue;
          if (localQueue == null) {
            ??? = new LinkedList();
          }
          ((Queue)???).add(paramAb);
          this.b.put(str, ???);
          if (w.b) {
            w.a("Request for cacheKey=%s is in flight, putting on hold.", new Object[] { str });
          }
          return paramAb;
        }
      }
      this.b.put(str, null);
      this.d.add(paramAb);
    }
  }
  
  public final void a()
  {
    int m = 0;
    if (this.j != null) {
      this.j.a();
    }
    Object localObject1 = this.i;
    int n = localObject1.length;
    int k = 0;
    if (k >= n)
    {
      this.j = new b(this.d, this.e, this.f, this.h);
      this.j.start();
      k = m;
    }
    for (;;)
    {
      if (k >= this.i.length)
      {
        return;
        Object localObject2 = localObject1[k];
        if (localObject2 != null) {
          localObject2.a();
        }
        k += 1;
        break;
      }
      localObject1 = new s(this.e, this.g, this.f, this.h);
      this.i[k] = localObject1;
      ((s)localObject1).start();
      k += 1;
    }
  }
  
  public final int b()
  {
    return this.i.length;
  }
  
  final void b(ab paramAb)
  {
    synchronized (this.c)
    {
      this.c.remove(paramAb);
      if ((paramAb.f()) || (!paramAb.n())) {}
    }
    synchronized (this.b)
    {
      paramAb = paramAb.e();
      Queue localQueue = (Queue)this.b.remove(paramAb);
      if (localQueue != null)
      {
        if (w.b) {
          w.a("Releasing %d waiting requests for cacheKey=%s.", new Object[] { Integer.valueOf(localQueue.size()), paramAb });
        }
        this.d.addAll(localQueue);
      }
      return;
      paramAb = finally;
      throw paramAb;
    }
  }
}
