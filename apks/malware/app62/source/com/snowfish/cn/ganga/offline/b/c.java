package com.snowfish.cn.ganga.offline.b;

import com.snowfish.cn.ganga.offline.basic.IPW;
import java.io.OutputStream;

public final class c
  implements IPW
{
  private byte[] a;
  private int b;
  private int c;
  private int d;
  private boolean e;
  private boolean f;
  
  public c()
  {
    this.a = null;
    this.b = 0;
    this.c = 0;
    this.d = 0;
    this.e = true;
    this.f = true;
  }
  
  public c(byte[] paramArrayOfByte)
  {
    this(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public c(byte[] paramArrayOfByte, int paramInt)
  {
    this(paramArrayOfByte, 0, paramInt);
  }
  
  public c(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    this.a = paramArrayOfByte;
    this.b = paramInt1;
    this.c = paramInt1;
    this.d = paramInt2;
    this.e = true;
    this.f = true;
  }
  
  public final byte[] byteArray()
  {
    return this.a;
  }
  
  public final void ensureSize(int paramInt)
  {
    if ((this.f) && (paramInt > 0) && ((this.a == null) || (this.c + paramInt > this.d)))
    {
      if (this.d == 0) {
        this.d = 1024;
      }
      if (paramInt > this.d) {
        expand(this.d + paramInt + paramInt / 2);
      }
    }
    else
    {
      return;
    }
    expand(this.d * 2);
  }
  
  public final void expand(int paramInt)
  {
    byte[] arrayOfByte = new byte[paramInt];
    if (this.a != null) {
      System.arraycopy(this.a, 0, arrayOfByte, 0, this.c);
    }
    this.a = arrayOfByte;
    this.d = paramInt;
  }
  
  public final int getLength()
  {
    return this.c - this.b;
  }
  
  public final void setBigEndian(boolean paramBoolean)
  {
    this.e = paramBoolean;
  }
  
  public final byte[] toByteArray()
  {
    byte[] arrayOfByte = new byte[this.c - this.b];
    System.arraycopy(this.a, this.b, arrayOfByte, 0, this.c - this.b);
    return arrayOfByte;
  }
  
  public final void write(IPW paramIPW)
  {
    paramIPW = (c)paramIPW;
    int i = paramIPW.getLength();
    ensureSize(i);
    System.arraycopy(paramIPW.a, paramIPW.b, this.a, this.c, i);
    this.c = (i + this.c);
  }
  
  public final void write(byte[] paramArrayOfByte)
  {
    write(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public final void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    ensureSize(paramInt2);
    System.arraycopy(paramArrayOfByte, paramInt1, this.a, this.c, paramInt2);
    this.c += paramInt2;
  }
  
  public final void writeBoolean(boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (int i = 1;; i = 0)
    {
      writeI8(i);
      return;
    }
  }
  
  public final void writeFixedUTF16Array(String paramString, int paramInt)
  {
    int i = paramString.length();
    int j = i;
    if (i > paramInt) {
      j = paramInt;
    }
    ensureSize(paramInt * 2);
    i = 0;
    if (i >= j) {}
    for (;;)
    {
      if (i >= paramInt)
      {
        return;
        writeI16(paramString.charAt(i));
        i += 1;
        break;
      }
      writeI16(0);
      i += 1;
    }
  }
  
  public final void writeI16(int paramInt)
  {
    ensureSize(2);
    if (this.e)
    {
      this.a[this.c] = ((byte)(paramInt >> 8));
      this.a[(this.c + 1)] = ((byte)paramInt);
    }
    for (;;)
    {
      this.c += 2;
      return;
      this.a[(this.c + 1)] = ((byte)(paramInt >> 8));
      this.a[this.c] = ((byte)paramInt);
    }
  }
  
  public final void writeI16At(int paramInt1, int paramInt2)
  {
    if (this.e)
    {
      this.a[(this.b + paramInt2)] = ((byte)(paramInt1 >> 8));
      this.a[(this.b + paramInt2 + 1)] = ((byte)paramInt1);
      return;
    }
    this.a[(this.b + paramInt2 + 1)] = ((byte)(paramInt1 >> 8));
    this.a[(this.b + paramInt2)] = ((byte)paramInt1);
  }
  
  public final void writeI32(int paramInt)
  {
    ensureSize(4);
    if (this.e)
    {
      this.a[(this.c + 0)] = ((byte)(paramInt >> 24));
      this.a[(this.c + 1)] = ((byte)(paramInt >> 16));
      this.a[(this.c + 2)] = ((byte)(paramInt >> 8));
      this.a[(this.c + 3)] = ((byte)paramInt);
    }
    for (;;)
    {
      this.c += 4;
      return;
      this.a[(this.c + 3)] = ((byte)(paramInt >> 24));
      this.a[(this.c + 2)] = ((byte)(paramInt >> 16));
      this.a[(this.c + 1)] = ((byte)(paramInt >> 8));
      this.a[(this.c + 0)] = ((byte)paramInt);
    }
  }
  
  public final void writeI32At(int paramInt1, int paramInt2)
  {
    if (this.e)
    {
      this.a[(this.b + paramInt2 + 0)] = ((byte)(paramInt1 >> 24));
      this.a[(this.b + paramInt2 + 1)] = ((byte)(paramInt1 >> 16));
      this.a[(this.b + paramInt2 + 2)] = ((byte)(paramInt1 >> 8));
      this.a[(this.b + paramInt2 + 3)] = ((byte)paramInt1);
      return;
    }
    this.a[(this.b + paramInt2 + 3)] = ((byte)(paramInt1 >> 24));
    this.a[(this.b + paramInt2 + 2)] = ((byte)(paramInt1 >> 16));
    this.a[(this.b + paramInt2 + 1)] = ((byte)(paramInt1 >> 8));
    this.a[(this.b + paramInt2 + 0)] = ((byte)paramInt1);
  }
  
  public final void writeI32LE(int paramInt)
  {
    ensureSize(4);
    this.a[(this.c + 3)] = ((byte)(paramInt >> 24));
    this.a[(this.c + 2)] = ((byte)(paramInt >> 16));
    this.a[(this.c + 1)] = ((byte)(paramInt >> 8));
    this.a[(this.c + 0)] = ((byte)paramInt);
    this.c += 4;
  }
  
  public final void writeI64(long paramLong)
  {
    if (this.e)
    {
      writeI32((int)(paramLong >> 32));
      writeI32((int)paramLong);
      return;
    }
    writeI32((int)paramLong);
    writeI32((int)(paramLong >> 32));
  }
  
  public final void writeI8(int paramInt)
  {
    ensureSize(1);
    this.a[this.c] = ((byte)paramInt);
    this.c += 1;
  }
  
  public final void writeTo(OutputStream paramOutputStream)
  {
    paramOutputStream.write(this.a, this.b, this.c - this.b);
  }
  
  public final void writeU16(int paramInt)
  {
    writeI16(paramInt);
  }
  
  public final void writeU32(int paramInt)
  {
    writeI32(paramInt);
  }
  
  public final void writeU64(long paramLong)
  {
    writeI64(paramLong);
  }
  
  public final void writeU8(int paramInt)
  {
    ensureSize(1);
    this.a[this.c] = ((byte)paramInt);
    this.c += 1;
  }
  
  public final void writeUTF16WithLength(String paramString, int paramInt)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    switch (paramInt)
    {
    }
    for (;;)
    {
      writeFixedUTF16Array(str, str.length());
      return;
      writeU8(str.length());
      continue;
      writeU16(str.length());
      continue;
      writeU32(str.length());
    }
  }
  
  public final void writeUTF8WithLength(String paramString, int paramInt)
  {
    paramString = paramString.getBytes();
    switch (paramInt)
    {
    }
    for (;;)
    {
      write(paramString);
      return;
      writeU8(paramString.length);
      continue;
      writeU16(paramString.length);
      continue;
      writeU32(paramString.length);
    }
  }
}
