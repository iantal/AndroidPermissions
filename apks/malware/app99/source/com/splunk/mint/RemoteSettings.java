package com.splunk.mint;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import org.json.JSONException;
import org.json.JSONObject;

class RemoteSettings
{
  private static final String DEVSETTINGS = "devSettings";
  private static final String EVENTLEVEL = "eventLevel";
  private static final String HASHCODE = "hashCode";
  private static final String LOGLEVEL = "logLevel";
  private static final String NETWORKMONITORING = "netMonitoring";
  private static final String REMOTESETTINGS_API = "1";
  private static final String REMOTESETTINGS_NAME = "remSetVer";
  private static final String SESSIONTIME = "sessionTime";
  private static final String SHARED_PREFERENSES_NAME = "REMOTESETTINGSSETTINGS";
  
  RemoteSettings() {}
  
  protected static final RemoteSettingsData convertJsonToRemoteSettings(String paramString)
  {
    if ((paramString == null) || (paramString.length() < 1)) {
      paramString = null;
    }
    RemoteSettingsData localRemoteSettingsData;
    for (;;)
    {
      return paramString;
      localRemoteSettingsData = new RemoteSettingsData();
      try
      {
        JSONObject localJSONObject = new JSONObject(paramString).optJSONObject("remSetVer1");
        paramString = localRemoteSettingsData;
        if (localJSONObject != null)
        {
          localRemoteSettingsData.logLevel = Integer.valueOf(localJSONObject.optInt("logLevel"));
          localRemoteSettingsData.eventLevel = Integer.valueOf(localJSONObject.getInt("eventLevel"));
          localRemoteSettingsData.netMonitoring = Boolean.valueOf(localJSONObject.optBoolean("netMonitoring"));
          localRemoteSettingsData.sessionTime = Integer.valueOf(localJSONObject.optInt("sessionTime"));
          localRemoteSettingsData.devSettings = localJSONObject.optJSONObject("devSettings").toString();
          localRemoteSettingsData.hashCode = localJSONObject.optString("hash");
          return localRemoteSettingsData;
        }
      }
      catch (JSONException paramString)
      {
        Logger.logError("Could not convert json to remote data");
      }
    }
    return localRemoteSettingsData;
  }
  
  protected static final RemoteSettingsData loadRemoteSettings(Context paramContext)
  {
    RemoteSettingsData localRemoteSettingsData = new RemoteSettingsData();
    paramContext = paramContext.getSharedPreferences("REMOTESETTINGSSETTINGS", 0);
    if (paramContext == null) {
      return null;
    }
    localRemoteSettingsData.logLevel = Integer.valueOf(paramContext.getInt("logLevel", Properties.RemoteSettingsProps.logLevel.intValue()));
    localRemoteSettingsData.eventLevel = Integer.valueOf(paramContext.getInt("eventLevel", Properties.RemoteSettingsProps.eventLevel.intValue()));
    localRemoteSettingsData.netMonitoring = Boolean.valueOf(paramContext.getBoolean("netMonitoring", Properties.RemoteSettingsProps.netMonitoringEnabled.booleanValue()));
    localRemoteSettingsData.sessionTime = Integer.valueOf(paramContext.getInt("sessionTime", Properties.RemoteSettingsProps.sessionTime.intValue()));
    localRemoteSettingsData.devSettings = paramContext.getString("devSettings", Properties.RemoteSettingsProps.devSettings.toString());
    localRemoteSettingsData.hashCode = paramContext.getString("hashCode", Properties.RemoteSettingsProps.hashCode);
    return localRemoteSettingsData;
  }
  
  protected static final boolean saveAndLoadRemoteSettings(Context paramContext, RemoteSettingsData paramRemoteSettingsData)
  {
    paramContext = paramContext.getSharedPreferences("REMOTESETTINGSSETTINGS", 0);
    if (paramContext == null) {}
    do
    {
      return false;
      paramContext = paramContext.edit();
    } while (paramContext == null);
    if ((paramRemoteSettingsData.logLevel != null) && (paramRemoteSettingsData.logLevel.intValue() > 0))
    {
      paramContext.putInt("logLevel", paramRemoteSettingsData.logLevel.intValue());
      Properties.RemoteSettingsProps.logLevel = paramRemoteSettingsData.logLevel;
    }
    if ((paramRemoteSettingsData.eventLevel != null) && (paramRemoteSettingsData.eventLevel.intValue() > 0))
    {
      paramContext.putInt("eventLevel", paramRemoteSettingsData.eventLevel.intValue());
      Properties.RemoteSettingsProps.eventLevel = paramRemoteSettingsData.eventLevel;
    }
    if (paramRemoteSettingsData.netMonitoring != null)
    {
      paramContext.putBoolean("netMonitoring", paramRemoteSettingsData.netMonitoring.booleanValue());
      Properties.RemoteSettingsProps.netMonitoringEnabled = paramRemoteSettingsData.netMonitoring;
    }
    if ((paramRemoteSettingsData.sessionTime != null) && (paramRemoteSettingsData.sessionTime.intValue() > 0))
    {
      paramContext.putInt("sessionTime", paramRemoteSettingsData.sessionTime.intValue());
      Properties.RemoteSettingsProps.sessionTime = paramRemoteSettingsData.sessionTime;
    }
    if (paramRemoteSettingsData.devSettings != null) {
      paramContext.putString("devSettings", paramRemoteSettingsData.devSettings);
    }
    try
    {
      Properties.RemoteSettingsProps.devSettings = new JSONObject(paramRemoteSettingsData.devSettings);
      if ((paramRemoteSettingsData.hashCode != null) && (paramRemoteSettingsData.hashCode.length() > 1))
      {
        paramContext.putString("hashCode", paramRemoteSettingsData.hashCode);
        Properties.RemoteSettingsProps.hashCode = paramRemoteSettingsData.hashCode;
      }
      return paramContext.commit();
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        localJSONException.printStackTrace();
      }
    }
  }
}
