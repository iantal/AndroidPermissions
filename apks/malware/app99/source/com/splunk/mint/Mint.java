package com.splunk.mint;

import android.content.Context;
import com.splunk.mint.network.MonitorRegistry;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import org.json.JSONObject;

public final class Mint
{
  static boolean DEBUG = false;
  private static boolean isSessionActive;
  static MintCallback mintCallback = null;
  static boolean netInitializedSuccessfully = false;
  private static boolean networkMonitoringEnabled;
  private static MonitorRegistry registry;
  static boolean triedToInitNet = false;
  
  static
  {
    registry = new MonitorRegistry();
    isSessionActive = false;
    networkMonitoringEnabled = true;
  }
  
  public Mint() {}
  
  public static void addExtraData(String paramString1, String paramString2)
  {
    if (Properties.extraData == null) {
      Properties.extraData = new ExtraData();
    }
    if (paramString1 != null)
    {
      String str = paramString2;
      if (paramString2 == null) {
        str = "null";
      }
      Properties.extraData.addExtraData(paramString1, str);
    }
  }
  
  public static void addExtraDataMap(HashMap<String, String> paramHashMap)
  {
    if (Properties.extraData == null) {
      Properties.extraData = new ExtraData();
    }
    if (paramHashMap != null) {
      Properties.extraData.addExtraDataMap(paramHashMap);
    }
  }
  
  public static void addURLToBlackList(String paramString)
  {
    if (paramString != null) {
      Properties.excludedUrls.addValue(paramString);
    }
  }
  
  public static void clearExtraData()
  {
    if (Properties.extraData == null) {
      Properties.extraData = new ExtraData();
    }
    Properties.extraData.clearData();
  }
  
  public static void clearTotalCrashesNum()
  {
    if (Properties.isPluginInitialized()) {
      new CrashInfo().clearCrashCounter();
    }
  }
  
  public static void closeSession(Context paramContext)
  {
    if ((Properties.isPluginInitialized()) && (isSessionActive))
    {
      isSessionActive = false;
      ActionEvent.createGnip().save(new DataSaver());
      Utils.clearLastPingSentTime(paramContext);
    }
  }
  
  public static void disableNetworkMonitoring()
  {
    networkMonitoringEnabled = false;
  }
  
  public static void enableDebug()
  {
    DEBUG = true;
  }
  
  public static void enableLogging(boolean paramBoolean)
  {
    Properties.SEND_LOG = paramBoolean;
  }
  
  public static void flush()
  {
    if (Properties.isPluginInitialized()) {
      new DataFlusher().send();
    }
  }
  
  public static JSONObject getDevSettings()
  {
    return Properties.RemoteSettingsProps.devSettings;
  }
  
  public static HashMap<String, String> getExtraData()
  {
    if (Properties.extraData == null) {
      Properties.extraData = new ExtraData();
    }
    return Properties.extraData.getExtraData();
  }
  
  public static String getLastCrashID()
  {
    return CrashInfo.getLastCrashID();
  }
  
  public static int getTotalCrashesNum()
  {
    return CrashInfo.getCrashCounter();
  }
  
  public static void initAndStartSession(Context paramContext, String paramString)
  {
    initAndStartSession(paramContext, paramString, null);
  }
  
  private static void initAndStartSession(Context paramContext, final String paramString1, final String paramString2)
  {
    if (paramContext == null)
    {
      Logger.logWarning("Context is null!");
      return;
    }
    if ((paramString1 == null) || (paramString1.length() < 8) || (paramString1.length() > 14)) {
      throw new IllegalArgumentException("Your Mint API Key is invalid!");
    }
    Properties.API_KEY = paramString1;
    Properties.TIMESTAMP = System.currentTimeMillis();
    new LowPriorityThreadFactory().newThread(new Runnable()
    {
      public void run()
      {
        Properties.initialize(this.val$context);
        new MintUrls(paramString2, paramString1);
        Mint.access$000();
        if (!Mint.netInitializedSuccessfully) {
          Mint.access$100();
        }
        Mint.startSession(this.val$context);
        Mint.flush();
      }
    }).start();
  }
  
  /* Error */
  private static void initializeNetworkMonitoring()
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: getstatic 37	com/splunk/mint/Mint:networkMonitoringEnabled	Z
    //   6: ifeq +80 -> 86
    //   9: getstatic 26	com/splunk/mint/Mint:triedToInitNet	Z
    //   12: ifne +74 -> 86
    //   15: invokestatic 214	com/splunk/mint/network/NetLogManager:deviceSupporsNetworkMonitoring	()Z
    //   18: ifeq +68 -> 86
    //   21: getstatic 218	com/splunk/mint/Properties$RemoteSettingsProps:netMonitoringEnabled	Ljava/lang/Boolean;
    //   24: invokevirtual 223	java/lang/Boolean:booleanValue	()Z
    //   27: ifeq +59 -> 86
    //   30: ldc -31
    //   32: invokestatic 228	com/splunk/mint/Logger:logInfo	(Ljava/lang/String;)V
    //   35: iconst_1
    //   36: putstatic 26	com/splunk/mint/Mint:triedToInitNet	Z
    //   39: new 230	com/splunk/mint/network/http/MonitorableURLStreamHandlerFactory
    //   42: dup
    //   43: getstatic 33	com/splunk/mint/Mint:registry	Lcom/splunk/mint/network/MonitorRegistry;
    //   46: invokespecial 233	com/splunk/mint/network/http/MonitorableURLStreamHandlerFactory:<init>	(Lcom/splunk/mint/network/MonitorRegistry;)V
    //   49: invokestatic 239	java/net/URL:setURLStreamHandlerFactory	(Ljava/net/URLStreamHandlerFactory;)V
    //   52: new 241	com/splunk/mint/network/socket/MonitoringSocketFactory
    //   55: dup
    //   56: getstatic 33	com/splunk/mint/Mint:registry	Lcom/splunk/mint/network/MonitorRegistry;
    //   59: invokespecial 242	com/splunk/mint/network/socket/MonitoringSocketFactory:<init>	(Lcom/splunk/mint/network/MonitorRegistry;)V
    //   62: astore_0
    //   63: aload_0
    //   64: invokestatic 248	java/net/Socket:setSocketImplFactory	(Ljava/net/SocketImplFactory;)V
    //   67: aload_0
    //   68: invokestatic 251	javax/net/ssl/SSLSocket:setSocketImplFactory	(Ljava/net/SocketImplFactory;)V
    //   71: iconst_1
    //   72: putstatic 24	com/splunk/mint/Mint:netInitializedSuccessfully	Z
    //   75: getstatic 24	com/splunk/mint/Mint:netInitializedSuccessfully	Z
    //   78: ifeq +8 -> 86
    //   81: ldc -3
    //   83: invokestatic 228	com/splunk/mint/Logger:logInfo	(Ljava/lang/String;)V
    //   86: ldc 2
    //   88: monitorexit
    //   89: return
    //   90: astore_0
    //   91: iconst_0
    //   92: putstatic 24	com/splunk/mint/Mint:netInitializedSuccessfully	Z
    //   95: goto -43 -> 52
    //   98: astore_0
    //   99: ldc 2
    //   101: monitorexit
    //   102: aload_0
    //   103: athrow
    //   104: astore_0
    //   105: iconst_0
    //   106: putstatic 24	com/splunk/mint/Mint:netInitializedSuccessfully	Z
    //   109: goto -34 -> 75
    // Local variable table:
    //   start	length	slot	name	signature
    //   62	6	0	localMonitoringSocketFactory	com.splunk.mint.network.socket.MonitoringSocketFactory
    //   90	1	0	localException	Exception
    //   98	5	0	localObject	Object
    //   104	1	0	localIOException	java.io.IOException
    // Exception table:
    //   from	to	target	type
    //   39	52	90	java/lang/Exception
    //   3	39	98	finally
    //   39	52	98	finally
    //   52	75	98	finally
    //   75	86	98	finally
    //   91	95	98	finally
    //   105	109	98	finally
    //   52	75	104	java/io/IOException
  }
  
  private static void installExceptionHandler()
  {
    Logger.logInfo("Registering the exception handler");
    Thread.UncaughtExceptionHandler localUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
    if (!(localUncaughtExceptionHandler instanceof ExceptionHandler)) {
      Thread.setDefaultUncaughtExceptionHandler(new ExceptionHandler(localUncaughtExceptionHandler));
    }
  }
  
  public static void leaveBreadcrumb(String paramString)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      Properties.breadcrumbs.addToList(paramString);
    }
  }
  
  public static void logEvent(String paramString)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionEvent.createEvent(paramString).save(new DataSaver());
    }
  }
  
  public static void logEvent(String paramString, MintLogLevel paramMintLogLevel)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionEvent.createEvent(paramString, paramMintLogLevel, null).save(new DataSaver());
    }
  }
  
  public static void logEvent(String paramString1, MintLogLevel paramMintLogLevel, String paramString2, String paramString3)
  {
    if (Properties.isPluginInitialized())
    {
      HashMap localHashMap = new HashMap(1);
      localHashMap.put(paramString2, paramString3);
      logEvent(paramString1, paramMintLogLevel, localHashMap);
    }
  }
  
  public static void logEvent(String paramString, MintLogLevel paramMintLogLevel, HashMap<String, Object> paramHashMap)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionEvent.createEvent(paramString, paramMintLogLevel, paramHashMap).save(new DataSaver());
    }
  }
  
  public static void logException(Exception paramException)
  {
    logExceptionMap(new HashMap(0), paramException);
  }
  
  public static void logExceptionMap(HashMap<String, Object> paramHashMap, Exception paramException)
  {
    if (Properties.isPluginInitialized())
    {
      StringWriter localStringWriter = new StringWriter();
      paramException.printStackTrace(new PrintWriter(localStringWriter));
      new ActionError(EnumActionType.error, localStringWriter.toString(), EnumExceptionType.HANDLED, paramHashMap).save(new DataSaver());
    }
  }
  
  public static void logExceptionMessage(String paramString1, String paramString2, Exception paramException)
  {
    HashMap localHashMap = new HashMap(1);
    if ((paramString1 != null) && (paramString2 != null)) {
      localHashMap.put(paramString1, paramString2);
    }
    logExceptionMap(localHashMap, paramException);
  }
  
  private static void logView(String paramString)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionView.logView(paramString).save(new DataSaver());
    }
  }
  
  public static void removeExtraData(String paramString)
  {
    if (Properties.extraData == null) {
      Properties.extraData = new ExtraData();
    }
    if (paramString != null) {
      Properties.extraData.removeKey(paramString);
    }
  }
  
  public static void setLogging(int paramInt)
  {
    if (paramInt > 0)
    {
      Properties.SEND_LOG = true;
      Properties.LOG_LINES = paramInt;
    }
  }
  
  public static void setLogging(int paramInt, String paramString)
  {
    if ((paramString != null) && (paramInt > 0))
    {
      Properties.SEND_LOG = true;
      Properties.LOG_LINES = paramInt;
      Properties.LOG_FILTER = paramString;
    }
  }
  
  public static void setLogging(String paramString)
  {
    if (paramString != null)
    {
      Properties.SEND_LOG = true;
      Properties.LOG_FILTER = paramString;
    }
  }
  
  public static final void setMintCallback(MintCallback paramMintCallback)
  {
    mintCallback = paramMintCallback;
  }
  
  public static void setUserIdentifier(String paramString)
  {
    Properties.userIdentifier = paramString;
  }
  
  public static void startSession(Context paramContext)
  {
    if (paramContext == null)
    {
      Logger.logWarning("Context is null!");
      return;
    }
    if (!isSessionActive)
    {
      isSessionActive = true;
      Properties.initialize(paramContext);
    }
    new LowPriorityThreadFactory().newThread(new Runnable()
    {
      public void run()
      {
        if (Utils.shouldSendPing(this.val$context)) {
          ActionEvent.createPing().send(this.val$context, new NetSender(), true);
        }
      }
    }).start();
  }
  
  public static void transactionCancel(String paramString1, String paramString2)
  {
    if ((Properties.isPluginInitialized()) && (paramString1 != null)) {
      ActionTransactionStop.createTransactionCancel(paramString1, paramString2, null).save(new DataSaver());
    }
  }
  
  public static void transactionCancel(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    if ((Properties.isPluginInitialized()) && (paramString1 != null))
    {
      paramString1 = new HashMap(1);
      paramString1.put(paramString3, paramString4);
      transactionCancel(paramString3, paramString2, paramString1);
    }
  }
  
  public static void transactionCancel(String paramString1, String paramString2, HashMap<String, Object> paramHashMap)
  {
    if ((Properties.isPluginInitialized()) && (paramString1 != null)) {
      ActionTransactionStop.createTransactionCancel(paramString1, paramString2, paramHashMap).save(new DataSaver());
    }
  }
  
  public static void transactionStart(String paramString)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionTransactionStart.createTransactionStart(paramString, null).save(new DataSaver());
    }
  }
  
  public static void transactionStart(String paramString1, String paramString2, String paramString3)
  {
    if (Properties.isPluginInitialized())
    {
      paramString1 = new HashMap(1);
      paramString1.put(paramString2, paramString3);
      transactionStart(paramString2, paramString1);
    }
  }
  
  public static void transactionStart(String paramString, HashMap<String, Object> paramHashMap)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionTransactionStart.createTransactionStart(paramString, paramHashMap).save(new DataSaver());
    }
  }
  
  public static void transactionStop(String paramString)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionTransactionStop.createTransactionStop(paramString, null).save(new DataSaver());
    }
  }
  
  public static void transactionStop(String paramString1, String paramString2, String paramString3)
  {
    if ((Properties.isPluginInitialized()) && (paramString1 != null))
    {
      paramString1 = new HashMap(1);
      paramString1.put(paramString2, paramString3);
      transactionStop(paramString2, paramString1);
    }
  }
  
  public static void transactionStop(String paramString, HashMap<String, Object> paramHashMap)
  {
    if ((Properties.isPluginInitialized()) && (paramString != null)) {
      ActionTransactionStop.createTransactionStop(paramString, paramHashMap).save(new DataSaver());
    }
  }
  
  public static void xamarinException(Exception paramException, boolean paramBoolean, HashMap<String, Object> paramHashMap)
  {
    StringWriter localStringWriter = new StringWriter();
    paramException.printStackTrace(new PrintWriter(localStringWriter));
    paramException = EnumExceptionType.UNHANDLED;
    if (paramBoolean) {
      paramException = EnumExceptionType.HANDLED;
    }
    new ActionError(EnumActionType.error, localStringWriter.toString().replaceFirst("\n", "\n\t"), paramException, paramHashMap).save(new DataSaver());
  }
  
  public MonitorRegistry getRegistry()
  {
    if (registry == null) {
      registry = new MonitorRegistry();
    }
    return registry;
  }
}
