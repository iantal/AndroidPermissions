package com.splunk.mint;

import android.content.Context;
import java.util.HashMap;
import org.json.JSONException;
import org.json.JSONObject;

class ActionEvent
  extends BaseDTO
  implements InterfaceDataType
{
  private static String savedSessionID = "";
  protected long duration = -1L;
  protected Integer eventLevel = null;
  protected String eventName = "";
  protected String session_id = "";
  
  public ActionEvent(EnumActionType paramEnumActionType, String paramString, Integer paramInteger, HashMap<String, Object> paramHashMap)
  {
    super(paramEnumActionType, paramHashMap);
    this.eventName = paramString;
    this.eventLevel = paramInteger;
    if (paramEnumActionType == EnumActionType.ping)
    {
      this.session_id = Utils.getRandomSessionNumber();
      savedSessionID = this.session_id;
    }
    while (paramEnumActionType != EnumActionType.gnip) {
      return;
    }
    this.session_id = savedSessionID;
  }
  
  public static final ActionEvent createEvent(String paramString)
  {
    return new ActionEvent(EnumActionType.event, paramString, Integer.valueOf(Utils.convertLoggingLevelToInt(MintLogLevel.Verbose)), null);
  }
  
  public static final ActionEvent createEvent(String paramString, MintLogLevel paramMintLogLevel, HashMap<String, Object> paramHashMap)
  {
    return new ActionEvent(EnumActionType.event, paramString, Integer.valueOf(Utils.convertLoggingLevelToInt(paramMintLogLevel)), paramHashMap);
  }
  
  public static final ActionEvent createGnip()
  {
    ActionEvent localActionEvent = new ActionEvent(EnumActionType.gnip, null, null, null);
    localActionEvent.duration = (localActionEvent.timestampMilis.longValue() - Properties.lastPingTime);
    return localActionEvent;
  }
  
  public static final ActionEvent createPing()
  {
    ActionEvent localActionEvent = new ActionEvent(EnumActionType.ping, null, null, null);
    Properties.lastPingTime = localActionEvent.timestampMilis.longValue();
    return localActionEvent;
  }
  
  public void save(DataSaver paramDataSaver)
  {
    if (this.eventLevel != null)
    {
      if (this.eventLevel.intValue() >= Properties.RemoteSettingsProps.eventLevel.intValue())
      {
        paramDataSaver.save(toJsonLine());
        return;
      }
      Logger.logInfo("Event's level is lower than the minimum level from Remote Settings, event will not be saved");
      return;
    }
    paramDataSaver.save(toJsonLine());
  }
  
  public void send(Context paramContext, NetSender paramNetSender, boolean paramBoolean)
  {
    if (this.type.equals(EnumActionType.ping))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(MintUrls.getURL(0, 1));
      localStringBuilder.append("?hash=");
      localStringBuilder.append(Properties.RemoteSettingsProps.hashCode);
      paramNetSender = RemoteSettings.convertJsonToRemoteSettings(paramNetSender.sendBlocking(localStringBuilder.toString(), toJsonLine(), paramBoolean).getServerResponse());
      if (paramNetSender != null) {
        RemoteSettings.saveAndLoadRemoteSettings(paramContext, paramNetSender);
      }
      return;
    }
    paramNetSender.send(toJsonLine(), paramBoolean);
  }
  
  public void send(NetSender paramNetSender, boolean paramBoolean)
  {
    paramNetSender.send(toJsonLine(), paramBoolean);
  }
  
  public String toJsonLine()
  {
    JSONObject localJSONObject = getBasicDataFixtureJson();
    try
    {
      if (this.duration != -1L) {
        localJSONObject.put("ses_duration", this.duration);
      }
      if (this.eventName != null) {
        localJSONObject.put("event_name", this.eventName);
      }
      if (this.eventLevel != null) {
        localJSONObject.put("level", this.eventLevel);
      }
      if (this.type != EnumActionType.event) {
        localJSONObject.put("session_id", this.session_id);
      }
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        localJSONException.printStackTrace();
      }
    }
    return localJSONObject.toString() + Properties.getSeparator(this.type);
  }
}
