package com.splunk.mint;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

abstract class BaseDTO
{
  protected static final String UNKNOWN = "NA";
  protected String apiKey;
  protected String appVersionCode;
  protected String appVersionName;
  protected String carrier;
  protected String connection;
  protected HashMap<String, Object> customData;
  protected String device;
  protected ExtraData extraData;
  protected String locale;
  protected String osVersion;
  protected String packageName;
  protected String platform = "Android";
  protected String remoteIP;
  protected Boolean rooted;
  protected String screenOrientation;
  protected String sdkVersion = "4.0.8";
  protected String state;
  protected Long timestampMilis = Long.valueOf(System.currentTimeMillis());
  protected EnumActionType type;
  protected String userIdentifier;
  protected String uuid;
  
  public BaseDTO(EnumActionType paramEnumActionType, HashMap<String, Object> paramHashMap)
  {
    this.type = paramEnumActionType;
    this.apiKey = Properties.API_KEY;
    StringBuilder localStringBuilder = new StringBuilder();
    if (Properties.PHONE_BRAND != null) {}
    for (paramEnumActionType = Properties.PHONE_BRAND + " ";; paramEnumActionType = "")
    {
      this.device = (paramEnumActionType + Properties.PHONE_MODEL);
      this.osVersion = Properties.OS_VERSION;
      this.appVersionCode = Properties.APP_VERSIONCODE;
      this.appVersionName = Properties.APP_VERSIONNAME;
      this.packageName = Properties.APP_PACKAGE;
      this.locale = Properties.LOCALE;
      this.rooted = Boolean.valueOf(Properties.HAS_ROOT);
      this.uuid = Properties.UID;
      this.userIdentifier = Properties.userIdentifier;
      this.carrier = Properties.CARRIER;
      this.remoteIP = "{%#@@#%}";
      this.connection = Properties.CONNECTION;
      this.state = Properties.STATE;
      this.extraData = Properties.extraData;
      this.screenOrientation = Properties.SCREEN_ORIENTATION;
      this.customData = paramHashMap;
      return;
    }
  }
  
  public JSONObject getBasicDataFixtureJson()
  {
    JSONObject localJSONObject1 = new JSONObject();
    Iterator localIterator;
    Map.Entry localEntry;
    for (;;)
    {
      try
      {
        localJSONObject1.put("sdkVersion", this.sdkVersion);
        localJSONObject1.put("apiKey", this.apiKey);
        localJSONObject1.put("platform", this.platform);
        localJSONObject1.put("device", this.device);
        localJSONObject1.put("osVersion", this.osVersion);
        localJSONObject1.put("locale", this.locale);
        localJSONObject1.put("uuid", this.uuid);
        localJSONObject1.put("userIdentifier", this.userIdentifier);
        localJSONObject1.put("carrier", this.carrier);
        localJSONObject1.put("remoteIP", this.remoteIP);
        localJSONObject1.put("appVersionCode", this.appVersionCode);
        localJSONObject1.put("appVersionName", this.appVersionName);
        localJSONObject1.put("packageName", this.packageName);
        localJSONObject1.put("connection", this.connection);
        localJSONObject1.put("state", this.state);
        localJSONObject1.put("screenOrientation", this.screenOrientation);
        JSONObject localJSONObject2 = new JSONObject();
        if ((this.extraData == null) || (this.extraData.isEmpty())) {
          break;
        }
        localIterator = this.extraData.entrySet().iterator();
        if (!localIterator.hasNext()) {
          break;
        }
        localEntry = (Map.Entry)localIterator.next();
        if (localEntry.getValue() == null) {
          localJSONObject2.put((String)localEntry.getKey(), "null");
        } else {
          localJSONException.put((String)localEntry.getKey(), localEntry.getValue());
        }
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
        return localJSONObject1;
      }
    }
    if ((this.customData != null) && (!this.customData.isEmpty()))
    {
      localIterator = this.customData.entrySet().iterator();
      while (localIterator.hasNext())
      {
        localEntry = (Map.Entry)localIterator.next();
        if (localEntry.getValue() == null) {
          localJSONException.put((String)localEntry.getKey(), "null");
        } else {
          localJSONException.put((String)localEntry.getKey(), localEntry.getValue());
        }
      }
    }
    localJSONObject1.put("extraData", localJSONException);
    JSONArray localJSONArray = new JSONArray();
    if (Properties.transactions != null)
    {
      localIterator = Properties.transactions.iterator();
      while (localIterator.hasNext()) {
        localJSONArray.put((String)localIterator.next());
      }
    }
    localJSONObject1.put("transactions", localJSONArray);
    return localJSONObject1;
  }
}
