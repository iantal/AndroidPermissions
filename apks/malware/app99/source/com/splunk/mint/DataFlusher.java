package com.splunk.mint;

import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class DataFlusher
  extends BaseExecutor
  implements InterfaceExecutor
{
  DataFlusher() {}
  
  public ExecutorService getExecutor()
  {
    if (executor == null) {
      executor = Executors.newFixedThreadPool(1);
    }
    return executor;
  }
  
  public void send()
  {
    try
    {
      Thread localThread = new LowPriorityThreadFactory().newThread(new Runnable()
      {
        public void run()
        {
          File[] arrayOfFile = new File(Properties.FILES_PATH).listFiles(SplunkFileFilter.getInstance());
          int j = arrayOfFile.length;
          int i = 0;
          if (i < j)
          {
            File localFile = arrayOfFile[i];
            NetSenderResponse localNetSenderResponse = new NetSenderResponse(MintUrls.getURL(), null);
            if (!localFile.exists())
            {
              localNetSenderResponse.setException(new Exception("There is no data to be sent. This is not an error."));
              localNetSenderResponse.setSentSuccessfully(Boolean.valueOf(false));
            }
            for (;;)
            {
              i += 1;
              break;
              Object localObject2 = null;
              Object localObject1;
              try
              {
                String str = Utils.readFile(localFile.getAbsolutePath());
                if ((str == null) || (str.length() == 0))
                {
                  if (Mint.mintCallback == null) {
                    continue;
                  }
                  Mint.mintCallback.netSenderResponse(localNetSenderResponse);
                }
              }
              catch (Exception localException)
              {
                for (;;)
                {
                  localNetSenderResponse.setException(localException);
                  localNetSenderResponse.setSentSuccessfully(Boolean.valueOf(false));
                  localException.printStackTrace();
                  localObject1 = localObject2;
                  if (Mint.mintCallback != null)
                  {
                    Mint.mintCallback.netSenderResponse(localNetSenderResponse);
                    localObject1 = localObject2;
                  }
                }
              }
              if (new NetSender().sendBlocking(null, localObject1, false).getSentSuccessfully().booleanValue()) {
                localFile.delete();
              }
            }
          }
        }
      });
      if (getExecutor() != null) {
        getExecutor().execute(localThread);
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
}
