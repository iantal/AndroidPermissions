package org.apache.http.conn.ssl;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.annotation.Immutable;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.message.ParserCursor;
import org.apache.http.util.CharArrayBuffer;

@Immutable
final class DistinguishedNameParser
{
  private static final BitSet COMMA_OR_PLUS = TokenParser.INIT_BITSET(new int[] { 44, 43 });
  private static final BitSet EQUAL_OR_COMMA_OR_PLUS;
  public static final DistinguishedNameParser INSTANCE = new DistinguishedNameParser();
  private final TokenParser tokenParser = new InternalTokenParser();
  
  static
  {
    EQUAL_OR_COMMA_OR_PLUS = TokenParser.INIT_BITSET(new int[] { 61, 44, 43 });
  }
  
  DistinguishedNameParser() {}
  
  public List<NameValuePair> parse(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    CharArrayBuffer localCharArrayBuffer = new CharArrayBuffer(paramString.length());
    localCharArrayBuffer.append(paramString);
    return parse(localCharArrayBuffer, new ParserCursor(0, paramString.length()));
  }
  
  public List<NameValuePair> parse(CharArrayBuffer paramCharArrayBuffer, ParserCursor paramParserCursor)
  {
    ArrayList localArrayList = new ArrayList();
    this.tokenParser.skipWhiteSpace(paramCharArrayBuffer, paramParserCursor);
    while (!paramParserCursor.atEnd()) {
      localArrayList.add(parseParameter(paramCharArrayBuffer, paramParserCursor));
    }
    return localArrayList;
  }
  
  NameValuePair parseParameter(CharArrayBuffer paramCharArrayBuffer, ParserCursor paramParserCursor)
  {
    String str = parseToken(paramCharArrayBuffer, paramParserCursor, EQUAL_OR_COMMA_OR_PLUS);
    if (paramParserCursor.atEnd()) {
      return new BasicNameValuePair(str, null);
    }
    int i = paramCharArrayBuffer.charAt(paramParserCursor.getPos());
    paramParserCursor.updatePos(paramParserCursor.getPos() + 1);
    if (i == 44) {
      return new BasicNameValuePair(str, null);
    }
    paramCharArrayBuffer = parseValue(paramCharArrayBuffer, paramParserCursor, COMMA_OR_PLUS);
    if (!paramParserCursor.atEnd()) {
      paramParserCursor.updatePos(paramParserCursor.getPos() + 1);
    }
    return new BasicNameValuePair(str, paramCharArrayBuffer);
  }
  
  String parseToken(CharArrayBuffer paramCharArrayBuffer, ParserCursor paramParserCursor, BitSet paramBitSet)
  {
    return this.tokenParser.parseToken(paramCharArrayBuffer, paramParserCursor, paramBitSet);
  }
  
  String parseValue(CharArrayBuffer paramCharArrayBuffer, ParserCursor paramParserCursor, BitSet paramBitSet)
  {
    return this.tokenParser.parseValue(paramCharArrayBuffer, paramParserCursor, paramBitSet);
  }
  
  static class InternalTokenParser
    extends TokenParser
  {
    InternalTokenParser() {}
    
    public void copyUnquotedContent(CharArrayBuffer paramCharArrayBuffer, ParserCursor paramParserCursor, BitSet paramBitSet, StringBuilder paramStringBuilder)
    {
      int j = paramParserCursor.getPos();
      int k = paramParserCursor.getPos();
      int m = paramParserCursor.getUpperBound();
      int i = 0;
      char c;
      if (k < m)
      {
        c = paramCharArrayBuffer.charAt(k);
        if (i != 0)
        {
          paramStringBuilder.append(c);
          i = 0;
        }
      }
      for (;;)
      {
        k += 1;
        j += 1;
        break;
        if (((paramBitSet != null) && (paramBitSet.get(c))) || (TokenParser.isWhitespace(c)) || (c == '"'))
        {
          paramParserCursor.updatePos(j);
          return;
        }
        if (c == '\\') {
          i = 1;
        } else {
          paramStringBuilder.append(c);
        }
      }
    }
  }
}
