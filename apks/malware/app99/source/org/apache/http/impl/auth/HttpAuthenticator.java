package org.apache.http.impl.auth;

import android.util.Log;
import java.io.IOException;
import java.util.Locale;
import java.util.Map;
import java.util.Queue;
import org.apache.http.Header;
import org.apache.http.HttpException;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthOption;
import org.apache.http.auth.AuthProtocolState;
import org.apache.http.auth.AuthScheme;
import org.apache.http.auth.AuthStateHC4;
import org.apache.http.auth.AuthenticationException;
import org.apache.http.auth.ContextAwareAuthScheme;
import org.apache.http.auth.Credentials;
import org.apache.http.auth.MalformedChallengeException;
import org.apache.http.client.AuthenticationStrategy;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.Asserts;

public class HttpAuthenticator
{
  private static final String TAG = "HttpClient";
  
  public HttpAuthenticator() {}
  
  private Header doAuth(AuthScheme paramAuthScheme, Credentials paramCredentials, HttpRequest paramHttpRequest, HttpContext paramHttpContext)
    throws AuthenticationException
  {
    if ((paramAuthScheme instanceof ContextAwareAuthScheme)) {
      return ((ContextAwareAuthScheme)paramAuthScheme).authenticate(paramCredentials, paramHttpRequest, paramHttpContext);
    }
    return paramAuthScheme.authenticate(paramCredentials, paramHttpRequest);
  }
  
  private void ensureAuthScheme(AuthScheme paramAuthScheme)
  {
    Asserts.notNull(paramAuthScheme, "Auth scheme");
  }
  
  public void generateAuthResponse(HttpRequest paramHttpRequest, AuthStateHC4 paramAuthStateHC4, HttpContext paramHttpContext)
    throws HttpException, IOException
  {
    AuthScheme localAuthScheme = paramAuthStateHC4.getAuthScheme();
    Object localObject = paramAuthStateHC4.getCredentials();
    switch (1.$SwitchMap$org$apache$http$auth$AuthProtocolState[paramAuthStateHC4.getState().ordinal()])
    {
    }
    for (;;)
    {
      if (localAuthScheme != null) {}
      try
      {
        paramHttpRequest.addHeader(doAuth(localAuthScheme, (Credentials)localObject, paramHttpRequest, paramHttpContext));
        for (;;)
        {
          return;
          ensureAuthScheme(localAuthScheme);
          if (!localAuthScheme.isConnectionBased()) {
            break;
          }
          return;
          Queue localQueue = paramAuthStateHC4.getAuthOptions();
          if (localQueue == null) {
            break label256;
          }
          while (!localQueue.isEmpty())
          {
            localObject = (AuthOption)localQueue.remove();
            localAuthScheme = ((AuthOption)localObject).getAuthScheme();
            localObject = ((AuthOption)localObject).getCredentials();
            paramAuthStateHC4.update(localAuthScheme, (Credentials)localObject);
            if (Log.isLoggable("HttpClient", 3)) {
              Log.d("HttpClient", "Generating response to an authentication challenge using " + localAuthScheme.getSchemeName() + " scheme");
            }
            try
            {
              paramHttpRequest.addHeader(doAuth(localAuthScheme, (Credentials)localObject, paramHttpRequest, paramHttpContext));
              return;
            }
            catch (AuthenticationException localAuthenticationException) {}
            if (Log.isLoggable("HttpClient", 5)) {
              Log.w("HttpClient", localAuthScheme + " authentication error: " + localAuthenticationException.getMessage());
            }
          }
        }
        label256:
        ensureAuthScheme(localAuthScheme);
      }
      catch (AuthenticationException paramHttpRequest)
      {
        while (!Log.isLoggable("HttpClient", 6)) {}
        Log.e("HttpClient", localAuthScheme + " authentication error: " + paramHttpRequest.getMessage());
      }
    }
  }
  
  public boolean handleAuthChallenge(HttpHost paramHttpHost, HttpResponse paramHttpResponse, AuthenticationStrategy paramAuthenticationStrategy, AuthStateHC4 paramAuthStateHC4, HttpContext paramHttpContext)
  {
    for (;;)
    {
      Map localMap;
      AuthScheme localAuthScheme;
      try
      {
        if (Log.isLoggable("HttpClient", 3)) {
          Log.d("HttpClient", paramHttpHost.toHostString() + " requested authentication");
        }
        localMap = paramAuthenticationStrategy.getChallenges(paramHttpHost, paramHttpResponse, paramHttpContext);
        if (localMap.isEmpty())
        {
          if (!Log.isLoggable("HttpClient", 3)) {
            break label445;
          }
          Log.d("HttpClient", "Response contains no authentication challenges");
          break label445;
        }
        localAuthScheme = paramAuthStateHC4.getAuthScheme();
        switch (1.$SwitchMap$org$apache$http$auth$AuthProtocolState[paramAuthStateHC4.getState().ordinal()])
        {
        case 3: 
          paramHttpHost = paramAuthenticationStrategy.select(localMap, paramHttpHost, paramHttpResponse, paramHttpContext);
          if ((paramHttpHost == null) || (paramHttpHost.isEmpty())) {
            break label443;
          }
          if (Log.isLoggable("HttpClient", 3)) {
            Log.d("HttpClient", "Selected authentication options: " + paramHttpHost);
          }
          paramAuthStateHC4.setState(AuthProtocolState.CHALLENGED);
          paramAuthStateHC4.update(paramHttpHost);
          return true;
        }
      }
      catch (MalformedChallengeException paramHttpHost)
      {
        if (!Log.isLoggable("HttpClient", 5)) {
          continue;
        }
        Log.w("HttpClient", "Malformed challenge: " + paramHttpHost.getMessage());
        paramAuthStateHC4.reset();
        return false;
      }
      paramAuthStateHC4.reset();
      continue;
      if (localAuthScheme == null)
      {
        if (Log.isLoggable("HttpClient", 3)) {
          Log.d("HttpClient", "Auth scheme is null");
        }
        paramAuthenticationStrategy.authFailed(paramHttpHost, null, paramHttpContext);
        paramAuthStateHC4.reset();
        paramAuthStateHC4.setState(AuthProtocolState.FAILURE);
        return false;
      }
      if (localAuthScheme != null)
      {
        Header localHeader = (Header)localMap.get(localAuthScheme.getSchemeName().toLowerCase(Locale.ENGLISH));
        if (localHeader != null)
        {
          if (Log.isLoggable("HttpClient", 3)) {
            Log.d("HttpClient", "Authorization challenge processed");
          }
          localAuthScheme.processChallenge(localHeader);
          if (localAuthScheme.isComplete())
          {
            if (Log.isLoggable("HttpClient", 3)) {
              Log.d("HttpClient", "Authentication failed");
            }
            paramAuthenticationStrategy.authFailed(paramHttpHost, paramAuthStateHC4.getAuthScheme(), paramHttpContext);
            paramAuthStateHC4.reset();
            paramAuthStateHC4.setState(AuthProtocolState.FAILURE);
            return false;
          }
          paramAuthStateHC4.setState(AuthProtocolState.HANDSHAKE);
          return true;
        }
        paramAuthStateHC4.reset();
        continue;
        label443:
        return false;
        label445:
        return false;
      }
    }
    return false;
  }
  
  public boolean isAuthenticationRequested(HttpHost paramHttpHost, HttpResponse paramHttpResponse, AuthenticationStrategy paramAuthenticationStrategy, AuthStateHC4 paramAuthStateHC4, HttpContext paramHttpContext)
  {
    if (paramAuthenticationStrategy.isAuthenticationRequested(paramHttpHost, paramHttpResponse, paramHttpContext))
    {
      if (Log.isLoggable("HttpClient", 3)) {
        Log.d("HttpClient", "Authentication required");
      }
      if (paramAuthStateHC4.getState() == AuthProtocolState.SUCCESS) {
        paramAuthenticationStrategy.authFailed(paramHttpHost, paramAuthStateHC4.getAuthScheme(), paramHttpContext);
      }
      return true;
    }
    switch (1.$SwitchMap$org$apache$http$auth$AuthProtocolState[paramAuthStateHC4.getState().ordinal()])
    {
    default: 
      paramAuthStateHC4.setState(AuthProtocolState.UNCHALLENGED);
    }
    for (;;)
    {
      return false;
      if (Log.isLoggable("HttpClient", 3)) {
        Log.d("HttpClient", "Authentication succeeded");
      }
      paramAuthStateHC4.setState(AuthProtocolState.SUCCESS);
      paramAuthenticationStrategy.authSucceeded(paramHttpHost, paramAuthStateHC4.getAuthScheme(), paramHttpContext);
    }
  }
}
