package org.apache.http.impl.client;

import android.util.Log;
import java.io.Closeable;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.http.HttpException;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.annotation.ThreadSafe;
import org.apache.http.auth.AuthSchemeProvider;
import org.apache.http.auth.AuthStateHC4;
import org.apache.http.client.CookieStore;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.config.Lookup;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ClientConnectionRequest;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.conn.ManagedClientConnection;
import org.apache.http.conn.routing.HttpRoute;
import org.apache.http.conn.routing.HttpRoutePlanner;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.cookie.CookieSpecProvider;
import org.apache.http.impl.execchain.ClientExecChain;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.Args;

@ThreadSafe
class InternalHttpClient
  extends CloseableHttpClient
{
  private static final String TAG = "HttpClient";
  private final Lookup<AuthSchemeProvider> authSchemeRegistry;
  private final List<Closeable> closeables;
  private final HttpClientConnectionManager connManager;
  private final Lookup<CookieSpecProvider> cookieSpecRegistry;
  private final CookieStore cookieStore;
  private final CredentialsProvider credentialsProvider;
  private final RequestConfig defaultConfig;
  private final ClientExecChain execChain;
  private final HttpRoutePlanner routePlanner;
  
  public InternalHttpClient(ClientExecChain paramClientExecChain, HttpClientConnectionManager paramHttpClientConnectionManager, HttpRoutePlanner paramHttpRoutePlanner, Lookup<CookieSpecProvider> paramLookup, Lookup<AuthSchemeProvider> paramLookup1, CookieStore paramCookieStore, CredentialsProvider paramCredentialsProvider, RequestConfig paramRequestConfig, List<Closeable> paramList)
  {
    Args.notNull(paramClientExecChain, "HTTP client exec chain");
    Args.notNull(paramHttpClientConnectionManager, "HTTP connection manager");
    Args.notNull(paramHttpRoutePlanner, "HTTP route planner");
    this.execChain = paramClientExecChain;
    this.connManager = paramHttpClientConnectionManager;
    this.routePlanner = paramHttpRoutePlanner;
    this.cookieSpecRegistry = paramLookup;
    this.authSchemeRegistry = paramLookup1;
    this.cookieStore = paramCookieStore;
    this.credentialsProvider = paramCredentialsProvider;
    this.defaultConfig = paramRequestConfig;
    this.closeables = paramList;
  }
  
  private HttpRoute determineRoute(HttpHost paramHttpHost, HttpRequest paramHttpRequest, HttpContext paramHttpContext)
    throws HttpException
  {
    HttpHost localHttpHost = paramHttpHost;
    if (paramHttpHost == null) {
      localHttpHost = (HttpHost)paramHttpRequest.getParams().getParameter("http.default-host");
    }
    return this.routePlanner.determineRoute(localHttpHost, paramHttpRequest, paramHttpContext);
  }
  
  private void setupContext(HttpClientContext paramHttpClientContext)
  {
    if (paramHttpClientContext.getAttribute("http.auth.target-scope") == null) {
      paramHttpClientContext.setAttribute("http.auth.target-scope", new AuthStateHC4());
    }
    if (paramHttpClientContext.getAttribute("http.auth.proxy-scope") == null) {
      paramHttpClientContext.setAttribute("http.auth.proxy-scope", new AuthStateHC4());
    }
    if (paramHttpClientContext.getAttribute("http.authscheme-registry") == null) {
      paramHttpClientContext.setAttribute("http.authscheme-registry", this.authSchemeRegistry);
    }
    if (paramHttpClientContext.getAttribute("http.cookiespec-registry") == null) {
      paramHttpClientContext.setAttribute("http.cookiespec-registry", this.cookieSpecRegistry);
    }
    if (paramHttpClientContext.getAttribute("http.cookie-store") == null) {
      paramHttpClientContext.setAttribute("http.cookie-store", this.cookieStore);
    }
    if (paramHttpClientContext.getAttribute("http.auth.credentials-provider") == null) {
      paramHttpClientContext.setAttribute("http.auth.credentials-provider", this.credentialsProvider);
    }
    if (paramHttpClientContext.getAttribute("http.request-config") == null) {
      paramHttpClientContext.setAttribute("http.request-config", this.defaultConfig);
    }
  }
  
  public void close()
  {
    this.connManager.shutdown();
    if (this.closeables != null)
    {
      Iterator localIterator = this.closeables.iterator();
      while (localIterator.hasNext())
      {
        Closeable localCloseable = (Closeable)localIterator.next();
        try
        {
          localCloseable.close();
        }
        catch (IOException localIOException)
        {
          Log.e("HttpClient", localIOException.getMessage(), localIOException);
        }
      }
    }
  }
  
  /* Error */
  protected org.apache.http.client.methods.CloseableHttpResponse doExecute(HttpHost paramHttpHost, HttpRequest paramHttpRequest, HttpContext paramHttpContext)
    throws IOException, org.apache.http.client.ClientProtocolException
  {
    // Byte code:
    //   0: aload_2
    //   1: ldc -88
    //   3: invokestatic 44	org/apache/http/util/Args:notNull	(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
    //   6: pop
    //   7: aconst_null
    //   8: astore 4
    //   10: aload_2
    //   11: instanceof 170
    //   14: ifeq +9 -> 23
    //   17: aload_2
    //   18: checkcast 170	org/apache/http/client/methods/HttpExecutionAware
    //   21: astore 4
    //   23: aload_2
    //   24: invokestatic 176	org/apache/http/client/methods/HttpRequestWrapper:wrap	(Lorg/apache/http/HttpRequest;)Lorg/apache/http/client/methods/HttpRequestWrapper;
    //   27: astore 6
    //   29: aload_3
    //   30: ifnull +91 -> 121
    //   33: aload_3
    //   34: invokestatic 180	org/apache/http/client/protocol/HttpClientContext:adapt	(Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/client/protocol/HttpClientContext;
    //   37: astore 7
    //   39: aconst_null
    //   40: astore_3
    //   41: aload_2
    //   42: instanceof 182
    //   45: ifeq +13 -> 58
    //   48: aload_2
    //   49: checkcast 182	org/apache/http/client/methods/Configurable
    //   52: invokeinterface 186 1 0
    //   57: astore_3
    //   58: aload_3
    //   59: astore 5
    //   61: aload_3
    //   62: ifnonnull +14 -> 76
    //   65: aload_2
    //   66: invokeinterface 81 1 0
    //   71: invokestatic 192	org/apache/http/client/params/HttpClientParamConfig:getRequestConfig	(Lorg/apache/http/params/HttpParams;)Lorg/apache/http/client/config/RequestConfig;
    //   74: astore 5
    //   76: aload 5
    //   78: ifnull +10 -> 88
    //   81: aload 7
    //   83: aload 5
    //   85: invokevirtual 196	org/apache/http/client/protocol/HttpClientContext:setRequestConfig	(Lorg/apache/http/client/config/RequestConfig;)V
    //   88: aload_0
    //   89: aload 7
    //   91: invokespecial 198	org/apache/http/impl/client/InternalHttpClient:setupContext	(Lorg/apache/http/client/protocol/HttpClientContext;)V
    //   94: aload_0
    //   95: aload_1
    //   96: aload 6
    //   98: aload 7
    //   100: invokespecial 199	org/apache/http/impl/client/InternalHttpClient:determineRoute	(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/conn/routing/HttpRoute;
    //   103: astore_1
    //   104: aload_0
    //   105: getfield 50	org/apache/http/impl/client/InternalHttpClient:execChain	Lorg/apache/http/impl/execchain/ClientExecChain;
    //   108: aload_1
    //   109: aload 6
    //   111: aload 7
    //   113: aload 4
    //   115: invokeinterface 205 5 0
    //   120: areturn
    //   121: new 207	org/apache/http/protocol/BasicHttpContextHC4
    //   124: dup
    //   125: invokespecial 208	org/apache/http/protocol/BasicHttpContextHC4:<init>	()V
    //   128: astore_3
    //   129: goto -96 -> 33
    //   132: astore_1
    //   133: new 166	org/apache/http/client/ClientProtocolException
    //   136: dup
    //   137: aload_1
    //   138: invokespecial 211	org/apache/http/client/ClientProtocolException:<init>	(Ljava/lang/Throwable;)V
    //   141: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	142	0	this	InternalHttpClient
    //   0	142	1	paramHttpHost	HttpHost
    //   0	142	2	paramHttpRequest	HttpRequest
    //   0	142	3	paramHttpContext	HttpContext
    //   8	106	4	localHttpExecutionAware	org.apache.http.client.methods.HttpExecutionAware
    //   59	25	5	localObject	Object
    //   27	83	6	localHttpRequestWrapper	org.apache.http.client.methods.HttpRequestWrapper
    //   37	75	7	localHttpClientContext	HttpClientContext
    // Exception table:
    //   from	to	target	type
    //   23	29	132	org/apache/http/HttpException
    //   33	39	132	org/apache/http/HttpException
    //   41	58	132	org/apache/http/HttpException
    //   65	76	132	org/apache/http/HttpException
    //   81	88	132	org/apache/http/HttpException
    //   88	121	132	org/apache/http/HttpException
    //   121	129	132	org/apache/http/HttpException
  }
  
  public ClientConnectionManager getConnectionManager()
  {
    new ClientConnectionManager()
    {
      public void closeExpiredConnections()
      {
        InternalHttpClient.this.connManager.closeExpiredConnections();
      }
      
      public void closeIdleConnections(long paramAnonymousLong, TimeUnit paramAnonymousTimeUnit)
      {
        InternalHttpClient.this.connManager.closeIdleConnections(paramAnonymousLong, paramAnonymousTimeUnit);
      }
      
      public SchemeRegistry getSchemeRegistry()
      {
        throw new UnsupportedOperationException();
      }
      
      public void releaseConnection(ManagedClientConnection paramAnonymousManagedClientConnection, long paramAnonymousLong, TimeUnit paramAnonymousTimeUnit)
      {
        throw new UnsupportedOperationException();
      }
      
      public ClientConnectionRequest requestConnection(HttpRoute paramAnonymousHttpRoute, Object paramAnonymousObject)
      {
        throw new UnsupportedOperationException();
      }
      
      public void shutdown()
      {
        InternalHttpClient.this.connManager.shutdown();
      }
    };
  }
  
  public HttpParams getParams()
  {
    throw new UnsupportedOperationException();
  }
}
