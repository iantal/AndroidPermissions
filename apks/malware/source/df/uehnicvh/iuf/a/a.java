package df.uehnicvh.iuf.a;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import df.uehnicvh.iuf.net.DataRequestTask;
import df.uehnicvh.iuf.tools.n;
import df.uehnicvh.iuf.tools.v;
import df.uehnicvh.iuf.tools.w;
import java.lang.ref.SoftReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

public abstract class a
  extends Activity
{
  public static int p;
  public static int q;
  public static float r;
  private LinearLayout a;
  private LinearLayout b;
  private LinearLayout c;
  public final HashMap e = new HashMap();
  protected boolean f;
  protected boolean g;
  protected boolean h;
  protected boolean i;
  protected boolean j;
  protected boolean k;
  protected boolean l;
  protected String m = "";
  protected RelativeLayout n;
  public DisplayMetrics o;
  protected ProgressDialog s;
  protected AlertDialog t;
  protected AlertDialog u;
  protected DataRequestTask v;
  protected AlertDialog.Builder w;
  
  public a() {}
  
  private final void d()
  {
    Thread.currentThread().setUncaughtExceptionHandler(new b(this));
  }
  
  private void e()
  {
    if (this.j)
    {
      w.b().a().add(new SoftReference(this));
      n.a("SingletonTopUtil hashCode: " + w.b().hashCode());
      return;
    }
    v.b().a().add(new SoftReference(this));
    n.a("SingletonChildUtil hashCode : " + v.b().hashCode());
  }
  
  private void f()
  {
    if (this.j)
    {
      w.b().a().remove(this);
      return;
    }
    v.b().a().remove(this);
  }
  
  private void h()
  {
    this.n = ((RelativeLayout)getLayoutInflater().inflate(2130903043, null));
    this.a = ((LinearLayout)this.n.findViewById(2131296264));
    this.b = ((LinearLayout)this.n.findViewById(2131296267));
    this.c = ((LinearLayout)this.n.findViewById(2131296265));
    setContentView(this.n);
  }
  
  private void i()
  {
    if (this.f) {
      getWindow().setFlags(1024, 1024);
    }
    if (this.g) {
      requestWindowFeature(1);
    }
  }
  
  private void j()
  {
    if (this.h)
    {
      LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, (int)(50.0F * this.o.density));
      View localView = b();
      if (localView != null) {
        this.a.addView(localView, localLayoutParams);
      }
    }
  }
  
  public static void o()
  {
    ArrayList localArrayList = v.b().a();
    n.a(" SingletonChildUtil.getInstance().getActivityList().size() = " + v.b().a().size());
    Iterator localIterator = localArrayList.iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        localArrayList.clear();
        return;
      }
      Activity localActivity = (Activity)((SoftReference)localIterator.next()).get();
      if ((localActivity != null) && (!localActivity.isFinishing())) {
        localActivity.finish();
      }
    }
  }
  
  public static void p()
  {
    o();
    ArrayList localArrayList = w.b().a();
    n.a(" SingletonTopUtil.getInstance().getActivityList().size() = " + w.b().a().size());
    Iterator localIterator = localArrayList.iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        localArrayList.clear();
        if (!df.uehnicvh.iuf.b.f.f().a()) {
          df.uehnicvh.iuf.b.f.f().e();
        }
        return;
      }
      Activity localActivity = (Activity)((SoftReference)localIterator.next()).get();
      if ((localActivity != null) && (!localActivity.isFinishing())) {
        localActivity.finish();
      }
    }
  }
  
  private void r()
  {
    LinearLayout.LayoutParams localLayoutParams;
    View localView;
    if (this.i)
    {
      localLayoutParams = new LinearLayout.LayoutParams(-1, -1);
      localView = g();
      if (localView == null) {
        break label79;
      }
      this.b.setVisibility(0);
      this.b.addView(localView, localLayoutParams);
    }
    for (;;)
    {
      localView = c();
      if (localView == null) {
        break;
      }
      this.c.setVisibility(0);
      this.b.setVisibility(8);
      this.c.addView(localView, localLayoutParams);
      return;
      label79:
      this.b.setVisibility(8);
    }
    this.c.setVisibility(8);
  }
  
  protected abstract void a();
  
  protected void a(Bundle paramBundle) {}
  
  public void a(df.uehnicvh.iuf.net.c paramC)
  {
    l();
    switch (paramC.a)
    {
    default: 
      this.w.setTitle("网络不稳定").setMessage("网络不稳定，请检查您的网络(Unknown)！").setPositiveButton("确定", new j(this)).show();
      return;
    case 3: 
      this.w.setTitle("网络不可用").setMessage("请检查后重新启动").setPositiveButton("确定", new d(this)).show();
      return;
    case 1: 
      this.w.setTitle("网络不稳定").setMessage("网络不稳定，请检查您的网络").setPositiveButton("确定", new e(this)).show();
      return;
    case 5: 
      this.w.setTitle("系统内部错误").setMessage("系统内部错误！").setPositiveButton("确定", new f(this)).show();
      return;
    case 2: 
      this.w.setTitle("解析错误").setMessage("数据解析错误！").setPositiveButton("确定", new g(this)).show();
      return;
    case 4: 
      this.w.setTitle("未知的请求指令").setMessage("未知的请求指令！").setPositiveButton("确定", new h(this)).show();
      return;
    case 6: 
      this.w.setTitle("HTTP协议异常").setMessage("HTTP协议异常！").setPositiveButton("确定", new i(this)).show();
      return;
    case 7: 
      b(paramC.b);
      return;
    }
    b(paramC.b);
  }
  
  public void a(Object paramObject)
  {
    l();
  }
  
  public void a(String paramString)
  {
    n.a("showLoadingDialog  mIsActive = " + this.k);
    if (!this.k) {}
    while ((this.s != null) && (this.s.isShowing())) {
      return;
    }
    this.s = new ProgressDialog(this);
    this.s.setMessage(paramString);
    this.s.show();
  }
  
  protected void a(String paramString1, String paramString2)
  {
    if (!this.k) {
      return;
    }
    this.t = this.w.setTitle(paramString1).setMessage(paramString2).setPositiveButton(getString(2131034113), null).create();
    this.t.show();
  }
  
  protected View b()
  {
    new c(this);
    return (RelativeLayout)getLayoutInflater().inflate(2130903041, null);
  }
  
  public void b(String paramString)
  {
    a(getString(2131034116), paramString);
  }
  
  protected View c()
  {
    return null;
  }
  
  protected View g()
  {
    return null;
  }
  
  protected void k() {}
  
  public void l()
  {
    if (this.s != null) {
      this.s.dismiss();
    }
  }
  
  public void m()
  {
    if (this.t != null) {
      this.t.dismiss();
    }
  }
  
  public void n()
  {
    if (this.u != null) {
      this.u.dismiss();
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.w = new AlertDialog.Builder(this);
    d();
    n.a("BaseActivity.onCreate(): " + this);
    a();
    i();
    e();
    this.o = new DisplayMetrics();
    getWindowManager().getDefaultDisplay().getMetrics(this.o);
    p = this.o.widthPixels;
    q = this.o.heightPixels;
    r = this.o.density;
    h();
    j();
    r();
    a(paramBundle);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    n.a("BaseActivity.onDestroy(): " + this);
    f();
  }
  
  protected void onPause()
  {
    super.onPause();
    n.a("BaseActivity.onPause(): " + this);
  }
  
  protected void onResume()
  {
    super.onResume();
    if (this.j) {
      o();
    }
    n.a("BaseActivity.onResume(): " + this);
    if (!this.l) {
      k();
    }
  }
  
  protected void onStart()
  {
    super.onStart();
    n.a("BaseActivity.onStart(): " + this);
    this.k = true;
  }
  
  protected void onStop()
  {
    super.onStop();
    n.a("BaseActivity.onStop(): " + this);
    this.k = false;
    l();
    m();
    n();
  }
  
  public void q()
  {
    p();
    finish();
  }
}
