package df.uehnicvh.iuf.net;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.os.AsyncTask;
import df.uehnicvh.iuf.a.a;
import df.uehnicvh.iuf.tools.n;
import df.uehnicvh.iuf.tools.o;
import df.uehnicvh.iuf.tools.u;
import df.uehnicvh.iuf.tools.x;
import df.uehnicvh.iuf.tools.y;
import java.io.IOException;
import java.io.PrintStream;
import java.util.HashMap;
import org.json.JSONException;

public class DataRequestTask
  extends AsyncTask
{
  protected a a = null;
  protected d b = null;
  protected c c = null;
  protected String d = "";
  
  public DataRequestTask(a paramA)
  {
    this.a = paramA;
  }
  
  protected Object doInBackground(Object... paramVarArgs)
  {
    int i = ((Integer)paramVarArgs[0]).intValue();
    int j = ((Integer)paramVarArgs[1]).intValue();
    int k = ((Integer)paramVarArgs[2]).intValue();
    Object localObject = (HashMap)paramVarArgs[3];
    try
    {
      System.out.println("commandId = " + k);
      paramVarArgs = y.a(this.a.getApplication(), Integer.toString(k));
      System.out.println(" urlBean = " + paramVarArgs);
      if (paramVarArgs == null)
      {
        this.c = new c(8);
        this.c.b = "XML解析错误,请检查!";
        return null;
      }
      localObject = this.b.a(i, j, paramVarArgs.b, (HashMap)localObject);
      n.a("response = " + (String)localObject);
      localObject = ((String)localObject).replace('\n', '\t');
      paramVarArgs = ((IParser)Class.forName(paramVarArgs.c).newInstance()).parse(this.a.getApplication(), (String)localObject);
    }
    catch (o paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
        this.c = new c(3);
        paramVarArgs = null;
      }
    }
    catch (x paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
        this.c = new c(4);
        paramVarArgs = null;
      }
    }
    catch (IOException paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
        this.c = new c(1);
        paramVarArgs = null;
      }
    }
    catch (JSONException paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
        this.c = new c(2);
        paramVarArgs = null;
      }
    }
    catch (u paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
        this.c = new c(7, this.d);
        paramVarArgs = null;
      }
    }
    catch (Exception paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
        n.a("e = " + paramVarArgs.toString());
        this.c = new c(5);
        paramVarArgs = null;
      }
    }
    return paramVarArgs;
  }
  
  protected void onCancelled()
  {
    this.a = null;
    n.a("Cancelled");
    if (this.b != null) {
      this.b.b();
    }
  }
  
  protected void onPostExecute(Object paramObject)
  {
    if (this.c.a == 0)
    {
      this.a.a(paramObject);
      this.a.l();
    }
    for (;;)
    {
      this.a = null;
      return;
      this.a.a(this.c);
      this.a.l();
    }
  }
  
  protected void onPreExecute()
  {
    this.a.a(this.a.getString(2131034115));
    this.c = new c(0);
    Object localObject = (ConnectivityManager)this.a.getSystemService("connectivity");
    if (localObject != null)
    {
      localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()) && (((NetworkInfo)localObject).getState() == NetworkInfo.State.CONNECTED))
      {
        this.b = d.a();
        return;
      }
    }
    cancel(true);
    this.a.l();
    this.a.b("网络不可用,请检查!");
    this.a = null;
  }
}
