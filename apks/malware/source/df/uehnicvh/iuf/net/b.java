package df.uehnicvh.iuf.net;

import df.uehnicvh.iuf.tools.n;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.AbstractHttpMessage;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.util.EntityUtils;

public class b
  extends a
{
  private HttpGet b = null;
  private HttpPost c = null;
  private DefaultHttpClient d = null;
  
  public b(int paramInt)
  {
    super(paramInt);
  }
  
  private String a(int paramInt, String paramString, Map paramMap)
  {
    Object localObject;
    Iterator localIterator;
    String str;
    if (paramInt == 1)
    {
      localObject = paramString;
      if (paramMap != null)
      {
        localObject = new StringBuffer();
        localIterator = paramMap.keySet().iterator();
      }
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          if (((StringBuffer)localObject).length() != 0) {
            ((StringBuffer)localObject).deleteCharAt(((StringBuffer)localObject).length() - 1);
          }
          localObject = paramString + "?" + ((StringBuffer)localObject).toString().trim();
          n.a("get url = " + (String)localObject);
          this.b = new HttpGet((String)localObject);
          a(this.b, f.a());
          paramString = new BasicHttpParams();
          HttpConnectionParams.setConnectionTimeout(paramString, 30000);
          HttpConnectionParams.setSoTimeout(paramString, 30000);
          this.d = new DefaultHttpClient(paramString);
          paramString = this.d.execute(this.b);
          if (paramString.getStatusLine().getStatusCode() == 200) {
            break;
          }
          throw new IOException();
        }
        str = ((String)localIterator.next()).trim();
        ((StringBuffer)localObject).append(str + "=" + URLEncoder.encode((String)paramMap.get(str), "UTF-8") + "&");
      }
      paramString = new BufferedReader(new InputStreamReader(paramString.getEntity().getContent(), "UTF-8"));
      paramMap = new StringBuffer();
      for (;;)
      {
        localObject = paramString.readLine();
        if (localObject == null) {
          return paramMap.toString();
        }
        paramMap.append((String)localObject);
      }
    }
    if (paramInt == 2)
    {
      n.a("post url = " + paramString);
      this.c = new HttpPost(paramString);
      a(this.c, f.a());
      if (paramMap != null)
      {
        localObject = new ArrayList();
        localIterator = paramMap.keySet().iterator();
      }
      for (paramString = "";; paramString = paramString + str + "=" + (String)paramMap.get(str) + "&")
      {
        if (!localIterator.hasNext())
        {
          n.a("params = " + paramString);
          this.c.setEntity(new UrlEncodedFormEntity((List)localObject, "UTF-8"));
          paramString = new BasicHttpParams();
          HttpConnectionParams.setConnectionTimeout(paramString, 30000);
          HttpConnectionParams.setSoTimeout(paramString, 30000);
          this.d = new DefaultHttpClient(paramString);
          paramString = this.d.execute(this.c);
          if (paramString.getStatusLine().getStatusCode() == 200) {
            break;
          }
          throw new IOException();
        }
        str = (String)localIterator.next();
        ((ArrayList)localObject).add(new BasicNameValuePair(str, (String)paramMap.get(str)));
      }
      return EntityUtils.toString(paramString.getEntity(), "UTF-8");
    }
    return null;
  }
  
  private void a(AbstractHttpMessage paramAbstractHttpMessage, Map paramMap)
  {
    paramMap = paramMap.entrySet().iterator();
    for (;;)
    {
      if (!paramMap.hasNext()) {
        return;
      }
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      paramAbstractHttpMessage.setHeader((String)localEntry.getKey(), (String)localEntry.getValue());
    }
  }
  
  public String a(String paramString, Map paramMap)
  {
    switch (this.a)
    {
    default: 
      return a(2, paramString, paramMap);
    }
    return a(this.a, paramString, paramMap);
  }
  
  public void a()
  {
    try
    {
      if ((this.b != null) && (!this.b.isAborted())) {
        this.b.abort();
      }
      if ((this.c != null) && (!this.c.isAborted())) {
        this.c.abort();
      }
      this.d.getConnectionManager().shutdown();
      return;
    }
    catch (Exception localException)
    {
      n.a("Error -- > ApacheNetworkWrapper.disconnect : e = " + localException.toString());
    }
  }
}
