package df.uehnicvh.iuf.tools;

import android.content.Context;
import android.net.ConnectivityManager;
import android.os.Handler;
import android.os.Message;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

public class Inc
{
  static Context b;
  public Inc.RequestBack a;
  Handler c = new g(this);
  
  public Inc(Context paramContext)
  {
    b = paramContext;
  }
  
  private void a(String paramString, HashMap paramHashMap)
  {
    Object localObject;
    Iterator localIterator;
    if ((paramString != null) && (!paramString.equals("")))
    {
      localObject = paramString;
      if (paramHashMap != null)
      {
        localObject = paramString;
        if (paramHashMap.size() > 0)
        {
          localObject = new StringBuffer();
          localIterator = paramHashMap.keySet().iterator();
        }
      }
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        if (((StringBuffer)localObject).length() != 0)
        {
          ((StringBuffer)localObject).deleteCharAt(((StringBuffer)localObject).length() - 1);
          ((StringBuffer)localObject).insert(0, "?");
        }
        localObject = paramString + ((StringBuffer)localObject).toString().trim();
        paramString = new HttpGet((String)localObject);
      }
      try
      {
        paramHashMap = new DefaultHttpClient();
        paramHashMap.getParams().setParameter("http.connection.timeout", Integer.valueOf(20000));
        paramHashMap.getParams().setParameter("http.socket.timeout", Integer.valueOf(10000));
        paramString = paramHashMap.execute(paramString);
        if (paramString.getStatusLine().getStatusCode() == 200)
        {
          paramHashMap = EntityUtils.toString(paramString.getEntity());
          paramString = paramHashMap;
          if ((paramHashMap.equals("") | paramHashMap.equals("null"))) {
            paramString = null;
          }
          paramHashMap = new Message();
          paramHashMap.what = 1;
          paramHashMap.obj = paramString;
          this.c.sendMessage(paramHashMap);
          return;
          String str = ((String)localIterator.next()).trim();
          try
          {
            ((StringBuffer)localObject).append(str + "=" + URLEncoder.encode((String)paramHashMap.get(str), "UTF-8") + "&");
          }
          catch (UnsupportedEncodingException localUnsupportedEncodingException)
          {
            localUnsupportedEncodingException.printStackTrace();
          }
        }
        else
        {
          this.c.sendEmptyMessage(0);
          return;
        }
      }
      catch (ClientProtocolException paramString)
      {
        this.c.sendEmptyMessage(0);
        return;
      }
      catch (IOException paramString)
      {
        this.c.sendEmptyMessage(0);
      }
    }
  }
  
  public static boolean a(Context paramContext)
  {
    return ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo() != null;
  }
  
  private void b(String paramString, HashMap paramHashMap)
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = paramHashMap.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        paramString = new HttpPost(paramString);
      }
      try
      {
        paramString.setEntity(new UrlEncodedFormEntity(localArrayList, "UTF-8"));
        paramHashMap = new DefaultHttpClient();
        paramHashMap.getParams().setParameter("http.connection.timeout", Integer.valueOf(20000));
        paramHashMap.getParams().setParameter("http.socket.timeout", Integer.valueOf(10000));
        paramString = paramHashMap.execute(paramString);
        if (paramString.getStatusLine().getStatusCode() == 200)
        {
          paramString = EntityUtils.toString(paramString.getEntity());
          paramHashMap = new Message();
          paramHashMap.what = 1;
          paramHashMap.obj = paramString;
          this.c.sendMessage(paramHashMap);
          return;
          String str = ((String)localIterator.next()).trim();
          localArrayList.add(new BasicNameValuePair(str, (String)paramHashMap.get(str)));
        }
        else
        {
          this.c.sendEmptyMessage(0);
          return;
        }
      }
      catch (UnsupportedEncodingException paramString)
      {
        this.c.sendEmptyMessage(0);
        return;
      }
      catch (ClientProtocolException paramString)
      {
        this.c.sendEmptyMessage(0);
        return;
      }
      catch (IOException paramString)
      {
        this.c.sendEmptyMessage(0);
      }
    }
  }
  
  public void a(int paramInt, String paramString, HashMap paramHashMap, Inc.RequestBack paramRequestBack)
  {
    this.a = paramRequestBack;
    if (a(b))
    {
      new Thread(new h(this, paramInt, paramString, paramHashMap)).start();
      return;
    }
    this.c.sendEmptyMessage(2);
  }
}
