package u.aly;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public abstract class cr<T extends cr<?, ?>, F extends co>
  implements ch<T, F>
{
  private static final Map<Class<? extends do>, dp> a = new HashMap();
  protected Object b;
  protected F c;
  
  static
  {
    a.put(dq.class, new b(null));
    a.put(dr.class, new d(null));
  }
  
  protected cr()
  {
    this.c = null;
    this.b = null;
  }
  
  protected cr(F paramF, Object paramObject)
  {
    b(paramF, paramObject);
  }
  
  protected cr(cr<T, F> paramCr)
  {
    if (!paramCr.getClass().equals(getClass())) {
      throw new ClassCastException();
    }
    this.c = paramCr.c;
    this.b = a(paramCr.b);
  }
  
  private static Object a(Object paramObject)
  {
    Object localObject;
    if ((paramObject instanceof ch)) {
      localObject = ((ch)paramObject).g();
    }
    do
    {
      return localObject;
      if ((paramObject instanceof ByteBuffer)) {
        return ci.d((ByteBuffer)paramObject);
      }
      if ((paramObject instanceof List)) {
        return a((List)paramObject);
      }
      if ((paramObject instanceof Set)) {
        return a((Set)paramObject);
      }
      localObject = paramObject;
    } while (!(paramObject instanceof Map));
    return a((Map)paramObject);
  }
  
  private static List a(List paramList)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    paramList = paramList.iterator();
    while (paramList.hasNext()) {
      localArrayList.add(a(paramList.next()));
    }
    return localArrayList;
  }
  
  private static Map a(Map<Object, Object> paramMap)
  {
    HashMap localHashMap = new HashMap();
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      localHashMap.put(a(localEntry.getKey()), a(localEntry.getValue()));
    }
    return localHashMap;
  }
  
  private static Set a(Set paramSet)
  {
    HashSet localHashSet = new HashSet();
    paramSet = paramSet.iterator();
    while (paramSet.hasNext()) {
      localHashSet.add(a(paramSet.next()));
    }
    return localHashSet;
  }
  
  protected abstract Object a(dg paramDg, db paramDb)
    throws cn;
  
  protected abstract Object a(dg paramDg, short paramShort)
    throws cn;
  
  protected abstract db a(F paramF);
  
  public void a(int paramInt, Object paramObject)
  {
    b(b((short)paramInt), paramObject);
  }
  
  protected abstract void a(F paramF, Object paramObject)
    throws ClassCastException;
  
  public void a(dg paramDg)
    throws cn
  {
    ((dp)a.get(paramDg.D())).b().b(paramDg, this);
  }
  
  public Object b(F paramF)
  {
    if (paramF != this.c) {
      throw new IllegalArgumentException("Cannot get the value of field " + paramF + " because union's set field is " + this.c);
    }
    return j();
  }
  
  protected abstract F b(short paramShort);
  
  public final void b()
  {
    this.c = null;
    this.b = null;
  }
  
  public void b(F paramF, Object paramObject)
  {
    a(paramF, paramObject);
    this.c = paramF;
    this.b = paramObject;
  }
  
  public void b(dg paramDg)
    throws cn
  {
    ((dp)a.get(paramDg.D())).b().a(paramDg, this);
  }
  
  public Object c(int paramInt)
  {
    return b(b((short)paramInt));
  }
  
  protected abstract dl c();
  
  protected abstract void c(dg paramDg)
    throws cn;
  
  public boolean c(F paramF)
  {
    return this.c == paramF;
  }
  
  protected abstract void d(dg paramDg)
    throws cn;
  
  public boolean d(int paramInt)
  {
    return c(b((short)paramInt));
  }
  
  public F i()
  {
    return this.c;
  }
  
  public Object j()
  {
    return this.b;
  }
  
  public boolean k()
  {
    return this.c != null;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("<");
    localStringBuilder.append(getClass().getSimpleName());
    localStringBuilder.append(" ");
    Object localObject;
    if (i() != null)
    {
      localObject = j();
      localStringBuilder.append(a(i()).a);
      localStringBuilder.append(":");
      if (!(localObject instanceof ByteBuffer)) {
        break label96;
      }
      ci.a((ByteBuffer)localObject, localStringBuilder);
    }
    for (;;)
    {
      localStringBuilder.append(">");
      return localStringBuilder.toString();
      label96:
      localStringBuilder.append(localObject.toString());
    }
  }
  
  private static class a
    extends dq<cr>
  {
    private a() {}
    
    public void a(dg paramDg, cr paramCr)
      throws cn
    {
      paramCr.c = null;
      paramCr.b = null;
      paramDg.j();
      db localDb = paramDg.l();
      paramCr.b = paramCr.a(paramDg, localDb);
      if (paramCr.b != null) {
        paramCr.c = paramCr.b(localDb.c);
      }
      paramDg.m();
      paramDg.l();
      paramDg.k();
    }
    
    public void b(dg paramDg, cr paramCr)
      throws cn
    {
      if ((paramCr.i() == null) || (paramCr.j() == null)) {
        throw new dh("Cannot write a TUnion with no set value!");
      }
      paramDg.a(paramCr.c());
      paramDg.a(paramCr.a(paramCr.c));
      paramCr.c(paramDg);
      paramDg.c();
      paramDg.d();
      paramDg.b();
    }
  }
  
  private static class b
    implements dp
  {
    private b() {}
    
    public cr.a a()
    {
      return new cr.a(null);
    }
  }
  
  private static class c
    extends dr<cr>
  {
    private c() {}
    
    public void a(dg paramDg, cr paramCr)
      throws cn
    {
      paramCr.c = null;
      paramCr.b = null;
      short s = paramDg.v();
      paramCr.b = paramCr.a(paramDg, s);
      if (paramCr.b != null) {
        paramCr.c = paramCr.b(s);
      }
    }
    
    public void b(dg paramDg, cr paramCr)
      throws cn
    {
      if ((paramCr.i() == null) || (paramCr.j() == null)) {
        throw new dh("Cannot write a TUnion with no set value!");
      }
      paramDg.a(paramCr.c.a());
      paramCr.d(paramDg);
    }
  }
  
  private static class d
    implements dp
  {
    private d() {}
    
    public cr.c a()
    {
      return new cr.c(null);
    }
  }
}
