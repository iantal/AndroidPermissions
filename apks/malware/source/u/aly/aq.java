package u.aly;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class aq
  implements Serializable, Cloneable, ch<aq, e>
{
  public static final Map<e, ct> b;
  private static final dl c = new dl("ControlPolicy");
  private static final db d = new db("latent", (byte)12, (short)1);
  private static final Map<Class<? extends do>, dp> e = new HashMap();
  public bd a;
  private e[] f = { e.a };
  
  static
  {
    e.put(dq.class, new b(null));
    e.put(dr.class, new d(null));
    EnumMap localEnumMap = new EnumMap(e.class);
    localEnumMap.put(e.a, new ct("latent", (byte)2, new cy((byte)12, bd.class)));
    b = Collections.unmodifiableMap(localEnumMap);
    ct.a(aq.class, b);
  }
  
  public aq() {}
  
  public aq(aq paramAq)
  {
    if (paramAq.e()) {
      this.a = new bd(paramAq.a);
    }
  }
  
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException, ClassNotFoundException
  {
    try
    {
      a(new da(new ds(paramObjectInputStream)));
      return;
    }
    catch (cn paramObjectInputStream)
    {
      throw new IOException(paramObjectInputStream.getMessage());
    }
  }
  
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    try
    {
      b(new da(new ds(paramObjectOutputStream)));
      return;
    }
    catch (cn paramObjectOutputStream)
    {
      throw new IOException(paramObjectOutputStream.getMessage());
    }
  }
  
  public e a(int paramInt)
  {
    return e.a(paramInt);
  }
  
  public aq a()
  {
    return new aq(this);
  }
  
  public aq a(bd paramBd)
  {
    this.a = paramBd;
    return this;
  }
  
  public void a(dg paramDg)
    throws cn
  {
    ((dp)e.get(paramDg.D())).b().b(paramDg, this);
  }
  
  public void a(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.a = null;
    }
  }
  
  public void b()
  {
    this.a = null;
  }
  
  public void b(dg paramDg)
    throws cn
  {
    ((dp)e.get(paramDg.D())).b().a(paramDg, this);
  }
  
  public bd c()
  {
    return this.a;
  }
  
  public void d()
  {
    this.a = null;
  }
  
  public boolean e()
  {
    return this.a != null;
  }
  
  public void f()
    throws cn
  {
    if (this.a != null) {
      this.a.j();
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("ControlPolicy(");
    if (e())
    {
      localStringBuilder.append("latent:");
      if (this.a != null) {
        break label50;
      }
      localStringBuilder.append("null");
    }
    for (;;)
    {
      localStringBuilder.append(")");
      return localStringBuilder.toString();
      label50:
      localStringBuilder.append(this.a);
    }
  }
  
  private static class a
    extends dq<aq>
  {
    private a() {}
    
    public void a(dg paramDg, aq paramAq)
      throws cn
    {
      paramDg.j();
      db localDb = paramDg.l();
      if (localDb.b == 0)
      {
        paramDg.k();
        paramAq.f();
        return;
      }
      switch (localDb.c)
      {
      default: 
        dj.a(paramDg, localDb.b);
      }
      for (;;)
      {
        paramDg.m();
        break;
        if (localDb.b == 12)
        {
          paramAq.a = new bd();
          paramAq.a.a(paramDg);
          paramAq.a(true);
        }
        else
        {
          dj.a(paramDg, localDb.b);
        }
      }
    }
    
    public void b(dg paramDg, aq paramAq)
      throws cn
    {
      paramAq.f();
      paramDg.a(aq.h());
      if ((paramAq.a != null) && (paramAq.e()))
      {
        paramDg.a(aq.i());
        paramAq.a.b(paramDg);
        paramDg.c();
      }
      paramDg.d();
      paramDg.b();
    }
  }
  
  private static class b
    implements dp
  {
    private b() {}
    
    public aq.a a()
    {
      return new aq.a(null);
    }
  }
  
  private static class c
    extends dr<aq>
  {
    private c() {}
    
    public void a(dg paramDg, aq paramAq)
      throws cn
    {
      paramDg = (dm)paramDg;
      BitSet localBitSet = new BitSet();
      if (paramAq.e()) {
        localBitSet.set(0);
      }
      paramDg.a(localBitSet, 1);
      if (paramAq.e()) {
        paramAq.a.b(paramDg);
      }
    }
    
    public void b(dg paramDg, aq paramAq)
      throws cn
    {
      paramDg = (dm)paramDg;
      if (paramDg.b(1).get(0))
      {
        paramAq.a = new bd();
        paramAq.a.a(paramDg);
        paramAq.a(true);
      }
    }
  }
  
  private static class d
    implements dp
  {
    private d() {}
    
    public aq.c a()
    {
      return new aq.c(null);
    }
  }
  
  public static enum e
    implements co
  {
    private static final Map<String, e> b;
    private final short c;
    private final String d;
    
    static
    {
      b = new HashMap();
      Iterator localIterator = EnumSet.allOf(e.class).iterator();
      while (localIterator.hasNext())
      {
        e localE = (e)localIterator.next();
        b.put(localE.b(), localE);
      }
    }
    
    private e(short paramShort, String paramString)
    {
      this.c = paramShort;
      this.d = paramString;
    }
    
    public static e a(int paramInt)
    {
      switch (paramInt)
      {
      default: 
        return null;
      }
      return a;
    }
    
    public static e a(String paramString)
    {
      return (e)b.get(paramString);
    }
    
    public static e b(int paramInt)
    {
      e localE = a(paramInt);
      if (localE == null) {
        throw new IllegalArgumentException("Field " + paramInt + " doesn't exist!");
      }
      return localE;
    }
    
    public short a()
    {
      return this.c;
    }
    
    public String b()
    {
      return this.d;
    }
  }
}
