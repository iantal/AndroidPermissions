package u.aly;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class ay
  implements Serializable, Cloneable, ch<ay, e>
{
  public static final Map<e, ct> d;
  private static final dl e = new dl("IdSnapshot");
  private static final db f = new db("identity", (byte)11, (short)1);
  private static final db g = new db("ts", (byte)10, (short)2);
  private static final db h = new db("version", (byte)8, (short)3);
  private static final Map<Class<? extends do>, dp> i = new HashMap();
  private static final int j = 0;
  private static final int k = 1;
  public String a;
  public long b;
  public int c;
  private byte l = 0;
  
  static
  {
    i.put(dq.class, new b(null));
    i.put(dr.class, new d(null));
    EnumMap localEnumMap = new EnumMap(e.class);
    localEnumMap.put(e.a, new ct("identity", (byte)1, new cu((byte)11)));
    localEnumMap.put(e.b, new ct("ts", (byte)1, new cu((byte)10)));
    localEnumMap.put(e.c, new ct("version", (byte)1, new cu((byte)8)));
    d = Collections.unmodifiableMap(localEnumMap);
    ct.a(ay.class, d);
  }
  
  public ay() {}
  
  public ay(String paramString, long paramLong, int paramInt)
  {
    this();
    this.a = paramString;
    this.b = paramLong;
    b(true);
    this.c = paramInt;
    c(true);
  }
  
  public ay(ay paramAy)
  {
    this.l = paramAy.l;
    if (paramAy.e()) {
      this.a = paramAy.a;
    }
    this.b = paramAy.b;
    this.c = paramAy.c;
  }
  
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException, ClassNotFoundException
  {
    try
    {
      this.l = 0;
      a(new da(new ds(paramObjectInputStream)));
      return;
    }
    catch (cn paramObjectInputStream)
    {
      throw new IOException(paramObjectInputStream.getMessage());
    }
  }
  
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    try
    {
      b(new da(new ds(paramObjectOutputStream)));
      return;
    }
    catch (cn paramObjectOutputStream)
    {
      throw new IOException(paramObjectOutputStream.getMessage());
    }
  }
  
  public ay a()
  {
    return new ay(this);
  }
  
  public ay a(int paramInt)
  {
    this.c = paramInt;
    c(true);
    return this;
  }
  
  public ay a(long paramLong)
  {
    this.b = paramLong;
    b(true);
    return this;
  }
  
  public ay a(String paramString)
  {
    this.a = paramString;
    return this;
  }
  
  public void a(dg paramDg)
    throws cn
  {
    ((dp)i.get(paramDg.D())).b().b(paramDg, this);
  }
  
  public void a(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.a = null;
    }
  }
  
  public void b()
  {
    this.a = null;
    b(false);
    this.b = 0L;
    c(false);
    this.c = 0;
  }
  
  public void b(dg paramDg)
    throws cn
  {
    ((dp)i.get(paramDg.D())).b().a(paramDg, this);
  }
  
  public void b(boolean paramBoolean)
  {
    this.l = ce.a(this.l, 0, paramBoolean);
  }
  
  public String c()
  {
    return this.a;
  }
  
  public e c(int paramInt)
  {
    return e.a(paramInt);
  }
  
  public void c(boolean paramBoolean)
  {
    this.l = ce.a(this.l, 1, paramBoolean);
  }
  
  public void d()
  {
    this.a = null;
  }
  
  public boolean e()
  {
    return this.a != null;
  }
  
  public long f()
  {
    return this.b;
  }
  
  public void h()
  {
    this.l = ce.b(this.l, 0);
  }
  
  public boolean i()
  {
    return ce.a(this.l, 0);
  }
  
  public int j()
  {
    return this.c;
  }
  
  public void k()
  {
    this.l = ce.b(this.l, 1);
  }
  
  public boolean l()
  {
    return ce.a(this.l, 1);
  }
  
  public void m()
    throws cn
  {
    if (this.a == null) {
      throw new dh("Required field 'identity' was not present! Struct: " + toString());
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("IdSnapshot(");
    localStringBuilder.append("identity:");
    if (this.a == null) {
      localStringBuilder.append("null");
    }
    for (;;)
    {
      localStringBuilder.append(", ");
      localStringBuilder.append("ts:");
      localStringBuilder.append(this.b);
      localStringBuilder.append(", ");
      localStringBuilder.append("version:");
      localStringBuilder.append(this.c);
      localStringBuilder.append(")");
      return localStringBuilder.toString();
      localStringBuilder.append(this.a);
    }
  }
  
  private static class a
    extends dq<ay>
  {
    private a() {}
    
    public void a(dg paramDg, ay paramAy)
      throws cn
    {
      paramDg.j();
      db localDb = paramDg.l();
      if (localDb.b == 0)
      {
        paramDg.k();
        if (!paramAy.i()) {
          throw new dh("Required field 'ts' was not found in serialized data! Struct: " + toString());
        }
      }
      else
      {
        switch (localDb.c)
        {
        default: 
          dj.a(paramDg, localDb.b);
        }
        for (;;)
        {
          paramDg.m();
          break;
          if (localDb.b == 11)
          {
            paramAy.a = paramDg.z();
            paramAy.a(true);
          }
          else
          {
            dj.a(paramDg, localDb.b);
            continue;
            if (localDb.b == 10)
            {
              paramAy.b = paramDg.x();
              paramAy.b(true);
            }
            else
            {
              dj.a(paramDg, localDb.b);
              continue;
              if (localDb.b == 8)
              {
                paramAy.c = paramDg.w();
                paramAy.c(true);
              }
              else
              {
                dj.a(paramDg, localDb.b);
              }
            }
          }
        }
      }
      if (!paramAy.l()) {
        throw new dh("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      paramAy.m();
    }
    
    public void b(dg paramDg, ay paramAy)
      throws cn
    {
      paramAy.m();
      paramDg.a(ay.n());
      if (paramAy.a != null)
      {
        paramDg.a(ay.o());
        paramDg.a(paramAy.a);
        paramDg.c();
      }
      paramDg.a(ay.p());
      paramDg.a(paramAy.b);
      paramDg.c();
      paramDg.a(ay.q());
      paramDg.a(paramAy.c);
      paramDg.c();
      paramDg.d();
      paramDg.b();
    }
  }
  
  private static class b
    implements dp
  {
    private b() {}
    
    public ay.a a()
    {
      return new ay.a(null);
    }
  }
  
  private static class c
    extends dr<ay>
  {
    private c() {}
    
    public void a(dg paramDg, ay paramAy)
      throws cn
    {
      paramDg = (dm)paramDg;
      paramDg.a(paramAy.a);
      paramDg.a(paramAy.b);
      paramDg.a(paramAy.c);
    }
    
    public void b(dg paramDg, ay paramAy)
      throws cn
    {
      paramDg = (dm)paramDg;
      paramAy.a = paramDg.z();
      paramAy.a(true);
      paramAy.b = paramDg.x();
      paramAy.b(true);
      paramAy.c = paramDg.w();
      paramAy.c(true);
    }
  }
  
  private static class d
    implements dp
  {
    private d() {}
    
    public ay.c a()
    {
      return new ay.c(null);
    }
  }
  
  public static enum e
    implements co
  {
    private static final Map<String, e> d;
    private final short e;
    private final String f;
    
    static
    {
      d = new HashMap();
      Iterator localIterator = EnumSet.allOf(e.class).iterator();
      while (localIterator.hasNext())
      {
        e localE = (e)localIterator.next();
        d.put(localE.b(), localE);
      }
    }
    
    private e(short paramShort, String paramString)
    {
      this.e = paramShort;
      this.f = paramString;
    }
    
    public static e a(int paramInt)
    {
      switch (paramInt)
      {
      default: 
        return null;
      case 1: 
        return a;
      case 2: 
        return b;
      }
      return c;
    }
    
    public static e a(String paramString)
    {
      return (e)d.get(paramString);
    }
    
    public static e b(int paramInt)
    {
      e localE = a(paramInt);
      if (localE == null) {
        throw new IllegalArgumentException("Field " + paramInt + " doesn't exist!");
      }
      return localE;
    }
    
    public short a()
    {
      return this.e;
    }
    
    public String b()
    {
      return this.f;
    }
  }
}
