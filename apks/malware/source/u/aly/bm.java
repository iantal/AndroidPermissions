package u.aly;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class bm
  implements Serializable, Cloneable, ch<bm, e>
{
  public static final Map<e, ct> c;
  private static final dl d = new dl("Traffic");
  private static final db e = new db("upload_traffic", (byte)8, (short)1);
  private static final db f = new db("download_traffic", (byte)8, (short)2);
  private static final Map<Class<? extends do>, dp> g = new HashMap();
  private static final int h = 0;
  private static final int i = 1;
  public int a;
  public int b;
  private byte j = 0;
  
  static
  {
    g.put(dq.class, new b(null));
    g.put(dr.class, new d(null));
    EnumMap localEnumMap = new EnumMap(e.class);
    localEnumMap.put(e.a, new ct("upload_traffic", (byte)1, new cu((byte)8)));
    localEnumMap.put(e.b, new ct("download_traffic", (byte)1, new cu((byte)8)));
    c = Collections.unmodifiableMap(localEnumMap);
    ct.a(bm.class, c);
  }
  
  public bm() {}
  
  public bm(int paramInt1, int paramInt2)
  {
    this();
    this.a = paramInt1;
    a(true);
    this.b = paramInt2;
    b(true);
  }
  
  public bm(bm paramBm)
  {
    this.j = paramBm.j;
    this.a = paramBm.a;
    this.b = paramBm.b;
  }
  
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException, ClassNotFoundException
  {
    try
    {
      this.j = 0;
      a(new da(new ds(paramObjectInputStream)));
      return;
    }
    catch (cn paramObjectInputStream)
    {
      throw new IOException(paramObjectInputStream.getMessage());
    }
  }
  
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    try
    {
      b(new da(new ds(paramObjectOutputStream)));
      return;
    }
    catch (cn paramObjectOutputStream)
    {
      throw new IOException(paramObjectOutputStream.getMessage());
    }
  }
  
  public bm a()
  {
    return new bm(this);
  }
  
  public bm a(int paramInt)
  {
    this.a = paramInt;
    a(true);
    return this;
  }
  
  public void a(dg paramDg)
    throws cn
  {
    ((dp)g.get(paramDg.D())).b().b(paramDg, this);
  }
  
  public void a(boolean paramBoolean)
  {
    this.j = ce.a(this.j, 0, paramBoolean);
  }
  
  public void b()
  {
    a(false);
    this.a = 0;
    b(false);
    this.b = 0;
  }
  
  public void b(dg paramDg)
    throws cn
  {
    ((dp)g.get(paramDg.D())).b().a(paramDg, this);
  }
  
  public void b(boolean paramBoolean)
  {
    this.j = ce.a(this.j, 1, paramBoolean);
  }
  
  public int c()
  {
    return this.a;
  }
  
  public bm c(int paramInt)
  {
    this.b = paramInt;
    b(true);
    return this;
  }
  
  public e d(int paramInt)
  {
    return e.a(paramInt);
  }
  
  public void d()
  {
    this.j = ce.b(this.j, 0);
  }
  
  public boolean e()
  {
    return ce.a(this.j, 0);
  }
  
  public int f()
  {
    return this.b;
  }
  
  public void h()
  {
    this.j = ce.b(this.j, 1);
  }
  
  public boolean i()
  {
    return ce.a(this.j, 1);
  }
  
  public void j()
    throws cn
  {}
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("Traffic(");
    localStringBuilder.append("upload_traffic:");
    localStringBuilder.append(this.a);
    localStringBuilder.append(", ");
    localStringBuilder.append("download_traffic:");
    localStringBuilder.append(this.b);
    localStringBuilder.append(")");
    return localStringBuilder.toString();
  }
  
  private static class a
    extends dq<bm>
  {
    private a() {}
    
    public void a(dg paramDg, bm paramBm)
      throws cn
    {
      paramDg.j();
      db localDb = paramDg.l();
      if (localDb.b == 0)
      {
        paramDg.k();
        if (!paramBm.e()) {
          throw new dh("Required field 'upload_traffic' was not found in serialized data! Struct: " + toString());
        }
      }
      else
      {
        switch (localDb.c)
        {
        default: 
          dj.a(paramDg, localDb.b);
        }
        for (;;)
        {
          paramDg.m();
          break;
          if (localDb.b == 8)
          {
            paramBm.a = paramDg.w();
            paramBm.a(true);
          }
          else
          {
            dj.a(paramDg, localDb.b);
            continue;
            if (localDb.b == 8)
            {
              paramBm.b = paramDg.w();
              paramBm.b(true);
            }
            else
            {
              dj.a(paramDg, localDb.b);
            }
          }
        }
      }
      if (!paramBm.i()) {
        throw new dh("Required field 'download_traffic' was not found in serialized data! Struct: " + toString());
      }
      paramBm.j();
    }
    
    public void b(dg paramDg, bm paramBm)
      throws cn
    {
      paramBm.j();
      paramDg.a(bm.k());
      paramDg.a(bm.l());
      paramDg.a(paramBm.a);
      paramDg.c();
      paramDg.a(bm.m());
      paramDg.a(paramBm.b);
      paramDg.c();
      paramDg.d();
      paramDg.b();
    }
  }
  
  private static class b
    implements dp
  {
    private b() {}
    
    public bm.a a()
    {
      return new bm.a(null);
    }
  }
  
  private static class c
    extends dr<bm>
  {
    private c() {}
    
    public void a(dg paramDg, bm paramBm)
      throws cn
    {
      paramDg = (dm)paramDg;
      paramDg.a(paramBm.a);
      paramDg.a(paramBm.b);
    }
    
    public void b(dg paramDg, bm paramBm)
      throws cn
    {
      paramDg = (dm)paramDg;
      paramBm.a = paramDg.w();
      paramBm.a(true);
      paramBm.b = paramDg.w();
      paramBm.b(true);
    }
  }
  
  private static class d
    implements dp
  {
    private d() {}
    
    public bm.c a()
    {
      return new bm.c(null);
    }
  }
  
  public static enum e
    implements co
  {
    private static final Map<String, e> c;
    private final short d;
    private final String e;
    
    static
    {
      c = new HashMap();
      Iterator localIterator = EnumSet.allOf(e.class).iterator();
      while (localIterator.hasNext())
      {
        e localE = (e)localIterator.next();
        c.put(localE.b(), localE);
      }
    }
    
    private e(short paramShort, String paramString)
    {
      this.d = paramShort;
      this.e = paramString;
    }
    
    public static e a(int paramInt)
    {
      switch (paramInt)
      {
      default: 
        return null;
      case 1: 
        return a;
      }
      return b;
    }
    
    public static e a(String paramString)
    {
      return (e)c.get(paramString);
    }
    
    public static e b(int paramInt)
    {
      e localE = a(paramInt);
      if (localE == null) {
        throw new IllegalArgumentException("Field " + paramInt + " doesn't exist!");
      }
      return localE;
    }
    
    public short a()
    {
      return this.d;
    }
    
    public String b()
    {
      return this.e;
    }
  }
}
