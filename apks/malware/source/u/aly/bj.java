package u.aly;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class bj
  implements Serializable, Cloneable, ch<bj, e>
{
  public static final Map<e, ct> d;
  private static final dl e = new dl("Response");
  private static final db f = new db("resp_code", (byte)8, (short)1);
  private static final db g = new db("msg", (byte)11, (short)2);
  private static final db h = new db("imprint", (byte)12, (short)3);
  private static final Map<Class<? extends do>, dp> i = new HashMap();
  private static final int j = 0;
  public int a;
  public String b;
  public ba c;
  private byte k = 0;
  private e[] l = { e.b, e.c };
  
  static
  {
    i.put(dq.class, new b(null));
    i.put(dr.class, new d(null));
    EnumMap localEnumMap = new EnumMap(e.class);
    localEnumMap.put(e.a, new ct("resp_code", (byte)1, new cu((byte)8)));
    localEnumMap.put(e.b, new ct("msg", (byte)2, new cu((byte)11)));
    localEnumMap.put(e.c, new ct("imprint", (byte)2, new cy((byte)12, ba.class)));
    d = Collections.unmodifiableMap(localEnumMap);
    ct.a(bj.class, d);
  }
  
  public bj() {}
  
  public bj(int paramInt)
  {
    this();
    this.a = paramInt;
    a(true);
  }
  
  public bj(bj paramBj)
  {
    this.k = paramBj.k;
    this.a = paramBj.a;
    if (paramBj.i()) {
      this.b = paramBj.b;
    }
    if (paramBj.l()) {
      this.c = new ba(paramBj.c);
    }
  }
  
  private void a(ObjectInputStream paramObjectInputStream)
    throws IOException, ClassNotFoundException
  {
    try
    {
      this.k = 0;
      a(new da(new ds(paramObjectInputStream)));
      return;
    }
    catch (cn paramObjectInputStream)
    {
      throw new IOException(paramObjectInputStream.getMessage());
    }
  }
  
  private void a(ObjectOutputStream paramObjectOutputStream)
    throws IOException
  {
    try
    {
      b(new da(new ds(paramObjectOutputStream)));
      return;
    }
    catch (cn paramObjectOutputStream)
    {
      throw new IOException(paramObjectOutputStream.getMessage());
    }
  }
  
  public bj a()
  {
    return new bj(this);
  }
  
  public bj a(int paramInt)
  {
    this.a = paramInt;
    a(true);
    return this;
  }
  
  public bj a(String paramString)
  {
    this.b = paramString;
    return this;
  }
  
  public bj a(ba paramBa)
  {
    this.c = paramBa;
    return this;
  }
  
  public void a(dg paramDg)
    throws cn
  {
    ((dp)i.get(paramDg.D())).b().b(paramDg, this);
  }
  
  public void a(boolean paramBoolean)
  {
    this.k = ce.a(this.k, 0, paramBoolean);
  }
  
  public void b()
  {
    a(false);
    this.a = 0;
    this.b = null;
    this.c = null;
  }
  
  public void b(dg paramDg)
    throws cn
  {
    ((dp)i.get(paramDg.D())).b().a(paramDg, this);
  }
  
  public void b(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.b = null;
    }
  }
  
  public int c()
  {
    return this.a;
  }
  
  public e c(int paramInt)
  {
    return e.a(paramInt);
  }
  
  public void c(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.c = null;
    }
  }
  
  public void d()
  {
    this.k = ce.b(this.k, 0);
  }
  
  public boolean e()
  {
    return ce.a(this.k, 0);
  }
  
  public String f()
  {
    return this.b;
  }
  
  public void h()
  {
    this.b = null;
  }
  
  public boolean i()
  {
    return this.b != null;
  }
  
  public ba j()
  {
    return this.c;
  }
  
  public void k()
  {
    this.c = null;
  }
  
  public boolean l()
  {
    return this.c != null;
  }
  
  public void m()
    throws cn
  {
    if (this.c != null) {
      this.c.n();
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("Response(");
    localStringBuilder.append("resp_code:");
    localStringBuilder.append(this.a);
    if (i())
    {
      localStringBuilder.append(", ");
      localStringBuilder.append("msg:");
      if (this.b == null) {
        localStringBuilder.append("null");
      }
    }
    else if (l())
    {
      localStringBuilder.append(", ");
      localStringBuilder.append("imprint:");
      if (this.c != null) {
        break label129;
      }
      localStringBuilder.append("null");
    }
    for (;;)
    {
      localStringBuilder.append(")");
      return localStringBuilder.toString();
      localStringBuilder.append(this.b);
      break;
      label129:
      localStringBuilder.append(this.c);
    }
  }
  
  private static class a
    extends dq<bj>
  {
    private a() {}
    
    public void a(dg paramDg, bj paramBj)
      throws cn
    {
      paramDg.j();
      db localDb = paramDg.l();
      if (localDb.b == 0)
      {
        paramDg.k();
        if (!paramBj.e()) {
          throw new dh("Required field 'resp_code' was not found in serialized data! Struct: " + toString());
        }
      }
      else
      {
        switch (localDb.c)
        {
        default: 
          dj.a(paramDg, localDb.b);
        }
        for (;;)
        {
          paramDg.m();
          break;
          if (localDb.b == 8)
          {
            paramBj.a = paramDg.w();
            paramBj.a(true);
          }
          else
          {
            dj.a(paramDg, localDb.b);
            continue;
            if (localDb.b == 11)
            {
              paramBj.b = paramDg.z();
              paramBj.b(true);
            }
            else
            {
              dj.a(paramDg, localDb.b);
              continue;
              if (localDb.b == 12)
              {
                paramBj.c = new ba();
                paramBj.c.a(paramDg);
                paramBj.c(true);
              }
              else
              {
                dj.a(paramDg, localDb.b);
              }
            }
          }
        }
      }
      paramBj.m();
    }
    
    public void b(dg paramDg, bj paramBj)
      throws cn
    {
      paramBj.m();
      paramDg.a(bj.n());
      paramDg.a(bj.o());
      paramDg.a(paramBj.a);
      paramDg.c();
      if ((paramBj.b != null) && (paramBj.i()))
      {
        paramDg.a(bj.p());
        paramDg.a(paramBj.b);
        paramDg.c();
      }
      if ((paramBj.c != null) && (paramBj.l()))
      {
        paramDg.a(bj.q());
        paramBj.c.b(paramDg);
        paramDg.c();
      }
      paramDg.d();
      paramDg.b();
    }
  }
  
  private static class b
    implements dp
  {
    private b() {}
    
    public bj.a a()
    {
      return new bj.a(null);
    }
  }
  
  private static class c
    extends dr<bj>
  {
    private c() {}
    
    public void a(dg paramDg, bj paramBj)
      throws cn
    {
      paramDg = (dm)paramDg;
      paramDg.a(paramBj.a);
      BitSet localBitSet = new BitSet();
      if (paramBj.i()) {
        localBitSet.set(0);
      }
      if (paramBj.l()) {
        localBitSet.set(1);
      }
      paramDg.a(localBitSet, 2);
      if (paramBj.i()) {
        paramDg.a(paramBj.b);
      }
      if (paramBj.l()) {
        paramBj.c.b(paramDg);
      }
    }
    
    public void b(dg paramDg, bj paramBj)
      throws cn
    {
      paramDg = (dm)paramDg;
      paramBj.a = paramDg.w();
      paramBj.a(true);
      BitSet localBitSet = paramDg.b(2);
      if (localBitSet.get(0))
      {
        paramBj.b = paramDg.z();
        paramBj.b(true);
      }
      if (localBitSet.get(1))
      {
        paramBj.c = new ba();
        paramBj.c.a(paramDg);
        paramBj.c(true);
      }
    }
  }
  
  private static class d
    implements dp
  {
    private d() {}
    
    public bj.c a()
    {
      return new bj.c(null);
    }
  }
  
  public static enum e
    implements co
  {
    private static final Map<String, e> d;
    private final short e;
    private final String f;
    
    static
    {
      d = new HashMap();
      Iterator localIterator = EnumSet.allOf(e.class).iterator();
      while (localIterator.hasNext())
      {
        e localE = (e)localIterator.next();
        d.put(localE.b(), localE);
      }
    }
    
    private e(short paramShort, String paramString)
    {
      this.e = paramShort;
      this.f = paramString;
    }
    
    public static e a(int paramInt)
    {
      switch (paramInt)
      {
      default: 
        return null;
      case 1: 
        return a;
      case 2: 
        return b;
      }
      return c;
    }
    
    public static e a(String paramString)
    {
      return (e)d.get(paramString);
    }
    
    public static e b(int paramInt)
    {
      e localE = a(paramInt);
      if (localE == null) {
        throw new IllegalArgumentException("Field " + paramInt + " doesn't exist!");
      }
      return localE;
    }
    
    public short a()
    {
      return this.e;
    }
    
    public String b()
    {
      return this.f;
    }
  }
}
