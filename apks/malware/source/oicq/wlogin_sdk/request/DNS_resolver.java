package oicq.wlogin_sdk.request;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.InetSocketAddress;
import oicq.wlogin_sdk.tools.util;

public class DNS_resolver
  implements Runnable
{
  private String domain;
  private InetSocketAddress inetSkAddr;
  private int port;
  
  public DNS_resolver(String paramString, int paramInt)
  {
    this.domain = paramString;
    this.port = paramInt;
  }
  
  public static InetSocketAddress get_DNS_resolver(String paramString, int paramInt, long paramLong)
  {
    try
    {
      paramString = new DNS_resolver(paramString, paramInt);
      localObject = new Thread(paramString);
      ((Thread)localObject).start();
      ((Thread)localObject).join(paramLong);
      paramString = paramString.get();
      return paramString;
    }
    catch (Exception paramString)
    {
      Object localObject = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter((Writer)localObject, true);
      paramString.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      ((StringWriter)localObject).flush();
      util.LOGW("exception", ((StringWriter)localObject).toString());
    }
    return null;
  }
  
  public InetSocketAddress get()
  {
    try
    {
      InetSocketAddress localInetSocketAddress = this.inetSkAddr;
      return localInetSocketAddress;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void run()
  {
    try
    {
      set(new InetSocketAddress(this.domain, this.port));
      return;
    }
    catch (Exception localException)
    {
      StringWriter localStringWriter = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
      localException.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      localStringWriter.flush();
      util.LOGW("exception", localStringWriter.toString());
    }
  }
  
  public void set(InetSocketAddress paramInetSocketAddress)
  {
    try
    {
      this.inetSkAddr = paramInetSocketAddress;
      return;
    }
    finally
    {
      paramInetSocketAddress = finally;
      throw paramInetSocketAddress;
    }
  }
}
