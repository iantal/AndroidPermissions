package oicq.wlogin_sdk.request;

import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.SecureRandom;
import java.util.Random;
import oicq.wlogin_sdk.tools.cryptor;
import oicq.wlogin_sdk.tools.util;

public class oicq_report_error
{
  protected request_global _g;
  
  public oicq_report_error() {}
  
  protected byte[] encrypt_body(byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte1 = new byte[16];
    this._g._SR.nextBytes(arrayOfByte1);
    paramArrayOfByte = cryptor.encrypt(paramArrayOfByte, 0, paramArrayOfByte.length, arrayOfByte1);
    byte[] arrayOfByte2 = new byte[paramArrayOfByte.length + arrayOfByte1.length];
    System.arraycopy(arrayOfByte1, 0, arrayOfByte2, 0, arrayOfByte1.length);
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte2, arrayOfByte1.length, paramArrayOfByte.length);
    return arrayOfByte2;
  }
  
  public String get_host(int paramInt)
  {
    String[] arrayOfString = new String[2];
    arrayOfString[0] = "log.wtlogin.qq.com";
    arrayOfString[1] = "log1.wtlogin.qq.com";
    return arrayOfString[Math.abs(paramInt % arrayOfString.length)];
  }
  
  public int snd_rcv_req_error(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length == 0)) {
      return 0;
    }
    util.LOGI(getClass().getName() + ":snd_rcv_req_error ...", this._g._context, this._g._uin, 0);
    int j = 0;
    int i = new Random().nextInt();
    if (j >= 2) {
      label85:
      if (j < 1) {
        break label720;
      }
    }
    label720:
    for (i = 64536;; i = 0)
    {
      util.LOGI(getClass().getName() + ":snd_rcv_req_error ret=" + i, this._g._context, this._g._uin, 1);
      return i;
      util.LOGI("try http connect " + j + " ...", this._g._context, this._g._uin, 0);
      Object localObject1 = get_host(i);
      try
      {
        localObject1 = new URL("http://" + (String)localObject1 + "/cgi-bin/wlogin_proxy_log");
      }
      catch (Exception localException1)
      {
        try
        {
          util.LOGI("url=" + localObject1, this._g._context, this._g._uin, 0);
          localObject1 = (HttpURLConnection)((URL)localObject1).openConnection();
          ((HttpURLConnection)localObject1).setRequestMethod("POST");
          ((HttpURLConnection)localObject1).setRequestProperty("Content-Type", "application/octet-stream");
          ((HttpURLConnection)localObject1).setRequestProperty("Content-Disposition", "attachment; filename=micromsgresp.dat");
          ((HttpURLConnection)localObject1).setRequestProperty("Content-Length", new Integer(paramArrayOfByte.length).toString());
          ((HttpURLConnection)localObject1).setConnectTimeout(this._g._time_out);
          ((HttpURLConnection)localObject1).setReadTimeout(this._g._time_out);
          ((HttpURLConnection)localObject1).setDoOutput(true);
          util.LOGI("http request connect ...", this._g._context, this._g._uin, 0);
          if (!http_connect_ontime.connect_ontime((HttpURLConnection)localObject1, this._g._time_out))
          {
            util.LOGI("http request connect failed", this._g._context, this._g._uin, 1);
            j += 1;
            i += 1;
            break;
          }
          util.LOGI("http request write ...", this._g._context, this._g._uin, 0);
          localObject2 = ((HttpURLConnection)localObject1).getOutputStream();
          ((OutputStream)localObject2).write(paramArrayOfByte, 0, paramArrayOfByte.length);
          ((OutputStream)localObject2).flush();
          int k = ((HttpURLConnection)localObject1).getResponseCode();
          util.LOGI("http request response code=" + k, this._g._context, this._g._uin, 0);
          if (200 == k) {
            break label85;
          }
          util.LOGD("use http ret=" + k + " msg=" + ((HttpURLConnection)localObject1).getResponseMessage());
          j += 1;
          i += 1;
        }
        catch (Exception localException2)
        {
          Object localObject2;
          PrintWriter localPrintWriter;
          for (;;) {}
        }
        localException1 = localException1;
      }
      localObject2 = new StringWriter();
      localPrintWriter = new PrintWriter((Writer)localObject2, true);
      localException1.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      ((StringWriter)localObject2).flush();
      util.LOGW("exception", ((StringWriter)localObject2).toString(), this._g._context, this._g._uin);
      j += 1;
      i += 1;
      break;
    }
  }
}
