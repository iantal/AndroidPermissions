package net.sourceforge.zbar.android;

import android.content.Context;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import java.lang.reflect.Method;

public class CameraPreview
  extends SurfaceView
  implements SurfaceHolder.Callback
{
  private Camera.AutoFocusCallback autoFocusCallback;
  private Camera mCamera;
  private SurfaceHolder mHolder;
  private Camera.PreviewCallback previewCallback;
  
  public CameraPreview(Context paramContext, Camera paramCamera, Camera.PreviewCallback paramPreviewCallback, Camera.AutoFocusCallback paramAutoFocusCallback)
  {
    super(paramContext);
    this.mCamera = paramCamera;
    this.previewCallback = paramPreviewCallback;
    this.autoFocusCallback = paramAutoFocusCallback;
    this.mHolder = getHolder();
    this.mHolder.addCallback(this);
    this.mHolder.setType(3);
  }
  
  public void setDisplayOrientation(int paramInt)
  {
    try
    {
      Method localMethod = this.mCamera.getClass().getMethod("setDisplayOrientation", new Class[] { Integer.TYPE });
      if (localMethod != null)
      {
        localMethod.invoke(this.mCamera, new Object[] { Integer.valueOf(paramInt) });
        return;
      }
    }
    catch (Exception localException)
    {
      Camera.Parameters localParameters = this.mCamera.getParameters();
      localParameters.set("jpeg-quality", 100);
      localParameters.setRotation(paramInt);
      localParameters.setPictureFormat(256);
      this.mCamera.setParameters(localParameters);
    }
  }
  
  public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3)
  {
    if (this.mHolder.getSurface() == null) {
      return;
    }
    try
    {
      this.mCamera.stopPreview();
      try
      {
        this.mCamera.setPreviewDisplay(this.mHolder);
        this.mCamera.setPreviewCallback(this.previewCallback);
        this.mCamera.startPreview();
        this.mCamera.autoFocus(this.autoFocusCallback);
        return;
      }
      catch (Exception paramSurfaceHolder)
      {
        Log.d("DBG", "Error starting camera preview: " + paramSurfaceHolder.getMessage());
        return;
      }
    }
    catch (Exception paramSurfaceHolder)
    {
      for (;;) {}
    }
  }
  
  public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
  {
    try
    {
      this.mCamera.setPreviewDisplay(paramSurfaceHolder);
      return;
    }
    catch (Exception paramSurfaceHolder)
    {
      Log.d("DBG", "Error setting camera preview: " + paramSurfaceHolder.getMessage());
    }
  }
  
  public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder) {}
}
