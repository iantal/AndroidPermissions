package org.cocos2dx.chameleon;

import android.app.Activity;
import android.content.Context;
import android.util.Log;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;

public class e
{
  private static final String a = e.class.getName();
  
  public e() {}
  
  /* Error */
  private static File a(Context paramContext, String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore 4
    //   6: aload_0
    //   7: invokevirtual 29	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   10: aload_1
    //   11: invokevirtual 35	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   14: astore_2
    //   15: new 37	java/io/File
    //   18: dup
    //   19: new 37	java/io/File
    //   22: dup
    //   23: aload_0
    //   24: invokevirtual 41	android/content/Context:getFilesDir	()Ljava/io/File;
    //   27: ldc 43
    //   29: invokespecial 46	java/io/File:<init>	(Ljava/io/File;Ljava/lang/String;)V
    //   32: aload_1
    //   33: invokespecial 46	java/io/File:<init>	(Ljava/io/File;Ljava/lang/String;)V
    //   36: astore_0
    //   37: new 48	java/io/FileOutputStream
    //   40: dup
    //   41: aload_0
    //   42: invokespecial 51	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   45: astore_3
    //   46: aload_2
    //   47: aload_3
    //   48: invokestatic 54	org/cocos2dx/chameleon/e:a	(Ljava/io/InputStream;Ljava/io/OutputStream;)V
    //   51: aload_2
    //   52: ifnull +7 -> 59
    //   55: aload_2
    //   56: invokevirtual 59	java/io/InputStream:close	()V
    //   59: aload_3
    //   60: invokevirtual 62	java/io/OutputStream:close	()V
    //   63: aload_0
    //   64: areturn
    //   65: astore_3
    //   66: aconst_null
    //   67: astore_0
    //   68: aconst_null
    //   69: astore_2
    //   70: ldc 64
    //   72: new 66	java/lang/StringBuilder
    //   75: dup
    //   76: ldc 68
    //   78: invokespecial 71	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   81: aload_1
    //   82: invokevirtual 75	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   85: invokevirtual 78	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   88: aload_3
    //   89: invokestatic 84	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   92: pop
    //   93: aload_0
    //   94: ifnull +7 -> 101
    //   97: aload_0
    //   98: invokevirtual 59	java/io/InputStream:close	()V
    //   101: aload_2
    //   102: astore_0
    //   103: aload 4
    //   105: ifnull -42 -> 63
    //   108: aload 4
    //   110: invokevirtual 62	java/io/OutputStream:close	()V
    //   113: aload_2
    //   114: areturn
    //   115: astore_0
    //   116: aload_2
    //   117: areturn
    //   118: astore_0
    //   119: aconst_null
    //   120: astore_2
    //   121: aload 5
    //   123: astore 4
    //   125: aload_2
    //   126: ifnull +7 -> 133
    //   129: aload_2
    //   130: invokevirtual 59	java/io/InputStream:close	()V
    //   133: aload 4
    //   135: ifnull +8 -> 143
    //   138: aload 4
    //   140: invokevirtual 62	java/io/OutputStream:close	()V
    //   143: aload_0
    //   144: athrow
    //   145: astore_1
    //   146: goto -87 -> 59
    //   149: astore_1
    //   150: aload_0
    //   151: areturn
    //   152: astore_0
    //   153: goto -52 -> 101
    //   156: astore_1
    //   157: goto -24 -> 133
    //   160: astore_1
    //   161: goto -18 -> 143
    //   164: astore_0
    //   165: aload 5
    //   167: astore 4
    //   169: goto -44 -> 125
    //   172: astore_0
    //   173: aload_3
    //   174: astore 4
    //   176: goto -51 -> 125
    //   179: astore_1
    //   180: aload_0
    //   181: astore_2
    //   182: aload_1
    //   183: astore_0
    //   184: goto -59 -> 125
    //   187: astore_3
    //   188: aload_2
    //   189: astore_0
    //   190: aconst_null
    //   191: astore_2
    //   192: goto -122 -> 70
    //   195: astore_3
    //   196: aload_2
    //   197: astore 5
    //   199: aload_0
    //   200: astore_2
    //   201: aload 5
    //   203: astore_0
    //   204: goto -134 -> 70
    //   207: astore 6
    //   209: aload_3
    //   210: astore 4
    //   212: aload_2
    //   213: astore 5
    //   215: aload_0
    //   216: astore_2
    //   217: aload 6
    //   219: astore_3
    //   220: aload 5
    //   222: astore_0
    //   223: goto -153 -> 70
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	226	0	paramContext	Context
    //   0	226	1	paramString	String
    //   14	203	2	localObject1	Object
    //   45	15	3	localFileOutputStream	java.io.FileOutputStream
    //   65	109	3	localIOException1	java.io.IOException
    //   187	1	3	localIOException2	java.io.IOException
    //   195	15	3	localIOException3	java.io.IOException
    //   219	1	3	localObject2	Object
    //   4	207	4	localObject3	Object
    //   1	220	5	localObject4	Object
    //   207	11	6	localIOException4	java.io.IOException
    // Exception table:
    //   from	to	target	type
    //   6	15	65	java/io/IOException
    //   108	113	115	java/io/IOException
    //   6	15	118	finally
    //   55	59	145	java/io/IOException
    //   59	63	149	java/io/IOException
    //   97	101	152	java/io/IOException
    //   129	133	156	java/io/IOException
    //   138	143	160	java/io/IOException
    //   15	37	164	finally
    //   37	46	164	finally
    //   46	51	172	finally
    //   70	93	179	finally
    //   15	37	187	java/io/IOException
    //   37	46	195	java/io/IOException
    //   46	51	207	java/io/IOException
  }
  
  public static ClassLoader a(Activity paramActivity, File paramFile)
  {
    Object localObject1 = null;
    Object localObject2 = new File(paramActivity.getFilesDir(), "secondary-dexes");
    if ((!((File)localObject2).exists()) || (!((File)localObject2).isDirectory())) {
      ((File)localObject2).mkdirs();
    }
    if (paramFile != null) {}
    for (;;)
    {
      try
      {
        localObject2 = f.a(paramActivity, paramFile);
        paramFile = (File)localObject2;
      }
      catch (Exception localException)
      {
        paramFile.delete();
        localFile = a(paramActivity, "temp.zip");
        paramFile = localObject1;
        if (localFile == null) {
          continue;
        }
        try
        {
          paramFile = f.a(paramActivity, localFile);
        }
        catch (Exception paramActivity)
        {
          throw new RuntimeException("Multi dex installation failed (" + paramActivity.getMessage() + ").");
        }
      }
      a(paramActivity);
      return paramFile;
      File localFile = a(paramActivity, "temp.zip");
      paramFile = localObject1;
      if (localFile == null) {
        continue;
      }
      try
      {
        paramFile = f.a(paramActivity, localFile);
      }
      catch (Exception paramActivity)
      {
        throw new RuntimeException("Multi dex installation failed (" + paramActivity.getMessage() + ").");
      }
    }
  }
  
  private static void a(Context paramContext)
  {
    paramContext = new File(paramContext.getFilesDir(), "secondary-dexes");
    if ((!paramContext.exists()) || (!paramContext.isDirectory())) {
      return;
    }
    File[] arrayOfFile = paramContext.listFiles();
    if (arrayOfFile == null)
    {
      Log.w(a, "Failed to list secondary dex dir content (" + paramContext.getPath() + ").");
      return;
    }
    int j = arrayOfFile.length;
    int i = 0;
    if (i < j)
    {
      File localFile = arrayOfFile[i];
      Log.i(a, "Trying to delete old file " + localFile.getPath() + " of size " + localFile.length());
      if (!localFile.delete()) {
        Log.w(a, "Failed to delete old file " + localFile.getPath());
      }
      for (;;)
      {
        i += 1;
        break;
        Log.i(a, "Deleted old file " + localFile.getPath());
      }
    }
    paramContext.delete();
  }
  
  private static void a(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    byte[] arrayOfByte = new byte['Ð€'];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        break;
      }
      paramOutputStream.write(arrayOfByte, 0, i);
    }
  }
}
