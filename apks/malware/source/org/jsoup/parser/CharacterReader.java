package org.jsoup.parser;

import org.jsoup.helper.Validate;

class CharacterReader
{
  static final char EOF = '￿';
  private final String input;
  private final int length;
  private int mark = 0;
  private int pos = 0;
  
  CharacterReader(String paramString)
  {
    Validate.notNull(paramString);
    paramString = paramString.replaceAll("\r\n?", "\n");
    this.input = paramString;
    this.length = paramString.length();
  }
  
  void advance()
  {
    this.pos += 1;
  }
  
  char consume()
  {
    if (isEmpty()) {}
    int j;
    for (int i = 65535;; j = this.input.charAt(this.pos))
    {
      this.pos += 1;
      return i;
    }
  }
  
  String consumeAsString()
  {
    String str = this.input;
    int i = this.pos;
    int j = this.pos;
    this.pos = (j + 1);
    return str.substring(i, j);
  }
  
  String consumeDigitSequence()
  {
    int i = this.pos;
    while (!isEmpty())
    {
      int j = this.input.charAt(this.pos);
      if ((j < 48) || (j > 57)) {
        break;
      }
      this.pos += 1;
    }
    return this.input.substring(i, this.pos);
  }
  
  String consumeHexSequence()
  {
    int i = this.pos;
    while (!isEmpty())
    {
      int j = this.input.charAt(this.pos);
      if (((j < 48) || (j > 57)) && ((j < 65) || (j > 70)) && ((j < 97) || (j > 102))) {
        break;
      }
      this.pos += 1;
    }
    return this.input.substring(i, this.pos);
  }
  
  String consumeLetterSequence()
  {
    int i = this.pos;
    while (!isEmpty())
    {
      int j = this.input.charAt(this.pos);
      if (((j < 65) || (j > 90)) && ((j < 97) || (j > 122))) {
        break;
      }
      this.pos += 1;
    }
    return this.input.substring(i, this.pos);
  }
  
  String consumeTo(char paramChar)
  {
    paramChar = this.input.indexOf(paramChar, this.pos);
    if (paramChar != '￿')
    {
      String str = this.input.substring(this.pos, paramChar);
      this.pos += str.length();
      return str;
    }
    return consumeToEnd();
  }
  
  String consumeTo(String paramString)
  {
    int i = this.input.indexOf(paramString, this.pos);
    if (i != -1)
    {
      paramString = this.input.substring(this.pos, i);
      this.pos += paramString.length();
      return paramString;
    }
    return consumeToEnd();
  }
  
  String consumeToAny(char... paramVarArgs)
  {
    int j = this.pos;
    for (;;)
    {
      int k;
      int m;
      int i;
      if (!isEmpty())
      {
        k = this.input.charAt(this.pos);
        m = paramVarArgs.length;
        i = 0;
      }
      while (i < m)
      {
        if (paramVarArgs[i] == k)
        {
          if (this.pos <= j) {
            break label86;
          }
          return this.input.substring(j, this.pos);
        }
        i += 1;
      }
      this.pos += 1;
    }
    label86:
    return "";
  }
  
  String consumeToEnd()
  {
    String str = this.input.substring(this.pos, this.input.length());
    this.pos = this.input.length();
    return str;
  }
  
  boolean containsIgnoreCase(String paramString)
  {
    String str = paramString.toLowerCase();
    paramString = paramString.toUpperCase();
    return (this.input.indexOf(str, this.pos) > -1) || (this.input.indexOf(paramString, this.pos) > -1);
  }
  
  char current()
  {
    if (isEmpty()) {
      return 65535;
    }
    return this.input.charAt(this.pos);
  }
  
  boolean isEmpty()
  {
    return this.pos >= this.length;
  }
  
  void mark()
  {
    this.mark = this.pos;
  }
  
  boolean matchConsume(String paramString)
  {
    if (matches(paramString))
    {
      this.pos += paramString.length();
      return true;
    }
    return false;
  }
  
  boolean matchConsumeIgnoreCase(String paramString)
  {
    if (matchesIgnoreCase(paramString))
    {
      this.pos += paramString.length();
      return true;
    }
    return false;
  }
  
  boolean matches(char paramChar)
  {
    return (!isEmpty()) && (this.input.charAt(this.pos) == paramChar);
  }
  
  boolean matches(String paramString)
  {
    return this.input.startsWith(paramString, this.pos);
  }
  
  boolean matchesAny(char... paramVarArgs)
  {
    if (isEmpty()) {}
    for (;;)
    {
      return false;
      int j = this.input.charAt(this.pos);
      int k = paramVarArgs.length;
      int i = 0;
      while (i < k)
      {
        if (paramVarArgs[i] == j) {
          return true;
        }
        i += 1;
      }
    }
  }
  
  boolean matchesDigit()
  {
    if (isEmpty()) {}
    int i;
    do
    {
      return false;
      i = this.input.charAt(this.pos);
    } while ((i < 48) || (i > 57));
    return true;
  }
  
  boolean matchesIgnoreCase(String paramString)
  {
    return this.input.regionMatches(true, this.pos, paramString, 0, paramString.length());
  }
  
  boolean matchesLetter()
  {
    if (isEmpty()) {}
    int i;
    do
    {
      return false;
      i = this.input.charAt(this.pos);
    } while (((i < 65) || (i > 90)) && ((i < 97) || (i > 122)));
    return true;
  }
  
  int pos()
  {
    return this.pos;
  }
  
  void rewindToMark()
  {
    this.pos = this.mark;
  }
  
  public String toString()
  {
    return this.input.substring(this.pos);
  }
  
  void unconsume()
  {
    this.pos -= 1;
  }
}
