package org.apmem.tools.layouts;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;

public class FlowLayout
  extends ViewGroup
{
  public static final int HORIZONTAL = 0;
  public static final int VERTICAL = 1;
  private boolean debugDraw = false;
  private boolean fitContent = false;
  private int horizontalSpacing = 0;
  private int orientation = 0;
  private int verticalSpacing = 0;
  
  public FlowLayout(Context paramContext)
  {
    super(paramContext);
    readStyleParameters(paramContext, null);
  }
  
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    readStyleParameters(paramContext, paramAttributeSet);
  }
  
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    readStyleParameters(paramContext, paramAttributeSet);
  }
  
  private Paint createPaint(int paramInt)
  {
    Paint localPaint = new Paint();
    localPaint.setAntiAlias(true);
    localPaint.setColor(paramInt);
    localPaint.setStrokeWidth(2.0F);
    return localPaint;
  }
  
  private void drawDebugInfo(Canvas paramCanvas, View paramView)
  {
    if (!this.debugDraw) {}
    Paint localPaint3;
    label436:
    label543:
    for (;;)
    {
      return;
      Paint localPaint1 = createPaint(65280);
      Paint localPaint2 = createPaint(-16711936);
      localPaint3 = createPaint(-65536);
      LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
      if (localLayoutParams.horizontalSpacing > 0)
      {
        f1 = paramView.getRight();
        f2 = paramView.getTop();
        f2 = paramView.getHeight() / 2.0F + f2;
        paramCanvas.drawLine(f1, f2, f1 + localLayoutParams.horizontalSpacing, f2, localPaint1);
        paramCanvas.drawLine(localLayoutParams.horizontalSpacing + f1 - 4.0F, f2 - 4.0F, f1 + localLayoutParams.horizontalSpacing, f2, localPaint1);
        paramCanvas.drawLine(localLayoutParams.horizontalSpacing + f1 - 4.0F, f2 + 4.0F, f1 + localLayoutParams.horizontalSpacing, f2, localPaint1);
        if (localLayoutParams.verticalSpacing <= 0) {
          break label436;
        }
        f1 = paramView.getLeft();
        f1 = paramView.getWidth() / 2.0F + f1;
        f2 = paramView.getBottom();
        paramCanvas.drawLine(f1, f2, f1, f2 + localLayoutParams.verticalSpacing, localPaint1);
        paramCanvas.drawLine(f1 - 4.0F, localLayoutParams.verticalSpacing + f2 - 4.0F, f1, f2 + localLayoutParams.verticalSpacing, localPaint1);
        paramCanvas.drawLine(f1 + 4.0F, localLayoutParams.verticalSpacing + f2 - 4.0F, f1, f2 + localLayoutParams.verticalSpacing, localPaint1);
      }
      for (;;)
      {
        if (!localLayoutParams.newLine) {
          break label543;
        }
        if (this.orientation != 0) {
          break label545;
        }
        f1 = paramView.getLeft();
        f2 = paramView.getTop() + paramView.getHeight() / 2.0F;
        paramCanvas.drawLine(f1, f2 - 6.0F, f1, f2 + 6.0F, localPaint3);
        return;
        if (this.horizontalSpacing <= 0) {
          break;
        }
        f1 = paramView.getRight();
        f2 = paramView.getTop() + paramView.getHeight() / 2.0F;
        paramCanvas.drawLine(f1, f2, f1 + this.horizontalSpacing, f2, localPaint2);
        paramCanvas.drawLine(this.horizontalSpacing + f1 - 4.0F, f2 - 4.0F, f1 + this.horizontalSpacing, f2, localPaint2);
        paramCanvas.drawLine(this.horizontalSpacing + f1 - 4.0F, f2 + 4.0F, f1 + this.horizontalSpacing, f2, localPaint2);
        break;
        if (this.verticalSpacing > 0)
        {
          f1 = paramView.getLeft() + paramView.getWidth() / 2.0F;
          f2 = paramView.getBottom();
          paramCanvas.drawLine(f1, f2, f1, f2 + this.verticalSpacing, localPaint2);
          paramCanvas.drawLine(f1 - 4.0F, this.verticalSpacing + f2 - 4.0F, f1, f2 + this.verticalSpacing, localPaint2);
          paramCanvas.drawLine(f1 + 4.0F, this.verticalSpacing + f2 - 4.0F, f1, f2 + this.verticalSpacing, localPaint2);
        }
      }
    }
    label545:
    float f1 = paramView.getLeft() + paramView.getWidth() / 2.0F;
    float f2 = paramView.getTop();
    paramCanvas.drawLine(f1 - 6.0F, f2, 6.0F + f1, f2, localPaint3);
  }
  
  private void fitContent(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    int j = paramInt1 - (paramInt2 - paramInt5);
    int k = paramInt4 - paramInt3;
    int m = j / k;
    paramInt2 = paramInt3;
    if (paramInt2 < paramInt4)
    {
      View localView = getChildAt(paramInt2);
      int i = localView.getMeasuredWidth();
      paramInt5 = localView.getMeasuredHeight();
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      if (this.orientation == 0)
      {
        if (paramInt2 < paramInt4 - 1) {}
        for (paramInt1 = i + m;; paramInt1 = j - (k - 1) * m + i)
        {
          LayoutParams.access$012(localLayoutParams, (paramInt2 - paramInt3) * m);
          localView.measure(View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt5, 1073741824));
          paramInt2 += 1;
          break;
        }
      }
      if (paramInt2 < paramInt4 - 1) {}
      for (paramInt1 = paramInt5 + m;; paramInt1 = j - (k - 1) * m + paramInt5)
      {
        LayoutParams.access$112(localLayoutParams, (paramInt2 - paramInt3) * m);
        paramInt5 = paramInt1;
        paramInt1 = i;
        break;
      }
    }
  }
  
  private int getHorizontalSpacing(LayoutParams paramLayoutParams)
  {
    if (paramLayoutParams.horizontalSpacingSpecified()) {
      return paramLayoutParams.horizontalSpacing;
    }
    return this.horizontalSpacing;
  }
  
  private int getVerticalSpacing(LayoutParams paramLayoutParams)
  {
    if (paramLayoutParams.verticalSpacingSpecified()) {
      return paramLayoutParams.verticalSpacing;
    }
    return this.verticalSpacing;
  }
  
  private void readStyleParameters(Context paramContext, AttributeSet paramAttributeSet)
  {
    this.orientation = 0;
    this.debugDraw = true;
    this.fitContent = false;
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof LayoutParams;
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    boolean bool = super.drawChild(paramCanvas, paramView, paramLong);
    drawDebugInfo(paramCanvas, paramView);
    return bool;
  }
  
  protected LayoutParams generateDefaultLayoutParams()
  {
    return new LayoutParams(-2, -2);
  }
  
  public LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new LayoutParams(getContext(), paramAttributeSet);
  }
  
  protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return new LayoutParams(paramLayoutParams);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt2 = getChildCount();
    paramInt1 = 0;
    while (paramInt1 < paramInt2)
    {
      View localView = getChildAt(paramInt1);
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      localView.layout(localLayoutParams.x, localLayoutParams.y, localLayoutParams.x + localView.getMeasuredWidth(), localLayoutParams.y + localView.getMeasuredHeight());
      paramInt1 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i12 = View.MeasureSpec.getSize(paramInt1) - getPaddingRight() - getPaddingLeft();
    int i13 = View.MeasureSpec.getSize(paramInt2) - getPaddingRight() - getPaddingLeft();
    int i4 = View.MeasureSpec.getMode(paramInt1);
    int i5 = View.MeasureSpec.getMode(paramInt2);
    int i7;
    if (this.orientation == 0) {
      i7 = i4;
    }
    int i3;
    int m;
    int i1;
    int n;
    int j;
    int i2;
    int i8;
    int i14;
    int i;
    View localView;
    int i10;
    int i9;
    int i11;
    for (int i6 = i12;; i6 = i13)
    {
      k = 0;
      i3 = 0;
      m = 0;
      i1 = 0;
      n = 0;
      j = 0;
      i2 = 0;
      i8 = 0;
      i14 = getChildCount();
      i = 0;
      for (;;)
      {
        if (i >= i14) {
          break label524;
        }
        localView = getChildAt(i);
        if (localView.getVisibility() != 8) {
          break;
        }
        i10 = n;
        n = i3;
        i9 = i2;
        i11 = i1;
        i1 = j;
        i3 = k;
        k = n;
        i2 = m;
        n = i11;
        j = i10;
        m = i9;
        i += 1;
        i9 = i3;
        i10 = i2;
        i11 = i1;
        i1 = n;
        n = j;
        i3 = k;
        i2 = m;
        j = i11;
        m = i10;
        k = i9;
      }
      i7 = i5;
    }
    label227:
    label247:
    LayoutParams localLayoutParams;
    if (i4 == 1073741824)
    {
      i1 = Integer.MIN_VALUE;
      i2 = View.MeasureSpec.makeMeasureSpec(i12, i1);
      if (i5 != 1073741824) {
        break label478;
      }
      i1 = Integer.MIN_VALUE;
      localView.measure(i2, View.MeasureSpec.makeMeasureSpec(i13, i1));
      localLayoutParams = (LayoutParams)localView.getLayoutParams();
      i2 = getHorizontalSpacing(localLayoutParams);
      i1 = getVerticalSpacing(localLayoutParams);
      i9 = localView.getMeasuredWidth();
      i3 = localView.getMeasuredHeight();
      if (this.orientation != 0) {
        break label485;
      }
      i10 = i1;
      i1 = i9;
      i9 = i3;
      label320:
      m += i1;
      if ((i7 == 1073741824) && (this.fitContent)) {
        fitContent(i6, m, i8, i, i1);
      }
      n += k;
      i8 = i;
      i10 = Math.max(i9 + i10, i10 + i9);
      i9 = Math.max(i9, i9);
      if (this.orientation != 0) {
        break label500;
      }
      m = getPaddingLeft() + i1 - i1;
    }
    for (int k = getPaddingTop() + n;; k = getPaddingTop() + i1 - i3)
    {
      localLayoutParams.setPosition(m, k);
      i11 = Math.max(j, i1);
      m = n + i9;
      j = n;
      n = i1;
      i2 = i1 + i2;
      k = i9;
      i3 = i10;
      i1 = i11;
      break;
      i1 = i4;
      break label227;
      label478:
      i1 = i5;
      break label247;
      label485:
      i10 = i2;
      i2 = i1;
      i1 = i3;
      break label320;
      label500:
      m = n + getPaddingLeft();
    }
    label524:
    if ((i7 == 1073741824) && (this.fitContent)) {
      fitContent(i6, i1, i8, i14, 0);
    }
    if (this.orientation == 0)
    {
      setMeasuredDimension(resolveSize(j, paramInt1), resolveSize(i2, paramInt2));
      return;
    }
    setMeasuredDimension(resolveSize(i2, paramInt1), resolveSize(j, paramInt2));
  }
  
  public static class LayoutParams
    extends ViewGroup.LayoutParams
  {
    private static int NO_SPACING = -1;
    private int horizontalSpacing = NO_SPACING;
    private boolean newLine = false;
    private int verticalSpacing = NO_SPACING;
    private int x;
    private int y;
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      readStyleParameters(paramContext, paramAttributeSet);
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    private void readStyleParameters(Context paramContext, AttributeSet paramAttributeSet)
    {
      this.newLine = true;
    }
    
    public boolean horizontalSpacingSpecified()
    {
      return this.horizontalSpacing != NO_SPACING;
    }
    
    public void setPosition(int paramInt1, int paramInt2)
    {
      this.x = paramInt1;
      this.y = paramInt2;
    }
    
    public boolean verticalSpacingSpecified()
    {
      return this.verticalSpacing != NO_SPACING;
    }
  }
}
