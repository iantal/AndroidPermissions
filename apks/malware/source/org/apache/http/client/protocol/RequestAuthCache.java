package org.apache.http.client.protocol;

import android.util.Log;
import java.io.IOException;
import org.apache.http.HttpException;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.annotation.Immutable;
import org.apache.http.auth.AuthProtocolState;
import org.apache.http.auth.AuthScheme;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.AuthStateHC4;
import org.apache.http.client.AuthCache;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.conn.routing.RouteInfo;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.Args;

@Immutable
public class RequestAuthCache
  implements HttpRequestInterceptor
{
  private static final String TAG = "HttpClient";
  
  public RequestAuthCache() {}
  
  private void doPreemptiveAuth(HttpHost paramHttpHost, AuthScheme paramAuthScheme, AuthStateHC4 paramAuthStateHC4, CredentialsProvider paramCredentialsProvider)
  {
    String str = paramAuthScheme.getSchemeName();
    if (Log.isLoggable("HttpClient", 3)) {
      Log.d("HttpClient", "Re-using cached '" + str + "' auth scheme for " + paramHttpHost);
    }
    paramHttpHost = paramCredentialsProvider.getCredentials(new AuthScope(paramHttpHost.getHostName(), paramHttpHost.getPort(), AuthScope.ANY_REALM, str));
    if (paramHttpHost != null) {
      if ("BASIC".equalsIgnoreCase(paramAuthScheme.getSchemeName()))
      {
        paramAuthStateHC4.setState(AuthProtocolState.CHALLENGED);
        paramAuthStateHC4.update(paramAuthScheme, paramHttpHost);
      }
    }
    while (!Log.isLoggable("HttpClient", 3)) {
      for (;;)
      {
        return;
        paramAuthStateHC4.setState(AuthProtocolState.SUCCESS);
      }
    }
    Log.d("HttpClient", "No credentials for preemptive authentication");
  }
  
  public void process(HttpRequest paramHttpRequest, HttpContext paramHttpContext)
    throws HttpException, IOException
  {
    Args.notNull(paramHttpRequest, "HTTP request");
    Args.notNull(paramHttpContext, "HTTP context");
    HttpClientContext localHttpClientContext = HttpClientContext.adapt(paramHttpContext);
    Object localObject = localHttpClientContext.getAuthCache();
    if (localObject == null) {
      if (Log.isLoggable("HttpClient", 3)) {
        Log.d("HttpClient", "Auth cache not set in the context");
      }
    }
    CredentialsProvider localCredentialsProvider;
    do
    {
      do
      {
        RouteInfo localRouteInfo;
        do
        {
          do
          {
            do
            {
              return;
              localCredentialsProvider = localHttpClientContext.getCredentialsProvider();
              if (localCredentialsProvider != null) {
                break;
              }
            } while (!Log.isLoggable("HttpClient", 3));
            Log.d("HttpClient", "Credentials provider not set in the context");
            return;
            localRouteInfo = localHttpClientContext.getHttpRoute();
            if (localRouteInfo != null) {
              break;
            }
          } while (!Log.isLoggable("HttpClient", 3));
          Log.d("HttpClient", "Route info not set in the context");
          return;
          paramHttpContext = localHttpClientContext.getTargetHost();
          if (paramHttpContext != null) {
            break;
          }
        } while (!Log.isLoggable("HttpClient", 3));
        Log.d("HttpClient", "Target host not set in the context");
        return;
        paramHttpRequest = paramHttpContext;
        if (paramHttpContext.getPort() < 0) {
          paramHttpRequest = new HttpHost(paramHttpContext.getHostName(), localRouteInfo.getTargetHost().getPort(), paramHttpContext.getSchemeName());
        }
        paramHttpContext = localHttpClientContext.getTargetAuthState();
        if ((paramHttpContext != null) && (paramHttpContext.getState() == AuthProtocolState.UNCHALLENGED))
        {
          AuthScheme localAuthScheme = ((AuthCache)localObject).get(paramHttpRequest);
          if (localAuthScheme != null) {
            doPreemptiveAuth(paramHttpRequest, localAuthScheme, paramHttpContext, localCredentialsProvider);
          }
        }
        paramHttpRequest = localRouteInfo.getProxyHost();
        paramHttpContext = localHttpClientContext.getProxyAuthState();
      } while ((paramHttpRequest == null) || (paramHttpContext == null) || (paramHttpContext.getState() != AuthProtocolState.UNCHALLENGED));
      localObject = ((AuthCache)localObject).get(paramHttpRequest);
    } while (localObject == null);
    doPreemptiveAuth(paramHttpRequest, (AuthScheme)localObject, paramHttpContext, localCredentialsProvider);
  }
}
