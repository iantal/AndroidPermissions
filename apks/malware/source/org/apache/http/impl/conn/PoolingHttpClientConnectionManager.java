package org.apache.http.impl.conn;

import android.util.Log;
import java.io.Closeable;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.http.HttpClientConnection;
import org.apache.http.HttpHost;
import org.apache.http.annotation.ThreadSafe;
import org.apache.http.config.ConnectionConfig;
import org.apache.http.config.Lookup;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.config.SocketConfig;
import org.apache.http.conn.ConnectionPoolTimeoutException;
import org.apache.http.conn.ConnectionRequest;
import org.apache.http.conn.DnsResolver;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.conn.HttpConnectionFactory;
import org.apache.http.conn.ManagedHttpClientConnection;
import org.apache.http.conn.SchemePortResolver;
import org.apache.http.conn.routing.HttpRoute;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.pool.ConnFactory;
import org.apache.http.pool.ConnPoolControl;
import org.apache.http.pool.PoolStats;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.Args;
import org.apache.http.util.Asserts;

@ThreadSafe
public class PoolingHttpClientConnectionManager
  implements HttpClientConnectionManager, ConnPoolControl<HttpRoute>, Closeable
{
  private static final String TAG = "HttpClient";
  private final ConfigData configData = new ConfigData();
  private final HttpClientConnectionOperator connectionOperator;
  private final AtomicBoolean isShutDown;
  private final CPool pool;
  
  public PoolingHttpClientConnectionManager()
  {
    this(getDefaultRegistry());
  }
  
  public PoolingHttpClientConnectionManager(long paramLong, TimeUnit paramTimeUnit)
  {
    this(getDefaultRegistry(), null, null, null, paramLong, paramTimeUnit);
  }
  
  public PoolingHttpClientConnectionManager(Registry<ConnectionSocketFactory> paramRegistry)
  {
    this(paramRegistry, null, null);
  }
  
  public PoolingHttpClientConnectionManager(Registry<ConnectionSocketFactory> paramRegistry, DnsResolver paramDnsResolver)
  {
    this(paramRegistry, null, paramDnsResolver);
  }
  
  public PoolingHttpClientConnectionManager(Registry<ConnectionSocketFactory> paramRegistry, HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> paramHttpConnectionFactory)
  {
    this(paramRegistry, paramHttpConnectionFactory, null);
  }
  
  public PoolingHttpClientConnectionManager(Registry<ConnectionSocketFactory> paramRegistry, HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> paramHttpConnectionFactory, DnsResolver paramDnsResolver)
  {
    this(paramRegistry, paramHttpConnectionFactory, null, paramDnsResolver, -1L, TimeUnit.MILLISECONDS);
  }
  
  public PoolingHttpClientConnectionManager(Registry<ConnectionSocketFactory> paramRegistry, HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> paramHttpConnectionFactory, SchemePortResolver paramSchemePortResolver, DnsResolver paramDnsResolver, long paramLong, TimeUnit paramTimeUnit)
  {
    this.pool = new CPool(new InternalConnectionFactory(this.configData, paramHttpConnectionFactory), 2, 20, paramLong, paramTimeUnit);
    this.connectionOperator = new HttpClientConnectionOperator(paramRegistry, paramSchemePortResolver, paramDnsResolver);
    this.isShutDown = new AtomicBoolean(false);
  }
  
  public PoolingHttpClientConnectionManager(HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> paramHttpConnectionFactory)
  {
    this(getDefaultRegistry(), paramHttpConnectionFactory, null);
  }
  
  PoolingHttpClientConnectionManager(CPool paramCPool, Lookup<ConnectionSocketFactory> paramLookup, SchemePortResolver paramSchemePortResolver, DnsResolver paramDnsResolver)
  {
    this.pool = paramCPool;
    this.connectionOperator = new HttpClientConnectionOperator(paramLookup, paramSchemePortResolver, paramDnsResolver);
    this.isShutDown = new AtomicBoolean(false);
  }
  
  private String format(HttpRoute paramHttpRoute, Object paramObject)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("[route: ").append(paramHttpRoute).append("]");
    if (paramObject != null) {
      localStringBuilder.append("[state: ").append(paramObject).append("]");
    }
    return localStringBuilder.toString();
  }
  
  private String format(CPoolEntry paramCPoolEntry)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("[id: ").append(paramCPoolEntry.getId()).append("]");
    localStringBuilder.append("[route: ").append(paramCPoolEntry.getRoute()).append("]");
    paramCPoolEntry = paramCPoolEntry.getState();
    if (paramCPoolEntry != null) {
      localStringBuilder.append("[state: ").append(paramCPoolEntry).append("]");
    }
    return localStringBuilder.toString();
  }
  
  private String formatStats(HttpRoute paramHttpRoute)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    PoolStats localPoolStats = this.pool.getTotalStats();
    paramHttpRoute = this.pool.getStats(paramHttpRoute);
    localStringBuilder.append("[total kept alive: ").append(localPoolStats.getAvailable()).append("; ");
    localStringBuilder.append("route allocated: ").append(paramHttpRoute.getLeased() + paramHttpRoute.getAvailable());
    localStringBuilder.append(" of ").append(paramHttpRoute.getMax()).append("; ");
    localStringBuilder.append("total allocated: ").append(localPoolStats.getLeased() + localPoolStats.getAvailable());
    localStringBuilder.append(" of ").append(localPoolStats.getMax()).append("]");
    return localStringBuilder.toString();
  }
  
  private static Registry<ConnectionSocketFactory> getDefaultRegistry()
  {
    return RegistryBuilder.create().register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", SSLConnectionSocketFactory.getSocketFactory()).build();
  }
  
  public void close()
  {
    shutdown();
  }
  
  public void closeExpiredConnections()
  {
    if (Log.isLoggable("HttpClient", 3)) {
      Log.d("HttpClient", "Closing expired connections");
    }
    this.pool.closeExpired();
  }
  
  public void closeIdleConnections(long paramLong, TimeUnit paramTimeUnit)
  {
    if (Log.isLoggable("HttpClient", 3)) {
      Log.d("HttpClient", "Closing connections idle longer than " + paramLong + " " + paramTimeUnit);
    }
    this.pool.closeIdle(paramLong, paramTimeUnit);
  }
  
  public void connect(HttpClientConnection paramHttpClientConnection, HttpRoute paramHttpRoute, int paramInt, HttpContext paramHttpContext)
    throws IOException
  {
    Args.notNull(paramHttpClientConnection, "Managed Connection");
    Args.notNull(paramHttpRoute, "HTTP route");
    for (;;)
    {
      try
      {
        ManagedHttpClientConnection localManagedHttpClientConnection = (ManagedHttpClientConnection)CPoolProxy.getPoolEntry(paramHttpClientConnection).getConnection();
        if (paramHttpRoute.getProxyHost() != null)
        {
          localHttpHost = paramHttpRoute.getProxyHost();
          if (paramHttpRoute.getLocalAddress() == null) {
            break label134;
          }
          paramHttpRoute = new InetSocketAddress(paramHttpRoute.getLocalAddress(), 0);
          Object localObject = this.configData.getSocketConfig(localHttpHost);
          paramHttpClientConnection = (HttpClientConnection)localObject;
          if (localObject == null) {
            paramHttpClientConnection = this.configData.getDefaultSocketConfig();
          }
          localObject = paramHttpClientConnection;
          if (paramHttpClientConnection == null) {
            localObject = SocketConfig.DEFAULT;
          }
          this.connectionOperator.connect(localManagedHttpClientConnection, localHttpHost, paramHttpRoute, paramInt, (SocketConfig)localObject, paramHttpContext);
          return;
        }
      }
      finally {}
      HttpHost localHttpHost = paramHttpRoute.getTargetHost();
      continue;
      label134:
      paramHttpRoute = null;
    }
  }
  
  protected void finalize()
    throws Throwable
  {
    try
    {
      shutdown();
      return;
    }
    finally
    {
      super.finalize();
    }
  }
  
  public ConnectionConfig getConnectionConfig(HttpHost paramHttpHost)
  {
    return this.configData.getConnectionConfig(paramHttpHost);
  }
  
  public ConnectionConfig getDefaultConnectionConfig()
  {
    return this.configData.getDefaultConnectionConfig();
  }
  
  public int getDefaultMaxPerRoute()
  {
    return this.pool.getDefaultMaxPerRoute();
  }
  
  public SocketConfig getDefaultSocketConfig()
  {
    return this.configData.getDefaultSocketConfig();
  }
  
  public int getMaxPerRoute(HttpRoute paramHttpRoute)
  {
    return this.pool.getMaxPerRoute(paramHttpRoute);
  }
  
  public int getMaxTotal()
  {
    return this.pool.getMaxTotal();
  }
  
  public SocketConfig getSocketConfig(HttpHost paramHttpHost)
  {
    return this.configData.getSocketConfig(paramHttpHost);
  }
  
  public PoolStats getStats(HttpRoute paramHttpRoute)
  {
    return this.pool.getStats(paramHttpRoute);
  }
  
  public PoolStats getTotalStats()
  {
    return this.pool.getTotalStats();
  }
  
  protected HttpClientConnection leaseConnection(Future<CPoolEntry> paramFuture, long paramLong, TimeUnit paramTimeUnit)
    throws InterruptedException, ExecutionException, ConnectionPoolTimeoutException
  {
    try
    {
      paramTimeUnit = (CPoolEntry)paramFuture.get(paramLong, paramTimeUnit);
      if ((paramTimeUnit == null) || (paramFuture.isCancelled())) {
        throw new InterruptedException();
      }
    }
    catch (TimeoutException paramFuture)
    {
      throw new ConnectionPoolTimeoutException("Timeout waiting for connection from pool");
    }
    if (paramTimeUnit.getConnection() != null) {}
    for (boolean bool = true;; bool = false)
    {
      Asserts.check(bool, "Pool entry with no connection");
      if (Log.isLoggable("HttpClient", 3)) {
        Log.d("HttpClient", "Connection leased: " + format(paramTimeUnit) + formatStats((HttpRoute)paramTimeUnit.getRoute()));
      }
      paramFuture = CPoolProxy.newProxy(paramTimeUnit);
      return paramFuture;
    }
  }
  
  /* Error */
  public void releaseConnection(HttpClientConnection paramHttpClientConnection, Object paramObject, long paramLong, TimeUnit paramTimeUnit)
  {
    // Byte code:
    //   0: aload_1
    //   1: ldc_w 369
    //   4: invokestatic 242	org/apache/http/util/Args:notNull	(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
    //   7: pop
    //   8: aload_1
    //   9: monitorenter
    //   10: aload_1
    //   11: invokestatic 372	org/apache/http/impl/conn/CPoolProxy:detach	(Lorg/apache/http/HttpClientConnection;)Lorg/apache/http/impl/conn/CPoolEntry;
    //   14: astore 7
    //   16: aload 7
    //   18: ifnonnull +6 -> 24
    //   21: aload_1
    //   22: monitorexit
    //   23: return
    //   24: aload 7
    //   26: invokevirtual 253	org/apache/http/impl/conn/CPoolEntry:getConnection	()Ljava/lang/Object;
    //   29: checkcast 255	org/apache/http/conn/ManagedHttpClientConnection
    //   32: astore 8
    //   34: aload 8
    //   36: invokeinterface 375 1 0
    //   41: ifeq +110 -> 151
    //   44: aload 7
    //   46: aload_2
    //   47: invokevirtual 379	org/apache/http/impl/conn/CPoolEntry:setState	(Ljava/lang/Object;)V
    //   50: aload 5
    //   52: ifnull +196 -> 248
    //   55: aload 7
    //   57: lload_3
    //   58: aload 5
    //   60: invokevirtual 382	org/apache/http/impl/conn/CPoolEntry:updateExpiry	(JLjava/util/concurrent/TimeUnit;)V
    //   63: ldc 24
    //   65: iconst_3
    //   66: invokestatic 210	android/util/Log:isLoggable	(Ljava/lang/String;I)Z
    //   69: ifeq +82 -> 151
    //   72: lload_3
    //   73: lconst_0
    //   74: lcmp
    //   75: ifle +181 -> 256
    //   78: new 102	java/lang/StringBuilder
    //   81: dup
    //   82: invokespecial 103	java/lang/StringBuilder:<init>	()V
    //   85: ldc_w 384
    //   88: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: lload_3
    //   92: l2d
    //   93: ldc2_w 385
    //   96: ddiv
    //   97: invokevirtual 389	java/lang/StringBuilder:append	(D)Ljava/lang/StringBuilder;
    //   100: ldc_w 391
    //   103: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   106: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   109: astore_2
    //   110: ldc 24
    //   112: new 102	java/lang/StringBuilder
    //   115: dup
    //   116: invokespecial 103	java/lang/StringBuilder:<init>	()V
    //   119: ldc_w 393
    //   122: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   125: aload_0
    //   126: aload 7
    //   128: invokespecial 358	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:format	(Lorg/apache/http/impl/conn/CPoolEntry;)Ljava/lang/String;
    //   131: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   134: ldc_w 395
    //   137: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   140: aload_2
    //   141: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   144: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   147: invokestatic 216	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   150: pop
    //   151: aload_0
    //   152: getfield 79	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:pool	Lorg/apache/http/impl/conn/CPool;
    //   155: astore_2
    //   156: aload 8
    //   158: invokeinterface 375 1 0
    //   163: ifeq +100 -> 263
    //   166: aload 7
    //   168: invokevirtual 398	org/apache/http/impl/conn/CPoolEntry:isRouteComplete	()Z
    //   171: ifeq +92 -> 263
    //   174: iconst_1
    //   175: istore 6
    //   177: aload_2
    //   178: aload 7
    //   180: iload 6
    //   182: invokevirtual 402	org/apache/http/impl/conn/CPool:release	(Lorg/apache/http/pool/PoolEntry;Z)V
    //   185: ldc 24
    //   187: iconst_3
    //   188: invokestatic 210	android/util/Log:isLoggable	(Ljava/lang/String;I)Z
    //   191: ifeq +49 -> 240
    //   194: ldc 24
    //   196: new 102	java/lang/StringBuilder
    //   199: dup
    //   200: invokespecial 103	java/lang/StringBuilder:<init>	()V
    //   203: ldc_w 404
    //   206: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   209: aload_0
    //   210: aload 7
    //   212: invokespecial 358	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:format	(Lorg/apache/http/impl/conn/CPoolEntry;)Ljava/lang/String;
    //   215: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   218: aload_0
    //   219: aload 7
    //   221: invokevirtual 132	org/apache/http/impl/conn/CPoolEntry:getRoute	()Ljava/lang/Object;
    //   224: checkcast 257	org/apache/http/conn/routing/HttpRoute
    //   227: invokespecial 360	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:formatStats	(Lorg/apache/http/conn/routing/HttpRoute;)Ljava/lang/String;
    //   230: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   233: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   236: invokestatic 216	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   239: pop
    //   240: aload_1
    //   241: monitorexit
    //   242: return
    //   243: astore_2
    //   244: aload_1
    //   245: monitorexit
    //   246: aload_2
    //   247: athrow
    //   248: getstatic 63	java/util/concurrent/TimeUnit:MILLISECONDS	Ljava/util/concurrent/TimeUnit;
    //   251: astore 5
    //   253: goto -198 -> 55
    //   256: ldc_w 406
    //   259: astore_2
    //   260: goto -150 -> 110
    //   263: iconst_0
    //   264: istore 6
    //   266: goto -89 -> 177
    //   269: astore_2
    //   270: aload_0
    //   271: getfield 79	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:pool	Lorg/apache/http/impl/conn/CPool;
    //   274: astore 5
    //   276: aload 8
    //   278: invokeinterface 375 1 0
    //   283: ifeq +80 -> 363
    //   286: aload 7
    //   288: invokevirtual 398	org/apache/http/impl/conn/CPoolEntry:isRouteComplete	()Z
    //   291: ifeq +72 -> 363
    //   294: iconst_1
    //   295: istore 6
    //   297: aload 5
    //   299: aload 7
    //   301: iload 6
    //   303: invokevirtual 402	org/apache/http/impl/conn/CPool:release	(Lorg/apache/http/pool/PoolEntry;Z)V
    //   306: ldc 24
    //   308: iconst_3
    //   309: invokestatic 210	android/util/Log:isLoggable	(Ljava/lang/String;I)Z
    //   312: ifeq +49 -> 361
    //   315: ldc 24
    //   317: new 102	java/lang/StringBuilder
    //   320: dup
    //   321: invokespecial 103	java/lang/StringBuilder:<init>	()V
    //   324: ldc_w 404
    //   327: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   330: aload_0
    //   331: aload 7
    //   333: invokespecial 358	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:format	(Lorg/apache/http/impl/conn/CPoolEntry;)Ljava/lang/String;
    //   336: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   339: aload_0
    //   340: aload 7
    //   342: invokevirtual 132	org/apache/http/impl/conn/CPoolEntry:getRoute	()Ljava/lang/Object;
    //   345: checkcast 257	org/apache/http/conn/routing/HttpRoute
    //   348: invokespecial 360	org/apache/http/impl/conn/PoolingHttpClientConnectionManager:formatStats	(Lorg/apache/http/conn/routing/HttpRoute;)Ljava/lang/String;
    //   351: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   354: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   357: invokestatic 216	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   360: pop
    //   361: aload_2
    //   362: athrow
    //   363: iconst_0
    //   364: istore 6
    //   366: goto -69 -> 297
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	369	0	this	PoolingHttpClientConnectionManager
    //   0	369	1	paramHttpClientConnection	HttpClientConnection
    //   0	369	2	paramObject	Object
    //   0	369	3	paramLong	long
    //   0	369	5	paramTimeUnit	TimeUnit
    //   175	190	6	bool	boolean
    //   14	327	7	localCPoolEntry	CPoolEntry
    //   32	245	8	localManagedHttpClientConnection	ManagedHttpClientConnection
    // Exception table:
    //   from	to	target	type
    //   10	16	243	finally
    //   21	23	243	finally
    //   24	34	243	finally
    //   151	174	243	finally
    //   177	240	243	finally
    //   240	242	243	finally
    //   244	246	243	finally
    //   270	294	243	finally
    //   297	361	243	finally
    //   361	363	243	finally
    //   34	50	269	finally
    //   55	72	269	finally
    //   78	110	269	finally
    //   110	151	269	finally
    //   248	253	269	finally
  }
  
  public ConnectionRequest requestConnection(HttpRoute paramHttpRoute, Object paramObject)
  {
    Args.notNull(paramHttpRoute, "HTTP route");
    if (Log.isLoggable("HttpClient", 3)) {
      Log.d("HttpClient", "Connection request: " + format(paramHttpRoute, paramObject) + formatStats(paramHttpRoute));
    }
    new ConnectionRequest()
    {
      public boolean cancel()
      {
        return this.val$future.cancel(true);
      }
      
      public HttpClientConnection get(long paramAnonymousLong, TimeUnit paramAnonymousTimeUnit)
        throws InterruptedException, ExecutionException, ConnectionPoolTimeoutException
      {
        return PoolingHttpClientConnectionManager.this.leaseConnection(this.val$future, paramAnonymousLong, paramAnonymousTimeUnit);
      }
    };
  }
  
  public void routeComplete(HttpClientConnection paramHttpClientConnection, HttpRoute paramHttpRoute, HttpContext paramHttpContext)
    throws IOException
  {
    Args.notNull(paramHttpClientConnection, "Managed Connection");
    Args.notNull(paramHttpRoute, "HTTP route");
    try
    {
      CPoolProxy.getPoolEntry(paramHttpClientConnection).markRouteComplete();
      return;
    }
    finally {}
  }
  
  public void setConnectionConfig(HttpHost paramHttpHost, ConnectionConfig paramConnectionConfig)
  {
    this.configData.setConnectionConfig(paramHttpHost, paramConnectionConfig);
  }
  
  public void setDefaultConnectionConfig(ConnectionConfig paramConnectionConfig)
  {
    this.configData.setDefaultConnectionConfig(paramConnectionConfig);
  }
  
  public void setDefaultMaxPerRoute(int paramInt)
  {
    this.pool.setDefaultMaxPerRoute(paramInt);
  }
  
  public void setDefaultSocketConfig(SocketConfig paramSocketConfig)
  {
    this.configData.setDefaultSocketConfig(paramSocketConfig);
  }
  
  public void setMaxPerRoute(HttpRoute paramHttpRoute, int paramInt)
  {
    this.pool.setMaxPerRoute(paramHttpRoute, paramInt);
  }
  
  public void setMaxTotal(int paramInt)
  {
    this.pool.setMaxTotal(paramInt);
  }
  
  public void setSocketConfig(HttpHost paramHttpHost, SocketConfig paramSocketConfig)
  {
    this.configData.setSocketConfig(paramHttpHost, paramSocketConfig);
  }
  
  public void shutdown()
  {
    if (this.isShutDown.compareAndSet(false, true)) {
      if (Log.isLoggable("HttpClient", 3)) {
        Log.d("HttpClient", "Connection manager is shutting down");
      }
    }
    try
    {
      this.pool.shutdown();
      if (Log.isLoggable("HttpClient", 3)) {
        Log.d("HttpClient", "Connection manager shut down");
      }
      return;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        Log.d("HttpClient", "I/O exception shutting down connection manager", localIOException);
      }
    }
  }
  
  public void upgrade(HttpClientConnection paramHttpClientConnection, HttpRoute paramHttpRoute, HttpContext paramHttpContext)
    throws IOException
  {
    Args.notNull(paramHttpClientConnection, "Managed Connection");
    Args.notNull(paramHttpRoute, "HTTP route");
    try
    {
      ManagedHttpClientConnection localManagedHttpClientConnection = (ManagedHttpClientConnection)CPoolProxy.getPoolEntry(paramHttpClientConnection).getConnection();
      this.connectionOperator.upgrade(localManagedHttpClientConnection, paramHttpRoute.getTargetHost(), paramHttpContext);
      return;
    }
    finally {}
  }
  
  static class ConfigData
  {
    private final Map<HttpHost, ConnectionConfig> connectionConfigMap = new ConcurrentHashMap();
    private volatile ConnectionConfig defaultConnectionConfig;
    private volatile SocketConfig defaultSocketConfig;
    private final Map<HttpHost, SocketConfig> socketConfigMap = new ConcurrentHashMap();
    
    ConfigData() {}
    
    public ConnectionConfig getConnectionConfig(HttpHost paramHttpHost)
    {
      return (ConnectionConfig)this.connectionConfigMap.get(paramHttpHost);
    }
    
    public ConnectionConfig getDefaultConnectionConfig()
    {
      return this.defaultConnectionConfig;
    }
    
    public SocketConfig getDefaultSocketConfig()
    {
      return this.defaultSocketConfig;
    }
    
    public SocketConfig getSocketConfig(HttpHost paramHttpHost)
    {
      return (SocketConfig)this.socketConfigMap.get(paramHttpHost);
    }
    
    public void setConnectionConfig(HttpHost paramHttpHost, ConnectionConfig paramConnectionConfig)
    {
      this.connectionConfigMap.put(paramHttpHost, paramConnectionConfig);
    }
    
    public void setDefaultConnectionConfig(ConnectionConfig paramConnectionConfig)
    {
      this.defaultConnectionConfig = paramConnectionConfig;
    }
    
    public void setDefaultSocketConfig(SocketConfig paramSocketConfig)
    {
      this.defaultSocketConfig = paramSocketConfig;
    }
    
    public void setSocketConfig(HttpHost paramHttpHost, SocketConfig paramSocketConfig)
    {
      this.socketConfigMap.put(paramHttpHost, paramSocketConfig);
    }
  }
  
  static class InternalConnectionFactory
    implements ConnFactory<HttpRoute, ManagedHttpClientConnection>
  {
    private final PoolingHttpClientConnectionManager.ConfigData configData;
    private final HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> connFactory;
    
    InternalConnectionFactory(PoolingHttpClientConnectionManager.ConfigData paramConfigData, HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> paramHttpConnectionFactory)
    {
      if (paramConfigData != null)
      {
        this.configData = paramConfigData;
        if (paramHttpConnectionFactory == null) {
          break label34;
        }
      }
      for (;;)
      {
        this.connFactory = paramHttpConnectionFactory;
        return;
        paramConfigData = new PoolingHttpClientConnectionManager.ConfigData();
        break;
        label34:
        paramHttpConnectionFactory = ManagedHttpClientConnectionFactory.INSTANCE;
      }
    }
    
    public ManagedHttpClientConnection create(HttpRoute paramHttpRoute)
      throws IOException
    {
      Object localObject2 = null;
      if (paramHttpRoute.getProxyHost() != null) {
        localObject2 = this.configData.getConnectionConfig(paramHttpRoute.getProxyHost());
      }
      Object localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = this.configData.getConnectionConfig(paramHttpRoute.getTargetHost());
      }
      localObject2 = localObject1;
      if (localObject1 == null) {
        localObject2 = this.configData.getDefaultConnectionConfig();
      }
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = ConnectionConfig.DEFAULT;
      }
      return (ManagedHttpClientConnection)this.connFactory.create(paramHttpRoute, (ConnectionConfig)localObject1);
    }
  }
}
