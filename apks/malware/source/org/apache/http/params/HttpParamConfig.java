package org.apache.http.params;

import java.nio.charset.Charset;
import org.apache.http.config.ConnectionConfig;
import org.apache.http.config.ConnectionConfig.Builder;
import org.apache.http.config.MessageConstraints;
import org.apache.http.config.MessageConstraints.Builder;
import org.apache.http.config.SocketConfig;
import org.apache.http.config.SocketConfig.Builder;

@Deprecated
public final class HttpParamConfig
{
  private HttpParamConfig() {}
  
  public static ConnectionConfig getConnectionConfig(HttpParams paramHttpParams)
  {
    MessageConstraints localMessageConstraints = getMessageConstraints(paramHttpParams);
    paramHttpParams = (String)paramHttpParams.getParameter("http.protocol.element-charset");
    ConnectionConfig.Builder localBuilder = ConnectionConfig.custom();
    if (paramHttpParams != null) {}
    for (paramHttpParams = Charset.forName(paramHttpParams);; paramHttpParams = null) {
      return localBuilder.setCharset(paramHttpParams).setMessageConstraints(localMessageConstraints).build();
    }
  }
  
  public static MessageConstraints getMessageConstraints(HttpParams paramHttpParams)
  {
    return MessageConstraints.custom().setMaxHeaderCount(paramHttpParams.getIntParameter("http.connection.max-header-count", -1)).setMaxLineLength(paramHttpParams.getIntParameter("http.connection.max-line-length", -1)).build();
  }
  
  public static SocketConfig getSocketConfig(HttpParams paramHttpParams)
  {
    return SocketConfig.custom().setSoTimeout(paramHttpParams.getIntParameter("http.socket.timeout", 0)).setSoLinger(paramHttpParams.getIntParameter("http.socket.linger", -1)).setTcpNoDelay(paramHttpParams.getBooleanParameter("http.tcp.nodelay", true)).build();
  }
}
