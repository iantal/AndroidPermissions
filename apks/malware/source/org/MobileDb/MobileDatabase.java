package org.MobileDb;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.Vector;

public class MobileDatabase
{
  private static boolean useNativeUtf8Decoder = true;
  public int Version = 0;
  private boolean loadAllDataInMemory = true;
  private String path = null;
  private Vector tables = new Vector();
  
  public MobileDatabase()
  {
    useNativeUtf8Decoder = isSupportUtf8();
  }
  
  public static String getUtf8String(byte[] paramArrayOfByte)
  {
    if (useNativeUtf8Decoder) {}
    try
    {
      paramArrayOfByte = new String(paramArrayOfByte, "utf-8");
      return paramArrayOfByte;
    }
    catch (UnsupportedEncodingException paramArrayOfByte) {}
    Utf8StringBuffer localUtf8StringBuffer = new Utf8StringBuffer();
    localUtf8StringBuffer.append(paramArrayOfByte, 0, paramArrayOfByte.length);
    return localUtf8StringBuffer.toString();
    return "";
  }
  
  public static int intFromBytes(byte[] paramArrayOfByte)
  {
    return ((paramArrayOfByte[3] & 0xFF) << 24) + ((paramArrayOfByte[2] & 0xFF) << 16) + ((paramArrayOfByte[1] & 0xFF) << 8) + (paramArrayOfByte[0] & 0xFF);
  }
  
  public static boolean isSupportUtf8()
  {
    try
    {
      new String(new byte[] { 50, 51 }, "utf-8");
      return true;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException) {}
    return false;
  }
  
  public static void readDataFromStream(InputStream paramInputStream, byte[] paramArrayOfByte)
    throws IOException
  {
    int i = 0;
    int j = paramArrayOfByte.length;
    for (;;)
    {
      int k = paramInputStream.read(paramArrayOfByte, i, j);
      j -= k;
      if (j == 0) {
        return;
      }
      i += k;
    }
  }
  
  public static int shortIntFromBytes(byte[] paramArrayOfByte)
  {
    return ((paramArrayOfByte[1] & 0xFF) << 8) + (paramArrayOfByte[0] & 0xFF);
  }
  
  public Table getTable(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < this.tables.size())) {
      return (Table)this.tables.elementAt(paramInt);
    }
    return null;
  }
  
  public Table getTableByName(String paramString)
  {
    int i = 0;
    while (i < this.tables.size())
    {
      Table localTable = (Table)this.tables.elementAt(i);
      if (localTable.name.equals(paramString)) {
        return localTable;
      }
      i += 1;
    }
    return null;
  }
  
  public void loadFrom(InputStream paramInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[4];
    readDataFromStream(paramInputStream, arrayOfByte);
    this.Version = paramInputStream.read();
    long l1 = 0L + 4L + 1L;
    Table localTable = null;
    for (;;)
    {
      long l2 = paramInputStream.read();
      if (l2 == -1L) {
        break;
      }
      long l3 = l1 + 1L;
      int i;
      if (l2 == 9L)
      {
        i = paramInputStream.read();
        arrayOfByte = new byte[i];
        readDataFromStream(paramInputStream, arrayOfByte);
        l1 = l3 + 1L + i;
        localTable = new Table(getUtf8String(arrayOfByte), this.loadAllDataInMemory, this.path);
        this.tables.addElement(localTable);
      }
      else
      {
        int j;
        if (l2 == 10L)
        {
          i = paramInputStream.read();
          j = paramInputStream.read();
          arrayOfByte = new byte[j];
          readDataFromStream(paramInputStream, arrayOfByte);
          l1 = l3 + 1L + 1L + j;
          localTable.addField(new Field(i, getUtf8String(arrayOfByte)));
        }
        else
        {
          l1 = l3;
          if (l2 == 11L)
          {
            Row localRow = localTable.createRow();
            i = 0;
            l1 = l3;
            l2 = l1;
            if (i < localRow.fieldsCount())
            {
              j = localRow.getFieldType(i);
              Object localObject;
              if (j == Field.SMALL_INT)
              {
                localObject = new Integer(paramInputStream.read());
                l1 = l2 + 1L;
                localRow.setValue(i, localObject);
              }
              for (;;)
              {
                i += 1;
                break;
                if (j == Field.SHORT_INT)
                {
                  localObject = new byte[2];
                  readDataFromStream(paramInputStream, (byte[])localObject);
                  l1 = l2 + 2L;
                  localRow.setValue(i, new Integer(shortIntFromBytes((byte[])localObject)));
                }
                else if (j == Field.INT)
                {
                  localObject = new byte[4];
                  readDataFromStream(paramInputStream, (byte[])localObject);
                  l1 = l2 + 4L;
                  localRow.setValue(i, new Integer(intFromBytes((byte[])localObject)));
                }
                else if (j == Field.TIME)
                {
                  localObject = new byte[4];
                  readDataFromStream(paramInputStream, (byte[])localObject);
                  l1 = l2 + 4L;
                  localRow.setValue(i, new Integer(intFromBytes((byte[])localObject)));
                }
                else if (j == Field.NAME)
                {
                  j = paramInputStream.read();
                  localObject = new byte[j];
                  readDataFromStream(paramInputStream, (byte[])localObject);
                  l1 = l2 + 1L + j;
                  localRow.setValue(i, getUtf8String((byte[])localObject));
                }
                else if (j == Field.TEXT)
                {
                  localObject = new byte[2];
                  readDataFromStream(paramInputStream, (byte[])localObject);
                  j = shortIntFromBytes((byte[])localObject);
                  localObject = new byte[j];
                  readDataFromStream(paramInputStream, (byte[])localObject);
                  l1 = l2 + 2L + j;
                  localRow.setValue(i, getUtf8String((byte[])localObject));
                }
                else
                {
                  l1 = l2;
                  if (j == Field.BINARY)
                  {
                    localObject = new byte[4];
                    readDataFromStream(paramInputStream, (byte[])localObject);
                    j = intFromBytes((byte[])localObject);
                    localObject = new byte[j];
                    readDataFromStream(paramInputStream, arrayOfByte);
                    l1 = l2 + 4L + j;
                    localRow.setValue(i, localObject);
                  }
                }
              }
            }
            if (this.loadAllDataInMemory)
            {
              localTable.addRow(localRow);
              l1 = l2;
            }
            else
            {
              if (localTable.getOffset() == -1L) {
                localTable.setOffset(l3);
              }
              localTable.addRow();
              l1 = l2;
            }
          }
        }
      }
    }
    paramInputStream.close();
  }
  
  public void loadFrom(String paramString)
    throws IOException
  {
    this.loadAllDataInMemory = true;
    this.path = paramString;
    loadFrom(getClass().getResourceAsStream(paramString));
  }
  
  public void loadFrom(String paramString, boolean paramBoolean)
    throws IOException
  {
    this.loadAllDataInMemory = paramBoolean;
    this.path = paramString;
    loadFrom(getClass().getResourceAsStream(paramString));
  }
  
  public void optimize()
  {
    int i = 0;
    while (i < this.tables.size())
    {
      ((Table)this.tables.elementAt(i)).optimize();
      i += 1;
    }
    System.gc();
  }
  
  public int tablesCount()
  {
    return this.tables.size();
  }
}
