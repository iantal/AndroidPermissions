package org.meteoroid.core;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Message;
import android.os.Process;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.Display;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Toast;
import com.a.a.e.b;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Timer;

public final class k
{
  public static final String LOG_TAG = "SystemManager";
  public static final int MSG_SYSTEM_ACTIVITY_RESULT = 47880;
  public static final int MSG_SYSTEM_DEVICE_INIT_COMPLETE = 47878;
  public static final int MSG_SYSTEM_EXIT = 47875;
  public static final int MSG_SYSTEM_FEATURE_ADDED_COMPLETE = 47876;
  public static final int MSG_SYSTEM_FUNCTION_REQUEST = 47882;
  public static final int MSG_SYSTEM_GRAPHICS_INIT_COMPLETE = 47877;
  public static final int MSG_SYSTEM_INIT_COMPLETE = 47872;
  public static final int MSG_SYSTEM_LOG_APPENDER = 47886;
  public static final int MSG_SYSTEM_LOG_EVENT = 47887;
  public static final int MSG_SYSTEM_NOTIFY_EXIT = 47881;
  public static final int MSG_SYSTEM_ONLINE_PARAM = 47885;
  public static final int MSG_SYSTEM_ON_PAUSE = 47873;
  public static final int MSG_SYSTEM_ON_RESUME = 47874;
  public static final int MSG_SYSTEM_VD_INIT_COMPLETE = 47879;
  private static Handler handler;
  private static Activity ir;
  private static int is = 0;
  public static boolean it = false;
  private static boolean iu = false;
  private static final Timer iv = new Timer();
  
  protected static void a(Activity paramActivity)
  {
    ir = paramActivity;
    h.b(47872, "MSG_SYSTEM_INIT_COMPLETE");
    h.b(47873, "MSG_SYSTEM_ON_PAUSE");
    h.b(47876, "MSG_SYSTEM_FEATURE_ADDED_COMPLETE");
    h.b(47877, "MSG_SYSTEM_GRAPHICS_INIT_COMPLETE");
    h.b(47878, "MSG_SYSTEM_DEVICE_INIT_COMPLETE");
    h.b(47879, "MSG_SYSTEM_VD_INIT_COMPLETE");
    h.b(47873, "MSG_SYSTEM_ON_PAUSE");
    h.b(47874, "MSG_SYSTEM_ON_RESUME");
    h.b(47882, "MSG_SYSTEM_FUNCTION_REQUEST");
    h.b(47875, "MSG_SYSTEM_EXIT");
    h.b(47880, "MSG_SYSTEM_ACTIVITY_RESULT");
    h.b(47887, "MSG_SYSTEM_LOG_EVENT");
    h.b(47881, "MSG_SYSTEM_NOTIFY_EXIT");
    Properties localProperties = new Properties();
    for (;;)
    {
      try
      {
        localProperties.load(paramActivity.getResources().openRawResource(b.H("globe")));
        handler = new Handler();
        aJ();
        if (localProperties.containsKey("ThrowIOExceptions")) {
          it = Boolean.parseBoolean(localProperties.getProperty("ThrowIOExceptions"));
        }
        if (localProperties.containsKey("DontQuit")) {
          l.iC = Boolean.parseBoolean(localProperties.getProperty("DontQuit"));
        }
        if (!localProperties.containsKey("DisableWakeLock")) {
          paramActivity.getWindow().setFlags(128, 128);
        }
        h.ar();
        e.a(paramActivity);
        d.ar();
        if (!localProperties.containsKey("feature")) {
          break;
        }
        String[] arrayOfString = localProperties.getProperty("feature").split("\\}");
        int i = 0;
        if (i >= arrayOfString.length) {
          break;
        }
        int j = arrayOfString[i].indexOf("{");
        if (j != -1)
        {
          d.g(arrayOfString[i].trim().substring(0, j), arrayOfString[i].trim().substring(j + 1));
          new StringBuilder().append(arrayOfString[i]).append(" has been added.").toString();
          i += 1;
        }
        else
        {
          Log.w("SystemManager", "Failed to create feature:" + arrayOfString[i]);
        }
      }
      catch (Exception paramActivity)
      {
        Log.e("SystemManager", "Load globe.properties error." + paramActivity);
        return;
      }
    }
    h.x(47876);
    a.ar();
    f.a(paramActivity);
    if (localProperties.containsKey("VolumeMode")) {
      g.s(Integer.parseInt(localProperties.getProperty("VolumeMode")));
    }
    g.a(paramActivity);
    l.a(paramActivity);
    i.ar();
    c.u(localProperties.getProperty("device"));
    h.x(47878);
    h.x(47879);
    if (localProperties.containsKey("AdaptiveVirtualDevice")) {
      m.iL = Boolean.parseBoolean(localProperties.getProperty("AdaptiveVirtualDevice"));
    }
    m.z(localProperties.getProperty("virtualdevice"));
    localProperties.clear();
    System.gc();
    h.a(new h.a()
    {
      public final boolean a(Message paramAnonymousMessage)
      {
        if (paramAnonymousMessage.what == 47875) {
          k.aE();
        }
        do
        {
          return true;
          if (paramAnonymousMessage.what != 47881) {
            break;
          }
        } while (k.aS());
        l.a(k.getString(2131034123), k.getString(2131034127), k.getString(2131034125), new DialogInterface.OnClickListener()
        {
          public final void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            k.aF();
            k.c(false);
          }
        }, k.getString(2131034124), new DialogInterface.OnClickListener()
        {
          public final void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymous2DialogInterface.dismiss();
            k.resume();
            k.c(false);
          }
        }, true, new DialogInterface.OnCancelListener()
        {
          public final void onCancel(DialogInterface paramAnonymous2DialogInterface)
          {
            paramAnonymous2DialogInterface.dismiss();
            k.resume();
            k.c(false);
          }
        });
        k.c(true);
        k.pause();
        return true;
        if (paramAnonymousMessage.what == 47882) {
          return k.x((String)paramAnonymousMessage.obj);
        }
        return false;
      }
    });
    h.b(h.a(47887, new String[] { "Launch", ir.getString(2131034112) }));
  }
  
  public static void a(String paramString, final int paramInt)
  {
    handler.post(new Runnable()
    {
      public final void run()
      {
        Toast.makeText(k.aT(), this.gz, paramInt).show();
      }
    });
  }
  
  public static void aD()
  {
    is = 0;
    h.b(h.a(47874, null));
  }
  
  protected static void aE()
  {
    h.aC();
    iv.cancel();
    iv.purge();
    a.onDestroy();
    i.onDestroy();
    e.onDestroy();
    f.onDestroy();
    g.onDestroy();
    l.onDestroy();
    if (c.hv != null) {
      c.hv.onDestroy();
    }
    m.onDestroy();
    d.onDestroy();
    h.onDestroy();
    ir.finish();
    System.gc();
    System.exit(0);
    Process.killProcess(Process.myPid());
  }
  
  public static void aF()
  {
    h.b(h.a(47875, null));
  }
  
  public static String aG()
  {
    return ir.getString(2131034112);
  }
  
  public static void aH()
  {
    h.x(47881);
  }
  
  public static InputMethodManager aI()
  {
    return (InputMethodManager)ir.getSystemService("input_method");
  }
  
  public static void aJ()
  {
    Object localObject = ((ActivityManager)ir.getSystemService("activity")).getRunningAppProcesses();
    int i = Process.myPid();
    localObject = ((List)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)((Iterator)localObject).next();
      if ((localRunningAppProcessInfo.pid != i) && (localRunningAppProcessInfo.importance > 300))
      {
        Process.killProcess(localRunningAppProcessInfo.pid);
        new StringBuilder("Kill background process:").append(localRunningAppProcessInfo.processName).append(" pid:").append(localRunningAppProcessInfo.pid).toString();
      }
    }
  }
  
  public static int aK()
  {
    return ir.getWindowManager().getDefaultDisplay().getWidth();
  }
  
  public static int aL()
  {
    return ir.getWindowManager().getDefaultDisplay().getHeight();
  }
  
  public static int aM()
  {
    return ir.getResources().getConfiguration().orientation;
  }
  
  public static Timer aN()
  {
    return iv;
  }
  
  public static int aO()
  {
    try
    {
      int i = Integer.valueOf(Build.VERSION.SDK).intValue();
      return i;
    }
    catch (NumberFormatException localNumberFormatException) {}
    return 4;
  }
  
  public static String aP()
  {
    return Build.MODEL;
  }
  
  public static String aQ()
  {
    return Build.MANUFACTURER;
  }
  
  public static String aR()
  {
    Object localObject1 = Settings.Secure.getString(ir.getContentResolver(), "android_id");
    if (!"9774d56d682e549c".equals(localObject1)) {}
    for (;;)
    {
      try
      {
        Object localObject2 = Class.forName("android.os.SystemProperties");
        localObject2 = (String)((Class)localObject2).getMethod("get", new Class[] { String.class }).invoke(localObject2, new Object[] { "ro.serialno" });
        localObject1 = localObject2;
        new StringBuilder("androidId=").append((String)localObject1).toString();
        return localObject1;
      }
      catch (Exception localException) {}
    }
  }
  
  public static Activity getActivity()
  {
    return ir;
  }
  
  private static ConnectivityManager getConnectivityManager()
  {
    return (ConnectivityManager)ir.getSystemService("connectivity");
  }
  
  public static Handler getHandler()
  {
    return handler;
  }
  
  public static String getString(int paramInt)
  {
    return ir.getString(paramInt);
  }
  
  public static TelephonyManager getTelephonyManager()
  {
    return (TelephonyManager)ir.getSystemService("phone");
  }
  
  public static final boolean isConnect()
  {
    return (isWifiEnable()) || (isDataConnectionEnable());
  }
  
  private static boolean isDataConnectionEnable()
  {
    bool1 = true;
    if (ir.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") != 0) {
      return true;
    }
    for (;;)
    {
      try
      {
        boolean bool2 = getConnectivityManager().getNetworkInfo(0).isConnectedOrConnecting();
        if (bool2 != true) {
          continue;
        }
      }
      catch (Exception localException)
      {
        int i;
        Log.w("SystemManager", localException);
        bool1 = false;
        continue;
      }
      new StringBuilder("DataConnect state: ").append(bool1).toString();
      return bool1;
      i = getTelephonyManager().getDataState();
      if (i != 2) {
        bool1 = false;
      }
    }
  }
  
  private static boolean isWifiEnable()
  {
    bool1 = true;
    if (ir.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") != 0) {
      return true;
    }
    try
    {
      boolean bool2 = getConnectivityManager().getNetworkInfo(1).isConnected();
      if (bool2 != true) {
        break label60;
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Log.w("SystemManager", localException);
        bool1 = false;
      }
    }
    new StringBuilder("Wifi state: ").append(bool1).toString();
    return bool1;
  }
  
  public static boolean launchExternalApplication(String paramString)
  {
    Object localObject1 = ir.getPackageManager();
    try
    {
      Object localObject2 = ((PackageManager)localObject1).getPackageInfo(paramString, 0);
      Intent localIntent = new Intent("android.intent.action.MAIN", null);
      localIntent.addCategory("android.intent.category.LAUNCHER");
      localIntent.setPackage(((PackageInfo)localObject2).packageName);
      localObject1 = (ResolveInfo)((PackageManager)localObject1).queryIntentActivities(localIntent, 0).iterator().next();
      if (localObject1 != null)
      {
        localObject1 = ((ResolveInfo)localObject1).activityInfo.name;
        localObject2 = new Intent("android.intent.action.MAIN");
        ((Intent)localObject2).addCategory("android.intent.category.LAUNCHER");
        ((Intent)localObject2).setComponent(new ComponentName(paramString, (String)localObject1));
        ir.startActivity((Intent)localObject2);
      }
      return true;
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      paramString.printStackTrace();
    }
    return false;
  }
  
  public static void pause()
  {
    int i = is + 1;
    is = i;
    if (i == 1)
    {
      h.b(h.a(47873, null));
      return;
    }
    Log.w("SystemManager", "The system has already paused." + is);
  }
  
  public static void resume()
  {
    int i = is - 1;
    is = i;
    if (i == 0) {
      h.b(h.a(47874, null));
    }
    for (;;)
    {
      if (is <= 0) {
        is = 0;
      }
      return;
      Log.w("SystemManager", "The system do not need resumed." + is);
    }
  }
  
  public static final InputStream v(String paramString)
  {
    Object localObject1 = null;
    try
    {
      localObject2 = ir.getAssets().open(paramString);
      localObject1 = localObject2;
    }
    catch (Exception localException)
    {
      do
      {
        Object localObject2;
        Log.w("SystemManager", "Can't load resource:" + paramString + " is not exist.");
      } while (!it);
      throw new IOException();
    }
    localObject2 = new StringBuilder("Load assert ").append(paramString);
    if (localObject1 != null) {}
    for (paramString = " success.";; paramString = " failed.")
    {
      ((StringBuilder)localObject2).append(paramString).toString();
      return localObject1;
    }
  }
  
  public static boolean w(String paramString)
  {
    h.b(h.a(47882, paramString));
    return true;
  }
  
  public static boolean x(String paramString)
  {
    if ((paramString.startsWith("http://")) || (paramString.startsWith("market://")))
    {
      handler.post(new Runnable()
      {
        public final void run()
        {
          Intent localIntent = new Intent("android.intent.action.VIEW", Uri.parse(this.ix));
          k.aT().startActivity(localIntent);
        }
      });
      return true;
    }
    if (paramString.startsWith("tel:"))
    {
      handler.post(new Runnable()
      {
        public final void run()
        {
          Intent localIntent = new Intent("android.intent.action.DIAL", Uri.parse(this.ix));
          k.aT().startActivity(localIntent);
        }
      });
      return true;
    }
    Log.w("SystemManager", "Not supported " + paramString);
    return false;
  }
  
  public static boolean y(String paramString)
  {
    PackageManager localPackageManager = ir.getPackageManager();
    try
    {
      paramString = localPackageManager.getApplicationInfo(paramString, 0);
      return paramString != null;
    }
    catch (PackageManager.NameNotFoundException paramString) {}
    return false;
  }
  
  public static void z(int paramInt)
  {
    ir.setRequestedOrientation(paramInt);
  }
}
