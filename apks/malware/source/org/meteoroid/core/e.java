package org.meteoroid.core;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.ViewGroup.LayoutParams;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.concurrent.ConcurrentLinkedQueue;

public final class e
  implements SurfaceHolder.Callback
{
  public static final String LOG_TAG = "GraphicsManager";
  private static SurfaceHolder hA;
  private static final Rect hB = new Rect(-1, -1, -1, -1);
  private static final ConcurrentLinkedQueue<a> hD = new ConcurrentLinkedQueue();
  public static SurfaceView hx;
  public static final e hy = new e();
  private static boolean hz = false;
  private boolean hC;
  
  public e() {}
  
  protected static void a(Activity paramActivity)
  {
    paramActivity = new SurfaceView(paramActivity);
    hx = paramActivity;
    paramActivity.setId(268049792);
    hx.setFocusable(true);
    hx.setFocusableInTouchMode(true);
    hx.setLongClickable(true);
    hx.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    hA = hx.getHolder();
    f.a(hx);
    hA.addCallback(hy);
    try
    {
      hA.setType(1);
      return;
    }
    catch (Exception paramActivity)
    {
      try
      {
        hA.setType(2);
        return;
      }
      catch (Exception paramActivity)
      {
        hA.setType(0);
      }
    }
  }
  
  public static final void a(a paramA)
  {
    hD.add(paramA);
  }
  
  protected static final void au()
  {
    if (!hy.hC) {}
    synchronized (hx)
    {
      try
      {
        hx.wait();
        if (hA == null) {
          hA = hx.getHolder();
        }
        synchronized (hA)
        {
          Canvas localCanvas1 = hA.lockCanvas();
          if (localCanvas1 == null) {
            break label124;
          }
          localCanvas1.drawColor(-16777216);
          Iterator localIterator = hD.iterator();
          if (localIterator.hasNext()) {
            ((a)localIterator.next()).onDraw(localCanvas1);
          }
        }
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          localInterruptedException.printStackTrace();
        }
      }
    }
    hA.unlockCanvasAndPost(localCanvas2);
    label124:
  }
  
  public static Bitmap b(InputStream paramInputStream)
  {
    if (paramInputStream == null) {
      return null;
    }
    try
    {
      paramInputStream = BitmapFactory.decodeStream(paramInputStream);
      return paramInputStream;
    }
    catch (Exception paramInputStream)
    {
      Log.w("GraphicsManager", "createBitmap with InputStream error." + paramInputStream);
      throw new IOException();
    }
  }
  
  public static final void b(a paramA)
  {
    hD.remove(paramA);
  }
  
  protected static void onDestroy()
  {
    hy.hC = false;
    hA.removeCallback(hy);
    f.b(hx);
  }
  
  public final void surfaceChanged(SurfaceHolder arg1, int paramInt1, int paramInt2, int paramInt3)
  {
    hy.hC = true;
    synchronized (hx)
    {
      hx.notifyAll();
      return;
    }
  }
  
  public final void surfaceCreated(SurfaceHolder arg1)
  {
    hy.hC = true;
    synchronized (hx)
    {
      hx.notifyAll();
      return;
    }
  }
  
  public final void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
  {
    hy.hC = false;
  }
  
  public static abstract interface a
  {
    public abstract void onDraw(Canvas paramCanvas);
  }
}
