package org.meteoroid.core;

import android.app.Activity;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Message;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Iterator;

public final class g
{
  public static final String LOG_TAG = "MediaManager";
  public static final String MEDIA_TEMP_FILE = "temp";
  public static final int VOLUME_CONTROL_BY_CLIP = -1;
  public static final int VOLUME_CONTROL_BY_DEVICE = -2;
  private static final g hN = new g();
  private static int hO = -1;
  private static String hP;
  private static int hQ = 15;
  private static int hR;
  private static float hS;
  private static AudioManager hT;
  private static final HashSet<a> hU = new HashSet();
  private static int hV = 0;
  private static int hW;
  private static int hX = 0;
  private static int hY = 0;
  
  public g() {}
  
  public static a a(String paramString1, InputStream paramInputStream, String paramString2)
  {
    if (paramInputStream == null) {
      return null;
    }
    hV += 1;
    paramString1 = hN;
    paramString1.getClass();
    a localA = new a();
    paramString1 = "";
    if (paramString2.indexOf("mid") != -1) {
      paramString1 = ".mid";
    }
    for (;;)
    {
      localA.name = null;
      localA.type = paramString2;
      localA.hZ = (hV + paramString1);
      paramString1 = k.getActivity().openFileOutput(localA.hZ, 1);
      byte[] arrayOfByte = new byte['Ä€'];
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte);
        if (i <= 0) {
          break;
        }
        paramString1.write(arrayOfByte, 0, i);
      }
      if (paramString2.indexOf("mpeg") != -1) {
        paramString1 = ".mp3";
      } else if (paramString2.indexOf("amr") != -1) {
        paramString1 = ".amr";
      }
    }
    paramString1.flush();
    paramString1.close();
    localA.ic = new MediaPlayer();
    localA.hZ = (hP + localA.hZ);
    hU.add(localA);
    new StringBuilder("Create a media clip ").append(null).append(" [").append(paramString2).append("].").toString();
    return localA;
  }
  
  protected static void a(Activity paramActivity)
  {
    hP = paramActivity.getFilesDir().getAbsolutePath() + File.separator;
    paramActivity = (AudioManager)paramActivity.getSystemService("audio");
    hT = paramActivity;
    hQ = paramActivity.getStreamMaxVolume(3);
    new StringBuilder("Max volume is").append(hQ).toString();
    hS = hQ / 100.0F;
    new StringBuilder("VOLUME_TRANS_RATIO is").append(hS).toString();
    hR = ay();
    new StringBuilder("Init volume is").append(hR).toString();
    h.a(new h.a()
    {
      public final boolean a(Message paramAnonymousMessage)
      {
        g.a localA;
        if (paramAnonymousMessage.what == 47873)
        {
          paramAnonymousMessage = g.az().iterator();
          while (paramAnonymousMessage.hasNext())
          {
            localA = (g.a)paramAnonymousMessage.next();
            if ((localA.ic != null) && (localA.ic.isPlaying()) && (localA.ia))
            {
              localA.ic.pause();
              new StringBuilder("force to pause:").append(localA.name).toString();
            }
          }
          g.v(g.ay());
          new StringBuilder("Pause volume is").append(g.aA()).toString();
          g.w(g.aB());
        }
        for (;;)
        {
          return false;
          if (paramAnonymousMessage.what == 47874)
          {
            g.w(g.aA());
            paramAnonymousMessage = g.az().iterator();
            while (paramAnonymousMessage.hasNext())
            {
              localA = (g.a)paramAnonymousMessage.next();
              if ((localA.ic != null) && (localA.ia) && (!localA.ic.isPlaying()))
              {
                localA.ic.start();
                new StringBuilder("force to resume:").append(localA.name).toString();
              }
            }
          }
        }
      }
    });
    if (hO == -2) {
      u(70);
    }
  }
  
  public static int ay()
  {
    new StringBuilder("Current volume is:").append(hT.getStreamVolume(3)).toString();
    return (int)(hT.getStreamVolume(3) / hS);
  }
  
  public static void b(boolean paramBoolean)
  {
    new StringBuilder("Mute works:").append(paramBoolean).toString();
    if (paramBoolean)
    {
      hX = ay();
      t(0);
    }
    while (hX == 0) {
      return;
    }
    t(hX);
  }
  
  protected static void onDestroy()
  {
    Iterator localIterator = hU.iterator();
    while (localIterator.hasNext())
    {
      a localA = (a)localIterator.next();
      if (localA.ic != null) {
        localA.ic.release();
      }
      localA.ic = null;
    }
    hU.clear();
    u(hR);
  }
  
  public static void s(int paramInt)
  {
    hO = paramInt;
  }
  
  private static void t(int paramInt)
  {
    if (hO == -1) {
      u(paramInt);
    }
    while (hO != -2) {
      return;
    }
    if (paramInt == 0)
    {
      hW = ay();
      u(0);
    }
    for (;;)
    {
      new StringBuilder("Failed to set volume because the globe volume mode is control by device.").append(hW).toString();
      return;
      if (hW != 0)
      {
        u(hW);
        hW = 0;
      }
    }
  }
  
  private static void u(int paramInt)
  {
    new StringBuilder("Set device volume to ").append(paramInt).toString();
    hT.setStreamVolume(3, (int)(paramInt * hS), 16);
  }
  
  public final class a
  {
    public String hZ;
    public boolean ia;
    public int ib;
    public MediaPlayer ic;
    public String name;
    public String type;
    
    public a() {}
  }
}
