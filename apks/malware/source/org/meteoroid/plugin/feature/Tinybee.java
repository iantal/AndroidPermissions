package org.meteoroid.plugin.feature;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Message;
import android.telephony.TelephonyManager;
import com.a.a.d.b;
import com.a.a.e.a;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import me.gall.tinybee.Logger;
import me.gall.tinybee.Logger.OnlineParamCallback;
import me.gall.tinybee.LoggerManager;
import org.meteoroid.core.h;
import org.meteoroid.core.h.a;
import org.meteoroid.core.j;
import org.meteoroid.core.j.a;
import org.meteoroid.core.k;

public class Tinybee
  implements b, Logger.OnlineParamCallback, h.a
{
  private static final long DISABLE = 0L;
  private String appId;
  private String kA = "";
  private String kB;
  private String kC;
  private String kD;
  private Logger kE;
  private Logger kF;
  private long kG = 0L;
  private String kz = "";
  private Logger logger;
  
  public Tinybee() {}
  
  public final void B(String paramString)
  {
    boolean bool = false;
    paramString = new a(paramString);
    Object localObject = paramString.D("COLLECTINFO");
    if (localObject != null) {
      this.kG = (Long.parseLong((String)localObject) * 1000L * 60L * 60L * 24L);
    }
    if (this.kG != 0L)
    {
      long l1 = System.currentTimeMillis();
      localObject = j.y(0).getSharedPreferences();
      long l2 = ((SharedPreferences)localObject).getLong("LastDay", 0L);
      if ((l2 == 0L) || (l1 - l2 >= this.kG))
      {
        ((SharedPreferences)localObject).edit().putLong("LastDay", l1).commit();
        new Thread()
        {
          public final void run()
          {
            StringBuffer localStringBuffer = new StringBuffer();
            try
            {
              localObject = k.getTelephonyManager().getDeviceId();
              localStringBuffer.append((String)localObject + "=");
              localStringBuffer.append(k.aQ() + "=");
              localStringBuffer.append(k.aP() + "=");
              localObject = k.getActivity().getPackageManager().getInstalledApplications(128).iterator();
              while (((Iterator)localObject).hasNext())
              {
                ApplicationInfo localApplicationInfo = (ApplicationInfo)((Iterator)localObject).next();
                if ((!localApplicationInfo.packageName.startsWith("com.google")) && (!localApplicationInfo.packageName.startsWith("com.android"))) {
                  localStringBuffer.append(localApplicationInfo.packageName + ",");
                }
              }
            }
            catch (Exception localException)
            {
              for (;;)
              {
                localObject = k.aR();
                localException.printStackTrace();
              }
              Object localObject = new HashMap();
              ((HashMap)localObject).put("value", localStringBuffer.toString());
              Tinybee.a(Tinybee.this).send("CollectAppInfo", (Map)localObject);
            }
          }
        }.start();
        getClass().getSimpleName();
      }
    }
    localObject = paramString.D("APP_ID");
    if (localObject != null) {
      this.appId = ((String)localObject);
    }
    localObject = paramString.D("CHANNEL_ID");
    if (localObject != null) {
      this.kz = ((String)localObject);
    }
    localObject = paramString.D("CHANNEL_NAME");
    if (localObject != null) {
      this.kA = ((String)localObject);
    }
    paramString = paramString.D("TEST");
    if (paramString != null) {
      bool = Boolean.parseBoolean(paramString);
    }
    this.kF = LoggerManager.getLogger(k.getActivity(), this.appId, this.kz, this.kA, bool);
    this.kF.setOnlineParamCallback(this);
    this.logger = this.kF;
    h.a(this);
  }
  
  public final boolean a(Message paramMessage)
  {
    int i = 1;
    label27:
    String[] arrayOfString;
    if (paramMessage.what == 40960)
    {
      this.logger.onPause((Context)paramMessage.obj);
    }
    else
    {
      do
      {
        do
        {
          return false;
          if (paramMessage.what == 40961)
          {
            this.logger.onResume((Context)paramMessage.obj);
            return false;
          }
          if (paramMessage.what != 47886) {
            break;
          }
        } while (paramMessage.obj == null);
        if ((paramMessage.obj instanceof String))
        {
          this.kB = ((String)paramMessage.obj);
          this.kE = LoggerManager.getLogger(k.getActivity(), this.kB);
        }
        for (;;)
        {
          this.logger = this.kE;
          return false;
          if ((paramMessage.obj instanceof String[]))
          {
            paramMessage = (String[])paramMessage.obj;
            if (paramMessage.length == 3)
            {
              this.kB = paramMessage[0];
              this.kC = paramMessage[1];
              this.kD = paramMessage[2];
            }
            this.kE = LoggerManager.getLogger(k.getActivity(), this.kB, this.kC, this.kD);
          }
        }
      } while ((paramMessage.what != 47887) || (!(paramMessage.obj instanceof String[])));
      arrayOfString = (String[])paramMessage.obj;
      if (arrayOfString.length != 1) {
        break label253;
      }
      this.logger.send(arrayOfString[0]);
    }
    label232:
    if (this.logger == this.kE)
    {
      this.logger = this.kF;
      return false;
      label253:
      if (arrayOfString.length != 2) {
        break label293;
      }
      paramMessage = new HashMap();
      paramMessage.put("value", arrayOfString[1]);
    }
    for (;;)
    {
      this.logger.send(arrayOfString[0], paramMessage);
      break label232;
      break label27;
      label293:
      if (arrayOfString.length <= 2) {
        break;
      }
      paramMessage = new HashMap();
      while (i < arrayOfString.length)
      {
        if (i + 1 < arrayOfString.length) {
          paramMessage.put(arrayOfString[i], arrayOfString[(i + 1)]);
        }
        i += 2;
      }
    }
  }
  
  public final String getName()
  {
    return getClass().getSimpleName();
  }
  
  public final void onDestroy()
  {
    this.kF.finish();
  }
  
  public void requestComplete(Map<String, String> paramMap)
  {
    getClass().getSimpleName();
    if ((paramMap != null) && (!paramMap.isEmpty()))
    {
      getClass().getSimpleName();
      new StringBuilder("requestComplete online param size=").append(paramMap.size()).toString();
      h.b(47885, paramMap);
    }
  }
  
  public void requestError()
  {
    getClass().getSimpleName();
  }
}
