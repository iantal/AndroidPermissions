package org.meteoroid.plugin.feature;

import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Message;
import android.text.format.Time;
import android.util.Log;
import java.util.Timer;
import java.util.TimerTask;
import org.meteoroid.core.j;
import org.meteoroid.core.j.a;
import org.meteoroid.core.k;

public abstract class AbstractTrialActivation
  extends AbstractPaymentManager
{
  public static final int LAUNCH_LIMIT = 1;
  public static final int TIME_LIMIT = 0;
  private int kh = 60000;
  private int ki = 0;
  private int kj;
  private boolean kk;
  private boolean kl;
  private boolean km;
  private int kn;
  private boolean ko = false;
  private int mode = 0;
  
  public AbstractTrialActivation() {}
  
  private boolean bq()
  {
    boolean bool2 = true;
    boolean bool1;
    if (this.mode == 0) {
      bool1 = j.y(0).getSharedPreferences().getBoolean("trial", false);
    }
    do
    {
      do
      {
        return bool1;
        bool1 = bool2;
      } while (this.mode != 1);
      bool1 = bool2;
    } while (this.kj >= this.ki);
    return false;
  }
  
  private void bs()
  {
    k.aN().schedule(new TimerTask()
    {
      public final void run()
      {
        j.y(0).getEditor().putBoolean("trial", true).commit();
        if (!AbstractTrialActivation.this.br()) {
          AbstractTrialActivation.this.bt();
        }
      }
    }, this.kh);
  }
  
  public static void d(boolean paramBoolean)
  {
    j.y(0).getEditor().putBoolean("actived", paramBoolean).commit();
  }
  
  public void B(String paramString)
  {
    boolean bool = true;
    super.B(paramString);
    paramString = C("EXPIRED");
    if (paramString != null)
    {
      this.kh = (Integer.parseInt(paramString) * 1000);
      this.mode = 0;
    }
    paramString = C("LAUNCH");
    if (paramString != null)
    {
      this.ki = Integer.parseInt(paramString);
      this.mode = 1;
    }
    paramString = C("MULTI");
    if (paramString != null) {
      this.kk = Boolean.parseBoolean(paramString);
    }
    paramString = C("IGNORE");
    if (paramString != null) {
      this.kn = (Integer.parseInt(paramString) * 1000);
    }
    if (this.mode == 1)
    {
      this.kj = j.y(0).getSharedPreferences().getInt("launch", 0);
      j.y(0).getEditor().putInt("launch", this.kj + 1).commit();
      getName();
      new StringBuilder("CurrentLaunchTime is ").append(this.kj).toString();
    }
    this.kl = j.y(0).getSharedPreferences().getBoolean("nomore", false);
    getName();
    new StringBuilder("NoMoreActivation is ").append(this.kl).toString();
    paramString = C("START");
    int i;
    if (paramString != null)
    {
      if (paramString.length() != 8) {
        break label443;
      }
      i = Integer.parseInt(paramString.substring(0, 4));
      int j = Integer.parseInt(paramString.substring(4, 6));
      int k = Integer.parseInt(paramString.substring(6, 8));
      paramString = new Time("GMT+8");
      paramString.setToNow();
      new StringBuilder("Current date is ").append(paramString.year).append("-").append(paramString.month + 1).append("-").append(paramString.monthDay).append(" and target time is ").append(i).append("-").append(j).append("-").append(k).toString();
      if ((i <= paramString.year) && ((i != paramString.year) || (j <= paramString.month + 1)) && ((i != paramString.year) || (j != paramString.month + 1) || (k <= paramString.monthDay))) {
        break label432;
      }
      i = 0;
      if (i != 0) {
        break label437;
      }
    }
    for (;;)
    {
      this.km = bool;
      return;
      label432:
      i = 1;
      break;
      label437:
      bool = false;
    }
    label443:
    Log.w(getName(), "Not valid start date:" + paramString);
  }
  
  public final boolean a(Message paramMessage)
  {
    boolean bool = false;
    if (this.km) {
      bool = super.a(paramMessage);
    }
    do
    {
      return bool;
      if ((paramMessage.what != 47872) || (this.ko)) {
        break label276;
      }
      this.ko = true;
      getName();
      new StringBuilder("IsTrialEnded is ").append(bq()).toString();
      if (!bq()) {
        break label221;
      }
      getName();
      new StringBuilder("IgnoreBlockAtStart is ").append(this.kn).toString();
      if (this.kn == 0) {
        break;
      }
      this.kh = this.kn;
      if (this.mode == 0) {
        try
        {
          bs();
          getName();
          new StringBuilder("startActivationCounter...in ").append(this.kh).toString();
          return false;
        }
        catch (Exception paramMessage)
        {
          Log.w(getName(), paramMessage);
          return false;
        }
      }
    } while (this.mode != 1);
    Log.w(getName(), "IgnoreBlockAtStart would cause activation based on launch time not work.");
    k.aF();
    return false;
    getName();
    new StringBuilder("HasActived is ").append(br()).toString();
    if (!br())
    {
      bt();
      return true;
      label221:
      if (this.mode != 0) {}
    }
    for (;;)
    {
      try
      {
        bs();
        getName();
        new StringBuilder("startActivationCounter...in ").append(this.kh).toString();
        return super.a(paramMessage);
      }
      catch (Exception localException)
      {
        Log.w(getName(), localException);
        continue;
      }
      label276:
      if (paramMessage.what == 61700)
      {
        j.y(0).getEditor().putBoolean("nomore", true).commit();
        this.kl = true;
      }
    }
  }
  
  public void bk()
  {
    d(true);
    if (this.kk)
    {
      if (this.mode != 0) {
        break label43;
      }
      j.y(0).getEditor().putBoolean("trial", false).commit();
    }
    for (;;)
    {
      k.resume();
      return;
      label43:
      if (this.mode == 1)
      {
        j.y(0).getEditor().putInt("launch", 0).commit();
        this.kj = 0;
      }
    }
  }
  
  public final boolean br()
  {
    boolean bool = false;
    if (this.kk)
    {
      if (this.kl) {
        bool = true;
      }
      return bool;
    }
    return j.y(0).getSharedPreferences().getBoolean("actived", false);
  }
  
  public abstract void bt();
  
  public void fail()
  {
    d(false);
    k.resume();
  }
  
  public final void onDestroy()
  {
    super.onDestroy();
  }
}
