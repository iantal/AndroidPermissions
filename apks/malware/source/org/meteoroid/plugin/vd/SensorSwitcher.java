package org.meteoroid.plugin.vd;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.util.AttributeSet;
import android.util.Log;
import com.a.a.d.c;
import com.a.a.e.b;
import org.meteoroid.core.f;
import org.meteoroid.core.m;

public final class SensorSwitcher
  extends BooleanSwitcher
  implements SensorEventListener
{
  private static final int DOWN = 1;
  private static final int LEFT = 2;
  private static final int RIGHT = 3;
  private static final int UP = 0;
  private static final VirtualKey[] kX = new VirtualKey[4];
  private int le;
  private int[] ls;
  private int lt = 2;
  private int lu = 2;
  private VirtualKey lv;
  private final int[] lw = new int[3];
  private int lx = 0;
  private int x;
  private int y;
  private int z;
  
  public SensorSwitcher() {}
  
  private void a(VirtualKey paramVirtualKey)
  {
    try
    {
      if (paramVirtualKey != this.lv) {
        bF();
      }
      if ((paramVirtualKey != null) && (paramVirtualKey.state == 1))
      {
        paramVirtualKey.state = 0;
        VirtualKey.b(paramVirtualKey);
        this.lv = paramVirtualKey;
      }
      if (paramVirtualKey != null) {
        new StringBuilder("sensor vb:[").append(paramVirtualKey.lE).append("|").append(paramVirtualKey.state).append("]").toString();
      }
      return;
    }
    finally {}
  }
  
  private void bF()
  {
    if ((this.lv != null) && (this.lv.state == 0))
    {
      this.lv.state = 1;
      VirtualKey.b(this.lv);
      this.lv = null;
    }
  }
  
  public final void a(AttributeSet paramAttributeSet, String paramString)
  {
    this.kN = b.K(paramAttributeSet.getAttributeValue(paramString, "bitmap"));
    String str = paramAttributeSet.getAttributeValue(paramString, "touch");
    if (str != null) {
      this.kL = b.I(str);
    }
    str = paramAttributeSet.getAttributeValue(paramString, "rect");
    if (str != null) {
      this.kM = b.I(str);
    }
    this.state = 1;
    this.kP = paramAttributeSet.getAttributeIntValue(paramString, "fade", -1);
    paramAttributeSet = paramAttributeSet.getAttributeValue(paramString, "value");
    if (paramAttributeSet != null)
    {
      paramAttributeSet = paramAttributeSet.split(",");
      if (paramAttributeSet.length <= 0) {}
    }
    try
    {
      if (Integer.parseInt(paramAttributeSet[0]) == 0) {
        by();
      }
      if (paramAttributeSet.length >= 3)
      {
        this.lt = Integer.parseInt(paramAttributeSet[1]);
        this.lu = Integer.parseInt(paramAttributeSet[2]);
      }
      if (paramAttributeSet.length >= 6)
      {
        this.ls = new int[3];
        this.ls[0] = Integer.parseInt(paramAttributeSet[3]);
        this.ls[1] = Integer.parseInt(paramAttributeSet[4]);
        this.ls[2] = Integer.parseInt(paramAttributeSet[5]);
      }
      return;
    }
    catch (NumberFormatException paramString)
    {
      for (;;)
      {
        if (Boolean.parseBoolean(paramAttributeSet[0])) {
          by();
        }
      }
    }
  }
  
  public final void a(c paramC)
  {
    super.a(paramC);
    kX[0] = new VirtualKey();
    kX[0].lE = "UP";
    kX[0].state = 1;
    kX[1] = new VirtualKey();
    kX[1].lE = "DOWN";
    kX[1].state = 1;
    kX[2] = new VirtualKey();
    kX[2].lE = "LEFT";
    kX[2].state = 1;
    kX[3] = new VirtualKey();
    kX[3].lE = "RIGHT";
    kX[3].state = 1;
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.lx = 0;
    this.lw[0] = 0;
    this.lw[1] = 0;
    this.lw[2] = 0;
    bF();
  }
  
  public final void by()
  {
    f.a(this);
    Log.w("SensorSwitcher", "Switch on.");
  }
  
  public final void bz()
  {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.lx = 0;
    this.lw[0] = 0;
    this.lw[1] = 0;
    this.lw[2] = 0;
    bF();
    f.b(this);
    Log.w("SensorSwitcher", "Switch off.");
  }
  
  public final void onAccuracyChanged(Sensor paramSensor, int paramInt) {}
  
  public final void onSensorChanged(SensorEvent paramSensorEvent)
  {
    new StringBuilder("sensor:[").append((int)paramSensorEvent.values[0]).append("|").append((int)paramSensorEvent.values[1]).append("|").append((int)paramSensorEvent.values[2]).append("]").toString();
    this.le = m.iK.getOrientation();
    if (this.le == 1)
    {
      this.x = (-(int)paramSensorEvent.values[0]);
      this.y = ((int)paramSensorEvent.values[1]);
      this.z = ((int)paramSensorEvent.values[2]);
      if (this.lx > 0) {
        break label319;
      }
      if (this.ls == null) {
        break label286;
      }
      this.lw[0] = this.ls[0];
      this.lw[1] = this.ls[1];
      this.lw[2] = this.ls[2];
      label162:
      new StringBuilder("sensor_init:[").append(this.lw[0]).append("|").append(this.lw[1]).append("|").append(this.lw[2]).append("]").toString();
      this.lx += 1;
    }
    label286:
    label319:
    int k;
    do
    {
      return;
      if (this.le == 0)
      {
        this.x = ((int)paramSensorEvent.values[1]);
        this.y = ((int)paramSensorEvent.values[0]);
        break;
      }
      Log.w("SensorSwitcher", "deviceOrientation:" + this.le);
      return;
      this.lw[0] = this.x;
      this.lw[1] = this.y;
      this.lw[2] = this.z;
      break label162;
      int i = this.x - this.lw[0];
      int j = this.y - this.lw[1];
      k = this.z - this.lw[2];
      if ((Math.abs(i) < this.lt) && (Math.abs(j) < this.lu) && (Math.abs(k) < this.lu))
      {
        bF();
        return;
      }
      if (Math.abs(i) >= this.lt)
      {
        if (i < 0)
        {
          a(kX[2]);
          return;
        }
        a(kX[3]);
        return;
      }
      if (Math.abs(j) >= this.lu)
      {
        if (j > 0) {
          a(kX[1]);
        }
        for (;;)
        {
          a(this.lv);
          return;
          a(kX[0]);
        }
      }
    } while (Math.abs(k) < this.lu);
    if (k > 0)
    {
      a(kX[0]);
      return;
    }
    a(kX[1]);
  }
}
