package org.meteoroid.plugin.vd;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.util.AttributeSet;
import com.a.a.d.c;
import com.a.a.e.b;

public class SteeringWheel
  extends AbstractRoundWidget
{
  private static final int ANTICLOCKWISE = 2;
  private static final int CLOCKWISE = 1;
  private static final int LEFT = 0;
  private static final int RIGHT = 1;
  private static final int UNKNOWN = 0;
  private static final VirtualKey[] ly = new VirtualKey[2];
  private final Matrix gi = new Matrix();
  private float lA = 0.0F;
  public int lB = 135;
  public int lC = 5;
  private float lz = -1.0F;
  private int orientation = 0;
  
  public SteeringWheel() {}
  
  public final void a(AttributeSet paramAttributeSet, String paramString)
  {
    super.a(paramAttributeSet, paramString);
    this.lB = paramAttributeSet.getAttributeIntValue(paramString, "angleMax", 135);
    this.lC = paramAttributeSet.getAttributeIntValue(paramString, "angleMin", 5);
    this.kN = b.K(paramAttributeSet.getAttributeValue(paramString, "bitmap"));
  }
  
  public final void a(c paramC)
  {
    super.a(paramC);
    ly[0] = new VirtualKey();
    ly[0].lE = "LEFT";
    ly[1] = new VirtualKey();
    ly[1].lE = "RIGHT";
    reset();
  }
  
  public final boolean h(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    double d = Math.sqrt(Math.pow(paramInt2 - this.centerX, 2.0D) + Math.pow(paramInt3 - this.centerY, 2.0D));
    Thread.yield();
    float f1;
    float f3;
    float f2;
    label184:
    label206:
    label234:
    VirtualKey localVirtualKey;
    if ((d <= this.kU) && (d >= this.kV)) {
      switch (paramInt1)
      {
      default: 
      case 0: 
      case 2: 
        do
        {
          for (;;)
          {
            return true;
            if (this.lz == -1.0F) {
              this.lz = a(paramInt2, paramInt3);
            }
            this.id = paramInt4;
          }
        } while (this.id != paramInt4);
        this.state = 0;
        f1 = a(paramInt2, paramInt3);
        f3 = this.lz;
        f2 = f1 - f3;
        if (this.orientation == 0)
        {
          if (Math.abs(f2) <= 180.0F) {
            break label354;
          }
          if (f2 > 0.0F) {
            this.orientation = 1;
          }
        }
        else
        {
          if ((this.orientation != 1) || (f2 <= 0.0F)) {
            break label386;
          }
          f1 = f2 - 360.0F;
          this.lA = f1;
          if (this.lA <= this.lB) {
            break label419;
          }
          this.lA = this.lB;
          if ((this.lA < this.lC) || (this.lA > this.lB)) {
            break label448;
          }
          localVirtualKey = ly[0];
        }
        break;
      }
    }
    for (;;)
    {
      if (this.kW != localVirtualKey)
      {
        if ((this.kW != null) && (this.kW.state == 0))
        {
          this.kW.state = 1;
          VirtualKey.b(this.kW);
        }
        this.kW = localVirtualKey;
      }
      if (this.kW == null) {
        break;
      }
      this.kW.state = 0;
      VirtualKey.b(this.kW);
      break;
      if (f2 >= 0.0F) {
        break label184;
      }
      this.orientation = 2;
      break label184;
      label354:
      if (f1 > f3)
      {
        this.orientation = 2;
        break label184;
      }
      if (f1 >= f3) {
        break label184;
      }
      this.orientation = 1;
      break label184;
      label386:
      f1 = f2;
      if (this.orientation != 2) {
        break label206;
      }
      f1 = f2;
      if (f2 >= 0.0F) {
        break label206;
      }
      f1 = f2 + 360.0F;
      break label206;
      label419:
      if (this.lA >= this.lB * -1) {
        break label234;
      }
      this.lA = (this.lB * -1);
      break label234;
      label448:
      if ((this.lA <= this.lC * -1) && (this.lA >= this.lB * -1))
      {
        localVirtualKey = ly[1];
      }
      else
      {
        if ((this.lA < this.lC) && (this.lA > this.lC * -1))
        {
          this.orientation = 0;
          break;
          if (this.id != paramInt4) {
            break;
          }
          release();
          break;
          if ((paramInt1 == 1) && (this.id == paramInt4)) {
            release();
          }
          return false;
        }
        localVirtualKey = null;
      }
    }
  }
  
  public final void onDraw(Canvas paramCanvas)
  {
    if (this.delay > 0) {
      this.delay -= 1;
    }
    do
    {
      return;
      if (this.state == 0)
      {
        this.kQ = 0;
        this.kT = true;
      }
    } while (!this.kT);
    if ((this.kP > 0) && (this.state == 1))
    {
      this.kQ += 1;
      this.fy.setAlpha(255 - this.kQ * 255 / this.kP);
      if (this.kQ >= this.kP)
      {
        this.kQ = 0;
        this.kT = false;
      }
    }
    if (this.state == 1)
    {
      if (this.lA <= 0.0F) {
        break label303;
      }
      this.lA -= 15.0F;
      if (this.lA >= 0.0F) {
        break label295;
      }
      f = 0.0F;
      this.lA = f;
    }
    for (;;)
    {
      label156:
      if (this.kN != null)
      {
        paramCanvas.save();
        if (this.lA != 0.0F) {
          this.gi.setRotate(this.lA * -1.0F, this.kN[this.state].getWidth() >> 1, this.kN[this.state].getHeight() >> 1);
        }
        paramCanvas.translate(this.centerX - (this.kN[this.state].getWidth() >> 1), this.centerY - (this.kN[this.state].getHeight() >> 1));
        paramCanvas.drawBitmap(this.kN[this.state], this.gi, null);
        paramCanvas.restore();
        this.gi.reset();
        return;
        label295:
        f = this.lA;
        break;
        label303:
        if (this.lA < 0.0F)
        {
          this.lA += 15.0F;
          if (this.lA <= 0.0F) {
            break label342;
          }
        }
      }
    }
    label342:
    for (float f = 0.0F;; f = this.lA)
    {
      this.lA = f;
      break label156;
      break;
    }
  }
  
  public final void reset()
  {
    this.state = 1;
    this.lz = -1.0F;
    this.orientation = 0;
  }
}
