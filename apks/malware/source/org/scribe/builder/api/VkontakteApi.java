package org.scribe.builder.api;

import org.scribe.extractors.AccessTokenExtractor;
import org.scribe.extractors.JsonTokenExtractor;
import org.scribe.model.OAuthConfig;
import org.scribe.utils.Preconditions;
import org.scribe.utils.URLUtils;

public class VkontakteApi
  extends DefaultApi20
{
  private static final String AUTHORIZE_URL = "https://api.vkontakte.ru/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code";
  private static final String SCOPED_AUTHORIZE_URL = String.format("%s&scope=%%s", new Object[] { "https://api.vkontakte.ru/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code" });
  
  public VkontakteApi() {}
  
  public String getAccessTokenEndpoint()
  {
    return "https://api.vkontakte.ru/oauth/access_token";
  }
  
  public AccessTokenExtractor getAccessTokenExtractor()
  {
    return new JsonTokenExtractor();
  }
  
  public String getAuthorizationUrl(OAuthConfig paramOAuthConfig)
  {
    Preconditions.checkValidUrl(paramOAuthConfig.getCallback(), "Valid url is required for a callback. Vkontakte does not support OOB");
    if (paramOAuthConfig.hasScope()) {
      return String.format(SCOPED_AUTHORIZE_URL, new Object[] { paramOAuthConfig.getApiKey(), URLUtils.formURLEncode(paramOAuthConfig.getCallback()), URLUtils.formURLEncode(paramOAuthConfig.getScope()) });
    }
    return String.format("https://api.vkontakte.ru/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code", new Object[] { paramOAuthConfig.getApiKey(), URLUtils.formURLEncode(paramOAuthConfig.getCallback()) });
  }
}
