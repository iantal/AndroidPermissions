package org.scribe.builder.api;

import org.scribe.extractors.AccessTokenExtractor;
import org.scribe.extractors.JsonTokenExtractor;
import org.scribe.model.OAuthConfig;
import org.scribe.utils.Preconditions;
import org.scribe.utils.URLUtils;

public class LiveApi
  extends DefaultApi20
{
  private static final String AUTHORIZE_URL = "https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";
  private static final String SCOPED_AUTHORIZE_URL = "https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code&scope=%s";
  
  public LiveApi() {}
  
  public String getAccessTokenEndpoint()
  {
    return "https://oauth.live.com/token?grant_type=authorization_code";
  }
  
  public AccessTokenExtractor getAccessTokenExtractor()
  {
    return new JsonTokenExtractor();
  }
  
  public String getAuthorizationUrl(OAuthConfig paramOAuthConfig)
  {
    Preconditions.checkValidUrl(paramOAuthConfig.getCallback(), "Must provide a valid url as callback. Live does not support OOB");
    if (paramOAuthConfig.hasScope()) {
      return String.format("https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code&scope=%s", new Object[] { paramOAuthConfig.getApiKey(), URLUtils.formURLEncode(paramOAuthConfig.getCallback()), URLUtils.formURLEncode(paramOAuthConfig.getScope()) });
    }
    return String.format("https://oauth.live.com/authorize?client_id=%s&redirect_uri=%s&response_type=code", new Object[] { paramOAuthConfig.getApiKey(), URLUtils.formURLEncode(paramOAuthConfig.getCallback()) });
  }
}
