package org.scribe.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MapUtils
{
  private static final String EMPTY_STRING = "";
  private static final String PAIR_SEPARATOR = "=";
  private static final String PARAM_SEPARATOR = "&";
  
  public MapUtils() {}
  
  public static String concatSortedPercentEncodedParams(Map<String, String> paramMap)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = paramMap.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localStringBuilder.toString().substring(0, localStringBuilder.length() - 1);
      }
      String str = (String)localIterator.next();
      localStringBuilder.append(str).append("=");
      localStringBuilder.append((String)paramMap.get(str)).append("&");
    }
  }
  
  public static void decodeAndAppendEntries(Map<String, String> paramMap1, Map<String, String> paramMap2)
  {
    Iterator localIterator = paramMap1.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      String str = (String)localIterator.next();
      paramMap2.put(URLUtils.percentEncode(str), URLUtils.percentEncode((String)paramMap1.get(str)));
    }
  }
  
  private static List<String> getSortedKeys(Map<String, String> paramMap)
  {
    paramMap = new ArrayList(paramMap.keySet());
    Collections.sort(paramMap);
    return paramMap;
  }
  
  public static Map<String, String> queryStringToMap(String paramString)
  {
    HashMap localHashMap = new HashMap();
    String[] arrayOfString;
    int i;
    if ((paramString != null) && (paramString.length() > 0))
    {
      arrayOfString = paramString.split("&");
      int j = arrayOfString.length;
      i = 0;
      if (i < j) {}
    }
    else
    {
      return localHashMap;
    }
    paramString = arrayOfString[i].split("=");
    String str = URLUtils.formURLDecode(paramString[0]);
    if (paramString.length > 1) {}
    for (paramString = URLUtils.formURLDecode(paramString[1]);; paramString = "")
    {
      localHashMap.put(str, paramString);
      i += 1;
      break;
    }
  }
  
  public static final Map<String, String> sort(Map<String, String> paramMap)
  {
    Preconditions.checkNotNull(paramMap, "Cannot sort a null object.");
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    Iterator localIterator = getSortedKeys(paramMap).iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localLinkedHashMap;
      }
      String str = (String)localIterator.next();
      localLinkedHashMap.put(str, (String)paramMap.get(str));
    }
  }
}
