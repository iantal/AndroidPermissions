package org.scribe.utils;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class URLUtils
{
  private static final String EMPTY_STRING = "";
  private static final Set<EncodingRule> ENCODING_RULES;
  private static final String ERROR_MSG = String.format("Cannot find specified encoding: %s", new Object[] { "UTF-8" });
  private static final String PAIR_SEPARATOR = "=";
  private static final String PARAM_SEPARATOR = "&";
  private static final char QUERY_STRING_SEPARATOR = '?';
  private static final String UTF_8 = "UTF-8";
  
  static
  {
    HashSet localHashSet = new HashSet();
    localHashSet.add(new EncodingRule("*", "%2A"));
    localHashSet.add(new EncodingRule("+", "%20"));
    localHashSet.add(new EncodingRule("%7E", "~"));
    ENCODING_RULES = Collections.unmodifiableSet(localHashSet);
  }
  
  public URLUtils() {}
  
  public static String appendParametersToQueryString(String paramString, Map<String, String> paramMap)
  {
    Preconditions.checkNotNull(paramString, "Cannot append to null URL");
    paramMap = formURLEncodeMap(paramMap);
    if (paramMap.equals("")) {
      return paramString;
    }
    StringBuilder localStringBuilder = new StringBuilder(String.valueOf(paramString));
    if (paramString.indexOf('?') != -1) {}
    for (paramString = "&";; paramString = Character.valueOf('?')) {
      return localStringBuilder.append(paramString).toString() + paramMap;
    }
  }
  
  private static String doFormUrlEncode(Map<String, String> paramMap)
  {
    StringBuffer localStringBuffer = new StringBuffer(paramMap.size() * 20);
    Iterator localIterator = paramMap.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localStringBuffer.toString().substring(1);
      }
      String str = (String)localIterator.next();
      localStringBuffer.append("&").append(formURLEncode(str));
      if (paramMap.get(str) != null) {
        localStringBuffer.append("=").append(formURLEncode((String)paramMap.get(str)));
      }
    }
  }
  
  public static String formURLDecode(String paramString)
  {
    Preconditions.checkNotNull(paramString, "Cannot decode null string");
    try
    {
      paramString = URLDecoder.decode(paramString, "UTF-8");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      throw new IllegalStateException(ERROR_MSG, paramString);
    }
  }
  
  public static String formURLEncode(String paramString)
  {
    Preconditions.checkNotNull(paramString, "Cannot encode null string");
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      throw new IllegalStateException(ERROR_MSG, paramString);
    }
  }
  
  public static String formURLEncodeMap(Map<String, String> paramMap)
  {
    Preconditions.checkNotNull(paramMap, "Cannot url-encode a null object");
    if (paramMap.size() <= 0) {
      return "";
    }
    return doFormUrlEncode(paramMap);
  }
  
  public static String percentEncode(String paramString)
  {
    paramString = formURLEncode(paramString);
    Iterator localIterator = ENCODING_RULES.iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return paramString;
      }
      paramString = ((EncodingRule)localIterator.next()).apply(paramString);
    }
  }
  
  private static final class EncodingRule
  {
    private final String ch;
    private final String toCh;
    
    EncodingRule(String paramString1, String paramString2)
    {
      this.ch = paramString1;
      this.toCh = paramString2;
    }
    
    String apply(String paramString)
    {
      return paramString.replace(this.ch, this.toCh);
    }
  }
}
