package org.scribe.utils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Preconditions
{
  private static final String DEFAULT_MESSAGE = "Received an invalid parameter";
  private static final Pattern URL_PATTERN = Pattern.compile("[a-zA-Z_-]+://\\S+");
  
  public Preconditions() {}
  
  private static void check(boolean paramBoolean, String paramString)
  {
    if ((paramString == null) || (paramString.trim().length() <= 0)) {
      paramString = "Received an invalid parameter";
    }
    while (!paramBoolean) {
      throw new IllegalArgumentException(paramString);
    }
  }
  
  public static void checkEmptyString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (!paramString1.trim().equals(""))) {}
    for (boolean bool = true;; bool = false)
    {
      check(bool, paramString2);
      return;
    }
  }
  
  public static void checkNotNull(Object paramObject, String paramString)
  {
    if (paramObject != null) {}
    for (boolean bool = true;; bool = false)
    {
      check(bool, paramString);
      return;
    }
  }
  
  public static void checkValidOAuthCallback(String paramString1, String paramString2)
  {
    checkEmptyString(paramString1, paramString2);
    if (paramString1.toLowerCase().compareToIgnoreCase("oob") != 0) {
      check(isUrl(paramString1), paramString2);
    }
  }
  
  public static void checkValidUrl(String paramString1, String paramString2)
  {
    checkEmptyString(paramString1, paramString2);
    check(isUrl(paramString1), paramString2);
  }
  
  private static boolean isUrl(String paramString)
  {
    return URL_PATTERN.matcher(paramString).matches();
  }
}
