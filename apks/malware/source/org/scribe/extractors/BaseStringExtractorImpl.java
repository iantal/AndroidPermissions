package org.scribe.extractors;

import java.util.HashMap;
import java.util.Map;
import org.scribe.exceptions.OAuthParametersMissingException;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Verb;
import org.scribe.utils.MapUtils;
import org.scribe.utils.Preconditions;
import org.scribe.utils.URLUtils;

public class BaseStringExtractorImpl
  implements BaseStringExtractor
{
  private static final String AMPERSAND_SEPARATED_STRING = "%s&%s&%s";
  
  public BaseStringExtractorImpl() {}
  
  private void checkPreconditions(OAuthRequest paramOAuthRequest)
  {
    Preconditions.checkNotNull(paramOAuthRequest, "Cannot extract base string from null object");
    if ((paramOAuthRequest.getOauthParameters() == null) || (paramOAuthRequest.getOauthParameters().size() <= 0)) {
      throw new OAuthParametersMissingException(paramOAuthRequest);
    }
  }
  
  private String getSortedAndEncodedParams(OAuthRequest paramOAuthRequest)
  {
    HashMap localHashMap = new HashMap();
    MapUtils.decodeAndAppendEntries(paramOAuthRequest.getQueryStringParams(), localHashMap);
    MapUtils.decodeAndAppendEntries(paramOAuthRequest.getBodyParams(), localHashMap);
    MapUtils.decodeAndAppendEntries(paramOAuthRequest.getOauthParameters(), localHashMap);
    return URLUtils.percentEncode(MapUtils.concatSortedPercentEncodedParams(MapUtils.sort(localHashMap)));
  }
  
  public String extract(OAuthRequest paramOAuthRequest)
  {
    checkPreconditions(paramOAuthRequest);
    return String.format("%s&%s&%s", new Object[] { URLUtils.percentEncode(paramOAuthRequest.getVerb().name()), URLUtils.percentEncode(paramOAuthRequest.getSanitizedUrl()), getSortedAndEncodedParams(paramOAuthRequest) });
  }
}
