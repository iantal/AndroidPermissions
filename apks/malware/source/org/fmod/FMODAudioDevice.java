package org.fmod;

import android.media.AudioRecord;
import android.media.AudioTrack;
import android.util.Log;
import java.nio.ByteBuffer;

public class FMODAudioDevice
  implements Runnable
{
  private static int a = 2;
  private static int n = 1;
  private static int o = 2;
  private static int p = 3;
  private Thread b = null;
  private AudioTrack c = null;
  private boolean d = false;
  private boolean e = false;
  private ByteBuffer f = null;
  private AudioRecord g = null;
  private boolean h = false;
  private boolean i = false;
  private int j = 0;
  private int k = 0;
  private int l = 0;
  private int m = 0;
  
  public FMODAudioDevice() {}
  
  private native int fmodGetInfo(int paramInt);
  
  private native int fmodInitJni();
  
  private native int fmodProcess(ByteBuffer paramByteBuffer);
  
  private native int fmodProcessMicData(ByteBuffer paramByteBuffer, int paramInt);
  
  private void sleep(int paramInt)
  {
    long l1 = paramInt;
    try
    {
      Thread.sleep(l1);
      return;
    }
    catch (InterruptedException localInterruptedException) {}
  }
  
  public void run()
  {
    byte[] arrayOfByte = null;
    ByteBuffer localByteBuffer = null;
    while (this.e)
    {
      int i1;
      if (!this.d)
      {
        int i3 = fmodGetInfo(0);
        if (i3 > 0)
        {
          if (this.c != null)
          {
            this.c.stop();
            this.c = null;
          }
          int i2 = AudioTrack.getMinBufferSize(i3, 3, 2);
          int i4 = fmodGetInfo(n);
          int i5 = fmodGetInfo(o);
          i1 = i2;
          if (i4 * i5 * 2 * a > i2) {
            i1 = a * (i5 * i4 * 2);
          }
          localByteBuffer = ByteBuffer.allocateDirect(i4 * 2 * a);
          arrayOfByte = new byte[localByteBuffer.capacity()];
          this.c = new AudioTrack(3, i3, 3, 2, i1, 1);
          if (this.c.getState() == 1) {}
          for (boolean bool = true;; bool = false)
          {
            this.d = bool;
            if (!this.d) {
              break label185;
            }
            this.c.play();
            break;
          }
          label185:
          Log.e("FMOD", "AudioTrack failed to initialize (status " + this.c.getState() + ")");
        }
        else
        {
          sleep(1);
        }
      }
      else
      {
        if (fmodGetInfo(p) == 1)
        {
          fmodProcess(localByteBuffer);
          localByteBuffer.get(arrayOfByte, 0, localByteBuffer.capacity());
          this.c.write(arrayOfByte, 0, localByteBuffer.capacity());
          localByteBuffer.position(0);
          label287:
          if (this.i)
          {
            if (this.g == null) {
              this.g = new AudioRecord(1, this.l, this.m, this.k, this.j);
            }
            if (this.g.getState() == 1)
            {
              this.f = ByteBuffer.allocateDirect(this.j);
              this.f.position(0);
            }
          }
        }
        try
        {
          this.g.startRecording();
          this.i = false;
          if (this.g != null) {
            if (!this.h) {}
          }
        }
        catch (IllegalStateException localIllegalStateException1)
        {
          try
          {
            this.g.stop();
            this.g.release();
            this.g = null;
            this.f = null;
            this.h = false;
            continue;
            this.d = false;
            arrayOfByte = null;
            localByteBuffer = null;
            break label287;
            localIllegalStateException1 = localIllegalStateException1;
            Log.e("FMOD", "failed to startRecording(): " + localIllegalStateException1.getMessage());
          }
          catch (IllegalStateException localIllegalStateException2)
          {
            for (;;)
            {
              Log.e("FMOD", "failed to stop(): " + localIllegalStateException2.getMessage());
            }
          }
          if (this.g.getRecordingState() == 3)
          {
            i1 = this.g.read(this.f, this.f.capacity());
            fmodProcessMicData(this.f, i1);
            this.f.position(0);
          }
          else
          {
            sleep(1);
          }
        }
      }
    }
    if (this.c != null)
    {
      if (this.d) {
        this.c.stop();
      }
      this.c = null;
    }
  }
  
  public void start()
  {
    if (this.b != null) {
      stop();
    }
    this.b = new Thread(this, "FMODAudioDevice");
    this.b.setPriority(10);
    this.e = true;
    fmodInitJni();
    this.b.start();
  }
  
  public int startAudioRecord(int paramInt1, int paramInt2, int paramInt3)
  {
    this.k = 2;
    this.l = paramInt1;
    this.m = paramInt2;
    this.i = true;
    this.j = (AudioRecord.getMinBufferSize(paramInt1, paramInt2, this.k) * (paramInt1 / 4410));
    return this.j;
  }
  
  public void stop()
  {
    while (this.b != null)
    {
      this.e = false;
      try
      {
        this.b.join();
        this.b = null;
      }
      catch (InterruptedException localInterruptedException) {}
    }
  }
  
  public void stopAudioRecord()
  {
    this.h = true;
  }
}
