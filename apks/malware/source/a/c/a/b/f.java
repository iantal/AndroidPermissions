package a.c.a.b;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.List;

public class f
{
  public static boolean a = false;
  public static boolean b = false;
  private static String h = "";
  private static f i = null;
  private static f j = null;
  private static f k = null;
  private static int l = 25000;
  private final Process c;
  private final BufferedReader d;
  private final OutputStreamWriter e;
  private final List f;
  private boolean g;
  private int m;
  private int n;
  private int o;
  private int p;
  private int q;
  private boolean r;
  private Runnable s;
  private Runnable t;
  
  /* Error */
  private f(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 60	java/lang/Object:<init>	()V
    //   4: aload_0
    //   5: new 62	java/util/ArrayList
    //   8: dup
    //   9: invokespecial 63	java/util/ArrayList:<init>	()V
    //   12: putfield 65	a/c/a/b/f:f	Ljava/util/List;
    //   15: aload_0
    //   16: iconst_0
    //   17: putfield 67	a/c/a/b/f:g	Z
    //   20: aload_0
    //   21: sipush 1000
    //   24: putfield 69	a/c/a/b/f:m	I
    //   27: aload_0
    //   28: iconst_0
    //   29: putfield 71	a/c/a/b/f:n	I
    //   32: aload_0
    //   33: iconst_0
    //   34: putfield 73	a/c/a/b/f:o	I
    //   37: aload_0
    //   38: iconst_0
    //   39: putfield 75	a/c/a/b/f:p	I
    //   42: aload_0
    //   43: iconst_0
    //   44: putfield 77	a/c/a/b/f:q	I
    //   47: aload_0
    //   48: iconst_0
    //   49: putfield 79	a/c/a/b/f:r	Z
    //   52: aload_0
    //   53: new 81	a/c/a/b/g
    //   56: dup
    //   57: aload_0
    //   58: invokespecial 84	a/c/a/b/g:<init>	(La/c/a/b/f;)V
    //   61: putfield 86	a/c/a/b/f:s	Ljava/lang/Runnable;
    //   64: aload_0
    //   65: new 88	a/c/a/b/i
    //   68: dup
    //   69: aload_0
    //   70: invokespecial 89	a/c/a/b/i:<init>	(La/c/a/b/f;)V
    //   73: putfield 91	a/c/a/b/f:t	Ljava/lang/Runnable;
    //   76: new 93	java/lang/StringBuilder
    //   79: dup
    //   80: invokespecial 94	java/lang/StringBuilder:<init>	()V
    //   83: ldc 96
    //   85: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   88: aload_1
    //   89: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   92: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   95: invokestatic 108	a/c/a/a:c	(Ljava/lang/String;)V
    //   98: aload_0
    //   99: new 110	java/lang/ProcessBuilder
    //   102: dup
    //   103: iconst_1
    //   104: anewarray 112	java/lang/String
    //   107: dup
    //   108: iconst_0
    //   109: aload_1
    //   110: aastore
    //   111: invokespecial 115	java/lang/ProcessBuilder:<init>	([Ljava/lang/String;)V
    //   114: iconst_1
    //   115: invokevirtual 119	java/lang/ProcessBuilder:redirectErrorStream	(Z)Ljava/lang/ProcessBuilder;
    //   118: invokevirtual 123	java/lang/ProcessBuilder:start	()Ljava/lang/Process;
    //   121: putfield 125	a/c/a/b/f:c	Ljava/lang/Process;
    //   124: aload_0
    //   125: new 127	java/io/BufferedReader
    //   128: dup
    //   129: new 129	java/io/InputStreamReader
    //   132: dup
    //   133: aload_0
    //   134: getfield 125	a/c/a/b/f:c	Ljava/lang/Process;
    //   137: invokevirtual 135	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   140: ldc -119
    //   142: invokespecial 140	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;Ljava/lang/String;)V
    //   145: invokespecial 143	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   148: putfield 145	a/c/a/b/f:d	Ljava/io/BufferedReader;
    //   151: aload_0
    //   152: new 147	java/io/OutputStreamWriter
    //   155: dup
    //   156: aload_0
    //   157: getfield 125	a/c/a/b/f:c	Ljava/lang/Process;
    //   160: invokevirtual 151	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   163: ldc -119
    //   165: invokespecial 154	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;Ljava/lang/String;)V
    //   168: putfield 156	a/c/a/b/f:e	Ljava/io/OutputStreamWriter;
    //   171: new 158	a/c/a/b/j
    //   174: dup
    //   175: aload_0
    //   176: getfield 125	a/c/a/b/f:c	Ljava/lang/Process;
    //   179: aload_0
    //   180: getfield 145	a/c/a/b/f:d	Ljava/io/BufferedReader;
    //   183: aload_0
    //   184: getfield 156	a/c/a/b/f:e	Ljava/io/OutputStreamWriter;
    //   187: aconst_null
    //   188: invokespecial 161	a/c/a/b/j:<init>	(Ljava/lang/Process;Ljava/io/BufferedReader;Ljava/io/OutputStreamWriter;La/c/a/b/g;)V
    //   191: astore_1
    //   192: aload_1
    //   193: invokevirtual 163	a/c/a/b/j:start	()V
    //   196: aload_1
    //   197: getstatic 47	a/c/a/b/f:l	I
    //   200: i2l
    //   201: invokevirtual 167	a/c/a/b/j:join	(J)V
    //   204: aload_1
    //   205: getfield 169	a/c/a/b/j:a	I
    //   208: istore_2
    //   209: iload_2
    //   210: sipush 64625
    //   213: if_icmpne +56 -> 269
    //   216: aload_0
    //   217: getfield 125	a/c/a/b/f:c	Ljava/lang/Process;
    //   220: invokevirtual 172	java/lang/Process:destroy	()V
    //   223: aload_0
    //   224: aload_0
    //   225: getfield 145	a/c/a/b/f:d	Ljava/io/BufferedReader;
    //   228: invokespecial 174	a/c/a/b/f:a	(Ljava/io/Reader;)V
    //   231: aload_0
    //   232: aload_0
    //   233: getfield 156	a/c/a/b/f:e	Ljava/io/OutputStreamWriter;
    //   236: invokespecial 177	a/c/a/b/f:a	(Ljava/io/Writer;)V
    //   239: new 179	java/util/concurrent/TimeoutException
    //   242: dup
    //   243: getstatic 39	a/c/a/b/f:h	Ljava/lang/String;
    //   246: invokespecial 181	java/util/concurrent/TimeoutException:<init>	(Ljava/lang/String;)V
    //   249: athrow
    //   250: astore_3
    //   251: aload_1
    //   252: invokevirtual 184	a/c/a/b/j:interrupt	()V
    //   255: invokestatic 190	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   258: invokevirtual 191	java/lang/Thread:interrupt	()V
    //   261: new 179	java/util/concurrent/TimeoutException
    //   264: dup
    //   265: invokespecial 192	java/util/concurrent/TimeoutException:<init>	()V
    //   268: athrow
    //   269: aload_1
    //   270: getfield 169	a/c/a/b/j:a	I
    //   273: istore_2
    //   274: iload_2
    //   275: bipush -42
    //   277: if_icmpne +36 -> 313
    //   280: aload_0
    //   281: getfield 125	a/c/a/b/f:c	Ljava/lang/Process;
    //   284: invokevirtual 172	java/lang/Process:destroy	()V
    //   287: aload_0
    //   288: aload_0
    //   289: getfield 145	a/c/a/b/f:d	Ljava/io/BufferedReader;
    //   292: invokespecial 174	a/c/a/b/f:a	(Ljava/io/Reader;)V
    //   295: aload_0
    //   296: aload_0
    //   297: getfield 156	a/c/a/b/f:e	Ljava/io/OutputStreamWriter;
    //   300: invokespecial 177	a/c/a/b/f:a	(Ljava/io/Writer;)V
    //   303: new 194	a/c/a/a/a
    //   306: dup
    //   307: ldc -60
    //   309: invokespecial 197	a/c/a/a/a:<init>	(Ljava/lang/String;)V
    //   312: athrow
    //   313: new 186	java/lang/Thread
    //   316: dup
    //   317: aload_0
    //   318: getfield 86	a/c/a/b/f:s	Ljava/lang/Runnable;
    //   321: ldc -57
    //   323: invokespecial 202	java/lang/Thread:<init>	(Ljava/lang/Runnable;Ljava/lang/String;)V
    //   326: astore_3
    //   327: aload_3
    //   328: iconst_5
    //   329: invokevirtual 206	java/lang/Thread:setPriority	(I)V
    //   332: aload_3
    //   333: invokevirtual 207	java/lang/Thread:start	()V
    //   336: new 186	java/lang/Thread
    //   339: dup
    //   340: aload_0
    //   341: getfield 91	a/c/a/b/f:t	Ljava/lang/Runnable;
    //   344: ldc -47
    //   346: invokespecial 202	java/lang/Thread:<init>	(Ljava/lang/Runnable;Ljava/lang/String;)V
    //   349: astore_3
    //   350: aload_3
    //   351: iconst_5
    //   352: invokevirtual 206	java/lang/Thread:setPriority	(I)V
    //   355: aload_3
    //   356: invokevirtual 207	java/lang/Thread:start	()V
    //   359: return
    //   360: astore_3
    //   361: goto -74 -> 287
    //   364: astore_3
    //   365: goto -142 -> 223
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	368	0	this	f
    //   0	368	1	paramString	String
    //   208	70	2	i1	int
    //   250	1	3	localInterruptedException	InterruptedException
    //   326	30	3	localThread	Thread
    //   360	1	3	localException1	Exception
    //   364	1	3	localException2	Exception
    // Exception table:
    //   from	to	target	type
    //   196	209	250	java/lang/InterruptedException
    //   216	223	250	java/lang/InterruptedException
    //   223	250	250	java/lang/InterruptedException
    //   269	274	250	java/lang/InterruptedException
    //   280	287	250	java/lang/InterruptedException
    //   287	313	250	java/lang/InterruptedException
    //   313	359	250	java/lang/InterruptedException
    //   280	287	360	java/lang/Exception
    //   216	223	364	java/lang/Exception
  }
  
  public static f a(int paramInt)
  {
    return a(paramInt, 3);
  }
  
  public static f a(int paramInt1, int paramInt2)
  {
    l = paramInt1;
    if (i == null)
    {
      a.c.a.a.c("Starting Root Shell!");
      paramInt1 = 0;
      while (i == null) {
        try
        {
          i = new f("su");
        }
        catch (IOException localIOException)
        {
          if (paramInt1 >= paramInt2)
          {
            a.c.a.a.c("IOException, could not start shell");
            throw localIOException;
          }
          paramInt1 += 1;
        }
      }
    }
    a.c.a.a.c("Using Existing Root Shell!");
    return i;
  }
  
  private void a(Reader paramReader)
  {
    if (paramReader != null) {}
    try
    {
      paramReader.close();
      return;
    }
    catch (Exception paramReader) {}
  }
  
  private void a(Writer paramWriter)
  {
    if (paramWriter != null) {}
    try
    {
      paramWriter.close();
      return;
    }
    catch (Exception paramWriter) {}
  }
  
  /* Error */
  public static f b(int paramInt)
  {
    // Byte code:
    //   0: iload_0
    //   1: putstatic 47	a/c/a/b/f:l	I
    //   4: getstatic 43	a/c/a/b/f:j	La/c/a/b/f;
    //   7: ifnonnull +24 -> 31
    //   10: ldc -17
    //   12: invokestatic 108	a/c/a/a:c	(Ljava/lang/String;)V
    //   15: new 2	a/c/a/b/f
    //   18: dup
    //   19: ldc -15
    //   21: invokespecial 221	a/c/a/b/f:<init>	(Ljava/lang/String;)V
    //   24: putstatic 43	a/c/a/b/f:j	La/c/a/b/f;
    //   27: getstatic 43	a/c/a/b/f:j	La/c/a/b/f;
    //   30: areturn
    //   31: ldc -13
    //   33: invokestatic 108	a/c/a/a:c	(Ljava/lang/String;)V
    //   36: goto -9 -> 27
    //   39: astore_1
    //   40: new 216	java/io/IOException
    //   43: dup
    //   44: invokespecial 244	java/io/IOException:<init>	()V
    //   47: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	48	0	paramInt	int
    //   39	1	1	localA	a.c.a.a.a
    // Exception table:
    //   from	to	target	type
    //   4	27	39	a/c/a/a/a
    //   27	31	39	a/c/a/a/a
    //   31	36	39	a/c/a/a/a
  }
  
  public static void b()
  {
    if (k == null) {
      return;
    }
    k.a();
  }
  
  public static void c()
  {
    if (i == null) {
      return;
    }
    i.a();
  }
  
  public static void d()
  {
    if (j == null) {
      return;
    }
    j.a();
  }
  
  public static void e()
  {
    d();
    c();
    b();
  }
  
  public static f f()
  {
    if (k != null) {
      return k;
    }
    if (i != null) {
      return i;
    }
    return j;
  }
  
  public static boolean g()
  {
    if (j != null) {}
    while ((i != null) || (k != null)) {
      return true;
    }
    return false;
  }
  
  public static f i()
  {
    return a(20000, 3);
  }
  
  public static f j()
  {
    return b(20000);
  }
  
  private void k()
  {
    this.r = true;
    int i2 = Math.abs(this.m - this.m / 4);
    a.c.a.a.c("Cleaning up: " + i2);
    int i1 = 0;
    while (i1 < i2)
    {
      this.f.remove(0);
      i1 += 1;
    }
    this.n = (this.f.size() - 1);
    this.o = (this.f.size() - 1);
    this.r = false;
  }
  
  public a a(a paramA)
  {
    if (this.g) {
      throw new IllegalStateException("Unable to add commands to a closed shell");
    }
    while (this.r) {}
    this.f.add(paramA);
    h();
    return paramA;
  }
  
  public void a()
  {
    if (this == i) {
      i = null;
    }
    synchronized (this.f)
    {
      do
      {
        for (;;)
        {
          this.g = true;
          h();
          return;
          if (this != j) {
            break;
          }
          j = null;
        }
      } while (this != k);
      k = null;
    }
  }
  
  public int b(a paramA)
  {
    return this.f.indexOf(paramA);
  }
  
  public String c(a paramA)
  {
    return "Command is in position " + b(paramA) + " currently executing command at position " + this.o;
  }
  
  protected void h()
  {
    new h(this).start();
  }
}
