package a.c.a.b;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;

class g
  implements Runnable
{
  g(f paramF) {}
  
  public void run()
  {
    do
    {
      try
      {
        synchronized (f.a(this.a))
        {
          if ((!f.b(this.a)) && (f.c(this.a) >= f.a(this.a).size()))
          {
            f.a = false;
            f.a(this.a).wait();
          }
        }
      }
      catch (IOException localIOException)
      {
        a.c.a.a.a(localIOException.getMessage(), 2, localIOException);
        return;
        if (f.c(this.a) >= f.d(this.a)) {
          while (f.e(this.a) != f.c(this.a)) {
            a.c.a.a.c("Waiting for read and write to catch up before cleanup.");
          }
        }
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          a.c.a.a.a(localInterruptedException.getMessage(), 2, localInterruptedException);
          return;
          f.f(this.a);
          if (f.c(this.a) >= f.a(this.a).size()) {
            break;
          }
          f.a = true;
          Object localObject1 = (a)f.a(this.a).get(f.c(this.a));
          ((a)localObject1).f();
          a.c.a.a.c("Executing: " + ((a)localObject1).c());
          f.g(this.a).write(((a)localObject1).c());
          localObject1 = "\necho F*D^W@#FGF " + f.h(this.a) + " $?\n";
          f.g(this.a).write((String)localObject1);
          f.g(this.a).flush();
          f.i(this.a);
          f.j(this.a);
        }
      }
      finally
      {
        f.a(this.a, 0);
        f.a(this.a, f.g(this.a));
      }
    } while (!f.b(this.a));
    f.a = false;
    f.g(this.a).write("\nexit 0\n");
    f.g(this.a).flush();
    a.c.a.a.c("Closing shell");
    f.a(this.a, 0);
    f.a(this.a, f.g(this.a));
  }
}
