package a.c.a.b;

import java.io.BufferedReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.lang.reflect.Field;

public class j
  extends Thread
{
  public int a = 64625;
  public Process b;
  public BufferedReader c;
  public OutputStreamWriter d;
  
  private j(Process paramProcess, BufferedReader paramBufferedReader, OutputStreamWriter paramOutputStreamWriter)
  {
    this.b = paramProcess;
    this.c = paramBufferedReader;
    this.d = paramOutputStreamWriter;
  }
  
  private void a()
  {
    try
    {
      Class localClass = this.b.getClass();
      try
      {
        Field localField1 = localClass.getDeclaredField("pid");
        localField1.setAccessible(true);
        int i = ((Integer)localField1.get(this.b)).intValue();
        this.d.write("(echo -17 > /proc/" + i + "/oom_adj) &> /dev/null\n");
        this.d.write("(echo -17 > /proc/$$/oom_adj) &> /dev/null\n");
        this.d.flush();
        return;
      }
      catch (NoSuchFieldException localNoSuchFieldException)
      {
        for (;;)
        {
          Field localField2 = localClass.getDeclaredField("id");
        }
      }
      return;
    }
    catch (Exception localException) {}
  }
  
  public void run()
  {
    try
    {
      this.d.write("echo Started\n");
      this.d.flush();
      String str = this.c.readLine();
      if (str == null) {
        throw new EOFException();
      }
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        this.a = -42;
        if (localIOException.getMessage() == null) {
          break;
        }
        f.a(localIOException.getMessage());
        return;
        if (!"".equals(localIOException))
        {
          if ("Started".equals(localIOException))
          {
            this.a = 1;
            a();
            return;
          }
          f.a("unkown error occured.");
        }
      }
      f.a("RootAccess denied?.");
    }
  }
}
