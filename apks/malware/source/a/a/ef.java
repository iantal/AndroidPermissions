package a.a;

import java.io.Serializable;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

public class ef
  implements gq<ef, el>, Serializable, Cloneable
{
  public static final Map<el, hf> c;
  private static final hy d = new hy("Page");
  private static final hq e = new hq("page_name", (byte)11, (short)1);
  private static final hq f = new hq("duration", (byte)10, (short)2);
  private static final Map<Class<? extends ia>, ib> g = new HashMap();
  public String a;
  public long b;
  private byte h = 0;
  
  static
  {
    g.put(ic.class, new ei(null));
    g.put(id.class, new ek(null));
    EnumMap localEnumMap = new EnumMap(el.class);
    localEnumMap.put(el.a, new hf("page_name", (byte)1, new hg((byte)11)));
    localEnumMap.put(el.b, new hf("duration", (byte)1, new hg((byte)10)));
    c = Collections.unmodifiableMap(localEnumMap);
    hf.a(ef.class, c);
  }
  
  public ef() {}
  
  public ef a(long paramLong)
  {
    this.b = paramLong;
    b(true);
    return this;
  }
  
  public ef a(String paramString)
  {
    this.a = paramString;
    return this;
  }
  
  public void a(ht paramHt)
  {
    ((ib)g.get(paramHt.y())).b().b(paramHt, this);
  }
  
  public void a(boolean paramBoolean)
  {
    if (!paramBoolean) {
      this.a = null;
    }
  }
  
  public boolean a()
  {
    return go.a(this.h, 0);
  }
  
  public void b()
  {
    if (this.a == null) {
      throw new hu("Required field 'page_name' was not present! Struct: " + toString());
    }
  }
  
  public void b(ht paramHt)
  {
    ((ib)g.get(paramHt.y())).b().a(paramHt, this);
  }
  
  public void b(boolean paramBoolean)
  {
    this.h = go.a(this.h, 0, paramBoolean);
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("Page(");
    localStringBuilder.append("page_name:");
    if (this.a == null) {
      localStringBuilder.append("null");
    }
    for (;;)
    {
      localStringBuilder.append(", ");
      localStringBuilder.append("duration:");
      localStringBuilder.append(this.b);
      localStringBuilder.append(")");
      return localStringBuilder.toString();
      localStringBuilder.append(this.a);
    }
  }
}
