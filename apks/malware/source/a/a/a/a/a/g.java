package a.a.a.a.a;

import a.a.a.a.a.a.b;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.message.BasicHeader;

public class g
  implements HttpEntity
{
  private static final char[] a = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
  private final c b;
  private final Header c;
  private long d;
  private volatile boolean e;
  
  public g()
  {
    this(d.a);
  }
  
  private g(d paramD)
  {
    String str = a();
    d localD = paramD;
    if (paramD == null) {
      localD = d.a;
    }
    this.b = new c("form-data", str, localD);
    paramD = new StringBuilder();
    paramD.append("multipart/form-data; boundary=");
    paramD.append(str);
    this.c = new BasicHeader("Content-Type", paramD.toString());
    this.e = true;
  }
  
  private static String a()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Random localRandom = new Random();
    int j = localRandom.nextInt(11);
    int i = 0;
    for (;;)
    {
      if (i >= j + 30) {
        return localStringBuilder.toString();
      }
      localStringBuilder.append(a[localRandom.nextInt(a.length)]);
      i += 1;
    }
  }
  
  public final void a(String paramString, b paramB)
  {
    paramString = new a(paramString, paramB);
    this.b.a(paramString);
    this.e = true;
  }
  
  public void consumeContent()
  {
    if (isStreaming()) {
      throw new UnsupportedOperationException("Streaming entity does not implement #consumeContent()");
    }
  }
  
  public InputStream getContent()
  {
    throw new UnsupportedOperationException("Multipart form entity does not implement #getContent()");
  }
  
  public Header getContentEncoding()
  {
    return null;
  }
  
  public long getContentLength()
  {
    if (this.e)
    {
      this.d = this.b.b();
      this.e = false;
    }
    return this.d;
  }
  
  public Header getContentType()
  {
    return this.c;
  }
  
  public boolean isChunked()
  {
    return !isRepeatable();
  }
  
  public boolean isRepeatable()
  {
    Iterator localIterator = this.b.a().iterator();
    do
    {
      if (!localIterator.hasNext()) {
        return true;
      }
    } while (((a)localIterator.next()).a().e() >= 0L);
    return false;
  }
  
  public boolean isStreaming()
  {
    return !isRepeatable();
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    this.b.a(paramOutputStream);
  }
}
