package a.a.a.a.a;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.http.util.ByteArrayBuffer;

public class c
{
  private static final ByteArrayBuffer a = a(e.a, ": ");
  private static final ByteArrayBuffer b = a(e.a, "\r\n");
  private static final ByteArrayBuffer c = a(e.a, "--");
  private final String d;
  private final Charset e;
  private final String f;
  private final List g;
  private final d h;
  
  public c(String paramString1, String paramString2, d paramD)
  {
    if (paramString1 == null) {
      throw new IllegalArgumentException("Multipart subtype may not be null");
    }
    if (paramString2 == null) {
      throw new IllegalArgumentException("Multipart boundary may not be null");
    }
    this.d = paramString1;
    this.e = e.a;
    this.f = paramString2;
    this.g = new ArrayList();
    this.h = paramD;
  }
  
  private static ByteArrayBuffer a(Charset paramCharset, String paramString)
  {
    paramCharset = paramCharset.encode(CharBuffer.wrap(paramString));
    paramString = new ByteArrayBuffer(paramCharset.remaining());
    paramString.append(paramCharset.array(), paramCharset.position(), paramCharset.remaining());
    return paramString;
  }
  
  private void a(d paramD, OutputStream paramOutputStream, boolean paramBoolean)
  {
    ByteArrayBuffer localByteArrayBuffer = a(this.e, this.f);
    Iterator localIterator = this.g.iterator();
    if (!localIterator.hasNext())
    {
      a(c, paramOutputStream);
      a(localByteArrayBuffer, paramOutputStream);
      a(c, paramOutputStream);
      a(b, paramOutputStream);
      return;
    }
    a localA = (a)localIterator.next();
    a(c, paramOutputStream);
    a(localByteArrayBuffer, paramOutputStream);
    a(b, paramOutputStream);
    Object localObject = localA.b();
    switch (c()[paramD.ordinal()])
    {
    }
    for (;;)
    {
      a(b, paramOutputStream);
      if (paramBoolean) {
        localA.a().a(paramOutputStream);
      }
      a(b, paramOutputStream);
      break;
      localObject = ((b)localObject).iterator();
      while (((Iterator)localObject).hasNext())
      {
        f localF = (f)((Iterator)localObject).next();
        a(localF.a(), paramOutputStream);
        a(a, paramOutputStream);
        a(localF.b(), paramOutputStream);
        a(b, paramOutputStream);
      }
      a(localA.b().a("Content-Disposition"), this.e, paramOutputStream);
      if (localA.a().b() != null) {
        a(localA.b().a("Content-Type"), this.e, paramOutputStream);
      }
    }
  }
  
  private static void a(f paramF, Charset paramCharset, OutputStream paramOutputStream)
  {
    a(paramF.a(), paramCharset, paramOutputStream);
    a(a, paramOutputStream);
    a(paramF.b(), paramCharset, paramOutputStream);
    a(b, paramOutputStream);
  }
  
  private static void a(String paramString, OutputStream paramOutputStream)
  {
    a(a(e.a, paramString), paramOutputStream);
  }
  
  private static void a(String paramString, Charset paramCharset, OutputStream paramOutputStream)
  {
    a(a(paramCharset, paramString), paramOutputStream);
  }
  
  private static void a(ByteArrayBuffer paramByteArrayBuffer, OutputStream paramOutputStream)
  {
    paramOutputStream.write(paramByteArrayBuffer.buffer(), 0, paramByteArrayBuffer.length());
  }
  
  public final List a()
  {
    return this.g;
  }
  
  public final void a(a paramA)
  {
    if (paramA == null) {
      return;
    }
    this.g.add(paramA);
  }
  
  public final void a(OutputStream paramOutputStream)
  {
    a(this.h, paramOutputStream, true);
  }
  
  public final long b()
  {
    Object localObject = this.g.iterator();
    long l2;
    for (long l1 = 0L;; l1 += l2)
    {
      if (!((Iterator)localObject).hasNext()) {
        localObject = new ByteArrayOutputStream();
      }
      try
      {
        a(this.h, (OutputStream)localObject, false);
        int j = ((ByteArrayOutputStream)localObject).toByteArray().length;
        return l1 + j;
      }
      catch (IOException localIOException) {}
      l2 = ((a)((Iterator)localObject).next()).a().e();
      if (l2 < 0L) {
        break;
      }
    }
    return -1L;
    return -1L;
  }
}
