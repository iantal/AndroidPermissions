package com.yl.codelib.utils;

import android.content.Context;
import android.graphics.Bitmap;
import com.yl.ml.date.ConFigFile;
import java.io.File;
import java.lang.ref.SoftReference;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy;
import java.util.concurrent.TimeUnit;

public class ImageDwloader
{
  private Map J = new HashMap();
  private ThreadPoolExecutor K = new ThreadPoolExecutor(2, 20, 180L, TimeUnit.SECONDS, new ArrayBlockingQueue(3), new ThreadPoolExecutor.DiscardOldestPolicy());
  
  public ImageDwloader() {}
  
  public static String getOnly(String paramString)
  {
    return paramString;
  }
  
  public static Bitmap loadIconFromSd(Context paramContext, String paramString, int paramInt)
  {
    if (SDCardUtil.hasStorage()) {}
    for (paramContext = new File(ConFigFile.SD_PICTURE + "/" + paramString); paramContext.exists(); paramContext = new File(paramContext.getCacheDir(), paramString)) {
      return BitmapUtil.readBitmapForBig(paramContext.toString(), paramInt);
    }
    return null;
  }
  
  public static Bitmap loadImageFromUrl(Context paramContext, String paramString, int paramInt)
  {
    if ((paramString == null) || (paramString.equals(""))) {
      return null;
    }
    String str = "";
    Object localObject = str;
    if (paramString != null) {
      localObject = str;
    }
    for (;;)
    {
      try
      {
        if (paramString.length() != 0) {
          localObject = paramString.substring(paramString.indexOf("//") + 2, paramString.length() - 4).replace("/", "").replace(":", "");
        }
        if (SDCardUtil.hasStorage())
        {
          paramContext = new File(ConFigFile.SD_PICTURE + "/" + (String)localObject);
          if (!paramContext.exists()) {
            break;
          }
          localObject = BitmapUtil.readBitmapForBig(paramContext.toString(), paramInt);
          if (localObject != null) {
            return localObject;
          }
          HttpConnent.dwload(paramString, paramContext);
          return BitmapUtil.readBitmapForBig(paramContext.toString(), paramInt);
        }
      }
      catch (Exception paramContext)
      {
        return null;
      }
      paramContext = new File(paramContext.getCacheDir(), (String)localObject);
    }
    HttpConnent.dwload(paramString, paramContext);
    return BitmapUtil.readBitmapForBig(paramContext.toString(), paramInt);
    return localObject;
  }
  
  public void imageDwload(String paramString, Context paramContext, ImageDwloader.OnImageDwload paramOnImageDwload, int paramInt)
  {
    if (!TextUtil.notNull(paramString)) {
      return;
    }
    SoftReference localSoftReference = (SoftReference)this.J.get(paramString);
    Bitmap localBitmap = null;
    if (localSoftReference != null) {
      localBitmap = (Bitmap)localSoftReference.get();
    }
    if ((localSoftReference != null) && (localBitmap != null))
    {
      paramOnImageDwload.onDownloadSucc(localBitmap, paramString);
      return;
    }
    paramOnImageDwload = new d(this, paramOnImageDwload, paramString);
    this.K.execute(new e(this, paramContext, paramString, paramInt, paramOnImageDwload));
  }
}
