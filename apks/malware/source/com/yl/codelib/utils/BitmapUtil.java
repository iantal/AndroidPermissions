package com.yl.codelib.utils;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.view.Display;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;

public class BitmapUtil
{
  public BitmapUtil() {}
  
  public static Bitmap cutScreen(Activity paramActivity)
  {
    View localView = paramActivity.getWindow().getDecorView();
    paramActivity = paramActivity.getWindowManager().getDefaultDisplay();
    localView.layout(0, 0, paramActivity.getWidth(), paramActivity.getHeight());
    localView.setDrawingCacheEnabled(true);
    return Bitmap.createBitmap(localView.getDrawingCache());
  }
  
  /* Error */
  public static Bitmap loadImageFromUrl(String paramString, int paramInt)
  {
    // Byte code:
    //   0: sipush 1024
    //   3: newarray byte
    //   5: astore_3
    //   6: aload_0
    //   7: ifnonnull +5 -> 12
    //   10: aconst_null
    //   11: areturn
    //   12: new 72	java/io/BufferedInputStream
    //   15: dup
    //   16: new 74	java/net/URL
    //   19: dup
    //   20: aload_0
    //   21: invokespecial 77	java/net/URL:<init>	(Ljava/lang/String;)V
    //   24: invokevirtual 81	java/net/URL:getContent	()Ljava/lang/Object;
    //   27: checkcast 83	java/io/InputStream
    //   30: sipush 4096
    //   33: invokespecial 86	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;I)V
    //   36: astore 4
    //   38: new 88	java/io/ByteArrayOutputStream
    //   41: dup
    //   42: invokespecial 89	java/io/ByteArrayOutputStream:<init>	()V
    //   45: astore_0
    //   46: aload 4
    //   48: aload_3
    //   49: invokevirtual 93	java/io/BufferedInputStream:read	([B)I
    //   52: istore_2
    //   53: iload_2
    //   54: iconst_m1
    //   55: if_icmpne +80 -> 135
    //   58: aload_0
    //   59: invokevirtual 96	java/io/ByteArrayOutputStream:close	()V
    //   62: aload 4
    //   64: invokevirtual 97	java/io/BufferedInputStream:close	()V
    //   67: aload_0
    //   68: ifnull -58 -> 10
    //   71: aload_0
    //   72: invokevirtual 101	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   75: astore_0
    //   76: new 103	android/graphics/BitmapFactory$Options
    //   79: dup
    //   80: invokespecial 104	android/graphics/BitmapFactory$Options:<init>	()V
    //   83: astore_3
    //   84: aload_3
    //   85: iconst_1
    //   86: putfield 108	android/graphics/BitmapFactory$Options:inJustDecodeBounds	Z
    //   89: aload_0
    //   90: iconst_0
    //   91: aload_0
    //   92: arraylength
    //   93: aload_3
    //   94: invokestatic 114	android/graphics/BitmapFactory:decodeByteArray	([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   97: pop
    //   98: aload_3
    //   99: iconst_0
    //   100: putfield 108	android/graphics/BitmapFactory$Options:inJustDecodeBounds	Z
    //   103: aload_3
    //   104: getfield 118	android/graphics/BitmapFactory$Options:outHeight	I
    //   107: i2f
    //   108: iload_1
    //   109: i2f
    //   110: fdiv
    //   111: f2i
    //   112: istore_2
    //   113: iload_2
    //   114: ifgt +37 -> 151
    //   117: iconst_1
    //   118: istore_1
    //   119: aload_3
    //   120: iload_1
    //   121: putfield 121	android/graphics/BitmapFactory$Options:inSampleSize	I
    //   124: aload_0
    //   125: iconst_0
    //   126: aload_0
    //   127: arraylength
    //   128: aload_3
    //   129: invokestatic 114	android/graphics/BitmapFactory:decodeByteArray	([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   132: astore_0
    //   133: aload_0
    //   134: areturn
    //   135: aload_0
    //   136: aload_3
    //   137: iconst_0
    //   138: iload_2
    //   139: invokevirtual 125	java/io/ByteArrayOutputStream:write	([BII)V
    //   142: goto -96 -> 46
    //   145: astore_0
    //   146: invokestatic 130	java/lang/System:gc	()V
    //   149: aconst_null
    //   150: areturn
    //   151: iload_2
    //   152: istore_1
    //   153: iload_2
    //   154: iconst_3
    //   155: if_icmple -36 -> 119
    //   158: iconst_3
    //   159: istore_1
    //   160: goto -41 -> 119
    //   163: astore_0
    //   164: invokestatic 130	java/lang/System:gc	()V
    //   167: aconst_null
    //   168: astore_0
    //   169: goto -36 -> 133
    //   172: astore_0
    //   173: aconst_null
    //   174: astore_0
    //   175: goto -108 -> 67
    //   178: astore_3
    //   179: goto -112 -> 67
    //   182: astore_0
    //   183: aconst_null
    //   184: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	185	0	paramString	String
    //   0	185	1	paramInt	int
    //   52	104	2	i	int
    //   5	132	3	localObject	Object
    //   178	1	3	localIOException	IOException
    //   36	27	4	localBufferedInputStream	BufferedInputStream
    // Exception table:
    //   from	to	target	type
    //   12	46	145	java/lang/OutOfMemoryError
    //   46	53	145	java/lang/OutOfMemoryError
    //   58	67	145	java/lang/OutOfMemoryError
    //   135	142	145	java/lang/OutOfMemoryError
    //   124	133	163	java/lang/OutOfMemoryError
    //   12	46	172	java/io/IOException
    //   46	53	178	java/io/IOException
    //   58	67	178	java/io/IOException
    //   135	142	178	java/io/IOException
    //   12	46	182	java/net/MalformedURLException
    //   46	53	182	java/net/MalformedURLException
    //   58	67	182	java/net/MalformedURLException
    //   135	142	182	java/net/MalformedURLException
  }
  
  public static Bitmap readBitMapForPJ(Context paramContext, int paramInt1, int paramInt2)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inPreferredConfig = Bitmap.Config.RGB_565;
    localOptions.inPurgeable = true;
    localOptions.inInputShareable = true;
    localOptions.inSampleSize = paramInt2;
    paramContext = paramContext.getResources().openRawResource(paramInt1);
    try
    {
      paramContext = BitmapFactory.decodeStream(paramContext, null, localOptions);
      return paramContext;
    }
    catch (OutOfMemoryError paramContext)
    {
      System.gc();
    }
    return null;
  }
  
  public static Bitmap readBitMapForSD(String paramString, int paramInt)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inPreferredConfig = Bitmap.Config.RGB_565;
    localOptions.inPurgeable = true;
    localOptions.inInputShareable = true;
    localOptions.inSampleSize = paramInt;
    byte[] arrayOfByte = new byte['Ѐ'];
    do
    {
      try
      {
        localBufferedInputStream = new BufferedInputStream(new FileInputStream(paramString), 4096);
        paramString = new ByteArrayOutputStream();
      }
      catch (OutOfMemoryError paramString)
      {
        try
        {
          for (;;)
          {
            BufferedInputStream localBufferedInputStream;
            paramInt = localBufferedInputStream.read(arrayOfByte);
            if (paramInt == -1)
            {
              paramString.close();
              localBufferedInputStream.close();
              break;
            }
            paramString.write(arrayOfByte, 0, paramInt);
          }
          paramString = paramString;
          System.gc();
          return null;
        }
        catch (IOException localIOException) {}
        paramString = paramString.toByteArray();
        try
        {
          paramString = BitmapFactory.decodeByteArray(paramString, 0, paramString.length, localOptions);
          return paramString;
        }
        catch (OutOfMemoryError paramString)
        {
          throw new NullPointerException();
        }
      }
      catch (IOException paramString)
      {
        paramString = null;
      }
      catch (MalformedURLException paramString)
      {
        return null;
      }
    } while (paramString != null);
    return null;
  }
  
  public static Bitmap readBitmapForBig(String paramString, int paramInt)
  {
    int i = 1;
    Object localObject = new byte['Ѐ'];
    do
    {
      for (;;)
      {
        try
        {
          localBufferedInputStream = new BufferedInputStream(new FileInputStream(paramString), 4096);
          paramString = new ByteArrayOutputStream();
        }
        catch (OutOfMemoryError paramString)
        {
          try
          {
            BufferedInputStream localBufferedInputStream;
            int j = localBufferedInputStream.read((byte[])localObject);
            if (j == -1)
            {
              paramString.close();
              localBufferedInputStream.close();
              break;
            }
            paramString.write((byte[])localObject, 0, j);
            continue;
            paramString = paramString;
            System.gc();
            return null;
          }
          catch (IOException localIOException) {}
          paramString = paramString.toByteArray();
          localObject = new BitmapFactory.Options();
          ((BitmapFactory.Options)localObject).inJustDecodeBounds = true;
          BitmapFactory.decodeByteArray(paramString, 0, paramString.length, (BitmapFactory.Options)localObject);
          ((BitmapFactory.Options)localObject).inJustDecodeBounds = false;
          if (paramInt != 0)
          {
            paramInt = (int)(((BitmapFactory.Options)localObject).outHeight / paramInt);
            if (paramInt > 0) {
              continue;
            }
            paramInt = i;
            ((BitmapFactory.Options)localObject).inSampleSize = paramInt;
          }
          try
          {
            paramString = BitmapFactory.decodeByteArray(paramString, 0, paramString.length, (BitmapFactory.Options)localObject);
            return paramString;
            if (paramInt > 16) {
              paramInt = 16;
            }
          }
          catch (OutOfMemoryError paramString)
          {
            System.gc();
            System.runFinalization();
            paramString = null;
          }
        }
        catch (IOException paramString)
        {
          paramString = null;
        }
        catch (MalformedURLException paramString)
        {
          return null;
        }
      }
    } while (paramString != null);
    return null;
  }
  
  public static void savePic(Bitmap paramBitmap, String paramString)
  {
    try
    {
      paramString = new FileOutputStream(paramString);
      paramBitmap.compress(Bitmap.CompressFormat.PNG, 90, paramString);
      paramString.flush();
      paramString.close();
      return;
    }
    catch (IOException paramBitmap) {}catch (FileNotFoundException paramBitmap) {}
  }
  
  public static Bitmap scaleBitMap(Bitmap paramBitmap, float paramFloat1, float paramFloat2)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      Matrix localMatrix = new Matrix();
      localMatrix.postScale(paramFloat1, paramFloat2);
      paramBitmap = Bitmap.createBitmap(paramBitmap, 0, 0, i, j, localMatrix, false);
      return paramBitmap;
    }
    finally
    {
      paramBitmap = finally;
      throw paramBitmap;
    }
  }
  
  public static Bitmap toRoundCorner(Bitmap paramBitmap, int paramInt)
  {
    Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), Bitmap.Config.ARGB_8888);
    Canvas localCanvas = new Canvas(localBitmap);
    Paint localPaint = new Paint();
    Rect localRect = new Rect(0, 0, paramBitmap.getWidth(), paramBitmap.getHeight());
    RectF localRectF = new RectF(localRect);
    float f = paramInt;
    localPaint.setAntiAlias(true);
    localCanvas.drawARGB(0, 0, 0, 0);
    localPaint.setColor(-12434878);
    localCanvas.drawRoundRect(localRectF, f, f, localPaint);
    localPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
    localCanvas.drawBitmap(paramBitmap, localRect, localRect, localPaint);
    return localBitmap;
  }
}
