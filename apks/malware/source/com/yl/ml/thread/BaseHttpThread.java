package com.yl.ml.thread;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import com.yl.codelib.encryption.DESEncryptor;
import com.yl.codelib.encryption.MD5Encoder;
import com.yl.codelib.utils.HttpConnent;
import com.yl.codelib.utils.MyHashMap;
import com.yl.codelib.utils.TimeUtil;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.message.BasicNameValuePair;

public class BaseHttpThread
  implements Runnable
{
  public static String API_KEY = "NWxj3WTj0KkQDU04JqJuSQ==";
  public static final int ParseFail = -2;
  public static final int PostFail = -1;
  public static final int PostSuccess = 1;
  protected Handler handler;
  protected Map maps;
  protected Message msg = new Message();
  protected String url;
  protected String value = null;
  
  public BaseHttpThread() {}
  
  public BaseHttpThread(Context paramContext, Handler paramHandler, Map paramMap)
  {
    this.handler = paramHandler;
    paramContext = paramMap;
    if (paramMap == null) {
      paramContext = new MyHashMap();
    }
    this.maps = paramContext;
  }
  
  public BaseHttpThread(Handler paramHandler, Map paramMap)
  {
    this.handler = paramHandler;
    paramHandler = paramMap;
    if (paramMap == null) {
      paramHandler = new MyHashMap();
    }
    this.maps = paramHandler;
  }
  
  public BaseHttpThread(Handler paramHandler, Map paramMap, Object paramObject)
  {
    this.handler = paramHandler;
    paramHandler = paramMap;
    if (paramMap == null) {
      paramHandler = new MyHashMap();
    }
    this.maps = paramHandler;
  }
  
  public BaseHttpThread(String paramString, Handler paramHandler, Map paramMap)
  {
    this.url = paramString;
    this.handler = paramHandler;
    paramString = paramMap;
    if (paramMap == null) {
      paramString = new MyHashMap();
    }
    this.maps = paramString;
  }
  
  public static String getFullUrl(String paramString, Map paramMap)
  {
    Object localObject = paramString;
    if (!paramString.endsWith("?")) {
      localObject = paramString + "?";
    }
    localObject = new StringBuilder((String)localObject);
    Iterator localIterator;
    if (paramMap != null) {
      localIterator = paramMap.entrySet().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return ((StringBuilder)localObject).toString();
      }
      paramString = (Map.Entry)localIterator.next();
      String str = (String)paramString.getKey();
      paramMap = (String)paramString.getValue();
      paramString = paramMap;
      if (paramMap == null) {
        paramString = "";
      }
      ((StringBuilder)localObject).append(str + "=" + paramString + "&");
    }
  }
  
  public static List getPostParams(Map paramMap)
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator;
    if (paramMap != null) {
      localIterator = paramMap.entrySet().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localArrayList;
      }
      paramMap = (Map.Entry)localIterator.next();
      String str2 = (String)paramMap.getKey();
      String str1 = (String)paramMap.getValue();
      paramMap = str1;
      if (str1 == null) {
        paramMap = "";
      }
      localArrayList.add(new BasicNameValuePair(str2, paramMap));
    }
  }
  
  protected String doBaseHttp(String paramString)
  {
    this.value = HttpConnent.doHttpPost(paramString, getPostParams(this.maps), 0);
    if (this.handler != null)
    {
      if (!this.value.equals("NO")) {
        break label49;
      }
      this.handler.sendEmptyMessage(-1);
    }
    for (;;)
    {
      return this.value;
      label49:
      this.msg.what = 1;
      this.msg.obj = this.value;
      this.handler.sendMessage(this.msg);
    }
  }
  
  protected String doSafeBaseHttp(String paramString)
  {
    String str1 = TimeUtil.getNowTimeNum();
    String str2 = MD5Encoder.EncoderByMd5(str1 + DESEncryptor.getDec(API_KEY));
    this.maps.put("signkey", str2);
    this.maps.put("reqTime", str1);
    this.value = HttpConnent.doHttpPost(paramString, getPostParams(this.maps), 0);
    if (this.handler != null)
    {
      if (!this.value.equals("NO")) {
        break label106;
      }
      this.handler.sendEmptyMessage(-1);
    }
    for (;;)
    {
      return this.value;
      label106:
      this.msg.what = 1;
      this.msg.obj = this.value;
      this.handler.sendMessage(this.msg);
    }
  }
  
  public void run() {}
}
