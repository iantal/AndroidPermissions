package com.moon.core.adapter;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Proxy;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.Log;
import com.c101416193190.util.f;
import com.c101416193190.util.g;
import com.c101416193190.util.h;
import com.c101416193190.util.j;
import java.io.File;
import java.io.PrintStream;

public class JNIUtil
{
  private static final String TAG = "JNIUtil";
  
  public JNIUtil() {}
  
  public static native void a(String paramString);
  
  public static native void b(String paramString);
  
  public static native Object c(String paramString);
  
  public static native void d(Object paramObject);
  
  public static Object dld(String paramString)
  {
    System.out.println(h.a().getFilesDir().toString() + File.separator + f.a(107));
    h.d("fj");
    b("fj");
    try
    {
      paramString = c(paramString);
      return paramString;
    }
    catch (Exception paramString)
    {
      Log.v("JNIUtil", "error");
      paramString.printStackTrace();
      return null;
    }
    finally
    {
      e();
    }
  }
  
  public static native void e();
  
  public static native void f();
  
  public static String formatURL(String paramString)
  {
    Log.v("VS", String.format("[%s][%s]%s%s", new Object[] { "JNIUtil", "JNIUtil", "formatURL  url : ", paramString }));
    return h.a(paramString);
  }
  
  public static String getCipher()
  {
    String str3 = h.e() + "&ntg=" + j.d();
    String str2 = Build.VERSION.RELEASE;
    String str1 = str2;
    if (str2.length() > 3) {
      str1 = Build.VERSION.RELEASE.substring(0, Build.VERSION.RELEASE.lastIndexOf("."));
    }
    if (Build.VERSION.RELEASE.lastIndexOf(".") != -1) {
      return str3 + "&tmv=" + str1;
    }
    return str3;
  }
  
  public static String getNetTypeName()
  {
    Object localObject1 = "";
    Object localObject2 = h.n().getActiveNetworkInfo();
    if (localObject2 != null) {
      localObject1 = ((NetworkInfo)localObject2).getExtraInfo().toLowerCase();
    }
    String str = localObject1 + "&ntg=" + j.d();
    localObject2 = Build.VERSION.RELEASE;
    localObject1 = localObject2;
    if (((String)localObject2).length() > 3) {
      localObject1 = Build.VERSION.RELEASE.substring(0, Build.VERSION.RELEASE.lastIndexOf("."));
    }
    if (Build.VERSION.RELEASE.lastIndexOf(".") != -1) {
      return str + "&tmv=" + (String)localObject1;
    }
    return str;
  }
  
  public static String getPackageName()
  {
    Object localObject = h.a();
    if (localObject != null)
    {
      localObject = File.separator + f.a(69) + File.separator + f.a(69) + File.separator + ((Context)localObject).getPackageName();
      g.a("JNIUtil", "getPackName", "name : " + (String)localObject);
      return localObject;
    }
    g.a("JNIUtil", "getPackName", "getPackName context is null. who did it?");
    return null;
  }
  
  public static String getProxyInfo()
  {
    g.a("JNIUtil", "getProxyInfo", "begin");
    Object localObject = h.n().getActiveNetworkInfo();
    if ((localObject != null) && (((NetworkInfo)localObject).getType() == 0))
    {
      localObject = Proxy.getDefaultHost();
      if (localObject != null)
      {
        localObject = new StringBuffer((String)localObject);
        ((StringBuffer)localObject).append(":").append(Proxy.getDefaultPort());
        g.a("JNIUtil", "getProxyInfo", ((StringBuffer)localObject).toString());
        return ((StringBuffer)localObject).toString();
      }
    }
    g.a("JNIUtil", "getProxyInfo", "null");
    return null;
  }
  
  public static String getSName()
  {
    Object localObject = h.a();
    StringBuilder localStringBuilder = new StringBuilder();
    if (localObject != null)
    {
      localStringBuilder.append("/data/data/");
      localObject = ((Context)localObject).getPackageName();
      g.a("JNIUtil", "pkgname:", (String)localObject);
      localStringBuilder.append((String)localObject);
      localStringBuilder.append("/files/libf-jni.so");
      g.a("JNIUtil", "getSName", "name : " + localStringBuilder.toString());
      return localStringBuilder.toString();
    }
    g.a("JNIUtil", "getSName", "getSName  is null.");
    return h.a().getFilesDir().toString() + File.separator + f.a(107);
  }
  
  public static String getUserProfile()
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append(f.a(106) + h.s());
    localStringBuffer.append(f.a(102) + h.c());
    localStringBuffer.append(f.a(103) + h.r());
    localStringBuffer.append(f.a(104) + Build.VERSION.RELEASE);
    localStringBuffer.append(f.a(105) + Build.MODEL);
    return localStringBuffer.toString();
  }
}
