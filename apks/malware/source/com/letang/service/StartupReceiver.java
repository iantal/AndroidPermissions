package com.letang.service;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import com.letang.JoyConstants;
import java.io.File;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

public class StartupReceiver
  extends BroadcastReceiver
{
  private static long START_INTERVAL = 43200000L;
  long intervalADTime;
  long intervalTime;
  Context mCtx;
  SharedPreferences sp;
  
  public StartupReceiver() {}
  
  private boolean checServiceRunningOrNot(Context paramContext)
  {
    Object localObject = ((ActivityManager)paramContext.getSystemService("activity")).getRunningServices(Integer.MAX_VALUE).iterator();
    ComponentName localComponentName;
    do
    {
      if (!((Iterator)localObject).hasNext()) {
        return false;
      }
      localComponentName = ((ActivityManager.RunningServiceInfo)((Iterator)localObject).next()).service;
    } while (!localComponentName.getClassName().equals(JoyConstants.DEAMON_SERVICE));
    try
    {
      if (localComponentName.getPackageName().equals(paramContext.getApplicationInfo().packageName))
      {
        localObject = new Intent();
        ((Intent)localObject).setComponent(localComponentName);
        paramContext.stopService((Intent)localObject);
        return false;
      }
    }
    catch (SecurityException paramContext)
    {
      paramContext.printStackTrace();
    }
    return true;
  }
  
  private NetworkInfo getNetworkInfo(Context paramContext)
  {
    return ((ConnectivityManager)paramContext.getApplicationContext().getSystemService("connectivity")).getActiveNetworkInfo();
  }
  
  private boolean isNetworkAvaliable(NetworkInfo paramNetworkInfo)
  {
    if (paramNetworkInfo == null) {}
    while ((!paramNetworkInfo.isConnected()) || (!paramNetworkInfo.isAvailable())) {
      return false;
    }
    return true;
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    this.mCtx = paramContext;
    try
    {
      new Thread()
      {
        private void startDeamonService()
        {
          int i = 0;
          int j = i;
          for (;;)
          {
            try
            {
              boolean bool = PlugInTools.checkNeedDownload();
              j = i;
              StartupReceiver.this.sp = StartupReceiver.this.mCtx.getSharedPreferences("AccessLastTime", 2);
              if (bool) {
                continue;
              }
              j = i;
              if (StartupReceiver.this.sp != null) {
                continue;
              }
              j = i;
              StartupReceiver.this.sp.edit().putLong("intervalTime", StartupReceiver.START_INTERVAL).commit();
              i = 1;
              j = i;
              bool = new File(JoyConstants.JOY_AD_PATH + "ad.conf").exists();
              if (bool) {
                i = 1;
              }
            }
            catch (Exception localException1)
            {
              localException1.printStackTrace();
              i = j;
              continue;
            }
            if (i != 0) {}
            try
            {
              Intent localIntent = new Intent();
              localIntent.setClass(StartupReceiver.this.mCtx, DaemonService.class);
              StartupReceiver.this.mCtx.startService(localIntent);
              return;
            }
            catch (Exception localException2)
            {
              long l1;
              long l2;
              long l3;
              localException2.printStackTrace();
            }
            j = i;
            StartupReceiver.this.intervalTime = StartupReceiver.this.sp.getLong("intervalTime", StartupReceiver.START_INTERVAL);
            j = i;
            l1 = Calendar.getInstance().getTimeInMillis();
            j = i;
            l2 = StartupReceiver.this.sp.getLong("time", 0L);
            j = i;
            l3 = StartupReceiver.this.intervalTime;
            if (l1 - l2 < l3)
            {
              i = 0;
            }
            else
            {
              i = 1;
              continue;
              i = 1;
            }
          }
        }
        
        public void run()
        {
          NetworkInfo localNetworkInfo;
          int i;
          int j;
          try
          {
            Thread.sleep(750L);
            if (StartupReceiver.this.checServiceRunningOrNot(StartupReceiver.this.mCtx)) {
              return;
            }
          }
          catch (Exception localException)
          {
            do
            {
              for (;;)
              {
                localException.printStackTrace();
              }
              localNetworkInfo = StartupReceiver.this.getNetworkInfo(StartupReceiver.this.mCtx);
            } while (localNetworkInfo == null);
            i = 0;
            j = 0;
          }
          for (;;)
          {
            if (i >= 3)
            {
              if (j == 0) {
                break;
              }
              startDeamonService();
              return;
            }
            if (StartupReceiver.this.isNetworkAvaliable(localNetworkInfo))
            {
              j = 1;
              i = 3;
            }
            else
            {
              i += 1;
              try
              {
                sleep(1000L);
              }
              catch (InterruptedException localInterruptedException)
              {
                localInterruptedException.printStackTrace();
              }
            }
          }
        }
      }.start();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      return;
    }
    catch (Error paramContext)
    {
      paramContext.printStackTrace();
    }
  }
}
