package com.letang.util;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import java.io.InputStream;

public class ImageUtils
{
  public static int DEFAULT_MAX_DENSITY = 240;
  
  public ImageUtils() {}
  
  public static Bitmap getBitmap(Bitmap paramBitmap, int paramInt)
  {
    return getBitmap(paramBitmap, paramInt, DEFAULT_MAX_DENSITY);
  }
  
  public static Bitmap getBitmap(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    paramBitmap = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), getMatrix(paramInt1, paramInt2), true);
    if (paramBitmap != null) {
      return paramBitmap;
    }
    return null;
  }
  
  public static Bitmap getBitmap(InputStream paramInputStream, int paramInt)
  {
    return getBitmap(paramInputStream, paramInt, DEFAULT_MAX_DENSITY);
  }
  
  public static Bitmap getBitmap(InputStream paramInputStream, int paramInt1, int paramInt2)
  {
    if (paramInputStream != null)
    {
      paramInputStream = BitmapFactory.decodeStream(paramInputStream);
      if (paramInputStream != null)
      {
        paramInputStream = getBitmap(paramInputStream, paramInt1, paramInt2);
        if (paramInputStream != null) {
          return paramInputStream;
        }
      }
    }
    return null;
  }
  
  public static BitmapDrawable getBitmapDrawable(Bitmap paramBitmap)
  {
    if (paramBitmap != null)
    {
      paramBitmap = new BitmapDrawable(paramBitmap);
      if (paramBitmap != null) {
        return paramBitmap;
      }
    }
    return null;
  }
  
  public static BitmapDrawable getBitmapDrawable(InputStream paramInputStream, int paramInt)
  {
    return getBitmapDrawable(paramInputStream, paramInt, DEFAULT_MAX_DENSITY);
  }
  
  public static BitmapDrawable getBitmapDrawable(InputStream paramInputStream, int paramInt1, int paramInt2)
  {
    if (paramInputStream != null)
    {
      paramInputStream = getBitmap(paramInputStream, paramInt1, paramInt2);
      if (paramInputStream != null)
      {
        paramInputStream = getBitmapDrawable(paramInputStream);
        paramInputStream.setTargetDensity(paramInt1);
        if (paramInputStream != null) {
          return paramInputStream;
        }
      }
    }
    return null;
  }
  
  private static Matrix getMatrix(int paramInt1, int paramInt2)
  {
    float f = paramInt1 / paramInt2;
    Matrix localMatrix = new Matrix();
    localMatrix.postScale(f, f);
    return localMatrix;
  }
}
