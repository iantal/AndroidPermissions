package com.letang.util;

import java.io.File;
import java.util.List;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

public class HttpClientUtil
{
  private static final String ENCODEING = "UTF-8";
  private static final int TIME_OUT = 5000;
  public static final DefaultHttpClient httpClient;
  
  static
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    localBasicHttpParams.setParameter("http.protocol.version", HttpVersion.HTTP_1_1);
    localBasicHttpParams.setParameter("http.protocol.content-charset", "UTF-8");
    localBasicHttpParams.setParameter("http.useragent", "Apache-HttpClient/Android");
    localBasicHttpParams.setParameter("http.connection.timeout", Integer.valueOf(5000));
    localBasicHttpParams.setParameter("http.connection.stalecheck", Boolean.valueOf(false));
    SchemeRegistry localSchemeRegistry = new SchemeRegistry();
    localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    localSchemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
    httpClient = new DefaultHttpClient(new ThreadSafeClientConnManager(localBasicHttpParams, localSchemeRegistry), localBasicHttpParams);
  }
  
  public HttpClientUtil() {}
  
  public static HttpResponse get(String paramString)
    throws Exception
  {
    paramString = new HttpGet(paramString);
    return httpClient.execute(paramString);
  }
  
  public static JSONObject getJSON(String paramString)
    throws Exception
  {
    return new JSONObject(getString(paramString));
  }
  
  public static String getString(String paramString)
    throws Exception
  {
    return EntityUtils.toString(get(paramString).getEntity(), "UTF-8");
  }
  
  public static HttpResponse post(String paramString, List paramList)
    throws Exception
  {
    paramString = new HttpPost(paramString);
    paramString.setEntity(new UrlEncodedFormEntity(paramList, "UTF-8"));
    return httpClient.execute(paramString);
  }
  
  public static HttpResponse postImage(String paramString, File paramFile)
    throws Exception
  {
    paramString = new HttpPost(paramString);
    paramString.setEntity(new FileEntity(paramFile, "application/octet-stream"));
    return httpClient.execute(paramString);
  }
  
  public static JSONObject postJSON(String paramString, File paramFile)
    throws Exception
  {
    paramString = new HttpPost(paramString);
    paramString.setEntity(new FileEntity(paramFile, "application/octet-stream"));
    return new JSONObject(EntityUtils.toString(httpClient.execute(paramString).getEntity()));
  }
  
  public static JSONObject postJSON(String paramString, List paramList)
    throws Exception
  {
    return new JSONObject(postString(paramString, paramList));
  }
  
  public static String postString(String paramString, List paramList)
    throws Exception
  {
    return EntityUtils.toString(post(paramString, paramList).getEntity());
  }
  
  public static void removeProxy()
  {
    httpClient.getParams().removeParameter("http.route.default-proxy");
  }
  
  public static void setProxy(String paramString, int paramInt)
  {
    paramString = new HttpHost(paramString, paramInt);
    httpClient.getParams().setParameter("http.route.default-proxy", paramString);
  }
}
