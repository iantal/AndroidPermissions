package com.letang.util;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.AssetManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.letang.JoyConstants;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

public class Utils
{
  public static final String JOY_SHARE_PERFERENCE = "joy_share";
  public static boolean is_exists_sdCard = "mounted".equals(Environment.getExternalStorageState());
  
  public Utils() {}
  
  public static boolean IsNetworkAvailable(Context paramContext)
  {
    try
    {
      paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
      if (paramContext != null)
      {
        paramContext = paramContext.getActiveNetworkInfo();
        if ((paramContext != null) && (paramContext.isConnected()))
        {
          paramContext = paramContext.getState();
          NetworkInfo.State localState = NetworkInfo.State.CONNECTED;
          if (paramContext == localState) {
            return true;
          }
        }
      }
    }
    catch (Exception paramContext)
    {
      Log.v("error", paramContext.toString());
      paramContext.printStackTrace();
    }
    return false;
  }
  
  public static void combineBasicInfo(Context paramContext, String paramString, List<NameValuePair> paramList)
  {
    try
    {
      localObject = (TelephonyManager)paramContext.getSystemService("phone");
      str = ((TelephonyManager)localObject).getSimOperator();
      paramList.add(new BasicNameValuePair("phoneModel", Build.BRAND + "-" + Build.BOARD + "-" + Build.DISPLAY + "-" + Build.DEVICE + "-" + Build.MODEL));
      paramList.add(new BasicNameValuePair("androidVersion", Build.VERSION.SDK + "-" + Build.VERSION.RELEASE));
      paramList.add(new BasicNameValuePair("operator", str));
      paramList.add(new BasicNameValuePair("uid", paramString));
      paramList.add(new BasicNameValuePair("IMEI", ((TelephonyManager)localObject).getDeviceId()));
      paramList.add(new BasicNameValuePair("IMSI", ((TelephonyManager)localObject).getSubscriberId()));
      paramList.add(new BasicNameValuePair("counrty", Locale.getDefault().getCountry()));
      paramList.add(new BasicNameValuePair("language", Locale.getDefault().getLanguage()));
      paramList.add(new BasicNameValuePair("sdcard", String.valueOf(JoyConstants.is_exists_sdCard)));
      ((TelephonyManager)localObject).getDeviceId();
      paramList.add(new BasicNameValuePair("screenType", getScreenType(paramContext)));
    }
    catch (Exception localException)
    {
      for (;;)
      {
        try
        {
          paramString = paramContext.getAssets().open("cha.pro");
          paramContext = new Properties();
        }
        catch (Exception paramContext)
        {
          Object localObject;
          String str;
          paramList.add(new BasicNameValuePair("channelId", "-1"));
          paramList.add(new BasicNameValuePair("gameId", "-1"));
          paramList.add(new BasicNameValuePair("cpId", "-1"));
          paramList.add(new BasicNameValuePair("promoterId", "-1"));
          return;
        }
        try
        {
          paramContext.load(paramString);
          if (paramContext == null) {
            return;
          }
          paramString = paramContext.getProperty("channelId");
          localObject = paramContext.getProperty("gameId");
          str = paramContext.getProperty("cpId");
          paramContext = paramContext.getProperty("promoterId");
          paramList.add(new BasicNameValuePair("channelId", paramString));
          paramList.add(new BasicNameValuePair("gameId", (String)localObject));
          paramList.add(new BasicNameValuePair("cpId", str));
          paramList.add(new BasicNameValuePair("promoterId", paramContext));
          return;
        }
        catch (Exception paramContext)
        {
          continue;
        }
        localException = localException;
        paramList.add(new BasicNameValuePair("operator", "0000"));
        paramList.add(new BasicNameValuePair("uid", paramString));
        paramList.add(new BasicNameValuePair("IMEI", "00000000"));
        paramList.add(new BasicNameValuePair("IMSI", "00000000"));
        paramList.add(new BasicNameValuePair("counrty", "0"));
        paramList.add(new BasicNameValuePair("language", "0"));
        paramList.add(new BasicNameValuePair("sdcard", "false"));
        paramList.add(new BasicNameValuePair("screenType", getScreenType(paramContext)));
        paramList.add(new BasicNameValuePair("androidVersion", String.valueOf(Build.VERSION.SDK_INT)));
      }
    }
  }
  
  public static String getAppId(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getAssets().open("cha.pro");
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext = localProperties.getProperty("gameId");
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  /* Error */
  public static String getEmail(Context paramContext)
  {
    // Byte code:
    //   0: new 246	java/lang/StringBuffer
    //   3: dup
    //   4: invokespecial 247	java/lang/StringBuffer:<init>	()V
    //   7: astore_2
    //   8: aload_0
    //   9: ldc -7
    //   11: invokevirtual 253	android/content/Context:checkCallingOrSelfPermission	(Ljava/lang/String;)I
    //   14: ifne +65 -> 79
    //   17: aload_0
    //   18: invokestatic 259	android/accounts/AccountManager:get	(Landroid/content/Context;)Landroid/accounts/AccountManager;
    //   21: ldc_w 261
    //   24: invokevirtual 265	android/accounts/AccountManager:getAccountsByType	(Ljava/lang/String;)[Landroid/accounts/Account;
    //   27: astore_0
    //   28: iconst_0
    //   29: istore_1
    //   30: iload_1
    //   31: aload_0
    //   32: arraylength
    //   33: if_icmplt +8 -> 41
    //   36: aload_2
    //   37: invokevirtual 266	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   40: areturn
    //   41: aload_2
    //   42: new 95	java/lang/StringBuilder
    //   45: dup
    //   46: aload_0
    //   47: iload_1
    //   48: aaload
    //   49: getfield 271	android/accounts/Account:name	Ljava/lang/String;
    //   52: invokestatic 104	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   55: invokespecial 107	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   58: ldc_w 273
    //   61: invokevirtual 113	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   64: invokevirtual 126	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   67: invokevirtual 276	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   70: pop
    //   71: iload_1
    //   72: iconst_1
    //   73: iadd
    //   74: istore_1
    //   75: goto -45 -> 30
    //   78: astore_0
    //   79: ldc -15
    //   81: areturn
    //   82: astore_0
    //   83: goto -4 -> 79
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	86	0	paramContext	Context
    //   29	46	1	i	int
    //   7	35	2	localStringBuffer	StringBuffer
    // Exception table:
    //   from	to	target	type
    //   8	28	78	java/lang/Error
    //   30	41	78	java/lang/Error
    //   41	71	78	java/lang/Error
    //   8	28	82	java/lang/Exception
    //   30	41	82	java/lang/Exception
    //   41	71	82	java/lang/Exception
  }
  
  public static String getIMEI(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    paramContext = str;
    if (str == null) {
      paramContext = "";
    }
    return paramContext;
  }
  
  public static int getSPType(Context paramContext)
  {
    int j = -1;
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimOperator();
    int i = j;
    if (paramContext != null)
    {
      i = j;
      if (paramContext != "")
      {
        if ((!paramContext.equals("46000")) && (!paramContext.equals("46002"))) {
          break label53;
        }
        i = 0;
      }
    }
    label53:
    do
    {
      return i;
      if (paramContext.equals("46001")) {
        return 1;
      }
      i = j;
    } while (!paramContext.equals("46003"));
    return 2;
  }
  
  public static String getSaveDir(Context paramContext, String paramString, boolean paramBoolean)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    for (;;)
    {
      try
      {
        str.trim();
        paramString = str;
        if (str.equals("")) {
          break label139;
        }
        paramString = str;
        if (str.lastIndexOf("/") == str.length() - 1) {
          break label139;
        }
        paramString = str + "/";
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return null;
      }
      paramString = new File(paramContext);
      if (paramString.exists()) {
        break;
      }
      paramString.mkdirs();
      return paramContext;
      paramContext = Environment.getDataDirectory() + "/data/" + paramContext.getApplicationContext().getPackageName() + "/files/";
      continue;
      label139:
      if (paramBoolean) {
        paramContext = paramString;
      }
    }
    return paramContext;
  }
  
  private static String getScreenType(Context paramContext)
  {
    try
    {
      new DisplayMetrics();
      paramContext = ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay();
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      paramContext.getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.widthPixels;
      int j = localDisplayMetrics.heightPixels;
      paramContext = i + "*" + j + "*" + localDisplayMetrics.density;
      return paramContext;
    }
    catch (Exception paramContext)
    {
      return "0-0";
    }
    catch (Error paramContext) {}
    return "0-0";
  }
  
  public static String getUid(Context paramContext)
  {
    Object localObject1 = "";
    if (JoyConstants.is_exists_sdCard) {}
    try
    {
      localObject1 = new FileInputStream(new File(JoyConstants.DEVICE_KEY_PATH));
      Object localObject2 = new Properties();
      ((Properties)localObject2).load((InputStream)localObject1);
      localObject1 = ((Properties)localObject2).getProperty("userId");
      localObject2 = localObject1;
      if (((String)localObject1).equals("")) {
        localObject2 = paramContext.getSharedPreferences("joy_share", 2).getString("userId", "");
      }
      return localObject2;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
        String str = "";
      }
    }
  }
  
  public static boolean hasSIMCard(Context paramContext)
  {
    switch (((TelephonyManager)paramContext.getSystemService("phone")).getSimState())
    {
    case 1: 
    default: 
      return false;
    }
    return true;
  }
  
  public static boolean inMainland(Context paramContext)
  {
    try
    {
      int i = getSPType(paramContext);
      switch (i)
      {
      default: 
        return false;
      }
      return true;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
  
  public static String readSIMCard(Context paramContext)
  {
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    StringBuffer localStringBuffer = new StringBuffer();
    switch (paramContext.getSimState())
    {
    default: 
      if (paramContext.getSimSerialNumber() != null)
      {
        localStringBuffer.append("@" + paramContext.getSimSerialNumber().toString());
        label95:
        if (!paramContext.getSimOperator().equals("")) {
          break label292;
        }
        localStringBuffer.append("@无法取得供货商代码");
        label115:
        if (!paramContext.getSimOperatorName().equals("")) {
          break label323;
        }
        localStringBuffer.append("@无法取得供货商");
        label135:
        if (!paramContext.getSimCountryIso().equals("")) {
          break label354;
        }
        localStringBuffer.append("@无法取得国籍");
        label155:
        if (!paramContext.getNetworkOperator().equals("")) {
          break label385;
        }
        localStringBuffer.append("@无法取得网络运营商");
        label175:
        if (!paramContext.getNetworkOperatorName().equals("")) {
          break label413;
        }
        localStringBuffer.append("@无法取得网络运营商名称");
        label195:
        if (paramContext.getNetworkType() != 0) {
          break label441;
        }
        localStringBuffer.append("@无法取得网络类型");
      }
      break;
    }
    for (;;)
    {
      return localStringBuffer.toString();
      localStringBuffer.append("无卡");
      break;
      localStringBuffer.append("未知状态");
      break;
      localStringBuffer.append("需要NetworkPIN解锁");
      break;
      localStringBuffer.append("需要PIN解锁");
      break;
      localStringBuffer.append("需要PUK解锁");
      break;
      localStringBuffer.append("良好");
      break;
      localStringBuffer.append("@无法取得SIM卡号");
      break label95;
      label292:
      localStringBuffer.append("@" + paramContext.getSimOperator().toString());
      break label115;
      label323:
      localStringBuffer.append("@" + paramContext.getSimOperatorName().toString());
      break label135;
      label354:
      localStringBuffer.append("@" + paramContext.getSimCountryIso().toString());
      break label155;
      label385:
      localStringBuffer.append("@" + paramContext.getNetworkOperator());
      break label175;
      label413:
      localStringBuffer.append("@" + paramContext.getNetworkOperatorName());
      break label195;
      label441:
      localStringBuffer.append("@" + paramContext.getNetworkType());
    }
  }
}
