package com.letang.platform.util;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Environment;
import dalvik.system.DexClassLoader;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Properties;

public class ApkTools
{
  public static String CHARGE_APK_NAME = "cha.so";
  public static String CHARGE_APK_PRO = "cha.vp";
  
  public ApkTools() {}
  
  public static DexClassLoader getApkLoader(Context paramContext)
  {
    String str = CHARGE_APK_NAME;
    paramContext = Environment.getDataDirectory() + "/data/" + paramContext.getApplicationContext().getPackageName() + "/files/";
    return new DexClassLoader(paramContext + str, paramContext, null, ClassLoader.getSystemClassLoader().getParent());
  }
  
  public static String getApkPath(Context paramContext)
  {
    return Environment.getDataDirectory() + "/data/" + paramContext.getApplicationContext().getPackageName() + "/files/" + CHARGE_APK_NAME;
  }
  
  public static void sureAllApkExists(Context paramContext)
  {
    String str2 = CHARGE_APK_NAME;
    Object localObject3 = CHARGE_APK_PRO;
    for (;;)
    {
      byte[] arrayOfByte;
      int i;
      Object localObject2;
      String str1;
      try
      {
        arrayOfByte = new byte['Ð€'];
        i = 1;
        localObject1 = Environment.getDataDirectory() + "/data/" + paramContext.getApplicationContext().getPackageName() + "/files/";
        localObject2 = new File((String)localObject1);
        if (!((File)localObject2).exists()) {
          ((File)localObject2).mkdirs();
        }
        str1 = localObject1 + str2;
        localObject1 = null;
      }
      catch (Exception paramContext)
      {
        Object localObject1;
        boolean bool;
        paramContext.printStackTrace();
        return;
      }
      try
      {
        localObject2 = paramContext.getPackageManager().getPackageArchiveInfo(str1, 0);
        localObject1 = localObject2;
        if (localObject2 == null)
        {
          i = 0;
          localObject1 = localObject2;
        }
      }
      catch (Exception localException2)
      {
        i = 0;
      }
    }
    localObject2 = new File(str1);
    bool = ((File)localObject2).exists();
    if ((!bool) || (i == 0)) {
      for (;;)
      {
        try
        {
          ((File)localObject2).delete();
          ((File)localObject2).createNewFile();
          paramContext = paramContext.getResources().getAssets().open(str2);
          localObject1 = new BufferedInputStream(paramContext);
          localObject2 = new FileOutputStream(str1, false);
          i = ((BufferedInputStream)localObject1).read(arrayOfByte);
          if (i == -1)
          {
            ((BufferedInputStream)localObject1).close();
            paramContext.close();
            ((FileOutputStream)localObject2).close();
            return;
          }
        }
        catch (Exception localException1)
        {
          localException1.printStackTrace();
          continue;
        }
        ((FileOutputStream)localObject2).write(arrayOfByte, 0, i);
      }
    }
    for (;;)
    {
      try
      {
        localObject2 = paramContext.getResources().getAssets().open((String)localObject3);
        localObject3 = new Properties();
        ((Properties)localObject3).load((InputStream)localObject2);
        i = localException1.versionCode;
        if (Integer.parseInt(((Properties)localObject3).getProperty("verCode")) <= i) {
          break;
        }
        paramContext = paramContext.getResources().getAssets().open(str2);
        BufferedInputStream localBufferedInputStream = new BufferedInputStream(paramContext);
        localObject2 = new FileOutputStream(str1, false);
        i = localBufferedInputStream.read(arrayOfByte);
        if (i == -1)
        {
          localBufferedInputStream.close();
          paramContext.close();
          ((FileOutputStream)localObject2).close();
          return;
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
      ((FileOutputStream)localObject2).write(arrayOfByte, 0, i);
    }
  }
}
