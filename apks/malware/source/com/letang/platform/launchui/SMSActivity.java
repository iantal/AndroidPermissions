package com.letang.platform.launchui;

import android.app.Activity;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.MotionEvent;
import com.letang.service.PlugInTools;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class SMSActivity
  extends Activity
{
  Resources apkResources = null;
  private Class clientClass;
  private Object clientInstance;
  
  public SMSActivity() {}
  
  public Resources getApkFileInfo(Context paramContext, String paramString)
  {
    System.out.println(paramString);
    if ((!new File(paramString).exists()) || (!paramString.toLowerCase().endsWith(".so")))
    {
      System.out.println("文件路径不正确");
      return null;
    }
    try
    {
      Object localObject1 = Class.forName("android.content.pm.PackageParser");
      Object localObject2 = ((Class)localObject1).getConstructor(new Class[] { String.class }).newInstance(new Object[] { paramString });
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      localDisplayMetrics.setToDefaults();
      if (((Class)localObject1).getDeclaredMethod("parsePackage", new Class[] { File.class, String.class, DisplayMetrics.class, Integer.TYPE }).invoke(localObject2, new Object[] { new File(paramString), paramString, localDisplayMetrics, Integer.valueOf(0) }) == null) {
        return null;
      }
      localObject2 = Class.forName("android.content.res.AssetManager");
      localObject1 = ((Class)localObject2).newInstance();
      ((Class)localObject2).getDeclaredMethod("addAssetPath", new Class[] { String.class }).invoke(localObject1, new Object[] { paramString });
      paramContext = paramContext.getResources();
      paramContext = (Resources)Resources.class.getConstructor(new Class[] { localObject1.getClass(), paramContext.getDisplayMetrics().getClass(), paramContext.getConfiguration().getClass() }).newInstance(new Object[] { localObject1, paramContext.getDisplayMetrics(), paramContext.getConfiguration() });
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public Resources getResources()
  {
    if (this.apkResources == null) {
      return super.getResources();
    }
    return this.apkResources;
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    try
    {
      paramBundle = PlugInTools.getApkLoader(this, 0);
      Object localObject = getPackageManager().getPackageArchiveInfo(PlugInTools.getApkPath(0, this), 1);
      if ((((PackageInfo)localObject).activities != null) && (((PackageInfo)localObject).activities.length > 0))
      {
        this.clientClass = paramBundle.loadClass(localObject.activities[0].name);
        this.clientInstance = this.clientClass.getConstructor(new Class[0]).newInstance(new Object[0]);
        localObject = new Class[1];
        paramBundle = new Object[1];
        localObject[0] = Activity.class;
        Method localMethod = this.clientClass.getDeclaredMethod("setActivity", (Class[])localObject);
        paramBundle[0] = this;
        localMethod.invoke(this.clientInstance, paramBundle);
        this.apkResources = getApkFileInfo(getApplicationContext(), PlugInTools.getApkPath(0, this));
        localObject[0] = Bundle.class;
        localObject = this.clientClass.getDeclaredMethod("onCreate", (Class[])localObject);
        ((Method)localObject).setAccessible(true);
        paramBundle[0] = new Bundle();
        ((Method)localObject).invoke(this.clientInstance, paramBundle);
      }
      return;
    }
    catch (Exception paramBundle)
    {
      paramBundle.printStackTrace();
    }
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onDestroy", null);
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, null);
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      localIllegalAccessException.printStackTrace();
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      localInvocationTargetException.printStackTrace();
      return;
    }
    catch (SecurityException localSecurityException)
    {
      localSecurityException.printStackTrace();
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      localNoSuchMethodException.printStackTrace();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    try
    {
      Object localObject = Integer.TYPE;
      localObject = this.clientClass.getDeclaredMethod("onKeyDown", new Class[] { localObject, KeyEvent.class });
      ((Method)localObject).setAccessible(true);
      boolean bool = ((Boolean)((Method)localObject).invoke(this.clientInstance, new Object[] { Integer.valueOf(paramInt), paramKeyEvent })).booleanValue();
      return bool;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return super.onKeyDown(paramInt, paramKeyEvent);
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;)
      {
        localIllegalAccessException.printStackTrace();
      }
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;)
      {
        localInvocationTargetException.printStackTrace();
      }
    }
    catch (SecurityException localSecurityException)
    {
      for (;;)
      {
        localSecurityException.printStackTrace();
      }
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;)
      {
        localNoSuchMethodException.printStackTrace();
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  protected void onPause()
  {
    super.onPause();
  }
  
  public void onStart()
  {
    super.onStart();
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onStart", null);
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, null);
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      localIllegalAccessException.printStackTrace();
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      localInvocationTargetException.printStackTrace();
      return;
    }
    catch (SecurityException localSecurityException)
    {
      localSecurityException.printStackTrace();
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      localNoSuchMethodException.printStackTrace();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    super.onTouchEvent(paramMotionEvent);
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onTouchEvent", new Class[] { MotionEvent.class });
      localMethod.setAccessible(true);
      boolean bool = ((Boolean)localMethod.invoke(this.clientInstance, new Object[] { paramMotionEvent })).booleanValue();
      return bool;
    }
    catch (IllegalArgumentException paramMotionEvent)
    {
      paramMotionEvent.printStackTrace();
      return false;
    }
    catch (IllegalAccessException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (InvocationTargetException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (SecurityException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (NoSuchMethodException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (Exception paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
  }
}
