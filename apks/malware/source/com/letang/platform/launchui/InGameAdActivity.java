package com.letang.platform.launchui;

import android.app.Activity;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.Window;
import com.letang.service.PlugInTools;
import dalvik.system.DexClassLoader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class InGameAdActivity
  extends Activity
{
  public static final int REQUEST_CODE = 100;
  private static Object clientInstance;
  Resources apkResources = null;
  private Class clientClass;
  
  public InGameAdActivity() {}
  
  public Resources getResources()
  {
    if (this.apkResources == null) {
      return super.getResources();
    }
    return this.apkResources;
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    try
    {
      Object localObject = Integer.TYPE;
      Class localClass = Integer.TYPE;
      localObject = this.clientClass.getDeclaredMethod("onActivityResult", new Class[] { localObject, localClass, Intent.class });
      ((Method)localObject).setAccessible(true);
      ((Method)localObject).invoke(clientInstance, new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), paramIntent });
      return;
    }
    catch (SecurityException paramIntent)
    {
      paramIntent.printStackTrace();
      return;
    }
    catch (NoSuchMethodException paramIntent)
    {
      paramIntent.printStackTrace();
      return;
    }
    catch (IllegalArgumentException paramIntent)
    {
      paramIntent.printStackTrace();
      return;
    }
    catch (IllegalAccessException paramIntent)
    {
      paramIntent.printStackTrace();
      return;
    }
    catch (InvocationTargetException paramIntent)
    {
      paramIntent.printStackTrace();
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    if (this.clientClass != null) {
      return;
    }
    super.onCreate(paramBundle);
    requestWindowFeature(1);
    getWindow().setFlags(1024, 1024);
    try
    {
      this.clientClass = PlugInTools.getApkLoader(this, 1).loadClass("com.letang.apkservice.InGameAdShowActivity");
      clientInstance = this.clientClass.getConstructor(new Class[0]).newInstance(new Object[0]);
      paramBundle = new Object[1];
      paramBundle[0] = this;
      this.apkResources = PlugInTools.getApkFileInfo(getApplicationContext(), PlugInTools.getApkPath(1, this));
      setAdActivity();
      setGiftCountAndGiftName();
      setNotifyIconId(getResources().getIdentifier("notify_icon", "drawable", getPackageName()));
      Method localMethod = this.clientClass.getDeclaredMethod("onCreate", new Class[] { Bundle.class });
      localMethod.setAccessible(true);
      paramBundle[0] = new Bundle();
      localMethod.invoke(clientInstance, paramBundle);
      return;
    }
    catch (Exception paramBundle)
    {
      paramBundle.printStackTrace();
    }
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onDestroy", null);
      localMethod.setAccessible(true);
      localMethod.invoke(clientInstance, null);
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      localIllegalAccessException.printStackTrace();
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      localInvocationTargetException.printStackTrace();
      return;
    }
    catch (SecurityException localSecurityException)
    {
      localSecurityException.printStackTrace();
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      localNoSuchMethodException.printStackTrace();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    try
    {
      Object localObject = Integer.TYPE;
      localObject = this.clientClass.getDeclaredMethod("onKeyDown", new Class[] { localObject, KeyEvent.class });
      ((Method)localObject).setAccessible(true);
      boolean bool = ((Boolean)((Method)localObject).invoke(clientInstance, new Object[] { Integer.valueOf(paramInt), paramKeyEvent })).booleanValue();
      return bool;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return super.onKeyDown(paramInt, paramKeyEvent);
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;)
      {
        localIllegalAccessException.printStackTrace();
      }
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;)
      {
        localInvocationTargetException.printStackTrace();
      }
    }
    catch (SecurityException localSecurityException)
    {
      for (;;)
      {
        localSecurityException.printStackTrace();
      }
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;)
      {
        localNoSuchMethodException.printStackTrace();
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  protected void onPause()
  {
    super.onPause();
  }
  
  public void onStart()
  {
    super.onStart();
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onStart", null);
      localMethod.setAccessible(true);
      localMethod.invoke(clientInstance, null);
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      localIllegalAccessException.printStackTrace();
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      localInvocationTargetException.printStackTrace();
      return;
    }
    catch (SecurityException localSecurityException)
    {
      localSecurityException.printStackTrace();
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      localNoSuchMethodException.printStackTrace();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    super.onTouchEvent(paramMotionEvent);
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onTouchEvent", new Class[] { MotionEvent.class });
      localMethod.setAccessible(true);
      boolean bool = ((Boolean)localMethod.invoke(clientInstance, new Object[] { paramMotionEvent })).booleanValue();
      return bool;
    }
    catch (IllegalArgumentException paramMotionEvent)
    {
      paramMotionEvent.printStackTrace();
      return false;
    }
    catch (IllegalAccessException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (InvocationTargetException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (SecurityException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (NoSuchMethodException paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
    catch (Exception paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent.printStackTrace();
      }
    }
  }
  
  void setAdActivity()
  {
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("setActivity", new Class[] { Activity.class });
      localMethod.setAccessible(true);
      localMethod.invoke(clientInstance, new Object[] { this });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  void setGiftCountAndGiftName()
  {
    try
    {
      int i = getIntent().getIntExtra("giftCount", 0);
      String str = getIntent().getStringExtra("giftName");
      Object localObject = Integer.TYPE;
      localObject = this.clientClass.getDeclaredMethod("setGiftCountAndGiftName", new Class[] { localObject, String.class });
      ((Method)localObject).setAccessible(true);
      ((Method)localObject).invoke(clientInstance, new Object[] { Integer.valueOf(i), str });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  void setNotifyIconId(int paramInt)
  {
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("setNotifyIconId", new Class[] { Integer.TYPE });
      localMethod.setAccessible(true);
      localMethod.invoke(clientInstance, new Object[] { Integer.valueOf(paramInt) });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
}
