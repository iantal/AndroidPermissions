package com.android.vending.expansion.zipfile;

import android.content.ContentProvider;
import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.res.AssetFileDescriptor;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.database.MatrixCursor.RowBuilder;
import android.net.Uri;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import com.qbiki.seattleclouds.App;
import java.io.FileNotFoundException;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Locale;

public class APEZProvider
  extends ContentProvider
{
  public static final String[] ALL_FIELDS = { "_id", "ZPFN", "ZFIL", "ZMOD", "ZCRC", "ZCOL", "ZUNL", "ZTYP" };
  public static final int[] ALL_FIELDS_INT = { 0, 1, 2, 3, 4, 5, 6, 7 };
  public static final int COMPLEN_IDX = 5;
  public static final String COMPRESSEDLEN = "ZCOL";
  public static final String COMPRESSIONTYPE = "ZTYP";
  public static final int COMPTYPE_IDX = 7;
  public static final String CRC32 = "ZCRC";
  public static final int CRC_IDX = 4;
  public static final String FILEID = "_id";
  public static final int FILEID_IDX = 0;
  public static final String FILENAME = "ZPFN";
  public static final int FILENAME_IDX = 1;
  public static final String MODIFICATION = "ZMOD";
  public static final int MOD_IDX = 3;
  public static final int UNCOMPLEN_IDX = 6;
  public static final String UNCOMPRESSEDLEN = "ZUNL";
  public static final String ZIPFILE = "ZFIL";
  public static final int ZIPFILE_IDX = 2;
  private ZipResourceFile mAPKExtensionFile;
  private boolean mInit;
  
  public APEZProvider() {}
  
  private String getStringFromBundle(Bundle paramBundle, String paramString1, String paramString2)
  {
    paramBundle = paramBundle.getString(paramString1);
    if (paramBundle == null) {
      return paramString2;
    }
    return paramBundle;
  }
  
  private boolean initIfNecessary()
  {
    if (!this.mInit)
    {
      this.mAPKExtensionFile = App.apkExpansionFile;
      this.mInit = true;
      return true;
    }
    return false;
  }
  
  public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> paramArrayList)
    throws OperationApplicationException
  {
    initIfNecessary();
    return super.applyBatch(paramArrayList);
  }
  
  public int delete(Uri paramUri, String paramString, String[] paramArrayOfString)
  {
    return 0;
  }
  
  public String getAuthority()
  {
    return getContext().getPackageName() + ".apezprovider";
  }
  
  public String getType(Uri paramUri)
  {
    String str = URLConnection.guessContentTypeFromName(paramUri.toString().toLowerCase(Locale.US));
    paramUri = str;
    if (str == null) {
      paramUri = "vnd.android.cursor.item/asset";
    }
    return paramUri;
  }
  
  public Uri insert(Uri paramUri, ContentValues paramContentValues)
  {
    return null;
  }
  
  public boolean onCreate()
  {
    return true;
  }
  
  public AssetFileDescriptor openAssetFile(Uri paramUri, String paramString)
    throws FileNotFoundException
  {
    initIfNecessary();
    paramString = paramUri.getEncodedPath();
    paramUri = paramString;
    if (paramString.startsWith("/")) {
      paramUri = paramString.substring(1);
    }
    return this.mAPKExtensionFile.getAssetFileDescriptor(paramUri);
  }
  
  public ParcelFileDescriptor openFile(Uri paramUri, String paramString)
    throws FileNotFoundException
  {
    initIfNecessary();
    paramUri = openAssetFile(paramUri, paramString);
    if (paramUri != null) {
      return paramUri.getParcelFileDescriptor();
    }
    return null;
  }
  
  public Cursor query(Uri paramUri, String[] paramArrayOfString1, String paramString1, String[] paramArrayOfString2, String paramString2)
  {
    initIfNecessary();
    label30:
    int k;
    int m;
    int i;
    if (this.mAPKExtensionFile == null)
    {
      paramUri = new ZipResourceFile.ZipEntryRO[0];
      if (paramArrayOfString1 != null) {
        break label152;
      }
      paramString1 = ALL_FIELDS_INT;
      paramArrayOfString2 = ALL_FIELDS;
      paramArrayOfString1 = new MatrixCursor(paramArrayOfString2, paramUri.length);
      k = paramString1.length;
      m = paramUri.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= m) {
        return paramArrayOfString1;
      }
      paramArrayOfString2 = paramUri[i];
      paramString2 = paramArrayOfString1.newRow();
      int j = 0;
      label75:
      if (j < k)
      {
        switch (paramString1[j])
        {
        }
        for (;;)
        {
          j += 1;
          break label75;
          paramUri = this.mAPKExtensionFile.getAllEntries();
          break;
          label152:
          j = paramArrayOfString1.length;
          paramString2 = new int[j];
          i = 0;
          paramString1 = paramString2;
          paramArrayOfString2 = paramArrayOfString1;
          if (i >= j) {
            break label30;
          }
          if (paramArrayOfString1[i].equals("_id")) {
            paramString2[i] = 0;
          }
          for (;;)
          {
            i += 1;
            break;
            if (paramArrayOfString1[i].equals("ZPFN")) {
              paramString2[i] = 1;
            } else if (paramArrayOfString1[i].equals("ZFIL")) {
              paramString2[i] = 2;
            } else if (paramArrayOfString1[i].equals("ZMOD")) {
              paramString2[i] = 3;
            } else if (paramArrayOfString1[i].equals("ZCRC")) {
              paramString2[i] = 4;
            } else if (paramArrayOfString1[i].equals("ZCOL")) {
              paramString2[i] = 5;
            } else if (paramArrayOfString1[i].equals("ZUNL")) {
              paramString2[i] = 6;
            } else if (paramArrayOfString1[i].equals("ZTYP")) {
              paramString2[i] = 7;
            }
          }
          paramString2.add(Integer.valueOf(j));
          continue;
          paramString2.add(paramArrayOfString2.mFileName);
          continue;
          paramString2.add(paramArrayOfString2.getZipFileName());
          continue;
          paramString2.add(Long.valueOf(paramArrayOfString2.mWhenModified));
          continue;
          paramString2.add(Long.valueOf(paramArrayOfString2.mCRC32));
          continue;
          paramString2.add(Long.valueOf(paramArrayOfString2.mCompressedLength));
          continue;
          paramString2.add(Long.valueOf(paramArrayOfString2.mUncompressedLength));
          continue;
          paramString2.add(Integer.valueOf(paramArrayOfString2.mMethod));
        }
      }
      i += 1;
    }
    return paramArrayOfString1;
  }
  
  public int update(Uri paramUri, ContentValues paramContentValues, String paramString, String[] paramArrayOfString)
  {
    return 0;
  }
}
