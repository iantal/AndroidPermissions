package com.android.apps.util;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.format.Time;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.Toast;
import com.android.apps.R.drawable;
import com.android.apps.activity.ViewBanner;
import com.android.apps.activity.ViewList;
import com.android.apps.activity.ViewOne;
import com.android.apps.activity.ViewPackage;
import com.android.apps.activity.ViewThree;
import com.android.apps.bean.AdAdvertisement;
import com.android.apps.connect.HttpUtil;
import com.android.apps.listenerinterface.OnAdStateListener;
import com.android.apps.listenerinterface.OnQuietlyDownLintener;
import com.android.apps.threadpool.MercuryExecutorService;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdManager
{
  public static final String ADVIEWTYPE_BANNER = "banner";
  public static final String ADVIEWTYPE_CLASSONE = "classOne";
  public static final String ADVIEWTYPE_MANY = "many";
  public static final String ADVIEWTYPE_ONE = "one";
  public static final String ADVIEWTYPE_THREE = "three";
  public static String LOG_TAG = "AdManager";
  private static final String MERCURY_ID = "MERCURY_ID";
  private static final String MERCURY_SETTING = "MERCURY_SETTING";
  private static final String MERCURY_TESTMODE = "MERCURY_TESTMODE";
  public static final String NOTIFICATION_AD_ID = "NOTIFICATION_AD_ID";
  private static final String NOTIFICATION_AD_INDEX = "NOTIFICATION_AD_INDEX";
  private static final int NOTIFICATION_ID = 37160;
  private static final String PUSH_SWITCH_DATE_SINCE = "PUSH_SWITCH_DATE_SINCE";
  private static final String QUIETLY_DOWNLOAD = "QUIETLY_DOWNLOAD";
  public static Context adContext;
  private static GetAdTask adTask;
  public static OnAdStateListener adactivation;
  private static ApkUtil apkUtil;
  public static String carrier_id;
  public static String connectType;
  public static AdAdvertisement currentAd;
  private static DeviceInfo deviceInfo;
  public static String device_uuid;
  public static List<String> downingList;
  public static int dpi;
  public static String dpiStr;
  public static String dpiStr2;
  public static boolean erInternet;
  public static Context gameContext;
  public static String gamePackage;
  public static String gameVersion;
  public static int height;
  private static HttpUtil httpUtil;
  public static boolean installAllAd = false;
  public static boolean isAutoStartFail;
  public static boolean isConnect;
  public static boolean isDwonFail;
  public static boolean isInstallFail;
  public static String ispingban;
  public static List<AdAdvertisement> listNvAd;
  public static String mac;
  public static String manufacturer;
  public static String mercuryActivationMsg;
  public static String mercuryId;
  public static String mercuryType;
  public static String mercuryViewType;
  public static String name;
  public static OnQuietlyDownLintener quietlyDownLintener;
  public static String resolution;
  public static String sdkVersion;
  static int sleepnum;
  public static String suPackageName;
  public static boolean successActivate = false;
  public static AdAdvertisement successInstallAd;
  static UserInfo userInfo;
  public static int width;
  private static float xdpi;
  private static float ydpi;
  public Context mContext = null;
  
  static
  {
    isDwonFail = false;
    isInstallFail = false;
    isAutoStartFail = false;
    erInternet = false;
    sleepnum = 0;
  }
  
  public AdManager() {}
  
  public static void adViewDestory()
  {
    if (adContext != null) {
      ((Activity)adContext).finish();
    }
  }
  
  public static void checkQuietlyDownloadPermission(Context paramContext)
  {
    if ((CheckNet.isWifiEnable()) && (!isQuietlyDownloadEnable(paramContext)))
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(paramContext);
      localBuilder.setMessage("开启极速热点游戏推送功能，在wifi环境下自动获取热门游戏推荐，安装无需等下载。");
      localBuilder.setPositiveButton("马上开启", new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          AdManager.setQuietlyDownload(this.ar, true);
          if ((CheckNet.isWifiEnable()) && (AdManager.listNvAd != null) && (AdManager.listNvAd.size() != 0) && (SystemProject.checkSDcard())) {
            AdManager.apkUtil.quietlyDown(AdManager.listNvAd);
          }
          HashMap localHashMap = new HashMap();
          localHashMap.put("AppPackageName", this.ar.getPackageName());
          localHashMap.put("Mercury_ID", AdManager.getMercuryId(this.ar));
          LoggerUtil.log(this.ar, "M_Enable_QuietDownload", localHashMap);
          paramAnonymousDialogInterface.dismiss();
        }
      });
      localBuilder.setNegativeButton("下次再试", new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          HashMap localHashMap = new HashMap();
          localHashMap.put("AppPackageName", this.ar.getPackageName());
          localHashMap.put("Mercury_ID", AdManager.getMercuryId(this.ar));
          LoggerUtil.log(this.ar, "M_Disable_QuietDownload", localHashMap);
          paramAnonymousDialogInterface.dismiss();
        }
      });
      localBuilder.setCancelable(false);
      localBuilder.show();
    }
  }
  
  public static void getAd()
  {
    Object localObject = LOG_TAG;
    localObject = new HashMap();
    ((HashMap)localObject).put("AppPackageName", gameContext.getPackageName());
    ((HashMap)localObject).put("Mercury_ID", getMercuryId(gameContext));
    LoggerUtil.log(gameContext, "M_Request_AdList", (Map)localObject);
    apkUtil = new ApkUtil(gameContext);
    if (!isConnect) {
      listNvAd = NativeAd.serchNvAd();
    }
    if (isConnect)
    {
      if (!userInfo.isLastConnect())
      {
        localObject = LOG_TAG;
        httpUtil.sendInedAd();
      }
      if (mercuryType.equals("l")) {
        listNvAd = NativeAd.serchNvAd();
      }
    }
    else
    {
      localObject = apkUtil.filterAd(listNvAd);
      listNvAd = (List)localObject;
      if (((List)localObject).size() == 0)
      {
        if ((!isConnect) || ("banner".equals(mercuryViewType)) || (mercuryType.equals("l"))) {
          break label297;
        }
        localObject = httpUtil.getOnLineAd(true);
        listNvAd = (List)localObject;
        if (localObject == null) {
          break label252;
        }
        localObject = apkUtil.filterAd(listNvAd);
        listNvAd = (List)localObject;
        if (((List)localObject).size() == 0)
        {
          localObject = LOG_TAG;
          installAllAd = true;
        }
      }
    }
    for (;;)
    {
      if (mercuryViewType != null)
      {
        localObject = adactivation;
        if (localObject != null) {
          ((OnAdStateListener)localObject).notifyAdViewType(mercuryViewType);
        }
      }
      pushAdToNotificationBar();
      return;
      listNvAd = httpUtil.getOnLineAd(false);
      break;
      label252:
      if (!mercuryType.equals("l"))
      {
        localObject = new ArrayList();
        listNvAd = (List)localObject;
        ((List)localObject).add(apkUtil.setNullAd("暂时没有推荐", "过段时间再来看看吧"));
        continue;
        label297:
        localObject = new ArrayList();
        listNvAd = (List)localObject;
        ((List)localObject).add(apkUtil.setNullAd("暂时没有推荐", "请联网看看吧"));
      }
    }
  }
  
  public static String getDpiStr(int paramInt)
  {
    switch (paramInt)
    {
    }
    for (;;)
    {
      return dpiStr;
      if (dpi <= 120)
      {
        dpiStr = "image/ldpi/s_ldpi_";
        dpiStr2 = "l";
      }
      else if ((120 < dpi) && (dpi <= 160))
      {
        dpiStr = "image/mdpi/s_mdpi_";
        dpiStr2 = "m";
      }
      else if ((160 < dpi) && (dpi <= 240))
      {
        dpiStr = "image/hdpi/s_hdpi_";
        dpiStr2 = "h";
      }
      else if ((240 < dpi) && (dpi <= 320))
      {
        dpiStr = "image/xhdpi/s_xhdpi_";
        dpiStr2 = "xh";
      }
      else if (320 < dpi)
      {
        dpiStr = "image/xhdpi/s_xhdpi_";
        dpiStr2 = "xh";
        continue;
        if (dpi <= 120)
        {
          dpiStr = "image/ldpi/l_ldpi_";
          dpiStr2 = "l";
        }
        else if ((120 < dpi) && (dpi <= 160))
        {
          dpiStr = "image/mdpi/l_mdpi_";
          dpiStr2 = "m";
        }
        else if ((160 < dpi) && (dpi <= 240))
        {
          dpiStr = "image/hdpi/l_hdpi_";
          dpiStr2 = "h";
        }
        else if ((240 < dpi) && (dpi <= 320))
        {
          dpiStr = "image/xhdpi/l_xhdpi_";
          dpiStr2 = "xh";
        }
        else if (320 < dpi)
        {
          dpiStr = "image/xhdpi/l_xhdpi_";
          dpiStr2 = "xh";
          continue;
          if (dpi <= 120)
          {
            dpiStr = "image/ldpi/b_ldpi_";
            dpiStr2 = "l";
          }
          else if ((120 < dpi) && (dpi <= 160))
          {
            dpiStr = "image/mdpi/b_mdpi_";
            dpiStr2 = "m";
          }
          else if ((160 < dpi) && (dpi <= 240))
          {
            dpiStr = "image/hdpi/b_hdpi_";
            dpiStr2 = "h";
          }
          else if ((240 < dpi) && (dpi <= 320))
          {
            dpiStr = "image/xhdpi/b_xhdpi_";
            dpiStr2 = "xh";
          }
          else if (320 < dpi)
          {
            dpiStr = "image/xhdpi/b_xhdpi_";
            dpiStr2 = "xh";
          }
        }
      }
    }
  }
  
  public static boolean getManifestMetaValue(String paramString)
  {
    try
    {
      boolean bool = gameContext.getPackageManager().getApplicationInfo(gameContext.getPackageName(), 128).metaData.getBoolean(paramString);
      return bool;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      Log.w(LOG_TAG, localNameNotFoundException.getMessage() + " unknown meta key or not exist:" + paramString);
    }
    return false;
  }
  
  public static String getMercuryId(Context paramContext)
  {
    return paramContext.getSharedPreferences("MERCURY_SETTING", 0).getString("MERCURY_ID", null);
  }
  
  private static AdAdvertisement getNotificationAd(Context paramContext, List<AdAdvertisement> paramList)
  {
    int i = paramContext.getSharedPreferences("MERCURY_SETTING", 0).getInt("NOTIFICATION_AD_INDEX", 0);
    if (i >= paramList.size()) {
      i = 0;
    }
    for (;;)
    {
      paramList = (AdAdvertisement)paramList.get(i);
      paramContext.getSharedPreferences("MERCURY_SETTING", 0).edit().putInt("NOTIFICATION_AD_INDEX", i + 1).commit();
      return paramList;
    }
  }
  
  public static boolean getPersistTestMode(Context paramContext)
  {
    return paramContext.getSharedPreferences("MERCURY_SETTING", 0).getBoolean("MERCURY_TESTMODE", false);
  }
  
  public static AdAdvertisement getSuccInsAd()
  {
    if (successInstallAd != null) {
      return successInstallAd;
    }
    return null;
  }
  
  public static boolean getSuccessActivate()
  {
    return successActivate;
  }
  
  public static void init(Context paramContext, String paramString, OnAdStateListener paramOnAdStateListener)
  {
    
    if (getMercuryId(paramContext) == null) {
      saveMercuryId(paramContext, paramString);
    }
    downingList = new ArrayList();
    deviceInfo = new DeviceInfo();
    userInfo = new UserInfo();
    httpUtil = new HttpUtil();
    adactivation = paramOnAdStateListener;
    gameContext = paramContext;
    mercuryId = paramString;
    mercuryType = paramString.split("_")[0];
    paramString = LOG_TAG;
    new StringBuilder("mercuryType:").append(mercuryType).toString();
    DeviceInfo.mContext = paramContext;
    DeviceInfo.mContext = paramContext;
    NativeAd.mContext = paramContext;
    SystemProject.mContext = paramContext;
    JsonUtil.mContext = paramContext;
    isConnect = CheckNet.isConnect();
    SystemProject.initSDPath();
    name = deviceInfo.getName();
    device_uuid = deviceInfo.getPhoneImei();
    carrier_id = deviceInfo.getSimOperatorName();
    manufacturer = deviceInfo.getManufacturer();
    paramString = new DisplayMetrics();
    ((Activity)paramContext).getWindowManager().getDefaultDisplay().getMetrics(paramString);
    mac = deviceInfo.getLocalMacAddress();
    gamePackage = userInfo.getGamePackage(paramContext);
    gameVersion = userInfo.getVersion(paramContext);
    sdkVersion = "android|" + deviceInfo.getSdkVersion();
    connectType = DeviceInfo.getConnectType();
    if (name == null) {
      name = "-1";
    }
    if (device_uuid == null) {
      device_uuid = "-1";
    }
    if ((carrier_id == null) || ("".equals(carrier_id.trim()))) {
      carrier_id = "-1";
    }
    if (manufacturer == null) {
      manufacturer = "-1";
    }
    if (mac == null) {
      mac = "-1";
    }
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("检查当前网络是否连接~~~~~~:").append(isConnect).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("mercuryId为~~~~~~:").append(mercuryId).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("carrier_id为~~~~~:").append(carrier_id).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("device_uuid为~~~~~:").append(device_uuid).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("name为~~~~~~:").append(name).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("mac地址为~~~~~~:").append(mac).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("游戏报名~~~~~~~~~~：").append(userInfo.getGamePackage(paramContext)).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("游戏版本~~~~~~~~~~：").append(userInfo.getVersion(paramContext)).toString();
    paramOnAdStateListener = LOG_TAG;
    new StringBuilder("SDK版本~~~~~~~~~~：").append(sdkVersion).toString();
    int i = paramString.densityDpi;
    dpi = i;
    if (i <= 120) {
      dpiStr2 = "l";
    }
    for (;;)
    {
      initDPI(paramContext);
      initScreenWH(paramContext);
      paramString = LOG_TAG;
      new StringBuilder("判断是不是平板：").append(isPad(paramContext)).toString();
      ispingban = isPad(paramContext);
      if ((isPad(paramContext)) && (height > 1000))
      {
        dpiStr = "image/xhdpi/l_xhdpi_";
        dpiStr2 = "xh";
      }
      resolution = width + "," + height;
      userInfo.checkDownloadFiles();
      userInfo.checkHandDownloadFiles();
      paramContext = LOG_TAG;
      new StringBuilder("分辨率：").append(resolution).toString();
      paramContext = new GetAdTask();
      adTask = paramContext;
      paramContext.execute(new Void[0]);
      return;
      if ((120 < dpi) && (dpi <= 160)) {
        dpiStr2 = "m";
      } else if ((160 < dpi) && (dpi <= 240)) {
        dpiStr2 = "h";
      } else if ((240 < dpi) && (dpi <= 320)) {
        dpiStr2 = "xh";
      } else if (320 < dpi) {
        dpiStr2 = "xh";
      }
    }
  }
  
  public static void initAdView()
  {
    try
    {
      Object localObject1 = LOG_TAG;
      new StringBuilder("生成广告页面:").append(mercuryViewType).toString();
      if (mercuryViewType == null)
      {
        Thread.currentThread();
        Thread.sleep(1000L);
        sleepnum += 1;
        localObject1 = LOG_TAG;
        new StringBuilder("现在的i为：").append(sleepnum).toString();
        if (sleepnum == 10)
        {
          mercuryViewType = "one";
          listNvAd = NativeAd.serchNvAd();
          localObject1 = apkUtil.filterAd(listNvAd);
          listNvAd = (List)localObject1;
          if (((List)localObject1).size() == 0) {
            listNvAd.add(apkUtil.setNullAd("暂时没有推荐", "过段时间再来看看吧"));
          }
          sleepnum = 0;
        }
        initAdView();
        return;
      }
      if (installAllAd)
      {
        localObject1 = adactivation;
        if (localObject1 == null) {
          return;
        }
        ((OnAdStateListener)localObject1).onUnavailableAds();
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      return;
    }
    Object localObject2 = new Intent();
    if (mercuryViewType != null)
    {
      Object localObject3 = LOG_TAG;
      new StringBuilder("mercuryViewType:").append(mercuryViewType).toString();
      if (!mercuryViewType.equals("banner"))
      {
        if (mercuryViewType.equals("many"))
        {
          dpiStr = getDpiStr(0);
          ((Intent)localObject2).setClass(gameContext, ViewList.class);
        }
        for (;;)
        {
          gameContext.startActivity((Intent)localObject2);
          return;
          if (mercuryViewType.equals("three"))
          {
            dpiStr = getDpiStr(0);
            ((Intent)localObject2).setClass(gameContext, ViewThree.class);
          }
          else if (mercuryViewType.equals("classOne"))
          {
            dpiStr = getDpiStr(0);
            ((Intent)localObject2).setClass(gameContext, ViewPackage.class);
          }
          else
          {
            dpiStr = getDpiStr(1);
            ((Intent)localObject2).setClass(gameContext, ViewOne.class);
          }
        }
      }
      adContext = gameContext;
      dpiStr = getDpiStr(2);
      localObject2 = new ViewBanner(gameContext);
      localObject3 = new RelativeLayout.LayoutParams(-2, -2);
      ((RelativeLayout.LayoutParams)localObject3).addRule(13, -1);
      ((Activity)gameContext).addContentView((View)localObject2, (ViewGroup.LayoutParams)localObject3);
    }
  }
  
  public static void initDPI(Context paramContext)
  {
    xdpi = paramContext.getResources().getDisplayMetrics().xdpi;
    ydpi = paramContext.getResources().getDisplayMetrics().ydpi;
  }
  
  private static void initScreenWH(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = paramContext.getApplicationContext().getResources().getDisplayMetrics();
    if (paramContext.getResources().getConfiguration().orientation == 1)
    {
      width = localDisplayMetrics.widthPixels;
      height = localDisplayMetrics.heightPixels;
      return;
    }
    width = localDisplayMetrics.heightPixels;
    height = localDisplayMetrics.widthPixels;
  }
  
  public static final boolean isDateExpired(int paramInt1, int paramInt2, int paramInt3)
  {
    Time localTime = new Time("GMT+8");
    localTime.setToNow();
    new StringBuilder("Current date is ").append(localTime.year).append("-").append(localTime.month + 1).append("-").append(localTime.monthDay).append(" and target time is ").append(paramInt1).append("-").append(paramInt2).append("-").append(paramInt3).toString();
    return (paramInt1 <= localTime.year) && ((paramInt1 != localTime.year) || (paramInt2 <= localTime.month + 1)) && ((paramInt1 != localTime.year) || (paramInt2 != localTime.month + 1) || (paramInt3 <= localTime.monthDay));
  }
  
  public static boolean isPad(Context paramContext)
  {
    if ((height == 0) || (width == 0)) {
      initScreenWH(paramContext);
    }
    if ((xdpi == 0.0F) || (ydpi == 0.0F)) {
      initDPI(paramContext);
    }
    return Math.sqrt(width * width / (xdpi * xdpi) + height * height / (ydpi * ydpi)) > 6.0D;
  }
  
  private static boolean isPushNotificationEnable(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("PUSH_SWITCH_DATE_SINCE");
      paramContext = String.valueOf(i);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        Log.w(LOG_TAG, paramContext.getMessage() + " unknown meta key or not exist:PUSH_SWITCH_DATE_SINCE");
        paramContext = null;
      }
      if (paramContext.length() != 8) {
        break label113;
      }
      return isDateExpired(Integer.parseInt(paramContext.substring(0, 4)), Integer.parseInt(paramContext.substring(4, 6)), Integer.parseInt(paramContext.substring(6, 8)));
      label113:
      String str = LOG_TAG;
      new StringBuilder("Not validate date:").append(paramContext).toString();
    }
    return paramContext == null;
  }
  
  public static boolean isQuietlyDownloadEnable(Context paramContext)
  {
    return paramContext.getSharedPreferences("MERCURY_SETTING", 0).getBoolean("QUIETLY_DOWNLOAD", false);
  }
  
  public static boolean isTestMode()
  {
    return gameContext.getSharedPreferences("MERCURY_SETTING", 0).getBoolean("MERCURY_TESTMODE", false);
  }
  
  public static void openConnect(List<AdAdvertisement> paramList, Context paramContext)
  {
    String str = LOG_TAG;
    if ((paramList != null) && (paramList.size() != 0) && (!isConnect) && (((AdAdvertisement)paramList.get(0)).getApkUrl().equals(" ")))
    {
      paramList = LOG_TAG;
      Toast.makeText(paramContext, "检测到您目前没有连接网络，请链接网络以供激活", 0).show();
      paramList = new AlertDialog.Builder(paramContext).setMessage("当前网络连接异常，请检查网络设置。");
      paramList.setPositiveButton("设置网络", new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          Intent localIntent = new Intent("android.settings.SETTINGS");
          ((Activity)this.as).startActivityForResult(localIntent, 1024);
          paramAnonymousDialogInterface.dismiss();
          paramAnonymousDialogInterface.cancel();
        }
      }).setNeutralButton("退出", new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          paramAnonymousDialogInterface.cancel();
          ((Activity)AdManager.gameContext).finish();
          ((Activity)AdManager.adContext).finish();
        }
      }).create();
      paramList.show();
    }
  }
  
  private static void pushAdToNotificationBar()
  {
    if ((listNvAd != null) && (!listNvAd.isEmpty()) && (isPushNotificationEnable(gameContext)))
    {
      if ((listNvAd.size() == 1) && (((AdAdvertisement)listNvAd.get(0)).getName().equals("暂时没有推荐"))) {
        return;
      }
      AdAdvertisement localAdAdvertisement = getNotificationAd(gameContext, listNvAd);
      localObject1 = LOG_TAG;
      new StringBuilder("Start to push ").append(localAdAdvertisement.getName()).append(" to notification bar.").toString();
      Object localObject2 = new HashMap();
      ((HashMap)localObject2).put("AppPackageName", gameContext.getPackageName());
      ((HashMap)localObject2).put("AdName", localAdAdvertisement.getName());
      ((HashMap)localObject2).put("AdId", String.valueOf(localAdAdvertisement.getId()));
      int i;
      long l;
      if (mercuryId == null)
      {
        localObject1 = getMercuryId(gameContext);
        ((HashMap)localObject2).put("Mercury_ID", localObject1);
        LoggerUtil.log(gameContext, "M_Notification_Push", (Map)localObject2);
        localObject1 = (NotificationManager)gameContext.getSystemService("notification");
        ((NotificationManager)localObject1).cancel(37160);
        i = R.drawable.recommend_notification_bar_icon;
        l = System.currentTimeMillis() % 3L;
        if (l != 0L) {
          break label339;
        }
        i = R.drawable.recommend_notification_bar_icon;
      }
      for (;;)
      {
        localObject2 = new Notification(i, localAdAdvertisement.getApkInfo(), System.currentTimeMillis());
        Object localObject3 = new Intent(gameContext, ViewOne.class);
        ((Intent)localObject3).putExtra("NOTIFICATION_AD_ID", localAdAdvertisement.getId());
        ((Intent)localObject3).setFlags(603979776);
        localObject3 = PendingIntent.getActivity(gameContext, 0, (Intent)localObject3, 134217728);
        ((Notification)localObject2).setLatestEventInfo(gameContext, localAdAdvertisement.getName(), localAdAdvertisement.getApkInfo(), (PendingIntent)localObject3);
        ((NotificationManager)localObject1).notify(37160, (Notification)localObject2);
        return;
        localObject1 = mercuryId;
        break;
        label339:
        if (l == 1L) {
          i = R.drawable.recommend_notification_bar_icon2;
        } else if (l == 2L) {
          i = R.drawable.recommend_notification_bar_icon3;
        }
      }
    }
    Object localObject1 = LOG_TAG;
  }
  
  private static void saveMercuryId(Context paramContext, String paramString)
  {
    paramContext.getSharedPreferences("MERCURY_SETTING", 0).edit().putString("MERCURY_ID", paramString).commit();
  }
  
  public static void setQuietlyDownload(Context paramContext, boolean paramBoolean)
  {
    paramContext.getSharedPreferences("MERCURY_SETTING", 0).edit().putBoolean("QUIETLY_DOWNLOAD", paramBoolean).commit();
  }
  
  public static void setTestMode(boolean paramBoolean)
  {
    gameContext.getSharedPreferences("MERCURY_SETTING", 0).edit().putBoolean("MERCURY_TESTMODE", paramBoolean).commit();
  }
  
  public static void stopQuietlyDownload()
  {
    com.android.apps.activity.BGDownloadService.downloading = false;
    com.android.apps.activity.DownloadService.hdownloading = false;
    if (downingList.size() > 0)
    {
      int i = 0;
      if (i < downingList.size())
      {
        String str = (String)downingList.get(i);
        File localFile = new File(Config.AD_APK_PATH + File.separator + str);
        if (localFile.exists()) {
          localFile.delete();
        }
        if (str.startsWith("j")) {
          userInfo.removeDownloadAd(str);
        }
        for (;;)
        {
          i += 1;
          break;
          if (str.startsWith("s")) {
            userInfo.removeHandDownloadAd(str);
          }
        }
      }
    }
  }
  
  public static class GetAdTask
    extends AsyncTask<Void, Void, Void>
  {
    public GetAdTask() {}
    
    protected Void doInBackground(Void... paramVarArgs)
    {
      if ((AdManager.isConnect) && (AdManager.userInfo.isFirstLogin()))
      {
        paramVarArgs = AdManager.LOG_TAG;
        AdManager.httpUtil.sendUserInfo();
      }
      paramVarArgs = AdManager.LOG_TAG;
      AdManager.getAd();
      return null;
    }
  }
}
