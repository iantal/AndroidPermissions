package com.android.apps.util;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import com.android.apps.bean.AdAdvertisement;
import com.android.apps.bean.OffLineAdvertisement;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public class UserInfo
{
  public static Context mContext;
  private File adfile;
  private File file;
  
  public UserInfo() {}
  
  public void addDownlaodAd(String paramString)
  {
    Properties localProperties = new Properties();
    localProperties.put(paramString, "fail");
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "downloadFail.txt");
      paramString = new FileOutputStream(this.file, true);
      localProperties.store(paramString, "");
      paramString.close();
      return;
    }
    catch (FileNotFoundException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public void addHandDownlaodAd(String paramString)
  {
    Properties localProperties = new Properties();
    localProperties.put(paramString, "fail");
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "handDownloadFail.txt");
      paramString = new FileOutputStream(this.file, true);
      localProperties.store(paramString, "");
      paramString.close();
      return;
    }
    catch (FileNotFoundException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public Object checkAd(String paramString)
  {
    Properties localProperties = new Properties();
    try
    {
      this.adfile = new File(Config.GAME_BASE_PATH + File.separator, "adInfo.txt");
      FileInputStream localFileInputStream = new FileInputStream(this.adfile);
      localProperties.load(localFileInputStream);
      localFileInputStream.close();
      localProperties.get(paramString);
      if (localProperties.get(paramString) == null) {
        return localProperties.get(paramString);
      }
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      for (;;)
      {
        localFileNotFoundException.printStackTrace();
      }
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
    return localProperties.get(paramString).toString();
  }
  
  public void checkDownloadFiles()
  {
    Object localObject1 = new Properties();
    try
    {
      if ((Config.GAME_BASE_PATH != null) && (!"".equals(Config.GAME_BASE_PATH)))
      {
        this.file = new File(Config.GAME_BASE_PATH + File.separator, "downloadFail.txt");
        if ((this.file.isFile()) && (this.file.exists()))
        {
          localObject2 = new FileInputStream(this.file);
          ((Properties)localObject1).load((InputStream)localObject2);
          ((FileInputStream)localObject2).close();
        }
      }
      new HashSet();
      Object localObject2 = ((Properties)localObject1).keySet().iterator();
      while (((Iterator)localObject2).hasNext())
      {
        Object localObject3 = ((Iterator)localObject2).next().toString();
        if (((Properties)localObject1).get(localObject3).equals("fail"))
        {
          new StringBuilder("我现在要删除的名字：").append(Config.GAME_BASE_PATH).append(File.separator).append((String)localObject3).toString();
          localObject3 = new File(Config.GAME_BASE_PATH + File.separator + "adApk" + File.separator + (String)localObject3);
          if (((File)localObject3).exists()) {
            ((File)localObject3).delete();
          }
        }
      }
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        localException2.printStackTrace();
      }
      try
      {
        localObject1 = new FileOutputStream(new File(Config.GAME_BASE_PATH + File.separator, "downloadFail.txt"));
        ((FileOutputStream)localObject1).flush();
        ((FileOutputStream)localObject1).close();
        return;
      }
      catch (Exception localException1)
      {
        localException1.printStackTrace();
      }
    }
  }
  
  public void checkHandDownloadFiles()
  {
    Object localObject1 = new Properties();
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "handDownloadFail.txt");
      Object localObject2 = new FileInputStream(this.file);
      ((Properties)localObject1).load((InputStream)localObject2);
      ((FileInputStream)localObject2).close();
      new HashSet();
      localObject2 = ((Properties)localObject1).keySet().iterator();
      while (((Iterator)localObject2).hasNext())
      {
        Object localObject3 = ((Iterator)localObject2).next().toString();
        if (((Properties)localObject1).get(localObject3).equals("fail"))
        {
          new StringBuilder("我现在要删除的名字：").append(Config.GAME_BASE_PATH).append(File.separator).append((String)localObject3).toString();
          localObject3 = new File(Config.GAME_BASE_PATH + File.separator + "adApk" + File.separator + (String)localObject3);
          if (((File)localObject3).exists()) {
            ((File)localObject3).delete();
          }
        }
      }
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        localException2.printStackTrace();
      }
      try
      {
        localObject1 = new FileOutputStream(new File(Config.GAME_BASE_PATH + File.separator, "handDownloadFail.txt"));
        ((FileOutputStream)localObject1).flush();
        ((FileOutputStream)localObject1).close();
        return;
      }
      catch (Exception localException1)
      {
        localException1.printStackTrace();
      }
    }
  }
  
  public String getGamePackage(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageName();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public String getVersion(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).versionName;
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public void initAdInfo(String paramString1, String paramString2)
  {
    try
    {
      Properties localProperties = new Properties();
      localProperties.put(paramString1, paramString2);
      this.adfile = new File(Config.GAME_BASE_PATH + File.separator, "adInfo.txt");
      paramString1 = new FileOutputStream(this.adfile, true);
      localProperties.store(paramString1, "");
      paramString1.close();
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public void initInedAdinfo()
  {
    OffLineAdvertisement localOffLineAdvertisement;
    Gson localGson;
    File localFile;
    FileInputStream localFileInputStream;
    for (;;)
    {
      try
      {
        localOffLineAdvertisement = new OffLineAdvertisement();
        localOffLineAdvertisement.setGamePackage(AdManager.gamePackage);
        localOffLineAdvertisement.setGameVersion(AdManager.gameVersion);
        localOffLineAdvertisement.setImei(AdManager.device_uuid);
        localOffLineAdvertisement.setMacAddress(AdManager.mac);
        localOffLineAdvertisement.setMid(AdManager.mercuryId);
        localOffLineAdvertisement.setMobile(AdManager.name);
        localOffLineAdvertisement.setManufacturer(AdManager.manufacturer);
        localOffLineAdvertisement.setNetworkType(AdManager.connectType);
        localOffLineAdvertisement.setOsVersion(AdManager.sdkVersion);
        if ((AdManager.carrier_id != null) && (!"".equals(AdManager.carrier_id.trim())))
        {
          localOffLineAdvertisement.setImsi(AdManager.carrier_id);
          Object localObject1 = localOffLineAdvertisement.getInstallAds();
          long l = System.currentTimeMillis();
          ((Map)localObject1).put(Integer.valueOf(AdManager.successInstallAd.getId()), Long.valueOf(l));
          localOffLineAdvertisement.setInstallAds((Map)localObject1);
          localGson = new Gson();
          localFile = new File(Config.GAME_BASE_PATH + File.separator, "inedAd.txt");
          localFileInputStream = new FileInputStream(localFile);
          localObject1 = new StringBuffer();
          localObject3 = new BufferedReader(new InputStreamReader(localFileInputStream, "UTF-8"));
          String str = ((BufferedReader)localObject3).readLine();
          if (str == null) {
            break;
          }
          ((StringBuffer)localObject1).append(str).append("\n");
          continue;
        }
        localOffLineAdvertisement.setImsi("");
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return;
      }
    }
    Object localObject3 = new TypeToken() {}.getType();
    localObject3 = (List)localGson.fromJson(localException.toString(), (Type)localObject3);
    Object localObject2 = localObject3;
    if (localObject3 == null) {
      localObject2 = new ArrayList();
    }
    ((List)localObject2).add(localOffLineAdvertisement);
    localObject2 = localGson.toJson(localObject2);
    localObject3 = new FileOutputStream(localFile);
    ((FileOutputStream)localObject3).write(((String)localObject2).getBytes());
    ((FileOutputStream)localObject3).flush();
    ((FileOutputStream)localObject3).close();
    localFileInputStream.close();
  }
  
  public void initInfo()
  {
    Properties localProperties = new Properties();
    localProperties.put("firstTime", String.valueOf(true));
    localProperties.put("isConnect", String.valueOf(AdManager.isConnect));
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "userInfo.txt");
      FileOutputStream localFileOutputStream = new FileOutputStream(this.file, true);
      localProperties.store(localFileOutputStream, "");
      localFileOutputStream.close();
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public boolean isFirstLogin()
  {
    boolean bool;
    for (;;)
    {
      try
      {
        Properties localProperties = new Properties();
        this.file = new File(Config.GAME_BASE_PATH + File.separator, "userInfo.txt");
        localFileInputStream = new FileInputStream(this.file);
        localProperties.load(localFileInputStream);
        new StringBuilder("判断是不是第一次：").append(localProperties.get("firstTime")).toString();
        bool = localProperties.get("firstTime").equals("true");
        if (bool) {
          bool = true;
        }
      }
      catch (Exception localException1)
      {
        FileInputStream localFileInputStream;
        bool = false;
      }
      try
      {
        localFileInputStream.close();
        return bool;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      bool = false;
    }
    localException1.printStackTrace();
    return bool;
  }
  
  public boolean isLastConnect()
  {
    try
    {
      Properties localProperties = new Properties();
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "userInfo.txt");
      FileInputStream localFileInputStream = new FileInputStream(this.file);
      localProperties.load(localFileInputStream);
      if (localProperties.get("isConnect").equals("true")) {}
      for (boolean bool = true;; bool = false)
      {
        localFileInputStream.close();
        return bool;
      }
      return true;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void removeDownloadAd(String paramString)
  {
    Properties localProperties = new Properties();
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "downloadFail.txt");
      FileOutputStream localFileOutputStream = new FileOutputStream(this.file, true);
      localProperties.put(paramString, "success");
      localProperties.store(localFileOutputStream, "");
      localFileOutputStream.flush();
      localFileOutputStream.close();
      return;
    }
    catch (FileNotFoundException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public void removeHandDownloadAd(String paramString)
  {
    Properties localProperties = new Properties();
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "handDownloadFail.txt");
      FileOutputStream localFileOutputStream = new FileOutputStream(this.file, true);
      localProperties.put(paramString, "success");
      localProperties.store(localFileOutputStream, "");
      localFileOutputStream.flush();
      localFileOutputStream.close();
      return;
    }
    catch (FileNotFoundException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public void setFirst()
  {
    Properties localProperties = new Properties();
    localProperties.put("firstTime", String.valueOf(false));
    try
    {
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "userInfo.txt");
      FileOutputStream localFileOutputStream = new FileOutputStream(this.file, true);
      localProperties.store(localFileOutputStream, "");
      localFileOutputStream.close();
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public void setLastConnect()
  {
    try
    {
      Properties localProperties = new Properties();
      this.file = new File(Config.GAME_BASE_PATH + File.separator, "userInfo.txt");
      FileOutputStream localFileOutputStream = new FileOutputStream(this.file, true);
      localProperties.put("isConnect", String.valueOf(AdManager.isConnect));
      localProperties.store(localFileOutputStream, "");
      localFileOutputStream.flush();
      localFileOutputStream.close();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
}
