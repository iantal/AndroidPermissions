package com.splunk.mint.network.socket;

import com.splunk.mint.Logger;
import com.splunk.mint.Properties;
import com.splunk.mint.network.Counter;
import com.splunk.mint.network.Metric;
import com.splunk.mint.network.MonitorRegistry;
import com.splunk.mint.network.NetLogManager;
import com.splunk.mint.network.io.InputStreamMonitor;
import com.splunk.mint.network.io.InputStreamMonitorKitKat;
import com.splunk.mint.network.io.OutputStreamMonitor;
import com.splunk.mint.network.util.Delegator;
import com.splunk.mint.network.util.Delegator.DelegatorMethodFinder;
import com.splunk.mint.network.util.ReflectionUtil;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.SocketImpl;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class MonitoringSocketImpl
  extends SocketImpl
{
  public static final String ENCAPSULATED_SOCKET_IMPL = "java.net.PlainSocketImpl";
  private static final String[] HTTP_CLASSES = { "HttpClient", "URLConnection", "HttpsURLConnectionImpl", "HttpURLConnectionImpl" };
  private static final String[] SYSTEM_PACKAGES = { "android", "java", "org.apache", "splunk", "libcore" };
  private final Delegator delegator = new Delegator(this, SocketImpl.class, "java.net.PlainSocketImpl");
  private final boolean http = ReflectionUtil.callingClassAnyOf(HTTP_CLASSES);
  private InputStreamMonitor mInputStreamMonitor = null;
  private InputStreamMonitorKitKat mInputStreamMonitorKitKat = null;
  private OutputStreamMonitor mOutputStreamMonitor = null;
  private final String method = ReflectionUtil.extractCallingMethod(SYSTEM_PACKAGES);
  private String name;
  private String protocol = "NA";
  private boolean readingDone = false;
  private final MonitorRegistry registry;
  private long startTime;
  
  public MonitoringSocketImpl(MonitorRegistry paramMonitorRegistry)
  {
    this.registry = paramMonitorRegistry;
  }
  
  private void createActionEventFromCollectedStats(ArrayList<Metric<?>> paramArrayList, HashMap<String, List<String>> paramHashMap1, HashMap<String, List<String>> paramHashMap2, long paramLong, String paramString1, String paramString2)
  {
    String str2 = "";
    Object localObject = str2;
    if (paramHashMap1 != null) {}
    try
    {
      localObject = (String)((List)paramHashMap1.get("Host")).get(0);
      try
      {
        paramHashMap1 = (String)localObject + (String)((List)paramHashMap1.get("splk-host2")).get(0);
        localObject = paramHashMap1;
      }
      catch (Exception paramHashMap1)
      {
        int j;
        int i;
        for (;;) {}
      }
      if (paramString1 != null) {
        localObject = paramString2;
      }
      j = 0;
      i = j;
      if (paramHashMap2 != null) {}
      try
      {
        i = Integer.valueOf((String)((List)paramHashMap2.get("splk-statuscode")).get(0)).intValue();
        paramHashMap1 = Long.valueOf(0L);
        long l1 = 0L;
        paramString2 = paramArrayList.iterator();
        paramArrayList = paramHashMap1;
        while (paramString2.hasNext())
        {
          paramHashMap1 = (Metric)paramString2.next();
          if ((paramHashMap1 instanceof Counter)) {
            if (((Counter)paramHashMap1).getName().endsWith("-bytes-out")) {
              paramArrayList = (Long)paramHashMap1.getValue();
            } else if (((Counter)paramHashMap1).getName().endsWith("-bytes-in")) {
              l1 = ((Long)paramHashMap1.getValue()).longValue();
            }
          }
        }
        try
        {
          long l2 = Long.valueOf((String)((List)paramHashMap2.get("Content-Length")).get(0)).longValue();
          l1 = l2;
        }
        catch (Exception paramHashMap1)
        {
          for (;;)
          {
            Logger.logInfo("Could not read the Content-Length HTTP header value");
          }
        }
        NetLogManager.getInstance().logNetworkRequest((String)localObject, this.protocol, this.startTime, paramLong, i, paramArrayList.longValue(), l1, paramString1);
        return;
      }
      catch (Exception paramHashMap1)
      {
        for (;;)
        {
          i = j;
        }
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str1 = str2;
      }
    }
  }
  
  private void setProtocolFromPort(int paramInt)
  {
    if (paramInt == 80) {
      this.protocol = "HTTP";
    }
    while (paramInt != 443) {
      return;
    }
    this.protocol = "HTTPS";
  }
  
  protected void accept(SocketImpl paramSocketImpl)
    throws IOException
  {
    try
    {
      this.delegator.invoke(new Object[] { paramSocketImpl });
      return;
    }
    catch (Exception paramSocketImpl)
    {
      createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), null, null, System.currentTimeMillis(), paramSocketImpl.getMessage(), this.name);
    }
  }
  
  protected int available()
    throws IOException
  {
    try
    {
      int i = ((Integer)this.delegator.invoke(new Object[0])).intValue();
      return i;
    }
    catch (Exception localException) {}
    return 0;
  }
  
  protected void bind(InetAddress paramInetAddress, int paramInt)
    throws IOException
  {
    this.name = paramInetAddress.getHostName();
    try
    {
      this.delegator.invoke(new Object[] { paramInetAddress, Integer.valueOf(paramInt) });
      this.startTime = System.currentTimeMillis();
      return;
    }
    catch (Exception paramInetAddress)
    {
      for (;;)
      {
        createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), null, null, System.currentTimeMillis(), paramInetAddress.getMessage(), this.name);
      }
    }
  }
  
  protected void close()
    throws IOException
  {
    try
    {
      this.delegator.invoke(new Object[0]);
      return;
    }
    catch (Exception localException)
    {
      Logger.logError("Error closing socket impl: " + localException.getMessage());
    }
  }
  
  protected void connect(String paramString, int paramInt)
    throws IOException
  {
    this.name = paramString;
    try
    {
      this.delegator.invoke(new Object[] { paramString, Integer.valueOf(paramInt) });
      this.startTime = System.currentTimeMillis();
      setProtocolFromPort(paramInt);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), null, null, System.currentTimeMillis(), localException.getMessage(), paramString);
      }
    }
  }
  
  protected void connect(InetAddress paramInetAddress, int paramInt)
    throws IOException
  {
    this.name = paramInetAddress.getHostName();
    try
    {
      this.delegator.delegateTo("connect", new Class[] { InetAddress.class, Integer.TYPE }).invoke(new Object[] { paramInetAddress, Integer.valueOf(paramInt) });
      this.startTime = System.currentTimeMillis();
      setProtocolFromPort(paramInt);
      return;
    }
    catch (Exception paramInetAddress)
    {
      for (;;)
      {
        createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), null, null, System.currentTimeMillis(), paramInetAddress.getMessage(), this.name);
      }
    }
  }
  
  protected void connect(SocketAddress paramSocketAddress, int paramInt)
    throws IOException
  {
    if ((paramSocketAddress instanceof InetSocketAddress))
    {
      InetSocketAddress localInetSocketAddress = (InetSocketAddress)paramSocketAddress;
      this.name = localInetSocketAddress.getHostName();
      setProtocolFromPort(localInetSocketAddress.getPort());
    }
    try
    {
      for (;;)
      {
        this.delegator.invoke(new Object[] { paramSocketAddress, Integer.valueOf(paramInt) });
        this.startTime = System.currentTimeMillis();
        return;
        this.name = paramSocketAddress.toString();
      }
    }
    catch (Exception paramSocketAddress)
    {
      for (;;)
      {
        createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), null, null, System.currentTimeMillis(), paramSocketAddress.getMessage(), this.name);
      }
    }
  }
  
  protected void create(boolean paramBoolean)
    throws IOException
  {
    try
    {
      this.delegator.invoke(new Object[] { Boolean.valueOf(paramBoolean) });
      return;
    }
    catch (Exception localException)
    {
      createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), null, null, System.currentTimeMillis(), localException.getMessage(), this.name);
    }
  }
  
  protected FileDescriptor getFileDescriptor()
  {
    try
    {
      FileDescriptor localFileDescriptor = (FileDescriptor)this.delegator.invoke(new Object[0]);
      return localFileDescriptor;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }
  
  protected InetAddress getInetAddress()
  {
    try
    {
      InetAddress localInetAddress = (InetAddress)this.delegator.invoke(new Object[0]);
      return localInetAddress;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }
  
  protected InputStream getInputStream()
    throws IOException
  {
    Object localObject = null;
    try
    {
      InputStream localInputStream = (InputStream)this.delegator.invoke(new Object[0]);
      localObject = localInputStream;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
      if (this.mInputStreamMonitor != null) {
        break label98;
      }
      this.mInputStreamMonitor = new InputStreamMonitor(this.name, this.registry, localObject, this);
      label98:
      return this.mInputStreamMonitor;
    }
    if (localObject != null) {
      if (Properties.isKitKat)
      {
        if (this.mInputStreamMonitorKitKat == null) {
          this.mInputStreamMonitorKitKat = new InputStreamMonitorKitKat(this.name, this.registry, localObject, this);
        }
        return this.mInputStreamMonitorKitKat;
      }
    }
    return null;
  }
  
  protected int getLocalPort()
  {
    try
    {
      int i = ((Integer)this.delegator.invoke(new Object[0])).intValue();
      return i;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return -1;
  }
  
  public String getMethod()
  {
    return this.method;
  }
  
  public Object getOption(int paramInt)
    throws SocketException
  {
    try
    {
      Object localObject = this.delegator.invoke(new Object[] { Integer.valueOf(paramInt) });
      return localObject;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }
  
  protected OutputStream getOutputStream()
    throws IOException
  {
    Object localObject = null;
    try
    {
      OutputStream localOutputStream = (OutputStream)this.delegator.invoke(new Object[0]);
      localObject = localOutputStream;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
    if (localObject != null)
    {
      if (this.mOutputStreamMonitor == null) {
        this.mOutputStreamMonitor = new OutputStreamMonitor(this.name, this.registry, localObject);
      }
      return this.mOutputStreamMonitor;
    }
    return null;
  }
  
  protected int getPort()
  {
    try
    {
      int i = ((Integer)this.delegator.invoke(new Object[0])).intValue();
      return i;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return -1;
  }
  
  public boolean isHttp()
  {
    return this.http;
  }
  
  protected void listen(int paramInt)
    throws IOException
  {
    try
    {
      this.delegator.invoke(new Object[] { Integer.valueOf(paramInt) });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void readingDone()
  {
    if (!this.readingDone)
    {
      this.readingDone = true;
      if (!Properties.isKitKat) {
        break label67;
      }
      if ((this.mOutputStreamMonitor != null) && (this.mInputStreamMonitorKitKat != null)) {
        createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), this.mOutputStreamMonitor.getHeaders(), this.mInputStreamMonitorKitKat.getHeaders(), System.currentTimeMillis(), null, null);
      }
    }
    label67:
    while ((this.mOutputStreamMonitor == null) || (this.mInputStreamMonitor == null)) {
      return;
    }
    createActionEventFromCollectedStats(this.registry.getMetricsForName(this.name), this.mOutputStreamMonitor.getHeaders(), this.mInputStreamMonitor.getHeaders(), System.currentTimeMillis(), null, null);
  }
  
  protected void sendUrgentData(int paramInt)
    throws IOException
  {
    try
    {
      this.delegator.invoke(new Object[] { Integer.valueOf(paramInt) });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void setOption(int paramInt, Object paramObject)
    throws SocketException
  {
    try
    {
      this.delegator.invoke(new Object[] { Integer.valueOf(paramInt), paramObject });
      return;
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
  }
  
  protected void setPerformancePreferences(int paramInt1, int paramInt2, int paramInt3)
  {
    try
    {
      this.delegator.invoke(new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), Integer.valueOf(paramInt3) });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  protected void shutdownInput()
    throws IOException
  {
    if (Properties.isKitKat) {
      if (this.mInputStreamMonitorKitKat != null) {
        this.mInputStreamMonitorKitKat.close();
      }
    }
    for (;;)
    {
      try
      {
        this.delegator.invoke(new Object[0]);
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      if (this.mInputStreamMonitor != null) {
        this.mInputStreamMonitor.close();
      }
    }
  }
  
  protected void shutdownOutput()
    throws IOException
  {
    if (this.mOutputStreamMonitor != null) {
      this.mOutputStreamMonitor.close();
    }
    try
    {
      this.delegator.invoke(new Object[0]);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  protected boolean supportsUrgentData()
  {
    try
    {
      boolean bool = ((Boolean)this.delegator.invoke(new Object[0])).booleanValue();
      return bool;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return false;
  }
}
