package com.splunk.mint.network.http;

import com.splunk.mint.Logger;
import com.splunk.mint.network.util.ReflectionUtil;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;

public abstract class URLStreamHandlerBase
  extends URLStreamHandler
{
  static final Class<?>[] PROXY_FIELD_TYPES = { URL.class, Integer.TYPE, Proxy.class };
  static final Class<?>[] SIMPLE_FIELD_TYPES = { URL.class, Integer.TYPE };
  private Constructor<?> proxyConstructor;
  private Constructor<?> simpleConstructor;
  
  public URLStreamHandlerBase(String[] paramArrayOfString)
    throws ClassNotFoundException
  {
    initConstructors(paramArrayOfString);
    if ((this.proxyConstructor == null) || (this.simpleConstructor == null)) {
      throw new ClassNotFoundException("No implementation detected");
    }
  }
  
  private void initConstructors(String[] paramArrayOfString)
  {
    int j = paramArrayOfString.length;
    int i = 0;
    for (;;)
    {
      String str;
      if (i < j) {
        str = paramArrayOfString[i];
      }
      try
      {
        this.proxyConstructor = ReflectionUtil.findConstructor(str, PROXY_FIELD_TYPES);
        if (this.proxyConstructor != null) {}
        this.simpleConstructor = ReflectionUtil.findConstructor(str, SIMPLE_FIELD_TYPES);
        if (this.simpleConstructor != null) {}
        this.proxyConstructor.setAccessible(true);
        this.simpleConstructor.setAccessible(true);
        return;
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        this.proxyConstructor = null;
        this.simpleConstructor = null;
        i += 1;
      }
    }
  }
  
  public abstract int getDefaultPort();
  
  public abstract String getProtocol();
  
  protected URLConnection openConnection(URL paramURL)
    throws IOException
  {
    try
    {
      paramURL = (URLConnection)this.simpleConstructor.newInstance(new Object[] { paramURL, Integer.valueOf(getDefaultPort()) });
      return paramURL;
    }
    catch (InstantiationException paramURL)
    {
      Logger.logError("Error initializing connection - can't instantiate object: " + paramURL.getMessage());
      throw new IOException();
    }
    catch (IllegalAccessException paramURL)
    {
      Logger.logError("Error initializing connection - can't access constructor: " + paramURL.getMessage());
      throw new IOException();
    }
    catch (IllegalArgumentException paramURL)
    {
      Logger.logError("Error initializing connection - invalid argument: " + paramURL.getMessage());
      throw new IOException();
    }
    catch (InvocationTargetException paramURL)
    {
      Logger.logError("Error initializing connection - can't invoke target: " + paramURL.getMessage());
      throw new IOException();
    }
  }
  
  protected URLConnection openConnection(URL paramURL, Proxy paramProxy)
    throws IOException
  {
    if (paramProxy == null) {
      return openConnection(paramURL);
    }
    try
    {
      paramURL = (URLConnection)this.proxyConstructor.newInstance(new Object[] { paramURL, Integer.valueOf(getDefaultPort()), paramProxy });
      return paramURL;
    }
    catch (InstantiationException paramURL)
    {
      Logger.logError("Error initializing connection - can't instantiate object: " + paramURL.getMessage());
      throw new IOException();
    }
    catch (IllegalAccessException paramURL)
    {
      Logger.logError("Error initializing connection - can't access constructor: " + paramURL.getMessage());
      throw new IOException();
    }
    catch (IllegalArgumentException paramURL)
    {
      Logger.logError("Error initializing connection - invalid argument: " + paramURL.getMessage());
      throw new IOException();
    }
    catch (InvocationTargetException paramURL)
    {
      Logger.logError("Error initializing connection - can't invoke target: " + paramURL.getMessage());
      throw new IOException();
    }
  }
}
