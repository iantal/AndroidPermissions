package com.splunk.mint.network;

import com.splunk.mint.ActionNetwork;
import com.splunk.mint.ExcludedUrls;
import com.splunk.mint.Logger;
import com.splunk.mint.Properties;
import java.lang.reflect.Constructor;
import java.net.HttpURLConnection;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import javax.net.ssl.HttpsURLConnection;

public class NetLogManager
{
  private static final long CONNECTION_TIMEOUT = 60000L;
  private static volatile HashMap<String, StartConnectionInfo> connectionsMap = new HashMap();
  private static NetLogManager mNetLogManager = null;
  
  public NetLogManager() {}
  
  private boolean checkIfURLisExcluded(String paramString)
  {
    if (paramString == null) {
      return true;
    }
    if (Properties.excludedUrls != null)
    {
      paramString = cleanUrl(paramString);
      Iterator localIterator = Properties.excludedUrls.iterator();
      while (localIterator.hasNext()) {
        if (paramString.contains((String)localIterator.next())) {
          return true;
        }
      }
    }
    return false;
  }
  
  private String cleanUrl(String paramString)
  {
    String str = paramString;
    if (paramString != null) {
      str = paramString.toLowerCase().replaceAll("https://", "").replaceAll("http://", "").replaceAll("www.", "");
    }
    return str;
  }
  
  public static boolean deviceSupporsNetworkMonitoring()
  {
    try
    {
      Object localObject = Class.forName("java.net.PlainSocketImpl");
      if (localObject == null) {
        return false;
      }
      localObject = ((Class)localObject).getDeclaredConstructor(new Class[0]);
      if (localObject != null)
      {
        ((Constructor)localObject).newInstance(new Object[0]);
        Logger.logInfo("Device supports Network Monitoring");
        return true;
      }
    }
    catch (RuntimeException localRuntimeException)
    {
      Logger.logInfo("deviceSupporsNetworkMonitoring: " + localRuntimeException.getMessage());
      return false;
    }
    catch (Exception localException)
    {
      Logger.logInfo("deviceSupporsNetworkMonitoring: " + localException.getMessage());
    }
    return false;
  }
  
  public static NetLogManager getInstance()
  {
    try
    {
      if (mNetLogManager == null) {
        mNetLogManager = new NetLogManager();
      }
      NetLogManager localNetLogManager = mNetLogManager;
      return localNetLogManager;
    }
    finally {}
  }
  
  public static final int getStatusCodeFromURLConnection(URLConnection paramURLConnection)
  {
    int j = 0;
    int i = j;
    if ((paramURLConnection == null) || ((paramURLConnection instanceof HttpURLConnection))) {}
    for (;;)
    {
      try
      {
        i = ((HttpURLConnection)paramURLConnection).getResponseCode();
        return i;
      }
      catch (Exception paramURLConnection) {}
      i = j;
      if ((paramURLConnection instanceof HttpsURLConnection)) {
        try
        {
          i = ((HttpsURLConnection)paramURLConnection).getResponseCode();
          return i;
        }
        catch (Exception paramURLConnection)
        {
          return 0;
        }
      }
    }
    return 0;
  }
  
  private void removeOldEntries()
  {
    try
    {
      Iterator localIterator = connectionsMap.entrySet().iterator();
      while (localIterator.hasNext())
      {
        long l = ((StartConnectionInfo)((Map.Entry)localIterator.next()).getValue()).startTime.longValue();
        if (System.currentTimeMillis() - l > 60000L) {
          localIterator.remove();
        }
      }
    }
    finally {}
  }
  
  public void cancelNetworkCall(MonitorRegistry paramMonitorRegistry, String paramString1, long paramLong, String paramString2, String paramString3)
  {
    if (paramString1 != null) {}
    try
    {
      paramMonitorRegistry = cleanUrl(paramString1);
      if ((connectionsMap != null) && (connectionsMap.containsKey(paramMonitorRegistry)))
      {
        paramString1 = (StartConnectionInfo)connectionsMap.get(paramMonitorRegistry);
        if (paramString1 != null)
        {
          connectionsMap.remove(paramMonitorRegistry);
          ActionNetwork.logNetwork(paramString1.url, paramString1.startTime.longValue(), paramLong, paramString2, 0, 0L, 0L, paramString3);
        }
      }
      return;
    }
    finally {}
  }
  
  public void endNetworkCall(MonitorRegistry paramMonitorRegistry, String paramString, long paramLong, int paramInt)
  {
    if (paramString != null) {}
    try
    {
      Object localObject = cleanUrl(paramString);
      if ((connectionsMap != null) && (connectionsMap.containsKey(localObject)))
      {
        StartConnectionInfo localStartConnectionInfo = (StartConnectionInfo)connectionsMap.get(localObject);
        if (localStartConnectionInfo != null)
        {
          connectionsMap.remove(localObject);
          paramString = Long.valueOf(0L);
          long l = 0L;
          localObject = paramMonitorRegistry.getMetricsForName((String)localObject).iterator();
          paramMonitorRegistry = paramString;
          while (((Iterator)localObject).hasNext())
          {
            paramString = (Metric)((Iterator)localObject).next();
            if ((paramString instanceof Counter)) {
              if (((Counter)paramString).getName().endsWith("-bytes-out")) {
                paramMonitorRegistry = (Long)paramString.getValue();
              } else if (((Counter)paramString).getName().endsWith("-bytes-in")) {
                l = ((Long)paramString.getValue()).longValue();
              }
            }
          }
          ActionNetwork.logNetwork(localStartConnectionInfo.url, localStartConnectionInfo.startTime.longValue(), paramLong, localStartConnectionInfo.protocol, paramInt, paramMonitorRegistry.longValue(), l, null);
        }
      }
      return;
    }
    finally {}
  }
  
  public void logNetworkRequest(String paramString1, String paramString2, long paramLong1, long paramLong2, int paramInt, long paramLong3, long paramLong4, String paramString3)
  {
    try
    {
      if (!checkIfURLisExcluded(paramString1)) {
        ActionNetwork.logNetwork(paramString1, paramLong1, paramLong2, paramString2, paramInt, paramLong3, paramLong4, paramString3);
      }
      return;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  public void startNetworkCall(String paramString1, String paramString2, long paramLong, String paramString3)
  {
    if (paramString1 != null) {}
    try
    {
      paramString1 = cleanUrl(paramString1);
      if (!checkIfURLisExcluded(paramString2))
      {
        StartConnectionInfo localStartConnectionInfo = new StartConnectionInfo();
        localStartConnectionInfo.startTime = Long.valueOf(paramLong);
        localStartConnectionInfo.url = paramString2;
        localStartConnectionInfo.protocol = paramString3;
        connectionsMap.put(paramString1, localStartConnectionInfo);
        removeOldEntries();
      }
      return;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  class StartConnectionInfo
  {
    public String protocol;
    public Long startTime;
    public int statusCode;
    public String url;
    
    StartConnectionInfo() {}
  }
}
