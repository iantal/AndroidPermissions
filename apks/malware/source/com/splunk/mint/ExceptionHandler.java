package com.splunk.mint;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class ExceptionHandler
  implements Thread.UncaughtExceptionHandler
{
  private Thread.UncaughtExceptionHandler defaultExceptionHandler;
  
  public ExceptionHandler(Thread.UncaughtExceptionHandler paramUncaughtExceptionHandler)
  {
    this.defaultExceptionHandler = paramUncaughtExceptionHandler;
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    Object localObject = new StringWriter();
    paramThrowable.printStackTrace(new PrintWriter((Writer)localObject));
    localObject = new ActionError(EnumActionType.error, localObject.toString(), EnumExceptionType.UNHANDLED, null);
    Iterator localIterator = Properties.transactionsDatabase.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      if (localEntry.getValue() != null) {
        ActionTransactionStop.createTransactionFail(((String)localEntry.getKey()).replace("TStart:name:", ""), ((ActionError)localObject).getErrorHash(), null).save(new DataSaver());
      }
      localIterator.remove();
    }
    ((ActionError)localObject).send(new NetSender(), true);
    new CrashInfo().saveLastCrashID(String.valueOf(((ActionError)localObject).getErrorHash()));
    Utils.setForceSendPingOnNextStart();
    if (Mint.mintCallback != null) {
      Mint.mintCallback.lastBreath(new Exception(paramThrowable));
    }
    try
    {
      Thread.sleep(3000L);
      this.defaultExceptionHandler.uncaughtException(paramThread, paramThrowable);
      return;
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;)
      {
        localInterruptedException.printStackTrace();
      }
    }
  }
}
