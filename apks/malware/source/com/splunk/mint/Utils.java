package com.splunk.mint;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Pattern;

class Utils
{
  protected static final String CONNECTION = "connection";
  private static final int Debug = 20;
  private static final int Error = 60;
  private static final int Info = 30;
  private static final String LASTPINGTIME = "LASTPINGTIME";
  protected static final String STATE = "state";
  private static final int Verbose = 10;
  private static final int Warning = 50;
  private static ExecutorService executor = null;
  private static final String forceSendPingFile = ".setForceSendPingOnNextStart";
  
  Utils() {}
  
  protected static String MD5(String paramString)
    throws Exception
  {
    MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
    localMessageDigest.update(paramString.getBytes(), 0, paramString.length());
    return new BigInteger(1, localMessageDigest.digest()).toString(16);
  }
  
  protected static boolean checkForRoot()
  {
    boolean bool2 = false;
    String[] arrayOfString = new String[8];
    arrayOfString[0] = "/sbin/";
    arrayOfString[1] = "/system/bin/";
    arrayOfString[2] = "/system/xbin/";
    arrayOfString[3] = "/data/local/xbin/";
    arrayOfString[4] = "/data/local/bin/";
    arrayOfString[5] = "/system/sd/xbin/";
    arrayOfString[6] = "/system/bin/failsafe/";
    arrayOfString[7] = "/data/local/";
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      boolean bool1 = bool2;
      if (i < j)
      {
        String str = arrayOfString[i];
        if (new File(str + "su").exists()) {
          bool1 = true;
        }
      }
      else
      {
        return bool1;
      }
      i += 1;
    }
  }
  
  protected static void clearLastPingSentTime(Context paramContext)
  {
    paramContext = new LowPriorityThreadFactory().newThread(new Runnable()
    {
      public void run()
      {
        if (this.val$ctx != null)
        {
          SharedPreferences localSharedPreferences = this.val$ctx.getSharedPreferences("Mint", 0);
          if (localSharedPreferences != null) {
            localSharedPreferences.edit().putLong("LASTPINGTIME", 0L).commit();
          }
        }
      }
    });
    ExecutorService localExecutorService = getExecutor();
    if ((paramContext != null) && (localExecutorService != null)) {
      localExecutorService.submit(paramContext);
    }
  }
  
  public static int convertLoggingLevelToInt(MintLogLevel paramMintLogLevel)
  {
    int j = 10;
    int i;
    if (paramMintLogLevel.equals(MintLogLevel.Debug)) {
      i = 20;
    }
    do
    {
      do
      {
        return i;
        if (paramMintLogLevel.equals(MintLogLevel.Error)) {
          return 60;
        }
        if (paramMintLogLevel.equals(MintLogLevel.Info)) {
          return 30;
        }
        i = j;
      } while (paramMintLogLevel.equals(MintLogLevel.Verbose));
      i = j;
    } while (!paramMintLogLevel.equals(MintLogLevel.Warning));
    return 50;
  }
  
  public static final String getCarrier(Context paramContext)
  {
    TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    if (localTelephonyManager != null)
    {
      Object localObject = null;
      if (localTelephonyManager.getSimState() == 5) {
        localObject = localTelephonyManager.getSimOperatorName();
      }
      if (localObject != null)
      {
        paramContext = (Context)localObject;
        if (((String)localObject).length() != 0) {}
      }
      else
      {
        paramContext = localTelephonyManager.getNetworkOperatorName();
      }
      if (paramContext != null)
      {
        localObject = paramContext;
        if (paramContext.length() != 0) {}
      }
      else
      {
        localObject = "NA";
      }
      return localObject;
    }
    return "NA";
  }
  
  protected static HashMap<String, String> getConnectionInfo(Context paramContext)
  {
    HashMap localHashMap = new HashMap(2);
    localHashMap.put("connection", "NA");
    localHashMap.put("state", "NA");
    if (paramContext == null) {
      if (Mint.DEBUG) {
        Logger.logError("Context in getConnection is null!");
      }
    }
    PackageManager localPackageManager;
    do
    {
      do
      {
        return localHashMap;
        localPackageManager = paramContext.getPackageManager();
        if (localPackageManager != null) {
          break;
        }
      } while (!Mint.DEBUG);
      Logger.logError("PackageManager in CheckNetworkConnection is null!");
      return localHashMap;
    } while (localPackageManager.checkPermission("android.permission.ACCESS_NETWORK_STATE", Properties.APP_PACKAGE) != 0);
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext != null)
    {
      if ((paramContext.getSubtypeName() == null) || (paramContext.getSubtypeName().length() == 0)) {
        localHashMap.put("connection", paramContext.getTypeName());
      }
      for (;;)
      {
        localHashMap.put("state", paramContext.getState().toString());
        return localHashMap;
        localHashMap.put("connection", paramContext.getSubtypeName());
      }
    }
    localHashMap.put("connection", "No connection");
    return localHashMap;
  }
  
  private static ExecutorService getExecutor()
  {
    if (executor == null) {
      executor = Executors.newFixedThreadPool(1);
    }
    return executor;
  }
  
  public static final HashMap<String, String> getMemoryInfo()
  {
    HashMap localHashMap = new HashMap(2);
    int m = 0;
    int j = 0;
    for (;;)
    {
      int i;
      int k;
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/proc/meminfo" }).start().getInputStream();
        StringBuilder localStringBuilder = new StringBuilder();
        byte[] arrayOfByte = new byte['Ð€'];
        if (localInputStream.read(arrayOfByte) != -1)
        {
          localStringBuilder.append(new String(arrayOfByte));
          String[] arrayOfString = localStringBuilder.toString().split("kB");
          if (arrayOfString.length < 2) {
            continue;
          }
          int n = arrayOfString.length;
          i = 0;
          if (i < n)
          {
            localStringBuilder = arrayOfString[i];
            k = m;
            if (m == 0)
            {
              k = m;
              if (localStringBuilder.contains("MemTotal:"))
              {
                localHashMap.put("memTotal", String.valueOf(Float.valueOf(localStringBuilder.substring(localStringBuilder.indexOf(" "), localStringBuilder.lastIndexOf(" ")).trim()).floatValue() / 1024.0F));
                k = 1;
              }
            }
            m = j;
            if (j != 0) {
              break label281;
            }
            m = j;
            if (!localStringBuilder.contains("MemFree:")) {
              break label281;
            }
            localHashMap.put("memFree", String.valueOf(Float.valueOf(localStringBuilder.substring(localStringBuilder.indexOf(" "), localStringBuilder.lastIndexOf(" ")).trim()).floatValue() / 1024.0F));
            m = 1;
            break label281;
          }
        }
        localInputStream.close();
        return localHashMap;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        return localHashMap;
      }
      label281:
      i += 1;
      j = m;
      m = k;
    }
  }
  
  protected static final String getMilisFromStart()
  {
    return String.valueOf(System.currentTimeMillis() - Properties.TIMESTAMP);
  }
  
  public static String getRandomSessionNumber()
  {
    String str = String.valueOf(System.currentTimeMillis());
    return str.substring(str.length() - 8, str.length());
  }
  
  protected static String getScreenOrientation(Context paramContext)
  {
    switch (((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getOrientation())
    {
    default: 
      return "NA";
    case 0: 
      return "Portrait";
    case 2: 
      return "PortraitUpsideDown";
    case 3: 
      return "LandscapeLeft";
    }
    return "LandscapeRight";
  }
  
  protected static final String getTime()
  {
    long l1 = System.currentTimeMillis();
    try
    {
      long l2 = Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTimeInMillis() / 1000L;
      return String.valueOf(l2);
    }
    catch (Exception localException) {}
    return String.valueOf(l1);
  }
  
  protected static EnumStateStatus isGPSOn(Context paramContext)
  {
    EnumStateStatus localEnumStateStatus = EnumStateStatus.ON;
    if (paramContext.getPackageManager().checkPermission("android.permission.ACCESS_FINE_LOCATION", Properties.APP_PACKAGE) == 0)
    {
      if (!((LocationManager)paramContext.getSystemService("location")).isProviderEnabled("gps")) {
        localEnumStateStatus = EnumStateStatus.OFF;
      }
      return localEnumStateStatus;
    }
    return EnumStateStatus.NA;
  }
  
  public static final boolean isKitKat()
  {
    return Build.VERSION.SDK_INT == 19;
  }
  
  /* Error */
  public static String readFile(String paramString)
    throws Exception
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnonnull +14 -> 15
    //   4: new 435	java/lang/IllegalArgumentException
    //   7: dup
    //   8: ldc_w 437
    //   11: invokespecial 438	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   14: athrow
    //   15: new 103	java/lang/StringBuilder
    //   18: dup
    //   19: invokespecial 104	java/lang/StringBuilder:<init>	()V
    //   22: astore_3
    //   23: aconst_null
    //   24: astore_1
    //   25: aconst_null
    //   26: astore_2
    //   27: new 440	java/io/BufferedReader
    //   30: dup
    //   31: new 442	java/io/FileReader
    //   34: dup
    //   35: aload_0
    //   36: invokespecial 443	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   39: invokespecial 446	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   42: astore_0
    //   43: aload_0
    //   44: invokevirtual 449	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   47: astore_1
    //   48: aload_1
    //   49: ifnull +30 -> 79
    //   52: aload_3
    //   53: aload_1
    //   54: invokevirtual 108	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   57: pop
    //   58: goto -15 -> 43
    //   61: astore_2
    //   62: aload_0
    //   63: astore_1
    //   64: aload_2
    //   65: astore_0
    //   66: aload_0
    //   67: athrow
    //   68: astore_0
    //   69: aload_1
    //   70: ifnull +7 -> 77
    //   73: aload_1
    //   74: invokevirtual 450	java/io/BufferedReader:close	()V
    //   77: aload_0
    //   78: athrow
    //   79: aload_0
    //   80: ifnull +7 -> 87
    //   83: aload_0
    //   84: invokevirtual 450	java/io/BufferedReader:close	()V
    //   87: aload_3
    //   88: invokevirtual 113	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   91: areturn
    //   92: astore_0
    //   93: aload_0
    //   94: athrow
    //   95: astore_0
    //   96: aload_0
    //   97: athrow
    //   98: astore_2
    //   99: aload_0
    //   100: astore_1
    //   101: aload_2
    //   102: astore_0
    //   103: goto -34 -> 69
    //   106: astore_0
    //   107: aload_2
    //   108: astore_1
    //   109: goto -43 -> 66
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	112	0	paramString	String
    //   24	85	1	localObject1	Object
    //   26	1	2	localObject2	Object
    //   61	4	2	localException	Exception
    //   98	10	2	localObject3	Object
    //   22	66	3	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   43	48	61	java/lang/Exception
    //   52	58	61	java/lang/Exception
    //   27	43	68	finally
    //   66	68	68	finally
    //   83	87	92	java/io/IOException
    //   73	77	95	java/io/IOException
    //   43	48	98	finally
    //   52	58	98	finally
    //   27	43	106	java/lang/Exception
  }
  
  public static final String readLogs()
  {
    int j = Properties.LOG_LINES;
    int i = j;
    if (j < 0) {
      i = 100;
    }
    Object localObject = Properties.LOG_FILTER;
    StringBuilder localStringBuilder = new StringBuilder();
    ArrayList localArrayList;
    try
    {
      localObject = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("logcat -d " + (String)localObject).getInputStream()));
      localArrayList = new ArrayList();
      for (;;)
      {
        String str2 = ((BufferedReader)localObject).readLine();
        if (str2 == null) {
          break;
        }
        localArrayList.add(str2);
      }
      if (localArrayList.size() != 0) {
        break label128;
      }
    }
    catch (Exception localException)
    {
      Logger.logError("Error reading logcat output!");
      return localException.getMessage();
    }
    return "You must add the android.permission.READ_LOGS permission to your manifest file!";
    label128:
    j = localArrayList.size() - i;
    i = j;
    if (j < 0) {
      i = 0;
    }
    for (;;)
    {
      if (i < localArrayList.size())
      {
        localException.append((String)localArrayList.get(i) + "\n");
        i += 1;
      }
      else
      {
        String str1 = localException.toString().replaceAll(Pattern.quote("}{^"), "}{ ^");
        return str1;
      }
    }
  }
  
  protected static void setForceSendPingOnNextStart()
  {
    Thread localThread = new LowPriorityThreadFactory().newThread(new Runnable()
    {
      public void run()
      {
        File localFile = new File(Properties.FILES_PATH + "/" + ".setForceSendPingOnNextStart");
        if ((localFile != null) && (!localFile.exists())) {}
        try
        {
          localFile.createNewFile();
          return;
        }
        catch (IOException localIOException)
        {
          localIOException.printStackTrace();
        }
      }
    });
    ExecutorService localExecutorService = getExecutor();
    if ((localThread != null) && (localExecutorService != null)) {
      localExecutorService.submit(localThread);
    }
  }
  
  protected static void setLastPingSentTime(Context paramContext)
  {
    paramContext = new LowPriorityThreadFactory().newThread(new Runnable()
    {
      public void run()
      {
        if (this.val$ctx != null)
        {
          SharedPreferences localSharedPreferences = this.val$ctx.getSharedPreferences("Mint", 0);
          if (localSharedPreferences != null) {
            localSharedPreferences.edit().putLong("LASTPINGTIME", System.currentTimeMillis()).commit();
          }
        }
      }
    });
    ExecutorService localExecutorService = getExecutor();
    if ((paramContext != null) && (localExecutorService != null)) {
      localExecutorService.submit(paramContext);
    }
  }
  
  protected static boolean shouldSendPing(Context paramContext)
  {
    for (;;)
    {
      try
      {
        Object localObject = new File(Properties.FILES_PATH + "/" + ".setForceSendPingOnNextStart");
        if ((localObject != null) && (((File)localObject).exists()))
        {
          ((File)localObject).delete();
          bool1 = true;
          return bool1;
        }
        boolean bool2 = true;
        boolean bool1 = bool2;
        if (paramContext != null)
        {
          localObject = paramContext.getSharedPreferences("Mint", 0);
          bool1 = bool2;
          if (localObject != null)
          {
            long l = ((SharedPreferences)localObject).getLong("LASTPINGTIME", 0L);
            if (System.currentTimeMillis() - l > Properties.RemoteSettingsProps.sessionTime.intValue() * 1000)
            {
              bool2 = true;
              bool1 = bool2;
              if (bool2)
              {
                setLastPingSentTime(paramContext);
                bool1 = bool2;
              }
            }
            else
            {
              bool2 = false;
            }
          }
        }
      }
      finally {}
    }
  }
}
