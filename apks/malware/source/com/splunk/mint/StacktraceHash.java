package com.splunk.mint;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class StacktraceHash
{
  private static String guidRegex = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[34][0-9a-fA-F]{3}-[89ab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}";
  private static String hexRegex = "0[xX][0-9a-fA-F]+";
  
  StacktraceHash() {}
  
  public static final HashMap<String, String> manipulateStacktrace(String paramString1, String paramString2)
  {
    if ((paramString1 == null) || (paramString2 == null)) {
      return null;
    }
    HashMap localHashMap = new HashMap();
    Object localObject2 = null;
    Object localObject3 = paramString2.split("\n\t");
    Object localObject1 = localObject3;
    if (localObject3.length == 1) {
      localObject1 = paramString2.split("\n");
    }
    localObject3 = removeFirstDate(localObject1[0]);
    try
    {
      paramString2 = ((String)localObject3).substring(0, ((String)localObject3).indexOf(":"));
      localHashMap.put("message", ((String)localObject3).replaceAll("\n", " ").replaceAll("Caused by:", ""));
      localHashMap.put("klass", paramString2);
      paramString2 = paramString1;
      if (paramString1.contains("."))
      {
        paramString1 = paramString1.split("\\.");
        if (paramString1[0].length() > 3) {
          paramString2 = paramString1[0];
        }
      }
      else
      {
        localObject3 = new StringBuilder();
        j = localObject1.length;
        i = 0;
        while (i < j)
        {
          paramString1 = localObject1[i];
          if ((paramString1.indexOf(paramString2) != -1) && (paramString1.indexOf(paramString2) <= 20))
          {
            ((StringBuilder)localObject3).append(paramString1);
            ((StringBuilder)localObject3).append("\n");
          }
          i += 1;
        }
      }
    }
    catch (Exception paramString2)
    {
      int j;
      int i;
      for (;;)
      {
        paramString2 = (String)localObject3;
        continue;
        paramString2 = paramString1[1];
      }
      if (((StringBuilder)localObject3).length() == 0)
      {
        j = localObject1.length;
        i = 0;
        while (i < j)
        {
          paramString1 = localObject1[i];
          if ((paramString1.length() > 10) && (paramString1.trim().startsWith("at ")) && (!paramString1.contains("...")) && (!paramString1.contains(".java.")) && (!paramString1.substring(0, 10).contains("android")) && (!paramString1.contains("org.apache")) && (!paramString1.contains("org.acra")) && (!paramString1.contains("dalvik")) && (!paramString1.contains(".acra.")))
          {
            ((StringBuilder)localObject3).append(paramString1);
            ((StringBuilder)localObject3).append("\n");
          }
          i += 1;
        }
      }
      if (((StringBuilder)localObject3).length() == 0)
      {
        j = localObject1.length;
        i = 0;
        while (i < j)
        {
          paramString1 = localObject1[i];
          if ((paramString1.length() > 10) && (paramString1.trim().startsWith("at ")) && ((paramString1.contains(".java")) || (paramString1.contains("Unknown"))))
          {
            ((StringBuilder)localObject3).append(paramString1);
            ((StringBuilder)localObject3).append("\n");
          }
          i += 1;
        }
      }
      localObject1 = localObject3.toString().split("\n")[0];
      paramString1 = localObject2;
      if (!((String)localObject1).contains(paramString2)) {
        paramString1 = localObject1.split("\\.")[1];
      }
      localHashMap.put("library", paramString1);
      if (!((String)localObject1).contains("(")) {}
    }
    for (paramString1 = ((String)localObject1).substring(((String)localObject1).indexOf("(") + 1, ((String)localObject1).indexOf(")"));; paramString1 = "Unknown")
    {
      localHashMap.put("where", paramString1);
      paramString2 = ((StringBuilder)localObject3).toString().replaceAll("@\\w+", "").replaceAll(hexRegex, "").replaceAll(guidRegex, "").replaceAll("$\\w+", "");
      paramString1 = paramString2;
      if (!((String)localObject1).contains(".java:")) {
        paramString1 = paramString2.replace((CharSequence)localObject1, ((String)localObject1).replaceAll("\\d+", ""));
      }
      localHashMap.put("errorHash", md5(paramString1));
      return localHashMap;
    }
  }
  
  private static String md5(String paramString)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).reset();
      ((MessageDigest)localObject).update(paramString.getBytes());
      for (paramString = new BigInteger(1, ((MessageDigest)localObject).digest()).toString(16);; paramString = "0" + paramString)
      {
        localObject = paramString;
        if (paramString.length() >= 32) {
          break;
        }
      }
      return localObject;
    }
    catch (NoSuchAlgorithmException paramString)
    {
      paramString.printStackTrace();
      localObject = "";
    }
  }
  
  private static String removeFirstDate(String paramString)
  {
    String str = paramString;
    if (paramString.contains("\n"))
    {
      String[] arrayOfString = paramString.split("\\n");
      str = paramString;
      if (Pattern.compile("[\\d]{2}:[\\d]{2}:[\\d]{2}").matcher(paramString).find()) {
        str = arrayOfString[1];
      }
    }
    return str;
  }
}
