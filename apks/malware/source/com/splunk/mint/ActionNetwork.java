package com.splunk.mint;

import android.content.Context;
import org.json.JSONException;
import org.json.JSONObject;

public class ActionNetwork
  extends BaseDTO
  implements InterfaceDataType
{
  private String exception = "NA";
  private Boolean failed = Boolean.valueOf(true);
  private Long latency = Long.valueOf(0L);
  private String protocol = "NA";
  private Long requestLength = Long.valueOf(0L);
  private Long responseLength = Long.valueOf(0L);
  private Integer statusCode = Integer.valueOf(0);
  private String url = "";
  
  public ActionNetwork(EnumActionType paramEnumActionType, String paramString)
  {
    super(paramEnumActionType, null);
    this.url = paramString;
  }
  
  public static final void logNetwork(String paramString1, long paramLong1, long paramLong2, String paramString2, int paramInt, long paramLong3, long paramLong4, String paramString3)
  {
    paramString1 = new ActionNetwork(EnumActionType.network, paramString1);
    paramString1.latency = Long.valueOf(paramLong2 - paramLong1);
    paramString1.statusCode = Integer.valueOf(paramInt);
    paramString1.responseLength = Long.valueOf(paramLong4);
    paramString1.requestLength = Long.valueOf(paramLong3);
    if ((paramString1.statusCode.intValue() >= 200) && (paramString1.statusCode.intValue() < 400)) {}
    for (paramString1.failed = Boolean.valueOf(false);; paramString1.failed = Boolean.valueOf(true))
    {
      paramString1.exception = paramString3;
      paramString1.protocol = paramString2;
      paramString1.save(new DataSaver());
      return;
    }
  }
  
  private static final String stripHttpFromUrl(String paramString)
  {
    String str = paramString;
    if (paramString != null)
    {
      if (!paramString.toLowerCase().startsWith("http://")) {
        break label29;
      }
      str = paramString.replaceFirst("(?i)http://", "");
    }
    label29:
    do
    {
      return str;
      str = paramString;
    } while (!paramString.toLowerCase().startsWith("https://"));
    return paramString.replaceFirst("(?i)https://", "");
  }
  
  public void save(DataSaver paramDataSaver)
  {
    paramDataSaver.save(toJsonLine());
  }
  
  public void send(Context paramContext, NetSender paramNetSender, boolean paramBoolean)
  {
    paramNetSender.send(toJsonLine(), paramBoolean);
  }
  
  public void send(NetSender paramNetSender, boolean paramBoolean)
  {
    paramNetSender.send(toJsonLine(), paramBoolean);
  }
  
  public String toJsonLine()
  {
    JSONObject localJSONObject = getBasicDataFixtureJson();
    try
    {
      localJSONObject.put("url", stripHttpFromUrl(this.url));
      localJSONObject.put("latency", this.latency);
      localJSONObject.put("statusCode", this.statusCode);
      localJSONObject.put("responseLength", this.responseLength);
      localJSONObject.put("requestLength", this.requestLength);
      localJSONObject.put("failed", this.failed);
      localJSONObject.put("protocol", this.protocol);
      if ((this.exception != null) && (this.exception.length() > 0)) {
        localJSONObject.put("exception", this.exception);
      }
      for (;;)
      {
        return localJSONObject.toString() + Properties.getSeparator(EnumActionType.network);
        localJSONObject.put("exception", "NA");
      }
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        localJSONException.printStackTrace();
      }
    }
  }
}
