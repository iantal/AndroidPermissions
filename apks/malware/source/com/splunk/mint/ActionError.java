package com.splunk.mint;

import android.app.ActivityManager.MemoryInfo;
import android.content.Context;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

class ActionError
  extends BaseDTO
  implements InterfaceDataType
{
  private JSONArray breadcrumbs;
  private String errorHash;
  private EnumStateStatus gpsStatus;
  private Boolean handled;
  private String klass;
  private String memAppAvailable;
  private String memAppMax;
  private String memAppTotal;
  private String memSysAvailable = null;
  private String memSysLow;
  private String memSysThreshold;
  private String memSysTotal = null;
  private String message;
  private String msFromStart;
  private String stacktrace;
  private String where;
  
  public ActionError(EnumActionType paramEnumActionType, String paramString, EnumExceptionType paramEnumExceptionType, HashMap<String, Object> paramHashMap)
  {
    super(paramEnumActionType, paramHashMap);
    this.stacktrace = paramString;
    if (paramEnumExceptionType == EnumExceptionType.HANDLED) {}
    for (this.handled = Boolean.valueOf(true);; this.handled = Boolean.valueOf(false))
    {
      paramEnumActionType = StacktraceHash.manipulateStacktrace(Properties.APP_PACKAGE, paramString);
      this.klass = ((String)paramEnumActionType.get("klass"));
      this.message = ((String)paramEnumActionType.get("message"));
      this.errorHash = ((String)paramEnumActionType.get("errorHash"));
      this.where = ((String)paramEnumActionType.get("where"));
      this.gpsStatus = Properties.IS_GPS_ON;
      this.msFromStart = Utils.getMilisFromStart();
      paramEnumActionType = new ActivityManager.MemoryInfo();
      paramString = Runtime.getRuntime();
      if (!this.handled.booleanValue())
      {
        paramEnumExceptionType = Utils.getMemoryInfo();
        this.memSysTotal = ((String)paramEnumExceptionType.get("memTotal"));
        this.memSysAvailable = ((String)paramEnumExceptionType.get("memFree"));
      }
      this.memSysThreshold = String.valueOf(paramEnumActionType.threshold / 1048576.0D);
      this.memSysLow = String.valueOf(paramEnumActionType.lowMemory);
      this.memAppMax = String.valueOf(paramString.maxMemory() / 1048576.0D);
      this.memAppAvailable = String.valueOf(paramString.freeMemory() / 1048576.0D);
      this.memAppTotal = String.valueOf(paramString.totalMemory() / 1048576.0D);
      this.breadcrumbs = Properties.breadcrumbs.getList();
      return;
    }
  }
  
  protected final String getErrorHash()
  {
    return this.errorHash;
  }
  
  public void save(DataSaver paramDataSaver)
  {
    new DataSaver().save(toJsonLine());
  }
  
  public void send(Context paramContext, NetSender paramNetSender, boolean paramBoolean)
  {
    paramNetSender.send(toJsonLine(), paramBoolean);
  }
  
  public void send(NetSender paramNetSender, boolean paramBoolean)
  {
    paramNetSender.send(toJsonLine(), paramBoolean);
  }
  
  public String toJsonLine()
  {
    JSONObject localJSONObject = getBasicDataFixtureJson();
    for (;;)
    {
      try
      {
        localJSONObject.put("stacktrace", this.stacktrace);
        localJSONObject.put("handled", this.handled);
        localJSONObject.put("klass", this.klass);
        localJSONObject.put("message", this.message);
        localJSONObject.put("errorHash", this.errorHash);
        localJSONObject.put("where", this.where);
        localJSONObject.put("rooted", this.rooted);
        localJSONObject.put("gpsStatus", this.gpsStatus.toString());
        localJSONObject.put("msFromStart", this.msFromStart);
        if ((this.breadcrumbs != null) && (this.breadcrumbs.length() > 0)) {
          localJSONObject.put("breadcrumbs", this.breadcrumbs);
        }
        localJSONObject.put("memSysLow", this.memSysLow);
        if (!this.handled.booleanValue())
        {
          localJSONObject.put("memSysTotal", this.memSysTotal);
          localJSONObject.put("memSysAvailable", this.memSysAvailable);
        }
        localJSONObject.put("memSysThreshold", this.memSysThreshold);
        localJSONObject.put("memAppMax", this.memAppMax);
        localJSONObject.put("memAppAvailable", this.memAppAvailable);
        localJSONObject.put("memAppTotal", this.memAppTotal);
        if ((!Properties.SEND_LOG) || (this.handled.booleanValue())) {
          continue;
        }
        localJSONObject.put("log", Utils.readLogs());
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
        continue;
      }
      return localJSONObject.toString() + Properties.getSeparator(EnumActionType.error);
      localJSONObject.put("log", "NA");
    }
  }
}
