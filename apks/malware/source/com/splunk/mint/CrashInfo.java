package com.splunk.mint;

import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class CrashInfo
  extends BaseExecutor
  implements InterfaceExecutor
{
  private static final String crashCounterFile = "crashCounter";
  private static final String lastCrashIDFile = "lastCrashID";
  
  CrashInfo() {}
  
  /* Error */
  protected static int getCrashCounter()
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_0
    //   2: getstatic 35	com/splunk/mint/Properties:FILES_PATH	Ljava/lang/String;
    //   5: ifnonnull +10 -> 15
    //   8: ldc 37
    //   10: invokestatic 43	com/splunk/mint/Logger:logWarning	(Ljava/lang/String;)V
    //   13: iload_0
    //   14: ireturn
    //   15: new 45	java/io/File
    //   18: dup
    //   19: new 47	java/lang/StringBuilder
    //   22: dup
    //   23: invokespecial 48	java/lang/StringBuilder:<init>	()V
    //   26: getstatic 35	com/splunk/mint/Properties:FILES_PATH	Ljava/lang/String;
    //   29: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: ldc 54
    //   34: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   37: ldc 16
    //   39: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   42: invokevirtual 58	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   45: invokespecial 60	java/io/File:<init>	(Ljava/lang/String;)V
    //   48: astore_3
    //   49: aload_3
    //   50: ifnull +30 -> 80
    //   53: aload_3
    //   54: invokevirtual 64	java/io/File:exists	()Z
    //   57: ifne +23 -> 80
    //   60: aload_3
    //   61: invokevirtual 67	java/io/File:createNewFile	()Z
    //   64: pop
    //   65: iconst_0
    //   66: invokestatic 73	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   69: invokevirtual 76	java/lang/Integer:intValue	()I
    //   72: istore_1
    //   73: iload_1
    //   74: ireturn
    //   75: astore_2
    //   76: aload_2
    //   77: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   80: aconst_null
    //   81: astore_2
    //   82: aconst_null
    //   83: astore 5
    //   85: new 81	java/io/BufferedReader
    //   88: dup
    //   89: new 83	java/io/FileReader
    //   92: dup
    //   93: aload_3
    //   94: invokespecial 86	java/io/FileReader:<init>	(Ljava/io/File;)V
    //   97: invokespecial 89	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   100: astore_3
    //   101: aload_3
    //   102: invokevirtual 92	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   105: invokevirtual 97	java/lang/String:trim	()Ljava/lang/String;
    //   108: invokestatic 101	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   111: istore_1
    //   112: iload_1
    //   113: invokestatic 73	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   116: astore_2
    //   117: aload_2
    //   118: invokevirtual 76	java/lang/Integer:intValue	()I
    //   121: istore_1
    //   122: iload_1
    //   123: istore_0
    //   124: aload_3
    //   125: ifnull -112 -> 13
    //   128: aload_3
    //   129: invokevirtual 104	java/io/BufferedReader:close	()V
    //   132: iload_1
    //   133: ireturn
    //   134: astore_2
    //   135: aload_2
    //   136: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   139: iload_1
    //   140: ireturn
    //   141: astore_2
    //   142: iconst_0
    //   143: invokestatic 73	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   146: astore_2
    //   147: goto -30 -> 117
    //   150: astore 4
    //   152: aload 5
    //   154: astore_3
    //   155: aload_3
    //   156: astore_2
    //   157: ldc 106
    //   159: invokestatic 43	com/splunk/mint/Logger:logWarning	(Ljava/lang/String;)V
    //   162: aload_3
    //   163: astore_2
    //   164: getstatic 112	com/splunk/mint/Mint:DEBUG	Z
    //   167: ifeq +10 -> 177
    //   170: aload_3
    //   171: astore_2
    //   172: aload 4
    //   174: invokevirtual 113	java/lang/Exception:printStackTrace	()V
    //   177: aload_3
    //   178: ifnull -165 -> 13
    //   181: aload_3
    //   182: invokevirtual 104	java/io/BufferedReader:close	()V
    //   185: iconst_0
    //   186: ireturn
    //   187: astore_2
    //   188: aload_2
    //   189: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   192: iconst_0
    //   193: ireturn
    //   194: astore_3
    //   195: aload_2
    //   196: ifnull +7 -> 203
    //   199: aload_2
    //   200: invokevirtual 104	java/io/BufferedReader:close	()V
    //   203: aload_3
    //   204: athrow
    //   205: astore_2
    //   206: aload_2
    //   207: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   210: goto -7 -> 203
    //   213: astore 4
    //   215: aload_3
    //   216: astore_2
    //   217: aload 4
    //   219: astore_3
    //   220: goto -25 -> 195
    //   223: astore 4
    //   225: goto -70 -> 155
    // Local variable table:
    //   start	length	slot	name	signature
    //   1	123	0	i	int
    //   72	68	1	j	int
    //   75	2	2	localIOException1	java.io.IOException
    //   81	37	2	localInteger	Integer
    //   134	2	2	localIOException2	java.io.IOException
    //   141	1	2	localException1	Exception
    //   146	26	2	localObject1	Object
    //   187	13	2	localIOException3	java.io.IOException
    //   205	2	2	localIOException4	java.io.IOException
    //   216	1	2	localObject2	Object
    //   48	134	3	localObject3	Object
    //   194	22	3	localObject4	Object
    //   219	1	3	localObject5	Object
    //   150	23	4	localException2	Exception
    //   213	5	4	localObject6	Object
    //   223	1	4	localException3	Exception
    //   83	70	5	localObject7	Object
    // Exception table:
    //   from	to	target	type
    //   60	73	75	java/io/IOException
    //   128	132	134	java/io/IOException
    //   101	112	141	java/lang/Exception
    //   85	101	150	java/lang/Exception
    //   181	185	187	java/io/IOException
    //   85	101	194	finally
    //   157	162	194	finally
    //   164	170	194	finally
    //   172	177	194	finally
    //   199	203	205	java/io/IOException
    //   101	112	213	finally
    //   117	122	213	finally
    //   117	122	223	java/lang/Exception
  }
  
  /* Error */
  protected static String getLastCrashID()
  {
    // Byte code:
    //   0: new 45	java/io/File
    //   3: dup
    //   4: new 47	java/lang/StringBuilder
    //   7: dup
    //   8: invokespecial 48	java/lang/StringBuilder:<init>	()V
    //   11: getstatic 35	com/splunk/mint/Properties:FILES_PATH	Ljava/lang/String;
    //   14: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   17: ldc 54
    //   19: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: ldc 19
    //   24: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   27: invokevirtual 58	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   30: invokespecial 60	java/io/File:<init>	(Ljava/lang/String;)V
    //   33: astore_1
    //   34: aload_1
    //   35: ifnull +24 -> 59
    //   38: aload_1
    //   39: invokevirtual 64	java/io/File:exists	()Z
    //   42: ifne +17 -> 59
    //   45: aload_1
    //   46: invokevirtual 67	java/io/File:createNewFile	()Z
    //   49: pop
    //   50: aconst_null
    //   51: astore_2
    //   52: aload_2
    //   53: areturn
    //   54: astore_0
    //   55: aload_0
    //   56: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   59: aconst_null
    //   60: astore_0
    //   61: aconst_null
    //   62: astore_3
    //   63: new 81	java/io/BufferedReader
    //   66: dup
    //   67: new 83	java/io/FileReader
    //   70: dup
    //   71: aload_1
    //   72: invokespecial 86	java/io/FileReader:<init>	(Ljava/io/File;)V
    //   75: invokespecial 89	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   78: astore_1
    //   79: aload_1
    //   80: invokevirtual 92	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   83: invokevirtual 97	java/lang/String:trim	()Ljava/lang/String;
    //   86: astore_0
    //   87: aload_0
    //   88: astore_2
    //   89: aload_1
    //   90: ifnull -38 -> 52
    //   93: aload_1
    //   94: invokevirtual 104	java/io/BufferedReader:close	()V
    //   97: aload_0
    //   98: areturn
    //   99: astore_1
    //   100: aload_1
    //   101: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   104: aload_0
    //   105: areturn
    //   106: astore_0
    //   107: aload_0
    //   108: invokevirtual 113	java/lang/Exception:printStackTrace	()V
    //   111: aconst_null
    //   112: astore_0
    //   113: goto -26 -> 87
    //   116: astore_2
    //   117: aload_3
    //   118: astore_1
    //   119: aload_1
    //   120: astore_0
    //   121: ldc 116
    //   123: invokestatic 43	com/splunk/mint/Logger:logWarning	(Ljava/lang/String;)V
    //   126: aload_1
    //   127: astore_0
    //   128: getstatic 112	com/splunk/mint/Mint:DEBUG	Z
    //   131: ifeq +9 -> 140
    //   134: aload_1
    //   135: astore_0
    //   136: aload_2
    //   137: invokevirtual 113	java/lang/Exception:printStackTrace	()V
    //   140: aload_1
    //   141: ifnull +7 -> 148
    //   144: aload_1
    //   145: invokevirtual 104	java/io/BufferedReader:close	()V
    //   148: aconst_null
    //   149: areturn
    //   150: astore_0
    //   151: aload_0
    //   152: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   155: goto -7 -> 148
    //   158: astore_1
    //   159: aload_0
    //   160: ifnull +7 -> 167
    //   163: aload_0
    //   164: invokevirtual 104	java/io/BufferedReader:close	()V
    //   167: aload_1
    //   168: athrow
    //   169: astore_0
    //   170: aload_0
    //   171: invokevirtual 79	java/io/IOException:printStackTrace	()V
    //   174: goto -7 -> 167
    //   177: astore_2
    //   178: aload_1
    //   179: astore_0
    //   180: aload_2
    //   181: astore_1
    //   182: goto -23 -> 159
    //   185: astore_2
    //   186: goto -67 -> 119
    // Local variable table:
    //   start	length	slot	name	signature
    //   54	2	0	localIOException1	java.io.IOException
    //   60	45	0	str	String
    //   106	2	0	localException1	Exception
    //   112	24	0	localObject1	Object
    //   150	14	0	localIOException2	java.io.IOException
    //   169	2	0	localIOException3	java.io.IOException
    //   179	1	0	localObject2	Object
    //   33	61	1	localObject3	Object
    //   99	2	1	localIOException4	java.io.IOException
    //   118	27	1	localObject4	Object
    //   158	21	1	localObject5	Object
    //   181	1	1	localObject6	Object
    //   51	38	2	localObject7	Object
    //   116	21	2	localException2	Exception
    //   177	4	2	localObject8	Object
    //   185	1	2	localException3	Exception
    //   62	56	3	localObject9	Object
    // Exception table:
    //   from	to	target	type
    //   45	50	54	java/io/IOException
    //   93	97	99	java/io/IOException
    //   79	87	106	java/lang/Exception
    //   63	79	116	java/lang/Exception
    //   144	148	150	java/io/IOException
    //   63	79	158	finally
    //   121	126	158	finally
    //   128	134	158	finally
    //   136	140	158	finally
    //   163	167	169	java/io/IOException
    //   79	87	177	finally
    //   107	111	177	finally
    //   107	111	185	java/lang/Exception
  }
  
  protected void clearCrashCounter()
  {
    Thread localThread = new LowPriorityThreadFactory().newThread(new Runnable()
    {
      public void run()
      {
        File localFile = new File(Properties.FILES_PATH + "/" + "crashCounter");
        if ((localFile != null) && (localFile.exists())) {
          localFile.delete();
        }
      }
    });
    ExecutorService localExecutorService = getExecutor();
    if ((localThread != null) && (localExecutorService != null)) {
      localExecutorService.submit(localThread);
    }
  }
  
  public ExecutorService getExecutor()
  {
    if (executor == null) {
      executor = Executors.newFixedThreadPool(1);
    }
    return executor;
  }
  
  protected void saveCrashCounter()
  {
    Thread localThread = new LowPriorityThreadFactory().newThread(new Runnable()
    {
      /* Error */
      public void run()
      {
        // Byte code:
        //   0: new 27	java/io/File
        //   3: dup
        //   4: new 29	java/lang/StringBuilder
        //   7: dup
        //   8: invokespecial 30	java/lang/StringBuilder:<init>	()V
        //   11: getstatic 36	com/splunk/mint/Properties:FILES_PATH	Ljava/lang/String;
        //   14: invokevirtual 40	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   17: ldc 42
        //   19: invokevirtual 40	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   22: ldc 44
        //   24: invokevirtual 40	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   27: invokevirtual 48	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //   30: invokespecial 51	java/io/File:<init>	(Ljava/lang/String;)V
        //   33: astore 8
        //   35: aload 8
        //   37: ifnull +17 -> 54
        //   40: aload 8
        //   42: invokevirtual 55	java/io/File:exists	()Z
        //   45: ifne +9 -> 54
        //   48: aload 8
        //   50: invokevirtual 58	java/io/File:createNewFile	()Z
        //   53: pop
        //   54: aconst_null
        //   55: astore_3
        //   56: aconst_null
        //   57: astore 7
        //   59: aconst_null
        //   60: astore 4
        //   62: aconst_null
        //   63: astore 6
        //   65: aconst_null
        //   66: astore 5
        //   68: new 60	java/io/BufferedReader
        //   71: dup
        //   72: new 62	java/io/FileReader
        //   75: dup
        //   76: aload 8
        //   78: invokespecial 65	java/io/FileReader:<init>	(Ljava/io/File;)V
        //   81: invokespecial 68	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
        //   84: astore_2
        //   85: aload_2
        //   86: invokevirtual 71	java/io/BufferedReader:readLine	()Ljava/lang/String;
        //   89: invokevirtual 76	java/lang/String:trim	()Ljava/lang/String;
        //   92: invokestatic 82	java/lang/Integer:parseInt	(Ljava/lang/String;)I
        //   95: istore_1
        //   96: iload_1
        //   97: invokestatic 86	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //   100: astore_3
        //   101: aload_3
        //   102: invokevirtual 90	java/lang/Integer:intValue	()I
        //   105: istore_1
        //   106: new 92	java/io/BufferedWriter
        //   109: dup
        //   110: new 94	java/io/FileWriter
        //   113: dup
        //   114: aload 8
        //   116: invokespecial 95	java/io/FileWriter:<init>	(Ljava/io/File;)V
        //   119: invokespecial 98	java/io/BufferedWriter:<init>	(Ljava/io/Writer;)V
        //   122: astore_3
        //   123: aload_3
        //   124: iload_1
        //   125: iconst_1
        //   126: iadd
        //   127: invokestatic 86	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //   130: invokestatic 101	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
        //   133: invokevirtual 104	java/io/BufferedWriter:write	(Ljava/lang/String;)V
        //   136: aload_3
        //   137: invokevirtual 107	java/io/BufferedWriter:newLine	()V
        //   140: aload_3
        //   141: invokevirtual 110	java/io/BufferedWriter:flush	()V
        //   144: aload_3
        //   145: invokevirtual 113	java/io/BufferedWriter:close	()V
        //   148: aload_2
        //   149: ifnull +7 -> 156
        //   152: aload_2
        //   153: invokevirtual 114	java/io/BufferedReader:close	()V
        //   156: aload_3
        //   157: ifnull +188 -> 345
        //   160: aload_3
        //   161: invokevirtual 113	java/io/BufferedWriter:close	()V
        //   164: return
        //   165: astore_2
        //   166: aload_2
        //   167: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   170: goto -116 -> 54
        //   173: astore_3
        //   174: iconst_0
        //   175: invokestatic 86	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
        //   178: astore_3
        //   179: goto -78 -> 101
        //   182: astore_2
        //   183: aload_2
        //   184: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   187: goto -31 -> 156
        //   190: astore_2
        //   191: aload_2
        //   192: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   195: return
        //   196: astore 6
        //   198: aload 7
        //   200: astore_2
        //   201: aload_2
        //   202: astore_3
        //   203: aload 5
        //   205: astore 4
        //   207: ldc 119
        //   209: invokestatic 124	com/splunk/mint/Logger:logWarning	(Ljava/lang/String;)V
        //   212: aload_2
        //   213: astore_3
        //   214: aload 5
        //   216: astore 4
        //   218: getstatic 130	com/splunk/mint/Mint:DEBUG	Z
        //   221: ifeq +14 -> 235
        //   224: aload_2
        //   225: astore_3
        //   226: aload 5
        //   228: astore 4
        //   230: aload 6
        //   232: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   235: aload_2
        //   236: ifnull +7 -> 243
        //   239: aload_2
        //   240: invokevirtual 114	java/io/BufferedReader:close	()V
        //   243: aload 5
        //   245: ifnull -81 -> 164
        //   248: aload 5
        //   250: invokevirtual 113	java/io/BufferedWriter:close	()V
        //   253: return
        //   254: astore_2
        //   255: aload_2
        //   256: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   259: return
        //   260: astore_2
        //   261: aload_2
        //   262: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   265: goto -22 -> 243
        //   268: astore_2
        //   269: aload_3
        //   270: ifnull +7 -> 277
        //   273: aload_3
        //   274: invokevirtual 114	java/io/BufferedReader:close	()V
        //   277: aload 4
        //   279: ifnull +8 -> 287
        //   282: aload 4
        //   284: invokevirtual 113	java/io/BufferedWriter:close	()V
        //   287: aload_2
        //   288: athrow
        //   289: astore_3
        //   290: aload_3
        //   291: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   294: goto -17 -> 277
        //   297: astore_3
        //   298: aload_3
        //   299: invokevirtual 117	java/io/IOException:printStackTrace	()V
        //   302: goto -15 -> 287
        //   305: astore 5
        //   307: aload_2
        //   308: astore_3
        //   309: aload 6
        //   311: astore 4
        //   313: aload 5
        //   315: astore_2
        //   316: goto -47 -> 269
        //   319: astore 5
        //   321: aload_3
        //   322: astore 4
        //   324: aload_2
        //   325: astore_3
        //   326: aload 5
        //   328: astore_2
        //   329: goto -60 -> 269
        //   332: astore 6
        //   334: goto -133 -> 201
        //   337: astore 6
        //   339: aload_3
        //   340: astore 5
        //   342: goto -141 -> 201
        //   345: return
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	346	0	this	2
        //   95	32	1	i	int
        //   84	69	2	localBufferedReader	java.io.BufferedReader
        //   165	2	2	localIOException1	java.io.IOException
        //   182	2	2	localIOException2	java.io.IOException
        //   190	2	2	localIOException3	java.io.IOException
        //   200	40	2	localObject1	Object
        //   254	2	2	localIOException4	java.io.IOException
        //   260	2	2	localIOException5	java.io.IOException
        //   268	40	2	localObject2	Object
        //   315	14	2	localObject3	Object
        //   55	106	3	localObject4	Object
        //   173	1	3	localException	Exception
        //   178	96	3	localObject5	Object
        //   289	2	3	localIOException6	java.io.IOException
        //   297	2	3	localIOException7	java.io.IOException
        //   308	32	3	localObject6	Object
        //   60	263	4	localObject7	Object
        //   66	183	5	localObject8	Object
        //   305	9	5	localObject9	Object
        //   319	8	5	localObject10	Object
        //   340	1	5	localObject11	Object
        //   63	1	6	localObject12	Object
        //   196	114	6	localIOException8	java.io.IOException
        //   332	1	6	localIOException9	java.io.IOException
        //   337	1	6	localIOException10	java.io.IOException
        //   57	142	7	localObject13	Object
        //   33	82	8	localFile	File
        // Exception table:
        //   from	to	target	type
        //   48	54	165	java/io/IOException
        //   85	96	173	java/lang/Exception
        //   152	156	182	java/io/IOException
        //   160	164	190	java/io/IOException
        //   68	85	196	java/io/IOException
        //   248	253	254	java/io/IOException
        //   239	243	260	java/io/IOException
        //   68	85	268	finally
        //   207	212	268	finally
        //   218	224	268	finally
        //   230	235	268	finally
        //   273	277	289	java/io/IOException
        //   282	287	297	java/io/IOException
        //   85	96	305	finally
        //   101	123	305	finally
        //   123	148	319	finally
        //   85	96	332	java/io/IOException
        //   101	123	332	java/io/IOException
        //   123	148	337	java/io/IOException
      }
    });
    ExecutorService localExecutorService = getExecutor();
    if ((localThread != null) && (localExecutorService != null)) {
      localExecutorService.submit(localThread);
    }
  }
  
  protected void saveLastCrashID(final String paramString)
  {
    if (paramString != null)
    {
      paramString = new LowPriorityThreadFactory().newThread(new Runnable()
      {
        /* Error */
        public void run()
        {
          // Byte code:
          //   0: new 30	java/io/File
          //   3: dup
          //   4: new 32	java/lang/StringBuilder
          //   7: dup
          //   8: invokespecial 33	java/lang/StringBuilder:<init>	()V
          //   11: getstatic 38	com/splunk/mint/Properties:FILES_PATH	Ljava/lang/String;
          //   14: invokevirtual 42	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   17: ldc 44
          //   19: invokevirtual 42	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   22: ldc 46
          //   24: invokevirtual 42	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   27: invokevirtual 50	java/lang/StringBuilder:toString	()Ljava/lang/String;
          //   30: invokespecial 52	java/io/File:<init>	(Ljava/lang/String;)V
          //   33: astore_2
          //   34: aload_2
          //   35: ifnull +15 -> 50
          //   38: aload_2
          //   39: invokevirtual 56	java/io/File:exists	()Z
          //   42: ifne +8 -> 50
          //   45: aload_2
          //   46: invokevirtual 59	java/io/File:createNewFile	()Z
          //   49: pop
          //   50: aconst_null
          //   51: astore_1
          //   52: aconst_null
          //   53: astore 4
          //   55: new 61	java/io/BufferedWriter
          //   58: dup
          //   59: new 63	java/io/FileWriter
          //   62: dup
          //   63: aload_2
          //   64: invokespecial 66	java/io/FileWriter:<init>	(Ljava/io/File;)V
          //   67: invokespecial 69	java/io/BufferedWriter:<init>	(Ljava/io/Writer;)V
          //   70: astore_2
          //   71: aload_2
          //   72: aload_0
          //   73: getfield 21	com/splunk/mint/CrashInfo$3:val$lastID	Ljava/lang/String;
          //   76: invokevirtual 72	java/io/BufferedWriter:write	(Ljava/lang/String;)V
          //   79: aload_2
          //   80: invokevirtual 75	java/io/BufferedWriter:newLine	()V
          //   83: aload_2
          //   84: invokevirtual 78	java/io/BufferedWriter:flush	()V
          //   87: aload_2
          //   88: invokevirtual 81	java/io/BufferedWriter:close	()V
          //   91: aload_2
          //   92: ifnull +93 -> 185
          //   95: aload_2
          //   96: invokevirtual 81	java/io/BufferedWriter:close	()V
          //   99: return
          //   100: astore_1
          //   101: aload_1
          //   102: invokevirtual 84	java/io/IOException:printStackTrace	()V
          //   105: goto -55 -> 50
          //   108: astore_1
          //   109: aload_1
          //   110: invokevirtual 84	java/io/IOException:printStackTrace	()V
          //   113: return
          //   114: astore_3
          //   115: aload 4
          //   117: astore_2
          //   118: aload_2
          //   119: astore_1
          //   120: ldc 86
          //   122: invokestatic 91	com/splunk/mint/Logger:logWarning	(Ljava/lang/String;)V
          //   125: aload_2
          //   126: astore_1
          //   127: getstatic 97	com/splunk/mint/Mint:DEBUG	Z
          //   130: ifeq +9 -> 139
          //   133: aload_2
          //   134: astore_1
          //   135: aload_3
          //   136: invokevirtual 84	java/io/IOException:printStackTrace	()V
          //   139: aload_2
          //   140: ifnull -41 -> 99
          //   143: aload_2
          //   144: invokevirtual 81	java/io/BufferedWriter:close	()V
          //   147: return
          //   148: astore_1
          //   149: aload_1
          //   150: invokevirtual 84	java/io/IOException:printStackTrace	()V
          //   153: return
          //   154: astore_2
          //   155: aload_1
          //   156: ifnull +7 -> 163
          //   159: aload_1
          //   160: invokevirtual 81	java/io/BufferedWriter:close	()V
          //   163: aload_2
          //   164: athrow
          //   165: astore_1
          //   166: aload_1
          //   167: invokevirtual 84	java/io/IOException:printStackTrace	()V
          //   170: goto -7 -> 163
          //   173: astore_3
          //   174: aload_2
          //   175: astore_1
          //   176: aload_3
          //   177: astore_2
          //   178: goto -23 -> 155
          //   181: astore_3
          //   182: goto -64 -> 118
          //   185: return
          // Local variable table:
          //   start	length	slot	name	signature
          //   0	186	0	this	3
          //   51	1	1	localObject1	Object
          //   100	2	1	localIOException1	java.io.IOException
          //   108	2	1	localIOException2	java.io.IOException
          //   119	16	1	localObject2	Object
          //   148	12	1	localIOException3	java.io.IOException
          //   165	2	1	localIOException4	java.io.IOException
          //   175	1	1	localObject3	Object
          //   33	111	2	localObject4	Object
          //   154	21	2	localObject5	Object
          //   177	1	2	localObject6	Object
          //   114	22	3	localIOException5	java.io.IOException
          //   173	4	3	localObject7	Object
          //   181	1	3	localIOException6	java.io.IOException
          //   53	63	4	localObject8	Object
          // Exception table:
          //   from	to	target	type
          //   45	50	100	java/io/IOException
          //   95	99	108	java/io/IOException
          //   55	71	114	java/io/IOException
          //   143	147	148	java/io/IOException
          //   55	71	154	finally
          //   120	125	154	finally
          //   127	133	154	finally
          //   135	139	154	finally
          //   159	163	165	java/io/IOException
          //   71	91	173	finally
          //   71	91	181	java/io/IOException
        }
      });
      ExecutorService localExecutorService = getExecutor();
      if ((paramString != null) && (localExecutorService != null)) {
        localExecutorService.submit(paramString);
      }
    }
  }
}
