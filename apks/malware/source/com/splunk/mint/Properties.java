package com.splunk.mint;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Build.VERSION;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

public class Properties
{
  static String API_KEY;
  protected static final String API_VERSION = "1";
  static String APP_PACKAGE;
  static String APP_VERSIONCODE;
  static String APP_VERSIONNAME;
  static String CARRIER;
  static String CONNECTION;
  static String FILES_PATH;
  static boolean HAS_ROOT = false;
  static EnumStateStatus IS_GPS_ON;
  static String LOCALE;
  static String LOG_FILTER;
  static int LOG_LINES = 0;
  static String OS_VERSION;
  static String PHONE_BRAND;
  static String PHONE_MODEL;
  static final String REMOTEIP_PLACEHOLDER = "{%#@@#%}";
  public static final String REST_VERSION = "1.0";
  static String SCREEN_ORIENTATION;
  protected static final String SDK_PLATFORM = "Android";
  protected static final String SDK_VERSION = "4.0.8";
  static boolean SEND_LOG = false;
  static String STATE;
  static final String TAG = "Mint";
  static long TIMESTAMP;
  static String UID;
  static BreadcrumbsLimited breadcrumbs;
  private static final String[] defaultExcludedUrls;
  public static final ExcludedUrls excludedUrls;
  static ExtraData extraData;
  private static boolean initialized = false;
  public static boolean isKitKat = false;
  public static long lastPingTime;
  static boolean proxyEnabled;
  static boolean sendOnlyWiFi;
  public static ArrayList<String> transactions = new ArrayList(2);
  static volatile TransactionsDatabase transactionsDatabase;
  static String userIdentifier;
  
  static
  {
    defaultExcludedUrls = new String[] { "splkmobile.com" };
    excludedUrls = new ExcludedUrls(defaultExcludedUrls);
    CONNECTION = "NA";
    STATE = "NA";
    FILES_PATH = null;
    APP_VERSIONNAME = "NA";
    APP_VERSIONCODE = "NA";
    APP_PACKAGE = "NA";
    OS_VERSION = "NA";
    PHONE_MODEL = "NA";
    PHONE_BRAND = null;
    API_KEY = "NA";
    HAS_ROOT = false;
    LOCALE = "NA";
    CARRIER = "NA";
    SCREEN_ORIENTATION = "NA";
    UID = "";
    breadcrumbs = new BreadcrumbsLimited();
    extraData = new ExtraData();
    SEND_LOG = false;
    LOG_FILTER = "";
    LOG_LINES = 5000;
    TIMESTAMP = 0L;
    proxyEnabled = false;
    IS_GPS_ON = EnumStateStatus.NA;
    sendOnlyWiFi = false;
    userIdentifier = "NA";
    transactionsDatabase = new TransactionsDatabase();
    lastPingTime = 0L;
  }
  
  public Properties() {}
  
  protected static final String getSeparator(EnumActionType paramEnumActionType)
  {
    return "{^1^" + paramEnumActionType.toString() + "^" + Utils.getTime() + "}";
  }
  
  protected static void initialize(Context paramContext)
  {
    if (!initialized) {
      UID = UidManager.getUid(paramContext);
    }
    try
    {
      localObject = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
      APP_VERSIONNAME = ((PackageInfo)localObject).versionName;
      APP_VERSIONCODE = String.valueOf(((PackageInfo)localObject).versionCode);
      APP_PACKAGE = ((PackageInfo)localObject).packageName;
      PHONE_MODEL = Build.MODEL;
      PHONE_BRAND = Build.MANUFACTURER;
      OS_VERSION = Build.VERSION.RELEASE;
      HAS_ROOT = Utils.checkForRoot();
      isKitKat = Utils.isKitKat();
      if (breadcrumbs == null) {
        breadcrumbs = new BreadcrumbsLimited();
      }
      if (extraData == null) {
        extraData = new ExtraData();
      }
      if (transactionsDatabase == null) {
        transactionsDatabase = new TransactionsDatabase();
      }
    }
    catch (Exception localException2)
    {
      try
      {
        FILES_PATH = paramContext.getFilesDir().getAbsolutePath();
        localObject = RemoteSettings.loadRemoteSettings(paramContext);
        if (localObject != null)
        {
          RemoteSettingsProps.logLevel = ((RemoteSettingsData)localObject).logLevel;
          RemoteSettingsProps.eventLevel = ((RemoteSettingsData)localObject).eventLevel;
          RemoteSettingsProps.netMonitoringEnabled = ((RemoteSettingsData)localObject).netMonitoring;
          RemoteSettingsProps.sessionTime = ((RemoteSettingsData)localObject).sessionTime;
          RemoteSettingsProps.hashCode = ((RemoteSettingsData)localObject).hashCode;
        }
      }
      catch (Exception localException2)
      {
        try
        {
          do
          {
            for (;;)
            {
              Object localObject;
              RemoteSettingsProps.devSettings = new JSONObject(((RemoteSettingsData)localObject).devSettings);
              initialized = true;
              IS_GPS_ON = Utils.isGPSOn(paramContext);
              LOCALE = Locale.getDefault().getCountry();
              if ((LOCALE == null) || (LOCALE.length() == 0)) {
                LOCALE = "NA";
              }
              CARRIER = Utils.getCarrier(paramContext);
              SCREEN_ORIENTATION = Utils.getScreenOrientation(paramContext);
              paramContext = Utils.getConnectionInfo(paramContext);
              CONNECTION = (String)paramContext.get("connection");
              STATE = (String)paramContext.get("state");
              return;
              localException1 = localException1;
              Logger.logError("Error collecting information about the package!");
              if (Mint.DEBUG) {
                localException1.printStackTrace();
              }
            }
            localException2 = localException2;
          } while (!Mint.DEBUG);
          localException2.printStackTrace();
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            localJSONException.printStackTrace();
          }
        }
      }
    }
  }
  
  public static boolean isPluginInitialized()
  {
    if (!initialized) {
      Logger.logWarning("Mint SDK is not initialized!");
    }
    return initialized;
  }
  
  public static class RemoteSettingsProps
  {
    static JSONObject devSettings = new JSONObject();
    static Integer eventLevel;
    static String hashCode = "none";
    static Integer logLevel = Integer.valueOf(Utils.convertLoggingLevelToInt(MintLogLevel.Verbose));
    static Boolean netMonitoringEnabled;
    static Integer sessionTime;
    
    static
    {
      eventLevel = Integer.valueOf(Utils.convertLoggingLevelToInt(MintLogLevel.Verbose));
      netMonitoringEnabled = Boolean.valueOf(true);
      sessionTime = Integer.valueOf(60);
    }
    
    public RemoteSettingsProps() {}
    
    public static String toReadableFormat()
    {
      return "loglevel: " + String.valueOf(logLevel) + " eventLevel: " + String.valueOf(eventLevel) + " netMonitoring: " + String.valueOf(netMonitoringEnabled) + " sessionTime: " + String.valueOf(sessionTime) + " devSettings: " + devSettings.toString() + " hashCode: " + hashCode;
    }
  }
}
