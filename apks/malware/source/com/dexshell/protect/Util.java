package com.dexshell.protect;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import android.util.Log;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.StringTokenizer;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.zip.ZipEntry;

public class Util
{
  public static String CPUABI = null;
  private static String VERSION_NAME = "1.0";
  private static ClassLoader cl = null;
  private static String data_path = "/data/data/";
  static byte[] hexDigits = "0123456789ABCDEF".getBytes();
  public static boolean isX86 = false;
  public static Context x86Ctx = null;
  
  public Util() {}
  
  private static void CopyArmLib(Context paramContext)
  {
    try
    {
      JarFile localJarFile = new JarFile(paramContext.getApplicationInfo().sourceDir);
      Enumeration localEnumeration = localJarFile.entries();
      while (localEnumeration.hasMoreElements())
      {
        JarEntry localJarEntry = (JarEntry)localEnumeration.nextElement();
        String str = localJarEntry.getName();
        if (str.equals("assets/libdexshell.so"))
        {
          str = str.replaceAll("assets/", "");
          realCopy(data_path + paramContext.getPackageName() + "/.cache/" + str, localJarFile, localJarEntry);
        }
      }
      return;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private static void CopyBinaryFile(Context paramContext)
  {
    if (!new File(data_path + paramContext.getPackageName() + "/.cache/classes.jar").exists()) {
      DexShell.getDexShell().init(paramContext.getPackageName(), paramContext.getApplicationInfo().sourceDir);
    }
  }
  
  private static void CopyLib(Context paramContext)
  {
    try
    {
      JarFile localJarFile = new JarFile(paramContext.getApplicationInfo().sourceDir);
      Enumeration localEnumeration = localJarFile.entries();
      while (localEnumeration.hasMoreElements())
      {
        JarEntry localJarEntry = (JarEntry)localEnumeration.nextElement();
        String str = localJarEntry.getName();
        if (str.equals("assets/libdexshell.so"))
        {
          str = str.replaceAll("assets/", "");
          realCopy(data_path + paramContext.getPackageName() + "/.cache/" + str, localJarFile, localJarEntry);
        }
      }
      return;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static byte[] calFileMD5(String paramString)
  {
    Object localObject = new FileInputStream(paramString);
    paramString = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte[32768];
    for (;;)
    {
      int i = ((FileInputStream)localObject).read(arrayOfByte);
      if (i <= 0)
      {
        ((FileInputStream)localObject).close();
        localObject = MessageDigest.getInstance("MD5");
        ((MessageDigest)localObject).update(paramString.toByteArray());
        return ((MessageDigest)localObject).digest();
      }
      paramString.write(arrayOfByte, 0, i);
    }
  }
  
  private static void checkSpace(Context paramContext)
  {
    if (!isSpaceEnough(paramContext))
    {
      long l1 = getDataSize();
      long l2 = getClassesJarSize(paramContext);
      Log.e("SecApk", "Insufficient Space For SecApk available size:" + l1 + " classSize" + l2);
    }
    try
    {
      Runtime.getRuntime().exec("kill -9 " + android.os.Process.myPid());
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private static void checkUpdate(Context paramContext)
  {
    try
    {
      localFile = new File(data_path + paramContext.getPackageName() + "/.cache/");
      Object localObject1 = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
      i = ((PackageInfo)localObject1).versionCode;
      localObject2 = ((PackageInfo)localObject1).versionName;
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = VERSION_NAME;
      }
      localObject2 = new File(data_path + paramContext.getPackageName() + "/.sec_version");
      if (!((File)localObject2).exists())
      {
        deleteDirectory(localFile);
        writeVersion((File)localObject2, i, (String)localObject1);
        return;
      }
      arrayOfString = readVersions((File)localObject2);
      if (arrayOfString == null)
      {
        deleteDirectory(localFile);
        ((File)localObject2).delete();
        return;
      }
    }
    catch (Exception localException)
    {
      File localFile;
      int i;
      Object localObject2;
      String[] arrayOfString;
      localException.printStackTrace();
      deleteDirectory(new File(data_path + paramContext.getPackageName() + "/.cache/"));
      paramContext = new File(data_path + paramContext.getPackageName() + "/.sec_version");
      if (paramContext.exists())
      {
        paramContext.delete();
        return;
        int j = Integer.parseInt(arrayOfString[0]);
        if ((!arrayOfString[1].equals(localException)) || (j != i))
        {
          deleteDirectory(localFile);
          ((File)localObject2).delete();
        }
      }
    }
  }
  
  private static void checkX86(Context paramContext)
  {
    if (getCPUABI().equals("x86")) {
      isX86 = true;
    }
    if (!isX86) {
      if (!new File(data_path + paramContext.getPackageName() + "/.cache/libdexshell.so").exists()) {
        CopyArmLib(paramContext);
      }
    }
    while (new File(data_path + paramContext.getPackageName() + "/.cache/libdexshell.so").exists()) {
      return;
    }
    CopyLib(paramContext);
  }
  
  private static void copyJarFile(Context paramContext)
  {
    Object localObject3 = data_path + paramContext.getPackageName() + "/.cache/classes.jar";
    try
    {
      Object localObject1 = new JarFile(paramContext.getApplicationInfo().sourceDir);
      Object localObject2 = ((JarFile)localObject1).getEntry("assets/dexshell.data");
      localObject3 = new File((String)localObject3);
      paramContext = new byte[65536];
      localObject1 = new BufferedInputStream(((JarFile)localObject1).getInputStream((ZipEntry)localObject2));
      localObject2 = new BufferedOutputStream(new FileOutputStream((File)localObject3));
      for (;;)
      {
        int i = ((BufferedInputStream)localObject1).read(paramContext);
        if (i <= 0)
        {
          ((BufferedOutputStream)localObject2).flush();
          ((BufferedOutputStream)localObject2).close();
          ((BufferedInputStream)localObject1).close();
          return;
        }
        ((BufferedOutputStream)localObject2).write(paramContext, 0, i);
      }
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private static boolean deleteDirectory(File paramFile)
  {
    if (!paramFile.exists()) {
      return paramFile.delete();
    }
    File[] arrayOfFile = paramFile.listFiles();
    int i = 0;
    if (i >= arrayOfFile.length) {
      return paramFile.delete();
    }
    if (arrayOfFile[i].isDirectory()) {
      deleteDirectory(arrayOfFile[i]);
    }
    for (;;)
    {
      i += 1;
      break;
      arrayOfFile[i].delete();
    }
  }
  
  public static void doCheck(Context paramContext)
  {
    Object localObject3 = paramContext.getApplicationInfo();
    Object localObject2 = new File(((ApplicationInfo)localObject3).dataDir, ".md5");
    Object localObject1 = "/data/dalvik-cache/";
    if (new File("/data/dalvik-cache/arm/").exists()) {
      localObject1 = "/data/dalvik-cache/arm/";
    }
    localObject3 = new StringTokenizer(((ApplicationInfo)localObject3).sourceDir, "/");
    for (;;)
    {
      int j;
      if (!((StringTokenizer)localObject3).hasMoreTokens())
      {
        localObject1 = new StringBuilder((String)localObject1).append("classes").toString() + ".dex";
        j = 0;
      }
      try
      {
        localObject1 = toASC(calFileMD5((String)localObject1));
        int i;
        if (!((File)localObject2).exists())
        {
          i = j;
          if (localObject1 != null)
          {
            localObject2 = new FileOutputStream((File)localObject2);
            ((FileOutputStream)localObject2).write((byte[])localObject1);
            ((FileOutputStream)localObject2).close();
            i = 1;
          }
        }
        for (;;)
        {
          if (i != 0) {
            deleteDirectory(new File(data_path + paramContext.getPackageName() + "/.cache/"));
          }
          return;
          System.out.println();
          localObject1 = new StringBuilder((String)localObject1).append(((StringTokenizer)localObject3).nextToken()).toString() + "@";
          break;
          i = j;
          if (localObject1 != null)
          {
            localObject1 = readFile((File)localObject2);
            i = j;
            if (localObject1 != null) {
              i = 1;
            }
          }
        }
        return;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace(System.out);
      }
    }
  }
  
  private static void getAssetFile(Context paramContext, String paramString1, String paramString2)
  {
    paramString2 = new File(paramString2);
    if (!paramString2.exists()) {
      try
      {
        paramString2.createNewFile();
        paramContext = paramContext.getAssets().open(paramString1);
        paramString1 = new FileOutputStream(paramString2);
        byte[] arrayOfByte = new byte['က'];
        for (;;)
        {
          int i = paramContext.read(arrayOfByte);
          if (i == -1)
          {
            paramString1.close();
            paramContext.close();
            return;
          }
          paramString1.write(arrayOfByte, 0, i);
        }
        return;
      }
      catch (IOException paramContext)
      {
        paramContext.printStackTrace();
        paramString2.delete();
      }
    }
  }
  
  public static String getCPUABI()
  {
    String str = CPUABI;
    if (CPUABI == null)
    {
      try
      {
        if (new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("getprop ro.product.cpu.abi").getInputStream())).readLine().contains("x86"))
        {
          CPUABI = "x86";
          return "x86";
        }
        CPUABI = "arm";
      }
      catch (Exception localException)
      {
        for (;;)
        {
          CPUABI = "arm";
        }
      }
      return CPUABI;
    }
    return localException;
  }
  
  public static String getCPUinfo()
  {
    String str = "";
    try
    {
      InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/proc/cpuinfo" }).start().getInputStream();
      byte[] arrayOfByte = new byte['Ѐ'];
      for (;;)
      {
        if (localInputStream.read(arrayOfByte) == -1)
        {
          localInputStream.close();
          return str;
        }
        str = str + new String(arrayOfByte);
      }
      return "";
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  private static long getClassesJarSize(Context paramContext)
  {
    try
    {
      long l = new JarFile(paramContext.getApplicationInfo().sourceDir).getJarEntry("assets/dexshell.data").getSize();
      return l;
    }
    catch (Exception paramContext) {}
    return 0L;
  }
  
  public static ClassLoader getCustomClassLoader()
  {
    return cl;
  }
  
  private static long getDataSize()
  {
    StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
    return localStatFs.getAvailableBlocks() * localStatFs.getBlockSize();
  }
  
  public static Field getField(Class paramClass, String paramString)
  {
    Field[] arrayOfField = paramClass.getDeclaredFields();
    int j = arrayOfField.length;
    paramClass = null;
    int i = 0;
    for (;;)
    {
      if (i >= j) {}
      Field localField;
      do
      {
        return paramClass;
        localField = arrayOfField[i];
        if (!localField.isAccessible()) {
          localField.setAccessible(true);
        }
        paramClass = localField;
      } while (localField.getName().equals(paramString));
      i += 1;
      paramClass = localField;
    }
  }
  
  public static Object getFieldOjbect(String paramString1, Object paramObject, String paramString2)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
      paramString1.setAccessible(true);
      paramString1 = paramString1.get(paramObject);
      return paramString1;
    }
    catch (SecurityException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (NoSuchFieldException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (IllegalArgumentException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (IllegalAccessException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (ClassNotFoundException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
  }
  
  public static Object getFieldValue(Class paramClass, Object paramObject, String paramString)
  {
    try
    {
      paramClass = getField(paramClass, paramString).get(paramObject);
      return paramClass;
    }
    catch (Exception paramClass)
    {
      paramClass.printStackTrace();
    }
    return null;
  }
  
  public static int getSDKINT()
  {
    return Build.VERSION.SDK_INT;
  }
  
  public static Object getStaticFieldOjbect(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
      paramString1.setAccessible(true);
      paramString1 = paramString1.get(null);
      return paramString1;
    }
    catch (SecurityException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (NoSuchFieldException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (IllegalArgumentException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (IllegalAccessException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (ClassNotFoundException paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static String getTimeString()
  {
    return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss SSS").format(Calendar.getInstance().getTime());
  }
  
  public static Object invokeMethod(String paramString1, String paramString2, Object paramObject, Class[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getMethod(paramString2, paramArrayOfClass).invoke(paramObject, paramArrayOfObject);
      return paramString1;
    }
    catch (SecurityException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (IllegalArgumentException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (IllegalAccessException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (NoSuchMethodException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (InvocationTargetException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
    catch (ClassNotFoundException paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
  }
  
  public static Object invokeStaticMethod(String paramString1, String paramString2, Class[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getMethod(paramString2, paramArrayOfClass).invoke(null, paramArrayOfObject);
      return paramString1;
    }
    catch (SecurityException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (IllegalArgumentException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (IllegalAccessException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (NoSuchMethodException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (InvocationTargetException paramString1)
    {
      paramString1.printStackTrace();
      return null;
    }
    catch (ClassNotFoundException paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  private static boolean isSpaceEnough(Context paramContext)
  {
    boolean bool2 = true;
    Object localObject2 = data_path + paramContext.getPackageName() + "/.cache/classes.jar";
    Object localObject1 = data_path + paramContext.getPackageName() + "/.cache/classes.dex";
    localObject2 = new File((String)localObject2);
    localObject1 = new File((String)localObject1);
    boolean bool1;
    if (((File)localObject2).exists())
    {
      bool1 = bool2;
      if (((File)localObject1).exists()) {}
    }
    else
    {
      long l = getDataSize();
      bool1 = bool2;
      if (4L * getClassesJarSize(paramContext) > l) {
        bool1 = false;
      }
    }
    return bool1;
  }
  
  public static byte[] readAssertFile(Context paramContext, String paramString)
  {
    paramContext = new JarFile(paramContext.getApplicationInfo().sourceDir);
    paramContext = new BufferedInputStream(paramContext.getInputStream(paramContext.getEntry(paramString)));
    paramString = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte[32768];
    for (;;)
    {
      int i = paramContext.read(arrayOfByte);
      if (i <= 0) {
        return paramString.toByteArray();
      }
      paramString.write(arrayOfByte, 0, i);
    }
  }
  
  public static byte[] readFile(File paramFile)
  {
    paramFile = new FileInputStream(paramFile);
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte[32768];
    for (;;)
    {
      int i = paramFile.read(arrayOfByte);
      if (i <= 0)
      {
        paramFile.close();
        return localByteArrayOutputStream.toByteArray();
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  private static String[] readVersions(File paramFile)
  {
    try
    {
      paramFile = new BufferedReader(new FileReader(paramFile));
      String str1 = paramFile.readLine();
      String str2 = paramFile.readLine();
      paramFile.close();
      return new String[] { str1, str2 };
    }
    catch (Exception paramFile)
    {
      paramFile.printStackTrace();
    }
    return null;
  }
  
  public static void realCopy(String paramString, JarFile paramJarFile, ZipEntry paramZipEntry)
  {
    try
    {
      File localFile = new File(paramString);
      paramString = new byte[65536];
      paramJarFile = new BufferedInputStream(paramJarFile.getInputStream(paramZipEntry));
      paramZipEntry = new BufferedOutputStream(new FileOutputStream(localFile));
      for (;;)
      {
        int i = paramJarFile.read(paramString);
        if (i <= 0)
        {
          paramZipEntry.flush();
          paramZipEntry.close();
          paramJarFile.close();
          return;
        }
        paramZipEntry.write(paramString, 0, i);
      }
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  /* Error */
  public static void runAll(Context paramContext)
  {
    // Byte code:
    //   0: aload_0
    //   1: putstatic 30	com/dexshell/protect/Util:x86Ctx	Landroid/content/Context;
    //   4: aload_0
    //   5: invokestatic 591	com/dexshell/protect/Util:doCheck	(Landroid/content/Context;)V
    //   8: aload_0
    //   9: invokestatic 593	com/dexshell/protect/Util:checkUpdate	(Landroid/content/Context;)V
    //   12: new 127	java/io/File
    //   15: dup
    //   16: new 104	java/lang/StringBuilder
    //   19: dup
    //   20: getstatic 34	com/dexshell/protect/Util:data_path	Ljava/lang/String;
    //   23: invokespecial 105	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   26: aload_0
    //   27: invokevirtual 108	android/content/Context:getPackageName	()Ljava/lang/String;
    //   30: invokevirtual 112	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   33: ldc_w 595
    //   36: invokevirtual 112	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   39: invokevirtual 117	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   42: invokespecial 130	java/io/File:<init>	(Ljava/lang/String;)V
    //   45: astore_1
    //   46: aload_1
    //   47: invokevirtual 133	java/io/File:exists	()Z
    //   50: ifne +8 -> 58
    //   53: aload_1
    //   54: invokevirtual 598	java/io/File:mkdir	()Z
    //   57: pop
    //   58: invokestatic 218	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   61: new 104	java/lang/StringBuilder
    //   64: dup
    //   65: ldc_w 600
    //   68: invokespecial 105	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   71: aload_1
    //   72: invokevirtual 603	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   75: invokevirtual 112	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   78: invokevirtual 117	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   81: invokevirtual 233	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   84: invokevirtual 606	java/lang/Process:waitFor	()I
    //   87: pop
    //   88: aload_0
    //   89: invokestatic 608	com/dexshell/protect/Util:checkX86	(Landroid/content/Context;)V
    //   92: aload_0
    //   93: invokestatic 610	com/dexshell/protect/Util:CopyBinaryFile	(Landroid/content/Context;)V
    //   96: aload_0
    //   97: aload_0
    //   98: invokevirtual 108	android/content/Context:getPackageName	()Ljava/lang/String;
    //   101: invokestatic 614	com/dexshell/protect/Util:runPkg	(Landroid/content/Context;Ljava/lang/String;)V
    //   104: return
    //   105: astore_1
    //   106: aload_1
    //   107: invokevirtual 615	java/lang/InterruptedException:printStackTrace	()V
    //   110: goto -22 -> 88
    //   113: astore_1
    //   114: aload_1
    //   115: invokevirtual 234	java/lang/Exception:printStackTrace	()V
    //   118: goto -30 -> 88
    //   121: astore_1
    //   122: aload_1
    //   123: invokevirtual 124	java/io/IOException:printStackTrace	()V
    //   126: goto -38 -> 88
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	129	0	paramContext	Context
    //   45	27	1	localFile	File
    //   105	2	1	localInterruptedException	InterruptedException
    //   113	2	1	localException	Exception
    //   121	2	1	localIOException	IOException
    // Exception table:
    //   from	to	target	type
    //   58	88	105	java/lang/InterruptedException
    //   12	58	113	java/lang/Exception
    //   58	88	113	java/lang/Exception
    //   106	110	113	java/lang/Exception
    //   122	126	113	java/lang/Exception
    //   58	88	121	java/io/IOException
  }
  
  public static void runAll1(Context paramContext)
  {
    try
    {
      File localFile = new File(data_path + paramContext.getPackageName() + "/.cache");
      if (!localFile.exists()) {
        localFile.mkdir();
      }
      checkX86(paramContext);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private static void runPkg(Context paramContext, String paramString)
  {
    try
    {
      if (cl == null) {
        cl = new MyClassLoader(data_path + paramString + "/.cache/classes.jar", data_path + paramString + "/.cache", data_path + paramString + "/lib/", paramContext.getClassLoader());
      }
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void setFieldOjbect(String paramString1, String paramString2, Object paramObject1, Object paramObject2)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
      paramString1.setAccessible(true);
      paramString1.set(paramObject1, paramObject2);
      return;
    }
    catch (SecurityException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (NoSuchFieldException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (IllegalArgumentException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (IllegalAccessException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (ClassNotFoundException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void setFieldValue(Class paramClass, Object paramObject1, String paramString, Object paramObject2)
  {
    System.out.println("setFieldValue" + paramClass + paramObject1 + paramString + paramObject2);
    if (paramString != null) {}
    try
    {
      paramClass = getField(paramClass, paramString);
      paramClass.setAccessible(true);
      paramClass.set(paramObject1, paramObject2);
      return;
    }
    catch (Exception paramClass)
    {
      paramClass.printStackTrace();
    }
  }
  
  public static void setStaticOjbect(String paramString1, String paramString2, Object paramObject)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
      paramString1.setAccessible(true);
      paramString1.set(null, paramObject);
      return;
    }
    catch (SecurityException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (NoSuchFieldException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (IllegalArgumentException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (IllegalAccessException paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
    catch (ClassNotFoundException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static byte[] toASC(byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = new byte[paramArrayOfByte.length * 2];
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return arrayOfByte;
      }
      int j = paramArrayOfByte[i];
      arrayOfByte[(i * 2)] = hexDigits[(j >> 4 & 0xF)];
      arrayOfByte[(i * 2 + 1)] = hexDigits[(j & 0xF)];
      i += 1;
    }
  }
  
  private static void writeVersion(File paramFile, int paramInt, String paramString)
  {
    try
    {
      paramFile = new BufferedWriter(new FileWriter(paramFile));
      paramFile.write(Integer.toString(paramInt));
      paramFile.newLine();
      paramFile.write(paramString);
      paramFile.flush();
      paramFile.close();
      return;
    }
    catch (IOException paramFile)
    {
      paramFile.printStackTrace();
    }
  }
}
