package com.dexshell.protect;

import android.app.Application;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.os.Bundle;
import dalvik.system.DexClassLoader;

public class ApplicationWrapper
  extends Application
{
  public static String FirstApplication = "com.dexshell.protect.FirstApplication";
  private static boolean hasApplication = false;
  public static Application realApplication = null;
  private DexClassLoader cl;
  
  public ApplicationWrapper() {}
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    if (realApplication != null) {
      realApplication.onConfigurationChanged(paramConfiguration);
    }
  }
  
  public void onCreate()
  {
    super.onCreate();
    if (Util.getCustomClassLoader() == null) {
      Util.runAll(this);
    }
    String str = FirstApplication;
    Object localObject3 = str;
    try
    {
      localObject4 = getApplicationContext().getPackageManager().getApplicationInfo(getPackageName(), 128);
      localObject1 = str;
      localObject3 = str;
      if (((ApplicationInfo)localObject4).metaData == null) {
        break label132;
      }
      localObject1 = str;
      localObject3 = str;
      if (!((ApplicationInfo)localObject4).metaData.containsKey("application_class_name")) {
        break label132;
      }
      localObject3 = str;
      localObject4 = ((ApplicationInfo)localObject4).metaData.getString("application_class_name");
      localObject1 = str;
      if (localObject4 == null) {
        break label132;
      }
      localObject3 = str;
      if (!((String)localObject4).startsWith(".")) {
        break label172;
      }
      localObject3 = str;
      localObject1 = getPackageName() + (String)localObject4;
    }
    catch (Exception localException1)
    {
      try
      {
        Object localObject4;
        Object localObject1;
        this.cl = ((DexClassLoader)Util.getCustomClassLoader());
        if (hasApplication) {
          break label192;
        }
        for (realApplication = (Application)getClassLoader().loadClass((String)localObject1).newInstance();; realApplication = (Application)this.cl.loadClass(localObject2).newInstance())
        {
          if (realApplication != null) {
            break label224;
          }
          return;
          localObject1 = localObject4;
          break;
          localException1 = localException1;
          localException1.printStackTrace();
          hasApplication = false;
          localObject2 = localObject3;
          break label132;
        }
      }
      catch (Exception localException3)
      {
        Object localObject2;
        for (;;)
        {
          localException3.printStackTrace();
          realApplication = null;
        }
        try
        {
          DexShell localDexShell = DexShell.getDexShell();
          localDexShell.setClassLoader(getPackageName(), this.cl);
          if (!hasApplication) {
            break label257;
          }
          realApplication = (Application)localDexShell.setRealApp(localObject2);
          localDexShell.setProvider();
          localDexShell.reset();
          realApplication.onCreate();
          return;
        }
        catch (Exception localException2)
        {
          localException2.printStackTrace();
        }
      }
    }
    localObject3 = localObject1;
    hasApplication = true;
    label132:
    label172:
    label192:
    label224:
    label257:
    return;
  }
  
  public void onLowMemory()
  {
    super.onLowMemory();
    if (realApplication != null) {
      realApplication.onLowMemory();
    }
  }
  
  public void onTerminate()
  {
    super.onTerminate();
    if (realApplication != null) {
      realApplication.onTerminate();
    }
  }
  
  public void onTrimMemory(int paramInt)
  {
    try
    {
      super.onTrimMemory(paramInt);
      if (realApplication != null) {
        realApplication.onTrimMemory(paramInt);
      }
      return;
    }
    catch (Exception localException) {}
  }
}
