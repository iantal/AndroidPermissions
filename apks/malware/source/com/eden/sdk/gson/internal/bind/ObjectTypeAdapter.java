package com.eden.sdk.gson.internal.bind;

import com.eden.sdk.gson.Gson;
import com.eden.sdk.gson.TypeAdapter;
import com.eden.sdk.gson.TypeAdapterFactory;
import com.eden.sdk.gson.internal.LinkedTreeMap;
import com.eden.sdk.gson.stream.JsonReader;
import com.eden.sdk.gson.stream.JsonWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public final class ObjectTypeAdapter
  extends TypeAdapter<Object>
{
  public static final TypeAdapterFactory FACTORY = new ObjectTypeAdapter.1();
  private final Gson gson;
  
  private ObjectTypeAdapter(Gson paramGson)
  {
    this.gson = paramGson;
  }
  
  public final Object read(JsonReader paramJsonReader)
  {
    Object localObject = paramJsonReader.peek();
    switch (localObject)
    {
    case BEGIN_OBJECT: 
    case END_ARRAY: 
    case END_DOCUMENT: 
    default: 
      throw new IllegalStateException();
    case BEGIN_ARRAY: 
      localObject = new ArrayList();
      paramJsonReader.beginArray();
      for (;;)
      {
        if (!paramJsonReader.hasNext())
        {
          paramJsonReader.endArray();
          return localObject;
        }
        ((List)localObject).add(read(paramJsonReader));
      }
    case BOOLEAN: 
      localObject = new LinkedTreeMap();
      paramJsonReader.beginObject();
      for (;;)
      {
        if (!paramJsonReader.hasNext())
        {
          paramJsonReader.endObject();
          return localObject;
        }
        ((Map)localObject).put(paramJsonReader.nextName(), read(paramJsonReader));
      }
    case END_OBJECT: 
      return paramJsonReader.nextString();
    case NAME: 
      return Double.valueOf(paramJsonReader.nextDouble());
    case NULL: 
      return Boolean.valueOf(paramJsonReader.nextBoolean());
    }
    paramJsonReader.nextNull();
    return null;
  }
  
  public final void write(JsonWriter paramJsonWriter, Object paramObject)
  {
    if (paramObject == null)
    {
      paramJsonWriter.nullValue();
      return;
    }
    TypeAdapter localTypeAdapter = this.gson.getAdapter(paramObject.getClass());
    if ((localTypeAdapter instanceof ObjectTypeAdapter))
    {
      paramJsonWriter.beginObject();
      paramJsonWriter.endObject();
      return;
    }
    localTypeAdapter.write(paramJsonWriter, paramObject);
  }
}
