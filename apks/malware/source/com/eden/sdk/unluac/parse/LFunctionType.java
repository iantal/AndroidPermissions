package com.eden.sdk.unluac.parse;

import java.nio.ByteBuffer;

public class LFunctionType
  extends BObjectType<LFunction>
{
  public static final LFunctionType TYPE51 = new LFunctionType();
  public static final LFunctionType TYPE52 = new LFunctionType52();
  
  public LFunctionType() {}
  
  public LFunction parse(ByteBuffer paramByteBuffer, BHeader paramBHeader)
  {
    paramBHeader.getClass();
    paramBHeader.getClass();
    LFunctionType.LFunctionParseState localLFunctionParseState = new LFunctionType.LFunctionParseState();
    parse_main(paramByteBuffer, paramBHeader, localLFunctionParseState);
    return new LFunction(paramBHeader, localLFunctionParseState.code, (LLocal[])localLFunctionParseState.locals.asArray(new LLocal[localLFunctionParseState.locals.length.asInt()]), (LObject[])localLFunctionParseState.constants.asArray(new LObject[localLFunctionParseState.constants.length.asInt()]), localLFunctionParseState.upvalues, (LFunction[])localLFunctionParseState.functions.asArray(new LFunction[localLFunctionParseState.functions.length.asInt()]), localLFunctionParseState.maximumStackSize, localLFunctionParseState.lenUpvalues, localLFunctionParseState.lenParameter, localLFunctionParseState.vararg);
  }
  
  protected void parse_code(ByteBuffer paramByteBuffer, BHeader paramBHeader, LFunctionType.LFunctionParseState paramLFunctionParseState)
  {
    paramBHeader.getClass();
    paramLFunctionParseState.length = paramBHeader.integer.parse(paramByteBuffer, paramBHeader).asInt();
    paramLFunctionParseState.code = new int[paramLFunctionParseState.length];
    int i = 0;
    for (;;)
    {
      if (i >= paramLFunctionParseState.length) {
        return;
      }
      paramLFunctionParseState.code[i] = paramByteBuffer.getInt();
      paramBHeader.getClass();
      i += 1;
    }
  }
  
  protected void parse_constants(ByteBuffer paramByteBuffer, BHeader paramBHeader, LFunctionType.LFunctionParseState paramLFunctionParseState)
  {
    paramBHeader.getClass();
    paramLFunctionParseState.constants = paramBHeader.constant.parseList(paramByteBuffer, paramBHeader);
    paramBHeader.getClass();
    paramLFunctionParseState.functions = paramBHeader.function.parseList(paramByteBuffer, paramBHeader);
  }
  
  protected void parse_debug(ByteBuffer paramByteBuffer, BHeader paramBHeader, LFunctionType.LFunctionParseState paramLFunctionParseState)
  {
    paramBHeader.getClass();
    paramLFunctionParseState.lines = paramBHeader.integer.parseList(paramByteBuffer, paramBHeader);
    paramBHeader.getClass();
    paramLFunctionParseState.locals = paramBHeader.local.parseList(paramByteBuffer, paramBHeader);
    paramBHeader.getClass();
    paramByteBuffer = paramBHeader.string.parseList(paramByteBuffer, paramBHeader);
    int i = 0;
    for (;;)
    {
      if (i >= paramByteBuffer.length.asInt()) {
        return;
      }
      paramLFunctionParseState.upvalues[i].name = ((LString)paramByteBuffer.get(i)).deref();
      i += 1;
    }
  }
  
  protected void parse_main(ByteBuffer paramByteBuffer, BHeader paramBHeader, LFunctionType.LFunctionParseState paramLFunctionParseState)
  {
    paramLFunctionParseState.name = paramBHeader.string.parse(paramByteBuffer, paramBHeader);
    paramLFunctionParseState.lineBegin = paramBHeader.integer.parse(paramByteBuffer, paramBHeader).asInt();
    paramLFunctionParseState.lineEnd = paramBHeader.integer.parse(paramByteBuffer, paramBHeader).asInt();
    paramLFunctionParseState.lenUpvalues = (paramByteBuffer.get() & 0xFF);
    paramLFunctionParseState.lenParameter = (paramByteBuffer.get() & 0xFF);
    paramLFunctionParseState.vararg = (paramByteBuffer.get() & 0xFF);
    paramLFunctionParseState.maximumStackSize = (paramByteBuffer.get() & 0xFF);
    parse_code(paramByteBuffer, paramBHeader, paramLFunctionParseState);
    parse_constants(paramByteBuffer, paramBHeader, paramLFunctionParseState);
    parse_upvalues(paramByteBuffer, paramBHeader, paramLFunctionParseState);
    parse_debug(paramByteBuffer, paramBHeader, paramLFunctionParseState);
  }
  
  protected void parse_upvalues(ByteBuffer paramByteBuffer, BHeader paramBHeader, LFunctionType.LFunctionParseState paramLFunctionParseState)
  {
    paramLFunctionParseState.upvalues = new LUpvalue[paramLFunctionParseState.lenUpvalues];
    int i = 0;
    for (;;)
    {
      if (i >= paramLFunctionParseState.lenUpvalues) {
        return;
      }
      paramLFunctionParseState.upvalues[i] = new LUpvalue();
      i += 1;
    }
  }
}
