package com.eden.sdk.unluac.parse;

import java.math.BigInteger;

public class BInteger
  extends BObject
{
  private static BigInteger MAX_INT = null;
  private static BigInteger MIN_INT = null;
  private final BigInteger big;
  private final int n;
  
  public BInteger(int paramInt)
  {
    this.big = null;
    this.n = paramInt;
  }
  
  public BInteger(BInteger paramBInteger)
  {
    this.big = paramBInteger.big;
    this.n = paramBInteger.n;
  }
  
  public BInteger(BigInteger paramBigInteger)
  {
    this.big = paramBigInteger;
    this.n = 0;
    if (MAX_INT == null)
    {
      MAX_INT = BigInteger.valueOf(2147483647L);
      MIN_INT = BigInteger.valueOf(-2147483648L);
    }
  }
  
  public int asInt()
  {
    if (this.big == null) {
      return this.n;
    }
    if ((this.big.compareTo(MAX_INT) > 0) || (this.big.compareTo(MIN_INT) < 0)) {
      throw new IllegalStateException("The size of an integer is outside the range that unluac can handle.");
    }
    return this.big.intValue();
  }
  
  public void iterate(Runnable paramRunnable)
  {
    int i;
    if (this.big == null)
    {
      i = this.n;
      if (i != 0) {}
    }
    for (;;)
    {
      return;
      paramRunnable.run();
      i -= 1;
      break;
      for (BigInteger localBigInteger = this.big; localBigInteger.signum() > 0; localBigInteger = localBigInteger.subtract(BigInteger.ONE)) {
        paramRunnable.run();
      }
    }
  }
}
