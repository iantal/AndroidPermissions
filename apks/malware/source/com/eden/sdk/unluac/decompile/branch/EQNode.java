package com.eden.sdk.unluac.decompile.branch;

import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.expression.BinaryExpression;
import com.eden.sdk.unluac.decompile.expression.Expression;

public class EQNode
  extends Branch
{
  private final boolean invert;
  private final int left;
  private final int right;
  
  public EQNode(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4, int paramInt5)
  {
    super(paramInt3, paramInt4, paramInt5);
    this.left = paramInt1;
    this.right = paramInt2;
    this.invert = paramBoolean;
  }
  
  public Expression asExpression(Registers paramRegisters)
  {
    if (this.invert) {}
    for (String str = "~=";; str = "==") {
      return new BinaryExpression(str, paramRegisters.getKExpression(this.left, this.line), paramRegisters.getKExpression(this.right, this.line), 3, 1);
    }
  }
  
  public int getRegister()
  {
    return -1;
  }
  
  public Branch invert()
  {
    int i = this.left;
    int j = this.right;
    if (this.invert) {}
    for (boolean bool = false;; bool = true) {
      return new EQNode(i, j, bool, this.line, this.end, this.begin);
    }
  }
  
  public void useExpression(Expression paramExpression) {}
}
