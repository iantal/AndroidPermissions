package com.eden.sdk.unluac.decompile.branch;

import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.expression.Expression;

public class TestSetNode
  extends Branch
{
  public final boolean invert;
  public final int test;
  
  public TestSetNode(int paramInt1, int paramInt2, boolean paramBoolean, int paramInt3, int paramInt4, int paramInt5)
  {
    super(paramInt3, paramInt4, paramInt5);
    this.test = paramInt2;
    this.invert = paramBoolean;
    this.setTarget = paramInt1;
  }
  
  public Expression asExpression(Registers paramRegisters)
  {
    return paramRegisters.getExpression(this.test, this.line);
  }
  
  public int getRegister()
  {
    return this.setTarget;
  }
  
  public Branch invert()
  {
    int i = this.setTarget;
    int j = this.test;
    if (this.invert) {}
    for (boolean bool = false;; bool = true) {
      return new TestSetNode(i, j, bool, this.line, this.end, this.begin);
    }
  }
  
  public String toString()
  {
    return "TestSetNode[target=" + this.setTarget + ";test=" + this.test + ";invert=" + this.invert + ";line=" + this.line + ";begin=" + this.begin + ";end=" + this.end + "]";
  }
  
  public void useExpression(Expression paramExpression) {}
}
