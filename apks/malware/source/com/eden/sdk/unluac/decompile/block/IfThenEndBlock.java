package com.eden.sdk.unluac.decompile.block;

import com.eden.sdk.unluac.decompile.Declaration;
import com.eden.sdk.unluac.decompile.Decompiler;
import com.eden.sdk.unluac.decompile.Output;
import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.branch.Branch;
import com.eden.sdk.unluac.decompile.branch.TestNode;
import com.eden.sdk.unluac.decompile.expression.BinaryExpression;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.expression.LocalVariable;
import com.eden.sdk.unluac.decompile.operation.Operation;
import com.eden.sdk.unluac.decompile.statement.Assignment;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.decompile.target.Target;
import com.eden.sdk.unluac.parse.LFunction;
import com.eden.sdk.unluac.util.Stack;
import java.util.List;

public class IfThenEndBlock
  extends Block
{
  private final Branch branch;
  private final Registers r;
  private final Stack<Branch> stack;
  private final List<Statement> statements;
  
  public IfThenEndBlock(LFunction paramLFunction, Branch paramBranch, Registers paramRegisters)
  {
    this(paramLFunction, paramBranch, null, paramRegisters);
  }
  
  public IfThenEndBlock(LFunction paramLFunction, Branch paramBranch, Stack<Branch> paramStack, Registers paramRegisters) {}
  
  public void addStatement(Statement paramStatement)
  {
    this.statements.add(paramStatement);
  }
  
  public boolean breakable()
  {
    return false;
  }
  
  public int getLoopback()
  {
    throw new IllegalStateException();
  }
  
  public boolean isContainer()
  {
    return true;
  }
  
  public boolean isUnprotected()
  {
    return false;
  }
  
  public void print(Output paramOutput)
  {
    paramOutput.print("if ");
    this.branch.asExpression(this.r).print(paramOutput);
    paramOutput.print(" then");
    paramOutput.println();
    paramOutput.indent();
    Statement.printSequence(paramOutput, this.statements);
    paramOutput.dedent();
    paramOutput.print("end");
  }
  
  public Operation process(Decompiler paramDecompiler)
  {
    int i = 0;
    Object localObject;
    if (this.statements.size() == 1)
    {
      localObject = (Statement)this.statements.get(0);
      if ((localObject instanceof Assignment))
      {
        localObject = (Assignment)localObject;
        if ((((Assignment)localObject).getArity() == 1) && ((this.branch instanceof TestNode)))
        {
          TestNode localTestNode = (TestNode)this.branch;
          Declaration localDeclaration = this.r.getDeclaration(localTestNode.test, localTestNode.line);
          if (((Assignment)localObject).getFirstTarget().isDeclaration(localDeclaration))
          {
            if (localTestNode.invert) {}
            for (paramDecompiler = new BinaryExpression("or", new LocalVariable(localDeclaration), ((Assignment)localObject).getFirstValue(), 1, 0);; paramDecompiler = new BinaryExpression("and", new LocalVariable(localDeclaration), ((Assignment)localObject).getFirstValue(), 2, 0)) {
              return new IfThenEndBlock.1(this, this.end - 1, (Assignment)localObject, paramDecompiler);
            }
          }
        }
      }
    }
    else if ((this.statements.size() == 0) && (this.stack != null))
    {
      int k = this.branch.getRegister();
      int j = k;
      if (k < 0) {}
      for (j = k;; j = k)
      {
        if (i >= this.r.registers) {}
        for (;;)
        {
          if ((j < 0) || (this.r.getUpdated(j, this.branch.end - 1) < this.branch.begin)) {
            break label381;
          }
          localObject = this.r.getValue(j, this.branch.end);
          paramDecompiler = paramDecompiler.popSetCondition(this.stack, ((Branch)this.stack.peek()).end);
          paramDecompiler.useExpression((Expression)localObject);
          return new IfThenEndBlock.2(this, this.end - 1, j, paramDecompiler);
          k = j;
          if (this.r.getUpdated(i, this.branch.end - 1) < this.branch.begin) {
            break label371;
          }
          if (j < 0) {
            break;
          }
          j = -1;
        }
        k = i;
        label371:
        i += 1;
      }
    }
    label381:
    return super.process(paramDecompiler);
  }
}
