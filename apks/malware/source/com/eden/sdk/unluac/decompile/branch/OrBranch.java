package com.eden.sdk.unluac.decompile.branch;

import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.expression.BinaryExpression;
import com.eden.sdk.unluac.decompile.expression.Expression;

public class OrBranch
  extends Branch
{
  private final Branch left;
  private final Branch right;
  
  public OrBranch(Branch paramBranch1, Branch paramBranch2)
  {
    super(paramBranch2.line, paramBranch2.begin, paramBranch2.end);
    this.left = paramBranch1;
    this.right = paramBranch2;
  }
  
  public Expression asExpression(Registers paramRegisters)
  {
    return new BinaryExpression("or", this.left.asExpression(paramRegisters), this.right.asExpression(paramRegisters), 1, 0);
  }
  
  public int getRegister()
  {
    int i = this.left.getRegister();
    if (i == this.right.getRegister()) {
      return i;
    }
    return -1;
  }
  
  public Branch invert()
  {
    return new AndBranch(this.left.invert(), this.right.invert());
  }
  
  public void useExpression(Expression paramExpression)
  {
    this.left.useExpression(paramExpression);
    this.right.useExpression(paramExpression);
  }
}
