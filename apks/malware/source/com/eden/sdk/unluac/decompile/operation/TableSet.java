package com.eden.sdk.unluac.decompile.operation;

import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.block.Block;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.expression.TableLiteral.Entry;
import com.eden.sdk.unluac.decompile.statement.Assignment;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.decompile.target.TableTarget;

public class TableSet
  extends Operation
{
  private Expression index;
  private boolean isTable;
  private Expression table;
  private int timestamp;
  private Expression value;
  
  public TableSet(int paramInt1, Expression paramExpression1, Expression paramExpression2, Expression paramExpression3, boolean paramBoolean, int paramInt2)
  {
    super(paramInt1);
    this.table = paramExpression1;
    this.index = paramExpression2;
    this.value = paramExpression3;
    this.isTable = paramBoolean;
    this.timestamp = paramInt2;
  }
  
  public Statement process(Registers paramRegisters, Block paramBlock)
  {
    if (this.table.isTableLiteral())
    {
      paramRegisters = this.table;
      paramBlock = this.index;
      Expression localExpression = this.value;
      if (this.isTable) {}
      for (boolean bool = false;; bool = true)
      {
        paramRegisters.addEntry(new TableLiteral.Entry(paramBlock, localExpression, bool, this.timestamp));
        return null;
      }
    }
    return new Assignment(new TableTarget(this.table, this.index), this.value);
  }
}
