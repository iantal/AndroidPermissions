package com.eden.sdk.unluac.decompile.expression;

import com.eden.sdk.unluac.decompile.Output;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

public class TableLiteral
  extends Expression
{
  private ArrayList<TableLiteral.Entry> entries;
  private boolean isList = true;
  private boolean isObject = true;
  private int listLength = 1;
  
  public TableLiteral()
  {
    this(5, 5);
  }
  
  public TableLiteral(int paramInt1, int paramInt2)
  {
    super(9);
    this.entries = new ArrayList(paramInt1 + paramInt2);
  }
  
  private void printEntry(int paramInt, Output paramOutput)
  {
    TableLiteral.Entry localEntry = (TableLiteral.Entry)this.entries.get(paramInt);
    Expression localExpression1 = localEntry.key;
    Expression localExpression2 = localEntry.value;
    boolean bool = localEntry.isList;
    if ((paramInt + 1 < this.entries.size()) && (!localExpression2.isMultiple()))
    {
      paramInt = 0;
      if ((!bool) || (!localExpression1.isInteger()) || (this.listLength != localExpression1.asInteger())) {
        break label115;
      }
      if (paramInt == 0) {
        break label106;
      }
      localExpression2.printMultiple(paramOutput);
    }
    for (;;)
    {
      this.listLength += 1;
      return;
      paramInt = 1;
      break;
      label106:
      localExpression2.print(paramOutput);
    }
    label115:
    if ((this.isObject) && (localExpression1.isIdentifier()))
    {
      paramOutput.print(localExpression1.asName());
      paramOutput.print(" = ");
      localExpression2.print(paramOutput);
      return;
    }
    paramOutput.print("[");
    localExpression1.print(paramOutput);
    paramOutput.print("] = ");
    localExpression2.print(paramOutput);
  }
  
  public void addEntry(TableLiteral.Entry paramEntry)
  {
    boolean bool2 = true;
    this.entries.add(paramEntry);
    if ((this.isObject) && ((paramEntry.isList) || (paramEntry.key.isIdentifier())))
    {
      bool1 = true;
      this.isObject = bool1;
      if ((!this.isList) || (!paramEntry.isList)) {
        break label69;
      }
    }
    label69:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      this.isList = bool1;
      return;
      bool1 = false;
      break;
    }
  }
  
  public int getConstantIndex()
  {
    Iterator localIterator = this.entries.iterator();
    TableLiteral.Entry localEntry;
    for (int i = -1;; i = Math.max(localEntry.value.getConstantIndex(), i))
    {
      if (!localIterator.hasNext()) {
        return i;
      }
      localEntry = (TableLiteral.Entry)localIterator.next();
      i = Math.max(localEntry.key.getConstantIndex(), i);
    }
  }
  
  public boolean isBrief()
  {
    return false;
  }
  
  public boolean isTableLiteral()
  {
    return true;
  }
  
  public void print(Output paramOutput)
  {
    int k = 1;
    Collections.sort(this.entries);
    this.listLength = 1;
    if (this.entries.isEmpty())
    {
      paramOutput.print("{}");
      return;
    }
    int i;
    Iterator localIterator;
    if (((!this.isList) || (this.entries.size() <= 5)) && ((!this.isObject) || (this.entries.size() <= 2)) && (this.isObject))
    {
      i = 0;
      j = i;
      if (i == 0)
      {
        localIterator = this.entries.iterator();
        label92:
        if (localIterator.hasNext()) {
          break label186;
        }
      }
    }
    for (int j = i;; j = 1)
    {
      paramOutput.print("{");
      if (j != 0)
      {
        paramOutput.println();
        paramOutput.indent();
      }
      printEntry(0, paramOutput);
      if (!((TableLiteral.Entry)this.entries.get(0)).value.isMultiple())
      {
        i = k;
        if (i < this.entries.size()) {
          break label210;
        }
      }
      label162:
      if (j != 0)
      {
        paramOutput.println();
        paramOutput.dedent();
      }
      paramOutput.print("}");
      return;
      i = 1;
      break;
      label186:
      if (((TableLiteral.Entry)localIterator.next()).value.isBrief()) {
        break label92;
      }
    }
    label210:
    paramOutput.print(",");
    if (j != 0) {
      paramOutput.println();
    }
    for (;;)
    {
      printEntry(i, paramOutput);
      if (((TableLiteral.Entry)this.entries.get(i)).value.isMultiple()) {
        break label162;
      }
      i += 1;
      break;
      paramOutput.print(" ");
    }
  }
}
