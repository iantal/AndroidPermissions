package com.eden.sdk.unluac.decompile.statement;

import com.eden.sdk.unluac.decompile.Declaration;
import com.eden.sdk.unluac.decompile.Output;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.target.Target;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Assignment
  extends Statement
{
  private boolean allnil = true;
  private boolean declare = false;
  private int declareStart = 0;
  private final ArrayList<Target> targets = new ArrayList(5);
  private final ArrayList<Expression> values = new ArrayList(5);
  
  public Assignment() {}
  
  public Assignment(Target paramTarget, Expression paramExpression)
  {
    this.targets.add(paramTarget);
    this.values.add(paramExpression);
    if ((this.allnil) && (paramExpression.isNil())) {}
    for (;;)
    {
      this.allnil = bool;
      return;
      bool = false;
    }
  }
  
  public void addFirst(Target paramTarget, Expression paramExpression)
  {
    boolean bool2 = false;
    this.targets.add(0, paramTarget);
    this.values.add(0, paramExpression);
    boolean bool1 = bool2;
    if (this.allnil)
    {
      bool1 = bool2;
      if (paramExpression.isNil()) {
        bool1 = true;
      }
    }
    this.allnil = bool1;
  }
  
  public void addLast(Target paramTarget, Expression paramExpression)
  {
    if (this.targets.contains(paramTarget))
    {
      int i = this.targets.indexOf(paramTarget);
      this.targets.remove(i);
      paramExpression = (Expression)this.values.remove(i);
    }
    for (;;)
    {
      this.targets.add(paramTarget);
      this.values.add(paramExpression);
      if ((this.allnil) && (paramExpression.isNil())) {}
      for (boolean bool = true;; bool = false)
      {
        this.allnil = bool;
        return;
      }
    }
  }
  
  public boolean assignListEquals(List<Declaration> paramList)
  {
    if (paramList.size() != this.targets.size()) {
      return false;
    }
    Iterator localIterator1 = this.targets.iterator();
    label95:
    for (;;)
    {
      if (!localIterator1.hasNext()) {
        return true;
      }
      Target localTarget = (Target)localIterator1.next();
      Iterator localIterator2 = paramList.iterator();
      if (!localIterator2.hasNext()) {}
      for (int i = 0;; i = 1)
      {
        if (i != 0) {
          break label95;
        }
        return false;
        if (!localTarget.isDeclaration((Declaration)localIterator2.next())) {
          break;
        }
      }
    }
  }
  
  public boolean assignsTarget(Declaration paramDeclaration)
  {
    Iterator localIterator = this.targets.iterator();
    do
    {
      if (!localIterator.hasNext()) {
        return false;
      }
    } while (!((Target)localIterator.next()).isDeclaration(paramDeclaration));
    return true;
  }
  
  public void declare(int paramInt)
  {
    this.declare = true;
    this.declareStart = paramInt;
  }
  
  public int getArity()
  {
    return this.targets.size();
  }
  
  public Target getFirstTarget()
  {
    return (Target)this.targets.get(0);
  }
  
  public Expression getFirstValue()
  {
    return (Expression)this.values.get(0);
  }
  
  public void print(Output paramOutput)
  {
    int k = 1;
    int i;
    if (!this.targets.isEmpty())
    {
      if (this.declare) {
        paramOutput.print("local ");
      }
      if ((this.targets.size() != 1) || (this.values.size() != 1) || (!((Expression)this.values.get(0)).isClosure()) || (!((Target)this.targets.get(0)).isFunctionName())) {
        break label308;
      }
      Expression localExpression = (Expression)this.values.get(0);
      if ((this.declare) && (this.declareStart < localExpression.closureUpvalueLine())) {
        break label303;
      }
      i = 1;
      j = i;
      if (((Target)this.targets.get(0)).isLocal())
      {
        j = i;
        if (!localExpression.isUpvalueOf(((Target)this.targets.get(0)).getIndex())) {}
      }
    }
    label303:
    label308:
    for (int j = 1;; j = 0)
    {
      if (j == 0)
      {
        ((Target)this.targets.get(0)).print(paramOutput);
        i = k;
        if (i >= this.targets.size()) {
          if ((!this.declare) || (!this.allnil))
          {
            paramOutput.print(" = ");
            Expression.printSequence(paramOutput, this.values, false, false);
          }
        }
      }
      for (;;)
      {
        if (this.comment != null)
        {
          paramOutput.print(" -- ");
          paramOutput.print(this.comment);
        }
        return;
        paramOutput.print(", ");
        ((Target)this.targets.get(i)).print(paramOutput);
        i += 1;
        break;
        ((Expression)this.values.get(0)).printClosure(paramOutput, (Target)this.targets.get(0));
      }
      i = 0;
      break;
    }
  }
}
