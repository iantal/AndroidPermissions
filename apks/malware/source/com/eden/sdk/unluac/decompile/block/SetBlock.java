package com.eden.sdk.unluac.decompile.block;

import com.eden.sdk.unluac.decompile.Decompiler;
import com.eden.sdk.unluac.decompile.Output;
import com.eden.sdk.unluac.decompile.Registers;
import com.eden.sdk.unluac.decompile.branch.Branch;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.operation.Operation;
import com.eden.sdk.unluac.decompile.operation.RegisterSet;
import com.eden.sdk.unluac.decompile.statement.Assignment;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.parse.LFunction;

public class SetBlock
  extends Block
{
  private Assignment assign;
  public final Branch branch;
  private boolean empty;
  private boolean finalize = false;
  private Registers r;
  public final int target;
  
  public SetBlock(LFunction paramLFunction, Branch paramBranch, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean, Registers paramRegisters)
  {
    super(paramLFunction, paramInt3, paramInt4);
    this.empty = paramBoolean;
    if (paramInt3 == paramInt4) {
      this.begin -= 1;
    }
    this.target = paramInt1;
    this.branch = paramBranch;
    this.r = paramRegisters;
  }
  
  public void addStatement(Statement paramStatement)
  {
    if ((!this.finalize) && ((paramStatement instanceof Assignment))) {
      this.assign = ((Assignment)paramStatement);
    }
    while (!(paramStatement instanceof BooleanIndicator)) {
      return;
    }
    this.finalize = true;
  }
  
  public boolean breakable()
  {
    return false;
  }
  
  public int getLoopback()
  {
    throw new IllegalStateException();
  }
  
  public Expression getValue()
  {
    return this.branch.asExpression(this.r);
  }
  
  public boolean isContainer()
  {
    return false;
  }
  
  public boolean isUnprotected()
  {
    return false;
  }
  
  public void print(Output paramOutput)
  {
    if ((this.assign != null) && (this.assign.getFirstTarget() != null))
    {
      new Assignment(this.assign.getFirstTarget(), getValue()).print(paramOutput);
      return;
    }
    paramOutput.print("-- unhandled set block");
    paramOutput.println();
  }
  
  public Operation process(Decompiler paramDecompiler)
  {
    if (this.empty)
    {
      paramDecompiler = this.r.getExpression(this.branch.setTarget, this.end);
      this.branch.useExpression(paramDecompiler);
      return new RegisterSet(this.end - 1, this.branch.setTarget, this.branch.asExpression(this.r));
    }
    if (this.assign != null)
    {
      this.branch.useExpression(this.assign.getFirstValue());
      paramDecompiler = this.assign.getFirstTarget();
      Expression localExpression = getValue();
      return new SetBlock.1(this, this.end - 1, paramDecompiler, localExpression);
    }
    return new SetBlock.2(this, this.end - 1, paramDecompiler);
  }
  
  public void useAssignment(Assignment paramAssignment)
  {
    this.assign = paramAssignment;
    this.branch.useExpression(paramAssignment.getFirstValue());
  }
}
