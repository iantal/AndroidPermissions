package com.eden.sdk.unluac.decompile;

import com.eden.sdk.unluac.Version;
import com.eden.sdk.unluac.decompile.block.AlwaysLoop;
import com.eden.sdk.unluac.decompile.block.Block;
import com.eden.sdk.unluac.decompile.block.BooleanIndicator;
import com.eden.sdk.unluac.decompile.block.Break;
import com.eden.sdk.unluac.decompile.block.CompareBlock;
import com.eden.sdk.unluac.decompile.block.DoEndBlock;
import com.eden.sdk.unluac.decompile.block.ElseEndBlock;
import com.eden.sdk.unluac.decompile.block.ForBlock;
import com.eden.sdk.unluac.decompile.block.IfThenElseBlock;
import com.eden.sdk.unluac.decompile.block.IfThenEndBlock;
import com.eden.sdk.unluac.decompile.block.OuterBlock;
import com.eden.sdk.unluac.decompile.block.RepeatBlock;
import com.eden.sdk.unluac.decompile.block.SetBlock;
import com.eden.sdk.unluac.decompile.block.TForBlock;
import com.eden.sdk.unluac.decompile.block.WhileBlock;
import com.eden.sdk.unluac.decompile.branch.AndBranch;
import com.eden.sdk.unluac.decompile.branch.AssignNode;
import com.eden.sdk.unluac.decompile.branch.Branch;
import com.eden.sdk.unluac.decompile.branch.EQNode;
import com.eden.sdk.unluac.decompile.branch.LENode;
import com.eden.sdk.unluac.decompile.branch.LTNode;
import com.eden.sdk.unluac.decompile.branch.OrBranch;
import com.eden.sdk.unluac.decompile.branch.TestNode;
import com.eden.sdk.unluac.decompile.branch.TestSetNode;
import com.eden.sdk.unluac.decompile.branch.TrueNode;
import com.eden.sdk.unluac.decompile.expression.ClosureExpression;
import com.eden.sdk.unluac.decompile.expression.ConstantExpression;
import com.eden.sdk.unluac.decompile.expression.Expression;
import com.eden.sdk.unluac.decompile.expression.FunctionCall;
import com.eden.sdk.unluac.decompile.expression.TableLiteral;
import com.eden.sdk.unluac.decompile.expression.TableReference;
import com.eden.sdk.unluac.decompile.expression.Vararg;
import com.eden.sdk.unluac.decompile.operation.CallOperation;
import com.eden.sdk.unluac.decompile.operation.GlobalSet;
import com.eden.sdk.unluac.decompile.operation.Operation;
import com.eden.sdk.unluac.decompile.operation.RegisterSet;
import com.eden.sdk.unluac.decompile.operation.ReturnOperation;
import com.eden.sdk.unluac.decompile.operation.TableSet;
import com.eden.sdk.unluac.decompile.operation.UpvalueSet;
import com.eden.sdk.unluac.decompile.statement.Assignment;
import com.eden.sdk.unluac.decompile.statement.Statement;
import com.eden.sdk.unluac.decompile.target.GlobalTarget;
import com.eden.sdk.unluac.decompile.target.TableTarget;
import com.eden.sdk.unluac.decompile.target.Target;
import com.eden.sdk.unluac.decompile.target.UpvalueTarget;
import com.eden.sdk.unluac.decompile.target.VariableTarget;
import com.eden.sdk.unluac.parse.BHeader;
import com.eden.sdk.unluac.parse.LBoolean;
import com.eden.sdk.unluac.parse.LFunction;
import com.eden.sdk.unluac.parse.LObject;
import com.eden.sdk.unluac.util.Stack;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class Decompiler
{
  private static Stack<Branch> backup;
  private ArrayList<Block> blocks;
  public final Code code;
  public final Declaration[] declList;
  protected Function f;
  protected LFunction function;
  private final LFunction[] functions;
  private final int length;
  private Block outer;
  private final int params;
  private Registers r;
  private final int registers;
  boolean[] reverseTarget;
  boolean[] skip;
  private final Op tforTarget;
  private final Upvalues upvalues;
  private final int vararg;
  
  public Decompiler(LFunction paramLFunction)
  {
    this.f = new Function(paramLFunction);
    this.function = paramLFunction;
    this.registers = paramLFunction.maximumStackSize;
    this.length = paramLFunction.code.length;
    this.code = new Code(paramLFunction);
    if (paramLFunction.locals.length >= paramLFunction.numParams)
    {
      this.declList = new Declaration[paramLFunction.locals.length];
      if (i < this.declList.length) {}
    }
    for (;;)
    {
      this.upvalues = new Upvalues(paramLFunction.upvalues);
      this.functions = paramLFunction.functions;
      this.params = paramLFunction.numParams;
      this.vararg = paramLFunction.vararg;
      this.tforTarget = paramLFunction.header.version.getTForTarget();
      return;
      this.declList[i] = new Declaration(paramLFunction.locals[i]);
      i += 1;
      break;
      this.declList = new Declaration[paramLFunction.numParams];
      i = 0;
      while (i < this.declList.length)
      {
        this.declList[i] = new Declaration("_ARG_" + i + "_", 0, this.length - 1);
        i += 1;
      }
    }
  }
  
  private Branch _helper_popSetCondition(Stack<Branch> paramStack, boolean paramBoolean, int paramInt)
  {
    Object localObject2 = (Branch)paramStack.pop();
    int j = ((Branch)localObject2).begin;
    int k = ((Branch)localObject2).end;
    Object localObject1 = localObject2;
    if (paramBoolean) {
      localObject1 = ((Branch)localObject2).invert();
    }
    int i = j;
    if (this.code.op(j) == Op.LOADBOOL)
    {
      if (this.code.C(j) != 0) {
        i = j + 2;
      }
    }
    else
    {
      j = k;
      if (this.code.op(k) == Op.LOADBOOL) {
        if (this.code.C(k) == 0) {
          break label155;
        }
      }
    }
    label130:
    label155:
    for (j = k + 2;; j = k + 1)
    {
      int n = ((Branch)localObject1).setTarget;
      if (!paramStack.isEmpty()) {
        break label164;
      }
      localObject2 = localObject1;
      ((Branch)localObject2).isSet = true;
      ((Branch)localObject2).setTarget = n;
      return localObject2;
      i = j + 1;
      break;
    }
    label164:
    localObject2 = (Branch)paramStack.peek();
    k = ((Branch)localObject2).end;
    boolean bool;
    label216:
    label237:
    int m;
    if (this.code.op(((Branch)localObject2).end) == Op.LOADBOOL) {
      if (this.code.B(((Branch)localObject2).end) != 0)
      {
        bool = true;
        if (this.code.C(((Branch)localObject2).end) == 0) {
          break label309;
        }
        k += 2;
        if (bool != paramBoolean) {
          break label376;
        }
        m = j;
        label247:
        if (m != k) {
          break label411;
        }
        if (m == k) {
          break label439;
        }
        if (!bool) {
          break label383;
        }
        bool = false;
      }
    }
    label269:
    label309:
    label376:
    label383:
    label411:
    label439:
    for (;;)
    {
      if (bool) {}
      for (localObject1 = new OrBranch(_helper_popSetCondition(paramStack, bool, paramInt), (Branch)localObject1);; localObject1 = new AndBranch(_helper_popSetCondition(paramStack, bool, paramInt), (Branch)localObject1))
      {
        ((Branch)localObject1).end = k;
        break;
        bool = false;
        break label216;
        k += 1;
        break label237;
        if ((localObject2 instanceof TestSetNode))
        {
          bool = ((TestSetNode)localObject2).invert;
          break label237;
        }
        if ((localObject2 instanceof TestNode))
        {
          bool = ((TestNode)localObject2).invert;
          break label237;
        }
        localObject2 = localObject1;
        if (k >= paramInt) {
          break label130;
        }
        bool = false;
        break label237;
        m = i;
        break label247;
        bool = true;
        break label269;
      }
      localObject2 = localObject1;
      if ((localObject1 instanceof TestSetNode)) {
        break label130;
      }
      paramStack.push(localObject1);
      localObject2 = popCondition(paramStack);
      break label130;
    }
  }
  
  private int breakTarget(int paramInt)
  {
    Iterator localIterator = this.blocks.iterator();
    Block localBlock;
    for (int i = Integer.MAX_VALUE;; i = Math.min(i, localBlock.end)) {
      do
      {
        if (!localIterator.hasNext())
        {
          paramInt = i;
          if (i == Integer.MAX_VALUE) {
            paramInt = -1;
          }
          return paramInt;
        }
        localBlock = (Block)localIterator.next();
      } while ((!localBlock.breakable()) || (!localBlock.contains(paramInt)));
    }
  }
  
  private Block enclosingBlock(int paramInt)
  {
    Object localObject1 = (Block)this.blocks.get(0);
    int i = 1;
    for (;;)
    {
      if (i >= this.blocks.size()) {
        return localObject1;
      }
      Block localBlock = (Block)this.blocks.get(i);
      Object localObject2 = localObject1;
      if (localBlock.isContainer())
      {
        localObject2 = localObject1;
        if (((Block)localObject1).contains(localBlock))
        {
          localObject2 = localObject1;
          if (localBlock.contains(paramInt))
          {
            localObject2 = localObject1;
            if (!localBlock.loopRedirectAdjustment) {
              localObject2 = localBlock;
            }
          }
        }
      }
      i += 1;
      localObject1 = localObject2;
    }
  }
  
  private Block enclosingBlock(Block paramBlock)
  {
    Object localObject1 = (Block)this.blocks.get(0);
    int i = 1;
    for (;;)
    {
      if (i >= this.blocks.size()) {
        return localObject1;
      }
      Block localBlock = (Block)this.blocks.get(i);
      Object localObject2 = localObject1;
      if (localBlock != paramBlock)
      {
        localObject2 = localObject1;
        if (localBlock.contains(paramBlock))
        {
          localObject2 = localObject1;
          if (((Block)localObject1).contains(localBlock)) {
            localObject2 = localBlock;
          }
        }
      }
      i += 1;
      localObject1 = localObject2;
    }
  }
  
  private Block enclosingBreakableBlock(int paramInt)
  {
    Block localBlock1 = (Block)this.blocks.get(0);
    int i = 1;
    Object localObject2;
    for (Object localObject1 = localBlock1;; localObject1 = localObject2)
    {
      if (i >= this.blocks.size())
      {
        localObject2 = localObject1;
        if (localObject1 == localBlock1) {
          localObject2 = null;
        }
        return localObject2;
      }
      Block localBlock2 = (Block)this.blocks.get(i);
      localObject2 = localObject1;
      if (((Block)localObject1).contains(localBlock2))
      {
        localObject2 = localObject1;
        if (localBlock2.contains(paramInt))
        {
          localObject2 = localObject1;
          if (localBlock2.breakable())
          {
            localObject2 = localObject1;
            if (!localBlock2.loopRedirectAdjustment) {
              localObject2 = localBlock2;
            }
          }
        }
      }
      i += 1;
    }
  }
  
  private Block enclosingUnprotectedBlock(int paramInt)
  {
    Block localBlock1 = (Block)this.blocks.get(0);
    int i = 1;
    Object localObject2;
    for (Object localObject1 = localBlock1;; localObject1 = localObject2)
    {
      if (i >= this.blocks.size())
      {
        localObject2 = localObject1;
        if (localObject1 == localBlock1) {
          localObject2 = null;
        }
        return localObject2;
      }
      Block localBlock2 = (Block)this.blocks.get(i);
      localObject2 = localObject1;
      if (((Block)localObject1).contains(localBlock2))
      {
        localObject2 = localObject1;
        if (localBlock2.contains(paramInt))
        {
          localObject2 = localObject1;
          if (localBlock2.isUnprotected())
          {
            localObject2 = localObject1;
            if (!localBlock2.loopRedirectAdjustment) {
              localObject2 = localBlock2;
            }
          }
        }
      }
      i += 1;
    }
  }
  
  private void findReverseTargets()
  {
    this.reverseTarget = new boolean[this.length + 1];
    Arrays.fill(this.reverseTarget, false);
    int i = 1;
    for (;;)
    {
      if (i > this.length) {
        return;
      }
      if ((this.code.op(i) == Op.JMP) && (this.code.sBx(i) < 0)) {
        this.reverseTarget[(i + 1 + this.code.sBx(i))] = true;
      }
      i += 1;
    }
  }
  
  private int getAssignment(int paramInt)
  {
    int j = -1;
    int i = j;
    switch (this.code.op(paramInt))
    {
    case TESTSET: 
    default: 
      throw new IllegalStateException("Illegal opcode: " + this.code.op(paramInt));
    case ADD: 
    case CALL: 
    case CLOSE: 
    case CONCAT: 
    case DIV: 
    case EQ: 
    case GETGLOBAL: 
    case GETTABUP: 
    case GETUPVAL: 
    case JMP: 
    case LE: 
    case LEN: 
    case LOADBOOL: 
    case LOADK: 
    case LOADKX: 
    case LOADNIL: 
    case LT: 
    case TAILCALL: 
    case TFORCALL: 
      i = this.code.A(paramInt);
    }
    do
    {
      do
      {
        do
        {
          return i;
          i = j;
        } while (this.code.A(paramInt) != this.code.B(paramInt));
        return this.code.A(paramInt);
        i = j;
      } while (this.code.C(paramInt) != 2);
      return this.code.A(paramInt);
      i = j;
    } while (this.code.C(paramInt) != 2);
    return this.code.B(paramInt);
  }
  
  private Target getMoveIntoTargetTarget(int paramInt1, int paramInt2)
  {
    switch (this.code.op(paramInt1))
    {
    default: 
      throw new IllegalStateException();
    case ADD: 
      return this.r.getTarget(this.code.A(paramInt1), paramInt1);
    case FORLOOP: 
      return new UpvalueTarget(this.upvalues.getName(this.code.B(paramInt1)));
    case EXTRAARG: 
      return new GlobalTarget(this.f.getGlobalName(this.code.Bx(paramInt1)));
    }
    return new TableTarget(this.r.getExpression(this.code.A(paramInt1), paramInt2), this.r.getKExpression(this.code.B(paramInt1), paramInt2));
  }
  
  private Expression getMoveIntoTargetValue(int paramInt1, int paramInt2)
  {
    int i = this.code.A(paramInt1);
    int j = this.code.B(paramInt1);
    int k = this.code.C(paramInt1);
    switch (this.code.op(paramInt1))
    {
    default: 
      throw new IllegalStateException();
    case ADD: 
      return this.r.getValue(j, paramInt2);
    case EXTRAARG: 
    case FORLOOP: 
      return this.r.getExpression(i, paramInt2);
    }
    if ((k & 0x100) != 0) {
      throw new IllegalStateException();
    }
    return this.r.getExpression(k, paramInt2);
  }
  
  private OuterBlock handleBranches(boolean paramBoolean)
  {
    Object localObject1 = this.blocks;
    this.blocks = new ArrayList();
    OuterBlock localOuterBlock = new OuterBlock(this.function, this.length);
    this.blocks.add(localOuterBlock);
    Object localObject2 = new boolean[this.length + 1];
    Object localObject3 = new boolean[this.length + 1];
    Object localObject4;
    if (!paramBoolean)
    {
      localObject1 = ((List)localObject1).iterator();
      if (((Iterator)localObject1).hasNext()) {
        break label226;
      }
      localObject1 = new LinkedList();
      localObject4 = this.blocks.iterator();
      label105:
      if (((Iterator)localObject4).hasNext()) {
        break label286;
      }
      localObject1 = ((List)localObject1).iterator();
    }
    int i2;
    int j;
    int i;
    boolean bool1;
    int k;
    label202:
    label226:
    label286:
    Object localObject5;
    Object localObject6;
    Object localObject7;
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext())
      {
        this.skip = new boolean[this.length + 1];
        localObject4 = new Stack();
        i2 = 1;
        j = -1;
        i = 0;
        bool1 = false;
        if (i2 <= this.length) {
          break label443;
        }
        localObject1 = this.declList;
        k = localObject1.length;
        i = 0;
        if (i < k) {
          break label4345;
        }
        localObject1 = this.blocks.listIterator();
        if (((ListIterator)localObject1).hasNext()) {
          break label4473;
        }
        Collections.sort(this.blocks);
        backup = null;
        return localOuterBlock;
        localObject4 = (Block)((Iterator)localObject1).next();
        if ((localObject4 instanceof AlwaysLoop)) {
          this.blocks.add(localObject4);
        }
        if (!(localObject4 instanceof Break)) {
          break;
        }
        this.blocks.add(localObject4);
        localObject2[localObject4.begin] = 1;
        break;
        localObject5 = (Block)((Iterator)localObject4).next();
        if (!(localObject5 instanceof AlwaysLoop)) {
          break label105;
        }
        localObject6 = this.blocks.iterator();
        while (((Iterator)localObject6).hasNext())
        {
          localObject7 = (Block)((Iterator)localObject6).next();
          if ((localObject5 != localObject7) && (((Block)localObject5).begin == ((Block)localObject7).begin)) {
            if (((Block)localObject5).end < ((Block)localObject7).end)
            {
              ((List)localObject1).add(localObject5);
              localObject3[(localObject5.end - 1)] = 1;
            }
            else
            {
              ((List)localObject1).add(localObject7);
              localObject3[(localObject7.end - 1)] = 1;
            }
          }
        }
        break label105;
      }
      localObject4 = (Block)((Iterator)localObject1).next();
      this.blocks.remove(localObject4);
    }
    label443:
    boolean bool2 = bool1;
    if (this.skip[i2] == 0) {
      switch (this.code.op(i2))
      {
      case RETURN: 
      case SELF: 
      case SETGLOBAL: 
      default: 
        bool2 = isStatement(i2);
      }
    }
    for (;;)
    {
      label540:
      if ((i2 + 1 <= this.length) && (this.reverseTarget[(i2 + 1)] != 0)) {}
      for (bool1 = true;; bool1 = bool2)
      {
        bool2 = bool1;
        if (i != 0)
        {
          bool2 = bool1;
          if (j == i2 + 1) {
            bool2 = true;
          }
        }
        if (((Stack)localObject4).isEmpty()) {}
        for (bool1 = false;; bool1 = bool2)
        {
          bool2 = bool1;
          int m;
          label685:
          int n;
          label839:
          label855:
          label894:
          label930:
          Object localObject8;
          label973:
          label991:
          label1023:
          label1050:
          label1123:
          label1150:
          int i1;
          label1158:
          int i3;
          if (bool1)
          {
            localObject5 = new Stack();
            localObject6 = new Stack();
            do
            {
              bool1 = ((Stack)localObject4).peek() instanceof TestSetNode;
              k = ((Branch)((Stack)localObject4).peek()).end;
              if (!(((Stack)localObject4).peek() instanceof TrueNode)) {
                break label3124;
              }
              m = 1;
              if (this.code.C(k) == 0) {
                break;
              }
              k += 2;
              bool1 = true;
              if ((m != 0) || (k - 1 != ((Branch)((Stack)localObject4).peek()).begin) || (this.code.op(((Branch)((Stack)localObject4).peek()).begin) != Op.LOADBOOL) || (this.code.C(((Branch)((Stack)localObject4).peek()).begin) == 0)) {
                break label3529;
              }
              backup = null;
              k = ((Branch)((Stack)localObject4).peek()).begin;
              m = k + 2;
              n = this.code.A(k);
              ((Stack)localObject5).push(popCompareSetCondition((Stack)localObject4, m));
              ((Branch)((Stack)localObject5).peek()).setTarget = n;
              ((Branch)((Stack)localObject5).peek()).end = m;
              ((Branch)((Stack)localObject5).peek()).begin = k;
              ((Stack)localObject6).push(backup);
            } while (!((Stack)localObject4).isEmpty());
            localObject1 = (Branch)((Stack)localObject5).pop();
            localObject7 = (Stack)((Stack)localObject6).pop();
            m = breakTarget(((Branch)localObject1).begin);
            if (m > 0)
            {
              k = 1;
              if ((k == 0) || (this.code.op(m) != Op.JMP)) {
                break label4548;
              }
              m += this.code.sBx(m) + 1;
              if ((k != 0) && (m == ((Branch)localObject1).end))
              {
                localObject8 = enclosingBlock(((Branch)localObject1).begin);
                k = Math.max(((Branch)localObject1).end, ((Block)localObject8).end - 1);
                if (k >= Math.max(((Branch)localObject1).begin, ((Block)localObject8).begin)) {
                  break label3655;
                }
              }
              if ((((Branch)localObject1).end < 2) || (this.code.op(((Branch)localObject1).end - 1) != Op.JMP)) {
                break label3708;
              }
              m = 1;
              if (m == 0) {
                break label3714;
              }
              k = ((Branch)localObject1).end + this.code.sBx(((Branch)localObject1).end - 1);
              localObject8 = enclosingUnprotectedBlock(((Branch)localObject1).begin);
              if (localObject8 == null) {
                break label4533;
              }
              if (((Block)localObject8).getLoopback() != ((Branch)localObject1).end) {
                break label4522;
              }
              ((Branch)localObject1).end = (((Block)localObject8).end - 1);
              if ((((Branch)localObject1).end < 2) || (this.code.op(((Branch)localObject1).end - 1) != Op.JMP)) {
                break label3720;
              }
              m = 1;
              if (m == 0) {
                break label3726;
              }
              n = ((Branch)localObject1).end + this.code.sBx(((Branch)localObject1).end - 1);
              i1 = n;
              n = m;
              i3 = n;
              m = i1;
              if (n != 0)
              {
                i3 = n;
                m = i1;
                if (((Block)localObject8).getLoopback() == i1)
                {
                  m = ((Block)localObject8).end - 1;
                  i3 = n;
                }
              }
              label1202:
              if (!((Branch)localObject1).isSet) {
                break label3738;
              }
              if (((Branch)localObject1).begin != ((Branch)localObject1).end) {
                break label3732;
              }
              bool1 = true;
              label1226:
              if ((this.code.op(((Branch)localObject1).begin) != Op.JMP) || (this.code.sBx(((Branch)localObject1).begin) != 2) || (this.code.op(((Branch)localObject1).begin + 1) != Op.LOADBOOL) || (this.code.C(((Branch)localObject1).begin + 1) == 0)) {
                break label4519;
              }
              bool1 = true;
              label1300:
              this.blocks.add(new SetBlock(this.function, (Branch)localObject1, ((Branch)localObject1).setTarget, i2, ((Branch)localObject1).begin, ((Branch)localObject1).end, bool1, this.r));
              label1344:
              if (!((Stack)localObject5).isEmpty()) {
                break label4343;
              }
              k = j;
              bool1 = false;
              j = i;
              i = k;
            }
          }
          for (;;)
          {
            i2 += 1;
            k = j;
            j = i;
            i = k;
            break;
            k = this.code.B(i2);
            m = this.code.C(i2);
            if (this.code.A(i2) != 0) {}
            for (bool2 = true;; bool2 = false)
            {
              localObject1 = new EQNode(k, m, bool2, i2, i2 + 2, i2 + 2 + this.code.sBx(i2 + 1));
              ((Stack)localObject4).push(localObject1);
              this.skip[(i2 + 1)] = true;
              bool2 = bool1;
              if (this.code.op(((EQNode)localObject1).end) != Op.LOADBOOL) {
                break label4557;
              }
              if (this.code.C(((EQNode)localObject1).end) == 0) {
                break label1548;
              }
              ((EQNode)localObject1).isCompareSet = true;
              ((EQNode)localObject1).setTarget = this.code.A(((EQNode)localObject1).end);
              k = i;
              i = j;
              j = k;
              break;
            }
            label1548:
            bool2 = bool1;
            if (this.code.op(((EQNode)localObject1).end - 1) == Op.LOADBOOL)
            {
              bool2 = bool1;
              if (this.code.C(((EQNode)localObject1).end - 1) != 0)
              {
                ((EQNode)localObject1).isCompareSet = true;
                ((EQNode)localObject1).setTarget = this.code.A(((EQNode)localObject1).end);
                k = i;
                i = j;
                j = k;
                continue;
                k = this.code.B(i2);
                m = this.code.C(i2);
                if (this.code.A(i2) != 0) {}
                for (bool2 = true;; bool2 = false)
                {
                  localObject1 = new LTNode(k, m, bool2, i2, i2 + 2, i2 + 2 + this.code.sBx(i2 + 1));
                  ((Stack)localObject4).push(localObject1);
                  this.skip[(i2 + 1)] = true;
                  bool2 = bool1;
                  if (this.code.op(((LTNode)localObject1).end) != Op.LOADBOOL) {
                    break label4557;
                  }
                  if (this.code.C(((LTNode)localObject1).end) == 0) {
                    break label1795;
                  }
                  ((LTNode)localObject1).isCompareSet = true;
                  ((LTNode)localObject1).setTarget = this.code.A(((LTNode)localObject1).end);
                  k = i;
                  i = j;
                  j = k;
                  break;
                }
                label1795:
                bool2 = bool1;
                if (this.code.op(((LTNode)localObject1).end - 1) == Op.LOADBOOL)
                {
                  bool2 = bool1;
                  if (this.code.C(((LTNode)localObject1).end - 1) != 0)
                  {
                    ((LTNode)localObject1).isCompareSet = true;
                    ((LTNode)localObject1).setTarget = this.code.A(((LTNode)localObject1).end);
                    k = i;
                    i = j;
                    j = k;
                    continue;
                    k = this.code.B(i2);
                    m = this.code.C(i2);
                    if (this.code.A(i2) != 0) {}
                    for (bool2 = true;; bool2 = false)
                    {
                      localObject1 = new LENode(k, m, bool2, i2, i2 + 2, i2 + 2 + this.code.sBx(i2 + 1));
                      ((Stack)localObject4).push(localObject1);
                      this.skip[(i2 + 1)] = true;
                      bool2 = bool1;
                      if (this.code.op(((LENode)localObject1).end) != Op.LOADBOOL) {
                        break label4557;
                      }
                      if (this.code.C(((LENode)localObject1).end) == 0) {
                        break label2042;
                      }
                      ((LENode)localObject1).isCompareSet = true;
                      ((LENode)localObject1).setTarget = this.code.A(((LENode)localObject1).end);
                      k = i;
                      i = j;
                      j = k;
                      break;
                    }
                    label2042:
                    bool2 = bool1;
                    if (this.code.op(((LENode)localObject1).end - 1) == Op.LOADBOOL)
                    {
                      bool2 = bool1;
                      if (this.code.C(((LENode)localObject1).end - 1) != 0)
                      {
                        ((LENode)localObject1).isCompareSet = true;
                        ((LENode)localObject1).setTarget = this.code.A(((LENode)localObject1).end);
                        k = i;
                        i = j;
                        j = k;
                        continue;
                        k = this.code.A(i2);
                        if (this.code.C(i2) != 0) {}
                        for (bool2 = true;; bool2 = false)
                        {
                          ((Stack)localObject4).push(new TestNode(k, bool2, i2, i2 + 2, this.code.sBx(i2 + 1) + (i2 + 2)));
                          this.skip[(i2 + 1)] = true;
                          k = i;
                          i = j;
                          j = k;
                          break;
                        }
                        i = this.code.sBx(i2 + 1);
                        j = this.code.A(i2);
                        k = this.code.B(i2);
                        if (this.code.C(i2) != 0) {}
                        for (bool2 = true;; bool2 = false)
                        {
                          ((Stack)localObject4).push(new TestSetNode(j, k, bool2, i2, i2 + 2, i2 + 2 + this.code.sBx(i2 + 1)));
                          this.skip[(i2 + 1)] = true;
                          i = i2 + 2 + i;
                          j = 1;
                          break;
                        }
                        m = i2 + 1 + this.code.sBx(i2);
                        if ((m >= 2) && (this.code.op(m - 1) == Op.LOADBOOL) && (this.code.C(m - 1) != 0))
                        {
                          ((Stack)localObject4).push(new TrueNode(this.code.A(m - 1), false, i2, i2 + 1, m));
                          this.skip[(i2 + 1)] = true;
                          bool2 = true;
                          break label540;
                        }
                        if ((this.code.op(m) == this.tforTarget) && (this.skip[m] == 0))
                        {
                          n = this.code.A(m);
                          i1 = this.code.C(m);
                          if (i1 == 0) {
                            throw new IllegalStateException();
                          }
                          this.r.setInternalLoopVariable(n, m, i2 + 1);
                          this.r.setInternalLoopVariable(n + 1, m, i2 + 1);
                          this.r.setInternalLoopVariable(n + 2, m, i2 + 1);
                          k = 1;
                          for (;;)
                          {
                            if (k > i1)
                            {
                              this.skip[m] = true;
                              this.skip[(m + 1)] = true;
                              this.blocks.add(new TForBlock(this.function, i2 + 1, m + 2, n, i1, this.r));
                              bool2 = true;
                              break;
                            }
                            this.r.setExplicitLoopVariable(n + 2 + k, i2, m + 2);
                            k += 1;
                          }
                        }
                        if ((this.code.sBx(i2) == 2) && (this.code.op(i2 + 1) == Op.LOADBOOL) && (this.code.C(i2 + 1) != 0))
                        {
                          this.blocks.add(new BooleanIndicator(this.function, i2));
                          bool2 = true;
                          break label540;
                        }
                        if ((!paramBoolean) && (localObject3[i2] == 0)) {
                          break label4586;
                        }
                        if (m > i2)
                        {
                          localObject2[i2] = 1;
                          this.blocks.add(new Break(this.function, i2, m));
                          bool2 = true;
                          break label540;
                        }
                        localObject1 = enclosingBreakableBlock(i2);
                        if ((localObject1 != null) && (((Block)localObject1).breakable()) && (this.code.op(((Block)localObject1).end) == Op.JMP) && (this.code.sBx(((Block)localObject1).end) + ((Block)localObject1).end + 1 == m))
                        {
                          localObject2[i2] = 1;
                          this.blocks.add(new Break(this.function, i2, ((Block)localObject1).end));
                          bool2 = true;
                          break label540;
                        }
                        this.blocks.add(new AlwaysLoop(this.function, m, i2 + 1));
                        bool2 = true;
                        break label540;
                        this.blocks.add(new ForBlock(this.function, i2 + 1, i2 + 2 + this.code.sBx(i2), this.code.A(i2), this.r));
                        this.skip[(i2 + 1 + this.code.sBx(i2))] = true;
                        this.r.setInternalLoopVariable(this.code.A(i2), i2, i2 + 2 + this.code.sBx(i2));
                        this.r.setInternalLoopVariable(this.code.A(i2) + 1, i2, i2 + 2 + this.code.sBx(i2));
                        this.r.setInternalLoopVariable(this.code.A(i2) + 2, i2, i2 + 2 + this.code.sBx(i2));
                        this.r.setExplicitLoopVariable(this.code.A(i2) + 3, i2, i2 + 2 + this.code.sBx(i2));
                        bool2 = true;
                        break label540;
                        throw new IllegalStateException();
                        k += 1;
                        bool1 = true;
                        break label685;
                        label3124:
                        if (((Branch)((Stack)localObject4).peek()).isCompareSet)
                        {
                          if ((this.code.op(((Branch)((Stack)localObject4).peek()).begin) != Op.LOADBOOL) || (this.code.C(((Branch)((Stack)localObject4).peek()).begin) == 0))
                          {
                            if (this.code.C(k) != 0) {
                              k += 2;
                            }
                            for (;;)
                            {
                              bool1 = true;
                              m = 1;
                              break;
                              k += 1;
                            }
                          }
                        }
                        else
                        {
                          if ((k - 3 > 0) && (this.code.op(k - 2) == Op.LOADBOOL) && (this.code.C(k - 2) != 0) && (this.code.op(k - 3) == Op.JMP) && (this.code.sBx(k - 3) == 2))
                          {
                            if ((!(((Stack)localObject4).peek() instanceof TestNode)) || (((TestNode)((Stack)localObject4).peek()).test != this.code.A(k - 2))) {
                              break label4551;
                            }
                            bool1 = true;
                            m = 0;
                            break label685;
                          }
                          if ((k - 2 > 0) && (this.code.op(k - 1) == Op.LOADBOOL) && (this.code.C(k - 1) != 0) && (this.code.op(k - 2) == Op.JMP) && (this.code.sBx(k - 2) == 2))
                          {
                            if (!(((Stack)localObject4).peek() instanceof TestNode)) {
                              break label4551;
                            }
                            bool1 = true;
                            m = 0;
                            k += 1;
                            break label685;
                          }
                          if ((k - 1 > 0) && (this.r.isLocal(getAssignment(k - 1), k - 1)) && (k > ((Branch)((Stack)localObject4).peek()).line))
                          {
                            localObject1 = this.r.getDeclaration(getAssignment(k - 1), k - 1);
                            if ((((Declaration)localObject1).begin == k - 1) && (((Declaration)localObject1).end > k - 1))
                            {
                              bool1 = true;
                              m = 0;
                              break label685;
                              label3529:
                              if (bool1)
                              {
                                backup = null;
                                m = ((Branch)((Stack)localObject4).peek()).setTarget;
                                n = ((Branch)((Stack)localObject4).peek()).begin;
                                ((Stack)localObject5).push(popSetCondition((Stack)localObject4, k));
                                ((Branch)((Stack)localObject5).peek()).setTarget = m;
                                ((Branch)((Stack)localObject5).peek()).end = k;
                                ((Branch)((Stack)localObject5).peek()).begin = n;
                                break label839;
                              }
                              backup = new Stack();
                              ((Stack)localObject5).push(popCondition((Stack)localObject4));
                              backup.reverse();
                              break label839;
                              k = 0;
                              break label894;
                              label3655:
                              if ((this.code.op(k) == Op.JMP) && (k + 1 + this.code.sBx(k) == m))
                              {
                                ((Branch)localObject1).end = k;
                                break label991;
                              }
                              k -= 1;
                              break label973;
                              label3708:
                              m = 0;
                              break label1023;
                              label3714:
                              k = -1;
                              break label1050;
                              label3720:
                              m = 0;
                              break label1123;
                              label3726:
                              n = -1;
                              break label1150;
                              label3732:
                              bool1 = false;
                              break label1226;
                              label3738:
                              if ((this.code.op(((Branch)localObject1).begin) == Op.LOADBOOL) && (this.code.C(((Branch)localObject1).begin) != 0))
                              {
                                k = ((Branch)localObject1).begin;
                                m = this.code.A(k);
                                if (this.code.B(k) != 0) {
                                  break label4516;
                                }
                                localObject1 = ((Branch)localObject1).invert();
                              }
                              label4263:
                              label4272:
                              label4343:
                              label4345:
                              label4376:
                              label4430:
                              label4473:
                              label4516:
                              for (;;)
                              {
                                this.blocks.add(new CompareBlock(this.function, k, k + 2, m, (Branch)localObject1));
                                break label1344;
                                if (((Branch)localObject1).end < ((Branch)localObject1).begin)
                                {
                                  this.blocks.add(new RepeatBlock(this.function, (Branch)localObject1, this.r));
                                  break label1344;
                                }
                                if (i3 != 0)
                                {
                                  localObject8 = this.code.op(((Branch)localObject1).end - 2);
                                  if ((localObject8 != Op.EQ) && (localObject8 != Op.LE) && (localObject8 != Op.LT) && (localObject8 != Op.TEST) && (localObject8 != Op.TESTSET)) {
                                    n = 0;
                                  }
                                  for (;;)
                                  {
                                    if ((m > ((Branch)localObject1).end) || ((m == ((Branch)localObject1).end) && (n == 0)))
                                    {
                                      localObject8 = this.code.op(m - 1);
                                      n = this.code.sBx(m - 1);
                                      if ((this.function.header.version.isBreakableLoopEnd((Op)localObject8)) && (n + m <= ((Branch)localObject1).begin) && (localObject2[(m - 1)] == 0))
                                      {
                                        this.blocks.add(new IfThenEndBlock(this.function, (Branch)localObject1, (Stack)localObject7, this.r));
                                        break;
                                        n = 1;
                                        continue;
                                      }
                                      this.skip[(localObject1.end - 1)] = true;
                                      if (m == ((Branch)localObject1).end) {}
                                      for (bool1 = true;; bool1 = false)
                                      {
                                        localObject7 = new IfThenElseBlock(this.function, (Branch)localObject1, k, bool1, this.r);
                                        this.blocks.add(localObject7);
                                        if (bool1) {
                                          break;
                                        }
                                        localObject1 = new ElseEndBlock(this.function, ((Branch)localObject1).end, m);
                                        this.blocks.add(localObject1);
                                        break;
                                      }
                                    }
                                  }
                                  n = m;
                                  for (;;)
                                  {
                                    if (n >= ((Branch)localObject1).begin) {}
                                    for (n = 0;; n = 1)
                                    {
                                      if ((m < ((Branch)localObject1).begin) && (n == 0)) {
                                        break label4272;
                                      }
                                      this.blocks.add(new IfThenEndBlock(this.function, (Branch)localObject1, (Stack)localObject7, this.r));
                                      break;
                                      if ((this.skip[n] != 0) || (!isStatement(n))) {
                                        break label4263;
                                      }
                                    }
                                    n += 1;
                                  }
                                  this.skip[(localObject1.end - 1)] = true;
                                  this.blocks.add(new WhileBlock(this.function, (Branch)localObject1, k, this.r));
                                  break label1344;
                                }
                                this.blocks.add(new IfThenEndBlock(this.function, (Branch)localObject1, (Stack)localObject7, this.r));
                                break label1344;
                                break label855;
                                localObject2 = localObject1[i];
                                if ((!((Declaration)localObject2).forLoop) && (!((Declaration)localObject2).forLoopExplicit))
                                {
                                  localObject3 = this.blocks.iterator();
                                  if (((Iterator)localObject3).hasNext()) {
                                    break label4430;
                                  }
                                }
                                for (j = 1;; j = 0)
                                {
                                  if (j != 0) {
                                    this.blocks.add(new DoEndBlock(this.function, ((Declaration)localObject2).begin, ((Declaration)localObject2).end + 1));
                                  }
                                  i += 1;
                                  break;
                                  localObject4 = (Block)((Iterator)localObject3).next();
                                  if ((!((Block)localObject4).contains(((Declaration)localObject2).begin)) || (((Block)localObject4).scopeEnd() != ((Declaration)localObject2).end)) {
                                    break label4376;
                                  }
                                }
                                localObject2 = (Block)((ListIterator)localObject1).next();
                                if ((this.skip[localObject2.begin] == 0) || (!(localObject2 instanceof Break))) {
                                  break label202;
                                }
                                ((ListIterator)localObject1).remove();
                                break label202;
                              }
                              label4519:
                              break label1300;
                              label4522:
                              i1 = k;
                              n = m;
                              break label1158;
                              label4533:
                              n = k;
                              i3 = m;
                              m = n;
                              break label1202;
                              label4548:
                              break label930;
                            }
                          }
                        }
                        label4551:
                        m = 0;
                        break label685;
                      }
                    }
                  }
                }
              }
            }
            label4557:
            k = i;
            bool1 = bool2;
            i = j;
            j = k;
          }
        }
      }
      label4586:
      bool2 = true;
    }
  }
  
  private void handleInitialDeclares(Output paramOutput)
  {
    ArrayList localArrayList = new ArrayList(this.declList.length);
    int i = this.params + (this.vararg & 0x1);
    if (i >= this.declList.length) {
      if (localArrayList.size() > 0)
      {
        paramOutput.print("local ");
        paramOutput.print(((Declaration)localArrayList.get(0)).name);
        i = 1;
      }
    }
    for (;;)
    {
      if (i >= localArrayList.size())
      {
        paramOutput.println();
        return;
        if (this.declList[i].begin == 0) {
          localArrayList.add(this.declList[i]);
        }
        i += 1;
        break;
      }
      paramOutput.print(", ");
      paramOutput.print(((Declaration)localArrayList.get(i)).name);
      i += 1;
    }
  }
  
  private boolean isMoveIntoTarget(int paramInt)
  {
    boolean bool = true;
    switch (this.code.op(paramInt))
    {
    default: 
      bool = false;
    }
    int i;
    do
    {
      do
      {
        do
        {
          return bool;
        } while ((this.r.isAssignable(this.code.A(paramInt), paramInt)) && (!this.r.isLocal(this.code.B(paramInt), paramInt)));
        return false;
      } while (!this.r.isLocal(this.code.A(paramInt), paramInt));
      return false;
      i = this.code.C(paramInt);
      if ((i & 0x100) != 0) {
        return false;
      }
    } while (!this.r.isLocal(i, paramInt));
    return false;
  }
  
  private boolean isStatement(int paramInt)
  {
    return isStatement(paramInt, -1);
  }
  
  private boolean isStatement(int paramInt1, int paramInt2)
  {
    switch (this.code.op(paramInt1))
    {
    case TESTSET: 
    default: 
      throw new IllegalStateException("Illegal opcode: " + this.code.op(paramInt1));
    case ADD: 
    case CALL: 
    case CLOSE: 
    case CONCAT: 
    case DIV: 
    case EQ: 
    case GETGLOBAL: 
    case GETTABUP: 
    case GETUPVAL: 
    case JMP: 
    case LE: 
    case LEN: 
    case LOADBOOL: 
    case LOADK: 
    case LOADKX: 
    case LOADNIL: 
    case LT: 
    case TAILCALL: 
    case TFORCALL: 
      return (this.r.isLocal(this.code.A(paramInt1), paramInt1)) || (this.code.A(paramInt1) == paramInt2);
    case CLOSURE: 
      paramInt2 = this.code.A(paramInt1);
      for (;;)
      {
        if (paramInt2 > this.code.B(paramInt1)) {
          return false;
        }
        if (this.r.isLocal(paramInt2, paramInt1)) {
          return true;
        }
        paramInt2 += 1;
      }
    case EXTRAARG: 
    case FORLOOP: 
    case FORPREP: 
    case MOD: 
    case SELF: 
    case SETGLOBAL: 
    case SETLIST: 
    case SETTABLE: 
    case SETTABUP: 
    case SUB: 
    case TFORLOOP: 
    case UNM: 
      return true;
    case GETTABLE: 
      return (this.r.isLocal(this.code.A(paramInt1), paramInt1)) || (this.r.isLocal(this.code.A(paramInt1) + 1, paramInt1));
    case MOVE: 
    case MUL: 
    case NEWTABLE: 
    case NOT: 
    case POW: 
    case SETUPVAL: 
      return false;
    case RETURN: 
      int k = this.code.A(paramInt1);
      j = this.code.C(paramInt1);
      if (j == 1) {
        return true;
      }
      i = j;
      if (j == 0) {
        i = this.registers - k + 1;
      }
      j = k;
      for (;;)
      {
        if (j >= k + i - 1)
        {
          if ((i != 2) || (k != paramInt2)) {
            break;
          }
          return true;
        }
        if (this.r.isLocal(j, paramInt1)) {
          return true;
        }
        j += 1;
      }
      return false;
    }
    int j = this.code.A(paramInt1);
    int i = this.code.B(paramInt1);
    paramInt2 = i;
    if (i == 0) {
      paramInt2 = this.registers - j + 1;
    }
    i = j;
    for (;;)
    {
      if (i >= j + paramInt2 - 1) {
        return false;
      }
      if (this.r.isLocal(i, paramInt1)) {
        return true;
      }
      i += 1;
    }
  }
  
  private List<Operation> processLine(int paramInt)
  {
    boolean bool2 = false;
    boolean bool1 = false;
    LinkedList localLinkedList = new LinkedList();
    int j = this.code.A(paramInt);
    int i = this.code.B(paramInt);
    int k = this.code.C(paramInt);
    int m = this.code.Bx(paramInt);
    Object localObject;
    switch (this.code.op(paramInt))
    {
    case TESTSET: 
    default: 
      throw new IllegalStateException("Illegal instruction: " + this.code.op(paramInt));
    case ADD: 
      localLinkedList.add(new RegisterSet(paramInt, j, this.r.getExpression(i, paramInt)));
    case MOD: 
    case MOVE: 
    case MUL: 
    case NEWTABLE: 
    case NOT: 
    case POW: 
    case SETLIST: 
    case SETTABLE: 
    case SETTABUP: 
    case SUB: 
    case UNM: 
      return localLinkedList;
    case CALL: 
      localLinkedList.add(new RegisterSet(paramInt, j, this.f.getConstantExpression(m)));
      return localLinkedList;
    case CLOSE: 
      if (i != 0) {}
      for (localObject = LBoolean.LTRUE;; localObject = LBoolean.LFALSE)
      {
        localLinkedList.add(new RegisterSet(paramInt, j, new ConstantExpression(new Constant((LObject)localObject), -1)));
        return localLinkedList;
      }
    case CLOSURE: 
      if (this.function.header.version.usesOldLoadNilEncoding()) {}
      while (j <= i)
      {
        localLinkedList.add(new RegisterSet(paramInt, j, Expression.NIL));
        j += 1;
        continue;
        i += j;
      }
    case CONCAT: 
      localLinkedList.add(new RegisterSet(paramInt, j, this.upvalues.getExpression(i)));
      return localLinkedList;
    case TFORCALL: 
      if ((i == 0) && ((k & 0x100) != 0))
      {
        localLinkedList.add(new RegisterSet(paramInt, j, this.f.getGlobalExpression(k & 0xFF)));
        return localLinkedList;
      }
      localLinkedList.add(new RegisterSet(paramInt, j, new TableReference(this.upvalues.getExpression(i), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case DIV: 
      localLinkedList.add(new RegisterSet(paramInt, j, this.f.getGlobalExpression(m)));
      return localLinkedList;
    case EQ: 
      localLinkedList.add(new RegisterSet(paramInt, j, new TableReference(this.r.getExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case FORLOOP: 
      localLinkedList.add(new UpvalueSet(paramInt, this.upvalues.getName(i), this.r.getExpression(j, paramInt)));
      return localLinkedList;
    case TFORLOOP: 
      if ((j == 0) && ((i & 0x100) != 0))
      {
        localLinkedList.add(new GlobalSet(paramInt, this.f.getGlobalName(i & 0xFF), this.r.getKExpression(k, paramInt)));
        return localLinkedList;
      }
      localLinkedList.add(new TableSet(paramInt, this.upvalues.getExpression(j), this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt), true, paramInt));
      return localLinkedList;
    case EXTRAARG: 
      localLinkedList.add(new GlobalSet(paramInt, this.f.getGlobalName(m), this.r.getExpression(j, paramInt)));
      return localLinkedList;
    case FORPREP: 
      localLinkedList.add(new TableSet(paramInt, this.r.getExpression(j, paramInt), this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt), true, paramInt));
      return localLinkedList;
    case GETGLOBAL: 
      localLinkedList.add(new RegisterSet(paramInt, j, new TableLiteral(i, k)));
      return localLinkedList;
    case GETTABLE: 
      localObject = this.r.getExpression(i, paramInt);
      localLinkedList.add(new RegisterSet(paramInt, j + 1, (Expression)localObject));
      localLinkedList.add(new RegisterSet(paramInt, j, new TableReference((Expression)localObject, this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case GETTABUP: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeADD(this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case GETUPVAL: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeSUB(this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case JMP: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeMUL(this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case LE: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeDIV(this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case LEN: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeMOD(this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case LOADBOOL: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makePOW(this.r.getKExpression(i, paramInt), this.r.getKExpression(k, paramInt))));
      return localLinkedList;
    case LOADK: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeUNM(this.r.getExpression(i, paramInt))));
      return localLinkedList;
    case LOADKX: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeNOT(this.r.getExpression(i, paramInt))));
      return localLinkedList;
    case LOADNIL: 
      localLinkedList.add(new RegisterSet(paramInt, j, Expression.makeLEN(this.r.getExpression(i, paramInt))));
      return localLinkedList;
    case LT: 
      localObject = this.r.getExpression(k, paramInt);
      for (;;)
      {
        m = k - 1;
        if (k <= i)
        {
          localLinkedList.add(new RegisterSet(paramInt, j, (Expression)localObject));
          return localLinkedList;
        }
        localObject = Expression.makeCONCAT(this.r.getExpression(m, paramInt), (Expression)localObject);
        k = m;
      }
    case RETURN: 
      if ((k < 3) && (k != 0))
      {
        m = i;
        if (i == 0) {
          m = this.registers - j;
        }
        if (k != 0) {
          break label2134;
        }
      }
      break;
    }
    label1538:
    label2134:
    for (i = this.registers - j + 1;; i = k)
    {
      localObject = this.r.getExpression(j, paramInt);
      Expression[] arrayOfExpression = new Expression[m - 1];
      k = j + 1;
      for (;;)
      {
        if (k > j + m - 1)
        {
          localObject = new FunctionCall((Expression)localObject, arrayOfExpression, bool1);
          if (i != 1) {
            break label1538;
          }
          localLinkedList.add(new CallOperation(paramInt, (FunctionCall)localObject));
          return localLinkedList;
          bool1 = true;
          break;
        }
        arrayOfExpression[(k - j - 1)] = this.r.getExpression(k, paramInt);
        k += 1;
      }
      if ((i == 2) && (!bool1))
      {
        localLinkedList.add(new RegisterSet(paramInt, j, (Expression)localObject));
        return localLinkedList;
      }
      k = j;
      while (k <= j + i - 2)
      {
        localLinkedList.add(new RegisterSet(paramInt, k, (Expression)localObject));
        k += 1;
      }
      if (i == 0) {
        i = this.registers - j;
      }
      for (;;)
      {
        localObject = this.r.getExpression(j, paramInt);
        arrayOfExpression = new Expression[i - 1];
        k = j + 1;
        for (;;)
        {
          if (k > j + i - 1)
          {
            localLinkedList.add(new ReturnOperation(paramInt, new FunctionCall((Expression)localObject, arrayOfExpression, true)));
            this.skip[(paramInt + 1)] = true;
            return localLinkedList;
          }
          arrayOfExpression[(k - j - 1)] = this.r.getExpression(k, paramInt);
          k += 1;
        }
        k = i;
        if (i == 0) {
          k = this.registers - j + 1;
        }
        localObject = new Expression[k - 1];
        i = j;
        for (;;)
        {
          if (i > j + k - 2)
          {
            localLinkedList.add(new ReturnOperation(paramInt, (Expression[])localObject));
            return localLinkedList;
          }
          localObject[(i - j)] = this.r.getExpression(i, paramInt);
          i += 1;
        }
        m = k;
        if (k == 0)
        {
          m = this.code.codepoint(paramInt + 1);
          this.skip[(paramInt + 1)] = true;
        }
        if (i == 0) {
          i = this.registers - j - 1;
        }
        for (;;)
        {
          localObject = this.r.getValue(j, paramInt);
          k = 1;
          while (k <= i)
          {
            localLinkedList.add(new TableSet(paramInt, (Expression)localObject, new ConstantExpression(new Constant((m - 1) * 50 + k), -1), this.r.getExpression(j + k, paramInt), false, this.r.getUpdated(j + k, paramInt)));
            k += 1;
          }
          localObject = this.functions[m];
          localLinkedList.add(new RegisterSet(paramInt, j, new ClosureExpression((LFunction)localObject, this.declList, paramInt + 1)));
          if (!this.function.header.version.usesInlineUpvalueDeclarations()) {
            break;
          }
          i = 0;
          while (i < ((LFunction)localObject).numUpvalues)
          {
            this.skip[(paramInt + 1 + i)] = true;
            i += 1;
          }
          bool1 = bool2;
          if (i != 2) {
            bool1 = true;
          }
          if (i == 1) {
            throw new IllegalStateException();
          }
          k = i;
          if (i == 0) {
            k = this.registers - j + 1;
          }
          localObject = new Vararg(k - 1, bool1);
          i = j;
          while (i <= j + k - 2)
          {
            localLinkedList.add(new RegisterSet(paramInt, i, (Expression)localObject));
            i += 1;
          }
          break;
        }
      }
    }
  }
  
  private Assignment processOperation(Operation paramOperation, int paramInt1, int paramInt2, Block paramBlock)
  {
    Object localObject2 = null;
    Object localObject1 = null;
    int i = 0;
    Statement localStatement = paramOperation.process(this.r, paramBlock);
    if (localStatement != null)
    {
      paramOperation = localObject2;
      if (!(localStatement instanceof Assignment)) {
        break label122;
      }
      localObject1 = (Assignment)localStatement;
      paramOperation = (Operation)localObject1;
      if (!((Assignment)localObject1).getFirstValue().isMultiple()) {
        break label122;
      }
      i = 1;
      paramOperation = (Operation)localObject1;
      localObject1 = paramOperation;
      if (paramOperation == null) {}
    }
    for (;;)
    {
      if ((paramInt2 >= paramBlock.end) || (!isMoveIntoTarget(paramInt2)))
      {
        localObject1 = paramOperation;
        if (i != 0)
        {
          localObject1 = paramOperation;
          if (!paramOperation.getFirstValue().isMultiple())
          {
            paramBlock.addStatement(localStatement);
            localObject1 = paramOperation;
          }
        }
        return localObject1;
        label122:
        paramBlock.addStatement(localStatement);
        break;
      }
      paramOperation.addFirst(getMoveIntoTargetTarget(paramInt2, paramInt1 + 1), getMoveIntoTargetValue(paramInt2, paramInt1 + 1));
      this.skip[paramInt2] = true;
      paramInt2 += 1;
    }
  }
  
  private void processSequence(int paramInt1, int paramInt2)
  {
    int i = 1;
    Stack localStack = new Stack();
    localStack.push((Block)this.blocks.get(0));
    this.skip = new boolean[paramInt2 + 1];
    if (paramInt1 > paramInt2) {
      return;
    }
    Object localObject1 = null;
    label45:
    if (((Block)localStack.peek()).end > paramInt1) {}
    label69:
    label327:
    label376:
    label398:
    label441:
    label609:
    label696:
    label790:
    label891:
    label897:
    for (Object localObject3 = localObject1;; localObject3 = localObject1)
    {
      if (localObject3 == null) {
        if ((i < this.blocks.size()) && (((Block)this.blocks.get(i)).begin <= paramInt1)) {}
      }
      for (;;)
      {
        Object localObject5 = (Block)localStack.peek();
        this.r.startLine(paramInt1);
        int j;
        if (this.skip[paramInt1] != 0)
        {
          localObject2 = this.r.getNewLocals(paramInt1);
          j = paramInt1;
          if (!((List)localObject2).isEmpty())
          {
            localObject1 = new Assignment();
            ((Assignment)localObject1).declare(((Declaration)((List)localObject2).get(0)).begin);
            localObject2 = ((List)localObject2).iterator();
          }
          for (;;)
          {
            if (!((Iterator)localObject2).hasNext())
            {
              ((Block)localStack.peek()).addStatement((Statement)localObject1);
              j = paramInt1;
              paramInt1 = j + 1;
              break;
              localObject1 = ((Block)localStack.pop()).process(this);
              if (localObject1 != null) {
                break label897;
              }
              break label45;
              localStack.push((Block)this.blocks.get(i));
              i += 1;
              break label69;
            }
            localObject3 = (Declaration)((Iterator)localObject2).next();
            ((Assignment)localObject1).addLast(new VariableTarget((Declaration)localObject3), this.r.getValue(((Declaration)localObject3).register, paramInt1));
          }
        }
        Object localObject2 = processLine(paramInt1);
        localObject1 = this.r;
        Object localObject4;
        if (localObject3 == null)
        {
          j = paramInt1;
          localObject4 = ((Registers)localObject1).getNewLocals(j);
          if (localObject3 != null) {
            break label790;
          }
          if (this.code.op(paramInt1) != Op.LOADNIL) {
            break label696;
          }
          localObject1 = new Assignment();
          localObject2 = ((List)localObject2).iterator();
          j = 0;
          if (((Iterator)localObject2).hasNext()) {
            break label609;
          }
          if (j <= 0) {
            break label891;
          }
          ((Block)localObject5).addStatement((Statement)localObject1);
        }
        for (;;)
        {
          if ((localObject1 != null) && (!((List)localObject4).isEmpty()))
          {
            ((Assignment)localObject1).declare(((Declaration)((List)localObject4).get(0)).begin);
            localObject2 = ((List)localObject4).iterator();
            if (((Iterator)localObject2).hasNext()) {}
          }
          else if ((localObject3 == null) && (localObject1 == null) && (!((List)localObject4).isEmpty()) && (this.code.op(paramInt1) != Op.FORPREP) && ((this.code.op(paramInt1) != Op.JMP) || (this.code.op(paramInt1 + 1 + this.code.sBx(paramInt1)) != this.tforTarget)))
          {
            localObject1 = new Assignment();
            ((Assignment)localObject1).declare(((Declaration)((List)localObject4).get(0)).begin);
            localObject2 = ((List)localObject4).iterator();
          }
          for (;;)
          {
            if (!((Iterator)localObject2).hasNext())
            {
              ((Block)localStack.peek()).addStatement((Statement)localObject1);
              j = paramInt1;
              if (localObject3 == null) {
                break;
              }
              j = paramInt1 - 1;
              break;
              j = paramInt1 - 1;
              break label327;
              Object localObject6 = (Operation)((Iterator)localObject2).next();
              RegisterSet localRegisterSet = (RegisterSet)localObject6;
              ((Operation)localObject6).process(this.r, (Block)localObject5);
              if (!this.r.isAssignable(localRegisterSet.register, localRegisterSet.line)) {
                break label376;
              }
              ((Assignment)localObject1).addLast(this.r.getTarget(localRegisterSet.register, localRegisterSet.line), localRegisterSet.value);
              j += 1;
              break label376;
              localObject6 = ((List)localObject2).iterator();
              localObject2 = null;
              for (;;)
              {
                if (!((Iterator)localObject6).hasNext())
                {
                  localObject1 = localObject2;
                  if (localObject2 == null) {
                    break;
                  }
                  localObject1 = localObject2;
                  if (!((Assignment)localObject2).getFirstValue().isMultiple()) {
                    break;
                  }
                  ((Block)localObject5).addStatement((Statement)localObject2);
                  localObject1 = localObject2;
                  break;
                }
                localObject1 = processOperation((Operation)((Iterator)localObject6).next(), paramInt1, paramInt1 + 1, (Block)localObject5);
                if (localObject1 != null) {
                  localObject2 = localObject1;
                }
              }
              localObject1 = processOperation((Operation)localObject3, paramInt1, paramInt1, (Block)localObject5);
              break label398;
              localObject5 = (Declaration)((Iterator)localObject2).next();
              ((Assignment)localObject1).addLast(new VariableTarget((Declaration)localObject5), this.r.getValue(((Declaration)localObject5).register, paramInt1 + 1));
              break label441;
            }
            localObject4 = (Declaration)((Iterator)localObject2).next();
            ((Assignment)localObject1).addLast(new VariableTarget((Declaration)localObject4), this.r.getValue(((Declaration)localObject4).register, paramInt1));
          }
        }
      }
    }
  }
  
  public void decompile()
  {
    this.r = new Registers(this.registers, this.length, this.declList, this.f);
    findReverseTargets();
    handleBranches(true);
    this.outer = handleBranches(false);
    processSequence(1, this.length);
  }
  
  public Branch popCompareSetCondition(Stack<Branch> paramStack, int paramInt)
  {
    Branch localBranch = (Branch)paramStack.pop();
    boolean bool = false;
    if (this.code.B(localBranch.begin) == 0) {
      bool = true;
    }
    localBranch.begin = paramInt;
    localBranch.end = paramInt;
    paramStack.push(localBranch);
    return _helper_popSetCondition(paramStack, bool, paramInt);
  }
  
  public Branch popCondition(Stack<Branch> paramStack)
  {
    Object localObject = (Branch)paramStack.pop();
    if (backup != null) {
      backup.push(localObject);
    }
    if ((localObject instanceof TestSetNode)) {
      throw new IllegalStateException();
    }
    int i = ((Branch)localObject).begin;
    if (this.code.op(((Branch)localObject).begin) == Op.JMP) {
      i += this.code.sBx(((Branch)localObject).begin) + 1;
    }
    for (;;)
    {
      if (paramStack.isEmpty()) {}
      Branch localBranch;
      do
      {
        do
        {
          return localObject;
          localBranch = (Branch)paramStack.peek();
        } while ((localBranch instanceof TestSetNode));
        if (localBranch.end == i)
        {
          localObject = new OrBranch(popCondition(paramStack).invert(), (Branch)localObject);
          break;
        }
      } while (localBranch.end != ((Branch)localObject).end);
      localObject = new AndBranch(popCondition(paramStack), (Branch)localObject);
    }
  }
  
  public Branch popSetCondition(Stack<Branch> paramStack, int paramInt)
  {
    paramStack.push(new AssignNode(paramInt - 1, paramInt, paramInt));
    return _helper_popSetCondition(paramStack, false, paramInt);
  }
  
  public void print()
  {
    print(new Output());
  }
  
  public void print(Output paramOutput)
  {
    handleInitialDeclares(paramOutput);
    this.outer.print(paramOutput);
  }
  
  public void print(OutputProvider paramOutputProvider)
  {
    print(new Output(paramOutputProvider));
  }
}
