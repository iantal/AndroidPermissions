package com.eden.sdk.unluac.decompile.expression;

import com.eden.sdk.unluac.decompile.Output;

public class BinaryExpression
  extends Expression
{
  private final int associativity;
  private final Expression left;
  private final String op;
  private final Expression right;
  
  public BinaryExpression(String paramString, Expression paramExpression1, Expression paramExpression2, int paramInt1, int paramInt2)
  {
    super(paramInt1);
    this.op = paramString;
    this.left = paramExpression1;
    this.right = paramExpression2;
    this.associativity = paramInt2;
  }
  
  private boolean leftGroup()
  {
    return (this.precedence > this.left.precedence) || ((this.precedence == this.left.precedence) && (this.associativity == 2));
  }
  
  private boolean rightGroup()
  {
    boolean bool2 = true;
    boolean bool1 = bool2;
    if (this.precedence <= this.right.precedence) {
      if (this.precedence == this.right.precedence)
      {
        bool1 = bool2;
        if (this.associativity == 1) {}
      }
      else
      {
        bool1 = false;
      }
    }
    return bool1;
  }
  
  public boolean beginsWithParen()
  {
    return (leftGroup()) || (this.left.beginsWithParen());
  }
  
  public int getConstantIndex()
  {
    return Math.max(this.left.getConstantIndex(), this.right.getConstantIndex());
  }
  
  public void print(Output paramOutput)
  {
    boolean bool1 = leftGroup();
    boolean bool2 = rightGroup();
    if (bool1) {
      paramOutput.print("(");
    }
    this.left.print(paramOutput);
    if (bool1) {
      paramOutput.print(")");
    }
    paramOutput.print(" ");
    paramOutput.print(this.op);
    paramOutput.print(" ");
    if (bool2) {
      paramOutput.print("(");
    }
    this.right.print(paramOutput);
    if (bool2) {
      paramOutput.print(")");
    }
  }
}
