package com.qbiki.scapi;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.HTTPUtil;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SCApi
{
  public static final int ACCESS_LEVEL_ADMIN = 0;
  public static final int ACCESS_LEVEL_APP_ACCESS_CODE = 40;
  public static final int ACCESS_LEVEL_APP_ID = 50;
  public static final int ACCESS_LEVEL_EMPLOYEE = 10;
  public static final int ACCESS_LEVEL_NONE = -1;
  public static final int ACCESS_LEVEL_PUBLISHER = 20;
  public static final int ACCESS_LEVEL_USER = 30;
  private static final boolean DEBUG = false;
  private static final boolean DEBUG_REQUESTS = false;
  public static final String IDENTITY_PROVIDER_FACEBOOK = "facebook";
  public static final String IDENTITY_PROVIDER_GOOGLE = "google";
  private static final String METHOD_GET = "GET";
  private static final String METHOD_POST = "POST";
  private static final int NETWORK_TIMEOUT = 30000;
  private static final String PREFS_FILE_NAME = "com.qbiki.scapi.SCApi.state";
  private static final String TAG = "SCApi";
  private static SCApi mInstance;
  @SuppressLint({"SimpleDateFormat"})
  private static SimpleDateFormat rfc3339UTCFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
  private int mAccessLevel = -1;
  private String mApiKey;
  private String mAuthPassword;
  private String mAuthToken;
  private String mAuthUsername;
  private Context mContext = null;
  private boolean mInitialized = false;
  private String mPublisherAccountPublisherId;
  private String mServerRootUrl;
  private AppUser mSignedInAppUser;
  
  static
  {
    rfc3339UTCFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
  }
  
  private SCApi() {}
  
  private void authenticate()
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    String str1;
    if (App.isPreviewer)
    {
      str1 = this.mAuthUsername;
      if (!App.isPreviewer) {
        break label35;
      }
    }
    label35:
    for (String str2 = this.mAuthPassword;; str2 = null)
    {
      authenticate(str1, str2);
      return;
      str1 = null;
      break;
    }
  }
  
  private void authenticateIfNeeded()
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    if (this.mAuthToken == null) {
      authenticate();
    }
  }
  
  private void authenticateRequest(HttpURLConnection paramHttpURLConnection)
  {
    paramHttpURLConnection.setRequestProperty("Authorization", "SCAuth authToken=" + this.mAuthToken);
  }
  
  private String convertStateToJson()
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("authToken", this.mAuthToken);
      localJSONObject.put("accessLevel", this.mAccessLevel);
      localJSONObject.put("publisherAccountPublisherId", this.mPublisherAccountPublisherId);
      localJSONObject.put("authUsername", this.mAuthUsername);
      localJSONObject.put("authPassword", this.mAuthPassword);
      if (this.mSignedInAppUser != null) {
        localJSONObject.put("signedInAppUser", this.mSignedInAppUser.toJsonObject());
      }
      return localJSONObject.toString();
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        Log.e("SCApi", "Error converting to JSON: " + localJSONException);
      }
    }
  }
  
  private String getFullUrl(String paramString, Map<String, String> paramMap)
  {
    String str = this.mServerRootUrl + paramString;
    paramMap = HTTPUtil.getUrlEncodedParameterString(paramMap);
    paramString = str;
    if (paramMap.length() > 0) {
      paramString = str + "?" + paramMap;
    }
    return paramString;
  }
  
  public static SCApi getInstance()
  {
    if (mInstance == null) {
      mInstance = new SCApi();
    }
    while (mInstance.mInitialized) {
      return mInstance;
    }
    throw new IllegalStateException("You must call SCApi.init(Context) exactly after first SCApi.getInstance() call: SCApi.getInstance().init(Context)");
  }
  
  private int getIntIfExists(JSONObject paramJSONObject, String paramString, int paramInt)
    throws JSONException
  {
    if (paramJSONObject.has(paramString)) {
      paramInt = paramJSONObject.getInt(paramString);
    }
    return paramInt;
  }
  
  public static String getServerRequestProtocol(String paramString)
  {
    String str = "http";
    if ((paramString.equals("seattleclouds.com")) || (paramString.equals("dev.seattleclouds.com"))) {
      str = "https";
    }
    return str;
  }
  
  private String getStringIfExists(JSONObject paramJSONObject, String paramString1, String paramString2)
    throws JSONException
  {
    if (paramJSONObject.has(paramString1)) {
      paramString2 = paramJSONObject.getString(paramString1);
    }
    return paramString2;
  }
  
  private boolean isErrorCode(int paramInt)
  {
    return (paramInt < 200) || (paramInt >= 400);
  }
  
  private void loadPersistedState()
  {
    readStateFromJson(this.mContext.getSharedPreferences("com.qbiki.scapi.SCApi.state", 0).getString("settings", ""));
  }
  
  public static Date parseUtcRfcDate(String paramString)
    throws ParseException
  {
    return rfc3339UTCFormat.parse(paramString);
  }
  
  private JSONObject performAuthenticatedRequest(String paramString1, String paramString2, Map<String, String> paramMap1, Map<String, String> paramMap2)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    authenticateIfNeeded();
    try
    {
      JSONObject localJSONObject = performRequest(paramString1, paramString2, paramMap1, paramMap2);
      return localJSONObject;
    }
    catch (SCApiException localSCApiException)
    {
      Object localObject = localSCApiException.getDetails();
      int i = ((JSONObject)localObject).getInt("code");
      localObject = ((JSONObject)localObject).getJSONArray("errors").getJSONObject(0).getString("reason");
      if ((i == 401) && ((((String)localObject).equals("invalidAuthToken")) || (((String)localObject).equals("authTokenExpired"))))
      {
        authenticate();
        return performRequest(paramString1, paramString2, paramMap1, paramMap2);
      }
      throw localSCApiException;
    }
  }
  
  /* Error */
  private JSONObject performRequest(String paramString1, String paramString2, Map<String, String> paramMap1, Map<String, String> paramMap2)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    // Byte code:
    //   0: new 310	java/net/URL
    //   3: dup
    //   4: aload_0
    //   5: aload_2
    //   6: aload_3
    //   7: invokespecial 312	com/qbiki/scapi/SCApi:getFullUrl	(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String;
    //   10: invokespecial 313	java/net/URL:<init>	(Ljava/lang/String;)V
    //   13: invokevirtual 317	java/net/URL:openConnection	()Ljava/net/URLConnection;
    //   16: checkcast 141	java/net/HttpURLConnection
    //   19: astore_2
    //   20: aload_2
    //   21: sipush 30000
    //   24: invokevirtual 321	java/net/HttpURLConnection:setReadTimeout	(I)V
    //   27: aload_2
    //   28: sipush 30000
    //   31: invokevirtual 324	java/net/HttpURLConnection:setConnectTimeout	(I)V
    //   34: aload_0
    //   35: aload_2
    //   36: invokespecial 326	com/qbiki/scapi/SCApi:authenticateRequest	(Ljava/net/HttpURLConnection;)V
    //   39: aload_1
    //   40: ldc 35
    //   42: invokevirtual 240	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   45: ifeq +18 -> 63
    //   48: aload_2
    //   49: ldc_w 328
    //   52: ldc_w 330
    //   55: invokevirtual 145	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   58: aload_2
    //   59: iconst_1
    //   60: invokevirtual 334	java/net/HttpURLConnection:setDoOutput	(Z)V
    //   63: aload_2
    //   64: iconst_1
    //   65: invokevirtual 337	java/net/HttpURLConnection:setDoInput	(Z)V
    //   68: aload_2
    //   69: aload_1
    //   70: invokevirtual 340	java/net/HttpURLConnection:setRequestMethod	(Ljava/lang/String;)V
    //   73: aload_2
    //   74: invokevirtual 343	java/net/HttpURLConnection:connect	()V
    //   77: aload_1
    //   78: ldc 35
    //   80: invokevirtual 240	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   83: ifeq +13 -> 96
    //   86: aload_0
    //   87: aload_2
    //   88: aload 4
    //   90: invokestatic 200	com/qbiki/util/HTTPUtil:getUrlEncodedParameterString	(Ljava/util/Map;)Ljava/lang/String;
    //   93: invokespecial 347	com/qbiki/scapi/SCApi:writeBody	(Ljava/net/HttpURLConnection;Ljava/lang/String;)V
    //   96: aload_0
    //   97: aload_2
    //   98: invokevirtual 350	java/net/HttpURLConnection:getResponseCode	()I
    //   101: invokespecial 352	com/qbiki/scapi/SCApi:isErrorCode	(I)Z
    //   104: ifeq +51 -> 155
    //   107: aload_2
    //   108: invokevirtual 356	java/net/HttpURLConnection:getErrorStream	()Ljava/io/InputStream;
    //   111: astore_1
    //   112: aload_1
    //   113: ifnull +50 -> 163
    //   116: aload_1
    //   117: invokestatic 362	com/qbiki/util/DataUtil:readString	(Ljava/io/InputStream;)Ljava/lang/String;
    //   120: astore_1
    //   121: aload_1
    //   122: ifnull +10 -> 132
    //   125: aload_1
    //   126: invokevirtual 206	java/lang/String:length	()I
    //   129: ifne +50 -> 179
    //   132: new 102	com/qbiki/scapi/HttpResponseException
    //   135: dup
    //   136: aload_2
    //   137: invokevirtual 350	java/net/HttpURLConnection:getResponseCode	()I
    //   140: aload_2
    //   141: invokevirtual 365	java/net/HttpURLConnection:getResponseMessage	()Ljava/lang/String;
    //   144: invokespecial 368	com/qbiki/scapi/HttpResponseException:<init>	(ILjava/lang/String;)V
    //   147: athrow
    //   148: astore_1
    //   149: aload_2
    //   150: invokevirtual 371	java/net/HttpURLConnection:disconnect	()V
    //   153: aload_1
    //   154: athrow
    //   155: aload_2
    //   156: invokevirtual 374	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   159: astore_1
    //   160: goto -48 -> 112
    //   163: new 102	com/qbiki/scapi/HttpResponseException
    //   166: dup
    //   167: aload_2
    //   168: invokevirtual 350	java/net/HttpURLConnection:getResponseCode	()I
    //   171: aload_2
    //   172: invokevirtual 365	java/net/HttpURLConnection:getResponseMessage	()Ljava/lang/String;
    //   175: invokespecial 368	com/qbiki/scapi/HttpResponseException:<init>	(ILjava/lang/String;)V
    //   178: athrow
    //   179: new 148	org/json/JSONObject
    //   182: dup
    //   183: aload_1
    //   184: invokespecial 375	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   187: astore_1
    //   188: aload_0
    //   189: aload_2
    //   190: invokevirtual 350	java/net/HttpURLConnection:getResponseCode	()I
    //   193: invokespecial 352	com/qbiki/scapi/SCApi:isErrorCode	(I)Z
    //   196: ifeq +60 -> 256
    //   199: aload_1
    //   200: ldc_w 377
    //   203: invokevirtual 380	org/json/JSONObject:getJSONObject	(Ljava/lang/String;)Lorg/json/JSONObject;
    //   206: astore_1
    //   207: new 104	com/qbiki/scapi/SCApiException
    //   210: dup
    //   211: new 128	java/lang/StringBuilder
    //   214: dup
    //   215: invokespecial 129	java/lang/StringBuilder:<init>	()V
    //   218: aload_1
    //   219: ldc_w 289
    //   222: invokevirtual 230	org/json/JSONObject:getInt	(Ljava/lang/String;)I
    //   225: invokevirtual 383	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   228: ldc_w 385
    //   231: invokevirtual 135	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   234: aload_1
    //   235: ldc_w 387
    //   238: invokevirtual 249	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   241: invokevirtual 135	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   244: invokevirtual 139	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   247: aload_1
    //   248: invokespecial 390	com/qbiki/scapi/SCApiException:<init>	(Ljava/lang/String;Lorg/json/JSONObject;)V
    //   251: athrow
    //   252: astore_1
    //   253: goto -104 -> 149
    //   256: aload_2
    //   257: invokevirtual 371	java/net/HttpURLConnection:disconnect	()V
    //   260: aload_1
    //   261: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	262	0	this	SCApi
    //   0	262	1	paramString1	String
    //   0	262	2	paramString2	String
    //   0	262	3	paramMap1	Map<String, String>
    //   0	262	4	paramMap2	Map<String, String>
    // Exception table:
    //   from	to	target	type
    //   20	63	148	finally
    //   63	96	148	finally
    //   96	112	148	finally
    //   116	121	148	finally
    //   125	132	148	finally
    //   132	148	148	finally
    //   155	160	148	finally
    //   163	179	148	finally
    //   179	188	148	finally
    //   188	252	252	finally
  }
  
  private void persistState()
  {
    SharedPreferences.Editor localEditor = this.mContext.getSharedPreferences("com.qbiki.scapi.SCApi.state", 0).edit();
    localEditor.putString("settings", convertStateToJson());
    localEditor.commit();
  }
  
  private void readStateFromJson(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {}
    for (;;)
    {
      return;
      try
      {
        paramString = new JSONObject(paramString);
        this.mAuthToken = getStringIfExists(paramString, "authToken", null);
        this.mAccessLevel = getIntIfExists(paramString, "accessLevel", -1);
        this.mPublisherAccountPublisherId = getStringIfExists(paramString, "publisherAccountPublisherId", null);
        this.mAuthUsername = getStringIfExists(paramString, "authUsername", null);
        this.mAuthPassword = getStringIfExists(paramString, "authPassword", null);
        if (paramString.has("signedInAppUser"))
        {
          this.mSignedInAppUser = AppUser.fromJsonObject(paramString.getJSONObject("signedInAppUser"));
          return;
        }
      }
      catch (JSONException paramString)
      {
        Log.e("SCApi", "Error parsing JSON: " + paramString);
      }
    }
  }
  
  private String urlEncode(String paramString)
  {
    try
    {
      String str = URLEncoder.encode(paramString, "UTF-8");
      return str;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException) {}
    return paramString;
  }
  
  private void writeBody(HttpURLConnection paramHttpURLConnection, String paramString)
    throws IOException
  {
    Object localObject = null;
    try
    {
      paramHttpURLConnection = new OutputStreamWriter(new BufferedOutputStream(paramHttpURLConnection.getOutputStream()));
      if (paramHttpURLConnection == null) {
        break label50;
      }
    }
    finally
    {
      try
      {
        paramHttpURLConnection.write(paramString);
        paramHttpURLConnection.flush();
        if (paramHttpURLConnection != null) {
          paramHttpURLConnection.close();
        }
        return;
      }
      finally {}
      paramString = finally;
      paramHttpURLConnection = localObject;
    }
    paramHttpURLConnection.close();
    label50:
    throw paramString;
  }
  
  public JSONObject appUserSignIn(String paramString1, String paramString2, String paramString3, String paramString4)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    this.mSignedInAppUser = null;
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    localHashMap.put("appOwnerUsername", App.username);
    localHashMap.put("appId", App.appId);
    localHashMap.put("provider", paramString1);
    localHashMap.put("providerAccountId", paramString2);
    localHashMap.put("providerUserAuthToken", paramString3);
    localHashMap.put("displayName", paramString4);
    paramString3 = performAuthenticatedRequest("POST", "appUsers/signIn", null, localHashMap);
    this.mSignedInAppUser = new AppUser();
    this.mSignedInAppUser.setId(paramString3.getString("userId"));
    this.mSignedInAppUser.setDisplayName(paramString4);
    this.mSignedInAppUser.setProvider(paramString1);
    this.mSignedInAppUser.setProviderAccountId(paramString2);
    persistState();
    return paramString3;
  }
  
  public void appUserSignOut()
  {
    this.mSignedInAppUser = null;
    persistState();
  }
  
  public JSONObject authenticate(String paramString1, String paramString2)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    localHashMap.put("apiKey", getApiKey());
    localHashMap.put("appOwnerUsername", App.originalUsername);
    localHashMap.put("appId", App.originalAppId);
    if ((paramString1 != null) && (paramString2 != null))
    {
      localHashMap.put("username", paramString1);
      localHashMap.put("password", paramString2);
    }
    paramString1 = performRequest("POST", "auth/tokens", null, localHashMap);
    this.mAuthToken = paramString1.getString("authToken");
    this.mAccessLevel = paramString1.getInt("accessLevel");
    this.mPublisherAccountPublisherId = getStringIfExists(paramString1, "publisherAccountPublisherId", null);
    this.mAuthUsername = getStringIfExists(paramString1, "username", null);
    this.mAuthPassword = paramString2;
    persistState();
    return paramString1;
  }
  
  public boolean canLogInAsAnotherUser()
  {
    if ((this.mAccessLevel >= 0) && (this.mAccessLevel <= 10)) {}
    while ((this.mAccessLevel == 20) && (this.mPublisherAccountPublisherId.equals(App.publisherId))) {
      return true;
    }
    return false;
  }
  
  public String getApiKey()
  {
    return this.mApiKey;
  }
  
  public JSONObject getAppResourcesSize(String paramString1, String paramString2)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    paramString1 = "users/" + urlEncode(paramString1) + "/apps/" + urlEncode(paramString2);
    paramString2 = new HashMap();
    paramString2.put("publisherId", App.publisherId);
    paramString2.put("fields", "resourcesSize");
    return performAuthenticatedRequest("GET", paramString1, paramString2, null);
  }
  
  public AppUser getSignedInAppUser()
  {
    return this.mSignedInAppUser;
  }
  
  public void init(Context paramContext)
  {
    this.mContext = paramContext.getApplicationContext();
    this.mServerRootUrl = (getServerRequestProtocol(App.serverHostName) + "://" + App.serverHostName + "/api/v1/");
    this.mAuthToken = null;
    this.mSignedInAppUser = null;
    loadPersistedState();
    this.mInitialized = true;
  }
  
  public JSONObject listAppsForUsername(String paramString)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    if (this.mAccessLevel == 40) {}
    for (String str = this.mAuthPassword;; str = "")
    {
      paramString = "users/" + urlEncode(paramString) + "/apps";
      HashMap localHashMap = new HashMap();
      localHashMap.put("publisherId", App.publisherId);
      localHashMap.put("accessCode", str);
      return performAuthenticatedRequest("GET", paramString, localHashMap, null);
    }
  }
  
  public JSONObject listFacebookFeeds(String paramString)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    paramString = "facebookFeeds/feeds/" + paramString;
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    return performAuthenticatedRequest("GET", paramString, localHashMap, null);
  }
  
  public JSONObject listMessengerConversations()
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    String str = "users/" + App.username + "/apps/" + App.appId + "/messenger/conversations";
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    return performAuthenticatedRequest("GET", str, localHashMap, null);
  }
  
  public JSONObject listMessengerMessages(String paramString)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    paramString = "messenger/conversations/" + paramString + "/messages";
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    return performAuthenticatedRequest("GET", paramString, localHashMap, null);
  }
  
  public JSONObject postFacebookFeedsUser(String paramString1, String paramString2)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    paramString1 = "users/" + App.username + "/apps/" + App.appId + "/facebookFeeds/users/" + paramString1;
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    localHashMap.put("fbAppId", paramString2);
    return performAuthenticatedRequest("POST", paramString1, null, localHashMap);
  }
  
  public JSONObject postMessengerMessage(String paramString1, String paramString2)
    throws IOException, JSONException, HttpResponseException, SCApiException
  {
    String str = "messenger/conversations/" + paramString1 + "/messages";
    HashMap localHashMap = new HashMap();
    if (getSignedInAppUser() != null) {}
    for (paramString1 = getSignedInAppUser().getId();; paramString1 = null)
    {
      localHashMap.put("userId", paramString1);
      localHashMap.put("text", paramString2);
      return performAuthenticatedRequest("POST", str, null, localHashMap);
    }
  }
  
  public void removeAuthenticationAndCleanSettings()
  {
    this.mAuthToken = null;
    this.mAccessLevel = -1;
    this.mPublisherAccountPublisherId = null;
    this.mAuthUsername = null;
    this.mAuthPassword = null;
    this.mSignedInAppUser = null;
    persistState();
  }
  
  public void setApiKey(String paramString)
  {
    this.mApiKey = paramString;
  }
}
