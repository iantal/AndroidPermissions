package com.qbiki.widget;

import android.content.Context;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.BaseSavedState;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TabHost;
import android.widget.TabWidget;
import android.widget.TextView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.NavigationItem;
import com.qbiki.seattleclouds.NavigationSettings;
import com.qbiki.util.DeviceUtil;
import com.viewpagerindicator.CirclePageIndicator;
import com.viewpagerindicator.LinePageIndicator;
import com.viewpagerindicator.PageIndicator;
import java.util.List;

public class SCTabWidget
  extends TabWidget
{
  private static final boolean LOGV = false;
  private static final int MAX_TAB_INDICATOR_WIDTH = 85;
  private static final int PAGE_INDICATOR_HEIGHT = 10;
  private static final int TABLET_SMALLEST_SCREEN_DIMENSION = 500;
  private static final String TAG = "SCTabWidget";
  private ImageView mBackgroundImageView;
  private Context mContext;
  private int mCurrentPage = 0;
  private int mCurrentTab = 0;
  private float mGlobalTextSize;
  private int mGlobalTextStyle;
  private Typeface mGlobalTypeface;
  private boolean mIsTablet = false;
  private List<NavigationItem> mNavigationItems;
  private NavigationSettings mNavigationSettings;
  private int mNextViewId = Integer.MAX_VALUE;
  private int mPageCount;
  private RelativeLayout mRootLayout;
  private boolean mStretchTabsHorizontally = true;
  private int mTabCount = 5;
  private TabHost mTabHost;
  private TabPagerAdapter mTabPagerAdapter;
  private int mTabsPerPage = 5;
  private ViewPager mViewPager;
  
  public SCTabWidget(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    init(paramContext, null, null);
  }
  
  public SCTabWidget(Context paramContext, NavigationSettings paramNavigationSettings, List<NavigationItem> paramList)
  {
    super(paramContext);
    init(paramContext, paramNavigationSettings, paramList);
  }
  
  private int getFinalWidgetHeight()
  {
    if ((this.mNavigationItems == null) || (this.mNavigationSettings == null)) {
      return 0;
    }
    if (this.mPageCount > 1) {
      return this.mNavigationSettings.getNavigationItemsHeight() + 10;
    }
    return this.mNavigationSettings.getNavigationItemsHeight();
  }
  
  private int getNextViewId()
  {
    int i = this.mNextViewId - 1;
    this.mNextViewId = i;
    return i;
  }
  
  private View getPageIndicator(int paramInt, ViewPager paramViewPager)
  {
    Object localObject = null;
    if (paramInt == 0)
    {
      localObject = new CirclePageIndicator(this.mContext)
      {
        public boolean onTouchEvent(MotionEvent paramAnonymousMotionEvent)
        {
          return false;
        }
      };
      paramInt = DeviceUtil.dpToPx(this.mContext, 2.0F);
      ((CirclePageIndicator)localObject).setPadding(0, paramInt, 0, paramInt);
      ((CirclePageIndicator)localObject).setSnap(true);
    }
    for (;;)
    {
      ((PageIndicator)localObject).setViewPager(paramViewPager);
      return (View)localObject;
      if (paramInt == 1)
      {
        localObject = new LinePageIndicator(this.mContext)
        {
          public boolean onTouchEvent(MotionEvent paramAnonymousMotionEvent)
          {
            return false;
          }
        };
        ((LinePageIndicator)localObject).setPadding(0, DeviceUtil.dpToPx(this.mContext, 2.0F), 0, DeviceUtil.dpToPx(this.mContext, 4.0F));
      }
    }
  }
  
  private int getTabCountForPage(int paramInt)
  {
    int j = this.mTabsPerPage;
    int i = j;
    if (paramInt == this.mPageCount - 1)
    {
      paramInt = this.mTabCount % this.mTabsPerPage;
      i = j;
      if (paramInt != 0) {
        i = paramInt;
      }
    }
    return i;
  }
  
  private int getTabNumber(int paramInt1, int paramInt2)
  {
    return this.mTabsPerPage * paramInt1 + paramInt2;
  }
  
  private void init(Context paramContext, NavigationSettings paramNavigationSettings, List<NavigationItem> paramList)
  {
    this.mContext = paramContext;
    this.mNavigationSettings = paramNavigationSettings;
    this.mNavigationItems = paramList;
    this.mRootLayout = new RelativeLayout(this.mContext);
    this.mRootLayout.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));
    addView(this.mRootLayout, 0, new LinearLayout.LayoutParams(-1, -1));
    if (this.mNavigationSettings == null) {}
    do
    {
      return;
      setLayoutParams(new LinearLayout.LayoutParams(-1, DeviceUtil.dpToPx(this.mContext, this.mNavigationSettings.getNavigationItemsHeight()), 0.0F));
    } while (this.mNavigationItems == null);
    refreshLayout();
  }
  
  private void refreshLayout()
  {
    this.mRootLayout.removeAllViews();
    if (this.mNavigationSettings == null) {}
    Object localObject;
    do
    {
      return;
      this.mRootLayout.setBackgroundColor(this.mNavigationSettings.getBackgroundColor());
      localObject = App.getScaledDrawableResource(this.mNavigationSettings.getBackgroundImage());
      if (localObject != null)
      {
        this.mBackgroundImageView = new ImageView(this.mContext);
        this.mBackgroundImageView.setScaleType(ImageView.ScaleType.MATRIX);
        this.mBackgroundImageView.setImageMatrix(new Matrix());
        this.mBackgroundImageView.setImageDrawable((Drawable)localObject);
        localObject = new RelativeLayout.LayoutParams(-1, -1);
        this.mBackgroundImageView.setLayoutParams((ViewGroup.LayoutParams)localObject);
        this.mRootLayout.addView(this.mBackgroundImageView);
      }
      this.mGlobalTypeface = App.createTypeface(this.mNavigationSettings.getTextFont());
      this.mGlobalTextStyle = this.mNavigationSettings.getTextStyle();
      this.mGlobalTextSize = this.mNavigationSettings.getTextSize();
    } while (this.mNavigationItems == null);
    int i = DeviceUtil.getSmallestScreenDimension(this.mContext);
    if (DeviceUtil.pxToDp(this.mContext, i) >= 500)
    {
      this.mIsTablet = true;
      this.mStretchTabsHorizontally = false;
    }
    if (this.mIsTablet) {}
    for (i = this.mNavigationSettings.getTabsPerPageForTablet();; i = this.mNavigationSettings.getTabsPerPageForPhone())
    {
      this.mTabsPerPage = i;
      this.mTabCount = this.mNavigationItems.size();
      this.mPageCount = (this.mTabCount / this.mTabsPerPage);
      if (this.mTabCount % this.mTabsPerPage != 0) {
        this.mPageCount += 1;
      }
      localObject = new LinearLayout.LayoutParams(-1, DeviceUtil.dpToPx(this.mContext, getFinalWidgetHeight()), 0.0F);
      ((LinearLayout.LayoutParams)localObject).bottomMargin = (DeviceUtil.dpToPx(this.mContext, this.mNavigationSettings.getContentOverlap()) * -1);
      setLayoutParams((ViewGroup.LayoutParams)localObject);
      this.mViewPager = new ViewPager(this.mContext);
      this.mTabPagerAdapter = new TabPagerAdapter(null);
      this.mViewPager.setAdapter(this.mTabPagerAdapter);
      localObject = new RelativeLayout.LayoutParams(-1, -1);
      this.mViewPager.setLayoutParams((ViewGroup.LayoutParams)localObject);
      this.mRootLayout.addView(this.mViewPager);
      if (this.mPageCount <= 1) {
        break;
      }
      localObject = getPageIndicator(1, this.mViewPager);
      RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-1, -2);
      localLayoutParams.addRule(12);
      ((View)localObject).setLayoutParams(localLayoutParams);
      this.mRootLayout.addView((View)localObject);
      return;
    }
  }
  
  public void addView(View paramView)
  {
    super.addView(paramView);
    paramView.setVisibility(8);
  }
  
  public TabHost getTabHost()
  {
    return this.mTabHost;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    if (this.mBackgroundImageView != null)
    {
      paramInt1 = this.mBackgroundImageView.getDrawable().getIntrinsicWidth();
      Matrix localMatrix = this.mBackgroundImageView.getImageMatrix();
      localMatrix.setTranslate((int)((getMeasuredWidth() - paramInt1) * 0.5F + 0.5F), 0.0F);
      this.mBackgroundImageView.setImageMatrix(localMatrix);
    }
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    this.mCurrentPage = paramParcelable.currentPage;
    this.mCurrentTab = paramParcelable.currentTab;
    this.mViewPager.setCurrentItem(this.mCurrentPage);
    this.mTabPagerAdapter.updateSelectionForTab(this.mCurrentTab);
  }
  
  public Parcelable onSaveInstanceState()
  {
    SavedState localSavedState = new SavedState(super.onSaveInstanceState());
    localSavedState.currentPage = this.mViewPager.getCurrentItem();
    localSavedState.currentTab = this.mCurrentTab;
    return localSavedState;
  }
  
  public void setTabHost(TabHost paramTabHost)
  {
    this.mTabHost = paramTabHost;
  }
  
  private class ClickListener
    implements View.OnClickListener
  {
    private int mPageNumber;
    private int mTabOnPageNumber;
    
    public ClickListener(int paramInt1, int paramInt2)
    {
      this.mPageNumber = paramInt1;
      this.mTabOnPageNumber = paramInt2;
    }
    
    public void onClick(View paramView)
    {
      int i = SCTabWidget.this.mCurrentTab;
      SCTabWidget.access$102(SCTabWidget.this, SCTabWidget.this.getTabNumber(this.mPageNumber, this.mTabOnPageNumber));
      if (i != SCTabWidget.this.mCurrentTab)
      {
        SCTabWidget.this.mTabPagerAdapter.updateSelectionForTab(i);
        SCTabWidget.this.mTabPagerAdapter.updateSelectionForTab(SCTabWidget.this.mCurrentTab);
      }
      SCTabWidget.this.mTabHost.setCurrentTab(SCTabWidget.this.mCurrentTab);
    }
  }
  
  static class SavedState
    extends View.BaseSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator()
    {
      public SCTabWidget.SavedState createFromParcel(Parcel paramAnonymousParcel)
      {
        return new SCTabWidget.SavedState(paramAnonymousParcel, null);
      }
      
      public SCTabWidget.SavedState[] newArray(int paramAnonymousInt)
      {
        return new SCTabWidget.SavedState[paramAnonymousInt];
      }
    };
    int currentPage;
    int currentTab;
    
    private SavedState(Parcel paramParcel)
    {
      super();
      this.currentPage = paramParcel.readInt();
      this.currentTab = paramParcel.readInt();
    }
    
    SavedState(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeInt(this.currentPage);
      paramParcel.writeInt(this.currentTab);
    }
  }
  
  private class TabPagerAdapter
    extends PagerAdapter
  {
    private SparseArray<View> tabIndicators = new SparseArray(SCTabWidget.this.mTabCount);
    
    private TabPagerAdapter() {}
    
    public void destroyItem(View paramView, int paramInt, Object paramObject)
    {
      ((ViewPager)paramView).removeView((LinearLayout)paramObject);
      int j = SCTabWidget.this.getTabCountForPage(paramInt);
      int i = 0;
      while (i < j)
      {
        int k = SCTabWidget.this.getTabNumber(paramInt, i);
        this.tabIndicators.remove(k);
        i += 1;
      }
    }
    
    public int getCount()
    {
      return SCTabWidget.this.mPageCount;
    }
    
    public Object instantiateItem(View paramView, int paramInt)
    {
      LinearLayout localLinearLayout = new LinearLayout(SCTabWidget.this.mContext);
      localLinearLayout.setOrientation(0);
      int j = SCTabWidget.this.getTabCountForPage(paramInt);
      Object localObject1;
      if (!SCTabWidget.this.mStretchTabsHorizontally)
      {
        localObject1 = new View(SCTabWidget.this.mContext);
        ((View)localObject1).setBackgroundColor(0);
        localLinearLayout.addView((View)localObject1, new LinearLayout.LayoutParams(-1, -1, 1.0F));
      }
      int i = 0;
      while (i < j)
      {
        RelativeLayout localRelativeLayout = (RelativeLayout)LayoutInflater.from(SCTabWidget.this.mContext).inflate(2130903234, localLinearLayout, false);
        localRelativeLayout.setId(SCTabWidget.this.getNextViewId());
        if (!SCTabWidget.this.mStretchTabsHorizontally) {
          localRelativeLayout.setLayoutParams(new LinearLayout.LayoutParams(DeviceUtil.dpToPx(SCTabWidget.this.mContext, 85.0F), -1, 0.0F));
        }
        int k = SCTabWidget.this.getTabNumber(paramInt, i);
        this.tabIndicators.put(k, localRelativeLayout);
        TextView localTextView = (TextView)localRelativeLayout.findViewById(2131100251);
        if (SCTabWidget.this.mPageCount > 1)
        {
          localObject1 = (RelativeLayout.LayoutParams)localTextView.getLayoutParams();
          ((RelativeLayout.LayoutParams)localObject1).bottomMargin += DeviceUtil.dpToPx(SCTabWidget.this.mContext, 10.0F);
          localTextView.setLayoutParams((ViewGroup.LayoutParams)localObject1);
        }
        Object localObject2 = ((NavigationItem)SCTabWidget.this.mNavigationItems.get(k)).getText();
        localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = "tab " + (k + 1);
        }
        localObject2 = localObject1;
        if ((SCTabWidget.this.mGlobalTextStyle & 0x2) != 0) {
          localObject2 = (String)localObject1 + " ";
        }
        localTextView.setText((CharSequence)localObject2);
        localTextView.setTypeface(SCTabWidget.this.mGlobalTypeface, SCTabWidget.this.mGlobalTextStyle);
        localTextView.setTextSize(SCTabWidget.this.mGlobalTextSize);
        updateSelectionForTab(k);
        localRelativeLayout.setOnClickListener(new SCTabWidget.ClickListener(SCTabWidget.this, paramInt, i));
        localLinearLayout.addView(localRelativeLayout);
        i += 1;
      }
      if (!SCTabWidget.this.mStretchTabsHorizontally)
      {
        localObject1 = new View(SCTabWidget.this.mContext);
        ((View)localObject1).setBackgroundColor(0);
        localLinearLayout.addView((View)localObject1, new LinearLayout.LayoutParams(-1, -1, 1.0F));
      }
      localLinearLayout.setId(SCTabWidget.this.getNextViewId());
      ((ViewPager)paramView).addView(localLinearLayout);
      return localLinearLayout;
    }
    
    public boolean isViewFromObject(View paramView, Object paramObject)
    {
      return paramView == (LinearLayout)paramObject;
    }
    
    public void updateSelectionForTab(int paramInt)
    {
      View localView = (View)this.tabIndicators.get(paramInt);
      if (localView == null) {}
      NavigationItem localNavigationItem;
      do
      {
        return;
        localNavigationItem = (NavigationItem)SCTabWidget.this.mNavigationItems.get(paramInt);
      } while (localNavigationItem == null);
      ImageView localImageView = (ImageView)localView.findViewById(2131100250);
      TextView localTextView = (TextView)localView.findViewById(2131100251);
      if (SCTabWidget.this.mCurrentTab == paramInt)
      {
        Object localObject2 = App.getScaledDrawableResource(localNavigationItem.getSelectedBackgroundImage());
        localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = App.getScaledDrawableResource(localNavigationItem.getBackgroundImage());
        }
        localView.setBackgroundDrawable((Drawable)localObject1);
        if (localObject1 == null)
        {
          localObject2 = localNavigationItem.getSelectedBackgroundColor();
          localObject1 = localObject2;
          if (localObject2 == null) {
            localObject1 = Integer.valueOf(localNavigationItem.getBackgroundColor());
          }
          localView.setBackgroundColor(((Integer)localObject1).intValue());
        }
        localTextView.setTextColor(localNavigationItem.getSelectedTextColor());
        localObject2 = App.getScaledDrawableResource(localNavigationItem.getSelectedIcon());
        localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = App.getScaledDrawableResource(localNavigationItem.getIcon());
        }
        localImageView.setImageDrawable((Drawable)localObject1);
        return;
      }
      Object localObject1 = App.getScaledDrawableResource(localNavigationItem.getBackgroundImage());
      localView.setBackgroundDrawable((Drawable)localObject1);
      if (localObject1 == null) {
        localView.setBackgroundColor(localNavigationItem.getBackgroundColor());
      }
      localTextView.setTextColor(localNavigationItem.getTextColor());
      localImageView.setImageDrawable(App.getScaledDrawableResource(localNavigationItem.getIcon()));
    }
  }
}
