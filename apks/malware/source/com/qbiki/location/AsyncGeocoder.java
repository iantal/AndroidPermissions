package com.qbiki.location;

import android.app.Activity;
import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import com.qbiki.util.AsyncTaskListener;
import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class AsyncGeocoder
{
  public static final Location LOCATION_NOT_FOUND = new Location("Code");
  private static final String TAG = "AsyncGeocoder";
  private final boolean DEBUG = false;
  private Activity mActivity;
  private Geocoder mGeoCoder;
  private boolean mGeocodingServerAvailable = false;
  private AsyncTaskListener mListener;
  
  static
  {
    LOCATION_NOT_FOUND.setLatitude(1000.0D);
    LOCATION_NOT_FOUND.setLongitude(1000.0D);
  }
  
  public AsyncGeocoder(Context paramContext, Activity paramActivity, AsyncTaskListener paramAsyncTaskListener)
  {
    this(paramContext, Locale.getDefault(), paramActivity, paramAsyncTaskListener);
  }
  
  public AsyncGeocoder(Context paramContext, Locale paramLocale, Activity paramActivity, AsyncTaskListener paramAsyncTaskListener)
  {
    this.mActivity = paramActivity;
    this.mListener = paramAsyncTaskListener;
    this.mGeoCoder = new Geocoder(paramContext, paramLocale);
  }
  
  private Location locationFromAddress(Address paramAddress)
  {
    Location localLocation = new Location("Code");
    localLocation.setLatitude(paramAddress.getLatitude());
    localLocation.setLongitude(paramAddress.getLongitude());
    return localLocation;
  }
  
  private void notifyListener(final Object paramObject)
  {
    if (this.mActivity != null)
    {
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AsyncGeocoder.this.mListener.asyncTaskFinished(paramObject);
        }
      });
      return;
    }
    this.mListener.asyncTaskFinished(paramObject);
  }
  
  public void getAddress(final double paramDouble1, double paramDouble2)
  {
    if (this.mListener == null) {
      return;
    }
    if (!this.mGeocodingServerAvailable) {
      notifyListener(null);
    }
    new Thread(new Runnable()
    {
      private String foundAddress = this.val$initialAddress;
      
      public void run()
      {
        try
        {
          List localList = AsyncGeocoder.this.mGeoCoder.getFromLocation(paramDouble1, this.val$longitude, 1);
          AsyncGeocoder.access$102(AsyncGeocoder.this, true);
          if (localList.size() > 0)
          {
            String str = ((Address)localList.get(0)).getAddressLine(0);
            int j = ((Address)localList.get(0)).getMaxAddressLineIndex();
            int i = 1;
            while (i <= j)
            {
              str = str + ", " + ((Address)localList.get(0)).getAddressLine(i);
              i += 1;
            }
            this.foundAddress = str;
          }
          AsyncGeocoder.this.notifyListener(this.foundAddress);
          return;
        }
        catch (IOException localIOException)
        {
          AsyncGeocoder.access$102(AsyncGeocoder.this, false);
        }
      }
    }).start();
  }
  
  public void getAddress(Location paramLocation)
  {
    getAddress(paramLocation.getLatitude(), paramLocation.getLongitude());
  }
  
  public void getLocation(final String paramString)
  {
    if (this.mListener == null) {
      return;
    }
    new Thread(new Runnable()
    {
      public void run()
      {
        try
        {
          List localList = AsyncGeocoder.this.mGeoCoder.getFromLocationName(paramString, 1);
          AsyncGeocoder.access$102(AsyncGeocoder.this, true);
          if (localList.size() > 0)
          {
            AsyncGeocoder.this.notifyListener(AsyncGeocoder.access$300(AsyncGeocoder.this, (Address)localList.get(0)));
            return;
          }
          AsyncGeocoder.this.notifyListener(AsyncGeocoder.LOCATION_NOT_FOUND);
          return;
        }
        catch (IOException localIOException)
        {
          AsyncGeocoder.access$102(AsyncGeocoder.this, false);
          AsyncGeocoder.this.notifyListener(null);
        }
      }
    }).start();
  }
}
