package com.qbiki.location;

import android.content.Context;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;

public class SimpleLocationManager
{
  private static final String TAG = SimpleLocationManager.class.getSimpleName();
  private static int mTimeDeltaThreshold = 120000;
  private LocationListener mClientListener;
  private Context mContext;
  private Location mCurrentBestLocation = null;
  private boolean mGpsProviderEnabled = false;
  private SimpleLocationManagerListener mInternalListener;
  private LocationManager mLocationManager;
  private float mMinDistance = 0.0F;
  private long mMinTime = 0L;
  private boolean mNetworkProviderEnabled = false;
  private boolean mNotifiesLastKnownLocation = true;
  private String mProvider;
  
  public SimpleLocationManager(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SimpleLocationManager(Context paramContext, LocationListener paramLocationListener)
  {
    this.mContext = paramContext;
    this.mLocationManager = ((LocationManager)this.mContext.getSystemService("location"));
    this.mClientListener = paramLocationListener;
  }
  
  private void checkEnabledProviders()
  {
    this.mGpsProviderEnabled = false;
    this.mNetworkProviderEnabled = false;
    try
    {
      this.mGpsProviderEnabled = this.mLocationManager.isProviderEnabled("gps");
      try
      {
        this.mNetworkProviderEnabled = this.mLocationManager.isProviderEnabled("network");
        return;
      }
      catch (Exception localException1) {}
    }
    catch (Exception localException2)
    {
      for (;;) {}
    }
  }
  
  private void checkLastKnownLocation()
  {
    if (this.mProvider != null) {
      this.mCurrentBestLocation = this.mLocationManager.getLastKnownLocation(this.mProvider);
    }
    for (;;)
    {
      Log.d(TAG, "Last known location: " + this.mCurrentBestLocation);
      if (this.mNotifiesLastKnownLocation) {
        notifyClientOnLocationChange(this.mCurrentBestLocation);
      }
      return;
      if (this.mNetworkProviderEnabled) {
        this.mCurrentBestLocation = this.mLocationManager.getLastKnownLocation("network");
      }
      if (this.mGpsProviderEnabled)
      {
        Location localLocation = this.mLocationManager.getLastKnownLocation("gps");
        if (isBetterLocation(localLocation, this.mCurrentBestLocation)) {
          this.mCurrentBestLocation = localLocation;
        }
      }
    }
  }
  
  public static int getTimeDeltaThreshold()
  {
    return mTimeDeltaThreshold;
  }
  
  public static boolean isBetterLocation(Location paramLocation1, Location paramLocation2)
  {
    if (paramLocation2 == null) {
      return true;
    }
    if (paramLocation1 == null) {
      return false;
    }
    long l = paramLocation1.getTime() - paramLocation2.getTime();
    int j;
    int k;
    if (l > getTimeDeltaThreshold())
    {
      j = 1;
      if (l >= -getTimeDeltaThreshold()) {
        break label69;
      }
      k = 1;
      label49:
      if (l <= 0L) {
        break label75;
      }
    }
    label69:
    label75:
    for (int i = 1;; i = 0)
    {
      if (j == 0) {
        break label80;
      }
      return true;
      j = 0;
      break;
      k = 0;
      break label49;
    }
    label80:
    if (k != 0) {
      return false;
    }
    int m = (int)(paramLocation1.getAccuracy() - paramLocation2.getAccuracy());
    if (m > 0)
    {
      j = 1;
      if (m >= 0) {
        break label150;
      }
      k = 1;
      label114:
      if (m <= 200) {
        break label156;
      }
    }
    boolean bool;
    label150:
    label156:
    for (m = 1;; m = 0)
    {
      bool = isSameProvider(paramLocation1.getProvider(), paramLocation2.getProvider());
      if (k == 0) {
        break label162;
      }
      return true;
      j = 0;
      break;
      k = 0;
      break label114;
    }
    label162:
    if ((i != 0) && (j == 0)) {
      return true;
    }
    return (i != 0) && (m == 0) && (bool);
  }
  
  private static boolean isSameProvider(String paramString1, String paramString2)
  {
    if (paramString1 == null) {
      return paramString2 == null;
    }
    return paramString1.equals(paramString2);
  }
  
  private void notifyClientOnLocationChange(Location paramLocation)
  {
    Location localLocation = paramLocation;
    if (paramLocation == null) {
      localLocation = new Location(this.mProvider);
    }
    this.mClientListener.onLocationChanged(localLocation);
    if ((this.mClientListener instanceof BestLocationEstimateListener)) {
      ((BestLocationEstimateListener)this.mClientListener).onBestLocationEstimateChanged(localLocation);
    }
  }
  
  public static void setTimeDeltaThreshold(int paramInt)
  {
    mTimeDeltaThreshold = paramInt;
  }
  
  public String getBestProvider(Criteria paramCriteria, boolean paramBoolean)
  {
    if (this.mLocationManager != null) {
      return this.mLocationManager.getBestProvider(paramCriteria, paramBoolean);
    }
    return null;
  }
  
  public LocationListener getListener()
  {
    return this.mClientListener;
  }
  
  public float getMinDistance()
  {
    return this.mMinDistance;
  }
  
  public long getMinTime()
  {
    return this.mMinTime;
  }
  
  public String getProvider()
  {
    return this.mProvider;
  }
  
  public boolean notifiesLastKnownLocation()
  {
    return this.mNotifiesLastKnownLocation;
  }
  
  public SimpleLocationManager setListener(LocationListener paramLocationListener)
  {
    this.mClientListener = paramLocationListener;
    return this;
  }
  
  public SimpleLocationManager setMinDistance(float paramFloat)
  {
    this.mMinDistance = paramFloat;
    return this;
  }
  
  public SimpleLocationManager setMinTime(long paramLong)
  {
    this.mMinTime = paramLong;
    return this;
  }
  
  public SimpleLocationManager setNotifiesLastKnownLocation(boolean paramBoolean)
  {
    this.mNotifiesLastKnownLocation = paramBoolean;
    return this;
  }
  
  public SimpleLocationManager setProvider(String paramString)
  {
    this.mProvider = paramString;
    return this;
  }
  
  public void startUpdatingLocation()
  {
    if (this.mClientListener == null) {}
    do
    {
      do
      {
        do
        {
          return;
        } while (this.mInternalListener != null);
        this.mInternalListener = new SimpleLocationManagerListener(this.mClientListener);
        checkEnabledProviders();
        checkLastKnownLocation();
      } while (this.mInternalListener == null);
      if (this.mProvider != null)
      {
        this.mLocationManager.requestLocationUpdates(this.mProvider, this.mMinTime, this.mMinDistance, this.mInternalListener);
        return;
      }
      if (this.mNetworkProviderEnabled) {
        this.mLocationManager.requestLocationUpdates("network", this.mMinTime, this.mMinDistance, this.mInternalListener);
      }
    } while (!this.mGpsProviderEnabled);
    this.mLocationManager.requestLocationUpdates("gps", this.mMinTime, this.mMinDistance, this.mInternalListener);
  }
  
  public void stopUpdatingLocation()
  {
    if ((this.mLocationManager != null) && (this.mInternalListener != null))
    {
      this.mLocationManager.removeUpdates(this.mInternalListener);
      this.mInternalListener = null;
    }
  }
  
  public static abstract interface BestLocationEstimateListener
    extends LocationListener
  {
    public abstract void onBestLocationEstimateChanged(Location paramLocation);
  }
  
  public static class BestLocationEstimateListenerAdapter
    extends SimpleLocationManager.LocationListenerAdapter
    implements SimpleLocationManager.BestLocationEstimateListener
  {
    public BestLocationEstimateListenerAdapter()
    {
      super();
    }
    
    public BestLocationEstimateListenerAdapter(boolean paramBoolean)
    {
      super();
    }
    
    public void onBestLocationEstimateChanged(Location paramLocation)
    {
      if (this.mLoggingEnabled) {
        Log.d(SimpleLocationManager.TAG, "onBestLocationEstimateChanged: " + paramLocation);
      }
    }
  }
  
  public static class LocationListenerAdapter
    implements LocationListener
  {
    protected boolean mLoggingEnabled = false;
    
    public LocationListenerAdapter()
    {
      this(false);
    }
    
    public LocationListenerAdapter(boolean paramBoolean)
    {
      this.mLoggingEnabled = paramBoolean;
    }
    
    public void onLocationChanged(Location paramLocation)
    {
      if (this.mLoggingEnabled) {
        Log.d(SimpleLocationManager.TAG, "onLocationChanged: " + paramLocation);
      }
    }
    
    public void onProviderDisabled(String paramString)
    {
      if (this.mLoggingEnabled) {
        Log.d(SimpleLocationManager.TAG, "onProviderDisabled: provider = " + paramString);
      }
    }
    
    public void onProviderEnabled(String paramString)
    {
      if (this.mLoggingEnabled) {
        Log.d(SimpleLocationManager.TAG, "onProviderEnabled: provider = " + paramString);
      }
    }
    
    public void onStatusChanged(String paramString, int paramInt, Bundle paramBundle)
    {
      if (this.mLoggingEnabled) {
        Log.d(SimpleLocationManager.TAG, "onStatusChanged: status = " + paramInt + ", provider = " + paramString);
      }
    }
  }
  
  public static class LocationListenerEmptyAdapter
    implements LocationListener
  {
    public LocationListenerEmptyAdapter() {}
    
    public void onLocationChanged(Location paramLocation) {}
    
    public void onProviderDisabled(String paramString) {}
    
    public void onProviderEnabled(String paramString) {}
    
    public void onStatusChanged(String paramString, int paramInt, Bundle paramBundle) {}
  }
  
  private class SimpleLocationManagerListener
    implements LocationListener
  {
    private SimpleLocationManager.BestLocationEstimateListener mBestLocationEstimateListener;
    private LocationListener mLocationListener;
    
    public SimpleLocationManagerListener(LocationListener paramLocationListener)
    {
      if ((paramLocationListener instanceof SimpleLocationManager.BestLocationEstimateListener)) {
        this.mBestLocationEstimateListener = ((SimpleLocationManager.BestLocationEstimateListener)paramLocationListener);
      }
      this.mLocationListener = paramLocationListener;
    }
    
    public void onLocationChanged(Location paramLocation)
    {
      if (this.mLocationListener == null) {}
      do
      {
        return;
        this.mLocationListener.onLocationChanged(paramLocation);
      } while ((this.mBestLocationEstimateListener == null) || (!SimpleLocationManager.isBetterLocation(paramLocation, SimpleLocationManager.this.mCurrentBestLocation)));
      SimpleLocationManager.access$002(SimpleLocationManager.this, paramLocation);
      this.mBestLocationEstimateListener.onBestLocationEstimateChanged(paramLocation);
    }
    
    public void onProviderDisabled(String paramString)
    {
      if (this.mLocationListener == null) {
        return;
      }
      this.mLocationListener.onProviderDisabled(paramString);
    }
    
    public void onProviderEnabled(String paramString)
    {
      if (this.mLocationListener == null) {
        return;
      }
      this.mLocationListener.onProviderEnabled(paramString);
    }
    
    public void onStatusChanged(String paramString, int paramInt, Bundle paramBundle)
    {
      if (this.mLocationListener == null) {
        return;
      }
      this.mLocationListener.onStatusChanged(paramString, paramInt, paramBundle);
    }
  }
}
