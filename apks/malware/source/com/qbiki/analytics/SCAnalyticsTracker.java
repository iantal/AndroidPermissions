package com.qbiki.analytics;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppLicensing;
import com.qbiki.util.HTTPUtil;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class SCAnalyticsTracker
{
  private static final long ACTIVATION_EVENT_DELAY = 900000L;
  public static final String ANALYTICS_TRACKER_HANDLER = "trackevent.ashx";
  protected static final boolean DEBUG = false;
  private static final long DEFAULT_INSTALLATION_TIMESTAMP = 0L;
  private static final String PREFS_FILE = "com.qbiki.analytics.SCAnalyticsTracker";
  private static final String PREF_INSTALLATION_TIMESTAMP = "installationTimestamp";
  private static final String TAG = SCAnalyticsTracker.class.getSimpleName();
  public static String analyticsServerHostname = "analytics.seattleclouds.com";
  private static Context mCtx;
  private static SCAnalyticsTracker mInstance;
  private long mInstallationTimestamp;
  private long mLastActivationEventTimestamp = 0L;
  private SharedPreferences mPreferences;
  private SharedPreferences.Editor mPreferencesEditor;
  
  private SCAnalyticsTracker(Context paramContext)
  {
    mCtx = paramContext;
    this.mPreferences = mCtx.getSharedPreferences("com.qbiki.analytics.SCAnalyticsTracker", 0);
    this.mPreferencesEditor = this.mPreferences.edit();
    this.mInstallationTimestamp = this.mPreferences.getLong("installationTimestamp", 0L);
  }
  
  private int getCurrentConnectionType()
  {
    int i = 1;
    ConnectivityManager localConnectivityManager = (ConnectivityManager)mCtx.getSystemService("connectivity");
    try
    {
      if (localConnectivityManager.getActiveNetworkInfo() == null) {
        return 100;
      }
      int j = localConnectivityManager.getActiveNetworkInfo().getType();
      if (j != 1) {
        i = 2;
      }
      return i;
    }
    catch (NoSuchMethodError localNoSuchMethodError)
    {
      return 0;
    }
    catch (SecurityException localSecurityException) {}
    return 200;
  }
  
  private static String getDeviceModel()
  {
    return getDeviceModel(Build.MANUFACTURER, Build.MODEL);
  }
  
  private static String getDeviceModel(String paramString1, String paramString2)
  {
    String str;
    if (paramString1 != null)
    {
      str = paramString1;
      if (paramString1.trim().length() != 0) {}
    }
    else
    {
      str = "Unknown";
    }
    if (paramString2 != null)
    {
      paramString1 = paramString2;
      if (paramString2.trim().length() != 0) {}
    }
    else
    {
      paramString1 = "Unknown";
    }
    if (str.length() == 1) {}
    for (paramString2 = str.toUpperCase(); paramString1.startsWith(paramString2); paramString2 = str.substring(0, 1).toUpperCase() + str.substring(1)) {
      return paramString1;
    }
    return paramString2 + " " + paramString1;
  }
  
  public static SCAnalyticsTracker getInstance(Context paramContext)
  {
    if (paramContext == null) {
      throw new IllegalArgumentException("Context cannot be null");
    }
    if (mInstance == null) {
      mInstance = new SCAnalyticsTracker(paramContext);
    }
    mCtx = paramContext;
    return mInstance;
  }
  
  private int getScreenSize()
  {
    return mCtx.getResources().getConfiguration().screenLayout & 0xF;
  }
  
  private void logProperties()
  {
    DisplayMetrics localDisplayMetrics = mCtx.getResources().getDisplayMetrics();
    Log.e(TAG, "username: " + App.username);
    Log.e(TAG, "appId: " + App.appId);
    Log.e(TAG, "uniqueAppId: " + mCtx.getPackageName());
    Log.e(TAG, "deviceId: " + AppLicensing.getDeviceId(mCtx));
    Log.e(TAG, "os: " + Integer.toString(1));
    Log.e(TAG, "osVersion: " + Build.VERSION.RELEASE);
    Log.e(TAG, "deviceModel: " + getDeviceModel());
    Log.e(TAG, "connectionType: " + Integer.toString(getCurrentConnectionType()));
    Log.e(TAG, "screenSize: " + Integer.toString(getScreenSize()));
    Log.e(TAG, "screenDensity: " + Integer.toString(localDisplayMetrics.densityDpi));
    Log.e(TAG, "============");
    Log.e(TAG, "android.os.Build.BOARD: " + Build.BOARD);
    Log.e(TAG, "android.os.Build.BRAND: " + Build.BRAND);
    Log.e(TAG, "android.os.Build.CPU_ABI: " + Build.CPU_ABI);
    Log.e(TAG, "android.os.Build.DEVICE: " + Build.DEVICE);
    Log.e(TAG, "android.os.Build.DISPLAY: " + Build.DISPLAY);
    Log.e(TAG, "android.os.Build.FINGERPRINT: " + Build.FINGERPRINT);
    Log.e(TAG, "android.os.Build.HOST: " + Build.HOST);
    Log.e(TAG, "android.os.Build.ID: " + Build.ID);
    Log.e(TAG, "android.os.Build.MANUFACTURER: " + Build.MANUFACTURER);
    Log.e(TAG, "android.os.Build.MODEL: " + Build.MODEL);
    Log.e(TAG, "android.os.Build.PRODUCT: " + Build.PRODUCT);
    Log.e(TAG, "android.os.Build.TAGS: " + Build.TAGS);
    Log.e(TAG, "android.os.Build.TIME: " + Build.TIME);
    Log.e(TAG, "android.os.Build.TYPE: " + Build.TYPE);
    Log.e(TAG, "android.os.Build.USER: " + Build.USER);
    Log.e(TAG, "android.os.Build.VERSION.CODENAME: " + Build.VERSION.CODENAME);
    Log.e(TAG, "android.os.Build.VERSION.INCREMENTAL: " + Build.VERSION.INCREMENTAL);
    Log.e(TAG, "android.os.Build.VERSION.RELEASE: " + Build.VERSION.RELEASE);
    Log.e(TAG, "android.os.Build.VERSION.SDK: " + Build.VERSION.SDK);
    Log.e(TAG, "android.os.Build.VERSION.SDK_INT: " + Build.VERSION.SDK_INT);
    Log.e(TAG, "============");
    Log.e(TAG, "DisplayMetrics.density: " + localDisplayMetrics.density);
    Log.e(TAG, "DisplayMetrics.densityDpi: " + localDisplayMetrics.densityDpi);
    Log.e(TAG, "DisplayMetrics.xdpi: " + localDisplayMetrics.xdpi);
    Log.e(TAG, "DisplayMetrics.ydpi: " + localDisplayMetrics.ydpi);
    Log.e(TAG, "DisplayMetrics.scaledDensity: " + localDisplayMetrics.scaledDensity);
    Log.e(TAG, "DisplayMetrics.heightPixels: " + localDisplayMetrics.heightPixels);
    Log.e(TAG, "DisplayMetrics.widthPixels: " + localDisplayMetrics.widthPixels);
  }
  
  private static void test()
  {
    testDeviceModel("Samsung", "Galaxy Tab", "Samsung Galaxy Tab");
    testDeviceModel("samsung", "Nexus S", "Samsung Nexus S");
    testDeviceModel("HTC", "HTC Incredible S", "HTC Incredible S");
    testDeviceModel(null, "Some device", "Unknown Some device");
    testDeviceModel(null, "", "Unknown");
    testDeviceModel(null, null, "Unknown");
    testDeviceModel("", null, "Unknown");
    testDeviceModel("", "", "Unknown");
  }
  
  private static void testDeviceModel(String paramString1, String paramString2, String paramString3)
  {
    if (getDeviceModel(paramString1, paramString2).equals(paramString3))
    {
      Log.i(TAG, "Device model test PASSED: " + paramString1 + " " + paramString2 + " = " + paramString3);
      return;
    }
    Log.e(TAG, "Device model test FAILED: " + paramString1 + " " + paramString2 + " = " + getDeviceModel(paramString1, paramString2));
  }
  
  private boolean trackEventInternal(int paramInt)
  {
    Object localObject1 = mCtx.getResources().getDisplayMetrics();
    Object localObject2 = new HashMap();
    ((Map)localObject2).put("type", Integer.toString(paramInt));
    ((Map)localObject2).put("param", "");
    ((Map)localObject2).put("username", App.username);
    ((Map)localObject2).put("appId", App.appId);
    ((Map)localObject2).put("publisherid", App.publisherId);
    ((Map)localObject2).put("uniqueAppId", mCtx.getPackageName());
    ((Map)localObject2).put("deviceId", AppLicensing.getDeviceId(mCtx));
    ((Map)localObject2).put("os", Integer.toString(1));
    ((Map)localObject2).put("osVersion", Build.VERSION.RELEASE);
    ((Map)localObject2).put("deviceModel", getDeviceModel());
    ((Map)localObject2).put("connectionType", Integer.toString(getCurrentConnectionType()));
    ((Map)localObject2).put("screenSize", Integer.toString(getScreenSize()));
    ((Map)localObject2).put("screenDensity", Integer.toString(((DisplayMetrics)localObject1).densityDpi));
    localObject1 = null;
    try
    {
      localObject2 = HTTPUtil.performPostRequest("http://" + analyticsServerHostname + "/" + "trackevent.ashx", (Map)localObject2);
      localObject1 = localObject2;
    }
    catch (SecurityException localSecurityException)
    {
      for (;;)
      {
        Log.e(TAG, "Error performing analytics request: " + localSecurityException);
      }
      return false;
    }
    catch (IOException localIOException)
    {
      for (;;) {}
    }
    if ("OK".equalsIgnoreCase((String)localObject1)) {
      return true;
    }
  }
  
  private boolean trackInstallationEventIfNeeded()
  {
    boolean bool1 = true;
    try
    {
      if (this.mInstallationTimestamp == 0L)
      {
        long l = System.currentTimeMillis();
        boolean bool2 = trackEventInternal(1);
        bool1 = bool2;
        if (bool2)
        {
          this.mInstallationTimestamp = l;
          this.mPreferencesEditor.putLong("installationTimestamp", this.mInstallationTimestamp);
          bool1 = this.mPreferencesEditor.commit();
        }
      }
      return bool1;
    }
    finally {}
  }
  
  public void trackEvent(final int paramInt)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        if (paramInt == 2)
        {
          if (System.currentTimeMillis() > SCAnalyticsTracker.this.mLastActivationEventTimestamp + 900000L)
          {
            boolean bool2 = SCAnalyticsTracker.this.trackInstallationEventIfNeeded();
            boolean bool1 = bool2;
            if (bool2) {
              bool1 = SCAnalyticsTracker.this.trackEventInternal(paramInt);
            }
            if (bool1) {
              SCAnalyticsTracker.access$002(SCAnalyticsTracker.this, System.currentTimeMillis());
            }
          }
          return;
        }
        SCAnalyticsTracker.this.trackEventInternal(paramInt);
      }
    }).start();
  }
}
