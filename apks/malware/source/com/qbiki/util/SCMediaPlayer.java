package com.qbiki.util;

import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.media.MediaPlayer;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import com.android.vending.expansion.zipfile.ZipResourceFile;
import com.qbiki.seattleclouds.App;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class SCMediaPlayer
{
  public static final String TAG = "SCMediaPlayer";
  private App app = null;
  private MediaPlayer mp = new MediaPlayer();
  final PhoneStateListener phoneStateListener = new PhoneStateListener()
  {
    public void onCallStateChanged(int paramAnonymousInt, String paramAnonymousString)
    {
      if (paramAnonymousInt == 1) {
        if (SCMediaPlayer.this.mp != null)
        {
          SCMediaPlayer.access$102(SCMediaPlayer.this, SCMediaPlayer.this.mp.isPlaying());
          SCMediaPlayer.this.mp.pause();
        }
      }
      for (;;)
      {
        super.onCallStateChanged(paramAnonymousInt, paramAnonymousString);
        return;
        if (paramAnonymousInt == 0)
        {
          if ((SCMediaPlayer.this.mp != null) && (SCMediaPlayer.this.wasPlayingBeforCall))
          {
            SCMediaPlayer.access$102(SCMediaPlayer.this, false);
            SCMediaPlayer.this.mp.start();
          }
        }
        else if ((paramAnonymousInt == 2) && (SCMediaPlayer.this.mp != null))
        {
          SCMediaPlayer.access$102(SCMediaPlayer.this, SCMediaPlayer.this.mp.isPlaying());
          SCMediaPlayer.this.mp.pause();
        }
      }
    }
  };
  private boolean phoneStateListenerRegistered = false;
  private boolean wasPlayingBeforCall = false;
  
  public SCMediaPlayer(App paramApp)
  {
    this.app = paramApp;
  }
  
  private void registerPhoneStateListener()
  {
    if (this.phoneStateListenerRegistered) {}
    TelephonyManager localTelephonyManager;
    do
    {
      return;
      localTelephonyManager = (TelephonyManager)this.app.getSystemService("phone");
    } while (localTelephonyManager == null);
    this.phoneStateListenerRegistered = true;
    localTelephonyManager.listen(this.phoneStateListener, 32);
  }
  
  private void setDataSourceFile(String paramString)
    throws FileNotFoundException, IOException
  {
    if ((App.isPreviewer) || (App.syncEnabled))
    {
      paramString = new FileInputStream(new File(App.getAppResourcesPath() + "/" + paramString)).getFD();
      this.mp.setDataSource(paramString);
      return;
    }
    if (App.apkExpansionFilesEnabled)
    {
      if (App.apkExpansionFile == null)
      {
        Log.w("SCMediaPlayer", "Expansion file not loaded");
        return;
      }
      AssetFileDescriptor localAssetFileDescriptor = App.apkExpansionFile.getAssetFileDescriptor(paramString);
      if (localAssetFileDescriptor == null)
      {
        Log.w("SCMediaPlayer", "File not found in expansion file: " + paramString);
        return;
      }
      this.mp.setDataSource(localAssetFileDescriptor.getFileDescriptor(), localAssetFileDescriptor.getStartOffset(), localAssetFileDescriptor.getLength());
      return;
    }
    paramString = this.app.getAssets().openFd("Main/" + paramString);
    this.mp.setDataSource(paramString.getFileDescriptor(), paramString.getStartOffset(), paramString.getLength());
  }
  
  private void unregisterPhoneStateListener()
  {
    if (!this.phoneStateListenerRegistered) {}
    TelephonyManager localTelephonyManager;
    do
    {
      return;
      this.phoneStateListenerRegistered = false;
      localTelephonyManager = (TelephonyManager)this.app.getSystemService("phone");
    } while (localTelephonyManager == null);
    localTelephonyManager.listen(this.phoneStateListener, 0);
  }
  
  public void forceStop()
  {
    this.mp.stop();
    this.mp.reset();
    unregisterPhoneStateListener();
  }
  
  public boolean playAudioFile(String paramString)
  {
    stop();
    try
    {
      setDataSourceFile(paramString);
      this.mp.prepare();
      this.mp.start();
      registerPhoneStateListener();
      return true;
    }
    catch (IllegalStateException paramString)
    {
      Log.e("SCMediaPlayer", "playAudioFile: " + paramString, paramString);
      return false;
    }
    catch (IOException paramString)
    {
      Log.e("SCMediaPlayer", "playAudioFile: " + paramString, paramString);
    }
    return false;
  }
  
  public boolean playAudioSource(String paramString)
  {
    stop();
    try
    {
      if (paramString.indexOf("://") == -1) {
        setDataSourceFile(paramString);
      }
      for (;;)
      {
        this.mp.prepare();
        this.mp.start();
        registerPhoneStateListener();
        return true;
        this.mp.setDataSource(paramString);
      }
      return false;
    }
    catch (IllegalArgumentException paramString)
    {
      Log.e("SCMediaPlayer", "playSource: " + paramString, paramString);
      return false;
    }
    catch (IllegalStateException paramString)
    {
      Log.e("SCMediaPlayer", "playSource: " + paramString, paramString);
      return false;
    }
    catch (IOException paramString)
    {
      Log.e("SCMediaPlayer", "playSource: " + paramString, paramString);
    }
  }
  
  public void stop()
  {
    if (this.mp.isPlaying()) {
      this.mp.stop();
    }
    this.mp.reset();
    unregisterPhoneStateListener();
  }
}
