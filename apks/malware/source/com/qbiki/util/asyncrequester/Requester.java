package com.qbiki.util.asyncrequester;

import android.net.ParseException;
import android.os.Handler;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpUriRequest;

public class Requester
{
  public Requester() {}
  
  public static String getContentCharSet(HttpEntity paramHttpEntity)
    throws ParseException
  {
    if (paramHttpEntity == null) {
      throw new IllegalArgumentException("HTTP entity may not be null");
    }
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (paramHttpEntity.getContentType() != null)
    {
      paramHttpEntity = paramHttpEntity.getContentType().getElements();
      localObject1 = localObject2;
      if (paramHttpEntity.length > 0)
      {
        paramHttpEntity = paramHttpEntity[0].getParameterByName("charset");
        localObject1 = localObject2;
        if (paramHttpEntity != null) {
          localObject1 = paramHttpEntity.getValue();
        }
      }
    }
    return localObject1;
  }
  
  public static String getResponseBody(HttpEntity paramHttpEntity)
    throws IOException, ParseException
  {
    if (paramHttpEntity == null) {
      throw new IllegalArgumentException("HTTP entity may not be null");
    }
    Object localObject3 = paramHttpEntity.getContent();
    if (localObject3 == null) {
      return "";
    }
    if (paramHttpEntity.getContentLength() > 2147483647L) {
      throw new IllegalArgumentException("HTTP entity too large to be buffered in memory");
    }
    Object localObject1 = getContentCharSet(paramHttpEntity);
    paramHttpEntity = (HttpEntity)localObject1;
    if (localObject1 == null) {
      paramHttpEntity = "ISO-8859-1";
    }
    paramHttpEntity = new InputStreamReader((InputStream)localObject3, paramHttpEntity);
    localObject1 = new StringBuilder();
    try
    {
      localObject3 = new char['Ð€'];
      for (;;)
      {
        int i = paramHttpEntity.read((char[])localObject3);
        if (i == -1) {
          break;
        }
        ((StringBuilder)localObject1).append((char[])localObject3, 0, i);
      }
    }
    finally
    {
      paramHttpEntity.close();
    }
    return localObject2.toString();
  }
  
  public static String getResponseBody(HttpResponse paramHttpResponse)
  {
    Object localObject = null;
    HttpResponse localHttpResponse = null;
    try
    {
      paramHttpResponse = paramHttpResponse.getEntity();
      localHttpResponse = paramHttpResponse;
      paramHttpResponse = getResponseBody(paramHttpResponse);
    }
    catch (ParseException paramHttpResponse)
    {
      paramHttpResponse.printStackTrace();
      return null;
    }
    catch (IOException paramHttpResponse)
    {
      do
      {
        paramHttpResponse = localObject;
      } while (localHttpResponse == null);
      try
      {
        localHttpResponse.consumeContent();
        return null;
      }
      catch (IOException paramHttpResponse) {}
    }
    return paramHttpResponse;
    return null;
  }
  
  public static void sendRequest(HttpUriRequest paramHttpUriRequest, ResponseListener paramResponseListener)
  {
    new AsynchronousSender(paramHttpUriRequest, new Handler(), new CallbackWrapper(paramResponseListener)).start();
  }
  
  public static void sendRequest(HttpUriRequest paramHttpUriRequest, ResponseListener paramResponseListener, int paramInt)
  {
    new AsynchronousSender(paramHttpUriRequest, new Handler(), new CallbackWrapper(paramResponseListener), paramInt).start();
  }
}
