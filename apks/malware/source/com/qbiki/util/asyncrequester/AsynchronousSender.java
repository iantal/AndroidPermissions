package com.qbiki.util.asyncrequester;

import android.os.Handler;
import android.util.Log;
import java.io.IOException;
import java.net.SocketTimeoutException;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;

public class AsynchronousSender
  extends Thread
{
  private static final String TAG = "AsynchronousSender";
  private Handler handler;
  private DefaultHttpClient httpClient = new DefaultHttpClient();
  private HttpUriRequest request;
  private CallbackWrapper wrapper;
  
  protected AsynchronousSender(HttpUriRequest paramHttpUriRequest, Handler paramHandler, CallbackWrapper paramCallbackWrapper)
  {
    this.request = paramHttpUriRequest;
    this.handler = paramHandler;
    this.wrapper = paramCallbackWrapper;
  }
  
  protected AsynchronousSender(HttpUriRequest paramHttpUriRequest, Handler paramHandler, CallbackWrapper paramCallbackWrapper, int paramInt)
  {
    this(paramHttpUriRequest, paramHandler, paramCallbackWrapper);
    paramHttpUriRequest = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout(paramHttpUriRequest, paramInt);
    HttpConnectionParams.setSoTimeout(paramHttpUriRequest, paramInt);
    this.httpClient.setParams(paramHttpUriRequest);
  }
  
  private HttpClient getClient()
  {
    return this.httpClient;
  }
  
  public void run()
  {
    try
    {
      synchronized (this.httpClient)
      {
        HttpResponse localHttpResponse = getClient().execute(this.request);
        this.wrapper.setResponse(localHttpResponse);
        this.handler.post(this.wrapper);
        return;
      }
      return;
    }
    catch (SecurityException localSecurityException)
    {
      Log.e("AsynchronousSender", localSecurityException.toString(), localSecurityException);
      return;
    }
    catch (ClientProtocolException localClientProtocolException)
    {
      Log.e("AsynchronousSender", localClientProtocolException.toString(), localClientProtocolException);
      return;
    }
    catch (ConnectTimeoutException localConnectTimeoutException)
    {
      this.wrapper.setTimeoutExpired(true);
      this.handler.post(this.wrapper);
      Log.w("AsynchronousSender", localConnectTimeoutException.toString());
      return;
    }
    catch (SocketTimeoutException localSocketTimeoutException)
    {
      Log.w("AsynchronousSender", localSocketTimeoutException.toString(), localSocketTimeoutException);
      this.wrapper.setTimeoutExpired(true);
      this.handler.post(this.wrapper);
      return;
    }
    catch (IOException localIOException)
    {
      this.handler.post(this.wrapper);
      Log.e("AsynchronousSender", localIOException.toString(), localIOException);
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      Log.w("AsynchronousSender", localIllegalArgumentException.toString(), localIllegalArgumentException);
    }
  }
}
