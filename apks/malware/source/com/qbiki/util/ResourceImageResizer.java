package com.qbiki.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import com.google.android.bitmapfun.ImageCache;
import com.google.android.bitmapfun.ImageResizer;
import com.google.android.bitmapfun.Utils;
import com.qbiki.seattleclouds.App;
import java.io.IOException;
import java.io.InputStream;

public class ResourceImageResizer
  extends ImageResizer
{
  private static final String TAG = "ResourceImageResizer";
  
  public ResourceImageResizer(Context paramContext, int paramInt)
  {
    super(paramContext, paramInt);
  }
  
  public ResourceImageResizer(Context paramContext, int paramInt1, int paramInt2)
  {
    super(paramContext, paramInt1, paramInt2);
  }
  
  public static Bitmap decodeSampledBitmapFromResource(String paramString, int paramInt1, int paramInt2, ImageCache paramImageCache)
  {
    InputStream localInputStream = App.getResourceStream(paramString);
    if (localInputStream == null) {}
    for (;;)
    {
      return null;
      BitmapFactory.Options localOptions = new BitmapFactory.Options();
      localOptions.inJustDecodeBounds = true;
      BitmapFactory.decodeStream(localInputStream, null, localOptions);
      try
      {
        localInputStream.close();
        localOptions.inSampleSize = calculateInSampleSize(localOptions, paramInt1, paramInt2);
        paramInt1 = localOptions.outWidth;
        paramInt1 = localOptions.outHeight;
        localOptions.inJustDecodeBounds = false;
        if ((Utils.hasHoneycomb()) && (localOptions.inSampleSize == 1)) {
          addInBitmapOptions(localOptions, paramImageCache);
        }
        paramString = App.getResourceStream(paramString);
        if (paramString == null) {
          continue;
        }
        paramImageCache = BitmapFactory.decodeStream(paramString, null, localOptions);
        try
        {
          paramString.close();
          return paramImageCache;
        }
        catch (IOException paramString)
        {
          return paramImageCache;
        }
      }
      catch (IOException localIOException)
      {
        for (;;) {}
      }
    }
  }
  
  private Bitmap processBitmap(String paramString)
  {
    return decodeSampledBitmapFromResource(paramString, this.mImageWidth, this.mImageHeight, getImageCache());
  }
  
  protected Bitmap processBitmap(Object paramObject)
  {
    return processBitmap(String.valueOf(paramObject));
  }
}
