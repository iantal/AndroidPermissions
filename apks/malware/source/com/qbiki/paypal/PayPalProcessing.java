package com.qbiki.paypal;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.provider.Settings.Secure;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import com.qbiki.shoppingcart.ShoppingCart;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.http.HttpResponse;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.message.BasicNameValuePair;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class PayPalProcessing
{
  private static final String PAYPAL_PREF_NAME = "PayPal";
  private static final String TAG = "PayPalProcessing";
  private Activity activity;
  private Hashtable<String, String> dicProducts;
  private boolean isTest = false;
  private URL itemURL;
  
  public PayPalProcessing(boolean paramBoolean, Activity paramActivity)
  {
    this.isTest = paramBoolean;
    this.activity = paramActivity;
  }
  
  private void buyItem(Hashtable<String, String> paramHashtable, URL paramURL)
  {
    if (paramHashtable.size() == 0)
    {
      DialogUtil.showAlert(this.activity, "ERROR", "The URL scheme is not configured correctly.");
      return;
    }
    this.dicProducts = paramHashtable;
    this.itemURL = paramURL;
    checkProductIsBought();
  }
  
  private void checkProductIsBought()
  {
    Object localObject1 = this.dicProducts;
    Object localObject2 = this.activity.getSharedPreferences("PayPal", 0);
    int j = 0;
    int i = 0;
    for (;;)
    {
      label52:
      Object localObject3;
      if (!((SharedPreferences)localObject2).contains("paypalitems" + i))
      {
        i = j;
        if (i == 0)
        {
          localObject3 = "http://" + App.serverHostName + "/paypalcheckproduct.ashx?";
          localObject2 = new ArrayList(4);
          ((List)localObject2).add(new BasicNameValuePair("productid", (String)((Hashtable)localObject1).get("itemid")));
          ((List)localObject2).add(new BasicNameValuePair("deviceid", getDeviceId(this.activity)));
          ((List)localObject2).add(new BasicNameValuePair("appid", App.username + "." + App.appId));
          localObject1 = new HttpPost((String)localObject3);
        }
      }
      try
      {
        ((HttpPost)localObject1).setEntity(new UrlEncodedFormEntity((List)localObject2));
        Requester.sendRequest((HttpUriRequest)localObject1, new ResponseListener()
        {
          public void onResponseReceived(HttpResponse paramAnonymousHttpResponse)
          {
            if (Requester.getResponseBody(paramAnonymousHttpResponse).equalsIgnoreCase("ok"))
            {
              paramAnonymousHttpResponse = (String)PayPalProcessing.this.dicProducts.get("itemid");
              PayPalProcessing.this.openElectronProductAfterBought(paramAnonymousHttpResponse);
              return;
            }
            paramAnonymousHttpResponse = new Intent("android.intent.action.VIEW");
            paramAnonymousHttpResponse.setFlags(268435456);
            paramAnonymousHttpResponse.setData(Uri.parse(PayPalProcessing.this.itemURL.toString()));
            PayPalProcessing.this.activity.startActivity(paramAnonymousHttpResponse);
          }
          
          public void onResponseTimeout()
          {
            DialogUtil.showAlert(PayPalProcessing.this.activity, "ERROR", "Server is NOT responding.");
          }
        });
        return;
        localObject3 = ((SharedPreferences)localObject2).getString("paypalitems" + i, "").split("\\|\\|");
        if (localObject3.length >= 6)
        {
          Hashtable localHashtable = new Hashtable();
          localHashtable.put(localObject3[0], localObject3[1]);
          localHashtable.put(localObject3[2], localObject3[3]);
          localHashtable.put(localObject3[4], localObject3[5]);
          if ((((String)localHashtable.get("productid")).equalsIgnoreCase((String)((Hashtable)localObject1).get("itemid"))) && (((String)localHashtable.get("deviceid")).equalsIgnoreCase(getDeviceId(this.activity))) && (((String)localHashtable.get("appid")).equalsIgnoreCase(App.username + "." + App.appId)))
          {
            openElectronProductAfterBought((String)((Hashtable)localObject1).get("itemid"));
            i = 1;
            break label52;
          }
        }
        i += 1;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        for (;;)
        {
          Log.e("PayPalProcessing", localUnsupportedEncodingException.toString());
        }
      }
    }
  }
  
  private boolean containsOnlyNumbers(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {
      return false;
    }
    int i = 0;
    for (;;)
    {
      if (i >= paramString.length()) {
        break label41;
      }
      if (!Character.isDigit(paramString.charAt(i))) {
        break;
      }
      i += 1;
    }
    label41:
    return true;
  }
  
  private String encParam(String paramString)
  {
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8").replace("+", "%20");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString) {}
    return "";
  }
  
  private static String getDeviceId(Context paramContext)
  {
    return Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
  }
  
  private void openElectronProductAfterBought(String paramString)
  {
    App.showPage(App.getResourceUrl(paramString), this.activity);
  }
  
  private void paymentSaveItem(Hashtable<String, String> paramHashtable)
  {
    this.dicProducts = paramHashtable;
    if (!this.isTest) {
      recordTransaction();
    }
    paramHashtable = (String)paramHashtable.get("itemid");
    if ((containsOnlyNumbers(paramHashtable)) && (paramHashtable.length() == 13))
    {
      App.shoppingCart.clear();
      return;
    }
    openElectronProductAfterBought(paramHashtable);
  }
  
  private void recordTransaction()
  {
    Object localObject1 = this.dicProducts;
    Object localObject3 = "http://" + App.serverHostName + "/paypaltrans.ashx?";
    Object localObject2 = new ArrayList(4);
    ((List)localObject2).add(new BasicNameValuePair("productid", (String)((Hashtable)localObject1).get("itemid")));
    ((List)localObject2).add(new BasicNameValuePair("deviceid", getDeviceId(this.activity)));
    ((List)localObject2).add(new BasicNameValuePair("appid", App.username + "." + App.appId));
    localObject3 = new HttpPost((String)localObject3);
    try
    {
      ((HttpPost)localObject3).setEntity(new UrlEncodedFormEntity((List)localObject2));
      localObject2 = this.activity.getSharedPreferences("PayPal", 0);
      i = 0;
      if (!((SharedPreferences)localObject2).contains("paypalitems" + i))
      {
        localObject1 = "productid||" + (String)((Hashtable)localObject1).get("itemid") + "||deviceid||" + getDeviceId(this.activity) + "||appid||" + App.username + "." + App.appId;
        localObject2 = ((SharedPreferences)localObject2).edit();
        ((SharedPreferences.Editor)localObject2).putString("paypalitems" + i, (String)localObject1);
        ((SharedPreferences.Editor)localObject2).commit();
        return;
      }
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      for (;;)
      {
        int i;
        Log.e("PayPalProcessing", localUnsupportedEncodingException.toString());
        continue;
        i += 1;
      }
    }
  }
  
  public String checkTransactionAfterPay(Hashtable<String, String> paramHashtable)
  {
    if (((String)paramHashtable.get("succ")).equalsIgnoreCase("YES"))
    {
      boolean bool = false;
      if (paramHashtable.get("istest") != null) {
        if (!((String)paramHashtable.get("istest")).equalsIgnoreCase("YES")) {
          break label106;
        }
      }
      label106:
      for (bool = true;; bool = false)
      {
        if (App.paypalProc == null) {
          App.paypalProc = new PayPalProcessing(bool, this.activity);
        }
        Hashtable localHashtable = new Hashtable();
        localHashtable.put("itemid", paramHashtable.get("idtran"));
        App.paypalProc.paymentSaveItem(localHashtable);
        return "Successful pay.";
      }
    }
    return "Failed pay.";
  }
  
  public Activity getActivity()
  {
    return this.activity;
  }
  
  public void processPayScheme(String paramString)
  {
    String[] arrayOfString1 = new String[6];
    arrayOfString1[0] = "recipient";
    arrayOfString1[1] = "currency";
    arrayOfString1[2] = "description";
    arrayOfString1[3] = "merchant";
    arrayOfString1[4] = "totalship";
    arrayOfString1[5] = "totaltax";
    String[] arrayOfString2 = new String[4];
    arrayOfString2[0] = "itemid";
    arrayOfString2[1] = "itemname";
    arrayOfString2[2] = "itemprice";
    arrayOfString2[3] = "itemcount";
    String str1 = Uri.parse(paramString).getHost();
    Hashtable localHashtable1 = new Hashtable();
    Hashtable localHashtable2 = new Hashtable();
    Object localObject1 = DocumentBuilderFactory.newInstance();
    paramString = null;
    Object localObject2;
    try
    {
      localObject1 = ((DocumentBuilderFactory)localObject1).newDocumentBuilder();
      paramString = (String)localObject1;
    }
    catch (ParserConfigurationException localParserConfigurationException)
    {
      try
      {
        paramString = paramString.parse(App.getResourceStream("app.xml"));
        paramString = paramString.getDocumentElement().getElementsByTagName("paypalbt");
        if ((paramString == null) || (paramString.getLength() <= 0)) {
          break label499;
        }
        i = 0;
        if (i >= paramString.getLength()) {
          break label499;
        }
        localObject1 = paramString.item(i);
        str2 = ((Element)((Node)localObject1).getParentNode()).getAttributeNode("id").getValue();
        if ((str2 == null) || (!str1.equalsIgnoreCase(str2)) || (localObject1 == null)) {
          break label492;
        }
        k = arrayOfString2.length;
        j = 0;
        while (j < k)
        {
          str2 = arrayOfString2[j];
          localAttr = ((Element)localObject1).getAttributeNode(str2);
          if (localAttr != null) {
            localHashtable1.put(str2, localAttr.getValue());
          }
          j += 1;
        }
        localParserConfigurationException = localParserConfigurationException;
        Log.e("PayPalProcessing", localParserConfigurationException.toString());
      }
      catch (SAXException paramString)
      {
        for (;;)
        {
          Log.e("PayPalProcessing", paramString.toString());
          paramString = localParserConfigurationException;
        }
      }
      catch (IOException paramString)
      {
        for (;;)
        {
          int i;
          String str2;
          Attr localAttr;
          Log.e("PayPalProcessing", paramString.toString());
          paramString = localParserConfigurationException;
          continue;
          int k = arrayOfString1.length;
          int j = 0;
          while (j < k)
          {
            str2 = arrayOfString1[j];
            localAttr = ((Element)localParserConfigurationException).getAttributeNode(str2);
            if (localAttr != null) {
              localHashtable2.put(str2, localAttr.getValue());
            }
            j += 1;
          }
          localHashtable1.put("itemcount", "1");
          j = 0;
          if (j < arrayOfString1.length)
          {
            localObject2 = arrayOfString1[j];
            if ((!localHashtable2.containsKey(localObject2)) && (j < 4)) {
              localHashtable2.put(localObject2, "");
            }
            for (;;)
            {
              j += 1;
              break;
              if ((!localHashtable2.containsKey(localObject2)) && (j > 3)) {
                localHashtable2.put(localObject2, "0");
              }
            }
          }
          label492:
          i += 1;
        }
        label499:
        paramString = "" + "http://" + App.serverHostName + "/PayPalShop.aspx?business=" + (String)localHashtable2.get("recipient");
        paramString = paramString + "&currency=" + (String)localHashtable2.get("currency");
        if (localHashtable1.get("itemprice") == null) {
          break label845;
        }
      }
    }
    localObject1 = null;
    label845:
    for (paramString = paramString + "&amount=" + (String)localHashtable1.get("itemprice");; paramString = paramString + "&amount=0")
    {
      localObject2 = paramString + "&return=" + encParam(App.urlScheme);
      paramString = (String)localObject2;
      if (localHashtable1.get("itemname") != null) {
        paramString = (String)localObject2 + "&name=" + encParam((String)localHashtable1.get("itemname"));
      }
      localObject2 = paramString;
      if (localHashtable1.get("itemid") != null) {
        localObject2 = paramString + "&number=" + encParam((String)localHashtable1.get("itemid"));
      }
      paramString = (String)localObject2 + "&test=NO";
      localObject2 = paramString + "&page=" + encParam(str1);
      paramString = null;
      try
      {
        localObject2 = new URI((String)localObject2).toURL();
        paramString = (String)localObject2;
      }
      catch (URISyntaxException localURISyntaxException)
      {
        for (;;)
        {
          Log.e("PayPalProcessing", localURISyntaxException.toString());
        }
      }
      catch (MalformedURLException localMalformedURLException)
      {
        for (;;)
        {
          Log.e("PayPalProcessing", localMalformedURLException.toString());
        }
      }
      buyItem(localHashtable1, paramString);
      return;
    }
  }
}
