package com.qbiki.billing;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Log;
import com.android.vending.billing.util.IabHelper;
import com.android.vending.billing.util.IabHelper.OnConsumeFinishedListener;
import com.android.vending.billing.util.IabHelper.OnIabSetupFinishedListener;
import com.android.vending.billing.util.IabHelper.QueryInventoryFinishedListener;
import com.android.vending.billing.util.IabResult;
import com.android.vending.billing.util.Inventory;
import com.android.vending.billing.util.Purchase;
import com.android.vending.billing.util.Security;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SCIabHelper
  extends IabHelper
{
  public static final int INIT_ERROR_BILLING_NOT_AVAILABLE_ON_DEVICE = 2;
  public static final int INIT_ERROR_INVALID_PUBLIC_KEY = 1;
  public static final int INIT_ERROR_UNKNOWN = -1;
  private static final String PREFS_FILE = "com.qbiki.billing.SCIabHelper";
  public static final String PRODUCT_TYPE_CONSUMABLE = "consumable";
  public static final String PRODUCT_TYPE_NON_CONSUMABLE = "nonConsumable";
  public static final int RESPONSE_RESULT_BAD_PUBLIC_KEY = -30001;
  public static final int RESPONSE_RESULT_SKU_NOT_IN_INVENTORY = -30002;
  private static final String TAG = "SCIabHelper";
  private static Context mContext;
  private static boolean mDebug = false;
  private static SCIabHelper mHelper;
  private static int mInitError = -1;
  private static boolean mSetupDone = false;
  private Set<String> mOwnedSkus = new HashSet();
  private Map<String, Purchase> mPurchases = new HashMap();
  
  public SCIabHelper(Context paramContext, String paramString)
  {
    super(paramContext, paramString);
  }
  
  public static boolean IsProductTypeValid(String paramString)
  {
    return ("consumable".equals(paramString)) || ("nonConsumable".equals(paramString));
  }
  
  private void consumeFromPurchases(String paramString, IabHelper.OnConsumeFinishedListener paramOnConsumeFinishedListener)
  {
    paramString = (Purchase)this.mPurchases.get(paramString);
    if (paramString != null)
    {
      logScDebug("Product present in purchase list. Consuming...");
      mHelper.consumeAsync(paramString, paramOnConsumeFinishedListener);
      return;
    }
    paramOnConsumeFinishedListener.onConsumeFinished(paramString, new IabResult(35534, "SKU is not present in purchase list (not owned?)"));
  }
  
  private String convertSettingsToJson()
  {
    JSONObject localJSONObject = new JSONObject();
    JSONArray localJSONArray = new JSONArray(this.mOwnedSkus);
    try
    {
      localJSONObject.put("ownedSkus", localJSONArray);
      if (mDebug) {
        Log.d("SCIabHelper", "JSON string: " + localJSONObject.toString());
      }
      return localJSONObject.toString();
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        Log.e("SCIabHelper", "Error converting to JSON: " + localJSONException);
      }
    }
  }
  
  public static void disposeInstance()
  {
    if (mHelper != null)
    {
      mHelper.dispose();
      mHelper = null;
    }
  }
  
  public static int getInitErrorCode()
  {
    return mInitError;
  }
  
  public static SCIabHelper getInstance()
  {
    if (mSetupDone) {
      return mHelper;
    }
    return null;
  }
  
  public static void initInstanceAndStartSetup(Context paramContext, String paramString, boolean paramBoolean, IabHelper.OnIabSetupFinishedListener paramOnIabSetupFinishedListener)
  {
    if (mSetupDone) {
      throw new IllegalStateException("SCIAB helper instance is already set up.");
    }
    mContext = paramContext;
    mDebug = paramBoolean;
    logScDebug("Checking public key.");
    try
    {
      Security.generatePublicKey(paramString);
      logScDebug("Creating IAB helper.");
      mHelper = new SCIabHelper(paramContext, paramString);
      mHelper.enableDebugLogging(paramBoolean);
      mHelper.loadPersistedSettings();
      logScDebug("Starting setup.");
      mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener()
      {
        public void onIabSetupFinished(IabResult paramAnonymousIabResult)
        {
          SCIabHelper.logScDebug("Setup finished.");
          if (!paramAnonymousIabResult.isSuccess())
          {
            SCIabHelper.logScError("Problem setting up in-app billing: " + paramAnonymousIabResult);
            if (paramAnonymousIabResult.getResponse() == 3) {
              SCIabHelper.access$202(2);
            }
            if (this.val$listener != null) {
              this.val$listener.onIabSetupFinished(paramAnonymousIabResult);
            }
          }
          while (SCIabHelper.mHelper == null) {
            return;
          }
          SCIabHelper.logScDebug("Helper initial setup successful. Querying inventory.");
          SCIabHelper.mHelper.queryInventoryAsync(new IabHelper.QueryInventoryFinishedListener()
          {
            public void onQueryInventoryFinished(IabResult paramAnonymous2IabResult, Inventory paramAnonymous2Inventory)
            {
              SCIabHelper.logScDebug("Query inventory finished.");
              SCIabHelper.access$402(true);
              if (SCIabHelper.mHelper == null) {}
              do
              {
                do
                {
                  return;
                  if (!paramAnonymous2IabResult.isFailure()) {
                    break;
                  }
                  SCIabHelper.logScError("Failed to query inventory: " + paramAnonymous2IabResult);
                } while (SCIabHelper.1.this.val$listener == null);
                SCIabHelper.1.this.val$listener.onIabSetupFinished(paramAnonymous2IabResult);
                return;
                SCIabHelper.logScDebug("Query inventory was successful.");
                SCIabHelper.mHelper.updatePurchases(paramAnonymous2Inventory);
                SCIabHelper.logScDebug("Query inventory processing finished.");
              } while (SCIabHelper.1.this.val$listener == null);
              SCIabHelper.1.this.val$listener.onIabSetupFinished(new IabResult(0, "Instance setup successful."));
            }
          });
        }
      });
      return;
    }
    catch (IllegalArgumentException paramContext)
    {
      do
      {
        mInitError = 1;
        Log.e("SCIabHelper", "Could not decode public key and initialize IabHelper");
      } while (paramOnIabSetupFinishedListener == null);
      paramOnIabSetupFinishedListener.onIabSetupFinished(new IabResult(35535, "Error decoding public key and initializing IabHelper"));
    }
  }
  
  public static boolean isSetupDone()
  {
    return mSetupDone;
  }
  
  private void loadPersistedSettings()
  {
    readSettingsFromJson(mContext.getSharedPreferences("com.qbiki.billing.SCIabHelper", 0).getString("settings", ""));
  }
  
  private static void logScDebug(String paramString)
  {
    if (mDebug) {
      Log.d("SCIabHelper", paramString);
    }
  }
  
  private static void logScError(String paramString)
  {
    Log.e("SCIabHelper", "SC In-app billing error: " + paramString);
  }
  
  private void persistSettings()
  {
    SharedPreferences.Editor localEditor = mContext.getSharedPreferences("com.qbiki.billing.SCIabHelper", 0).edit();
    localEditor.putString("settings", convertSettingsToJson());
    localEditor.commit();
  }
  
  private void readSettingsFromJson(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {}
    for (;;)
    {
      return;
      try
      {
        paramString = new JSONObject(paramString).getJSONArray("ownedSkus");
        this.mOwnedSkus = new HashSet();
        int i = 0;
        while (i < paramString.length())
        {
          this.mOwnedSkus.add(paramString.getString(i));
          i += 1;
        }
        if (!mDebug) {
          continue;
        }
        paramString = this.mOwnedSkus.iterator();
        while (paramString.hasNext())
        {
          String str = (String)paramString.next();
          Log.d("SCIabHelper", "read persisted owned sku: " + str);
        }
        return;
      }
      catch (JSONException paramString)
      {
        Log.e("SCIabHelper", "Error parsing JSON: " + paramString);
      }
    }
  }
  
  private void updatePurchases(Inventory paramInventory)
  {
    Object localObject = paramInventory.getAllOwnedSkus();
    logScDebug("Owned skus count: " + ((List)localObject).size());
    this.mOwnedSkus.clear();
    this.mPurchases.clear();
    localObject = ((List)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      String str = (String)((Iterator)localObject).next();
      logScDebug("Owned sku: " + str);
      Purchase localPurchase = paramInventory.getPurchase(str);
      if (verifyDeveloperPayload(localPurchase))
      {
        this.mOwnedSkus.add(str);
        this.mPurchases.put(str, localPurchase);
      }
    }
    persistSettings();
  }
  
  public void addOwnedProduct(String paramString)
  {
    if (this.mOwnedSkus.add(paramString)) {
      persistSettings();
    }
  }
  
  public void consumeAsync(final String paramString, final IabHelper.OnConsumeFinishedListener paramOnConsumeFinishedListener)
  {
    if (!this.mPurchases.isEmpty())
    {
      consumeFromPurchases(paramString, paramOnConsumeFinishedListener);
      return;
    }
    logScDebug("Purchases list not yet initialized. Querying...");
    mHelper.queryInventoryAsync(new IabHelper.QueryInventoryFinishedListener()
    {
      public void onQueryInventoryFinished(IabResult paramAnonymousIabResult, Inventory paramAnonymousInventory)
      {
        SCIabHelper.logScDebug("Query inventory finished.");
        if (SCIabHelper.mHelper == null) {}
        do
        {
          return;
          if (!paramAnonymousIabResult.isFailure()) {
            break;
          }
          SCIabHelper.logScError("Failed to query inventory: " + paramAnonymousIabResult);
        } while (paramOnConsumeFinishedListener == null);
        paramOnConsumeFinishedListener.onConsumeFinished(null, paramAnonymousIabResult);
        return;
        SCIabHelper.logScDebug("Query inventory was successful.");
        SCIabHelper.this.updatePurchases(paramAnonymousInventory);
        SCIabHelper.logScDebug("Query inventory processing finished.");
        SCIabHelper.this.consumeFromPurchases(paramString, paramOnConsumeFinishedListener);
      }
    });
  }
  
  public Map<String, Purchase> getPurchases()
  {
    return this.mPurchases;
  }
  
  public boolean isOwnedProduct(String paramString)
  {
    return this.mOwnedSkus.contains(paramString);
  }
  
  public void removeOwnedProduct(String paramString)
  {
    if (this.mOwnedSkus.remove(paramString)) {
      persistSettings();
    }
  }
  
  public boolean verifyDeveloperPayload(Purchase paramPurchase)
  {
    return true;
  }
}
