package com.qbiki.billing;

import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.text.Html;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.android.vending.billing.util.IabHelper.OnConsumeFinishedListener;
import com.android.vending.billing.util.IabHelper.OnIabPurchaseFinishedListener;
import com.android.vending.billing.util.IabResult;
import com.android.vending.billing.util.Purchase;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.NestedFragmentCompat;
import java.util.Map;

public class PurchaseFragment
  extends NestedFragmentCompat
{
  public static final String ARG_PRODUCT_ID = "ARG_PRODUCT_ID";
  public static final String ARG_PRODUCT_TYPE = "ARG_PRODUCT_TYPE";
  public static final String ARG_REDIRECT_URL = "ARG_REDIRECT_URL";
  public static final String ARG_SIMULATION_MODE = "ARG_SIMULATION_MODE";
  private static final int REQUEST = 10001;
  private static final String TAG = "PurchaseFragment";
  private IabHelper.OnConsumeFinishedListener mConsumeFinishedListener = new IabHelper.OnConsumeFinishedListener()
  {
    public void onConsumeFinished(Purchase paramAnonymousPurchase, IabResult paramAnonymousIabResult)
    {
      PurchaseFragment.this.logDebug("Consumption finished. Purchase: " + paramAnonymousPurchase + ", result: " + paramAnonymousIabResult);
      if (SCIabHelper.getInstance() == null) {
        return;
      }
      if (paramAnonymousIabResult.isSuccess())
      {
        PurchaseFragment.this.logDebug("Consumable product consumption successful. Provisioning...");
        PurchaseFragment.this.mHelper.removeOwnedProduct(PurchaseFragment.this.mProductId);
        PurchaseFragment.this.mHelper.getPurchases().remove(paramAnonymousPurchase);
        PurchaseFragment.this.provisionProduct();
      }
      for (;;)
      {
        PurchaseFragment.this.logDebug("End consumption flow.");
        return;
        PurchaseFragment.this.showError("Error while consuming: " + paramAnonymousIabResult);
      }
    }
  };
  private final boolean mDebug = true;
  private SCIabHelper mHelper;
  private boolean mInitializationNeeded = true;
  private String mProductId;
  private String mProductType;
  private ProgressBar mProgressIndicator;
  private IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListener = new IabHelper.OnIabPurchaseFinishedListener()
  {
    private boolean isAlreadyOwned(IabResult paramAnonymousIabResult)
    {
      return paramAnonymousIabResult.getResponse() == 7;
    }
    
    public void onIabPurchaseFinished(IabResult paramAnonymousIabResult, Purchase paramAnonymousPurchase)
    {
      PurchaseFragment.this.logDebug("Purchase finished: " + paramAnonymousIabResult + ", purchase: " + paramAnonymousPurchase);
      if (SCIabHelper.getInstance() == null) {
        return;
      }
      if ((paramAnonymousIabResult.isFailure()) && (!isAlreadyOwned(paramAnonymousIabResult)))
      {
        PurchaseFragment.this.showError("Error purchasing: " + paramAnonymousIabResult);
        return;
      }
      if (!PurchaseFragment.this.mHelper.verifyDeveloperPayload(paramAnonymousPurchase))
      {
        PurchaseFragment.this.showError("Error purchasing. Authenticity verification failed");
        return;
      }
      if ((paramAnonymousPurchase != null) && (!paramAnonymousPurchase.getSku().equals(PurchaseFragment.this.mProductId)))
      {
        PurchaseFragment.this.showError("Product id and purchase sku don't match");
        return;
      }
      if (isAlreadyOwned(paramAnonymousIabResult)) {
        PurchaseFragment.this.logDebug("Product already owned");
      }
      for (;;)
      {
        PurchaseFragment.this.mHelper.addOwnedProduct(PurchaseFragment.this.mProductId);
        if (paramAnonymousPurchase != null) {
          PurchaseFragment.this.mHelper.getPurchases().put(PurchaseFragment.this.mProductId, paramAnonymousPurchase);
        }
        if (!PurchaseFragment.this.mProductType.equals("consumable")) {
          break label285;
        }
        PurchaseFragment.this.logDebug("Consumable product purchased. Starting consumption...");
        if (paramAnonymousPurchase == null) {
          break;
        }
        PurchaseFragment.this.mHelper.consumeAsync(paramAnonymousPurchase, PurchaseFragment.this.mConsumeFinishedListener);
        return;
        PurchaseFragment.this.logDebug("Purchase successful");
      }
      PurchaseFragment.this.mHelper.consumeAsync(PurchaseFragment.this.mProductId, PurchaseFragment.this.mConsumeFinishedListener);
      return;
      label285:
      PurchaseFragment.this.logDebug("Non-consumable product purchased. Provisioning...");
      PurchaseFragment.this.provisionProduct();
    }
  };
  private String mRedirectUrl;
  private Button mRetryButton;
  private View mRootView;
  private View mSimulationContainer;
  private TextView mSimulationMessage;
  private boolean mSimulationMode = false;
  private TextView mSimulationTarget;
  private View mStatusContainer;
  private TextView mStatusText;
  
  public PurchaseFragment() {}
  
  private void initIfNeeded()
  {
    if (!this.mInitializationNeeded) {
      return;
    }
    this.mInitializationNeeded = false;
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mProductId = ((Bundle)localObject).getString("ARG_PRODUCT_ID");
      this.mProductType = ((Bundle)localObject).getString("ARG_PRODUCT_TYPE");
      this.mRedirectUrl = ((Bundle)localObject).getString("ARG_REDIRECT_URL");
      if ((this.mRedirectUrl != null) && (this.mRedirectUrl.length() != 0) && (!this.mRedirectUrl.contains("://"))) {
        this.mRedirectUrl = App.getResourceUrl(this.mRedirectUrl);
      }
      this.mSimulationMode = ((Bundle)localObject).getBoolean("ARG_SIMULATION_MODE", false);
    }
    if ((this.mProductId == null) || (this.mProductId.length() == 0))
    {
      showError("Invalid product ID", "Invalid product ID", false);
      return;
    }
    if (!SCIabHelper.IsProductTypeValid(this.mProductType))
    {
      showError("Invalid product type: must be consumable or non-consumable", "Invalid product type", false);
      return;
    }
    if ((this.mRedirectUrl == null) || (this.mRedirectUrl.length() == 0))
    {
      showError("Invalid product: redirect URL or page ID must be specified", "Invalid redirect URL", false);
      return;
    }
    if (this.mSimulationMode)
    {
      this.mStatusContainer.setVisibility(8);
      this.mSimulationContainer.setVisibility(0);
      this.mSimulationMessage.setText(getString(2131362240, new Object[] { this.mProductId, this.mProductType }));
      localObject = this.mRedirectUrl;
      if (this.mRedirectUrl.startsWith("file://")) {
        localObject = Uri.parse(this.mRedirectUrl).getLastPathSegment();
      }
      this.mSimulationTarget.setText(Html.fromHtml("<a href=\"" + this.mRedirectUrl + "\">" + (String)localObject + "</a> "));
      return;
    }
    if (!App.inAppBillingEnabled)
    {
      showError("In-app Billing not enabled for the app", "In-app Billing not enabled", false);
      return;
    }
    launchPurchase();
  }
  
  private void launchPurchase()
  {
    showProgress(true);
    this.mStatusText.setText(2131362236);
    this.mHelper = SCIabHelper.getInstance();
    if (this.mHelper != null)
    {
      if (this.mHelper.isOwnedProduct(this.mProductId))
      {
        if (this.mProductType.equals("consumable"))
        {
          logDebug("Consumable product already owned, consuming...");
          this.mHelper.consumeAsync(this.mProductId, this.mConsumeFinishedListener);
          return;
        }
        logDebug("Product already owned, provisioning");
        provisionProduct();
        return;
      }
      logDebug("Launching purchase flow for product id: " + this.mProductId + ", " + "product type: " + this.mProductType + ", " + "redirect url: " + this.mRedirectUrl);
      try
      {
        this.mHelper.launchPurchaseFlow(getActivity(), this.mProductId, 10001, this.mPurchaseFinishedListener, "");
        return;
      }
      catch (IllegalStateException localIllegalStateException)
      {
        showError("Cannot start purchase, illegal state: " + localIllegalStateException);
        return;
      }
    }
    if (SCIabHelper.getInitErrorCode() == 1)
    {
      showError("Invalid public key", "Invalid public key", false);
      return;
    }
    if (SCIabHelper.getInitErrorCode() == 2)
    {
      showError(2131362238, "Billing unavailable on device", false);
      return;
    }
    showError("Instance not yet setup");
  }
  
  private void logDebug(String paramString)
  {
    Log.d("PurchaseFragment", paramString);
  }
  
  private void provisionProduct()
  {
    this.mStatusContainer.setVisibility(8);
    Object localObject = App.getPageFragmentInfo(this.mRedirectUrl, getActivity());
    localObject = Fragment.instantiate(getActivity(), ((FragmentInfo)localObject).getClassName(), ((FragmentInfo)localObject).getArguments());
    FragmentTransaction localFragmentTransaction = getChildFragmentManager().beginTransaction();
    localFragmentTransaction.setCustomAnimations(2130968579, 0);
    localFragmentTransaction.add(2131099930, (Fragment)localObject).commit();
    this.mRootView.findViewById(2131099930).setVisibility(0);
    this.mCurrentNestedFragment = ((Fragment)localObject);
  }
  
  private void showError(int paramInt, String paramString, boolean paramBoolean)
  {
    showError(getString(paramInt), paramString, paramBoolean);
  }
  
  private void showError(String paramString)
  {
    showError(2131362237, paramString, true);
  }
  
  private void showError(String paramString1, String paramString2, boolean paramBoolean)
  {
    int i = 0;
    Log.e("PurchaseFragment", "**** IAB Error: " + paramString2);
    this.mStatusText.setText(paramString1);
    showProgress(false);
    paramString1 = this.mRetryButton;
    if (paramBoolean) {}
    for (;;)
    {
      paramString1.setVisibility(i);
      return;
      i = 8;
    }
  }
  
  private void showProgress(boolean paramBoolean)
  {
    int j = 0;
    Object localObject = this.mRetryButton;
    if (paramBoolean)
    {
      i = 8;
      ((Button)localObject).setVisibility(i);
      localObject = this.mProgressIndicator;
      if (!paramBoolean) {
        break label45;
      }
    }
    label45:
    for (int i = j;; i = 8)
    {
      ((ProgressBar)localObject).setVisibility(i);
      return;
      i = 0;
      break;
    }
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mRootView = paramLayoutInflater.inflate(2130903146, paramViewGroup, false);
    this.mStatusContainer = this.mRootView.findViewById(2131099963);
    this.mStatusText = ((TextView)this.mRootView.findViewById(2131099964));
    this.mRetryButton = ((Button)this.mRootView.findViewById(2131099966));
    this.mProgressIndicator = ((ProgressBar)this.mRootView.findViewById(2131099965));
    this.mSimulationContainer = this.mRootView.findViewById(2131099960);
    this.mSimulationMessage = ((TextView)this.mRootView.findViewById(2131099961));
    this.mSimulationTarget = ((TextView)this.mRootView.findViewById(2131099962));
    this.mRetryButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PurchaseFragment.this.launchPurchase();
      }
    });
    this.mSimulationTarget.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        App.showPage(App.getPageFragmentInfo(PurchaseFragment.this.mRedirectUrl, PurchaseFragment.this.getActivity()), PurchaseFragment.this);
      }
    });
    return this.mRootView;
  }
  
  public void onResume()
  {
    super.onResume();
    initIfNeeded();
  }
}
