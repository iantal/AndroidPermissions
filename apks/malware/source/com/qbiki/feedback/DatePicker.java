package com.qbiki.feedback;

import android.content.Context;
import android.text.Editable;
import android.text.InputFilter;
import android.text.InputFilter.LengthFilter;
import android.text.Spanned;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import java.util.Calendar;

public class DatePicker
  extends LinearLayout
{
  private String TAG = "DatePicker";
  private Calendar cal;
  private EditText date_display;
  private Button date_minus;
  View.OnClickListener date_minus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        DatePicker.this.date_display.requestFocus();
        DatePicker.this.cal.add(5, -1);
        DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
        DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
        DatePicker.this.date_display.setText(String.valueOf(DatePicker.this.cal.get(5)));
        DatePicker.this.sendToListener();
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousView.getMessage());
      }
    }
  };
  private Button date_plus;
  View.OnClickListener date_plus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        DatePicker.this.date_display.requestFocus();
        DatePicker.this.cal.add(5, 1);
        DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
        DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
        DatePicker.this.date_display.setText(String.valueOf(DatePicker.this.cal.get(5)));
        DatePicker.this.sendToListener();
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousView.getMessage());
      }
    }
  };
  TextWatcher date_watcher = new TextWatcher()
  {
    public void afterTextChanged(Editable paramAnonymousEditable)
    {
      try
      {
        if (paramAnonymousEditable.toString().length() > 0)
        {
          DatePicker.this.cal.set(5, Integer.parseInt(paramAnonymousEditable.toString()));
          DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
          DatePicker.this.sendToListener();
        }
        return;
      }
      catch (NumberFormatException paramAnonymousEditable)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousEditable.getMessage());
        return;
      }
      catch (Exception paramAnonymousEditable)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousEditable.getMessage());
      }
    }
    
    public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
    
    public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
  };
  private int endYear = 2100;
  DateWatcher mDateWatcher = null;
  View.OnFocusChangeListener mLostFocusYear = new View.OnFocusChangeListener()
  {
    public void onFocusChange(View paramAnonymousView, boolean paramAnonymousBoolean)
    {
      if (!paramAnonymousBoolean) {
        DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
      }
    }
  };
  private EditText month_display;
  private Button month_minus;
  View.OnClickListener month_minus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        DatePicker.this.cal.add(2, -1);
        DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
        DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
        DatePicker.this.date_display.setText(String.valueOf(DatePicker.this.cal.get(5)));
        DatePicker.this.changeFilter();
        DatePicker.this.sendToListener();
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousView.getMessage());
      }
    }
  };
  private Button month_plus;
  View.OnClickListener month_plus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        DatePicker.this.cal.add(2, 1);
        DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
        DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
        DatePicker.this.date_display.setText(String.valueOf(DatePicker.this.cal.get(5)));
        DatePicker.this.changeFilter();
        DatePicker.this.sendToListener();
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousView.getMessage());
      }
    }
  };
  String[] months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
  private View myPickerView;
  private int startYear = 1900;
  private EditText year_display;
  private Button year_minus;
  View.OnClickListener year_minus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        DatePicker.this.year_display.requestFocus();
        if (DatePicker.this.cal.get(1) <= DatePicker.this.startYear) {
          DatePicker.this.cal.set(1, DatePicker.this.endYear);
        }
        for (;;)
        {
          DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
          DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
          DatePicker.this.date_display.setText(String.valueOf(DatePicker.this.cal.get(5)));
          DatePicker.this.changeFilter();
          DatePicker.this.sendToListener();
          return;
          DatePicker.this.cal.add(1, -1);
        }
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousView.getMessage());
      }
    }
  };
  private Button year_plus;
  View.OnClickListener year_plus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        DatePicker.this.year_display.requestFocus();
        if (DatePicker.this.cal.get(1) >= DatePicker.this.endYear) {
          DatePicker.this.cal.set(1, DatePicker.this.startYear);
        }
        for (;;)
        {
          DatePicker.this.month_display.setText(DatePicker.this.months[DatePicker.this.cal.get(2)]);
          DatePicker.this.year_display.setText(String.valueOf(DatePicker.this.cal.get(1)));
          DatePicker.this.date_display.setText(String.valueOf(DatePicker.this.cal.get(5)));
          DatePicker.this.changeFilter();
          DatePicker.this.sendToListener();
          return;
          DatePicker.this.cal.add(1, 1);
        }
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e(DatePicker.this.TAG, paramAnonymousView.getMessage());
      }
    }
  };
  TextWatcher year_watcher = new TextWatcher()
  {
    public void afterTextChanged(Editable paramAnonymousEditable)
    {
      for (;;)
      {
        try
        {
          int i;
          if (paramAnonymousEditable.toString().length() == 4)
          {
            i = Integer.parseInt(paramAnonymousEditable.toString());
            if (i > DatePicker.this.endYear) {
              DatePicker.this.cal.set(1, DatePicker.this.endYear);
            }
          }
          else
          {
            DatePicker.this.sendToListener();
            return;
          }
          if (i < DatePicker.this.startYear) {
            DatePicker.this.cal.set(1, DatePicker.this.startYear);
          } else {
            DatePicker.this.cal.set(1, i);
          }
        }
        catch (Exception paramAnonymousEditable)
        {
          Log.e(DatePicker.this.TAG, paramAnonymousEditable.getMessage());
          return;
        }
      }
    }
    
    public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
    
    public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
  };
  
  public DatePicker(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init(paramContext);
  }
  
  private void changeFilter()
  {
    try
    {
      this.date_display.setFilters(new InputFilter[] { new InputFilterMinMax(1, this.cal.getActualMaximum(5)) });
      return;
    }
    catch (Exception localException)
    {
      this.date_display.setText("" + this.cal.get(5));
      Log.e(this.TAG, localException.getMessage());
    }
  }
  
  private void init(Context paramContext)
  {
    this.myPickerView = ((LayoutInflater)paramContext.getSystemService("layout_inflater")).inflate(2130903111, null);
    addView(this.myPickerView);
    initializeReference();
  }
  
  private void initData()
  {
    this.cal = Calendar.getInstance();
    this.month_display.setText(this.months[this.cal.get(2)]);
    this.date_display.setText(String.valueOf(this.cal.get(5)));
    this.year_display.setText(String.valueOf(this.cal.get(1)));
  }
  
  private void initDisplay()
  {
    this.month_display.setText(this.months[this.cal.get(2)]);
    this.date_display.setText(String.valueOf(this.cal.get(5)));
    this.year_display.setText(String.valueOf(this.cal.get(1)));
  }
  
  private void initFilterNumericDigit()
  {
    try
    {
      this.date_display.setFilters(new InputFilter[] { new InputFilterMinMax(1, this.cal.getActualMaximum(5)) });
      InputFilter.LengthFilter localLengthFilter = new InputFilter.LengthFilter(4);
      this.year_display.setFilters(new InputFilter[] { localLengthFilter });
      return;
    }
    catch (Exception localException)
    {
      Log.e(this.TAG, localException.getMessage());
    }
  }
  
  private void initializeReference()
  {
    this.month_plus = ((Button)this.myPickerView.findViewById(2131099866));
    this.month_plus.setOnClickListener(this.month_plus_listener);
    this.month_display = ((EditText)this.myPickerView.findViewById(2131099867));
    this.month_display.setTextColor(-16777216);
    this.month_minus = ((Button)this.myPickerView.findViewById(2131099868));
    this.month_minus.setOnClickListener(this.month_minus_listener);
    this.date_plus = ((Button)this.myPickerView.findViewById(2131099870));
    this.date_plus.setOnClickListener(this.date_plus_listener);
    this.date_display = ((EditText)this.myPickerView.findViewById(2131099871));
    this.date_display.addTextChangedListener(this.date_watcher);
    this.date_display.setTextColor(-16777216);
    this.date_minus = ((Button)this.myPickerView.findViewById(2131099872));
    this.date_minus.setOnClickListener(this.date_minus_listener);
    this.year_plus = ((Button)this.myPickerView.findViewById(2131099874));
    this.year_plus.setOnClickListener(this.year_plus_listener);
    this.year_display = ((EditText)this.myPickerView.findViewById(2131099875));
    this.year_display.setOnFocusChangeListener(this.mLostFocusYear);
    this.year_display.addTextChangedListener(this.year_watcher);
    this.year_display.setTextColor(-16777216);
    this.year_minus = ((Button)this.myPickerView.findViewById(2131099876));
    this.year_minus.setOnClickListener(this.year_minus_listener);
    initData();
    initFilterNumericDigit();
  }
  
  private void sendToListener()
  {
    if (this.mDateWatcher != null) {
      this.mDateWatcher.onDateChanged(this.cal);
    }
  }
  
  private void swapStartEndYear()
  {
    if (this.startYear > this.endYear)
    {
      int i = this.endYear;
      this.endYear = this.startYear;
      this.startYear = i;
    }
    this.cal.set(1, this.endYear);
    initDisplay();
  }
  
  public Calendar getCal()
  {
    return this.cal;
  }
  
  public int getEndYear()
  {
    return this.endYear;
  }
  
  public int getStartYear()
  {
    return this.startYear;
  }
  
  public void removeDateChangedListener()
  {
    this.mDateWatcher = null;
  }
  
  public void reset()
  {
    initData();
  }
  
  public void setCal(Calendar paramCalendar)
  {
    this.cal = paramCalendar;
  }
  
  public void setDateChangedListener(DateWatcher paramDateWatcher)
  {
    this.mDateWatcher = paramDateWatcher;
  }
  
  public void setEndYear(int paramInt)
    throws Exception
  {
    if ((paramInt < 2100) && (paramInt > 1900))
    {
      this.endYear = paramInt;
      swapStartEndYear();
      return;
    }
    throw new NumberFormatException("endYear should be in the range of 1900 to 2100");
  }
  
  public void setStartYear(int paramInt)
    throws Exception
  {
    if ((paramInt < 2100) && (paramInt > 1900))
    {
      this.startYear = paramInt;
      swapStartEndYear();
      return;
    }
    throw new NumberFormatException("StartYear should be in the range of 1900 to 2100");
  }
  
  public static abstract interface DateWatcher
  {
    public abstract void onDateChanged(Calendar paramCalendar);
  }
  
  class InputFilterMinMax
    implements InputFilter
  {
    private int max;
    private int min;
    
    public InputFilterMinMax(int paramInt1, int paramInt2)
    {
      this.min = paramInt1;
      this.max = paramInt2;
    }
    
    public InputFilterMinMax(String paramString1, String paramString2)
    {
      this.min = Integer.parseInt(paramString1);
      this.max = Integer.parseInt(paramString2);
    }
    
    private boolean isInRange(int paramInt1, int paramInt2, int paramInt3)
    {
      if (paramInt2 > paramInt1) {
        if ((paramInt3 < paramInt1) || (paramInt3 > paramInt2)) {}
      }
      while ((paramInt3 >= paramInt2) && (paramInt3 <= paramInt1))
      {
        return true;
        return false;
      }
      return false;
    }
    
    public CharSequence filter(CharSequence paramCharSequence, int paramInt1, int paramInt2, Spanned paramSpanned, int paramInt3, int paramInt4)
    {
      try
      {
        paramInt1 = Integer.parseInt(paramSpanned.toString() + paramCharSequence.toString());
        boolean bool = isInRange(this.min, this.max, paramInt1);
        if (bool) {
          return null;
        }
      }
      catch (NumberFormatException paramCharSequence) {}
      return "";
    }
  }
}
