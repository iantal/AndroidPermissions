package com.qbiki.feedback;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.net.Uri;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.Page;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StringUtil;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.commons.codec.binary.Base64;

public class FieldProcessing
{
  private static final String TAG = "FieldProcessing";
  private static String pageUrl = null;
  private static Activity parentAct;
  private static String theHTML = null;
  
  static
  {
    parentAct = null;
  }
  
  public FieldProcessing() {}
  
  public static ArrayList<Object> generateFieldsFromHtmlString(Activity paramActivity, String paramString, boolean paramBoolean)
  {
    parentAct = paramActivity;
    pageUrl = paramString;
    paramString = Uri.parse(pageUrl).getLastPathSegment();
    paramActivity = "";
    try
    {
      theHTML = DataUtil.readString(App.getResourceStream(paramString));
      paramString = theHTML;
      paramActivity = paramString;
    }
    catch (IOException paramString)
    {
      Object localObject1;
      ArrayList localArrayList;
      for (;;)
      {
        int i;
        int j;
        Log.e("FieldProcessing", "Error getting rawHtml");
      }
      paramActivity = (String)localObject1 + paramString;
      paramString = new ArrayList();
      paramString.add(localArrayList);
      paramString.add(paramActivity);
    }
    localObject1 = "";
    i = 0;
    localArrayList = new ArrayList();
    j = paramActivity.indexOf("[%");
    paramString = paramActivity;
    while (j != -1)
    {
      localObject1 = (String)localObject1 + paramString.substring(0, j);
      Object localObject2 = paramString.substring(j + 2);
      int k = ((String)localObject2).indexOf("%]");
      paramString = (String)localObject2;
      j = i;
      paramActivity = (Activity)localObject1;
      if (k != -1)
      {
        paramActivity = ((String)localObject2).substring(0, k);
        paramString = ((String)localObject2).substring(k + 2);
        j = i;
        if (paramActivity.substring(0, 1).equals("="))
        {
          paramActivity = paramActivity.substring(1).split(";");
          j = i;
          if (paramActivity[0].equals("field"))
          {
            localObject2 = new Field(Integer.toString(i));
            ((Field)localObject2).setFieldLabel(paramActivity[1]);
            ((Field)localObject2).setFieldType(paramActivity[2]);
            ((Field)localObject2).setFieldRequired(paramActivity[3]);
            localArrayList.add(localObject2);
            j = i + 1;
          }
        }
        paramActivity = (String)localObject1 + "";
      }
      k = paramString.indexOf("[%");
      i = j;
      localObject1 = paramActivity;
      j = k;
    }
    return paramString;
  }
  
  public static String insertFieldValues(ArrayList<String> paramArrayList1, ArrayList<String> paramArrayList2)
  {
    Object localObject1 = Uri.parse(pageUrl).getLastPathSegment();
    ArrayList localArrayList = ((Page)App.appConfig.getPages().get(localObject1)).getFields();
    Object localObject2 = theHTML;
    int i = 0;
    if (i < localArrayList.size())
    {
      Field localField = (Field)localArrayList.get(i);
      Object localObject3 = (String)paramArrayList2.get(paramArrayList1.indexOf(localField.getFieldLabel()));
      if ((localField.getFieldRequired().equals("required")) && (StringUtil.isEmpty((String)localObject3)))
      {
        DialogUtil.showAlert(parentAct, "Required field", localField.getFieldLabel() + " can not be empty", null, null);
        return null;
      }
      String str = "[%=field;" + localField.getFieldLabel() + ";" + localField.getFieldType() + ";" + localField.getFieldRequired() + "%]";
      if (localField.getFieldType().equals("location")) {
        localObject1 = ((String)localObject2).replace(str, (CharSequence)localObject3);
      }
      for (;;)
      {
        i += 1;
        localObject2 = localObject1;
        break;
        if (localField.getFieldType().equals("date"))
        {
          localObject1 = ((String)localObject2).replace(str, (CharSequence)localObject3);
        }
        else if (localField.getFieldType().equals("time"))
        {
          localObject1 = ((String)localObject2).replace(str, (CharSequence)localObject3);
        }
        else if (localField.getFieldType().equals("text"))
        {
          localObject1 = ((String)localObject2).replace(str, (CharSequence)localObject3);
        }
        else if (localField.getFieldType().equals("email"))
        {
          localObject1 = ((String)localObject2).replace(str, (CharSequence)localObject3);
        }
        else if (!localField.getFieldType().equals("image"))
        {
          localObject1 = localObject2;
          if (!localField.getFieldType().equals("camera")) {}
        }
        else
        {
          localObject1 = "";
          localObject3 = ImageUtil.decodeBitmapFromStream(Uri.parse((String)localObject3), 200, parentAct);
          if (localObject3 != null)
          {
            localObject1 = new ByteArrayOutputStream();
            ((Bitmap)localObject3).compress(Bitmap.CompressFormat.JPEG, 80, (OutputStream)localObject1);
            localObject1 = new String(Base64.encodeBase64(((ByteArrayOutputStream)localObject1).toByteArray()));
            localObject1 = "<img width=\"160\" src=\"data:image/jpg;base64," + (String)localObject1 + "\">";
          }
          localObject1 = ((String)localObject2).replace(str, (CharSequence)localObject1);
        }
      }
    }
    theHTML = (String)localObject2;
    return theHTML;
  }
}
