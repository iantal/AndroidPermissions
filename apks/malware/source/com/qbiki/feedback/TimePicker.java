package com.qbiki.feedback;

import android.content.Context;
import android.text.Editable;
import android.text.InputFilter;
import android.text.Spanned;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import java.util.Calendar;

public class TimePicker
  extends LinearLayout
{
  public static final int HOUR_12 = 12;
  public static final int HOUR_24 = 24;
  private Button am_pm;
  View.OnClickListener am_pm_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      try
      {
        if (TimePicker.this.cal.get(9) == 0) {
          TimePicker.this.cal.set(9, 1);
        }
        for (;;)
        {
          TimePicker.this.sendToDisplay();
          return;
          TimePicker.this.cal.set(9, 0);
        }
        return;
      }
      catch (Exception paramAnonymousView)
      {
        paramAnonymousView.printStackTrace();
      }
    }
  };
  private Calendar cal;
  private int currentTimeFormate = 12;
  private EditText hour_display;
  private Button hour_minus;
  View.OnClickListener hour_minus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      TimePicker.this.hour_display.requestFocus();
      try
      {
        if (TimePicker.this.currentTimeFormate == 12) {
          TimePicker.this.cal.add(10, -1);
        }
        for (;;)
        {
          TimePicker.this.sendToDisplay();
          return;
          TimePicker.this.cal.add(11, -1);
        }
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e("", paramAnonymousView.toString());
      }
    }
  };
  private Button hour_plus;
  View.OnClickListener hour_plus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      TimePicker.this.hour_display.requestFocus();
      try
      {
        if (TimePicker.this.currentTimeFormate == 12) {
          TimePicker.this.cal.add(10, 1);
        }
        for (;;)
        {
          TimePicker.this.sendToDisplay();
          return;
          TimePicker.this.cal.add(11, 1);
        }
        return;
      }
      catch (Exception paramAnonymousView)
      {
        Log.e("", paramAnonymousView.toString());
      }
    }
  };
  TextWatcher hour_watcher = new TextWatcher()
  {
    public void afterTextChanged(Editable paramAnonymousEditable)
    {
      try
      {
        if (paramAnonymousEditable.toString().length() > 0)
        {
          if (TimePicker.this.currentTimeFormate == 12) {
            TimePicker.this.cal.set(10, Integer.parseInt(paramAnonymousEditable.toString()));
          }
          for (;;)
          {
            TimePicker.this.sendToListener();
            return;
            TimePicker.this.cal.set(11, Integer.parseInt(paramAnonymousEditable.toString()));
          }
        }
        return;
      }
      catch (Exception paramAnonymousEditable)
      {
        paramAnonymousEditable.printStackTrace();
      }
    }
    
    public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
    
    public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
  };
  private boolean isAMPMVisible = true;
  TimeWatcher mTimeWatcher = null;
  private EditText min_display;
  private Button min_minus;
  View.OnClickListener min_minus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      TimePicker.this.min_display.requestFocus();
      try
      {
        TimePicker.this.cal.add(12, -1);
        TimePicker.this.sendToDisplay();
        return;
      }
      catch (Exception paramAnonymousView)
      {
        paramAnonymousView.printStackTrace();
      }
    }
  };
  private Button min_plus;
  View.OnClickListener min_plus_listener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      TimePicker.this.min_display.requestFocus();
      try
      {
        TimePicker.this.cal.add(12, 1);
        TimePicker.this.sendToDisplay();
        return;
      }
      catch (Exception paramAnonymousView)
      {
        paramAnonymousView.printStackTrace();
      }
    }
  };
  TextWatcher min_watcher = new TextWatcher()
  {
    public void afterTextChanged(Editable paramAnonymousEditable)
    {
      try
      {
        if (paramAnonymousEditable.toString().length() > 0)
        {
          TimePicker.this.cal.set(12, Integer.parseInt(paramAnonymousEditable.toString()));
          TimePicker.this.sendToListener();
        }
        return;
      }
      catch (Exception paramAnonymousEditable)
      {
        paramAnonymousEditable.printStackTrace();
      }
    }
    
    public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
    
    public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
  };
  private View myPickerView;
  
  public TimePicker(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init(paramContext);
  }
  
  private void init(Context paramContext)
  {
    this.myPickerView = ((LayoutInflater)paramContext.getSystemService("layout_inflater")).inflate(2130903116, null);
    addView(this.myPickerView);
    initializeReference();
  }
  
  private void initData()
  {
    if (this.currentTimeFormate == 12)
    {
      this.hour_display.setText(String.valueOf(this.cal.get(10)));
      sendToDisplay();
    }
    for (;;)
    {
      this.min_display.setText(String.valueOf(this.cal.get(12)));
      return;
      this.hour_display.setText(String.valueOf(this.cal.get(11)));
    }
  }
  
  private void initFilterNumericDigit()
  {
    try
    {
      if (this.currentTimeFormate == 12) {
        this.hour_display.setFilters(new InputFilter[] { new InputFilterMinMax(0, 11) });
      }
      for (;;)
      {
        this.min_display.setFilters(new InputFilter[] { new InputFilterMinMax(0, 59) });
        return;
        this.hour_display.setFilters(new InputFilter[] { new InputFilterMinMax(0, 23) });
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private void initializeReference()
  {
    this.hour_plus = ((Button)this.myPickerView.findViewById(2131099887));
    this.hour_plus.setOnClickListener(this.hour_plus_listener);
    this.hour_display = ((EditText)this.myPickerView.findViewById(2131099888));
    this.hour_display.addTextChangedListener(this.hour_watcher);
    this.hour_display.setTextColor(-16777216);
    this.hour_minus = ((Button)this.myPickerView.findViewById(2131099889));
    this.hour_minus.setOnClickListener(this.hour_minus_listener);
    this.min_plus = ((Button)this.myPickerView.findViewById(2131099891));
    this.min_plus.setOnClickListener(this.min_plus_listener);
    this.min_display = ((EditText)this.myPickerView.findViewById(2131099892));
    this.min_display.addTextChangedListener(this.min_watcher);
    this.min_display.setTextColor(-16777216);
    this.min_minus = ((Button)this.myPickerView.findViewById(2131099893));
    this.min_minus.setOnClickListener(this.min_minus_listener);
    this.am_pm = ((Button)this.myPickerView.findViewById(2131099894));
    this.am_pm.setOnClickListener(this.am_pm_listener);
    this.am_pm.setTextColor(-16777216);
    this.cal = Calendar.getInstance();
    initData();
    initFilterNumericDigit();
  }
  
  private void sendToDisplay()
  {
    if (this.currentTimeFormate == 12) {
      this.hour_display.setText(String.valueOf(this.cal.get(10)));
    }
    for (;;)
    {
      this.min_display.setText(String.valueOf(this.cal.get(12)));
      if (this.isAMPMVisible)
      {
        if (this.cal.get(9) != 0) {
          break;
        }
        this.am_pm.setText("AM");
      }
      return;
      this.hour_display.setText(String.valueOf(this.cal.get(11)));
    }
    this.am_pm.setText("PM");
  }
  
  /* Error */
  private void sendToListener()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 83	com/qbiki/feedback/TimePicker:mTimeWatcher	Lcom/qbiki/feedback/TimePicker$TimeWatcher;
    //   6: ifnull +48 -> 54
    //   9: aload_0
    //   10: getfield 64	com/qbiki/feedback/TimePicker:currentTimeFormate	I
    //   13: bipush 12
    //   15: if_icmpne +42 -> 57
    //   18: aload_0
    //   19: getfield 83	com/qbiki/feedback/TimePicker:mTimeWatcher	Lcom/qbiki/feedback/TimePicker$TimeWatcher;
    //   22: aload_0
    //   23: getfield 104	com/qbiki/feedback/TimePicker:cal	Ljava/util/Calendar;
    //   26: bipush 10
    //   28: invokevirtual 147	java/util/Calendar:get	(I)I
    //   31: aload_0
    //   32: getfield 104	com/qbiki/feedback/TimePicker:cal	Ljava/util/Calendar;
    //   35: bipush 12
    //   37: invokevirtual 147	java/util/Calendar:get	(I)I
    //   40: aload_0
    //   41: getfield 104	com/qbiki/feedback/TimePicker:cal	Ljava/util/Calendar;
    //   44: bipush 9
    //   46: invokevirtual 147	java/util/Calendar:get	(I)I
    //   49: invokeinterface 230 4 0
    //   54: aload_0
    //   55: monitorexit
    //   56: return
    //   57: aload_0
    //   58: getfield 83	com/qbiki/feedback/TimePicker:mTimeWatcher	Lcom/qbiki/feedback/TimePicker$TimeWatcher;
    //   61: aload_0
    //   62: getfield 104	com/qbiki/feedback/TimePicker:cal	Ljava/util/Calendar;
    //   65: bipush 11
    //   67: invokevirtual 147	java/util/Calendar:get	(I)I
    //   70: aload_0
    //   71: getfield 104	com/qbiki/feedback/TimePicker:cal	Ljava/util/Calendar;
    //   74: bipush 12
    //   76: invokevirtual 147	java/util/Calendar:get	(I)I
    //   79: iconst_m1
    //   80: invokeinterface 230 4 0
    //   85: goto -31 -> 54
    //   88: astore_1
    //   89: aload_0
    //   90: monitorexit
    //   91: aload_1
    //   92: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	93	0	this	TimePicker
    //   88	4	1	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	54	88	finally
    //   57	85	88	finally
  }
  
  public Calendar getCal()
  {
    return this.cal;
  }
  
  public int getCurrentTimeFormate()
  {
    return this.currentTimeFormate;
  }
  
  public void removeTimeChangedListener()
  {
    this.mTimeWatcher = null;
  }
  
  public void reset()
  {
    this.cal = Calendar.getInstance();
    initFilterNumericDigit();
    initData();
    sendToDisplay();
  }
  
  public void setAMPMVisible(boolean paramBoolean)
  {
    this.isAMPMVisible = paramBoolean;
    if (!paramBoolean) {
      this.am_pm.setVisibility(8);
    }
  }
  
  public void setCal(Calendar paramCalendar)
  {
    this.cal = paramCalendar;
  }
  
  public void setCalender(Calendar paramCalendar)
  {
    this.cal = paramCalendar;
    initFilterNumericDigit();
    sendToDisplay();
  }
  
  public void setCurrentTimeFormate(int paramInt)
  {
    this.currentTimeFormate = paramInt;
    if (paramInt == 24)
    {
      this.isAMPMVisible = false;
      this.am_pm.setVisibility(8);
    }
    initFilterNumericDigit();
    sendToDisplay();
  }
  
  public void setTimeChangedListener(TimeWatcher paramTimeWatcher)
  {
    this.mTimeWatcher = paramTimeWatcher;
  }
  
  class InputFilterMinMax
    implements InputFilter
  {
    private int max;
    private int min;
    
    public InputFilterMinMax(int paramInt1, int paramInt2)
    {
      this.min = paramInt1;
      this.max = paramInt2;
    }
    
    public InputFilterMinMax(String paramString1, String paramString2)
    {
      this.min = Integer.parseInt(paramString1);
      this.max = Integer.parseInt(paramString2);
    }
    
    private boolean isInRange(int paramInt1, int paramInt2, int paramInt3)
    {
      if (paramInt2 > paramInt1) {
        if ((paramInt3 < paramInt1) || (paramInt3 > paramInt2)) {}
      }
      while ((paramInt3 >= paramInt2) && (paramInt3 <= paramInt1))
      {
        return true;
        return false;
      }
      return false;
    }
    
    public CharSequence filter(CharSequence paramCharSequence, int paramInt1, int paramInt2, Spanned paramSpanned, int paramInt3, int paramInt4)
    {
      try
      {
        paramInt1 = Integer.parseInt(paramSpanned.toString() + paramCharSequence.toString());
        boolean bool = isInRange(this.min, this.max, paramInt1);
        if (bool) {
          return null;
        }
      }
      catch (NumberFormatException paramCharSequence) {}
      return "";
    }
  }
  
  public static abstract interface TimeWatcher
  {
    public abstract void onTimeChanged(int paramInt1, int paramInt2, int paramInt3);
  }
}
