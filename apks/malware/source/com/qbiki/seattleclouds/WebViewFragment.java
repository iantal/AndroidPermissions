package com.qbiki.seattleclouds;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Picture;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.GestureDetectorCompat;
import android.util.Log;
import android.view.GestureDetector.OnDoubleTapListener;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnKeyListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.webkit.DownloadListener;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebView.HitTestResult;
import android.webkit.WebViewClient;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.ads.AdManager;
import com.qbiki.feedback.FeedbackFragment;
import com.qbiki.feedback.FieldProcessing;
import com.qbiki.modules.appshare.AppShare;
import com.qbiki.modules.favorites.Favorites;
import com.qbiki.modules.login.LoginFragment;
import com.qbiki.modules.rateandreview.RateAndReviewHandle;
import com.qbiki.shoppingcart.ShoppingCart;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.IntentUtil;
import com.qbiki.util.WebViewUtil;
import com.qbiki.util.YouTubeEmbedProcessor;
import com.qbiki.widget.SoftKeyboardDetectingLinearLayout;
import com.qbiki.widget.SoftKeyboardDetectingLinearLayout.SoftKeyboardVisibilityListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.apache.commons.io.FileUtils;

public class WebViewFragment
  extends SCFragment
{
  public static final String ARG_HTML_STRING = "ARG_HTML_STRING";
  public static final String ARG_URL = "ARG_URL";
  private static final int CONTENT_REQUEST = 1055;
  private static final boolean DEBUG = false;
  private static final boolean DEBUG_HTML_SELECT_WORKAROUND = false;
  private static final String EXTERNAL_PICTURES_STORAGE_DIRECTORY = Environment.getExternalStorageDirectory().getAbsolutePath() + "/SendCart/";
  private static final String TAG = "WebViewFragment";
  private static final String TEMP_PHOTO_NAME = "temp.jpg";
  private final int REQUEST_SEND = 4820;
  private Timer htmlSelectWorkaroundTimer;
  private AdManager mAdManager;
  private String mBaseUrl;
  private SoftKeyboardDetectingLinearLayout mContainerLinearLayout;
  private boolean mEnableHtmlSelectWorkaround = false;
  private String mHtmlString;
  private boolean mIsRootFragment = false;
  private long mLastUserTapTime = 0L;
  private String mPageUrl;
  protected ProgressBar mProgressBar;
  private boolean mResumeHtmlSelectWorkaround = true;
  private boolean mSoftKeyboardVisible = false;
  private View mView;
  protected WebView mWebView;
  private String mYouTubeVideoId = null;
  
  public WebViewFragment() {}
  
  private void customizeHTMLContent()
  {
    Object localObject = Uri.parse(this.mPageUrl).getLastPathSegment();
    localObject = (Page)App.appConfig.getPages().get(localObject);
    Bundle localBundle = new Bundle();
    localBundle.putParcelableArrayList("feedbackfields", ((Page)localObject).fields);
    localBundle.putString("pageid", ((Page)localObject).getId());
    localBundle.putBoolean("isOnlyEnterData", true);
    localBundle.putString("submitbutton", "Done");
    startActivityForResult(App.getPageIntent(new FragmentInfo(FeedbackFragment.class.getName(), localBundle), getActivity()), 1055);
  }
  
  private boolean disableHtmlSelectWorkaroundIfEnabled()
  {
    if (this.htmlSelectWorkaroundTimer != null)
    {
      this.htmlSelectWorkaroundTimer.cancel();
      this.htmlSelectWorkaroundTimer = null;
      return true;
    }
    return false;
  }
  
  private void enableHtmlSelectWorkaround()
  {
    this.htmlSelectWorkaroundTimer = new Timer();
    this.htmlSelectWorkaroundTimer.schedule(new TimerTask()
    {
      public void run()
      {
        if ((WebViewFragment.this.getActivity() == null) || (WebViewFragment.this.getActivity().isFinishing()) || (WebViewFragment.this.mSoftKeyboardVisible)) {
          return;
        }
        WebViewFragment.this.getActivity().runOnUiThread(new Runnable()
        {
          public void run()
          {
            if ((WebViewFragment.this.getActivity() == null) || (WebViewFragment.this.getActivity().isFinishing()) || (WebViewFragment.this.mSoftKeyboardVisible)) {
              return;
            }
            WebViewFragment.this.mWebView.clearFocus();
          }
        });
      }
    }, 1000L, 750L);
  }
  
  @TargetApi(11)
  private void enableWorkaroundForKitKatWebViewHardwareAccellerationIssue()
  {
    if ((Build.VERSION.SDK_INT >= 19) && (App.appConfig.getNavigationType() == 4) && (App.appConfig.getNavigationSettings().isNavigationItemsOnBottom())) {
      this.mView.setLayerType(1, null);
    }
  }
  
  private String hitToString(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "UNRECOGNIZED_TYPE (" + paramInt + ")";
    case 1: 
      return "ANCHOR_TYPE (" + paramInt + ")";
    case 9: 
      return "EDIT_TEXT_TYPE (" + paramInt + ")";
    case 4: 
      return "EMAIL_TYPE (" + paramInt + ")";
    case 3: 
      return "GEO_TYPE (" + paramInt + ")";
    case 6: 
      return "IMAGE_ANCHOR_TYPE (" + paramInt + ")";
    case 5: 
      return "IMAGE_TYPE (" + paramInt + ")";
    case 2: 
      return "PHONE_TYPE (" + paramInt + ")";
    case 7: 
      return "SRC_ANCHOR_TYPE (" + paramInt + ")";
    case 8: 
      return "SRC_IMAGE_ANCHOR_TYPE (" + paramInt + ")";
    }
    return "UNKNOWN_TYPE (" + paramInt + ")";
  }
  
  private void loadUrl(String paramString)
  {
    this.mWebView.loadUrl(paramString);
  }
  
  private void sendCaptureOfHTMLContent()
  {
    if (!"mounted".equals(Environment.getExternalStorageState()))
    {
      DialogUtil.showAlert(getActivity(), 2131361916, 2131362070, null, 17301543);
      return;
    }
    Object localObject2 = this.mWebView.capturePicture();
    Object localObject1 = Bitmap.createBitmap(((Picture)localObject2).getWidth(), ((Picture)localObject2).getHeight(), Bitmap.Config.RGB_565);
    ((Picture)localObject2).draw(new Canvas((Bitmap)localObject1));
    if (localObject1 != null)
    {
      localObject2 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY);
      if (!((File)localObject2).exists()) {
        ((File)localObject2).mkdirs();
      }
      localObject2 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.jpg");
      try
      {
        ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, 90, new FileOutputStream((File)localObject2));
        Log.v("WebViewFragment", "Photo Saved OK");
        localObject1 = new Intent("android.intent.action.SEND");
        ((Intent)localObject1).setType("image/jpeg");
        ((Intent)localObject1).putExtra("android.intent.extra.STREAM", Uri.parse("file://" + EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.jpg"));
        localObject1 = Intent.createChooser((Intent)localObject1, "Share via");
        getClass();
        startActivityForResult((Intent)localObject1, 4820);
        return;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        DialogUtil.showAlert(getActivity(), 2131361916, 2131361940, null, 17301543);
        Log.e("WebViewFragment", "Photo save: " + localFileNotFoundException, localFileNotFoundException);
        return;
      }
    }
    DialogUtil.showAlert(getActivity(), 2131361916, 2131361940, null, 17301543);
  }
  
  private void setupAdViews()
  {
    LinearLayout localLinearLayout = (LinearLayout)this.mView.findViewById(2131100259);
    this.mAdManager = new AdManager().showAds(getActivity(), localLinearLayout, this.mPageUrl);
  }
  
  private void setupWebView()
  {
    WebViewUtil.setDefaultSettings(this.mWebView);
    Page localPage = App.getPageForUrl(this.mPageUrl);
    if ((localPage != null) && (localPage.isZoomEnabled()))
    {
      this.mWebView.getSettings().setSupportZoom(true);
      this.mWebView.getSettings().setBuiltInZoomControls(true);
    }
    this.mWebView.setDownloadListener(new WebViewDownloadListener());
    this.mWebView.setOnTouchListener(new WebViewTouchListener());
    this.mWebView.setOnKeyListener(new WebViewKeyListener());
    this.mWebView.setWebViewClient(onCreateWebViewClient());
  }
  
  public String getBaseUrl()
  {
    return this.mBaseUrl;
  }
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mPageUrl = ((Bundle)localObject).getString("ARG_URL");
      this.mIsRootFragment = ((Bundle)localObject).getBoolean("ARG_IS_ROOT_FRAGMENT");
      this.mHtmlString = ((Bundle)localObject).getString("ARG_HTML_STRING");
      this.mBaseUrl = ((Bundle)localObject).getString("baseURL");
      if (this.mBaseUrl == null) {
        this.mBaseUrl = App.getResourceUrl("");
      }
    }
    if ((this.mPageUrl == null) && (this.mHtmlString == null))
    {
      Log.e("WebViewFragment", "No page URL or content provided. Closing...");
      App.closePageDelayed(this);
      return;
    }
    if (this.mPageUrl == null) {
      this.mPageUrl = "";
    }
    if ((this.mPageUrl != null) && (App.appConfig.isInitialized()))
    {
      localObject = Uri.parse(this.mPageUrl).getLastPathSegment();
      Page localPage = (Page)App.appConfig.getPages().get(localObject);
      if ((localPage != null) && (localPage.hasFields()))
      {
        ArrayList localArrayList = FieldProcessing.generateFieldsFromHtmlString(getActivity(), this.mPageUrl, true);
        if ((localArrayList != null) && (localArrayList.size() == 2))
        {
          this.mHtmlString = ((String)localArrayList.get(1));
          localPage.setFields((ArrayList)localArrayList.get(0));
        }
      }
      if ((localPage != null) && (localPage.isHasreviewhtmlkey())) {
        this.mHtmlString = RateAndReviewHandle.getInstance().generateRateForPage((String)localObject);
      }
    }
    setupAdViews();
    setupWebView();
    if (this.mHtmlString != null)
    {
      loadHTMLString(this.mHtmlString);
      if (Build.VERSION.SDK_INT >= 15) {
        if (getActivity().findViewById(16908306) == null) {
          break label333;
        }
      }
    }
    label333:
    for (boolean bool = true;; bool = false)
    {
      this.mEnableHtmlSelectWorkaround = bool;
      if (this.mEnableHtmlSelectWorkaround) {
        this.mContainerLinearLayout.setSoftKeyboardVisibilityListener(new SoftKeyboardDetectingLinearLayout.SoftKeyboardVisibilityListener()
        {
          public void onSoftKeyboardVisibilityChanged(boolean paramAnonymousBoolean)
          {
            WebViewFragment.access$002(WebViewFragment.this, paramAnonymousBoolean);
          }
        });
      }
      invalidateOptionsMenu();
      enableWorkaroundForKitKatWebViewHardwareAccellerationIssue();
      return;
      loadUrl(this.mPageUrl);
      break;
    }
  }
  
  protected void loadHTMLString(String paramString)
  {
    this.mWebView.loadDataWithBaseURL(this.mBaseUrl, paramString, null, "UTF-8", null);
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt1 == 10914) {
      this.mWebView.reload();
    }
    Object localObject;
    do
    {
      do
      {
        File localFile;
        do
        {
          do
          {
            do
            {
              do
              {
                return;
                if (paramInt1 != 1055) {
                  break;
                }
              } while (paramInt2 == 0);
              this.mHtmlString = FieldProcessing.insertFieldValues(paramIntent.getStringArrayListExtra("content_data_name"), paramIntent.getStringArrayListExtra("content_data_value"));
            } while (this.mHtmlString == null);
            this.mWebView.loadDataWithBaseURL(App.getResourceUrl(""), this.mHtmlString, null, "UTF-8", null);
            return;
            if (paramInt1 != 4820) {
              break;
            }
            paramIntent = Uri.parse(this.mPageUrl).getLastPathSegment();
            paramIntent = (Page)App.appConfig.getPages().get(paramIntent);
            localObject = App.appConfig.getSentPageId();
          } while ((paramIntent == null) || (localObject == null) || (((String)localObject).equalsIgnoreCase("")));
          localFile = new File(App.getAppResourcesPath() + "/" + (String)localObject);
        } while ((localFile == null) || (!localFile.exists()));
        paramIntent = UUID.randomUUID().toString() + ".png";
        try
        {
          DataUtil.copyToPath(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.jpg", App.getAppResourcesPath(), paramIntent, getActivity());
          localObject = DataUtil.readString(App.getResourceStream((String)localObject));
          String str = new SimpleDateFormat("yyyy/MM/dd HH:mm").format(new Date());
          str = "<div style=\"padding:10px;border-top:solid 1px #eee;border-bottom:solid 1px #eee;\"><a href=\"" + paramIntent + "\"><img style=\"vertical-align:middle;" + "width:80px;\" src=\"" + paramIntent + "\">&nbsp;on " + str + "</a></div></body>";
          paramInt1 = ((String)localObject).indexOf("</body>");
          paramIntent = (Intent)localObject;
          if (paramInt1 != -1) {
            paramIntent = ((String)localObject).substring(0, paramInt1) + str + ((String)localObject).substring(paramInt1, ((String)localObject).length());
          }
          FileUtils.writeStringToFile(localFile, paramIntent, "UTF-8");
          return;
        }
        catch (IOException paramIntent)
        {
          Log.d("WebViewFragment", paramIntent.getMessage());
          return;
        }
      } while (paramInt1 != 57053);
      paramIntent = Uri.parse(this.mPageUrl).getLastPathSegment();
      localObject = (Page)App.appConfig.getPages().get(paramIntent);
    } while ((localObject == null) || (!((Page)localObject).isHasreviewhtmlkey()));
    this.mHtmlString = RateAndReviewHandle.getInstance().generateRateForPage(paramIntent);
    this.mWebView.loadDataWithBaseURL(App.getResourceUrl(""), this.mHtmlString, null, "UTF-8", null);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    if (this.mPageUrl == null) {}
    Object localObject;
    do
    {
      do
      {
        return;
        localObject = App.getPageForUrl(this.mPageUrl);
      } while (localObject == null);
      if ((!this.mIsRootFragment) && (App.appConfig.getNavigationType() == 1) && (((Page)localObject).hasHomeAction())) {
        paramMenuInflater.inflate(2131558416, paramMenu);
      }
      if (((Page)localObject).hasFields()) {
        paramMenuInflater.inflate(2131558406, paramMenu);
      }
      if (((Page)localObject).hasSendAction()) {
        paramMenuInflater.inflate(2131558434, paramMenu);
      }
      localObject = ((Page)localObject).getHasreviews();
    } while ((localObject == null) || (!((String)localObject).equalsIgnoreCase("yes")));
    paramMenuInflater.inflate(2131558431, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903238, paramViewGroup, false);
    this.mWebView = ((WebView)this.mView.findViewById(2131099724));
    this.mWebView.setBackgroundColor(-16777216);
    this.mWebView.setContentDescription(this.mPageUrl);
    this.mWebView.requestFocus(130);
    this.mProgressBar = ((ProgressBar)this.mView.findViewById(2131100099));
    this.mContainerLinearLayout = ((SoftKeyboardDetectingLinearLayout)this.mView.findViewById(2131100259));
    init();
    return this.mView;
  }
  
  protected WebViewClient onCreateWebViewClient()
  {
    return new MyWebViewClient();
  }
  
  public void onDestroy()
  {
    if (this.mAdManager != null) {
      this.mAdManager.destroy();
    }
    if (this.mWebView != null)
    {
      FrameLayout localFrameLayout = (FrameLayout)this.mWebView.getParent();
      if (localFrameLayout != null) {
        localFrameLayout.removeView(this.mWebView);
      }
      this.mWebView.destroy();
    }
    super.onDestroy();
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    super.onHiddenChanged(paramBoolean);
    if (this.mEnableHtmlSelectWorkaround)
    {
      if (!paramBoolean)
      {
        disableHtmlSelectWorkaroundIfEnabled();
        enableHtmlSelectWorkaround();
      }
    }
    else {
      return;
    }
    disableHtmlSelectWorkaroundIfEnabled();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100295: 
      AppStarterActivity.startAppFromActivity(getActivity(), true);
      return true;
    case 2131100279: 
      customizeHTMLContent();
      return true;
    case 2131100324: 
      sendCaptureOfHTMLContent();
      return true;
    }
    paramMenuItem = Uri.parse(this.mPageUrl).getLastPathSegment();
    paramMenuItem = (Page)App.appConfig.getPages().get(paramMenuItem);
    RateAndReviewHandle.getInstance().showRatingView(getActivity(), paramMenuItem);
    return true;
  }
  
  public void onPause()
  {
    super.onPause();
    if (this.mEnableHtmlSelectWorkaround) {
      this.mResumeHtmlSelectWorkaround = disableHtmlSelectWorkaroundIfEnabled();
    }
  }
  
  public void onResume()
  {
    if ((this.mPageUrl != null) && (App.appConfig.isInitialized()))
    {
      Object localObject = Uri.parse(this.mPageUrl).getLastPathSegment();
      localObject = (Page)App.appConfig.getPages().get(localObject);
      if ((localObject != null) && (((Page)localObject).getType().equalsIgnoreCase("shoppingcart"))) {
        reloadWebView();
      }
    }
    if ((this.mEnableHtmlSelectWorkaround) && (this.mResumeHtmlSelectWorkaround))
    {
      disableHtmlSelectWorkaroundIfEnabled();
      enableHtmlSelectWorkaround();
    }
    super.onResume();
  }
  
  public void reloadWebView()
  {
    this.mWebView.reload();
  }
  
  public void setBaseUrl(String paramString)
  {
    this.mBaseUrl = paramString;
  }
  
  protected class MyWebViewClient
    extends WebViewClient
  {
    private static final String TAG = "WebViewFragment.MyWebViewClient";
    
    protected MyWebViewClient() {}
    
    private boolean hitIsLink(int paramInt)
    {
      return (paramInt == 1) || (paramInt == 6) || (paramInt == 7) || (paramInt == 8);
    }
    
    private boolean shouldConsumeUnknownHitType(String paramString)
    {
      return (!paramString.equals(WebViewFragment.this.mPageUrl)) && (System.currentTimeMillis() - WebViewFragment.this.mLastUserTapTime < 1000L);
    }
    
    public void onPageFinished(WebView paramWebView, String paramString)
    {
      super.onPageFinished(paramWebView, paramString);
      WebViewFragment.this.mWebView.setBackgroundColor(-1);
      YouTubeEmbedProcessor.process(paramWebView);
      if (paramString.contains("youtube"))
      {
        localObject = YouTubeEmbedProcessor.findYouTubeVideoId(paramString);
        if (localObject != null) {
          WebViewFragment.access$202(WebViewFragment.this, (String)localObject);
        }
      }
      Object localObject = Favorites.getInstance(WebViewFragment.this.getActivity());
      if (localObject != null)
      {
        localObject = ((Favorites)localObject).getFavoriteIDS();
        int i = 0;
        while (i < localObject.length)
        {
          String str = "javascript:document.getElementById('rsstable').contentWindow.document.getElementById('" + localObject[i] + "').src = '" + Favorites.getFavoriteOnBase64Image() + "';";
          WebViewFragment.this.mWebView.loadUrl(str);
          str = "javascript:document.getElementById('" + localObject[i] + "').src = '" + Favorites.getFavoriteOnBase64Image() + "';";
          WebViewFragment.this.mWebView.loadUrl(str);
          i += 1;
        }
      }
      if (App.appConfig.isInitialized())
      {
        paramString = Uri.parse(paramString).getLastPathSegment();
        localObject = (Page)App.appConfig.getPages().get(paramString);
        if ((localObject != null) && (((Page)localObject).getType().equalsIgnoreCase("shoppingcart"))) {
          App.shoppingCart.showShoppingCartFromWeb(paramWebView, paramString);
        }
      }
    }
    
    public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
    {
      super.onPageStarted(paramWebView, paramString, paramBitmap);
    }
    
    public void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
    {
      WebViewFragment.this.mWebView.setBackgroundColor(-1);
      Log.v("WebViewFragment.MyWebViewClient", "onReceivedError: failingUrl = " + paramString2 + ", error code = " + paramInt + " [ " + paramString1 + " ]");
      super.onReceivedError(paramWebView, paramInt, paramString1, paramString2);
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      Object localObject = paramWebView.getHitTestResult();
      if (localObject != null)
      {
        paramWebView = ((WebView.HitTestResult)localObject).getExtra();
        if (localObject == null) {
          break label69;
        }
      }
      label69:
      for (int i = ((WebView.HitTestResult)localObject).getType();; i = 0)
      {
        localObject = App.getPageForUrl(paramString);
        if ((localObject == null) || (!((Page)localObject).getType().equalsIgnoreCase("login")) || (paramString.indexOf("?") == -1)) {
          break label74;
        }
        return false;
        paramWebView = null;
        break;
      }
      label74:
      if (paramString.startsWith("logout://"))
      {
        LoginFragment.processLogout(WebViewFragment.this.mWebView, WebViewFragment.this);
        return true;
      }
      if (paramString.startsWith("favorite://"))
      {
        paramWebView = paramString.substring(11).split("\\|", -1);
        Favorites.populateFavorites(WebViewFragment.this.getActivity(), WebViewFragment.this.mWebView, paramWebView);
        return true;
      }
      if (paramString.startsWith("appshare://"))
      {
        paramWebView = Uri.parse(WebViewFragment.this.mPageUrl).getLastPathSegment();
        paramString = paramString.substring(11);
        AppShare.share(WebViewFragment.this.getActivity(), paramString, paramWebView);
        return true;
      }
      if (paramString.startsWith("vnd.youtube:")) {
        return true;
      }
      if (((i == 8) || (i == 7) || (i == 5)) && (!paramString.startsWith("ytube:")) && (paramWebView.startsWith("http://img.youtube.com/vi/")))
      {
        WebViewFragment.this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse(paramString)));
        return true;
      }
      if ((i == 4) || (i == 3) || (i == 2) || (paramString.startsWith("tel:")) || (paramString.startsWith("mailto:")))
      {
        paramWebView = new Intent("android.intent.action.VIEW");
        paramWebView.setData(Uri.parse(paramString));
        IntentUtil.startActivitySafe(WebViewFragment.this.getActivity(), paramWebView);
        return true;
      }
      if ((hitIsLink(i)) || ((i == 0) && (shouldConsumeUnknownHitType(paramString))))
      {
        App.showPage(paramString, WebViewFragment.this);
        paramWebView = Uri.parse(WebViewFragment.this.mPageUrl).getLastPathSegment();
        paramWebView = (Page)App.appConfig.getPages().get(paramWebView);
        if ((paramString.startsWith("removefromcart:")) && (paramWebView != null) && (paramWebView.getType().equalsIgnoreCase("shoppingcart"))) {
          WebViewFragment.this.reloadWebView();
        }
        return true;
      }
      return false;
    }
  }
  
  protected class WebViewDownloadListener
    implements DownloadListener
  {
    private static final String TAG = "WebViewActivity.WebViewDownloadListener";
    
    protected WebViewDownloadListener() {}
    
    public void onDownloadStart(String paramString1, String paramString2, String paramString3, String paramString4, long paramLong)
    {
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.setFlags(268435456);
      if (paramString1.startsWith("file:///android_asset/"))
      {
        paramString2 = App.internalFileContentProviderUri + paramString1.substring(21);
        if (paramString4 != null)
        {
          paramString1 = paramString4;
          if (paramString4.trim().length() != 0) {}
        }
        else
        {
          paramString1 = HttpURLConnection.guessContentTypeFromName(paramString2);
        }
        if (!paramString1.startsWith("audio/")) {
          break label208;
        }
        paramString3 = "audio/*";
      }
      for (;;)
      {
        localIntent.setDataAndType(Uri.parse(paramString2), paramString3);
        try
        {
          WebViewFragment.this.startActivity(localIntent);
          return;
        }
        catch (ActivityNotFoundException paramString1)
        {
          int i;
          Log.w("WebViewActivity.WebViewDownloadListener", "onDownloadStart: Couldn't find activity to view url " + paramString2 + " of mimeType: " + paramString3);
          return;
        }
        finally
        {
          App.closePage(WebViewFragment.this);
        }
        if (paramString1.startsWith(App.expansionFilesContentProviderUri))
        {
          i = App.expansionFilesContentProviderUri.length();
          paramString2 = App.internalFileContentProviderUri + paramString1.substring(i);
          break;
        }
        paramString2 = paramString1;
        if (!paramString1.startsWith("file:")) {
          break;
        }
        paramString1 = URI.create(paramString1);
        paramString2 = App.internalFileContentProviderUri + paramString1.getPath();
        break;
        label208:
        paramString3 = paramString1;
        if (paramString1.startsWith("video/")) {
          paramString3 = "video/*";
        }
      }
    }
  }
  
  protected class WebViewKeyListener
    implements View.OnKeyListener
  {
    protected WebViewKeyListener() {}
    
    public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
    {
      WebView.HitTestResult localHitTestResult = ((WebView)paramView).getHitTestResult();
      paramKeyEvent = null;
      if (localHitTestResult != null) {
        paramKeyEvent = localHitTestResult.getExtra();
      }
      if (paramInt != 23) {
        return false;
      }
      if ((paramKeyEvent != null) && (paramKeyEvent.startsWith("http://i.ytimg.com/vi/")))
      {
        paramKeyEvent = paramKeyEvent.split("\\/")[4];
        paramKeyEvent = new Intent("android.intent.action.VIEW", Uri.parse("http://www.youtube.com/watch?v=" + paramKeyEvent));
        paramView.getContext().startActivity(paramKeyEvent);
        return true;
      }
      if ((paramKeyEvent != null) && (paramKeyEvent.startsWith("http://m.youtube.com/#/watch")))
      {
        paramKeyEvent = paramKeyEvent.substring(paramKeyEvent.indexOf("&v=") + 3);
        paramKeyEvent = new Intent("android.intent.action.VIEW", Uri.parse("http://www.youtube.com/watch?v=" + paramKeyEvent));
        paramView.getContext().startActivity(paramKeyEvent);
        return true;
      }
      return false;
    }
  }
  
  protected class WebViewTouchListener
    implements View.OnTouchListener
  {
    private static final boolean DEBUG_TOUCH_EVENTS = false;
    private static final String TAG = "WebViewActivity.WebViewTouchListener";
    private static final String youtubePlayActionUrl = "http://m.youtube.com/#";
    private static final String youtubePlayImageLinkStart = "http://s.ytimg.com/yt/m/cssbin/mobile-blazer-sprite";
    private static final String youtubePlayImageLinkStartNew = "http://s.ytimg.com/yt/m/cssbin/mobile-swatch-sprite";
    private static final String youtubePlayImageLinkStartNew2 = "http://s.ytimg.com/yt/cssbin/mobile-swatch-sprite";
    private static final String youtubePlayImageLinkStartNew3 = "http://s.ytimg.com/yts/imgbin/mobile-nightshade";
    private boolean isClick = true;
    private GestureDetectorCompat mDetector = new GestureDetectorCompat(WebViewFragment.this.getActivity(), new GestureDetector.SimpleOnGestureListener()
    {
      public boolean onDoubleTap(MotionEvent paramAnonymousMotionEvent)
      {
        return true;
      }
      
      public boolean onDoubleTapEvent(MotionEvent paramAnonymousMotionEvent)
      {
        return true;
      }
      
      public boolean onSingleTapUp(MotionEvent paramAnonymousMotionEvent)
      {
        WebViewFragment.access$102(WebViewFragment.this, System.currentTimeMillis());
        return false;
      }
    });
    private int moveCount = 0;
    private final int moveCountThreshold = 7;
    
    public WebViewTouchListener()
    {
      this.mDetector.setOnDoubleTapListener(new GestureDetector.OnDoubleTapListener()
      {
        public boolean onDoubleTap(MotionEvent paramAnonymousMotionEvent)
        {
          return true;
        }
        
        public boolean onDoubleTapEvent(MotionEvent paramAnonymousMotionEvent)
        {
          return true;
        }
        
        public boolean onSingleTapConfirmed(MotionEvent paramAnonymousMotionEvent)
        {
          return false;
        }
      });
    }
    
    private String actionToString(int paramInt)
    {
      switch (paramInt)
      {
      default: 
        return "UNKOWN (" + paramInt + ")";
      case 0: 
        return "ACTION_DOWN (" + paramInt + ")";
      case 2: 
        return "ACTION_MOVE (" + paramInt + ")";
      }
      return "ACTION_UP (" + paramInt + ")";
    }
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (this.mDetector.onTouchEvent(paramMotionEvent)) {
        return true;
      }
      WebView.HitTestResult localHitTestResult = ((WebView)paramView).getHitTestResult();
      String str = null;
      if (localHitTestResult != null) {
        str = localHitTestResult.getExtra();
      }
      if (paramMotionEvent.getAction() == 0)
      {
        this.moveCount = 0;
        this.isClick = true;
      }
      while (paramMotionEvent.getAction() != 1)
      {
        return false;
        if (paramMotionEvent.getAction() == 2)
        {
          int i = this.moveCount;
          this.moveCount = (i + 1);
          if (i > 7)
          {
            this.moveCount = 0;
            this.isClick = false;
          }
        }
      }
      if (str == null) {
        return false;
      }
      if (!this.isClick) {
        return false;
      }
      if (str.startsWith("http://i.ytimg.com/vi/"))
      {
        paramMotionEvent = str.split("\\/")[4];
        paramMotionEvent = new Intent("android.intent.action.VIEW", Uri.parse("http://www.youtube.com/watch?v=" + paramMotionEvent));
        paramView.getContext().startActivity(paramMotionEvent);
        return true;
      }
      if ((str.startsWith("http://s.ytimg.com/yt/m/cssbin/mobile-blazer-sprite")) || (str.startsWith("http://s.ytimg.com/yt/m/cssbin/mobile-swatch-sprite")) || (str.startsWith("http://s.ytimg.com/yt/cssbin/mobile-swatch-sprite")) || (str.startsWith("http://s.ytimg.com/yts/imgbin/mobile-nightshade")) || ((str.equals("http://m.youtube.com/#")) && (WebViewFragment.this.mYouTubeVideoId != null)))
      {
        paramMotionEvent = new Intent("android.intent.action.VIEW", Uri.parse("http://www.youtube.com/watch?v=" + WebViewFragment.this.mYouTubeVideoId));
        paramView.getContext().startActivity(paramMotionEvent);
        return true;
      }
      if (str.startsWith("http://m.youtube.com/watch?feature"))
      {
        paramMotionEvent = Uri.parse(str).getQueryParameter("v");
        paramMotionEvent = new Intent("android.intent.action.VIEW", Uri.parse("http://www.youtube.com/watch?v=" + paramMotionEvent));
        paramView.getContext().startActivity(paramMotionEvent);
        return true;
      }
      return false;
    }
  }
}
