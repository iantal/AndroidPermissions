package com.qbiki.seattleclouds.mosaic;

import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AbsListView.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import com.qbiki.ads.AdManager;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.R.styleable;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.ImageCache;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StyleUtil;
import java.io.File;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Map;
import org.apache.commons.io.FileUtils;

public class MosaicFragment
  extends SCFragment
{
  private boolean created = false;
  private ArrayList<DownloadImageTask> downloadTaskList = null;
  private boolean executingDownload = false;
  private View fView = null;
  private GridView gridview;
  private ImageCache imageCache = null;
  private ArrayList<ImgMetadata> images;
  private boolean isOnlyChoose = false;
  private AdManager mAdManager;
  private String mPageID;
  private int screenWidth;
  private Bundle style;
  private int thumbSize;
  
  public MosaicFragment() {}
  
  private Bitmap loadImageFromNetwork(String paramString)
  {
    Object localObject2 = this.imageCache.get(paramString);
    Object localObject1 = localObject2;
    if (localObject2 == null) {}
    for (localObject1 = localObject2;; localObject1 = localObject2)
    {
      try
      {
        if (!paramString.startsWith("http://")) {
          break label176;
        }
        localObject1 = localObject2;
        InputStream localInputStream = App.getResourceOrUrlStream(paramString);
        localObject1 = localObject2;
        String str = App.getAppProtectedStoragePath();
        localObject1 = localObject2;
        str = str + "/fmtemp.png";
        localObject1 = localObject2;
        File localFile = new File(str);
        localObject1 = localObject2;
        if (localFile.exists())
        {
          localObject1 = localObject2;
          localFile.delete();
        }
        localObject1 = localObject2;
        FileUtils.copyInputStreamToFile(localInputStream, localFile);
        localObject1 = localObject2;
        localFile.deleteOnExit();
        localObject1 = localObject2;
        localObject2 = ImageUtil.decodeExternalBitmap(str, this.thumbSize);
        localObject1 = localObject2;
        localObject2 = localObject1;
        if (localObject1 == null) {
          localObject2 = ImageUtil.decodeExternalBitmap(paramString, this.thumbSize);
        }
        localObject1 = localObject2;
        if (localObject2 != null)
        {
          localObject1 = localObject2;
          localObject2 = ImageUtil.getScaledBitmap((Bitmap)localObject2, this.thumbSize, this.thumbSize, true);
          localObject1 = localObject2;
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          label176:
          Log.d("Mosaic", paramString, localException);
        }
      }
      this.imageCache.put(paramString, localObject1);
      return localObject1;
      localObject1 = localObject2;
      localObject2 = ImageUtil.decodeBitmapResource(paramString, this.thumbSize);
    }
  }
  
  private void setupAdViews()
  {
    LinearLayout localLinearLayout = (LinearLayout)this.fView.findViewById(2131100039);
    Page localPage = (Page)App.appConfig.getPages().get(this.mPageID);
    this.mAdManager = new AdManager().showAds(getActivity(), localLinearLayout, localPage);
  }
  
  public void init()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null)
    {
      this.images = localBundle.getParcelableArrayList("mosaicimages");
      this.isOnlyChoose = localBundle.getBoolean("isOnlyChoose");
      this.style = localBundle.getBundle("PAGE_STYLE");
      this.mPageID = localBundle.getString("pageid");
    }
    if (this.images == null) {
      this.images = new ArrayList();
    }
    this.imageCache = new ImageCache();
    this.downloadTaskList = new ArrayList();
    this.gridview = ((GridView)this.fView.findViewById(2131100040));
    StyleUtil.setBackground(this.gridview, this.style);
    this.gridview.setAdapter(new ImageAdapter(getActivity()));
    int j = getActivity().getWindow().getWindowManager().getDefaultDisplay().getWidth();
    int k = getActivity().getWindow().getWindowManager().getDefaultDisplay().getHeight();
    int i = k;
    if (j < k) {
      i = j;
    }
    this.screenWidth = i;
    this.thumbSize = (this.screenWidth / 4);
    this.thumbSize -= 8;
    this.gridview.setNumColumns(j / (this.thumbSize + 8));
    this.gridview.setHorizontalSpacing(8);
    this.gridview.setVerticalSpacing(8);
    this.gridview.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (MosaicFragment.this.isOnlyChoose)
        {
          paramAnonymousAdapterView = new Intent();
          paramAnonymousAdapterView.putExtra("imgName", ((ImgMetadata)MosaicFragment.this.images.get(paramAnonymousInt)).filename);
          MosaicFragment.this.getActivity().setResult(-1, paramAnonymousAdapterView);
          System.gc();
          App.closePage(MosaicFragment.this);
          return;
        }
        paramAnonymousAdapterView = new Bundle();
        paramAnonymousAdapterView.putParcelableArrayList("mosaicimages", MosaicFragment.this.images);
        paramAnonymousAdapterView.putInt("selectedIndex", paramAnonymousInt);
        paramAnonymousAdapterView.putBundle("PAGE_STYLE", MosaicFragment.this.style);
        App.showPage(new FragmentInfo(MosaicImageFragment.class.getName(), paramAnonymousAdapterView), MosaicFragment.this);
      }
    });
    setupAdViews();
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    setNumberOfColumnsAfterRotation();
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903168, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public void onDestroy()
  {
    int i = 0;
    while (i < this.downloadTaskList.size())
    {
      ((DownloadImageTask)this.downloadTaskList.get(i)).cancel(true);
      i += 1;
    }
    this.downloadTaskList.clear();
    this.executingDownload = false;
    if (this.mAdManager != null) {
      this.mAdManager.destroy();
    }
    super.onDestroy();
  }
  
  public void onPause()
  {
    int i = 0;
    while (i < this.downloadTaskList.size())
    {
      ((DownloadImageTask)this.downloadTaskList.get(i)).cancel(true);
      i += 1;
    }
    this.downloadTaskList.clear();
    this.executingDownload = false;
    super.onPause();
  }
  
  public void onResume()
  {
    if (this.created)
    {
      ImageAdapter localImageAdapter = (ImageAdapter)this.gridview.getAdapter();
      if (localImageAdapter != null) {
        localImageAdapter.notifyDataSetChanged();
      }
    }
    this.created = true;
    super.onResume();
  }
  
  public void setNumberOfColumnsAfterRotation()
  {
    int i = getActivity().getWindow().getWindowManager().getDefaultDisplay().getWidth();
    this.gridview.setNumColumns(i / (this.thumbSize + 8));
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    public String filename = "";
    WeakReference<ImageView> imageViewRef = null;
    public int position = -1;
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return MosaicFragment.this.loadImageFromNetwork(paramVarArgs[0]);
    }
    
    public void execute()
    {
      MosaicFragment.access$702(MosaicFragment.this, true);
      execute(new String[] { this.filename });
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      ImageView localImageView = (ImageView)this.imageViewRef.get();
      if ((localImageView != null) && (localImageView.getTag() != null) && (this.position == ((Integer)localImageView.getTag()).intValue())) {
        localImageView.setImageBitmap(paramBitmap);
      }
      MosaicFragment.access$702(MosaicFragment.this, false);
      if (MosaicFragment.this.downloadTaskList.size() > 1)
      {
        MosaicFragment.this.downloadTaskList.remove(0);
        ((DownloadImageTask)MosaicFragment.this.downloadTaskList.get(0)).execute();
      }
      while (MosaicFragment.this.downloadTaskList.size() <= 0) {
        return;
      }
      MosaicFragment.this.downloadTaskList.remove(0);
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageViewRef = new WeakReference(paramImageView);
    }
  }
  
  public class ImageAdapter
    extends BaseAdapter
  {
    private Context mContext;
    private int mGalleryItemBackground;
    
    public ImageAdapter(Context paramContext)
    {
      this.mContext = paramContext;
      this$1 = MosaicFragment.this.getActivity().obtainStyledAttributes(R.styleable.Gallery);
      this.mGalleryItemBackground = MosaicFragment.this.getResourceId(0, 0);
      MosaicFragment.this.recycle();
    }
    
    public int getCount()
    {
      return MosaicFragment.this.images.size();
    }
    
    public Object getItem(int paramInt)
    {
      return null;
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null)
      {
        paramView = new ImageView(this.mContext);
        paramView.setLayoutParams(new AbsListView.LayoutParams(MosaicFragment.this.thumbSize, MosaicFragment.this.thumbSize));
        paramView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        paramView.setBackgroundColor(-12303292);
        paramView.setTag(Integer.valueOf(paramInt));
        paramViewGroup = ((ImgMetadata)MosaicFragment.this.images.get(paramInt)).filename;
        if (paramViewGroup.length() <= 0) {}
      }
      for (;;)
      {
        int i;
        try
        {
          if (MosaicFragment.this.imageCache.get(paramViewGroup) != null)
          {
            paramView.setImageBitmap(MosaicFragment.this.imageCache.get(paramViewGroup));
            return paramView;
            paramView = (ImageView)paramView;
            paramView.setImageBitmap(null);
            break;
          }
          int k = 0;
          i = 0;
          int j = k;
          MosaicFragment.DownloadImageTask localDownloadImageTask;
          if (i < MosaicFragment.this.downloadTaskList.size())
          {
            localDownloadImageTask = (MosaicFragment.DownloadImageTask)MosaicFragment.this.downloadTaskList.get(i);
            if ((localDownloadImageTask.filename.equals(paramViewGroup)) && (paramInt > 0))
            {
              j = 1;
              localDownloadImageTask.setImageView(paramView);
              localDownloadImageTask.position = paramInt;
            }
          }
          else
          {
            if (j == 0)
            {
              localDownloadImageTask = new MosaicFragment.DownloadImageTask(MosaicFragment.this, null);
              localDownloadImageTask.position = paramInt;
              localDownloadImageTask.setImageView(paramView);
              localDownloadImageTask.filename = paramViewGroup;
              MosaicFragment.this.downloadTaskList.add(localDownloadImageTask);
            }
            if ((MosaicFragment.this.executingDownload) || (MosaicFragment.this.downloadTaskList.size() <= 0)) {
              continue;
            }
            ((MosaicFragment.DownloadImageTask)MosaicFragment.this.downloadTaskList.get(0)).execute();
            return paramView;
          }
        }
        catch (Exception paramViewGroup)
        {
          Log.d("Mosaic", "Exception", paramViewGroup);
          return paramView;
        }
        i += 1;
      }
    }
  }
}
