package com.qbiki.seattleclouds.mosaic;

import android.app.Activity;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.R.styleable;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.ImageCache;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StyleUtil;
import com.qbiki.widget.SettableRateFlingGallery;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import org.apache.commons.io.FileUtils;

public class MosaicImageFragment
  extends SCFragment
{
  private static final String TAG = "MosaicImageAtivity";
  private static final String TEMP_DIR = Environment.getExternalStorageDirectory().getAbsolutePath() + "/.sc_mosaic_temp";
  DownloadImageTask aTask = null;
  private LinearLayout captionLayout;
  private TextView captionText;
  private TextView captionTitle;
  private boolean captionVisible = false;
  private String defaultEmail = null;
  private View fView = null;
  private SettableRateFlingGallery g;
  private ImageCache imageCache = null;
  private ArrayList<ImgMetadata> images;
  private int selectedIndex = 0;
  private Bundle style;
  
  public MosaicImageFragment() {}
  
  private void changeCaptionForItemAt(int paramInt)
  {
    ImgMetadata localImgMetadata = (ImgMetadata)this.images.get(paramInt);
    this.captionTitle.setText(localImgMetadata.title);
    this.captionText.setText(localImgMetadata.caption);
  }
  
  private Bitmap loadImageFromNetwork(String paramString)
  {
    Bitmap localBitmap = this.imageCache.get(paramString);
    Object localObject2 = localBitmap;
    if (localBitmap == null)
    {
      Object localObject1 = localBitmap;
      try
      {
        Log.d("Background", paramString);
        localObject1 = localBitmap;
        int j = Math.max(this.g.getWidth(), this.g.getHeight());
        int i = j;
        if (j > 600) {
          i = 600;
        }
        localObject1 = localBitmap;
        if (paramString.startsWith("http://"))
        {
          localObject1 = localBitmap;
          localObject2 = App.getResourceOrUrlStream(paramString);
          localObject1 = localBitmap;
          String str = App.getAppProtectedStoragePath();
          localObject1 = localBitmap;
          str = str + "/fmtemp.png";
          localObject1 = localBitmap;
          File localFile = new File(str);
          localObject1 = localBitmap;
          if (localFile.exists())
          {
            localObject1 = localBitmap;
            localFile.delete();
          }
          localObject1 = localBitmap;
          FileUtils.copyInputStreamToFile((InputStream)localObject2, localFile);
          localObject1 = localBitmap;
          localFile.deleteOnExit();
          localObject1 = localBitmap;
          localObject2 = ImageUtil.decodeExternalBitmap(str, i);
        }
        for (localObject1 = localObject2;; localObject1 = localObject2)
        {
          localObject2 = localObject1;
          if (localObject1 != null) {
            break;
          }
          return ImageUtil.decodeExternalBitmap(paramString, i);
          localObject1 = localBitmap;
          localObject2 = ImageUtil.decodeBitmapResource(paramString, i);
        }
        Object localObject3;
        return localObject3;
      }
      catch (Exception localException)
      {
        Log.d("Mosaic", paramString, localException);
        localObject3 = localObject1;
      }
    }
  }
  
  /* Error */
  private void shareCurrentImage()
  {
    // Byte code:
    //   0: ldc -30
    //   2: invokestatic 229	android/os/Environment:getExternalStorageState	()Ljava/lang/String;
    //   5: invokevirtual 233	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   8: ifne +18 -> 26
    //   11: aload_0
    //   12: invokevirtual 237	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:getActivity	()Landroid/support/v4/app/FragmentActivity;
    //   15: ldc -18
    //   17: ldc -17
    //   19: aconst_null
    //   20: ldc -16
    //   22: invokestatic 246	com/qbiki/util/DialogUtil:showAlert	(Landroid/content/Context;IILandroid/content/DialogInterface$OnClickListener;I)V
    //   25: return
    //   26: new 57	java/io/File
    //   29: dup
    //   30: getstatic 72	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:TEMP_DIR	Ljava/lang/String;
    //   33: invokespecial 193	java/io/File:<init>	(Ljava/lang/String;)V
    //   36: astore_2
    //   37: aload_2
    //   38: invokevirtual 197	java/io/File:exists	()Z
    //   41: ifne +8 -> 49
    //   44: aload_2
    //   45: invokevirtual 249	java/io/File:mkdirs	()Z
    //   48: pop
    //   49: aload_0
    //   50: getfield 90	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:images	Ljava/util/ArrayList;
    //   53: aload_0
    //   54: getfield 156	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:g	Lcom/qbiki/widget/SettableRateFlingGallery;
    //   57: invokevirtual 252	com/qbiki/widget/SettableRateFlingGallery:getSelectedItemPosition	()I
    //   60: invokevirtual 122	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   63: checkcast 124	com/qbiki/seattleclouds/mosaic/ImgMetadata
    //   66: getfield 255	com/qbiki/seattleclouds/mosaic/ImgMetadata:filename	Ljava/lang/String;
    //   69: astore 4
    //   71: aload 4
    //   73: invokestatic 185	com/qbiki/seattleclouds/App:getResourceOrUrlStream	(Ljava/lang/String;)Ljava/io/InputStream;
    //   76: astore_3
    //   77: aload_3
    //   78: astore_2
    //   79: aload_3
    //   80: ifnonnull +13 -> 93
    //   83: new 257	java/io/FileInputStream
    //   86: dup
    //   87: aload 4
    //   89: invokespecial 258	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   92: astore_2
    //   93: new 260	java/io/FileOutputStream
    //   96: dup
    //   97: new 46	java/lang/StringBuilder
    //   100: dup
    //   101: invokespecial 49	java/lang/StringBuilder:<init>	()V
    //   104: getstatic 72	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:TEMP_DIR	Ljava/lang/String;
    //   107: invokevirtual 65	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   110: ldc_w 262
    //   113: invokevirtual 65	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   116: invokevirtual 70	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   119: invokespecial 263	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   122: astore_3
    //   123: new 57	java/io/File
    //   126: dup
    //   127: new 46	java/lang/StringBuilder
    //   130: dup
    //   131: invokespecial 49	java/lang/StringBuilder:<init>	()V
    //   134: getstatic 72	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:TEMP_DIR	Ljava/lang/String;
    //   137: invokevirtual 65	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   140: ldc_w 262
    //   143: invokevirtual 65	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   146: invokevirtual 70	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   149: invokespecial 193	java/io/File:<init>	(Ljava/lang/String;)V
    //   152: invokestatic 269	android/net/Uri:fromFile	(Ljava/io/File;)Landroid/net/Uri;
    //   155: astore 4
    //   157: sipush 8064
    //   160: newarray byte
    //   162: astore 5
    //   164: aload_2
    //   165: aload 5
    //   167: iconst_0
    //   168: aload 5
    //   170: arraylength
    //   171: invokevirtual 275	java/io/InputStream:read	([BII)I
    //   174: istore_1
    //   175: iload_1
    //   176: iflt +53 -> 229
    //   179: aload_3
    //   180: aload 5
    //   182: iconst_0
    //   183: iload_1
    //   184: invokevirtual 281	java/io/OutputStream:write	([BII)V
    //   187: goto -23 -> 164
    //   190: astore 4
    //   192: aload_3
    //   193: invokevirtual 284	java/io/OutputStream:close	()V
    //   196: aload_2
    //   197: invokevirtual 285	java/io/InputStream:close	()V
    //   200: aload 4
    //   202: athrow
    //   203: astore_2
    //   204: ldc 18
    //   206: ldc_w 287
    //   209: aload_2
    //   210: invokestatic 290	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   213: pop
    //   214: aload_0
    //   215: invokevirtual 237	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:getActivity	()Landroid/support/v4/app/FragmentActivity;
    //   218: ldc_w 292
    //   221: iconst_0
    //   222: invokestatic 298	android/widget/Toast:makeText	(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;
    //   225: invokevirtual 301	android/widget/Toast:show	()V
    //   228: return
    //   229: aload_3
    //   230: invokevirtual 284	java/io/OutputStream:close	()V
    //   233: aload_2
    //   234: invokevirtual 285	java/io/InputStream:close	()V
    //   237: aload 4
    //   239: ifnull -214 -> 25
    //   242: new 303	android/content/Intent
    //   245: dup
    //   246: ldc_w 305
    //   249: invokespecial 306	android/content/Intent:<init>	(Ljava/lang/String;)V
    //   252: astore_2
    //   253: aload_2
    //   254: ldc_w 308
    //   257: invokevirtual 312	android/content/Intent:setType	(Ljava/lang/String;)Landroid/content/Intent;
    //   260: pop
    //   261: aload_2
    //   262: ldc_w 314
    //   265: aload 4
    //   267: invokevirtual 318	android/content/Intent:putExtra	(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;
    //   270: pop
    //   271: aload_0
    //   272: getfield 84	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:defaultEmail	Ljava/lang/String;
    //   275: ifnull +22 -> 297
    //   278: aload_2
    //   279: ldc_w 320
    //   282: iconst_1
    //   283: anewarray 175	java/lang/String
    //   286: dup
    //   287: iconst_0
    //   288: aload_0
    //   289: getfield 84	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:defaultEmail	Ljava/lang/String;
    //   292: aastore
    //   293: invokevirtual 323	android/content/Intent:putExtra	(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;
    //   296: pop
    //   297: aload_0
    //   298: aload_2
    //   299: aconst_null
    //   300: invokestatic 327	android/content/Intent:createChooser	(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;
    //   303: invokevirtual 331	com/qbiki/seattleclouds/mosaic/MosaicImageFragment:startActivity	(Landroid/content/Intent;)V
    //   306: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	307	0	this	MosaicImageFragment
    //   174	10	1	i	int
    //   36	161	2	localObject1	Object
    //   203	31	2	localException	Exception
    //   252	47	2	localIntent	android.content.Intent
    //   76	154	3	localObject2	Object
    //   69	87	4	localObject3	Object
    //   190	76	4	localParcelable	android.os.Parcelable
    //   162	19	5	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   157	164	190	finally
    //   164	175	190	finally
    //   179	187	190	finally
    //   71	77	203	java/lang/Exception
    //   83	93	203	java/lang/Exception
    //   93	157	203	java/lang/Exception
    //   192	203	203	java/lang/Exception
    //   229	237	203	java/lang/Exception
  }
  
  private void showCaption(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      changeCaptionForItemAt(this.g.getSelectedItemPosition());
      this.captionLayout.setVisibility(0);
    }
    for (;;)
    {
      this.captionVisible = paramBoolean;
      return;
      this.captionLayout.setVisibility(8);
    }
  }
  
  public void init()
  {
    this.imageCache = new ImageCache();
    Bundle localBundle = getArguments();
    if (localBundle != null)
    {
      this.images = localBundle.getParcelableArrayList("mosaicimages");
      this.selectedIndex = localBundle.getInt("selectedIndex");
      this.defaultEmail = localBundle.getString("EMAIL_TO_SEND");
      this.style = localBundle.getBundle("PAGE_STYLE");
    }
    this.g = ((SettableRateFlingGallery)this.fView.findViewById(2131100041));
    StyleUtil.setBackground(this.g, this.style);
    this.g.setAdapter(new ImageAdapter(getActivity()));
    this.g.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (((ImgMetadata)MosaicImageFragment.this.images.get(paramAnonymousInt)).filename.length() > 0) {}
        try
        {
          paramAnonymousAdapterView = (ImageView)paramAnonymousView.findViewById(2131100046);
          if (MosaicImageFragment.this.imageCache.get(((ImgMetadata)MosaicImageFragment.this.images.get(paramAnonymousInt)).filename) == null)
          {
            paramAnonymousAdapterView.setTag(Integer.valueOf(paramAnonymousInt));
            if (MosaicImageFragment.this.aTask != null) {
              MosaicImageFragment.this.aTask.cancel(true);
            }
            MosaicImageFragment.this.aTask = new MosaicImageFragment.DownloadImageTask(MosaicImageFragment.this, null);
            MosaicImageFragment.this.aTask.position = paramAnonymousInt;
            MosaicImageFragment.this.aTask.setImageView(paramAnonymousAdapterView);
            MosaicImageFragment.this.aTask.execute(new String[] { ((ImgMetadata)MosaicImageFragment.this.images.get(paramAnonymousInt)).filename });
          }
        }
        catch (Exception paramAnonymousAdapterView)
        {
          for (;;)
          {
            Log.d("Mosaic", "Exception", paramAnonymousAdapterView);
          }
        }
        if (MosaicImageFragment.this.captionVisible) {
          MosaicImageFragment.this.changeCaptionForItemAt(paramAnonymousInt);
        }
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
    this.g.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = MosaicImageFragment.this;
        if (!MosaicImageFragment.this.captionVisible) {}
        for (boolean bool = true;; bool = false)
        {
          paramAnonymousAdapterView.showCaption(bool);
          return;
        }
      }
    });
    this.g.setSelection(this.selectedIndex);
    if (this.captionVisible) {
      changeCaptionForItemAt(this.selectedIndex);
    }
    this.captionLayout = ((LinearLayout)this.fView.findViewById(2131100042));
    this.captionTitle = ((TextView)this.fView.findViewById(2131100043));
    StyleUtil.setTextColor(this.captionTitle, this.style);
    this.captionText = ((TextView)this.fView.findViewById(2131100044));
    StyleUtil.setTextColor(this.captionText, this.style);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558421, paramMenu);
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903169, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.aTask != null)
    {
      this.aTask.cancel(true);
      this.aTask = null;
    }
    if ("mounted".equals(Environment.getExternalStorageState())) {}
    try
    {
      FileUtils.deleteDirectory(new File(TEMP_DIR));
      return;
    }
    catch (IOException localIOException)
    {
      Log.e("MosaicImageAtivity", "Delete temp dir error" + localIOException.toString(), localIOException);
    }
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    shareCurrentImage();
    return true;
  }
  
  public void onPause()
  {
    if (this.aTask != null)
    {
      this.aTask.cancel(true);
      this.aTask = null;
    }
    super.onPause();
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    WeakReference<ImageView> imageViewRef = null;
    public int position = -1;
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return MosaicImageFragment.this.loadImageFromNetwork(paramVarArgs[0]);
    }
    
    protected void onCancelled()
    {
      super.onCancelled();
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      Log.d("Mosaic", "Finish poistion: " + this.position);
      ImageView localImageView = (ImageView)this.imageViewRef.get();
      if ((localImageView != null) && (localImageView.getTag() != null) && (this.position == ((Integer)localImageView.getTag()).intValue()))
      {
        localImageView.setImageBitmap(paramBitmap);
        if (paramBitmap != null) {}
        localImageView.setBackgroundColor(-16777216);
        StyleUtil.setBackground(localImageView, MosaicImageFragment.this.style);
      }
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageViewRef = new WeakReference(paramImageView);
    }
  }
  
  public class ImageAdapter
    extends BaseAdapter
  {
    private Context mContext;
    private int mGalleryItemBackground;
    
    public ImageAdapter(Context paramContext)
    {
      this.mContext = paramContext;
      this$1 = MosaicImageFragment.this.getActivity().obtainStyledAttributes(R.styleable.Gallery);
      this.mGalleryItemBackground = MosaicImageFragment.this.getResourceId(0, 0);
      MosaicImageFragment.this.recycle();
    }
    
    public int getCount()
    {
      return MosaicImageFragment.this.images.size();
    }
    
    public Object getItem(int paramInt)
    {
      return Integer.valueOf(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null) {
        paramView = ((Activity)this.mContext).getLayoutInflater().inflate(2130903170, paramViewGroup, false);
      }
      for (;;)
      {
        paramViewGroup = (ImageView)paramView.findViewById(2131100046);
        paramViewGroup.setBackgroundColor(0);
        paramViewGroup.setImageBitmap(null);
        paramViewGroup.setTag(Integer.valueOf(paramInt));
        if (MosaicImageFragment.this.imageCache.get(((ImgMetadata)MosaicImageFragment.this.images.get(paramInt)).filename) != null)
        {
          paramViewGroup.setBackgroundColor(-16777216);
          paramViewGroup.setImageBitmap(MosaicImageFragment.this.imageCache.get(((ImgMetadata)MosaicImageFragment.this.images.get(paramInt)).filename));
        }
        return paramView;
      }
    }
  }
}
