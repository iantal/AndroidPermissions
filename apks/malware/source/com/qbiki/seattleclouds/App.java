package com.qbiki.seattleclouds;

import android.app.Activity;
import android.app.Application;
import android.app.ProgressDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Window;
import android.widget.Toast;
import com.android.vending.expansion.zipfile.APKExpansionSupport;
import com.android.vending.expansion.zipfile.ZipResourceFile;
import com.google.analytics.tracking.android.GoogleAnalytics;
import com.google.analytics.tracking.android.Tracker;
import com.google.android.vending.expansion.downloader.impl.DownloadInfo;
import com.google.android.vending.expansion.downloader.impl.DownloadsDB;
import com.qbiki.ads.AdManager;
import com.qbiki.billing.PurchaseFragment;
import com.qbiki.c2dm.AnnouncementActivity;
import com.qbiki.feedback.FeedbackFragment;
import com.qbiki.gcm.GCMTopicsFragment;
import com.qbiki.location.LocationDetectorActivity;
import com.qbiki.location.LocationDetectorFragment;
import com.qbiki.location.MarkerMapFragment;
import com.qbiki.mbfx.DynamicHTML;
import com.qbiki.mbfx.LoginActivity;
import com.qbiki.mbfx.PhotoUploader;
import com.qbiki.modules.barcodescanner.BarcodeScannerFragment;
import com.qbiki.modules.bmicalculator.BmiCalculatorFragment;
import com.qbiki.modules.calendar.CalendarFragment;
import com.qbiki.modules.cameracover.CameraCoverFrgament;
import com.qbiki.modules.coupon.CouponFragment;
import com.qbiki.modules.dropbox.medialist.DropboxMediaListFragment;
import com.qbiki.modules.dynamiclist.DynamicListFragment;
import com.qbiki.modules.dynamicpage.DynamicPageFragment;
import com.qbiki.modules.epubreader.ePubReaderFragment;
import com.qbiki.modules.facebookfeeds.FeedsListFragment;
import com.qbiki.modules.favorites.Favorites;
import com.qbiki.modules.favorites.FavoritesFragment;
import com.qbiki.modules.fbfanpage.FacebookFunPageFragment;
import com.qbiki.modules.fusioncharts.FusionChartsFragment;
import com.qbiki.modules.goaltracker.GoalTrackerCategoriesListFragment;
import com.qbiki.modules.goaltracker.GoalTrackerGoalsListFragment;
import com.qbiki.modules.imagelist.ImageListFragment;
import com.qbiki.modules.karaoke.KaraokeFragment;
import com.qbiki.modules.locationlock.LocationLockFragment;
import com.qbiki.modules.login.LoginFragment;
import com.qbiki.modules.login.SCForgotPasswordFragment;
import com.qbiki.modules.loyalty.LoyaltyFragment;
import com.qbiki.modules.magazinestore.MagazineStoreFragment;
import com.qbiki.modules.memogame.SCMemoGameFragment;
import com.qbiki.modules.messenger.MessengerFragment;
import com.qbiki.modules.nativetetris.NativeTetrisFragment;
import com.qbiki.modules.nearbylocations.NearbyLocationFragment;
import com.qbiki.modules.notes.NotesListFragment;
import com.qbiki.modules.order.OrderFragment;
import com.qbiki.modules.pdfeditorreader.PDFReaderEditorFragment;
import com.qbiki.modules.pdfreader.PDFReaderFragment;
import com.qbiki.modules.pdfviewer.PDFViewerFragment;
import com.qbiki.modules.phonegap.PhoneGapActivity;
import com.qbiki.modules.photoeffect.PhotoEffectFragment;
import com.qbiki.modules.product.order.POLocationsAndCategoriesListFragment;
import com.qbiki.modules.puzzle.SCPuzzleGameFragment;
import com.qbiki.modules.quiz.QuizRootFragment;
import com.qbiki.modules.quizweb.QuizwebFragment;
import com.qbiki.modules.rateandreview.RateAndReviewFragment;
import com.qbiki.modules.rsspro.RSSProFragment;
import com.qbiki.modules.savephoto.SavePhotoActivity;
import com.qbiki.modules.scoreboard.ScoreBoardFragment;
import com.qbiki.modules.search.SearchActivity;
import com.qbiki.modules.search.SearchFragment;
import com.qbiki.modules.sharepoint.SPServer;
import com.qbiki.modules.sharepoint.SPServerCredentials;
import com.qbiki.modules.sharepoint.SharePointFragment;
import com.qbiki.modules.signaturestamp.SignatureStampFragment;
import com.qbiki.modules.slideshow.SlideShowFragment;
import com.qbiki.modules.starbucks.CardsListActivity;
import com.qbiki.modules.videolist.VideoFilesListFragment;
import com.qbiki.modules.voicerecord.SCVoiceRecordListFragment;
import com.qbiki.modules.voicerecord.VoiceRecordPickerActivity;
import com.qbiki.paypal.PayPalProcessing;
import com.qbiki.seattleclouds.mosaic.MosaicFragment;
import com.qbiki.shoppingcart.ShoppingCart;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.IntentUtil;
import com.qbiki.util.JObjectUtil;
import com.qbiki.util.SCMediaPlayer;
import com.qbiki.util.StringUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import net.sourceforge.zbar.android.ZBarScanner;
import org.json.JSONException;
import org.json.JSONObject;

public class App
  extends Application
{
  private static final String APPS_SUBDIR = "myapplications";
  public static final String APP_RESOURCES_ASSET_DIR = "Main";
  public static final String APP_SC_ASSET_DIR = "SC";
  public static final int CLOSED_RATE = 57053;
  public static boolean DEBUG = false;
  public static final String DEFAULT_FB_API_KEY = "105526872959";
  public static final String DEFAULT_PLACES_API_KEY = "AIzaSyDcbnDqRozxjllddKHhKwfQEflvej1qd8A";
  private static final String EXTERNAL_RESOURCES_DIR = "external_resources";
  private static final String EXTERNAL_STORAGE_DIR = "external_storage";
  private static final String LOGIN_INFO_PREF_NAME = "LoginInfo";
  private static final boolean LOGV = false;
  public static final String META_INFO_ASSET_DIR = "Meta-Inf";
  private static final String PUBLISHER_APPS_SUBDIR = "_publishers";
  private static final String RESOURCES_DIR = "resources";
  private static final String RUNTIME_STATE_PREF_NAME = "RuntimeState";
  public static String SC_HOST_NAME = "seattleclouds.com";
  public static final String SC_PUBLISHER_ID = "";
  private static final String STORAGE_DIR = "storage";
  private static final String TAG = "App";
  public static String adminUserName;
  public static boolean allowLoginAs;
  public static ZipResourceFile apkExpansionFile;
  public static boolean apkExpansionFilesEnabled;
  public static int[] apkExpansionFilesVersions;
  public static AppConfig appConfig;
  public static String appId;
  public static AssetManager assetManager;
  public static boolean authenticated;
  public static SCMediaPlayer backgroundMediaPlayer;
  public static String defaultFacebookAppID;
  public static String expansionFilesContentProviderUri;
  public static String externalResourcesRootPath;
  public static String externalStorageRootPath;
  public static boolean gcmEnabled;
  public static boolean inAppBillingEnabled;
  public static String internalFileContentProviderUri;
  public static boolean isPreviewer;
  private static Page mFirstOrderPage;
  public static String oldResourcesRootPath;
  public static String originalAppId;
  public static String originalUsername;
  public static String password;
  public static PayPalProcessing paypalProc;
  public static String pdftronLicenseKey = "";
  public static String protectedStorageRootPath;
  public static String publisherId;
  private static Resources resources;
  public static String resourcesRootPath;
  public static String revMobAppid;
  public static boolean rotationEnabled;
  public static String scmServerHostName;
  public static String serverHostName;
  public static ShoppingCart shoppingCart;
  public static SCMediaPlayer soundEffectsPlayer;
  public static boolean started;
  public static boolean syncEnabled;
  public static boolean systemErrorOccured = false;
  public static String urlScheme;
  public static String username;
  
  static
  {
    DEBUG = false;
    started = false;
    authenticated = false;
    syncEnabled = true;
    gcmEnabled = false;
    rotationEnabled = false;
    apkExpansionFilesEnabled = false;
    inAppBillingEnabled = false;
    defaultFacebookAppID = "";
    paypalProc = null;
    revMobAppid = "";
  }
  
  public App() {}
  
  public static void closePage(Fragment paramFragment)
  {
    NavigationFragment localNavigationFragment = SCFragmentHelper.getNavigationFragment(paramFragment);
    if (localNavigationFragment != null)
    {
      localNavigationFragment.popFragmentImmediate();
      return;
    }
    paramFragment.getActivity().finish();
  }
  
  public static void closePageDelayed(Fragment paramFragment)
  {
    if (SCFragmentHelper.getNavigationFragment(paramFragment) != null)
    {
      new Timer().schedule(new TimerTask()
      {
        public void run()
        {
          this.val$pageFragment.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              App.closePage(App.1.this.val$pageFragment);
            }
          });
        }
      }, 500L);
      return;
    }
    paramFragment.getActivity().finish();
  }
  
  public static Typeface createTypeface(String paramString)
  {
    Object localObject;
    if ((paramString == null) || (paramString.trim().length() == 0)) {
      localObject = Typeface.DEFAULT;
    }
    Typeface localTypeface;
    do
    {
      return localObject;
      localTypeface = getTypefaceResource(paramString);
      localObject = localTypeface;
    } while (localTypeface != null);
    return Typeface.create(paramString, 0);
  }
  
  private static String fixDoubleScheme(String paramString)
  {
    int i = paramString.indexOf("://");
    String str = paramString;
    if (i != -1)
    {
      i = paramString.indexOf("//", i + 3);
      str = paramString;
      if (i != -1)
      {
        str = paramString;
        if (paramString.charAt(i - 1) != ':') {
          str = paramString.substring(0, i) + ":" + paramString.substring(i);
        }
      }
    }
    return str;
  }
  
  public static String getAllAppsRelativePath()
  {
    String str2 = "myapplications";
    String str1 = str2;
    if (publisherId != null)
    {
      str1 = str2;
      if (!publisherId.equals("")) {
        str1 = "myapplications" + "/_publishers/" + publisherId;
      }
    }
    return str1;
  }
  
  public static String getAppExternalResourcesPath()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(externalResourcesRootPath);
    localStringBuilder.append("/").append(username).append("/").append(appId);
    return localStringBuilder.toString();
  }
  
  public static String getAppExternalStoragePath()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(externalStorageRootPath);
    localStringBuilder.append("/").append(username).append("/").append(appId);
    return localStringBuilder.toString();
  }
  
  public static String getAppProtectedStoragePath()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(protectedStorageRootPath);
    localStringBuilder.append("/").append(username).append("/").append(appId);
    return localStringBuilder.toString();
  }
  
  public static String getAppRelativePath()
  {
    return getUserAppsRelativePath() + "/" + appId;
  }
  
  public static String getAppResourcesPath()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(resourcesRootPath);
    localStringBuilder.append("/").append(username).append("/").append(appId);
    return localStringBuilder.toString();
  }
  
  public static Drawable getDrawableResource(String paramString)
  {
    Drawable localDrawable = null;
    InputStream localInputStream = getResourceStream(paramString);
    if (localInputStream != null) {
      localDrawable = Drawable.createFromStream(localInputStream, paramString);
    }
    try
    {
      localInputStream.close();
      return localDrawable;
    }
    catch (IOException paramString) {}
    return localDrawable;
  }
  
  public static Page getFirstOrderPage()
  {
    mFirstOrderPage = appConfig.getFirstOrderPage();
    return mFirstOrderPage;
  }
  
  public static FragmentInfo getHtmlPageFragmentInfo(String paramString)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("ARG_URL", paramString);
    return new FragmentInfo(WebViewFragment.class.getName(), localBundle);
  }
  
  public static Intent getHtmlPageIntent(String paramString, Context paramContext)
  {
    return getPageIntent(getHtmlPageFragmentInfo(paramString), paramContext);
  }
  
  public static Intent getIntentIfPageIsActivityOrNull(String paramString, FragmentInfo paramFragmentInfo, Activity paramActivity)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (paramFragmentInfo.getClassName().equals(WebViewFragment.class.getName()))
    {
      paramString = getPageIntent(paramString, paramActivity);
      localObject1 = localObject2;
      if (paramString != null)
      {
        if (!paramString.getComponent().getClassName().equals(SCPageFragmentActivity.class.getName())) {
          return paramString;
        }
        localObject1 = localObject2;
        if (!((FragmentInfo)paramString.getExtras().getParcelable("ARG_PAGE_FRAGMENT_INFO")).getClassName().equals(WebViewFragment.class.getName())) {
          localObject1 = paramString;
        }
      }
    }
    return localObject1;
    return paramString;
  }
  
  public static String getOldAppResourcesPath()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(oldResourcesRootPath);
    localStringBuilder.append("/").append(username).append("/").append(appId);
    return localStringBuilder.toString();
  }
  
  public static Page getPageForUrl(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    paramString = Uri.parse(paramString).getLastPathSegment();
    return (Page)appConfig.getPages().get(paramString);
  }
  
  public static FragmentInfo getPageFragmentInfo(String paramString, Context paramContext)
  {
    Log.v("App", "getting page fragment info for url: " + paramString);
    String str5 = Uri.parse(paramString).getLastPathSegment();
    Page localPage = (Page)appConfig.getPages().get(str5);
    if ((localPage == null) || (localPage.getType() == null)) {
      paramContext = getHtmlPageFragmentInfo(paramString);
    }
    for (;;)
    {
      return paramContext;
      Object localObject2 = null;
      Object localObject1 = localPage.getType();
      if (((String)localObject1).equalsIgnoreCase("mosaic"))
      {
        paramString = new Bundle();
        paramString.putParcelableArrayList("mosaicimages", localPage.mosaicImages);
        paramString.putString("pageid", localPage.getId());
        paramString = new FragmentInfo(MosaicFragment.class.getName(), paramString);
      }
      label141:
      Object localObject3;
      for (;;)
      {
        paramContext = paramString;
        if (paramString == null) {
          break;
        }
        paramContext = paramString;
        if (paramString.getRawArguments() == null) {
          break;
        }
        paramString.getRawArguments().putString("PAGE_ID", str5);
        paramString.getRawArguments().putBundle("PAGE_STYLE", localPage.getStyle());
        paramString.getRawArguments().putString("PAGE_TRANSITION", localPage.getTransition());
        paramContext = paramString;
        if (localPage.getHostedResources().size() <= 0) {
          break;
        }
        if (!syncEnabled) {
          break label5764;
        }
        localObject1 = new ArrayList();
        paramContext = localPage.getHostedResources().iterator();
        while (paramContext.hasNext())
        {
          localObject2 = (HashMap)paramContext.next();
          localObject3 = (String)((HashMap)localObject2).get("url");
          if ((localObject3 != null) && (!resourceExistsInResourcesDir(SCDownloadHostedPageResourcesFragment.getHostedFilenameFromUrl((String)localObject3)))) {
            ((ArrayList)localObject1).add(localObject2);
          }
        }
        if ((((String)localObject1).equalsIgnoreCase("feedback")) || (((String)localObject1).equalsIgnoreCase("locationfinder")))
        {
          paramContext = new Bundle();
          paramContext.putString("pageid", localPage.getId());
          paramContext.putString("headerimage", localPage.getHeaderimage());
          paramContext.putParcelableArrayList("feedbackfields", localPage.fields);
          paramContext.putString("sendtoaddress", localPage.getSendtoaddress());
          paramContext.putStringArrayList("sendtoaddresses", localPage.getSendToAddresses());
          paramContext.putString("submitbutton", localPage.getSubmitbutton());
          paramContext.putString("confirmmessage", localPage.getConfirmmessage());
          paramContext.putString("slidetonextpage", localPage.getSlideToNextPage());
          paramContext.putBoolean("rightToLeft", localPage.isRightToLeftLayoutDirection());
          localObject1 = Uri.parse(paramString);
          paramString = ((Uri)localObject1).getQueryParameter("lat");
          localObject1 = ((Uri)localObject1).getQueryParameter("long");
          double d3 = 1000.0D;
          double d4 = 1000.0D;
          double d1 = d3;
          double d2 = d4;
          if (paramString != null)
          {
            d1 = d3;
            d2 = d4;
            if (localObject1 == null) {}
          }
          try
          {
            d1 = Double.parseDouble(paramString);
            d2 = Double.parseDouble((String)localObject1);
            paramContext.putDouble("latitude", d1);
            paramContext.putDouble("longitude", d2);
            paramContext.putString("resultType", localPage.getResultType());
            paramContext.putBoolean("resultDistanceInMiles", localPage.isResultDistanceInMiles());
            paramContext.putBoolean("showLocationPicker", localPage.isShowLocationPicker());
            paramString = new FragmentInfo(FeedbackFragment.class.getName(), paramContext);
          }
          catch (NumberFormatException paramString)
          {
            for (;;)
            {
              d2 = 1000.0D;
              d1 = 1000.0D;
            }
          }
        }
        else if (((String)localObject1).equalsIgnoreCase("map"))
        {
          paramString = new Bundle();
          paramString.putParcelableArrayList("locationsList", localPage.locationsArray);
          paramString = new FragmentInfo(MarkerMapFragment.class.getName(), paramString);
        }
        else if (((String)localObject1).equalsIgnoreCase("quiz"))
        {
          paramString = new Bundle();
          paramString.putString("pageId", localPage.getId());
          paramString.putString("quizTitle", localPage.getQuizTitle());
          paramString.putString("quizBgImage", localPage.getQuizBackgroundImage());
          paramString.putString("quizButtonsBgImage", localPage.getQuizButtonsBgImage());
          paramString.putBoolean("isQuizRandomize", localPage.isQuizRandomize());
          paramString = new FragmentInfo(QuizRootFragment.class.getName(), paramString);
        }
        else if (((String)localObject1).equalsIgnoreCase("locationDetector"))
        {
          paramString = new Bundle();
          paramString.putInt("ARG_COORDINATE_FORMAT", localPage.getCoordinateFormatType());
          paramString = new FragmentInfo(LocationDetectorFragment.class.getName(), paramString);
        }
        else if (((String)localObject1).equalsIgnoreCase("calendar"))
        {
          paramString = username + "-" + appId + "-" + localPage.getId();
          paramContext = new Bundle();
          paramContext.putString("storeId", paramString);
          paramContext.putStringArrayList("categories", localPage.getCalendarEventCategories());
          paramContext.putIntegerArrayList("categoryColors", localPage.getCalendarEventCategoryColors());
          paramContext.putString("syncedEventsResourceName", str5 + ".json");
          paramString = new FragmentInfo(CalendarFragment.class.getName(), paramContext);
        }
        else
        {
          if (!((String)localObject1).equalsIgnoreCase("search")) {
            break label969;
          }
          paramString = new Bundle();
          paramString.putString("ARG_INDEX_FILE_NAME", "indexpage.plist");
          paramString = new FragmentInfo(SearchFragment.class.getName(), paramString);
        }
      }
      label969:
      int i;
      if (((String)localObject1).equalsIgnoreCase("dynamicList"))
      {
        localObject1 = localPage.getConfigFile();
        paramContext = (Context)localObject1;
        if (localObject1 == null)
        {
          i = paramString.indexOf("=");
          paramContext = (Context)localObject1;
          if (i > 0) {
            paramString = paramString.substring(i + 1);
          }
        }
      }
      try
      {
        paramContext = URLDecoder.decode(paramString, "UTF-8");
        paramString = paramContext;
        if (paramContext == null)
        {
          paramString = localPage.getId().substring(0, localPage.getId().lastIndexOf("."));
          paramString = paramString + ".xml";
        }
        paramContext = new Bundle();
        paramContext.putString("CONFIG_RESOURCE_NAME_OR_URL", paramString);
        paramContext.putString("LIST_ID", "root");
        if ((localPage.getParameters().containsKey("enablelogoutbtn")) && (((String)localPage.getParameters().get("enablelogoutbtn")).toString().equalsIgnoreCase("yes"))) {
          paramContext.putBoolean("ENABLE_LOGOUT_BTN", true);
        }
        if ((localPage.getParameters().containsKey("enablerefreshbtn")) && (((String)localPage.getParameters().get("enablerefreshbtn")).toString().equalsIgnoreCase("yes"))) {
          paramContext.putBoolean("ENABLE_REFRESH_BTN", true);
        }
        paramString = new FragmentInfo(DynamicListFragment.class.getName(), paramContext);
        break label141;
        if (((String)localObject1).equalsIgnoreCase("sharepointclient"))
        {
          Bundle localBundle = new Bundle();
          Object localObject7;
          String str2;
          Object localObject5;
          label1431:
          label1488:
          label1534:
          label1581:
          String str1;
          boolean bool2;
          Uri localUri;
          Object localObject8;
          boolean bool3;
          Object localObject6;
          Object localObject4;
          Object localObject9;
          String str4;
          if ((appConfig.getSharepointGlobalServerCredentials().getURL() != null) && (StringUtil.isEmpty((String)localPage.getParameters().get("urlserver"))))
          {
            localBundle.putString("password", appConfig.getSharepointGlobalServerCredentials().getPassword());
            localBundle.putString("url", appConfig.getSharepointGlobalServerCredentials().getURL().toString());
            localBundle.putString("username", appConfig.getSharepointGlobalServerCredentials().getUsername());
            localObject7 = (String)localPage.getParameters().get("listid");
            str2 = (String)localPage.getParameters().get("itemid");
            String str3 = (String)localPage.getParameters().get("datatype");
            localObject5 = (String)localPage.getParameters().get("query");
            if (localPage.getParameters().get("servertemplatenumbers") != null)
            {
              paramContext = ((String)localPage.getParameters().get("servertemplatenumbers")).toString();
              if (!StringUtil.isEmpty(paramContext)) {
                break label2352;
              }
              paramContext = new String[0];
              localBundle.putStringArray("arrservertemplatenumbers", paramContext);
            }
            localObject1 = null;
            if (localPage.getParameters().get("hidefields") != null)
            {
              paramContext = ((String)localPage.getParameters().get("hidefields")).toString();
              if (!StringUtil.isEmpty(paramContext)) {
                break label2363;
              }
              localObject1 = new String[0];
            }
            paramContext = null;
            if (localPage.getParameters().get("fieldsvalues") != null)
            {
              paramContext = ((String)localPage.getParameters().get("fieldsvalues")).toString();
              if (!StringUtil.isEmpty(paramContext)) {
                break label2375;
              }
              paramContext = new String[0];
            }
            if (localPage.getParameters().get("denyactions") != null)
            {
              localObject2 = ((String)localPage.getParameters().get("denyactions")).toString();
              if (!StringUtil.isEmpty((String)localObject2)) {
                break label2386;
              }
              localObject2 = new String[0];
              localBundle.putStringArray("denyActions", (String[])localObject2);
            }
            localBundle.putString("uploadfolderurl", (String)localPage.getParameters().get("uploadfolderurl"));
            str1 = (String)localPage.getParameters().get("viewmodelibrary");
            if ((localPage.getParameters().get("enablemasterdetailview") != null) && (((String)localPage.getParameters().get("enablemasterdetailview")).equals("no"))) {}
            bool2 = false;
            bool1 = bool2;
            if (localPage.getParameters().get("enablerememberdata") != null)
            {
              bool1 = bool2;
              if (((String)localPage.getParameters().get("enablerememberdata")).equals("yes")) {
                bool1 = true;
              }
            }
            localUri = Uri.parse(paramString);
            localObject8 = localObject1;
            localObject2 = str3;
            bool3 = bool1;
            localObject6 = paramContext;
            localObject3 = str2;
            localObject4 = localObject7;
            localObject9 = localObject5;
            str4 = str1;
            if (localUri.getQuery() != null)
            {
              localObject8 = localObject1;
              localObject2 = str3;
              bool3 = bool1;
              localObject6 = paramContext;
              localObject3 = str2;
              localObject4 = localObject7;
              localObject9 = localObject5;
              str4 = str1;
              if (localUri.getQuery().length() > 0)
              {
                if (!StringUtil.isEmpty(localUri.getQueryParameter("listid"))) {
                  break label2399;
                }
                localObject2 = "";
                label1822:
                if (!StringUtil.isEmpty(localUri.getQueryParameter("itemid"))) {
                  break label2415;
                }
                paramString = "";
                label1839:
                if (!StringUtil.isEmpty(localUri.getQueryParameter("datatype"))) {
                  break label2430;
                }
                localObject3 = "";
                label1857:
                if (!StringUtil.isEmpty(localUri.getQueryParameter("libraryid"))) {
                  break label2446;
                }
                localObject4 = "";
                label1875:
                localObject6 = localUri.getQueryParameter("enablemasterdetailview");
                if (((localObject6 != null) && (((String)localObject6).equals("no"))) && ((localUri.getQueryParameter("enablerememberdata") == null) || (!localUri.getQueryParameter("enablerememberdata").equals("yes")))) {
                  break label2462;
                }
                bool2 = true;
                label1932:
                if (!StringUtil.isEmpty(localUri.getQueryParameter("hidefields"))) {
                  break label2504;
                }
                localObject6 = "";
                label1950:
                if (!StringUtil.isEmpty((String)localObject6)) {
                  localObject1 = ((String)localObject6).split("\\|");
                }
                if (!StringUtil.isEmpty(localUri.getQueryParameter("viewmodelibrary"))) {
                  break label2520;
                }
                label1982:
                if (!StringUtil.isEmpty(localUri.getQueryParameter("fieldsvalues"))) {
                  break label2536;
                }
                localObject6 = "";
                label2000:
                if (!StringUtil.isEmpty((String)localObject6)) {
                  paramContext = ((String)localObject6).split("\\|");
                }
                if (!StringUtil.isEmpty(localUri.getQueryParameter("query"))) {
                  break label2552;
                }
                localObject6 = "";
                label2035:
                if (!StringUtil.isEmpty((String)localObject6)) {
                  localObject5 = localObject6;
                }
                localObject6 = str3;
                if (localObject3 != null) {
                  localObject6 = localObject3;
                }
                if (StringUtil.isEmpty((String)localObject4)) {
                  break label2565;
                }
                str3 = "file";
                localObject7 = localObject4;
                localObject8 = localObject1;
                localObject2 = str3;
                bool3 = bool2;
                localObject6 = paramContext;
                localObject3 = str2;
                localObject4 = localObject7;
                localObject9 = localObject5;
                str4 = str1;
                if (paramString != null)
                {
                  str4 = str1;
                  localObject9 = localObject5;
                  localObject4 = localObject7;
                  localObject3 = paramString;
                  localObject6 = paramContext;
                  bool3 = bool2;
                  localObject2 = str3;
                  localObject8 = localObject1;
                }
              }
            }
          }
          for (;;)
          {
            localBundle.putString("listid", (String)localObject4);
            localBundle.putString("itemid", (String)localObject3);
            localBundle.putString("datatype", (String)localObject2);
            localBundle.putString("query", localObject9);
            localBundle.putBoolean("enablemasterdetailview", false);
            localBundle.putBoolean("enablerememberdata", bool3);
            localBundle.putString("viewLibraryMode", str4);
            localBundle.putStringArray("arrhidefields", localObject8);
            paramString = new HashMap();
            if (localObject6 == null) {
              break label2685;
            }
            i = 0;
            while (i < localObject6.length)
            {
              paramContext = localObject6[i].split("::");
              if (paramContext.length == 2) {
                paramString.put(paramContext[0], paramContext[1]);
              }
              i += 1;
            }
            localBundle.putString("password", (String)localPage.getParameters().get("password"));
            localBundle.putString("url", (String)localPage.getParameters().get("urlserver"));
            localBundle.putString("username", (String)localPage.getParameters().get("username"));
            break;
            label2352:
            paramContext = paramContext.split("\\|");
            break label1431;
            label2363:
            localObject1 = paramContext.split("\\|");
            break label1488;
            label2375:
            paramContext = paramContext.split("\\|");
            break label1534;
            label2386:
            localObject2 = ((String)localObject2).split("\\|");
            break label1581;
            label2399:
            localObject2 = Uri.decode(localUri.getQueryParameter("listid"));
            break label1822;
            label2415:
            paramString = Uri.decode(localUri.getQueryParameter("itemid"));
            break label1839;
            label2430:
            localObject3 = Uri.decode(localUri.getQueryParameter("datatype"));
            break label1857;
            label2446:
            localObject4 = Uri.decode(localUri.getQueryParameter("libraryid"));
            break label1875;
            label2462:
            bool2 = bool1;
            if (localUri.getQueryParameter("enablerememberdata") == null) {
              break label1932;
            }
            bool2 = bool1;
            if (!localUri.getQueryParameter("enablerememberdata").equals("no")) {
              break label1932;
            }
            bool2 = false;
            break label1932;
            label2504:
            localObject6 = Uri.decode(localUri.getQueryParameter("hidefields"));
            break label1950;
            label2520:
            str1 = Uri.decode(localUri.getQueryParameter("viewmodelibrary"));
            break label1982;
            label2536:
            localObject6 = Uri.decode(localUri.getQueryParameter("fieldsvalues"));
            break label2000;
            label2552:
            localObject6 = localUri.getQueryParameter("query");
            break label2035;
            label2565:
            if ((((String)localObject6).equals("edit")) || (StringUtil.isEmpty((String)localObject2)) || (StringUtil.isEmpty(paramString))) {
              break label2629;
            }
            localObject3 = "item";
            localObject4 = localObject2;
            localObject8 = localObject1;
            localObject2 = localObject3;
            bool3 = bool2;
            localObject6 = paramContext;
            localObject3 = paramString;
            localObject9 = localObject5;
            str4 = str1;
          }
          label2629:
          if (localObject2 == null)
          {
            localObject4 = localObject7;
            label2638:
            if (paramString != null) {
              break label2679;
            }
          }
          label2679:
          for (localObject3 = str2;; localObject3 = paramString)
          {
            localObject8 = localObject1;
            localObject2 = localObject6;
            bool3 = bool2;
            localObject6 = paramContext;
            localObject9 = localObject5;
            str4 = str1;
            break;
            localObject4 = localObject2;
            break label2638;
          }
          label2685:
          localBundle.putSerializable("dicvaluesforfields", paramString);
          SPServer.destroy();
          paramString = new FragmentInfo(SharePointFragment.class.getName(), localBundle);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("quizquestion"))
        {
          paramContext = new Bundle();
          paramContext.putString("ARG_URL", paramString);
          paramString = new FragmentInfo(QuizwebFragment.class.getName(), paramContext);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("quizresult"))
        {
          paramContext = null;
          try
          {
            paramString = DataUtil.readString(getResourceStream(str5));
            if (paramString != null) {
              paramContext = JObjectUtil.processQuizHtmlBlock(paramString);
            }
            paramString = (String)localObject2;
            if (paramContext == null) {
              break label141;
            }
            paramString = (String)localObject2;
            if (paramContext.equalsIgnoreCase("")) {
              break label141;
            }
            paramString = new Bundle();
            paramString.putString("ARG_HTML_STRING", paramContext);
            paramString = new FragmentInfo(WebViewFragment.class.getName(), paramString);
          }
          catch (IOException paramString)
          {
            Log.e("App", "Error getting rawHtml");
            paramString = (String)localObject2;
          }
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("rsspro"))
        {
          paramContext = localPage.getRssFeedURL();
          localObject1 = new Bundle();
          ((Bundle)localObject1).putString("ARG_URL", paramString);
          ((Bundle)localObject1).putString("FEED_URL_IDENTIFIER", paramContext);
          paramString = new FragmentInfo(RSSProFragment.class.getName(), (Bundle)localObject1);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("rssprodetail"))
        {
          localObject3 = Uri.parse(paramString);
          localObject1 = localPage.getParentRssSourcePageURL();
          localObject3 = ((Uri)localObject3).getQueryParameter("itemparenturl");
          if (localObject3 != null) {
            localObject1 = localObject3;
          }
          localObject3 = appConfig.getRssJsonForPage((String)localObject1);
          if (localObject3 != null)
          {
            localObject2 = new Bundle();
            ((Bundle)localObject2).putString("ARG_URL", paramString);
            ((Bundle)localObject2).putString("jsonString", null);
            ((Bundle)localObject2).putString("parentPageUrl", (String)localObject1);
            paramContext = new FragmentInfo(DynamicPageFragment.class.getName(), (Bundle)localObject2);
            try
            {
              localObject1 = (Page)appConfig.getPages().get(localObject1);
              paramString = paramContext;
              if (localObject1 == null) {
                break label141;
              }
              paramString = paramContext;
              if (!((Page)localObject1).isAllowBaseUrl()) {
                break label141;
              }
              ((Bundle)localObject2).putString("baseURL", ((JSONObject)localObject3).getString("baseURL"));
              paramString = paramContext;
            }
            catch (JSONException paramString)
            {
              paramString = paramContext;
            }
            break label141;
          }
          DialogUtil.showAlert(paramContext, "Error parsing RSS", "Unable to access rss content from specified url");
          paramString = (String)localObject2;
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("notes"))
        {
          paramString = username + "-" + appId + "-" + localPage.getId();
          paramContext = new Bundle();
          paramContext.putString("storeId", paramString);
          paramString = new FragmentInfo(NotesListFragment.class.getName(), paramContext);
          break label141;
        }
        if (localPage.isDynamicData())
        {
          localObject1 = new Bundle();
          if (localPage.getType().equalsIgnoreCase("favorites"))
          {
            ((Bundle)localObject1).putString("ARG_URL", getResourceUrl(localPage.getId()));
            ((Bundle)localObject1).putString("jsonString", Favorites.getInstance(paramContext).getJSONString());
          }
          for (;;)
          {
            paramString = new FragmentInfo(DynamicPageFragment.class.getName(), (Bundle)localObject1);
            break;
            ((Bundle)localObject1).putString("ARG_URL", paramString);
            ((Bundle)localObject1).putString("jsonString", null);
          }
        }
        if (((String)localObject1).equalsIgnoreCase("karaoke"))
        {
          paramString = new Bundle();
          paramString.putString("pageId", localPage.getId());
          paramString.putString("songFile", localPage.getKaraokeSongFile());
          paramString.putBoolean("autoStart", localPage.getKaraokeAutoStart());
          paramString = new FragmentInfo(KaraokeFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("camera"))
        {
          paramString = new Bundle();
          paramString.putString("pageId", localPage.getId());
          paramString.putStringArrayList("sendtoaddresses", localPage.getSendToAddresses());
          paramString.putString("welcomeimg", localPage.getCameraWelcomeImg());
          paramString = new FragmentInfo(PhotoEffectFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("voicerecordlist"))
        {
          paramString = new Bundle();
          paramString.putString("emailToSend", localPage.getEmail());
          paramString.putBoolean("recordOnOpen", localPage.isRecordOnOpen());
          paramString = new FragmentInfo(SCVoiceRecordListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("puzzle"))
        {
          paramString = new Bundle();
          paramString.putString("imageName", localPage.getImageName());
          paramContext = localPage.getPuzzleLevels();
          if (paramContext != null) {
            paramString.putSerializable("LEVELS_KEY", paramContext);
          }
          paramString = new FragmentInfo(SCPuzzleGameFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("memogame"))
        {
          paramString = new Bundle();
          paramString.putStringArrayList("resources", localPage.getMemoGameResources());
          paramString = new FragmentInfo(SCMemoGameFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("digitalsignature"))
        {
          paramString = new Bundle();
          paramString.putString("pageId", localPage.getId());
          paramString = new FragmentInfo(SignatureStampFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("fbfanpage"))
        {
          paramString = new Bundle();
          paramString.putString("pageId", localPage.getId());
          paramString.putString("fb_id", localPage.getFBappid());
          paramString.putString("fbpageid", localPage.getFbpageid());
          paramString = new FragmentInfo(FacebookFunPageFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("qrcodelist"))
        {
          paramString = new Bundle();
          paramString.putString("pageid", localPage.getId());
          paramString.putBoolean("QRCODE_ENABLED", true);
          paramString.putString("EMAIL_TO_SEND", localPage.getEmail());
          paramString = new FragmentInfo(BarcodeScannerFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("barcodescanner"))
        {
          paramString = new Bundle();
          paramString.putString("pageid", localPage.getId());
          paramString.putBoolean("BARCODE_ENABLED", true);
          paramString.putString("EMAIL_TO_SEND", localPage.getEmail());
          paramString = new FragmentInfo(BarcodeScannerFragment.class.getName(), paramString);
          break label141;
        }
        if ((((String)localObject1).equalsIgnoreCase("coupon")) || (((String)localObject1).equalsIgnoreCase("coupongps")))
        {
          paramString = new Bundle();
          paramString.putString("pageid", localPage.getId());
          paramString = new FragmentInfo(CouponFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("favorites"))
        {
          paramString = new Bundle();
          if (!localPage.isDynamicData())
          {
            paramString.putString("HEADER_IMAGE", localPage.getHeaderimage());
            paramString = new FragmentInfo(FavoritesFragment.class.getName(), paramString);
            break label141;
          }
          paramString.putString("ARG_URL", localPage.getId());
          paramString.putString("jsonString", Favorites.getInstance(paramContext).getJSONString());
          paramString = new FragmentInfo(DynamicPageFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("cameracover"))
        {
          paramString = new Bundle();
          paramString.putStringArrayList("EXTRA_COMERA_COVERS_ARRAY", localPage.getCameraCovers());
          paramString.putString("EMAIL_TO_SEND", localPage.getEmail());
          paramString = new FragmentInfo(CameraCoverFrgament.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("fgallery"))
        {
          paramString = new Bundle();
          paramString.putParcelableArrayList("FGALLERY_IMAGES_IDENTIFIER", localPage.mosaicImages);
          paramString = new FragmentInfo(SlideShowFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("loyalty"))
        {
          paramString = new Bundle();
          paramString.putString("pageid", localPage.getId());
          paramString = new FragmentInfo(LoyaltyFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("rateandreview"))
        {
          paramString = new Bundle();
          paramString.putString("pageid", localPage.getId());
          paramString.putString("fb_id", localPage.getFBappid());
          paramString = new FragmentInfo(RateAndReviewFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("epubreader"))
        {
          paramString = new Bundle();
          paramString.putString("epubfilepath", localPage.getEpubFile());
          paramString = new FragmentInfo(ePubReaderFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("imagelist"))
        {
          paramString = new Bundle();
          paramString.putString("EMAIL_TO_SEND", localPage.getEmail());
          paramString.putBoolean("PICTURE_ON_OPEN", localPage.isPictureOnOpen());
          paramString = new FragmentInfo(ImageListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("pdfviewer"))
        {
          paramString = new Bundle();
          paramString.putString("nextpage", localPage.getNextpage());
          paramString.putString("pdffile", localPage.getPDFFile());
          paramString.putString("pdftronLicenseKey", pdftronLicenseKey);
          paramString = new FragmentInfo(PDFViewerFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("pdfeditorreader"))
        {
          paramString = new Bundle();
          paramString.putString("pdffile", localPage.getPDFFile());
          paramString.putString("pdfTextDirection", localPage.getTextDirection());
          paramString.putString("NEXT_PAGE_IDENTIFIER", localPage.getNextpage());
          paramString = new FragmentInfo(PDFReaderEditorFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("pdfreader"))
        {
          paramString = new Bundle();
          paramString.putString("pdffile", localPage.getPDFFile());
          paramString.putString("pdfTextDirection", localPage.getTextDirection());
          paramString = new FragmentInfo(PDFReaderFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("login"))
        {
          paramString = new Bundle();
          paramString.putString("ARG_PAGE_ID", str5);
          paramString = new FragmentInfo(LoginFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("videolist"))
        {
          paramString = new Bundle();
          paramString.putString("PAGE_ID_KEY", localPage.getId());
          paramString = new FragmentInfo(VideoFilesListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("scoreboard"))
        {
          paramString = new Bundle();
          paramString.putString("pageid", localPage.getId());
          paramString.putString("scbemail", localPage.getScoreBoardEmail());
          paramString = new FragmentInfo(ScoreBoardFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("purchase"))
        {
          paramString = new Bundle();
          paramString.putString("ARG_PRODUCT_ID", localPage.getProductId());
          paramString.putString("ARG_PRODUCT_TYPE", localPage.getProductType());
          paramString.putString("ARG_REDIRECT_URL", localPage.getRedirectUrl());
          if (isPreviewer) {
            paramString.putBoolean("ARG_SIMULATION_MODE", true);
          }
          paramString = new FragmentInfo(PurchaseFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("magazinestore"))
        {
          paramString = new Bundle();
          paramString.putParcelableArrayList("ARG_MAGAZINES_INFO", localPage.getMagazinesInfo());
          paramString = new FragmentInfo(MagazineStoreFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("dropboxmedialist"))
        {
          paramString = new Bundle();
          paramString.putString("PAGE_ID_KEY", localPage.getId());
          paramString = new FragmentInfo(DropboxMediaListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("fusioncharts"))
        {
          paramContext = new Bundle();
          paramContext.putString("ARG_URL", paramString);
          paramContext.putString("PAGE_ID", localPage.getId());
          paramString = new FragmentInfo(FusionChartsFragment.class.getName(), paramContext);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("pnTopicSubscription"))
        {
          paramString = new Bundle();
          paramString.putStringArrayList("ARG_TOPIC_IDS", appConfig.getPNTopics());
          paramString.putString("ARG_NOTE", localPage.getNote());
          paramString = new FragmentInfo(GCMTopicsFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("messenger"))
        {
          paramString = new Bundle();
          paramString.putInt("ARG_MAX_MESSAGE_LENGTH", localPage.getMaxMessageLength());
          paramString = new FragmentInfo(MessengerFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("nearbylocations"))
        {
          paramString = new Bundle();
          paramString.putString("PLACES_API_KEY", localPage.getPlacesApiKey());
          paramString = new FragmentInfo(NearbyLocationFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("order"))
        {
          paramString = new Bundle();
          paramString.putString("pageId", str5);
          paramString.putParcelable("ORDER_INFO", localPage.getOrderConfing());
          paramString = new FragmentInfo(OrderFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("productorder"))
        {
          paramString = new Bundle();
          paramString.putString("PAGE_ID_KEY", str5);
          paramString = new FragmentInfo(POLocationsAndCategoriesListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("bmicalculator"))
        {
          paramString = new Bundle();
          i = 0;
          while (i < localPage.getResultsBMI().size())
          {
            paramContext = (HashMap)localPage.getResultsBMI().get(i);
            localObject1 = paramContext.keySet().iterator();
            while (((Iterator)localObject1).hasNext())
            {
              localObject2 = (String)((Iterator)localObject1).next();
              paramString.putString((String)localObject2 + (i + 1), (String)paramContext.get(localObject2));
            }
            i += 1;
          }
          paramString = new FragmentInfo(BmiCalculatorFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("nativetetris"))
        {
          paramString = new Bundle();
          paramString.putString("PAGE_ID_KEY", str5);
          paramString = new FragmentInfo(NativeTetrisFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("locationLock"))
        {
          paramString = new Bundle();
          paramString.putString("PAGE_ID", str5);
          paramString.putString("ARG_STORE_ID", "LocationLock." + username + "." + appId + "." + str5);
          paramString = new FragmentInfo(LocationLockFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("facebookfeeds"))
        {
          paramString = new Bundle();
          paramString.putString("PAGE_ID", str5);
          paramString = new FragmentInfo(FeedsListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("goaltrackercategory"))
        {
          paramString = new Bundle();
          paramString = new FragmentInfo(GoalTrackerCategoriesListFragment.class.getName(), paramString);
          break label141;
        }
        if (((String)localObject1).equalsIgnoreCase("goaltracker"))
        {
          paramString = new Bundle();
          paramString = new FragmentInfo(GoalTrackerGoalsListFragment.class.getName(), paramString);
          break label141;
        }
        paramString = getHtmlPageFragmentInfo(paramString);
        break label141;
        paramContext = paramString;
        if (((ArrayList)localObject1).size() <= 0) {
          continue;
        }
        paramContext = new Bundle();
        paramContext.putSerializable("ARG_HOSTED_RESOURCES", (Serializable)localObject1);
        paramContext.putParcelable("ARG_PAGE_FRAGMENT_INFO", paramString);
        paramContext.putString("PAGE_TRANSITION", localPage.getTransition());
        if ((!str5.matches("(?i)tab[1-9]([0-9]+)?.html")) && (!str5.equalsIgnoreCase("index.html"))) {}
        for (boolean bool1 = true;; bool1 = false)
        {
          paramContext.putBoolean("ARG_CAN_BE_CANCELED", bool1);
          return new FragmentInfo(SCDownloadHostedPageResourcesFragment.class.getName(), paramContext);
        }
        label5764:
        paramString = new Bundle();
        return new FragmentInfo(SCDownloadHostedPageResourcesFragment.class.getName(), paramString);
      }
      catch (UnsupportedEncodingException paramString)
      {
        for (;;)
        {
          paramContext = (Context)localObject1;
        }
      }
    }
  }
  
  public static Intent getPageIntent(FragmentInfo paramFragmentInfo, Context paramContext)
  {
    paramContext = new Intent(paramContext, SCPageFragmentActivity.class);
    paramContext.putExtra("ARG_PAGE_FRAGMENT_INFO", paramFragmentInfo);
    if (paramFragmentInfo != null) {
      paramContext.putExtra("PAGE_TRANSITION", paramFragmentInfo.getArguments().getString("PAGE_TRANSITION"));
    }
    return paramContext;
  }
  
  public static Intent getPageIntent(String paramString, Activity paramActivity)
  {
    String str1 = Uri.parse(paramString).getLastPathSegment();
    Page localPage = (Page)appConfig.getPages().get(str1);
    if ((localPage == null) || (localPage.getType() == null))
    {
      paramActivity = getHtmlPageIntent(paramString, paramActivity);
      return paramActivity;
    }
    String str2 = localPage.getType();
    if (str2.equalsIgnoreCase("mbfxphotoupload"))
    {
      paramString = null;
      if (localPage.getTargetURL() != null) {
        paramString = DynamicHTML.replaceMBFXContextinURL(localPage.getTargetURL());
      }
      paramActivity = new Intent(paramActivity, PhotoUploader.class);
      paramActivity.putExtra("targetURL", paramString);
      paramString = paramActivity;
    }
    for (;;)
    {
      paramActivity = paramString;
      if (paramString == null) {
        break;
      }
      paramString.putExtra("PAGE_ID", str1);
      paramString.putExtra("PAGE_TRANSITION", localPage.getTransition());
      return paramString;
      if (str2.equalsIgnoreCase("mbfxlogin"))
      {
        paramString = new Intent(paramActivity, LoginActivity.class);
        paramString.putExtra("loginURL", localPage.getLoginURL());
        paramString.putExtra("facebookLoginURL", localPage.getFacebookLoginURL());
        paramString.putExtra("forgotPasswordURL", localPage.getForgotPasswordURL());
        paramString.putExtra("registerURL", localPage.getRegisterURL());
      }
      else if (str2.equalsIgnoreCase("locationDetector"))
      {
        paramString = new Intent(paramActivity, LocationDetectorActivity.class);
        paramString.putExtra("ARG_COORDINATE_FORMAT", localPage.getCoordinateFormatType());
      }
      else if (str2.equalsIgnoreCase("search"))
      {
        paramString = new Intent(paramActivity, SearchActivity.class);
        paramString.putExtra("ARG_INDEX_FILE_NAME", "indexpage.plist");
      }
      else if (str2.equalsIgnoreCase("savePhoto"))
      {
        paramString = new Intent(paramActivity, SavePhotoActivity.class);
        paramString.putExtra("EXTRA_BOTTOM_TEXT", localPage.getPhotoBottomText());
        paramString.putExtra("EXTRA_LEFT_TEXT_PREFIXES", localPage.getLeftTextPrefixes());
        paramString.putExtra("EXTRA_STORE_ID", localPage.getId());
      }
      else if (str2.equalsIgnoreCase("starbuckscards"))
      {
        paramString = new Intent(paramActivity, CardsListActivity.class);
        paramActivity = new StringBuilder();
        paramActivity.append(getAppProtectedStoragePath()).append("/starbucks/").append(localPage.getId()).append(".cfg");
        paramString.putExtra("storePath", paramActivity.toString());
      }
      else if (str2.equalsIgnoreCase("sendvoicerecord"))
      {
        paramString = new Intent(paramActivity, VoiceRecordPickerActivity.class);
        paramString.putExtra("sendonly", true);
        paramString.putExtra("emailToSend", localPage.getEmail());
      }
      else if (str2.equalsIgnoreCase("qrcodescanner"))
      {
        paramString = new Intent(paramActivity, ZBarScanner.class);
        paramString.putExtra("SCAN_MODE", "QR_CODE_MODE");
        paramString.putExtra("FAST_SCAN", true);
      }
      else if (str2.equalsIgnoreCase("phonegap"))
      {
        paramString = new Intent(paramActivity, PhoneGapActivity.class);
      }
      else
      {
        paramString = getHtmlPageIntent(paramString, paramActivity);
      }
    }
  }
  
  public static InputStream getResourceOrUrlStream(String paramString)
  {
    if (paramString.contains("://")) {}
    for (;;)
    {
      try
      {
        paramString = HTTPUtil.getUrlStream(paramString);
        return paramString;
      }
      catch (IOException paramString)
      {
        Log.i("App", "getResourceOrUrlStream " + paramString);
        return null;
      }
      paramString = getResourceStream(paramString);
    }
  }
  
  public static String getResourceRelativeUrl(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if ((isPreviewer) || (syncEnabled)) {
      localStringBuilder.append(getAppResourcesPath()).append("/").append(paramString);
    }
    for (;;)
    {
      return localStringBuilder.toString();
      if (apkExpansionFilesEnabled) {
        localStringBuilder.append(paramString);
      } else {
        localStringBuilder.append("Main").append("/").append(paramString);
      }
    }
  }
  
  public static InputStream getResourceStream(String paramString)
  {
    try
    {
      paramString = getResourceStreamWithExceptions(paramString);
      return paramString;
    }
    catch (FileNotFoundException paramString)
    {
      Log.i("App", "getResourceStream " + paramString);
      return null;
    }
    catch (IOException paramString)
    {
      Log.w("App", "getResourceStream " + paramString, paramString);
    }
    return null;
  }
  
  public static InputStream getResourceStreamWithExceptions(String paramString)
    throws IOException
  {
    if ((paramString == null) || (paramString.trim().length() == 0)) {
      return null;
    }
    if ((isPreviewer) || (syncEnabled)) {
      return new FileInputStream(new File(getAppResourcesPath() + "/" + paramString));
    }
    if (apkExpansionFilesEnabled)
    {
      if (apkExpansionFile == null) {
        throw new FileNotFoundException("Expansion file not loaded");
      }
      try
      {
        paramString = apkExpansionFile.getInputStream(paramString);
        return paramString;
      }
      catch (NullPointerException paramString)
      {
        throw new FileNotFoundException("Error loading from expansion file");
      }
    }
    return assetManager.open("Main/" + paramString);
  }
  
  public static String getResourceUrl(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if ((isPreviewer) || (syncEnabled)) {
      localStringBuilder.append("file://").append(getAppResourcesPath()).append("/").append(paramString);
    }
    for (;;)
    {
      return localStringBuilder.toString();
      if (apkExpansionFilesEnabled) {
        localStringBuilder.append(expansionFilesContentProviderUri).append("/").append(paramString);
      } else {
        localStringBuilder.append("file:///android_asset/").append("Main").append("/").append(paramString);
      }
    }
  }
  
  public static BitmapDrawable getScaledDrawableResource(String paramString)
  {
    Object localObject = null;
    InputStream localInputStream = getResourceStream(paramString);
    paramString = localObject;
    if (localInputStream != null)
    {
      paramString = new BitmapFactory.Options();
      paramString.inScaled = false;
      paramString.inDensity = 160;
      paramString = new BitmapDrawable(resources, BitmapFactory.decodeStream(localInputStream, null, paramString));
    }
    try
    {
      localInputStream.close();
      return paramString;
    }
    catch (IOException localIOException) {}
    return paramString;
  }
  
  public static Typeface getTypefaceResource(String paramString)
  {
    if ((paramString == null) || (paramString.trim().length() == 0)) {}
    while ((Build.VERSION.SDK_INT == 8) && (!paramString.toLowerCase(Locale.getDefault()).endsWith(".ttf"))) {
      return null;
    }
    try
    {
      if ((isPreviewer) || (syncEnabled)) {
        return Typeface.createFromFile(getAppResourcesPath() + "/" + paramString);
      }
      Typeface localTypeface = Typeface.createFromAsset(assetManager, "Main/" + paramString);
      return localTypeface;
    }
    catch (Exception localException)
    {
      Log.w("App", "Clould not load font from resources: " + paramString);
    }
    return null;
  }
  
  public static String getUserAppsRelativePath()
  {
    return getAllAppsRelativePath() + "/" + username;
  }
  
  public static String getUserProtectedStoragePath()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(protectedStorageRootPath);
    localStringBuilder.append("/").append(username);
    return localStringBuilder.toString();
  }
  
  public static void googleAnalyticsTrackPageView(String paramString, Context paramContext)
  {
    String str = Uri.parse(paramString).getLastPathSegment();
    Page localPage = (Page)appConfig.getPages().get(str);
    if ((localPage != null) && (!localPage.getType().equalsIgnoreCase("rsspro")) && (!localPage.getType().equalsIgnoreCase("rssprodetail")) && (GoogleAnalytics.getInstance(paramContext).getDefaultTracker() != null)) {
      GoogleAnalytics.getInstance(paramContext).getDefaultTracker().trackView(str);
    }
    while ((localPage != null) || (paramString == null) || (GoogleAnalytics.getInstance(paramContext).getDefaultTracker() == null)) {
      return;
    }
    GoogleAnalytics.getInstance(paramContext).getDefaultTracker().trackView(paramString);
  }
  
  public static void initExpansionFilesIfRequired(Context paramContext)
  {
    if (!apkExpansionFilesEnabled) {}
    for (;;)
    {
      return;
      System.currentTimeMillis();
      try
      {
        DownloadInfo[] arrayOfDownloadInfo = DownloadsDB.getDB(paramContext).getDownloads();
        apkExpansionFilesVersions = new int[] { 1, 1 };
        if (arrayOfDownloadInfo != null)
        {
          int i = 0;
          while (i < arrayOfDownloadInfo.length)
          {
            String str = arrayOfDownloadInfo[i].mFileName;
            int j = str.indexOf(".") + 1;
            str = str.substring(j, str.indexOf(".", j));
            apkExpansionFilesVersions[i] = Integer.parseInt(str);
            i += 1;
          }
          apkExpansionFile = APKExpansionSupport.getAPKExpansionZipFile(paramContext, apkExpansionFilesVersions[0], apkExpansionFilesVersions[1]);
          return;
        }
      }
      catch (Exception paramContext)
      {
        Log.e("App", "Could not load expansion files");
      }
    }
  }
  
  public static boolean isExternalStorageWritable()
  {
    String str = Environment.getExternalStorageState();
    int j;
    int i;
    if ("mounted".equals(str))
    {
      j = 1;
      i = 1;
    }
    while ((i != 0) && (j != 0))
    {
      return true;
      if ("mounted_ro".equals(str))
      {
        i = 1;
        j = 0;
      }
      else
      {
        j = 0;
        i = 0;
      }
    }
    return false;
  }
  
  public static boolean isPublisherWithoutWebsite(Context paramContext)
  {
    return ("".equalsIgnoreCase(publisherId)) && (!paramContext.getPackageName().equalsIgnoreCase("com.qbiki.seattleclouds"));
  }
  
  public static boolean processScheme(String paramString, Activity paramActivity)
  {
    return processScheme(paramString, paramActivity, null);
  }
  
  public static boolean processScheme(String paramString, final Activity paramActivity, final Fragment paramFragment)
  {
    paramString = fixDoubleScheme(paramString);
    if (paramString.startsWith("sendmail:"))
    {
      if (paramString.indexOf("sendmail://") != -1) {}
      for (paramString = paramString.replaceFirst("sendmail://", "");; paramString = paramString.replaceFirst("sendmail:", ""))
      {
        IntentUtil.mailTo(paramActivity, paramString.trim());
        return true;
      }
    }
    if (paramString.startsWith("map://"))
    {
      IntentUtil.mapsQuery(paramActivity, paramString.substring(6));
      return true;
    }
    if (paramString.startsWith("latlong://"))
    {
      IntentUtil.mapsLatLon(paramActivity, paramString.substring(10));
      return true;
    }
    if (paramString.startsWith("google.streetview:"))
    {
      paramFragment = new Intent("android.intent.action.VIEW");
      paramFragment.setData(Uri.parse(paramString));
      IntentUtil.startActivitySafe(paramActivity, paramFragment);
      return true;
    }
    if (paramString.startsWith("sound://"))
    {
      paramString = paramString.substring(8);
      Log.v("App", "Playing audio file: " + paramString);
      soundEffectsPlayer.playAudioFile(paramString);
      return true;
    }
    if (paramString.startsWith("movie://"))
    {
      paramFragment = getResourceRelativeUrl(paramString.substring(8));
      paramString = paramFragment;
      if (!paramFragment.startsWith("/")) {
        paramString = "/" + paramFragment;
      }
      paramFragment = new Intent("android.intent.action.VIEW");
      paramFragment.setDataAndType(Uri.parse(internalFileContentProviderUri + paramString), "video/*");
      IntentUtil.startActivitySafe(paramActivity, paramFragment);
      return true;
    }
    if (paramString.startsWith("xaudio://"))
    {
      paramFragment = new Intent("android.intent.action.VIEW");
      paramString = paramString.substring(9);
      Log.v("App", "xaudio url = " + paramString);
      paramFragment.setDataAndType(Uri.parse(paramString), "audio/*");
      IntentUtil.startActivitySafe(paramActivity, paramFragment);
      return true;
    }
    if (paramString.startsWith("xvideo://"))
    {
      paramFragment = new Intent("android.intent.action.VIEW");
      paramString = paramString.substring(9);
      Log.v("App", "xvideo url = " + paramString);
      paramFragment.setDataAndType(Uri.parse(paramString), "video/*");
      IntentUtil.startActivitySafe(paramActivity, paramFragment);
      return true;
    }
    if (paramString.startsWith("external://"))
    {
      paramFragment = paramString.substring(11);
      paramString = paramFragment;
      if (paramFragment.indexOf("://") == -1) {
        paramString = "http://" + paramFragment;
      }
      paramFragment = new Intent("android.intent.action.VIEW");
      paramFragment.setData(Uri.parse(paramString));
      IntentUtil.startActivitySafe(paramActivity, paramFragment);
      return true;
    }
    if (paramString.startsWith("bgplayer-play://"))
    {
      paramString = paramString.substring(16);
      Log.v("App", "Background player PLAY: " + paramString);
      paramFragment = new ProgressDialog(paramActivity);
      paramFragment.setMessage("Connecting...");
      paramFragment.getWindow().clearFlags(2);
      paramFragment.setCancelable(true);
      paramFragment.setOnCancelListener(new DialogInterface.OnCancelListener()
      {
        public void onCancel(DialogInterface paramAnonymousDialogInterface)
        {
          App.backgroundMediaPlayer.forceStop();
        }
      });
      if (paramString.indexOf("://") != -1) {
        paramFragment.show();
      }
      new Thread(new Runnable()
      {
        public void run()
        {
          final boolean bool = App.backgroundMediaPlayer.playAudioSource(this.val$source);
          paramFragment.dismiss();
          paramActivity.runOnUiThread(new Runnable()
          {
            public void run()
            {
              if (!bool)
              {
                Toast.makeText(App.3.this.val$parentActivity, "Could not load and play\n" + App.3.this.val$source, 1).show();
                App.backgroundMediaPlayer.stop();
              }
            }
          });
        }
      }).start();
      return true;
    }
    if (paramString.startsWith("bgplayer-stop://"))
    {
      paramString = paramString.substring(16);
      Log.v("App", "Background player STOP: " + paramString);
      backgroundMediaPlayer.stop();
      return true;
    }
    if (paramString.startsWith("save://"))
    {
      paramString = paramString.substring(7);
      paramString = Uri.parse("?" + paramString);
      if (paramString.getQuery() != null) {}
      for (paramString = paramString.getQuery().toString();; paramString = "")
      {
        int i = paramString.indexOf("=", 0);
        if (i == -1) {
          break;
        }
        paramActivity = paramString.substring(0, i);
        paramString = paramString.substring(i + 1, paramString.length());
        if ((paramActivity == null) || (paramActivity.equalsIgnoreCase("")) || (paramString == null) || (paramString.equalsIgnoreCase(""))) {
          break;
        }
        JObjectUtil.saveJValue(paramActivity, paramString);
        return true;
      }
    }
    if (paramString.startsWith("lpforgotpassword://"))
    {
      paramString = paramString.substring(19);
      paramString = Uri.parse("?" + paramString).getQueryParameter("pageid");
      paramFragment = (Page)appConfig.getPages().get(paramString);
      if ((paramFragment != null) && (paramFragment.getType().equals("login")))
      {
        paramFragment = new Bundle();
        paramFragment.putString("pageId", paramString);
        showPage(new FragmentInfo(SCForgotPasswordFragment.class.getName(), paramFragment), paramActivity);
        return true;
      }
      DialogUtil.showAlert(paramActivity, "ERROR", "Invalid request. Page id or type doesn't match a valid entry.");
      return true;
    }
    if (paramString.startsWith("pay://"))
    {
      paypalProc = new PayPalProcessing(false, paramActivity);
      paypalProc.processPayScheme(paramString);
      return true;
    }
    if (paramString.startsWith("addtocart://")) {
      try
      {
        shoppingCart.addToCart(paramString, paramActivity);
        return true;
      }
      catch (UnsupportedEncodingException paramString)
      {
        Log.e("App", paramString.getMessage());
        return true;
      }
    }
    if (paramString.startsWith("removefromcart://")) {
      try
      {
        shoppingCart.removeFromCart(paramString, paramActivity);
        return true;
      }
      catch (UnsupportedEncodingException paramString)
      {
        Log.e("App", paramString.getMessage());
        return true;
      }
    }
    if (paramString.startsWith("local://"))
    {
      paramString = paramString.substring(8);
      if (resourceExists(paramString))
      {
        showPageWithId(paramString, paramActivity);
        return true;
      }
      DialogUtil.showAlert(paramActivity, 2131361915, 2131361928);
      return true;
    }
    if (paramString.startsWith("ratings://"))
    {
      paramString = paramString.substring(10);
      paramString = (Page)appConfig.getPages().get(paramString);
      paramFragment = new Bundle();
      paramFragment.putString("pageid", paramString.getId());
      paramFragment.putString("fb_id", paramString.getFBappid());
      paramActivity.startActivityForResult(getPageIntent(new FragmentInfo(RateAndReviewFragment.class.getName(), paramFragment), paramActivity), 57053);
      return true;
    }
    if (paramString.startsWith("pushmessages:"))
    {
      paramString = new Intent(paramActivity, AnnouncementActivity.class);
      paramString.setFlags(67108864);
      paramString.putExtra("noTitle", true);
      paramActivity.startActivity(paramString);
      return true;
    }
    if (paramString.startsWith("ytube:"))
    {
      IntentUtil.startActivitySafe(paramActivity, new Intent("android.intent.action.VIEW", Uri.parse(paramString.substring(6))));
      return true;
    }
    if (paramString.startsWith("buy://"))
    {
      paramString = paramString.substring(6).split(":");
      Bundle localBundle = new Bundle();
      if (paramString.length > 0) {
        localBundle.putString("ARG_PRODUCT_ID", paramString[0]);
      }
      if (paramString.length > 1) {
        localBundle.putString("ARG_REDIRECT_URL", paramString[1]);
      }
      if (paramString.length > 2) {
        localBundle.putString("ARG_PRODUCT_TYPE", paramString[2]);
      }
      if (isPreviewer) {
        localBundle.putBoolean("ARG_SIMULATION_MODE", true);
      }
      paramString = new FragmentInfo(PurchaseFragment.class.getName(), localBundle);
      if (paramFragment != null)
      {
        showPage(paramString, paramFragment);
        return true;
      }
      showPage(paramString, paramActivity);
      return true;
    }
    return false;
  }
  
  public static boolean processScheme(String paramString, Fragment paramFragment)
  {
    return processScheme(paramString, paramFragment.getActivity(), paramFragment);
  }
  
  public static boolean resourceExists(String paramString)
  {
    return getResourceStream(paramString) != null;
  }
  
  public static boolean resourceExistsInResourcesDir(String paramString)
  {
    return new File(getAppResourcesPath() + "/" + paramString).exists();
  }
  
  private void restoreRuntimeState(boolean paramBoolean)
  {
    try
    {
      SharedPreferences localSharedPreferences = getSharedPreferences("RuntimeState", 0);
      if (isPreviewer) {
        appId = localSharedPreferences.getString("currentAppId", appId);
      }
      started = localSharedPreferences.getBoolean("appStarted", false);
      if ((started) || (paramBoolean))
      {
        initExpansionFilesIfRequired(this);
        AppConfigHandler.parseAppConfig(this);
      }
      return;
    }
    finally {}
  }
  
  public static boolean showActionPage(String paramString, Activity paramActivity)
  {
    paramString = Uri.parse(paramString).getLastPathSegment();
    paramString = (Page)appConfig.getPages().get(paramString);
    if ((paramString == null) || (paramString.getType() == null)) {
      return false;
    }
    if (paramString.getType().equalsIgnoreCase("sms"))
    {
      IntentUtil.sendSms(paramActivity, paramString.getSmsNumber(), paramString.getSmsBody());
      return true;
    }
    return false;
  }
  
  public static boolean showActionPage(String paramString, Fragment paramFragment)
  {
    return showActionPage(paramString, paramFragment.getActivity());
  }
  
  public static void showPage(FragmentInfo paramFragmentInfo, Activity paramActivity)
  {
    paramActivity.startActivity(getPageIntent(paramFragmentInfo, paramActivity));
  }
  
  public static void showPage(FragmentInfo paramFragmentInfo, Fragment paramFragment)
  {
    NavigationFragment localNavigationFragment = SCFragmentHelper.getNavigationFragment(paramFragment);
    if (localNavigationFragment != null)
    {
      localNavigationFragment.pushFragmentImmediate(paramFragmentInfo);
      AdManager.showRevMob(paramFragment.getActivity(), paramFragmentInfo.getArguments(), revMobAppid);
      return;
    }
    showPage(paramFragmentInfo, paramFragment.getActivity());
  }
  
  public static void showPage(String paramString, Activity paramActivity)
  {
    Log.v("App", "Showing page for url: " + paramString);
    if (processScheme(paramString, paramActivity)) {}
    Intent localIntent;
    do
    {
      return;
      if (showActionPage(paramString, paramActivity))
      {
        googleAnalyticsTrackPageView(paramString, paramActivity);
        return;
      }
      localIntent = getPageIntent(paramString, paramActivity);
    } while (localIntent == null);
    paramActivity.startActivity(localIntent);
    googleAnalyticsTrackPageView(paramString, paramActivity);
  }
  
  public static void showPage(String paramString, Fragment paramFragment)
  {
    Log.v("App", "Showing page for url: " + paramString);
    if (processScheme(paramString, paramFragment)) {}
    Object localObject;
    do
    {
      do
      {
        return;
        googleAnalyticsTrackPageView(paramString, paramFragment.getActivity());
      } while (showActionPage(paramString, paramFragment));
      localObject = getPageForUrl(paramString);
      if ((localObject != null) && ((((Page)localObject).getType().equals("search")) || (((Page)localObject).getType().equals("locationDetector"))) && (SCFragmentHelper.getNavigationFragment(paramFragment) == null))
      {
        paramString = getPageIntent(paramString, paramFragment.getActivity());
        paramFragment.getActivity().startActivity(paramString);
        return;
      }
      localObject = getPageFragmentInfo(paramString, paramFragment.getActivity());
    } while (localObject == null);
    paramString = getIntentIfPageIsActivityOrNull(paramString, (FragmentInfo)localObject, paramFragment.getActivity());
    if (paramString == null)
    {
      showPage((FragmentInfo)localObject, paramFragment);
      return;
    }
    paramFragment.getActivity().startActivity(paramString);
  }
  
  public static void showPageWithId(String paramString, Activity paramActivity)
  {
    showPage(getResourceUrl(paramString), paramActivity);
  }
  
  public static void showPageWithId(String paramString, Fragment paramFragment)
  {
    showPage(getResourceUrl(paramString), paramFragment);
  }
  
  /* Error */
  public void onCreate()
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 1879	android/app/Application:onCreate	()V
    //   4: new 306	com/qbiki/seattleclouds/AppConfig
    //   7: dup
    //   8: invokespecial 1880	com/qbiki/seattleclouds/AppConfig:<init>	()V
    //   11: putstatic 304	com/qbiki/seattleclouds/App:appConfig	Lcom/qbiki/seattleclouds/AppConfig;
    //   14: new 1622	com/qbiki/util/SCMediaPlayer
    //   17: dup
    //   18: aload_0
    //   19: invokespecial 1883	com/qbiki/util/SCMediaPlayer:<init>	(Lcom/qbiki/seattleclouds/App;)V
    //   22: putstatic 1620	com/qbiki/seattleclouds/App:soundEffectsPlayer	Lcom/qbiki/util/SCMediaPlayer;
    //   25: new 1622	com/qbiki/util/SCMediaPlayer
    //   28: dup
    //   29: aload_0
    //   30: invokespecial 1883	com/qbiki/util/SCMediaPlayer:<init>	(Lcom/qbiki/seattleclouds/App;)V
    //   33: putstatic 1704	com/qbiki/seattleclouds/App:backgroundMediaPlayer	Lcom/qbiki/util/SCMediaPlayer;
    //   36: new 1743	com/qbiki/shoppingcart/ShoppingCart
    //   39: dup
    //   40: invokespecial 1884	com/qbiki/shoppingcart/ShoppingCart:<init>	()V
    //   43: putstatic 1741	com/qbiki/seattleclouds/App:shoppingCart	Lcom/qbiki/shoppingcart/ShoppingCart;
    //   46: aload_0
    //   47: invokevirtual 1888	com/qbiki/seattleclouds/App:getResources	()Landroid/content/res/Resources;
    //   50: putstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   53: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   56: ldc_w 1889
    //   59: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   62: putstatic 1121	com/qbiki/seattleclouds/App:isPreviewer	Z
    //   65: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   68: ldc_w 1895
    //   71: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   74: putstatic 1899	com/qbiki/seattleclouds/App:serverHostName	Ljava/lang/String;
    //   77: getstatic 1899	com/qbiki/seattleclouds/App:serverHostName	Ljava/lang/String;
    //   80: ldc_w 1901
    //   83: invokevirtual 1243	java/lang/String:matches	(Ljava/lang/String;)Z
    //   86: ifeq +585 -> 671
    //   89: new 233	java/lang/StringBuilder
    //   92: dup
    //   93: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   96: getstatic 1899	com/qbiki/seattleclouds/App:serverHostName	Ljava/lang/String;
    //   99: iconst_0
    //   100: getstatic 1899	com/qbiki/seattleclouds/App:serverHostName	Ljava/lang/String;
    //   103: ldc_w 683
    //   106: invokevirtual 222	java/lang/String:indexOf	(Ljava/lang/String;)I
    //   109: invokevirtual 238	java/lang/String:substring	(II)Ljava/lang/String;
    //   112: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   115: ldc_w 1903
    //   118: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   121: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   124: putstatic 1905	com/qbiki/seattleclouds/App:scmServerHostName	Ljava/lang/String;
    //   127: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   130: ldc_w 1906
    //   133: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   136: putstatic 253	com/qbiki/seattleclouds/App:publisherId	Ljava/lang/String;
    //   139: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   142: ldc_w 1907
    //   145: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   148: putstatic 266	com/qbiki/seattleclouds/App:username	Ljava/lang/String;
    //   151: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   154: ldc_w 1908
    //   157: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   160: putstatic 268	com/qbiki/seattleclouds/App:appId	Ljava/lang/String;
    //   163: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   166: ldc_w 1907
    //   169: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   172: putstatic 1910	com/qbiki/seattleclouds/App:originalUsername	Ljava/lang/String;
    //   175: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   178: ldc_w 1908
    //   181: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   184: putstatic 1912	com/qbiki/seattleclouds/App:originalAppId	Ljava/lang/String;
    //   187: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   190: ldc_w 1913
    //   193: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   196: putstatic 130	com/qbiki/seattleclouds/App:syncEnabled	Z
    //   199: getstatic 1121	com/qbiki/seattleclouds/App:isPreviewer	Z
    //   202: ifeq +7 -> 209
    //   205: iconst_1
    //   206: putstatic 130	com/qbiki/seattleclouds/App:syncEnabled	Z
    //   209: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   212: ldc_w 1914
    //   215: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   218: putstatic 1916	com/qbiki/seattleclouds/App:urlScheme	Ljava/lang/String;
    //   221: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   224: ldc_w 1917
    //   227: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   230: putstatic 134	com/qbiki/seattleclouds/App:rotationEnabled	Z
    //   233: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   236: ldc_w 1918
    //   239: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   242: putstatic 140	com/qbiki/seattleclouds/App:defaultFacebookAppID	Ljava/lang/String;
    //   245: getstatic 253	com/qbiki/seattleclouds/App:publisherId	Ljava/lang/String;
    //   248: ldc 62
    //   250: invokevirtual 257	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   253: ifeq +37 -> 290
    //   256: getstatic 140	com/qbiki/seattleclouds/App:defaultFacebookAppID	Ljava/lang/String;
    //   259: ifnull +26 -> 285
    //   262: getstatic 140	com/qbiki/seattleclouds/App:defaultFacebookAppID	Ljava/lang/String;
    //   265: ldc 62
    //   267: invokevirtual 257	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   270: ifne +15 -> 285
    //   273: getstatic 140	com/qbiki/seattleclouds/App:defaultFacebookAppID	Ljava/lang/String;
    //   276: ldc_w 1920
    //   279: invokevirtual 257	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   282: ifeq +8 -> 290
    //   285: ldc 33
    //   287: putstatic 140	com/qbiki/seattleclouds/App:defaultFacebookAppID	Ljava/lang/String;
    //   290: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   293: ldc_w 1921
    //   296: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   299: invokestatic 1926	com/qbiki/seattleclouds/AppLicensing:setEnabled	(Z)V
    //   302: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   305: ldc_w 1927
    //   308: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   311: invokevirtual 197	java/lang/String:trim	()Ljava/lang/String;
    //   314: invokestatic 1930	com/qbiki/seattleclouds/AppLicensing:setPublicKey	(Ljava/lang/String;)V
    //   317: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   320: ldc_w 1931
    //   323: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   326: putstatic 132	com/qbiki/seattleclouds/App:gcmEnabled	Z
    //   329: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   332: ldc_w 1932
    //   335: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   338: putstatic 136	com/qbiki/seattleclouds/App:apkExpansionFilesEnabled	Z
    //   341: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   344: ldc_w 1933
    //   347: invokevirtual 1894	android/content/res/Resources:getBoolean	(I)Z
    //   350: putstatic 138	com/qbiki/seattleclouds/App:inAppBillingEnabled	Z
    //   353: new 233	java/lang/StringBuilder
    //   356: dup
    //   357: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   360: ldc_w 1935
    //   363: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   366: aload_0
    //   367: invokevirtual 1936	com/qbiki/seattleclouds/App:getPackageName	()Ljava/lang/String;
    //   370: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   373: ldc_w 1938
    //   376: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   379: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   382: putstatic 1631	com/qbiki/seattleclouds/App:internalFileContentProviderUri	Ljava/lang/String;
    //   385: new 233	java/lang/StringBuilder
    //   388: dup
    //   389: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   392: ldc_w 1935
    //   395: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   398: aload_0
    //   399: invokevirtual 1936	com/qbiki/seattleclouds/App:getPackageName	()Ljava/lang/String;
    //   402: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   405: ldc_w 1940
    //   408: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   411: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   414: putstatic 1433	com/qbiki/seattleclouds/App:expansionFilesContentProviderUri	Ljava/lang/String;
    //   417: aload_0
    //   418: invokevirtual 1944	com/qbiki/seattleclouds/App:getAssets	()Landroid/content/res/AssetManager;
    //   421: putstatic 1421	com/qbiki/seattleclouds/App:assetManager	Landroid/content/res/AssetManager;
    //   424: new 233	java/lang/StringBuilder
    //   427: dup
    //   428: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   431: aload_0
    //   432: invokevirtual 1948	com/qbiki/seattleclouds/App:getFilesDir	()Ljava/io/File;
    //   435: invokevirtual 1951	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   438: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   441: ldc_w 264
    //   444: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   447: ldc 55
    //   449: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   452: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   455: putstatic 281	com/qbiki/seattleclouds/App:resourcesRootPath	Ljava/lang/String;
    //   458: aload_0
    //   459: invokevirtual 1948	com/qbiki/seattleclouds/App:getFilesDir	()Ljava/io/File;
    //   462: invokevirtual 1951	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   465: putstatic 373	com/qbiki/seattleclouds/App:oldResourcesRootPath	Ljava/lang/String;
    //   468: new 233	java/lang/StringBuilder
    //   471: dup
    //   472: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   475: invokestatic 1954	android/os/Environment:getExternalStorageDirectory	()Ljava/io/File;
    //   478: invokevirtual 1951	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   481: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   484: ldc_w 1956
    //   487: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   490: aload_0
    //   491: invokevirtual 1936	com/qbiki/seattleclouds/App:getPackageName	()Ljava/lang/String;
    //   494: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   497: ldc_w 1958
    //   500: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   503: ldc 39
    //   505: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   508: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   511: putstatic 262	com/qbiki/seattleclouds/App:externalResourcesRootPath	Ljava/lang/String;
    //   514: new 233	java/lang/StringBuilder
    //   517: dup
    //   518: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   521: aload_0
    //   522: invokevirtual 1948	com/qbiki/seattleclouds/App:getFilesDir	()Ljava/io/File;
    //   525: invokevirtual 1951	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   528: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   531: ldc_w 264
    //   534: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   537: ldc 65
    //   539: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   542: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   545: putstatic 274	com/qbiki/seattleclouds/App:protectedStorageRootPath	Ljava/lang/String;
    //   548: new 233	java/lang/StringBuilder
    //   551: dup
    //   552: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   555: invokestatic 1954	android/os/Environment:getExternalStorageDirectory	()Ljava/io/File;
    //   558: invokevirtual 1951	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   561: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   564: ldc_w 1956
    //   567: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   570: aload_0
    //   571: invokevirtual 1936	com/qbiki/seattleclouds/App:getPackageName	()Ljava/lang/String;
    //   574: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   577: ldc_w 1958
    //   580: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   583: ldc 42
    //   585: invokevirtual 242	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   588: invokevirtual 250	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   591: putstatic 271	com/qbiki/seattleclouds/App:externalStorageRootPath	Ljava/lang/String;
    //   594: aload_0
    //   595: invokevirtual 1962	com/qbiki/seattleclouds/App:getApplicationInfo	()Landroid/content/pm/ApplicationInfo;
    //   598: getfield 1967	android/content/pm/ApplicationInfo:flags	I
    //   601: iconst_2
    //   602: iand
    //   603: ifeq +7 -> 610
    //   606: iconst_1
    //   607: putstatic 124	com/qbiki/seattleclouds/App:DEBUG	Z
    //   610: getstatic 1121	com/qbiki/seattleclouds/App:isPreviewer	Z
    //   613: ifeq +7 -> 620
    //   616: aload_0
    //   617: invokevirtual 1970	com/qbiki/seattleclouds/App:retrieveLoginInfo	()V
    //   620: invokestatic 1975	com/qbiki/scapi/SCApi:getInstance	()Lcom/qbiki/scapi/SCApi;
    //   623: aload_0
    //   624: invokevirtual 1979	com/qbiki/seattleclouds/App:getApplicationContext	()Landroid/content/Context;
    //   627: invokevirtual 1982	com/qbiki/scapi/SCApi:init	(Landroid/content/Context;)V
    //   630: invokestatic 1975	com/qbiki/scapi/SCApi:getInstance	()Lcom/qbiki/scapi/SCApi;
    //   633: getstatic 1450	com/qbiki/seattleclouds/App:resources	Landroid/content/res/Resources;
    //   636: ldc_w 1983
    //   639: invokevirtual 1897	android/content/res/Resources:getString	(I)Ljava/lang/String;
    //   642: invokevirtual 197	java/lang/String:trim	()Ljava/lang/String;
    //   645: invokevirtual 1986	com/qbiki/scapi/SCApi:setApiKey	(Ljava/lang/String;)V
    //   648: getstatic 138	com/qbiki/seattleclouds/App:inAppBillingEnabled	Z
    //   651: ifeq +15 -> 666
    //   654: aload_0
    //   655: invokevirtual 1979	com/qbiki/seattleclouds/App:getApplicationContext	()Landroid/content/Context;
    //   658: invokestatic 1989	com/qbiki/seattleclouds/AppLicensing:getPublicKey	()Ljava/lang/String;
    //   661: iconst_0
    //   662: aconst_null
    //   663: invokestatic 1995	com/qbiki/billing/SCIabHelper:initInstanceAndStartSetup	(Landroid/content/Context;Ljava/lang/String;ZLcom/android/vending/billing/util/IabHelper$OnIabSetupFinishedListener;)V
    //   666: aload_0
    //   667: invokevirtual 1997	com/qbiki/seattleclouds/App:restoreRuntimeState	()V
    //   670: return
    //   671: ldc_w 1903
    //   674: putstatic 1905	com/qbiki/seattleclouds/App:scmServerHostName	Ljava/lang/String;
    //   677: goto -550 -> 127
    //   680: astore_1
    //   681: ldc 68
    //   683: ldc_w 1999
    //   686: aload_1
    //   687: invokestatic 2001	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   690: pop
    //   691: iconst_1
    //   692: putstatic 148	com/qbiki/seattleclouds/App:systemErrorOccured	Z
    //   695: return
    //   696: astore_1
    //   697: ldc 68
    //   699: ldc_w 2003
    //   702: aload_1
    //   703: invokestatic 2001	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   706: pop
    //   707: goto -87 -> 620
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	710	0	this	App
    //   680	7	1	localNullPointerException	NullPointerException
    //   696	7	1	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   424	594	680	java/lang/NullPointerException
    //   610	620	696	java/lang/Exception
  }
  
  public void restoreRuntimeState()
  {
    try
    {
      restoreRuntimeState(false);
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void restoreRuntimeStateForced()
  {
    try
    {
      restoreRuntimeState(true);
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void retrieveLoginInfo()
  {
    SharedPreferences localSharedPreferences = getSharedPreferences("LoginInfo", 0);
    username = localSharedPreferences.getString("username", "");
    password = localSharedPreferences.getString("password", "");
    authenticated = localSharedPreferences.getBoolean("isAuthenticated", false);
    adminUserName = localSharedPreferences.getString("adminuser", "");
    allowLoginAs = localSharedPreferences.getBoolean("allowLoginAs", false);
  }
  
  public void saveLoginInfo()
  {
    SharedPreferences.Editor localEditor = getSharedPreferences("LoginInfo", 0).edit();
    localEditor.putString("username", username);
    localEditor.putString("password", password);
    localEditor.putBoolean("isAuthenticated", authenticated);
    localEditor.putString("adminuser", adminUserName);
    localEditor.putBoolean("allowLoginAs", allowLoginAs);
    localEditor.commit();
  }
  
  public void saveRuntimeSate()
  {
    try
    {
      SharedPreferences.Editor localEditor = getSharedPreferences("RuntimeState", 0).edit();
      if (isPreviewer) {
        localEditor.putString("currentAppId", appId);
      }
      localEditor.putBoolean("appStarted", started);
      localEditor.commit();
      return;
    }
    finally {}
  }
}
