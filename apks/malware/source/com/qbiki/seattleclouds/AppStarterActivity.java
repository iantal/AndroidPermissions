package com.qbiki.seattleclouds;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Messenger;
import android.text.TextUtils;
import android.util.Log;
import android.view.Window;
import android.widget.ImageView;
import com.google.analytics.tracking.android.GAServiceManager;
import com.google.analytics.tracking.android.GoogleAnalytics;
import com.google.android.vending.expansion.downloader.DownloadProgressInfo;
import com.google.android.vending.expansion.downloader.DownloaderClientMarshaller;
import com.google.android.vending.expansion.downloader.DownloaderServiceMarshaller;
import com.google.android.vending.expansion.downloader.Helpers;
import com.google.android.vending.expansion.downloader.IDownloaderClient;
import com.google.android.vending.expansion.downloader.IDownloaderService;
import com.google.android.vending.expansion.downloader.IStub;
import com.google.android.vending.licensing.AESObfuscator;
import com.google.android.vending.licensing.LicenseChecker;
import com.google.android.vending.licensing.LicenseCheckerCallback;
import com.google.android.vending.licensing.ServerManagedPolicy;
import com.qbiki.gcm.GCMHelper;
import com.qbiki.mbfx.MBFXContext;
import com.qbiki.scapi.SCApi;
import com.qbiki.seattleclouds.asynctasks.DownloadExternalResourcesAsyncTask;
import com.qbiki.seattleclouds.asynctasks.InitResourcesAsyncTask;
import com.qbiki.seattleclouds.asynctasks.ParseAppConfigAsyncTask;
import com.qbiki.seattleclouds.asynctasks.SyncResourcesAsyncTask;
import com.qbiki.seattleclouds.previewer.PreviewerActivity;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DialogUtil;
import java.util.Iterator;
import java.util.Set;

public class AppStarterActivity
  extends SCActivity
{
  private static final boolean LOGV = false;
  private static final String TAG = "AppStarterActivity";
  private Context ctx;
  private LicenseChecker mChecker;
  private IDownloaderClient mDownloaderClient;
  private IStub mDownloaderClientStub;
  private ProgressDialog mExpansionDownloadDialog;
  private boolean mExpansionFilesDownloadServiceFinished = false;
  private Handler mHandler;
  private ProgressDialog mLicenseCheckDialog;
  private LicenseCheckerCallback mLicenseCheckerCallback;
  private IDownloaderService mRemoteService;
  
  public AppStarterActivity() {}
  
  private void checkLicenseIfRequired()
  {
    if ((!App.isPreviewer) && (AppLicensing.isEnabled()))
    {
      if (AppLicensing.getPublicKey() == null)
      {
        showInvalidAppLicensingPublicKeyError(new IllegalArgumentException("Application Licensing Public Key cannot be null"));
        return;
      }
      this.mLicenseCheckDialog = new ProgressDialog(this.ctx);
      this.mLicenseCheckDialog.setMessage(getResources().getString(2131362046));
      this.mLicenseCheckDialog.setCancelable(false);
      this.mLicenseCheckDialog.getWindow().clearFlags(2);
      this.mLicenseCheckDialog.show();
      new Thread(new Runnable()
      {
        public void run()
        {
          if (AppStarterActivity.this.mLicenseCheckerCallback == null) {
            AppStarterActivity.access$1002(AppStarterActivity.this, new AppStarterActivity.MyLicenseCheckerCallback(AppStarterActivity.this, null));
          }
          try
          {
            if (AppStarterActivity.this.mChecker == null) {
              AppStarterActivity.access$1202(AppStarterActivity.this, new LicenseChecker(AppStarterActivity.this.ctx, new ServerManagedPolicy(AppStarterActivity.this.ctx, new AESObfuscator(AppLicensing.getSalt(), AppStarterActivity.this.getPackageName(), AppLicensing.getDeviceId(AppStarterActivity.this.ctx))), AppLicensing.getPublicKey()));
            }
            AppStarterActivity.this.mChecker.checkAccess(AppStarterActivity.this.mLicenseCheckerCallback);
            return;
          }
          catch (IllegalArgumentException localIllegalArgumentException)
          {
            AppStarterActivity.this.runOnUiThread(new Runnable()
            {
              public void run()
              {
                AppStarterActivity.this.showInvalidAppLicensingPublicKeyError(localIllegalArgumentException);
              }
            });
          }
        }
      }).start();
      return;
    }
    executeDownloadExternalResourcesTask();
  }
  
  private void downloadExpansionFilesIfNeeded()
  {
    Object localObject1 = new Intent(this, AppStarterActivity.class);
    ((Intent)localObject1).setFlags(335544320);
    Object localObject2 = getIntent();
    ((Intent)localObject1).setAction(((Intent)localObject2).getAction());
    if (((Intent)localObject2).getCategories() != null)
    {
      localObject2 = ((Intent)localObject2).getCategories().iterator();
      while (((Iterator)localObject2).hasNext()) {
        ((Intent)localObject1).addCategory((String)((Iterator)localObject2).next());
      }
    }
    localObject1 = PendingIntent.getActivity(this, 0, (Intent)localObject1, 134217728);
    try
    {
      if (DownloaderClientMarshaller.startDownloadServiceIfRequired(this, (PendingIntent)localObject1, ExpansionFilesDownloaderService.class) != 0)
      {
        initializeDownloadUI();
        return;
      }
      prepareResources();
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      Log.e("AppStarterActivity", "Package not found!");
    }
  }
  
  private void executeDownloadExternalResourcesTask()
  {
    if (isFinishing()) {
      return;
    }
    if (!App.resourceExists("sc_external_storage_resources.xml"))
    {
      startApp();
      return;
    }
    Log.v("AppStarterActivity", "Dowloading external resources...");
    DownloadExternalResourcesAsyncTask localDownloadExternalResourcesAsyncTask = new DownloadExternalResourcesAsyncTask(this);
    localDownloadExternalResourcesAsyncTask.setAsyncTaskListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        AppStarterActivity.this.startApp();
      }
    });
    localDownloadExternalResourcesAsyncTask.execute(new String[0]);
  }
  
  private void executeInitContentTask()
  {
    if (isFinishing()) {
      return;
    }
    Log.v("AppStarterActivity", "Initializing resources...");
    InitResourcesAsyncTask localInitResourcesAsyncTask = new InitResourcesAsyncTask(this);
    localInitResourcesAsyncTask.setAsyncTaskListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        AppStarterActivity.this.executeSyncContentTask();
      }
    });
    localInitResourcesAsyncTask.execute(new String[0]);
  }
  
  private void executeParseAppConfigTask()
  {
    if (isFinishing()) {
      return;
    }
    Log.v("AppStarterActivity", "Parsing app config file...");
    ParseAppConfigAsyncTask localParseAppConfigAsyncTask = new ParseAppConfigAsyncTask(this);
    localParseAppConfigAsyncTask.setAsyncTaskListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        AppStarterActivity.this.checkLicenseIfRequired();
      }
    });
    localParseAppConfigAsyncTask.execute(new String[0]);
  }
  
  private void executeSyncContentTask()
  {
    if (isFinishing()) {
      return;
    }
    Log.v("AppStarterActivity", "Syncing resources...");
    SyncResourcesAsyncTask localSyncResourcesAsyncTask = new SyncResourcesAsyncTask(this);
    localSyncResourcesAsyncTask.setAsyncTaskListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        paramAnonymousObject = (String)paramAnonymousObject;
        if (paramAnonymousObject != null)
        {
          DialogUtil.showAlert(AppStarterActivity.this, 2131361915, paramAnonymousObject, new DialogInterface.OnClickListener()
          {
            public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
            {
              paramAnonymous2DialogInterface.dismiss();
              AppStarterActivity.this.finish();
            }
          });
          return;
        }
        AppStarterActivity.this.executeParseAppConfigTask();
      }
    });
    localSyncResourcesAsyncTask.execute(new String[0]);
  }
  
  private void gcmRegisterIfNeeded()
  {
    if (!App.gcmEnabled) {}
    while (App.isPreviewer) {
      return;
    }
    GCMHelper.register(this);
  }
  
  /* Error */
  private Drawable getSplashScreenFromAssets(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aconst_null
    //   4: astore_2
    //   5: getstatic 371	com/qbiki/seattleclouds/App:assetManager	Landroid/content/res/AssetManager;
    //   8: new 373	java/lang/StringBuilder
    //   11: dup
    //   12: invokespecial 374	java/lang/StringBuilder:<init>	()V
    //   15: ldc_w 376
    //   18: invokevirtual 380	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   21: aload_1
    //   22: invokevirtual 380	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   25: invokevirtual 383	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   28: invokevirtual 389	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   31: astore_3
    //   32: aload_3
    //   33: astore_2
    //   34: aload_3
    //   35: astore 4
    //   37: aload_3
    //   38: aload_1
    //   39: invokestatic 395	android/graphics/drawable/Drawable:createFromStream	(Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;
    //   42: astore_1
    //   43: aload_1
    //   44: astore 4
    //   46: aload_3
    //   47: ifnull +10 -> 57
    //   50: aload_3
    //   51: invokevirtual 400	java/io/InputStream:close	()V
    //   54: aload_1
    //   55: astore 4
    //   57: aload 4
    //   59: areturn
    //   60: astore_1
    //   61: aconst_null
    //   62: astore 4
    //   64: aload_2
    //   65: ifnull -8 -> 57
    //   68: aload_2
    //   69: invokevirtual 400	java/io/InputStream:close	()V
    //   72: aconst_null
    //   73: areturn
    //   74: astore_1
    //   75: aconst_null
    //   76: areturn
    //   77: astore_1
    //   78: aload 4
    //   80: ifnull +8 -> 88
    //   83: aload 4
    //   85: invokevirtual 400	java/io/InputStream:close	()V
    //   88: aload_1
    //   89: athrow
    //   90: astore_2
    //   91: aload_1
    //   92: areturn
    //   93: astore_2
    //   94: goto -6 -> 88
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	97	0	this	AppStarterActivity
    //   0	97	1	paramString	String
    //   4	65	2	localObject1	Object
    //   90	1	2	localIOException1	java.io.IOException
    //   93	1	2	localIOException2	java.io.IOException
    //   31	20	3	localInputStream	java.io.InputStream
    //   1	83	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   5	32	60	java/io/IOException
    //   37	43	60	java/io/IOException
    //   68	72	74	java/io/IOException
    //   5	32	77	finally
    //   37	43	77	finally
    //   50	54	90	java/io/IOException
    //   83	88	93	java/io/IOException
  }
  
  private void initializeDownloadUI()
  {
    if (isFinishing()) {
      return;
    }
    this.mExpansionFilesDownloadServiceFinished = false;
    this.mExpansionDownloadDialog = new ProgressDialog(this);
    this.mExpansionDownloadDialog.setProgressStyle(1);
    this.mExpansionDownloadDialog.setMessage(getString(2131361925));
    this.mExpansionDownloadDialog.setCancelable(true);
    this.mExpansionDownloadDialog.getWindow().clearFlags(2);
    this.mExpansionDownloadDialog.setOnCancelListener(new DialogInterface.OnCancelListener()
    {
      public void onCancel(DialogInterface paramAnonymousDialogInterface)
      {
        if (AppStarterActivity.this.mRemoteService != null) {
          AppStarterActivity.this.mRemoteService.requestAbortDownload();
        }
      }
    });
    this.mDownloaderClient = new IDownloaderClient()
    {
      public void onDownloadProgress(DownloadProgressInfo paramAnonymousDownloadProgressInfo)
      {
        int i = (int)(paramAnonymousDownloadProgressInfo.mOverallProgress * 100L / paramAnonymousDownloadProgressInfo.mOverallTotal);
        AppStarterActivity.this.mExpansionDownloadDialog.setProgress(i);
      }
      
      public void onDownloadStateChanged(int paramAnonymousInt)
      {
        String str = AppStarterActivity.this.getString(Helpers.getDownloaderStringResourceIDFromState(paramAnonymousInt));
        switch (paramAnonymousInt)
        {
        case 6: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        default: 
          if (!AppStarterActivity.this.mExpansionFilesDownloadServiceFinished)
          {
            AppStarterActivity.access$202(AppStarterActivity.this, true);
            AppStarterActivity.this.mExpansionDownloadDialog.dismiss();
            AppStarterActivity.this.showErrorStartingAppDialog(AppStarterActivity.this.getString(2131361916), str);
          }
          break;
        }
        do
        {
          do
          {
            return;
          } while (AppStarterActivity.this.mExpansionFilesDownloadServiceFinished);
          AppStarterActivity.access$202(AppStarterActivity.this, true);
          AppStarterActivity.this.mExpansionDownloadDialog.dismiss();
          AppStarterActivity.this.showExpansionFilesDownloadStoppedDialog();
          return;
        } while (AppStarterActivity.this.mExpansionFilesDownloadServiceFinished);
        AppStarterActivity.access$202(AppStarterActivity.this, true);
        AppStarterActivity.this.mExpansionDownloadDialog.dismiss();
        AppStarterActivity.this.prepareResources();
      }
      
      public void onServiceConnected(Messenger paramAnonymousMessenger)
      {
        AppStarterActivity.access$002(AppStarterActivity.this, DownloaderServiceMarshaller.CreateProxy(paramAnonymousMessenger));
        AppStarterActivity.this.mRemoteService.onClientUpdated(AppStarterActivity.this.mDownloaderClientStub.getMessenger());
      }
    };
    this.mDownloaderClientStub = DownloaderClientMarshaller.CreateStub(this.mDownloaderClient, ExpansionFilesDownloaderService.class);
    this.mExpansionDownloadDialog.show();
  }
  
  private void onLicenseCheckResult(boolean paramBoolean)
  {
    Log.i("AppStarterActivity", "License check successful: " + paramBoolean);
    if (this.mLicenseCheckDialog != null) {
      this.mLicenseCheckDialog.dismiss();
    }
    if (paramBoolean)
    {
      executeDownloadExternalResourcesTask();
      return;
    }
    new AlertDialog.Builder(this).setTitle(2131362041).setMessage(2131362043).setPositiveButton(2131362044, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = new Intent("android.intent.action.VIEW", Uri.parse("http://market.android.com/details?id=" + AppStarterActivity.this.getPackageName()));
        paramAnonymousDialogInterface.setFlags(268435456);
        AppStarterActivity.this.startActivity(paramAnonymousDialogInterface);
        AppStarterActivity.this.finish();
      }
    }).setNegativeButton(2131362045, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        AppStarterActivity.this.finish();
      }
    }).create().show();
  }
  
  private void prepareResources()
  {
    App.initExpansionFilesIfRequired(this.ctx);
    if (App.syncEnabled)
    {
      executeInitContentTask();
      return;
    }
    executeSyncContentTask();
  }
  
  @TargetApi(9)
  private void setOrientation()
  {
    if ((Build.VERSION.SDK_INT >= 9) && (App.rotationEnabled))
    {
      setRequestedOrientation(7);
      return;
    }
    setRequestedOrientation(1);
  }
  
  private void setupSplashScreen()
  {
    if (App.apkExpansionFile == null) {
      App.initExpansionFilesIfRequired(this.ctx);
    }
    ImageView localImageView = (ImageView)findViewById(2131099728);
    Drawable localDrawable2 = App.getDrawableResource("Default.png");
    Drawable localDrawable1 = localDrawable2;
    if (!App.isPreviewer)
    {
      localDrawable1 = localDrawable2;
      if (localDrawable2 == null) {
        localDrawable1 = getSplashScreenFromAssets("Default.png");
      }
    }
    if (localDrawable1 != null) {
      localImageView.setImageDrawable(localDrawable1);
    }
  }
  
  private void showErrorStartingAppDialog(int paramInt1, int paramInt2)
  {
    showErrorStartingAppDialog(getString(paramInt1), getString(paramInt2));
  }
  
  private void showErrorStartingAppDialog(String paramString1, String paramString2)
  {
    DialogUtil.showAlert(this, paramString1, paramString2, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        AppStarterActivity.this.finish();
      }
    }, null, getResources().getDrawable(17301543), false);
  }
  
  private void showExpansionFilesDownloadStoppedDialog()
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
    localBuilder.setTitle(2131361916);
    localBuilder.setIcon(17301543);
    localBuilder.setMessage(2131361926);
    localBuilder.setPositiveButton(getString(2131361912), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        AppStarterActivity.access$202(AppStarterActivity.this, false);
        AppStarterActivity.this.mExpansionDownloadDialog.show();
        AppStarterActivity.this.mRemoteService.requestContinueDownload();
      }
    });
    localBuilder.setNegativeButton(2131361911, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        AppStarterActivity.access$202(AppStarterActivity.this, true);
        AppStarterActivity.this.finish();
      }
    });
    localBuilder.setCancelable(false);
    localBuilder.create().show();
  }
  
  private void showInvalidAppLicensingPublicKeyError(IllegalArgumentException paramIllegalArgumentException)
  {
    Log.e("AppStarterActivity", "Invalid Application Licensing Public Key", paramIllegalArgumentException);
    if (this.mLicenseCheckDialog != null) {
      this.mLicenseCheckDialog.dismiss();
    }
    DialogUtil.showAlert(this, 2131362041, 2131362042, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.dismiss();
        AppStarterActivity.this.finish();
      }
    });
  }
  
  private void startApp()
  {
    if (isFinishing()) {
      return;
    }
    startGoogleAnalytics();
    gcmRegisterIfNeeded();
    MBFXContext.readContextFromJS();
    startAppFromActivity(this, false);
    App.started = true;
    ((App)getApplication()).saveRuntimeSate();
    finish();
  }
  
  public static void startAppFromActivity(Activity paramActivity, boolean paramBoolean)
  {
    Object localObject = ActionBarTabsAppActivity.class;
    if (App.appConfig.getNavigationType() == 2) {
      localObject = SimpleAppActivity.class;
    }
    for (;;)
    {
      localObject = new Intent(paramActivity, (Class)localObject);
      if (paramBoolean) {
        ((Intent)localObject).addFlags(67108864);
      }
      paramActivity.startActivity((Intent)localObject);
      return;
      if (App.appConfig.getNavigationType() == 4) {
        localObject = SCTabsAppActivity.class;
      } else if (App.appConfig.getNavigationType() == 5) {
        localObject = LegacyTabsAppActivity.class;
      }
    }
  }
  
  private void startGoogleAnalytics()
  {
    if ((App.appConfig.getGoogleAnalyticsId() != null) && (!App.appConfig.getGoogleAnalyticsId().trim().equalsIgnoreCase("")))
    {
      GoogleAnalytics localGoogleAnalytics = GoogleAnalytics.getInstance(getApplicationContext());
      localGoogleAnalytics.setDebug(false);
      localGoogleAnalytics.setDefaultTracker(localGoogleAnalytics.getTracker(App.appConfig.getGoogleAnalyticsId()));
      GAServiceManager.getInstance().setDispatchPeriod(60);
      return;
    }
    GoogleAnalytics.getInstance(getApplicationContext()).setDefaultTracker(null);
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    if (App.systemErrorOccured)
    {
      DialogUtil.showAlert(this, 2131361915, 2131361939, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          AppStarterActivity.this.finish();
        }
      });
      return;
    }
    this.ctx = this;
    this.mHandler = new Handler();
    paramBundle = getIntent().getExtras();
    boolean bool = false;
    if (paramBundle != null) {
      bool = paramBundle.getBoolean("startedInApp");
    }
    if ((App.isPreviewer) && (!bool))
    {
      startActivity(new Intent(this, PreviewerActivity.class));
      finish();
      return;
    }
    setOrientation();
    setContentView(2130903067);
    setupSplashScreen();
    if (App.isPreviewer)
    {
      executeSyncContentTask();
      SCApi.getInstance().init(getApplicationContext());
      return;
    }
    if (App.apkExpansionFilesEnabled)
    {
      if (!Environment.getExternalStorageState().equals("mounted"))
      {
        showErrorStartingAppDialog(2131361916, 2131361924);
        return;
      }
      if (TextUtils.isEmpty(AppLicensing.getPublicKey()))
      {
        showInvalidAppLicensingPublicKeyError(new IllegalArgumentException("Application Licensing Public Key cannot be null or empty"));
        return;
      }
      downloadExpansionFilesIfNeeded();
      return;
    }
    prepareResources();
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    if (this.mChecker != null) {
      this.mChecker.onDestroy();
    }
  }
  
  protected void onResume()
  {
    if (this.mDownloaderClientStub != null) {
      this.mDownloaderClientStub.connect(this);
    }
    super.onResume();
  }
  
  protected void onStop()
  {
    if (this.mDownloaderClientStub != null) {
      this.mDownloaderClientStub.disconnect(this);
    }
    super.onStop();
  }
  
  private class MyLicenseCheckerCallback
    implements LicenseCheckerCallback
  {
    private MyLicenseCheckerCallback() {}
    
    private void postResult(final boolean paramBoolean)
    {
      if (AppStarterActivity.this.mHandler != null) {
        AppStarterActivity.this.mHandler.post(new Runnable()
        {
          public void run()
          {
            AppStarterActivity.this.onLicenseCheckResult(paramBoolean);
          }
        });
      }
    }
    
    public void allow(int paramInt)
    {
      if (AppStarterActivity.this.isFinishing()) {
        return;
      }
      postResult(true);
    }
    
    public void applicationError(int paramInt)
    {
      if (AppStarterActivity.this.isFinishing()) {
        return;
      }
      postResult(false);
    }
    
    public void dontAllow(int paramInt)
    {
      if (AppStarterActivity.this.isFinishing()) {
        return;
      }
      postResult(false);
    }
  }
}
