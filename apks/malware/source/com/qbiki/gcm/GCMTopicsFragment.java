package com.qbiki.gcm;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.provider.Settings.Secure;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.HTTPUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class GCMTopicsFragment
  extends SCListFragment
{
  public static final String ARG_NOTE = "ARG_NOTE";
  public static final String ARG_TOPIC_IDS = "ARG_TOPIC_IDS";
  public static final String ARG_TOPIC_TITLES = "ARG_TOPIC_TITLES";
  public static final String ARG_TOPIC_TYPE = "ARG_TOPIC_TYPE";
  private static final boolean DEBUG = false;
  private static final int SIDE_PADDING = 14;
  private static final String TAG = "GCMTopicsFragment";
  private boolean mActivityInProgress = false;
  private MenuItem mActivityIndicatorMenuItem;
  private ListView mListView;
  private int mListViewItemOffset = 0;
  private String mNote = "";
  private MenuItem mSaveMenuItem;
  private Set<String> mSubscribedTopics;
  private List<String> mTopicIds = new ArrayList();
  private List<String> mTopicTitles = new ArrayList();
  private String mType = "announcement";
  
  public GCMTopicsFragment() {}
  
  private String getDeviceId()
  {
    String str2 = Settings.Secure.getString(getActivity().getContentResolver(), "android_id");
    String str1 = str2;
    if (str2 == null) {
      str1 = "";
    }
    return str1;
  }
  
  private boolean isTopicSelected(int paramInt)
  {
    return this.mListView.isItemChecked(this.mListViewItemOffset + paramInt);
  }
  
  private void setActivityInProgress(boolean paramBoolean)
  {
    if (this.mActivityInProgress != paramBoolean)
    {
      this.mActivityInProgress = paramBoolean;
      invalidateOptionsMenu();
    }
  }
  
  private void setTopicSelected(int paramInt, boolean paramBoolean)
  {
    this.mListView.setItemChecked(this.mListViewItemOffset + paramInt, paramBoolean);
  }
  
  private void showNetworkError()
  {
    FragmentActivity localFragmentActivity = getActivity();
    ConnectivityManager localConnectivityManager = (ConnectivityManager)localFragmentActivity.getSystemService("connectivity");
    if ((localConnectivityManager.getActiveNetworkInfo() == null) || (!localConnectivityManager.getActiveNetworkInfo().isConnected()))
    {
      Toast.makeText(localFragmentActivity, 2131361931, 1).show();
      return;
    }
    Toast.makeText(localFragmentActivity, 2131361932, 1).show();
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558414, paramMenu);
    this.mActivityIndicatorMenuItem = paramMenu.findItem(2131099905);
    this.mActivityIndicatorMenuItem.setActionView(new ProgressBar(getActivity(), null, 16842871));
    this.mActivityIndicatorMenuItem.expandActionView();
    this.mSaveMenuItem = paramMenu.findItem(2131100293);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903132, paramViewGroup, false);
    this.mListView = ((ListView)paramLayoutInflater.findViewById(16908298));
    int i;
    if (Build.VERSION.SDK_INT >= 11)
    {
      i = DeviceUtil.dpToPx(getActivity(), 14.0F);
      this.mListView.setPadding(i, this.mListView.getPaddingTop(), i, this.mListView.getPaddingBottom());
    }
    paramViewGroup = getArguments();
    if (paramViewGroup != null)
    {
      paramBundle = paramViewGroup.getString("ARG_NOTE");
      if (paramBundle != null) {
        this.mNote = paramBundle;
      }
      paramBundle = paramViewGroup.getString("ARG_TOPIC_TYPE");
      if (paramBundle != null) {
        this.mType = paramBundle;
      }
      paramBundle = paramViewGroup.getStringArrayList("ARG_TOPIC_IDS");
      if (paramBundle != null) {
        this.mTopicIds = paramBundle;
      }
      this.mTopicTitles = this.mTopicIds;
      paramViewGroup = paramViewGroup.getStringArrayList("ARG_TOPIC_TITLES");
      if (paramViewGroup != null) {
        this.mTopicTitles = paramViewGroup;
      }
    }
    if ((this.mNote != null) && (this.mNote.length() > 0))
    {
      paramViewGroup = new TextView(getActivity());
      paramViewGroup.setTextAppearance(getActivity(), 16842817);
      paramViewGroup.setTextSize(16.0F);
      i = DeviceUtil.dpToPx(getActivity(), 8.0F);
      paramViewGroup.setPadding(i, i, i, i);
      paramViewGroup.setText(this.mNote);
      this.mListView.addHeaderView(paramViewGroup);
      this.mListViewItemOffset += 1;
    }
    this.mListView.setChoiceMode(2);
    this.mListView.setAdapter(new ArrayAdapter(getActivity(), 17367056, this.mTopicTitles));
    this.mListView.setVisibility(8);
    return paramLayoutInflater;
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    super.onHiddenChanged(paramBoolean);
    if ((!this.mActivityInProgress) && (!paramBoolean) && (this.mTopicIds.size() > 0))
    {
      setActivityInProgress(true);
      new GetTopicSubscriptionsTask(null).execute(new Void[0]);
    }
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    new SendTopicSubscriptionsTask(null).execute(new Void[0]);
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    boolean bool2 = true;
    this.mActivityIndicatorMenuItem.setEnabled(this.mActivityInProgress);
    this.mActivityIndicatorMenuItem.setVisible(this.mActivityInProgress);
    paramMenu = this.mSaveMenuItem;
    if ((!this.mActivityInProgress) && (this.mTopicIds.size() > 0))
    {
      bool1 = true;
      paramMenu.setVisible(bool1);
      paramMenu = this.mSaveMenuItem;
      if ((this.mActivityInProgress) || (this.mTopicIds.size() <= 0)) {
        break label104;
      }
    }
    label104:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      paramMenu.setEnabled(bool1);
      return;
      bool1 = false;
      break;
    }
  }
  
  public void onResume()
  {
    super.onResume();
    if ((!this.mActivityInProgress) && (this.mTopicIds.size() > 0))
    {
      setActivityInProgress(true);
      new GetTopicSubscriptionsTask(null).execute(new Void[0]);
    }
  }
  
  private class GetTopicSubscriptionsTask
    extends AsyncTask<Void, String, String>
  {
    private GetTopicSubscriptionsTask() {}
    
    protected String doInBackground(Void... paramVarArgs)
    {
      paramVarArgs = new HashMap();
      paramVarArgs.put("publisherId", App.publisherId);
      paramVarArgs.put("username", App.username);
      paramVarArgs.put("appId", App.appId);
      paramVarArgs.put("deviceId", GCMTopicsFragment.this.getDeviceId());
      paramVarArgs.put("type", GCMTopicsFragment.this.mType);
      Object localObject;
      try
      {
        localObject = HTTPUtil.performGetRequest("http://" + App.scmServerHostName + "/gcm_get_topic_subscriptions.ashx", paramVarArgs);
        if ((localObject == null) || (((String)localObject).length() < 2))
        {
          Log.e("GCMTopicsFragment", "Unparsable response received from server: " + (String)localObject);
          return "Internal Server Error";
        }
      }
      catch (IOException paramVarArgs)
      {
        Log.w("GCMTopicsFragment", "IO Error: " + paramVarArgs);
        return "IOException: " + paramVarArgs;
      }
      if (((String)localObject).startsWith("ERROR:"))
      {
        paramVarArgs = ((String)localObject).substring(6);
        Log.e("GCMTopicsFragment", "Error received from server: " + paramVarArgs);
        return paramVarArgs;
      }
      if (!((String)localObject).startsWith("OK"))
      {
        Log.e("GCMTopicsFragment", "Unknown error received from server: " + (String)localObject);
        return localObject;
      }
      paramVarArgs = new String[0];
      if (((String)localObject).length() > 2) {
        paramVarArgs = ((String)localObject).substring(3).split(",");
      }
      GCMTopicsFragment.access$502(GCMTopicsFragment.this, new HashSet());
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        localObject = paramVarArgs[i];
        GCMTopicsFragment.this.mSubscribedTopics.add(localObject);
        i += 1;
      }
      return null;
    }
    
    protected void onPostExecute(String paramString)
    {
      GCMTopicsFragment.this.setActivityInProgress(false);
      if (GCMTopicsFragment.this.getActivity() == null) {
        Log.w("GCMTopicsFragment", "activity is null");
      }
      for (;;)
      {
        return;
        if (paramString != null) {
          break;
        }
        int i = 0;
        while (i < GCMTopicsFragment.this.mTopicIds.size())
        {
          GCMTopicsFragment.this.setTopicSelected(i, GCMTopicsFragment.this.mSubscribedTopics.contains(GCMTopicsFragment.this.mTopicIds.get(i)));
          i += 1;
        }
      }
      if (paramString.startsWith("IOException"))
      {
        GCMTopicsFragment.this.showNetworkError();
        return;
      }
      DialogUtil.showAlert(GCMTopicsFragment.this.getActivity(), 2131361915, 2131361933);
    }
    
    protected void onPreExecute()
    {
      GCMTopicsFragment.this.setActivityInProgress(true);
      super.onPreExecute();
    }
  }
  
  private class SendTopicSubscriptionsTask
    extends AsyncTask<Void, String, String>
  {
    private SendTopicSubscriptionsTask() {}
    
    protected String doInBackground(Void... paramVarArgs)
    {
      paramVarArgs = new HashMap();
      paramVarArgs.put("publisherId", App.publisherId);
      paramVarArgs.put("username", App.username);
      paramVarArgs.put("appId", App.appId);
      paramVarArgs.put("deviceId", GCMTopicsFragment.this.getDeviceId());
      paramVarArgs.put("type", GCMTopicsFragment.this.mType);
      paramVarArgs = "http://" + App.scmServerHostName + "/gcm_set_topic_subscriptions.ashx" + "?" + HTTPUtil.getUrlEncodedParameterString(paramVarArgs);
      StringBuilder localStringBuilder = new StringBuilder();
      if (GCMTopicsFragment.this.mTopicIds.size() > 0)
      {
        if (GCMTopicsFragment.this.isTopicSelected(0)) {
          localStringBuilder.append((String)GCMTopicsFragment.this.mTopicIds.get(0));
        }
        int i = 1;
        while (i < GCMTopicsFragment.this.mTopicIds.size())
        {
          if (GCMTopicsFragment.this.isTopicSelected(i)) {
            localStringBuilder.append(',').append((String)GCMTopicsFragment.this.mTopicIds.get(i));
          }
          i += 1;
        }
      }
      try
      {
        paramVarArgs = HTTPUtil.performPostRequest(paramVarArgs, localStringBuilder.toString());
        if ((paramVarArgs == null) || (paramVarArgs.length() < 2))
        {
          Log.e("GCMTopicsFragment", "Unparsable response received from server: " + paramVarArgs);
          return "Internal Server Error";
        }
      }
      catch (IOException paramVarArgs)
      {
        Log.w("GCMTopicsFragment", "IO Error: " + paramVarArgs.toString());
        return "IOException: " + paramVarArgs.toString();
      }
      if (paramVarArgs.startsWith("ERROR:"))
      {
        paramVarArgs = paramVarArgs.substring(6);
        Log.e("GCMTopicsFragment", "Error received from server: " + paramVarArgs);
        return paramVarArgs;
      }
      if (!paramVarArgs.startsWith("OK"))
      {
        Log.e("GCMTopicsFragment", "Unknown error received from server: " + paramVarArgs);
        return paramVarArgs;
      }
      return null;
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      GCMTopicsFragment.this.setActivityInProgress(false);
      if (GCMTopicsFragment.this.getActivity() == null)
      {
        Log.w("GCMTopicsFragment", "activity is null");
        return;
      }
      if (paramString == null)
      {
        Toast.makeText(GCMTopicsFragment.this.getActivity(), 2131362256, 0).show();
        return;
      }
      if (paramString.startsWith("IOException"))
      {
        GCMTopicsFragment.this.showNetworkError();
        return;
      }
      DialogUtil.showAlert(GCMTopicsFragment.this.getActivity(), 2131361915, 2131361933);
    }
    
    protected void onPreExecute()
    {
      GCMTopicsFragment.this.setActivityInProgress(true);
      super.onPreExecute();
    }
  }
}
