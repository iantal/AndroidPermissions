package com.qbiki.gcm;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.provider.Settings.Secure;
import android.util.Log;
import com.google.android.gms.gcm.GoogleCloudMessaging;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.HTTPUtil;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class GCMHelper
{
  private static final String GCM_REGISTER_ENDPOINT = "http://" + App.scmServerHostName + "/gcm_register.ashx";
  private static final boolean LOGV = false;
  private static final String PREF_NAME = "com.qbiki.gcm.prefs";
  private static final String PROPERTY_APP_VERSION = "appVersion";
  private static final String PROPERTY_ON_SERVER_EXPIRATION_TIME = "onServerExpirationTimeMs";
  private static final String PROPERTY_REG_ID = "regId";
  private static final long REGISTRATION_EXPIRY_TIME_MS = 86400000L;
  public static final String SENDER_ID = "774548614234";
  private static final String TAG = "GCMHelper";
  private static Context context;
  
  public GCMHelper() {}
  
  private static int getAppVersion(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).versionCode;
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      throw new RuntimeException("Could not get package name: " + paramContext);
    }
  }
  
  private static SharedPreferences getGCMPreferences(Context paramContext)
  {
    return paramContext.getSharedPreferences("com.qbiki.gcm.prefs", 0);
  }
  
  private static String getRegistrationId(Context paramContext)
  {
    SharedPreferences localSharedPreferences = getGCMPreferences(paramContext);
    String str = localSharedPreferences.getString("regId", "");
    if (str.length() == 0) {
      paramContext = "";
    }
    do
    {
      return paramContext;
      if (localSharedPreferences.getInt("appVersion", Integer.MIN_VALUE) != getAppVersion(paramContext)) {
        break;
      }
      paramContext = str;
    } while (!isRegistrationExpired());
    return "";
  }
  
  private static boolean isRegistrationExpired()
  {
    long l = getGCMPreferences(context).getLong("onServerExpirationTimeMs", -1L);
    return System.currentTimeMillis() > l;
  }
  
  private static String makeRequest(Context paramContext, String paramString1, String paramString2)
    throws IOException
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("publisherId", App.publisherId);
    localHashMap.put("username", App.username);
    localHashMap.put("appId", App.appId);
    localHashMap.put("registrationId", paramString1);
    localHashMap.put("scmVersion", Integer.toString(2));
    paramContext = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
    if (paramContext != null) {
      localHashMap.put("deviceId", paramContext);
    }
    return HTTPUtil.performPostRequest(paramString2, localHashMap);
  }
  
  public static void register(Context paramContext)
  {
    context = paramContext.getApplicationContext();
    if (getRegistrationId(context).length() == 0) {
      registerBackground();
    }
  }
  
  private static void registerBackground()
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        try
        {
          String str = GoogleCloudMessaging.getInstance(GCMHelper.context).register(new String[] { "774548614234" });
          if (GCMHelper.registerWithServer(GCMHelper.context, str)) {
            GCMHelper.setRegistrationId(GCMHelper.context, str);
          }
          return;
        }
        catch (IOException localIOException)
        {
          Log.e("GCMHelper", "Error: " + localIOException.getMessage());
        }
      }
    }).start();
  }
  
  public static boolean registerWithServer(Context paramContext, String paramString)
  {
    try
    {
      boolean bool = "OK".equalsIgnoreCase(makeRequest(paramContext, paramString, GCM_REGISTER_ENDPOINT));
      if (bool) {
        return true;
      }
    }
    catch (SecurityException paramContext)
    {
      Log.w("GCMHelper", "Registration error " + paramContext);
      return false;
    }
    catch (IOException paramContext)
    {
      for (;;) {}
    }
  }
  
  private static void setRegistrationId(Context paramContext, String paramString)
  {
    SharedPreferences localSharedPreferences = getGCMPreferences(paramContext);
    int i = getAppVersion(paramContext);
    paramContext = localSharedPreferences.edit();
    paramContext.putString("regId", paramString);
    paramContext.putInt("appVersion", i);
    paramContext.putLong("onServerExpirationTimeMs", System.currentTimeMillis() + 86400000L);
    paramContext.commit();
  }
}
