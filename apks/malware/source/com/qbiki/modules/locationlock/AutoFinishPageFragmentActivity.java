package com.qbiki.modules.locationlock;

import android.content.Intent;
import android.os.Bundle;
import com.qbiki.seattleclouds.SCPageFragmentActivity;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class AutoFinishPageFragmentActivity
  extends SCPageFragmentActivity
{
  public static final String ARG_FINISH_TIMEOUT = "ARG_FINISH_TIMEOUT";
  private static final boolean DEBUG = false;
  private static final String TAG = "AutoFinishPageFragmentActivity";
  private ScheduledThreadPoolExecutor mAutoLockExecutor;
  private ScheduledFuture<?> mAutoLockFuture;
  private long mFinishDate = Long.MAX_VALUE;
  private long mFinishTimeout = -1L;
  private boolean mFirstAppearance = true;
  
  public AutoFinishPageFragmentActivity() {}
  
  private void startAutoLockTimer(long paramLong)
  {
    this.mAutoLockExecutor = new ScheduledThreadPoolExecutor(1);
    this.mAutoLockExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    this.mAutoLockFuture = this.mAutoLockExecutor.schedule(new Runnable()
    {
      public void run()
      {
        AutoFinishPageFragmentActivity.this.runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (AutoFinishPageFragmentActivity.this.mAutoLockFuture == null) {
              return;
            }
            AutoFinishPageFragmentActivity.this.finish();
            AutoFinishPageFragmentActivity.access$002(AutoFinishPageFragmentActivity.this, null);
          }
        });
      }
    }, paramLong, TimeUnit.MILLISECONDS);
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    Bundle localBundle = getIntent().getExtras();
    if (localBundle != null) {
      this.mFinishTimeout = (localBundle.getLong("ARG_FINISH_TIMEOUT", this.mFinishTimeout) * 1000L);
    }
    if ((paramBundle != null) && (paramBundle.containsKey("finishDate")))
    {
      this.mFinishTimeout = (paramBundle.getLong("finishDate") - System.currentTimeMillis());
      if (this.mFinishTimeout <= 0L) {
        finish();
      }
    }
    do
    {
      return;
      if ((paramBundle != null) && (paramBundle.containsKey("firstAppearance"))) {
        this.mFirstAppearance = paramBundle.getBoolean("firstAppearance");
      }
      if (this.mFinishTimeout >= 0L) {
        this.mFinishDate = (System.currentTimeMillis() + this.mFinishTimeout);
      }
    } while (this.mFinishTimeout <= 0L);
    startAutoLockTimer(this.mFinishTimeout);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    if (this.mAutoLockExecutor != null) {
      this.mAutoLockExecutor.shutdown();
    }
  }
  
  protected void onResume()
  {
    super.onResume();
    if ((!this.mFirstAppearance) && (this.mFinishDate - System.currentTimeMillis() <= 0L)) {
      finish();
    }
    this.mFirstAppearance = false;
  }
  
  protected void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    paramBundle.putLong("finishDate", this.mFinishDate);
    paramBundle.putBoolean("firstAppearance", this.mFirstAppearance);
  }
}
