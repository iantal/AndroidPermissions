package com.qbiki.modules.calendar;

import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.LoaderManager;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import com.actionbarsherlock.view.Menu;
import com.jasonkostempski.android.calendar.CalendarView;
import com.jasonkostempski.android.calendar.CalendarView.OnMonthChangedListener;
import com.jasonkostempski.android.calendar.CalendarView.OnSelectedDayChangedListener;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.AbstractCursorLoader;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.CollectionUtil;
import com.qbiki.util.DateUtil;
import com.qbiki.util.DeviceUtil;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class CalendarFragment
  extends SCListFragment
  implements LoaderManager.LoaderCallbacks<Cursor>
{
  private static final boolean DEBUG = false;
  private static final ArrayList<String> DEFAULT_CATEGORIES = CollectionUtil.newArrayList(new String[] { "Work", "Training", "Meeting", "Appointment", "Holiday", "Vacation", "Anniversary", "Birthday", "Other" });
  private static final ArrayList<Integer> DEFAULT_CATEGORY_COLORS = CollectionUtil.newArrayList(new Integer[] { Integer.valueOf(Color.parseColor("red")), Integer.valueOf(Color.parseColor("#4e7ae8")), Integer.valueOf(Color.parseColor("#e87a0e")), Integer.valueOf(Color.parseColor("green")), Integer.valueOf(Color.parseColor("#afcbff")), Integer.valueOf(Color.parseColor("yellow")), Integer.valueOf(Color.parseColor("#c9ea63")), Integer.valueOf(Color.parseColor("#eab27c")), Integer.valueOf(Color.parseColor("#da71ea")) });
  public static final String EXTRA_STORE_ID = "storeId";
  private static final String PREFS_FILE_DEFAULT = "com.qbiki.modules.calendar";
  private static final String PREF_SELECTED_VIEW_TYPE = "selectedViewType";
  private static final int REQUEST_EDIT_EVENT = 2;
  private static final int REQUEST_NEW_EVENT = 1;
  private static final String TAG = "CalendarFragment";
  private static final int VIEW_TYPE_LIST = 100;
  private CalendarView mCalendarView;
  private ArrayList<String> mCategories;
  private ArrayList<Integer> mCategoryColors;
  private Map<String, Integer> mCategoryColorsMap = new HashMap();
  private String mDatabaseName;
  private DatabaseHelper mDbHelper;
  private EventListAdapter mEventListAdapter;
  private EventListForDayCursorAdapter mEventsForDayListAdapter;
  private ListView mListView;
  private String mPrefsFile = "com.qbiki.modules.calendar";
  private int mSelectedDateEventListItem = 0;
  private int mTodayEventListItem = 0;
  private View mView = null;
  private int mViewType = 2;
  
  public CalendarFragment() {}
  
  private void createEvent()
  {
    createEvent(this.mCalendarView.getSelectedDay().getTime());
  }
  
  private void createEvent(Date paramDate)
  {
    Intent localIntent = new Intent(getActivity(), EventEditActivity.class);
    localIntent.putExtra("databaseName", this.mDatabaseName);
    localIntent.putExtra("startDate", paramDate.getTime());
    localIntent.putStringArrayListExtra("categories", this.mCategories);
    startActivityForResult(localIntent, 1);
  }
  
  private void deleteEvent(long paramLong, String paramString)
  {
    EventDeleteDialog.show(getActivity(), this.mDbHelper, paramLong, paramString, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        CalendarFragment.this.refreshData();
      }
    });
  }
  
  private void editEvent(long paramLong)
  {
    Intent localIntent = new Intent(getActivity(), EventEditActivity.class);
    localIntent.putExtra("databaseName", this.mDatabaseName);
    localIntent.putExtra("_id", Long.valueOf(paramLong));
    localIntent.putStringArrayListExtra("categories", this.mCategories);
    startActivityForResult(localIntent, 2);
  }
  
  private void initCategories()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null)
    {
      this.mCategories = localBundle.getStringArrayList("categories");
      this.mCategoryColors = localBundle.getIntegerArrayList("categoryColors");
    }
    if ((this.mCategories == null) || (this.mCategories.size() == 0)) {
      this.mCategories = DEFAULT_CATEGORIES;
    }
    if ((this.mCategoryColors == null) || (this.mCategoryColors.size() == 0)) {
      this.mCategoryColors = DEFAULT_CATEGORY_COLORS;
    }
    int i = 0;
    while ((i < this.mCategories.size()) && (i < this.mCategoryColors.size()))
    {
      this.mCategoryColorsMap.put(this.mCategories.get(i), this.mCategoryColors.get(i));
      i += 1;
    }
  }
  
  private void initDatabaseName()
  {
    String str = null;
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      str = localBundle.getString("storeId");
    }
    if ((str == null) || (str.trim().equals("")))
    {
      this.mDatabaseName = "calendar.db";
      return;
    }
    this.mDatabaseName = ("calendar-" + str + ".db");
  }
  
  private void persistViewType()
  {
    SharedPreferences.Editor localEditor = getActivity().getSharedPreferences(this.mPrefsFile, 0).edit();
    localEditor.putInt("selectedViewType", this.mViewType);
    localEditor.commit();
  }
  
  private int readPersistedViewType()
  {
    return getActivity().getSharedPreferences(this.mPrefsFile, 0).getInt("selectedViewType", 2);
  }
  
  private void refreshData()
  {
    if (this.mViewType == 100)
    {
      refreshListData();
      return;
    }
    refreshDayViewData();
    refreshMonthViewData();
  }
  
  private void refreshDayViewData()
  {
    getLoaderManager().restartLoader(0, null, this);
  }
  
  private void refreshListData()
  {
    Object localObject1 = DateUtil.getDateByAddingDaysToDate(DateUtil.getDayStart(new Date()).getTime(), 65171);
    Object localObject2 = DateUtil.getDateByAddingDaysToDate((Date)localObject1, 1095);
    Object localObject3 = this.mDbHelper.fetchEventsInPeriod((Date)localObject1, (Date)localObject2);
    TreeMap localTreeMap = new TreeMap();
    Object localObject5;
    Object localObject6;
    if (localObject3 != null)
    {
      ((Cursor)localObject3).moveToFirst();
      while (!((Cursor)localObject3).isAfterLast())
      {
        localObject4 = this.mDbHelper.getEventListItemFromCursor((Cursor)localObject3);
        localObject1 = ((EventListItem)localObject4).getStartDate();
        localObject5 = DateUtil.getCalendarForDate(((EventListItem)localObject4).getEndDate());
        localObject6 = DateUtil.getDayStart((Date)localObject1);
        while (((Calendar)localObject6).compareTo((Calendar)localObject5) <= 0)
        {
          localObject2 = (ArrayList)localTreeMap.get(((Calendar)localObject6).getTime());
          localObject1 = localObject2;
          if (localObject2 == null) {
            localObject1 = new ArrayList();
          }
          ((ArrayList)localObject1).add(localObject4);
          localTreeMap.put(((Calendar)localObject6).getTime(), localObject1);
          ((Calendar)localObject6).add(6, 1);
        }
        ((Cursor)localObject3).moveToNext();
      }
      ((Cursor)localObject3).close();
    }
    localObject1 = new ArrayList();
    localObject2 = this.mCalendarView.getSelectedDay().getTime();
    int n = Integer.MAX_VALUE;
    int i1 = 0;
    localObject3 = new Date();
    int i = Integer.MAX_VALUE;
    int j = 0;
    Object localObject4 = localTreeMap.keySet().iterator();
    while (((Iterator)localObject4).hasNext())
    {
      localObject6 = (Date)((Iterator)localObject4).next();
      Object localObject7 = (ArrayList)localTreeMap.get(localObject6);
      if (localObject7 != null)
      {
        localObject5 = new EventListItem();
        ((EventListItem)localObject5).setType(0);
        ((EventListItem)localObject5).setStartDate((Date)localObject6);
        ((List)localObject1).add(localObject5);
        int k = i1;
        if (DateUtil.isSameDay((Date)localObject6, (Date)localObject2))
        {
          this.mSelectedDateEventListItem = (((List)localObject1).size() - 1);
          k = 1;
        }
        int m = n;
        if (k == 0)
        {
          i1 = DateUtil.getDaysBetweenDates((Date)localObject6, (Date)localObject2, true);
          m = n;
          if (i1 < n)
          {
            m = i1;
            this.mSelectedDateEventListItem = (((List)localObject1).size() - 1);
          }
        }
        int i2 = j;
        if (DateUtil.isSameDay((Date)localObject6, (Date)localObject3))
        {
          this.mTodayEventListItem = (((List)localObject1).size() - 1);
          i2 = 1;
        }
        int i3 = i;
        if (i2 == 0)
        {
          j = DateUtil.getDaysBetweenDates((Date)localObject6, (Date)localObject3, true);
          i3 = i;
          if (j < i)
          {
            i3 = j;
            this.mTodayEventListItem = (((List)localObject1).size() - 1);
          }
        }
        localObject6 = ((ArrayList)localObject7).iterator();
        for (;;)
        {
          n = m;
          i = i3;
          i1 = k;
          j = i2;
          if (!((Iterator)localObject6).hasNext()) {
            break;
          }
          localObject7 = new EventListItem((EventListItem)((Iterator)localObject6).next());
          ((EventListItem)localObject7).setSection((EventListItem)localObject5);
          ((List)localObject1).add(localObject7);
        }
      }
    }
    this.mEventListAdapter.changeData((List)localObject1);
  }
  
  private void refreshMonthViewData()
  {
    Set localSet = this.mDbHelper.fetchDatesWithEventsInPeriod(this.mCalendarView.getVisibleStartDate().getTime(), this.mCalendarView.getVisibleEndDate().getTime());
    this.mCalendarView.markDays(localSet);
  }
  
  private void setViewType(int paramInt)
  {
    this.mViewType = paramInt;
    View localView = this.mView.findViewById(2131099808);
    ListView localListView = (ListView)this.mView.findViewById(16908298);
    if (this.mViewType == 100)
    {
      this.mCalendarView.setView(1);
      localView.setVisibility(8);
      localListView.setVerticalScrollBarEnabled(false);
      setListAdapter(this.mEventListAdapter);
      return;
    }
    this.mCalendarView.setView(paramInt);
    localView.setVisibility(0);
    localListView.setVerticalScrollBarEnabled(true);
    setListAdapter(this.mEventsForDayListAdapter);
  }
  
  private void setupCalendarListeners()
  {
    this.mCalendarView.setOnSelectedDayChangedListener(new CalendarView.OnSelectedDayChangedListener()
    {
      public void onSelectedDayChanged(CalendarView paramAnonymousCalendarView)
      {
        CalendarFragment.this.refreshDayViewData();
      }
    });
    this.mCalendarView.setOnMonthChangedListener(new CalendarView.OnMonthChangedListener()
    {
      public void onMonthChanged(CalendarView paramAnonymousCalendarView)
      {
        CalendarFragment.this.refreshMonthViewData();
      }
    });
  }
  
  private void syncEvents()
  {
    final View localView = this.mView.findViewById(2131099763);
    this.mCalendarView.setVisibility(8);
    localView.setVisibility(0);
    Object localObject = "calendar_events.json";
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      localObject = localBundle.getString("syncedEventsResourceName");
    }
    localObject = new EventsSyncAsyncTask(this.mDbHelper, (String)localObject);
    ((EventsSyncAsyncTask)localObject).setAsyncTaskListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        Log.v("CalendarFragment", "Events sync done, reloading Calendar");
        CalendarFragment.this.refreshData();
        if (CalendarFragment.this.mViewType == 100) {
          CalendarFragment.this.mListView.setSelection(CalendarFragment.this.mSelectedDateEventListItem);
        }
        CalendarFragment.this.mCalendarView.setVisibility(0);
        localView.setVisibility(8);
      }
    });
    ((EventsSyncAsyncTask)localObject).execute(new String[0]);
  }
  
  private void updateForOrientation(int paramInt)
  {
    View localView = this.mView.findViewById(2131099813);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(localView.getLayoutParams());
    if (paramInt == 1) {}
    for (localLayoutParams.height = DeviceUtil.dpToPx(getActivity(), 345.0F);; localLayoutParams.height = -1)
    {
      localView.setLayoutParams(localLayoutParams);
      return;
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    switch (paramInt1)
    {
    }
    do
    {
      return;
    } while ((paramInt2 != 101) && (paramInt2 != 102));
    refreshData();
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    updateForOrientation(paramConfiguration.orientation);
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public boolean onContextItemSelected(android.view.MenuItem paramMenuItem)
  {
    AdapterView.AdapterContextMenuInfo localAdapterContextMenuInfo = (AdapterView.AdapterContextMenuInfo)paramMenuItem.getMenuInfo();
    switch (paramMenuItem.getItemId())
    {
    case 2131100272: 
    case 2131100273: 
    case 2131100274: 
    default: 
      return super.onContextItemSelected(paramMenuItem);
    case 2131100271: 
      if (this.mViewType == 100) {}
      for (paramMenuItem = ((EventListItem)this.mEventListAdapter.getItem(localAdapterContextMenuInfo.position)).getStartDate();; paramMenuItem = new Date(paramMenuItem.getLong(paramMenuItem.getColumnIndex("start_date"))))
      {
        createEvent(paramMenuItem);
        return true;
        paramMenuItem = (Cursor)this.mEventsForDayListAdapter.getItem(localAdapterContextMenuInfo.position);
      }
    case 2131100269: 
    case 2131100275: 
      editEvent(localAdapterContextMenuInfo.id);
      return true;
    }
    if (this.mViewType == 100) {}
    for (paramMenuItem = ((EventListItem)this.mEventListAdapter.getItem(localAdapterContextMenuInfo.position)).getRecurringEventId();; paramMenuItem = paramMenuItem.getString(paramMenuItem.getColumnIndex("recurring_event_id")))
    {
      deleteEvent(localAdapterContextMenuInfo.id, paramMenuItem);
      return true;
      paramMenuItem = (Cursor)this.mEventsForDayListAdapter.getItem(localAdapterContextMenuInfo.position);
    }
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    super.onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
    paramView = (AdapterView.AdapterContextMenuInfo)paramContextMenuInfo;
    boolean bool;
    if (this.mViewType == 100)
    {
      paramView = (EventListItem)this.mEventListAdapter.getItem(paramView.position);
      bool = paramView.isSynecedEvent();
      paramView = paramView.getTitle();
      paramContextMenuInfo = getActivity().getMenuInflater();
      if (!bool) {
        break label139;
      }
      paramContextMenuInfo.inflate(2131558403, paramContextMenu);
    }
    for (;;)
    {
      paramContextMenu.setHeaderTitle(paramView);
      return;
      paramView = (Cursor)this.mEventsForDayListAdapter.getItem(paramView.position);
      if (paramView.getInt(paramView.getColumnIndex("is_synced_event")) == 1) {}
      for (bool = true;; bool = false)
      {
        paramView = paramView.getString(paramView.getColumnIndex("title"));
        break;
      }
      label139:
      paramContextMenuInfo.inflate(2131558401, paramContextMenu);
    }
  }
  
  public Loader<Cursor> onCreateLoader(int paramInt, Bundle paramBundle)
  {
    new AbstractCursorLoader(getActivity())
    {
      protected Cursor loadCursorInBackground()
      {
        return CalendarFragment.this.mDbHelper.fetchEventsForDay(CalendarFragment.this.mCalendarView.getSelectedDay().getTime());
      }
    };
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, com.actionbarsherlock.view.MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558402, paramMenu);
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903072, paramViewGroup, false);
    paramLayoutInflater = getArguments();
    if (paramLayoutInflater != null)
    {
      paramLayoutInflater = paramLayoutInflater.getString("storeId");
      if (paramLayoutInflater != null) {
        this.mPrefsFile = (this.mPrefsFile + "." + paramLayoutInflater);
      }
    }
    this.mListView = ((ListView)this.mView.findViewById(16908298));
    initDatabaseName();
    this.mDbHelper = new DatabaseHelper(getActivity(), this.mDatabaseName);
    this.mCalendarView = ((CalendarView)this.mView.findViewById(2131099762));
    initCategories();
    this.mEventsForDayListAdapter = new EventListForDayCursorAdapter(getActivity(), this.mCalendarView.getSelectedDay().getTime(), this.mCategoryColorsMap, ((Integer)this.mCategoryColors.get(this.mCategoryColors.size() - 1)).intValue());
    this.mEventListAdapter = new EventListAdapter(getActivity(), new ArrayList(), this.mCategoryColorsMap, ((Integer)this.mCategoryColors.get(this.mCategoryColors.size() - 1)).intValue());
    setListAdapter(this.mEventsForDayListAdapter);
    setupCalendarListeners();
    if (paramBundle != null)
    {
      int i = paramBundle.getInt("selectedView", 2);
      setViewType(i);
      long l = paramBundle.getLong("selectedDate", new Date().getTime());
      paramLayoutInflater = Calendar.getInstance();
      paramLayoutInflater.setTime(new Date(l));
      this.mCalendarView.setSelectedDay(paramLayoutInflater);
      if (i == 100) {
        refreshListData();
      }
    }
    for (;;)
    {
      Log.v("CalendarFragment", "selectedDate = " + this.mCalendarView.getSelectedDay().getTime());
      getLoaderManager().initLoader(0, null, this);
      return this.mView;
      if (DateUtil.isSameMonth(new Date(), this.mCalendarView.getSelectedDay().getTime()))
      {
        refreshMonthViewData();
        continue;
        syncEvents();
        setViewType(readPersistedViewType());
      }
    }
  }
  
  public void onDestroyView()
  {
    if (this.mDbHelper != null) {
      this.mDbHelper.close();
    }
    super.onDestroyView();
  }
  
  public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong)
  {
    super.onListItemClick(paramListView, paramView, paramInt, paramLong);
    editEvent(paramLong);
  }
  
  public void onLoadFinished(Loader<Cursor> paramLoader, Cursor paramCursor)
  {
    this.mEventsForDayListAdapter.setSelectedDay(this.mCalendarView.getSelectedDay().getTime());
    this.mEventsForDayListAdapter.swapCursor(paramCursor);
  }
  
  public void onLoaderReset(Loader<Cursor> paramLoader)
  {
    this.mEventsForDayListAdapter.swapCursor(null);
  }
  
  public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100273: 
      this.mCalendarView.setSelectedDay(Calendar.getInstance());
      if (this.mViewType == 100) {
        this.mListView.setSelection(this.mTodayEventListItem);
      }
      return true;
    case 2131100271: 
      createEvent();
      return true;
    case 2131100274: 
      new InfoDialog(getActivity(), this.mCategories, this.mCategoryColorsMap, ((Integer)this.mCategoryColors.get(this.mCategoryColors.size() - 1)).intValue()).show();
      return true;
    }
    if (this.mViewType == 100) {
      setViewType(2);
    }
    for (;;)
    {
      refreshData();
      if (this.mViewType == 100) {
        this.mListView.setSelection(this.mSelectedDateEventListItem);
      }
      persistViewType();
      return true;
      setViewType(100);
    }
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    com.actionbarsherlock.view.MenuItem localMenuItem = paramMenu.findItem(2131100272);
    if (this.mViewType == 100)
    {
      localMenuItem.setTitle(2131361974);
      localMenuItem.setIcon(17301572);
    }
    for (;;)
    {
      super.onPrepareOptionsMenu(paramMenu);
      return;
      localMenuItem.setTitle(2131361973);
      localMenuItem.setIcon(17301556);
    }
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    int i = this.mCalendarView.getView();
    if (this.mViewType == 100) {
      i = 100;
    }
    paramBundle.putInt("selectedView", i);
    paramBundle.putLong("selectedDate", this.mCalendarView.getSelectedDay().getTimeInMillis());
    super.onSaveInstanceState(paramBundle);
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    updateForOrientation(getActivity().getResources().getConfiguration().orientation);
    registerForContextMenu(getListView());
  }
}
