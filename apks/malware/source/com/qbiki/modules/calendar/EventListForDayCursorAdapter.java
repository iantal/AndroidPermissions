package com.qbiki.modules.calendar;

import android.content.Context;
import android.database.Cursor;
import android.support.v4.widget.CursorAdapter;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import com.qbiki.util.DateUtil;
import com.qbiki.util.DeviceUtil;
import java.util.Date;
import java.util.Map;

public class EventListForDayCursorAdapter
  extends CursorAdapter
{
  private static final String CATEGORY_COURT = "Court";
  private static final String CATEGORY_DETAIL = "Detail";
  private Map<String, Integer> mCategoryColors;
  private int mDefaultCategoryColor;
  private LayoutInflater mInflater;
  private CategoryMarkerFactory mMarkerFactory;
  private Date mSelectedDay;
  private java.text.DateFormat mTimeFormat;
  
  public EventListForDayCursorAdapter(Context paramContext, Date paramDate, Map<String, Integer> paramMap, int paramInt)
  {
    super(paramContext, null, 0);
    this.mInflater = LayoutInflater.from(paramContext);
    this.mTimeFormat = android.text.format.DateFormat.getTimeFormat(paramContext);
    this.mMarkerFactory = new CategoryMarkerFactory(paramContext);
    this.mSelectedDay = paramDate;
    this.mCategoryColors = paramMap;
    this.mDefaultCategoryColor = paramInt;
  }
  
  public void bindView(View paramView, Context paramContext, Cursor paramCursor)
  {
    int i = 1;
    paramView.setId(paramCursor.getInt(paramCursor.getColumnIndex("_id")));
    ViewHolder localViewHolder = (ViewHolder)paramView.getTag();
    String str = paramCursor.getString(paramCursor.getColumnIndex("category"));
    paramContext = (Integer)this.mCategoryColors.get(str);
    paramView = paramContext;
    if (paramContext == null) {
      paramView = Integer.valueOf(this.mDefaultCategoryColor);
    }
    DeviceUtil.setBackground(localViewHolder.categoryMarker, this.mMarkerFactory.getCategoryMarker(paramView.intValue()));
    localViewHolder.title.setText(paramCursor.getString(paramCursor.getColumnIndex("title")));
    if (str.equals("Court"))
    {
      localViewHolder.detail.setVisibility(0);
      localViewHolder.detail.setText(paramCursor.getString(paramCursor.getColumnIndex("case_number")));
      paramView = paramCursor.getString(paramCursor.getColumnIndex("location"));
      if ((paramView != null) && (!paramView.equals(""))) {
        break label315;
      }
      localViewHolder.location.setVisibility(8);
      label195:
      localViewHolder.time.setVisibility(8);
      localViewHolder.ends.setVisibility(8);
      localViewHolder.allDay.setVisibility(8);
      if (paramCursor.getInt(paramCursor.getColumnIndex("is_all_day")) != 1) {
        break label336;
      }
    }
    for (;;)
    {
      if (i == 0) {
        break label342;
      }
      localViewHolder.allDay.setVisibility(0);
      return;
      if (str.equals("Detail"))
      {
        localViewHolder.detail.setVisibility(0);
        localViewHolder.detail.setText(paramCursor.getString(paramCursor.getColumnIndex("reference")));
        break;
      }
      localViewHolder.detail.setVisibility(8);
      break;
      label315:
      localViewHolder.location.setVisibility(0);
      localViewHolder.location.setText(paramView);
      break label195;
      label336:
      i = 0;
    }
    label342:
    paramView = new Date(paramCursor.getLong(paramCursor.getColumnIndex("start_date")));
    paramContext = new Date(paramCursor.getLong(paramCursor.getColumnIndex("end_date")));
    if (DateUtil.isSameDay(paramView, this.mSelectedDay))
    {
      localViewHolder.time.setVisibility(0);
      localViewHolder.time.setText(this.mTimeFormat.format(paramView));
      return;
    }
    if (DateUtil.isSameDay(paramContext, this.mSelectedDay))
    {
      localViewHolder.ends.setVisibility(0);
      localViewHolder.time.setVisibility(0);
      localViewHolder.time.setText(this.mTimeFormat.format(paramContext));
      return;
    }
    localViewHolder.allDay.setVisibility(0);
  }
  
  public Map<String, Integer> getCategoryColors()
  {
    return this.mCategoryColors;
  }
  
  public int getDefaultCategoryColor()
  {
    return this.mDefaultCategoryColor;
  }
  
  public Date getSelectedDay()
  {
    return this.mSelectedDay;
  }
  
  public java.text.DateFormat getTimeFormat()
  {
    return this.mTimeFormat;
  }
  
  public View newView(Context paramContext, Cursor paramCursor, ViewGroup paramViewGroup)
  {
    paramContext = this.mInflater.inflate(2130903076, paramViewGroup, false);
    paramCursor = new ViewHolder(null);
    paramCursor.title = ((TextView)paramContext.findViewById(2131099801));
    paramCursor.detail = ((TextView)paramContext.findViewById(2131099802));
    paramCursor.location = ((TextView)paramContext.findViewById(2131099803));
    paramCursor.time = ((TextView)paramContext.findViewById(2131099799));
    paramCursor.allDay = ((TextView)paramContext.findViewById(2131099797));
    paramCursor.ends = ((TextView)paramContext.findViewById(2131099798));
    paramCursor.categoryMarker = paramContext.findViewById(2131099765);
    paramContext.setTag(paramCursor);
    return paramContext;
  }
  
  public void setCategoryColors(Map<String, Integer> paramMap)
  {
    this.mCategoryColors = paramMap;
  }
  
  public void setDefaultCategoryColor(int paramInt)
  {
    this.mDefaultCategoryColor = paramInt;
  }
  
  public void setSelectedDay(Date paramDate)
  {
    this.mSelectedDay = paramDate;
  }
  
  public void setTimeFormat(java.text.DateFormat paramDateFormat)
  {
    this.mTimeFormat = paramDateFormat;
  }
  
  private static class ViewHolder
  {
    public TextView allDay;
    public View categoryMarker;
    public TextView detail;
    public TextView ends;
    public TextView location;
    public TextView time;
    public TextView title;
    
    private ViewHolder() {}
  }
}
