package com.qbiki.modules.calendar;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import com.qbiki.util.DateUtil;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

public class DatabaseHelper
  extends SQLiteOpenHelper
{
  public static final int BOOL_INT_FALSE = 0;
  public static final int BOOL_INT_TRUE = 1;
  private static final int DATABASE_VERSION = 2;
  private static final String TAG = "DatabaseHelper";
  private static final int VER_LAUNCH = 1;
  private static final int VER_SYNCED_EVENTS = 2;
  
  public DatabaseHelper(Context paramContext, String paramString)
  {
    super(paramContext, paramString, null, 2);
    Log.v("DatabaseHelper", "Using calendar database: " + paramString);
  }
  
  private ContentValues createContentValues(String paramString1, String paramString2, String paramString3, String paramString4, Date paramDate1, Date paramDate2, boolean paramBoolean1, String paramString5, String paramString6, boolean paramBoolean2, String paramString7)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("recurring_event_id", paramString1);
    localContentValues.put("title", paramString2);
    localContentValues.put("category", paramString3);
    localContentValues.put("location", paramString4);
    localContentValues.put("start_date", Long.valueOf(paramDate1.getTime()));
    localContentValues.put("end_date", Long.valueOf(paramDate2.getTime()));
    if (paramBoolean1)
    {
      i = 1;
      localContentValues.put("is_all_day", Integer.valueOf(i));
      localContentValues.put("case_number", paramString5);
      localContentValues.put("reference", paramString6);
      if (!paramBoolean2) {
        break label148;
      }
    }
    label148:
    for (int i = 1;; i = 0)
    {
      localContentValues.put("is_synced_event", Integer.valueOf(i));
      localContentValues.put("description", paramString7);
      return localContentValues;
      i = 0;
      break;
    }
  }
  
  public boolean deleteAllSyncedEvents()
  {
    return getWritableDatabase().delete("events", "is_synced_event='1'", null) > 0;
  }
  
  public boolean deleteEvent(long paramLong)
  {
    return getWritableDatabase().delete("events", "_id=" + paramLong, null) > 0;
  }
  
  public boolean deleteRecurringEvent(String paramString)
  {
    return getWritableDatabase().delete("events", "recurring_event_id='" + paramString + "'", null) > 0;
  }
  
  public Cursor fetchAllEvents()
  {
    return getReadableDatabase().query("events", new String[] { "_id", "recurring_event_id", "title", "category", "location", "start_date", "end_date", "is_all_day", "case_number", "reference" }, null, null, null, null, null);
  }
  
  public Set<Calendar> fetchDatesWithEventsInPeriod(Date paramDate1, Date paramDate2)
  {
    HashSet localHashSet = new HashSet();
    paramDate1 = DateUtil.getDayStart(paramDate1);
    Object localObject = DateUtil.getDayEnd(paramDate2);
    paramDate2 = getReadableDatabase();
    paramDate1 = "end_date >= " + paramDate1.getTimeInMillis() + " AND " + "start_date" + " <= " + ((Calendar)localObject).getTimeInMillis();
    paramDate1 = paramDate2.query("events", new String[] { "start_date", "end_date" }, paramDate1, null, null, null, null);
    if (paramDate1 != null)
    {
      int i = paramDate1.getColumnIndex("start_date");
      int j = paramDate1.getColumnIndex("end_date");
      paramDate1.moveToFirst();
      while (!paramDate1.isAfterLast())
      {
        localObject = new Date(paramDate1.getLong(i));
        paramDate2 = DateUtil.getCalendarForDate(paramDate1.getLong(j));
        localObject = DateUtil.getDayStart((Date)localObject);
        while (((Calendar)localObject).compareTo(paramDate2) <= 0)
        {
          localHashSet.add((Calendar)((Calendar)localObject).clone());
          ((Calendar)localObject).add(6, 1);
        }
        paramDate1.moveToNext();
      }
      paramDate1.close();
    }
    return localHashSet;
  }
  
  public Cursor fetchEventById(long paramLong)
  {
    Object localObject = getReadableDatabase();
    String str = "_id = " + paramLong;
    localObject = ((SQLiteDatabase)localObject).query("events", new String[] { "_id", "recurring_event_id", "title", "category", "location", "start_date", "end_date", "is_all_day", "case_number", "reference", "is_synced_event", "description" }, str, null, null, null, null);
    if (localObject != null) {
      ((Cursor)localObject).moveToFirst();
    }
    return localObject;
  }
  
  public Cursor fetchEventsForDay(Date paramDate)
  {
    Object localObject1 = DateUtil.getDayStart(paramDate).getTime();
    Object localObject2 = DateUtil.getDayEnd(paramDate).getTime();
    paramDate = getReadableDatabase();
    localObject1 = Long.toString(((Date)localObject1).getTime());
    localObject2 = Long.toString(((Date)localObject2).getTime());
    return paramDate.query("events", new String[] { "_id", "recurring_event_id", "title", "category", "location", "case_number", "reference", "start_date", "end_date", "is_all_day", "is_synced_event" }, "end_date >= ? AND start_date <= ?", new String[] { localObject1, localObject2 }, null, null, "is_all_day DESC, start_date , end_date");
  }
  
  public Cursor fetchEventsInPeriod(Date paramDate1, Date paramDate2)
  {
    Object localObject = DateUtil.getDayStart(paramDate1).getTime();
    paramDate2 = DateUtil.getDayEnd(paramDate2).getTime();
    paramDate1 = getReadableDatabase();
    localObject = Long.toString(((Date)localObject).getTime());
    paramDate2 = Long.toString(paramDate2.getTime());
    return paramDate1.query("events", new String[] { "_id", "recurring_event_id", "title", "category", "location", "case_number", "reference", "start_date", "end_date", "is_all_day", "is_synced_event" }, "end_date >= ? AND start_date <= ?", new String[] { localObject, paramDate2 }, null, null, "start_date");
  }
  
  public EventListItem getEventListItemFromCursor(Cursor paramCursor)
  {
    boolean bool2 = true;
    EventListItem localEventListItem = new EventListItem();
    localEventListItem.setId(paramCursor.getLong(paramCursor.getColumnIndex("_id")));
    localEventListItem.setRecurringEventId(paramCursor.getString(paramCursor.getColumnIndex("recurring_event_id")));
    localEventListItem.setTitle(paramCursor.getString(paramCursor.getColumnIndex("title")));
    localEventListItem.setCategory(paramCursor.getString(paramCursor.getColumnIndex("category")));
    localEventListItem.setLocation(paramCursor.getString(paramCursor.getColumnIndex("location")));
    localEventListItem.setCaseNumber(paramCursor.getString(paramCursor.getColumnIndex("case_number")));
    localEventListItem.setReference(paramCursor.getString(paramCursor.getColumnIndex("reference")));
    localEventListItem.setStartDate(new Date(paramCursor.getLong(paramCursor.getColumnIndex("start_date"))));
    localEventListItem.setEndDate(new Date(paramCursor.getLong(paramCursor.getColumnIndex("end_date"))));
    if (paramCursor.getInt(paramCursor.getColumnIndex("is_all_day")) == 1)
    {
      bool1 = true;
      localEventListItem.setAllDay(bool1);
      if (paramCursor.getInt(paramCursor.getColumnIndex("is_synced_event")) != 1) {
        break label256;
      }
    }
    label256:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      localEventListItem.setSynecedEvent(bool1);
      return localEventListItem;
      bool1 = false;
      break;
    }
  }
  
  public long insertEvent(String paramString1, String paramString2, String paramString3, String paramString4, Date paramDate1, Date paramDate2, boolean paramBoolean, String paramString5, String paramString6)
  {
    return insertEvent(paramString1, paramString2, paramString3, paramString4, paramDate1, paramDate2, paramBoolean, paramString5, paramString6, false, "");
  }
  
  public long insertEvent(String paramString1, String paramString2, String paramString3, String paramString4, Date paramDate1, Date paramDate2, boolean paramBoolean1, String paramString5, String paramString6, boolean paramBoolean2, String paramString7)
  {
    paramString1 = createContentValues(paramString1, paramString2, paramString3, paramString4, paramDate1, paramDate2, paramBoolean1, paramString5, paramString6, paramBoolean2, paramString7);
    return getWritableDatabase().insert("events", null, paramString1);
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("CREATE TABLE events (_id INTEGER PRIMARY KEY AUTOINCREMENT,recurring_event_id TEXT,title TEXT,category TEXT NOT NULL,location TEXT,start_date INTEGER NOT NULL,end_date INTEGER NOT NULL,is_all_day INTEGER NOT NULL DEFAULT 0,case_number TEXT,reference TEXT,is_synced_event INTEGER NOT NULL DEFAULT 0,description TEXT DEFAULT '',extra TEXT)");
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
  {
    Log.d("DatabaseHelper", "onUpgrade() from " + paramInt1 + " to " + paramInt2);
    switch (paramInt1)
    {
    default: 
      return;
    }
    paramSQLiteDatabase.execSQL("ALTER TABLE events ADD is_synced_event INTEGER NOT NULL DEFAULT 0");
    paramSQLiteDatabase.execSQL("ALTER TABLE events ADD description TEXT DEFAULT ''");
  }
  
  public int updateEvent(long paramLong, String paramString1, String paramString2, String paramString3, String paramString4, Date paramDate1, Date paramDate2, boolean paramBoolean, String paramString5, String paramString6)
  {
    return updateEvent(paramLong, paramString1, paramString2, paramString3, paramString4, paramDate1, paramDate2, paramBoolean, paramString5, paramString6, false, "");
  }
  
  public int updateEvent(long paramLong, String paramString1, String paramString2, String paramString3, String paramString4, Date paramDate1, Date paramDate2, boolean paramBoolean1, String paramString5, String paramString6, boolean paramBoolean2, String paramString7)
  {
    paramString1 = createContentValues(paramString1, paramString2, paramString3, paramString4, paramDate1, paramDate2, paramBoolean1, paramString5, paramString6, paramBoolean2, paramString7);
    return getWritableDatabase().update("events", paramString1, "_id=" + paramLong, null);
  }
  
  static abstract interface EventsColumns
  {
    public static final String CASE_NUMBER = "case_number";
    public static final String CATEGORY = "category";
    public static final String DESCRIPTION = "description";
    public static final String END_DATE = "end_date";
    public static final String EXTRA = "extra";
    public static final String IS_ALL_DAY = "is_all_day";
    public static final String IS_SYNCED_EVENT = "is_synced_event";
    public static final String LOCATION = "location";
    public static final String RECURRING_EVENT_ID = "recurring_event_id";
    public static final String REFERENCE = "reference";
    public static final String START_DATE = "start_date";
    public static final String TITLE = "title";
  }
  
  static abstract interface Tables
  {
    public static final String EVENTS = "events";
  }
}
