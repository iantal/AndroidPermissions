package com.qbiki.modules.loyalty;

import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptListener;
import com.qbiki.util.StringUtil;
import com.qbiki.util.WebViewUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.http.HttpResponse;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.message.BasicNameValuePair;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class LoyaltyFragment
  extends SCFragment
{
  private static final String LOYALTY_PREF_NAME = "Loyalty";
  private static final String TAG = null;
  private boolean canBeScanAgain;
  private int countOfStamp;
  private int countOfStampDid;
  private View mView = null;
  private WebView mWebView = null;
  private boolean menuGetStampIsEnabled = true;
  private String pageid = "";
  private String placestampnameimg;
  private String redeemImgPath;
  private String resultImgPath;
  private String saveKeyId;
  private String secretcode;
  private String stampnameimg;
  
  public LoyaltyFragment() {}
  
  private void appearStampRedeem()
  {
    ImageView localImageView = (ImageView)this.mView.findViewById(2131099998);
    localImageView.setVisibility(0);
    localImageView.bringToFront();
    Animation localAnimation = AnimationUtils.loadAnimation(getActivity(), 2130968576);
    localImageView.setAnimation(localAnimation);
    localAnimation.start();
  }
  
  private void getStampButtonTapped()
  {
    DialogUtil.showPrompt(getActivity(), 2131362147, 2131362148, true, 2131362149, new DialogUtil.PromptListener()
    {
      public void onCancel() {}
      
      public void onStringInput(String paramAnonymousString)
      {
        if (paramAnonymousString.equalsIgnoreCase(LoyaltyFragment.this.secretcode))
        {
          LoyaltyFragment.access$008(LoyaltyFragment.this);
          paramAnonymousString = LoyaltyFragment.this.getActivity().getSharedPreferences("Loyalty", 0).edit();
          paramAnonymousString.putInt(LoyaltyFragment.this.saveKeyId, LoyaltyFragment.this.countOfStampDid);
          paramAnonymousString.commit();
          LoyaltyFragment.this.setStamp();
          if (LoyaltyFragment.this.countOfStampDid >= LoyaltyFragment.this.countOfStamp)
          {
            DialogUtil.showAlert(LoyaltyFragment.this.getActivity(), 2131361917, 2131362129);
            return;
          }
          DialogUtil.showAlert(LoyaltyFragment.this.getActivity(), 2131361917, 2131362151);
          return;
        }
        DialogUtil.showAlert(LoyaltyFragment.this.getActivity(), 2131361917, 2131362150);
      }
    });
  }
  
  private void sendFeedbackEmail()
  {
    Object localObject = "http://" + App.serverHostName + "/loyaltypagesendfeedback.ashx";
    ArrayList localArrayList = new ArrayList(4);
    localArrayList.add(new BasicNameValuePair("publisherid", App.publisherId));
    localArrayList.add(new BasicNameValuePair("username", App.username));
    localArrayList.add(new BasicNameValuePair("appid", App.appId));
    localArrayList.add(new BasicNameValuePair("pageid", this.pageid));
    localObject = new HttpPost((String)localObject);
    try
    {
      ((HttpPost)localObject).setEntity(new UrlEncodedFormEntity(localArrayList, "UTF-8"));
      Requester.sendRequest((HttpUriRequest)localObject, new ResponseListener()
      {
        public void onResponseReceived(HttpResponse paramAnonymousHttpResponse) {}
        
        public void onResponseTimeout() {}
      });
      return;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      for (;;)
      {
        Log.e(TAG, localUnsupportedEncodingException.getMessage());
      }
    }
  }
  
  private void setupWebView()
  {
    this.mWebView = ((WebView)this.mView.findViewById(2131099999));
    WebViewUtil.setDefaultSettings(this.mWebView);
    this.mWebView.setWebViewClient(new WebViewClient()
    {
      public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        LoyaltyFragment.this.setStamp();
      }
    });
  }
  
  protected void init()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      this.pageid = localBundle.getString("pageid");
    }
    initCoupon(this.pageid);
    setupWebView();
    this.mWebView.loadUrl(App.getResourceUrl(this.pageid));
    ((Button)this.mView.findViewById(2131100002)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = new AlertDialog.Builder(LoyaltyFragment.this.getActivity());
        paramAnonymousView.setTitle(LoyaltyFragment.this.getResources().getString(2131361917));
        paramAnonymousView.setMessage(LoyaltyFragment.this.getResources().getString(2131362138));
        paramAnonymousView.setPositiveButton(17039379, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            LoyaltyFragment.access$002(LoyaltyFragment.this, 0);
            paramAnonymous2DialogInterface = LoyaltyFragment.this.getActivity().getSharedPreferences("Loyalty", 0).edit();
            paramAnonymous2DialogInterface.putInt(LoyaltyFragment.this.saveKeyId, LoyaltyFragment.this.countOfStampDid);
            if (!LoyaltyFragment.this.canBeScanAgain) {
              paramAnonymous2DialogInterface.putBoolean(LoyaltyFragment.this.saveKeyId + "canBeScanAgain", LoyaltyFragment.this.canBeScanAgain);
            }
            paramAnonymous2DialogInterface.commit();
            LoyaltyFragment.this.setStamp();
            LoyaltyFragment.this.mWebView.setVisibility(0);
            ((LinearLayout)LoyaltyFragment.this.mView.findViewById(2131100000)).setVisibility(4);
            if (LoyaltyFragment.this.canBeScanAgain) {
              LoyaltyFragment.access$502(LoyaltyFragment.this, true);
            }
            if (!LoyaltyFragment.this.canBeScanAgain) {
              LoyaltyFragment.this.appearStampRedeem();
            }
            LoyaltyFragment.this.sendFeedbackEmail();
            LoyaltyFragment.this.invalidateOptionsMenu();
          }
        });
        paramAnonymousView.setNegativeButton(17039369, null);
        paramAnonymousView.show();
      }
    });
  }
  
  public void initCoupon(String paramString)
  {
    this.saveKeyId = ("loyaltycount" + App.username + App.appId + paramString);
    Object localObject2 = DocumentBuilderFactory.newInstance();
    Object localObject1 = null;
    ParserConfigurationException localParserConfigurationException2;
    try
    {
      localObject2 = ((DocumentBuilderFactory)localObject2).newDocumentBuilder();
      localObject1 = localObject2;
    }
    catch (ParserConfigurationException localParserConfigurationException3)
    {
      try
      {
        localObject1 = ((DocumentBuilder)localObject1).parse(App.getResourceStream("app.xml"));
        localObject2 = ((Document)localObject1).getDocumentElement().getElementsByTagName("page");
        if ((localObject2 == null) || (((NodeList)localObject2).getLength() <= 0)) {
          break label486;
        }
        int i = 0;
        for (;;)
        {
          if (i >= ((NodeList)localObject2).getLength()) {
            break label486;
          }
          localObject1 = ((NodeList)localObject2).item(i);
          localObject3 = ((Element)localObject1).getAttributeNode("id");
          if (localObject3 != null) {
            break;
          }
          i += 1;
        }
        localParserConfigurationException3 = localParserConfigurationException3;
        Log.e(TAG, localParserConfigurationException3.toString());
      }
      catch (SAXException localSAXException)
      {
        for (;;)
        {
          Log.e(TAG, localSAXException.toString());
          ParserConfigurationException localParserConfigurationException1 = localParserConfigurationException3;
        }
      }
      catch (IOException localIOException)
      {
        Object localObject3;
        do
        {
          for (;;)
          {
            Log.e(TAG, localIOException.toString());
            localParserConfigurationException2 = localParserConfigurationException3;
          }
          localObject3 = ((Attr)localObject3).getValue();
        } while ((localObject3 == null) || (!paramString.equalsIgnoreCase((String)localObject3)));
        paramString = ((Element)localParserConfigurationException2).getAttributeNode("countofstamp");
        if (paramString == null) {
          break label263;
        }
      }
    }
    localObject2 = null;
    if (StringUtil.isEmpty(paramString.getValue()))
    {
      paramString = "0";
      this.countOfStamp = Integer.parseInt(paramString);
      label263:
      paramString = ((Element)localParserConfigurationException2).getAttributeNode("secretcode");
      if (paramString != null) {
        this.secretcode = paramString.getValue();
      }
      paramString = ((Element)localParserConfigurationException2).getAttributeNode("resultimage");
      if (paramString != null) {
        this.resultImgPath = paramString.getValue();
      }
      paramString = ((Element)localParserConfigurationException2).getAttributeNode("stampnameimg");
      if (paramString != null) {
        this.stampnameimg = paramString.getValue();
      }
      paramString = ((Element)localParserConfigurationException2).getAttributeNode("placestampnameimg");
      if ((paramString != null) && (!paramString.getValue().equalsIgnoreCase(""))) {
        this.placestampnameimg = paramString.getValue();
      }
      Attr localAttr = ((Element)localParserConfigurationException2).getAttributeNode("allowreset");
      paramString = null;
      if (localAttr != null) {
        paramString = localAttr.getValue();
      }
      if ((paramString != null) && (!paramString.equalsIgnoreCase("yes"))) {
        break label653;
      }
      this.canBeScanAgain = true;
      label433:
      paramString = ((Element)localParserConfigurationException2).getAttributeNode("redeemimagename");
      if (paramString != null) {
        this.redeemImgPath = paramString.getValue();
      }
      if ((this.redeemImgPath == null) || (this.redeemImgPath.equalsIgnoreCase(""))) {
        this.redeemImgPath = "redeemed.png";
      }
      label486:
      paramString = getActivity().getSharedPreferences("Loyalty", 0);
      this.countOfStampDid = paramString.getInt(this.saveKeyId, 0);
      if (this.canBeScanAgain)
      {
        paramString = paramString.edit();
        paramString.putBoolean(this.saveKeyId + "canBeScanAgain", this.canBeScanAgain);
        paramString.commit();
      }
      paramString = BitmapFactory.decodeStream(App.getResourceStream(this.resultImgPath), null, null);
      ((ImageView)this.mView.findViewById(2131100001)).setImageBitmap(paramString);
      paramString = BitmapFactory.decodeStream(App.getResourceStream(this.redeemImgPath), null, null);
      ((ImageView)this.mView.findViewById(2131099998)).setImageBitmap(paramString);
      if (this.countOfStampDid >= 0) {
        break label661;
      }
      this.countOfStampDid = 0;
    }
    for (;;)
    {
      invalidateOptionsMenu();
      return;
      paramString = paramString.getValue();
      break;
      label653:
      this.canBeScanAgain = false;
      break label433;
      label661:
      if (this.countOfStampDid >= this.countOfStamp) {
        this.countOfStampDid = this.countOfStamp;
      }
    }
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558418, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903158, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    getStampButtonTapped();
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    MenuItem localMenuItem = paramMenu.findItem(2131100299);
    localMenuItem.setVisible(this.menuGetStampIsEnabled);
    localMenuItem.setEnabled(this.menuGetStampIsEnabled);
    super.onPrepareOptionsMenu(paramMenu);
  }
  
  protected void setStamp()
  {
    Object localObject = "javascript:";
    int i = 0;
    if (i < this.countOfStamp)
    {
      if (i < this.countOfStampDid) {}
      for (localObject = (String)localObject + String.format(new StringBuilder().append("var x%d=document.getElementById('loyaltystamp%d'); if(x%d) x%d.src=\"").append(this.stampnameimg).append("\"; ").toString(), new Object[] { Integer.valueOf(i), Integer.valueOf(i), Integer.valueOf(i), Integer.valueOf(i) });; localObject = (String)localObject + String.format(new StringBuilder().append("var x%d=document.getElementById('loyaltystamp%d'); if(x%d) x%d.src=\"").append(this.placestampnameimg).append("\"; ").toString(), new Object[] { Integer.valueOf(i), Integer.valueOf(i), Integer.valueOf(i), Integer.valueOf(i) }))
      {
        i += 1;
        break;
      }
    }
    this.mWebView.loadUrl((String)localObject);
    if (this.countOfStampDid >= this.countOfStamp)
    {
      this.mWebView.setVisibility(4);
      ((LinearLayout)this.mView.findViewById(2131100000)).setVisibility(0);
    }
    for (this.menuGetStampIsEnabled = false;; this.menuGetStampIsEnabled = true)
    {
      localObject = getActivity().getSharedPreferences("Loyalty", 0);
      if ((((SharedPreferences)localObject).contains(this.saveKeyId + "canBeScanAgain")) && (!((SharedPreferences)localObject).getBoolean(this.saveKeyId + "canBeScanAgain", false)))
      {
        this.menuGetStampIsEnabled = false;
        appearStampRedeem();
      }
      invalidateOptionsMenu();
      return;
    }
  }
}
