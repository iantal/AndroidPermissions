package com.qbiki.modules.pdfreader;

import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.ScaleGestureDetector.OnScaleGestureListener;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import com.googlecode.apdfviewer.PDF;
import com.googlecode.apdfviewer.PDF.Size;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import fi.harism.curl.CurlPage;
import fi.harism.curl.CurlView;
import fi.harism.curl.CurlView.ActionObserver;
import fi.harism.curl.CurlView.PageProvider;
import fi.harism.curl.CurlView.SizeChangedObserver;
import pl.polidea.view.ZoomView.ZoomViewListener;

public class PDFReaderFragment
  extends SCFragment
  implements CurlView.ActionObserver, CurlView.SizeChangedObserver
{
  public static final String PDF_FILE_IDENTIFIER = "pdffile";
  public static final String PDF_TEXT_DIRECTION = "pdfTextDirection";
  protected CurlView curlView = null;
  protected int currentPage = 0;
  protected PDFDocumentHelper docHelp = null;
  private boolean downInPageArea = false;
  protected View fview = null;
  private boolean inited = false;
  private int ltx = 0;
  private int lty = 0;
  protected int pageCount = 0;
  protected TextView pageIndicator = null;
  protected SeekBar pageSeeker = null;
  private int pageZooming = -1;
  private ProgressBar progressBar = null;
  protected boolean rightToLeftText = false;
  private float scaleFactor = 1.0F;
  private ScaleGestureDetector scaleGestureDetector = null;
  protected PDF.Size screenSize = new PDF.Size(100, 100);
  protected boolean shouldPrecache = false;
  private PDFZoomView zoomView = null;
  
  public PDFReaderFragment() {}
  
  private void createCurlView()
  {
    if (this.curlView != null) {
      return;
    }
    this.curlView = new CurlView(getActivity());
    this.curlView.setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
    this.curlView.setBackgroundColor(16777215);
    this.curlView.setAllowLastPageCurl(false);
    this.curlView.setSizeChangedObserver(this);
    ((FrameLayout)this.fview).addView(this.curlView, 0);
  }
  
  private void zoomOutPdfPage()
  {
    if (this.zoomView != null)
    {
      ((FrameLayout)this.fview).removeView(this.zoomView);
      this.zoomView.clearAll();
      this.zoomView = null;
    }
    if (this.curlView == null)
    {
      if (this.shouldPrecache) {
        this.docHelp.precacheInBackground(this.screenSize);
      }
      createCurlView();
      secondPhaseCurlInit();
    }
  }
  
  /* Error */
  protected void clearCacheIfNewFile(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 148	com/qbiki/modules/pdfreader/PDFReaderFragment:getActivity	()Landroid/support/v4/app/FragmentActivity;
    //   4: new 201	java/lang/StringBuilder
    //   7: dup
    //   8: invokespecial 202	java/lang/StringBuilder:<init>	()V
    //   11: ldc -52
    //   13: invokevirtual 208	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   16: aload_1
    //   17: invokevirtual 208	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   20: invokevirtual 212	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   23: iconst_0
    //   24: invokevirtual 218	android/support/v4/app/FragmentActivity:getSharedPreferences	(Ljava/lang/String;I)Landroid/content/SharedPreferences;
    //   27: astore 7
    //   29: aload 7
    //   31: ldc -36
    //   33: aconst_null
    //   34: invokeinterface 226 3 0
    //   39: astore 6
    //   41: getstatic 231	com/qbiki/seattleclouds/asynctasks/SyncResourcesAsyncTask:fileListFilePath	Ljava/lang/String;
    //   44: ifnonnull +18 -> 62
    //   47: aload_0
    //   48: getfield 71	com/qbiki/modules/pdfreader/PDFReaderFragment:docHelp	Lcom/qbiki/modules/pdfreader/PDFDocumentHelper;
    //   51: ifnull +10 -> 61
    //   54: aload_0
    //   55: getfield 71	com/qbiki/modules/pdfreader/PDFReaderFragment:docHelp	Lcom/qbiki/modules/pdfreader/PDFDocumentHelper;
    //   58: invokevirtual 234	com/qbiki/modules/pdfreader/PDFDocumentHelper:clearCache	()V
    //   61: return
    //   62: new 236	java/io/File
    //   65: dup
    //   66: getstatic 231	com/qbiki/seattleclouds/asynctasks/SyncResourcesAsyncTask:fileListFilePath	Ljava/lang/String;
    //   69: invokespecial 238	java/io/File:<init>	(Ljava/lang/String;)V
    //   72: astore_2
    //   73: aconst_null
    //   74: astore 4
    //   76: aload_2
    //   77: invokevirtual 242	java/io/File:exists	()Z
    //   80: ifeq -19 -> 61
    //   83: aconst_null
    //   84: astore_3
    //   85: aconst_null
    //   86: astore 5
    //   88: new 244	java/io/ObjectInputStream
    //   91: dup
    //   92: new 246	java/io/FileInputStream
    //   95: dup
    //   96: getstatic 231	com/qbiki/seattleclouds/asynctasks/SyncResourcesAsyncTask:fileListFilePath	Ljava/lang/String;
    //   99: invokespecial 247	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   102: invokespecial 250	java/io/ObjectInputStream:<init>	(Ljava/io/InputStream;)V
    //   105: astore_2
    //   106: aload_2
    //   107: invokevirtual 254	java/io/ObjectInputStream:readObject	()Ljava/lang/Object;
    //   110: checkcast 256	java/util/HashMap
    //   113: astore_3
    //   114: aload_2
    //   115: ifnull +137 -> 252
    //   118: aload_2
    //   119: invokevirtual 259	java/io/ObjectInputStream:close	()V
    //   122: aload_3
    //   123: astore_2
    //   124: aload_2
    //   125: ifnonnull +58 -> 183
    //   128: aload_0
    //   129: getfield 71	com/qbiki/modules/pdfreader/PDFReaderFragment:docHelp	Lcom/qbiki/modules/pdfreader/PDFDocumentHelper;
    //   132: invokevirtual 234	com/qbiki/modules/pdfreader/PDFDocumentHelper:clearCache	()V
    //   135: return
    //   136: astore_2
    //   137: aload_3
    //   138: astore_2
    //   139: goto -15 -> 124
    //   142: astore_2
    //   143: aload 5
    //   145: astore_3
    //   146: aload 4
    //   148: astore_2
    //   149: aload_3
    //   150: ifnull -26 -> 124
    //   153: aload_3
    //   154: invokevirtual 259	java/io/ObjectInputStream:close	()V
    //   157: aload 4
    //   159: astore_2
    //   160: goto -36 -> 124
    //   163: astore_2
    //   164: aload 4
    //   166: astore_2
    //   167: goto -43 -> 124
    //   170: astore_1
    //   171: aload_3
    //   172: astore_2
    //   173: aload_2
    //   174: ifnull +7 -> 181
    //   177: aload_2
    //   178: invokevirtual 259	java/io/ObjectInputStream:close	()V
    //   181: aload_1
    //   182: athrow
    //   183: aload_2
    //   184: aload_1
    //   185: invokevirtual 263	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   188: checkcast 265	java/lang/String
    //   191: astore_1
    //   192: aload_1
    //   193: ifnull -132 -> 61
    //   196: aload 7
    //   198: invokeinterface 269 1 0
    //   203: astore_2
    //   204: aload_2
    //   205: ldc -36
    //   207: aload_1
    //   208: invokeinterface 275 3 0
    //   213: pop
    //   214: aload_2
    //   215: invokeinterface 278 1 0
    //   220: pop
    //   221: aload_1
    //   222: aload 6
    //   224: invokevirtual 282	java/lang/String:equalsIgnoreCase	(Ljava/lang/String;)Z
    //   227: ifne -166 -> 61
    //   230: aload_0
    //   231: getfield 71	com/qbiki/modules/pdfreader/PDFReaderFragment:docHelp	Lcom/qbiki/modules/pdfreader/PDFDocumentHelper;
    //   234: invokevirtual 234	com/qbiki/modules/pdfreader/PDFDocumentHelper:clearCache	()V
    //   237: return
    //   238: astore_2
    //   239: goto -58 -> 181
    //   242: astore_1
    //   243: goto -70 -> 173
    //   246: astore_3
    //   247: aload_2
    //   248: astore_3
    //   249: goto -103 -> 146
    //   252: aload_3
    //   253: astore_2
    //   254: goto -130 -> 124
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	257	0	this	PDFReaderFragment
    //   0	257	1	paramString	String
    //   72	53	2	localObject1	Object
    //   136	1	2	localException1	Exception
    //   138	1	2	localObject2	Object
    //   142	1	2	localException2	Exception
    //   148	12	2	localObject3	Object
    //   163	1	2	localException3	Exception
    //   166	49	2	localObject4	Object
    //   238	10	2	localException4	Exception
    //   253	1	2	localObject5	Object
    //   84	88	3	localObject6	Object
    //   246	1	3	localException5	Exception
    //   248	5	3	localException6	Exception
    //   74	91	4	localObject7	Object
    //   86	58	5	localObject8	Object
    //   39	184	6	str	String
    //   27	170	7	localSharedPreferences	android.content.SharedPreferences
    // Exception table:
    //   from	to	target	type
    //   118	122	136	java/lang/Exception
    //   88	106	142	java/lang/Exception
    //   153	157	163	java/lang/Exception
    //   88	106	170	finally
    //   177	181	238	java/lang/Exception
    //   106	114	242	finally
    //   106	114	246	java/lang/Exception
  }
  
  protected void destroyCurlView()
  {
    if (this.curlView != null)
    {
      if (this.rightToLeftText) {
        this.currentPage = (this.pageCount - this.curlView.getCurrentIndex() - 1);
      }
      this.pageSeeker.setVisibility(4);
      ((FrameLayout)this.fview).removeView(this.curlView);
      this.curlView.onPause();
      this.curlView = null;
    }
    if (this.docHelp != null)
    {
      this.docHelp.stopPrecacheInBackground();
      this.docHelp.clearMemoryCache();
    }
  }
  
  public void didCurl(int paramInt1, int paramInt2)
  {
    this.scaleFactor = 1.0F;
    this.pageZooming = -1;
    this.currentPage = paramInt1;
    paramInt2 = paramInt1;
    if (this.rightToLeftText)
    {
      this.currentPage = (this.pageCount - paramInt1 - 1);
      paramInt2 = paramInt1;
      if (this.curlView.getViewMode() == 2) {
        paramInt2 = (int)(paramInt1 * 2.0D);
      }
    }
    this.pageSeeker.setProgress(paramInt2 * 10);
  }
  
  public void didStartDragging(int paramInt) {}
  
  public void didStopDragging(boolean paramBoolean) {}
  
  protected void init()
  {
    if (this.inited) {}
    label283:
    do
    {
      return;
      Object localObject = getArguments();
      if (localObject != null)
      {
        String str = ((Bundle)localObject).getString("pdffile");
        localObject = ((Bundle)localObject).getString("pdfTextDirection");
        if (localObject != null) {
          this.rightToLeftText = ((String)localObject).equals("rtl");
        }
        if (str != null)
        {
          this.docHelp = new PDFDocumentHelper(getActivity().getBaseContext(), str);
          this.docHelp.setMaxSize(new PDF.Size(this.curlView.getWidth(), this.curlView.getHeight()));
          clearCacheIfNewFile(str);
          if (!this.docHelp.openDocument(str)) {
            break label283;
          }
          this.pageCount = this.docHelp.getPageCount();
          this.pageSeeker.setMax((this.pageCount - 1) * 10);
          if (this.rightToLeftText)
          {
            this.currentPage = (this.pageCount - 1);
            this.pageSeeker.setProgress(this.currentPage * 10);
            if (this.curlView.getWidth() > this.curlView.getHeight()) {
              this.currentPage /= 2;
            }
            this.curlView.setCurrentIndex(this.currentPage);
          }
          this.pageSeeker.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener()
          {
            public void onProgressChanged(SeekBar paramAnonymousSeekBar, int paramAnonymousInt, boolean paramAnonymousBoolean)
            {
              if (paramAnonymousBoolean)
              {
                int i = paramAnonymousSeekBar.getProgress() / 10 + 1;
                paramAnonymousInt = i;
                if (PDFReaderFragment.this.rightToLeftText) {
                  paramAnonymousInt = PDFReaderFragment.this.pageCount - i + 1;
                }
                PDFReaderFragment.this.pageIndicator.setText("" + paramAnonymousInt);
              }
            }
            
            public void onStartTrackingTouch(SeekBar paramAnonymousSeekBar)
            {
              PDFReaderFragment.this.pageIndicator.setVisibility(0);
            }
            
            public void onStopTrackingTouch(SeekBar paramAnonymousSeekBar)
            {
              PDFReaderFragment.this.pageIndicator.setVisibility(4);
              int j = paramAnonymousSeekBar.getProgress() / 10;
              PDFReaderFragment.this.currentPage = j;
              int i = j;
              if (PDFReaderFragment.this.curlView.getViewMode() == 2)
              {
                i = j;
                if (j > 1) {
                  i = j / 2;
                }
              }
              PDFReaderFragment.this.curlView.setCurrentIndex(i);
            }
          });
          this.docHelp.precacheInBackground(this.screenSize);
          secondPhaseCurlInit();
          getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              PDFReaderFragment.this.pageSeeker.setVisibility(0);
              PDFReaderFragment.this.progressBar.setVisibility(8);
            }
          });
          this.scaleGestureDetector = new ScaleGestureDetector(getActivity(), new ScaleGestureDetector.OnScaleGestureListener()
          {
            public boolean onScale(ScaleGestureDetector paramAnonymousScaleGestureDetector)
            {
              PDFReaderFragment.access$732(PDFReaderFragment.this, paramAnonymousScaleGestureDetector.getScaleFactor());
              PDFReaderFragment.access$702(PDFReaderFragment.this, Math.max(1.0F, Math.min(PDFReaderFragment.this.scaleFactor, 5.0F)));
              if (PDFReaderFragment.this.scaleFactor > 1.0F) {
                PDFReaderFragment.access$802(PDFReaderFragment.this, PDFReaderFragment.this.curlView.getCurrentIndex());
              }
              for (;;)
              {
                PDFReaderFragment.this.curlView.setCurrentIndex(PDFReaderFragment.this.curlView.getCurrentIndex());
                Log.d("ScaleFactor", "" + PDFReaderFragment.this.scaleFactor);
                return false;
                PDFReaderFragment.access$802(PDFReaderFragment.this, -1);
              }
            }
            
            public boolean onScaleBegin(ScaleGestureDetector paramAnonymousScaleGestureDetector)
            {
              return !PDFReaderFragment.this.downInPageArea;
            }
            
            public void onScaleEnd(ScaleGestureDetector paramAnonymousScaleGestureDetector) {}
          });
        }
      }
      this.inited = true;
      return;
      this.fview.setVisibility(4);
      destroyCurlView();
    } while (PDF.nativeLibraryLoaded);
    DialogUtil.showAlert(getActivity(), 2131361915, 2131362188, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        App.closePage(PDFReaderFragment.this);
      }
    });
  }
  
  protected boolean isPageCurlArea(int paramInt1, int paramInt2)
  {
    paramInt2 = this.curlView.getWidth();
    int i = this.screenSize.width / 6;
    return (paramInt1 < i) || (paramInt1 > paramInt2 - i);
  }
  
  protected Bitmap loadBitmap(int paramInt1, int paramInt2, int paramInt3)
  {
    if ((this.scaleFactor > 1.0F) && (this.pageZooming == paramInt3))
    {
      localBitmap1 = Bitmap.createBitmap(paramInt1, paramInt2, this.docHelp.getBitmapConfig());
      localBitmap1.eraseColor(-1);
      this.docHelp.stopPrecacheInBackground();
      localBitmap2 = this.docHelp.bitmapForPage(paramInt3, new PDF.Size(paramInt1, paramInt2), 0, 0, this.scaleFactor);
      if (this.shouldPrecache) {
        this.docHelp.precacheInBackground(this.screenSize);
      }
      localCanvas = new Canvas(localBitmap1);
      localPaint = new Paint();
      localPaint.setColor(-4144960);
      paramInt1 = (paramInt1 - localBitmap2.getWidth()) / 2;
      paramInt2 = (paramInt2 - localBitmap2.getHeight()) / 2;
      localCanvas.drawBitmap(localBitmap2, paramInt1, paramInt2, localPaint);
      return localBitmap1;
    }
    Bitmap localBitmap1 = Bitmap.createBitmap(paramInt1, paramInt2, this.docHelp.getBitmapConfig());
    localBitmap1.eraseColor(-1);
    this.docHelp.stopPrecacheInBackground();
    Bitmap localBitmap2 = this.docHelp.bitmapForPage(paramInt3, new PDF.Size(paramInt1, paramInt2));
    if (this.shouldPrecache) {
      this.docHelp.precacheInBackground(this.screenSize);
    }
    if (localBitmap2 == null) {
      return localBitmap1;
    }
    Canvas localCanvas = new Canvas(localBitmap1);
    Paint localPaint = new Paint();
    localPaint.setColor(-4144960);
    paramInt1 = (paramInt1 - localBitmap2.getWidth()) / 2;
    paramInt2 = (paramInt2 - localBitmap2.getHeight()) / 2;
    localCanvas.drawBitmap(localBitmap2, paramInt1, paramInt2, localPaint);
    return localBitmap1;
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fview = paramLayoutInflater.inflate(2130903185, paramViewGroup, false);
    this.fview.setOnClickListener(null);
    this.pageSeeker = ((SeekBar)this.fview.findViewById(2131100102));
    this.pageIndicator = ((TextView)this.fview.findViewById(2131100104));
    this.progressBar = ((ProgressBar)this.fview.findViewById(2131100099));
    paramLayoutInflater = getActivity().getWindowManager().getDefaultDisplay();
    int j = paramLayoutInflater.getWidth();
    int i = paramLayoutInflater.getHeight();
    if (paramLayoutInflater.getOrientation() == 2)
    {
      j = paramLayoutInflater.getHeight();
      i = paramLayoutInflater.getWidth();
    }
    this.screenSize = new PDF.Size(j, i);
    return this.fview;
  }
  
  public void onDestroy()
  {
    if (this.docHelp != null) {
      this.docHelp.stopPrecacheInBackground();
    }
    super.onDestroy();
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    super.onHiddenChanged(paramBoolean);
    if (!PDF.nativeLibraryLoaded) {
      return;
    }
    if (paramBoolean)
    {
      this.shouldPrecache = false;
      zoomOutPdfPage();
      destroyCurlView();
      return;
    }
    this.shouldPrecache = true;
    this.docHelp.precacheInBackground(this.screenSize);
    createCurlView();
    secondPhaseCurlInit();
    this.pageSeeker.setVisibility(0);
  }
  
  public void onLowMemory()
  {
    if (this.docHelp != null) {
      this.docHelp.clearMemoryCache();
    }
    super.onLowMemory();
  }
  
  public void onPause()
  {
    super.onPause();
    if (!PDF.nativeLibraryLoaded) {
      return;
    }
    this.shouldPrecache = false;
    zoomOutPdfPage();
    destroyCurlView();
  }
  
  public void onResume()
  {
    super.onResume();
    if (!PDF.nativeLibraryLoaded) {}
    do
    {
      return;
      this.shouldPrecache = true;
      if (this.docHelp != null) {
        this.docHelp.precacheInBackground(this.screenSize);
      }
    } while (!this.inited);
    createCurlView();
    secondPhaseCurlInit();
  }
  
  public void onSizeChanged(int paramInt1, int paramInt2)
  {
    if (this.docHelp == null) {}
    do
    {
      return;
      PDF.Size localSize = this.docHelp.getMaxSize();
      if ((localSize.width != paramInt1) || (localSize.height != paramInt2)) {
        this.docHelp.setMaxSize(new PDF.Size(paramInt1, paramInt2));
      }
      if ((paramInt1 > paramInt2) && (this.curlView.getViewMode() != 2))
      {
        this.curlView.setRenderLeftPage(true);
        this.curlView.setViewMode(2);
        paramInt2 = this.curlView.getCurrentIndex();
        paramInt1 = paramInt2;
        if (paramInt2 > 1) {
          paramInt1 = paramInt2 / 2;
        }
        this.curlView.setCurrentIndex(paramInt1);
        return;
      }
    } while (this.curlView.getViewMode() == 1);
    this.curlView.setRenderLeftPage(false);
    this.curlView.setViewMode(1);
    paramInt2 = this.curlView.getCurrentIndex();
    paramInt1 = paramInt2;
    if (paramInt2 > 1) {
      paramInt1 = paramInt2 * 2;
    }
    this.curlView.setCurrentIndex(paramInt1);
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    new Handler().postDelayed(new Runnable()
    {
      public void run()
      {
        PDFReaderFragment.this.createCurlView();
        PDFReaderFragment.this.curlView.post(new Runnable()
        {
          public void run()
          {
            PDFReaderFragment.this.init();
          }
        });
      }
    }, 500L);
  }
  
  public void onViewModeChanged(int paramInt1, int paramInt2) {}
  
  protected void secondPhaseCurlInit()
  {
    if ((this.inited) && (this.rightToLeftText))
    {
      this.currentPage = (this.pageCount - this.currentPage - 1);
      if (this.curlView.getWidth() > this.curlView.getHeight()) {
        this.currentPage /= 2;
      }
    }
    if (this.curlView.getWidth() > this.curlView.getHeight())
    {
      this.curlView.setRenderLeftPage(true);
      this.curlView.setViewMode(2);
    }
    this.curlView.setPageProvider(new PageProvider(null));
    this.curlView.setCurrentIndex(this.currentPage);
    this.curlView.setActionObserver(this);
    this.pageSeeker.setVisibility(0);
    this.downInPageArea = false;
    this.curlView.setOnTouchListener(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        PDFReaderFragment.this.scaleGestureDetector.onTouchEvent(paramAnonymousMotionEvent);
        int m = (int)paramAnonymousMotionEvent.getX();
        int i1 = (int)paramAnonymousMotionEvent.getY();
        int j;
        int i;
        label46:
        int k;
        label65:
        int n;
        if (paramAnonymousMotionEvent.getAction() == 2)
        {
          j = 1;
          if (paramAnonymousMotionEvent.getAction() != 0) {
            break label131;
          }
          i = 1;
          if ((paramAnonymousMotionEvent.getAction() != 1) && (paramAnonymousMotionEvent.getAction() != 3)) {
            break label136;
          }
          k = 1;
          boolean bool = PDFReaderFragment.this.isPageCurlArea(m, i1);
          n = 0;
          if ((i == 0) || (!bool)) {
            break label142;
          }
          PDFReaderFragment.access$302(PDFReaderFragment.this, true);
          i = 1;
        }
        label131:
        label136:
        label142:
        label224:
        label391:
        do
        {
          do
          {
            for (;;)
            {
              if (i != 0)
              {
                paramAnonymousMotionEvent = MotionEvent.obtain(paramAnonymousMotionEvent);
                PDFReaderFragment.this.curlView.onTouch(paramAnonymousView, paramAnonymousMotionEvent);
              }
              return true;
              j = 0;
              break;
              i = 0;
              break label46;
              k = 0;
              break label65;
              if (i != 0)
              {
                PDFReaderFragment.access$402(PDFReaderFragment.this, m);
                PDFReaderFragment.access$502(PDFReaderFragment.this, i1);
                i = n;
              }
              else if (j != 0)
              {
                i = n;
                if (PDFReaderFragment.this.downInPageArea) {
                  i = 1;
                }
              }
              else
              {
                if ((!PDFReaderFragment.this.downInPageArea) || (k == 0)) {
                  break label224;
                }
                PDFReaderFragment.access$302(PDFReaderFragment.this, false);
                i = 1;
              }
            }
            if ((!PDFReaderFragment.this.downInPageArea) && (k != 0))
            {
              i = Math.abs(PDFReaderFragment.this.ltx - m);
              j = Math.abs(PDFReaderFragment.this.lty - i1);
              if ((i <= 7) && (j <= 7))
              {
                n = PDFReaderFragment.this.curlView.getCurrentIndex();
                k = n;
                i = m;
                j = i;
                if (PDFReaderFragment.this.curlView.getViewMode() == 2)
                {
                  j = PDFReaderFragment.this.curlView.getWidth() / 2;
                  n *= 2;
                  if (m <= j) {
                    break label391;
                  }
                  j = i / 2;
                  k = n;
                }
              }
              for (;;)
              {
                i = k;
                if (k >= PDFReaderFragment.this.pageCount) {
                  i = k - 1;
                }
                k = i;
                PDFReaderFragment.this.zoomPDFPage(k, j, i1);
                return false;
                k = n;
                j = i;
                if (n > 0)
                {
                  k = n - 1;
                  j = i;
                }
              }
            }
            i = n;
          } while (PDFReaderFragment.this.downInPageArea);
          i = n;
        } while (j == 0);
        return false;
      }
    });
  }
  
  protected void zoomPDFPage(int paramInt1, int paramInt2, int paramInt3)
  {
    this.curlView.setVisibility(8);
    if (this.zoomView == null)
    {
      destroyCurlView();
      System.gc();
      this.zoomView = new PDFZoomView(getActivity());
      this.zoomView.setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
      this.zoomView.setBackgroundDrawable(this.fview.getBackground());
      this.zoomView.setMaxZoom(5.0F);
      this.zoomView.setLowResImage(this.docHelp.bitmapForPage(paramInt1));
      this.zoomView.setScreenSize(this.screenSize);
      ((FrameLayout)this.fview).addView(this.zoomView);
      this.zoomView.smoothZoomTo(2.0F, paramInt2, paramInt3);
      this.zoomView.setDocumentHelper(this.docHelp);
      this.zoomView.setPageIndex(paramInt1);
      this.zoomView.setListner(new ZoomView.ZoomViewListener()
      {
        public void onVisibleAreaChanged(Rect paramAnonymousRect, float paramAnonymousFloat) {}
        
        public void onZoomEnded(float paramAnonymousFloat1, float paramAnonymousFloat2, float paramAnonymousFloat3)
        {
          if (paramAnonymousFloat1 == 1.0F) {
            PDFReaderFragment.this.zoomOutPdfPage();
          }
        }
        
        public void onZoomStarted(float paramAnonymousFloat1, float paramAnonymousFloat2, float paramAnonymousFloat3) {}
        
        public void onZooming(float paramAnonymousFloat1, float paramAnonymousFloat2, float paramAnonymousFloat3) {}
      });
    }
  }
  
  private class PageProvider
    implements CurlView.PageProvider
  {
    private PageProvider() {}
    
    public int getPageCount()
    {
      if (PDFReaderFragment.this.curlView.getViewMode() == 2) {
        return PDFReaderFragment.this.pageCount / 2 + 1;
      }
      return PDFReaderFragment.this.pageCount;
    }
    
    public void updatePage(CurlPage paramCurlPage, int paramInt1, int paramInt2, int paramInt3)
    {
      if (PDFReaderFragment.this.curlView.getViewMode() == 2)
      {
        i = paramInt3;
        if (PDFReaderFragment.this.rightToLeftText)
        {
          paramInt3 = PDFReaderFragment.this.pageCount / 2 - paramInt3 - 1;
          if (paramInt3 >= 0) {
            break label151;
          }
          i = 0;
        }
        for (;;)
        {
          Bitmap localBitmap1 = PDFReaderFragment.this.loadBitmap(paramInt1, paramInt2, i * 2);
          Bitmap localBitmap2 = PDFReaderFragment.this.loadBitmap(paramInt1, paramInt2, i * 2 + 1);
          Matrix localMatrix = new Matrix();
          localMatrix.setScale(-1.0F, 1.0F);
          localMatrix.postTranslate(localBitmap2.getWidth(), 0.0F);
          localBitmap2 = Bitmap.createBitmap(localBitmap2, 0, 0, localBitmap2.getWidth(), localBitmap2.getHeight(), localMatrix, true);
          paramCurlPage.setTexture(localBitmap1, 1);
          paramCurlPage.setTexture(localBitmap2, 2);
          return;
          label151:
          i = paramInt3;
          if (paramInt3 >= PDFReaderFragment.this.pageCount / 2) {
            i = paramInt3 - 1;
          }
        }
      }
      int i = paramInt3;
      if (PDFReaderFragment.this.rightToLeftText) {
        i = PDFReaderFragment.this.pageCount - paramInt3 - 1;
      }
      paramCurlPage.setTexture(PDFReaderFragment.this.loadBitmap(paramInt1, paramInt2, i), 3);
      paramCurlPage.setColor(Color.argb(55, 255, 255, 255), 2);
    }
  }
}
