package com.qbiki.modules.pdfreader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.PointF;
import android.graphics.drawable.BitmapDrawable;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.google.android.bitmapfun.ImageCache;
import com.google.android.bitmapfun.ImageCache.ImageCacheParams;
import com.googlecode.apdfviewer.PDF;
import com.googlecode.apdfviewer.PDF.Size;
import java.io.File;

public class PDFDocumentHelper
{
  private static final String TAG = "PDFDocumentHelper";
  private static final boolean mDebug = false;
  private final int HEIGHT = 800;
  private final int WIDTH = 600;
  private int cachedPages = 0;
  ImageCache ic = null;
  private int lastRequestedPage = 0;
  private Resources mResources;
  private int m_Rotate = 0;
  private Bitmap.Config m_bitmap_config = Bitmap.Config.ARGB_8888;
  private PointF m_sys_dpi = new PointF();
  private float m_zoom_factor = 1.0F;
  private PDF.Size maxSize = new PDF.Size(600, 800);
  private int pageCount = 0;
  private PDF pdfDoc = null;
  private CacheThread precacheThread = null;
  
  public PDFDocumentHelper(Context paramContext, String paramString)
  {
    this.mResources = paramContext.getResources();
    this.ic = new ImageCache(new ImageCache.ImageCacheParams(paramContext, paramString));
    new Thread(new Runnable()
    {
      public void run()
      {
        PDFDocumentHelper.this.ic.initDiskCache();
      }
    }).start();
    paramContext = (WindowManager)paramContext.getSystemService("window");
    if (paramContext == null) {
      return;
    }
    paramString = new DisplayMetrics();
    paramContext.getDefaultDisplay().getMetrics(paramString);
    this.m_sys_dpi.set(paramString.xdpi, paramString.ydpi);
    switch (paramContext.getDefaultDisplay().getPixelFormat())
    {
    case 2: 
    case 3: 
    case 5: 
    case 6: 
    default: 
      return;
    case 1: 
      this.m_bitmap_config = Bitmap.Config.ARGB_8888;
      return;
    case 8: 
      this.m_bitmap_config = Bitmap.Config.ALPHA_8;
      return;
    case 4: 
      this.m_bitmap_config = Bitmap.Config.RGB_565;
      return;
    }
    this.m_bitmap_config = Bitmap.Config.ARGB_4444;
  }
  
  private Bitmap _bitmapForPage(int paramInt, PDF.Size paramSize)
  {
    return _bitmapForPage(paramInt, paramSize, true);
  }
  
  private Bitmap _bitmapForPage(final int paramInt, PDF.Size paramSize, boolean paramBoolean)
  {
    if (paramInt < this.pageCount)
    {
      Object localObject1 = this.ic.getBitmapFromMemCache("" + paramInt);
      Object localObject2;
      if (localObject1 != null)
      {
        localObject2 = ((BitmapDrawable)localObject1).getBitmap();
        localObject1 = localObject2;
        if (localObject2 == null)
        {
          localObject1 = localObject2;
          if (this.ic.getCacheParams().diskCacheEnabled)
          {
            localObject2 = this.ic.getBitmapFromDiskCache("" + paramInt);
            localObject1 = localObject2;
            if (paramBoolean)
            {
              localObject1 = localObject2;
              if (this.lastRequestedPage != paramInt)
              {
                new Thread(new Runnable()
                {
                  public void run()
                  {
                    int j = paramInt;
                    int i;
                    if (paramInt > PDFDocumentHelper.this.lastRequestedPage) {
                      i = j + 1;
                    }
                    for (;;)
                    {
                      if (PDFDocumentHelper.this.ic.getBitmapFromMemCache("" + i) == null)
                      {
                        Bitmap localBitmap = PDFDocumentHelper.this.ic.getBitmapFromDiskCache("" + i);
                        if (localBitmap != null) {
                          PDFDocumentHelper.this.ic.addBitmapToMemoryCache("" + i, new BitmapDrawable(PDFDocumentHelper.this.mResources, localBitmap));
                        }
                      }
                      return;
                      i = j;
                      if (paramInt < PDFDocumentHelper.this.lastRequestedPage) {
                        i = j - 1;
                      }
                    }
                  }
                }).start();
                localObject1 = localObject2;
              }
            }
          }
        }
        if (localObject1 != null) {
          break label284;
        }
        localObject1 = renderBitmap(paramInt);
        if (localObject1 == null) {
          break label282;
        }
        localObject2 = sizeFrom(new PDF.Size(((Bitmap)localObject1).getWidth(), ((Bitmap)localObject1).getHeight()), paramSize);
        if (((PDF.Size)localObject2).width == ((Bitmap)localObject1).getWidth())
        {
          paramSize = (PDF.Size)localObject1;
          if (((PDF.Size)localObject2).height == ((Bitmap)localObject1).getHeight()) {}
        }
        else
        {
          paramSize = Bitmap.createScaledBitmap((Bitmap)localObject1, ((PDF.Size)localObject2).width, ((PDF.Size)localObject2).height, true);
        }
        this.ic.addBitmapToCache("" + paramInt, new BitmapDrawable(this.mResources, paramSize));
      }
      for (;;)
      {
        this.lastRequestedPage = paramInt;
        return paramSize;
        localObject2 = null;
        break;
        label282:
        return null;
        label284:
        localObject2 = new PDF.Size();
        this.pdfDoc.getPageSize(paramInt, (PDF.Size)localObject2);
        localObject2 = sizeFrom((PDF.Size)localObject2, paramSize);
        int i = ((PDF.Size)localObject2).width;
        int j = ((PDF.Size)localObject2).height;
        int k = Math.abs(((Bitmap)localObject1).getWidth() - i);
        int m = Math.abs(((Bitmap)localObject1).getHeight() - j);
        if (((((Bitmap)localObject1).getWidth() < i) || (((Bitmap)localObject1).getHeight() < j)) && ((k > 5) || (m > 5)))
        {
          paramSize = Bitmap.createScaledBitmap(renderBitmap(paramInt), ((PDF.Size)localObject2).width, ((PDF.Size)localObject2).height, true);
          this.ic.addBitmapToCache("" + paramInt, new BitmapDrawable(this.mResources, paramSize));
        }
        else if (k <= 5)
        {
          paramSize = (PDF.Size)localObject1;
          if (m <= 5) {}
        }
        else
        {
          paramSize = Bitmap.createScaledBitmap((Bitmap)localObject1, ((PDF.Size)localObject2).width, ((PDF.Size)localObject2).height, true);
        }
      }
    }
    return null;
  }
  
  private float calculateRealZoomFactor(int paramInt)
  {
    return calculateRealZoomFactor(paramInt, this.m_zoom_factor);
  }
  
  private float calculateRealZoomFactor(int paramInt, float paramFloat)
  {
    return calculateRealZoomFactor(paramInt, this.maxSize, paramFloat);
  }
  
  private float calculateRealZoomFactor(int paramInt, PDF.Size paramSize, float paramFloat)
  {
    if (paramFloat <= 0.0F)
    {
      if (this.pdfDoc == null) {
        return 1.0F;
      }
      PDF.Size localSize = new PDF.Size();
      this.pdfDoc.getPageSize(paramInt, localSize);
      if (this.m_Rotate != 0) {
        return (float)(paramSize.height * 1.0D / localSize.width);
      }
      return Math.min((float)(paramSize.height * 1.0D / localSize.height), (float)(paramSize.width * 1.0D / localSize.width));
    }
    return paramFloat;
  }
  
  private Bitmap renderBitmap(int paramInt)
  {
    if ((paramInt > this.pageCount - 1) || (paramInt < 0)) {}
    float f;
    PDF.Size localSize1;
    PDF.Size localSize2;
    do
    {
      return null;
      f = calculateRealZoomFactor(paramInt);
      localSize1 = new PDF.Size();
      this.pdfDoc.getPageSize(paramInt, localSize1);
      localSize2 = sizeFrom(localSize1, this.maxSize);
    } while ((localSize2.width == 0) || (localSize2.height == 0));
    int i = (int)(f * (localSize2.width / localSize1.width) * 1000.0F);
    return Bitmap.createBitmap(this.pdfDoc.renderPage(paramInt, i, 0, 0, 0, localSize2), localSize2.width, localSize2.height, this.m_bitmap_config);
  }
  
  public static PDF.Size sizeFrom(PDF.Size paramSize1, PDF.Size paramSize2)
  {
    int i = paramSize1.width;
    int j = paramSize1.height;
    if ((i > paramSize2.width) || (j > paramSize2.height))
    {
      f = Math.max(i / paramSize2.width, j / paramSize2.height);
      return new PDF.Size((int)(i / f), (int)(j / f));
    }
    float f = Math.min(paramSize2.width / i, paramSize2.height / j);
    return new PDF.Size((int)(i * f), (int)(j * f));
  }
  
  public Bitmap bitmapForPage(int paramInt)
  {
    if (paramInt < this.pageCount)
    {
      PDF.Size localSize = new PDF.Size();
      this.pdfDoc.getPageSize(paramInt, localSize);
      return _bitmapForPage(paramInt, sizeFrom(localSize, this.maxSize));
    }
    return null;
  }
  
  public Bitmap bitmapForPage(int paramInt, PDF.Size paramSize)
  {
    if (paramInt < this.pageCount)
    {
      PDF.Size localSize = new PDF.Size();
      this.pdfDoc.getPageSize(paramInt, localSize);
      return _bitmapForPage(paramInt, sizeFrom(localSize, paramSize));
    }
    return null;
  }
  
  public Bitmap bitmapForPage(int paramInt1, PDF.Size paramSize, int paramInt2, int paramInt3, float paramFloat)
  {
    return bitmapForPage(paramInt1, paramSize, null, paramInt2, paramInt3, paramFloat);
  }
  
  public Bitmap bitmapForPage(int paramInt1, PDF.Size paramSize1, PDF.Size paramSize2, int paramInt2, int paramInt3, float paramFloat)
  {
    if ((paramInt1 > this.pageCount - 1) || (paramInt1 < 0)) {
      return null;
    }
    float f = calculateRealZoomFactor(paramInt1, paramSize1, paramFloat);
    paramFloat = 1.0F;
    if (paramSize2 != null) {
      paramFloat = paramSize1.width / paramSize2.width;
    }
    int i = (int)(f * paramFloat * 1000.0F);
    return Bitmap.createBitmap(this.pdfDoc.renderPage(paramInt1, i, paramInt2, paramInt3, 0, paramSize1), paramSize1.width, paramSize1.height, this.m_bitmap_config);
  }
  
  public void cacheBitmap(int paramInt, PDF.Size paramSize)
  {
    Object localObject1 = this.ic.getBitmapFromMemCache("" + paramInt);
    if (localObject1 != null) {}
    for (localObject1 = ((BitmapDrawable)localObject1).getBitmap();; localObject1 = null)
    {
      Object localObject2 = localObject1;
      if (localObject1 == null)
      {
        localObject2 = localObject1;
        if (this.ic.getCacheParams().diskCacheEnabled) {
          localObject2 = this.ic.getBitmapFromDiskCache("" + paramInt);
        }
      }
      if (localObject2 == null) {
        _bitmapForPage(paramInt, paramSize, false);
      }
      return;
    }
  }
  
  public void clearCache()
  {
    this.ic.clearCache();
    System.gc();
  }
  
  public void clearMemoryCache()
  {
    this.ic.clearMemoryCache();
    System.gc();
  }
  
  public Bitmap.Config getBitmapConfig()
  {
    return this.m_bitmap_config;
  }
  
  public PDF.Size getMaxSize()
  {
    return this.maxSize;
  }
  
  public int getPageCount()
  {
    return this.pageCount;
  }
  
  public boolean openDocument(File paramFile)
  {
    if (paramFile.exists())
    {
      this.pdfDoc = new PDF(paramFile);
      if ((this.pdfDoc != null) && (PDF.nativeLibraryLoaded)) {}
    }
    else
    {
      return false;
    }
    this.pageCount = this.pdfDoc.getPageCount();
    return true;
  }
  
  /* Error */
  public boolean openDocument(String paramString)
  {
    // Byte code:
    //   0: new 311	java/io/File
    //   3: dup
    //   4: invokestatic 333	com/qbiki/seattleclouds/App:getAppProtectedStoragePath	()Ljava/lang/String;
    //   7: invokespecial 336	java/io/File:<init>	(Ljava/lang/String;)V
    //   10: astore_2
    //   11: aload_2
    //   12: invokevirtual 315	java/io/File:exists	()Z
    //   15: ifne +8 -> 23
    //   18: aload_2
    //   19: invokevirtual 339	java/io/File:mkdirs	()Z
    //   22: pop
    //   23: new 165	java/lang/StringBuilder
    //   26: dup
    //   27: invokespecial 166	java/lang/StringBuilder:<init>	()V
    //   30: aload_2
    //   31: invokevirtual 342	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   34: ldc_w 344
    //   37: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   40: aload_1
    //   41: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   44: invokevirtual 179	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   47: astore_3
    //   48: new 311	java/io/File
    //   51: dup
    //   52: aload_3
    //   53: invokespecial 336	java/io/File:<init>	(Ljava/lang/String;)V
    //   56: astore_2
    //   57: aload_2
    //   58: invokevirtual 315	java/io/File:exists	()Z
    //   61: ifne +84 -> 145
    //   64: aconst_null
    //   65: astore_2
    //   66: aconst_null
    //   67: astore 4
    //   69: new 311	java/io/File
    //   72: dup
    //   73: aload_3
    //   74: invokespecial 336	java/io/File:<init>	(Ljava/lang/String;)V
    //   77: astore_3
    //   78: aload_1
    //   79: invokestatic 348	com/qbiki/seattleclouds/App:getResourceStream	(Ljava/lang/String;)Ljava/io/InputStream;
    //   82: astore_1
    //   83: aload_1
    //   84: astore_2
    //   85: new 350	java/io/FileOutputStream
    //   88: dup
    //   89: aload_3
    //   90: invokespecial 351	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   93: astore 5
    //   95: aload_1
    //   96: aload 5
    //   98: invokestatic 357	org/apache/commons/io/IOUtils:copy	(Ljava/io/InputStream;Ljava/io/OutputStream;)I
    //   101: pop
    //   102: aload_3
    //   103: astore_1
    //   104: aload_0
    //   105: aload_1
    //   106: invokevirtual 359	com/qbiki/modules/pdfreader/PDFDocumentHelper:openDocument	(Ljava/io/File;)Z
    //   109: ireturn
    //   110: astore_1
    //   111: aload_2
    //   112: astore_1
    //   113: aload 4
    //   115: astore_2
    //   116: aload_1
    //   117: ifnull +7 -> 124
    //   120: aload_1
    //   121: invokevirtual 364	java/io/InputStream:close	()V
    //   124: aload_3
    //   125: astore_1
    //   126: aload_2
    //   127: ifnull -23 -> 104
    //   130: aload_2
    //   131: invokevirtual 365	java/io/FileOutputStream:close	()V
    //   134: aload_3
    //   135: astore_1
    //   136: goto -32 -> 104
    //   139: astore_1
    //   140: aload_3
    //   141: astore_1
    //   142: goto -38 -> 104
    //   145: new 367	java/io/FileInputStream
    //   148: dup
    //   149: aload_2
    //   150: invokespecial 368	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   153: astore_3
    //   154: aload_2
    //   155: astore_1
    //   156: aload_3
    //   157: ifnull -53 -> 104
    //   160: aload_3
    //   161: invokevirtual 369	java/io/FileInputStream:close	()V
    //   164: aload_2
    //   165: astore_1
    //   166: goto -62 -> 104
    //   169: astore_1
    //   170: aload_2
    //   171: astore_1
    //   172: goto -68 -> 104
    //   175: astore_1
    //   176: aload_2
    //   177: astore_1
    //   178: iconst_0
    //   179: ifeq -75 -> 104
    //   182: new 371	java/lang/NullPointerException
    //   185: dup
    //   186: invokespecial 372	java/lang/NullPointerException:<init>	()V
    //   189: athrow
    //   190: astore_1
    //   191: aload_2
    //   192: astore_1
    //   193: goto -89 -> 104
    //   196: astore_2
    //   197: iconst_0
    //   198: ifeq +11 -> 209
    //   201: new 371	java/lang/NullPointerException
    //   204: dup
    //   205: invokespecial 372	java/lang/NullPointerException:<init>	()V
    //   208: athrow
    //   209: aload_2
    //   210: athrow
    //   211: astore_1
    //   212: goto -88 -> 124
    //   215: astore_1
    //   216: goto -7 -> 209
    //   219: astore_2
    //   220: aload 5
    //   222: astore_2
    //   223: goto -107 -> 116
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	226	0	this	PDFDocumentHelper
    //   0	226	1	paramString	String
    //   10	182	2	localObject1	Object
    //   196	14	2	localObject2	Object
    //   219	1	2	localException	Exception
    //   222	1	2	localObject3	Object
    //   47	114	3	localObject4	Object
    //   67	47	4	localObject5	Object
    //   93	128	5	localFileOutputStream	java.io.FileOutputStream
    // Exception table:
    //   from	to	target	type
    //   78	83	110	java/lang/Exception
    //   85	95	110	java/lang/Exception
    //   130	134	139	java/io/IOException
    //   160	164	169	java/io/IOException
    //   145	154	175	java/lang/Exception
    //   182	190	190	java/io/IOException
    //   145	154	196	finally
    //   120	124	211	java/io/IOException
    //   201	209	215	java/io/IOException
    //   95	102	219	java/lang/Exception
  }
  
  public void precacheInBackground(PDF.Size paramSize)
  {
    if (this.precacheThread == null)
    {
      this.precacheThread = new CacheThread(paramSize);
      this.precacheThread.start();
    }
  }
  
  public void setMaxSize(PDF.Size paramSize)
  {
    this.maxSize = paramSize;
    if (this.precacheThread != null) {
      this.precacheThread.setSize(paramSize);
    }
  }
  
  public PDF.Size sizeForPage(int paramInt)
  {
    PDF.Size localSize = new PDF.Size();
    this.pdfDoc.getPageSize(paramInt, localSize);
    return localSize;
  }
  
  public void stopPrecacheInBackground()
  {
    if (this.precacheThread != null)
    {
      this.precacheThread.cancel();
      this.precacheThread = null;
    }
  }
  
  public class CacheThread
    extends Thread
  {
    private volatile boolean canceled = false;
    private PDF.Size size = new PDF.Size(600, 800);
    
    public CacheThread(PDF.Size paramSize)
    {
      this.size = paramSize;
    }
    
    public void cancel()
    {
      this.canceled = true;
    }
    
    public boolean isCanceled()
    {
      return this.canceled;
    }
    
    public void run()
    {
      int i = PDFDocumentHelper.this.cachedPages;
      for (;;)
      {
        if ((i >= PDFDocumentHelper.this.pageCount) || (isCanceled())) {
          return;
        }
        PDFDocumentHelper.this.cacheBitmap(i, this.size);
        i += 1;
        PDFDocumentHelper.access$208(PDFDocumentHelper.this);
      }
    }
    
    public void setSize(PDF.Size paramSize)
    {
      this.size = paramSize;
    }
  }
}
