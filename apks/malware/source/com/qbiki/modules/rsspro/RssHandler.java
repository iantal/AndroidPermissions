package com.qbiki.modules.rsspro;

import android.text.TextUtils;
import android.util.Log;
import com.qbiki.modules.favorites.Favorites;
import com.qbiki.util.FeedParserListener;
import com.qbiki.util.StringUtil;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class RssHandler
  implements FeedParserListener
{
  private int MAX_FEEDS_ALLOWED = 100;
  private String TAG = RssHandler.class.toString();
  private String feedURL = "";
  private int feedsParsed = 0;
  private ArrayList<JSONObject> jsonObjList = new ArrayList();
  private JSONObject jsonObject = new JSONObject();
  private FeedInfo rssInfo = new FeedInfo();
  
  public RssHandler() {}
  
  public void feedParserDidFailWithError(Error paramError)
  {
    Log.e(this.TAG, paramError.toString());
  }
  
  public void feedParserDidFinish()
  {
    try
    {
      this.jsonObject = new JSONObject();
      String str1 = "";
      String str2 = "";
      String str4 = "";
      String str3 = "";
      if (this.rssInfo != null)
      {
        if (this.rssInfo.getTitle() != null) {
          break label151;
        }
        str1 = "";
        if (this.rssInfo.getLink() != null) {
          break label162;
        }
        str2 = "";
        label57:
        if (this.rssInfo.getSummary() != null) {
          break label173;
        }
        str4 = "";
        label71:
        if (this.rssInfo.getBaseUrl() != null) {
          break label185;
        }
      }
      label151:
      label162:
      label173:
      label185:
      for (str3 = "";; str3 = this.rssInfo.getBaseUrl())
      {
        this.jsonObject.put("title", str1);
        this.jsonObject.put("link", str2);
        this.jsonObject.put("description", str4);
        this.jsonObject.put("baseURL", str3);
        this.jsonObject.put("items", new JSONArray(this.jsonObjList));
        return;
        str1 = this.rssInfo.getTitle();
        break;
        str2 = this.rssInfo.getLink();
        break label57;
        str4 = this.rssInfo.getSummary();
        break label71;
      }
      return;
    }
    catch (JSONException localJSONException)
    {
      Log.e(this.TAG, "JSON Initialization exception");
    }
  }
  
  public void feedParserDidParseFeedInfo(FeedInfo paramFeedInfo)
  {
    this.rssInfo = paramFeedInfo;
  }
  
  public void feedParserDidParseFeedItem(FeedItem paramFeedItem)
  {
    if ((paramFeedItem != null) && (this.feedsParsed < this.MAX_FEEDS_ALLOWED))
    {
      JSONObject localJSONObject = new JSONObject();
      try
      {
        Object localObject2 = TextUtils.htmlEncode(paramFeedItem.getTitle());
        Object localObject1 = paramFeedItem.getUrl().toString();
        String str2 = paramFeedItem.getIdentifier();
        localJSONObject.put("title", localObject2);
        localJSONObject.put("content", paramFeedItem.getEncodedContent());
        localJSONObject.put("description", TextUtils.htmlEncode(paramFeedItem.getDescription()));
        localJSONObject.put("link", localObject1);
        localJSONObject.put("baseURL", paramFeedItem.getBaseURL());
        int i = this.feedsParsed;
        this.feedsParsed = (i + 1);
        localJSONObject.put("itemid", new Integer(i).toString());
        localJSONObject.put("date", paramFeedItem.getPubDate());
        localJSONObject.put("identifier", str2);
        localObject1 = "rssfeed-item.png";
        String str1 = returnFirstBigImagePath(paramFeedItem.getEncodedContent());
        if ((paramFeedItem.getImageLink() != null) && (!paramFeedItem.getImageLink().equalsIgnoreCase("")))
        {
          paramFeedItem = paramFeedItem.getImageLink();
          localJSONObject.put("itemimg", paramFeedItem);
          if (str2.length() <= 0) {
            break label419;
          }
          localObject1 = Favorites.getInstance(null);
          str1 = StringUtil.md5(this.feedURL + str2);
          paramFeedItem = "favorite://add|RSSItem|" + URLEncoder.encode(this.feedURL) + "|" + URLEncoder.encode(str2) + "|" + URLEncoder.encode((String)localObject2) + "|" + URLEncoder.encode(paramFeedItem);
          localObject2 = new StringBuilder().append("<img id='").append(str1).append("' onclick=\"document.location.href = '").append(paramFeedItem).append("'\" src='");
          if (!((Favorites)localObject1).containsID(str1)) {
            break label412;
          }
          paramFeedItem = Favorites.getFavoriteOnBase64Image();
          label354:
          localJSONObject.put("favorite", paramFeedItem + "' />");
        }
        for (;;)
        {
          this.jsonObjList.add(localJSONObject);
          return;
          paramFeedItem = (FeedItem)localObject1;
          if (str1 == null) {
            break;
          }
          paramFeedItem = (FeedItem)localObject1;
          if (str1.equalsIgnoreCase("")) {
            break;
          }
          paramFeedItem = str1;
          break;
          label412:
          paramFeedItem = Favorites.getFavoriteOffBase64Image();
          break label354;
          label419:
          localJSONObject.put("favorite", "");
        }
        return;
      }
      catch (JSONException paramFeedItem)
      {
        Log.e(this.TAG, "Error creating JSONObject");
      }
    }
  }
  
  public void feedParserDidStart() {}
  
  public JSONObject getRssFeedsInJsonFormat(String paramString)
  {
    this.feedURL = paramString;
    new RssFeedsPullParser(this, paramString).parse();
    return this.jsonObject;
  }
  
  public String returnFirstBigImagePath(String paramString)
  {
    String str1 = "";
    Elements localElements = Jsoup.parse(String.format("<html><head></head><body>%s</body></html>", new Object[] { paramString })).getElementsByTag("img");
    if ((localElements == null) || (localElements.size() == 0)) {
      str1 = "";
    }
    for (;;)
    {
      return str1;
      if (localElements.size() == 1) {
        return localElements.get(0).attributes().get("src");
      }
      Iterator localIterator = localElements.iterator();
      label79:
      String str2;
      String str3;
      do
      {
        paramString = str1;
        if (!localIterator.hasNext()) {
          break;
        }
        paramString = (Element)localIterator.next();
        str2 = paramString.attr("width");
        str3 = paramString.attr("height");
      } while ((str2 == null) || (str3 == null));
      try
      {
        j = Integer.parseInt(str2.trim());
        i = Integer.parseInt(str3.trim());
        if ((j <= 50) || (i <= 50)) {
          break label79;
        }
        paramString = paramString.attributes().get("src");
        str1 = paramString;
        if (!paramString.equalsIgnoreCase("")) {
          continue;
        }
        return localElements.get(0).attr("src");
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int j = 0;
          int i = 0;
        }
      }
    }
  }
}
