package com.qbiki.modules.product.order;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCListFragment;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class POLocationsAndCategoriesListFragment
  extends SCListFragment
{
  private static final int MODE_CATEGORIES_LIST = 2;
  public static final String MODE_KEY = "MODE_KEY";
  private static final int MODE_LOCATIONS_LIST = 1;
  private static final int MODE_UNKNOWN = 0;
  public static final String PADE_ID_KEY = "PAGE_ID_KEY";
  public static final String PICKUP_ADDRESS_KEY = "PICKUP_ADDRESS_KEY";
  private List<Map<String, String>> mCategoriesNameList = new ArrayList();
  private int mCurrentMode = 0;
  private List<Map<String, String>> mLocationsList = new ArrayList();
  private String mPageID;
  private String mPickUpAddress = "";
  private POContext mProducts;
  
  public POLocationsAndCategoriesListFragment() {}
  
  private void initCategoriesList(POContext paramPOContext)
  {
    this.mCategoriesNameList = paramPOContext.getHashMapCategories(this.mPageID);
    setListAdapter(new SimpleAdapter(getActivity(), this.mCategoriesNameList, 17367044, new String[] { "category", "productCount" }, new int[] { 16908308, 16908309 }));
    setEmptyText(getString(2131362331));
  }
  
  private void initLocationsList(POContext paramPOContext)
  {
    this.mLocationsList = paramPOContext.getHashMapLocations(this.mPageID);
    paramPOContext = new SimpleAdapter(getActivity(), this.mLocationsList, 17367044, new String[] { "city", "locationDetail" }, new int[] { 16908308, 16908309 });
    setEmptyText(getString(2131362330));
    setListAdapter(paramPOContext);
  }
  
  private void showCompanyInfo()
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    View localView = getActivity().getLayoutInflater().inflate(2130903189, null);
    TextView localTextView1 = (TextView)localView.findViewById(2131100130);
    TextView localTextView2 = (TextView)localView.findViewById(2131100131);
    POConfig localPOConfig = this.mProducts.getConfig(this.mPageID);
    if (localPOConfig == null) {
      return;
    }
    localTextView1.setText(localPOConfig.getGeneral().getCompanyName());
    localTextView2.setText(localPOConfig.getGeneral().getBrief());
    localBuilder.setView(localView).setPositiveButton(2131361920, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.create().show();
  }
  
  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    paramBundle = getArguments();
    if (paramBundle != null)
    {
      this.mPageID = paramBundle.getString("PAGE_ID_KEY");
      this.mCurrentMode = paramBundle.getInt("MODE_KEY");
      this.mPickUpAddress = paramBundle.getString("PICKUP_ADDRESS_KEY");
    }
    this.mProducts = POContext.getInstance();
    this.mProducts.load(this.mPageID);
    if (this.mCurrentMode == 0)
    {
      if (this.mProducts.getHashMapLocations(this.mPageID).size() != 1) {
        break label157;
      }
      this.mCurrentMode = 2;
      this.mPickUpAddress = ((String)((Map)this.mProducts.getHashMapLocations(this.mPageID).get(0)).get("locationDetail"));
    }
    for (;;)
    {
      switch (this.mCurrentMode)
      {
      default: 
        return;
        label157:
        this.mCurrentMode = 1;
      }
    }
    initCategoriesList(this.mProducts);
    return;
    initLocationsList(this.mProducts);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558430, paramMenu);
  }
  
  public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong)
  {
    super.onListItemClick(paramListView, paramView, paramInt, paramLong);
    switch (this.mCurrentMode)
    {
    default: 
      return;
    case 1: 
      showCategories((String)((Map)this.mLocationsList.get(paramInt)).get("locationDetail"));
      return;
    }
    showProducts(paramInt);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    showCompanyInfo();
    return true;
  }
  
  void showCategories(String paramString)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("PAGE_ID_KEY", this.mPageID);
    localBundle.putString("PICKUP_ADDRESS_KEY", paramString);
    localBundle.putInt("MODE_KEY", 2);
    App.showPage(new FragmentInfo(POLocationsAndCategoriesListFragment.class.getName(), localBundle), this);
  }
  
  void showProducts(int paramInt)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("PAGE_ID_KEY", this.mPageID);
    localBundle.putInt("INDEX_KEY", paramInt);
    localBundle.putString("ADDRESS_KEY", this.mPickUpAddress);
    App.showPage(new FragmentInfo(POProductsListFragment.class.getName(), localBundle), this);
  }
}
