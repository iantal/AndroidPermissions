package com.qbiki.modules.product.order;

import android.app.Activity;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.app.Fragment;
import android.util.Log;
import com.qbiki.modules.order.OrderConfigInfo;
import com.qbiki.modules.order.OrderFragment;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.Page;
import com.qbiki.util.DataUtil;
import com.qbiki.util.MoneyFormatUtil;
import com.qbiki.util.ToastUtils;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class POContext
{
  private static String TAG = POContext.class.getSimpleName();
  private static POContext mPOProducts;
  private boolean DEBUG = false;
  private HashMap<String, POConfig> products = new HashMap();
  
  private POContext() {}
  
  private HashMap<String, String> createCategory(String paramString1, String paramString2, String paramString3, int paramInt)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put(paramString1, paramString2);
    localHashMap.put(paramString3, "Products count:" + paramInt);
    return localHashMap;
  }
  
  private HashMap<String, String> createLocation(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put(paramString1, paramString2);
    localHashMap.put(paramString3, paramString4);
    return localHashMap;
  }
  
  private HashMap<String, String> createProduct(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, double paramDouble, String paramString6)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put(paramString1, paramString2);
    localHashMap.put(paramString3, paramString4);
    localHashMap.put(paramString5, MoneyFormatUtil.getFormattedCurrencyString(paramString6, paramDouble));
    return localHashMap;
  }
  
  public static POContext getInstance()
  {
    if (mPOProducts == null) {
      mPOProducts = new POContext();
    }
    return mPOProducts;
  }
  
  public POConfig getConfig(String paramString)
  {
    if (this.products != null) {
      return (POConfig)this.products.get(paramString);
    }
    return null;
  }
  
  public String getCurrencyCode()
  {
    Page localPage = App.getFirstOrderPage();
    String str = "USD";
    if (localPage != null) {
      str = localPage.getOrderConfing().getCurrencyCode();
    }
    return str;
  }
  
  public List<Map<String, String>> getHashMapCategories(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    if (this.products == null) {}
    for (;;)
    {
      return localArrayList;
      paramString = ((POConfig)this.products.get(paramString)).getCategories();
      if (paramString != null)
      {
        paramString = paramString.iterator();
        while (paramString.hasNext())
        {
          POCategory localPOCategory = (POCategory)paramString.next();
          if (this.DEBUG) {
            Log.d(TAG, "Category:" + localPOCategory.getCategoryName());
          }
          localArrayList.add(createCategory("category", localPOCategory.getCategoryName(), "productCount", localPOCategory.getProducts().size()));
        }
      }
    }
  }
  
  public List<Map<String, String>> getHashMapLocations(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    if (this.products == null) {}
    for (;;)
    {
      return localArrayList;
      paramString = ((POConfig)this.products.get(paramString)).getLocations();
      if (paramString != null)
      {
        paramString = paramString.iterator();
        while (paramString.hasNext())
        {
          POLocation localPOLocation = (POLocation)paramString.next();
          if (this.DEBUG) {
            Log.d(TAG, "Location Detail:" + localPOLocation.getAddressDetail());
          }
          localArrayList.add(createLocation("city", localPOLocation.getCity(), "locationDetail", localPOLocation.getAddressDetail()));
        }
      }
    }
  }
  
  public List<Map<String, String>> getHashMapProducts(String paramString, int paramInt)
  {
    ArrayList localArrayList = new ArrayList();
    if (this.products == null) {}
    for (;;)
    {
      return localArrayList;
      paramString = ((POConfig)this.products.get(paramString)).getCategories();
      if ((paramString != null) && (paramInt <= paramString.size() - 1) && (paramInt >= 0))
      {
        Object localObject = ((POCategory)paramString.get(paramInt)).getProducts();
        paramString = getCurrencyCode();
        localObject = ((ArrayList)localObject).iterator();
        while (((Iterator)localObject).hasNext())
        {
          POProduct localPOProduct = (POProduct)((Iterator)localObject).next();
          if (this.DEBUG) {
            Log.d(TAG, "Product:" + localPOProduct.getName());
          }
          String str = "Options: " + localPOProduct.getOptions().size() + "; Sizes: " + localPOProduct.getSizes().size();
          localArrayList.add(createProduct("product", localPOProduct.getName(), "product_details", str, "price", localPOProduct.getPrice(), paramString));
        }
      }
    }
  }
  
  public POProduct getProduct(String paramString, int paramInt1, int paramInt2)
  {
    if (this.products == null) {
      return null;
    }
    paramString = ((POConfig)this.products.get(paramString)).getCategories();
    if ((paramString == null) || (paramInt1 > paramString.size() - 1) || (paramInt1 < 0)) {
      return null;
    }
    paramString = ((POCategory)paramString.get(paramInt1)).getProducts();
    if ((paramString == null) || (paramInt2 > paramString.size() - 1) || (paramInt2 < 0)) {
      return null;
    }
    return (POProduct)paramString.get(paramInt2);
  }
  
  public void load(String paramString)
  {
    Object localObject = App.getResourceStream(paramString + ".json");
    try
    {
      localObject = new JSONObject(DataUtil.readString((InputStream)localObject));
      this.products.put(paramString, POConfig.getPOConfigFromJSON((JSONObject)localObject));
      return;
    }
    catch (IllegalArgumentException paramString)
    {
      Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
      return;
    }
    catch (IOException paramString)
    {
      Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
      return;
    }
    catch (JSONException paramString)
    {
      Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
      return;
    }
    catch (Exception paramString)
    {
      Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
    }
  }
  
  public void openOrderPage(Activity paramActivity, Fragment paramFragment, String paramString)
  {
    Object localObject = App.getFirstOrderPage();
    if (localObject == null)
    {
      ToastUtils.showToast(paramActivity, paramActivity.getString(2131362329), true);
      return;
    }
    paramActivity = new Bundle();
    paramActivity.putString("pageId", ((Page)localObject).getId());
    localObject = ((Page)localObject).getOrderConfing();
    ((OrderConfigInfo)localObject).setPickUpAddress(paramString);
    paramActivity.putParcelable("ORDER_INFO", (Parcelable)localObject);
    App.showPage(new FragmentInfo(OrderFragment.class.getName(), paramActivity), paramFragment);
  }
}
