package com.qbiki.modules.imagelist;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ContentResolver;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.provider.MediaStore.Images.Media;
import android.support.v4.app.FragmentActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.seattleclouds.mosaic.ImgMetadata;
import com.qbiki.seattleclouds.mosaic.MosaicImageFragment;
import com.qbiki.util.ImageCache;
import com.qbiki.util.ImageUtil;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class ImageListFragment
  extends SCFragment
{
  private static final int CAMERA_REQUEST = 2888;
  private static final int GALLERY_REQUEST = 1888;
  public static final String IMAGE_LIST_KEY = "imageListKey";
  private String currentPicturePath = "";
  private String emailToSend = "";
  private View fView = null;
  private ImageCache imageCache = new ImageCache();
  private ArrayList<ImageInfo> imageList = new ArrayList();
  private ImageListAdapter imageListAdapter = null;
  private String pageID = "";
  private boolean pickOnOpen = false;
  
  public ImageListFragment() {}
  
  private Bitmap loadImageFromNetwork(String paramString)
  {
    localObject3 = this.imageCache.get(paramString);
    Object localObject1 = localObject3;
    if (localObject3 == null) {}
    try
    {
      Bitmap localBitmap = ImageUtil.decodeExternalBitmap(paramString, 100);
      localObject1 = localBitmap;
      localObject3 = localBitmap;
      if (Math.max(localBitmap.getWidth(), localBitmap.getHeight()) > 100)
      {
        localObject3 = localBitmap;
        localObject1 = ImageUtil.getScaledBitmap(localBitmap, 100, 100, true);
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Object localObject2 = localObject3;
      }
    }
    this.imageCache.put(paramString, (Bitmap)localObject1);
    return localObject1;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  private void openCameraPicker()
  {
    if (!App.isExternalStorageWritable())
    {
      Toast.makeText(getActivity(), 2131362181, 0).show();
      return;
    }
    Intent localIntent = new Intent("android.media.action.IMAGE_CAPTURE");
    Object localObject = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss").format(new Date());
    localObject = (String)localObject + ".jpg";
    String str = this.pageID.replace(".html", "");
    str = App.getAppExternalStoragePath() + "/" + str;
    this.currentPicturePath = (str + "/" + (String)localObject);
    localObject = new File(str);
    if (!((File)localObject).exists()) {
      ((File)localObject).mkdirs();
    }
    localIntent.putExtra("output", Uri.fromFile(new File(this.currentPicturePath)));
    startActivityForResult(localIntent, 2888);
  }
  
  private void openGalleryPicker()
  {
    startActivityForResult(new Intent("android.intent.action.PICK", MediaStore.Images.Media.EXTERNAL_CONTENT_URI), 1888);
  }
  
  private void readImageList()
  {
    SharedPreferences localSharedPreferences = getActivity().getSharedPreferences(this.pageID, 0);
    Object localObject = localSharedPreferences.getString("imageListKey", "");
    if (((String)localObject).length() > 0)
    {
      localObject = ((String)localObject).split("\\|");
      int i = 0;
      while (i < localObject.length)
      {
        String str1 = localObject[i];
        File localFile = new File(str1);
        String str2 = localSharedPreferences.getString(str1, localFile.getName());
        if (localFile.exists()) {
          this.imageList.add(new ImageInfo(str2, str1));
        }
        i += 1;
      }
    }
  }
  
  private void saveImageList()
  {
    Object localObject = "";
    SharedPreferences.Editor localEditor = getActivity().getSharedPreferences(this.pageID, 0).edit();
    int i = 0;
    while (i < this.imageList.size())
    {
      String str2 = ((ImageInfo)this.imageList.get(i)).imagePath;
      String str1 = (String)localObject + str2;
      localEditor.putString(str2, ((ImageInfo)this.imageList.get(i)).imageName);
      localObject = str1;
      if (i < this.imageList.size() - 1) {
        localObject = str1 + "|";
      }
      i += 1;
    }
    localEditor.putString("imageListKey", (String)localObject);
    localEditor.commit();
  }
  
  private void sendAll()
  {
    Intent localIntent = new Intent("android.intent.action.SEND_MULTIPLE");
    localIntent.setType("image/*");
    localIntent.putExtra("android.intent.extra.EMAIL", new String[] { this.emailToSend });
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < this.imageList.size())
    {
      File localFile = new File(((ImageInfo)this.imageList.get(i)).imagePath);
      if (localFile.exists()) {
        localArrayList.add(Uri.fromFile(localFile));
      }
      i += 1;
    }
    localIntent.putParcelableArrayListExtra("android.intent.extra.STREAM", localArrayList);
    startActivity(Intent.createChooser(localIntent, null));
  }
  
  private void showDeleteConfirmDialog(final int paramInt)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    localBuilder.setMessage("Are you sure you want to delete this item?").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        Object localObject = (ImageListFragment.ImageInfo)ImageListFragment.this.imageList.get(paramInt);
        paramAnonymousDialogInterface = App.getAppProtectedStoragePath();
        localObject = new File(((ImageListFragment.ImageInfo)localObject).imagePath);
        if (((File)localObject).getAbsolutePath().contains(paramAnonymousDialogInterface))
        {
          if (((File)localObject).delete())
          {
            ImageListFragment.this.imageList.remove(paramInt);
            ImageListFragment.this.imageListAdapter.notifyDataSetChanged();
            ImageListFragment.this.saveImageList();
            return;
          }
          Toast.makeText(ImageListFragment.this.getActivity(), 2131362180, 0).show();
          return;
        }
        ImageListFragment.this.imageList.remove(paramInt);
        ImageListFragment.this.imageListAdapter.notifyDataSetChanged();
        ImageListFragment.this.saveImageList();
      }
    }).setNegativeButton("No", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.create().show();
  }
  
  protected void init()
  {
    readImageList();
    ListView localListView = (ListView)this.fView.findViewById(2131099982);
    this.imageListAdapter = new ImageListAdapter(null);
    localListView.setAdapter(this.imageListAdapter);
    localListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (ImageListFragment.this.imageList.size() > 0)
        {
          ImageListFragment.this.showDeleteConfirmDialog(paramAnonymousInt);
          return false;
        }
        return true;
      }
    });
    localListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = new ArrayList();
        int i = 0;
        while (i < ImageListFragment.this.imageList.size())
        {
          paramAnonymousView = (ImageListFragment.ImageInfo)ImageListFragment.this.imageList.get(i);
          ImgMetadata localImgMetadata = new ImgMetadata();
          localImgMetadata.title = paramAnonymousView.imageName;
          localImgMetadata.filename = paramAnonymousView.imagePath;
          localImgMetadata.caption = "";
          paramAnonymousAdapterView.add(localImgMetadata);
          i += 1;
        }
        paramAnonymousView = new Bundle();
        paramAnonymousView.putParcelableArrayList("mosaicimages", paramAnonymousAdapterView);
        paramAnonymousView.putInt("selectedIndex", paramAnonymousInt);
        paramAnonymousView.putString("EMAIL_TO_SEND", ImageListFragment.this.emailToSend);
        App.showPage(new FragmentInfo(MosaicImageFragment.class.getName(), paramAnonymousView), ImageListFragment.this);
      }
    });
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    this.pickOnOpen = false;
    switch (paramInt1)
    {
    }
    for (;;)
    {
      super.onActivityResult(paramInt1, paramInt2, paramIntent);
      return;
      if (paramInt2 == -1)
      {
        Object localObject2 = paramIntent.getData();
        Object localObject1 = new String[1];
        localObject1[0] = "_data";
        localObject2 = getActivity().getContentResolver().query((Uri)localObject2, (String[])localObject1, null, null, null);
        ((Cursor)localObject2).moveToFirst();
        localObject1 = ((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex(localObject1[0]));
        ((Cursor)localObject2).close();
        localObject2 = new File((String)localObject1);
        if (((File)localObject2).exists())
        {
          localObject2 = ((File)localObject2).getName();
          this.imageList.add(0, new ImageInfo((String)localObject2, (String)localObject1));
          saveImageList();
          if (this.imageListAdapter != null) {
            this.imageListAdapter.notifyDataSetChanged();
          }
        }
        else
        {
          Toast.makeText(getActivity(), 2131362182, 0).show();
          continue;
          if (paramInt2 == -1)
          {
            this.imageList.add(0, new ImageInfo(new File(this.currentPicturePath).getName(), this.currentPicturePath));
            saveImageList();
            if (this.imageListAdapter != null) {
              this.imageListAdapter.notifyDataSetChanged();
            }
          }
        }
      }
    }
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558417, paramMenu);
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903149, paramViewGroup, false);
    paramLayoutInflater = getArguments();
    if (paramLayoutInflater != null)
    {
      paramViewGroup = paramLayoutInflater.getString("EMAIL_TO_SEND");
      if (paramViewGroup != null) {
        this.emailToSend = paramViewGroup;
      }
      paramViewGroup = paramLayoutInflater.getString("PAGE_ID");
      if (paramViewGroup != null) {
        this.pageID = paramViewGroup;
      }
      this.pickOnOpen = paramLayoutInflater.getBoolean("PICTURE_ON_OPEN");
    }
    if ((paramBundle != null) && (paramBundle.containsKey("pickOnOpen"))) {
      this.pickOnOpen = paramBundle.getBoolean("pickOnOpen");
    }
    init();
    return this.fView;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100297: 
      openGalleryPicker();
      return true;
    case 2131100296: 
      openCameraPicker();
      return true;
    }
    sendAll();
    return true;
  }
  
  public void onResume()
  {
    super.onResume();
    new Handler().postDelayed(new Runnable()
    {
      public void run()
      {
        if (ImageListFragment.this.pickOnOpen)
        {
          ImageListFragment.access$402(ImageListFragment.this, false);
          ImageListFragment.this.openCameraPicker();
        }
      }
    }, 1000L);
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    paramBundle.putBoolean("pickOnOpen", this.pickOnOpen);
  }
  
  static class CellHolder
  {
    ImageView image;
    TextView title;
    
    CellHolder() {}
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    private ImageView imageView;
    public int position = -1;
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return ImageListFragment.this.loadImageFromNetwork(paramVarArgs[0]);
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      if ((this.imageView != null) && (this.imageView.getTag() != null) && (this.position == ((Integer)this.imageView.getTag()).intValue())) {
        this.imageView.setImageBitmap(paramBitmap);
      }
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
  
  private class ImageInfo
  {
    public String imageName = "";
    public String imagePath = "";
    
    public ImageInfo(String paramString1, String paramString2)
    {
      this.imageName = paramString1;
      this.imagePath = paramString2;
    }
  }
  
  private class ImageListAdapter
    extends BaseAdapter
  {
    private ImageListAdapter() {}
    
    public int getCount()
    {
      return ImageListFragment.this.imageList.size();
    }
    
    public Object getItem(int paramInt)
    {
      return ImageListFragment.this.imageList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      Object localObject1 = paramView;
      if (localObject1 == null)
      {
        paramViewGroup = ImageListFragment.this.getActivity().getLayoutInflater().inflate(2130903150, paramViewGroup, false);
        paramView = new ImageListFragment.CellHolder();
        paramView.image = ((ImageView)paramViewGroup.findViewById(2131099733));
        paramView.title = ((TextView)paramViewGroup.findViewById(2131099734));
        paramViewGroup.setTag(paramView);
      }
      for (;;)
      {
        Object localObject2 = (ImageListFragment.ImageInfo)ImageListFragment.this.imageList.get(paramInt);
        localObject1 = ((ImageListFragment.ImageInfo)localObject2).imagePath;
        paramView.image.setImageBitmap(null);
        paramView.image.setTag(Integer.valueOf(paramInt));
        paramView.title.setText(((ImageListFragment.ImageInfo)localObject2).imageName);
        if (ImageListFragment.this.imageCache.get((String)localObject1) != null) {
          break;
        }
        localObject2 = new ImageListFragment.DownloadImageTask(ImageListFragment.this, null);
        ((ImageListFragment.DownloadImageTask)localObject2).position = paramInt;
        ((ImageListFragment.DownloadImageTask)localObject2).setImageView(paramView.image);
        ((ImageListFragment.DownloadImageTask)localObject2).execute(new String[] { localObject1 });
        return paramViewGroup;
        paramView = (ImageListFragment.CellHolder)((View)localObject1).getTag();
        paramViewGroup = (ViewGroup)localObject1;
      }
      paramView.image.setImageBitmap(ImageListFragment.this.imageCache.get((String)localObject1));
      return paramViewGroup;
    }
  }
}
