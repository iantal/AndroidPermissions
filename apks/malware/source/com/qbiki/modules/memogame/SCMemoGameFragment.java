package com.qbiki.modules.memogame;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StyleUtil;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

public class SCMemoGameFragment
  extends SCFragment
{
  private View fView = null;
  private Bitmap hidden;
  private boolean inGame = false;
  private int layoutCount = 0;
  ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener()
  {
    public void onGlobalLayout()
    {
      if ((SCMemoGameFragment.this.getActivity() != null) && (SCMemoGameFragment.this.getActivity().getResources().getConfiguration().orientation == 1)) {
        SCMemoGameFragment.this.createMemoPieces();
      }
    }
  };
  private int maxC = 0;
  private int maxR = 0;
  private RelativeLayout memoContainer;
  private ArrayList<MemoPiece> memoPieces = new ArrayList();
  private boolean memoPiecesCreated = false;
  private int openedPiece = -1;
  private int pieceSize = 70;
  private boolean previewing = false;
  private ArrayList<String> resources = new ArrayList();
  private TextView rotateToPortraitTextView = null;
  private boolean showing = false;
  private Button startButton;
  private Bundle style;
  
  public SCMemoGameFragment() {}
  
  private void checkGameComplete()
  {
    int i = 0;
    while (i < this.memoPieces.size())
    {
      if (!((MemoPiece)this.memoPieces.get(i)).isOpened()) {
        return;
      }
      i += 1;
    }
    this.inGame = false;
    this.previewing = false;
    showCongratulationsDialog();
  }
  
  private void closePiece(int paramInt)
  {
    if (this.openedPiece == paramInt) {
      this.openedPiece = -1;
    }
    MemoPiece localMemoPiece = (MemoPiece)this.memoPieces.get(paramInt);
    localMemoPiece.setpBitmap(this.hidden);
    localMemoPiece.setHidden(true);
  }
  
  private void createMemoPieces()
  {
    this.layoutCount += 1;
    if ((this.memoPiecesCreated) || (this.layoutCount < 2)) {
      return;
    }
    this.memoPiecesCreated = true;
    if (this.resources.size() < 3)
    {
      DialogUtil.showAlert(getActivity(), 2131362092, 2131362093);
      return;
    }
    this.pieceSize = DeviceUtil.dpToPx(getSherlockActivity(), this.pieceSize);
    this.hidden = ImageUtil.getScaledBitmapResource((String)this.resources.get(0), this.pieceSize, this.pieceSize, false);
    this.maxC = (this.memoContainer.getWidth() / this.pieceSize);
    int i4;
    int i;
    int i3;
    int j;
    int m;
    int k;
    if (this.memoContainer.getHeight() / this.pieceSize > this.maxC)
    {
      this.maxR = (this.maxC + 1);
      i4 = this.maxR * this.maxC / 2;
      i = this.memoContainer.getHeight();
      i3 = (this.memoContainer.getWidth() - this.maxC * this.pieceSize) / 2;
      j = (i - this.maxR * this.pieceSize) / 2;
      m = 0;
      i = 1;
      k = 0;
    }
    for (;;)
    {
      int i1 = i3;
      if (k >= this.maxR) {
        break label475;
      }
      int n = 0;
      label220:
      if (n < this.maxC)
      {
        Object localObject;
        MemoPiece localMemoPiece;
        if (this.memoPieces.size() < i4)
        {
          localObject = ImageUtil.getScaledBitmapResource((String)this.resources.get(i), this.pieceSize, this.pieceSize, false);
          localMemoPiece = new MemoPiece(getActivity());
          localMemoPiece.setpBitmap((Bitmap)localObject);
          localMemoPiece.setPieceType(i);
          localMemoPiece.setPosition(i1, j);
        }
        for (;;)
        {
          localMemoPiece.setIndex(m);
          localMemoPiece.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              if ((SCMemoGameFragment.this.inGame) && (!SCMemoGameFragment.this.showing))
              {
                paramAnonymousView = (SCMemoGameFragment.MemoPiece)paramAnonymousView;
                if ((!paramAnonymousView.isHidden()) || (paramAnonymousView.isOpened())) {
                  break label51;
                }
                SCMemoGameFragment.this.openPiece(paramAnonymousView.getIndex());
              }
              label51:
              while (paramAnonymousView.isOpened()) {
                return;
              }
              SCMemoGameFragment.this.closePiece(paramAnonymousView.getIndex());
            }
          });
          this.memoPieces.add(localMemoPiece);
          this.memoContainer.addView(localMemoPiece);
          int i2 = i;
          if (i >= this.resources.size() - 1) {
            i2 = 0;
          }
          i1 += this.pieceSize;
          n += 1;
          m += 1;
          i = i2 + 1;
          break label220;
          this.maxR = this.maxC;
          break;
          localObject = (MemoPiece)this.memoPieces.get(m - i4);
          localMemoPiece = new MemoPiece(getActivity());
          localMemoPiece.setpBitmap(((MemoPiece)localObject).getpBitmap());
          localMemoPiece.setPieceType(((MemoPiece)localObject).getPieceType());
          localMemoPiece.setPosition(i1, j);
        }
      }
      j += this.pieceSize;
      k += 1;
    }
    label475:
    startGame();
  }
  
  private void openPiece(final int paramInt)
  {
    if (this.openedPiece == -1)
    {
      this.openedPiece = paramInt;
      localObject = (MemoPiece)this.memoPieces.get(paramInt);
      ((MemoPiece)localObject).setpBitmap(((MemoPiece)localObject).getpBitmap());
      ((MemoPiece)localObject).setHidden(false);
      return;
    }
    Object localObject = (MemoPiece)this.memoPieces.get(this.openedPiece);
    MemoPiece localMemoPiece = (MemoPiece)this.memoPieces.get(paramInt);
    localMemoPiece.setpBitmap(localMemoPiece.getpBitmap());
    localMemoPiece.setHidden(false);
    if (((MemoPiece)localObject).getPieceType() == localMemoPiece.getPieceType())
    {
      ((MemoPiece)localObject).setOpened(true);
      localMemoPiece.setOpened(true);
      this.openedPiece = -1;
      checkGameComplete();
      return;
    }
    this.showing = true;
    localObject = new TimerTask()
    {
      public void run()
      {
        if (SCMemoGameFragment.this.getActivity() != null) {
          SCMemoGameFragment.this.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              SCMemoGameFragment.this.closePiece(SCMemoGameFragment.this.openedPiece);
              SCMemoGameFragment.this.closePiece(SCMemoGameFragment.3.this.val$index);
              SCMemoGameFragment.access$302(SCMemoGameFragment.this, false);
            }
          });
        }
      }
    };
    new Timer().schedule((TimerTask)localObject, 2000L);
  }
  
  private int randomFromTo(int paramInt1, int paramInt2)
  {
    return (int)(Math.random() * (paramInt2 - paramInt1 + 1)) + paramInt1;
  }
  
  private void randomizeMemoPieces()
  {
    int j = this.memoPieces.size();
    int i = 0;
    while (i < 50)
    {
      int k = randomFromTo(0, j - 1);
      int m = randomFromTo(0, j - 1);
      if ((k != m) && (k < j - 1) && (m < j - 1)) {
        swapPieces(k, m);
      }
      i += 1;
    }
  }
  
  private void restartGame()
  {
    this.inGame = false;
    this.previewing = false;
    int i = 0;
    while (i < this.memoPieces.size())
    {
      MemoPiece localMemoPiece = (MemoPiece)this.memoPieces.get(i);
      localMemoPiece.setpBitmap(localMemoPiece.getpBitmap());
      localMemoPiece.setHidden(false);
      localMemoPiece.setOpened(false);
      i += 1;
    }
    startGame();
  }
  
  private void showCongratulationsDialog()
  {
    DialogUtil.showAlert(getActivity(), 2131362090, 2131362091);
  }
  
  private void showViewForOrientation(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return;
    case 1: 
      this.memoContainer.setVisibility(0);
      this.rotateToPortraitTextView.setVisibility(8);
      this.startButton.setEnabled(true);
      return;
    }
    this.memoContainer.setVisibility(8);
    this.rotateToPortraitTextView.setVisibility(0);
    this.startButton.setEnabled(false);
  }
  
  private void startGame()
  {
    if (this.previewing)
    {
      this.startButton.setText(2131362089);
      int i = 0;
      while (i < this.memoPieces.size())
      {
        MemoPiece localMemoPiece = (MemoPiece)this.memoPieces.get(i);
        localMemoPiece.setpBitmap(this.hidden);
        localMemoPiece.setHidden(true);
        localMemoPiece.setOpened(false);
        i += 1;
      }
      this.inGame = true;
      return;
    }
    this.startButton.setText(2131362088);
    randomizeMemoPieces();
    this.previewing = true;
  }
  
  private void swapPieces(int paramInt1, int paramInt2)
  {
    MemoPiece localMemoPiece1 = (MemoPiece)this.memoPieces.get(paramInt1);
    MemoPiece localMemoPiece2 = (MemoPiece)this.memoPieces.get(paramInt2);
    paramInt1 = localMemoPiece1.x;
    paramInt2 = localMemoPiece1.y;
    localMemoPiece1.setPosition(localMemoPiece2.x, localMemoPiece2.y);
    localMemoPiece2.setPosition(paramInt1, paramInt2);
  }
  
  protected void init()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null)
    {
      this.resources = localBundle.getStringArrayList("resources");
      this.style = localBundle.getBundle("PAGE_STYLE");
    }
    StyleUtil.setBackground(this.fView, this.style);
    this.rotateToPortraitTextView = ((TextView)this.fView.findViewById(2131100035));
    this.memoContainer = ((RelativeLayout)this.fView.findViewById(2131100034));
    this.memoContainer.getViewTreeObserver().addOnGlobalLayoutListener(this.layoutListener);
    this.startButton = ((Button)this.fView.findViewById(2131100036));
    this.startButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (SCMemoGameFragment.this.inGame)
        {
          SCMemoGameFragment.this.restartGame();
          return;
        }
        SCMemoGameFragment.this.startGame();
      }
    });
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    showViewForOrientation(paramConfiguration.orientation);
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903165, paramViewGroup, false);
    init();
    int i = getActivity().getResources().getConfiguration().orientation;
    if (i == 1) {
      this.layoutCount = 1;
    }
    showViewForOrientation(i);
    return this.fView;
  }
  
  public void onPause()
  {
    this.memoContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this.layoutListener);
    super.onPause();
  }
  
  private class MemoPiece
    extends ImageView
  {
    private boolean hidden = false;
    private int index = 0;
    private boolean opened = false;
    private Bitmap pBitmap = null;
    private int pieceType = 0;
    int x = 0;
    int y = 0;
    
    public MemoPiece(Context paramContext)
    {
      super();
    }
    
    public int getIndex()
    {
      return this.index;
    }
    
    public int getPieceType()
    {
      return this.pieceType;
    }
    
    public Bitmap getpBitmap()
    {
      return this.pBitmap;
    }
    
    public boolean isHidden()
    {
      return this.hidden;
    }
    
    public boolean isOpened()
    {
      return this.opened;
    }
    
    public void setHidden(boolean paramBoolean)
    {
      this.hidden = paramBoolean;
    }
    
    public void setIndex(int paramInt)
    {
      this.index = paramInt;
    }
    
    public void setOpened(boolean paramBoolean)
    {
      this.opened = paramBoolean;
    }
    
    public void setPieceType(int paramInt)
    {
      this.pieceType = paramInt;
    }
    
    public void setPosition(int paramInt1, int paramInt2)
    {
      this.x = paramInt1;
      this.y = paramInt2;
      RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(SCMemoGameFragment.this.pieceSize - 1, SCMemoGameFragment.this.pieceSize - 1);
      localLayoutParams.leftMargin = paramInt1;
      localLayoutParams.topMargin = paramInt2;
      setLayoutParams(localLayoutParams);
    }
    
    public void setpBitmap(Bitmap paramBitmap)
    {
      if (this.pBitmap == null) {
        this.pBitmap = paramBitmap;
      }
      setImageBitmap(paramBitmap);
    }
  }
}
