package com.qbiki.modules.login;

import android.graphics.Bitmap;
import android.net.Uri;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import com.google.android.bitmapfun.Utils;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.WebViewFragment;
import com.qbiki.seattleclouds.WebViewFragment.MyWebViewClient;
import java.util.HashMap;
import java.util.Map;

public class LoginWebViewFragment
  extends WebViewFragment
{
  private OnLoginLisener mOnLoginListener;
  
  public LoginWebViewFragment() {}
  
  public OnLoginLisener getOnLoginListener()
  {
    return this.mOnLoginListener;
  }
  
  protected WebViewClient onCreateWebViewClient()
  {
    return new LoginWebViewClient();
  }
  
  public void setOnLoginListener(OnLoginLisener paramOnLoginLisener)
  {
    this.mOnLoginListener = paramOnLoginLisener;
  }
  
  protected class LoginWebViewClient
    extends WebViewFragment.MyWebViewClient
  {
    protected LoginWebViewClient()
    {
      super();
    }
    
    public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
    {
      super.onPageStarted(paramWebView, paramString, paramBitmap);
      if (!Utils.hasGingerbread()) {
        processLoginAction(paramString);
      }
    }
    
    public boolean processLoginAction(String paramString)
    {
      String str = Uri.parse(paramString).getLastPathSegment();
      Object localObject = (Page)App.appConfig.getPages().get(str);
      if ((localObject != null) && (((Page)localObject).getType().equalsIgnoreCase("login")))
      {
        paramString = paramString.split("\\?");
        if (paramString.length == 2)
        {
          paramString = paramString[1].split("&");
          HashMap localHashMap = new HashMap();
          int i = 0;
          if (i < paramString.length)
          {
            localObject = paramString[i].split("=");
            if (localObject.length == 2) {
              localHashMap.put(localObject[0], localObject[1]);
            }
            for (;;)
            {
              i += 1;
              break;
              localHashMap.put(localObject[0], "");
            }
          }
          if ((localHashMap.size() > 1) && (localHashMap.get("userAction") != null) && (((String)localHashMap.get("userAction")).length() > 0))
          {
            localObject = null;
            paramString = LoginFragment.checkAccountUser((String)localHashMap.get("loginName"), (String)localHashMap.get("loginPassword"), str, true, LoginWebViewFragment.this.getActivity());
            if (paramString != null)
            {
              LoginFragment.sessionUserLogin = (String)localHashMap.get("loginName");
              LoginFragment.sessionUserPassword = (String)localHashMap.get("loginPassword");
              if (!paramString.startsWith("http")) {}
            }
            for (;;)
            {
              if ((paramString != null) && (LoginWebViewFragment.this.mOnLoginListener != null)) {
                LoginWebViewFragment.this.mOnLoginListener.onLogIn(paramString);
              }
              return true;
              if (App.resourceExists(paramString))
              {
                paramString = App.getResourceUrl(paramString);
              }
              else
              {
                paramString = "http://" + paramString;
                continue;
                if (LoginFragment.sessionUserLogin != null)
                {
                  paramString = (String)localObject;
                  if (LoginFragment.sessionUserPassword != null) {}
                }
                else
                {
                  LoginFragment.sessionUserLogin = null;
                  LoginFragment.sessionUserPassword = null;
                  paramString = (String)localObject;
                }
              }
            }
          }
        }
      }
      return false;
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      if (paramString.startsWith("lpforgotpassword://")) {
        if (LoginWebViewFragment.this.mOnLoginListener != null) {
          LoginWebViewFragment.this.mOnLoginListener.onForgotPassword();
        }
      }
      while ((Utils.hasGingerbread()) && (processLoginAction(paramString))) {
        return true;
      }
      return super.shouldOverrideUrlLoading(paramWebView, paramString);
    }
  }
  
  public static abstract interface OnLoginLisener
  {
    public abstract void onForgotPassword();
    
    public abstract void onLogIn(String paramString);
  }
}
