package com.qbiki.modules.login;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.NestedFragmentCompat;
import com.qbiki.seattleclouds.Page;
import com.qbiki.util.DialogUtil;
import java.util.ArrayList;
import java.util.Map;
import org.apache.commons.codec.binary.Base64;

public class LoginFragment
  extends NestedFragmentCompat
{
  public static final String ARG_PAGE_ID = "ARG_PAGE_ID";
  private static final String TAG = "LoginFragment";
  private static String sessionLoginPageId;
  public static String sessionUserLogin;
  public static String sessionUserPassword;
  private boolean LOGV = false;
  private String mCurrentPageUrl;
  private Page mLoginPage;
  private String mLoginPageId;
  private String mLoginPageUrl;
  
  public LoginFragment() {}
  
  static String checkAccountUser(String paramString1, String paramString2, String paramString3, boolean paramBoolean, Activity paramActivity)
  {
    if (paramActivity == null) {}
    Object localObject;
    do
    {
      return null;
      Page localPage = (Page)App.appConfig.getPages().get(paramString3);
      localObject = null;
      int i = 0;
      if (i < localPage.listLoginUsers.size())
      {
        localObject = (Map)localPage.listLoginUsers.get(i);
        String str = (String)((Map)localObject).get("login");
        if ((paramString1 != null) && (paramString1.equalsIgnoreCase(str))) {
          if (((Map)localObject).containsValue(new String(Base64.encodeBase64(paramString2.getBytes()))))
          {
            sessionLoginPageId = paramString3;
            return (String)((Map)localObject).get("url");
          }
        }
        for (localObject = paramActivity.getString(2131362352);; localObject = paramActivity.getString(2131362353))
        {
          i += 1;
          break;
        }
      }
      if (localPage.listLoginUsers.size() == 0) {
        localObject = paramActivity.getString(2131362354);
      }
    } while ((localObject == null) || (!paramBoolean));
    DialogUtil.showAlert(paramActivity, paramActivity.getString(2131361915), (String)localObject);
    return null;
  }
  
  private static String checkSessionAndGetRedirectURLForPage(Page paramPage, Activity paramActivity)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (0 == 0)
    {
      localObject1 = localObject2;
      if (sessionUserLogin != null)
      {
        localObject1 = localObject2;
        if (sessionUserPassword != null)
        {
          localObject1 = localObject2;
          if (paramPage.getType().equals("login")) {
            localObject1 = checkAccountUser(sessionUserLogin, sessionUserPassword, paramPage.getId(), false, paramActivity);
          }
        }
      }
    }
    if (localObject1 != null)
    {
      if (((String)localObject1).startsWith("http")) {
        return localObject1;
      }
      if (App.resourceExists((String)localObject1)) {
        return App.getResourceUrl((String)localObject1);
      }
      return "http://" + (String)localObject1;
    }
    return null;
  }
  
  private Fragment getFragmentForPageUrl(String paramString)
  {
    if (!paramString.equals(this.mLoginPageUrl))
    {
      paramString = App.getPageFragmentInfo(paramString, getActivity());
      return Fragment.instantiate(getActivity(), paramString.getClassName(), paramString.getArguments());
    }
    paramString = new Bundle();
    paramString.putString("ARG_URL", this.mLoginPageUrl);
    LoginWebViewFragment localLoginWebViewFragment = new LoginWebViewFragment();
    localLoginWebViewFragment.setArguments(paramString);
    localLoginWebViewFragment.setOnLoginListener(new LoginWebViewFragment.OnLoginLisener()
    {
      public void onForgotPassword()
      {
        Bundle localBundle = new Bundle();
        localBundle.putString("pageId", LoginFragment.this.mLoginPageId);
        App.showPage(new FragmentInfo(SCForgotPasswordFragment.class.getName(), localBundle), LoginFragment.this.getActivity());
      }
      
      public void onLogIn(String paramAnonymousString)
      {
        if (LoginFragment.this.LOGV) {
          Log.v("LoginFragment", "onLogIn: " + paramAnonymousString);
        }
        LoginFragment.this.refreshIfNeeded(paramAnonymousString);
      }
    });
    return localLoginWebViewFragment;
  }
  
  public static void processLogout(WebView paramWebView, Fragment paramFragment)
  {
    if (sessionLoginPageId != null)
    {
      String str1 = App.getResourceUrl(sessionLoginPageId);
      String str2 = "localStorage.setItem(\"" + str1 + "username\",\"\");";
      str2 = str2 + "localStorage.setItem(\"" + str1 + "password\",\"\");";
      str1 = str2 + "localStorage.setItem(\"" + str1 + "checked\",\"\");";
      paramWebView.loadUrl("javascript:" + str1);
    }
    sessionUserLogin = null;
    sessionUserPassword = null;
    sessionLoginPageId = null;
    paramWebView = paramFragment.getParentFragment();
    if ((paramWebView != null) && ((paramWebView instanceof LoginFragment)))
    {
      ((LoginFragment)paramWebView).refreshIfNeeded(null);
      return;
    }
    App.closePage(paramFragment);
  }
  
  private boolean refreshIfNeeded(String paramString)
  {
    Object localObject = paramString;
    if (paramString == null) {
      localObject = this.mLoginPageUrl;
    }
    if ((this.mCurrentPageUrl == null) || (!this.mCurrentPageUrl.equals(localObject)))
    {
      this.mCurrentPageUrl = ((String)localObject);
      paramString = getFragmentForPageUrl((String)localObject);
      localObject = App.getIntentIfPageIsActivityOrNull((String)localObject, App.getPageFragmentInfo((String)localObject, getActivity()), getActivity());
      if (localObject == null) {
        showFragment(paramString);
      }
      for (;;)
      {
        return true;
        getActivity().startActivity((Intent)localObject);
        App.closePage(this);
      }
    }
    return false;
  }
  
  private void showFragment(Fragment paramFragment)
  {
    FragmentTransaction localFragmentTransaction = getChildFragmentManager().beginTransaction();
    localFragmentTransaction.setCustomAnimations(2130968579, 0);
    if (this.mCurrentNestedFragment == null) {
      localFragmentTransaction.add(2131099930, paramFragment);
    }
    for (;;)
    {
      this.mCurrentNestedFragment = paramFragment;
      localFragmentTransaction.commit();
      return;
      localFragmentTransaction.replace(2131099930, paramFragment);
    }
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903136, paramViewGroup, false);
    this.mLoginPageId = getArguments().getString("ARG_PAGE_ID");
    if (this.mLoginPageId == null) {
      throw new IllegalArgumentException(getActivity().getString(2131362351));
    }
    this.mLoginPageUrl = App.getResourceUrl(this.mLoginPageId);
    this.mLoginPage = ((Page)App.appConfig.getPages().get(this.mLoginPageId));
    if (this.mLoginPage == null) {
      this.mLoginPage = new Page(this.mLoginPageId);
    }
    return paramLayoutInflater;
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    super.onHiddenChanged(paramBoolean);
    if (!paramBoolean) {
      refreshIfNeeded(checkSessionAndGetRedirectURLForPage(this.mLoginPage, getActivity()));
    }
  }
  
  public void onResume()
  {
    super.onResume();
    refreshIfNeeded(checkSessionAndGetRedirectURLForPage(this.mLoginPage, getActivity()));
  }
}
