package com.qbiki.modules.notes;

import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.LoaderManager;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.Loader;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.ListView;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.AbstractCursorLoader;

public class NotesListFragment
  extends SCListFragment
  implements LoaderManager.LoaderCallbacks<Cursor>
{
  public static final String TAG = NotesListFragment.class.getSimpleName();
  private static boolean insertTestData = false;
  private View fView = null;
  private NotesCursorAdapter mAdapter;
  private String mDatabaseName;
  private DatabaseHelper mDbHelper;
  
  public NotesListFragment() {}
  
  private void createNote()
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("databaseName", this.mDatabaseName);
    App.showPage(new FragmentInfo(NotePagerFragment.class.getName(), localBundle), this);
  }
  
  private void deleteNote(long paramLong)
  {
    NoteDeleteDialog.show(getActivity(), this.mDbHelper, paramLong, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        NotesListFragment.this.updateListData();
      }
    });
  }
  
  private void editNote(int paramInt, long paramLong)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("databaseName", this.mDatabaseName);
    localBundle.putInt("position", paramInt);
    localBundle.putLong("_id", paramLong);
    App.showPage(new FragmentInfo(NotePagerFragment.class.getName(), localBundle), this);
  }
  
  private void initDatabaseName()
  {
    String str = null;
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      str = localBundle.getString("storeId");
    }
    if ((str == null) || (str.trim().equals("")))
    {
      this.mDatabaseName = "notes.db";
      return;
    }
    this.mDatabaseName = ("notes-" + str + ".db");
  }
  
  private void insertTestData() {}
  
  private void updateListData()
  {
    getLoaderManager().restartLoader(0, null, this);
  }
  
  public void init()
  {
    initDatabaseName();
    this.mDbHelper = new DatabaseHelper(getActivity(), this.mDatabaseName);
    if (insertTestData)
    {
      insertTestData();
      insertTestData = false;
    }
    this.mAdapter = new NotesCursorAdapter(getActivity());
    setListAdapter(this.mAdapter);
    registerForContextMenu(getListView());
    getLoaderManager().initLoader(0, null, this);
  }
  
  public boolean onContextItemSelected(android.view.MenuItem paramMenuItem)
  {
    AdapterView.AdapterContextMenuInfo localAdapterContextMenuInfo = (AdapterView.AdapterContextMenuInfo)paramMenuItem.getMenuInfo();
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onContextItemSelected(paramMenuItem);
    case 2131100306: 
      createNote();
      return true;
    case 2131100307: 
      editNote(localAdapterContextMenuInfo.position, localAdapterContextMenuInfo.id);
      return true;
    }
    deleteNote(localAdapterContextMenuInfo.id);
    return true;
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    super.onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
    getActivity().getMenuInflater().inflate(2131558425, paramContextMenu);
    paramContextMenu.setHeaderTitle(((TextView)paramView.findViewById((int)((AdapterView.AdapterContextMenuInfo)paramContextMenuInfo).id).findViewById(2131099801)).getText().toString());
  }
  
  public Loader<Cursor> onCreateLoader(int paramInt, Bundle paramBundle)
  {
    new AbstractCursorLoader(getActivity())
    {
      protected Cursor loadCursorInBackground()
      {
        return NotesListFragment.this.mDbHelper.fetchAllNotes();
      }
    };
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, com.actionbarsherlock.view.MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558424, paramMenu);
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903176, paramViewGroup, false);
    return this.fView;
  }
  
  public void onDestroyView()
  {
    if (this.mDbHelper != null) {
      this.mDbHelper.close();
    }
    super.onDestroyView();
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    if (!paramBoolean) {
      updateListData();
    }
    super.onHiddenChanged(paramBoolean);
  }
  
  public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong)
  {
    super.onListItemClick(paramListView, paramView, paramInt, paramLong);
    editNote(paramInt, paramLong);
  }
  
  public void onLoadFinished(Loader<Cursor> paramLoader, Cursor paramCursor)
  {
    this.mAdapter.swapCursor(paramCursor);
  }
  
  public void onLoaderReset(Loader<Cursor> paramLoader)
  {
    this.mAdapter.swapCursor(null);
  }
  
  public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    createNote();
    return true;
  }
  
  public void onResume()
  {
    super.onResume();
    updateListData();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    init();
    super.onViewCreated(paramView, paramBundle);
  }
}
