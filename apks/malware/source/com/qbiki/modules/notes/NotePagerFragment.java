package com.qbiki.modules.notes;

import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.StringUtil;
import com.qbiki.widget.SoftKeyboardDetectingLinearLayout;
import com.qbiki.widget.SoftKeyboardDetectingLinearLayout.SoftKeyboardVisibilityListener;
import com.viewpagerindicator.TitlePageIndicator;
import com.viewpagerindicator.TitlePageIndicator.IndicatorStyle;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class NotePagerFragment
  extends SCFragment
  implements NoteFragment.NoteFragmentContainer
{
  private View fView = null;
  private NoteFragment mCurrentFragment;
  private int mCurrentPosition;
  private DatabaseHelper mDbHelper;
  private String mDbName;
  private Long mInitialNoteId = null;
  private boolean mKeyboardIsVisible = false;
  private int mMaxTitleLength;
  private ArrayList<Long> mNoteIdsList = new ArrayList(0);
  private Map<Long, String> mNoteTitlesMap = new HashMap(0);
  private NotesFragmentPagerAdapter mNotesAdapter;
  private ViewPager mPager;
  private TitlePageIndicator mTitleIndicator;
  
  public NotePagerFragment() {}
  
  private void deleteNote()
  {
    NoteDeleteDialog.show(getActivity(), this.mDbHelper, ((Long)this.mNoteIdsList.get(this.mCurrentPosition)).longValue(), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        NotePagerFragment.this.mNoteTitlesMap.remove(NotePagerFragment.this.mNoteIdsList.get(NotePagerFragment.this.mCurrentPosition));
        NotePagerFragment.this.mNoteIdsList.remove(NotePagerFragment.this.mCurrentPosition);
        if (NotePagerFragment.this.mNoteIdsList.size() == 0)
        {
          App.closePage(NotePagerFragment.this);
          return;
        }
        NotePagerFragment.access$210(NotePagerFragment.this);
        if (NotePagerFragment.this.mCurrentPosition >= NotePagerFragment.this.mNoteIdsList.size()) {
          NotePagerFragment.access$202(NotePagerFragment.this, NotePagerFragment.this.mNoteIdsList.size() - 1);
        }
        if (NotePagerFragment.this.mCurrentPosition < 0) {
          NotePagerFragment.access$202(NotePagerFragment.this, 0);
        }
        NotePagerFragment.this.mNotesAdapter.notifyDataSetChanged();
        NotePagerFragment.this.mTitleIndicator.setCurrentItem(NotePagerFragment.this.mCurrentPosition);
      }
    });
  }
  
  private void fetchNoteIdsAndTitles()
  {
    Cursor localCursor = this.mDbHelper.fetchAllNotes();
    this.mNoteIdsList = new ArrayList(localCursor.getCount());
    this.mNoteTitlesMap = new HashMap(localCursor.getCount());
    int i = localCursor.getColumnIndex("_id");
    int j = localCursor.getColumnIndex("text");
    if (localCursor.moveToFirst()) {
      do
      {
        long l = localCursor.getLong(i);
        this.mNoteIdsList.add(Long.valueOf(l));
        String str = StringUtil.getFirstNonEmptyLine(localCursor.getString(j), this.mMaxTitleLength);
        this.mNoteTitlesMap.put(Long.valueOf(l), str);
      } while (localCursor.moveToNext());
    }
    localCursor.close();
  }
  
  private void initDbHelper()
  {
    String str = null;
    Object localObject = getArguments();
    if (localObject != null) {
      str = ((Bundle)localObject).getString("databaseName");
    }
    if (str != null)
    {
      localObject = str;
      if (!str.trim().equals("")) {}
    }
    else
    {
      localObject = "notes.db";
    }
    this.mDbHelper = new DatabaseHelper(getActivity(), (String)localObject);
  }
  
  private void shareNote()
  {
    if (this.mCurrentFragment == null) {
      this.mCurrentFragment = this.mNotesAdapter.getFragmentAtPosition(this.mCurrentPosition);
    }
    if (this.mCurrentFragment == null) {}
    String str;
    do
    {
      return;
      str = this.mCurrentFragment.getNoteText();
    } while (str == null);
    Intent localIntent = new Intent("android.intent.action.SEND");
    localIntent.setType("text/plain");
    localIntent.putExtra("android.intent.extra.SUBJECT", StringUtil.getFirstNonEmptyLine(str, 30));
    localIntent.putExtra("android.intent.extra.TEXT", str);
    startActivity(Intent.createChooser(localIntent, null));
  }
  
  public boolean getKeyboardVisible()
  {
    return this.mKeyboardIsVisible;
  }
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mDbName = ((Bundle)localObject).getString("databaseName");
      this.mInitialNoteId = Long.valueOf(((Bundle)localObject).getLong("_id", -1L));
    }
    initDbHelper();
    localObject = getChildFragmentManager();
    if (this.mInitialNoteId.longValue() == -1L) {}
    for (boolean bool = true;; bool = false)
    {
      this.mNotesAdapter = new NotesFragmentPagerAdapter((FragmentManager)localObject, bool);
      this.mPager = ((ViewPager)this.fView.findViewById(2131100067));
      this.mTitleIndicator = ((TitlePageIndicator)this.fView.findViewById(2131100066));
      this.mTitleIndicator.setFooterIndicatorStyle(TitlePageIndicator.IndicatorStyle.Triangle);
      ((SoftKeyboardDetectingLinearLayout)this.fView.findViewById(2131100065)).setSoftKeyboardVisibilityListener(new SoftKeyboardDetectingLinearLayout.SoftKeyboardVisibilityListener()
      {
        public void onSoftKeyboardVisibilityChanged(boolean paramAnonymousBoolean)
        {
          NotePagerFragment.access$002(NotePagerFragment.this, paramAnonymousBoolean);
          if (NotePagerFragment.this.mCurrentFragment != null) {
            NotePagerFragment.this.mCurrentFragment.onActiveChanged(true, NotePagerFragment.this.mKeyboardIsVisible);
          }
        }
      });
      localObject = new ViewPager.OnPageChangeListener()
      {
        public void onPageScrollStateChanged(int paramAnonymousInt) {}
        
        public void onPageScrolled(int paramAnonymousInt1, float paramAnonymousFloat, int paramAnonymousInt2) {}
        
        public void onPageSelected(int paramAnonymousInt)
        {
          if ((NotePagerFragment.this.mCurrentPosition != paramAnonymousInt) || (NotePagerFragment.this.mCurrentFragment == null))
          {
            NotePagerFragment.access$202(NotePagerFragment.this, paramAnonymousInt);
            if (NotePagerFragment.this.mCurrentFragment != null) {
              NotePagerFragment.this.mCurrentFragment.onActiveChanged(false, NotePagerFragment.this.mKeyboardIsVisible);
            }
            NotePagerFragment.access$102(NotePagerFragment.this, NotePagerFragment.this.mNotesAdapter.getFragmentAtPosition(paramAnonymousInt));
            if (NotePagerFragment.this.mCurrentFragment != null) {
              NotePagerFragment.this.mCurrentFragment.onActiveChanged(true, NotePagerFragment.this.mKeyboardIsVisible);
            }
          }
        }
      };
      if (this.mInitialNoteId.longValue() != -1L) {
        break;
      }
      this.mPager.setAdapter(this.mNotesAdapter);
      this.mCurrentPosition = 0;
      this.mTitleIndicator.setVisibility(8);
      this.mPager.setOnPageChangeListener((ViewPager.OnPageChangeListener)localObject);
      this.mPager.setCurrentItem(this.mCurrentPosition);
      invalidateOptionsMenu();
      return;
    }
    if (DeviceUtil.getScreenWidth(getActivity()) > DeviceUtil.getScreenHeight(getActivity())) {}
    for (this.mMaxTitleLength = 17;; this.mMaxTitleLength = 11)
    {
      fetchNoteIdsAndTitles();
      this.mPager.setAdapter(this.mNotesAdapter);
      this.mCurrentPosition = this.mNoteIdsList.indexOf(this.mInitialNoteId);
      if (this.mCurrentPosition == -1) {
        this.mCurrentPosition = 0;
      }
      this.mTitleIndicator.setViewPager(this.mPager);
      this.mTitleIndicator.setOnPageChangeListener((ViewPager.OnPageChangeListener)localObject);
      this.mTitleIndicator.setCurrentItem(this.mCurrentPosition);
      getActivity().getWindow().setSoftInputMode(3);
      break;
    }
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    if ((this.mInitialNoteId != null) && (this.mInitialNoteId.longValue() == -1L)) {
      return;
    }
    paramMenuInflater.inflate(2131558423, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903175, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public void onDestroyView()
  {
    if (this.mDbHelper != null) {
      this.mDbHelper.close();
    }
    super.onDestroyView();
  }
  
  public void onNoteChanged(NoteFragment paramNoteFragment, long paramLong, String paramString, Date paramDate)
  {
    this.mNoteTitlesMap.put(Long.valueOf(paramLong), StringUtil.getFirstNonEmptyLine(paramString, this.mMaxTitleLength));
    this.mTitleIndicator.invalidate();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100304: 
      shareNote();
      return true;
    }
    deleteNote();
    return true;
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    long[] arrayOfLong = new long[this.mNoteIdsList.size()];
    int i = 0;
    Iterator localIterator = this.mNoteIdsList.iterator();
    while (localIterator.hasNext())
    {
      arrayOfLong[i] = ((Long)localIterator.next()).longValue();
      i += 1;
    }
    paramBundle.putLongArray("noteIdsList", arrayOfLong);
  }
  
  public void onViewStateRestored(Bundle paramBundle)
  {
    super.onViewStateRestored(paramBundle);
    if (paramBundle != null)
    {
      paramBundle = paramBundle.getLongArray("noteIdsList");
      if ((paramBundle != null) && (paramBundle.length != 0))
      {
        this.mNoteIdsList = new ArrayList(paramBundle.length);
        int j = paramBundle.length;
        int i = 0;
        while (i < j)
        {
          long l = paramBundle[i];
          this.mNoteIdsList.add(Long.valueOf(l));
          i += 1;
        }
      }
    }
  }
  
  private class NotesFragmentPagerAdapter
    extends FragmentStatePagerAdapter
  {
    private SparseArray<NoteFragment> mFragments = new SparseArray();
    private boolean mIsNewNote = false;
    
    public NotesFragmentPagerAdapter(FragmentManager paramFragmentManager, boolean paramBoolean)
    {
      super();
      this.mIsNewNote = paramBoolean;
    }
    
    public void destroyItem(View paramView, int paramInt, Object paramObject)
    {
      super.destroyItem(paramView, paramInt, paramObject);
      this.mFragments.remove(paramInt);
    }
    
    public int getCount()
    {
      if (this.mIsNewNote) {
        return 1;
      }
      return NotePagerFragment.this.mNoteIdsList.size();
    }
    
    public NoteFragment getFragmentAtPosition(int paramInt)
    {
      return (NoteFragment)this.mFragments.get(paramInt);
    }
    
    public Fragment getItem(int paramInt)
    {
      if (this.mIsNewNote) {}
      for (NoteFragment localNoteFragment = NoteFragment.newInstance(-1L, NotePagerFragment.this.mDbName);; localNoteFragment = NoteFragment.newInstance(((Long)NotePagerFragment.this.mNoteIdsList.get(paramInt)).longValue(), NotePagerFragment.this.mDbName))
      {
        localNoteFragment.setNoteFragmentContainer(NotePagerFragment.this);
        this.mFragments.put(paramInt, localNoteFragment);
        return localNoteFragment;
      }
    }
    
    public int getItemPosition(Object paramObject)
    {
      return -2;
    }
    
    public CharSequence getPageTitle(int paramInt)
    {
      if (NotePagerFragment.this.mNoteIdsList.size() == 0) {
        return "";
      }
      return (CharSequence)NotePagerFragment.this.mNoteTitlesMap.get(NotePagerFragment.this.mNoteIdsList.get(paramInt));
    }
  }
}
