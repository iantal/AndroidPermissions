package com.qbiki.modules.favorites;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import android.webkit.WebView;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StringUtil;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Favorites
{
  private static String favoriteOffBase64Image = null;
  private static String favoriteOnBase64Image;
  private static Favorites instance = null;
  private DatabaseHelper db = null;
  private ArrayList<Map<String, String>> favoriteList = new ArrayList();
  
  static
  {
    favoriteOnBase64Image = null;
  }
  
  public Favorites(Context paramContext)
  {
    this.db = new DatabaseHelper(paramContext.getApplicationContext());
    readInitialList();
  }
  
  private void findAndDelete(String paramString1, String paramString2)
  {
    int i = 0;
    for (;;)
    {
      if (i < this.favoriteList.size())
      {
        if (((String)((Map)this.favoriteList.get(i)).get(paramString1)).equals(paramString2)) {
          this.favoriteList.remove(i);
        }
      }
      else {
        return;
      }
      i += 1;
    }
  }
  
  public static String getFavoriteOffBase64Image()
  {
    if (favoriteOffBase64Image == null) {
      favoriteOffBase64Image = "data:image/png;base64," + ImageUtil.base64EncodeFromResources("favoriteoff.png");
    }
    return favoriteOffBase64Image;
  }
  
  public static String getFavoriteOnBase64Image()
  {
    if (favoriteOnBase64Image == null) {
      favoriteOnBase64Image = "data:image/png;base64," + ImageUtil.base64EncodeFromResources("favorite.png");
    }
    return favoriteOnBase64Image;
  }
  
  public static Favorites getInstance(Context paramContext)
  {
    if ((instance == null) && (paramContext != null)) {
      instance = new Favorites(paramContext);
    }
    return instance;
  }
  
  public static void populateFavorites(Context paramContext, WebView paramWebView, String[] paramArrayOfString)
  {
    if ((paramArrayOfString.length > 0) && (paramArrayOfString[0].equalsIgnoreCase("add")) && (paramArrayOfString.length > 1))
    {
      String str1 = paramArrayOfString[1];
      String str2;
      String str3;
      if (str1.equalsIgnoreCase("RSSItem"))
      {
        if (paramArrayOfString.length > 5) {
          try
          {
            str1 = URLDecoder.decode(paramArrayOfString[2], "UTF-8");
            str2 = URLDecoder.decode(paramArrayOfString[3], "UTF-8");
            str3 = URLDecoder.decode(paramArrayOfString[4], "UTF-8");
            paramArrayOfString = URLDecoder.decode(paramArrayOfString[5], "UTF-8");
            String str4 = StringUtil.md5(str1 + str2);
            paramContext = getInstance(paramContext);
            if (paramContext.containsID(str4))
            {
              paramContext.removeRSSItem(str2, str1);
              paramWebView.loadUrl("javascript:document.getElementById('rsstable').contentWindow.document.getElementById('" + str4 + "').src = '" + getFavoriteOffBase64Image() + "';");
              paramWebView.loadUrl("javascript:document.getElementById('" + str4 + "').src = '" + getFavoriteOffBase64Image() + "';");
              return;
            }
            paramContext.addRSSItem(str2, str1, str3, paramArrayOfString);
            paramWebView.loadUrl("javascript:document.getElementById('rsstable').contentWindow.document.getElementById('" + str4 + "').src = '" + getFavoriteOnBase64Image() + "';");
            paramWebView.loadUrl("javascript:document.getElementById('" + str4 + "').src = '" + getFavoriteOnBase64Image() + "';");
            return;
          }
          catch (UnsupportedEncodingException paramContext)
          {
            Log.d("Favorites:", "UnsupportedEncodingException", paramContext);
            return;
          }
        }
      }
      else if ((str1.equalsIgnoreCase("ILTI")) && (paramArrayOfString.length > 5))
      {
        str1 = paramArrayOfString[2];
        try
        {
          str2 = URLDecoder.decode(paramArrayOfString[3], "UTF-8");
          str3 = URLDecoder.decode(paramArrayOfString[4], "UTF-8");
          paramArrayOfString = URLDecoder.decode(paramArrayOfString[5], "UTF-8");
          paramContext = getInstance(paramContext);
          if (paramContext.containsID(str1))
          {
            paramContext.removeHTMLItem(str1);
            paramWebView.loadUrl("javascript:document.getElementById('rsstable').contentWindow.document.getElementById('" + str1 + "').src = '" + getFavoriteOffBase64Image() + "';");
            paramWebView.loadUrl("javascript:document.getElementById('" + str1 + "').src = '" + getFavoriteOffBase64Image() + "';");
            return;
          }
        }
        catch (UnsupportedEncodingException paramContext)
        {
          Log.d("Favorites:", "UnsupportedEncodingException", paramContext);
          return;
        }
        paramContext.addHTMLItem(str1, str3, paramArrayOfString, str2);
        paramWebView.loadUrl("javascript:document.getElementById('rsstable').contentWindow.document.getElementById('" + str1 + "').src = '" + getFavoriteOnBase64Image() + "';");
        paramWebView.loadUrl("javascript:document.getElementById('" + str1 + "').src = '" + getFavoriteOnBase64Image() + "';");
      }
    }
  }
  
  private void readInitialList()
  {
    if (this.db != null)
    {
      Cursor localCursor = this.db.getReadableDatabase().query("favorites", new String[] { "type", "itemID", "md5ID", "rssURL", "title", "pictureURL", "link" }, null, null, null, null, null);
      localCursor.moveToFirst();
      while (!localCursor.isAfterLast())
      {
        HashMap localHashMap = new HashMap();
        localHashMap.put("type", localCursor.getString(0));
        localHashMap.put("itemID", localCursor.getString(1));
        localHashMap.put("md5ID", localCursor.getString(2));
        localHashMap.put("rssURL", localCursor.getString(3));
        localHashMap.put("title", localCursor.getString(4));
        localHashMap.put("pictureURL", localCursor.getString(5));
        localHashMap.put("link", localCursor.getString(6));
        this.favoriteList.add(localHashMap);
        localCursor.moveToNext();
      }
      localCursor.close();
    }
  }
  
  public void addHTMLItem(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", "ILTI");
    localHashMap.put("itemID", "");
    localHashMap.put("md5ID", paramString1);
    localHashMap.put("rssURL", "");
    try
    {
      localHashMap.put("title", new String(paramString2.getBytes(), "UTF-8"));
      localHashMap.put("pictureURL", paramString3);
      localHashMap.put("link", paramString4);
      addItemFromMap(localHashMap);
      return;
    }
    catch (UnsupportedEncodingException paramString1)
    {
      for (;;)
      {
        localHashMap.put("title", paramString2);
      }
    }
  }
  
  public void addItemFromMap(HashMap<String, String> paramHashMap)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("type", (String)paramHashMap.get("type"));
    localContentValues.put("itemID", (String)paramHashMap.get("itemID"));
    localContentValues.put("md5ID", (String)paramHashMap.get("md5ID"));
    localContentValues.put("rssURL", (String)paramHashMap.get("rssURL"));
    localContentValues.put("title", (String)paramHashMap.get("title"));
    localContentValues.put("pictureURL", (String)paramHashMap.get("pictureURL"));
    localContentValues.put("link", (String)paramHashMap.get("link"));
    this.db.getWritableDatabase().insert("favorites", null, localContentValues);
    this.favoriteList.add(paramHashMap);
  }
  
  public void addRSSItem(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", "RSSItem");
    localHashMap.put("itemID", paramString1);
    localHashMap.put("md5ID", StringUtil.md5(paramString2 + paramString1));
    localHashMap.put("rssURL", paramString2);
    try
    {
      localHashMap.put("title", new String(paramString3.getBytes(), "UTF-8"));
      localHashMap.put("pictureURL", paramString4);
      localHashMap.put("link", "");
      addItemFromMap(localHashMap);
      return;
    }
    catch (UnsupportedEncodingException paramString1)
    {
      for (;;)
      {
        localHashMap.put("title", paramString3);
      }
    }
  }
  
  public boolean containsID(String paramString)
  {
    int i = 0;
    while (i < this.favoriteList.size())
    {
      if (((String)((Map)this.favoriteList.get(i)).get("md5ID")).equals(paramString)) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public String[] getFavoriteIDS()
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < this.favoriteList.size())
    {
      localArrayList.add(((Map)this.favoriteList.get(i)).get("md5ID"));
      i += 1;
    }
    return (String[])localArrayList.toArray(new String[localArrayList.size()]);
  }
  
  public ArrayList<Map<String, String>> getFavoriteList()
  {
    return this.favoriteList;
  }
  
  public String getJSONString()
  {
    JSONObject localJSONObject1 = new JSONObject();
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    for (;;)
    {
      if (i < this.favoriteList.size())
      {
        Object localObject = (Map)this.favoriteList.get(i);
        JSONObject localJSONObject2 = new JSONObject((Map)localObject);
        try
        {
          if (((String)((Map)localObject).get("link")).length() > 0) {}
          for (localObject = (String)((Map)localObject).get("link");; localObject = "http://" + App.serverHostName + "/reader.ashx?itemid=" + URLEncoder.encode((String)((Map)localObject).get("itemID"), "UTF-8") + "&rssurl=" + URLEncoder.encode((String)((Map)localObject).get("rssURL"), "UTF-8"))
          {
            localJSONObject2.put("itemURL", localObject);
            localJSONArray.put(localJSONObject2);
            break;
          }
          try
          {
            localJSONObject1.put("favorites", localJSONArray);
            String str = localJSONObject1.toString();
            return str;
          }
          catch (JSONException localJSONException2)
          {
            Log.d("Favorites:", "JSONException", localJSONException2);
            return "{\"favorites\":[]}";
          }
        }
        catch (JSONException localJSONException1)
        {
          Log.d("Favorites:", "JSONException", localJSONException1);
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException)
        {
          Log.d("Favorites:", "UnsupportedEncodingException", localUnsupportedEncodingException);
        }
      }
      i += 1;
    }
  }
  
  public void removeHTMLItem(String paramString)
  {
    if (this.db != null)
    {
      this.db.getWritableDatabase().execSQL("DELETE FROM favorites WHERE md5ID='" + paramString + "';");
      findAndDelete("md5ID", paramString);
    }
  }
  
  public void removeRSSItem(String paramString1, String paramString2)
  {
    if (this.db != null)
    {
      SQLiteDatabase localSQLiteDatabase = this.db.getWritableDatabase();
      paramString1 = StringUtil.md5(paramString2 + paramString1);
      localSQLiteDatabase.execSQL("DELETE FROM favorites WHERE md5ID='" + paramString1 + "';");
      findAndDelete("md5ID", paramString1);
    }
  }
  
  private class DatabaseHelper
    extends SQLiteOpenHelper
  {
    public static final String COLUMN_ID = "_id";
    public static final String COLUMN_ITEM_ID = "itemID";
    public static final String COLUMN_LINK = "link";
    public static final String COLUMN_MD5_ID = "md5ID";
    public static final String COLUMN_PICTURE_URL = "pictureURL";
    public static final String COLUMN_RSS_URL = "rssURL";
    public static final String COLUMN_TITLE = "title";
    public static final String COLUMN_TYPE = "type";
    private static final String DATABASE_CREATE = "create table favorites( _id integer primary key autoincrement, type text not null, itemID text not null, md5ID text not null, rssURL text not null, title text not null, pictureURL text not null, link text not null);";
    private static final String DATABASE_NAME = "favorites.db";
    private static final int DATABASE_VERSION = 1;
    public static final String TABLE_FAVORITES = "favorites";
    
    public DatabaseHelper(Context paramContext)
    {
      super("favorites.db", null, 1);
    }
    
    public void onCreate(SQLiteDatabase paramSQLiteDatabase)
    {
      paramSQLiteDatabase.execSQL("create table favorites( _id integer primary key autoincrement, type text not null, itemID text not null, md5ID text not null, rssURL text not null, title text not null, pictureURL text not null, link text not null);");
    }
    
    public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
    {
      Log.w(SQLiteOpenHelper.class.getName(), "Upgrading database from version " + paramInt1 + " to " + paramInt2 + ", which will destroy all old data");
      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTSfavorites");
      onCreate(paramSQLiteDatabase);
    }
  }
}
