package com.qbiki.modules.favorites;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.ImageCache;
import java.io.InputStream;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Map;

public class FavoritesFragment
  extends SCFragment
{
  public static final String EXTRA_HEADER_IMAGE_IDENTIFIER = "HEADER_IMAGE";
  private View fview = null;
  ImageCache imageCache = new ImageCache();
  private ImageView imageView = null;
  private FavoritesListAdapter lAdapter = null;
  private ListView listView = null;
  
  public FavoritesFragment() {}
  
  private void init()
  {
    this.listView = ((ListView)this.fview.findViewById(2131099861));
    this.imageView = ((ImageView)this.fview.findViewById(2131099860));
    Object localObject = getArguments();
    if (localObject != null)
    {
      localObject = BitmapFactory.decodeStream(App.getResourceStream(((Bundle)localObject).getString("HEADER_IMAGE")));
      if (localObject != null)
      {
        this.imageView.setImageBitmap((Bitmap)localObject);
        this.imageView.setVisibility(0);
      }
    }
    this.lAdapter = new FavoritesListAdapter(getActivity(), 2130903109);
    this.listView.setAdapter(this.lAdapter);
    this.listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = ((FavoritesFragment.FavoritesListAdapter)paramAnonymousAdapterView.getAdapter()).favoriteAt(paramAnonymousInt);
        if (((String)paramAnonymousAdapterView.get("link")).length() > 0)
        {
          App.showPage(App.getResourceUrl((String)paramAnonymousAdapterView.get("link")), FavoritesFragment.this);
          return;
        }
        App.showPage("http://" + App.serverHostName + "/myapplications/" + App.username + "/" + App.appId + "/reader.ashx?itemid=" + URLEncoder.encode((String)paramAnonymousAdapterView.get("itemID")) + "&rssurl=" + URLEncoder.encode((String)paramAnonymousAdapterView.get("rssURL")), FavoritesFragment.this);
      }
    });
  }
  
  private Bitmap loadImageFromNetwork(String paramString)
  {
    Object localObject = this.imageCache.get(paramString);
    if ((localObject != null) || (paramString.startsWith("http://"))) {}
    try
    {
      localBitmap = BitmapFactory.decodeStream((InputStream)new URL(paramString).getContent());
      localObject = localBitmap;
      this.imageCache.put(paramString, localBitmap);
      localObject = localBitmap;
    }
    catch (Exception paramString)
    {
      Bitmap localBitmap;
      for (;;) {}
    }
    return localObject;
    try
    {
      localBitmap = BitmapFactory.decodeStream(App.getResourceStream(paramString));
      localObject = localBitmap;
      this.imageCache.put(paramString, localBitmap);
      localObject = localBitmap;
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    return localObject;
    return localObject;
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fview = paramLayoutInflater.inflate(2130903108, paramViewGroup, false);
    init();
    return this.fview;
  }
  
  public void onResume()
  {
    super.onResume();
    if (this.lAdapter != null)
    {
      Favorites localFavorites = Favorites.getInstance(getActivity());
      this.lAdapter.setData(localFavorites.getFavoriteList());
    }
  }
  
  static class CellHolder
  {
    ImageView arrowRight;
    ImageView image;
    TextView title;
    
    CellHolder() {}
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    private ImageView imageView;
    public int position = -1;
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return FavoritesFragment.this.loadImageFromNetwork(paramVarArgs[0]);
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      if ((this.imageView != null) && (this.imageView.getTag() != null) && (this.position == ((Integer)this.imageView.getTag()).intValue())) {
        this.imageView.setImageBitmap(paramBitmap);
      }
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
  
  public class FavoritesListAdapter
    extends BaseAdapter
  {
    Context context;
    ArrayList<Map<String, String>> favoritesList = new ArrayList();
    int layoutResourceId;
    
    public FavoritesListAdapter(Context paramContext, int paramInt)
    {
      this.layoutResourceId = paramInt;
      this.context = paramContext;
    }
    
    public Map<String, String> favoriteAt(int paramInt)
    {
      return (Map)this.favoritesList.get(paramInt);
    }
    
    public int getCount()
    {
      return this.favoritesList.size();
    }
    
    public ArrayList<Map<String, String>> getData()
    {
      return this.favoritesList;
    }
    
    public Map<String, String> getItem(int paramInt)
    {
      return (Map)this.favoritesList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      Object localObject1 = paramView;
      Object localObject2;
      if (localObject1 == null)
      {
        paramViewGroup = ((Activity)this.context).getLayoutInflater().inflate(this.layoutResourceId, paramViewGroup, false);
        paramView = new FavoritesFragment.CellHolder();
        paramView.image = ((ImageView)paramViewGroup.findViewById(2131099733));
        paramView.title = ((TextView)paramViewGroup.findViewById(2131099734));
        paramView.arrowRight = ((ImageView)paramViewGroup.findViewById(2131099737));
        paramViewGroup.setTag(paramView);
        localObject1 = favoriteAt(paramInt);
        localObject2 = (String)((Map)localObject1).get("md5ID");
        String str2 = (String)((Map)localObject1).get("link");
        String str3 = (String)((Map)localObject1).get("rssURL");
        String str1 = (String)((Map)localObject1).get("pictureURL");
        if ((str2.length() != 0) || (str3.length() != 0)) {
          break label297;
        }
        paramView.arrowRight.setVisibility(8);
        label168:
        paramView.image.setImageBitmap(null);
        paramView.image.setTag(Integer.valueOf(paramInt));
        paramView.title.setTag(Integer.valueOf(paramInt));
        if (FavoritesFragment.this.imageCache.get((String)localObject2) != null) {
          break label308;
        }
        localObject2 = new FavoritesFragment.DownloadImageTask(FavoritesFragment.this, null);
        ((FavoritesFragment.DownloadImageTask)localObject2).position = paramInt;
        ((FavoritesFragment.DownloadImageTask)localObject2).setImageView(paramView.image);
        ((FavoritesFragment.DownloadImageTask)localObject2).execute(new String[] { str1 });
      }
      for (;;)
      {
        localObject1 = (String)((Map)localObject1).get("title");
        paramView.title.setText((CharSequence)localObject1);
        return paramViewGroup;
        paramView = (FavoritesFragment.CellHolder)((View)localObject1).getTag();
        paramViewGroup = (ViewGroup)localObject1;
        break;
        label297:
        paramView.arrowRight.setVisibility(0);
        break label168;
        label308:
        paramView.image.setImageBitmap(FavoritesFragment.this.imageCache.get((String)localObject2));
      }
    }
    
    public void setData(ArrayList<Map<String, String>> paramArrayList)
    {
      this.favoritesList = paramArrayList;
      notifyDataSetChanged();
    }
  }
}
