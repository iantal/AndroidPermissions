package com.qbiki.modules.cameracover;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageCache;
import com.qbiki.util.ImageUtil;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class CameraCoverFrgament
  extends SCFragment
{
  public static final String COVERS_LIST_KEY = "COVERS_LIST_KEY";
  public static final String EXTRA_COMERA_COVERS_ARRAY = "EXTRA_COMERA_COVERS_ARRAY";
  public static final int REQUEST_OPEN_COVER_CAMERA = 1001;
  private int concurrent = 0;
  private ArrayList<String> covers = new ArrayList();
  private String emailToSend = "";
  private View fView = null;
  private ImageCache imageCache = new ImageCache();
  private ListView listView = null;
  private ArrayList<String> madeCovers = new ArrayList();
  private String pageid = "pageid";
  private ArrayList<DownloadImageTask> que = new ArrayList();
  private Button takePictureButton = null;
  private int thumbHeight = 70;
  private int thumbWidth = 70;
  
  public CameraCoverFrgament() {}
  
  private void addToQue(DownloadImageTask paramDownloadImageTask)
  {
    synchronized (this.que)
    {
      this.que.add(paramDownloadImageTask);
      if (this.concurrent == 0) {
        executeNextQue();
      }
      return;
    }
  }
  
  private void executeNextQue()
  {
    synchronized (this.que)
    {
      if (this.que.size() > 0)
      {
        DownloadImageTask localDownloadImageTask = (DownloadImageTask)this.que.get(0);
        localDownloadImageTask.execute(new String[] { localDownloadImageTask.url });
        this.concurrent += 1;
      }
      return;
    }
  }
  
  private Bitmap loadImageFromNetwork(String paramString)
  {
    Bitmap localBitmap3 = this.imageCache.get(paramString);
    Bitmap localBitmap1 = localBitmap3;
    if (localBitmap3 == null) {}
    try
    {
      localBitmap1 = ImageUtil.getScaledExternalBitmap(paramString, this.thumbWidth, this.thumbHeight, true);
      this.imageCache.put(paramString, localBitmap1);
      return localBitmap1;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Bitmap localBitmap2 = localBitmap3;
      }
    }
  }
  
  private void removeAllFromQue()
  {
    ArrayList localArrayList = this.que;
    int i = 0;
    try
    {
      while (i < this.que.size())
      {
        ((DownloadImageTask)this.que.get(0)).cancel(true);
        i += 1;
      }
      this.que.clear();
      return;
    }
    finally {}
  }
  
  private void removeFromQue(DownloadImageTask paramDownloadImageTask)
  {
    synchronized (this.que)
    {
      this.que.remove(paramDownloadImageTask);
      this.concurrent -= 1;
      return;
    }
  }
  
  protected void askToDeleteCover(final int paramInt)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    localBuilder.setMessage("Are you sure you want to delete this item?").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (CameraCoverFrgament.CoversListAdapter)CameraCoverFrgament.this.listView.getAdapter();
        File localFile = new File((String)paramAnonymousDialogInterface.getItem(paramInt).get("imagePath"));
        if (localFile.exists())
        {
          if (localFile.delete()) {
            paramAnonymousDialogInterface.removeAt(paramInt);
          }
          return;
        }
        paramAnonymousDialogInterface.removeAt(paramInt);
      }
    }).setNegativeButton("No", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.create().show();
  }
  
  protected void init()
  {
    Object localObject1 = getArguments();
    Object localObject2;
    if (localObject1 != null)
    {
      localObject2 = ((Bundle)localObject1).getStringArrayList("EXTRA_COMERA_COVERS_ARRAY");
      if (localObject2 != null) {
        this.covers = ((ArrayList)localObject2);
      }
      localObject2 = ((Bundle)localObject1).getString("EMAIL_TO_SEND");
      if (localObject2 != null) {
        this.emailToSend = ((String)localObject2);
      }
      this.pageid = ((Bundle)localObject1).getString("PAGE_ID");
    }
    readCovers();
    this.listView = ((ListView)this.fView.findViewById(2131099819));
    this.takePictureButton = ((Button)this.fView.findViewById(2131099820));
    localObject1 = new CoversListAdapter(getActivity(), 2130903083);
    this.listView.setAdapter((ListAdapter)localObject1);
    int i = 0;
    while (i < this.madeCovers.size())
    {
      localObject2 = (String)this.madeCovers.get(i);
      HashMap localHashMap = new HashMap();
      localHashMap.put("title", new File((String)localObject2).getName());
      localHashMap.put("imagePath", localObject2);
      ((CoversListAdapter)localObject1).addCover(localHashMap);
      i += 1;
    }
    this.listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        CameraCoverFrgament.this.openCoversPreviewAt(paramAnonymousInt);
      }
    });
    this.listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        CameraCoverFrgament.this.askToDeleteCover(paramAnonymousInt);
        return false;
      }
    });
    this.takePictureButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        CameraCoverFrgament.this.openCameraCoverTaker();
      }
    });
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    switch (paramInt1)
    {
    }
    do
    {
      do
      {
        return;
      } while ((paramInt2 != -1) || (paramIntent == null));
      paramIntent = paramIntent.getStringExtra("IMAGE_PATH");
    } while (paramIntent == null);
    CoversListAdapter localCoversListAdapter = (CoversListAdapter)this.listView.getAdapter();
    HashMap localHashMap = new HashMap();
    localHashMap.put("title", new File(paramIntent).getName());
    localHashMap.put("imagePath", paramIntent);
    localCoversListAdapter.addCover(localHashMap);
    this.madeCovers.add(paramIntent);
    saveCovers();
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903082, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public void onPause()
  {
    super.onPause();
    this.imageCache.clear();
    removeAllFromQue();
  }
  
  protected void openCameraCoverTaker()
  {
    if (getActivity().getPackageManager().hasSystemFeature("android.hardware.camera"))
    {
      Intent localIntent = new Intent(getActivity(), CoverCamera.class);
      localIntent.putStringArrayListExtra("EXTRA_COMERA_COVERS_ARRAY", this.covers);
      startActivityForResult(localIntent, 1001);
      return;
    }
    DialogUtil.showAlert(getActivity(), 2131362139, 2131362143);
  }
  
  protected void openCoversPreviewAt(int paramInt)
  {
    Bundle localBundle = new Bundle();
    localBundle.putStringArrayList("COVERS_ARRAY_IDENTIFIER", new ArrayList(this.madeCovers));
    localBundle.putInt("COVERS_INITIAL_INDEX_IDENTIFIER", paramInt);
    localBundle.putString("EMAIL_TO_SEND", this.emailToSend);
    App.showPage(new FragmentInfo(CoversPreviewFragment.class.getName(), localBundle), this);
  }
  
  protected void readCovers()
  {
    String[] arrayOfString = getActivity().getSharedPreferences(this.pageid, 0).getString("COVERS_LIST_KEY", "").split("\\|");
    int i = 0;
    while (i < arrayOfString.length)
    {
      String str = arrayOfString[i];
      if (str.length() > 0) {
        this.madeCovers.add(str);
      }
      i += 1;
    }
  }
  
  protected void saveCovers()
  {
    String str = "";
    int i = 0;
    while (i < this.madeCovers.size())
    {
      str = str + (String)this.madeCovers.get(i) + "|";
      i += 1;
    }
    SharedPreferences.Editor localEditor = getActivity().getSharedPreferences(this.pageid, 0).edit();
    localEditor.putString("COVERS_LIST_KEY", str);
    localEditor.commit();
  }
  
  static class CellHolder
  {
    ImageView arrowRight;
    ImageView image;
    TextView title;
    
    CellHolder() {}
  }
  
  public class CoversListAdapter
    extends BaseAdapter
  {
    Context context;
    ArrayList<Map<String, String>> coversList = new ArrayList();
    int layoutResourceId;
    
    public CoversListAdapter(Context paramContext, int paramInt)
    {
      this.layoutResourceId = paramInt;
      this.context = paramContext;
    }
    
    public void addCover(Map<String, String> paramMap)
    {
      this.coversList.add(paramMap);
      notifyDataSetChanged();
    }
    
    public Map<String, String> favoriteAt(int paramInt)
    {
      return (Map)this.coversList.get(paramInt);
    }
    
    public int getCount()
    {
      return this.coversList.size();
    }
    
    public ArrayList<Map<String, String>> getData()
    {
      return this.coversList;
    }
    
    public Map<String, String> getItem(int paramInt)
    {
      return (Map)this.coversList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      Object localObject1 = paramView;
      Object localObject2;
      if (localObject1 == null)
      {
        paramViewGroup = ((Activity)this.context).getLayoutInflater().inflate(this.layoutResourceId, paramViewGroup, false);
        paramView = new CameraCoverFrgament.CellHolder();
        paramView.image = ((ImageView)paramViewGroup.findViewById(2131099733));
        paramView.title = ((TextView)paramViewGroup.findViewById(2131099734));
        paramView.arrowRight = ((ImageView)paramViewGroup.findViewById(2131099737));
        paramViewGroup.setTag(paramView);
        localObject2 = favoriteAt(paramInt);
        localObject1 = (String)((Map)localObject2).get("title");
        localObject2 = (String)((Map)localObject2).get("imagePath");
        paramView.image.setImageBitmap(null);
        paramView.image.setTag(Integer.valueOf(paramInt));
        paramView.title.setTag(Integer.valueOf(paramInt));
        if (paramView.image.getWidth() > 0) {
          CameraCoverFrgament.access$202(CameraCoverFrgament.this, paramView.image.getWidth());
        }
        if (paramView.image.getHeight() > 0) {
          CameraCoverFrgament.access$302(CameraCoverFrgament.this, paramView.image.getHeight());
        }
        if (CameraCoverFrgament.this.imageCache.get((String)localObject2) != null) {
          break label281;
        }
        CameraCoverFrgament.DownloadImageTask localDownloadImageTask = new CameraCoverFrgament.DownloadImageTask(CameraCoverFrgament.this, null);
        localDownloadImageTask.position = paramInt;
        localDownloadImageTask.setImageView(paramView.image);
        localDownloadImageTask.url = ((String)localObject2);
        CameraCoverFrgament.this.addToQue(localDownloadImageTask);
      }
      for (;;)
      {
        paramView.title.setText((CharSequence)localObject1);
        return paramViewGroup;
        paramView = (CameraCoverFrgament.CellHolder)((View)localObject1).getTag();
        paramViewGroup = (ViewGroup)localObject1;
        break;
        label281:
        paramView.image.setImageBitmap(CameraCoverFrgament.this.imageCache.get((String)localObject2));
      }
    }
    
    public void removeAt(int paramInt)
    {
      this.coversList.remove(paramInt);
      CameraCoverFrgament.this.madeCovers.remove(paramInt);
      notifyDataSetChanged();
      CameraCoverFrgament.this.saveCovers();
    }
    
    public void setData(ArrayList<Map<String, String>> paramArrayList)
    {
      this.coversList = paramArrayList;
      notifyDataSetChanged();
    }
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    private ImageView imageView;
    public int position = -1;
    public String url = "";
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return CameraCoverFrgament.this.loadImageFromNetwork(paramVarArgs[0]);
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      if ((this.imageView != null) && (this.imageView.getTag() != null) && (this.position == ((Integer)this.imageView.getTag()).intValue())) {
        this.imageView.setImageBitmap(paramBitmap);
      }
      CameraCoverFrgament.this.removeFromQue(this);
      CameraCoverFrgament.this.executeNextQue();
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
}
