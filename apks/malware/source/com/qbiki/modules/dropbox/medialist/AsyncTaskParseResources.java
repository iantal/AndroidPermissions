package com.qbiki.modules.dropbox.medialist;

import android.os.AsyncTask;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DataUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class AsyncTaskParseResources
  extends AsyncTask<Object, Void, HashMap<String, Object>>
{
  static final boolean DEBUG = false;
  public static final byte JSON_SOURCE_TYPE = 1;
  public static final String KEY_FILES = "KEY_FILES";
  public static final String KEY_JSON_CONFIG = "KEY_JSON_CONFIG";
  public static final int PARSE_RESOURCES = 101;
  static final String TAG = AsyncTaskParseResources.class.getSimpleName();
  public static final int UPDATE_FILES_LIST_AND_PARSE_RESOURCES = 100;
  AsyncTaskListener listener;
  
  public AsyncTaskParseResources() {}
  
  private List<MediaFile> getFilesListFromJSON(JSONObject paramJSONObject, String paramString)
    throws IllegalArgumentException, IOException, JSONException, Exception
  {
    localArrayList = new ArrayList(0);
    try
    {
      paramString = new JSONObject(DataUtil.readString(new FileInputStream(paramString))).getJSONObject("folder").getJSONArray("content");
      int i = 0;
      for (;;)
      {
        if (i < paramString.length())
        {
          JSONObject localJSONObject = paramString.getJSONObject(i);
          try
          {
            localJSONObject.put("imageThmb", paramJSONObject.getString("imageThmb"));
            localArrayList.add(new MediaFile(localJSONObject));
            i += 1;
          }
          catch (JSONException localJSONException)
          {
            for (;;)
            {
              localJSONObject.put("imageThmb", "dropbox_media_file.png");
            }
          }
        }
      }
      return localArrayList;
    }
    catch (Exception paramJSONObject)
    {
      Log.e(TAG, "ERROR: " + paramJSONObject.getLocalizedMessage(), paramJSONObject);
    }
  }
  
  private JSONObject getSettingsFromJSONFile(String paramString)
    throws IllegalArgumentException, IOException, JSONException, Exception
  {
    if (!App.resourceExists(paramString)) {
      throw new FileNotFoundException("JSON config file not found! Path:" + paramString);
    }
    try
    {
      paramString = new JSONObject(DataUtil.readString(App.getResourceStream(paramString)));
      return paramString;
    }
    catch (Exception paramString)
    {
      Log.e(TAG, "ERROR: " + paramString.getLocalizedMessage(), paramString);
    }
    return null;
  }
  
  private void saveFilesListFromDropboxToFile(JSONObject paramJSONObject, String paramString)
  {
    try
    {
      Object localObject2 = paramJSONObject.getJSONArray("fileTypeFilter");
      Object localObject3 = paramJSONObject.getString("Path");
      paramJSONObject = paramJSONObject.getString("tokenid");
      Object localObject1 = new JSONObject();
      ((JSONObject)localObject1).put("directory", localObject3);
      ((JSONObject)localObject1).put("searchQuery", localObject2);
      ((JSONObject)localObject1).put("includeDirectories", false);
      localObject2 = new HttpPost(DropboxHandlerConstants.HANLDER_URL);
      localObject3 = new DefaultHttpClient();
      ArrayList localArrayList = new ArrayList(3);
      localArrayList.add(new BasicNameValuePair("tokenid", paramJSONObject));
      localArrayList.add(new BasicNameValuePair("searchRequest", ((JSONObject)localObject1).toString()));
      localArrayList.add(new BasicNameValuePair("action", "GET_DROPBOX_FILES_LIST_FROM_DIR_WITH_QUERY"));
      ((HttpPost)localObject2).setEntity(new UrlEncodedFormEntity(localArrayList));
      paramJSONObject = ((HttpClient)localObject3).execute((HttpUriRequest)localObject2);
      localObject1 = paramJSONObject.getStatusLine();
      Log.i(TAG, "Status code: " + localObject1.toString());
      if (((StatusLine)localObject1).getStatusCode() == 200)
      {
        paramJSONObject = paramJSONObject.getEntity().getContent();
        paramString = new FileOutputStream(paramString);
        localObject1 = new byte['Ð€'];
        for (;;)
        {
          int i = paramJSONObject.read((byte[])localObject1);
          if (i <= -1) {
            break;
          }
          paramString.write((byte[])localObject1, 0, i);
        }
      }
      return;
    }
    catch (UnsupportedEncodingException paramJSONObject)
    {
      Log.e(TAG, "ERROR: " + paramJSONObject.getLocalizedMessage(), paramJSONObject);
      return;
      paramString.close();
      return;
    }
    catch (ClientProtocolException paramJSONObject)
    {
      Log.e(TAG, "ERROR: " + paramJSONObject.getLocalizedMessage(), paramJSONObject);
      return;
      Log.e(TAG, "Failed to get response");
      return;
    }
    catch (IOException paramJSONObject)
    {
      Log.e(TAG, "ERROR: " + paramJSONObject.getLocalizedMessage(), paramJSONObject);
      return;
    }
    catch (JSONException paramJSONObject)
    {
      Log.e(TAG, "ERROR: " + paramJSONObject.getLocalizedMessage(), paramJSONObject);
    }
  }
  
  protected HashMap<String, Object> doInBackground(Object... paramVarArgs)
  {
    new ArrayList(0);
    HashMap localHashMap = new HashMap(0);
    try
    {
      Object localObject1 = (String)String.class.cast(paramVarArgs[0]);
      Object localObject2 = (String)String.class.cast(paramVarArgs[1]);
      this.listener = ((AsyncTaskListener)AsyncTaskListener.class.cast(paramVarArgs[3]));
      localObject2 = getSettingsFromJSONFile((String)localObject2);
      if (localObject2 != null) {
        localHashMap.put("KEY_JSON_CONFIG", localObject2);
      }
      if (((Integer)Integer.class.cast(paramVarArgs[2])).intValue() == 100) {
        saveFilesListFromDropboxToFile((JSONObject)localObject2, (String)localObject1);
      }
      for (;;)
      {
        localObject1 = getFilesListFromJSON((JSONObject)localObject2, (String)localObject1);
        paramVarArgs = localHashMap;
        if (localObject1 == null) {
          break;
        }
        localHashMap.put("KEY_FILES", localObject1);
        return localHashMap;
        if (!new File((String)localObject1).exists()) {
          saveFilesListFromDropboxToFile((JSONObject)localObject2, (String)localObject1);
        }
      }
      return paramVarArgs;
    }
    catch (Exception paramVarArgs)
    {
      Log.e(TAG, "ERROR: " + paramVarArgs.getLocalizedMessage(), paramVarArgs);
      paramVarArgs = null;
    }
  }
  
  protected void onPostExecute(HashMap<String, Object> paramHashMap)
  {
    this.listener.asyncTaskFinished(paramHashMap);
    super.onPostExecute(paramHashMap);
  }
}
