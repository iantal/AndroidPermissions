package com.qbiki.modules.dynamiclist;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Base64;
import android.util.Log;
import android.util.SparseIntArray;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.ListView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.widget.SearchView;
import com.actionbarsherlock.widget.SearchView.OnQueryTextListener;
import com.qbiki.modules.fusioncharts.FusionChartsFragment;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragmentHelper;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptAuthListener;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.IntentUtil;
import com.qbiki.util.StringUtil;
import com.qbiki.util.XmlPullUtil;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class DynamicListFragment
  extends SCListFragment
  implements SearchView.OnQueryTextListener
{
  public static final String CONFIG_RESOURCE_NAME_OR_URL = "CONFIG_RESOURCE_NAME_OR_URL";
  private static final boolean DEBUG = false;
  public static final String ENABLE_LOGOUT_BTN = "ENABLE_LOGOUT_BTN";
  public static final String ENABLE_REFRESH_BTN = "ENABLE_REFRESH_BTN";
  public static final String LIST_ID = "LIST_ID";
  public static final String LV_DIVIDER_ENABLED = "LV_DIVIDER_ENABLED";
  private static final String NEED_AUTHORIZATION = "NEED_AUTHORIZATION";
  private static final String SEARCH_TYPE_CONTAINS = "contains";
  private static final String SEARCH_TYPE_STARTS = "starts";
  private static final String SEPARATOR_STYLE_NONE = "SEPARATOR_STYLE_NONE";
  private static final String SEPARATOR_STYLE_SINGLE_LINE = "SEPARATOR_STYLE_SINGLE_LINE";
  private static final int SIDE_FAST_SCROLLER_PADDING = 32;
  private static final int SIDE_PADDING = 14;
  private static final String TAG = "DynamicListFragment";
  private static String mCachedConfigFile = null;
  private static String mCachedConfigResourceNameOrUrl = null;
  private boolean mClearCacheOnDestroy = false;
  private String mConfigRecourceNameOrUrl = null;
  private boolean mEnableLogOutButton = false;
  private boolean mEnableRefreshButton = false;
  private boolean mIsAuthorized = false;
  private List<DynamicListItem> mItems = new ArrayList();
  private DynamicListAdapter mItemsAdapter;
  private String mListId = "root";
  private String mListStyle;
  private String mListTitle = null;
  private ListView mListView;
  private View mLoadingView;
  private View mNoItemsView;
  private boolean mParsingConfigFile = false;
  private boolean mSearchEnabled = false;
  private List<DynamicListItem> mSearchResultItems = new ArrayList();
  private DynamicListAdapter mSearchResultsAdapter;
  private String mSearchType = "starts";
  private SearchView mSearchView;
  private boolean mSectionIndexEnabled = false;
  private SparseIntArray mSectionPositions = new SparseIntArray();
  private List<String> mSections = new ArrayList();
  private String mSeparatorStyle = "SEPARATOR_STYLE_SINGLE_LINE";
  private boolean mShowingSearchResults = false;
  private int mSideFastScrollerPadding = 0;
  private int mSidePadding = 0;
  private HashMap<String, DynamicItemStyle> mStyles = new HashMap();
  
  public DynamicListFragment() {}
  
  private void authorization(String paramString1, String paramString2)
  {
    this.mNoItemsView.setVisibility(8);
    this.mLoadingView.setVisibility(0);
    new AuthorizationRequest(null).execute(new String[] { paramString1, paramString2 });
  }
  
  @TargetApi(11)
  private void configureScrollBar(boolean paramBoolean)
  {
    this.mListView.setFastScrollEnabled(paramBoolean);
    if (Build.VERSION.SDK_INT >= 11)
    {
      this.mListView.setFastScrollAlwaysVisible(paramBoolean);
      if (!paramBoolean) {
        break label60;
      }
    }
    label60:
    for (int i = this.mSideFastScrollerPadding;; i = this.mSidePadding)
    {
      this.mListView.setPadding(this.mSidePadding, this.mListView.getPaddingTop(), i, this.mListView.getPaddingBottom());
      return;
    }
  }
  
  private void filterItems(String paramString)
  {
    this.mSearchResultItems.clear();
    paramString = paramString.toLowerCase(Locale.getDefault());
    DynamicListItem localDynamicListItem;
    if (this.mSearchType.equals("starts"))
    {
      localIterator = this.mItems.iterator();
      while (localIterator.hasNext())
      {
        localDynamicListItem = (DynamicListItem)localIterator.next();
        if ((localDynamicListItem.getType() != 0) && (localDynamicListItem.getText().toLowerCase(Locale.getDefault()).startsWith(paramString))) {
          this.mSearchResultItems.add(localDynamicListItem);
        }
      }
    }
    Iterator localIterator = this.mItems.iterator();
    while (localIterator.hasNext())
    {
      localDynamicListItem = (DynamicListItem)localIterator.next();
      if ((localDynamicListItem.getType() != 0) && (localDynamicListItem.getText().toLowerCase(Locale.getDefault()).contains(paramString))) {
        this.mSearchResultItems.add(localDynamicListItem);
      }
    }
  }
  
  private String getConfigFileString()
    throws IOException, MalformedURLException
  {
    if ((mCachedConfigResourceNameOrUrl == null) || (!mCachedConfigResourceNameOrUrl.equals(this.mConfigRecourceNameOrUrl)))
    {
      mCachedConfigFile = null;
      this.mClearCacheOnDestroy = true;
    }
    if (mCachedConfigFile == null)
    {
      mCachedConfigFile = DataUtil.readString(getResourceOrUrlStream(this.mConfigRecourceNameOrUrl));
      mCachedConfigResourceNameOrUrl = this.mConfigRecourceNameOrUrl;
    }
    return mCachedConfigFile;
  }
  
  private HashMap<String, String> getFusionActionParams(String paramString)
  {
    HashMap localHashMap = new HashMap(2);
    int i = paramString.indexOf("?");
    String str1 = null;
    if (i >= 0)
    {
      String str2 = paramString.substring(0, i);
      str1 = paramString.substring(i + 1);
      paramString = str2;
      if (paramString == null) {
        break label104;
      }
      label47:
      localHashMap.put("pageID", paramString);
      if (!StringUtil.isEmpty(str1))
      {
        i = str1.indexOf("=");
        if (i >= 0)
        {
          paramString = str1.substring(i + 1);
          if (paramString == null) {
            break label111;
          }
        }
      }
    }
    for (;;)
    {
      localHashMap.put("actionParam", paramString);
      return localHashMap;
      break;
      label104:
      paramString = "";
      break label47;
      label111:
      paramString = "";
    }
  }
  
  public static InputStream getResourceOrUrlStream(String paramString)
    throws IOException
  {
    if (paramString.contains("://")) {
      return HTTPUtil.getUrlStream(paramString, true, true);
    }
    return App.getResourceStream(paramString);
  }
  
  private View getSearchView()
  {
    this.mSearchView = new SearchView(getActivity())
    {
      public void onActionViewCollapsed()
      {
        super.onActionViewCollapsed();
        setQuery("", true);
      }
    };
    this.mSearchView.setQueryHint(getString(2131362038));
    this.mSearchView.setOnQueryTextListener(this);
    SearchView localSearchView = this.mSearchView;
    if (!DeviceUtil.isTablet(getActivity())) {}
    for (boolean bool = true;; bool = false)
    {
      localSearchView.setIconifiedByDefault(bool);
      return this.mSearchView;
    }
  }
  
  private void onParseConfigFileDone(String paramString)
  {
    if (getActivity() == null)
    {
      Log.w("DynamicListFragment", "activity is null");
      return;
    }
    invalidateOptionsMenu();
    if ((!StringUtil.isEmpty(paramString)) && (paramString.equals("NEED_AUTHORIZATION")))
    {
      authorization("", "");
      return;
    }
    this.mIsAuthorized = true;
    this.mLoadingView.setVisibility(8);
    this.mListView.setVisibility(0);
    if (paramString != null) {
      DialogUtil.showAlert(getActivity(), getString(2131361915), paramString, new DialogInterface.OnClickListener()new DialogInterface.OnCancelListener
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          App.closePage(DynamicListFragment.this);
        }
      }, new DialogInterface.OnCancelListener()
      {
        public void onCancel(DialogInterface paramAnonymousDialogInterface)
        {
          App.closePage(DynamicListFragment.this);
        }
      });
    }
    if ((this.mListTitle != null) && (this.mListTitle.length() > 0)) {
      SCFragmentHelper.setActionBarTitle(this, this.mListTitle);
    }
    this.mItemsAdapter = new DynamicListAdapter(getActivity(), this.mItems, (String[])this.mSections.toArray(new String[this.mSections.size()]), this.mSectionPositions, this.mStyles);
    this.mSearchResultsAdapter = new DynamicListAdapter(getActivity(), this.mSearchResultItems, null, null, null);
    this.mListView.setAdapter(this.mItemsAdapter);
    if (this.mSeparatorStyle.equals("SEPARATOR_STYLE_NONE"))
    {
      this.mListView.setDivider(null);
      this.mListView.setDividerHeight(0);
    }
    if ((this.mStyles != null) && (this.mStyles.size() > 0))
    {
      this.mListView.setSelector(2130837709);
      this.mListView.setDrawSelectorOnTop(true);
    }
    configureScrollBar(this.mSectionIndexEnabled);
    invalidateOptionsMenu();
  }
  
  private void openFusionChartPage(String paramString)
  {
    paramString = getFusionActionParams(paramString);
    String str = (String)paramString.get("pageID");
    paramString = (String)paramString.get("actionParam");
    if (App.getPageForUrl(str) == null)
    {
      DialogUtil.showAlert(getActivity(), 2131361915, getActivity().getResources().getString(2131362040));
      return;
    }
    Bundle localBundle = new Bundle();
    localBundle.putString("ARG_URL", App.getResourceUrl(str));
    localBundle.putString("PAGE_ID", str);
    if (paramString != null) {}
    for (;;)
    {
      localBundle.putString("ACTION_PARAMS", paramString);
      startActivity(App.getPageIntent(new FragmentInfo(FusionChartsFragment.class.getName(), localBundle), getActivity()));
      return;
      paramString = "";
    }
  }
  
  private String parseConfigFile()
  {
    Object localObject5 = "";
    Object localObject7 = "";
    int i = 0;
    XmlPullParser localXmlPullParser = Xml.newPullParser();
    for (;;)
    {
      HashMap localHashMap1;
      HashMap localHashMap2;
      try
      {
        localXmlPullParser.setInput(new StringReader(getConfigFileString()));
        localHashMap1 = new HashMap();
        localHashMap2 = new HashMap();
        k = localXmlPullParser.getEventType();
      }
      catch (Exception localException)
      {
        Object localObject1;
        Log.e("DynamicListFragment", "Error parsing config file: \"" + this.mConfigRecourceNameOrUrl + "\": " + localException, localException);
        localObject5 = this.mConfigRecourceNameOrUrl;
        if (!localException.getMessage().equals("401 - UNAUTHORIZED")) {
          continue;
        }
        return "NEED_AUTHORIZATION";
        if (!this.mConfigRecourceNameOrUrl.contains("file://")) {
          continue;
        }
        localObject2 = ((String)localObject5).substring(((String)localObject5).lastIndexOf("/") + 1);
        if (!App.isPreviewer) {
          break;
        }
        return "Could not load configuration file: " + (String)localObject2 + ".";
        localObject2 = localObject5;
        if (!this.mConfigRecourceNameOrUrl.contains("://")) {
          continue;
        }
        localObject6 = (ConnectivityManager)getActivity().getSystemService("connectivity");
        if (((ConnectivityManager)localObject6).getActiveNetworkInfo() == null) {
          continue;
        }
        localObject2 = localObject5;
        if (((ConnectivityManager)localObject6).getActiveNetworkInfo().isConnected()) {
          continue;
        }
        return getString(2131361931);
        localObject8 = localXmlPullParser.getName();
        if (!((String)localObject8).equalsIgnoreCase("list")) {
          continue;
        }
        localObject6 = parseList(localXmlPullParser);
        localObject2 = localObject7;
        j = i;
        continue;
        if (!((String)localObject8).equalsIgnoreCase("section")) {
          continue;
        }
        parseSection(localXmlPullParser);
        localObject6 = localObject5;
        localObject2 = localObject7;
        j = i;
        continue;
      }
      catch (XmlPullParserException localXmlPullParserException)
      {
        Log.e("DynamicListFragment", "parseConfigFile: " + localXmlPullParserException.toString(), localXmlPullParserException);
        return "Error parsing configuration file (parser exception).";
        if (!((String)localObject8).equalsIgnoreCase("item")) {
          break label569;
        }
        if (StringUtil.isEmpty((String)localObject7)) {
          break label550;
        }
        localObject8 = parseStyleItem(localXmlPullParser, (String)localObject7);
        localObject6 = localObject5;
        localObject3 = localObject7;
        j = i;
        if (localObject8 == null) {
          continue;
        }
        localObject6 = localObject5;
        localObject3 = localObject7;
        j = i;
        if (localObject8.length != 3) {
          continue;
        }
        if (!localObject8[0].equalsIgnoreCase("text")) {
          break label523;
        }
        localHashMap1.put(localObject8[1], localObject8[2]);
        localObject6 = localObject5;
        localObject3 = localObject7;
        j = i;
        continue;
      }
      catch (IOException localIOException)
      {
        Log.e("DynamicListFragment", "parseConfigFile: " + localIOException.toString(), localIOException);
        return "Error parsing configuration file (IO exception).";
      }
      int k = localXmlPullParser.next();
      localObject5 = localObject6;
      localObject7 = localObject1;
      i = j;
      break label741;
      label523:
      localHashMap2.put(localObject8[1], localObject8[2]);
      Object localObject6 = localObject5;
      Object localObject4 = localObject7;
      int j = i;
      continue;
      label550:
      parseItem(localXmlPullParser);
      localObject6 = localObject5;
      localObject4 = localObject7;
      j = i;
      continue;
      label569:
      localObject6 = localObject5;
      localObject4 = localObject7;
      j = i;
      if (((String)localObject8).equalsIgnoreCase("style"))
      {
        localObject4 = parseStyle(localXmlPullParser);
        localObject6 = localObject5;
        j = i;
        continue;
        localObject8 = localXmlPullParser.getName();
        if (((String)localObject8).equalsIgnoreCase("list"))
        {
          localObject6 = localObject5;
          localObject4 = localObject7;
          j = i;
          if (((String)localObject5).equals(this.mListId))
          {
            j = 1;
            localObject6 = localObject5;
            localObject4 = localObject7;
          }
        }
        else
        {
          localObject6 = localObject5;
          localObject4 = localObject7;
          j = i;
          if (((String)localObject8).equalsIgnoreCase("style"))
          {
            localObject4 = "";
            localObject6 = localObject5;
            j = i;
            label741:
            while ((k == 1) || (i != 0))
            {
              Object localObject2;
              Object localObject8;
              Object localObject3;
              prepareCustomStyles(localHashMap1, localHashMap2);
              if (i == 0) {
                return "List with id \"" + this.mListId + "\" not found.";
              }
              return null;
            }
            localObject6 = localObject5;
            localObject4 = localObject7;
            j = i;
            switch (k)
            {
            }
            localObject6 = localObject5;
            localObject4 = localObject7;
            j = i;
          }
        }
      }
    }
    return "Could not load configuration file.";
  }
  
  private void parseItem(XmlPullParser paramXmlPullParser)
  {
    DynamicListItem localDynamicListItem = new DynamicListItem();
    if (this.mSections.size() <= 0) {
      return;
    }
    int i = this.mSections.size() - 1;
    localDynamicListItem.setSectionIndex(i);
    localDynamicListItem.setSection((String)this.mSections.get(i));
    String str = paramXmlPullParser.getAttributeValue(null, "text");
    if (str != null) {
      localDynamicListItem.setText(str.replaceAll("\\\\n", "\n"));
    }
    i = 1;
    try
    {
      j = Integer.parseInt(paramXmlPullParser.getAttributeValue(null, "detailTextLines"));
      i = j;
    }
    catch (Exception localException)
    {
      int j;
      label418:
      for (;;) {}
    }
    j = i;
    if (i < 0) {
      j = 1;
    }
    localDynamicListItem.setDetailTextLines(j);
    str = paramXmlPullParser.getAttributeValue(null, "detailText");
    if (str != null) {
      localDynamicListItem.setDetailText(str.replaceAll("\\\\n", "\n"));
    }
    localDynamicListItem.setStyle(paramXmlPullParser.getAttributeValue(null, "style"));
    if ((localDynamicListItem.getStyle() == null) || (localDynamicListItem.getStyle().equalsIgnoreCase("default")))
    {
      localDynamicListItem.setImageSrcPath(paramXmlPullParser.getAttributeValue(null, "image"));
      localDynamicListItem.setAction(paramXmlPullParser.getAttributeValue(null, "action"));
      str = paramXmlPullParser.getAttributeValue(null, "actionParam");
      if (str != null)
      {
        paramXmlPullParser = str;
        if (str.trim().length() != 0) {}
      }
      else
      {
        if ((localDynamicListItem.getDetailText() == null) || (localDynamicListItem.getDetailText().equals(""))) {
          break label418;
        }
      }
    }
    for (paramXmlPullParser = localDynamicListItem.getDetailText();; paramXmlPullParser = localDynamicListItem.getText())
    {
      localDynamicListItem.setActionParam(paramXmlPullParser);
      this.mItems.add(localDynamicListItem);
      return;
      if ((localDynamicListItem.getStyle().equals("style1")) || (localDynamicListItem.getStyle().equals("style2")))
      {
        localDynamicListItem.setType(3);
        break;
      }
      if (localDynamicListItem.getStyle().equals("subtitle"))
      {
        localDynamicListItem.setType(3);
        break;
      }
      if (localDynamicListItem.getStyle().equals("image"))
      {
        localDynamicListItem.setType(6);
        break;
      }
      if (localDynamicListItem.getStyle().length() <= 0) {
        break;
      }
      localDynamicListItem.setType(5);
      break;
    }
  }
  
  private String parseList(XmlPullParser paramXmlPullParser)
    throws XmlPullParserException, IOException
  {
    String str = paramXmlPullParser.getAttributeValue(null, "id");
    if (str.equals(this.mListId))
    {
      this.mListStyle = paramXmlPullParser.getAttributeValue(null, "style");
      if (this.mListStyle == null) {
        this.mListStyle = "plain";
      }
      this.mSeparatorStyle = paramXmlPullParser.getAttributeValue(null, "separatorStyle");
      if ((!StringUtil.isEmpty(this.mSeparatorStyle)) && (this.mSeparatorStyle.equalsIgnoreCase("none"))) {}
      for (this.mSeparatorStyle = "SEPARATOR_STYLE_NONE";; this.mSeparatorStyle = "SEPARATOR_STYLE_SINGLE_LINE")
      {
        this.mListTitle = paramXmlPullParser.getAttributeValue(null, "title");
        this.mSectionIndexEnabled = "true".equals(paramXmlPullParser.getAttributeValue(null, "sectionIndex"));
        this.mSearchEnabled = "true".equals(paramXmlPullParser.getAttributeValue(null, "textSearch"));
        this.mSearchType = paramXmlPullParser.getAttributeValue(null, "searchType");
        if (this.mSearchType == null) {
          this.mSearchType = "starts";
        }
        return str;
      }
    }
    XmlPullUtil.skipSubTree(paramXmlPullParser);
    return str;
  }
  
  private void parseSection(XmlPullParser paramXmlPullParser)
  {
    String str1 = paramXmlPullParser.getAttributeValue(null, "title");
    String str2 = paramXmlPullParser.getAttributeValue(null, "style");
    String str3 = paramXmlPullParser.getAttributeValue(null, "image");
    int i = this.mSections.size();
    this.mSectionPositions.put(i, this.mItems.size());
    this.mSections.add(str1);
    paramXmlPullParser = Integer.valueOf(0);
    if (!StringUtil.isEmpty(str2)) {
      paramXmlPullParser = Integer.valueOf(1);
    }
    if ((str1 != null) && (!str1.equals(""))) {
      this.mItems.add(new DynamicListItem().setType(paramXmlPullParser.intValue()).setText(str1).setSectionIndex(i).setImageSrcPath(str3).setStyle(str2));
    }
    while ((!this.mListStyle.equals("grouped")) || (this.mItems.size() == 0)) {
      return;
    }
    this.mItems.add(new DynamicListItem().setType(paramXmlPullParser.intValue()).setText("").setSectionIndex(i).setImageSrcPath(str3).setStyle(str2));
  }
  
  private String parseStyle(XmlPullParser paramXmlPullParser)
  {
    String str = paramXmlPullParser.getAttributeValue(null, "name");
    paramXmlPullParser = new DynamicItemStyle(str, paramXmlPullParser.getAttributeValue(null, "parent"));
    this.mStyles.put(str, paramXmlPullParser);
    return str;
  }
  
  private String[] parseStyleItem(XmlPullParser paramXmlPullParser, String paramString)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    String str1;
    if (!StringUtil.isEmpty(paramString))
    {
      String str2 = paramXmlPullParser.getAttributeValue(null, "name");
      str1 = "";
      try
      {
        for (int i = paramXmlPullParser.next(); (i != 3) || ("item".compareTo(paramXmlPullParser.getName()) != 0); i = paramXmlPullParser.next()) {
          if (i == 4) {
            str1 = paramXmlPullParser.getText();
          }
        }
        ((DynamicItemStyle)this.mStyles.get(paramString)).addValueForAttribute(str2, str1);
      }
      catch (XmlPullParserException paramXmlPullParser)
      {
        Log.e("DynamicListFragment", "parseStyleItem: " + paramXmlPullParser.toString(), paramXmlPullParser);
        return null;
      }
      catch (IOException paramXmlPullParser)
      {
        Log.e("DynamicListFragment", "parseStyleItem: " + paramXmlPullParser.toString(), paramXmlPullParser);
        return null;
      }
      if (!str2.equalsIgnoreCase("textAppearance"))
      {
        localObject1 = localObject2;
        if (!str2.equalsIgnoreCase("detailTextAppearance")) {}
      }
      else
      {
        localObject1 = localObject2;
        if (!StringUtil.isEmpty(str1))
        {
          str1 = str1.replace("@style/", "");
          localObject1 = new String[3];
          if (!str2.equalsIgnoreCase("textAppearance")) {
            break label256;
          }
        }
      }
    }
    label256:
    for (paramXmlPullParser = "text";; paramXmlPullParser = "detailText")
    {
      localObject1[0] = paramXmlPullParser;
      localObject1[1] = paramString;
      localObject1[2] = str1;
      return localObject1;
    }
  }
  
  private void prepareCustomStyles(HashMap<String, String> paramHashMap1, HashMap<String, String> paramHashMap2)
  {
    paramHashMap1 = paramHashMap1.entrySet().iterator();
    Object localObject1;
    while (paramHashMap1.hasNext())
    {
      Object localObject2 = (Map.Entry)paramHashMap1.next();
      localObject1 = (String)((Map.Entry)localObject2).getKey();
      localObject2 = (String)((Map.Entry)localObject2).getValue();
      localObject1 = (DynamicItemStyle)this.mStyles.get(localObject1);
      localObject2 = (DynamicItemStyle)this.mStyles.get(localObject2);
      if (localObject1 != null) {
        ((DynamicItemStyle)localObject1).setReferencedStyle((DynamicItemStyle)localObject2);
      }
    }
    paramHashMap1 = paramHashMap2.entrySet().iterator();
    while (paramHashMap1.hasNext())
    {
      localObject1 = (Map.Entry)paramHashMap1.next();
      paramHashMap2 = (String)((Map.Entry)localObject1).getKey();
      localObject1 = (String)((Map.Entry)localObject1).getValue();
      paramHashMap2 = (DynamicItemStyle)this.mStyles.get(paramHashMap2);
      localObject1 = (DynamicItemStyle)this.mStyles.get(localObject1);
      if (paramHashMap2 != null) {
        paramHashMap2.setReferencedStyleForDetail((DynamicItemStyle)localObject1);
      }
    }
    if ((this.mStyles != null) && (this.mStyles.size() > 0))
    {
      paramHashMap2 = this.mItems.iterator();
      while (paramHashMap2.hasNext())
      {
        localObject1 = (DynamicListItem)paramHashMap2.next();
        if (((DynamicListItem)localObject1).getType() == 5)
        {
          paramHashMap1 = null;
          if (((DynamicListItem)localObject1).getStyle() != null) {
            paramHashMap1 = (DynamicItemStyle)this.mStyles.get(((DynamicListItem)localObject1).getStyle());
          }
          if ((paramHashMap1 != null) && (paramHashMap1.getParent().equalsIgnoreCase("image"))) {
            ((DynamicListItem)localObject1).setType(6);
          } else if ((paramHashMap1 != null) && (paramHashMap1.getParent().equalsIgnoreCase("subtitle"))) {
            ((DynamicListItem)localObject1).setType(7);
          } else if ((paramHashMap1 != null) && (paramHashMap1.getParent().equalsIgnoreCase("style2"))) {
            ((DynamicListItem)localObject1).setType(8);
          }
        }
      }
    }
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if (paramBoolean)
    {
      if ((this.mListTitle != null) && (this.mListTitle.length() > 0)) {
        SCFragmentHelper.setActionBarTitle(this, this.mListTitle);
      }
    }
    else {
      return;
    }
    SCFragmentHelper.setActionBarTitle(this, "");
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    if (this.mSearchEnabled)
    {
      MenuItem localMenuItem = paramMenu.add(2131361934);
      localMenuItem.setIcon(17301583);
      int i = 2;
      if (!DeviceUtil.isTablet(getActivity())) {
        i = 0x2 | 0x8;
      }
      localMenuItem.setShowAsAction(i);
      localMenuItem.setActionView(getSearchView());
    }
    paramMenuInflater.inflate(2131558409, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903091, paramViewGroup, false);
    this.mListView = ((ListView)paramLayoutInflater.findViewById(16908298));
    this.mLoadingView = paramLayoutInflater.findViewById(2131099836);
    this.mNoItemsView = paramLayoutInflater.findViewById(16908292);
    if (Build.VERSION.SDK_INT >= 11)
    {
      this.mSidePadding = DeviceUtil.dpToPx(getActivity(), 14.0F);
      this.mListView.setPadding(this.mSidePadding, this.mListView.getPaddingTop(), this.mSidePadding, this.mListView.getPaddingBottom());
      this.mSideFastScrollerPadding = DeviceUtil.dpToPx(getActivity(), 32.0F);
    }
    paramViewGroup = getArguments();
    if (paramViewGroup != null)
    {
      this.mConfigRecourceNameOrUrl = paramViewGroup.getString("CONFIG_RESOURCE_NAME_OR_URL");
      this.mListId = paramViewGroup.getString("LIST_ID");
      this.mEnableLogOutButton = paramViewGroup.getBoolean("ENABLE_LOGOUT_BTN", false);
      this.mEnableRefreshButton = paramViewGroup.getBoolean("ENABLE_REFRESH_BTN", false);
    }
    this.mListView.setVisibility(8);
    this.mNoItemsView.setVisibility(8);
    this.mLoadingView.setVisibility(8);
    this.mListView.setOnTouchListener(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        if (DynamicListFragment.this.mSearchView != null) {
          DynamicListFragment.this.mSearchView.clearFocus();
        }
        return false;
      }
    });
    new Timer().schedule(new TimerTask()
    {
      public void run()
      {
        DynamicListFragment.this.getActivity().runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (DynamicListFragment.this.mParsingConfigFile) {
              DynamicListFragment.this.mLoadingView.setVisibility(0);
            }
          }
        });
      }
    }, 250L);
    new ParseTask(null).execute(new Void[0]);
    return paramLayoutInflater;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.mClearCacheOnDestroy)
    {
      mCachedConfigFile = null;
      mCachedConfigResourceNameOrUrl = null;
    }
  }
  
  public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong)
  {
    super.onListItemClick(paramListView, paramView, paramInt, paramLong);
    Object localObject;
    if (this.mShowingSearchResults)
    {
      paramListView = (DynamicListItem)this.mSearchResultItems.get(paramInt);
      localObject = paramListView.getAction();
      paramView = paramListView.getActionParam();
      if ((localObject != null) && (paramView != null)) {
        break label68;
      }
    }
    label68:
    label519:
    do
    {
      do
      {
        return;
        paramListView = (DynamicListItem)this.mItems.get(paramInt);
        break;
        if (((String)localObject).equalsIgnoreCase("list"))
        {
          paramListView = new Bundle();
          paramListView.putString("CONFIG_RESOURCE_NAME_OR_URL", this.mConfigRecourceNameOrUrl);
          paramListView.putString("LIST_ID", paramView);
          App.showPage(new FragmentInfo(DynamicListFragment.class.getName(), paramListView), this);
          return;
        }
        if (((String)localObject).equalsIgnoreCase("tel")) {
          paramListView = "";
        }
        try
        {
          paramView = URLEncoder.encode(paramView, "UTF-8");
          paramListView = paramView;
        }
        catch (UnsupportedEncodingException paramView)
        {
          for (;;) {}
        }
        paramListView = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + paramListView));
        IntentUtil.startActivitySafe(getActivity(), paramListView);
        return;
        if (((String)localObject).equalsIgnoreCase("mailto"))
        {
          IntentUtil.mailTo(getActivity(), paramView);
          return;
        }
        if (((String)localObject).equalsIgnoreCase("map"))
        {
          IntentUtil.mapsQuery(getActivity(), paramView);
          return;
        }
        if (((String)localObject).equalsIgnoreCase("open"))
        {
          if ((paramView.contains("://")) && (!paramView.contains("configfileurl")))
          {
            paramListView = new Intent("android.intent.action.VIEW", Uri.parse(paramView));
            IntentUtil.startActivitySafe(getActivity(), paramListView);
            return;
          }
          App.showPage(App.getResourceUrl(paramView), this);
          return;
        }
        if (!((String)localObject).equalsIgnoreCase("video")) {
          break label519;
        }
        paramListView = paramView.trim();
      } while (paramListView.length() == 0);
      localObject = new Intent("android.intent.action.VIEW");
      paramView = App.getAppExternalResourcesPath() + "/" + paramListView;
      if (new File(paramView).exists())
      {
        Log.v("DynamicListFragment", "Playing external video: " + paramView);
        ((Intent)localObject).setDataAndType(Uri.parse(paramView), "video/*");
      }
      for (;;)
      {
        IntentUtil.startActivitySafe(getActivity(), (Intent)localObject);
        return;
        if (paramListView.indexOf("://") == -1)
        {
          paramView = App.getResourceRelativeUrl(paramListView);
          paramListView = paramView;
          if (!paramView.startsWith("/")) {
            paramListView = "/" + paramView;
          }
          ((Intent)localObject).setDataAndType(Uri.parse(App.internalFileContentProviderUri + paramListView), "video/*");
        }
        else
        {
          ((Intent)localObject).setDataAndType(Uri.parse(paramListView), "video/*");
        }
      }
    } while (!((String)localObject).equalsIgnoreCase("fusioncharts"));
    openFusionChartPage(paramView);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100286: 
      authorization("", "");
      return true;
    case 2131100285: 
      this.mIsAuthorized = false;
      invalidateOptionsMenu();
      this.mNoItemsView.setVisibility(0);
      this.mListView.setVisibility(8);
      mCachedConfigFile = null;
      mCachedConfigResourceNameOrUrl = null;
      HTTPUtil.removeCookiesForURL(this.mConfigRecourceNameOrUrl);
      this.mItems.clear();
      this.mSections.clear();
      return true;
    }
    this.mLoadingView.setVisibility(0);
    this.mNoItemsView.setVisibility(8);
    this.mListView.setVisibility(8);
    this.mItems.clear();
    this.mSections.clear();
    new ParseTask(null).execute(new Void[0]);
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    boolean bool2 = true;
    super.onPrepareOptionsMenu(paramMenu);
    MenuItem localMenuItem1 = paramMenu.findItem(2131100285);
    MenuItem localMenuItem2 = paramMenu.findItem(2131100286);
    boolean bool1;
    if (this.mEnableLogOutButton)
    {
      localMenuItem1.setVisible(this.mIsAuthorized);
      localMenuItem1.setEnabled(this.mIsAuthorized);
      if (!this.mIsAuthorized)
      {
        bool1 = true;
        localMenuItem2.setVisible(bool1);
        if (this.mIsAuthorized) {
          break label134;
        }
        bool1 = bool2;
        label87:
        localMenuItem2.setEnabled(bool1);
      }
    }
    for (;;)
    {
      paramMenu = paramMenu.findItem(2131100284);
      paramMenu.setVisible(this.mEnableRefreshButton);
      paramMenu.setEnabled(this.mEnableRefreshButton);
      return;
      bool1 = false;
      break;
      label134:
      bool1 = false;
      break label87;
      localMenuItem1.setVisible(false);
      localMenuItem1.setEnabled(false);
      localMenuItem2.setVisible(false);
      localMenuItem2.setEnabled(false);
    }
  }
  
  public boolean onQueryTextChange(String paramString)
  {
    paramString = paramString.trim();
    if (paramString.length() == 0)
    {
      this.mShowingSearchResults = false;
      this.mListView.setAdapter(this.mItemsAdapter);
      configureScrollBar(this.mSectionIndexEnabled);
      return true;
    }
    this.mShowingSearchResults = true;
    filterItems(paramString);
    this.mSearchResultsAdapter.setItems(this.mSearchResultItems);
    this.mListView.setAdapter(this.mSearchResultsAdapter);
    configureScrollBar(false);
    return true;
  }
  
  public boolean onQueryTextSubmit(String paramString)
  {
    return true;
  }
  
  public void onResume()
  {
    this.mListView.requestFocus();
    invalidateOptionsMenu();
    super.onResume();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    this.mNoItemsView.setVisibility(8);
  }
  
  private class AuthorizationRequest
    extends AsyncTask<String, Void, String>
  {
    private AuthorizationRequest() {}
    
    protected String doInBackground(String... paramVarArgs)
    {
      if (paramVarArgs != null) {}
      try
      {
        int i = paramVarArgs.length;
        if (i >= 2)
        {
          Object localObject = paramVarArgs[0];
          paramVarArgs = paramVarArgs[1];
          try
          {
            if ((!StringUtil.isEmpty((String)localObject)) && (!StringUtil.isEmpty(paramVarArgs)))
            {
              paramVarArgs = Base64.encodeToString(((String)localObject + ":" + paramVarArgs).getBytes(), 2);
              localObject = new HashMap();
              ((HashMap)localObject).put("Authorization", "Basic " + paramVarArgs);
              paramVarArgs = HTTPUtil.performGetRequest(DynamicListFragment.this.mConfigRecourceNameOrUrl, (HashMap)localObject, true, true);
              return paramVarArgs;
            }
          }
          catch (IOException paramVarArgs)
          {
            if (paramVarArgs.getMessage().equals("401 - UNAUTHORIZED")) {
              return "401 - UNAUTHORIZED";
            }
            Log.e("DynamicListFragment", paramVarArgs.getMessage());
            return null;
          }
        }
        return "401 - UNAUTHORIZED";
      }
      catch (IllegalArgumentException paramVarArgs)
      {
        Log.e("DynamicListFragment", paramVarArgs.getMessage());
        return null;
      }
      catch (IllegalStateException paramVarArgs)
      {
        for (;;)
        {
          Log.e("DynamicListFragment", paramVarArgs.getMessage());
        }
      }
    }
    
    protected void onPostExecute(String paramString)
    {
      if (!StringUtil.isEmpty(paramString))
      {
        if (paramString.equals("401 - UNAUTHORIZED"))
        {
          DynamicListFragment.access$702(DynamicListFragment.this, false);
          DynamicListFragment.this.invalidateOptionsMenu();
          DynamicListFragment.this.mNoItemsView.setVisibility(8);
          DynamicListFragment.this.mLoadingView.setVisibility(8);
          try
          {
            DialogUtil.showPromptAuth(DynamicListFragment.this.getActivity(), DynamicListFragment.this.getResources().getString(2131361915), "You must log in to area " + new URL(DynamicListFragment.this.mConfigRecourceNameOrUrl).getHost(), true, DynamicListFragment.this.getResources().getString(2131361920), new DialogUtil.PromptAuthListener()
            {
              public void onCancel()
              {
                if (App.isPreviewer) {
                  DialogUtil.showAlert(DynamicListFragment.this.getActivity(), 2131361915, "Could not load configuration file: " + DynamicListFragment.this.mConfigRecourceNameOrUrl + ".");
                }
                for (;;)
                {
                  DynamicListFragment.this.mNoItemsView.setVisibility(0);
                  DynamicListFragment.this.mLoadingView.setVisibility(8);
                  return;
                  DialogUtil.showAlert(DynamicListFragment.this.getActivity(), 2131361915, "Could not load configuration file.");
                }
              }
              
              public void onStringInputAuth(String paramAnonymousString1, String paramAnonymousString2)
              {
                DynamicListFragment.this.mNoItemsView.setVisibility(8);
                DynamicListFragment.this.mLoadingView.setVisibility(0);
                DynamicListFragment.this.authorization(paramAnonymousString1, paramAnonymousString2);
              }
            });
            return;
          }
          catch (Resources.NotFoundException paramString)
          {
            Log.e("DynamicListFragment", paramString.getMessage());
            return;
          }
          catch (MalformedURLException paramString)
          {
            Log.e("DynamicListFragment", paramString.getMessage());
            return;
          }
        }
        DynamicListFragment.access$702(DynamicListFragment.this, true);
        DynamicListFragment.this.invalidateOptionsMenu();
        DynamicListFragment.this.mNoItemsView.setVisibility(8);
        DynamicListFragment.this.mLoadingView.setVisibility(8);
        DynamicListFragment.access$1002(paramString);
        DynamicListFragment.access$1102(DynamicListFragment.this.mConfigRecourceNameOrUrl);
        new DynamicListFragment.ParseTask(DynamicListFragment.this, null).execute(new Void[0]);
        return;
      }
      DynamicListFragment.this.mNoItemsView.setVisibility(0);
      DynamicListFragment.this.mLoadingView.setVisibility(8);
      if (App.isPreviewer)
      {
        DialogUtil.showAlert(DynamicListFragment.this.getActivity(), 2131361915, "Could not load configuration file: " + DynamicListFragment.this.mConfigRecourceNameOrUrl + ".");
        return;
      }
      DialogUtil.showAlert(DynamicListFragment.this.getActivity(), 2131361915, "Could not load configuration file.");
    }
  }
  
  private class ParseTask
    extends AsyncTask<Void, String, String>
  {
    private ParseTask() {}
    
    protected String doInBackground(Void... paramVarArgs)
    {
      DynamicListFragment.access$102(DynamicListFragment.this, true);
      return DynamicListFragment.this.parseConfigFile();
    }
    
    protected void onPostExecute(String paramString)
    {
      DynamicListFragment.access$102(DynamicListFragment.this, false);
      DynamicListFragment.this.onParseConfigFileDone(paramString);
    }
  }
}
