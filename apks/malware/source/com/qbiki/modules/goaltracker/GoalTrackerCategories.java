package com.qbiki.modules.goaltracker;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Log;
import java.util.ArrayList;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class GoalTrackerCategories
{
  private static final String GOAL_CATEGORIES_SHARED_PREF_KEY = "GOAL_CATEGORIES_SHARED_PREF_KEY";
  public static final String PRIORITY_HIGH = "PRIORITY_HIGH";
  public static final String PRIORITY_LOW = "PRIORITY_LOW";
  public static final String PRIORITY_MEDIUM = "PRIORITY_MEDIUM";
  public static final String REPEAT_10_SEC_TEST_ONLY = "REPEAT_10_SEC_TEST_ONLY";
  public static final String REPEAT_DAYLY = "REPEAT_DAYLY";
  public static final String REPEAT_MONTHLY = "REPEAT_MONTHLY";
  public static final String REPEAT_WEEKLY = "REPEAT_WEEKLY";
  private static final String TAG = GoalTrackerCategories.class.getSimpleName();
  private static GoalTrackerCategories mCategories;
  private Context mActivityContext;
  private JSONArray mJSArrayCategories;
  private JSONArray mJSArrayGoals;
  private JSONObject mJSSettings;
  
  private GoalTrackerCategories() {}
  
  public static GoalTrackerCategories getInstance(Context paramContext)
  {
    mCategories = new GoalTrackerCategories();
    mCategories.setContext(paramContext);
    return mCategories;
  }
  
  private void setContext(Context paramContext)
  {
    this.mActivityContext = paramContext;
  }
  
  public void addCategory(HashMap<String, String> paramHashMap)
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("name", paramHashMap.get("name"));
      localJSONObject.put("id", paramHashMap.get("id"));
      localJSONObject.put("created_time", paramHashMap.get("created_time"));
      this.mJSArrayCategories.put(localJSONObject);
      return;
    }
    catch (JSONException paramHashMap)
    {
      Log.e(TAG, "Error adding a new category");
    }
  }
  
  public void addGoalToCategory(String paramString, HashMap<String, String> paramHashMap)
  {
    if ((paramString == null) || (paramString.length() == 0) || (paramHashMap == null)) {
      return;
    }
    try
    {
      JSONObject localJSONObject = new JSONObject();
      localJSONObject.put("title", paramHashMap.get("title"));
      localJSONObject.put("due_date_time", paramHashMap.get("due_date_time"));
      localJSONObject.put("priority", paramHashMap.get("priority"));
      localJSONObject.put("repeat_interval", paramHashMap.get("repeat_interval"));
      localJSONObject.put("note", paramHashMap.get("note"));
      localJSONObject.put("created_time", paramHashMap.get("created_time"));
      localJSONObject.put("id", paramHashMap.get("id"));
      localJSONObject.put("progress", paramHashMap.get("progress"));
      localJSONObject.put("category_id", paramString);
      this.mJSArrayGoals.put(localJSONObject);
      return;
    }
    catch (JSONException paramString)
    {
      Log.e(TAG, "Unable to add a new goal with", paramString);
    }
  }
  
  public ArrayList<HashMap<String, String>> getCategoriesList()
  {
    localArrayList = new ArrayList();
    if (this.mJSArrayCategories == null) {}
    for (;;)
    {
      return localArrayList;
      int i = 0;
      try
      {
        while (i < this.mJSArrayCategories.length())
        {
          HashMap localHashMap = new HashMap();
          JSONObject localJSONObject = this.mJSArrayCategories.getJSONObject(i);
          try
          {
            localHashMap.put("name", localJSONObject.getString("name"));
            localHashMap.put("id", localJSONObject.getString("id"));
            localHashMap.put("created_time", localJSONObject.getString("created_time"));
            localArrayList.add(localHashMap);
            i += 1;
          }
          catch (JSONException localJSONException1)
          {
            for (;;) {}
          }
        }
        return localArrayList;
      }
      catch (JSONException localJSONException2)
      {
        Log.e(TAG, "Error parsing cofig", localJSONException2);
      }
    }
  }
  
  public HashMap<String, String> getGoal(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {
      return null;
    }
    int i = 0;
    while (i < this.mJSArrayGoals.length()) {
      try
      {
        JSONObject localJSONObject = this.mJSArrayGoals.getJSONObject(i);
        if (paramString.equals(localJSONObject.getString("id")))
        {
          HashMap localHashMap = new HashMap();
          localHashMap.put("title", localJSONObject.getString("title"));
          localHashMap.put("due_date_time", localJSONObject.getString("due_date_time"));
          localHashMap.put("created_time", localJSONObject.getString("created_time"));
          localHashMap.put("priority", localJSONObject.getString("priority"));
          localHashMap.put("repeat_interval", localJSONObject.getString("repeat_interval"));
          localHashMap.put("note", localJSONObject.getString("note"));
          localHashMap.put("progress", localJSONObject.getString("progress"));
          localHashMap.put("id", localJSONObject.getString("id"));
          localHashMap.put("category_id", localJSONObject.getString("category_id"));
          return localHashMap;
        }
      }
      catch (JSONException localJSONException)
      {
        i += 1;
      }
    }
    return null;
  }
  
  public ArrayList<HashMap<String, String>> getGoalList(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    for (;;)
    {
      if (i < this.mJSArrayGoals.length()) {
        try
        {
          JSONObject localJSONObject = this.mJSArrayGoals.getJSONObject(i);
          HashMap localHashMap = new HashMap();
          if ((paramString != null) && (!localJSONObject.getString("category_id").equals(paramString))) {
            break label213;
          }
          localHashMap.put("title", localJSONObject.getString("title"));
          localHashMap.put("id", localJSONObject.getString("id"));
          localHashMap.put("due_date_time", localJSONObject.getString("due_date_time"));
          localHashMap.put("created_time", localJSONObject.getString("created_time"));
          localHashMap.put("priority", localJSONObject.getString("priority"));
          localHashMap.put("repeat_interval", localJSONObject.getString("repeat_interval"));
          localHashMap.put("note", localJSONObject.getString("note"));
          localHashMap.put("progress", localJSONObject.getString("progress"));
          localHashMap.put("category_id", localJSONObject.getString("category_id"));
          localArrayList.add(localHashMap);
        }
        catch (JSONException localJSONException) {}
      }
      return localArrayList;
      label213:
      i += 1;
    }
  }
  
  public void load()
  {
    if (this.mActivityContext == null) {
      return;
    }
    String str = this.mActivityContext.getSharedPreferences("GOAL_CATEGORIES_SHARED_PREF_KEY", 0).getString("saved_goals_categories", "{\"categories\":[],\"goals\":[]}");
    try
    {
      this.mJSSettings = new JSONObject(str);
      this.mJSArrayCategories = this.mJSSettings.getJSONArray("categories");
      this.mJSArrayGoals = this.mJSSettings.getJSONArray("goals");
      return;
    }
    catch (JSONException localJSONException)
    {
      Log.e(TAG, "Error parsing cofig", localJSONException);
    }
  }
  
  public void save()
  {
    SharedPreferences.Editor localEditor = this.mActivityContext.getSharedPreferences("GOAL_CATEGORIES_SHARED_PREF_KEY", 0).edit();
    try
    {
      this.mJSSettings.put("categories", this.mJSArrayCategories);
      this.mJSSettings.put("goals", this.mJSArrayGoals);
      localEditor.putString("saved_goals_categories", this.mJSSettings.toString());
      localEditor.commit();
      return;
    }
    catch (JSONException localJSONException)
    {
      Log.e(TAG, "Unable to save settings:", localJSONException);
    }
  }
  
  public void updateCategory(HashMap<String, String> paramHashMap)
  {
    String str = (String)paramHashMap.get("id");
    if (str == null) {}
    for (;;)
    {
      return;
      int i = 0;
      while (i < this.mJSArrayCategories.length()) {
        try
        {
          JSONObject localJSONObject = this.mJSArrayCategories.getJSONObject(i);
          if (str.equals(localJSONObject.getString("id")))
          {
            localJSONObject.put("name", paramHashMap.get("name"));
            return;
          }
        }
        catch (JSONException localJSONException)
        {
          i += 1;
        }
      }
    }
  }
  
  public void updateGoal(HashMap<String, String> paramHashMap)
  {
    String str = (String)paramHashMap.get("id");
    if ((str == null) || (str.length() == 0)) {
      return;
    }
    JSONObject localJSONObject = null;
    int i = 0;
    for (;;)
    {
      try
      {
        if (i < this.mJSArrayGoals.length())
        {
          localJSONObject = this.mJSArrayGoals.getJSONObject(i);
          if (!str.equals(localJSONObject.getString("id"))) {}
        }
        else
        {
          if (localJSONObject == null) {
            break;
          }
          localJSONObject.put("title", paramHashMap.get("title"));
          localJSONObject.put("due_date_time", paramHashMap.get("due_date_time"));
          localJSONObject.put("created_time", paramHashMap.get("created_time"));
          localJSONObject.put("priority", paramHashMap.get("priority"));
          localJSONObject.put("repeat_interval", paramHashMap.get("repeat_interval"));
          localJSONObject.put("note", paramHashMap.get("note"));
          localJSONObject.put("category_id", paramHashMap.get("category_id"));
          localJSONObject.put("progress", paramHashMap.get("progress"));
          return;
        }
      }
      catch (JSONException paramHashMap)
      {
        Log.e(TAG, "Unable to update the goal with id:" + str, paramHashMap);
        return;
      }
      i += 1;
    }
  }
}
