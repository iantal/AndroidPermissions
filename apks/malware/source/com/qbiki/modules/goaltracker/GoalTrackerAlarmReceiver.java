package com.qbiki.modules.goaltracker;

import android.app.AlarmManager;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.NotificationCompat.BigTextStyle;
import android.support.v4.app.NotificationCompat.Builder;
import android.support.v4.app.TaskStackBuilder;
import android.support.v4.content.IntentCompat;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.AppStarterActivity;
import com.qbiki.seattleclouds.FragmentInfo;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;

public class GoalTrackerAlarmReceiver
  extends BroadcastReceiver
{
  private static final boolean DEBUG = false;
  private static final String GOAL_ID_KEY = "GOAL_ID_KEY";
  public static final int NOTIFICATION_ID = 177373;
  private static final String TAG = GoalTrackerAlarmReceiver.class.getSimpleName();
  NotificationCompat.Builder builder;
  private NotificationManager mNotificationManager;
  
  public GoalTrackerAlarmReceiver() {}
  
  private void cancelAlarm(Context paramContext, Intent paramIntent, HashMap<String, String> paramHashMap)
  {
    ((AlarmManager)paramContext.getSystemService("alarm")).cancel(PendingIntent.getBroadcast(paramContext, ((String)paramHashMap.get("id")).hashCode(), paramIntent, 0));
  }
  
  private String getDetailString(HashMap<String, String> paramHashMap)
  {
    try
    {
      Object localObject = Calendar.getInstance();
      ((Calendar)localObject).setTimeInMillis(Long.parseLong((String)paramHashMap.get("due_date_time")));
      localObject = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(((Calendar)localObject).getTime());
      paramHashMap = (String)localObject + " - " + Integer.parseInt((String)paramHashMap.get("progress")) + "% - " + getPriorityText((String)paramHashMap.get("priority"));
      return paramHashMap;
    }
    catch (NumberFormatException paramHashMap) {}
    return "";
  }
  
  private PendingIntent getPendingIntent(Context paramContext, HashMap<String, String> paramHashMap)
  {
    if (!App.appConfig.isInitialized()) {
      ((App)paramContext.getApplicationContext()).restoreRuntimeStateForced();
    }
    TaskStackBuilder localTaskStackBuilder = TaskStackBuilder.create(paramContext);
    localTaskStackBuilder.addNextIntent(IntentCompat.makeRestartActivityTask(new ComponentName(paramContext, AppStarterActivity.class)));
    Bundle localBundle = new Bundle();
    localTaskStackBuilder.addNextIntent(App.getPageIntent(new FragmentInfo(GoalTrackerGoalsListFragment.class.getName(), localBundle), paramContext));
    localBundle = new Bundle();
    localBundle.putString("GOAL_ID_KEY", (String)paramHashMap.get("id"));
    localTaskStackBuilder.addNextIntent(App.getPageIntent(new FragmentInfo(GoalTrackerGoalDetailsFragment.class.getName(), localBundle), paramContext));
    return localTaskStackBuilder.getPendingIntent(0, 268435456);
  }
  
  private String getPriorityText(String paramString)
  {
    if ("PRIORITY_HIGH".equals(paramString)) {
      return "H";
    }
    if ("PRIORITY_MEDIUM".equals(paramString)) {
      return "M";
    }
    if ("PRIORITY_LOW".equals(paramString)) {
      return "L";
    }
    return "L";
  }
  
  private HashMap<String, String> goalFromIntent(Context paramContext, Intent paramIntent)
  {
    if (paramIntent == null) {}
    do
    {
      return null;
      paramIntent = paramIntent.getExtras().getString("GOAL_ID_KEY");
    } while ((paramIntent == null) || (paramIntent.length() == 0));
    paramContext = GoalTrackerCategories.getInstance(paramContext);
    paramContext.load();
    return paramContext.getGoal(paramIntent);
  }
  
  private void sendNotification(HashMap<String, String> paramHashMap, Context paramContext)
  {
    if (paramHashMap == null) {
      return;
    }
    this.mNotificationManager = ((NotificationManager)paramContext.getSystemService("notification"));
    PendingIntent localPendingIntent = getPendingIntent(paramContext, paramHashMap);
    paramHashMap = new NotificationCompat.Builder(paramContext).setSmallIcon(2130837706).setContentTitle((CharSequence)paramHashMap.get("title")).setStyle(new NotificationCompat.BigTextStyle().bigText((CharSequence)paramHashMap.get("note"))).setSubText(getDetailString(paramHashMap));
    paramHashMap.setContentIntent(localPendingIntent);
    this.mNotificationManager.notify(177373, paramHashMap.build());
  }
  
  private boolean shouldCancelAlarm(Context paramContext, HashMap<String, String> paramHashMap)
  {
    if (paramHashMap == null) {}
    while (Integer.parseInt((String)paramHashMap.get("progress")) >= 100) {
      return true;
    }
    return false;
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    HashMap localHashMap = goalFromIntent(paramContext, paramIntent);
    if (shouldCancelAlarm(paramContext, localHashMap)) {
      cancelAlarm(paramContext, paramIntent, localHashMap);
    }
    sendNotification(localHashMap, paramContext);
  }
  
  public void setAlarm(Context paramContext, String paramString1, Calendar paramCalendar, String paramString2)
  {
    AlarmManager localAlarmManager = (AlarmManager)paramContext.getSystemService("alarm");
    Intent localIntent = new Intent(paramContext, GoalTrackerAlarmReceiver.class);
    localIntent.putExtra("GOAL_ID_KEY", paramString1);
    paramContext = PendingIntent.getBroadcast(paramContext, paramString1.hashCode(), localIntent, 0);
    if ("REPEAT_DAYLY".equals(paramString2)) {
      localAlarmManager.setRepeating(0, paramCalendar.getTimeInMillis(), 86400000L, paramContext);
    }
    do
    {
      return;
      if ("REPEAT_WEEKLY".equals(paramString2))
      {
        localAlarmManager.setRepeating(0, paramCalendar.getTimeInMillis(), 604800000L, paramContext);
        return;
      }
      if ("REPEAT_MONTHLY".equals(paramString2))
      {
        localAlarmManager.setRepeating(0, paramCalendar.getTimeInMillis(), 2592000000L, paramContext);
        return;
      }
    } while (!"REPEAT_10_SEC_TEST_ONLY".equals(paramString2));
    localAlarmManager.setRepeating(0, paramCalendar.getTimeInMillis() + 10000L, 300000L, paramContext);
  }
}
