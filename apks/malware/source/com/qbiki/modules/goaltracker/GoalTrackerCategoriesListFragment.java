package com.qbiki.modules.goaltracker;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

public class GoalTrackerCategoriesListFragment
  extends SCListFragment
{
  private static final int ADD_NEW_CATEGORY = -1;
  private SimpleAdapter mAdapter;
  private ArrayList<HashMap<String, String>> mCategories = new ArrayList();
  private GoalTrackerCategories mCategoriesInstance;
  
  public GoalTrackerCategoriesListFragment() {}
  
  private void LoadCategories()
  {
    this.mCategoriesInstance.load();
  }
  
  private void SaveCategories()
  {
    this.mCategoriesInstance.save();
  }
  
  private void UpdateCategories()
  {
    this.mCategories = this.mCategoriesInstance.getCategoriesList();
    setListAdapter(this.mCategories);
  }
  
  private void addOrEditCategoryPromt(final int paramInt, Activity paramActivity)
  {
    if (paramInt == -1) {}
    for (String str = paramActivity.getString(2131362408);; str = paramActivity.getString(2131362409))
    {
      DialogUtil.showPrompt(paramActivity, str, paramActivity.getString(2131362410), false, new DialogUtil.PromptListener()
      {
        public void onCancel() {}
        
        public void onStringInput(String paramAnonymousString)
        {
          Object localObject;
          if (paramInt == -1)
          {
            localObject = Calendar.getInstance();
            HashMap localHashMap = new HashMap();
            localHashMap.put("name", paramAnonymousString);
            localHashMap.put("id", UUID.randomUUID().toString());
            localHashMap.put("created_time", ((Calendar)localObject).getTimeInMillis() + "");
            GoalTrackerCategoriesListFragment.this.mCategoriesInstance.addCategory(localHashMap);
          }
          for (;;)
          {
            GoalTrackerCategoriesListFragment.this.SaveCategories();
            GoalTrackerCategoriesListFragment.this.UpdateCategories();
            return;
            localObject = (HashMap)GoalTrackerCategoriesListFragment.this.mCategories.get(paramInt);
            ((HashMap)localObject).put("name", paramAnonymousString);
            GoalTrackerCategoriesListFragment.this.mCategoriesInstance.updateCategory((HashMap)localObject);
          }
        }
      });
      return;
    }
  }
  
  private void openGoalsList(String paramString)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("CATEGORY_ID_KEY", paramString);
    App.showPage(new FragmentInfo(GoalTrackerGoalsListFragment.class.getName(), localBundle), this);
  }
  
  private void setListAdapter(List<HashMap<String, String>> paramList)
  {
    this.mAdapter = new SimpleAdapter(getActivity(), paramList, 17367043, new String[] { "name" }, new int[] { 16908308 });
    setListAdapter(this.mAdapter);
    this.mAdapter.notifyDataSetChanged();
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558415, paramMenu);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    addOrEditCategoryPromt(-1, getActivity());
    return true;
  }
  
  public void onResume()
  {
    this.mCategoriesInstance = GoalTrackerCategories.getInstance(getActivity());
    LoadCategories();
    UpdateCategories();
    super.onResume();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    setEmptyText(getActivity().getString(2131362411));
    getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        GoalTrackerCategoriesListFragment.this.addOrEditCategoryPromt(paramAnonymousInt, GoalTrackerCategoriesListFragment.this.getActivity());
        return true;
      }
    });
    getListView().setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = (HashMap)GoalTrackerCategoriesListFragment.this.mCategories.get(paramAnonymousInt);
        GoalTrackerCategoriesListFragment.this.openGoalsList((String)paramAnonymousAdapterView.get("id"));
      }
    });
    super.onViewCreated(paramView, paramBundle);
  }
}
