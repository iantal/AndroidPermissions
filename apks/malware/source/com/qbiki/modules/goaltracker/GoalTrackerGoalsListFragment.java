package com.qbiki.modules.goaltracker;

import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCListFragment;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

public class GoalTrackerGoalsListFragment
  extends SCListFragment
{
  private static final int ADD_NEW_GOAL = -1;
  public static final String CATEGORY_ID_KEY = "CATEGORY_ID_KEY";
  private SimpleAdapter mAdapter;
  private GoalTrackerCategories mCategoriesInstance;
  private String mGoalCategoryId;
  private ArrayList<HashMap<String, String>> mGoals = new ArrayList();
  
  public GoalTrackerGoalsListFragment() {}
  
  private void LoadGoalsForCategory(String paramString)
  {
    this.mCategoriesInstance.load();
    this.mGoals = this.mCategoriesInstance.getGoalList(paramString);
    setListAdapter(this.mGoals);
  }
  
  private String getDetailString(HashMap<String, String> paramHashMap)
  {
    try
    {
      Object localObject = Calendar.getInstance();
      ((Calendar)localObject).setTimeInMillis(Long.parseLong((String)paramHashMap.get("due_date_time")));
      localObject = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(((Calendar)localObject).getTime());
      paramHashMap = (String)localObject + " - " + Integer.parseInt((String)paramHashMap.get("progress")) + "% - " + getPriorityText((String)paramHashMap.get("priority"));
      return paramHashMap;
    }
    catch (NumberFormatException paramHashMap) {}
    return "";
  }
  
  private String getPriorityText(String paramString)
  {
    if ("PRIORITY_HIGH".equals(paramString)) {
      return "H";
    }
    if ("PRIORITY_MEDIUM".equals(paramString)) {
      return "M";
    }
    if ("PRIORITY_LOW".equals(paramString)) {
      return "L";
    }
    return "L";
  }
  
  private void setListAdapter(List<HashMap<String, String>> paramList)
  {
    updateGoalsDetail(paramList);
    this.mAdapter = new SimpleAdapter(getActivity(), paramList, 17367044, new String[] { "title", "details" }, new int[] { 16908308, 16908309 });
    setListAdapter(this.mAdapter);
  }
  
  private void showDetailFragment(int paramInt)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("GOAL_ID_KEY", (String)((HashMap)this.mGoals.get(paramInt)).get("id"));
    App.showPage(new FragmentInfo(GoalTrackerGoalDetailsFragment.class.getName(), localBundle), this);
  }
  
  private void showEditFragment(int paramInt)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("CATEGORY_ID_KEY", this.mGoalCategoryId);
    if (paramInt != -1) {
      localBundle.putString("GOAL_ID_KEY", (String)((HashMap)this.mGoals.get(paramInt)).get("id"));
    }
    App.showPage(new FragmentInfo(GoalTrackerGoalEditFragment.class.getName(), localBundle), this);
  }
  
  private void updateGoalsDetail(List<HashMap<String, String>> paramList)
  {
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      HashMap localHashMap = (HashMap)paramList.next();
      localHashMap.put("details", getDetailString(localHashMap));
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      this.mGoalCategoryId = localBundle.getString("CATEGORY_ID_KEY");
    }
    super.onCreate(paramBundle);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558415, paramMenu);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    showEditFragment(-1);
    return true;
  }
  
  public void onResume()
  {
    this.mCategoriesInstance = GoalTrackerCategories.getInstance(getActivity());
    LoadGoalsForCategory(this.mGoalCategoryId);
    super.onResume();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    setEmptyText(getActivity().getString(2131362412));
    getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        GoalTrackerGoalsListFragment.this.showEditFragment(paramAnonymousInt);
        return true;
      }
    });
    getListView().setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        GoalTrackerGoalsListFragment.this.showDetailFragment(paramAnonymousInt);
      }
    });
    super.onViewCreated(paramView, paramBundle);
  }
}
