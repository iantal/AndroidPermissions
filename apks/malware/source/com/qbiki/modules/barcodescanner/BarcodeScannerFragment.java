package com.qbiki.modules.barcodescanner;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.google.zxing.client.android.Result;
import com.google.zxing.client.android.ResultHandler;
import com.google.zxing.client.android.ResultHandlerFactory;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageCache;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BarcodeScannerFragment
  extends SCFragment
{
  public static String BARCODE_LIST_KEY = "barcodeList";
  private boolean QRCodeEnabled = true;
  private String app_name = "";
  private boolean barcodeEnabled = false;
  private String email_to_send = "";
  private View fView = null;
  private ImageCache imageCache = new ImageCache();
  private ListView listView;
  private String pageid = "";
  
  public BarcodeScannerFragment() {}
  
  private void clearAllList()
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    localBuilder.setMessage("Are you sure you want to clear the list?").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (BarcodeScannerFragment.BarcodeListAdapter)BarcodeScannerFragment.this.listView.getAdapter();
        int i = paramAnonymousDialogInterface.getCount();
        String str = App.getAppExternalStoragePath();
        str = str + "/QRCodeList";
        paramAnonymousInt = 0;
        while (paramAnonymousInt < i)
        {
          Object localObject = paramAnonymousDialogInterface.getItem(paramAnonymousInt);
          if (((BarcodeData)localObject).cid.length() > 0)
          {
            localObject = new File(((BarcodeData)localObject).cid);
            ((File)localObject).delete();
            localObject = new File(str + "/" + ((File)localObject).getName());
            if (((File)localObject).exists()) {
              ((File)localObject).delete();
            }
          }
          paramAnonymousInt += 1;
        }
        paramAnonymousDialogInterface.removeAll();
      }
    }).setNegativeButton("No", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.create().show();
  }
  
  private String copyToSDCard(String paramString)
  {
    Object localObject = App.getAppExternalStoragePath();
    localObject = (String)localObject + "/QRCodeList";
    new File((String)localObject).mkdirs();
    paramString = new File(paramString);
    paramString.getName();
    localObject = new File((String)localObject + "/" + paramString.getName());
    try
    {
      copy(paramString, (File)localObject);
      return ((File)localObject).getAbsolutePath();
    }
    catch (IOException paramString)
    {
      Log.d("QRCodeList", "Exception", paramString);
    }
    return null;
  }
  
  private String getDescriptionFromResult(String paramString)
  {
    String str = null;
    Matcher localMatcher = Pattern.compile("<description>(.+?)</description>").matcher(paramString);
    while (localMatcher.find()) {
      str = paramString.substring(localMatcher.start(), localMatcher.end()).replace("<description>", "").replace("</description>", "");
    }
    return str;
  }
  
  /* Error */
  private String loadBarcodeData(String paramString)
  {
    // Byte code:
    //   0: new 236	java/lang/StringBuffer
    //   3: dup
    //   4: invokespecial 237	java/lang/StringBuffer:<init>	()V
    //   7: astore 4
    //   9: aconst_null
    //   10: astore_2
    //   11: aconst_null
    //   12: astore_3
    //   13: new 152	java/lang/StringBuilder
    //   16: dup
    //   17: invokespecial 153	java/lang/StringBuilder:<init>	()V
    //   20: ldc -17
    //   22: invokevirtual 157	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   25: aload_1
    //   26: invokevirtual 157	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   29: invokevirtual 162	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   32: astore_1
    //   33: new 241	java/io/InputStreamReader
    //   36: dup
    //   37: new 243	java/net/URL
    //   40: dup
    //   41: aload_1
    //   42: invokespecial 244	java/net/URL:<init>	(Ljava/lang/String;)V
    //   45: invokevirtual 248	java/net/URL:openStream	()Ljava/io/InputStream;
    //   48: invokespecial 251	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   51: astore_1
    //   52: new 253	java/io/BufferedReader
    //   55: dup
    //   56: aload_1
    //   57: invokespecial 256	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   60: astore_2
    //   61: aload_2
    //   62: invokevirtual 259	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   65: astore_3
    //   66: aload_3
    //   67: ifnull +43 -> 110
    //   70: aload 4
    //   72: aload_3
    //   73: invokevirtual 262	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   76: pop
    //   77: goto -16 -> 61
    //   80: astore 4
    //   82: aload_2
    //   83: astore_3
    //   84: aload_1
    //   85: astore_2
    //   86: aload 4
    //   88: astore_1
    //   89: aload_3
    //   90: invokevirtual 265	java/io/BufferedReader:close	()V
    //   93: aload_2
    //   94: invokevirtual 266	java/io/InputStreamReader:close	()V
    //   97: ldc_w 267
    //   100: aload_1
    //   101: invokevirtual 268	java/lang/Exception:toString	()Ljava/lang/String;
    //   104: invokestatic 272	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   107: pop
    //   108: aconst_null
    //   109: areturn
    //   110: aload_0
    //   111: aload 4
    //   113: invokevirtual 273	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   116: invokespecial 275	com/qbiki/modules/barcodescanner/BarcodeScannerFragment:getDescriptionFromResult	(Ljava/lang/String;)Ljava/lang/String;
    //   119: areturn
    //   120: astore_3
    //   121: goto -28 -> 93
    //   124: astore_2
    //   125: goto -28 -> 97
    //   128: astore_1
    //   129: goto -40 -> 89
    //   132: astore 4
    //   134: aload_1
    //   135: astore_2
    //   136: aload 4
    //   138: astore_1
    //   139: goto -50 -> 89
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	142	0	this	BarcodeScannerFragment
    //   0	142	1	paramString	String
    //   10	84	2	localObject1	Object
    //   124	1	2	localException1	Exception
    //   135	1	2	str	String
    //   12	78	3	localObject2	Object
    //   120	1	3	localException2	Exception
    //   7	64	4	localStringBuffer	StringBuffer
    //   80	32	4	localException3	Exception
    //   132	5	4	localException4	Exception
    // Exception table:
    //   from	to	target	type
    //   61	66	80	java/lang/Exception
    //   70	77	80	java/lang/Exception
    //   89	93	120	java/lang/Exception
    //   93	97	124	java/lang/Exception
    //   33	52	128	java/lang/Exception
    //   52	61	132	java/lang/Exception
  }
  
  private Bitmap loadImage(String paramString)
  {
    Object localObject1 = this.imageCache.get(paramString);
    Object localObject2 = localObject1;
    if (localObject1 == null) {
      try
      {
        localObject2 = BitmapFactory.decodeFile(paramString);
        localObject1 = localObject2;
        this.imageCache.put(paramString, (Bitmap)localObject2);
        return localObject2;
      }
      catch (Exception paramString)
      {
        Log.e("loadImageFromNetwork", "Exception", paramString);
        localObject2 = localObject1;
      }
    }
    return localObject2;
  }
  
  private void openScanner()
  {
    Intent localIntent = new Intent("com.google.zxing.client.android.SCAN");
    localIntent.putExtra("NEED_BARCODE_CROP", true);
    if (!this.QRCodeEnabled) {
      localIntent.putExtra("SCAN_MODE", "PRODUCT_MODE");
    }
    if (!this.barcodeEnabled) {
      localIntent.putExtra("SCAN_MODE", "QR_CODE_MODE");
    }
    startActivityForResult(localIntent, 49374);
  }
  
  private void requestToDelete(final int paramInt)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    localBuilder.setMessage("Are you sure you want to delete this item?").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (BarcodeScannerFragment.BarcodeListAdapter)BarcodeScannerFragment.this.listView.getAdapter();
        File localFile = new File(paramAnonymousDialogInterface.getItem(paramInt).cid);
        if (localFile.exists())
        {
          if (localFile.delete()) {
            paramAnonymousDialogInterface.removeAt(paramInt);
          }
          return;
        }
        paramAnonymousDialogInterface.removeAt(paramInt);
      }
    }).setNegativeButton("No", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.create().show();
  }
  
  private void sendAll()
  {
    Intent localIntent = new Intent("android.intent.action.SEND_MULTIPLE");
    Object localObject = ((BarcodeListAdapter)this.listView.getAdapter()).getData();
    int j = 1;
    int i = 1;
    if (!App.isExternalStorageWritable())
    {
      DialogUtil.showAlert(getActivity(), 2131362108, 2131362109);
      i = 0;
    }
    String str1 = "";
    ArrayList localArrayList = new ArrayList();
    localObject = ((ArrayList)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      BarcodeData localBarcodeData = (BarcodeData)((Iterator)localObject).next();
      if ((i != 0) && (localBarcodeData.cid != null))
      {
        String str2 = copyToSDCard(localBarcodeData.cid);
        if (str2 != null) {
          localArrayList.add(Uri.fromFile(new File(str2)));
        }
      }
      str1 = str1 + j + ". " + localBarcodeData.description + "\n";
      j += 1;
    }
    localIntent.setType("text/html");
    localIntent.putExtra("android.intent.extra.EMAIL", new String[] { this.email_to_send });
    localIntent.putExtra("android.intent.extra.SUBJECT", "QRCodes from " + this.app_name);
    localIntent.putExtra("android.intent.extra.TEXT", str1);
    localIntent.putParcelableArrayListExtra("android.intent.extra.STREAM", localArrayList);
    try
    {
      startActivity(localIntent);
      return;
    }
    catch (Exception localException) {}
  }
  
  void copy(File paramFile1, File paramFile2)
    throws IOException
  {
    paramFile1 = new FileInputStream(paramFile1);
    paramFile2 = new FileOutputStream(paramFile2);
    byte[] arrayOfByte = new byte['Ѐ'];
    for (;;)
    {
      int i = paramFile1.read(arrayOfByte);
      if (i <= 0) {
        break;
      }
      paramFile2.write(arrayOfByte, 0, i);
    }
    paramFile1.close();
    paramFile2.close();
  }
  
  public ArrayList<BarcodeData> getBarcodeList()
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject = getActivity().getSharedPreferences(this.pageid, 0).getString(BARCODE_LIST_KEY, "");
    if (((String)localObject).length() > 0)
    {
      localObject = ((String)localObject).split("~");
      int i = 0;
      if (i < localObject.length)
      {
        String[] arrayOfString = localObject[i].split("\\|");
        switch (arrayOfString.length)
        {
        }
        for (;;)
        {
          i += 1;
          break;
          localArrayList.add(new BarcodeData(arrayOfString[0], arrayOfString[1], arrayOfString[2].replace("\\n", "\n").replace("\\r", "\r"), arrayOfString[3], arrayOfString[4].replace("\\n", "\n").replace("\\r", "\r")));
        }
      }
    }
    return localArrayList;
  }
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.pageid = ((Bundle)localObject).getString("pageid");
      this.QRCodeEnabled = ((Bundle)localObject).getBoolean("QRCODE_ENABLED");
      this.barcodeEnabled = ((Bundle)localObject).getBoolean("BARCODE_ENABLED");
      this.email_to_send = ((Bundle)localObject).getString("EMAIL_TO_SEND");
    }
    this.app_name = getResources().getString(2131361834);
    this.listView = ((ListView)this.fView.findViewById(2131099738));
    localObject = new BarcodeListAdapter(getActivity(), 2130903069);
    ((BarcodeListAdapter)localObject).setData(getBarcodeList());
    this.listView.setAdapter((ListAdapter)localObject);
    this.listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        BarcodeScannerFragment.this.requestToDelete(paramAnonymousInt);
        return false;
      }
    });
    if (this.QRCodeEnabled) {
      this.listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
      {
        public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
        {
          paramAnonymousAdapterView = ((BarcodeScannerFragment.BarcodeListAdapter)paramAnonymousAdapterView.getAdapter()).barcodeAt(paramAnonymousInt);
          BarcodeScannerFragment.this.showQRDescription(paramAnonymousAdapterView);
        }
      });
    }
    invalidateOptionsMenu();
  }
  
  public boolean isBarcodeEnabled()
  {
    return this.barcodeEnabled;
  }
  
  public boolean isQRCodeEnabled()
  {
    return this.QRCodeEnabled;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    switch (paramInt1)
    {
    }
    do
    {
      return;
    } while (paramInt2 != -1);
    String str2 = paramIntent.getExtras().getString("BARCODE_CROP");
    String str1 = str2;
    if (str2 == null) {
      str1 = "";
    }
    paramIntent = IntentIntegrator.parseActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramIntent != null) {
      paramIntent.getContents();
    }
    str2 = new SimpleDateFormat("dd-MM-yyyy HH-mm-ss").format(new Date());
    if (this.barcodeEnabled) {
      paramIntent = new BarcodeData(str1, paramIntent.getContents(), "", str2, paramIntent.getContents());
    }
    for (;;)
    {
      ((BarcodeListAdapter)this.listView.getAdapter()).addBarcodeData(paramIntent);
      return;
      Object localObject = new Result(paramIntent.getContents());
      localObject = ResultHandlerFactory.makeResultHandler(getActivity(), (Result)localObject);
      paramIntent = new BarcodeData(str1, "", ((ResultHandler)localObject).getDisplayContents().toString(), str2, paramIntent.getContents());
      paramIntent.setResultHandler((ResultHandler)localObject);
    }
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558400, paramMenu);
    if (!this.QRCodeEnabled) {
      paramMenu.removeItem(2131100267);
    }
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903070, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    }
    for (;;)
    {
      return super.onOptionsItemSelected(paramMenuItem);
      openScanner();
      continue;
      clearAllList();
      continue;
      sendAll();
    }
  }
  
  public void saveBarcodeList(ArrayList<BarcodeData> paramArrayList)
  {
    String str = "";
    int i = 0;
    while (i < paramArrayList.size())
    {
      BarcodeData localBarcodeData = (BarcodeData)paramArrayList.get(i);
      str = str + localBarcodeData.cid + "|" + localBarcodeData.barcode + "|" + localBarcodeData.description.replace("\n", "\\n").replace("\r", "\\r") + "|" + localBarcodeData.created_time + "|" + localBarcodeData.rawData.replace("\n", "\\n").replace("\r", "\\r");
      str = str + "~";
      i += 1;
    }
    paramArrayList = getActivity().getSharedPreferences(this.pageid, 0).edit();
    paramArrayList.putString(BARCODE_LIST_KEY, str);
    paramArrayList.commit();
  }
  
  public void setBarcodeEnabled(boolean paramBoolean)
  {
    if (paramBoolean) {
      this.QRCodeEnabled = false;
    }
    this.barcodeEnabled = paramBoolean;
  }
  
  public void setQRCodeEnabled(boolean paramBoolean)
  {
    if (paramBoolean) {
      this.barcodeEnabled = false;
    }
    this.QRCodeEnabled = paramBoolean;
  }
  
  protected void showQRDescription(BarcodeData paramBarcodeData)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("RAW_DATA", paramBarcodeData.rawData);
    localBundle.putString("CROP_PATH", paramBarcodeData.cid);
    App.showPage(new FragmentInfo(BarcodeDescriptionFragment.class.getName(), localBundle), this);
  }
  
  private class BarcodeDataParser
    extends AsyncTask<String, Void, String>
  {
    private BarcodeData bdata;
    public int position = -1;
    private TextView textView;
    
    private BarcodeDataParser() {}
    
    protected String doInBackground(String... paramVarArgs)
    {
      return BarcodeScannerFragment.this.loadBarcodeData(paramVarArgs[0]);
    }
    
    protected void onPostExecute(String paramString)
    {
      if ((this.textView != null) && (this.textView.getTag() != null) && (this.position == ((Integer)this.textView.getTag()).intValue()))
      {
        if (paramString == null) {
          this.textView.setText("No description.");
        }
      }
      else {
        return;
      }
      this.textView.setText(paramString);
      this.bdata.description = paramString;
    }
    
    public void setBarcodeData(BarcodeData paramBarcodeData)
    {
      this.bdata = paramBarcodeData;
    }
    
    public void setTextView(TextView paramTextView)
    {
      this.textView = paramTextView;
    }
  }
  
  public class BarcodeListAdapter
    extends BaseAdapter
  {
    ArrayList<BarcodeData> barcodeList = new ArrayList();
    Context context;
    int layoutResourceId;
    
    public BarcodeListAdapter(Context paramContext, int paramInt)
    {
      this.layoutResourceId = paramInt;
      this.context = paramContext;
    }
    
    public void addBarcodeData(BarcodeData paramBarcodeData)
    {
      this.barcodeList.add(paramBarcodeData);
      notifyDataSetChanged();
      BarcodeScannerFragment.this.saveBarcodeList(this.barcodeList);
    }
    
    public BarcodeData barcodeAt(int paramInt)
    {
      return (BarcodeData)this.barcodeList.get(paramInt);
    }
    
    public int getCount()
    {
      return this.barcodeList.size();
    }
    
    public ArrayList<BarcodeData> getData()
    {
      return this.barcodeList;
    }
    
    public BarcodeData getItem(int paramInt)
    {
      return (BarcodeData)this.barcodeList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      Object localObject1 = paramView;
      label132:
      Object localObject2;
      if (localObject1 == null)
      {
        paramViewGroup = ((Activity)this.context).getLayoutInflater().inflate(this.layoutResourceId, paramViewGroup, false);
        paramView = new BarcodeScannerFragment.CellHolder();
        paramView.image = ((ImageView)paramViewGroup.findViewById(2131099733));
        paramView.title = ((TextView)paramViewGroup.findViewById(2131099734));
        paramView.description = ((TextView)paramViewGroup.findViewById(2131099735));
        paramView.label = ((TextView)paramViewGroup.findViewById(2131099736));
        paramView.arrowRight = ((ImageView)paramViewGroup.findViewById(2131099737));
        paramViewGroup.setTag(paramView);
        localObject1 = barcodeAt(paramInt);
        if (!BarcodeScannerFragment.this.barcodeEnabled) {
          break label355;
        }
        paramView.arrowRight.setVisibility(8);
        paramView.image.setImageBitmap(null);
        paramView.image.setTag(Integer.valueOf(paramInt));
        paramView.description.setTag(Integer.valueOf(paramInt));
        if (BarcodeScannerFragment.this.imageCache.get(((BarcodeData)localObject1).cid) != null) {
          break label366;
        }
        localObject2 = new BarcodeScannerFragment.DownloadImageTask(BarcodeScannerFragment.this, null);
        ((BarcodeScannerFragment.DownloadImageTask)localObject2).position = paramInt;
        ((BarcodeScannerFragment.DownloadImageTask)localObject2).setImageView(paramView.image);
        ((BarcodeScannerFragment.DownloadImageTask)localObject2).execute(new String[] { ((BarcodeData)localObject1).cid });
      }
      for (;;)
      {
        if ((BarcodeScannerFragment.this.barcodeEnabled) && (((BarcodeData)localObject1).description.length() == 0))
        {
          localObject2 = new BarcodeScannerFragment.BarcodeDataParser(BarcodeScannerFragment.this, null);
          ((BarcodeScannerFragment.BarcodeDataParser)localObject2).position = paramInt;
          ((BarcodeScannerFragment.BarcodeDataParser)localObject2).setTextView(paramView.description);
          ((BarcodeScannerFragment.BarcodeDataParser)localObject2).setBarcodeData((BarcodeData)localObject1);
          ((BarcodeScannerFragment.BarcodeDataParser)localObject2).execute(new String[] { ((BarcodeData)localObject1).barcode });
        }
        paramView.title.setText(((BarcodeData)localObject1).barcode);
        paramView.description.setText(((BarcodeData)localObject1).description);
        paramView.label.setText(((BarcodeData)localObject1).created_time);
        return paramViewGroup;
        paramView = (BarcodeScannerFragment.CellHolder)((View)localObject1).getTag();
        paramViewGroup = (ViewGroup)localObject1;
        break;
        label355:
        paramView.arrowRight.setVisibility(0);
        break label132;
        label366:
        paramView.image.setImageBitmap(BarcodeScannerFragment.this.imageCache.get(((BarcodeData)localObject1).cid));
      }
    }
    
    public void removeAll()
    {
      this.barcodeList.clear();
      notifyDataSetChanged();
      BarcodeScannerFragment.this.saveBarcodeList(this.barcodeList);
    }
    
    public void removeAt(int paramInt)
    {
      this.barcodeList.remove(paramInt);
      notifyDataSetChanged();
      BarcodeScannerFragment.this.saveBarcodeList(this.barcodeList);
    }
    
    public void setData(ArrayList<BarcodeData> paramArrayList)
    {
      this.barcodeList = paramArrayList;
      notifyDataSetChanged();
    }
  }
  
  static class CellHolder
  {
    ImageView arrowRight;
    TextView description;
    ImageView image;
    TextView label;
    TextView title;
    
    CellHolder() {}
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    private ImageView imageView;
    public int position = -1;
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return BarcodeScannerFragment.this.loadImage(paramVarArgs[0]);
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      if ((this.imageView != null) && (this.imageView.getTag() != null) && (this.position == ((Integer)this.imageView.getTag()).intValue()))
      {
        if (paramBitmap == null) {
          this.imageView.setImageResource(2130837719);
        }
      }
      else {
        return;
      }
      this.imageView.setImageBitmap(paramBitmap);
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
}
