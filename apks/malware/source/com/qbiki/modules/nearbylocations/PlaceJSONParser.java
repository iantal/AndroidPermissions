package com.qbiki.modules.nearbylocations;

import android.util.Log;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class PlaceJSONParser
{
  public static final String TAG = PlaceJSONParser.class.getSimpleName();
  
  public PlaceJSONParser() {}
  
  private HashMap<String, String> getPlace(JSONObject paramJSONObject)
  {
    HashMap localHashMap = new HashMap();
    String str1 = "-NA-";
    String str2 = "-NA-";
    try
    {
      if (!paramJSONObject.isNull("name")) {
        str1 = paramJSONObject.getString("name");
      }
      if (!paramJSONObject.isNull("vicinity")) {
        str2 = paramJSONObject.getString("vicinity");
      }
      String str3 = paramJSONObject.getJSONObject("geometry").getJSONObject("location").getString("lat");
      String str4 = paramJSONObject.getJSONObject("geometry").getJSONObject("location").getString("lng");
      paramJSONObject = paramJSONObject.getString("reference");
      localHashMap.put("place_name", str1);
      localHashMap.put("vicinity", str2);
      localHashMap.put("lat", str3);
      localHashMap.put("lng", str4);
      localHashMap.put("reference", paramJSONObject);
      return localHashMap;
    }
    catch (JSONException paramJSONObject)
    {
      Log.e(TAG, "JSONException in getPlace Method", paramJSONObject);
    }
    return localHashMap;
  }
  
  private List<HashMap<String, String>> getPlaces(JSONArray paramJSONArray)
  {
    int j = paramJSONArray.length();
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    for (;;)
    {
      if (i < j) {
        try
        {
          localArrayList.add(getPlace((JSONObject)paramJSONArray.get(i)));
          i += 1;
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            Log.e(TAG, "JSONException in getPlaces method", localJSONException);
          }
        }
      }
    }
    return localArrayList;
  }
  
  public List<HashMap<String, String>> parse(JSONObject paramJSONObject)
  {
    Object localObject = null;
    try
    {
      paramJSONObject = paramJSONObject.getJSONArray("results");
      return getPlaces(paramJSONObject);
    }
    catch (JSONException paramJSONObject)
    {
      for (;;)
      {
        Log.e(TAG, "JSONException in a parse method", paramJSONObject);
        paramJSONObject = localObject;
      }
    }
  }
}
