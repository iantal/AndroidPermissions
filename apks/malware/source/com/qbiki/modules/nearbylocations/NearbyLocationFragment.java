package com.qbiki.modules.nearbylocations;

import android.app.Dialog;
import android.content.Context;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.qbiki.feedback.LocationModel;
import com.qbiki.seattleclouds.SCMapFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.ConnectionUtil;
import com.qbiki.util.HTTPUtil;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.json.JSONObject;

public class NearbyLocationFragment
  extends SCMapFragment
{
  public static final boolean DEBUG = true;
  public static final String PLACES_APIKEY_MAIN = "PLACES_API_KEY";
  public static final int REQUEST_GOOGLE_PLAY_SERVICES = 0;
  public static final String TAG = NearbyLocationFragment.class.getSimpleName();
  public static boolean initialized = false;
  String PLACES_APIKEY;
  private HashMap<String, String> args;
  private LatLng camLocation;
  private Context context;
  List<HashMap<String, String>> list;
  private AsyncTaskListener listener = null;
  private LocationManager locmngr;
  private boolean mActivityInProgress = false;
  private MenuItem mActivityIndicatorMenuItem;
  GoogleMap mMap;
  MapView mapView;
  private boolean needToUpdate = true;
  private Location userLocation = null;
  
  public NearbyLocationFragment() {}
  
  private boolean checkGooglePlayServicesAvailable(boolean paramBoolean)
  {
    int i = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getActivity());
    if (GooglePlayServicesUtil.isUserRecoverableError(i))
    {
      if (paramBoolean) {
        showGooglePlayServicesAvailabilityErrorDialog(i);
      }
      return false;
    }
    return true;
  }
  
  private void setActivityInProgress(boolean paramBoolean)
  {
    if (this.mActivityInProgress != paramBoolean)
    {
      this.mActivityInProgress = paramBoolean;
      invalidateOptionsMenu();
    }
  }
  
  private void setUpMapIfNeeded()
  {
    if (this.mMap == null)
    {
      if (checkGooglePlayServicesAvailable(true))
      {
        this.mMap = this.mapView.getMap();
        this.mMap.setMapType(1);
      }
      if (this.mMap == null) {}
    }
    try
    {
      MapsInitializer.initialize(getActivity());
      initialized = true;
      if (initialized) {
        getInitCoords();
      }
      return;
    }
    catch (GooglePlayServicesNotAvailableException localGooglePlayServicesNotAvailableException)
    {
      for (;;)
      {
        Log.w(TAG, "Could not initialize maps");
        initialized = false;
      }
    }
  }
  
  private void showGooglePlayServicesAvailabilityErrorDialog(final int paramInt)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        GooglePlayServicesUtil.getErrorDialog(paramInt, NearbyLocationFragment.this.getActivity(), 0).show();
      }
    });
  }
  
  public LatLng getCameraLocation()
  {
    return this.camLocation;
  }
  
  public void getInitCoords()
  {
    this.mMap.setMyLocationEnabled(true);
    this.locmngr = ((LocationManager)getActivity().getSystemService("location"));
    Object localObject = new Criteria();
    ((Criteria)localObject).setPowerRequirement(1);
    localObject = this.locmngr.getBestProvider((Criteria)localObject, true);
    this.userLocation = this.locmngr.getLastKnownLocation((String)localObject);
    this.mMap.setOnCameraChangeListener(new GoogleMap.OnCameraChangeListener()
    {
      public void onCameraChange(CameraPosition paramAnonymousCameraPosition)
      {
        if (!ConnectionUtil.isConnected(NearbyLocationFragment.this.context)) {
          NearbyLocationFragment.this.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              Toast.makeText(NearbyLocationFragment.this.getActivity(), NearbyLocationFragment.this.getString(2131362259), 1).show();
            }
          });
        }
        while (NearbyLocationFragment.this.getActivity() == null)
        {
          return;
          NearbyLocationFragment.this.setCameraLocation(paramAnonymousCameraPosition.target);
        }
        NearbyLocationFragment.this.launchPlacesUpdate();
      }
    });
    if (this.userLocation != null)
    {
      localObject = new LatLng(this.userLocation.getLatitude(), this.userLocation.getLongitude());
      this.mMap.moveCamera(CameraUpdateFactory.newLatLng((LatLng)localObject));
      this.mMap.animateCamera(CameraUpdateFactory.zoomTo(16.0F));
    }
    this.mMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener()
    {
      public void onMyLocationChange(Location paramAnonymousLocation)
      {
        double d1 = paramAnonymousLocation.getLatitude();
        double d2 = paramAnonymousLocation.getLongitude();
        NearbyLocationFragment.this.setUserLocation(paramAnonymousLocation);
        if (NearbyLocationFragment.this.needToUpdate)
        {
          NearbyLocationFragment.this.launchPlacesUpdate();
          NearbyLocationFragment.access$102(NearbyLocationFragment.this, false);
        }
        Log.d(NearbyLocationFragment.TAG, "Location listener said:" + d1 + "," + d2);
      }
    });
  }
  
  public Location getUserLocation()
  {
    return this.userLocation;
  }
  
  public void launchPlacesUpdate()
  {
    NearbyLocationAsyncTask localNearbyLocationAsyncTask;
    if (ConnectionUtil.isConnected(this.context))
    {
      localNearbyLocationAsyncTask = new NearbyLocationAsyncTask();
      this.args = paramInit();
      if (this.args == null) {
        Log.d(TAG, "args to task are null");
      }
    }
    else
    {
      return;
    }
    localNearbyLocationAsyncTask.execute(new Object[] { this.args, this.listener });
    this.listener = new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        Log.d(NearbyLocationFragment.TAG, "parser finished");
        NearbyLocationFragment.this.setActivityInProgress(false);
        NearbyLocationFragment.this.list = ((List)paramAnonymousObject);
        if (NearbyLocationFragment.this.list != null)
        {
          NearbyLocationFragment.this.mMap.clear();
          int i = 0;
          while (i < NearbyLocationFragment.this.list.size())
          {
            paramAnonymousObject = new MarkerOptions();
            Object localObject = (HashMap)NearbyLocationFragment.this.list.get(i);
            double d1 = Double.parseDouble((String)((HashMap)localObject).get("lat"));
            double d2 = Double.parseDouble((String)((HashMap)localObject).get("lng"));
            String str = (String)((HashMap)localObject).get("place_name");
            localObject = (String)((HashMap)localObject).get("vicinity");
            paramAnonymousObject.position(new LatLng(d1, d2));
            paramAnonymousObject.title(str + " : " + (String)localObject);
            NearbyLocationFragment.this.mMap.addMarker(paramAnonymousObject);
            i += 1;
          }
        }
      }
    };
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558422, paramMenu);
    this.mActivityIndicatorMenuItem = paramMenu.findItem(2131099905);
    this.mActivityIndicatorMenuItem.setActionView(new ProgressBar(getActivity(), null, 16842871));
    this.mActivityIndicatorMenuItem.expandActionView();
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    invalidateOptionsMenu();
    this.PLACES_APIKEY = getArguments().getString("PLACES_API_KEY");
    return super.onCreateView(paramLayoutInflater, paramViewGroup, paramBundle);
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    this.mActivityIndicatorMenuItem.setEnabled(this.mActivityInProgress);
    this.mActivityIndicatorMenuItem.setVisible(this.mActivityInProgress);
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    this.mapView = ((MapView)paramView.findViewById(2131099684));
    setUpMapIfNeeded();
    this.context = getActivity();
  }
  
  public HashMap<String, String> paramInit()
  {
    HashMap localHashMap = new HashMap();
    double d1;
    double d2;
    if (getCameraLocation() == null)
    {
      d1 = getUserLocation().getLatitude();
      d2 = getUserLocation().getLongitude();
      setCameraLocation(new LatLng(d1, d2));
    }
    for (;;)
    {
      localHashMap.put("apikey", this.PLACES_APIKEY);
      localHashMap.put("location", d1 + "," + d2);
      localHashMap.put("sensor", "true");
      localHashMap.put("radius", "500");
      localHashMap.put("type", "accounting|airport|amusement_park|aquarium|art_gallery|atm|bakery|bank|bar|beauty_salon|bicycle_store|book_store|bowling_alley|bus_station|cafe|campground|car_dealer|car_rental|car_repair|car_wash|casino|cemetery|church|city_hall|clothing_store|convenience_store|courthouse|dentist|department_store|doctor|electrician|electronics_store|embassy|establishment|finance|fire_station|florist|food|funeral_home|furniture_store|gas_station|general_contractor|geocode|grocery_or_supermarket|gym|hair_care|hardware_store|health|hindu_temple|home_goods_store|hospital|insurance_agency|jewelry_store|laundry|lawyer|library|liquor_store|local_government_office|locksmith|lodging|meal_delivery|meal_takeaway|mosque|movie_rental|movie_theater|moving_company|museum|night_club|painter|park|parking|pet_store|pharmacy|physiotherapist|place_of_worship|plumber|police|post_office|real_estate_agency|restaurant|roofing_contractor|rv_park|school|shoe_store|shopping_mall|spa|stadium|storage|store|subway_station|synagogue|taxi_stand|train_station|travel_agency|university|veterinary_care|zoo");
      return localHashMap;
      d1 = getCameraLocation().latitude;
      d2 = getCameraLocation().longitude;
    }
  }
  
  public void setCameraLocation(LatLng paramLatLng)
  {
    this.camLocation = paramLatLng;
  }
  
  public void setUserLocation(Location paramLocation)
  {
    this.userLocation = paramLocation;
  }
  
  public class NearbyLocationAsyncTask
    extends AsyncTask<Object, Void, List<HashMap<String, String>>>
  {
    public static final String PLACES_URL = "https://maps.googleapis.com/maps/api/place/search/json?key=";
    public final String TAG = NearbyLocationAsyncTask.class.getSimpleName();
    InputStream is = null;
    private AsyncTaskListener listener = null;
    private HashMap<String, String> parameters = null;
    private ArrayList<LocationModel> placesList = null;
    private String status = null;
    
    public NearbyLocationAsyncTask() {}
    
    protected List<HashMap<String, String>> doInBackground(Object... paramVarArgs)
    {
      Object localObject = null;
      this.parameters = ((HashMap)paramVarArgs[0]);
      setAsyncTaskListener((AsyncTaskListener)paramVarArgs[1]);
      Log.d(this.TAG, "user location at " + (String)this.parameters.get("location"));
      paramVarArgs = (Object[])localObject;
      if (this.parameters != null) {}
      try
      {
        localObject = HTTPUtil.performGetRequest("https://maps.googleapis.com/maps/api/place/search/json?location=" + (String)this.parameters.get("location") + "&radius=" + (String)this.parameters.get("radius") + "&sensor=" + (String)this.parameters.get("sensor") + "&types=" + (String)this.parameters.get("type") + "&key=" + (String)this.parameters.get("apikey"));
        paramVarArgs = new PlaceJSONParser();
        Log.d(this.TAG, (String)localObject);
        localObject = new JSONObject((String)localObject);
        this.status = ((JSONObject)localObject).getString("status");
        paramVarArgs = paramVarArgs.parse((JSONObject)localObject);
        return paramVarArgs;
      }
      catch (Exception paramVarArgs)
      {
        Log.e(this.TAG, paramVarArgs.getMessage() + "IOException on http request", paramVarArgs);
      }
      return null;
    }
    
    public ArrayList<LocationModel> getPlacesList()
    {
      return this.placesList;
    }
    
    protected void onPostExecute(List<HashMap<String, String>> paramList)
    {
      if (this.status == null) {
        return;
      }
      if (this.status.equals("OK")) {
        if ((paramList != null) && (this.listener != null))
        {
          this.listener.asyncTaskFinished(paramList);
          Log.d(this.TAG, this.status);
        }
      }
      for (;;)
      {
        NearbyLocationFragment.this.setActivityInProgress(false);
        return;
        if (this.status.equals("OVER_QUERY_LIMIT")) {
          NearbyLocationFragment.this.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              Toast.makeText(NearbyLocationFragment.this.getActivity(), NearbyLocationFragment.this.getString(2131362260), 1).show();
            }
          });
        } else if (this.status.equals("ZERO_RESULTS")) {
          NearbyLocationFragment.this.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              Toast.makeText(NearbyLocationFragment.this.getActivity(), NearbyLocationFragment.this.getString(2131362261), 1).show();
            }
          });
        }
      }
    }
    
    protected void onPreExecute()
    {
      Log.d(this.TAG, "entering on preexecute on nearbylocationtask");
      NearbyLocationFragment.this.setActivityInProgress(true);
    }
    
    public void setAsyncTaskListener(AsyncTaskListener paramAsyncTaskListener)
    {
      this.listener = paramAsyncTaskListener;
    }
  }
}
