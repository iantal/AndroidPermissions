package com.qbiki.modules.photoeffect;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Debug;
import android.os.Environment;
import android.provider.MediaStore.Images.Media;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.seattleclouds.mosaic.MosaicFragment;
import com.qbiki.util.DebugUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.FroyoMediaScannerConnection;
import com.qbiki.util.FroyoMediaScannerConnection.OnScanCompletedListener;
import com.qbiki.util.ImageUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import org.apache.commons.io.FileUtils;

public class PhotoEffectFragment
  extends SCFragment
  implements SeekBar.OnSeekBarChangeListener
{
  private static final int CAMERA_PIC_REQUEST = 2500;
  private static final int COLOREFF = -1;
  private static final String EXTERNAL_PICTURES_STORAGE_DIRECTORY;
  private static final int GALLERY_REQUEST = 2300;
  private static final int GREYEFF = 0;
  private static final int MOSAIC_REQUEST = 2400;
  private static final int SEPIAEFF = 1;
  public static final String TAG = PhotoEffectFragment.class.getSimpleName();
  private static final String TEMP_PHOTO_NAME = "temp.png";
  private static int mSelectedItem = 0;
  private static Uri pathImageFromGallery;
  private int MAX_SIZE_PHOTO = 512;
  private boolean bWasApply = false;
  private boolean isHeapFull = false;
  private boolean isViewWelcomeImg = false;
  private View mView = null;
  private MaskImageView moveMaskView;
  private ProgressDialog progressDialog = null;
  private ArrayList<String> sendToAddresses;
  private int typeEffect = -1;
  
  static
  {
    EXTERNAL_PICTURES_STORAGE_DIRECTORY = Environment.getExternalStorageDirectory().getAbsolutePath() + "/PhotoEffect/";
    pathImageFromGallery = null;
  }
  
  public PhotoEffectFragment() {}
  
  private boolean apply()
  {
    if (this.bWasApply) {
      return true;
    }
    showProgressDialog();
    this.isHeapFull = false;
    this.bWasApply = true;
    hideMenu();
    System.gc();
    boolean bool = false;
    Object localObject1;
    int j;
    float f2;
    float f1;
    Object localObject2;
    if (this.moveMaskView.getArrayOfChoosedImages().size() > 0)
    {
      localObject1 = (ImageView)this.mView.findViewById(2131100115);
      j = 0;
      int i = 0;
      if (((ImageView)localObject1).getDrawable() != null)
      {
        j = ((ImageView)localObject1).getDrawable().getIntrinsicHeight();
        i = ((ImageView)localObject1).getDrawable().getIntrinsicWidth();
      }
      int k;
      if (j > 0)
      {
        k = i;
        if (i > 0) {}
      }
      else
      {
        j = ((ImageView)localObject1).getHeight();
        k = ((ImageView)localObject1).getWidth();
      }
      ((ImageView)localObject1).setImageBitmap(null);
      f2 = ((ImageView)localObject1).getMeasuredWidth() / k;
      f1 = f2;
      if (j * f2 > ((ImageView)localObject1).getMeasuredHeight()) {
        f1 = 0.0F;
      }
      localObject2 = this.moveMaskView;
      if (f1 == 0.0F)
      {
        f2 = 0.0F;
        i = (int)f2;
        k = ((ImageView)localObject1).getMeasuredWidth();
        if (f1 != 0.0F) {
          break label294;
        }
        f1 = ((ImageView)localObject1).getMeasuredHeight();
        label191:
        ((MaskImageView)localObject2).applyChanges(0, i, k, (int)f1);
        System.gc();
        localObject2 = joinImages(null, this.moveMaskView.getArrayOfChoosedImages());
        this.moveMaskView.removeAllMasks();
        bool = saveTempImage((Bitmap)localObject2).booleanValue();
        ((ImageView)localObject1).setImageBitmap((Bitmap)localObject2);
      }
    }
    for (;;)
    {
      localObject1 = (SeekBar)this.mView.findViewById(2131100122);
      ((SeekBar)localObject1).setProgress(((SeekBar)localObject1).getMax());
      dismissProgressDialog();
      return bool;
      f2 = (((ImageView)localObject1).getMeasuredHeight() - j * f1) / 2.0F;
      break;
      label294:
      f1 = j * f1;
      break label191;
      ImageView localImageView;
      if (this.typeEffect == 1)
      {
        localImageView = (ImageView)this.mView.findViewById(2131100115);
        localImageView.setImageBitmap(null);
        localObject2 = getTempBitmap();
        localObject1 = localObject2;
        if (localObject2 != null) {
          localObject1 = toSepia((Bitmap)localObject2);
        }
        this.typeEffect = -1;
        bool = saveTempImage((Bitmap)localObject1).booleanValue();
        localImageView.setImageBitmap((Bitmap)localObject1);
      }
      else if (this.typeEffect == 0)
      {
        localImageView = (ImageView)this.mView.findViewById(2131100115);
        localImageView.setImageBitmap(null);
        localObject2 = getTempBitmap();
        localObject1 = localObject2;
        if (localObject2 != null) {
          localObject1 = toGrayscale((Bitmap)localObject2);
        }
        this.typeEffect = -1;
        bool = saveTempImage((Bitmap)localObject1).booleanValue();
        localImageView.setImageBitmap((Bitmap)localObject1);
      }
      else
      {
        localObject1 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png");
        if (pathImageFromGallery == null)
        {
          if (!((File)localObject1).exists()) {
            continue;
          }
          bool = true;
        }
      }
      try
      {
        localObject2 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY);
        if (!((File)localObject2).exists()) {
          ((File)localObject2).mkdirs();
        }
        FileUtils.copyInputStreamToFile(getActivity().getContentResolver().openInputStream(pathImageFromGallery), (File)localObject1);
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          localIOException.printStackTrace();
        }
      }
      bool = true;
    }
  }
  
  private void dismissProgressDialog()
  {
    try
    {
      if (this.progressDialog != null) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private Bitmap getTempBitmap()
  {
    Object localObject = null;
    Bitmap localBitmap;
    if (pathImageFromGallery == null)
    {
      localBitmap = ImageUtil.decodeBitmapFromStream(Uri.parse(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png"), this.MAX_SIZE_PHOTO, getActivity());
      try
      {
        ExifInterface localExifInterface = new ExifInterface(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png");
        if (localExifInterface.getAttribute("Orientation").equalsIgnoreCase("6")) {
          return ImageUtil.rotate(localBitmap, 90);
        }
        if (localExifInterface.getAttribute("Orientation").equalsIgnoreCase("8")) {
          return ImageUtil.rotate(localBitmap, 270);
        }
        localObject = localBitmap;
        if (!localExifInterface.getAttribute("Orientation").equalsIgnoreCase("3")) {
          return localObject;
        }
        localObject = ImageUtil.rotate(localBitmap, 180);
        return localObject;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        return localBitmap;
      }
    }
    try
    {
      localBitmap = ImageUtil.decodeBitmapFromStream(pathImageFromGallery, this.MAX_SIZE_PHOTO, getActivity());
      return localBitmap;
    }
    catch (Exception localException) {}
    return localIOException;
  }
  
  private Bitmap joinImages(Bitmap paramBitmap, ArrayList<Mask> paramArrayList)
  {
    Object localObject2 = (ImageView)this.mView.findViewById(2131100115);
    int i = ((ImageView)localObject2).getMeasuredHeight();
    int j = ((ImageView)localObject2).getMeasuredWidth();
    paramBitmap = getTempBitmap();
    Object localObject1;
    if (this.typeEffect == 1)
    {
      localObject1 = paramBitmap;
      if (paramBitmap != null) {
        localObject1 = toSepia(paramBitmap);
      }
      this.typeEffect = -1;
    }
    for (;;)
    {
      if (localObject1 != null)
      {
        i = ((Bitmap)localObject1).getHeight();
        j = ((Bitmap)localObject1).getWidth();
      }
      float f2 = j / ((ImageView)localObject2).getMeasuredWidth();
      float f1 = i / ((ImageView)localObject2).getMeasuredHeight();
      float f3 = ((ImageView)localObject2).getMeasuredWidth() / j;
      if (i * f3 < ((ImageView)localObject2).getMeasuredHeight()) {
        f1 = i / (i * f3);
      }
      paramBitmap = Bitmap.createBitmap(j, i, Bitmap.Config.RGB_565);
      localObject2 = new Canvas(paramBitmap);
      if (localObject1 != null) {
        ((Canvas)localObject2).drawBitmap((Bitmap)localObject1, 0.0F, 0.0F, null);
      }
      ImageUtil.clearBitmap((Bitmap)localObject1);
      i = 0;
      for (;;)
      {
        if (paramArrayList.size() <= 0) {
          return paramBitmap;
        }
        localObject1 = (Mask)paramArrayList.get(0);
        Matrix localMatrix = new Matrix();
        localMatrix.postScale(f2, f1);
        try
        {
          Bitmap localBitmap = Bitmap.createBitmap(BitmapFactory.decodeStream(new FileInputStream(new File(((Mask)localObject1).getPathOfTempBitmap())), null, null), 0, 0, ((Mask)localObject1).bitmapWidth, ((Mask)localObject1).bitmapHeight, localMatrix, false);
          localMatrix.setTranslate(((Mask)localObject1).getX() * f2 - localBitmap.getWidth() / 2, ((Mask)localObject1).getY() * f1 - localBitmap.getHeight() / 2);
          ((Canvas)localObject2).drawBitmap(localBitmap, localMatrix, ((Mask)localObject1).getPaint());
          ((Canvas)localObject2).save();
          ImageUtil.clearBitmap(localBitmap);
          ((Mask)localObject1).removeTempFile();
          paramArrayList.remove(0);
          i += 1;
        }
        catch (FileNotFoundException paramArrayList)
        {
          paramArrayList.printStackTrace();
        }
      }
      localObject1 = paramBitmap;
      if (this.typeEffect == 0)
      {
        localObject1 = paramBitmap;
        if (paramBitmap != null) {
          localObject1 = toGrayscale(paramBitmap);
        }
        this.typeEffect = -1;
      }
    }
    return paramBitmap;
  }
  
  private void saveImageToGallery()
  {
    if (!"mounted".equals(Environment.getExternalStorageState())) {
      DialogUtil.showAlert(getActivity(), 2131361916, 2131362070, null, 17301543);
    }
    Object localObject1;
    do
    {
      return;
      if (!apply()) {
        break;
      }
      localObject1 = getTempBitmap();
    } while (localObject1 == null);
    Object localObject2 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY);
    if (!((File)localObject2).exists()) {
      ((File)localObject2).mkdirs();
    }
    localObject2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
    localObject2 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + (String)localObject2 + ".png");
    try
    {
      ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, 90, new FileOutputStream((File)localObject2));
      FroyoMediaScannerConnection.scanFile(getActivity(), ((File)localObject2).getAbsolutePath(), "image/jpeg", new FroyoMediaScannerConnection.OnScanCompletedListener()
      {
        public void onScanCompleted(String paramAnonymousString, Uri paramAnonymousUri) {}
      });
      localObject1 = new AlertDialog.Builder(getActivity()).create();
      ((AlertDialog)localObject1).setTitle(2131361919);
      ((AlertDialog)localObject1).setMessage(getResources().getString(2131362066));
      ((AlertDialog)localObject1).setButton(getResources().getString(2131361920), new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
      });
      ((AlertDialog)localObject1).show();
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      return;
    }
    AlertDialog localAlertDialog = new AlertDialog.Builder(getActivity()).create();
    localAlertDialog.setTitle(2131361915);
    localAlertDialog.setMessage(getResources().getString(2131362067));
    localAlertDialog.setButton(getResources().getString(2131361920), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    });
    localAlertDialog.show();
  }
  
  private Boolean saveTempImage(Bitmap paramBitmap)
  {
    if (paramBitmap != null)
    {
      File localFile = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY);
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      localFile = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png");
      try
      {
        paramBitmap.compress(Bitmap.CompressFormat.PNG, 90, new FileOutputStream(localFile));
        return Boolean.valueOf(true);
      }
      catch (FileNotFoundException paramBitmap)
      {
        return Boolean.valueOf(false);
      }
    }
    return Boolean.valueOf(false);
  }
  
  private void shareImage()
  {
    if (!"mounted".equals(Environment.getExternalStorageState()))
    {
      DialogUtil.showAlert(getActivity(), 2131361916, 2131362070, null, 17301543);
      return;
    }
    if (apply())
    {
      localObject = new Intent("android.intent.action.SEND");
      ((Intent)localObject).setType("image/png");
      ((Intent)localObject).putExtra("android.intent.extra.EMAIL", (String[])this.sendToAddresses.toArray(new String[this.sendToAddresses.size()]));
      ((Intent)localObject).putExtra("android.intent.extra.STREAM", Uri.parse("file://" + EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png"));
      startActivity(Intent.createChooser((Intent)localObject, "Share via"));
      return;
    }
    Object localObject = new AlertDialog.Builder(getActivity()).create();
    ((AlertDialog)localObject).setTitle("Error");
    ((AlertDialog)localObject).setMessage("Please make a photo.");
    ((AlertDialog)localObject).setButton("OK", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    });
    ((AlertDialog)localObject).show();
  }
  
  private void showProgressDialog()
  {
    try
    {
      this.progressDialog = new ProgressDialog(getActivity());
      this.progressDialog.setProgressStyle(0);
      this.progressDialog.setMessage(getResources().getString(2131362068));
      this.progressDialog.setCancelable(false);
      this.progressDialog.show();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void showViewForOrientation(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return;
    case 1: 
      this.mView.findViewById(2131100035).setVisibility(8);
      this.mView.findViewById(2131100111).setVisibility(0);
      return;
    }
    this.mView.findViewById(2131100035).setVisibility(0);
    this.mView.findViewById(2131100111).setVisibility(8);
  }
  
  private Bitmap toGrayscale(Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return paramBitmap;
    }
    this.typeEffect = 0;
    int i = paramBitmap.getHeight();
    Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), i, Bitmap.Config.RGB_565);
    Canvas localCanvas = new Canvas(localBitmap);
    Paint localPaint = new Paint();
    ColorMatrix localColorMatrix = new ColorMatrix();
    localColorMatrix.setSaturation(0.0F);
    localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
    localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
    ImageUtil.clearBitmap(paramBitmap);
    return localBitmap;
  }
  
  private Bitmap toSepia(Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return paramBitmap;
    }
    this.typeEffect = 1;
    Object localObject = new ColorMatrix();
    ((ColorMatrix)localObject).set(new float[] { 0.393F, 0.769F, 0.189F, 0.0F, 0.0F, 0.349F, 0.686F, 0.168F, 0.0F, 0.0F, 0.272F, 0.534F, 0.131F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
    localObject = new ColorMatrixColorFilter((ColorMatrix)localObject);
    Bitmap localBitmap = paramBitmap.copy(Bitmap.Config.RGB_565, true);
    ImageUtil.clearBitmap(paramBitmap);
    paramBitmap = new Paint();
    paramBitmap.setColorFilter((ColorFilter)localObject);
    new Canvas(localBitmap).drawBitmap(localBitmap, 0.0F, 0.0F, paramBitmap);
    return localBitmap;
  }
  
  public View getmView()
  {
    return this.mView;
  }
  
  public void hideMenu()
  {
    LinearLayout localLinearLayout1 = (LinearLayout)this.mView.findViewById(2131100116);
    LinearLayout localLinearLayout2 = (LinearLayout)this.mView.findViewById(2131100123);
    localLinearLayout1.setVisibility(8);
    localLinearLayout2.setVisibility(8);
  }
  
  @SuppressLint({"NewApi"})
  public void init()
  {
    if (Build.VERSION.SDK_INT >= 11) {
      this.mView.setLayerType(1, null);
    }
    Object localObject1 = getArguments();
    if (localObject1 != null) {
      this.sendToAddresses = ((Bundle)localObject1).getStringArrayList("sendtoaddresses");
    }
    this.moveMaskView = new MaskImageView(this);
    this.moveMaskView.setId(5436);
    localObject1 = (RelativeLayout)this.mView.findViewById(2131100114);
    Object localObject2 = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject2).addRule(13, this.moveMaskView.getId());
    ((RelativeLayout)localObject1).addView(this.moveMaskView, (ViewGroup.LayoutParams)localObject2);
    ((SeekBar)this.mView.findViewById(2131100122)).setOnSeekBarChangeListener(this);
    if (!"mounted".equals(Environment.getExternalStorageState())) {
      DialogUtil.showAlert(getActivity(), 2131361916, 2131362070, null, 17301543);
    }
    ((Button)this.mView.findViewById(2131100113)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoEffectFragment.this.hideMenu();
        paramAnonymousView = new AlertDialog.Builder(PhotoEffectFragment.this.getActivity()).create();
        paramAnonymousView.setTitle(2131362062);
        paramAnonymousView.setButton(PhotoEffectFragment.this.getResources().getString(2131362063), new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymous2DialogInterface = new Intent("android.intent.action.PICK", MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            PhotoEffectFragment.this.startActivityForResult(paramAnonymous2DialogInterface, 2300);
          }
        });
        paramAnonymousView.setButton3(PhotoEffectFragment.this.getResources().getString(2131362064), new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymous2DialogInterface = new File(PhotoEffectFragment.EXTERNAL_PICTURES_STORAGE_DIRECTORY);
            if (!paramAnonymous2DialogInterface.exists()) {
              paramAnonymous2DialogInterface.mkdirs();
            }
            try
            {
              paramAnonymous2DialogInterface = new Intent("android.media.action.IMAGE_CAPTURE");
              paramAnonymous2DialogInterface.putExtra("output", Uri.fromFile(new File(PhotoEffectFragment.EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png")));
              PhotoEffectFragment.this.startActivityForResult(paramAnonymous2DialogInterface, 2500);
              return;
            }
            catch (ActivityNotFoundException paramAnonymous2DialogInterface)
            {
              DialogUtil.showAlert(PhotoEffectFragment.this.getActivity(), 2131361916, 2131361936);
            }
          }
        });
        paramAnonymousView.setButton2(PhotoEffectFragment.this.getResources().getString(2131361911), new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int) {}
        });
        paramAnonymousView.show();
        System.gc();
      }
    });
    ((Button)this.mView.findViewById(2131100112)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = PhotoEffectFragment.this.getResources().getString(2131362059);
        String str = PhotoEffectFragment.this.getResources().getString(2131362060);
        AlertDialog.Builder localBuilder1 = new AlertDialog.Builder(PhotoEffectFragment.this.getActivity());
        AlertDialog.Builder localBuilder2 = localBuilder1.setTitle(2131362048).setCancelable(true);
        int i = PhotoEffectFragment.mSelectedItem;
        DialogInterface.OnClickListener local3 = new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            PhotoEffectFragment.access$102(paramAnonymous2Int);
          }
        };
        localBuilder2.setSingleChoiceItems(new String[] { paramAnonymousView, str }, i, local3).setPositiveButton(17039370, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            PhotoEffectFragment.this.hideMenu();
            if (PhotoEffectFragment.mSelectedItem == 0) {
              PhotoEffectFragment.this.saveImageToGallery();
            }
            for (;;)
            {
              PhotoEffectFragment.access$402(null);
              paramAnonymous2DialogInterface = (SeekBar)PhotoEffectFragment.this.mView.findViewById(2131100122);
              paramAnonymous2DialogInterface.setProgress(paramAnonymous2DialogInterface.getMax());
              System.gc();
              return;
              PhotoEffectFragment.this.shareImage();
            }
          }
        }).setNegativeButton(17039360, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymous2DialogInterface.cancel();
          }
        });
        localBuilder1.create().show();
      }
    });
    ((Button)this.mView.findViewById(2131100129)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = (LinearLayout)PhotoEffectFragment.this.mView.findViewById(2131100116);
        LinearLayout localLinearLayout = (LinearLayout)PhotoEffectFragment.this.mView.findViewById(2131100123);
        if (paramAnonymousView.getVisibility() == 8)
        {
          paramAnonymousView.setVisibility(0);
          paramAnonymousView.bringToFront();
        }
        for (;;)
        {
          localLinearLayout.setVisibility(8);
          System.gc();
          return;
          paramAnonymousView.setVisibility(8);
        }
      }
    });
    ((Button)this.mView.findViewById(2131100120)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        
        if (PhotoEffectFragment.this.isHeapFull)
        {
          DialogUtil.showAlert(PhotoEffectFragment.this.getActivity(), PhotoEffectFragment.this.getResources().getString(2131361916), PhotoEffectFragment.this.getResources().getString(2131362065));
          return;
        }
        paramAnonymousView = "";
        Bundle localBundle = PhotoEffectFragment.this.getArguments();
        if (localBundle != null) {
          paramAnonymousView = localBundle.getString("pageId");
        }
        paramAnonymousView = (Page)App.appConfig.getPages().get(paramAnonymousView);
        localBundle = new Bundle();
        localBundle.putBoolean("isOnlyChoose", true);
        localBundle.putParcelableArrayList("mosaicimages", paramAnonymousView.mosaicImages);
        paramAnonymousView = App.getPageIntent(new FragmentInfo(MosaicFragment.class.getName(), localBundle), PhotoEffectFragment.this.getActivity());
        PhotoEffectFragment.this.startActivityForResult(paramAnonymousView, 2400);
      }
    });
    ((Button)this.mView.findViewById(2131100119)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoEffectFragment.this.moveMaskView.deleteSelectedMask();
        PhotoEffectFragment.this.hideMenu();
        paramAnonymousView = (SeekBar)PhotoEffectFragment.this.mView.findViewById(2131100122);
        paramAnonymousView.setProgress(paramAnonymousView.getMax());
        PhotoEffectFragment.access$602(PhotoEffectFragment.this, false);
      }
    });
    ((Button)this.mView.findViewById(2131100118)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoEffectFragment.this.apply();
        PhotoEffectFragment.access$402(null);
      }
    });
    ((Button)this.mView.findViewById(2131100128)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        DebugUtil.logHeap(getClass());
        paramAnonymousView = (LinearLayout)PhotoEffectFragment.this.mView.findViewById(2131100116);
        LinearLayout localLinearLayout = (LinearLayout)PhotoEffectFragment.this.mView.findViewById(2131100123);
        if (localLinearLayout.getVisibility() == 8)
        {
          localLinearLayout.setVisibility(0);
          localLinearLayout.bringToFront();
        }
        for (;;)
        {
          paramAnonymousView.setVisibility(8);
          System.gc();
          return;
          localLinearLayout.setVisibility(8);
        }
      }
    });
    ((Button)this.mView.findViewById(2131100124)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoEffectFragment.this.hideMenu();
        paramAnonymousView = (ImageView)PhotoEffectFragment.this.mView.findViewById(2131100115);
        paramAnonymousView.setImageBitmap(null);
        Bitmap localBitmap = PhotoEffectFragment.this.getTempBitmap();
        paramAnonymousView.setImageBitmap(PhotoEffectFragment.this.toGrayscale(localBitmap));
        PhotoEffectFragment.access$1102(PhotoEffectFragment.this, false);
        System.gc();
      }
    });
    ((Button)this.mView.findViewById(2131100125)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = PhotoEffectFragment.this.getTempBitmap();
        ((ImageView)PhotoEffectFragment.this.mView.findViewById(2131100115)).setImageBitmap(paramAnonymousView);
        PhotoEffectFragment.this.hideMenu();
        PhotoEffectFragment.access$1102(PhotoEffectFragment.this, false);
        System.gc();
      }
    });
    ((Button)this.mView.findViewById(2131100126)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoEffectFragment.this.hideMenu();
        paramAnonymousView = (ImageView)PhotoEffectFragment.this.mView.findViewById(2131100115);
        paramAnonymousView.setImageBitmap(null);
        Bitmap localBitmap = PhotoEffectFragment.this.getTempBitmap();
        paramAnonymousView.setImageBitmap(PhotoEffectFragment.this.toSepia(localBitmap));
        PhotoEffectFragment.access$1102(PhotoEffectFragment.this, false);
        System.gc();
      }
    });
    localObject1 = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png");
    if (((File)localObject1).exists()) {
      ((File)localObject1).delete();
    }
    localObject1 = getArguments();
    if (localObject1 != null)
    {
      localObject1 = App.getDrawableResource(((Bundle)localObject1).getString("welcomeimg"));
      if (localObject1 != null) {
        this.isViewWelcomeImg = true;
      }
      localObject2 = (ImageView)this.mView.findViewById(2131100115);
      if (localObject1 != null) {
        ((ImageView)localObject2).setImageDrawable((Drawable)localObject1);
      }
    }
    if (new Double(Runtime.getRuntime().maxMemory() / 1048576L).doubleValue() > 18.0D) {
      this.MAX_SIZE_PHOTO = 800;
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    
    if (this.isViewWelcomeImg)
    {
      this.isViewWelcomeImg = false;
      ((ImageView)this.mView.findViewById(2131100115)).setImageBitmap(null);
    }
    hideMenu();
    this.bWasApply = false;
    if (paramInt1 == 2500) {
      if (paramInt2 != 0)
      {
        pathImageFromGallery = null;
        paramIntent = getTempBitmap();
        ((ImageView)this.mView.findViewById(2131100115)).setImageBitmap(paramIntent);
      }
    }
    for (;;)
    {
      System.gc();
      DebugUtil.logHeap(getClass());
      paramIntent = new Double(Runtime.getRuntime().maxMemory() / 1048576L);
      double d = new Double(Debug.getNativeHeapAllocatedSize()).doubleValue() / new Double(1048576.0D).doubleValue();
      if (paramIntent.doubleValue() - Double.valueOf(d).doubleValue() <= 4.0D)
      {
        this.isHeapFull = true;
        Log.d("MEMORY", "debug FULL");
      }
      return;
      Object localObject;
      if (paramInt1 == 2400)
      {
        if (paramInt2 != 0)
        {
          localObject = new BitmapFactory.Options();
          ((BitmapFactory.Options)localObject).inJustDecodeBounds = true;
          if (!App.resourceExists(paramIntent.getStringExtra("imgName")))
          {
            DialogUtil.showAlert(getActivity(), 2131361915, 2131362061);
            return;
          }
          BitmapFactory.decodeStream(App.getResourceStream(paramIntent.getStringExtra("imgName")), null, (BitmapFactory.Options)localObject);
          paramInt1 = 1;
          if ((((BitmapFactory.Options)localObject).outHeight > this.MAX_SIZE_PHOTO / 2) || (((BitmapFactory.Options)localObject).outWidth > this.MAX_SIZE_PHOTO / 2)) {
            paramInt1 = (int)Math.pow(2.0D, (int)(Math.log(this.MAX_SIZE_PHOTO / 2 / Math.min(((BitmapFactory.Options)localObject).outHeight, ((BitmapFactory.Options)localObject).outWidth)) / Math.log(0.5D)));
          }
          localObject = new BitmapFactory.Options();
          ((BitmapFactory.Options)localObject).inPreferredConfig = Bitmap.Config.RGB_565;
          ((BitmapFactory.Options)localObject).inSampleSize = paramInt1;
          paramIntent = BitmapFactory.decodeStream(App.getResourceStream(paramIntent.getStringExtra("imgName")), null, (BitmapFactory.Options)localObject);
          this.moveMaskView.addMask(paramIntent);
          paramIntent = (SeekBar)this.mView.findViewById(2131100122);
          paramIntent.setProgress(paramIntent.getMax());
        }
      }
      else if ((paramInt1 == 2300) && (paramInt2 != 0))
      {
        pathImageFromGallery = paramIntent.getData();
        paramIntent = null;
      }
      try
      {
        localObject = ImageUtil.decodeBitmapFromStream(pathImageFromGallery, this.MAX_SIZE_PHOTO, getActivity());
        paramIntent = (Intent)localObject;
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
      ((ImageView)this.mView.findViewById(2131100115)).setImageBitmap(paramIntent);
    }
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    showViewForOrientation(paramConfiguration.orientation);
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903188, paramViewGroup, false);
    init();
    showViewForOrientation(getActivity().getResources().getConfiguration().orientation);
    return this.mView;
  }
  
  public void onDestroy()
  {
    new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + "temp.png").delete();
    super.onDestroy();
  }
  
  public void onLowMemory()
  {
    super.onLowMemory();
  }
  
  public void onProgressChanged(SeekBar paramSeekBar, int paramInt, boolean paramBoolean)
  {
    this.moveMaskView.alphaChangeOnSelectedMask(paramInt);
  }
  
  public void onStartTrackingTouch(SeekBar paramSeekBar) {}
  
  public void onStopTrackingTouch(SeekBar paramSeekBar) {}
  
  public void setmView(View paramView)
  {
    this.mView = paramView;
  }
}
