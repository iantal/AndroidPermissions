package com.qbiki.modules.pdfeditorreader;

import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnBufferingUpdateListener;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.net.Uri;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.MeasureSpec;
import android.widget.MediaController;
import android.widget.MediaController.MediaPlayerControl;
import java.io.FileDescriptor;
import java.io.IOException;

public class VideoViewFD
  extends SurfaceView
  implements MediaController.MediaPlayerControl
{
  private MediaPlayer.OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener()
  {
    public void onBufferingUpdate(MediaPlayer paramAnonymousMediaPlayer, int paramAnonymousInt)
    {
      VideoViewFD.access$1302(VideoViewFD.this, paramAnonymousInt);
    }
  };
  private MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener()
  {
    public void onCompletion(MediaPlayer paramAnonymousMediaPlayer)
    {
      if (VideoViewFD.this.mMediaController != null) {
        VideoViewFD.this.mMediaController.hide();
      }
      if (VideoViewFD.this.mOnCompletionListener != null) {
        VideoViewFD.this.mOnCompletionListener.onCompletion(VideoViewFD.this.mMediaPlayer);
      }
    }
  };
  private Context mContext;
  private int mCurrentBufferPercentage;
  private MediaPlayer.OnErrorListener mErrorListener = new MediaPlayer.OnErrorListener()
  {
    public boolean onError(MediaPlayer paramAnonymousMediaPlayer, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      Log.d("VideoView", "Error: " + paramAnonymousInt1 + "," + paramAnonymousInt2);
      if (VideoViewFD.this.mMediaController != null) {
        VideoViewFD.this.mMediaController.hide();
      }
      if ((VideoViewFD.this.mOnErrorListener != null) && (VideoViewFD.this.mOnErrorListener.onError(VideoViewFD.this.mMediaPlayer, paramAnonymousInt1, paramAnonymousInt2))) {}
      while (VideoViewFD.this.getWindowToken() == null) {
        return true;
      }
      VideoViewFD.this.mContext.getResources();
      new AlertDialog.Builder(VideoViewFD.this.mContext).setTitle("Error").setMessage("There is an unknown error").setPositiveButton("Ok", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
        {
          if (VideoViewFD.this.mOnCompletionListener != null) {
            VideoViewFD.this.mOnCompletionListener.onCompletion(VideoViewFD.this.mMediaPlayer);
          }
        }
      }).setCancelable(false).show();
      return true;
    }
  };
  private FileDescriptor mFd;
  private boolean mIsPrepared;
  private MediaController mMediaController;
  private MediaPlayer mMediaPlayer = null;
  private MediaPlayer.OnCompletionListener mOnCompletionListener;
  private MediaPlayer.OnErrorListener mOnErrorListener;
  private MediaPlayer.OnPreparedListener mOnPreparedListener;
  MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener()
  {
    public void onPrepared(MediaPlayer paramAnonymousMediaPlayer)
    {
      VideoViewFD.access$002(VideoViewFD.this, true);
      if (VideoViewFD.this.mOnPreparedListener != null) {
        VideoViewFD.this.mOnPreparedListener.onPrepared(VideoViewFD.this.mMediaPlayer);
      }
      if (VideoViewFD.this.mMediaController != null) {
        VideoViewFD.this.mMediaController.setEnabled(true);
      }
      VideoViewFD.access$402(VideoViewFD.this, paramAnonymousMediaPlayer.getVideoWidth());
      VideoViewFD.access$502(VideoViewFD.this, paramAnonymousMediaPlayer.getVideoHeight());
      if ((VideoViewFD.this.mVideoWidth != 0) && (VideoViewFD.this.mVideoHeight != 0))
      {
        VideoViewFD.this.getHolder().setFixedSize(VideoViewFD.this.mVideoWidth, VideoViewFD.this.mVideoHeight);
        if ((VideoViewFD.this.mSurfaceWidth == VideoViewFD.this.mVideoWidth) && (VideoViewFD.this.mSurfaceHeight == VideoViewFD.this.mVideoHeight))
        {
          if (VideoViewFD.this.mSeekWhenPrepared != 0) {
            VideoViewFD.this.mMediaPlayer.seekTo(VideoViewFD.this.mSeekWhenPrepared);
          }
          if (!VideoViewFD.this.mStartWhenPrepared) {
            break label231;
          }
          VideoViewFD.this.mMediaPlayer.start();
          if (VideoViewFD.this.mMediaController != null) {
            VideoViewFD.this.mMediaController.show();
          }
        }
      }
      label231:
      do
      {
        do
        {
          return;
        } while ((VideoViewFD.this.isPlaying()) || ((VideoViewFD.this.mSeekWhenPrepared == 0) && (VideoViewFD.this.getCurrentPosition() <= 0)) || (VideoViewFD.this.mMediaController == null));
        VideoViewFD.this.mMediaController.show(0);
        return;
        Log.d("VideoView", "Couldn't get video size after prepare(): " + VideoViewFD.this.mVideoWidth + "/" + VideoViewFD.this.mVideoHeight);
      } while (!VideoViewFD.this.mStartWhenPrepared);
      VideoViewFD.this.mMediaPlayer.start();
    }
  };
  SurfaceHolder.Callback mSHCallback = new SurfaceHolder.Callback()
  {
    public void surfaceChanged(SurfaceHolder paramAnonymousSurfaceHolder, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
    {
      VideoViewFD.access$602(VideoViewFD.this, paramAnonymousInt2);
      VideoViewFD.access$702(VideoViewFD.this, paramAnonymousInt3);
      if ((VideoViewFD.this.mIsPrepared) && (VideoViewFD.this.mVideoWidth == paramAnonymousInt2) && (VideoViewFD.this.mVideoHeight == paramAnonymousInt3))
      {
        if (VideoViewFD.this.mSeekWhenPrepared != 0) {
          VideoViewFD.this.mMediaPlayer.seekTo(VideoViewFD.this.mSeekWhenPrepared);
        }
        VideoViewFD.this.mMediaPlayer.start();
        if (VideoViewFD.this.mMediaController != null) {
          VideoViewFD.this.mMediaController.show();
        }
      }
    }
    
    public void surfaceCreated(SurfaceHolder paramAnonymousSurfaceHolder)
    {
      VideoViewFD.access$1402(VideoViewFD.this, paramAnonymousSurfaceHolder);
      VideoViewFD.this.openVideo();
    }
    
    public void surfaceDestroyed(SurfaceHolder paramAnonymousSurfaceHolder)
    {
      VideoViewFD.access$1402(VideoViewFD.this, null);
      if (VideoViewFD.this.mMediaController != null) {
        VideoViewFD.this.mMediaController.hide();
      }
      if (VideoViewFD.this.mMediaPlayer != null)
      {
        VideoViewFD.this.mMediaPlayer.reset();
        VideoViewFD.this.mMediaPlayer.release();
        VideoViewFD.access$202(VideoViewFD.this, null);
      }
    }
  };
  private int mSeekWhenPrepared;
  private boolean mStartWhenPrepared;
  private int mSurfaceHeight;
  private SurfaceHolder mSurfaceHolder = null;
  private int mSurfaceWidth;
  private Uri mUri;
  private int mVideoHeight;
  private int mVideoWidth;
  
  public VideoViewFD(Context paramContext)
  {
    super(paramContext);
    this.mContext = paramContext;
    initVideoView();
  }
  
  public VideoViewFD(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
    this.mContext = paramContext;
    initVideoView();
  }
  
  public VideoViewFD(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    this.mContext = paramContext;
    initVideoView();
  }
  
  private void attachMediaController()
  {
    if ((this.mMediaPlayer != null) && (this.mMediaController != null))
    {
      this.mMediaController.setMediaPlayer(this);
      if (!(getParent() instanceof View)) {
        break label60;
      }
    }
    label60:
    for (Object localObject = (View)getParent();; localObject = this)
    {
      this.mMediaController.setAnchorView((View)localObject);
      this.mMediaController.setEnabled(this.mIsPrepared);
      return;
    }
  }
  
  private void initVideoView()
  {
    this.mVideoWidth = 0;
    this.mVideoHeight = 0;
    getHolder().addCallback(this.mSHCallback);
    getHolder().setType(3);
    setFocusable(true);
    setFocusableInTouchMode(true);
    requestFocus();
  }
  
  private void openVideo()
  {
    if (((this.mUri == null) && (this.mFd == null)) || (this.mSurfaceHolder == null)) {
      return;
    }
    Intent localIntent = new Intent("com.android.music.musicservicecommand");
    localIntent.putExtra("command", "pause");
    this.mContext.sendBroadcast(localIntent);
    if (this.mMediaPlayer != null)
    {
      this.mMediaPlayer.reset();
      this.mMediaPlayer.release();
      this.mMediaPlayer = null;
    }
    try
    {
      this.mMediaPlayer = new MediaPlayer();
      this.mMediaPlayer.setOnPreparedListener(this.mPreparedListener);
      this.mIsPrepared = false;
      this.mMediaPlayer.setOnCompletionListener(this.mCompletionListener);
      this.mMediaPlayer.setOnErrorListener(this.mErrorListener);
      this.mMediaPlayer.setOnBufferingUpdateListener(this.mBufferingUpdateListener);
      this.mCurrentBufferPercentage = 0;
      if (this.mUri != null)
      {
        this.mMediaPlayer.setDataSource(this.mContext, this.mUri);
        this.mMediaPlayer.setDisplay(this.mSurfaceHolder);
        this.mMediaPlayer.setAudioStreamType(3);
        this.mMediaPlayer.setScreenOnWhilePlaying(true);
        this.mMediaPlayer.prepareAsync();
        attachMediaController();
        return;
      }
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        Log.w("VideoView", "Unable to open content: " + this.mUri, localIOException);
        return;
        this.mMediaPlayer.setDataSource(this.mFd);
      }
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      Log.w("VideoView", "Unable to open content: " + this.mUri, localIllegalArgumentException);
      return;
    }
    catch (SecurityException localSecurityException)
    {
      Log.w("VideoView", "Unable to open content: " + this.mUri, localSecurityException);
    }
  }
  
  private void toggleMediaControlsVisiblity()
  {
    if (this.mMediaController.isShowing())
    {
      this.mMediaController.hide();
      return;
    }
    this.mMediaController.show();
  }
  
  public boolean canPause()
  {
    return true;
  }
  
  public boolean canSeekBackward()
  {
    return true;
  }
  
  public boolean canSeekForward()
  {
    return true;
  }
  
  public int getBufferPercentage()
  {
    if (this.mMediaPlayer != null) {
      return this.mCurrentBufferPercentage;
    }
    return 0;
  }
  
  public int getCurrentPosition()
  {
    if ((this.mMediaPlayer != null) && (this.mIsPrepared)) {
      return this.mMediaPlayer.getCurrentPosition();
    }
    return 0;
  }
  
  public int getDuration()
  {
    if ((this.mMediaPlayer != null) && (this.mIsPrepared)) {
      return this.mMediaPlayer.getDuration();
    }
    return -1;
  }
  
  public boolean isPlaying()
  {
    if ((this.mMediaPlayer != null) && (this.mIsPrepared)) {
      return this.mMediaPlayer.isPlaying();
    }
    return false;
  }
  
  public void onControllerHide() {}
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((this.mIsPrepared) && (paramInt != 4) && (paramInt != 24) && (paramInt != 25) && (paramInt != 82) && (paramInt != 5) && (paramInt != 6) && (this.mMediaPlayer != null) && (this.mMediaController != null))
    {
      if (paramInt == 79)
      {
        if (this.mMediaPlayer.isPlaying())
        {
          pause();
          this.mMediaController.show();
        }
        for (;;)
        {
          return true;
          start();
          this.mMediaController.hide();
        }
      }
      toggleMediaControlsVisiblity();
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = getDefaultSize(this.mVideoWidth, paramInt1);
    int j = getDefaultSize(this.mVideoHeight, paramInt2);
    paramInt1 = j;
    paramInt2 = i;
    if (this.mVideoWidth > 0)
    {
      paramInt1 = j;
      paramInt2 = i;
      if (this.mVideoHeight > 0)
      {
        if (this.mVideoWidth * j <= this.mVideoHeight * i) {
          break label80;
        }
        paramInt1 = this.mVideoHeight * i / this.mVideoWidth;
        paramInt2 = i;
      }
    }
    for (;;)
    {
      setMeasuredDimension(paramInt2, paramInt1);
      return;
      label80:
      paramInt1 = j;
      paramInt2 = i;
      if (this.mVideoWidth * j < this.mVideoHeight * i)
      {
        paramInt2 = this.mVideoWidth * j / this.mVideoHeight;
        paramInt1 = j;
      }
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if ((this.mIsPrepared) && (this.mMediaPlayer != null) && (this.mMediaController != null)) {
      toggleMediaControlsVisiblity();
    }
    return false;
  }
  
  public boolean onTrackballEvent(MotionEvent paramMotionEvent)
  {
    if ((this.mIsPrepared) && (this.mMediaPlayer != null) && (this.mMediaController != null)) {
      toggleMediaControlsVisiblity();
    }
    return false;
  }
  
  public void pause()
  {
    if ((this.mMediaPlayer != null) && (this.mIsPrepared) && (this.mMediaPlayer.isPlaying())) {
      this.mMediaPlayer.pause();
    }
    this.mStartWhenPrepared = false;
  }
  
  public int resolveAdjustedSize(int paramInt1, int paramInt2)
  {
    int i = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    switch (i)
    {
    default: 
      return paramInt1;
    case 0: 
      return paramInt1;
    case -2147483648: 
      return Math.min(paramInt1, paramInt2);
    }
    return paramInt2;
  }
  
  public void seekTo(int paramInt)
  {
    if ((this.mMediaPlayer != null) && (this.mIsPrepared))
    {
      this.mMediaPlayer.seekTo(paramInt);
      return;
    }
    this.mSeekWhenPrepared = paramInt;
  }
  
  public void setMediaController(MediaController paramMediaController)
  {
    if (this.mMediaController != null) {
      this.mMediaController.hide();
    }
    this.mMediaController = paramMediaController;
    attachMediaController();
  }
  
  public void setOnCompletionListener(MediaPlayer.OnCompletionListener paramOnCompletionListener)
  {
    this.mOnCompletionListener = paramOnCompletionListener;
  }
  
  public void setOnErrorListener(MediaPlayer.OnErrorListener paramOnErrorListener)
  {
    this.mOnErrorListener = paramOnErrorListener;
  }
  
  public void setOnPreparedListener(MediaPlayer.OnPreparedListener paramOnPreparedListener)
  {
    this.mOnPreparedListener = paramOnPreparedListener;
  }
  
  public void setVideoFD(FileDescriptor paramFileDescriptor)
  {
    this.mFd = paramFileDescriptor;
    this.mUri = null;
    this.mStartWhenPrepared = false;
    this.mSeekWhenPrepared = 0;
    openVideo();
    requestLayout();
    invalidate();
  }
  
  public void setVideoPath(String paramString)
  {
    setVideoURI(Uri.parse(paramString));
  }
  
  public void setVideoURI(Uri paramUri)
  {
    this.mUri = paramUri;
    this.mFd = null;
    this.mStartWhenPrepared = false;
    this.mSeekWhenPrepared = 0;
    openVideo();
    requestLayout();
    invalidate();
  }
  
  public void start()
  {
    if ((this.mMediaPlayer != null) && (this.mIsPrepared))
    {
      this.mMediaPlayer.start();
      this.mStartWhenPrepared = false;
      return;
    }
    this.mStartWhenPrepared = true;
  }
  
  public void stopPlayback()
  {
    if (this.mMediaPlayer != null)
    {
      this.mMediaPlayer.stop();
      this.mMediaPlayer.release();
      this.mMediaPlayer = null;
    }
  }
}
