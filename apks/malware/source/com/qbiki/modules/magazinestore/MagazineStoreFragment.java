package com.qbiki.modules.magazinestore;

import android.content.Context;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import com.android.vending.billing.util.IabHelper.QueryInventoryFinishedListener;
import com.android.vending.billing.util.IabResult;
import com.android.vending.billing.util.Inventory;
import com.android.vending.billing.util.SkuDetails;
import com.google.android.bitmapfun.ImageCache.ImageCacheParams;
import com.qbiki.billing.PurchaseFragment;
import com.qbiki.billing.SCIabHelper;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.ResourceImageResizer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;

public class MagazineStoreFragment
  extends SCFragment
  implements AdapterView.OnItemClickListener
{
  public static final String ARG_MAGAZINES_INFO = "ARG_MAGAZINES_INFO";
  public static final String IMAGE_CACHE_DIR = "magazineCovers";
  public static final double MAGAZINE_COVER_RATIO = 0.74D;
  private static final String TAG = "MagazineStoreFragment";
  private static final boolean mDebug = false;
  private static final boolean mDebugLayout = false;
  private MagazineAdapter mAdapter;
  private int mCoverWidth;
  private GridView mGridView;
  private SCIabHelper mHelper;
  private ResourceImageResizer mImageFetcher;
  private boolean mInventoryQueryInProgress = false;
  private int mItemSpacing;
  private int mLastGridWidth = 0;
  private ArrayList<MagazineInfo> mMagazineInfos = new ArrayList();
  private IabHelper.QueryInventoryFinishedListener mQueryInventoryFinishedListener = new IabHelper.QueryInventoryFinishedListener()
  {
    public void onQueryInventoryFinished(IabResult paramAnonymousIabResult, Inventory paramAnonymousInventory)
    {
      if (SCIabHelper.getInstance() == null) {
        return;
      }
      if (paramAnonymousIabResult.isFailure())
      {
        Log.e("MagazineStoreFragment", "Error querying inventory: " + paramAnonymousIabResult);
        MagazineStoreFragment.access$002(MagazineStoreFragment.this, false);
        return;
      }
      paramAnonymousIabResult = MagazineStoreFragment.this.mMagazineInfos.iterator();
      if (paramAnonymousIabResult.hasNext())
      {
        MagazineInfo localMagazineInfo = (MagazineInfo)paramAnonymousIabResult.next();
        if (paramAnonymousInventory.hasDetails(localMagazineInfo.productIdentifier)) {
          localMagazineInfo.productPrice = paramAnonymousInventory.getSkuDetails(localMagazineInfo.productIdentifier).getPrice();
        }
        if (paramAnonymousInventory.getPurchase(localMagazineInfo.productIdentifier) != null) {}
        for (boolean bool = true;; bool = false)
        {
          localMagazineInfo.productOwned = bool;
          break;
        }
      }
      MagazineStoreFragment.access$002(MagazineStoreFragment.this, false);
      MagazineStoreFragment.logDebug("Finished qurying inventory");
      MagazineStoreFragment.logDebug("Refreshing magazine adapter");
      MagazineStoreFragment.this.mAdapter.notifyDataSetChanged();
    }
  };
  private View mRootView;
  
  public MagazineStoreFragment() {}
  
  static String getActionString(Context paramContext, MagazineInfo paramMagazineInfo)
  {
    String str = paramContext.getString(2131362241);
    if (paramMagazineInfo.productOwned) {
      str = paramContext.getString(2131362243);
    }
    while (paramMagazineInfo.productPrice == null) {
      return str;
    }
    return paramContext.getString(2131362242, new Object[] { paramMagazineInfo.productPrice });
  }
  
  static void launchPurchase(MagazineInfo paramMagazineInfo, Fragment paramFragment)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("ARG_PRODUCT_ID", paramMagazineInfo.productIdentifier);
    localBundle.putString("ARG_REDIRECT_URL", paramMagazineInfo.contentPage);
    localBundle.putString("ARG_PRODUCT_TYPE", "nonConsumable");
    if (App.isPreviewer) {
      localBundle.putBoolean("ARG_SIMULATION_MODE", true);
    }
    App.showPage(new FragmentInfo(PurchaseFragment.class.getName(), localBundle), paramFragment);
  }
  
  private static void logDebug(String paramString) {}
  
  private void refreshInventory()
  {
    if (this.mInventoryQueryInProgress) {}
    for (;;)
    {
      return;
      if (this.mMagazineInfos.size() != 0)
      {
        this.mHelper = SCIabHelper.getInstance();
        if (this.mHelper != null)
        {
          int i = 0;
          ArrayList localArrayList = new ArrayList();
          Iterator localIterator = this.mMagazineInfos.iterator();
          while (localIterator.hasNext())
          {
            MagazineInfo localMagazineInfo = (MagazineInfo)localIterator.next();
            if ((!localMagazineInfo.productOwned) && (localMagazineInfo.productIdentifier != null) && (localMagazineInfo.productIdentifier.length() != 0)) {
              if (this.mHelper.isOwnedProduct(localMagazineInfo.productIdentifier))
              {
                localMagazineInfo.productOwned = true;
                i = 1;
              }
              else if (localMagazineInfo.productPrice == null)
              {
                localArrayList.add(localMagazineInfo.productIdentifier);
              }
            }
          }
          if (localArrayList.size() > 0) {
            this.mInventoryQueryInProgress = true;
          }
          try
          {
            this.mHelper.queryInventoryAsync(true, localArrayList, this.mQueryInventoryFinishedListener);
            if (!this.mInventoryQueryInProgress)
            {
              if ((i != 0) && (this.mAdapter != null))
              {
                logDebug("Previously unowned product marked as owned, refreshing UI");
                this.mAdapter.notifyDataSetChanged();
              }
              logDebug("No unonwed SKUs without known price in magazine info list. Nothing to query.");
              return;
            }
          }
          catch (IllegalStateException localIllegalStateException)
          {
            for (;;)
            {
              this.mInventoryQueryInProgress = false;
              Log.w("MagazineStoreFragment", "Cannot start inventory query, illegal state: " + localIllegalStateException);
            }
          }
        }
      }
    }
    Log.w("MagazineStoreFragment", "SCIabHelper not initialized");
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if (paramBoolean)
    {
      refreshInventory();
      if (this.mImageFetcher != null) {
        this.mImageFetcher.setExitTasksEarly(false);
      }
      if (this.mAdapter != null) {
        this.mAdapter.notifyDataSetChanged();
      }
    }
    while (this.mImageFetcher == null) {
      return;
    }
    this.mImageFetcher.setPauseWork(false);
    this.mImageFetcher.setExitTasksEarly(true);
    this.mImageFetcher.flushCache();
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = getArguments();
    if (paramBundle != null)
    {
      paramBundle = paramBundle.getParcelableArrayList("ARG_MAGAZINES_INFO");
      if (paramBundle != null) {
        this.mMagazineInfos = paramBundle;
      }
    }
    if (this.mMagazineInfos.size() == 0)
    {
      Log.e("MagazineStoreFragment", "No magazines");
      return;
    }
    refreshInventory();
    Collections.sort(this.mMagazineInfos, new Comparator()
    {
      public int compare(MagazineInfo paramAnonymousMagazineInfo1, MagazineInfo paramAnonymousMagazineInfo2)
      {
        return paramAnonymousMagazineInfo2.publishDate.compareTo(paramAnonymousMagazineInfo1.publishDate);
      }
    });
    paramBundle = new Date();
    Iterator localIterator = this.mMagazineInfos.iterator();
    while (localIterator.hasNext())
    {
      MagazineInfo localMagazineInfo = (MagazineInfo)localIterator.next();
      if (!localMagazineInfo.publishDate.after(paramBundle)) {
        break;
      }
      localIterator.remove();
      logDebug("Removed unrealeased magazine: " + localMagazineInfo);
    }
    this.mCoverWidth = getResources().getDimensionPixelSize(2131230751);
    this.mItemSpacing = getResources().getDimensionPixelSize(2131230752);
    int i = (int)(this.mCoverWidth / 0.74D);
    this.mAdapter = new MagazineAdapter(getActivity());
    paramBundle = new ImageCache.ImageCacheParams(getActivity(), "magazineCovers");
    paramBundle.setMemCacheSizePercent(0.25F);
    this.mImageFetcher = new ResourceImageResizer(getActivity(), i);
    this.mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), paramBundle);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mRootView = paramLayoutInflater.inflate(2130903138, paramViewGroup, false);
    this.mGridView = ((GridView)this.mRootView.findViewById(2131099937));
    this.mGridView.setAdapter(this.mAdapter);
    this.mGridView.setOnItemClickListener(this);
    this.mGridView.setOnScrollListener(new AbsListView.OnScrollListener()
    {
      public void onScroll(AbsListView paramAnonymousAbsListView, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onScrollStateChanged(AbsListView paramAnonymousAbsListView, int paramAnonymousInt)
      {
        if (paramAnonymousInt == 2) {}
        for (boolean bool = true;; bool = false)
        {
          MagazineStoreFragment.this.mImageFetcher.setPauseWork(bool);
          return;
        }
      }
    });
    this.mGridView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener()
    {
      public void onGlobalLayout()
      {
        if (MagazineStoreFragment.this.mLastGridWidth != MagazineStoreFragment.this.mGridView.getWidth())
        {
          MagazineStoreFragment.access$502(MagazineStoreFragment.this, MagazineStoreFragment.this.mGridView.getWidth());
          int i = (int)Math.floor(MagazineStoreFragment.this.mGridView.getWidth() / (MagazineStoreFragment.this.mCoverWidth + MagazineStoreFragment.this.mItemSpacing));
          if (i > 0)
          {
            int j = (int)((MagazineStoreFragment.this.mGridView.getWidth() / i - MagazineStoreFragment.this.mItemSpacing) / 0.74D);
            MagazineStoreFragment.this.mGridView.setNumColumns(i);
            MagazineStoreFragment.this.mAdapter.setItemHeight(j);
          }
        }
      }
    });
    return this.mRootView;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.mImageFetcher != null) {
      this.mImageFetcher.closeCache();
    }
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    paramAdapterView = new Bundle();
    paramAdapterView.putParcelable("ARG_MAGAZINE_INFO", (Parcelable)this.mMagazineInfos.get(paramInt));
    App.showPage(new FragmentInfo(MagazineDetailsFragment.class.getName(), paramAdapterView), this);
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
  }
  
  private class MagazineAdapter
    extends BaseAdapter
  {
    private Context mContext;
    private java.text.DateFormat mDateFormat;
    private int mImageHeight = 0;
    private LinearLayout.LayoutParams mImageViewLayoutParams;
    private LayoutInflater mInflater;
    
    public MagazineAdapter(Context paramContext)
    {
      this.mContext = paramContext;
      this.mInflater = LayoutInflater.from(this.mContext);
      this.mDateFormat = android.text.format.DateFormat.getMediumDateFormat(paramContext);
      this.mImageViewLayoutParams = new LinearLayout.LayoutParams(-1, DeviceUtil.dpToPx(paramContext, 238.0F));
    }
    
    public int getCount()
    {
      return MagazineStoreFragment.this.mMagazineInfos.size();
    }
    
    public Object getItem(int paramInt)
    {
      return null;
    }
    
    public long getItemId(int paramInt)
    {
      return 0L;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null) {}
      for (paramViewGroup = this.mInflater.inflate(2130903233, null);; paramViewGroup = paramView)
      {
        ImageView localImageView = (ImageView)paramViewGroup.findViewById(2131100249);
        TextView localTextView1 = (TextView)paramViewGroup.findViewById(2131099734);
        TextView localTextView2 = (TextView)paramViewGroup.findViewById(2131099934);
        Button localButton = (Button)paramViewGroup.findViewById(2131099935);
        if (paramView == null)
        {
          localImageView.setLayoutParams(this.mImageViewLayoutParams);
          localButton.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              paramAnonymousView = (Integer)paramAnonymousView.getTag();
              if (paramAnonymousView != null) {
                MagazineStoreFragment.launchPurchase((MagazineInfo)MagazineStoreFragment.this.mMagazineInfos.get(paramAnonymousView.intValue()), MagazineStoreFragment.this);
              }
            }
          });
        }
        if (localImageView.getLayoutParams().height != this.mImageHeight) {
          localImageView.setLayoutParams(this.mImageViewLayoutParams);
        }
        paramView = (MagazineInfo)MagazineStoreFragment.this.mMagazineInfos.get(paramInt);
        localTextView1.setText(paramView.title);
        localTextView2.setText(this.mDateFormat.format(paramView.publishDate));
        localButton.setText(MagazineStoreFragment.getActionString(MagazineStoreFragment.this.getActivity(), paramView));
        localButton.setTag(Integer.valueOf(paramInt));
        if (MagazineStoreFragment.this.mLastGridWidth != 0) {
          MagazineStoreFragment.this.mImageFetcher.loadImage(paramView.coverName, localImageView);
        }
        return paramViewGroup;
      }
    }
    
    public void setItemHeight(int paramInt)
    {
      if (paramInt == this.mImageHeight) {
        return;
      }
      this.mImageHeight = paramInt;
      this.mImageViewLayoutParams = new LinearLayout.LayoutParams(-1, this.mImageHeight);
      paramInt += paramInt / 5;
      int i = (int)(paramInt * 0.74D);
      MagazineStoreFragment.this.mImageFetcher.setImageSize(i, paramInt);
      notifyDataSetChanged();
    }
  }
}
