package com.qbiki.modules.facebookfeeds;

import android.app.Activity;
import android.content.Intent;
import android.database.DataSetObserver;
import android.graphics.Bitmap.CompressFormat;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.facebook.android.Facebook;
import com.google.android.bitmapfun.ImageCache.ImageCacheParams;
import com.google.android.bitmapfun.ImageFetcher;
import com.qbiki.scapi.HttpResponseException;
import com.qbiki.scapi.SCApi;
import com.qbiki.scapi.SCApiException;
import com.qbiki.scapi.SCApiRequestAsyncTask;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DataUtil;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.StyleUtil;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh;
import uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh.SetupWizard;
import uk.co.senab.actionbarpulltorefresh.library.PullToRefreshLayout;
import uk.co.senab.actionbarpulltorefresh.library.listeners.OnRefreshListener;
import uk.co.senab.actionbarpulltorefresh.library.viewdelegates.ViewDelegate;

public class FeedsListFragment
  extends SCFragment
  implements OnRefreshListener
{
  private static final boolean DEBUG = false;
  private static final String IMAGE_CACHE_DIR = "facebook/profilePictures";
  private static final int REQUEST_CODE_SIGN_IN = 101;
  private static final String TAG = FeedsListFragment.class.getSimpleName();
  private List<Map<String, String>> feedList = new ArrayList();
  private Activity mActivityContext;
  private HashMap<String, HashMap<String, String>> mCashedUserInfo = new HashMap();
  private Facebook mFacebook;
  private int mIconSize = 144;
  private ImageFetcher mImageFetcher;
  private ListView mListView;
  private Menu mMenu;
  private PullToRefreshLayout mPullToRefreshLayout;
  private boolean mSignedIn = false;
  private Bundle mStyle;
  private String mTransition;
  private String mUserId;
  private TextView mUserName;
  private ImageView mUserPicture;
  
  public FeedsListFragment() {}
  
  private Facebook getFacebook()
  {
    if (this.mFacebook == null) {
      this.mFacebook = FacebookContext.getInstance(this.mActivityContext).getFacebook(App.appConfig.getFacebookAppID());
    }
    return this.mFacebook;
  }
  
  private HashSet<Map<String, String>> getFakeFeedsFromPhotoAlbums(JSONArray paramJSONArray)
  {
    for (;;)
    {
      int j;
      try
      {
        HashSet localHashSet = new HashSet();
        int k = paramJSONArray.length();
        int i = 0;
        if (i < k)
        {
          try
          {
            Object localObject1 = paramJSONArray.getJSONObject(i).getJSONObject("attachment");
            String str1 = ((JSONObject)localObject1).getString("icon");
            localObject1 = ((JSONObject)localObject1).getJSONArray("media");
            int m = ((JSONArray)localObject1).length();
            j = 0;
            if (j < m)
            {
              HashMap localHashMap = new HashMap();
              Object localObject2 = ((JSONArray)localObject1).getJSONObject(j);
              if (!((JSONObject)localObject2).getString("type").equals("photo")) {
                break label453;
              }
              String str2 = ((JSONObject)localObject2).getString("alt");
              JSONObject localJSONObject = ((JSONObject)localObject2).getJSONObject("attachmentInfo");
              String str3 = "" + localJSONObject.getLong("created");
              String str4 = localJSONObject.getJSONArray("images").getJSONObject(0).getString("source");
              String str5 = "" + localJSONObject.getLong("owner");
              long l1 = localJSONObject.getJSONObject("like_info").getLong("like_count");
              long l2 = localJSONObject.getJSONObject("comment_info").getLong("comment_count");
              localObject2 = ((JSONObject)localObject2).getJSONObject("photo").getString("fbid");
              localHashMap.put("actor_id", str5);
              localHashMap.put("message", str2);
              localHashMap.put("type", "photo");
              localHashMap.put("created", str3);
              localHashMap.put("source", str4);
              localHashMap.put("thmb_src", str4);
              localHashMap.put("post_id", localObject2);
              localHashMap.put("like_count", l1 + "");
              localHashMap.put("comment_count", l2 + "");
              localHashMap.put("icon", str1);
              localHashMap.put("like_comment_info", String.format("Like %1$d Comments %2$d", new Object[] { Long.valueOf(l1), Long.valueOf(l2) }));
              localHashSet.add(localHashMap);
            }
          }
          catch (JSONException localJSONException)
          {
            i += 1;
          }
          continue;
        }
        return localHashSet;
      }
      finally {}
      label453:
      j += 1;
    }
  }
  
  private void openPostFragment()
  {
    Bundle localBundle = new Bundle();
    App.showPage(new FragmentInfo(PostFeedFragment.class.getName(), localBundle), this);
  }
  
  private void setUiRefreshing(final boolean paramBoolean)
  {
    this.mActivityContext.runOnUiThread(new Runnable()
    {
      public void run()
      {
        FeedsListFragment.this.mPullToRefreshLayout.setRefreshing(paramBoolean);
      }
    });
  }
  
  private void showShouldSignInDialog()
  {
    startSignInFlow();
  }
  
  private void signOut()
  {
    final Facebook localFacebook = getFacebook();
    this.mUserName.setText(2131362382);
    this.mSignedIn = false;
    new Thread()
    {
      public void run()
      {
        if (localFacebook != null) {}
        try
        {
          localFacebook.logout(FeedsListFragment.this.mActivityContext);
          return;
        }
        catch (IOException localIOException) {}catch (MalformedURLException localMalformedURLException) {}
      }
    }.start();
  }
  
  private void sortFeeds(List<Map<String, String>> paramList)
  {
    Collections.sort(paramList, new Comparator()
    {
      public int compare(Map<String, String> paramAnonymousMap1, Map<String, String> paramAnonymousMap2)
      {
        this.val$dateLeft.setTimeInMillis(Long.parseLong((String)paramAnonymousMap1.get("created")));
        this.val$dateRight.setTimeInMillis(Long.parseLong((String)paramAnonymousMap2.get("created")));
        return this.val$dateLeft.compareTo(this.val$dateRight) * -1;
      }
    });
  }
  
  private void startSignInFlow()
  {
    startActivityForResult(App.getPageIntent(new FragmentInfo(AppSignInWithFacebookFragment.class.getName(), new Bundle()), getActivity()), 101);
  }
  
  private void updateContent(List<Map<String, String>> paramList)
  {
    this.mListView.setAdapter(new FeedsSimpleAdapter(null));
    this.mListView.setOnScrollListener(new AbsListView.OnScrollListener()
    {
      public void onScroll(AbsListView paramAnonymousAbsListView, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onScrollStateChanged(AbsListView paramAnonymousAbsListView, int paramAnonymousInt)
      {
        if (paramAnonymousInt == 2) {}
        for (boolean bool = true;; bool = false)
        {
          FeedsListFragment.this.mImageFetcher.setPauseWork(bool);
          return;
        }
      }
    });
  }
  
  private void updateMenuTitles()
  {
    MenuItem localMenuItem = this.mMenu.findItem(2131100290);
    if (this.mSignedIn)
    {
      localMenuItem.setTitle(2131362375);
      return;
    }
    localMenuItem.setTitle(2131362374);
  }
  
  private void updateTopicTitleAndBanner(final String paramString, final ImageView paramImageView, final TextView paramTextView)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        try
        {
          JSONObject localJSONObject = new JSONObject(DataUtil.readString(App.getResourceStream(paramString + ".json")));
          paramImageView.setImageDrawable(App.getDrawableResource(localJSONObject.getString("bannerResource")));
          paramTextView.setText(localJSONObject.getString("topic"));
          return;
        }
        catch (JSONException localJSONException)
        {
          Log.e(FeedsListFragment.TAG, "Error parsing settings json", localJSONException);
          return;
        }
        catch (IllegalArgumentException localIllegalArgumentException)
        {
          Log.e(FeedsListFragment.TAG, "Error parsing settings json", localIllegalArgumentException);
          return;
        }
        catch (IOException localIOException)
        {
          Log.e(FeedsListFragment.TAG, "Error parsing settings json", localIOException);
        }
      }
    }).run();
  }
  
  /* Error */
  private void updateUserInfoFromCache(String paramString, ImageView paramImageView, TextView paramTextView)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 104	com/qbiki/modules/facebookfeeds/FeedsListFragment:mCashedUserInfo	Ljava/util/HashMap;
    //   6: aload_1
    //   7: invokevirtual 430	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   10: checkcast 101	java/util/HashMap
    //   13: astore 7
    //   15: aconst_null
    //   16: astore 5
    //   18: aconst_null
    //   19: astore 4
    //   21: aload 7
    //   23: ifnull +82 -> 105
    //   26: aload 7
    //   28: ldc_w 432
    //   31: invokevirtual 430	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   34: checkcast 225	java/lang/String
    //   37: astore 6
    //   39: aload 7
    //   41: ldc_w 434
    //   44: invokevirtual 430	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   47: checkcast 225	java/lang/String
    //   50: astore 7
    //   52: aload_2
    //   53: ifnull +13 -> 66
    //   56: aload_0
    //   57: getfield 127	com/qbiki/modules/facebookfeeds/FeedsListFragment:mImageFetcher	Lcom/google/android/bitmapfun/ImageFetcher;
    //   60: aload 7
    //   62: aload_2
    //   63: invokevirtual 440	com/google/android/bitmapfun/ImageFetcher:loadImage	(Ljava/lang/Object;Landroid/widget/ImageView;)V
    //   66: aload 7
    //   68: astore 4
    //   70: aload 6
    //   72: astore 5
    //   74: aload_3
    //   75: ifnull +30 -> 105
    //   78: aload 7
    //   80: astore 4
    //   82: aload 6
    //   84: astore 5
    //   86: aload 6
    //   88: ifnull +17 -> 105
    //   91: aload_3
    //   92: aload 6
    //   94: invokevirtual 443	android/widget/TextView:setText	(Ljava/lang/CharSequence;)V
    //   97: aload 6
    //   99: astore 5
    //   101: aload 7
    //   103: astore 4
    //   105: aload 5
    //   107: ifnull +8 -> 115
    //   110: aload 4
    //   112: ifnonnull +7 -> 119
    //   115: aload_2
    //   116: ifnonnull +6 -> 122
    //   119: aload_0
    //   120: monitorexit
    //   121: return
    //   122: new 101	java/util/HashMap
    //   125: dup
    //   126: invokespecial 102	java/util/HashMap:<init>	()V
    //   129: astore 4
    //   131: aload_0
    //   132: getfield 104	com/qbiki/modules/facebookfeeds/FeedsListFragment:mCashedUserInfo	Ljava/util/HashMap;
    //   135: aload_1
    //   136: aload 4
    //   138: invokevirtual 276	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   141: pop
    //   142: aload_0
    //   143: aload_1
    //   144: aload_2
    //   145: aload 4
    //   147: aload_3
    //   148: invokespecial 447	com/qbiki/modules/facebookfeeds/FeedsListFragment:updateUserInfoRequest	(Ljava/lang/String;Landroid/widget/ImageView;Ljava/util/HashMap;Landroid/widget/TextView;)V
    //   151: goto -32 -> 119
    //   154: astore_1
    //   155: aload_0
    //   156: monitorexit
    //   157: aload_1
    //   158: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	159	0	this	FeedsListFragment
    //   0	159	1	paramString	String
    //   0	159	2	paramImageView	ImageView
    //   0	159	3	paramTextView	TextView
    //   19	127	4	localObject1	Object
    //   16	90	5	localObject2	Object
    //   37	61	6	str	String
    //   13	89	7	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   2	15	154	finally
    //   26	52	154	finally
    //   56	66	154	finally
    //   91	97	154	finally
    //   122	151	154	finally
  }
  
  private void updateUserInfoRequest(String paramString, ImageView paramImageView, HashMap<String, String> paramHashMap, TextView paramTextView)
  {
    UserInfoAsyncTask localUserInfoAsyncTask = new UserInfoAsyncTask(null);
    localUserInfoAsyncTask.mImageView = paramImageView;
    localUserInfoAsyncTask.mUserInfo = paramHashMap;
    localUserInfoAsyncTask.mTextView = paramTextView;
    localUserInfoAsyncTask.execute(new Object[] { paramString });
  }
  
  public View getImageFeedView(View paramView, Map<String, String> paramMap)
  {
    Object localObject;
    if ((paramView == null) || (!FacebookImageFeedHolder.class.isInstance(paramView)))
    {
      localObject = (ViewGroup)((LayoutInflater)this.mActivityContext.getSystemService("layout_inflater")).inflate(2130903105, null);
      paramView = new FacebookImageFeedHolder((TextView)((ViewGroup)localObject).findViewById(2131099850), (TextView)((ViewGroup)localObject).findViewById(2131099852), (TextView)((ViewGroup)localObject).findViewById(2131099853), (ImageView)((ViewGroup)localObject).findViewById(2131099849), (ImageView)((ViewGroup)localObject).findViewById(2131099851), (ImageView)((ViewGroup)localObject).findViewById(2131099854));
      ((ViewGroup)localObject).setTag(paramView);
    }
    for (;;)
    {
      updateUserInfoFromCache((String)paramMap.get("actor_id"), paramView.mUserPictureImage, paramView.mUserNameText);
      this.mImageFetcher.loadImage(paramMap.get("icon"), paramView.mFeedTypeImage);
      this.mImageFetcher.loadImage(paramMap.get("thmb_src"), paramView.mFeedThmbImage);
      paramView.mFeedLikeCommentText.setText((CharSequence)paramMap.get("like_comment_info"));
      paramView.mUsedMessageText.setText((CharSequence)paramMap.get("message"));
      StyleUtil.setTextColor(paramView.mUserNameText, this.mStyle);
      StyleUtil.setTextColor(paramView.mFeedLikeCommentText, this.mStyle);
      StyleUtil.setTextColor(paramView.mUsedMessageText, this.mStyle);
      return localObject;
      localObject = paramView;
      paramView = (FacebookImageFeedHolder)paramView.getTag();
    }
  }
  
  public View getTextFeedView(View paramView, Map<String, String> paramMap)
  {
    Object localObject;
    if ((paramView == null) || (!FacebookTextFeedHolder.class.isInstance(paramView)))
    {
      localObject = (ViewGroup)((LayoutInflater)this.mActivityContext.getSystemService("layout_inflater")).inflate(2130903106, null);
      paramView = new FacebookTextFeedHolder((TextView)((ViewGroup)localObject).findViewById(2131099850), (TextView)((ViewGroup)localObject).findViewById(2131099852), (TextView)((ViewGroup)localObject).findViewById(2131099853), (ImageView)((ViewGroup)localObject).findViewById(2131099849));
      ((ViewGroup)localObject).setTag(paramView);
    }
    for (;;)
    {
      updateUserInfoFromCache((String)paramMap.get("actor_id"), paramView.mUserPictureImage, paramView.mUserNameText);
      paramView.mFeedLikeCommentText.setText((CharSequence)paramMap.get("like_comment_info"));
      paramView.mUsedMessageText.setText((CharSequence)paramMap.get("message"));
      StyleUtil.setTextColor(paramView.mUserNameText, this.mStyle);
      StyleUtil.setTextColor(paramView.mFeedLikeCommentText, this.mStyle);
      StyleUtil.setTextColor(paramView.mUsedMessageText, this.mStyle);
      return localObject;
      localObject = paramView;
      paramView = (FacebookTextFeedHolder)paramView.getTag();
    }
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if (paramBoolean) {
      if (this.mImageFetcher != null) {
        this.mImageFetcher.setExitTasksEarly(false);
      }
    }
    while (this.mImageFetcher == null) {
      return;
    }
    this.mImageFetcher.setPauseWork(false);
    this.mImageFetcher.setExitTasksEarly(true);
    this.mImageFetcher.flushCache();
  }
  
  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    new GetFeedsTask(this).execute(new String[] { App.appConfig.getFacebookAppID() });
    setUiRefreshing(true);
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if ((paramInt1 == 101) && (paramInt2 == -1) && (paramIntent != null))
    {
      this.mSignedIn = true;
      this.mUserId = paramIntent.getStringExtra("facebookUserID");
      paramIntent = paramIntent.getStringExtra("displayName");
      updateUserInfoFromCache(this.mUserId, this.mUserPicture, this.mUserName);
      Toast.makeText(this.mActivityContext, this.mActivityContext.getString(2131362378, new Object[] { paramIntent }), 1).show();
      invalidateOptionsMenu();
      return;
    }
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mActivityContext = paramActivity;
    super.onAttach(paramActivity);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    ImageCache.ImageCacheParams localImageCacheParams = new ImageCache.ImageCacheParams(getActivity(), "facebook/profilePictures");
    localImageCacheParams.diskCacheEnabled = true;
    localImageCacheParams.compressFormat = Bitmap.CompressFormat.PNG;
    localImageCacheParams.setMemCacheSizePercent(0.05F);
    localImageCacheParams.clearReusableBitmapsOnClearCache = true;
    this.mImageFetcher = new ImageFetcher(getActivity(), this.mIconSize, false);
    this.mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), localImageCacheParams);
    super.onCreate(paramBundle);
    setHasOptionsMenu(true);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558412, paramMenu);
    this.mMenu = paramMenu;
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramViewGroup = paramLayoutInflater.inflate(2130903130, paramViewGroup, false);
    this.mPullToRefreshLayout = ((PullToRefreshLayout)paramViewGroup.findViewById(2131099914));
    paramLayoutInflater = paramLayoutInflater.inflate(2130903104, null);
    this.mUserPicture = ((ImageView)paramLayoutInflater.findViewById(2131099844));
    this.mUserName = ((TextView)paramLayoutInflater.findViewById(2131099846));
    this.mUserName.setText(2131362382);
    paramBundle = (ProgressBar)paramViewGroup.findViewById(2131099916);
    paramBundle.setIndeterminate(true);
    this.mListView = ((ListView)paramViewGroup.findViewById(2131099915));
    this.mListView.setEmptyView(paramBundle);
    this.mListView.addHeaderView(paramLayoutInflater);
    ActionBarPullToRefresh.from(getActivity()).allChildrenArePullable().useViewDelegate(TextView.class, new ViewDelegate()
    {
      public boolean isReadyForPull(View paramAnonymousView, float paramAnonymousFloat1, float paramAnonymousFloat2)
      {
        return true;
      }
    }).listener(this).setup(this.mPullToRefreshLayout);
    this.mListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (!FeedsListFragment.this.mSignedIn)
        {
          FeedsListFragment.this.showShouldSignInDialog();
          return;
        }
        if (paramAnonymousInt - 1 >= 0) {
          paramAnonymousInt -= 1;
        }
        for (;;)
        {
          paramAnonymousAdapterView = new Bundle();
          paramAnonymousView = new Bundle();
          paramAnonymousView.putString("current_user_id", FeedsListFragment.this.mUserId);
          paramAnonymousView.putString("post_id", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("post_id"));
          paramAnonymousView.putString("actor_id", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("actor_id"));
          paramAnonymousView.putString("source", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("source"));
          paramAnonymousView.putString("thmb_src", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("thmb_src"));
          paramAnonymousView.putString("type", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("type"));
          paramAnonymousView.putString("message", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("message"));
          paramAnonymousView.putString("like_count", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("like_count"));
          paramAnonymousView.putString("comment_count", (String)((Map)FeedsListFragment.this.feedList.get(paramAnonymousInt)).get("comment_count"));
          paramAnonymousAdapterView.putBundle("ARG_POST_INFO", paramAnonymousView);
          paramAnonymousAdapterView = new FragmentInfo(FeedCommentsFragment.class.getName(), paramAnonymousAdapterView);
          if (FeedsListFragment.this.mStyle != null) {
            paramAnonymousAdapterView.getRawArguments().putBundle("PAGE_STYLE", FeedsListFragment.this.mStyle);
          }
          if (FeedsListFragment.this.mTransition != null) {
            paramAnonymousAdapterView.getRawArguments().putString("PAGE_TRANSITION", FeedsListFragment.this.mTransition);
          }
          App.showPage(paramAnonymousAdapterView, FeedsListFragment.this.mActivityContext);
          return;
          paramAnonymousInt = 0;
        }
      }
    });
    paramBundle = (TextView)paramLayoutInflater.findViewById(2131099847);
    ImageView localImageView = (ImageView)paramLayoutInflater.findViewById(2131099845);
    Bundle localBundle = getArguments();
    paramLayoutInflater = null;
    if (localBundle != null)
    {
      this.mStyle = localBundle.getBundle("PAGE_STYLE");
      this.mTransition = localBundle.getString("PAGE_TRANSITION");
      StyleUtil.setBackground(this.mListView, this.mStyle);
      StyleUtil.setTextColor(this.mUserName, this.mStyle);
      StyleUtil.setTextColor(paramBundle, this.mStyle);
      paramLayoutInflater = localBundle.getString("PAGE_ID");
    }
    updateTopicTitleAndBanner(paramLayoutInflater, localImageView, paramBundle);
    return paramViewGroup;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100290: 
      if (this.mSignedIn) {
        signOut();
      }
      for (;;)
      {
        updateMenuTitles();
        return true;
        startSignInFlow();
      }
    }
    if (!this.mSignedIn)
    {
      showShouldSignInDialog();
      return true;
    }
    openPostFragment();
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    super.onPrepareOptionsMenu(paramMenu);
    updateMenuTitles();
  }
  
  public void onRefreshStarted(View paramView)
  {
    setUiRefreshing(true);
    new GetFeedsTask(this).execute(new String[] { App.appConfig.getFacebookAppID() });
  }
  
  private static class FacebookImageFeedHolder
  {
    final TextView mFeedLikeCommentText;
    final ImageView mFeedThmbImage;
    final ImageView mFeedTypeImage;
    final TextView mUsedMessageText;
    final TextView mUserNameText;
    final ImageView mUserPictureImage;
    
    FacebookImageFeedHolder(TextView paramTextView1, TextView paramTextView2, TextView paramTextView3, ImageView paramImageView1, ImageView paramImageView2, ImageView paramImageView3)
    {
      this.mUserNameText = paramTextView1;
      this.mUsedMessageText = paramTextView2;
      this.mFeedLikeCommentText = paramTextView3;
      this.mUserPictureImage = paramImageView1;
      this.mFeedTypeImage = paramImageView2;
      this.mFeedThmbImage = paramImageView3;
    }
  }
  
  private static class FacebookTextFeedHolder
  {
    final TextView mFeedLikeCommentText;
    final TextView mUsedMessageText;
    final TextView mUserNameText;
    final ImageView mUserPictureImage;
    
    FacebookTextFeedHolder(TextView paramTextView1, TextView paramTextView2, TextView paramTextView3, ImageView paramImageView)
    {
      this.mUserNameText = paramTextView1;
      this.mUsedMessageText = paramTextView2;
      this.mFeedLikeCommentText = paramTextView3;
      this.mUserPictureImage = paramImageView;
    }
  }
  
  private class FeedsSimpleAdapter
    implements ListAdapter
  {
    private FeedsSimpleAdapter() {}
    
    public boolean areAllItemsEnabled()
    {
      return true;
    }
    
    public int getCount()
    {
      return FeedsListFragment.this.feedList.size();
    }
    
    public Object getItem(int paramInt)
    {
      return FeedsListFragment.this.feedList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public int getItemViewType(int paramInt)
    {
      if (((String)((Map)FeedsListFragment.this.feedList.get(paramInt)).get("type")).equals("text")) {
        return 0;
      }
      return 1;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (((String)((Map)FeedsListFragment.this.feedList.get(paramInt)).get("type")).equals("text")) {
        return FeedsListFragment.this.getTextFeedView(paramView, (Map)FeedsListFragment.this.feedList.get(paramInt));
      }
      return FeedsListFragment.this.getImageFeedView(paramView, (Map)FeedsListFragment.this.feedList.get(paramInt));
    }
    
    public int getViewTypeCount()
    {
      return 2;
    }
    
    public boolean hasStableIds()
    {
      return false;
    }
    
    public boolean isEmpty()
    {
      return FeedsListFragment.this.feedList.size() == 0;
    }
    
    public boolean isEnabled(int paramInt)
    {
      return true;
    }
    
    public void registerDataSetObserver(DataSetObserver paramDataSetObserver) {}
    
    public void unregisterDataSetObserver(DataSetObserver paramDataSetObserver) {}
  }
  
  private class GetFeedsTask
    extends SCApiRequestAsyncTask<String, String, String>
  {
    public GetFeedsTask(Fragment paramFragment)
    {
      super();
    }
    
    protected void onPostExecute(String paramString)
    {
      if ((paramString != null) && (paramString.equals("ok")))
      {
        Log.d(FeedsListFragment.TAG, "update content");
        FeedsListFragment.this.updateContent(FeedsListFragment.this.feedList);
      }
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
    }
    
    protected String performRequest(String... paramVarArgs)
      throws IOException, JSONException, HttpResponseException, SCApiException
    {
      paramVarArgs = paramVarArgs[0];
      paramVarArgs = SCApi.getInstance().listFacebookFeeds(paramVarArgs);
      ArrayList localArrayList = new ArrayList();
      JSONArray localJSONArray1 = paramVarArgs.getJSONArray("items");
      int i = 0;
      while (i < localJSONArray1.length())
      {
        JSONArray localJSONArray2 = localJSONArray1.getJSONObject(i).getJSONArray("data");
        int j = 0;
        HashMap localHashMap;
        if (j < localJSONArray2.length())
        {
          JSONObject localJSONObject = localJSONArray2.getJSONObject(j);
          localHashMap = new HashMap();
          localHashMap.put("actor_id", localJSONObject.getString("actor_id"));
          localHashMap.put("post_id", localJSONObject.getString("post_id"));
          localHashMap.put("created", "" + localJSONObject.getLong("created_time"));
          localHashMap.put("message", localJSONObject.getString("message"));
          for (;;)
          {
            try
            {
              Object localObject = localJSONObject.getJSONObject("attachment");
              localHashMap.put("icon", ((JSONObject)localObject).getString("icon"));
              paramVarArgs = "";
              if (localJSONObject.getInt("type") != 128) {
                continue;
              }
              localObject = ((JSONObject)localObject).getJSONArray("media");
              paramVarArgs = ((JSONArray)localObject).getJSONObject(0).getJSONObject("video").getString("source_url");
              localHashMap.put("type", "video");
              localHashMap.put("thmb_src", ((JSONArray)localObject).getJSONObject(0).getString("src"));
              localHashMap.put("source", paramVarArgs);
            }
            catch (JSONException paramVarArgs)
            {
              localHashMap.put("icon", "");
              localHashMap.put("source", "");
              localHashMap.put("type", "text");
              continue;
            }
            paramVarArgs = localJSONObject.getJSONObject("like_info");
            localJSONObject = localJSONObject.getJSONObject("comment_info");
            localHashMap.put("like_count", paramVarArgs.getLong("like_count") + "");
            localHashMap.put("comment_count", localJSONObject.getLong("comment_count") + "");
            localHashMap.put("like_comment_info", String.format("Like %1$d Comments %2d", new Object[] { Integer.valueOf(paramVarArgs.getInt("like_count")), Integer.valueOf(localJSONObject.getInt("comment_count")) }));
            localArrayList.add(localHashMap);
            j += 1;
            break;
            if (localJSONObject.getInt("type") != 247) {
              localHashMap.put("type", "text");
            }
          }
        }
        paramVarArgs = FeedsListFragment.this.getFakeFeedsFromPhotoAlbums(localJSONArray2);
        if (paramVarArgs != null) {
          localArrayList.addAll(paramVarArgs);
        }
        FeedsListFragment.access$302(FeedsListFragment.this, localArrayList);
        i += 1;
      }
      FeedsListFragment.this.sortFeeds(FeedsListFragment.this.feedList);
      FeedsListFragment.this.setUiRefreshing(false);
      return "ok";
    }
  }
  
  private class UserInfoAsyncTask
    extends AsyncTask<Object, Void, Void>
  {
    public ImageView mImageView;
    public TextView mTextView;
    public HashMap<String, String> mUserInfo;
    
    private UserInfoAsyncTask() {}
    
    protected Void doInBackground(final Object... paramVarArgs)
    {
      paramVarArgs = String.format("https://graph.facebook.com/%1$s?fields=id,name,picture", new Object[] { (String)paramVarArgs[0] });
      try
      {
        paramVarArgs = new JSONObject(HTTPUtil.performGetRequest(paramVarArgs));
        Log.d(FeedsListFragment.TAG, "RESULT FOR USERID: " + paramVarArgs.toString(1));
        FragmentActivity localFragmentActivity = FeedsListFragment.this.getActivity();
        if (localFragmentActivity == null) {
          return null;
        }
        localFragmentActivity.runOnUiThread(new Runnable()
        {
          public void run()
          {
            try
            {
              FeedsListFragment.UserInfoAsyncTask.this.mUserInfo.put("name", paramVarArgs.getString("name"));
              if (FeedsListFragment.UserInfoAsyncTask.this.mTextView != null) {
                FeedsListFragment.UserInfoAsyncTask.this.mTextView.setText(paramVarArgs.getString("name"));
              }
              JSONObject localJSONObject = paramVarArgs.getJSONObject("picture").getJSONObject("data");
              FeedsListFragment.UserInfoAsyncTask.this.mUserInfo.put("pic_big", localJSONObject.getString("url"));
              if (FeedsListFragment.UserInfoAsyncTask.this.mImageView != null) {
                FeedsListFragment.this.mImageFetcher.loadImage(localJSONObject.getString("url"), FeedsListFragment.UserInfoAsyncTask.this.mImageView);
              }
              return;
            }
            catch (JSONException localJSONException)
            {
              Log.e(FeedsListFragment.TAG, "Error: Unable fetch user profile picture.", localJSONException);
            }
          }
        });
        return null;
      }
      catch (IOException paramVarArgs)
      {
        Log.d(FeedsListFragment.TAG, "Error:" + paramVarArgs.getLocalizedMessage(), paramVarArgs);
        return null;
      }
      catch (JSONException paramVarArgs)
      {
        Log.d(FeedsListFragment.TAG, "Error:" + paramVarArgs.getLocalizedMessage(), paramVarArgs);
      }
      return null;
    }
  }
}
