package com.qbiki.modules.savephoto;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.location.Location;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.SystemClock;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.Toast;
import com.google.android.net.SntpClient;
import com.qbiki.location.AsyncGeocoder;
import com.qbiki.location.LocationDetectorActivity;
import com.qbiki.location.LocationUtil;
import com.qbiki.location.SimpleLocationManager;
import com.qbiki.location.SimpleLocationManager.BestLocationEstimateListenerAdapter;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.CollectionUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptListener;
import com.qbiki.util.ImageUtil;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

public class SavePhotoActivity
  extends SCActivity
{
  private static final boolean DEBUG = false;
  private static final String EXTERNAL_PICTURES_STORAGE_DIRECTORY = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsolutePath();
  public static final String EXTRA_BOTTOM_TEXT = "EXTRA_BOTTOM_TEXT";
  public static final String EXTRA_LEFT_TEXT_PREFIXES = "EXTRA_LEFT_TEXT_PREFIXES";
  public static final String EXTRA_STORE_ID = "EXTRA_STORE_ID";
  private static final String FILE_SYSTEM_RESERVERD_CHARS_PATTERN = "[|\\\\?*<\\\":>+\\[\\]/']";
  private static final double LOCATION_REFINEMENT_LIMIT_MILES = 0.056818181818181816D;
  private static final int LOCATION_REFINEMENT_LIMIT_YARDS = 100;
  private static final String NON_EXISTING_VALUE = "NON_EXISTING_VALUE";
  private static final String NO_ALBUM = "";
  private static final String PREFS_FILE_DEFAULT = "com.qbiki.modules.savephoto";
  private static final String PREF_ALBUM_NAME = "albumName";
  private static final String PREF_LEFT_TEXT = "leftText";
  private static final String PREF_LEFT_TEXT_PREFIX = "leftTextPrefix";
  private static final String PREF_RIGHT_TEXT = "rightText";
  private static final int REQUEST_CODE_CAMERA = 1;
  private static final int REQUEST_CODE_LOCATION_PICKER = 2;
  private static final String TAG = "SavePhotoActivity";
  private static final String TEMP_PHOTO_NAME = "temp.jpg";
  private static int mLandscapeSampleSize = 1;
  private static int mPortraitSampleSize = 1;
  private EditText mAddressText;
  private Spinner mAlbumSpinner;
  private String mBottomText;
  private boolean mCameraStarted = false;
  private Button mCancelButton;
  private NumberFormat mCoordFormatter;
  private Location mCurrentLocation = new Location("code");
  private String mFullAddress = "";
  private AsyncGeocoder mGeocoder;
  private EditText mLeftText;
  private Spinner mLeftTextPrefixSpinner;
  private String[] mLeftTextPrefixes;
  private SimpleLocationManager mLocationManager;
  private EditText mLocationText;
  private boolean mNtpTime = false;
  private Date mPhotoTakenDate = new Date();
  private String mPhotosPath;
  private Map<String, String> mPrefs = new HashMap();
  private String mPrefsFile = "com.qbiki.modules.savephoto";
  private Location mRealCurrentLocation = new Location("code");
  private EditText mRightText;
  private Button mSaveButton;
  private File mTempPhotoFile;
  private boolean mUpdateCurrentLocation = true;
  private CheckBox mUseStreetAddressCheckBox;
  
  public SavePhotoActivity() {}
  
  private void addPhotoToGallery(File paramFile)
  {
    Intent localIntent = new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE");
    localIntent.setData(Uri.fromFile(paramFile));
    sendBroadcast(localIntent);
  }
  
  private Bitmap decodePhotoBitmapWithSampleSize(int paramInt)
  {
    Object localObject = new BitmapFactory.Options();
    ((BitmapFactory.Options)localObject).inSampleSize = paramInt;
    ((BitmapFactory.Options)localObject).inPurgeable = true;
    localObject = BitmapFactory.decodeFile(this.mTempPhotoFile.getAbsolutePath(), (BitmapFactory.Options)localObject);
    return ImageUtil.correctImageOrientation(this.mTempPhotoFile.getAbsolutePath(), (Bitmap)localObject);
  }
  
  private Bitmap drawTextOnBitmap(Bitmap paramBitmap, String paramString1, String paramString2, String paramString3, String paramString4)
  {
    int j = 0;
    int n = 0;
    int i1 = 0;
    int k;
    label28:
    label47:
    int m;
    label60:
    label83:
    label96:
    int i2;
    int i3;
    if (paramString2 != null)
    {
      i = 1;
      if (paramString2.equals("")) {
        break label421;
      }
      k = 1;
      if ((i & k) != 0) {
        j = 1;
      }
      if (paramString3 == null) {
        break label427;
      }
      i = 1;
      if (paramString3.equals("")) {
        break label433;
      }
      m = 1;
      k = n;
      if ((i & m) != 0) {
        k = 1;
      }
      if (paramString4 == null) {
        break label439;
      }
      i = 1;
      if (paramString4.equals("")) {
        break label445;
      }
      n = 1;
      m = i1;
      if ((i & n) != 0) {
        m = 1;
      }
      i2 = paramBitmap.getWidth();
      i3 = paramBitmap.getHeight();
      if (i3 >= i2) {
        break label451;
      }
    }
    Canvas localCanvas;
    Paint localPaint;
    float f3;
    float f2;
    label421:
    label427:
    label433:
    label439:
    label445:
    label451:
    for (int i = i3 / 25;; i = i2 / 25)
    {
      String[] arrayOfString = paramString1.split("\\n");
      int i4 = i * arrayOfString.length;
      n = 0;
      if (j != 0) {
        n = i;
      }
      i1 = 0;
      if ((k != 0) || (m != 0)) {
        i1 = i;
      }
      paramString1 = Bitmap.createBitmap(i2, i3 + i4 + n + i1, paramBitmap.getConfig());
      localCanvas = new Canvas(paramString1);
      localPaint = new Paint(1);
      i1 = localCanvas.getHeight();
      i2 = localCanvas.getWidth();
      localCanvas.drawBitmap(paramBitmap, 0.0F, i4, localPaint);
      paramBitmap.recycle();
      localPaint.setColor(-16777216);
      localCanvas.drawRect(0.0F, 0.0F, i2, i4, localPaint);
      localPaint.setColor(-1);
      f3 = i / 1.3F;
      f2 = f3 / 4.0F;
      paramBitmap = Typeface.create(Typeface.MONOSPACE, 0);
      localPaint.setTextSize(f3);
      localPaint.setTypeface(paramBitmap);
      localPaint.setTextAlign(Paint.Align.CENTER);
      f1 = i2 - f3 / 4.0F;
      n = 0;
      while (n < arrayOfString.length)
      {
        paramBitmap = ellipsizeText(localPaint, arrayOfString[n], f1);
        f4 = i * n + getTextBounds(localPaint, paramBitmap).top * -1;
        localCanvas.drawText(paramBitmap, i2 / 2, f4 + f2, localPaint);
        n += 1;
      }
      i = 0;
      break;
      k = 0;
      break label28;
      i = 0;
      break label47;
      m = 0;
      break label60;
      i = 0;
      break label83;
      n = 0;
      break label96;
    }
    if (j != 0)
    {
      localPaint.setColor(-16777216);
      localCanvas.drawRect(0.0F, i1 - i, i2, i1, localPaint);
      localPaint.setColor(-1);
      paramBitmap = getTextBounds(localPaint, paramString2);
      localCanvas.drawText(ellipsizeText(localPaint, paramString2, f1), i2 / 2, i1 - i + paramBitmap.top * -1 + f2, localPaint);
    }
    float f1 = i1;
    if (j != 0) {
      f1 = i1 - i;
    }
    if ((k != 0) || (m != 0))
    {
      localPaint.setColor(-16777216);
      localCanvas.drawRect(0.0F, f1 - i, i2, f1, localPaint);
    }
    float f4 = f3 / 3.0F;
    f3 /= 3.0F;
    f4 = i2 / 2 - f4 / 2.0F - f3;
    if (k != 0)
    {
      localPaint.setColor(-1);
      localPaint.setTextAlign(Paint.Align.LEFT);
      paramBitmap = ellipsizeText(localPaint, paramString3, f4);
      paramString2 = getTextBounds(localPaint, paramBitmap);
      localCanvas.drawText(paramBitmap, f3, f1 - i + paramString2.top * -1 + f2, localPaint);
    }
    if (m != 0)
    {
      localPaint.setColor(-1);
      localPaint.setTextAlign(Paint.Align.RIGHT);
      paramBitmap = ellipsizeText(localPaint, paramString4, f4);
      paramString2 = getTextBounds(localPaint, paramBitmap);
      localCanvas.drawText(paramBitmap, i2 - f3, f1 - i + paramString2.top * -1 + f2, localPaint);
    }
    return paramString1;
  }
  
  private String ellipsizeText(Paint paramPaint, String paramString, float paramFloat)
  {
    int i = paramPaint.breakText(paramString, true, paramFloat, null);
    paramPaint = paramString;
    if (paramString.length() > i) {
      paramPaint = paramString.substring(0, i - 1) + "â€¦";
    }
    return paramPaint;
  }
  
  private String formatLocation(Location paramLocation)
  {
    return this.mCoordFormatter.format(paramLocation.getLatitude()) + ", " + this.mCoordFormatter.format(paramLocation.getLongitude());
  }
  
  private String getDateTimeString(Date paramDate)
  {
    return DateFormat.getDateTimeInstance(3, 2).format(paramDate).replaceAll("[|\\\\?*<\\\":>+\\[\\]/']", "-");
  }
  
  private Rect getTextBounds(Paint paramPaint, String paramString)
  {
    Rect localRect = new Rect();
    paramPaint.getTextBounds(paramString, 0, paramString.length(), localRect);
    return localRect;
  }
  
  private void initActions()
  {
    Button localButton = (Button)findViewById(2131100180);
    View.OnClickListener local2 = new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        SavePhotoActivity.access$102(SavePhotoActivity.this, false);
        SavePhotoActivity.this.stopUpdatingLocation();
        paramAnonymousView = new Intent(SavePhotoActivity.this, LocationDetectorActivity.class);
        paramAnonymousView.setAction("com.qbiki.modules.ACTION_PICK_LOCATION");
        if ((SavePhotoActivity.this.mCurrentLocation.getLatitude() != 0.0D) && (SavePhotoActivity.this.mCurrentLocation.getLongitude() != 0.0D))
        {
          paramAnonymousView.putExtra("latitude", SavePhotoActivity.this.mCurrentLocation.getLatitude());
          paramAnonymousView.putExtra("longitude", SavePhotoActivity.this.mCurrentLocation.getLongitude());
        }
        SavePhotoActivity.this.startActivityForResult(paramAnonymousView, 2);
      }
    };
    localButton.setOnClickListener(local2);
    this.mLocationText.setOnClickListener(local2);
    this.mUseStreetAddressCheckBox.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        SavePhotoActivity.this.refreshAddress();
      }
    });
    this.mAlbumSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (SavePhotoActivity.this.mAlbumSpinner.getSelectedItem().toString().equals(SavePhotoActivity.this.getResources().getString(2131362003)))
        {
          SavePhotoActivity.this.mAlbumSpinner.setSelection(0);
          DialogUtil.showPrompt(SavePhotoActivity.this, SavePhotoActivity.this.getResources().getString(2131362004), null, false, new DialogUtil.PromptListener()
          {
            public void onCancel() {}
            
            public void onStringInput(String paramAnonymous2String)
            {
              new File(SavePhotoActivity.this.mPhotosPath, paramAnonymous2String.replaceAll("[|\\\\?*<\\\":>+\\[\\]/']", " ")).mkdir();
              SavePhotoActivity.this.initAlbumSpinner(paramAnonymous2String);
            }
          });
        }
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
    this.mSaveButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (!"mounted".equals(Environment.getExternalStorageState()))
        {
          Toast.makeText(SavePhotoActivity.this, 2131362006, 1).show();
          return;
        }
        if (SavePhotoActivity.this.mAlbumSpinner.getSelectedItem().toString().equals(""))
        {
          Toast.makeText(SavePhotoActivity.this, 2131362005, 1).show();
          return;
        }
        new SavePhotoActivity.SavePhotoAsyncTask(SavePhotoActivity.this, null).execute(new Void[0]);
      }
    });
    this.mCancelButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        SavePhotoActivity.this.finish();
      }
    });
    this.mAddressText.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        SavePhotoActivity.this.stopUpdatingLocation();
      }
    });
    this.mAddressText.setOnFocusChangeListener(new View.OnFocusChangeListener()
    {
      public void onFocusChange(View paramAnonymousView, boolean paramAnonymousBoolean)
      {
        if (paramAnonymousBoolean) {
          SavePhotoActivity.this.stopUpdatingLocation();
        }
      }
    });
  }
  
  private void initAlbumSpinner(String paramString)
  {
    Object localObject = new File(this.mPhotosPath);
    ((File)localObject).mkdirs();
    localObject = CollectionUtil.newArrayList(((File)localObject).list(new FilenameFilter()
    {
      public boolean accept(File paramAnonymousFile, String paramAnonymousString)
      {
        return new File(paramAnonymousFile, paramAnonymousString).isDirectory();
      }
    }));
    Collections.sort((List)localObject);
    if (((List)localObject).isEmpty()) {
      ((List)localObject).add("");
    }
    ((List)localObject).add(getResources().getString(2131362003));
    localObject = new ArrayAdapter(this, 17367048, (List)localObject);
    ((ArrayAdapter)localObject).setDropDownViewResource(17367049);
    this.mAlbumSpinner.setAdapter((SpinnerAdapter)localObject);
    selectItemInSpinner(this.mAlbumSpinner, paramString);
  }
  
  private void initLeftTextPrefixSpinner(String paramString)
  {
    ArrayAdapter localArrayAdapter = new ArrayAdapter(this, 17367048, this.mLeftTextPrefixes);
    localArrayAdapter.setDropDownViewResource(17367049);
    this.mLeftTextPrefixSpinner.setAdapter(localArrayAdapter);
    selectItemInSpinner(this.mLeftTextPrefixSpinner, paramString);
  }
  
  private boolean newLocationIsValid(double paramDouble1, double paramDouble2)
  {
    return LocationUtil.getDistance(this.mRealCurrentLocation.getLatitude(), this.mRealCurrentLocation.getLongitude(), paramDouble1, paramDouble2, true) <= 0.056818181818181816D;
  }
  
  private void persistPrefs()
  {
    SharedPreferences.Editor localEditor = getSharedPreferences(this.mPrefsFile, 0).edit();
    localEditor.putString("albumName", this.mAlbumSpinner.getSelectedItem().toString());
    localEditor.putString("leftTextPrefix", this.mLeftTextPrefixSpinner.getSelectedItem().toString());
    localEditor.putString("leftText", this.mLeftText.getText().toString());
    localEditor.putString("rightText", this.mRightText.getText().toString());
    localEditor.commit();
  }
  
  private void populateFields()
  {
    readPrefs();
    initAlbumSpinner((String)this.mPrefs.get("albumName"));
    initLeftTextPrefixSpinner((String)this.mPrefs.get("leftTextPrefix"));
    this.mLeftText.setText((CharSequence)this.mPrefs.get("leftText"));
    this.mRightText.setText((CharSequence)this.mPrefs.get("rightText"));
  }
  
  private void readPrefs()
  {
    SharedPreferences localSharedPreferences = getSharedPreferences(this.mPrefsFile, 0);
    this.mPrefs.put("albumName", localSharedPreferences.getString("albumName", "NON_EXISTING_VALUE"));
    this.mPrefs.put("leftTextPrefix", localSharedPreferences.getString("leftTextPrefix", "NON_EXISTING_VALUE"));
    this.mPrefs.put("leftText", localSharedPreferences.getString("leftText", ""));
    this.mPrefs.put("rightText", localSharedPreferences.getString("rightText", ""));
  }
  
  private void refreshAddress()
  {
    if (this.mUseStreetAddressCheckBox.isChecked())
    {
      this.mAddressText.setText(this.mFullAddress);
      return;
    }
    this.mAddressText.setText(LocationUtil.getAddressWithoutStreet(this.mFullAddress));
  }
  
  private void refreshAddress(String paramString)
  {
    this.mFullAddress = paramString;
    refreshAddress();
  }
  
  @SuppressLint({"SimpleDateFormat"})
  private boolean savePhoto(int paramInt)
  {
    Object localObject2 = decodePhotoBitmapWithSampleSize(paramInt);
    if (localObject2 == null) {
      return false;
    }
    Object localObject1 = new SimpleDateFormat("dd-MMM-yyyy HHmm 'UTC'");
    ((SimpleDateFormat)localObject1).setTimeZone(TimeZone.getTimeZone("UTC"));
    String str1 = ((SimpleDateFormat)localObject1).format(this.mPhotoTakenDate);
    localObject1 = "";
    if (!this.mNtpTime) {
      localObject1 = " *";
    }
    str1 = str1 + (String)localObject1 + " | " + this.mLocationText.getText() + "\n" + this.mAddressText.getText();
    if (this.mLeftText.getText().toString().length() == 0) {
      localObject1 = "";
    }
    for (;;)
    {
      String str2 = this.mRightText.getText().toString();
      localObject1 = drawTextOnBitmap((Bitmap)localObject2, str1, this.mBottomText, (String)localObject1, str2);
      localObject2 = new File(this.mPhotosPath + "/" + this.mAlbumSpinner.getSelectedItem() + "/" + getDateTimeString(this.mPhotoTakenDate) + ".jpg");
      try
      {
        ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, 90, new FileOutputStream((File)localObject2));
        ((Bitmap)localObject1).recycle();
        addPhotoToGallery((File)localObject2);
        return true;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        Log.e("SavePhotoActivity", "Photo save: " + localFileNotFoundException);
      }
      if (((String)this.mLeftTextPrefixSpinner.getSelectedItem()).length() != 0) {
        localObject1 = this.mLeftTextPrefixSpinner.getSelectedItem() + " " + this.mLeftText.getText().toString();
      } else {
        localObject1 = this.mLeftText.getText().toString();
      }
    }
    return false;
  }
  
  private void selectItemInSpinner(Spinner paramSpinner, String paramString)
  {
    int i;
    if (paramString != null) {
      i = 0;
    }
    for (;;)
    {
      if (i < paramSpinner.getAdapter().getCount())
      {
        if (((String)paramSpinner.getAdapter().getItem(i)).equalsIgnoreCase(paramString)) {
          paramSpinner.setSelection(i);
        }
      }
      else {
        return;
      }
      i += 1;
    }
  }
  
  private void startCamera()
  {
    this.mSaveButton.setEnabled(false);
    this.mCancelButton.setEnabled(false);
    new File(this.mPhotosPath).mkdirs();
    try
    {
      Intent localIntent = new Intent("android.media.action.IMAGE_CAPTURE");
      localIntent.putExtra("output", Uri.fromFile(this.mTempPhotoFile));
      startActivityForResult(localIntent, 1);
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      Toast.makeText(this, 2131361936, 1).show();
      finish();
    }
  }
  
  private void startUpdatingLocation()
  {
    this.mLocationManager = new SimpleLocationManager(this, new SimpleLocationManager.BestLocationEstimateListenerAdapter(false)
    {
      public void onBestLocationEstimateChanged(Location paramAnonymousLocation)
      {
        super.onBestLocationEstimateChanged(paramAnonymousLocation);
        SavePhotoActivity.access$902(SavePhotoActivity.this, SavePhotoActivity.access$302(SavePhotoActivity.this, paramAnonymousLocation));
        SavePhotoActivity.this.updateUiForLocation(paramAnonymousLocation);
      }
    });
    this.mLocationManager.setMinTime(2000L);
    this.mLocationManager.startUpdatingLocation();
  }
  
  private void stopUpdatingLocation()
  {
    if (this.mLocationManager != null)
    {
      this.mLocationManager.stopUpdatingLocation();
      this.mLocationManager = null;
    }
  }
  
  private void updateUiForLocation(Location paramLocation)
  {
    this.mLocationText.setText(formatLocation(paramLocation));
    if (this.mGeocoder == null) {
      this.mGeocoder = new AsyncGeocoder(this, this, new AsyncTaskListener()
      {
        public void asyncTaskFinished(Object paramAnonymousObject)
        {
          if (paramAnonymousObject != null)
          {
            SavePhotoActivity.this.refreshAddress((String)paramAnonymousObject);
            return;
          }
          SavePhotoActivity.this.refreshAddress(SavePhotoActivity.this.mLocationText.getText().toString());
        }
      });
    }
    this.mGeocoder.getAddress(paramLocation);
  }
  
  public void finish()
  {
    if (this.mTempPhotoFile != null) {
      this.mTempPhotoFile.delete();
    }
    super.finish();
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt1 == 1) {
      if (paramInt2 == -1) {
        new CorrectTimeAsyncTask(null).execute(new Void[0]);
      }
    }
    while ((paramInt1 != 2) || (paramInt2 != -1))
    {
      return;
      finish();
      return;
    }
    double d1 = paramIntent.getExtras().getDouble("latitude");
    double d2 = paramIntent.getExtras().getDouble("longitude");
    if (newLocationIsValid(d1, d2))
    {
      this.mCurrentLocation = new Location("user");
      this.mCurrentLocation.setLatitude(d1);
      this.mCurrentLocation.setLongitude(d2);
      this.mLocationText.setText(formatLocation(this.mCurrentLocation));
      refreshAddress(paramIntent.getExtras().getString("address"));
      return;
    }
    DialogUtil.showAlert(this, 2131361916, getString(2131362015, new Object[] { Integer.valueOf(100) }));
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903203);
    Object localObject = getResources().getString(2131361834).replaceAll("[|\\\\?*<\\\":>+\\[\\]/']", " ").trim();
    this.mPhotosPath = (EXTERNAL_PICTURES_STORAGE_DIRECTORY + "/" + (String)localObject + "/");
    this.mTempPhotoFile = new File(this.mPhotosPath, "temp.jpg");
    this.mAddressText = ((EditText)findViewById(2131099920));
    this.mLocationText = ((EditText)findViewById(2131100179));
    this.mUseStreetAddressCheckBox = ((CheckBox)findViewById(2131100181));
    this.mAlbumSpinner = ((Spinner)findViewById(2131100182));
    this.mLeftTextPrefixSpinner = ((Spinner)findViewById(2131100183));
    this.mLeftText = ((EditText)findViewById(2131100184));
    this.mRightText = ((EditText)findViewById(2131100185));
    this.mSaveButton = ((Button)findViewById(2131099793));
    this.mCancelButton = ((Button)findViewById(2131099794));
    this.mCoordFormatter = NumberFormat.getInstance();
    this.mCoordFormatter.setMaximumFractionDigits(6);
    this.mCoordFormatter.setMinimumFractionDigits(6);
    localObject = getIntent().getExtras();
    if (localObject != null)
    {
      this.mBottomText = ((Bundle)localObject).getString("EXTRA_BOTTOM_TEXT");
      this.mLeftTextPrefixes = ((Bundle)localObject).getStringArray("EXTRA_LEFT_TEXT_PREFIXES");
      localObject = ((Bundle)localObject).getString("EXTRA_STORE_ID");
      if (localObject != null) {
        this.mPrefsFile = (this.mPrefsFile + "." + (String)localObject);
      }
    }
    if (this.mBottomText == null) {
      this.mBottomText = "";
    }
    if (this.mLeftTextPrefixes == null) {
      this.mLeftTextPrefixes = new String[] { "" };
    }
    populateFields();
    if (paramBundle != null)
    {
      this.mUpdateCurrentLocation = paramBundle.getBoolean("updateCurrentLocation");
      this.mCameraStarted = paramBundle.getBoolean("cameraStarted");
      double d1 = paramBundle.getDouble("currentLatitude");
      double d2 = paramBundle.getDouble("currentLongitude");
      this.mCurrentLocation.setLatitude(d1);
      this.mCurrentLocation.setLongitude(d2);
    }
    if (this.mUpdateCurrentLocation) {
      startUpdatingLocation();
    }
    if (!this.mCameraStarted)
    {
      startCamera();
      this.mCameraStarted = true;
    }
    initActions();
    getWindow().setSoftInputMode(3);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    stopUpdatingLocation();
  }
  
  public void onPause()
  {
    if (this.mLocationManager != null) {
      this.mLocationManager.stopUpdatingLocation();
    }
    super.onPause();
  }
  
  public void onResume()
  {
    if (this.mLocationManager != null) {
      this.mLocationManager.startUpdatingLocation();
    }
    super.onResume();
  }
  
  protected void onSaveInstanceState(Bundle paramBundle)
  {
    paramBundle.putBoolean("cameraStarted", this.mCameraStarted);
    paramBundle.putBoolean("updateCurrentLocation", this.mUpdateCurrentLocation);
    paramBundle.putDouble("currentLatitude", this.mCurrentLocation.getLatitude());
    paramBundle.putDouble("currentLongitude", this.mCurrentLocation.getLongitude());
    super.onSaveInstanceState(paramBundle);
  }
  
  private class CorrectTimeAsyncTask
    extends AsyncTask<Void, Void, Boolean>
  {
    private Long time = null;
    
    private CorrectTimeAsyncTask() {}
    
    protected Boolean doInBackground(Void... paramVarArgs)
    {
      paramVarArgs = new SntpClient();
      boolean bool = false;
      int i = 0;
      for (;;)
      {
        int j;
        if (!bool)
        {
          j = i + 1;
          if (i < 10)
          {
            bool = paramVarArgs.requestTime("pool.ntp.org", 300);
            if (!bool) {
              break label75;
            }
            this.time = Long.valueOf(paramVarArgs.getNtpTime() + SystemClock.elapsedRealtime() - paramVarArgs.getNtpTimeReference());
            i = j;
            continue;
          }
        }
        return Boolean.valueOf(bool);
        label75:
        i = j;
      }
    }
    
    protected void onPostExecute(Boolean paramBoolean)
    {
      SavePhotoActivity.access$2302(SavePhotoActivity.this, paramBoolean.booleanValue());
      if (SavePhotoActivity.this.mNtpTime) {
        SavePhotoActivity.access$2002(SavePhotoActivity.this, new Date(this.time.longValue()));
      }
      SavePhotoActivity.this.mSaveButton.setEnabled(true);
      SavePhotoActivity.this.mCancelButton.setEnabled(true);
    }
    
    protected void onPreExecute()
    {
      SavePhotoActivity.access$2002(SavePhotoActivity.this, new Date());
      SavePhotoActivity.this.mSaveButton.setEnabled(false);
      SavePhotoActivity.this.mCancelButton.setEnabled(false);
    }
  }
  
  private class SavePhotoAsyncTask
    extends AsyncTask<Void, Void, Boolean>
  {
    private ProgressDialog progressDialog;
    
    private SavePhotoAsyncTask() {}
    
    protected Boolean doInBackground(Void... paramVarArgs)
    {
      SavePhotoActivity.this.persistPrefs();
      System.gc();
      paramVarArgs = new BitmapFactory.Options();
      paramVarArgs.inJustDecodeBounds = true;
      BitmapFactory.decodeFile(SavePhotoActivity.this.mTempPhotoFile.getAbsolutePath(), paramVarArgs);
      int j;
      int i;
      boolean bool;
      if (paramVarArgs.outWidth < paramVarArgs.outHeight)
      {
        j = 1;
        if (j == 0) {
          break label119;
        }
        i = SavePhotoActivity.mPortraitSampleSize;
        int k = i - 1;
        i = k;
        if (k < 1) {
          i = 1;
        }
        bool = false;
      }
      for (;;)
      {
        if (i < 12) {}
        try
        {
          bool = SavePhotoActivity.this.savePhoto(i);
          if (bool) {
            if (j != 0)
            {
              SavePhotoActivity.access$1502(i);
              return Boolean.valueOf(bool);
              j = 0;
              break;
              label119:
              i = SavePhotoActivity.mLandscapeSampleSize;
            }
          }
        }
        catch (OutOfMemoryError localOutOfMemoryError)
        {
          for (;;)
          {
            bool = false;
            Log.i("SavePhotoActivity", "OutOfMemoryError while loading or processing bitmap of size: " + paramVarArgs.outWidth + ", " + paramVarArgs.outHeight + ", with sampleSize " + i);
            continue;
            SavePhotoActivity.access$1602(i);
          }
          i += 1;
        }
      }
    }
    
    protected void onPostExecute(Boolean paramBoolean)
    {
      this.progressDialog.dismiss();
      if (paramBoolean.booleanValue())
      {
        if (SavePhotoActivity.this.mTempPhotoFile != null) {
          SavePhotoActivity.this.mTempPhotoFile.delete();
        }
        SavePhotoActivity.this.startUpdatingLocation();
        SavePhotoActivity.this.startCamera();
        return;
      }
      Toast.makeText(SavePhotoActivity.this, 2131362014, 1).show();
    }
    
    protected void onPreExecute()
    {
      SavePhotoActivity.this.stopUpdatingLocation();
      this.progressDialog = new ProgressDialog(SavePhotoActivity.this);
      this.progressDialog.setMessage(SavePhotoActivity.this.getResources().getString(2131362007));
      this.progressDialog.setCancelable(false);
      this.progressDialog.show();
    }
  }
}
