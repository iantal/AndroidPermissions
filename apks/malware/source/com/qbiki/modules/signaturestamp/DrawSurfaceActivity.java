package com.qbiki.modules.signaturestamp;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Rect;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.WindowManager;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DialogUtil;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

@SuppressLint({"SimpleDateFormat"})
public class DrawSurfaceActivity
  extends SCActivity
{
  private ArrayList<Path> _graphics = new ArrayList();
  private Paint backPaint;
  private Paint boundPaintFill;
  private Paint boundPaintStroke;
  private Rect boundRect = null;
  private DrawingPanel drawingPanel;
  private Paint mPaint;
  private int surfHeight = 0;
  private int surfWidth = 0;
  
  public DrawSurfaceActivity() {}
  
  private void createBoundRect()
  {
    if ((this.surfWidth > 0) && (this.surfHeight > 0))
    {
      int i1 = this.surfWidth;
      int n = this.surfHeight;
      int k = this.drawingPanel.getWidth();
      int m = this.drawingPanel.getHeight();
      int j;
      int i;
      if (k <= i1)
      {
        j = m;
        i = k;
        if (m <= n) {}
      }
      else
      {
        float f = Math.min(k / this.surfWidth, m / this.surfHeight);
        i = (int)(i1 * f);
        j = (int)(n * f);
      }
      k = this.drawingPanel.getWidth() / 2 - i / 2 + 1;
      m = this.drawingPanel.getHeight() / 2 - j / 2;
      this.boundRect = new Rect(k, m, i + k, j + m);
      return;
    }
    this.boundRect = new Rect(0, 0, this.drawingPanel.getWidth(), this.drawingPanel.getHeight());
  }
  
  private void createImageAndClose()
  {
    Object localObject1 = this.drawingPanel.getSignatureImage();
    String str = App.getAppProtectedStoragePath() + "/SignatureStamp";
    new File(str).mkdirs();
    Object localObject2 = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss").format(new Date());
    localObject2 = (String)localObject2 + ".png";
    str = str + "/" + (String)localObject2;
    try
    {
      localObject2 = new FileOutputStream(str);
      ((Bitmap)localObject1).compress(Bitmap.CompressFormat.PNG, 90, (OutputStream)localObject2);
      localObject1 = Boolean.valueOf(true);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Boolean localBoolean = Boolean.valueOf(false);
      }
      setResult(0);
      DialogUtil.showAlert(this, 2131362106, 2131362105);
    }
    if (((Boolean)localObject1).booleanValue())
    {
      localObject1 = new Intent();
      ((Intent)localObject1).putExtra("imagePath", str);
      setResult(-1, (Intent)localObject1);
      finish();
      return;
    }
  }
  
  @SuppressLint({"NewApi"})
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.drawingPanel = new DrawingPanel(this);
    if (Build.VERSION.SDK_INT >= 11) {
      this.drawingPanel.setLayerType(0, null);
    }
    setContentView(this.drawingPanel);
    setResult(0);
    this.mPaint = new Paint();
    this.mPaint.setDither(true);
    this.mPaint.setColor(-16777216);
    this.mPaint.setStyle(Paint.Style.STROKE);
    this.mPaint.setStrokeJoin(Paint.Join.ROUND);
    this.mPaint.setStrokeCap(Paint.Cap.ROUND);
    this.mPaint.setAntiAlias(true);
    this.mPaint.setStrokeWidth(4.0F);
    this.backPaint = new Paint();
    this.backPaint.setStyle(Paint.Style.FILL);
    this.backPaint.setColor(-16777216);
    this.boundPaintStroke = new Paint();
    this.boundPaintStroke.setColor(55040);
    this.boundPaintStroke.setStyle(Paint.Style.STROKE);
    this.boundPaintStroke.setStrokeWidth(3.0F);
    this.boundPaintFill = new Paint();
    this.boundPaintFill.setColor(-1);
    this.boundPaintFill.setStyle(Paint.Style.FILL);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null)
    {
      this.surfWidth = paramBundle.getInt("surfWidth", 0);
      this.surfHeight = paramBundle.getInt("surfHeight", 0);
    }
    this.drawingPanel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener()
    {
      public void onGlobalLayout()
      {
        DrawSurfaceActivity.this.createBoundRect();
      }
    });
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getSupportMenuInflater().inflate(2131558407, paramMenu);
    return super.onCreateOptionsMenu(paramMenu);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    }
    for (;;)
    {
      return super.onOptionsItemSelected(paramMenuItem);
      createImageAndClose();
      continue;
      this.drawingPanel.clearSurface();
    }
  }
  
  class DrawingPanel
    extends SurfaceView
    implements SurfaceHolder.Callback
  {
    private DrawSurfaceActivity.DrawingThread _thread;
    private Path path;
    
    public DrawingPanel(Context paramContext)
    {
      super();
      getHolder().addCallback(this);
      this._thread = new DrawSurfaceActivity.DrawingThread(DrawSurfaceActivity.this, getHolder(), this);
    }
    
    public void clearSurface()
    {
      synchronized (this._thread.getSurfaceHolder())
      {
        DrawSurfaceActivity.this._graphics.clear();
        return;
      }
    }
    
    public Bitmap getSignatureImage()
    {
      Object localObject1 = new DisplayMetrics();
      DrawSurfaceActivity.this.getWindowManager().getDefaultDisplay().getMetrics((DisplayMetrics)localObject1);
      Object localObject2 = new Rect(0, 0, DrawSurfaceActivity.this.boundRect.right - DrawSurfaceActivity.this.boundRect.left, DrawSurfaceActivity.this.boundRect.bottom - DrawSurfaceActivity.this.boundRect.top);
      localObject1 = Bitmap.createBitmap(((Rect)localObject2).right, ((Rect)localObject2).bottom, Bitmap.Config.ARGB_8888);
      ((Bitmap)localObject1).setDensity(160);
      Canvas localCanvas = new Canvas((Bitmap)localObject1);
      Paint localPaint = new Paint();
      localPaint.setColor(-1);
      localPaint.setStyle(Paint.Style.FILL);
      localCanvas.drawRect(0.0F, 0.0F, ((Rect)localObject2).right, ((Rect)localObject2).bottom, localPaint);
      localCanvas.drawRect((Rect)localObject2, DrawSurfaceActivity.this.boundPaintFill);
      localCanvas.translate(-DrawSurfaceActivity.this.boundRect.left, -DrawSurfaceActivity.this.boundRect.top);
      localObject2 = DrawSurfaceActivity.this._graphics.iterator();
      while (((Iterator)localObject2).hasNext()) {
        localCanvas.drawPath((Path)((Iterator)localObject2).next(), DrawSurfaceActivity.this.mPaint);
      }
      return localObject1;
    }
    
    @SuppressLint({"DrawAllocation"})
    public void onDraw(Canvas paramCanvas)
    {
      paramCanvas.drawRect(new Rect(0, 0, getWidth(), getHeight()), DrawSurfaceActivity.this.backPaint);
      if (DrawSurfaceActivity.this.boundRect != null)
      {
        paramCanvas.drawRect(DrawSurfaceActivity.this.boundRect, DrawSurfaceActivity.this.boundPaintFill);
        paramCanvas.drawRect(DrawSurfaceActivity.this.boundRect, DrawSurfaceActivity.this.boundPaintStroke);
      }
      Iterator localIterator = DrawSurfaceActivity.this._graphics.iterator();
      while (localIterator.hasNext()) {
        paramCanvas.drawPath((Path)localIterator.next(), DrawSurfaceActivity.this.mPaint);
      }
    }
    
    public boolean onTouchEvent(MotionEvent paramMotionEvent)
    {
      for (;;)
      {
        synchronized (this._thread.getSurfaceHolder())
        {
          if (paramMotionEvent.getAction() == 0)
          {
            this.path = new Path();
            DrawSurfaceActivity.this._graphics.add(this.path);
            this.path.moveTo(paramMotionEvent.getX(), paramMotionEvent.getY());
            this.path.lineTo(paramMotionEvent.getX(), paramMotionEvent.getY());
            return true;
          }
          if (paramMotionEvent.getAction() == 2) {
            this.path.lineTo(paramMotionEvent.getX(), paramMotionEvent.getY());
          }
        }
        if (paramMotionEvent.getAction() == 1) {
          this.path.lineTo(paramMotionEvent.getX(), paramMotionEvent.getY());
        }
      }
    }
    
    public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3) {}
    
    public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
    {
      this._thread.setRunning(true);
      this._thread.start();
    }
    
    public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
    {
      int i = 1;
      this._thread.setRunning(false);
      for (;;)
      {
        if (i != 0) {}
        try
        {
          this._thread.join();
          i = 0;
        }
        catch (InterruptedException paramSurfaceHolder) {}
        return;
      }
    }
  }
  
  class DrawingThread
    extends Thread
  {
    private DrawSurfaceActivity.DrawingPanel _panel;
    private boolean _run = false;
    private SurfaceHolder _surfaceHolder;
    
    public DrawingThread(SurfaceHolder paramSurfaceHolder, DrawSurfaceActivity.DrawingPanel paramDrawingPanel)
    {
      this._surfaceHolder = paramSurfaceHolder;
      this._panel = paramDrawingPanel;
    }
    
    public SurfaceHolder getSurfaceHolder()
    {
      return this._surfaceHolder;
    }
    
    @SuppressLint({"WrongCall"})
    public void run()
    {
      while (this._run)
      {
        Object localObject3 = null;
        Object localObject1 = null;
        try
        {
          Canvas localCanvas = this._surfaceHolder.lockCanvas();
          SurfaceHolder localSurfaceHolder;
          if (localCanvas != null)
          {
            localObject1 = localCanvas;
            localObject3 = localCanvas;
            localSurfaceHolder = this._surfaceHolder;
            localObject1 = localCanvas;
            localObject3 = localCanvas;
          }
          try
          {
            this._panel.onDraw(localCanvas);
            if (localCanvas != null) {
              this._surfaceHolder.unlockCanvasAndPost(localCanvas);
            }
          }
          finally
          {
            localObject1 = localCanvas;
            localObject3 = localCanvas;
          }
        }
        catch (Exception localException)
        {
          localObject3 = localObject1;
          Log.d("SignatureStamp", "Exception:", localException);
          if (localObject1 != null) {
            this._surfaceHolder.unlockCanvasAndPost(localObject1);
          }
        }
        finally
        {
          if (localObject3 != null) {
            this._surfaceHolder.unlockCanvasAndPost(localObject3);
          }
        }
      }
    }
    
    public void setRunning(boolean paramBoolean)
    {
      this._run = paramBoolean;
    }
  }
}
