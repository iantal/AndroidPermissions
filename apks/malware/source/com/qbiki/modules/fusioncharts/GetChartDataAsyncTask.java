package com.qbiki.modules.fusioncharts;

import android.os.AsyncTask;
import android.util.Base64;
import android.util.Log;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.HTTPUtil.HttpUnauthorizedException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.HashMap;
import nl.siegmann.epublib.util.IOUtil;

class GetChartDataAsyncTask
  extends AsyncTask<Object, Integer, Integer>
{
  private static final boolean DEBUG = false;
  public static final int OTHER_ERROR = 1;
  public static final int SUCCESS = 2;
  private static final String TAG = GetChartDataAsyncTask.class.getSimpleName();
  public static final int UNAUTHORIZED_ERROR = 0;
  private AsyncTaskListener mListener;
  
  GetChartDataAsyncTask() {}
  
  private void copyStreamToFileAndClose(String paramString, InputStream paramInputStream)
    throws IOException
  {
    paramString = new FileOutputStream(paramString);
    IOUtil.copy(paramInputStream, paramString);
    paramString.close();
    paramInputStream.close();
  }
  
  protected Integer doInBackground(Object... paramVarArgs)
  {
    String str1 = (String)paramVarArgs[0];
    String str2 = (String)paramVarArgs[1];
    if (paramVarArgs.length == 4) {}
    for (int i = saveChartDataUseCredentials((String)paramVarArgs[2], (String)paramVarArgs[3], str1, str2);; i = saveChartDataToFileFromURL(str1, str2)) {
      return Integer.valueOf(i);
    }
  }
  
  protected void onPostExecute(Integer paramInteger)
  {
    try
    {
      if (this.mListener != null) {
        this.mListener.asyncTaskFinished(paramInteger);
      }
      return;
    }
    catch (Exception paramInteger)
    {
      Log.e(TAG, "ERROR: " + paramInteger.getLocalizedMessage(), paramInteger);
    }
  }
  
  public int saveChartDataToFileFromURL(String paramString1, String paramString2)
  {
    try
    {
      copyStreamToFileAndClose(paramString1, HTTPUtil.getUrlStream(URLDecoder.decode(paramString2, "UTF-8"), true, true));
      return 2;
    }
    catch (HTTPUtil.HttpUnauthorizedException paramString1)
    {
      return 0;
    }
    catch (IOException paramString1)
    {
      Log.e(TAG, "ERROR: Can't get the file", paramString1);
    }
    return 1;
  }
  
  public int saveChartDataUseCredentials(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    try
    {
      paramString1 = Base64.encodeToString((paramString1 + ":" + paramString2).getBytes(), 2);
      paramString2 = new HashMap();
      paramString2.put("Authorization", "Basic " + paramString1);
      copyStreamToFileAndClose(paramString3, HTTPUtil.getUrlStream(paramString4, 30000, paramString2, true));
      return 2;
    }
    catch (IOException paramString1)
    {
      if (paramString1.getMessage().equals("401 - UNAUTHORIZED")) {
        return 0;
      }
      Log.e(TAG, paramString1.getMessage(), paramString1);
    }
    return 1;
  }
  
  public GetChartDataAsyncTask setListener(AsyncTaskListener paramAsyncTaskListener)
  {
    this.mListener = paramAsyncTaskListener;
    return this;
  }
}
