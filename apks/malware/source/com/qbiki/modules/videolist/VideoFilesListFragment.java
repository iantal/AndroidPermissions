package com.qbiki.modules.videolist;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.res.Resources;
import android.database.DataSetObserver;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.ResultReceiver;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils.SimpleStringSplitter;
import android.text.TextUtils.StringSplitter;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.google.android.bitmapfun.ImageCache.ImageCacheParams;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.ConnectionUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ResourceImageResizer;
import com.qbiki.util.StyleUtil;
import java.io.File;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class VideoFilesListFragment
  extends SCListFragment
{
  static final boolean DEBUG = false;
  public static final String IMAGE_CACHE_DIR = "videolist";
  public static final String PAGE_ID_KEY = "PAGE_ID_KEY";
  static final String TAG = VideoFilesListFragment.class.getSimpleName();
  private String INTERNAL_STORAGE_DIRECTORY;
  private String PAGE_ID;
  private String PAGE_NO_EXTENTION;
  private String RECEIVER_ID;
  private String STORAGE_DIRECTORY;
  private String XML_FILE_PATH;
  private VideoFilesListBaseAdapter mAdapter;
  private ServiceConnection mConnection = new ServiceConnection()
  {
    public void onServiceConnected(ComponentName paramAnonymousComponentName, IBinder paramAnonymousIBinder)
    {
      if (VideoFilesListFragment.this.mDownloadReceiver == null)
      {
        VideoFilesListFragment.access$1302(VideoFilesListFragment.this, new VideoFilesListFragment.DownloadReceiver(VideoFilesListFragment.this, new Handler()));
        VideoFilesListFragment.this.mDownloadReceiver.setID(VideoFilesListFragment.this.RECEIVER_ID);
      }
      VideoFilesListFragment.access$1502(VideoFilesListFragment.this, ((DownloadService.DownloadServiceBinder)paramAnonymousIBinder).getService());
      VideoFilesListFragment.this.mDownloadService.setReceiver(VideoFilesListFragment.this.mDownloadReceiver, VideoFilesListFragment.this.RECEIVER_ID);
    }
    
    public void onServiceDisconnected(ComponentName paramAnonymousComponentName)
    {
      VideoFilesListFragment.access$1502(VideoFilesListFragment.this, null);
      VideoFilesListFragment.access$1302(VideoFilesListFragment.this, null);
    }
  };
  private DownloadReceiver mDownloadReceiver;
  private DownloadService mDownloadService;
  private ArrayList<Integer> mFileIndexes = null;
  private ResourceImageResizer mImageFetcher;
  private List<VideoFile> mMediaFilesList;
  private Resources mResources;
  private int mSelectedCellIndex;
  private Bundle mStyle;
  private ListItemViews mViewGenerator = null;
  
  public VideoFilesListFragment() {}
  
  private long calculateTotalFilesSize(ArrayList<Integer> paramArrayList)
  {
    long l = 0L;
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      Integer localInteger = (Integer)paramArrayList.next();
      l += ((VideoFile)this.mMediaFilesList.get(localInteger.intValue())).getVideoFileSize();
    }
    return l;
  }
  
  private void cancelDownloading(int paramInt)
  {
    if (this.mDownloadService != null) {
      this.mDownloadService.cancelDownload(this.RECEIVER_ID, Integer.valueOf(paramInt));
    }
  }
  
  private void cancelDownloadingAtIndex(Integer paramInteger)
  {
    this.mSelectedCellIndex = paramInteger.intValue();
    paramInteger = (VideoFile)this.mMediaFilesList.get(this.mSelectedCellIndex);
    if (paramInteger.getVideoFileProgress() <= 0) {
      return;
    }
    DialogUtil.showAlertWithPosNeutButtons(getActivity(), this.mResources.getString(2131361916), String.format(this.mResources.getString(2131362201, new Object[] { paramInteger.getVideoFileTitle() }), new Object[0]), null, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(VideoFilesListFragment.this.mSelectedCellIndex);
        if (paramAnonymousDialogInterface.getVideoFileStatus() == VideoFile.Status.LOCAL) {
          return;
        }
        paramAnonymousDialogInterface.setVideoFileStatus(VideoFile.Status.ONLINE);
        paramAnonymousDialogInterface.setVideoFileProgress(0);
        VideoFilesListFragment.this.mAdapter.notifyDataSetChanged();
        VideoFilesListFragment.this.cancelDownloading(VideoFilesListFragment.this.mSelectedCellIndex);
      }
    }, this.mResources.getString(2131361920), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    }, this.mResources.getString(2131361911));
  }
  
  private void deleteFileAtIndex(Integer paramInteger)
  {
    this.mSelectedCellIndex = paramInteger.intValue();
    paramInteger = (VideoFile)this.mMediaFilesList.get(this.mSelectedCellIndex);
    DialogUtil.showAlertWithPosNeutButtons(getActivity(), this.mResources.getString(2131361917), String.format(this.mResources.getString(2131362200, new Object[] { paramInteger.getVideoFileTitle() }), new Object[0]), null, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(VideoFilesListFragment.this.mSelectedCellIndex);
        if (new File(paramAnonymousDialogInterface.getVideoFileDestinationPath()).delete())
        {
          paramAnonymousDialogInterface.setVideoFileStatus(VideoFile.Status.ONLINE);
          VideoFilesListFragment.this.mAdapter.notifyDataSetChanged();
          return;
        }
        Log.e(VideoFilesListFragment.TAG, VideoFilesListFragment.this.getResources().getString(2131362206) + paramAnonymousDialogInterface.getVideoFileDestinationPath());
      }
    }, this.mResources.getString(2131361920), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    }, this.mResources.getString(2131361911));
  }
  
  private boolean existLocal(VideoFile paramVideoFile)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(this.STORAGE_DIRECTORY).append(paramVideoFile.getVideoFileUID()).append('_').append(paramVideoFile.getVideoOriginalFileName());
    return new File(localStringBuilder.toString()).exists();
  }
  
  private String getMimeType(String paramString)
  {
    return URLConnection.guessContentTypeFromName(paramString);
  }
  
  private File getOrCreateStorageDir(String paramString)
  {
    paramString = new File(paramString);
    if (!paramString.exists()) {
      paramString.mkdirs();
    }
    return paramString;
  }
  
  private ProgressBar getProgressBar(int paramInt)
  {
    Object localObject = getListView();
    if (localObject == null) {}
    do
    {
      return null;
      localObject = ((ListView)localObject).getChildAt(paramInt - ((ListView)localObject).getFirstVisiblePosition());
    } while (localObject == null);
    return (ProgressBar)((View)localObject).findViewById(2131100246);
  }
  
  private TextView getProgressTitle(int paramInt)
  {
    Object localObject = getListView();
    if (localObject == null) {}
    do
    {
      return null;
      localObject = ((ListView)localObject).getChildAt(paramInt - ((ListView)localObject).getFirstVisiblePosition());
    } while (localObject == null);
    return (TextView)((View)localObject).findViewById(2131100245);
  }
  
  private void initPage()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mStyle = ((Bundle)localObject).getBundle("PAGE_STYLE");
      StyleUtil.setBackground(getListView(), this.mStyle);
      TextUtils.SimpleStringSplitter localSimpleStringSplitter = new TextUtils.SimpleStringSplitter('.');
      this.PAGE_ID = ((Bundle)localObject).getString("PAGE_ID_KEY");
      localSimpleStringSplitter.setString(this.PAGE_ID);
      localObject = localSimpleStringSplitter.iterator();
      if (((Iterator)localObject).hasNext()) {
        this.PAGE_NO_EXTENTION = ((String)((Iterator)localObject).next());
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(this.PAGE_ID).append(".xml");
      this.XML_FILE_PATH = ((StringBuilder)localObject).toString();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(App.getAppExternalResourcesPath()).append('/').append(this.PAGE_NO_EXTENTION).append('/');
      this.STORAGE_DIRECTORY = ((StringBuilder)localObject).toString();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(Environment.getDataDirectory().getAbsolutePath()).append('/').append(this.PAGE_NO_EXTENTION).append('/');
      this.INTERNAL_STORAGE_DIRECTORY = ((StringBuilder)localObject).toString();
      this.RECEIVER_ID = (App.appId + this.PAGE_NO_EXTENTION);
      initStorageDirectory();
    }
  }
  
  private boolean initStorageDirectory()
  {
    String str = Environment.getExternalStorageState();
    if (str.compareTo("shared") == 0) {
      Toast.makeText(getActivity(), getResources().getString(2131362203), 1).show();
    }
    do
    {
      do
      {
        return false;
        if (str.compareTo("removed") != 0) {
          break;
        }
      } while (!getOrCreateStorageDir(this.INTERNAL_STORAGE_DIRECTORY).exists());
      this.STORAGE_DIRECTORY = this.INTERNAL_STORAGE_DIRECTORY;
      return true;
    } while ((!App.isExternalStorageWritable()) || (!getOrCreateStorageDir(this.STORAGE_DIRECTORY).exists()));
    return true;
  }
  
  private void openFileAtIndex(Integer paramInteger)
  {
    Object localObject = (VideoFile)this.mMediaFilesList.get(paramInteger.intValue());
    this.mAdapter.notifyDataSetChanged();
    paramInteger = new Intent("android.intent.action.VIEW");
    try
    {
      localObject = Uri.fromFile(new File(((VideoFile)localObject).getVideoFileDestinationPath()));
      paramInteger.setDataAndType((Uri)localObject, getMimeType(((Uri)localObject).toString()));
      getActivity().startActivity(paramInteger);
      return;
    }
    catch (Exception paramInteger)
    {
      Log.e(TAG, getResources().getString(2131362205) + paramInteger, paramInteger);
      Toast.makeText(getActivity(), getResources().getString(2131362207) + paramInteger.getMessage(), 0).show();
    }
  }
  
  private void setListAdapter()
  {
    this.mAdapter = new VideoFilesListBaseAdapter();
    setListAdapter(this.mAdapter);
    this.mAdapter.registerDataSetObserver(new DataSetObserver()
    {
      public void onChanged()
      {
        VideoFilesListFragment.this.invalidateOptionsMenu();
        super.onChanged();
      }
    });
    getListView().setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = (VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(paramAnonymousInt);
        switch (VideoFilesListFragment.13.$SwitchMap$com$qbiki$modules$videolist$VideoFile$Status[paramAnonymousAdapterView.getVideoFileStatus().ordinal()])
        {
        default: 
          return;
        case 1: 
          VideoFilesListFragment.this.startFileDownloadOrWarning(paramAnonymousInt);
          return;
        case 2: 
          VideoFilesListFragment.this.cancelDownloadingAtIndex(Integer.valueOf(paramAnonymousInt));
          return;
        }
        VideoFilesListFragment.this.openFileAtIndex(Integer.valueOf(paramAnonymousInt));
      }
    });
    getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = (VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(paramAnonymousInt);
        switch (VideoFilesListFragment.13.$SwitchMap$com$qbiki$modules$videolist$VideoFile$Status[paramAnonymousAdapterView.getVideoFileStatus().ordinal()])
        {
        default: 
          return false;
        }
        VideoFilesListFragment.this.deleteFileAtIndex(Integer.valueOf(paramAnonymousInt));
        return true;
      }
    });
  }
  
  private void startAllFilesDownloadOrWarning()
  {
    if (this.mMediaFilesList == null) {
      return;
    }
    int j = this.mMediaFilesList.size();
    ArrayList localArrayList = new ArrayList(0);
    int i = 0;
    while (i < j)
    {
      if (((VideoFile)this.mMediaFilesList.get(i)).getVideoFileStatus() == VideoFile.Status.ONLINE) {
        localArrayList.add(Integer.valueOf(i));
      }
      i += 1;
    }
    startDownloadOrWarning(localArrayList);
  }
  
  private void startDownloadForIndexes(ArrayList<Integer> paramArrayList)
  {
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext()) {
      startDownloadForItemAtIndex((Integer)paramArrayList.next());
    }
  }
  
  private void startDownloadForItemAtIndex(Integer paramInteger)
  {
    paramInteger = (VideoFile)this.mMediaFilesList.get(paramInteger.intValue());
    paramInteger.setVideoFileStatus(VideoFile.Status.DOWNLOADING);
    paramInteger.setVideoFileProgress(0);
    this.mAdapter.notifyDataSetChanged();
    startService(paramInteger);
  }
  
  private void startDownloadOrWarning(ArrayList<Integer> paramArrayList)
  {
    long l = calculateTotalFilesSize(paramArrayList);
    this.mFileIndexes = paramArrayList;
    if ((ConnectionUtil.isConnected(getActivity(), 0)) && (l >= 52428800L))
    {
      DialogUtil.showAlertWithPosNeutButtons(getActivity(), this.mResources.getString(2131361916), String.format(this.mResources.getString(2131362202), new Object[] { String.format("%.1f", new Object[] { Float.valueOf((float)l / 1024.0F / 1024.0F) }) }), null, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          VideoFilesListFragment.this.startDownloadForIndexes(VideoFilesListFragment.this.mFileIndexes);
        }
      }, this.mResources.getString(2131361920), new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
      }, this.mResources.getString(2131361911));
      return;
    }
    startDownloadForIndexes(this.mFileIndexes);
  }
  
  private void startFileDownloadOrWarning(int paramInt)
  {
    ArrayList localArrayList = new ArrayList(0);
    localArrayList.add(Integer.valueOf(paramInt));
    startDownloadOrWarning(localArrayList);
  }
  
  private void updateProgress(int paramInt1, int paramInt2)
  {
    Object localObject = getProgressBar(paramInt1);
    if (localObject != null)
    {
      ((ProgressBar)localObject).setIndeterminate(false);
      ((ProgressBar)localObject).setProgress(paramInt2);
    }
    localObject = getProgressTitle(paramInt1);
    if (localObject != null) {
      ((TextView)localObject).setText(paramInt2 + "%");
    }
  }
  
  private void updateStatuses(List<VideoFile> paramList)
  {
    if (paramList != null)
    {
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        VideoFile localVideoFile = (VideoFile)paramList.next();
        if (existLocal(localVideoFile)) {
          localVideoFile.setVideoFileStatus(VideoFile.Status.LOCAL);
        }
        localVideoFile.setVideoFileDestinationPath(this.STORAGE_DIRECTORY + localVideoFile.getVideoFileUID() + "_" + localVideoFile.getVideoOriginalFileName());
      }
    }
  }
  
  public void bindService()
  {
    getActivity().bindService(new Intent(getActivity(), DownloadService.class), this.mConnection, 1);
  }
  
  @SuppressLint({"NewApi"})
  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    initPage();
    paramBundle = new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        VideoFilesListFragment.access$002(VideoFilesListFragment.this, (List)paramAnonymousObject);
        VideoFilesListFragment.this.updateStatuses(VideoFilesListFragment.this.mMediaFilesList);
        VideoFilesListFragment.this.setListAdapter();
      }
    };
    if (Build.VERSION.SDK_INT >= 11) {
      new AsyncTaskParseResources().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Object[] { this.XML_FILE_PATH, paramBundle });
    }
    for (;;)
    {
      getListView().setOnScrollListener(new AbsListView.OnScrollListener()
      {
        public void onScroll(AbsListView paramAnonymousAbsListView, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
        
        public void onScrollStateChanged(AbsListView paramAnonymousAbsListView, int paramAnonymousInt)
        {
          if (paramAnonymousInt == 2) {}
          for (boolean bool = true;; bool = false)
          {
            VideoFilesListFragment.this.mImageFetcher.setPauseWork(bool);
            return;
          }
        }
      });
      return;
      new AsyncTaskParseResources().execute(new Object[] { this.XML_FILE_PATH, paramBundle });
    }
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mResources = paramActivity.getResources();
    super.onAttach(paramActivity);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.mImageFetcher = new ResourceImageResizer(getActivity(), 90);
    paramBundle = new ImageCache.ImageCacheParams(getActivity(), "videolist");
    paramBundle.setMemCacheSizePercent(0.25F);
    this.mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), paramBundle);
    this.mViewGenerator = new ListItemViews(getActivity(), this.mImageFetcher);
    this.mMediaFilesList = new ArrayList(0);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558438, paramMenu);
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.mImageFetcher != null) {
      this.mImageFetcher.closeCache();
    }
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    startAllFilesDownloadOrWarning();
    return true;
  }
  
  public void onPause()
  {
    super.onPause();
    unbindService();
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    int k = 0;
    int i;
    int j;
    if (this.mMediaFilesList != null)
    {
      i = 0;
      for (;;)
      {
        j = k;
        if (i < this.mMediaFilesList.size())
        {
          if (((VideoFile)this.mMediaFilesList.get(i)).getVideoFileStatus() == VideoFile.Status.DOWNLOADING) {
            j = 1;
          }
        }
        else
        {
          if (j == 0) {
            break;
          }
          paramMenu.findItem(2131100329).setVisible(false);
          super.onPrepareOptionsMenu(paramMenu);
          return;
        }
        i += 1;
      }
    }
    k = 1;
    if (this.mMediaFilesList != null)
    {
      i = 0;
      for (;;)
      {
        j = k;
        if (i < this.mMediaFilesList.size())
        {
          if (((VideoFile)this.mMediaFilesList.get(i)).getVideoFileStatus() != VideoFile.Status.LOCAL) {
            j = 0;
          }
        }
        else
        {
          if (j == 0) {
            break;
          }
          paramMenu.findItem(2131100329).setVisible(false);
          super.onPrepareOptionsMenu(paramMenu);
          return;
        }
        i += 1;
      }
    }
    super.onPrepareOptionsMenu(paramMenu);
  }
  
  public void onResume()
  {
    super.onPause();
    bindService();
  }
  
  public void startService(VideoFile paramVideoFile)
  {
    try
    {
      Intent localIntent = new Intent(getActivity(), DownloadService.class);
      paramVideoFile.setVideoFileStatus(VideoFile.Status.DOWNLOADING);
      localIntent.putExtra("url", paramVideoFile.getVideoFileURI());
      localIntent.putExtra("destination", paramVideoFile.getVideoFileDestinationPath());
      localIntent.putExtra("pos", paramVideoFile.getVideoFilePos());
      localIntent.putExtra("resid", this.RECEIVER_ID);
      localIntent.putExtra("receiver", this.mDownloadReceiver);
      this.mDownloadService.startService(localIntent);
      return;
    }
    catch (Exception paramVideoFile)
    {
      Toast.makeText(getActivity().getApplicationContext(), paramVideoFile.getMessage(), 0).show();
      Log.e(TAG, "Start service error: " + paramVideoFile, paramVideoFile);
    }
  }
  
  public void unbindService()
  {
    getActivity().unbindService(this.mConnection);
  }
  
  private class DownloadReceiver
    extends ResultReceiver
  {
    private String id;
    
    public DownloadReceiver(Handler paramHandler)
    {
      super();
    }
    
    public String getID()
    {
      return this.id;
    }
    
    protected void onReceiveResult(int paramInt, Bundle paramBundle)
    {
      super.onReceiveResult(paramInt, paramBundle);
      int i;
      if (paramInt == 8344)
      {
        paramInt = paramBundle.getInt("progress");
        i = paramBundle.getInt("pos");
        paramBundle = (VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(i);
        if (paramInt != 100) {
          break label102;
        }
        paramBundle.setVideoFileStatus(VideoFile.Status.LOCAL);
      }
      for (;;)
      {
        if (paramInt != paramBundle.getVideoFileProgress())
        {
          paramBundle.setVideoFileProgress(paramInt);
          VideoFilesListFragment.this.updateProgress(i, paramInt);
          if ((paramInt == 100) || (paramInt < 10)) {
            VideoFilesListFragment.this.mAdapter.notifyDataSetChanged();
          }
        }
        return;
        label102:
        if (paramBundle.getVideoFileStatus() != VideoFile.Status.DOWNLOADING)
        {
          paramBundle.setVideoFileStatus(VideoFile.Status.DOWNLOADING);
          VideoFilesListFragment.this.mAdapter.notifyDataSetChanged();
        }
        else if (paramInt < 0)
        {
          File localFile = new File(paramBundle.getVideoFileDestinationPath());
          if (localFile.exists()) {
            localFile.delete();
          }
          Toast.makeText(VideoFilesListFragment.this.getActivity(), VideoFilesListFragment.this.getResources().getString(2131362204), 0).show();
          paramBundle.setVideoFileStatus(VideoFile.Status.ONLINE);
          VideoFilesListFragment.this.mAdapter.notifyDataSetChanged();
        }
      }
    }
    
    public void setID(String paramString)
    {
      this.id = paramString;
    }
  }
  
  public class VideoFilesListBaseAdapter
    extends BaseAdapter
  {
    VideoFile vf;
    
    public VideoFilesListBaseAdapter() {}
    
    public int getCount()
    {
      if (VideoFilesListFragment.this.mMediaFilesList == null) {
        return 0;
      }
      return VideoFilesListFragment.this.mMediaFilesList.size();
    }
    
    public Object getItem(int paramInt)
    {
      return VideoFilesListFragment.this.mMediaFilesList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public int getItemViewType(int paramInt)
    {
      return ((VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(paramInt)).getVideoFileStatus().ordinal();
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      this.vf = ((VideoFile)VideoFilesListFragment.this.mMediaFilesList.get(paramInt));
      this.vf.setVideoFilePos(paramInt);
      if (this.vf.getVideoFileStatus() == VideoFile.Status.DOWNLOADING)
      {
        paramViewGroup = VideoFilesListFragment.this.mViewGenerator.getDownloadInProgressView(paramView, this.vf);
        ProgressBar localProgressBar = (ProgressBar)paramViewGroup.findViewById(2131100246);
        localProgressBar.setTag(Integer.valueOf(paramInt));
        this.vf.setVideoFileProgress(0);
        TextView localTextView = (TextView)paramViewGroup.findViewById(2131100245);
        paramView = paramViewGroup;
        if (this.vf.getVideoFileProgress() <= 0)
        {
          localProgressBar.setIndeterminate(true);
          localTextView.setText("0%");
        }
      }
      for (paramView = paramViewGroup;; paramView = VideoFilesListFragment.this.mViewGenerator.getFileView(paramView, this.vf))
      {
        StyleUtil.setTextColor((TextView)paramView.findViewById(2131100244), VideoFilesListFragment.this.mStyle);
        StyleUtil.setBackground(paramView, VideoFilesListFragment.this.mStyle);
        return paramView;
      }
    }
    
    public int getViewTypeCount()
    {
      return VideoFile.Status.values().length;
    }
    
    public boolean hasStableIds()
    {
      return true;
    }
  }
}
