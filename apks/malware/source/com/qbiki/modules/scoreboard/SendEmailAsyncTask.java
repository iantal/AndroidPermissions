package com.qbiki.modules.scoreboard;

import android.os.AsyncTask;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import java.io.File;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

class SendEmailAsyncTask
  extends AsyncTask<String, Void, Void>
{
  private static final String TAG = SendEmailAsyncTask.class.getSimpleName();
  boolean DEBUG = false;
  
  SendEmailAsyncTask() {}
  
  private void sendEmailWithScreenshot(String paramString1, String paramString2, String paramString3)
  {
    Object localObject = "http://" + App.serverHostName + "/sendemail.ashx";
    paramString1 = new File(paramString1);
    try
    {
      if (!paramString1.exists()) {
        return;
      }
      if ((paramString3 == null) || (paramString3.length() == 0))
      {
        paramString1.delete();
        return;
      }
    }
    catch (Exception paramString1)
    {
      Log.e(TAG, "ERROR: " + paramString1.getMessage(), paramString1);
      return;
    }
    DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
    localObject = new HttpPost((String)localObject);
    FileBody localFileBody = new FileBody(paramString1);
    MultipartEntity localMultipartEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    if (App.username != null)
    {
      paramString1 = App.username;
      localMultipartEntity.addPart("username", new StringBody(paramString1));
      if (App.appId == null) {
        break label315;
      }
      paramString1 = App.appId;
      label171:
      localMultipartEntity.addPart("appid", new StringBody(paramString1));
      if (paramString2 == null) {
        break label321;
      }
      label190:
      localMultipartEntity.addPart("pageid", new StringBody(paramString2));
      if (App.publisherId == null) {
        break label327;
      }
    }
    label315:
    label321:
    label327:
    for (paramString1 = App.publisherId;; paramString1 = "")
    {
      localMultipartEntity.addPart("publisherid", new StringBody(paramString1));
      if (paramString3 != null) {}
      for (;;)
      {
        localMultipartEntity.addPart("email", new StringBody(paramString3));
        localMultipartEntity.addPart("screenshot", localFileBody);
        ((HttpPost)localObject).setEntity(localMultipartEntity);
        paramString1 = localDefaultHttpClient.execute((HttpUriRequest)localObject).getEntity();
        if ((paramString1 == null) || (!this.DEBUG)) {
          break;
        }
        Log.i("RESPONSE", EntityUtils.toString(paramString1));
        return;
        paramString3 = "";
      }
      return;
      paramString1 = "";
      break;
      paramString1 = "";
      break label171;
      paramString2 = "";
      break label190;
    }
  }
  
  protected Void doInBackground(String... paramVarArgs)
  {
    sendEmailWithScreenshot(paramVarArgs[0], paramVarArgs[1], paramVarArgs[2]);
    return null;
  }
}
