package com.qbiki.modules.scoreboard;

import android.app.AlertDialog.Builder;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.StyleUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class ScoreBoardFragment
  extends SCFragment
{
  static final String PREFS_NAME = "ScoreBoardPrefsFile";
  static String SCREENSHOTS_PATH = "";
  static String STATE_FILE_NAME;
  static String STATE_FILE_PATH;
  static String TAG = ScoreBoardFragment.class.getSimpleName();
  boolean DEBUG = false;
  RoundsListBaseAdapter mAdapter;
  DetailsDialogPicker mDetailsDialog;
  private String mEmail = null;
  String mFighter1 = "Jones";
  TextView mFighter1NameLabel;
  String mFighter2 = "Garcia";
  TextView mFighter2NameLabel;
  LinearLayout mFooter;
  LinearLayout mHeader;
  Button mLoginButtonFB;
  Button mLogoutButtonFB;
  int mMaxRoundCount;
  String mPageid = "pageid";
  Button mPostButtonFB;
  View mRootView;
  TextView mRoundTitle;
  List<HashMap<String, Integer>> mRounds;
  ListView mRoundsList;
  String mScreenShootPath;
  private Bundle mStyle;
  TextView mTotalScores1;
  TextView mTotalScores2;
  TextView mTotalTitle;
  
  static
  {
    STATE_FILE_NAME = "laststate.cfg";
    STATE_FILE_PATH = "";
  }
  
  public ScoreBoardFragment() {}
  
  private void PostViaApps()
  {
    Intent localIntent = new Intent("android.intent.action.SEND");
    localIntent.setType("text/plain");
    localIntent.putExtra("android.intent.extra.TITLE", "Content to share");
    localIntent.addFlags(1);
    localIntent.setType("image/*");
    this.mScreenShootPath = ScreenShotMaker.saveScreenShotToFile(getActivity().getWindow().getCurrentFocus().getRootView(), SCREENSHOTS_PATH, new Date().getTime() + ".jpeg");
    localIntent.putExtra("android.intent.extra.STREAM", Uri.parse("file://" + this.mScreenShootPath));
    startActivity(Intent.createChooser(localIntent, "Share image using"));
    new SendEmailAsyncTask().execute(new String[] { this.mScreenShootPath, this.mPageid, this.mEmail });
  }
  
  private void PostViaFacebook()
  {
    Intent localIntent = new Intent("android.intent.action.SEND");
    localIntent.setType("text/plain");
    localIntent.putExtra("android.intent.extra.TITLE", "");
    localIntent.addFlags(1);
    localIntent.setType("image/*");
    this.mScreenShootPath = ScreenShotMaker.saveScreenShotToFile(getActivity().getWindow().getCurrentFocus().getRootView(), SCREENSHOTS_PATH, new Date().getTime() + ".jpeg");
    localIntent.putExtra("android.intent.extra.STREAM", Uri.parse("file://" + this.mScreenShootPath));
    Object localObject = getActivity().getPackageManager().queryIntentActivities(localIntent, 0).iterator();
    while (((Iterator)localObject).hasNext())
    {
      ResolveInfo localResolveInfo = (ResolveInfo)((Iterator)localObject).next();
      if (localResolveInfo.activityInfo.name.contains("facebook"))
      {
        localObject = localResolveInfo.activityInfo;
        localObject = new ComponentName(((ActivityInfo)localObject).applicationInfo.packageName, ((ActivityInfo)localObject).name);
        localIntent.setFlags(536870912);
        localIntent.setComponent((ComponentName)localObject);
        startActivity(localIntent);
        new SendEmailAsyncTask().execute(new String[] { this.mScreenShootPath, this.mPageid, this.mEmail });
        return;
      }
    }
    Toast.makeText(getActivity().getApplicationContext(), "Please install the facebook app.", 1).show();
  }
  
  private void PostViaTwitter()
  {
    Intent localIntent = new Intent("android.intent.action.SEND");
    localIntent.setType("text/plain");
    localIntent.putExtra("android.intent.extra.SUBJECT", "subject");
    localIntent.putExtra("android.intent.extra.TEXT", "");
    localIntent.setType("image/*");
    this.mScreenShootPath = ScreenShotMaker.saveScreenShotToFile(getActivity().getWindow().getCurrentFocus().getRootView(), SCREENSHOTS_PATH, new Date().getTime() + ".jpeg");
    localIntent.putExtra("android.intent.extra.STREAM", Uri.parse("file://" + this.mScreenShootPath));
    Object localObject = getActivity().getPackageManager().queryIntentActivities(localIntent, 0).iterator();
    while (((Iterator)localObject).hasNext())
    {
      ResolveInfo localResolveInfo = (ResolveInfo)((Iterator)localObject).next();
      if (localResolveInfo.activityInfo.name.contains("com.twitter.android.PostActivity"))
      {
        localObject = localResolveInfo.activityInfo;
        localObject = new ComponentName(((ActivityInfo)localObject).applicationInfo.packageName, ((ActivityInfo)localObject).name);
        localIntent.addCategory("android.intent.category.LAUNCHER");
        localIntent.setFlags(536870912);
        localIntent.setComponent((ComponentName)localObject);
        startActivity(localIntent);
        new SendEmailAsyncTask().execute(new String[] { this.mScreenShootPath, this.mPageid, this.mEmail });
        return;
      }
    }
    Toast.makeText(getActivity().getApplicationContext(), "Please install the twitter app.", 1).show();
  }
  
  private void RestoreLastState()
  {
    Object localObject = getActivity().getSharedPreferences("ScoreBoardPrefsFile", 0);
    this.mFighter1 = ((SharedPreferences)localObject).getString("player1", "Fighter #1");
    this.mFighter2 = ((SharedPreferences)localObject).getString("player2", "Fighter #2");
    this.mFighter1NameLabel.setText(this.mFighter1);
    this.mFighter2NameLabel.setText(this.mFighter2);
    try
    {
      localObject = App.getAppProtectedStoragePath();
      STATE_FILE_PATH = (String)localObject + "/" + this.mPageid + "_" + STATE_FILE_NAME;
      localObject = new ObjectInputStream(new FileInputStream(STATE_FILE_PATH));
      this.mRounds = ((List)((ObjectInputStream)localObject).readObject());
      ((ObjectInputStream)localObject).close();
      this.mMaxRoundCount = this.mRounds.size();
      return;
    }
    catch (Exception localException)
    {
      Log.e(TAG, "Unable to restore the last state: " + localException.getMessage(), localException);
    }
  }
  
  private void SaveCurrentState()
  {
    Object localObject = getActivity().getSharedPreferences("ScoreBoardPrefsFile", 0).edit();
    ((SharedPreferences.Editor)localObject).putString("player1", this.mFighter1);
    ((SharedPreferences.Editor)localObject).putString("player2", this.mFighter2);
    ((SharedPreferences.Editor)localObject).commit();
    try
    {
      localObject = App.getAppProtectedStoragePath();
      STATE_FILE_PATH = (String)localObject + "/" + this.mPageid + "_" + STATE_FILE_NAME;
      localObject = new ObjectOutputStream(new FileOutputStream(new File(STATE_FILE_PATH)));
      ((ObjectOutputStream)localObject).writeObject(this.mRounds);
      ((ObjectOutputStream)localObject).close();
      return;
    }
    catch (Exception localException)
    {
      Log.e(TAG, "Unable to save the current state: " + localException.getMessage(), localException);
    }
  }
  
  private void ShowSharingOptions()
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    localBuilder.setTitle("Pick your choice").setAdapter(new AppsUsedToShareListAdapter(), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        switch (paramAnonymousInt)
        {
        }
        for (;;)
        {
          if (ScoreBoardFragment.this.DEBUG) {
            Toast.makeText(ScoreBoardFragment.this.getActivity().getApplicationContext(), "U clicked " + this.val$items[paramAnonymousInt], 1).show();
          }
          return;
          ScoreBoardFragment.this.PostViaFacebook();
          continue;
          ScoreBoardFragment.this.PostViaTwitter();
          continue;
          ScoreBoardFragment.this.PostViaApps();
        }
      }
    });
    localBuilder.show();
  }
  
  private void cleanScreenshotDir()
  {
    File localFile = new File(SCREENSHOTS_PATH);
    if (localFile.isDirectory())
    {
      String[] arrayOfString = localFile.list();
      int i = 0;
      while (i < arrayOfString.length)
      {
        new File(localFile, arrayOfString[i]).delete();
        i += 1;
      }
    }
  }
  
  private void getDetailsAboutFighters()
  {
    this.mDetailsDialog = new DetailsDialogPicker();
    this.mDetailsDialog.setFighter1Name(this.mFighter1NameLabel.getText().toString());
    this.mDetailsDialog.setFighter2Name(this.mFighter2NameLabel.getText().toString());
    this.mDetailsDialog.setRoundsCount(Integer.valueOf(this.mMaxRoundCount - 1));
    this.mDetailsDialog.setApplyListener(new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = ScoreBoardFragment.this.mDetailsDialog.getFighter1Name();
        String str = ScoreBoardFragment.this.mDetailsDialog.getFighter2Name();
        Integer localInteger = ScoreBoardFragment.this.mDetailsDialog.getRoundsCount();
        if ((localInteger.intValue() != ScoreBoardFragment.this.mMaxRoundCount) || (ScoreBoardFragment.this.mDetailsDialog.ifNeedClearScores()))
        {
          ScoreBoardFragment.this.mMaxRoundCount = localInteger.intValue();
          ScoreBoardFragment.this.initPage();
        }
        ScoreBoardFragment.this.updateFightersNames(paramAnonymousDialogInterface, str);
      }
    });
    this.mDetailsDialog.show(getChildFragmentManager(), "details");
  }
  
  private int getFighter1TotalScores()
  {
    int j = 0;
    int i = 0;
    if (this.mRounds != null)
    {
      Iterator localIterator = this.mRounds.iterator();
      for (;;)
      {
        j = i;
        if (!localIterator.hasNext()) {
          break;
        }
        HashMap localHashMap = (HashMap)localIterator.next();
        if (localHashMap == null) {
          return 0;
        }
        i += ((Integer)localHashMap.get("fighter1Scores")).intValue();
      }
    }
    return j;
  }
  
  private int getFighter2TotalScores()
  {
    int j = 0;
    int i = 0;
    if (this.mRounds != null)
    {
      Iterator localIterator = this.mRounds.iterator();
      for (;;)
      {
        j = i;
        if (!localIterator.hasNext()) {
          break;
        }
        HashMap localHashMap = (HashMap)localIterator.next();
        if (localHashMap == null) {
          return 0;
        }
        i += ((Integer)localHashMap.get("fighter2Scores")).intValue();
      }
    }
    return j;
  }
  
  private void initPage()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mPageid = ((Bundle)localObject).getString("pageid");
      this.mEmail = ((Bundle)localObject).getString("scbemail");
    }
    if (this.mRounds == null) {
      this.mRounds = new ArrayList(0);
    }
    this.mRounds.clear();
    this.mRounds = new ArrayList(this.mMaxRoundCount);
    int i = 0;
    while (i < this.mMaxRoundCount)
    {
      localObject = new HashMap();
      ((HashMap)localObject).put("fighter1Scores", Integer.valueOf(0));
      ((HashMap)localObject).put("fighter2Scores", Integer.valueOf(0));
      this.mRounds.add(localObject);
      i += 1;
    }
    setListAdapter(this.mRootView);
    localObject = App.getAppExternalResourcesPath();
    SCREENSHOTS_PATH = (String)localObject + "/" + this.mPageid + "_/screenshots";
    new File(SCREENSHOTS_PATH).mkdirs();
    cleanScreenshotDir();
  }
  
  private void initPageStyle()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null)
    {
      this.mStyle = localBundle.getBundle("PAGE_STYLE");
      StyleUtil.setBackground(this.mRootView, this.mStyle);
      StyleUtil.setTextColor(this.mFighter1NameLabel, this.mStyle);
      StyleUtil.setTextColor(this.mFighter2NameLabel, this.mStyle);
      StyleUtil.setTextColor(this.mRoundTitle, this.mStyle);
      StyleUtil.setTextColor(this.mTotalScores1, this.mStyle);
      StyleUtil.setTextColor(this.mTotalScores2, this.mStyle);
      StyleUtil.setTextColor(this.mTotalTitle, this.mStyle);
    }
  }
  
  private void setListAdapter(View paramView)
  {
    if (paramView == null) {
      return;
    }
    this.mRoundsList = ((ListView)paramView.findViewById(2131100196));
    this.mAdapter = new RoundsListBaseAdapter();
    this.mRoundsList.setAdapter(this.mAdapter);
  }
  
  private void updateFightersNames(String paramString1, String paramString2)
  {
    if ((this.mFighter1NameLabel != null) && (this.mFighter2NameLabel != null))
    {
      this.mFighter1 = paramString1;
      this.mFighter2 = paramString2;
      this.mFighter1NameLabel.setText(paramString1);
      this.mFighter2NameLabel.setText(paramString2);
    }
  }
  
  public String getEmail()
  {
    return this.mEmail;
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    if (paramConfiguration.orientation == 2)
    {
      if (this.DEBUG) {
        Toast.makeText(getActivity(), "landscape", 0).show();
      }
      paramConfiguration = new LinearLayout.LayoutParams(-1, -1, 1.1F);
      this.mHeader.setLayoutParams(paramConfiguration);
      this.mFooter.setLayoutParams(paramConfiguration);
    }
    while (paramConfiguration.orientation != 1) {
      return;
    }
    if (this.DEBUG) {
      Toast.makeText(getActivity(), "portrait", 0).show();
    }
    paramConfiguration = new LinearLayout.LayoutParams(-1, -1, 2.0F);
    this.mHeader.setLayoutParams(paramConfiguration);
    this.mFooter.setLayoutParams(paramConfiguration);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558433, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mRootView = paramLayoutInflater.inflate(2130903206, paramViewGroup, false);
    this.mTotalScores1 = ((TextView)this.mRootView.findViewById(2131100203));
    this.mTotalScores2 = ((TextView)this.mRootView.findViewById(2131100205));
    this.mTotalTitle = ((TextView)this.mRootView.findViewById(2131100204));
    this.mFighter1NameLabel = ((TextView)this.mRootView.findViewById(2131100206));
    this.mFighter2NameLabel = ((TextView)this.mRootView.findViewById(2131100207));
    this.mRoundTitle = ((TextView)this.mRootView.findViewById(2131100200));
    this.mHeader = ((LinearLayout)this.mRootView.findViewById(2131100195));
    this.mFooter = ((LinearLayout)this.mRootView.findViewById(2131100197));
    if (this.mMaxRoundCount == 0) {
      this.mMaxRoundCount = 10;
    }
    if (this.DEBUG) {
      Log.d(TAG, "View has been created!");
    }
    initPage();
    initPageStyle();
    return this.mRootView;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100322: 
      getDetailsAboutFighters();
      return true;
    }
    ShowSharingOptions();
    return true;
  }
  
  public void onResume()
  {
    super.onResume();
    RestoreLastState();
  }
  
  public void onStop()
  {
    super.onStop();
    SaveCurrentState();
  }
  
  public void setEmail(String paramString)
  {
    this.mEmail = paramString;
  }
  
  public class RoundsListBaseAdapter
    extends BaseAdapter
  {
    public RoundsListBaseAdapter() {}
    
    public boolean areAllItemsEnabled()
    {
      return false;
    }
    
    public int getCount()
    {
      return ScoreBoardFragment.this.mMaxRoundCount;
    }
    
    public Object getItem(int paramInt)
    {
      return ScoreBoardFragment.this.mRounds.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public int getItemViewType(int paramInt)
    {
      return 1;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      paramViewGroup = (HashMap)getItem(paramInt);
      paramView = new RowView(ScoreBoardFragment.this.getActivity(), paramViewGroup, "" + (paramInt + 1), ScoreBoardFragment.this.mStyle).getView(paramView);
      Spinner localSpinner = (Spinner)paramView.findViewById(2131100199);
      ScoreBoardFragment.ScoreSelectedListener localScoreSelectedListener = new ScoreBoardFragment.ScoreSelectedListener(ScoreBoardFragment.this);
      localScoreSelectedListener.key = "fighter1Scores";
      localScoreSelectedListener.pos = paramInt;
      localScoreSelectedListener.spadapter = localSpinner.getAdapter();
      localScoreSelectedListener.round = paramViewGroup;
      localSpinner.setOnItemSelectedListener(localScoreSelectedListener);
      localSpinner = (Spinner)paramView.findViewById(2131100201);
      localScoreSelectedListener = new ScoreBoardFragment.ScoreSelectedListener(ScoreBoardFragment.this);
      localScoreSelectedListener.key = "fighter2Scores";
      localScoreSelectedListener.pos = paramInt;
      localScoreSelectedListener.spadapter = localSpinner.getAdapter();
      localScoreSelectedListener.round = paramViewGroup;
      localSpinner.setOnItemSelectedListener(localScoreSelectedListener);
      return paramView;
    }
    
    public int getViewTypeCount()
    {
      return 1;
    }
    
    public boolean hasStableIds()
    {
      return true;
    }
    
    public boolean isEnabled(int paramInt)
    {
      return false;
    }
  }
  
  public class ScoreSelectedListener
    implements AdapterView.OnItemSelectedListener
  {
    String key;
    int pos;
    HashMap<String, Integer> round;
    SpinnerAdapter spadapter;
    
    public ScoreSelectedListener() {}
    
    public void onItemSelected(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
    {
      paramAdapterView = (String)this.spadapter.getItem(paramInt);
      if (this.round != null) {
        this.round.put(this.key, Integer.valueOf(Integer.parseInt(paramAdapterView)));
      }
      if (ScoreBoardFragment.this.mTotalScores1 != null) {
        ScoreBoardFragment.this.mTotalScores1.setText("" + ScoreBoardFragment.this.getFighter1TotalScores());
      }
      if (ScoreBoardFragment.this.mTotalScores2 != null) {
        ScoreBoardFragment.this.mTotalScores2.setText("" + ScoreBoardFragment.this.getFighter2TotalScores());
      }
    }
    
    public void onNothingSelected(AdapterView<?> paramAdapterView) {}
  }
}
