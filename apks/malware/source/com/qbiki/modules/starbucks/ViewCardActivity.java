package com.qbiki.modules.starbucks;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.RectF;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.JsResult;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.onbarcode.barcode.android.AndroidColor;
import com.onbarcode.barcode.android.PDF417;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DeviceUtil;
import java.util.Date;

public class ViewCardActivity
  extends SCActivity
{
  private static final String TAG = ViewCardActivity.class.getSimpleName();
  private WebView browser;
  private ProgressBar mActivityIndicator;
  private String mCardBalance = null;
  private String mCardNumber = null;
  private String mCardSecurityCode = null;
  private CardStorageManager mCardsManager;
  private Button mRefreshBalanceButton;
  private Button mRemoveCardButton;
  private String mStorePath;
  
  public ViewCardActivity() {}
  
  protected Bitmap GetBarCodeForCardWithNumber(String paramString)
  {
    PDF417 localPDF417 = new PDF417();
    localPDF417.setData(paramString);
    localPDF417.setEcl(0);
    localPDF417.setRowCount(6);
    localPDF417.setColumnCount(3);
    localPDF417.setDataMode(0);
    localPDF417.setTruncated(true);
    localPDF417.setProcessTilde(true);
    localPDF417.setUom(0);
    localPDF417.setX(DeviceUtil.dpToFloatPx(this, 2.5F));
    localPDF417.setXtoYRatio(0.25F);
    float f = DeviceUtil.dpToFloatPx(this, 7.0F);
    localPDF417.setLeftMargin(f);
    localPDF417.setRightMargin(f);
    localPDF417.setTopMargin(f);
    localPDF417.setBottomMargin(f);
    localPDF417.setResolution(getResources().getDisplayMetrics().densityDpi);
    localPDF417.setForeColor(AndroidColor.black);
    localPDF417.setBackColor(AndroidColor.white);
    paramString = Bitmap.createBitmap(DeviceUtil.dpToPx(this, 185.0F), DeviceUtil.dpToPx(this, 74.0F), Bitmap.Config.ARGB_8888);
    Canvas localCanvas = new Canvas(paramString);
    RectF localRectF = new RectF(0.0F, 0.0F, 0.0F, 0.0F);
    try
    {
      localPDF417.drawBarcode(localCanvas, localRectF);
      return paramString;
    }
    catch (Exception paramString)
    {
      Log.e(TAG, "draw " + paramString, paramString);
    }
    return null;
  }
  
  protected void disableRefreshing()
  {
    this.mRefreshBalanceButton.setEnabled(true);
    this.mRefreshBalanceButton.setText(2131362020);
    this.mActivityIndicator.setVisibility(8);
  }
  
  protected void enableRefreshing()
  {
    this.mRefreshBalanceButton.setEnabled(false);
    this.mRefreshBalanceButton.setText(2131362024);
    this.mActivityIndicator.setVisibility(0);
  }
  
  protected void initParameters()
  {
    Bundle localBundle = getIntent().getExtras();
    if (localBundle != null)
    {
      this.mCardNumber = localBundle.getString("card_number");
      this.mCardSecurityCode = localBundle.getString("card_secure_code");
      this.mCardBalance = localBundle.getString("card_balance");
      this.mStorePath = localBundle.getString("storePath");
    }
  }
  
  protected void onCreate(final Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    initParameters();
    setContentView(2130903224);
    this.mCardsManager = new CardStorageManager(this.mStorePath);
    this.mActivityIndicator = ((ProgressBar)findViewById(2131100230));
    this.mRefreshBalanceButton = ((Button)findViewById(2131100229));
    this.mRemoveCardButton = ((Button)findViewById(2131100231));
    paramBundle = (ImageView)findViewById(2131100224);
    final TextView localTextView = (TextView)findViewById(2131100220);
    paramBundle.setDrawingCacheEnabled(true);
    paramBundle.setImageBitmap(GetBarCodeForCardWithNumber(this.mCardNumber));
    localTextView.setText(this.mCardNumber.replaceAll("(.{4})", "$1 "));
    paramBundle = (Button)findViewById(2131100226);
    localTextView = (TextView)findViewById(2131100227);
    paramBundle.setText(this.mCardBalance);
    this.browser = new WebView(this);
    this.browser.getSettings().setJavaScriptEnabled(true);
    this.browser.addJavascriptInterface(new Object()
    {
      public void showHTML(final String paramAnonymousString)
      {
        this.this$0.runOnUiThread(new Runnable()
        {
          public void run()
          {
            ViewCardActivity.access$002(ViewCardActivity.1MyJavaScriptInterface.this.this$0, paramAnonymousString);
            ViewCardActivity.1MyJavaScriptInterface.this.val$bButton.setText(ViewCardActivity.1MyJavaScriptInterface.this.this$0.mCardBalance);
            Date localDate = new Date();
            ViewCardActivity.1MyJavaScriptInterface.this.val$cdate.setText(localDate.toLocaleString());
            ViewCardActivity.1MyJavaScriptInterface.this.this$0.mCardsManager.saveCard(ViewCardActivity.1MyJavaScriptInterface.this.this$0.mCardNumber, ViewCardActivity.1MyJavaScriptInterface.this.this$0.mCardSecurityCode, ViewCardActivity.1MyJavaScriptInterface.this.this$0.mCardBalance);
            ViewCardActivity.1MyJavaScriptInterface.this.this$0.disableRefreshing();
          }
        });
      }
    }, "HTMLOUT");
    this.browser.setWebChromeClient(new WebChromeClient()
    {
      public boolean onJsAlert(WebView paramAnonymousWebView, String paramAnonymousString1, String paramAnonymousString2, final JsResult paramAnonymousJsResult)
      {
        new AlertDialog.Builder(jdField_this).setTitle("javaScript dialog").setMessage(paramAnonymousString2).setPositiveButton(17039370, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymousJsResult.confirm();
          }
        }).setCancelable(false).create().show();
        return true;
      }
    });
    this.browser.setWebViewClient(new WebViewClient()
    {
      boolean fetchedBalance = false;
      
      public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        if (!this.fetchedBalance)
        {
          ViewCardActivity.this.browser.loadUrl("javascript:(function() { document.getElementById('Card_Number').value='" + ViewCardActivity.this.mCardNumber + "'; " + "document.getElementById('Card_Pin').value='" + ViewCardActivity.this.mCardSecurityCode + "'; " + "document.forms['CheckBalance'].submit(); " + "})()");
          this.fetchedBalance = true;
          return;
        }
        ViewCardActivity.this.browser.loadUrl("javascript:window.HTMLOUT.showHTML(document.getElementById('fetch_balance').getElementsByTagName('span')[0].innerHTML);");
        this.fetchedBalance = false;
      }
    });
    this.mRefreshBalanceButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        ViewCardActivity.this.enableRefreshing();
        ViewCardActivity.this.browser.loadUrl("https://www.starbucks.com/card");
      }
    });
    this.mRemoveCardButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = new AlertDialog.Builder(ViewCardActivity.this);
        paramAnonymousView.setMessage(2131362025).setTitle("Delete card").setIcon(17301543).setCancelable(true).setPositiveButton(17039370, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            ViewCardActivity.this.mCardsManager.removeCard(ViewCardActivity.this.mCardNumber);
            ViewCardActivity.this.disableRefreshing();
            ViewCardActivity.this.browser.stopLoading();
            ViewCardActivity.this.finish();
          }
        }).setNegativeButton(17039360, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymous2DialogInterface.cancel();
          }
        });
        paramAnonymousView.show();
      }
    });
    enableRefreshing();
    this.browser.loadUrl("https://www.starbucks.com/card");
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    this.browser.stopLoading();
  }
}
