package com.qbiki.modules.slideshow;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Gallery;
import android.widget.Gallery.LayoutParams;
import android.widget.ImageView;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.seattleclouds.mosaic.ImgMetadata;
import com.qbiki.util.ImageCache;
import com.qbiki.util.ImageUtil;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;

public class SlideShowFragment
  extends SCFragment
{
  public static final String FGALLERY_IMAGES_IDENTIFIER = "FGALLERY_IMAGES_IDENTIFIER";
  private int concurrent = 0;
  private int currentIndex = -1;
  private View fView = null;
  private ImageView fullImage = null;
  private DownloadImageTask fullImageLoader = null;
  private Gallery gallery = null;
  private ImageCache imageCache = new ImageCache();
  private ArrayList<ImgMetadata> images = new ArrayList();
  final ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener()
  {
    public void onGlobalLayout()
    {
      SlideShowFragment.access$202(SlideShowFragment.this, SlideShowFragment.this.fullImage.getWidth());
      SlideShowFragment.access$402(SlideShowFragment.this, SlideShowFragment.this.fullImage.getHeight());
      SlideShowFragment.access$502(SlideShowFragment.this, SlideShowFragment.this.gallery.getHeight());
      SlideShowFragment.access$702(SlideShowFragment.this, (int)(SlideShowFragment.this.thumbHeight / 1.5D));
      SlideShowFragment.this.gallery.setAdapter(new SlideShowFragment.ImageAdapter(SlideShowFragment.this, SlideShowFragment.this.getActivity()));
      SlideShowFragment.this.showFullImageAt(0);
      SlideShowFragment.this.fullImage.getViewTreeObserver().removeGlobalOnLayoutListener(SlideShowFragment.this.layoutListener);
    }
  };
  private ArrayList<DownloadImageTask> que = new ArrayList();
  private int thumbHeight = 100;
  private int thumbWidth = 100;
  private int viewHeight = 100;
  private int viewWidth = 100;
  
  public SlideShowFragment() {}
  
  private void addToQue(DownloadImageTask paramDownloadImageTask)
  {
    synchronized (this.que)
    {
      this.que.add(paramDownloadImageTask);
      if (this.concurrent == 0) {
        executeNextQue();
      }
      return;
    }
  }
  
  private void executeNextQue()
  {
    synchronized (this.que)
    {
      if (this.que.size() > 0)
      {
        DownloadImageTask localDownloadImageTask = (DownloadImageTask)this.que.get(0);
        localDownloadImageTask.execute(new String[] { localDownloadImageTask.url });
        this.concurrent += 1;
      }
      return;
    }
  }
  
  private Bitmap loadImageFromNetwork(String paramString, boolean paramBoolean)
  {
    Object localObject2 = null;
    Bitmap localBitmap2 = null;
    Object localObject1 = localBitmap2;
    if (0 == 0)
    {
      if (!paramString.startsWith("http://")) {
        break label124;
      }
      localObject1 = localObject2;
    }
    for (;;)
    {
      try
      {
        Log.d("Background", paramString);
        localObject1 = localObject2;
        localBitmap2 = BitmapFactory.decodeStream((InputStream)new URL(paramString).getContent());
        if (!paramBoolean) {
          continue;
        }
        localObject1 = localBitmap2;
        localBitmap2 = Bitmap.createScaledBitmap(localBitmap2, this.thumbWidth, this.thumbHeight, true);
        localObject1 = localBitmap2;
      }
      catch (Exception localException2)
      {
        label124:
        continue;
      }
      if ((localObject1 != null) && (paramBoolean)) {
        this.imageCache.put(paramString, (Bitmap)localObject1);
      }
      return localObject1;
      localObject1 = localBitmap2;
      localBitmap2 = Bitmap.createScaledBitmap(localBitmap2, this.viewWidth, this.viewHeight, true);
      localObject1 = localBitmap2;
      continue;
      if (paramBoolean) {}
      try
      {
        localObject1 = ImageUtil.getScaledBitmapResource(paramString, this.thumbWidth, this.thumbHeight, true);
      }
      catch (Exception localException1)
      {
        Bitmap localBitmap1 = localBitmap2;
      }
      localObject1 = ImageUtil.getScaledBitmapResource(paramString, this.viewWidth, this.viewHeight, true);
    }
  }
  
  private void removeAllFromQue()
  {
    ArrayList localArrayList = this.que;
    int i = 0;
    try
    {
      while (i < this.que.size())
      {
        ((DownloadImageTask)this.que.get(0)).cancel(true);
        i += 1;
      }
      this.que.clear();
      return;
    }
    finally {}
  }
  
  private void removeFromQue(DownloadImageTask paramDownloadImageTask)
  {
    synchronized (this.que)
    {
      this.que.remove(paramDownloadImageTask);
      this.concurrent -= 1;
      return;
    }
  }
  
  private void showFullImageAt(int paramInt)
  {
    if (this.currentIndex == paramInt) {}
    do
    {
      return;
      this.currentIndex = paramInt;
    } while (paramInt >= this.images.size());
    String str = ((ImgMetadata)this.images.get(paramInt)).filename;
    if (this.fullImageLoader != null) {
      this.fullImageLoader.cancel(true);
    }
    this.fullImageLoader = new DownloadImageTask(null);
    this.fullImageLoader.position = 0;
    this.fullImageLoader.setImageView(this.fullImage);
    this.fullImageLoader.url = str;
    this.fullImageLoader.isThumb = false;
    this.fullImageLoader.execute(new String[] { str });
  }
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      localObject = ((Bundle)localObject).getParcelableArrayList("FGALLERY_IMAGES_IDENTIFIER");
      if (localObject != null) {
        this.images = ((ArrayList)localObject);
      }
    }
    this.gallery = ((Gallery)this.fView.findViewById(2131100218));
    this.gallery.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        SlideShowFragment.this.showFullImageAt(paramAnonymousInt);
      }
    });
    this.fullImage = ((ImageView)this.fView.findViewById(2131100217));
    this.fullImage.setTag(Integer.valueOf(0));
    this.fullImage.getViewTreeObserver().addOnGlobalLayoutListener(this.layoutListener);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903222, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public void onPause()
  {
    super.onPause();
    ImageAdapter localImageAdapter = (ImageAdapter)this.gallery.getAdapter();
    if (localImageAdapter != null) {
      localImageAdapter.removeAll();
    }
    this.gallery.setAdapter(null);
    this.imageCache.clear();
    removeAllFromQue();
  }
  
  static class CellHolder
  {
    ImageView image;
    
    CellHolder() {}
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    private ImageView imageView;
    public boolean isThumb = true;
    public int position = -1;
    public String url = "";
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return SlideShowFragment.this.loadImageFromNetwork(paramVarArgs[0], this.isThumb);
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      if ((this.imageView != null) && (this.imageView.getTag() != null) && (this.position == ((Integer)this.imageView.getTag()).intValue())) {
        this.imageView.setImageBitmap(paramBitmap);
      }
      if (this.isThumb)
      {
        SlideShowFragment.this.removeFromQue(this);
        SlideShowFragment.this.executeNextQue();
      }
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
  
  public class ImageAdapter
    extends BaseAdapter
  {
    private Context mContext;
    
    public ImageAdapter(Context paramContext)
    {
      this.mContext = paramContext;
    }
    
    public int getCount()
    {
      return SlideShowFragment.this.images.size();
    }
    
    public Object getItem(int paramInt)
    {
      return Integer.valueOf(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null)
      {
        paramViewGroup = new ImageView(this.mContext);
        paramViewGroup.setLayoutParams(new Gallery.LayoutParams(SlideShowFragment.this.thumbWidth, SlideShowFragment.this.thumbHeight));
        paramView = new SlideShowFragment.CellHolder();
        paramView.image = paramViewGroup;
        paramViewGroup.setTag(paramView);
        paramView.image.setImageBitmap(null);
        paramView.image.setTag(Integer.valueOf(paramInt));
        paramViewGroup = ((ImgMetadata)SlideShowFragment.this.images.get(paramInt)).filename;
        if (SlideShowFragment.this.imageCache.get(paramViewGroup) == null) {
          break label144;
        }
        paramView.image.setImageBitmap(SlideShowFragment.this.imageCache.get(paramViewGroup));
      }
      for (;;)
      {
        return paramView.image;
        paramView = (SlideShowFragment.CellHolder)paramView.getTag();
        break;
        label144:
        SlideShowFragment.DownloadImageTask localDownloadImageTask = new SlideShowFragment.DownloadImageTask(SlideShowFragment.this, null);
        localDownloadImageTask.position = paramInt;
        localDownloadImageTask.setImageView(paramView.image);
        localDownloadImageTask.url = paramViewGroup;
        SlideShowFragment.this.addToQue(localDownloadImageTask);
      }
    }
    
    public void removeAll()
    {
      SlideShowFragment.this.images.clear();
      notifyDataSetChanged();
    }
  }
}
