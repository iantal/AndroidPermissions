package com.qbiki.modules.coupon;

import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.FragmentActivity;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.qbiki.feedback.LocationModel;
import com.qbiki.location.MarkerMapFragment;
import com.qbiki.location.SimpleLocationManager;
import com.qbiki.location.SimpleLocationManager.BestLocationEstimateListenerAdapter;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.WebViewUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class CouponFragment
  extends SCFragment
{
  private static final String COUPON_PREF_NAME = "Coupon";
  private static final String TAG = "CouponFragment";
  private String barCodeData = "";
  private String barCodeDataScaned;
  private boolean canBeScanAgain;
  private Integer countOfScans;
  private Integer countOfScansDid;
  private Date endDate;
  private String[] gpsData = null;
  private Integer hoursNextScan;
  private Location mCurrentLocation = new Location("code");
  private SimpleLocationManager mLocationManager;
  private View mView = null;
  private WebView mWebView;
  private boolean mapIsOpened = false;
  private boolean menuCheckInIsEnabled = true;
  private boolean menuScanIsEnabled = true;
  private double minDistance;
  private String nearLocation;
  private String pageId;
  private String redeemImgPath = "";
  private String resultImgPath;
  private String saveKeyId = "";
  private Date startDate;
  
  public CouponFragment() {}
  
  private void appearStampRedeem()
  {
    ImageView localImageView = (ImageView)this.mView.findViewById(2131099825);
    localImageView.setVisibility(0);
    localImageView.bringToFront();
    Animation localAnimation = AnimationUtils.loadAnimation(getActivity(), 2130968576);
    localImageView.setAnimation(localAnimation);
    localAnimation.start();
  }
  
  private void changeStatusScan()
  {
    Object localObject = String.format(Locale.US, "javascript:var x=document.getElementById('couponcountscan'); if(x) x.innerHTML = \"%d/%d\";", new Object[] { this.countOfScansDid, this.countOfScans });
    this.mWebView.loadUrl((String)localObject);
    localObject = getActivity().getSharedPreferences("Coupon", 0);
    if (this.countOfScansDid.intValue() >= this.countOfScans.intValue())
    {
      this.mWebView.setVisibility(4);
      ((LinearLayout)this.mView.findViewById(2131099827)).setVisibility(0);
      this.menuScanIsEnabled = false;
    }
    for (this.menuCheckInIsEnabled = false;; this.menuCheckInIsEnabled = true)
    {
      if ((((SharedPreferences)localObject).contains(this.saveKeyId + "canBeScanAgain")) && (!((SharedPreferences)localObject).getBoolean(this.saveKeyId + "canBeScanAgain", false)))
      {
        localObject = String.format(Locale.US, "javascript:var x=document.getElementById('couponcountscan'); if(x) x.innerHTML = \"%d/%d\";", new Object[] { this.countOfScans, this.countOfScans });
        this.mWebView.loadUrl((String)localObject);
        this.menuScanIsEnabled = false;
        this.menuCheckInIsEnabled = false;
        appearStampRedeem();
      }
      getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          CouponFragment.this.invalidateOptionsMenu();
        }
      });
      return;
      this.menuScanIsEnabled = true;
    }
  }
  
  private void checkGPSDataWithLatLong(double paramDouble1, double paramDouble2)
  {
    this.minDistance = Double.MAX_VALUE;
    if (validateNewLocationLatitudeAndLongitude(paramDouble1, paramDouble2))
    {
      if (this.mLocationManager != null)
      {
        this.mLocationManager.stopUpdatingLocation();
        this.mLocationManager = null;
      }
      if ((this.barCodeData != null) && (!this.barCodeData.equalsIgnoreCase("")))
      {
        DialogUtil.showAlert(getActivity(), 2131361917, getResources().getString(2131362136) + " " + getResources().getString(2131362137));
        this.menuCheckInIsEnabled = false;
        this.menuScanIsEnabled = true;
        getActivity().runOnUiThread(new Runnable()
        {
          public void run()
          {
            CouponFragment.this.invalidateOptionsMenu();
          }
        });
      }
    }
    while (this.mapIsOpened)
    {
      return;
      localObject1 = this.countOfScansDid;
      this.countOfScansDid = Integer.valueOf(this.countOfScansDid.intValue() + 1);
      localObject1 = getActivity().getSharedPreferences("Coupon", 0).edit();
      ((SharedPreferences.Editor)localObject1).putInt(this.saveKeyId, this.countOfScansDid.intValue());
      ((SharedPreferences.Editor)localObject1).putLong(this.saveKeyId + "date", new Date().getTime());
      ((SharedPreferences.Editor)localObject1).commit();
      if (this.countOfScansDid.intValue() >= this.countOfScans.intValue()) {
        DialogUtil.showAlert(getActivity(), 2131361917, 2131362129);
      }
      for (;;)
      {
        changeStatusScan();
        return;
        DialogUtil.showAlert(getActivity(), 2131361917, 2131362136);
      }
    }
    Object localObject1 = new ArrayList();
    Object localObject2 = "external://http://maps.google.com/maps?saddr=" + this.mCurrentLocation.getLatitude() + "," + this.mCurrentLocation.getLongitude() + "&daddr=" + Double.parseDouble(this.nearLocation.split(",")[0]) + "," + Double.parseDouble(this.nearLocation.split(",")[1]);
    ((ArrayList)localObject1).add(new LocationModel("Get Directions", Double.parseDouble(this.nearLocation.split(",")[0]), Double.parseDouble(this.nearLocation.split(",")[1]), (String)localObject2, null, null, null));
    int i = 0;
    while (i < this.gpsData.length)
    {
      if (!this.gpsData[i].equalsIgnoreCase(this.nearLocation))
      {
        localObject2 = this.gpsData[i];
        String str = "external://http://maps.google.com/maps?saddr=" + this.mCurrentLocation.getLatitude() + "," + this.mCurrentLocation.getLongitude() + "&daddr=" + Double.parseDouble(localObject2.split(",")[0]) + "," + Double.parseDouble(localObject2.split(",")[1]);
        ((ArrayList)localObject1).add(new LocationModel("Get Directions", Double.parseDouble(localObject2.split(",")[0]), Double.parseDouble(localObject2.split(",")[1]), str, null, null, null));
      }
      i += 1;
    }
    if (this.mLocationManager != null) {
      this.mLocationManager.stopUpdatingLocation();
    }
    this.mapIsOpened = true;
    localObject2 = new Bundle();
    ((Bundle)localObject2).putParcelableArrayList("locationsList", (ArrayList)localObject1);
    App.showPage(new FragmentInfo(MarkerMapFragment.class.getName(), (Bundle)localObject2), this);
  }
  
  private void checkInButtonTapped()
  {
    this.mapIsOpened = false;
    if (!this.menuCheckInIsEnabled) {
      return;
    }
    long l = getActivity().getSharedPreferences("Coupon", 0).getLong(this.saveKeyId + "date", 0L);
    Object localObject = new Date();
    Date localDate = new Date();
    if (l != 0L) {
      localObject = new Date(l);
    }
    int i = (int)((localDate.getTime() - ((Date)localObject).getTime()) / 3600000L % 24L);
    localObject = (String)DateFormat.format("yyyy/MM/dd hh:mm:ss", this.endDate);
    String str = (String)DateFormat.format("yyyy/MM/dd hh:mm:ss", this.startDate);
    if (localDate.getTime() > this.endDate.getTime())
    {
      DialogUtil.showAlert(getActivity(), 2131361917, getResources().getString(2131362130) + " " + (String)localObject);
      return;
    }
    if (localDate.getTime() < this.startDate.getTime())
    {
      DialogUtil.showAlert(getActivity(), 2131361917, getResources().getString(2131362131) + " " + str + " - " + (String)localObject);
      return;
    }
    if ((i >= this.hoursNextScan.intValue()) || (l == 0L))
    {
      getCurrentLocation();
      return;
    }
    DialogUtil.showAlert(getActivity(), 2131361917, String.format(getResources().getString(2131362124), new Object[] { Integer.valueOf(this.hoursNextScan.intValue() - i) }));
  }
  
  private void checkQRCode()
  {
    int i = 0;
    if (this.barCodeData.equalsIgnoreCase(this.barCodeDataScaned)) {
      i = 1;
    }
    if (i != 0)
    {
      this.barCodeDataScaned = "";
      Object localObject = this.countOfScansDid;
      this.countOfScansDid = Integer.valueOf(this.countOfScansDid.intValue() + 1);
      localObject = getActivity().getSharedPreferences("Coupon", 0).edit();
      ((SharedPreferences.Editor)localObject).putInt(this.saveKeyId, this.countOfScansDid.intValue());
      ((SharedPreferences.Editor)localObject).putLong(this.saveKeyId + "date", new Date().getTime());
      ((SharedPreferences.Editor)localObject).commit();
      if (this.countOfScansDid.intValue() >= this.countOfScans.intValue()) {
        DialogUtil.showAlert(getActivity(), 2131361917, 2131362129);
      }
    }
    for (;;)
    {
      changeStatusScan();
      return;
      DialogUtil.showAlert(getActivity(), 2131361917, 2131362126);
      continue;
      DialogUtil.showAlert(getActivity(), 2131361917, 2131362127);
    }
  }
  
  private void getCurrentLocation()
  {
    if (this.mLocationManager != null)
    {
      this.mLocationManager.startUpdatingLocation();
      return;
    }
    this.mLocationManager = new SimpleLocationManager(getActivity(), new SimpleLocationManager.BestLocationEstimateListenerAdapter(false)
    {
      public void onBestLocationEstimateChanged(Location paramAnonymousLocation)
      {
        super.onBestLocationEstimateChanged(paramAnonymousLocation);
        CouponFragment.access$1002(CouponFragment.this, paramAnonymousLocation);
        CouponFragment.this.checkGPSDataWithLatLong(paramAnonymousLocation.getLatitude(), paramAnonymousLocation.getLongitude());
      }
    });
    this.mLocationManager.setMinTime(2000L);
    this.mLocationManager.startUpdatingLocation();
  }
  
  private double getDistanceBetweenGeoPoints(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (double d1 = 3959.0D;; d1 = 6371.0D)
    {
      double d2 = (paramDouble3 - paramDouble1) * 3.141592653589793D / 180.0D;
      paramDouble2 = (paramDouble4 - paramDouble2) * 3.141592653589793D / 180.0D;
      paramDouble1 = Math.sin(d2 / 2.0D) * Math.sin(d2 / 2.0D) + Math.cos(3.141592653589793D * paramDouble1 / 180.0D) * Math.cos(3.141592653589793D * paramDouble3 / 180.0D) * Math.sin(paramDouble2 / 2.0D) * Math.sin(paramDouble2 / 2.0D);
      return d1 * (2.0D * Math.atan2(Math.sqrt(paramDouble1), Math.sqrt(1.0D - paramDouble1)));
    }
  }
  
  private Date parseDateParam(String paramString, boolean paramBoolean)
  {
    Calendar localCalendar = Calendar.getInstance();
    if (paramString.length() >= 8)
    {
      String str7 = paramString.substring(0, 4);
      String str8 = paramString.substring(4, 6);
      String str9 = paramString.substring(6, 8);
      String str4 = "00";
      String str5 = "00";
      String str6 = "00";
      String str3 = str4;
      String str2 = str5;
      String str1 = str6;
      if (paramString.contains("T"))
      {
        str3 = str4;
        str2 = str5;
        str1 = str6;
        if (paramString.length() == 15)
        {
          str3 = paramString.substring(9, 11);
          str2 = paramString.substring(11, 13);
          str1 = paramString.substring(13, 15);
        }
      }
      localCalendar.set(Integer.parseInt(str7), Integer.parseInt(str8) - 1, Integer.parseInt(str9), Integer.parseInt(str3), Integer.parseInt(str2), Integer.parseInt(str1));
      return localCalendar.getTime();
    }
    paramString = Calendar.getInstance();
    paramString.setTime(new Date());
    if (paramBoolean) {
      paramString.add(1, 30);
    }
    for (;;)
    {
      return paramString.getTime();
      paramString.add(1, -30);
    }
  }
  
  private void scanButtonTapped()
  {
    if (!this.menuScanIsEnabled) {}
    while (getActivity() == null) {
      return;
    }
    if ((!getActivity().getPackageManager().hasSystemFeature("android.hardware.camera")) || (!"mounted".equals(Environment.getExternalStorageState())))
    {
      DialogUtil.showAlert(getActivity(), 2131361917, "Cannot access camera.");
      return;
    }
    long l = getActivity().getSharedPreferences("Coupon", 0).getLong(this.saveKeyId + "date", 0L);
    Object localObject = new Date();
    Date localDate = new Date();
    if (l != 0L) {
      localObject = new Date(l);
    }
    int i = (int)((localDate.getTime() - ((Date)localObject).getTime()) / 3600000L % 24L);
    localObject = (String)DateFormat.format("yyyy/MM/dd hh:mm:ss", this.endDate);
    String str = (String)DateFormat.format("yyyy/MM/dd hh:mm:ss", this.startDate);
    if (localDate.getTime() > this.endDate.getTime())
    {
      DialogUtil.showAlert(getActivity(), 2131361917, getResources().getString(2131362130) + " " + (String)localObject);
      return;
    }
    if (localDate.getTime() < this.startDate.getTime())
    {
      DialogUtil.showAlert(getActivity(), 2131361917, getResources().getString(2131362131) + " " + str + " - " + (String)localObject);
      return;
    }
    if ((i >= this.hoursNextScan.intValue()) || (l == 0L))
    {
      localObject = new Intent("com.google.zxing.client.android.SCAN");
      ((Intent)localObject).putExtra("NEED_BARCODE_CROP", true);
      ((Intent)localObject).putExtra("SCAN_MODE", "QR_CODE_MODE");
      startActivityForResult((Intent)localObject, 49374);
      return;
    }
    DialogUtil.showAlert(getActivity(), 2131361917, String.format(getResources().getString(2131362125), new Object[] { Integer.valueOf(this.hoursNextScan.intValue() - i) }));
  }
  
  private void setupWebView()
  {
    this.mWebView = ((WebView)this.mView.findViewById(2131099826));
    WebViewUtil.setDefaultSettings(this.mWebView);
    this.mWebView.setWebViewClient(new WebViewClient()
    {
      public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        CouponFragment.this.changeStatusScan();
      }
    });
  }
  
  private boolean validateNewLocationLatitudeAndLongitude(double paramDouble1, double paramDouble2)
  {
    int i = 0;
    if (i < this.gpsData.length)
    {
      String[] arrayOfString = this.gpsData[i].split(",");
      if (arrayOfString.length != 2) {}
      double d;
      do
      {
        i += 1;
        break;
        d = getDistanceBetweenGeoPoints(paramDouble1, paramDouble2, Double.parseDouble(arrayOfString[0]), Double.parseDouble(arrayOfString[1]), true);
        if (d < this.minDistance)
        {
          this.minDistance = d;
          this.nearLocation = this.gpsData[i];
        }
      } while (d > 0.0170454545D);
      return true;
    }
    return false;
  }
  
  protected void init()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      this.pageId = localBundle.getString("pageid");
    }
    initCoupon(this.pageId);
    setupWebView();
    this.mWebView.loadUrl(App.getResourceUrl(this.pageId));
    ((Button)this.mView.findViewById(2131099829)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = new AlertDialog.Builder(CouponFragment.this.getActivity());
        paramAnonymousView.setTitle(CouponFragment.this.getResources().getString(2131361917));
        paramAnonymousView.setMessage(CouponFragment.this.getResources().getString(2131362138));
        paramAnonymousView.setPositiveButton(17039379, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            CouponFragment.access$002(CouponFragment.this, Integer.valueOf(0));
            paramAnonymous2DialogInterface = CouponFragment.this.getActivity().getSharedPreferences("Coupon", 0).edit();
            paramAnonymous2DialogInterface.putInt(CouponFragment.this.saveKeyId, CouponFragment.this.countOfScansDid.intValue());
            paramAnonymous2DialogInterface.putLong(CouponFragment.this.saveKeyId + "date", new Date().getTime());
            if (!CouponFragment.this.canBeScanAgain) {
              paramAnonymous2DialogInterface.putBoolean(CouponFragment.this.saveKeyId + "canBeScanAgain", CouponFragment.this.canBeScanAgain);
            }
            paramAnonymous2DialogInterface.commit();
            paramAnonymous2DialogInterface = String.format(Locale.US, "javascript:var x=document.getElementById('couponcountscan'); if(x) x.innerHTML = \"%d/%d\";", new Object[] { CouponFragment.this.countOfScansDid, CouponFragment.this.countOfScans });
            CouponFragment.this.mWebView.loadUrl(paramAnonymous2DialogInterface);
            CouponFragment.this.mWebView.setVisibility(0);
            ((LinearLayout)CouponFragment.this.mView.findViewById(2131099827)).setVisibility(4);
            if (CouponFragment.this.canBeScanAgain)
            {
              CouponFragment.access$602(CouponFragment.this, true);
              CouponFragment.access$702(CouponFragment.this, true);
            }
            if (!CouponFragment.this.canBeScanAgain)
            {
              String.format(Locale.US, "javascript:var x=document.getElementById('couponcountscan'); if(x) x.innerHTML = \"%d/%d\";", new Object[] { CouponFragment.this.countOfScans, CouponFragment.this.countOfScans });
              CouponFragment.this.appearStampRedeem();
            }
            CouponFragment.this.getActivity().runOnUiThread(new Runnable()
            {
              public void run()
              {
                CouponFragment.this.invalidateOptionsMenu();
              }
            });
          }
        });
        paramAnonymousView.setNegativeButton(17039369, null);
        paramAnonymousView.show();
      }
    });
  }
  
  public void initCoupon(String paramString)
  {
    this.saveKeyId = ("couponcount" + App.username + App.appId + paramString);
    Object localObject4 = DocumentBuilderFactory.newInstance();
    Object localObject1 = null;
    try
    {
      localObject4 = ((DocumentBuilderFactory)localObject4).newDocumentBuilder();
      localObject1 = localObject4;
    }
    catch (ParserConfigurationException localParserConfigurationException2)
    {
      try
      {
        localObject1 = ((DocumentBuilder)localObject1).parse(App.getResourceStream("app.xml"));
        localObject1 = ((Document)localObject1).getDocumentElement().getElementsByTagName("page");
        if ((localObject1 == null) || (((NodeList)localObject1).getLength() <= 0)) {
          break label737;
        }
        i = 0;
        for (;;)
        {
          if (i >= ((NodeList)localObject1).getLength()) {
            break label737;
          }
          localObject9 = ((NodeList)localObject1).item(i);
          localObject4 = ((Element)localObject9).getAttributeNode("id");
          if (localObject4 != null) {
            break;
          }
          i += 1;
        }
        localParserConfigurationException2 = localParserConfigurationException2;
        Log.e("CouponFragment", localParserConfigurationException2.toString());
      }
      catch (SAXException localSAXException)
      {
        for (;;)
        {
          Log.e("CouponFragment", localSAXException.toString());
          localParserConfigurationException1 = localParserConfigurationException2;
        }
      }
      catch (IOException localIOException)
      {
        do
        {
          for (;;)
          {
            Log.e("CouponFragment", localIOException.toString());
            localObject2 = localParserConfigurationException2;
          }
          localObject5 = localParserConfigurationException2.getValue();
        } while ((localObject5 == null) || (!paramString.equalsIgnoreCase((String)localObject5)));
        localObject6 = ((Element)localObject9).getAttributeNode("countofscans");
        localObject5 = Integer.valueOf(0);
        localObject2 = localObject5;
        if (localObject6 == null) {
          break label261;
        }
      }
    }
    localObject4 = null;
    try
    {
      ParserConfigurationException localParserConfigurationException1;
      int i = Integer.parseInt(((Attr)localObject6).getValue());
      localObject2 = Integer.valueOf(i);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Object localObject9;
        Object localObject2;
        Object localObject5;
        Object localObject6;
        label261:
        Object localObject7;
        Attr localAttr;
        Object localObject8;
        Log.d("Coupon", "Exception 236", localException);
        Object localObject3 = localObject5;
        continue;
        this.canBeScanAgain = false;
        continue;
        if (this.countOfScansDid.intValue() >= this.countOfScans.intValue()) {
          this.countOfScansDid = this.countOfScans;
        }
      }
    }
    localObject6 = ((Element)localObject9).getAttributeNode("startdate");
    localObject5 = "";
    if (localObject6 != null) {
      localObject5 = ((Attr)localObject6).getValue();
    }
    localObject7 = ((Element)localObject9).getAttributeNode("enddate");
    localObject6 = "";
    if (localObject7 != null) {
      localObject6 = ((Attr)localObject7).getValue();
    }
    localAttr = ((Element)localObject9).getAttributeNode("hoursbeforenextcheck");
    localObject8 = Integer.valueOf(0);
    localObject7 = localObject8;
    if (localAttr != null)
    {
      localObject7 = localObject8;
      if (!localAttr.getValue().equalsIgnoreCase("")) {
        localObject7 = Integer.valueOf(Integer.parseInt(localAttr.getValue()));
      }
    }
    localAttr = ((Element)localObject9).getAttributeNode("canbeusedagain");
    localObject8 = "";
    if (localAttr != null) {
      localObject8 = localAttr.getValue();
    }
    localAttr = ((Element)localObject9).getAttributeNode("redeemimagename");
    if (localAttr != null) {
      this.redeemImgPath = localAttr.getValue();
    }
    if ((this.redeemImgPath == null) || (this.redeemImgPath.equalsIgnoreCase(""))) {
      this.redeemImgPath = "redeemed.png";
    }
    localAttr = ((Element)localObject9).getAttributeNode("resultimage");
    if (localAttr != null) {
      this.resultImgPath = localAttr.getValue();
    }
    localAttr = ((Element)localObject9).getAttributeNode("barcodedata");
    if (localAttr != null) {
      this.barCodeData = localAttr.getValue();
    }
    localObject9 = ((Element)localObject9).getAttributeNode("gpsdata");
    if ((localObject9 != null) && (!((Attr)localObject9).getValue().equalsIgnoreCase(""))) {
      this.gpsData = ((Attr)localObject9).getValue().split(";");
    }
    this.pageId = paramString;
    this.countOfScans = ((Integer)localObject2);
    this.hoursNextScan = ((Integer)localObject7);
    paramString = getActivity().getSharedPreferences("Coupon", 0);
    this.countOfScansDid = Integer.valueOf(paramString.getInt(this.saveKeyId, 0));
    this.startDate = parseDateParam((String)localObject5, false);
    this.endDate = parseDateParam((String)localObject6, true);
    if ((((String)localObject8).equalsIgnoreCase("yes")) || (localObject8 == null))
    {
      this.canBeScanAgain = true;
      if (this.canBeScanAgain)
      {
        paramString = paramString.edit();
        paramString.putBoolean(this.saveKeyId + "canBeScanAgain", this.canBeScanAgain);
        paramString.commit();
      }
      label737:
      paramString = BitmapFactory.decodeStream(App.getResourceStream(this.resultImgPath), null, null);
      ((ImageView)this.mView.findViewById(2131099828)).setImageBitmap(paramString);
      paramString = BitmapFactory.decodeStream(App.getResourceStream(this.redeemImgPath), null, null);
      ((ImageView)this.mView.findViewById(2131099825)).setImageBitmap(paramString);
      if (this.countOfScansDid.intValue() >= 0) {
        break label855;
      }
      this.countOfScansDid = Integer.valueOf(0);
      getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          CouponFragment.this.invalidateOptionsMenu();
        }
      });
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    switch (paramInt1)
    {
    }
    do
    {
      return;
    } while (paramInt2 != -1);
    paramIntent = IntentIntegrator.parseActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramIntent != null) {
      paramIntent.getContents();
    }
    this.barCodeDataScaned = paramIntent.getContents();
    checkQRCode();
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558404, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903087, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  public void onDestroy()
  {
    if (this.mLocationManager != null) {
      this.mLocationManager.stopUpdatingLocation();
    }
    this.mLocationManager = null;
    super.onDestroy();
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    super.onHiddenChanged(paramBoolean);
    if (this.mLocationManager == null) {
      return;
    }
    if (paramBoolean)
    {
      this.mLocationManager.stopUpdatingLocation();
      return;
    }
    this.mLocationManager.startUpdatingLocation();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100276: 
      checkInButtonTapped();
      return true;
    }
    scanButtonTapped();
    return true;
  }
  
  public void onPause()
  {
    if (this.mLocationManager != null) {
      this.mLocationManager.stopUpdatingLocation();
    }
    super.onPause();
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    boolean bool1;
    if ((this.gpsData != null) && (this.gpsData.length > 0) && (this.menuCheckInIsEnabled))
    {
      bool1 = true;
      if ((this.barCodeData == null) || (this.barCodeData.length() <= 0) || (!this.menuScanIsEnabled)) {
        break label120;
      }
    }
    label120:
    for (boolean bool2 = true;; bool2 = false)
    {
      MenuItem localMenuItem = paramMenu.findItem(2131100276);
      paramMenu = paramMenu.findItem(2131100277);
      if (localMenuItem != null)
      {
        localMenuItem.setEnabled(bool1);
        localMenuItem.setVisible(bool1);
      }
      if (paramMenu != null)
      {
        paramMenu.setEnabled(bool2);
        paramMenu.setVisible(bool2);
      }
      return;
      bool1 = false;
      break;
    }
  }
  
  public void onResume()
  {
    if ((this.mLocationManager != null) && (!isHidden())) {
      this.mLocationManager.startUpdatingLocation();
    }
    super.onResume();
  }
}
