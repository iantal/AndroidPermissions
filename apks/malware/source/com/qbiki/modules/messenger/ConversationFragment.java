package com.qbiki.modules.messenger;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.ads.AdManager;
import com.qbiki.scapi.AppUser;
import com.qbiki.scapi.HttpResponseException;
import com.qbiki.scapi.SCApi;
import com.qbiki.scapi.SCApiException;
import com.qbiki.scapi.SCApiRequestAsyncTask;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCFragmentHelper;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.ViewUtil;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ConversationFragment
  extends SCListFragment
{
  public static final String ARG_CONVERSATION_ID = "ARG_CONVERSATION_ID";
  public static final String ARG_CONVERSATION_TITLE = "ARG_CONVERSATION_TITLE";
  private static final boolean DEBUG = false;
  private static final int DEFAULT_MAX_MESSAGE_LENGTH = 255;
  private static final int REQUEST_CODE_SIGN_IN = 1001;
  private static final String TAG = "ConversationFragment";
  private AdManager mAdManager;
  private View mContentView;
  private String mConversationId = "";
  private String mConversationTitle;
  private boolean mFirstDataReceived = false;
  private MessagesListAdapter mListAdapter;
  private ListView mListView;
  private int mLoadingAnimationDuration;
  private boolean mLoadingInProgress = false;
  private View mLoadingView;
  private int mMaxMessageLength;
  private List<Message> mMessages = new ArrayList();
  private EditText mNewMessageEditText = null;
  private String mPageId;
  private Button mSendButton;
  private MenuItem mSignInMenuItem;
  private MenuItem mSignOutMenuItem;
  private boolean mSignedIn = false;
  
  public ConversationFragment() {}
  
  private void scrollListToBottom()
  {
    if (this.mListAdapter.getCount() > 0) {
      this.mListView.setSelection(this.mListAdapter.getCount() - 1);
    }
  }
  
  private void setLoadingInProgress(boolean paramBoolean1, boolean paramBoolean2)
  {
    this.mLoadingInProgress = paramBoolean1;
    View localView1;
    if (paramBoolean1)
    {
      localView1 = this.mLoadingView;
      if (!paramBoolean1) {
        break label47;
      }
    }
    label47:
    for (View localView2 = this.mContentView;; localView2 = this.mLoadingView)
    {
      if (!paramBoolean2) {
        break label56;
      }
      ViewUtil.crossFadeViews(localView1, localView2, this.mLoadingAnimationDuration);
      return;
      localView1 = this.mContentView;
      break;
    }
    label56:
    localView1.setVisibility(0);
    localView2.setVisibility(8);
  }
  
  private void setupAdViews(View paramView)
  {
    Object localObject2 = null;
    Bundle localBundle = getArguments();
    Object localObject1 = localObject2;
    if (localBundle != null)
    {
      this.mPageId = localBundle.getString("PAGE_ID");
      localObject1 = localObject2;
      if (this.mPageId != null) {
        localObject1 = (Page)App.appConfig.getPages().get(this.mPageId);
      }
    }
    paramView = (LinearLayout)paramView.findViewById(2131099938);
    this.mAdManager = new AdManager().showAds(getActivity(), paramView, (Page)localObject1);
  }
  
  private void startSignInFlow()
  {
    startActivityForResult(App.getPageIntent(new FragmentInfo(AppSignInFragment.class.getName(), new Bundle()), getActivity()), 1001);
  }
  
  private void updateContent()
  {
    this.mFirstDataReceived = true;
    this.mListAdapter.notifyDataSetChanged();
    scrollListToBottom();
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if ((paramBoolean) && (!this.mFirstDataReceived)) {
      new RefreshMessagesTask(this).execute(new Void[0]);
    }
    if ((paramBoolean) && (this.mConversationTitle != null)) {
      SCFragmentHelper.setActionBarTitle(this, this.mConversationTitle);
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if ((paramInt1 == 1001) && (paramInt2 == -1) && (paramIntent != null))
    {
      this.mSignedIn = true;
      paramIntent.getStringExtra("userId");
      paramIntent = paramIntent.getStringExtra("displayName");
      FragmentActivity localFragmentActivity = getActivity();
      Toast.makeText(localFragmentActivity, localFragmentActivity.getString(2131362264, new Object[] { paramIntent }), 1).show();
      invalidateOptionsMenu();
      return;
    }
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558420, paramMenu);
    this.mSignInMenuItem = paramMenu.findItem(2131100301);
    this.mSignOutMenuItem = paramMenu.findItem(2131100302);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903141, paramViewGroup, false);
    this.mListView = ((ListView)paramLayoutInflater.findViewById(16908298));
    this.mListAdapter = new MessagesListAdapter(getActivity(), this.mMessages);
    this.mListView.setAdapter(this.mListAdapter);
    this.mContentView = paramLayoutInflater.findViewById(2131099901);
    this.mContentView.setVisibility(8);
    this.mLoadingView = paramLayoutInflater.findViewById(2131099905);
    this.mNewMessageEditText = ((EditText)paramLayoutInflater.findViewById(2131099940));
    this.mNewMessageEditText.setOnTouchListener(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        if (paramAnonymousMotionEvent.getAction() != 0) {
          return false;
        }
        if (!ConversationFragment.this.mSignedIn)
        {
          ConversationFragment.this.startSignInFlow();
          return false;
        }
        ConversationFragment.this.scrollListToBottom();
        return false;
      }
    });
    this.mSendButton = ((Button)paramLayoutInflater.findViewById(2131099941));
    this.mSendButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (!ConversationFragment.this.mSignedIn) {
          ConversationFragment.this.startSignInFlow();
        }
        while ((!ConversationFragment.this.mSignedIn) || (ConversationFragment.this.mNewMessageEditText.getText().toString().trim().length() <= 0) || (ConversationFragment.this.mLoadingInProgress)) {
          return;
        }
        int i = ConversationFragment.this.mNewMessageEditText.getText().toString().length();
        if (i > ConversationFragment.this.mMaxMessageLength)
        {
          Toast.makeText(ConversationFragment.this.getActivity(), ConversationFragment.this.getString(2131362269, new Object[] { Integer.valueOf(i), Integer.valueOf(ConversationFragment.this.mMaxMessageLength) }), 1).show();
          return;
        }
        new ConversationFragment.PostMessageTask(ConversationFragment.this, ConversationFragment.this).execute(new Void[0]);
      }
    });
    paramViewGroup = getArguments();
    if (paramViewGroup != null)
    {
      this.mConversationId = paramViewGroup.getString("ARG_CONVERSATION_ID");
      this.mMaxMessageLength = paramViewGroup.getInt("ARG_MAX_MESSAGE_LENGTH", 255);
      if ((this.mMaxMessageLength < 20) || (this.mMaxMessageLength > 255)) {
        this.mMaxMessageLength = 255;
      }
      this.mConversationTitle = paramViewGroup.getString("ARG_CONVERSATION_TITLE");
    }
    this.mLoadingAnimationDuration = getResources().getInteger(17694721);
    if (SCApi.getInstance().getSignedInAppUser() != null) {}
    for (boolean bool = true;; bool = false)
    {
      this.mSignedIn = bool;
      invalidateOptionsMenu();
      setupAdViews(paramLayoutInflater);
      return paramLayoutInflater;
    }
  }
  
  public void onDestroy()
  {
    if (this.mAdManager != null) {
      this.mAdManager.destroy();
    }
    super.onDestroy();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100301: 
      startSignInFlow();
      return true;
    }
    this.mSignedIn = false;
    Toast.makeText(getActivity(), 2131362265, 0).show();
    SCApi.getInstance().appUserSignOut();
    invalidateOptionsMenu();
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    boolean bool2 = true;
    this.mSignOutMenuItem.setEnabled(this.mSignedIn);
    this.mSignOutMenuItem.setVisible(this.mSignedIn);
    paramMenu = this.mSignInMenuItem;
    if (!this.mSignedIn)
    {
      bool1 = true;
      paramMenu.setEnabled(bool1);
      paramMenu = this.mSignInMenuItem;
      if (this.mSignedIn) {
        break label80;
      }
    }
    label80:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      paramMenu.setVisible(bool1);
      return;
      bool1 = false;
      break;
    }
  }
  
  private class PostMessageTask
    extends SCApiRequestAsyncTask<Void, String, String>
  {
    private String mMessageText = "";
    
    public PostMessageTask(Fragment paramFragment)
    {
      super();
    }
    
    protected void onPostExecute(String paramString)
    {
      if (paramString != null) {
        ConversationFragment.this.updateContent();
      }
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
      this.mMessageText = ConversationFragment.this.mNewMessageEditText.getText().toString();
      ConversationFragment.this.mNewMessageEditText.setText("");
    }
    
    protected String performRequest(Void... paramVarArgs)
      throws IOException, JSONException, HttpResponseException, SCApiException
    {
      Object localObject = SCApi.getInstance().postMessengerMessage(ConversationFragment.this.mConversationId, this.mMessageText);
      paramVarArgs = new Message();
      paramVarArgs.id = ((JSONObject)localObject).getString("id");
      paramVarArgs.text = this.mMessageText;
      localObject = SCApi.getInstance().getSignedInAppUser();
      paramVarArgs.userId = ((AppUser)localObject).getId();
      paramVarArgs.userDisplayName = ((AppUser)localObject).getDisplayName();
      paramVarArgs.createdDate = new Date();
      ConversationFragment.this.mMessages.add(paramVarArgs);
      return "ok";
    }
  }
  
  private class RefreshMessagesTask
    extends SCApiRequestAsyncTask<Void, String, String>
  {
    public RefreshMessagesTask(Fragment paramFragment)
    {
      super();
    }
    
    protected void onPostExecute(String paramString)
    {
      if (paramString != null) {
        ConversationFragment.this.updateContent();
      }
      ConversationFragment.this.setLoadingInProgress(false, true);
    }
    
    protected void onPreExecute()
    {
      ConversationFragment.this.setLoadingInProgress(true, false);
      super.onPreExecute();
    }
    
    protected String performRequest(Void... paramVarArgs)
      throws IOException, JSONException, HttpResponseException, SCApiException
    {
      ConversationFragment.this.mMessages.clear();
      paramVarArgs = SCApi.getInstance().listMessengerMessages(ConversationFragment.this.mConversationId).getJSONArray("items");
      int i = 0;
      for (;;)
      {
        if (i < paramVarArgs.length())
        {
          Object localObject = paramVarArgs.getJSONObject(i);
          Message localMessage = new Message();
          localMessage.id = ((JSONObject)localObject).getString("id");
          localMessage.text = ((JSONObject)localObject).getString("text");
          JSONObject localJSONObject = ((JSONObject)localObject).getJSONObject("user");
          localMessage.userId = localJSONObject.getString("id");
          localMessage.userDisplayName = localJSONObject.getString("displayName");
          localObject = ((JSONObject)localObject).getString("createdDate");
          try
          {
            localMessage.createdDate = SCApi.parseUtcRfcDate((String)localObject);
            ConversationFragment.this.mMessages.add(localMessage);
            i += 1;
          }
          catch (ParseException localParseException)
          {
            for (;;)
            {
              Log.w("ConversationFragment", "Error parsing date: " + (String)localObject);
            }
          }
        }
      }
      return "ok";
    }
  }
}
