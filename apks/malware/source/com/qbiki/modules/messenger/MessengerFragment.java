package com.qbiki.modules.messenger;

import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ListView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.ads.AdManager;
import com.qbiki.gcm.GCMTopicsFragment;
import com.qbiki.scapi.HttpResponseException;
import com.qbiki.scapi.SCApi;
import com.qbiki.scapi.SCApiException;
import com.qbiki.scapi.SCApiRequestAsyncTask;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.ViewUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class MessengerFragment
  extends SCListFragment
{
  public static final String ARG_MAX_MESSAGE_LENGTH = "ARG_MAX_MESSAGE_LENGTH";
  private static final boolean DEBUG = false;
  private static final String TAG = "MessengerFragment";
  private AdManager mAdManager;
  private View mContentView;
  private List<Conversation> mConversations = new ArrayList();
  private boolean mFirstDataReceived = false;
  private ConversationsListAdapter mListAdapter;
  private ListView mListView;
  private View mLoadingView;
  private MenuItem mNotificationsSettingsMenuItem;
  private String mPageId;
  private int mShortAnimationDuration;
  
  public MessengerFragment() {}
  
  private void setLoadingInProgress(boolean paramBoolean1, boolean paramBoolean2)
  {
    View localView1;
    if (paramBoolean1)
    {
      localView1 = this.mLoadingView;
      if (!paramBoolean1) {
        break label42;
      }
    }
    label42:
    for (View localView2 = this.mContentView;; localView2 = this.mLoadingView)
    {
      if (!paramBoolean2) {
        break label51;
      }
      ViewUtil.crossFadeViews(localView1, localView2, this.mShortAnimationDuration);
      return;
      localView1 = this.mContentView;
      break;
    }
    label51:
    localView1.setVisibility(0);
    localView2.setVisibility(8);
  }
  
  private void setupAdViews(View paramView)
  {
    Object localObject2 = null;
    Bundle localBundle = getArguments();
    Object localObject1 = localObject2;
    if (localBundle != null)
    {
      this.mPageId = localBundle.getString("PAGE_ID");
      localObject1 = localObject2;
      if (this.mPageId != null) {
        localObject1 = (Page)App.appConfig.getPages().get(this.mPageId);
      }
    }
    paramView = (LinearLayout)paramView.findViewById(2131099938);
    this.mAdManager = new AdManager().showAds(getActivity(), paramView, (Page)localObject1);
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if ((paramBoolean) && (!this.mFirstDataReceived)) {
      new RefreshConversationsTask(this).execute(new Void[0]);
    }
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558419, paramMenu);
    this.mNotificationsSettingsMenuItem = paramMenu.findItem(2131100300);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903140, paramViewGroup, false);
    this.mListView = ((ListView)paramLayoutInflater.findViewById(16908298));
    this.mListAdapter = new ConversationsListAdapter(getActivity(), this.mConversations);
    this.mListView.setAdapter(this.mListAdapter);
    this.mContentView = paramLayoutInflater.findViewById(2131099901);
    this.mLoadingView = paramLayoutInflater.findViewById(2131099905);
    this.mContentView.setVisibility(8);
    this.mShortAnimationDuration = getResources().getInteger(17694720);
    setupAdViews(paramLayoutInflater);
    return paramLayoutInflater;
  }
  
  public void onDestroy()
  {
    if (this.mAdManager != null) {
      this.mAdManager.destroy();
    }
    super.onDestroy();
  }
  
  public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong)
  {
    super.onListItemClick(paramListView, paramView, paramInt, paramLong);
    paramListView = new Bundle();
    paramListView.putString("ARG_CONVERSATION_ID", ((Conversation)this.mConversations.get(paramInt)).id);
    paramListView.putString("ARG_CONVERSATION_TITLE", ((Conversation)this.mConversations.get(paramInt)).title);
    paramListView.putString("PAGE_ID", this.mPageId);
    paramListView.putInt("ARG_MAX_MESSAGE_LENGTH", getArguments().getInt("ARG_MAX_MESSAGE_LENGTH", 0));
    App.showPage(new FragmentInfo(ConversationFragment.class.getName(), paramListView), this);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    paramMenuItem = new ArrayList(this.mConversations.size());
    ArrayList localArrayList = new ArrayList(this.mConversations.size());
    Object localObject = this.mConversations.iterator();
    while (((Iterator)localObject).hasNext())
    {
      Conversation localConversation = (Conversation)((Iterator)localObject).next();
      paramMenuItem.add(localConversation.id);
      localArrayList.add(localConversation.title);
    }
    localObject = new Bundle();
    ((Bundle)localObject).putStringArrayList("ARG_TOPIC_IDS", paramMenuItem);
    ((Bundle)localObject).putStringArrayList("ARG_TOPIC_TITLES", localArrayList);
    ((Bundle)localObject).putString("ARG_TOPIC_TYPE", "messengerMessage");
    ((Bundle)localObject).putString("ARG_NOTE", getString(2131362272));
    startActivity(App.getPageIntent(new FragmentInfo(GCMTopicsFragment.class.getName(), (Bundle)localObject), getActivity()));
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    this.mNotificationsSettingsMenuItem.setEnabled(this.mFirstDataReceived);
  }
  
  private class RefreshConversationsTask
    extends SCApiRequestAsyncTask<Void, String, String>
  {
    public RefreshConversationsTask(Fragment paramFragment)
    {
      super();
    }
    
    protected void onPostExecute(String paramString)
    {
      if (paramString != null)
      {
        MessengerFragment.access$202(MessengerFragment.this, true);
        MessengerFragment.this.mListAdapter.notifyDataSetChanged();
        MessengerFragment.this.invalidateOptionsMenu();
      }
      MessengerFragment.this.setLoadingInProgress(false, true);
    }
    
    protected void onPreExecute()
    {
      MessengerFragment.this.setLoadingInProgress(true, false);
      super.onPreExecute();
      MessengerFragment.this.invalidateOptionsMenu();
    }
    
    protected String performRequest(Void... paramVarArgs)
      throws IOException, JSONException, HttpResponseException, SCApiException
    {
      MessengerFragment.this.mConversations.clear();
      paramVarArgs = SCApi.getInstance().listMessengerConversations().getJSONArray("items");
      int i = 0;
      while (i < paramVarArgs.length())
      {
        JSONObject localJSONObject = paramVarArgs.getJSONObject(i);
        Conversation localConversation = new Conversation();
        localConversation.id = localJSONObject.getString("id");
        localConversation.title = localJSONObject.getString("title");
        MessengerFragment.this.mConversations.add(localConversation);
        i += 1;
      }
      return "ok";
    }
  }
}
