package com.qbiki.mbfx;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicNameValuePair;

public class ForgotPasswordActivity
  extends SCActivity
  implements ResponseListener
{
  private static final String TAG = "ForgotPasswordActivity";
  private EditText emailET = null;
  private String forgotPasswordURL = null;
  private Button getPasswordBtn = null;
  private ProgressDialog progressDialog = null;
  private int progressDialogCount = 0;
  private TextView responseTV = null;
  
  public ForgotPasswordActivity() {}
  
  private void dismissProgressDialog()
  {
    try
    {
      this.progressDialogCount -= 1;
      if (this.progressDialogCount < 0) {
        this.progressDialogCount = 0;
      }
      Log.v("ForgotPasswordActivity", "dismissProgressDialog: " + this.progressDialogCount);
      if ((this.progressDialogCount == 0) && (this.progressDialog != null)) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally {}
  }
  
  private void getPasswordAction()
  {
    try
    {
      this.responseTV.setText("");
      String str = this.emailET.getText().toString();
      ((InputMethodManager)getSystemService("input_method")).hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 2);
      HttpPost localHttpPost = new HttpPost(this.forgotPasswordURL);
      ArrayList localArrayList = new ArrayList(1);
      localArrayList.add(new BasicNameValuePair("email", str));
      localHttpPost.setEntity(new UrlEncodedFormEntity(localArrayList));
      showProgressDialog();
      Requester.sendRequest(localHttpPost, this);
      return;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      Log.e("ForgotPasswordActivity", "getPasswordAction: " + localUnsupportedEncodingException, localUnsupportedEncodingException);
    }
  }
  
  private void showProgressDialog()
  {
    try
    {
      this.progressDialogCount += 1;
      Log.v("ForgotPasswordActivity", "showProgressDialog: " + this.progressDialogCount);
      if (this.progressDialogCount == 1)
      {
        this.progressDialog = new ProgressDialog(this);
        this.progressDialog.setProgressStyle(0);
        this.progressDialog.setMessage("Please wait...");
        this.progressDialog.setCancelable(true);
        this.progressDialog.setTitle("Retrieving Password");
        this.progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymousDialogInterface) {}
        });
        this.progressDialog.show();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903160);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null) {
      this.forgotPasswordURL = paramBundle.getString("forgotPasswordURL");
    }
    this.emailET = ((EditText)findViewById(2131100004));
    this.responseTV = ((TextView)findViewById(2131100006));
    this.getPasswordBtn = ((Button)findViewById(2131100005));
    this.getPasswordBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        ForgotPasswordActivity.this.getPasswordAction();
      }
    });
  }
  
  public void onResponseReceived(HttpResponse paramHttpResponse)
  {
    dismissProgressDialog();
    paramHttpResponse = Requester.getResponseBody(paramHttpResponse);
    this.responseTV.setText(paramHttpResponse);
  }
  
  public void onResponseTimeout()
  {
    dismissProgressDialog();
    DialogUtil.showAlert(this, "ERROR", "Server is NOT responding.");
  }
}
