package com.qbiki.mbfx;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import com.facebook.android.DialogError;
import com.facebook.android.Facebook;
import com.facebook.android.Facebook.DialogListener;
import com.facebook.android.FacebookError;
import com.facebook.android.SessionEvents;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

public class LoginActivity
  extends SCActivity
  implements Facebook.DialogListener, ResponseListener
{
  private static final int FORGOT_PASSWORD = 1301;
  private static final int REGISTER = 1302;
  private static final String TAG = "FacebookLoginActivity";
  public static final int loginRequestCode = 10914;
  private static final int timeoutSeconds = 30;
  private String facebookLoginURL = null;
  private Button fbLoginBtn = null;
  private Button forgotPasswordBtn = null;
  private String forgotPasswordURL = null;
  private Button loginBtn = null;
  private String loginURL = null;
  private EditText passwordET = null;
  private ProgressDialog progressDialog = null;
  private int progressDialogCount = 0;
  private Button registerBtn = null;
  private String registerURL = null;
  private User tmpUser = null;
  private EditText usernameET = null;
  
  public LoginActivity() {}
  
  private void dismissProgressDialog()
  {
    try
    {
      this.progressDialogCount -= 1;
      if (this.progressDialogCount < 0) {
        this.progressDialogCount = 0;
      }
      Log.v("FacebookLoginActivity", "dismissProgressDialog: " + this.progressDialogCount);
      if ((this.progressDialogCount == 0) && (this.progressDialog != null)) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally {}
  }
  
  private void fbLoginAction()
  {
    Toast.makeText(this, "fbLoginAction", 0).show();
    loginToFacebook();
  }
  
  private void forgotPasswordAction()
  {
    Intent localIntent = new Intent(this, ForgotPasswordActivity.class);
    localIntent.putExtra("forgotPasswordURL", this.forgotPasswordURL);
    startActivityForResult(localIntent, 1301);
  }
  
  private void loginAction()
  {
    try
    {
      String str1 = this.usernameET.getText().toString();
      String str2 = this.passwordET.getText().toString();
      this.tmpUser = new User();
      this.tmpUser.username = str1;
      ((InputMethodManager)getSystemService("input_method")).hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 2);
      HttpPost localHttpPost = new HttpPost(this.loginURL);
      ArrayList localArrayList = new ArrayList(2);
      localArrayList.add(new BasicNameValuePair("email_username", str1));
      localArrayList.add(new BasicNameValuePair("password", str2));
      localHttpPost.setEntity(new UrlEncodedFormEntity(localArrayList));
      showProgressDialog();
      Requester.sendRequest(localHttpPost, this, 30000);
      return;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      Log.e("FacebookLoginActivity", "loginAction: " + localUnsupportedEncodingException, localUnsupportedEncodingException);
    }
  }
  
  private void loginToFacebook()
  {
    Facebook localFacebook = MBFXContext.getFacebook();
    LoginDialogListener1 localLoginDialogListener1 = new LoginDialogListener1(null);
    localFacebook.authorize(this, new String[] { "user_about_me" }, -1, localLoginDialogListener1);
  }
  
  private void loginWithFacebookUser()
  {
    Object localObject1 = MBFXContext.getFacebook();
    if ((localObject1 != null) && (((Facebook)localObject1).isSessionValid())) {}
    try
    {
      Object localObject3 = new JSONObject(((Facebook)localObject1).request("me"));
      this.tmpUser = new User();
      localObject1 = ((JSONObject)localObject3).getString("id");
      Object localObject2 = ((JSONObject)localObject3).getString("first_name");
      localObject3 = ((JSONObject)localObject3).getString("last_name");
      this.tmpUser.userid = ((String)localObject1);
      this.tmpUser.firstName = ((String)localObject2);
      this.tmpUser.lastName = ((String)localObject3);
      ((InputMethodManager)getSystemService("input_method")).hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 2);
      localObject1 = new HttpPost(this.facebookLoginURL);
      localObject2 = new ArrayList(3);
      ((List)localObject2).add(new BasicNameValuePair("fbid", this.tmpUser.userid));
      ((List)localObject2).add(new BasicNameValuePair("firstName", this.tmpUser.firstName));
      ((List)localObject2).add(new BasicNameValuePair("lastName", this.tmpUser.lastName));
      ((HttpPost)localObject1).setEntity(new UrlEncodedFormEntity((List)localObject2));
      showProgressDialog();
      Requester.sendRequest((HttpUriRequest)localObject1, this, 30000);
      return;
    }
    catch (MalformedURLException localMalformedURLException)
    {
      localMalformedURLException.printStackTrace();
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
      return;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
  }
  
  private void registerAction()
  {
    Intent localIntent = new Intent(this, RegisterActivity.class);
    localIntent.putExtra("registerURL", this.registerURL);
    startActivityForResult(localIntent, 1302);
  }
  
  private void showProgressDialog()
  {
    try
    {
      this.progressDialogCount += 1;
      Log.v("FacebookLoginActivity", "showProgressDialog: " + this.progressDialogCount);
      if (this.progressDialogCount == 1)
      {
        this.progressDialog = new ProgressDialog(this);
        this.progressDialog.setProgressStyle(0);
        this.progressDialog.setMessage("Please wait...");
        this.progressDialog.setCancelable(true);
        this.progressDialog.setTitle("Login");
        this.progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymousDialogInterface) {}
        });
        this.progressDialog.show();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt1 == 1301) {
      if (paramInt2 == -1) {
        Toast.makeText(this, "Please login with your retrieved password!", 1).show();
      }
    }
    do
    {
      return;
      if (paramInt1 != 1302) {
        break;
      }
    } while (paramInt2 != -1);
    this.tmpUser = ((User)paramIntent.getParcelableExtra("user"));
    MBFXContext.setSessionUser(this.tmpUser);
    setResult(-1, new Intent());
    finish();
    return;
    MBFXContext.getFacebook().authorizeCallback(paramInt1, paramInt2, paramIntent);
  }
  
  public void onCancel() {}
  
  public void onComplete(Bundle paramBundle)
  {
    loginWithFacebookUser();
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903162);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null)
    {
      this.loginURL = paramBundle.getString("loginURL");
      this.facebookLoginURL = paramBundle.getString("facebookLoginURL");
      this.forgotPasswordURL = paramBundle.getString("forgotPasswordURL");
      this.registerURL = paramBundle.getString("registerURL");
    }
    this.usernameET = ((EditText)findViewById(2131100013));
    this.passwordET = ((EditText)findViewById(2131100015));
    this.loginBtn = ((Button)findViewById(2131100016));
    this.loginBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        LoginActivity.this.loginAction();
      }
    });
    this.forgotPasswordBtn = ((Button)findViewById(2131100017));
    this.forgotPasswordBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        LoginActivity.this.forgotPasswordAction();
      }
    });
    this.registerBtn = ((Button)findViewById(2131100018));
    this.registerBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        LoginActivity.this.registerAction();
      }
    });
    this.fbLoginBtn = ((Button)findViewById(2131100019));
    this.fbLoginBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        LoginActivity.this.fbLoginAction();
      }
    });
  }
  
  public void onError(DialogError paramDialogError) {}
  
  public void onFacebookError(FacebookError paramFacebookError)
  {
    Log.v("FacebookLoginActivity", "onFacebookError: " + paramFacebookError.toString());
  }
  
  public void onResponseReceived(HttpResponse paramHttpResponse)
  {
    dismissProgressDialog();
    String str = Requester.getResponseBody(paramHttpResponse);
    for (;;)
    {
      try
      {
        paramHttpResponse = new JSONObject(str);
        paramHttpResponse = null;
      }
      catch (JSONException paramHttpResponse)
      {
        try
        {
          paramHttpResponse = paramHttpResponse.getString("ok");
          if (paramHttpResponse == null) {
            break;
          }
          this.tmpUser.userid = paramHttpResponse;
          paramHttpResponse = new AlertDialog.Builder(this);
          paramHttpResponse.setMessage("Logged in successfully!").setCancelable(true).setPositiveButton("OK", new DialogInterface.OnClickListener()
          {
            public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              MBFXContext.setSessionUser(LoginActivity.this.tmpUser);
              paramAnonymousDialogInterface = new Intent();
              LoginActivity.this.setResult(-1, paramAnonymousDialogInterface);
              LoginActivity.this.finish();
            }
          });
          paramHttpResponse.setTitle("Login");
          paramHttpResponse.create().show();
          return;
        }
        catch (JSONException paramHttpResponse)
        {
          for (;;) {}
        }
        paramHttpResponse = paramHttpResponse;
      }
    }
    DialogUtil.showAlert(this, "ERROR", str);
  }
  
  public void onResponseTimeout()
  {
    dismissProgressDialog();
    DialogUtil.showAlert(this, "ERROR", "Server is NOT responding.");
  }
  
  private final class LoginDialogListener1
    implements Facebook.DialogListener
  {
    private LoginDialogListener1() {}
    
    public void onCancel()
    {
      SessionEvents.onLoginError("Action Canceled");
    }
    
    public void onComplete(Bundle paramBundle)
    {
      SessionEvents.onLoginSuccess();
      LoginActivity.this.loginWithFacebookUser();
    }
    
    public void onError(DialogError paramDialogError)
    {
      SessionEvents.onLoginError(paramDialogError.getMessage());
    }
    
    public void onFacebookError(FacebookError paramFacebookError)
    {
      SessionEvents.onLoginError(paramFacebookError.getMessage());
    }
  }
}
