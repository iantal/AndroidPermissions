package com.qbiki.mbfx;

import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore.Images.Media;
import android.util.Log;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;

public class PhotoUploader
  extends SCActivity
  implements ResponseListener
{
  private static final int CONTENT = 1801;
  private static final int FILE = 1802;
  private static final int IMAGE_MAX_SIZE = 220;
  private static final int SELECT_CAMERA = 1302;
  private static final int SELECT_IMAGE = 1301;
  private static final String TAG = "PhotoUploader";
  private LinearLayout activityIndicator;
  private Uri imageUri = null;
  private ImageView imgView;
  private Button pickBtn;
  private ProgressDialog progressDialog = null;
  private int progressDialogCount = 0;
  private String targetFullUrl = null;
  private Button uploadBtn;
  
  public PhotoUploader() {}
  
  private Bitmap decodeBitmapFromUri(Uri paramUri, int paramInt)
  {
    try
    {
      BitmapFactory.Options localOptions = new BitmapFactory.Options();
      localOptions.inJustDecodeBounds = true;
      if (paramInt == 1801) {
        BitmapFactory.decodeStream(getContentResolver().openInputStream(paramUri), null, localOptions);
      }
      for (;;)
      {
        int i = 1;
        if ((localOptions.outHeight > 220) || (localOptions.outWidth > 220)) {
          i = (int)Math.pow(2.0D, (int)Math.round(Math.log(220.0D / Math.max(localOptions.outHeight, localOptions.outWidth)) / Math.log(0.5D)));
        }
        localOptions = new BitmapFactory.Options();
        localOptions.inSampleSize = i;
        if (paramInt != 1801) {
          break;
        }
        return BitmapFactory.decodeStream(getContentResolver().openInputStream(paramUri), null, localOptions);
        BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
      }
      paramUri = BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
    }
    catch (Exception paramUri)
    {
      Log.e("PhotoUploader", "decodeBitmapFromUriString: " + paramUri.toString(), paramUri);
      return null;
    }
    return paramUri;
  }
  
  private void dismissProgressDialog()
  {
    try
    {
      this.progressDialogCount -= 1;
      if (this.progressDialogCount < 0) {
        this.progressDialogCount = 0;
      }
      Log.v("PhotoUploader", "dismissProgressDialog: " + this.progressDialogCount);
      if ((this.progressDialogCount == 0) && (this.progressDialog != null)) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally {}
  }
  
  private void pickAction(View paramView)
  {
    registerForContextMenu(paramView);
    openContextMenu(paramView);
  }
  
  private void pickFromCamera()
  {
    try
    {
      Intent localIntent = new Intent("android.media.action.IMAGE_CAPTURE");
      localIntent.putExtra("output", Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "xyz.jpg")));
      startActivityForResult(localIntent, 1302);
      Toast.makeText(this, "Pick From Camera", 3).show();
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      DialogUtil.showAlert(this, 2131361916, 2131361936);
    }
  }
  
  private void pickFromLibrary()
  {
    startActivityForResult(new Intent("android.intent.action.PICK", MediaStore.Images.Media.EXTERNAL_CONTENT_URI), 1301);
  }
  
  private void showProgressDialog()
  {
    try
    {
      this.progressDialogCount += 1;
      Log.v("PhotoUploader", "showProgressDialog: " + this.progressDialogCount);
      if (this.progressDialogCount == 1)
      {
        this.progressDialog = new ProgressDialog(this);
        this.progressDialog.setProgressStyle(0);
        this.progressDialog.setMessage("Please wait...");
        this.progressDialog.setCancelable(false);
        this.progressDialog.setTitle("Uploading image");
        this.progressDialog.show();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void uploadAction()
  {
    Log.v("PhotoUploader", "imageUri = " + this.imageUri);
    if (this.targetFullUrl == null)
    {
      Log.e("PhotoUploader", "Target URL is NULL!");
      showProgressDialog();
      return;
    }
    try
    {
      ByteArrayEntity localByteArrayEntity = new ByteArrayEntity(DataUtil.readBytes(getContentResolver().openInputStream(this.imageUri)));
      HttpPost localHttpPost = new HttpPost(this.targetFullUrl);
      localHttpPost.setEntity(localByteArrayEntity);
      showProgressDialog();
      Requester.sendRequest(localHttpPost, this);
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      Log.e("PhotoUploader", "FileNotFoundException!: " + this.imageUri);
      return;
    }
    catch (IOException localIOException)
    {
      Log.e("PhotoUploader", "IOException!: " + this.imageUri);
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt1 == 1301) {
      if (paramInt2 == -1)
      {
        Toast.makeText(this, "Chosen From Library", 3).show();
        paramIntent = paramIntent.getData();
        localBitmap = decodeBitmapFromUri(paramIntent, 1801);
        this.imgView.setImageBitmap(localBitmap);
        this.imageUri = paramIntent;
      }
    }
    while ((paramInt1 != 1302) || (paramInt2 != -1)) {
      return;
    }
    Toast.makeText(this, "Chosen From Camera", 3).show();
    paramIntent = Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "xyz.jpg"));
    Bitmap localBitmap = decodeBitmapFromUri(paramIntent, 1802);
    this.imgView.setImageBitmap(localBitmap);
    this.imageUri = paramIntent;
  }
  
  public boolean onContextItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onContextItemSelected(paramMenuItem);
    case 2131100311: 
      pickFromCamera();
      return true;
    }
    pickFromLibrary();
    return true;
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null) {
      this.targetFullUrl = paramBundle.getString("targetURL");
    }
    setContentView(2130903163);
    this.imgView = ((ImageView)findViewById(2131100022));
    this.pickBtn = ((Button)findViewById(2131100026));
    this.uploadBtn = ((Button)findViewById(2131100027));
    this.activityIndicator = ((LinearLayout)findViewById(2131100023));
    this.activityIndicator.setVisibility(4);
    this.pickBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoUploader.this.pickAction(paramAnonymousView);
      }
    });
    this.pickBtn.setOnLongClickListener(new View.OnLongClickListener()
    {
      public boolean onLongClick(View paramAnonymousView)
      {
        return true;
      }
    });
    this.uploadBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PhotoUploader.this.uploadAction();
      }
    });
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    super.onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
    getMenuInflater().inflate(2131558427, paramContextMenu);
    paramContextMenu.setHeaderTitle("Please choose the source of the image:");
  }
  
  public void onResponseReceived(HttpResponse paramHttpResponse)
  {
    dismissProgressDialog();
    paramHttpResponse = Requester.getResponseBody(paramHttpResponse);
    if (paramHttpResponse.equalsIgnoreCase("ok"))
    {
      DialogUtil.showAlert(this, null, "Image Uploaded Successfully!");
      return;
    }
    DialogUtil.showAlert(this, "ERROR", paramHttpResponse);
  }
  
  public void onResponseTimeout()
  {
    dismissProgressDialog();
    DialogUtil.showAlert(this, "ERROR", "Server is NOT responding.");
  }
}
