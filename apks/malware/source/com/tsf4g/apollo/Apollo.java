package com.tsf4g.apollo;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Log;
import com.tsf4g.tx.TX;
import java.io.File;

public class Apollo
{
  private static final String ClassTag = "class Apollo";
  public static final Apollo Instance = new Apollo();
  private static final String NetTag = "checkNetworkState";
  private static Context m_cntxt;
  StatisConfig m_statiscfg = new StatisConfig();
  String strJsonConfig = null;
  
  static
  {
    System.loadLibrary("tersafe");
    Log.i("Apollo", "static");
    System.loadLibrary("apollo");
  }
  
  private Apollo()
  {
    Log.i("Apollo", "Apollo()");
  }
  
  public static int GetResID(String paramString1, String paramString2)
  {
    try
    {
      int i = m_cntxt.getResources().getIdentifier(paramString1, paramString2, m_cntxt.getPackageName());
      return i;
    }
    catch (Exception paramString2)
    {
      Log.e("Apollo", "GetResID " + paramString1 + " Error");
    }
    return 0;
  }
  
  private native void apolloInit(Object paramObject, Activity paramActivity, Context paramContext, String paramString);
  
  private int checkNetworkState()
  {
    for (;;)
    {
      try
      {
        NetworkInfo localNetworkInfo = ((ConnectivityManager)m_cntxt.getSystemService("connectivity")).getActiveNetworkInfo();
        if (localNetworkInfo == null)
        {
          Log.i("checkNetworkState", "ApolloNetInfo : null. All Networks are disabled");
          return 0;
        }
        Log.i("checkNetworkState", "ApolloNetInfo : not null1111");
        switch (localNetworkInfo.getType())
        {
        case 0: 
          Log.i("checkNetworkState", "Network Type : Other Network Type");
          return 0;
        }
      }
      catch (Exception localException)
      {
        Log.i("Exception", "Apollo check" + localException.toString());
        return 0;
      }
      Log.i("checkNetworkState", "Network Type : MOBILE");
      return 1;
      Log.i("checkNetworkState", "Network Type : WIFI");
      return 2;
    }
  }
  
  public void GetBaseConfig()
  {
    this.strJsonConfig = this.m_statiscfg.GetBaseConfig(m_cntxt);
    Log.i("Apollo.GetBaseConfig", "strJsonConfig:" + this.strJsonConfig);
  }
  
  public void HandleCallback(Intent paramIntent)
  {
    ApolloPluginManager.Instance.HandleCallback(paramIntent);
  }
  
  public boolean Initialize(Activity paramActivity, Object paramObject)
  {
    Log.i("Apollo.Initialize", "TX Init");
    TX.Instance.Initialize(paramActivity);
    Log.i("Apollo.Initialize", "Apollo Init");
    apolloInit(paramObject, paramActivity, paramActivity.getBaseContext(), paramActivity.getBaseContext().getDir("tomb", 0).getAbsolutePath());
    m_cntxt = paramActivity.getApplicationContext();
    return ApolloPluginManager.Instance.InitializePlugin(paramActivity, paramObject);
  }
  
  public void OnActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    ApolloPluginManager.Instance.OnActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public void OnDestroy(Activity paramActivity)
  {
    Log.i("", "Apollo onDestroy");
    ApolloPluginManager.Instance.OnDestroy(paramActivity);
  }
  
  public void OnPause()
  {
    Log.i("", "Apollo onPause");
    ApolloPluginManager.Instance.OnPause();
  }
  
  public void OnResume()
  {
    ApolloPluginManager.Instance.OnResume();
    Log.i("", "Apollo onResume");
  }
}
