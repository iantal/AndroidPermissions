package com.tsf4g.apollo;

import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Configuration;
import android.os.Bundle;
import android.util.Log;
import com.tsf4g.tx.ConnectionChangeReceiver;
import com.unity3d.player.UnityPlayerActivity;

public class ApolloPlayerActivity
  extends UnityPlayerActivity
{
  private static final String tag = "tagApolloPlayerActivity";
  private Object info;
  
  static
  {
    System.loadLibrary("tersafe");
    System.loadLibrary("apollo");
  }
  
  protected ApolloPlayerActivity() {}
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    Apollo.Instance.OnActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    Log.i("tagApolloPlayerActivity", "onConfigurationChanged");
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    Log.i("ApolloTag", "ApolloPlayerActivity onCreate1");
    if (!Apollo.Instance.Initialize(this, this.info))
    {
      Log.i("Apollo", "Warning!Reduplicate game activity was detected.Activity will finish immediately.");
      finish();
      return;
    }
    paramBundle = new ConnectionChangeReceiver();
    IntentFilter localIntentFilter = new IntentFilter();
    localIntentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
    registerReceiver(paramBundle, localIntentFilter);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    Log.i("tagApolloPlayerActivity", "MSDK onDestroy");
    Apollo.Instance.OnDestroy(this);
  }
  
  protected void onNewIntent(Intent paramIntent)
  {
    super.onNewIntent(paramIntent);
    Log.i("ApolloPlayerActivity", "onNewIntent");
    Apollo.Instance.HandleCallback(paramIntent);
  }
  
  protected void onPause()
  {
    super.onPause();
    Apollo.Instance.OnPause();
  }
  
  protected void onResume()
  {
    super.onResume();
    Apollo.Instance.OnPause();
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    Log.i("tagApolloPlayerActivity", "onSaveInstanceState");
  }
  
  public void setAppInfo(Object paramObject)
  {
    this.info = paramObject;
  }
}
