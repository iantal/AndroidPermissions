package com.prime31;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.os.Bundle;
import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Iterator;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;
import org.scribe.builder.ServiceBuilder;
import org.scribe.builder.api.TwitterApi.SSL;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Token;
import org.scribe.model.Verb;
import org.scribe.model.Verifier;
import org.scribe.oauth.OAuthService;

public class TwitterPlugin
{
  private static TwitterPlugin _instance;
  private static final String apiUploadUrlPrefix = "http://upload.twitter.com";
  private static final String apiUrlPrefix = "https://api.twitter.com";
  public static final String callbackUrlPrefix = "twitterplugin";
  private Token _accessToken;
  public Activity _activity;
  private Token _requestToken;
  private OAuthService _service;
  private TwitterSession _session;
  private Field _unityPlayerActivityField;
  private Class<?> _unityPlayerClass;
  private Method _unitySendMessageMethod;
  
  public TwitterPlugin()
  {
    try
    {
      this._unityPlayerClass = Class.forName("com.unity3d.player.UnityPlayer");
      this._unityPlayerActivityField = this._unityPlayerClass.getField("currentActivity");
      this._unitySendMessageMethod = this._unityPlayerClass.getMethod("UnitySendMessage", new Class[] { String.class, String.class, String.class });
      return;
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      Log.i("Prime31", "could not find UnityPlayer class: " + localClassNotFoundException.getMessage());
      return;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      Log.i("Prime31", "could not find currentActivity field: " + localNoSuchFieldException.getMessage());
      return;
    }
    catch (Exception localException)
    {
      Log.i("Prime31", "unkown exception occurred locating UnityPlayer.currentActivity: " + localException.getMessage());
    }
  }
  
  private void UnitySendMessage(String paramString1, String paramString2, String paramString3)
  {
    if (this._unitySendMessageMethod != null) {
      try
      {
        this._unitySendMessageMethod.invoke(null, new Object[] { paramString1, paramString2, paramString3 });
        return;
      }
      catch (IllegalArgumentException paramString1)
      {
        Log.i("Prime31", "could not find UnitySendMessage method: " + paramString1.getMessage());
        return;
      }
      catch (IllegalAccessException paramString1)
      {
        Log.i("Prime31", "could not find UnitySendMessage method: " + paramString1.getMessage());
        return;
      }
      catch (InvocationTargetException paramString1)
      {
        Log.i("Prime31", "could not find UnitySendMessage method: " + paramString1.getMessage());
        return;
      }
    }
    Log.i("Prime31", "UnitySendMessage: " + paramString1 + ", " + paramString2 + ", " + paramString3);
  }
  
  private void continueLoginWithVerifier(final String paramString)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        Log.i("Prime31", "continuing login with verifier");
        try
        {
          Object localObject = new Verifier(paramString);
          Log.i("Prime31", "Fetching access token");
          TwitterPlugin.this._accessToken = TwitterPlugin.this._service.getAccessToken(TwitterPlugin.this._requestToken, (Verifier)localObject);
          Log.i("Prime31", "Got access token. preparing request to verify_credentials");
          localObject = new OAuthRequest(Verb.GET, "https://api.twitter.com/1/account/verify_credentials.json");
          TwitterPlugin.this._service.signRequest(TwitterPlugin.this._accessToken, (OAuthRequest)localObject);
          localObject = ((OAuthRequest)localObject).send();
          return;
        }
        catch (IllegalArgumentException localIllegalArgumentException)
        {
          try
          {
            Log.i("Prime31", "credentials verified. getting body");
            localObject = new JSONObject(((Response)localObject).getBody()).getString("name");
            TwitterPlugin.this._session.storeAccessToken(TwitterPlugin.this._accessToken, (String)localObject);
            TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidSucceed", (String)localObject);
            return;
          }
          catch (JSONException localJSONException)
          {
            TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidFail", localJSONException.getMessage());
          }
          localIllegalArgumentException = localIllegalArgumentException;
          TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidFail", localIllegalArgumentException.getMessage());
          return;
        }
        catch (Exception localException)
        {
          TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidFail", localException.getMessage());
          return;
        }
      }
    }).start();
  }
  
  private Activity getActivity()
  {
    if (this._unityPlayerActivityField != null) {
      try
      {
        Activity localActivity = (Activity)this._unityPlayerActivityField.get(this._unityPlayerClass);
        return localActivity;
      }
      catch (Exception localException)
      {
        Log.i("Prime31", "error getting currentActivity: " + localException.getMessage());
      }
    }
    return this._activity;
  }
  
  public static TwitterPlugin instance()
  {
    if (_instance == null) {
      _instance = new TwitterPlugin();
    }
    return _instance;
  }
  
  private void performMultipartRequestInternal(String paramString, Bundle paramBundle, byte[] paramArrayOfByte)
  {
    try
    {
      paramString = new OAuthRequest(Verb.POST, "http://upload.twitter.com" + paramString);
      paramString.addHeader("Content-Type", "multipart/form-data; boundary=" + "---------------------------14737809831466499882746641449");
      paramString.addHeader("Connection", "Keep-Alive");
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      localByteArrayOutputStream.write(("--" + "---------------------------14737809831466499882746641449" + "\r\n").getBytes());
      localByteArrayOutputStream.write("Content-Disposition: attachment; name=\"media[]\"; filename=\"screenshot.png\"\r\n".getBytes());
      localByteArrayOutputStream.write("Content-Type: application/octet-stream\r\n\r\n".getBytes());
      localByteArrayOutputStream.write(paramArrayOfByte);
      localByteArrayOutputStream.write("\r\n".getBytes());
      localByteArrayOutputStream.write(("--" + "---------------------------14737809831466499882746641449" + "\r\n").getBytes());
      localByteArrayOutputStream.write("Content-Disposition: form-data; name=\"status\"\r\n\r\n".getBytes());
      localByteArrayOutputStream.write(paramBundle.getString("status").getBytes());
      localByteArrayOutputStream.write("\r\n".getBytes());
      localByteArrayOutputStream.write(("--" + "---------------------------14737809831466499882746641449" + "--\r\n").getBytes());
      paramString.addPayload(localByteArrayOutputStream.toByteArray());
      this._service.signRequest(this._accessToken, paramString);
      UnitySendMessage("TwitterAndroidManager", "requestSucceeded", paramString.send().getBody());
      return;
    }
    catch (Exception paramString)
    {
      paramString = paramString.getMessage();
      if (paramString == null) {}
    }
    for (;;)
    {
      UnitySendMessage("TwitterAndroidManager", "requestFailed", paramString);
      return;
      paramString = "Error performing request";
    }
  }
  
  private void performRequestInternal(String paramString1, String paramString2, Bundle paramBundle)
  {
    try
    {
      String str;
      if (paramString1.compareToIgnoreCase("get") == 0)
      {
        paramString1 = Verb.GET;
        str = paramString2;
        if (!paramString2.startsWith("/")) {
          str = "/" + paramString2;
        }
        paramString1 = new OAuthRequest(paramString1, "https://api.twitter.com" + str);
        if (paramBundle != null) {
          paramString2 = paramBundle.keySet().iterator();
        }
      }
      for (;;)
      {
        if (!paramString2.hasNext())
        {
          this._service.signRequest(this._accessToken, paramString1);
          UnitySendMessage("TwitterAndroidManager", "requestSucceeded", paramString1.send().getBody());
          return;
          paramString1 = Verb.POST;
          break;
        }
        str = (String)paramString2.next();
        paramString1.addQuerystringParameter(str, paramBundle.getString(str));
      }
      UnitySendMessage("TwitterAndroidManager", "requestFailed", paramString1);
    }
    catch (Exception paramString1)
    {
      paramString1 = paramString1.getMessage();
      if (paramString1 == null) {}
    }
    for (;;)
    {
      return;
      paramString1 = "Error performing request";
    }
  }
  
  private void showLoginDialog(final String paramString)
  {
    if (isLoggedIn())
    {
      UnitySendMessage("TwitterAndroidManager", "loginDidSucceed", this._session.getUsername());
      return;
    }
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Object localObject = new TwitterDialog.DialogListener()
        {
          public void onComplete(String paramAnonymous2String)
          {
            int i = 0;
            Log.i("Prime31", "login complete. fetching oauth_verifier");
            for (;;)
            {
              int j;
              int k;
              try
              {
                paramAnonymous2String = paramAnonymous2String.replace("twitterplugin", "http");
                j = 0;
                localObject = new URL(paramAnonymous2String).getQuery();
                paramAnonymous2String = null;
                localObject = ((String)localObject).split("&");
                k = localObject.length;
              }
              catch (MalformedURLException paramAnonymous2String)
              {
                Object localObject;
                String[] arrayOfString;
                paramAnonymous2String.printStackTrace();
                return;
              }
              if (i != 0)
              {
                TwitterPlugin.this.continueLoginWithVerifier(paramAnonymous2String);
                return;
                arrayOfString = localObject[i].split("=");
                if (URLDecoder.decode(arrayOfString[0]).equals("oauth_verifier"))
                {
                  paramAnonymous2String = URLDecoder.decode(arrayOfString[1]);
                  i = 1;
                  Log.i("Prime31", "found verifier");
                  continue;
                }
                i += 1;
              }
              else
              {
                TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidFail", "cancelled");
                return;
              }
              if (i >= k) {
                i = j;
              }
            }
          }
          
          public void onError(String paramAnonymous2String)
          {
            TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidFail", paramAnonymous2String);
          }
        };
        Log.i("Prime31", "prepping login dialog with url: " + paramString);
        localObject = new TwitterDialog(TwitterPlugin.this.getActivity(), paramString, (TwitterDialog.DialogListener)localObject);
        ((TwitterDialog)localObject).setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymous2DialogInterface)
          {
            TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "loginDidFail", "cancelled");
          }
        });
        ((TwitterDialog)localObject).show();
      }
    });
  }
  
  public void getFollowers()
  {
    performRequest("get", "/1/statuses/followers.json", null);
  }
  
  public void getHomeTimeline()
  {
    performRequest("get", "/1/statuses/home_timeline.json", null);
  }
  
  public void init(final String paramString1, final String paramString2)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        Log.i("Prime31", "initializing Twitter service");
        TwitterPlugin.this._session = new TwitterSession(TwitterPlugin.this.getActivity());
        TwitterPlugin.this._accessToken = TwitterPlugin.this._session.getAccessToken();
        TwitterPlugin.this._service = new ServiceBuilder().provider(TwitterApi.SSL.class).apiKey(paramString1).apiSecret(paramString2).callback("twitterplugin://connect").build();
        try
        {
          if (!TwitterPlugin.this.isLoggedIn()) {
            TwitterPlugin.this._requestToken = TwitterPlugin.this._service.getRequestToken();
          }
          TwitterPlugin.this.UnitySendMessage("TwitterAndroidManager", "twitterInitialized", "");
          Log.i("Prime31", "initialized Twitter service. got requestToken");
          return;
        }
        catch (Exception localException)
        {
          for (;;)
          {
            Log.i("Prime31", "error getting token: " + localException.getMessage());
          }
        }
      }
    }).start();
  }
  
  public boolean isLoggedIn()
  {
    return this._accessToken != null;
  }
  
  public void logout()
  {
    this._session.resetAccessToken();
    this._service = null;
    this._accessToken = null;
    this._requestToken = null;
  }
  
  public void performRequest(final String paramString1, final String paramString2, final Bundle paramBundle)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        TwitterPlugin.this.performRequestInternal(paramString1, paramString2, paramBundle);
      }
    }).start();
  }
  
  public void postUpdate(String paramString)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("status", paramString);
    performRequest("post", "/1/statuses/update.json", localBundle);
  }
  
  public void postUpdateWithImage(final String paramString, final byte[] paramArrayOfByte)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        Bundle localBundle = new Bundle();
        localBundle.putString("status", paramString);
        TwitterPlugin.this.performMultipartRequestInternal("/1/statuses/update_with_media.json", localBundle, paramArrayOfByte);
      }
    }).start();
  }
  
  public void showLoginDialog()
  {
    if (this._service == null)
    {
      Log.i("Prime31", "service is null.  We can't do anything until init is called");
      return;
    }
    try
    {
      if (this._requestToken == null) {
        this._requestToken = this._service.getRequestToken();
      }
      Log.i("Prime31", "got reqeust token. showing login dialog");
      showLoginDialog(this._service.getAuthorizationUrl(this._requestToken));
      return;
    }
    catch (Exception localException)
    {
      UnitySendMessage("TwitterAndroidManager", "loginDidFail", localException.getMessage());
      Log.i("Prime31", "error getting token: " + localException.getMessage());
    }
  }
  
  public String username()
  {
    return this._session.getUsername();
  }
}
