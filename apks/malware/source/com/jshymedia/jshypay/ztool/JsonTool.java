package com.jshymedia.jshypay.ztool;

import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class JsonTool
{
  public JsonTool() {}
  
  private static Object a(Field paramField, Class paramClass, Object paramObject, String paramString)
  {
    return a(paramField, paramClass, paramObject, paramString, true);
  }
  
  private static Object a(Field paramField, Class paramClass, Object paramObject, String paramString, boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (paramField = paramString + toUpperCaseFirstOne(paramField.getName());; paramField = paramString + toLowerCaseFirstOne(paramField.getName())) {
      try
      {
        paramField = paramClass.getMethod(paramField, new Class[0]).invoke(paramObject, new Object[0]);
        return paramField;
      }
      catch (NoSuchMethodException paramField)
      {
        paramField.printStackTrace();
        return null;
      }
      catch (SecurityException paramField)
      {
        for (;;)
        {
          paramField.printStackTrace();
        }
      }
      catch (IllegalAccessException paramField)
      {
        for (;;)
        {
          paramField.printStackTrace();
        }
      }
      catch (IllegalArgumentException paramField)
      {
        for (;;)
        {
          paramField.printStackTrace();
        }
      }
      catch (InvocationTargetException paramField)
      {
        for (;;)
        {
          paramField.printStackTrace();
        }
      }
    }
  }
  
  public static Collection getListModeFromJson(String paramString, Class paramClass, Collection paramCollection)
  {
    try
    {
      paramString = new JSONArray(paramString);
      int i = 0;
      for (;;)
      {
        int j = paramString.length();
        if (i >= j) {
          return paramCollection;
        }
        try
        {
          paramCollection.add(getSingleModeFromJson(paramString.getJSONObject(i).toString(), paramClass));
          i += 1;
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            if (paramClass.equals(String.class)) {
              paramCollection.add(paramString.getString(i));
            }
          }
        }
      }
      return paramCollection;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static Map getMapFromJson(String paramString, Map paramMap, Class paramClass)
  {
    try
    {
      paramString = new JSONObject(paramString);
      Iterator localIterator = paramString.keys();
      for (;;)
      {
        if (!localIterator.hasNext()) {
          return paramMap;
        }
        String str = (String)localIterator.next();
        paramMap.put(str, getSingleModeFromJson(paramString.get(str).toString(), paramClass));
      }
      return paramMap;
    }
    catch (JSONException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static Object getSingleModeFromJson(String paramString, Class paramClass)
  {
    for (;;)
    {
      try
      {
        localJSONObject = new JSONObject(paramString);
        localObject1 = paramClass.newInstance();
      }
      catch (IllegalAccessException paramString)
      {
        JSONObject localJSONObject;
        Iterator localIterator;
        Object localObject2;
        String str;
        Object localObject3;
        Object localObject4;
        Class localClass;
        localObject1 = null;
        continue;
      }
      catch (InstantiationException paramString)
      {
        localObject1 = null;
        continue;
      }
      catch (JSONException paramClass)
      {
        Object localObject1 = null;
        continue;
      }
      try
      {
        localIterator = localJSONObject.keys();
        if (!localIterator.hasNext()) {
          return localObject1;
        }
        localObject2 = (String)localIterator.next();
        str = localJSONObject.getString((String)localObject2);
      }
      catch (JSONException paramClass)
      {
        try
        {
          localObject2 = paramClass.getDeclaredField((String)localObject2);
          ((Field)localObject2).setAccessible(true);
          localObject3 = ((Field)localObject2).getGenericType().toString();
          try
          {
            if ((!"int".equals(localObject3)) && (!"class java.lang.Integer".equals(localObject3))) {
              continue;
            }
            ((Field)localObject2).set(localObject1, Integer.valueOf(str));
          }
          catch (NumberFormatException localNumberFormatException)
          {
            localNumberFormatException.printStackTrace();
          }
        }
        catch (NoSuchFieldException localNoSuchFieldException) {}
        paramClass = paramClass;
        paramClass.printStackTrace();
        System.out.println("!" + paramString);
        return localObject1;
        if (("long".equals(localObject3)) || ("class java.lang.Integer".equals(localObject3)))
        {
          ((Field)localObject2).set(localObject1, Long.valueOf(localNumberFormatException));
          continue;
        }
      }
      catch (InstantiationException paramString)
      {
        paramString.printStackTrace();
        return localObject1;
        if (("short".equals(localObject3)) || ("class java.lang.Short".equals(localObject3)))
        {
          ((Field)localObject2).set(localObject1, Short.valueOf(localNumberFormatException));
          continue;
        }
      }
      catch (IllegalAccessException paramString)
      {
        paramString.printStackTrace();
        return localObject1;
      }
      if (("float".equals(localObject3)) || ("class java.lang.Float".equals(localObject3)))
      {
        ((Field)localObject2).set(localObject1, Float.valueOf(localNumberFormatException));
      }
      else if (("double".equals(localObject3)) || ("class java.lang.Double".equals(localObject3)))
      {
        ((Field)localObject2).set(localObject1, Double.valueOf(localNumberFormatException));
      }
      else if (("byte".equals(localObject3)) || ("class java.lang.Byte".equals(localObject3)))
      {
        ((Field)localObject2).set(localObject1, Byte.valueOf(localNumberFormatException));
      }
      else if (("boolean".equals(localObject3)) || ("class java.lang.Boolean".equals(localObject3)))
      {
        ((Field)localObject2).set(localObject1, Boolean.valueOf(localNumberFormatException));
      }
      else if ("class java.lang.String".equals(localObject3))
      {
        ((Field)localObject2).set(localObject1, localNumberFormatException);
      }
      else if (("char".equals(localObject3)) || ("class java.lang.Short".equals(localObject3)))
      {
        ((Field)localObject2).set(localObject1, Character.valueOf(localNumberFormatException.charAt(0)));
      }
      else if ((((Field)localObject2).getGenericType() instanceof ParameterizedType))
      {
        localObject4 = ((Field)localObject2).getType();
        localObject3 = (ParameterizedType)((Field)localObject2).getGenericType();
        localClass = (Class)localObject3.getActualTypeArguments()[0];
        localObject4 = ((Class)localObject4).newInstance();
        if ((localObject4 instanceof Collection))
        {
          ((Field)localObject2).set(localObject1, getListModeFromJson(localNumberFormatException, localClass, (Collection)localObject4));
        }
        else if (((localObject4 instanceof Map)) && (localClass.equals(String.class)))
        {
          localObject3 = (Class)localObject3.getActualTypeArguments()[1];
          ((Field)localObject2).set(localObject1, getMapFromJson(localNumberFormatException, (Map)localObject4, (Class)localObject3));
        }
      }
      else
      {
        ((Field)localObject2).set(localObject1, getSingleModeFromJson(localNumberFormatException, ((Field)localObject2).getType()));
      }
    }
  }
  
  public static String objectToJson(Object paramObject)
  {
    return objectToJson(paramObject, true);
  }
  
  public static String objectToJson(Object paramObject, boolean paramBoolean)
  {
    JSONObject localJSONObject = new JSONObject();
    Class localClass = paramObject.getClass();
    if ((paramObject instanceof String)) {
      return (String)paramObject;
    }
    Field[] arrayOfField = localClass.getDeclaredFields();
    for (;;)
    {
      int i;
      try
      {
        int j = arrayOfField.length;
        i = 0;
        if (i < j) {
          continue;
        }
      }
      catch (JSONException paramObject)
      {
        Field localField;
        String str;
        Object localObject2;
        Object localObject3;
        paramObject.printStackTrace();
        continue;
        boolean bool = localJSONException instanceof Map;
        if (!bool) {
          continue;
        }
        try
        {
          localJSONObject.put(str, new JSONObject(objectsToJson((Map)localJSONException)));
        }
        catch (Exception localException) {}
        localJSONObject.put(str, localException);
      }
      return localJSONObject.toString();
      localField = arrayOfField[i];
      if (!Modifier.isStatic(localField.getModifiers()))
      {
        str = localField.getName();
        bool = "boolean".equals(localField.getGenericType().toString());
        if ((bool) && (paramBoolean))
        {
          try
          {
            Object localObject1 = localField.get(paramObject);
            if ((!(localObject1 instanceof Object)) || ((localObject1 instanceof Integer)) || ((localObject1 instanceof Character)) || ((localObject1 instanceof Short)) || ((localObject1 instanceof Float)) || ((localObject1 instanceof Byte)) || ((localObject1 instanceof Long)) || ((localObject1 instanceof Double)) || ((localObject1 instanceof Boolean)) || ((localObject1 instanceof String)) || ((localObject1 instanceof Collection)) || ((localObject1 instanceof Map))) {
              continue;
            }
            localJSONObject.put(str, new JSONObject(objectToJson(localObject1).toString()));
          }
          catch (IllegalAccessException localIllegalAccessException1)
          {
            if (str.indexOf("is") == -1)
            {
              localObject2 = a(localField, localClass, paramObject, "is");
              continue;
            }
            localObject2 = a(localField, localClass, paramObject, "", false);
            continue;
          }
        }
        else
        {
          try
          {
            localObject2 = localField.get(paramObject);
          }
          catch (IllegalAccessException localIllegalAccessException2)
          {
            localObject3 = a(localField, localClass, paramObject, "get");
          }
          continue;
        }
        bool = localObject3 instanceof Collection;
        if (bool) {
          try
          {
            localJSONObject.put(str, new JSONArray(objectsToJson((Collection)localObject3)));
          }
          catch (JSONException localJSONException)
          {
            localJSONException.printStackTrace();
          }
        }
      }
      i += 1;
    }
  }
  
  public static String objectsToJson(Collection paramCollection)
  {
    JSONArray localJSONArray = new JSONArray();
    paramCollection = paramCollection.iterator();
    for (;;)
    {
      if (!paramCollection.hasNext()) {
        return localJSONArray.toString();
      }
      Object localObject = paramCollection.next();
      try
      {
        localJSONArray.put(new JSONObject(objectToJson(localObject)));
      }
      catch (JSONException localJSONException)
      {
        localJSONArray.put(objectToJson(localObject));
      }
    }
  }
  
  public static String objectsToJson(Map paramMap)
  {
    JSONObject localJSONObject = new JSONObject();
    Iterator localIterator = paramMap.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localJSONObject.toString();
      }
      Object localObject = localIterator.next();
      String str = objectToJson(localObject);
      localObject = objectToJson(paramMap.get(localObject));
      try
      {
        localObject = new JSONObject((String)localObject);
        localJSONObject.put(str.toString(), localObject);
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
      }
    }
  }
  
  public static String objectsToJson(Object[] paramArrayOfObject)
  {
    JSONArray localJSONArray = new JSONArray();
    int i = paramArrayOfObject.length - 1;
    for (;;)
    {
      if (i < 0) {
        return localJSONArray.toString();
      }
      try
      {
        localJSONArray.put(new JSONObject(objectToJson(paramArrayOfObject[i])));
        i -= 1;
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          localJSONException.printStackTrace();
        }
      }
    }
  }
  
  public static String toJson(Object paramObject)
  {
    if ((paramObject instanceof Collection)) {
      return objectsToJson((Collection)paramObject);
    }
    if ((paramObject instanceof Map)) {
      return objectsToJson((Map)paramObject);
    }
    if ((paramObject instanceof Object[])) {
      return objectsToJson((Object[])paramObject);
    }
    return objectToJson(paramObject);
  }
  
  public static String toLowerCaseFirstOne(String paramString)
  {
    if (Character.isLowerCase(paramString.charAt(0))) {
      return paramString;
    }
    return Character.toLowerCase(paramString.charAt(0)) + paramString.substring(1);
  }
  
  public static String toUpperCaseFirstOne(String paramString)
  {
    if (Character.isUpperCase(paramString.charAt(0))) {
      return paramString;
    }
    return Character.toUpperCase(paramString.charAt(0)) + paramString.substring(1);
  }
}
