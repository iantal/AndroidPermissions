package com.jshymedia.jshypay.ztool;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.widget.TextView;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class Zlog
{
  public static final int FILEMODE = 0;
  public static final int HANDLE_WHAT_UPDATE_TV = 0;
  public static final int SYSMODE = 1;
  private static boolean a = true;
  private static final Calendar b = Calendar.getInstance();
  private static Handler c = new a(Looper.getMainLooper());
  public static TextView textView;
  
  public Zlog() {}
  
  private static void a(File paramFile, String paramString)
  {
    if (paramFile.length() > 102400L) {}
    for (;;)
    {
      try
      {
        localBufferedReader = new BufferedReader(new FileReader(paramFile));
        i = 0;
        if (i < 100) {
          continue;
        }
        localByteArrayOutputStream = new ByteArrayOutputStream();
        if (localBufferedReader.ready()) {
          continue;
        }
        ZFileManager.writeFileFromByte(localByteArrayOutputStream.toByteArray(), paramFile);
        localByteArrayOutputStream.close();
        localBufferedReader.close();
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        BufferedReader localBufferedReader;
        int i;
        ByteArrayOutputStream localByteArrayOutputStream;
        String str;
        localFileNotFoundException.printStackTrace();
        continue;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        continue;
      }
      ZFileManager.writeFileFromByte(paramString.getBytes(), paramFile, true);
      return;
      localBufferedReader.readLine();
      i += 1;
      continue;
      str = localBufferedReader.readLine();
      if (str != null)
      {
        localByteArrayOutputStream.write(str.getBytes());
        localByteArrayOutputStream.write("\r\n".getBytes());
      }
    }
  }
  
  public static void printTextView(String paramString)
  {
    try
    {
      if ((a) && (textView != null))
      {
        Message localMessage = Message.obtain();
        localMessage.what = 0;
        localMessage.obj = paramString;
        c.sendMessage(localMessage);
      }
      return;
    }
    catch (Exception paramString) {}
  }
  
  public static void syso(String paramString)
  {
    writeLog(null, "syso", "System.out", paramString, 1);
  }
  
  public static void writeLog(Context paramContext, String paramString1, String paramString2, String paramString3, int paramInt)
  {
    for (;;)
    {
      try
      {
        if (!a) {
          break label234;
        }
        String str = paramString1;
        if (paramString1 == null) {
          str = "default.txt";
        }
        paramString1 = new StringBuffer();
        paramString1.append(paramString2).append(" â—¢  ").append(paramString3);
        if (paramContext == null) {
          break label235;
        }
        paramContext = paramContext.getApplicationContext().getApplicationInfo().packageName;
        paramString1.append("_").append(paramContext);
        b.clear();
        b.setTime(new Date(System.currentTimeMillis()));
        paramContext = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss").format(b.getTime());
        paramString1.append("_").append(paramContext).append("\r\n");
        paramContext = paramString1.toString();
        switch (paramInt)
        {
        case 0: 
          if ("mounted".equals(Environment.getExternalStorageState()))
          {
            paramInt = 1;
            if (paramInt == 0) {
              break label217;
            }
            paramString1 = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);
            if (!paramString1.exists()) {
              paramString1.mkdir();
            }
            a(new File(paramString1, str), paramContext);
            return;
          }
          break;
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
      paramInt = 0;
      continue;
      label217:
      System.out.println("sdcard can't write");
      return;
      Log.i("Zlog", paramContext);
      return;
      label234:
      return;
      label235:
      paramContext = "";
    }
  }
}
