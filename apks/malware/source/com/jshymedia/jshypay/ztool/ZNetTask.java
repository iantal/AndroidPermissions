package com.jshymedia.jshypay.ztool;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.UUID;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

public class ZNetTask
{
  public static final int NET_METHOD_GET = 0;
  public static final int NET_METHOD_POST = 1;
  public static final int NET_UPDATA = 3;
  private String a;
  private String b;
  private String c;
  private int d = 10000;
  private StringBuffer e;
  private int f = -111;
  private String g;
  private long h;
  private HttpURLConnection i;
  private ZProgressListener j;
  private ZProgressChanger k;
  private File l;
  private boolean m = false;
  private InputStream n;
  private byte[] o;
  private String p = UUID.randomUUID().toString();
  
  public ZNetTask(String paramString1, String paramString2, String paramString3, ZProgressListener paramZProgressListener)
  {
    this.a = paramString1;
    this.b = paramString2;
    this.c = paramString3;
    this.j = paramZProgressListener;
    this.e = new StringBuffer();
    this.k = new ZProgressChanger(paramZProgressListener, null, null, 0L);
  }
  
  public ZNetTask(String paramString1, String paramString2, String paramString3, ZProgressListener paramZProgressListener, File paramFile)
  {
    this(paramString1, paramString2, paramString3, paramZProgressListener);
    this.l = paramFile;
  }
  
  private static LinkedList a(String paramString)
  {
    LinkedList localLinkedList = new LinkedList();
    if (paramString == null) {
      return localLinkedList;
    }
    paramString = paramString.split("&");
    int i2 = paramString.length;
    int i1 = 0;
    while (i1 < i2)
    {
      String[] arrayOfString = paramString[i1].split("=");
      if ((arrayOfString.length == 2) && (!arrayOfString[0].equals("")) && (!arrayOfString[1].equals(""))) {}
      try
      {
        localLinkedList.add(new BasicNameValuePair(URLEncoder.encode(arrayOfString[0], "utf-8"), URLEncoder.encode(arrayOfString[1], "utf-8")));
        i1 += 1;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        for (;;)
        {
          localUnsupportedEncodingException.printStackTrace();
        }
      }
    }
  }
  
  private void a(HttpURLConnection paramHttpURLConnection)
  {
    try
    {
      this.f = paramHttpURLConnection.getResponseCode();
      this.g = paramHttpURLConnection.getContentEncoding();
      this.h = paramHttpURLConnection.getContentLength();
      this.n = paramHttpURLConnection.getInputStream();
      this.m = true;
      return;
    }
    catch (IOException paramHttpURLConnection)
    {
      paramHttpURLConnection.printStackTrace();
      this.e.append(paramHttpURLConnection.getMessage());
    }
  }
  
  private static LinkedList b(String paramString)
  {
    LinkedList localLinkedList = new LinkedList();
    if (paramString == null) {}
    for (;;)
    {
      return localLinkedList;
      paramString = paramString.split("&");
      int i2 = paramString.length;
      int i1 = 0;
      while (i1 < i2)
      {
        String[] arrayOfString = paramString[i1].split("\\|");
        if ((arrayOfString.length == 2) && (!arrayOfString[0].equals("")) && (!arrayOfString[1].equals(""))) {
          localLinkedList.add(new BasicNameValuePair(arrayOfString[0], arrayOfString[1]));
        }
        i1 += 1;
      }
    }
  }
  
  public static byte[] getMsg(String paramString)
  {
    return new ZNetTask(paramString, null, null, null).getTaskBytes(0);
  }
  
  public static String getStr(String paramString)
  {
    return getStr(paramString, "utf-8");
  }
  
  public static String getStr(String paramString1, String paramString2)
  {
    paramString1 = getMsg(paramString1);
    if (paramString1 == null) {
      return null;
    }
    try
    {
      paramString1 = new String(paramString1, paramString2);
      return paramString1;
    }
    catch (UnsupportedEncodingException paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public void cancel()
  {
    if (this.k != null) {
      this.k.cancel();
    }
  }
  
  public long getContentLenght()
  {
    return this.h;
  }
  
  public String getEncode()
  {
    return this.g;
  }
  
  public StringBuffer getErrorInfo()
  {
    return this.e;
  }
  
  public int getResponseCode()
  {
    return this.f;
  }
  
  public byte[] getTaskBytes(int paramInt)
  {
    if (this.o != null) {
      return this.o;
    }
    InputStream localInputStream = getTaskInputStream(paramInt);
    if (localInputStream == null) {
      return null;
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    this.k.setMaxLenght(this.h);
    this.k.setInputStream(localInputStream);
    this.k.setOutputStream(localByteArrayOutputStream);
    this.k.start();
    this.o = localByteArrayOutputStream.toByteArray();
    this.k.clear();
    this.i.disconnect();
    return this.o;
  }
  
  public InputStream getTaskInputStream(int paramInt)
  {
    if (this.m) {
      return this.n;
    }
    Object localObject3;
    Object localObject4;
    switch (paramInt)
    {
    case 2: 
    default: 
    case 0: 
      for (;;)
      {
        return this.n;
        try
        {
          localObject3 = a(this.b);
          if (((LinkedList)localObject3).size() > 0)
          {
            Object localObject1 = new StringBuffer();
            ((StringBuffer)localObject1).append(this.a).append("?");
            localObject3 = ((LinkedList)localObject3).iterator();
            if (!((Iterator)localObject3).hasNext())
            {
              localObject1 = ((StringBuffer)localObject1).substring(0, ((StringBuffer)localObject1).length() - 1);
              this.i = ((HttpURLConnection)new URL((String)localObject1).openConnection());
              this.i.setConnectTimeout(this.d);
              this.i.setDoInput(true);
              this.i.setRequestMethod("GET");
              localObject1 = b(this.c).iterator();
              if (((Iterator)localObject1).hasNext()) {
                break label284;
              }
              a(this.i);
            }
          }
        }
        catch (MalformedURLException localMalformedURLException)
        {
          for (;;)
          {
            localMalformedURLException.printStackTrace();
            this.e.append(localMalformedURLException.getMessage());
            break;
            localObject4 = (NameValuePair)((Iterator)localObject3).next();
            localMalformedURLException.append(((NameValuePair)localObject4).getName()).append("=").append(((NameValuePair)localObject4).getValue()).append("&");
          }
        }
        catch (IOException localIOException)
        {
          for (;;)
          {
            localIOException.printStackTrace();
            this.e.append(localIOException.getMessage());
            break;
            String str = this.a;
            continue;
            localObject3 = (NameValuePair)str.next();
            this.i.addRequestProperty(((NameValuePair)localObject3).getName(), ((NameValuePair)localObject3).getValue());
          }
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
        }
      }
    case 1: 
      label284:
      this.i = ((HttpURLConnection)new URL(this.a).openConnection());
      this.i.setConnectTimeout(this.d);
      this.i.setDoInput(true);
      this.i.setDoOutput(true);
      this.i.setRequestMethod("POST");
      localObject2 = b(this.c).iterator();
      label393:
      if (!((Iterator)localObject2).hasNext())
      {
        this.i.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        localObject2 = new DataOutputStream(this.i.getOutputStream());
        localObject4 = a(this.b);
        if (((LinkedList)localObject4).size() > 0)
        {
          localObject3 = new StringBuffer();
          localObject4 = ((LinkedList)localObject4).iterator();
        }
      }
      for (;;)
      {
        if (!((Iterator)localObject4).hasNext())
        {
          ((DataOutputStream)localObject2).writeBytes(((StringBuffer)localObject3).substring(0, ((StringBuffer)localObject3).length() - 1));
          a(this.i);
          break;
          localObject3 = (NameValuePair)((Iterator)localObject2).next();
          this.i.addRequestProperty(((NameValuePair)localObject3).getName(), ((NameValuePair)localObject3).getValue());
          break label393;
        }
        NameValuePair localNameValuePair = (NameValuePair)((Iterator)localObject4).next();
        ((StringBuffer)localObject3).append(localNameValuePair.getName()).append("=").append(localNameValuePair.getValue()).append("&");
      }
    }
    this.i = ((HttpURLConnection)new URL(this.a).openConnection());
    this.i.setConnectTimeout(this.d);
    this.i.setDoInput(true);
    this.i.setDoOutput(true);
    this.i.setUseCaches(false);
    this.i.setRequestMethod("POST");
    this.i.setRequestProperty("Connection", "Keep-Alive");
    this.i.setRequestProperty("Charset", "UTF-8");
    this.i.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + this.p);
    Object localObject2 = b(this.c).iterator();
    for (;;)
    {
      if (!((Iterator)localObject2).hasNext())
      {
        localObject2 = new DataOutputStream(this.i.getOutputStream());
        ((DataOutputStream)localObject2).writeBytes("--" + this.p + "\r\n");
        ((DataOutputStream)localObject2).writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"" + URLEncoder.encode(this.l.getName(), "UTF-8") + "\"\r\n");
        ((DataOutputStream)localObject2).writeBytes("\r\n");
        localObject3 = new FileInputStream(this.l);
        this.k.setInputStream((InputStream)localObject3);
        this.k.setOutputStream((OutputStream)localObject2);
        this.k.setMaxLenght(this.l.length());
        this.k.start();
        ((DataOutputStream)localObject2).writeBytes("\r\n--" + this.p + "--\r\n");
        this.k.clear();
        this.k.clearLinsteners();
        a(this.i);
        break;
      }
      localObject3 = (NameValuePair)((Iterator)localObject2).next();
      this.i.addRequestProperty(((NameValuePair)localObject3).getName(), ((NameValuePair)localObject3).getValue());
    }
  }
  
  public String getTaskStr(int paramInt)
  {
    Object localObject = getTaskBytes(paramInt);
    if (localObject != null) {
      try
      {
        localObject = new String((byte[])localObject, "utf-8");
        return localObject;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        localUnsupportedEncodingException.printStackTrace();
      }
    }
    return null;
  }
  
  public void setContentLenght(long paramLong)
  {
    this.h = paramLong;
  }
  
  public void setEncode(String paramString)
  {
    this.g = paramString;
  }
  
  public void setResponseCode(int paramInt)
  {
    this.f = paramInt;
  }
  
  public final String toString()
  {
    return "ZNetTask [url=" + this.a + ", params=" + this.b + ", header=" + this.c + ", timeOut=" + this.d + ", errorInfo=" + this.e + ", responseCode=" + this.f + ", encode=" + this.g + ", contentLenght=" + this.h + ", conn=" + this.i + ", zpl=" + this.j + ", zpc=" + this.k + "]";
  }
  
  public void updataProgessLinstener(ZProgressListener paramZProgressListener, boolean paramBoolean)
  {
    if (this.k != null)
    {
      if (this.k.isCancel()) {
        this.k.setCancel(false);
      }
      this.k.setZProgressLinstener(paramZProgressListener, paramBoolean);
    }
  }
}
