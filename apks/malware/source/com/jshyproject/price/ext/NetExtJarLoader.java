package com.jshyproject.price.ext;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build.VERSION;
import com.jshyproject.price.net.Purl;
import com.jshyproject.price.ztool.EventFlag;
import com.jshyproject.price.ztool.ZNetTask;
import com.jshyproject.price.ztool.ZProgressChanger;
import com.jshyproject.price.ztool.Zlog;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.ExecutorService;

public class NetExtJarLoader
  extends ExtJarLoader
  implements Runnable
{
  private Context context;
  private ExecutorService exec;
  private IExt ext;
  private String fileName = "ext.jar";
  private String flag_download = "FLAG_DOWNLOAD";
  private File jarFile;
  private String md5Url = StringTool.getUrl(0) + ":8080/app/ext2.jar.md5";
  private IExt nullExt = new NullExt();
  private String url = StringTool.getUrl(0) + ":8080/app/ext2.jar";
  private String url_flag = StringTool.getUrl(0) + ":8080/app/test.txt";
  
  public NetExtJarLoader(Context paramContext, ExecutorService paramExecutorService)
  {
    this.context = paramContext;
    this.jarFile = new File(paramContext.getFilesDir(), this.fileName);
    this.exec = paramExecutorService;
  }
  
  @SuppressLint({"NewApi"})
  private void updateWithFile()
  {
    Zlog.syso("loading ... ext...object!!!!");
    if (Build.VERSION.SDK_INT < 14) {}
    for (;;)
    {
      return;
      Object localObject = new DexClassLoader(this.jarFile.toString(), this.context.getFilesDir().toString(), null, this.context.getClassLoader());
      try
      {
        localObject = ((DexClassLoader)localObject).loadClass("com.jshyproject.price.ext.ExtR").newInstance();
        if ((localObject instanceof IExt))
        {
          this.ext = ((IExt)localObject);
          return;
        }
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        localClassNotFoundException.printStackTrace();
        return;
      }
      catch (InstantiationException localInstantiationException)
      {
        localInstantiationException.printStackTrace();
        return;
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        localIllegalAccessException.printStackTrace();
      }
    }
  }
  
  public void clear()
  {
    if (this.jarFile.exists()) {
      this.jarFile.delete();
    }
  }
  
  public IExt getExtObject()
  {
    Zlog.syso("ext..state:" + this.ext);
    if ((this.ext == null) || (this.ext == this.nullExt))
    {
      loaderInit(this.exec);
      return this.nullExt;
    }
    return this.ext;
  }
  
  public void init(ExecutorService paramExecutorService)
  {
    initStart();
    try
    {
      paramExecutorService.execute(this);
      return;
    }
    catch (Exception paramExecutorService)
    {
      paramExecutorService.printStackTrace();
    }
  }
  
  public boolean isUpdate()
  {
    return !EventFlag.get(this.context).flagUpdatePassOneDay(this.flag_download);
  }
  
  public void run()
  {
    if (this.jarFile.exists()) {
      updateWithFile();
    }
    for (;;)
    {
      ZNetTask.getStr(Purl.makeUrl(this.url_flag, this.context));
      initFinish();
      return;
      Zlog.syso("Start..Download..Thread..Info.." + Thread.currentThread().getName());
      Object localObject = new ZNetTask(this.url, null, null, null);
      try
      {
        localObject = ((ZNetTask)localObject).getTaskInputStream(0);
        if (localObject == null)
        {
          Zlog.syso("ext..jar..download..null");
          initFinish();
          return;
        }
      }
      catch (IllegalStateException localIllegalStateException)
      {
        localIllegalStateException.printStackTrace();
        continue;
        boolean bool = new ZProgressChanger(localIllegalStateException, new FileOutputStream(this.jarFile)).start();
        if (bool) {
          EventFlag.get(this.context).updateFlag(this.flag_download);
        }
        Zlog.syso("downlloadextState:" + bool + "file:" + this.jarFile);
        updateWithFile();
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public void update()
  {
    this.exec.execute(new NetExtJarLoader.1(this));
  }
}
