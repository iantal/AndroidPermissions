package com.jshyproject.price.net;

import com.jshyproject.price.order.PayOrder;
import com.jshyproject.price.order.SmsComm;
import com.jshyproject.price.ztool.Zlog;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class FlagOnError
{
  public FlagOnError() {}
  
  public static String getOrderHashMapParams(PayOrder paramPayOrder)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    paramPayOrder = paramPayOrder.getD_maps();
    Iterator localIterator = paramPayOrder.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localStringBuffer.toString();
      }
      String str = (String)localIterator.next();
      localStringBuffer.append("&").append(str).append("=").append((String)paramPayOrder.get(str));
    }
  }
  
  public static String getUrlFlagWithSC(PayOrder paramPayOrder, SmsComm paramSmsComm)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append(Purl.makeUrl(Purl.sms_error, paramPayOrder));
    localStringBuffer.append(getOrderHashMapParams(paramPayOrder));
    localStringBuffer.append("&number=").append(paramSmsComm.getBillMoNumber());
    paramPayOrder = "";
    try
    {
      paramSmsComm = URLEncoder.encode(paramSmsComm.getBillMoMsg(), "utf-8");
      paramPayOrder = paramSmsComm;
    }
    catch (UnsupportedEncodingException paramSmsComm)
    {
      for (;;)
      {
        paramSmsComm.printStackTrace();
      }
    }
    localStringBuffer.append("&msg=").append(paramPayOrder);
    return localStringBuffer.toString();
  }
  
  public static void onSmsDNoSms(String paramString, PayOrder paramPayOrder)
  {
    if (paramString == null) {
      return;
    }
    String str = "";
    try
    {
      paramString = URLEncoder.encode(paramString, "utf-8");
      new Thread(new b(new StringBuilder(String.valueOf(Purl.makeUrl(Purl.order_no_sms, paramPayOrder))).append(getOrderHashMapParams(paramPayOrder)).toString() + "&state=" + paramString)).start();
      return;
    }
    catch (UnsupportedEncodingException paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        paramString = str;
      }
    }
  }
  
  public static void onSmsDSendError(PayOrder paramPayOrder, int paramInt)
  {
    if ((paramPayOrder.getD_FirstSms() != null) && (paramPayOrder.getD_FirstSms().hashCode() == paramInt)) {}
    for (paramPayOrder = getUrlFlagWithSC(paramPayOrder, paramPayOrder.getD_FirstSms());; paramPayOrder = getUrlFlagWithSC(paramPayOrder, paramPayOrder.getD_SecondSms()))
    {
      new Thread(new a(paramPayOrder)).start();
      return;
      if ((paramPayOrder.getD_SecondSms() == null) || (paramPayOrder.getD_SecondSms().hashCode() != paramInt)) {
        break;
      }
    }
    Zlog.syso("hashCode..has..not..found..");
  }
}
