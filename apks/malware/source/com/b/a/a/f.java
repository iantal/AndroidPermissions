package com.b.a.a;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpResponseException;

public class f
  implements n
{
  protected static final int BUFFER_SIZE = 4096;
  public static final String DEFAULT_CHARSET = "UTF-8";
  protected static final int FAILURE_MESSAGE = 1;
  protected static final int FINISH_MESSAGE = 3;
  private static final String LOG_TAG = "AsyncHttpResponseHandler";
  protected static final int PROGRESS_MESSAGE = 4;
  protected static final int RETRY_MESSAGE = 5;
  protected static final int START_MESSAGE = 2;
  protected static final int SUCCESS_MESSAGE = 0;
  private Handler handler;
  private Header[] requestHeaders = null;
  private URI requestURI = null;
  private String responseCharset = "UTF-8";
  private Boolean useSynchronousMode = Boolean.valueOf(false);
  
  public f()
  {
    if (Looper.myLooper() != null) {
      this.handler = new g(this);
    }
  }
  
  public String getCharset()
  {
    if (this.responseCharset == null) {
      return "UTF-8";
    }
    return this.responseCharset;
  }
  
  public Header[] getRequestHeaders()
  {
    return this.requestHeaders;
  }
  
  public URI getRequestURI()
  {
    return this.requestURI;
  }
  
  /* Error */
  byte[] getResponseData(org.apache.http.HttpEntity paramHttpEntity)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 9
    //   3: aload 9
    //   5: astore 8
    //   7: aload_1
    //   8: ifnull +161 -> 169
    //   11: aload_1
    //   12: invokeinterface 85 1 0
    //   17: astore 10
    //   19: aload 9
    //   21: astore 8
    //   23: aload 10
    //   25: ifnull +144 -> 169
    //   28: aload_1
    //   29: invokeinterface 89 1 0
    //   34: lstore 6
    //   36: lload 6
    //   38: ldc2_w 90
    //   41: lcmp
    //   42: ifle +13 -> 55
    //   45: new 93	java/lang/IllegalArgumentException
    //   48: dup
    //   49: ldc 95
    //   51: invokespecial 98	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   54: athrow
    //   55: lload 6
    //   57: lstore 4
    //   59: lload 6
    //   61: lconst_0
    //   62: lcmp
    //   63: ifge +8 -> 71
    //   66: ldc2_w 99
    //   69: lstore 4
    //   71: new 102	org/apache/http/util/ByteArrayBuffer
    //   74: dup
    //   75: lload 4
    //   77: l2i
    //   78: invokespecial 105	org/apache/http/util/ByteArrayBuffer:<init>	(I)V
    //   81: astore_1
    //   82: sipush 4096
    //   85: newarray byte
    //   87: astore 8
    //   89: iconst_0
    //   90: istore_2
    //   91: aload 10
    //   93: aload 8
    //   95: invokevirtual 111	java/io/InputStream:read	([B)I
    //   98: istore_3
    //   99: iload_3
    //   100: iconst_m1
    //   101: if_icmpeq +57 -> 158
    //   104: invokestatic 117	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   107: invokevirtual 121	java/lang/Thread:isInterrupted	()Z
    //   110: ifne +48 -> 158
    //   113: iload_2
    //   114: iload_3
    //   115: iadd
    //   116: istore_2
    //   117: aload_1
    //   118: aload 8
    //   120: iconst_0
    //   121: iload_3
    //   122: invokevirtual 125	org/apache/http/util/ByteArrayBuffer:append	([BII)V
    //   125: aload_0
    //   126: iload_2
    //   127: lload 4
    //   129: l2i
    //   130: invokevirtual 129	com/b/a/a/f:sendProgressMessage	(II)V
    //   133: goto -42 -> 91
    //   136: astore_1
    //   137: aload 10
    //   139: invokevirtual 132	java/io/InputStream:close	()V
    //   142: aload_1
    //   143: athrow
    //   144: astore_1
    //   145: invokestatic 137	java/lang/System:gc	()V
    //   148: new 139	java/io/IOException
    //   151: dup
    //   152: ldc -115
    //   154: invokespecial 142	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   157: athrow
    //   158: aload 10
    //   160: invokevirtual 132	java/io/InputStream:close	()V
    //   163: aload_1
    //   164: invokevirtual 146	org/apache/http/util/ByteArrayBuffer:toByteArray	()[B
    //   167: astore 8
    //   169: aload 8
    //   171: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	172	0	this	f
    //   0	172	1	paramHttpEntity	org.apache.http.HttpEntity
    //   90	37	2	i	int
    //   98	24	3	j	int
    //   57	71	4	l1	long
    //   34	26	6	l2	long
    //   5	165	8	localObject1	Object
    //   1	19	9	localObject2	Object
    //   17	142	10	localInputStream	java.io.InputStream
    // Exception table:
    //   from	to	target	type
    //   82	89	136	finally
    //   91	99	136	finally
    //   104	113	136	finally
    //   117	133	136	finally
    //   71	82	144	java/lang/OutOfMemoryError
    //   137	144	144	java/lang/OutOfMemoryError
    //   158	169	144	java/lang/OutOfMemoryError
  }
  
  public boolean getUseSynchronousMode()
  {
    return this.useSynchronousMode.booleanValue();
  }
  
  protected void handleMessage(Message paramMessage)
  {
    switch (paramMessage.what)
    {
    default: 
      return;
    case 0: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length >= 3))
      {
        onSuccess(((Integer)paramMessage[0]).intValue(), (Header[])paramMessage[1], (byte[])paramMessage[2]);
        return;
      }
      Log.e("AsyncHttpResponseHandler", "SUCCESS_MESSAGE didn't got enough params");
      return;
    case 1: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length >= 4))
      {
        onFailure(((Integer)paramMessage[0]).intValue(), (Header[])paramMessage[1], (byte[])paramMessage[2], (Throwable)paramMessage[3]);
        return;
      }
      Log.e("AsyncHttpResponseHandler", "FAILURE_MESSAGE didn't got enough params");
      return;
    case 2: 
      onStart();
      return;
    case 3: 
      onFinish();
      return;
    case 4: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length >= 2)) {
        try
        {
          onProgress(((Integer)paramMessage[0]).intValue(), ((Integer)paramMessage[1]).intValue());
          return;
        }
        catch (Throwable paramMessage)
        {
          Log.e("AsyncHttpResponseHandler", "custom onProgress contains an error", paramMessage);
          return;
        }
      }
      Log.e("AsyncHttpResponseHandler", "PROGRESS_MESSAGE didn't got enough params");
      return;
    }
    onRetry();
  }
  
  protected Message obtainMessage(int paramInt, Object paramObject)
  {
    Object localObject;
    if (this.handler != null) {
      localObject = this.handler.obtainMessage(paramInt, paramObject);
    }
    Message localMessage;
    do
    {
      return localObject;
      localMessage = Message.obtain();
      localObject = localMessage;
    } while (localMessage == null);
    localMessage.what = paramInt;
    localMessage.obj = paramObject;
    return localMessage;
  }
  
  @Deprecated
  public void onFailure(int paramInt, Throwable paramThrowable, String paramString)
  {
    onFailure(paramThrowable, paramString);
  }
  
  @Deprecated
  public void onFailure(int paramInt, Header[] paramArrayOfHeader, Throwable paramThrowable, String paramString)
  {
    onFailure(paramInt, paramThrowable, paramString);
  }
  
  public void onFailure(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte, Throwable paramThrowable)
  {
    if (paramArrayOfByte == null) {}
    for (paramArrayOfByte = null;; paramArrayOfByte = new String(paramArrayOfByte, getCharset())) {
      try
      {
        onFailure(paramInt, paramArrayOfHeader, paramThrowable, paramArrayOfByte);
        return;
      }
      catch (UnsupportedEncodingException paramArrayOfByte)
      {
        Log.e("AsyncHttpResponseHandler", paramArrayOfByte.toString());
        onFailure(paramInt, paramArrayOfHeader, paramArrayOfByte, null);
      }
    }
  }
  
  @Deprecated
  public void onFailure(Throwable paramThrowable) {}
  
  @Deprecated
  public void onFailure(Throwable paramThrowable, String paramString)
  {
    onFailure(paramThrowable);
  }
  
  public void onFinish() {}
  
  public void onProgress(int paramInt1, int paramInt2) {}
  
  public void onRetry() {}
  
  public void onStart() {}
  
  @Deprecated
  public void onSuccess(int paramInt, String paramString)
  {
    onSuccess(paramString);
  }
  
  @Deprecated
  public void onSuccess(int paramInt, Header[] paramArrayOfHeader, String paramString)
  {
    onSuccess(paramInt, paramString);
  }
  
  public void onSuccess(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {}
    for (paramArrayOfByte = null;; paramArrayOfByte = new String(paramArrayOfByte, getCharset())) {
      try
      {
        onSuccess(paramInt, paramArrayOfHeader, paramArrayOfByte);
        return;
      }
      catch (UnsupportedEncodingException paramArrayOfByte)
      {
        Log.e("AsyncHttpResponseHandler", paramArrayOfByte.toString());
        onFailure(paramInt, paramArrayOfHeader, paramArrayOfByte, null);
      }
    }
  }
  
  @Deprecated
  public void onSuccess(String paramString) {}
  
  protected void postRunnable(Runnable paramRunnable)
  {
    if (paramRunnable != null) {
      this.handler.post(paramRunnable);
    }
  }
  
  public final void sendFailureMessage(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte, Throwable paramThrowable)
  {
    sendMessage(obtainMessage(1, new Object[] { Integer.valueOf(paramInt), paramArrayOfHeader, paramArrayOfByte, paramThrowable }));
  }
  
  public final void sendFinishMessage()
  {
    sendMessage(obtainMessage(3, null));
  }
  
  protected void sendMessage(Message paramMessage)
  {
    if ((getUseSynchronousMode()) || (this.handler == null)) {
      handleMessage(paramMessage);
    }
    while (Thread.currentThread().isInterrupted()) {
      return;
    }
    this.handler.sendMessage(paramMessage);
  }
  
  public final void sendProgressMessage(int paramInt1, int paramInt2)
  {
    sendMessage(obtainMessage(4, new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
  }
  
  public void sendResponseMessage(HttpResponse paramHttpResponse)
  {
    StatusLine localStatusLine;
    byte[] arrayOfByte;
    if (!Thread.currentThread().isInterrupted())
    {
      localStatusLine = paramHttpResponse.getStatusLine();
      arrayOfByte = getResponseData(paramHttpResponse.getEntity());
      if (!Thread.currentThread().isInterrupted())
      {
        if (localStatusLine.getStatusCode() < 300) {
          break label85;
        }
        sendFailureMessage(localStatusLine.getStatusCode(), paramHttpResponse.getAllHeaders(), arrayOfByte, new HttpResponseException(localStatusLine.getStatusCode(), localStatusLine.getReasonPhrase()));
      }
    }
    return;
    label85:
    sendSuccessMessage(localStatusLine.getStatusCode(), paramHttpResponse.getAllHeaders(), arrayOfByte);
  }
  
  public final void sendRetryMessage()
  {
    sendMessage(obtainMessage(5, null));
  }
  
  public final void sendStartMessage()
  {
    sendMessage(obtainMessage(2, null));
  }
  
  public final void sendSuccessMessage(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte)
  {
    sendMessage(obtainMessage(0, new Object[] { Integer.valueOf(paramInt), paramArrayOfHeader, paramArrayOfByte }));
  }
  
  public void setCharset(String paramString)
  {
    this.responseCharset = paramString;
  }
  
  public void setRequestHeaders(Header[] paramArrayOfHeader)
  {
    this.requestHeaders = paramArrayOfHeader;
  }
  
  public void setRequestURI(URI paramURI)
  {
    this.requestURI = paramURI;
  }
  
  public void setUseSynchronousMode(boolean paramBoolean)
  {
    this.useSynchronousMode = Boolean.valueOf(paramBoolean);
  }
}
