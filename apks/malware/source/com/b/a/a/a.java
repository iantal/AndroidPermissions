package com.b.a.a;

import android.content.Context;
import android.util.Log;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.http.HttpEntity;
import org.apache.http.HttpVersion;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

public class a
{
  private int a = 10;
  private int b = 10000;
  private final DefaultHttpClient c;
  private final HttpContext d;
  private ThreadPoolExecutor e;
  private final Map f;
  private final Map g;
  private boolean h = true;
  
  public a()
  {
    this(false, 80, 443);
  }
  
  public a(SchemeRegistry paramSchemeRegistry)
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    ConnManagerParams.setTimeout(localBasicHttpParams, this.b);
    ConnManagerParams.setMaxConnectionsPerRoute(localBasicHttpParams, new ConnPerRouteBean(this.a));
    ConnManagerParams.setMaxTotalConnections(localBasicHttpParams, 10);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, this.b);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, this.b);
    HttpConnectionParams.setTcpNoDelay(localBasicHttpParams, true);
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, 8192);
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
    HttpProtocolParams.setUserAgent(localBasicHttpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", new Object[] { "1.4.4" }));
    paramSchemeRegistry = new ThreadSafeClientConnManager(localBasicHttpParams, paramSchemeRegistry);
    this.e = ((ThreadPoolExecutor)Executors.newFixedThreadPool(10));
    this.f = new WeakHashMap();
    this.g = new HashMap();
    this.d = new SyncBasicHttpContext(new BasicHttpContext());
    this.c = new DefaultHttpClient(paramSchemeRegistry, localBasicHttpParams);
    this.c.addRequestInterceptor(new b(this));
    this.c.addResponseInterceptor(new c(this));
    this.c.setHttpRequestRetryHandler(new o(5, 1500));
  }
  
  public a(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    this(a(paramBoolean, paramInt1, paramInt2));
  }
  
  public static String a(boolean paramBoolean, String paramString, k paramK)
  {
    if (paramBoolean) {
      paramString = paramString.replace(" ", "%20");
    }
    for (;;)
    {
      String str = paramString;
      if (paramK != null)
      {
        paramK = paramK.b();
        if (!paramString.contains("?")) {
          str = paramString + "?" + paramK;
        }
      }
      else
      {
        return str;
      }
      return paramString + "&" + paramK;
    }
  }
  
  private HttpEntity a(k paramK, n paramN)
  {
    HttpEntity localHttpEntity = null;
    if (paramK != null) {}
    try
    {
      localHttpEntity = paramK.a(paramN);
      return localHttpEntity;
    }
    catch (Throwable paramK)
    {
      if (paramN != null)
      {
        paramN.sendFailureMessage(0, null, null, paramK);
        return null;
      }
      paramK.printStackTrace();
    }
    return null;
  }
  
  private HttpEntityEnclosingRequestBase a(HttpEntityEnclosingRequestBase paramHttpEntityEnclosingRequestBase, HttpEntity paramHttpEntity)
  {
    if (paramHttpEntity != null) {
      paramHttpEntityEnclosingRequestBase.setEntity(paramHttpEntity);
    }
    return paramHttpEntityEnclosingRequestBase;
  }
  
  private static SchemeRegistry a(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    if (paramBoolean) {
      Log.d("AsyncHttpClient", "Beware! Using the fix is insecure, as it doesn't verify SSL certificates.");
    }
    int i = paramInt1;
    if (paramInt1 < 1)
    {
      i = 80;
      Log.d("AsyncHttpClient", "Invalid HTTP port number specified, defaulting to 80");
    }
    paramInt1 = paramInt2;
    if (paramInt2 < 1)
    {
      paramInt1 = 443;
      Log.d("AsyncHttpClient", "Invalid HTTPS port number specified, defaulting to 443");
    }
    if (paramBoolean) {}
    for (SSLSocketFactory localSSLSocketFactory = h.b();; localSSLSocketFactory = SSLSocketFactory.getSocketFactory())
    {
      SchemeRegistry localSchemeRegistry = new SchemeRegistry();
      localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), i));
      localSchemeRegistry.register(new Scheme("https", localSSLSocketFactory, paramInt1));
      return localSchemeRegistry;
    }
  }
  
  public j a(Context paramContext, String paramString, k paramK, n paramN)
  {
    return a(this.c, this.d, new HttpGet(a(this.h, paramString, paramK)), null, paramN, paramContext);
  }
  
  public j a(Context paramContext, String paramString1, HttpEntity paramHttpEntity, String paramString2, n paramN)
  {
    return a(this.c, this.d, a(new HttpPost(paramString1), paramHttpEntity), paramString2, paramN, paramContext);
  }
  
  public j a(String paramString, k paramK, n paramN)
  {
    return b(null, paramString, paramK, paramN);
  }
  
  public j a(String paramString, n paramN)
  {
    return a(null, paramString, null, paramN);
  }
  
  protected j a(DefaultHttpClient paramDefaultHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, String paramString, n paramN, Context paramContext)
  {
    if (paramString != null) {
      paramHttpUriRequest.addHeader("Content-Type", paramString);
    }
    paramN.setRequestHeaders(paramHttpUriRequest.getAllHeaders());
    paramN.setRequestURI(paramHttpUriRequest.getURI());
    paramHttpUriRequest = this.e.submit(new e(paramDefaultHttpClient, paramHttpContext, paramHttpUriRequest, paramN));
    if (paramContext != null)
    {
      paramHttpContext = (List)this.f.get(paramContext);
      paramDefaultHttpClient = paramHttpContext;
      if (paramHttpContext == null)
      {
        paramDefaultHttpClient = new LinkedList();
        this.f.put(paramContext, paramDefaultHttpClient);
      }
      paramDefaultHttpClient.add(new WeakReference(paramHttpUriRequest));
    }
    return new j(paramHttpUriRequest);
  }
  
  public void a(int paramInt)
  {
    int i = paramInt;
    if (paramInt < 1000) {
      i = 10000;
    }
    this.b = i;
    HttpParams localHttpParams = this.c.getParams();
    ConnManagerParams.setTimeout(localHttpParams, this.b);
    HttpConnectionParams.setSoTimeout(localHttpParams, this.b);
    HttpConnectionParams.setConnectionTimeout(localHttpParams, this.b);
  }
  
  public void a(String paramString)
  {
    HttpProtocolParams.setUserAgent(this.c.getParams(), paramString);
  }
  
  public void a(String paramString1, String paramString2)
  {
    this.g.put(paramString1, paramString2);
  }
  
  public void a(boolean paramBoolean)
  {
    this.h = paramBoolean;
  }
  
  public j b(Context paramContext, String paramString, k paramK, n paramN)
  {
    return a(paramContext, paramString, a(paramK, paramN), null, paramN);
  }
}
