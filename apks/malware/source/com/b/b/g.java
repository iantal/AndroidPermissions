package com.b.b;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import com.b.a.b;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public class g
  implements Runnable
{
  public static File a;
  public static HashMap b = new HashMap();
  private String c;
  private File d;
  private int e = 0;
  private f f;
  private Handler g;
  private com.b.a.d h;
  private com.b.a.e i;
  private boolean j = false;
  private e k;
  private c l;
  
  public g(File paramFile1, String paramString, File paramFile2, f paramF)
  {
    this.c = paramString;
    this.d = paramFile2;
    this.f = paramF;
    a = paramFile1;
    this.g = new h(this, Looper.getMainLooper());
    this.k = new e(paramF, null, null, 0L);
  }
  
  private void f()
  {
    c();
    if ((this.d.exists()) && (!this.d.delete())) {
      return;
    }
    d localD = new d(this.c, null, null, null);
    InputStream localInputStream = localD.a(0);
    this.l = new c();
    if (this.l.a(localInputStream, this.d, localD.b(), this.f, false))
    {
      a(5);
      return;
    }
    a(8);
  }
  
  private void g()
  {
    boolean bool = false;
    c();
    Object localObject = d();
    if (localObject == null)
    {
      System.out.println("cache..read..json..null");
      return;
    }
    InputStream localInputStream;
    try
    {
      localObject = new File(new JSONObject((String)localObject).getString("file"));
      if (!((File)localObject).toString().equals(this.d.toString())) {
        com.b.a.f.a((File)localObject, this.d);
      }
      localObject = new d(this.c, null, "Range|bytes=" + this.d.length() + "-", null);
      com.b.a.h.a("cacheFile:+" + this.d.toString() + "cacheFilelenght:" + this.d.length());
      localInputStream = ((d)localObject).a(0);
      int m = ((d)localObject).a();
      com.b.a.h.a("cache-----reposeCode:" + m);
      if (m != 206) {
        if (m == 416)
        {
          a(6);
          return;
        }
      }
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
      return;
      a(9);
      return;
    }
    catch (IllegalStateException localIllegalStateException)
    {
      localIllegalStateException.printStackTrace();
      return;
    }
    if (localInputStream != null)
    {
      this.l = new c();
      bool = this.l.a(localInputStream, this.d, this.d.length() + localIllegalStateException.b(), this.f, true, this.d.length());
    }
    if (bool)
    {
      a(5);
      return;
    }
    a(8);
  }
  
  private boolean h()
  {
    Object localObject = b.keySet();
    String str = b();
    localObject = ((Set)localObject).iterator();
    do
    {
      if (!((Iterator)localObject).hasNext()) {
        return false;
      }
    } while (!((String)((Iterator)localObject).next()).equals(str));
    return true;
  }
  
  private boolean i()
  {
    return new File(a, b()).exists();
  }
  
  public int a()
  {
    return this.e;
  }
  
  public void a(int paramInt)
  {
    this.e = paramInt;
  }
  
  public void a(com.b.a.e paramE)
  {
    this.i = paramE;
  }
  
  public String b()
  {
    return b.a(this.c.getBytes());
  }
  
  public void c()
  {
    File localFile = new File(a, b());
    try
    {
      this.d.createNewFile();
      JSONObject localJSONObject = new JSONObject();
      localJSONObject.put("url", this.c);
      localJSONObject.put("file", this.d.toString());
      com.b.a.f.a(localJSONObject.toString().getBytes(), localFile);
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
      return;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
  }
  
  public String d()
  {
    Object localObject2 = null;
    Object localObject3 = new File(a, b());
    Object localObject1 = localObject2;
    if (((File)localObject3).exists())
    {
      localObject3 = com.b.a.f.a((File)localObject3, null);
      localObject1 = localObject2;
      if (localObject3 == null) {}
    }
    try
    {
      localObject1 = new JSONObject(new String((byte[])localObject3)).toString();
      return localObject1;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    return null;
  }
  
  public void e()
  {
    if (this.l != null) {
      this.l.a();
    }
  }
  
  public void run()
  {
    if (this.j) {
      this.j = false;
    }
    com.b.a.h.a("tast..run..methond..start..");
    if ((h()) && (this.l != null)) {
      this.l.a(this.f, true);
    }
    b.put(b(), this);
    if (i())
    {
      com.b.a.h.a("cache..download..");
      g();
    }
    for (;;)
    {
      if ((this.h != null) && (!this.j))
      {
        Message localMessage = Message.obtain();
        localMessage.what = 10;
        localMessage.obj = this.d;
        this.g.sendMessage(localMessage);
      }
      if ((this.i != null) && (!this.j)) {
        this.i.a(this.e, this.d);
      }
      com.b.a.h.a("task..is..over!!!" + a());
      b.remove(b());
      return;
      com.b.a.h.a("new...download");
      f();
    }
  }
  
  public String toString()
  {
    return "ZaDownloadTask [url=" + this.c + ", file=" + this.d + ", taskState=" + this.e + ", pcl=" + this.f + ", handler=" + this.g + ", mainCallback=" + this.h + ", workCallback=" + this.i + ", isCancel=" + this.j + ", zpc=" + this.k + ", fileTask=" + this.l + "]";
  }
}
