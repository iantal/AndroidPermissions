package com.ironsource.mobilcore;

import android.content.Context;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.view.ViewConfiguration;
import android.view.animation.AnimationUtils;
import android.view.animation.BounceInterpolator;
import android.view.animation.Interpolator;

final class ao
{
  private static final float t = (float)(Math.log(0.75D) / Math.log(0.9D));
  private static final float[] u = new float[101];
  private static float x;
  private static float y = 1.0F / a(1.0F);
  private int a;
  private int b;
  private int c;
  private int d;
  private int e;
  private int f;
  private int g;
  private int h;
  private int i;
  private int j;
  private int k;
  private long l;
  private int m;
  private float n;
  private float o;
  private float p;
  private boolean q = true;
  private Interpolator r;
  private boolean s;
  private float v;
  private final float w;
  
  static
  {
    float f1 = 0.0F;
    int i1 = 0;
    while (i1 <= 100)
    {
      float f4 = i1 / 100.0F;
      float f2 = 1.0F;
      float f3;
      float f5;
      for (;;)
      {
        f3 = (f2 - f1) / 2.0F + f1;
        f5 = 3.0F * f3 * (1.0F - f3);
        float f6 = ((1.0F - f3) * 0.4F + 0.6F * f3) * f5 + f3 * f3 * f3;
        if (Math.abs(f6 - f4) < 1.0E-5D) {
          break;
        }
        if (f6 > f4) {
          f2 = f3;
        } else {
          f1 = f3;
        }
      }
      u[i1] = (f3 * f3 * f3 + f5);
      i1 += 1;
    }
    u[100] = 1.0F;
    x = 8.0F;
    y = 1.0F;
  }
  
  public ao(Context paramContext, Interpolator paramInterpolator) {}
  
  private ao(Context paramContext, Interpolator paramInterpolator, boolean paramBoolean)
  {
    this.r = paramInterpolator;
    this.w = (paramContext.getResources().getDisplayMetrics().density * 160.0F);
    this.v = (ViewConfiguration.getScrollFriction() * (386.0878F * this.w));
    this.s = paramBoolean;
  }
  
  private static float a(float paramFloat)
  {
    paramFloat = x * paramFloat;
    if (paramFloat < 1.0F) {}
    for (paramFloat -= 1.0F - (float)Math.exp(-paramFloat);; paramFloat = (1.0F - (float)Math.exp(1.0F - paramFloat)) * 0.63212055F + 0.36787945F) {
      return paramFloat * y;
    }
  }
  
  public final void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    this.a = 0;
    this.q = false;
    this.m = paramInt5;
    this.l = AnimationUtils.currentAnimationTimeMillis();
    this.b = paramInt1;
    this.c = paramInt2;
    this.d = (paramInt1 + paramInt3);
    this.e = (paramInt2 + paramInt4);
    this.o = paramInt3;
    this.p = paramInt4;
    this.n = (1.0F / this.m);
  }
  
  public final boolean a()
  {
    return this.q;
  }
  
  public final int b()
  {
    return this.j;
  }
  
  public final void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    a(paramInt1, 0, paramInt3, 0, 1000);
    this.a = 2;
  }
  
  public final int c()
  {
    return this.d;
  }
  
  public final boolean d()
  {
    if (this.q) {
      return false;
    }
    int i1 = (int)(AnimationUtils.currentAnimationTimeMillis() - this.l);
    if (i1 < this.m) {
      switch (this.a)
      {
      }
    }
    for (;;)
    {
      return true;
      float f1 = i1;
      float f2 = this.n;
      f1 = new BounceInterpolator().getInterpolation(f1 * f2);
      this.j = (this.b + Math.round(this.o * f1));
      i1 = this.c;
      this.k = (Math.round(f1 * this.p) + i1);
      continue;
      f1 = i1 * this.n;
      if (this.r == null) {}
      for (f1 = a(f1);; f1 = this.r.getInterpolation(f1))
      {
        this.j = (this.b + Math.round(this.o * f1));
        i1 = this.c;
        this.k = (Math.round(f1 * this.p) + i1);
        break;
      }
      f1 = i1 / this.m;
      i1 = (int)(100.0F * f1);
      f2 = i1 / 100.0F;
      float f3 = (i1 + 1) / 100.0F;
      float f4 = u[i1];
      float f5 = u[(i1 + 1)];
      f1 = (f1 - f2) / (f3 - f2) * (f5 - f4) + f4;
      this.j = (this.b + Math.round((this.d - this.b) * f1));
      this.j = Math.min(this.j, this.g);
      this.j = Math.max(this.j, this.f);
      i1 = this.c;
      this.k = (Math.round(f1 * (this.e - this.c)) + i1);
      this.k = Math.min(this.k, this.i);
      this.k = Math.max(this.k, this.h);
      if ((this.j == this.d) && (this.k == this.e))
      {
        this.q = true;
        continue;
        this.j = this.d;
        this.k = this.e;
        this.q = true;
      }
    }
  }
  
  public final void e()
  {
    this.j = this.d;
    this.k = this.e;
    this.q = true;
  }
}
