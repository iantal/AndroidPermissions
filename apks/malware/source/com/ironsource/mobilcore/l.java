package com.ironsource.mobilcore;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.webkit.DownloadListener;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;
import java.io.File;
import org.json.JSONObject;

abstract class l
{
  protected Context a;
  protected String b;
  protected String c;
  protected String d;
  private a e;
  private WebView f;
  private WebView g;
  private BroadcastReceiver h = new BaseFlowBasedAdUnit.1(this);
  
  public l() {}
  
  protected final void a(final Activity paramActivity, final JSONObject paramJSONObject, final d paramD)
  {
    final n.a localA = n.a.a(paramJSONObject.optString("type"));
    paramD = new WebViewClient()
    {
      public final void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        super.onPageFinished(paramAnonymousWebView, paramAnonymousString);
        j.b();
        if (paramD != null) {
          paramD.a();
        }
      }
      
      public final void onReceivedError(WebView paramAnonymousWebView, int paramAnonymousInt, String paramAnonymousString1, String paramAnonymousString2)
      {
        if (paramActivity != null) {
          Toast.makeText(paramActivity, "Failed to open url", 1).show();
        }
        j.b();
        l.this.b("handleTriggeredOffer", "Error handling triggered offer");
      }
      
      public final boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        l.this.a("runOffer | shouldOverrideUrlLoading", "url:" + paramAnonymousString);
        switch (l.3.a[localA.ordinal()])
        {
        }
        do
        {
          return false;
          paramAnonymousWebView = aE.f(paramAnonymousString);
        } while (!aN.a(paramAnonymousWebView));
        aN.a(paramAnonymousWebView, l.this.c, l.this.b, paramJSONObject);
        return true;
      }
    };
    this.g.setDownloadListener(new DownloadListener()
    {
      public final void onDownloadStart(String paramAnonymousString1, String paramAnonymousString2, String paramAnonymousString3, String paramAnonymousString4, long paramAnonymousLong)
      {
        if (localA == n.a.b) {
          aN.b(paramAnonymousString1, l.this.c, l.this.b, paramJSONObject);
        }
      }
    });
    this.g.setWebViewClient(paramD);
    aN.a(paramActivity, this.g, paramJSONObject, this.c, this.b);
  }
  
  public final void a(Context paramContext)
  {
    if (a())
    {
      this.a = paramContext.getApplicationContext();
      this.e = b();
      d();
      boolean bool = aK.b(this.a);
      a("downloadFlowOrWaitForConnection", "hasInternetConnection:" + bool);
      if (bool) {
        f();
      }
    }
    else
    {
      return;
    }
    this.a.registerReceiver(this.h, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
  }
  
  protected final void a(c paramC)
  {
    a("runFlowWithAction", "action:" + paramC);
    paramC = q.b.a(this.d, this.e.c(), paramC.a());
    this.f.loadUrl(paramC);
  }
  
  protected final void a(String paramString)
  {
    a(paramString, "called");
  }
  
  protected final void a(String paramString1, String paramString2)
  {
    A.a(getClass().getSimpleName() + " , " + paramString1 + " | " + paramString2, 55);
  }
  
  protected abstract boolean a();
  
  protected abstract a b();
  
  protected final void b(String paramString1, String paramString2)
  {
    A.a(getClass().getSimpleName() + " , " + paramString1 + " | " + paramString2, 3);
  }
  
  public void c()
  {
    if (!w.a().c(this.e.b())) {
      g();
    }
  }
  
  protected void d()
  {
    a("initMembers", "called");
    Object localObject = new File(this.a.getFilesDir().getPath(), this.e.d());
    if (!((File)localObject).exists()) {
      ((File)localObject).mkdirs();
    }
    this.d = ((File)localObject).getAbsolutePath();
    w.a().a(this.e.b());
    this.f = new WebView(this.a);
    localObject = new aF(this.f, this.e.e());
    aE.a(this.f, (WebChromeClient)localObject);
    this.g = new WebView(this.a);
    aE.a(this.g, null);
    aE.a(this.f);
  }
  
  protected void e() {}
  
  protected void f()
  {
    String str = aE.a(this.e.a());
    a("downloadAndProcessFlow", "flowUrl:" + str);
    aO.a(str, new q.b(this.f, this.d, this.e.c(), this.e.f().a(), new b()));
  }
  
  protected void g()
  {
    b("refreshFeed", "called");
    a(this.e.f());
  }
  
  protected static final class a
  {
    private String a;
    private String b;
    private String c;
    private aF.a d;
    private l.c e;
    
    public a(String paramString1, String paramString2, String paramString3, l.c paramC, aF.a paramA)
    {
      this.a = paramString1;
      this.b = paramString2;
      this.c = paramString3;
      this.e = paramC;
      this.d = paramA;
    }
    
    public final String a()
    {
      return this.a;
    }
    
    public final String b()
    {
      return this.c;
    }
    
    public final String c()
    {
      return this.a + ".html";
    }
    
    public final String d()
    {
      return this.b;
    }
    
    public final aF.a e()
    {
      return this.d;
    }
    
    public final l.c f()
    {
      return this.e;
    }
  }
  
  protected final class b
    extends aE.a
  {
    protected b() {}
    
    public final void a(String paramString, int paramInt)
    {
      l.this.b("processingHttpError", "fileName:" + paramString + " statusCode:" + paramInt);
      l.this.e();
    }
    
    public final void a(String paramString, Exception paramException)
    {
      A.a("processingHttpError | " + String.format("failed to get flow %s, %s", new Object[] { paramString, paramException.getMessage() }), 3);
      l.this.e();
    }
  }
  
  public static abstract interface c
  {
    public abstract String a();
  }
  
  public static abstract interface d
  {
    public abstract void a();
  }
}
