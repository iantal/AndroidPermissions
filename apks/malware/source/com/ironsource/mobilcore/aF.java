package com.ironsource.mobilcore;

import android.util.Pair;
import android.webkit.ConsoleMessage;
import android.webkit.ConsoleMessage.MessageLevel;
import android.webkit.JsPromptResult;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONObject;

class aF
  extends WebChromeClient
{
  private WebView a;
  private a b;
  private b c;
  
  public aF(WebView paramWebView)
  {
    this.a = paramWebView;
  }
  
  public aF(WebView paramWebView, a paramA)
  {
    this.a = paramWebView;
    a(paramA);
  }
  
  public final void a(a paramA)
  {
    this.b = paramA;
    this.c = new b((byte)0);
    this.c.a(Arrays.asList(this.b.getClass().getMethods()));
  }
  
  public boolean onConsoleMessage(ConsoleMessage paramConsoleMessage)
  {
    if (paramConsoleMessage.messageLevel() == ConsoleMessage.MessageLevel.ERROR) {
      aE.b(this.a.getContext(), getClass().getName(), "JS error: " + paramConsoleMessage.message() + " -- from line " + paramConsoleMessage.lineNumber() + " in " + paramConsoleMessage.sourceId());
    }
    return super.onConsoleMessage(paramConsoleMessage);
  }
  
  public boolean onJsPrompt(WebView paramWebView, String paramString1, String paramString2, String paramString3, JsPromptResult paramJsPromptResult)
  {
    paramJsPromptResult.confirm();
    paramJsPromptResult = null;
    int i = 0;
    label334:
    for (;;)
    {
      paramString1 = paramJsPromptResult;
      try
      {
        if (i < this.c.size())
        {
          if (!paramString2.equals(((Method)((Pair)this.c.get(i)).first).getName())) {
            break label334;
          }
          paramString1 = (Method)((Pair)this.c.get(i)).first;
        }
        Object localObject = new JSONObject(paramString3);
        paramJsPromptResult = ((JSONObject)localObject).optJSONObject("callback");
        localObject = ((JSONObject)localObject).optJSONArray("params");
        Object[] arrayOfObject = new Object[((JSONArray)localObject).length()];
        i = 0;
        while (i < ((JSONArray)localObject).length())
        {
          arrayOfObject[i] = ((JSONArray)localObject).opt(i);
          i += 1;
        }
        if (paramString1 != null)
        {
          localObject = paramString1.invoke(this.b, arrayOfObject);
          if (paramJsPromptResult != null)
          {
            paramJsPromptResult = paramJsPromptResult.optString("method");
            paramString1 = "";
            if (localObject != null) {
              paramString1 = localObject.toString();
            }
            A.a("javascript:" + paramJsPromptResult + "(" + paramString1 + ");", 55);
            this.a.loadUrl("javascript:" + paramJsPromptResult + "(" + paramString1 + ");");
          }
        }
      }
      catch (Exception paramString1)
      {
        for (;;)
        {
          paramString1 = "JSBridge Error: " + paramString1.getLocalizedMessage() + " (Method: " + paramString2 + ", params: " + paramString3 + ")";
          A.a(paramString1, 2);
          aE.b(paramWebView.getContext(), getClass().getName(), paramString1);
        }
        i += 1;
      }
      return true;
    }
  }
  
  public static abstract interface a {}
  
  private final class b
    extends ArrayList<Pair<Method, ArrayList<String>>>
  {
    private static final long serialVersionUID = 1L;
    
    private b() {}
    
    public final void a(Collection<? extends Method> paramCollection)
    {
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext())
      {
        Method localMethod = (Method)paramCollection.next();
        ArrayList localArrayList = new ArrayList();
        Class[] arrayOfClass = localMethod.getParameterTypes();
        int j = arrayOfClass.length;
        int i = 0;
        while (i < j)
        {
          localArrayList.add(arrayOfClass[i].getName());
          i += 1;
        }
        add(new Pair(localMethod, localArrayList));
      }
    }
  }
}
