package com.ironsource.mobilcore;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.NinePatch;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.NinePatchDrawable;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import org.json.JSONException;
import org.json.JSONObject;

final class aw
{
  private Context a;
  private b b;
  private b c;
  private b d;
  private b e;
  private b f;
  private int g;
  private int h;
  private int i;
  private a j;
  private a k;
  private a l;
  private a m;
  private a n;
  private a o;
  private a p;
  private a q;
  private a r;
  private a s;
  private int t;
  private int u;
  
  public aw(Context paramContext, JSONObject paramJSONObject)
    throws JSONException
  {
    this.a = paramContext;
    paramContext = paramJSONObject.optJSONObject("textColors");
    if (paramContext != null)
    {
      this.b = new b(paramContext.optJSONObject("titleText"));
      this.c = new b(paramContext.optJSONObject("itemText"));
      this.d = new b(paramContext.optJSONObject("textShadow"));
      this.e = new b(paramContext.optJSONObject("searchHintColor"));
      this.f = new b(paramContext.optJSONObject("searchInputColor"));
    }
    Object localObject = paramJSONObject.optJSONObject("colors");
    String str;
    int i1;
    if (localObject != null)
    {
      paramContext = ((JSONObject)localObject).optString("miniSeparatorTopLineColor", "");
      str = ((JSONObject)localObject).optString("miniSeparatorBottomLineColor", "");
      localObject = ((JSONObject)localObject).optString("widgetButtonSeparatorColor", "");
      if (TextUtils.isEmpty(paramContext))
      {
        i1 = 0;
        this.g = i1;
        if (!TextUtils.isEmpty(str)) {
          break label447;
        }
        i1 = 0;
        label177:
        this.h = i1;
        if (!TextUtils.isEmpty((CharSequence)localObject)) {
          break label456;
        }
        i1 = i2;
        label193:
        this.i = i1;
        if (this.i != 0) {}
      }
    }
    for (this.i = this.g;; this.i = 0)
    {
      paramContext = paramJSONObject.optJSONObject("images");
      if (paramContext != null)
      {
        this.j = new a(paramContext.optJSONObject("sliderHandle"));
        this.k = new a(paramContext.optJSONObject("searchIcon"));
      }
      paramContext = paramJSONObject.optJSONObject("backgrounds");
      if (paramContext != null)
      {
        this.l = new a(paramContext.optJSONObject("sliderBG"));
        this.m = new a(paramContext.optJSONObject("menuTitleBG"));
        this.n = new a(paramContext.optJSONObject("widgetButtonBG"));
        this.o = new a(paramContext.optJSONObject("badgeBG"));
        this.p = new a(paramContext.optJSONObject("ironSourceWidgetsBG"));
        this.q = new a(paramContext.optJSONObject("separatorWidgetsBG"));
        this.r = new a(paramContext.optJSONObject("widgetPressedBG"));
        this.s = new a(paramContext.optJSONObject("searchBG"));
      }
      paramContext = paramJSONObject.optJSONObject("dimensions");
      if (paramContext == null) {
        break label483;
      }
      this.t = paramContext.optInt("separatorHeight", 5);
      this.u = paramContext.optInt("miniSeparatorLineHeight", 2);
      return;
      i1 = Color.parseColor(paramContext);
      break;
      label447:
      i1 = Color.parseColor(str);
      break label177;
      label456:
      i1 = Color.parseColor((String)localObject);
      break label193;
      this.g = 0;
      this.h = 0;
    }
    label483:
    this.t = 5;
    this.u = 2;
  }
  
  public final b a()
  {
    return this.b;
  }
  
  public final void a(ViewGroup paramViewGroup)
  {
    View localView;
    if (this.g != 0)
    {
      localView = new View(this.a);
      localView.setLayoutParams(new LinearLayout.LayoutParams(-1, B.a(this.a, this.u)));
      localView.setBackgroundColor(this.g);
      paramViewGroup.addView(localView);
    }
    if (this.h != 0)
    {
      localView = new View(this.a);
      localView.setLayoutParams(new LinearLayout.LayoutParams(-1, B.a(this.a, this.u)));
      localView.setBackgroundColor(this.h);
      paramViewGroup.addView(localView);
    }
  }
  
  public final void a(boolean paramBoolean, b paramB, TextView... paramVarArgs)
  {
    int i1 = 0;
    while (i1 < paramVarArgs.length)
    {
      TextView localTextView = paramVarArgs[i1];
      if (localTextView != null)
      {
        if (paramB != null) {
          localTextView.setTextColor(paramB.a(paramBoolean));
        }
        if (this.d != null) {
          localTextView.setShadowLayer(2.0F, 1.0F, 1.0F, this.d.a(paramBoolean));
        }
      }
      i1 += 1;
    }
  }
  
  public final b b()
  {
    return this.c;
  }
  
  public final int c()
  {
    return this.e.a(true);
  }
  
  public final int d()
  {
    return this.f.a(true);
  }
  
  public final int e()
  {
    return this.i;
  }
  
  public final int f()
  {
    return this.t;
  }
  
  public final int g()
  {
    return this.u;
  }
  
  public final int h()
  {
    return B.a(this.a, 12.0F);
  }
  
  public final int i()
  {
    return B.a(this.a, 9.0F);
  }
  
  public final int j()
  {
    return B.a(this.a, 6.0F);
  }
  
  public final Drawable k()
  {
    return this.j.a(this.a);
  }
  
  public final Drawable l()
  {
    return this.k.a(this.a);
  }
  
  public final Drawable m()
  {
    return this.l.a(this.a);
  }
  
  public final Drawable n()
  {
    return this.m.a(this.a);
  }
  
  public final Drawable o()
  {
    return this.n.a(this.a);
  }
  
  public final Drawable p()
  {
    return this.o.a(this.a);
  }
  
  public final Drawable q()
  {
    return this.p.a(this.a);
  }
  
  public final Drawable r()
  {
    return this.q.a(this.a);
  }
  
  public final Drawable s()
  {
    return this.r.a(this.a);
  }
  
  public final Drawable t()
  {
    return this.s.a(this.a);
  }
  
  private static final class a
  {
    private String a;
    private String b;
    
    public a(JSONObject paramJSONObject)
    {
      if (paramJSONObject == null) {
        return;
      }
      this.a = paramJSONObject.optString("type", "");
      this.b = paramJSONObject.optString("value", "");
    }
    
    public final Drawable a(Context paramContext)
    {
      if (TextUtils.isEmpty(this.b)) {}
      do
      {
        Object localObject;
        B.b localB;
        do
        {
          do
          {
            do
            {
              return null;
              if (this.a.equals("image"))
              {
                localObject = B.a(paramContext, this.b);
                return new BitmapDrawable(paramContext.getResources(), (Bitmap)localObject);
              }
              if (!this.a.equals("tile")) {
                break;
              }
              localObject = this.b;
            } while (TextUtils.isEmpty((CharSequence)localObject));
            localObject = B.a(paramContext, (String)localObject);
            paramContext = new BitmapDrawable(paramContext.getResources(), (Bitmap)localObject);
            paramContext.setTileModeX(Shader.TileMode.REPEAT);
            paramContext.setTileModeY(Shader.TileMode.REPEAT);
            return paramContext;
            if (!this.a.equals("9patch")) {
              break;
            }
            paramContext = B.a(this.b);
            localObject = paramContext.getNinePatchChunk();
          } while (!NinePatch.isNinePatchChunk((byte[])localObject));
          localB = B.b.a((byte[])localObject);
          System.gc();
        } while (localObject == null);
        return new NinePatchDrawable(paramContext, (byte[])localObject, localB.a, null);
      } while (!this.a.equals("color"));
      return new ColorDrawable(Color.parseColor(this.b));
    }
  }
  
  public static final class b
  {
    private int a;
    private int b;
    
    public b(JSONObject paramJSONObject)
    {
      if (paramJSONObject == null) {
        return;
      }
      this.a = Color.parseColor(paramJSONObject.optString("normal", ""));
      paramJSONObject = paramJSONObject.optString("pressed", "");
      if (TextUtils.isEmpty(paramJSONObject))
      {
        this.b = this.a;
        return;
      }
      this.b = Color.parseColor(paramJSONObject);
    }
    
    public final int a(boolean paramBoolean)
    {
      if (paramBoolean) {
        return this.a;
      }
      return this.b;
    }
  }
}
