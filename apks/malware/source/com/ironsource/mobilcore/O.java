package com.ironsource.mobilcore;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

final class O
  extends E
{
  private String t;
  
  public O(Context paramContext, aw paramAw, E.a paramA)
  {
    super(paramContext, paramAw, paramA);
  }
  
  private void o()
  {
    Bitmap localBitmap = B.a("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");
    this.s.setImageBitmap(localBitmap);
  }
  
  protected final void c()
  {
    this.h = new RelativeLayout(this.c);
  }
  
  protected final void c(JSONObject paramJSONObject)
  {
    super.c(paramJSONObject);
    this.t = null;
    try
    {
      JSONArray localJSONArray = paramJSONObject.optJSONArray("extra");
      if (localJSONArray != null)
      {
        int i = 0;
        while (i < localJSONArray.length())
        {
          if (localJSONArray.getJSONObject(i).getString("name").equals("cover_img"))
          {
            paramJSONObject = localJSONArray.getJSONObject(i).optString("value", null);
            if (!TextUtils.isEmpty(paramJSONObject))
            {
              this.t = aO.a(w.a().b(), paramJSONObject);
              String str = this.t;
              paramJSONObject = str;
              if (str.indexOf("file://") == 0) {
                paramJSONObject = str.substring(7);
              }
              this.t = paramJSONObject;
            }
          }
          i += 1;
        }
      }
      return;
    }
    catch (JSONException paramJSONObject) {}
  }
  
  protected final void d()
  {
    this.s = new ImageView(this.c);
    this.s.setId(j());
    this.s.setScaleType(ImageView.ScaleType.CENTER_CROP);
    Object localObject1 = new LinearLayout.LayoutParams(-1, -1);
    ((LinearLayout.LayoutParams)localObject1).gravity = 17;
    this.s.setLayoutParams((ViewGroup.LayoutParams)localObject1);
    this.p = new TextView(this.c);
    this.p.setBackgroundColor(Color.parseColor("#90000000"));
    localObject1 = new RelativeLayout.LayoutParams(-1, -2);
    ((RelativeLayout.LayoutParams)localObject1).addRule(8, this.s.getId());
    this.p.setLayoutParams((ViewGroup.LayoutParams)localObject1);
    int i = B.a(this.c, 5.0F);
    this.p.setPadding(i, i, i, i);
    this.p.setGravity(1);
    this.p.setTypeface(null, 1);
    this.p.setTextColor(-1);
    this.p.setSingleLine();
    this.p.setEllipsize(TextUtils.TruncateAt.END);
    this.p.setTextSize(2, 16.0F);
    localObject1 = new View(this.c);
    Object localObject2 = new RelativeLayout.LayoutParams(B.a(this.c, this.d.g()), -2);
    ((RelativeLayout.LayoutParams)localObject2).addRule(11);
    ((RelativeLayout.LayoutParams)localObject2).addRule(6, this.s.getId());
    ((RelativeLayout.LayoutParams)localObject2).addRule(8, this.s.getId());
    ((View)localObject1).setLayoutParams((ViewGroup.LayoutParams)localObject2);
    ((View)localObject1).setBackgroundColor(this.d.e());
    localObject2 = (ViewGroup)this.h;
    ((ViewGroup)localObject2).setClickable(true);
    ((ViewGroup)localObject2).setFocusable(true);
    ((ViewGroup)localObject2).addView(this.s);
    ((ViewGroup)localObject2).addView(this.p);
    ((ViewGroup)localObject2).addView((View)localObject1);
    a(this.d.o(), this.d.b(), new TextView[0]);
  }
  
  protected final void e()
  {
    this.p.setText(this.l);
    if (this.t == null) {}
    for (String str = this.a; !TextUtils.isEmpty(str); str = this.t)
    {
      B.a local1 = new B.a()
      {
        public final void a()
        {
          O.a(O.this);
        }
        
        public final void a(Bitmap paramAnonymousBitmap)
        {
          if (paramAnonymousBitmap != null)
          {
            paramAnonymousBitmap = B.a(O.this.c, paramAnonymousBitmap);
            O.this.s.setImageBitmap(paramAnonymousBitmap);
            return;
          }
          O.a(O.this);
        }
      };
      if (local1 != null) {
        aE.a(new B.1(local1), new String[] { str });
      }
      return;
      if (this.t == "")
      {
        o();
        return;
      }
    }
    o();
  }
}
