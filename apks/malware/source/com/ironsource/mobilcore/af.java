package com.ironsource.mobilcore;

import android.app.Activity;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View.MeasureSpec;

abstract class af
  extends ae
{
  af(Activity paramActivity, int paramInt)
  {
    super(paramActivity, paramInt);
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool = false;
    int i = paramMotionEvent.getAction() & 0xFF;
    if ((i == 0) && (this.C) && (j()))
    {
      c(0.0F);
      g();
      i();
      e(0);
    }
    if ((this.C) && (a(paramMotionEvent))) {
      bool = true;
    }
    while (this.G == 0) {
      return bool;
    }
    if ((i != 0) && (this.e)) {
      return true;
    }
    switch (i)
    {
    }
    for (;;)
    {
      if (this.l == null) {
        this.l = VelocityTracker.obtain();
      }
      this.l.addMovement(paramMotionEvent);
      return this.e;
      float f1 = paramMotionEvent.getX();
      this.f = f1;
      this.h = f1;
      f1 = paramMotionEvent.getY();
      this.g = f1;
      this.i = f1;
      if (b())
      {
        if (this.C) {}
        for (i = 8;; i = 0)
        {
          e(i);
          g();
          i();
          this.e = false;
          break;
        }
        f1 = paramMotionEvent.getX();
        float f2 = f1 - this.h;
        float f3 = Math.abs(f2);
        float f4 = paramMotionEvent.getY();
        float f5 = Math.abs(f4 - this.i);
        if ((f3 > this.b) && (f3 > f5) && (a(f2)))
        {
          e(2);
          this.e = true;
          this.h = f1;
          this.i = f4;
          continue;
          if (Math.abs(this.d) > this.A / 2) {
            a(true);
          } else {
            b(true);
          }
        }
      }
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = View.MeasureSpec.getMode(paramInt1);
    int j = View.MeasureSpec.getMode(paramInt2);
    if ((i != 1073741824) || (j != 1073741824)) {
      throw new IllegalStateException("Must measure with an exact size");
    }
    i = View.MeasureSpec.getSize(paramInt1);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (!this.B) {
      this.A = ((int)(i * 0.8F));
    }
    if (this.d == -1.0F) {
      c(this.A);
    }
    j = getChildMeasureSpec(paramInt1, 0, this.A);
    int k = getChildMeasureSpec(paramInt1, 0, paramInt2);
    this.y.measure(j, k);
    j = getChildMeasureSpec(paramInt1, 0, i);
    paramInt1 = getChildMeasureSpec(paramInt1, 0, paramInt2);
    this.z.measure(j, paramInt1);
    setMeasuredDimension(i, paramInt2);
    f();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if ((!this.C) && (this.G == 0)) {
      return false;
    }
    int i = paramMotionEvent.getAction();
    if (this.l == null) {
      this.l = VelocityTracker.obtain();
    }
    this.l.addMovement(paramMotionEvent);
    switch (i & 0xFF)
    {
    }
    for (;;)
    {
      return true;
      float f1 = paramMotionEvent.getX();
      this.f = f1;
      this.h = f1;
      f1 = paramMotionEvent.getY();
      this.g = f1;
      this.i = f1;
      if (b())
      {
        g();
        i();
        e();
        continue;
        float f2;
        if (!this.e)
        {
          f1 = paramMotionEvent.getX();
          f2 = f1 - this.h;
          float f3 = Math.abs(f2);
          float f4 = Math.abs(paramMotionEvent.getY() - this.i);
          if ((f3 > this.b) && (f3 > f4) && (a(f2)))
          {
            e(2);
            this.e = true;
            if (f1 - this.f <= 0.0F) {
              break label273;
            }
          }
        }
        label273:
        for (f1 = this.f + this.b;; f1 = this.f - this.b)
        {
          this.h = f1;
          if (!this.e) {
            break;
          }
          e();
          f1 = paramMotionEvent.getX();
          f2 = this.h;
          this.h = f1;
          b(f1 - f2);
          break;
        }
        b(paramMotionEvent);
      }
    }
  }
}
