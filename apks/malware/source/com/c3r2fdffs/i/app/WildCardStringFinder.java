package com.c3r2fdffs.i.app;

import java.util.Vector;

public class WildCardStringFinder
{
  private int charBound;
  private String[] charSegments;
  private boolean hasLeadingStar;
  private boolean hasTrailingStar;
  private boolean ignoreWildCards = false;
  private int wildCardPatternLength;
  private String wildCardPatternString;
  
  public WildCardStringFinder() {}
  
  private final boolean doesMatch(String paramString, int paramInt1, int paramInt2)
  {
    int k = paramString.length();
    if (paramInt1 > paramInt2) {
      return false;
    }
    if (this.ignoreWildCards) {
      return (paramInt2 - paramInt1 == this.wildCardPatternLength) && (this.wildCardPatternString.regionMatches(false, 0, paramString, paramInt1, this.wildCardPatternLength));
    }
    int m = this.charSegments.length;
    if ((m == 0) && ((this.hasLeadingStar) || (this.hasTrailingStar))) {
      return true;
    }
    if (paramInt1 == paramInt2) {
      return this.wildCardPatternLength == 0;
    }
    if (this.wildCardPatternLength == 0) {
      return paramInt1 == paramInt2;
    }
    int i = paramInt1;
    if (paramInt1 < 0) {
      i = 0;
    }
    int j = paramInt2;
    if (paramInt2 > k) {
      j = k;
    }
    k = i;
    if (j - this.charBound < 0) {
      return false;
    }
    paramInt2 = 0;
    String str2 = this.charSegments[0];
    int n = str2.length();
    paramInt1 = k;
    if (!this.hasLeadingStar)
    {
      if (!isExpressionMatching(paramString, i, str2, 0, n)) {
        return false;
      }
      paramInt2 = 0 + 1;
      paramInt1 = k + n;
    }
    String str1 = str2;
    k = paramInt1;
    i = paramInt2;
    if (this.charSegments.length == 1)
    {
      str1 = str2;
      k = paramInt1;
      i = paramInt2;
      if (!this.hasLeadingStar)
      {
        str1 = str2;
        k = paramInt1;
        i = paramInt2;
        if (!this.hasTrailingStar) {
          return paramInt1 == j;
        }
      }
    }
    while (i < m)
    {
      str1 = this.charSegments[i];
      paramInt1 = str1.indexOf(0);
      paramInt2 = getTextPosition(paramString, k, j, str1);
      if ((paramInt1 < 0) && (paramInt2 < 0)) {
        return false;
      }
      k = paramInt2 + str1.length();
      i += 1;
    }
    if ((!this.hasTrailingStar) && (k != j))
    {
      paramInt1 = str1.length();
      return isExpressionMatching(paramString, j - paramInt1, str1, 0, paramInt1);
    }
    return i == m;
  }
  
  private final int getTextPosition(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    int i = paramString2.length();
    paramInt1 = paramString1.indexOf(paramString2, paramInt1);
    if ((!paramString2.equals(".")) || ((paramInt1 == -1) || (paramInt1 > paramInt2 - i))) {
      return -1;
    }
    return paramInt1;
  }
  
  private boolean isExpressionMatching(String paramString1, int paramInt1, String paramString2, int paramInt2, int paramInt3)
  {
    for (;;)
    {
      if (paramInt3 <= 0) {
        return true;
      }
      int i = paramString1.charAt(paramInt1);
      int j = paramString2.charAt(paramInt2);
      if (((this.ignoreWildCards) || (j != 0)) && (j != i) && (i != j) && (i != j)) {
        return false;
      }
      paramInt3 -= 1;
      paramInt2 += 1;
      paramInt1 += 1;
    }
  }
  
  private void setWildCards()
  {
    if (this.wildCardPatternString.startsWith("*")) {
      this.hasLeadingStar = true;
    }
    if ((this.wildCardPatternString.endsWith("*")) && (this.wildCardPatternLength > 1)) {
      this.hasTrailingStar = true;
    }
    Vector localVector = new Vector();
    int i = 0;
    StringBuffer localStringBuffer = new StringBuffer();
    for (;;)
    {
      if (i >= this.wildCardPatternLength)
      {
        if (localStringBuffer.length() > 0)
        {
          localVector.addElement(localStringBuffer.toString());
          this.charBound += localStringBuffer.length();
        }
        this.charSegments = new String[localVector.size()];
        localVector.copyInto(this.charSegments);
        return;
      }
      String str = this.wildCardPatternString;
      int j = i + 1;
      char c = str.charAt(i);
      switch (c)
      {
      default: 
        localStringBuffer.append(c);
      case '*': 
        do
        {
          i = j;
          break;
        } while (localStringBuffer.length() <= 0);
        localVector.addElement(localStringBuffer.toString());
        this.charBound += localStringBuffer.length();
        localStringBuffer.setLength(0);
        i = j;
        break;
      case '?': 
        localStringBuffer.append('\000');
        i = j;
      }
    }
  }
  
  public boolean isStringMatching(String paramString1, String paramString2)
  {
    this.wildCardPatternString = paramString2;
    this.wildCardPatternLength = paramString2.length();
    setWildCards();
    return doesMatch(paramString1, 0, paramString1.length());
  }
}
