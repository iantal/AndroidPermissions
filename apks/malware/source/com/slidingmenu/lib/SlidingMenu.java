package com.slidingmenu.lib;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.os.Build.VERSION;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;

public class SlidingMenu
  extends RelativeLayout
{
  private static final int HIGH_DPI_STATUS_BAR_HEIGHT = 38;
  private static final int LOW_DPI_STATUS_BAR_HEIGHT = 19;
  private static final int MEDIUM_DPI_STATUS_BAR_HEIGHT = 25;
  public static final int TOUCHMODE_FULLSCREEN = 1;
  public static final int TOUCHMODE_MARGIN = 0;
  private CustomViewAbove mViewAbove;
  private CustomViewBehind mViewBehind;
  
  public SlidingMenu(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SlidingMenu(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public SlidingMenu(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-1, -1);
    this.mViewBehind = new CustomViewBehind(paramContext);
    addView(this.mViewBehind, localLayoutParams);
    localLayoutParams = new RelativeLayout.LayoutParams(-1, -1);
    this.mViewAbove = new CustomViewAbove(paramContext);
    addView(this.mViewAbove, localLayoutParams);
    this.mViewAbove.setCustomViewBehind2(this.mViewBehind);
    paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.SlidingMenu);
    paramInt = paramAttributeSet.getResourceId(0, -1);
    if (paramInt != -1) {
      setViewAbove(LayoutInflater.from(paramContext).inflate(paramInt, null));
    }
    paramInt = paramAttributeSet.getResourceId(1, -1);
    if (paramInt != -1) {
      setViewBehind(LayoutInflater.from(paramContext).inflate(paramInt, null));
    }
    setTouchModeAbove(paramAttributeSet.getInt(4, 0));
    setTouchModeBehind(paramAttributeSet.getInt(5, 0));
    setBehindOffset((int)paramAttributeSet.getDimension(2, 0.0F));
    setBehindScrollScale(paramAttributeSet.getFloat(3, 0.25F));
    paramInt = paramAttributeSet.getResourceId(6, -1);
    if (paramInt != -1) {
      setShadowDrawable(paramInt);
    }
    setShadowWidth((int)paramAttributeSet.getDimension(7, 0.0F));
    setFadeEnabled(paramAttributeSet.getBoolean(8, true));
    setFadeDegree(paramAttributeSet.getFloat(9, 0.5F));
  }
  
  private int getStatusBarHeight()
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)getContext().getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    switch (localDisplayMetrics.densityDpi)
    {
    default: 
      return 25;
    case 240: 
      return 38;
    case 160: 
      return 25;
    }
    return 19;
  }
  
  public int getBehindOffset()
  {
    return ((RelativeLayout.LayoutParams)this.mViewBehind.getLayoutParams()).rightMargin;
  }
  
  public float getBehindScrollScale()
  {
    return this.mViewAbove.getScrollScale();
  }
  
  public int getTouchModeAbove()
  {
    return this.mViewAbove.getTouchModeAbove();
  }
  
  public int getTouchModeBehind()
  {
    return this.mViewAbove.getTouchModeBehind();
  }
  
  public boolean isBehindShowing()
  {
    return this.mViewAbove.getCurrentItem() == 0;
  }
  
  public boolean isSlidingEnabled()
  {
    return this.mViewAbove.isSlidingEnabled();
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SlidingMenu.SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SlidingMenu.SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    if (paramParcelable.mBehindShowing)
    {
      showBehind();
      return;
    }
    showAbove();
  }
  
  public Parcelable onSaveInstanceState()
  {
    SlidingMenu.SavedState localSavedState = new SlidingMenu.SavedState(super.onSaveInstanceState());
    localSavedState.mBehindShowing = isBehindShowing();
    return localSavedState;
  }
  
  public void setBehindOffset(int paramInt)
  {
    RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)this.mViewBehind.getLayoutParams();
    int i = localLayoutParams.bottomMargin;
    int j = localLayoutParams.topMargin;
    localLayoutParams.setMargins(localLayoutParams.leftMargin, j, paramInt, i);
  }
  
  public void setBehindOffsetRes(int paramInt)
  {
    setBehindOffset((int)getContext().getResources().getDimension(paramInt));
  }
  
  public void setBehindScrollScale(float paramFloat)
  {
    this.mViewAbove.setScrollScale(paramFloat);
  }
  
  public void setFadeDegree(float paramFloat)
  {
    this.mViewAbove.setBehindFadeDegree(paramFloat);
  }
  
  public void setFadeEnabled(boolean paramBoolean)
  {
    this.mViewAbove.setBehindFadeEnabled(paramBoolean);
  }
  
  @SuppressLint({"NewApi"})
  public void setFitsSystemWindows(boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 14)
    {
      super.setFitsSystemWindows(paramBoolean);
      return;
    }
    if (paramBoolean) {}
    for (int i = getStatusBarHeight();; i = 0)
    {
      RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)this.mViewBehind.getLayoutParams();
      int j = localLayoutParams.bottomMargin;
      localLayoutParams.setMargins(localLayoutParams.leftMargin, i, localLayoutParams.rightMargin, j);
      return;
    }
  }
  
  public void setShadowDrawable(int paramInt)
  {
    this.mViewAbove.setShadowDrawable(paramInt);
  }
  
  public void setShadowWidth(int paramInt)
  {
    this.mViewAbove.setShadowWidth(paramInt);
  }
  
  public void setShadowWidthRes(int paramInt)
  {
    setShadowWidth((int)getResources().getDimension(paramInt));
  }
  
  public void setSlidingEnabled(boolean paramBoolean)
  {
    this.mViewAbove.setSlidingEnabled(paramBoolean);
  }
  
  public void setStatic(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      setSlidingEnabled(false);
      this.mViewAbove.setCustomViewBehind2(null);
      this.mViewAbove.setCurrentItem(1);
      this.mViewBehind.setCurrentItem(0);
      return;
    }
    this.mViewAbove.setCurrentItem(1);
    this.mViewBehind.setCurrentItem(1);
    this.mViewAbove.setCustomViewBehind2(this.mViewBehind);
    setSlidingEnabled(true);
  }
  
  public void setTouchModeAbove(int paramInt)
  {
    if ((paramInt != 1) && (paramInt != 0)) {
      throw new IllegalStateException("TouchMode must be set to eitherTOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN.");
    }
    this.mViewAbove.setTouchModeAbove(paramInt);
  }
  
  public void setTouchModeBehind(int paramInt)
  {
    if ((paramInt != 1) && (paramInt != 0)) {
      throw new IllegalStateException("TouchMode must be set to eitherTOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN.");
    }
    this.mViewAbove.setTouchModeBehind(paramInt);
  }
  
  public void setViewAbove(int paramInt)
  {
    setViewAbove(LayoutInflater.from(getContext()).inflate(paramInt, null));
  }
  
  public void setViewAbove(View paramView)
  {
    this.mViewAbove.setContent(paramView);
    this.mViewAbove.invalidate();
    this.mViewAbove.dataSetChanged();
    showAbove();
  }
  
  public void setViewBehind(int paramInt)
  {
    setViewBehind(LayoutInflater.from(getContext()).inflate(paramInt, null));
  }
  
  public void setViewBehind(View paramView)
  {
    this.mViewBehind.setContent(paramView);
    this.mViewBehind.invalidate();
    this.mViewBehind.dataSetChanged();
  }
  
  public void showAbove()
  {
    this.mViewAbove.setCurrentItem(1);
  }
  
  public void showBehind()
  {
    this.mViewAbove.setCurrentItem(0);
  }
}
