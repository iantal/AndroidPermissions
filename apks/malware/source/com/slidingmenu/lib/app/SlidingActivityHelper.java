package com.slidingmenu.lib.app;

import android.app.Activity;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import com.slidingmenu.lib.R.layout;
import com.slidingmenu.lib.SlidingMenu;

public class SlidingActivityHelper
{
  private Activity mActivity;
  private boolean mBroadcasting = false;
  private boolean mEnableSlide = true;
  private boolean mOnPostCreateCalled = false;
  private SlidingMenu mSlidingMenu;
  private View mViewAbove;
  private View mViewBehind;
  
  public SlidingActivityHelper(Activity paramActivity)
  {
    this.mActivity = paramActivity;
  }
  
  public View findViewById(int paramInt)
  {
    if (this.mSlidingMenu != null)
    {
      View localView = this.mSlidingMenu.findViewById(paramInt);
      if (localView != null) {
        return localView;
      }
    }
    return null;
  }
  
  public SlidingMenu getSlidingMenu()
  {
    return this.mSlidingMenu;
  }
  
  public void onCreate(Bundle paramBundle)
  {
    this.mSlidingMenu = ((SlidingMenu)LayoutInflater.from(this.mActivity).inflate(R.layout.slidingmenumain, null));
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((paramInt == 4) && (this.mSlidingMenu.isBehindShowing()))
    {
      showAbove();
      return true;
    }
    return false;
  }
  
  public void onPostCreate(Bundle paramBundle)
  {
    if ((this.mViewBehind == null) || (this.mViewAbove == null)) {
      throw new IllegalStateException("Both setBehindContentView must be called in onCreate in addition to setContentView.");
    }
    this.mOnPostCreateCalled = true;
    int i = this.mActivity.getTheme().obtainStyledAttributes(new int[] { 16842836 }).getResourceId(0, 0);
    if (this.mEnableSlide)
    {
      this.mSlidingMenu.setFitsSystemWindows(true);
      paramBundle = (ViewGroup)this.mActivity.getWindow().getDecorView();
      ViewGroup localViewGroup = (ViewGroup)paramBundle.getChildAt(0);
      localViewGroup.setBackgroundResource(i);
      paramBundle.removeView(localViewGroup);
      this.mSlidingMenu.setViewAbove(localViewGroup);
      paramBundle.addView(this.mSlidingMenu);
      return;
    }
    paramBundle = (ViewGroup)this.mViewAbove.getParent();
    if (paramBundle != null) {
      paramBundle.removeView(this.mViewAbove);
    }
    if (this.mViewAbove.getBackground() == null) {
      this.mViewAbove.setBackgroundResource(i);
    }
    this.mSlidingMenu.setViewAbove(this.mViewAbove);
    paramBundle.addView(this.mSlidingMenu, new ViewGroup.LayoutParams(-1, -1));
  }
  
  public void registerAboveContentView(View paramView, ViewGroup.LayoutParams paramLayoutParams)
  {
    if (!this.mBroadcasting) {
      this.mViewAbove = paramView;
    }
  }
  
  public void setBehindContentView(View paramView, ViewGroup.LayoutParams paramLayoutParams)
  {
    this.mViewBehind = paramView;
    this.mSlidingMenu.setViewBehind(this.mViewBehind);
  }
  
  public void setContentView(View paramView)
  {
    this.mBroadcasting = true;
    this.mActivity.setContentView(paramView);
  }
  
  public void setSlidingActionBarEnabled(boolean paramBoolean)
  {
    if (this.mOnPostCreateCalled) {
      throw new IllegalStateException("enableSlidingActionBar must be called in onCreate.");
    }
    this.mEnableSlide = paramBoolean;
  }
  
  public void showAbove()
  {
    this.mSlidingMenu.showAbove();
  }
  
  public void showBehind()
  {
    this.mSlidingMenu.showBehind();
  }
  
  public void toggle()
  {
    if (this.mSlidingMenu.isBehindShowing())
    {
      showAbove();
      return;
    }
    showBehind();
  }
}
