package com.nostra13.universalimageloader.core;

import android.graphics.Bitmap;
import android.os.Handler;
import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.assist.FailReason.FailType;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.assist.ImageSize;
import com.nostra13.universalimageloader.core.assist.LoadedFrom;
import com.nostra13.universalimageloader.core.assist.ViewScaleType;
import com.nostra13.universalimageloader.core.decode.ImageDecoder;
import com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;
import com.nostra13.universalimageloader.core.download.ImageDownloader;
import com.nostra13.universalimageloader.core.download.ImageDownloader.Scheme;
import com.nostra13.universalimageloader.core.imageaware.ImageAware;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
import com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener;
import com.nostra13.universalimageloader.core.process.BitmapProcessor;
import com.nostra13.universalimageloader.utils.IoUtils;
import com.nostra13.universalimageloader.utils.IoUtils.CopyListener;
import com.nostra13.universalimageloader.utils.L;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicBoolean;

final class LoadAndDisplayImageTask
  implements Runnable, IoUtils.CopyListener
{
  private static final int BUFFER_SIZE = 32768;
  private static final String ERROR_POST_PROCESSOR_NULL = "Post-processor returned null [%s]";
  private static final String ERROR_PRE_PROCESSOR_NULL = "Pre-processor returned null [%s]";
  private static final String ERROR_PROCESSOR_FOR_DISC_CACHE_NULL = "Bitmap processor for disc cache returned null [%s]";
  private static final String LOG_CACHE_IMAGE_IN_MEMORY = "Cache image in memory [%s]";
  private static final String LOG_CACHE_IMAGE_ON_DISC = "Cache image on disc [%s]";
  private static final String LOG_DELAY_BEFORE_LOADING = "Delay %d ms before loading...  [%s]";
  private static final String LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING = "...Get cached bitmap from memory after waiting. [%s]";
  private static final String LOG_LOAD_IMAGE_FROM_DISC_CACHE = "Load image from disc cache [%s]";
  private static final String LOG_LOAD_IMAGE_FROM_NETWORK = "Load image from network [%s]";
  private static final String LOG_POSTPROCESS_IMAGE = "PostProcess image before displaying [%s]";
  private static final String LOG_PREPROCESS_IMAGE = "PreProcess image before caching in memory [%s]";
  private static final String LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC = "Process image before cache on disc [%s]";
  private static final String LOG_RESIZE_CACHED_IMAGE_FILE = "Resize image in disc cache [%s]";
  private static final String LOG_RESUME_AFTER_PAUSE = ".. Resume loading [%s]";
  private static final String LOG_START_DISPLAY_IMAGE_TASK = "Start display image task [%s]";
  private static final String LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED = "ImageAware was collected by GC. Task is cancelled. [%s]";
  private static final String LOG_TASK_CANCELLED_IMAGEAWARE_REUSED = "ImageAware is reused for another image. Task is cancelled. [%s]";
  private static final String LOG_TASK_INTERRUPTED = "Task was interrupted [%s]";
  private static final String LOG_WAITING_FOR_IMAGE_LOADED = "Image already is loading. Waiting... [%s]";
  private static final String LOG_WAITING_FOR_RESUME = "ImageLoader is paused. Waiting...  [%s]";
  private final ImageLoaderConfiguration configuration;
  private final ImageDecoder decoder;
  private final ImageDownloader downloader;
  private final ImageLoaderEngine engine;
  private final Handler handler;
  final ImageAware imageAware;
  private final ImageLoadingInfo imageLoadingInfo;
  final ImageLoadingListener listener;
  private LoadedFrom loadedFrom = LoadedFrom.NETWORK;
  private final String memoryCacheKey;
  private final ImageDownloader networkDeniedDownloader;
  final DisplayImageOptions options;
  final ImageLoadingProgressListener progressListener;
  private final ImageDownloader slowNetworkDownloader;
  private final ImageSize targetSize;
  final String uri;
  private final boolean writeLogs;
  
  public LoadAndDisplayImageTask(ImageLoaderEngine paramImageLoaderEngine, ImageLoadingInfo paramImageLoadingInfo, Handler paramHandler)
  {
    this.engine = paramImageLoaderEngine;
    this.imageLoadingInfo = paramImageLoadingInfo;
    this.handler = paramHandler;
    this.configuration = paramImageLoaderEngine.configuration;
    this.downloader = this.configuration.downloader;
    this.networkDeniedDownloader = this.configuration.networkDeniedDownloader;
    this.slowNetworkDownloader = this.configuration.slowNetworkDownloader;
    this.decoder = this.configuration.decoder;
    this.writeLogs = this.configuration.writeLogs;
    this.uri = paramImageLoadingInfo.uri;
    this.memoryCacheKey = paramImageLoadingInfo.memoryCacheKey;
    this.imageAware = paramImageLoadingInfo.imageAware;
    this.targetSize = paramImageLoadingInfo.targetSize;
    this.options = paramImageLoadingInfo.options;
    this.listener = paramImageLoadingInfo.listener;
    this.progressListener = paramImageLoadingInfo.progressListener;
  }
  
  private void checkTaskInterrupted()
    throws LoadAndDisplayImageTask.TaskCancelledException
  {
    if (isTaskInterrupted()) {
      throw new TaskCancelledException();
    }
  }
  
  private void checkTaskNotActual()
    throws LoadAndDisplayImageTask.TaskCancelledException
  {
    checkViewCollected();
    checkViewReused();
  }
  
  private void checkViewCollected()
    throws LoadAndDisplayImageTask.TaskCancelledException
  {
    if (isViewCollected()) {
      throw new TaskCancelledException();
    }
  }
  
  private void checkViewReused()
    throws LoadAndDisplayImageTask.TaskCancelledException
  {
    if (isViewReused()) {
      throw new TaskCancelledException();
    }
  }
  
  private Bitmap decodeImage(String paramString)
    throws IOException
  {
    ViewScaleType localViewScaleType = this.imageAware.getScaleType();
    paramString = new ImageDecodingInfo(this.memoryCacheKey, paramString, this.targetSize, localViewScaleType, getDownloader(), this.options);
    return this.decoder.decode(paramString);
  }
  
  private boolean delayIfNeed()
  {
    if (this.options.shouldDelayBeforeLoading())
    {
      log("Delay %d ms before loading...  [%s]", new Object[] { Integer.valueOf(this.options.getDelayBeforeLoading()), this.memoryCacheKey });
      try
      {
        Thread.sleep(this.options.getDelayBeforeLoading());
        return isTaskNotActual();
      }
      catch (InterruptedException localInterruptedException)
      {
        L.e("Task was interrupted [%s]", new Object[] { this.memoryCacheKey });
        return true;
      }
    }
    return false;
  }
  
  /* Error */
  private boolean downloadImage(File paramFile)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 215	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:getDownloader	()Lcom/nostra13/universalimageloader/core/download/ImageDownloader;
    //   4: aload_0
    //   5: getfield 156	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:uri	Ljava/lang/String;
    //   8: aload_0
    //   9: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   12: invokevirtual 266	com/nostra13/universalimageloader/core/DisplayImageOptions:getExtraForDownloader	()Ljava/lang/Object;
    //   15: invokeinterface 272 3 0
    //   20: astore_3
    //   21: new 274	java/io/BufferedOutputStream
    //   24: dup
    //   25: new 276	java/io/FileOutputStream
    //   28: dup
    //   29: aload_1
    //   30: invokespecial 279	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   33: ldc 20
    //   35: invokespecial 282	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;I)V
    //   38: astore_1
    //   39: aload_3
    //   40: aload_1
    //   41: aload_0
    //   42: invokestatic 288	com/nostra13/universalimageloader/utils/IoUtils:copyStream	(Ljava/io/InputStream;Ljava/io/OutputStream;Lcom/nostra13/universalimageloader/utils/IoUtils$CopyListener;)Z
    //   45: istore_2
    //   46: aload_1
    //   47: invokestatic 292	com/nostra13/universalimageloader/utils/IoUtils:closeSilently	(Ljava/io/Closeable;)V
    //   50: aload_3
    //   51: invokestatic 292	com/nostra13/universalimageloader/utils/IoUtils:closeSilently	(Ljava/io/Closeable;)V
    //   54: iload_2
    //   55: ireturn
    //   56: astore 4
    //   58: aload_1
    //   59: invokestatic 292	com/nostra13/universalimageloader/utils/IoUtils:closeSilently	(Ljava/io/Closeable;)V
    //   62: aload 4
    //   64: athrow
    //   65: astore_1
    //   66: aload_3
    //   67: invokestatic 292	com/nostra13/universalimageloader/utils/IoUtils:closeSilently	(Ljava/io/Closeable;)V
    //   70: aload_1
    //   71: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	72	0	this	LoadAndDisplayImageTask
    //   0	72	1	paramFile	File
    //   45	10	2	bool	boolean
    //   20	47	3	localInputStream	java.io.InputStream
    //   56	7	4	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   39	46	56	finally
    //   21	39	65	finally
    //   46	50	65	finally
    //   58	65	65	finally
  }
  
  private void fireCancelEvent()
  {
    if ((this.options.isSyncLoading()) || (isTaskInterrupted())) {
      return;
    }
    runTask(new Runnable()
    {
      public void run()
      {
        LoadAndDisplayImageTask.this.listener.onLoadingCancelled(LoadAndDisplayImageTask.this.uri, LoadAndDisplayImageTask.this.imageAware.getWrappedView());
      }
    }, false, this.handler, this.engine);
  }
  
  private void fireFailEvent(final FailReason.FailType paramFailType, final Throwable paramThrowable)
  {
    if ((this.options.isSyncLoading()) || (isTaskInterrupted()) || (isTaskNotActual())) {
      return;
    }
    runTask(new Runnable()
    {
      public void run()
      {
        if (LoadAndDisplayImageTask.this.options.shouldShowImageOnFail()) {
          LoadAndDisplayImageTask.this.imageAware.setImageDrawable(LoadAndDisplayImageTask.this.options.getImageOnFail(LoadAndDisplayImageTask.this.configuration.resources));
        }
        LoadAndDisplayImageTask.this.listener.onLoadingFailed(LoadAndDisplayImageTask.this.uri, LoadAndDisplayImageTask.this.imageAware.getWrappedView(), new FailReason(paramFailType, paramThrowable));
      }
    }, false, this.handler, this.engine);
  }
  
  private boolean fireProgressEvent(final int paramInt1, final int paramInt2)
  {
    if ((this.options.isSyncLoading()) || (isTaskInterrupted()) || (isTaskNotActual())) {
      return false;
    }
    runTask(new Runnable()
    {
      public void run()
      {
        LoadAndDisplayImageTask.this.progressListener.onProgressUpdate(LoadAndDisplayImageTask.this.uri, LoadAndDisplayImageTask.this.imageAware.getWrappedView(), paramInt1, paramInt2);
      }
    }, false, this.handler, this.engine);
    return true;
  }
  
  private ImageDownloader getDownloader()
  {
    if (this.engine.isNetworkDenied()) {
      return this.networkDeniedDownloader;
    }
    if (this.engine.isSlowNetwork()) {
      return this.slowNetworkDownloader;
    }
    return this.downloader;
  }
  
  private File getImageFileInDiscCache()
  {
    File localFile2 = this.configuration.discCache.get(this.uri);
    File localFile3 = localFile2.getParentFile();
    File localFile1;
    if (localFile3 != null)
    {
      localFile1 = localFile2;
      if (!localFile3.exists())
      {
        localFile1 = localFile2;
        if (localFile3.mkdirs()) {}
      }
    }
    else
    {
      localFile2 = this.configuration.reserveDiscCache.get(this.uri);
      localFile3 = localFile2.getParentFile();
      localFile1 = localFile2;
      if (localFile3 != null)
      {
        localFile1 = localFile2;
        if (!localFile3.exists())
        {
          localFile3.mkdirs();
          localFile1 = localFile2;
        }
      }
    }
    return localFile1;
  }
  
  private boolean isTaskInterrupted()
  {
    if (Thread.interrupted())
    {
      log("Task was interrupted [%s]");
      return true;
    }
    return false;
  }
  
  private boolean isTaskNotActual()
  {
    return (isViewCollected()) || (isViewReused());
  }
  
  private boolean isViewCollected()
  {
    if (this.imageAware.isCollected())
    {
      log("ImageAware was collected by GC. Task is cancelled. [%s]");
      return true;
    }
    return false;
  }
  
  private boolean isViewReused()
  {
    String str = this.engine.getLoadingUriForView(this.imageAware);
    if (!this.memoryCacheKey.equals(str)) {}
    for (int i = 1; i != 0; i = 0)
    {
      log("ImageAware is reused for another image. Task is cancelled. [%s]");
      return true;
    }
    return false;
  }
  
  private void log(String paramString)
  {
    if (this.writeLogs) {
      L.d(paramString, new Object[] { this.memoryCacheKey });
    }
  }
  
  private void log(String paramString, Object... paramVarArgs)
  {
    if (this.writeLogs) {
      L.d(paramString, paramVarArgs);
    }
  }
  
  private boolean resizeAndSaveImage(File paramFile, int paramInt1, int paramInt2)
    throws IOException
  {
    Object localObject1 = new ImageSize(paramInt1, paramInt2);
    Object localObject3 = new DisplayImageOptions.Builder().cloneFrom(this.options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();
    localObject1 = new ImageDecodingInfo(this.memoryCacheKey, ImageDownloader.Scheme.FILE.wrap(paramFile.getAbsolutePath()), (ImageSize)localObject1, ViewScaleType.FIT_INSIDE, getDownloader(), (DisplayImageOptions)localObject3);
    localObject3 = this.decoder.decode((ImageDecodingInfo)localObject1);
    localObject1 = localObject3;
    if (localObject3 != null)
    {
      localObject1 = localObject3;
      if (this.configuration.processorForDiscCache != null)
      {
        log("Process image before cache on disc [%s]");
        localObject3 = this.configuration.processorForDiscCache.process((Bitmap)localObject3);
        localObject1 = localObject3;
        if (localObject3 == null)
        {
          L.e("Bitmap processor for disc cache returned null [%s]", new Object[] { this.memoryCacheKey });
          localObject1 = localObject3;
        }
      }
    }
    if (localObject1 != null) {
      paramFile = new BufferedOutputStream(new FileOutputStream(paramFile), 32768);
    }
    try
    {
      ((Bitmap)localObject1).compress(this.configuration.imageCompressFormatForDiscCache, this.configuration.imageQualityForDiscCache, paramFile);
      IoUtils.closeSilently(paramFile);
      ((Bitmap)localObject1).recycle();
      return true;
    }
    finally
    {
      IoUtils.closeSilently(paramFile);
    }
  }
  
  static void runTask(Runnable paramRunnable, boolean paramBoolean, Handler paramHandler, ImageLoaderEngine paramImageLoaderEngine)
  {
    if (paramBoolean)
    {
      paramRunnable.run();
      return;
    }
    if (paramHandler == null)
    {
      paramImageLoaderEngine.fireCallback(paramRunnable);
      return;
    }
    paramHandler.post(paramRunnable);
  }
  
  private boolean tryCacheImageOnDisc(File paramFile)
    throws LoadAndDisplayImageTask.TaskCancelledException
  {
    log("Cache image on disc [%s]");
    do
    {
      try
      {
        boolean bool1 = downloadImage(paramFile);
        bool2 = bool1;
        if (bool1) {
          bool3 = bool1;
        }
        int i;
        int j;
        L.e(localIOException1);
      }
      catch (IOException localIOException1)
      {
        try
        {
          i = this.configuration.maxImageWidthForDiscCache;
          bool3 = bool1;
          j = this.configuration.maxImageHeightForDiscCache;
          if (i <= 0)
          {
            bool2 = bool1;
            if (j <= 0) {}
          }
          else
          {
            bool3 = bool1;
            log("Resize image in disc cache [%s]");
            bool3 = bool1;
            bool2 = resizeAndSaveImage(paramFile, i, j);
          }
          bool3 = bool2;
          this.configuration.discCache.put(this.uri, paramFile);
          return bool2;
        }
        catch (IOException localIOException2)
        {
          boolean bool2;
          boolean bool3;
          for (;;) {}
        }
        localIOException1 = localIOException1;
        bool3 = false;
      }
      bool2 = bool3;
    } while (!paramFile.exists());
    paramFile.delete();
    return bool3;
  }
  
  private Bitmap tryLoadBitmap()
    throws LoadAndDisplayImageTask.TaskCancelledException
  {
    File localFile = getImageFileInDiscCache();
    Object localObject2;
    for (;;)
    {
      try
      {
        String str = ImageDownloader.Scheme.FILE.wrap(localFile.getAbsolutePath());
        Bitmap localBitmap1;
        Bitmap localBitmap2;
        Bitmap localBitmap3;
        Bitmap localBitmap4;
        Bitmap localBitmap5;
        if (localFile.exists())
        {
          log("Load image from disc cache [%s]");
          this.loadedFrom = LoadedFrom.DISC_CACHE;
          checkTaskNotActual();
          localBitmap1 = decodeImage(str);
          if (localBitmap1 != null)
          {
            localBitmap2 = localBitmap1;
            localBitmap3 = localBitmap1;
            localBitmap4 = localBitmap1;
            localBitmap5 = localBitmap1;
          }
        }
        Object localObject1 = null;
      }
      catch (IllegalStateException localIllegalStateException1)
      {
        try
        {
          if (localBitmap1.getWidth() > 0)
          {
            localBitmap2 = localBitmap1;
            localBitmap3 = localBitmap1;
            localBitmap4 = localBitmap1;
            localBitmap5 = localBitmap1;
            localObject2 = localBitmap1;
            if (localBitmap1.getHeight() > 0) {
              break;
            }
          }
          localBitmap2 = localBitmap1;
          localBitmap3 = localBitmap1;
          localBitmap4 = localBitmap1;
          localBitmap5 = localBitmap1;
          log("Load image from network [%s]");
          localBitmap2 = localBitmap1;
          localBitmap3 = localBitmap1;
          localBitmap4 = localBitmap1;
          localBitmap5 = localBitmap1;
          this.loadedFrom = LoadedFrom.NETWORK;
          localBitmap2 = localBitmap1;
          localBitmap3 = localBitmap1;
          localBitmap4 = localBitmap1;
          localBitmap5 = localBitmap1;
          if (this.options.isCacheOnDisc())
          {
            localBitmap2 = localBitmap1;
            localBitmap3 = localBitmap1;
            localBitmap4 = localBitmap1;
            localBitmap5 = localBitmap1;
            if (tryCacheImageOnDisc(localFile))
            {
              localObject2 = str;
              localBitmap2 = localBitmap1;
              localBitmap3 = localBitmap1;
              localBitmap4 = localBitmap1;
              localBitmap5 = localBitmap1;
              checkTaskNotActual();
              localBitmap2 = localBitmap1;
              localBitmap3 = localBitmap1;
              localBitmap4 = localBitmap1;
              localBitmap5 = localBitmap1;
              localBitmap1 = decodeImage((String)localObject2);
              if (localBitmap1 != null)
              {
                localBitmap2 = localBitmap1;
                localBitmap3 = localBitmap1;
                localBitmap4 = localBitmap1;
                localBitmap5 = localBitmap1;
                if (localBitmap1.getWidth() > 0)
                {
                  localBitmap2 = localBitmap1;
                  localBitmap3 = localBitmap1;
                  localBitmap4 = localBitmap1;
                  localBitmap5 = localBitmap1;
                  localObject2 = localBitmap1;
                  if (localBitmap1.getHeight() > 0) {
                    break;
                  }
                }
              }
              localBitmap2 = localBitmap1;
              localBitmap3 = localBitmap1;
              localBitmap4 = localBitmap1;
              localBitmap5 = localBitmap1;
              fireFailEvent(FailReason.FailType.DECODING_ERROR, null);
              return localBitmap1;
            }
          }
          localBitmap2 = localBitmap1;
          localBitmap3 = localBitmap1;
          localBitmap4 = localBitmap1;
          localBitmap5 = localBitmap1;
          localObject2 = this.uri;
          continue;
          localIllegalStateException1 = localIllegalStateException1;
          localBitmap5 = null;
        }
        catch (Throwable localThrowable2)
        {
          continue;
        }
        catch (OutOfMemoryError localOutOfMemoryError2)
        {
          continue;
        }
        catch (IOException localIOException2)
        {
          continue;
        }
        catch (IllegalStateException localIllegalStateException2)
        {
          continue;
        }
        fireFailEvent(FailReason.FailType.NETWORK_DENIED, null);
        return localBitmap5;
      }
      catch (TaskCancelledException localTaskCancelledException)
      {
        throw localTaskCancelledException;
      }
      catch (IOException localIOException1)
      {
        localBitmap4 = null;
        L.e(localIOException1);
        fireFailEvent(FailReason.FailType.IO_ERROR, localIOException1);
        localObject2 = localBitmap4;
        if (!localFile.exists()) {
          break;
        }
        localFile.delete();
        return localBitmap4;
      }
      catch (OutOfMemoryError localOutOfMemoryError1)
      {
        localBitmap3 = null;
        L.e(localOutOfMemoryError1);
        fireFailEvent(FailReason.FailType.OUT_OF_MEMORY, localOutOfMemoryError1);
        return localBitmap3;
      }
      catch (Throwable localThrowable1)
      {
        localBitmap2 = null;
        L.e(localThrowable1);
        fireFailEvent(FailReason.FailType.UNKNOWN, localThrowable1);
        return localBitmap2;
      }
    }
    return localObject2;
  }
  
  private boolean waitIfPaused()
  {
    AtomicBoolean localAtomicBoolean = this.engine.getPause();
    if (localAtomicBoolean.get()) {}
    synchronized (this.engine.getPauseLock())
    {
      if (localAtomicBoolean.get()) {
        log("ImageLoader is paused. Waiting...  [%s]");
      }
      try
      {
        this.engine.getPauseLock().wait();
        log(".. Resume loading [%s]");
        return isTaskNotActual();
      }
      catch (InterruptedException localInterruptedException)
      {
        L.e("Task was interrupted [%s]", new Object[] { this.memoryCacheKey });
        return true;
      }
    }
  }
  
  String getLoadingUri()
  {
    return this.uri;
  }
  
  public boolean onBytesCopied(int paramInt1, int paramInt2)
  {
    return (this.progressListener == null) || (fireProgressEvent(paramInt1, paramInt2));
  }
  
  /* Error */
  public void run()
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 542	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:waitIfPaused	()Z
    //   4: ifeq +4 -> 8
    //   7: return
    //   8: aload_0
    //   9: invokespecial 544	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:delayIfNeed	()Z
    //   12: ifne -5 -> 7
    //   15: aload_0
    //   16: getfield 127	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:imageLoadingInfo	Lcom/nostra13/universalimageloader/core/ImageLoadingInfo;
    //   19: getfield 548	com/nostra13/universalimageloader/core/ImageLoadingInfo:loadFromUriLock	Ljava/util/concurrent/locks/ReentrantLock;
    //   22: astore_3
    //   23: aload_0
    //   24: ldc 66
    //   26: invokespecial 349	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:log	(Ljava/lang/String;)V
    //   29: aload_3
    //   30: invokevirtual 553	java/util/concurrent/locks/ReentrantLock:isLocked	()Z
    //   33: ifeq +9 -> 42
    //   36: aload_0
    //   37: ldc 78
    //   39: invokespecial 349	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:log	(Ljava/lang/String;)V
    //   42: aload_3
    //   43: invokevirtual 556	java/util/concurrent/locks/ReentrantLock:lock	()V
    //   46: aload_0
    //   47: invokespecial 488	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:checkTaskNotActual	()V
    //   50: aload_0
    //   51: getfield 134	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:configuration	Lcom/nostra13/universalimageloader/core/ImageLoaderConfiguration;
    //   54: getfield 560	com/nostra13/universalimageloader/core/ImageLoaderConfiguration:memoryCache	Lcom/nostra13/universalimageloader/cache/memory/MemoryCacheAware;
    //   57: aload_0
    //   58: getfield 159	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:memoryCacheKey	Ljava/lang/String;
    //   61: invokeinterface 565 2 0
    //   66: checkcast 432	android/graphics/Bitmap
    //   69: astore_2
    //   70: aload_2
    //   71: ifnonnull +248 -> 319
    //   74: aload_0
    //   75: invokespecial 567	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:tryLoadBitmap	()Landroid/graphics/Bitmap;
    //   78: astore_2
    //   79: aload_2
    //   80: ifnonnull +8 -> 88
    //   83: aload_3
    //   84: invokevirtual 570	java/util/concurrent/locks/ReentrantLock:unlock	()V
    //   87: return
    //   88: aload_0
    //   89: invokespecial 488	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:checkTaskNotActual	()V
    //   92: aload_0
    //   93: invokespecial 572	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:checkTaskInterrupted	()V
    //   96: aload_2
    //   97: astore_1
    //   98: aload_0
    //   99: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   102: invokevirtual 575	com/nostra13/universalimageloader/core/DisplayImageOptions:shouldPreProcess	()Z
    //   105: ifeq +47 -> 152
    //   108: aload_0
    //   109: ldc 54
    //   111: invokespecial 349	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:log	(Ljava/lang/String;)V
    //   114: aload_0
    //   115: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   118: invokevirtual 579	com/nostra13/universalimageloader/core/DisplayImageOptions:getPreProcessor	()Lcom/nostra13/universalimageloader/core/process/BitmapProcessor;
    //   121: aload_2
    //   122: invokeinterface 423 2 0
    //   127: astore_2
    //   128: aload_2
    //   129: astore_1
    //   130: aload_2
    //   131: ifnonnull +21 -> 152
    //   134: ldc 27
    //   136: iconst_1
    //   137: anewarray 4	java/lang/Object
    //   140: dup
    //   141: iconst_0
    //   142: aload_0
    //   143: getfield 159	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:memoryCacheKey	Ljava/lang/String;
    //   146: aastore
    //   147: invokestatic 260	com/nostra13/universalimageloader/utils/L:e	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   150: aload_2
    //   151: astore_1
    //   152: aload_1
    //   153: astore_2
    //   154: aload_1
    //   155: ifnull +41 -> 196
    //   158: aload_1
    //   159: astore_2
    //   160: aload_0
    //   161: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   164: invokevirtual 582	com/nostra13/universalimageloader/core/DisplayImageOptions:isCacheInMemory	()Z
    //   167: ifeq +29 -> 196
    //   170: aload_0
    //   171: ldc 33
    //   173: invokespecial 349	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:log	(Ljava/lang/String;)V
    //   176: aload_0
    //   177: getfield 134	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:configuration	Lcom/nostra13/universalimageloader/core/ImageLoaderConfiguration;
    //   180: getfield 560	com/nostra13/universalimageloader/core/ImageLoaderConfiguration:memoryCache	Lcom/nostra13/universalimageloader/cache/memory/MemoryCacheAware;
    //   183: aload_0
    //   184: getfield 159	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:memoryCacheKey	Ljava/lang/String;
    //   187: aload_1
    //   188: invokeinterface 585 3 0
    //   193: pop
    //   194: aload_1
    //   195: astore_2
    //   196: aload_2
    //   197: astore_1
    //   198: aload_2
    //   199: ifnull +59 -> 258
    //   202: aload_2
    //   203: astore_1
    //   204: aload_0
    //   205: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   208: invokevirtual 588	com/nostra13/universalimageloader/core/DisplayImageOptions:shouldPostProcess	()Z
    //   211: ifeq +47 -> 258
    //   214: aload_0
    //   215: ldc 51
    //   217: invokespecial 349	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:log	(Ljava/lang/String;)V
    //   220: aload_0
    //   221: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   224: invokevirtual 591	com/nostra13/universalimageloader/core/DisplayImageOptions:getPostProcessor	()Lcom/nostra13/universalimageloader/core/process/BitmapProcessor;
    //   227: aload_2
    //   228: invokeinterface 423 2 0
    //   233: astore_2
    //   234: aload_2
    //   235: astore_1
    //   236: aload_2
    //   237: ifnonnull +21 -> 258
    //   240: ldc 24
    //   242: iconst_1
    //   243: anewarray 4	java/lang/Object
    //   246: dup
    //   247: iconst_0
    //   248: aload_0
    //   249: getfield 159	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:memoryCacheKey	Ljava/lang/String;
    //   252: aastore
    //   253: invokestatic 260	com/nostra13/universalimageloader/utils/L:e	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   256: aload_2
    //   257: astore_1
    //   258: aload_0
    //   259: invokespecial 488	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:checkTaskNotActual	()V
    //   262: aload_0
    //   263: invokespecial 572	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:checkTaskInterrupted	()V
    //   266: aload_3
    //   267: invokevirtual 570	java/util/concurrent/locks/ReentrantLock:unlock	()V
    //   270: new 593	com/nostra13/universalimageloader/core/DisplayBitmapTask
    //   273: dup
    //   274: aload_1
    //   275: aload_0
    //   276: getfield 127	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:imageLoadingInfo	Lcom/nostra13/universalimageloader/core/ImageLoadingInfo;
    //   279: aload_0
    //   280: getfield 125	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:engine	Lcom/nostra13/universalimageloader/core/ImageLoaderEngine;
    //   283: aload_0
    //   284: getfield 123	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:loadedFrom	Lcom/nostra13/universalimageloader/core/assist/LoadedFrom;
    //   287: invokespecial 596	com/nostra13/universalimageloader/core/DisplayBitmapTask:<init>	(Landroid/graphics/Bitmap;Lcom/nostra13/universalimageloader/core/ImageLoadingInfo;Lcom/nostra13/universalimageloader/core/ImageLoaderEngine;Lcom/nostra13/universalimageloader/core/assist/LoadedFrom;)V
    //   290: astore_1
    //   291: aload_1
    //   292: aload_0
    //   293: getfield 151	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:writeLogs	Z
    //   296: invokevirtual 600	com/nostra13/universalimageloader/core/DisplayBitmapTask:setLoggingEnabled	(Z)V
    //   299: aload_1
    //   300: aload_0
    //   301: getfield 168	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:options	Lcom/nostra13/universalimageloader/core/DisplayImageOptions;
    //   304: invokevirtual 296	com/nostra13/universalimageloader/core/DisplayImageOptions:isSyncLoading	()Z
    //   307: aload_0
    //   308: getfield 129	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:handler	Landroid/os/Handler;
    //   311: aload_0
    //   312: getfield 125	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:engine	Lcom/nostra13/universalimageloader/core/ImageLoaderEngine;
    //   315: invokestatic 301	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:runTask	(Ljava/lang/Runnable;ZLandroid/os/Handler;Lcom/nostra13/universalimageloader/core/ImageLoaderEngine;)V
    //   318: return
    //   319: aload_0
    //   320: getstatic 603	com/nostra13/universalimageloader/core/assist/LoadedFrom:MEMORY_CACHE	Lcom/nostra13/universalimageloader/core/assist/LoadedFrom;
    //   323: putfield 123	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:loadedFrom	Lcom/nostra13/universalimageloader/core/assist/LoadedFrom;
    //   326: aload_0
    //   327: ldc 42
    //   329: invokespecial 349	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:log	(Ljava/lang/String;)V
    //   332: goto -136 -> 196
    //   335: astore_1
    //   336: aload_0
    //   337: invokespecial 605	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask:fireCancelEvent	()V
    //   340: aload_3
    //   341: invokevirtual 570	java/util/concurrent/locks/ReentrantLock:unlock	()V
    //   344: return
    //   345: astore_1
    //   346: aload_3
    //   347: invokevirtual 570	java/util/concurrent/locks/ReentrantLock:unlock	()V
    //   350: aload_1
    //   351: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	352	0	this	LoadAndDisplayImageTask
    //   97	203	1	localObject1	Object
    //   335	1	1	localTaskCancelledException	TaskCancelledException
    //   345	6	1	localObject2	Object
    //   69	188	2	localObject3	Object
    //   22	325	3	localReentrantLock	java.util.concurrent.locks.ReentrantLock
    // Exception table:
    //   from	to	target	type
    //   46	70	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   74	79	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   88	96	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   98	128	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   134	150	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   160	194	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   204	234	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   240	256	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   258	266	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   319	332	335	com/nostra13/universalimageloader/core/LoadAndDisplayImageTask$TaskCancelledException
    //   46	70	345	finally
    //   74	79	345	finally
    //   88	96	345	finally
    //   98	128	345	finally
    //   134	150	345	finally
    //   160	194	345	finally
    //   204	234	345	finally
    //   240	256	345	finally
    //   258	266	345	finally
    //   319	332	345	finally
    //   336	340	345	finally
  }
  
  class TaskCancelledException
    extends Exception
  {
    TaskCancelledException() {}
  }
}
