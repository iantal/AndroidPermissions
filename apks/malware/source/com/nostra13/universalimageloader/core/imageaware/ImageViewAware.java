package com.nostra13.universalimageloader.core.imageaware;

import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.os.Looper;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import com.nostra13.universalimageloader.core.assist.ViewScaleType;
import com.nostra13.universalimageloader.utils.L;
import java.lang.ref.Reference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;

public class ImageViewAware
  implements ImageAware
{
  public static final String WARN_CANT_SET_BITMAP = "Can't set a bitmap into view. You should call ImageLoader on UI thread for it.";
  public static final String WARN_CANT_SET_DRAWABLE = "Can't set a drawable into view. You should call ImageLoader on UI thread for it.";
  protected boolean checkActualViewSize;
  protected Reference<ImageView> imageViewRef;
  
  public ImageViewAware(ImageView paramImageView)
  {
    this(paramImageView, true);
  }
  
  public ImageViewAware(ImageView paramImageView, boolean paramBoolean)
  {
    this.imageViewRef = new WeakReference(paramImageView);
    this.checkActualViewSize = paramBoolean;
  }
  
  private static int getImageViewFieldValue(Object paramObject, String paramString)
  {
    try
    {
      paramString = ImageView.class.getDeclaredField(paramString);
      paramString.setAccessible(true);
      int i = ((Integer)paramString.get(paramObject)).intValue();
      if ((i > 0) && (i < Integer.MAX_VALUE)) {
        return i;
      }
    }
    catch (Exception paramObject)
    {
      L.e(paramObject);
      return 0;
    }
    return 0;
  }
  
  public int getHeight()
  {
    int j = 0;
    ImageView localImageView = (ImageView)this.imageViewRef.get();
    if (localImageView != null)
    {
      ViewGroup.LayoutParams localLayoutParams = localImageView.getLayoutParams();
      int i = j;
      if (this.checkActualViewSize)
      {
        i = j;
        if (localLayoutParams != null)
        {
          i = j;
          if (localLayoutParams.height != -2) {
            i = localImageView.getHeight();
          }
        }
      }
      j = i;
      if (i <= 0)
      {
        j = i;
        if (localLayoutParams != null) {
          j = localLayoutParams.height;
        }
      }
      if (j <= 0) {
        return getImageViewFieldValue(localImageView, "mMaxHeight");
      }
    }
    else
    {
      return 0;
    }
    return j;
  }
  
  public int getId()
  {
    ImageView localImageView = (ImageView)this.imageViewRef.get();
    if (localImageView == null) {
      return super.hashCode();
    }
    return localImageView.hashCode();
  }
  
  public ViewScaleType getScaleType()
  {
    ImageView localImageView = (ImageView)this.imageViewRef.get();
    if (localImageView != null) {
      return ViewScaleType.fromImageView(localImageView);
    }
    return null;
  }
  
  public int getWidth()
  {
    int j = 0;
    ImageView localImageView = (ImageView)this.imageViewRef.get();
    if (localImageView != null)
    {
      ViewGroup.LayoutParams localLayoutParams = localImageView.getLayoutParams();
      int i = j;
      if (this.checkActualViewSize)
      {
        i = j;
        if (localLayoutParams != null)
        {
          i = j;
          if (localLayoutParams.width != -2) {
            i = localImageView.getWidth();
          }
        }
      }
      j = i;
      if (i <= 0)
      {
        j = i;
        if (localLayoutParams != null) {
          j = localLayoutParams.width;
        }
      }
      if (j <= 0) {
        return getImageViewFieldValue(localImageView, "mMaxWidth");
      }
    }
    else
    {
      return 0;
    }
    return j;
  }
  
  public ImageView getWrappedView()
  {
    return (ImageView)this.imageViewRef.get();
  }
  
  public boolean isCollected()
  {
    return this.imageViewRef.get() == null;
  }
  
  public boolean setImageBitmap(Bitmap paramBitmap)
  {
    if (Looper.myLooper() == Looper.getMainLooper())
    {
      ImageView localImageView = (ImageView)this.imageViewRef.get();
      if (localImageView != null)
      {
        localImageView.setImageBitmap(paramBitmap);
        return true;
      }
    }
    else
    {
      L.w("Can't set a bitmap into view. You should call ImageLoader on UI thread for it.", new Object[0]);
      return false;
    }
    return false;
  }
  
  public boolean setImageDrawable(Drawable paramDrawable)
  {
    if (Looper.myLooper() == Looper.getMainLooper())
    {
      ImageView localImageView = (ImageView)this.imageViewRef.get();
      if (localImageView != null)
      {
        localImageView.setImageDrawable(paramDrawable);
        return true;
      }
    }
    else
    {
      L.w("Can't set a drawable into view. You should call ImageLoader on UI thread for it.", new Object[0]);
      return false;
    }
    return false;
  }
}
