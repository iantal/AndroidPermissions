package com.klw.json;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

public class f
{
  private long a;
  private boolean b;
  private long c;
  private long d;
  private char e;
  private Reader f;
  private boolean g;
  
  public f(Reader paramReader)
  {
    if (paramReader.markSupported()) {}
    for (;;)
    {
      this.f = paramReader;
      this.b = false;
      this.g = false;
      this.e = '\000';
      this.c = 0L;
      this.a = 1L;
      this.d = 1L;
      return;
      paramReader = new BufferedReader(paramReader);
    }
  }
  
  public f(String paramString)
  {
    this(new StringReader(paramString));
  }
  
  public b a(String paramString)
  {
    return new b(paramString + toString());
  }
  
  public String a(char paramChar)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    for (;;)
    {
      char c1 = c();
      switch (c1)
      {
      default: 
        if (c1 == paramChar) {
          return localStringBuilder.toString();
        }
        break;
      case '\000': 
      case '\n': 
      case '\r': 
        throw a("Unterminated string");
      case '\\': 
        c1 = c();
        switch (c1)
        {
        default: 
          throw a("Illegal escape.");
        case 'b': 
          localStringBuilder.append('\b');
          break;
        case 't': 
          localStringBuilder.append('\t');
          break;
        case 'n': 
          localStringBuilder.append('\n');
          break;
        case 'f': 
          localStringBuilder.append('\f');
          break;
        case 'r': 
          localStringBuilder.append('\r');
          break;
        case 'u': 
          localStringBuilder.append((char)Integer.parseInt(a(4), 16));
          break;
        case '"': 
        case '\'': 
        case '/': 
        case '\\': 
          localStringBuilder.append(c1);
        }
        break;
      }
      localStringBuilder.append(c1);
    }
  }
  
  public String a(int paramInt)
  {
    if (paramInt == 0) {
      return "";
    }
    char[] arrayOfChar = new char[paramInt];
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {
        return new String(arrayOfChar);
      }
      arrayOfChar[i] = c();
      if (b()) {
        throw a("Substring bounds error");
      }
      i += 1;
    }
  }
  
  public void a()
  {
    if ((this.g) || (this.c <= 0L)) {
      throw new b("Stepping back two steps is not supported");
    }
    this.c -= 1L;
    this.a -= 1L;
    this.g = true;
    this.b = false;
  }
  
  public boolean b()
  {
    return (this.b) && (!this.g);
  }
  
  public char c()
  {
    int k = 0;
    int i;
    int j;
    if (this.g)
    {
      this.g = false;
      i = this.e;
      this.c += 1L;
      if (this.e != '\r') {
        break label114;
      }
      this.d += 1L;
      if (i != 10) {
        break label109;
      }
      j = k;
      label56:
      this.a = j;
    }
    for (;;)
    {
      this.e = ((char)i);
      return this.e;
      try
      {
        j = this.f.read();
        i = j;
        if (j > 0) {
          break;
        }
        this.b = true;
        i = 0;
      }
      catch (IOException localIOException)
      {
        throw new b(localIOException);
      }
      label109:
      j = 1;
      break label56;
      label114:
      if (i == 10)
      {
        this.d += 1L;
        this.a = 0L;
      }
      else
      {
        this.a += 1L;
      }
    }
  }
  
  public char d()
  {
    char c1;
    do
    {
      c1 = c();
    } while ((c1 != 0) && (c1 <= ' '));
    return c1;
  }
  
  public Object e()
  {
    char c1 = d();
    Object localObject;
    switch (c1)
    {
    default: 
      localObject = new StringBuilder();
    }
    for (;;)
    {
      if ((c1 < ' ') || (",:]}/\\\"[{;=#".indexOf(c1) >= 0))
      {
        a();
        localObject = ((StringBuilder)localObject).toString().trim();
        if (!"".equals(localObject)) {
          break;
        }
        throw a("Missing value");
        return a(c1);
        a();
        return new c(this);
        a();
        return new a(this);
      }
      ((StringBuilder)localObject).append(c1);
      c1 = c();
    }
    return c.f((String)localObject);
  }
  
  public String toString()
  {
    return " at " + this.c + " [character " + this.a + " line " + this.d + "]";
  }
}
