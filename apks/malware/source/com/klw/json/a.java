package com.klw.json;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class a
{
  private final ArrayList<Object> a = new ArrayList();
  
  public a() {}
  
  public a(f paramF)
  {
    this();
    if (paramF.d() != '[') {
      throw paramF.a("A JSONArray text must start with '['");
    }
    if (paramF.d() != ']') {
      paramF.a();
    }
    for (;;)
    {
      if (paramF.d() == ',')
      {
        paramF.a();
        this.a.add(c.a);
      }
      for (;;)
      {
        switch (paramF.d())
        {
        default: 
          throw paramF.a("Expected a ',' or ']'");
          paramF.a();
          this.a.add(paramF.e());
        }
      }
      if (paramF.d() == ']') {
        return;
      }
      paramF.a();
    }
  }
  
  public a(Object paramObject)
  {
    this();
    if (paramObject.getClass().isArray())
    {
      int j = Array.getLength(paramObject);
      int i = 0;
      for (;;)
      {
        if (i >= j) {
          return;
        }
        a(c.b(Array.get(paramObject, i)));
        i += 1;
      }
    }
    throw new b("JSONArray initial value should be a string or collection or array.");
  }
  
  public a(String paramString)
  {
    this(new f(paramString));
  }
  
  public a(Collection<Object> paramCollection)
  {
    if (paramCollection != null) {
      paramCollection = paramCollection.iterator();
    }
    for (;;)
    {
      if (!paramCollection.hasNext()) {
        return;
      }
      this.a.add(c.b(paramCollection.next()));
    }
  }
  
  public int a()
  {
    return this.a.size();
  }
  
  public a a(Object paramObject)
  {
    this.a.add(paramObject);
    return this;
  }
  
  Writer a(Writer paramWriter, int paramInt1, int paramInt2)
  {
    int i = 0;
    for (;;)
    {
      int k;
      try
      {
        k = a();
        paramWriter.write(91);
        if (k != 1) {
          break label135;
        }
        c.a(paramWriter, this.a.get(0), paramInt1, paramInt2);
        paramWriter.write(93);
        return paramWriter;
      }
      catch (IOException paramWriter)
      {
        throw new b(paramWriter);
      }
      if (i >= k)
      {
        if (paramInt1 > 0) {
          paramWriter.write(10);
        }
        c.a(paramWriter, paramInt2);
      }
      else
      {
        if (j != 0) {
          paramWriter.write(44);
        }
        if (paramInt1 > 0) {
          paramWriter.write(10);
        }
        int m;
        c.a(paramWriter, m);
        c.a(paramWriter, this.a.get(i), paramInt1, m);
        i += 1;
        int j = 1;
        continue;
        label135:
        if (k != 0)
        {
          m = paramInt2 + paramInt1;
          j = 0;
        }
      }
    }
  }
  
  public Object a(int paramInt)
  {
    Object localObject = c(paramInt);
    if (localObject == null) {
      throw new b("JSONArray[" + paramInt + "] not found.");
    }
    return localObject;
  }
  
  public c b(int paramInt)
  {
    Object localObject = a(paramInt);
    if ((localObject instanceof c)) {
      return (c)localObject;
    }
    throw new b("JSONArray[" + paramInt + "] is not a JSONObject.");
  }
  
  public Object c(int paramInt)
  {
    if ((paramInt < 0) || (paramInt >= a())) {
      return null;
    }
    return this.a.get(paramInt);
  }
  
  public String d(int paramInt)
  {
    Object localObject1 = new StringWriter();
    synchronized (((StringWriter)localObject1).getBuffer())
    {
      localObject1 = a((Writer)localObject1, paramInt, 0).toString();
      return localObject1;
    }
  }
  
  public String toString()
  {
    try
    {
      String str = d(0);
      return str;
    }
    catch (Exception localException) {}
    return null;
  }
}
