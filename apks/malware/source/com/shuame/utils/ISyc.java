package com.shuame.utils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class ISyc
{
  static final int BUFFER_SIZE = 4096;
  
  public ISyc() {}
  
  public static byte[] InputStreamTOByte(InputStream paramInputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte['က'];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte, 0, 4096);
      if (i == -1)
      {
        paramInputStream = (byte[])null;
        return localByteArrayOutputStream.toByteArray();
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  public static String InputStreamTOString(InputStream paramInputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte['က'];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte, 0, 4096);
      if (i == -1)
      {
        paramInputStream = (byte[])null;
        return new String(localByteArrayOutputStream.toByteArray(), "ISO-8859-1");
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  public static String InputStreamTOString(InputStream paramInputStream, String paramString)
  {
    paramString = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte['က'];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte, 0, 4096);
      if (i == -1)
      {
        paramInputStream = (byte[])null;
        return new String(paramString.toByteArray(), MCon.iOs);
      }
      paramString.write(arrayOfByte, 0, i);
    }
  }
  
  public static InputStream StringTOInputStream(String paramString)
  {
    return new ByteArrayInputStream(paramString.getBytes("ISO-8859-1"));
  }
  
  public static InputStream byteTOInputStream(byte[] paramArrayOfByte)
  {
    return new ByteArrayInputStream(paramArrayOfByte);
  }
  
  public static String byteTOString(byte[] paramArrayOfByte)
  {
    return InputStreamTOString(byteTOInputStream(paramArrayOfByte));
  }
}
