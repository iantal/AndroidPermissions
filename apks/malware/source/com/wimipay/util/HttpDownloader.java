package com.wimipay.util;

import java.io.File;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class HttpDownloader
{
  public HttpDownloader() {}
  
  /* Error */
  public static String download(String paramString)
  {
    // Byte code:
    //   0: new 15	java/lang/StringBuffer
    //   3: dup
    //   4: invokespecial 16	java/lang/StringBuffer:<init>	()V
    //   7: astore_3
    //   8: aconst_null
    //   9: astore_2
    //   10: new 18	java/io/BufferedReader
    //   13: dup
    //   14: new 20	java/io/InputStreamReader
    //   17: dup
    //   18: new 22	java/net/URL
    //   21: dup
    //   22: aload_0
    //   23: invokespecial 25	java/net/URL:<init>	(Ljava/lang/String;)V
    //   26: invokevirtual 29	java/net/URL:openConnection	()Ljava/net/URLConnection;
    //   29: checkcast 31	java/net/HttpURLConnection
    //   32: invokevirtual 35	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   35: invokespecial 38	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   38: invokespecial 41	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   41: astore_1
    //   42: aload_1
    //   43: astore_0
    //   44: aload_1
    //   45: invokevirtual 45	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   48: astore_2
    //   49: aload_2
    //   50: ifnonnull +16 -> 66
    //   53: aload_1
    //   54: ifnull +7 -> 61
    //   57: aload_1
    //   58: invokevirtual 48	java/io/BufferedReader:close	()V
    //   61: aload_3
    //   62: invokevirtual 51	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   65: areturn
    //   66: aload_1
    //   67: astore_0
    //   68: aload_3
    //   69: aload_2
    //   70: invokevirtual 55	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   73: pop
    //   74: goto -32 -> 42
    //   77: astore_2
    //   78: aload_1
    //   79: astore_0
    //   80: aload_2
    //   81: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   84: aload_1
    //   85: ifnull -24 -> 61
    //   88: aload_1
    //   89: invokevirtual 48	java/io/BufferedReader:close	()V
    //   92: goto -31 -> 61
    //   95: astore_0
    //   96: aload_0
    //   97: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   100: goto -39 -> 61
    //   103: astore_0
    //   104: aload_2
    //   105: astore_1
    //   106: aload_1
    //   107: ifnull +7 -> 114
    //   110: aload_1
    //   111: invokevirtual 48	java/io/BufferedReader:close	()V
    //   114: aload_0
    //   115: athrow
    //   116: astore_1
    //   117: aload_1
    //   118: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   121: goto -7 -> 114
    //   124: astore_0
    //   125: aload_0
    //   126: invokevirtual 58	java/lang/Exception:printStackTrace	()V
    //   129: goto -68 -> 61
    //   132: astore_2
    //   133: aload_0
    //   134: astore_1
    //   135: aload_2
    //   136: astore_0
    //   137: goto -31 -> 106
    //   140: astore_2
    //   141: aconst_null
    //   142: astore_1
    //   143: goto -65 -> 78
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	146	0	paramString	String
    //   41	70	1	localObject1	Object
    //   116	2	1	localException1	Exception
    //   134	9	1	str1	String
    //   9	61	2	str2	String
    //   77	28	2	localException2	Exception
    //   132	4	2	localObject2	Object
    //   140	1	2	localException3	Exception
    //   7	62	3	localStringBuffer	StringBuffer
    // Exception table:
    //   from	to	target	type
    //   44	49	77	java/lang/Exception
    //   68	74	77	java/lang/Exception
    //   88	92	95	java/lang/Exception
    //   10	42	103	finally
    //   110	114	116	java/lang/Exception
    //   57	61	124	java/lang/Exception
    //   44	49	132	finally
    //   68	74	132	finally
    //   80	84	132	finally
    //   10	42	140	java/lang/Exception
  }
  
  public static int downloadFile(String paramString1, String paramString2, boolean paramBoolean)
  {
    int i = -1;
    Object localObject = null;
    String str = null;
    File localFile = new File(paramString2);
    do
    {
      for (;;)
      {
        try
        {
          paramString1 = getInputStreamFromUrl(paramString1);
          str = paramString1;
          localObject = paramString1;
          boolean bool = localFile.exists();
          if (!bool) {
            continue;
          }
          if (paramBoolean) {
            continue;
          }
          if (paramString1 == null) {}
        }
        catch (Exception paramString1)
        {
          localObject = str;
          paramString1.printStackTrace();
          if (str == null) {
            continue;
          }
          try
          {
            str.close();
            return -1;
          }
          catch (Exception paramString1)
          {
            paramString1.printStackTrace();
            return -1;
          }
        }
        finally
        {
          if (localObject == null) {
            continue;
          }
          try
          {
            ((InputStream)localObject).close();
            throw paramString1;
          }
          catch (Exception paramString2)
          {
            paramString2.printStackTrace();
            continue;
          }
          if (paramString1 == null) {
            break label167;
          }
        }
        try
        {
          paramString1.close();
          i = 1;
          return i;
        }
        catch (Exception paramString1)
        {
          paramString1.printStackTrace();
        }
      }
      str = paramString1;
      localObject = paramString1;
      localFile.delete();
      str = paramString1;
      localObject = paramString1;
      paramString2 = FileUtils.writeFileFromInput(paramString2, paramString1);
      if (paramString2 != null) {
        break label159;
      }
    } while (paramString1 == null);
    try
    {
      paramString1.close();
      return -1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      return -1;
    }
    try
    {
      label159:
      paramString1.close();
      label167:
      return 0;
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
  }
  
  public static int downloadFile2SD(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    int i = -1;
    Object localObject3 = null;
    Object localObject4 = null;
    Object localObject2 = localObject4;
    Object localObject1 = localObject3;
    do
    {
      for (;;)
      {
        try
        {
          boolean bool = FileUtils.isFileExist2SD(paramString2 + paramString3);
          if (!bool) {
            continue;
          }
          if (paramBoolean) {
            continue;
          }
          if (0 == 0) {}
        }
        catch (Exception paramString1)
        {
          localObject1 = localObject2;
          paramString1.printStackTrace();
          if (localObject2 == null) {
            continue;
          }
          try
          {
            ((InputStream)localObject2).close();
            return -1;
          }
          catch (Exception paramString1)
          {
            paramString1.printStackTrace();
            return -1;
          }
        }
        finally
        {
          if (localObject1 == null) {
            continue;
          }
          try
          {
            ((InputStream)localObject1).close();
            throw paramString1;
          }
          catch (Exception paramString2)
          {
            paramString2.printStackTrace();
            continue;
          }
          if (paramString1 == null) {
            break label208;
          }
        }
        try
        {
          throw new NullPointerException();
          i = 1;
          return i;
        }
        catch (Exception paramString1)
        {
          paramString1.printStackTrace();
        }
      }
      localObject2 = localObject4;
      localObject1 = localObject3;
      FileUtils.DeleteFile2SD(paramString2 + paramString3);
      localObject2 = localObject4;
      localObject1 = localObject3;
      paramString1 = getInputStreamFromUrl(paramString1);
      localObject2 = paramString1;
      localObject1 = paramString1;
      paramString2 = FileUtils.write2SDFromInput(paramString2, paramString3, paramString1);
      if (paramString2 != null) {
        break label200;
      }
    } while (paramString1 == null);
    try
    {
      paramString1.close();
      return -1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      return -1;
    }
    try
    {
      label200:
      paramString1.close();
      label208:
      return 0;
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
  }
  
  public static InputStream getInputStreamFromUrl(String paramString)
  {
    return ((HttpURLConnection)new URL(paramString).openConnection()).getInputStream();
  }
}
