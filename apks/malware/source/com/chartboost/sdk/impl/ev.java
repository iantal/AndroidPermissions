package com.chartboost.sdk.impl;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;

public final class ev
{
  long a = 0L;
  long b;
  final ev.a c;
  private final int e;
  private final eu f;
  private final int g;
  private long h = 0L;
  private final List i;
  private List j;
  private final ev.b k;
  private eg l = null;
  
  static
  {
    if (!ev.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      d = bool;
      return;
    }
  }
  
  ev(int paramInt1, eu paramEu, boolean paramBoolean1, boolean paramBoolean2, int paramInt2, List paramList)
  {
    if (paramEu == null) {
      throw new NullPointerException("connection == null");
    }
    if (paramList == null) {
      throw new NullPointerException("requestHeaders == null");
    }
    this.e = paramInt1;
    this.f = paramEu;
    this.b = paramEu.f.d(65536);
    this.k = new ev.b(this, paramEu.e.d(65536), null);
    this.c = new ev.a(this);
    ev.b.a(this.k, paramBoolean2);
    ev.a.a(this.c, paramBoolean1);
    this.g = paramInt2;
    this.i = paramList;
  }
  
  private boolean d(eg paramEg)
  {
    if ((!d) && (Thread.holdsLock(this))) {
      throw new AssertionError();
    }
    try
    {
      if (this.l != null) {
        return false;
      }
      if ((ev.b.a(this.k)) && (ev.a.a(this.c))) {
        return false;
      }
    }
    finally {}
    this.l = paramEg;
    notifyAll();
    this.f.b(this.e);
    return true;
  }
  
  private void h()
  {
    if ((!d) && (Thread.holdsLock(this))) {
      throw new AssertionError();
    }
    for (;;)
    {
      try
      {
        boolean bool;
        if ((!ev.b.a(this.k)) && (ev.b.b(this.k)))
        {
          if (ev.a.a(this.c)) {
            break label112;
          }
          if (ev.a.b(this.c))
          {
            break label112;
            bool = a();
            if (m == 0) {
              break label95;
            }
            a(eg.l);
            return;
          }
        }
        m = 0;
        continue;
        if (bool) {
          continue;
        }
      }
      finally {}
      label95:
      this.f.b(this.e);
      return;
      label112:
      int m = 1;
    }
  }
  
  private void i()
  {
    if (ev.a.b(this.c)) {
      throw new IOException("stream closed");
    }
    if (ev.a.a(this.c)) {
      throw new IOException("stream finished");
    }
    if (this.l != null) {
      throw new IOException("stream was reset: " + this.l);
    }
  }
  
  public void a(long paramLong)
  {
    this.h = paramLong;
  }
  
  void a(dr paramDr, int paramInt)
  {
    if ((!d) && (Thread.holdsLock(this))) {
      throw new AssertionError();
    }
    this.k.a(paramDr, paramInt);
  }
  
  public void a(eg paramEg)
  {
    if (!d(paramEg)) {
      return;
    }
    this.f.b(this.e, paramEg);
  }
  
  void a(List paramList, ek paramEk)
  {
    if ((!d) && (Thread.holdsLock(this))) {
      throw new AssertionError();
    }
    Object localObject = null;
    boolean bool = true;
    label97:
    do
    {
      for (;;)
      {
        try
        {
          if (this.j == null)
          {
            if (paramEk.c())
            {
              paramList = eg.b;
              if (paramList == null) {
                break;
              }
              b(paramList);
              return;
            }
            this.j = paramList;
            bool = a();
            notifyAll();
            paramList = localObject;
            continue;
          }
          if (!paramEk.d()) {
            break label97;
          }
        }
        finally {}
        paramList = eg.e;
        continue;
        paramEk = new ArrayList();
        paramEk.addAll(this.j);
        paramEk.addAll(paramList);
        this.j = paramEk;
        paramList = localObject;
      }
    } while (bool);
    this.f.b(this.e);
  }
  
  /* Error */
  public boolean a()
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_1
    //   2: aload_0
    //   3: monitorenter
    //   4: aload_0
    //   5: getfield 45	com/chartboost/sdk/impl/ev:l	Lcom/chartboost/sdk/impl/eg;
    //   8: astore_2
    //   9: aload_2
    //   10: ifnull +7 -> 17
    //   13: aload_0
    //   14: monitorexit
    //   15: iload_1
    //   16: ireturn
    //   17: aload_0
    //   18: getfield 80	com/chartboost/sdk/impl/ev:k	Lcom/chartboost/sdk/impl/ev$b;
    //   21: invokestatic 114	com/chartboost/sdk/impl/ev$b:a	(Lcom/chartboost/sdk/impl/ev$b;)Z
    //   24: ifne +13 -> 37
    //   27: aload_0
    //   28: getfield 80	com/chartboost/sdk/impl/ev:k	Lcom/chartboost/sdk/impl/ev$b;
    //   31: invokestatic 129	com/chartboost/sdk/impl/ev$b:b	(Lcom/chartboost/sdk/impl/ev$b;)Z
    //   34: ifeq +32 -> 66
    //   37: aload_0
    //   38: getfield 87	com/chartboost/sdk/impl/ev:c	Lcom/chartboost/sdk/impl/ev$a;
    //   41: invokestatic 117	com/chartboost/sdk/impl/ev$a:a	(Lcom/chartboost/sdk/impl/ev$a;)Z
    //   44: ifne +13 -> 57
    //   47: aload_0
    //   48: getfield 87	com/chartboost/sdk/impl/ev:c	Lcom/chartboost/sdk/impl/ev$a;
    //   51: invokestatic 131	com/chartboost/sdk/impl/ev$a:b	(Lcom/chartboost/sdk/impl/ev$a;)Z
    //   54: ifeq +12 -> 66
    //   57: aload_0
    //   58: getfield 175	com/chartboost/sdk/impl/ev:j	Ljava/util/List;
    //   61: astore_2
    //   62: aload_2
    //   63: ifnonnull -50 -> 13
    //   66: iconst_1
    //   67: istore_1
    //   68: goto -55 -> 13
    //   71: astore_2
    //   72: aload_0
    //   73: monitorexit
    //   74: aload_2
    //   75: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	76	0	this	ev
    //   1	67	1	bool	boolean
    //   8	55	2	localObject1	Object
    //   71	4	2	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   4	9	71	finally
    //   17	37	71	finally
    //   37	57	71	finally
    //   57	62	71	finally
  }
  
  void b(long paramLong)
  {
    this.b += paramLong;
    if (paramLong > 0L) {
      notifyAll();
    }
  }
  
  public void b(eg paramEg)
  {
    if (!d(paramEg)) {
      return;
    }
    this.f.a(this.e, paramEg);
  }
  
  public boolean b()
  {
    if ((this.e & 0x1) == 1) {}
    for (int m = 1; this.f.b == m; m = 0) {
      return true;
    }
    return false;
  }
  
  public List c()
  {
    for (;;)
    {
      try
      {
        if (this.h == 0L) {
          break label190;
        }
        l2 = System.nanoTime() / 1000000L;
        l1 = this.h;
        try
        {
          if ((this.j != null) || (this.l != null)) {
            break label142;
          }
          if (this.h == 0L)
          {
            wait();
            continue;
            InterruptedIOException localInterruptedIOException;
            localObject = finally;
          }
        }
        catch (InterruptedException localInterruptedException)
        {
          localInterruptedIOException = new InterruptedIOException();
          localInterruptedIOException.initCause(localInterruptedException);
          throw localInterruptedIOException;
        }
        if (l1 <= 0L) {
          break label112;
        }
      }
      finally {}
      wait(l1);
      long l1 = this.h + l2 - System.nanoTime() / 1000000L;
      continue;
      label112:
      throw new SocketTimeoutException("Read response header timeout. readTimeoutMillis: " + this.h);
      label142:
      if (this.j != null)
      {
        List localList = this.j;
        return localList;
      }
      throw new IOException("stream was reset: " + this.l);
      label190:
      long l2 = 0L;
      l1 = 0L;
    }
  }
  
  void c(eg paramEg)
  {
    try
    {
      if (this.l == null)
      {
        this.l = paramEg;
        notifyAll();
      }
      return;
    }
    finally
    {
      paramEg = finally;
      throw paramEg;
    }
  }
  
  public long d()
  {
    return this.h;
  }
  
  public ee e()
  {
    return this.k;
  }
  
  public ed f()
  {
    try
    {
      if ((this.j == null) && (!b())) {
        throw new IllegalStateException("reply before requesting the sink");
      }
    }
    finally {}
    return this.c;
  }
  
  void g()
  {
    if ((!d) && (Thread.holdsLock(this))) {
      throw new AssertionError();
    }
    try
    {
      ev.b.a(this.k, true);
      boolean bool = a();
      notifyAll();
      if (!bool) {
        this.f.b(this.e);
      }
      return;
    }
    finally {}
  }
}
