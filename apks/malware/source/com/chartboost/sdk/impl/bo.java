package com.chartboost.sdk.impl;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.RectF;
import android.os.Handler;
import android.util.DisplayMetrics;
import com.chartboost.sdk.CBPreferences;
import com.chartboost.sdk.Libraries.CBOrientation.Difference;

public final class bo
  extends bk
{
  private Handler a;
  private float b;
  private long c;
  private Paint d;
  private Paint e;
  private Path f;
  private Path g;
  private RectF h;
  private RectF i;
  private Runnable j = new bo.1(this);
  
  public bo(Context paramContext)
  {
    super(paramContext);
    a(paramContext);
  }
  
  private void a(Context paramContext)
  {
    float f1 = paramContext.getResources().getDisplayMetrics().density;
    this.b = 0.0F;
    this.a = new Handler();
    this.c = ((System.nanoTime() / 1000000.0D));
    this.d = new Paint();
    this.d.setColor(-1);
    this.d.setStyle(Paint.Style.STROKE);
    this.d.setStrokeWidth(f1 * 3.0F);
    this.d.setAntiAlias(true);
    this.e = new Paint();
    this.e.setColor(-1);
    this.e.setStyle(Paint.Style.FILL);
    this.e.setAntiAlias(true);
    this.f = new Path();
    this.g = new Path();
    this.i = new RectF();
    this.h = new RectF();
  }
  
  protected void a(Canvas paramCanvas)
  {
    float f1 = getContext().getResources().getDisplayMetrics().density;
    CBOrientation.Difference localDifference = CBPreferences.getInstance().getForcedOrientationDifference();
    paramCanvas.save();
    if (localDifference.isReverse()) {
      paramCanvas.rotate(180.0F, getWidth() / 2.0F, getHeight() / 2.0F);
    }
    this.h.set(0.0F, 0.0F, getWidth(), getHeight());
    this.h.inset(1.5F * f1, 1.5F * f1);
    int k;
    if (localDifference.isOdd()) {
      k = getWidth();
    }
    for (;;)
    {
      float f2 = k / 2.0F;
      paramCanvas.drawRoundRect(this.h, f2, f2, this.d);
      this.i.set(this.h);
      this.i.inset(3.0F * f1, f1 * 3.0F);
      if (localDifference.isOdd())
      {
        f1 = this.i.width();
        label165:
        f1 /= 2.0F;
        this.f.reset();
        this.f.addRoundRect(this.i, f1, f1, Path.Direction.CW);
        if (!localDifference.isOdd()) {
          break label418;
        }
        f1 = this.i.width();
        label208:
        this.g.reset();
        if (!localDifference.isOdd()) {
          break label429;
        }
        this.g.moveTo(f1, 0.0F);
        this.g.lineTo(f1, f1);
        this.g.lineTo(0.0F, f1 * 2.0F);
        this.g.lineTo(0.0F, f1);
        this.g.close();
        paramCanvas.save();
        k = 1;
      }
      try
      {
        paramCanvas.clipPath(this.f);
        if (k != 0)
        {
          f2 = -f1 + this.b;
          for (;;)
          {
            if (localDifference.isOdd())
            {
              f3 = this.i.height();
              if (f2 >= f3 + f1) {
                break label518;
              }
              if (!localDifference.isOdd()) {
                break label490;
              }
              f3 = this.i.top;
              f3 += f2;
              paramCanvas.save();
              if (!localDifference.isOdd()) {
                break label502;
              }
              paramCanvas.translate(this.i.left, f3);
              paramCanvas.drawPath(this.g, this.e);
              paramCanvas.restore();
              f2 += 2.0F * f1;
              continue;
              k = getHeight();
              break;
              f1 = this.i.height();
              break label165;
              label418:
              f1 = this.i.height();
              break label208;
              label429:
              this.g.moveTo(0.0F, f1);
              this.g.lineTo(f1, f1);
              this.g.lineTo(f1 * 2.0F, 0.0F);
              this.g.lineTo(f1, 0.0F);
            }
          }
        }
      }
      catch (UnsupportedOperationException localUnsupportedOperationException)
      {
        for (;;)
        {
          k = 0;
          continue;
          float f3 = this.i.width();
          continue;
          label490:
          f3 = this.i.left;
          continue;
          label502:
          paramCanvas.translate(f3, this.i.top);
        }
        label518:
        paramCanvas.restore();
        paramCanvas.restore();
        long l = Math.max(0L, 16L - ((System.nanoTime() / 1000000.0D) - this.c));
        this.a.removeCallbacks(this.j);
        this.a.postDelayed(this.j, l);
      }
    }
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    this.a.removeCallbacks(this.j);
    this.a.post(this.j);
  }
  
  protected void onDetachedFromWindow()
  {
    this.a.removeCallbacks(this.j);
    super.onDetachedFromWindow();
  }
  
  protected void onWindowVisibilityChanged(int paramInt)
  {
    super.onWindowVisibilityChanged(paramInt);
    this.a.removeCallbacks(this.j);
    if (paramInt == 0) {
      this.a.post(this.j);
    }
  }
}
