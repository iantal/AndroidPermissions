package com.chartboost.sdk.impl;

import java.net.CookieHandler;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.URLStreamHandlerFactory;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;

public final class ch
  implements Cloneable, URLStreamHandlerFactory
{
  private final cm a = new cm();
  private Proxy b;
  private List c;
  private ProxySelector d;
  private CookieHandler e;
  private ci f;
  private SSLSocketFactory g;
  private HostnameVerifier h;
  private cg i;
  private ce j;
  private boolean k = true;
  private int l;
  private int m;
  
  public ch() {}
  
  private ci a(ResponseCache paramResponseCache)
  {
    if ((paramResponseCache == null) || ((paramResponseCache instanceof ci))) {
      return (ci)paramResponseCache;
    }
    return new dj(paramResponseCache);
  }
  
  /* Error */
  private SSLSocketFactory p()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 59	com/chartboost/sdk/impl/ch:g	Ljavax/net/ssl/SSLSocketFactory;
    //   6: astore_1
    //   7: aload_1
    //   8: ifnonnull +24 -> 32
    //   11: ldc 61
    //   13: invokestatic 67	javax/net/ssl/SSLContext:getInstance	(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;
    //   16: astore_1
    //   17: aload_1
    //   18: aconst_null
    //   19: aconst_null
    //   20: aconst_null
    //   21: invokevirtual 71	javax/net/ssl/SSLContext:init	([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V
    //   24: aload_0
    //   25: aload_1
    //   26: invokevirtual 74	javax/net/ssl/SSLContext:getSocketFactory	()Ljavax/net/ssl/SSLSocketFactory;
    //   29: putfield 59	com/chartboost/sdk/impl/ch:g	Ljavax/net/ssl/SSLSocketFactory;
    //   32: aload_0
    //   33: getfield 59	com/chartboost/sdk/impl/ch:g	Ljavax/net/ssl/SSLSocketFactory;
    //   36: astore_1
    //   37: aload_0
    //   38: monitorexit
    //   39: aload_1
    //   40: areturn
    //   41: astore_1
    //   42: new 76	java/lang/AssertionError
    //   45: dup
    //   46: invokespecial 77	java/lang/AssertionError:<init>	()V
    //   49: athrow
    //   50: astore_1
    //   51: aload_0
    //   52: monitorexit
    //   53: aload_1
    //   54: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	55	0	this	ch
    //   6	34	1	localObject1	Object
    //   41	1	1	localGeneralSecurityException	java.security.GeneralSecurityException
    //   50	4	1	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   11	32	41	java/security/GeneralSecurityException
    //   2	7	50	finally
    //   11	32	50	finally
    //   32	37	50	finally
    //   42	50	50	finally
  }
  
  public int a()
  {
    return this.l;
  }
  
  public ch a(ci paramCi)
  {
    this.f = paramCi;
    return this;
  }
  
  public ch a(List paramList)
  {
    paramList = cs.a(paramList);
    if (!paramList.contains(cj.c)) {
      throw new IllegalArgumentException("protocols doesn't contain http/1.1: " + paramList);
    }
    if (paramList.contains(null)) {
      throw new IllegalArgumentException("protocols must not contain null");
    }
    this.c = cs.a(paramList);
    return this;
  }
  
  public ch a(HostnameVerifier paramHostnameVerifier)
  {
    this.h = paramHostnameVerifier;
    return this;
  }
  
  public ch a(SSLSocketFactory paramSSLSocketFactory)
  {
    this.g = paramSSLSocketFactory;
    return this;
  }
  
  public HttpURLConnection a(URL paramURL)
  {
    return a(paramURL, this.b);
  }
  
  HttpURLConnection a(URL paramURL, Proxy paramProxy)
  {
    String str = paramURL.getProtocol();
    ch localCh = n();
    localCh.b = paramProxy;
    if (str.equals("http")) {
      return new dd(paramURL, localCh);
    }
    if (str.equals("https")) {
      return new de(paramURL, localCh);
    }
    throw new IllegalArgumentException("Unexpected protocol: " + str);
  }
  
  public void a(long paramLong, TimeUnit paramTimeUnit)
  {
    if (paramLong < 0L) {
      throw new IllegalArgumentException("timeout < 0");
    }
    if (paramTimeUnit == null) {
      throw new IllegalArgumentException("unit == null");
    }
    paramLong = paramTimeUnit.toMillis(paramLong);
    if (paramLong > 2147483647L) {
      throw new IllegalArgumentException("Timeout too large.");
    }
    this.l = ((int)paramLong);
  }
  
  public int b()
  {
    return this.m;
  }
  
  public void b(long paramLong, TimeUnit paramTimeUnit)
  {
    if (paramLong < 0L) {
      throw new IllegalArgumentException("timeout < 0");
    }
    if (paramTimeUnit == null) {
      throw new IllegalArgumentException("unit == null");
    }
    paramLong = paramTimeUnit.toMillis(paramLong);
    if (paramLong > 2147483647L) {
      throw new IllegalArgumentException("Timeout too large.");
    }
    this.m = ((int)paramLong);
  }
  
  public Proxy c()
  {
    return this.b;
  }
  
  public URLStreamHandler createURLStreamHandler(String paramString)
  {
    if ((!paramString.equals("http")) && (!paramString.equals("https"))) {
      return null;
    }
    return new ch.1(this, paramString);
  }
  
  public ProxySelector d()
  {
    return this.d;
  }
  
  public CookieHandler e()
  {
    return this.e;
  }
  
  public ci f()
  {
    return this.f;
  }
  
  public SSLSocketFactory g()
  {
    return this.g;
  }
  
  public HostnameVerifier h()
  {
    return this.h;
  }
  
  public cg i()
  {
    return this.i;
  }
  
  public ce j()
  {
    return this.j;
  }
  
  public boolean k()
  {
    return this.k;
  }
  
  public cm l()
  {
    return this.a;
  }
  
  public List m()
  {
    return this.c;
  }
  
  ch n()
  {
    ch localCh = o();
    if (localCh.d == null) {
      localCh.d = ProxySelector.getDefault();
    }
    if (localCh.e == null) {
      localCh.e = CookieHandler.getDefault();
    }
    if (localCh.f == null) {
      localCh.f = a(ResponseCache.getDefault());
    }
    if (localCh.g == null) {
      localCh.g = p();
    }
    if (localCh.h == null) {
      localCh.h = ey.a;
    }
    if (localCh.i == null) {
      localCh.i = cx.a;
    }
    if (localCh.j == null) {
      localCh.j = ce.a();
    }
    if (localCh.c == null) {
      localCh.c = cs.f;
    }
    return localCh;
  }
  
  public ch o()
  {
    try
    {
      ch localCh = (ch)super.clone();
      return localCh;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      throw new AssertionError();
    }
  }
}
