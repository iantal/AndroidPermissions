package com.chartboost.sdk;

import android.app.Activity;
import android.content.Context;
import android.graphics.Color;
import android.os.Handler;
import android.view.View;
import com.chartboost.sdk.Libraries.CBLogging;
import com.chartboost.sdk.Libraries.CBOrientation;
import com.chartboost.sdk.Libraries.e.a;
import com.chartboost.sdk.Model.CBError.CBImpressionError;
import com.chartboost.sdk.Model.a;
import com.chartboost.sdk.impl.be;
import java.util.ArrayList;
import java.util.List;

public abstract class d
{
  public static Handler a = new Handler();
  protected List b = new ArrayList();
  protected List c = new ArrayList();
  protected e.a d;
  protected a e;
  protected CBOrientation f;
  public List g = new ArrayList();
  protected boolean h = true;
  protected boolean i = true;
  private boolean j;
  private d.a k;
  
  public d(a paramA)
  {
    this.e = paramA;
    this.k = null;
    this.f = CBPreferences.getInstance().getOrientation();
    this.j = false;
  }
  
  public static int a(String paramString)
  {
    int m = 0;
    Object localObject;
    if (paramString != null) {
      localObject = paramString;
    }
    try
    {
      if (paramString.startsWith("#"))
      {
        localObject = paramString;
        if (paramString.length() == 5)
        {
          localObject = new StringBuilder(9);
          ((StringBuilder)localObject).append("#");
          m = 0;
          while (m < paramString.length() - 1)
          {
            ((StringBuilder)localObject).append(paramString.charAt(m + 1));
            ((StringBuilder)localObject).append(paramString.charAt(m + 1));
            m += 1;
          }
          localObject = ((StringBuilder)localObject).toString();
        }
      }
      m = Color.parseColor((String)localObject);
      return m;
    }
    catch (IllegalArgumentException paramString)
    {
      CBLogging.d("CBViewProtocol", "error parsing color", paramString);
    }
    return 0;
  }
  
  public CBOrientation a()
  {
    return this.f;
  }
  
  protected abstract d.a a(Context paramContext);
  
  protected void a(CBError.CBImpressionError paramCBImpressionError)
  {
    this.e.a(paramCBImpressionError);
  }
  
  public void a(d.b paramB)
  {
    if (paramB.a()) {
      this.c.remove(paramB);
    }
    this.b.remove(paramB);
    if ((!this.b.isEmpty()) || (b())) {
      return;
    }
    a(CBError.CBImpressionError.INTERNAL);
  }
  
  protected void a(Runnable paramRunnable, long paramLong)
  {
    this.g.add(paramRunnable);
    a.postDelayed(paramRunnable, paramLong);
  }
  
  public void a(String paramString, e.a paramA)
  {
    this.e.a(paramString, paramA);
  }
  
  public void a(boolean paramBoolean, View paramView)
  {
    a(paramBoolean, paramView, true);
  }
  
  public void a(boolean paramBoolean1, View paramView, boolean paramBoolean2)
  {
    int m = 8;
    if (((paramBoolean1) && (paramView.getVisibility() == 0)) || ((!paramBoolean1) && (paramView.getVisibility() == 8))) {
      return;
    }
    if (!paramBoolean2)
    {
      if (paramBoolean1) {
        m = 0;
      }
      paramView.setVisibility(m);
      paramView.setClickable(paramBoolean1);
      return;
    }
    d.1 local1 = new d.1(this, paramBoolean1, paramView);
    be.a(paramBoolean1, paramView, 510L);
    this.g.add(local1);
    a.postDelayed(local1, 510L);
  }
  
  public boolean a(e.a paramA)
  {
    this.d = paramA.a("assets");
    if (this.d.b())
    {
      a(CBError.CBImpressionError.INTERNAL);
      return false;
    }
    return true;
  }
  
  public void b(d.b paramB)
  {
    this.b.add(paramB);
    this.c.add(paramB);
  }
  
  public boolean b()
  {
    if (!this.c.isEmpty()) {
      return false;
    }
    i();
    return true;
  }
  
  public CBError.CBImpressionError c()
  {
    CBError.CBImpressionError localCBImpressionError = null;
    Activity localActivity = Chartboost.sharedChartboost().c();
    if (localActivity == null)
    {
      this.k = null;
      localCBImpressionError = CBError.CBImpressionError.NO_HOST_ACTIVITY;
    }
    do
    {
      return localCBImpressionError;
      if ((!this.i) && (!this.h)) {
        return CBError.CBImpressionError.WRONG_ORIENTATION;
      }
      this.f = CBPreferences.getInstance().getOrientation();
      if (((this.f.isLandscape()) && (!this.i)) || ((this.f.isPortrait()) && (!this.h))) {
        this.f = this.f.rotate90();
      }
      this.k = a(localActivity);
    } while (this.k.a(localActivity));
    this.k = null;
    return CBError.CBImpressionError.INTERNAL;
  }
  
  public void d()
  {
    f();
    int m = 0;
    while (m < this.g.size())
    {
      a.removeCallbacks((Runnable)this.g.get(m));
      m += 1;
    }
    this.g.clear();
  }
  
  public d.a e()
  {
    return this.k;
  }
  
  public void f()
  {
    if (this.k != null) {
      this.k.c();
    }
    this.k = null;
  }
  
  public e.a g()
  {
    return this.d;
  }
  
  protected void h()
  {
    if (this.j) {
      return;
    }
    this.j = true;
    this.e.a();
  }
  
  protected void i()
  {
    this.e.b();
  }
  
  public boolean j()
  {
    return false;
  }
  
  public void k() {}
  
  public void l() {}
}
