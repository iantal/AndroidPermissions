package com.chartboost.sdk.special;

import com.chartboost.sdk.Chartboost;
import com.chartboost.sdk.Chartboost.CBAPIResponseCallback;
import com.chartboost.sdk.Libraries.CBUtility;
import com.chartboost.sdk.Model.CBError.CBImpressionError;
import java.lang.reflect.Method;

public final class ChartboostData
{
  public ChartboostData() {}
  
  public static void get(String paramString, Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    Chartboost localChartboost = Chartboost.sharedChartboost();
    try
    {
      Method localMethod = Chartboost.class.getDeclaredMethod("cacheInterstitialData", new Class[] { String.class, Chartboost.CBAPIResponseCallback.class });
      localMethod.setAccessible(true);
      localMethod.invoke(localChartboost, new Object[] { paramString, paramCBAPIResponseCallback });
      return;
    }
    catch (Exception paramString)
    {
      do
      {
        CBUtility.throwProguardError(paramString);
      } while (paramCBAPIResponseCallback == null);
      paramCBAPIResponseCallback.onFailure(CBError.CBImpressionError.INTERNAL);
    }
  }
  
  public static void getBatch(String paramString, int paramInt, Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    Chartboost localChartboost = Chartboost.sharedChartboost();
    try
    {
      Method localMethod = Chartboost.class.getDeclaredMethod("cacheInterstitialDataBatch", new Class[] { String.class, Integer.TYPE, Chartboost.CBAPIResponseCallback.class });
      localMethod.setAccessible(true);
      localMethod.invoke(localChartboost, new Object[] { paramString, Integer.valueOf(paramInt), paramCBAPIResponseCallback });
      return;
    }
    catch (Exception paramString)
    {
      do
      {
        CBUtility.throwProguardError(paramString);
      } while (paramCBAPIResponseCallback == null);
      paramCBAPIResponseCallback.onFailure(CBError.CBImpressionError.INTERNAL);
    }
  }
  
  public static void show(String paramString, Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    Chartboost localChartboost = Chartboost.sharedChartboost();
    try
    {
      Method localMethod = Chartboost.class.getDeclaredMethod("showInterstitialData", new Class[] { String.class, Chartboost.CBAPIResponseCallback.class });
      localMethod.setAccessible(true);
      localMethod.invoke(localChartboost, new Object[] { paramString, paramCBAPIResponseCallback });
      return;
    }
    catch (Exception paramString)
    {
      do
      {
        CBUtility.throwProguardError(paramString);
      } while (paramCBAPIResponseCallback == null);
      paramCBAPIResponseCallback.onFailure(CBError.CBImpressionError.INTERNAL);
    }
  }
}
