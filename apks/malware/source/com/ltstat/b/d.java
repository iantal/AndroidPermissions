package com.ltstat.b;

import android.content.Context;
import android.content.res.AssetManager;
import com.ltstat.a.e;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import org.apache.http.message.BasicNameValuePair;

public final class d
{
  public static String a(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      InputStream localInputStream = paramContext.getAssets().open(paramString1);
      paramString1 = a(localInputStream);
      int i = paramString1.indexOf(paramString2);
      paramContext = paramString1;
      if (i != -1) {
        paramContext = paramString1.substring(0, i);
      }
      localInputStream.close();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  private static String a(InputStream paramInputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    for (;;)
    {
      int i = paramInputStream.read();
      if (i == -1) {
        break;
      }
      localByteArrayOutputStream.write(i);
    }
    return localByteArrayOutputStream.toString();
  }
  
  public static List a(Properties paramProperties)
  {
    ArrayList localArrayList = new ArrayList();
    paramProperties = paramProperties.entrySet().iterator();
    while (paramProperties.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramProperties.next();
      localArrayList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    return localArrayList;
  }
  
  public static Properties a(String paramString)
  {
    Object localObject = new File(paramString);
    if (!((File)localObject).exists()) {
      return null;
    }
    paramString = new Properties();
    try
    {
      localObject = new FileInputStream((File)localObject);
      paramString.load((InputStream)localObject);
      ((FileInputStream)localObject).close();
      return paramString;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return paramString;
  }
  
  public static Properties a(String paramString, Context paramContext)
  {
    Properties localProperties = new Properties();
    try
    {
      paramString = paramContext.getAssets().open(paramString);
      localProperties.load(paramString);
      paramString.close();
      return localProperties;
    }
    catch (FileNotFoundException paramString)
    {
      paramString.printStackTrace();
      return localProperties;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return localProperties;
  }
  
  public static Properties a(byte[] paramArrayOfByte)
  {
    Properties localProperties = new Properties();
    try
    {
      paramArrayOfByte = new ByteArrayInputStream(paramArrayOfByte);
      localProperties.load(paramArrayOfByte);
      paramArrayOfByte.close();
      return localProperties;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return localProperties;
  }
  
  public static boolean a(Context paramContext, String paramString, File paramFile)
  {
    try
    {
      paramContext = paramContext.getAssets().open(paramString);
      paramString = new FileOutputStream(paramFile);
      paramFile = new byte['Ð€'];
      for (;;)
      {
        int i = paramContext.read(paramFile);
        if (i <= 0) {
          break;
        }
        paramString.write(paramFile, 0, i);
      }
      paramString.close();
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      return false;
    }
    paramContext.close();
    return true;
  }
  
  public static boolean a(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      File localFile = new File(paramString1);
      paramString1 = a(localFile.getAbsolutePath());
      paramString1.put(paramString2, paramString3);
      paramString2 = new FileOutputStream(localFile);
      paramString1.store(paramString2, "hehe");
      paramString2.close();
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static Properties b(String paramString, Context paramContext)
  {
    Properties localProperties = new Properties();
    try
    {
      paramString = paramContext.getAssets().open(paramString);
      paramContext = a(paramString);
      localProperties.load(new ByteArrayInputStream(e.a(new String(new byte[] { 97, 98, 99, 49, 50, 51, 52, 53 }), paramContext).getBytes("UTF-8")));
      paramString.close();
      return localProperties;
    }
    catch (Exception paramString) {}
    return localProperties;
  }
}
