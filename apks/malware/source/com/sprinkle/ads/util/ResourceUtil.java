package com.sprinkle.ads.util;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.Drawable;
import android.util.Log;
import java.lang.ref.WeakReference;
import java.util.HashMap;

public class ResourceUtil
{
  private static final String TAG = "Sprinkle_ResourceUtil";
  private static HashMap mAssetsDrawableMaps = new HashMap();
  private static HashMap mResourceDrawableMaps = new HashMap();
  
  public ResourceUtil() {}
  
  /* Error */
  public static Drawable getDrawableFromAssets(Context paramContext, String paramString)
  {
    // Byte code:
    //   0: getstatic 20	com/sprinkle/ads/util/ResourceUtil:mAssetsDrawableMaps	Ljava/util/HashMap;
    //   3: aload_1
    //   4: invokevirtual 32	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   7: checkcast 34	java/lang/ref/WeakReference
    //   10: astore_2
    //   11: aload_2
    //   12: ifnull +10 -> 22
    //   15: aload_2
    //   16: invokevirtual 37	java/lang/ref/WeakReference:get	()Ljava/lang/Object;
    //   19: ifnonnull +89 -> 108
    //   22: aload_0
    //   23: invokevirtual 43	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   26: new 45	java/lang/StringBuilder
    //   29: dup
    //   30: ldc 47
    //   32: invokespecial 50	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   35: aload_1
    //   36: invokevirtual 54	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   39: invokevirtual 58	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   42: invokevirtual 64	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   45: astore_2
    //   46: new 66	android/graphics/drawable/BitmapDrawable
    //   49: dup
    //   50: aconst_null
    //   51: aload_2
    //   52: invokespecial 69	android/graphics/drawable/BitmapDrawable:<init>	(Landroid/content/res/Resources;Ljava/io/InputStream;)V
    //   55: astore_0
    //   56: getstatic 20	com/sprinkle/ads/util/ResourceUtil:mAssetsDrawableMaps	Ljava/util/HashMap;
    //   59: aload_1
    //   60: new 34	java/lang/ref/WeakReference
    //   63: dup
    //   64: aload_0
    //   65: invokespecial 72	java/lang/ref/WeakReference:<init>	(Ljava/lang/Object;)V
    //   68: invokevirtual 76	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   71: pop
    //   72: aload_2
    //   73: invokevirtual 81	java/io/InputStream:close	()V
    //   76: aload_0
    //   77: areturn
    //   78: astore_1
    //   79: aconst_null
    //   80: astore_0
    //   81: ldc 8
    //   83: new 45	java/lang/StringBuilder
    //   86: dup
    //   87: ldc 83
    //   89: invokespecial 50	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   92: aload_1
    //   93: invokevirtual 86	java/io/IOException:getMessage	()Ljava/lang/String;
    //   96: invokevirtual 54	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   99: invokevirtual 58	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   102: invokestatic 92	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   105: pop
    //   106: aload_0
    //   107: areturn
    //   108: aload_2
    //   109: invokevirtual 37	java/lang/ref/WeakReference:get	()Ljava/lang/Object;
    //   112: checkcast 94	android/graphics/drawable/Drawable
    //   115: areturn
    //   116: astore_1
    //   117: goto -36 -> 81
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	120	0	paramContext	Context
    //   0	120	1	paramString	String
    //   10	99	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   22	56	78	java/io/IOException
    //   56	76	116	java/io/IOException
  }
  
  public static AnimationDrawable getResourceAnimationDrawable(Context paramContext, String paramString)
  {
    return (AnimationDrawable)paramContext.getResources().getDrawable(getResourceId(paramContext, "drawable", paramString));
  }
  
  public static Drawable getResourceDrawable(Context paramContext, String paramString)
  {
    WeakReference localWeakReference = (WeakReference)mResourceDrawableMaps.get(paramString);
    if ((localWeakReference == null) || (localWeakReference.get() == null))
    {
      paramContext = paramContext.getResources().getDrawable(getResourceId(paramContext, "drawable", paramString));
      mResourceDrawableMaps.put(paramString, new WeakReference(paramContext));
      return paramContext;
    }
    return (Drawable)localWeakReference.get();
  }
  
  public static int getResourceId(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      int i = paramContext.getResources().getIdentifier(paramString2, paramString1, paramContext.getPackageName());
      return i;
    }
    catch (Exception paramContext)
    {
      Log.e("Joy_CommonUtil", "Exception:" + paramContext.getMessage());
    }
    return 0;
  }
}
