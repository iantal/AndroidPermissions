package com.sprinkle.ads;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.widget.ImageButton;
import com.sprinkle.ads.util.FrxUtil;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

public class BannerView
  extends ImageButton
{
  public static final int ADSIZE_320X50 = 1;
  private static final String TAG = "Sprinkle_BannerAd";
  private AdListener mAdListener = null;
  private Context mAppContext;
  private Bitmap mBitmap = null;
  private float mDensity;
  private Handler mHandler;
  private SharedPreferences mPrefs;
  
  public BannerView(Context paramContext)
  {
    super(paramContext);
    init();
  }
  
  public BannerView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init();
  }
  
  private String getUninstallPushInfo(Context paramContext)
  {
    int i = 0;
    Object localObject2 = this.mPrefs.getString("banner_type", "");
    Object localObject3 = new ArrayList();
    Object localObject1 = paramContext.getPackageManager().getInstalledPackages(0).iterator();
    Object localObject4;
    if (!((Iterator)localObject1).hasNext())
    {
      localObject1 = this.mPrefs.getString(localObject2 + "_packname", "");
      localObject4 = this.mPrefs.getString(localObject2 + "_pic", "");
      localObject1 = ((String)localObject1).split(",");
    }
    for (;;)
    {
      if (i >= localObject1.length)
      {
        if (this.mAdListener != null) {
          this.mAdListener.onAdFailedToLoad("all apk installed");
        }
        return null;
        ((ArrayList)localObject3).add(((PackageInfo)((Iterator)localObject1).next()).packageName);
        break;
      }
      if (!((ArrayList)localObject3).contains(localObject1[i]))
      {
        localObject3 = localObject4.split(",")[i];
        String str = new File((String)localObject3).getName();
        if (Environment.getExternalStorageState().equals("mounted"))
        {
          localObject4 = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/com.sprinkle.ads");
          if (!((File)localObject4).exists()) {
            ((File)localObject4).mkdirs();
          }
          localObject2 = localObject2 + "_" + str;
          localObject2 = new File(((File)localObject4).getAbsolutePath() + "/" + (String)localObject2);
          if ((!((File)localObject2).exists()) && (FrxUtil.isNetworkAvaliable(paramContext))) {
            loadPicFromService((String)localObject3, ((File)localObject2).getAbsolutePath());
          }
          if (((File)localObject2).exists())
          {
            this.mBitmap = BitmapFactory.decodeFile(((File)localObject2).getAbsolutePath());
            if (this.mBitmap != null) {
              return localObject1[i];
            }
          }
          else if (this.mAdListener != null)
          {
            this.mAdListener.onAdFailedToLoad("file not exist and network unavaliable");
            return null;
          }
        }
        else
        {
          if (FrxUtil.isNetworkAvaliable(paramContext))
          {
            for (;;)
            {
              try
              {
                paramContext = (HttpURLConnection)new URL((String)localObject3).openConnection();
                localObject2 = paramContext.getInputStream();
                paramContext.connect();
                if ((paramContext.getResponseCode() != 200) || (paramContext.getContentLength() <= 0)) {
                  continue;
                }
                this.mBitmap = BitmapFactory.decodeStream((InputStream)localObject2);
                if (this.mBitmap == null) {
                  continue;
                }
                paramContext = localObject1[i];
              }
              catch (Exception localException2)
              {
                paramContext = null;
                continue;
                paramContext = null;
                continue;
              }
              try
              {
                ((InputStream)localObject2).close();
                return paramContext;
              }
              catch (Exception localException1) {}
            }
            Log.e("Sprinkle_BannerAd", "Exception:" + localException1.getMessage());
            return paramContext;
          }
          if (this.mAdListener != null) {
            this.mAdListener.onAdFailedToLoad("sd card disable and network unavaliable");
          }
        }
        return null;
      }
      i += 1;
    }
  }
  
  private void init()
  {
    this.mAppContext = getContext().getApplicationContext();
    this.mDensity = getResources().getDisplayMetrics().density;
    this.mHandler = new Handler(Looper.getMainLooper());
    this.mPrefs = this.mAppContext.getSharedPreferences("com.sprinkle.ads.srvconf", 0);
    setVisibility(8);
    setBackgroundColor(0);
    setPadding(0, 0, 0, 0);
  }
  
  private void loadPicFromService(String paramString1, String paramString2)
  {
    Log.i("Sprinkle_BannerAd", "ad loading...");
    paramString2 = new File(paramString2);
    Object localObject1 = UUID.randomUUID().toString() + ".tmp";
    localObject1 = new File(paramString2.getParent() + "/" + (String)localObject1);
    try
    {
      Object localObject2 = (HttpURLConnection)new URL(paramString1).openConnection();
      paramString1 = ((HttpURLConnection)localObject2).getInputStream();
      ((HttpURLConnection)localObject2).connect();
      int i = ((HttpURLConnection)localObject2).getContentLength();
      BufferedOutputStream localBufferedOutputStream;
      byte[] arrayOfByte;
      if ((((HttpURLConnection)localObject2).getResponseCode() == 200) && (i > 0))
      {
        localObject2 = new FileOutputStream((File)localObject1);
        localBufferedOutputStream = new BufferedOutputStream((OutputStream)localObject2);
        arrayOfByte = new byte['Ð€'];
      }
      for (;;)
      {
        int j = paramString1.read(arrayOfByte);
        if (j == -1)
        {
          localBufferedOutputStream.flush();
          localBufferedOutputStream.close();
          ((FileOutputStream)localObject2).close();
          if ((((File)localObject1).exists()) && (((File)localObject1).length() == i)) {
            ((File)localObject1).renameTo(paramString2);
          }
          paramString1.close();
          return;
        }
        localBufferedOutputStream.write(arrayOfByte, 0, j);
      }
      return;
    }
    catch (Exception paramString1)
    {
      Log.e("Sprinkle_BannerAd", "Exception:" + paramString1.getMessage());
    }
  }
  
  private Bitmap scaleBitmap(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    float f1 = paramInt1 / i;
    float f2 = paramInt2 / j;
    Matrix localMatrix = new Matrix();
    localMatrix.postScale(f1, f2);
    return Bitmap.createBitmap(paramBitmap, 0, 0, i, j, localMatrix, true);
  }
  
  private void showBannerad()
  {
    if (this.mPrefs.getInt("status", 1) == 0) {
      if (this.mAdListener != null) {
        this.mAdListener.onAdFailedToLoad("status = 0");
      }
    }
    String str;
    do
    {
      return;
      str = getUninstallPushInfo(this.mAppContext);
    } while ((str == null) || ("".equals(str)) || (this.mBitmap == null));
    this.mHandler.post(new BannerView.2(this, str));
  }
  
  public void load()
  {
    new Thread(new BannerView.1(this)).start();
  }
  
  public BannerView loadAd(int paramInt)
  {
    return this;
  }
  
  public BannerView setAdListener(AdListener paramAdListener)
  {
    this.mAdListener = paramAdListener;
    return this;
  }
}
