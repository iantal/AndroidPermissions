package com.sprinkle.ads;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.util.Log;
import com.sprinkle.ads.util.FrxUtil;
import com.sprinkle.ads.util.SprinkleUtil;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.SoftReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.UUID;

public class InterstitialAd
{
  public static final int ADTYPE_FULLSCREEN = 0;
  public static final int ADTYPE_HALFSCREEN = 1;
  public static final int ADTYPE_VIDEO = 2;
  private static final String TAG = "Sprinkle_InterstitialAd";
  private SoftReference mActivityRef = null;
  private AdListener mAdListener = null;
  private Context mAppContext = null;
  private SharedPreferences mPrefs = null;
  
  public InterstitialAd(Activity paramActivity)
  {
    this.mActivityRef = new SoftReference(paramActivity);
    this.mAppContext = paramActivity.getApplicationContext();
    this.mPrefs = this.mAppContext.getSharedPreferences("com.sprinkle.ads.srvconf", 0);
  }
  
  private String getUninstallPushInfo(Context paramContext)
  {
    Object localObject1;
    String str1;
    Object localObject2;
    String str2;
    int i;
    if (this.mAppContext.getResources().getConfiguration().orientation == 1)
    {
      localObject1 = "portrait";
      str1 = this.mPrefs.getString("fullad_type", "");
      localObject2 = this.mPrefs.getString(str1 + "_" + (String)localObject1 + "_packname", "");
      str2 = this.mPrefs.getString(str1 + "_" + (String)localObject1 + "_pic", "");
      localObject2 = ((String)localObject2).split(",");
      i = 0;
    }
    for (;;)
    {
      if (i >= localObject2.length)
      {
        if (this.mAdListener != null) {
          this.mAdListener.onAdFailedToLoad("all apk installed");
        }
        return null;
        localObject1 = "landscape";
        break;
      }
      if (!FrxUtil.isInstalledPackage(paramContext, localObject2[i].trim()))
      {
        str2 = str2.split(",")[i].trim();
        String str3 = new File(str2).getName();
        if (Environment.getExternalStorageState().equals("mounted"))
        {
          File localFile = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + "com.sprinkle.ads");
          if (!localFile.exists()) {
            localFile.mkdirs();
          }
          localObject1 = str1 + "_" + (String)localObject1 + "_" + str3;
          localObject1 = new File(localFile.getAbsolutePath() + "/" + (String)localObject1);
          if ((!((File)localObject1).exists()) && (FrxUtil.isNetworkAvaliable(paramContext))) {
            loadPicFromService(str2, ((File)localObject1).getAbsolutePath());
          }
          if (((File)localObject1).exists())
          {
            paramContext = BitmapFactory.decodeFile(((File)localObject1).getAbsolutePath());
            if (paramContext != null)
            {
              AdActivity.setBitmap(paramContext);
              return localObject2[i].trim();
            }
          }
          else if (this.mAdListener != null)
          {
            this.mAdListener.onAdFailedToLoad("file not exist and network unavaliable");
            return null;
          }
        }
        else
        {
          if (FrxUtil.isNetworkAvaliable(paramContext))
          {
            for (;;)
            {
              try
              {
                paramContext = (HttpURLConnection)new URL(str2).openConnection();
                localObject1 = paramContext.getInputStream();
                paramContext.connect();
                if ((paramContext.getResponseCode() != 200) || (paramContext.getContentLength() <= 0)) {
                  continue;
                }
                paramContext = BitmapFactory.decodeStream((InputStream)localObject1);
                if (paramContext == null) {
                  continue;
                }
                AdActivity.setBitmap(paramContext);
                paramContext = localObject2[i].trim();
              }
              catch (Exception localException2)
              {
                paramContext = null;
                continue;
                paramContext = null;
                continue;
              }
              try
              {
                ((InputStream)localObject1).close();
                return paramContext;
              }
              catch (Exception localException1) {}
            }
            Log.e("Sprinkle_InterstitialAd", "Exception:" + localException1.getMessage());
            return paramContext;
          }
          if (this.mAdListener != null) {
            this.mAdListener.onAdFailedToLoad("sd card disable and network unavaliable");
          }
        }
        return null;
      }
      i += 1;
    }
  }
  
  private void loadPicFromService(String paramString1, String paramString2)
  {
    Log.i("Sprinkle_InterstitialAd", "ad loading...");
    paramString2 = new File(paramString2);
    Object localObject1 = UUID.randomUUID().toString() + ".tmp";
    localObject1 = new File(paramString2.getParent() + "/" + (String)localObject1);
    try
    {
      Object localObject2 = (HttpURLConnection)new URL(paramString1).openConnection();
      paramString1 = ((HttpURLConnection)localObject2).getInputStream();
      ((HttpURLConnection)localObject2).connect();
      int i = ((HttpURLConnection)localObject2).getContentLength();
      BufferedOutputStream localBufferedOutputStream;
      byte[] arrayOfByte;
      if ((((HttpURLConnection)localObject2).getResponseCode() == 200) && (i > 0))
      {
        localObject2 = new FileOutputStream((File)localObject1);
        localBufferedOutputStream = new BufferedOutputStream((OutputStream)localObject2);
        arrayOfByte = new byte['Ð€'];
      }
      for (;;)
      {
        int j = paramString1.read(arrayOfByte);
        if (j == -1)
        {
          localBufferedOutputStream.flush();
          localBufferedOutputStream.close();
          ((FileOutputStream)localObject2).close();
          if ((((File)localObject1).exists()) && (((File)localObject1).length() == i)) {
            ((File)localObject1).renameTo(paramString2);
          }
          paramString1.close();
          return;
        }
        localBufferedOutputStream.write(arrayOfByte, 0, j);
      }
      return;
    }
    catch (Exception paramString1)
    {
      Log.e("Sprinkle_InterstitialAd", "Exception:" + paramString1.getMessage());
    }
  }
  
  private void realShow()
  {
    SprinkleUtil.updateServiceConfig(this.mAppContext);
    showFullad();
  }
  
  private void showFullad()
  {
    if (this.mPrefs.getInt("status", 1) == 0) {
      if (this.mAdListener != null) {
        this.mAdListener.onAdFailedToLoad("status=0");
      }
    }
    String str;
    do
    {
      return;
      str = getUninstallPushInfo(this.mAppContext);
    } while (str == null);
    if ("fullscreen".equals(this.mPrefs.getString("fullad_type", "fullscreen"))) {}
    for (int i = 0;; i = 1)
    {
      Intent localIntent = new Intent((Context)this.mActivityRef.get(), AdActivity.class);
      localIntent.putExtra("adType", i);
      localIntent.putExtra("adPackname", str);
      ((Activity)this.mActivityRef.get()).startActivity(localIntent);
      Log.i("Sprinkle_InterstitialAd", "show ad packname:" + str);
      if (this.mAdListener == null) {
        break;
      }
      this.mAdListener.onAdLoaded();
      return;
    }
  }
  
  public InterstitialAd setAdListener(AdListener paramAdListener)
  {
    this.mAdListener = paramAdListener;
    return this;
  }
  
  public void show()
  {
    new Thread(new InterstitialAd.1(this)).start();
  }
}
