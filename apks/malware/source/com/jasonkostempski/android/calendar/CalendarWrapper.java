package com.jasonkostempski.android.calendar;

import android.text.format.DateFormat;
import android.text.format.DateUtils;
import java.util.Calendar;

public class CalendarWrapper
{
  private Calendar _calendar = Calendar.getInstance();
  private OnDateChangedListener _onDateChangedListener;
  private String[] _shortDayNames = new String[this._calendar.getActualMaximum(7)];
  private String[] _shortMonthNames = new String[this._calendar.getActualMaximum(2) + 1];
  private Calendar _visibleEndDate;
  private Calendar _visibleStartDate;
  
  public CalendarWrapper()
  {
    int i = 0;
    while (i < this._shortDayNames.length)
    {
      this._shortDayNames[i] = DateUtils.getDayOfWeekString(i + 1, 30);
      i += 1;
    }
    i = 0;
    while (i < this._shortMonthNames.length)
    {
      this._shortMonthNames[i] = DateUtils.getMonthString(i, 30);
      i += 1;
    }
  }
  
  private void invokeDateChangedListener()
  {
    if (this._onDateChangedListener != null) {
      this._onDateChangedListener.onDateChanged(this);
    }
  }
  
  public void addDay(int paramInt)
  {
    if (paramInt != 0)
    {
      this._calendar.add(5, paramInt);
      invokeDateChangedListener();
    }
  }
  
  public void addMonth(int paramInt)
  {
    if (paramInt != 0)
    {
      this._calendar.add(2, paramInt);
      invokeDateChangedListener();
    }
  }
  
  public void addMonthSetDay(int paramInt1, int paramInt2)
  {
    this._calendar.add(2, paramInt1);
    this._calendar.set(5, paramInt2);
    invokeDateChangedListener();
  }
  
  public void addYear(int paramInt)
  {
    if (paramInt != 0)
    {
      this._calendar.add(1, paramInt);
      invokeDateChangedListener();
    }
  }
  
  public int[] get7x6DayArray()
  {
    this._visibleStartDate = null;
    this._visibleEndDate = null;
    int[] arrayOfInt = new int[42];
    Calendar localCalendar = (Calendar)this._calendar.clone();
    localCalendar.set(5, 1);
    int i = localCalendar.get(7);
    int n = localCalendar.getActualMaximum(5);
    int m = i - 1;
    int j = 0;
    i = 0;
    if (m > 0)
    {
      localCalendar.set(5, -1);
      int i1 = localCalendar.getActualMaximum(5);
      k = m;
      for (;;)
      {
        j = i;
        if (k <= 0) {
          break;
        }
        j = i1 - k + 1;
        if (k == m)
        {
          this._visibleStartDate = ((Calendar)localCalendar.clone());
          this._visibleStartDate.set(5, j);
        }
        arrayOfInt[i] = j;
        i += 1;
        k -= 1;
      }
    }
    int k = 0;
    i = j;
    j = k;
    while (j < n)
    {
      if ((j == 0) && (this._visibleStartDate == null)) {
        this._visibleStartDate = ((Calendar)localCalendar.clone());
      }
      arrayOfInt[i] = (j + 1);
      i += 1;
      j += 1;
    }
    k = 1;
    j = i;
    while (j < arrayOfInt.length)
    {
      if (j == i) {
        arrayOfInt[i] = k;
      }
      k += 1;
      i += 1;
      j += 1;
    }
    this._visibleEndDate = ((Calendar)this._calendar.clone());
    this._visibleEndDate.add(2, 1);
    this._visibleEndDate.set(5, arrayOfInt[41]);
    return arrayOfInt;
  }
  
  public int getDay()
  {
    return this._calendar.get(5);
  }
  
  public int getDayOfWeek()
  {
    return this._calendar.get(7);
  }
  
  public int getMonth()
  {
    return this._calendar.get(2);
  }
  
  public Calendar getSelectedDay()
  {
    return (Calendar)this._calendar.clone();
  }
  
  public String[] getShortDayNames()
  {
    return this._shortDayNames;
  }
  
  public String[] getShortMonthNames()
  {
    return this._shortMonthNames;
  }
  
  public Calendar getVisibleEndDate()
  {
    return (Calendar)this._visibleEndDate.clone();
  }
  
  public Calendar getVisibleStartDate()
  {
    return (Calendar)this._visibleStartDate.clone();
  }
  
  public int getYear()
  {
    return this._calendar.get(1);
  }
  
  public void setDay(int paramInt)
  {
    this._calendar.set(5, paramInt);
    invokeDateChangedListener();
  }
  
  public void setMonth(int paramInt)
  {
    this._calendar.set(2, paramInt);
    invokeDateChangedListener();
  }
  
  public void setOnDateChangedListener(OnDateChangedListener paramOnDateChangedListener)
  {
    this._onDateChangedListener = paramOnDateChangedListener;
  }
  
  public void setSelectedDay(Calendar paramCalendar)
  {
    this._calendar.setTime(paramCalendar.getTime());
    invokeDateChangedListener();
  }
  
  public void setYear(int paramInt)
  {
    this._calendar.set(1, paramInt);
    invokeDateChangedListener();
  }
  
  public void setYearAndMonth(int paramInt1, int paramInt2)
  {
    this._calendar.set(1, paramInt1);
    this._calendar.set(2, paramInt2);
    invokeDateChangedListener();
  }
  
  public String toString(CharSequence paramCharSequence)
  {
    return DateFormat.format(paramCharSequence, this._calendar).toString();
  }
  
  public static abstract interface OnDateChangedListener
  {
    public abstract void onDateChanged(CalendarWrapper paramCalendarWrapper);
  }
}
