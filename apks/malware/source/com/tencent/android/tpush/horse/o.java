package com.tencent.android.tpush.horse;

import android.text.TextUtils;
import com.qq.taf.jce.JceInputStream;
import com.qq.taf.jce.JceOutputStream;
import com.qq.taf.jce.JceStruct;
import com.tencent.android.tpush.XGPush4Msdk;
import com.tencent.android.tpush.horse.data.StrategyItem;
import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.channel.b.a;
import com.tencent.android.tpush.service.channel.b.b;
import com.tencent.android.tpush.service.channel.b.g;
import com.tencent.android.tpush.service.channel.b.h;
import com.tencent.android.tpush.service.channel.exception.HorseIgnoreException;
import com.tencent.android.tpush.service.channel.exception.InnerException;
import com.tencent.android.tpush.service.channel.exception.UnexpectedDataException;
import com.tencent.android.tpush.service.channel.protocol.TpnsRedirectRsp;
import com.tencent.android.tpush.service.d.d;
import com.tencent.android.tpush.service.l;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;

public class o
{
  private SocketChannel a;
  private ArrayBlockingQueue b = new ArrayBlockingQueue(1);
  private StrategyItem c;
  private long d;
  private long e;
  
  public o() {}
  
  private InetSocketAddress b(StrategyItem paramStrategyItem)
  {
    TLog.v("XGService", "@@ getSocketAddress()");
    if ((paramStrategyItem.d() == 1) && (paramStrategyItem.h())) {
      return new InetSocketAddress(paramStrategyItem.c(), paramStrategyItem.e());
    }
    return new InetSocketAddress(paramStrategyItem.a(), paramStrategyItem.b());
  }
  
  private void d()
  {
    TLog.v("XGService", "@@ notifyFail()");
    try
    {
      p localP = (p)this.b.remove();
      if (localP != null) {
        localP.b(this.c);
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        TLog.e("XGService", localException.getMessage());
      }
    }
    this.e = System.currentTimeMillis();
  }
  
  public SocketChannel a()
  {
    return this.a;
  }
  
  public void a(JceStruct paramJceStruct)
  {
    TLog.v("XGService", "@@ send(" + paramJceStruct + ")");
    Object localObject = new JceOutputStream();
    ((JceOutputStream)localObject).setServerEncoding("UTF-8");
    paramJceStruct.writeTo((JceOutputStream)localObject);
    paramJceStruct = new h(1);
    paramJceStruct.b((short)10);
    paramJceStruct.a((short)10);
    paramJceStruct.a(((JceOutputStream)localObject).getByteBuffer().array());
    try
    {
      localObject = new ByteArrayOutputStream();
      if (this.c.d() == 0) {
        while (!paramJceStruct.b()) {
          paramJceStruct.a((OutputStream)localObject);
        }
      }
      b localB;
      return;
    }
    catch (InnerException paramJceStruct)
    {
      TLog.e("XGService", paramJceStruct.getMessage());
      d();
      throw new HorseIgnoreException(paramJceStruct);
      localB = new b(this.c.a(), "http://" + this.c.a() + ":" + this.c.b() + "/");
      if (this.c.h()) {
        localB.a("X-Online-Host", this.c.a() + ":" + this.c.b());
      }
      localB.a(paramJceStruct);
      while (!localB.b()) {
        localB.a((OutputStream)localObject);
      }
    }
    catch (IOException paramJceStruct)
    {
      TLog.e("XGService", paramJceStruct.getMessage());
      d();
      throw new HorseIgnoreException(paramJceStruct);
      ((ByteArrayOutputStream)localObject).writeTo(this.a.socket().getOutputStream());
      ((ByteArrayOutputStream)localObject).flush();
      return;
    }
    catch (UnexpectedDataException paramJceStruct)
    {
      TLog.e("XGService", paramJceStruct.getMessage());
      d();
      throw new HorseIgnoreException(paramJceStruct);
    }
    catch (Exception paramJceStruct)
    {
      TLog.e("XGService", paramJceStruct.getMessage());
      d();
    }
  }
  
  public void a(StrategyItem paramStrategyItem)
  {
    TLog.v("XGService", "@@ connect to server (" + paramStrategyItem + ")");
    this.d = System.currentTimeMillis();
    this.c = paramStrategyItem;
    try
    {
      localObject = XGPush4Msdk.getDebugServerInfo(l.f());
      if (!d.a((String)localObject))
      {
        localObject = ((String)localObject).split(",");
        if ((localObject.length == 2) && (localObject[0].length() > 4))
        {
          this.c = new StrategyItem(localObject[0], Integer.valueOf(localObject[1]).intValue(), paramStrategyItem.c(), paramStrategyItem.e(), paramStrategyItem.d(), 0);
          TLog.w("XGService", "@@ connect to debug server (" + this.c + ")");
        }
      }
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        try
        {
          this.a = SocketChannel.open();
          this.a.configureBlocking(true);
          Object localObject = b(this.c);
          this.a.socket().connect((SocketAddress)localObject, e.b());
          this.a.socket().setSoTimeout(e.c());
          return;
        }
        catch (AssertionError localAssertionError)
        {
          TLog.e("XGService", localAssertionError.getMessage());
          d();
          if (paramStrategyItem != null) {
            continue;
          }
          paramStrategyItem = "null";
          throw new HorseIgnoreException(paramStrategyItem, localAssertionError);
          paramStrategyItem = paramStrategyItem.toString();
          continue;
        }
        catch (Exception localException2)
        {
          TLog.e("XGService", localException2.getMessage());
          d();
          if (paramStrategyItem != null) {
            break label280;
          }
        }
        localException1 = localException1;
        localException1.printStackTrace();
      }
    }
    label280:
    for (paramStrategyItem = "null";; paramStrategyItem = paramStrategyItem.toString()) {
      throw new HorseIgnoreException(paramStrategyItem, localException2);
    }
  }
  
  public void a(p paramP)
  {
    TLog.v("XGService", "@@ register(" + paramP + ")");
    try
    {
      this.b.add(paramP);
      return;
    }
    catch (Exception paramP)
    {
      TLog.e("XGService", paramP.getMessage());
    }
  }
  
  public void b()
  {
    int j = 0;
    int i = 0;
    TLog.v("XGService", "@@ recv()");
    if (this.c == null)
    {
      d();
      throw new HorseIgnoreException("Recv() fail,because mStrategyItem is null");
    }
    Object localObject4;
    ByteArrayInputStream localByteArrayInputStream;
    if ((this.c != null) && (this.c.d() == 0))
    {
      g localG = new g();
      try
      {
        localObject3 = this.a.socket().getInputStream();
        localObject4 = new byte['Ѐ'];
        localByteArrayInputStream = new ByteArrayInputStream((byte[])localObject4);
        while (!localG.b())
        {
          i = ((InputStream)localObject3).read((byte[])localObject4, i, localObject4.length - i);
          localG.a(localByteArrayInputStream);
        }
        byte[] arrayOfByte1;
        localA = null;
      }
      catch (UnexpectedDataException localUnexpectedDataException1)
      {
        TLog.e("XGService", "recv error", localUnexpectedDataException1);
        d();
        throw new HorseIgnoreException(localUnexpectedDataException1);
        arrayOfByte1 = localUnexpectedDataException1.i();
        if (arrayOfByte1 != null) {
          break label487;
        }
        TLog.e("XGService", ">> dataBuffer is null");
        d();
        return;
      }
      catch (IOException localIOException1)
      {
        TLog.e("XGService", "recv error", localIOException1);
        d();
        throw new HorseIgnoreException(localIOException1);
      }
      catch (InnerException localInnerException1)
      {
        TLog.e("XGService", "recv error", localInnerException1);
        d();
        throw new HorseIgnoreException(localInnerException1);
      }
      catch (IndexOutOfBoundsException localIndexOutOfBoundsException1)
      {
        TLog.e("XGService", "recv error", localIndexOutOfBoundsException1);
        d();
        throw new HorseIgnoreException(localIndexOutOfBoundsException1);
      }
      catch (Exception localException1)
      {
        TLog.e("XGService", "recv error", localException1);
        d();
      }
    }
    for (;;)
    {
      break;
      a localA = new a();
      try
      {
        localObject3 = this.a.socket().getInputStream();
        localObject4 = new byte['Ѐ'];
        localByteArrayInputStream = new ByteArrayInputStream((byte[])localObject4);
        i = j;
        while (!localA.b())
        {
          i += ((InputStream)localObject3).read((byte[])localObject4, i, localObject4.length - i);
          localA.a(localByteArrayInputStream);
        }
      }
      catch (UnexpectedDataException localUnexpectedDataException2)
      {
        TLog.e("XGService", localUnexpectedDataException2.getMessage());
        d();
        throw new HorseIgnoreException(localUnexpectedDataException2);
        if ((localUnexpectedDataException2 != null) && (localUnexpectedDataException2.i != null) && (localUnexpectedDataException2.i.size() > 0))
        {
          byte[] arrayOfByte2 = ((g)localUnexpectedDataException2.i.get(0)).i();
          break;
        }
        TLog.e("XGService", ">> packet is null or packet.recvPackets is null");
        d();
        return;
      }
      catch (IOException localIOException2)
      {
        TLog.e("XGService", localIOException2.getMessage());
        d();
        throw new HorseIgnoreException(localIOException2);
      }
      catch (InnerException localInnerException2)
      {
        TLog.e("XGService", localInnerException2.getMessage());
        d();
        throw new HorseIgnoreException(localInnerException2);
      }
      catch (IndexOutOfBoundsException localIndexOutOfBoundsException2)
      {
        TLog.e("XGService", localIndexOutOfBoundsException2.getMessage());
        d();
        throw new HorseIgnoreException(localIndexOutOfBoundsException2);
      }
      catch (Exception localException2)
      {
        TLog.e("XGService", localException2.getMessage());
        d();
      }
    }
    label487:
    Object localObject1 = new JceInputStream(localException2);
    ((JceInputStream)localObject1).setServerEncoding("UTF-8");
    Object localObject3 = new TpnsRedirectRsp();
    ((TpnsRedirectRsp)localObject3).readFrom((JceInputStream)localObject1);
    TLog.i("XGService", "redirect ip=" + ((TpnsRedirectRsp)localObject3).ip + " port=" + ((TpnsRedirectRsp)localObject3).port);
    try
    {
      localObject1 = (p)this.b.remove();
      if (localObject1 != null)
      {
        localObject4 = d.a(((TpnsRedirectRsp)localObject3).ip);
        i = ((TpnsRedirectRsp)localObject3).port;
        localObject3 = new StrategyItem((String)localObject4, i, this.c.c(), this.c.e(), this.c.d(), this.c.f());
        if ((!TextUtils.isEmpty((CharSequence)localObject4)) && (i != 0)) {
          break label681;
        }
        if (localObject1 != null) {
          ((p)localObject1).a(this.c);
        }
      }
      this.e = System.currentTimeMillis();
      return;
    }
    catch (Exception localException3)
    {
      for (;;)
      {
        TLog.e("XGService", localException3.getMessage());
        Object localObject2 = null;
        continue;
        label681:
        ((StrategyItem)localObject3).a(1);
        if (localObject2 != null) {
          localObject2.a(this.c, (StrategyItem)localObject3);
        }
      }
    }
  }
  
  public void c()
  {
    TLog.v("XGService", "@@ close()");
    try
    {
      this.a.close();
      this.b.clear();
      return;
    }
    catch (Exception localException)
    {
      TLog.e("XGService", localException.getMessage());
    }
  }
}
