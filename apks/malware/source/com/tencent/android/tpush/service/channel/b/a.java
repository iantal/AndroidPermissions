package com.tencent.android.tpush.service.channel.b;

import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.channel.exception.IORefusedException;
import com.tencent.android.tpush.service.channel.exception.InnerException;
import com.tencent.android.tpush.service.channel.exception.UnexpectedDataException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class a
  extends f
  implements d
{
  private static final Pattern k = Pattern.compile("\\A(\\S+) +(\\d+) +(.*)\r\n");
  private static final Pattern l = Pattern.compile("(.*) *: *(.*)\r\n");
  protected StringBuffer a = new StringBuffer();
  protected String b;
  public int c;
  protected String d;
  protected final HashMap e = new HashMap();
  protected int f = -1;
  protected int g = 0;
  protected int h = -1;
  public final ArrayList i = new ArrayList();
  private int m = 0;
  private g n = null;
  
  public a() {}
  
  public int a(InputStream paramInputStream)
  {
    int i1 = 0;
    int i2 = 0;
    int j = 0;
    TLog.d("Channel.HttpRecvPacket", ">>> read(" + paramInputStream + ")");
    c();
    if (paramInputStream.available() == 0) {}
    for (;;)
    {
      return j;
      try
      {
        this.g = 0;
        j = i1;
        i2 = i1;
        if (!b())
        {
          i2 = i1;
          j = this.g;
          i2 = i1;
          this.g = (j + 1);
          if (j > 2)
          {
            i2 = i1;
            throw new InnerException("the duration of the current step is too long!");
          }
        }
      }
      catch (IORefusedException paramInputStream)
      {
        TLog.d("Channel.HttpRecvPacket", "read >>> IORefusedException thrown", paramInputStream);
        return i2;
      }
    }
    i2 = i1;
    switch (this.h)
    {
    }
    for (;;)
    {
      i2 = i1;
      throw new InnerException("illegal step value!");
      i2 = i1;
      j = i1 + b(paramInputStream);
      for (;;)
      {
        i1 = j;
        i2 = j;
        if (this.h == 0) {
          break;
        }
        i1 = j;
        i2 = j;
        if (paramInputStream.available() != 0) {
          break;
        }
        return j;
        i2 = i1;
        j = i1 + c(paramInputStream);
        continue;
        i2 = i1;
        j = i1 + d(paramInputStream);
        continue;
        i2 = i1;
        d();
        j = i1;
      }
    }
  }
  
  void a(int paramInt)
  {
    if (this.h != paramInt) {
      this.g = 0;
    }
    this.h = paramInt;
  }
  
  protected int b(InputStream paramInputStream)
  {
    int i1 = paramInputStream.available();
    int j = 0;
    int i2 = j;
    if (i1 > 0)
    {
      j += 1;
      i2 = paramInputStream.read();
      switch (i2)
      {
      default: 
        this.a.append((char)i2);
      }
      do
      {
        i1 -= 1;
        break;
        throw new IOException("the end of stream has been reached!");
        this.a.append((char)i2);
        i2 = this.a.length();
      } while ((i2 < 4) || (!"\r\n\r\n".contentEquals(this.a.subSequence(i2 - 4, i2))));
      paramInputStream = k.matcher(this.a.subSequence(0, this.a.length()));
      if ((!paramInputStream.find()) || (paramInputStream.groupCount() != 3)) {
        break label426;
      }
      this.b = paramInputStream.group(1);
      try
      {
        this.c = Integer.parseInt(paramInputStream.group(2).trim());
        this.d = paramInputStream.group(3);
        paramInputStream = l.matcher(this.a.subSequence(0, this.a.length()));
        while ((paramInputStream.find()) && (paramInputStream.groupCount() == 2)) {
          this.e.put(paramInputStream.group(1).toLowerCase(Locale.US), paramInputStream.group(2));
        }
        if (!this.e.containsKey("Transfer-Encoding".toLowerCase(Locale.US))) {
          break label342;
        }
      }
      catch (NumberFormatException paramInputStream)
      {
        TLog.e("TPush", paramInputStream.getMessage());
        throw new UnexpectedDataException("http statusLine can not parsed!");
      }
      if (((String)this.e.get("Transfer-Encoding".toLowerCase(Locale.US))).equalsIgnoreCase("chunked"))
      {
        this.f = -1;
        a(-3);
        i2 = j;
      }
    }
    else
    {
      return i2;
    }
    label342:
    if (this.e.get("Content-Length".toLowerCase(Locale.US)) != null) {
      try
      {
        this.f = Integer.parseInt(((String)this.e.get("Content-Length".toLowerCase(Locale.US))).trim());
        a(-2);
        return j;
      }
      catch (NumberFormatException paramInputStream)
      {
        TLog.e("TPush", paramInputStream.getMessage());
        throw new UnexpectedDataException("http Content-Length can not parsed!");
      }
    }
    throw new UnexpectedDataException("http Content-Length == null && Transfer-Encoding not equal to 'chunked'!");
    label426:
    throw new UnexpectedDataException("http statusLine can not parsed!");
  }
  
  protected int c(InputStream paramInputStream)
  {
    int i1;
    for (int j = 0;; j = i1)
    {
      if (paramInputStream.available() >= 0)
      {
        if (this.m > this.f) {
          throw new UnexpectedDataException("readBodyLength > contentLength ?!!");
        }
        if (this.m == this.f)
        {
          if (this.n != null) {
            throw new InnerException("currentRecvPacket != null ?!!");
          }
          a(0);
        }
      }
      else
      {
        return j;
      }
      if (this.n == null)
      {
        this.n = new g();
        this.n.a(this.j);
      }
      int i2 = this.n.a(paramInputStream);
      i1 = j + i2;
      this.m += i2;
      TLog.v("HttpRecvPacket", "readLen:" + i1 + ",bodyLen:" + this.m + ",curLen:" + i2);
      if (this.n.b())
      {
        this.i.add(this.n);
        this.n = null;
      }
      if (j == i1) {
        return i1;
      }
    }
  }
  
  protected int d(InputStream paramInputStream)
  {
    throw new InnerException("not support chunked transfer encoding!");
  }
}
