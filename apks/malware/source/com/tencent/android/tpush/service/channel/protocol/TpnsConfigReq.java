package com.tencent.android.tpush.service.channel.protocol;

import com.qq.taf.jce.JceDisplayer;
import com.qq.taf.jce.JceInputStream;
import com.qq.taf.jce.JceOutputStream;
import com.qq.taf.jce.JceStruct;
import com.qq.taf.jce.JceUtil;

public final class TpnsConfigReq
  extends JceStruct
  implements Cloneable
{
  public long confVersion = 0L;
  
  static
  {
    if (!TpnsConfigReq.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      $assertionsDisabled = bool;
      return;
    }
  }
  
  public TpnsConfigReq() {}
  
  public TpnsConfigReq(long paramLong)
  {
    this.confVersion = paramLong;
  }
  
  public String className()
  {
    return "TPNS_CLIENT_PROTOCOL.TpnsConfigReq";
  }
  
  public Object clone()
  {
    Object localObject1 = null;
    try
    {
      Object localObject2 = super.clone();
      localObject1 = localObject2;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      while ($assertionsDisabled) {}
      throw new AssertionError();
    }
    return localObject1;
  }
  
  public void display(StringBuilder paramStringBuilder, int paramInt)
  {
    new JceDisplayer(paramStringBuilder, paramInt).display(this.confVersion, "confVersion");
  }
  
  public void displaySimple(StringBuilder paramStringBuilder, int paramInt)
  {
    new JceDisplayer(paramStringBuilder, paramInt).displaySimple(this.confVersion, false);
  }
  
  public boolean equals(Object paramObject)
  {
    if (paramObject == null) {
      return false;
    }
    paramObject = (TpnsConfigReq)paramObject;
    return JceUtil.equals(this.confVersion, paramObject.confVersion);
  }
  
  public String fullClassName()
  {
    return "com.tencent.android.tpush.service.channel.protocol.TpnsConfigReq";
  }
  
  public long getConfVersion()
  {
    return this.confVersion;
  }
  
  public int hashCode()
  {
    try
    {
      throw new Exception("Need define key first!");
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return 0;
  }
  
  public void readFrom(JceInputStream paramJceInputStream)
  {
    this.confVersion = paramJceInputStream.read(this.confVersion, 0, true);
  }
  
  public void setConfVersion(long paramLong)
  {
    this.confVersion = paramLong;
  }
  
  public void writeTo(JceOutputStream paramJceOutputStream)
  {
    paramJceOutputStream.write(this.confVersion, 0);
  }
}
