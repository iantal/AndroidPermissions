package com.tencent.android.tpush.service.channel.b;

import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.channel.c.e;
import com.tencent.android.tpush.service.channel.exception.IORefusedException;
import com.tencent.android.tpush.service.channel.exception.InnerException;
import com.tencent.android.tpush.service.channel.exception.UnexpectedDataException;
import com.tencent.android.tpush.service.channel.security.TpnsSecurity;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public class g
  extends i
  implements d
{
  protected HashMap a = new HashMap(4);
  protected int b = 0;
  protected int c = -1;
  
  public g() {}
  
  public int a(InputStream paramInputStream)
  {
    int j = 0;
    int k = 0;
    int i = 0;
    TLog.v("Channel.RecvPacket", ">>> read(" + paramInputStream + ")");
    c();
    if (paramInputStream.available() == 0) {}
    for (;;)
    {
      return i;
      try
      {
        this.b = 0;
        i = j;
        k = j;
        if (!b())
        {
          k = j;
          i = this.b;
          k = j;
          this.b = (i + 1);
          if (i > 2)
          {
            k = j;
            throw new InnerException("the duration of the current step is too long!");
          }
        }
      }
      catch (IORefusedException paramInputStream)
      {
        TLog.w("Channel.RecvPacket", "read >>> IORefusedException thrown", paramInputStream);
        return k;
      }
    }
    k = j;
    switch (this.c)
    {
    }
    for (;;)
    {
      k = j;
      throw new InnerException("illegal step value!");
      k = j;
      i = j + b(paramInputStream);
      for (;;)
      {
        j = i;
        k = i;
        if (this.c == 0) {
          break;
        }
        j = i;
        k = i;
        if (paramInputStream.available() != 0) {
          break;
        }
        k = i;
        TLog.i("Channel.RecvPacket", "read data len:" + i + ", but the package is n't full" + ",step:" + this.c);
        return i;
        k = j;
        i = j + c(paramInputStream);
        continue;
        k = j;
        i = j + d(paramInputStream);
        continue;
        k = j;
        i = j + e(paramInputStream);
        continue;
        k = j;
        i = j + f(paramInputStream);
        continue;
        k = j;
        i = j + g(paramInputStream);
        continue;
        k = j;
        i = j + h(paramInputStream);
        continue;
        k = j;
        d();
        i = j;
      }
    }
  }
  
  void a(int paramInt)
  {
    if (this.c != paramInt) {
      this.b = 0;
    }
    this.c = paramInt;
  }
  
  protected int b(InputStream paramInputStream)
  {
    this.d = e.a(paramInputStream);
    if (this.d != 80) {
      throw new UnexpectedDataException("soh: " + this.d + " != TPNS_SOH");
    }
    a(-2);
    return 1;
  }
  
  protected int c(InputStream paramInputStream)
  {
    this.k = e.a(paramInputStream);
    switch (this.k)
    {
    default: 
      throw new UnexpectedDataException("protocol: " + this.k);
    case 1: 
    case 10: 
      a(-3);
    }
    for (;;)
    {
      return 1;
      a(0);
    }
  }
  
  protected int d(InputStream paramInputStream)
  {
    this.e = e.c(paramInputStream);
    a(-4);
    return 4;
  }
  
  public void d()
  {
    try
    {
      super.d();
      this.a.clear();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  protected int e(InputStream paramInputStream)
  {
    this.f = e.b(paramInputStream);
    this.f -= 10L;
    TLog.v("Channel.RecvPacket", ">>> package content length:" + this.f);
    if ((this.f > 10485760L) || (this.f < 0L)) {
      throw new UnexpectedDataException("packetLength: " + this.f);
    }
    if (this.k == 1) {
      a(-5);
    }
    for (;;)
    {
      return 4;
      a(-7);
    }
  }
  
  protected int f(InputStream paramInputStream)
  {
    this.f -= 1L;
    this.i = e.a(paramInputStream);
    if (this.i != 0) {
      throw new UnexpectedDataException("negotiateSecurity: " + this.i + " != 0");
    }
    a(-6);
    return 1;
  }
  
  protected int g(InputStream paramInputStream)
  {
    this.f -= 4L;
    this.g = e.b(paramInputStream);
    if (this.g != this.j.getRandom()) {
      throw new UnexpectedDataException("unexpected random: " + this.g);
    }
    a(-7);
    return 4;
  }
  
  protected int h(InputStream paramInputStream)
  {
    byte[] arrayOfByte = (byte[])this.a.get("contentData");
    Object localObject = new StringBuilder().append("contentData.length=");
    if (arrayOfByte == null) {}
    for (int i = 0;; i = arrayOfByte.length)
    {
      TLog.i("RecvPacket", i);
      localObject = arrayOfByte;
      if (arrayOfByte != null) {
        break label149;
      }
      if (this.f >= 0L) {
        break;
      }
      throw new UnexpectedDataException("unexpected packetLength: " + this.f + " < 0");
    }
    localObject = new byte[(int)this.f];
    this.a.put("contentData", localObject);
    this.a.put("contentDataLeftLength", Integer.valueOf(localObject.length));
    label149:
    int j = ((Integer)this.a.get("contentDataLeftLength")).intValue();
    i = e.a(paramInputStream, (byte[])localObject, localObject.length - j);
    j -= i;
    this.a.put("contentDataLeftLength", Integer.valueOf(j));
    if (j == 0)
    {
      paramInputStream = (InputStream)localObject;
      if (this.k == 1) {
        paramInputStream = this.j.decryptData((byte[])localObject);
      }
      paramInputStream = new ByteArrayInputStream(paramInputStream);
    }
    try
    {
      long l = e.b(paramInputStream);
      if (this.k == 1) {
        this.j.checkRemoteInc(l);
      }
      this.l = e.a(paramInputStream);
      this.h = e.a(paramInputStream);
      this.m = e.a(paramInputStream);
      if (paramInputStream.available() > 0)
      {
        this.n = new byte[paramInputStream.available()];
        e.a(paramInputStream, this.n, 0);
      }
      a(0);
      return i;
    }
    catch (IOException paramInputStream)
    {
      throw new UnexpectedDataException("contentData can not be read correctly!", paramInputStream);
    }
  }
}
