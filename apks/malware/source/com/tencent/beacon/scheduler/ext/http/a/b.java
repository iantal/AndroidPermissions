package com.tencent.beacon.scheduler.ext.http.a;

import android.text.TextUtils;
import com.tencent.beacon.scheduler.e.c;
import com.tencent.beacon.scheduler.ext.http.HttpAccessRequest;
import com.tencent.beacon.scheduler.ext.http.HttpRequestInfo;
import com.tencent.beacon.scheduler.ext.http.b.a;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public final class b
  implements HttpAccessRequest
{
  private boolean a = false;
  private String b = null;
  private int[] c = null;
  private String d = null;
  private boolean e = true;
  private boolean f = true;
  private Map g = new HashMap();
  private byte[] h = null;
  private int i = 32768;
  private int j = 20000;
  private int k = 20000;
  private int l = 3;
  private boolean m = true;
  private List n = null;
  private List o = new ArrayList();
  private volatile boolean p = false;
  private String q = "";
  
  public b(String paramString, int[] paramArrayOfInt)
  {
    this.b = paramString;
    this.c = paramArrayOfInt;
    paramString = new StringBuilder("");
    Object localObject = com.tencent.beacon.scheduler.c.b.i();
    paramArrayOfInt = ((com.tencent.beacon.scheduler.c.b)localObject).d();
    if (!TextUtils.isEmpty(paramArrayOfInt)) {
      paramString.append(paramArrayOfInt);
    }
    localObject = ((com.tencent.beacon.scheduler.c.b)localObject).g();
    if (!TextUtils.isEmpty(paramArrayOfInt)) {
      paramString.append((String)localObject);
    }
    paramString.append(System.currentTimeMillis());
    paramString.append(getDomain());
    paramString.append((int)(Math.random() * 2.147483647E9D));
    this.q = a.a(paramString.toString());
    c.b("HttpAccessRequestImpl", "buildUniqueKey:" + this.q);
  }
  
  public final void addHttpHeader(String paramString1, String paramString2)
  {
    if ((TextUtils.isEmpty(paramString1)) || (TextUtils.isEmpty(paramString2))) {
      return;
    }
    this.g.put(paramString1, paramString2);
  }
  
  public final void addHttpHeaders(Map paramMap)
  {
    this.g.putAll(paramMap);
  }
  
  public final void addTriedAccessIPInfo(HttpRequestInfo paramHttpRequestInfo)
  {
    this.o.add(paramHttpRequestInfo);
  }
  
  public final void cancel()
  {
    c.c("HttpAccessRequestImpl", "cancel...domain:" + this.b + ",ports:" + this.c + ",res:" + this.d);
    this.p = true;
  }
  
  public final List getAccessIPList()
  {
    return this.n;
  }
  
  public final int getConnectTimeout()
  {
    return this.j;
  }
  
  public final String getDomain()
  {
    return this.b;
  }
  
  public final Map getHttpHeaders()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.putAll(this.g);
    return localHashMap;
  }
  
  public final boolean getIsAutoRedirection()
  {
    return this.m;
  }
  
  public final boolean getIsHttpGet()
  {
    return this.a;
  }
  
  public final boolean getIsReadToBuffer()
  {
    return this.e;
  }
  
  public final int getMaxResponseDataSize()
  {
    return this.i;
  }
  
  public final int getMaxRetryTimes()
  {
    return this.l;
  }
  
  public final int[] getPorts()
  {
    return this.c;
  }
  
  public final byte[] getPostData()
  {
    return this.h;
  }
  
  public final int getReadTimeout()
  {
    return this.k;
  }
  
  public final String getRequestUniqueKey()
  {
    return this.q;
  }
  
  public final String getResource()
  {
    return this.d;
  }
  
  public final List getTriedAccessIPInfo()
  {
    return this.o;
  }
  
  public final boolean isCancel()
  {
    return this.p;
  }
  
  public final boolean isDoReport()
  {
    return this.f;
  }
  
  public final void setAccessIPList(List paramList)
  {
    this.n = paramList;
  }
  
  public final void setConnectTimeout(int paramInt)
  {
    if ((paramInt > 6000) && (paramInt < 60000)) {
      this.j = paramInt;
    }
  }
  
  public final void setIsAutoRedirection(boolean paramBoolean)
  {
    this.m = paramBoolean;
  }
  
  public final void setIsHttpGet(boolean paramBoolean)
  {
    this.a = paramBoolean;
  }
  
  public final void setIsReadToBuffer(boolean paramBoolean)
  {
    this.e = paramBoolean;
  }
  
  public final void setMaxResponseDataSize(int paramInt)
  {
    if ((paramInt > 5120) && (paramInt < 2097152)) {
      this.i = paramInt;
    }
  }
  
  public final void setMaxRetryTimes(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt <= 8)) {
      this.l = paramInt;
    }
  }
  
  public final void setPostData(byte[] paramArrayOfByte)
  {
    this.h = paramArrayOfByte;
  }
  
  public final void setReadTimeout(int paramInt)
  {
    if ((paramInt > 6000) && (paramInt < 60000)) {
      this.k = paramInt;
    }
  }
  
  public final void setReport(boolean paramBoolean)
  {
    this.f = paramBoolean;
  }
  
  public final void setResource(String paramString)
  {
    this.d = paramString;
  }
}
