package com.tencent.tmapkupdatesdk.internal.a;

import android.util.Log;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedHashMap;

public class i
{
  LinkedHashMap a = new LinkedHashMap();
  LinkedHashMap b = new LinkedHashMap();
  ArrayList c = new ArrayList();
  e d = new e();
  long e = 0L;
  String f = null;
  
  public i() {}
  
  private void a(RandomAccessFile paramRandomAccessFile)
  {
    long l = 1024L;
    if (1024L > this.e) {
      l = this.e;
    }
    byte[] arrayOfByte = new byte['Ð€'];
    paramRandomAccessFile.skipBytes((int)(this.e - l));
    if (paramRandomAccessFile.read(arrayOfByte, 0, (int)l) != l) {}
    int i = 0;
    for (;;)
    {
      if (i < l - 4L)
      {
        if ((arrayOfByte[i] << 24) + (arrayOfByte[(i + 1)] << 16) + (arrayOfByte[(i + 2)] << 8) + arrayOfByte[(i + 3)] == 1347093766) {}
        try
        {
          paramRandomAccessFile = new DataInputStream(new ByteArrayInputStream(arrayOfByte, i + 4, (int)(l - (i + 4))));
          this.d.a(paramRandomAccessFile);
          paramRandomAccessFile.close();
          i += 1;
        }
        catch (IOException paramRandomAccessFile)
        {
          for (;;)
          {
            paramRandomAccessFile.printStackTrace();
          }
        }
      }
    }
  }
  
  private void c()
  {
    DataInputStream localDataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.f)));
    localDataInputStream.skip(this.d.f);
    int i = 0;
    while ((localDataInputStream.available() >= 4) && (i == 0)) {
      switch (localDataInputStream.readInt())
      {
      default: 
        break;
      case 1347092738: 
        c localC = new c();
        localC.a(localDataInputStream);
        String str = new String(localC.s, Charset.defaultCharset().name());
        if (str.startsWith("META-INF/")) {
          this.c.add(str);
        }
        this.b.put(str, localC);
        break;
      case 1347093766: 
        i = 1;
      }
    }
    if (localDataInputStream != null) {
      localDataInputStream.close();
    }
  }
  
  public void a()
  {
    DataInputStream localDataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(this.f)));
    int i = 0;
    if ((localDataInputStream.available() >= 4) && (i == 0))
    {
      switch (localDataInputStream.readInt())
      {
      }
      for (;;)
      {
        break;
        h localH = new h();
        localH.a(localDataInputStream);
        String str = new String(localH.k, Charset.defaultCharset().name());
        c localC = (c)this.b.get(str);
        localC.k = localH.j;
        if (localC.k > 0) {
          localC.t = ((byte[])localH.l.clone());
        }
        localH.g = localC.h;
        localH.h = localC.i;
        localH.f = localC.g;
        localDataInputStream.skipBytes(localH.g);
        this.a.put(str, localH);
        continue;
        localDataInputStream.skipBytes(12);
        continue;
        i = 1;
        continue;
        i = 1;
      }
    }
    if (localDataInputStream != null) {
      localDataInputStream.close();
    }
  }
  
  public void a(String paramString)
  {
    this.f = paramString;
    paramString = new RandomAccessFile(paramString, "r");
    if (paramString != null)
    {
      this.e = paramString.length();
      a(paramString);
    }
    if (paramString != null) {
      paramString.close();
    }
    Log.i("ZipFileParser", "readEndOfCentralDirRecord finished.");
    c();
    Log.i("ZipFileParser", "readCentralDirFileHeaderList finished.");
    a();
    Log.i("ZipFileParser", "readLocalFileHeader finished.");
  }
  
  public c b(String paramString)
  {
    return (c)this.b.get(paramString);
  }
  
  public LinkedHashMap b()
  {
    return this.b;
  }
  
  public int c(String paramString)
  {
    c localC = (c)this.b.get(paramString);
    if (localC == null) {
      throw new FileNotFoundException();
    }
    paramString = (h)this.a.get(paramString);
    if (paramString == null) {
      throw new FileNotFoundException();
    }
    int i = paramString.i;
    int j = paramString.j;
    return localC.q + (j + (i + 30));
  }
}
