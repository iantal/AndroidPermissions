package com.tencent.tmapkupdatesdk.internal.logic.protocol;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.os.Environment;
import com.tencent.tmapkupdatesdk.internal.a.g;
import com.tencent.tmassistantbase.util.MD5;
import com.tencent.tmassistantbase.util.TMLog;
import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class b
{
  private static b b = null;
  private Context a;
  private ExecutorService c;
  
  private b() {}
  
  public static b a()
  {
    try
    {
      if (b == null) {
        b = new b();
      }
      b localB = b;
      return localB;
    }
    finally {}
  }
  
  private static String a(Context paramContext, String paramString, boolean paramBoolean)
  {
    if ((paramBoolean) && ("mounted".equals(Environment.getExternalStorageState())) && (Environment.getExternalStorageDirectory().canWrite()))
    {
      paramContext = new File(Environment.getExternalStorageDirectory().getPath() + paramString);
      if (!paramContext.exists()) {
        paramContext.mkdirs();
      }
      paramString = paramContext.getAbsolutePath();
      paramContext = paramString;
      if (!paramString.endsWith("/")) {
        paramContext = paramString + "/";
      }
    }
    do
    {
      return paramContext;
      paramString = paramContext.getFilesDir().getAbsolutePath();
      paramContext = paramString;
    } while (paramString.endsWith("/"));
    return paramString + "/";
  }
  
  public static String a(String paramString)
  {
    Object localObject = a().b().getPackageManager();
    try
    {
      localObject = ((PackageManager)localObject).getPackageInfo(paramString, 0);
      if (localObject != null)
      {
        localObject = ((PackageInfo)localObject).applicationInfo.sourceDir;
        TMLog.i("ProtocolHelper", "packageName: " + paramString);
        TMLog.i("ProtocolHelper", "localPath: " + (String)localObject);
        long l1 = System.currentTimeMillis();
        paramString = a(a().b(), "/mfcache", true) + paramString + ".cache";
        new g((String)localObject, paramString).a();
        paramString = MD5.fileToMD5(paramString);
        long l2 = System.currentTimeMillis();
        TMLog.i("ProtocolHelper", "old_md5: cost=" + (l2 - l1) + "; md5=" + paramString);
        if (paramString != null) {
          return paramString;
        }
      }
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      TMLog.e("ProtocolHelper", "exception: ", paramString);
      paramString.printStackTrace();
    }
    return "";
  }
  
  public void a(Context paramContext)
  {
    this.c = Executors.newFixedThreadPool(5);
    this.a = paramContext;
  }
  
  public void a(Runnable paramRunnable)
  {
    TMLog.i("ProtocolHelper", "startNewTask");
    if ((this.c != null) && (!this.c.isShutdown()))
    {
      TMLog.i("ProtocolHelper", "threadPool.execute");
      this.c.execute(paramRunnable);
    }
  }
  
  public Context b()
  {
    return this.a;
  }
  
  public String b(String paramString)
  {
    try
    {
      paramString = this.a.getPackageManager().getPackageInfo(paramString, 64);
      if (paramString != null)
      {
        paramString = paramString.signatures;
        if ((paramString != null) && (paramString.length > 0))
        {
          paramString = paramString[(paramString.length - 1)].toCharsString();
          TMLog.i("ProtocolHelper", " signatures MD5: " + MD5.toMD5(paramString));
          paramString = MD5.toMD5(paramString);
          return paramString;
        }
      }
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      TMLog.e("ProtocolHelper", "exception: ", paramString);
      paramString.printStackTrace();
    }
    return "";
  }
  
  public void c()
  {
    TMLog.i("ProtocolHelper", "threadPool.shutdown()");
    if (this.c != null)
    {
      this.c.shutdown();
      this.c = null;
    }
  }
}
