package com.tencent.tp;

import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Vector;

public class b
{
  static final String a = "EasyJNI";
  static ClassLoader b = b.class.getClassLoader();
  static Vector c = new Vector(2, 2);
  
  public b() {}
  
  public static Class a(String paramString)
  {
    if (paramString != null)
    {
      String str = paramString;
      if (paramString.contains("/")) {
        str = paramString.replace('/', '.');
      }
      try
      {
        if (c.isEmpty() != true) {
          return ((ClassLoader)c.lastElement()).loadClass(str);
        }
        paramString = b.loadClass(str);
        return paramString;
      }
      catch (ClassNotFoundException paramString) {}
    }
    return null;
  }
  
  public static ClassLoader a(String paramString1, String paramString2)
  {
    if (paramString1 == null) {
      paramString1 = null;
    }
    for (;;)
    {
      return paramString1;
      try
      {
        if (c.isEmpty() != true) {}
        for (ClassLoader localClassLoader = (ClassLoader)c.lastElement();; localClassLoader = b)
        {
          if (TssSdkRuntime.getPackageInfo() != null) {
            break label52;
          }
          paramString1 = null;
          break;
        }
        label52:
        String str = TssSdkRuntime.getPackageInfo().applicationInfo.dataDir + File.separatorChar + "files";
        File localFile = new File(str);
        if (localFile.exists() != true) {
          localFile.mkdirs();
        }
        if (localFile.canWrite() != true) {}
        paramString2 = new DexClassLoader(paramString1, str, paramString2, localClassLoader);
        paramString1 = paramString2;
        if (paramString2 == null) {
          continue;
        }
        c.add(paramString2);
        paramString1 = paramString2;
      }
      finally {}
    }
  }
  
  public static Object a(Object paramObject, String paramString1, String paramString2, Class[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      paramString1 = a(paramString1);
    } while (paramString1 == null);
    try
    {
      paramObject = paramString1.getDeclaredMethod(paramString2, paramArrayOfClass).invoke(paramObject, paramArrayOfObject);
      return paramObject;
    }
    catch (InvocationTargetException paramObject)
    {
      return null;
    }
    catch (IllegalAccessException paramObject)
    {
      return null;
    }
    catch (IllegalArgumentException paramObject)
    {
      return null;
    }
    catch (NoSuchMethodException paramObject) {}
    return null;
  }
  
  public static Object a(String paramString1, String paramString2, Class[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    Object localObject = null;
    Class localClass = a(paramString1);
    paramString1 = localObject;
    if (localClass != null) {}
    try
    {
      paramString1 = localClass.getDeclaredMethod(paramString2, paramArrayOfClass).invoke(null, paramArrayOfObject);
      return paramString1;
    }
    catch (InvocationTargetException paramString1)
    {
      return null;
    }
    catch (IllegalAccessException paramString1)
    {
      return null;
    }
    catch (IllegalArgumentException paramString1)
    {
      return null;
    }
    catch (NoSuchMethodException paramString1) {}
    return null;
  }
}
