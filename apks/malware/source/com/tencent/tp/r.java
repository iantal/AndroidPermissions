package com.tencent.tp;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Build.VERSION;
import android.util.Log;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.Principal;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class r
{
  public r() {}
  
  public static String a(String paramString)
  {
    Object localObject = null;
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      localObject = localMessageDigest;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      for (;;)
      {
        localNoSuchAlgorithmException.printStackTrace();
      }
    }
    localObject.update(paramString.getBytes(), 0, paramString.length());
    return d(localObject.digest());
  }
  
  public static String a(byte[] paramArrayOfByte)
  {
    int i = 0;
    for (;;)
    {
      String str;
      try
      {
        str = ((X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(paramArrayOfByte))).getPublicKey().toString();
        localObject1 = null;
        paramArrayOfByte = null;
        Object localObject2;
        if (str.contains("modulus="))
        {
          localObject2 = Pattern.compile("\\{[^,]+").matcher(str);
          localObject1 = paramArrayOfByte;
          paramArrayOfByte = (byte[])localObject1;
          if (!((Matcher)localObject2).find()) {
            break label187;
          }
          paramArrayOfByte = ((Matcher)localObject2).group().split("=");
          i = 0;
          if (i >= paramArrayOfByte.length) {
            continue;
          }
          if (paramArrayOfByte[i].length() > 100)
          {
            localObject1 = paramArrayOfByte[i];
            continue;
          }
        }
        else
        {
          paramArrayOfByte = (byte[])localObject1;
          if (!str.contains("modulus:")) {
            break label187;
          }
          localObject2 = str.split(" ");
          paramArrayOfByte = (byte[])localObject1;
          if (i >= localObject2.length) {
            break label187;
          }
          if (localObject2[i].length() > 100)
          {
            paramArrayOfByte = localObject2[i];
            break label187;
            paramArrayOfByte = a(((String)localObject1).trim().toLowerCase(Locale.US));
            return paramArrayOfByte;
          }
          i += 1;
          continue;
        }
        i += 1;
      }
      catch (Throwable paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
        return "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
      }
      continue;
      label187:
      Object localObject1 = paramArrayOfByte;
      if (paramArrayOfByte == null) {
        localObject1 = str;
      }
    }
  }
  
  public static byte[] a(String paramString, long paramLong1, long paramLong2)
    throws Exception
  {
    paramString = new FileInputStream(paramString);
    byte[] arrayOfByte = new byte[65536];
    MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
    j = 0;
    int k;
    do
    {
      k = paramString.read(arrayOfByte);
      i = j;
      if (k > 0)
      {
        j += 1;
        localMessageDigest.update(arrayOfByte, 0, k);
        i = j;
        if (paramLong1 > 0L)
        {
          i = j;
          if (j % paramLong1 == 0L)
          {
            i = j;
            if (paramLong2 <= 0L) {}
          }
        }
      }
      try
      {
        Thread.sleep(paramLong2);
        i = j;
      }
      catch (Throwable localThrowable)
      {
        for (;;)
        {
          localThrowable.printStackTrace();
          i = j;
        }
      }
      j = i;
    } while (k != -1);
    paramString.close();
    return localMessageDigest.digest();
  }
  
  public static k[] a(Context paramContext, int paramInt)
  {
    List localList = paramContext.getPackageManager().getInstalledPackages(64);
    k[] arrayOfK = new k[localList.size()];
    int i = 0;
    if (i < localList.size())
    {
      PackageInfo localPackageInfo = (PackageInfo)localList.get(i);
      boolean bool = true;
      if ((localPackageInfo.applicationInfo.flags & 0x1) == 0) {
        bool = false;
      }
      System.currentTimeMillis();
      if (Build.VERSION.SDK_INT > 8)
      {
        Field[] arrayOfField = localPackageInfo.getClass().getFields();
        paramContext = null;
        int j = 0;
        while (j < arrayOfField.length)
        {
          if (arrayOfField[j].getName().equals("lastUpdateTime")) {
            paramContext = arrayOfField[j];
          }
          j += 1;
        }
        if (paramContext == null) {}
      }
      for (;;)
      {
        try
        {
          l1 = paramContext.getLong(localPackageInfo);
          if (paramInt != 2) {
            break label312;
          }
          paramContext = b(localPackageInfo.signatures[0].toByteArray());
          arrayOfK[i] = new k(localPackageInfo.packageName, localPackageInfo.applicationInfo.sourceDir, g(localPackageInfo.applicationInfo.sourceDir), l1, "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", paramContext, bool, paramInt);
          i += 1;
        }
        catch (Throwable paramContext)
        {
          l2 = h(localPackageInfo.applicationInfo.sourceDir);
          l1 = l2;
          if (l2 != -1L) {
            continue;
          }
          l1 = System.currentTimeMillis();
          continue;
        }
        long l2 = h(localPackageInfo.applicationInfo.sourceDir);
        long l1 = l2;
        if (l2 == -1L)
        {
          l1 = System.currentTimeMillis();
          continue;
          l2 = h(localPackageInfo.applicationInfo.sourceDir);
          l1 = l2;
          if (l2 == -1L)
          {
            l1 = System.currentTimeMillis();
            continue;
            label312:
            if (paramInt == 1) {
              paramContext = a(localPackageInfo.signatures[0].toByteArray());
            } else {
              paramContext = a(localPackageInfo.signatures[0].toByteArray());
            }
          }
        }
      }
    }
    return arrayOfK;
  }
  
  public static k[] a(Context paramContext, boolean paramBoolean, long paramLong1, long paramLong2, int paramInt)
  {
    List localList = paramContext.getPackageManager().getInstalledPackages(64);
    ArrayList localArrayList = new ArrayList();
    localArrayList.clear();
    int j = 5;
    int k = 0;
    if (k < localList.size())
    {
      PackageInfo localPackageInfo = (PackageInfo)localList.get(k);
      boolean bool = true;
      if ((localPackageInfo.applicationInfo.flags & 0x1) == 0) {
        bool = false;
      }
      System.currentTimeMillis();
      Object localObject;
      int i;
      if (Build.VERSION.SDK_INT > 8)
      {
        localObject = localPackageInfo.getClass().getFields();
        paramContext = null;
        i = 0;
        while (i < localObject.length)
        {
          if (localObject[i].getName().equals("lastUpdateTime")) {
            paramContext = localObject[i];
          }
          i += 1;
        }
        if (paramContext == null) {}
      }
      long l1;
      long l2;
      label283:
      do
      {
        for (;;)
        {
          try
          {
            l1 = paramContext.getLong(localPackageInfo);
            if ((!bool) || (!paramBoolean)) {
              break label283;
            }
            i = j;
            k += 1;
            j = i;
          }
          catch (Throwable paramContext)
          {
            l2 = h(localPackageInfo.applicationInfo.sourceDir);
            l1 = l2;
            if (l2 != -1L) {
              continue;
            }
            l1 = System.currentTimeMillis();
            continue;
          }
          l2 = h(localPackageInfo.applicationInfo.sourceDir);
          l1 = l2;
          if (l2 == -1L)
          {
            l1 = System.currentTimeMillis();
            continue;
            l2 = h(localPackageInfo.applicationInfo.sourceDir);
            l1 = l2;
            if (l2 == -1L) {
              l1 = System.currentTimeMillis();
            }
          }
        }
        l2 = g(localPackageInfo.applicationInfo.sourceDir);
        if (paramLong1 == -1L) {
          break label315;
        }
        i = j;
      } while (l2 > paramLong1);
      label315:
      if (paramInt == 2)
      {
        localObject = b(localPackageInfo.signatures[0].toByteArray());
        i = j;
        paramContext = (Context)localObject;
        if (paramLong2 <= 0L) {
          break label598;
        }
        j += 1;
        i = j;
        paramContext = (Context)localObject;
        if (j % 5 != 0) {
          break label598;
        }
      }
      label598:
      for (;;)
      {
        try
        {
          Thread.sleep(paramLong2);
          i = j;
          paramContext = (Context)localObject;
        }
        catch (InterruptedException paramContext)
        {
          paramContext.printStackTrace();
          i = j;
          paramContext = (Context)localObject;
          continue;
        }
        localArrayList.add(new k(localPackageInfo.packageName, localPackageInfo.applicationInfo.sourceDir, l2, l1, "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", paramContext, bool, paramInt));
        break;
        if (paramInt == 1)
        {
          localObject = a(localPackageInfo.signatures[0].toByteArray());
          i = j;
          paramContext = (Context)localObject;
          if (paramLong2 > 0L)
          {
            j += 1;
            i = j;
            paramContext = (Context)localObject;
            if (j % 5 == 0) {
              try
              {
                Thread.sleep(paramLong2);
                i = j;
                paramContext = (Context)localObject;
              }
              catch (InterruptedException paramContext)
              {
                paramContext.printStackTrace();
                i = j;
                paramContext = (Context)localObject;
              }
            }
          }
        }
        else
        {
          localObject = a(localPackageInfo.signatures[0].toByteArray());
          i = j;
          paramContext = (Context)localObject;
          if (paramLong2 > 0L)
          {
            j += 1;
            i = j;
            paramContext = (Context)localObject;
            if (j % 5 == 0) {
              try
              {
                Thread.sleep(paramLong2);
                i = j;
                paramContext = (Context)localObject;
              }
              catch (InterruptedException paramContext)
              {
                paramContext.printStackTrace();
                paramContext = (Context)localObject;
                i = j;
              }
            }
          }
        }
      }
    }
    return (k[])localArrayList.toArray(new k[localArrayList.size()]);
  }
  
  public static String b(String paramString)
  {
    Object localObject = null;
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("SHA1");
      localObject = localMessageDigest;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      for (;;)
      {
        localNoSuchAlgorithmException.printStackTrace();
      }
    }
    localObject.update(paramString.getBytes(), 0, paramString.length());
    return d(localObject.digest());
  }
  
  public static String b(byte[] paramArrayOfByte)
  {
    int i = 0;
    for (;;)
    {
      String str;
      try
      {
        str = ((X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(paramArrayOfByte))).getPublicKey().toString();
        localObject1 = null;
        paramArrayOfByte = null;
        Object localObject2;
        if (str.contains("modulus="))
        {
          localObject2 = Pattern.compile("\\{[^,]+").matcher(str);
          localObject1 = paramArrayOfByte;
          paramArrayOfByte = (byte[])localObject1;
          if (!((Matcher)localObject2).find()) {
            break label187;
          }
          paramArrayOfByte = ((Matcher)localObject2).group().split("=");
          i = 0;
          if (i >= paramArrayOfByte.length) {
            continue;
          }
          if (paramArrayOfByte[i].length() > 100)
          {
            localObject1 = paramArrayOfByte[i];
            continue;
          }
        }
        else
        {
          paramArrayOfByte = (byte[])localObject1;
          if (!str.contains("modulus:")) {
            break label187;
          }
          localObject2 = str.split(" ");
          paramArrayOfByte = (byte[])localObject1;
          if (i >= localObject2.length) {
            break label187;
          }
          if (localObject2[i].length() > 100)
          {
            paramArrayOfByte = localObject2[i];
            break label187;
            paramArrayOfByte = b(((String)localObject1).trim().toLowerCase(Locale.US));
            return paramArrayOfByte;
          }
          i += 1;
          continue;
        }
        i += 1;
      }
      catch (Throwable paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
        return "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
      }
      continue;
      label187:
      Object localObject1 = paramArrayOfByte;
      if (paramArrayOfByte == null) {
        localObject1 = str;
      }
    }
  }
  
  public static byte[] b(String paramString, long paramLong1, long paramLong2)
    throws Exception
  {
    paramString = new FileInputStream(paramString);
    byte[] arrayOfByte = new byte[65536];
    MessageDigest localMessageDigest = MessageDigest.getInstance("SHA1");
    j = 0;
    int k;
    do
    {
      k = paramString.read(arrayOfByte);
      i = j;
      if (k > 0)
      {
        j += 1;
        localMessageDigest.update(arrayOfByte, 0, k);
        i = j;
        if (paramLong1 > 0L)
        {
          i = j;
          if (j % paramLong1 == 0L)
          {
            i = j;
            if (paramLong2 <= 0L) {}
          }
        }
      }
      try
      {
        Thread.sleep(paramLong2);
        i = j;
      }
      catch (Throwable localThrowable)
      {
        for (;;)
        {
          localThrowable.printStackTrace();
          i = j;
        }
      }
      j = i;
    } while (k != -1);
    paramString.close();
    return localMessageDigest.digest();
  }
  
  public static String c(String paramString, long paramLong1, long paramLong2)
  {
    try
    {
      byte[] arrayOfByte = a(paramString, paramLong1, paramLong2);
      paramString = "";
      int i = 0;
      while (i < arrayOfByte.length)
      {
        paramString = paramString + Integer.toString((arrayOfByte[i] & 0xFF) + 256, 16).substring(1);
        i += 1;
      }
      paramString = paramString.toUpperCase(Locale.US);
      return paramString;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
  }
  
  public static void c(byte[] paramArrayOfByte)
  {
    int i = 0;
    for (;;)
    {
      try
      {
        paramArrayOfByte = (X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(paramArrayOfByte));
        Object localObject = paramArrayOfByte.getPublicKey().toString();
        String str = paramArrayOfByte.getSerialNumber().toString();
        Log.i("Signature Info", "signName: " + paramArrayOfByte.getSigAlgName());
        Log.i("Signature Info", "pubKey: " + (String)localObject);
        if (((String)localObject).contains("modulus="))
        {
          localObject = Pattern.compile("\\{[^,]+").matcher((CharSequence)localObject);
          if (((Matcher)localObject).find())
          {
            Log.i("TEST", ((Matcher)localObject).group());
            String[] arrayOfString = ((Matcher)localObject).group().split("=");
            i = 0;
            if (i >= arrayOfString.length) {
              continue;
            }
            if (arrayOfString[i].length() <= 100) {
              break label331;
            }
            Log.i("TEST", "Clear Public Key: " + arrayOfString[i]);
            break label331;
          }
        }
        else if (((String)localObject).contains("modulus:"))
        {
          localObject = ((String)localObject).split(" ");
          if (i < localObject.length)
          {
            if (localObject[i].length() <= 100) {
              break label338;
            }
            Log.i("TEST", "Clear Public Key: " + localObject[i]);
            break label338;
          }
        }
        Log.i("Signature Info", "signNumber:" + str);
        Log.i("Signature Info", "subjectDN:" + paramArrayOfByte.getSubjectDN().toString());
        return;
      }
      catch (Throwable paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
        return;
      }
      label331:
      i += 1;
      continue;
      label338:
      i += 1;
    }
  }
  
  public static byte[] c(String paramString)
    throws Exception
  {
    paramString = new FileInputStream(paramString);
    byte[] arrayOfByte = new byte[65536];
    MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
    int i;
    do
    {
      i = paramString.read(arrayOfByte);
      if (i > 0) {
        localMessageDigest.update(arrayOfByte, 0, i);
      }
    } while (i != -1);
    paramString.close();
    return localMessageDigest.digest();
  }
  
  public static String d(String paramString, long paramLong1, long paramLong2)
  {
    try
    {
      byte[] arrayOfByte = b(paramString, paramLong1, paramLong2);
      paramString = "";
      int i = 0;
      while (i < arrayOfByte.length)
      {
        paramString = paramString + Integer.toString((arrayOfByte[i] & 0xFF) + 256, 16).substring(1);
        i += 1;
      }
      paramString = paramString.toUpperCase(Locale.US);
      return paramString;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
  }
  
  private static String d(byte[] paramArrayOfByte)
  {
    String str = "";
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      str = str + Integer.toString((paramArrayOfByte[i] & 0xFF) + 256, 16).substring(1);
      i += 1;
    }
    return str.toUpperCase(Locale.US);
  }
  
  public static byte[] d(String paramString)
    throws Exception
  {
    paramString = new FileInputStream(paramString);
    byte[] arrayOfByte = new byte[65536];
    MessageDigest localMessageDigest = MessageDigest.getInstance("SHA1");
    int i;
    do
    {
      i = paramString.read(arrayOfByte);
      if (i > 0) {
        localMessageDigest.update(arrayOfByte, 0, i);
      }
    } while (i != -1);
    paramString.close();
    return localMessageDigest.digest();
  }
  
  public static String e(String paramString)
  {
    try
    {
      byte[] arrayOfByte = c(paramString);
      paramString = "";
      int i = 0;
      while (i < arrayOfByte.length)
      {
        paramString = paramString + Integer.toString((arrayOfByte[i] & 0xFF) + 256, 16).substring(1);
        i += 1;
      }
      paramString = paramString.toUpperCase(Locale.US);
      return paramString;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
  }
  
  public static String f(String paramString)
  {
    try
    {
      byte[] arrayOfByte = d(paramString);
      paramString = "";
      int i = 0;
      while (i < arrayOfByte.length)
      {
        paramString = paramString + Integer.toString((arrayOfByte[i] & 0xFF) + 256, 16).substring(1);
        i += 1;
      }
      paramString = paramString.toUpperCase(Locale.US);
      return paramString;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
  }
  
  private static long g(String paramString)
  {
    try
    {
      long l = new File(paramString).length();
      return l;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return -1L;
  }
  
  private static long h(String paramString)
  {
    try
    {
      long l = new File(paramString).lastModified();
      return l;
    }
    catch (Throwable paramString)
    {
      paramString.printStackTrace();
    }
    return -1L;
  }
}
