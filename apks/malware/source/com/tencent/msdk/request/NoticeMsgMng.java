package com.tencent.msdk.request;

import com.tencent.msdk.WeGame;
import com.tencent.msdk.communicator.HttpRequestManager;
import com.tencent.msdk.communicator.IHttpRequestListener;
import com.tencent.msdk.communicator.UrlManager;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.db.NoticeDBModel;
import com.tencent.msdk.locallog.FilterLogHelper;
import com.tencent.msdk.notice.NoticeInfo;
import com.tencent.msdk.notice.NoticeMsgFromNet;
import com.tencent.msdk.notice.NoticePic;
import com.tencent.msdk.notice.NoticeRequestPara;
import com.tencent.msdk.notice.eMSG_CONTENTTYPE;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class NoticeMsgMng
  implements IHttpRequestListener
{
  private long refreshStartTime = 0L;
  
  public NoticeMsgMng() {}
  
  private void addOneNotice(NoticeInfo paramNoticeInfo)
  {
    if (eMSG_CONTENTTYPE.eMSG_CONTENTTYPE_IMAGE == paramNoticeInfo.mNoticeContentType) {
      NoticePic.saveNoticePics(paramNoticeInfo);
    }
    new NoticeDBModel().save(paramNoticeInfo);
  }
  
  private void deleteNoticeByMsgList(String paramString)
  {
    if (T.ckIsEmpty(paramString))
    {
      Logger.d("msgList is null");
      return;
    }
    int i = new NoticeDBModel().deleteNoticeInDBByMsgList(paramString);
    Logger.d("Num of notice has been deletedï¼š" + i);
  }
  
  private void reportEventToBeacon(boolean paramBoolean1, int paramInt, boolean paramBoolean2)
  {
    if (paramBoolean1)
    {
      BeaconHelper.reportMSDKEvent("getNotice", this.refreshStartTime, true, null, true);
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("param_FailCode", "" + paramInt);
    StringBuilder localStringBuilder = new StringBuilder().append("");
    if (paramBoolean2) {}
    for (paramInt = 1;; paramInt = 0)
    {
      localHashMap.put("msdk_logic_error", paramInt);
      BeaconHelper.reportMSDKEvent("getNotice", this.refreshStartTime, false, localHashMap, true);
      return;
    }
  }
  
  private void saveNotice(ArrayList<NoticeInfo> paramArrayList)
  {
    if ((paramArrayList == null) || (paramArrayList.isEmpty())) {}
    for (;;)
    {
      return;
      paramArrayList = paramArrayList.iterator();
      while (paramArrayList.hasNext()) {
        addOneNotice((NoticeInfo)paramArrayList.next());
      }
    }
  }
  
  public void decodeNoticeJson(JSONObject paramJSONObject, NoticeMsgFromNet paramNoticeMsgFromNet)
  {
    if ((paramJSONObject == null) || (paramNoticeMsgFromNet == null)) {
      Logger.w("noticeJson or noticeMsg is null!");
    }
    label220:
    label228:
    label253:
    label402:
    label416:
    label423:
    label428:
    for (;;)
    {
      return;
      try
      {
        if (!paramJSONObject.has("ret"))
        {
          Logger.e("ret lost in the response!");
          return;
        }
      }
      catch (JSONException paramJSONObject)
      {
        Logger.e("decodeNoticeJson JSONException");
        paramJSONObject.printStackTrace();
        return;
      }
      String str1 = "";
      String str2;
      if (paramJSONObject.has("sendTime"))
      {
        str1 = paramJSONObject.getString("sendTime");
        str2 = "";
        if (!paramJSONObject.has("appid")) {
          break label220;
        }
        str2 = paramJSONObject.getString("appid");
      }
      Object localObject1;
      int i;
      Object localObject2;
      for (;;)
      {
        Logger.d("requestAppid:" + str2 + ";updateTime:" + str1);
        if (!paramJSONObject.has("invalidMsgid")) {
          break label402;
        }
        localObject1 = paramJSONObject.getJSONArray("invalidMsgid");
        i = 0;
        if (i >= ((JSONArray)localObject1).length()) {
          break label228;
        }
        localObject2 = ((JSONArray)localObject1).getJSONObject(i);
        if (!((JSONObject)localObject2).has("invalidMsgid")) {
          break label416;
        }
        localObject2 = ((JSONObject)localObject2).getString("invalidMsgid");
        NoticePic.deleteNoticePicByNoticeId(Integer.parseInt((String)localObject2));
        paramNoticeMsgFromNet.invalidMsgIdList = (paramNoticeMsgFromNet.invalidMsgIdList + (String)localObject2 + ", ");
        break label416;
        Logger.e("mUpdateTime lost in the response!");
        break;
        Logger.e("appid lost in the response!");
      }
      Logger.d("invalidMsgIdList:" + paramNoticeMsgFromNet.invalidMsgIdList);
      if (paramJSONObject.has("list"))
      {
        paramJSONObject = paramJSONObject.getJSONArray("list");
        i = 0;
      }
      for (;;)
      {
        if (i >= paramJSONObject.length()) {
          break label428;
        }
        localObject1 = paramJSONObject.getJSONObject(i);
        if (((JSONObject)localObject1).has("noticeType"))
        {
          localObject2 = new NoticeInfo();
          ((NoticeInfo)localObject2).getBaseInfoFromJson((JSONObject)localObject1, str1);
          if (T.ckIsEmpty(((NoticeInfo)localObject2).mAppId))
          {
            ((NoticeInfo)localObject2).mAppId = str2;
            Logger.w("notice do not have its own appid");
          }
          paramNoticeMsgFromNet.noticeList.add(localObject2);
          Logger.d("add a notice to list. msg_id:" + ((NoticeInfo)localObject2).mNoticeId + ",msg_type: " + ((NoticeInfo)localObject2).mNoticeType + ",contentType:" + ((NoticeInfo)localObject2).mNoticeContentType);
          break label423;
          Logger.d("notice response INVALID_LIST is empty");
          break label253;
          Logger.d("notice response NOTICE_MSG is empty");
          return;
          i += 1;
          break;
        }
        i += 1;
      }
    }
  }
  
  public void delRedundancyNotice()
  {
    String str = String.valueOf(System.currentTimeMillis() / 1000L);
    if (!T.ckIsEmpty(str))
    {
      deleteNoticeByMsgList(new NoticeDBModel().getRedundancyNoticeListByTime(str));
      return;
    }
    Logger.w("currentTime is null");
  }
  
  public String getAppIdByJson(JSONObject paramJSONObject)
  {
    try
    {
      paramJSONObject = paramJSONObject.getString("appid");
      return paramJSONObject;
    }
    catch (JSONException paramJSONObject)
    {
      Logger.e("getAppIdByJson JSONException");
      paramJSONObject.printStackTrace();
    }
    return "";
  }
  
  protected String getInterfaceName()
  {
    String[] arrayOfString = getClass().getName().split("\\.");
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (arrayOfString != null)
    {
      localObject1 = localObject2;
      if (arrayOfString.length > 0) {
        localObject1 = arrayOfString[(arrayOfString.length - 1)];
      }
    }
    return localObject1;
  }
  
  public String getLastUpdateTime(String paramString1, String paramString2)
  {
    return new NoticeDBModel().getLastUpdateTimeByAppIdAndOpenId(paramString1, paramString2);
  }
  
  public JSONObject getNoticeJsonPacket(NoticeRequestPara paramNoticeRequestPara, String paramString)
  {
    JSONObject localJSONObject = new JSONObject();
    if (paramNoticeRequestPara == null) {
      return localJSONObject;
    }
    localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("appid", paramNoticeRequestPara.mAppId);
      localJSONObject.put("matid", paramNoticeRequestPara.mMatid);
      localJSONObject.put("openid", paramNoticeRequestPara.mOpenId);
      localJSONObject.put("os", paramNoticeRequestPara.mOs);
      localJSONObject.put("osVersion", paramNoticeRequestPara.mOsVersion);
      localJSONObject.put("tradeMark", paramNoticeRequestPara.mTradeMark);
      localJSONObject.put("resolution", paramNoticeRequestPara.mResolution);
      localJSONObject.put("apn", paramNoticeRequestPara.mApn);
      localJSONObject.put("msdkVersion", paramNoticeRequestPara.mMsdkVersion);
      localJSONObject.put("protocolVer", paramNoticeRequestPara.mProtocolVer);
      localJSONObject.put("lastTime", paramString);
      localJSONObject.put("noticeVersion", paramNoticeRequestPara.mNoticeVersion);
      localJSONObject.put("screenDir", paramNoticeRequestPara.mScreenDir);
      localJSONObject.put("screenDpi", paramNoticeRequestPara.mScreenDpi);
      return localJSONObject;
    }
    catch (JSONException paramNoticeRequestPara)
    {
      for (;;)
      {
        paramNoticeRequestPara.printStackTrace();
      }
    }
  }
  
  public void getNoticeReq(NoticeRequestPara paramNoticeRequestPara)
  {
    this.refreshStartTime = System.currentTimeMillis();
    Object localObject2 = getLastUpdateTime(paramNoticeRequestPara.mAppId, paramNoticeRequestPara.mOpenId);
    Object localObject1 = localObject2;
    if (T.ckIsEmpty((String)localObject2)) {
      localObject1 = "0";
    }
    localObject2 = getNoticeJsonPacket(paramNoticeRequestPara, (String)localObject1);
    if (paramNoticeRequestPara.mAppId.indexOf("|") > 0) {}
    for (localObject1 = (String)paramNoticeRequestPara.mAppId.subSequence(0, paramNoticeRequestPara.mAppId.indexOf("|"));; localObject1 = paramNoticeRequestPara.mAppId)
    {
      String str = paramNoticeRequestPara.mAppKey;
      paramNoticeRequestPara = UrlManager.getUrl("/notice/gather_data/", ConfigManager.getApiDomain(WeGame.getInstance().getActivity()), (String)localObject1, str, paramNoticeRequestPara.mMsdkVersion);
      FilterLogHelper.saveKeysReq(getInterfaceName(), (JSONObject)localObject2, null);
      new HttpRequestManager(this).postTextAsync(paramNoticeRequestPara, ((JSONObject)localObject2).toString(), 3000);
      return;
    }
  }
  
  public void onFailure(String paramString, int paramInt1, int paramInt2)
  {
    Logger.d("onFailure" + paramString);
    reportEventToBeacon(false, paramInt1, false);
  }
  
  public void onSuccess(String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      Logger.d("onSuccess" + paramString);
      if (paramString == null)
      {
        Logger.d("getNotice onSuccess,but content is null!");
        reportEventToBeacon(false, 1002, false);
        return;
      }
      paramString = new JSONObject(paramString);
      if ((paramString != null) && (paramString.has("sendTime"))) {
        processNoticeMsgRsp(paramString);
      }
      reportEventToBeacon(true, 0, false);
      return;
    }
    catch (JSONException paramString)
    {
      paramString.printStackTrace();
      reportEventToBeacon(false, 1001, false);
    }
  }
  
  public void processNoticeMsgRsp(JSONObject paramJSONObject)
  {
    NoticeMsgFromNet localNoticeMsgFromNet = new NoticeMsgFromNet();
    decodeNoticeJson(paramJSONObject, localNoticeMsgFromNet);
    saveNotice(localNoticeMsgFromNet.noticeList);
    delRedundancyNotice();
    deleteNoticeByMsgList(localNoticeMsgFromNet.invalidMsgIdList);
  }
}
