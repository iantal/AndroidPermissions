package com.tencent.msdk.request;

import com.tencent.msdk.Singleton;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.communicator.HttpRequestManager;
import com.tencent.msdk.communicator.IHttpRequestListener;
import com.tencent.msdk.communicator.UrlManager;
import com.tencent.msdk.control.SwitcherManager;
import com.tencent.msdk.db.QQLoginModel;
import com.tencent.msdk.locallog.FilterLogHelper;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.login.LoginInfoManager;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.myapp.whitelist.WhiteListMng;
import com.tencent.msdk.permission.PermissionManage;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.remote.api.SafeJSONObject;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.stat.MsdkStat;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import org.json.JSONException;
import org.json.JSONObject;

public class PfKeyRequestMng
  implements IHttpRequestListener
{
  public static final String PT_EXPIRED_KEY = "paytoken_expire_time";
  private String callbackMsg = "";
  private WakeupRet currentWakeUp = new WakeupRet();
  private boolean forceNotify = false;
  private int notifyState = 0;
  private long refreshStartTime = 0L;
  private QQLoginModel tmpQLM;
  
  public PfKeyRequestMng() {}
  
  private void notify(boolean paramBoolean, String paramString, int paramInt1, int paramInt2)
  {
    if ((2017 == paramInt2) || ((2016 == paramInt2) && (this.notifyState == 2)) || ((2010 == paramInt2) && (this.notifyState == 2))) {
      LoginManager.getInstance().setIsCheckingToken(false);
    }
    this.callbackMsg = (" content: " + paramString + " statusCode: " + paramInt1);
    if (this.notifyState == 1) {
      if (LoginManager.getInstance().getIsGameRequest()) {
        notifyLogin(paramBoolean, paramInt2, paramInt1);
      }
    }
    do
    {
      do
      {
        return;
        if (2017 == paramInt2)
        {
          if (paramBoolean)
          {
            if (this.forceNotify)
            {
              notifyLogin(paramBoolean, paramInt2, paramInt1);
              return;
            }
            SaveLogHelper.getInstance().reportLog("OnLoginNotify", "PfkeyRequest finish but not notify statusCode:" + paramInt1, false);
            Logger.d("newLogin PfkeyRequest finish but not notify, statusCode:" + paramInt1);
            return;
          }
          if (paramInt1 == 200)
          {
            notifyLogin(paramBoolean, paramInt2, paramInt1);
            return;
          }
          SaveLogHelper.getInstance().reportLog("OnLoginNotify", "PfkeyRequest finish but not notify statusCode:" + paramInt1, false);
          Logger.d("newLogin PfkeyRequest finish but not notify, statusCode:" + paramInt1);
          return;
        }
        notifyLogin(paramBoolean, paramInt2, paramInt1);
        return;
      } while (this.notifyState != 2);
      notifyWakup(paramBoolean);
    } while ((!LoginManager.getInstance().getIsGameRequest()) && ((this.currentWakeUp == null) || (this.currentWakeUp.flag != 3002)));
    notifyLogin(paramBoolean, paramInt2, paramInt1);
  }
  
  private void notifyLogin(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    LoginManager.getInstance().setIsGameRequest(false);
    LoginRet localLoginRet = new LoginRet();
    if (true == paramBoolean)
    {
      localLoginRet = LoginInfoManager.getInstance().getLastLoginUserInfo();
      localLoginRet.flag = 0;
      localLoginRet.desc = WeGame.setDescribe(0, localLoginRet.platform);
    }
    for (;;)
    {
      localLoginRet.desc = (localLoginRet.desc + " cb:" + this.callbackMsg);
      Logger.d("notifyLogin flag = " + localLoginRet.flag + " desc = " + localLoginRet.desc);
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify(localLoginRet);
      return;
      localLoginRet.platform = LoginInfoManager.getInstance().getLastLoginUserInfo().platform;
      if (paramInt2 != 200)
      {
        localLoginRet.flag = 1003;
        localLoginRet.desc = "network error";
      }
      else if (paramInt1 == 2017)
      {
        localLoginRet.flag = -2;
        localLoginRet.desc = "check token failed, let user login again";
      }
      else
      {
        localLoginRet.flag = -1;
        localLoginRet.desc = "check token failed, let user login again";
      }
    }
  }
  
  private void notifyWakup(boolean paramBoolean)
  {
    WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(this.currentWakeUp);
  }
  
  private void reportEventToBeacon(int paramInt1, boolean paramBoolean1, int paramInt2, boolean paramBoolean2)
  {
    if (paramBoolean1) {
      if (2016 == paramInt1) {
        BeaconHelper.reportMSDKEvent("qqFirstLoginPfKeyReq", this.refreshStartTime, true, null, true);
      }
    }
    do
    {
      do
      {
        return;
      } while (2010 != paramInt1);
      BeaconHelper.reportMSDKEvent("getPfKeyReqWithWakeup", this.refreshStartTime, true, null, true);
      return;
      if (2016 == paramInt1)
      {
        localHashMap = new HashMap();
        localHashMap.put("param_FailCode", "" + paramInt2);
        localStringBuilder = new StringBuilder().append("");
        if (paramBoolean2) {}
        for (paramInt1 = 1;; paramInt1 = 0)
        {
          localHashMap.put("msdk_logic_error", paramInt1);
          BeaconHelper.reportMSDKEvent("qqFirstLoginPfKeyReq", this.refreshStartTime, false, localHashMap, true);
          return;
        }
      }
    } while (2010 != paramInt1);
    HashMap localHashMap = new HashMap();
    localHashMap.put("param_FailCode", "" + paramInt2);
    StringBuilder localStringBuilder = new StringBuilder().append("");
    if (paramBoolean2) {}
    for (paramInt1 = 1;; paramInt1 = 0)
    {
      localHashMap.put("msdk_logic_error", paramInt1);
      BeaconHelper.reportMSDKEvent("getPfKeyReqWithWakeup", this.refreshStartTime, false, localHashMap, true);
      return;
    }
  }
  
  private void updateLoginInfo(PfKeyResponse paramPfKeyResponse)
  {
    long l = System.currentTimeMillis() / 1000L;
    Logger.d("updateLoginInfo:" + WeGame.getInstance().getPlatId());
    if (this.tmpQLM == null)
    {
      Logger.d("updateLoginInfo error null == qqloginRecord !!!");
      return;
    }
    String str1;
    if (paramPfKeyResponse.pf == null)
    {
      str1 = "";
      if (paramPfKeyResponse.pfKey != null) {
        break label261;
      }
    }
    label261:
    for (String str2 = "";; str2 = paramPfKeyResponse.pfKey)
    {
      if ((!str1.equals(this.tmpQLM.pf)) || (!str2.equals(this.tmpQLM.pf_key))) {
        this.forceNotify = true;
      }
      this.tmpQLM.pf = str1;
      this.tmpQLM.pf_key = str2;
      Logger.d("rspFromLogin.paytokenExpire: " + paramPfKeyResponse.paytokenExpire);
      if (paramPfKeyResponse.paytokenExpire > 0L)
      {
        this.tmpQLM.pay_token_expire = (paramPfKeyResponse.paytokenExpire + l);
        SharedPreferencesTool.putInt(WeGame.getInstance().getActivity(), "paytoken_expire_time", (int)paramPfKeyResponse.paytokenExpire);
      }
      this.tmpQLM.save();
      WeGame.getInstance().setOpenSdkLoginInfo(this.tmpQLM.open_id, this.tmpQLM.access_token, this.tmpQLM.access_token_expire);
      WGPfManager.getInstance().setRegChannelId(paramPfKeyResponse.regChannel);
      PermissionManage.getInstance().updateDataFromNet(paramPfKeyResponse.permission);
      SwitcherManager.getInstance().updateSwitchData(paramPfKeyResponse.otherFuncs);
      return;
      str1 = paramPfKeyResponse.pf;
      break;
    }
  }
  
  protected String getInterfaceName()
  {
    String[] arrayOfString = getClass().getName().split("\\.");
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (arrayOfString != null)
    {
      localObject1 = localObject2;
      if (arrayOfString.length > 0) {
        localObject1 = arrayOfString[(arrayOfString.length - 1)];
      }
    }
    return localObject1;
  }
  
  public String getLocalTokenByType(int paramInt, Vector<TokenRet> paramVector)
  {
    paramVector = paramVector.iterator();
    while (paramVector.hasNext())
    {
      TokenRet localTokenRet = (TokenRet)paramVector.next();
      if (localTokenRet.type == paramInt) {
        return localTokenRet.value;
      }
    }
    return null;
  }
  
  public void getPfKeyWithWakeup(int paramInt, WakeupRet paramWakeupRet)
  {
    this.currentWakeUp = paramWakeupRet;
    this.notifyState = 2;
    notify(false, "getPfKeyReq no record in db", 200, 2010);
  }
  
  public void getQQFirstLoginPfKeyReq(QQLoginModel paramQQLoginModel)
  {
    if (paramQQLoginModel == null)
    {
      notify(false, "QQ Client Login Return NULL", 200, 2016);
      paramQQLoginModel = new HashMap();
      paramQQLoginModel.put("req", "QQFirstLogin");
      paramQQLoginModel.put("failure", "QQ Client Login Return NULL");
      SaveLogHelper.getInstance().reportLog(getInterfaceName(), "", paramQQLoginModel, true);
      return;
    }
    this.tmpQLM = paramQQLoginModel;
    Object localObject = paramQQLoginModel.getWakeupRet();
    if (localObject == null) {}
    for (this.notifyState = 1;; this.notifyState = 2)
    {
      this.refreshStartTime = System.currentTimeMillis();
      PfKeyRequest localPfKeyRequest = new PfKeyRequest();
      String str1 = WeGame.getInstance().qq_appid;
      String str2 = WGPfManager.getInstance().getChannelId();
      localObject = paramQQLoginModel.open_id;
      SaveLogHelper.getInstance().setOpenId((String)localObject);
      paramQQLoginModel = paramQQLoginModel.pay_token;
      int i = WeGame.QQPLATID;
      WeGame.getInstance().setPlatId(i);
      Logger.d("updateLoginInfo1:" + WeGame.getInstance().getPlatId());
      String str3 = WGPfManager.getInstance().getPlatformId();
      paramQQLoginModel = localPfKeyRequest.getReqJson((String)localObject, paramQQLoginModel, str1, str2, WeGame.getInstance().offerId, str3, i);
      ((MsdkStat)MsdkStat.gDefault.get()).addLoginLog(paramQQLoginModel, true);
      localObject = UrlManager.getUrl("/auth/getlogin_info/", i, (String)localObject);
      Logger.d((String)localObject);
      FilterLogHelper.saveKeysReq(getInterfaceName(), paramQQLoginModel, "QQFirstLogin");
      new HttpRequestManager(this).postTextAsync((String)localObject, paramQQLoginModel.toString(), 2016);
      return;
      this.currentWakeUp = ((WakeupRet)localObject);
    }
  }
  
  public void onFailure(String paramString, int paramInt1, int paramInt2)
  {
    reportEventToBeacon(paramInt2, false, paramInt1, false);
    if (paramString != null) {
      Logger.d("errorContent:" + paramString + " statusCode: " + paramInt1);
    }
    notify(false, paramString, paramInt1, paramInt2);
  }
  
  public void onSuccess(String paramString, int paramInt1, int paramInt2)
  {
    String str2 = "";
    PfKeyResponse localPfKeyResponse;
    if ((paramInt2 == 2010) || (2016 == paramInt2) || (2017 == paramInt2))
    {
      localPfKeyResponse = new PfKeyResponse();
      if (paramString != null) {
        break label92;
      }
      Logger.d("PfKeyRequestMng what:" + paramInt2 + ", http onSuccess but response no params, statusCode :" + paramInt1);
      notify(false, "response no params", paramInt1, paramInt2);
      reportEventToBeacon(paramInt2, false, 1002, false);
    }
    label92:
    do
    {
      return;
      str1 = str2;
      try
      {
        localPfKeyResponse.parseJson(new SafeJSONObject(paramString));
        str1 = str2;
        paramString = localPfKeyResponse.msg;
        str1 = paramString;
        if (localPfKeyResponse.ret != 0) {
          break label365;
        }
        str1 = paramString;
        reportEventToBeacon(paramInt2, true, 0, false);
        str1 = paramString;
        PermissionManage.getInstance().updateDataFromNet(localPfKeyResponse.permission);
        str1 = paramString;
        SwitcherManager.getInstance().updateSwitchData(localPfKeyResponse.otherFuncs);
        if (2016 != paramInt2) {
          break;
        }
        str1 = paramString;
        if (!((WhiteListMng)WhiteListMng.gDefault.get()).needQueryWhiteList()) {
          break;
        }
        str1 = paramString;
        if (this.tmpQLM == null)
        {
          str1 = paramString;
          notify(false, paramString, paramInt1, paramInt2);
          return;
        }
      }
      catch (JSONException paramString)
      {
        paramString.printStackTrace();
        notify(false, str1, paramInt1, paramInt2);
        reportEventToBeacon(paramInt2, false, 1001, false);
        return;
      }
      str1 = paramString;
      this.tmpQLM.pf = localPfKeyResponse.pf;
      str1 = paramString;
      this.tmpQLM.pf_key = localPfKeyResponse.pfKey;
      str1 = paramString;
      ((WhiteListMng)WhiteListMng.gDefault.get()).setTmpQQLoginInfo(this.tmpQLM);
      str1 = paramString;
      ((WhiteListMng)WhiteListMng.gDefault.get()).queryUserWhiteListAsync(WeGame.QQPLATID, this.tmpQLM.open_id, this.tmpQLM.access_token);
      str1 = paramString;
    } while (this.notifyState != 2);
    String str1 = paramString;
    LoginManager.getInstance().setIsCheckingToken(false);
    return;
    str1 = paramString;
    updateLoginInfo(localPfKeyResponse);
    str1 = paramString;
    notify(true, paramString, paramInt1, paramInt2);
    return;
    label365:
    str1 = paramString;
    Logger.d("onSuccess error ret:" + localPfKeyResponse.ret + " ret: " + localPfKeyResponse.msg);
    str1 = paramString;
    reportEventToBeacon(paramInt2, false, localPfKeyResponse.ret, true);
    if (2017 == paramInt2)
    {
      str1 = paramString;
      if (localPfKeyResponse.ret != 55536)
      {
        str1 = paramString;
        if (localPfKeyResponse.ret != 45536) {}
      }
      else
      {
        str1 = paramString;
        if (this.tmpQLM != null)
        {
          str1 = paramString;
          this.tmpQLM.access_token_expire = 0L;
          str1 = paramString;
          this.tmpQLM.pay_token_expire = 0L;
          str1 = paramString;
          this.tmpQLM.save();
        }
      }
    }
    str1 = paramString;
    notify(false, paramString, paramInt1, paramInt2);
  }
  
  public void verifyLocalQQToken(QQLoginModel paramQQLoginModel)
  {
    if (paramQQLoginModel == null)
    {
      notify(false, "QQ Client Login Return NULL", 200, 2017);
      LoginManager.getInstance().setIsCheckingToken(false);
      return;
    }
    this.tmpQLM = paramQQLoginModel;
    Object localObject1 = paramQQLoginModel.getWakeupRet();
    if (localObject1 == null) {
      this.notifyState = 1;
    }
    for (;;)
    {
      Object localObject2 = new PfKeyRequest();
      String str1 = WeGame.getInstance().qq_appid;
      String str2 = WGPfManager.getInstance().getChannelId();
      localObject1 = paramQQLoginModel.open_id;
      SaveLogHelper.getInstance().setOpenId((String)localObject1);
      String str3 = paramQQLoginModel.pay_token;
      int i = WeGame.QQPLATID;
      WeGame.getInstance().setPlatId(i);
      Logger.d("updateLoginInfo1:" + WeGame.getInstance().getPlatId());
      String str4 = WGPfManager.getInstance().getPlatformId();
      localObject2 = ((PfKeyRequest)localObject2).getReqJson((String)localObject1, str3, str1, str2, WeGame.getInstance().offerId, str4, i);
      try
      {
        ((JSONObject)localObject2).put("isCheckQQToken", "1");
        ((JSONObject)localObject2).put("isCheckPayToken", "1");
        ((JSONObject)localObject2).put("qqAccessToken", paramQQLoginModel.access_token);
        ((MsdkStat)MsdkStat.gDefault.get()).addLoginLog((JSONObject)localObject2, false);
        paramQQLoginModel = UrlManager.getUrl("/auth/getlogin_info/", i, (String)localObject1);
        Logger.d("url: " + paramQQLoginModel);
        Logger.d("req: " + ((JSONObject)localObject2).toString());
        FilterLogHelper.saveKeysReq(getInterfaceName(), (JSONObject)localObject2, "verifyLocalQQ");
        new HttpRequestManager(this).postTextAsync(paramQQLoginModel, ((JSONObject)localObject2).toString(), 2017);
        return;
        this.currentWakeUp = ((WakeupRet)localObject1);
        this.notifyState = 2;
      }
      catch (JSONException paramQQLoginModel)
      {
        for (;;)
        {
          paramQQLoginModel.printStackTrace();
        }
      }
    }
  }
}
