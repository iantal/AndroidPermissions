package com.tencent.msdk.notice;

import com.tencent.msdk.tools.DownloadThread;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.File;
import java.io.FilenameFilter;
import java.net.MalformedURLException;
import java.net.URL;

public class NoticePic
{
  public String mNoticeId = "";
  public String mPicHash = "";
  public String mPicUrl = "";
  public eMSDK_SCREENDIR mScreenDir = eMSDK_SCREENDIR.eMSDK_SCREENDIR_SENSOR;
  
  public NoticePic() {}
  
  public NoticePic(String paramString1, String paramString2, eMSDK_SCREENDIR paramEMSDK_SCREENDIR, String paramString3)
  {
    this.mNoticeId = paramString1;
    this.mPicUrl = paramString2;
    this.mScreenDir = paramEMSDK_SCREENDIR;
    this.mPicHash = paramString3;
  }
  
  public static Boolean checkNoticePicExist(String paramString1, String paramString2, String paramString3)
  {
    if (T.ckIsEmpty(paramString2)) {
      return Boolean.valueOf(false);
    }
    if (new File(getFilePathByNoticeIdAndHashValue(paramString1, paramString2, paramString3)).exists()) {
      return Boolean.valueOf(true);
    }
    return Boolean.valueOf(false);
  }
  
  public static Boolean checkNoticePicIsRight(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    if ((T.ckIsEmpty(paramString2)) || (T.ckIsEmpty(paramString1))) {
      return Boolean.valueOf(false);
    }
    paramString1 = new File(getFilePathByNoticeIdAndHashValue(paramString1, paramString3, paramString4));
    if (paramString1.exists())
    {
      if (checkPicMd5(paramString1, paramString2).booleanValue()) {
        return Boolean.valueOf(true);
      }
      paramString1.delete();
      return Boolean.valueOf(false);
    }
    return Boolean.valueOf(false);
  }
  
  /* Error */
  public static Boolean checkPicMd5(File paramFile, String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore_2
    //   5: aconst_null
    //   6: astore 4
    //   8: new 80	java/io/FileInputStream
    //   11: dup
    //   12: aload_0
    //   13: invokespecial 83	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   16: astore_3
    //   17: aload_3
    //   18: invokevirtual 87	java/io/FileInputStream:getChannel	()Ljava/nio/channels/FileChannel;
    //   21: getstatic 93	java/nio/channels/FileChannel$MapMode:READ_ONLY	Ljava/nio/channels/FileChannel$MapMode;
    //   24: lconst_0
    //   25: aload_0
    //   26: invokevirtual 97	java/io/File:length	()J
    //   29: invokevirtual 103	java/nio/channels/FileChannel:map	(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
    //   32: astore_0
    //   33: ldc 105
    //   35: invokestatic 111	java/security/MessageDigest:getInstance	(Ljava/lang/String;)Ljava/security/MessageDigest;
    //   38: astore_2
    //   39: aload_2
    //   40: aload_0
    //   41: invokevirtual 115	java/security/MessageDigest:update	(Ljava/nio/ByteBuffer;)V
    //   44: aload_2
    //   45: invokevirtual 119	java/security/MessageDigest:digest	()[B
    //   48: invokestatic 125	com/tencent/msdk/tools/HexUtil:bytes2HexStr	([B)Ljava/lang/String;
    //   51: getstatic 131	java/util/Locale:CHINA	Ljava/util/Locale;
    //   54: invokevirtual 137	java/lang/String:toLowerCase	(Ljava/util/Locale;)Ljava/lang/String;
    //   57: astore_0
    //   58: new 139	java/lang/StringBuilder
    //   61: dup
    //   62: invokespecial 140	java/lang/StringBuilder:<init>	()V
    //   65: ldc -114
    //   67: invokevirtual 146	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   70: aload_0
    //   71: invokevirtual 146	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   74: ldc -108
    //   76: invokevirtual 146	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   79: aload_1
    //   80: invokevirtual 146	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   83: invokevirtual 152	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   86: invokestatic 157	com/tencent/msdk/tools/Logger:d	(Ljava/lang/String;)V
    //   89: aload_0
    //   90: aload_1
    //   91: invokevirtual 160	java/lang/String:equalsIgnoreCase	(Ljava/lang/String;)Z
    //   94: ifeq +26 -> 120
    //   97: iconst_1
    //   98: invokestatic 47	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   101: astore_1
    //   102: aload_3
    //   103: ifnull +7 -> 110
    //   106: aload_3
    //   107: invokevirtual 163	java/io/FileInputStream:close	()V
    //   110: aload_1
    //   111: areturn
    //   112: astore_0
    //   113: aload_0
    //   114: invokevirtual 166	java/io/IOException:printStackTrace	()V
    //   117: goto -7 -> 110
    //   120: aload_3
    //   121: ifnull +7 -> 128
    //   124: aload_3
    //   125: invokevirtual 163	java/io/FileInputStream:close	()V
    //   128: iconst_0
    //   129: invokestatic 47	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   132: areturn
    //   133: astore_0
    //   134: aload_0
    //   135: invokevirtual 166	java/io/IOException:printStackTrace	()V
    //   138: goto -10 -> 128
    //   141: astore_0
    //   142: aload 4
    //   144: astore_0
    //   145: aload_0
    //   146: astore_2
    //   147: ldc -88
    //   149: invokestatic 171	com/tencent/msdk/tools/Logger:e	(Ljava/lang/String;)V
    //   152: iconst_0
    //   153: invokestatic 47	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   156: astore_2
    //   157: aload_2
    //   158: astore_1
    //   159: aload_0
    //   160: ifnull -50 -> 110
    //   163: aload_0
    //   164: invokevirtual 163	java/io/FileInputStream:close	()V
    //   167: aload_2
    //   168: areturn
    //   169: astore_0
    //   170: aload_0
    //   171: invokevirtual 166	java/io/IOException:printStackTrace	()V
    //   174: aload_2
    //   175: areturn
    //   176: astore_1
    //   177: aload 5
    //   179: astore_0
    //   180: aload_0
    //   181: astore_2
    //   182: aload_1
    //   183: invokevirtual 172	java/lang/Exception:printStackTrace	()V
    //   186: iconst_0
    //   187: invokestatic 47	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   190: astore_2
    //   191: aload_2
    //   192: astore_1
    //   193: aload_0
    //   194: ifnull -84 -> 110
    //   197: aload_0
    //   198: invokevirtual 163	java/io/FileInputStream:close	()V
    //   201: aload_2
    //   202: areturn
    //   203: astore_0
    //   204: aload_0
    //   205: invokevirtual 166	java/io/IOException:printStackTrace	()V
    //   208: aload_2
    //   209: areturn
    //   210: astore_0
    //   211: aload_2
    //   212: ifnull +7 -> 219
    //   215: aload_2
    //   216: invokevirtual 163	java/io/FileInputStream:close	()V
    //   219: aload_0
    //   220: athrow
    //   221: astore_1
    //   222: aload_1
    //   223: invokevirtual 166	java/io/IOException:printStackTrace	()V
    //   226: goto -7 -> 219
    //   229: astore_0
    //   230: aload_3
    //   231: astore_2
    //   232: goto -21 -> 211
    //   235: astore_1
    //   236: aload_3
    //   237: astore_0
    //   238: goto -58 -> 180
    //   241: astore_0
    //   242: aload_3
    //   243: astore_0
    //   244: goto -99 -> 145
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	247	0	paramFile	File
    //   0	247	1	paramString	String
    //   4	228	2	localObject1	Object
    //   16	227	3	localFileInputStream	java.io.FileInputStream
    //   6	137	4	localObject2	Object
    //   1	177	5	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   106	110	112	java/io/IOException
    //   124	128	133	java/io/IOException
    //   8	17	141	java/io/FileNotFoundException
    //   163	167	169	java/io/IOException
    //   8	17	176	java/lang/Exception
    //   197	201	203	java/io/IOException
    //   8	17	210	finally
    //   147	152	210	finally
    //   182	186	210	finally
    //   215	219	221	java/io/IOException
    //   17	97	229	finally
    //   17	97	235	java/lang/Exception
    //   17	97	241	java/io/FileNotFoundException
  }
  
  public static void deleteNoticePicByNoticeId(int paramInt)
  {
    String[] arrayOfString = getExternalMSDKDir().list(new FilenameFilter()
    {
      public boolean accept(File paramAnonymousFile, String paramAnonymousString)
      {
        return paramAnonymousString.contains(this.val$fileNameString);
      }
    });
    if (arrayOfString != null)
    {
      int i = arrayOfString.length;
      paramInt = 0;
      while (paramInt < i)
      {
        Object localObject = arrayOfString[paramInt];
        localObject = new File(getExternalMSDKDir(), (String)localObject);
        Logger.d("delete file:", ((File)localObject).toString());
        ((File)localObject).delete();
        paramInt += 1;
      }
    }
  }
  
  public static void downloadNoticePic(NoticePic paramNoticePic)
  {
    if ((paramNoticePic == null) || (T.ckIsEmpty(paramNoticePic.getmPicHash())) || (T.ckIsEmpty(paramNoticePic.getmPicUrl()))) {
      return;
    }
    try
    {
      if (checkNoticePicExist(paramNoticePic.getmNoticeId(), paramNoticePic.getmPicUrl(), paramNoticePic.getmPicHash()).booleanValue()) {
        break label101;
      }
      String str = getFilePathByNoticeIdAndHashValue(paramNoticePic.getmNoticeId(), paramNoticePic.getmPicUrl(), paramNoticePic.getmPicHash());
      if (!T.ckIsEmpty(str))
      {
        DownloadThread.addToDownloadQueue(new URL(paramNoticePic.getmPicUrl()), str, paramNoticePic.getmPicHash());
        return;
      }
    }
    catch (MalformedURLException paramNoticePic)
    {
      paramNoticePic.printStackTrace();
      return;
    }
    Logger.w("filePathString is empty");
    return;
    label101:
    Logger.w("file has exist");
  }
  
  public static File getExternalMSDKDir()
  {
    File localFile = new File(NoticeManager.sNoticePicPath, "MSDK");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    return localFile;
  }
  
  public static String getFilePathByNoticeId(int paramInt)
  {
    return new File(getExternalMSDKDir(), "Notice_" + paramInt).toString();
  }
  
  public static String getFilePathByNoticeIdAndHashValue(String paramString1, String paramString2, String paramString3)
  {
    if ((T.ckIsEmpty(paramString2)) || (T.ckIsEmpty(paramString1)) || (T.ckIsEmpty(paramString3))) {
      return "";
    }
    paramString2 = paramString2.split("\\.");
    return new File(getExternalMSDKDir(), "Notice_" + paramString1 + "_" + paramString3 + "." + paramString2[(paramString2.length - 1)]).toString();
  }
  
  public static void saveNoticePics(NoticeInfo paramNoticeInfo)
  {
    if (paramNoticeInfo == null) {}
    do
    {
      return;
      if ((!T.ckIsEmpty(paramNoticeInfo.mNoticeHImgUrl)) && (!T.ckIsEmpty(paramNoticeInfo.mNoticeHImgHash)))
      {
        Logger.d("add to queue :" + paramNoticeInfo.mNoticeId + "," + paramNoticeInfo.mNoticeHImgUrl + eMSDK_SCREENDIR.eMSDK_SCREENDIR_LANDSCAPE + paramNoticeInfo.mNoticeHImgHash);
        downloadNoticePic(new NoticePic(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeHImgUrl, eMSDK_SCREENDIR.eMSDK_SCREENDIR_LANDSCAPE, paramNoticeInfo.mNoticeHImgHash));
      }
    } while ((T.ckIsEmpty(paramNoticeInfo.mNoticeVImgUrl)) || (T.ckIsEmpty(paramNoticeInfo.mNoticeVImgHash)));
    Logger.d("add to queue :" + paramNoticeInfo.mNoticeId + "," + paramNoticeInfo.mNoticeVImgUrl + eMSDK_SCREENDIR.eMSDK_SCREENDIR_PORTRAIT + paramNoticeInfo.mNoticeVImgHash);
    downloadNoticePic(new NoticePic(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeVImgUrl, eMSDK_SCREENDIR.eMSDK_SCREENDIR_PORTRAIT, paramNoticeInfo.mNoticeVImgHash));
  }
  
  public String getmNoticeId()
  {
    return this.mNoticeId;
  }
  
  public String getmPicHash()
  {
    return this.mPicHash;
  }
  
  public String getmPicUrl()
  {
    return this.mPicUrl;
  }
  
  public eMSDK_SCREENDIR getmScreenDir()
  {
    return this.mScreenDir;
  }
  
  public void setmNoticeId(String paramString)
  {
    this.mNoticeId = paramString;
  }
  
  public void setmPicHash(String paramString)
  {
    if (!T.ckIsEmpty(paramString)) {
      this.mPicHash = paramString;
    }
  }
  
  public void setmPicUrl(String paramString)
  {
    if (!T.ckIsEmpty(paramString)) {
      this.mPicUrl = paramString;
    }
  }
  
  public void setmScreenDir(eMSDK_SCREENDIR paramEMSDK_SCREENDIR)
  {
    this.mScreenDir = paramEMSDK_SCREENDIR;
  }
}
