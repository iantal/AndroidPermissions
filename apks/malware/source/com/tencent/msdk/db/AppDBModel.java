package com.tencent.msdk.db;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.notice.AppInfo;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;

public class AppDBModel
  extends BaseDBModel
{
  public static final String TBL_NAME = "app_info";
  private static String col_app_id = "appid";
  private static String col_mat_id = "matid";
  private static String col_msdk_v = "msdkVersion";
  private static String col_open_id = "openid";
  private static String col_packageName = "packageName";
  private static String col_updatetime = "updateTime";
  private DbManager helper = (DbManager)DbManager.gDefault.get();
  
  public AppDBModel() {}
  
  public static String getCreateTblSql()
  {
    String str = "" + "CREATE TABLE IF NOT EXISTS [app_info] (";
    str = str + "[" + col_app_id + "] NVARCHAR(128)  PRIMARY KEY NOT NULL,";
    str = str + "[" + col_open_id + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_mat_id + "] VARCHAR(256)   NULL,";
    str = str + "[" + col_msdk_v + "] VARCHAR(64)  NULL,";
    str = str + "[" + col_packageName + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_updatetime + "] TIMESTAMP  NULL";
    str = str + ")";
    Logger.d(str);
    return str;
  }
  
  public static String getDropTblSql()
  {
    return "DROP TABLE IF EXISTS app_info";
  }
  
  private ContentValues getUsableContentValues(AppInfo paramAppInfo)
  {
    ContentValues localContentValues = new ContentValues();
    putValues(localContentValues, col_app_id, paramAppInfo.appid);
    putValues(localContentValues, col_open_id, paramAppInfo.openid);
    putValues(localContentValues, col_mat_id, paramAppInfo.matid);
    putValues(localContentValues, col_msdk_v, paramAppInfo.msdkVersion);
    putValues(localContentValues, col_packageName, paramAppInfo.packageName);
    return localContentValues;
  }
  
  public String getMatId(String paramString)
  {
    DbManager localDbManager = this.helper;
    String str2 = "";
    String str3;
    String[] arrayOfString;
    String str1;
    try
    {
      str3 = " " + col_app_id + " = ? ";
      arrayOfString = new String[1];
      arrayOfString[0] = paramString;
      str1 = str2;
      try
      {
        Cursor localCursor = this.helper.getReadableDatabase().query("app_info", null, str3, arrayOfString, null, null, null, null);
        paramString = str2;
        str1 = str2;
        if (localCursor.getCount() > 0)
        {
          str1 = str2;
          localCursor.moveToFirst();
          str1 = str2;
          paramString = getStringByName(localCursor, col_mat_id);
        }
        str1 = paramString;
        localCursor.close();
      }
      catch (Exception paramString)
      {
        for (;;)
        {
          Logger.d("getMatId error, Selection: " + str3 + arrayOfString);
          this.helper.close();
          paramString.printStackTrace();
          paramString = str1;
        }
      }
      return paramString;
    }
    finally {}
  }
  
  public String getTableName()
  {
    return "app_info";
  }
  
  public String getUpdateTimeByAppId(String paramString)
  {
    String str1 = "";
    if (!T.ckIsEmpty(paramString))
    {
      String str2;
      String[] arrayOfString;
      synchronized (this.helper)
      {
        str2 = " " + col_app_id + " = ? ";
        arrayOfString = new String[1];
        arrayOfString[0] = paramString;
        paramString = str1;
        try
        {
          Cursor localCursor = this.helper.getReadableDatabase().query("app_info", null, str2, arrayOfString, null, null, null, null);
          paramString = str1;
          if (localCursor != null)
          {
            paramString = str1;
            localCursor.moveToFirst();
            paramString = str1;
            str1 = getStringByName(localCursor, col_updatetime);
            paramString = str1;
            localCursor.close();
            paramString = str1;
          }
        }
        catch (Exception localException)
        {
          for (;;)
          {
            Logger.w("getUpdateTimeByAppId cause exception, Selection: " + str2 + arrayOfString);
            this.helper.close();
            localException.printStackTrace();
          }
        }
        return paramString;
      }
    }
    return "";
  }
  
  public boolean insert(AppInfo paramAppInfo)
  {
    synchronized (this.helper)
    {
      Logger.d("insert AppInfo db");
      try
      {
        this.helper.getWritableDatabase().insert("app_info", null, getUsableContentValues(paramAppInfo));
        return true;
      }
      catch (Exception paramAppInfo)
      {
        Logger.d("Insert into AppInfo error");
        this.helper.close();
        return false;
      }
    }
  }
  
  public boolean isExisted(AppInfo paramAppInfo)
  {
    String str;
    String[] arrayOfString;
    synchronized (this.helper)
    {
      str = " " + col_app_id + " = ? ";
      arrayOfString = new String[1];
      arrayOfString[0] = paramAppInfo.appid;
    }
    return false;
  }
  
  public boolean save(AppInfo paramAppInfo)
  {
    if (isExisted(paramAppInfo)) {
      return update(paramAppInfo) > 0;
    }
    return insert(paramAppInfo);
  }
  
  public void setUpdateTimeByAppId(String paramString1, String paramString2)
  {
    if ((!T.ckIsEmpty(paramString1)) && (!T.ckIsEmpty(paramString2))) {
      synchronized (this.helper)
      {
        Logger.d("update AppInfo db");
        ContentValues localContentValues = new ContentValues();
        putValues(localContentValues, col_updatetime, paramString2);
        paramString2 = " `" + col_app_id + "` like ? ";
        String[] arrayOfString = new String[1];
        arrayOfString[0] = paramString1;
        try
        {
          this.helper.getWritableDatabase().update("app_info", localContentValues, paramString2, arrayOfString);
          return;
        }
        catch (Exception paramString1)
        {
          for (;;)
          {
            Logger.d("setUpdateTimeByAppId error, Selection: " + paramString2 + arrayOfString);
            this.helper.close();
          }
        }
      }
    }
    Logger.e("appid or updateTime is null");
  }
  
  public int update(AppInfo paramAppInfo)
  {
    synchronized (this.helper)
    {
      Logger.d("update AppInfo db");
      ContentValues localContentValues = getUsableContentValues(paramAppInfo);
      String str = " `" + col_app_id + "` = ? ";
      String[] arrayOfString = new String[1];
      arrayOfString[0] = paramAppInfo.appid;
      try
      {
        int i = this.helper.getWritableDatabase().update("app_info", localContentValues, str, arrayOfString);
        return i;
      }
      catch (Exception paramAppInfo)
      {
        Logger.d("update error, Selection: " + str + arrayOfString);
        this.helper.close();
        return 0;
      }
    }
  }
}
