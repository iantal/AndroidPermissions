package com.tencent.msdk;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Toast;
import com.tencent.beacon.event.UserAction;
import com.tencent.mm.sdk.modelbase.BaseReq;
import com.tencent.mm.sdk.modelbiz.AddCardToWXCardPackage.Req;
import com.tencent.mm.sdk.modelbiz.AddCardToWXCardPackage.WXCardItem;
import com.tencent.mm.sdk.modelmsg.SendAuth.Req;
import com.tencent.mm.sdk.modelmsg.SendMessageToWX.Req;
import com.tencent.mm.sdk.modelmsg.WXAppExtendObject;
import com.tencent.mm.sdk.modelmsg.WXImageObject;
import com.tencent.mm.sdk.modelmsg.WXMediaMessage;
import com.tencent.mm.sdk.modelmsg.WXMediaMessage.IMediaObject;
import com.tencent.mm.sdk.modelmsg.WXMusicObject;
import com.tencent.mm.sdk.modelmsg.WXWebpageObject;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;
import com.tencent.msdk.ad.ADManager;
import com.tencent.msdk.api.CardRet;
import com.tencent.msdk.api.GroupRet;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.MsdkBaseInfo;
import com.tencent.msdk.api.ShareRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WGADObserver;
import com.tencent.msdk.api.WGGroupObserver;
import com.tencent.msdk.api.WGPlatformObserver;
import com.tencent.msdk.api.WGQZonePermissions;
import com.tencent.msdk.api.eQQScene;
import com.tencent.msdk.api.eWechatScene;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.consts.EPlatform;
import com.tencent.msdk.control.SwitcherManager;
import com.tencent.msdk.doctor.MsdkDoctor;
import com.tencent.msdk.handle.MsdkThreadManager;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.login.LoginInfoManager;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.login.LoginTimer;
import com.tencent.msdk.login.LoginUtils;
import com.tencent.msdk.myapp.autoupdate.AutoUpdateManager;
import com.tencent.msdk.myapp.whitelist.WhiteListMng;
import com.tencent.msdk.notice.NoticeManager;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.push.PushSwitchMng;
import com.tencent.msdk.qq.ApiName;
import com.tencent.msdk.qq.QQLogin;
import com.tencent.msdk.qq.QQVersionApiManager;
import com.tencent.msdk.stat.MsdkStat;
import com.tencent.msdk.stat.ReportEvent;
import com.tencent.msdk.stat.Stat;
import com.tencent.msdk.stat.eEVENT_TYPE;
import com.tencent.msdk.timer.TaskManager;
import com.tencent.msdk.timer.task.ADTask;
import com.tencent.msdk.timer.task.NoticeTask;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;
import com.tencent.msdk.tools.T;
import com.tencent.msdk.tools.VersionHelper;
import com.tencent.msdk.webview.WebViewManager;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.Tencent;
import com.tencent.tauth.UiError;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;

public final class WeGame
{
  private static final String MSDK_VERSION = "2.8.3a";
  public static final int QQHALL = EPlatform.ePlatform_QQHall.val();
  public static final int QQPLATID;
  public static final int WXPLATID = EPlatform.ePlatform_Weixin.val();
  private static volatile WeGame instance;
  private final long IMG_LIMIT_SIZE = 3145728L;
  private final int IMG_MAX_SIZE = 10000000;
  private final int THUMB_MAX_SIZE = 32000;
  private final int THUMB_SIZE = 200;
  public IWXAPI api;
  public int appVersionCode = -1;
  public String appVersionName = "";
  private Activity firstGameActivity = null;
  private int flag = 0;
  private BroadcastReceiver mADReportReceiver = new BroadcastReceiver()
  {
    public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
    {
      if ("com.tencent.msdk.webview.adreport".equals(paramAnonymousIntent.getAction()))
      {
        paramAnonymousContext = paramAnonymousIntent.getStringExtra("adids");
        if (paramAnonymousContext != null) {
          break label24;
        }
      }
      for (;;)
      {
        return;
        label24:
        paramAnonymousContext = paramAnonymousContext.split(",");
        if (paramAnonymousContext != null)
        {
          int i = 0;
          while (i < paramAnonymousContext.length)
          {
            ReportEvent.ReportADEvent(eEVENT_TYPE.eEVENT_AD_SHOW, paramAnonymousContext[i], "3", 0);
            i += 1;
          }
        }
      }
    }
  };
  private Activity mActivity = null;
  private boolean mFirstStart = true;
  public String mPermission = "all";
  private int mPlatId = 0;
  private Stat mStat = new Stat();
  private Tencent mTencent;
  private String msdkKey = "";
  public String offerId = null;
  private String qqAppKey = "";
  public String qq_appid = "";
  private MsdkThreadManager threadMgn;
  private long wxRequestStartTime = 0L;
  public String wx_appid = "";
  
  static
  {
    QQPLATID = EPlatform.ePlatform_QQ.val();
  }
  
  public WeGame() {}
  
  private int checkWXEnv()
  {
    if (!getInstance().api.isWXAppInstalled())
    {
      Logger.d("weixin not install");
      return 2000;
    }
    if (!getInstance().api.isWXAppSupportAPI()) {
      Logger.d("weixin not support api");
    }
    return 0;
  }
  
  public static WeGame getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new WeGame();
      }
      return instance;
    }
    finally {}
  }
  
  private boolean isTestEnv()
  {
    String str = getApiDomain();
    return (str.contains("test")) || (str.contains("dev"));
  }
  
  private void registerADReportReceiver()
  {
    if (this.mActivity != null)
    {
      IntentFilter localIntentFilter = new IntentFilter();
      localIntentFilter.addAction("com.tencent.msdk.webview.adreport");
      this.mActivity.getApplicationContext().registerReceiver(this.mADReportReceiver, localIntentFilter);
    }
  }
  
  public static String setDescribe(int paramInt1, int paramInt2)
  {
    String str = "";
    if (paramInt1 == 0) {
      if ((paramInt2 == QQPLATID) || (paramInt2 == QQHALL)) {
        str = ":-) , QQ授权成功";
      }
    }
    do
    {
      return str;
      return ":-) , WX授权成功";
      if (paramInt1 == 2005) {
        return ":-) , 微信refresh换acctoken 成功";
      }
    } while (paramInt1 != 2006);
    return ":-( , 微信refresh换acctoken 失败";
  }
  
  private void unRegisterADReportReceiver()
  {
    try
    {
      if (this.mActivity != null) {
        this.mActivity.getApplicationContext().unregisterReceiver(this.mADReportReceiver);
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void Initialized(Activity paramActivity, MsdkBaseInfo paramMsdkBaseInfo)
  {
    Logger.setLogType(paramActivity);
    Logger.d("Initialized start: " + this.wx_appid + "-" + this.qq_appid);
    ReportEvent.sGameStart = System.currentTimeMillis() / 1000L;
    this.mActivity = paramActivity;
    this.firstGameActivity = paramActivity;
    this.qq_appid = paramMsdkBaseInfo.qqAppId;
    this.qqAppKey = paramMsdkBaseInfo.qqAppKey;
    this.wx_appid = paramMsdkBaseInfo.wxAppId;
    this.msdkKey = paramMsdkBaseInfo.msdkKey;
    this.offerId = paramMsdkBaseInfo.offerId;
    this.appVersionName = paramMsdkBaseInfo.appVersionName;
    this.appVersionCode = paramMsdkBaseInfo.appVersionCode;
    this.mFirstStart = true;
    this.api = WXAPIFactory.createWXAPI(this.mActivity, this.wx_appid);
    this.api.registerApp(this.wx_appid);
    this.mTencent = Tencent.createInstance(this.qq_appid, paramActivity.getApplicationContext());
    this.mStat.init(paramActivity, paramMsdkBaseInfo.qqAppId);
    this.threadMgn = MsdkThreadManager.getInstance();
    this.threadMgn.init();
    this.threadMgn.sendGetPermissionMsg();
    WebViewManager.getInstance().init(this.mActivity, this.qq_appid);
    boolean bool1 = isTestEnv();
    SwitcherManager.getInstance().init(this.mActivity);
    PushSwitchMng.getInstance().init(this.mActivity, this.qq_appid, this.qqAppKey, this.wx_appid, bool1);
    ADManager.getInstance().init(this.mActivity);
    Logger.d("Initialized end: " + this.wx_appid + "-" + this.qq_appid);
    Logger.d("WeGameSDK Version: " + WGGetVersion());
    Object localObject;
    StringBuilder localStringBuilder;
    if (bool1)
    {
      localObject = new MsdkDoctor(getInstance().getActivity()).checkAll();
      localStringBuilder = new StringBuilder();
      if ((localObject == null) || (((ArrayList)localObject).size() == 0)) {
        break label778;
      }
      Logger.w("MSDK Config Error!!!!");
      Logger.w("Check Result: " + ((ArrayList)localObject).size());
      Logger.d("********************check result start********************");
      localObject = ((ArrayList)localObject).iterator();
      while (((Iterator)localObject).hasNext())
      {
        String str = (String)((Iterator)localObject).next();
        Logger.w(str);
        localStringBuilder.append(str);
      }
      Logger.d("********************check result end**********************");
    }
    for (;;)
    {
      Toast.makeText(getActivity(), "You are using " + getApiDomain(), 1).show();
      bool1 = SharedPreferencesTool.getBoolean(getActivity(), "ON_PAUSE_CALLED", false);
      boolean bool2 = SharedPreferencesTool.getBoolean(getActivity(), "ON_RESUME_CALLED", false);
      if ((bool1) && (!bool2)) {}
      localObject = new HashMap();
      ((HashMap)localObject).put("qqAppId", paramMsdkBaseInfo.qqAppId);
      ((HashMap)localObject).put("qqAppKey", paramMsdkBaseInfo.qqAppKey);
      ((HashMap)localObject).put("wxAppid", paramMsdkBaseInfo.wxAppId);
      ((HashMap)localObject).put("msdkKey", paramMsdkBaseInfo.msdkKey);
      ((HashMap)localObject).put("offerId", paramMsdkBaseInfo.offerId);
      ((HashMap)localObject).put("actName", paramActivity.getClass().getName());
      ((HashMap)localObject).put("doctor", localStringBuilder.toString());
      SaveLogHelper.getInstance().reportLog("Initialized", (HashMap)localObject, false);
      NoticeManager.getInstance().init(this.mActivity);
      ((WhiteListMng)WhiteListMng.gDefault.get()).setmContext(getActivity());
      if ("true".equals(ConfigManager.readValueByKey(getActivity(), "SAVE_UPDATE"))) {
        AutoUpdateManager.init();
      }
      PushSwitchMng.getInstance().registerAppPush();
      TaskManager.getInstance().startTimer();
      TaskManager.getInstance().addRunningTask(new NoticeTask("noticeTask"));
      TaskManager.getInstance().addRunningTask(new ADTask("ADTask"));
      ((MsdkStat)MsdkStat.gDefault.get()).clearReportStatus();
      LoginManager.getInstance().init(this.mActivity);
      LoginTimer.getInstance().initTimer(this.mActivity);
      logPlatformSDKVersion();
      registerADReportReceiver();
      return;
      label778:
      Logger.w("Check Result: " + ((ArrayList)localObject).size());
      Logger.d("All Config OK!!!");
    }
  }
  
  public boolean IsDifferentActivity(Activity paramActivity)
  {
    return (this.firstGameActivity != null) && (!this.firstGameActivity.equals(paramActivity));
  }
  
  public void OpenWXDeeplink(String paramString)
  {
    if (paramString.startsWith("weixin://"))
    {
      Intent localIntent = new Intent("android.intent.action.VIEW");
      localIntent.setData(Uri.parse(paramString));
      try
      {
        this.mActivity.startActivity(localIntent);
        return;
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return;
      }
    }
    MsdkThreadManager.getInstance().openUrl(paramString);
  }
  
  public void ReportGameTime(int paramInt)
  {
    this.mStat.reportGameTimeEvent(paramInt);
  }
  
  public void WGAddCardToWXCardPackage(String paramString1, String paramString2, String paramString3)
  {
    int i = checkWXEnv();
    Logger.d("WGAddCardToWXCardPackage code:" + i);
    switch (i)
    {
    default: 
      paramString3 = "{\"code\":\"\",\"openid\":\"\",\"timestamp\":\"" + paramString2 + "\",\"signature\":\"" + paramString3 + "\"}";
      paramString2 = new ArrayList();
      AddCardToWXCardPackage.WXCardItem localWXCardItem = new AddCardToWXCardPackage.WXCardItem();
      localWXCardItem.cardId = paramString1;
      localWXCardItem.cardExtMsg = paramString3;
      paramString2.add(localWXCardItem);
      paramString1 = new AddCardToWXCardPackage.Req();
      paramString1.cardArrary = paramString2;
      paramString1.transaction = "wechatAddCardToWXCardPackage";
      boolean bool = this.api.sendReq(paramString1);
      Logger.d("sendMsg ret:" + bool);
      return;
    case 2000: 
      paramString1 = new CardRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      WeGameNotifyGame.getInstance().OnAddWXCardNotify(paramString1);
      return;
    }
    paramString1 = new CardRet();
    paramString1.platform = getInstance().getPlatId();
    paramString1.desc = "Weixin API NOT Support";
    paramString1.flag = 2001;
    WeGameNotifyGame.getInstance().OnAddWXCardNotify(paramString1);
  }
  
  public void WGAddGameFriendToQQ(String paramString1, String paramString2, String paramString3)
  {
    if (this.mTencent == null)
    {
      Logger.w("WGAddGameFriendToQQmTencent NULL");
      return;
    }
    if (new VersionHelper(getActivity(), "com.tencent.mobileqq").compareVersion("5.1") < 0) {
      Logger.w("WGAddGameFriendToQQ need QQ version large than 5.1");
    }
    if (T.ckNonEmpty(new String[] { paramString1, paramString2, paramString3 })) {
      Logger.w("WGAddGameFriendToQQ :fopenid:" + paramString1 + ";desc:" + paramString2 + ";message" + paramString3);
    }
    Bundle localBundle = new Bundle();
    localBundle.putString("fopen_id", paramString1);
    localBundle.putString("friend_label", paramString2);
    localBundle.putString("add_msg", paramString3);
    this.mTencent.makeFriend(this.mActivity, localBundle);
    Logger.d("WGAddGameFriendToQQ called");
  }
  
  public void WGBindQQGroup(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    if (this.mTencent == null)
    {
      Logger.w("WGBindQQGroupmTencent NULL");
      return;
    }
    if (new VersionHelper(getActivity(), "com.tencent.mobileqq").compareVersion("5.1") < 0) {
      Logger.w("WGBindQQGroup need QQ version large than 5.1");
    }
    if (T.ckNonEmpty(new String[] { paramString1, paramString2, paramString3, paramString4 })) {
      Logger.w("WGBindQQGroup :unionid:" + paramString1 + ";union_name:" + paramString2 + ";zoneid" + paramString3 + ";signature:" + paramString4);
    }
    Bundle localBundle = new Bundle();
    localBundle.putString("unionid", paramString1);
    localBundle.putString("union_name", paramString2);
    localBundle.putString("zoneid", paramString3);
    localBundle.putString("signature", paramString4);
    this.mTencent.bindQQGroup(this.mActivity, localBundle);
    paramString1 = new GroupRet();
    paramString1.flag = this.flag;
    paramString1.errorCode = 0;
    paramString1.desc = "call WGBindQQGroup finished ，but not sure succ or failed";
    paramString1.platform = QQPLATID;
    WeGameNotifyGame.getInstance().NotifyGameBindQQGroup(paramString1);
    Logger.d("WGBindQQGroup called");
  }
  
  public String WGGetVersion()
  {
    Object localObject1 = getInstance().getActivity();
    try
    {
      localObject1 = ((Activity)localObject1).getResources().getAssets().open("msdkinfo.ini");
      Object localObject2 = new Properties();
      ((Properties)localObject2).load((InputStream)localObject1);
      localObject2 = ((Properties)localObject2).getProperty("VERSION", "");
      if (!"2.8.3a".equals(localObject2)) {
        Logger.d("MSDK_VERSION in code is different from VERSION in assets/msdkmetadata.ini");
      }
      localObject1 = localObject2;
      if (((String)localObject2).contains("$")) {
        localObject1 = "2.8.3a";
      }
      return localObject1;
    }
    catch (Exception localException)
    {
      Logger.d("MSDK Version does not match, is this a development version?");
    }
    return "2.8.3a";
  }
  
  public void WGJoinQQGroup(String paramString)
  {
    if (this.mTencent == null)
    {
      Logger.w("WGJoinQQGroupmTencent NULL");
      return;
    }
    if (new VersionHelper(getActivity(), "com.tencent.mobileqq").compareVersion("4.7") < 0) {
      Logger.w("WGJoinQQGroup need QQ version large than 4.7");
    }
    if (T.ckIsEmpty(paramString)) {
      Logger.w("WGJoinQQGroup:qqGroupId:" + paramString);
    }
    this.mTencent.joinQQGroup(this.mActivity, paramString);
    Logger.d("WGJoinQQGroup called");
  }
  
  public void WGReportEvent(String paramString1, String paramString2, boolean paramBoolean)
  {
    Logger.d("called");
    this.mStat.reportEvent(paramString1, paramString2, this.mPlatId, paramBoolean);
  }
  
  public void WGReportEvent(String paramString, HashMap<String, String> paramHashMap, boolean paramBoolean)
  {
    if ((paramString == null) || (paramHashMap == null))
    {
      paramString = new HashMap();
      Logger.e("WGReportEvent Error: name=" + "" + "params=" + paramString.toString());
      return;
    }
    this.mStat.reportEvent(paramString, paramHashMap, this.mPlatId, paramBoolean);
  }
  
  public void WGSendToQQ(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt2)
  {
    sendToQQ(paramInt1, paramString1, paramString2, paramString3, paramString4, paramInt2, true);
  }
  
  public void WGSendToQQWithMusic(eQQScene paramEQQScene, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    Logger.d("WGSendToQQWithMusic ");
    if (checkQQEnv() != 0) {}
    final VersionHelper localVersionHelper;
    do
    {
      return;
      if (this.mTencent == null)
      {
        Logger.d("WGSendToQQWithMusicmTencent NULL");
        return;
      }
      if (this.mTencent.getOpenId() == null) {
        Logger.d("WGSendToQQWithMusicgetOpenId NULL");
      }
      for (;;)
      {
        Logger.d("mTencent.isSessionValid(): " + this.mTencent.isSessionValid());
        if ((paramEQQScene.val() == 1) || (paramEQQScene.val() == 2)) {
          break;
        }
        Logger.e("scene error, scene should be QQShare.SHARE_TO_QQ_FLAG_QZONE_AUTO_OPEN or QQShare.SHARE_TO_QQ_FLAG_QZONE_ITEM_HIDE");
        return;
        if (!this.mTencent.isSessionValid()) {
          Logger.d("WGSendToQQWithMusicisSessionValid FALSE");
        }
      }
      if ((paramString3 == null) || (paramString3.trim().length() == 0))
      {
        paramEQQScene = new ShareRet();
        paramEQQScene.flag = -1;
        paramEQQScene.desc = "musicUrl cann't be empty!";
        paramEQQScene.platform = QQPLATID;
        WeGameNotifyGame.getInstance().OnShareNotify(paramEQQScene);
        Logger.e("musicUrl cann't be empty");
        return;
      }
      if ((paramEQQScene.val() == 1) && (paramString3.length() > 256)) {
        Logger.e("musicUrl is too long(>256), maybe fail to share.it's length:" + paramString3.length());
      }
      if (paramString5 == null) {
        Logger.e("Music Image URL not null");
      }
      localVersionHelper = new VersionHelper(getActivity(), "com.tencent.mobileqq");
      if (this.mTencent != null)
      {
        Object localObject = new LoginRet();
        LoginUtils.getLocalLoginRet((LoginRet)localObject);
        Logger.d("sendReq to QQ With OpenId: " + this.mTencent.getOpenId() + ";and local openid:" + ((LoginRet)localObject).open_id);
        localObject = new Bundle();
        ((Bundle)localObject).putInt("req_type", 2);
        ((Bundle)localObject).putString("targetUrl", paramString3);
        ((Bundle)localObject).putString("title", paramString1);
        ((Bundle)localObject).putString("audio_url", paramString4);
        ((Bundle)localObject).putString("imageUrl", paramString5);
        Logger.d("SHARE_TO_QQ_IMAGE_URL:" + paramString5);
        ((Bundle)localObject).putString("summary", paramString2);
        ((Bundle)localObject).putString("appName", getAppName());
        ((Bundle)localObject).putInt("cflag", paramEQQScene.val());
        Logger.d("WGSendToQQWithMusic params:");
        Logger.d((Bundle)localObject);
        this.mTencent.shareToQQ(this.mActivity, (Bundle)localObject, new IUiListener()
        {
          public void onCancel()
          {
            Logger.d("WGSendToQQWithMusic onCancel");
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              ShareRet localShareRet = new ShareRet();
              localShareRet.flag = 1001;
              localShareRet.platform = WeGame.QQPLATID;
              localShareRet.desc = "use cancel";
              WeGameNotifyGame.getInstance().OnShareNotify(localShareRet);
            }
          }
          
          public void onComplete(Object paramAnonymousObject)
          {
            Logger.d("WGSendToQQWithMusic onComplete");
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              paramAnonymousObject = new ShareRet();
              paramAnonymousObject.flag = 0;
              paramAnonymousObject.platform = WeGame.QQPLATID;
              paramAnonymousObject.desc = "success";
              WeGameNotifyGame.getInstance().OnShareNotify(paramAnonymousObject);
            }
          }
          
          public void onError(UiError paramAnonymousUiError)
          {
            Logger.d("WGSendToQQWithMusic onError Code (" + paramAnonymousUiError.errorCode + "), Message(" + paramAnonymousUiError.errorMessage + ")");
            ShareRet localShareRet;
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              localShareRet = new ShareRet();
              localShareRet.flag = -1;
              if (paramAnonymousUiError.errorMessage != null) {
                break label97;
              }
            }
            label97:
            for (paramAnonymousUiError = "";; paramAnonymousUiError = paramAnonymousUiError.errorMessage)
            {
              localShareRet.desc = paramAnonymousUiError;
              localShareRet.platform = WeGame.QQPLATID;
              WeGameNotifyGame.getInstance().OnShareNotify(localShareRet);
              return;
            }
          }
        });
      }
    } while (localVersionHelper.compareVersion("4.5") > 0);
    paramEQQScene = new ShareRet();
    paramEQQScene.flag = 0;
    paramEQQScene.platform = QQPLATID;
    WeGameNotifyGame.getInstance().OnShareNotify(paramEQQScene);
  }
  
  public void WGSendToQQWithPhoto(int paramInt, String paramString)
  {
    if (!checkApiSupport(ApiName.WGSendToQQWithPhoto))
    {
      paramString = new ShareRet();
      paramString.flag = -1;
      paramString.desc = "分享接口只支持手Q 4.5";
      paramString.platform = QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString);
      Logger.d("WGSendToQQWithPhoto only supported by MobileQQ 4.5 or later");
    }
    final VersionHelper localVersionHelper;
    do
    {
      return;
      String str = getAppName();
      if ((paramString == null) || (paramString.length() == 0))
      {
        paramString = new ShareRet();
        paramString.flag = -1;
        paramString.desc = "image file path emypty!";
        paramString.platform = QQPLATID;
        WeGameNotifyGame.getInstance().OnShareNotify(paramString);
        Logger.w("image file path emypty");
        return;
      }
      if ((str == null) || (str.length() == 0))
      {
        Logger.e("gameName emypty");
        return;
      }
      if ((paramInt != 1) && (paramInt != 2))
      {
        Logger.e("scene error, scene should be Tencent.SHARE_TO_QQ_FLAG_QZONE_AUTO_OPEN or Tencent.SHARE_TO_QQ_FLAG_QZONE_ITEM_HIDE");
        return;
      }
      if (!new File(paramString).exists())
      {
        paramString = new ShareRet();
        paramString.flag = -1;
        paramString.desc = "image file path invalid or not exists!";
        paramString.platform = QQPLATID;
        WeGameNotifyGame.getInstance().OnShareNotify(paramString);
        Logger.w("image file path invalid or not exists!");
        return;
      }
      localVersionHelper = new VersionHelper(getActivity(), "com.tencent.mobileqq");
      if (this.mTencent != null)
      {
        Object localObject = new LoginRet();
        LoginUtils.getLocalLoginRet((LoginRet)localObject);
        Logger.d("sendReq to QQ With OpenId: " + this.mTencent.getOpenId() + ";and local openid:" + ((LoginRet)localObject).open_id);
        localObject = new Bundle();
        ((Bundle)localObject).putInt("req_type", 5);
        ((Bundle)localObject).putInt("cflag", paramInt);
        ((Bundle)localObject).putString("imageLocalUrl", paramString);
        ((Bundle)localObject).putString("appName", str);
        this.mTencent.shareToQQ(this.mActivity, (Bundle)localObject, new IUiListener()
        {
          public void onCancel()
          {
            Logger.d("WGSendToQQWithPhoto onCancel");
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              ShareRet localShareRet = new ShareRet();
              localShareRet.flag = 1001;
              localShareRet.platform = WeGame.QQPLATID;
              localShareRet.desc = "use cancel";
              WeGameNotifyGame.getInstance().OnShareNotify(localShareRet);
            }
          }
          
          public void onComplete(Object paramAnonymousObject)
          {
            Logger.d("WGSendToQQWithPhoto onComplete");
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              paramAnonymousObject = new ShareRet();
              paramAnonymousObject.flag = 0;
              paramAnonymousObject.platform = WeGame.QQPLATID;
              paramAnonymousObject.desc = "success";
              WeGameNotifyGame.getInstance().OnShareNotify(paramAnonymousObject);
            }
          }
          
          public void onError(UiError paramAnonymousUiError)
          {
            Logger.d("WGSendToQQWithPhoto onError Code (" + paramAnonymousUiError.errorCode + "), Message(" + paramAnonymousUiError.errorMessage + ")");
            ShareRet localShareRet;
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              localShareRet = new ShareRet();
              localShareRet.flag = -1;
              if (paramAnonymousUiError.errorMessage != null) {
                break label97;
              }
            }
            label97:
            for (paramAnonymousUiError = "";; paramAnonymousUiError = paramAnonymousUiError.errorMessage)
            {
              localShareRet.desc = paramAnonymousUiError;
              localShareRet.platform = WeGame.QQPLATID;
              WeGameNotifyGame.getInstance().OnShareNotify(localShareRet);
              return;
            }
          }
        });
      }
    } while (localVersionHelper.compareVersion("4.5") > 0);
    paramString = new ShareRet();
    paramString.flag = 0;
    paramString.platform = QQPLATID;
    WeGameNotifyGame.getInstance().OnShareNotify(paramString);
  }
  
  public void WGSendToWeixin(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, byte[] paramArrayOfByte, int paramInt2)
  {
    Logger.d("WGSendToWeixin：" + paramInt1);
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt2 == 0))
      {
        Logger.e("imgData should NOT BE NULL and imgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    case 2001: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin API NOT Support";
      paramString1.flag = 2001;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    }
    Logger.d("imgData: " + paramArrayOfByte.length + ";imgDataLen: " + paramInt2);
    paramString3 = paramArrayOfByte;
    ByteArrayOutputStream localByteArrayOutputStream;
    if (paramArrayOfByte.length > 32000)
    {
      Logger.w("imgData is large than 32K, it will be compress");
      paramString3 = new BitmapFactory.Options();
      paramString3.inJustDecodeBounds = true;
      BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2, paramString3);
      int i = paramString3.outWidth;
      int j = paramString3.outHeight;
      if (i > j)
      {
        paramString3.outWidth = 200;
        paramString3.outHeight = (j * 200 / i);
        paramString3.inSampleSize = (i / 200);
        paramString3.inJustDecodeBounds = false;
      }
      for (paramString3 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2, paramString3); paramString3 == null; paramString3 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2, paramString3))
      {
        Logger.e("imgData decode to thumbBmp error!");
        return;
        paramString3.outHeight = 200;
        paramString3.outWidth = (i * 200 / j);
        paramString3.inSampleSize = (j / 200);
        paramString3.inJustDecodeBounds = false;
      }
      localObject = new int[8];
      Object tmp372_370 = localObject;
      tmp372_370[0] = 95;
      Object tmp377_372 = tmp372_370;
      tmp377_372[1] = 90;
      Object tmp382_377 = tmp377_372;
      tmp382_377[2] = 80;
      Object tmp387_382 = tmp382_377;
      tmp387_382[3] = 60;
      Object tmp392_387 = tmp387_382;
      tmp392_387[4] = 20;
      Object tmp397_392 = tmp392_387;
      tmp397_392[5] = 5;
      Object tmp401_397 = tmp397_392;
      tmp401_397[6] = 2;
      Object tmp406_401 = tmp401_397;
      tmp406_401[7] = 1;
      tmp406_401;
      localByteArrayOutputStream = new ByteArrayOutputStream();
      paramString3.compress(Bitmap.CompressFormat.JPEG, localObject[0], localByteArrayOutputStream);
      paramInt2 = 0 + 1;
      while ((localByteArrayOutputStream.size() > 32000) && (paramInt2 < localObject.length))
      {
        localByteArrayOutputStream.reset();
        paramString3.compress(Bitmap.CompressFormat.JPEG, localObject[paramInt2], localByteArrayOutputStream);
        paramInt2 += 1;
      }
      if (paramInt2 >= localObject.length)
      {
        Logger.d("compress image faild!");
        return;
      }
    }
    try
    {
      localObject = localByteArrayOutputStream.toByteArray();
      paramArrayOfByte = (byte[])localObject;
      localByteArrayOutputStream.close();
      paramArrayOfByte = (byte[])localObject;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        boolean bool;
        Logger.w("close byteStream exception:" + localIOException.getMessage());
        continue;
        localIOException.extInfo = "wgEmptyMediaTagName";
      }
    }
    paramString3.recycle();
    Logger.d("send imgData length is " + paramArrayOfByte.length);
    paramString3 = paramArrayOfByte;
    Object localObject = new WXAppExtendObject();
    if (!T.ckIsEmpty(paramString4))
    {
      ((WXAppExtendObject)localObject).extInfo = paramString4;
      paramArrayOfByte = new WXMediaMessage();
      paramArrayOfByte.title = paramString1;
      paramArrayOfByte.description = paramString2;
      paramArrayOfByte.mediaObject = ((WXMediaMessage.IMediaObject)localObject);
      paramArrayOfByte.mediaTagName = paramString4;
      paramArrayOfByte.thumbData = paramString3;
      paramString1 = new SendMessageToWX.Req();
      paramString2 = new LoginRet();
      LoginUtils.getLocalLoginRet(paramString2);
      paramString1.openId = paramString2.open_id;
      paramString1.transaction = "appdata";
      paramString1.message = paramArrayOfByte;
      paramString1.scene = paramInt1;
      Logger.d("WGSendToWinxinsendReq with openid  " + paramString1.openId);
      bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixin isSendReqSucc: " + bool);
      return;
    }
  }
  
  public void WGSendToWeixin(String paramString1, String paramString2, String paramString3, byte[] paramArrayOfByte, int paramInt, String paramString4)
  {
    Logger.d("WGSendToWeixin ");
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt == 0))
      {
        Logger.e("imgData should NOT BE NULL and imgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    case 2001: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin API NOT Support";
      paramString1.flag = 2001;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    }
    Logger.d("imgData: " + paramArrayOfByte.length + ";imgDataLen: " + paramInt);
    Object localObject1 = paramArrayOfByte;
    ByteArrayOutputStream localByteArrayOutputStream;
    if (paramArrayOfByte.length > 32000)
    {
      Logger.w("imgData is large than 32K, it will be compress");
      localObject1 = new BitmapFactory.Options();
      ((BitmapFactory.Options)localObject1).inJustDecodeBounds = true;
      BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt, (BitmapFactory.Options)localObject1);
      int i = ((BitmapFactory.Options)localObject1).outWidth;
      int j = ((BitmapFactory.Options)localObject1).outHeight;
      if (i > j)
      {
        ((BitmapFactory.Options)localObject1).outWidth = 200;
        ((BitmapFactory.Options)localObject1).outHeight = (j * 200 / i);
        ((BitmapFactory.Options)localObject1).inSampleSize = (i / 200);
        ((BitmapFactory.Options)localObject1).inJustDecodeBounds = false;
      }
      for (localObject1 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt, (BitmapFactory.Options)localObject1); localObject1 == null; localObject1 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt, (BitmapFactory.Options)localObject1))
      {
        Logger.e("imgData decode to thumbBmp error!");
        return;
        ((BitmapFactory.Options)localObject1).outHeight = 200;
        ((BitmapFactory.Options)localObject1).outWidth = (i * 200 / j);
        ((BitmapFactory.Options)localObject1).inSampleSize = (j / 200);
        ((BitmapFactory.Options)localObject1).inJustDecodeBounds = false;
      }
      localObject2 = new int[8];
      Object tmp356_354 = localObject2;
      tmp356_354[0] = 95;
      Object tmp361_356 = tmp356_354;
      tmp361_356[1] = 90;
      Object tmp366_361 = tmp361_356;
      tmp366_361[2] = 80;
      Object tmp371_366 = tmp366_361;
      tmp371_366[3] = 60;
      Object tmp376_371 = tmp371_366;
      tmp376_371[4] = 20;
      Object tmp381_376 = tmp376_371;
      tmp381_376[5] = 5;
      Object tmp385_381 = tmp381_376;
      tmp385_381[6] = 2;
      Object tmp390_385 = tmp385_381;
      tmp390_385[7] = 1;
      tmp390_385;
      localByteArrayOutputStream = new ByteArrayOutputStream();
      ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, localObject2[0], localByteArrayOutputStream);
      paramInt = 0 + 1;
      while ((localByteArrayOutputStream.size() > 32000) && (paramInt < localObject2.length))
      {
        localByteArrayOutputStream.reset();
        ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, localObject2[paramInt], localByteArrayOutputStream);
        paramInt += 1;
      }
      if (paramInt >= localObject2.length)
      {
        Logger.d("compress image faild!");
        return;
      }
    }
    try
    {
      localObject2 = localByteArrayOutputStream.toByteArray();
      paramArrayOfByte = (byte[])localObject2;
      localByteArrayOutputStream.close();
      paramArrayOfByte = (byte[])localObject2;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        boolean bool;
        Logger.w("close byteStream exception:" + localIOException.getMessage());
        continue;
        localIOException.extInfo = "wgEmptyMediaTagName";
      }
    }
    ((Bitmap)localObject1).recycle();
    Logger.d("imgData length is " + paramArrayOfByte.length);
    localObject1 = paramArrayOfByte;
    Object localObject2 = new WXAppExtendObject();
    if (!T.ckIsEmpty(paramString3))
    {
      ((WXAppExtendObject)localObject2).extInfo = paramString3;
      paramArrayOfByte = new WXMediaMessage();
      paramArrayOfByte.title = paramString1;
      paramArrayOfByte.description = paramString2;
      paramArrayOfByte.mediaObject = ((WXMediaMessage.IMediaObject)localObject2);
      paramArrayOfByte.mediaTagName = paramString3;
      paramArrayOfByte.thumbData = ((byte[])localObject1);
      paramArrayOfByte.messageExt = paramString4;
      paramString1 = new SendMessageToWX.Req();
      paramString2 = new LoginRet();
      LoginUtils.getLocalLoginRet(paramString2);
      paramString1.openId = paramString2.open_id;
      paramString1.transaction = "appdata";
      paramString1.message = paramArrayOfByte;
      paramString1.scene = 0;
      Logger.d("WGSendToWinxinsendReq with openid  " + paramString1.openId);
      bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixin isSendReqSucc: " + bool);
      return;
    }
  }
  
  public void WGSendToWeixinWithMusic(eWechatScene paramEWechatScene, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, byte[] paramArrayOfByte, int paramInt, String paramString6, String paramString7)
  {
    Logger.d("WGSendToWeixinWithMusic scene: " + paramEWechatScene);
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt == 0))
      {
        Logger.e("imgData should NOT BE NULL and imgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramEWechatScene = new ShareRet();
      paramEWechatScene.platform = getInstance().getPlatId();
      paramEWechatScene.desc = "Weixin NOT Installed";
      paramEWechatScene.flag = 2000;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      return;
    case 2001: 
      paramEWechatScene = new ShareRet();
      paramEWechatScene.platform = getInstance().getPlatId();
      paramEWechatScene.desc = "Weixin API NOT Support";
      paramEWechatScene.flag = 2001;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      return;
    }
    Logger.d("imgData: " + paramArrayOfByte.length + ";imgDataLen: " + paramInt);
    if (paramArrayOfByte.length > 10000000) {
      Logger.w("imgData too big, it should be less than 10M");
    }
    Object localObject = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt);
    if (localObject == null)
    {
      Logger.e("imgData decode to bmp error!");
      return;
    }
    float f1 = ((Bitmap)localObject).getWidth();
    float f2 = ((Bitmap)localObject).getHeight();
    if (f1 > f2) {}
    for (localObject = Bitmap.createScaledBitmap((Bitmap)localObject, 200, (int)(200.0F * (f2 / f1)), true);; localObject = Bitmap.createScaledBitmap((Bitmap)localObject, (int)(200.0F * (f1 / f2)), 200, true))
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      ((Bitmap)localObject).compress(Bitmap.CompressFormat.JPEG, 90, localByteArrayOutputStream);
      localObject = new WXMusicObject();
      ((WXMusicObject)localObject).musicUrl = paramString3;
      ((WXMusicObject)localObject).musicDataUrl = paramString4;
      paramString3 = new WXMediaMessage();
      paramString3.title = paramString1;
      paramString3.description = paramString2;
      paramString3.mediaObject = ((WXMediaMessage.IMediaObject)localObject);
      paramString3.thumbData = localByteArrayOutputStream.toByteArray();
      paramString3.mediaTagName = paramString5;
      paramString3.messageExt = paramString6;
      paramString3.messageAction = paramString7;
      Logger.d("imgData " + paramArrayOfByte.length);
      Logger.d("thumbData " + localByteArrayOutputStream.toByteArray().length);
      paramString1 = new SendMessageToWX.Req();
      paramString2 = new LoginRet();
      LoginUtils.getLocalLoginRet(paramString2);
      paramString1.openId = paramString2.open_id;
      paramString1.transaction = "img";
      paramString1.message = paramString3;
      paramString1.scene = paramEWechatScene.val();
      boolean bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixinWithMusic isSendReqSucc: " + bool);
      return;
    }
  }
  
  public void WGSendToWeixinWithPhoto(int paramInt1, String paramString, byte[] paramArrayOfByte, int paramInt2)
  {
    Logger.d("WGSendToWeixinWithPhoto scene: " + paramInt1);
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt2 == 0))
      {
        Logger.e("imgData should NOT BE NULL and imgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramString = new ShareRet();
      paramString.platform = getInstance().getPlatId();
      paramString.desc = "Weixin NOT Installed";
      paramString.flag = 2000;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString);
      return;
    case 2001: 
      paramString = new ShareRet();
      paramString.platform = getInstance().getPlatId();
      paramString.desc = "Weixin API NOT Support";
      paramString.flag = 2001;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString);
      return;
    }
    Logger.d("imgData: " + paramArrayOfByte.length + ";imgDataLen: " + paramInt2);
    if (paramArrayOfByte.length > 10000000) {
      Logger.w("imgData too big, it should be less than 10M");
    }
    Object localObject2 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2);
    if (localObject2 == null)
    {
      Logger.e("imgData decode to bmp error!");
      return;
    }
    float f1 = ((Bitmap)localObject2).getWidth();
    float f2 = ((Bitmap)localObject2).getHeight();
    if (f1 > f2) {}
    for (Object localObject1 = Bitmap.createScaledBitmap((Bitmap)localObject2, 200, (int)(200.0F * (f2 / f1)), true);; localObject1 = Bitmap.createScaledBitmap((Bitmap)localObject2, (int)(200.0F * (f1 / f2)), 200, true))
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, 90, localByteArrayOutputStream);
      localObject2 = new WXImageObject((Bitmap)localObject2);
      localObject1 = new WXMediaMessage();
      ((WXMediaMessage)localObject1).mediaObject = ((WXMediaMessage.IMediaObject)localObject2);
      ((WXMediaMessage)localObject1).thumbData = localByteArrayOutputStream.toByteArray();
      ((WXMediaMessage)localObject1).mediaTagName = paramString;
      Logger.d("imgData " + paramArrayOfByte.length);
      Logger.d("thumbData " + localByteArrayOutputStream.toByteArray().length);
      paramString = new SendMessageToWX.Req();
      paramArrayOfByte = new LoginRet();
      LoginUtils.getLocalLoginRet(paramArrayOfByte);
      paramString.openId = paramArrayOfByte.open_id;
      paramString.transaction = "img";
      paramString.message = ((WXMediaMessage)localObject1);
      paramString.scene = paramInt1;
      Logger.d("WGSendToWinxinsendReq with openid  " + paramString.openId);
      boolean bool = getInstance().api.sendReq(paramString);
      Logger.d("WGSendToWeixin isSendReqSucc: " + bool);
      return;
    }
  }
  
  public void WGSendToWeixinWithPhoto(int paramInt1, String paramString1, byte[] paramArrayOfByte, int paramInt2, String paramString2, String paramString3)
  {
    Logger.d("WGSendToWeixinWithPhoto scene: " + paramInt1);
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt2 == 0))
      {
        Logger.e("imgData should NOT BE NULL and imgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    case 2001: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin API NOT Support";
      paramString1.flag = 2001;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    }
    Logger.d("imgData: " + paramArrayOfByte.length + ";imgDataLen: " + paramInt2);
    if (paramArrayOfByte.length > 10000000) {
      Logger.w("imgData too big, it should be less than 10M");
    }
    Object localObject2 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2);
    if (localObject2 == null)
    {
      Logger.e("imgData decode to bmp error!");
      return;
    }
    float f1 = ((Bitmap)localObject2).getWidth();
    float f2 = ((Bitmap)localObject2).getHeight();
    if (f1 > f2) {}
    for (Object localObject1 = Bitmap.createScaledBitmap((Bitmap)localObject2, 200, (int)(200.0F * (f2 / f1)), true);; localObject1 = Bitmap.createScaledBitmap((Bitmap)localObject2, (int)(200.0F * (f1 / f2)), 200, true))
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      ((Bitmap)localObject1).compress(Bitmap.CompressFormat.JPEG, 90, localByteArrayOutputStream);
      localObject2 = new WXImageObject((Bitmap)localObject2);
      localObject1 = new WXMediaMessage();
      ((WXMediaMessage)localObject1).mediaObject = ((WXMediaMessage.IMediaObject)localObject2);
      ((WXMediaMessage)localObject1).thumbData = localByteArrayOutputStream.toByteArray();
      ((WXMediaMessage)localObject1).mediaTagName = paramString1;
      ((WXMediaMessage)localObject1).messageExt = paramString2;
      ((WXMediaMessage)localObject1).messageAction = paramString3;
      Logger.d("imgData " + paramArrayOfByte.length);
      Logger.d("thumbData " + localByteArrayOutputStream.toByteArray().length);
      paramString1 = new SendMessageToWX.Req();
      paramArrayOfByte = new LoginRet();
      LoginUtils.getLocalLoginRet(paramArrayOfByte);
      paramString1.openId = paramArrayOfByte.open_id;
      paramString1.transaction = "img";
      paramString1.message = ((WXMediaMessage)localObject1);
      paramString1.scene = paramInt1;
      boolean bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixin isSendReqSucc: " + bool);
      return;
    }
  }
  
  public void WGSendToWeixinWithPhotoPath(int paramInt, String paramString1, String paramString2, String paramString3, String paramString4)
  {
    Logger.d("WGSendToWeixinWithPhoto scene: " + paramInt);
    switch (checkWXEnv())
    {
    default: 
      localObject = new File(paramString2);
      if (!((File)localObject).exists())
      {
        Logger.e(paramString2 + " is not exist!");
        return;
      }
      break;
    case 2000: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    case 2001: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin API NOT Support";
      paramString1.flag = 2001;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    }
    long l = ((File)localObject).length();
    if (l > 3145728L) {
      Logger.w("image should be smaller than 3M!");
    }
    Bitmap localBitmap = BitmapFactory.decodeFile(paramString2);
    float f1 = localBitmap.getWidth();
    float f2 = localBitmap.getHeight();
    if (f1 > f2) {}
    for (Object localObject = Bitmap.createScaledBitmap(localBitmap, 200, (int)(200.0F * (f2 / f1)), true);; localObject = Bitmap.createScaledBitmap(localBitmap, (int)(200.0F * (f1 / f2)), 200, true))
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      ((Bitmap)localObject).compress(Bitmap.CompressFormat.JPEG, 90, localByteArrayOutputStream);
      localBitmap.recycle();
      localObject = new WXImageObject();
      ((WXImageObject)localObject).setImagePath(paramString2);
      paramString2 = new WXMediaMessage();
      paramString2.mediaObject = ((WXMediaMessage.IMediaObject)localObject);
      paramString2.thumbData = localByteArrayOutputStream.toByteArray();
      paramString2.mediaTagName = paramString1;
      paramString2.messageExt = paramString3;
      paramString2.messageAction = paramString4;
      Logger.d("imageData " + l);
      Logger.d("thumbData " + localByteArrayOutputStream.toByteArray().length);
      paramString1 = new SendMessageToWX.Req();
      paramString3 = new LoginRet();
      LoginUtils.getLocalLoginRet(paramString3);
      paramString1.openId = paramString3.open_id;
      paramString1.transaction = "img";
      paramString1.message = paramString2;
      paramString1.scene = paramInt;
      boolean bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixin isSendReqSucc: " + bool);
      return;
    }
  }
  
  public void WGSendToWeixinWithUrl(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, byte[] paramArrayOfByte, int paramInt2, String paramString5)
  {
    Logger.d("WGSendToWeixinWithUrl " + paramInt1);
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt2 == 0))
      {
        Logger.e("thumbImgData should NOT BE NULL and thumbImgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      Logger.d("sendtoweixin notify, flag:" + paramString1.flag + ",platform:" + paramString1.platform);
      return;
    case 2001: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin API NOT Support";
      paramString1.flag = 2001;
      Logger.d("sendtoweixin notify, flag:" + paramString1.flag + ",platform:" + paramString1.platform);
      return;
    }
    Logger.d("thumbImgData: " + paramArrayOfByte.length + ";thumbImgDataLen: " + paramInt2);
    if (paramArrayOfByte.length > 32000) {
      Logger.w("thumbImgData too big, it should be less than 32K");
    }
    paramString4 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2);
    if (paramString4 == null)
    {
      Logger.e("thumbImgData decode to bmp error!");
      return;
    }
    float f1 = paramString4.getWidth();
    float f2 = paramString4.getHeight();
    if (f1 > f2)
    {
      paramString4 = Bitmap.createScaledBitmap(paramString4, 200, (int)(200.0F * (f2 / f1)), true);
      paramArrayOfByte = new ByteArrayOutputStream();
      paramString4.compress(Bitmap.CompressFormat.JPEG, 90, paramArrayOfByte);
      paramString4 = new WXWebpageObject();
      paramString4.webpageUrl = paramString3;
      paramString3 = new WXMediaMessage(paramString4);
      paramString3.title = paramString1;
      paramString3.description = paramString2;
      paramString3.thumbData = paramArrayOfByte.toByteArray();
      paramString3.messageExt = paramString5;
      paramString1 = new SendMessageToWX.Req();
      paramString2 = new LoginRet();
      LoginUtils.getLocalLoginRet(paramString2);
      if (paramString2.platform != WXPLATID) {
        break label551;
      }
    }
    label551:
    for (paramString1.openId = paramString2.open_id;; paramString1.openId = "")
    {
      paramString1.transaction = "webpage";
      paramString1.message = paramString3;
      paramString1.scene = paramInt1;
      Logger.d("WGSendToWeixinWithUrlsendReq with openid  " + paramString1.openId);
      boolean bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixinWithUrl isSendReqSucc: " + bool);
      return;
      paramString4 = Bitmap.createScaledBitmap(paramString4, (int)(200.0F * (f1 / f2)), 200, true);
      break;
    }
  }
  
  public void WGSetPermission(int paramInt)
  {
    Logger.d("WGSetQzonePermission + permissions: " + paramInt);
    ArrayList localArrayList = new ArrayList(Arrays.asList(WGQZonePermissions.getPermissionStr(paramInt)));
    localArrayList.removeAll(Arrays.asList(new String[] { "", null }));
    StringBuilder localStringBuilder = new StringBuilder();
    paramInt = 0;
    while (paramInt < localArrayList.size())
    {
      if (paramInt > 0) {
        localStringBuilder.append(", ");
      }
      localStringBuilder.append((String)localArrayList.get(paramInt));
      paramInt += 1;
    }
    this.mPermission = localStringBuilder.toString();
    Logger.d("mPermission: " + this.mPermission);
  }
  
  public boolean checkApiSupport(ApiName paramApiName)
  {
    boolean bool = true;
    if (paramApiName.val() < ApiName.MAX_QQ_API) {
      bool = QQVersionApiManager.isSupport(this.mActivity, paramApiName);
    }
    while (paramApiName.val() >= ApiName.MAX_WX_API) {
      return bool;
    }
    return true;
  }
  
  public int checkQQEnv()
  {
    return 0;
  }
  
  public void enableCrashReport(boolean paramBoolean1, boolean paramBoolean2)
  {
    this.mStat.enableCrashReport(paramBoolean1, paramBoolean2);
  }
  
  public void feedback(String paramString)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    LoginUtils.getLocalLoginRet(new LoginRet());
    MsdkThreadManager.getInstance().sendFeedbackWithAppid(str);
  }
  
  public boolean feedback(String paramString1, String paramString2)
  {
    String str = paramString1;
    if (paramString1 == null) {
      str = "";
    }
    paramString1 = paramString2;
    if (paramString2 == null) {
      paramString1 = "";
    }
    paramString2 = new LoginRet();
    LoginUtils.getLocalLoginRet(paramString2);
    MsdkThreadManager.getInstance().sendFeedback(str, paramString1, paramString2.platform, paramString2.open_id);
    return true;
  }
  
  public Activity getActivity()
  {
    return this.mActivity;
  }
  
  public String getApiDomain()
  {
    Logger.d("Use DOMAIN: " + ConfigManager.getApiDomain(this.mActivity));
    return ConfigManager.getApiDomain(this.mActivity).trim();
  }
  
  public String getAppName()
  {
    try
    {
      String str = this.mActivity.getPackageManager().getPackageInfo(this.mActivity.getPackageName(), 0).applicationInfo.loadLabel(this.mActivity.getPackageManager()).toString();
      return str;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      localNameNotFoundException.printStackTrace();
    }
    return "";
  }
  
  protected long getExpiresTime(String paramString)
  {
    return (Long.parseLong(paramString) - System.currentTimeMillis()) / 1000L;
  }
  
  public boolean getFirstStartFlag()
  {
    return this.mFirstStart;
  }
  
  public int getFlag()
  {
    return this.flag;
  }
  
  public String getLocalTokenByType(int paramInt)
  {
    Object localObject = new LoginRet();
    LoginUtils.getLocalLoginRet((LoginRet)localObject);
    localObject = ((LoginRet)localObject).token.iterator();
    while (((Iterator)localObject).hasNext())
    {
      TokenRet localTokenRet = (TokenRet)((Iterator)localObject).next();
      if (localTokenRet.type == paramInt) {
        return localTokenRet.value;
      }
    }
    return null;
  }
  
  public String getMSDKKey()
  {
    return this.msdkKey;
  }
  
  public String getMSDKVersion()
  {
    return "2.8.3a";
  }
  
  public int getPlatId()
  {
    return this.mPlatId;
  }
  
  public String getQQAPPKey()
  {
    return this.qqAppKey;
  }
  
  public Stat getStat()
  {
    return this.mStat;
  }
  
  public Tencent getTencent()
  {
    return this.mTencent;
  }
  
  public long getWxRequestStartTime()
  {
    return this.wxRequestStartTime;
  }
  
  public void handleCallback(Intent paramIntent)
  {
    Logger.d("handleCallBack");
    Bundle localBundle = new Bundle();
    if (paramIntent != null) {}
    try
    {
      if (paramIntent.getExtras() == null)
      {
        Logger.d("handleCallBackintent is NULL");
        return;
      }
      Logger.d(paramIntent);
      localBundle.putAll(paramIntent.getExtras());
      Iterator localIterator = paramIntent.getExtras().keySet().iterator();
      while (localIterator.hasNext())
      {
        String str = (String)localIterator.next();
        Logger.d("remove " + str);
        paramIntent.removeExtra(str);
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      Logger.d(paramIntent);
      this.mActivity.setIntent(paramIntent);
      LoginManager.getInstance().handleCallback(localBundle);
    }
  }
  
  public void lauchWXPlatForm()
  {
    Logger.d("lauchWXPlatForm");
    getInstance().mPlatId = WXPLATID;
    switch (checkWXEnv())
    {
    default: 
      this.wxRequestStartTime = System.currentTimeMillis();
      localObject = new SendAuth.Req();
      ((SendAuth.Req)localObject).scope = "snsapi_userinfo,snsapi_friend,snsapi_message";
      ((SendAuth.Req)localObject).state = "none";
      Logger.d("wexin sendReq");
      boolean bool = getInstance().api.sendReq((BaseReq)localObject);
      Logger.d("lauchWXPlatForm wx SendReqRet: " + bool);
      if (!bool)
      {
        localObject = new LoginRet();
        ((LoginRet)localObject).platform = getInstance().getPlatId();
        ((LoginRet)localObject).desc = "Weixin login fail, sendReq false";
        ((LoginRet)localObject).flag = 2004;
        WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
      }
      return;
    case 2000: 
      localObject = new LoginRet();
      ((LoginRet)localObject).platform = getInstance().getPlatId();
      ((LoginRet)localObject).desc = "Weixin NOT Installed";
      ((LoginRet)localObject).flag = 2000;
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
      localHashMap = new HashMap();
      localHashMap.put("plat", String.valueOf(((LoginRet)localObject).platform));
      localHashMap.put("desc", ((LoginRet)localObject).desc);
      localHashMap.put("flag", String.valueOf(((LoginRet)localObject).flag));
      SaveLogHelper.getInstance().reportLog("WGLogin", localHashMap, true);
      return;
    }
    Object localObject = new LoginRet();
    ((LoginRet)localObject).platform = getInstance().getPlatId();
    ((LoginRet)localObject).desc = "Weixin API NOT Support";
    ((LoginRet)localObject).flag = 2001;
    WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
    HashMap localHashMap = new HashMap();
    localHashMap.put("plat", String.valueOf(((LoginRet)localObject).platform));
    localHashMap.put("desc", ((LoginRet)localObject).desc);
    localHashMap.put("flag", String.valueOf(((LoginRet)localObject).flag));
    SaveLogHelper.getInstance().reportLog("WGLogin", localHashMap, true);
  }
  
  public void logPlatformSDKVersion()
  {
    Logger.d("OpenSDK: 2.9.1");
    Logger.d("WeixinSDKVersionName: android 2.2.0");
    Logger.d("WeixinSDKVersionCode: 570556416");
    Logger.d("Mta: 2.0.0");
    Logger.d("Beacon: " + UserAction.getSDKVersion());
    Logger.d("WeixinClient: " + VersionHelper.getAppVersionName(this.mActivity, "com.tencent.mm"));
    Logger.d("QQClient: " + VersionHelper.getAppVersionName(this.mActivity, "com.tencent.mobileqq"));
    Logger.d("QQGameClient: " + VersionHelper.getAppVersionName(this.mActivity, "com.tencent.qqgame"));
  }
  
  public void login(int paramInt)
  {
    ((WhiteListMng)WhiteListMng.gDefault.get()).cleanWhiteListUserinfoCache();
    ((MsdkStat)MsdkStat.gDefault.get()).clearReportStatus();
    if (paramInt == WXPLATID)
    {
      setPlatId(WXPLATID);
      lauchWXPlatForm();
      return;
    }
    if (paramInt == QQPLATID)
    {
      setPlatId(QQPLATID);
      new QQLogin().lauchQQPlatForm();
      return;
    }
    Logger.e("Wrong platformId");
  }
  
  public boolean logout()
  {
    Logger.d("logout ");
    this.mStat.resetOpenId();
    WGPfManager.getInstance().clearPfAndPfKey();
    LoginRet localLoginRet = LoginInfoManager.getInstance().getLastLoginUserInfo();
    if (localLoginRet.platform != 0)
    {
      this.mPlatId = localLoginRet.platform;
      LoginInfoManager.getInstance().deleteLoginRecord(localLoginRet.open_id);
    }
    if (this.mPlatId == QQPLATID)
    {
      setPlatId(0);
      if (this.mTencent == null) {}
      while (!this.mTencent.isSessionValid()) {
        return false;
      }
      this.mTencent.logout(this.mActivity);
    }
    for (;;)
    {
      return true;
      if (this.mPlatId == WXPLATID)
      {
        setPlatId(0);
        if (this.api == null) {
          break;
        }
        this.api.unregisterApp();
      }
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    Logger.d("WeGame onActivityResult");
    new QQLogin().onActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public void onDestory(Activity paramActivity)
  {
    unRegisterADReportReceiver();
    if ((paramActivity != null) && (paramActivity.equals(this.firstGameActivity))) {
      this.firstGameActivity = null;
    }
  }
  
  public void sendToQQ(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt2, final boolean paramBoolean)
  {
    Logger.d("WGSendToQQ ");
    if (checkQQEnv() != 0) {}
    final VersionHelper localVersionHelper;
    do
    {
      return;
      if (this.mTencent == null)
      {
        Logger.d("WGSendToQQmTencent NULL");
        return;
      }
      if (this.mTencent.getOpenId() == null) {
        Logger.d("WGSendToQQgetOpenId NULL");
      }
      for (;;)
      {
        Logger.d("mTencent.isSessionValid(): " + this.mTencent.isSessionValid());
        if ((paramInt1 == 1) || (paramInt1 == 2)) {
          break;
        }
        Logger.e("scene error, scene should be QQShare.SHARE_TO_QQ_FLAG_QZONE_AUTO_OPEN or QQShare.SHARE_TO_QQ_FLAG_QZONE_ITEM_HIDE");
        return;
        if (!this.mTencent.isSessionValid()) {
          Logger.d("WGSendToQQisSessionValid FALSE");
        }
      }
      if ((paramInt1 == 1) && (paramString3 != null) && (paramString3.length() > 256)) {
        Logger.w("url is too long(>256), maybe fail to share. it's value:" + paramString3.length());
      }
      localVersionHelper = new VersionHelper(getActivity(), "com.tencent.mobileqq");
      if (this.mTencent != null)
      {
        Object localObject = new LoginRet();
        LoginUtils.getLocalLoginRet((LoginRet)localObject);
        Logger.d("sendReq to QQ With OpenId: " + this.mTencent.getOpenId() + ";and local openid:" + ((LoginRet)localObject).open_id);
        localObject = new Bundle();
        ((Bundle)localObject).putString("title", paramString1);
        ((Bundle)localObject).putString("summary", paramString2);
        ((Bundle)localObject).putString("targetUrl", paramString3);
        ((Bundle)localObject).putString("imageUrl", paramString4);
        Logger.d("SHARE_TO_QQ_IMAGE_URL:" + paramString4);
        ((Bundle)localObject).putInt("cflag", paramInt1);
        ((Bundle)localObject).putString("appName", getAppName());
        Logger.d((Bundle)localObject);
        this.mTencent.shareToQQ(this.mActivity, (Bundle)localObject, new IUiListener()
        {
          public void onCancel()
          {
            Logger.d("WGSendToQQ onCancel");
            ShareRet localShareRet;
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              localShareRet = new ShareRet();
              localShareRet.flag = 1001;
              localShareRet.platform = WeGame.QQPLATID;
              localShareRet.desc = "use cancel";
              if (paramBoolean) {
                WeGameNotifyGame.getInstance().OnShareNotify(localShareRet);
              }
            }
            else
            {
              return;
            }
            Logger.d("sendtoQQ notify, flag:" + localShareRet.flag + ",platform:" + localShareRet.platform);
          }
          
          public void onComplete(Object paramAnonymousObject)
          {
            Logger.d("WGSendToQQ onComplete");
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              paramAnonymousObject = new ShareRet();
              paramAnonymousObject.flag = 0;
              paramAnonymousObject.platform = WeGame.QQPLATID;
              paramAnonymousObject.desc = "success";
              if (paramBoolean) {
                WeGameNotifyGame.getInstance().OnShareNotify(paramAnonymousObject);
              }
            }
            else
            {
              return;
            }
            Logger.d("sendtoQQ notify, flag:" + paramAnonymousObject.flag + ",platform:" + paramAnonymousObject.platform);
          }
          
          public void onError(UiError paramAnonymousUiError)
          {
            Logger.d("WGSendToQQ onError Code (" + paramAnonymousUiError.errorCode + "), Message(" + paramAnonymousUiError.errorMessage + ")");
            ShareRet localShareRet;
            if (localVersionHelper.compareVersion("4.6") >= 0)
            {
              localShareRet = new ShareRet();
              localShareRet.flag = -1;
              if (paramAnonymousUiError.errorMessage != null) {
                break label104;
              }
            }
            label104:
            for (paramAnonymousUiError = "";; paramAnonymousUiError = paramAnonymousUiError.errorMessage)
            {
              localShareRet.desc = paramAnonymousUiError;
              localShareRet.platform = WeGame.QQPLATID;
              if (!paramBoolean) {
                break;
              }
              WeGameNotifyGame.getInstance().OnShareNotify(localShareRet);
              return;
            }
            Logger.d("sendtoQQ notify, flag:" + localShareRet.flag + ",platform:" + localShareRet.platform);
          }
        });
      }
    } while (localVersionHelper.compareVersion("4.5") > 0);
    paramString1 = new ShareRet();
    paramString1.flag = 0;
    paramString1.platform = QQPLATID;
    if (paramBoolean)
    {
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      return;
    }
    Logger.d("sendtoQQ notify, flag:" + paramString1.flag + ",platform:" + paramString1.platform);
  }
  
  public void sendToWeixinWithUrl(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, byte[] paramArrayOfByte, int paramInt2)
  {
    Logger.d("WGSendToWeixinWithUrl " + paramInt1);
    switch (checkWXEnv())
    {
    default: 
      if ((paramArrayOfByte == null) || (paramInt2 == 0))
      {
        Logger.e("imgData should NOT BE NULL and imgDataLen !== 0");
        return;
      }
      break;
    case 2000: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin NOT Installed";
      paramString1.flag = 2000;
      Logger.d("sendtoweixin notify, flag:" + paramString1.flag + ",platform:" + paramString1.platform);
      return;
    case 2001: 
      paramString1 = new ShareRet();
      paramString1.platform = getInstance().getPlatId();
      paramString1.desc = "Weixin API NOT Support";
      paramString1.flag = 2001;
      Logger.d("sendtoweixin notify, flag:" + paramString1.flag + ",platform:" + paramString1.platform);
      return;
    }
    Logger.d("imgData: " + paramArrayOfByte.length + ";imgDataLen: " + paramInt2);
    if (paramArrayOfByte.length > 32000) {
      Logger.w("imgData too big, it should be less than 32K");
    }
    paramString4 = BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramInt2);
    if (paramString4 == null)
    {
      Logger.e("imgData decode to bmp error!");
      return;
    }
    float f1 = paramString4.getWidth();
    float f2 = paramString4.getHeight();
    if (f1 > f2)
    {
      paramString4 = Bitmap.createScaledBitmap(paramString4, 200, (int)(200.0F * (f2 / f1)), true);
      paramArrayOfByte = new ByteArrayOutputStream();
      paramString4.compress(Bitmap.CompressFormat.JPEG, 90, paramArrayOfByte);
      paramString4 = new WXWebpageObject();
      paramString4.webpageUrl = paramString3;
      paramString3 = new WXMediaMessage(paramString4);
      paramString3.title = paramString1;
      paramString3.description = paramString2;
      paramString3.thumbData = paramArrayOfByte.toByteArray();
      paramString1 = new SendMessageToWX.Req();
      paramString2 = new LoginRet();
      LoginUtils.getLocalLoginRet(paramString2);
      if (paramString2.platform != WXPLATID) {
        break label544;
      }
    }
    label544:
    for (paramString1.openId = paramString2.open_id;; paramString1.openId = "")
    {
      paramString1.transaction = "msdkwebpage";
      paramString1.message = paramString3;
      paramString1.scene = paramInt1;
      Logger.d("WGSendToWeixinWithUrlsendReq with openid  " + paramString1.openId);
      boolean bool = getInstance().api.sendReq(paramString1);
      Logger.d("WGSendToWeixinWithUrl isSendReqSucc: " + bool);
      return;
      paramString4 = Bitmap.createScaledBitmap(paramString4, (int)(200.0F * (f1 / f2)), 200, true);
      break;
    }
  }
  
  public void setADObserver(WGADObserver paramWGADObserver)
  {
    WeGameNotifyGame.getInstance().setADObserver(paramWGADObserver);
  }
  
  protected String setExpiresTime(String paramString)
  {
    return System.currentTimeMillis() + Long.parseLong(paramString) * 1000L + "";
  }
  
  public void setFirstStartFlag(boolean paramBoolean)
  {
    this.mFirstStart = paramBoolean;
  }
  
  public void setFlag(int paramInt)
  {
    this.flag = paramInt;
  }
  
  public void setGroupObserver(WGGroupObserver paramWGGroupObserver)
  {
    WeGameNotifyGame.getInstance().setGroupObserver(paramWGGroupObserver);
  }
  
  public void setObserver(WGPlatformObserver paramWGPlatformObserver)
  {
    WeGameNotifyGame.getInstance().setObserver(paramWGPlatformObserver);
  }
  
  public void setOpenSdkLoginInfo(String paramString1, String paramString2, long paramLong)
  {
    String str = paramString1;
    if (paramString1 == null) {
      str = "";
    }
    paramString1 = paramString2;
    if (paramString2 == null) {
      paramString1 = "";
    }
    this.mTencent.setOpenId(str);
    this.mTencent.setAccessToken(paramString1, "" + paramLong);
  }
  
  public void setPlatId(int paramInt)
  {
    this.mPlatId = paramInt;
  }
  
  public void testSpeed(ArrayList<String> paramArrayList)
  {
    this.mStat.speedTest(paramArrayList);
  }
  
  public boolean wakeUpFromHall(Intent paramIntent)
  {
    if (paramIntent != null) {}
    try
    {
      if (paramIntent.getExtras() == null)
      {
        Logger.d("wakeUpFromHallintent is NULL");
        return false;
      }
      boolean bool = paramIntent.getExtras().keySet().contains("KEY_START_FROM_HALL");
      if (bool) {
        return true;
      }
    }
    catch (Exception paramIntent)
    {
      paramIntent.printStackTrace();
    }
    return false;
  }
}
