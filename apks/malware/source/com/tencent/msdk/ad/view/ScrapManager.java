package com.tencent.msdk.ad.view;

import android.annotation.SuppressLint;
import android.util.SparseArray;
import android.view.View;

public class ScrapManager
{
  private int[] activeViewTypes = new int[0];
  private View[] activeViews = new View[0];
  private SparseArray<View> currentScrollView;
  private SparseArray<View>[] scrollViews;
  private int viewTypeCount;
  
  public ScrapManager() {}
  
  static View getFromScrollViews(SparseArray<View> paramSparseArray, int paramInt)
  {
    int j = paramSparseArray.size();
    if (j > 0)
    {
      int i = 0;
      while (i < j)
      {
        int k = paramSparseArray.keyAt(i);
        localView = (View)paramSparseArray.get(k);
        if (k == paramInt)
        {
          paramSparseArray.remove(k);
          return localView;
        }
        i += 1;
      }
      paramInt = j - 1;
      View localView = (View)paramSparseArray.valueAt(paramInt);
      paramSparseArray.remove(paramSparseArray.keyAt(paramInt));
      return localView;
    }
    return null;
  }
  
  private void recycleScrollViews()
  {
    int m = this.activeViews.length;
    int n = this.viewTypeCount;
    SparseArray[] arrayOfSparseArray = this.scrollViews;
    int i = 0;
    while (i < n)
    {
      SparseArray localSparseArray = arrayOfSparseArray[i];
      int i1 = localSparseArray.size();
      int k = 0;
      int j = i1 - 1;
      while (k < i1 - m)
      {
        localSparseArray.remove(localSparseArray.keyAt(j));
        k += 1;
        j -= 1;
      }
      i += 1;
    }
  }
  
  @SuppressLint({"NewApi"})
  void addScrollView(View paramView, int paramInt1, int paramInt2)
  {
    if (this.viewTypeCount == 1)
    {
      this.currentScrollView.put(paramInt1, paramView);
      return;
    }
    this.scrollViews[paramInt2].put(paramInt1, paramView);
  }
  
  View getScrapView(int paramInt1, int paramInt2)
  {
    if (this.viewTypeCount == 1) {
      return getFromScrollViews(this.currentScrollView, paramInt1);
    }
    if ((paramInt2 >= 0) && (paramInt2 < this.scrollViews.length)) {
      return getFromScrollViews(this.scrollViews[paramInt2], paramInt1);
    }
    return null;
  }
  
  @SuppressLint({"NewApi"})
  void recycleActiveViews()
  {
    int i = 1;
    View[] arrayOfView = this.activeViews;
    int[] arrayOfInt = this.activeViewTypes;
    Object localObject1;
    int j;
    label34:
    View localView;
    int k;
    if (this.viewTypeCount > 1)
    {
      localObject1 = this.currentScrollView;
      j = arrayOfView.length - 1;
      if (j < 0) {
        break label123;
      }
      localView = arrayOfView[j];
      localObject2 = localObject1;
      if (localView != null)
      {
        k = arrayOfInt[j];
        arrayOfView[j] = null;
        arrayOfInt[j] = -1;
        if (shouldRecycleViewType(k)) {
          break label96;
        }
      }
    }
    for (Object localObject2 = localObject1;; localObject2 = localObject1)
    {
      j -= 1;
      localObject1 = localObject2;
      break label34;
      i = 0;
      break;
      label96:
      if (i != 0) {
        localObject1 = this.scrollViews[k];
      }
      ((SparseArray)localObject1).put(j, localView);
    }
    label123:
    recycleScrollViews();
  }
  
  public void setViewTypeCount(int paramInt)
  {
    if (paramInt < 1) {
      throw new IllegalArgumentException("Can't have a viewTypeCount < 1");
    }
    SparseArray[] arrayOfSparseArray = new SparseArray[paramInt];
    int i = 0;
    while (i < paramInt)
    {
      arrayOfSparseArray[i] = new SparseArray();
      i += 1;
    }
    this.viewTypeCount = paramInt;
    this.currentScrollView = arrayOfSparseArray[0];
    this.scrollViews = arrayOfSparseArray;
  }
  
  protected boolean shouldRecycleViewType(int paramInt)
  {
    return paramInt >= 0;
  }
}
