package com.tencent.msdk.ad.db;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.ad.ADInfo;
import com.tencent.msdk.ad.BriefADInfo;
import com.tencent.msdk.db.BaseDBModel;
import com.tencent.msdk.db.DbManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.ArrayList;

public class ADDBModel
  extends BaseDBModel
{
  private static final String TBL_NAME = "ad_tbl";
  public static final String adIdCol = "ad_id";
  public static final String beginTimeCol = "begin_time";
  public static final String endTimeCol = "end_time";
  public static final String hashValueCol = "hash_value";
  public static final String jumpUrlCol = "jump_url";
  public static final String picUrlCol = "pic_url";
  public static final String timestampCol = "timestamp";
  private DbManager helper = (DbManager)DbManager.gDefault.get();
  
  public ADDBModel() {}
  
  private ADInfo getADInfoColumnData(Cursor paramCursor)
  {
    ADInfo localADInfo = new ADInfo();
    localADInfo.mADId = getIntByName(paramCursor, "ad_id");
    localADInfo.mBeginTime = getLongByName(paramCursor, "begin_time");
    localADInfo.mEndTime = getLongByName(paramCursor, "end_time");
    localADInfo.mHashValue = getStringByName(paramCursor, "hash_value");
    localADInfo.mJumpUrl = getStringByName(paramCursor, "jump_url");
    localADInfo.mPicUrl = getStringByName(paramCursor, "pic_url");
    localADInfo.mTimestamp = getLongByName(paramCursor, "timestamp");
    return localADInfo;
  }
  
  private BriefADInfo getBriefADInfoColumnData(Cursor paramCursor)
  {
    return new BriefADInfo(getIntByName(paramCursor, "ad_id"), getLongByName(paramCursor, "timestamp"));
  }
  
  private ContentValues getContentCalues(ADInfo paramADInfo)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("ad_id", Integer.valueOf(paramADInfo.mADId));
    localContentValues.put("timestamp", Long.valueOf(paramADInfo.mTimestamp));
    localContentValues.put("begin_time", Long.valueOf(paramADInfo.mBeginTime));
    localContentValues.put("end_time", Long.valueOf(paramADInfo.mEndTime));
    localContentValues.put("jump_url", paramADInfo.mJumpUrl);
    localContentValues.put("pic_url", paramADInfo.mPicUrl);
    localContentValues.put("hash_value", paramADInfo.mHashValue);
    return localContentValues;
  }
  
  public static String getCreateTblSql()
  {
    String str = "" + "CREATE TABLE IF NOT EXISTS [ad_tbl] (";
    str = str + "[ad_id] INTEGER NOT NULL,";
    str = str + "[timestamp] TIMESTAMP NULL,";
    str = str + "[begin_time] TIMESTAMP NULL,";
    str = str + "[end_time] TIMESTAMP NULL,";
    str = str + "[jump_url] NVARCHAR NULL,";
    str = str + "[pic_url] NVARCHAR(128) NULL, ";
    str = str + "[hash_value] NVARCHAR(128) NULL ";
    return str + ")";
  }
  
  public static String getDropTblSql()
  {
    return "DROP TABLE IF EXISTS ad_tbl";
  }
  
  private boolean isExisted(int paramInt)
  {
    Object localObject1;
    synchronized (this.helper)
    {
      localObject1 = "" + paramInt;
    }
  }
  
  private int update(ADInfo paramADInfo)
  {
    ContentValues localContentValues;
    synchronized (this.helper)
    {
      localContentValues = getContentCalues(paramADInfo);
    }
    try
    {
      paramADInfo = "" + paramADInfo.mADId;
      int i = this.helper.getWritableDatabase().update("ad_tbl", localContentValues, " `ad_id` = ? ", new String[] { paramADInfo });
      this.helper.close();
      return i;
    }
    catch (Exception paramADInfo)
    {
      paramADInfo = paramADInfo;
      this.helper.close();
      return 0;
      paramADInfo = finally;
      throw paramADInfo;
    }
    finally
    {
      paramADInfo = finally;
      this.helper.close();
      throw paramADInfo;
    }
  }
  
  public boolean create(ADInfo paramADInfo)
  {
    for (;;)
    {
      synchronized (this.helper)
      {
        paramADInfo = getContentCalues(paramADInfo);
        long l = this.helper.getWritableDatabase().insert("ad_tbl", null, paramADInfo);
        this.helper.close();
        if (l != -1L)
        {
          bool = true;
          return bool;
        }
      }
      boolean bool = false;
    }
  }
  
  public int deleteADByTime(String paramString)
  {
    if (T.ckIsEmpty(paramString))
    {
      Logger.w("currentTime is null");
      return 0;
    }
    synchronized (this.helper)
    {
      Logger.d("deleteNoticeByTime, currentTime= " + paramString);
      int i = this.helper.getWritableDatabase().delete("ad_tbl", " end_time < ? ", new String[] { paramString });
      return i;
    }
  }
  
  public ArrayList<Integer> getADIdByTime(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    synchronized (this.helper)
    {
      Logger.d("whereClause: " + " end_time < ? " + ";currentTime:" + paramString);
      paramString = this.helper.getWritableDatabase().query("ad_tbl", null, " end_time < ? ", new String[] { paramString }, null, null, null, null);
      Logger.d("query result:" + paramString.getCount());
      paramString.moveToFirst();
      if (!paramString.isAfterLast())
      {
        ADInfo localADInfo = getADInfoColumnData(paramString);
        localArrayList.add(Integer.valueOf(localADInfo.mADId));
        Logger.d("query result info:" + localADInfo.mADId);
        paramString.moveToNext();
      }
    }
    paramString.close();
    return localArrayList;
  }
  
  public ArrayList<ADInfo> getADInfoByADList(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    if (T.ckIsEmpty(paramString))
    {
      Logger.d("ADList is null");
      return localArrayList;
    }
    paramString = paramString.replaceAll(" ", "");
    if (paramString.endsWith(","))
    {
      Logger.d("sql para is end with ,ADList:" + paramString);
      paramString = paramString.substring(0, paramString.length() - 1);
      Logger.d("sql para after check ,ADList:" + paramString);
    }
    for (;;)
    {
      synchronized (this.helper)
      {
        paramString = " ad_id in (" + paramString + ") ";
        Logger.d("whereClause: " + paramString);
        paramString = this.helper.getWritableDatabase().query("ad_tbl", null, paramString, null, null, null, null, null);
        Logger.d("query result:" + paramString.getCount());
        paramString.moveToFirst();
        if (paramString.isAfterLast()) {
          break;
        }
        ADInfo localADInfo = getADInfoColumnData(paramString);
        localArrayList.add(localADInfo);
        Logger.d("query result info:" + localADInfo.mADId);
        paramString.moveToNext();
      }
      Logger.d("msgList:" + paramString);
    }
    paramString.close();
    return localArrayList;
  }
  
  public ADInfo getADInfoById(int paramInt)
  {
    synchronized (this.helper)
    {
      Cursor localCursor = this.helper.getReadableDatabase().query("ad_tbl", null, " ad_id = ? ", new String[] { String.valueOf(paramInt) }, null, null, null, null);
      ADInfo localADInfo2 = new ADInfo();
      ADInfo localADInfo1 = localADInfo2;
      if (localCursor != null)
      {
        localADInfo1 = localADInfo2;
        if (localCursor.getCount() > 0)
        {
          localCursor.moveToFirst();
          localADInfo1 = getADInfoColumnData(localCursor);
        }
      }
      localCursor.close();
      return localADInfo1;
    }
  }
  
  public ArrayList<BriefADInfo> getBriefADInfo()
  {
    ArrayList localArrayList = new ArrayList();
    Cursor localCursor;
    synchronized (this.helper)
    {
      localCursor = this.helper.getReadableDatabase().query("ad_tbl", null, null, null, null, null, null, null);
      Logger.d("query result:" + localCursor.getCount());
      localCursor.moveToFirst();
      if (!localCursor.isAfterLast())
      {
        BriefADInfo localBriefADInfo = getBriefADInfoColumnData(localCursor);
        localArrayList.add(localBriefADInfo);
        Logger.d("query result info:" + localBriefADInfo.mADId);
        localCursor.moveToNext();
      }
    }
    localCursor.close();
    return localArrayList1;
  }
  
  public boolean save(ADInfo paramADInfo)
  {
    if (isExisted(paramADInfo.mADId)) {
      return update(paramADInfo) > 0;
    }
    return create(paramADInfo);
  }
  
  public boolean selfCheck()
  {
    return false;
  }
}
