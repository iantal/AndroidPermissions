package com.tencent.msdk.remote.api;

import android.os.Build;
import android.os.Build.VERSION;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.communicator.HttpRequestManager;
import com.tencent.msdk.communicator.IHttpRequestListener;
import com.tencent.msdk.locallog.FilterLogHelper;
import com.tencent.msdk.login.LoginUtils;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.MsdkSig;
import com.tencent.msdk.tools.T;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public abstract class RemoteApiBase
  implements IHttpRequestListener
{
  protected String accessToken = "";
  protected String appId = "";
  protected String appKey = "";
  protected JSONObject jsonBody = new SafeJSONObject();
  protected String openId = "";
  protected String pf = "";
  protected String pfKey = "";
  private String platform = "";
  private long requestStartTime = 0L;
  
  public RemoteApiBase()
  {
    LoginRet localLoginRet = new LoginRet();
    int i = LoginUtils.getLocalLoginRet(localLoginRet);
    if (localLoginRet.flag == 0)
    {
      this.openId = localLoginRet.open_id;
      this.pf = localLoginRet.pf;
      this.pfKey = localLoginRet.pf_key;
      if ((i == WeGame.QQPLATID) || (i == WeGame.QQHALL))
      {
        this.appId = WeGame.getInstance().qq_appid;
        this.appKey = WeGame.getInstance().getMSDKKey();
        this.accessToken = localLoginRet.getTokenByType(1);
        this.platform = ("" + WeGame.QQPLATID);
      }
      for (;;)
      {
        try
        {
          this.jsonBody.put("appid", this.appId);
          this.jsonBody.put("openid", this.openId);
          this.jsonBody.put("accessToken", this.accessToken);
          this.jsonBody.put("platform", this.platform);
          return;
        }
        catch (JSONException localJSONException)
        {
          localJSONException.printStackTrace();
          return;
        }
        if (i == WeGame.WXPLATID)
        {
          this.appId = WeGame.getInstance().wx_appid;
          this.appKey = WeGame.getInstance().getMSDKKey();
          this.accessToken = localLoginRet.getTokenByType(3);
          this.platform = ("" + WeGame.WXPLATID);
        }
      }
    }
    Logger.d("no login record");
  }
  
  protected String getCustomDomain()
  {
    return WeGame.getInstance().getApiDomain();
  }
  
  protected String getExtUrlParams()
  {
    return "";
  }
  
  protected String getInterfaceName()
  {
    String[] arrayOfString = getClass().getName().split("\\.");
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (arrayOfString != null)
    {
      localObject1 = localObject2;
      if (arrayOfString.length > 0) {
        localObject1 = arrayOfString[(arrayOfString.length - 1)];
      }
    }
    return localObject1;
  }
  
  protected abstract int getMyId();
  
  public String getNetDesc(JSONObject paramJSONObject, String paramString)
  {
    String str = "";
    if (paramJSONObject != null) {}
    try
    {
      str = paramString + " ret: " + paramJSONObject.getInt("ret") + " msg: " + paramJSONObject.getString("msg");
      return str;
    }
    catch (JSONException paramJSONObject)
    {
      paramJSONObject.printStackTrace();
    }
    return "";
  }
  
  protected abstract String getPath();
  
  protected void reportEventToBeacon(String paramString, boolean paramBoolean1, int paramInt, boolean paramBoolean2)
  {
    if (paramBoolean1)
    {
      BeaconHelper.reportMSDKEvent(paramString, this.requestStartTime, true, null, true);
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("param_FailCode", "" + paramInt);
    StringBuilder localStringBuilder = new StringBuilder().append("");
    if (paramBoolean2) {}
    for (paramInt = 1;; paramInt = 0)
    {
      localHashMap.put("msdk_logic_error", paramInt);
      BeaconHelper.reportMSDKEvent(paramString, this.requestStartTime, false, localHashMap, true);
      return;
    }
  }
  
  public void send()
  {
    send(this.jsonBody.toString());
  }
  
  protected void send(String paramString)
  {
    this.requestStartTime = System.currentTimeMillis();
    Object localObject = "" + this.requestStartTime;
    String str1 = MsdkSig.make((String)localObject, this.appKey);
    String str2 = "AndroidSDK_" + Build.VERSION.SDK + "_" + Build.DEVICE + "_" + Build.VERSION.RELEASE;
    str1 = String.format("?timestamp=%s&appid=%s&sig=%s&opua=%s&openid=%s&encode=2", new Object[] { localObject, this.appId, str1, T.encode(str2), this.openId });
    str2 = getExtUrlParams();
    localObject = str1;
    if (!T.ckIsEmpty(str2)) {
      localObject = str1 + "&" + str2;
    }
    localObject = getCustomDomain() + getPath() + (String)localObject;
    Logger.d(paramString);
    Logger.d((String)localObject);
    FilterLogHelper.saveKeysReq(getInterfaceName(), this.jsonBody, null);
    new HttpRequestManager(this).postTextAsync((String)localObject, paramString, getMyId());
  }
}
