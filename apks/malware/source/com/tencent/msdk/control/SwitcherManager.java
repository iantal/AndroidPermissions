package com.tencent.msdk.control;

import android.content.Context;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.push.PushSwitchMng;
import com.tencent.msdk.remote.api.SafeJSONObject;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;
import org.json.JSONException;
import org.json.JSONObject;

public class SwitcherManager
{
  private static final String WG_LOCAL_LOG_REPORT = "WGLocalLogReport";
  private static final String WG_PUSH_MSDK = "WGPushMSDK";
  private static volatile SwitcherManager mInstance = null;
  private Context mContext;
  private boolean mIsForeignNet = false;
  private JSONObject mSwitchJson = null;
  
  public SwitcherManager() {}
  
  public static SwitcherManager getInstance()
  {
    if (mInstance == null) {}
    try
    {
      if (mInstance == null) {
        mInstance = new SwitcherManager();
      }
      return mInstance;
    }
    finally {}
  }
  
  private String getSwitchData()
  {
    return SharedPreferencesTool.getString(this.mContext, "cloud_switch", null);
  }
  
  private boolean isExisted()
  {
    return SharedPreferencesTool.getBoolean(this.mContext, "switch_first_state", false);
  }
  
  private boolean isHaveFunc(String paramString)
  {
    try
    {
      if ((this.mSwitchJson != null) && (this.mSwitchJson.has(paramString)))
      {
        int i = this.mSwitchJson.getInt(paramString);
        if (1 == i) {
          return true;
        }
      }
    }
    catch (JSONException paramString)
    {
      paramString.printStackTrace();
      return false;
    }
    return false;
  }
  
  private void readSwitchFromPreference()
  {
    String str = getSwitchData();
    if (str == null)
    {
      Logger.e("SwitcherMng readSwitchData value is null");
      return;
    }
    setCloudSwitch(str);
  }
  
  private void saveDefaultData()
  {
    if (!isExisted()) {
      saveFirstWriteData("{}");
    }
  }
  
  private void saveFirstWriteData(String paramString)
  {
    SharedPreferencesTool.putDouble(this.mContext, "switch_first_state", true, "cloud_switch", paramString);
    setCloudSwitch(paramString);
  }
  
  private void setCloudSwitch(String paramString)
  {
    if (paramString != null) {}
    try
    {
      this.mSwitchJson = new SafeJSONObject(paramString);
      return;
    }
    catch (JSONException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public boolean currentUseMsdkPush(String paramString)
  {
    try
    {
      paramString = new SafeJSONObject(paramString);
      if ((paramString != null) && (paramString.has("WGPushMSDK")))
      {
        int i = paramString.getInt("WGPushMSDK");
        if (1 == i) {
          return true;
        }
      }
    }
    catch (JSONException paramString)
    {
      paramString.printStackTrace();
      return false;
    }
    return false;
  }
  
  public void init(Context paramContext)
  {
    this.mContext = paramContext;
    this.mIsForeignNet = false;
    saveDefaultData();
    readSwitchFromPreference();
  }
  
  public boolean isUseLocalLogReport()
  {
    return isHaveFunc("WGLocalLogReport");
  }
  
  public boolean isUseMsdkPush()
  {
    return isHaveFunc("WGPushMSDK");
  }
  
  public void setIsForeignUser(boolean paramBoolean)
  {
    this.mIsForeignNet = paramBoolean;
  }
  
  public void updateSwitchData(String paramString)
  {
    if ((!isUseMsdkPush()) && (currentUseMsdkPush(paramString))) {
      PushSwitchMng.getInstance().cancelXGPush();
    }
    SharedPreferencesTool.putString(this.mContext, "cloud_switch", paramString);
    setCloudSwitch(paramString);
    if (isUseLocalLogReport()) {
      SaveLogHelper.getInstance().reportAllLog();
    }
    Logger.d("msdkpush:" + isUseMsdkPush() + ",localreport:" + isUseLocalLogReport() + ", mIsForeignNet:" + this.mIsForeignNet);
  }
}
