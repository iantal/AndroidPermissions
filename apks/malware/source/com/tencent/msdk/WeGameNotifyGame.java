package com.tencent.msdk;

import com.tencent.msdk.ad.ADManager;
import com.tencent.msdk.api.ADRet;
import com.tencent.msdk.api.CardRet;
import com.tencent.msdk.api.GroupRet;
import com.tencent.msdk.api.LocationRet;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.ShareRet;
import com.tencent.msdk.api.WGADObserver;
import com.tencent.msdk.api.WGADObserverForSO;
import com.tencent.msdk.api.WGGroupObserver;
import com.tencent.msdk.api.WGGroupObserverForSO;
import com.tencent.msdk.api.WGPlatformObserver;
import com.tencent.msdk.api.WGPlatformObserverForSO;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.notice.NoticeManager;
import com.tencent.msdk.push.PushSwitchMng;
import com.tencent.msdk.remote.api.RelationRet;
import com.tencent.msdk.tools.Logger;
import java.util.HashMap;

public class WeGameNotifyGame
{
  private static volatile WeGameNotifyGame instance = null;
  public WGADObserver mADObserver = null;
  public WGGroupObserver mGroupObserver = null;
  public WGPlatformObserver mObserver = null;
  
  public WeGameNotifyGame() {}
  
  private void NotifyGameLogin(LoginRet paramLoginRet, boolean paramBoolean)
  {
    Logger.d("NotifyGameLogin, isTimerRefresh:" + paramBoolean);
    PushSwitchMng.getInstance().registerAppUserPush(paramLoginRet.flag, paramLoginRet.platform, paramLoginRet.open_id, paramBoolean);
    if ((paramLoginRet.flag == 0) || (paramLoginRet.flag == 2005)) {
      LoginManager.getInstance().reportLogin(paramLoginRet.open_id, paramLoginRet.platform);
    }
    if (this.mObserver == null)
    {
      Logger.d("WeGame OnLoginNotify C++ OnLoginNotify");
      WGPlatformObserverForSO.OnLoginNotify(paramLoginRet);
      return;
    }
    Logger.d("WeGame OnLoginNotify Java OnLoginNotify");
    this.mObserver.OnLoginNotify(paramLoginRet);
  }
  
  private void callbackGameBackendShare(ShareRet paramShareRet)
  {
    Logger.d(paramShareRet);
    if (this.mObserver == null)
    {
      Logger.d("WeGame callbackGameBackendShare C++ callbackGameBackendShare");
      WGPlatformObserverForSO.OnShareNotify(paramShareRet);
      return;
    }
    Logger.d("WeGame callbackGameBackendShare Java callbackGameBackendShare");
    this.mObserver.OnShareNotify(paramShareRet);
  }
  
  private void callbackGameRelation(RelationRet paramRelationRet)
  {
    if (this.mObserver == null)
    {
      Logger.d("WeGame callbackGameRelation C++ callbackGameRelation");
      WGPlatformObserverForSO.OnRelationNotify(paramRelationRet);
      return;
    }
    Logger.d("WeGame callbackGameRelation Java callbackGameRelation");
    this.mObserver.OnRelationNotify(paramRelationRet);
  }
  
  public static WeGameNotifyGame getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new WeGameNotifyGame();
      }
      return instance;
    }
    finally {}
  }
  
  public void NotifyGameBindQQGroup(GroupRet paramGroupRet)
  {
    Logger.d("NotifyGameBindGroup");
    if (this.mGroupObserver == null)
    {
      WGGroupObserverForSO.OnBindGroupNotify(paramGroupRet);
      return;
    }
    this.mGroupObserver.OnBindGroupNotify(paramGroupRet);
  }
  
  public void NotifyGameQueryQQGroupInfo(GroupRet paramGroupRet)
  {
    Logger.d("NotifyGameQueryGroupInfo");
    if (this.mGroupObserver == null)
    {
      WGGroupObserverForSO.OnQueryGroupInfoNotify(paramGroupRet);
      return;
    }
    this.mGroupObserver.OnQueryGroupInfoNotify(paramGroupRet);
  }
  
  public void NotifyGameQueryQQGroupKey(GroupRet paramGroupRet)
  {
    Logger.d("NotifyGameQueryGroupKey");
    if (this.mGroupObserver == null)
    {
      WGGroupObserverForSO.OnQueryQQGroupKeyNotify(paramGroupRet);
      return;
    }
    this.mGroupObserver.OnQueryQQGroupKeyNotify(paramGroupRet);
  }
  
  public void NotifyGameShare(ShareRet paramShareRet)
  {
    Logger.d("NotifyGameShare");
    if (this.mObserver == null)
    {
      WGPlatformObserverForSO.OnShareNotify(paramShareRet);
      return;
    }
    this.mObserver.OnShareNotify(paramShareRet);
  }
  
  public void NotifyGameUnbindQQGroup(GroupRet paramGroupRet)
  {
    Logger.d("NotifyGameUnbindGroup");
    if (this.mGroupObserver == null)
    {
      WGGroupObserverForSO.OnUnbindGroupNotify(paramGroupRet);
      return;
    }
    this.mGroupObserver.OnUnbindGroupNotify(paramGroupRet);
  }
  
  public void NotifyGameWakeUp(WakeupRet paramWakeupRet)
  {
    Logger.d("NotifyGameWakeUp");
    if (this.mObserver == null)
    {
      WGPlatformObserverForSO.OnWakeupNotify(paramWakeupRet);
      return;
    }
    this.mObserver.OnWakeupNotify(paramWakeupRet);
  }
  
  public void OnADBackPressedNotify(ADRet paramADRet)
  {
    Logger.d("OnADBackPressedNotify");
    if (this.mADObserver == null) {
      WGADObserverForSO.OnADBackPressedNotify(paramADRet);
    }
    for (;;)
    {
      SaveLogHelper.getInstance().reportLog("OnADBackNotify", paramADRet, false);
      return;
      this.mADObserver.OnADBackPressedNotify(paramADRet);
    }
  }
  
  public void OnADNotify(ADRet paramADRet)
  {
    Logger.d("OnADNotify");
    if (this.mADObserver == null) {
      WGADObserverForSO.OnADNotify(paramADRet);
    }
    for (;;)
    {
      SaveLogHelper.getInstance().reportLog("OnADNotify", paramADRet, false);
      return;
      this.mADObserver.OnADNotify(paramADRet);
    }
  }
  
  public void OnAddWXCardNotify(CardRet paramCardRet)
  {
    Logger.d("OnAddWXCardNotify");
    if (this.mObserver == null)
    {
      WGPlatformObserverForSO.OnAddWXCardNotify(paramCardRet);
      return;
    }
    this.mObserver.OnAddWXCardNotify(paramCardRet);
  }
  
  public void OnBackendRelationCallback(RelationRet paramRelationRet)
  {
    callbackGameRelation(paramRelationRet);
    SaveLogHelper.getInstance().reportLog("OnRelationNotify", paramRelationRet, false);
  }
  
  public void OnBackendShareCallback(ShareRet paramShareRet)
  {
    callbackGameBackendShare(paramShareRet);
    SaveLogHelper.getInstance().reportLog("OnBackShareNotify", paramShareRet, false);
  }
  
  public void OnClearLocationCallback(RelationRet paramRelationRet)
  {
    if (this.mObserver == null)
    {
      Logger.d("OnClearLocationCallbacknotify to cpp");
      WGPlatformObserverForSO.OnLocationNotify(paramRelationRet);
    }
    for (;;)
    {
      SaveLogHelper.getInstance().reportLog("CleanLocation", paramRelationRet, false);
      return;
      Logger.d("OnClearLocationCallbacknotify to java");
      this.mObserver.OnLocationNotify(paramRelationRet);
    }
  }
  
  public String OnCrashExtMessageNotify(int paramInt, String paramString)
  {
    Logger.d("OnCrashExtMessageNotify");
    if (this.mObserver == null)
    {
      Logger.d("OnCrashExtMessageNotify to cpp");
      paramString = WGPlatformObserverForSO.OnCrashExtMessageNotify();
      Logger.d("OnCrashExtMessageNotify to cpp, value:" + paramString);
      return paramString;
    }
    Logger.d("OnCrashExtMessageNotify to java");
    return this.mObserver.OnCrashExtMessageNotify();
  }
  
  public void OnFeedbackCallback(int paramInt, String paramString)
  {
    Logger.d("OnFeedbackCallback");
    if (this.mObserver == null)
    {
      Logger.d("OnFeedbackCallback to cpp");
      WGPlatformObserverForSO.OnFeedbackNotify(paramInt, paramString);
      return;
    }
    Logger.d("OnFeedbackCallback to java");
    this.mObserver.OnFeedbackNotify(paramInt, paramString);
  }
  
  public void OnFeedbackNotify(int paramInt, String paramString)
  {
    Logger.d("OnFeedbackNotify");
    if (this.mObserver == null)
    {
      Logger.d("OnFeedbackNotify to cpp");
      WGPlatformObserverForSO.OnFeedbackNotify(paramInt, paramString);
    }
    for (;;)
    {
      HashMap localHashMap = new HashMap();
      localHashMap.put("flag", String.valueOf(paramInt));
      localHashMap.put("desc", paramString);
      SaveLogHelper.getInstance().reportLog("Feedback", localHashMap, false);
      return;
      Logger.d("OnFeedbackNotify to java");
      this.mObserver.OnFeedbackNotify(paramInt, paramString);
    }
  }
  
  public void OnGetLocationInfoCallback(LocationRet paramLocationRet)
  {
    if (this.mObserver == null)
    {
      Logger.d("OnGetLocationInfoCallbacknotify to cpp");
      WGPlatformObserverForSO.OnLocationGotNotify(paramLocationRet);
    }
    for (;;)
    {
      SaveLogHelper.getInstance().reportLog("GetLocationInfo", paramLocationRet, false);
      return;
      Logger.d("OnGetLocationInfoGotCallbacknotify to java");
      this.mObserver.OnLocationGotNotify(paramLocationRet);
    }
  }
  
  public void OnGetNearbyPlayerCallback(RelationRet paramRelationRet)
  {
    if (this.mObserver == null)
    {
      Logger.d("OnGetNearbyPlayerCallbacknotify to cpp");
      WGPlatformObserverForSO.OnLocationNotify(paramRelationRet);
    }
    for (;;)
    {
      SaveLogHelper.getInstance().reportLog("QueryNearbyPlayer", paramRelationRet, false);
      return;
      Logger.d("OnGetNearbyPlayerCallbacknotify to java");
      this.mObserver.OnLocationNotify(paramRelationRet);
    }
  }
  
  public void OnPlatformLoginNotify(LoginRet paramLoginRet)
  {
    Logger.d("newLogin OnLoginNotify," + paramLoginRet.toLogStr());
    SaveLogHelper.getInstance().setOpenId(paramLoginRet.open_id);
    WeGame.getInstance().setFlag(paramLoginRet.flag);
    WeGame.getInstance().setPlatId(paramLoginRet.platform);
    if (paramLoginRet.flag == 0)
    {
      NoticeManager.getInstance().getNoticeInfo();
      ADManager.getInstance().getADInfo();
    }
    NotifyGameLogin(paramLoginRet, false);
    SaveLogHelper.getInstance().reportLog("OnLoginNotify", paramLoginRet, true);
  }
  
  public void OnPlatformWakeupNotify(WakeupRet paramWakeupRet)
  {
    Logger.d("newLogin OnWakeupNotify," + paramWakeupRet.toString());
    NotifyGameWakeUp(paramWakeupRet);
    SaveLogHelper.getInstance().reportLog("OnWakeupNotify", paramWakeupRet, true);
  }
  
  public void OnShareNotify(ShareRet paramShareRet)
  {
    Logger.d("OnShareNotify");
    NotifyGameShare(paramShareRet);
    SaveLogHelper.getInstance().reportLog("OnShareNotify", paramShareRet, false);
  }
  
  public void setADObserver(WGADObserver paramWGADObserver)
  {
    this.mADObserver = paramWGADObserver;
  }
  
  public void setGroupObserver(WGGroupObserver paramWGGroupObserver)
  {
    this.mGroupObserver = paramWGGroupObserver;
  }
  
  public void setObserver(WGPlatformObserver paramWGPlatformObserver)
  {
    this.mObserver = paramWGPlatformObserver;
  }
}
