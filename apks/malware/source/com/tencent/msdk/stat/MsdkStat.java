package com.tencent.msdk.stat;

import com.tencent.msdk.Singleton;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;
import org.json.JSONException;
import org.json.JSONObject;

public class MsdkStat
{
  private static final long LOGIN_THRESHOLD_IN_SECOND = 600L;
  private static final String PAUSE_TIME_KEY = "msdk_pause_time";
  private static final String RESUME_TIME_KEY = "msdk_resume_time";
  public static final Singleton<MsdkStat> gDefault = new Singleton()
  {
    protected MsdkStat create()
    {
      return new MsdkStat(null);
    }
  };
  private boolean mHaveReported = false;
  
  private MsdkStat() {}
  
  public void addLoginLog(JSONObject paramJSONObject, boolean paramBoolean)
  {
    if (paramJSONObject == null)
    {
      Logger.d("param for MsdkStat.addLoginLog can not be null");
      return;
    }
    Logger.d("called");
    if (needReportLoginInfo()) {}
    for (;;)
    {
      try
      {
        JSONObject localJSONObject2 = new DeviceInfo(WeGame.getInstance().getActivity()).getAllDeviceInfo();
        localJSONObject1 = localJSONObject2;
        if (localJSONObject2 == null) {
          localJSONObject1 = new JSONObject();
        }
        if (!paramBoolean) {
          continue;
        }
        localJSONObject1.put("isLogin", true);
      }
      catch (JSONException localJSONException)
      {
        JSONObject localJSONObject1;
        localJSONException.printStackTrace();
        continue;
        localJSONException.put("isLogin", false);
        continue;
      }
      paramJSONObject.put("deviceInfo", localJSONObject1);
      setmHaveReported(true);
      Logger.d("deviceinfo:" + paramJSONObject);
      return;
      if (!WeGame.getInstance().getFirstStartFlag()) {
        continue;
      }
      localJSONObject1.put("isLogin", true);
      WeGame.getInstance().setFirstStartFlag(false);
    }
  }
  
  public void clearReportStatus()
  {
    setmHaveReported(false);
    SharedPreferencesTool.cleanKey(WeGame.getInstance().getActivity(), "msdk_pause_time");
  }
  
  public long getResumedTime()
  {
    return SharedPreferencesTool.getLong(WeGame.getInstance().getActivity(), "msdk_resume_time", 0L);
  }
  
  public boolean ismHaveReported()
  {
    return this.mHaveReported;
  }
  
  public boolean needReportLoginInfo()
  {
    return true;
  }
  
  public void onPause()
  {
    long l = System.currentTimeMillis() / 1000L;
    Logger.d("pauseed on: " + l);
    SharedPreferencesTool.putLong(WeGame.getInstance().getActivity(), "msdk_pause_time", l);
  }
  
  public void onResume()
  {
    long l = System.currentTimeMillis() / 1000L;
    Logger.d("resumed on: " + l);
    SharedPreferencesTool.putLong(WeGame.getInstance().getActivity(), "msdk_resume_time", l);
  }
  
  public void setmHaveReported(boolean paramBoolean)
  {
    this.mHaveReported = paramBoolean;
  }
}
