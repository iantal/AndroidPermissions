package com.tencent.msdk.stat;

import android.app.Activity;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.tencent.beacon.event.UserAction;
import com.tencent.mid.api.MidService;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.login.LoginInfoManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class ReportEvent
{
  private static String mMSDKVer = "";
  private static String mMTAId;
  private static String mResolution;
  public static String sEventHead;
  public static long sGameStart;
  public static boolean sReportEvent = true;
  
  static
  {
    sEventHead = "MSDK";
    sGameStart = 0L;
    mMTAId = "";
    mResolution = "";
  }
  
  public ReportEvent() {}
  
  public static boolean BaseReportEvent(String paramString, eEVENT_TYPE paramEEVENT_TYPE, HashMap<String, String> paramHashMap)
  {
    Object localObject = paramHashMap;
    if (paramHashMap == null) {
      localObject = new HashMap();
    }
    paramString = "MSDK_" + paramString + "_" + paramEEVENT_TYPE.val();
    boolean bool = UserAction.onUserAction(paramString, true, 0L, -1L, (Map)localObject, true);
    paramEEVENT_TYPE = new StringBuilder();
    paramEEVENT_TYPE.append("{");
    paramHashMap = ((HashMap)localObject).keySet().iterator();
    while (paramHashMap.hasNext())
    {
      String str = (String)paramHashMap.next();
      paramEEVENT_TYPE.append("(" + str + "," + (String)((HashMap)localObject).get(str) + ")");
    }
    paramEEVENT_TYPE.append("}");
    Logger.d("Start reportEvent name:" + paramString + ", flag:" + bool + ",value:" + paramEEVENT_TYPE.toString());
    return bool;
  }
  
  public static void ReportADEvent(eEVENT_TYPE paramEEVENT_TYPE, String paramString1, String paramString2, int paramInt)
  {
    HashMap localHashMap = new HashMap();
    LoginRet localLoginRet = LoginInfoManager.getInstance().getLastLoginUserInfo();
    localHashMap.put("adid", paramString1);
    localHashMap.put("adType", paramString2);
    localHashMap.put("openid", localLoginRet.open_id);
    localHashMap.put("accountType", String.valueOf(localLoginRet.platform));
    BaseReportEvent("AD", paramEEVENT_TYPE, localHashMap);
    ReportDOPADEvent(1, paramEEVENT_TYPE, paramString1, paramString2, paramInt, localLoginRet);
  }
  
  public static void ReportBasicClickEvent(eEVENT_TYPE paramEEVENT_TYPE)
  {
    if (sReportEvent) {
      BaseReportEvent("BASIC", paramEEVENT_TYPE, null);
    }
  }
  
  public static void ReportBasicValue(eEVENT_TYPE paramEEVENT_TYPE, String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("key", paramString);
    BaseReportEvent("BASIC", paramEEVENT_TYPE, localHashMap);
  }
  
  public static void ReportDOPADEvent(int paramInt1, eEVENT_TYPE paramEEVENT_TYPE, String paramString1, String paramString2, int paramInt2, LoginRet paramLoginRet)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("adid", paramString1);
    localHashMap.put("dMid", getMid());
    localHashMap.put("dResolution", getScreenResolution());
    localHashMap.put("dType", "2");
    localHashMap.put("dTypeVer", mMSDKVer);
    localHashMap.put("dScene1", paramString2);
    localHashMap.put("dScene2", "-1");
    localHashMap.put("dScene3", "-1");
    localHashMap.put("dOper", String.valueOf(paramInt1));
    localHashMap.put("dOperStat", "-1");
    localHashMap.put("dFrame", String.valueOf(paramInt2));
    localHashMap.put("dOperType", String.valueOf(paramEEVENT_TYPE.val()));
    localHashMap.put("dResult", "1");
    localHashMap.put("dTag", "-1");
    localHashMap.put("openid", paramLoginRet.open_id);
    localHashMap.put("accountType", String.valueOf(paramLoginRet.platform));
    localHashMap.put("dAppId", WeGame.getInstance().qq_appid);
    BaseReportEvent("DOP", paramEEVENT_TYPE, localHashMap);
  }
  
  public static void ReportNoticeEvent(eEVENT_TYPE paramEEVENT_TYPE, String paramString)
  {
    HashMap localHashMap = new HashMap();
    LoginRet localLoginRet = LoginInfoManager.getInstance().getLastLoginUserInfo();
    localHashMap.put("msgid", paramString);
    localHashMap.put("openid", localLoginRet.open_id);
    localHashMap.put("accountType", String.valueOf(localLoginRet.platform));
    BaseReportEvent("NOTICE", paramEEVENT_TYPE, localHashMap);
    ReportDOPADEvent(2, paramEEVENT_TYPE, paramString, "4", 0, localLoginRet);
  }
  
  public static void ReportPicLength(long paramLong)
  {
    if (sReportEvent)
    {
      long l = paramLong / 51200L;
      paramLong = l;
      if (l > 61L) {
        paramLong = 62L;
      }
      ReportBasicValue(eEVENT_TYPE.eEVENT_BASIC_PICLENGTH, String.valueOf(paramLong));
    }
  }
  
  public static String getMSDKVersion()
  {
    if (T.ckIsEmpty(mMSDKVer)) {
      mMSDKVer = WeGame.getInstance().WGGetVersion();
    }
    return mMSDKVer;
  }
  
  private static String getMid()
  {
    if ((mMTAId == null) || (mMTAId.trim().equals("")))
    {
      Activity localActivity = WeGame.getInstance().getActivity();
      if (localActivity != null) {
        mMTAId = MidService.getMid(localActivity.getApplicationContext());
      }
    }
    return mMTAId;
  }
  
  public static String getScreenResolution()
  {
    if (T.ckIsEmpty(mResolution))
    {
      Activity localActivity = WeGame.getInstance().getActivity();
      if (localActivity != null)
      {
        DisplayMetrics localDisplayMetrics = new DisplayMetrics();
        localActivity.getWindowManager().getDefaultDisplay().getMetrics(localDisplayMetrics);
        mResolution = String.valueOf(localDisplayMetrics.widthPixels) + "*" + String.valueOf(localDisplayMetrics.heightPixels);
      }
    }
    return mResolution;
  }
}
