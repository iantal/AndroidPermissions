package com.tencent.msdk.stat;

import android.app.Activity;
import com.tencent.beacon.event.UserAction;
import com.tencent.beacon.upload.InitHandleListener;
import com.tencent.bugly.crashreport.CrashReport;
import com.tencent.bugly.crashreport.CrashReport.CrashHandleCallback;
import com.tencent.bugly.crashreport.CrashReport.UserStrategy;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class BeaconHelper
{
  private static final String MSDK_EVENT_HEADER = "MSDK_";
  private ArrayList<GameTimeInfo> gameTimePedding = new ArrayList();
  private boolean isBeaconInitFinish = false;
  private long startGameTime = 0L;
  
  public BeaconHelper() {}
  
  private static boolean ReportGameTime(GameTimeInfo paramGameTimeInfo)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("EventType", paramGameTimeInfo.eventType);
    localHashMap.put("devid", paramGameTimeInfo.devid);
    localHashMap.put("gameTime", paramGameTimeInfo.localGameTime);
    localHashMap.put("localTime", paramGameTimeInfo.localTime);
    localHashMap.put("appid", paramGameTimeInfo.appid);
    localHashMap.put("openid", paramGameTimeInfo.openid);
    return ReportEvent.BaseReportEvent("GAME", eEVENT_TYPE.eEVENT_GAME_TIME, localHashMap);
  }
  
  private String getAppVersion(Activity paramActivity)
  {
    paramActivity = new DeviceInfo(paramActivity);
    String str = paramActivity.getVersionName();
    int i = paramActivity.getVersionCode();
    paramActivity = str;
    if (i >= 0) {
      paramActivity = str + "." + String.valueOf(i);
    }
    return paramActivity;
  }
  
  private String getCurrentLoginPlatform(int paramInt)
  {
    if (paramInt == WeGame.WXPLATID) {
      return "Weixin";
    }
    if (paramInt == WeGame.QQPLATID) {
      return "QQ";
    }
    return "";
  }
  
  public static int getXGErrCode(int paramInt)
  {
    return 100000 + paramInt;
  }
  
  public static void reportMSDKEvent(String paramString, long paramLong, boolean paramBoolean1, Map<String, String> paramMap, boolean paramBoolean2)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {
      return;
    }
    String str = "MSDK_" + paramString;
    paramLong = System.currentTimeMillis() - paramLong;
    paramString = paramMap;
    if (paramMap == null) {
      paramString = new HashMap();
    }
    paramString.put("msdkVersion", WeGame.getInstance().getMSDKVersion());
    if (paramBoolean1) {
      Logger.d(">>>event:" + str + ",wattingTime:" + paramLong + ",flag:" + paramBoolean1);
    }
    for (;;)
    {
      UserAction.onUserAction(str, paramBoolean1, paramLong, -1L, paramString, paramBoolean2);
      return;
      Logger.d(">>>event:" + str + ",wattingTime:" + paramLong + ",flag:" + paramBoolean1 + ",logic_error:" + (String)paramString.get("msdk_logic_error") + ",errcode:" + (String)paramString.get("param_FailCode"));
    }
  }
  
  public void enableCrashReport(boolean paramBoolean)
  {
    Logger.d("flag: " + paramBoolean);
  }
  
  public void init(Activity paramActivity, String paramString1, String paramString2, boolean paramBoolean)
  {
    this.isBeaconInitFinish = false;
    try
    {
      UserAction.setAppKey(paramActivity, paramString1);
      UserAction.setLogAble(paramBoolean, false);
      String str = getAppVersion(paramActivity);
      Logger.d("appVersion:" + str);
      UserAction.setAPPVersion(str);
      UserAction.initUserAction(paramActivity, true, 0L, new InitHandleListener()
      {
        public void onInitEnd()
        {
          Logger.d("Start reportEvent onInitEnd;size:" + BeaconHelper.this.gameTimePedding.size());
          BeaconHelper.access$102(BeaconHelper.this, true);
          int i = 0;
          while (i < BeaconHelper.this.gameTimePedding.size())
          {
            BeaconHelper.ReportGameTime((GameTimeInfo)BeaconHelper.this.gameTimePedding.get(i));
            i += 1;
          }
        }
        
        public void onStrategyQuerySuccess() {}
      });
      UserAction.setChannelID(paramString2);
      if (!ConfigManager.needCloseBuglyReport(paramActivity))
      {
        localUserStrategy = new CrashReport.UserStrategy(paramActivity.getApplicationContext());
        localUserStrategy.setAppChannel(paramString2);
        localUserStrategy.setAppReportDelay(5000L);
        localUserStrategy.setAppVersion(str);
      }
    }
    catch (Exception localException)
    {
      try
      {
        CrashReport.UserStrategy localUserStrategy;
        paramString2 = UserAction.getQIMEI();
        Logger.d("app qImei:" + paramString2);
        localUserStrategy.setDeviceID(paramString2);
        localUserStrategy.setCrashHandleCallback(new CrashReport.CrashHandleCallback()
        {
          public Map<String, String> onCrashHandleStart(int paramAnonymousInt, String paramAnonymousString1, String paramAnonymousString2, String paramAnonymousString3)
          {
            String str;
            switch (paramAnonymousInt)
            {
            default: 
              str = "unknown";
            }
            for (;;)
            {
              try
              {
                Logger.w("Crash Happen Type:" + paramAnonymousInt + " TypeName:" + str);
                Logger.w("errorType:" + paramAnonymousString1);
                Logger.w("errorMessage:" + paramAnonymousString2);
                Logger.w("errorStack:" + paramAnonymousString3);
                paramAnonymousString2 = super.onCrashHandleStart(paramAnonymousInt, paramAnonymousString1, paramAnonymousString2, paramAnonymousString3);
                paramAnonymousString1 = paramAnonymousString2;
                if (paramAnonymousString2 == null) {
                  paramAnonymousString1 = new HashMap();
                }
                paramAnonymousString1.put("msdkver", WGPlatform.WGGetVersion());
                paramAnonymousString2 = WeGameNotifyGame.getInstance().OnCrashExtMessageNotify(0, "upload extra crash message");
                Logger.d("extMsg:" + paramAnonymousString2);
                if (!T.ckIsEmpty(paramAnonymousString2)) {
                  paramAnonymousString1.put("extmsg", paramAnonymousString2);
                }
                return paramAnonymousString1;
              }
              finally {}
              str = "JAVA_CATCH";
              continue;
              str = "JAVA_U3D";
              continue;
              str = "JAVA_CRASH";
              continue;
              str = "JAVA_NATIVE";
            }
          }
        });
        CrashReport.initCrashReport(paramActivity.getApplicationContext(), paramString1, paramBoolean, localUserStrategy);
        return;
        localException = localException;
        localException.printStackTrace();
      }
      catch (Exception paramString2)
      {
        for (;;)
        {
          paramString2.printStackTrace();
        }
      }
      Logger.d("close bugly report, fail to init");
    }
  }
  
  public void onLogin(String paramString, int paramInt)
  {
    long l1 = System.currentTimeMillis();
    HashMap localHashMap = new HashMap();
    localHashMap.put("loginType", getCurrentLoginPlatform(paramInt));
    localHashMap.put("msdkVersion", WGPlatform.WGGetVersion());
    localHashMap.put("regChannel", WGPlatform.WGGetRegisterChannelId());
    localHashMap.put("openId", paramString);
    long l2 = System.currentTimeMillis();
    Logger.d("onLogin and set beacon userid:" + paramString);
    UserAction.setUserID(paramString);
    if (!ConfigManager.needCloseBuglyReport(WeGame.getInstance().getActivity())) {
      CrashReport.setUserId(paramString);
    }
    for (;;)
    {
      UserAction.onUserAction("wgLogin", true, l2 - l1, 1000L, localHashMap, true);
      return;
      Logger.d("close bugly report, fail to setUserid");
    }
  }
  
  public void reportEvent(String paramString, long paramLong, boolean paramBoolean1, Map<String, String> paramMap, boolean paramBoolean2)
  {
    paramLong = System.currentTimeMillis() - paramLong;
    Logger.d(">>>event:" + paramString + ",wattingTime:" + paramLong + ", flag:" + paramBoolean1);
    UserAction.onUserAction(paramString, paramBoolean1, paramLong, -1L, paramMap, paramBoolean2);
  }
  
  public void reportEvent(String paramString1, String paramString2, int paramInt, boolean paramBoolean)
  {
    HashMap localHashMap = new HashMap();
    String str = paramString2;
    if (paramString2 == null) {
      str = "";
    }
    localHashMap.put("evtBody", str);
    localHashMap.put("loginType", getCurrentLoginPlatform(paramInt));
    Logger.d("Stat reportEvent name:" + paramString1 + "; body: " + str);
    UserAction.onUserAction(paramString1, true, 0L, -1L, localHashMap, paramBoolean);
  }
  
  public void reportEvent(String paramString, HashMap<String, String> paramHashMap, int paramInt, boolean paramBoolean)
  {
    Logger.d("Stat reportEvent name:" + paramString + "; body: " + paramHashMap.toString());
    paramHashMap.put("loginType", getCurrentLoginPlatform(paramInt));
    UserAction.onUserAction(paramString, true, 0L, -1L, paramHashMap, paramBoolean);
  }
  
  public void reportGameTimeEvent(int paramInt)
  {
    long l = 0L;
    GameTimeInfo localGameTimeInfo;
    int i;
    if ((paramInt == 1) || (paramInt == 2))
    {
      this.startGameTime = System.currentTimeMillis();
      localGameTimeInfo = new GameTimeInfo();
      String str = LoginManager.getInstance().getCurrentOpenid();
      i = LoginManager.getInstance().getCurrentPlatform();
      if (!T.ckIsEmpty(str))
      {
        if (i != WeGame.QQPLATID) {
          break label147;
        }
        localGameTimeInfo.appid = WeGame.getInstance().qq_appid;
      }
      label69:
      localGameTimeInfo.openid = str;
      localGameTimeInfo.eventType = String.valueOf(paramInt);
      localGameTimeInfo.devid = DeviceInfo.getImei();
      localGameTimeInfo.localGameTime = String.valueOf(l);
      localGameTimeInfo.localTime = String.valueOf(System.currentTimeMillis() / 1000L);
      if (!this.isBeaconInitFinish) {
        break label178;
      }
      ReportGameTime(localGameTimeInfo);
    }
    label147:
    label178:
    while (ReportGameTime(localGameTimeInfo))
    {
      return;
      l = (System.currentTimeMillis() - this.startGameTime) / 1000L;
      break;
      if (i == WeGame.WXPLATID)
      {
        localGameTimeInfo.appid = WeGame.getInstance().wx_appid;
        break label69;
      }
      localGameTimeInfo.appid = "";
      break label69;
    }
    Logger.d("Start reportEvent, add info to array");
    this.gameTimePedding.add(localGameTimeInfo);
  }
  
  public void speedTest(ArrayList<String> paramArrayList)
  {
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      String str = (String)paramArrayList.next();
      if ((str != null) && (str.matches("(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}):(\\d{1,5})")))
      {
        Logger.d("IP: " + str);
        localArrayList1.add(str);
      }
      else
      {
        Logger.d("Domain: " + str);
        localArrayList2.add(str);
      }
    }
    if (localArrayList1.size() > 0) {
      UserAction.testSpeedIp(localArrayList1);
    }
    while (localArrayList2.size() <= 0) {
      return;
    }
    UserAction.testSpeedDomain(localArrayList2);
  }
}
