package com.tencent.msdk.pf;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.ProtocolException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Properties;
import java.util.zip.ZipException;

public final class ApkExternalInfoTool
{
  private static final int CFD_LOCATOR_OFFSET = 16;
  private static final String CHANNELID = "channelId";
  protected static final ZipLong EOCD_SIG = new ZipLong(101010256L);
  private static final int MIN_EOCD_SIZE = 22;
  private static ZipShort protoHead = new ZipShort(38650);
  
  public ApkExternalInfoTool() {}
  
  public static String read(File paramFile, String paramString)
    throws IOException
  {
    ApkExternalInfo localApkExternalInfo = null;
    Object localObject = null;
    try
    {
      localRandomAccessFile = new RandomAccessFile(paramFile, "r");
      if (paramFile == null) {
        break label86;
      }
    }
    finally
    {
      try
      {
        paramFile = readComment(localRandomAccessFile);
        if (paramFile == null)
        {
          paramFile = localApkExternalInfo;
          if (localRandomAccessFile != null)
          {
            localRandomAccessFile.close();
            paramFile = localApkExternalInfo;
          }
        }
        do
        {
          return paramFile;
          localApkExternalInfo = new ApkExternalInfo(null);
          localApkExternalInfo.decode(paramFile);
          paramString = localApkExternalInfo.p.getProperty(paramString);
          paramFile = paramString;
        } while (localRandomAccessFile == null);
        localRandomAccessFile.close();
        return paramString;
      }
      finally
      {
        for (;;)
        {
          RandomAccessFile localRandomAccessFile;
          paramFile = localRandomAccessFile;
        }
      }
      paramString = finally;
      paramFile = localObject;
    }
    paramFile.close();
    label86:
    throw paramString;
  }
  
  public static String readChannelId(File paramFile)
    throws IOException
  {
    return read(paramFile, "channelId");
  }
  
  private static byte[] readComment(RandomAccessFile paramRandomAccessFile)
    throws IOException
  {
    long l = paramRandomAccessFile.length() - 22L;
    paramRandomAccessFile.seek(l);
    byte[] arrayOfByte = EOCD_SIG.getBytes();
    int i = paramRandomAccessFile.read();
    int k = 0;
    for (;;)
    {
      int j = k;
      if (i != -1)
      {
        if ((i == arrayOfByte[0]) && (paramRandomAccessFile.read() == arrayOfByte[1]) && (paramRandomAccessFile.read() == arrayOfByte[2]) && (paramRandomAccessFile.read() == arrayOfByte[3])) {
          j = 1;
        }
      }
      else
      {
        if (j != 0) {
          break;
        }
        throw new ZipException("archive is not a ZIP archive");
      }
      l -= 1L;
      paramRandomAccessFile.seek(l);
      i = paramRandomAccessFile.read();
    }
    paramRandomAccessFile.seek(16L + l + 4L);
    arrayOfByte = new byte[2];
    paramRandomAccessFile.readFully(arrayOfByte);
    i = new ZipShort(arrayOfByte).getValue();
    if (i == 0) {
      return null;
    }
    arrayOfByte = new byte[i];
    paramRandomAccessFile.read(arrayOfByte);
    return arrayOfByte;
  }
  
  private static class ApkExternalInfo
  {
    byte[] otherData;
    Properties p = new Properties();
    
    private ApkExternalInfo() {}
    
    void decode(byte[] paramArrayOfByte)
      throws IOException
    {
      if (paramArrayOfByte == null) {}
      ByteBuffer localByteBuffer;
      int i;
      do
      {
        int j;
        do
        {
          do
          {
            return;
            localByteBuffer = ByteBuffer.wrap(paramArrayOfByte);
            i = ApkExternalInfoTool.protoHead.getBytes().length;
            arrayOfByte = new byte[i];
            localByteBuffer.get(arrayOfByte);
            if (!ApkExternalInfoTool.protoHead.equals(new ZipShort(arrayOfByte))) {
              throw new ProtocolException("unknow protocl [" + Arrays.toString(paramArrayOfByte) + "]");
            }
          } while (paramArrayOfByte.length - i <= 2);
          arrayOfByte = new byte[2];
          localByteBuffer.get(arrayOfByte);
          j = new ZipShort(arrayOfByte).getValue();
        } while (paramArrayOfByte.length - i - 2 < j);
        byte[] arrayOfByte = new byte[j];
        localByteBuffer.get(arrayOfByte);
        this.p.load(new ByteArrayInputStream(arrayOfByte));
        i = paramArrayOfByte.length - i - j - 2;
      } while (i <= 0);
      this.otherData = new byte[i];
      localByteBuffer.get(this.otherData);
    }
    
    public String toString()
    {
      return "ApkExternalInfo [p=" + this.p + ", otherData=" + Arrays.toString(this.otherData) + "]";
    }
  }
}
