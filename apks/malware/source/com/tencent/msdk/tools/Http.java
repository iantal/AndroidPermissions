package com.tencent.msdk.tools;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpParams;

public class Http
{
  public Http() {}
  
  public static int get(String paramString, HashMap<String, String> paramHashMap)
  {
    Logger.d("Http get");
    Object localObject = new LinkedList();
    paramHashMap = paramHashMap.entrySet().iterator();
    while (paramHashMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramHashMap.next();
      ((List)localObject).add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    try
    {
      paramHashMap = URLEncodedUtils.format((List)localObject, "UTF-8");
      paramString = new HttpGet(paramString + "?" + paramHashMap);
      paramString.setHeader("Connection", "close");
      paramString.setHeader("Cache-Control", "no-cache");
      paramString.getParams().setBooleanParameter("http.protocol.expect-continue", false);
      paramString = new DefaultHttpClient().execute(paramString);
      paramHashMap = new BufferedReader(new InputStreamReader(paramString.getEntity().getContent()));
      for (;;)
      {
        localObject = paramHashMap.readLine();
        if (localObject == null) {
          break;
        }
        Logger.d("WHTTP Get: " + (String)localObject);
      }
      i = paramString.getStatusLine().getStatusCode();
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      return -1;
    }
    int i;
    return i;
  }
  
  public static int post(String paramString, HashMap<String, String> paramHashMap)
  {
    Logger.d("Http post");
    Object localObject = new LinkedList();
    paramHashMap = paramHashMap.entrySet().iterator();
    while (paramHashMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramHashMap.next();
      ((List)localObject).add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    try
    {
      paramString = new HttpPost(paramString);
      paramString.setEntity(new UrlEncodedFormEntity((List)localObject, "utf-8"));
      paramString.setHeader("Connection", "close");
      paramString.setHeader("Cache-Control", "no-cache");
      paramString.getParams().setBooleanParameter("http.protocol.expect-continue", false);
      paramString = new DefaultHttpClient().execute(paramString);
      paramHashMap = new BufferedReader(new InputStreamReader(paramString.getEntity().getContent()));
      for (;;)
      {
        localObject = paramHashMap.readLine();
        if (localObject == null) {
          break;
        }
        Logger.d("HTTP Post: " + (String)localObject);
      }
      i = paramString.getStatusLine().getStatusCode();
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      return -1;
    }
    int i;
    return i;
  }
}
