package com.tencent.msdk.tools;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.zip.ZipException;

public class ZipCommentReader
{
  private static final int CFD_LOCATOR_OFFSET = 16;
  protected static final ZipLong EOCD_SIG = new ZipLong(101010256L);
  private static final int MIN_EOCD_SIZE = 22;
  
  public ZipCommentReader() {}
  
  public static void main(String[] paramArrayOfString)
    throws Throwable
  {
    positionAtCentralDirectory("D:\\lab.zip");
  }
  
  public static String positionAtCentralDirectory(String paramString)
  {
    if ((paramString == null) || ("".equals(paramString))) {
      return "";
    }
    for (;;)
    {
      try
      {
        paramString = new RandomAccessFile(new File(paramString), "r");
        try
        {
          l = paramString.length() - 22L;
          paramString.seek(l);
          arrayOfByte = EOCD_SIG.getBytes();
          i = paramString.read();
          int k = 0;
          int j = k;
          if (i != -1)
          {
            if ((i != arrayOfByte[0]) || (paramString.read() != arrayOfByte[1]) || (paramString.read() != arrayOfByte[2]) || (paramString.read() != arrayOfByte[3])) {
              continue;
            }
            j = 1;
          }
          if (j != 0) {
            continue;
          }
          paramString.close();
          throw new ZipException("archive is not a ZIP archive");
        }
        catch (IOException paramString) {}
      }
      catch (IOException paramString)
      {
        long l;
        byte[] arrayOfByte;
        int i;
        continue;
      }
      paramString.printStackTrace();
      Logger.d("ZipCommentReader read file error");
      return "";
      l -= 1L;
      paramString.seek(l);
      i = paramString.read();
    }
    paramString.seek(16L + l + 4L);
    arrayOfByte = new byte[2];
    paramString.readFully(arrayOfByte);
    arrayOfByte = new byte[new ZipShort(arrayOfByte).getValue()];
    paramString.readFully(arrayOfByte);
    if (paramString != null) {
      paramString.close();
    }
    paramString = new String(arrayOfByte);
    return paramString;
  }
  
  public static final class ZipLong
    implements Cloneable
  {
    private long value;
    
    public ZipLong(long paramLong)
    {
      this.value = paramLong;
    }
    
    public ZipLong(byte[] paramArrayOfByte)
    {
      this(paramArrayOfByte, 0);
    }
    
    public ZipLong(byte[] paramArrayOfByte, int paramInt)
    {
      this.value = (paramArrayOfByte[(paramInt + 3)] << 24 & 0xFF000000);
      this.value += (paramArrayOfByte[(paramInt + 2)] << 16 & 0xFF0000);
      this.value += (paramArrayOfByte[(paramInt + 1)] << 8 & 0xFF00);
      this.value += (paramArrayOfByte[paramInt] & 0xFF);
    }
    
    public boolean equals(Object paramObject)
    {
      if ((paramObject == null) || (!(paramObject instanceof ZipLong))) {}
      while (this.value != ((ZipLong)paramObject).getValue()) {
        return false;
      }
      return true;
    }
    
    public byte[] getBytes()
    {
      return new byte[] { (byte)(int)(this.value & 0xFF), (byte)(int)((this.value & 0xFF00) >> 8), (byte)(int)((this.value & 0xFF0000) >> 16), (byte)(int)((this.value & 0xFF000000) >> 24) };
    }
    
    public long getValue()
    {
      return this.value;
    }
    
    public int hashCode()
    {
      return (int)this.value;
    }
  }
  
  public static final class ZipShort
    implements Cloneable
  {
    private int value;
    
    public ZipShort(int paramInt)
    {
      this.value = paramInt;
    }
    
    public ZipShort(byte[] paramArrayOfByte)
    {
      this(paramArrayOfByte, 0);
    }
    
    public ZipShort(byte[] paramArrayOfByte, int paramInt)
    {
      this.value = (paramArrayOfByte[(paramInt + 1)] << 8 & 0xFF00);
      this.value += (paramArrayOfByte[paramInt] & 0xFF);
    }
    
    public boolean equals(Object paramObject)
    {
      if ((paramObject == null) || (!(paramObject instanceof ZipShort))) {}
      while (this.value != ((ZipShort)paramObject).getValue()) {
        return false;
      }
      return true;
    }
    
    public byte[] getBytes()
    {
      return new byte[] { (byte)(this.value & 0xFF), (byte)((this.value & 0xFF00) >> 8) };
    }
    
    public int getValue()
    {
      return this.value;
    }
    
    public int hashCode()
    {
      return this.value;
    }
  }
}
