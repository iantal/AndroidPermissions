package com.tencent.msdk.tools;

import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import org.json.JSONObject;

public class CommonUtil
{
  private static final char[] digits = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102 };
  static long timeEnd;
  static long timeStart = 0L;
  
  static
  {
    timeEnd = 0L;
  }
  
  public CommonUtil() {}
  
  public static final String arrayToString(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      localStringBuffer.append(paramArrayOfByte[i] + " ");
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  public static byte[] bitmap2Bytes(Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return null;
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    paramBitmap.compress(Bitmap.CompressFormat.PNG, 100, localByteArrayOutputStream);
    return localByteArrayOutputStream.toByteArray();
  }
  
  public static String bytes2BinString(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder("");
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length <= 0))
    {
      Logger.d("on CommonUtil.bytes2BinString _bytes is null !");
      return null;
    }
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      String str = Integer.toBinaryString(paramArrayOfByte[i] & 0xFF);
      int j = 8;
      while (j > str.length())
      {
        localStringBuilder.append("0");
        j -= 1;
      }
      localStringBuilder.append(str);
      i += 1;
    }
    return localStringBuilder.toString();
  }
  
  public static String bytes2HexStr(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length == 0)) {
      return null;
    }
    char[] arrayOfChar = new char[paramArrayOfByte.length * 2];
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      int j = paramArrayOfByte[i];
      arrayOfChar[(i * 2 + 1)] = digits[(j & 0xF)];
      j = (byte)(j >>> 4);
      arrayOfChar[(i * 2 + 0)] = digits[(j & 0xF)];
      i += 1;
    }
    return new String(arrayOfChar);
  }
  
  public static String bytes2HexString(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder("");
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length <= 0))
    {
      Logger.d("on CommonUtil.bytes2HexString _bytes is null !");
      return null;
    }
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF).toUpperCase();
      if (str.length() < 2) {
        localStringBuilder.append(0);
      }
      localStringBuilder.append(str);
      i += 1;
    }
    return localStringBuilder.toString();
  }
  
  public static long calcUsedTime()
  {
    timeEnd = System.currentTimeMillis();
    long l = timeEnd - timeStart;
    Logger.d("useEdTime:" + l);
    return l;
  }
  
  public static byte char2Byte(char paramChar)
  {
    if ((paramChar >= '0') && (paramChar <= '9')) {
      return (byte)(paramChar - '0');
    }
    if ((paramChar >= 'a') && (paramChar <= 'f')) {
      return (byte)(paramChar - 'a' + 10);
    }
    if ((paramChar >= 'A') && (paramChar <= 'F')) {
      return (byte)(paramChar - 'A' + 10);
    }
    return 0;
  }
  
  public static boolean ckIsEmpty(String paramString)
  {
    return (paramString == null) || (paramString.trim().equals("")) || (paramString.trim().equals("null"));
  }
  
  public static boolean ckNonEmpty(String... paramVarArgs)
  {
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      if (ckIsEmpty(paramVarArgs[i])) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public static String encode(String paramString)
  {
    Object localObject = "";
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8");
      localObject = new StringBuffer(paramString.length());
      int i = 0;
      if (i < paramString.length())
      {
        char c = paramString.charAt(i);
        if (c == '*') {
          ((StringBuffer)localObject).append("%2A");
        }
        for (;;)
        {
          i += 1;
          break;
          if (c == '+')
          {
            ((StringBuffer)localObject).append("%20");
          }
          else if ((c == '%') && (i + 1 < paramString.length()) && (paramString.charAt(i + 1) == '7') && (paramString.charAt(i + 2) == 'E'))
          {
            ((StringBuffer)localObject).append('~');
            i += 2;
          }
          else
          {
            ((StringBuffer)localObject).append(c);
          }
        }
      }
      return ((StringBuffer)localObject).toString();
    }
    catch (UnsupportedEncodingException paramString)
    {
      for (;;)
      {
        paramString = (String)localObject;
      }
    }
  }
  
  public static String generateHttpBaseQueryString(String paramString1, String paramString2, String paramString3, HashMap<String, String> paramHashMap)
  {
    return null;
  }
  
  public static String generateQueryJson(Map<String, String> paramMap)
  {
    if ((paramMap == null) || (paramMap.isEmpty())) {
      return "";
    }
    return new JSONObject(paramMap).toString();
  }
  
  public static String generateQueryString(Map<String, String> paramMap)
  {
    if (paramMap == null) {}
    String str1;
    do
    {
      return "";
      str1 = "";
    } while (paramMap.size() <= 0);
    Iterator localIterator = paramMap.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str2 = (String)localIterator.next();
      String str3 = encode((String)paramMap.get(str2));
      str1 = str1 + str2 + "=" + str3 + "&";
    }
    return str1.substring(0, str1.length() - 1);
  }
  
  public static String getNoQueryUrl(String paramString)
  {
    try
    {
      paramString = new URL(paramString);
      paramString = new URL(paramString.getProtocol(), paramString.getHost(), paramString.getPort(), paramString.getPath()).toString();
      return paramString;
    }
    catch (MalformedURLException paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static String getRandomString(int paramInt)
  {
    char[] arrayOfChar = new char[paramInt];
    Random localRandom = new Random();
    int i = 0;
    while (i < paramInt)
    {
      arrayOfChar[i] = ((char)(localRandom.nextInt(9) + 97));
      i += 1;
    }
    return new String(arrayOfChar);
  }
  
  public static byte[] hexStr2Bytes(String paramString)
  {
    Object localObject;
    if ((paramString == null) || (paramString.equals("")))
    {
      localObject = null;
      return localObject;
    }
    byte[] arrayOfByte = new byte[paramString.length() / 2];
    int i = 0;
    for (;;)
    {
      localObject = arrayOfByte;
      if (i >= arrayOfByte.length) {
        break;
      }
      char c1 = paramString.charAt(i * 2);
      char c2 = paramString.charAt(i * 2 + 1);
      arrayOfByte[i] = ((byte)(char2Byte(c1) * 16 + char2Byte(c2)));
      i += 1;
    }
  }
  
  public static boolean strIsInList(String paramString, List<String> paramList)
  {
    if (paramList == null) {}
    do
    {
      while (!paramList.hasNext())
      {
        return true;
        paramList = paramList.iterator();
      }
    } while (!((String)paramList.next()).equals(paramString));
    return false;
  }
  
  public static void testTimeBegain()
  {
    timeStart = System.currentTimeMillis();
  }
}
