package com.tencent.msdk.locallog;

import com.tencent.msdk.communicator.HttpRequestManager;
import com.tencent.msdk.communicator.IHttpRequestListener;
import com.tencent.msdk.control.SwitcherManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.HashMap;
import java.util.UUID;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ForeignNetReq
  implements IHttpRequestListener
{
  private static final String DNS_URL = "http://aq.msdk.qq.com/mobileassist/getdns";
  private static volatile ForeignNetReq mInstance = null;
  private String mUUID;
  
  public ForeignNetReq() {}
  
  public static ForeignNetReq getInstance()
  {
    if (mInstance == null) {}
    try
    {
      if (mInstance == null) {
        mInstance = new ForeignNetReq();
      }
      return mInstance;
    }
    finally {}
  }
  
  private static String getRandomUUID()
  {
    return UUID.randomUUID().toString().replace("-", "");
  }
  
  public static void startQueryForeignNet()
  {
    Logger.d("foreignet queryFirstForeignNet...");
    getInstance().queryNetStatus();
  }
  
  public void onFailure(String paramString, int paramInt1, int paramInt2)
  {
    Logger.d("foreignet state:" + paramInt1 + ",what:" + paramInt2 + ",content:" + paramString);
  }
  
  public void onSuccess(String paramString, int paramInt1, int paramInt2)
  {
    if (2019 == paramInt2)
    {
      Logger.d("foreignet state:" + paramInt1 + ",what:" + paramInt2 + ",content:not null");
      if ((2019 != paramInt2) || (paramInt1 != 200) || (T.ckIsEmpty(paramString))) {
        break label112;
      }
      queryNetDns();
    }
    label112:
    while ((2020 != paramInt2) || (T.ckIsEmpty(paramString)))
    {
      return;
      Logger.d("foreignet state:" + paramInt1 + ",what:" + paramInt2 + ",content:" + paramString);
      break;
    }
    for (;;)
    {
      try
      {
        paramString = new JSONObject(paramString);
        if ((!paramString.has("ret")) || (paramString.getInt("ret") != 0) || (!paramString.has("data"))) {
          break;
        }
        paramString = paramString.getJSONObject("data");
        if (!paramString.has("localDns")) {
          break;
        }
        paramString = paramString.getJSONArray("localDns");
        paramInt1 = 0;
        if (paramInt1 >= paramString.length()) {
          break;
        }
        localObject = paramString.getJSONObject(paramInt1);
        if ((localObject == null) || (!((JSONObject)localObject).has("country"))) {
          break label380;
        }
        localObject = ((JSONObject)localObject).getString("country");
        if (localObject == null)
        {
          SwitcherManager.getInstance().setIsForeignUser(false);
          return;
        }
      }
      catch (JSONException paramString)
      {
        Logger.w("foreignet jsonException" + paramString.getMessage());
        return;
      }
      Object localObject = ((String)localObject).trim();
      HashMap localHashMap;
      if (((String)localObject).contains("中国"))
      {
        Logger.d("foreignet judge in china net");
        SwitcherManager.getInstance().setIsForeignUser(false);
        if (!((String)localObject).equals("中国"))
        {
          localHashMap = new HashMap();
          localHashMap.put("country", localObject);
          SaveLogHelper.getInstance().reportLog("ForeignNetReq", localHashMap, true);
        }
      }
      else
      {
        Logger.d("foreignet judge not in china net");
        SwitcherManager.getInstance().setIsForeignUser(true);
        localHashMap = new HashMap();
        localHashMap.put("country", localObject);
        SaveLogHelper.getInstance().reportLog("ForeignNetReq", localHashMap, true);
      }
      label380:
      paramInt1 += 1;
    }
  }
  
  public void queryNetDns()
  {
    Logger.d("foreignet queryNetDns...");
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("tmpDns", this.mUUID + ".iegsk.imtmp.net");
      new HttpRequestManager(this).postTextAsync("http://aq.msdk.qq.com/mobileassist/getdns", localJSONObject.toString(), 2020);
      return;
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        localJSONException.printStackTrace();
      }
    }
  }
  
  public void queryNetStatus()
  {
    this.mUUID = getRandomUUID();
    String str = "http://" + this.mUUID + ".iegsk.imtmp.net/s";
    Logger.d("foreignet " + str);
    new HttpRequestManager(this).getTextAsync(str, 2019);
  }
}
