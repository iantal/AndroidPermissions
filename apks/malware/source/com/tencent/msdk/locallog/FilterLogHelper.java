package com.tencent.msdk.locallog;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.remote.api.SafeJSONObject;
import com.tencent.msdk.tools.T;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import org.json.JSONException;
import org.json.JSONObject;

public class FilterLogHelper
{
  private static final String NETWORK_CLASS_2_G = "2G";
  private static final String NETWORK_CLASS_3_G = "3G";
  private static final String NETWORK_CLASS_4_G = "4G";
  private static final String NETWORK_CLASS_NONET = "nonet";
  private static final String NETWORK_CLASS_UNKNOWN = "unknown";
  private static final String NETWORK_CLASS_WIFI = "wifi";
  private static final HashSet<String> mIncluedRespInterface = new HashSet();
  
  static
  {
    mIncluedRespInterface.add("QueryQQFriends");
    mIncluedRespInterface.add("QueryQQUserInfo");
    mIncluedRespInterface.add("ShareToQQ");
    mIncluedRespInterface.add("QueryNearbyPlayer");
    mIncluedRespInterface.add("GetLocationInfo");
    mIncluedRespInterface.add("CleanLocation");
    mIncluedRespInterface.add("QueryWXFriends");
    mIncluedRespInterface.add("QueryWXUserInfo");
    mIncluedRespInterface.add("SendMessageToWechatGameCenter");
    mIncluedRespInterface.add("ShareToWX");
    mIncluedRespInterface.add("WxRequestMng");
    mIncluedRespInterface.add("PfKeyRequestMng");
    mIncluedRespInterface.add("QQA8RequestMng");
    mIncluedRespInterface.add("NoticeMsgMng");
    mIncluedRespInterface.add("ADReqManage");
  }
  
  public FilterLogHelper() {}
  
  public static void addNetInfoToMap(HashMap<String, String> paramHashMap)
  {
    paramHashMap.put("currnet", getNetTypeName());
  }
  
  public static String getFilterJson(String paramString, HashSet<String> paramHashSet)
  {
    if ((paramString == null) || (paramHashSet == null) || (paramHashSet.size() == 0)) {
      return paramString;
    }
    try
    {
      SafeJSONObject localSafeJSONObject = new SafeJSONObject(paramString);
      JSONObject localJSONObject = new JSONObject();
      paramHashSet = paramHashSet.iterator();
      while (paramHashSet.hasNext())
      {
        String str1 = (String)paramHashSet.next();
        if (localSafeJSONObject.has(str1))
        {
          String str2 = localSafeJSONObject.getString(str1);
          if (str2 != null) {
            localJSONObject.put(str1, str2);
          }
        }
      }
      paramHashSet = localJSONObject.toString();
    }
    catch (JSONException paramHashSet)
    {
      paramHashSet.printStackTrace();
      return paramString;
    }
    return paramHashSet;
  }
  
  public static String getFilterJson(JSONObject paramJSONObject, HashSet<String> paramHashSet)
  {
    if ((paramJSONObject == null) || (paramHashSet == null) || (paramHashSet.size() == 0)) {
      return "";
    }
    try
    {
      JSONObject localJSONObject = new JSONObject();
      paramHashSet = paramHashSet.iterator();
      while (paramHashSet.hasNext())
      {
        String str1 = (String)paramHashSet.next();
        if (paramJSONObject.has(str1))
        {
          String str2 = paramJSONObject.getString(str1);
          if (str2 != null) {
            localJSONObject.put(str1, str2);
          }
        }
      }
      paramJSONObject = localJSONObject.toString();
    }
    catch (JSONException paramJSONObject)
    {
      paramJSONObject.printStackTrace();
      return "";
    }
    return paramJSONObject;
  }
  
  private static String getNetTypeName()
  {
    Object localObject = WeGame.getInstance().getActivity();
    if (localObject == null) {
      return "unknown";
    }
    localObject = ((ConnectivityManager)((Context)localObject).getSystemService("connectivity")).getActiveNetworkInfo();
    if (localObject == null) {
      return "nonet";
    }
    if (((NetworkInfo)localObject).getType() == 1) {
      return "wifi";
    }
    if (((NetworkInfo)localObject).getType() == 0) {
      return getNetworkClass((NetworkInfo)localObject);
    }
    return "unknown";
  }
  
  private static String getNetworkClass(NetworkInfo paramNetworkInfo)
  {
    if (paramNetworkInfo == null) {
      return "nonet";
    }
    switch (paramNetworkInfo.getSubtype())
    {
    default: 
      return "unknown";
    case 0: 
      return "unknown";
    case 1: 
    case 2: 
    case 4: 
    case 7: 
    case 11: 
      return "2G";
    case 3: 
    case 5: 
    case 6: 
    case 8: 
    case 9: 
    case 10: 
    case 12: 
    case 14: 
    case 15: 
      return "3G";
    }
    return "4G";
  }
  
  public static void saveFailureResp(String paramString1, String paramString2, int paramInt, Integer paramInteger)
  {
    if (mIncluedRespInterface.contains(paramString1))
    {
      HashMap localHashMap = new HashMap();
      localHashMap.put("result", "fail");
      localHashMap.put("net", paramString2);
      localHashMap.put("sCode", "" + paramInt);
      localHashMap.put("key", "" + paramInteger);
      addNetInfoToMap(localHashMap);
      SaveLogHelper.getInstance().reportLog(paramString1, localHashMap, false);
    }
  }
  
  public static void saveKeysReq(String paramString1, JSONObject paramJSONObject, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("stat", "req");
    HashSet localHashSet = new HashSet();
    if ("QueryQQFriends".equals(paramString1)) {
      localHashSet.add("accessToken");
    }
    for (;;)
    {
      if (!T.ckIsEmpty(paramString2)) {
        localHashMap.put("extras", paramString2);
      }
      localHashMap.put("body", getFilterJson(paramJSONObject, localHashSet));
      SaveLogHelper.getInstance().reportLog(paramString1, localHashMap, false);
      do
      {
        return;
        if ("QueryQQUserInfo".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("ShareToQQ".equals(paramString1))
        {
          localHashSet.add("accessToken");
          localHashSet.add("fopenids");
          localHashSet.add("type");
          break;
        }
        if ("QueryNearbyPlayer".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("GetLocationInfo".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("CleanLocation".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("QueryWXFriends".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("QueryWXUserInfo".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("SendMessageToWechatGameCenter".equals(paramString1))
        {
          localHashSet.add("accessToken");
          break;
        }
        if ("ShareToWX".equals(paramString1))
        {
          localHashSet.add("accessToken");
          localHashSet.add("fopenid");
          break;
        }
        if ("NoticeMsgMng".equals(paramString1))
        {
          localHashSet.add("appid");
          localHashSet.add("lastTime");
          break;
        }
        if ("ADReqManage".equals(paramString1))
        {
          localHashSet.add("rptType");
          break;
        }
        if ("QQA8RequestMng".equals(paramString1))
        {
          localHashSet.add("platform");
          localHashSet.add("A8");
          localHashSet.add("st");
          break;
        }
        if ("PfKeyRequestMng".equals(paramString1))
        {
          localHashSet.add("platform");
          localHashSet.add("accessToken");
          break;
        }
      } while (!"WxRequestMng".equals(paramString1));
      localHashSet.add("platform");
      localHashSet.add("accessToken");
      localHashSet.add("code");
      localHashSet.add("refreshToken");
    }
  }
  
  public static void saveSuccessResp(String paramString1, String paramString2, int paramInt, Integer paramInteger)
  {
    HashMap localHashMap;
    HashSet localHashSet;
    if (mIncluedRespInterface.contains(paramString1))
    {
      localHashMap = new HashMap();
      localHashMap.put("result", "success");
      localHashSet = new HashSet();
      if (!"PfKeyRequestMng".equals(paramString1)) {
        break label163;
      }
      localHashSet.add("ret");
      localHashSet.add("msg");
      localHashSet.add("pf");
      localHashSet.add("pfKey");
    }
    for (;;)
    {
      localHashMap.put("net", getFilterJson(paramString2, localHashSet));
      localHashMap.put("sCode", "" + paramInt);
      localHashMap.put("key", "" + paramInteger);
      SaveLogHelper.getInstance().reportLog(paramString1, localHashMap, false);
      return;
      label163:
      if ("WxRequestMng".equals(paramString1))
      {
        localHashMap.put("wxcode", SaveLogHelper.getInstance().getWXCode());
        localHashSet.add("ret");
        localHashSet.add("msg");
        localHashSet.add("pf");
        localHashSet.add("pfKey");
        localHashSet.add("accessToken");
      }
      else if (!"QQA8RequestMng".equals(paramString1))
      {
        if ("QueryQQFriends".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("QueryQQUserInfo".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("ShareToQQ".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
          localHashSet.add("err_type");
        }
        else if ("Feedback".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("QueryNearbyPlayer".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("GetLocationInfo".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("CleanLocation".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("QueryWXFriends".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("QueryWXUserInfo".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("SendMessageToWechatGameCenter".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
          localHashSet.add("msdkExtInfo");
        }
        else if ("ShareToWX".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
        }
        else if ("NoticeMsgMng".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
          localHashSet.add("rptType");
        }
        else if ("ADReqManage".equals(paramString1))
        {
          localHashSet.add("ret");
          localHashSet.add("msg");
          localHashSet.add("rptType");
          localHashSet.add("adPosList");
        }
      }
    }
  }
}
