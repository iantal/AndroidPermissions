package com.tencent.msdk.communicator;

import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Parcelable;
import com.tencent.msdk.tea.DesUtils;
import com.tencent.msdk.tea.TEACoding;
import com.tencent.msdk.tools.Logger;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.util.EntityUtils;

public class HttpTask
  extends AsyncTask<MHttpRequest, Integer, MHttpResponse>
{
  private int SOCKET_OUT = 15000;
  private int TIME_OUT = 15000;
  private Handler handler;
  private TEACoding teaCode = new TEACoding(DesUtils.REQUEST_KEY);
  private int what;
  
  public HttpTask(Handler paramHandler, int paramInt)
  {
    if (paramHandler == null) {
      Logger.d("hanlder is null");
    }
    this.handler = paramHandler;
    this.what = paramInt;
  }
  
  private MHttpResponse clientParamError(String paramString)
  {
    return new MHttpResponse(1006, paramString, null);
  }
  
  private MHttpResponse processHttpResponse(HttpResponse paramHttpResponse)
  {
    Object localObject2 = paramHttpResponse.getEntity();
    int j = (int)((HttpEntity)localObject2).getContentLength();
    Logger.d("getContentLength isï¼š" + j);
    if (j < 0)
    {
      Logger.w("response is null");
      return null;
    }
    for (;;)
    {
      try
      {
        if ((2020 == this.what) || (2019 == this.what))
        {
          localObject1 = EntityUtils.toString(paramHttpResponse.getEntity(), "UTF-8");
          paramHttpResponse = new MHttpResponse(paramHttpResponse.getStatusLine().getStatusCode(), "", (String)localObject1);
          return paramHttpResponse;
        }
      }
      catch (IllegalStateException paramHttpResponse)
      {
        paramHttpResponse.printStackTrace();
        return serverErrorRsp(3002, "IllegalStateException " + paramHttpResponse.getMessage());
        if (!HttpRequestManager.isEncode.booleanValue()) {
          break label442;
        }
        localObject1 = new byte[j];
        localObject2 = ((HttpEntity)localObject2).getContent();
        int i = 0;
        if (i < j)
        {
          Logger.d("getContentLength: readContent[" + String.valueOf(i) + "]" + localObject1[i]);
          i += ((InputStream)localObject2).read((byte[])localObject1, i, j - i);
          Logger.d("getContentLength: get content length:" + j + ";get byte length:" + i);
          Logger.d("getContentLength: readContent[" + String.valueOf(i - 2) + "]" + localObject1[(i - 2)]);
          Logger.d("getContentLength: readContent[" + String.valueOf(i - 1) + "]" + localObject1[(i - 1)]);
          continue;
        }
      }
      catch (IOException paramHttpResponse)
      {
        paramHttpResponse.printStackTrace();
        return serverErrorRsp(3003, "IOException " + paramHttpResponse.getMessage());
      }
      Object localObject1 = this.teaCode.decode((byte[])localObject1);
      if (localObject1 == null)
      {
        localObject1 = "";
        Logger.w("entityAfterDecode is null");
      }
      else
      {
        localObject1 = new String((byte[])localObject1, "UTF-8");
        Logger.d("strResult:" + (String)localObject1);
        continue;
        label442:
        localObject1 = EntityUtils.toString(paramHttpResponse.getEntity(), "UTF-8");
      }
    }
  }
  
  private MHttpResponse serverErrorRsp(int paramInt, String paramString)
  {
    return new MHttpResponse(paramInt, paramString, null);
  }
  
  private MHttpResponse serverErrorRsp(String paramString)
  {
    return serverErrorRsp(3000, paramString);
  }
  
  protected MHttpResponse doInBackground(MHttpRequest... paramVarArgs)
  {
    if (paramVarArgs.length == 0)
    {
      Logger.d("no params");
      return clientParamError("no params");
    }
    MHttpRequest localMHttpRequest = paramVarArgs[0];
    if (localMHttpRequest == null)
    {
      Logger.d("HttpRequest is null");
      return clientParamError("HttpRequest is null");
    }
    for (;;)
    {
      try
      {
        localDefaultHttpClient = new DefaultHttpClient();
        HttpConnectionParams.setConnectionTimeout(localDefaultHttpClient.getParams(), this.TIME_OUT);
        HttpConnectionParams.setSoTimeout(localDefaultHttpClient.getParams(), this.SOCKET_OUT);
        paramVarArgs = null;
        switch (1.$SwitchMap$com$tencent$msdk$communicator$MHttpRequest$HttpMethod[localMHttpRequest.getMethod().ordinal()])
        {
        }
      }
      catch (IllegalStateException paramVarArgs)
      {
        DefaultHttpClient localDefaultHttpClient;
        HttpPost localHttpPost;
        Logger.w("IllegalStateException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3002, "IllegalStateException" + paramVarArgs.getMessage());
        if (!HttpRequestManager.isEncode.booleanValue()) {
          continue;
        }
        localHttpPost.setHeader("Content-Encrypt", "msdktea");
        localHttpPost.setHeader("Accept-Encrypt", "msdktea");
        ((HttpPost)localHttpPost).setEntity(new ByteArrayEntity(localMHttpRequest.getBody()));
        ((HttpPost)localHttpPost).getParams().setBooleanParameter("http.protocol.expect-continue", false);
        HttpProtocolParams.setUseExpectContinue(localDefaultHttpClient.getParams(), false);
        paramVarArgs = localHttpPost;
        continue;
      }
      catch (IllegalArgumentException paramVarArgs)
      {
        Logger.w("IllegalArgumentException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3004, "IllegalArgumentException" + paramVarArgs.getMessage());
      }
      catch (SocketException paramVarArgs)
      {
        Logger.w("SocketException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3005, "SocketException" + paramVarArgs.getMessage());
      }
      catch (ClientProtocolException paramVarArgs)
      {
        Logger.w("ClientProtocolException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3006, "ClientProtocolException" + paramVarArgs.getMessage());
      }
      catch (ConnectTimeoutException paramVarArgs)
      {
        Logger.w("ConnectTimeoutException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3001, "ConnectTimeoutException" + paramVarArgs.getMessage());
      }
      catch (SocketTimeoutException paramVarArgs)
      {
        Logger.w("SocketTimeoutException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3008, "SocketTimeoutException" + paramVarArgs.getMessage());
      }
      catch (UnknownHostException paramVarArgs)
      {
        Logger.w("UnknownHostException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp(3007, "UnknownHostException:" + paramVarArgs.getMessage());
      }
      catch (Exception paramVarArgs)
      {
        Logger.w("UnknownException, msg: " + paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
        return serverErrorRsp("UnknownException" + paramVarArgs.getMessage());
      }
      return processHttpResponse(localDefaultHttpClient.execute(paramVarArgs));
      paramVarArgs = new HttpGet(localMHttpRequest.getUrl());
      continue;
      localHttpPost = new HttpPost(localMHttpRequest.getUrl());
      localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
      if (2020 == this.what)
      {
        paramVarArgs = localHttpPost;
        if (localMHttpRequest.getStrBody() == null) {
          continue;
        }
        ((HttpPost)localHttpPost).setEntity(new StringEntity(localMHttpRequest.getStrBody()));
        paramVarArgs = localHttpPost;
      }
    }
  }
  
  protected void onPostExecute(MHttpResponse paramMHttpResponse)
  {
    super.onPostExecute(paramMHttpResponse);
    Object localObject = paramMHttpResponse;
    if (paramMHttpResponse == null)
    {
      Logger.d("network return null!!!");
      localObject = new MHttpResponse(1002, "response no params", null);
    }
    if (((MHttpResponse)localObject).getBody() != null) {
      Logger.d("result body is" + new String(((MHttpResponse)localObject).getBody()));
    }
    for (;;)
    {
      paramMHttpResponse = new Bundle();
      paramMHttpResponse.putParcelable("http_rsp", (Parcelable)localObject);
      if (this.handler != null)
      {
        localObject = Message.obtain(this.handler, this.what, ((MHttpResponse)localObject).getStatus(), 0);
        ((Message)localObject).setData(paramMHttpResponse);
        this.handler.sendMessage((Message)localObject);
      }
      return;
      Logger.d("result body is null");
    }
  }
}
