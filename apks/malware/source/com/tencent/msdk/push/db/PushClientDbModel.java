package com.tencent.msdk.push.db;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.tools.Logger;

public class PushClientDbModel
{
  private static final String TBL_NAME = "push_client";
  private static final PushDBHelper helper = (PushDBHelper)PushDBHelper.gDefault.get();
  public Entry mData = new Entry();
  
  public PushClientDbModel() {}
  
  public static String getCreateTblSql()
  {
    String str = "" + "CREATE TABLE IF NOT EXISTS [push_client] (";
    str = str + "[mat_id] NVARCHAR(128)  NOT NULL,";
    str = str + "[mat_key] NVARCHAR(128) NOT NULL,";
    str = str + "[mat_key_version] NVARCHAR(128) NOT NULL,";
    str = str + "[mat_key_create_at] TIMESTAMP NULL,";
    str = str + "[resolution] TIMESTAMP NULL,";
    str = str + "[last_msg_id] NVARCHAR(128) NULL ";
    return str + ")";
  }
  
  public static String getDropTblSql()
  {
    return "DROP TABLE IF EXISTS push_client";
  }
  
  public static String getLastMatKeyVersion()
  {
    return getStringByCol("mat_key_version");
  }
  
  public static String getLastMsgId()
  {
    return getStringByCol("last_msg_id");
  }
  
  public static String getMatId()
  {
    return getStringByCol("mat_id");
  }
  
  public static String getMatKey()
  {
    return getStringByCol("mat_key");
  }
  
  private static String getStringByCol(String paramString)
  {
    try
    {
      synchronized (helper)
      {
        Cursor localCursor = helper.getReadableDatabase().query("push_client", new String[] { paramString }, null, null, null, null, null);
        if (localCursor.getCount() > 0)
        {
          localCursor.moveToFirst();
          String str = localCursor.getString(localCursor.getColumnIndex(paramString));
          Logger.d(paramString + " in Db: " + str);
          localCursor.close();
          return str;
        }
        Logger.w(paramString + " not found");
        localCursor.close();
        return "";
      }
      return "";
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public boolean create()
  {
    boolean bool = false;
    synchronized (helper)
    {
      try
      {
        ContentValues localContentValues = this.mData.GetContentCalues();
        long l = helper.getWritableDatabase().insert("push_client", null, localContentValues);
        helper.close();
        if (l != -1L) {
          bool = true;
        }
        return bool;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return false;
      }
    }
  }
  
  /* Error */
  public int deleteAll()
  {
    // Byte code:
    //   0: getstatic 31	com/tencent/msdk/push/db/PushClientDbModel:helper	Lcom/tencent/msdk/push/db/PushDBHelper;
    //   3: astore_2
    //   4: aload_2
    //   5: monitorenter
    //   6: getstatic 31	com/tencent/msdk/push/db/PushClientDbModel:helper	Lcom/tencent/msdk/push/db/PushDBHelper;
    //   9: invokevirtual 148	com/tencent/msdk/push/db/PushDBHelper:getWritableDatabase	()Landroid/database/sqlite/SQLiteDatabase;
    //   12: ldc 11
    //   14: aconst_null
    //   15: aconst_null
    //   16: invokevirtual 160	android/database/sqlite/SQLiteDatabase:delete	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
    //   19: istore_1
    //   20: getstatic 31	com/tencent/msdk/push/db/PushClientDbModel:helper	Lcom/tencent/msdk/push/db/PushDBHelper;
    //   23: invokevirtual 153	com/tencent/msdk/push/db/PushDBHelper:close	()V
    //   26: aload_2
    //   27: monitorexit
    //   28: iload_1
    //   29: ireturn
    //   30: astore_3
    //   31: aload_3
    //   32: invokevirtual 140	java/lang/Exception:printStackTrace	()V
    //   35: getstatic 31	com/tencent/msdk/push/db/PushClientDbModel:helper	Lcom/tencent/msdk/push/db/PushDBHelper;
    //   38: invokevirtual 153	com/tencent/msdk/push/db/PushDBHelper:close	()V
    //   41: aload_2
    //   42: monitorexit
    //   43: iconst_0
    //   44: ireturn
    //   45: astore_3
    //   46: aload_2
    //   47: monitorexit
    //   48: aload_3
    //   49: athrow
    //   50: astore_3
    //   51: getstatic 31	com/tencent/msdk/push/db/PushClientDbModel:helper	Lcom/tencent/msdk/push/db/PushDBHelper;
    //   54: invokevirtual 153	com/tencent/msdk/push/db/PushDBHelper:close	()V
    //   57: aload_3
    //   58: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	59	0	this	PushClientDbModel
    //   19	10	1	i	int
    //   3	44	2	localPushDBHelper	PushDBHelper
    //   30	2	3	localException	Exception
    //   45	4	3	localObject1	Object
    //   50	8	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   6	20	30	java/lang/Exception
    //   20	28	45	finally
    //   35	43	45	finally
    //   46	48	45	finally
    //   51	59	45	finally
    //   6	20	50	finally
    //   31	35	50	finally
  }
  
  public String getTableName()
  {
    return "push_client";
  }
  
  public boolean isExisted()
  {
    return false;
  }
  
  public int update(ContentValues paramContentValues, String paramString, String[] paramArrayOfString)
  {
    try
    {
      int i = helper.getWritableDatabase().update("push_client", paramContentValues, paramString, paramArrayOfString);
      return i;
    }
    catch (Exception paramContentValues)
    {
      paramContentValues.printStackTrace();
    }
    return 0;
  }
  
  public class Entry
  {
    public static final String sColLastMsgId = "last_msg_id";
    public static final String sColMatId = "mat_id";
    public static final String sColMatKey = "mat_key";
    public static final String sColMatKeyCreateAt = "mat_key_create_at";
    public static final String sColMatKeyVersion = "mat_key_version";
    public static final String sColResolution = "resolution";
    private String mLastMsgId = "";
    private String mMatId = "";
    private String mMatKey = "";
    private long mMatKeyCreateAt = 0L;
    private String mMatKeyVersion = "";
    private String mResolution = "";
    
    public Entry() {}
    
    public ContentValues GetContentCalues()
    {
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("mat_id", this.mMatId);
      localContentValues.put("mat_key", this.mMatKey);
      localContentValues.put("mat_key_version", this.mMatKeyVersion);
      localContentValues.put("mat_key_create_at", Long.valueOf(this.mMatKeyCreateAt));
      localContentValues.put("last_msg_id", this.mLastMsgId);
      localContentValues.put("resolution", this.mResolution);
      return localContentValues;
    }
    
    public void setmLastMsgId(String paramString)
    {
      this.mLastMsgId = paramString;
    }
    
    public void setmMatId(String paramString)
    {
      this.mMatId = paramString;
    }
    
    public void setmMatKey(String paramString)
    {
      this.mMatKey = paramString;
    }
    
    public void setmMatKeyCreateAt(long paramLong)
    {
      this.mMatKeyCreateAt = paramLong;
    }
    
    public void setmMatKeyVersion(String paramString)
    {
      this.mMatKeyVersion = paramString;
    }
    
    public void setmResolution(String paramString)
    {
      this.mResolution = paramString;
    }
  }
}
