package com.tencent.msdk.doctor.checklist;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.doctor.CheckBase;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Global
  extends CheckBase
{
  public Global(Activity paramActivity)
  {
    super(paramActivity);
  }
  
  private ArrayList<String> containPermissions(List<String> paramList, String[] paramArrayOfString)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < paramArrayOfString.length)
    {
      if (!paramList.contains(paramArrayOfString[i])) {
        localArrayList.add("Missing Android Permission " + paramArrayOfString[i]);
      }
      i += 1;
    }
    return localArrayList;
  }
  
  public ArrayList<String> check()
  {
    ArrayList localArrayList = new ArrayList();
    String str = WGPfManager.getInstance().getChannelId();
    Object localObject;
    if ((str.equals("00000000")) || (str.equals(ConfigManager.readValueByKey(this.mContext, "CHANNEL"))))
    {
      Logger.d("You are using a test channel");
      localObject = this.mContext.getPackageManager();
      str = this.mContext.getPackageName();
      if (localObject != null) {
        break label87;
      }
      Logger.e("PackageManager is null, check fail.");
    }
    label87:
    do
    {
      return localArrayList;
      if (!T.ckIsEmpty(str)) {
        break;
      }
      Logger.e("channelID is empty");
      break;
      try
      {
        PackageInfo localPackageInfo = ((PackageManager)localObject).getPackageInfo(str, 4096);
        localArrayList.addAll(containPermissions(Arrays.asList(localPackageInfo.requestedPermissions), new String[] { "android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.WRITE_EXTERNAL_STORAGE", "android.permission.READ_PHONE_STATE", "android.permission.ACCESS_WIFI_STATE", "android.permission.CHANGE_WIFI_STATE", "android.permission.RESTART_PACKAGES", "android.permission.GET_TASKS", "android.permission.MOUNT_UNMOUNT_FILESYSTEMS", "android.permission.SYSTEM_ALERT_WINDOW", "android.permission.ACCESS_FINE_LOCATION", "android.permission.BLUETOOTH", "android.permission.BLUETOOTH_ADMIN" }));
        localObject = ((PackageManager)localObject).getLaunchIntentForPackage(str);
        if (localObject == null)
        {
          Logger.w(" the package does not contain " + str);
          return localArrayList;
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        localNameNotFoundException.printStackTrace();
        localArrayList.add("Give sdk a error Activity in Initialized");
        return localArrayList;
      }
    } while (((Intent)localObject).getComponent().getClassName().equals(this.mContext.getClass().getName()));
    localArrayList.add("The Activity of Initialization MSDK isn't launch Activity, this may cause the error eassily");
    return localArrayList;
  }
}
