package com.tencent.msdk.doctor;

import android.app.Activity;
import android.app.Application;
import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.net.Uri;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.doctor.checklist.Global;
import com.tencent.msdk.doctor.checklist.Myapp;
import com.tencent.msdk.doctor.checklist.Notice;
import com.tencent.msdk.doctor.checklist.Push;
import com.tencent.msdk.doctor.checklist.QQ;
import com.tencent.msdk.doctor.checklist.WX;
import com.tencent.msdk.doctor.checklist.WebView;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;
import com.tencent.msdk.tools.T;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class MsdkDoctor
{
  private ArrayList<CheckBase> checkList = new ArrayList();
  private String checkedKey = "configChecked";
  private Activity ctx;
  
  public MsdkDoctor(Activity paramActivity)
  {
    this.ctx = paramActivity;
    this.checkList.add(new Global(paramActivity));
    this.checkList.add(new QQ(paramActivity));
    this.checkList.add(new WX(paramActivity));
    this.checkList.add(new Push(paramActivity));
    this.checkList.add(new WebView(paramActivity));
    this.checkList.add(new Notice(paramActivity));
    this.checkList.add(new Myapp(paramActivity));
  }
  
  public ArrayList<String> checkAll()
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < this.checkList.size())
    {
      if (this.checkList.get(i) != null) {
        localArrayList.addAll(((CheckBase)this.checkList.get(i)).check());
      }
      i += 1;
    }
    return localArrayList;
  }
  
  public boolean checkConfig()
  {
    if (SharedPreferencesTool.getBoolean(this.ctx, this.checkedKey, false)) {
      return true;
    }
    WGPlatform.WGLogPlatformSDKVersion();
    boolean bool1 = checkWxConfig();
    boolean bool2 = checkQQConfig();
    boolean bool3 = checkMsdkConfig();
    boolean bool4 = checkOtherConfig();
    if ((bool1) && (bool2) && (bool3) && (bool4))
    {
      SharedPreferencesTool.putBoolean(this.ctx, this.checkedKey, true);
      return true;
    }
    Logger.e("Config Error, Please correct all config error before go on");
    return false;
  }
  
  public boolean checkMsdkConfig()
  {
    int j = 1;
    int k = 1;
    int i = k;
    try
    {
      Object localObject = Arrays.asList(this.ctx.getResources().getAssets().list(""));
      if (localObject != null)
      {
        i = k;
        if (((List)localObject).contains("msdkconfig.ini"))
        {
          int m = 1;
          i = k;
          localObject = ConfigManager.getApiDomain(this.ctx);
          i = k;
          if (T.ckIsEmpty((String)localObject))
          {
            j = 0;
            i = 0;
            Logger.e("Msdk: MSDK_URL is not set properly in assets/msdkconfig.ini");
            k = m;
          }
          else
          {
            i = k;
            k = m;
            if (((String)localObject).charAt(((String)localObject).length() - 1) == '/')
            {
              j = 0;
              i = 0;
              Logger.e("Msdk: MSDK_URL in msdkconfig.ini should not end with '/', maybe you should delete the '/' ");
              k = m;
            }
          }
        }
      }
    }
    catch (IOException localIOException)
    {
      Logger.e("Msdk: msdkconfig.ini file must be put into assets dir");
      localIOException.printStackTrace();
      k = 0;
      j = i;
    }
    i = k;
    Logger.e("Msdk: msdkconfig.ini must be put into assets dir");
    k = 0;
    while ((k == 0) || (j == 0)) {
      return false;
    }
    return true;
  }
  
  public boolean checkOtherConfig()
  {
    return true;
  }
  
  public boolean checkQQConfig()
  {
    if (T.ckIsEmpty(WeGame.getInstance().qq_appid)) {}
    int j;
    int k;
    do
    {
      return true;
      int m = 1;
      int i1 = 1;
      int i = 1;
      int n = 1;
      Object localObject = this.ctx.getPackageName();
      j = n;
      k = i1;
      try
      {
        if (this.ctx.getPackageManager().getActivityInfo(new ComponentName((String)localObject, "com.tencent.tauth.AuthActivity"), 128) == null)
        {
          k = 0;
          j = i;
        }
        else
        {
          j = n;
          k = i1;
          localObject = new Intent();
          j = n;
          k = i1;
          ((Intent)localObject).setData(Uri.parse("tencent" + WeGame.getInstance().qq_appid + "://"));
          j = n;
          k = i1;
          localObject = this.ctx.getPackageManager().queryIntentActivities((Intent)localObject, 65536);
          i1 = 0;
          int i2 = 0;
          n = 0;
          j = i1;
          k = i2;
          localObject = ((List)localObject).iterator();
          do
          {
            i = n;
            j = i1;
            k = i2;
            if (!((Iterator)localObject).hasNext()) {
              break;
            }
            j = i1;
            k = i2;
          } while (!"com.tencent.tauth.AuthActivity".equals(((ResolveInfo)((Iterator)localObject).next()).activityInfo.name));
          i = 1;
          k = m;
          j = i;
          if (i == 0)
          {
            j = i;
            k = i;
            Logger.e("QQ AppID for Initialiezed must be the same as configed in AndroidMenifest.xml ");
            k = m;
            j = i;
          }
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        localNameNotFoundException.printStackTrace();
        k = m;
      }
      catch (SecurityException localSecurityException)
      {
        localSecurityException.printStackTrace();
        j = k;
        k = m;
      }
    } while ((k != 0) && (j != 0));
    return false;
  }
  
  public boolean checkWxConfig()
  {
    if (T.ckIsEmpty(WeGame.getInstance().wx_appid)) {
      return true;
    }
    int i9 = 1;
    int i10 = 1;
    int i5 = 1;
    int i11 = 1;
    int i7 = 1;
    int i8 = 1;
    int i = 1;
    int j = 1;
    int i6 = 1;
    int i12 = 1;
    int k = 1;
    Object localObject = this.ctx.getApplication().getPackageName();
    String str = (String)localObject + ".wxapi.WXEntryActivity";
    int i1 = k;
    int m = i9;
    int n = i7;
    int i4 = i6;
    int i2 = i10;
    int i3 = i8;
    try
    {
      Class.forName(str);
      i1 = k;
      m = i9;
      n = i7;
      i4 = i6;
      i2 = i10;
      i3 = i8;
      ActivityInfo localActivityInfo = this.ctx.getPackageManager().getActivityInfo(new ComponentName((String)localObject, str), 128);
      if (localActivityInfo == null)
      {
        i4 = 0;
        i1 = i12;
        m = i5;
        n = i;
      }
      else
      {
        i5 = 1;
        i = i11;
        i1 = k;
        m = i9;
        n = i7;
        i4 = i6;
        i2 = i10;
        i3 = i8;
        if (localActivityInfo.launchMode != 1)
        {
          m = 0;
          i2 = 0;
          i = 0;
          i1 = k;
          n = i7;
          i4 = i6;
          i3 = i8;
          Logger.e("LauchMode of WXEntryActivity should be SingleTop");
        }
        i1 = k;
        m = i;
        n = i7;
        i4 = i6;
        i2 = i;
        i3 = i8;
        if (((String)localObject).equals(localActivityInfo.taskAffinity))
        {
          n = 0;
          i3 = 0;
          j = 0;
          i1 = k;
          m = i;
          i4 = i6;
          i2 = i;
          Logger.e("taskAffinity of WXEntryActivity must different from you app packageName");
        }
        i1 = k;
        m = i;
        n = j;
        i4 = i6;
        i2 = i;
        i3 = j;
        localObject = new Intent();
        i1 = k;
        m = i;
        n = j;
        i4 = i6;
        i2 = i;
        i3 = j;
        ((Intent)localObject).setData(Uri.parse(WeGame.getInstance().wx_appid + "://"));
        i1 = k;
        m = i;
        n = j;
        i4 = i6;
        i2 = i;
        i3 = j;
        localObject = this.ctx.getPackageManager().queryIntentActivities((Intent)localObject, 65536);
        i7 = 0;
        i8 = 0;
        i6 = 0;
        i1 = i7;
        m = i;
        n = j;
        i4 = i8;
        i2 = i;
        i3 = j;
        localObject = ((List)localObject).iterator();
        do
        {
          k = i6;
          i1 = i7;
          m = i;
          n = j;
          i4 = i8;
          i2 = i;
          i3 = j;
          if (!((Iterator)localObject).hasNext()) {
            break;
          }
          i1 = i7;
          m = i;
          n = j;
          i4 = i8;
          i2 = i;
          i3 = j;
        } while (!str.equals(((ResolveInfo)((Iterator)localObject).next()).activityInfo.name));
        k = 1;
        i1 = k;
        i4 = i5;
        m = i;
        n = j;
        if (k == 0)
        {
          i1 = k;
          m = i;
          n = j;
          i4 = k;
          i2 = i;
          i3 = j;
          Logger.e("Weixin AppID for Initialiezed must be the same as configed in AndroidMenifest.xml ");
          i1 = k;
          i4 = i5;
          m = i;
          n = j;
        }
      }
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      Logger.e("Weixin: WXEntryActivity.java must be put into package " + this.ctx.getApplication().getPackageName() + ".wxapi");
      i4 = 0;
      localClassNotFoundException.printStackTrace();
    }
    catch (PackageManager.NameNotFoundException localClassNotFoundException)
    {
      i = 1;
      localNameNotFoundException = ???;
      Logger.e("Weixin: WXEntryActivity.java must be put into package " + this.ctx.getApplication().getPackageName() + ".wxapi");
      localNameNotFoundException.printStackTrace();
      i1 = i4;
      i4 = i;
      m = i2;
      n = i3;
    }
    do
    {
      return false;
    } while ((i4 == 0) || (m == 0) || (n == 0) || (i1 == 0));
    return true;
  }
}
