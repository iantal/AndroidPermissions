package com.tencent.msdk.login;

import android.app.Activity;
import android.os.Bundle;
import android.os.Message;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.CardRet;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.ShareRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.consts.EPlatform;
import com.tencent.msdk.db.QQLoginModel;
import com.tencent.msdk.db.WxLoginModel;
import com.tencent.msdk.handle.MsdkThreadManager;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

public class LoginManager
{
  private static volatile LoginManager mInstance;
  private Object gameReqLock = new Object();
  private boolean isCheckingToken = false;
  private boolean isGameRequest = false;
  private Object lock = new Object();
  private Object lockLastQQModel = new Object();
  private Object lockLastWXModel = new Object();
  private long mBackgroundPeriod = 60L;
  private LoginRet mCallbackRet = null;
  private long mLastExecuteTime = 0L;
  private QQLoginModel mLastQQModel = null;
  private WxLoginModel mLastWXModel = null;
  private String openid = "";
  private int platform = 0;
  
  private LoginManager() {}
  
  public static LoginManager getInstance()
  {
    if (mInstance == null) {}
    try
    {
      if (mInstance == null) {
        mInstance = new LoginManager();
      }
      return mInstance;
    }
    finally {}
  }
  
  private boolean getIsCheckingToken()
  {
    synchronized (this.lock)
    {
      boolean bool = this.isCheckingToken;
      return bool;
    }
  }
  
  private void getPfKeyReqWithWakeup(int paramInt, WakeupRet paramWakeupRet)
  {
    Logger.d("newLogin getPfKeyReqWithWakeup, isCheckingToken:" + this.isCheckingToken);
    setIsCheckingToken(true);
    Message localMessage = new Message();
    localMessage.what = 8;
    localMessage.arg1 = paramInt;
    localMessage.obj = paramWakeupRet;
    MsdkThreadManager.getInstance().sendHandlerMessage(localMessage);
  }
  
  private void handleHallCallback(Bundle paramBundle, int paramInt)
  {
    if (paramBundle == null)
    {
      Logger.d("handleHallCallback Bundle EMPTY");
      return;
    }
    setIsCheckingToken(true);
    String str1 = paramBundle.getString("channelId");
    String str2 = paramBundle.getString("OPEN_AUTH_DATA");
    paramBundle = paramBundle.getString("OPEN_AUTH_ST");
    Logger.d("From Hall, channelId: " + str1);
    Logger.d("From Hall, openAuthData: " + str2);
    Logger.d("From Hall, openAuthSt: " + paramBundle);
    MsdkThreadManager.getInstance().qqA8Req(str2, paramBundle, 2);
  }
  
  private void handleQQCallback(Bundle paramBundle, int paramInt)
  {
    Logger.d("handleQQCallback");
    if (!T.ckIsEmpty(paramBundle.getString("openid"))) {}
    WakeupRet localWakeupRet;
    for (String str = paramBundle.getString("openid");; str = paramBundle.getString("current_uin"))
    {
      Logger.d("qq SetOpenid " + str);
      localWakeupRet = new WakeupRet();
      localWakeupRet.platform = WeGame.QQPLATID;
      localWakeupRet.open_id = str;
      localWakeupRet.flag = paramInt;
      LoginUtils.bundleToVector(paramBundle, localWakeupRet);
      switch (paramInt)
      {
      default: 
        getPfKeyReqWithWakeup(2, localWakeupRet);
        return;
      }
    }
    WGLoginWithLocalInfo(false, localWakeupRet);
    return;
    switchUser(true, localWakeupRet);
  }
  
  private void handleWXCallback(Bundle paramBundle, int paramInt)
  {
    Logger.d("handleWXCallback");
    if (paramBundle == null)
    {
      Logger.d("handleWXCallback Bundle EMPTY");
      return;
    }
    String str6 = paramBundle.getString("wx_callback");
    int j = paramBundle.getInt("wx_errCode");
    Object localObject1 = paramBundle.getString("wx_errStr");
    String str1 = paramBundle.getString("wx_transaction");
    Object localObject2 = paramBundle.getString("wx_openId");
    Object localObject3 = paramBundle.getString("wx_token");
    String str2 = paramBundle.getString("wx_mediaTagName");
    String str3 = paramBundle.getString("messageExt");
    String str4 = paramBundle.getString("country");
    String str5 = paramBundle.getString("lang");
    Logger.d("handleWXCallback errorCode: " + j);
    if ("onReq".equals(str6))
    {
      localObject1 = new WakeupRet();
      ((WakeupRet)localObject1).platform = WeGame.WXPLATID;
      ((WakeupRet)localObject1).open_id = ((String)localObject2);
      ((WakeupRet)localObject1).flag = paramInt;
      if (!T.ckIsEmpty(str2))
      {
        Logger.d("handleWXCallbackmediaTagName : " + str2);
        ((WakeupRet)localObject1).media_tag_name = str2;
      }
      for (;;)
      {
        if (!T.ckIsEmpty(str3))
        {
          Logger.d("handleWXCallbackmessageExt : " + str3);
          ((WakeupRet)localObject1).messageExt = str3;
        }
        if (!T.ckIsEmpty(str4))
        {
          Logger.d("handleWXCallbackcountry : " + str3);
          ((WakeupRet)localObject1).country = str4;
        }
        if (!T.ckIsEmpty(str5))
        {
          Logger.d("handleWXCallbacklang : " + str3);
          ((WakeupRet)localObject1).lang = str5;
        }
        LoginUtils.bundleToVector(paramBundle, (WakeupRet)localObject1);
        switch (paramInt)
        {
        default: 
          getPfKeyReqWithWakeup(2, (WakeupRet)localObject1);
          return;
          Logger.d("handleWXCallbackmediaTagName null or empty");
        }
      }
      paramBundle = getLastWxLoginModel();
      if (paramBundle == null)
      {
        Logger.e("WxLoginModel getLastWx is null");
        return;
      }
      paramBundle.setWakeUpRet((WakeupRet)localObject1);
      verifyLocalAndRefreshWxToken(paramBundle, false);
      return;
      WGLoginWithLocalInfo(false, (WakeupRet)localObject1);
      return;
    }
    if ("onQrcode".equals(str6))
    {
      Logger.d("onQrcode");
      paramBundle = new LoginRet();
      paramBundle.platform = WeGame.WXPLATID;
      Logger.d("WXEntryActivity errcode:" + j);
      if (j == 0)
      {
        paramBundle.flag = 0;
        localObject1 = new TokenRet();
        ((TokenRet)localObject1).type = 4;
        if (localObject3 == null) {}
        for (((TokenRet)localObject1).value = "";; ((TokenRet)localObject1).value = ((String)localObject3))
        {
          paramBundle.token.add(localObject1);
          Logger.d("code: " + ((TokenRet)localObject1).value);
          wxFirstLoginReq(((TokenRet)localObject1).value, 1);
          return;
        }
      }
      paramBundle.flag = 2004;
      paramBundle.desc = ("errCode:" + j + ";errStr:" + (String)localObject1);
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify(paramBundle);
      return;
    }
    if (("appdata".equals(str1)) || ("img".equals(str1)) || ("msdkwebpage".equals(str1)) || ("webpage".equals(str1)))
    {
      paramBundle = new ShareRet();
      paramBundle.flag = j;
      paramBundle.platform = WeGame.WXPLATID;
      if (!T.ckIsEmpty((String)localObject1)) {
        paramBundle.desc = ((String)localObject1);
      }
      Logger.d("WX Share ErrorCode :" + j);
      switch (j)
      {
      case -4: 
      case -3: 
      case -1: 
      default: 
        paramBundle.flag = -1;
      }
      while ("msdkwebpage".equals(str1))
      {
        Logger.d("webpage share, flag:" + paramBundle.flag);
        return;
        paramBundle.flag = 0;
        continue;
        paramBundle.flag = 2002;
        continue;
        paramBundle.flag = 2001;
      }
      WeGameNotifyGame.getInstance().OnShareNotify(paramBundle);
      return;
    }
    if ("wechatAddCardToWXCardPackage".equals(str1))
    {
      Logger.d("wechatAddCardToWXCardPackage, transaction:" + str1 + ";errStr:" + (String)localObject1 + ";errCode:" + j);
      localObject3 = new CardRet();
      switch (j)
      {
      case -3: 
      case -1: 
      default: 
        ((CardRet)localObject3).flag = -1;
      }
      for (;;)
      {
        str2 = paramBundle.getString("wxapi_add_card_to_wx_card_list");
        ((CardRet)localObject3).open_id = ((String)localObject2);
        ((CardRet)localObject3).wx_card_list = str2;
        ((CardRet)localObject3).desc = ("transaction:" + str1 + ";errStr:" + (String)localObject1 + ";errCode:" + j);
        LoginUtils.bundleToVector(paramBundle, (CardRet)localObject3);
        WeGameNotifyGame.getInstance().OnAddWXCardNotify((CardRet)localObject3);
        return;
        ((CardRet)localObject3).flag = 0;
        continue;
        ((CardRet)localObject3).flag = 2002;
        continue;
        ((CardRet)localObject3).flag = 2003;
      }
    }
    paramBundle = new LoginRet();
    paramBundle.platform = WeGame.WXPLATID;
    Logger.d("WXEntryActivity errcode:" + j);
    paramInt = 0;
    int i = 0;
    switch (j)
    {
    case -3: 
    case -1: 
    default: 
      paramBundle.flag = 2004;
      paramInt = 1005;
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify(paramBundle);
    }
    while (paramInt == 0)
    {
      BeaconHelper.reportMSDKEvent("wxEntryFirstLogin", WeGame.getInstance().getWxRequestStartTime(), true, null, true);
      localObject1 = new HashMap();
      ((HashMap)localObject1).put("platform", "" + paramBundle.platform);
      ((HashMap)localObject1).put("errcode", "" + j);
      SaveLogHelper.getInstance().reportLog("handleCallback", (HashMap)localObject1, false);
      return;
      paramBundle.flag = 0;
      if (localObject2 != null) {
        paramBundle.open_id = ((String)localObject2);
      }
      localObject1 = new TokenRet();
      ((TokenRet)localObject1).type = 4;
      if (localObject3 == null) {}
      for (((TokenRet)localObject1).value = "";; ((TokenRet)localObject1).value = ((String)localObject3))
      {
        paramBundle.token.add(localObject1);
        Logger.d("code: " + ((TokenRet)localObject1).value);
        wxFirstLoginReq(((TokenRet)localObject1).value, 1);
        break;
      }
      paramBundle.flag = 2002;
      paramInt = 1000;
      i = 1;
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify(paramBundle);
      continue;
      paramBundle.flag = 2003;
      paramInt = 1004;
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify(paramBundle);
    }
    localObject1 = new HashMap();
    ((Map)localObject1).put("param_FailCode", "" + paramInt);
    localObject2 = new StringBuilder().append("");
    if (i != 0) {}
    for (paramInt = 1;; paramInt = 0)
    {
      ((Map)localObject1).put("msdk_logic_error", paramInt);
      BeaconHelper.reportMSDKEvent("wxEntryFirstLogin", WeGame.getInstance().getWxRequestStartTime(), false, (Map)localObject1, true);
      break;
    }
  }
  
  private void verifyLocalAndRefreshWxToken(WxLoginModel paramWxLoginModel, boolean paramBoolean)
  {
    Logger.d("newLogin verifyLocalAndRefreshWxToken, isCheckingToken:" + this.isCheckingToken + ",needvarify:" + paramBoolean);
    setIsCheckingToken(true);
    Message localMessage = new Message();
    localMessage.what = 32;
    localMessage.obj = paramWxLoginModel;
    if (paramBoolean) {}
    for (localMessage.arg1 = 1;; localMessage.arg1 = 0)
    {
      MsdkThreadManager.getInstance().sendHandlerMessage(localMessage);
      return;
    }
  }
  
  private void verifyLocalQQToken(QQLoginModel paramQQLoginModel)
  {
    Logger.d("newLogin verifyLocalQQToken, isCheckingToken:" + this.isCheckingToken);
    setIsCheckingToken(true);
    Message localMessage = new Message();
    localMessage.what = 31;
    localMessage.obj = paramQQLoginModel;
    MsdkThreadManager.getInstance().sendHandlerMessage(localMessage);
  }
  
  public int WGGetLoginRecord(LoginRet paramLoginRet)
  {
    Logger.d("LoginManager WGGetLoginRecord...");
    if (getIsCheckingToken())
    {
      paramLoginRet.flag = 5001;
      return paramLoginRet.platform;
    }
    LoginUtils.getLocalLoginRet(paramLoginRet);
    return paramLoginRet.platform;
  }
  
  public void WGLogin(EPlatform paramEPlatform)
  {
    Logger.d("LoginManager WGLogin..., platform:" + paramEPlatform.val());
    if (paramEPlatform == EPlatform.ePlatform_None)
    {
      WGLoginWithLocalInfo(true, null);
      return;
    }
    MsdkThreadManager.getInstance().sendLoginMsg(paramEPlatform.val());
    HashMap localHashMap = new HashMap();
    if (paramEPlatform == null) {}
    for (paramEPlatform = "null";; paramEPlatform = String.valueOf(paramEPlatform.val()))
    {
      localHashMap.put("plat", paramEPlatform);
      SaveLogHelper.getInstance().reportLog("WGLogin", localHashMap, false);
      return;
    }
  }
  
  public void WGLoginWithLocalInfo(boolean paramBoolean, WakeupRet paramWakeupRet)
  {
    Logger.d("newLogin gamestart:" + paramBoolean + ",ret:" + paramWakeupRet);
    if (paramBoolean) {
      setIsGameRequest(true);
    }
    while ((paramWakeupRet != null) || (System.currentTimeMillis() / 1000L - this.mLastExecuteTime >= this.mBackgroundPeriod))
    {
      Logger.d("newLogin");
      this.mLastExecuteTime = (System.currentTimeMillis() / 1000L);
      if ((paramWakeupRet != null) || (!getIsCheckingToken())) {
        break;
      }
      return;
    }
    Logger.d("newLogin lastverify too short, don't timer loginwithlocal");
    return;
    Object localObject = new LoginRet();
    LoginUtils.getLocalLoginRet((LoginRet)localObject);
    SaveLogHelper.getInstance().reportLog("WGLoginWithLocalInfo", (LoginRet)localObject, false);
    if (((LoginRet)localObject).platform == WeGame.QQPLATID)
    {
      switch (((LoginRet)localObject).flag)
      {
      default: 
        Logger.d("WGGetLoginRecord return flag: " + ((LoginRet)localObject).flag);
        Logger.d(localObject);
        localObject = new LoginRet(WeGame.QQPLATID, -2, "flag: " + ((LoginRet)localObject).flag);
        if (paramWakeupRet != null) {
          WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
        }
        WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
        return;
      case 0: 
        Logger.d("local token valid");
        localObject = getLastQQLoginModel();
        if (localObject == null)
        {
          Logger.e("QQLoginModel qui==null");
          localObject = new LoginRet(WeGame.QQPLATID, -2, "getLastQQLoginModel null, let users login again!");
          if (paramWakeupRet != null) {
            WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
          }
          WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
          return;
        }
        ((QQLoginModel)localObject).setWakeUpRet(paramWakeupRet);
        verifyLocalQQToken((QQLoginModel)localObject);
        return;
      }
      Logger.d("TokenExpired");
      localObject = new LoginRet(WeGame.QQPLATID, -2, "accessToken or payToken expired, let users login again!");
      if (paramWakeupRet != null) {
        WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
      }
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
      return;
    }
    if (((LoginRet)localObject).platform == WeGame.WXPLATID)
    {
      switch (((LoginRet)localObject).flag)
      {
      default: 
        Logger.d("WGGetLoginRecord return invalid flag");
        Logger.d(localObject);
        localObject = new LoginRet(WeGame.WXPLATID, -2, "invalid flag" + ((LoginRet)localObject).flag);
        if (paramWakeupRet != null) {
          WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
        }
        WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
        return;
      case 0: 
      case 2007: 
        Logger.d("local token valid");
        WxLoginModel localWxLoginModel = getLastWxLoginModel();
        if (localWxLoginModel == null)
        {
          localObject = new LoginRet(WeGame.WXPLATID, -2, "invalid flag" + ((LoginRet)localObject).flag);
          if (paramWakeupRet != null) {
            WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
          }
          WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
          return;
        }
        localWxLoginModel.setWakeUpRet(paramWakeupRet);
        if (((LoginRet)localObject).flag == 0)
        {
          verifyLocalAndRefreshWxToken(localWxLoginModel, true);
          return;
        }
        verifyLocalAndRefreshWxToken(localWxLoginModel, false);
        return;
      }
      localObject = new LoginRet(WeGame.WXPLATID, -2, "refresh token expired");
      if (paramWakeupRet != null) {
        WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
      }
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
      return;
    }
    Logger.d("WGGetLoginRecord return invalid platform " + ((LoginRet)localObject).platform);
    if (paramWakeupRet != null) {
      WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
    }
    paramWakeupRet = new LoginRet(WeGame.QQPLATID, -2, "invalid platform");
    WeGameNotifyGame.getInstance().OnPlatformLoginNotify(paramWakeupRet);
  }
  
  public void WGRefreshWxToken()
  {
    wxExpiredLoginReq(1, false);
  }
  
  public String getCurrentOpenid()
  {
    return this.openid;
  }
  
  public int getCurrentPlatform()
  {
    return this.platform;
  }
  
  public boolean getIsGameRequest()
  {
    synchronized (this.gameReqLock)
    {
      boolean bool = this.isGameRequest;
      return bool;
    }
  }
  
  public QQLoginModel getLastQQLoginModel()
  {
    synchronized (this.lockLastQQModel)
    {
      if (this.mLastQQModel == null)
      {
        this.mLastQQModel = new QQLoginModel().getLastQQLoginUserinfo();
        if (this.mLastQQModel == null) {
          return null;
        }
      }
      QQLoginModel localQQLoginModel = new QQLoginModel();
      localQQLoginModel.open_id = this.mLastQQModel.open_id;
      localQQLoginModel.access_token = this.mLastQQModel.access_token;
      localQQLoginModel.access_token_expire = this.mLastQQModel.access_token_expire;
      localQQLoginModel.pay_token = this.mLastQQModel.pay_token;
      localQQLoginModel.pay_token_expire = this.mLastQQModel.pay_token_expire;
      localQQLoginModel.pf = this.mLastQQModel.pf;
      localQQLoginModel.pf_key = this.mLastQQModel.pf_key;
      localQQLoginModel.create_at = this.mLastQQModel.create_at;
      return localQQLoginModel;
    }
  }
  
  /* Error */
  public WxLoginModel getLastWxLoginModel()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 51	com/tencent/msdk/login/LoginManager:lockLastWXModel	Ljava/lang/Object;
    //   6: astore_2
    //   7: aload_2
    //   8: monitorenter
    //   9: aload_0
    //   10: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   13: ifnonnull +32 -> 45
    //   16: aload_0
    //   17: new 262	com/tencent/msdk/db/WxLoginModel
    //   20: dup
    //   21: invokespecial 557	com/tencent/msdk/db/WxLoginModel:<init>	()V
    //   24: invokevirtual 560	com/tencent/msdk/db/WxLoginModel:getLastWxLoginUserinfo	()Lcom/tencent/msdk/db/WxLoginModel;
    //   27: putfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   30: aload_0
    //   31: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   34: ifnonnull +11 -> 45
    //   37: aconst_null
    //   38: astore_1
    //   39: aload_2
    //   40: monitorexit
    //   41: aload_0
    //   42: monitorexit
    //   43: aload_1
    //   44: areturn
    //   45: new 262	com/tencent/msdk/db/WxLoginModel
    //   48: dup
    //   49: invokespecial 557	com/tencent/msdk/db/WxLoginModel:<init>	()V
    //   52: astore_1
    //   53: aload_1
    //   54: aload_0
    //   55: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   58: getfield 561	com/tencent/msdk/db/WxLoginModel:open_id	Ljava/lang/String;
    //   61: putfield 561	com/tencent/msdk/db/WxLoginModel:open_id	Ljava/lang/String;
    //   64: aload_1
    //   65: aload_0
    //   66: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   69: getfield 562	com/tencent/msdk/db/WxLoginModel:access_token	Ljava/lang/String;
    //   72: putfield 562	com/tencent/msdk/db/WxLoginModel:access_token	Ljava/lang/String;
    //   75: aload_1
    //   76: aload_0
    //   77: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   80: getfield 563	com/tencent/msdk/db/WxLoginModel:access_token_expire	J
    //   83: putfield 563	com/tencent/msdk/db/WxLoginModel:access_token_expire	J
    //   86: aload_1
    //   87: aload_0
    //   88: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   91: getfield 566	com/tencent/msdk/db/WxLoginModel:refresh_token	Ljava/lang/String;
    //   94: putfield 566	com/tencent/msdk/db/WxLoginModel:refresh_token	Ljava/lang/String;
    //   97: aload_1
    //   98: aload_0
    //   99: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   102: getfield 569	com/tencent/msdk/db/WxLoginModel:refresh_token_expire	J
    //   105: putfield 569	com/tencent/msdk/db/WxLoginModel:refresh_token_expire	J
    //   108: aload_1
    //   109: aload_0
    //   110: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   113: getfield 570	com/tencent/msdk/db/WxLoginModel:pf	Ljava/lang/String;
    //   116: putfield 570	com/tencent/msdk/db/WxLoginModel:pf	Ljava/lang/String;
    //   119: aload_1
    //   120: aload_0
    //   121: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   124: getfield 571	com/tencent/msdk/db/WxLoginModel:pf_key	Ljava/lang/String;
    //   127: putfield 571	com/tencent/msdk/db/WxLoginModel:pf_key	Ljava/lang/String;
    //   130: aload_1
    //   131: aload_0
    //   132: getfield 55	com/tencent/msdk/login/LoginManager:mLastWXModel	Lcom/tencent/msdk/db/WxLoginModel;
    //   135: getfield 572	com/tencent/msdk/db/WxLoginModel:create_at	J
    //   138: putfield 572	com/tencent/msdk/db/WxLoginModel:create_at	J
    //   141: aload_2
    //   142: monitorexit
    //   143: goto -102 -> 41
    //   146: astore_1
    //   147: aload_2
    //   148: monitorexit
    //   149: aload_1
    //   150: athrow
    //   151: astore_1
    //   152: aload_0
    //   153: monitorexit
    //   154: aload_1
    //   155: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	156	0	this	LoginManager
    //   38	93	1	localWxLoginModel	WxLoginModel
    //   146	4	1	localObject1	Object
    //   151	4	1	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   9	37	146	finally
    //   39	41	146	finally
    //   45	143	146	finally
    //   147	149	146	finally
    //   2	9	151	finally
    //   149	151	151	finally
  }
  
  public void getQQFirstLoginPfKeyReq(QQLoginModel paramQQLoginModel)
  {
    Logger.d("newLogin getQQFirstLoginPfKeyReq, isCheckingToken:" + this.isCheckingToken);
    if (paramQQLoginModel.getWakeupRet() != null) {
      setIsCheckingToken(true);
    }
    Message localMessage = new Message();
    localMessage.what = 18;
    localMessage.obj = paramQQLoginModel;
    MsdkThreadManager.getInstance().sendHandlerMessage(localMessage);
  }
  
  public void handleCallback(Bundle paramBundle)
  {
    String str = LoginUtils.getPlatformFromCallbackInfo(paramBundle);
    Logger.d("checkTokenFlag platformId:" + str);
    WGPfManager.getInstance().setPlatformId(str);
    this.mCallbackRet = new LoginRet();
    LoginUtils.setmCallbackRet(str, paramBundle, this.mCallbackRet);
    int i = LoginUtils.checkDiffLogin(this.mCallbackRet);
    HashMap localHashMap = new HashMap();
    localHashMap.put("platform", "" + this.mCallbackRet.platform);
    localHashMap.put("diffAccountFlag", "" + i);
    SaveLogHelper.getInstance().reportLog("handleCallback", localHashMap, false);
    Logger.d("diffAccountFlag flag:" + i);
    if (WeGame.QQPLATID == this.mCallbackRet.platform)
    {
      Logger.d("handleQQCallback,diffAccountFlag:" + i);
      handleQQCallback(paramBundle, i);
    }
    for (;;)
    {
      Logger.d("###platformId:" + str);
      return;
      if (WeGame.WXPLATID == this.mCallbackRet.platform)
      {
        Logger.d("handleWXCallback,diffAccountFlag:" + i);
        handleWXCallback(paramBundle, i);
      }
      else if (WeGame.QQHALL == this.mCallbackRet.platform)
      {
        Logger.d("handleHallCallback,diffAccountFlag:" + i);
        handleHallCallback(paramBundle, i);
      }
      else
      {
        Logger.d("handdle unknow platformID: " + str);
      }
    }
  }
  
  public void init(Activity paramActivity)
  {
    setIsCheckingToken(false);
    this.mLastQQModel = null;
    this.mLastWXModel = null;
    this.openid = "";
    this.platform = 0;
    this.mLastExecuteTime = 0L;
    int i = ConfigManager.getCheckBackgroundTime(paramActivity);
    if (i > 0) {
      this.mBackgroundPeriod = (i * 60);
    }
    Logger.d("newLogin backgroundPeriod:" + this.mBackgroundPeriod);
  }
  
  public void reportLogin(String paramString, int paramInt)
  {
    this.openid = paramString;
    this.platform = paramInt;
    MsdkThreadManager.getInstance().sendReportLogin(paramString, paramInt);
  }
  
  public void resetLastQQLoginModel()
  {
    synchronized (this.lockLastQQModel)
    {
      this.mLastQQModel = null;
      return;
    }
  }
  
  public void resetLastWxLoginModel()
  {
    synchronized (this.lockLastWXModel)
    {
      this.mLastWXModel = null;
      return;
    }
  }
  
  public void setIsCheckingToken(boolean paramBoolean)
  {
    synchronized (this.lock)
    {
      this.isCheckingToken = paramBoolean;
      return;
    }
  }
  
  public void setIsGameRequest(boolean paramBoolean)
  {
    synchronized (this.gameReqLock)
    {
      this.isGameRequest = paramBoolean;
      return;
    }
  }
  
  public boolean switchUser(boolean paramBoolean, WakeupRet paramWakeupRet)
  {
    Logger.d("switchUser:" + paramBoolean);
    if (paramBoolean)
    {
      Logger.d("login with callback");
      if (WeGame.QQPLATID == this.mCallbackRet.platform)
      {
        Logger.d("loginWithUrlInfo: qq");
        QQLoginModel localQQLoginModel = new QQLoginModel();
        localQQLoginModel.open_id = this.mCallbackRet.open_id;
        long l = System.currentTimeMillis() / 1000L;
        localQQLoginModel.access_token = this.mCallbackRet.getAccessToken();
        localQQLoginModel.access_token_expire = (this.mCallbackRet.getTokenExpireByType(1) + l);
        localQQLoginModel.pay_token = this.mCallbackRet.getTokenByType(2);
        localQQLoginModel.pay_token_expire = (this.mCallbackRet.getTokenExpireByType(2) + l);
        localQQLoginModel.pf = this.mCallbackRet.pf;
        localQQLoginModel.pf_key = this.mCallbackRet.pf_key;
        if (paramWakeupRet != null) {
          localQQLoginModel.setWakeUpRet(paramWakeupRet);
        }
        getQQFirstLoginPfKeyReq(localQQLoginModel);
        return true;
      }
      if (WeGame.WXPLATID == this.mCallbackRet.platform)
      {
        Logger.d("loginWithUrlInfo: wechat");
        if (paramWakeupRet != null) {
          WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
        }
        return false;
      }
      if (WeGame.QQHALL == this.mCallbackRet.platform)
      {
        Logger.d("loginWithUrlInfo: hall");
        if (paramWakeupRet != null) {
          WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
        }
        return false;
      }
      Logger.w("loginWithUrlInfo: " + this.mCallbackRet.platform);
      if (paramWakeupRet != null) {
        WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(paramWakeupRet);
      }
      return false;
    }
    Logger.d("login with local");
    this.mCallbackRet = new LoginRet();
    WGLoginWithLocalInfo(true, paramWakeupRet);
    return true;
  }
  
  public void wxExpiredLoginReq(int paramInt, boolean paramBoolean)
  {
    Logger.d("wxExpiredLoginReq");
    Message localMessage = new Message();
    localMessage.what = 6;
    localMessage.arg1 = paramInt;
    localMessage.obj = Boolean.valueOf(paramBoolean);
    MsdkThreadManager.getInstance().sendHandlerMessage(localMessage);
  }
  
  public void wxFirstLoginReq(String paramString, int paramInt)
  {
    Logger.d("newLogin wxFirstLoginReq, isCheckingToken:" + this.isCheckingToken);
    Message localMessage = new Message();
    localMessage.what = 5;
    WxFirstLoginInfo localWxFirstLoginInfo = new WxFirstLoginInfo();
    localWxFirstLoginInfo.wxCode = paramString;
    localWxFirstLoginInfo.notifyState = paramInt;
    localMessage.obj = localWxFirstLoginInfo;
    MsdkThreadManager.getInstance().sendHandlerMessage(localMessage);
  }
}
