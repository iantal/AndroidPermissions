package com.tencent.msdk.login;

import android.app.Activity;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Looper;
import android.os.Message;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.tools.Logger;

public class LoginTimer
{
  private static final long DEFAULT_CHECKTOKEN_TIME = 1800000L;
  private static final int MSG_GETADINFO = 1;
  private static volatile LoginTimer instance;
  private boolean mFirstStart = false;
  private Handler mLoginHandler = null;
  private long mPeriod = 1800000L;
  private boolean mStartVerifyToken = true;
  
  private LoginTimer() {}
  
  public static LoginTimer getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new LoginTimer();
      }
      return instance;
    }
    finally {}
  }
  
  public void initTimer(Activity paramActivity)
  {
    if (paramActivity != null)
    {
      this.mStartVerifyToken = ConfigManager.needWXTokenRefresh(paramActivity);
      int i = ConfigManager.getCheckTokenTime(paramActivity);
      if (i > 0) {
        this.mPeriod = (i * 60 * 1000);
      }
      Logger.d("newLogin Timer period:" + this.mPeriod);
      if (!this.mStartVerifyToken) {
        Logger.d("newLogin Timer verify token finished!");
      }
    }
    else
    {
      return;
    }
    this.mLoginHandler = new Handler(Looper.getMainLooper(), new Handler.Callback()
    {
      public boolean handleMessage(Message paramAnonymousMessage)
      {
        if (paramAnonymousMessage.what == 1)
        {
          paramAnonymousMessage = new LoginRet();
          LoginUtils.getLocalLoginRet(paramAnonymousMessage);
          Logger.d("newLogin timer wgloginwithlocalinfo,platform:" + paramAnonymousMessage.platform + ",CurrentThread:" + Thread.currentThread().getName());
          if (paramAnonymousMessage.platform != 0) {
            LoginManager.getInstance().WGLoginWithLocalInfo(false, null);
          }
          LoginTimer.this.mLoginHandler.sendEmptyMessageDelayed(1, LoginTimer.this.mPeriod);
        }
        return false;
      }
    });
    this.mFirstStart = true;
  }
  
  public void onResume()
  {
    if (this.mFirstStart)
    {
      this.mFirstStart = false;
      startTimer();
    }
  }
  
  public void startTimer()
  {
    if ((this.mStartVerifyToken) && (this.mLoginHandler != null))
    {
      Logger.d("newLogin startTimer.....");
      this.mLoginHandler.sendEmptyMessage(1);
    }
  }
  
  public void stopTimer()
  {
    if (this.mLoginHandler != null)
    {
      Logger.d("newLogin stopTimer.....");
      this.mLoginHandler.removeMessages(1);
    }
  }
}
