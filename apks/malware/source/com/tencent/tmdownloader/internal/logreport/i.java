package com.tencent.tmdownloader.internal.logreport;

import com.tencent.tmassistantbase.network.INetworkChangedObserver;
import com.tencent.tmassistantbase.network.NetworkMonitorReceiver;
import com.tencent.tmassistantbase.util.TMLog;

public class i
{
  protected static i a = null;
  protected static final Class[] b = { c.class, g.class, d.class };
  private final INetworkChangedObserver c = new j(this);
  
  private i()
  {
    NetworkMonitorReceiver.getInstance().addNetworkChangedObserver(this.c);
  }
  
  public static i a()
  {
    try
    {
      if (a == null) {
        a = new i();
      }
      i localI = a;
      return localI;
    }
    finally {}
  }
  
  public void b()
  {
    Class[] arrayOfClass = b;
    int j = arrayOfClass.length;
    int i = 0;
    while (i < j)
    {
      Class localClass = arrayOfClass[i];
      try
      {
        if (localClass.equals(e.class)) {
          c.h().a();
        }
        if (localClass.equals(g.class)) {
          g.h().a();
        }
        if (localClass.equals(d.class)) {
          d.h().a();
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
          TMLog.w("LogReportManager", "exception:", localException);
        }
      }
      i += 1;
    }
    NetworkMonitorReceiver.getInstance().removeNetworkChangedObserver(this.c);
  }
  
  public void c()
  {
    Class[] arrayOfClass = b;
    int j = arrayOfClass.length;
    int i = 0;
    while (i < j)
    {
      Class localClass = arrayOfClass[i];
      try
      {
        if (localClass.equals(c.class)) {
          c.h().c();
        }
        if (localClass.equals(g.class)) {
          g.h().c();
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
          TMLog.w("LogReportManager", "exception:", localException);
        }
      }
      i += 1;
    }
  }
  
  public void d()
  {
    Class[] arrayOfClass = b;
    int j = arrayOfClass.length;
    int i = 0;
    while (i < j)
    {
      Class localClass = arrayOfClass[i];
      try
      {
        if (localClass.equals(c.class)) {
          c.h().b();
        }
        if (localClass.equals(g.class)) {
          g.h().b();
        }
        if (localClass.equals(d.class)) {
          d.h().b();
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          TMLog.w("LogReportManager", "exception:", localException);
          localException.printStackTrace();
        }
      }
      i += 1;
    }
  }
}
