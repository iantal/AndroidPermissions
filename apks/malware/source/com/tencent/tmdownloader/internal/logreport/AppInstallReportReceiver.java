package com.tencent.tmdownloader.internal.logreport;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import com.tencent.tmassistantbase.util.GlobalUtil;
import com.tencent.tmassistantbase.util.TMLog;

public class AppInstallReportReceiver
  extends BroadcastReceiver
{
  protected static AppInstallReportReceiver c = null;
  protected final String a = AppInstallReportReceiver.class.getName();
  protected boolean b = false;
  private final Handler d = new a(this);
  
  public AppInstallReportReceiver() {}
  
  public static AppInstallReportReceiver a()
  {
    try
    {
      if (c == null) {
        c = new AppInstallReportReceiver();
      }
      AppInstallReportReceiver localAppInstallReportReceiver = c;
      return localAppInstallReportReceiver;
    }
    finally {}
  }
  
  private void a(String paramString, int paramInt)
  {
    g.h().a(paramString, (byte)paramInt);
  }
  
  public void b()
  {
    TMLog.i(this.a, "enter");
    Context localContext = GlobalUtil.getInstance().getContext();
    if (localContext == null)
    {
      TMLog.i(this.a, "null == context return");
      return;
    }
    IntentFilter localIntentFilter = new IntentFilter();
    localIntentFilter.addAction("android.intent.action.PACKAGE_ADDED");
    localIntentFilter.addAction("android.intent.action.PACKAGE_REPLACED");
    localIntentFilter.addDataScheme("package");
    try
    {
      TMLog.i(this.a, "registerReceiver ok");
      localContext.registerReceiver(this, localIntentFilter);
      this.b = true;
      return;
    }
    catch (Throwable localThrowable)
    {
      TMLog.i(this.a, "registerReceiver fail");
      this.b = false;
      localThrowable.printStackTrace();
    }
  }
  
  public void c()
  {
    if (c == null) {}
    for (;;)
    {
      return;
      Context localContext = GlobalUtil.getInstance().getContext();
      if (localContext != null) {
        try
        {
          if (this.b)
          {
            localContext.unregisterReceiver(this);
            this.b = false;
            return;
          }
        }
        catch (Throwable localThrowable)
        {
          localThrowable.printStackTrace();
        }
      }
    }
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    TMLog.i(this.a, "onReceive >> " + paramIntent.getAction());
    paramContext = paramIntent.getDataString();
    if (TextUtils.isEmpty(paramContext))
    {
      TMLog.e(this.a, "onReceive intentPkgNameString == null ");
      return;
    }
    Object localObject = paramContext.split(":");
    Message localMessage;
    boolean bool;
    if (localObject.length == 2)
    {
      localObject = new String(localObject[1].toString());
      localMessage = Message.obtain();
      localMessage.obj = localObject;
      bool = paramIntent.getBooleanExtra("android.intent.extra.REPLACING", false);
      if (!paramIntent.getAction().equals("android.intent.action.PACKAGE_REPLACED")) {
        break label187;
      }
      TMLog.i(this.a, "ACTION_PACKAGE_REPLACED >> " + paramContext);
    }
    for (localMessage.what = 1;; localMessage.what = 0)
    {
      this.d.sendMessage(localMessage);
      return;
      TMLog.e(this.a, "onReceive packageName == null " + paramIntent.getDataString());
      return;
      label187:
      if ((!paramIntent.getAction().equals("android.intent.action.PACKAGE_ADDED")) || (bool)) {
        break;
      }
      TMLog.i(this.a, "ACTION_PACKAGE_ADDED >> " + paramContext);
    }
  }
}
