package com.tencent.tmdownloader.internal.b.c;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.text.TextUtils;
import com.tencent.tmassistantbase.util.TMLog;
import com.tencent.tmdownloader.internal.b.a.b;
import com.tencent.tmdownloader.internal.b.a.c;
import com.tencent.tmdownloader.internal.protocol.jce.DownloadNewChunkLogInfo;

public class e
  implements j
{
  public e() {}
  
  public static long a(DownloadNewChunkLogInfo paramDownloadNewChunkLogInfo)
  {
    long l2 = -1L;
    long l1 = l2;
    if (paramDownloadNewChunkLogInfo != null) {}
    try
    {
      SQLiteDatabase localSQLiteDatabase = b.a().getWritableDatabase();
      l1 = l2;
      if (localSQLiteDatabase != null)
      {
        ContentValues localContentValues = new ContentValues();
        a(localContentValues, paramDownloadNewChunkLogInfo);
        l1 = localSQLiteDatabase.insert("downloadChunkInfo", null, localContentValues);
      }
      return l1;
    }
    catch (Exception paramDownloadNewChunkLogInfo)
    {
      TMLog.e("DownloadChunkInfoTable", "exception: ", paramDownloadNewChunkLogInfo);
      paramDownloadNewChunkLogInfo.printStackTrace();
    }
    return -1L;
  }
  
  public static DownloadNewChunkLogInfo a(Cursor paramCursor)
  {
    DownloadNewChunkLogInfo localDownloadNewChunkLogInfo = new DownloadNewChunkLogInfo();
    localDownloadNewChunkLogInfo.segId = paramCursor.getLong(paramCursor.getColumnIndex("_id"));
    localDownloadNewChunkLogInfo.taskId = paramCursor.getString(paramCursor.getColumnIndex("taskId"));
    localDownloadNewChunkLogInfo.downUrl = paramCursor.getString(paramCursor.getColumnIndex("downUrl"));
    localDownloadNewChunkLogInfo.jumpUrl = paramCursor.getString(paramCursor.getColumnIndex("jumpUrl"));
    localDownloadNewChunkLogInfo.finalDownloadUrl = paramCursor.getString(paramCursor.getColumnIndex("finalDownloadUrl"));
    localDownloadNewChunkLogInfo.contentType = paramCursor.getString(paramCursor.getColumnIndex("contentType"));
    localDownloadNewChunkLogInfo.networkType = paramCursor.getString(paramCursor.getColumnIndex("netType"));
    localDownloadNewChunkLogInfo.down_Size = paramCursor.getLong(paramCursor.getColumnIndex("down_Size"));
    localDownloadNewChunkLogInfo.costTime = paramCursor.getLong(paramCursor.getColumnIndex("costTime"));
    localDownloadNewChunkLogInfo.startTime = paramCursor.getLong(paramCursor.getColumnIndex("startTime"));
    localDownloadNewChunkLogInfo.endTime = paramCursor.getLong(paramCursor.getColumnIndex("endTime"));
    localDownloadNewChunkLogInfo.taskResult = paramCursor.getInt(paramCursor.getColumnIndex("taskResult"));
    localDownloadNewChunkLogInfo.result = ((byte)paramCursor.getInt(paramCursor.getColumnIndex("result")));
    return localDownloadNewChunkLogInfo;
  }
  
  public static void a(ContentValues paramContentValues, DownloadNewChunkLogInfo paramDownloadNewChunkLogInfo)
  {
    if ((paramDownloadNewChunkLogInfo != null) && (paramContentValues != null))
    {
      paramContentValues.put("taskId", paramDownloadNewChunkLogInfo.taskId);
      paramContentValues.put("downUrl", paramDownloadNewChunkLogInfo.downUrl);
      paramContentValues.put("jumpUrl", paramDownloadNewChunkLogInfo.jumpUrl);
      paramContentValues.put("finalDownloadUrl", paramDownloadNewChunkLogInfo.finalDownloadUrl);
      paramContentValues.put("contentType", paramDownloadNewChunkLogInfo.contentType);
      paramContentValues.put("netType", paramDownloadNewChunkLogInfo.networkType);
      paramContentValues.put("down_Size", Long.valueOf(paramDownloadNewChunkLogInfo.down_Size));
      paramContentValues.put("startTime", Long.valueOf(paramDownloadNewChunkLogInfo.startTime));
      paramDownloadNewChunkLogInfo.endTime = System.currentTimeMillis();
      paramContentValues.put("endTime", Long.valueOf(paramDownloadNewChunkLogInfo.endTime));
      paramContentValues.put("costTime", Long.valueOf(paramDownloadNewChunkLogInfo.endTime - paramDownloadNewChunkLogInfo.startTime));
      paramContentValues.put("taskResult", Integer.valueOf(paramDownloadNewChunkLogInfo.taskResult));
      paramContentValues.put("result", Byte.valueOf(paramDownloadNewChunkLogInfo.result));
    }
  }
  
  public static void a(String paramString)
  {
    if (!TextUtils.isEmpty(paramString)) {}
    try
    {
      SQLiteDatabase localSQLiteDatabase = b.a().getWritableDatabase();
      if (localSQLiteDatabase != null) {
        localSQLiteDatabase.delete("downloadChunkInfo", "taskId = ?", new String[] { paramString });
      }
      return;
    }
    catch (Exception paramString)
    {
      TMLog.e("DownloadChunkInfoTable", "exception: ", paramString);
      paramString.printStackTrace();
    }
  }
  
  /* Error */
  public static java.util.ArrayList b(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokestatic 177	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4: ifne +132 -> 136
    //   7: new 189	java/util/ArrayList
    //   10: dup
    //   11: invokespecial 190	java/util/ArrayList:<init>	()V
    //   14: astore 4
    //   16: invokestatic 22	com/tencent/tmdownloader/internal/b/a/b:a	()Lcom/tencent/tmdownloader/internal/b/a/c;
    //   19: invokevirtual 193	com/tencent/tmdownloader/internal/b/a/c:getReadableDatabase	()Landroid/database/sqlite/SQLiteDatabase;
    //   22: astore_2
    //   23: aload_2
    //   24: ifnull +68 -> 92
    //   27: aload_2
    //   28: ldc -61
    //   30: iconst_1
    //   31: anewarray 181	java/lang/String
    //   34: dup
    //   35: iconst_0
    //   36: aload_0
    //   37: aastore
    //   38: invokevirtual 199	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   41: astore_0
    //   42: aload_0
    //   43: ifnull +39 -> 82
    //   46: aload_0
    //   47: astore_2
    //   48: aload_0
    //   49: invokeinterface 203 1 0
    //   54: ifeq +28 -> 82
    //   57: aload_0
    //   58: astore_2
    //   59: aload 4
    //   61: aload_0
    //   62: invokestatic 205	com/tencent/tmdownloader/internal/b/c/e:a	(Landroid/database/Cursor;)Lcom/tencent/tmdownloader/internal/protocol/jce/DownloadNewChunkLogInfo;
    //   65: invokevirtual 209	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   68: pop
    //   69: aload_0
    //   70: astore_2
    //   71: aload_0
    //   72: invokeinterface 212 1 0
    //   77: istore_1
    //   78: iload_1
    //   79: ifne -22 -> 57
    //   82: aload_0
    //   83: ifnull +9 -> 92
    //   86: aload_0
    //   87: invokeinterface 215 1 0
    //   92: aload 4
    //   94: areturn
    //   95: astore_3
    //   96: aconst_null
    //   97: astore_0
    //   98: aload_0
    //   99: astore_2
    //   100: ldc 44
    //   102: ldc 46
    //   104: aload_3
    //   105: invokestatic 52	com/tencent/tmassistantbase/util/TMLog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   108: aload_0
    //   109: astore_2
    //   110: aload_3
    //   111: invokevirtual 55	java/lang/Exception:printStackTrace	()V
    //   114: aload_0
    //   115: ifnull -23 -> 92
    //   118: goto -32 -> 86
    //   121: astore_0
    //   122: aconst_null
    //   123: astore_2
    //   124: aload_2
    //   125: ifnull +9 -> 134
    //   128: aload_2
    //   129: invokeinterface 215 1 0
    //   134: aload_0
    //   135: athrow
    //   136: aconst_null
    //   137: areturn
    //   138: astore_0
    //   139: goto -15 -> 124
    //   142: astore_3
    //   143: goto -45 -> 98
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	146	0	paramString	String
    //   77	2	1	bool	boolean
    //   22	107	2	localObject	Object
    //   95	16	3	localException1	Exception
    //   142	1	3	localException2	Exception
    //   14	79	4	localArrayList	java.util.ArrayList
    // Exception table:
    //   from	to	target	type
    //   27	42	95	java/lang/Exception
    //   27	42	121	finally
    //   48	57	138	finally
    //   59	69	138	finally
    //   71	78	138	finally
    //   100	108	138	finally
    //   110	114	138	finally
    //   48	57	142	java/lang/Exception
    //   59	69	142	java/lang/Exception
    //   71	78	142	java/lang/Exception
  }
  
  public String a()
  {
    return "downloadChunkInfo";
  }
  
  public void a(SQLiteDatabase paramSQLiteDatabase1, SQLiteDatabase paramSQLiteDatabase2) {}
  
  public String[] a(int paramInt1, int paramInt2)
  {
    return null;
  }
  
  public String b()
  {
    return "CREATE TABLE if not exists downloadChunkInfo( _id INTEGER PRIMARY KEY AUTOINCREMENT, taskId TEXT, downUrl TEXT, jumpUrl TEXT, finalDownloadUrl TEXT, contentType TEXT, netType TEXT, down_Size INTEGER, costTime INTEGER, startTime INTEGER, endTime INTEGER, taskResult INTEGER, result INTEGER);";
  }
}
