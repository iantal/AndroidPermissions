package com.tencent.mapserialize;

import java.util.HashMap;

public class MapSerializer
{
  public MapSerializer() {}
  
  private static String parseKey(String paramString, Integer paramInteger)
  {
    if (!paramString.regionMatches(paramInteger.intValue(), "<K:", 0, "<K:".length())) {}
    int i;
    do
    {
      do
      {
        return null;
        paramInteger = Integer.valueOf(paramInteger.intValue() + "<K:".length());
      } while (paramString.charAt(paramInteger.intValue()) != 's');
      paramInteger = Integer.valueOf(paramInteger.intValue() + 2);
      i = paramString.indexOf("<V:", paramInteger.intValue());
    } while (i - paramInteger.intValue() <= 0);
    return paramString.substring(paramInteger.intValue(), i);
  }
  
  public static HashMap<String, ?> stringToMap(String paramString)
  {
    Object localObject = Integer.valueOf(0);
    String str = new String(paramString);
    HashMap localHashMap = new HashMap();
    paramString = (String)localObject;
    for (;;)
    {
      if (paramString.intValue() >= str.length() - 1) {}
      do
      {
        return localHashMap;
        localObject = parseKey(str, paramString);
      } while (localObject == null);
      paramString = Integer.valueOf(Integer.valueOf(paramString.intValue() + ("<K:s>".length() + ((String)localObject).length())).intValue() + "<V:".length());
      i = str.charAt(paramString.intValue());
      paramString = Integer.valueOf(paramString.intValue() + 2);
      switch (i)
      {
      default: 
        break;
      case 98: 
        i = paramString.intValue();
        if (str.charAt(paramString.intValue()) == 0) {}
        for (boolean bool = false;; bool = true)
        {
          localHashMap.put(localObject, Boolean.valueOf(bool));
          paramString = Integer.valueOf(i + 1);
          break;
        }
      case 99: 
        i = paramString.intValue();
        localHashMap.put(localObject, Integer.valueOf(str.charAt(paramString.intValue())));
        paramString = Integer.valueOf(i + 1);
      }
    }
    int i = str.indexOf("<", paramString.intValue());
    if (i == -1)
    {
      paramString = Integer.valueOf(Integer.parseInt(str.substring(paramString.intValue())));
      i = str.length() - 1;
    }
    for (;;)
    {
      localHashMap.put(localObject, paramString);
      paramString = Integer.valueOf(i);
      break;
      paramString = Integer.valueOf(Integer.parseInt(str.substring(paramString.intValue(), i)));
    }
    i = str.indexOf("<", paramString.intValue());
    if (i == -1)
    {
      paramString = str.substring(paramString.intValue());
      i = str.length() - 1;
    }
    for (;;)
    {
      localHashMap.put(localObject, paramString);
      paramString = Integer.valueOf(i);
      break;
      paramString = str.substring(paramString.intValue(), i);
    }
  }
}
