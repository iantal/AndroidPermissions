package com.tencent.bugly.proguard;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Parcel;
import android.os.Parcelable.Creator;
import android.os.Process;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import com.tencent.bugly.crashreport.common.strategy.b;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class a
{
  protected HashMap<String, HashMap<String, byte[]>> a = new HashMap();
  protected String b;
  h c;
  private HashMap<String, Object> d;
  
  a()
  {
    new HashMap();
    this.d = new HashMap();
    this.b = "GBK";
    this.c = new h();
  }
  
  public static M a(x paramX, n paramN)
  {
    boolean bool2 = true;
    if ((paramX == null) || (paramN == null))
    {
      u.b("enExp args == null", new Object[0]);
      return null;
    }
    M localM = new M();
    Object localObject1;
    Object localObject2;
    J localJ;
    switch (paramX.b)
    {
    default: 
      u.c("crash type error! %d", new Object[] { Integer.valueOf(paramX.b) });
      localM.b = paramX.r;
      localM.c = paramX.n;
      localM.d = paramX.o;
      localM.e = paramX.p;
      localM.g = paramX.q;
      localM.h = paramX.x;
      localM.i = paramX.c;
      localM.j = null;
      localM.l = paramX.m;
      localM.m = paramX.e;
      localM.f = paramX.z;
      localM.n = null;
      if ((paramX.i != null) && (paramX.i.size() > 0))
      {
        localM.o = new ArrayList();
        localObject1 = paramX.i.entrySet().iterator();
      }
      break;
    case 3: 
    case 0: 
    case 1: 
    case 2: 
    case 4: 
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (Map.Entry)((Iterator)localObject1).next();
        localJ = new J();
        localJ.a = ((o)((Map.Entry)localObject2).getValue()).a;
        localJ.b = ((o)((Map.Entry)localObject2).getValue()).c;
        localJ.c = ((o)((Map.Entry)localObject2).getValue()).b;
        localM.o.add(localJ);
        continue;
        if (paramX.j) {}
        for (localObject1 = "203";; localObject1 = "103")
        {
          localM.a = ((String)localObject1);
          break;
        }
        if (paramX.j) {}
        for (localObject1 = "200";; localObject1 = "100")
        {
          localM.a = ((String)localObject1);
          break;
        }
        if (paramX.j) {}
        for (localObject1 = "201";; localObject1 = "101")
        {
          localM.a = ((String)localObject1);
          break;
        }
        if (paramX.j) {}
        for (localObject1 = "202";; localObject1 = "102")
        {
          localM.a = ((String)localObject1);
          break;
        }
        if (paramX.j) {}
        for (localObject1 = "204";; localObject1 = "104")
        {
          localM.a = ((String)localObject1);
          break;
        }
      }
    }
    if ((paramX.h != null) && (paramX.h.size() > 0))
    {
      localM.p = new ArrayList();
      localObject1 = paramX.h.entrySet().iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (Map.Entry)((Iterator)localObject1).next();
        localJ = new J();
        localJ.a = ((o)((Map.Entry)localObject2).getValue()).a;
        localJ.b = ((o)((Map.Entry)localObject2).getValue()).c;
        localJ.c = ((o)((Map.Entry)localObject2).getValue()).b;
        localM.p.add(localJ);
      }
    }
    if (paramX.j)
    {
      localM.k = paramX.t;
      if ((paramX.s != null) && (paramX.s.length() > 0)) {
        if (localM.q == null) {
          localM.q = new ArrayList();
        }
      }
    }
    try
    {
      localM.q.add(new L((byte)1, "alltimes.txt", paramX.s.getBytes("utf-8")));
      i = localM.k;
      if (localM.q != null)
      {
        i = localM.q.size();
        u.a();
        if (paramX.w != null) {
          if (localM.q == null) {
            localM.q = new ArrayList();
          }
        }
      }
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException2)
    {
      try
      {
        localM.q.add(new L((byte)1, "log.txt", paramX.w.getBytes("utf-8")));
        localM.r = new HashMap();
        localM.r.put("A9", paramX.A);
        localM.r.put("A11", paramX.B);
        localM.r.put("A10", paramX.C);
        localM.r.put("A23", paramX.f);
        localM.r.put("A7", paramN.h());
        localM.r.put("A6", paramN.v());
        localM.r.put("A5", paramN.u());
        localM.r.put("A22", paramN.l());
        localM.r.put("A2", paramX.E);
        localM.r.put("A1", paramX.D);
        localM.r.put("A24", paramN.j());
        localM.r.put("A17", paramX.F);
        localM.r.put("A3", paramN.n());
        localM.r.put("A16", paramN.p());
        localM.r.put("A25", paramN.q());
        localM.r.put("A14", paramN.o());
        localM.r.put("A15", paramN.x());
        localM.r.put("A13", paramN.z());
        localM.r.put("A34", paramX.y);
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException2)
      {
        try
        {
          for (;;)
          {
            localM.r.put("A26", URLEncoder.encode(paramX.G, "utf-8"));
            if (paramX.b == 1)
            {
              localM.r.put("A27", paramX.I);
              localM.r.put("A28", paramX.H);
              localM.r.put("A29", paramX.k);
            }
            localM.r.put("A30", paramX.J);
            localM.r.put("A18", paramX.K);
            localObject1 = localM.r;
            localObject2 = new StringBuilder();
            if (paramX.L) {
              break;
            }
            bool1 = true;
            ((Map)localObject1).put("A36", bool1);
            localM.s = null;
            if ((paramX.M != null) && (paramX.M.size() > 0))
            {
              localM.s = paramX.M;
              u.a("setted message size %d", new Object[] { Integer.valueOf(localM.s.size()) });
            }
            localObject1 = paramX.n;
            paramN.a();
            long l = (paramX.r - paramX.K) / 1000L;
            bool1 = paramX.k;
            bool1 = paramX.L;
            bool1 = paramX.j;
            if (paramX.b != 1) {
              break label1815;
            }
            bool1 = bool2;
            int i = paramX.t;
            paramX = paramX.s;
            u.a();
            return localM;
            localUnsupportedEncodingException1 = localUnsupportedEncodingException1;
            localUnsupportedEncodingException1.printStackTrace();
            localM.q = null;
            continue;
            i = 0;
          }
          localUnsupportedEncodingException2 = localUnsupportedEncodingException2;
          localUnsupportedEncodingException2.printStackTrace();
          localM.q = null;
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException3)
        {
          for (;;)
          {
            localUnsupportedEncodingException3.printStackTrace();
            continue;
            boolean bool1 = false;
            continue;
            label1815:
            bool1 = false;
          }
        }
      }
    }
  }
  
  public static N a(List<x> paramList, n paramN)
  {
    if ((paramList == null) || (paramList.size() == 0) || (paramN == null))
    {
      u.b("enEXPPkg args == null!", new Object[0]);
      return null;
    }
    N localN = new N();
    localN.a = new ArrayList();
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      x localX = (x)paramList.next();
      localN.a.add(a(localX, paramN));
    }
    return localN;
  }
  
  /* Error */
  public static O a(int paramInt, byte[] paramArrayOfByte, n paramN, b paramB)
  {
    // Byte code:
    //   0: aload_2
    //   1: ifnull +7 -> 8
    //   4: aload_3
    //   5: ifnonnull +16 -> 21
    //   8: ldc_w 429
    //   11: iconst_0
    //   12: anewarray 4	java/lang/Object
    //   15: invokestatic 62	com/tencent/bugly/proguard/u:c	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   18: pop
    //   19: aconst_null
    //   20: areturn
    //   21: new 431	com/tencent/bugly/proguard/O
    //   24: dup
    //   25: invokespecial 432	com/tencent/bugly/proguard/O:<init>	()V
    //   28: astore 5
    //   30: aload_2
    //   31: monitorenter
    //   32: aload 5
    //   34: aload_2
    //   35: invokevirtual 435	com/tencent/bugly/proguard/n:c	()B
    //   38: putfield 437	com/tencent/bugly/proguard/O:a	I
    //   41: aload 5
    //   43: aload_2
    //   44: invokevirtual 439	com/tencent/bugly/proguard/n:d	()Ljava/lang/String;
    //   47: putfield 440	com/tencent/bugly/proguard/O:b	Ljava/lang/String;
    //   50: aload 5
    //   52: aload_2
    //   53: invokevirtual 442	com/tencent/bugly/proguard/n:f	()Ljava/lang/String;
    //   56: putfield 443	com/tencent/bugly/proguard/O:c	Ljava/lang/String;
    //   59: aload 5
    //   61: aload_2
    //   62: invokevirtual 445	com/tencent/bugly/proguard/n:e	()Ljava/lang/String;
    //   65: putfield 446	com/tencent/bugly/proguard/O:d	Ljava/lang/String;
    //   68: aload 5
    //   70: aload_2
    //   71: invokevirtual 448	com/tencent/bugly/proguard/n:y	()Ljava/lang/String;
    //   74: putfield 449	com/tencent/bugly/proguard/O:e	Ljava/lang/String;
    //   77: aload 5
    //   79: invokestatic 451	com/tencent/bugly/proguard/n:g	()Ljava/lang/String;
    //   82: putfield 452	com/tencent/bugly/proguard/O:f	Ljava/lang/String;
    //   85: aload 5
    //   87: iload_0
    //   88: putfield 454	com/tencent/bugly/proguard/O:g	I
    //   91: aload_1
    //   92: ifnonnull +128 -> 220
    //   95: ldc_w 456
    //   98: invokevirtual 459	java/lang/String:getBytes	()[B
    //   101: astore 4
    //   103: aload 5
    //   105: aload 4
    //   107: putfield 462	com/tencent/bugly/proguard/O:h	[B
    //   110: aload 5
    //   112: aload_2
    //   113: invokevirtual 464	com/tencent/bugly/proguard/n:i	()Ljava/lang/String;
    //   116: putfield 465	com/tencent/bugly/proguard/O:i	Ljava/lang/String;
    //   119: aload 5
    //   121: aload_2
    //   122: invokevirtual 313	com/tencent/bugly/proguard/n:j	()Ljava/lang/String;
    //   125: putfield 467	com/tencent/bugly/proguard/O:j	Ljava/lang/String;
    //   128: aload 5
    //   130: new 19	java/util/HashMap
    //   133: dup
    //   134: invokespecial 20	java/util/HashMap:<init>	()V
    //   137: putfield 469	com/tencent/bugly/proguard/O:k	Ljava/util/Map;
    //   140: aload 5
    //   142: aload_2
    //   143: invokevirtual 403	com/tencent/bugly/proguard/n:a	()Ljava/lang/String;
    //   146: putfield 470	com/tencent/bugly/proguard/O:l	Ljava/lang/String;
    //   149: aload 5
    //   151: getfield 470	com/tencent/bugly/proguard/O:l	Ljava/lang/String;
    //   154: astore 4
    //   156: invokestatic 236	com/tencent/bugly/proguard/u:a	()Z
    //   159: pop
    //   160: aload_2
    //   161: monitorexit
    //   162: aload_1
    //   163: ifnull +68 -> 231
    //   166: aload 5
    //   168: aload 5
    //   170: getfield 462	com/tencent/bugly/proguard/O:h	[B
    //   173: iconst_2
    //   174: iconst_1
    //   175: aload_3
    //   176: getfield 473	com/tencent/bugly/crashreport/common/strategy/b:i	Ljava/lang/String;
    //   179: invokestatic 476	com/tencent/bugly/proguard/a:a	([BIILjava/lang/String;)[B
    //   182: putfield 462	com/tencent/bugly/proguard/O:h	[B
    //   185: aload 5
    //   187: getfield 462	com/tencent/bugly/proguard/O:h	[B
    //   190: ifnonnull +41 -> 231
    //   193: ldc_w 478
    //   196: iconst_0
    //   197: anewarray 4	java/lang/Object
    //   200: invokestatic 62	com/tencent/bugly/proguard/u:c	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   203: pop
    //   204: aconst_null
    //   205: areturn
    //   206: astore_1
    //   207: aload_1
    //   208: invokestatic 481	com/tencent/bugly/proguard/u:b	(Ljava/lang/Throwable;)Z
    //   211: ifne -192 -> 19
    //   214: aload_1
    //   215: invokevirtual 482	java/lang/Throwable:printStackTrace	()V
    //   218: aconst_null
    //   219: areturn
    //   220: aload_1
    //   221: astore 4
    //   223: goto -120 -> 103
    //   226: astore_1
    //   227: aload_2
    //   228: monitorexit
    //   229: aload_1
    //   230: athrow
    //   231: aload 5
    //   233: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	234	0	paramInt	int
    //   0	234	1	paramArrayOfByte	byte[]
    //   0	234	2	paramN	n
    //   0	234	3	paramB	b
    //   101	121	4	localObject	Object
    //   28	204	5	localO	O
    // Exception table:
    //   from	to	target	type
    //   21	32	206	java/lang/Throwable
    //   166	204	206	java/lang/Throwable
    //   227	231	206	java/lang/Throwable
    //   32	91	226	finally
    //   95	103	226	finally
    //   103	162	226	finally
  }
  
  public static P a(byte[] paramArrayOfByte, b paramB)
  {
    if (paramArrayOfByte != null) {}
    for (;;)
    {
      try
      {
        Object localObject = new d();
        ((d)localObject).o();
        ((d)localObject).a("utf-8");
        ((d)localObject).a(paramArrayOfByte);
        paramArrayOfByte = ((d)localObject).b("detail", new P());
        if (!P.class.isInstance(paramArrayOfByte)) {
          break label153;
        }
        paramArrayOfByte = (P)P.class.cast(paramArrayOfByte);
        localObject = paramArrayOfByte;
        if (paramArrayOfByte != null)
        {
          localObject = paramArrayOfByte;
          if (paramArrayOfByte.c != null)
          {
            localObject = paramArrayOfByte;
            if (paramArrayOfByte.c.length > 0)
            {
              int i = paramArrayOfByte.c.length;
              u.a();
              paramArrayOfByte.c = b(paramArrayOfByte.c, 2, 1, paramB.a);
              localObject = paramArrayOfByte;
              if (paramArrayOfByte.c == null)
              {
                u.c("resp sbuffer error!", new Object[0]);
                localObject = null;
              }
            }
          }
        }
        return localObject;
      }
      catch (Throwable paramArrayOfByte)
      {
        if (!u.b(paramArrayOfByte)) {
          paramArrayOfByte.printStackTrace();
        }
      }
      return null;
      label153:
      paramArrayOfByte = null;
    }
  }
  
  public static <T> T a(byte[] paramArrayOfByte, Parcelable.Creator<T> paramCreator)
  {
    Parcel localParcel = Parcel.obtain();
    localParcel.unmarshall(paramArrayOfByte, 0, paramArrayOfByte.length);
    localParcel.setDataPosition(0);
    try
    {
      paramArrayOfByte = paramCreator.createFromParcel(localParcel);
      return paramArrayOfByte;
    }
    catch (Throwable paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
      return null;
    }
    finally
    {
      if (localParcel != null) {
        localParcel.recycle();
      }
    }
  }
  
  public static String a(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    try
    {
      paramContext = paramContext.getPackageName();
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      if (!u.a(paramContext)) {
        paramContext.printStackTrace();
      }
    }
    return "fail";
  }
  
  public static String a(Context paramContext, int paramInt)
  {
    paramContext = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses().iterator();
    while (paramContext.hasNext())
    {
      ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)paramContext.next();
      if (localRunningAppProcessInfo.pid == paramInt) {
        return localRunningAppProcessInfo.processName;
      }
    }
    return "unknown";
  }
  
  public static String a(Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return "";
    }
    try
    {
      StringWriter localStringWriter = new StringWriter();
      paramThrowable.printStackTrace(new PrintWriter(localStringWriter));
      paramThrowable = localStringWriter.getBuffer().toString();
      return paramThrowable;
    }
    catch (Throwable paramThrowable)
    {
      if (!u.a(paramThrowable)) {
        paramThrowable.printStackTrace();
      }
    }
    return "fail";
  }
  
  public static String a(Throwable paramThrowable, int paramInt)
  {
    if (paramThrowable.getMessage() == null) {
      return "";
    }
    if (paramThrowable.getMessage().length() <= 1000) {
      return paramThrowable.getMessage();
    }
    return paramThrowable.getMessage().substring(0, 1000) + "\n[Message over limit size:1000" + ", has been cutted!]";
  }
  
  public static String a(ArrayList<String> paramArrayList)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    String str1;
    if (i < paramArrayList.size())
    {
      String str2 = (String)paramArrayList.get(i);
      if ((str2.equals("java.lang.Integer")) || (str2.equals("int"))) {
        str1 = "int32";
      }
      for (;;)
      {
        paramArrayList.set(i, str1);
        i += 1;
        break;
        if ((str2.equals("java.lang.Boolean")) || (str2.equals("boolean")))
        {
          str1 = "bool";
        }
        else if ((str2.equals("java.lang.Byte")) || (str2.equals("byte")))
        {
          str1 = "char";
        }
        else if ((str2.equals("java.lang.Double")) || (str2.equals("double")))
        {
          str1 = "double";
        }
        else if ((str2.equals("java.lang.Float")) || (str2.equals("float")))
        {
          str1 = "float";
        }
        else if ((str2.equals("java.lang.Long")) || (str2.equals("long")))
        {
          str1 = "int64";
        }
        else if ((str2.equals("java.lang.Short")) || (str2.equals("short")))
        {
          str1 = "short";
        }
        else
        {
          if (str2.equals("java.lang.Character")) {
            throw new IllegalArgumentException("can not support java.lang.Character");
          }
          if (str2.equals("java.lang.String"))
          {
            str1 = "string";
          }
          else if (str2.equals("java.util.List"))
          {
            str1 = "list";
          }
          else
          {
            str1 = str2;
            if (str2.equals("java.util.Map")) {
              str1 = "map";
            }
          }
        }
      }
    }
    Collections.reverse(paramArrayList);
    i = 0;
    if (i < paramArrayList.size())
    {
      str1 = (String)paramArrayList.get(i);
      if (str1.equals("list"))
      {
        paramArrayList.set(i - 1, "<" + (String)paramArrayList.get(i - 1));
        paramArrayList.set(0, (String)paramArrayList.get(0) + ">");
      }
      for (;;)
      {
        i += 1;
        break;
        if (str1.equals("map"))
        {
          paramArrayList.set(i - 1, "<" + (String)paramArrayList.get(i - 1) + ",");
          paramArrayList.set(0, (String)paramArrayList.get(0) + ">");
        }
        else if (str1.equals("Array"))
        {
          paramArrayList.set(i - 1, "<" + (String)paramArrayList.get(i - 1));
          paramArrayList.set(0, (String)paramArrayList.get(0) + ">");
        }
      }
    }
    Collections.reverse(paramArrayList);
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext()) {
      localStringBuffer.append((String)paramArrayList.next());
    }
    return localStringBuffer.toString();
  }
  
  /* Error */
  public static ArrayList<String> a(String[] paramArrayOfString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: new 132	java/util/ArrayList
    //   5: dup
    //   6: invokespecial 133	java/util/ArrayList:<init>	()V
    //   9: astore 4
    //   11: invokestatic 705	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   14: aload_0
    //   15: invokevirtual 709	java/lang/Runtime:exec	([Ljava/lang/String;)Ljava/lang/Process;
    //   18: astore_0
    //   19: new 711	java/io/BufferedReader
    //   22: dup
    //   23: new 713	java/io/InputStreamReader
    //   26: dup
    //   27: aload_0
    //   28: invokevirtual 719	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   31: invokespecial 722	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   34: invokespecial 725	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   37: astore_1
    //   38: aload_1
    //   39: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   42: astore_2
    //   43: aload_2
    //   44: ifnull +56 -> 100
    //   47: aload 4
    //   49: aload_2
    //   50: invokevirtual 177	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   53: pop
    //   54: goto -16 -> 38
    //   57: astore 4
    //   59: aconst_null
    //   60: astore_0
    //   61: aload_0
    //   62: astore_3
    //   63: aload_1
    //   64: astore_2
    //   65: aload 4
    //   67: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   70: ifne +12 -> 82
    //   73: aload_0
    //   74: astore_3
    //   75: aload_1
    //   76: astore_2
    //   77: aload 4
    //   79: invokevirtual 482	java/lang/Throwable:printStackTrace	()V
    //   82: aload_1
    //   83: ifnull +7 -> 90
    //   86: aload_1
    //   87: invokevirtual 731	java/io/BufferedReader:close	()V
    //   90: aload_0
    //   91: ifnull +7 -> 98
    //   94: aload_0
    //   95: invokevirtual 731	java/io/BufferedReader:close	()V
    //   98: aconst_null
    //   99: areturn
    //   100: new 711	java/io/BufferedReader
    //   103: dup
    //   104: new 713	java/io/InputStreamReader
    //   107: dup
    //   108: aload_0
    //   109: invokevirtual 734	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   112: invokespecial 722	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   115: invokespecial 725	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   118: astore_0
    //   119: aload_0
    //   120: astore_3
    //   121: aload_1
    //   122: astore_2
    //   123: aload_0
    //   124: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   127: astore 5
    //   129: aload 5
    //   131: ifnull +23 -> 154
    //   134: aload_0
    //   135: astore_3
    //   136: aload_1
    //   137: astore_2
    //   138: aload 4
    //   140: aload 5
    //   142: invokevirtual 177	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   145: pop
    //   146: goto -27 -> 119
    //   149: astore 4
    //   151: goto -90 -> 61
    //   154: aload_1
    //   155: invokevirtual 731	java/io/BufferedReader:close	()V
    //   158: aload_0
    //   159: invokevirtual 731	java/io/BufferedReader:close	()V
    //   162: aload 4
    //   164: areturn
    //   165: astore_0
    //   166: aload_0
    //   167: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   170: aload 4
    //   172: areturn
    //   173: astore_1
    //   174: aload_1
    //   175: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   178: goto -20 -> 158
    //   181: astore_1
    //   182: aload_1
    //   183: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   186: goto -96 -> 90
    //   189: astore_0
    //   190: aload_0
    //   191: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   194: goto -96 -> 98
    //   197: astore_0
    //   198: aconst_null
    //   199: astore_1
    //   200: aload_1
    //   201: ifnull +7 -> 208
    //   204: aload_1
    //   205: invokevirtual 731	java/io/BufferedReader:close	()V
    //   208: aload_3
    //   209: ifnull +7 -> 216
    //   212: aload_3
    //   213: invokevirtual 731	java/io/BufferedReader:close	()V
    //   216: aload_0
    //   217: athrow
    //   218: astore_1
    //   219: aload_1
    //   220: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   223: goto -15 -> 208
    //   226: astore_1
    //   227: aload_1
    //   228: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   231: goto -15 -> 216
    //   234: astore_0
    //   235: goto -35 -> 200
    //   238: astore_0
    //   239: aload_2
    //   240: astore_1
    //   241: goto -41 -> 200
    //   244: astore 4
    //   246: aconst_null
    //   247: astore_0
    //   248: aconst_null
    //   249: astore_1
    //   250: goto -189 -> 61
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	253	0	paramArrayOfString	String[]
    //   37	118	1	localBufferedReader	java.io.BufferedReader
    //   173	2	1	localIOException1	java.io.IOException
    //   181	2	1	localIOException2	java.io.IOException
    //   199	6	1	localObject1	Object
    //   218	2	1	localIOException3	java.io.IOException
    //   226	2	1	localIOException4	java.io.IOException
    //   240	10	1	localObject2	Object
    //   42	198	2	localObject3	Object
    //   1	212	3	arrayOfString	String[]
    //   9	39	4	localArrayList	ArrayList
    //   57	82	4	localThrowable1	Throwable
    //   149	22	4	localThrowable2	Throwable
    //   244	1	4	localThrowable3	Throwable
    //   127	14	5	str	String
    // Exception table:
    //   from	to	target	type
    //   38	43	57	java/lang/Throwable
    //   47	54	57	java/lang/Throwable
    //   100	119	57	java/lang/Throwable
    //   123	129	149	java/lang/Throwable
    //   138	146	149	java/lang/Throwable
    //   158	162	165	java/io/IOException
    //   154	158	173	java/io/IOException
    //   86	90	181	java/io/IOException
    //   94	98	189	java/io/IOException
    //   11	38	197	finally
    //   204	208	218	java/io/IOException
    //   212	216	226	java/io/IOException
    //   38	43	234	finally
    //   47	54	234	finally
    //   100	119	234	finally
    //   65	73	238	finally
    //   77	82	238	finally
    //   123	129	238	finally
    //   138	146	238	finally
    //   11	38	244	java/lang/Throwable
  }
  
  public static Map<String, String> a(int paramInt, boolean paramBoolean)
  {
    HashMap localHashMap = new HashMap(12);
    Object localObject = Thread.getAllStackTraces();
    if (localObject == null) {
      return null;
    }
    Thread.currentThread().getId();
    StringBuilder localStringBuilder = new StringBuilder();
    localObject = ((Map)localObject).entrySet().iterator();
    while (((Iterator)localObject).hasNext())
    {
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
      localStringBuilder.setLength(0);
      if ((localEntry.getValue() != null) && (((StackTraceElement[])localEntry.getValue()).length != 0))
      {
        StackTraceElement[] arrayOfStackTraceElement = (StackTraceElement[])localEntry.getValue();
        int i = arrayOfStackTraceElement.length;
        paramInt = 0;
        for (;;)
        {
          StackTraceElement localStackTraceElement;
          if (paramInt < i)
          {
            localStackTraceElement = arrayOfStackTraceElement[paramInt];
            if (localStringBuilder.length() >= 20000) {
              localStringBuilder.append("\n[Stack over limit size :" + 20000 + " , has been cutted !]");
            }
          }
          else
          {
            localHashMap.put(((Thread)localEntry.getKey()).getName() + "(" + ((Thread)localEntry.getKey()).getId() + ")", localStringBuilder.toString());
            break;
          }
          localStringBuilder.append(localStackTraceElement.toString()).append("\n");
          paramInt += 1;
        }
      }
    }
    return localHashMap;
  }
  
  public static Map<String, o> a(Parcel paramParcel)
  {
    int i = 0;
    paramParcel = paramParcel.readBundle();
    if (paramParcel == null) {
      return null;
    }
    ArrayList localArrayList1 = paramParcel.getStringArrayList("pluginKeys");
    ArrayList localArrayList2 = paramParcel.getParcelableArrayList("pluginValues");
    if ((localArrayList1 != null) && (localArrayList2 != null) && (localArrayList1.size() == localArrayList2.size()))
    {
      paramParcel = new HashMap(localArrayList1.size());
      while (i < localArrayList1.size())
      {
        paramParcel.put(localArrayList1.get(i), o.class.cast(localArrayList2.get(i)));
        i += 1;
      }
    }
    for (;;)
    {
      return paramParcel;
      u.c("map plugin parcel error!", new Object[0]);
      paramParcel = null;
    }
  }
  
  public static void a(Parcel paramParcel, Map<String, o> paramMap)
  {
    if ((paramMap == null) || (paramMap == null) || (paramMap.size() <= 0))
    {
      paramParcel.writeBundle(null);
      return;
    }
    int i = paramMap.size();
    ArrayList localArrayList1 = new ArrayList(i);
    ArrayList localArrayList2 = new ArrayList(i);
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      localArrayList1.add(localEntry.getKey());
      localArrayList2.add(localEntry.getValue());
    }
    paramMap = new Bundle();
    paramMap.putStringArrayList("pluginKeys", localArrayList1);
    paramMap.putParcelableArrayList("pluginValues", localArrayList2);
    paramParcel.writeBundle(paramMap);
  }
  
  private void a(ArrayList<String> paramArrayList, Object paramObject)
  {
    if (paramObject.getClass().isArray())
    {
      if (!paramObject.getClass().getComponentType().toString().equals("byte")) {
        throw new IllegalArgumentException("only byte[] is supported");
      }
      if (Array.getLength(paramObject) > 0)
      {
        paramArrayList.add("java.util.List");
        a(paramArrayList, Array.get(paramObject, 0));
        return;
      }
      paramArrayList.add("Array");
      paramArrayList.add("?");
      return;
    }
    if ((paramObject instanceof Array)) {
      throw new IllegalArgumentException("can not support Array, please use List");
    }
    if ((paramObject instanceof List))
    {
      paramArrayList.add("java.util.List");
      paramObject = (List)paramObject;
      if (paramObject.size() > 0)
      {
        a(paramArrayList, paramObject.get(0));
        return;
      }
      paramArrayList.add("?");
      return;
    }
    if ((paramObject instanceof Map))
    {
      paramArrayList.add("java.util.Map");
      Object localObject = (Map)paramObject;
      if (((Map)localObject).size() > 0)
      {
        paramObject = ((Map)localObject).keySet().iterator().next();
        localObject = ((Map)localObject).get(paramObject);
        paramArrayList.add(paramObject.getClass().getName());
        a(paramArrayList, localObject);
        return;
      }
      paramArrayList.add("?");
      paramArrayList.add("?");
      return;
    }
    paramArrayList.add(paramObject.getClass().getName());
  }
  
  public static boolean a(Context paramContext, String paramString)
  {
    if ((paramContext == null) || (paramString == null) || (paramString.trim().length() <= 0)) {}
    for (;;)
    {
      return false;
      try
      {
        paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 4096).requestedPermissions;
        if (paramContext != null)
        {
          int j = paramContext.length;
          int i = 0;
          while (i < j)
          {
            boolean bool = paramString.equals(paramContext[i]);
            if (bool) {
              return true;
            }
            i += 1;
          }
          if (u.a(paramContext)) {}
        }
      }
      catch (Throwable paramContext) {}
    }
    paramContext.printStackTrace();
    return false;
  }
  
  public static byte[] a(long paramLong)
  {
    try
    {
      byte[] arrayOfByte = paramLong.getBytes("utf-8");
      return arrayOfByte;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      localUnsupportedEncodingException.printStackTrace();
    }
    return null;
  }
  
  public static byte[] a(O paramO)
  {
    try
    {
      d localD = new d();
      localD.o();
      localD.a("utf-8");
      localD.a(1);
      localD.c("RqdServer");
      localD.d("sync");
      localD.a("detail", paramO);
      paramO = localD.a();
      return paramO;
    }
    catch (Throwable paramO)
    {
      if (!u.b(paramO)) {
        paramO.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] a(j paramJ)
  {
    try
    {
      i localI = new i();
      localI.a("utf-8");
      paramJ.a(localI);
      paramJ = localI.b();
      return paramJ;
    }
    catch (Throwable paramJ)
    {
      if (!u.b(paramJ)) {
        paramJ.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] a(byte[] paramArrayOfByte, int paramInt)
  {
    if ((paramArrayOfByte == null) || (paramInt == -1)) {
      return paramArrayOfByte;
    }
    int i = paramArrayOfByte.length;
    u.a();
    try
    {
      D localD = C.a(paramInt);
      if (localD == null) {
        return null;
      }
      paramArrayOfByte = localD.a(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (Throwable paramArrayOfByte)
    {
      if (!u.a(paramArrayOfByte)) {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] a(byte[] paramArrayOfByte, int paramInt1, int paramInt2, String paramString)
  {
    if (paramArrayOfByte == null) {}
    do
    {
      return null;
      try
      {
        paramArrayOfByte = a(a(paramArrayOfByte, 2), 1, paramString);
        return paramArrayOfByte;
      }
      catch (Throwable paramArrayOfByte) {}
    } while (u.a(paramArrayOfByte));
    paramArrayOfByte.printStackTrace();
    return null;
  }
  
  public static byte[] a(byte[] paramArrayOfByte, int paramInt, String paramString)
  {
    if ((paramArrayOfByte == null) || (paramInt == -1)) {
      return paramArrayOfByte;
    }
    int i = paramArrayOfByte.length;
    u.a();
    if (paramInt == 1) {}
    Object localObject;
    try
    {
      localObject = new H();
    }
    catch (Throwable paramArrayOfByte)
    {
      if (u.a(paramArrayOfByte)) {
        break label64;
      }
      paramArrayOfByte.printStackTrace();
      label64:
      return null;
    }
    if (paramInt == 3) {
      localObject = new G();
    } else {
      localObject = null;
    }
    while (localObject != null)
    {
      ((I)localObject).a(paramString);
      paramArrayOfByte = ((I)localObject).b(paramArrayOfByte);
      return paramArrayOfByte;
    }
    return null;
  }
  
  public static R b(byte[] paramArrayOfByte)
  {
    try
    {
      R localR = new R();
      paramArrayOfByte = new h(paramArrayOfByte);
      paramArrayOfByte.a("utf-8");
      localR.a(paramArrayOfByte);
      return localR;
    }
    catch (Throwable paramArrayOfByte)
    {
      if (!u.b(paramArrayOfByte)) {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static String b()
  {
    try
    {
      String str = Build.MODEL;
      return str;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return "fail";
  }
  
  public static String b(Context paramContext)
  {
    try
    {
      String str = a(paramContext);
      paramContext = paramContext.getPackageManager().getPackageInfo(str, 0).versionName;
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      for (;;)
      {
        if (!u.a(paramContext)) {
          paramContext.printStackTrace();
        }
        paramContext = "fail";
      }
    }
    finally {}
  }
  
  /* Error */
  public static String b(Context paramContext, int paramInt)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: aload_0
    //   3: invokestatic 957	com/tencent/bugly/proguard/a:c	(Landroid/content/Context;)Z
    //   6: ifne +16 -> 22
    //   9: ldc_w 959
    //   12: iconst_0
    //   13: anewarray 4	java/lang/Object
    //   16: invokestatic 44	com/tencent/bugly/proguard/u:b	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   19: pop
    //   20: aload_2
    //   21: areturn
    //   22: new 247	java/lang/StringBuilder
    //   25: dup
    //   26: invokespecial 248	java/lang/StringBuilder:<init>	()V
    //   29: astore 4
    //   31: invokestatic 705	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   34: iconst_4
    //   35: anewarray 215	java/lang/String
    //   38: dup
    //   39: iconst_0
    //   40: ldc_w 961
    //   43: aastore
    //   44: dup
    //   45: iconst_1
    //   46: ldc_w 963
    //   49: aastore
    //   50: dup
    //   51: iconst_2
    //   52: ldc_w 965
    //   55: aastore
    //   56: dup
    //   57: iconst_3
    //   58: ldc_w 967
    //   61: aastore
    //   62: invokevirtual 709	java/lang/Runtime:exec	([Ljava/lang/String;)Ljava/lang/Process;
    //   65: astore_0
    //   66: new 711	java/io/BufferedReader
    //   69: dup
    //   70: new 713	java/io/InputStreamReader
    //   73: dup
    //   74: aload_0
    //   75: invokevirtual 719	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   78: invokespecial 722	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   81: invokespecial 725	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   84: astore_2
    //   85: aload_2
    //   86: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   89: astore_3
    //   90: aload_3
    //   91: ifnull +129 -> 220
    //   94: aload 4
    //   96: aload_3
    //   97: invokevirtual 279	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   100: ldc_w 781
    //   103: invokevirtual 279	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   106: pop
    //   107: aload 4
    //   109: invokevirtual 759	java/lang/StringBuilder:length	()I
    //   112: sipush 20000
    //   115: if_icmple -30 -> 85
    //   118: aload 4
    //   120: iconst_0
    //   121: aload 4
    //   123: invokevirtual 759	java/lang/StringBuilder:length	()I
    //   126: sipush 20000
    //   129: isub
    //   130: invokevirtual 971	java/lang/StringBuilder:delete	(II)Ljava/lang/StringBuilder;
    //   133: pop
    //   134: goto -49 -> 85
    //   137: astore_2
    //   138: aload_2
    //   139: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   142: ifne +7 -> 149
    //   145: aload_2
    //   146: invokevirtual 482	java/lang/Throwable:printStackTrace	()V
    //   149: aload 4
    //   151: new 247	java/lang/StringBuilder
    //   154: dup
    //   155: ldc_w 973
    //   158: invokespecial 685	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   161: aload_2
    //   162: invokevirtual 974	java/lang/Throwable:toString	()Ljava/lang/String;
    //   165: invokevirtual 279	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   168: ldc_w 976
    //   171: invokevirtual 279	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   174: invokevirtual 259	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   177: invokevirtual 279	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   180: invokevirtual 259	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   183: astore_3
    //   184: aload_3
    //   185: astore_2
    //   186: aload_0
    //   187: ifnull -167 -> 20
    //   190: aload_0
    //   191: invokevirtual 980	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   194: invokevirtual 983	java/io/OutputStream:close	()V
    //   197: aload_0
    //   198: invokevirtual 719	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   201: invokevirtual 986	java/io/InputStream:close	()V
    //   204: aload_0
    //   205: invokevirtual 734	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   208: invokevirtual 986	java/io/InputStream:close	()V
    //   211: aload_3
    //   212: areturn
    //   213: astore_0
    //   214: aload_0
    //   215: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   218: aload_3
    //   219: areturn
    //   220: aload 4
    //   222: invokevirtual 259	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   225: astore_3
    //   226: aload_3
    //   227: astore_2
    //   228: aload_0
    //   229: ifnull -209 -> 20
    //   232: aload_0
    //   233: invokevirtual 980	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   236: invokevirtual 983	java/io/OutputStream:close	()V
    //   239: aload_0
    //   240: invokevirtual 719	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   243: invokevirtual 986	java/io/InputStream:close	()V
    //   246: aload_0
    //   247: invokevirtual 734	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   250: invokevirtual 986	java/io/InputStream:close	()V
    //   253: aload_3
    //   254: areturn
    //   255: astore_0
    //   256: aload_0
    //   257: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   260: aload_3
    //   261: areturn
    //   262: astore_2
    //   263: aload_2
    //   264: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   267: goto -28 -> 239
    //   270: astore_2
    //   271: aload_2
    //   272: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   275: goto -29 -> 246
    //   278: astore_2
    //   279: aload_2
    //   280: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   283: goto -86 -> 197
    //   286: astore_2
    //   287: aload_2
    //   288: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   291: goto -87 -> 204
    //   294: astore_2
    //   295: aconst_null
    //   296: astore_0
    //   297: aload_0
    //   298: ifnull +24 -> 322
    //   301: aload_0
    //   302: invokevirtual 980	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   305: invokevirtual 983	java/io/OutputStream:close	()V
    //   308: aload_0
    //   309: invokevirtual 719	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   312: invokevirtual 986	java/io/InputStream:close	()V
    //   315: aload_0
    //   316: invokevirtual 734	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   319: invokevirtual 986	java/io/InputStream:close	()V
    //   322: aload_2
    //   323: athrow
    //   324: astore_3
    //   325: aload_3
    //   326: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   329: goto -21 -> 308
    //   332: astore_3
    //   333: aload_3
    //   334: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   337: goto -22 -> 315
    //   340: astore_0
    //   341: aload_0
    //   342: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   345: goto -23 -> 322
    //   348: astore_2
    //   349: goto -52 -> 297
    //   352: astore_2
    //   353: goto -56 -> 297
    //   356: astore_2
    //   357: aconst_null
    //   358: astore_0
    //   359: goto -221 -> 138
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	362	0	paramContext	Context
    //   0	362	1	paramInt	int
    //   1	85	2	localObject1	Object
    //   137	25	2	localThrowable1	Throwable
    //   185	43	2	localObject2	Object
    //   262	2	2	localIOException1	java.io.IOException
    //   270	2	2	localIOException2	java.io.IOException
    //   278	2	2	localIOException3	java.io.IOException
    //   286	2	2	localIOException4	java.io.IOException
    //   294	29	2	localObject3	Object
    //   348	1	2	localObject4	Object
    //   352	1	2	localObject5	Object
    //   356	1	2	localThrowable2	Throwable
    //   89	172	3	str	String
    //   324	2	3	localIOException5	java.io.IOException
    //   332	2	3	localIOException6	java.io.IOException
    //   29	192	4	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   66	85	137	java/lang/Throwable
    //   85	90	137	java/lang/Throwable
    //   94	134	137	java/lang/Throwable
    //   220	226	137	java/lang/Throwable
    //   204	211	213	java/io/IOException
    //   246	253	255	java/io/IOException
    //   232	239	262	java/io/IOException
    //   239	246	270	java/io/IOException
    //   190	197	278	java/io/IOException
    //   197	204	286	java/io/IOException
    //   31	66	294	finally
    //   301	308	324	java/io/IOException
    //   308	315	332	java/io/IOException
    //   315	322	340	java/io/IOException
    //   66	85	348	finally
    //   85	90	348	finally
    //   94	134	348	finally
    //   220	226	348	finally
    //   138	149	352	finally
    //   149	184	352	finally
    //   31	66	356	java/lang/Throwable
  }
  
  public static String b(String paramString)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {
      return "";
    }
    paramString = a(new String[] { "/system/bin/sh", "-c", "getprop " + paramString });
    if ((paramString != null) && (paramString.size() > 0)) {
      return (String)paramString.get(0);
    }
    return "fail";
  }
  
  public static String b(Throwable paramThrowable, int paramInt)
  {
    if (paramThrowable == null) {
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    if (paramThrowable.getStackTrace() != null)
    {
      paramThrowable = paramThrowable.getStackTrace();
      int i = paramThrowable.length;
      paramInt = 0;
      while (paramInt < i)
      {
        Object localObject = paramThrowable[paramInt];
        if (localStringBuilder.length() >= 20000)
        {
          localStringBuilder.append("\n[Stack over limit size :" + 20000 + " , has been cutted !]");
          return localStringBuilder.toString();
        }
        localStringBuilder.append(localObject.toString()).append("\n");
        paramInt += 1;
      }
    }
    return localStringBuilder.toString();
  }
  
  public static Map<String, String> b(Parcel paramParcel)
  {
    int i = 0;
    paramParcel = paramParcel.readBundle();
    if (paramParcel == null) {
      return null;
    }
    ArrayList localArrayList1 = paramParcel.getStringArrayList("keys");
    ArrayList localArrayList2 = paramParcel.getStringArrayList("values");
    if ((localArrayList1 != null) && (localArrayList2 != null) && (localArrayList1.size() == localArrayList2.size()))
    {
      paramParcel = new HashMap(localArrayList1.size());
      while (i < localArrayList1.size())
      {
        paramParcel.put(localArrayList1.get(i), localArrayList2.get(i));
        i += 1;
      }
    }
    for (;;)
    {
      return paramParcel;
      u.c("map parcel error!", new Object[0]);
      paramParcel = null;
    }
  }
  
  public static void b(Parcel paramParcel, Map<String, String> paramMap)
  {
    if ((paramMap == null) || (paramMap == null) || (paramMap.size() <= 0))
    {
      paramParcel.writeBundle(null);
      return;
    }
    int i = paramMap.size();
    ArrayList localArrayList1 = new ArrayList(i);
    ArrayList localArrayList2 = new ArrayList(i);
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      localArrayList1.add(localEntry.getKey());
      localArrayList2.add(localEntry.getValue());
    }
    paramMap = new Bundle();
    paramMap.putStringArrayList("keys", localArrayList1);
    paramMap.putStringArrayList("values", localArrayList2);
    paramParcel.writeBundle(paramMap);
  }
  
  public static byte[] b(byte[] paramArrayOfByte, int paramInt)
  {
    if ((paramArrayOfByte == null) || (paramInt == -1)) {
      return paramArrayOfByte;
    }
    int i = paramArrayOfByte.length;
    u.a();
    try
    {
      D localD = C.a(paramInt);
      if (localD == null) {
        return null;
      }
      paramArrayOfByte = localD.b(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (Throwable paramArrayOfByte)
    {
      if (!u.a(paramArrayOfByte)) {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] b(byte[] paramArrayOfByte, int paramInt1, int paramInt2, String paramString)
  {
    try
    {
      paramArrayOfByte = b(b(paramArrayOfByte, 1, paramString), 2);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      if (!u.a(paramArrayOfByte)) {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static byte[] b(byte[] paramArrayOfByte, int paramInt, String paramString)
  {
    if ((paramArrayOfByte == null) || (paramInt == -1)) {
      return paramArrayOfByte;
    }
    if (paramInt == 1) {}
    Object localObject;
    try
    {
      localObject = new H();
    }
    catch (Throwable paramArrayOfByte)
    {
      if (u.a(paramArrayOfByte)) {
        break label55;
      }
      paramArrayOfByte.printStackTrace();
      label55:
      u.b("encrytype %d %s", new Object[] { Integer.valueOf(paramInt), paramString });
      return null;
    }
    if (paramInt == 3) {
      localObject = new G();
    } else {
      localObject = null;
    }
    while (localObject != null)
    {
      ((I)localObject).a(paramString);
      paramArrayOfByte = ((I)localObject).a(paramArrayOfByte);
      return paramArrayOfByte;
    }
    return null;
  }
  
  public static String c()
  {
    try
    {
      String str = Build.VERSION.RELEASE;
      return str;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return "fail";
  }
  
  public static String c(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length == 0)) {
      return "NULL";
    }
    try
    {
      Object localObject = MessageDigest.getInstance("SHA-1");
      ((MessageDigest)localObject).update(paramArrayOfByte);
      paramArrayOfByte = ((MessageDigest)localObject).digest();
      if (paramArrayOfByte == null) {
        return "";
      }
      localObject = new StringBuffer();
      int i = 0;
      while (i < paramArrayOfByte.length)
      {
        String str = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
        if (str.length() == 1) {
          ((StringBuffer)localObject).append("0");
        }
        ((StringBuffer)localObject).append(str);
        i += 1;
      }
      paramArrayOfByte = ((StringBuffer)localObject).toString().toUpperCase();
      return paramArrayOfByte;
    }
    catch (NoSuchAlgorithmException paramArrayOfByte)
    {
      if (!u.a(paramArrayOfByte)) {
        paramArrayOfByte.printStackTrace();
      }
    }
    return null;
  }
  
  public static boolean c(Context paramContext)
  {
    try
    {
      boolean bool = a(paramContext, "android.permission.READ_LOGS");
      return bool;
    }
    finally
    {
      paramContext = finally;
      throw paramContext;
    }
  }
  
  public static int d()
  {
    try
    {
      int i = Build.VERSION.SDK_INT;
      return i;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return -1;
  }
  
  public static long d(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) && (paramArrayOfByte.length == 0)) {
      return -1L;
    }
    try
    {
      long l = Long.parseLong(new String(paramArrayOfByte, "utf-8"));
      return l;
    }
    catch (UnsupportedEncodingException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return -1L;
  }
  
  public static Boolean d(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    for (;;)
    {
      try
      {
        paramContext = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses();
        if ((paramContext == null) || (paramContext.size() == 0)) {
          return Boolean.valueOf(false);
        }
        int i = Process.myPid();
        paramContext = paramContext.iterator();
        if (paramContext.hasNext())
        {
          ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)paramContext.next();
          if (localRunningAppProcessInfo.pid != i) {
            continue;
          }
          if (localRunningAppProcessInfo.importance == 100)
          {
            bool = true;
            return Boolean.valueOf(bool);
          }
        }
        else
        {
          return Boolean.valueOf(false);
        }
      }
      catch (Throwable paramContext)
      {
        if (!u.a(paramContext)) {
          paramContext.printStackTrace();
        }
        return null;
      }
      boolean bool = false;
    }
  }
  
  public static String e()
  {
    try
    {
      String str = System.getProperty("os.arch");
      str = str;
      return str;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return "fail";
  }
  
  public static String e(Context paramContext)
  {
    try
    {
      paramContext = a(paramContext, Process.myPid());
      return paramContext;
    }
    catch (Throwable paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static long f()
  {
    long l1 = -1L;
    try
    {
      StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
      long l2 = localStatFs.getBlockSize();
      int i = localStatFs.getBlockCount();
      l1 = i * l2;
    }
    catch (Throwable localThrowable)
    {
      while (u.a(localThrowable)) {}
      localThrowable.printStackTrace();
    }
    return l1;
    return -1L;
  }
  
  public static String f(Context paramContext)
  {
    Object localObject = "fail";
    if (paramContext == null) {
      paramContext = "fail";
    }
    do
    {
      return paramContext;
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
        if (paramContext == null) {
          return "null";
        }
        localObject = paramContext;
        paramContext = paramContext.toLowerCase();
        return paramContext;
      }
      catch (Throwable localThrowable)
      {
        paramContext = (Context)localObject;
      }
    } while (u.a(localThrowable));
    localThrowable.printStackTrace();
    return localObject;
  }
  
  public static long g()
  {
    long l1 = -1L;
    try
    {
      StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
      long l2 = localStatFs.getBlockSize();
      int i = localStatFs.getAvailableBlocks();
      l1 = i * l2;
    }
    catch (Throwable localThrowable)
    {
      while (u.a(localThrowable)) {}
      localThrowable.printStackTrace();
    }
    return l1;
    return -1L;
  }
  
  public static String g(Context paramContext)
  {
    Object localObject = "fail";
    if (paramContext == null) {
      paramContext = "fail";
    }
    do
    {
      return paramContext;
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
        if (paramContext == null) {
          return "null";
        }
        localObject = paramContext;
        paramContext = paramContext.toLowerCase();
        return paramContext;
      }
      catch (Throwable localThrowable)
      {
        paramContext = (Context)localObject;
      }
    } while (u.a(localThrowable));
    localThrowable.printStackTrace();
    return localObject;
  }
  
  /* Error */
  public static long h()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: new 1134	java/io/FileReader
    //   6: dup
    //   7: ldc_w 1136
    //   10: invokespecial 1137	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   13: astore 4
    //   15: new 711	java/io/BufferedReader
    //   18: dup
    //   19: aload 4
    //   21: sipush 2048
    //   24: invokespecial 1140	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   27: astore_3
    //   28: aload_3
    //   29: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   32: ldc_w 1142
    //   35: iconst_2
    //   36: invokevirtual 1146	java/lang/String:split	(Ljava/lang/String;I)[Ljava/lang/String;
    //   39: iconst_1
    //   40: aaload
    //   41: invokevirtual 1126	java/lang/String:toLowerCase	()Ljava/lang/String;
    //   44: ldc_w 1148
    //   47: ldc_w 456
    //   50: invokevirtual 1152	java/lang/String:replace	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   53: invokevirtual 860	java/lang/String:trim	()Ljava/lang/String;
    //   56: invokestatic 1071	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   59: lstore_0
    //   60: lload_0
    //   61: ldc2_w 404
    //   64: lmul
    //   65: lstore_0
    //   66: aload_3
    //   67: invokevirtual 731	java/io/BufferedReader:close	()V
    //   70: aload 4
    //   72: invokevirtual 1153	java/io/FileReader:close	()V
    //   75: lload_0
    //   76: lreturn
    //   77: astore_2
    //   78: aload_2
    //   79: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   82: ifne -12 -> 70
    //   85: aload_2
    //   86: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   89: goto -19 -> 70
    //   92: astore_2
    //   93: aload_2
    //   94: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   97: ifne -22 -> 75
    //   100: aload_2
    //   101: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   104: lload_0
    //   105: lreturn
    //   106: astore 4
    //   108: aconst_null
    //   109: astore_2
    //   110: aload 5
    //   112: astore_3
    //   113: aload 4
    //   115: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   118: ifne +8 -> 126
    //   121: aload 4
    //   123: invokevirtual 482	java/lang/Throwable:printStackTrace	()V
    //   126: aload_3
    //   127: ifnull +7 -> 134
    //   130: aload_3
    //   131: invokevirtual 731	java/io/BufferedReader:close	()V
    //   134: aload_2
    //   135: ifnull +7 -> 142
    //   138: aload_2
    //   139: invokevirtual 1153	java/io/FileReader:close	()V
    //   142: ldc2_w 1154
    //   145: lreturn
    //   146: astore_3
    //   147: aload_3
    //   148: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   151: ifne -17 -> 134
    //   154: aload_3
    //   155: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   158: goto -24 -> 134
    //   161: astore_2
    //   162: aload_2
    //   163: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   166: ifne -24 -> 142
    //   169: aload_2
    //   170: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   173: goto -31 -> 142
    //   176: astore_2
    //   177: aconst_null
    //   178: astore_3
    //   179: aconst_null
    //   180: astore 4
    //   182: aload_3
    //   183: ifnull +7 -> 190
    //   186: aload_3
    //   187: invokevirtual 731	java/io/BufferedReader:close	()V
    //   190: aload 4
    //   192: ifnull +8 -> 200
    //   195: aload 4
    //   197: invokevirtual 1153	java/io/FileReader:close	()V
    //   200: aload_2
    //   201: athrow
    //   202: astore_3
    //   203: aload_3
    //   204: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   207: ifne -17 -> 190
    //   210: aload_3
    //   211: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   214: goto -24 -> 190
    //   217: astore_3
    //   218: aload_3
    //   219: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   222: ifne -22 -> 200
    //   225: aload_3
    //   226: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   229: goto -29 -> 200
    //   232: astore_2
    //   233: aconst_null
    //   234: astore_3
    //   235: goto -53 -> 182
    //   238: astore_2
    //   239: goto -57 -> 182
    //   242: astore 5
    //   244: aload_2
    //   245: astore 4
    //   247: aload 5
    //   249: astore_2
    //   250: goto -68 -> 182
    //   253: astore_3
    //   254: aload 4
    //   256: astore_2
    //   257: aload_3
    //   258: astore 4
    //   260: aload 5
    //   262: astore_3
    //   263: goto -150 -> 113
    //   266: astore 5
    //   268: aload 4
    //   270: astore_2
    //   271: aload 5
    //   273: astore 4
    //   275: goto -162 -> 113
    // Local variable table:
    //   start	length	slot	name	signature
    //   59	46	0	l	long
    //   77	9	2	localIOException1	java.io.IOException
    //   92	9	2	localIOException2	java.io.IOException
    //   109	30	2	localObject1	Object
    //   161	9	2	localIOException3	java.io.IOException
    //   176	25	2	localObject2	Object
    //   232	1	2	localObject3	Object
    //   238	7	2	localObject4	Object
    //   249	22	2	localObject5	Object
    //   27	104	3	localObject6	Object
    //   146	9	3	localIOException4	java.io.IOException
    //   178	9	3	localObject7	Object
    //   202	9	3	localIOException5	java.io.IOException
    //   217	9	3	localIOException6	java.io.IOException
    //   234	1	3	localObject8	Object
    //   253	5	3	localThrowable1	Throwable
    //   262	1	3	localObject9	Object
    //   13	58	4	localFileReader	java.io.FileReader
    //   106	16	4	localThrowable2	Throwable
    //   180	94	4	localObject10	Object
    //   1	110	5	localObject11	Object
    //   242	19	5	localObject12	Object
    //   266	6	5	localThrowable3	Throwable
    // Exception table:
    //   from	to	target	type
    //   66	70	77	java/io/IOException
    //   70	75	92	java/io/IOException
    //   3	15	106	java/lang/Throwable
    //   130	134	146	java/io/IOException
    //   138	142	161	java/io/IOException
    //   3	15	176	finally
    //   186	190	202	java/io/IOException
    //   195	200	217	java/io/IOException
    //   15	28	232	finally
    //   28	60	238	finally
    //   113	126	242	finally
    //   15	28	253	java/lang/Throwable
    //   28	60	266	java/lang/Throwable
  }
  
  /* Error */
  public static String h(Context paramContext)
  {
    // Byte code:
    //   0: ldc_w 553
    //   3: astore_1
    //   4: aload_0
    //   5: ifnonnull +5 -> 10
    //   8: aload_1
    //   9: areturn
    //   10: aload_0
    //   11: invokevirtual 1159	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
    //   14: ldc_w 1161
    //   17: invokestatic 1167	android/provider/Settings$Secure:getString	(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;
    //   20: astore_0
    //   21: aload_0
    //   22: ifnonnull +7 -> 29
    //   25: ldc_w 1123
    //   28: areturn
    //   29: aload_0
    //   30: invokevirtual 1126	java/lang/String:toLowerCase	()Ljava/lang/String;
    //   33: astore_1
    //   34: aload_1
    //   35: areturn
    //   36: astore_2
    //   37: aload_1
    //   38: astore_0
    //   39: aload_0
    //   40: astore_1
    //   41: aload_2
    //   42: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   45: ifne -37 -> 8
    //   48: aload_2
    //   49: invokevirtual 482	java/lang/Throwable:printStackTrace	()V
    //   52: aload_0
    //   53: areturn
    //   54: astore_2
    //   55: goto -16 -> 39
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	58	0	paramContext	Context
    //   3	38	1	localObject	Object
    //   36	13	2	localThrowable1	Throwable
    //   54	1	2	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   10	21	36	java/lang/Throwable
    //   29	34	54	java/lang/Throwable
  }
  
  /* Error */
  public static long i()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 9
    //   3: new 1134	java/io/FileReader
    //   6: dup
    //   7: ldc_w 1136
    //   10: invokespecial 1137	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   13: astore 8
    //   15: new 711	java/io/BufferedReader
    //   18: dup
    //   19: aload 8
    //   21: sipush 2048
    //   24: invokespecial 1140	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   27: astore 7
    //   29: aload 7
    //   31: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   34: pop
    //   35: aload 7
    //   37: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   40: ldc_w 1142
    //   43: iconst_2
    //   44: invokevirtual 1146	java/lang/String:split	(Ljava/lang/String;I)[Ljava/lang/String;
    //   47: iconst_1
    //   48: aaload
    //   49: invokevirtual 1126	java/lang/String:toLowerCase	()Ljava/lang/String;
    //   52: ldc_w 1148
    //   55: ldc_w 456
    //   58: invokevirtual 1152	java/lang/String:replace	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   61: invokevirtual 860	java/lang/String:trim	()Ljava/lang/String;
    //   64: invokestatic 1071	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   67: lstore_0
    //   68: aload 7
    //   70: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   73: ldc_w 1142
    //   76: iconst_2
    //   77: invokevirtual 1146	java/lang/String:split	(Ljava/lang/String;I)[Ljava/lang/String;
    //   80: iconst_1
    //   81: aaload
    //   82: invokevirtual 1126	java/lang/String:toLowerCase	()Ljava/lang/String;
    //   85: ldc_w 1148
    //   88: ldc_w 456
    //   91: invokevirtual 1152	java/lang/String:replace	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   94: invokevirtual 860	java/lang/String:trim	()Ljava/lang/String;
    //   97: invokestatic 1071	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   100: lstore_2
    //   101: aload 7
    //   103: invokevirtual 728	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   106: ldc_w 1142
    //   109: iconst_2
    //   110: invokevirtual 1146	java/lang/String:split	(Ljava/lang/String;I)[Ljava/lang/String;
    //   113: iconst_1
    //   114: aaload
    //   115: invokevirtual 1126	java/lang/String:toLowerCase	()Ljava/lang/String;
    //   118: ldc_w 1148
    //   121: ldc_w 456
    //   124: invokevirtual 1152	java/lang/String:replace	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   127: invokevirtual 860	java/lang/String:trim	()Ljava/lang/String;
    //   130: invokestatic 1071	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   133: lstore 4
    //   135: lload_0
    //   136: ldc2_w 404
    //   139: lmul
    //   140: lload_2
    //   141: ldc2_w 404
    //   144: lmul
    //   145: ladd
    //   146: lload 4
    //   148: ldc2_w 404
    //   151: lmul
    //   152: ladd
    //   153: lstore_0
    //   154: aload 7
    //   156: invokevirtual 731	java/io/BufferedReader:close	()V
    //   159: aload 8
    //   161: invokevirtual 1153	java/io/FileReader:close	()V
    //   164: lload_0
    //   165: lreturn
    //   166: astore 6
    //   168: aload 6
    //   170: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   173: ifne -14 -> 159
    //   176: aload 6
    //   178: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   181: goto -22 -> 159
    //   184: astore 6
    //   186: aload 6
    //   188: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   191: ifne -27 -> 164
    //   194: aload 6
    //   196: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   199: lload_0
    //   200: lreturn
    //   201: astore 8
    //   203: aconst_null
    //   204: astore 6
    //   206: aload 9
    //   208: astore 7
    //   210: aload 8
    //   212: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   215: ifne +8 -> 223
    //   218: aload 8
    //   220: invokevirtual 482	java/lang/Throwable:printStackTrace	()V
    //   223: aload 7
    //   225: ifnull +8 -> 233
    //   228: aload 7
    //   230: invokevirtual 731	java/io/BufferedReader:close	()V
    //   233: aload 6
    //   235: ifnull +8 -> 243
    //   238: aload 6
    //   240: invokevirtual 1153	java/io/FileReader:close	()V
    //   243: ldc2_w 1154
    //   246: lreturn
    //   247: astore 7
    //   249: aload 7
    //   251: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   254: ifne -21 -> 233
    //   257: aload 7
    //   259: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   262: goto -29 -> 233
    //   265: astore 6
    //   267: aload 6
    //   269: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   272: ifne -29 -> 243
    //   275: aload 6
    //   277: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   280: goto -37 -> 243
    //   283: astore 6
    //   285: aconst_null
    //   286: astore 7
    //   288: aconst_null
    //   289: astore 8
    //   291: aload 7
    //   293: ifnull +8 -> 301
    //   296: aload 7
    //   298: invokevirtual 731	java/io/BufferedReader:close	()V
    //   301: aload 8
    //   303: ifnull +8 -> 311
    //   306: aload 8
    //   308: invokevirtual 1153	java/io/FileReader:close	()V
    //   311: aload 6
    //   313: athrow
    //   314: astore 7
    //   316: aload 7
    //   318: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   321: ifne -20 -> 301
    //   324: aload 7
    //   326: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   329: goto -28 -> 301
    //   332: astore 7
    //   334: aload 7
    //   336: invokestatic 551	com/tencent/bugly/proguard/u:a	(Ljava/lang/Throwable;)Z
    //   339: ifne -28 -> 311
    //   342: aload 7
    //   344: invokevirtual 735	java/io/IOException:printStackTrace	()V
    //   347: goto -36 -> 311
    //   350: astore 6
    //   352: aconst_null
    //   353: astore 7
    //   355: goto -64 -> 291
    //   358: astore 6
    //   360: goto -69 -> 291
    //   363: astore 9
    //   365: aload 6
    //   367: astore 8
    //   369: aload 9
    //   371: astore 6
    //   373: goto -82 -> 291
    //   376: astore 7
    //   378: aload 8
    //   380: astore 6
    //   382: aload 7
    //   384: astore 8
    //   386: aload 9
    //   388: astore 7
    //   390: goto -180 -> 210
    //   393: astore 9
    //   395: aload 8
    //   397: astore 6
    //   399: aload 9
    //   401: astore 8
    //   403: goto -193 -> 210
    // Local variable table:
    //   start	length	slot	name	signature
    //   67	133	0	l1	long
    //   100	41	2	l2	long
    //   133	14	4	l3	long
    //   166	11	6	localIOException1	java.io.IOException
    //   184	11	6	localIOException2	java.io.IOException
    //   204	35	6	localObject1	Object
    //   265	11	6	localIOException3	java.io.IOException
    //   283	29	6	localObject2	Object
    //   350	1	6	localObject3	Object
    //   358	8	6	localObject4	Object
    //   371	27	6	localObject5	Object
    //   27	202	7	localObject6	Object
    //   247	11	7	localIOException4	java.io.IOException
    //   286	11	7	localObject7	Object
    //   314	11	7	localIOException5	java.io.IOException
    //   332	11	7	localIOException6	java.io.IOException
    //   353	1	7	localObject8	Object
    //   376	7	7	localThrowable1	Throwable
    //   388	1	7	localObject9	Object
    //   13	147	8	localFileReader	java.io.FileReader
    //   201	18	8	localThrowable2	Throwable
    //   289	113	8	localObject10	Object
    //   1	206	9	localObject11	Object
    //   363	24	9	localObject12	Object
    //   393	7	9	localThrowable3	Throwable
    // Exception table:
    //   from	to	target	type
    //   154	159	166	java/io/IOException
    //   159	164	184	java/io/IOException
    //   3	15	201	java/lang/Throwable
    //   228	233	247	java/io/IOException
    //   238	243	265	java/io/IOException
    //   3	15	283	finally
    //   296	301	314	java/io/IOException
    //   306	311	332	java/io/IOException
    //   15	29	350	finally
    //   29	135	358	finally
    //   210	223	363	finally
    //   15	29	376	java/lang/Throwable
    //   29	135	393	java/lang/Throwable
  }
  
  public static String i(Context paramContext)
  {
    Object localObject = "fail";
    if (paramContext == null) {
      paramContext = "fail";
    }
    do
    {
      return paramContext;
      try
      {
        paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
        if (paramContext == null) {
          return "null";
        }
        localObject = paramContext;
        paramContext = paramContext.toLowerCase();
        return paramContext;
      }
      catch (Throwable localThrowable)
      {
        paramContext = (Context)localObject;
      }
    } while (u.a(localThrowable));
    localThrowable.printStackTrace();
    return localObject;
  }
  
  public static long j()
  {
    if (Environment.getExternalStorageState().equals("mounted")) {}
    for (int i = 1; i == 0; i = 0) {
      return 0L;
    }
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      i = localStatFs.getBlockSize();
      int j = localStatFs.getBlockCount();
      long l = j;
      return i * l;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return -2L;
  }
  
  public static String j(Context paramContext)
  {
    for (;;)
    {
      try
      {
        NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
        if (localNetworkInfo == null) {
          return null;
        }
        if (localNetworkInfo.getType() == 1) {
          return "WIFI";
        }
        if (localNetworkInfo.getType() != 0) {
          continue;
        }
        paramContext = (TelephonyManager)paramContext.getSystemService("phone");
        if (paramContext == null) {
          continue;
        }
        int i = paramContext.getNetworkType();
        switch (i)
        {
        case 15: 
          paramContext = "MOBILE(" + i + ")";
        }
      }
      catch (Exception paramContext)
      {
        if (u.a(paramContext)) {
          continue;
        }
        paramContext.printStackTrace();
        return "unknown";
        paramContext = "unknown";
        break;
        return "unknown";
      }
      return "HSPA+";
    }
    return paramContext;
    return "GPRS";
    return "EDGE";
    return "UMTS";
    return "HSDPA";
    return "HSUPA";
    return "HSPA";
    return "CDMA";
    return "EVDO_0";
    return "EVDO_A";
    return "1xRTT";
    return "iDen";
    return "EVDO_B";
    return "LTE";
    return "eHRPD";
  }
  
  public static long k()
  {
    if (Environment.getExternalStorageState().equals("mounted")) {}
    for (int i = 1; i == 0; i = 0) {
      return 0L;
    }
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      i = localStatFs.getBlockSize();
      int j = localStatFs.getAvailableBlocks();
      long l = j;
      return i * l;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return -2L;
  }
  
  public static String l()
  {
    Object localObject = "fail";
    try
    {
      String str = Locale.getDefault().getCountry();
      localObject = str;
    }
    catch (Throwable localThrowable)
    {
      while (u.a(localThrowable)) {}
      localThrowable.printStackTrace();
    }
    return localObject;
    return "fail";
  }
  
  public static String m()
  {
    Object localObject = "fail";
    try
    {
      String str = Build.BRAND;
      localObject = str;
    }
    catch (Throwable localThrowable)
    {
      while (u.a(localThrowable)) {}
      localThrowable.printStackTrace();
    }
    return localObject;
    return "fail";
  }
  
  public static long n()
  {
    try
    {
      SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
      long l = localSimpleDateFormat.parse(localSimpleDateFormat.format(new Date())).getTime();
      return l;
    }
    catch (Throwable localThrowable)
    {
      if (!u.a(localThrowable)) {
        localThrowable.printStackTrace();
      }
    }
    return -1L;
  }
  
  public void a(String paramString)
  {
    this.b = paramString;
  }
  
  public <T> void a(String paramString, T paramT)
  {
    if (paramString == null) {
      throw new IllegalArgumentException("put key can not is null");
    }
    if (paramT == null) {
      throw new IllegalArgumentException("put value can not is null");
    }
    if ((paramT instanceof Set)) {
      throw new IllegalArgumentException("can not support Set");
    }
    Object localObject = new i();
    ((i)localObject).a(this.b);
    ((i)localObject).a(paramT, 0);
    localObject = k.a(((i)localObject).a());
    HashMap localHashMap = new HashMap(1);
    ArrayList localArrayList = new ArrayList(1);
    a(localArrayList, paramT);
    localHashMap.put(a(localArrayList), localObject);
    this.d.remove(paramString);
    this.a.put(paramString, localHashMap);
  }
  
  public void a(byte[] paramArrayOfByte)
  {
    this.c.a(paramArrayOfByte);
    this.c.a(this.b);
    paramArrayOfByte = new HashMap(1);
    HashMap localHashMap = new HashMap(1);
    localHashMap.put("", new byte[0]);
    paramArrayOfByte.put("", localHashMap);
    this.a = this.c.a(paramArrayOfByte, 0, false);
  }
  
  public byte[] a()
  {
    i localI = new i(0);
    localI.a(this.b);
    localI.a(this.a, 0);
    return k.a(localI.a());
  }
}
