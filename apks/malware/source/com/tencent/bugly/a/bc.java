package com.tencent.bugly.a;

import android.util.Log;
import com.tencent.bugly.crashreport.a;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class bc
{
  static bc a;
  ScheduledExecutorService b = null;
  ThreadPoolExecutor c = null;
  ThreadPoolExecutor d = null;
  
  protected bc()
  {
    bd localBd = new bd(this);
    be localBe = new be(this);
    this.b = Executors.newScheduledThreadPool(3, localBd);
    this.c = new ThreadPoolExecutor(1, 1, 4L, TimeUnit.SECONDS, new LinkedBlockingQueue(3));
    this.c.setThreadFactory(localBe);
    this.d = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue(100));
    this.d.setThreadFactory(localBe);
    if ((this.b == null) || (this.b.isShutdown())) {
      throw new IllegalArgumentException("ScheduledExecutorService is not valiable!");
    }
    if ((this.c == null) || (this.c.isShutdown())) {
      throw new IllegalArgumentException("queueExecutorService is not valiable!");
    }
    if ((this.d == null) || (this.d.isShutdown())) {
      throw new IllegalArgumentException("queueExecutorService is not valiable!");
    }
  }
  
  public static bc a()
  {
    try
    {
      if (a == null) {
        a = new bc();
      }
      bc localBc = a;
      return localBc;
    }
    finally {}
  }
  
  public boolean a(Runnable paramRunnable)
  {
    boolean bool = false;
    for (;;)
    {
      try
      {
        if (!b())
        {
          bf.d("queue handler was closed , should not post task!", new Object[0]);
          return bool;
        }
        if (paramRunnable == null)
        {
          bf.d("queue task is null", new Object[0]);
          continue;
        }
      }
      finally {}
      tmp53_50[0] = paramRunnable.getClass().getName();
      bf.c("normal task %s", tmp53_50);
      try
      {
        this.c.submit(paramRunnable);
        bool = true;
      }
      catch (Throwable paramRunnable)
      {
        for (;;)
        {
          if (!bf.a(paramRunnable)) {
            paramRunnable.printStackTrace();
          }
        }
      }
    }
  }
  
  public boolean a(Runnable paramRunnable, long paramLong)
  {
    boolean bool = false;
    try
    {
      if (!b()) {
        bf.d("async handler was closed , should not post task!", new Object[0]);
      }
      for (;;)
      {
        return bool;
        if (paramRunnable != null) {
          break;
        }
        bf.d("async task == null", new Object[0]);
      }
      if (paramLong <= 0L) {}
    }
    finally {}
    for (;;)
    {
      bf.c("delay %d task %s", new Object[] { Long.valueOf(paramLong), paramRunnable.getClass().getName() });
      this.b.schedule(paramRunnable, paramLong, TimeUnit.MILLISECONDS);
      bool = true;
      break;
      paramLong = 0L;
    }
  }
  
  /* Error */
  protected boolean b()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 17	com/tencent/bugly/a/bc:b	Ljava/util/concurrent/ScheduledExecutorService;
    //   6: ifnull +40 -> 46
    //   9: aload_0
    //   10: getfield 17	com/tencent/bugly/a/bc:b	Ljava/util/concurrent/ScheduledExecutorService;
    //   13: invokeinterface 63 1 0
    //   18: ifne +28 -> 46
    //   21: aload_0
    //   22: getfield 19	com/tencent/bugly/a/bc:c	Ljava/util/concurrent/ThreadPoolExecutor;
    //   25: ifnull +21 -> 46
    //   28: aload_0
    //   29: getfield 19	com/tencent/bugly/a/bc:c	Ljava/util/concurrent/ThreadPoolExecutor;
    //   32: invokevirtual 71	java/util/concurrent/ThreadPoolExecutor:isShutdown	()Z
    //   35: istore_1
    //   36: iload_1
    //   37: ifne +9 -> 46
    //   40: iconst_1
    //   41: istore_1
    //   42: aload_0
    //   43: monitorexit
    //   44: iload_1
    //   45: ireturn
    //   46: iconst_0
    //   47: istore_1
    //   48: goto -6 -> 42
    //   51: astore_2
    //   52: aload_0
    //   53: monitorexit
    //   54: aload_2
    //   55: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	56	0	this	bc
    //   35	13	1	bool	boolean
    //   51	4	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	36	51	finally
  }
  
  public boolean b(Runnable paramRunnable)
  {
    boolean bool2 = false;
    try
    {
      boolean bool1;
      if (!b())
      {
        bool1 = bool2;
        if (a.a)
        {
          Log.w("CrashReport", "queue handler was closed , should not post task!");
          bool1 = bool2;
        }
      }
      for (;;)
      {
        return bool1;
        if (paramRunnable == null)
        {
          bool1 = bool2;
          if (!a.a) {
            continue;
          }
          Log.w("CrashReport", "queue task is null");
          bool1 = bool2;
          continue;
        }
        try
        {
          this.d.submit(paramRunnable);
          bool1 = true;
        }
        catch (Throwable paramRunnable)
        {
          for (;;)
          {
            if (a.a) {
              paramRunnable.printStackTrace();
            }
          }
        }
      }
    }
    finally {}
  }
  
  public boolean c(Runnable paramRunnable)
  {
    boolean bool = false;
    for (;;)
    {
      try
      {
        if (!b())
        {
          bf.d("async handler was closed , should not post task!", new Object[0]);
          return bool;
        }
        if (paramRunnable == null)
        {
          bf.d("async task == null", new Object[0]);
          continue;
        }
      }
      finally {}
      tmp53_50[0] = paramRunnable.getClass().getName();
      bf.c("normal task %s", tmp53_50);
      this.b.execute(paramRunnable);
      bool = true;
    }
  }
}
