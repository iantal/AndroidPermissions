package com.tencent.bugly.a;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class b
{
  public static Object a(Class<?> paramClass, String paramString, Object paramObject)
  {
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      paramClass.setAccessible(true);
      paramClass = paramClass.get(paramObject);
      return paramClass;
    }
    catch (Throwable paramClass)
    {
      if (!bf.a(paramClass)) {
        paramClass.printStackTrace();
      }
    }
    return null;
  }
  
  public static Object a(String paramString1, String paramString2, Object paramObject, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    try
    {
      paramString1 = Class.forName(paramString1).getDeclaredMethod(paramString2, paramArrayOfClass);
      paramString1.setAccessible(true);
      paramString1 = paramString1.invoke(paramObject, paramArrayOfObject);
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return null;
  }
  
  public static void a(Class<?> paramClass, String paramString, Object paramObject1, Object paramObject2)
  {
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      paramClass.setAccessible(true);
      paramClass.set(paramObject2, paramObject1);
      return;
    }
    catch (Exception paramClass) {}
  }
}
