package com.tencent.bugly.crashreport;

import android.content.Context;
import android.text.TextUtils;
import com.tencent.bugly.crashreport.common.strategy.BuglyBroadcastRecevier;
import com.tencent.bugly.crashreport.common.strategy.b;
import com.tencent.bugly.crashreport.common.strategy.c;
import com.tencent.bugly.proguard.l;
import com.tencent.bugly.proguard.n;
import com.tencent.bugly.proguard.r;
import com.tencent.bugly.proguard.t;
import com.tencent.bugly.proguard.u;
import com.tencent.bugly.proguard.u.a;
import com.tencent.bugly.proguard.z;
import java.util.Map;

public class CrashReport
{
  private static Context a;
  
  public CrashReport() {}
  
  public static String getAppChannel()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    String str = n.a(a).y();
    return str;
  }
  
  public static String getAppID()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    String str = n.a(a).d();
    return str;
  }
  
  public static String getAppVer()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    String str = n.a(a).e();
    return str;
  }
  
  public static String getUserId()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    String str = n.a(a).k();
    return str;
  }
  
  public static void initCrashReport(Context paramContext, String paramString, boolean paramBoolean)
  {
    try
    {
      initCrashReport(paramContext, paramString, paramBoolean, null);
      return;
    }
    finally
    {
      paramContext = finally;
      throw paramContext;
    }
  }
  
  public static void initCrashReport(Context paramContext, String paramString, boolean paramBoolean, UserStrategy paramUserStrategy)
  {
    try
    {
      if (a != null)
      {
        u.b("already inited ! nothing to do !", new Object[0]);
        return;
      }
      u.a("crash report start to init!", new Object[0]);
      if (paramContext == null) {
        throw new ReportInitializedException("init arg 'appContext' should not be null!");
      }
    }
    finally {}
    if (paramString == null) {
      throw new ReportInitializedException("init arg 'crashReportAppID' should not be null!");
    }
    Context localContext = paramContext.getApplicationContext();
    a = localContext;
    if (paramBoolean)
    {
      u.a(new u.a());
      u.b("'isDebug' is true , so running in debug model , close it when you release!", new Object[0]);
    }
    n localN = n.a(localContext);
    localN.a(paramString);
    u.a("setted APPID:%s", new Object[] { paramString });
    if (paramUserStrategy != null)
    {
      paramContext = UserStrategy.a(paramUserStrategy);
      if (!TextUtils.isEmpty(paramContext))
      {
        if (paramContext.length() <= 100) {
          break label587;
        }
        paramString = paramContext.substring(0, 100);
        u.b("appVersion %s length is over limit %d substring to %s", new Object[] { paramContext, Integer.valueOf(100), paramString });
        paramContext = paramString;
      }
    }
    label587:
    for (;;)
    {
      localN.b(paramContext);
      u.a("setted APPVERSION:%s", new Object[] { UserStrategy.a(paramUserStrategy) });
      paramString = UserStrategy.b(paramUserStrategy);
      paramContext = paramString;
      if (!TextUtils.isEmpty(paramString))
      {
        paramContext = paramString;
        if (paramString.length() > 100)
        {
          paramContext = paramString.substring(0, 100);
          u.b("appChannel %s length is over limit %d substring to %s", new Object[] { paramString, Integer.valueOf(100), paramContext });
        }
        localN.f(paramContext);
        u.a("setted APPCHANNEL:%s", new Object[] { UserStrategy.b(paramUserStrategy) });
      }
      paramString = UserStrategy.c(paramUserStrategy);
      if (!TextUtils.isEmpty(paramString))
      {
        localN.g(paramString);
        u.a("setted libBugly.so file path :%s", new Object[] { paramString });
      }
      Object localObject = UserStrategy.d(paramUserStrategy);
      if (localObject != null)
      {
        paramString = (String)localObject;
        if (((String)localObject).length() > 100)
        {
          paramString = ((String)localObject).substring(0, 100);
          u.b("deviceId %s length is over limit %d substring to %s", new Object[] { paramContext, Integer.valueOf(100), paramString });
        }
        localN.d(paramString);
        u.a("setted deviceId :%s", new Object[] { paramString });
      }
      localObject = t.a();
      l localL = l.a(localContext);
      r localR = r.a(localContext, (t)localObject, localN, localL);
      c localC = c.a(localContext, localN, new b(), l.a(localContext), localR, (t)localObject);
      if ((paramUserStrategy != null) && (UserStrategy.e(paramUserStrategy) > 0L))
      {
        localC.a(UserStrategy.e(paramUserStrategy));
        u.a("setted APP_REPORT_DELAY %d", new Object[] { Long.valueOf(UserStrategy.e(paramUserStrategy)) });
      }
      for (;;)
      {
        paramString = null;
        paramContext = paramString;
        if (paramUserStrategy != null)
        {
          paramContext = paramString;
          if (paramUserStrategy.getCrashHandleCallback() != null)
          {
            paramContext = paramUserStrategy.getCrashHandleCallback();
            u.a("setted CrashHanldeCallback", new Object[0]);
          }
        }
        z.a(localContext, localL, localC, localR, localN, (t)localObject, paramBoolean, paramContext).c();
        paramContext = BuglyBroadcastRecevier.getInstance();
        paramContext.addFilter("android.net.conn.CONNECTIVITY_CHANGE");
        paramContext.regist(localContext);
        u.a("crash report inited!", new Object[0]);
        break;
        localC.e();
      }
    }
  }
  
  public static boolean isLastSessionCrash()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    boolean bool = z.a().b();
    return bool;
  }
  
  public static void postCatchedException(Throwable paramThrowable)
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    z.a().a(Thread.currentThread(), paramThrowable, false);
  }
  
  public static void setUserId(String paramString)
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    String str = paramString;
    if (paramString != null)
    {
      str = paramString;
      if (paramString.length() > 100)
      {
        str = paramString.substring(0, 100);
        u.b("userId %s length is over limit %d substring to %s", new Object[] { paramString, Integer.valueOf(100), str });
      }
    }
    n.a(a).c(str);
    u.a("UserId setted to %s", new Object[] { str });
    c.a().f();
  }
  
  public static void testJavaCrash()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    throw new RuntimeException("This Crash create for Test! You can go to Bugly see more detail!");
  }
  
  public static void testNativeCrash()
  {
    try
    {
      if (a == null) {
        throw new ReportInitializedException("Report has not been initialed! pls to call method 'initCrashReport' first!");
      }
    }
    finally {}
    u.a("start to create a native crash for test!", new Object[0]);
    z.a().d();
  }
  
  public static class CrashHandleCallback
  {
    public static final int CRASHTYPE_JAVA_CATCH = 1;
    public static final int CRASHTYPE_JAVA_CRASH = 0;
    public static final int CRASHTYPE_NATIVE = 2;
    public static final int CRASHTYPE_U3D = 3;
    public static final int MAX_USERDATA_KEY_LENGTH = 100;
    public static final int MAX_USERDATA_VALUE_LENGTH = 30000;
    
    public CrashHandleCallback() {}
    
    public Map<String, String> onCrashHandleStart(int paramInt, String paramString1, String paramString2, String paramString3)
    {
      return null;
    }
  }
  
  public static class UserStrategy
  {
    private String a;
    private String b;
    private long c;
    private String d;
    private String e;
    private CrashReport.CrashHandleCallback f;
    
    public UserStrategy(Context paramContext)
    {
      paramContext = n.a(paramContext.getApplicationContext());
      this.a = paramContext.e();
      this.b = paramContext.y();
      this.d = null;
      this.c = 0L;
    }
    
    public String getAppChannel()
    {
      try
      {
        String str = this.b;
        return str;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public long getAppReportDelay()
    {
      try
      {
        long l = this.c;
        return l;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public String getAppVersion()
    {
      try
      {
        String str = this.a;
        return str;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public CrashReport.CrashHandleCallback getCrashHandleCallback()
    {
      try
      {
        CrashReport.CrashHandleCallback localCrashHandleCallback = this.f;
        return localCrashHandleCallback;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public String getDeviceID()
    {
      try
      {
        String str = this.e;
        return str;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public String getLibBuglySOFilePath()
    {
      try
      {
        String str = this.d;
        return str;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public UserStrategy setAppChannel(String paramString)
    {
      try
      {
        this.b = paramString;
        return this;
      }
      finally
      {
        paramString = finally;
        throw paramString;
      }
    }
    
    public UserStrategy setAppReportDelay(long paramLong)
    {
      try
      {
        this.c = paramLong;
        return this;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    public UserStrategy setAppVersion(String paramString)
    {
      try
      {
        this.a = paramString;
        return this;
      }
      finally
      {
        paramString = finally;
        throw paramString;
      }
    }
    
    public void setCrashHandleCallback(CrashReport.CrashHandleCallback paramCrashHandleCallback)
    {
      try
      {
        this.f = paramCrashHandleCallback;
        return;
      }
      finally
      {
        paramCrashHandleCallback = finally;
        throw paramCrashHandleCallback;
      }
    }
    
    public void setDeviceID(String paramString)
    {
      try
      {
        this.e = paramString;
        return;
      }
      finally
      {
        paramString = finally;
        throw paramString;
      }
    }
    
    public void setLibBuglySOFilePath(String paramString)
    {
      try
      {
        this.d = paramString;
        return;
      }
      finally
      {
        paramString = finally;
        throw paramString;
      }
    }
  }
}
