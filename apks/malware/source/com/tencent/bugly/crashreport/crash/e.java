package com.tencent.bugly.crashreport.crash;

import com.tencent.bugly.a.bf;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class e
{
  /* Error */
  public static String a(android.content.Context paramContext, int paramInt)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: aload_0
    //   3: invokestatic 16	com/tencent/bugly/crashreport/common/info/a:c	(Landroid/content/Context;)Z
    //   6: ifne +15 -> 21
    //   9: ldc 18
    //   11: iconst_0
    //   12: anewarray 4	java/lang/Object
    //   15: invokestatic 24	com/tencent/bugly/a/bf:d	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   18: pop
    //   19: aload_2
    //   20: areturn
    //   21: new 26	java/lang/StringBuilder
    //   24: dup
    //   25: invokespecial 30	java/lang/StringBuilder:<init>	()V
    //   28: astore 4
    //   30: invokestatic 36	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   33: iconst_4
    //   34: anewarray 38	java/lang/String
    //   37: dup
    //   38: iconst_0
    //   39: ldc 40
    //   41: aastore
    //   42: dup
    //   43: iconst_1
    //   44: ldc 42
    //   46: aastore
    //   47: dup
    //   48: iconst_2
    //   49: ldc 44
    //   51: aastore
    //   52: dup
    //   53: iconst_3
    //   54: ldc 46
    //   56: aastore
    //   57: invokevirtual 50	java/lang/Runtime:exec	([Ljava/lang/String;)Ljava/lang/Process;
    //   60: astore_0
    //   61: new 52	java/io/BufferedReader
    //   64: dup
    //   65: new 54	java/io/InputStreamReader
    //   68: dup
    //   69: aload_0
    //   70: invokevirtual 60	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   73: invokespecial 63	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   76: invokespecial 66	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   79: astore_2
    //   80: aload_2
    //   81: invokevirtual 70	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   84: astore_3
    //   85: aload_3
    //   86: ifnull +129 -> 215
    //   89: aload 4
    //   91: aload_3
    //   92: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   95: ldc 76
    //   97: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   100: pop
    //   101: iload_1
    //   102: ifle -22 -> 80
    //   105: aload 4
    //   107: invokevirtual 80	java/lang/StringBuilder:length	()I
    //   110: iload_1
    //   111: if_icmple -31 -> 80
    //   114: aload 4
    //   116: iconst_0
    //   117: aload 4
    //   119: invokevirtual 80	java/lang/StringBuilder:length	()I
    //   122: iload_1
    //   123: isub
    //   124: invokevirtual 84	java/lang/StringBuilder:delete	(II)Ljava/lang/StringBuilder;
    //   127: pop
    //   128: goto -48 -> 80
    //   131: astore_2
    //   132: aload_2
    //   133: invokestatic 87	com/tencent/bugly/a/bf:a	(Ljava/lang/Throwable;)Z
    //   136: ifne +7 -> 143
    //   139: aload_2
    //   140: invokevirtual 90	java/lang/Throwable:printStackTrace	()V
    //   143: aload 4
    //   145: new 26	java/lang/StringBuilder
    //   148: dup
    //   149: invokespecial 30	java/lang/StringBuilder:<init>	()V
    //   152: ldc 92
    //   154: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   157: aload_2
    //   158: invokevirtual 95	java/lang/Throwable:toString	()Ljava/lang/String;
    //   161: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   164: ldc 97
    //   166: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   169: invokevirtual 98	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   172: invokevirtual 74	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: invokevirtual 98	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   178: astore_3
    //   179: aload_3
    //   180: astore_2
    //   181: aload_0
    //   182: ifnull -163 -> 19
    //   185: aload_0
    //   186: invokevirtual 102	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   189: invokevirtual 107	java/io/OutputStream:close	()V
    //   192: aload_0
    //   193: invokevirtual 60	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   196: invokevirtual 110	java/io/InputStream:close	()V
    //   199: aload_0
    //   200: invokevirtual 113	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   203: invokevirtual 110	java/io/InputStream:close	()V
    //   206: aload_3
    //   207: areturn
    //   208: astore_0
    //   209: aload_0
    //   210: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   213: aload_3
    //   214: areturn
    //   215: aload 4
    //   217: invokevirtual 98	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   220: astore_3
    //   221: aload_3
    //   222: astore_2
    //   223: aload_0
    //   224: ifnull -205 -> 19
    //   227: aload_0
    //   228: invokevirtual 102	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   231: invokevirtual 107	java/io/OutputStream:close	()V
    //   234: aload_0
    //   235: invokevirtual 60	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   238: invokevirtual 110	java/io/InputStream:close	()V
    //   241: aload_0
    //   242: invokevirtual 113	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   245: invokevirtual 110	java/io/InputStream:close	()V
    //   248: aload_3
    //   249: areturn
    //   250: astore_0
    //   251: aload_0
    //   252: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   255: aload_3
    //   256: areturn
    //   257: astore_2
    //   258: aload_2
    //   259: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   262: goto -28 -> 234
    //   265: astore_2
    //   266: aload_2
    //   267: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   270: goto -29 -> 241
    //   273: astore_2
    //   274: aload_2
    //   275: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   278: goto -86 -> 192
    //   281: astore_2
    //   282: aload_2
    //   283: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   286: goto -87 -> 199
    //   289: astore_2
    //   290: aconst_null
    //   291: astore_0
    //   292: aload_0
    //   293: ifnull +24 -> 317
    //   296: aload_0
    //   297: invokevirtual 102	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   300: invokevirtual 107	java/io/OutputStream:close	()V
    //   303: aload_0
    //   304: invokevirtual 60	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   307: invokevirtual 110	java/io/InputStream:close	()V
    //   310: aload_0
    //   311: invokevirtual 113	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
    //   314: invokevirtual 110	java/io/InputStream:close	()V
    //   317: aload_2
    //   318: athrow
    //   319: astore_3
    //   320: aload_3
    //   321: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   324: goto -21 -> 303
    //   327: astore_3
    //   328: aload_3
    //   329: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   332: goto -22 -> 310
    //   335: astore_0
    //   336: aload_0
    //   337: invokevirtual 114	java/io/IOException:printStackTrace	()V
    //   340: goto -23 -> 317
    //   343: astore_2
    //   344: goto -52 -> 292
    //   347: astore_2
    //   348: goto -56 -> 292
    //   351: astore_2
    //   352: aconst_null
    //   353: astore_0
    //   354: goto -222 -> 132
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	357	0	paramContext	android.content.Context
    //   0	357	1	paramInt	int
    //   1	80	2	localObject1	Object
    //   131	27	2	localThrowable1	Throwable
    //   180	43	2	localObject2	Object
    //   257	2	2	localIOException1	java.io.IOException
    //   265	2	2	localIOException2	java.io.IOException
    //   273	2	2	localIOException3	java.io.IOException
    //   281	2	2	localIOException4	java.io.IOException
    //   289	29	2	localObject3	Object
    //   343	1	2	localObject4	Object
    //   347	1	2	localObject5	Object
    //   351	1	2	localThrowable2	Throwable
    //   84	172	3	str	String
    //   319	2	3	localIOException5	java.io.IOException
    //   327	2	3	localIOException6	java.io.IOException
    //   28	188	4	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   61	80	131	java/lang/Throwable
    //   80	85	131	java/lang/Throwable
    //   89	101	131	java/lang/Throwable
    //   105	128	131	java/lang/Throwable
    //   215	221	131	java/lang/Throwable
    //   199	206	208	java/io/IOException
    //   241	248	250	java/io/IOException
    //   227	234	257	java/io/IOException
    //   234	241	265	java/io/IOException
    //   185	192	273	java/io/IOException
    //   192	199	281	java/io/IOException
    //   30	61	289	finally
    //   296	303	319	java/io/IOException
    //   303	310	327	java/io/IOException
    //   310	317	335	java/io/IOException
    //   61	80	343	finally
    //   80	85	343	finally
    //   89	101	343	finally
    //   105	128	343	finally
    //   215	221	343	finally
    //   132	143	347	finally
    //   143	179	347	finally
    //   30	61	351	java/lang/Throwable
  }
  
  public static String a(Throwable paramThrowable, int paramInt)
  {
    if (paramThrowable.getMessage() == null) {
      return "";
    }
    if ((paramInt < 0) || (paramThrowable.getMessage().length() <= paramInt)) {
      return paramThrowable.getMessage();
    }
    return paramThrowable.getMessage().substring(0, paramInt) + "\n[Message over limit size:" + paramInt + ", has been cutted!]";
  }
  
  public static Throwable a(Throwable paramThrowable)
  {
    Throwable localThrowable = paramThrowable;
    if (paramThrowable == null)
    {
      paramThrowable = null;
      return paramThrowable;
    }
    for (;;)
    {
      paramThrowable = localThrowable;
      if (localThrowable.getCause() == null) {
        break;
      }
      localThrowable = localThrowable.getCause();
    }
  }
  
  public static Map<String, String> a(int paramInt, boolean paramBoolean)
  {
    HashMap localHashMap = new HashMap(12);
    Object localObject = Thread.getAllStackTraces();
    if (localObject == null) {
      return null;
    }
    long l = Thread.currentThread().getId();
    StringBuilder localStringBuilder = new StringBuilder();
    localObject = ((Map)localObject).entrySet().iterator();
    while (((Iterator)localObject).hasNext())
    {
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
      if ((!paramBoolean) || (l != ((Thread)localEntry.getKey()).getId()))
      {
        localStringBuilder.setLength(0);
        if ((localEntry.getValue() != null) && (((StackTraceElement[])localEntry.getValue()).length != 0))
        {
          StackTraceElement[] arrayOfStackTraceElement = (StackTraceElement[])localEntry.getValue();
          int j = arrayOfStackTraceElement.length;
          int i = 0;
          for (;;)
          {
            StackTraceElement localStackTraceElement;
            if (i < j)
            {
              localStackTraceElement = arrayOfStackTraceElement[i];
              if ((paramInt > 0) && (localStringBuilder.length() >= paramInt)) {
                localStringBuilder.append("\n[Stack over limit size :" + paramInt + " , has been cutted !]");
              }
            }
            else
            {
              localHashMap.put(((Thread)localEntry.getKey()).getName() + "(" + ((Thread)localEntry.getKey()).getId() + ")", localStringBuilder.toString());
              break;
            }
            localStringBuilder.append(localStackTraceElement.toString()).append("\n");
            i += 1;
          }
        }
      }
    }
    return localHashMap;
  }
  
  public static String b(Throwable paramThrowable, int paramInt)
  {
    if (paramThrowable == null) {
      return null;
    }
    localStringBuilder = new StringBuilder();
    try
    {
      if (paramThrowable.getStackTrace() != null)
      {
        paramThrowable = paramThrowable.getStackTrace();
        int j = paramThrowable.length;
        int i = 0;
        while (i < j)
        {
          Object localObject = paramThrowable[i];
          if ((paramInt > 0) && (localStringBuilder.length() >= paramInt))
          {
            localStringBuilder.append("\n[Stack over limit size :" + paramInt + " , has been cutted !]");
            return localStringBuilder.toString();
          }
          localStringBuilder.append(localObject.toString()).append("\n");
          i += 1;
        }
      }
      return localStringBuilder.toString();
    }
    catch (Throwable paramThrowable)
    {
      bf.e("gen stack error %s", new Object[] { paramThrowable.toString() });
    }
  }
}
