package com.tencent.open;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Base64;
import android.widget.Toast;
import com.tencent.connect.a.a;
import com.tencent.connect.auth.QQToken;
import com.tencent.connect.common.BaseApi;
import com.tencent.connect.share.QQShare;
import com.tencent.open.a.f;
import com.tencent.open.b.c;
import com.tencent.open.b.d;
import com.tencent.open.utils.Global;
import com.tencent.open.utils.HttpUtils;
import com.tencent.open.utils.SystemUtils;
import com.tencent.open.utils.TemporaryStorage;
import com.tencent.open.utils.ThreadManager;
import com.tencent.open.utils.Util;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.UiError;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public class GameAppOperation
  extends BaseApi
{
  public static final String GAME_FRIEND_ADD_MESSAGE = "add_msg";
  public static final String GAME_FRIEND_LABEL = "friend_label";
  public static final String GAME_FRIEND_OPENID = "fopen_id";
  public static final String GAME_SIGNATURE = "signature";
  public static final String GAME_UNION_ID = "unionid";
  public static final String GAME_UNION_NAME = "union_name";
  public static final String GAME_ZONE_ID = "zoneid";
  public static final char PIC_SYMBOLE = '\024';
  public static final String QQFAV_DATALINE_APPNAME = "app_name";
  public static final String QQFAV_DATALINE_AUDIOURL = "audioUrl";
  public static final String QQFAV_DATALINE_DESCRIPTION = "description";
  public static final String QQFAV_DATALINE_FILEDATA = "file_data";
  public static final String QQFAV_DATALINE_IMAGEURL = "image_url";
  public static final String QQFAV_DATALINE_OPENID = "open_id";
  public static final String QQFAV_DATALINE_REQTYPE = "req_type";
  public static final String QQFAV_DATALINE_SHAREID = "share_id";
  public static final String QQFAV_DATALINE_SRCTYPE = "src_type";
  public static final String QQFAV_DATALINE_TITLE = "title";
  public static final int QQFAV_DATALINE_TYPE_AUDIO = 2;
  public static final int QQFAV_DATALINE_TYPE_DEFAULT = 1;
  public static final int QQFAV_DATALINE_TYPE_IMAGE_TEXT = 5;
  public static final int QQFAV_DATALINE_TYPE_TEXT = 6;
  public static final String QQFAV_DATALINE_URL = "url";
  public static final String QQFAV_DATALINE_VERSION = "version";
  public static final String SHARE_PRIZE_ACTIVITY_ID = "activityid";
  public static final String SHARE_PRIZE_IMAGE_URL = "imageUrl";
  public static final String SHARE_PRIZE_SHARE_ID = "shareid";
  public static final String SHARE_PRIZE_SHARE_ID_LIST = "shareid_list";
  public static final String SHARE_PRIZE_SUMMARY = "summary";
  public static final int SHARE_PRIZE_SUMMARY_MAX_LENGTH = 60;
  public static final String SHARE_PRIZE_TARGET_URL = "targetUrl";
  public static final String SHARE_PRIZE_TITLE = "title";
  public static final int SHARE_PRIZE_TITLE_MAX_LENGTH = 45;
  public static final String TROOPBAR_ID = "troopbar_id";
  
  public GameAppOperation(QQToken paramQQToken)
  {
    super(paramQQToken);
  }
  
  private Bundle a()
  {
    if (this.mToken == null) {
      return null;
    }
    Bundle localBundle = new Bundle();
    String str1 = this.mToken.getAppId();
    String str2 = this.mToken.getOpenId();
    String str3 = this.mToken.getAccessToken();
    if ((TextUtils.isEmpty(str1)) || (TextUtils.isEmpty(str2)) || (TextUtils.isEmpty(str3)))
    {
      f.e("openSDK_LOG.GameAppOper", "composeLoginStateParams fail, accesstoken or openid or appid is null");
      return null;
    }
    localBundle.putString("appid", this.mToken.getAppId());
    localBundle.putString("openid", this.mToken.getOpenId());
    localBundle.putString("accesstoken", this.mToken.getAccessToken());
    return localBundle;
  }
  
  private void a(Activity paramActivity)
  {
    a(paramActivity, "");
  }
  
  private void a(Activity paramActivity, String paramString)
  {
    new TDialog(paramActivity, "", getCommonDownloadQQUrl(paramString), null, this.mToken).show();
  }
  
  private void a(String paramString1, int paramInt, String paramString2)
  {
    if ((TextUtils.isEmpty(paramString1)) || (TextUtils.isEmpty(paramString2)))
    {
      f.a("openSDK_LOG", "reportForVia() error: reportType or result is null");
      return;
    }
    String str;
    switch (paramInt)
    {
    case 3: 
    case 4: 
    default: 
      f.e("openSDK_LOG", "GameAppOperation -- reportForVia() error: unknow type " + String.valueOf(paramInt));
      return;
    case 6: 
      str = "5";
    }
    for (;;)
    {
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "2", paramString1, "28", paramString2, str, "0", "", "");
      return;
      str = "1";
      continue;
      str = "3";
      continue;
      str = "6";
    }
  }
  
  private boolean a(Activity paramActivity, Bundle paramBundle, IUiListener paramIUiListener)
  {
    if ((paramActivity == null) || (paramBundle == null) || (paramIUiListener == null))
    {
      f.e("openSDK_LOG", "activity or params or listener is null!");
      return false;
    }
    int i = paramBundle.getInt("req_type", 1);
    if (TextUtils.isEmpty(paramBundle.getString("app_name")))
    {
      paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: app_name", null));
      return false;
    }
    paramActivity = paramBundle.getString("description");
    String str1 = paramBundle.getString("url");
    String str2 = paramBundle.getString("audioUrl");
    String str3 = paramBundle.getString("image_url");
    paramBundle = paramBundle.getStringArrayList("file_data");
    int j;
    switch (i)
    {
    case 3: 
    case 4: 
    default: 
      paramIUiListener.onError(new UiError(-5, "传入参数有误!: unknow req_type", null));
      return false;
    case 6: 
      if (TextUtils.isEmpty(paramActivity))
      {
        paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: description is null", null));
        return false;
      }
      break;
    case 5: 
      if ((paramBundle == null) || (paramBundle.size() == 0))
      {
        paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: fill_data is null", null));
        return false;
      }
      j = paramBundle.size();
      i = 0;
    case 1: 
    case 2: 
      while (i < j)
      {
        paramActivity = ((String)paramBundle.get(i)).trim();
        if ((paramActivity.startsWith("/")) && (!new File(paramActivity).exists()))
        {
          paramIUiListener.onError(new UiError(-6, "非法的图片地址!", null));
          return false;
        }
        i += 1;
        continue;
        if ((TextUtils.isEmpty(str1)) || (TextUtils.isEmpty(str3)))
        {
          paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: image_url or url is null", null));
          return false;
          if ((TextUtils.isEmpty(str1)) || (TextUtils.isEmpty(str3)) || (TextUtils.isEmpty(str2)))
          {
            paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: image_url or url or audioUrl is null", null));
            return false;
          }
        }
      }
    }
    return true;
  }
  
  public void addToQQFavorites(Activity paramActivity, Bundle paramBundle, IUiListener paramIUiListener)
  {
    f.c("openSDK_LOG", "addToQQFavorites() -- start");
    int j = paramBundle.getInt("req_type", 1);
    if (!a(paramActivity, paramBundle, paramIUiListener))
    {
      a("21", j, "1");
      return;
    }
    StringBuffer localStringBuffer = new StringBuffer("mqqapi://share/to_qqfav?src_type=app&version=1&file_type=news");
    Object localObject = paramBundle.getString("image_url");
    String str3 = paramBundle.getString("title");
    String str4 = paramBundle.getString("description");
    String str5 = paramBundle.getString("url");
    String str2 = paramBundle.getString("audioUrl");
    String str1 = Util.getApplicationLable(paramActivity);
    if (str1 == null) {
      str1 = paramBundle.getString("app_name");
    }
    for (;;)
    {
      paramBundle = paramBundle.getStringArrayList("file_data");
      String str7 = this.mToken.getAppId();
      String str6 = this.mToken.getOpenId();
      f.b("addToQQFavorites", "openId:" + str6);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        localStringBuffer.append("&image_url=" + Base64.encodeToString(Util.getBytesUTF8((String)localObject), 2));
      }
      if (paramBundle != null)
      {
        localObject = new StringBuffer();
        int k = paramBundle.size();
        int i = 0;
        for (;;)
        {
          if (i < k) {
            try
            {
              ((StringBuffer)localObject).append(URLEncoder.encode(((String)paramBundle.get(i)).trim(), "UTF-8"));
              if (i != k - 1) {
                ((StringBuffer)localObject).append(";");
              }
              i += 1;
            }
            catch (UnsupportedEncodingException localUnsupportedEncodingException)
            {
              for (;;)
              {
                localUnsupportedEncodingException.printStackTrace();
                f.b("openSDK_LOG", "UnsupportedEncodingException", localUnsupportedEncodingException);
                ((StringBuffer)localObject).append(URLEncoder.encode(((String)paramBundle.get(i)).trim()));
              }
            }
          }
        }
        localStringBuffer.append("&file_data=" + Base64.encodeToString(Util.getBytesUTF8(((StringBuffer)localObject).toString()), 2));
      }
      if (!TextUtils.isEmpty(str3)) {
        localStringBuffer.append("&title=" + Base64.encodeToString(Util.getBytesUTF8(str3), 2));
      }
      if (!TextUtils.isEmpty(str4)) {
        localStringBuffer.append("&description=" + Base64.encodeToString(Util.getBytesUTF8(str4), 2));
      }
      if (!TextUtils.isEmpty(str7)) {
        localStringBuffer.append("&share_id=" + str7);
      }
      if (!TextUtils.isEmpty(str5)) {
        localStringBuffer.append("&url=" + Base64.encodeToString(Util.getBytesUTF8(str5), 2));
      }
      if (!TextUtils.isEmpty(str1))
      {
        paramBundle = str1;
        if (str1.length() > 20) {
          paramBundle = str1.substring(0, 20) + "...";
        }
        localStringBuffer.append("&app_name=" + Base64.encodeToString(Util.getBytesUTF8(paramBundle), 2));
      }
      if (!TextUtils.isEmpty(str6)) {
        localStringBuffer.append("&open_id=" + Base64.encodeToString(Util.getBytesUTF8(str6), 2));
      }
      if (!TextUtils.isEmpty(str2)) {
        localStringBuffer.append("&audioUrl=" + Base64.encodeToString(Util.getBytesUTF8(str2), 2));
      }
      localStringBuffer.append("&req_type=" + Base64.encodeToString(Util.getBytesUTF8(String.valueOf(j)), 2));
      f.b("addToQQFavorites url: ", localStringBuffer.toString());
      a.a(Global.getContext(), this.mToken, "requireApi", new String[] { "addToQQFavorites" });
      this.mActivityIntent = new Intent("android.intent.action.VIEW");
      this.mActivityIntent.setData(Uri.parse(localStringBuffer.toString()));
      this.mActivityIntent.putExtra("pkg_name", paramActivity.getPackageName());
      paramBundle = TemporaryStorage.set("addToQQFavorites", paramIUiListener);
      if (paramBundle != null) {
        ((IUiListener)paramBundle).onCancel();
      }
      if ((hasActivityForIntent()) && (SystemUtils.compareQQVersion(paramActivity, "5.2.0") >= 0)) {}
      for (;;)
      {
        try
        {
          paramActivity.startActivityForResult(this.mActivityIntent, 0);
          a("21", j, "0");
          f.c("openSDK_LOG", "addToQQFavorites() --end");
          return;
        }
        catch (Exception paramBundle)
        {
          f.b("openSDK_LOG", "-->addToQQFavorites, start activity exception.", paramBundle);
          a("21", j, "1");
          a(paramActivity);
          continue;
        }
        f.d("openSDK_LOG", "-->addToQQFavorites, there is no activity, show download page.");
        a("21", j, "1");
        a(paramActivity);
      }
    }
  }
  
  public void bindQQGroup(Activity paramActivity, Bundle paramBundle)
  {
    f.c("openSDK_LOG", "-->bindQQGroup()  -- start");
    if (paramActivity == null)
    {
      f.e("openSDK_LOG", "-->bindQQGroup, activity is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      return;
    }
    if (paramBundle == null)
    {
      Toast.makeText(paramActivity, "Bundle参数为空", 0).show();
      f.e("openSDK_LOG", "-->bindQQGroup, params is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      return;
    }
    Object localObject = Util.getApplicationLable(paramActivity);
    StringBuffer localStringBuffer = new StringBuffer("mqqapi://gamesdk/bind_group?src_type=app&version=1");
    if (!TextUtils.isEmpty((CharSequence)localObject)) {
      localStringBuffer.append("&app_name=" + Base64.encodeToString(Util.getBytesUTF8((String)localObject), 2));
    }
    localObject = paramBundle.getString("unionid");
    if (TextUtils.isEmpty((CharSequence)localObject))
    {
      Toast.makeText(paramActivity, "游戏公会ID为空", 0).show();
      f.e("openSDK_LOG", "-->bindQQGroup, game union id is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      return;
    }
    localStringBuffer.append("&unionid=" + Base64.encodeToString(Util.getBytesUTF8((String)localObject), 2));
    localObject = paramBundle.getString("union_name");
    if (TextUtils.isEmpty((CharSequence)localObject))
    {
      Toast.makeText(paramActivity, "游戏公会名称为空", 0).show();
      f.e("openSDK_LOG", "-->bindQQGroup, game union name is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      return;
    }
    localStringBuffer.append("&union_name=" + Base64.encodeToString(Util.getBytesUTF8((String)localObject), 2));
    localObject = paramBundle.getString("zoneid");
    if (TextUtils.isEmpty((CharSequence)localObject))
    {
      Toast.makeText(paramActivity, "游戏区域ID为空", 0).show();
      f.e("openSDK_LOG", "-->bindQQGroup, game zone id  is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      return;
    }
    localStringBuffer.append("&zoneid=" + Base64.encodeToString(Util.getBytesUTF8((String)localObject), 2));
    paramBundle = paramBundle.getString("signature");
    if (TextUtils.isEmpty(paramBundle))
    {
      Toast.makeText(paramActivity, "游戏签名为空", 0).show();
      f.e("openSDK_LOG", "-->bindQQGroup, game signature is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      return;
    }
    localStringBuffer.append("&signature=" + Base64.encodeToString(Util.getBytesUTF8(paramBundle), 2));
    paramBundle = this.mToken.getOpenId();
    if (!TextUtils.isEmpty(paramBundle))
    {
      localStringBuffer.append("&openid=" + Base64.encodeToString(Util.getBytesUTF8(paramBundle), 2));
      paramBundle = composeActivityParams();
      localObject = paramBundle.keySet().iterator();
      while (((Iterator)localObject).hasNext())
      {
        String str = (String)((Iterator)localObject).next();
        paramBundle.putString(str, Base64.encodeToString(Util.getBytesUTF8(paramBundle.getString(str)), 2));
      }
    }
    Toast.makeText(paramActivity, "Openid为空", 0).show();
    f.e("openSDK_LOG", "-->bindQQGroup, openid is empty.");
    d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
    return;
    localStringBuffer.append("&" + Util.encodeUrl(paramBundle));
    f.b("openSDK_LOG", "-->bindQQGroup, url: " + localStringBuffer.toString());
    this.mActivityIntent = new Intent("android.intent.action.VIEW");
    this.mActivityIntent.setData(Uri.parse(localStringBuffer.toString()));
    if ((hasActivityForIntent()) && (SystemUtils.compareQQVersion(paramActivity, "5.1.0") >= 0)) {}
    for (;;)
    {
      try
      {
        paramActivity.startActivityForResult(this.mActivityIntent, 0);
        d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "0");
        f.c("openSDK_LOG", "-->bindQQGroup()  -- end");
        return;
      }
      catch (Exception paramBundle)
      {
        f.b("openSDK_LOG", "-->bind group, start activity exception.", paramBundle);
        d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
        a(paramActivity);
        continue;
      }
      f.d("openSDK_LOG", "-->bind group, there is no activity, show download page.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.BINDGROUP.XX", "18", "18", "1");
      a(paramActivity);
    }
  }
  
  public void exchangePrize(Context paramContext, final Bundle paramBundle, final IUiListener paramIUiListener)
  {
    if (paramIUiListener == null)
    {
      f.e("openSDK_LOG.GameAppOper", "listener is null!");
      return;
    }
    if (paramBundle == null)
    {
      f.e("openSDK_LOG.GameAppOper", "params is null!");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "params is null!"));
      return;
    }
    if ((this.mToken == null) || (!this.mToken.isSessionValid()))
    {
      f.e("openSDK_LOG.GameAppOper", "exchangePrize failed, auth token is illegal.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "exchangePrize failed, auth token is illegal."));
      return;
    }
    if ((paramContext == null) && (Global.getContext() == null))
    {
      f.e("openSDK_LOG.GameAppOper", "exchangePrize failed, context is null.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "exchangePrize failed, context is null."));
      return;
    }
    paramBundle = paramBundle.getStringArrayList("shareid_list");
    if (paramBundle == null)
    {
      f.e("openSDK_LOG.GameAppOper", "exchangePrize failed, shareid_list is empty.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "exchangePrize failed, shareid_list is empty."));
      return;
    }
    final StringBuffer localStringBuffer = new StringBuffer("");
    int j = paramBundle.size();
    int i = 0;
    while (i < j)
    {
      String str = (String)paramBundle.get(i);
      if (!TextUtils.isEmpty(str))
      {
        localStringBuffer.append(str);
        if (i < j - 1) {
          localStringBuffer.append(",");
        }
      }
      i += 1;
    }
    paramBundle = paramContext;
    if (paramContext == null) {
      paramBundle = Global.getContext();
    }
    ThreadManager.executeOnSubThread(new Runnable()
    {
      public void run()
      {
        Object localObject = GameAppOperation.a(GameAppOperation.this);
        if (localObject == null)
        {
          f.e("openSDK_LOG.GameAppOper", "accesstoken or openid or appid is null, please login first!");
          paramIUiListener.onError(new UiError(-5, "传入参数有误!", "accesstoken or openid or appid is null, please login first!"));
          return;
        }
        ((Bundle)localObject).putString("shareid", localStringBuffer.toString());
        ((Bundle)localObject).putString("imei", c.b(Global.getContext()));
        try
        {
          localObject = HttpUtils.request(GameAppOperation.e(GameAppOperation.this), paramBundle, "http://fusion.qq.com/cgi-bin/prize_sharing/exchange_prize.cgi", (Bundle)localObject, "GET");
          paramIUiListener.onComplete(localObject);
          return;
        }
        catch (Exception localException)
        {
          f.b("openSDK_LOG.GameAppOper", "Exception occur in exchangePrize", localException);
          paramIUiListener.onError(new UiError(-2, "网络连接异常，请检查后重试!", localException.getMessage()));
        }
      }
    });
  }
  
  public void isActivityAvailable(final Activity paramActivity, final String paramString, final IUiListener paramIUiListener)
  {
    if (TextUtils.isEmpty(paramString))
    {
      f.e("openSDK_LOG.GameAppOper", "isActivityAvailable failed, activityId is null.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "isActivityAvailable failed, activityId is null."));
      return;
    }
    if ((this.mToken == null) || (!this.mToken.isSessionValid()))
    {
      f.e("openSDK_LOG.GameAppOper", "exchangePrize failed, auth token is illegal.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "exchangePrize failed, auth token is illegal."));
      return;
    }
    ThreadManager.executeOnSubThread(new Runnable()
    {
      public void run()
      {
        Object localObject = GameAppOperation.a(GameAppOperation.this);
        if (localObject == null)
        {
          f.e("openSDK_LOG.GameAppOper", "accesstoken or openid or appid is null, please login first!");
          paramIUiListener.onError(new UiError(-5, "传入参数有误!", "accesstoken or openid or appid is null, please login first!"));
          return;
        }
        ((Bundle)localObject).putString("activityid", paramString);
        try
        {
          localObject = HttpUtils.request(GameAppOperation.f(GameAppOperation.this), paramActivity.getApplicationContext(), "http://fusion.qq.com/cgi-bin/prize_sharing/get_activity_state.cgi", (Bundle)localObject, "GET");
          paramIUiListener.onComplete(localObject);
          return;
        }
        catch (Exception localException)
        {
          f.a("openSDK_LOG.GameAppOper", "Exception occur in make_share_url", localException);
          paramIUiListener.onError(new UiError(-6, "Exception occur in make_share_url", localException.getMessage()));
        }
      }
    });
  }
  
  public void makeFriend(Activity paramActivity, Bundle paramBundle)
  {
    f.c("openSDK_LOG", "-->makeFriend()  -- start");
    if (paramBundle == null)
    {
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDQQ.MAKEAFRIEND.XX", "14", "18", "1");
      return;
    }
    String str1 = paramBundle.getString("fopen_id");
    if (TextUtils.isEmpty(str1))
    {
      f.e("openSDK_LOG", "-->make friend, fOpenid is empty.");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDQQ.MAKEAFRIEND.XX", "14", "18", "1");
      return;
    }
    String str2 = paramBundle.getString("friend_label");
    paramBundle = paramBundle.getString("add_msg");
    String str3 = Util.getApplicationLable(paramActivity);
    String str4 = this.mToken.getOpenId();
    String str5 = this.mToken.getAppId();
    f.b("openSDK_LOG", "-->make friend, fOpenid: " + str1 + " | label: " + str2 + " | message: " + paramBundle + " | openid: " + str4 + " | appid:" + str5);
    StringBuffer localStringBuffer = new StringBuffer("mqqapi://gamesdk/add_friend?src_type=app&version=1");
    localStringBuffer.append("&fopen_id=" + Base64.encodeToString(Util.getBytesUTF8(str1), 2));
    if (!TextUtils.isEmpty(str4)) {
      localStringBuffer.append("&open_id=" + Base64.encodeToString(Util.getBytesUTF8(str4), 2));
    }
    if (!TextUtils.isEmpty(str5)) {
      localStringBuffer.append("&app_id=" + str5);
    }
    if (!TextUtils.isEmpty(str2)) {
      localStringBuffer.append("&friend_label=" + Base64.encodeToString(Util.getBytesUTF8(str2), 2));
    }
    if (!TextUtils.isEmpty(paramBundle)) {
      localStringBuffer.append("&add_msg=" + Base64.encodeToString(Util.getBytesUTF8(paramBundle), 2));
    }
    if (!TextUtils.isEmpty(str3)) {
      localStringBuffer.append("&app_name=" + Base64.encodeToString(Util.getBytesUTF8(str3), 2));
    }
    f.b("openSDK_LOG", "-->make friend, url: " + localStringBuffer.toString());
    this.mActivityIntent = new Intent("android.intent.action.VIEW");
    this.mActivityIntent.setData(Uri.parse(localStringBuffer.toString()));
    if ((hasActivityForIntent()) && (SystemUtils.compareQQVersion(paramActivity, "5.1.0") >= 0)) {}
    for (;;)
    {
      try
      {
        paramActivity.startActivityForResult(this.mActivityIntent, 0);
        d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDQQ.MAKEAFRIEND.XX", "14", "18", "0");
        f.c("openSDK_LOG", "-->makeFriend()  -- end");
        return;
      }
      catch (Exception paramBundle)
      {
        f.b("openSDK_LOG", "-->make friend, start activity exception.", paramBundle);
        a(paramActivity);
        d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDQQ.MAKEAFRIEND.XX", "14", "18", "1");
        continue;
      }
      f.d("openSDK_LOG", "-->make friend, there is no activity.");
      a(paramActivity);
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDQQ.MAKEAFRIEND.XX", "14", "18", "1");
    }
  }
  
  public void queryUnexchangePrize(Context paramContext, final Bundle paramBundle, final IUiListener paramIUiListener)
  {
    if (paramIUiListener == null)
    {
      f.e("openSDK_LOG.GameAppOper", "listener is null!");
      return;
    }
    if (paramBundle == null)
    {
      f.e("openSDK_LOG.GameAppOper", "params is null!");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "params is null!"));
      return;
    }
    if ((this.mToken == null) || (!this.mToken.isSessionValid()))
    {
      f.e("openSDK_LOG.GameAppOper", "queryUnexchangePrize failed, auth token is illegal.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "queryUnexchangePrize failed, auth token is illegal."));
      return;
    }
    if ((paramContext == null) && (Global.getContext() == null))
    {
      f.e("openSDK_LOG.GameAppOper", "queryUnexchangePrize failed, context is null.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "queryUnexchangePrize failed, context is null."));
      return;
    }
    if (TextUtils.isEmpty(paramBundle.getString("activityid")))
    {
      f.e("openSDK_LOG.GameAppOper", "queryUnexchangePrize failed, activityId is empty.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "queryUnexchangePrize failed, activityId is empty."));
      return;
    }
    final Context localContext = paramContext;
    if (paramContext == null) {
      localContext = Global.getContext();
    }
    ThreadManager.executeOnSubThread(new Runnable()
    {
      public void run()
      {
        Object localObject = GameAppOperation.a(GameAppOperation.this);
        if (localObject == null)
        {
          f.e("openSDK_LOG.GameAppOper", "accesstoken or openid or appid is null, please login first!");
          paramIUiListener.onError(new UiError(-5, "传入参数有误!", "accesstoken or openid or appid is null, please login first!"));
          return;
        }
        ((Bundle)localObject).putAll(paramBundle);
        try
        {
          localObject = HttpUtils.request(GameAppOperation.d(GameAppOperation.this), localContext, "http://fusion.qq.com/cgi-bin/prize_sharing/query_unexchange_prize.cgi", (Bundle)localObject, "GET");
          paramIUiListener.onComplete(localObject);
          return;
        }
        catch (Exception localException)
        {
          f.b("openSDK_LOG.GameAppOper", "Exception occur in queryUnexchangePrize", localException);
          paramIUiListener.onError(new UiError(-2, "网络连接异常，请检查后重试!", localException.getMessage()));
        }
      }
    });
  }
  
  public void releaseResource()
  {
    f.c("openSDK_LOG", "releaseResource() -- start");
    TemporaryStorage.remove("sendToMyComputer");
    TemporaryStorage.remove("addToQQFavorites");
    TemporaryStorage.remove("shareToTroopBar");
    f.c("openSDK_LOG", "releaseResource() -- end");
  }
  
  public void sendToMyComputer(Activity paramActivity, Bundle paramBundle, IUiListener paramIUiListener)
  {
    f.c("openSDK_LOG", "sendToMyComputer() --start");
    int j = paramBundle.getInt("req_type", 1);
    if (!a(paramActivity, paramBundle, paramIUiListener))
    {
      a("22", j, "1");
      return;
    }
    StringBuffer localStringBuffer = new StringBuffer("mqqapi://share/to_qqdataline?src_type=app&version=1&file_type=news");
    Object localObject = paramBundle.getString("image_url");
    String str3 = paramBundle.getString("title");
    String str4 = paramBundle.getString("description");
    String str5 = paramBundle.getString("url");
    String str2 = paramBundle.getString("audioUrl");
    String str1 = Util.getApplicationLable(paramActivity);
    if (str1 == null) {
      str1 = paramBundle.getString("app_name");
    }
    for (;;)
    {
      paramBundle = paramBundle.getStringArrayList("file_data");
      String str7 = this.mToken.getAppId();
      String str6 = this.mToken.getOpenId();
      f.b("sendToMyComputer", "openId:" + str6);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        localStringBuffer.append("&image_url=" + Base64.encodeToString(Util.getBytesUTF8((String)localObject), 2));
      }
      if (paramBundle != null)
      {
        localObject = new StringBuffer();
        int k = paramBundle.size();
        int i = 0;
        for (;;)
        {
          if (i < k) {
            try
            {
              ((StringBuffer)localObject).append(URLEncoder.encode(((String)paramBundle.get(i)).trim(), "UTF-8"));
              if (i != k - 1) {
                ((StringBuffer)localObject).append(";");
              }
              i += 1;
            }
            catch (UnsupportedEncodingException localUnsupportedEncodingException)
            {
              for (;;)
              {
                localUnsupportedEncodingException.printStackTrace();
                f.b("openSDK_LOG", "UnsupportedEncodingException", localUnsupportedEncodingException);
                ((StringBuffer)localObject).append(URLEncoder.encode(((String)paramBundle.get(i)).trim()));
              }
            }
          }
        }
        localStringBuffer.append("&file_data=" + Base64.encodeToString(Util.getBytesUTF8(((StringBuffer)localObject).toString()), 2));
      }
      if (!TextUtils.isEmpty(str3)) {
        localStringBuffer.append("&title=" + Base64.encodeToString(Util.getBytesUTF8(str3), 2));
      }
      if (!TextUtils.isEmpty(str4)) {
        localStringBuffer.append("&description=" + Base64.encodeToString(Util.getBytesUTF8(str4), 2));
      }
      if (!TextUtils.isEmpty(str7)) {
        localStringBuffer.append("&share_id=" + str7);
      }
      if (!TextUtils.isEmpty(str5)) {
        localStringBuffer.append("&url=" + Base64.encodeToString(Util.getBytesUTF8(str5), 2));
      }
      if (!TextUtils.isEmpty(str1))
      {
        paramBundle = str1;
        if (str1.length() > 20) {
          paramBundle = str1.substring(0, 20) + "...";
        }
        localStringBuffer.append("&app_name=" + Base64.encodeToString(Util.getBytesUTF8(paramBundle), 2));
      }
      if (!TextUtils.isEmpty(str6)) {
        localStringBuffer.append("&open_id=" + Base64.encodeToString(Util.getBytesUTF8(str6), 2));
      }
      if (!TextUtils.isEmpty(str2)) {
        localStringBuffer.append("&audioUrl=" + Base64.encodeToString(Util.getBytesUTF8(str2), 2));
      }
      localStringBuffer.append("&req_type=" + Base64.encodeToString(Util.getBytesUTF8(String.valueOf(j)), 2));
      f.b("sendToMyComputer url: ", localStringBuffer.toString());
      a.a(Global.getContext(), this.mToken, "requireApi", new String[] { "sendToMyComputer" });
      this.mActivityIntent = new Intent("android.intent.action.VIEW");
      this.mActivityIntent.setData(Uri.parse(localStringBuffer.toString()));
      this.mActivityIntent.putExtra("pkg_name", paramActivity.getPackageName());
      paramBundle = TemporaryStorage.set("sendToMyComputer", paramIUiListener);
      if (paramBundle != null) {
        ((IUiListener)paramBundle).onCancel();
      }
      if ((hasActivityForIntent()) && (SystemUtils.compareQQVersion(paramActivity, "5.2.0") >= 0)) {}
      for (;;)
      {
        try
        {
          startAssistActivity(paramActivity, 10106);
          a("22", j, "0");
          f.c("openSDK_LOG", "sendToMyComputer() --end");
          return;
        }
        catch (Exception paramBundle)
        {
          f.b("openSDK_LOG", "-->addToQQFavorites, start activity exception.", paramBundle);
          a("22", j, "1");
          a(paramActivity);
          continue;
        }
        f.d("openSDK_LOG", "-->addToQQFavorites, there is no activity, show download page.");
        a("22", j, "1");
        a(paramActivity);
      }
    }
  }
  
  public void sharePrizeToQQ(final Activity paramActivity, final Bundle paramBundle, final IUiListener paramIUiListener)
  {
    f.c("openSDK_LOG", "sharePrizeToQQ() -- start");
    if (paramIUiListener == null)
    {
      f.e("openSDK_LOG.GameAppOper", "listener is null!");
      return;
    }
    if ((paramActivity == null) || (paramBundle == null))
    {
      f.e("openSDK_LOG.GameAppOper", "activity or params is null!");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "activity or params is null!"));
      return;
    }
    String str1 = paramBundle.getString("title");
    if (TextUtils.isEmpty(str1))
    {
      f.e("openSDK_LOG.GameAppOper", "sharePrizeToQQ failed, title is empty.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "sharePrizeToQQ failed, title is empty."));
      return;
    }
    String str2 = paramBundle.getString("summary");
    if (TextUtils.isEmpty(str2))
    {
      f.e("openSDK_LOG.GameAppOper", "sharePrizeToQQ failed, sumary is empty.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "sharePrizeToQQ failed, sumary is empty."));
      return;
    }
    String str3 = paramBundle.getString("imageUrl");
    if ((TextUtils.isEmpty(str3)) || ((!str3.startsWith("http://")) && (!str3.startsWith("https://"))))
    {
      f.e("openSDK_LOG.GameAppOper", "sharePrizeToQQ failed, imageUrl is empty or illegal.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "sharePrizeToQQ failed, imageUrl is empty or illegal."));
      return;
    }
    paramBundle = paramBundle.getString("activityid");
    if (TextUtils.isEmpty(paramBundle))
    {
      f.e("openSDK_LOG.GameAppOper", "sharePrizeToQQ failed, activityId is empty.");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "sharePrizeToQQ failed, activityId is empty."));
      return;
    }
    final Bundle localBundle = new Bundle();
    localBundle.putString("title", str1);
    localBundle.putString("summary", str2);
    localBundle.putString("imageUrl", str3);
    localBundle.putInt("req_type", 1);
    ThreadManager.executeOnSubThread(new Runnable()
    {
      public void run()
      {
        Object localObject = GameAppOperation.a(GameAppOperation.this);
        if (localObject == null)
        {
          f.e("openSDK_LOG.GameAppOper", "accesstoken or openid or appid is null, please login first!");
          paramIUiListener.onError(new UiError(-5, "传入参数有误!", "accesstoken or openid or appid is null, please login first!"));
          return;
        }
        ((Bundle)localObject).putString("activityid", paramBundle);
        int i;
        try
        {
          localObject = HttpUtils.request(GameAppOperation.b(GameAppOperation.this), paramActivity.getApplicationContext(), "http://fusion.qq.com/cgi-bin/prize_sharing/make_share_url.cgi", (Bundle)localObject, "GET");
          try
          {
            i = ((JSONObject)localObject).getInt("ret");
            int j = ((JSONObject)localObject).getInt("subCode");
            if ((i == 0) && (j == 0))
            {
              localObject = ((JSONObject)localObject).getString("share_url");
              localBundle.putString("targetUrl", (String)localObject);
              new QQShare(paramActivity.getApplicationContext(), GameAppOperation.c(GameAppOperation.this)).shareToQQ(paramActivity, localBundle, paramIUiListener);
              return;
            }
          }
          catch (JSONException localJSONException)
          {
            f.e("openSDK_LOG.GameAppOper", "JSONException occur in make_share_url, errorMsg: " + localJSONException.getMessage());
            paramIUiListener.onError(new UiError(-4, "服务器返回数据格式有误!", ""));
            return;
          }
          str = localException.getString("msg");
        }
        catch (Exception localException)
        {
          f.b("openSDK_LOG.GameAppOper", "Exception occur in make_share_url", localException);
          paramIUiListener.onError(new UiError(-2, "网络连接异常，请检查后重试!", localException.getMessage()));
          return;
        }
        String str;
        paramIUiListener.onError(new UiError(i, "make_share_url error.", str));
      }
    });
    f.c("openSDK_LOG", "sharePrizeToQQ() -- end");
  }
  
  public void shareToTroopBar(Activity paramActivity, Bundle paramBundle, IUiListener paramIUiListener)
  {
    f.c("openSDK_LOG", "shareToTroopBar() -- start");
    if (paramIUiListener == null)
    {
      f.e("openSDK_LOG.GameAppOper", "listener is null!");
      return;
    }
    if ((paramActivity == null) || (paramBundle == null))
    {
      f.e("openSDK_LOG.GameAppOper", "activity or params is null!");
      paramIUiListener.onError(new UiError(-5, "传入参数有误!", "activity or params is null!"));
      return;
    }
    String str1 = paramBundle.getString("title");
    if (TextUtils.isEmpty(str1))
    {
      paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: title is null", null));
      f.e("openSDK_LOG", "shareToTroopBar() -- title is null");
      return;
    }
    if ((str1.length() < 4) || (str1.length() > 25))
    {
      paramIUiListener.onError(new UiError(-5, "传入参数有误!: title size: 4 ~ 25", null));
      f.e("openSDK_LOG", "shareToTroopBar() -- title size: 4 ~ 25");
      return;
    }
    String str2 = paramBundle.getString("description");
    if (TextUtils.isEmpty(str2))
    {
      paramIUiListener.onError(new UiError(-5, "传入参数不可以为空: description is null", null));
      f.e("openSDK_LOG", "shareToTroopBar() -- description is null");
      return;
    }
    if ((str2.length() < 10) || (str2.length() > 700))
    {
      paramIUiListener.onError(new UiError(-5, "传入参数有误!: description size: 10 ~ 700", null));
      f.e("openSDK_LOG", "shareToTroopBar() -- description size: 10 ~ 700");
      return;
    }
    Object localObject = paramBundle.getStringArrayList("file_data");
    StringBuffer localStringBuffer1 = new StringBuffer();
    if ((localObject != null) && (((ArrayList)localObject).size() > 0))
    {
      int j = ((ArrayList)localObject).size();
      if (j > 9)
      {
        paramIUiListener.onError(new UiError(-5, "传入参数有误!: file_data size: 1 ~ 9", null));
        f.e("openSDK_LOG", "shareToTroopBar() -- file_data size: 1 ~ 9");
        return;
      }
      int i = 0;
      while (i < j)
      {
        String str3 = ((String)((ArrayList)localObject).get(i)).trim();
        if (!str3.startsWith("/"))
        {
          paramIUiListener.onError(new UiError(-6, "传入参数有误!", "file_data应该为本地图片"));
          f.e("openSDK_LOG", "shareToTroopBar(): file_data应该为本地图片");
          return;
        }
        if ((str3.startsWith("/")) && (!new File(str3).exists()))
        {
          paramIUiListener.onError(new UiError(-6, "传入参数有误!", "图片文件不存在"));
          f.e("openSDK_LOG", "shareToTroopBar(): 图片文件不存在");
          return;
        }
        i += 1;
      }
      i = 0;
      for (;;)
      {
        if (i < j) {
          try
          {
            localStringBuffer1.append(URLEncoder.encode(((String)((ArrayList)localObject).get(i)).trim(), "UTF-8"));
            if (i != j - 1) {
              localStringBuffer1.append(";");
            }
            i += 1;
          }
          catch (UnsupportedEncodingException localUnsupportedEncodingException)
          {
            for (;;)
            {
              localUnsupportedEncodingException.printStackTrace();
              f.b("openSDK_LOG", "UnsupportedEncodingException: ", localUnsupportedEncodingException);
              localStringBuffer1.append(URLEncoder.encode(((String)((ArrayList)localObject).get(i)).trim()));
            }
          }
        }
      }
    }
    String str4 = paramBundle.getString("troopbar_id");
    if ((!TextUtils.isEmpty(str4)) && (!Util.isNumeric(str4)))
    {
      paramIUiListener.onError(new UiError(-6, "传入参数有误! troopbar_id 必须为数字", null));
      f.e("openSDK_LOG", "shareToTroopBar(): troopbar_id 必须为数字");
      return;
    }
    StringBuffer localStringBuffer2 = new StringBuffer("mqqapi://share/to_troopbar?src_type=app&version=1&file_type=news");
    paramBundle = this.mToken.getAppId();
    String str5 = this.mToken.getOpenId();
    f.b("openSDK_LOG", "shareToTroopBar() -- openId: " + str5);
    localObject = Util.getApplicationLable(paramActivity);
    if (!TextUtils.isEmpty(paramBundle)) {
      localStringBuffer2.append("&share_id=" + paramBundle);
    }
    if (!TextUtils.isEmpty(str5)) {
      localStringBuffer2.append("&open_id=" + Base64.encodeToString(Util.getBytesUTF8(str5), 2));
    }
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      paramBundle = (Bundle)localObject;
      if (((String)localObject).length() > 20) {
        paramBundle = ((String)localObject).substring(0, 20) + "...";
      }
      localStringBuffer2.append("&app_name=" + Base64.encodeToString(Util.getBytesUTF8(paramBundle), 2));
    }
    if (!TextUtils.isEmpty(str1)) {
      localStringBuffer2.append("&title=" + Base64.encodeToString(Util.getBytesUTF8(str1), 2));
    }
    if (!TextUtils.isEmpty(str2)) {
      localStringBuffer2.append("&description=" + Base64.encodeToString(Util.getBytesUTF8(str2), 2));
    }
    if (!TextUtils.isEmpty(str4)) {
      localStringBuffer2.append("&troopbar_id=" + Base64.encodeToString(Util.getBytesUTF8(str4), 2));
    }
    if (!TextUtils.isEmpty(localStringBuffer1)) {
      localStringBuffer2.append("&file_data=" + Base64.encodeToString(Util.getBytesUTF8(localStringBuffer1.toString()), 2));
    }
    f.b("shareToTroopBar, url: ", localStringBuffer2.toString());
    a.a(Global.getContext(), this.mToken, "requireApi", new String[] { "shareToTroopBar" });
    this.mActivityIntent = new Intent("android.intent.action.VIEW");
    this.mActivityIntent.setData(Uri.parse(localStringBuffer2.toString()));
    paramBundle = paramActivity.getPackageName();
    if (!TextUtils.isEmpty(paramBundle)) {
      this.mActivityIntent.putExtra("pkg_name", paramBundle);
    }
    paramBundle = TemporaryStorage.set("shareToTroopBar", paramIUiListener);
    if (paramBundle != null) {
      ((IUiListener)paramBundle).onCancel();
    }
    if ((hasActivityForIntent()) && (SystemUtils.compareQQVersion(paramActivity, "5.3.0") >= 0)) {}
    for (;;)
    {
      try
      {
        startAssistActivity(paramActivity, 10107);
        d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.SHARETOTROOPBAR.XX", "23", "18", "0");
        f.c("openSDK_LOG", "shareToTroopBar() -- end");
        return;
      }
      catch (Exception paramBundle)
      {
        f.b("openSDK_LOG", "-->shareToTroopBar, start activity exception.", paramBundle);
        d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.SHARETOTROOPBAR.XX", "23", "18", "1");
        a(paramActivity, "5.3.0");
        continue;
      }
      f.d("openSDK_LOG", "-->shareToTroopBar, there is no activity, show download page.");
      a(paramActivity, "5.3.0");
      d.a().a(this.mToken.getOpenId(), this.mToken.getAppId(), "ANDROIDSDK.SHARETOTROOPBAR.XX", "23", "18", "1");
    }
  }
}
