package com.tencent.tmassistantsdk.internal.d;

import com.tencent.tmassistantbase.network.GetHttpRequest;
import com.tencent.tmassistantbase.util.TMLog;
import com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.TMAssistantAuthorizedInfo;
import com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c;
import java.net.URLEncoder;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class a
  extends GetHttpRequest
{
  protected b a = null;
  
  public a() {}
  
  private com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.b a(JSONObject paramJSONObject)
  {
    com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.b localB = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.b();
    localB.a = paramJSONObject.getInt("hasAuthoried");
    localB.c = paramJSONObject.getInt("errorCode");
    localB.d = paramJSONObject.getString("downloadUrl");
    localB.e = paramJSONObject.getInt("versionCode");
    Object localObject = paramJSONObject.getJSONObject("tipsInfo");
    JSONArray localJSONArray = null;
    paramJSONObject = localJSONArray;
    if (localObject != null)
    {
      paramJSONObject = localJSONArray;
      if (((JSONObject)localObject).length() > 0)
      {
        paramJSONObject = new c();
        paramJSONObject.a = ((JSONObject)localObject).getString("title");
        paramJSONObject.b = ((JSONObject)localObject).getString("content");
        localJSONArray = ((JSONObject)localObject).getJSONArray("actionButton");
        localObject = new ArrayList();
        if ((localJSONArray != null) && (localJSONArray.length() > 0))
        {
          int i = 0;
          while (i < localJSONArray.length())
          {
            com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a localA = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a();
            localA.a = localJSONArray.getJSONObject(i).getString("textInstalled");
            localA.b = localJSONArray.getJSONObject(i).getString("textUninstalled");
            localA.c = localJSONArray.getJSONObject(i).getInt("jumpType");
            localA.d = localJSONArray.getJSONObject(i).getString("jumpUrl");
            ((ArrayList)localObject).add(localA);
            i += 1;
          }
        }
        paramJSONObject.c = ((ArrayList)localObject);
      }
    }
    localB.b = paramJSONObject;
    TMLog.i("GetAuthorizedHttpRequest", "dataInfo :" + localB.toString());
    return localB;
  }
  
  private String b(TMAssistantAuthorizedInfo paramTMAssistantAuthorizedInfo)
  {
    String str = "" + "?appId=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.appId);
    str = str + "&userId=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.userId);
    str = str + "&userIdType=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.userIdType);
    str = str + "&identityInfo=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.identityInfo);
    str = str + "&identityType=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.identityType);
    str = str + "&gamePackageName=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.gamePackageName);
    str = str + "&gameVersionCode=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.gameVersionCode);
    str = str + "&gameChannelId=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.gameChannelId);
    str = str + "&actionFlag=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.actionFlag);
    str = str + "&verifyType=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.verifyType);
    str = str + "&via=" + URLEncoder.encode(paramTMAssistantAuthorizedInfo.via);
    return str + "&actionType=" + paramTMAssistantAuthorizedInfo.actionType;
  }
  
  public void a(b paramB)
  {
    this.a = paramB;
  }
  
  public void a(TMAssistantAuthorizedInfo paramTMAssistantAuthorizedInfo)
  {
    TMLog.i("GetAuthorizedHttpRequest", "authorizedInfo = " + paramTMAssistantAuthorizedInfo);
    if (paramTMAssistantAuthorizedInfo != null) {
      super.sendData(b(paramTMAssistantAuthorizedInfo));
    }
  }
  
  protected void onFinished(JSONObject paramJSONObject, int paramInt)
  {
    if (this.a == null) {
      TMLog.i("GetAuthorizedHttpRequest", "mGetAuthorizedListener is null !");
    }
    for (;;)
    {
      return;
      TMLog.i("GetAuthorizedHttpRequest", "responseData = " + paramJSONObject + ",errorCode = " + paramInt);
      if ((paramInt == 0) && (paramJSONObject != null)) {
        try
        {
          paramJSONObject = a(paramJSONObject);
          if (paramJSONObject != null)
          {
            this.a.a(paramJSONObject, 0);
            return;
          }
        }
        catch (JSONException paramJSONObject)
        {
          this.a.a(null, 704);
          paramJSONObject.printStackTrace();
          return;
        }
      }
    }
    this.a.a(null, paramInt);
  }
}
