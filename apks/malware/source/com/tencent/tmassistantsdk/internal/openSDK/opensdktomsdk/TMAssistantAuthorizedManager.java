package com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.text.TextUtils;
import android.view.View.OnClickListener;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.qq.taf.jce.JceStruct;
import com.tencent.tmassistantbase.util.Res;
import com.tencent.tmassistantbase.util.TMLog;
import com.tencent.tmassistantsdk.TMAssistantCallYYB_V1;
import com.tencent.tmassistantsdk.internal.protocol.jce.TipsInfoLog;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

public class TMAssistantAuthorizedManager
{
  protected static final String CLIENT_NAME = "downloadSDKClient";
  protected static final String TAG = "OpensdkToMsdkManager";
  protected static TMAssistantAuthorizedManager mInstance = null;
  protected int authorizedState = 0;
  protected com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.a.a dialog = null;
  protected boolean hasNotify = false;
  protected long insertActionId = -1L;
  protected boolean isInstallFinished = false;
  protected TMAssistantAuthorizedInfo mAuthorizedInfo = null;
  protected com.tencent.tmassistant.b mClient = null;
  protected Context mContext = null;
  protected com.tencent.tmassistant.a mDownloadSDKListener = new i(this);
  protected String mDownloadUrl = null;
  protected com.tencent.tmassistantsdk.internal.d.a mHttpRequest = null;
  protected Handler mMainMessageHandler = null;
  protected TMAssistantCallYYB_V1 mOpenSDK = null;
  protected com.tencent.tmassistantsdk.internal.d.b mRequestListener = new b(this);
  protected Handler mSubMessageHandler = null;
  protected HandlerThread mSubMessagehandlerThread = null;
  protected int mSupportVersionCode = 0;
  protected ITMAssistantAuthorizedListener mToMsdkListener = null;
  protected View.OnClickListener negativeBtnListenner = new e(this);
  protected View.OnClickListener positiveBtnListener = new f(this);
  protected View.OnClickListener retryBtnListener = new d(this);
  protected com.tencent.tmassistantsdk.internal.a.b sdkChannel = null;
  
  private TMAssistantAuthorizedManager(Context paramContext)
  {
    this.mContext = paramContext;
  }
  
  public static TMAssistantAuthorizedManager getInstance(Context paramContext)
  {
    try
    {
      if (mInstance == null) {
        mInstance = new TMAssistantAuthorizedManager(paramContext);
      }
      paramContext = mInstance;
      return paramContext;
    }
    finally {}
  }
  
  protected void continueDownload()
  {
    TMLog.i("OpensdkToMsdkManager", "continueDownload");
    this.mSubMessageHandler.post(new c(this));
  }
  
  protected com.tencent.tmassistant.b getClient()
  {
    if (this.mContext != null)
    {
      if (this.mClient == null)
      {
        com.tencent.tmassistant.b localB = com.tencent.tmassistant.f.a(this.mContext).a("downloadSDKClient");
        localB.a(this.mDownloadSDKListener);
        this.mClient = localB;
        return localB;
      }
      return this.mClient;
    }
    return null;
  }
  
  public void getUserAuthorizedInfo(TMAssistantAuthorizedInfo paramTMAssistantAuthorizedInfo, Context paramContext)
  {
    if (paramContext != null) {
      this.mContext = paramContext;
    }
    TMLog.i("OpensdkToMsdkManager", "getUserAuthorizedInfo method called!");
    this.hasNotify = false;
    if (this.mHttpRequest != null) {
      TMLog.i("OpensdkToMsdkManager", "mHttpRequest != null, request didn't finish!");
    }
    do
    {
      return;
      if (paramTMAssistantAuthorizedInfo == null) {
        break;
      }
      TMLog.i("OpensdkToMsdkManager", "authorizedInfo = " + paramTMAssistantAuthorizedInfo);
      this.mAuthorizedInfo = paramTMAssistantAuthorizedInfo;
    } while (this.mHttpRequest != null);
    this.authorizedState = 1;
    this.mHttpRequest = new com.tencent.tmassistantsdk.internal.d.a();
    this.mHttpRequest.a(this.mRequestListener);
    this.mHttpRequest.a(paramTMAssistantAuthorizedInfo);
    return;
    TMLog.i("OpensdkToMsdkManager", "AuthorizedInfo object is null!");
  }
  
  protected void handleDownloadContinue(long paramLong1, long paramLong2)
  {
    if (this.mContext == null) {
      TMLog.i("OpensdkToMsdkManager", "handleDownloading context = null!");
    }
    Res localRes;
    do
    {
      return;
      localRes = new Res(this.mContext);
      String str1 = this.mContext.getString(localRes.string("white_list_positive_continue"));
      String str2 = "(" + (int)(((float)(100L * paramLong1) + 0.0F) / (float)paramLong2) + "%)";
      this.dialog.i.setText(str1 + str2);
      this.dialog.h.setProgress((int)(((float)paramLong1 + 0.0F) / (float)paramLong2 * this.dialog.h.getMax()));
    } while (this.dialog.h.getProgress() <= 0);
    this.dialog.a(localRes.drawable("com_tencent_tmassistant_sdk_button_bg"));
  }
  
  protected void handleDownloadFailed()
  {
    if (this.mContext == null) {
      TMLog.i("OpensdkToMsdkManager", "handleDownloading context = null!");
    }
    Res localRes;
    do
    {
      return;
      localRes = new Res(this.mContext);
      this.dialog.a(true);
      this.dialog.i.setText(this.mContext.getString(localRes.string("white_list_positive_retry")));
    } while (this.dialog.h.getProgress() <= 0);
    this.dialog.a(localRes.drawable("com_tencent_tmassistant_sdk_button_bg"));
  }
  
  protected void handleDownloading(long paramLong1, long paramLong2)
  {
    if (this.mContext == null)
    {
      TMLog.i("OpensdkToMsdkManager", "handleDownloading context = null!");
      return;
    }
    Object localObject = new Res(this.mContext);
    localObject = this.mContext.getString(((Res)localObject).string("white_list_positive_downloading"));
    String str = "(" + (int)(((float)(100L * paramLong1) + 0.0F) / (float)paramLong2) + "%)";
    this.dialog.i.setText((String)localObject + str);
    this.dialog.h.setProgress((int)(((float)paramLong1 + 0.0F) / (float)paramLong2 * this.dialog.h.getMax()));
    TMLog.i("OpensdkToMsdkManager", "handleDownloading : receivedlen:" + paramLong1 + " | totalLen:" + paramLong2);
  }
  
  protected void handleInstall(String paramString, int paramInt)
  {
    if (this.mContext == null) {}
    do
    {
      return;
      localObject = new Res(this.mContext);
      this.dialog.a(true);
      this.dialog.i.setText(this.mContext.getString(((Res)localObject).string("white_list_positive_install")));
      if (this.mContext == null)
      {
        TMLog.i("OpensdkToMsdkManager", "handleDownloading context = null!");
        return;
      }
      this.isInstallFinished = true;
    } while (paramInt == 1);
    Object localObject = new Intent("android.intent.action.VIEW");
    ((Intent)localObject).setDataAndType(Uri.fromFile(new File(paramString)), "application/vnd.android.package-archive");
    this.mContext.startActivity((Intent)localObject);
  }
  
  public void initOpenSDK(ITMAssistantAuthorizedListener paramITMAssistantAuthorizedListener)
  {
    TMLog.i("OpensdkToMsdkManager", "mListener = " + paramITMAssistantAuthorizedListener);
    this.mOpenSDK = TMAssistantCallYYB_V1.getInstance();
    this.mOpenSDK.initTMAssistantCallYYBApi(this.mContext);
    this.mToMsdkListener = paramITMAssistantAuthorizedListener;
    this.sdkChannel = new com.tencent.tmassistantsdk.internal.a.b();
    this.mSubMessagehandlerThread = new HandlerThread("OpenSDKToMsdkManager");
    this.mSubMessagehandlerThread.start();
    this.mSubMessageHandler = new Handler(this.mSubMessagehandlerThread.getLooper());
    this.mMainMessageHandler = new Handler(Looper.getMainLooper(), new a(this));
  }
  
  protected boolean isExitsAction(long paramLong)
  {
    if (paramLong < 0L)
    {
      TMLog.i("OpensdkToMsdkManager", "actionId < 0,return false");
      return false;
    }
    if (this.sdkChannel == null)
    {
      TMLog.i("OpensdkToMsdkManager", "sdkChannel == null,return false");
      return false;
    }
    Iterator localIterator = this.sdkChannel.a().iterator();
    while (localIterator.hasNext())
    {
      com.tencent.tmassistantsdk.internal.a.c localC = (com.tencent.tmassistantsdk.internal.a.c)localIterator.next();
      if ((localC.a == paramLong) && (localC.h - localC.g <= 300000L))
      {
        TMLog.i("OpensdkToMsdkManager", "isExitsAction,return true");
        return true;
      }
    }
    TMLog.i("OpensdkToMsdkManager", "return false");
    return false;
  }
  
  protected void notifyAuthorizedFinished(boolean paramBoolean, TMAssistantAuthorizedInfo paramTMAssistantAuthorizedInfo)
  {
    TMLog.i("OpensdkToMsdkManager", "before realy notifyAuthorizedFinished: TMOpenSDKAuthorizedInfo:" + this.mAuthorizedInfo);
    if (this.mToMsdkListener == null) {
      TMLog.i("OpensdkToMsdkManager", "before notifyAuthorizedFinished: mToMsdkListener = null !");
    }
    if ((this.mToMsdkListener != null) && (this.mAuthorizedInfo != null))
    {
      TMLog.i("OpensdkToMsdkManager", "notifyAuthorizedFinished: result:" + paramBoolean);
      this.mToMsdkListener.onAuthorizedFinished(paramBoolean, this.mAuthorizedInfo);
      this.mHttpRequest = null;
      this.hasNotify = true;
    }
  }
  
  public void onDestroy()
  {
    TMLog.i("OpensdkToMsdkManager", "onDestroy start");
    if ((this.dialog != null) && (this.dialog.isShowing())) {
      this.dialog.dismiss();
    }
    if (this.mOpenSDK != null) {
      this.mOpenSDK.destroyQQDownloaderOpenSDK();
    }
    this.mToMsdkListener = null;
    this.hasNotify = false;
    this.isInstallFinished = false;
    this.authorizedState = 0;
    this.mHttpRequest = null;
    this.mAuthorizedInfo = null;
    this.sdkChannel = null;
    this.insertActionId = -1L;
    if (this.mContext != null) {
      com.tencent.tmassistant.f.b(this.mContext);
    }
    this.mClient = null;
  }
  
  protected void onNetworkException(int paramInt)
  {
    if (this.mContext == null)
    {
      TMLog.e("OpensdkToMsdkManager", "mContext == null");
      return;
    }
    TMLog.i("OpensdkToMsdkManager", "errorCode = " + paramInt);
    Object localObject2 = new Res(this.mContext);
    if (1 == paramInt) {}
    for (Object localObject1 = this.mContext.getString(((Res)localObject2).string("white_list_network_not_connected"));; localObject1 = this.mContext.getString(((Res)localObject2).string("white_list_network_error")))
    {
      com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c localC = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c();
      localC.a = this.mContext.getString(((Res)localObject2).string("white_list_dlg_title"));
      localC.b = ((String)localObject1);
      localObject1 = new ArrayList();
      com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a localA = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a();
      localA.c = 3;
      ((ArrayList)localObject1).add(localA);
      localObject2 = this.mContext.getString(((Res)localObject2).string("white_list_negtive_known"));
      localA.a = ((String)localObject2);
      localA.b = ((String)localObject2);
      localC.c = ((ArrayList)localObject1);
      showDialog(localC);
      this.mHttpRequest = null;
      this.mDownloadUrl = "";
      this.authorizedState = 3;
      TMLog.i("OpensdkToMsdkManager", "network error happened!");
      localObject1 = com.tencent.tmassistantsdk.internal.c.g.h().a(this.mAuthorizedInfo);
      if (localObject1 == null) {
        break;
      }
      ((TipsInfoLog)localObject1).networkErrorTipsCount += 1;
      com.tencent.tmassistantsdk.internal.c.g.h().a((JceStruct)localObject1);
      return;
    }
  }
  
  protected void onNetworkFinishedFailed(int paramInt)
  {
    TMLog.i("OpensdkToMsdkManager", "errorCode = " + paramInt);
    if ((paramInt == 606) || (paramInt == 602) || (paramInt == 601) || (paramInt == 704))
    {
      onServerException(paramInt);
      return;
    }
    onNetworkException(paramInt);
  }
  
  protected void onNetworkFinishedSuccess(com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.b paramB)
  {
    this.mDownloadUrl = paramB.d;
    this.mSupportVersionCode = paramB.e;
    this.mHttpRequest = null;
    TMLog.i("OpensdkToMsdkManager", "onNetworkFinishedSuccess! authorizedResult.hasAuthoried=" + paramB.a + "  listenner:" + this.mToMsdkListener + "  authroizedinfo:" + this.mAuthorizedInfo);
    if (paramB.a == 1)
    {
      this.authorizedState = 2;
      if (paramB.b != null)
      {
        showDialog(paramB.b);
        return;
      }
      notifyAuthorizedFinished(true, this.mAuthorizedInfo);
      return;
    }
    this.authorizedState = 3;
    if (paramB.b != null)
    {
      showDialog(paramB.b);
      return;
    }
    onServerException(paramB.c);
    TMLog.i("OpensdkToMsdkManager", "not in white list and no tips!");
  }
  
  public void onResume()
  {
    TMLog.i("OpensdkToMsdkManager", "onResume start");
    tryToCloseDialog();
    if (this.hasNotify) {}
    while ((this.authorizedState == 2) || ((this.authorizedState != 3) && (this.authorizedState != 0)) || (this.mContext == null)) {
      return;
    }
    getUserAuthorizedInfo(this.mAuthorizedInfo, this.mContext);
  }
  
  protected void onServerException(int paramInt)
  {
    if (this.mContext == null)
    {
      TMLog.e("OpensdkToMsdkManager", "mContext == null");
      return;
    }
    TMLog.i("OpensdkToMsdkManager", "errorCode = " + paramInt);
    Object localObject2 = new Res(this.mContext);
    Object localObject1 = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c();
    ((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c)localObject1).a = this.mContext.getString(((Res)localObject2).string("white_list_dlg_title"));
    if ((paramInt == 602) || (paramInt == 601)) {}
    for (((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c)localObject1).b = this.mContext.getString(((Res)localObject2).string("white_list_network_error"));; ((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c)localObject1).b = this.mContext.getString(((Res)localObject2).string("white_list_server_error")))
    {
      ArrayList localArrayList = new ArrayList();
      com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a localA = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a();
      localA.c = 4;
      Object localObject3 = this.mContext.getString(((Res)localObject2).string("white_list_positive_retry_again"));
      localA.a = ((String)localObject3);
      localA.b = ((String)localObject3);
      localObject3 = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a();
      ((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a)localObject3).c = 3;
      localObject2 = this.mContext.getString(((Res)localObject2).string("white_list_negtive"));
      ((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a)localObject3).a = ((String)localObject2);
      ((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a)localObject3).b = ((String)localObject2);
      localArrayList.add(localA);
      localArrayList.add(localObject3);
      ((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c)localObject1).c = localArrayList;
      showDialog((com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c)localObject1);
      this.mHttpRequest = null;
      this.mDownloadUrl = "";
      this.authorizedState = 3;
      localObject1 = com.tencent.tmassistantsdk.internal.c.g.h().a(this.mAuthorizedInfo);
      if (localObject1 == null) {
        break;
      }
      ((TipsInfoLog)localObject1).networkErrorTipsCount += 1;
      com.tencent.tmassistantsdk.internal.c.g.h().a((JceStruct)localObject1);
      return;
    }
  }
  
  protected void pauseDownloadTask(String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      TMLog.e("OpensdkToMsdkManager", "downloadUrl = null,return");
      return;
    }
    if (this.mAuthorizedInfo == null)
    {
      TMLog.e("OpensdkToMsdkManager", "mAuthorizedInfo = null,return");
      return;
    }
    TMLog.i("OpensdkToMsdkManager", "downloadUrl = " + paramString);
    this.mSubMessageHandler.post(new h(this, paramString));
  }
  
  protected void showDialog(com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.c paramC)
  {
    if (this.mContext == null) {
      TMLog.e("OpensdkToMsdkManager", "mContext == null");
    }
    ArrayList localArrayList;
    do
    {
      do
      {
        return;
        if ((this.dialog != null) && (this.dialog.isShowing()))
        {
          TMLog.i("OpensdkToMsdkManager", "dialog isShowing");
          return;
        }
        if (((this.mContext instanceof Activity)) && (((Activity)this.mContext).isFinishing()))
        {
          TMLog.i("OpensdkToMsdkManager", "context is finishing!  context" + this.mContext);
          return;
        }
        localRes = new Res(this.mContext);
      } while (paramC == null);
      localArrayList = paramC.c;
    } while ((localArrayList == null) || (localArrayList.size() <= 0));
    this.dialog = new com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.a.a(this.mContext, localRes.style("while_list_dialog"), localArrayList.size());
    this.dialog.show();
    this.dialog.a(paramC.a);
    this.dialog.b(paramC.b);
    int i = 0;
    label189:
    if (i < localArrayList.size())
    {
      paramC = (com.tencent.tmassistantsdk.internal.openSDK.opensdktomsdk.b.a)localArrayList.get(i);
      if (paramC.c != 3) {
        break label245;
      }
      this.dialog.d(paramC.a);
      this.dialog.b(this.negativeBtnListenner);
    }
    for (;;)
    {
      i += 1;
      break label189;
      break;
      label245:
      if (paramC.c != 4) {
        break label278;
      }
      this.dialog.c(paramC.b);
      this.dialog.a(this.retryBtnListener);
    }
    for (;;)
    {
      try
      {
        label278:
        int j = this.mOpenSDK.checkQQDownloaderInstalled(this.mSupportVersionCode);
        switch (j)
        {
        }
      }
      catch (Exception localException)
      {
        TipsInfoLog localTipsInfoLog;
        localException.printStackTrace();
        continue;
        this.dialog.c(this.mContext.getString(localRes.string("white_list_positive_update")));
        continueDownload();
        continue;
        this.dialog.c(paramC.b);
        continueDownload();
        continue;
      }
      this.dialog.a(paramC);
      this.dialog.a(this.positiveBtnListener);
      break;
      this.dialog.c(paramC.a);
      localTipsInfoLog = com.tencent.tmassistantsdk.internal.c.g.h().a(this.mAuthorizedInfo);
      if (localTipsInfoLog != null)
      {
        localTipsInfoLog.authorizedTipsCount += 1;
        com.tencent.tmassistantsdk.internal.c.g.h().a(localTipsInfoLog);
      }
    }
  }
  
  protected void startDownloadTask(String paramString1, String paramString2)
  {
    if (TextUtils.isEmpty(paramString1))
    {
      TMLog.e("OpensdkToMsdkManager", "downloadUrl = null,return");
      return;
    }
    TMLog.i("OpensdkToMsdkManager", "downloadUrl = " + paramString1 + ",jumpUrl = " + paramString2);
    this.dialog.a(false);
    this.mSubMessageHandler.post(new g(this, paramString2, paramString1));
  }
  
  protected void startToQQDownloaderAuthorized(String paramString)
  {
    TMLog.i("OpensdkToMsdkManager", "jumpUrl = " + paramString);
    if (this.dialog.isShowing()) {
      this.dialog.dismiss();
    }
    this.mHttpRequest = null;
    this.isInstallFinished = false;
    if (TextUtils.isEmpty(paramString)) {}
    do
    {
      return;
      TipsInfoLog localTipsInfoLog = com.tencent.tmassistantsdk.internal.c.g.h().a(this.mAuthorizedInfo);
      if (localTipsInfoLog != null)
      {
        localTipsInfoLog.authorizedBtnClickCount += 1;
        com.tencent.tmassistantsdk.internal.c.g.h().a(localTipsInfoLog);
      }
    } while ((this.mContext == null) || (this.mOpenSDK == null));
    this.mOpenSDK.startToAuthorized(this.mContext, paramString);
  }
  
  protected void tryToCloseDialog()
  {
    if (this.mOpenSDK == null) {
      TMLog.e("OpensdkToMsdkManager", "mOpenSDK == null,return");
    }
    for (;;)
    {
      return;
      if (this.mContext == null)
      {
        TMLog.e("OpensdkToMsdkManager", "mContext == null,return");
        return;
      }
      TMLog.i("OpensdkToMsdkManager", "tryToCloseDialog");
      try
      {
        int i = this.mOpenSDK.checkQQDownloaderInstalled(this.mSupportVersionCode);
        if ((this.isInstallFinished) && (i == 0))
        {
          this.mHttpRequest = null;
          this.isInstallFinished = false;
          this.mDownloadUrl = null;
          if (this.dialog.isShowing()) {
            this.dialog.dismiss();
          }
          com.tencent.tmassistant.f.b(this.mContext);
          this.mClient = null;
          if (isExitsAction(this.insertActionId))
          {
            this.mOpenSDK.startQQDownloader(this.mContext);
            return;
          }
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
  }
}
