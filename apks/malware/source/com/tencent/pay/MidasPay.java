package com.tencent.pay;

import android.app.Activity;
import android.util.Log;
import com.tencent.midas.api.APMidasPayAPI;
import com.tencent.midas.api.APMidasResponse;
import com.tencent.midas.api.IAPMidasNetCallBack;
import com.tencent.midas.api.IAPMidasPayCallBack;
import com.tencent.midas.api.request.APMidasGameRequest;
import com.tencent.midas.api.request.APMidasGoodsRequest;
import com.tencent.midas.api.request.APMidasMonthRequest;
import com.tencent.midas.api.request.APMidasNetRequest;
import com.tencent.midas.api.request.APMidasSubscribeRequest;
import com.tencent.midas.comm.APLog;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.consts.EPlatform;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdkwrap.AppInfo;
import com.tencent.tmgp.lucifer.R.drawable;
import com.unity3d.player.UnityPlayer;
import java.util.Iterator;
import java.util.Vector;
import org.json.JSONException;
import org.json.JSONObject;

public class MidasPay
  implements IAPMidasPayCallBack
{
  public static boolean IsLogEnable = false;
  public static boolean IsRelease = false;
  private String acctType = "";
  private String classNameStr = "";
  private String env = "release";
  private String gamePfStr = "";
  private JSONObject inputData;
  private String jsonKey_acctType = "acctType";
  private String jsonKey_discountType = "discountType";
  private String jsonKey_discountUrl = "discountUrl";
  private String jsonKey_gamePf = "gamePf";
  private String jsonKey_goodsTokenUrl = "goodsTokenUrl";
  private String jsonKey_payNum = "payNum";
  private String jsonKey_payType = "payType";
  private String jsonKey_productId = "productId";
  private String jsonKey_serviceCode = "serviceCode";
  private String jsonKey_serviceName = "serviceName";
  private String jsonKey_serviceType = "serviceType";
  private String jsonKey_tokenType = "tokenType";
  private String jsonKey_unit = "unit";
  private String jsonKey_zoneId = "zoneId";
  public Activity m_MainActivity;
  private String methodNameStr = "";
  private String offerId = "";
  private String pf = "";
  private String pfKey = "";
  private int resId = 0;
  private String sessionId = "";
  private String sessionType = "";
  private String userId = "";
  private String userKey = "";
  private String zoneId = "";
  
  public MidasPay(Activity paramActivity)
  {
    Logger.d("MidasPay", "MidasPay Instantiate");
    this.m_MainActivity = paramActivity;
    initMidasPay();
  }
  
  private void GetInputData(String paramString)
  {
    try
    {
      this.inputData = new JSONObject(paramString);
      paramString = this.inputData.toString();
      Logger.d("MidasPay.GetInputData", "支付传入Json信息  " + paramString);
      return;
    }
    catch (JSONException paramString)
    {
      Logger.d("MidasPay.GetInputData ", "json数据解释错误");
      paramString.printStackTrace();
    }
  }
  
  private int GetJsonIntByKey(String paramString)
  {
    try
    {
      int i = this.inputData.getInt(paramString);
      return i;
    }
    catch (JSONException localJSONException)
    {
      Logger.d("MidasPay.GetJsonDataByKey ", paramString + " json数据获取错误");
      localJSONException.printStackTrace();
    }
    return 0;
  }
  
  private String GetJsonStrByKey(String paramString)
  {
    try
    {
      String str = this.inputData.getString(paramString);
      return str;
    }
    catch (JSONException localJSONException)
    {
      Logger.d("MidasPay.GetJsonDataByKey ", paramString + " json数据获取错误");
      localJSONException.printStackTrace();
    }
    return "";
  }
  
  private void OpenService()
  {
    int k = GetJsonIntByKey(this.jsonKey_payType);
    int j = GetJsonIntByKey(this.jsonKey_tokenType);
    String str2 = GetJsonStrByKey(this.jsonKey_zoneId);
    String str3 = GetJsonStrByKey(this.jsonKey_payNum);
    String str4 = GetJsonStrByKey(this.jsonKey_serviceCode);
    String str5 = GetJsonStrByKey(this.jsonKey_serviceName);
    int m = GetJsonIntByKey(this.jsonKey_serviceType);
    String str6 = GetJsonStrByKey(this.jsonKey_productId);
    String str7 = GetJsonStrByKey(this.jsonKey_unit);
    String str8 = GetJsonStrByKey(this.jsonKey_discountType);
    String str9 = GetJsonStrByKey(this.jsonKey_discountUrl);
    String str10 = GetJsonStrByKey(this.jsonKey_goodsTokenUrl);
    this.acctType = GetJsonStrByKey(this.jsonKey_acctType);
    String str1;
    int i;
    if (this.acctType == "")
    {
      str1 = "common";
      this.acctType = str1;
      i = j;
      if (j == 0) {
        i = 1;
      }
      if (str2 == "") {
        break label364;
      }
      str1 = str2;
      label168:
      this.zoneId = str1;
      Logger.d("OpenService", "payType = " + k + " payNumStr =  " + str3 + " zoneIdStr = " + str2 + " zoneId = " + this.zoneId + " serviceCode = " + str4 + " serviceName = " + str5 + " productId = " + str6 + " unit = " + str7 + " discountType = " + str8 + " discountUrl = " + str9 + " goodsTokenUrl = " + str10 + " acctType = " + this.acctType + " tokenType = " + i);
      if ((k != 1) && (k != 2) && (k != 7)) {
        break label373;
      }
      this.resId = R.drawable.sample_yuanbao;
      monthPay(k, str3, str4, str5, m);
    }
    label364:
    label373:
    do
    {
      return;
      str1 = this.acctType;
      break;
      str1 = this.zoneId;
      break label168;
      if ((k == 3) || (k == 4) || (k == 8))
      {
        this.resId = R.drawable.sample_yuanbao;
        gamePay(k, str3, str7);
        return;
      }
      if ((k == 5) || (k == 6) || (k == 9))
      {
        this.resId = R.drawable.sample_xxjzgw;
        gameGoods(k, str3, str8, str9, str10, i);
        return;
      }
    } while (k != 10);
    subscribePay(str4, str5, str6);
  }
  
  private void setParams()
  {
    LoginRet localLoginRet = new LoginRet();
    WGPlatform.WGGetLoginRecord(localLoginRet);
    this.userId = localLoginRet.open_id;
    this.offerId = AppInfo.OfferId;
    Iterator localIterator = localLoginRet.token.iterator();
    int i;
    if (!localIterator.hasNext())
    {
      i = localLoginRet.platform;
      if (i != EPlatform.ePlatform_QQ.ordinal()) {
        break label315;
      }
      Logger.d("platform is QQ");
      this.sessionId = "openid";
      this.sessionType = "kp_actoken";
    }
    for (;;)
    {
      this.zoneId = "1";
      this.pf = (localLoginRet.pf + this.gamePfStr);
      this.pfKey = localLoginRet.pf_key;
      this.acctType = "common";
      Logger.d("use id" + this.userId + " " + this.userKey);
      Logger.d("getpf " + this.pf);
      Logger.d("MidasPay.setParams", "platform = " + i + "use id" + this.userId + " userkey " + this.userKey + " pf =" + this.pf);
      return;
      TokenRet localTokenRet = (TokenRet)localIterator.next();
      switch (localTokenRet.type)
      {
      default: 
        break;
      case 2: 
        this.userKey = localTokenRet.value;
        break;
      case 3: 
        this.userKey = localTokenRet.value;
        break;
        label315:
        if (i == EPlatform.ePlatform_Weixin.ordinal())
        {
          Logger.d("platform is Weixin");
          this.sessionId = "hy_gameid";
          this.sessionType = "wc_actoken";
        }
        break;
      }
    }
  }
  
  public void MidasPayCallBack(APMidasResponse paramAPMidasResponse)
  {
    APLog.i("MidasPayCallBack", "resultCode:" + paramAPMidasResponse.resultCode);
    APLog.i("MidasPayCallBack", "resultMsg:" + paramAPMidasResponse.resultMsg);
    APLog.i("MidasPayCallBack", "realSaveNum:" + paramAPMidasResponse.realSaveNum);
    APLog.i("MidasPayCallBack", "payChannel:" + paramAPMidasResponse.payChannel);
    APLog.i("MidasPayCallBack", "payState:" + paramAPMidasResponse.payState);
    APLog.i("MidasPayCallBack", "provideState:" + paramAPMidasResponse.provideState);
    PayCallBackInfoToJson(paramAPMidasResponse, 0);
  }
  
  public void MidasPayNeedLogin()
  {
    APLog.i("MidasPayCallBack", "NeedLogin");
    PayCallBackInfoToJson(null, 100);
  }
  
  public void MpInfoToJson(String paramString, int paramInt1, int paramInt2)
  {
    Logger.d("MidasPay.getMpInfo", "拉取营销信息  " + paramString);
    UnityPlayer.UnitySendMessage(this.classNameStr, this.methodNameStr, paramString);
  }
  
  public void OpenPay(String paramString)
  {
    GetInputData(paramString);
    if (this.inputData == null) {
      return;
    }
    this.gamePfStr = GetJsonStrByKey(this.jsonKey_gamePf);
    if (this.m_MainActivity != null)
    {
      setParams();
      OpenService();
      return;
    }
    Logger.d("MidasPay.OpenPay", "m_MainActivity is null");
  }
  
  public void PayCallBackInfoToJson(APMidasResponse paramAPMidasResponse, int paramInt)
  {
    JSONObject localJSONObject = new JSONObject();
    int n = 0;
    int m = 0;
    int i = 0;
    int j = 0;
    int k = 0;
    Object localObject2 = "";
    String str1 = "";
    String str2 = "";
    String str3 = "";
    Object localObject1 = "";
    if (paramAPMidasResponse != null)
    {
      n = paramAPMidasResponse.resultCode;
      m = paramAPMidasResponse.realSaveNum;
      i = paramAPMidasResponse.payChannel;
      j = paramAPMidasResponse.payState;
      k = paramAPMidasResponse.provideState;
      if (paramAPMidasResponse.resultMsg != null) {
        localObject1 = paramAPMidasResponse.resultMsg;
      }
    }
    for (;;)
    {
      if (paramAPMidasResponse.extendInfo != null)
      {
        str1 = paramAPMidasResponse.extendInfo;
        label102:
        if (paramAPMidasResponse.payReserve1 == null) {
          break label337;
        }
        str2 = paramAPMidasResponse.payReserve1;
        label115:
        if (paramAPMidasResponse.payReserve2 == null) {
          break label344;
        }
        str3 = paramAPMidasResponse.payReserve2;
        label128:
        if (paramAPMidasResponse.payReserve3 == null) {
          break label351;
        }
        paramAPMidasResponse = paramAPMidasResponse.payReserve3;
        label140:
        String str4 = "";
        localObject2 = localObject1;
        localObject1 = paramAPMidasResponse;
        paramAPMidasResponse = str4;
      }
      try
      {
        for (;;)
        {
          localJSONObject.put("resultCode", n);
          localJSONObject.put("realSaveNum", m);
          localJSONObject.put("payChannel", i);
          localJSONObject.put("payState", j);
          localJSONObject.put("provideState", k);
          localJSONObject.put("resultMsg", localObject2);
          localJSONObject.put("extendInfo", str1);
          localJSONObject.put("payReserve1", str2);
          localJSONObject.put("payReserve2", str3);
          localJSONObject.put("payReserve3", localObject1);
          localJSONObject.put("error", paramAPMidasResponse);
          localJSONObject.put("loginStateErrorCode", paramInt);
          paramAPMidasResponse = localJSONObject.toString();
          Logger.d("MidasPay.PayCallBackInfoToJson", "支付回调信息  " + paramAPMidasResponse);
          UnityPlayer.UnitySendMessage("MidasMessage", "messageSendFromMidas", paramAPMidasResponse);
          return;
          localObject1 = "";
          break;
          str1 = "";
          break label102;
          label337:
          str2 = "";
          break label115;
          label344:
          str3 = "";
          break label128;
          label351:
          paramAPMidasResponse = "";
          break label140;
          paramAPMidasResponse = "return null";
        }
      }
      catch (JSONException paramAPMidasResponse)
      {
        for (;;)
        {
          paramAPMidasResponse.printStackTrace();
        }
      }
    }
  }
  
  public void gameGoods(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt2)
  {
    APMidasGoodsRequest localAPMidasGoodsRequest = new APMidasGoodsRequest();
    localAPMidasGoodsRequest.offerId = this.offerId;
    localAPMidasGoodsRequest.openId = this.userId;
    localAPMidasGoodsRequest.openKey = this.userKey;
    localAPMidasGoodsRequest.sessionId = this.sessionId;
    localAPMidasGoodsRequest.sessionType = this.sessionType;
    localAPMidasGoodsRequest.zoneId = this.zoneId;
    localAPMidasGoodsRequest.pf = this.pf;
    localAPMidasGoodsRequest.pfKey = this.pfKey;
    localAPMidasGoodsRequest.acctType = this.acctType;
    localAPMidasGoodsRequest.tokenType = paramInt2;
    localAPMidasGoodsRequest.goodsTokenUrl = paramString4;
    localAPMidasGoodsRequest.saveValue = paramString1;
    paramInt2 = 0;
    if ((paramInt1 == 5) || (paramInt1 == 6))
    {
      paramInt2 = paramInt1 - 4;
      if (paramInt2 != 1)
      {
        if (paramInt2 != 2) {
          break label201;
        }
        localAPMidasGoodsRequest.isCanChange = false;
        localAPMidasGoodsRequest.mpInfo.discountType = "";
        localAPMidasGoodsRequest.mpInfo.discountUrl = "";
        localAPMidasGoodsRequest.mpInfo.payChannel = "wechat";
      }
    }
    for (;;)
    {
      APMidasPayAPI.launchPay(this.m_MainActivity, localAPMidasGoodsRequest, this);
      return;
      if (paramInt1 != 9) {
        break;
      }
      paramInt2 = 3;
      break;
      label201:
      if (paramInt2 == 3)
      {
        paramString4 = localAPMidasGoodsRequest.mpInfo;
        paramString1 = paramString2;
        if (paramString2 == "") {
          paramString1 = "InGame";
        }
        paramString4.discountType = paramString1;
        localAPMidasGoodsRequest.mpInfo.discountUrl = paramString3;
        localAPMidasGoodsRequest.mpInfo.payChannel = "wechat";
      }
    }
  }
  
  public void gamePay(int paramInt, String paramString1, String paramString2)
  {
    this.resId = R.drawable.sample_yuanbao;
    APMidasGameRequest localAPMidasGameRequest = new APMidasGameRequest();
    localAPMidasGameRequest.offerId = this.offerId;
    localAPMidasGameRequest.openId = this.userId;
    localAPMidasGameRequest.openKey = this.userKey;
    localAPMidasGameRequest.sessionId = this.sessionId;
    localAPMidasGameRequest.sessionType = this.sessionType;
    localAPMidasGameRequest.zoneId = this.zoneId;
    localAPMidasGameRequest.pf = this.pf;
    localAPMidasGameRequest.pfKey = this.pfKey;
    localAPMidasGameRequest.acctType = this.acctType;
    localAPMidasGameRequest.saveValue = paramString1;
    localAPMidasGameRequest.resId = this.resId;
    if (paramInt == 4) {
      localAPMidasGameRequest.isCanChange = true;
    }
    for (;;)
    {
      localAPMidasGameRequest.extendInfo.unit = paramString2;
      localAPMidasGameRequest.extendInfo.isShowListOtherNum = true;
      localAPMidasGameRequest.extendInfo.isShowNum = true;
      APMidasPayAPI.launchPay(this.m_MainActivity, localAPMidasGameRequest, this);
      return;
      if (paramInt == 8) {
        localAPMidasGameRequest.isCanChange = false;
      }
    }
  }
  
  public void getMp()
  {
    this.gamePfStr = GetJsonStrByKey(this.jsonKey_gamePf);
    setParams();
    Object localObject = GetJsonStrByKey(this.jsonKey_zoneId);
    if (localObject != "") {}
    for (;;)
    {
      this.zoneId = ((String)localObject);
      localObject = new APMidasNetRequest();
      ((APMidasNetRequest)localObject).offerId = this.offerId;
      ((APMidasNetRequest)localObject).openId = this.userId;
      ((APMidasNetRequest)localObject).openKey = this.userKey;
      ((APMidasNetRequest)localObject).sessionId = this.sessionId;
      ((APMidasNetRequest)localObject).sessionType = this.sessionType;
      ((APMidasNetRequest)localObject).zoneId = this.zoneId;
      ((APMidasNetRequest)localObject).pf = this.pf;
      ((APMidasNetRequest)localObject).pfKey = this.pfKey;
      Logger.d("OpenService", " zoneId = " + this.zoneId + " pf = " + this.pf);
      ((APMidasNetRequest)localObject).reqType = APMidasNetRequest.NET_REQ_MP;
      APMidasPayAPI.launchNet(this.m_MainActivity, (APMidasNetRequest)localObject, new IAPMidasNetCallBack()
      {
        public void MidasNetError(String paramAnonymousString1, int paramAnonymousInt, String paramAnonymousString2)
        {
          Log.d("IAPMidasNetCallBack", "MidasNetError:" + paramAnonymousInt + ":" + paramAnonymousString2);
          MidasPay.this.MpInfoToJson(paramAnonymousString2, 3, paramAnonymousInt);
        }
        
        public void MidasNetFinish(String paramAnonymousString1, String paramAnonymousString2)
        {
          Log.d("IAPMidasNetCallBack", "MidasNetFinish:<" + paramAnonymousString1 + ">" + paramAnonymousString2);
          MidasPay.this.MpInfoToJson(paramAnonymousString2, 1, 0);
        }
        
        public void MidasNetStop(String paramAnonymousString)
        {
          Log.d("IAPMidasNetCallBack", "MidasNetStop");
          MidasPay.this.MpInfoToJson("MidasNetStop", 2, 0);
        }
      });
      return;
      localObject = this.zoneId;
    }
  }
  
  public void getMpInfo(String paramString1, String paramString2, String paramString3)
  {
    GetInputData(paramString3);
    if (this.inputData == null) {
      return;
    }
    this.classNameStr = paramString1;
    this.methodNameStr = paramString2;
    getMp();
  }
  
  public void groupBuyPay()
  {
    APMidasGoodsRequest localAPMidasGoodsRequest = new APMidasGoodsRequest();
    localAPMidasGoodsRequest.offerId = this.offerId;
    localAPMidasGoodsRequest.openId = this.userId;
    localAPMidasGoodsRequest.openKey = this.userKey;
    localAPMidasGoodsRequest.sessionId = this.sessionId;
    localAPMidasGoodsRequest.sessionType = this.sessionType;
    localAPMidasGoodsRequest.zoneId = this.zoneId;
    localAPMidasGoodsRequest.pf = this.pf;
    localAPMidasGoodsRequest.pfKey = this.pfKey;
    localAPMidasGoodsRequest.saveValue = "";
    localAPMidasGoodsRequest.resId = this.resId;
    localAPMidasGoodsRequest.mallType = 1;
    APMidasPayAPI.launchPay(this.m_MainActivity, localAPMidasGoodsRequest, this);
  }
  
  public void initMidasPay()
  {
    Logger.d("MidasPay.initMidasPay", "APMidasPayAPI.init");
    APMidasPayAPI.init(this.m_MainActivity);
    if (IsRelease) {}
    for (this.env = "release";; this.env = "test")
    {
      Logger.d("MidasPay.initMidasPay", "APMidasPayAPI.setEnv");
      APMidasPayAPI.setEnv(this.env);
      Logger.d("MidasPay.initMidasPay", "APMidasPayAPI.setLogEnable");
      APMidasPayAPI.setLogEnable(IsLogEnable);
      String str1 = APMidasPayAPI.getMidasPluginVersion();
      String str2 = APMidasPayAPI.getMidasCoreVersion(this.m_MainActivity);
      Logger.d("Midas Plugin Version " + str1);
      Logger.d("Midas Core Version " + str2);
      setParams();
      return;
    }
  }
  
  public void monthPay(int paramInt1, String paramString1, String paramString2, String paramString3, int paramInt2)
  {
    APMidasMonthRequest localAPMidasMonthRequest = new APMidasMonthRequest();
    localAPMidasMonthRequest.offerId = this.offerId;
    localAPMidasMonthRequest.openId = this.userId;
    localAPMidasMonthRequest.openKey = this.userKey;
    localAPMidasMonthRequest.sessionId = this.sessionId;
    localAPMidasMonthRequest.sessionType = this.sessionType;
    localAPMidasMonthRequest.zoneId = this.zoneId;
    localAPMidasMonthRequest.pf = this.pf;
    localAPMidasMonthRequest.pfKey = this.pfKey;
    localAPMidasMonthRequest.acctType = this.acctType;
    localAPMidasMonthRequest.saveValue = paramString1;
    if (paramInt1 == 2) {
      localAPMidasMonthRequest.isCanChange = true;
    }
    for (;;)
    {
      localAPMidasMonthRequest.resId = this.resId;
      localAPMidasMonthRequest.serviceCode = paramString2;
      localAPMidasMonthRequest.serviceName = paramString3;
      localAPMidasMonthRequest.serviceType = paramInt2;
      APMidasPayAPI.launchPay(this.m_MainActivity, localAPMidasMonthRequest, this);
      return;
      if (paramInt1 == 7) {
        localAPMidasMonthRequest.isCanChange = false;
      }
    }
  }
  
  public void subscribePay(String paramString1, String paramString2, String paramString3)
  {
    APMidasSubscribeRequest localAPMidasSubscribeRequest = new APMidasSubscribeRequest();
    localAPMidasSubscribeRequest.offerId = this.offerId;
    localAPMidasSubscribeRequest.openId = this.userId;
    localAPMidasSubscribeRequest.openKey = this.userKey;
    localAPMidasSubscribeRequest.sessionId = this.sessionId;
    localAPMidasSubscribeRequest.sessionType = this.sessionType;
    localAPMidasSubscribeRequest.zoneId = this.zoneId;
    localAPMidasSubscribeRequest.pf = this.pf;
    localAPMidasSubscribeRequest.pfKey = this.pfKey;
    localAPMidasSubscribeRequest.acctType = this.acctType;
    localAPMidasSubscribeRequest.saveValue = "1";
    localAPMidasSubscribeRequest.isCanChange = false;
    localAPMidasSubscribeRequest.resId = R.drawable.sample_yuanbao;
    localAPMidasSubscribeRequest.serviceCode = paramString1;
    localAPMidasSubscribeRequest.serviceName = paramString2;
    localAPMidasSubscribeRequest.productId = paramString3;
    APMidasPayAPI.launchPay(this.m_MainActivity, localAPMidasSubscribeRequest, this);
  }
  
  public void vmallPay()
  {
    APMidasGoodsRequest localAPMidasGoodsRequest = new APMidasGoodsRequest();
    localAPMidasGoodsRequest.offerId = this.offerId;
    localAPMidasGoodsRequest.openId = this.userId;
    localAPMidasGoodsRequest.openKey = this.userKey;
    localAPMidasGoodsRequest.sessionId = this.sessionId;
    localAPMidasGoodsRequest.sessionType = this.sessionType;
    localAPMidasGoodsRequest.zoneId = this.zoneId;
    localAPMidasGoodsRequest.pf = this.pf;
    localAPMidasGoodsRequest.pfKey = this.pfKey;
    localAPMidasGoodsRequest.saveValue = "";
    localAPMidasGoodsRequest.mallType = 2;
    APMidasPayAPI.launchPay(this.m_MainActivity, localAPMidasGoodsRequest, this);
  }
}
