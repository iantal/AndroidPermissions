package com.tencent.tpshell;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.Application;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.util.Base64;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;
import java.util.zip.CRC32;
import java.util.zip.CheckedInputStream;

public class TPShellApplication
  extends Application
{
  private static final String APP_KEY = "APPLICATION_CLASS_NAME";
  private static final boolean ENABLE_REPORT = true;
  private static final String PROVIDER_KEY = "TP_PROVIDER_TAG";
  private static final boolean m_UseRemoteProgressBar = false;
  private final String TMP_DIR_PREFIX = "tp_";
  private final String TMP_DIR_SUFFIX = "_tptmp";
  private final String TMP_FILE_PREFIX = "tpshell";
  private final String TMP_FILE_SUFFIX = ".tptmp";
  private boolean hasProvider = true;
  private String process_name;
  private int shellDuriation = 0;
  
  static
  {
    System.loadLibrary("tprt");
  }
  
  public TPShellApplication() {}
  
  private void chmod(File paramFile)
  {
    if (Build.VERSION.SDK_INT >= 9) {}
    for (;;)
    {
      try
      {
        Class.forName("java.io.File").getDeclaredMethod("setExecutable", new Class[] { Boolean.TYPE }).invoke(paramFile, new Object[] { Boolean.valueOf(true) });
        return;
      }
      catch (InvocationTargetException paramFile)
      {
        return;
      }
      catch (IllegalAccessException paramFile)
      {
        return;
      }
      catch (IllegalArgumentException paramFile)
      {
        return;
      }
      catch (NoSuchMethodException paramFile)
      {
        return;
      }
      catch (ClassNotFoundException paramFile) {}
      try
      {
        Runtime.getRuntime().exec("chmod 755 " + paramFile.getAbsolutePath()).waitFor();
        return;
      }
      catch (IOException paramFile) {}catch (InterruptedException paramFile) {}
    }
  }
  
  private void clearTmpFiles()
  {
    int k = 0;
    File localFile = getFilesDir();
    String[] arrayOfString = localFile.list();
    int i = 0;
    int j;
    for (;;)
    {
      j = k;
      if (i >= arrayOfString.length) {
        break;
      }
      if ((arrayOfString[i].startsWith("tpshell")) && (arrayOfString[i].endsWith(".tptmp"))) {
        new File(localFile, arrayOfString[i]).delete();
      }
      i += 1;
    }
    while (j < arrayOfString.length)
    {
      if ((arrayOfString[j].startsWith("tp_")) && (arrayOfString[j].endsWith("_tptmp"))) {
        deleteFolder(new File(localFile, arrayOfString[j]));
      }
      j += 1;
    }
  }
  
  public static void deleteFolder(File paramFile)
  {
    File[] arrayOfFile = paramFile.listFiles();
    if (arrayOfFile != null)
    {
      int j = arrayOfFile.length;
      int i = 0;
      if (i < j)
      {
        File localFile = arrayOfFile[i];
        if (localFile.isDirectory()) {
          deleteFolder(localFile);
        }
        for (;;)
        {
          i += 1;
          break;
          localFile.delete();
        }
      }
    }
    paramFile.delete();
  }
  
  /* Error */
  private void doOnCreate()
  {
    // Byte code:
    //   0: iconst_1
    //   1: istore_3
    //   2: aload_0
    //   3: aload_0
    //   4: invokestatic 188	android/os/Process:myPid	()I
    //   7: invokespecial 192	com/tencent/tpshell/TPShellApplication:getProcessName	(I)Ljava/lang/String;
    //   10: putfield 194	com/tencent/tpshell/TPShellApplication:process_name	Ljava/lang/String;
    //   13: ldc -60
    //   15: new 119	java/lang/StringBuilder
    //   18: dup
    //   19: invokespecial 120	java/lang/StringBuilder:<init>	()V
    //   22: ldc -58
    //   24: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   27: aload_0
    //   28: getfield 194	com/tencent/tpshell/TPShellApplication:process_name	Ljava/lang/String;
    //   31: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   34: invokevirtual 135	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   37: invokestatic 204	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   40: pop
    //   41: aload_0
    //   42: getfield 194	com/tencent/tpshell/TPShellApplication:process_name	Ljava/lang/String;
    //   45: ifnull +16 -> 61
    //   48: aload_0
    //   49: getfield 194	com/tencent/tpshell/TPShellApplication:process_name	Ljava/lang/String;
    //   52: ldc -50
    //   54: invokevirtual 163	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   57: ifeq +4 -> 61
    //   60: return
    //   61: new 208	com/tencent/tpshell/PerformanceHandler
    //   64: dup
    //   65: invokespecial 209	com/tencent/tpshell/PerformanceHandler:<init>	()V
    //   68: astore 7
    //   70: aload_0
    //   71: invokespecial 212	com/tencent/tpshell/TPShellApplication:setExceptionHandler	()V
    //   74: aload_0
    //   75: invokestatic 216	com/tencent/tpshell/TPShellApplication:getOptimizedDirectory	(Landroid/content/Context;)Ljava/lang/String;
    //   78: astore 5
    //   80: aload_0
    //   81: invokevirtual 219	com/tencent/tpshell/TPShellApplication:getPackageName	()Ljava/lang/String;
    //   84: astore 6
    //   86: iconst_0
    //   87: istore_1
    //   88: iload_1
    //   89: iconst_5
    //   90: if_icmpge +11 -> 101
    //   93: aload_0
    //   94: invokespecial 221	com/tencent/tpshell/TPShellApplication:clearTmpFiles	()V
    //   97: aload_0
    //   98: invokespecial 224	com/tencent/tpshell/TPShellApplication:extractAndLoadLibs	()V
    //   101: invokestatic 229	com/tencent/tpshell/DeviceInfo:vmLibName	()Ljava/lang/String;
    //   104: astore 8
    //   106: aload_0
    //   107: invokespecial 232	com/tencent/tpshell/TPShellApplication:nativeLibraryDir	()Ljava/lang/String;
    //   110: astore 9
    //   112: aload_0
    //   113: invokestatic 235	com/tencent/tpshell/TPShellApplication:getApkPath	(Landroid/content/Context;)Ljava/lang/String;
    //   116: astore 10
    //   118: aload 6
    //   120: aload 5
    //   122: aload 8
    //   124: aload 9
    //   126: aload 10
    //   128: invokestatic 239	com/tencent/tpshell/TPShellApplication:initialize2	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   131: pop
    //   132: aload_0
    //   133: invokespecial 242	com/tencent/tpshell/TPShellApplication:isSupportedCpuArch	()Z
    //   136: ifeq +17 -> 153
    //   139: aload 6
    //   141: aload 5
    //   143: aload 8
    //   145: aload 9
    //   147: aload 10
    //   149: invokestatic 245	com/tencent/tpshell/TPShellApplication:initialize	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   152: pop
    //   153: aload_0
    //   154: invokespecial 248	com/tencent/tpshell/TPShellApplication:getOriginalApplicationClassName	()Ljava/lang/String;
    //   157: astore 8
    //   159: new 119	java/lang/StringBuilder
    //   162: dup
    //   163: invokespecial 120	java/lang/StringBuilder:<init>	()V
    //   166: ldc -6
    //   168: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   171: aload 8
    //   173: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   176: invokevirtual 135	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   179: invokestatic 254	com/tencent/tpshell/TPShellApplication:log	(Ljava/lang/String;)I
    //   182: pop
    //   183: aload_0
    //   184: invokespecial 257	com/tencent/tpshell/TPShellApplication:enableDexClassLoader	()Z
    //   187: istore 4
    //   189: iload 4
    //   191: ifeq +227 -> 418
    //   194: invokestatic 260	com/tencent/tpshell/TPShellApplication:needopt	()I
    //   197: iconst_1
    //   198: if_icmpne +220 -> 418
    //   201: iload_3
    //   202: istore_2
    //   203: aload_0
    //   204: aload_0
    //   205: invokevirtual 219	com/tencent/tpshell/TPShellApplication:getPackageName	()Ljava/lang/String;
    //   208: invokespecial 263	com/tencent/tpshell/TPShellApplication:isRunningOnForeground	(Ljava/lang/String;)Z
    //   211: ifeq +18 -> 229
    //   214: iload_3
    //   215: istore_2
    //   216: aload_0
    //   217: invokespecial 266	com/tencent/tpshell/TPShellApplication:isWaittingBarServiceSupported	()Z
    //   220: ifeq +9 -> 229
    //   223: aload_0
    //   224: invokevirtual 269	com/tencent/tpshell/TPShellApplication:startService	()V
    //   227: iload_3
    //   228: istore_2
    //   229: aconst_null
    //   230: astore 5
    //   232: iload 4
    //   234: ifeq +29 -> 263
    //   237: aload_0
    //   238: invokespecial 273	com/tencent/tpshell/TPShellApplication:safeLoadOriginalDex	()Ljava/lang/ClassLoader;
    //   241: astore 6
    //   243: aload 6
    //   245: astore 5
    //   247: aload 6
    //   249: ifnonnull +14 -> 263
    //   252: ldc_w 275
    //   255: invokestatic 254	com/tencent/tpshell/TPShellApplication:log	(Ljava/lang/String;)I
    //   258: pop
    //   259: aload 6
    //   261: astore 5
    //   263: iload 4
    //   265: ifeq +9 -> 274
    //   268: aload_0
    //   269: aload 5
    //   271: invokespecial 279	com/tencent/tpshell/TPShellApplication:installNewClassLoader	(Ljava/lang/ClassLoader;)V
    //   274: aload 8
    //   276: ifnull +9 -> 285
    //   279: aload_0
    //   280: aload 8
    //   282: invokespecial 282	com/tencent/tpshell/TPShellApplication:recoverOrignalApplication	(Ljava/lang/String;)V
    //   285: aload_0
    //   286: invokespecial 242	com/tencent/tpshell/TPShellApplication:isSupportedCpuArch	()Z
    //   289: ifeq +14 -> 303
    //   292: aload_0
    //   293: invokespecial 285	com/tencent/tpshell/TPShellApplication:isMainProcess	()Z
    //   296: ifeq +7 -> 303
    //   299: invokestatic 288	com/tencent/tpshell/TPShellApplication:release	()I
    //   302: pop
    //   303: invokestatic 291	com/tencent/tpshell/TPShellApplication:release2	()V
    //   306: aload_0
    //   307: invokespecial 266	com/tencent/tpshell/TPShellApplication:isWaittingBarServiceSupported	()Z
    //   310: ifeq +7 -> 317
    //   313: aload_0
    //   314: invokevirtual 294	com/tencent/tpshell/TPShellApplication:stopService	()V
    //   317: aload_0
    //   318: invokespecial 285	com/tencent/tpshell/TPShellApplication:isMainProcess	()Z
    //   321: ifeq +10 -> 331
    //   324: aload_0
    //   325: aload 7
    //   327: iload_2
    //   328: invokespecial 298	com/tencent/tpshell/TPShellApplication:reportPerformanceInfo	(Lcom/tencent/tpshell/PerformanceHandler;Z)V
    //   331: ldc_w 300
    //   334: invokestatic 254	com/tencent/tpshell/TPShellApplication:log	(Ljava/lang/String;)I
    //   337: pop
    //   338: return
    //   339: astore 8
    //   341: ldc2_w 301
    //   344: invokestatic 308	java/lang/Thread:sleep	(J)V
    //   347: new 119	java/lang/StringBuilder
    //   350: dup
    //   351: invokespecial 120	java/lang/StringBuilder:<init>	()V
    //   354: ldc_w 310
    //   357: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   360: aload 8
    //   362: invokevirtual 311	java/lang/Exception:toString	()Ljava/lang/String;
    //   365: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   368: invokevirtual 135	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   371: invokestatic 254	com/tencent/tpshell/TPShellApplication:log	(Ljava/lang/String;)I
    //   374: pop
    //   375: iload_1
    //   376: iconst_1
    //   377: iadd
    //   378: istore_1
    //   379: goto -291 -> 88
    //   382: astore 5
    //   384: new 119	java/lang/StringBuilder
    //   387: dup
    //   388: invokespecial 120	java/lang/StringBuilder:<init>	()V
    //   391: ldc_w 313
    //   394: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   397: aload 5
    //   399: invokevirtual 311	java/lang/Exception:toString	()Ljava/lang/String;
    //   402: invokevirtual 126	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   405: invokevirtual 135	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   408: invokestatic 254	com/tencent/tpshell/TPShellApplication:log	(Ljava/lang/String;)I
    //   411: pop
    //   412: return
    //   413: astore 9
    //   415: goto -68 -> 347
    //   418: iconst_0
    //   419: istore_2
    //   420: goto -191 -> 229
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	423	0	this	TPShellApplication
    //   87	292	1	i	int
    //   202	218	2	bool1	boolean
    //   1	227	3	bool2	boolean
    //   187	77	4	bool3	boolean
    //   78	192	5	localObject1	Object
    //   382	16	5	localException1	Exception
    //   84	176	6	localObject2	Object
    //   68	258	7	localPerformanceHandler	PerformanceHandler
    //   104	177	8	str1	String
    //   339	22	8	localException2	Exception
    //   110	36	9	str2	String
    //   413	1	9	localInterruptedException	InterruptedException
    //   116	32	10	str3	String
    // Exception table:
    //   from	to	target	type
    //   93	101	339	java/lang/Exception
    //   268	274	382	java/lang/Exception
    //   279	285	382	java/lang/Exception
    //   341	347	413	java/lang/InterruptedException
  }
  
  private boolean enableDexClassLoader()
  {
    Object localObject = getAssets();
    try
    {
      localObject = ((AssetManager)localObject).open("tp_classes.jar");
      if (localObject != null) {
        ((InputStream)localObject).close();
      }
      return true;
    }
    catch (IOException localIOException) {}
    return false;
  }
  
  private void extractAndLoadLibs()
    throws IOException, InterruptedException
  {
    if (enableDexClassLoader()) {
      extractAsset(this, "tp_classes.jar", "tp_classes.jar");
    }
    String str2;
    if (isSupportedCpuArch())
    {
      str2 = DeviceInfo.getCpuArch();
      if (DeviceInfo.isArt())
      {
        if (isX86() != 0) {
          break label139;
        }
        str1 = "arm";
        extractAsset(this, String.format("libdex2oathook_%s.so", new Object[] { str1 }), "libdex2oathook.so");
      }
      if (isX86() != 0) {
        break label146;
      }
    }
    label139:
    label146:
    for (String str1 = extractAsset(this, String.format("libtpshell_arm.so", new Object[] { str2 }), "libtpshell.so");; str1 = extractAsset(this, String.format("libtpshell_x86.so", new Object[] { str2 }), "libtpshell.so"))
    {
      log("isX86: " + isX86() + "path: " + str1);
      System.load(str1);
      return;
      str1 = "x86";
      break;
    }
  }
  
  private String extractAsset(Context paramContext, String paramString1, String paramString2)
    throws IOException, InterruptedException
  {
    paramString1 = extractAsset2TmpFile(paramContext, paramString1);
    paramContext = getAbsolutePath(paramContext, paramString2);
    paramString2 = new File(paramContext);
    if (!paramString2.exists())
    {
      paramString1.renameTo(paramString2);
      chmod(paramString2);
      return paramContext;
    }
    if (getFileCRC32(paramString1) != getFileCRC32(paramString2))
    {
      paramString2.delete();
      paramString1.renameTo(paramString2);
      chmod(paramString2);
      return paramContext;
    }
    paramString1.delete();
    return paramContext;
  }
  
  private File extractAsset2TmpFile(Context paramContext, String paramString)
    throws IOException
  {
    File localFile = File.createTempFile("tpshell", ".tptmp", new File(getFilesDir(paramContext)));
    Object localObject = paramContext.getAssets();
    paramContext = new FileOutputStream(localFile);
    paramString = ((AssetManager)localObject).open(paramString);
    localObject = new byte['က'];
    int i;
    do
    {
      i = paramString.read((byte[])localObject);
      if (i > 0) {
        paramContext.write((byte[])localObject, 0, i);
      }
    } while (i == 4096);
    paramString.close();
    paramContext.close();
    return localFile;
  }
  
  private String generateCrashParameters()
  {
    return String.format("%s&%s&%s&%s&%s&%s&%s", new Object[] { "imei=" + getDeviceId(), "device_model=" + DeviceInfo.getDeviceModel(), "sys_ver=" + DeviceInfo.getSystemVersion(), "vm_name=" + DeviceInfo.vmName(), "cpu_arch=" + DeviceInfo.getCpuArch(), "package_name=" + getApplicationInfo().packageName, "shell_ver=" + getShellVersion() });
  }
  
  private PerformanceHandler.PerformanceData generatePerformanceParameters()
  {
    PerformanceHandler.PerformanceData localPerformanceData = new PerformanceHandler.PerformanceData();
    localPerformanceData.imei = getDeviceId();
    localPerformanceData.device_model = DeviceInfo.getDeviceModel();
    localPerformanceData.sys_ver = DeviceInfo.getSystemVersion();
    localPerformanceData.vm_name = DeviceInfo.vmName();
    localPerformanceData.cpu_arch = DeviceInfo.getCpuArch();
    localPerformanceData.package_name = getApplicationInfo().packageName;
    localPerformanceData.shell_ver = getShellVersion();
    localPerformanceData.enc_type = getEncType();
    localPerformanceData.enable_block_enc = isBlockEncEnabled();
    localPerformanceData.enc_block_size = getEncBlockSize();
    localPerformanceData.enable_assert = isAssertEnabled();
    return localPerformanceData;
  }
  
  private static String getAbsolutePath(Context paramContext, String paramString)
    throws IOException
  {
    return new File(paramContext.getFilesDir(), paramString).getAbsolutePath();
  }
  
  private static String getApkPath(Context paramContext)
  {
    return paramContext.getPackageResourcePath();
  }
  
  private static native String getCrashReportHost();
  
  private String getDeviceId()
  {
    String str2 = ((TelephonyManager)getSystemService("phone")).getDeviceId();
    String str1 = str2;
    if (str2 == null) {
      str1 = "000000";
    }
    return str1;
  }
  
  private static native int getEncBlockSize();
  
  private static native int getEncType();
  
  private static long getFileCRC32(File paramFile)
    throws IOException
  {
    CRC32 localCRC32 = new CRC32();
    paramFile = new CheckedInputStream(new FileInputStream(paramFile), localCRC32);
    byte[] arrayOfByte = new byte['က'];
    while (paramFile.read(arrayOfByte) != -1) {}
    paramFile.close();
    return localCRC32.getValue();
  }
  
  private static String getFilesDir(Context paramContext)
  {
    return paramContext.getFilesDir().getAbsolutePath();
  }
  
  private static native int getGameId(String paramString1, String paramString2);
  
  public static String getOptimizedDirectory(Context paramContext)
  {
    return getPackageInfo(paramContext).applicationInfo.dataDir + File.separatorChar + "files";
  }
  
  private String getOriginalApplicationClassName()
  {
    localObject3 = null;
    try
    {
      Bundle localBundle = getPackageManager().getApplicationInfo(getPackageName(), 128).metaData;
      localObject1 = localObject3;
      if (localBundle != null)
      {
        localObject1 = localObject3;
        if (localBundle.containsKey("APPLICATION_CLASS_NAME")) {
          localObject1 = localBundle.getString("APPLICATION_CLASS_NAME");
        }
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        Object localObject1;
        localNameNotFoundException.printStackTrace();
        Object localObject2 = localObject3;
      }
    }
    localObject3 = localObject1;
    if (localObject1 != null)
    {
      localObject3 = localObject1;
      if (((String)localObject1).indexOf(".") == -1) {
        localObject3 = getPackageName() + "." + (String)localObject1;
      }
    }
    return localObject3;
  }
  
  public static PackageInfo getPackageInfo(Context paramContext)
  {
    String str = paramContext.getPackageName();
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = paramContext.getPackageInfo(str, 0);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  private String getProcessName(int paramInt)
  {
    Iterator localIterator = ((ActivityManager)getSystemService("activity")).getRunningAppProcesses().iterator();
    while (localIterator.hasNext())
    {
      ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)localIterator.next();
      if (localRunningAppProcessInfo.pid == paramInt) {
        return localRunningAppProcessInfo.processName;
      }
    }
    return null;
  }
  
  private static native String getShellVersion();
  
  private void initHasProvider()
  {
    this.hasProvider = false;
    try
    {
      Bundle localBundle = getPackageManager().getApplicationInfo(getPackageName(), 128).metaData;
      if ((localBundle != null) && (localBundle.containsKey("TP_PROVIDER_TAG"))) {
        this.hasProvider = true;
      }
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException) {}
  }
  
  private static native int initialize(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5);
  
  private static native int initialize2(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5);
  
  private void installNewClassLoader(ClassLoader paramClassLoader)
    throws Exception
  {
    nativeInstallNewClassLoader(paramClassLoader);
  }
  
  private static native int isAssertEnabled();
  
  private static native int isBlockEncEnabled();
  
  private boolean isMainProcess()
  {
    return this.process_name.compareTo(getApplicationInfo().packageName) == 0;
  }
  
  private static boolean isNetworkAvailable(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    if (paramContext != null)
    {
      paramContext = paramContext.getActiveNetworkInfo();
      return (paramContext != null) && (paramContext.isAvailable());
    }
    return false;
  }
  
  private boolean isRunningOnForeground(String paramString)
  {
    Object localObject;
    if (paramString != null)
    {
      localObject = (ActivityManager)getSystemService("activity");
      if (localObject != null) {
        break label21;
      }
    }
    label21:
    do
    {
      do
      {
        return false;
        localObject = ((ActivityManager)localObject).getRunningTasks(1);
      } while ((localObject == null) || (((List)localObject).size() <= 0));
      localObject = (ActivityManager.RunningTaskInfo)((List)localObject).get(0);
    } while ((((ActivityManager.RunningTaskInfo)localObject).topActivity == null) || (((ActivityManager.RunningTaskInfo)localObject).topActivity.getPackageName() == null));
    log("pkg:" + paramString);
    log("top:" + ((ActivityManager.RunningTaskInfo)localObject).topActivity.getPackageName());
    if (paramString.compareTo(((ActivityManager.RunningTaskInfo)localObject).topActivity.getPackageName()) == 0) {}
    for (boolean bool = true;; bool = false) {
      return bool;
    }
  }
  
  private boolean isSupportedCpuArch()
  {
    return needstaticdecrypt() == 0;
  }
  
  private boolean isWaittingBarServiceSupported()
  {
    return !this.hasProvider;
  }
  
  private static native int isX86();
  
  private ClassLoader loadOrignalDex()
    throws Exception
  {
    String str1 = getAbsolutePath(this, "tp_classes.jar");
    String str2 = nativeLibraryDir();
    log("libraryDir:" + str2);
    return EasyJNI.newDexClassLoader(this, str1, str2, true);
  }
  
  public static native int log(String paramString);
  
  private static native void nativeInstallNewClassLoader(ClassLoader paramClassLoader);
  
  private String nativeLibraryDir()
  {
    Object localObject1 = getApplicationInfo();
    Object localObject2;
    if (Build.VERSION.SDK_INT >= 9) {
      try
      {
        localObject1 = (String)EasyJNI.getFieldObject("android.content.pm.ApplicationInfo", localObject1, "nativeLibraryDir");
        log("!@#DFDFd:" + (String)localObject1);
        return localObject1;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
          log("!!!" + localException.toString());
          localObject2 = null;
        }
      }
    }
    return localObject2.dataDir + File.separator + "lib";
  }
  
  private static native void nativeRecoverOrignalApplication(String paramString);
  
  private static native int needopt();
  
  public static native int needreload();
  
  private static native int needstaticdecrypt();
  
  private void recoverOrignalApplication(String paramString)
    throws Exception
  {
    if (paramString != null) {
      nativeRecoverOrignalApplication(paramString);
    }
  }
  
  private static native int release();
  
  private static native void release2();
  
  private static native int reload();
  
  private void reportPerformanceInfo(PerformanceHandler paramPerformanceHandler, boolean paramBoolean)
  {
    int i = 1;
    if (isNetworkAvailable(this) != true) {
      return;
    }
    PerformanceHandler.PerformanceData localPerformanceData = generatePerformanceParameters();
    if (paramBoolean) {}
    for (;;)
    {
      localPerformanceData.dex_opt = i;
      paramPerformanceHandler.report(getCrashReportHost() + "performance_info.py", localPerformanceData);
      return;
      i = 0;
    }
  }
  
  private ClassLoader safeLoadOriginalDex()
  {
    localObject1 = null;
    int i = 0;
    for (;;)
    {
      Object localObject2 = localObject1;
      if (i < 100) {}
      try
      {
        localObject2 = loadOrignalDex();
        localObject1 = localObject2;
        localObject2 = localObject1;
        if (localObject1 != null)
        {
          localObject2 = localObject1;
          return localObject2;
        }
      }
      catch (Exception localException) {}
      try
      {
        Thread.sleep(1000L);
        localObject3 = localObject1;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          Object localObject3;
          Object localObject4 = localObject1;
        }
      }
      reload();
      i += 1;
      localObject1 = localObject3;
    }
  }
  
  private void setExceptionHandler()
  {
    Object localObject1 = getDir("breakpad", 0);
    Object localObject2 = getDir("bugly", 0);
    if (((File)localObject1).exists() != true) {
      ((File)localObject1).mkdir();
    }
    localObject1 = new ExceptionHandler((File)localObject1, (File)localObject2, getDeviceId());
    if (isNetworkAvailable(this) != true) {}
    while ((!((ExceptionHandler)localObject1).hasExcptionInfo()) || (!isMainProcess())) {
      return;
    }
    localObject2 = generateCrashParameters();
    ((ExceptionHandler)localObject1).reportException(getCrashReportHost() + "crash_info.py?" + Base64.encodeToString(((String)localObject2).getBytes(), 2));
  }
  
  private static native int setNeedUploadCrashInfo();
  
  protected void attachBaseContext(Context paramContext)
  {
    super.attachBaseContext(paramContext);
    initHasProvider();
    if (this.hasProvider == true) {
      doOnCreate();
    }
  }
  
  public void onCreate()
  {
    super.onCreate();
    if (this.hasProvider != true) {
      doOnCreate();
    }
  }
  
  public void startService()
  {
    Intent localIntent = new Intent(this, WaittingBarService.class);
    Bundle localBundle = new Bundle();
    localBundle.putString("name", "tpsafe");
    localBundle.putString("ver", "1.0.0");
    localIntent.putExtras(localBundle);
    WaitingBarServiceManager.getInstance().bindService(this, localIntent);
    log("start service");
  }
  
  public void stopService()
  {
    Intent localIntent = new Intent(this, WaittingBarService.class);
    Bundle localBundle = new Bundle();
    localBundle.putString("name", "tpsafe");
    localBundle.putString("ver", "1.0.0");
    localIntent.putExtras(localBundle);
    WaitingBarServiceManager.getInstance().unbindService();
  }
}
