package com.tencent.midas.comm;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

public class APBeanUtil
{
  public APBeanUtil() {}
  
  public static void copyProperties(Object paramObject1, Object paramObject2)
  {
    copyPropertiesExclude(paramObject1, paramObject2, null, true);
  }
  
  public static void copyPropertiesExclude(Object paramObject1, Object paramObject2, String[] paramArrayOfString, boolean paramBoolean)
  {
    if ((paramArrayOfString != null) && (paramArrayOfString.length > 0)) {}
    for (paramArrayOfString = Arrays.asList(paramArrayOfString);; paramArrayOfString = null)
    {
      Method[] arrayOfMethod1 = (Method[])null;
      arrayOfMethod1 = (Method[])null;
      Method[] arrayOfMethod2;
      if (paramBoolean) {
        arrayOfMethod2 = paramObject1.getClass().getMethods();
      }
      int i;
      for (arrayOfMethod1 = paramObject2.getClass().getMethods();; arrayOfMethod1 = paramObject2.getClass().getDeclaredMethods())
      {
        i = 0;
        if (i < arrayOfMethod2.length) {
          break;
        }
        return;
        arrayOfMethod2 = paramObject1.getClass().getDeclaredMethods();
      }
      Object localObject1 = arrayOfMethod2[i];
      Object localObject2 = ((Method)localObject1).getName();
      if (!((String)localObject2).contains("get")) {}
      for (;;)
      {
        i += 1;
        break;
        if ((paramArrayOfString == null) || (!paramArrayOfString.contains(((String)localObject2).substring(3).toLowerCase())))
        {
          localObject2 = findMethodByName(arrayOfMethod1, "set" + ((String)localObject2).substring(3));
          if (localObject2 != null)
          {
            localObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
            if ((localObject1 != null) && ((!(localObject1 instanceof Collection)) || (((Collection)localObject1).size() > 0))) {
              ((Method)localObject2).invoke(paramObject2, new Object[] { localObject1 });
            }
          }
        }
      }
    }
  }
  
  public static void copyPropertiesInclude(Object paramObject1, Object paramObject2, String[] paramArrayOfString, boolean paramBoolean)
  {
    List localList;
    Method[] arrayOfMethod;
    if ((paramArrayOfString != null) && (paramArrayOfString.length > 0))
    {
      localList = Arrays.asList(paramArrayOfString);
      paramArrayOfString = (Method[])null;
      paramArrayOfString = (Method[])null;
      if (!paramBoolean) {
        break label58;
      }
      arrayOfMethod = paramObject1.getClass().getMethods();
    }
    int i;
    for (paramArrayOfString = paramObject2.getClass().getMethods();; paramArrayOfString = paramObject2.getClass().getDeclaredMethods())
    {
      i = 0;
      if (i < arrayOfMethod.length) {
        break;
      }
      return;
      label58:
      arrayOfMethod = paramObject1.getClass().getDeclaredMethods();
    }
    Object localObject1 = arrayOfMethod[i];
    Object localObject2 = ((Method)localObject1).getName();
    if (!((String)localObject2).contains("get")) {}
    for (;;)
    {
      i += 1;
      break;
      String str = ((String)localObject2).substring(3);
      if (localList.contains(str.substring(0, 1).toLowerCase() + str.substring(1)))
      {
        localObject2 = findMethodByName(paramArrayOfString, "set" + ((String)localObject2).substring(3));
        if (localObject2 != null)
        {
          localObject1 = ((Method)localObject1).invoke(paramObject1, new Object[0]);
          if ((localObject1 != null) && ((!(localObject1 instanceof Collection)) || (((Collection)localObject1).size() > 0))) {
            ((Method)localObject2).invoke(paramObject2, new Object[] { localObject1 });
          }
        }
      }
    }
  }
  
  public static Method findMethodByName(Method[] paramArrayOfMethod, String paramString)
  {
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfMethod.length) {
        return null;
      }
      if (paramArrayOfMethod[i].getName().equals(paramString)) {
        return paramArrayOfMethod[i];
      }
      i += 1;
    }
  }
}
