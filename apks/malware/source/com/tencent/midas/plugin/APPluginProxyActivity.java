package com.tencent.midas.plugin;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.res.Configuration;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.Toast;
import com.tencent.midas.comm.APLog;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class APPluginProxyActivity
  extends Activity
{
  private static String e = null;
  private static String f = null;
  private static Method g = null;
  private static Field h = null;
  public static boolean mAppForground = true;
  private String a = null;
  private IAPPluginActivity b = null;
  private String c = null;
  private String d = null;
  protected String mCreateErrorInfo = null;
  protected int mStopFlag = 0;
  
  public APPluginProxyActivity() {}
  
  private Class a(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    if (TextUtils.isEmpty(this.c)) {
      this.d = paramString1;
    }
    try
    {
      this.c = APPluginUtils.getInstallPath(paramContext, this.d).getCanonicalPath();
      try
      {
        if ((PackageInfo)APPluginStatic.b.get(this.c) == null)
        {
          paramString1 = APApkFileParser.getPackageInfo(paramContext, this.c, 1);
          if (paramString1 == null) {
            return null;
          }
          APPluginStatic.b.put(this.c, paramString1);
        }
        paramContext = APPluginStatic.a(paramContext, this.d, this.c).loadClass(paramString2);
      }
      catch (Exception paramContext)
      {
        for (;;)
        {
          paramContext = null;
        }
      }
      return paramContext;
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
  }
  
  private void a(Activity paramActivity, String paramString, Intent paramIntent, int paramInt)
  {
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity startPluginActivityForResult.private");
    Intent localIntent = new Intent(paramActivity, getProxyActivity(paramString));
    localIntent.putExtra("pluginsdk_pluginName", this.d);
    localIntent.putExtra("pluginsdk_pluginpath", this.c);
    localIntent.putExtra("pluginsdk_launchActivity", paramString);
    if (paramIntent != null)
    {
      localIntent.addFlags(paramIntent.getFlags());
      localIntent.putExtras(paramIntent);
    }
    paramActivity.startActivityForResult(localIntent, paramInt);
  }
  
  private void a(Context paramContext)
  {
    if ((this.mCreateErrorInfo != null) && ((this.mCreateErrorInfo.contains("空间")) || (this.mCreateErrorInfo.contains("Space"))))
    {
      Toast.makeText(paramContext, "系统可用内存不足，" + this.d + "启动失败!", 0).show();
      return;
    }
    Toast.makeText(paramContext, this.d + "启动失败!", 0).show();
  }
  
  private static void a(Bundle paramBundle, ClassLoader paramClassLoader)
  {
    if (paramBundle == null) {}
    for (;;)
    {
      return;
      paramBundle.setClassLoader(paramClassLoader);
      Object localObject;
      if ((g == null) || (h == null))
      {
        localObject = paramBundle.getClass();
        g = ((Class)localObject).getDeclaredMethod("unparcel", new Class[0]);
        g.setAccessible(true);
        h = ((Class)localObject).getDeclaredField("mMap");
        h.setAccessible(true);
      }
      g.invoke(paramBundle, new Object[0]);
      paramBundle = (Map)h.get(paramBundle);
      if (paramBundle != null)
      {
        paramBundle = paramBundle.values().iterator();
        while (paramBundle.hasNext())
        {
          localObject = paramBundle.next();
          if ((localObject instanceof Bundle)) {
            a((Bundle)localObject, paramClassLoader);
          }
        }
      }
    }
  }
  
  private void a(String paramString)
  {
    boolean bool2 = true;
    if ((paramString.contains("permission")) || (paramString.contains("filenotfoundexception")))
    {
      APLog.i("logStartPluginErrInfo", "mPluginApkFilePath" + this.c);
      paramString = getApplicationInfo();
      if (paramString != null)
      {
        if ((paramString.flags & 0x1) <= 0) {
          break label129;
        }
        bool1 = true;
        if ((paramString.flags & 0x80) <= 0) {
          break label134;
        }
        Log.d("", "UID: " + paramString.uid + ", IsSystemApp: " + bool1 + ", IsUpdateSystemApp: " + bool2);
      }
    }
    label129:
    label134:
    while ((paramString.contains("resources$notfoundexception")) || (paramString.contains("resourcesnotfoundexception")) || (!paramString.contains("classnotfoundexception"))) {
      for (;;)
      {
        return;
        boolean bool1 = false;
        continue;
        bool2 = false;
      }
    }
  }
  
  private boolean a(Intent paramIntent)
  {
    String str = paramIntent.getAction();
    if ((!TextUtils.isEmpty(str)) && (str.equals("android.media.action.IMAGE_CAPTURE"))) {}
    do
    {
      do
      {
        do
        {
          return true;
        } while ((!TextUtils.isEmpty(str)) && (str.equals("android.intent.action.GET_CONTENT")));
        paramIntent = paramIntent.getComponent();
        if (paramIntent == null) {
          break;
        }
        str = paramIntent.getPackageName();
      } while ((!TextUtils.isEmpty(str)) && (str.equals("com.tencent.midas.pay")));
      paramIntent = paramIntent.getClassName();
    } while ((!TextUtils.isEmpty(paramIntent)) && (paramIntent.equals("com.qzone")));
    return false;
  }
  
  public static boolean isMoveTaskToBack(Context paramContext, Intent paramIntent)
  {
    if (paramIntent.getComponent() == null) {}
    while (!paramIntent.getComponent().getPackageName().equals(paramContext.getPackageName())) {
      return true;
    }
    return false;
  }
  
  public static void openActivityForResult(Activity paramActivity, String paramString1, String paramString2, String paramString3, Intent paramIntent, int paramInt)
  {
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult pluginName：" + paramString1);
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult contextActivity：" + paramActivity);
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult apkFilePath：" + paramString2);
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult startIntent：" + paramIntent.getClass().getSimpleName());
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult startIntent：" + paramIntent.getClass().getCanonicalName());
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult startIntent：" + paramIntent.getClass().getClassLoader());
    e = paramString1;
    try
    {
      f = APPluginUtils.getInstallPath(paramActivity, paramString1).getCanonicalPath();
      paramIntent.putExtra("pluginsdk_pluginName", paramString1);
      paramIntent.putExtra("pluginsdk_launchActivity", paramString3);
      paramIntent.putExtra("pluginsdk_pluginpath", paramString2);
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        try
        {
          paramActivity.startActivityForResult(paramIntent, paramInt);
          return;
        }
        catch (Throwable paramActivity)
        {
          APLog.i("APPLuginProxyActivity", "APPluginProxyActivity openActivityForResult Throwable:" + paramActivity.toString());
        }
        localIOException = localIOException;
        localIOException.printStackTrace();
      }
    }
  }
  
  public boolean dispatchTouchEvent(MotionEvent paramMotionEvent)
  {
    if (this.b != null) {
      return this.b.IDispatchTouchEvent(paramMotionEvent);
    }
    return super.dispatchTouchEvent(paramMotionEvent);
  }
  
  public Class[] getParamsType(Object[] paramArrayOfObject)
  {
    Class[] arrayOfClass = null;
    if (paramArrayOfObject != null)
    {
      arrayOfClass = new Class[paramArrayOfObject.length];
      int i = 0;
      if (i < arrayOfClass.length)
      {
        if (Activity.class.isAssignableFrom(paramArrayOfObject[i].getClass())) {
          arrayOfClass[i] = Activity.class;
        }
        for (;;)
        {
          i += 1;
          break;
          arrayOfClass[i] = paramArrayOfObject[i].getClass();
        }
      }
    }
    return arrayOfClass;
  }
  
  protected Class getProxyActivity(String paramString)
  {
    return getClass();
  }
  
  public String initPlugin()
  {
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity initPlugin mPluginApkFilePath:" + this.c);
    PackageInfo localPackageInfo = (PackageInfo)APPluginStatic.b.get(this.c);
    if (localPackageInfo == null)
    {
      localPackageInfo = APApkFileParser.getPackageInfo(this, this.c, 1);
      if (localPackageInfo == null) {
        return "Get Package Info Failed!";
      }
      APPluginStatic.b.put(this.c, localPackageInfo);
    }
    for (;;)
    {
      if ((this.a == null) || (this.a.length() == 0))
      {
        if ((localPackageInfo.activities == null) || (localPackageInfo.activities.length == 0)) {
          return "Activity Not Found!";
        }
        this.a = localPackageInfo.activities[0].name;
      }
      DexClassLoader localDexClassLoader = APPluginStatic.a(this, this.d, this.c);
      getIntent().setExtrasClassLoader(localDexClassLoader);
      this.b = ((IAPPluginActivity)localDexClassLoader.loadClass(this.a).newInstance());
      this.b.IInit(this.d, this.c, this, localDexClassLoader, localPackageInfo);
      this.b.ISetIntent(getIntent());
      return null;
    }
  }
  
  public Object initPluginInterface(Context paramContext, String paramString1, String paramString2, String paramString3, Object[] paramArrayOfObject)
  {
    APLog.i("APPLuginProxyActivity", "initPluginInterface pluginName=" + paramString1);
    APLog.i("APPLuginProxyActivity", "initPluginInterface interfaceClass=" + paramString2);
    APLog.i("APPLuginProxyActivity", "initPluginInterface methodName=" + paramString3);
    APLog.i("APPLuginProxyActivity", "initPluginInterface methodName=" + paramString3);
    if ((TextUtils.isEmpty(paramString1)) || (TextUtils.isEmpty(paramString2)) || (TextUtils.isEmpty(paramString3)))
    {
      APLog.i("APPLuginProxyActivity", "initPluginInterface objClass param is null");
      return null;
    }
    paramString1 = a(paramContext, paramString1, paramString2, paramString3);
    if (paramString1 == null)
    {
      APLog.i("APPLuginProxyActivity", "initPluginInterface objClass is null");
      a(paramContext.getApplicationContext());
      APPluginStatic.removeAll();
      APPluginUtils.unInstallPlugin(paramContext);
      return null;
    }
    paramContext = paramString1.getMethod(paramString3, getParamsType(paramArrayOfObject));
    APLog.i("APPLuginProxyActivity", "initPluginInterface method:" + paramContext);
    paramContext.setAccessible(true);
    paramContext = paramContext.invoke(paramString1, paramArrayOfObject);
    APLog.i("APPLuginProxyActivity", "initPluginInterface obj=" + paramContext);
    return paramContext;
  }
  
  protected boolean isWrapContent()
  {
    boolean bool = true;
    if (this.b != null) {
      bool = this.b.IIsWrapContent();
    }
    return bool;
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    APLog.i("APPLuginProxyActivity", "onActivityResult requestCode:" + paramInt1 + " resultCode:" + paramInt2 + " mPluginActivity:" + this.b);
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (this.b != null) {}
    try
    {
      Object localObject = APPluginUtils.getMD5FromPath(APPluginUtils.getInstallPath(this, this.d).getCanonicalPath());
      localObject = APPluginStatic.a(this.d, (String)localObject);
      if ((localObject != null) && (paramIntent != null)) {
        paramIntent.setExtrasClassLoader((ClassLoader)localObject);
      }
      this.b.IOnActivityResult(paramInt1, paramInt2, paramIntent);
      return;
    }
    catch (Exception paramIntent)
    {
      APLog.w("APPLuginProxyActivity onActivityResult", paramIntent.toString());
      paramIntent.printStackTrace();
    }
  }
  
  public void onBackPressed()
  {
    try
    {
      super.onBackPressed();
      return;
    }
    catch (IllegalStateException localIllegalStateException)
    {
      finish();
    }
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    if (this.b != null) {}
    try
    {
      this.b.IOnConfigurationChanged(paramConfiguration);
      return;
    }
    catch (Exception paramConfiguration)
    {
      paramConfiguration.printStackTrace();
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate ");
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate gPluginName:" + e + " gPluginApkFilePath1:" + f);
    if (TextUtils.isEmpty(e))
    {
      super.onCreate(paramBundle);
      APLog.w("APPLuginProxyActivity", "gPluginName is null");
      finish();
      APPluginStatic.removeAll();
    }
    for (;;)
    {
      return;
      Object localObject1 = APPluginUtils.getMD5FromPath(APPluginUtils.getInstallPathString(this, e));
      localObject1 = APPluginStatic.a(e, (String)localObject1);
      APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate savedInstanceState=" + paramBundle);
      APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate classLoader=" + localObject1);
      if ((paramBundle != null) && (localObject1 != null)) {
        paramBundle.setClassLoader((ClassLoader)localObject1);
      }
      Object localObject2 = getIntent();
      if (paramBundle != null)
      {
        localObject1 = paramBundle;
        label178:
        this.d = ((Bundle)localObject1).getString("pluginsdk_pluginName");
        this.a = ((Bundle)localObject1).getString("pluginsdk_launchActivity");
        this.c = ((Bundle)localObject1).getString("pluginsdk_pluginpath");
        APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate mPluginName：" + this.d);
        APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate mLaunchActivity：" + this.a);
        APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onCreate mPluginApkFilePath：" + this.c);
        if (!TextUtils.isEmpty(this.c)) {}
      }
      try
      {
        this.c = APPluginUtils.getInstallPath(this, this.d).getCanonicalPath();
        int j = 0;
        int k = 0;
        int i;
        if ((this.d == null) || (this.d.length() == 0))
        {
          localObject1 = "Param mPluingLocation missing!";
          i = k;
        }
        for (;;)
        {
          if (i == 0) {
            super.onCreate(paramBundle);
          }
          if (localObject1 == null) {
            break;
          }
          this.mCreateErrorInfo = ((String)localObject1);
          a(this.mCreateErrorInfo);
          if (shouldHandleStartPluginFailed(this.mCreateErrorInfo)) {
            break;
          }
          a(this);
          finish();
          APPluginStatic.removeAll();
          return;
          if (localObject1 != null) {
            ((Intent)localObject2).setExtrasClassLoader((ClassLoader)localObject1);
          }
          localObject1 = getIntent().getExtras();
          break label178;
          i = j;
          try
          {
            localObject2 = initPlugin();
            i = k;
            localObject1 = localObject2;
            if (localObject2 == null)
            {
              i = j;
              super.onCreate(paramBundle);
              i = 1;
              j = 1;
              this.b.IOnCreate(paramBundle);
              i = j;
              localObject1 = localObject2;
            }
          }
          catch (Exception localException1)
          {
            Log.e("Midas", "APPluginProxyActivity onCreate:" + localException1.toString());
            localException1.printStackTrace();
            String str = APPluginUtils.getExceptionInfo(localException1);
          }
        }
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
    }
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    if (this.b != null) {
      return this.b.IOnCreateOptionsMenu(paramMenu);
    }
    return super.onCreateOptionsMenu(paramMenu);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    APLog.i("APPluginProxyActivity", "onDestroy mPluginActivity:" + this.b);
    if (this.b != null) {}
    try
    {
      this.b.IOnDestroy();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool1 = false;
    if (this.b != null) {
      bool1 = this.b.IOnKeyDown(paramInt, paramKeyEvent);
    }
    boolean bool2 = bool1;
    if (!bool1) {
      bool2 = super.onKeyDown(paramInt, paramKeyEvent);
    }
    return bool2;
  }
  
  public boolean onMenuItemSelected(int paramInt, MenuItem paramMenuItem)
  {
    if (this.b != null) {
      return this.b.IOnMenuItemSelected(paramInt, paramMenuItem);
    }
    return super.onMenuItemSelected(paramInt, paramMenuItem);
  }
  
  public void onNewIntent(Intent paramIntent)
  {
    super.onNewIntent(paramIntent);
    Object localObject = APPluginUtils.getMD5FromPath(APPluginUtils.getInstallPathString(this, this.d));
    localObject = APPluginStatic.a(this.d, (String)localObject);
    APLog.i("APPLuginProxyActivity", "APPluginProxyActivity onNewIntent mPluginName:" + this.d + " classLoader: " + localObject);
    if (localObject != null) {
      paramIntent.setExtrasClassLoader((ClassLoader)localObject);
    }
    if ((this.b != null) && (paramIntent.getBooleanExtra("cleartop", false))) {
      this.b.IOnNewIntent(paramIntent);
    }
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    if (this.b != null) {
      return this.b.IOnOptionsItemSelected(paramMenuItem);
    }
    return super.onOptionsItemSelected(paramMenuItem);
  }
  
  protected void onPause()
  {
    super.onPause();
    if (this.b != null) {
      this.b.IOnPause();
    }
  }
  
  public boolean onPrepareOptionsMenu(Menu paramMenu)
  {
    if (this.b != null) {
      return this.b.IOnPrepareOptionsMenu(paramMenu);
    }
    return super.onPrepareOptionsMenu(paramMenu);
  }
  
  protected void onRestoreInstanceState(Bundle paramBundle)
  {
    Object localObject = APPluginUtils.getMD5FromPath(APPluginUtils.getInstallPathString(this, this.d));
    localObject = APPluginStatic.a(this.d, (String)localObject);
    if (localObject != null) {}
    try
    {
      a(paramBundle, (ClassLoader)localObject);
      super.onRestoreInstanceState(paramBundle);
      if (this.b != null) {
        this.b.IOnRestoreInstanceState(paramBundle);
      }
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
  }
  
  protected void onResume()
  {
    super.onResume();
    if (this.b != null) {
      this.b.IOnResume();
    }
  }
  
  protected void onSaveInstanceState(Bundle paramBundle)
  {
    if (this.b != null) {
      this.b.IOnSaveInstanceState(paramBundle);
    }
    paramBundle.putString("pluginsdk_pluginName", this.d);
    paramBundle.putString("pluginsdk_pluginLocation", this.d);
    paramBundle.putString("pluginsdk_pluginpath", this.c);
    paramBundle.putString("pluginsdk_launchActivity", this.a);
    super.onSaveInstanceState(paramBundle);
  }
  
  protected void onStart()
  {
    super.onStart();
    if (this.b != null) {
      this.b.IOnStart();
    }
  }
  
  protected void onStop()
  {
    super.onStop();
    if (this.b != null) {
      this.b.IOnStop();
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (this.b != null) {
      return this.b.IOnTouchEvent(paramMotionEvent);
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void onUserInteraction()
  {
    if (this.b != null)
    {
      this.b.IOnUserInteraction();
      return;
    }
    super.onUserInteraction();
  }
  
  protected void onUserLeaveHint()
  {
    super.onUserLeaveHint();
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    if (this.b != null) {
      this.b.IOnWindowFocusChanged(paramBoolean);
    }
  }
  
  public void setRequestedOrientation(int paramInt)
  {
    APLog.i("APPluginProxyActivity", "setRequestedOrientation requestedOrientation:" + paramInt);
    super.setRequestedOrientation(paramInt);
  }
  
  protected boolean shouldHandleStartPluginFailed(String paramString)
  {
    boolean bool = false;
    if ((paramString.contains("permission")) || (paramString.contains("filenotfoundexception")))
    {
      showNeedUninstanllAndInstallDialog();
      bool = true;
    }
    while ((!paramString.contains("resources$notfoundexception")) && (!paramString.contains("resourcesnotfoundexception"))) {
      return bool;
    }
    showNeedUninstanllAndInstallDialog();
    return true;
  }
  
  protected void showNeedUninstanllAndInstallDialog()
  {
    Object localObject = new AlertDialog.Builder(this);
    ((AlertDialog.Builder)localObject).setTitle("温馨提示");
    ((AlertDialog.Builder)localObject).setMessage("启动" + this.d + "失败，请卸载重装~");
    ((AlertDialog.Builder)localObject).setPositiveButton("我知道了", new b(this));
    localObject = ((AlertDialog.Builder)localObject).create();
    try
    {
      ((Dialog)localObject).show();
      return;
    }
    catch (Exception localException) {}
  }
  
  public void startActivityForResult(Intent paramIntent, int paramInt)
  {
    APLog.i("APPLuginProxyActivity", "startActivityForResult.Override");
    if (paramIntent.getBooleanExtra("pluginsdk_IsPluginActivity", false))
    {
      String str = null;
      ComponentName localComponentName = paramIntent.getComponent();
      if (localComponentName != null) {
        str = localComponentName.getClassName();
      }
      paramIntent.putExtra("pluginsdk_IsPluginActivity", false);
      if ((str != null) && (str.length() > 0)) {
        a(this, str, paramIntent, paramInt);
      }
    }
    for (;;)
    {
      this.mStopFlag = 2;
      return;
      super.startActivityForResult(paramIntent, paramInt);
    }
  }
  
  public void startActivityForResult(Intent paramIntent, int paramInt1, int paramInt2)
  {
    APLog.i("APPLuginProxyActivity", "startActivityForResult.public");
    this.mStopFlag = 2;
    if ((!a(paramIntent)) || (!isMoveTaskToBack(this, paramIntent))) {
      paramIntent.addFlags(262144);
    }
    super.startActivityForResult(paramIntent, paramInt1);
  }
}
