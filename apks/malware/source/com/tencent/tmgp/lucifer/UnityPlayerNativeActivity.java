package com.tencent.tmgp.lucifer;

import android.app.NativeActivity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.Window;
import android.view.accessibility.AccessibilityEvent;
import com.tencent.android.tpush.XGPushManager;
import com.tencent.dengta.DengTaWrapper;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdkwrap.MSDKWrapper;
import com.tencent.pay.MidasPay;
import com.unity3d.player.UnityPlayer;

public class UnityPlayerNativeActivity
  extends NativeActivity
{
  private static final int GET_LUMCHMPDATA = 4;
  private static final int PAY_SDK = 3;
  private static ConnectivityManager connectivityManager;
  Handler MSDKHandler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      boolean bool2 = true;
      String str = paramAnonymousMessage.getData().getString("jsonData");
      int i = paramAnonymousMessage.getData().getInt("envType");
      int j = paramAnonymousMessage.getData().getInt("isLogEnable");
      if (i == 1)
      {
        bool1 = true;
        label42:
        MidasPay.IsRelease = bool1;
        if (j != 1) {
          break label95;
        }
      }
      label95:
      for (boolean bool1 = bool2;; bool1 = false)
      {
        MidasPay.IsLogEnable = bool1;
        switch (paramAnonymousMessage.what)
        {
        default: 
          return;
          bool1 = false;
          break label42;
        }
      }
      new MidasPay(UnityPlayerNativeActivity.this).OpenPay(str);
      return;
      new MidasPay(UnityPlayerNativeActivity.this).getMpInfo(paramAnonymousMessage.getData().getString("className"), paramAnonymousMessage.getData().getString("methodName"), str);
    }
  };
  private int height;
  private BroadcastReceiver mReceiver = new BroadcastReceiver()
  {
    public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
    {
      if (paramAnonymousIntent.getAction().equals("android.net.conn.CONNECTIVITY_CHANGE"))
      {
        Log.d("NetworkMonitor", "����״̬�Ѿ��ı�");
        paramAnonymousContext = UnityPlayerNativeActivity.connectivityManager.getActiveNetworkInfo();
        if ((paramAnonymousContext == null) || (!paramAnonymousContext.isAvailable()) || (!paramAnonymousContext.isConnected())) {
          break label84;
        }
        paramAnonymousIntent = paramAnonymousContext.getTypeName();
        Log.d("NetworkMonitor", "��ǰ�������ƣ�" + paramAnonymousIntent);
      }
      for (;;)
      {
        UnityPlayer.UnitySendMessage("NetworkMonitor", "onConnectivityChange", Json4Net.networkInfo2Json(paramAnonymousContext));
        return;
        label84:
        Log.d("NetworkMonitor", "û�п�������");
      }
    }
  };
  protected UnityPlayer mUnityPlayer;
  private int width;
  
  static
  {
    System.loadLibrary("NativeRQD");
  }
  
  public UnityPlayerNativeActivity() {}
  
  public static String GetActiveNetworkInfo()
  {
    if (connectivityManager == null) {
      Log.i("connectivityManager", "connectivityManager is null 2");
    }
    return Json4Net.networkInfo2Json(connectivityManager.getActiveNetworkInfo());
  }
  
  public void GetMpInfo(String paramString1, String paramString2, String paramString3, int paramInt1, int paramInt2)
  {
    Logger.d("UnityPlayerNativeActivity.GetMpInfo", paramString1 + " " + paramString2);
    Message localMessage = new Message();
    localMessage.what = 4;
    Bundle localBundle = new Bundle();
    localBundle.putString("className", paramString1);
    localBundle.putString("methodName", paramString2);
    localBundle.putString("jsonData", paramString3);
    localBundle.putInt("envType", paramInt1);
    localBundle.putInt("isLogEnable", paramInt2);
    localMessage.setData(localBundle);
    this.MSDKHandler.sendMessage(localMessage);
  }
  
  public void OpenPayView(String paramString, int paramInt1, int paramInt2)
  {
    Logger.d("PHeroActivity.OpenPayView", paramString);
    Message localMessage = new Message();
    localMessage.what = 3;
    Bundle localBundle = new Bundle();
    localBundle.putString("jsonData", paramString);
    localBundle.putInt("envType", paramInt1);
    localBundle.putInt("isLogEnable", paramInt2);
    localMessage.setData(localBundle);
    this.MSDKHandler.sendMessage(localMessage);
  }
  
  public void RegisterXGPush(int paramInt1, int paramInt2, String paramString)
  {
    boolean bool2 = true;
    boolean bool1;
    if (paramInt1 == 1)
    {
      bool1 = true;
      if (paramInt2 != 1) {
        break label32;
      }
    }
    for (;;)
    {
      PushBaseReceiver.RegisterXGPush(this, bool1, bool2, paramString);
      return;
      bool1 = false;
      break;
      label32:
      bool2 = false;
    }
  }
  
  public void XGClearLocalNotifications()
  {
    PushBaseReceiver.ClearLocalNotifications(this);
  }
  
  public void XGLocalNotification(String paramString)
  {
    PushBaseReceiver.LocalNotification(this, paramString);
  }
  
  public boolean dispatchGenericMotionEvent(MotionEvent paramMotionEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return super.dispatchGenericMotionEvent(paramMotionEvent);
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    if (paramKeyEvent.getAction() == 2) {
      return this.mUnityPlayer.injectEvent(paramKeyEvent);
    }
    return super.dispatchKeyEvent(paramKeyEvent);
  }
  
  public boolean dispatchKeyShortcutEvent(KeyEvent paramKeyEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return super.dispatchKeyShortcutEvent(paramKeyEvent);
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return super.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent);
  }
  
  public boolean dispatchTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return super.dispatchTouchEvent(paramMotionEvent);
  }
  
  public boolean dispatchTrackballEvent(MotionEvent paramMotionEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return super.dispatchTrackballEvent(paramMotionEvent);
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    Logger.d("called");
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    this.mUnityPlayer.configurationChanged(paramConfiguration);
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    try
    {
      requestWindowFeature(1);
      super.onCreate(paramBundle);
      getWindow().takeSurface(null);
      setTheme(16973831);
      getWindow().setFormat(2);
      this.mUnityPlayer = new UnityPlayer(this);
      if (this.mUnityPlayer.getSettings().getBoolean("hide_status_bar", true)) {
        getWindow().setFlags(1024, 1024);
      }
      setContentView(this.mUnityPlayer);
      this.mUnityPlayer.requestFocus();
      MSDKWrapper.init(this);
      paramBundle = getResources().getDisplayMetrics();
      this.width = paramBundle.widthPixels;
      this.height = paramBundle.heightPixels;
      DengTaWrapper.init(this);
      connectivityManager = (ConnectivityManager)getSystemService("connectivity");
      if (connectivityManager == null) {
        Log.i("connectivityManager", "connectivityManager is null 1");
      }
      return;
    }
    catch (Exception paramBundle)
    {
      Log.d("Unity", "occur a exception in onCreate phase");
    }
  }
  
  protected void onDestroy()
  {
    this.mUnityPlayer.quit();
    super.onDestroy();
    WGPlatform.onDestory(this);
  }
  
  public boolean onGenericMotionEvent(MotionEvent paramMotionEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return this.mUnityPlayer.injectEvent(paramMotionEvent);
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return this.mUnityPlayer.injectEvent(paramKeyEvent);
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return this.mUnityPlayer.injectEvent(paramKeyEvent);
  }
  
  protected void onNewIntent(Intent paramIntent)
  {
    Logger.d("called");
    super.onNewIntent(paramIntent);
    WGPlatform.handleCallback((Intent)paramIntent.clone());
    setIntent(paramIntent);
  }
  
  protected void onPause()
  {
    super.onPause();
    this.mUnityPlayer.pause();
    WGPlatform.onPause();
  }
  
  protected void onRestart()
  {
    super.onRestart();
    WGPlatform.onRestart();
  }
  
  protected void onResume()
  {
    super.onResume();
    this.mUnityPlayer.resume();
    WGPlatform.onResume();
    XGClearLocalNotifications();
  }
  
  protected void onStart()
  {
    super.onStart();
    PushBaseReceiver.PushClickedResult(this, "onStart");
  }
  
  protected void onStop()
  {
    super.onStop();
    WGPlatform.onStop();
    XGPushManager.onActivityStoped(this);
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!MSDKWrapper.bEnableInput) {
      return true;
    }
    return this.mUnityPlayer.injectEvent(paramMotionEvent);
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    this.mUnityPlayer.windowFocusChanged(paramBoolean);
  }
}
