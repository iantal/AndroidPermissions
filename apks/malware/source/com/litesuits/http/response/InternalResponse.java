package com.litesuits.http.response;

import android.util.Log;
import com.litesuits.http.data.HttpStatus;
import com.litesuits.http.data.NameValuePair;
import com.litesuits.http.exception.HttpException;
import com.litesuits.http.listener.StatisticsListener;
import com.litesuits.http.parser.DataParser;
import com.litesuits.http.request.AbstractRequest;

public class InternalResponse<T>
  implements Response<T>
{
  private static final String TAG = InternalResponse.class.getSimpleName();
  protected String charSet = "UTF-8";
  protected long contentLength;
  protected HttpException exception;
  protected NameValuePair[] headers;
  protected HttpStatus httpStatus;
  protected boolean isCacheHit;
  protected long readedLength;
  protected int redirectTimes;
  protected AbstractRequest<T> request;
  protected int retryTimes;
  protected StatisticsListener statistics;
  protected Object tag;
  protected long useTime;
  
  public InternalResponse(AbstractRequest<T> paramAbstractRequest)
  {
    this.request = paramAbstractRequest;
  }
  
  public String getCharSet()
  {
    return this.charSet;
  }
  
  public long getContentLength()
  {
    return this.contentLength;
  }
  
  public HttpException getException()
  {
    return this.exception;
  }
  
  public NameValuePair[] getHeaders()
  {
    return this.headers;
  }
  
  public HttpStatus getHttpStatus()
  {
    return this.httpStatus;
  }
  
  public String getRawString()
  {
    return this.request.getDataParser().getRawString();
  }
  
  public long getReadedLength()
  {
    return this.readedLength;
  }
  
  public int getRedirectTimes()
  {
    return this.redirectTimes;
  }
  
  public <R extends AbstractRequest<T>> R getRequest()
  {
    return this.request;
  }
  
  public T getResult()
  {
    return this.request.getDataParser().getData();
  }
  
  public int getRetryTimes()
  {
    return this.retryTimes;
  }
  
  public StatisticsListener getStatistics()
  {
    return this.statistics;
  }
  
  public Object getTag()
  {
    return this.tag;
  }
  
  public long getUseTime()
  {
    return this.useTime;
  }
  
  public boolean isCacheHit()
  {
    return this.isCacheHit;
  }
  
  public boolean isConnectSuccess()
  {
    return (this.httpStatus != null) && (this.httpStatus.isSuccess());
  }
  
  public boolean isResultOk()
  {
    return getResult() != null;
  }
  
  public void printInfo()
  {
    Log.i(TAG, resToString());
  }
  
  public String resToString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("_____________________ lite http response info start _____________________").append("\n url           : ").append(this.request.getUri()).append("\n status        : ").append(this.httpStatus).append("\n charSet       : ").append(this.charSet).append("\n useTime       : ").append(this.useTime).append("\n retryTimes    : ").append(this.retryTimes).append("\n redirectTimes : ").append(this.redirectTimes).append("\n readedLength  : ").append(this.readedLength).append("\n contentLength : ").append(this.contentLength).append("\n statistics    : ").append(this.statistics).append("\n tag           : ").append(this.tag).append("\n header        ");
    if (this.headers == null) {
      localStringBuilder.append(": null");
    }
    for (;;)
    {
      if (getRawString() != null) {
        localStringBuilder.append("\n_").append("x\n raw string    : ").append(getRawString());
      }
      localStringBuilder.append("\n ").append(this.request).append("\n_").append("\n _____________________ data-start _____________________").append("\n ").append(getResult()).append("\n _____________________ data-over _____________________").append("\n_").append("\n exception      : ").append(this.exception).append("\n____________________________ lite http response info end ____________________________");
      return localStringBuilder.toString();
      NameValuePair[] arrayOfNameValuePair = this.headers;
      int j = arrayOfNameValuePair.length;
      int i = 0;
      while (i < j)
      {
        NameValuePair localNameValuePair = arrayOfNameValuePair[i];
        localStringBuilder.append("\n|    ").append(localNameValuePair);
        i += 1;
      }
    }
  }
  
  public void setCacheHit(boolean paramBoolean)
  {
    this.isCacheHit = paramBoolean;
  }
  
  public void setCharSet(String paramString)
  {
    if (paramString != null) {
      this.charSet = paramString;
    }
  }
  
  public long setContentLength(long paramLong)
  {
    this.contentLength = paramLong;
    return this.contentLength;
  }
  
  public void setException(HttpException paramHttpException)
  {
    this.exception = paramHttpException;
  }
  
  public void setHeaders(NameValuePair[] paramArrayOfNameValuePair)
  {
    this.headers = paramArrayOfNameValuePair;
  }
  
  public void setHttpStatus(HttpStatus paramHttpStatus)
  {
    this.httpStatus = paramHttpStatus;
  }
  
  public void setReadedLength(long paramLong)
  {
    this.readedLength = paramLong;
  }
  
  public void setRedirectTimes(int paramInt)
  {
    this.redirectTimes = paramInt;
  }
  
  public <R extends AbstractRequest<T>> void setRequest(R paramR)
  {
    this.request = paramR;
  }
  
  public void setRetryTimes(int paramInt)
  {
    this.retryTimes = paramInt;
  }
  
  public void setStatistics(StatisticsListener paramStatisticsListener)
  {
    this.statistics = paramStatisticsListener;
  }
  
  public Response<T> setTag(Object paramObject)
  {
    this.tag = paramObject;
    return this;
  }
  
  public void setUseTime(long paramLong)
  {
    this.useTime = paramLong;
  }
  
  public String toString()
  {
    return resToString();
  }
}
