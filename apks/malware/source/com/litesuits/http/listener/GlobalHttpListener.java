package com.litesuits.http.listener;

import android.os.Looper;
import android.os.Message;
import com.litesuits.http.exception.HttpException;
import com.litesuits.http.log.HttpLog;
import com.litesuits.http.request.AbstractRequest;
import com.litesuits.http.response.Response;

public abstract class GlobalHttpListener
{
  private static final int M_CANCEL = 4;
  private static final int M_FAILURE = 3;
  private static final int M_START = 1;
  private static final int M_SUCCESS = 2;
  private static final String TAG = GlobalHttpListener.class.getSimpleName();
  private GlobalHttpListener.HttpHandler handler;
  private boolean runOnUiThread = true;
  
  public GlobalHttpListener()
  {
    this(true);
  }
  
  public GlobalHttpListener(boolean paramBoolean)
  {
    setRunOnUiThread(paramBoolean);
  }
  
  public final void cancel(Object paramObject, Response<?> paramResponse)
  {
    if (HttpLog.isPrint) {
      HttpLog.w(TAG, "Request be Cancelled!  isCancelled: " + paramResponse.getRequest().isCancelled() + "  Thread isInterrupted: " + Thread.currentThread().isInterrupted());
    }
    if (this.runOnUiThread)
    {
      Message localMessage = this.handler.obtainMessage(4);
      localMessage.obj = new Object[] { paramObject, paramResponse };
      this.handler.sendMessage(localMessage);
      return;
    }
    onCancel(paramObject, paramResponse);
  }
  
  public final void failure(HttpException paramHttpException, Response<?> paramResponse)
  {
    if (this.runOnUiThread)
    {
      Message localMessage = this.handler.obtainMessage(3);
      localMessage.obj = new Object[] { paramHttpException, paramResponse };
      this.handler.sendMessage(localMessage);
      return;
    }
    onFailure(paramHttpException, paramResponse);
  }
  
  public boolean isRunOnUiThread()
  {
    return this.runOnUiThread;
  }
  
  public void onCancel(Object paramObject, Response<?> paramResponse) {}
  
  public abstract void onFailure(HttpException paramHttpException, Response<?> paramResponse);
  
  public void onStart(AbstractRequest<?> paramAbstractRequest) {}
  
  public abstract void onSuccess(Object paramObject, Response<?> paramResponse);
  
  public GlobalHttpListener setRunOnUiThread(boolean paramBoolean)
  {
    this.runOnUiThread = paramBoolean;
    if (paramBoolean)
    {
      this.handler = new GlobalHttpListener.HttpHandler(this, Looper.getMainLooper(), null);
      return this;
    }
    this.handler = null;
    return this;
  }
  
  public final void start(AbstractRequest<?> paramAbstractRequest)
  {
    if (this.runOnUiThread)
    {
      Message localMessage = this.handler.obtainMessage(1);
      localMessage.obj = paramAbstractRequest;
      this.handler.sendMessage(localMessage);
      return;
    }
    onStart(paramAbstractRequest);
  }
  
  public final void success(Object paramObject, Response<?> paramResponse)
  {
    if (this.runOnUiThread)
    {
      Message localMessage = this.handler.obtainMessage(2);
      localMessage.obj = new Object[] { paramObject, paramResponse };
      this.handler.sendMessage(localMessage);
      return;
    }
    onSuccess(paramObject, paramResponse);
  }
}
