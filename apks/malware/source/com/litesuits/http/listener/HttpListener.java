package com.litesuits.http.listener;

import android.os.Looper;
import android.os.Message;
import com.litesuits.http.exception.HttpException;
import com.litesuits.http.log.HttpLog;
import com.litesuits.http.request.AbstractRequest;
import com.litesuits.http.response.Response;

public abstract class HttpListener<Data>
{
  private static final int M_CANCEL = 4;
  private static final int M_END = 9;
  private static final int M_FAILURE = 3;
  private static final int M_READING = 5;
  private static final int M_REDIRECT = 8;
  private static final int M_RETRY = 7;
  private static final int M_START = 1;
  private static final int M_SUCCESS = 2;
  private static final int M_UPLOADING = 6;
  private static final String TAG = HttpListener.class.getSimpleName();
  private HttpListener<Data>.HttpHandler handler;
  private HttpListener<Data> linkedListener;
  private boolean readingNotify = false;
  private boolean runOnUiThread = true;
  private boolean uploadingNotify = false;
  
  public HttpListener()
  {
    this(true);
  }
  
  public HttpListener(boolean paramBoolean)
  {
    setRunOnUiThread(paramBoolean);
  }
  
  public HttpListener(boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    this(paramBoolean1);
    this.readingNotify = paramBoolean2;
    this.uploadingNotify = paramBoolean3;
  }
  
  public boolean disableListener()
  {
    return false;
  }
  
  public final HttpListener<Data> getLinkedListener()
  {
    return this.linkedListener;
  }
  
  public final boolean isReadingNotify()
  {
    return this.readingNotify;
  }
  
  public final boolean isRunOnUiThread()
  {
    return this.runOnUiThread;
  }
  
  public final boolean isUploadingNotify()
  {
    return this.uploadingNotify;
  }
  
  public final void notifyCallCancel(Data paramData, Response<Data> paramResponse)
  {
    if (HttpLog.isPrint) {
      HttpLog.w(TAG, "Request be Cancelled!  isCancelled: " + paramResponse.getRequest().isCancelled() + "  Thread isInterrupted: " + Thread.currentThread().isInterrupted());
    }
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(4);
        localMessage.obj = new Object[] { paramData, paramResponse };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallCancel(paramData, paramResponse);
        return;
        onCancel(paramData, paramResponse);
      }
    }
  }
  
  public final void notifyCallEnd(Response<Data> paramResponse)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(9);
        localMessage.obj = paramResponse;
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallEnd(paramResponse);
        return;
        onEnd(paramResponse);
      }
    }
  }
  
  public final void notifyCallFailure(HttpException paramHttpException, Response<Data> paramResponse)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(3);
        localMessage.obj = new Object[] { paramHttpException, paramResponse };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallFailure(paramHttpException, paramResponse);
        return;
        onFailure(paramHttpException, paramResponse);
      }
    }
  }
  
  public final void notifyCallLoading(AbstractRequest<Data> paramAbstractRequest, long paramLong1, long paramLong2)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.readingNotify)
      {
        if (!this.runOnUiThread) {
          break label89;
        }
        Message localMessage = this.handler.obtainMessage(5);
        localMessage.obj = new Object[] { paramAbstractRequest, Long.valueOf(paramLong1), Long.valueOf(paramLong2) };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallLoading(paramAbstractRequest, paramLong1, paramLong2);
        return;
        label89:
        onLoading(paramAbstractRequest, paramLong1, paramLong2);
      }
    }
  }
  
  public final void notifyCallRedirect(AbstractRequest<Data> paramAbstractRequest, int paramInt1, int paramInt2)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(8);
        localMessage.obj = new Object[] { paramAbstractRequest, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallRedirect(paramAbstractRequest, paramInt1, paramInt2);
        return;
        onRedirect(paramAbstractRequest, paramInt1, paramInt2);
      }
    }
  }
  
  public final void notifyCallRetry(AbstractRequest<Data> paramAbstractRequest, int paramInt1, int paramInt2)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(7);
        localMessage.obj = new Object[] { paramAbstractRequest, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallRetry(paramAbstractRequest, paramInt1, paramInt2);
        return;
        onRetry(paramAbstractRequest, paramInt1, paramInt2);
      }
    }
  }
  
  public final void notifyCallStart(AbstractRequest<Data> paramAbstractRequest)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(1);
        localMessage.obj = paramAbstractRequest;
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallStart(paramAbstractRequest);
        return;
        onStart(paramAbstractRequest);
      }
    }
  }
  
  public final void notifyCallSuccess(Data paramData, Response<Data> paramResponse)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.runOnUiThread)
      {
        Message localMessage = this.handler.obtainMessage(2);
        localMessage.obj = new Object[] { paramData, paramResponse };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallSuccess(paramData, paramResponse);
        return;
        onSuccess(paramData, paramResponse);
      }
    }
  }
  
  public final void notifyCallUploading(AbstractRequest<Data> paramAbstractRequest, long paramLong1, long paramLong2)
  {
    if (disableListener()) {}
    for (;;)
    {
      return;
      if (this.uploadingNotify)
      {
        if (!this.runOnUiThread) {
          break label90;
        }
        Message localMessage = this.handler.obtainMessage(6);
        localMessage.obj = new Object[] { paramAbstractRequest, Long.valueOf(paramLong1), Long.valueOf(paramLong2) };
        this.handler.sendMessage(localMessage);
      }
      while (this.linkedListener != null)
      {
        this.linkedListener.notifyCallUploading(paramAbstractRequest, paramLong1, paramLong2);
        return;
        label90:
        onUploading(paramAbstractRequest, paramLong1, paramLong2);
      }
    }
  }
  
  public void onCancel(Data paramData, Response<Data> paramResponse) {}
  
  public void onEnd(Response<Data> paramResponse) {}
  
  public void onFailure(HttpException paramHttpException, Response<Data> paramResponse) {}
  
  public void onLoading(AbstractRequest<Data> paramAbstractRequest, long paramLong1, long paramLong2) {}
  
  public void onRedirect(AbstractRequest<Data> paramAbstractRequest, int paramInt1, int paramInt2) {}
  
  public void onRetry(AbstractRequest<Data> paramAbstractRequest, int paramInt1, int paramInt2) {}
  
  public void onStart(AbstractRequest<Data> paramAbstractRequest) {}
  
  public void onSuccess(Data paramData, Response<Data> paramResponse) {}
  
  public void onUploading(AbstractRequest<Data> paramAbstractRequest, long paramLong1, long paramLong2) {}
  
  public final HttpListener<Data> setLinkedListener(HttpListener<Data> paramHttpListener)
  {
    this.linkedListener = paramHttpListener;
    return this;
  }
  
  public final HttpListener<Data> setReadingNotify(boolean paramBoolean)
  {
    this.readingNotify = paramBoolean;
    return this;
  }
  
  public final HttpListener<Data> setRunOnUiThread(boolean paramBoolean)
  {
    this.runOnUiThread = paramBoolean;
    if (paramBoolean)
    {
      this.handler = new HttpListener.HttpHandler(this, Looper.getMainLooper(), null);
      return this;
    }
    this.handler = null;
    return this;
  }
  
  public final HttpListener<Data> setUploadingNotify(boolean paramBoolean)
  {
    this.uploadingNotify = paramBoolean;
    return this;
  }
}
