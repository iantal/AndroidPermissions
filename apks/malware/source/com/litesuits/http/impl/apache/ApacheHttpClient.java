package com.litesuits.http.impl.apache;

import android.os.Build.VERSION;
import com.litesuits.http.HttpConfig;
import com.litesuits.http.LiteHttp;
import com.litesuits.http.data.HttpStatus;
import com.litesuits.http.exception.ClientException;
import com.litesuits.http.exception.HttpClientException;
import com.litesuits.http.exception.HttpNetException;
import com.litesuits.http.exception.HttpServerException;
import com.litesuits.http.exception.ServerException;
import com.litesuits.http.listener.HttpListener;
import com.litesuits.http.listener.StatisticsListener;
import com.litesuits.http.log.HttpLog;
import com.litesuits.http.parser.DataParser;
import com.litesuits.http.request.AbstractRequest;
import com.litesuits.http.response.InternalResponse;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.StatusLine;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.client.methods.HttpOptions;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpTrace;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.HttpEntityWrapper;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.message.BasicHeader;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

public class ApacheHttpClient
  extends LiteHttp
{
  public static final int DEFAULT_KEEP_LIVE = 30000;
  public static final int DEFAULT_MAX_CONN_PER_ROUT = 128;
  public static final int DEFAULT_MAX_CONN_TOTAL = 256;
  private static String TAG = ApacheHttpClient.class.getSimpleName();
  public static final boolean TCP_NO_DELAY = true;
  private DefaultHttpClient mHttpClient;
  private HttpContext mHttpContext;
  private HttpRetryHandler retryHandler;
  
  public ApacheHttpClient(HttpConfig paramHttpConfig)
  {
    initConfig(paramHttpConfig);
    this.mHttpContext = new SyncBasicHttpContext(new BasicHttpContext());
    this.mHttpClient = createApacheHttpClient(createHttpParams());
  }
  
  private DefaultHttpClient createApacheHttpClient(BasicHttpParams paramBasicHttpParams)
  {
    paramBasicHttpParams = new DefaultHttpClient(createClientConnManager(paramBasicHttpParams), paramBasicHttpParams);
    paramBasicHttpParams.setRedirectHandler(new ApacheHttpClient.1(this));
    paramBasicHttpParams.setHttpRequestRetryHandler(new ApacheHttpClient.2(this));
    paramBasicHttpParams.addRequestInterceptor(new ApacheHttpClient.3(this));
    paramBasicHttpParams.addResponseInterceptor(new ApacheHttpClient.4(this));
    return paramBasicHttpParams;
  }
  
  private HttpUriRequest createApacheRequest(AbstractRequest paramAbstractRequest)
  {
    Object localObject;
    switch (ApacheHttpClient.7.$SwitchMap$com$litesuits$http$request$param$HttpMethods[paramAbstractRequest.getMethod().ordinal()])
    {
    default: 
      return new HttpGet(paramAbstractRequest.getFullUri());
    case 1: 
      return new HttpGet(paramAbstractRequest.getFullUri());
    case 2: 
      return new HttpHead(paramAbstractRequest.getFullUri());
    case 3: 
      return new HttpDelete(paramAbstractRequest.getFullUri());
    case 4: 
      return new HttpTrace(paramAbstractRequest.getFullUri());
    case 5: 
      return new HttpOptions(paramAbstractRequest.getFullUri());
    case 6: 
      localObject = new HttpPost(paramAbstractRequest.getFullUri());
    }
    for (;;)
    {
      ((HttpEntityEnclosingRequestBase)localObject).setEntity(EntityBuilder.build(paramAbstractRequest));
      return localObject;
      localObject = new HttpPut(paramAbstractRequest.getFullUri());
      continue;
      localObject = new HttpPatch(paramAbstractRequest.getFullUri());
    }
  }
  
  private ThreadSafeClientConnManager createClientConnManager(BasicHttpParams paramBasicHttpParams)
  {
    SchemeRegistry localSchemeRegistry = new SchemeRegistry();
    SSLSocketFactory localSSLSocketFactory = MySSLSocketFactory.getFixedSocketFactory();
    localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    localSchemeRegistry.register(new Scheme("https", localSSLSocketFactory, 443));
    return new ThreadSafeClientConnManager(paramBasicHttpParams, localSchemeRegistry);
  }
  
  private BasicHttpParams createHttpParams()
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    ConnManagerParams.setTimeout(localBasicHttpParams, this.config.getConnectTimeout());
    ConnManagerParams.setMaxConnectionsPerRoute(localBasicHttpParams, new ConnPerRouteBean(128));
    ConnManagerParams.setMaxTotalConnections(localBasicHttpParams, 256);
    HttpConnectionParams.setTcpNoDelay(localBasicHttpParams, true);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, this.config.getConnectTimeout());
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, this.config.getSocketTimeout());
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, this.config.getSocketBufferSize());
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
    HttpProtocolParams.setUserAgent(localBasicHttpParams, this.config.getUserAgent());
    return localBasicHttpParams;
  }
  
  private String getCharsetFromEntity(HttpEntity paramHttpEntity, String paramString)
  {
    paramHttpEntity = paramHttpEntity.getContentType();
    int i;
    if (paramHttpEntity != null)
    {
      paramHttpEntity = paramHttpEntity.getElements();
      if (paramHttpEntity.length > 0)
      {
        org.apache.http.NameValuePair[] arrayOfNameValuePair = paramHttpEntity[0].getParameters();
        if (arrayOfNameValuePair != null)
        {
          int j = arrayOfNameValuePair.length;
          i = 0;
          if (i < j)
          {
            paramHttpEntity = arrayOfNameValuePair[i];
            if (paramHttpEntity.getName().equalsIgnoreCase("charset"))
            {
              paramHttpEntity = paramHttpEntity.getValue();
              if ((paramHttpEntity == null) || (paramHttpEntity.length() <= 0)) {}
            }
          }
        }
      }
    }
    do
    {
      return paramHttpEntity;
      i += 1;
      break;
      paramHttpEntity = paramString;
    } while (paramString != null);
    return "UTF-8";
  }
  
  private void setKeepAlive(DefaultHttpClient paramDefaultHttpClient)
  {
    paramDefaultHttpClient.setReuseStrategy(new ApacheHttpClient.5(this));
    paramDefaultHttpClient.setKeepAliveStrategy(new ApacheHttpClient.6(this));
  }
  
  private void settingOthers(BasicHttpParams paramBasicHttpParams)
  {
    HttpConnectionParams.setLinger(paramBasicHttpParams, 30000);
    HttpConnectionParams.setStaleCheckingEnabled(paramBasicHttpParams, false);
    HttpProtocolParams.setUseExpectContinue(paramBasicHttpParams, false);
  }
  
  protected <T> void connectWithRetries(AbstractRequest<T> paramAbstractRequest, InternalResponse paramInternalResponse)
  {
    HttpUriRequest localHttpUriRequest = createApacheRequest(paramAbstractRequest);
    Object localObject3;
    if (paramAbstractRequest.getHeaders() != null)
    {
      localObject1 = paramAbstractRequest.getHeaders().entrySet().iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject3 = (Map.Entry)((Iterator)localObject1).next();
        localHttpUriRequest.setHeader(new BasicHeader((String)((Map.Entry)localObject3).getKey(), (String)((Map.Entry)localObject3).getValue()));
      }
    }
    HttpListener localHttpListener = paramAbstractRequest.getHttpListener();
    StatisticsListener localStatisticsListener = paramInternalResponse.getStatistics();
    int k = paramAbstractRequest.getMaxRetryTimes();
    int m = paramAbstractRequest.getMaxRedirectTimes();
    boolean bool = true;
    Object localObject1 = null;
    int i = 0;
    for (;;)
    {
      IOException localIOException2;
      if (bool) {
        for (;;)
        {
          try
          {
            if (paramAbstractRequest.isCancelledOrInterrupted()) {
              return;
            }
            if (localStatisticsListener != null) {
              localStatisticsListener.onPreConnect(paramAbstractRequest);
            }
            localObject3 = this.mHttpClient.execute(localHttpUriRequest);
            if (localStatisticsListener != null) {
              localStatisticsListener.onAfterConnect(paramAbstractRequest);
            }
            localObject4 = ((HttpResponse)localObject3).getStatusLine();
            localObject1 = new HttpStatus(((StatusLine)localObject4).getStatusCode(), ((StatusLine)localObject4).getReasonPhrase());
            paramInternalResponse.setHttpStatus((HttpStatus)localObject1);
            Header[] arrayOfHeader = ((HttpResponse)localObject3).getAllHeaders();
            if (arrayOfHeader != null)
            {
              com.litesuits.http.data.NameValuePair[] arrayOfNameValuePair = new com.litesuits.http.data.NameValuePair[arrayOfHeader.length];
              int j = 0;
              if (j < arrayOfHeader.length)
              {
                String str1 = arrayOfHeader[j].getName();
                String str2 = arrayOfHeader[j].getValue();
                if ("Content-Length".equalsIgnoreCase(str1)) {
                  paramInternalResponse.setContentLength(Long.parseLong(str2));
                }
                arrayOfNameValuePair[j] = new com.litesuits.http.data.NameValuePair(str1, str2);
                j += 1;
                continue;
              }
              paramInternalResponse.setHeaders(arrayOfNameValuePair);
            }
            if ((((StatusLine)localObject4).getStatusCode() <= 299) || (((StatusLine)localObject4).getStatusCode() == 600))
            {
              localObject1 = ((HttpResponse)localObject3).getEntity();
              if (localObject1 == null) {
                return;
              }
              localObject3 = getCharsetFromEntity((HttpEntity)localObject1, paramAbstractRequest.getCharSet());
              paramInternalResponse.setCharSet((String)localObject3);
              if (paramAbstractRequest.isCancelledOrInterrupted()) {
                return;
              }
              long l = paramInternalResponse.getContentLength();
              localObject4 = paramAbstractRequest.getDataParser();
              if (localStatisticsListener != null) {
                localStatisticsListener.onPreRead(paramAbstractRequest);
              }
              ((DataParser)localObject4).readFromNetStream(((HttpEntity)localObject1).getContent(), l, (String)localObject3, this.config.getCacheDirPath());
              if (localStatisticsListener != null) {
                localStatisticsListener.onAfterRead(paramAbstractRequest);
              }
              paramInternalResponse.setReadedLength(((DataParser)localObject4).getReadedLength());
              endEntityViaReflection((HttpEntity)localObject1);
              return;
            }
          }
          catch (IOException localIOException1)
          {
            if (localIOException1 == null) {
              break label929;
            }
            try
            {
              if (paramAbstractRequest.isCancelledOrInterrupted()) {
                return;
              }
              i += 1;
              bool = this.retryHandler.retryRequest(localIOException1, i, k, this.mHttpContext, this.config.getContext());
              if (!bool) {
                break label926;
              }
              paramInternalResponse.setRetryTimes(i);
              if (HttpLog.isPrint) {
                HttpLog.i(TAG, "LiteHttp retry request: " + paramAbstractRequest.getUri());
              }
              if (localHttpListener == null) {
                break label926;
              }
              localHttpListener.notifyCallRetry(paramAbstractRequest, k, i);
            }
            catch (InterruptedException paramAbstractRequest)
            {
              Object localObject2;
              paramAbstractRequest.printStackTrace();
              return;
            }
            if (((StatusLine)localObject4).getStatusCode() <= 399) {
              if (paramInternalResponse.getRedirectTimes() < m)
              {
                localObject3 = ((HttpResponse)localObject3).getFirstHeader("location");
                if (localObject3 != null)
                {
                  localObject3 = ((Header)localObject3).getValue();
                  if ((localObject3 != null) && (((String)localObject3).length() > 0))
                  {
                    localObject2 = localObject3;
                    if (!((String)localObject3).toLowerCase().startsWith("http"))
                    {
                      localObject2 = new URI(paramAbstractRequest.getFullUri());
                      localObject2 = new URI(((URI)localObject2).getScheme(), ((URI)localObject2).getHost(), (String)localObject3, null).toString();
                    }
                    paramInternalResponse.setRedirectTimes(paramInternalResponse.getRedirectTimes() + 1);
                    paramAbstractRequest.setUri((String)localObject2);
                    if (HttpLog.isPrint) {
                      HttpLog.i(TAG, "Redirect to : " + (String)localObject2);
                    }
                    if (localHttpListener != null) {
                      localHttpListener.notifyCallRedirect(paramAbstractRequest, m, paramInternalResponse.getRedirectTimes());
                    }
                    connectWithRetries(paramAbstractRequest, paramInternalResponse);
                    return;
                  }
                }
              }
            }
          }
          catch (NullPointerException localNullPointerException)
          {
            if (Build.VERSION.SDK_INT >= 9) {
              break label891;
            }
            localIOException2 = new IOException(localNullPointerException.getMessage());
            continue;
            throw new HttpServerException(localIOException2);
          }
          catch (URISyntaxException paramAbstractRequest)
          {
            throw new HttpClientException(paramAbstractRequest);
            throw new HttpServerException(ServerException.RedirectTooMuch);
          }
          catch (IllegalStateException paramAbstractRequest)
          {
            throw new HttpClientException(paramAbstractRequest);
            if (((StatusLine)localObject4).getStatusCode() <= 499) {
              throw new HttpServerException(localIOException2);
            }
          }
          catch (SecurityException paramAbstractRequest)
          {
            Object localObject4;
            throw new HttpClientException(paramAbstractRequest, ClientException.PermissionDenied);
            if (((StatusLine)localObject4).getStatusCode() < 599) {
              throw new HttpServerException(localIOException2);
            }
          }
          catch (RuntimeException paramAbstractRequest)
          {
            throw new HttpClientException(paramAbstractRequest);
          }
          localIOException2 = null;
          continue;
          label891:
          localIOException2 = new IOException(localIOException2);
        }
      }
      if (localIOException2 == null) {
        break;
      }
      throw new HttpNetException(localIOException2);
      label926:
      continue;
      label929:
      bool = false;
    }
  }
  
  public void endEntityViaReflection(HttpEntity paramHttpEntity)
  {
    if ((paramHttpEntity instanceof HttpEntityWrapper)) {}
    for (;;)
    {
      try
      {
        Field[] arrayOfField = HttpEntityWrapper.class.getDeclaredFields();
        int j = arrayOfField.length;
        int i = 0;
        Field localField;
        if (i < j)
        {
          localField = arrayOfField[i];
          if (localField.getName().equals("wrappedEntity"))
          {
            if (localField != null)
            {
              localField.setAccessible(true);
              paramHttpEntity = (HttpEntity)localField.get(paramHttpEntity);
              if (paramHttpEntity != null)
              {
                paramHttpEntity.consumeContent();
                if (HttpLog.isPrint) {
                  HttpLog.d(TAG, "HttpEntity wrappedEntity reflection consumeContent");
                }
              }
            }
            return;
          }
          i += 1;
        }
        else
        {
          localField = null;
        }
      }
      catch (Throwable paramHttpEntity)
      {
        HttpLog.e(TAG, "wrappedEntity consume error. ", paramHttpEntity);
        return;
      }
    }
  }
  
  public void initConfig(HttpConfig paramHttpConfig)
  {
    HttpConfig localHttpConfig = paramHttpConfig;
    if (paramHttpConfig == null) {
      localHttpConfig = new HttpConfig(null);
    }
    super.initConfig(localHttpConfig);
    this.retryHandler = new HttpRetryHandler(localHttpConfig.getRetrySleepMillis(), localHttpConfig.isRequestSentRetryEnabled());
    if (this.mHttpClient != null)
    {
      paramHttpConfig = this.mHttpClient.getParams();
      HttpConnectionParams.setConnectionTimeout(paramHttpConfig, localHttpConfig.getConnectTimeout());
      HttpConnectionParams.setSoTimeout(paramHttpConfig, localHttpConfig.getSocketTimeout());
      HttpConnectionParams.setSocketBufferSize(paramHttpConfig, localHttpConfig.getSocketBufferSize());
      HttpProtocolParams.setUserAgent(paramHttpConfig, localHttpConfig.getUserAgent());
      this.mHttpClient.setParams(paramHttpConfig);
    }
  }
  
  protected void setConfigForHttpParams(int paramInt1, int paramInt2, int paramInt3)
  {
    super.setConfigForHttpParams(paramInt1, paramInt2, paramInt3);
    if (this.mHttpClient != null)
    {
      HttpParams localHttpParams = this.mHttpClient.getParams();
      HttpConnectionParams.setConnectionTimeout(localHttpParams, this.config.getConnectTimeout());
      HttpConnectionParams.setSoTimeout(localHttpParams, this.config.getSocketTimeout());
      HttpConnectionParams.setSocketBufferSize(localHttpParams, this.config.getSocketBufferSize());
      this.mHttpClient.setParams(localHttpParams);
      HttpLog.i(TAG, "lite-http set connectTimeout" + paramInt1 + " , socketTimeout: " + paramInt2 + " , socketBufferSize: " + paramInt3);
    }
  }
  
  protected void setConfigForRetryHandler(int paramInt, boolean paramBoolean)
  {
    super.setConfigForRetryHandler(paramInt, paramBoolean);
    this.retryHandler = new HttpRetryHandler(this.config.getRetrySleepMillis(), this.config.isRequestSentRetryEnabled());
    HttpLog.i(TAG, "lite-http set retrySleepMillis" + paramInt + " , requestSentRetryEnabled: " + paramBoolean);
  }
  
  protected void setUserAgent(String paramString)
  {
    super.setUserAgent(paramString);
    if (this.mHttpClient != null)
    {
      HttpParams localHttpParams = this.mHttpClient.getParams();
      HttpProtocolParams.setUserAgent(localHttpParams, this.config.getUserAgent());
      this.mHttpClient.setParams(localHttpParams);
      HttpLog.i(TAG, "lite-http set User-Agent: " + paramString);
    }
  }
}
