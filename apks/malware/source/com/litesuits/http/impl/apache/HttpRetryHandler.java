package com.litesuits.http.impl.apache;

import android.content.Context;
import com.litesuits.http.exception.HttpNetException;
import com.litesuits.http.exception.NetException;
import com.litesuits.http.log.HttpLog;
import com.litesuits.http.network.Network;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.ConnectException;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Iterator;
import javax.net.ssl.SSLException;
import org.apache.http.NoHttpResponseException;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.protocol.HttpContext;

public class HttpRetryHandler
  extends StandardHttpRequestRetryHandler
{
  public static final String TAG = HttpRetryHandler.class.getSimpleName();
  private HashSet<Class<?>> exceptionBlacklist = new HashSet();
  private HashSet<Class<?>> exceptionWhitelist = new HashSet();
  public final int retrySleepTimeMS;
  
  public HttpRetryHandler(int paramInt, boolean paramBoolean)
  {
    super(0, paramBoolean);
    this.retrySleepTimeMS = paramInt;
    this.exceptionWhitelist.add(NoHttpResponseException.class);
    this.exceptionWhitelist.add(SocketException.class);
    this.exceptionWhitelist.add(SocketTimeoutException.class);
    this.exceptionWhitelist.add(ConnectTimeoutException.class);
    this.exceptionBlacklist.add(UnknownHostException.class);
    this.exceptionBlacklist.add(FileNotFoundException.class);
    this.exceptionBlacklist.add(SSLException.class);
    this.exceptionBlacklist.add(ConnectException.class);
  }
  
  protected boolean isInList(HashSet<Class<?>> paramHashSet, Throwable paramThrowable)
  {
    paramHashSet = paramHashSet.iterator();
    while (paramHashSet.hasNext()) {
      if (((Class)paramHashSet.next()).isInstance(paramThrowable)) {
        return true;
      }
    }
    return false;
  }
  
  public boolean retryRequest(IOException paramIOException, int paramInt1, int paramInt2, HttpContext paramHttpContext, Context paramContext)
  {
    boolean bool2 = true;
    if (paramInt1 > paramInt2)
    {
      if (HttpLog.isPrint) {
        HttpLog.w(TAG, "retry count > max retry times..");
      }
      throw new HttpNetException(paramIOException);
    }
    boolean bool1;
    if (isInList(this.exceptionBlacklist, paramIOException))
    {
      if (HttpLog.isPrint) {
        HttpLog.w(TAG, "exception in blacklist..");
      }
      bool1 = false;
      bool2 = bool1;
      if (bool1) {
        bool2 = retryRequest(paramHttpContext);
      }
      if (bool2)
      {
        if (paramContext == null) {
          break label281;
        }
        if (!Network.isConnected(paramContext)) {
          break label202;
        }
        HttpLog.d(TAG, "Network isConnected, retry now");
      }
    }
    for (;;)
    {
      if (HttpLog.isPrint) {
        HttpLog.i(TAG, "retry: " + bool2 + " , retryCount: " + paramInt1 + " , exception: " + paramIOException);
      }
      return bool2;
      bool1 = bool2;
      if (!isInList(this.exceptionWhitelist, paramIOException)) {
        break;
      }
      bool1 = bool2;
      if (!HttpLog.isPrint) {
        break;
      }
      HttpLog.w(TAG, "exception in whitelist..");
      bool1 = bool2;
      break;
      label202:
      if (Network.isConnectedOrConnecting(paramContext))
      {
        if (HttpLog.isPrint) {
          HttpLog.v(TAG, "Network is Connected Or Connecting, wait for retey : " + this.retrySleepTimeMS + " ms");
        }
        Thread.sleep(this.retrySleepTimeMS);
      }
      else
      {
        HttpLog.d(TAG, "Without any Network , immediately cancel retry");
        throw new HttpNetException(NetException.NetworkNotAvilable);
        label281:
        if (HttpLog.isPrint)
        {
          HttpLog.v(TAG, "app context is null..");
          HttpLog.v(TAG, "wait for retry : " + this.retrySleepTimeMS + " ms");
        }
        Thread.sleep(this.retrySleepTimeMS);
      }
    }
  }
}
