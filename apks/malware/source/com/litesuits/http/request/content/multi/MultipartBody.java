package com.litesuits.http.request.content.multi;

import com.litesuits.http.listener.HttpListener;
import com.litesuits.http.request.content.HttpBody;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.LinkedList;

public class MultipartBody
  extends HttpBody
{
  private String boundary;
  private byte[] boundaryEnd;
  private byte[] boundaryLine;
  private long bytesWritten;
  private LinkedList<AbstractPart> httpParts = new LinkedList();
  private long totalSize;
  
  public MultipartBody()
  {
    BoundaryCreater localBoundaryCreater = new BoundaryCreater();
    this.boundary = localBoundaryCreater.getBoundary();
    this.boundaryLine = localBoundaryCreater.getBoundaryLine();
    this.boundaryEnd = localBoundaryCreater.getBoundaryEnd();
    this.contentType = ("multipart/form-data; boundary=" + this.boundary);
  }
  
  public MultipartBody addPart(AbstractPart paramAbstractPart)
  {
    if (paramAbstractPart == null) {
      return this;
    }
    paramAbstractPart.setMultipartBody(this);
    paramAbstractPart.createHeader(this.boundaryLine);
    this.httpParts.add(paramAbstractPart);
    return this;
  }
  
  public MultipartBody addPart(String paramString1, File paramFile, String paramString2)
  {
    return addPart(new FilePart(paramString1, paramFile, paramString2));
  }
  
  public MultipartBody addPart(String paramString1, InputStream paramInputStream, String paramString2, String paramString3)
  {
    return addPart(new InputStreamPart(paramString1, paramInputStream, paramString2, paramString3));
  }
  
  public MultipartBody addPart(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    return addPart(new StringPart(paramString1, paramString2, paramString3, paramString4));
  }
  
  public MultipartBody addPart(String paramString1, byte[] paramArrayOfByte, String paramString2)
  {
    return addPart(new BytesPart(paramString1, paramArrayOfByte, paramString2));
  }
  
  public String getBoundary()
  {
    return this.boundary;
  }
  
  public byte[] getBoundaryEnd()
  {
    return this.boundaryEnd;
  }
  
  public byte[] getBoundaryLine()
  {
    return this.boundaryLine;
  }
  
  public long getContentLength()
  {
    try
    {
      Iterator localIterator = this.httpParts.iterator();
      long l1 = -1L;
      long l2;
      int i;
      for (;;) {}
    }
    catch (IOException localIOException1)
    {
      try
      {
        if (localIterator.hasNext())
        {
          l2 = ((AbstractPart)localIterator.next()).getTotalLength();
          if (l2 >= 0L) {
            break label78;
          }
          return -1L;
        }
        i = this.boundaryEnd.length;
        return i + l1;
      }
      catch (IOException localIOException2)
      {
        for (;;) {}
        l1 += l2;
      }
      localIOException1 = localIOException1;
      l1 = -1L;
      localIOException1.printStackTrace();
      return l1;
    }
  }
  
  public LinkedList<AbstractPart> getHttpParts()
  {
    return this.httpParts;
  }
  
  public MultipartBody setHttpParts(LinkedList<AbstractPart> paramLinkedList)
  {
    this.httpParts = paramLinkedList;
    return this;
  }
  
  protected void updateProgress(long paramLong)
  {
    this.bytesWritten += paramLong;
    if (this.httpListener != null) {
      this.httpListener.notifyCallUploading(this.request, this.totalSize, this.bytesWritten);
    }
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    this.bytesWritten = 0L;
    this.totalSize = ((int)getContentLength());
    Iterator localIterator = this.httpParts.iterator();
    while (localIterator.hasNext()) {
      ((AbstractPart)localIterator.next()).writeToServer(paramOutputStream);
    }
    paramOutputStream.write(this.boundaryEnd);
    updateProgress(this.boundaryEnd.length);
  }
}
