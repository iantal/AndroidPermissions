package com.litesuits.http.request.content.multi;

import com.litesuits.http.utils.StringCodingUtils;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;

public abstract class AbstractPart
{
  public static final byte[] CR_LF;
  public static final byte[] TRANSFER_ENCODING_8BIT = StringCodingUtils.getBytes("Content-Transfer-Encoding: 8bit\r\n", infoCharset);
  public static final byte[] TRANSFER_ENCODING_BINARY;
  protected static final Charset infoCharset = BoundaryCreater.charset;
  public byte[] header;
  protected String key;
  protected String mimeType = "application/octet-stream";
  protected MultipartBody multipartBody;
  
  static
  {
    CR_LF = StringCodingUtils.getBytes("\r\n", infoCharset);
    TRANSFER_ENCODING_BINARY = StringCodingUtils.getBytes("Content-Transfer-Encoding: binary\r\n", infoCharset);
  }
  
  protected AbstractPart(String paramString1, String paramString2)
  {
    this.key = paramString1;
    if (paramString2 != null) {
      this.mimeType = paramString2;
    }
  }
  
  protected abstract byte[] createContentDisposition();
  
  protected abstract byte[] createContentType();
  
  public byte[] createHeader(byte[] paramArrayOfByte)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      localByteArrayOutputStream.write(paramArrayOfByte);
      localByteArrayOutputStream.write(createContentDisposition());
      localByteArrayOutputStream.write(createContentType());
      localByteArrayOutputStream.write(getTransferEncoding());
      localByteArrayOutputStream.write(CR_LF);
      this.header = localByteArrayOutputStream.toByteArray();
      return this.header;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;)
      {
        paramArrayOfByte.printStackTrace();
      }
    }
  }
  
  public MultipartBody getMultipartBody()
  {
    return this.multipartBody;
  }
  
  public abstract long getTotalLength();
  
  public abstract byte[] getTransferEncoding();
  
  public void setMultipartBody(MultipartBody paramMultipartBody)
  {
    this.multipartBody = paramMultipartBody;
  }
  
  protected void updateProgress(int paramInt)
  {
    if (this.multipartBody != null) {
      this.multipartBody.updateProgress(paramInt);
    }
  }
  
  public abstract void writeTo(OutputStream paramOutputStream);
  
  public void writeToServer(OutputStream paramOutputStream)
  {
    if (this.header == null) {
      throw new RuntimeException("Not call createHeader()，未调用createHeader方法");
    }
    paramOutputStream.write(this.header);
    updateProgress(this.header.length);
    writeTo(paramOutputStream);
  }
}
