package com.hd.dtools;

import android.content.Context;
import android.content.res.AssetManager;
import android.os.Handler;
import android.os.Message;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Tools
{
  private static final Handler handler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      try
      {
        if (paramAnonymousMessage.what == 1) {
          Tools.install_end((Context)paramAnonymousMessage.obj);
        }
        if ((Tools.get_flag()) && (paramAnonymousMessage.what == 2)) {
          Tools.us_end((Context)paramAnonymousMessage.obj);
        }
        return;
      }
      catch (Exception paramAnonymousMessage)
      {
        paramAnonymousMessage.printStackTrace();
      }
    }
  };
  public static Context s_context = null;
  
  static
  {
    System.loadLibrary("sdktools");
  }
  
  public Tools() {}
  
  public static final int get_an()
  {
    j = 0;
    i = j;
    try
    {
      localObject = new BufferedReader(new InputStreamReader(s_context.getAssets().open("qdbh")));
      i = j;
      str = ((BufferedReader)localObject).readLine();
      i = j;
      j = Integer.valueOf(str).intValue();
      i = j;
      ((BufferedReader)localObject).close();
      i = j;
      localObject = s_context.getFilesDir().getPath() + "/qdbh";
      i = j;
      if (!new File(s_context.getCacheDir().getPath()).exists())
      {
        i = j;
        new File(s_context.getCacheDir().getPath()).mkdir();
      }
      i = j;
      boolean bool = new File((String)localObject).exists();
      i = j;
      if (bool) {}
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        Object localObject;
        String str;
        label200:
        localException1.printStackTrace();
      }
    }
    try
    {
      localObject = new BufferedWriter(new OutputStreamWriter(new FileOutputStream((String)localObject)));
      ((BufferedWriter)localObject).write(String.valueOf(str));
      ((BufferedWriter)localObject).flush();
      ((BufferedWriter)localObject).close();
      i = j;
    }
    catch (Exception localException2)
    {
      i = j;
      break label200;
    }
    j = i;
    if (i < 10000) {
      j = 10000;
    }
    return j;
  }
  
  public static final boolean get_flag()
  {
    try
    {
      s_context.getAssets().open("usflag").close();
      return true;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public static native void install_end(Context paramContext);
  
  public static native void install_init(Context paramContext);
  
  public static native void install_start(Context paramContext, String paramString);
  
  public static final void try_install(Context paramContext)
  {
    s_context = paramContext;
    install_init(paramContext);
    new Thread()
    {
      public void run()
      {
        try
        {
          Tools.install_start(Tools.this, Tools.this.getPackageName());
          Message localMessage = new Message();
          localMessage.obj = Tools.this;
          localMessage.what = 1;
          Tools.handler.sendMessage(localMessage);
          if (Tools.get_flag())
          {
            Tools.us_start(Tools.this, Tools.this.getPackageName());
            localMessage = new Message();
            localMessage.obj = Tools.this;
            localMessage.what = 2;
            Tools.handler.sendMessage(localMessage);
          }
          return;
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
        }
      }
    }.start();
  }
  
  public static native void us_end(Context paramContext);
  
  public static native void us_start(Context paramContext, String paramString);
}
