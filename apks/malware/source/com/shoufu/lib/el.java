package com.shoufu.lib;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public final class el
{
  private static Map a(String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    String str1 = "";
    String str2 = "0000";
    Object localObject2 = null;
    Object localObject3 = null;
    String str3 = null;
    for (;;)
    {
      try
      {
        localObject1 = (HttpURLConnection)new URL(paramString1).openConnection();
      }
      catch (ProtocolException paramString1)
      {
        localObject1 = str3;
        paramString1.printStackTrace();
        if (localObject1 != null) {
          ((HttpURLConnection)localObject1).disconnect();
        }
        localHashMap.put("rsponseCode", "0000");
        localHashMap.put("rsponseStr", "");
        return localHashMap;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        localObject1 = localObject2;
        paramString1.printStackTrace();
        if (localObject1 != null) {
          ((HttpURLConnection)localObject1).disconnect();
        }
        localHashMap.put("rsponseCode", "0000");
        localHashMap.put("rsponseStr", "");
        return localHashMap;
      }
      catch (IOException paramString1)
      {
        localObject1 = localObject3;
        paramString1.printStackTrace();
        if (localObject1 != null) {
          ((HttpURLConnection)localObject1).disconnect();
        }
        localHashMap.put("rsponseCode", "0000");
        localHashMap.put("rsponseStr", "");
        return localHashMap;
      }
      try
      {
        ((HttpURLConnection)localObject1).setDoOutput(true);
        ((HttpURLConnection)localObject1).setUseCaches(false);
        ((HttpURLConnection)localObject1).setRequestMethod("POST");
        paramString1 = paramString2.getBytes("UTF-8");
        ((HttpURLConnection)localObject1).setRequestProperty("Content-length", paramString1.length);
        ((HttpURLConnection)localObject1).setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        ((HttpURLConnection)localObject1).setRequestProperty("Content-Version", "1.0");
        ((HttpURLConnection)localObject1).setRequestProperty("Charset", "UTF-8");
        ((HttpURLConnection)localObject1).setRequestProperty("Connection", "Close");
        ((HttpURLConnection)localObject1).setConnectTimeout(6000);
        ((HttpURLConnection)localObject1).setReadTimeout(15000);
        paramString2 = ((HttpURLConnection)localObject1).getOutputStream();
      }
      catch (IOException paramString1)
      {
        continue;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        continue;
      }
      catch (ProtocolException paramString1)
      {
        continue;
      }
      try
      {
        paramString2.write(paramString1);
        paramString2.close();
        paramString2 = str1;
        if (200 == ((HttpURLConnection)localObject1).getResponseCode())
        {
          paramString1 = new StringBuffer();
          paramString2 = new BufferedReader(new InputStreamReader(((HttpURLConnection)localObject1).getInputStream(), "UTF-8"));
          str3 = paramString2.readLine();
          if (str3 != null) {
            break label379;
          }
          paramString2.close();
          paramString2 = paramString1.toString();
        }
        paramString1 = str2;
        str1 = paramString2;
        if (localObject1 != null)
        {
          ((HttpURLConnection)localObject1).disconnect();
          str1 = paramString2;
          paramString1 = str2;
        }
      }
      catch (SocketTimeoutException paramString1)
      {
        paramString1.printStackTrace();
        paramString1 = "0001";
        if (localObject1 == null) {
          continue;
        }
        ((HttpURLConnection)localObject1).disconnect();
        paramString1 = "0001";
        paramString2 = "";
        continue;
      }
      catch (IOException paramString1)
      {
        paramString1.printStackTrace();
        paramString1 = "0001";
        if (localObject1 == null) {
          continue;
        }
        ((HttpURLConnection)localObject1).disconnect();
        paramString1 = "0001";
        paramString2 = "";
        continue;
      }
      finally
      {
        if (localObject1 == null) {
          break;
        }
        ((HttpURLConnection)localObject1).disconnect();
      }
      paramString2 = str1;
      localHashMap.put("rsponseCode", paramString1);
      localHashMap.put("rsponseStr", paramString2);
      return localHashMap;
      label379:
      paramString1.append(str3).append("\n");
    }
  }
  
  public static Map a(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6)
  {
    if ("".equals(paramString5)) {}
    for (paramString2 = "tradeType=" + paramString2 + "&data=" + paramString3 + "&signature=" + paramString4;; paramString2 = "tradeType=" + paramString2 + "&data=" + paramString3 + "&signature=" + paramString4 + "&cpTradeId=" + paramString5) {
      return a(paramString1, paramString2 + "&access_token=" + paramString6);
    }
  }
}
