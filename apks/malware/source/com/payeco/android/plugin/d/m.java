package com.payeco.android.plugin.d;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.os.Build.VERSION;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.DatePicker;
import java.lang.reflect.Field;
import java.util.Calendar;

final class m
  extends DatePickerDialog
{
  public m(Activity paramActivity, int paramInt1, DatePickerDialog.OnDateSetListener paramOnDateSetListener, int paramInt2, int paramInt3, int paramInt4)
  {
    super(paramActivity, paramInt1, paramOnDateSetListener, paramInt2, paramInt3, paramInt4);
    setTitle("设置有效期");
    paramActivity.getWindow().setSoftInputMode(3);
    paramActivity = getDatePicker();
    try
    {
      if (Integer.valueOf(Build.VERSION.SDK).intValue() < 21) {
        break label231;
      }
      paramOnDateSetListener = paramActivity.getClass().getDeclaredFields();
      int j = paramOnDateSetListener.length;
      paramInt1 = 0;
      if (paramInt1 < j) {
        break label118;
      }
    }
    catch (SecurityException paramOnDateSetListener)
    {
      for (;;)
      {
        Object localObject;
        Field[] arrayOfField;
        Log.d("ERROR", paramOnDateSetListener.getMessage());
      }
    }
    catch (IllegalArgumentException paramOnDateSetListener)
    {
      for (;;)
      {
        Log.d("ERROR", paramOnDateSetListener.getMessage());
      }
    }
    catch (IllegalAccessException paramOnDateSetListener)
    {
      for (;;)
      {
        label66:
        Log.d("ERROR", paramOnDateSetListener.getMessage());
      }
    }
    paramOnDateSetListener = Calendar.getInstance();
    paramOnDateSetListener.set(paramInt2, paramInt3, paramInt4);
    paramActivity.setMinDate(paramOnDateSetListener.getTimeInMillis() - 1800L);
    paramOnDateSetListener = Calendar.getInstance();
    paramOnDateSetListener.set(paramInt2 + 20, paramInt3, paramInt4);
    paramActivity.setMaxDate(paramOnDateSetListener.getTimeInMillis());
    return;
    label118:
    localObject = paramOnDateSetListener[paramInt1];
    int k;
    int i;
    if (localObject.getName().equals("mDelegate"))
    {
      localObject.setAccessible(true);
      new Object();
      localObject = localObject.get(paramActivity);
      arrayOfField = localObject.getClass().getDeclaredFields();
      k = arrayOfField.length;
      i = 0;
    }
    label231:
    label399:
    label406:
    for (;;)
    {
      Field localField = arrayOfField[i];
      if (localField.getName().equals("mDaySpinner"))
      {
        localField.setAccessible(true);
        new Object();
        ((View)localField.get(localObject)).setVisibility(8);
        break label399;
        paramOnDateSetListener = paramActivity.getClass().getDeclaredFields();
        i = paramOnDateSetListener.length;
        paramInt1 = 0;
        while (paramInt1 < i)
        {
          localObject = paramOnDateSetListener[paramInt1];
          Log.d("hx", "时间选择器" + localObject.getName());
          if ((localObject.getName().equals("mDayPicker")) || (localObject.getName().equals("mDaySpinner")))
          {
            localObject.setAccessible(true);
            new Object();
            ((View)localObject.get(paramActivity)).setVisibility(8);
          }
          paramInt1 += 1;
        }
        break label66;
      }
      for (;;)
      {
        if (i < k) {
          break label406;
        }
        paramInt1 += 1;
        break;
        i += 1;
      }
    }
  }
  
  public final void onDateChanged(DatePicker paramDatePicker, int paramInt1, int paramInt2, int paramInt3)
  {
    super.onDateChanged(paramDatePicker, paramInt1, paramInt2, paramInt3);
    setTitle("设置有效期");
  }
}
