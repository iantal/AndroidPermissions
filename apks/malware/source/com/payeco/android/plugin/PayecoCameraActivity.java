package com.payeco.android.plugin;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.Size;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.Toast;
import java.io.IOException;
import java.util.List;

@SuppressLint({"NewApi"})
public class PayecoCameraActivity
  extends Activity
  implements SurfaceHolder.Callback
{
  int a;
  int b;
  private Camera c;
  private boolean d = false;
  private boolean e = false;
  
  public PayecoCameraActivity() {}
  
  private void a(SurfaceHolder paramSurfaceHolder)
  {
    if (this.c != null) {}
    for (;;)
    {
      try
      {
        localParameters = this.c.getParameters();
        if (!this.d) {
          continue;
        }
        localParameters.setRotation(90);
        this.c.setDisplayOrientation(90);
        if (localParameters.getSupportedFocusModes().contains("auto")) {
          localParameters.setFocusMode("auto");
        }
        if (Build.VERSION.SDK_INT != 15) {
          continue;
        }
        localObject = getWindowManager().getDefaultDisplay();
        DisplayMetrics localDisplayMetrics = new DisplayMetrics();
        ((Display)localObject).getMetrics(localDisplayMetrics);
        this.a = localDisplayMetrics.widthPixels;
        this.b = localDisplayMetrics.heightPixels;
        localObject = localParameters.getSupportedPreviewSizes();
        i = 0;
      }
      catch (IOException paramSurfaceHolder)
      {
        Camera.Parameters localParameters;
        Object localObject;
        int i;
        Log.e("payeco", "PayecoCameraActivity -setCamera error.", paramSurfaceHolder);
        this.c.release();
        continue;
        Log.v("getSupportedPreviewSizes(width)", String.valueOf(((Camera.Size)((List)localObject).get(i)).width));
        Log.v("getSupportedPreviewSizes(height)", String.valueOf(((Camera.Size)((List)localObject).get(i)).height));
        if ((((Camera.Size)((List)localObject).get(i)).width != 640) || (((Camera.Size)((List)localObject).get(i)).height != 480)) {
          continue;
        }
        this.a = 640;
        this.b = 480;
        localParameters.setPreviewSize(640, 480);
        i += 1;
        continue;
      }
      if (i < ((List)localObject).size()) {
        continue;
      }
      localParameters.setPreviewFpsRange(4, 10);
      localParameters.setPictureFormat(256);
      localParameters.set("jpeg-quality", 85);
      this.c.setParameters(localParameters);
      this.c.setPreviewDisplay(paramSurfaceHolder);
      this.c.startPreview();
      this.e = true;
      return;
      localParameters.setRotation(270);
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    requestWindowFeature(1);
    try
    {
      paramBundle = new LinearLayout(this);
      paramBundle.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));
      paramBundle.setOrientation(1);
      SurfaceView localSurfaceView = new SurfaceView(this);
      localSurfaceView.setLayoutParams(new LinearLayout.LayoutParams(-1, -2, 1.0F));
      LinearLayout localLinearLayout = new LinearLayout(this);
      localLinearLayout.setOrientation(0);
      Button localButton1 = new Button(this);
      localButton1.setLayoutParams(new LinearLayout.LayoutParams(-2, -2, 1.0F));
      localButton1.setText("拍照");
      localButton1.setOnClickListener(new a(this, localButton1));
      Button localButton2 = new Button(this);
      localButton2.setLayoutParams(new LinearLayout.LayoutParams(-2, -2, 1.0F));
      localButton2.setText("取消");
      localButton2.setOnClickListener(new f(this));
      localLinearLayout.addView(localButton1);
      localLinearLayout.addView(localButton2);
      paramBundle.addView(localSurfaceView);
      paramBundle.addView(localLinearLayout);
      setContentView(paramBundle);
      paramBundle = localSurfaceView.getHolder();
      paramBundle.addCallback(this);
      paramBundle.setType(3);
      return;
    }
    catch (Exception paramBundle)
    {
      Log.e("payeco", "无法开启相机！", paramBundle);
      Toast.makeText(this, "无法开启相机！", 1).show();
      setResult(1);
      finish();
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    return true;
  }
  
  public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3)
  {
    if (this.c != null) {
      a(paramSurfaceHolder);
    }
  }
  
  @SuppressLint({"NewApi"})
  @TargetApi(9)
  public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
  {
    try
    {
      int i;
      if ((Build.VERSION.SDK_INT >= 9) && (!this.e)) {
        i = 0;
      }
      for (;;)
      {
        if (i >= Camera.getNumberOfCameras())
        {
          if ((this.c == null) && (!this.e))
          {
            this.c = Camera.open();
            this.d = true;
          }
          a(paramSurfaceHolder);
          return;
        }
        Camera.CameraInfo localCameraInfo = new Camera.CameraInfo();
        Camera.getCameraInfo(i, localCameraInfo);
        if (localCameraInfo.facing == 1) {
          this.c = Camera.open(i);
        }
        i += 1;
      }
      return;
    }
    catch (Exception paramSurfaceHolder)
    {
      Log.e("payeco", "PayecoCameraActivity -surfaceCreated error.", paramSurfaceHolder);
      setResult(1);
      finish();
    }
  }
  
  public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
  {
    if (this.c != null)
    {
      this.c.stopPreview();
      this.c.release();
      this.c = null;
    }
    if (this.e) {
      this.e = false;
    }
  }
}
