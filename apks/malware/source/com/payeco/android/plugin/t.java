package com.payeco.android.plugin;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.net.http.SslError;
import android.os.Build.VERSION;
import android.webkit.SslErrorHandler;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import com.payeco.android.plugin.d.aa;

@SuppressLint({"NewApi"})
final class t
  extends WebViewClient
{
  private t(PayecoPluginLoadingActivity paramPayecoPluginLoadingActivity, byte paramByte) {}
  
  public final void onPageFinished(WebView paramWebView, String paramString)
  {
    super.onPageFinished(paramWebView, paramString);
    paramString = "var funcs=[]; \r\n" + "var index=0;\r\n" + "var WebViewJavascriptBridge={};\r\n" + "WebViewJavascriptBridge.callHandler=function(handleName,data,callback){\r\n" + "\tindex++; \r\n" + "\tfuncs[index] = callback;\r\n" + "\tmybridge.callHandler(handleName,JSON.stringify(data),index+'');\r\n" + "}\r\n" + "WebViewJavascriptBridge.syn=function(handleName,data){\r\n" + "\tif(data==undefined){\r\n" + "\t\treturn JSON.parse(mybridge.syn(handleName));\r\n" + "\t}else if(typeof(data)=='object'){\r\n" + "\t\treturn JSON.parse(mybridge.syn(handleName,JSON.stringify(data)));\r\n" + "\t}else{\r\n" + "\t\treturn JSON.parse(mybridge.syn(handleName,data));\r\n" + "\t}\r\n" + "}\r\n" + "funcs[1000000+\"\"] = function(errCode, errMsg,fileName,data){\r\n" + "\t$(\"#previewPic\").attr(\"src\",data);\r\n" + "}\r\n" + "if(onPluginStart && typeof(onPluginStart)=='function'){\r\n" + "\tonPluginStart();\r\n" + "}\r\n";
    if (Integer.valueOf(Build.VERSION.SDK).intValue() > 18) {
      paramWebView.evaluateJavascript("javascript:" + paramString, new u(this));
    }
    for (;;)
    {
      PayecoPluginLoadingActivity.g(this.a);
      if (!this.a.isFinishing()) {
        aa.a();
      }
      return;
      paramWebView.loadUrl("javascript:" + paramString);
    }
  }
  
  public final void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
  {
    super.onPageStarted(paramWebView, paramString, paramBitmap);
    if (!this.a.isFinishing()) {
      aa.a(this.a, "正在加载页面...", true);
    }
  }
  
  public final void onReceivedSslError(WebView paramWebView, SslErrorHandler paramSslErrorHandler, SslError paramSslError)
  {
    paramSslErrorHandler.proceed();
  }
  
  public final boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
  {
    if ((Integer.valueOf(Build.VERSION.SDK).intValue() > 18) && (paramString.startsWith("javascript:"))) {
      paramWebView.evaluateJavascript(paramString, new v(this));
    }
    for (;;)
    {
      return false;
      paramWebView.loadUrl(paramString);
    }
  }
}
