package com.payeco.android.plugin.js;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.webkit.JavascriptInterface;
import android.webkit.WebView;
import com.payeco.android.plugin.b.h;
import com.payeco.android.plugin.c.d;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class JsBridge
  extends Handler
{
  private Context context;
  private JsFunction jsFunction;
  protected Map mapJsCallBack;
  private WebView webView;
  
  public JsBridge(Context paramContext, WebView paramWebView)
  {
    this.webView = paramWebView;
    this.mapJsCallBack = new HashMap();
    this.context = paramContext;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  private void addError(String paramString1, String paramString2, Throwable paramThrowable)
  {
    if (paramThrowable != null) {
      Log.e("payeco", String.format("错误码:%s,错误消息:%s", new Object[] { paramString1, paramString2 }), paramThrowable);
    }
    for (;;)
    {
      try
      {
        JSONObject localJSONObject = new JSONObject();
        localJSONObject.put("errCode", paramString1);
        localJSONObject.put("errMsg", paramString2);
        localJSONObject.put("errTime", new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()));
        if (paramThrowable != null) {
          localJSONObject.put("errDetail", paramThrowable.getMessage());
        }
        paramString2 = d.b(this.context, h.d(), "ErrorInfo");
        paramString1 = new JSONArray();
        if (paramString2 != null) {
          paramString1 = new JSONArray(paramString2);
        }
        paramString1.put(localJSONObject);
        d.a(this.context, h.d(), "ErrorInfo", paramString1.toString());
        return;
      }
      catch (JSONException paramString1)
      {
        Log.e("payeco", "记录错误信息出错！");
      }
      Log.e("payeco", String.format("错误码:%s,错误消息:%s", new Object[] { paramString1, paramString2 }));
    }
  }
  
  private String getArgsString(Object... paramVarArgs)
  {
    if ((paramVarArgs == null) || (paramVarArgs.length == 0)) {
      return "";
    }
    JSONArray localJSONArray = new JSONArray();
    int j = paramVarArgs.length;
    int i = 0;
    for (;;)
    {
      if (i >= j)
      {
        paramVarArgs = localJSONArray.toString();
        return paramVarArgs.substring(1, paramVarArgs.length() - 1);
      }
      localJSONArray.put(paramVarArgs[i]);
      i += 1;
    }
  }
  
  @JavascriptInterface
  public void callHandler(String paramString1, String paramString2, String paramString3)
  {
    Message localMessage = new Message();
    HashMap localHashMap = new HashMap();
    localHashMap.put("name", paramString1);
    localHashMap.put("params", paramString2);
    localHashMap.put("callBackId", paramString3);
    localMessage.obj = localHashMap;
    sendMessage(localMessage);
  }
  
  public void execJsMethod(String paramString, Object paramObject, JsCallBack paramJsCallBack)
  {
    StringBuffer localStringBuffer = new StringBuffer().append("javascript:" + paramString + "(");
    paramString = paramObject;
    if (paramObject != null)
    {
      if (!(paramObject instanceof String)) {
        break label235;
      }
      localStringBuffer.append("'" + paramObject + "'");
      paramString = paramObject;
    }
    for (;;)
    {
      if ((paramString != null) && (paramJsCallBack != null)) {
        localStringBuffer.append(",");
      }
      if (paramJsCallBack != null)
      {
        paramString = UUID.randomUUID().toString();
        localStringBuffer.append("function(data){").append("if(data==undefined){").append("\tmybridge.jsCallBackToNative(null," + paramString + ");").append("}else if(typeof(data)=='object'){").append("\tmybridge.jsCallBackToNative(JSON.stringify(data)," + paramString + ");").append("}else{").append("\tmybridge.jsCallBackToNative(data," + paramString + ");").append("}");
        this.mapJsCallBack.put(paramString, paramJsCallBack);
      }
      localStringBuffer.append(")");
      this.webView.loadUrl(localStringBuffer.toString());
      return;
      label235:
      if ((paramObject instanceof JSONObject))
      {
        localStringBuffer.append(paramObject);
        paramString = paramObject;
      }
      else
      {
        paramString = null;
      }
    }
  }
  
  public void execJsMethodFromFuncs(String paramString, Object... paramVarArgs)
  {
    if (paramString == null) {
      return;
    }
    paramVarArgs = getArgsString(paramVarArgs);
    this.webView.loadUrl("javascript:funcs[" + paramString + "](" + paramVarArgs + ");");
    this.webView.loadUrl("javascript:funcs[" + paramString + "]=null;");
  }
  
  public void execNativeMethod(String paramString1, String paramString2, String paramString3)
  {
    JSONObject localJSONObject = new JSONObject(paramString2);
    Object localObject = null;
    paramString2 = this.jsFunction.getClass();
    for (;;)
    {
      if (paramString2 == Object.class) {
        throw localObject;
      }
      try
      {
        paramString2.getDeclaredMethod(paramString1, new Class[] { JSONObject.class, String.class }).invoke(this.jsFunction, new Object[] { localJSONObject, paramString3 });
        return;
      }
      catch (Exception localException)
      {
        paramString2 = paramString2.getSuperclass();
      }
    }
  }
  
  public JsFunction getJsFunction()
  {
    return this.jsFunction;
  }
  
  public void handleMessage(Message paramMessage)
  {
    Object localObject = (Map)paramMessage.obj;
    paramMessage = (String)((Map)localObject).get("name");
    String str = (String)((Map)localObject).get("params");
    localObject = (String)((Map)localObject).get("callBackId");
    try
    {
      execNativeMethod(paramMessage, str, (String)localObject);
      return;
    }
    catch (Exception paramMessage)
    {
      addError("3003", "js调用本地方法出错！", paramMessage);
    }
  }
  
  @JavascriptInterface
  public void jsCallBackToNative(String paramString1, String paramString2)
  {
    if ((paramString2 == null) || (!this.mapJsCallBack.containsKey(paramString2))) {
      return;
    }
    ((JsCallBack)this.mapJsCallBack.remove(paramString2)).a();
  }
  
  public void setJsFunction(JsFunction paramJsFunction)
  {
    this.jsFunction = paramJsFunction;
  }
  
  @JavascriptInterface
  public String syn(String paramString)
  {
    for (;;)
    {
      Class localClass;
      String str;
      try
      {
        localClass = this.jsFunction.getClass();
        str = null;
        if (localClass == Object.class) {
          throw str;
        }
      }
      catch (Exception paramString)
      {
        addError("3001", "js调用本地方法出错！", paramString);
        return "{errCode:100,errMsg:'调用客户端本地方法出错！'}";
      }
      try
      {
        str = (String)localClass.getDeclaredMethod(paramString, new Class[0]).invoke(this.jsFunction, new Object[0]);
        return str;
      }
      catch (Exception localException)
      {
        localClass = localClass.getSuperclass();
      }
    }
  }
  
  @JavascriptInterface
  public String syn(String paramString1, String paramString2)
  {
    for (;;)
    {
      Class localClass;
      String str;
      try
      {
        localClass = this.jsFunction.getClass();
        str = null;
        if (localClass == Object.class) {
          throw str;
        }
      }
      catch (Exception paramString1)
      {
        addError("3002", "js调用本地方法出错！", paramString1);
        return "{errCode:100,errMsg:'调用原生方法出错'}";
      }
      try
      {
        str = (String)localClass.getDeclaredMethod(paramString1, new Class[] { String.class }).invoke(this.jsFunction, new Object[] { paramString2 });
        return str;
      }
      catch (Exception localException)
      {
        localClass = localClass.getSuperclass();
      }
    }
  }
}
