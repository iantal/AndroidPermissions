package com.payeco.android.plugin.c;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.media.ExifInterface;
import android.util.Log;
import java.io.IOException;

public final class a
{
  public a() {}
  
  public static int a(String paramString)
  {
    try
    {
      paramString = new ExifInterface(paramString);
      int i;
      if (paramString != null)
      {
        i = paramString.getAttributeInt("Orientation", -1);
        if (i == -1) {}
      }
      switch (i)
      {
      case 4: 
      case 5: 
      case 7: 
      default: 
        return 0;
      }
    }
    catch (IOException paramString)
    {
      for (;;)
      {
        Log.e("test", "cannot read exif", paramString);
        paramString = null;
      }
      return 90;
    }
    return 180;
    return 270;
  }
  
  public static Bitmap a(String paramString, int paramInt1, int paramInt2)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inJustDecodeBounds = true;
    Bitmap localBitmap = BitmapFactory.decodeFile(paramString, localOptions);
    localOptions.inJustDecodeBounds = false;
    int i = localOptions.outWidth;
    int j = localOptions.outHeight;
    float f1 = paramInt1;
    float f2 = paramInt2;
    if ((i > j) && (i > f2)) {
      paramInt1 = (int)(localOptions.outWidth / f2);
    }
    for (;;)
    {
      paramInt2 = paramInt1;
      if (paramInt1 <= 0) {
        paramInt2 = 1;
      }
      localOptions.inSampleSize = paramInt2;
      localOptions.inDither = false;
      localOptions.inPurgeable = true;
      localOptions.inTempStorage = new byte['ã€€'];
      localOptions.inPreferredConfig = Bitmap.Config.RGB_565;
      try
      {
        paramString = BitmapFactory.decodeFile(paramString, localOptions);
        return paramString;
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return localBitmap;
      }
      if ((i < j) && (j > f1)) {
        paramInt1 = (int)(localOptions.outHeight / f1);
      } else {
        paramInt1 = 1;
      }
    }
  }
  
  /* Error */
  public static String a(Bitmap paramBitmap)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore_1
    //   4: aload_0
    //   5: ifnull +137 -> 142
    //   8: new 85	java/io/ByteArrayOutputStream
    //   11: dup
    //   12: invokespecial 86	java/io/ByteArrayOutputStream:<init>	()V
    //   15: astore_2
    //   16: aload_2
    //   17: astore_1
    //   18: aload_0
    //   19: getstatic 92	android/graphics/Bitmap$CompressFormat:JPEG	Landroid/graphics/Bitmap$CompressFormat;
    //   22: bipush 100
    //   24: aload_2
    //   25: invokevirtual 98	android/graphics/Bitmap:compress	(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
    //   28: pop
    //   29: aload_2
    //   30: astore_1
    //   31: aload_2
    //   32: invokevirtual 101	java/io/ByteArrayOutputStream:flush	()V
    //   35: aload_2
    //   36: astore_1
    //   37: aload_2
    //   38: invokevirtual 104	java/io/ByteArrayOutputStream:close	()V
    //   41: aload_2
    //   42: astore_1
    //   43: aload_2
    //   44: invokevirtual 108	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   47: iconst_0
    //   48: invokestatic 114	android/util/Base64:encodeToString	([BI)Ljava/lang/String;
    //   51: astore_0
    //   52: aload_0
    //   53: astore_1
    //   54: aload_2
    //   55: ifnull +13 -> 68
    //   58: aload_2
    //   59: invokevirtual 101	java/io/ByteArrayOutputStream:flush	()V
    //   62: aload_2
    //   63: invokevirtual 104	java/io/ByteArrayOutputStream:close	()V
    //   66: aload_0
    //   67: astore_1
    //   68: aload_1
    //   69: areturn
    //   70: astore_0
    //   71: aconst_null
    //   72: astore_2
    //   73: aload_2
    //   74: astore_1
    //   75: aload_0
    //   76: invokevirtual 115	java/io/IOException:printStackTrace	()V
    //   79: aload_3
    //   80: astore_1
    //   81: aload_2
    //   82: ifnull -14 -> 68
    //   85: aload_2
    //   86: invokevirtual 101	java/io/ByteArrayOutputStream:flush	()V
    //   89: aload_2
    //   90: invokevirtual 104	java/io/ByteArrayOutputStream:close	()V
    //   93: aconst_null
    //   94: areturn
    //   95: astore_0
    //   96: aload_0
    //   97: invokevirtual 115	java/io/IOException:printStackTrace	()V
    //   100: aconst_null
    //   101: areturn
    //   102: astore_0
    //   103: aconst_null
    //   104: astore_1
    //   105: aload_1
    //   106: ifnull +11 -> 117
    //   109: aload_1
    //   110: invokevirtual 101	java/io/ByteArrayOutputStream:flush	()V
    //   113: aload_1
    //   114: invokevirtual 104	java/io/ByteArrayOutputStream:close	()V
    //   117: aload_0
    //   118: athrow
    //   119: astore_1
    //   120: aload_1
    //   121: invokevirtual 115	java/io/IOException:printStackTrace	()V
    //   124: goto -7 -> 117
    //   127: astore_1
    //   128: aload_1
    //   129: invokevirtual 115	java/io/IOException:printStackTrace	()V
    //   132: aload_0
    //   133: areturn
    //   134: astore_0
    //   135: goto -30 -> 105
    //   138: astore_0
    //   139: goto -66 -> 73
    //   142: aconst_null
    //   143: astore_2
    //   144: aload_1
    //   145: astore_0
    //   146: goto -94 -> 52
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	149	0	paramBitmap	Bitmap
    //   3	111	1	localObject1	Object
    //   119	2	1	localIOException1	IOException
    //   127	18	1	localIOException2	IOException
    //   15	129	2	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    //   1	79	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   8	16	70	java/io/IOException
    //   85	93	95	java/io/IOException
    //   8	16	102	finally
    //   109	117	119	java/io/IOException
    //   58	66	127	java/io/IOException
    //   18	29	134	finally
    //   31	35	134	finally
    //   37	41	134	finally
    //   43	52	134	finally
    //   75	79	134	finally
    //   18	29	138	java/io/IOException
    //   31	35	138	java/io/IOException
    //   37	41	138	java/io/IOException
    //   43	52	138	java/io/IOException
  }
}
