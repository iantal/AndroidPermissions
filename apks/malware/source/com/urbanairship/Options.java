package com.urbanairship;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;

public abstract class Options
{
  public Options() {}
  
  public abstract String getDefaultPropertiesFilename();
  
  public abstract boolean isValid();
  
  public void loadFromProperties(Context paramContext)
  {
    loadFromProperties(paramContext, getDefaultPropertiesFilename());
  }
  
  public void loadFromProperties(Context paramContext, String paramString)
  {
    Object localObject = paramContext.getResources().getAssets();
    try
    {
      if (!Arrays.asList(((AssetManager)localObject).list("")).contains(paramString))
      {
        Logger.verbose("Options - Couldn't find " + paramString);
        return;
      }
    }
    catch (IOException paramContext)
    {
      Logger.error(paramContext);
      return;
    }
    paramContext = new Properties();
    label220:
    for (;;)
    {
      try
      {
        paramContext.load(((AssetManager)localObject).open(paramString));
        localObject = Arrays.asList(getClass().getDeclaredFields()).listIterator();
        if (!((ListIterator)localObject).hasNext()) {
          break;
        }
        Field localField = (Field)((ListIterator)localObject).next();
        String str = paramContext.getProperty(localField.getName());
        if (str != null)
        {
          try
          {
            if ((localField.getType() != Boolean.TYPE) && (localField.getType() != Boolean.class)) {
              break label220;
            }
            localField.set(this, Boolean.valueOf(str));
          }
          catch (IllegalAccessException localIllegalAccessException)
          {
            Logger.error("Unable to set field '" + localField.getName() + "' because the field is not visible.");
          }
          continue;
          try
          {
            localField.set(this, localIllegalAccessException.trim());
          }
          catch (IllegalArgumentException localIllegalArgumentException)
          {
            Logger.error("Unable to set field '" + localField.getName() + "' due to type mismatch.");
          }
        }
      }
      catch (IOException paramContext)
      {
        Logger.error("Error loading properties file " + paramString, paramContext);
        return;
      }
    }
  }
}
