package com.urbanairship.analytics;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings.Secure;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.CoreReceiver;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

public class Analytics
{
  public static final String ACTION_ANALYTICS_START = "com.urbanairship.analytics.START";
  private ActivityMonitor activityMonitor = new ActivityMonitor(new ActivityMonitor.Delegate()
  {
    public void onBackground()
    {
      Analytics.access$002(Analytics.this, true);
      Analytics.this.addEvent(new AppBackgroundEvent());
      Analytics.access$202(Analytics.this, null);
    }
    
    public void onForeground()
    {
      if (Analytics.this.fromBackground)
      {
        Analytics.access$102(Analytics.this, new Analytics.Session(Analytics.this));
        Analytics.access$002(Analytics.this, false);
      }
      Analytics.this.addEvent(new AppForegroundEvent());
    }
  });
  private String conversionPushId;
  private EventDataManager dataManager = new EventDataManager();
  private boolean fromBackground = false;
  private final String server = UAirship.shared().getAirshipConfigOptions().analyticsServer;
  private Session session = new Session();
  private EventUploadManager uploadManager = new EventUploadManager(this.dataManager);
  
  public Analytics() {}
  
  static String getHashedDeviceId()
  {
    int i = 0;
    Object localObject1 = Settings.Secure.getString(UAirship.shared().getApplicationContext().getContentResolver(), "android_id");
    if (localObject1 == null) {
      return "unavailable";
    }
    localObject1 = ((String)localObject1).getBytes();
    try
    {
      Object localObject2 = MessageDigest.getInstance("SHA-1");
      ((MessageDigest)localObject2).update((byte[])localObject1, 0, localObject1.length);
      localObject1 = ((MessageDigest)localObject2).digest();
      localObject2 = new StringBuilder();
      int j = localObject1.length;
      while (i < j)
      {
        ((StringBuilder)localObject2).append(String.format("%02x", new Object[] { Byte.valueOf(localObject1[i]) }));
        i += 1;
      }
      localObject1 = ((StringBuilder)localObject2).toString();
      return localObject1;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      Logger.error("Unable to hash the device ID: SHA1 digester not present");
    }
    return "unavailable";
  }
  
  public void activityStarted(Activity paramActivity)
  {
    this.activityMonitor.addActivity(paramActivity);
    addEvent(new ActivityStartedEvent(paramActivity));
  }
  
  public void activityStopped(Activity paramActivity)
  {
    addEvent(new ActivityStoppedEvent(paramActivity));
    this.activityMonitor.removeActivity(paramActivity);
  }
  
  public void addEvent(final Event paramEvent)
  {
    String str = UAirship.shared().getAirshipConfigOptions().analyticsServer;
    if ((str == null) || (str.length() == 0) || (!UAirship.shared().getAirshipConfigOptions().analyticsEnabled)) {
      return;
    }
    paramEvent.log();
    new Handler(Looper.getMainLooper()).post(new Runnable()
    {
      public void run()
      {
        new Analytics.AddEventTask(Analytics.this).execute(new Event[] { paramEvent });
      }
    });
  }
  
  public String getConversionPushId()
  {
    return this.conversionPushId;
  }
  
  String getServer()
  {
    return this.server;
  }
  
  Session getSession()
  {
    return this.session;
  }
  
  public void setConversionPushId(String paramString)
  {
    this.conversionPushId = paramString;
  }
  
  public void startUploadingIfNecessary()
  {
    this.uploadManager.startUploadingIfNecessary();
  }
  
  class AddEventTask
    extends AsyncTask<Event, Void, Void>
  {
    AddEventTask() {}
    
    protected Void doInBackground(Event... paramVarArgs)
    {
      int m = paramVarArgs.length;
      int i = 0;
      for (;;)
      {
        if (i < m)
        {
          Object localObject = paramVarArgs[i];
          try
          {
            int k = Analytics.this.dataManager.getDatabaseSize();
            int j = k;
            if (k > Analytics.this.uploadManager.getMaxTotalDBSize())
            {
              Logger.info("DB size exceeded. Deleting non-critical events.");
              if (("activity_started".equals(((Event)localObject).getType())) || ("activity_stopped".equals(((Event)localObject).getType())))
              {
                Logger.info("Database full. Not logging activity start/stop events");
                break label251;
              }
              Logger.info("Deleting activity start/stop events.");
              Analytics.this.dataManager.deleteEventType("activity_started");
              Analytics.this.dataManager.deleteEventType("activity_stopped");
              j = Analytics.this.dataManager.getDatabaseSize();
            }
            if (j > Analytics.this.uploadManager.getMaxTotalDBSize())
            {
              Logger.info("Deleting oldest session.");
              String str = Analytics.this.dataManager.getOldestSessionId();
              if ((str != null) && (str.length() > 0)) {
                Analytics.this.dataManager.deleteSession(str);
              }
            }
            Analytics.this.dataManager.insertEvent((Event)localObject);
            localObject = new Intent("com.urbanairship.analytics.START");
            ((Intent)localObject).setClass(UAirship.shared().getApplicationContext(), CoreReceiver.class);
            UAirship.shared().getApplicationContext().sendBroadcast((Intent)localObject);
          }
          finally {}
        }
        return null;
        label251:
        i += 1;
      }
    }
  }
  
  class Session
  {
    private String id = UUID.randomUUID().toString();
    
    public Session()
    {
      Logger.verbose("New session: " + this.id);
    }
    
    public String getId()
    {
      return this.id;
    }
    
    public void log()
    {
      Logger.verbose("Analytics Session - id: " + this.id);
    }
  }
}
