package com.urbanairship.analytics;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.AirshipConfigOptions.TransportType;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;
import com.urbanairship.push.PushPreferences;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.util.UUID;
import org.json.JSONException;
import org.json.JSONObject;

public abstract class Event
{
  private Environment environment = new Environment();
  private String eventId = UUID.randomUUID().toString();
  private String sessionId = this.environment.sessionId;
  private String time = Long.toString(System.currentTimeMillis() / 1000L);
  
  Event() {}
  
  abstract JSONObject getData();
  
  Environment getEnvironment()
  {
    return this.environment;
  }
  
  String getEventId()
  {
    return this.eventId;
  }
  
  String getSessionId()
  {
    return this.sessionId;
  }
  
  String getTime()
  {
    return this.time;
  }
  
  abstract String getType();
  
  JSONObject jsonRepresentation()
  {
    JSONObject localJSONObject1 = new JSONObject();
    JSONObject localJSONObject2 = getData();
    try
    {
      localJSONObject1.put("type", getType());
      localJSONObject1.put("event_id", this.eventId);
      localJSONObject1.put("time", this.time);
      localJSONObject1.put("data", localJSONObject2);
      return localJSONObject1;
    }
    catch (JSONException localJSONException)
    {
      Logger.error("Error constructing JSON " + getType() + " representation");
    }
    return localJSONObject1;
  }
  
  void log()
  {
    Logger.verbose(getClass().getName() + " - " + jsonRepresentation().toString());
  }
  
  class Environment
  {
    String pushId = UAirship.shared().getAnalytics().getConversionPushId();
    String sessionId = UAirship.shared().getAnalytics().getSession().getId();
    
    public Environment() {}
    
    public String getApid()
    {
      return PushManager.shared().getPreferences().getPushId();
    }
    
    public String getCarrier()
    {
      return ((TelephonyManager)UAirship.shared().getApplicationContext().getSystemService("phone")).getNetworkOperatorName();
    }
    
    public String getConnectionSubType()
    {
      Object localObject = (ConnectivityManager)UAirship.shared().getApplicationContext().getSystemService("connectivity");
      if (localObject != null)
      {
        localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
        if (localObject != null) {
          return ((NetworkInfo)localObject).getSubtypeName();
        }
      }
      return "";
    }
    
    public String getConnectionType()
    {
      Object localObject = (ConnectivityManager)UAirship.shared().getApplicationContext().getSystemService("connectivity");
      if (localObject != null)
      {
        localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
        if (localObject == null) {}
      }
      for (int i = ((NetworkInfo)localObject).getType();; i = -1)
      {
        switch (i)
        {
        default: 
          return "none";
        case 0: 
          return "cell";
        case 1: 
          return "wifi";
        }
        return "wimax";
      }
    }
    
    public String getLibVersion()
    {
      return UAirship.getVersion();
    }
    
    public ArrayList<String> getNotificationTypes()
    {
      PushPreferences localPushPreferences = PushManager.shared().getPreferences();
      ArrayList localArrayList = new ArrayList();
      if (localPushPreferences.isSoundEnabled()) {
        localArrayList.add("sound");
      }
      if (localPushPreferences.isVibrateEnabled()) {
        localArrayList.add("vibrate");
      }
      return localArrayList;
    }
    
    public String getOsVersion()
    {
      return Build.VERSION.RELEASE;
    }
    
    public String getPackageVersion()
    {
      return UAirship.getPackageInfo().versionName;
    }
    
    public String getPushId()
    {
      return this.pushId;
    }
    
    public String getPushTransport()
    {
      return UAirship.shared().getAirshipConfigOptions().getTransport().toString();
    }
    
    public String getSessionId()
    {
      return this.sessionId;
    }
    
    public long getTimezone()
    {
      return Calendar.getInstance().getTimeZone().getOffset(System.currentTimeMillis()) / 1000;
    }
    
    public boolean isDaylightSavingsTime()
    {
      return Calendar.getInstance().getTimeZone().inDaylightTime(new Date());
    }
  }
}
