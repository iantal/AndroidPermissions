package com.urbanairship.analytics;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.provider.BaseColumns;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.json.JSONObject;

class EventDataManager
{
  private static final String DATABASE_NAME = "ua_analytics.db";
  private static final int DATABASE_VERSION = 1;
  private SQLiteDatabase db;
  
  public EventDataManager()
  {
    try
    {
      this.db = new DatabaseHelper(UAirship.shared().getApplicationContext()).getWritableDatabase();
      if (this.db == null) {
        Logger.error("Unable to create or open the analytics database.");
      }
      return;
    }
    catch (SQLiteException localSQLiteException)
    {
      Logger.error("Unable to open Analytics Event DB");
    }
  }
  
  public void close()
  {
    if ((this.db != null) && (this.db.isOpen())) {
      this.db.close();
    }
  }
  
  public void deleteEvent(String paramString)
  {
    if (this.db == null)
    {
      Logger.error("Unable to delete event. Database not open.");
      return;
    }
    this.db.delete("events", "event_id = ?", new String[] { paramString });
  }
  
  public void deleteEventType(String paramString)
  {
    if (this.db == null)
    {
      Logger.error("Unable to delete events. Database not open.");
      return;
    }
    int i = this.db.delete("events", "type = ?", new String[] { paramString });
    Logger.info("Deleted " + i + " rows with event type = " + paramString);
  }
  
  public void deleteEvents(Set<String> paramSet)
  {
    if (this.db == null)
    {
      Logger.error("Unable to delete events. Database not open.");
      return;
    }
    this.db.beginTransaction();
    paramSet = paramSet.iterator();
    while (paramSet.hasNext())
    {
      String str = (String)paramSet.next();
      this.db.delete("events", "event_id = ?", new String[] { str });
    }
    this.db.endTransaction();
  }
  
  public void deleteEventsOlderThan(long paramLong)
  {
    Logger.info("Deleting old events");
    if (this.db == null)
    {
      Logger.error("Unable to delete events. Database not open.");
      return;
    }
    this.db.delete("events", "_id <= ?", new String[] { Long.toString(paramLong) });
  }
  
  public void deleteSession(String paramString)
  {
    if (this.db == null)
    {
      Logger.error("Unable to delete session. Database not open.");
      return;
    }
    int i = this.db.delete("events", "session_id = ?", new String[] { paramString });
    Logger.info("Deleted " + i + " rows with session id " + paramString);
  }
  
  public SQLiteDatabase getDatabase()
  {
    return this.db;
  }
  
  public int getDatabaseSize()
  {
    Integer localInteger = null;
    if (this.db == null)
    {
      Logger.error("Unable to get DB size. Database not open.");
      return -1;
    }
    Cursor localCursor = this.db.query("events", new String[] { "SUM(event_size) as _size" }, null, null, null, null, null);
    if (localCursor.moveToFirst()) {
      localInteger = Integer.valueOf(localCursor.getInt(0));
    }
    localCursor.close();
    if (localInteger != null) {
      return localInteger.intValue();
    }
    return -1;
  }
  
  public int getEventCount()
  {
    Integer localInteger = null;
    if (this.db == null)
    {
      Logger.error("Unable to get event count. Database not open.");
      return -1;
    }
    Cursor localCursor = this.db.query("events", new String[] { "COUNT(*) as _cnt" }, null, null, null, null, null);
    if (localCursor.moveToFirst()) {
      localInteger = Integer.valueOf(localCursor.getInt(0));
    }
    localCursor.close();
    if (localInteger != null) {
      return localInteger.intValue();
    }
    return -1;
  }
  
  public Map<String, String> getEvents(int paramInt)
  {
    if (this.db == null)
    {
      Logger.error("Unable to get events. Database not open.");
      return null;
    }
    Object localObject1 = this.db;
    Object localObject2 = "0, " + paramInt;
    localObject1 = ((SQLiteDatabase)localObject1).query("events", new String[] { "event_id", "data" }, null, null, null, null, "_id ASC", (String)localObject2);
    localObject2 = new HashMap(paramInt);
    ((Cursor)localObject1).moveToFirst();
    while (!((Cursor)localObject1).isAfterLast())
    {
      ((HashMap)localObject2).put(((Cursor)localObject1).getString(0), ((Cursor)localObject1).getString(1));
      ((Cursor)localObject1).moveToNext();
    }
    ((Cursor)localObject1).close();
    return localObject2;
  }
  
  public Map<Long, String> getOldestEvents(int paramInt)
  {
    if (this.db == null)
    {
      Logger.error("Unable to get events. Database not open.");
      return null;
    }
    Object localObject1 = this.db;
    Object localObject2 = "0, " + paramInt;
    localObject1 = ((SQLiteDatabase)localObject1).query("events", new String[] { "_id", "data" }, null, null, null, null, "_id ASC", (String)localObject2);
    localObject2 = new HashMap(paramInt);
    ((Cursor)localObject1).moveToFirst();
    while (!((Cursor)localObject1).isAfterLast())
    {
      ((HashMap)localObject2).put(Long.valueOf(((Cursor)localObject1).getLong(0)), ((Cursor)localObject1).getString(1));
      ((Cursor)localObject1).moveToNext();
    }
    ((Cursor)localObject1).close();
    return localObject2;
  }
  
  public String getOldestSessionId()
  {
    String str = null;
    if (this.db == null)
    {
      Logger.error("Unable to get session ID. Database not open.");
      return null;
    }
    Cursor localCursor = this.db.query("events", new String[] { "session_id" }, null, null, null, null, "_id ASC", "0, 1");
    if (localCursor.moveToFirst()) {
      str = localCursor.getString(0);
    }
    localCursor.close();
    return str;
  }
  
  public int insertEvent(Event paramEvent)
  {
    if (this.db == null)
    {
      Logger.error("Unable to insert event. Database not open.");
      return -1;
    }
    ContentValues localContentValues = new ContentValues();
    int i = paramEvent.jsonRepresentation().toString().length();
    localContentValues.put("type", paramEvent.getType());
    localContentValues.put("event_id", paramEvent.getEventId());
    localContentValues.put("data", paramEvent.jsonRepresentation().toString());
    localContentValues.put("time", paramEvent.getTime());
    localContentValues.put("session_id", paramEvent.getSessionId());
    localContentValues.put("event_size", Integer.valueOf(i));
    if (this.db.insert("events", null, localContentValues) < 0L)
    {
      Logger.error("Error inserting event into Analytics DB.");
      return -1;
    }
    return i;
  }
  
  static class DatabaseHelper
    extends SQLiteOpenHelper
  {
    DatabaseHelper(Context paramContext)
    {
      super("ua_analytics.db", null, 1);
    }
    
    public void onCreate(SQLiteDatabase paramSQLiteDatabase)
    {
      paramSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS events (_id INTEGER PRIMARY KEY AUTOINCREMENT,type TEXT,event_id TEXT,time INTEGER,data TEXT,session_id TEXT,event_size INTEGER);");
    }
    
    public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
    {
      Logger.info("Upgrading anlytics database from version " + paramInt1 + " to " + paramInt2 + ", which will destroy all old data");
      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS events");
      onCreate(paramSQLiteDatabase);
    }
  }
  
  public static final class Events
    implements BaseColumns
  {
    public static final String COLUMN_NAME_DATA = "data";
    public static final String COLUMN_NAME_EVENT_ID = "event_id";
    public static final String COLUMN_NAME_EVENT_SIZE = "event_size";
    public static final String COLUMN_NAME_SESSION_ID = "session_id";
    public static final String COLUMN_NAME_TIME = "time";
    public static final String COLUMN_NAME_TYPE = "type";
    public static final String DEFAULT_SORT_ORDER = "_id ASC";
    public static final String TABLE_NAME = "events";
    
    private Events() {}
  }
}
