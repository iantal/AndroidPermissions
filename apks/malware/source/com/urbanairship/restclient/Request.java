package com.urbanairship.restclient;

import android.os.AsyncTask;
import android.os.Handler;
import android.os.Looper;
import com.urbanairship.Logger;
import com.urbanairship.restclient.ssl.PermissiveSSLSocketFactory;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.AuthenticationException;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.SingleClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;

public class Request
  extends HttpEntityEnclosingRequestBase
{
  private static final int BUFFER_SIZE = 8192;
  private static final int DEFAULT_SOCKET_BUFFER_SIZE = 16384;
  private static final int DEFAULT_TIMEOUT_MS = 60000;
  private static final long MAX_PREFETCH_BODY_LENGTH = 1048576L;
  public static boolean verifySSLHostnames = true;
  File destination;
  DefaultHttpClient httpClient;
  String method;
  
  public Request(String paramString1, String paramString2)
  {
    this.method = paramString1;
    setURI(URI.create(paramString2));
    this.params = new BasicHttpParams();
    if (verifySSLHostnames) {}
    for (this.httpClient = new DefaultHttpClient(this.params);; this.httpClient = new DefaultHttpClient(new SingleClientConnManager(this.params, paramString1), this.params))
    {
      HttpConnectionParams.setSocketBufferSize(this.params, 16384);
      setTimeout(60000);
      Logger.verbose("Set Timeout: " + HttpConnectionParams.getConnectionTimeout(this.httpClient.getParams()));
      Logger.verbose("Set Socket Buffer Size: " + HttpConnectionParams.getSocketBufferSize(this.httpClient.getParams()));
      return;
      Logger.error("Verify SSL Cert: false");
      paramString1 = new SchemeRegistry();
      paramString1.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
      paramString1.register(new Scheme("https", new PermissiveSSLSocketFactory(), 443));
    }
  }
  
  public Response execute()
  {
    try
    {
      Response localResponse = new Response(this.httpClient.execute(this));
      return localResponse;
    }
    catch (IOException localIOException)
    {
      Logger.error("Error when executing request: " + localIOException.getMessage());
    }
    return null;
  }
  
  public void executeAsync(final AsyncHandler paramAsyncHandler)
  {
    new Handler(Looper.getMainLooper()).post(new Runnable()
    {
      public void run()
      {
        new Request.BackgroundRequest(Request.this, paramAsyncHandler).execute(new Request[] { jdField_this });
      }
    });
  }
  
  public String getMethod()
  {
    return this.method;
  }
  
  public void setAuth(String paramString1, String paramString2)
  {
    paramString1 = new UsernamePasswordCredentials(paramString1, paramString2);
    paramString2 = new BasicCredentialsProvider();
    paramString2.setCredentials(AuthScope.ANY, paramString1);
    this.httpClient.setCredentialsProvider(paramString2);
  }
  
  public void setDestination(File paramFile)
  {
    this.destination = paramFile;
  }
  
  public void setPreemptiveAuth(String paramString1, String paramString2)
  {
    paramString1 = new UsernamePasswordCredentials(paramString1, paramString2);
    try
    {
      addHeader(new BasicScheme().authenticate(paramString1, this));
      return;
    }
    catch (AuthenticationException paramString1)
    {
      Logger.error("Attempted to set invalid or non-applicable request credentials", paramString1);
    }
  }
  
  public void setSocketBufferSize(int paramInt)
  {
    HttpConnectionParams.setSocketBufferSize(this.params, paramInt);
  }
  
  public void setTimeout(int paramInt)
  {
    HttpConnectionParams.setConnectionTimeout(this.params, paramInt);
  }
  
  private class BackgroundRequest
    extends AsyncTask<Request, Integer, Response>
  {
    private AsyncHandler handler;
    
    public BackgroundRequest(AsyncHandler paramAsyncHandler)
    {
      this.handler = paramAsyncHandler;
    }
    
    protected Response doInBackground(Request... paramVarArgs)
    {
      int i = 0;
      if (paramVarArgs.length > 1) {
        throw new RuntimeException("Background Request only handles executing one Request at a time ");
      }
      if (paramVarArgs.length < 0)
      {
        paramVarArgs = paramVarArgs[0];
        Response localResponse;
        FileOutputStream localFileOutputStream;
        try
        {
          localResponse = paramVarArgs.execute();
          paramVarArgs = localResponse;
          if (localResponse != null)
          {
            if (Request.this.destination != null)
            {
              Request.this.destination.getParentFile().mkdirs();
              long l = localResponse.length();
              paramVarArgs = localResponse.rawBody();
              localFileOutputStream = new FileOutputStream(Request.this.destination);
              byte[] arrayOfByte = new byte['â€€'];
              for (;;)
              {
                int j = paramVarArgs.read(arrayOfByte);
                if (j == -1) {
                  break;
                }
                i += j;
                localFileOutputStream.write(arrayOfByte, 0, j);
                publishProgress(new Integer[] { Integer.valueOf((int)(i / (float)l * 100.0F)) });
              }
            }
          }
          else {
            return paramVarArgs;
          }
        }
        catch (Exception paramVarArgs)
        {
          Logger.error(paramVarArgs);
          paramVarArgs = null;
        }
        do
        {
          localFileOutputStream.flush();
          paramVarArgs.close();
          localFileOutputStream.close();
          return localResponse;
          paramVarArgs = localResponse;
        } while (localResponse.length() >= 1048576L);
        localResponse.body();
        return localResponse;
      }
      return null;
    }
    
    protected void onPostExecute(Response paramResponse)
    {
      if (paramResponse != null)
      {
        this.handler.onComplete(paramResponse);
        return;
      }
      this.handler.onError(new Exception("Error when executing request."));
    }
    
    protected void onProgressUpdate(Integer... paramVarArgs)
    {
      paramVarArgs = paramVarArgs[0];
      this.handler.onProgress(paramVarArgs.intValue());
    }
  }
}
