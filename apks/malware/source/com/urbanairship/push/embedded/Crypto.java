package com.urbanairship.push.embedded;

import java.security.NoSuchAlgorithmException;
import java.util.UUID;
import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class Crypto
{
  private static final String algo = "AES/CBC/PKCS5Padding";
  private static final byte[] ivBytes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  private static final IvParameterSpec ivs = new IvParameterSpec(ivBytes);
  private Cipher cipher;
  private SecretKeySpec keySpec;
  
  public Crypto(UUID paramUUID)
    throws Crypto.NullUUID
  {
    if (paramUUID == null) {
      throw new NullUUID();
    }
    try
    {
      this.cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
      this.keySpec = new SecretKeySpec(paramUUID.toString().replace("-", "").getBytes(), "AES");
      return;
    }
    catch (NoSuchAlgorithmException paramUUID)
    {
      paramUUID.printStackTrace();
      return;
    }
    catch (NoSuchPaddingException paramUUID)
    {
      paramUUID.printStackTrace();
    }
  }
  
  public byte[] decrypt(byte[] paramArrayOfByte)
  {
    try
    {
      this.cipher.init(2, this.keySpec, ivs);
      paramArrayOfByte = this.cipher.doFinal(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return null;
  }
  
  public byte[] encrypt(byte[] paramArrayOfByte)
  {
    try
    {
      this.cipher.init(1, this.keySpec, ivs);
      paramArrayOfByte = this.cipher.doFinal(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return null;
  }
  
  public class NullUUID
    extends Exception
  {
    private static final long serialVersionUID = -2805631869260469310L;
    
    public NullUUID() {}
  }
}
