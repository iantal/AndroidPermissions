package com.urbanairship;

import android.app.Application;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import com.urbanairship.analytics.Analytics;
import com.urbanairship.iap.IAPManager;
import com.urbanairship.push.PushManager;

public class UAirship
{
  private static final UAirship sharedAirship = new UAirship();
  private static final String version = "1.0.7";
  private AirshipConfigOptions airshipConfigOptions;
  private Analytics analytics;
  private Context applicationContext;
  private boolean flying = false;
  
  private UAirship() {}
  
  private void checkManifest()
  {
    PackageManager localPackageManager = this.applicationContext.getPackageManager();
    checkRequiredPermission("android.permission.INTERNET");
    checkRequiredPermission("android.permission.ACCESS_NETWORK_STATE");
    ComponentName localComponentName = new ComponentName(getPackageName(), CoreReceiver.class.getCanonicalName());
    try
    {
      localPackageManager.getReceiverInfo(localComponentName, 128);
      if (this.airshipConfigOptions.pushServiceEnabled) {
        PushManager.validateManifest();
      }
      if (this.airshipConfigOptions.iapEnabled)
      {
        if (hasIAPClasses())
        {
          Logger.verbose("Found com.android.vending.billing.IMarketBillingService. IAP enabled.");
          IAPManager.validateManifest();
        }
      }
      else {
        return;
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        Logger.error("AndroidManifest.xml missing required receiver: " + CoreReceiver.class.getCanonicalName());
      }
      Logger.error("In-App Purchase is enabled, but missing com.android.vending.billing.IMarketBillingService. Disabling...");
      Logger.error("If using Proguard, add the following lines to your proguard.cfg:");
      Logger.error("\t-keep class com.android.vending.billing.**");
    }
  }
  
  private static void checkRequiredPermission(String paramString)
  {
    if (-1 == getPackageManager().checkPermission(paramString, getPackageName())) {
      Logger.error("AndroidManifest.xml missing required permission: " + paramString);
    }
  }
  
  public static int getAppIcon()
  {
    return getAppInfo().icon;
  }
  
  public static ApplicationInfo getAppInfo()
  {
    try
    {
      ApplicationInfo localApplicationInfo = getPackageManager().getApplicationInfo(getPackageName(), 0);
      return localApplicationInfo;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      Logger.info("NameNotFound for: " + getPackageName() + ". Disabling.");
    }
    return null;
  }
  
  public static String getAppName()
  {
    if (getAppInfo() != null) {
      return getPackageManager().getApplicationLabel(getAppInfo()).toString();
    }
    return null;
  }
  
  public static PackageInfo getPackageInfo()
  {
    try
    {
      PackageInfo localPackageInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
      return localPackageInfo;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      Logger.info("NameNotFound for: " + getPackageName() + ". Disabling.");
    }
    return null;
  }
  
  public static PackageManager getPackageManager()
  {
    return sharedAirship.applicationContext.getPackageManager();
  }
  
  public static String getPackageName()
  {
    return sharedAirship.applicationContext.getPackageName();
  }
  
  public static String getVersion()
  {
    return "1.0.7";
  }
  
  private static boolean hasIAPClasses()
  {
    try
    {
      Class.forName("com.android.vending.billing.IMarketBillingService");
      return true;
    }
    catch (ClassNotFoundException localClassNotFoundException) {}
    return false;
  }
  
  public static void land()
  {
    sharedAirship.flying = false;
    if (sharedAirship.airshipConfigOptions.iapEnabled) {
      IAPManager.tearDown();
    }
  }
  
  public static UAirship shared()
  {
    return sharedAirship;
  }
  
  public static void takeOff(Application paramApplication)
  {
    takeOff(paramApplication, null);
  }
  
  public static void takeOff(Application paramApplication, AirshipConfigOptions paramAirshipConfigOptions)
  {
    if (paramApplication == null) {
      throw new IllegalArgumentException("Application argument must not be null");
    }
    if (sharedAirship.flying)
    {
      Logger.error("You can only call UAirship.takeOff once.");
      return;
    }
    UAirship localUAirship = sharedAirship;
    Context localContext = paramApplication.getApplicationContext();
    localUAirship.applicationContext = localContext;
    paramApplication = paramAirshipConfigOptions;
    if (paramAirshipConfigOptions == null) {
      paramApplication = AirshipConfigOptions.loadDefaultOptions(localContext);
    }
    sharedAirship.airshipConfigOptions = paramApplication;
    if (!paramApplication.inProduction) {}
    for (Logger.logLevel = 3;; Logger.logLevel = 6)
    {
      Logger.TAG = getAppName() + " - UALib";
      Logger.debug("Airship Take Off! Lib Version: 1.0.7 / App key = " + paramApplication.getAppKey() + " / secret = " + paramApplication.getAppSecret());
      Logger.debug("In Production? " + paramApplication.inProduction);
      if (paramApplication.isValid()) {
        break;
      }
      Logger.error("AirshipConfigOptions are not valid. Unable to take off! Check your airshipconfig.properties file for the errors listed above.");
      throw new IllegalArgumentException("Application configuration is invalid.");
    }
    sharedAirship.checkManifest();
    InternalOptions.loadDefaultOptions(localContext);
    sharedAirship.flying = true;
    if (paramApplication.pushServiceEnabled)
    {
      Logger.debug("Initializing Push.");
      PushManager.init();
    }
    if ((paramApplication.iapEnabled) && (hasIAPClasses()))
    {
      Logger.debug("Initializing IAP.");
      IAPManager.init();
    }
    Logger.debug("Initializing Analytics.");
    paramApplication = new Analytics();
    sharedAirship.analytics = paramApplication;
  }
  
  public AirshipConfigOptions getAirshipConfigOptions()
  {
    return this.airshipConfigOptions;
  }
  
  public Analytics getAnalytics()
  {
    return this.analytics;
  }
  
  public Context getApplicationContext()
  {
    return this.applicationContext;
  }
  
  public boolean isFlying()
  {
    return this.flying;
  }
}
