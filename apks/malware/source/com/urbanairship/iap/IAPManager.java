package com.urbanairship.iap;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Handler;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.iap.marketinterface.BillingReceiver;
import com.urbanairship.iap.marketinterface.BillingService;
import com.urbanairship.iap.marketinterface.ResponseHandler;
import java.util.List;

public final class IAPManager
{
  private static final String IAP_FIRST_RUN_PREFERENCES = "com.urbanairship.iap.first_run";
  private static final String INITIALIZED_KEY = "initialized";
  private static final IAPManager instance = new IAPManager();
  private int appIcon;
  private String appName = null;
  private BillingService billingService;
  private DownloadManager downloadManager;
  private String downloadPath;
  private IAPEventListener eventListener;
  private Inventory inventory;
  private boolean isBillingSupported = false;
  private MarketListener marketListener;
  private PurchaseNotificationBuilder notificationBuilder;
  private String tempPath;
  
  private IAPManager() {}
  
  private static void checkRequiredPermission(String paramString)
  {
    if (-1 == UAirship.getPackageManager().checkPermission(paramString, UAirship.getPackageName())) {
      Logger.error("AndroidManifest.xml missing required IAP permission: " + paramString);
    }
  }
  
  static void firstRun()
  {
    Object localObject = UAirship.shared().getApplicationContext().getSharedPreferences("com.urbanairship.iap.first_run", 0);
    try
    {
      localObject = ((SharedPreferences)localObject).edit();
      ((SharedPreferences.Editor)localObject).putBoolean("initialized", true);
      ((SharedPreferences.Editor)localObject).commit();
      return;
    }
    catch (Exception localException)
    {
      Logger.error("Error writing to shared preferences");
    }
  }
  
  public static void init()
  {
    instance.inventory = new Inventory();
    instance.downloadManager = new DownloadManager();
    instance.notificationBuilder = new BasicPurchaseNotificationBuilder();
    instance.billingService = new BillingService();
    instance.billingService.setContext(UAirship.shared().getApplicationContext());
    instance.appName = UAirship.getAppName();
    instance.appIcon = UAirship.getAppIcon();
    instance.billingService.checkBillingSupported();
    instance.eventListener = new DefaultIAPEventListener();
    if (instance.marketListener != null) {
      ResponseHandler.unregister(instance.marketListener);
    }
    instance.marketListener = new MarketListener(new Handler());
    ResponseHandler.register(instance.marketListener);
  }
  
  public static boolean isBillingSupported()
  {
    return instance.isBillingSupported;
  }
  
  static boolean isFirstRun()
  {
    boolean bool = false;
    if (!UAirship.shared().getApplicationContext().getSharedPreferences("com.urbanairship.iap.first_run", 0).getBoolean("initialized", false)) {
      bool = true;
    }
    return bool;
  }
  
  static void onBillingSupported(boolean paramBoolean)
  {
    instance.isBillingSupported = paramBoolean;
    if (instance.eventListener != null) {
      instance.eventListener.billingSupported(paramBoolean);
    }
  }
  
  public static IAPManager shared()
  {
    return instance;
  }
  
  public static void tearDown()
  {
    instance.billingService.unbind();
    ResponseHandler.unregister(instance.marketListener);
  }
  
  public static void validateManifest()
  {
    localPackageManager = UAirship.getPackageManager();
    localObject = new ComponentName(UAirship.getPackageName(), BillingReceiver.class.getCanonicalName());
    try
    {
      localPackageManager.getReceiverInfo((ComponentName)localObject, 128);
      localObject = new Intent("com.android.vending.billing.IN_APP_NOTIFY");
      if (localPackageManager.queryBroadcastReceivers((Intent)localObject, 0).isEmpty()) {
        Logger.error("AndroidManifest.xml's " + BillingReceiver.class.getCanonicalName() + " declaration missing required " + ((Intent)localObject).getAction() + " filter");
      }
      localObject = new Intent("com.android.vending.billing.RESPONSE_CODE");
      if (localPackageManager.queryBroadcastReceivers((Intent)localObject, 0).isEmpty()) {
        Logger.error("AndroidManifest.xml's " + BillingReceiver.class.getCanonicalName() + " declaration missing required " + ((Intent)localObject).getAction() + " filter");
      }
      localObject = new Intent("com.android.vending.billing.PURCHASE_STATE_CHANGED");
      if (localPackageManager.queryBroadcastReceivers((Intent)localObject, 0).isEmpty()) {
        Logger.error("AndroidManifest.xml's " + BillingReceiver.class.getCanonicalName() + " declaration missing required " + ((Intent)localObject).getAction() + " filter");
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException2)
    {
      try
      {
        localPackageManager.getServiceInfo((ComponentName)localObject, 128);
        checkRequiredPermission("com.android.vending.BILLING");
        return;
        localNameNotFoundException2 = localNameNotFoundException2;
        Logger.error("AndroidManifest.xml missing required receiver: " + BillingReceiver.class.getCanonicalName());
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException1)
      {
        for (;;)
        {
          Logger.error("AndroidManifest.xml missing required service: " + BillingService.class.getCanonicalName());
        }
      }
    }
    localObject = new ComponentName(UAirship.getPackageName(), BillingService.class.getCanonicalName());
  }
  
  public int getAppIcon()
  {
    return this.appIcon;
  }
  
  public String getAppName()
  {
    return this.appName;
  }
  
  BillingService getBillingService()
  {
    return this.billingService;
  }
  
  DownloadManager getDownloadManager()
  {
    return this.downloadManager;
  }
  
  public String getDownloadPath()
  {
    if (this.downloadPath != null) {
      return this.downloadPath;
    }
    return "iap/downloads/" + UAirship.getAppName() + "/";
  }
  
  public IAPEventListener getEventListener()
  {
    return this.eventListener;
  }
  
  public Inventory getInventory()
  {
    return this.inventory;
  }
  
  public PurchaseNotificationBuilder getNotificationBuilder()
  {
    return this.notificationBuilder;
  }
  
  public String getTempPath()
  {
    if (this.tempPath != null) {
      return this.tempPath;
    }
    return "iap/temp/" + UAirship.getAppName() + "/";
  }
  
  boolean payForProduct(Activity paramActivity, Product paramProduct)
  {
    if (this.isBillingSupported)
    {
      if (!this.billingService.requestPurchase(paramActivity, paramProduct.getIdentifier()))
      {
        if (this.eventListener != null) {
          this.eventListener.marketUnavailable(paramProduct);
        }
        return false;
      }
    }
    else
    {
      Logger.error("Billing is not supported on this version of Android Market");
      return false;
    }
    return true;
  }
  
  public void restoreTransactions()
  {
    IAPEventListener localIAPEventListener = getEventListener();
    if (localIAPEventListener != null) {
      localIAPEventListener.restoreStarted();
    }
    getBillingService().restoreTransactions();
  }
  
  public void setDownloadPath(String paramString)
  {
    this.downloadPath = paramString;
  }
  
  public void setEventListener(IAPEventListener paramIAPEventListener)
  {
    this.eventListener = paramIAPEventListener;
  }
  
  public void setNotificationBuilder(PurchaseNotificationBuilder paramPurchaseNotificationBuilder)
  {
    this.notificationBuilder = paramPurchaseNotificationBuilder;
  }
  
  public void setTempPath(String paramString)
  {
    this.tempPath = paramString;
  }
}
