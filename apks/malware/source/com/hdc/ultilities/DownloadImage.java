package com.hdc.ultilities;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;

public class DownloadImage
{
  public static HttpPost httppost;
  public static DownloadImage instance = new DownloadImage();
  public static BasicHttpParams p;
  public DefaultHttpClient client;
  
  public DownloadImage() {}
  
  /* Error */
  public String getAuto_sms2(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: aload_3
    //   6: astore_2
    //   7: new 29	java/net/URL
    //   10: dup
    //   11: aload_1
    //   12: invokespecial 32	java/net/URL:<init>	(Ljava/lang/String;)V
    //   15: astore_1
    //   16: aload_3
    //   17: astore_2
    //   18: aload_1
    //   19: invokevirtual 36	java/net/URL:openConnection	()Ljava/net/URLConnection;
    //   22: checkcast 38	java/net/HttpURLConnection
    //   25: astore_1
    //   26: aload_3
    //   27: astore_2
    //   28: aload_1
    //   29: ldc 40
    //   31: invokevirtual 43	java/net/HttpURLConnection:setRequestMethod	(Ljava/lang/String;)V
    //   34: aload_3
    //   35: astore_2
    //   36: new 45	java/io/BufferedReader
    //   39: dup
    //   40: new 47	java/io/InputStreamReader
    //   43: dup
    //   44: aload_1
    //   45: invokevirtual 51	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   48: invokespecial 54	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   51: invokespecial 57	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   54: astore 5
    //   56: aload_3
    //   57: astore_2
    //   58: new 59	java/lang/StringBuffer
    //   61: dup
    //   62: invokespecial 60	java/lang/StringBuffer:<init>	()V
    //   65: astore_1
    //   66: aload 5
    //   68: invokevirtual 64	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   71: astore_2
    //   72: aload_2
    //   73: ifnonnull +13 -> 86
    //   76: aload 5
    //   78: invokevirtual 67	java/io/BufferedReader:close	()V
    //   81: aload_1
    //   82: invokevirtual 70	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   85: areturn
    //   86: aload_1
    //   87: aload_2
    //   88: invokevirtual 74	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   91: pop
    //   92: goto -26 -> 66
    //   95: astore_3
    //   96: aload_1
    //   97: astore_2
    //   98: aload_3
    //   99: invokevirtual 77	java/io/IOException:printStackTrace	()V
    //   102: goto -21 -> 81
    //   105: astore_1
    //   106: aload_1
    //   107: invokevirtual 78	java/net/MalformedURLException:printStackTrace	()V
    //   110: aload_2
    //   111: astore_1
    //   112: goto -31 -> 81
    //   115: astore_3
    //   116: aload_1
    //   117: astore_2
    //   118: aload_3
    //   119: astore_1
    //   120: goto -14 -> 106
    //   123: astore_3
    //   124: aload 4
    //   126: astore_1
    //   127: goto -31 -> 96
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	130	0	this	DownloadImage
    //   0	130	1	paramString	String
    //   6	112	2	localObject1	Object
    //   1	56	3	localObject2	Object
    //   95	4	3	localIOException1	IOException
    //   115	4	3	localMalformedURLException	MalformedURLException
    //   123	1	3	localIOException2	IOException
    //   3	122	4	localObject3	Object
    //   54	23	5	localBufferedReader	java.io.BufferedReader
    // Exception table:
    //   from	to	target	type
    //   66	72	95	java/io/IOException
    //   76	81	95	java/io/IOException
    //   86	92	95	java/io/IOException
    //   7	16	105	java/net/MalformedURLException
    //   18	26	105	java/net/MalformedURLException
    //   28	34	105	java/net/MalformedURLException
    //   36	56	105	java/net/MalformedURLException
    //   58	66	105	java/net/MalformedURLException
    //   98	102	105	java/net/MalformedURLException
    //   66	72	115	java/net/MalformedURLException
    //   76	81	115	java/net/MalformedURLException
    //   86	92	115	java/net/MalformedURLException
    //   18	26	123	java/io/IOException
    //   28	34	123	java/io/IOException
    //   36	56	123	java/io/IOException
    //   58	66	123	java/io/IOException
  }
  
  public Bitmap getImage(String paramString)
    throws IOException
  {
    Object localObject1 = null;
    Bitmap localBitmap = null;
    Object localObject2 = null;
    try
    {
      paramString = new URL(paramString);
      localObject2 = paramString.openConnection();
      if (!(localObject2 instanceof HttpURLConnection)) {
        throw new IOException("Not an HTTP connection");
      }
    }
    catch (MalformedURLException paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        paramString = (String)localObject2;
      }
      paramString = localObject1;
      try
      {
        localObject2 = (HttpURLConnection)localObject2;
        paramString = localObject1;
        ((HttpURLConnection)localObject2).setRequestMethod("GET");
        paramString = localObject1;
        ((HttpURLConnection)localObject2).setConnectTimeout(5000);
        paramString = localObject1;
        ((HttpURLConnection)localObject2).connect();
        paramString = localObject1;
        if (((HttpURLConnection)localObject2).getResponseCode() == 200)
        {
          paramString = localObject1;
          InputStream localInputStream = ((HttpURLConnection)localObject2).getInputStream();
          paramString = localObject1;
          localBitmap = BitmapFactory.decodeStream(localInputStream);
          paramString = localBitmap;
          localInputStream.close();
        }
        paramString = localBitmap;
        ((HttpURLConnection)localObject2).disconnect();
        return localBitmap;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
    return paramString;
  }
}
