package com.google.zxing.client.android;

import android.app.Activity;
import com.google.zxing.client.result.CalendarParsedResult;
import com.google.zxing.client.result.ParsedResult;
import java.text.DateFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;

public final class CalendarResultHandler
  extends ResultHandler
{
  private static final DateFormat DATE_FORMAT = new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH);
  private static final DateFormat DATE_TIME_FORMAT = new SimpleDateFormat("yyyyMMdd'T'HHmmss", Locale.ENGLISH);
  private static final int[] buttons = { 2131361845 };
  
  public CalendarResultHandler(Activity paramActivity, ParsedResult paramParsedResult)
  {
    super(paramActivity, paramParsedResult);
  }
  
  private static void appendTime(String paramString, StringBuilder paramStringBuilder, boolean paramBoolean1, boolean paramBoolean2)
  {
    if (paramString.length() == 8) {
      synchronized (DATE_FORMAT)
      {
        ??? = DATE_FORMAT.parse(paramString, new ParsePosition(0));
        paramString = (String)???;
        if (paramBoolean1)
        {
          paramString = (String)???;
          if (!paramBoolean2) {
            paramString = new Date(((Date)???).getTime() - 86400000L);
          }
        }
        ParsedResult.maybeAppend(DateFormat.getDateInstance().format(Long.valueOf(paramString.getTime())), paramStringBuilder);
        return;
      }
    }
    synchronized (DATE_TIME_FORMAT)
    {
      ??? = DATE_TIME_FORMAT.parse(paramString.substring(0, 15), new ParsePosition(0));
      long l2 = ((Date)???).getTime();
      long l1 = l2;
      if (paramString.length() == 16)
      {
        l1 = l2;
        if (paramString.charAt(15) == 'Z')
        {
          paramString = new GregorianCalendar();
          l1 = l2 + (paramString.get(15) + paramString.get(16));
        }
      }
      ParsedResult.maybeAppend(DateFormat.getDateTimeInstance().format(Long.valueOf(l1)), paramStringBuilder);
      return;
    }
  }
  
  public int getButtonCount()
  {
    return buttons.length;
  }
  
  public int getButtonText(int paramInt)
  {
    return buttons[paramInt];
  }
  
  public CharSequence getDisplayContents()
  {
    CalendarParsedResult localCalendarParsedResult = (CalendarParsedResult)getResult();
    StringBuilder localStringBuilder = new StringBuilder(100);
    ParsedResult.maybeAppend(localCalendarParsedResult.getSummary(), localStringBuilder);
    String str1 = localCalendarParsedResult.getStart();
    appendTime(str1, localStringBuilder, false, false);
    String str2 = localCalendarParsedResult.getEnd();
    if (str2 != null) {
      appendTime(str2, localStringBuilder, true, str1.equals(str2));
    }
    ParsedResult.maybeAppend(localCalendarParsedResult.getLocation(), localStringBuilder);
    ParsedResult.maybeAppend(localCalendarParsedResult.getAttendee(), localStringBuilder);
    ParsedResult.maybeAppend(localCalendarParsedResult.getDescription(), localStringBuilder);
    return localStringBuilder.toString();
  }
  
  public int getDisplayTitle()
  {
    return 2131361854;
  }
  
  public void handleButtonPress(int paramInt)
  {
    CalendarParsedResult localCalendarParsedResult = (CalendarParsedResult)getResult();
    if (paramInt == 0) {
      addCalendarEvent(localCalendarParsedResult.getSummary(), localCalendarParsedResult.getStart(), localCalendarParsedResult.getEnd(), localCalendarParsedResult.getLocation(), localCalendarParsedResult.getDescription());
    }
  }
}
