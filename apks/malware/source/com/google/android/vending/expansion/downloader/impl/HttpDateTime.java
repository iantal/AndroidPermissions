package com.google.android.vending.expansion.downloader.impl;

import android.text.format.Time;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class HttpDateTime
{
  private static final Pattern HTTP_DATE_ANSIC_PATTERN = Pattern.compile("[ ]([A-Za-z]{3,9})[ ]+([0-9]{1,2})[ ]([0-9]{1,2}:[0-9][0-9]:[0-9][0-9])[ ]([0-9]{2,4})");
  private static final String HTTP_DATE_ANSIC_REGEXP = "[ ]([A-Za-z]{3,9})[ ]+([0-9]{1,2})[ ]([0-9]{1,2}:[0-9][0-9]:[0-9][0-9])[ ]([0-9]{2,4})";
  private static final Pattern HTTP_DATE_RFC_PATTERN = Pattern.compile("([0-9]{1,2})[- ]([A-Za-z]{3,9})[- ]([0-9]{2,4})[ ]([0-9]{1,2}:[0-9][0-9]:[0-9][0-9])");
  private static final String HTTP_DATE_RFC_REGEXP = "([0-9]{1,2})[- ]([A-Za-z]{3,9})[- ]([0-9]{2,4})[ ]([0-9]{1,2}:[0-9][0-9]:[0-9][0-9])";
  
  public HttpDateTime() {}
  
  private static int getDate(String paramString)
  {
    if (paramString.length() == 2) {
      return (paramString.charAt(0) - '0') * 10 + (paramString.charAt(1) - '0');
    }
    return paramString.charAt(0) - '0';
  }
  
  private static int getMonth(String paramString)
  {
    int i = 0;
    switch (Character.toLowerCase(paramString.charAt(0)) + Character.toLowerCase(paramString.charAt(1)) + Character.toLowerCase(paramString.charAt(2)) - 291)
    {
    default: 
      throw new IllegalArgumentException();
    case 10: 
      i = 1;
    case 22: 
      return i;
    case 29: 
      return 2;
    case 32: 
      return 3;
    case 36: 
      return 4;
    case 42: 
      return 5;
    case 40: 
      return 6;
    case 26: 
      return 7;
    case 37: 
      return 8;
    case 35: 
      return 9;
    case 48: 
      return 10;
    }
    return 11;
  }
  
  private static TimeOfDay getTime(String paramString)
  {
    int k = 0 + 1;
    int i = paramString.charAt(0) - '0';
    int j;
    if (paramString.charAt(k) != ':')
    {
      j = k + 1;
      i = i * 10 + (paramString.charAt(k) - '0');
    }
    for (;;)
    {
      j += 1;
      int m = j + 1;
      j = paramString.charAt(j);
      k = paramString.charAt(m);
      m = m + 1 + 1;
      int n = m + 1;
      return new TimeOfDay(i, (j - 48) * 10 + (k - 48), (paramString.charAt(m) - '0') * 10 + (paramString.charAt(n) - '0'));
      j = k;
    }
  }
  
  private static int getYear(String paramString)
  {
    if (paramString.length() == 2)
    {
      int i = (paramString.charAt(0) - '0') * 10 + (paramString.charAt(1) - '0');
      if (i >= 70) {
        return i + 1900;
      }
      return i + 2000;
    }
    if (paramString.length() == 3) {
      return (paramString.charAt(0) - '0') * 100 + (paramString.charAt(1) - '0') * 10 + (paramString.charAt(2) - '0') + 1900;
    }
    if (paramString.length() == 4) {
      return (paramString.charAt(0) - '0') * 1000 + (paramString.charAt(1) - '0') * 100 + (paramString.charAt(2) - '0') * 10 + (paramString.charAt(3) - '0');
    }
    return 1970;
  }
  
  public static long parse(String paramString)
    throws IllegalArgumentException
  {
    Object localObject = HTTP_DATE_RFC_PATTERN.matcher(paramString);
    int k;
    int j;
    int i;
    if (((Matcher)localObject).find())
    {
      k = getDate(((Matcher)localObject).group(1));
      j = getMonth(((Matcher)localObject).group(2));
      i = getYear(((Matcher)localObject).group(3));
      paramString = getTime(((Matcher)localObject).group(4));
    }
    for (;;)
    {
      int m = j;
      j = i;
      if (i >= 2038)
      {
        j = 2038;
        m = 0;
        k = 1;
      }
      localObject = new Time("UTC");
      ((Time)localObject).set(paramString.second, paramString.minute, paramString.hour, k, m, j);
      return ((Time)localObject).toMillis(false);
      localObject = HTTP_DATE_ANSIC_PATTERN.matcher(paramString);
      if (!((Matcher)localObject).find()) {
        break;
      }
      j = getMonth(((Matcher)localObject).group(1));
      k = getDate(((Matcher)localObject).group(2));
      paramString = getTime(((Matcher)localObject).group(3));
      i = getYear(((Matcher)localObject).group(4));
    }
    throw new IllegalArgumentException();
  }
  
  private static class TimeOfDay
  {
    int hour;
    int minute;
    int second;
    
    TimeOfDay(int paramInt1, int paramInt2, int paramInt3)
    {
      this.hour = paramInt1;
      this.minute = paramInt2;
      this.second = paramInt3;
    }
  }
}
