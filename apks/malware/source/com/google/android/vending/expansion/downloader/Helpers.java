package com.google.android.vending.expansion.downloader;

import android.content.Context;
import android.os.Environment;
import android.os.StatFs;
import android.os.SystemClock;
import android.util.Log;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Helpers
{
  private static final Pattern CONTENT_DISPOSITION_PATTERN = Pattern.compile("attachment;\\s*filename\\s*=\\s*\"([^\"]*)\"");
  public static Random sRandom = new Random(SystemClock.uptimeMillis());
  
  private Helpers() {}
  
  static void deleteFile(String paramString)
  {
    try
    {
      new File(paramString).delete();
      return;
    }
    catch (Exception localException)
    {
      Log.w("LVLDL", "file: '" + paramString + "' couldn't be deleted", localException);
    }
  }
  
  public static boolean doesFileExist(Context paramContext, String paramString, long paramLong, boolean paramBoolean)
  {
    paramContext = new File(generateSaveFileName(paramContext, paramString));
    if (paramContext.exists())
    {
      if (paramContext.length() == paramLong) {
        return true;
      }
      if (paramBoolean) {
        paramContext.delete();
      }
    }
    return false;
  }
  
  public static String generateSaveFileName(Context paramContext, String paramString)
  {
    return getSaveFilePath(paramContext) + File.separator + paramString;
  }
  
  public static long getAvailableBytes(File paramFile)
  {
    paramFile = new StatFs(paramFile.getPath());
    long l = paramFile.getAvailableBlocks();
    return paramFile.getBlockSize() * (l - 4L);
  }
  
  public static String getDownloadProgressPercent(long paramLong1, long paramLong2)
  {
    if (paramLong2 == 0L) {
      return "";
    }
    return Long.toString(100L * paramLong1 / paramLong2) + "%";
  }
  
  public static String getDownloadProgressString(long paramLong1, long paramLong2)
  {
    if (paramLong2 == 0L) {
      return "";
    }
    return String.format("%.2f", new Object[] { Float.valueOf((float)paramLong1 / 1048576.0F) }) + "MB /" + String.format("%.2f", new Object[] { Float.valueOf((float)paramLong2 / 1048576.0F) }) + "MB";
  }
  
  public static String getDownloadProgressStringNotification(long paramLong1, long paramLong2)
  {
    if (paramLong2 == 0L) {
      return "";
    }
    return getDownloadProgressString(paramLong1, paramLong2) + " (" + getDownloadProgressPercent(paramLong1, paramLong2) + ")";
  }
  
  public static int getDownloaderStringResourceIDFromState(int paramInt)
  {
    int i = 2131362446;
    switch (paramInt)
    {
    default: 
      i = 2131362436;
    case 8: 
    case 10: 
      return i;
    case 1: 
      return 2131362437;
    case 2: 
      return 2131362438;
    case 3: 
      return 2131362439;
    case 4: 
      return 2131362440;
    case 5: 
      return 2131362441;
    case 6: 
      return 2131362442;
    case 7: 
      return 2131362444;
    case 9: 
      return 2131362445;
    case 11: 
      return 2131362445;
    case 12: 
      return 2131362447;
    case 13: 
      return 2131362443;
    case 14: 
      return 2131362448;
    case 15: 
      return 2131362449;
    case 16: 
      return 2131362450;
    case 17: 
      return 2131362451;
    }
    return 2131362452;
  }
  
  public static String getExpansionAPKFileName(Context paramContext, boolean paramBoolean, int paramInt)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if (paramBoolean) {}
    for (String str = "main.";; str = "patch.") {
      return str + paramInt + "." + paramContext.getPackageName() + ".obb";
    }
  }
  
  public static File getFilesystemRoot(String paramString)
  {
    File localFile = Environment.getDownloadCacheDirectory();
    if (paramString.startsWith(localFile.getPath())) {
      return localFile;
    }
    localFile = Environment.getExternalStorageDirectory();
    if (paramString.startsWith(localFile.getPath())) {
      return localFile;
    }
    throw new IllegalArgumentException("Cannot determine filesystem root for " + paramString);
  }
  
  public static String getSaveFilePath(Context paramContext)
  {
    File localFile = Environment.getExternalStorageDirectory();
    return localFile.toString() + Constants.EXP_PATH + paramContext.getPackageName();
  }
  
  public static String getSpeedString(float paramFloat)
  {
    return String.format("%.2f", new Object[] { Float.valueOf(1000.0F * paramFloat / 1024.0F) });
  }
  
  public static String getTimeRemaining(long paramLong)
  {
    if (paramLong > 3600000L) {}
    for (SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());; localSimpleDateFormat = new SimpleDateFormat("mm:ss", Locale.getDefault())) {
      return localSimpleDateFormat.format(new Date(paramLong - TimeZone.getDefault().getRawOffset()));
    }
  }
  
  public static boolean isExternalMediaMounted()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static boolean isFilenameValid(String paramString)
  {
    paramString = paramString.replaceFirst("/+", "/");
    return (paramString.startsWith(Environment.getDownloadCacheDirectory().toString())) || (paramString.startsWith(Environment.getExternalStorageDirectory().toString()));
  }
  
  static String parseContentDisposition(String paramString)
  {
    try
    {
      paramString = CONTENT_DISPOSITION_PATTERN.matcher(paramString);
      if (paramString.find())
      {
        paramString = paramString.group(1);
        return paramString;
      }
    }
    catch (IllegalStateException paramString) {}
    return null;
  }
}
