package com.google.android.bitmapfun;

import android.content.Context;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build.VERSION;
import android.util.Log;
import android.widget.Toast;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;

public class ImageFetcher
  extends ImageResizer
{
  private static final int DISK_CACHE_INDEX = 0;
  private static final String HTTP_CACHE_DIR = "http";
  private static final int HTTP_CACHE_SIZE = 10485760;
  private static final int IO_BUFFER_SIZE = 8192;
  private static final String TAG = "ImageFetcher";
  private File mHttpCacheDir;
  private DiskLruCache mHttpDiskCache;
  private final Object mHttpDiskCacheLock = new Object();
  private boolean mHttpDiskCacheStarting = true;
  
  public ImageFetcher(Context paramContext, int paramInt)
  {
    super(paramContext, paramInt);
    init(paramContext);
  }
  
  public ImageFetcher(Context paramContext, int paramInt1, int paramInt2)
  {
    super(paramContext, paramInt1, paramInt2);
    init(paramContext);
  }
  
  public ImageFetcher(Context paramContext, int paramInt, boolean paramBoolean)
  {
    super(paramContext, paramInt);
    init(paramContext, paramBoolean);
  }
  
  private void checkConnection(Context paramContext, boolean paramBoolean)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if ((localNetworkInfo == null) || (!localNetworkInfo.isConnectedOrConnecting()))
    {
      if (paramBoolean) {
        Toast.makeText(paramContext, 2131361931, 1).show();
      }
      Log.e("ImageFetcher", "checkConnection - no connection found");
    }
  }
  
  public static void disableConnectionReuseIfNecessary()
  {
    if (Build.VERSION.SDK_INT < 8) {
      System.setProperty("http.keepAlive", "false");
    }
  }
  
  private void init(Context paramContext)
  {
    checkConnection(paramContext, true);
    this.mHttpCacheDir = ImageCache.getDiskCacheDir(paramContext, "http");
  }
  
  private void init(Context paramContext, boolean paramBoolean)
  {
    checkConnection(paramContext, paramBoolean);
    this.mHttpCacheDir = ImageCache.getDiskCacheDir(paramContext, "http");
  }
  
  private void initHttpDiskCache()
  {
    if (!this.mHttpCacheDir.exists()) {
      this.mHttpCacheDir.mkdirs();
    }
    synchronized (this.mHttpDiskCacheLock)
    {
      long l = ImageCache.getUsableSpace(this.mHttpCacheDir);
      if (l > 10485760L) {}
      try
      {
        this.mHttpDiskCache = DiskLruCache.open(this.mHttpCacheDir, 1, 1, 10485760L);
        this.mHttpDiskCacheStarting = false;
        this.mHttpDiskCacheLock.notifyAll();
        return;
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          this.mHttpDiskCache = null;
        }
      }
    }
  }
  
  private Bitmap processBitmap(String paramString)
  {
    String str = ImageCache.hashKeyForDisk(paramString);
    Object localObject5 = null;
    Object localObject10 = null;
    Object localObject3 = null;
    Object localObject6 = null;
    Object localObject7 = null;
    Object localObject8 = null;
    Object localObject9 = null;
    Object localObject1;
    Object localObject4;
    Object localObject2;
    synchronized (this.mHttpDiskCacheLock)
    {
      for (;;)
      {
        boolean bool = this.mHttpDiskCacheStarting;
        if (!bool) {
          break;
        }
        try
        {
          this.mHttpDiskCacheLock.wait();
        }
        catch (InterruptedException localInterruptedException) {}
      }
      localObject1 = this.mHttpDiskCache;
      localObject4 = localObject5;
      if (localObject1 != null)
      {
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
      }
      try
      {
        DiskLruCache.Snapshot localSnapshot = this.mHttpDiskCache.get(str);
        localObject4 = localSnapshot;
        if (localSnapshot == null)
        {
          localObject1 = localObject6;
          localObject2 = localObject7;
          localObject3 = localObject8;
          localObject4 = this.mHttpDiskCache.edit(str);
          if (localObject4 != null)
          {
            localObject1 = localObject6;
            localObject2 = localObject7;
            localObject3 = localObject8;
            if (downloadUrlToStream(paramString, ((DiskLruCache.Editor)localObject4).newOutputStream(0)))
            {
              localObject1 = localObject6;
              localObject2 = localObject7;
              localObject3 = localObject8;
              ((DiskLruCache.Editor)localObject4).commit();
            }
          }
          else
          {
            localObject1 = localObject6;
            localObject2 = localObject7;
            localObject3 = localObject8;
            localObject4 = this.mHttpDiskCache.get(str);
          }
        }
        else
        {
          paramString = localObject10;
          localObject1 = localObject9;
          if (localObject4 != null)
          {
            localObject1 = localObject6;
            localObject2 = localObject7;
            localObject3 = localObject8;
            paramString = (FileInputStream)((DiskLruCache.Snapshot)localObject4).getInputStream(0);
            localObject1 = paramString;
            localObject2 = paramString;
            localObject3 = paramString;
            localObject4 = paramString.getFD();
            localObject2 = localObject4;
            localObject1 = paramString;
            paramString = (String)localObject2;
          }
          localObject4 = paramString;
          localObject3 = localObject1;
          if (paramString == null)
          {
            localObject4 = paramString;
            localObject3 = localObject1;
            if (localObject1 == null) {}
          }
        }
      }
      catch (IOException paramString)
      {
        for (;;)
        {
          localObject3 = localObject1;
          Log.e("ImageFetcher", "processBitmap - " + paramString);
          localObject4 = localObject5;
          localObject3 = localObject1;
          if (0 == 0)
          {
            localObject4 = localObject5;
            localObject3 = localObject1;
            if (localObject1 != null) {
              try
              {
                ((FileInputStream)localObject1).close();
                localObject4 = localObject5;
                localObject3 = localObject1;
              }
              catch (IOException paramString)
              {
                localObject4 = localObject5;
                localObject3 = localObject1;
              }
            }
          }
        }
      }
      catch (IllegalStateException paramString)
      {
        for (;;)
        {
          localObject3 = localObject2;
          Log.e("ImageFetcher", "processBitmap - " + paramString);
          localObject4 = localObject5;
          localObject3 = localObject2;
          if (0 == 0)
          {
            localObject4 = localObject5;
            localObject3 = localObject2;
            if (localObject2 != null) {
              try
              {
                ((FileInputStream)localObject2).close();
                localObject4 = localObject5;
                localObject3 = localObject2;
              }
              catch (IOException paramString)
              {
                localObject4 = localObject5;
                localObject3 = localObject2;
              }
            }
          }
        }
      }
      finally
      {
        if ((0 != 0) || (localObject3 == null)) {}
      }
      try
      {
        ((FileInputStream)localObject1).close();
        localObject3 = localObject1;
        localObject4 = paramString;
      }
      catch (IOException localIOException3)
      {
        try
        {
          ((FileInputStream)localObject3).close();
          throw paramString;
          paramString = finally;
          throw paramString;
          localIOException3 = localIOException3;
          localObject4 = paramString;
          localObject3 = localObject1;
        }
        catch (IOException localIOException1)
        {
          for (;;) {}
        }
      }
      paramString = null;
      if (localObject4 != null) {
        paramString = decodeSampledBitmapFromDescriptor((FileDescriptor)localObject4, this.mImageWidth, this.mImageHeight, getImageCache());
      }
      if (localObject3 != null) {}
      try
      {
        ((FileInputStream)localObject3).close();
        return paramString;
      }
      catch (IOException localIOException2) {}
      localObject1 = localObject6;
      localObject2 = localObject7;
      localObject3 = localObject8;
      ((DiskLruCache.Editor)localObject4).abort();
    }
    return paramString;
  }
  
  protected void clearCacheInternal()
  {
    super.clearCacheInternal();
    synchronized (this.mHttpDiskCacheLock)
    {
      if (this.mHttpDiskCache != null)
      {
        boolean bool = this.mHttpDiskCache.isClosed();
        if (bool) {}
      }
      try
      {
        this.mHttpDiskCache.delete();
        this.mHttpDiskCache = null;
        this.mHttpDiskCacheStarting = true;
        initHttpDiskCache();
        return;
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          Log.e("ImageFetcher", "clearCacheInternal - " + localIOException);
        }
      }
    }
  }
  
  protected void closeCacheInternal()
  {
    super.closeCacheInternal();
    synchronized (this.mHttpDiskCacheLock)
    {
      DiskLruCache localDiskLruCache = this.mHttpDiskCache;
      if (localDiskLruCache != null) {}
      try
      {
        if (!this.mHttpDiskCache.isClosed())
        {
          this.mHttpDiskCache.close();
          this.mHttpDiskCache = null;
        }
        return;
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          Log.e("ImageFetcher", "closeCacheInternal - " + localIOException);
        }
      }
    }
  }
  
  /* Error */
  public boolean downloadUrlToStream(String paramString, java.io.OutputStream paramOutputStream)
  {
    // Byte code:
    //   0: invokestatic 247	com/google/android/bitmapfun/ImageFetcher:disableConnectionReuseIfNecessary	()V
    //   3: aconst_null
    //   4: astore 8
    //   6: aconst_null
    //   7: astore 4
    //   9: aconst_null
    //   10: astore 5
    //   12: aconst_null
    //   13: astore 10
    //   15: aconst_null
    //   16: astore 9
    //   18: aconst_null
    //   19: astore 12
    //   21: aconst_null
    //   22: astore 11
    //   24: aload 12
    //   26: astore 6
    //   28: aload 5
    //   30: astore 7
    //   32: new 249	java/net/URL
    //   35: dup
    //   36: aload_1
    //   37: invokespecial 252	java/net/URL:<init>	(Ljava/lang/String;)V
    //   40: invokevirtual 256	java/net/URL:openConnection	()Ljava/net/URLConnection;
    //   43: checkcast 258	java/net/HttpURLConnection
    //   46: astore_1
    //   47: aload 12
    //   49: astore 6
    //   51: aload 5
    //   53: astore 7
    //   55: aload_1
    //   56: astore 4
    //   58: aload_1
    //   59: astore 8
    //   61: new 260	java/io/BufferedInputStream
    //   64: dup
    //   65: aload_1
    //   66: invokevirtual 263	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   69: sipush 8192
    //   72: invokespecial 266	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;I)V
    //   75: astore 5
    //   77: new 268	java/io/BufferedOutputStream
    //   80: dup
    //   81: aload_2
    //   82: sipush 8192
    //   85: invokespecial 271	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;I)V
    //   88: astore_2
    //   89: aload 5
    //   91: invokevirtual 275	java/io/BufferedInputStream:read	()I
    //   94: istore_3
    //   95: iload_3
    //   96: iconst_m1
    //   97: if_icmpeq +88 -> 185
    //   100: aload_2
    //   101: iload_3
    //   102: invokevirtual 279	java/io/BufferedOutputStream:write	(I)V
    //   105: goto -16 -> 89
    //   108: astore 4
    //   110: aload_2
    //   111: astore 9
    //   113: aload 5
    //   115: astore_2
    //   116: aload 4
    //   118: astore 5
    //   120: aload_2
    //   121: astore 6
    //   123: aload 9
    //   125: astore 7
    //   127: aload_1
    //   128: astore 4
    //   130: ldc 18
    //   132: new 212	java/lang/StringBuilder
    //   135: dup
    //   136: invokespecial 213	java/lang/StringBuilder:<init>	()V
    //   139: ldc_w 281
    //   142: invokevirtual 219	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   145: aload 5
    //   147: invokevirtual 222	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   150: invokevirtual 226	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   153: invokestatic 90	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   156: pop
    //   157: aload_1
    //   158: ifnull +7 -> 165
    //   161: aload_1
    //   162: invokevirtual 284	java/net/HttpURLConnection:disconnect	()V
    //   165: aload 9
    //   167: ifnull +8 -> 175
    //   170: aload 9
    //   172: invokevirtual 285	java/io/BufferedOutputStream:close	()V
    //   175: aload_2
    //   176: ifnull +7 -> 183
    //   179: aload_2
    //   180: invokevirtual 286	java/io/BufferedInputStream:close	()V
    //   183: iconst_0
    //   184: ireturn
    //   185: aload_1
    //   186: ifnull +7 -> 193
    //   189: aload_1
    //   190: invokevirtual 284	java/net/HttpURLConnection:disconnect	()V
    //   193: aload_2
    //   194: ifnull +7 -> 201
    //   197: aload_2
    //   198: invokevirtual 285	java/io/BufferedOutputStream:close	()V
    //   201: aload 5
    //   203: ifnull +8 -> 211
    //   206: aload 5
    //   208: invokevirtual 286	java/io/BufferedInputStream:close	()V
    //   211: iconst_1
    //   212: ireturn
    //   213: astore_1
    //   214: aload 4
    //   216: ifnull +8 -> 224
    //   219: aload 4
    //   221: invokevirtual 284	java/net/HttpURLConnection:disconnect	()V
    //   224: aload 7
    //   226: ifnull +8 -> 234
    //   229: aload 7
    //   231: invokevirtual 285	java/io/BufferedOutputStream:close	()V
    //   234: aload 6
    //   236: ifnull +8 -> 244
    //   239: aload 6
    //   241: invokevirtual 286	java/io/BufferedInputStream:close	()V
    //   244: aload_1
    //   245: athrow
    //   246: astore_2
    //   247: goto -3 -> 244
    //   250: astore_2
    //   251: aload 5
    //   253: astore 6
    //   255: aload 10
    //   257: astore 7
    //   259: aload_1
    //   260: astore 4
    //   262: aload_2
    //   263: astore_1
    //   264: goto -50 -> 214
    //   267: astore 8
    //   269: aload 5
    //   271: astore 6
    //   273: aload_2
    //   274: astore 7
    //   276: aload_1
    //   277: astore 4
    //   279: aload 8
    //   281: astore_1
    //   282: goto -68 -> 214
    //   285: astore_1
    //   286: goto -103 -> 183
    //   289: astore 5
    //   291: aload 11
    //   293: astore_2
    //   294: aload 8
    //   296: astore_1
    //   297: goto -177 -> 120
    //   300: astore 4
    //   302: aload 5
    //   304: astore_2
    //   305: aload 4
    //   307: astore 5
    //   309: goto -189 -> 120
    //   312: astore_1
    //   313: goto -102 -> 211
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	316	0	this	ImageFetcher
    //   0	316	1	paramString	String
    //   0	316	2	paramOutputStream	java.io.OutputStream
    //   94	8	3	i	int
    //   7	50	4	str1	String
    //   108	9	4	localIOException1	IOException
    //   128	150	4	str2	String
    //   300	6	4	localIOException2	IOException
    //   10	260	5	localObject1	Object
    //   289	14	5	localIOException3	IOException
    //   307	1	5	localIOException4	IOException
    //   26	246	6	localObject2	Object
    //   30	245	7	localObject3	Object
    //   4	56	8	str3	String
    //   267	28	8	localObject4	Object
    //   16	155	9	localOutputStream	java.io.OutputStream
    //   13	243	10	localObject5	Object
    //   22	270	11	localObject6	Object
    //   19	29	12	localObject7	Object
    // Exception table:
    //   from	to	target	type
    //   89	95	108	java/io/IOException
    //   100	105	108	java/io/IOException
    //   32	47	213	finally
    //   61	77	213	finally
    //   130	157	213	finally
    //   229	234	246	java/io/IOException
    //   239	244	246	java/io/IOException
    //   77	89	250	finally
    //   89	95	267	finally
    //   100	105	267	finally
    //   170	175	285	java/io/IOException
    //   179	183	285	java/io/IOException
    //   32	47	289	java/io/IOException
    //   61	77	289	java/io/IOException
    //   77	89	300	java/io/IOException
    //   197	201	312	java/io/IOException
    //   206	211	312	java/io/IOException
  }
  
  protected void flushCacheInternal()
  {
    super.flushCacheInternal();
    synchronized (this.mHttpDiskCacheLock)
    {
      DiskLruCache localDiskLruCache = this.mHttpDiskCache;
      if (localDiskLruCache != null) {}
      try
      {
        this.mHttpDiskCache.flush();
        return;
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          Log.e("ImageFetcher", "flush - " + localIOException);
        }
      }
    }
  }
  
  protected void initDiskCacheInternal()
  {
    super.initDiskCacheInternal();
    initHttpDiskCache();
  }
  
  protected Bitmap processBitmap(Object paramObject)
  {
    return processBitmap(String.valueOf(paramObject));
  }
}
