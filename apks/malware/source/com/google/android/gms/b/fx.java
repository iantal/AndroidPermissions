package com.google.android.gms.b;

import android.content.Context;
import android.os.Handler;
import com.google.android.gms.ads.internal.client.l;
import com.google.android.gms.ads.internal.util.client.a;
import com.google.android.gms.ads.internal.util.client.b;
import com.google.android.gms.ads.internal.w;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public final class fx
{
  private static final Set<String> a = Collections.synchronizedSet(new HashSet());
  private static final DecimalFormat b = new DecimalFormat("#,###");
  private pa c;
  private File d;
  private boolean e;
  
  public fx(pa paramPa)
  {
    this.c = paramPa;
    paramPa = paramPa.getContext().getCacheDir();
    if (paramPa == null) {
      b.e("Context.getCacheDir() returned null");
    }
    do
    {
      return;
      this.d = new File(paramPa, "admobVideoStreams");
      if ((!this.d.isDirectory()) && (!this.d.mkdirs()))
      {
        b.e("Could not create preload cache directory at " + this.d.getAbsolutePath());
        this.d = null;
        return;
      }
    } while ((this.d.setReadable(true, false)) && (this.d.setExecutable(true, false)));
    b.e("Could not set cache file permissions at " + this.d.getAbsolutePath());
    this.d = null;
  }
  
  private File a(File paramFile)
  {
    return new File(this.d, paramFile.getName() + ".done");
  }
  
  private void a(String paramString, File paramFile)
  {
    a.a.post(new ga(this, paramString, paramFile));
  }
  
  private void a(String paramString, File paramFile, int paramInt)
  {
    a.a.post(new fz(this, paramString, paramFile, paramInt));
  }
  
  public final void a()
  {
    this.e = true;
  }
  
  public final boolean a(String paramString)
  {
    if (this.d == null)
    {
      a(paramString, null);
      return false;
    }
    int i;
    int m;
    int j;
    int k;
    label135:
    long l1;
    long l2;
    label258:
    for (;;)
    {
      boolean bool1;
      if (this.d == null)
      {
        i = 0;
        localObject1 = dh.m;
        if (i <= ((Integer)w.n().a((cz)localObject1)).intValue()) {
          break;
        }
        if (this.d != null) {
          break label135;
        }
        bool1 = false;
      }
      for (;;)
      {
        if (bool1) {
          break label258;
        }
        b.e("Unable to expire stream cache");
        a(paramString, null);
        return false;
        localObject1 = this.d.listFiles();
        m = localObject1.length;
        i = 0;
        j = 0;
        while (j < m)
        {
          k = i;
          if (!localObject1[j].getName().endsWith(".done")) {
            k = i + 1;
          }
          j += 1;
          i = k;
        }
        break;
        localObject1 = null;
        l1 = Long.MAX_VALUE;
        localObject3 = this.d.listFiles();
        j = localObject3.length;
        i = 0;
        while (i < j)
        {
          ??? = localObject3[i];
          if (((File)???).getName().endsWith(".done")) {
            break label1218;
          }
          l2 = ((File)???).lastModified();
          if (l2 >= l1) {
            break label1218;
          }
          localObject1 = ???;
          l1 = l2;
          i += 1;
        }
        bool1 = false;
        if (localObject1 != null)
        {
          boolean bool2 = ((File)localObject1).delete();
          localObject1 = a((File)localObject1);
          bool1 = bool2;
          if (((File)localObject1).isFile()) {
            bool1 = bool2 & ((File)localObject1).delete();
          }
        }
      }
    }
    l.a();
    Object localObject1 = a.a(paramString);
    Object localObject3 = new File(this.d, (String)localObject1);
    localObject1 = a((File)localObject3);
    if ((((File)localObject3).isFile()) && (((File)localObject1).isFile()))
    {
      i = (int)((File)localObject3).length();
      b.a("Stream cache hit at " + paramString);
      a(paramString, (File)localObject3, i);
      return true;
    }
    String str = this.d.getAbsolutePath() + paramString;
    synchronized (a)
    {
      if (a.contains(str))
      {
        b.e("Stream cache already in progress at " + paramString);
        a(paramString, (File)localObject3);
        return false;
      }
    }
    a.add(str);
    Object localObject4;
    try
    {
      ??? = new URL(paramString).openConnection();
      localObject4 = dh.q;
      i = ((Integer)w.n().a((cz)localObject4)).intValue();
      ((URLConnection)???).setConnectTimeout(i);
      ((URLConnection)???).setReadTimeout(i);
      if ((??? instanceof HttpURLConnection))
      {
        i = ((HttpURLConnection)???).getResponseCode();
        if (i >= 400) {
          throw new IOException("HTTP status code " + i + " at " + paramString);
        }
      }
    }
    catch (IOException localIOException1)
    {
      ??? = null;
    }
    for (;;)
    {
      try
      {
        ((FileOutputStream)???).close();
        if (this.e)
        {
          b.c("Preload aborted for URL \"" + paramString + "\"");
          if ((((File)localObject3).exists()) && (!((File)localObject3).delete())) {
            b.e("Could not delete partial cache file at " + ((File)localObject3).getAbsolutePath());
          }
          a(paramString, (File)localObject3);
          a.remove(str);
          return false;
          k = ((URLConnection)???).getContentLength();
          if (k < 0)
          {
            b.e("Stream cache aborted, missing content-length header at " + paramString);
            a(paramString, (File)localObject3);
            a.remove(str);
            return false;
          }
          localObject4 = b.format(k);
          localObject5 = dh.n;
          m = ((Integer)w.n().a((cz)localObject5)).intValue();
          if (k > m)
          {
            b.e("Content length " + (String)localObject4 + " exceeds limit at " + paramString);
            a(paramString, (File)localObject3);
            a.remove(str);
            return false;
          }
          b.a("Caching " + (String)localObject4 + " bytes from " + paramString);
          localObject4 = Channels.newChannel(((URLConnection)???).getInputStream());
          ??? = new FileOutputStream((File)localObject3);
        }
      }
      catch (IOException localIOException4)
      {
        try
        {
          Object localObject5 = ((FileOutputStream)???).getChannel();
          ByteBuffer localByteBuffer = ByteBuffer.allocate(1048576);
          rd localRd = w.i();
          i = 0;
          l1 = localRd.a();
          Object localObject6 = dh.p;
          localObject6 = new og(((Long)w.n().a((cz)localObject6)).longValue());
          cz localCz = dh.o;
          l2 = ((Long)w.n().a(localCz)).longValue();
          j = ((ReadableByteChannel)localObject4).read(localByteBuffer);
          if (j >= 0)
          {
            j = i + j;
            if (j > m) {
              throw new IOException("stream cache file size limit exceeded");
            }
            localByteBuffer.flip();
            if (((FileChannel)localObject5).write(localByteBuffer) > 0) {
              continue;
            }
            localByteBuffer.clear();
            if (localRd.a() - l1 > 1000L * l2) {
              throw new IOException("stream cache time limit exceeded");
            }
            if (this.e) {
              throw new IOException("abort requested");
            }
            i = j;
            if (!((og)localObject6).a()) {
              continue;
            }
            a.a.post(new fy(this, paramString, (File)localObject3, j, k));
            i = j;
            continue;
          }
          ((FileOutputStream)???).close();
          if (b.a(3))
          {
            localObject4 = b.format(i);
            b.a("Preloaded " + (String)localObject4 + " bytes from " + paramString);
          }
          ((File)localObject3).setReadable(true, false);
          if (localIOException1.isFile())
          {
            localIOException1.setLastModified(System.currentTimeMillis());
            a(paramString, (File)localObject3, i);
            a.remove(str);
            return true;
          }
          try
          {
            localIOException1.createNewFile();
          }
          catch (IOException localIOException2) {}
          continue;
          b.c("Preload failed for URL \"" + paramString + "\"", localIOException2);
        }
        catch (IOException localIOException3) {}
        localIOException4 = localIOException4;
        continue;
      }
      catch (NullPointerException localNullPointerException)
      {
        continue;
      }
      label1218:
      break;
    }
  }
}
