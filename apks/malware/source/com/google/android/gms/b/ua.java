package com.google.android.gms.b;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import com.google.android.gms.analytics.internal.t;
import com.google.android.gms.common.internal.aq;
import com.google.android.gms.internal.zznt;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.Callable;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

public final class ua
{
  private static volatile ua a;
  private final Context b;
  private final List<zznt> c;
  private final tv d;
  private final uc e;
  private volatile uj f;
  private Thread.UncaughtExceptionHandler g;
  
  private ua(Context paramContext)
  {
    paramContext = paramContext.getApplicationContext();
    aq.a(paramContext);
    this.b = paramContext;
    this.e = new uc(this);
    this.c = new CopyOnWriteArrayList();
    this.d = new tv();
  }
  
  public static ua a(Context paramContext)
  {
    aq.a(paramContext);
    if (a == null) {}
    try
    {
      if (a == null) {
        a = new ua(paramContext);
      }
      return a;
    }
    finally {}
  }
  
  public static void d()
  {
    if (!(Thread.currentThread() instanceof uf)) {
      throw new IllegalStateException("Call expected from worker thread");
    }
  }
  
  public final uj a()
  {
    if (this.f == null) {}
    Object localObject5;
    Object localObject3;
    try
    {
      uj localUj;
      PackageManager localPackageManager;
      String str2;
      if (this.f == null)
      {
        localUj = new uj();
        localPackageManager = this.b.getPackageManager();
        str2 = this.b.getPackageName();
        localUj.c(str2);
        localUj.d(localPackageManager.getInstallerPackageName(str2));
        localObject5 = null;
        localObject3 = str2;
      }
      try
      {
        PackageInfo localPackageInfo = localPackageManager.getPackageInfo(this.b.getPackageName(), 0);
        localObject4 = localObject5;
        str1 = str2;
        if (localPackageInfo != null)
        {
          localObject3 = str2;
          localObject4 = localPackageManager.getApplicationLabel(localPackageInfo.applicationInfo);
          str1 = str2;
          localObject3 = str2;
          if (!TextUtils.isEmpty((CharSequence)localObject4))
          {
            localObject3 = str2;
            str1 = ((CharSequence)localObject4).toString();
          }
          localObject3 = str1;
          localObject4 = localPackageInfo.versionName;
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        for (;;)
        {
          String str1;
          Log.e("GAv4", "Error retrieving package info: appName set to " + (String)localObject3);
          Object localObject4 = localObject5;
          Object localObject1 = localObject3;
        }
      }
      localUj.a(str1);
      localUj.b((String)localObject4);
      this.f = localUj;
      return this.f;
    }
    finally {}
  }
  
  public final <V> Future<V> a(Callable<V> paramCallable)
  {
    aq.a(paramCallable);
    if ((Thread.currentThread() instanceof uf))
    {
      paramCallable = new FutureTask(paramCallable);
      paramCallable.run();
      return paramCallable;
    }
    return this.e.submit(paramCallable);
  }
  
  final void a(tx paramTx)
  {
    if (paramTx.i()) {
      throw new IllegalStateException("Measurement prototype can't be submitted");
    }
    if (paramTx.f()) {
      throw new IllegalStateException("Measurement can only be submitted once");
    }
    paramTx = paramTx.a();
    paramTx.g();
    this.e.execute(new ub(this, paramTx));
  }
  
  public final void a(Runnable paramRunnable)
  {
    aq.a(paramRunnable);
    this.e.submit(paramRunnable);
  }
  
  public final void a(Thread.UncaughtExceptionHandler paramUncaughtExceptionHandler)
  {
    this.g = paramUncaughtExceptionHandler;
  }
  
  public final ul b()
  {
    DisplayMetrics localDisplayMetrics = this.b.getResources().getDisplayMetrics();
    ul localUl = new ul();
    localUl.a(t.a(Locale.getDefault()));
    localUl.a(localDisplayMetrics.widthPixels);
    localUl.b(localDisplayMetrics.heightPixels);
    return localUl;
  }
  
  public final Context c()
  {
    return this.b;
  }
}
