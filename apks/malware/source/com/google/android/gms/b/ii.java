package com.google.android.gms.b;

import android.app.Activity;
import android.graphics.Bitmap;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.webkit.WebView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.google.android.gms.ads.d;
import com.google.android.gms.ads.internal.client.AdSizeParcel;
import com.google.android.gms.ads.internal.client.l;
import com.google.android.gms.ads.internal.util.client.a;
import com.google.android.gms.ads.internal.util.client.b;
import com.google.android.gms.ads.internal.w;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public final class ii
  extends ir
{
  static final Set<String> a = new HashSet(Arrays.asList(new String[] { "top-left", "top-right", "top-center", "center", "bottom-left", "bottom-right", "bottom-center" }));
  private String b = "top-right";
  private boolean c = true;
  private int d = 0;
  private int e = 0;
  private int f = -1;
  private int g = 0;
  private int h = 0;
  private int i = -1;
  private final Object j = new Object();
  private final pa k;
  private final Activity l;
  private AdSizeParcel m;
  private ImageView n;
  private LinearLayout o;
  private is p;
  private PopupWindow q;
  private RelativeLayout r;
  private ViewGroup s;
  
  public ii(pa paramPa, is paramIs)
  {
    super(paramPa, "resize");
    this.k = paramPa;
    this.l = paramPa.d();
    this.p = paramIs;
  }
  
  private void b(int paramInt1, int paramInt2)
  {
    w.e();
    a(paramInt1, paramInt2 - nj.c(this.l)[0], this.i, this.f);
  }
  
  private int[] b()
  {
    w.e();
    Object localObject = nj.b(this.l);
    w.e();
    int[] arrayOfInt = nj.c(this.l);
    int i3 = localObject[0];
    int i1 = localObject[1];
    if ((this.i < 50) || (this.i > i3))
    {
      b.e("Width is too small or too large.");
      i1 = 0;
    }
    while (i1 == 0)
    {
      return null;
      if ((this.f < 50) || (this.f > i1))
      {
        b.e("Height is too small or too large.");
        i1 = 0;
      }
      else if ((this.f == i1) && (this.i == i3))
      {
        b.e("Cannot resize to a full-screen ad.");
        i1 = 0;
      }
      else
      {
        if (this.c)
        {
          localObject = this.b;
          i1 = -1;
          switch (((String)localObject).hashCode())
          {
          default: 
            switch (i1)
            {
            default: 
              label196:
              i1 = this.d + this.g + this.i - 50;
              i2 = this.e + this.h;
            }
            break;
          }
          for (;;)
          {
            if ((i1 >= 0) && (i1 + 50 <= i3) && (i2 >= arrayOfInt[0]) && (i2 + 50 <= arrayOfInt[1])) {
              break label600;
            }
            i1 = 0;
            break;
            if (!((String)localObject).equals("top-left")) {
              break label196;
            }
            i1 = 0;
            break label196;
            if (!((String)localObject).equals("top-center")) {
              break label196;
            }
            i1 = 1;
            break label196;
            if (!((String)localObject).equals("center")) {
              break label196;
            }
            i1 = 2;
            break label196;
            if (!((String)localObject).equals("bottom-left")) {
              break label196;
            }
            i1 = 3;
            break label196;
            if (!((String)localObject).equals("bottom-center")) {
              break label196;
            }
            i1 = 4;
            break label196;
            if (!((String)localObject).equals("bottom-right")) {
              break label196;
            }
            i1 = 5;
            break label196;
            i1 = this.d + this.g;
            i2 = this.e + this.h;
            continue;
            i1 = this.d + this.g + this.i / 2 - 25;
            i2 = this.e + this.h;
            continue;
            i1 = this.d + this.g + this.i / 2 - 25;
            i2 = this.e + this.h + this.f / 2 - 25;
            continue;
            i1 = this.d + this.g;
            i2 = this.e + this.h + this.f - 50;
            continue;
            i1 = this.d + this.g + this.i / 2 - 25;
            i2 = this.e + this.h + this.f - 50;
            continue;
            i1 = this.d + this.g + this.i - 50;
            i2 = this.e + this.h + this.f - 50;
          }
        }
        label600:
        i1 = 1;
      }
    }
    if (this.c) {
      return new int[] { this.d + this.g, this.e + this.h };
    }
    w.e();
    arrayOfInt = nj.b(this.l);
    w.e();
    localObject = nj.c(this.l);
    int i4 = arrayOfInt[0];
    int i2 = this.d + this.g;
    i3 = this.e + this.h;
    if (i2 < 0)
    {
      i1 = 0;
      if (i3 >= localObject[0]) {
        break label747;
      }
      i2 = localObject[0];
    }
    for (;;)
    {
      return new int[] { i1, i2 };
      i1 = i2;
      if (this.i + i2 <= i4) {
        break;
      }
      i1 = i4 - this.i;
      break;
      label747:
      i2 = i3;
      if (this.f + i3 > localObject[1]) {
        i2 = localObject[1] - this.f;
      }
    }
  }
  
  public final void a(int paramInt1, int paramInt2)
  {
    this.d = paramInt1;
    this.e = paramInt2;
  }
  
  public final void a(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    synchronized (this.j)
    {
      this.d = paramInt1;
      this.e = paramInt2;
      if ((this.q != null) && (paramBoolean))
      {
        int[] arrayOfInt = b();
        if (arrayOfInt != null)
        {
          PopupWindow localPopupWindow = this.q;
          l.a();
          paramInt1 = a.a(this.l, arrayOfInt[0]);
          l.a();
          localPopupWindow.update(paramInt1, a.a(this.l, arrayOfInt[1]), this.q.getWidth(), this.q.getHeight());
          b(arrayOfInt[0], arrayOfInt[1]);
        }
      }
      else
      {
        return;
      }
      a(true);
    }
  }
  
  public final void a(Map<String, String> paramMap)
  {
    synchronized (this.j)
    {
      if (this.l == null)
      {
        a("Not an activity context. Cannot resize.");
        return;
      }
      if (this.k.h() == null)
      {
        a("Webview is not yet available, size is not set.");
        return;
      }
    }
    if (this.k.h().f)
    {
      a("Is interstitial. Cannot resize an interstitial.");
      return;
    }
    if (this.k.m())
    {
      a("Cannot resize an expanded banner.");
      return;
    }
    if (!TextUtils.isEmpty((CharSequence)paramMap.get("width")))
    {
      w.e();
      this.i = nj.b((String)paramMap.get("width"));
    }
    if (!TextUtils.isEmpty((CharSequence)paramMap.get("height")))
    {
      w.e();
      this.f = nj.b((String)paramMap.get("height"));
    }
    if (!TextUtils.isEmpty((CharSequence)paramMap.get("offsetX")))
    {
      w.e();
      this.g = nj.b((String)paramMap.get("offsetX"));
    }
    if (!TextUtils.isEmpty((CharSequence)paramMap.get("offsetY")))
    {
      w.e();
      this.h = nj.b((String)paramMap.get("offsetY"));
    }
    if (!TextUtils.isEmpty((CharSequence)paramMap.get("allowOffscreen"))) {
      this.c = Boolean.parseBoolean((String)paramMap.get("allowOffscreen"));
    }
    paramMap = (String)paramMap.get("customClosePosition");
    if (!TextUtils.isEmpty(paramMap)) {
      this.b = paramMap;
    }
    int i1;
    Object localObject2;
    Object localObject3;
    if ((this.i >= 0) && (this.f >= 0))
    {
      i1 = 1;
      if (i1 == 0)
      {
        a("Invalid width and height options. Cannot resize.");
        return;
      }
      localObject2 = this.l.getWindow();
      if ((localObject2 == null) || (((Window)localObject2).getDecorView() == null))
      {
        a("Activity context is not ready, cannot get window or decor view.");
        return;
      }
      paramMap = b();
      if (paramMap == null)
      {
        a("Resize location out of screen or close button is not visible.");
        return;
      }
      l.a();
      i1 = a.a(this.l, this.i);
      l.a();
      int i2 = a.a(this.l, this.f);
      localObject3 = this.k.a().getParent();
      if ((localObject3 != null) && ((localObject3 instanceof ViewGroup)))
      {
        ((ViewGroup)localObject3).removeView(this.k.a());
        if (this.q == null)
        {
          this.s = ((ViewGroup)localObject3);
          w.e();
          localObject3 = nj.a(this.k.a());
          this.n = new ImageView(this.l);
          this.n.setImageBitmap((Bitmap)localObject3);
          this.m = this.k.h();
          this.s.addView(this.n);
          this.r = new RelativeLayout(this.l);
          this.r.setBackgroundColor(0);
          this.r.setLayoutParams(new ViewGroup.LayoutParams(i1, i2));
          w.e();
          this.q = nj.a(this.r, i1, i2);
          this.q.setOutsideTouchable(true);
          this.q.setTouchable(true);
          localObject3 = this.q;
          if (this.c) {
            break label1323;
          }
        }
      }
    }
    label1271:
    label1280:
    label1282:
    label1323:
    for (boolean bool = true;; bool = false)
    {
      ((PopupWindow)localObject3).setClippingEnabled(bool);
      this.r.addView(this.k.a(), -1, -1);
      this.o = new LinearLayout(this.l);
      l.a();
      i1 = a.a(this.l, 50);
      l.a();
      localObject3 = new RelativeLayout.LayoutParams(i1, a.a(this.l, 50));
      String str = this.b;
      switch (str.hashCode())
      {
      }
      for (;;)
      {
        ((RelativeLayout.LayoutParams)localObject3).addRule(10);
        ((RelativeLayout.LayoutParams)localObject3).addRule(11);
        for (;;)
        {
          this.o.setOnClickListener(new ij(this));
          this.o.setContentDescription("Close button");
          this.r.addView(this.o, (ViewGroup.LayoutParams)localObject3);
          try
          {
            localObject3 = this.q;
            localObject2 = ((Window)localObject2).getDecorView();
            l.a();
            i1 = a.a(this.l, paramMap[0]);
            l.a();
            ((PopupWindow)localObject3).showAtLocation((View)localObject2, 0, i1, a.a(this.l, paramMap[1]));
            if (this.p != null)
            {
              localObject2 = this.p;
              i1 = this.i;
              i1 = this.f;
              ((is)localObject2).x();
            }
            this.k.a(new AdSizeParcel(this.l, new d(this.i, this.f)));
            b(paramMap[0], paramMap[1]);
            c("resized");
            return;
          }
          catch (RuntimeException paramMap)
          {
            a("Cannot show popup window: " + paramMap.getMessage());
            this.r.removeView(this.k.a());
            if (this.s == null) {
              break label1271;
            }
            this.s.removeView(this.n);
            this.s.addView(this.k.a());
            this.k.a(this.m);
            return;
          }
          this.q.dismiss();
          break;
          a("Webview is detached, probably in the middle of a resize or expand.");
          return;
          if (!str.equals("top-left")) {
            break label1280;
          }
          i1 = 0;
          break label1282;
          if (!str.equals("top-center")) {
            break label1280;
          }
          i1 = 1;
          break label1282;
          if (!str.equals("center")) {
            break label1280;
          }
          i1 = 2;
          break label1282;
          if (!str.equals("bottom-left")) {
            break label1280;
          }
          i1 = 3;
          break label1282;
          if (!str.equals("bottom-center")) {
            break label1280;
          }
          i1 = 4;
          break label1282;
          if (!str.equals("bottom-right")) {
            break label1280;
          }
          i1 = 5;
          break label1282;
          ((RelativeLayout.LayoutParams)localObject3).addRule(10);
          ((RelativeLayout.LayoutParams)localObject3).addRule(9);
          continue;
          ((RelativeLayout.LayoutParams)localObject3).addRule(10);
          ((RelativeLayout.LayoutParams)localObject3).addRule(14);
          continue;
          ((RelativeLayout.LayoutParams)localObject3).addRule(13);
          continue;
          ((RelativeLayout.LayoutParams)localObject3).addRule(12);
          ((RelativeLayout.LayoutParams)localObject3).addRule(9);
          continue;
          ((RelativeLayout.LayoutParams)localObject3).addRule(12);
          ((RelativeLayout.LayoutParams)localObject3).addRule(14);
          continue;
          ((RelativeLayout.LayoutParams)localObject3).addRule(12);
          ((RelativeLayout.LayoutParams)localObject3).addRule(11);
        }
        i1 = 0;
        break;
        i1 = -1;
        switch (i1)
        {
        }
      }
    }
  }
  
  public final void a(boolean paramBoolean)
  {
    synchronized (this.j)
    {
      if (this.q != null)
      {
        this.q.dismiss();
        this.r.removeView(this.k.a());
        if (this.s != null)
        {
          this.s.removeView(this.n);
          this.s.addView(this.k.a());
          this.k.a(this.m);
        }
        if (paramBoolean)
        {
          c("default");
          if (this.p != null) {
            this.p.y();
          }
        }
        this.q = null;
        this.r = null;
        this.s = null;
        this.o = null;
      }
      return;
    }
  }
  
  public final boolean a()
  {
    synchronized (this.j)
    {
      if (this.q != null)
      {
        bool = true;
        return bool;
      }
      boolean bool = false;
    }
  }
}
