package com.google.android.gms.b;

import com.google.android.gms.tagmanager.bj;
import com.google.android.gms.tagmanager.eg;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

final class vv
{
  private static r a(int paramInt, JSONArray paramJSONArray, r[] paramArrayOfR, Set<Integer> paramSet)
  {
    int j = 0;
    int i = 0;
    if (paramSet.contains(Integer.valueOf(paramInt))) {
      b("Value cycle detected. Current value reference: " + paramInt + ".  Previous value references: " + paramSet + ".");
    }
    Object localObject1 = a(paramJSONArray, paramInt, "values");
    if (paramArrayOfR[paramInt] != null) {
      return paramArrayOfR[paramInt];
    }
    paramSet.add(Integer.valueOf(paramInt));
    r localR = new r();
    if ((localObject1 instanceof JSONArray))
    {
      localObject1 = (JSONArray)localObject1;
      localR.a = 2;
      localR.l = true;
      localR.c = new r[((JSONArray)localObject1).length()];
      while (i < localR.c.length)
      {
        localR.c[i] = a(((JSONArray)localObject1).getInt(i), paramJSONArray, paramArrayOfR, paramSet);
        i += 1;
      }
    }
    Object localObject2;
    if ((localObject1 instanceof JSONObject))
    {
      localObject1 = (JSONObject)localObject1;
      localObject2 = ((JSONObject)localObject1).optJSONArray("escaping");
      if (localObject2 != null)
      {
        localR.k = new int[((JSONArray)localObject2).length()];
        i = 0;
        while (i < localR.k.length)
        {
          localR.k[i] = ((JSONArray)localObject2).getInt(i);
          i += 1;
        }
      }
      if (((JSONObject)localObject1).has("function_id"))
      {
        localR.a = 5;
        localR.g = ((JSONObject)localObject1).getString("function_id");
      }
    }
    for (;;)
    {
      paramArrayOfR[paramInt] = localR;
      paramSet.remove(Integer.valueOf(paramInt));
      return localR;
      if (((JSONObject)localObject1).has("macro_reference"))
      {
        localR.a = 4;
        localR.l = true;
        localR.f = eg.a(a(((JSONObject)localObject1).getInt("macro_reference"), paramJSONArray, paramArrayOfR, paramSet));
      }
      else if (((JSONObject)localObject1).has("template_token"))
      {
        localR.a = 7;
        localR.l = true;
        localObject1 = ((JSONObject)localObject1).getJSONArray("template_token");
        localR.j = new r[((JSONArray)localObject1).length()];
        i = j;
        while (i < localR.j.length)
        {
          localR.j[i] = a(((JSONArray)localObject1).getInt(i), paramJSONArray, paramArrayOfR, paramSet);
          i += 1;
        }
      }
      else
      {
        localR.a = 3;
        localR.l = true;
        i = ((JSONObject)localObject1).length();
        localR.d = new r[i];
        localR.e = new r[i];
        localObject2 = ((JSONObject)localObject1).keys();
        i = 0;
        while (((Iterator)localObject2).hasNext())
        {
          String str = (String)((Iterator)localObject2).next();
          localR.d[i] = a(new Integer(str).intValue(), paramJSONArray, paramArrayOfR, paramSet);
          localR.e[i] = a(((JSONObject)localObject1).getInt(str), paramJSONArray, paramArrayOfR, paramSet);
          i += 1;
        }
        continue;
        if ((localObject1 instanceof String))
        {
          localR.b = ((String)localObject1);
          localR.a = 1;
        }
        else if ((localObject1 instanceof Boolean))
        {
          localR.i = ((Boolean)localObject1).booleanValue();
          localR.a = 8;
        }
        else if ((localObject1 instanceof Integer))
        {
          localR.h = ((Integer)localObject1).intValue();
          localR.a = 6;
        }
        else
        {
          b("Invalid value type: " + localObject1);
        }
      }
    }
  }
  
  private static wk a(JSONObject paramJSONObject, JSONArray paramJSONArray1, JSONArray paramJSONArray2, r[] paramArrayOfR)
  {
    wl localWl = new wl((byte)0);
    paramJSONObject = paramJSONObject.getJSONArray("property");
    int i = 0;
    if (i < paramJSONObject.length())
    {
      Object localObject = (JSONObject)a(paramJSONArray1, paramJSONObject.getInt(i), "properties");
      String str = (String)a(paramJSONArray2, ((JSONObject)localObject).getInt("key"), "key");
      int j = ((JSONObject)localObject).getInt("value");
      if ((j < 0) || (j >= paramArrayOfR.length)) {
        b("Index out of bounds detected: " + j + " in " + "value");
      }
      localObject = (r)paramArrayOfR[j];
      if (f.cl.toString().equals(str)) {
        localWl.a((r)localObject);
      }
      for (;;)
      {
        i += 1;
        break;
        localWl.a(str, (r)localObject);
      }
    }
    return localWl.a();
  }
  
  static wm a(String paramString)
  {
    paramString = new JSONObject(paramString);
    Object localObject1 = paramString.get("resource");
    r[] arrayOfR;
    Object localObject3;
    List localList1;
    List localList2;
    if ((localObject1 instanceof JSONObject))
    {
      localObject2 = (JSONObject)localObject1;
      localObject1 = new wn((byte)0);
      arrayOfR = a((JSONObject)localObject2);
      localObject3 = ((JSONObject)localObject2).getJSONArray("properties");
      Object localObject4 = ((JSONObject)localObject2).getJSONArray("key");
      localList1 = a(((JSONObject)localObject2).getJSONArray("tags"), (JSONArray)localObject3, (JSONArray)localObject4, arrayOfR);
      localList2 = a(((JSONObject)localObject2).getJSONArray("predicates"), (JSONArray)localObject3, (JSONArray)localObject4, arrayOfR);
      localObject3 = a(((JSONObject)localObject2).getJSONArray("macros"), (JSONArray)localObject3, (JSONArray)localObject4, arrayOfR);
      localObject4 = ((List)localObject3).iterator();
      while (((Iterator)localObject4).hasNext()) {
        ((wn)localObject1).a((wk)((Iterator)localObject4).next());
      }
    }
    throw new wq("Resource map not found");
    Object localObject2 = ((JSONObject)localObject2).getJSONArray("rules");
    int i = 0;
    while (i < ((JSONArray)localObject2).length())
    {
      ((wn)localObject1).a(a(((JSONArray)localObject2).getJSONObject(i), localList1, (List)localObject3, localList2, arrayOfR));
      i += 1;
    }
    ((wn)localObject1).a("1");
    ((wn)localObject1).a();
    paramString.optJSONArray("runtime");
    return ((wn)localObject1).b();
  }
  
  private static wo a(JSONObject paramJSONObject, List<wk> paramList1, List<wk> paramList2, List<wk> paramList3, r[] paramArrayOfR)
  {
    wp localWp = new wp((byte)0);
    JSONArray localJSONArray1 = paramJSONObject.optJSONArray("positive_predicate");
    JSONArray localJSONArray2 = paramJSONObject.optJSONArray("negative_predicate");
    JSONArray localJSONArray3 = paramJSONObject.optJSONArray("add_tag");
    JSONArray localJSONArray4 = paramJSONObject.optJSONArray("remove_tag");
    JSONArray localJSONArray5 = paramJSONObject.optJSONArray("add_tag_rule_name");
    JSONArray localJSONArray6 = paramJSONObject.optJSONArray("remove_tag_rule_name");
    JSONArray localJSONArray7 = paramJSONObject.optJSONArray("add_macro");
    JSONArray localJSONArray8 = paramJSONObject.optJSONArray("remove_macro");
    JSONArray localJSONArray9 = paramJSONObject.optJSONArray("add_macro_rule_name");
    paramJSONObject = paramJSONObject.optJSONArray("remove_macro_rule_name");
    int i;
    if (localJSONArray1 != null)
    {
      i = 0;
      while (i < localJSONArray1.length())
      {
        localWp.a((wk)paramList3.get(localJSONArray1.getInt(i)));
        i += 1;
      }
    }
    if (localJSONArray2 != null)
    {
      i = 0;
      while (i < localJSONArray2.length())
      {
        localWp.b((wk)paramList3.get(localJSONArray2.getInt(i)));
        i += 1;
      }
    }
    if (localJSONArray3 != null)
    {
      i = 0;
      while (i < localJSONArray3.length())
      {
        localWp.c((wk)paramList1.get(localJSONArray3.getInt(i)));
        i += 1;
      }
    }
    if (localJSONArray4 != null)
    {
      i = 0;
      while (i < localJSONArray4.length())
      {
        localWp.d((wk)paramList1.get(localJSONArray4.getInt(i)));
        i += 1;
      }
    }
    if (localJSONArray5 != null)
    {
      i = 0;
      while (i < localJSONArray5.length())
      {
        localWp.a(paramArrayOfR[localJSONArray5.getInt(i)].b);
        i += 1;
      }
    }
    if (localJSONArray6 != null)
    {
      i = 0;
      while (i < localJSONArray6.length())
      {
        localWp.b(paramArrayOfR[localJSONArray6.getInt(i)].b);
        i += 1;
      }
    }
    if (localJSONArray7 != null)
    {
      i = 0;
      while (i < localJSONArray7.length())
      {
        localWp.e((wk)paramList2.get(localJSONArray7.getInt(i)));
        i += 1;
      }
    }
    if (localJSONArray8 != null)
    {
      i = 0;
      while (i < localJSONArray8.length())
      {
        localWp.f((wk)paramList2.get(localJSONArray8.getInt(i)));
        i += 1;
      }
    }
    if (localJSONArray9 != null)
    {
      i = 0;
      while (i < localJSONArray9.length())
      {
        localWp.c(paramArrayOfR[localJSONArray9.getInt(i)].b);
        i += 1;
      }
    }
    if (paramJSONObject != null)
    {
      i = 0;
      while (i < paramJSONObject.length())
      {
        localWp.d(paramArrayOfR[paramJSONObject.getInt(i)].b);
        i += 1;
      }
    }
    return localWp.a();
  }
  
  private static <T> T a(JSONArray paramJSONArray, int paramInt, String paramString)
  {
    if ((paramInt >= 0) && (paramInt < paramJSONArray.length())) {
      try
      {
        paramJSONArray = paramJSONArray.get(paramInt);
        return paramJSONArray;
      }
      catch (JSONException paramJSONArray) {}
    }
    b("Index out of bounds detected: " + paramInt + " in " + paramString);
    return null;
  }
  
  private static List<wk> a(JSONArray paramJSONArray1, JSONArray paramJSONArray2, JSONArray paramJSONArray3, r[] paramArrayOfR)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < paramJSONArray1.length())
    {
      localArrayList.add(a(paramJSONArray1.getJSONObject(i), paramJSONArray2, paramJSONArray3, paramArrayOfR));
      i += 1;
    }
    return localArrayList;
  }
  
  private static r[] a(JSONObject paramJSONObject)
  {
    paramJSONObject = paramJSONObject.opt("values");
    r[] arrayOfR;
    if ((paramJSONObject instanceof JSONArray))
    {
      paramJSONObject = (JSONArray)paramJSONObject;
      arrayOfR = new r[paramJSONObject.length()];
      int i = 0;
      while (i < arrayOfR.length)
      {
        a(i, paramJSONObject, arrayOfR, new HashSet(0));
        i += 1;
      }
    }
    throw new wq("Missing Values list");
    return arrayOfR;
  }
  
  private static void b(String paramString)
  {
    bj.a(paramString);
    throw new wq(paramString);
  }
}
