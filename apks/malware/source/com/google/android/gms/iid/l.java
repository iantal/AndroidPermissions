package com.google.android.gms.iid;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Base64;
import android.util.Log;
import java.io.File;
import java.io.IOException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class l
{
  SharedPreferences a;
  Context b;
  
  public l(Context paramContext)
  {
    this(paramContext, "com.google.android.gms.appid");
  }
  
  private l(Context paramContext, String paramString)
  {
    this.b = paramContext;
    this.a = paramContext.getSharedPreferences(paramString, 4);
    paramContext = paramString + "-no-backup";
    paramContext = new File(new android.support.v4.content.a().getNoBackupFilesDir(this.b), paramContext);
    if (!paramContext.exists()) {}
    try
    {
      if ((paramContext.createNewFile()) && (!a()))
      {
        Log.i("InstanceID/Store", "App restored, clearing state");
        InstanceIDListenerService.a(this.b, this);
      }
      return;
    }
    catch (IOException paramContext)
    {
      while (!Log.isLoggable("InstanceID/Store", 3)) {}
      Log.d("InstanceID/Store", "Error creating file in no backup dir: " + paramContext.getMessage());
    }
  }
  
  private String a(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = this.a.getString(paramString1 + "|S|" + paramString2, null);
      return paramString1;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  final KeyPair a(String paramString, long paramLong)
  {
    try
    {
      KeyPair localKeyPair = f.a();
      this.a.edit().putString(paramString + "|P|", a.a(localKeyPair.getPublic().getEncoded())).putString(paramString + "|K|", a.a(localKeyPair.getPrivate().getEncoded())).putString(paramString + "|S|cre", Long.toString(paramLong)).commit();
      return localKeyPair;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  public final void a(String paramString)
  {
    try
    {
      SharedPreferences.Editor localEditor = this.a.edit();
      Iterator localIterator = this.a.getAll().keySet().iterator();
      while (localIterator.hasNext())
      {
        String str = (String)localIterator.next();
        if (str.startsWith(paramString)) {
          localEditor.remove(str);
        }
      }
      localEditor.commit();
    }
    finally {}
  }
  
  final boolean a()
  {
    return this.a.getAll().isEmpty();
  }
  
  public final void b()
  {
    try
    {
      this.a.edit().clear().commit();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public final void b(String paramString)
  {
    a(paramString + "|T|");
  }
  
  final KeyPair c(String paramString)
  {
    Object localObject1 = a(paramString, "|P|");
    Object localObject2 = a(paramString, "|K|");
    if (localObject2 == null) {
      return null;
    }
    try
    {
      paramString = Base64.decode((String)localObject1, 8);
      localObject1 = Base64.decode((String)localObject2, 8);
      localObject2 = KeyFactory.getInstance("RSA");
      paramString = new KeyPair(((KeyFactory)localObject2).generatePublic(new X509EncodedKeySpec(paramString)), ((KeyFactory)localObject2).generatePrivate(new PKCS8EncodedKeySpec((byte[])localObject1)));
      return paramString;
    }
    catch (InvalidKeySpecException paramString)
    {
      Log.w("InstanceID/Store", "Invalid key stored " + paramString);
      InstanceIDListenerService.a(this.b, this);
      return null;
    }
    catch (NoSuchAlgorithmException paramString)
    {
      for (;;) {}
    }
  }
}
