package com.google.android.gms.a;

import java.lang.reflect.Field;

public final class f<T>
  extends d
{
  private final T a;
  
  private f(T paramT)
  {
    this.a = paramT;
  }
  
  public static <T> c a(T paramT)
  {
    return new f(paramT);
  }
  
  public static <T> T a(c paramC)
  {
    if ((paramC instanceof f)) {
      return ((f)paramC).a;
    }
    paramC = paramC.asBinder();
    Object localObject = paramC.getClass().getDeclaredFields();
    if (localObject.length == 1)
    {
      localObject = localObject[0];
      if (!((Field)localObject).isAccessible())
      {
        ((Field)localObject).setAccessible(true);
        try
        {
          paramC = ((Field)localObject).get(paramC);
          return paramC;
        }
        catch (NullPointerException paramC)
        {
          throw new IllegalArgumentException("Binder object is null.", paramC);
        }
        catch (IllegalArgumentException paramC)
        {
          throw new IllegalArgumentException("remoteBinder is the wrong class.", paramC);
        }
        catch (IllegalAccessException paramC)
        {
          throw new IllegalArgumentException("Could not access the field in remoteBinder.", paramC);
        }
      }
      throw new IllegalArgumentException("The concrete class implementing IObjectWrapper must have exactly one declared *private* field for the wrapped object. Preferably, this is an instance of the ObjectWrapper<T> class.");
    }
    throw new IllegalArgumentException("The concrete class implementing IObjectWrapper must have exactly *one* declared private field for the wrapped object.  Preferably, this is an instance of the ObjectWrapper<T> class.");
  }
}
