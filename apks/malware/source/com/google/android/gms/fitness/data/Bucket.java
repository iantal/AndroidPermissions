package com.google.android.gms.fitness.data;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import com.google.android.gms.common.internal.ao;
import com.google.android.gms.common.internal.ap;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class Bucket
  implements SafeParcelable
{
  public static final Parcelable.Creator<Bucket> CREATOR = new d();
  private final int a;
  private final long b;
  private final long c;
  private final Session d;
  private final int e;
  private final List<DataSet> f;
  private final int g;
  private boolean h = false;
  
  Bucket(int paramInt1, long paramLong1, long paramLong2, Session paramSession, int paramInt2, List<DataSet> paramList, int paramInt3, boolean paramBoolean)
  {
    this.a = paramInt1;
    this.b = paramLong1;
    this.c = paramLong2;
    this.d = paramSession;
    this.e = paramInt2;
    this.f = paramList;
    this.g = paramInt3;
    this.h = paramBoolean;
  }
  
  public Bucket(RawBucket paramRawBucket, List<DataSource> paramList)
  {
    this(2, paramRawBucket.b, paramRawBucket.c, paramRawBucket.d, paramRawBucket.e, a(paramRawBucket.f, paramList), paramRawBucket.g, paramRawBucket.h);
  }
  
  public static String a(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "bug";
    case 1: 
      return "time";
    case 3: 
      return "type";
    case 4: 
      return "segment";
    case 2: 
      return "session";
    }
    return "unknown";
  }
  
  private static List<DataSet> a(Collection<RawDataSet> paramCollection, List<DataSource> paramList)
  {
    ArrayList localArrayList = new ArrayList(paramCollection.size());
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      localArrayList.add(new DataSet((RawDataSet)paramCollection.next(), paramList));
    }
    return localArrayList;
  }
  
  public final long a(TimeUnit paramTimeUnit)
  {
    return paramTimeUnit.convert(this.b, TimeUnit.MILLISECONDS);
  }
  
  public final Session a()
  {
    return this.d;
  }
  
  public final int b()
  {
    return this.e;
  }
  
  public final long b(TimeUnit paramTimeUnit)
  {
    return paramTimeUnit.convert(this.c, TimeUnit.MILLISECONDS);
  }
  
  public final List<DataSet> c()
  {
    return this.f;
  }
  
  public final int d()
  {
    return this.g;
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public final boolean e()
  {
    if (this.h) {
      return true;
    }
    Iterator localIterator = this.f.iterator();
    while (localIterator.hasNext()) {
      if (((DataSet)localIterator.next()).c()) {
        return true;
      }
    }
    return false;
  }
  
  public boolean equals(Object paramObject)
  {
    boolean bool2 = false;
    boolean bool1;
    if (paramObject != this)
    {
      bool1 = bool2;
      if (!(paramObject instanceof Bucket)) {
        break label105;
      }
      paramObject = (Bucket)paramObject;
      if ((this.b != paramObject.b) || (this.c != paramObject.c) || (this.e != paramObject.e) || (!ao.a(this.f, paramObject.f)) || (this.g != paramObject.g) || (this.h != paramObject.h)) {
        break label107;
      }
    }
    label105:
    label107:
    for (int i = 1;; i = 0)
    {
      bool1 = bool2;
      if (i != 0) {
        bool1 = true;
      }
      return bool1;
    }
  }
  
  final int f()
  {
    return this.a;
  }
  
  public final long g()
  {
    return this.b;
  }
  
  public final long h()
  {
    return this.c;
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(new Object[] { Long.valueOf(this.b), Long.valueOf(this.c), Integer.valueOf(this.e), Integer.valueOf(this.g) });
  }
  
  public String toString()
  {
    return ao.a(this).a("startTime", Long.valueOf(this.b)).a("endTime", Long.valueOf(this.c)).a("activity", Integer.valueOf(this.e)).a("dataSets", this.f).a("bucketType", a(this.g)).a("serverHasMoreData", Boolean.valueOf(this.h)).toString();
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    d.a(this, paramParcel, paramInt);
  }
}
