package com.google.android.gms.fitness.data;

import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.support.v4.b.a;
import com.google.android.gms.common.internal.aq;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;

public final class Value
  implements SafeParcelable
{
  public static final Parcelable.Creator<Value> CREATOR = new v();
  private final int a;
  private final int b;
  private boolean c;
  private float d;
  private String e;
  private Map<String, MapValue> f;
  
  Value(int paramInt1, int paramInt2, boolean paramBoolean, float paramFloat, String paramString, Bundle paramBundle)
  {
    this.a = paramInt1;
    this.b = paramInt2;
    this.c = paramBoolean;
    this.d = paramFloat;
    this.e = paramString;
    this.f = a(paramBundle);
  }
  
  private static Map<String, MapValue> a(Bundle paramBundle)
  {
    if (paramBundle == null) {
      return null;
    }
    paramBundle.setClassLoader(MapValue.class.getClassLoader());
    a localA = new a(paramBundle.size());
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      localA.put(str, paramBundle.getParcelable(str));
    }
    return localA;
  }
  
  private int g()
  {
    boolean bool = true;
    if (this.b == 1) {}
    for (;;)
    {
      aq.a(bool, "Value is not in int format");
      return Float.floatToRawIntBits(this.d);
      bool = false;
    }
  }
  
  private float h()
  {
    if (this.b == 2) {}
    for (boolean bool = true;; bool = false)
    {
      aq.a(bool, "Value is not in float format");
      return this.d;
    }
  }
  
  private String i()
  {
    if (this.b == 3) {}
    for (boolean bool = true;; bool = false)
    {
      aq.a(bool, "Value is not in string format");
      return this.e;
    }
  }
  
  private Map<String, MapValue> j()
  {
    if (this.b == 4) {}
    for (boolean bool = true;; bool = false)
    {
      aq.a(bool, "Value is not in float map format");
      if (this.f != null) {
        break;
      }
      return Collections.emptyMap();
    }
    return this.f;
  }
  
  public final boolean a()
  {
    return this.c;
  }
  
  public final int b()
  {
    return this.b;
  }
  
  final int c()
  {
    return this.a;
  }
  
  final float d()
  {
    return this.d;
  }
  
  public final int describeContents()
  {
    return 0;
  }
  
  final String e()
  {
    return this.e;
  }
  
  public final boolean equals(Object paramObject)
  {
    boolean bool3 = false;
    boolean bool2;
    boolean bool1;
    if (this != paramObject)
    {
      bool2 = bool3;
      if (!(paramObject instanceof Value)) {
        break label103;
      }
      paramObject = (Value)paramObject;
      if ((this.b != paramObject.b) || (this.c != paramObject.c)) {
        break label185;
      }
      switch (this.b)
      {
      default: 
        if (this.d == paramObject.d) {
          bool1 = true;
        }
        break;
      }
    }
    for (;;)
    {
      bool2 = bool3;
      if (bool1) {
        bool2 = true;
      }
      label103:
      return bool2;
      if (g() == paramObject.g())
      {
        bool1 = true;
      }
      else
      {
        bool1 = false;
        continue;
        if (h() == paramObject.h())
        {
          bool1 = true;
        }
        else
        {
          bool1 = false;
          continue;
          bool1 = i().equals(paramObject.i());
          continue;
          bool1 = j().equals(paramObject.j());
          continue;
          bool1 = false;
          continue;
          label185:
          bool1 = false;
        }
      }
    }
  }
  
  final Bundle f()
  {
    if (this.f == null) {
      return null;
    }
    Bundle localBundle = new Bundle(this.f.size());
    Iterator localIterator = this.f.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localBundle.putParcelable((String)localEntry.getKey(), (Parcelable)localEntry.getValue());
    }
    return localBundle;
  }
  
  public final int hashCode()
  {
    return Arrays.hashCode(new Object[] { Float.valueOf(this.d), this.e, this.f });
  }
  
  public final String toString()
  {
    if (!this.c) {
      return "unset";
    }
    switch (this.b)
    {
    default: 
      return "unknown";
    case 1: 
      return Integer.toString(g());
    case 2: 
      return Float.toString(h());
    case 3: 
      return this.e;
    }
    return new TreeMap(this.f).toString();
  }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt)
  {
    v.a(this, paramParcel);
  }
}
