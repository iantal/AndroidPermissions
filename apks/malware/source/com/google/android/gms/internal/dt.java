package com.google.android.gms.internal;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import android.widget.ImageView;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.plus.PlusClient;
import com.google.android.gms.plus.PlusClient.a;
import java.io.IOException;

public class dt
  extends ImageView
  implements GooglePlayServicesClient.ConnectionCallbacks, PlusClient.a
{
  private int gU;
  private boolean gV;
  private boolean gW;
  private Bitmap gX;
  private PlusClient gY;
  private Uri mUri;
  
  public dt(Context paramContext)
  {
    super(paramContext);
  }
  
  private static Bitmap a(Bitmap paramBitmap, int paramInt)
  {
    double d2 = paramBitmap.getWidth();
    double d3 = paramBitmap.getHeight();
    if (d2 > d3) {}
    for (double d1 = paramInt / d2;; d1 = paramInt / d3) {
      return Bitmap.createScaledBitmap(paramBitmap, (int)(d2 * d1 + 0.5D), (int)(d1 * d3 + 0.5D), true);
    }
  }
  
  private void bc()
  {
    int i;
    if ((this.mUri != null) && ("android.resource".equals(this.mUri.getScheme())))
    {
      i = 1;
      if (this.gW) {
        break label37;
      }
    }
    label37:
    do
    {
      return;
      i = 0;
      break;
      if (this.mUri == null)
      {
        setImageBitmap(null);
        return;
      }
    } while ((i == 0) && ((this.gY == null) || (!this.gY.isConnected())));
    if (i != 0) {
      setImageURI(this.mUri);
    }
    for (;;)
    {
      this.gW = false;
      return;
      this.gY.a(this, this.mUri, this.gU);
    }
  }
  
  public void a(Uri paramUri, int paramInt)
  {
    int i = 0;
    boolean bool;
    if (this.mUri == null) {
      if (paramUri == null) {
        bool = true;
      }
    }
    for (;;)
    {
      if (this.gU == paramInt) {
        i = 1;
      }
      if ((!bool) || (i == 0)) {
        break;
      }
      return;
      bool = false;
      continue;
      bool = this.mUri.equals(paramUri);
    }
    this.mUri = paramUri;
    this.gU = paramInt;
    this.gW = true;
    bc();
  }
  
  public void a(ConnectionResult paramConnectionResult, ParcelFileDescriptor paramParcelFileDescriptor)
  {
    if (!paramConnectionResult.isSuccess()) {}
    do
    {
      return;
      this.gW = false;
    } while (paramParcelFileDescriptor == null);
    new a(this.gU).execute(new ParcelFileDescriptor[] { paramParcelFileDescriptor });
  }
  
  public void a(PlusClient paramPlusClient)
  {
    if (paramPlusClient != this.gY)
    {
      if ((this.gY != null) && (this.gY.isConnectionCallbacksRegistered(this))) {
        this.gY.unregisterConnectionCallbacks(this);
      }
      this.gY = paramPlusClient;
      this.gY.registerConnectionCallbacks(this);
    }
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    this.gV = true;
    if ((this.gY != null) && (!this.gY.isConnectionCallbacksRegistered(this))) {
      this.gY.registerConnectionCallbacks(this);
    }
    if (this.gX != null) {
      setImageBitmap(this.gX);
    }
  }
  
  public void onConnected(Bundle paramBundle)
  {
    bc();
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    this.gV = false;
    if ((this.gY != null) && (this.gY.isConnectionCallbacksRegistered(this))) {
      this.gY.unregisterConnectionCallbacks(this);
    }
  }
  
  public void onDisconnected() {}
  
  class a
    extends AsyncTask<ParcelFileDescriptor, Void, Bitmap>
  {
    private final int gU;
    
    a(int paramInt)
    {
      this.gU = paramInt;
    }
    
    protected Bitmap a(ParcelFileDescriptor... paramVarArgs)
    {
      paramVarArgs = paramVarArgs[0];
      try
      {
        Bitmap localBitmap = BitmapFactory.decodeFileDescriptor(paramVarArgs.getFileDescriptor());
        if (this.gU > 0)
        {
          localBitmap = dt.b(localBitmap, this.gU);
          try
          {
            paramVarArgs.close();
            return localBitmap;
          }
          catch (IOException paramVarArgs)
          {
            Log.e("PlusImageView", "closed failed", paramVarArgs);
            return localBitmap;
          }
        }
        try
        {
          paramVarArgs.close();
          return localBitmap;
        }
        catch (IOException paramVarArgs)
        {
          Log.e("PlusImageView", "closed failed", paramVarArgs);
          return localBitmap;
        }
        try
        {
          paramVarArgs.close();
          throw localObject;
        }
        catch (IOException paramVarArgs)
        {
          for (;;)
          {
            Log.e("PlusImageView", "closed failed", paramVarArgs);
          }
        }
      }
      finally {}
    }
    
    protected void b(Bitmap paramBitmap)
    {
      dt.a(dt.this, paramBitmap);
      if (dt.a(dt.this)) {
        dt.this.setImageBitmap(dt.b(dt.this));
      }
    }
  }
}
