package com.google.android.gms.internal;

import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable.Creator;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class at
  extends an
  implements ae
{
  public static final au CREATOR = new au();
  private final int T;
  private final aq bC;
  private final Parcel bK;
  private final int bL;
  private int bM;
  private int bN;
  private final String mClassName;
  
  at(int paramInt, Parcel paramParcel, aq paramAq)
  {
    this.T = paramInt;
    this.bK = ((Parcel)x.d(paramParcel));
    this.bL = 2;
    this.bC = paramAq;
    if (this.bC == null) {}
    for (this.mClassName = null;; this.mClassName = this.bC.W())
    {
      this.bM = 2;
      return;
    }
  }
  
  private at(ae paramAe, aq paramAq, String paramString)
  {
    this.T = 1;
    this.bK = Parcel.obtain();
    paramAe.writeToParcel(this.bK, 0);
    this.bL = 1;
    this.bC = ((aq)x.d(paramAq));
    this.mClassName = ((String)x.d(paramString));
    this.bM = 2;
  }
  
  public static <T extends an,  extends ae> at a(T paramT)
  {
    String str = paramT.getClass().getCanonicalName();
    aq localAq = b(paramT);
    return new at((ae)paramT, localAq, str);
  }
  
  public static HashMap<String, String> a(Bundle paramBundle)
  {
    HashMap localHashMap = new HashMap();
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      localHashMap.put(str, paramBundle.getString(str));
    }
    return localHashMap;
  }
  
  private static void a(aq paramAq, an paramAn)
  {
    Object localObject = paramAn.getClass();
    if (!paramAq.a((Class)localObject))
    {
      HashMap localHashMap = paramAn.G();
      paramAq.a((Class)localObject, paramAn.G());
      localObject = localHashMap.keySet().iterator();
      while (((Iterator)localObject).hasNext())
      {
        paramAn = (an.a)localHashMap.get((String)((Iterator)localObject).next());
        Class localClass = paramAn.O();
        if (localClass != null) {
          try
          {
            a(paramAq, (an)localClass.newInstance());
          }
          catch (InstantiationException paramAq)
          {
            throw new IllegalStateException("Could not instantiate an object of type " + paramAn.O().getCanonicalName(), paramAq);
          }
          catch (IllegalAccessException paramAq)
          {
            throw new IllegalStateException("Could not access object of type " + paramAn.O().getCanonicalName(), paramAq);
          }
        }
      }
    }
  }
  
  private void a(StringBuilder paramStringBuilder, int paramInt, Object paramObject)
  {
    switch (paramInt)
    {
    default: 
      throw new IllegalArgumentException("Unknown type = " + paramInt);
    case 0: 
    case 1: 
    case 2: 
    case 3: 
    case 4: 
    case 5: 
    case 6: 
      paramStringBuilder.append(paramObject);
      return;
    case 7: 
      paramStringBuilder.append("\"").append(ay.o(paramObject.toString())).append("\"");
      return;
    case 8: 
      paramStringBuilder.append("\"").append(aw.a((byte[])paramObject)).append("\"");
      return;
    case 9: 
      paramStringBuilder.append("\"").append(aw.b((byte[])paramObject));
      paramStringBuilder.append("\"");
      return;
    case 10: 
      az.a(paramStringBuilder, (HashMap)paramObject);
      return;
    }
    throw new IllegalArgumentException("Method does not accept concrete type.");
  }
  
  private void a(StringBuilder paramStringBuilder, an.a<?, ?> paramA, Parcel paramParcel, int paramInt)
  {
    switch (paramA.F())
    {
    default: 
      throw new IllegalArgumentException("Unknown field out type = " + paramA.F());
    case 0: 
      b(paramStringBuilder, paramA, a(paramA, Integer.valueOf(ac.f(paramParcel, paramInt))));
      return;
    case 1: 
      b(paramStringBuilder, paramA, a(paramA, ac.h(paramParcel, paramInt)));
      return;
    case 2: 
      b(paramStringBuilder, paramA, a(paramA, Long.valueOf(ac.g(paramParcel, paramInt))));
      return;
    case 3: 
      b(paramStringBuilder, paramA, a(paramA, Float.valueOf(ac.i(paramParcel, paramInt))));
      return;
    case 4: 
      b(paramStringBuilder, paramA, a(paramA, Double.valueOf(ac.j(paramParcel, paramInt))));
      return;
    case 5: 
      b(paramStringBuilder, paramA, a(paramA, ac.k(paramParcel, paramInt)));
      return;
    case 6: 
      b(paramStringBuilder, paramA, a(paramA, Boolean.valueOf(ac.c(paramParcel, paramInt))));
      return;
    case 7: 
      b(paramStringBuilder, paramA, a(paramA, ac.l(paramParcel, paramInt)));
      return;
    case 8: 
    case 9: 
      b(paramStringBuilder, paramA, a(paramA, ac.o(paramParcel, paramInt)));
      return;
    case 10: 
      b(paramStringBuilder, paramA, a(paramA, a(ac.n(paramParcel, paramInt))));
      return;
    }
    throw new IllegalArgumentException("Method does not accept concrete type.");
  }
  
  private void a(StringBuilder paramStringBuilder, String paramString, an.a<?, ?> paramA, Parcel paramParcel, int paramInt)
  {
    paramStringBuilder.append("\"").append(paramString).append("\":");
    if (paramA.Q())
    {
      a(paramStringBuilder, paramA, paramParcel, paramInt);
      return;
    }
    b(paramStringBuilder, paramA, paramParcel, paramInt);
  }
  
  private void a(StringBuilder paramStringBuilder, HashMap<String, an.a<?, ?>> paramHashMap, Parcel paramParcel)
  {
    paramHashMap = b(paramHashMap);
    paramStringBuilder.append('{');
    int j = ac.c(paramParcel);
    int i = 0;
    while (paramParcel.dataPosition() < j)
    {
      int k = ac.b(paramParcel);
      Map.Entry localEntry = (Map.Entry)paramHashMap.get(Integer.valueOf(ac.j(k)));
      if (localEntry != null)
      {
        if (i != 0) {
          paramStringBuilder.append(",");
        }
        a(paramStringBuilder, (String)localEntry.getKey(), (an.a)localEntry.getValue(), paramParcel, k);
        i = 1;
      }
    }
    if (paramParcel.dataPosition() != j) {
      throw new ac.a("Overread allowed size end=" + j, paramParcel);
    }
    paramStringBuilder.append('}');
  }
  
  private static aq b(an paramAn)
  {
    aq localAq = new aq(paramAn.getClass());
    a(localAq, paramAn);
    localAq.U();
    localAq.T();
    return localAq;
  }
  
  private static HashMap<Integer, Map.Entry<String, an.a<?, ?>>> b(HashMap<String, an.a<?, ?>> paramHashMap)
  {
    HashMap localHashMap = new HashMap();
    paramHashMap = paramHashMap.entrySet().iterator();
    while (paramHashMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramHashMap.next();
      localHashMap.put(Integer.valueOf(((an.a)localEntry.getValue()).N()), localEntry);
    }
    return localHashMap;
  }
  
  private void b(StringBuilder paramStringBuilder, an.a<?, ?> paramA, Parcel paramParcel, int paramInt)
  {
    if (paramA.L())
    {
      paramStringBuilder.append("[");
      switch (paramA.F())
      {
      default: 
        throw new IllegalStateException("Unknown field type out.");
      case 0: 
        av.a(paramStringBuilder, ac.q(paramParcel, paramInt));
      }
      for (;;)
      {
        paramStringBuilder.append("]");
        return;
        av.a(paramStringBuilder, ac.s(paramParcel, paramInt));
        continue;
        av.a(paramStringBuilder, ac.r(paramParcel, paramInt));
        continue;
        av.a(paramStringBuilder, ac.t(paramParcel, paramInt));
        continue;
        av.a(paramStringBuilder, ac.u(paramParcel, paramInt));
        continue;
        av.a(paramStringBuilder, ac.v(paramParcel, paramInt));
        continue;
        av.a(paramStringBuilder, ac.p(paramParcel, paramInt));
        continue;
        av.a(paramStringBuilder, ac.w(paramParcel, paramInt));
        continue;
        throw new UnsupportedOperationException("List of type BASE64, BASE64_URL_SAFE, or STRING_MAP is not supported");
        paramParcel = ac.z(paramParcel, paramInt);
        int i = paramParcel.length;
        paramInt = 0;
        while (paramInt < i)
        {
          if (paramInt > 0) {
            paramStringBuilder.append(",");
          }
          paramParcel[paramInt].setDataPosition(0);
          a(paramStringBuilder, paramA.S(), paramParcel[paramInt]);
          paramInt += 1;
        }
      }
    }
    switch (paramA.F())
    {
    default: 
      throw new IllegalStateException("Unknown field type out");
    case 0: 
      paramStringBuilder.append(ac.f(paramParcel, paramInt));
      return;
    case 1: 
      paramStringBuilder.append(ac.h(paramParcel, paramInt));
      return;
    case 2: 
      paramStringBuilder.append(ac.g(paramParcel, paramInt));
      return;
    case 3: 
      paramStringBuilder.append(ac.i(paramParcel, paramInt));
      return;
    case 4: 
      paramStringBuilder.append(ac.j(paramParcel, paramInt));
      return;
    case 5: 
      paramStringBuilder.append(ac.k(paramParcel, paramInt));
      return;
    case 6: 
      paramStringBuilder.append(ac.c(paramParcel, paramInt));
      return;
    case 7: 
      paramA = ac.l(paramParcel, paramInt);
      paramStringBuilder.append("\"").append(ay.o(paramA)).append("\"");
      return;
    case 8: 
      paramA = ac.o(paramParcel, paramInt);
      paramStringBuilder.append("\"").append(aw.a(paramA)).append("\"");
      return;
    case 9: 
      paramA = ac.o(paramParcel, paramInt);
      paramStringBuilder.append("\"").append(aw.b(paramA));
      paramStringBuilder.append("\"");
      return;
    case 10: 
      paramA = ac.n(paramParcel, paramInt);
      paramParcel = paramA.keySet();
      paramParcel.size();
      paramStringBuilder.append("{");
      paramParcel = paramParcel.iterator();
      for (paramInt = 1; paramParcel.hasNext(); paramInt = 0)
      {
        String str = (String)paramParcel.next();
        if (paramInt == 0) {
          paramStringBuilder.append(",");
        }
        paramStringBuilder.append("\"").append(str).append("\"");
        paramStringBuilder.append(":");
        paramStringBuilder.append("\"").append(ay.o(paramA.getString(str))).append("\"");
      }
      paramStringBuilder.append("}");
      return;
    }
    paramParcel = ac.y(paramParcel, paramInt);
    paramParcel.setDataPosition(0);
    a(paramStringBuilder, paramA.S(), paramParcel);
  }
  
  private void b(StringBuilder paramStringBuilder, an.a<?, ?> paramA, Object paramObject)
  {
    if (paramA.K())
    {
      b(paramStringBuilder, paramA, (ArrayList)paramObject);
      return;
    }
    a(paramStringBuilder, paramA.E(), paramObject);
  }
  
  private void b(StringBuilder paramStringBuilder, an.a<?, ?> paramA, ArrayList<?> paramArrayList)
  {
    paramStringBuilder.append("[");
    int j = paramArrayList.size();
    int i = 0;
    while (i < j)
    {
      if (i != 0) {
        paramStringBuilder.append(",");
      }
      a(paramStringBuilder, paramA.E(), paramArrayList.get(i));
      i += 1;
    }
    paramStringBuilder.append("]");
  }
  
  public HashMap<String, an.a<?, ?>> G()
  {
    if (this.bC == null) {
      return null;
    }
    return this.bC.n(this.mClassName);
  }
  
  public Parcel Y()
  {
    switch (this.bM)
    {
    }
    for (;;)
    {
      return this.bK;
      this.bN = ad.d(this.bK);
      ad.C(this.bK, this.bN);
      this.bM = 2;
      continue;
      ad.C(this.bK, this.bN);
      this.bM = 2;
    }
  }
  
  aq Z()
  {
    switch (this.bL)
    {
    default: 
      throw new IllegalStateException("Invalid creation type: " + this.bL);
    case 0: 
      return null;
    case 1: 
      return this.bC;
    }
    return this.bC;
  }
  
  public <T extends ae> T a(Parcelable.Creator<T> paramCreator)
  {
    Parcel localParcel = Y();
    localParcel.setDataPosition(0);
    return (ae)paramCreator.createFromParcel(localParcel);
  }
  
  public int describeContents()
  {
    au localAu = CREATOR;
    return 0;
  }
  
  protected Object j(String paramString)
  {
    throw new UnsupportedOperationException("Converting to JSON does not require this method.");
  }
  
  protected boolean k(String paramString)
  {
    throw new UnsupportedOperationException("Converting to JSON does not require this method.");
  }
  
  public String toString()
  {
    x.b(this.bC, "Cannot convert to JSON on client side.");
    Parcel localParcel = Y();
    localParcel.setDataPosition(0);
    StringBuilder localStringBuilder = new StringBuilder(100);
    a(localStringBuilder, this.bC.n(this.mClassName), localParcel);
    return localStringBuilder.toString();
  }
  
  public int u()
  {
    return this.T;
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    au localAu = CREATOR;
    au.a(this, paramParcel, paramInt);
  }
}
