package com.google.android.gms.internal;

import com.google.android.gms.common.data.DataBuffer;
import java.util.ArrayList;

public abstract class m<T>
  extends DataBuffer<T>
{
  private boolean ag = false;
  private ArrayList<Integer> ah;
  
  public m(k paramK)
  {
    super(paramK);
  }
  
  private int g(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < this.ah.size())) {}
    for (boolean bool = true;; bool = false)
    {
      n.a(bool, "Position " + paramInt + " is out of bounds for this buffer");
      return ((Integer)this.ah.get(paramInt)).intValue();
    }
  }
  
  private int h(int paramInt)
  {
    if ((paramInt < 0) || (paramInt == this.ah.size())) {
      return 0;
    }
    if (paramInt == this.ah.size() - 1) {
      return this.O.getCount() - ((Integer)this.ah.get(paramInt)).intValue();
    }
    return ((Integer)this.ah.get(paramInt + 1)).intValue() - ((Integer)this.ah.get(paramInt)).intValue();
  }
  
  private void i()
  {
    for (;;)
    {
      int i;
      try
      {
        if (!this.ag)
        {
          int j = this.O.getCount();
          this.ah = new ArrayList();
          if (j > 0)
          {
            this.ah.add(Integer.valueOf(0));
            String str2 = getPrimaryDataMarkerColumn();
            i = this.O.d(0);
            Object localObject1 = this.O.c(str2, 0, i);
            i = 1;
            if (i < j)
            {
              int k = this.O.d(i);
              String str1 = this.O.c(str2, i, k);
              if (str1.equals(localObject1)) {
                break label145;
              }
              this.ah.add(Integer.valueOf(i));
              localObject1 = str1;
              break label145;
            }
          }
          this.ag = true;
        }
        else
        {
          return;
        }
      }
      finally {}
      label145:
      i += 1;
    }
  }
  
  protected abstract T a(int paramInt1, int paramInt2);
  
  public final T get(int paramInt)
  {
    i();
    return a(g(paramInt), h(paramInt));
  }
  
  public int getCount()
  {
    i();
    return this.ah.size();
  }
  
  protected abstract String getPrimaryDataMarkerColumn();
}
