package com.google.android.gms.internal;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.WindowManager;
import android.webkit.DownloadListener;
import android.webkit.ValueCallback;
import android.webkit.WebSettings;
import android.webkit.WebView;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public final class mm
  extends WebView
  implements DownloadListener
{
  private final mq a;
  private final mo b;
  private final Object c = new Object();
  private final pl d;
  private final gt e;
  private ex f;
  private ay g;
  private boolean h;
  private boolean i;
  private boolean j;
  private boolean k;
  private final WindowManager l;
  
  private mm(mo paramMo, ay paramAy, boolean paramBoolean1, boolean paramBoolean2, pl paramPl, gt paramGt)
  {
    super(paramMo);
    this.b = paramMo;
    this.g = paramAy;
    this.h = paramBoolean1;
    this.d = paramPl;
    this.e = paramGt;
    this.l = ((WindowManager)getContext().getSystemService("window"));
    setBackgroundColor(0);
    paramAy = getSettings();
    paramAy.setJavaScriptEnabled(true);
    paramAy.setSavePassword(false);
    paramAy.setSupportMultipleWindows(true);
    paramAy.setJavaScriptCanOpenWindowsAutomatically(true);
    lo.a(paramMo, paramGt.c, paramAy);
    if (Build.VERSION.SDK_INT >= 17)
    {
      lx.a(getContext(), paramAy);
      paramAy.setMediaPlaybackRequiresUserGesture(false);
      setDownloadListener(this);
      if (Build.VERSION.SDK_INT < 11) {
        break label199;
      }
      this.a = new ne(this, paramBoolean2);
      label147:
      setWebViewClient(this.a);
      if (Build.VERSION.SDK_INT < 14) {
        break label216;
      }
      setWebChromeClient(new nf(this));
    }
    for (;;)
    {
      l();
      return;
      if (Build.VERSION.SDK_INT < 11) {
        break;
      }
      lx.a(getContext(), paramAy);
      break;
      label199:
      this.a = new mq(this, paramBoolean2);
      break label147;
      label216:
      if (Build.VERSION.SDK_INT >= 11) {
        setWebChromeClient(new mv(this));
      }
    }
  }
  
  public static mm a(Context paramContext, ay paramAy, boolean paramBoolean1, boolean paramBoolean2, pl paramPl, gt paramGt)
  {
    return new mm(new mo(paramContext), paramAy, paramBoolean1, paramBoolean2, paramPl, paramGt);
  }
  
  private void a(String paramString)
  {
    synchronized (this.c)
    {
      if (!o())
      {
        loadUrl(paramString);
        return;
      }
      mi.e("The webview is destroyed. Ignoring action.");
    }
  }
  
  private void l()
  {
    for (;;)
    {
      synchronized (this.c)
      {
        if ((this.h) || (this.g.f))
        {
          if (Build.VERSION.SDK_INT < 14)
          {
            mi.a("Disabling hardware acceleration on an overlay.");
            m();
            return;
          }
          mi.a("Enabling hardware acceleration on an overlay.");
          n();
        }
      }
      if (Build.VERSION.SDK_INT < 18)
      {
        mi.a("Disabling hardware acceleration on an AdView.");
        m();
      }
      else
      {
        mi.a("Enabling hardware acceleration on an AdView.");
        n();
      }
    }
  }
  
  private void m()
  {
    synchronized (this.c)
    {
      if ((!this.i) && (Build.VERSION.SDK_INT >= 11)) {
        setLayerType(1, null);
      }
      this.i = true;
      return;
    }
  }
  
  private void n()
  {
    synchronized (this.c)
    {
      if ((this.i) && (Build.VERSION.SDK_INT >= 11)) {
        setLayerType(0, null);
      }
      this.i = false;
      return;
    }
  }
  
  private boolean o()
  {
    synchronized (this.c)
    {
      boolean bool = this.j;
      return bool;
    }
  }
  
  public final void a()
  {
    if (!this.a.b()) {
      return;
    }
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    Display localDisplay = this.l.getDefaultDisplay();
    localDisplay.getMetrics(localDisplayMetrics);
    int n = lo.c(getContext());
    float f1 = 160.0F / localDisplayMetrics.densityDpi;
    int m = Math.round(localDisplayMetrics.widthPixels * f1);
    n = Math.round((localDisplayMetrics.heightPixels - n) * f1);
    try
    {
      b("onScreenInfoChanged", new JSONObject().put("width", m).put("height", n).put("density", localDisplayMetrics.density).put("rotation", localDisplay.getRotation()));
      return;
    }
    catch (JSONException localJSONException)
    {
      mi.b("Error occured while obtaining screen information.", localJSONException);
    }
  }
  
  public final void a(Context paramContext)
  {
    this.b.setBaseContext(paramContext);
  }
  
  public final void a(Context paramContext, ay paramAy)
  {
    synchronized (this.c)
    {
      this.b.setBaseContext(paramContext);
      this.f = null;
      this.g = paramAy;
      this.h = false;
      this.k = false;
      lo.b(this);
      loadUrl("about:blank");
      this.a.d();
      setOnTouchListener(null);
      setOnClickListener(null);
      return;
    }
  }
  
  public final void a(ay paramAy)
  {
    synchronized (this.c)
    {
      this.g = paramAy;
      requestLayout();
      return;
    }
  }
  
  public final void a(ex paramEx)
  {
    synchronized (this.c)
    {
      this.f = paramEx;
      return;
    }
  }
  
  public final void a(String paramString, Map<String, ?> paramMap)
  {
    try
    {
      paramMap = lo.a(paramMap);
      b(paramString, paramMap);
      return;
    }
    catch (JSONException paramString)
    {
      mi.e("Could not convert parameters to JSON.");
    }
  }
  
  public final void a(String paramString, JSONObject paramJSONObject)
  {
    Object localObject = paramJSONObject;
    if (paramJSONObject == null) {
      localObject = new JSONObject();
    }
    paramJSONObject = ((JSONObject)localObject).toString();
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("javascript:" + paramString + "(");
    ((StringBuilder)localObject).append(paramJSONObject);
    ((StringBuilder)localObject).append(");");
    a(((StringBuilder)localObject).toString());
  }
  
  public final void a(boolean paramBoolean)
  {
    synchronized (this.c)
    {
      this.h = paramBoolean;
      l();
      return;
    }
  }
  
  public final void b()
  {
    HashMap localHashMap = new HashMap(1);
    localHashMap.put("version", this.e.c);
    a("onhide", localHashMap);
  }
  
  public final void b(String paramString, JSONObject paramJSONObject)
  {
    Object localObject = paramJSONObject;
    if (paramJSONObject == null) {
      localObject = new JSONObject();
    }
    paramJSONObject = ((JSONObject)localObject).toString();
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("javascript:AFMA_ReceiveMessage('");
    ((StringBuilder)localObject).append(paramString);
    ((StringBuilder)localObject).append("'");
    ((StringBuilder)localObject).append(",");
    ((StringBuilder)localObject).append(paramJSONObject);
    ((StringBuilder)localObject).append(");");
    mi.d("Dispatching AFMA event: " + localObject);
    a(((StringBuilder)localObject).toString());
  }
  
  public final void b(boolean paramBoolean)
  {
    synchronized (this.c)
    {
      if (this.f != null)
      {
        this.f.a(paramBoolean);
        return;
      }
      this.k = paramBoolean;
    }
  }
  
  public final void c()
  {
    HashMap localHashMap = new HashMap(1);
    localHashMap.put("version", this.e.c);
    a("onshow", localHashMap);
  }
  
  public final ex d()
  {
    synchronized (this.c)
    {
      ex localEx = this.f;
      return localEx;
    }
  }
  
  public final void destroy()
  {
    synchronized (this.c)
    {
      super.destroy();
      this.j = true;
      return;
    }
  }
  
  public final ay e()
  {
    synchronized (this.c)
    {
      ay localAy = this.g;
      return localAy;
    }
  }
  
  public final void evaluateJavascript(String paramString, ValueCallback<String> paramValueCallback)
  {
    synchronized (this.c)
    {
      if (o())
      {
        mi.e("The webview is destroyed. Ignoring action.");
        if (paramValueCallback != null) {
          paramValueCallback.onReceiveValue(null);
        }
        return;
      }
      super.evaluateJavascript(paramString, paramValueCallback);
      return;
    }
  }
  
  public final mq f()
  {
    return this.a;
  }
  
  public final boolean g()
  {
    return this.k;
  }
  
  public final pl h()
  {
    return this.d;
  }
  
  public final gt i()
  {
    return this.e;
  }
  
  public final boolean j()
  {
    synchronized (this.c)
    {
      boolean bool = this.h;
      return bool;
    }
  }
  
  public final Context k()
  {
    return this.b.a();
  }
  
  public final void onDownloadStart(String paramString1, String paramString2, String paramString3, String paramString4, long paramLong)
  {
    try
    {
      paramString2 = new Intent("android.intent.action.VIEW");
      paramString2.setDataAndType(Uri.parse(paramString1), paramString4);
      getContext().startActivity(paramString2);
      return;
    }
    catch (ActivityNotFoundException paramString2)
    {
      mi.a("Couldn't find an Activity to view url/mimetype: " + paramString1 + " / " + paramString4);
    }
  }
  
  protected final void onMeasure(int paramInt1, int paramInt2)
  {
    int n = Integer.MAX_VALUE;
    for (;;)
    {
      int m;
      int i2;
      int i1;
      synchronized (this.c)
      {
        if ((isInEditMode()) || (this.h))
        {
          super.onMeasure(paramInt1, paramInt2);
          return;
        }
        int i3 = View.MeasureSpec.getMode(paramInt1);
        m = View.MeasureSpec.getSize(paramInt1);
        i2 = View.MeasureSpec.getMode(paramInt2);
        i1 = View.MeasureSpec.getSize(paramInt2);
        if (i3 == Integer.MIN_VALUE) {
          break label277;
        }
        if (i3 != 1073741824) {
          break label270;
        }
        break label277;
        if ((this.g.h > paramInt1) || (this.g.e > paramInt2))
        {
          float f1 = this.b.getResources().getDisplayMetrics().density;
          mi.e("Not enough space to show ad. Needs " + (int)(this.g.h / f1) + "x" + (int)(this.g.e / f1) + " dp, but only has " + (int)(m / f1) + "x" + (int)(i1 / f1) + " dp.");
          if (getVisibility() != 8) {
            setVisibility(4);
          }
          setMeasuredDimension(0, 0);
          return;
        }
      }
      if (getVisibility() != 8) {
        setVisibility(0);
      }
      setMeasuredDimension(this.g.h, this.g.e);
      continue;
      label270:
      paramInt1 = Integer.MAX_VALUE;
      break label280;
      label277:
      paramInt1 = m;
      label280:
      if (i2 != Integer.MIN_VALUE)
      {
        paramInt2 = n;
        if (i2 != 1073741824) {}
      }
      else
      {
        paramInt2 = i1;
      }
    }
  }
  
  public final boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (this.d != null) {
      this.d.a(paramMotionEvent);
    }
    return super.onTouchEvent(paramMotionEvent);
  }
}
