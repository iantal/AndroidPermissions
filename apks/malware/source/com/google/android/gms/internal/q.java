package com.google.android.gms.internal;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.IBinder;
import android.os.Message;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

public final class q
  implements Handler.Callback
{
  private static q aI;
  private final Context aJ;
  private final HashMap<String, a> aK = new HashMap();
  private final Handler mHandler = new Handler(paramContext.getMainLooper(), this);
  
  private q(Context paramContext)
  {
    this.aJ = paramContext.getApplicationContext();
  }
  
  public static q e(Context paramContext)
  {
    if (aI == null) {
      aI = new q(paramContext.getApplicationContext());
    }
    return aI;
  }
  
  public boolean a(String paramString, p<?>.e paramP)
  {
    for (;;)
    {
      a localA;
      synchronized (this.aK)
      {
        localA = (a)this.aK.get(paramString);
        if (localA == null)
        {
          localA = new a(paramString);
          localA.a(paramP);
          localA.b(this.aJ.bindService(new Intent(paramString), localA.r(), 129));
          this.aK.put(paramString, localA);
          paramString = localA;
          boolean bool = paramString.isBound();
          return bool;
        }
        this.mHandler.removeMessages(0, localA);
        if (localA.c(paramP)) {
          throw new IllegalStateException("Trying to bind a GmsServiceConnection that was already connected before.  startServiceAction=" + paramString);
        }
      }
      localA.a(paramP);
      switch (localA.getState())
      {
      case 1: 
        paramP.onServiceConnected(localA.getComponentName(), localA.getBinder());
        paramString = localA;
        break;
      case 2: 
        paramString = new Intent(paramString);
        localA.b(this.aJ.bindService(paramString, localA.r(), 129));
        paramString = localA;
        break;
      default: 
        paramString = localA;
      }
    }
  }
  
  public void b(String paramString, p<?>.e paramP)
  {
    a localA;
    synchronized (this.aK)
    {
      localA = (a)this.aK.get(paramString);
      if (localA == null) {
        throw new IllegalStateException("Nonexistent connection status for service action: " + paramString);
      }
    }
    if (!localA.c(paramP)) {
      throw new IllegalStateException("Trying to unbind a GmsServiceConnection  that was not bound before.  startServiceAction=" + paramString);
    }
    localA.b(paramP);
    if (localA.t())
    {
      paramString = this.mHandler.obtainMessage(0, localA);
      this.mHandler.sendMessageDelayed(paramString, 5000L);
    }
  }
  
  public boolean handleMessage(Message arg1)
  {
    switch (???.what)
    {
    default: 
      return false;
    }
    a localA = (a)???.obj;
    synchronized (this.aK)
    {
      if (localA.t())
      {
        this.aJ.unbindService(localA.r());
        this.aK.remove(localA.s());
      }
      return true;
    }
  }
  
  final class a
  {
    private final String aL;
    private final a aM;
    private final HashSet<p<?>.e> aN;
    private boolean aO;
    private IBinder aP;
    private ComponentName aQ;
    private int mState;
    
    public a(String paramString)
    {
      this.aL = paramString;
      this.aM = new a();
      this.aN = new HashSet();
      this.mState = 0;
    }
    
    public void a(p<?>.e paramP)
    {
      this.aN.add(paramP);
    }
    
    public void b(p<?>.e paramP)
    {
      this.aN.remove(paramP);
    }
    
    public void b(boolean paramBoolean)
    {
      this.aO = paramBoolean;
    }
    
    public boolean c(p<?>.e paramP)
    {
      return this.aN.contains(paramP);
    }
    
    public IBinder getBinder()
    {
      return this.aP;
    }
    
    public ComponentName getComponentName()
    {
      return this.aQ;
    }
    
    public int getState()
    {
      return this.mState;
    }
    
    public boolean isBound()
    {
      return this.aO;
    }
    
    public a r()
    {
      return this.aM;
    }
    
    public String s()
    {
      return this.aL;
    }
    
    public boolean t()
    {
      return this.aN.isEmpty();
    }
    
    public class a
      implements ServiceConnection
    {
      public a() {}
      
      public void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
      {
        synchronized (q.a(q.this))
        {
          q.a.a(q.a.this, paramIBinder);
          q.a.a(q.a.this, paramComponentName);
          Iterator localIterator = q.a.a(q.a.this).iterator();
          if (localIterator.hasNext()) {
            ((p.e)localIterator.next()).onServiceConnected(paramComponentName, paramIBinder);
          }
        }
        q.a.a(q.a.this, 1);
      }
      
      public void onServiceDisconnected(ComponentName paramComponentName)
      {
        synchronized (q.a(q.this))
        {
          q.a.a(q.a.this, null);
          q.a.a(q.a.this, paramComponentName);
          Iterator localIterator = q.a.a(q.a.this).iterator();
          if (localIterator.hasNext()) {
            ((p.e)localIterator.next()).onServiceDisconnected(paramComponentName);
          }
        }
        q.a.a(q.a.this, 2);
      }
    }
  }
}
