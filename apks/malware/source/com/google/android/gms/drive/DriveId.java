package com.google.android.gms.drive;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import android.util.Base64;
import com.google.android.gms.b.xp;
import com.google.android.gms.common.internal.aq;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.drive.internal.ba;
import com.google.android.gms.drive.internal.m;

public class DriveId
  implements SafeParcelable
{
  public static final Parcelable.Creator<DriveId> CREATOR = new c();
  final int a;
  final String b;
  final long c;
  final long d;
  final int e;
  private volatile String f = null;
  private volatile String g = null;
  
  DriveId(int paramInt1, String paramString, long paramLong1, long paramLong2, int paramInt2)
  {
    this.a = paramInt1;
    this.b = paramString;
    if (!"".equals(paramString)) {}
    for (boolean bool1 = true;; bool1 = false)
    {
      aq.b(bool1);
      if (paramString == null)
      {
        bool1 = bool2;
        if (paramLong1 == -1L) {}
      }
      else
      {
        bool1 = true;
      }
      aq.b(bool1);
      this.c = paramLong1;
      this.d = paramLong2;
      this.e = paramInt2;
      return;
    }
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof DriveId)) {}
    do
    {
      do
      {
        return false;
        paramObject = (DriveId)paramObject;
        if (paramObject.d != this.d)
        {
          ba.a("DriveId", "Attempt to compare invalid DriveId detected. Has local storage been cleared?");
          return false;
        }
        if ((paramObject.c == -1L) && (this.c == -1L)) {
          return paramObject.b.equals(this.b);
        }
        if ((this.b != null) && (paramObject.b != null)) {
          break;
        }
      } while (paramObject.c != this.c);
      return true;
    } while (paramObject.c != this.c);
    if (paramObject.b.equals(this.b)) {
      return true;
    }
    ba.a("DriveId", "Unexpected unequal resourceId for same DriveId object.");
    return false;
  }
  
  public int hashCode()
  {
    if (this.c == -1L) {
      return this.b.hashCode();
    }
    return (String.valueOf(this.d) + String.valueOf(this.c)).hashCode();
  }
  
  public String toString()
  {
    m localM;
    if (this.f == null)
    {
      localM = new m();
      localM.a = this.a;
      if (this.b != null) {
        break label97;
      }
    }
    label97:
    for (String str = "";; str = this.b)
    {
      localM.b = str;
      localM.c = this.c;
      localM.d = this.d;
      localM.e = this.e;
      str = Base64.encodeToString(xp.a(localM), 10);
      this.f = ("DriveId:" + str);
      return this.f;
    }
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    c.a(this, paramParcel);
  }
}
