package com.google.android.gms.analytics;

import android.net.Uri;
import android.text.TextUtils;
import com.google.android.gms.analytics.internal.ac;
import com.google.android.gms.analytics.internal.ae;
import com.google.android.gms.analytics.internal.j;
import com.google.android.gms.analytics.internal.u;
import com.google.android.gms.b.rd;
import com.google.android.gms.b.ua;
import com.google.android.gms.common.internal.aq;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;

public final class r
  extends ac
{
  private boolean a;
  private final Map<String, String> b = new HashMap();
  private final Map<String, String> c = new HashMap();
  private final com.google.android.gms.analytics.internal.h d;
  private final t e;
  private g f;
  private com.google.android.gms.analytics.internal.s g;
  
  r(ae paramAe, String paramString)
  {
    super(paramAe);
    if (paramString != null) {
      this.b.put("&tid", paramString);
    }
    this.b.put("useSecure", "1");
    this.b.put("&a", Integer.toString(new Random().nextInt(Integer.MAX_VALUE) + 1));
    this.d = new com.google.android.gms.analytics.internal.h("tracking", (byte)0);
    this.e = new t(this, paramAe);
  }
  
  private static String a(Map.Entry<String, String> paramEntry)
  {
    String str = (String)paramEntry.getKey();
    paramEntry.getValue();
    if ((!str.startsWith("&")) || (str.length() < 2)) {}
    for (int i = 0; i == 0; i = 1) {
      return null;
    }
    return ((String)paramEntry.getKey()).substring(1);
  }
  
  private static void a(Map<String, String> paramMap1, Map<String, String> paramMap2)
  {
    aq.a(paramMap2);
    if (paramMap1 == null) {}
    for (;;)
    {
      return;
      paramMap1 = paramMap1.entrySet().iterator();
      while (paramMap1.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramMap1.next();
        String str = a(localEntry);
        if (str != null) {
          paramMap2.put(str, localEntry.getValue());
        }
      }
    }
  }
  
  private static void b(Map<String, String> paramMap1, Map<String, String> paramMap2)
  {
    aq.a(paramMap2);
    if (paramMap1 == null) {}
    for (;;)
    {
      return;
      paramMap1 = paramMap1.entrySet().iterator();
      while (paramMap1.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramMap1.next();
        String str = a(localEntry);
        if ((str != null) && (!paramMap2.containsKey(str))) {
          paramMap2.put(str, localEntry.getValue());
        }
      }
    }
  }
  
  protected final void a()
  {
    this.e.D();
    String str = u().c();
    if (str != null) {
      a("&an", str);
    }
    str = u().b();
    if (str != null) {
      a("&av", str);
    }
  }
  
  public final void a(Uri paramUri)
  {
    if ((paramUri == null) || (paramUri.isOpaque())) {}
    do
    {
      do
      {
        return;
        paramUri = paramUri.getQueryParameter("referrer");
      } while (TextUtils.isEmpty(paramUri));
      paramUri = Uri.parse("http://hostname/?" + paramUri);
      String str = paramUri.getQueryParameter("utm_id");
      if (str != null) {
        this.c.put("&ci", str);
      }
      str = paramUri.getQueryParameter("anid");
      if (str != null) {
        this.c.put("&anid", str);
      }
      str = paramUri.getQueryParameter("utm_campaign");
      if (str != null) {
        this.c.put("&cn", str);
      }
      str = paramUri.getQueryParameter("utm_content");
      if (str != null) {
        this.c.put("&cc", str);
      }
      str = paramUri.getQueryParameter("utm_medium");
      if (str != null) {
        this.c.put("&cm", str);
      }
      str = paramUri.getQueryParameter("utm_source");
      if (str != null) {
        this.c.put("&cs", str);
      }
      str = paramUri.getQueryParameter("utm_term");
      if (str != null) {
        this.c.put("&ck", str);
      }
      str = paramUri.getQueryParameter("dclid");
      if (str != null) {
        this.c.put("&dclid", str);
      }
      str = paramUri.getQueryParameter("gclid");
      if (str != null) {
        this.c.put("&gclid", str);
      }
      paramUri = paramUri.getQueryParameter("aclid");
    } while (paramUri == null);
    this.c.put("&aclid", paramUri);
  }
  
  final void a(com.google.android.gms.analytics.internal.s paramS)
  {
    int j = 1;
    b("Loading Tracker config values");
    this.g = paramS;
    int i;
    label67:
    label110:
    label163:
    boolean bool;
    if (this.g.a != null)
    {
      i = 1;
      if (i != 0)
      {
        paramS = this.g.a;
        a("&tid", paramS);
        a("trackingId loaded", paramS);
      }
      if (this.g.b < 0.0D) {
        break label361;
      }
      i = 1;
      if (i != 0)
      {
        paramS = Double.toString(this.g.b);
        a("&sf", paramS);
        a("Sample frequency loaded", paramS);
      }
      if (this.g.c < 0) {
        break label366;
      }
      i = 1;
      if (i != 0)
      {
        i = this.g.c;
        long l = i;
        this.e.a(l * 1000L);
        a("Session timeout loaded", Integer.valueOf(i));
      }
      if (this.g.d == -1) {
        break label371;
      }
      i = 1;
      if (i != 0)
      {
        if (this.g.d != 1) {
          break label376;
        }
        bool = true;
        label181:
        this.e.a(bool);
        a("Auto activity tracking loaded", Boolean.valueOf(bool));
      }
      if (this.g.e == -1) {
        break label382;
      }
      i = 1;
      label215:
      if (i != 0)
      {
        if (this.g.e != 1) {
          break label387;
        }
        bool = true;
        label233:
        if (bool) {
          a("&aip", "1");
        }
        a("Anonymize ip loaded", Boolean.valueOf(bool));
      }
      if (this.g.f != 1) {
        break label393;
      }
      i = 1;
    }
    for (;;)
    {
      try
      {
        label272:
        if (this.f == null) {
          break label398;
        }
        if (j == i) {
          return;
        }
        if (i != 0)
        {
          paramS = n();
          this.f = new g(this, Thread.getDefaultUncaughtExceptionHandler(), paramS);
          Thread.setDefaultUncaughtExceptionHandler(this.f);
          b("Uncaught exceptions will be reported to Google Analytics");
          return;
        }
      }
      finally {}
      Thread.setDefaultUncaughtExceptionHandler(this.f.a());
      b("Uncaught exceptions will not be reported to Google Analytics");
      continue;
      i = 0;
      break;
      label361:
      i = 0;
      break label67;
      label366:
      i = 0;
      break label110;
      label371:
      i = 0;
      break label163;
      label376:
      bool = false;
      break label181;
      label382:
      i = 0;
      break label215;
      label387:
      bool = false;
      break label233;
      label393:
      i = 0;
      break label272;
      label398:
      j = 0;
    }
  }
  
  public final void a(String paramString)
  {
    a("&cd", paramString);
  }
  
  public final void a(String paramString1, String paramString2)
  {
    aq.a(paramString1, "Key should be non-null");
    if (TextUtils.isEmpty(paramString1)) {
      return;
    }
    this.b.put(paramString1, paramString2);
  }
  
  public final void a(Map<String, String> paramMap)
  {
    long l = m().a();
    if (r().g())
    {
      c("AppOptOut is set to true. Not sending Google Analytics hit");
      return;
    }
    boolean bool1 = r().d();
    HashMap localHashMap = new HashMap();
    a(this.b, localHashMap);
    a(paramMap, localHashMap);
    boolean bool2 = com.google.android.gms.analytics.internal.t.c((String)this.b.get("useSecure"));
    b(this.c, localHashMap);
    this.c.clear();
    paramMap = (String)localHashMap.get("t");
    if (TextUtils.isEmpty(paramMap))
    {
      o().a(localHashMap, "Missing hit type parameter");
      return;
    }
    String str = (String)localHashMap.get("tid");
    if (TextUtils.isEmpty(str))
    {
      o().a(localHashMap, "Missing tracking id parameter");
      return;
    }
    boolean bool3 = this.a;
    try
    {
      if (("screenview".equalsIgnoreCase(paramMap)) || ("pageview".equalsIgnoreCase(paramMap)) || ("appview".equalsIgnoreCase(paramMap)) || (TextUtils.isEmpty(paramMap)))
      {
        int j = Integer.parseInt((String)this.b.get("&a")) + 1;
        int i = j;
        if (j >= Integer.MAX_VALUE) {
          i = 1;
        }
        this.b.put("&a", Integer.toString(i));
      }
      q().a(new s(this, localHashMap, bool3, paramMap, l, bool1, bool2, str));
      return;
    }
    finally {}
  }
  
  public final void a(boolean paramBoolean)
  {
    this.a = paramBoolean;
  }
}
