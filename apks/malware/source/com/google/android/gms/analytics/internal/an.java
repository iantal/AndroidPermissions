package com.google.android.gms.analytics.internal;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.net.Uri.Builder;
import android.text.TextUtils;
import com.google.android.gms.b.rd;
import com.google.android.gms.common.internal.aq;
import com.google.android.gms.common.internal.k;
import java.io.Closeable;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;

final class an
  extends ac
  implements Closeable
{
  private static final String a = String.format("CREATE TABLE IF NOT EXISTS %s ( '%s' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, '%s' INTEGER NOT NULL, '%s' TEXT NOT NULL, '%s' TEXT NOT NULL, '%s' INTEGER);", new Object[] { "hits2", "hit_id", "hit_time", "hit_url", "hit_string", "hit_app_id" });
  private static final String b = String.format("SELECT MAX(%s) FROM %s WHERE 1;", new Object[] { "hit_time", "hits2" });
  private final ao c;
  private final p d = new p(m());
  private final p e = new p(m());
  
  an(ae paramAe)
  {
    super(paramAe);
    String str = G();
    this.c = new ao(this, paramAe.a(), str);
  }
  
  private long E()
  {
    l();
    C();
    return a("SELECT COUNT(*) FROM hits2");
  }
  
  private SQLiteDatabase F()
  {
    try
    {
      SQLiteDatabase localSQLiteDatabase = this.c.getWritableDatabase();
      return localSQLiteDatabase;
    }
    catch (SQLiteException localSQLiteException)
    {
      d("Error opening database", localSQLiteException);
      throw localSQLiteException;
    }
  }
  
  private String G()
  {
    p();
    if (!k.a)
    {
      p();
      return "google_analytics_v4.db";
    }
    if (p().a())
    {
      p();
      return "google_analytics_v4.db";
    }
    p();
    return "google_analytics2_v4.db";
  }
  
  private long a(String paramString)
  {
    Object localObject2 = null;
    Object localObject1 = null;
    Object localObject3 = F();
    try
    {
      localObject3 = ((SQLiteDatabase)localObject3).rawQuery(paramString, null);
      localObject1 = localObject3;
      localObject2 = localObject3;
      if (((Cursor)localObject3).moveToFirst())
      {
        localObject1 = localObject3;
        localObject2 = localObject3;
        long l = ((Cursor)localObject3).getLong(0);
        if (localObject3 != null) {
          ((Cursor)localObject3).close();
        }
        return l;
      }
      localObject1 = localObject3;
      localObject2 = localObject3;
      throw new SQLiteException("Database returned empty set");
    }
    catch (SQLiteException localSQLiteException)
    {
      localObject2 = localObject1;
      d("Database error", paramString, localSQLiteException);
      localObject2 = localObject1;
      throw localSQLiteException;
    }
    finally
    {
      if (localObject2 != null) {
        localObject2.close();
      }
    }
  }
  
  /* Error */
  private long a(String paramString, String[] paramArrayOfString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 123	com/google/android/gms/analytics/internal/an:F	()Landroid/database/sqlite/SQLiteDatabase;
    //   4: astore 7
    //   6: aconst_null
    //   7: astore 5
    //   9: aconst_null
    //   10: astore 6
    //   12: aload 7
    //   14: aload_1
    //   15: aload_2
    //   16: invokevirtual 129	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   19: astore_2
    //   20: aload_2
    //   21: invokeinterface 134 1 0
    //   26: ifeq +23 -> 49
    //   29: aload_2
    //   30: iconst_0
    //   31: invokeinterface 138 2 0
    //   36: lstore_3
    //   37: aload_2
    //   38: ifnull +9 -> 47
    //   41: aload_2
    //   42: invokeinterface 141 1 0
    //   47: lload_3
    //   48: lreturn
    //   49: aload_2
    //   50: ifnull +9 -> 59
    //   53: aload_2
    //   54: invokeinterface 141 1 0
    //   59: lconst_0
    //   60: lreturn
    //   61: astore 5
    //   63: aload 6
    //   65: astore_2
    //   66: aload 5
    //   68: astore 6
    //   70: aload_2
    //   71: astore 5
    //   73: aload_0
    //   74: ldc -108
    //   76: aload_1
    //   77: aload 6
    //   79: invokevirtual 151	com/google/android/gms/analytics/internal/an:d	(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
    //   82: aload_2
    //   83: astore 5
    //   85: aload 6
    //   87: athrow
    //   88: astore_1
    //   89: aload 5
    //   91: ifnull +10 -> 101
    //   94: aload 5
    //   96: invokeinterface 141 1 0
    //   101: aload_1
    //   102: athrow
    //   103: astore_1
    //   104: aload_2
    //   105: astore 5
    //   107: goto -18 -> 89
    //   110: astore 6
    //   112: goto -42 -> 70
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	115	0	this	an
    //   0	115	1	paramString	String
    //   0	115	2	paramArrayOfString	String[]
    //   36	12	3	l	long
    //   7	1	5	localObject	Object
    //   61	6	5	localSQLiteException1	SQLiteException
    //   71	35	5	arrayOfString	String[]
    //   10	76	6	localSQLiteException2	SQLiteException
    //   110	1	6	localSQLiteException3	SQLiteException
    //   4	9	7	localSQLiteDatabase	SQLiteDatabase
    // Exception table:
    //   from	to	target	type
    //   12	20	61	android/database/sqlite/SQLiteException
    //   12	20	88	finally
    //   73	82	88	finally
    //   85	88	88	finally
    //   20	37	103	finally
    //   20	37	110	android/database/sqlite/SQLiteException
  }
  
  /* Error */
  private List<Long> c(long paramLong)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aload_0
    //   4: invokevirtual 83	com/google/android/gms/analytics/internal/an:l	()V
    //   7: aload_0
    //   8: invokevirtual 86	com/google/android/gms/analytics/internal/an:C	()V
    //   11: lload_1
    //   12: lconst_0
    //   13: lcmp
    //   14: ifgt +7 -> 21
    //   17: invokestatic 161	java/util/Collections:emptyList	()Ljava/util/List;
    //   20: areturn
    //   21: aload_0
    //   22: invokespecial 123	com/google/android/gms/analytics/internal/an:F	()Landroid/database/sqlite/SQLiteDatabase;
    //   25: astore 4
    //   27: new 163	java/util/ArrayList
    //   30: dup
    //   31: invokespecial 165	java/util/ArrayList:<init>	()V
    //   34: astore 7
    //   36: ldc -89
    //   38: iconst_1
    //   39: anewarray 20	java/lang/Object
    //   42: dup
    //   43: iconst_0
    //   44: ldc 24
    //   46: aastore
    //   47: invokestatic 38	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   50: astore 6
    //   52: lload_1
    //   53: invokestatic 173	java/lang/Long:toString	(J)Ljava/lang/String;
    //   56: astore 8
    //   58: aload 4
    //   60: ldc 22
    //   62: iconst_1
    //   63: anewarray 34	java/lang/String
    //   66: dup
    //   67: iconst_0
    //   68: ldc 24
    //   70: aastore
    //   71: aconst_null
    //   72: aconst_null
    //   73: aconst_null
    //   74: aconst_null
    //   75: aload 6
    //   77: aload 8
    //   79: invokevirtual 177	android/database/sqlite/SQLiteDatabase:query	(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
    //   82: astore 4
    //   84: aload 4
    //   86: astore 5
    //   88: aload 5
    //   90: astore 4
    //   92: aload 5
    //   94: invokeinterface 134 1 0
    //   99: ifeq +42 -> 141
    //   102: aload 5
    //   104: astore 4
    //   106: aload 7
    //   108: aload 5
    //   110: iconst_0
    //   111: invokeinterface 138 2 0
    //   116: invokestatic 181	java/lang/Long:valueOf	(J)Ljava/lang/Long;
    //   119: invokeinterface 187 2 0
    //   124: pop
    //   125: aload 5
    //   127: astore 4
    //   129: aload 5
    //   131: invokeinterface 190 1 0
    //   136: istore_3
    //   137: iload_3
    //   138: ifne -36 -> 102
    //   141: aload 5
    //   143: ifnull +10 -> 153
    //   146: aload 5
    //   148: invokeinterface 141 1 0
    //   153: aload 7
    //   155: areturn
    //   156: astore 6
    //   158: aconst_null
    //   159: astore 5
    //   161: aload 5
    //   163: astore 4
    //   165: aload_0
    //   166: ldc -64
    //   168: aload 6
    //   170: invokevirtual 103	com/google/android/gms/analytics/internal/an:d	(Ljava/lang/String;Ljava/lang/Object;)V
    //   173: aload 5
    //   175: ifnull -22 -> 153
    //   178: aload 5
    //   180: invokeinterface 141 1 0
    //   185: goto -32 -> 153
    //   188: astore 4
    //   190: aload 5
    //   192: ifnull +10 -> 202
    //   195: aload 5
    //   197: invokeinterface 141 1 0
    //   202: aload 4
    //   204: athrow
    //   205: astore 6
    //   207: aload 4
    //   209: astore 5
    //   211: aload 6
    //   213: astore 4
    //   215: goto -25 -> 190
    //   218: astore 6
    //   220: goto -59 -> 161
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	223	0	this	an
    //   0	223	1	paramLong	long
    //   136	2	3	bool	boolean
    //   25	139	4	localObject1	Object
    //   188	20	4	localObject2	Object
    //   213	1	4	localObject3	Object
    //   1	209	5	localObject4	Object
    //   50	26	6	str1	String
    //   156	13	6	localSQLiteException1	SQLiteException
    //   205	7	6	localObject5	Object
    //   218	1	6	localSQLiteException2	SQLiteException
    //   34	120	7	localArrayList	ArrayList
    //   56	22	8	str2	String
    // Exception table:
    //   from	to	target	type
    //   36	84	156	android/database/sqlite/SQLiteException
    //   36	84	188	finally
    //   92	102	205	finally
    //   106	125	205	finally
    //   129	137	205	finally
    //   165	173	205	finally
    //   92	102	218	android/database/sqlite/SQLiteException
    //   106	125	218	android/database/sqlite/SQLiteException
    //   129	137	218	android/database/sqlite/SQLiteException
  }
  
  private Map<String, String> g(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return new HashMap(0);
    }
    for (;;)
    {
      try
      {
        if (paramString.startsWith("?"))
        {
          Object localObject = URLEncodedUtils.parse(new URI(paramString), "UTF-8");
          paramString = new HashMap(((List)localObject).size());
          localObject = ((List)localObject).iterator();
          if (!((Iterator)localObject).hasNext()) {
            break;
          }
          NameValuePair localNameValuePair = (NameValuePair)((Iterator)localObject).next();
          paramString.put(localNameValuePair.getName(), localNameValuePair.getValue());
          continue;
        }
        paramString = "?" + paramString;
      }
      catch (URISyntaxException paramString)
      {
        e("Error parsing hit parameters", paramString);
        return new HashMap(0);
      }
    }
    return paramString;
  }
  
  private Map<String, String> h(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return new HashMap(0);
    }
    try
    {
      Object localObject = URLEncodedUtils.parse(new URI("?" + paramString), "UTF-8");
      paramString = new HashMap(((List)localObject).size());
      localObject = ((List)localObject).iterator();
      while (((Iterator)localObject).hasNext())
      {
        NameValuePair localNameValuePair = (NameValuePair)((Iterator)localObject).next();
        paramString.put(localNameValuePair.getName(), localNameValuePair.getValue());
      }
      return paramString;
    }
    catch (URISyntaxException paramString)
    {
      e("Error parsing property parameters", paramString);
      return new HashMap(0);
    }
  }
  
  public final long a(long paramLong, String paramString1, String paramString2)
  {
    aq.a(paramString1);
    aq.a(paramString2);
    C();
    l();
    return a("SELECT hits_count FROM properties WHERE app_uid=? AND cid=? AND tid=?", new String[] { String.valueOf(paramLong), paramString1, paramString2 });
  }
  
  public final List<d> a(long paramLong)
  {
    boolean bool = true;
    Cursor localCursor = null;
    if (paramLong >= 0L) {}
    for (;;)
    {
      aq.b(bool);
      l();
      C();
      Object localObject5 = F();
      localObject1 = localCursor;
      for (;;)
      {
        try
        {
          str1 = String.format("%s ASC", new Object[] { "hit_id" });
          localObject1 = localCursor;
          str2 = Long.toString(paramLong);
          localObject1 = localCursor;
          localCursor = ((SQLiteDatabase)localObject5).query("hits2", new String[] { "hit_id", "hit_time", "hit_string", "hit_url", "hit_app_id" }, null, null, null, null, str1, str2);
          localObject1 = localCursor;
        }
        catch (SQLiteException localSQLiteException1)
        {
          String str1;
          String str2;
          localObject1 = null;
          try
          {
            e("Error loading hits from the database", localSQLiteException1);
            throw localSQLiteException1;
          }
          finally
          {
            if (localObject1 != null) {
              ((Cursor)localObject1).close();
            }
          }
        }
        finally
        {
          continue;
        }
        try
        {
          localObject5 = new ArrayList();
          localObject1 = localCursor;
          if (localCursor.moveToFirst())
          {
            localObject1 = localCursor;
            paramLong = localCursor.getLong(0);
            localObject1 = localCursor;
            long l = localCursor.getLong(1);
            localObject1 = localCursor;
            str1 = localCursor.getString(2);
            localObject1 = localCursor;
            str2 = localCursor.getString(3);
            localObject1 = localCursor;
            int i = localCursor.getInt(4);
            localObject1 = localCursor;
            ((List)localObject5).add(new d(this, g(str1), l, t.e(str2), paramLong, i));
            localObject1 = localCursor;
            bool = localCursor.moveToNext();
            if (bool) {
              continue;
            }
          }
          if (localCursor != null) {
            localCursor.close();
          }
          return localObject5;
        }
        catch (SQLiteException localSQLiteException2)
        {
          localObject1 = localObject3;
          Object localObject4 = localSQLiteException2;
        }
      }
      bool = false;
    }
  }
  
  protected final void a() {}
  
  public final void a(long paramLong, String paramString)
  {
    aq.a(paramString);
    C();
    l();
    int i = F().delete("properties", "app_uid=? AND cid<>?", new String[] { String.valueOf(paramLong), paramString });
    if (i > 0) {
      a("Deleted property records", Integer.valueOf(i));
    }
  }
  
  public final void a(ah paramAh)
  {
    aq.a(paramAh);
    C();
    l();
    SQLiteDatabase localSQLiteDatabase = F();
    Object localObject2 = paramAh.f();
    aq.a(localObject2);
    Object localObject1 = new Uri.Builder();
    localObject2 = ((Map)localObject2).entrySet().iterator();
    while (((Iterator)localObject2).hasNext())
    {
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject2).next();
      ((Uri.Builder)localObject1).appendQueryParameter((String)localEntry.getKey(), (String)localEntry.getValue());
    }
    localObject2 = ((Uri.Builder)localObject1).build().getEncodedQuery();
    localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = "";
    }
    localObject2 = new ContentValues();
    ((ContentValues)localObject2).put("app_uid", Long.valueOf(paramAh.a()));
    ((ContentValues)localObject2).put("cid", paramAh.b());
    ((ContentValues)localObject2).put("tid", paramAh.c());
    if (paramAh.d()) {}
    for (int i = 1;; i = 0)
    {
      ((ContentValues)localObject2).put("adid", Integer.valueOf(i));
      ((ContentValues)localObject2).put("hits_count", Long.valueOf(paramAh.e()));
      ((ContentValues)localObject2).put("params", (String)localObject1);
      try
      {
        if (localSQLiteDatabase.insertWithOnConflict("properties", null, (ContentValues)localObject2, 5) == -1L) {
          f("Failed to insert/update a property (got -1)");
        }
        return;
      }
      catch (SQLiteException paramAh)
      {
        e("Error storing a property", paramAh);
      }
    }
  }
  
  public final void a(d paramD)
  {
    aq.a(paramD);
    l();
    C();
    aq.a(paramD);
    Object localObject1 = new Uri.Builder();
    Object localObject2 = paramD.b().entrySet().iterator();
    while (((Iterator)localObject2).hasNext())
    {
      localObject3 = (Map.Entry)((Iterator)localObject2).next();
      String str = (String)((Map.Entry)localObject3).getKey();
      if ((!"ht".equals(str)) && (!"qt".equals(str)) && (!"AppUID".equals(str))) {
        ((Uri.Builder)localObject1).appendQueryParameter(str, (String)((Map.Entry)localObject3).getValue());
      }
    }
    localObject1 = ((Uri.Builder)localObject1).build().getEncodedQuery();
    if (localObject1 == null) {
      localObject1 = "";
    }
    while (((String)localObject1).length() > 8192)
    {
      o().a(paramD, "Hit length exceeds the maximum allowed size");
      return;
    }
    p();
    int i = ((Integer)bl.f.a()).intValue();
    long l = E();
    if (l > i - 1)
    {
      localObject2 = c(l - i + 1L);
      d("Store full, deleting hits to make room, count", Integer.valueOf(((List)localObject2).size()));
      a((List)localObject2);
    }
    localObject2 = F();
    Object localObject3 = new ContentValues();
    ((ContentValues)localObject3).put("hit_string", (String)localObject1);
    ((ContentValues)localObject3).put("hit_time", Long.valueOf(paramD.d()));
    ((ContentValues)localObject3).put("hit_app_id", Integer.valueOf(paramD.a()));
    if (paramD.e()) {
      p();
    }
    for (localObject1 = bd.h();; localObject1 = bd.i())
    {
      ((ContentValues)localObject3).put("hit_url", (String)localObject1);
      try
      {
        l = ((SQLiteDatabase)localObject2).insert("hits2", null, (ContentValues)localObject3);
        if (l != -1L) {
          break;
        }
        f("Failed to insert a hit (got -1)");
        return;
      }
      catch (SQLiteException paramD)
      {
        e("Error storing a hit", paramD);
        return;
      }
      p();
    }
    b("Hit saved to database. db-id, hit", Long.valueOf(l), paramD);
  }
  
  public final void a(List<Long> paramList)
  {
    aq.a(paramList);
    l();
    C();
    if (paramList.isEmpty()) {}
    for (;;)
    {
      return;
      Object localObject1 = new StringBuilder("hit_id");
      ((StringBuilder)localObject1).append(" in (");
      int i = 0;
      Object localObject2;
      while (i < paramList.size())
      {
        localObject2 = (Long)paramList.get(i);
        if ((localObject2 == null) || (((Long)localObject2).longValue() == 0L)) {
          throw new SQLiteException("Invalid hit id");
        }
        if (i > 0) {
          ((StringBuilder)localObject1).append(",");
        }
        ((StringBuilder)localObject1).append(localObject2);
        i += 1;
      }
      ((StringBuilder)localObject1).append(")");
      localObject1 = ((StringBuilder)localObject1).toString();
      try
      {
        localObject2 = F();
        a("Deleting dispatched hits. count", Integer.valueOf(paramList.size()));
        i = ((SQLiteDatabase)localObject2).delete("hits2", (String)localObject1, null);
        if (i == paramList.size()) {
          continue;
        }
        b("Deleted fewer hits then expected", Integer.valueOf(paramList.size()), Integer.valueOf(i), localObject1);
        return;
      }
      catch (SQLiteException paramList)
      {
        e("Error deleting hits", paramList);
        throw paramList;
      }
    }
  }
  
  public final void b()
  {
    C();
    F().beginTransaction();
  }
  
  public final void b(long paramLong)
  {
    l();
    C();
    ArrayList localArrayList = new ArrayList(1);
    localArrayList.add(Long.valueOf(paramLong));
    a("Deleting hit, id", Long.valueOf(paramLong));
    a(localArrayList);
  }
  
  public final void c()
  {
    C();
    F().setTransactionSuccessful();
  }
  
  public final void close()
  {
    try
    {
      this.c.close();
      return;
    }
    catch (SQLiteException localSQLiteException)
    {
      e("Sql error closing database", localSQLiteException);
      return;
    }
    catch (IllegalStateException localIllegalStateException)
    {
      e("Error closing database", localIllegalStateException);
    }
  }
  
  public final void d()
  {
    C();
    F().endTransaction();
  }
  
  final boolean e()
  {
    return E() == 0L;
  }
  
  public final int f()
  {
    l();
    C();
    if (!this.d.a(86400000L)) {
      return 0;
    }
    this.d.a();
    b("Deleting stale hits (if any)");
    int i = F().delete("hits2", "hit_time < ?", new String[] { Long.toString(m().a() - 2592000000L) });
    a("Deleted stale hits, count", Integer.valueOf(i));
    return i;
  }
  
  public final long g()
  {
    l();
    C();
    return a(b, null);
  }
  
  /* Error */
  public final List<ah> h()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: aload_0
    //   4: invokevirtual 86	com/google/android/gms/analytics/internal/an:C	()V
    //   7: aload_0
    //   8: invokevirtual 83	com/google/android/gms/analytics/internal/an:l	()V
    //   11: aload_0
    //   12: invokespecial 123	com/google/android/gms/analytics/internal/an:F	()Landroid/database/sqlite/SQLiteDatabase;
    //   15: astore 5
    //   17: aload_0
    //   18: invokevirtual 107	com/google/android/gms/analytics/internal/an:p	()Lcom/google/android/gms/analytics/internal/bd;
    //   21: pop
    //   22: getstatic 559	com/google/android/gms/analytics/internal/bl:h	Lcom/google/android/gms/analytics/internal/bm;
    //   25: invokevirtual 453	com/google/android/gms/analytics/internal/bm:a	()Ljava/lang/Object;
    //   28: checkcast 325	java/lang/Integer
    //   31: invokevirtual 456	java/lang/Integer:intValue	()I
    //   34: istore_1
    //   35: aload 5
    //   37: ldc_w 315
    //   40: iconst_5
    //   41: anewarray 34	java/lang/String
    //   44: dup
    //   45: iconst_0
    //   46: ldc_w 384
    //   49: aastore
    //   50: dup
    //   51: iconst_1
    //   52: ldc_w 391
    //   55: aastore
    //   56: dup
    //   57: iconst_2
    //   58: ldc_w 397
    //   61: aastore
    //   62: dup
    //   63: iconst_3
    //   64: ldc_w 402
    //   67: aastore
    //   68: dup
    //   69: iconst_4
    //   70: ldc_w 406
    //   73: aastore
    //   74: ldc_w 561
    //   77: iconst_1
    //   78: anewarray 34	java/lang/String
    //   81: dup
    //   82: iconst_0
    //   83: lconst_0
    //   84: invokestatic 285	java/lang/String:valueOf	(J)Ljava/lang/String;
    //   87: aastore
    //   88: aconst_null
    //   89: aconst_null
    //   90: aconst_null
    //   91: iload_1
    //   92: invokestatic 563	java/lang/String:valueOf	(I)Ljava/lang/String;
    //   95: invokevirtual 177	android/database/sqlite/SQLiteDatabase:query	(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
    //   98: astore 5
    //   100: new 163	java/util/ArrayList
    //   103: dup
    //   104: invokespecial 165	java/util/ArrayList:<init>	()V
    //   107: astore 6
    //   109: aload 5
    //   111: invokeinterface 134 1 0
    //   116: ifeq +97 -> 213
    //   119: aload 5
    //   121: iconst_0
    //   122: invokeinterface 294 2 0
    //   127: astore 7
    //   129: aload 5
    //   131: iconst_1
    //   132: invokeinterface 294 2 0
    //   137: astore 8
    //   139: aload 5
    //   141: iconst_2
    //   142: invokeinterface 298 2 0
    //   147: ifeq +99 -> 246
    //   150: iconst_1
    //   151: istore_2
    //   152: aload 5
    //   154: iconst_3
    //   155: invokeinterface 298 2 0
    //   160: i2l
    //   161: lstore_3
    //   162: aload_0
    //   163: aload 5
    //   165: iconst_4
    //   166: invokeinterface 294 2 0
    //   171: invokespecial 565	com/google/android/gms/analytics/internal/an:h	(Ljava/lang/String;)Ljava/util/Map;
    //   174: astore 9
    //   176: aload 7
    //   178: invokestatic 204	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   181: ifne +11 -> 192
    //   184: aload 8
    //   186: invokestatic 204	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   189: ifeq +62 -> 251
    //   192: aload_0
    //   193: ldc_w 567
    //   196: aload 7
    //   198: aload 8
    //   200: invokevirtual 569	com/google/android/gms/analytics/internal/an:c	(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
    //   203: aload 5
    //   205: invokeinterface 190 1 0
    //   210: ifne -91 -> 119
    //   213: aload 6
    //   215: invokeinterface 230 1 0
    //   220: iload_1
    //   221: if_icmplt +10 -> 231
    //   224: aload_0
    //   225: ldc_w 571
    //   228: invokevirtual 573	com/google/android/gms/analytics/internal/an:e	(Ljava/lang/String;)V
    //   231: aload 5
    //   233: ifnull +10 -> 243
    //   236: aload 5
    //   238: invokeinterface 141 1 0
    //   243: aload 6
    //   245: areturn
    //   246: iconst_0
    //   247: istore_2
    //   248: goto -96 -> 152
    //   251: aload 6
    //   253: new 336	com/google/android/gms/analytics/internal/ah
    //   256: dup
    //   257: aload 7
    //   259: aload 8
    //   261: iload_2
    //   262: lload_3
    //   263: aload 9
    //   265: invokespecial 576	com/google/android/gms/analytics/internal/ah:<init>	(Ljava/lang/String;Ljava/lang/String;ZJLjava/util/Map;)V
    //   268: invokeinterface 187 2 0
    //   273: pop
    //   274: goto -71 -> 203
    //   277: astore 6
    //   279: aload_0
    //   280: ldc_w 311
    //   283: aload 6
    //   285: invokevirtual 261	com/google/android/gms/analytics/internal/an:e	(Ljava/lang/String;Ljava/lang/Object;)V
    //   288: aload 6
    //   290: athrow
    //   291: astore 7
    //   293: aload 5
    //   295: astore 6
    //   297: aload 7
    //   299: astore 5
    //   301: aload 6
    //   303: ifnull +10 -> 313
    //   306: aload 6
    //   308: invokeinterface 141 1 0
    //   313: aload 5
    //   315: athrow
    //   316: astore 5
    //   318: goto -17 -> 301
    //   321: astore 7
    //   323: aload 5
    //   325: astore 6
    //   327: aload 7
    //   329: astore 5
    //   331: goto -30 -> 301
    //   334: astore 6
    //   336: aconst_null
    //   337: astore 5
    //   339: goto -60 -> 279
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	342	0	this	an
    //   34	188	1	i	int
    //   151	111	2	bool	boolean
    //   161	102	3	l	long
    //   15	299	5	localObject1	Object
    //   316	8	5	localObject2	Object
    //   329	9	5	localObject3	Object
    //   1	251	6	localArrayList	ArrayList
    //   277	12	6	localSQLiteException1	SQLiteException
    //   295	31	6	localObject4	Object
    //   334	1	6	localSQLiteException2	SQLiteException
    //   127	131	7	str1	String
    //   291	7	7	localObject5	Object
    //   321	7	7	localObject6	Object
    //   137	123	8	str2	String
    //   174	90	9	localMap	Map
    // Exception table:
    //   from	to	target	type
    //   100	119	277	android/database/sqlite/SQLiteException
    //   119	150	277	android/database/sqlite/SQLiteException
    //   152	192	277	android/database/sqlite/SQLiteException
    //   192	203	277	android/database/sqlite/SQLiteException
    //   203	213	277	android/database/sqlite/SQLiteException
    //   213	231	277	android/database/sqlite/SQLiteException
    //   251	274	277	android/database/sqlite/SQLiteException
    //   279	291	291	finally
    //   17	100	316	finally
    //   100	119	321	finally
    //   119	150	321	finally
    //   152	192	321	finally
    //   192	203	321	finally
    //   203	213	321	finally
    //   213	231	321	finally
    //   251	274	321	finally
    //   17	100	334	android/database/sqlite/SQLiteException
  }
}
