package com.google.android.gms.analytics;

import android.text.TextUtils;
import com.google.android.gms.analytics.a.a;
import com.google.android.gms.analytics.a.b;
import com.google.android.gms.analytics.a.c;
import com.google.android.gms.analytics.internal.i;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class n<T extends n>
{
  b a;
  Map<String, List<a>> b = new HashMap();
  List<c> c = new ArrayList();
  List<a> d = new ArrayList();
  private Map<String, String> e = new HashMap();
  
  protected n() {}
  
  public final T a(a paramA)
  {
    if (paramA == null)
    {
      i.c("product should be non-null");
      return this;
    }
    this.d.add(paramA);
    return this;
  }
  
  public final T a(a paramA, String paramString)
  {
    if (paramA == null)
    {
      i.c("product should be non-null");
      return this;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (!this.b.containsKey(str)) {
      this.b.put(str, new ArrayList());
    }
    ((List)this.b.get(str)).add(paramA);
    return this;
  }
  
  public final T a(b paramB)
  {
    this.a = paramB;
    return this;
  }
  
  public final T a(c paramC)
  {
    if (paramC == null)
    {
      i.c("promotion should be non-null");
      return this;
    }
    this.c.add(paramC);
    return this;
  }
  
  public final T a(String paramString1, String paramString2)
  {
    if (paramString1 != null)
    {
      this.e.put(paramString1, paramString2);
      return this;
    }
    i.c(" HitBuilder.set() called with a null paramName.");
    return this;
  }
  
  public final T a(Map<String, String> paramMap)
  {
    if (paramMap == null) {
      return this;
    }
    this.e.putAll(new HashMap(paramMap));
    return this;
  }
  
  public Map<String, String> a()
  {
    HashMap localHashMap = new HashMap(this.e);
    if (this.a != null) {
      localHashMap.putAll(this.a.a());
    }
    Iterator localIterator = this.c.iterator();
    int i = 1;
    while (localIterator.hasNext())
    {
      localHashMap.putAll(((c)localIterator.next()).e(w.e(i)));
      i += 1;
    }
    localIterator = this.d.iterator();
    i = 1;
    while (localIterator.hasNext())
    {
      localHashMap.putAll(((a)localIterator.next()).g(w.c(i)));
      i += 1;
    }
    localIterator = this.b.entrySet().iterator();
    i = 1;
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      Object localObject = (List)localEntry.getValue();
      String str = w.h(i);
      localObject = ((List)localObject).iterator();
      int j = 1;
      while (((Iterator)localObject).hasNext())
      {
        localHashMap.putAll(((a)((Iterator)localObject).next()).g(str + w.g(j)));
        j += 1;
      }
      if (!TextUtils.isEmpty((CharSequence)localEntry.getKey())) {
        localHashMap.put(str + "nm", localEntry.getKey());
      }
      i += 1;
    }
    return localHashMap;
  }
}
