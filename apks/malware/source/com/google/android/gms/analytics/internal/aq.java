package com.google.android.gms.analytics.internal;

import android.content.Context;
import android.database.sqlite.SQLiteException;
import android.text.TextUtils;
import android.util.Pair;
import com.google.android.gms.analytics.AnalyticsReceiver;
import com.google.android.gms.analytics.AnalyticsService;
import com.google.android.gms.analytics.CampaignTrackingReceiver;
import com.google.android.gms.analytics.CampaignTrackingService;
import com.google.android.gms.b.px;
import com.google.android.gms.b.py;
import com.google.android.gms.b.rd;
import com.google.android.gms.b.tx;
import com.google.android.gms.b.ua;
import com.google.android.gms.b.uj;
import com.google.android.gms.b.uk;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

final class aq
  extends ac
{
  private boolean a;
  private final an b;
  private final l c;
  private final k d;
  private final ai e;
  private long f;
  private final bf g;
  private final bf h;
  private final p i;
  private long j;
  private boolean k;
  
  protected aq(ae paramAe, ag paramAg)
  {
    super(paramAe);
    com.google.android.gms.common.internal.aq.a(paramAg);
    this.f = Long.MIN_VALUE;
    this.d = new k(paramAe);
    this.b = new an(paramAe);
    this.c = new l(paramAe);
    this.e = ag.d(paramAe);
    this.i = new p(m());
    this.g = new ar(this, paramAe);
    this.h = new as(this, paramAe);
  }
  
  private boolean E()
  {
    int n = 1;
    ua.d();
    C();
    b("Dispatching a batch of local hits");
    if (!this.e.b())
    {
      p();
      if (!com.google.android.gms.common.internal.k.a)
      {
        m = 1;
        if (this.c.b()) {
          break label69;
        }
      }
    }
    for (;;)
    {
      if ((m == 0) || (n == 0)) {
        break label74;
      }
      b("No network or service available. Will retry later");
      return false;
      m = 0;
      break;
      label69:
      n = 0;
    }
    label74:
    p();
    int m = bd.f();
    p();
    long l3 = Math.max(m, bd.g());
    ArrayList localArrayList = new ArrayList();
    long l1 = 0L;
    try
    {
      for (;;)
      {
        this.b.b();
        localArrayList.clear();
        try
        {
          localList = this.b.a(l3);
          if (localList.isEmpty())
          {
            b("Store is empty, nothing to dispatch");
            H();
            try
            {
              this.b.c();
              this.b.d();
              return false;
            }
            catch (SQLiteException localSQLiteException1)
            {
              e("Failed to commit local dispatch transaction", localSQLiteException1);
              H();
              return false;
            }
          }
          a("Hits loaded from store. count", Integer.valueOf(localList.size()));
          localObject2 = localList.iterator();
          for (;;)
          {
            if (((Iterator)localObject2).hasNext()) {
              if (((d)((Iterator)localObject2).next()).c() == l1)
              {
                d("Database contains successfully uploaded hit", Long.valueOf(l1), Integer.valueOf(localList.size()));
                H();
                try
                {
                  this.b.c();
                  this.b.d();
                  return false;
                }
                catch (SQLiteException localSQLiteException2)
                {
                  e("Failed to commit local dispatch transaction", localSQLiteException2);
                  H();
                  return false;
                }
              }
            }
          }
        }
        catch (SQLiteException localSQLiteException3)
        {
          List localList;
          Object localObject2;
          d("Failed to read hits from persisted store", localSQLiteException3);
          H();
          try
          {
            this.b.c();
            this.b.d();
            return false;
          }
          catch (SQLiteException localSQLiteException4)
          {
            e("Failed to commit local dispatch transaction", localSQLiteException4);
            H();
            return false;
          }
          long l2 = l1;
          if (this.e.b())
          {
            p();
            l2 = l1;
            if (!com.google.android.gms.common.internal.k.a)
            {
              b("Service connected, sending hits to the service");
              for (;;)
              {
                l2 = l1;
                if (!localList.isEmpty())
                {
                  localObject2 = (d)localList.get(0);
                  l2 = l1;
                  if (this.e.a((d)localObject2))
                  {
                    l1 = Math.max(l1, ((d)localObject2).c());
                    localList.remove(localObject2);
                    b("Hit sent do device AnalyticsService for delivery", localObject2);
                    try
                    {
                      this.b.b(((d)localObject2).c());
                      localSQLiteException4.add(Long.valueOf(((d)localObject2).c()));
                    }
                    catch (SQLiteException localSQLiteException5)
                    {
                      e("Failed to remove hit that was send for delivery", localSQLiteException5);
                      H();
                      try
                      {
                        this.b.c();
                        this.b.d();
                        return false;
                      }
                      catch (SQLiteException localSQLiteException6)
                      {
                        e("Failed to commit local dispatch transaction", localSQLiteException6);
                        H();
                        return false;
                      }
                    }
                  }
                }
              }
            }
          }
          l1 = l2;
          if (this.c.b())
          {
            localObject2 = this.c.a(localList);
            Iterator localIterator = ((List)localObject2).iterator();
            for (l1 = l2; localIterator.hasNext(); l1 = Math.max(l1, ((Long)localIterator.next()).longValue())) {}
            localList.removeAll((Collection)localObject2);
          }
          try
          {
            this.b.a((List)localObject2);
            localSQLiteException6.addAll((Collection)localObject2);
            boolean bool = localSQLiteException6.isEmpty();
            if (bool) {
              try
              {
                this.b.c();
                this.b.d();
                return false;
              }
              catch (SQLiteException localSQLiteException7)
              {
                e("Failed to commit local dispatch transaction", localSQLiteException7);
                H();
                return false;
              }
            }
          }
          catch (SQLiteException localSQLiteException8)
          {
            e("Failed to remove successfully uploaded hits", localSQLiteException8);
            H();
            try
            {
              this.b.c();
              this.b.d();
              return false;
            }
            catch (SQLiteException localSQLiteException9)
            {
              e("Failed to commit local dispatch transaction", localSQLiteException9);
              H();
              return false;
            }
            try
            {
              this.b.c();
              this.b.d();
            }
            catch (SQLiteException localSQLiteException10)
            {
              e("Failed to commit local dispatch transaction", localSQLiteException10);
              H();
              return false;
            }
          }
        }
      }
      return false;
    }
    finally
    {
      try
      {
        this.b.c();
        this.b.d();
        throw localObject1;
      }
      catch (SQLiteException localSQLiteException11)
      {
        e("Failed to commit local dispatch transaction", localSQLiteException11);
        H();
      }
    }
  }
  
  private long F()
  {
    ua.d();
    C();
    try
    {
      long l = this.b.g();
      return l;
    }
    catch (SQLiteException localSQLiteException)
    {
      e("Failed to get min/max hit times from local store", localSQLiteException);
    }
    return 0L;
  }
  
  private void G()
  {
    bi localBi = t();
    if (!localBi.b()) {}
    long l;
    do
    {
      do
      {
        do
        {
          return;
        } while (localBi.c());
        l = F();
      } while (l == 0L);
      l = Math.abs(m().a() - l);
      p();
    } while (l > ((Long)bl.n.a()).longValue());
    p();
    a("Dispatch alarm scheduled (ms)", Long.valueOf(bd.e()));
    localBi.d();
  }
  
  private void H()
  {
    if (this.g.c()) {
      b("All hits dispatched or no network/service. Going to power save mode");
    }
    this.g.d();
    bi localBi = t();
    if (localBi.c()) {
      localBi.e();
    }
  }
  
  private long I()
  {
    long l;
    if (this.f != Long.MIN_VALUE) {
      l = this.f;
    }
    do
    {
      return l;
      p();
      l = ((Long)bl.i.a()).longValue();
    } while (!u().f());
    return u().g() * 1000L;
  }
  
  private void J()
  {
    C();
    l();
    this.k = true;
    this.e.d();
    h();
  }
  
  private void a(ah paramAh, uk paramUk)
  {
    com.google.android.gms.common.internal.aq.a(paramAh);
    com.google.android.gms.common.internal.aq.a(paramUk);
    Object localObject1 = new com.google.android.gms.analytics.u(j());
    ((com.google.android.gms.analytics.u)localObject1).b(paramAh.c());
    ((com.google.android.gms.analytics.u)localObject1).a(paramAh.d());
    localObject1 = ((com.google.android.gms.analytics.u)localObject1).l();
    py localPy = (py)((tx)localObject1).b(py.class);
    localPy.a("data");
    localPy.h();
    ((tx)localObject1).a(paramUk);
    px localPx = (px)((tx)localObject1).b(px.class);
    uj localUj = (uj)((tx)localObject1).b(uj.class);
    Iterator localIterator = paramAh.f().entrySet().iterator();
    while (localIterator.hasNext())
    {
      Object localObject2 = (Map.Entry)localIterator.next();
      String str = (String)((Map.Entry)localObject2).getKey();
      localObject2 = (String)((Map.Entry)localObject2).getValue();
      if ("an".equals(str)) {
        localUj.a((String)localObject2);
      } else if ("av".equals(str)) {
        localUj.b((String)localObject2);
      } else if ("aid".equals(str)) {
        localUj.c((String)localObject2);
      } else if ("aiid".equals(str)) {
        localUj.d((String)localObject2);
      } else if ("uid".equals(str)) {
        localPy.c((String)localObject2);
      } else {
        localPx.a(str, (String)localObject2);
      }
    }
    b("Sending installation campaign to", paramAh.c(), paramUk);
    ((tx)localObject1).a(v().b());
    ((tx)localObject1).e();
  }
  
  private boolean g(String paramString)
  {
    return n().checkCallingOrSelfPermission(paramString) == 0;
  }
  
  private void i()
  {
    if (this.k) {}
    do
    {
      long l;
      do
      {
        do
        {
          return;
          p();
        } while ((!bd.b()) || (this.e.b()));
        p();
        l = ((Long)bl.O.a()).longValue();
      } while (!this.i.a(l));
      this.i.a();
      b("Connecting to service");
    } while (!this.e.c());
    b("Connected to service");
    this.i.b();
    e();
  }
  
  protected final void a()
  {
    this.b.D();
    this.c.D();
    this.e.D();
  }
  
  protected final void a(ah paramAh)
  {
    l();
    b("Sending first hit to property", paramAh.c());
    Object localObject = v().c();
    p();
    if (((p)localObject).a(bd.l())) {}
    do
    {
      return;
      localObject = v().f();
    } while (TextUtils.isEmpty((CharSequence)localObject));
    localObject = t.a(o(), (String)localObject);
    b("Found relevant installation campaign", localObject);
    a(paramAh, (uk)localObject);
  }
  
  public final void a(bj paramBj)
  {
    long l2 = this.j;
    ua.d();
    C();
    long l1 = -1L;
    long l3 = v().d();
    if (l3 != 0L) {
      l1 = Math.abs(m().a() - l3);
    }
    b("Dispatching local hits. Elapsed time since last dispatch (ms)", Long.valueOf(l1));
    p();
    if (!com.google.android.gms.common.internal.k.a) {
      i();
    }
    try
    {
      E();
      v().e();
      h();
      if (paramBj != null) {
        paramBj.a();
      }
      if (this.j != l2) {
        this.d.c();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      do
      {
        e("Local dispatch failed", localThrowable);
        v().e();
        h();
      } while (paramBj == null);
      paramBj.a();
    }
  }
  
  public final void a(d paramD)
  {
    com.google.android.gms.common.internal.aq.a(paramD);
    ua.d();
    C();
    Object localObject1;
    if (this.k)
    {
      c("Hit delivery not possible. Missing network permissions. See http://goo.gl/8Rd3yj for instructions");
      if (TextUtils.isEmpty(paramD.g())) {
        break label72;
      }
      localObject1 = paramD;
    }
    for (;;)
    {
      i();
      if (!this.e.a((d)localObject1)) {
        break label163;
      }
      c("Hit sent to the device AnalyticsService for delivery");
      return;
      a("Delivering hit", paramD);
      break;
      label72:
      Object localObject2 = v().g().a();
      localObject1 = paramD;
      if (localObject2 != null)
      {
        localObject1 = (Long)((Pair)localObject2).second;
        localObject2 = (String)((Pair)localObject2).first;
        localObject1 = localObject1 + ":" + (String)localObject2;
        localObject2 = new HashMap(paramD.b());
        ((Map)localObject2).put("_m", localObject1);
        localObject1 = d.a(this, paramD, (Map)localObject2);
      }
    }
    label163:
    p();
    if (com.google.android.gms.common.internal.k.a)
    {
      o().a((d)localObject1, "Service unavailable on package side");
      return;
    }
    try
    {
      this.b.a((d)localObject1);
      h();
      return;
    }
    catch (SQLiteException paramD)
    {
      e("Delivery failed to save hit to a database", paramD);
      o().a((d)localObject1, "deliver: failed to insert hit to database");
    }
  }
  
  public final void a(String paramString)
  {
    com.google.android.gms.common.internal.aq.a(paramString);
    l();
    k();
    uk localUk = t.a(o(), paramString);
    if (localUk == null) {
      d("Parsing failed. Ignoring invalid campaign data", paramString);
    }
    for (;;)
    {
      return;
      String str = v().f();
      if (paramString.equals(str))
      {
        e("Ignoring duplicate install campaign");
        return;
      }
      if (!TextUtils.isEmpty(str))
      {
        d("Ignoring multiple install campaigns. original, new", str, paramString);
        return;
      }
      v().a(paramString);
      paramString = v().c();
      p();
      if (paramString.a(bd.l()))
      {
        d("Campaign received too late, ignoring", localUk);
        return;
      }
      b("Received installation campaign", localUk);
      paramString = this.b.h().iterator();
      while (paramString.hasNext()) {
        a((ah)paramString.next(), localUk);
      }
    }
  }
  
  public final long b(ah paramAh)
  {
    com.google.android.gms.common.internal.aq.a(paramAh);
    C();
    l();
    try
    {
      this.b.b();
      this.b.a(paramAh.a(), paramAh.b());
      long l = this.b.a(paramAh.a(), paramAh.b(), paramAh.c());
      paramAh.a(1L + l);
      this.b.a(paramAh);
      this.b.c();
      try
      {
        this.b.d();
        return l;
      }
      catch (SQLiteException paramAh)
      {
        e("Failed to end transaction", paramAh);
        return l;
      }
      try
      {
        this.b.d();
        throw paramAh;
      }
      catch (SQLiteException localSQLiteException)
      {
        for (;;)
        {
          e("Failed to end transaction", localSQLiteException);
        }
      }
    }
    catch (SQLiteException paramAh)
    {
      paramAh = paramAh;
      e("Failed to update Analytics property", paramAh);
      try
      {
        this.b.d();
        return -1L;
      }
      catch (SQLiteException paramAh)
      {
        for (;;)
        {
          e("Failed to end transaction", paramAh);
        }
      }
    }
    finally {}
  }
  
  final void b()
  {
    C();
    boolean bool;
    Context localContext;
    if (!this.a)
    {
      bool = true;
      com.google.android.gms.common.internal.aq.a(bool, "Analytics backend already started");
      this.a = true;
      p();
      if (!com.google.android.gms.common.internal.k.a)
      {
        localContext = j().a();
        if (AnalyticsReceiver.a(localContext)) {
          break label93;
        }
        e("AnalyticsReceiver is not registered or is disabled. Register the receiver for reliable dispatching on non-Google Play devices. See http://goo.gl/8Rd3yj for instructions.");
        label58:
        if (CampaignTrackingReceiver.a(localContext)) {
          break label110;
        }
        e("CampaignTrackingReceiver is not registered, not exported or is disabled. Installation campaign tracking is not possible. See http://goo.gl/8Rd3yj for instructions.");
      }
    }
    for (;;)
    {
      q().a(new at(this));
      return;
      bool = false;
      break;
      label93:
      if (AnalyticsService.a(localContext)) {
        break label58;
      }
      f("AnalyticsService is not registered or is disabled. Analytics service at risk of not starting. See http://goo.gl/8Rd3yj for instructions.");
      break label58;
      label110:
      if (!CampaignTrackingService.a(localContext)) {
        e("CampaignTrackingService is not registered or is disabled. Installation campaign tracking is not possible. See http://goo.gl/8Rd3yj for instructions.");
      }
    }
  }
  
  protected final void c()
  {
    C();
    v().b();
    if (!g("android.permission.ACCESS_NETWORK_STATE"))
    {
      f("Missing required android.permission.ACCESS_NETWORK_STATE. Google Analytics disabled. See http://goo.gl/8Rd3yj for instructions");
      J();
    }
    if (!g("android.permission.INTERNET"))
    {
      f("Missing required android.permission.INTERNET. Google Analytics disabled. See http://goo.gl/8Rd3yj for instructions");
      J();
    }
    if (AnalyticsService.a(n())) {
      b("AnalyticsService registered in the app manifest and enabled");
    }
    for (;;)
    {
      if (!this.k)
      {
        p();
        if ((!com.google.android.gms.common.internal.k.a) && (!this.b.e())) {
          i();
        }
      }
      h();
      return;
      p();
      if (com.google.android.gms.common.internal.k.a) {
        f("Device AnalyticsService not registered! Hits will not be delivered reliably.");
      } else {
        e("AnalyticsService not registered in the app manifest. Hits might not be delivered reliably. See http://goo.gl/8Rd3yj for instructions.");
      }
    }
  }
  
  final void d()
  {
    l();
    this.j = m().a();
  }
  
  protected final void e()
  {
    l();
    p();
    if (!com.google.android.gms.common.internal.k.a)
    {
      ua.d();
      C();
      k();
      p();
      if (!bd.b()) {
        e("Service client disabled. Can't dispatch local hits to device AnalyticsService");
      }
      if (this.e.b()) {
        break label62;
      }
      b("Service not connected");
    }
    label62:
    while (this.b.e()) {
      return;
    }
    b("Dispatching local hits to device AnalyticsService");
    for (;;)
    {
      try
      {
        Object localObject1 = this.b;
        p();
        localObject1 = ((an)localObject1).a(bd.f());
        if (!((List)localObject1).isEmpty()) {
          break label145;
        }
        h();
        return;
      }
      catch (SQLiteException localSQLiteException1)
      {
        e("Failed to read hits from store", localSQLiteException1);
        H();
        return;
      }
      label126:
      Object localObject2;
      localSQLiteException1.remove(localObject2);
      try
      {
        this.b.b(((d)localObject2).c());
        label145:
        if (!localSQLiteException1.isEmpty())
        {
          localObject2 = (d)localSQLiteException1.get(0);
          if (this.e.a((d)localObject2)) {
            break label126;
          }
          h();
          return;
        }
      }
      catch (SQLiteException localSQLiteException2)
      {
        e("Failed to remove hit that was send for delivery", localSQLiteException2);
        H();
      }
    }
  }
  
  public final void f()
  {
    ua.d();
    C();
    b("Service disconnected");
  }
  
  public final void g()
  {
    ua.d();
    C();
    c("Sync dispatching local hits");
    long l = this.j;
    p();
    if (!com.google.android.gms.common.internal.k.a) {
      i();
    }
    try
    {
      E();
      v().e();
      h();
      if (this.j != l) {
        this.d.c();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      e("Sync local dispatch failed", localThrowable);
      h();
    }
  }
  
  public final void h()
  {
    j();
    ae.r();
    C();
    if (!this.k)
    {
      p();
      if (((com.google.android.gms.common.internal.k.a) && (!p().a())) || (I() <= 0L)) {}
    }
    for (int m = 1; m == 0; m = 0)
    {
      this.d.b();
      H();
      return;
    }
    if (this.b.e())
    {
      this.d.b();
      H();
      return;
    }
    boolean bool;
    long l2;
    long l1;
    if (!((Boolean)bl.J.a()).booleanValue())
    {
      this.d.a();
      bool = this.d.d();
      if (!bool) {
        break label268;
      }
      G();
      l2 = I();
      l1 = v().d();
      if (l1 == 0L) {
        break label242;
      }
      l1 = l2 - Math.abs(m().a() - l1);
      if (l1 <= 0L) {
        break label225;
      }
    }
    for (;;)
    {
      a("Dispatch scheduled (ms)", Long.valueOf(l1));
      if (!this.g.c()) {
        break label259;
      }
      l1 = Math.max(1L, l1 + this.g.b());
      this.g.b(l1);
      return;
      bool = true;
      break;
      label225:
      p();
      l1 = Math.min(bd.d(), l2);
      continue;
      label242:
      p();
      l1 = Math.min(bd.d(), l2);
    }
    label259:
    this.g.a(l1);
    return;
    label268:
    H();
    G();
  }
}
