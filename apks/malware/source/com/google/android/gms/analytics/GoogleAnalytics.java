package com.google.android.gms.analytics;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build.VERSION;
import android.os.Bundle;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

public class GoogleAnalytics
  extends TrackerHandler
{
  private static boolean wm;
  private static GoogleAnalytics wt;
  private Context mContext;
  private String tC;
  private String tD;
  private f tV;
  private boolean wn;
  private af wo;
  private volatile Boolean wp = Boolean.valueOf(false);
  private Logger wq;
  private Set wr;
  private boolean ws = false;
  
  protected GoogleAnalytics(Context paramContext)
  {
    this(paramContext, t.x(paramContext), r.cE());
  }
  
  private GoogleAnalytics(Context paramContext, f paramF, af paramAf)
  {
    if (paramContext == null) {
      throw new IllegalArgumentException("context cannot be null");
    }
    this.mContext = paramContext.getApplicationContext();
    this.tV = paramF;
    this.wo = paramAf;
    g.u(this.mContext);
    ae.u(this.mContext);
    h.u(this.mContext);
    this.wq = new l();
    this.wr = new HashSet();
    dj();
  }
  
  private int P(String paramString)
  {
    paramString = paramString.toLowerCase();
    if ("verbose".equals(paramString)) {
      return 0;
    }
    if ("info".equals(paramString)) {
      return 1;
    }
    if ("warning".equals(paramString)) {
      return 2;
    }
    if ("error".equals(paramString)) {
      return 3;
    }
    return -1;
  }
  
  private Tracker a(Tracker paramTracker)
  {
    if (this.tC != null) {
      paramTracker.set("&an", this.tC);
    }
    if (this.tD != null) {
      paramTracker.set("&av", this.tD);
    }
    return paramTracker;
  }
  
  static GoogleAnalytics di()
  {
    try
    {
      GoogleAnalytics localGoogleAnalytics = wt;
      return localGoogleAnalytics;
    }
    finally {}
  }
  
  private void dj()
  {
    if (wm) {}
    Object localObject;
    do
    {
      int i;
      do
      {
        do
        {
          return;
          try
          {
            ApplicationInfo localApplicationInfo = this.mContext.getPackageManager().getApplicationInfo(this.mContext.getPackageName(), 129);
            if (localApplicationInfo == null)
            {
              aa.D("Couldn't get ApplicationInfo to load gloabl config.");
              return;
            }
          }
          catch (PackageManager.NameNotFoundException localNameNotFoundException)
          {
            for (;;)
            {
              aa.C("PackageManager doesn't know about package: " + localNameNotFoundException);
              localObject = null;
            }
            localObject = ((ApplicationInfo)localObject).metaData;
          }
        } while (localObject == null);
        i = ((Bundle)localObject).getInt("com.google.android.gms.analytics.globalConfigResource");
      } while (i <= 0);
      localObject = (w)new v(this.mContext).r(i);
    } while (localObject == null);
    a((w)localObject);
  }
  
  private void f(Activity paramActivity)
  {
    Iterator localIterator = this.wr.iterator();
    while (localIterator.hasNext()) {
      ((GoogleAnalytics.a)localIterator.next()).h(paramActivity);
    }
  }
  
  private void g(Activity paramActivity)
  {
    Iterator localIterator = this.wr.iterator();
    while (localIterator.hasNext()) {
      ((GoogleAnalytics.a)localIterator.next()).i(paramActivity);
    }
  }
  
  public static GoogleAnalytics getInstance(Context paramContext)
  {
    try
    {
      if (wt == null) {
        wt = new GoogleAnalytics(paramContext);
      }
      paramContext = wt;
      return paramContext;
    }
    finally {}
  }
  
  void a(GoogleAnalytics.a paramA)
  {
    this.wr.add(paramA);
  }
  
  void a(w paramW)
  {
    aa.C("Loading global config values.");
    if (paramW.cY())
    {
      this.tC = paramW.cZ();
      aa.C("app name loaded: " + this.tC);
    }
    if (paramW.da())
    {
      this.tD = paramW.db();
      aa.C("app version loaded: " + this.tD);
    }
    if (paramW.dc())
    {
      int i = P(paramW.dd());
      if (i >= 0)
      {
        aa.C("log level loaded: " + i);
        getLogger().setLogLevel(i);
      }
    }
    if (paramW.de()) {
      this.wo.setLocalDispatchPeriod(paramW.df());
    }
    if (paramW.dg()) {
      setDryRun(paramW.dh());
    }
  }
  
  void b(GoogleAnalytics.a paramA)
  {
    this.wr.remove(paramA);
  }
  
  @Deprecated
  public void dispatchLocalHits()
  {
    this.wo.dispatchLocalHits();
  }
  
  public void enableAutoActivityReports(Application paramApplication)
  {
    if ((Build.VERSION.SDK_INT >= 14) && (!this.ws))
    {
      paramApplication.registerActivityLifecycleCallbacks(new GoogleAnalytics.b(this));
      this.ws = true;
    }
  }
  
  public boolean getAppOptOut()
  {
    u.cU().a(u.a.vN);
    return this.wp.booleanValue();
  }
  
  public Logger getLogger()
  {
    return this.wq;
  }
  
  public boolean isDryRunEnabled()
  {
    u.cU().a(u.a.vZ);
    return this.wn;
  }
  
  public Tracker newTracker(int paramInt)
  {
    try
    {
      u.cU().a(u.a.vJ);
      Tracker localTracker = new Tracker(null, this, this.mContext);
      if (paramInt > 0)
      {
        aj localAj = (aj)new ai(this.mContext).r(paramInt);
        if (localAj != null) {
          localTracker.a(localAj);
        }
      }
      localTracker = a(localTracker);
      return localTracker;
    }
    finally {}
  }
  
  public Tracker newTracker(String paramString)
  {
    try
    {
      u.cU().a(u.a.vJ);
      paramString = a(new Tracker(paramString, this, this.mContext));
      return paramString;
    }
    finally {}
  }
  
  void p(Map paramMap)
  {
    if (paramMap == null) {
      try
      {
        throw new IllegalArgumentException("hit cannot be null");
      }
      finally {}
    }
    ak.a(paramMap, "&ul", ak.a(Locale.getDefault()));
    ak.a(paramMap, "&sr", ae.dv().getValue("&sr"));
    paramMap.put("&_u", u.cU().cW());
    u.cU().cV();
    this.tV.p(paramMap);
  }
  
  public void reportActivityStart(Activity paramActivity)
  {
    if (!this.ws) {
      f(paramActivity);
    }
  }
  
  public void reportActivityStop(Activity paramActivity)
  {
    if (!this.ws) {
      g(paramActivity);
    }
  }
  
  public void setAppOptOut(boolean paramBoolean)
  {
    u.cU().a(u.a.vM);
    this.wp = Boolean.valueOf(paramBoolean);
    if (this.wp.booleanValue()) {
      this.tV.cl();
    }
  }
  
  public void setDryRun(boolean paramBoolean)
  {
    u.cU().a(u.a.vY);
    this.wn = paramBoolean;
  }
  
  @Deprecated
  public void setLocalDispatchPeriod(int paramInt)
  {
    this.wo.setLocalDispatchPeriod(paramInt);
  }
  
  public void setLogger(Logger paramLogger)
  {
    u.cU().a(u.a.wa);
    this.wq = paramLogger;
  }
}
