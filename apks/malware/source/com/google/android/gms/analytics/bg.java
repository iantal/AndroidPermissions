package com.google.android.gms.analytics;

import android.content.Context;
import android.os.Process;
import com.google.android.gms.internal.hb;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;

final class bg
  extends Thread
  implements ai
{
  private static bg f;
  private final LinkedBlockingQueue<Runnable> a = new LinkedBlockingQueue();
  private volatile boolean b = false;
  private volatile boolean c = false;
  private volatile List<hb> d;
  private volatile String e;
  private volatile v g;
  private final Context h;
  
  private bg(Context paramContext)
  {
    super("GAThread");
    if (paramContext != null) {}
    for (this.h = paramContext.getApplicationContext();; this.h = paramContext)
    {
      start();
      return;
    }
  }
  
  static bg a(Context paramContext)
  {
    if (f == null) {
      f = new bg(paramContext);
    }
    return f;
  }
  
  private static String a(Throwable paramThrowable)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    PrintStream localPrintStream = new PrintStream(localByteArrayOutputStream);
    paramThrowable.printStackTrace(localPrintStream);
    localPrintStream.flush();
    return new String(localByteArrayOutputStream.toByteArray());
  }
  
  private void a(Runnable paramRunnable)
  {
    this.a.add(paramRunnable);
  }
  
  private static String b(Context paramContext)
  {
    try
    {
      localObject = paramContext.openFileInput("gaInstallData");
      arrayOfByte = new byte['â€€'];
      i = ((FileInputStream)localObject).read(arrayOfByte, 0, 8192);
      if (((FileInputStream)localObject).available() > 0)
      {
        bs.a("Too much campaign data, ignoring it.");
        ((FileInputStream)localObject).close();
        paramContext.deleteFile("gaInstallData");
        return null;
      }
      ((FileInputStream)localObject).close();
      paramContext.deleteFile("gaInstallData");
      if (i <= 0)
      {
        bs.d("Campaign file is empty.");
        return null;
      }
    }
    catch (FileNotFoundException paramContext)
    {
      byte[] arrayOfByte;
      int i;
      bs.b("No campaign data found.");
      return null;
      Object localObject = new String(arrayOfByte, 0, i);
      bs.b("Campaign found: " + (String)localObject);
      return localObject;
    }
    catch (IOException localIOException)
    {
      bs.a("Error reading campaign data.");
      paramContext.deleteFile("gaInstallData");
    }
    return null;
  }
  
  public final void a()
  {
    a(new bi(this));
  }
  
  public final void a(Map<String, String> paramMap)
  {
    HashMap localHashMap = new HashMap(paramMap);
    String str = (String)paramMap.get("&ht");
    paramMap = str;
    if (str != null) {}
    try
    {
      Long.valueOf(str);
      paramMap = str;
    }
    catch (NumberFormatException paramMap)
    {
      for (;;)
      {
        paramMap = null;
      }
    }
    if (paramMap == null) {
      localHashMap.put("&ht", Long.toString(System.currentTimeMillis()));
    }
    a(new bh(this, localHashMap));
  }
  
  public final void b()
  {
    a(new bj(this));
  }
  
  public final LinkedBlockingQueue<Runnable> c()
  {
    return this.a;
  }
  
  public final Thread d()
  {
    return this;
  }
  
  public final void run()
  {
    Process.setThreadPriority(10);
    try
    {
      Thread.sleep(5000L);
      for (;;)
      {
        try
        {
          if (this.g == null) {
            this.g = new ay(this.h, this);
          }
          this.g.c();
          this.d = new ArrayList();
          this.d.add(new hb("appendVersion", "&_v".substring(1), "ma4.0.3"));
          this.d.add(new hb("appendQueueTime", "&qt".substring(1), null));
          this.d.add(new hb("appendCacheBuster", "&z".substring(1), null));
          this.e = b(this.h);
          bs.c("Initialized GA Thread");
        }
        catch (Throwable localThrowable2)
        {
          bs.a("Error initializing the GAThread: " + a(localThrowable2));
          bs.a("Google Analytics will not start up.");
          this.b = true;
          continue;
        }
        if (this.c) {
          return;
        }
        try
        {
          Runnable localRunnable = (Runnable)this.a.take();
          if (!this.b) {
            localRunnable.run();
          }
        }
        catch (InterruptedException localInterruptedException1)
        {
          bs.b(localInterruptedException1.toString());
        }
        catch (Throwable localThrowable1)
        {
          bs.a("Error on GAThread: " + a(localThrowable1));
          bs.a("Google Analytics is shutting down.");
          this.b = true;
        }
      }
    }
    catch (InterruptedException localInterruptedException2)
    {
      for (;;)
      {
        bs.d("sleep interrupted in GAThread initialize");
      }
    }
  }
}
