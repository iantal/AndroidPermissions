package com.google.android.gms.analytics.internal;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Build.VERSION;
import com.google.android.gms.b.rd;
import com.google.android.gms.common.internal.aq;
import com.google.android.gms.common.internal.k;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

final class l
  extends ac
{
  private static final byte[] c = "\n".getBytes();
  private final String a = String.format("%s/%s (Linux; U; Android %s; %s; %s Build/%s)", new Object[] { "GoogleAnalytics", ad.a, Build.VERSION.RELEASE, t.a(Locale.getDefault()), Build.MODEL, Build.ID });
  private final p b;
  
  l(ae paramAe)
  {
    super(paramAe);
    this.b = new p(paramAe.c());
  }
  
  private int a(URL paramURL)
  {
    aq.a(paramURL);
    b("GET request", paramURL);
    Object localObject = null;
    URL localURL = null;
    try
    {
      paramURL = b(paramURL);
      localURL = paramURL;
      localObject = paramURL;
      paramURL.connect();
      localURL = paramURL;
      localObject = paramURL;
      a(paramURL);
      localURL = paramURL;
      localObject = paramURL;
      int i = paramURL.getResponseCode();
      if (i == 200)
      {
        localURL = paramURL;
        localObject = paramURL;
        s().g();
      }
      localURL = paramURL;
      localObject = paramURL;
      b("GET status", Integer.valueOf(i));
      if (paramURL != null) {
        paramURL.disconnect();
      }
      return i;
    }
    catch (IOException paramURL)
    {
      localObject = localURL;
      d("Network GET connection error", paramURL);
      if (localURL != null) {
        localURL.disconnect();
      }
      return 0;
    }
    finally
    {
      if (localObject != null) {
        ((HttpURLConnection)localObject).disconnect();
      }
    }
  }
  
  /* Error */
  private int a(URL paramURL, byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore 7
    //   6: aconst_null
    //   7: astore 8
    //   9: aconst_null
    //   10: astore 6
    //   12: aload_1
    //   13: invokestatic 86	com/google/android/gms/common/internal/aq:a	(Ljava/lang/Object;)Ljava/lang/Object;
    //   16: pop
    //   17: aload_2
    //   18: invokestatic 86	com/google/android/gms/common/internal/aq:a	(Ljava/lang/Object;)Ljava/lang/Object;
    //   21: pop
    //   22: aload_0
    //   23: ldc -122
    //   25: aload_2
    //   26: arraylength
    //   27: invokestatic 123	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   30: aload_1
    //   31: invokevirtual 137	com/google/android/gms/analytics/internal/l:b	(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
    //   34: invokestatic 141	com/google/android/gms/analytics/internal/l:A	()Z
    //   37: ifeq +17 -> 54
    //   40: aload_0
    //   41: ldc -113
    //   43: new 16	java/lang/String
    //   46: dup
    //   47: aload_2
    //   48: invokespecial 146	java/lang/String:<init>	([B)V
    //   51: invokevirtual 148	com/google/android/gms/analytics/internal/l:a	(Ljava/lang/String;Ljava/lang/Object;)V
    //   54: aload_0
    //   55: aload_1
    //   56: invokespecial 94	com/google/android/gms/analytics/internal/l:b	(Ljava/net/URL;)Ljava/net/HttpURLConnection;
    //   59: astore_1
    //   60: aload_1
    //   61: astore 5
    //   63: aload 7
    //   65: astore_1
    //   66: aload 5
    //   68: astore 4
    //   70: aload 8
    //   72: astore 6
    //   74: aload 5
    //   76: iconst_1
    //   77: invokevirtual 152	java/net/HttpURLConnection:setDoOutput	(Z)V
    //   80: aload 7
    //   82: astore_1
    //   83: aload 5
    //   85: astore 4
    //   87: aload 8
    //   89: astore 6
    //   91: aload 5
    //   93: aload_2
    //   94: arraylength
    //   95: invokevirtual 156	java/net/HttpURLConnection:setFixedLengthStreamingMode	(I)V
    //   98: aload 7
    //   100: astore_1
    //   101: aload 5
    //   103: astore 4
    //   105: aload 8
    //   107: astore 6
    //   109: aload 5
    //   111: invokevirtual 99	java/net/HttpURLConnection:connect	()V
    //   114: aload 7
    //   116: astore_1
    //   117: aload 5
    //   119: astore 4
    //   121: aload 8
    //   123: astore 6
    //   125: aload 5
    //   127: invokevirtual 160	java/net/HttpURLConnection:getOutputStream	()Ljava/io/OutputStream;
    //   130: astore 7
    //   132: aload 7
    //   134: astore_1
    //   135: aload 5
    //   137: astore 4
    //   139: aload 7
    //   141: astore 6
    //   143: aload 7
    //   145: aload_2
    //   146: invokevirtual 165	java/io/OutputStream:write	([B)V
    //   149: aload 7
    //   151: astore_1
    //   152: aload 5
    //   154: astore 4
    //   156: aload 7
    //   158: astore 6
    //   160: aload_0
    //   161: aload 5
    //   163: invokespecial 102	com/google/android/gms/analytics/internal/l:a	(Ljava/net/HttpURLConnection;)V
    //   166: aload 7
    //   168: astore_1
    //   169: aload 5
    //   171: astore 4
    //   173: aload 7
    //   175: astore 6
    //   177: aload 5
    //   179: invokevirtual 106	java/net/HttpURLConnection:getResponseCode	()I
    //   182: istore_3
    //   183: iload_3
    //   184: sipush 200
    //   187: if_icmpne +21 -> 208
    //   190: aload 7
    //   192: astore_1
    //   193: aload 5
    //   195: astore 4
    //   197: aload 7
    //   199: astore 6
    //   201: aload_0
    //   202: invokevirtual 110	com/google/android/gms/analytics/internal/l:s	()Lcom/google/android/gms/analytics/internal/v;
    //   205: invokevirtual 115	com/google/android/gms/analytics/internal/v:g	()V
    //   208: aload 7
    //   210: astore_1
    //   211: aload 5
    //   213: astore 4
    //   215: aload 7
    //   217: astore 6
    //   219: aload_0
    //   220: ldc -89
    //   222: iload_3
    //   223: invokestatic 123	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   226: invokevirtual 91	com/google/android/gms/analytics/internal/l:b	(Ljava/lang/String;Ljava/lang/Object;)V
    //   229: aload 7
    //   231: ifnull +8 -> 239
    //   234: aload 7
    //   236: invokevirtual 170	java/io/OutputStream:close	()V
    //   239: aload 5
    //   241: ifnull +8 -> 249
    //   244: aload 5
    //   246: invokevirtual 126	java/net/HttpURLConnection:disconnect	()V
    //   249: iload_3
    //   250: ireturn
    //   251: astore_1
    //   252: aload_0
    //   253: ldc -84
    //   255: aload_1
    //   256: invokevirtual 175	com/google/android/gms/analytics/internal/l:e	(Ljava/lang/String;Ljava/lang/Object;)V
    //   259: goto -20 -> 239
    //   262: astore_2
    //   263: aconst_null
    //   264: astore 5
    //   266: aload 6
    //   268: astore_1
    //   269: aload 5
    //   271: astore 4
    //   273: aload_0
    //   274: ldc -79
    //   276: aload_2
    //   277: invokevirtual 131	com/google/android/gms/analytics/internal/l:d	(Ljava/lang/String;Ljava/lang/Object;)V
    //   280: aload 6
    //   282: ifnull +8 -> 290
    //   285: aload 6
    //   287: invokevirtual 170	java/io/OutputStream:close	()V
    //   290: aload 5
    //   292: ifnull +8 -> 300
    //   295: aload 5
    //   297: invokevirtual 126	java/net/HttpURLConnection:disconnect	()V
    //   300: iconst_0
    //   301: ireturn
    //   302: astore_1
    //   303: aload_0
    //   304: ldc -84
    //   306: aload_1
    //   307: invokevirtual 175	com/google/android/gms/analytics/internal/l:e	(Ljava/lang/String;Ljava/lang/Object;)V
    //   310: goto -20 -> 290
    //   313: astore_2
    //   314: aconst_null
    //   315: astore 4
    //   317: aload 5
    //   319: astore_1
    //   320: aload_1
    //   321: ifnull +7 -> 328
    //   324: aload_1
    //   325: invokevirtual 170	java/io/OutputStream:close	()V
    //   328: aload 4
    //   330: ifnull +8 -> 338
    //   333: aload 4
    //   335: invokevirtual 126	java/net/HttpURLConnection:disconnect	()V
    //   338: aload_2
    //   339: athrow
    //   340: astore_1
    //   341: aload_0
    //   342: ldc -84
    //   344: aload_1
    //   345: invokevirtual 175	com/google/android/gms/analytics/internal/l:e	(Ljava/lang/String;Ljava/lang/Object;)V
    //   348: goto -20 -> 328
    //   351: astore_2
    //   352: goto -32 -> 320
    //   355: astore_2
    //   356: goto -90 -> 266
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	359	0	this	l
    //   0	359	1	paramURL	URL
    //   0	359	2	paramArrayOfByte	byte[]
    //   182	68	3	i	int
    //   68	266	4	localURL1	URL
    //   1	317	5	localURL2	URL
    //   10	276	6	localObject1	Object
    //   4	231	7	localOutputStream	java.io.OutputStream
    //   7	115	8	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   234	239	251	java/io/IOException
    //   54	60	262	java/io/IOException
    //   285	290	302	java/io/IOException
    //   54	60	313	finally
    //   324	328	340	java/io/IOException
    //   74	80	351	finally
    //   91	98	351	finally
    //   109	114	351	finally
    //   125	132	351	finally
    //   143	149	351	finally
    //   160	166	351	finally
    //   177	183	351	finally
    //   201	208	351	finally
    //   219	229	351	finally
    //   273	280	351	finally
    //   74	80	355	java/io/IOException
    //   91	98	355	java/io/IOException
    //   109	114	355	java/io/IOException
    //   125	132	355	java/io/IOException
    //   143	149	355	java/io/IOException
    //   160	166	355	java/io/IOException
    //   177	183	355	java/io/IOException
    //   201	208	355	java/io/IOException
    //   219	229	355	java/io/IOException
  }
  
  private URL a(d paramD)
  {
    if (paramD.e())
    {
      paramD = new StringBuilder();
      p();
      paramD = paramD.append(bd.h());
      p();
    }
    for (paramD = bd.j();; paramD = bd.j())
    {
      try
      {
        paramD = new URL(paramD);
        return paramD;
      }
      catch (MalformedURLException paramD)
      {
        e("Error trying to parse the hardcoded host url", paramD);
      }
      paramD = new StringBuilder();
      p();
      paramD = paramD.append(bd.i());
      p();
    }
    return null;
  }
  
  private URL a(d paramD, String paramString)
  {
    if (paramD.e())
    {
      paramD = new StringBuilder();
      p();
      paramD = paramD.append(bd.h());
      p();
    }
    for (paramD = bd.j() + "?" + paramString;; paramD = bd.j() + "?" + paramString)
    {
      try
      {
        paramD = new URL(paramD);
        return paramD;
      }
      catch (MalformedURLException paramD)
      {
        e("Error trying to parse the hardcoded host url", paramD);
      }
      paramD = new StringBuilder();
      p();
      paramD = paramD.append(bd.i());
      p();
    }
    return null;
  }
  
  private static void a(StringBuilder paramStringBuilder, String paramString1, String paramString2)
  {
    if (paramStringBuilder.length() != 0) {
      paramStringBuilder.append('&');
    }
    paramStringBuilder.append(URLEncoder.encode(paramString1, "UTF-8"));
    paramStringBuilder.append('=');
    paramStringBuilder.append(URLEncoder.encode(paramString2, "UTF-8"));
  }
  
  private void a(HttpURLConnection paramHttpURLConnection)
  {
    localHttpURLConnection = null;
    try
    {
      paramHttpURLConnection = paramHttpURLConnection.getInputStream();
      localHttpURLConnection = paramHttpURLConnection;
      byte[] arrayOfByte = new byte['Ѐ'];
      int i;
      do
      {
        localHttpURLConnection = paramHttpURLConnection;
        i = paramHttpURLConnection.read(arrayOfByte);
      } while (i > 0);
      if (paramHttpURLConnection != null) {}
      try
      {
        paramHttpURLConnection.close();
        return;
      }
      catch (IOException paramHttpURLConnection)
      {
        e("Error closing http connection input stream", paramHttpURLConnection);
        return;
      }
      try
      {
        localHttpURLConnection.close();
        throw paramHttpURLConnection;
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          e("Error closing http connection input stream", localIOException);
        }
      }
    }
    finally
    {
      if (localHttpURLConnection == null) {}
    }
  }
  
  /* Error */
  private int b(URL paramURL, byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore 4
    //   6: aload_1
    //   7: invokestatic 86	com/google/android/gms/common/internal/aq:a	(Ljava/lang/Object;)Ljava/lang/Object;
    //   10: pop
    //   11: aload_2
    //   12: invokestatic 86	com/google/android/gms/common/internal/aq:a	(Ljava/lang/Object;)Ljava/lang/Object;
    //   15: pop
    //   16: new 251	java/io/ByteArrayOutputStream
    //   19: dup
    //   20: invokespecial 252	java/io/ByteArrayOutputStream:<init>	()V
    //   23: astore 6
    //   25: new 254	java/util/zip/GZIPOutputStream
    //   28: dup
    //   29: aload 6
    //   31: invokespecial 257	java/util/zip/GZIPOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   34: astore 7
    //   36: aload 7
    //   38: aload_2
    //   39: invokevirtual 258	java/util/zip/GZIPOutputStream:write	([B)V
    //   42: aload 7
    //   44: invokevirtual 259	java/util/zip/GZIPOutputStream:close	()V
    //   47: aload 6
    //   49: invokevirtual 260	java/io/ByteArrayOutputStream:close	()V
    //   52: aload 6
    //   54: invokevirtual 263	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   57: astore 6
    //   59: aload_0
    //   60: ldc_w 265
    //   63: aload 6
    //   65: arraylength
    //   66: invokestatic 123	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   69: ldc2_w 266
    //   72: aload 6
    //   74: arraylength
    //   75: i2l
    //   76: lmul
    //   77: aload_2
    //   78: arraylength
    //   79: i2l
    //   80: ldiv
    //   81: invokestatic 272	java/lang/Long:valueOf	(J)Ljava/lang/Long;
    //   84: aload_1
    //   85: invokevirtual 275	com/google/android/gms/analytics/internal/l:a	(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   88: aload 6
    //   90: arraylength
    //   91: aload_2
    //   92: arraylength
    //   93: if_icmple +21 -> 114
    //   96: aload_0
    //   97: ldc_w 277
    //   100: aload 6
    //   102: arraylength
    //   103: invokestatic 123	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   106: aload_2
    //   107: arraylength
    //   108: invokestatic 123	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   111: invokevirtual 279	com/google/android/gms/analytics/internal/l:c	(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
    //   114: invokestatic 141	com/google/android/gms/analytics/internal/l:A	()Z
    //   117: ifeq +33 -> 150
    //   120: aload_0
    //   121: ldc_w 281
    //   124: new 186	java/lang/StringBuilder
    //   127: dup
    //   128: ldc 14
    //   130: invokespecial 282	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   133: new 16	java/lang/String
    //   136: dup
    //   137: aload_2
    //   138: invokespecial 146	java/lang/String:<init>	([B)V
    //   141: invokevirtual 202	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   144: invokevirtual 208	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   147: invokevirtual 148	com/google/android/gms/analytics/internal/l:a	(Ljava/lang/String;Ljava/lang/Object;)V
    //   150: aload_0
    //   151: aload_1
    //   152: invokespecial 94	com/google/android/gms/analytics/internal/l:b	(Ljava/net/URL;)Ljava/net/HttpURLConnection;
    //   155: astore_1
    //   156: aload_1
    //   157: iconst_1
    //   158: invokevirtual 152	java/net/HttpURLConnection:setDoOutput	(Z)V
    //   161: aload_1
    //   162: ldc_w 284
    //   165: ldc_w 286
    //   168: invokevirtual 290	java/net/HttpURLConnection:addRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   171: aload_1
    //   172: aload 6
    //   174: arraylength
    //   175: invokevirtual 156	java/net/HttpURLConnection:setFixedLengthStreamingMode	(I)V
    //   178: aload_1
    //   179: invokevirtual 99	java/net/HttpURLConnection:connect	()V
    //   182: aload_1
    //   183: invokevirtual 160	java/net/HttpURLConnection:getOutputStream	()Ljava/io/OutputStream;
    //   186: astore_2
    //   187: aload_2
    //   188: aload 6
    //   190: invokevirtual 165	java/io/OutputStream:write	([B)V
    //   193: aload_2
    //   194: invokevirtual 170	java/io/OutputStream:close	()V
    //   197: aload_0
    //   198: aload_1
    //   199: invokespecial 102	com/google/android/gms/analytics/internal/l:a	(Ljava/net/HttpURLConnection;)V
    //   202: aload_1
    //   203: invokevirtual 106	java/net/HttpURLConnection:getResponseCode	()I
    //   206: istore_3
    //   207: iload_3
    //   208: sipush 200
    //   211: if_icmpne +10 -> 221
    //   214: aload_0
    //   215: invokevirtual 110	com/google/android/gms/analytics/internal/l:s	()Lcom/google/android/gms/analytics/internal/v;
    //   218: invokevirtual 115	com/google/android/gms/analytics/internal/v:g	()V
    //   221: aload_0
    //   222: ldc -89
    //   224: iload_3
    //   225: invokestatic 123	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   228: invokevirtual 91	com/google/android/gms/analytics/internal/l:b	(Ljava/lang/String;Ljava/lang/Object;)V
    //   231: aload_1
    //   232: ifnull +7 -> 239
    //   235: aload_1
    //   236: invokevirtual 126	java/net/HttpURLConnection:disconnect	()V
    //   239: iload_3
    //   240: ireturn
    //   241: astore_2
    //   242: aconst_null
    //   243: astore_1
    //   244: aload_0
    //   245: ldc_w 292
    //   248: aload_2
    //   249: invokevirtual 131	com/google/android/gms/analytics/internal/l:d	(Ljava/lang/String;Ljava/lang/Object;)V
    //   252: aload 4
    //   254: ifnull +8 -> 262
    //   257: aload 4
    //   259: invokevirtual 170	java/io/OutputStream:close	()V
    //   262: aload_1
    //   263: ifnull +7 -> 270
    //   266: aload_1
    //   267: invokevirtual 126	java/net/HttpURLConnection:disconnect	()V
    //   270: iconst_0
    //   271: ireturn
    //   272: astore_2
    //   273: aload_0
    //   274: ldc_w 294
    //   277: aload_2
    //   278: invokevirtual 175	com/google/android/gms/analytics/internal/l:e	(Ljava/lang/String;Ljava/lang/Object;)V
    //   281: goto -19 -> 262
    //   284: astore_2
    //   285: aconst_null
    //   286: astore_1
    //   287: aload 5
    //   289: astore 4
    //   291: aload 4
    //   293: ifnull +8 -> 301
    //   296: aload 4
    //   298: invokevirtual 170	java/io/OutputStream:close	()V
    //   301: aload_1
    //   302: ifnull +7 -> 309
    //   305: aload_1
    //   306: invokevirtual 126	java/net/HttpURLConnection:disconnect	()V
    //   309: aload_2
    //   310: athrow
    //   311: astore 4
    //   313: aload_0
    //   314: ldc_w 294
    //   317: aload 4
    //   319: invokevirtual 175	com/google/android/gms/analytics/internal/l:e	(Ljava/lang/String;Ljava/lang/Object;)V
    //   322: goto -21 -> 301
    //   325: astore_2
    //   326: aload 5
    //   328: astore 4
    //   330: goto -39 -> 291
    //   333: astore 5
    //   335: aload_2
    //   336: astore 4
    //   338: aload 5
    //   340: astore_2
    //   341: goto -50 -> 291
    //   344: astore_2
    //   345: goto -54 -> 291
    //   348: astore_2
    //   349: goto -105 -> 244
    //   352: astore 5
    //   354: aload_2
    //   355: astore 4
    //   357: aload 5
    //   359: astore_2
    //   360: goto -116 -> 244
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	363	0	this	l
    //   0	363	1	paramURL	URL
    //   0	363	2	paramArrayOfByte	byte[]
    //   206	34	3	i	int
    //   4	293	4	localObject1	Object
    //   311	7	4	localIOException1	IOException
    //   328	28	4	localObject2	Object
    //   1	326	5	localObject3	Object
    //   333	6	5	localObject4	Object
    //   352	6	5	localIOException2	IOException
    //   23	166	6	localObject5	Object
    //   34	9	7	localGZIPOutputStream	java.util.zip.GZIPOutputStream
    // Exception table:
    //   from	to	target	type
    //   16	114	241	java/io/IOException
    //   114	150	241	java/io/IOException
    //   150	156	241	java/io/IOException
    //   257	262	272	java/io/IOException
    //   16	114	284	finally
    //   114	150	284	finally
    //   150	156	284	finally
    //   296	301	311	java/io/IOException
    //   156	187	325	finally
    //   197	207	325	finally
    //   214	221	325	finally
    //   221	231	325	finally
    //   187	197	333	finally
    //   244	252	344	finally
    //   156	187	348	java/io/IOException
    //   197	207	348	java/io/IOException
    //   214	221	348	java/io/IOException
    //   221	231	348	java/io/IOException
    //   187	197	352	java/io/IOException
  }
  
  private HttpURLConnection b(URL paramURL)
  {
    paramURL = paramURL.openConnection();
    if (!(paramURL instanceof HttpURLConnection)) {
      throw new IOException("Failed to obtain http connection");
    }
    paramURL = (HttpURLConnection)paramURL;
    paramURL.setDefaultUseCaches(false);
    p();
    paramURL.setConnectTimeout(((Integer)bl.E.a()).intValue());
    p();
    paramURL.setReadTimeout(((Integer)bl.F.a()).intValue());
    paramURL.setInstanceFollowRedirects(false);
    paramURL.setRequestProperty("User-Agent", this.a);
    paramURL.setDoInput(true);
    return paramURL;
  }
  
  private List<Long> b(List<d> paramList)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    paramList = paramList.iterator();
    d localD;
    boolean bool;
    label58:
    Object localObject;
    int i;
    if (paramList.hasNext())
    {
      localD = (d)paramList.next();
      aq.a(localD);
      if (localD.e()) {
        break label129;
      }
      bool = true;
      localObject = a(localD, bool);
      if (localObject != null) {
        break label134;
      }
      o().a(localD, "Error formatting hit for upload");
      i = 1;
    }
    for (;;)
    {
      if (i != 0)
      {
        localArrayList.add(Long.valueOf(localD.c()));
        i = localArrayList.size();
        p();
        if (i < bd.f()) {
          break;
        }
      }
      return localArrayList;
      label129:
      bool = false;
      break label58;
      label134:
      i = ((String)localObject).length();
      p();
      if (i <= ((Integer)bl.u.a()).intValue())
      {
        localObject = a(localD, (String)localObject);
        if (localObject == null) {
          f("Failed to build collect GET endpoint url");
        }
      }
      URL localURL;
      label313:
      do
      {
        for (;;)
        {
          i = 0;
          break;
          if (a((URL)localObject) == 200)
          {
            i = 1;
            break;
          }
          i = 0;
          break;
          localObject = a(localD, false);
          if (localObject == null)
          {
            o().a(localD, "Error formatting hit for POST upload");
            i = 1;
            break;
          }
          localObject = ((String)localObject).getBytes();
          i = localObject.length;
          p();
          if (i > ((Integer)bl.z.a()).intValue())
          {
            o().a(localD, "Hit payload exceeds size limit");
            i = 1;
            break;
          }
          localURL = a(localD);
          if (localURL != null) {
            break label313;
          }
          f("Failed to build collect POST endpoint url");
        }
      } while (a(localURL, (byte[])localObject) != 200);
      i = 1;
    }
  }
  
  private URL d()
  {
    Object localObject = new StringBuilder();
    p();
    localObject = ((StringBuilder)localObject).append(bd.h());
    p();
    localObject = (String)bl.t.a();
    try
    {
      localObject = new URL((String)localObject);
      return localObject;
    }
    catch (MalformedURLException localMalformedURLException)
    {
      e("Error trying to parse the hardcoded host url", localMalformedURLException);
    }
    return null;
  }
  
  final String a(d paramD, boolean paramBoolean)
  {
    aq.a(paramD);
    StringBuilder localStringBuilder = new StringBuilder();
    try
    {
      Iterator localIterator = paramD.b().entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        String str = (String)localEntry.getKey();
        if ((!"ht".equals(str)) && (!"qt".equals(str)) && (!"AppUID".equals(str)) && (!"z".equals(str)) && (!"_gmsv".equals(str))) {
          a(localStringBuilder, str, (String)localEntry.getValue());
        }
      }
      a(localStringBuilder, "ht", String.valueOf(paramD.d()));
    }
    catch (UnsupportedEncodingException paramD)
    {
      e("Failed to encode name or value", paramD);
      return null;
    }
    a(localStringBuilder, "qt", String.valueOf(m().a() - paramD.d()));
    p();
    if (k.a) {
      a(localStringBuilder, "_gmsv", ad.a);
    }
    long l;
    if (paramBoolean)
    {
      l = paramD.f();
      if (l == 0L) {
        break label247;
      }
    }
    for (paramD = String.valueOf(l);; paramD = String.valueOf(l))
    {
      a(localStringBuilder, "z", paramD);
      return localStringBuilder.toString();
      label247:
      l = paramD.c();
    }
  }
  
  public final List<Long> a(List<d> paramList)
  {
    boolean bool2 = true;
    l();
    C();
    aq.a(paramList);
    Object localObject;
    int j;
    boolean bool1;
    int i;
    if (!p().k().isEmpty())
    {
      localObject = this.b;
      p();
      if (((p)localObject).a(((Integer)bl.C.a()).intValue() * 1000L)) {}
    }
    else
    {
      j = 0;
      bool1 = false;
      i = j;
      label74:
      if (i == 0) {
        break label388;
      }
      if (paramList.isEmpty()) {
        break label249;
      }
    }
    ArrayList localArrayList;
    for (;;)
    {
      aq.b(bool2);
      a("Uploading batched hits. compression, count", Boolean.valueOf(bool1), Integer.valueOf(paramList.size()));
      localObject = new m(this);
      localArrayList = new ArrayList();
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        d localD = (d)paramList.next();
        if (!((m)localObject).a(localD)) {
          break;
        }
        localArrayList.add(Long.valueOf(localD.c()));
      }
      p();
      if (av.a((String)bl.v.a()) != av.a) {}
      for (i = 1;; i = 0)
      {
        p();
        j = i;
        if (az.a((String)bl.w.a()) != az.b) {
          break;
        }
        bool1 = true;
        break label74;
      }
      label249:
      bool2 = false;
    }
    if (((m)localObject).a() == 0) {
      return localArrayList;
    }
    paramList = d();
    if (paramList == null) {
      f("Failed to build batching endpoint url");
    }
    for (;;)
    {
      return Collections.emptyList();
      if (bool1) {}
      for (i = b(paramList, ((m)localObject).b()); 200 == i; i = a(paramList, ((m)localObject).b()))
      {
        a("Batched upload completed. Hits batched", Integer.valueOf(((m)localObject).a()));
        return localArrayList;
      }
      a("Network error uploading hits. status code", Integer.valueOf(i));
      if (p().k().contains(Integer.valueOf(i)))
      {
        e("Server instructed the client to stop batching");
        this.b.a();
      }
    }
    label388:
    return b(paramList);
  }
  
  protected final void a()
  {
    a("Network initialized. User agent", this.a);
  }
  
  public final boolean b()
  {
    l();
    C();
    Object localObject1 = (ConnectivityManager)n().getSystemService("connectivity");
    try
    {
      localObject1 = ((ConnectivityManager)localObject1).getActiveNetworkInfo();
      if ((localObject1 == null) || (!((NetworkInfo)localObject1).isConnected()))
      {
        b("No network connectivity");
        return false;
      }
    }
    catch (SecurityException localSecurityException)
    {
      for (;;)
      {
        Object localObject2 = null;
      }
    }
    return true;
  }
}
