package com.google.android.gms.games.internal.multiplayer;

import android.os.Parcel;
import com.google.android.gms.common.internal.i;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.games.Game;
import com.google.android.gms.games.multiplayer.Invitation;
import com.google.android.gms.games.multiplayer.InvitationEntity;
import com.google.android.gms.games.multiplayer.Participant;
import java.util.ArrayList;
import java.util.Arrays;

public final class ZInvitationCluster
  implements SafeParcelable, Invitation
{
  public static final a a = new a();
  private final int b;
  private final ArrayList<InvitationEntity> c;
  
  ZInvitationCluster(int paramInt, ArrayList<InvitationEntity> paramArrayList)
  {
    this.b = paramInt;
    this.c = paramArrayList;
    l();
  }
  
  private void l()
  {
    if (!this.c.isEmpty()) {}
    for (boolean bool = true;; bool = false)
    {
      i.a(bool);
      Invitation localInvitation1 = (Invitation)this.c.get(0);
      int j = this.c.size();
      int i = 1;
      while (i < j)
      {
        Invitation localInvitation2 = (Invitation)this.c.get(i);
        i.a(localInvitation1.f().equals(localInvitation2.f()), "All the invitations must be from the same inviter");
        i += 1;
      }
    }
  }
  
  public final int b()
  {
    return this.b;
  }
  
  public final ArrayList<Invitation> c()
  {
    return new ArrayList(this.c);
  }
  
  public final Game d()
  {
    throw new UnsupportedOperationException("Method not supported on a cluster");
  }
  
  public final int describeContents()
  {
    return 0;
  }
  
  public final String e()
  {
    return ((InvitationEntity)this.c.get(0)).e();
  }
  
  public final boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof ZInvitationCluster)) {
      return false;
    }
    if (this == paramObject) {
      return true;
    }
    paramObject = (ZInvitationCluster)paramObject;
    if (paramObject.c.size() != this.c.size()) {
      return false;
    }
    int j = this.c.size();
    int i = 0;
    while (i < j)
    {
      if (!((Invitation)this.c.get(i)).equals((Invitation)paramObject.c.get(i))) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public final Participant f()
  {
    return ((InvitationEntity)this.c.get(0)).f();
  }
  
  public final long g()
  {
    throw new UnsupportedOperationException("Method not supported on a cluster");
  }
  
  public final int h()
  {
    throw new UnsupportedOperationException("Method not supported on a cluster");
  }
  
  public final int hashCode()
  {
    return Arrays.hashCode(this.c.toArray());
  }
  
  public final int i()
  {
    throw new UnsupportedOperationException("Method not supported on a cluster");
  }
  
  public final int j()
  {
    throw new UnsupportedOperationException("Method not supported on a cluster");
  }
  
  public final ArrayList<Participant> k()
  {
    throw new UnsupportedOperationException("Method not supported on a cluster");
  }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt)
  {
    a.a(this, paramParcel);
  }
}
