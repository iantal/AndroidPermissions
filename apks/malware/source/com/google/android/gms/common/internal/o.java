package com.google.android.gms.common.internal;

import android.accounts.Account;
import android.content.Context;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.Handler;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Looper;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.i;
import com.google.android.gms.common.api.j;
import com.google.android.gms.common.api.k;
import com.google.android.gms.common.d;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class o<T extends IInterface>
{
  public static final String[] d = { "service_esmobile", "service_googleme" };
  private final Context a;
  final Handler b;
  protected AtomicInteger c = new AtomicInteger(0);
  private final l e;
  private final Looper f;
  private final y g;
  private final Object h = new Object();
  private ai i;
  private k j;
  private T k;
  private final ArrayList<o<T>.r<?>> l = new ArrayList();
  private o<T>.t m;
  private int n = 1;
  private final Set<Scope> o;
  private final Account p;
  private j q;
  private com.google.android.gms.common.api.l r;
  private final int s;
  
  protected o(Context paramContext, Looper paramLooper, j paramJ, com.google.android.gms.common.api.l paramL)
  {
    this.a = ((Context)aq.a(paramContext));
    this.f = ((Looper)aq.a(paramLooper, "Looper must not be null"));
    this.g = y.a(paramContext);
    this.b = new q(this, paramLooper);
    this.s = 8;
    this.p = null;
    this.o = Collections.emptySet();
    this.e = new i(paramContext).a();
    this.q = ((j)aq.a(paramJ));
    this.r = ((com.google.android.gms.common.api.l)aq.a(paramL));
  }
  
  private void a(int paramInt, T paramT)
  {
    boolean bool = true;
    int i1;
    int i2;
    if (paramInt == 3)
    {
      i1 = 1;
      if (paramT == null) {
        break label312;
      }
      i2 = 1;
      label17:
      if (i1 != i2) {
        break label318;
      }
    }
    for (;;)
    {
      aq.b(bool);
      for (;;)
      {
        String str;
        t localT;
        synchronized (this.h)
        {
          this.n = paramInt;
          this.k = paramT;
          switch (paramInt)
          {
          case 3: 
            return;
          case 2: 
            if (this.m != null)
            {
              Log.e("GmsClient", "Calling connect() while still connected, missing disconnect() for " + a());
              paramT = this.g;
              str = a();
              localT = this.m;
              this.e.a();
              paramT.a(str, localT);
              this.c.incrementAndGet();
            }
            this.m = new t(this, this.c.get());
            if (this.g.a(a(), this.m, this.e.a())) {
              continue;
            }
            Log.e("GmsClient", "unable to connect to service: " + a());
            this.b.sendMessage(this.b.obtainMessage(3, this.c.get(), 9));
          }
        }
        if (this.m != null)
        {
          paramT = this.g;
          str = a();
          localT = this.m;
          this.e.a();
          paramT.a(str, localT);
          this.m = null;
        }
      }
      i1 = 0;
      break;
      label312:
      i2 = 0;
      break label17;
      label318:
      bool = false;
    }
  }
  
  private boolean a(int paramInt1, int paramInt2, T paramT)
  {
    synchronized (this.h)
    {
      if (this.n != paramInt1) {
        return false;
      }
      a(paramInt2, paramT);
      return true;
    }
  }
  
  protected static void d() {}
  
  protected static void e() {}
  
  public static Bundle j()
  {
    return null;
  }
  
  protected abstract T a(IBinder paramIBinder);
  
  protected abstract String a();
  
  protected final void a(int paramInt)
  {
    this.b.sendMessage(this.b.obtainMessage(6, paramInt, -1, new w(this)));
  }
  
  protected final void a(int paramInt1, Bundle paramBundle, int paramInt2)
  {
    this.b.sendMessage(this.b.obtainMessage(5, paramInt2, -1, new x(this, paramInt1, paramBundle)));
  }
  
  protected final void a(int paramInt1, IBinder paramIBinder, Bundle paramBundle, int paramInt2)
  {
    this.b.sendMessage(this.b.obtainMessage(1, paramInt2, -1, new v(this, paramInt1, paramIBinder, paramBundle)));
  }
  
  public final void a(Set<Scope> paramSet)
  {
    try
    {
      Object localObject = new Bundle();
      localObject = new GetServiceRequest(this.s).a(this.a.getPackageName()).a((Bundle)localObject);
      if (paramSet != null) {
        ((GetServiceRequest)localObject).a(paramSet);
      }
      this.i.a(new s(this, this.c.get()), (GetServiceRequest)localObject);
      return;
    }
    catch (DeadObjectException paramSet)
    {
      Log.w("GmsClient", "service died");
      this.b.sendMessage(this.b.obtainMessage(4, this.c.get(), 1));
      return;
    }
    catch (RemoteException paramSet)
    {
      Log.w("GmsClient", "Remote exception occurred", paramSet);
    }
  }
  
  protected abstract String b();
  
  public final void f()
  {
    int i1 = d.a(this.a);
    if (i1 != 0)
    {
      a(1, null);
      this.j = new u(this);
      this.b.sendMessage(this.b.obtainMessage(3, this.c.get(), i1));
      return;
    }
    this.j = ((k)aq.a(new u(this), "Connection progress callbacks cannot be null."));
    a(2, null);
  }
  
  public final boolean g()
  {
    synchronized (this.h)
    {
      if (this.n == 3)
      {
        bool = true;
        return bool;
      }
      boolean bool = false;
    }
  }
  
  public final boolean h()
  {
    synchronized (this.h)
    {
      if (this.n == 2)
      {
        bool = true;
        return bool;
      }
      boolean bool = false;
    }
  }
  
  public final void i()
  {
    this.c.incrementAndGet();
    synchronized (this.l)
    {
      int i2 = this.l.size();
      int i1 = 0;
      while (i1 < i2)
      {
        ((r)this.l.get(i1)).d();
        i1 += 1;
      }
      this.l.clear();
      a(1, null);
      return;
    }
  }
  
  public final T k()
  {
    synchronized (this.h)
    {
      if (this.n == 4) {
        throw new DeadObjectException();
      }
    }
    if (!g()) {
      throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
    }
    if (this.k != null) {}
    for (boolean bool = true;; bool = false)
    {
      aq.a(bool, "Client is connected but service is null");
      IInterface localIInterface = this.k;
      return localIInterface;
    }
  }
}
