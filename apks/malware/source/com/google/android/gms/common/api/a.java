package com.google.android.gms.common.api;

import android.os.Looper;
import android.util.Log;
import com.google.android.gms.common.internal.aq;
import com.google.android.gms.common.internal.e;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.CountDownLatch;

public abstract class a<R extends p>
  implements n<R>
{
  protected final b<R> a;
  private final Object b = new Object();
  private final CountDownLatch c = new CountDownLatch(1);
  private final ArrayList<PendingResult.BatchCallback> d = new ArrayList();
  private q<R> e;
  private volatile R f;
  private volatile boolean g;
  private boolean h;
  private boolean i;
  private e j;
  
  protected a(Looper paramLooper)
  {
    this.a = new b(paramLooper);
  }
  
  private boolean a()
  {
    return this.c.getCount() == 0L;
  }
  
  static void b(p paramP)
  {
    if ((paramP instanceof o)) {}
    try
    {
      ((o)paramP).b();
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      Log.w("AbstractPendingResult", "Unable to release " + paramP, localRuntimeException);
    }
  }
  
  private boolean b()
  {
    synchronized (this.b)
    {
      boolean bool = this.h;
      return bool;
    }
  }
  
  private R c()
  {
    boolean bool = true;
    synchronized (this.b)
    {
      if (!this.g)
      {
        aq.a(bool, "Result has already been consumed.");
        aq.a(a(), "Result is not ready.");
        p localP = this.f;
        this.f = null;
        this.e = null;
        this.g = true;
        return localP;
      }
      bool = false;
    }
  }
  
  public final void a(Status paramStatus)
  {
    synchronized (this.b)
    {
      if (!a())
      {
        a(b(paramStatus));
        this.i = true;
      }
      return;
    }
  }
  
  public final void a(R paramR)
  {
    boolean bool2 = true;
    for (;;)
    {
      synchronized (this.b)
      {
        if ((this.i) || (this.h))
        {
          b(paramR);
          return;
        }
        if (!a())
        {
          bool1 = true;
          aq.a(bool1, "Results have already been set");
          if (this.g) {
            break label164;
          }
          bool1 = bool2;
          aq.a(bool1, "Result has already been consumed");
          this.f = paramR;
          this.j = null;
          this.c.countDown();
          this.f.a();
          if (this.e != null)
          {
            this.a.a();
            if (!this.h) {
              this.a.a(this.e, c());
            }
          }
          paramR = this.d.iterator();
          if (!paramR.hasNext()) {
            break;
          }
          paramR.next();
        }
      }
      boolean bool1 = false;
      continue;
      label164:
      bool1 = false;
    }
    this.d.clear();
  }
  
  public final void a(q<R> paramQ)
  {
    if (!this.g) {}
    for (boolean bool = true;; bool = false)
    {
      aq.a(bool, "Result has already been consumed.");
      for (;;)
      {
        synchronized (this.b)
        {
          if (b()) {
            return;
          }
          if (a())
          {
            this.a.a(paramQ, c());
            return;
          }
        }
        this.e = paramQ;
      }
    }
  }
  
  protected abstract R b(Status paramStatus);
}
