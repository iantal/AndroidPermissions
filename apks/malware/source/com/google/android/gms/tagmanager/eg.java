package com.google.android.gms.tagmanager;

import com.google.android.gms.b.r;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public final class eg
{
  private static final Object a = null;
  private static Long b = new Long(0L);
  private static Double c = new Double(0.0D);
  private static ef d = ef.a(0L);
  private static String e = new String("");
  private static Boolean f = new Boolean(false);
  private static List<Object> g = new ArrayList(0);
  private static Map<Object, Object> h = new HashMap();
  private static r i = a(e);
  
  public static r a(Object paramObject)
  {
    boolean bool = false;
    Object localObject1 = new r();
    if ((paramObject instanceof r)) {
      return (r)paramObject;
    }
    if ((paramObject instanceof String))
    {
      ((r)localObject1).a = 1;
      ((r)localObject1).b = ((String)paramObject);
    }
    for (;;)
    {
      ((r)localObject1).l = bool;
      return localObject1;
      Object localObject2;
      Object localObject3;
      if ((paramObject instanceof List))
      {
        ((r)localObject1).a = 2;
        localObject2 = (List)paramObject;
        paramObject = new ArrayList(((List)localObject2).size());
        localObject2 = ((List)localObject2).iterator();
        bool = false;
        if (((Iterator)localObject2).hasNext())
        {
          localObject3 = a(((Iterator)localObject2).next());
          if (localObject3 == i) {
            return i;
          }
          if ((bool) || (((r)localObject3).l)) {}
          for (bool = true;; bool = false)
          {
            paramObject.add(localObject3);
            break;
          }
        }
        ((r)localObject1).c = ((r[])paramObject.toArray(new r[0]));
      }
      else if ((paramObject instanceof Map))
      {
        ((r)localObject1).a = 3;
        localObject3 = ((Map)paramObject).entrySet();
        paramObject = new ArrayList(((Set)localObject3).size());
        localObject2 = new ArrayList(((Set)localObject3).size());
        localObject3 = ((Set)localObject3).iterator();
        bool = false;
        if (((Iterator)localObject3).hasNext())
        {
          Object localObject4 = (Map.Entry)((Iterator)localObject3).next();
          r localR = a(((Map.Entry)localObject4).getKey());
          localObject4 = a(((Map.Entry)localObject4).getValue());
          if ((localR == i) || (localObject4 == i)) {
            return i;
          }
          if ((bool) || (localR.l) || (((r)localObject4).l)) {}
          for (bool = true;; bool = false)
          {
            paramObject.add(localR);
            ((List)localObject2).add(localObject4);
            break;
          }
        }
        ((r)localObject1).d = ((r[])paramObject.toArray(new r[0]));
        ((r)localObject1).e = ((r[])((List)localObject2).toArray(new r[0]));
      }
      else if (c(paramObject))
      {
        ((r)localObject1).a = 1;
        ((r)localObject1).b = paramObject.toString();
      }
      else if (d(paramObject))
      {
        ((r)localObject1).a = 6;
        ((r)localObject1).h = e(paramObject);
      }
      else
      {
        if (!(paramObject instanceof Boolean)) {
          break;
        }
        ((r)localObject1).a = 8;
        ((r)localObject1).i = ((Boolean)paramObject).booleanValue();
      }
    }
    localObject1 = new StringBuilder("Converting to Value from unknown object type: ");
    if (paramObject == null) {}
    for (paramObject = "null";; paramObject = paramObject.getClass().toString())
    {
      bj.a(paramObject);
      return i;
    }
  }
  
  private static ef a(String paramString)
  {
    try
    {
      ef localEf = ef.a(paramString);
      return localEf;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      bj.a("Failed to convert '" + paramString + "' to a number.");
    }
    return d;
  }
  
  public static Object a()
  {
    return a;
  }
  
  public static String a(r paramR)
  {
    return b(e(paramR));
  }
  
  public static ef b(r paramR)
  {
    paramR = e(paramR);
    if ((paramR instanceof ef)) {
      return (ef)paramR;
    }
    if (d(paramR)) {
      return ef.a(e(paramR));
    }
    if (c(paramR))
    {
      if ((paramR instanceof Number)) {}
      for (double d1 = ((Number)paramR).doubleValue();; d1 = 0.0D)
      {
        return ef.a(Double.valueOf(d1));
        bj.a("getDouble received non-Number");
      }
    }
    return a(b(paramR));
  }
  
  public static Long b()
  {
    return b;
  }
  
  private static String b(Object paramObject)
  {
    if (paramObject == null) {
      return e;
    }
    return paramObject.toString();
  }
  
  public static Boolean c()
  {
    return f;
  }
  
  public static Long c(r paramR)
  {
    paramR = e(paramR);
    if (d(paramR)) {
      return Long.valueOf(e(paramR));
    }
    paramR = a(b(paramR));
    if (paramR == d) {
      return b;
    }
    return Long.valueOf(paramR.longValue());
  }
  
  private static boolean c(Object paramObject)
  {
    return ((paramObject instanceof Double)) || ((paramObject instanceof Float)) || (((paramObject instanceof ef)) && (((ef)paramObject).a()));
  }
  
  public static ef d()
  {
    return d;
  }
  
  public static Boolean d(r paramR)
  {
    paramR = e(paramR);
    if ((paramR instanceof Boolean)) {
      return (Boolean)paramR;
    }
    paramR = b(paramR);
    if ("true".equalsIgnoreCase(paramR)) {
      return Boolean.TRUE;
    }
    if ("false".equalsIgnoreCase(paramR)) {
      return Boolean.FALSE;
    }
    return f;
  }
  
  private static boolean d(Object paramObject)
  {
    return ((paramObject instanceof Byte)) || ((paramObject instanceof Short)) || ((paramObject instanceof Integer)) || ((paramObject instanceof Long)) || (((paramObject instanceof ef)) && (((ef)paramObject).b()));
  }
  
  private static long e(Object paramObject)
  {
    if ((paramObject instanceof Number)) {
      return ((Number)paramObject).longValue();
    }
    bj.a("getInt64 received non-Number");
    return 0L;
  }
  
  public static Object e(r paramR)
  {
    int m = 0;
    int k = 0;
    int j = 0;
    if (paramR == null) {
      return a;
    }
    Object localObject1;
    Object localObject2;
    switch (paramR.a)
    {
    default: 
      bj.a("Failed to convert a value of type: " + paramR.a);
      return a;
    case 1: 
      return paramR.b;
    case 2: 
      localObject1 = new ArrayList(paramR.c.length);
      paramR = paramR.c;
      k = paramR.length;
      while (j < k)
      {
        localObject2 = e(paramR[j]);
        if (localObject2 == a) {
          return a;
        }
        ((ArrayList)localObject1).add(localObject2);
        j += 1;
      }
      return localObject1;
    case 3: 
      if (paramR.d.length != paramR.e.length)
      {
        bj.a("Converting an invalid value to object: " + paramR.toString());
        return a;
      }
      localObject1 = new HashMap(paramR.e.length);
      j = m;
      while (j < paramR.d.length)
      {
        localObject2 = e(paramR.d[j]);
        Object localObject3 = e(paramR.e[j]);
        if ((localObject2 == a) || (localObject3 == a)) {
          return a;
        }
        ((Map)localObject1).put(localObject2, localObject3);
        j += 1;
      }
      return localObject1;
    case 4: 
      bj.a("Trying to convert a macro reference to object");
      return a;
    case 5: 
      bj.a("Trying to convert a function id to object");
      return a;
    case 6: 
      return Long.valueOf(paramR.h);
    case 7: 
      localObject1 = new StringBuffer();
      paramR = paramR.j;
      m = paramR.length;
      j = k;
      while (j < m)
      {
        localObject2 = a(paramR[j]);
        if (localObject2 == e) {
          return a;
        }
        ((StringBuffer)localObject1).append((String)localObject2);
        j += 1;
      }
      return ((StringBuffer)localObject1).toString();
    }
    return Boolean.valueOf(paramR.i);
  }
  
  public static String e()
  {
    return e;
  }
  
  public static r f()
  {
    return i;
  }
}
