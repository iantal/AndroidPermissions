package com.google.android.gms.tagmanager;

import android.content.Context;
import com.google.android.gms.b.f;
import com.google.android.gms.b.r;
import com.google.android.gms.b.wj;
import com.google.android.gms.b.wk;
import com.google.android.gms.b.wm;
import com.google.android.gms.b.wo;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

final class db
{
  private static final ca<r> a = new ca(eg.f(), true);
  private final wm b;
  private final ag c;
  private final Map<String, ai> d;
  private final Map<String, ai> e;
  private final Map<String, ai> f;
  private final eu<wk, ca<r>> g;
  private final eu<String, dh> h;
  private final Set<wo> i;
  private final h j;
  private final Map<String, di> k;
  private volatile String l;
  private int m;
  
  public db(Context paramContext, wm paramWm, h paramH, fm paramFm1, fm paramFm2, ag paramAg)
  {
    if (paramWm == null) {
      throw new NullPointerException("resource cannot be null");
    }
    this.b = paramWm;
    this.i = new HashSet(paramWm.a());
    this.j = paramH;
    this.c = paramAg;
    paramWm = new dc(this);
    new ev();
    this.g = ev.a(paramWm);
    paramWm = new dd(this);
    new ev();
    this.h = ev.a(paramWm);
    this.d = new HashMap();
    b(new eq(paramContext));
    b(new fl(paramFm2));
    b(new fv(paramH));
    b(new eh(paramContext, paramH));
    b(new ea(paramContext, paramH));
    this.e = new HashMap();
    c(new fj());
    c(new ad());
    c(new ae());
    c(new ak());
    c(new al());
    c(new be());
    c(new bf());
    c(new cn());
    c(new dw());
    this.f = new HashMap();
    a(new ba(paramContext));
    a(new cg(paramContext));
    a(new el(paramContext));
    a(new em(paramContext));
    a(new en(paramContext));
    a(new eo(paramContext));
    a(new ep(paramContext));
    a(new ey());
    a(new fi(this.b.b()));
    a(new fl(paramFm1));
    a(new fo(paramH));
    a(new z(paramContext));
    a(new aa());
    a(new ac());
    a(new ah(this));
    a(new am());
    a(new an());
    a(new av(paramContext));
    a(new ax());
    a(new bd());
    a(new bl());
    a(new bn(paramContext));
    a(new cb());
    a(new cf());
    a(new ck());
    a(new cm());
    a(new co(paramContext));
    a(new dj());
    a(new dk());
    a(new dz());
    a(new ei());
    this.k = new HashMap();
    paramContext = this.i.iterator();
    while (paramContext.hasNext())
    {
      paramWm = (wo)paramContext.next();
      int n = 0;
      while (n < paramWm.e().size())
      {
        paramH = (wk)paramWm.e().get(n);
        paramFm1 = a(this.k, a(paramH));
        paramFm1.a(paramWm);
        paramFm1.a(paramWm, paramH);
        paramFm1.a(paramWm, "Unknown");
        n += 1;
      }
      n = 0;
      while (n < paramWm.h().size())
      {
        paramH = (wk)paramWm.h().get(n);
        paramFm1 = a(this.k, a(paramH));
        paramFm1.a(paramWm);
        paramFm1.b(paramWm, paramH);
        paramFm1.b(paramWm, "Unknown");
        n += 1;
      }
    }
    paramContext = this.b.c().entrySet().iterator();
    while (paramContext.hasNext())
    {
      paramWm = (Map.Entry)paramContext.next();
      paramH = ((List)paramWm.getValue()).iterator();
      while (paramH.hasNext())
      {
        paramFm1 = (wk)paramH.next();
        if (!eg.d((r)paramFm1.a().get(f.bM.toString())).booleanValue()) {
          a(this.k, (String)paramWm.getKey()).a(paramFm1);
        }
      }
    }
  }
  
  private ca<r> a(r paramR, Set<String> paramSet, ej paramEj)
  {
    if (!paramR.l) {
      return new ca(paramR, true);
    }
    ca localCa1;
    switch (paramR.a)
    {
    case 5: 
    case 6: 
    default: 
      bj.a("Unknown type: " + paramR.a);
      return a;
    case 2: 
      localR = wj.a(paramR);
      localR.c = new r[paramR.c.length];
      n = 0;
      while (n < paramR.c.length)
      {
        localCa1 = a(paramR.c[n], paramSet, paramEj.a());
        if (localCa1 == a) {
          return a;
        }
        localR.c[n] = ((r)localCa1.a());
        n += 1;
      }
      return new ca(localR, false);
    case 3: 
      localR = wj.a(paramR);
      if (paramR.d.length != paramR.e.length)
      {
        bj.a("Invalid serving value: " + paramR.toString());
        return a;
      }
      localR.d = new r[paramR.d.length];
      localR.e = new r[paramR.d.length];
      n = 0;
      while (n < paramR.d.length)
      {
        localCa1 = a(paramR.d[n], paramSet, paramEj.b());
        ca localCa2 = a(paramR.e[n], paramSet, paramEj.c());
        if ((localCa1 == a) || (localCa2 == a)) {
          return a;
        }
        localR.d[n] = ((r)localCa1.a());
        localR.e[n] = ((r)localCa2.a());
        n += 1;
      }
      return new ca(localR, false);
    case 4: 
      if (paramSet.contains(paramR.f))
      {
        bj.a("Macro cycle detected.  Current macro reference: " + paramR.f + ".  Previous macro references: " + paramSet.toString() + ".");
        return a;
      }
      paramSet.add(paramR.f);
      paramEj = ek.a(a(paramR.f, paramSet, paramEj.e()), paramR.k);
      paramSet.remove(paramR.f);
      return paramEj;
    }
    r localR = wj.a(paramR);
    localR.j = new r[paramR.j.length];
    int n = 0;
    while (n < paramR.j.length)
    {
      localCa1 = a(paramR.j[n], paramSet, paramEj.d());
      if (localCa1 == a) {
        return a;
      }
      localR.j[n] = ((r)localCa1.a());
      n += 1;
    }
    return new ca(localR, false);
  }
  
  private ca<Boolean> a(wk paramWk, Set<String> paramSet, cp paramCp)
  {
    paramWk = a(this.e, paramWk, paramSet, paramCp);
    paramSet = eg.d((r)paramWk.a());
    eg.a(paramSet);
    return new ca(paramSet, paramWk.b());
  }
  
  private ca<Boolean> a(wo paramWo, Set<String> paramSet, cs paramCs)
  {
    Object localObject = paramWo.b().iterator();
    boolean bool = true;
    if (((Iterator)localObject).hasNext())
    {
      ca localCa = a((wk)((Iterator)localObject).next(), paramSet, paramCs.a());
      if (((Boolean)localCa.a()).booleanValue())
      {
        eg.a(Boolean.valueOf(false));
        return new ca(Boolean.valueOf(false), localCa.b());
      }
      if ((bool) && (localCa.b())) {}
      for (bool = true;; bool = false) {
        break;
      }
    }
    paramWo = paramWo.a().iterator();
    while (paramWo.hasNext())
    {
      localObject = a((wk)paramWo.next(), paramSet, paramCs.b());
      if (!((Boolean)((ca)localObject).a()).booleanValue())
      {
        eg.a(Boolean.valueOf(false));
        return new ca(Boolean.valueOf(false), ((ca)localObject).b());
      }
      if ((bool) && (((ca)localObject).b())) {
        bool = true;
      } else {
        bool = false;
      }
    }
    eg.a(Boolean.valueOf(true));
    return new ca(Boolean.valueOf(true), bool);
  }
  
  private ca<r> a(String paramString, Set<String> paramSet, bm paramBm)
  {
    this.m += 1;
    Object localObject = (dh)this.h.a(paramString);
    if (localObject != null)
    {
      paramString = this.c;
      a(((dh)localObject).b(), paramSet);
      this.m -= 1;
      return ((dh)localObject).a();
    }
    localObject = (di)this.k.get(paramString);
    if (localObject == null)
    {
      bj.a(b() + "Invalid macro: " + paramString);
      this.m -= 1;
      return a;
    }
    ca localCa = a(((di)localObject).a(), ((di)localObject).b(), ((di)localObject).c(), ((di)localObject).e(), ((di)localObject).d(), paramSet, paramBm.b());
    if (((Set)localCa.a()).isEmpty()) {}
    for (localObject = ((di)localObject).f(); localObject == null; localObject = (wk)((Set)localCa.a()).iterator().next())
    {
      this.m -= 1;
      return a;
      if (((Set)localCa.a()).size() > 1) {
        bj.b(b() + "Multiple macros active for macroName " + paramString);
      }
    }
    paramBm = a(this.f, (wk)localObject, paramSet, paramBm.a());
    boolean bool;
    if ((localCa.b()) && (paramBm.b()))
    {
      bool = true;
      if (paramBm != a) {
        break label384;
      }
    }
    label384:
    for (paramBm = a;; paramBm = new ca(paramBm.a(), bool))
    {
      localObject = ((wk)localObject).b();
      if (paramBm.b()) {
        this.h.a(paramString, new dh(paramBm, (r)localObject));
      }
      a((r)localObject, paramSet);
      this.m -= 1;
      return paramBm;
      bool = false;
      break;
    }
  }
  
  private ca<r> a(Map<String, ai> paramMap, wk paramWk, Set<String> paramSet, cp paramCp)
  {
    boolean bool = true;
    Object localObject1 = (r)paramWk.a().get(f.aZ.toString());
    if (localObject1 == null)
    {
      bj.a("No function id in properties");
      return a;
    }
    localObject1 = ((r)localObject1).g;
    paramMap = (ai)paramMap.get(localObject1);
    if (paramMap == null)
    {
      bj.a((String)localObject1 + " has no backing implementation.");
      return a;
    }
    Object localObject2 = (ca)this.g.a(paramWk);
    if (localObject2 != null)
    {
      paramMap = this.c;
      return localObject2;
    }
    localObject2 = new HashMap();
    Iterator localIterator = paramWk.a().entrySet().iterator();
    int n = 1;
    if (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localEntry.getKey();
      Object localObject3 = paramCp.a();
      r localR = (r)localEntry.getValue();
      localEntry.getValue();
      localObject3 = a(localR, paramSet, ((cr)localObject3).a());
      if (localObject3 == a) {
        return a;
      }
      if (((ca)localObject3).b()) {
        paramWk.a((String)localEntry.getKey(), (r)((ca)localObject3).a());
      }
      for (;;)
      {
        ((Map)localObject2).put(localEntry.getKey(), ((ca)localObject3).a());
        break;
        n = 0;
      }
    }
    if (!paramMap.a(((Map)localObject2).keySet()))
    {
      bj.a("Incorrect keys for function " + (String)localObject1 + " required " + paramMap.c() + " had " + ((Map)localObject2).keySet());
      return a;
    }
    if ((n != 0) && (paramMap.a())) {}
    for (;;)
    {
      paramMap = new ca(paramMap.a((Map)localObject2), bool);
      if (bool) {
        this.g.a(paramWk, paramMap);
      }
      paramMap.a();
      return paramMap;
      bool = false;
    }
  }
  
  private ca<Set<wk>> a(Set<wo> paramSet, Map<wo, List<wk>> paramMap1, Map<wo, List<String>> paramMap2, Map<wo, List<wk>> paramMap3, Map<wo, List<String>> paramMap4, Set<String> paramSet1, da paramDa)
  {
    return a(paramSet, paramSet1, new de(this, paramMap1, paramMap2, paramMap3, paramMap4), paramDa);
  }
  
  private ca<Set<wk>> a(Set<wo> paramSet, Set<String> paramSet1, dg paramDg, da paramDa)
  {
    HashSet localHashSet1 = new HashSet();
    HashSet localHashSet2 = new HashSet();
    paramSet = paramSet.iterator();
    boolean bool = true;
    if (paramSet.hasNext())
    {
      wo localWo = (wo)paramSet.next();
      cs localCs = paramDa.a();
      ca localCa = a(localWo, paramSet1, localCs);
      if (((Boolean)localCa.a()).booleanValue()) {
        paramDg.a(localWo, localHashSet1, localHashSet2, localCs);
      }
      if ((bool) && (localCa.b())) {}
      for (bool = true;; bool = false) {
        break;
      }
    }
    localHashSet1.removeAll(localHashSet2);
    return new ca(localHashSet1, bool);
  }
  
  private static di a(Map<String, di> paramMap, String paramString)
  {
    di localDi2 = (di)paramMap.get(paramString);
    di localDi1 = localDi2;
    if (localDi2 == null)
    {
      localDi1 = new di();
      paramMap.put(paramString, localDi1);
    }
    return localDi1;
  }
  
  private static String a(wk paramWk)
  {
    return eg.a((r)paramWk.a().get(f.bk.toString()));
  }
  
  private void a(r paramR, Set<String> paramSet)
  {
    if (paramR == null) {}
    for (;;)
    {
      return;
      paramR = a(paramR, paramSet, new by());
      if (paramR != a)
      {
        paramR = eg.e((r)paramR.a());
        if ((paramR instanceof Map))
        {
          paramR = (Map)paramR;
          this.j.a(paramR);
          return;
        }
        if (!(paramR instanceof List)) {
          break;
        }
        paramR = ((List)paramR).iterator();
        while (paramR.hasNext())
        {
          paramSet = paramR.next();
          if ((paramSet instanceof Map))
          {
            paramSet = (Map)paramSet;
            this.j.a(paramSet);
          }
          else
          {
            bj.b("pushAfterEvaluate: value not a Map");
          }
        }
      }
    }
    bj.b("pushAfterEvaluate: value not a Map or List");
  }
  
  private void a(ai paramAi)
  {
    a(this.f, paramAi);
  }
  
  private static void a(Map<String, ai> paramMap, ai paramAi)
  {
    if (paramMap.containsKey(paramAi.b())) {
      throw new IllegalArgumentException("Duplicate function type name: " + paramAi.b());
    }
    paramMap.put(paramAi.b(), paramAi);
  }
  
  private String b()
  {
    if (this.m <= 1) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(Integer.toString(this.m));
    int n = 2;
    while (n < this.m)
    {
      localStringBuilder.append(' ');
      n += 1;
    }
    localStringBuilder.append(": ");
    return localStringBuilder.toString();
  }
  
  private void b(ai paramAi)
  {
    a(this.d, paramAi);
  }
  
  private void c(ai paramAi)
  {
    a(this.e, paramAi);
  }
  
  private void c(String paramString)
  {
    try
    {
      this.l = paramString;
      return;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  final String a()
  {
    try
    {
      String str = this.l;
      return str;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public final void a(String paramString)
  {
    try
    {
      c(paramString);
      paramString = this.c.b().b();
      Object localObject1 = this.i;
      Object localObject2 = paramString.b();
      localObject1 = ((Set)a((Set)localObject1, new HashSet(), new df(this), (da)localObject2).a()).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (wk)((Iterator)localObject1).next();
        a(this.d, (wk)localObject2, new HashSet(), paramString.a());
      }
      c(null);
    }
    finally {}
  }
  
  public final ca<r> b(String paramString)
  {
    this.m = 0;
    af localAf = this.c.a();
    return a(paramString, new HashSet(), localAf.a());
  }
}
