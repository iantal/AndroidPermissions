package com.revmob;

import android.app.Activity;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.view.Display;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.revmob.ads.banner.RevMobBanner;
import com.revmob.ads.fullscreen.FullscreenActivity;
import com.revmob.ads.fullscreen.RevMobFullscreen;
import com.revmob.ads.link.RevMobLink;
import com.revmob.ads.popup.RevMobPopup;
import com.revmob.android.RevMobContext;
import com.revmob.android.RevMobScreen;
import com.revmob.android.StoredData;
import com.revmob.android.UserInformation;
import com.revmob.client.RevMobClient;
import com.revmob.client.SessionClientListener;
import com.revmob.internal.AndroidHelper;
import com.revmob.internal.HTTPHelper;
import com.revmob.internal.RMLog;
import java.util.Calendar;
import java.util.List;

public class RevMob
{
  private static Activity bannerActivity;
  private static RevMobBanner bannerAd;
  private static RelativeLayout bannerLayout;
  private static RelativeLayout.LayoutParams bannerParams;
  protected static RevMob session;
  
  protected RevMob(Activity paramActivity, String paramString)
  {
    validateActivity(paramActivity);
    if (!new StoredData(paramActivity).isAlreadyTracked()) {}
    for (boolean bool = true;; bool = false)
    {
      HTTPHelper.setUserAgent(null, paramActivity);
      SessionClientListener localSessionClientListener = new SessionClientListener(paramActivity, bool);
      RevMobClient.getInstance().startSession(paramString, RevMobContext.toPayload(paramActivity), localSessionClientListener);
      RevMobScreen.load(paramActivity);
      return;
    }
  }
  
  public static RevMob session()
  {
    if (session == null) {
      RMLog.w("Call RevMobAds.start(activity, APP_ID) on application start/resume. It will help us to improve tracking and increase the eCPM.");
    }
    return session;
  }
  
  public static RevMob start(Activity paramActivity)
  {
    if (session == null) {
      try
      {
        paramActivity = start(paramActivity, paramActivity.getPackageManager().getApplicationInfo(paramActivity.getPackageName(), 128).metaData.getString("com.revmob.app.id"));
        return paramActivity;
      }
      catch (PackageManager.NameNotFoundException paramActivity)
      {
        throw new RuntimeException("You must the the revmob.app.id value in the AndroidManifest.xml file.");
      }
    }
    return session;
  }
  
  @Deprecated
  public static RevMob start(Activity paramActivity, String paramString)
  {
    if (session == null)
    {
      validatePermissions(paramActivity);
      validateActivity(paramActivity);
      validateFullscreenActivity(paramActivity);
      session = new RevMob(paramActivity, paramString);
    }
    return session;
  }
  
  private static void validateActivity(Activity paramActivity)
  {
    if (paramActivity == null) {
      throw new RuntimeException("RevMob: Activity must not be a null value.");
    }
  }
  
  private static void validateFullscreenActivity(Activity paramActivity)
  {
    if (!FullscreenActivity.isFullscreenActivityAvailable(paramActivity).booleanValue()) {
      RMLog.e("You must declare the RevMob FullscreenActivity in the AndroidManifest.xml file");
    }
  }
  
  private static void validatePermissions(Activity paramActivity)
  {
    if (!AndroidHelper.isPermissionEnabled(paramActivity, "INTERNET")) {
      RMLog.e(String.format("Permission %s is required. Add it to your AndroidManifest.xml file", new Object[] { "INTERNET" }));
    }
  }
  
  public RevMobLink createAdLink(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    return createAdLink(paramActivity, null, paramRevMobAdsListener);
  }
  
  public RevMobLink createAdLink(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    validateActivity(paramActivity);
    paramActivity = new RevMobLink(paramActivity, paramRevMobAdsListener);
    paramActivity.load(paramString);
    return paramActivity;
  }
  
  public RevMobBanner createBanner(Activity paramActivity)
  {
    return createBanner(paramActivity, null, null);
  }
  
  public RevMobBanner createBanner(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    return createBanner(paramActivity, null, paramRevMobAdsListener);
  }
  
  public RevMobBanner createBanner(Activity paramActivity, String paramString)
  {
    return createBanner(paramActivity, paramString, null);
  }
  
  public RevMobBanner createBanner(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    validateActivity(paramActivity);
    paramActivity = new RevMobBanner(paramActivity, paramRevMobAdsListener);
    paramActivity.load(paramString);
    return paramActivity;
  }
  
  public RevMobFullscreen createFullscreen(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    return createFullscreen(paramActivity, null, paramRevMobAdsListener);
  }
  
  public RevMobFullscreen createFullscreen(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    validateActivity(paramActivity);
    paramActivity = new RevMobFullscreen(paramActivity, paramRevMobAdsListener);
    paramActivity.load(paramString);
    return paramActivity;
  }
  
  public RevMobPopup createPopup(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    return createPopup(paramActivity, null, paramRevMobAdsListener);
  }
  
  public RevMobPopup createPopup(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    validateActivity(paramActivity);
    paramActivity = new RevMobPopup(paramActivity, paramRevMobAdsListener);
    paramActivity.load(paramString);
    return paramActivity;
  }
  
  public RevMobParallaxMode getParallaxMode()
  {
    return RevMobClient.getInstance().getParallaxMode();
  }
  
  public RevMobTestingMode getTestingMode()
  {
    return RevMobClient.getInstance().getTestingMode();
  }
  
  public int getUserAgeRangeMax()
  {
    return UserInformation.getInstance().getUserAgeRangeMax();
  }
  
  public int getUserAgeRangeMin()
  {
    return UserInformation.getInstance().getUserAgeRangeMin();
  }
  
  public Calendar getUserBirthday()
  {
    return UserInformation.getInstance().getUserBirthday();
  }
  
  public RevMobUserGender getUserGender()
  {
    return UserInformation.getInstance().getUserGender();
  }
  
  public List<String> getUserInterests()
  {
    return UserInformation.getInstance().getUserInterests();
  }
  
  public String getUserPage()
  {
    return UserInformation.getInstance().getUserPage();
  }
  
  public void hideBanner(Activity paramActivity)
  {
    releaseBanner(paramActivity);
  }
  
  public void hideLoadedBanner()
  {
    if (bannerActivity != null)
    {
      bannerActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          RevMob.bannerLayout.removeView(RevMob.bannerAd);
        }
      });
      return;
    }
    RMLog.e("No preloaded banner to hide! Call preloadBanner() and showLoadedBanner() first!");
  }
  
  public void openAdLink(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    createAdLink(paramActivity, null, paramRevMobAdsListener).open();
  }
  
  public void openAdLink(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    createAdLink(paramActivity, paramString, paramRevMobAdsListener).open();
  }
  
  public RelativeLayout preloadBanner(final Activity paramActivity, final int paramInt1, final int paramInt2, final int paramInt3, final int paramInt4, final int paramInt5, final String paramString, final RevMobAdsListener paramRevMobAdsListener)
  {
    paramActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        try
        {
          if (RevMob.bannerAd != null) {
            RevMob.this.releaseBanner(paramActivity);
          }
          RevMob.access$002(RevMob.this.createBanner(paramActivity, paramString, paramRevMobAdsListener));
          RevMob.access$102(new RelativeLayout(paramActivity.getApplicationContext()));
          RevMob.access$302(new RelativeLayout.LayoutParams(paramInt4, paramInt5));
          RevMob.bannerParams.leftMargin = paramInt2;
          RevMob.bannerParams.topMargin = paramInt3;
          if (paramInt1 == 48) {
            RevMob.bannerLayout.setGravity(48);
          }
          for (;;)
          {
            paramActivity.addContentView(RevMob.bannerLayout, new ViewGroup.LayoutParams(-1, -1));
            RevMob.access$202(paramActivity);
            return;
            RevMob.bannerLayout.setGravity(80);
          }
          return;
        }
        catch (Exception localException)
        {
          RMLog.e(localException.toString());
        }
      }
    });
    return bannerLayout;
  }
  
  public void printEnvironmentInformation(Activity paramActivity)
  {
    validateActivity(paramActivity);
    new RevMobContext(paramActivity).printEnvironmentInformation(RevMobClient.getInstance().getAppId());
  }
  
  public void releaseBanner(Activity paramActivity)
  {
    paramActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        try
        {
          RevMob.bannerLayout.removeView(RevMob.bannerAd);
          RevMob.bannerLayout.setVisibility(8);
          RevMob.access$102(null);
          RevMob.access$002(null);
          RevMob.access$202(null);
          return;
        }
        catch (Exception localException)
        {
          RMLog.e(localException.toString());
        }
      }
    });
  }
  
  public void releaseLoadedBanner()
  {
    if (bannerActivity != null)
    {
      hideLoadedBanner();
      releaseBanner(bannerActivity);
    }
  }
  
  public void setParallaxMode(RevMobParallaxMode paramRevMobParallaxMode)
  {
    RevMobClient.getInstance().setParallaxMode(paramRevMobParallaxMode);
  }
  
  public void setTestingMode(RevMobTestingMode paramRevMobTestingMode)
  {
    RevMobClient.getInstance().setTestingMode(paramRevMobTestingMode);
  }
  
  public void setTimeoutInSeconds(int paramInt)
  {
    RevMobClient.getInstance().setTimeoutInSeconds(paramInt);
  }
  
  public void setUserAgeRangeMax(int paramInt)
  {
    UserInformation.getInstance().setUserAgeRangeMax(paramInt);
  }
  
  public void setUserAgeRangeMin(int paramInt)
  {
    UserInformation.getInstance().setUserAgeRangeMin(paramInt);
  }
  
  public void setUserBirthday(Calendar paramCalendar)
  {
    UserInformation.getInstance().setUserBirthday(paramCalendar);
  }
  
  public void setUserEmail(String paramString)
  {
    UserInformation.getInstance().setEmail(paramString);
  }
  
  public void setUserGender(RevMobUserGender paramRevMobUserGender)
  {
    UserInformation.getInstance().setUserGender(paramRevMobUserGender);
  }
  
  public void setUserInterests(List<String> paramList)
  {
    UserInformation.getInstance().setUserInterests(paramList);
  }
  
  public void setUserLocation(double paramDouble1, double paramDouble2, float paramFloat)
  {
    UserInformation.getInstance().setUserLocationLatitude(paramDouble1);
    UserInformation.getInstance().setUserLocationLongitude(paramDouble2);
    UserInformation.getInstance().setUserLocationAccuracy(paramFloat);
  }
  
  public void setUserPage(String paramString)
  {
    UserInformation.getInstance().setUserPage(paramString);
  }
  
  public RelativeLayout showBanner(Activity paramActivity)
  {
    return showBanner(paramActivity, null, null);
  }
  
  public RelativeLayout showBanner(Activity paramActivity, int paramInt)
  {
    return showBanner(paramActivity, paramInt, null, null);
  }
  
  public RelativeLayout showBanner(Activity paramActivity, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    return showBanner(paramActivity, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, null, null);
  }
  
  public RelativeLayout showBanner(Activity paramActivity, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    paramActivity = preloadBanner(paramActivity, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramString, paramRevMobAdsListener);
    showLoadedBanner();
    return paramActivity;
  }
  
  public RelativeLayout showBanner(Activity paramActivity, int paramInt, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    int i = paramActivity.getWindowManager().getDefaultDisplay().getWidth();
    return showBanner(paramActivity, paramInt, 0, 0, i, i * 50 / 320, paramString, paramRevMobAdsListener);
  }
  
  public RelativeLayout showBanner(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    return showBanner(paramActivity, 80, paramString, paramRevMobAdsListener);
  }
  
  public void showFullscreen(Activity paramActivity)
  {
    createFullscreen(paramActivity, null, null).show();
  }
  
  public void showFullscreen(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    createFullscreen(paramActivity, null, paramRevMobAdsListener).show();
  }
  
  public void showFullscreen(Activity paramActivity, String paramString)
  {
    createFullscreen(paramActivity, paramString, null).show();
  }
  
  public void showFullscreen(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    createFullscreen(paramActivity, paramString, paramRevMobAdsListener).show();
  }
  
  public void showLoadedBanner()
  {
    if (bannerActivity != null)
    {
      hideLoadedBanner();
      bannerActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          RevMob.bannerLayout.addView(RevMob.bannerAd, RevMob.bannerParams);
        }
      });
      return;
    }
    RMLog.e("No preloaded banner to display! Call preloadBanner() first!");
  }
  
  public void showPopup(Activity paramActivity)
  {
    createPopup(paramActivity, null, null).show();
  }
  
  public void showPopup(Activity paramActivity, String paramString)
  {
    createPopup(paramActivity, paramString, null).show();
  }
  
  public void showPopup(Activity paramActivity, String paramString, RevMobAdsListener paramRevMobAdsListener)
  {
    createPopup(paramActivity, null, paramRevMobAdsListener).show();
  }
}
