package com.revmob.ads.popup;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.view.WindowManager.BadTokenException;
import com.revmob.RevMobAdsListener;
import com.revmob.ads.internal.Ad;
import com.revmob.ads.internal.AdState;
import com.revmob.ads.popup.client.PopupClientListener;
import com.revmob.ads.popup.client.PopupData;
import com.revmob.android.RevMobContext;
import com.revmob.client.AdData;
import com.revmob.client.RevMobClient;
import com.revmob.internal.MarketAsyncManager;
import com.revmob.internal.RMLog;
import com.revmob.internal.RevMobSoundPlayer;
import java.io.IOException;

public class RevMobPopup
  implements Ad
{
  private Activity activity;
  public boolean autoshow = false;
  private PopupData data;
  private RevMobAdsListener publisherListener;
  private AdState state;
  
  public RevMobPopup(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    this.activity = paramActivity;
    this.publisherListener = paramRevMobAdsListener;
    this.state = AdState.CREATED;
  }
  
  private void buildAndDisplayDialog()
  {
    try
    {
      if ((this.activity != null) && (!this.activity.isFinishing()))
      {
        new AlertDialog.Builder(this.activity).setTitle(this.data.getMessage()).setPositiveButton("Yes, sure!", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            RevMobPopup.this.activity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                new MarketAsyncManager(RevMobPopup.this.activity, RevMobPopup.this.data, RevMobPopup.this.publisherListener).execute(new Void[0]);
              }
            });
          }
        }).setNegativeButton("No, thanks.", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            paramAnonymousDialogInterface.dismiss();
            RevMobPopup.access$202(RevMobPopup.this, AdState.CLOSED);
          }
        }).show();
        if (this.publisherListener != null) {
          this.publisherListener.onRevMobAdDisplayed();
        }
        RevMobClient.getInstance().reportImpression(this.data.getImpressionUrl(), RevMobContext.toPayload(this.activity));
      }
      return;
    }
    catch (WindowManager.BadTokenException localBadTokenException)
    {
      RMLog.w("Invalid activity as argument: is there an activity running?");
    }
  }
  
  private boolean isLoaded()
  {
    return this.data != null;
  }
  
  private void playSoundOnShow()
  {
    RevMobSoundPlayer localRevMobSoundPlayer = new RevMobSoundPlayer();
    try
    {
      localRevMobSoundPlayer.playPopupSound(this.activity, this.data.getShowSoundURL());
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public void hide()
  {
    this.autoshow = false;
  }
  
  public void load()
  {
    load(null);
  }
  
  public void load(String paramString)
  {
    if ((this.state == AdState.CREATED) || (this.state == AdState.CLOSED)) {
      if (paramString == null) {
        break label75;
      }
    }
    label75:
    for (String str = "Loading Popup " + paramString;; str = "Loading Popup")
    {
      RMLog.i(str);
      RevMobClient.getInstance().fetchPopup(paramString, RevMobContext.toPayload(this.activity), new PopupClientListener(this, this.publisherListener));
      return;
    }
  }
  
  public void show()
  {
    this.autoshow = true;
    if ((isLoaded()) && (this.state != AdState.DISPLAYED))
    {
      this.state = AdState.DISPLAYED;
      this.activity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          RevMobPopup.this.buildAndDisplayDialog();
          RevMobPopup.this.playSoundOnShow();
        }
      });
    }
    while ((this.state == AdState.CREATED) || (this.state == AdState.CLOSED)) {
      return;
    }
    RMLog.i("The ad is not completely loaded yet. As soon as it is loaded, it is going to be displayed automatically.");
  }
  
  public void updateWithData(AdData paramAdData)
  {
    this.state = AdState.LOADED;
    this.data = ((PopupData)paramAdData);
    if (this.publisherListener != null) {
      this.publisherListener.onRevMobAdReceived();
    }
    if (this.autoshow) {
      show();
    }
  }
}
