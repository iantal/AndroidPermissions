package com.revmob.ads.banner.client;

import android.graphics.Bitmap;
import com.revmob.RevMobAdsListener;
import com.revmob.ads.internal.Ad;
import com.revmob.ads.internal.AdRevMobClientListener;
import com.revmob.ads.internal.AnimationConfiguration;
import com.revmob.ads.internal.CloseAnimationConfiguration;
import com.revmob.ads.internal.ShowAnimationConfiguration;
import com.revmob.internal.HTTPHelper;
import com.revmob.internal.RMLog;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class BannerClientListener
  extends AdRevMobClientListener
{
  public BannerClientListener(Ad paramAd, RevMobAdsListener paramRevMobAdsListener)
  {
    super(paramAd, paramRevMobAdsListener);
  }
  
  public void handleResponse(String paramString)
    throws JSONException
  {
    Object localObject3 = new JSONObject(paramString).getJSONArray("banners").getJSONObject(0);
    String str1 = getAppOrSite((JSONObject)localObject3);
    boolean bool1 = getOpenInside((JSONObject)localObject3);
    JSONArray localJSONArray = ((JSONObject)localObject3).getJSONArray("links");
    String str2 = getClickUrl(localJSONArray);
    boolean bool2 = getFollowRedirect((JSONObject)localObject3);
    String str3 = getImpressionUrl(localJSONArray);
    String str4 = getLinkByRel(localJSONArray, "html");
    String str5 = getLinkByRel(localJSONArray, "dsp_url");
    String str6 = getLinkByRel(localJSONArray, "dsp_html");
    ShowAnimationConfiguration localShowAnimationConfiguration = new ShowAnimationConfiguration();
    CloseAnimationConfiguration localCloseAnimationConfiguration = new CloseAnimationConfiguration();
    try
    {
      paramString = ((JSONObject)localObject3).getJSONObject("animation");
      long l = paramString.getLong("duration");
      localShowAnimationConfiguration.setTime(l);
      localCloseAnimationConfiguration.setTime(l);
      Object localObject1 = paramString.getJSONArray("show");
      int i = 0;
      while (i < ((JSONArray)localObject1).length())
      {
        localShowAnimationConfiguration.addAnimation(((JSONArray)localObject1).getString(i));
        i += 1;
      }
      paramString = paramString.getJSONArray("close");
      i = 0;
      while (i < paramString.length())
      {
        localCloseAnimationConfiguration.addAnimation(paramString.getString(i));
        i += 1;
      }
      try
      {
        localObject3 = ((JSONObject)localObject3).getJSONObject("sound");
        paramString = (String)localObject1;
        localObject1 = ((JSONObject)localObject3).getString("on_show");
        paramString = (String)localObject1;
        localObject3 = ((JSONObject)localObject3).getString("on_click");
        localObject2 = localObject3;
        paramString = (String)localObject1;
      }
      catch (JSONException localJSONException)
      {
        Object localObject2;
        for (;;) {}
      }
    }
    catch (JSONException paramString)
    {
      localObject1 = new String();
      localObject2 = new String();
      paramString = (String)localObject1;
    }
    localObject1 = null;
    if ((str5 != null) || (str6 != null)) {
      RMLog.d("Banner DSP");
    }
    for (;;)
    {
      if (((str2 != null) && ((str4 != null) || (localObject1 != null))) || (str5 != null) || (str6 != null))
      {
        RMLog.i("Banner loaded");
        this.ad.updateWithData(new BannerData(str3, str2, bool2, (Bitmap)localObject1, str4, str5, str6, localShowAnimationConfiguration, localCloseAnimationConfiguration, str1, bool1, paramString, (String)localObject2));
      }
      return;
      if (str4 == null)
      {
        localObject1 = getLinkByRel(localJSONArray, "image");
        localObject1 = new HTTPHelper().downloadBitmap((String)localObject1);
      }
    }
  }
}
