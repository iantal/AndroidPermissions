package com.revmob.android;

import com.revmob.RevMobUserGender;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class UserInformation
{
  private static RevMobUserGender userGender = RevMobUserGender.UNDEFINED;
  protected static UserInformation userInformation = null;
  private String email;
  private double maxLatitude = 90.0D;
  private double maxLongitude = 180.0D;
  private double minLatitude = -90.0D;
  private double minLongitude = -180.0D;
  private int userAgeRangeMax = -1;
  private int userAgeRangeMin = -1;
  private Calendar userBirthday = null;
  private List<String> userInterests = null;
  private float userLocationAccuracy = -1.0F;
  private double userLocationLatitude = 0.0D;
  private double userLocationLongitude = 0.0D;
  private String userPage = null;
  
  public UserInformation() {}
  
  public static UserInformation getInstance()
  {
    if (userInformation == null) {
      userInformation = new UserInformation();
    }
    return userInformation;
  }
  
  public JSONObject addUserData(JSONObject paramJSONObject)
    throws JSONException
  {
    if (this.userAgeRangeMin != -1) {
      paramJSONObject.put("age_range_min", this.userAgeRangeMin);
    }
    if (this.userAgeRangeMax != -1) {
      paramJSONObject.put("age_range_max", this.userAgeRangeMax);
    }
    if ((this.userAgeRangeMin > 0) && (this.userAgeRangeMax < 13)) {}
    do
    {
      Object localObject;
      Calendar localCalendar;
      do
      {
        return paramJSONObject;
        if (this.userBirthday == null) {
          break;
        }
        paramJSONObject.put("birthday", new SimpleDateFormat("yyyy-MM-dd", Locale.US).format(this.userBirthday.getTime()));
        localObject = Calendar.getInstance(Locale.US);
        ((Calendar)localObject).setTime(new Date());
        localCalendar = Calendar.getInstance(Locale.US);
        localCalendar.setTime(this.userBirthday.getTime());
        localCalendar.add(1, 13);
      } while (((Calendar)localObject).compareTo(localCalendar) == -1);
      if (this.email != null) {
        paramJSONObject.put("email", this.email);
      }
      if (userGender != RevMobUserGender.UNDEFINED) {
        paramJSONObject.put("gender", userGender.getValue());
      }
      if (this.userPage != null) {
        paramJSONObject.put("user_page", this.userPage);
      }
      if ((this.userInterests != null) && (this.userInterests.size() > 0))
      {
        localObject = new JSONArray();
        int i = 0;
        while (i < this.userInterests.size())
        {
          ((JSONArray)localObject).put(this.userInterests.get(i));
          i += 1;
        }
        paramJSONObject.put("interests", localObject);
      }
      if (this.userLocationAccuracy != -1.0F) {
        paramJSONObject.put("accuracy", this.userLocationAccuracy);
      }
      if ((this.userLocationLatitude != 0.0D) && (this.userLocationLatitude <= this.maxLatitude) && (this.userLocationLatitude >= this.minLatitude)) {
        paramJSONObject.put("latitude", this.userLocationLatitude);
      }
    } while ((this.userLocationLongitude == 0.0D) || (this.userLocationLongitude > this.maxLongitude) || (this.userLocationLongitude < this.minLongitude));
    paramJSONObject.put("longitude", this.userLocationLongitude);
    return paramJSONObject;
  }
  
  public String getEmail()
  {
    return this.email;
  }
  
  public int getUserAgeRangeMax()
  {
    return this.userAgeRangeMax;
  }
  
  public int getUserAgeRangeMin()
  {
    return this.userAgeRangeMin;
  }
  
  public Calendar getUserBirthday()
  {
    return this.userBirthday;
  }
  
  public RevMobUserGender getUserGender()
  {
    return userGender;
  }
  
  public List<String> getUserInterests()
  {
    return this.userInterests;
  }
  
  public String getUserPage()
  {
    return this.userPage;
  }
  
  public void setEmail(String paramString)
  {
    this.email = paramString;
  }
  
  public void setUserAgeRangeMax(int paramInt)
  {
    this.userAgeRangeMax = paramInt;
  }
  
  public void setUserAgeRangeMin(int paramInt)
  {
    this.userAgeRangeMin = paramInt;
  }
  
  public void setUserBirthday(Calendar paramCalendar)
  {
    this.userBirthday = paramCalendar;
  }
  
  public void setUserGender(RevMobUserGender paramRevMobUserGender)
  {
    userGender = paramRevMobUserGender;
  }
  
  public void setUserInterests(List<String> paramList)
  {
    this.userInterests = paramList;
  }
  
  public void setUserLocationAccuracy(float paramFloat)
  {
    this.userLocationAccuracy = paramFloat;
  }
  
  public void setUserLocationLatitude(double paramDouble)
  {
    this.userLocationLatitude = paramDouble;
  }
  
  public void setUserLocationLongitude(double paramDouble)
  {
    this.userLocationLongitude = paramDouble;
  }
  
  public void setUserPage(String paramString)
  {
    this.userPage = paramString;
  }
}
