package com.revmob.client;

import android.util.SparseArray;
import com.revmob.RevMobParallaxMode;
import com.revmob.RevMobTestingMode;
import com.revmob.internal.HTTPHelper;
import com.revmob.internal.RMLog;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.json.JSONException;

public class RevMobClient
{
  private static final String ADS_PATH = "/api/v4/mobile_apps/%s/%s/fetch_only.json";
  private static final String BAD_RESPONSE_MESSAGE = "Bad response from server.";
  private static final String DEFAULT_DOWNLOAD_ERROR_MESSAGE = "RevMob did not answered as expected.";
  private static final int DEFAULT_TIMEOUT = 30;
  private static final String INSTALL_URL = "/api/v4/mobile_apps/%s/install.json";
  private static final String INVALID_APP_ID = "Invalid App ID.";
  private static final String INVALID_TIMEOUT = "Invalid timeout.";
  private static final SparseArray<String> LOG_MESSAGES = new SparseArray();
  private static final String NO_MEMORY_MESSAGE = "It was not possible to load the RevMob banner because your device run out of RAM memory.";
  private static final String ONE_APP_ID_PER_APP = "You can use just one App Id per application.";
  private static final String PARSE_ERROR_MESSAGE = "Error on parse response from server.";
  private static final String PARSE_ERROR_MESSAGE2 = "Error on parse response from server. Unknown error.";
  private static final String PLACEMENT_ADS_PATH = "/api/v4/mobile_apps/%s/placements/%s/%s/fetch_only.json";
  private static final String PRODUCTION_SERVER_ADDRESS = "https://android.revmob.com";
  public static String SDK_NAME;
  public static String SDK_SOURCE_NAME;
  public static String SDK_SOURCE_VERSION;
  public static String SDK_VERSION;
  private static final String SESSIONS_PATH = "/api/v4/mobile_apps/%s/sessions.json";
  public static final String SESSION_WARNING = "Call RevMobAds.start(activity, APP_ID) on application start/resume. It will help us to improve tracking and increase the eCPM.";
  private static RevMobClient instance = new RevMobClient();
  private static final Map<String, String> serverEndPoints = new HashMap();
  private String appId;
  private RevMobParallaxMode parallaxMode = RevMobParallaxMode.DISABLED;
  private boolean sessionStarted = false;
  private RevMobTestingMode testingMode = RevMobTestingMode.DISABLED;
  
  static
  {
    SDK_NAME = "android";
    SDK_VERSION = "6.8.2";
    SDK_SOURCE_NAME = "android";
    SDK_SOURCE_VERSION = "6.8.2";
    LOG_MESSAGES.put(200, "OK.");
    LOG_MESSAGES.put(202, "OK.");
    LOG_MESSAGES.put(204, "Ad retrieval failed: No ads for this device/country right now or your App ID is paused.");
    LOG_MESSAGES.put(404, "No ad retrieved: did you set a valid App ID? Get one at http://revmob.com.");
    LOG_MESSAGES.put(409, "No ad retrieved: did you set a valid Placement ID? Get one at http://revmob.com.");
    LOG_MESSAGES.put(422, "Request requirements did not met. Did you set required permissions?");
    LOG_MESSAGES.put(423, "Is your ad unit paused? Please, check it in the RevMob Console.");
    LOG_MESSAGES.put(500, "Unexpected server error.");
    LOG_MESSAGES.put(503, "Unexpected server error.");
  }
  
  private RevMobClient() {}
  
  public static RevMobClient getInstance()
  {
    return instance;
  }
  
  public static void setSDKName(String paramString)
  {
    if (paramString != null)
    {
      SDK_NAME = paramString;
      SDK_SOURCE_NAME = "android";
    }
  }
  
  public static void setSDKVersion(String paramString)
  {
    if (paramString != null)
    {
      SDK_VERSION = paramString;
      SDK_SOURCE_VERSION = "6.8.2";
    }
  }
  
  void addServerEndPoint(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      serverEndPoints.put(paramString1, paramString2);
    }
  }
  
  String createFetchUrl(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    if (isPlacementIdValid(paramString4))
    {
      paramString1 = "fetch_" + paramString1 + "_with_placement";
      if (serverEndPoints.containsKey(paramString1)) {
        return ((String)serverEndPoints.get(paramString1)).replaceFirst("PLACEMENT_ID", paramString4);
      }
      return "https://android.revmob.com" + String.format("/api/v4/mobile_apps/%s/placements/%s/%s/fetch_only.json", new Object[] { paramString3, paramString4, paramString2 });
    }
    paramString1 = "fetch_" + paramString1;
    if (serverEndPoints.containsKey(paramString1)) {
      return (String)serverEndPoints.get(paramString1);
    }
    return "https://android.revmob.com" + String.format("/api/v4/mobile_apps/%s/%s/fetch_only.json", new Object[] { paramString3, paramString2 });
  }
  
  void fetch(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    if (this.testingMode != RevMobTestingMode.DISABLED) {
      RMLog.i("Fetching ad using testing mode: " + this.testingMode.getValue());
    }
    serverRequestWithSessionVerification(paramString1, paramString2, paramRevMobClientListener);
  }
  
  public void fetchAdLink(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    fetch(createFetchUrl("link", "anchors", this.appId, paramString1), paramString2, paramRevMobClientListener);
  }
  
  public void fetchBanner(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    fetch(createFetchUrl("banner", "banners", this.appId, paramString1), paramString2, paramRevMobClientListener);
  }
  
  public void fetchFullscreen(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    fetch(createFetchUrl("fullscreen", "fullscreens", this.appId, paramString1), paramString2, paramRevMobClientListener);
  }
  
  public void fetchNotification(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    fetch(createFetchUrl("local_notification", "local_notifications", this.appId, paramString1), paramString2, paramRevMobClientListener);
  }
  
  public void fetchPopup(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    fetch(createFetchUrl("pop_up", "pop_ups", this.appId, paramString1), paramString2, paramRevMobClientListener);
  }
  
  public String getAppId()
  {
    return this.appId;
  }
  
  public RevMobParallaxMode getParallaxMode()
  {
    return this.parallaxMode;
  }
  
  public RevMobTestingMode getTestingMode()
  {
    return this.testingMode;
  }
  
  void handleDownloadError(int paramInt, RevMobClientListener paramRevMobClientListener)
  {
    String str = (String)LOG_MESSAGES.get(paramInt, "RevMob did not answered as expected.");
    str = str + " (" + paramInt + ")";
    RMLog.w(str);
    if (paramRevMobClientListener != null) {
      paramRevMobClientListener.handleError(str);
    }
  }
  
  void handleSuccess(String paramString, RevMobClientListener paramRevMobClientListener)
  {
    if (paramRevMobClientListener != null) {}
    try
    {
      paramRevMobClientListener.handleResponse(paramString);
      return;
    }
    catch (OutOfMemoryError paramString)
    {
      do
      {
        RMLog.w("It was not possible to load the RevMob banner because your device run out of RAM memory.");
      } while (paramRevMobClientListener == null);
      paramRevMobClientListener.handleError("It was not possible to load the RevMob banner because your device run out of RAM memory.");
      return;
    }
    catch (JSONException paramString)
    {
      do
      {
        RMLog.w("Error on parse response from server.");
      } while (paramRevMobClientListener == null);
      paramRevMobClientListener.handleError("Error on parse response from server.");
      return;
    }
    catch (NullPointerException paramString)
    {
      do
      {
        RMLog.w("Error on parse response from server. Unknown error.");
      } while (paramRevMobClientListener == null);
      paramRevMobClientListener.handleError("Error on parse response from server. Unknown error.");
    }
  }
  
  boolean isAppIdValid(String paramString)
  {
    return (paramString != null) && (paramString.length() == 24);
  }
  
  boolean isPlacementIdValid(String paramString)
  {
    return (paramString != null) && (paramString.length() == 24);
  }
  
  void processResponse(HttpResponse paramHttpResponse, RevMobClientListener paramRevMobClientListener)
    throws JSONException
  {
    if (paramHttpResponse == null) {
      handleDownloadError(0, paramRevMobClientListener);
    }
    do
    {
      return;
      int i = paramHttpResponse.getStatusLine().getStatusCode();
      if ((i != 200) && (i != 202))
      {
        handleDownloadError(i, paramRevMobClientListener);
        return;
      }
      paramHttpResponse = HTTPHelper.encodedResponseBody(paramHttpResponse.getEntity());
      if (paramHttpResponse != null) {
        break;
      }
      RMLog.w("Bad response from server.");
    } while (paramRevMobClientListener == null);
    paramRevMobClientListener.handleError("Bad response from server.");
    return;
    handleSuccess(paramHttpResponse, paramRevMobClientListener);
  }
  
  public void registerInstall(String paramString, RevMobClientListener paramRevMobClientListener)
  {
    if (serverEndPoints.containsKey("install")) {}
    for (String str = (String)serverEndPoints.get("install");; str = "https://android.revmob.com" + String.format("/api/v4/mobile_apps/%s/install.json", new Object[] { this.appId }))
    {
      serverRequestWithSessionVerification(str, paramString, paramRevMobClientListener);
      return;
    }
  }
  
  public void reportImpression(String paramString1, String paramString2)
  {
    if (paramString1 != null)
    {
      if (this.testingMode != RevMobTestingMode.DISABLED) {
        RMLog.i("Reporting impression using testing mode: " + this.testingMode.getValue());
      }
      serverRequestWithSessionVerification(paramString1, paramString2, null);
    }
  }
  
  void serverRequest(final String paramString1, final String paramString2, final RevMobClientListener paramRevMobClientListener)
  {
    new Thread()
    {
      public void run()
      {
        HttpResponse localHttpResponse = new HTTPHelper().post(paramString1, paramString2);
        try
        {
          RevMobClient.this.processResponse(localHttpResponse, paramRevMobClientListener);
          return;
        }
        catch (JSONException localJSONException)
        {
          localJSONException.printStackTrace();
        }
      }
    }.start();
  }
  
  void serverRequestWithSessionVerification(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    if (!this.sessionStarted)
    {
      RMLog.w("Call RevMobAds.start(activity, APP_ID) on application start/resume. It will help us to improve tracking and increase the eCPM.");
      return;
    }
    serverRequest(paramString1, paramString2, paramRevMobClientListener);
  }
  
  public void setParallaxMode(RevMobParallaxMode paramRevMobParallaxMode)
  {
    this.parallaxMode = paramRevMobParallaxMode;
    if (paramRevMobParallaxMode != RevMobParallaxMode.DISABLED)
    {
      RMLog.i("Parallax mode enabled");
      return;
    }
    RMLog.i("Parallax mode disabled");
  }
  
  public void setTestingMode(RevMobTestingMode paramRevMobTestingMode)
  {
    this.testingMode = paramRevMobTestingMode;
    if (paramRevMobTestingMode != RevMobTestingMode.DISABLED)
    {
      RMLog.i("Testing mode enabled: " + paramRevMobTestingMode.getValue());
      return;
    }
    RMLog.i("Testing mode disabled");
  }
  
  public void setTimeoutInSeconds(int paramInt)
  {
    if ((paramInt > 1) && (paramInt < 300))
    {
      HTTPHelper.globalTimeoutInSeconds = paramInt;
      RMLog.i("Timeout changed to " + paramInt + "s");
      return;
    }
    RMLog.w("Invalid timeout.");
  }
  
  public boolean startSession(String paramString1, String paramString2, RevMobClientListener paramRevMobClientListener)
  {
    if (this.appId == null)
    {
      if (isAppIdValid(paramString1))
      {
        this.sessionStarted = true;
        this.appId = paramString1;
        serverRequest("https://android.revmob.com" + String.format("/api/v4/mobile_apps/%s/sessions.json", new Object[] { paramString1 }), paramString2, paramRevMobClientListener);
        HTTPHelper.globalTimeoutInSeconds = 30;
        return true;
      }
      RMLog.w("Invalid App ID.");
    }
    for (;;)
    {
      return false;
      RMLog.w("You can use just one App Id per application.");
    }
  }
}
