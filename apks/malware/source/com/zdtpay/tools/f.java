package com.zdtpay.tools;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Environment;
import android.util.Log;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;

public class f
{
  private Context a;
  private boolean b = false;
  private String c;
  private String d;
  private String e = "errorlog.txt";
  private SharedPreferences f;
  private StringBuffer g;
  
  public f(Context paramContext)
  {
    this.a = paramContext;
    this.b = Environment.getExternalStorageState().equals("mounted");
    this.c = Environment.getExternalStorageDirectory().getPath();
    this.d = this.a.getFilesDir().getPath();
    this.f = paramContext.getSharedPreferences("mysp", 0);
    this.g = new StringBuffer();
    try
    {
      a();
      return;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public File a()
  {
    if (this.b) {}
    for (Object localObject = this.c;; localObject = this.d)
    {
      localObject = new File(localObject + "//" + this.e);
      if (!((File)localObject).exists()) {
        ((File)localObject).createNewFile();
      }
      return localObject;
    }
  }
  
  public String a(String paramString)
  {
    Object localObject2 = "0";
    if (d())
    {
      Object localObject3 = c();
      Object localObject1 = localObject2;
      int i;
      if (localObject3 != null)
      {
        localObject1 = localObject2;
        if (!((String)localObject3).equals(""))
        {
          localObject3 = ((String)localObject3).split("&&");
          localObject1 = "0";
          i = 0;
        }
      }
      for (;;)
      {
        if (i >= localObject3.length) {
          return localObject1;
        }
        localObject2 = localObject1;
        if (localObject3[i].contains(paramString))
        {
          String[] arrayOfString = localObject3[i].split(",");
          localObject2 = localObject1;
          if (!arrayOfString[1].replace("]", "").equals("")) {
            localObject2 = arrayOfString[1].replace("]", "").trim();
          }
        }
        i += 1;
        localObject1 = localObject2;
      }
    }
    if (paramString.contains("toter")) {
      return this.f.getInt(paramString, 0);
    }
    return this.f.getString(paramString, "0");
  }
  
  public void a(String paramString1, String paramString2, String paramString3, int paramInt)
  {
    if (d())
    {
      this.g.append("[" + paramString1 + "," + paramString2 + "]" + "&&" + "[" + paramString3 + "," + paramInt + "] &&");
      return;
    }
    this.f.edit().putString(paramString1, paramString2).commit();
    this.f.edit().putInt(paramString3, paramInt).commit();
  }
  
  public void b()
  {
    Log.e("SCY", this.g.toString());
    try
    {
      FileWriter localFileWriter = new FileWriter(this.c + "//" + this.e);
      Object localObject = new File(this.c + "//" + this.e);
      localFileWriter.write(this.g.toString());
      localObject = new DataOutputStream(new FileOutputStream((File)localObject));
      ((DataOutputStream)localObject).writeShort(2);
      ((DataOutputStream)localObject).writeUTF("");
      System.out.println(localObject);
      localFileWriter.flush();
      localFileWriter.close();
      return;
    }
    catch (Exception localException) {}
  }
  
  public String c()
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject = new File(this.c + "//" + this.e);
    for (;;)
    {
      try
      {
        localObject = new FileInputStream((File)localObject);
        i = ((FileInputStream)localObject).read();
        if (i != -1) {
          continue;
        }
        ((FileInputStream)localObject).close();
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        int i;
        char c1;
        localFileNotFoundException.printStackTrace();
        continue;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        continue;
      }
      return localStringBuffer.toString();
      c1 = (char)i;
      localStringBuffer.append(c1);
    }
  }
  
  public boolean d()
  {
    return this.b;
  }
}
