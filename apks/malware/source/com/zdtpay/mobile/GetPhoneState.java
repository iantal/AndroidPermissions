package com.zdtpay.mobile;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Locale;

public class GetPhoneState
{
  private static ConnectivityManager connManager = null;
  public static DisplayMetrics dm;
  private static String mMid = "";
  private static TelephonyManager telephonyManager = null;
  
  public GetPhoneState() {}
  
  public static String getAccessNetworkType(Context paramContext)
  {
    if (connManager != null) {}
    for (int i = connManager.getActiveNetworkInfo().getType(); i == 1; i = connManager.getActiveNetworkInfo().getType())
    {
      return "1";
      connManager = (ConnectivityManager)paramContext.getSystemService("connectivity");
    }
    if (i == 0)
    {
      connManager.getActiveNetworkInfo().getSubtypeName();
      switch (connManager.getActiveNetworkInfo().getSubtype())
      {
      case 7: 
      case 9: 
      case 10: 
      case 11: 
      default: 
        return "0";
      case 3: 
      case 5: 
      case 6: 
      case 8: 
      case 12: 
        return "2";
      }
      return "3";
    }
    return "0";
  }
  
  /* Error */
  public static String getAppLabel(Context paramContext)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 70	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   4: astore_2
    //   5: aload_2
    //   6: aload_0
    //   7: invokevirtual 73	android/content/Context:getPackageName	()Ljava/lang/String;
    //   10: iconst_0
    //   11: invokevirtual 79	android/content/pm/PackageManager:getPackageInfo	(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    //   14: getfield 85	android/content/pm/PackageInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   17: aload_2
    //   18: invokevirtual 91	android/content/pm/ApplicationInfo:loadLabel	(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;
    //   21: checkcast 93	java/lang/String
    //   24: astore_0
    //   25: aload_0
    //   26: ifnull +12 -> 38
    //   29: aload_0
    //   30: invokevirtual 96	java/lang/String:length	()I
    //   33: istore_1
    //   34: iload_1
    //   35: ifgt +6 -> 41
    //   38: ldc 20
    //   40: astore_0
    //   41: aload_0
    //   42: areturn
    //   43: astore_0
    //   44: ldc 20
    //   46: areturn
    //   47: astore_2
    //   48: aload_0
    //   49: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	50	0	paramContext	Context
    //   33	2	1	i	int
    //   4	14	2	localPackageManager	PackageManager
    //   47	1	2	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   0	25	43	java/lang/Exception
    //   29	34	47	java/lang/Exception
  }
  
  public static String getAppVersionName(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).versionName;
      if (paramContext != null) {}
      int i;
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        i = paramContext.length();
        if (i <= 0) {
          paramContext = "1";
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = "";
    }
    return paramContext;
  }
  
  public static String getBrand()
  {
    return Build.BRAND;
  }
  
  public static String getCarrier(Context paramContext)
  {
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    if ((paramContext != null) && (!"".equals(paramContext)))
    {
      if ((paramContext.startsWith("46000")) || (paramContext.startsWith("46002")) || (paramContext.startsWith("46007"))) {
        return "1";
      }
      if ((paramContext.startsWith("46001")) || (paramContext.startsWith("46006"))) {
        return "2";
      }
      if ((paramContext.startsWith("46003")) || (paramContext.startsWith("46005")) || (paramContext.startsWith("46011"))) {
        return "3";
      }
      return "null@" + paramContext;
    }
    return "-1";
  }
  
  public static String getIMEI(Context paramContext)
  {
    if ((paramContext != null) && (TextUtils.isEmpty(mMid)))
    {
      mMid = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      if ((mMid == null) || (mMid.trim().length() == 0) || (mMid.matches("0+"))) {
        mMid = "000000000000000";
      }
    }
    return mMid;
  }
  
  public static String getLocalMacAddress(Context paramContext)
  {
    String str = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
    paramContext = str;
    if (TextUtils.isEmpty(str)) {
      paramContext = "00:00:00:00:00:00";
    }
    return paramContext;
  }
  
  public static String getModel()
  {
    return Build.MODEL;
  }
  
  public static String getNativePhoneNumber(Context paramContext)
  {
    if (telephonyManager == null) {
      telephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    }
    String str = telephonyManager.getLine1Number();
    if ((!TextUtils.isEmpty(str)) && (!str.equals("0")))
    {
      paramContext = str;
      if (!str.equals("000000000000000")) {}
    }
    else
    {
      paramContext = "13800138000";
    }
    return paramContext;
  }
  
  public static String getSysLanguage()
  {
    return Locale.getDefault().getLanguage();
  }
  
  public static String getSysRelease()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static boolean isIntercept()
  {
    if (Build.VERSION.SDK_INT > 18) {}
    while (isMIUI("ro.miui.ui.version.name")) {
      return true;
    }
    return false;
  }
  
  public static boolean isMIUI(String paramString)
  {
    try
    {
      new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("getprop " + paramString).getInputStream()), 1024).close();
      return true;
    }
    catch (IOException paramString) {}
    return false;
  }
  
  public static boolean isNetworkAvailable(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getApplicationContext().getSystemService("connectivity");
    if (paramContext == null) {}
    for (;;)
    {
      return false;
      paramContext = paramContext.getAllNetworkInfo();
      if (paramContext != null)
      {
        int i = 0;
        while (i < paramContext.length)
        {
          if (paramContext[i].isConnected()) {
            return true;
          }
          i += 1;
        }
      }
    }
  }
  
  public static boolean isSDCardAvailable()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static boolean readSIMCard(Context paramContext)
  {
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    StringBuffer localStringBuffer = new StringBuffer();
    switch (paramContext.getSimState())
    {
    default: 
      return false;
    case 1: 
      localStringBuffer.append("无卡");
      return false;
    }
    localStringBuffer.append("良好");
    return true;
  }
  
  public static String readSimICCID(Context paramContext)
  {
    if (paramContext == null) {
      return "";
    }
    if (telephonyManager == null) {
      telephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    }
    return telephonyManager.getSimSerialNumber();
  }
  
  public static String readSimSerialNum(Context paramContext)
  {
    if (paramContext == null) {
      return "";
    }
    if (telephonyManager == null) {
      telephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    }
    return telephonyManager.getSubscriberId();
  }
  
  public static String readTelephoneSerialNum(Context paramContext)
  {
    String str2 = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    String str1 = str2;
    if (TextUtils.isEmpty(str2)) {
      str1 = getLocalMacAddress(paramContext);
    }
    return str1;
  }
}
