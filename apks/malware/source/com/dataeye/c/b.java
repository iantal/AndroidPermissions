package com.dataeye.c;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.text.TextUtils;
import com.dataeye.DCConfigParams;
import com.dataeye.DCEvent;
import com.dataeye.a.i;
import com.dataeye.a.j;
import com.dataeye.a.k;
import com.dataeye.a.l;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;

public class b
{
  static final String[] a = { "android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.READ_PHONE_STATE" };
  public static boolean b = false;
  public static long c = 30000L;
  public static long d;
  public static long e;
  public static long f;
  public static long g;
  public static int h = ab.b();
  public static int i = 1;
  public static String j = "";
  public static LinkedList k = new LinkedList();
  public static String l = "rd.gdatacube.net";
  public static int m = 0;
  public static long n = 60000L;
  private static Context o;
  
  public static int a(long paramLong)
  {
    return (int)(paramLong / 1000L);
  }
  
  public static com.dataeye.a.e a(com.dataeye.a.a paramA, long paramLong, SQLiteDatabase paramSQLiteDatabase, boolean paramBoolean1, boolean paramBoolean2)
  {
    com.dataeye.a.e localE = new com.dataeye.a.e();
    a(paramA, localE, paramBoolean2);
    a(paramA, paramLong, paramBoolean1, localE);
    a(paramA.a, paramSQLiteDatabase, paramBoolean2, localE);
    return localE;
  }
  
  public static final j a(com.dataeye.a.a paramA, long paramLong)
  {
    int i1 = a(paramLong);
    int i2 = (int)(System.currentTimeMillis() / 1000L - i1);
    int i3 = paramA.g;
    if (a.a(paramA)) {}
    for (boolean bool = false;; bool = true) {
      return new j(i1, i2 + 1, i3, bool);
    }
  }
  
  public static final void a()
  {
    if ((d == 0L) || (System.currentTimeMillis() - g > c) || (System.currentTimeMillis() - g <= 0L)) {
      b();
    }
  }
  
  public static void a(int paramInt)
  {
    f = System.currentTimeMillis();
    y.a("DC_SPENDTIMEINLEVELS_" + paramInt);
  }
  
  public static void a(Context paramContext)
  {
    if (o == null) {
      o = paramContext.getApplicationContext();
    }
  }
  
  public static void a(Context paramContext, String paramString1, String paramString2)
  {
    a(paramContext);
    t.a();
    if (b) {}
    do
    {
      return;
      if (!ab.a(paramContext, a))
      {
        t.c("DataEye SDK init fail , Please check uses-permission in AndroidManifest.xml. ");
        return;
      }
      w.a(paramContext, paramString1, paramString2, j);
    } while (!w.a);
    y.a(paramContext, w.c);
    r.a(paramContext, w.c);
    i();
    o.b();
    o.a(new c());
    o.a(true, null);
    h();
    a.a(paramContext);
    ad.a(paramContext);
    o();
    paramString1 = new StringBuilder("DataEye SDK init success!  AppId:").append(w.c).append("; ChannelId:").append(w.d).append("; AppVersion:").append(w.b).append("; ReportMode:");
    if (i == 1) {}
    for (paramContext = "DC_DEFAULT";; paramContext = "DC_AFTER_LOGIN")
    {
      t.b(paramContext);
      b = true;
      return;
    }
  }
  
  private static void a(com.dataeye.a.a paramA, long paramLong, boolean paramBoolean, com.dataeye.a.e paramE)
  {
    if (paramBoolean) {
      return;
    }
    paramE.o = new ArrayList();
    paramE.o.add(a(paramA, paramLong));
  }
  
  private static void a(com.dataeye.a.a paramA, com.dataeye.a.e paramE, boolean paramBoolean)
  {
    paramE.b = w.c;
    paramE.c = w.d;
    paramE.r = w.b;
    paramE.d = a.b();
    if (!paramBoolean)
    {
      paramE.e = paramA.a;
      paramE.f = paramA.d;
      paramE.g = paramA.e;
      paramE.h = paramA.f;
      paramE.i = paramA.h;
    }
    paramE.j = w.e.i;
    paramE.k = w.e.h;
    paramE.l = w.e.e;
    paramE.m = ab.e(o);
    paramE.t = "";
    paramE.w = paramA.l;
    paramE.v = paramA.k;
    paramE.A = new HashMap();
    paramE.A.put("WIFIMAC", ab.g(o));
    paramE.A.put("IMEI", ab.j(o));
    paramE.A.put("IMSI", ab.k(o));
    paramE.A.put("SIM_OPERATOR", ab.c(o));
    paramE.A.put("SIM_OPERATOR_ISO", ab.d(o));
    Map localMap = paramE.A;
    if (i == 1) {}
    for (Object localObject = "DEFAULT";; localObject = "AFTER_LOGIN")
    {
      localMap.put("REPORTMODE", localObject);
      paramE.A.put("INVOKELOG", s.b());
      paramE.A.put("SESSIONTIME", g());
      paramE.A.put("TIMEZONE", ab.j());
      paramE.A.put("PACKAGE", ab.h(o));
      if (n != 60000L) {
        paramE.A.put("UPLOADINTERVAL", n);
      }
      if (!paramBoolean)
      {
        localObject = new l();
        if (!a.a())
        {
          ((l)localObject).b = ab.b();
          paramE.y = w.e;
        }
        if (!a.a(paramA))
        {
          ((l)localObject).c = ab.b();
          ((l)localObject).d = a.l;
        }
        ((l)localObject).a = a.g().b;
        paramE.n = ((l)localObject);
      }
      return;
    }
  }
  
  public static void a(com.dataeye.a.g paramG)
  {
    if (a.g() != null) {
      r.a().a(a.f(), paramG);
    }
  }
  
  public static void a(com.dataeye.a.h paramH)
  {
    if (a.g() != null) {
      r.a().a(a.f(), paramH);
    }
  }
  
  public static void a(i paramI)
  {
    if (a.g() != null) {
      r.a().a(a.f(), paramI);
    }
  }
  
  public static void a(k paramK)
  {
    if (a.g() != null) {
      r.a().a(a.f(), paramK);
    }
  }
  
  private static void a(String paramString, SQLiteDatabase paramSQLiteDatabase, boolean paramBoolean, com.dataeye.a.e paramE)
  {
    
    if (!paramBoolean)
    {
      ArrayList localArrayList = r.a().a(paramString, paramSQLiteDatabase);
      if ((localArrayList != null) && (localArrayList.size() > 0))
      {
        paramE.p = new ArrayList();
        paramE.p.addAll(localArrayList);
        localArrayList.clear();
      }
      localArrayList = r.a().c(paramString, paramSQLiteDatabase);
      if ((localArrayList != null) && (localArrayList.size() > 0))
      {
        paramE.q = new ArrayList();
        paramE.q.addAll(localArrayList);
        localArrayList.clear();
      }
      paramString = r.a().b(paramString, paramSQLiteDatabase);
      if ((paramString != null) && (paramString.size() > 0))
      {
        paramE.s = new ArrayList();
        paramE.s.addAll(paramString);
        paramString.clear();
      }
    }
    paramString = r.a().a(paramSQLiteDatabase);
    if ((paramString != null) && (paramString.size() > 0))
    {
      paramE.s = new ArrayList();
      paramE.s.addAll(paramString);
      paramString.clear();
    }
    paramString = r.a().b(paramSQLiteDatabase);
    if ((paramString != null) && (paramString.size() > 0))
    {
      paramE.u = new ArrayList();
      paramE.u.addAll(paramString);
      paramString.clear();
    }
    r.a().a(paramSQLiteDatabase, r.a);
    r.b();
  }
  
  public static void a(String paramString, com.dataeye.a.h paramH)
  {
    paramH.e = ab.b();
    y.b(paramString, com.dataeye.b.a.a(paramH.a()));
  }
  
  public static void a(boolean paramBoolean)
  {
    t.a("Invoke CacheFactory.uploadAsync start [A]");
    if (!paramBoolean) {}
    try
    {
      if ((i == 2) && (a.g() != null) && (!a.g().c))
      {
        t.a("Invoke UploadAsync ignored, because reportMode= AFTER_LOGIN and login=false");
        return;
        t.a("DataEye SDK upload device active info!");
      }
      h.a(new e(paramBoolean));
      return;
    }
    catch (Throwable localThrowable)
    {
      t.a("DataEye SDK upload data error(A) , reason" + localThrowable.getMessage(), localThrowable);
    }
  }
  
  public static boolean a(Context paramContext, SQLiteDatabase paramSQLiteDatabase)
  {
    Object localObject = r.a().c(paramSQLiteDatabase);
    if (((HashMap)localObject).size() != 0)
    {
      localObject = ((HashMap)localObject).entrySet().iterator();
      if (((Iterator)localObject).hasNext()) {
        break label36;
      }
    }
    for (;;)
    {
      return false;
      label36:
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
      Integer localInteger = (Integer)localEntry.getKey();
      if (a(paramContext, (com.dataeye.a.e)localEntry.getValue()))
      {
        r.a().a(paramSQLiteDatabase, localInteger);
        t.b("DataEye SDK upload data success!(H)");
        break;
      }
      t.b("DataEye SDK upload data fail!(H)");
    }
  }
  
  private static boolean a(Context paramContext, com.dataeye.a.e paramE)
  {
    if (!ab.m(o))
    {
      t.a("Invoke CacheFactory.doUpload terminate, reason: network not connected ");
      return false;
    }
    long l1 = System.currentTimeMillis();
    boolean bool = ab.n(paramContext);
    for (;;)
    {
      try
      {
        if (!ab.a(l, paramE)) {
          break label205;
        }
        if (!bool) {
          break label198;
        }
        paramContext = "_dc_oss_def_wifi";
        v.a(paramContext, "upload", true, System.currentTimeMillis() - l1, paramE.a().length, l);
        h = ab.b();
        return true;
      }
      catch (Throwable localThrowable)
      {
        localThrowable = localThrowable;
        if (!bool) {
          break label191;
        }
        paramContext = "_dc_oss_def_wifi";
        v.a(paramContext, "upload:" + localThrowable.getMessage(), false, System.currentTimeMillis() - l1, paramE.a().length, l);
        t.a("Invoke CacheFactory.doUploadHistory error, reason:" + localThrowable.getMessage(), localThrowable);
        break;
      }
      finally {}
      v.a(paramContext, "upload", false, System.currentTimeMillis() - l1, paramE.a().length, l);
      break;
      paramContext = "_dc_oss_def_mobi";
      continue;
      label191:
      paramContext = "_dc_oss_def_mobi";
      continue;
      label198:
      paramContext = "_dc_oss_def_mobi";
      continue;
      label205:
      if (bool) {
        paramContext = "_dc_oss_def_wifi";
      }
    }
    return false;
  }
  
  public static boolean a(SQLiteDatabase paramSQLiteDatabase)
  {
    return a(o, paramSQLiteDatabase);
  }
  
  public static boolean a(com.dataeye.a.a paramA, SQLiteDatabase paramSQLiteDatabase, boolean paramBoolean)
  {
    if (paramA == null) {
      return false;
    }
    String str = paramA.a;
    try
    {
      if ((str.equals("_DESelf_DEFAULT_ACCOUNTID")) && (!paramBoolean))
      {
        t.a("DataEye SDK upload data  stop, reason : accountid is default accountid");
        return true;
      }
      paramBoolean = a(a(paramA, d, paramSQLiteDatabase, paramBoolean, false), paramSQLiteDatabase, false);
      if (paramBoolean)
      {
        t.b("DataEye SDK upload data success!(A)");
        return paramBoolean;
      }
    }
    catch (Throwable paramA)
    {
      t.a("DataEye SDK upload data error(A) , reason:" + paramA.getMessage(), paramA);
      return false;
    }
    t.b("DataEye SDK upload data fail!(A)");
    return paramBoolean;
  }
  
  private static boolean a(com.dataeye.a.e paramE, SQLiteDatabase paramSQLiteDatabase, boolean paramBoolean)
  {
    if (!ab.m(o))
    {
      t.a("Invoke CacheFactory.doUpload terminate, reason: network not connected ");
      return false;
    }
    long l1 = System.currentTimeMillis();
    boolean bool = ab.n(o);
    int i1 = 1;
    for (;;)
    {
      try
      {
        if (!ab.a(l, paramE)) {
          break label304;
        }
        if (!bool) {
          break label296;
        }
        str1 = "_dc_oss_def_wifi";
        v.a(str1, "upload", true, System.currentTimeMillis() - l1, paramE.a().length, l);
        if (!paramBoolean)
        {
          if (paramE.n.b > 0) {
            a.a(paramE.n.b);
          }
          if (paramE.n.c > 0) {
            a.f(paramE.n.c);
          }
        }
        h = ab.b();
        return true;
      }
      catch (Throwable localThrowable)
      {
        long l2 = System.currentTimeMillis();
        if (!bool) {
          continue;
        }
        String str1 = "_dc_oss_def_wifi";
        v.a(str1, "upload:" + localThrowable.getMessage(), false, l2 - l1, paramE.a().length, l);
        try
        {
          t.a("Invoke CacheFactory.doUpload error, reason:" + localThrowable.getMessage(), localThrowable);
          r.a().a(paramE, paramSQLiteDatabase);
          return false;
        }
        finally
        {
          i1 = 0;
        }
        str1 = "_dc_oss_def_mobi";
        continue;
      }
      finally
      {
        if (i1 != 0) {
          continue;
        }
        r.a().a(paramE, paramSQLiteDatabase);
      }
      v.a(str1, "upload", false, System.currentTimeMillis() - l1, paramE.a().length, l);
      r.a().a(paramE, paramSQLiteDatabase);
      return false;
      str1 = "_dc_oss_def_mobi";
      continue;
      label296:
      String str2 = "_dc_oss_def_mobi";
      continue;
      label304:
      if (bool) {
        str2 = "_dc_oss_def_wifi";
      }
    }
  }
  
  public static long b(int paramInt)
  {
    long l2 = y.a("DC_SPENDTIMEINLEVELS_" + paramInt, 0L);
    long l3 = System.currentTimeMillis() - f;
    long l1 = l2;
    if (l3 > 0L) {
      l1 = l2 + l3;
    }
    return l1;
  }
  
  public static void b()
  {
    e = System.currentTimeMillis();
    d = System.currentTimeMillis();
    f = System.currentTimeMillis();
    g = d;
  }
  
  public static void b(Context paramContext)
  {
    t.a("Invoke CacheFactory.uploadHistoryDataWhenNetworkChange start [N]");
    Object localObject2 = null;
    SQLiteDatabase localSQLiteDatabase2 = null;
    SQLiteDatabase localSQLiteDatabase1 = localSQLiteDatabase2;
    Object localObject1 = localObject2;
    try
    {
      r.a(paramContext, w.c);
      localSQLiteDatabase1 = localSQLiteDatabase2;
      localObject1 = localObject2;
      localSQLiteDatabase2 = r.c().a();
      localSQLiteDatabase1 = localSQLiteDatabase2;
      localObject1 = localSQLiteDatabase2;
      a(paramContext, localSQLiteDatabase2);
      localSQLiteDatabase1 = localSQLiteDatabase2;
      localObject1 = localSQLiteDatabase2;
      r.c().a(localSQLiteDatabase2);
      if (localSQLiteDatabase2 != null) {}
      return;
    }
    catch (Throwable paramContext)
    {
      do
      {
        paramContext = paramContext;
        localObject1 = localSQLiteDatabase1;
        t.a("DataEye SDK upload data error(N) , reason" + paramContext.getMessage(), paramContext);
      } while (localSQLiteDatabase1 == null);
      try
      {
        r.c().a(localSQLiteDatabase1);
        return;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
    }
    finally
    {
      if (localObject1 != null) {}
      try
      {
        r.c().a((SQLiteDatabase)localObject1);
        throw paramContext;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  public static void b(com.dataeye.a.a paramA, long paramLong)
  {
    if (paramA == null)
    {
      t.a("Invoke addDCSyncInHistoryAndUploadAsync fail , reason oldAccountInfo is null");
      return;
    }
    try
    {
      h.b(new d(paramA, paramLong));
      t.a("Invoke addDCSyncInHistoryAndUploadAsync finish");
      return;
    }
    catch (Throwable paramA)
    {
      for (;;)
      {
        t.a("Invoke addDCSyncInHistoryAndUploadAsync error, reason:" + paramA.getMessage(), paramA);
      }
    }
  }
  
  public static void b(com.dataeye.a.h paramH)
  {
    r.a().b("NoLoginAccoundId", paramH);
  }
  
  public static void b(String paramString, com.dataeye.a.h paramH)
  {
    Object localObject = y.a(paramString, "");
    if (TextUtils.isEmpty((CharSequence)localObject)) {
      return;
    }
    com.dataeye.a.h localH = new com.dataeye.a.h();
    try
    {
      localH.a(new com.dataeye.b.c(com.dataeye.b.a.a((String)localObject)));
      if (localH.e > 0)
      {
        paramH.b = (ab.b() - localH.e);
        if ((localH.c != null) || (paramH.c != null))
        {
          localObject = new HashMap();
          if (localH.c != null) {
            ((Map)localObject).putAll(localH.c);
          }
          if (paramH.c != null) {
            ((Map)localObject).putAll(paramH.c);
          }
          paramH.c = ((Map)localObject);
        }
        paramH.e = localH.e;
        paramH.f = ab.b();
      }
      a(paramH);
      y.a(paramString);
      return;
    }
    catch (Throwable paramString) {}
  }
  
  public static boolean b(SQLiteDatabase paramSQLiteDatabase)
  {
    try
    {
      boolean bool = a(a(a.g(), d, paramSQLiteDatabase, false, true), paramSQLiteDatabase, true);
      if (bool)
      {
        t.b("DataEye SDK upload data success!(BL)");
        return bool;
      }
      t.b("DataEye SDK upload data fail!(BL)");
      return bool;
    }
    catch (Throwable paramSQLiteDatabase)
    {
      t.a("DataEye SDK upload data error(BL) , reason:" + paramSQLiteDatabase.getMessage(), paramSQLiteDatabase);
    }
    return false;
  }
  
  public static void c()
  {
    d = System.currentTimeMillis();
    f = System.currentTimeMillis();
    g = d;
  }
  
  public static void c(int paramInt)
  {
    long l2 = y.a("DC_SPENDTIMEINLEVELS_" + paramInt, 0L);
    long l3 = System.currentTimeMillis() - f;
    long l1 = l2;
    if (l3 > 0L) {
      l1 = l2 + l3;
    }
    y.b("DC_SPENDTIMEINLEVELS_" + paramInt, l1);
  }
  
  public static final void d()
  {
    g = System.currentTimeMillis();
    if (a.g() != null) {
      c(a.g().g);
    }
  }
  
  public static Context e()
  {
    return o;
  }
  
  public static int f()
  {
    return (int)(d / 1000L);
  }
  
  public static int g()
  {
    return (int)(e / 1000L);
  }
  
  public static void h()
  {
    if (k != null) {
      k.clear();
    }
    for (;;)
    {
      k.add("rd.gdatacube.net");
      k.add("rd.de123.net");
      try
      {
        Object localObject = DCConfigParams.getParameterString("DESelf_Key_Hosts", "");
        t.a("F:" + (String)localObject);
        int i1;
        if (!TextUtils.isEmpty((CharSequence)localObject))
        {
          localObject = new JSONArray((String)localObject);
          i1 = 0;
        }
        for (;;)
        {
          int i2 = ((JSONArray)localObject).length();
          if (i1 >= i2)
          {
            return;
            k = new LinkedList();
            break;
          }
          String str = ((JSONArray)localObject).getString(i1);
          if (!TextUtils.isEmpty(str)) {
            k.add(str);
          }
          i1 += 1;
        }
        return;
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
      }
    }
  }
  
  public static void i()
  {
    l = y.c("DC_CURRENT_HOST", "rd.gdatacube.net");
    t.a("inovke initCurrentHost , current host =  " + l);
  }
  
  public static void j()
  {
    if (TextUtils.isEmpty(l))
    {
      l = "rd.gdatacube.net";
      return;
    }
    int i1 = k.size();
    if (i1 == 0)
    {
      l = "rd.gdatacube.net";
      h();
      return;
    }
    if (!k.contains(l))
    {
      l = "rd.gdatacube.net";
      return;
    }
    int i2 = k.indexOf(l);
    if (i2 + 1 > i1 - 1) {}
    for (i1 = 0;; i1 = i2 + 1)
    {
      String str = (String)k.get(i1);
      t.a("inovke switchSyncHost , switch host from " + l + " to " + str);
      l = str;
      return;
    }
  }
  
  public static long k()
  {
    return ab.b() - h;
  }
  
  public static void l()
  {
    t.a("Invoke CacheFactory.uploadHistoryData start [SH]");
    Object localObject3 = null;
    Object localObject1 = null;
    try
    {
      SQLiteDatabase localSQLiteDatabase = r.c().a();
      localObject1 = localSQLiteDatabase;
      localObject3 = localSQLiteDatabase;
      a(localSQLiteDatabase);
      localObject1 = localSQLiteDatabase;
      localObject3 = localSQLiteDatabase;
      r.c().a(localSQLiteDatabase);
      if (localSQLiteDatabase != null) {}
      return;
    }
    catch (Throwable localThrowable)
    {
      do
      {
        localThrowable = localThrowable;
        localObject3 = localObject1;
        t.a("DataEye SDK upload data error(SH) , reason:" + localThrowable.getMessage(), localThrowable);
      } while (localObject1 == null);
      try
      {
        r.c().a(localObject1);
        return;
      }
      catch (Exception localException1)
      {
        localException1.printStackTrace();
        return;
      }
    }
    finally
    {
      if (localObject3 != null) {}
      try
      {
        r.c().a(localObject3);
        throw localObject2;
      }
      catch (Exception localException3)
      {
        for (;;)
        {
          localException3.printStackTrace();
        }
      }
    }
  }
  
  public static void m()
  {
    t.a("Invoke CacheFactory.uploadHistoryDataAsync start [H]");
    try
    {
      h.a(new f());
      return;
    }
    catch (Throwable localThrowable)
    {
      t.a("DataEye SDK upload data error(H) , reason" + localThrowable.getMessage(), localThrowable);
    }
  }
  
  public static void n()
  {
    t.a("Invoke CacheFactory.uploadBeforeLoginEventAsync start [BL]");
    try
    {
      h.a(new g());
      return;
    }
    catch (Throwable localThrowable)
    {
      t.a("DataEye SDK upload data error(BL) , reason" + localThrowable.getMessage(), localThrowable);
    }
  }
  
  private static void o()
  {
    Object localObject = y.c("DC_JPush_Registed", "");
    HashMap localHashMap;
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      localObject = ((String)localObject).split("@@");
      if (localObject.length == 4)
      {
        localHashMap = new HashMap();
        localHashMap.put("uid", localObject[0]);
        localHashMap.put("appid", localObject[1]);
        localHashMap.put("token", localObject[2]);
        localHashMap.put("registeTime", localObject[3]);
        DCEvent.onEvent("_DESelf_JPush_Registed", localHashMap);
      }
      y.b("DC_JPush_Registed");
    }
    localObject = y.c("DC_XinGe_Registed", "");
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      localObject = ((String)localObject).split("@@");
      if (localObject.length == 4)
      {
        localHashMap = new HashMap();
        localHashMap.put("uid", localObject[0]);
        localHashMap.put("appid", localObject[1]);
        localHashMap.put("token", localObject[2]);
        localHashMap.put("registeTime", localObject[3]);
        DCEvent.onEvent("_DESelf_XinGe_Registed", localHashMap);
      }
      y.b("DC_XinGe_Registed");
    }
  }
}
