package com.dataeye.c;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.text.TextUtils;
import com.dataeye.a.e;
import com.dataeye.a.g;
import com.dataeye.a.i;
import com.dataeye.a.k;
import com.dataeye.b.a;
import com.dataeye.b.c;
import com.dataeye.b.f;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class r
{
  public static ArrayList a = new ArrayList();
  private static r b;
  private static q c;
  
  private r(Context paramContext, String paramString)
  {
    c = new q(paramContext, paramString);
  }
  
  public static r a()
  {
    return b;
  }
  
  public static void a(Context paramContext, String paramString)
  {
    if (b != null) {
      return;
    }
    b = new r(paramContext, paramString);
  }
  
  public static void b()
  {
    a.clear();
  }
  
  public static q c()
  {
    return c;
  }
  
  public ArrayList a(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase = paramSQLiteDatabase.query("dataeye_agenda_log", null, "type=? ", new String[] { "before_login_event" }, null, null, " _id desc ", null);
    ArrayList localArrayList = new ArrayList();
    try
    {
      if (paramSQLiteDatabase.getCount() != 0)
      {
        paramSQLiteDatabase.moveToFirst();
        boolean bool;
        do
        {
          int i = paramSQLiteDatabase.getInt(paramSQLiteDatabase.getColumnIndex("_id"));
          a.add(Integer.valueOf(i));
          String str = paramSQLiteDatabase.getString(paramSQLiteDatabase.getColumnIndex("agenda_data"));
          com.dataeye.a.h localH = new com.dataeye.a.h();
          localH.a(new c(a.a(str)));
          localArrayList.add(localH);
          bool = paramSQLiteDatabase.moveToNext();
        } while (bool);
      }
      return localArrayList;
    }
    catch (Throwable localThrowable)
    {
      return localArrayList;
    }
    finally
    {
      paramSQLiteDatabase.close();
    }
  }
  
  public ArrayList a(String paramString, SQLiteDatabase paramSQLiteDatabase)
  {
    if (b.i == 2) {}
    for (paramString = paramSQLiteDatabase.query("dataeye_agenda_log", null, "( account_id=? or  account_id=? ) and type=? ", new String[] { paramString, "_DESelf_DEFAULT_ACCOUNTID", "payment" }, null, null, " _id desc ", null);; paramString = paramSQLiteDatabase.query("dataeye_agenda_log", null, "account_id=? and type=? ", new String[] { paramString, "payment" }, null, null, " _id desc ", null))
    {
      paramSQLiteDatabase = new ArrayList();
      try
      {
        if (paramString.getCount() != 0)
        {
          paramString.moveToFirst();
          boolean bool;
          do
          {
            int i = paramString.getInt(paramString.getColumnIndex("_id"));
            a.add(Integer.valueOf(i));
            String str = paramString.getString(paramString.getColumnIndex("agenda_data"));
            k localK = new k();
            localK.a(new c(a.a(str)));
            paramSQLiteDatabase.add(localK);
            bool = paramString.moveToNext();
          } while (bool);
        }
        return paramSQLiteDatabase;
      }
      catch (Throwable localThrowable)
      {
        return paramSQLiteDatabase;
      }
      finally
      {
        paramString.close();
      }
    }
  }
  
  public void a(SQLiteDatabase paramSQLiteDatabase, Integer paramInteger)
  {
    paramSQLiteDatabase.execSQL(String.format("DELETE FROM dataeye_history_log WHERE _id = %s", new Object[] { paramInteger }));
  }
  
  public void a(SQLiteDatabase paramSQLiteDatabase, List paramList)
  {
    paramSQLiteDatabase.execSQL(String.format("DELETE FROM dataeye_agenda_log WHERE _id IN (%s)", new Object[] { TextUtils.join(",", paramList.toArray()) }));
  }
  
  public void a(f paramF, SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("insert  or replace into dataeye_history_log( history_data )  values( ? )", new Object[] { a.a(paramF.a()) });
  }
  
  public void a(String paramString, g paramG)
  {
    a("errorreport", paramString, paramG);
  }
  
  public void a(String paramString, com.dataeye.a.h paramH)
  {
    a("event", paramString, paramH);
  }
  
  public void a(String paramString, i paramI)
  {
    a("oss", paramString, paramI);
  }
  
  public void a(String paramString, k paramK)
  {
    a("payment", paramString, paramK);
  }
  
  public void a(String paramString1, String paramString2, f paramF)
  {
    h.a("insert  or replace into dataeye_agenda_log(type,account_id ,agenda_data)  values(?,?,?)", new Object[] { paramString1, paramString2, a.a(paramF.a()) });
  }
  
  public ArrayList b(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase = paramSQLiteDatabase.query("dataeye_agenda_log", null, " type=?", new String[] { "errorreport" }, null, null, "_id desc", null);
    ArrayList localArrayList = new ArrayList();
    try
    {
      if (paramSQLiteDatabase.getCount() != 0)
      {
        paramSQLiteDatabase.moveToFirst();
        boolean bool;
        do
        {
          int i = paramSQLiteDatabase.getInt(paramSQLiteDatabase.getColumnIndex("_id"));
          a.add(Integer.valueOf(i));
          String str = paramSQLiteDatabase.getString(paramSQLiteDatabase.getColumnIndex("agenda_data"));
          g localG = new g();
          localG.a(new c(a.a(str)));
          localArrayList.add(localG);
          bool = paramSQLiteDatabase.moveToNext();
        } while (bool);
      }
      return localArrayList;
    }
    catch (Throwable localThrowable)
    {
      return localArrayList;
    }
    finally
    {
      paramSQLiteDatabase.close();
    }
  }
  
  public ArrayList b(String paramString, SQLiteDatabase paramSQLiteDatabase)
  {
    if (b.i == 2) {}
    for (paramString = paramSQLiteDatabase.query("dataeye_agenda_log", null, "( account_id=? or account_id=? ) and type=? ", new String[] { paramString, "_DESelf_DEFAULT_ACCOUNTID", "event" }, null, null, " _id desc ", null);; paramString = paramSQLiteDatabase.query("dataeye_agenda_log", null, " account_id=? and type=? ", new String[] { paramString, "event" }, null, null, " _id desc ", null))
    {
      paramSQLiteDatabase = new ArrayList();
      try
      {
        if (paramString.getCount() != 0)
        {
          paramString.moveToFirst();
          boolean bool;
          do
          {
            int i = paramString.getInt(paramString.getColumnIndex("_id"));
            a.add(Integer.valueOf(i));
            String str = paramString.getString(paramString.getColumnIndex("agenda_data"));
            com.dataeye.a.h localH = new com.dataeye.a.h();
            localH.a(new c(a.a(str)));
            paramSQLiteDatabase.add(localH);
            bool = paramString.moveToNext();
          } while (bool);
        }
        return paramSQLiteDatabase;
      }
      catch (Throwable localThrowable)
      {
        return paramSQLiteDatabase;
      }
      finally
      {
        paramString.close();
      }
    }
  }
  
  public void b(String paramString, com.dataeye.a.h paramH)
  {
    a("before_login_event", paramString, paramH);
  }
  
  public ArrayList c(String paramString, SQLiteDatabase paramSQLiteDatabase)
  {
    if (b.i == 2) {}
    for (paramString = paramSQLiteDatabase.query("dataeye_agenda_log", null, "( account_id=? or account_id=? ) and type=?", new String[] { paramString, "_DESelf_DEFAULT_ACCOUNTID", "oss" }, null, null, "_id desc", null);; paramString = paramSQLiteDatabase.query("dataeye_agenda_log", null, " account_id=?  and type=?", new String[] { paramString, "oss" }, null, null, "_id desc", null))
    {
      paramSQLiteDatabase = new ArrayList();
      try
      {
        if (paramString.getCount() != 0)
        {
          paramString.moveToFirst();
          boolean bool;
          do
          {
            int i = paramString.getInt(paramString.getColumnIndex("_id"));
            a.add(Integer.valueOf(i));
            String str = paramString.getString(paramString.getColumnIndex("agenda_data"));
            i localI = new i();
            localI.a(new c(a.a(str)));
            paramSQLiteDatabase.add(localI);
            bool = paramString.moveToNext();
          } while (bool);
        }
        return paramSQLiteDatabase;
      }
      catch (Throwable localThrowable)
      {
        return paramSQLiteDatabase;
      }
      finally
      {
        paramString.close();
      }
    }
  }
  
  public HashMap c(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase = paramSQLiteDatabase.query("dataeye_history_log", new String[] { "*" }, null, null, null, null, " _id desc ", null);
    HashMap localHashMap = new HashMap();
    try
    {
      if (paramSQLiteDatabase.getCount() != 0)
      {
        paramSQLiteDatabase.moveToFirst();
        boolean bool;
        do
        {
          int i = paramSQLiteDatabase.getInt(paramSQLiteDatabase.getColumnIndex("_id"));
          String str = paramSQLiteDatabase.getString(paramSQLiteDatabase.getColumnIndex("history_data"));
          e localE = new e();
          localE.a(new c(a.a(str)));
          localHashMap.put(Integer.valueOf(i), localE);
          bool = paramSQLiteDatabase.moveToNext();
        } while (bool);
      }
      return localHashMap;
    }
    catch (Throwable localThrowable)
    {
      return localHashMap;
    }
    finally
    {
      paramSQLiteDatabase.close();
    }
  }
}
