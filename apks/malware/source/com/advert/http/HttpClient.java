package com.advert.http;

import android.os.Build;
import android.os.Build.VERSION;
import android.util.Log;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpVersion;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpProtocolParams;
import org.json.JSONException;
import org.json.JSONObject;

public class HttpClient
{
  public static final int DEFAULT_BUFFER_SIZE = 8192;
  public static final int HTTPS_PORT = 443;
  public static final int HTTP_PORT = 80;
  public static final int JSON_OUTPUT_INDENT = 4;
  public static final String LINE_SEPARATOR = System.getProperty("line.separator");
  public static final Integer SO_TIMEOUT = Integer.valueOf(60000);
  public static final String TAG = HttpClient.class.getName();
  private static final String USER_AGENT = MessageFormat.format("Mozilla/5.0 (Linux; U; Android {0}; en-us; {1}/{2}) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/ 530.17", new Object[] { Build.VERSION.RELEASE, Build.MODEL, Build.DISPLAY });
  private static HttpClient instance;
  private DefaultHttpClient client;
  private List<HttpUriRequest> requests;
  
  private HttpClient()
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_0);
    HttpProtocolParams.setContentCharset(localBasicHttpParams, "UTF-8");
    HttpProtocolParams.setUseExpectContinue(localBasicHttpParams, true);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, SO_TIMEOUT.intValue());
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, SO_TIMEOUT.intValue());
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, 8192);
    SchemeRegistry localSchemeRegistry = new SchemeRegistry();
    localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    localSchemeRegistry.register(new Scheme("https", new CustomSSLSocketFactory(), 443));
    this.client = new DefaultHttpClient(new ThreadSafeClientConnManager(localBasicHttpParams, localSchemeRegistry), localBasicHttpParams);
    this.requests = new ArrayList();
  }
  
  public static HttpClient getInstance()
  {
    try
    {
      if (instance == null) {
        instance = new HttpClient();
      }
      HttpClient localHttpClient = instance;
      return localHttpClient;
    }
    finally {}
  }
  
  /* Error */
  private String getResponse(HttpUriRequest paramHttpUriRequest)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   4: astore_2
    //   5: aload_2
    //   6: monitorenter
    //   7: aload_0
    //   8: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   11: aload_1
    //   12: invokeinterface 184 2 0
    //   17: pop
    //   18: aload_2
    //   19: monitorexit
    //   20: aload_0
    //   21: getfield 160	com/advert/http/HttpClient:client	Lorg/apache/http/impl/client/DefaultHttpClient;
    //   24: aload_1
    //   25: invokevirtual 188	org/apache/http/impl/client/DefaultHttpClient:execute	(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
    //   28: astore_2
    //   29: aload_2
    //   30: invokeinterface 194 1 0
    //   35: invokeinterface 199 1 0
    //   40: sipush 200
    //   43: if_icmpeq +18 -> 61
    //   46: aload_0
    //   47: aload_2
    //   48: invokeinterface 203 1 0
    //   53: invokeinterface 209 1 0
    //   58: invokespecial 213	com/advert/http/HttpClient:log	(Ljava/io/InputStream;)V
    //   61: aload_0
    //   62: aload_2
    //   63: invokeinterface 203 1 0
    //   68: invokeinterface 209 1 0
    //   73: invokespecial 217	com/advert/http/HttpClient:read	(Ljava/io/InputStream;)Ljava/lang/String;
    //   76: astore_3
    //   77: aload_0
    //   78: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   81: astore_2
    //   82: aload_2
    //   83: monitorenter
    //   84: aload_0
    //   85: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   88: aload_1
    //   89: invokeinterface 220 2 0
    //   94: pop
    //   95: aload_2
    //   96: monitorexit
    //   97: aload_3
    //   98: areturn
    //   99: astore_1
    //   100: aload_2
    //   101: monitorexit
    //   102: aload_1
    //   103: athrow
    //   104: astore_2
    //   105: new 174	java/io/IOException
    //   108: dup
    //   109: ldc -34
    //   111: invokespecial 225	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   114: athrow
    //   115: astore_3
    //   116: aload_0
    //   117: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   120: astore_2
    //   121: aload_2
    //   122: monitorenter
    //   123: aload_0
    //   124: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   127: aload_1
    //   128: invokeinterface 220 2 0
    //   133: pop
    //   134: aload_2
    //   135: monitorexit
    //   136: aload_3
    //   137: athrow
    //   138: astore_2
    //   139: new 174	java/io/IOException
    //   142: dup
    //   143: ldc -29
    //   145: invokespecial 225	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   148: athrow
    //   149: astore_1
    //   150: aload_2
    //   151: monitorexit
    //   152: aload_1
    //   153: athrow
    //   154: astore_1
    //   155: aload_2
    //   156: monitorexit
    //   157: aload_1
    //   158: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	159	0	this	HttpClient
    //   0	159	1	paramHttpUriRequest	HttpUriRequest
    //   104	1	2	localUnknownHostException	java.net.UnknownHostException
    //   138	18	2	localHttpHostConnectException	org.apache.http.conn.HttpHostConnectException
    //   76	22	3	str	String
    //   115	22	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   7	20	99	finally
    //   100	102	99	finally
    //   20	61	104	java/net/UnknownHostException
    //   61	77	104	java/net/UnknownHostException
    //   20	61	115	finally
    //   61	77	115	finally
    //   105	115	115	finally
    //   139	149	115	finally
    //   20	61	138	org/apache/http/conn/HttpHostConnectException
    //   61	77	138	org/apache/http/conn/HttpHostConnectException
    //   123	136	149	finally
    //   150	152	149	finally
    //   84	97	154	finally
    //   155	157	154	finally
  }
  
  private void log(InputStream paramInputStream)
    throws IOException
  {
    BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramInputStream));
    for (;;)
    {
      try
      {
        str = localBufferedReader.readLine();
        if (str != null) {}
      }
      finally
      {
        try
        {
          String str;
          paramInputStream.close();
          throw localObject;
        }
        catch (IOException paramInputStream)
        {
          Log.d(TAG, "IOException caught: " + paramInputStream.getMessage());
          continue;
        }
      }
      try
      {
        paramInputStream.close();
        return;
      }
      catch (IOException paramInputStream)
      {
        Log.d(TAG, "IOException caught: " + paramInputStream.getMessage());
      }
      Log.d(TAG, str);
    }
  }
  
  private String read(InputStream paramInputStream)
    throws IOException
  {
    Object localObject = new BufferedReader(new InputStreamReader(paramInputStream), 8192);
    StringBuilder localStringBuilder = new StringBuilder();
    for (;;)
    {
      try
      {
        str2 = ((BufferedReader)localObject).readLine();
        if (str2 == null) {
          localObject = localStringBuilder.toString();
        }
      }
      finally
      {
        try
        {
          String str2;
          paramInputStream.close();
          throw str1;
        }
        catch (IOException paramInputStream)
        {
          Log.d(TAG, "IOException caught: " + paramInputStream.getMessage());
          continue;
        }
        return str1;
      }
      try
      {
        paramInputStream.close();
        return localObject;
      }
      catch (IOException paramInputStream)
      {
        Log.d(TAG, "IOException caught: " + paramInputStream.getMessage());
      }
      localStringBuilder.append(str2).append(LINE_SEPARATOR);
    }
  }
  
  /* Error */
  public final void cancel()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: getstatic 36	com/advert/http/HttpClient:TAG	Ljava/lang/String;
    //   5: ldc_w 273
    //   8: invokestatic 251	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   11: pop
    //   12: aload_0
    //   13: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   16: invokeinterface 276 1 0
    //   21: istore_1
    //   22: iload_1
    //   23: ifgt +30 -> 53
    //   26: aload_0
    //   27: getfield 160	com/advert/http/HttpClient:client	Lorg/apache/http/impl/client/DefaultHttpClient;
    //   30: invokevirtual 280	org/apache/http/impl/client/DefaultHttpClient:getConnectionManager	()Lorg/apache/http/conn/ClientConnectionManager;
    //   33: astore_2
    //   34: aload_2
    //   35: invokeinterface 285 1 0
    //   40: aload_2
    //   41: lconst_0
    //   42: getstatic 291	java/util/concurrent/TimeUnit:MILLISECONDS	Ljava/util/concurrent/TimeUnit;
    //   45: invokeinterface 295 4 0
    //   50: aload_0
    //   51: monitorexit
    //   52: return
    //   53: aload_0
    //   54: getfield 165	com/advert/http/HttpClient:requests	Ljava/util/List;
    //   57: iconst_0
    //   58: invokeinterface 298 2 0
    //   63: checkcast 300	org/apache/http/client/methods/HttpUriRequest
    //   66: invokeinterface 303 1 0
    //   71: iload_1
    //   72: iconst_1
    //   73: isub
    //   74: istore_1
    //   75: goto -53 -> 22
    //   78: astore_2
    //   79: aload_0
    //   80: monitorexit
    //   81: aload_2
    //   82: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	83	0	this	HttpClient
    //   21	54	1	i	int
    //   33	8	2	localClientConnectionManager	ClientConnectionManager
    //   78	4	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	22	78	finally
    //   26	50	78	finally
    //   53	71	78	finally
  }
  
  public void clearCookies()
  {
    this.client.getCookieStore().clear();
  }
  
  protected Object clone()
    throws CloneNotSupportedException
  {
    throw new CloneNotSupportedException("Singleton");
  }
  
  public final String get(String paramString)
    throws IOException
  {
    Log.d(TAG, "GET " + paramString);
    return getResponse(new HttpGet(paramString));
  }
  
  public final String post(String paramString1, String paramString2)
    throws IOException
  {
    HttpPost localHttpPost = new HttpPost(paramString1);
    localHttpPost.setHeader("Accept", "*/*");
    localHttpPost.setHeader("User-Agent", USER_AGENT);
    localHttpPost.setEntity(new StringEntity(paramString2));
    Log.d(TAG, "POST to " + paramString1);
    return getResponse(localHttpPost);
  }
  
  public final String post(String paramString, JSONObject paramJSONObject)
    throws IOException
  {
    HttpPost localHttpPost = new HttpPost(paramString);
    localHttpPost.setHeader("Accept", "*/*");
    localHttpPost.setHeader("Content-type", "multipart/form-data");
    localHttpPost.setHeader("User-Agent", USER_AGENT);
    localHttpPost.setEntity(new StringEntity(paramJSONObject.toString()));
    Log.d(TAG, "POST to " + paramString);
    try
    {
      Log.d(TAG, paramJSONObject.toString(4));
      return getResponse(localHttpPost);
    }
    catch (JSONException paramString)
    {
      for (;;)
      {
        Log.d(TAG, paramString.getMessage());
      }
    }
  }
  
  public void printCookies()
  {
    List localList = this.client.getCookieStore().getCookies();
    if (localList.isEmpty()) {
      System.out.println("None");
    }
    for (;;)
    {
      return;
      int i = 0;
      while (i < localList.size())
      {
        System.out.println("- " + ((Cookie)localList.get(i)).toString());
        i += 1;
      }
    }
  }
  
  public final void shutdown()
  {
    this.client.getConnectionManager().shutdown();
    Log.d(TAG, "Http client have been shutdown");
  }
}
