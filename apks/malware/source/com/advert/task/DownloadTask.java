package com.advert.task;

import android.os.AsyncTask;
import android.util.Log;
import com.advert.data.ImageManager;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class DownloadTask
  extends AsyncTask<String, Void, Object>
{
  private static final String CONNECTION = "Connection";
  private static final String KEEP_ALIVE = "Keep-Alive";
  private static final String TAG = DownloadTask.class.getName();
  private boolean cache;
  private HttpURLConnection conn;
  private List<DownloadConsumer> consumers = new ArrayList();
  private ImageManager manager;
  private String url;
  
  public DownloadTask(ImageManager paramImageManager, DownloadConsumer paramDownloadConsumer, boolean paramBoolean)
  {
    this.cache = paramBoolean;
    this.consumers.add(paramDownloadConsumer);
    this.manager = paramImageManager;
  }
  
  private BufferedInputStream download(String paramString)
  {
    try
    {
      this.conn = ((HttpURLConnection)new URL(paramString).openConnection());
      this.conn.setDoInput(true);
      this.conn.setRequestProperty("Connection", "Keep-Alive");
      this.conn.connect();
      paramString = new BufferedInputStream(this.conn.getInputStream(), 8192);
      return paramString;
    }
    catch (MalformedURLException paramString)
    {
      Log.d(TAG, Log.getStackTraceString(paramString));
      return null;
    }
    catch (OutOfMemoryError paramString)
    {
      Log.d(TAG, Log.getStackTraceString(paramString));
      return null;
    }
    catch (IllegalStateException paramString)
    {
      Log.d(TAG, Log.getStackTraceString(paramString));
      return null;
    }
    catch (IOException paramString) {}
    return null;
  }
  
  /* Error */
  private android.graphics.Bitmap downloadBitmap(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore_2
    //   4: aload_0
    //   5: aload_1
    //   6: invokespecial 110	com/advert/task/DownloadTask:download	(Ljava/lang/String;)Ljava/io/BufferedInputStream;
    //   9: astore_1
    //   10: aload_1
    //   11: astore_2
    //   12: aload_1
    //   13: astore_3
    //   14: aload_1
    //   15: invokestatic 116	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;)Landroid/graphics/Bitmap;
    //   18: astore 4
    //   20: aload_1
    //   21: ifnull +7 -> 28
    //   24: aload_1
    //   25: invokevirtual 121	java/io/InputStream:close	()V
    //   28: aload_0
    //   29: invokevirtual 124	com/advert/task/DownloadTask:stop	()V
    //   32: aload 4
    //   34: areturn
    //   35: astore_1
    //   36: aload_2
    //   37: astore_3
    //   38: getstatic 33	com/advert/task/DownloadTask:TAG	Ljava/lang/String;
    //   41: aload_1
    //   42: invokestatic 102	android/util/Log:getStackTraceString	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   45: invokestatic 106	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   48: pop
    //   49: aload_2
    //   50: ifnull +7 -> 57
    //   53: aload_2
    //   54: invokevirtual 121	java/io/InputStream:close	()V
    //   57: aload_0
    //   58: invokevirtual 124	com/advert/task/DownloadTask:stop	()V
    //   61: aconst_null
    //   62: areturn
    //   63: astore_1
    //   64: aload_3
    //   65: ifnull +7 -> 72
    //   68: aload_3
    //   69: invokevirtual 121	java/io/InputStream:close	()V
    //   72: aload_0
    //   73: invokevirtual 124	com/advert/task/DownloadTask:stop	()V
    //   76: aload_1
    //   77: athrow
    //   78: astore_1
    //   79: goto -22 -> 57
    //   82: astore_2
    //   83: goto -11 -> 72
    //   86: astore_1
    //   87: goto -59 -> 28
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	90	0	this	DownloadTask
    //   0	90	1	paramString	String
    //   3	51	2	str	String
    //   82	1	2	localIOException	IOException
    //   1	68	3	localObject	Object
    //   18	15	4	localBitmap	android.graphics.Bitmap
    // Exception table:
    //   from	to	target	type
    //   4	10	35	java/lang/OutOfMemoryError
    //   14	20	35	java/lang/OutOfMemoryError
    //   4	10	63	finally
    //   14	20	63	finally
    //   38	49	63	finally
    //   53	57	78	java/io/IOException
    //   68	72	82	java/io/IOException
    //   24	28	86	java/io/IOException
  }
  
  public final void addConsumer(DownloadConsumer paramDownloadConsumer)
  {
    if (!this.consumers.contains(paramDownloadConsumer)) {
      this.consumers.add(paramDownloadConsumer);
    }
  }
  
  protected final Object doInBackground(String... paramVarArgs)
  {
    this.url = paramVarArgs[0];
    switch (((DownloadConsumer)this.consumers.get(0)).getType())
    {
    default: 
      return null;
    }
    return downloadBitmap(this.url);
  }
  
  protected final void onPostExecute(Object paramObject)
  {
    Iterator localIterator;
    if (!isCancelled()) {
      localIterator = this.consumers.iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        this.manager.complete(paramObject, this.url, this.cache);
        return;
      }
      ((DownloadConsumer)localIterator.next()).consume(paramObject);
    }
  }
  
  public final void stop()
  {
    if (this.conn != null)
    {
      this.conn.disconnect();
      this.conn = null;
    }
  }
}
