package com.ta.utdid2.c.a;

import android.util.Xml;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public final class d
{
  private static final Object c = new Object();
  private final Object a = new Object();
  private File b;
  private HashMap d = new HashMap();
  
  public d(String paramString)
  {
    if ((paramString != null) && (paramString.length() > 0))
    {
      this.b = new File(paramString);
      return;
    }
    throw new RuntimeException("Directory can not be empty");
  }
  
  private File b()
  {
    synchronized (this.a)
    {
      File localFile = this.b;
      return localFile;
    }
  }
  
  private static File b(File paramFile)
  {
    return new File(paramFile.getPath() + ".bak");
  }
  
  public final b a(String arg1)
  {
    Object localObject1 = b();
    ??? = ??? + ".xml";
    File localFile;
    if (???.indexOf(File.separatorChar) < 0) {
      localFile = new File((File)localObject1, ???);
    }
    d.a localA;
    synchronized (c)
    {
      localA = (d.a)this.d.get(localFile);
      if ((localA != null) && (!localA.e()))
      {
        return localA;
        throw new IllegalArgumentException("File " + ??? + " contains a path separator");
      }
      ??? = b(localFile);
      if (???.exists())
      {
        localFile.delete();
        ???.renameTo(localFile);
      }
      if (localFile.exists()) {
        localFile.canRead();
      }
      if ((!localFile.exists()) || (!localFile.canRead())) {}
    }
    for (;;)
    {
      try
      {
        localObject1 = new FileInputStream(localFile);
        ??? = Xml.newPullParser();
        ???.setInput((InputStream)localObject1, null);
        ??? = (HashMap)e.a(???, new String[1]);
        Object localObject4;
        FileInputStream localFileInputStream;
        Object localObject3;
        ??? = null;
      }
      catch (XmlPullParserException localObject2)
      {
        try
        {
          ((FileInputStream)localObject1).close();
          localObject4 = c;
          if (localA == null) {
            continue;
          }
          try
          {
            localA.a(???);
            localObject1 = localA;
            return localObject1;
          }
          finally {}
          localObject2 = finally;
          throw localObject2;
        }
        catch (Exception localException2)
        {
          continue;
        }
        catch (IOException localIOException3)
        {
          continue;
        }
        catch (FileNotFoundException localFileNotFoundException3)
        {
          continue;
        }
        catch (XmlPullParserException localXmlPullParserException)
        {
          continue;
        }
        ??? = ???;
        ??? = null;
        try
        {
          localFileInputStream = new FileInputStream(localFile);
          localObject4 = new byte[localFileInputStream.available()];
          localFileInputStream.read((byte[])localObject4);
          new String((byte[])localObject4, 0, localObject4.length, "UTF-8");
        }
        catch (FileNotFoundException localFileNotFoundException1)
        {
          localFileNotFoundException1.printStackTrace();
        }
        catch (IOException localIOException1)
        {
          localIOException1.printStackTrace();
        }
      }
      catch (FileNotFoundException localFileNotFoundException2)
      {
        ??? = null;
        localFileNotFoundException2.printStackTrace();
      }
      catch (IOException localIOException2)
      {
        ??? = null;
        localIOException2.printStackTrace();
      }
      catch (Exception localException1)
      {
        ??? = null;
        localException1.printStackTrace();
        continue;
        localA = (d.a)this.d.get(localFile);
        localObject3 = localA;
        if (localA == null)
        {
          localObject3 = new d.a(localFile, ???);
          this.d.put(localFile, localObject3);
        }
      }
    }
  }
}
