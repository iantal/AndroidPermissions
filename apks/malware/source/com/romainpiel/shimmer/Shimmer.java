package com.romainpiel.shimmer;

import android.animation.Animator.AnimatorListener;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.view.View;

@SuppressLint({"NewApi"})
@TargetApi(11)
public class Shimmer
{
  public static final int ANIMATION_DIRECTION_LTR = 0;
  public static final int ANIMATION_DIRECTION_RTL = 1;
  private static final int DEFAULT_DIRECTION = 0;
  private static final long DEFAULT_DURATION = 1000L;
  private static final int DEFAULT_REPEAT_COUNT = -1;
  private static final long DEFAULT_START_DELAY = 0L;
  private ObjectAnimator animator;
  private Animator.AnimatorListener animatorListener;
  private int direction = 0;
  private long duration = 1000L;
  private int repeatCount = -1;
  private long startDelay = 0L;
  
  public Shimmer() {}
  
  public void cancel()
  {
    if (this.animator != null) {
      this.animator.cancel();
    }
  }
  
  public Animator.AnimatorListener getAnimatorListener()
  {
    return this.animatorListener;
  }
  
  public int getDirection()
  {
    return this.direction;
  }
  
  public long getDuration()
  {
    return this.duration;
  }
  
  public int getRepeatCount()
  {
    return this.repeatCount;
  }
  
  public long getStartDelay()
  {
    return this.startDelay;
  }
  
  @SuppressLint({"NewApi"})
  public boolean isAnimating()
  {
    return (this.animator != null) && (this.animator.isRunning());
  }
  
  public Shimmer setAnimatorListener(Animator.AnimatorListener paramAnimatorListener)
  {
    this.animatorListener = paramAnimatorListener;
    return this;
  }
  
  public Shimmer setDirection(int paramInt)
  {
    if ((paramInt != 0) && (paramInt != 1)) {
      throw new IllegalArgumentException("The animation direction must be either ANIMATION_DIRECTION_LTR or ANIMATION_DIRECTION_RTL");
    }
    this.direction = paramInt;
    return this;
  }
  
  public Shimmer setDuration(long paramLong)
  {
    this.duration = paramLong;
    return this;
  }
  
  public Shimmer setRepeatCount(int paramInt)
  {
    this.repeatCount = paramInt;
    return this;
  }
  
  public Shimmer setStartDelay(long paramLong)
  {
    this.startDelay = paramLong;
    return this;
  }
  
  @SuppressLint({"NewApi"})
  @TargetApi(11)
  public void start(View paramView)
  {
    if (isAnimating()) {
      return;
    }
    Shimmer.1 local1 = new Shimmer.1(this, paramView);
    if (!((ShimmerViewBase)paramView).isSetUp())
    {
      ((ShimmerViewBase)paramView).setAnimationSetupCallback(new Shimmer.2(this, local1));
      return;
    }
    local1.run();
  }
}
