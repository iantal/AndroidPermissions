package com.romainpiel.shimmer;

import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Shader.TileMode;
import android.util.AttributeSet;
import android.view.View;

public class ShimmerViewHelper
{
  private static final int DEFAULT_REFLECTION_COLOR = -16711936;
  private ShimmerViewHelper.AnimationSetupCallback callback;
  private float gradientX;
  private boolean isSetUp;
  private boolean isShimmering;
  private LinearGradient linearGradient;
  private Matrix linearGradientMatrix;
  private Paint paint;
  private int primaryColor;
  private int reflectionColor;
  private View view;
  
  public ShimmerViewHelper(View paramView, Paint paramPaint, AttributeSet paramAttributeSet)
  {
    this.view = paramView;
    this.paint = paramPaint;
    init(paramAttributeSet);
  }
  
  private void init(AttributeSet paramAttributeSet)
  {
    this.reflectionColor = -16711936;
    this.linearGradientMatrix = new Matrix();
  }
  
  private void resetLinearGradient()
  {
    float f = -this.view.getWidth();
    int i = this.primaryColor;
    int j = this.reflectionColor;
    int k = this.primaryColor;
    Shader.TileMode localTileMode = Shader.TileMode.CLAMP;
    this.linearGradient = new LinearGradient(f, 0.0F, 0.0F, 0.0F, new int[] { i, j, k }, new float[] { 0.0F, 0.5F, 1.0F }, localTileMode);
    this.paint.setShader(this.linearGradient);
  }
  
  public float getGradientX()
  {
    return this.gradientX;
  }
  
  public int getPrimaryColor()
  {
    return this.primaryColor;
  }
  
  public int getReflectionColor()
  {
    return this.reflectionColor;
  }
  
  public boolean isSetUp()
  {
    return this.isSetUp;
  }
  
  public boolean isShimmering()
  {
    return this.isShimmering;
  }
  
  public void onDraw()
  {
    if (this.isShimmering)
    {
      if (this.paint.getShader() == null) {
        this.paint.setShader(this.linearGradient);
      }
      this.linearGradientMatrix.setTranslate(2.0F * this.gradientX, 0.0F);
      this.linearGradient.setLocalMatrix(this.linearGradientMatrix);
      return;
    }
    this.paint.setShader(null);
  }
  
  protected void onSizeChanged()
  {
    resetLinearGradient();
    if (!this.isSetUp)
    {
      this.isSetUp = true;
      if (this.callback != null) {
        this.callback.onSetupAnimation(this.view);
      }
    }
  }
  
  public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback paramAnimationSetupCallback)
  {
    this.callback = paramAnimationSetupCallback;
  }
  
  public void setGradientX(float paramFloat)
  {
    this.gradientX = paramFloat;
    this.view.invalidate();
  }
  
  public void setPrimaryColor(int paramInt)
  {
    this.primaryColor = paramInt;
    if (this.isSetUp) {
      resetLinearGradient();
    }
  }
  
  public void setReflectionColor(int paramInt)
  {
    this.reflectionColor = paramInt;
    if (this.isSetUp) {
      resetLinearGradient();
    }
  }
  
  public void setShimmering(boolean paramBoolean)
  {
    this.isShimmering = paramBoolean;
  }
}
