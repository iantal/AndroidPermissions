package com.rbyqfmconb.wsyhvghvvq177359;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import java.io.PrintStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

abstract class CE
{
  static final String EVENT_RECURRENCE = "rrule";
  static final String EVENT_REMINDER = "reminder";
  static final String EVENT_TRANSPARENCY = "transparency";
  final String a = "id";
  final String b = "summary";
  final String c = "location";
  final String d = "description";
  final String e = "start";
  final String f = "end";
  final String g = "status";
  final String h = "transparency";
  final String i = "recurrence";
  final String j = "reminder";
  
  CE() {}
  
  static long a(String paramString)
    throws Exception
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
    localSimpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    paramString = localSimpleDateFormat.parse(paramString);
    System.out.println(paramString);
    localSimpleDateFormat = new SimpleDateFormat();
    localSimpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    paramString = localSimpleDateFormat.format(paramString);
    return DateFormat.getInstance().parse(paramString).getTime();
  }
  
  @TargetApi(14)
  public static void a(Activity paramActivity, String paramString)
    throws ActivityNotFoundException, Exception
  {
    Object localObject = new JSONObject(paramString);
    if (((JSONObject)localObject).isNull("id")) {
      paramString = "";
    }
    for (;;)
    {
      String str1;
      label36:
      String str2;
      label49:
      String str3;
      label63:
      String str4;
      label77:
      String str5;
      label91:
      String str6;
      label105:
      String str7;
      label119:
      String str8;
      if (((JSONObject)localObject).isNull("summary"))
      {
        str1 = "";
        if (!((JSONObject)localObject).isNull("location")) {
          break label378;
        }
        str2 = "";
        if (!((JSONObject)localObject).isNull("description")) {
          break label389;
        }
        str3 = "";
        if (!((JSONObject)localObject).isNull("start")) {
          break label401;
        }
        str4 = "";
        if (!((JSONObject)localObject).isNull("end")) {
          break label413;
        }
        str5 = "";
        if (!((JSONObject)localObject).isNull("status")) {
          break label425;
        }
        str6 = "";
        if (!((JSONObject)localObject).isNull("transparency")) {
          break label437;
        }
        str7 = "";
        if (!((JSONObject)localObject).isNull("reminder")) {
          break label449;
        }
        str8 = "";
        label133:
        if (!((JSONObject)localObject).isNull("recurrence")) {
          break label461;
        }
        localObject = "";
        label147:
        Recurrence localRecurrence = new Recurrence((String)localObject);
        localObject = new Intent("android.intent.action.INSERT");
        ((Intent)localObject).setAction("android.intent.action.EDIT");
        ((Intent)localObject).setType("vnd.android.cursor.item/event");
        ((Intent)localObject).putExtra("calendar_id", paramString);
        ((Intent)localObject).putExtra("title", str1);
        ((Intent)localObject).putExtra("eventLocation", str2);
        ((Intent)localObject).putExtra("description", str3);
        ((Intent)localObject).putExtra("beginTime", a(str4));
        ((Intent)localObject).putExtra("endTime", a(str5));
        ((Intent)localObject).putExtra("eventStatus", str6);
        ((Intent)localObject).putExtra("transparency", str7);
        ((Intent)localObject).putExtra("rrule", localRecurrence.getRrule());
        ((Intent)localObject).putExtra("exdate", localRecurrence.a());
        if (str8 == null) {}
      }
      try
      {
        if (!str8.equals(""))
        {
          ((Intent)localObject).putExtra("event_id", paramString);
          ((Intent)localObject).putExtra("method", 0);
          if (!str8.startsWith("-")) {
            break label473;
          }
          ((Intent)localObject).putExtra("minutes", str8);
        }
        for (;;)
        {
          paramActivity.startActivityForResult((Intent)localObject, 7);
          return;
          paramString = ((JSONObject)localObject).getString("id");
          break;
          str1 = ((JSONObject)localObject).getString("summary");
          break label36;
          label378:
          str2 = ((JSONObject)localObject).getString("location");
          break label49;
          label389:
          str3 = ((JSONObject)localObject).getString("description");
          break label63;
          label401:
          str4 = ((JSONObject)localObject).getString("start");
          break label77;
          label413:
          str5 = ((JSONObject)localObject).getString("end");
          break label91;
          label425:
          str6 = ((JSONObject)localObject).getString("status");
          break label105;
          label437:
          str7 = ((JSONObject)localObject).getString("transparency");
          break label119;
          label449:
          str8 = ((JSONObject)localObject).getString("reminder");
          break label133;
          label461:
          localObject = ((JSONObject)localObject).getString("recurrence");
          break label147;
          label473:
          ((Intent)localObject).putExtra("minutes", a(str8));
        }
      }
      catch (Exception paramString)
      {
        for (;;)
        {
          paramString.printStackTrace();
        }
      }
    }
  }
  
  public static class Recurrence
  {
    String[] a = { "SU", "MO", "TU", "WE", "TH", "FR", "SA" };
    final String b = "frequency";
    final String c = "interval";
    final String d = "expires";
    final String e = "exceptionDates";
    final String f = "daysInWeek";
    final String g = "daysInMonth";
    final String h = "daysInYear";
    final String i = "weeksInMonth";
    final String j = "monthsInYear";
    String k;
    short l;
    String m;
    String[] n;
    short[] o;
    short[] p;
    short[] q;
    short[] r;
    short[] s;
    final JSONObject t;
    
    public Recurrence(String paramString)
      throws NullPointerException, JSONException
    {
      this.t = new JSONObject(paramString);
      short s1;
      if (this.t.isNull("frequency"))
      {
        paramString = "";
        this.k = paramString;
        if (!this.t.isNull("interval")) {
          break label245;
        }
        s1 = 0;
        label151:
        this.l = s1;
        if (!this.t.isNull("expires")) {
          break label261;
        }
        paramString = "";
        label171:
        this.m = paramString;
        if (!this.t.isNull("exceptionDates")) {
          break label274;
        }
      }
      label245:
      label261:
      label274:
      for (paramString = null;; paramString = this.t.getJSONArray("exceptionDates"))
      {
        if (paramString == null) {
          break label287;
        }
        this.n = new String[paramString.length()];
        while (i1 < this.n.length)
        {
          this.n[i1] = paramString.getString(i1);
          i1 += 1;
        }
        paramString = this.t.getString("frequency");
        break;
        s1 = Short.parseShort(this.t.getString("interval"));
        break label151;
        paramString = this.t.getString("expires");
        break label171;
      }
      label287:
      this.o = a("daysInWeek");
      this.p = a("daysInMonth");
      this.q = a("daysInYear");
      this.r = a("weeksInMonth");
      this.s = a("monthsInYear");
    }
    
    String a()
      throws Exception
    {
      if (this.n != null) {
        return getDate(this.n);
      }
      return "";
    }
    
    final short[] a(String paramString)
      throws NullPointerException, JSONException
    {
      short[] arrayOfShort = null;
      if (this.t.isNull(paramString)) {}
      for (paramString = null; paramString != null; paramString = this.t.getJSONArray(paramString))
      {
        arrayOfShort = new short[paramString.length()];
        int i1 = 0;
        while (i1 < arrayOfShort.length)
        {
          arrayOfShort[i1] = ((short)paramString.getInt(i1));
          i1 += 1;
        }
      }
      return arrayOfShort;
    }
    
    public String getDate(String paramString)
      throws Exception
    {
      paramString = new SimpleDateFormat("yyyy-MM-dd").parse(paramString);
      System.out.println("dt: " + paramString);
      return new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'").format(paramString);
    }
    
    public String getDate(String[] paramArrayOfString)
      throws Exception
    {
      Object localObject1 = "";
      int i1 = 0;
      if (i1 < paramArrayOfString.length)
      {
        if (i1 == 0)
        {
          localObject1 = new SimpleDateFormat("yyyy-MM-dd").parse(paramArrayOfString[i1]);
          System.out.println("dt: " + localObject1);
          localObject1 = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'").format((Date)localObject1);
        }
        Object localObject2;
        for (localObject1 = "" + (String)localObject1;; localObject1 = (String)localObject1 + "," + (String)localObject2)
        {
          i1 += 1;
          break;
          localObject2 = new SimpleDateFormat("yyyy-MM-dd").parse(paramArrayOfString[i1]);
          System.out.println("dt: " + localObject2);
          localObject2 = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'").format((Date)localObject2);
        }
      }
      return localObject1;
    }
    
    public String getDate(short[] paramArrayOfShort)
    {
      String str = "";
      int i1 = 0;
      if (i1 < paramArrayOfShort.length)
      {
        int i2;
        if (i1 == 0) {
          i2 = paramArrayOfShort[i1];
        }
        for (str = "" + this.a[i2];; str = str + "," + this.a[i2])
        {
          i1 += 1;
          break;
          i2 = paramArrayOfShort[i1];
        }
      }
      return str;
    }
    
    public String getRrule()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      try
      {
        if ((this.k != null) && (!this.k.equals(""))) {
          localStringBuilder.append("FREQ=" + this.k + ";");
        }
        if (this.l != 0) {
          localStringBuilder.append("INTERVAL=" + this.l + ";");
        }
        if ((this.m != null) && (!this.m.equals(""))) {
          localStringBuilder.append("UNTIL=" + getDate(this.m) + ";");
        }
        if (this.o != null) {
          localStringBuilder.append("BYDAY=" + getDate(this.o) + ";");
        }
        if (this.p != null) {
          localStringBuilder.append("BYMONTHDAY=" + this.p + ";");
        }
        if (this.q != null) {
          localStringBuilder.append("BYYEARDAY=" + this.q + ";");
        }
        if (this.r != null) {
          localStringBuilder.append("BYWEEKNO=" + this.r + ";");
        }
        if (this.s != null) {
          localStringBuilder.append("BYMONTH=" + this.s + ";");
        }
        Util.a("Rrule: " + localStringBuilder.toString());
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
      return localStringBuilder.toString();
    }
  }
}
