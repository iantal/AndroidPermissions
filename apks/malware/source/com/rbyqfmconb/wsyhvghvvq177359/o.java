package com.rbyqfmconb.wsyhvghvvq177359;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import java.util.StringTokenizer;
import org.json.JSONObject;

abstract class o
  implements f
{
  private static final String TAG = "BunSDK";
  private static boolean isSent = false;
  
  o() {}
  
  static boolean checkRequiredPermission(Context paramContext)
  {
    boolean bool2 = false;
    int i;
    int j;
    label25:
    int k;
    label36:
    int m;
    label48:
    int n;
    label60:
    int i1;
    label72:
    int i2;
    label84:
    int i3;
    if (paramContext.checkCallingOrSelfPermission("android.permission.INTERNET") == 0)
    {
      i = 1;
      if (paramContext.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") != 0) {
        break label296;
      }
      j = 1;
      if (paramContext.checkCallingOrSelfPermission("android.permission.READ_PHONE_STATE") != 0) {
        break label301;
      }
      k = 1;
      if (paramContext.checkCallingOrSelfPermission("com.android.browser.permission.READ_HISTORY_BOOKMARKS") != 0) {
        break label306;
      }
      m = 1;
      if (paramContext.checkCallingOrSelfPermission("android.permission.ACCESS_FINE_LOCATION") != 0) {
        break label312;
      }
      n = 1;
      if (paramContext.checkCallingOrSelfPermission("android.permission.ACCESS_COARSE_LOCATION") != 0) {
        break label318;
      }
      i1 = 1;
      if (paramContext.checkCallingOrSelfPermission("android.permission.GET_ACCOUNTS") != 0) {
        break label324;
      }
      i2 = 1;
      if (paramContext.checkCallingOrSelfPermission("android.permission.RECEIVE_BOOT_COMPLETED") != 0) {
        break label330;
      }
      i3 = 1;
      label96:
      if (i != 0) {
        break label339;
      }
      Log.e("BunSDK", "Required INTERNET permission not found in manifest.");
      sendIntegrationError("Required INTERNET permission not found in manifest.");
    }
    label296:
    label301:
    label306:
    label312:
    label318:
    label324:
    label330:
    label339:
    for (boolean bool1 = false;; bool1 = true)
    {
      if (j == 0)
      {
        Log.e("BunSDK", "Required ACCESS_NETWORK_STATE permission not found in manifest.");
        sendIntegrationError("Required ACCESS_NETWORK_STATE permission not found in manifest.");
        bool1 = false;
      }
      if (k == 0)
      {
        Log.e("BunSDK", "Required READ_PHONE_STATE permission not found in manifest.");
        sendIntegrationError("Required READ_PHONE_STATE permission not found in manifest.");
        bool1 = false;
      }
      if (m == 0)
      {
        Log.e("BunSDK", "Required READ_HISTORY_BOOKMARKS permission not found in manifest.");
        sendIntegrationError("Required READ_HISTORY_BOOKMARKS permission not found in manifest.");
        bool1 = false;
      }
      if (n == 0)
      {
        Log.e("BunSDK", "Required ACCESS_FINE_LOCATION permission not found in manifest.");
        sendIntegrationError("Required ACCESS_FINE_LOCATION permission not found in manifest.");
        bool1 = false;
      }
      if (i1 == 0)
      {
        Log.e("BunSDK", "Required ACCESS_COARSE_LOCATION permission not found in manifest.");
        sendIntegrationError("Required ACCESS_COARSE_LOCATION permission not found in manifest.");
        bool1 = false;
      }
      if (i2 == 0)
      {
        Log.e("BunSDK", "Required GET_ACCOUNTS permission not found in manifest.");
        sendIntegrationError("Required GET_ACCOUNTS permission not found in manifest.");
        bool1 = false;
      }
      if (i3 == 0)
      {
        Log.e("BunSDK", "Required RECEIVE_BOOT_COMPLETED permission not found in manifest.");
        sendIntegrationError("Required RECEIVE_BOOT_COMPLETED permission not found in manifest.");
        bool1 = bool2;
      }
      for (;;)
      {
        if ((!bool1) && (!isSent))
        {
          new n(paramContext, 100);
          isSent = true;
        }
        return bool1;
        i = 0;
        break;
        j = 0;
        break label25;
        k = 0;
        break label36;
        m = 0;
        break label48;
        n = 0;
        break label60;
        i1 = 0;
        break label72;
        i2 = 0;
        break label84;
        i3 = 0;
        break label96;
      }
    }
  }
  
  public static void enableSDK(Context paramContext, boolean paramBoolean)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences("sdkPrefs", 0).edit();
      paramContext.putBoolean("SDKEnabled", paramBoolean);
      paramContext.commit();
      Log.i("BunSDK", "SDK enabled: " + paramBoolean);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  static boolean getDataFromManifest(Context paramContext)
  {
    for (;;)
    {
      try
      {
        localObject2 = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData;
        str = ((Bundle)localObject2).get("com.rbyqfmconb.wsyhvghvvq177359.APPID").toString();
        if ((str != null) && (!str.equals("")) && (!str.equals("0"))) {
          Util.f(str);
        }
        localObject1 = "";
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        Object localObject2;
        String str;
        Object localObject1;
        Object localObject3;
        Log.e("BunSDK", "AppId or ApiKey not found in Manifest. Please add.", paramContext);
        sendIntegrationError("AppId or ApiKey not found in Manifest. Please add.");
        return false;
      }
      catch (Exception paramContext)
      {
        Log.e("BunSDK", "Please check your SDK declarations in Manifest. This errors comes when SDK unable to fetch APPID or APIKEY from Manifest. SDK Package Name: ", paramContext);
        sendIntegrationError("Please check your SDK declarations in Manifest. This error comes when SDK unable to fetch APPID or APIKEY from Manifest.");
        continue;
      }
      try
      {
        localObject2 = ((Bundle)localObject2).get("com.rbyqfmconb.wsyhvghvvq177359.APIKEY").toString();
        if (localObject2 != null) {
          localObject1 = localObject2;
        }
        try
        {
          if (!((String)localObject2).equals(""))
          {
            localObject1 = localObject2;
            if (!((String)localObject2).equals("0"))
            {
              localObject1 = localObject2;
              StringTokenizer localStringTokenizer = new StringTokenizer((String)localObject2, "*");
              localObject1 = localObject2;
              localStringTokenizer.nextToken();
              localObject1 = localObject2;
              localObject2 = localStringTokenizer.nextToken();
              localObject1 = localObject2;
              Util.e((String)localObject2);
              Util.a("AppId: " + str + " ApiKey=" + (String)localObject2);
              return true;
            }
          }
          localObject1 = localObject2;
          Util.e("airplay");
          continue;
          Log.e("BunSDK", "Problem with fetching apiKey. Please chcek your APIKEY declaration in Manifest. It should be same as given in SDK doc.", localException1);
        }
        catch (Exception localException1) {}
      }
      catch (Exception localException2)
      {
        continue;
      }
      new n(paramContext, 101);
      Util.e("airplay");
      sendIntegrationError("Please check your APIKEY declaration in Manifest. It must be same as given in doc.");
      localObject3 = localObject1;
    }
  }
  
  public static boolean isSDKEnabled(Context paramContext)
  {
    boolean bool2 = false;
    try
    {
      paramContext = paramContext.getSharedPreferences("sdkPrefs", 0);
      boolean bool1 = bool2;
      if (paramContext != null)
      {
        bool1 = bool2;
        if (!paramContext.equals(null))
        {
          bool1 = bool2;
          if (paramContext.contains("SDKEnabled")) {
            bool1 = paramContext.getBoolean("SDKEnabled", false);
          }
        }
      }
      return bool1;
    }
    catch (Exception paramContext)
    {
      Log.i("BunSDK", "" + paramContext.getMessage());
    }
    return false;
  }
  
  static void sendAdCached(AdListener.AdType paramAdType)
  {
    try
    {
      if (MA.adListener != null) {
        MA.handler.post(new Runnable()
        {
          public void run()
          {
            MA.adListener.onAdCached(this.a);
            Log.i("BunSDK", "Ad cached: " + this.a);
          }
        });
      }
      return;
    }
    catch (Exception localException)
    {
      try
      {
        MA.adListener.onAdCached(paramAdType);
        return;
      }
      catch (Exception paramAdType) {}
    }
  }
  
  static void sendAdError(String paramString)
  {
    try
    {
      if (MA.adListener != null) {
        MA.handler.post(new Runnable()
        {
          public void run()
          {
            MA.adListener.onAdError(this.a);
          }
        });
      }
      return;
    }
    catch (Exception localException)
    {
      try
      {
        MA.adListener.onAdError(paramString);
        return;
      }
      catch (Exception paramString) {}
    }
  }
  
  static void sendIntegrationError(String paramString)
  {
    try
    {
      if (MA.adListener != null) {
        MA.handler.post(new Runnable()
        {
          public void run()
          {
            MA.adListener.onSDKIntegrationError(this.a);
          }
        });
      }
      return;
    }
    catch (Exception localException)
    {
      try
      {
        MA.adListener.onSDKIntegrationError(paramString);
        return;
      }
      catch (Exception paramString) {}
    }
  }
  
  static void sendNoAdMessage()
  {
    try
    {
      if (MA.adListener != null) {
        MA.handler.post(new Runnable()
        {
          public void run()
          {
            MA.adListener.noAdAvailableListener();
          }
        });
      }
      return;
    }
    catch (Exception localException1)
    {
      try
      {
        MA.adListener.noAdAvailableListener();
        return;
      }
      catch (Exception localException2) {}
    }
  }
  
  static boolean validate(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.get("com.google.android.gms.version").toString();
      if ((paramContext != null) && (!paramContext.equals("")))
      {
        boolean bool = paramContext.equals("0");
        if (!bool) {
          return true;
        }
      }
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      Log.e("BunSDK", "com.google.android.gms.version is not added in Manifest, Please add", paramContext);
      sendIntegrationError("com.google.android.gms.version is not added in Manifest, Please add.");
      return false;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        Log.e("BunSDK", "com.google.android.gms.version is not added in Manifest, Please add", paramContext);
        sendIntegrationError("com.google.android.gms.version is not added in Manifest, Please add");
      }
    }
  }
  
  abstract void parseAppWallJson(String paramString);
  
  abstract void parseLandingPageAdJson(String paramString);
  
  abstract void parseRichMediaInterstitialJson(JSONObject paramJSONObject);
}
