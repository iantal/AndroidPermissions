package com.w545taxxxg9.Utils;

import android.app.ProgressDialog;
import android.app.WallpaperManager;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.view.View;
import android.widget.Toast;
import com.w545taxxxg9.Controllers.IWidgetsController;
import com.w545taxxxg9.Controllers.WebContentController;
import com.w545taxxxg9.Factory.Factory;
import com.w545taxxxg9.MainNavigationActivity;
import com.w545taxxxg9.Model.WidgetEntity;
import com.w545taxxxg9.Server.AppsGeyserServerClient;
import java.io.IOException;

public class JavascriptInterface
{
  public static String JS_INTERFACE_NAME = "AppsgeyserJSInterface";
  private ProgressDialog _currentProgressDialog;
  private MainNavigationActivity _mainActivity;
  private WebContentController _webController;
  private int mFinalHeight;
  private int mFinalWidth;
  
  public JavascriptInterface(WebContentController paramWebContentController)
  {
    if (paramWebContentController != null)
    {
      this._mainActivity = paramWebContentController.getMainNavigationActivity();
      this._webController = paramWebContentController;
    }
  }
  
  private void _scaleBitmapAndSetWallpaper(Bitmap paramBitmap)
    throws IOException
  {
    WallpaperManager localWallpaperManager = WallpaperManager.getInstance(this._mainActivity);
    new BitmapFactory.Options().inScaled = false;
    if ((localWallpaperManager.getDesiredMinimumWidth() > paramBitmap.getWidth()) || (localWallpaperManager.getDesiredMinimumHeight() > paramBitmap.getHeight()))
    {
      int i = Math.max(0, localWallpaperManager.getDesiredMinimumWidth() - paramBitmap.getWidth()) / 2;
      int j = Math.max(0, localWallpaperManager.getDesiredMinimumHeight() - paramBitmap.getHeight()) / 2;
      Bitmap localBitmap = Bitmap.createBitmap(Math.max(localWallpaperManager.getDesiredMinimumWidth(), paramBitmap.getWidth()), Math.max(localWallpaperManager.getDesiredMinimumHeight(), paramBitmap.getHeight()), Bitmap.Config.ARGB_8888);
      int[] arrayOfInt = new int[paramBitmap.getWidth() * paramBitmap.getHeight()];
      paramBitmap.getPixels(arrayOfInt, 0, paramBitmap.getWidth(), 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight());
      localBitmap.setPixels(arrayOfInt, 0, paramBitmap.getWidth(), i, j, paramBitmap.getWidth(), paramBitmap.getHeight());
      localWallpaperManager.setBitmap(localBitmap);
      return;
    }
    localWallpaperManager.setBitmap(paramBitmap);
  }
  
  public String getFileContents(String paramString)
  {
    return FileManager.getStringFromAssetsFileWithFileName(paramString, this._mainActivity);
  }
  
  public String getTabUrl(String paramString)
  {
    paramString = Factory.getInstance().getWidgetsController().getWidgetByTabId(paramString);
    if (paramString != null) {
      return paramString.getLink();
    }
    return "";
  }
  
  public void hideLoadingDialog()
  {
    this._mainActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (JavascriptInterface.this._currentProgressDialog != null)
        {
          JavascriptInterface.this._currentProgressDialog.hide();
          JavascriptInterface.access$302(JavascriptInterface.this, null);
        }
      }
    });
  }
  
  public void hideTabs()
  {
    this._mainActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        JavascriptInterface.this._mainActivity.findViewById(2131427369).setVisibility(8);
      }
    });
  }
  
  public String sendXMLHTTPRequestSync(String paramString)
  {
    String str = "";
    if (this._mainActivity != null) {
      str = AppsGeyserServerClient.getInstance(this._mainActivity).SendSyncRequest(paramString);
    }
    return str;
  }
  
  public void setScaleForPageWithSize(int paramInt1, int paramInt2)
  {
    this.mFinalHeight = paramInt1;
    this.mFinalWidth = paramInt2;
    if (this._mainActivity != null) {
      this._mainActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          JavascriptInterface.this._webController.setScaleForPageWithSize(JavascriptInterface.this.mFinalHeight, JavascriptInterface.this.mFinalWidth);
        }
      });
    }
  }
  
  public void setWallpaper(String paramString)
  {
    paramString = new UrlConverter(this._webController.getWebView()).toStream(paramString);
    if (paramString != null) {
      paramString = BitmapFactory.decodeStream(paramString);
    }
    try
    {
      _scaleBitmapAndSetWallpaper(paramString);
      paramString.recycle();
      return;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public void showInfo(String paramString)
  {
    if (this._mainActivity != null) {
      Toast.makeText(this._mainActivity, paramString, 0).show();
    }
  }
  
  public void showLoadingDialog(final String paramString)
  {
    this._mainActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        JavascriptInterface.access$302(JavascriptInterface.this, ProgressDialog.show(JavascriptInterface.this._mainActivity, "", paramString, true));
      }
    });
  }
  
  public void showTabs()
  {
    this._mainActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        JavascriptInterface.this._mainActivity.findViewById(2131427369).setVisibility(0);
      }
    });
  }
  
  public void zoomIn()
  {
    if (this._mainActivity != null) {
      this._mainActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          JavascriptInterface.this._webController.zoomIn();
        }
      });
    }
  }
}
