package com.w545taxxxg9.Utils;

import com.w545taxxxg9.Controllers.IWidgetsController;
import com.w545taxxxg9.Factory.Factory;
import com.w545taxxxg9.MainNavigationActivity.ApplicationMode;
import com.w545taxxxg9.Model.WidgetEntity;
import com.w545taxxxg9.Model.WidgetEntity.LoadingCurtainType;
import com.w545taxxxg9.ads.BottomBannerLayout.BannerPosition;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class XMLConfigurationHandler
  extends DefaultHandler
{
  private static final String TAG_ACCEPT_COOKIE = "acceptCookie";
  private static final String TAG_AFFILIATE = "affiliate";
  private static final String TAG_BANNER_POSITION = "bannerPosition";
  private static final String TAG_BLOCK_APP_FROM_SLEEP = "preventFromSleep";
  private static final String TAG_CONTENT = "content";
  private static final String TAG_CONTENT_HEIGHT = "height";
  private static final String TAG_CONTENT_PROTECTION = "contentProtection";
  private static final String TAG_CONTENT_WIDTH = "width";
  private static final String TAG_ENABLE_FULLSCREEN_BANNER = "enableFullScreenBanner";
  private static final String TAG_ENABLE_URL_BAR = "enableUrlBar";
  private static final String TAG_FULL_SCREEN_MODE = "fullScreenMode";
  private static final String TAG_GET_STRING = "getString";
  private static final String TAG_ID = "id";
  private static final String TAG_INJECT_JS = "injectJS";
  private static final String TAG_IS_ABOUT_SCREEN_ENABLED = "enableAboutScreen";
  private static final String TAG_IS_REDIRECT_ENABLED = "enableRedirection";
  private static final String TAG_LINK = "link";
  private static final String TAG_LOADING_CURTAIN = "loadingCurtain";
  private static final String TAG_LOCATON_URL = "locationUrl";
  private static final String TAG_LOGIN = "login";
  private static final String TAG_NAME = "name";
  private static final String TAG_PASSWORD = "password";
  private static final String TAG_PUBLISHER_NAME = "publisher";
  private static final String TAG_RATE_ITEM_VISIBILITY = "rateItemVisibility";
  private static final String TAG_REGISTERED_URL = "registeredUrl";
  private static final String TAG_SHOW_REFRESH_MENU_ITEM = "showRefreshMenuItem";
  private static final String TAG_TAB_ICON = "tabIcon";
  private static final String TAG_TAB_ID = "tabId";
  private static final String TAG_TAB_NAME = "tabName";
  private static final String TAG_UPDATE = "update";
  private static final String TAG_USAGE = "usage";
  private static final String TAG_USER_AGENT = "userAgent";
  private static final String TAG_USER_INTERFACE = "userInterface";
  private static final String TAG_WIDGET_NAME = "widgetName";
  private WidgetEntity _currentWidgetEntity = null;
  private StringBuilder builder;
  private String current2ndParentTag = "";
  private String currentParentTag = "";
  private WebWidgetConfigutation webWidgetConfigutation;
  
  public XMLConfigurationHandler() {}
  
  public void characters(char[] paramArrayOfChar, int paramInt1, int paramInt2)
    throws SAXException
  {
    super.characters(paramArrayOfChar, paramInt1, paramInt2);
    paramArrayOfChar = String.copyValueOf(paramArrayOfChar, paramInt1, paramInt2).trim();
    if (paramArrayOfChar.length() != 0) {
      this.builder.append(paramArrayOfChar);
    }
  }
  
  public void endElement(String paramString1, String paramString2, String paramString3)
    throws SAXException
  {
    boolean bool = true;
    super.endElement(paramString1, paramString2, paramString3);
    if (paramString2.equalsIgnoreCase("fullScreenMode")) {
      this.current2ndParentTag = "";
    }
    do
    {
      for (;;)
      {
        this.builder.setLength(0);
        return;
        if ((paramString2.equalsIgnoreCase("registeredUrl")) || (paramString2.equalsIgnoreCase("usage")) || (paramString2.equalsIgnoreCase("locationUrl")) || (paramString2.equalsIgnoreCase("content")) || (paramString2.equalsIgnoreCase("contentProtection")) || (paramString2.equalsIgnoreCase("affiliate")))
        {
          this.currentParentTag = "";
          if (paramString2.equalsIgnoreCase("content"))
          {
            Factory.getInstance().getWidgetsController().addWidget(this._currentWidgetEntity);
            this._currentWidgetEntity = null;
          }
        }
        else if (this.current2ndParentTag.equalsIgnoreCase("fullScreenMode"))
        {
          if (this.currentParentTag.equalsIgnoreCase("content")) {
            if (paramString2.equalsIgnoreCase("id"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setId(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("name"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setName(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("link"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setLink(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("update"))
            {
              if (this._currentWidgetEntity != null) {
                if (this.builder.toString().length() > 0) {
                  this._currentWidgetEntity.setUpdateTime(Integer.parseInt(this.builder.toString()));
                } else {
                  this._currentWidgetEntity.setUpdateTime(0);
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("width"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setWidth(Integer.parseInt(this.builder.toString()));
              }
            }
            else if (paramString2.equalsIgnoreCase("height"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setHeight(Integer.parseInt(this.builder.toString()));
              }
            }
            else if (paramString2.equalsIgnoreCase("tabName"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setTabName(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("tabIcon"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setTabIcon(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("injectJS"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setInjectJS(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("loadingCurtain"))
            {
              if (this._currentWidgetEntity != null)
              {
                paramString2 = this.builder.toString();
                paramString1 = WidgetEntity.LoadingCurtainType.NONE;
                if (paramString2.compareToIgnoreCase("none") == 0) {
                  paramString1 = WidgetEntity.LoadingCurtainType.NONE;
                }
                for (;;)
                {
                  this._currentWidgetEntity.setLoadingCurtainType(paramString1);
                  break;
                  if (paramString2.compareToIgnoreCase("default") == 0) {
                    paramString1 = WidgetEntity.LoadingCurtainType.DEFAULT;
                  } else if (paramString2.compareToIgnoreCase("banner") == 0) {
                    paramString1 = WidgetEntity.LoadingCurtainType.BANNER;
                  } else if (paramString2.compareToIgnoreCase("custom") == 0) {
                    paramString1 = WidgetEntity.LoadingCurtainType.CUSTOM;
                  }
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("userAgent"))
            {
              if (this._currentWidgetEntity != null) {
                this._currentWidgetEntity.setUserAgent(this.builder.toString());
              }
            }
            else if (paramString2.equalsIgnoreCase("tabId")) {
              this._currentWidgetEntity.setTabId(this.builder.toString());
            }
          }
        }
        else if (this.currentParentTag.equalsIgnoreCase("registeredUrl"))
        {
          if (paramString2.equalsIgnoreCase("link")) {
            this.webWidgetConfigutation.setRegisteredUrl(this.builder.toString());
          }
        }
        else if (this.currentParentTag.equalsIgnoreCase("usage"))
        {
          if (paramString2.equalsIgnoreCase("link")) {
            this.webWidgetConfigutation.setAddUsageUrl(this.builder.toString());
          }
        }
        else if (this.currentParentTag.equalsIgnoreCase("locationUrl"))
        {
          if (paramString2.equalsIgnoreCase("link")) {
            this.webWidgetConfigutation.setLocationUrl(this.builder.toString());
          }
        }
        else if (paramString2.equalsIgnoreCase("id"))
        {
          this.webWidgetConfigutation.setApplicationId(Integer.parseInt(this.builder.toString().replaceAll("\n", "").replaceAll("\t", "")));
        }
        else if (paramString2.equalsIgnoreCase("widgetName"))
        {
          this.webWidgetConfigutation.setWidgetName(this.builder.toString());
        }
        else if (this.currentParentTag.equalsIgnoreCase("contentProtection"))
        {
          if (paramString2.equalsIgnoreCase("login")) {
            this.webWidgetConfigutation.setHttpAccessLogin(this.builder.toString());
          } else if (paramString2.equalsIgnoreCase("password")) {
            this.webWidgetConfigutation.setHttpAccessPassword(this.builder.toString());
          }
        }
        else if (paramString2.equalsIgnoreCase("userInterface"))
        {
          paramString1 = this.builder.toString();
          if (paramString1.equals("standard")) {
            this.webWidgetConfigutation.setApplicationMode(MainNavigationActivity.ApplicationMode.COMMON);
          } else if (paramString1.equals("custom")) {
            this.webWidgetConfigutation.setApplicationMode(MainNavigationActivity.ApplicationMode.CUSTOM);
          }
        }
        else if (paramString2.equalsIgnoreCase("bannerPosition"))
        {
          paramString1 = this.builder.toString();
          if (paramString1.equals("top")) {
            this.webWidgetConfigutation.setBannerPosition(BottomBannerLayout.BannerPosition.TOP);
          } else if (paramString1.equals("bottom")) {
            this.webWidgetConfigutation.setBannerPosition(BottomBannerLayout.BannerPosition.BOTTOM);
          }
        }
        else if (paramString2.equalsIgnoreCase("rateItemVisibility"))
        {
          if (this.builder.toString().equalsIgnoreCase("true")) {
            this.webWidgetConfigutation.setRateItemVisibility(true);
          } else {
            this.webWidgetConfigutation.setRateItemVisibility(false);
          }
        }
        else if (paramString2.equalsIgnoreCase("acceptCookie"))
        {
          if (this.builder.toString().equalsIgnoreCase("true")) {
            this.webWidgetConfigutation.setAcceptCookie(true);
          } else {
            this.webWidgetConfigutation.setAcceptCookie(false);
          }
        }
        else if (paramString2.equalsIgnoreCase("preventFromSleep"))
        {
          if (this.builder.toString().equalsIgnoreCase("true")) {
            this.webWidgetConfigutation.setPreventFromSleep(true);
          } else {
            this.webWidgetConfigutation.setPreventFromSleep(false);
          }
        }
        else if (paramString2.equalsIgnoreCase("showRefreshMenuItem"))
        {
          if (this.builder.toString().equalsIgnoreCase("true")) {
            this.webWidgetConfigutation.setShowRefreshMenuItem(true);
          } else {
            this.webWidgetConfigutation.setShowRefreshMenuItem(false);
          }
        }
        else if (paramString2.equalsIgnoreCase("enableFullScreenBanner"))
        {
          this.webWidgetConfigutation.setFullscreenBannerEnabled(this.builder.toString().equalsIgnoreCase("true"));
        }
        else if (paramString2.equalsIgnoreCase("enableAboutScreen"))
        {
          this.webWidgetConfigutation.setIsAboutScreenEnabled(this.builder.toString().equalsIgnoreCase("true"));
        }
        else
        {
          if (paramString2.equalsIgnoreCase("enableUrlBar"))
          {
            paramString1 = WebWidgetConfigutation.UrlBarStates.DISABLED;
            if (this.builder.toString().equalsIgnoreCase("true")) {
              paramString1 = WebWidgetConfigutation.UrlBarStates.ENABLED;
            }
            for (;;)
            {
              this.webWidgetConfigutation.setUrlOverlayState(paramString1);
              break;
              if (this.builder.toString().equalsIgnoreCase("on_external_urls")) {
                paramString1 = WebWidgetConfigutation.UrlBarStates.ENABLED_ON_EXTERNAL_URLS;
              }
            }
          }
          if (paramString2.equalsIgnoreCase("publisher"))
          {
            this.webWidgetConfigutation.setPublisherName(this.builder.toString());
          }
          else
          {
            if (!this.currentParentTag.equalsIgnoreCase("affiliate")) {
              break;
            }
            if (paramString2.equalsIgnoreCase("getString")) {
              this.webWidgetConfigutation.setAffiliateString(this.builder.toString());
            }
          }
        }
      }
    } while (!paramString2.equalsIgnoreCase("enableRedirection"));
    paramString1 = this.webWidgetConfigutation;
    if (!this.builder.toString().equalsIgnoreCase("false")) {}
    for (;;)
    {
      paramString1.setIsRedirectEnabled(bool);
      break;
      bool = false;
    }
  }
  
  public WebWidgetConfigutation getWebWidgetConfigutation()
  {
    return this.webWidgetConfigutation;
  }
  
  public void startDocument()
    throws SAXException
  {
    super.startDocument();
    this.webWidgetConfigutation = new WebWidgetConfigutation();
    this.builder = new StringBuilder();
  }
  
  public void startElement(String paramString1, String paramString2, String paramString3, Attributes paramAttributes)
    throws SAXException
  {
    super.startElement(paramString1, paramString2, paramString3, paramAttributes);
    if (paramString2.equalsIgnoreCase("fullScreenMode")) {
      this.current2ndParentTag = paramString2;
    }
    do
    {
      return;
      if (paramString2.equalsIgnoreCase("registeredUrl"))
      {
        this.currentParentTag = paramString2;
        return;
      }
      if (paramString2.equalsIgnoreCase("usage"))
      {
        this.currentParentTag = paramString2;
        return;
      }
      if (paramString2.equalsIgnoreCase("locationUrl"))
      {
        this.currentParentTag = paramString2;
        return;
      }
      if (paramString2.equalsIgnoreCase("content"))
      {
        this.currentParentTag = paramString2;
        this._currentWidgetEntity = new WidgetEntity();
        return;
      }
      if (paramString2.equalsIgnoreCase("contentProtection"))
      {
        this.currentParentTag = paramString2;
        return;
      }
    } while (!paramString2.equalsIgnoreCase("affiliate"));
    this.currentParentTag = paramString2;
  }
}
