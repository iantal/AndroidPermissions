package com.w545taxxxg9.ads;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.webkit.GeolocationPermissions.Callback;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import com.w545taxxxg9.MainNavigationActivity;
import com.w545taxxxg9.Server.AppsGeyserServerClient;
import com.w545taxxxg9.Views.BrowserWebView;
import com.w545taxxxg9.Views.TransparentPanel;
import com.w545taxxxg9.ads.behavior.BehaviorAcceptor;
import com.w545taxxxg9.ads.behavior.BehaviorFactory.ClickBehavior;
import com.w545taxxxg9.ads.behavior.BehaviorVisitor;
import com.w545taxxxg9.ads.behavior.loaderBehaviors.LoaderBehavior;
import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

public class AdsLoader
  implements BehaviorAcceptor, AdsBannerWebViewClient.OnPageFinishedListener, AdsBannerWebViewClient.OnPageStartedListener
{
  final float DEFAULT_HIDE_TIMEOUT = 60000.0F;
  MainNavigationActivity _activity;
  BrowserWebView _bannerBrowser;
  BottomBannerLayout _bannerLayout;
  String _bannerUrl;
  AdsBannerWebViewClient _browserClient;
  BehaviorFactory.ClickBehavior _clickBehavior;
  String _clickUrl;
  Thread _closeBannerThread = null;
  HeadersReceiver _headersReceiver;
  Map<String, List<String>> _lastResponseHeaders;
  AdsLoadingFinishedListener _loadingFinishedListener;
  Timer _refreshTimer = new Timer();
  AppsGeyserServerClient _serverClient;
  
  public AdsLoader() {}
  
  private void _setDefaults()
  {
    this._bannerLayout.showBanner();
    this._refreshTimer.cancel();
    setHideTimeout(60000.0F);
    this._bannerLayout.applyDefaultSettings();
  }
  
  public void acceptBehavior(BehaviorVisitor paramBehaviorVisitor)
  {
    if ((paramBehaviorVisitor instanceof LoaderBehavior)) {
      ((LoaderBehavior)paramBehaviorVisitor).visit(this);
    }
  }
  
  public void changeClickBehavior(BehaviorFactory.ClickBehavior paramClickBehavior)
  {
    this._clickBehavior = paramClickBehavior;
  }
  
  public BottomBannerLayout getBottomBannerLayout()
  {
    return this._bannerLayout;
  }
  
  public String getClickUrl()
  {
    return this._clickUrl;
  }
  
  public Map<String, List<String>> getLastResponseHeaders()
  {
    return this._lastResponseHeaders;
  }
  
  public void init(String paramString, MainNavigationActivity paramMainNavigationActivity)
  {
    this._activity = paramMainNavigationActivity;
    this._serverClient = AppsGeyserServerClient.getInstance(this._activity);
    this._bannerBrowser = ((BrowserWebView)this._activity.findViewById(2131427335));
    this._bannerBrowser.setOnTouchListener(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        switch (paramAnonymousMotionEvent.getAction())
        {
        }
        for (;;)
        {
          return false;
          if (!paramAnonymousView.hasFocus()) {
            paramAnonymousView.requestFocus();
          }
        }
      }
    });
    this._browserClient = new AdsBannerWebViewClient();
    this._browserClient.setOnPageFinishedListener(this);
    this._browserClient.setOnPageStartedListener(this);
    this._bannerBrowser.setWebChromeClient(new WebChromeClient()
    {
      public void onGeolocationPermissionsShowPrompt(String paramAnonymousString, GeolocationPermissions.Callback paramAnonymousCallback)
      {
        paramAnonymousCallback.invoke(paramAnonymousString, true, false);
      }
    });
    WebSettings localWebSettings = this._bannerBrowser.getSettings();
    localWebSettings.setJavaScriptEnabled(true);
    localWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);
    localWebSettings.setAllowFileAccess(true);
    localWebSettings.setPluginsEnabled(true);
    localWebSettings.setGeolocationEnabled(true);
    localWebSettings.setDatabaseEnabled(true);
    localWebSettings.setDomStorageEnabled(true);
    Object localObject = paramMainNavigationActivity.getApplicationContext();
    paramMainNavigationActivity = ((Context)localObject).getDir("appcache", 0).getPath();
    String str = ((Context)localObject).getDir("databases", 0).getPath();
    localObject = ((Context)localObject).getDir("geolocation", 0).getPath();
    localWebSettings.setAppCachePath(paramMainNavigationActivity);
    localWebSettings.setDatabasePath(str);
    localWebSettings.setGeolocationDatabasePath((String)localObject);
    this._bannerUrl = paramString;
    this._clickBehavior = BehaviorFactory.ClickBehavior.HIDE;
    this._closeBannerThread = new Thread()
    {
      public void run()
      {
        AdsLoader.this._refreshTimer.cancel();
        AdsLoader.this._bannerBrowser.stopLoading();
        AdsLoader.this._bannerLayout.hideBanner();
      }
    };
  }
  
  public void loadFinished(WebView paramWebView, String paramString)
  {
    if (paramString.equalsIgnoreCase(this._bannerUrl))
    {
      _setDefaults();
      if (this._loadingFinishedListener != null) {
        this._loadingFinishedListener.onAdLoadFinished();
      }
    }
  }
  
  public boolean loadStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
  {
    if (!paramString.equals(this._bannerUrl))
    {
      if (this._clickBehavior == BehaviorFactory.ClickBehavior.HIDE)
      {
        this._bannerLayout.hideBanner();
        this._refreshTimer.cancel();
      }
      for (;;)
      {
        paramWebView.stopLoading();
        paramWebView = new Intent("android.intent.action.VIEW", Uri.parse(paramString.replaceAll("&nostat=1", "")));
        this._activity.startActivity(paramWebView);
        if ((this._clickUrl != null) && (this._clickUrl.length() > 0)) {
          this._serverClient.SendClickInfo(this._clickUrl);
        }
        return false;
        if (this._clickBehavior == BehaviorFactory.ClickBehavior.REMAIN_ON_SCREEN) {
          reload();
        }
      }
    }
    return true;
  }
  
  public void reload()
  {
    try
    {
      this._activity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdsLoader.this._bannerLayout.switchToHtmlAd();
        }
      });
      this._bannerBrowser.setWebViewClient(this._browserClient);
      new Thread()
      {
        public void run()
        {
          Map localMap = AdsLoader.this._serverClient.loadHeaders(AdsLoader.this._bannerUrl);
          AdsLoader.this._lastResponseHeaders = localMap;
          if ((localMap == null) || ((AdsLoader.this._headersReceiver != null) && (!AdsLoader.this._headersReceiver.onAdHeadersReceived(AdsLoader.this._lastResponseHeaders)))) {
            return;
          }
          AdsLoader.this._bannerBrowser.loadUrl(AdsLoader.this._bannerUrl);
        }
      }.start();
      return;
    }
    catch (Exception localException)
    {
      Log.e("AdsLoader", localException.getMessage());
    }
  }
  
  public void setAdsLoadingFinishedListener(AdsLoadingFinishedListener paramAdsLoadingFinishedListener)
  {
    this._loadingFinishedListener = paramAdsLoadingFinishedListener;
  }
  
  public void setBottomBannerLayout(BottomBannerLayout paramBottomBannerLayout)
  {
    this._bannerLayout = paramBottomBannerLayout;
  }
  
  public void setClickUrl(String paramString)
  {
    this._clickUrl = paramString;
  }
  
  public void setHeaderReceiver(HeadersReceiver paramHeadersReceiver)
  {
    this._headersReceiver = paramHeadersReceiver;
  }
  
  public void setHideTimeout(float paramFloat)
  {
    float f = paramFloat;
    if (paramFloat <= 0.0D) {
      f = 60000.0F;
    }
    TransparentPanel localTransparentPanel = (TransparentPanel)this._activity.findViewById(2131427333);
    localTransparentPanel.removeCallbacks(this._closeBannerThread);
    localTransparentPanel.postDelayed(this._closeBannerThread, (1000.0F * f));
  }
  
  public void setRefreshTimeout(float paramFloat)
  {
    if (paramFloat <= 0.0D) {
      return;
    }
    this._refreshTimer.cancel();
    this._refreshTimer = new Timer();
    this._refreshTimer.scheduleAtFixedRate(new TimerTask()
    {
      public void run()
      {
        AdsLoader.this.reload();
        AdsLoader.this._refreshTimer.cancel();
      }
    }, (int)(1000.0F * paramFloat), 100L);
  }
  
  public static abstract interface AdsLoadingFinishedListener
  {
    public abstract void onAdLoadFinished();
  }
  
  public static abstract interface HeadersReceiver
  {
    public abstract boolean onAdHeadersReceived(Map<String, List<String>> paramMap);
  }
}
