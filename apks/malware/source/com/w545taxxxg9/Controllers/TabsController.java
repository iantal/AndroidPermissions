package com.w545taxxxg9.Controllers;

import android.app.Activity;
import android.util.Log;
import android.view.ViewGroup.LayoutParams;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import com.w545taxxxg9.Factory.Factory;
import com.w545taxxxg9.Model.WidgetEntity;
import com.w545taxxxg9.Views.TabContent.ContentType;
import java.io.PrintStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class TabsController
  implements ITabsController
{
  private String _activeWidgetId = null;
  private Map<String, ITabContentController> _tabContentsCollection = new HashMap();
  private Map<String, ITabTagController> _tabTagsCollection = new HashMap();
  
  public TabsController() {}
  
  public void destroy()
  {
    Iterator localIterator = this._tabContentsCollection.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((ITabContentController)((Map.Entry)localIterator.next()).getValue()).destroy();
    }
  }
  
  public WebContentController getSelectedTab()
  {
    return (WebContentController)this._tabContentsCollection.get(this._activeWidgetId);
  }
  
  public void initWithTabs(Enumeration<WidgetEntity> paramEnumeration)
  {
    try
    {
      Object localObject1 = Factory.getInstance().getMainNavigationActivity();
      FrameLayout localFrameLayout = (FrameLayout)((Activity)localObject1).findViewById(2131427368);
      localObject1 = (LinearLayout)((Activity)localObject1).findViewById(2131427369);
      localFrameLayout.removeAllViews();
      ((LinearLayout)localObject1).removeAllViews();
      this._activeWidgetId = null;
      int i = 0;
      while (paramEnumeration.hasMoreElements())
      {
        WidgetEntity localWidgetEntity = (WidgetEntity)paramEnumeration.nextElement();
        if (this._activeWidgetId == null) {
          this._activeWidgetId = localWidgetEntity.getId();
        }
        Object localObject2 = Factory.getInstance().getTabContentController(TabContent.ContentType.WEB, localWidgetEntity);
        Object localObject3 = new FrameLayout.LayoutParams(-1, -1);
        localFrameLayout.addView(((ITabContentController)localObject2).createTabContent(localFrameLayout), (ViewGroup.LayoutParams)localObject3);
        this._tabContentsCollection.put(localWidgetEntity.getId(), localObject2);
        localObject2 = Factory.getInstance().getTabTagController(this, localWidgetEntity);
        localObject3 = new LinearLayout.LayoutParams(-1, -1, 1.0F);
        ((LinearLayout)localObject1).addView(((ITabTagController)localObject2).createTabTag(), (ViewGroup.LayoutParams)localObject3);
        this._tabTagsCollection.put(localWidgetEntity.getId(), localObject2);
        i += 1;
      }
      if (i == 1) {
        ((LinearLayout)localObject1).setVisibility(8);
      }
      for (;;)
      {
        onTabSelected(this._activeWidgetId);
        return;
        if (i == 0) {
          ((LinearLayout)localObject1).setVisibility(8);
        }
      }
      return;
    }
    catch (Exception paramEnumeration)
    {
      Log.e("initWithTabs Error", paramEnumeration.getMessage());
      System.out.println("initWithTabs Error" + paramEnumeration.getMessage());
    }
  }
  
  public void onBackKeyDown()
  {
    ((ITabContentController)this._tabContentsCollection.get(this._activeWidgetId)).onBackKeyDown();
  }
  
  public void onPause()
  {
    Iterator localIterator = this._tabContentsCollection.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((ITabContentController)((Map.Entry)localIterator.next()).getValue()).onPause();
    }
  }
  
  public void onResume()
  {
    Iterator localIterator = this._tabContentsCollection.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((ITabContentController)((Map.Entry)localIterator.next()).getValue()).onResume();
    }
  }
  
  public void onTabSelected(String paramString)
  {
    Iterator localIterator = this._tabTagsCollection.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Object localObject = (Map.Entry)localIterator.next();
      String str = (String)((Map.Entry)localObject).getKey();
      localObject = (ITabTagController)((Map.Entry)localObject).getValue();
      ITabContentController localITabContentController = (ITabContentController)this._tabContentsCollection.get(str);
      if (str.equals(paramString))
      {
        ((ITabTagController)localObject).setActiveState(true);
        localITabContentController.setActiveState(true);
      }
      else
      {
        ((ITabTagController)localObject).setActiveState(false);
        localITabContentController.setActiveState(false);
      }
    }
    this._activeWidgetId = paramString;
  }
  
  public void setBannerInjectionJs(String paramString)
  {
    Iterator localIterator = this._tabTagsCollection.entrySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)((Map.Entry)localIterator.next()).getKey();
      ((WebContentController)this._tabContentsCollection.get(str)).setBannerInjectionJs(paramString);
    }
  }
}
