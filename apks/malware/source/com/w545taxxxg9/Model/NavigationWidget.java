package com.w545taxxxg9.Model;

import android.content.Context;
import android.database.Cursor;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.webkit.URLUtil;
import android.webkit.WebView;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.FilterQueryProvider;
import android.widget.ImageButton;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.SimpleCursorAdapter;
import android.widget.SimpleCursorAdapter.CursorToStringConverter;
import android.widget.SlidingDrawer;
import com.w545taxxxg9.Controllers.ITabsController;
import com.w545taxxxg9.Controllers.WebContentController;
import com.w545taxxxg9.Factory.Factory;
import com.w545taxxxg9.MainNavigationActivity;
import com.w545taxxxg9.Utils.ShortcutFabric;
import com.w545taxxxg9.Utils.WebWidgetConfigutation;
import com.w545taxxxg9.Views.BrowserWebView;
import com.w545taxxxg9.storage.BrowsingHistoryStorage;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Date;

public class NavigationWidget
{
  private BrowserWebView _browser = null;
  private int _defaultBottomBrowserMargin = 0;
  private int _defaultLeftBrowserMargin = 0;
  private int _defaultRightBrowserMargin = 0;
  private int _defaultTopBrowserMargin = 0;
  private String _defaultUrl;
  private boolean _hideOnInternalUrls = false;
  private BrowsingHistoryStorage _history;
  private ViewGroup _parent;
  private View.OnClickListener _refreshOnclickListener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      Factory.getInstance().getTabsController().getSelectedTab().getWebView().reload();
    }
  };
  private View.OnClickListener _stopOnclickListener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      Factory.getInstance().getTabsController().getSelectedTab().getWebView().stopLoading();
    }
  };
  
  public NavigationWidget(ViewGroup paramViewGroup, String paramString, BrowserWebView paramBrowserWebView)
  {
    this._parent = paramViewGroup;
    this._defaultUrl = paramString;
    this._browser = paramBrowserWebView;
    _initEventHandlers();
  }
  
  private void _hide()
  {
    this._parent.findViewById(2131427351).setVisibility(8);
    RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)this._browser.getLayoutParams();
    this._defaultLeftBrowserMargin = localLayoutParams.leftMargin;
    this._defaultRightBrowserMargin = localLayoutParams.rightMargin;
    this._defaultTopBrowserMargin = localLayoutParams.topMargin;
    this._defaultBottomBrowserMargin = localLayoutParams.bottomMargin;
    localLayoutParams.setMargins(0, 0, 0, 0);
  }
  
  private void _initEventHandlers()
  {
    ((AutoCompleteTextView)this._parent.findViewById(2131427355)).setOnKeyListener(new View.OnKeyListener()
    {
      public boolean onKey(View paramAnonymousView, int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
      {
        return NavigationWidget.this._onUrlTextBoxKeyEvent(paramAnonymousView, paramAnonymousInt, paramAnonymousKeyEvent);
      }
    });
    ((Button)this._parent.findViewById(2131427357)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        NavigationWidget.this._onClickBackButton(paramAnonymousView);
      }
    });
    ((Button)this._parent.findViewById(2131427358)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        NavigationWidget.this._onClickForwardButton(paramAnonymousView);
      }
    });
    ((Button)this._parent.findViewById(2131427359)).setOnClickListener(this._refreshOnclickListener);
    ((Button)this._parent.findViewById(2131427360)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        NavigationWidget.this._onPinToHomeScreenButtonClick();
      }
    });
    ((Button)this._parent.findViewById(2131427361)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        NavigationWidget.this._onHomeButtonClick();
      }
    });
  }
  
  private boolean _isLocalUrl(String paramString)
  {
    return paramString.startsWith("file://");
  }
  
  private void _onClickBackButton(View paramView)
  {
    paramView = Factory.getInstance().getTabsController().getSelectedTab().getWebView();
    if (paramView.canGoBack())
    {
      paramView.stopLoading();
      paramView.goBack();
    }
  }
  
  private void _onClickForwardButton(View paramView)
  {
    paramView = Factory.getInstance().getTabsController().getSelectedTab().getWebView();
    if (paramView.canGoForward())
    {
      paramView.stopLoading();
      paramView.goForward();
    }
  }
  
  private void _onHomeButtonClick()
  {
    WebContentController localWebContentController = Factory.getInstance().getTabsController().getSelectedTab();
    localWebContentController.getWebView().loadUrl(localWebContentController.getWidgetInfo().getLink());
  }
  
  private void _onPinToHomeScreenButtonClick()
  {
    Object localObject1 = Factory.getInstance().getTabsController().getSelectedTab().getWebView();
    Object localObject2 = ((WebView)localObject1).getUrl();
    String str = ((WebView)localObject1).getTitle();
    localObject1 = localObject2;
    if (((String)localObject2).equalsIgnoreCase(this._defaultUrl)) {
      localObject1 = "";
    }
    if (str != null)
    {
      localObject2 = str;
      if (str.length() != 0) {}
    }
    else
    {
      localObject2 = Factory.getInstance().getMainNavigationActivity().getConfig().getWidgetName();
    }
    ShortcutFabric.createShortcut((String)localObject1, (String)localObject2, this._parent.getContext());
  }
  
  private boolean _onUrlTextBoxKeyEvent(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    Object localObject = (AutoCompleteTextView)paramView;
    if ((paramKeyEvent.getAction() == 1) && (paramInt == 66))
    {
      paramKeyEvent = ((AutoCompleteTextView)localObject).getText().toString();
      localObject = Factory.getInstance().getTabsController().getSelectedTab().getWebView();
      ((WebView)localObject).loadUrl(paramKeyEvent);
      ((WebView)localObject).requestFocus();
      ((InputMethodManager)this._parent.getContext().getSystemService("input_method")).hideSoftInputFromWindow(paramView.getWindowToken(), 2);
      return true;
    }
    return false;
  }
  
  private void _show()
  {
    this._parent.findViewById(2131427351).setVisibility(0);
    ((RelativeLayout.LayoutParams)this._browser.getLayoutParams()).setMargins(this._defaultLeftBrowserMargin, this._defaultTopBrowserMargin, this._defaultRightBrowserMargin, this._defaultBottomBrowserMargin);
  }
  
  public void attachAutocomplete()
  {
    if (this._history == null) {
      this._history = new BrowsingHistoryStorage(this._parent.getContext());
    }
    SimpleCursorAdapter localSimpleCursorAdapter = new SimpleCursorAdapter(this._parent.getContext(), 2130903043, null, new String[] { "title", "url" }, new int[] { 2131427341, 2131427340 });
    localSimpleCursorAdapter.setFilterQueryProvider(new FilterQueryProvider()
    {
      public Cursor runQuery(CharSequence paramAnonymousCharSequence)
      {
        BrowsingHistoryStorage localBrowsingHistoryStorage = NavigationWidget.this._history;
        if (paramAnonymousCharSequence != null) {}
        for (paramAnonymousCharSequence = paramAnonymousCharSequence.toString();; paramAnonymousCharSequence = null) {
          return localBrowsingHistoryStorage.getHistoryItemsGroupedByUrl(paramAnonymousCharSequence);
        }
      }
    });
    localSimpleCursorAdapter.setCursorToStringConverter(new SimpleCursorAdapter.CursorToStringConverter()
    {
      public String convertToString(Cursor paramAnonymousCursor)
      {
        return paramAnonymousCursor.getString(paramAnonymousCursor.getColumnIndexOrThrow("url"));
      }
    });
    ((AutoCompleteTextView)this._parent.findViewById(2131427355)).setAdapter(localSimpleCursorAdapter);
  }
  
  public void onPageFinished(WebView paramWebView, String paramString)
  {
    if (URLUtil.isValidUrl(paramString))
    {
      Date localDate = new Date();
      this._history.addHistoryItem(paramWebView.getTitle(), paramString, localDate);
      paramWebView = (ImageButton)this._parent.findViewById(2131427354);
      paramWebView.setImageResource(2130837518);
      paramWebView.setOnClickListener(this._refreshOnclickListener);
    }
  }
  
  public void onPageStart(WebView paramWebView, String paramString)
  {
    String str = paramString;
    if (!URLUtil.isValidUrl(paramString))
    {
      if (!("http://" + paramString).matches("(news|(ht|f)tp(s?)\\://){1}[\\S\\.]+\\.[\\S\\.]+")) {
        break label129;
      }
      paramString = "http://" + paramString;
    }
    for (;;)
    {
      paramWebView.loadUrl(paramString);
      str = paramString;
      paramWebView = (ImageButton)this._parent.findViewById(2131427354);
      paramWebView.setImageResource(2130837511);
      paramWebView.setOnClickListener(this._stopOnclickListener);
      setUrl(str);
      paramWebView = (SlidingDrawer)this._parent.findViewById(2131427351);
      if ((paramWebView != null) && (paramWebView.isOpened())) {
        paramWebView.animateClose();
      }
      return;
      try
      {
        label129:
        str = "http://www.google.com/search?q=" + URLEncoder.encode(paramString, "UTF-8");
        paramString = str;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        localUnsupportedEncodingException.printStackTrace();
      }
    }
  }
  
  public void setHideOnInternalUrls(boolean paramBoolean)
  {
    this._hideOnInternalUrls = paramBoolean;
  }
  
  public void setUrl(String paramString)
  {
    if (this._hideOnInternalUrls == true)
    {
      if (!_isLocalUrl(paramString)) {
        break label59;
      }
      _hide();
    }
    AutoCompleteTextView localAutoCompleteTextView;
    for (;;)
    {
      localAutoCompleteTextView = (AutoCompleteTextView)this._parent.findViewById(2131427355);
      if ((!paramString.startsWith(this._defaultUrl)) && (!_isLocalUrl(paramString))) {
        break;
      }
      localAutoCompleteTextView.setText("");
      return;
      label59:
      _show();
    }
    localAutoCompleteTextView.setText(paramString);
  }
}
