package com.inmobi.ads;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver;
import android.view.animation.Animation;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import com.inmobi.commons.core.utilities.info.DisplayInfo;
import com.inmobi.rendering.RenderView;
import java.util.HashMap;
import java.util.Map;

public final class InMobiBanner
  extends RelativeLayout
{
  private static final String TAG = InMobiBanner.class.getSimpleName();
  private long mAdLoadCalledTimestamp = 0L;
  private InMobiBanner.AnimationType mAnimationType = InMobiBanner.AnimationType.ROTATE_HORIZONTAL_AXIS;
  private j mBackgroundBannerAdUnit;
  private final AdUnit.a mBannerAdListener = new InMobiBanner.4(this);
  private j mBannerAdUnit1;
  private j mBannerAdUnit2;
  private int mBannerHeightInDp = 0;
  private int mBannerWidthInDp = 0;
  private InMobiBanner.b mClientCallbackHandler;
  private InMobiBanner.BannerAdListener mClientListener;
  private j mForegroundBannerAdUnit;
  private boolean mIsAutoRefreshEnabled = true;
  private boolean mIsInitialized = false;
  private k mRefreshHandler;
  private int mRefreshInterval;
  
  public InMobiBanner(Context paramContext, long paramLong)
  {
    super(paramContext);
    if (paramContext == null)
    {
      Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Context supplied as null, the ad unit can't be created.");
      return;
    }
    if (!com.inmobi.commons.a.a.a())
    {
      Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Please initialize the SDK before trying to create an ad.");
      return;
    }
    this.mClientCallbackHandler = new InMobiBanner.b(this, this.mClientListener);
    initializeAdUnit(paramContext, paramLong);
  }
  
  public InMobiBanner(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    if (!com.inmobi.commons.a.a.a())
    {
      Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Please initialize the SDK before trying to create an ad.");
      return;
    }
    this.mClientCallbackHandler = new InMobiBanner.b(this, this.mClientListener);
    Object localObject = paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/lib/com.inmobi.ads", "placementId");
    paramAttributeSet = paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/lib/com.inmobi.ads", "refreshInterval");
    if (localObject != null) {}
    for (;;)
    {
      try
      {
        initializeAdUnit(paramContext, Long.parseLong(((String)localObject).trim()));
        if (paramAttributeSet == null) {
          break;
        }
        try
        {
          setRefreshInterval(Integer.parseInt(paramAttributeSet.trim()));
          return;
        }
        catch (NumberFormatException paramContext)
        {
          Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Refresh interval value supplied in XML layout is not valid. Falling back to default value.", paramContext);
          return;
        }
      }
      catch (NumberFormatException paramContext)
      {
        localObject = new HashMap();
        ((Map)localObject).put("errorCode", "InvalidPlacement");
        ((Map)localObject).put("type", "banner");
        com.inmobi.commons.core.c.a.a().a("ads", "AdLoadFailed", (Map)localObject);
        Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Placement id value supplied in XML layout is not valid. Banner creation failed.", paramContext);
        continue;
      }
      Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Placement id value is not supplied in XML layout. Banner creation failed.");
    }
  }
  
  private void cancelScheduledRefresh()
  {
    this.mRefreshHandler.removeMessages(1);
  }
  
  private final boolean checkForRefreshRate()
  {
    if (this.mAdLoadCalledTimestamp != 0L)
    {
      int i = this.mBackgroundBannerAdUnit.k().f();
      if (SystemClock.elapsedRealtime() - this.mAdLoadCalledTimestamp < i * 1000)
      {
        this.mBackgroundBannerAdUnit.a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.EARLY_REFRESH_REQUEST).setCustomMessage("Ad cannot be refreshed before " + i + " seconds"), false);
        Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Ad cannot be refreshed before " + i + " seconds");
        return false;
      }
    }
    this.mAdLoadCalledTimestamp = SystemClock.elapsedRealtime();
    return true;
  }
  
  private void displayAd()
  {
    if (this.mForegroundBannerAdUnit.w()) {
      this.mForegroundBannerAdUnit.m().o();
    }
    ViewGroup localViewGroup = (ViewGroup)this.mForegroundBannerAdUnit.m().getParent();
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-1, -1);
    if (localViewGroup == null) {
      addView(this.mForegroundBannerAdUnit.m(), localLayoutParams);
    }
    for (;;)
    {
      this.mBackgroundBannerAdUnit.r();
      return;
      localViewGroup.removeAllViews();
      localViewGroup.addView(this.mForegroundBannerAdUnit.m(), localLayoutParams);
    }
  }
  
  private void initializeAdUnit(Context paramContext, long paramLong)
  {
    this.mBannerAdUnit1 = new j(this, paramContext, paramLong, this.mBannerAdListener);
    this.mBannerAdUnit2 = new j(this, paramContext, paramLong, this.mBannerAdListener);
    this.mBackgroundBannerAdUnit = this.mBannerAdUnit1;
    this.mRefreshInterval = this.mBackgroundBannerAdUnit.k().g();
    this.mRefreshHandler = new k(this);
    this.mIsInitialized = true;
  }
  
  private void scheduleRefresh()
  {
    if ((!isShown()) || (!hasWindowFocus())) {}
    do
    {
      return;
      this.mRefreshHandler.removeMessages(1);
      if ((this.mBackgroundBannerAdUnit.g() == AdUnit.AdState.STATE_LOADING) || (this.mBackgroundBannerAdUnit.g() == AdUnit.AdState.STATE_AVAILABLE) || ((this.mForegroundBannerAdUnit != null) && (this.mForegroundBannerAdUnit.g() == AdUnit.AdState.STATE_ACTIVE)))
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, TAG, "Ignoring an attempt to schedule refresh when an ad is already loading or active.");
        return;
      }
    } while (!this.mIsAutoRefreshEnabled);
    this.mRefreshHandler.sendEmptyMessageDelayed(1, this.mRefreshInterval * 1000);
  }
  
  private void setSizeFromLayoutParams()
  {
    if (getLayoutParams() != null)
    {
      this.mBannerWidthInDp = DisplayInfo.a(getLayoutParams().width);
      this.mBannerHeightInDp = DisplayInfo.a(getLayoutParams().height);
    }
  }
  
  private void swapAdUnitsAndDisplayAd(InMobiBanner.a paramA)
  {
    if (this.mForegroundBannerAdUnit == null)
    {
      this.mForegroundBannerAdUnit = this.mBannerAdUnit1;
      this.mBackgroundBannerAdUnit = this.mBannerAdUnit2;
    }
    Animation localAnimation;
    for (;;)
    {
      localAnimation = i.a(this.mAnimationType, getWidth(), getHeight());
      if (localAnimation != null) {
        break;
      }
      displayAd();
      paramA.a();
      return;
      if (this.mForegroundBannerAdUnit.equals(this.mBannerAdUnit1))
      {
        this.mForegroundBannerAdUnit = this.mBannerAdUnit2;
        this.mBackgroundBannerAdUnit = this.mBannerAdUnit1;
      }
      else if (this.mForegroundBannerAdUnit.equals(this.mBannerAdUnit2))
      {
        this.mForegroundBannerAdUnit = this.mBannerAdUnit1;
        this.mBackgroundBannerAdUnit = this.mBannerAdUnit2;
      }
    }
    localAnimation.setAnimationListener(new InMobiBanner.3(this, paramA));
    startAnimation(localAnimation);
  }
  
  public void disableHardwareAcceleration()
  {
    if (this.mIsInitialized)
    {
      this.mBannerAdUnit1.v();
      this.mBannerAdUnit2.v();
    }
  }
  
  String getFrameSizeString()
  {
    return this.mBannerWidthInDp + "x" + this.mBannerHeightInDp;
  }
  
  boolean hasValidSize()
  {
    return (this.mBannerWidthInDp > 0) && (this.mBannerHeightInDp > 0);
  }
  
  public void load()
  {
    load(false);
  }
  
  void load(boolean paramBoolean)
  {
    if (this.mIsInitialized)
    {
      if (getLayoutParams() != null) {
        break label46;
      }
      Logger.a(Logger.InternalLogLevel.ERROR, TAG, "The layout params of the banner must be set before calling load");
      this.mBannerAdListener.a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.REQUEST_INVALID));
    }
    label46:
    do
    {
      return;
      if ((getLayoutParams().width == -2) || (getLayoutParams().height == -2))
      {
        Logger.a(Logger.InternalLogLevel.ERROR, TAG, "The height or width of a Banner ad can't be WRAP_CONTENT");
        this.mBannerAdListener.a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.REQUEST_INVALID));
        return;
      }
      if ((this.mForegroundBannerAdUnit != null) && (this.mForegroundBannerAdUnit.x()))
      {
        Message localMessage = Message.obtain();
        localMessage.what = 2;
        localMessage.obj = new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.AD_ACTIVE);
        this.mClientCallbackHandler.sendMessage(localMessage);
        this.mForegroundBannerAdUnit.c("AdActive");
        Logger.a(Logger.InternalLogLevel.ERROR, TAG, "An ad is currently being viewed by the user. Please wait for the user to close the ad before requesting for another ad.");
        return;
      }
      if (!hasValidSize()) {
        setSizeFromLayoutParams();
      }
      if (!hasValidSize())
      {
        new Handler().postDelayed(new InMobiBanner.1(this, paramBoolean), 200L);
        return;
      }
      cancelScheduledRefresh();
    } while (!checkForRefreshRate());
    this.mBackgroundBannerAdUnit.a(paramBoolean);
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    if (this.mIsInitialized)
    {
      setSizeFromLayoutParams();
      if (!hasValidSize()) {
        setupBannerSizeObserver();
      }
      scheduleRefresh();
    }
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (this.mIsInitialized) {
      cancelScheduledRefresh();
    }
  }
  
  protected void onVisibilityChanged(View paramView, int paramInt)
  {
    super.onVisibilityChanged(paramView, paramInt);
    if (this.mIsInitialized)
    {
      if (paramInt == 0) {
        scheduleRefresh();
      }
    }
    else {
      return;
    }
    cancelScheduledRefresh();
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    if (this.mIsInitialized)
    {
      if (paramBoolean) {
        scheduleRefresh();
      }
    }
    else {
      return;
    }
    cancelScheduledRefresh();
  }
  
  public void setAnimationType(InMobiBanner.AnimationType paramAnimationType)
  {
    if (this.mIsInitialized) {
      this.mAnimationType = paramAnimationType;
    }
  }
  
  public void setEnableAutoRefresh(boolean paramBoolean)
  {
    if ((!this.mIsInitialized) || (this.mIsAutoRefreshEnabled == paramBoolean)) {
      return;
    }
    this.mIsAutoRefreshEnabled = paramBoolean;
    if (this.mIsAutoRefreshEnabled)
    {
      scheduleRefresh();
      return;
    }
    cancelScheduledRefresh();
  }
  
  public void setExtras(Map paramMap)
  {
    if (this.mIsInitialized)
    {
      this.mBannerAdUnit1.a(paramMap);
      this.mBannerAdUnit2.a(paramMap);
    }
  }
  
  public void setKeywords(String paramString)
  {
    if (this.mIsInitialized)
    {
      this.mBannerAdUnit1.a(paramString);
      this.mBannerAdUnit2.a(paramString);
    }
  }
  
  public void setListener(InMobiBanner.BannerAdListener paramBannerAdListener)
  {
    if (paramBannerAdListener == null) {
      Logger.a(Logger.InternalLogLevel.ERROR, TAG, "Please pass a non-null listener to the banner.");
    }
    do
    {
      return;
      this.mClientListener = paramBannerAdListener;
    } while (this.mClientCallbackHandler == null);
    this.mClientCallbackHandler.a(paramBannerAdListener);
  }
  
  public void setRefreshInterval(int paramInt)
  {
    if (this.mIsInitialized)
    {
      int i = paramInt;
      if (paramInt < this.mBackgroundBannerAdUnit.k().f()) {
        i = this.mBackgroundBannerAdUnit.k().f();
      }
      this.mRefreshInterval = i;
    }
  }
  
  @TargetApi(16)
  void setupBannerSizeObserver()
  {
    getViewTreeObserver().addOnGlobalLayoutListener(new InMobiBanner.2(this));
  }
}
