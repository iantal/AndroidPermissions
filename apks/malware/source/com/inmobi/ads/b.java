package com.inmobi.ads;

import android.graphics.Color;
import com.inmobi.commons.core.configs.a;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public final class b
  extends a
{
  private static final String a = b.class.getSimpleName();
  private static final String b;
  private String c = b;
  private int d = 20;
  private int e = 60;
  private int f = 60;
  private b.a g;
  private Map h;
  private b.b i = new b.b();
  private b.d j = new b.d();
  private b.c k = new b.c();
  private b.e l = new b.e();
  private JSONObject m;
  
  static
  {
    if ("production".equals("staging")) {}
    for (;;)
    {
      b = "http://i.w.inmobi.com/showad.asm";
      return;
    }
  }
  
  public b()
  {
    try
    {
      b(o());
      this.m = p();
      return;
    }
    catch (JSONException localJSONException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Default config provided for ads is invalid.", localJSONException);
    }
  }
  
  private void b(JSONObject paramJSONObject)
  {
    Object localObject = paramJSONObject.getJSONObject("base");
    this.g = new b.a();
    b.a.a(this.g, ((JSONObject)localObject).getInt("maxCacheSize"));
    b.a.b(this.g, ((JSONObject)localObject).getInt("fetchLimit"));
    b.a.c(this.g, ((JSONObject)localObject).getInt("minThreshold"));
    b.a.a(this.g, ((JSONObject)localObject).getLong("timeToLive"));
    paramJSONObject.remove("base");
    this.h = new HashMap();
    localObject = paramJSONObject.keys();
    if (((Iterator)localObject).hasNext())
    {
      String str = (String)((Iterator)localObject).next();
      JSONObject localJSONObject = paramJSONObject.getJSONObject(str);
      b.a localA = new b.a();
      int n;
      if (localJSONObject.has("maxCacheSize"))
      {
        n = localJSONObject.getInt("maxCacheSize");
        label160:
        b.a.a(localA, n);
        if (!localJSONObject.has("fetchLimit")) {
          break label271;
        }
        n = localJSONObject.getInt("fetchLimit");
        label185:
        b.a.b(localA, n);
        if (!localJSONObject.has("minThreshold")) {
          break label282;
        }
        n = localJSONObject.getInt("minThreshold");
        label210:
        b.a.c(localA, n);
        if (!localJSONObject.has("timeToLive")) {
          break label293;
        }
      }
      label271:
      label282:
      label293:
      for (long l1 = localJSONObject.getInt("timeToLive");; l1 = b.a.d(this.g))
      {
        b.a.a(localA, l1);
        this.h.put(str, localA);
        break;
        n = b.a.a(this.g);
        break label160;
        n = b.a.b(this.g);
        break label185;
        n = b.a.c(this.g);
        break label210;
      }
    }
  }
  
  private JSONObject o()
  {
    JSONObject localJSONObject1 = new JSONObject();
    JSONObject localJSONObject2 = new JSONObject();
    localJSONObject2.put("maxCacheSize", 0);
    localJSONObject2.put("fetchLimit", 1);
    localJSONObject2.put("minThreshold", 0);
    localJSONObject2.put("timeToLive", 0);
    localJSONObject1.put("base", localJSONObject2);
    localJSONObject2 = new JSONObject();
    localJSONObject2.put("maxCacheSize", 100);
    localJSONObject2.put("fetchLimit", 5);
    localJSONObject2.put("minThreshold", 2);
    localJSONObject2.put("timeToLive", 3300);
    localJSONObject1.put("native", localJSONObject2);
    return localJSONObject1;
  }
  
  private JSONObject p()
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("enabled", false);
    localJSONObject.put("samplingFactor", 0);
    localJSONObject.put("metricEnabled", false);
    return localJSONObject;
  }
  
  private JSONObject q()
  {
    JSONObject localJSONObject1 = new JSONObject();
    Object localObject = new JSONObject();
    ((JSONObject)localObject).put("maxCacheSize", this.g.b());
    ((JSONObject)localObject).put("fetchLimit", this.g.c());
    ((JSONObject)localObject).put("minThreshold", this.g.d());
    ((JSONObject)localObject).put("timeToLive", this.g.e());
    localJSONObject1.put("base", localObject);
    localObject = this.h.entrySet().iterator();
    while (((Iterator)localObject).hasNext())
    {
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
      JSONObject localJSONObject2 = new JSONObject();
      b.a localA = (b.a)localEntry.getValue();
      localJSONObject2.put("maxCacheSize", localA.b());
      localJSONObject2.put("fetchLimit", localA.c());
      localJSONObject2.put("minThreshold", localA.d());
      localJSONObject2.put("timeToLive", localA.e());
      localJSONObject1.put((String)localEntry.getKey(), localJSONObject2);
    }
    return localJSONObject1;
  }
  
  public b.a a(String paramString)
  {
    b.a localA = (b.a)this.h.get(paramString);
    paramString = localA;
    if (localA == null) {
      paramString = this.g;
    }
    return paramString;
  }
  
  public String a()
  {
    return "ads";
  }
  
  public void a(JSONObject paramJSONObject)
  {
    super.a(paramJSONObject);
    if (paramJSONObject.has("url")) {
      this.c = paramJSONObject.getString("url");
    }
    this.d = paramJSONObject.getInt("minimumRefreshInterval");
    this.e = paramJSONObject.getInt("defaultRefreshInterval");
    this.f = paramJSONObject.getInt("fetchTimeout");
    b(paramJSONObject.getJSONObject("cache"));
    Object localObject = paramJSONObject.getJSONObject("imai");
    b.b.a(this.i, ((JSONObject)localObject).getInt("maxRetries"));
    b.b.b(this.i, ((JSONObject)localObject).getInt("pingInterval"));
    b.b.c(this.i, ((JSONObject)localObject).getInt("pingTimeout"));
    b.b.d(this.i, ((JSONObject)localObject).getInt("maxDbEvents"));
    b.b.e(this.i, ((JSONObject)localObject).getInt("maxEventBatch"));
    localObject = paramJSONObject.getJSONObject("rendering");
    b.d.a(this.j, ((JSONObject)localObject).getInt("renderTimeout"));
    b.d.b(this.j, ((JSONObject)localObject).getInt("picHeight"));
    b.d.c(this.j, ((JSONObject)localObject).getInt("picWidth"));
    b.d.d(this.j, ((JSONObject)localObject).getInt("picQuality"));
    b.d.a(this.j, ((JSONObject)localObject).getString("webviewBackground"));
    b.d.e(this.j, ((JSONObject)localObject).getInt("maxVibrationDuration"));
    b.d.f(this.j, ((JSONObject)localObject).getInt("maxVibrationPatternLength"));
    b.d.a(this.j, ((JSONObject)localObject).getJSONObject("savecontent").getInt("maxSaveSize"));
    localObject = ((JSONObject)localObject).getJSONObject("savecontent").getJSONArray("allowedContentType");
    int n = 0;
    while (n < ((JSONArray)localObject).length())
    {
      b.d.a(this.j).add(((JSONArray)localObject).getString(n));
      n += 1;
    }
    localObject = paramJSONObject.getJSONObject("mraid");
    b.c.a(this.k, ((JSONObject)localObject).getLong("expiry"));
    b.c.a(this.k, ((JSONObject)localObject).getInt("maxRetries"));
    b.c.b(this.k, ((JSONObject)localObject).getInt("retryInterval"));
    b.c.a(this.k, ((JSONObject)localObject).getString("url"));
    if (paramJSONObject.has("telemetry")) {
      this.m = paramJSONObject.getJSONObject("telemetry");
    }
    paramJSONObject = paramJSONObject.getJSONObject("viewability");
    b.e.a(this.l, paramJSONObject.getInt("impressionMinPercentageViewed"));
    b.e.b(this.l, paramJSONObject.getInt("impressionMinTimeViewed"));
    b.e.c(this.l, paramJSONObject.optInt("visibilityThrottleMillis", 100));
    b.e.d(this.l, paramJSONObject.optInt("impressionPollIntervalMillis", 250));
  }
  
  public JSONObject b()
  {
    JSONObject localJSONObject1 = super.b();
    localJSONObject1.put("url", this.c);
    localJSONObject1.put("minimumRefreshInterval", this.d);
    localJSONObject1.put("defaultRefreshInterval", this.e);
    localJSONObject1.put("fetchTimeout", this.f);
    localJSONObject1.put("cache", q());
    JSONObject localJSONObject2 = new JSONObject();
    localJSONObject2.put("maxRetries", this.i.a());
    localJSONObject2.put("pingInterval", this.i.b());
    localJSONObject2.put("pingTimeout", this.i.c());
    localJSONObject2.put("maxDbEvents", this.i.d());
    localJSONObject2.put("maxEventBatch", this.i.e());
    localJSONObject1.put("imai", localJSONObject2);
    localJSONObject2 = new JSONObject();
    localJSONObject2.put("renderTimeout", this.j.i());
    localJSONObject2.put("picWidth", this.j.a());
    localJSONObject2.put("picHeight", this.j.b());
    localJSONObject2.put("picQuality", this.j.c());
    localJSONObject2.put("webviewBackground", b.d.b(this.j));
    localJSONObject2.put("maxVibrationDuration", this.j.e());
    localJSONObject2.put("maxVibrationPatternLength", this.j.f());
    JSONObject localJSONObject3 = new JSONObject();
    localJSONObject3.put("maxSaveSize", this.j.g());
    localJSONObject3.put("allowedContentType", new JSONArray(this.j.h()));
    localJSONObject2.put("savecontent", localJSONObject3);
    localJSONObject1.put("rendering", localJSONObject2);
    localJSONObject2 = new JSONObject();
    localJSONObject2.put("expiry", this.k.a());
    localJSONObject2.put("maxRetries", this.k.b());
    localJSONObject2.put("retryInterval", this.k.c());
    localJSONObject2.put("url", this.k.d());
    localJSONObject1.put("mraid", localJSONObject2);
    localJSONObject2 = new JSONObject();
    localJSONObject2.put("impressionMinPercentageViewed", this.l.a());
    localJSONObject2.put("impressionMinTimeViewed", this.l.b());
    localJSONObject2.put("visibilityThrottleMillis", this.l.c());
    localJSONObject2.put("impressionPollIntervalMillis", this.l.d());
    localJSONObject1.put("viewability", localJSONObject2);
    if (this.m != null) {
      localJSONObject1.put("telemetry", this.m);
    }
    return localJSONObject1;
  }
  
  public boolean c()
  {
    if (((!this.c.startsWith("http://")) && (!this.c.startsWith("https://"))) || (this.d < 0) || (this.e < 0) || (this.f <= 0)) {
      return false;
    }
    if ((this.g == null) || (!this.g.a())) {
      return false;
    }
    Iterator localIterator = this.h.entrySet().iterator();
    while (localIterator.hasNext()) {
      if (!((b.a)((Map.Entry)localIterator.next()).getValue()).a()) {
        return false;
      }
    }
    if ((this.i.d() < 0) || (this.i.e() < 0) || (this.i.a() < 0) || (this.i.b() < 0) || (this.i.c() <= 0)) {
      return false;
    }
    if ((this.k.a() < 0L) || (this.k.c() < 0) || (this.k.b() < 0) || ((!this.k.d().startsWith("http://")) && (!this.k.d().startsWith("https://")))) {
      return false;
    }
    if ((this.j.i() < 0) || (this.j.b() < 0) || (this.j.a() < 0) || (this.j.c() < 0) || (this.j.e() < 0) || (this.j.f() < 0) || (this.j.g() < 0L) || (b.d.b(this.j) == null) || (b.d.b(this.j).trim().length() == 0)) {
      return false;
    }
    try
    {
      b.d.g(this.j, Color.parseColor(b.d.b(this.j)));
      if ((this.k.b() < 0) || (this.k.c() < 0) || (this.k.d() == null) || (this.k.d().trim().length() == 0)) {
        return false;
      }
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Webview color specified in config is invalid.", localIllegalArgumentException);
      return false;
    }
    return (this.l.a() > 0) && (this.l.a() <= 100) && (this.l.b() >= 0) && (this.l.c() >= 50) && (this.l.c() * 5 <= this.l.b()) && (this.l.d() >= 50) && (this.l.d() * 4 <= this.l.b());
  }
  
  public a d()
  {
    return new b();
  }
  
  public String e()
  {
    return this.c;
  }
  
  public int f()
  {
    return this.d;
  }
  
  public int g()
  {
    return this.e;
  }
  
  public int h()
  {
    return this.f;
  }
  
  public b.b i()
  {
    return this.i;
  }
  
  public b.d j()
  {
    return this.j;
  }
  
  public b.c k()
  {
    return this.k;
  }
  
  public b.e l()
  {
    return this.l;
  }
  
  public JSONObject m()
  {
    return this.m;
  }
}
