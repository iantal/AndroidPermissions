package com.inmobi.commons.core.configs;

import com.inmobi.commons.core.network.NetworkError;
import com.inmobi.commons.core.network.NetworkError.ErrorCode;
import com.inmobi.commons.core.network.c;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

final class ConfigNetworkResponse
{
  private static final String a = ConfigNetworkResponse.class.getName();
  private Map b;
  private Map c;
  private c d;
  private ConfigError e;
  
  ConfigNetworkResponse(Map paramMap, c paramC)
  {
    this.b = paramMap;
    this.d = paramC;
    this.c = new HashMap();
    d();
  }
  
  private static String a(Map paramMap)
  {
    Iterator localIterator = paramMap.keySet().iterator();
    String str;
    for (paramMap = ""; localIterator.hasNext(); paramMap = paramMap + str + ",") {
      str = (String)localIterator.next();
    }
    return paramMap.substring(0, paramMap.length() - 1);
  }
  
  private void a(ConfigError paramConfigError)
  {
    this.e = paramConfigError;
  }
  
  private void d()
  {
    Object localObject2;
    Object localObject3;
    if (!this.d.a()) {
      try
      {
        JSONObject localJSONObject = new JSONObject(this.d.b());
        localObject2 = localJSONObject.keys();
        while (((Iterator)localObject2).hasNext())
        {
          localObject3 = (String)((Iterator)localObject2).next();
          Object localObject4 = localJSONObject.getJSONObject((String)localObject3);
          if (this.b.get(localObject3) != null)
          {
            localObject4 = new ConfigNetworkResponse.ConfigResponse((JSONObject)localObject4, (a)this.b.get(localObject3));
            this.c.put(localObject3, localObject4);
          }
        }
        return;
      }
      catch (JSONException localJSONException)
      {
        a(new ConfigError(ConfigError.ErrorCode.PARSING_ERROR, localJSONException.getLocalizedMessage()));
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error code:" + b().a() + " Error message:" + b().b(), localJSONException);
        localObject2 = new HashMap();
        ((Map)localObject2).put("name", a(this.b));
        ((Map)localObject2).put("errorCode", "ParsingError");
        ((Map)localObject2).put("reason", localJSONException.getLocalizedMessage());
        com.inmobi.commons.core.c.a.a().a("root", "InvalidConfig", (Map)localObject2);
      }
    }
    Object localObject1 = this.b.entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (Map.Entry)((Iterator)localObject1).next();
      localObject3 = new ConfigNetworkResponse.ConfigResponse(null, (a)((Map.Entry)localObject2).getValue());
      ((ConfigNetworkResponse.ConfigResponse)localObject3).a(new ConfigError(ConfigError.ErrorCode.NETWORK_ERROR, "Network error in fetching config."));
      this.c.put(((Map.Entry)localObject2).getKey(), localObject3);
    }
    a(new ConfigError(ConfigError.ErrorCode.NETWORK_ERROR, this.d.c().b()));
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error code:" + b().a() + " Error message:" + b().b());
    localObject1 = new HashMap();
    ((Map)localObject1).put("name", a(this.b));
    ((Map)localObject1).put("errorCode", String.valueOf(this.d.c().a().getValue()));
    ((Map)localObject1).put("reason", this.d.c().b());
    com.inmobi.commons.core.c.a.a().a("root", "InvalidConfig", (Map)localObject1);
  }
  
  public Map a()
  {
    return this.c;
  }
  
  public ConfigError b()
  {
    return this.e;
  }
}
