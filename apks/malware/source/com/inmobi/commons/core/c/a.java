package com.inmobi.commons.core.c;

import android.os.HandlerThread;
import android.os.Looper;
import com.inmobi.commons.core.configs.b.b;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import org.json.JSONException;
import org.json.JSONObject;

public class a
  implements b.b
{
  private static final String a = a.class.getSimpleName();
  private static final Object b = new Object();
  private static volatile a c;
  private static final AtomicBoolean d = new AtomicBoolean(false);
  private static final AtomicBoolean e = new AtomicBoolean(false);
  private static Map f;
  private static c h;
  private static final Random o = new Random(System.currentTimeMillis());
  private List g = new ArrayList();
  private HandlerThread i;
  private a.a j;
  private Map k;
  private final Object l = new Object();
  private final Object m = new Object();
  private final Object n = new Object();
  
  private a()
  {
    f = new HashMap();
    this.k = new HashMap();
    h = new c();
    e.set(com.inmobi.commons.core.utilities.d.a());
    com.inmobi.commons.core.configs.b.a().a(h, this);
    a(h.a(), h.m());
    a.1 local1 = new a.1(this);
    com.inmobi.commons.core.utilities.c.a().a(local1);
  }
  
  public static a a()
  {
    Object localObject1 = c;
    if (localObject1 == null) {
      synchronized (b)
      {
        a localA2 = c;
        localObject1 = localA2;
        if (localA2 == null)
        {
          localObject1 = new a();
          c = (a)localObject1;
        }
        return localObject1;
      }
    }
    return localA1;
  }
  
  private String a(String paramString1, String paramString2)
  {
    return paramString1 + "@$#$@" + paramString2;
  }
  
  private void a(int paramInt)
  {
    if ((!com.inmobi.commons.a.a.e()) || (!com.inmobi.commons.core.utilities.d.a()))
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "App not in foreground or No Network available");
      return;
    }
    for (;;)
    {
      synchronized (this.m)
      {
        if (d.compareAndSet(false, true))
        {
          this.i = new HandlerThread("telemetry");
          this.i.start();
          this.j = new a.a(this, this.i.getLooper());
        }
        if (paramInt > 0)
        {
          Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Begin reporting after " + paramInt + " seconds");
          this.j.sendEmptyMessageDelayed(1, paramInt * 1000);
          return;
        }
      }
      this.j.sendEmptyMessage(1);
    }
  }
  
  private void a(String paramString, b paramB)
  {
    if ((paramString == null) || (paramString.trim().equals("")))
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Component type provided while registering is null or empty!");
      return;
    }
    if (paramB != null)
    {
      f.put(paramString, paramB);
      return;
    }
    f.put(paramString, new b(paramString, null, h.m()));
  }
  
  private String[] b(String paramString)
  {
    return paramString.split("\\@\\$\\#\\$\\@");
  }
  
  private void c(e paramE)
  {
    if (g(paramE).c()) {
      b(paramE);
    }
  }
  
  private void d(e paramE)
  {
    int i1 = g(paramE).b();
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Event Sampling factor: " + i1);
    if (i1 <= 0)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Sampling factor is <=0 for this event!");
      return;
    }
    if (o.nextInt(i1) != 0)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Event " + paramE.b() + " is not lucky enough to be processed further");
      return;
    }
    e(paramE);
  }
  
  private void e(e paramE)
  {
    if ((paramE instanceof com.inmobi.commons.core.a.b))
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Got a crash event, will save it right away!");
      new d().a(paramE);
    }
    for (;;)
    {
      return;
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Caching event " + paramE.b() + " in memory");
      int i1 = h.h();
      synchronized (this.n)
      {
        this.g.add(paramE);
        if (this.g.size() < i1) {
          continue;
        }
        g();
        i1 = new d().c();
        int i2 = h.l();
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Current event count: " + i1 + " Upper cap: " + i2);
        if (i1 <= i2 * 3 / 4) {
          continue;
        }
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Telemetry is more than 75% full. Begin reporting ");
        h();
        return;
      }
    }
  }
  
  private b f(e paramE)
  {
    return a().a(paramE.a());
  }
  
  private b.a g(e paramE)
  {
    return f(paramE).a(paramE.b());
  }
  
  private void g()
  {
    for (;;)
    {
      int i1;
      synchronized (this.n)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Adding events " + this.g.toString() + "to persistence");
        d localD = new d();
        i1 = h.l();
        int i2 = localD.c();
        if (this.g.size() + i2 - i1 <= 0)
        {
          localD.a(this.g);
          this.g.clear();
          return;
        }
        i1 -= i2;
        if (i1 <= 0) {
          Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Persistence is full, won't add events");
        }
      }
      localObject2.a(this.g.subList(0, i1));
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Persistence will overflow, will add " + i1 + " events to persistence");
    }
  }
  
  private void h()
  {
    a(0);
  }
  
  private void i()
  {
    synchronized (this.m)
    {
      if (this.i != null)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Deiniting telemetry");
        this.i.getLooper().quit();
        this.i.interrupt();
        this.i = null;
        this.j = null;
        d.set(false);
      }
      return;
    }
  }
  
  private void j()
  {
    synchronized (this.l)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Saving metric to persistence");
      d localD = new d();
      localD.b();
      Iterator localIterator = this.k.entrySet().iterator();
      for (;;)
      {
        if (localIterator.hasNext())
        {
          Map.Entry localEntry = (Map.Entry)localIterator.next();
          String[] arrayOfString = b((String)localEntry.getKey());
          try
          {
            JSONObject localJSONObject = new JSONObject();
            localJSONObject.put("count", localEntry.getValue());
            localD.a(arrayOfString[0], arrayOfString[1], localJSONObject.toString());
          }
          catch (JSONException localJSONException)
          {
            Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error forming metric payload");
          }
        }
      }
    }
    this.k.clear();
  }
  
  b a(String paramString)
  {
    if ((paramString == null) || (paramString.trim().equals("")))
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Request null or empty Component type!");
      return null;
    }
    return (b)f.get(paramString);
  }
  
  public void a(e paramE)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Event submitted to telemetry: " + paramE.b() + " - " + paramE.a());
    b localB = f(paramE);
    if ((localB == null) || (!localB.b()) || (!h.e()))
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Telemetry service is not enabled or registered for component: " + paramE.a());
      return;
    }
    c(paramE);
    d(paramE);
  }
  
  public void a(com.inmobi.commons.core.configs.a paramA)
  {
    h = (c)paramA;
  }
  
  public void a(String paramString1, String paramString2, Map paramMap)
  {
    paramString1 = new e(paramString1, paramString2);
    JSONObject localJSONObject;
    if ((paramMap != null) && (!paramMap.isEmpty())) {
      try
      {
        localJSONObject = new JSONObject();
        paramMap = paramMap.entrySet().iterator();
        while (paramMap.hasNext())
        {
          Map.Entry localEntry = (Map.Entry)paramMap.next();
          localJSONObject.put(localEntry.getKey().toString(), localEntry.getValue());
          continue;
          a().a(paramString1);
        }
      }
      catch (JSONException paramMap)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error forming JSON payload for " + paramString2 + " Error: " + paramMap);
      }
    }
    for (;;)
    {
      return;
      paramString1.a(localJSONObject.toString());
    }
  }
  
  public final void a(String paramString, JSONObject paramJSONObject)
  {
    a(paramString, new b(paramString, paramJSONObject, h.m()));
  }
  
  public void b()
  {
    try
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "start called");
      a().h();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  void b(e arg1)
  {
    String str = ???.a();
    ??? = ???.b();
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Metric collected: " + ??? + " - " + str);
    str = a(str, ???);
    synchronized (this.l)
    {
      if (this.k.containsKey(str))
      {
        int i1 = ((Integer)this.k.get(str)).intValue();
        this.k.put(str, Integer.valueOf(i1 + 1));
        return;
      }
      this.k.put(str, Integer.valueOf(1));
    }
  }
  
  public void c()
  {
    try
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "stop called");
      a().j();
      a().g();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
}
