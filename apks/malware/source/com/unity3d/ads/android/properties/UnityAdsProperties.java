package com.unity3d.ads.android.properties;

import android.app.Activity;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import com.unity3d.ads.android.data.UnityAdsDevice;
import java.lang.ref.WeakReference;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.util.Map;

public class UnityAdsProperties
{
  public static String ANALYTICS_BASE_URL;
  public static String APPFILTER_LIST;
  public static WeakReference BASE_ACTIVITY;
  public static long CACHING_SPEED = 0L;
  public static String CAMPAIGN_DATA_URL = "https://impact.applifier.com/mobile/campaigns";
  public static String CAMPAIGN_QUERY_STRING;
  public static int CAMPAIGN_REFRESH_SECONDS = 0;
  public static int CAMPAIGN_REFRESH_VIEWS_COUNT = 0;
  public static int CAMPAIGN_REFRESH_VIEWS_MAX = 0;
  public static WeakReference CURRENT_ACTIVITY;
  public static String INSTALLED_APPS_URL;
  public static final int MAX_BUFFERING_WAIT_SECONDS = 20;
  public static final int MAX_NUMBER_OF_ANALYTICS_RETRIES = 5;
  public static Boolean RUN_WEBVIEW_TESTS;
  public static UnityAdsCampaign SELECTED_CAMPAIGN;
  public static Boolean SELECTED_CAMPAIGN_CACHED;
  public static Boolean SEND_INTERNAL_DETAILS;
  public static Boolean TESTMODE_ENABLED;
  public static String TEST_DATA;
  public static String TEST_DEVELOPER_ID = null;
  public static String TEST_JAVASCRIPT;
  public static String TEST_OPTIONS_ID = null;
  public static String TEST_URL;
  public static String UNITY_ADS_BASE_URL;
  public static String UNITY_ADS_GAMER_ID;
  public static String UNITY_ADS_GAME_ID;
  public static Boolean UNITY_DEVELOPER_INTERNAL_TEST;
  public static String UNITY_VERSION;
  public static String WEBVIEW_BASE_URL = null;
  private static Map a = null;
  private static String b = null;
  private static boolean c = false;
  
  static
  {
    ANALYTICS_BASE_URL = null;
    UNITY_ADS_BASE_URL = null;
    CAMPAIGN_QUERY_STRING = null;
    UNITY_ADS_GAME_ID = null;
    UNITY_ADS_GAMER_ID = null;
    APPFILTER_LIST = null;
    INSTALLED_APPS_URL = null;
    TESTMODE_ENABLED = Boolean.valueOf(false);
    SEND_INTERNAL_DETAILS = Boolean.valueOf(false);
    BASE_ACTIVITY = null;
    CURRENT_ACTIVITY = null;
    SELECTED_CAMPAIGN = null;
    SELECTED_CAMPAIGN_CACHED = Boolean.valueOf(false);
    CAMPAIGN_REFRESH_VIEWS_COUNT = 0;
    CAMPAIGN_REFRESH_VIEWS_MAX = 0;
    CAMPAIGN_REFRESH_SECONDS = 0;
    CACHING_SPEED = 0L;
    UNITY_VERSION = null;
    TEST_DATA = null;
    TEST_URL = null;
    TEST_JAVASCRIPT = null;
    RUN_WEBVIEW_TESTS = Boolean.valueOf(false);
    UNITY_DEVELOPER_INTERNAL_TEST = Boolean.valueOf(false);
  }
  
  public UnityAdsProperties() {}
  
  public static Activity getBaseActivity()
  {
    if ((BASE_ACTIVITY != null) && (BASE_ACTIVITY.get() != null) && (!((Activity)BASE_ACTIVITY.get()).isFinishing()) && (!isActivityDestroyed((Activity)BASE_ACTIVITY.get()))) {
      return (Activity)BASE_ACTIVITY.get();
    }
    return null;
  }
  
  public static String getCampaignQueryArguments()
  {
    if ((b != null) && (b.length() > 2)) {
      return b.substring(1);
    }
    return "";
  }
  
  public static String getCampaignQueryUrl()
  {
    localObject1 = "?";
    for (;;)
    {
      Object localObject4;
      Object localObject5;
      try
      {
        localObject4 = String.format("%s%s=%s", new Object[] { "?", "platform", "android" });
        localObject1 = localObject4;
        localObject5 = UnityAdsDevice.getAdvertisingTrackingId();
        if (localObject5 != null)
        {
          localObject1 = localObject4;
          if (UnityAdsDevice.isLimitAdTrackingEnabled())
          {
            i = 0;
            localObject1 = localObject4;
            localObject2 = String.format("%s&%s=%d", new Object[] { localObject4, "trackingEnabled", Integer.valueOf(i) });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "advertisingTrackingId", URLEncoder.encode(UnityAdsUtils.Md5((String)localObject5).toLowerCase(), "UTF-8") });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "rawAdvertisingTrackingId", URLEncoder.encode((String)localObject5, "UTF-8") });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "gameId", URLEncoder.encode(UNITY_ADS_GAME_ID, "UTF-8") });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "sdkVersion", URLEncoder.encode("1405", "UTF-8") });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "softwareVersion", URLEncoder.encode(UnityAdsDevice.getSoftwareVersion(), "UTF-8") });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "hardwareVersion", URLEncoder.encode(UnityAdsDevice.getHardwareVersion(), "UTF-8") });
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "deviceType", Integer.valueOf(UnityAdsDevice.getDeviceType()) });
            localObject1 = localObject2;
            localObject4 = String.format("%s&%s=%s", new Object[] { localObject2, "connectionType", URLEncoder.encode(UnityAdsDevice.getConnectionType(), "UTF-8") });
            localObject2 = localObject4;
            localObject1 = localObject4;
            if (UNITY_VERSION != null)
            {
              localObject2 = localObject4;
              localObject1 = localObject4;
              if (UNITY_VERSION.length() > 0)
              {
                localObject1 = localObject4;
                localObject2 = String.format("%s&%s=%s", new Object[] { localObject4, "unityVersion", URLEncoder.encode(UNITY_VERSION, "UTF-8") });
              }
            }
            localObject4 = localObject2;
            localObject1 = localObject2;
            if (!UnityAdsDevice.isUsingWifi())
            {
              localObject1 = localObject2;
              localObject4 = String.format("%s&%s=%d", new Object[] { localObject2, "androidNetworkType", Integer.valueOf(UnityAdsDevice.getNetworkType()), "UTF-8" });
            }
            localObject2 = localObject4;
            localObject1 = localObject4;
            if (CACHING_SPEED > 0L)
            {
              localObject1 = localObject4;
              localObject2 = String.format("%s&%s=%d", new Object[] { localObject4, "cachingSpeed", Long.valueOf(CACHING_SPEED) });
            }
            localObject1 = localObject2;
            localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "screenSize", Integer.valueOf(UnityAdsDevice.getScreenSize()) });
            localObject1 = localObject2;
            localObject4 = String.format("%s&%s=%s", new Object[] { localObject2, "screenDensity", Integer.valueOf(UnityAdsDevice.getScreenDensity()) });
            localObject1 = localObject4;
            localObject2 = localObject4;
          }
        }
      }
      catch (Exception localException1) {}
      try
      {
        if (APPFILTER_LIST != null)
        {
          localObject2 = localObject4;
          localObject1 = String.format("%s&%s=%s", new Object[] { localObject4, "appFilterList", APPFILTER_LIST });
          localObject2 = localObject1;
          APPFILTER_LIST = null;
        }
        if (!TESTMODE_ENABLED.booleanValue()) {
          break label947;
        }
        localObject2 = String.format("%s&%s=%s", new Object[] { localObject1, "test", "true" });
        localObject1 = localObject2;
        if (TEST_OPTIONS_ID != null)
        {
          localObject1 = localObject2;
          if (TEST_OPTIONS_ID.length() > 0) {
            localObject1 = String.format("%s&%s=%s", new Object[] { localObject2, "optionsId", TEST_OPTIONS_ID });
          }
        }
        localObject2 = localObject1;
        if (TEST_DEVELOPER_ID != null)
        {
          localObject2 = localObject1;
          if (TEST_DEVELOPER_ID.length() > 0)
          {
            localObject4 = new Object[3];
            localObject4[0] = localObject1;
            localObject4[1] = "developerId";
            localObject1 = TEST_DEVELOPER_ID;
            localObject2 = localObject4;
            localObject4[2] = localObject1;
            localObject2 = String.format("%s&%s=%s", (Object[])localObject2);
          }
        }
        localObject1 = localObject2;
        if (SEND_INTERNAL_DETAILS.booleanValue())
        {
          localObject1 = String.format("%s&%s=%s", new Object[] { localObject2, "sendInternalDetails", "true" });
          SEND_INTERNAL_DETAILS = Boolean.valueOf(false);
        }
        b = (String)localObject1;
        localObject2 = CAMPAIGN_DATA_URL;
        localObject1 = localObject2;
        if (getBaseActivity() != null)
        {
          localObject1 = localObject2;
          if (UnityAdsUtils.isDebuggable(getBaseActivity()))
          {
            localObject1 = localObject2;
            if (TEST_URL != null) {
              localObject1 = TEST_URL;
            }
          }
        }
        return String.format("%s%s", new Object[] { localObject1, b });
      }
      catch (Exception localException2)
      {
        for (;;)
        {
          localObject1 = localObject3;
          Object localObject3 = localException2;
        }
      }
      int i = 1;
      continue;
      Object localObject2 = localObject4;
      localObject1 = localObject4;
      if (!UnityAdsDevice.getAndroidId(false).equals("unknown"))
      {
        localObject1 = localObject4;
        localObject2 = String.format("%s&%s=%s", new Object[] { localObject4, "androidId", URLEncoder.encode(UnityAdsDevice.getAndroidId(true), "UTF-8") });
        localObject1 = localObject2;
        localObject2 = String.format("%s&%s=%s", new Object[] { localObject2, "rawAndroidId", URLEncoder.encode(UnityAdsDevice.getAndroidId(false), "UTF-8") });
        continue;
        UnityAdsDeviceLog.error("Problems creating campaigns query: " + localException1.getMessage() + localException1.getStackTrace().toString());
        continue;
        label947:
        localObject3 = localObject1;
        if (getCurrentActivity() != null)
        {
          localObject3 = new Object[3];
          localObject3[0] = localObject1;
          localObject3[1] = "encrypted";
          if (UnityAdsUtils.isDebuggable(getCurrentActivity()))
          {
            localObject1 = "false";
            localObject5 = localObject3;
            localObject4 = localObject3;
            localObject3 = localObject5;
          }
          else
          {
            localObject1 = "true";
            localObject5 = localObject3;
            localObject4 = localObject3;
            localObject3 = localObject5;
          }
        }
      }
    }
  }
  
  public static Activity getCurrentActivity()
  {
    if ((CURRENT_ACTIVITY != null) && (CURRENT_ACTIVITY.get() != null) && (!((Activity)CURRENT_ACTIVITY.get()).isFinishing()) && (!isActivityDestroyed((Activity)CURRENT_ACTIVITY.get()))) {
      return (Activity)CURRENT_ACTIVITY.get();
    }
    return getBaseActivity();
  }
  
  public static boolean isActivityDestroyed(Activity paramActivity)
  {
    Object localObject2 = null;
    try
    {
      localMethod = Activity.class.getMethod("isDestroyed", new Class[0]);
      if ((localMethod == null) || (paramActivity == null)) {}
    }
    catch (Exception localException)
    {
      for (;;)
      {
        try
        {
          Method localMethod;
          boolean bool = ((Boolean)localMethod.invoke(paramActivity, new Object[0])).booleanValue();
          return bool;
        }
        catch (Exception paramActivity)
        {
          Object localObject1;
          UnityAdsDeviceLog.error("Error running isDestroyed -method");
        }
        localException = localException;
        localObject1 = localObject2;
        if (!c)
        {
          c = true;
          UnityAdsDeviceLog.error("Couldn't get isDestroyed -method");
          localObject1 = localObject2;
        }
      }
    }
    return false;
  }
  
  public static void setExtraParams(Map paramMap)
  {
    if (paramMap.containsKey("testData")) {
      TEST_DATA = (String)paramMap.get("testData");
    }
    if (paramMap.containsKey("testUrl")) {
      TEST_URL = (String)paramMap.get("testUrl");
    }
    if (paramMap.containsKey("testJavaScript")) {
      TEST_JAVASCRIPT = (String)paramMap.get("testJavaScript");
    }
  }
}
