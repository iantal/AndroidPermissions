package com.unity3d.ads.android.video;

import android.annotation.TargetApi;
import android.content.Context;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.VideoView;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.properties.UnityAdsProperties;
import com.unity3d.ads.android.view.UnityAdsMuteVideoButton;
import com.unity3d.ads.android.view.UnityAdsMuteVideoButton.UnityAdsMuteVideoButtonState;
import com.unity3d.ads.android.webapp.UnityAdsWebData;
import com.unity3d.ads.android.webapp.UnityAdsWebData.UnityAdsVideoPosition;
import com.unity3d.ads.android.zone.UnityAdsZone;
import com.unity3d.ads.android.zone.UnityAdsZoneManager;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

@TargetApi(9)
public class UnityAdsVideoPlayView
  extends RelativeLayout
{
  private RelativeLayout a = null;
  private TextView b = null;
  private RelativeLayout c = null;
  private TextView d = null;
  private long e = 0L;
  private RelativeLayout f = null;
  private TextView g = null;
  private RelativeLayout h = null;
  private long i = 0L;
  private long j = 0L;
  private long k = 0L;
  private IUnityAdsVideoPlayerListener l;
  private Timer m = null;
  private VideoView n = null;
  private String o = null;
  private UnityAdsVideoPausedView p = null;
  private UnityAdsMuteVideoButton q = null;
  private boolean r = false;
  private Map s = new HashMap();
  private boolean t = false;
  private boolean u = false;
  private boolean v = false;
  private MediaPlayer w = null;
  private boolean x = false;
  private float y = 0.5F;
  
  public UnityAdsVideoPlayView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    e();
  }
  
  public UnityAdsVideoPlayView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    e();
  }
  
  public UnityAdsVideoPlayView(Context paramContext, IUnityAdsVideoPlayerListener paramIUnityAdsVideoPlayerListener)
  {
    super(paramContext);
    this.l = paramIUnityAdsVideoPlayerListener;
    e();
  }
  
  private void b()
  {
    this.u = true;
    d();
    if (this.l != null) {
      this.l.onVideoPlaybackError();
    }
  }
  
  private void c()
  {
    UnityAdsUtils.runOnUiThread(new e(this));
    if (this.m == null)
    {
      this.m = new Timer();
      this.m.scheduleAtFixedRate(new l(this, (byte)0), 500L, 500L);
    }
  }
  
  private void d()
  {
    if (this.m != null)
    {
      this.m.cancel();
      this.m.purge();
      this.m = null;
    }
  }
  
  private void e()
  {
    if (UnityAdsWebData.getZoneManager().getCurrentZone().muteVideoSounds()) {
      this.x = true;
    }
    UnityAdsDeviceLog.debug("Creating custom view");
    setBackgroundColor(-16777216);
    this.v = false;
    this.n = new f(this, getContext());
    this.n.setId(3001);
    Object localObject1 = new RelativeLayout.LayoutParams(-1, -1);
    ((RelativeLayout.LayoutParams)localObject1).addRule(13);
    this.n.setLayoutParams((ViewGroup.LayoutParams)localObject1);
    addView(this.n, (ViewGroup.LayoutParams)localObject1);
    this.n.setClickable(true);
    this.n.setOnCompletionListener(new g(this));
    this.n.setOnPreparedListener(new h(this));
    this.h = new RelativeLayout(getContext());
    this.h.setId(3100);
    localObject1 = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject1).addRule(10);
    ((RelativeLayout.LayoutParams)localObject1).addRule(11);
    ((RelativeLayout.LayoutParams)localObject1).topMargin = 3;
    ((RelativeLayout.LayoutParams)localObject1).rightMargin = 3;
    this.h.setLayoutParams((ViewGroup.LayoutParams)localObject1);
    localObject1 = new TextView(getContext());
    ((TextView)localObject1).setTextColor(-1);
    ((TextView)localObject1).setText("Buffering...");
    ((TextView)localObject1).setId(3103);
    this.h.addView((View)localObject1);
    addView(this.h);
    this.a = new RelativeLayout(getContext());
    this.a.setId(3002);
    localObject1 = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject1).addRule(12);
    ((RelativeLayout.LayoutParams)localObject1).addRule(11);
    ((RelativeLayout.LayoutParams)localObject1).bottomMargin = 3;
    ((RelativeLayout.LayoutParams)localObject1).rightMargin = 3;
    this.a.setLayoutParams((ViewGroup.LayoutParams)localObject1);
    localObject1 = new TextView(getContext());
    ((TextView)localObject1).setTextColor(-1);
    ((TextView)localObject1).setText("This video ends in ");
    ((TextView)localObject1).setId(10001);
    this.b = new TextView(getContext());
    this.b.setTextColor(-1);
    this.b.setText("00");
    this.b.setId(10002);
    Object localObject2 = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject2).addRule(1, 10001);
    ((RelativeLayout.LayoutParams)localObject2).leftMargin = 1;
    this.b.setLayoutParams((ViewGroup.LayoutParams)localObject2);
    localObject2 = new TextView(getContext());
    ((TextView)localObject2).setTextColor(-1);
    ((TextView)localObject2).setText("seconds.");
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(1, 10002);
    localLayoutParams.leftMargin = 4;
    ((TextView)localObject2).setLayoutParams(localLayoutParams);
    this.a.addView((View)localObject1);
    this.a.addView(this.b);
    this.a.addView((View)localObject2);
    addView(this.a);
    if (UnityAdsProperties.UNITY_DEVELOPER_INTERNAL_TEST.booleanValue())
    {
      this.f = new RelativeLayout(getContext());
      localObject1 = new RelativeLayout.LayoutParams(-2, -2);
      ((RelativeLayout.LayoutParams)localObject1).addRule(14);
      ((RelativeLayout.LayoutParams)localObject1).addRule(15);
      this.f.setLayoutParams((ViewGroup.LayoutParams)localObject1);
      this.g = new TextView(getContext());
      this.g.setTextColor(-65536);
      this.g.setBackgroundColor(-16777216);
      this.g.setText("INTERNAL UNITY TEST BUILD\nDO NOT USE IN PRODUCTION");
      this.f.addView(this.g);
      addView(this.f);
    }
    if (f())
    {
      this.e = getSkipDuration();
      g();
    }
    setOnClickListener(new i(this));
    setOnFocusChangeListener(new j(this));
    localObject1 = new RelativeLayout.LayoutParams(-2, -2);
    ((RelativeLayout.LayoutParams)localObject1).addRule(12);
    ((RelativeLayout.LayoutParams)localObject1).addRule(9);
    this.q = new UnityAdsMuteVideoButton(getContext());
    this.q.setLayoutParams((ViewGroup.LayoutParams)localObject1);
    if (this.x) {
      this.q.setState(UnityAdsMuteVideoButton.UnityAdsMuteVideoButtonState.Muted);
    }
    this.q.setOnClickListener(new k(this));
    addView(this.q);
  }
  
  private static boolean f()
  {
    return UnityAdsWebData.getZoneManager().getCurrentZone().allowVideoSkipInSeconds() > 0L;
  }
  
  private void g()
  {
    this.c = new RelativeLayout(getContext());
    this.c.setId(3010);
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(10);
    localLayoutParams.addRule(9);
    localLayoutParams.topMargin = 5;
    localLayoutParams.leftMargin = 5;
    this.c.setLayoutParams(localLayoutParams);
    this.c.setOnClickListener(new b(this));
    this.d = new TextView(getContext());
    this.d.setTextColor(-1);
    this.d.setText("You can skip this video in " + this.e + " seconds");
    this.d.setId(10010);
    this.c.addView(this.d);
    addView(this.c);
  }
  
  private long getSkipDuration()
  {
    if (f()) {
      return UnityAdsWebData.getZoneManager().getCurrentZone().allowVideoSkipInSeconds();
    }
    return 0L;
  }
  
  private void h()
  {
    if (this.c != null) {
      this.c.setClickable(false);
    }
  }
  
  private void i()
  {
    if ((this.p != null) && (this.p.getParent() != null)) {
      removeView(this.p);
    }
  }
  
  private void j()
  {
    if ((this.c != null) && (this.c.getParent() != null))
    {
      h();
      this.c.setVisibility(4);
    }
  }
  
  public void clearVideoPlayer()
  {
    UnityAdsDeviceLog.entered();
    setKeepScreenOn(false);
    setOnClickListener(null);
    setOnFocusChangeListener(null);
    j();
    if ((this.a != null) && (this.a.getParent() != null))
    {
      this.a.removeAllViews();
      removeView(this.a);
    }
    i();
    d();
    this.n.stopPlayback();
    this.n.setOnCompletionListener(null);
    this.n.setOnPreparedListener(null);
    this.n.setOnErrorListener(null);
    removeAllViews();
    this.c = null;
    this.d = null;
    this.h = null;
    this.a = null;
    this.b = null;
    this.g = null;
    this.f = null;
  }
  
  public long getBufferingDuration()
  {
    if (this.j == 0L) {
      this.j = System.currentTimeMillis();
    }
    return this.j - this.i;
  }
  
  public int getSecondsUntilBackButtonAllowed()
  {
    UnityAdsZone localUnityAdsZone = UnityAdsWebData.getZoneManager().getCurrentZone();
    int i1;
    if ((localUnityAdsZone.disableBackButtonForSeconds() > 0L) && (this.k > 0L))
    {
      i1 = Math.round((float)(localUnityAdsZone.disableBackButtonForSeconds() * 1000L - (System.currentTimeMillis() - this.k)));
      if (i1 >= 0) {}
    }
    else
    {
      while ((localUnityAdsZone.allowVideoSkipInSeconds() <= 0L) || (this.k > 0L)) {
        return 0;
      }
      return 1;
    }
    return i1;
  }
  
  public void hideVideo()
  {
    d();
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    i();
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    switch (paramInt)
    {
    default: 
      return false;
    }
    UnityAdsDeviceLog.entered();
    long l1 = UnityAdsWebData.getZoneManager().getCurrentZone().disableBackButtonForSeconds();
    if ((l1 == 0L) || ((l1 > 0L) && (getSecondsUntilBackButtonAllowed() == 0))) {
      clearVideoPlayer();
    }
    if (this.l != null) {
      this.l.onBackButtonClicked(this);
    }
    return true;
  }
  
  public void pauseVideo()
  {
    d();
    if ((this.n != null) && (this.n.isPlaying())) {
      UnityAdsUtils.runOnUiThread(new d(this));
    }
  }
  
  public void playVideo(String paramString)
  {
    if (paramString == null) {}
    for (;;)
    {
      return;
      this.r = false;
      this.o = paramString;
      UnityAdsDeviceLog.debug("Playing video from: " + this.o);
      this.n.setOnErrorListener(new a(this));
      try
      {
        this.n.setVideoPath(this.o);
        if (!this.u)
        {
          this.b.setText(Math.round(Math.ceil(this.n.getDuration() / 1000)));
          this.i = System.currentTimeMillis();
          c();
          return;
        }
      }
      catch (Exception paramString)
      {
        UnityAdsDeviceLog.error("For some reason the device failed to play the video, a crash was prevented.");
        b();
      }
    }
  }
  
  private class VideoStateChecker
    extends TimerTask
  {
    private Float _curPos = Float.valueOf(0.0F);
    private int _duration = 1;
    private Float _oldPos = Float.valueOf(0.0F);
    private boolean _playHeadHasMoved = false;
    private Float _skipTimeLeft = Float.valueOf(0.01F);
    private boolean _videoHasStalled = false;
    
    private VideoStateChecker() {}
    
    public void run()
    {
      boolean bool1 = false;
      if ((UnityAdsVideoPlayView.access$100(UnityAdsVideoPlayView.this) == null) || (UnityAdsVideoPlayView.access$2100(UnityAdsVideoPlayView.this) == null)) {
        UnityAdsVideoPlayView.access$2200(UnityAdsVideoPlayView.this);
      }
      for (;;)
      {
        return;
        this._oldPos = this._curPos;
        try
        {
          this._curPos = Float.valueOf(UnityAdsVideoPlayView.access$100(UnityAdsVideoPlayView.this).getCurrentPosition());
          int i = 1;
          Object localObject = Boolean.valueOf(true);
          try
          {
            int j = UnityAdsVideoPlayView.access$100(UnityAdsVideoPlayView.this).getDuration();
            i = j;
          }
          catch (Exception localException2)
          {
            for (;;)
            {
              UnityAdsVideoPlayView localUnityAdsVideoPlayView;
              boolean bool2;
              UnityAdsDeviceLog.error("Could not get videoView duration");
              Boolean localBoolean = Boolean.valueOf(false);
              continue;
              this._videoHasStalled = true;
              UnityAdsVideoPlayView.access$2400(UnityAdsVideoPlayView.this, 0, true, true);
              continue;
              UnityAdsUtils.runOnUiThread(new Runnable()
              {
                public void run()
                {
                  if ((UnityAdsVideoPlayView.access$1500(UnityAdsVideoPlayView.this) != null) && (!UnityAdsVideoPlayView.VideoStateChecker.this._videoHasStalled))
                  {
                    UnityAdsVideoPlayView.access$1500(UnityAdsVideoPlayView.this).setVisibility(0);
                    UnityAdsVideoPlayView.access$1700(UnityAdsVideoPlayView.this, Math.round(Math.ceil(((float)(UnityAdsVideoPlayView.access$1600(UnityAdsVideoPlayView.this) * 1000L) - UnityAdsVideoPlayView.VideoStateChecker.this._curPos.floatValue()) / 1000.0F)));
                  }
                }
              });
              continue;
              if ((this._playHeadHasMoved) && (this._duration / 1000 <= UnityAdsVideoPlayView.access$1600(UnityAdsVideoPlayView.this))) {
                UnityAdsUtils.runOnUiThread(new Runnable()
                {
                  public void run()
                  {
                    UnityAdsVideoPlayView.access$2000(UnityAdsVideoPlayView.this);
                  }
                });
              }
            }
          }
          if (((Boolean)localObject).booleanValue()) {
            this._duration = i;
          }
          localObject = Float.valueOf(this._curPos.floatValue() / this._duration);
          if (this._curPos.floatValue() > this._oldPos.floatValue())
          {
            this._playHeadHasMoved = true;
            this._videoHasStalled = false;
            localUnityAdsVideoPlayView = UnityAdsVideoPlayView.this;
            bool2 = UnityAdsVideoPlayView.access$2300(UnityAdsVideoPlayView.this);
            if (this._skipTimeLeft.floatValue() <= 0.0F) {
              bool1 = true;
            }
            UnityAdsVideoPlayView.access$2400(localUnityAdsVideoPlayView, 4, bool2, bool1);
            UnityAdsUtils.runOnUiThread(new Runnable()
            {
              public void run()
              {
                UnityAdsVideoPlayView.access$2500(UnityAdsVideoPlayView.this);
              }
            });
            if ((!UnityAdsVideoPlayView.access$2300(UnityAdsVideoPlayView.this)) || (UnityAdsVideoPlayView.access$1600(UnityAdsVideoPlayView.this) <= 0L) || (this._skipTimeLeft.floatValue() <= 0.0F) || (this._duration / 1000 <= UnityAdsVideoPlayView.access$1600(UnityAdsVideoPlayView.this))) {
              break label679;
            }
            this._skipTimeLeft = Float.valueOf((float)(UnityAdsVideoPlayView.access$1600(UnityAdsVideoPlayView.this) * 1000L) - this._curPos.floatValue());
            if (this._skipTimeLeft.floatValue() < 0.0F) {
              this._skipTimeLeft = Float.valueOf(0.0F);
            }
            if (this._skipTimeLeft.floatValue() != 0.0F) {
              break label665;
            }
            UnityAdsUtils.runOnUiThread(new Runnable()
            {
              public void run()
              {
                UnityAdsVideoPlayView.access$1800(UnityAdsVideoPlayView.this);
              }
            });
            if ((((Float)localObject).floatValue() > 0.25D) && (!UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).containsKey(UnityAdsWebData.UnityAdsVideoPosition.FirstQuartile)))
            {
              UnityAdsVideoPlayView.access$400(UnityAdsVideoPlayView.this).onEventPositionReached(UnityAdsWebData.UnityAdsVideoPosition.FirstQuartile);
              UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).put(UnityAdsWebData.UnityAdsVideoPosition.FirstQuartile, Boolean.valueOf(true));
            }
            if ((((Float)localObject).floatValue() > 0.5D) && (!UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).containsKey(UnityAdsWebData.UnityAdsVideoPosition.MidPoint)))
            {
              UnityAdsVideoPlayView.access$400(UnityAdsVideoPlayView.this).onEventPositionReached(UnityAdsWebData.UnityAdsVideoPosition.MidPoint);
              UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).put(UnityAdsWebData.UnityAdsVideoPosition.MidPoint, Boolean.valueOf(true));
            }
            if ((((Float)localObject).floatValue() > 0.75D) && (!UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).containsKey(UnityAdsWebData.UnityAdsVideoPosition.ThirdQuartile)))
            {
              UnityAdsVideoPlayView.access$400(UnityAdsVideoPlayView.this).onEventPositionReached(UnityAdsWebData.UnityAdsVideoPosition.ThirdQuartile);
              UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).put(UnityAdsWebData.UnityAdsVideoPosition.ThirdQuartile, Boolean.valueOf(true));
            }
            if ((!this._playHeadHasMoved) && (UnityAdsVideoPlayView.access$2900(UnityAdsVideoPlayView.this) > 0L) && (System.currentTimeMillis() - UnityAdsVideoPlayView.access$2900(UnityAdsVideoPlayView.this) > 20000L))
            {
              cancel();
              UnityAdsUtils.runOnUiThread(new Runnable()
              {
                public void run()
                {
                  UnityAdsDeviceLog.error("Buffering taking too long.. cancelling video play");
                  UnityAdsVideoPlayView.access$000(UnityAdsVideoPlayView.this);
                }
              });
            }
            if ((!UnityAdsVideoPlayView.access$800(UnityAdsVideoPlayView.this)) || (!this._playHeadHasMoved)) {
              continue;
            }
            UnityAdsUtils.runOnUiThread(new Runnable()
            {
              public void run()
              {
                if (!UnityAdsVideoPlayView.access$900(UnityAdsVideoPlayView.this))
                {
                  if (UnityAdsVideoPlayView.access$400(UnityAdsVideoPlayView.this) != null)
                  {
                    UnityAdsVideoPlayView.access$902(UnityAdsVideoPlayView.this, true);
                    UnityAdsVideoPlayView.access$400(UnityAdsVideoPlayView.this).onVideoPlaybackStarted();
                    UnityAdsVideoPlayView.access$3002(UnityAdsVideoPlayView.this, System.currentTimeMillis());
                  }
                  if (!UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).containsKey(UnityAdsWebData.UnityAdsVideoPosition.Start))
                  {
                    UnityAdsVideoPlayView.access$2800(UnityAdsVideoPlayView.this).put(UnityAdsWebData.UnityAdsVideoPosition.Start, Boolean.valueOf(true));
                    UnityAdsVideoPlayView.access$400(UnityAdsVideoPlayView.this).onEventPositionReached(UnityAdsWebData.UnityAdsVideoPosition.Start);
                  }
                }
              }
            });
            return;
          }
        }
        catch (Exception localException1)
        {
          for (;;)
          {
            UnityAdsDeviceLog.error("Could not get videoView currentPosition");
            if (this._oldPos.floatValue() > 0.0F) {
              this._curPos = this._oldPos;
            } else {
              this._curPos = Float.valueOf(0.01F);
            }
          }
        }
      }
    }
  }
}
