package com.unity3d.ads.android.zone;

import com.unity3d.ads.android.UnityAdsDeviceLog;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class UnityAdsZone
{
  private JSONObject a = null;
  private JSONObject b = null;
  private String c = null;
  private String d = null;
  private boolean e = false;
  private String f = null;
  private ArrayList g = new ArrayList();
  
  public UnityAdsZone(JSONObject paramJSONObject)
  {
    this.a = new JSONObject(paramJSONObject.toString());
    this.b = paramJSONObject;
    this.c = paramJSONObject.getString("id");
    this.d = paramJSONObject.getString("name");
    this.e = paramJSONObject.optBoolean("default", true);
    paramJSONObject = paramJSONObject.optJSONArray("allowClientOverrides");
    if (paramJSONObject != null) {
      while (i < paramJSONObject.length())
      {
        this.g.add(paramJSONObject.getString(i));
        i += 1;
      }
    }
  }
  
  public long allowVideoSkipInSeconds()
  {
    return this.b.optLong("allowSkipVideoInSeconds", 0L);
  }
  
  public boolean allowsOverride(String paramString)
  {
    return this.g.contains(paramString);
  }
  
  public long disableBackButtonForSeconds()
  {
    return this.b.optLong("disableBackButtonForSeconds", 0L);
  }
  
  public String getGamerSid()
  {
    return this.f;
  }
  
  public String getZoneId()
  {
    return this.c;
  }
  
  public String getZoneName()
  {
    return this.d;
  }
  
  public JSONObject getZoneOptions()
  {
    return this.b;
  }
  
  public boolean isDefault()
  {
    return this.e;
  }
  
  public boolean isIncentivized()
  {
    return false;
  }
  
  public void mergeOptions(Map paramMap)
  {
    try
    {
      this.b = new JSONObject(this.a.toString());
      setGamerSid(null);
      if (paramMap != null)
      {
        Iterator localIterator = paramMap.entrySet().iterator();
        while (localIterator.hasNext())
        {
          Map.Entry localEntry = (Map.Entry)localIterator.next();
          if (allowsOverride((String)localEntry.getKey())) {
            try
            {
              this.b.put((String)localEntry.getKey(), localEntry.getValue());
            }
            catch (JSONException localJSONException2)
            {
              UnityAdsDeviceLog.error("Unable to set JSON value");
            }
          }
        }
        if (paramMap.containsKey("sid")) {
          setGamerSid((String)paramMap.get("sid"));
        }
      }
      return;
    }
    catch (JSONException localJSONException1)
    {
      for (;;) {}
    }
  }
  
  public boolean muteVideoSounds()
  {
    return this.b.optBoolean("muteVideoSounds", false);
  }
  
  public boolean noOfferScreen()
  {
    return this.b.optBoolean("noOfferScreen", true);
  }
  
  public boolean openAnimated()
  {
    return this.b.optBoolean("openAnimated", false);
  }
  
  public void setGamerSid(String paramString)
  {
    this.f = paramString;
  }
  
  public boolean useDeviceOrientationForVideo()
  {
    return this.b.optBoolean("useDeviceOrientationForVideo", false);
  }
}
