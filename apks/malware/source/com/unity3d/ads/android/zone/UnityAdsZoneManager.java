package com.unity3d.ads.android.zone;

import com.unity3d.ads.android.UnityAdsDeviceLog;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class UnityAdsZoneManager
{
  private Map a = null;
  private UnityAdsZone b = null;
  private UnityAdsZone c = null;
  
  public UnityAdsZoneManager(JSONArray paramJSONArray)
  {
    int i = 0;
    for (;;)
    {
      if (i < paramJSONArray.length()) {
        for (;;)
        {
          try
          {
            JSONObject localJSONObject = paramJSONArray.getJSONObject(i);
            Object localObject;
            if (localJSONObject.getBoolean("incentivised"))
            {
              localObject = new UnityAdsIncentivizedZone(localJSONObject);
              if (((UnityAdsZone)localObject).isDefault())
              {
                if (((UnityAdsZone)localObject).isIncentivized()) {
                  this.b = new UnityAdsIncentivizedZone(localJSONObject);
                }
              }
              else
              {
                if ((this.c == null) && (((UnityAdsZone)localObject).isDefault())) {
                  this.c = ((UnityAdsZone)localObject);
                }
                this.a.put(((UnityAdsZone)localObject).getZoneId(), localObject);
                break;
              }
            }
            else
            {
              localObject = new UnityAdsZone(localJSONObject);
              continue;
            }
            this.b = new UnityAdsZone(localJSONObject);
          }
          catch (JSONException localJSONException)
          {
            UnityAdsDeviceLog.error("Failed to parse zone");
          }
        }
      }
      return;
      i += 1;
    }
  }
  
  public void clear()
  {
    this.c = null;
    this.a.clear();
    this.a = null;
  }
  
  public UnityAdsZone getCurrentZone()
  {
    return this.c;
  }
  
  public UnityAdsZone getZone(String paramString)
  {
    if (this.a.containsKey(paramString)) {
      return (UnityAdsZone)this.a.get(paramString);
    }
    return null;
  }
  
  public JSONArray getZonesJson()
  {
    JSONArray localJSONArray = new JSONArray();
    Iterator localIterator = this.a.values().iterator();
    while (localIterator.hasNext()) {
      localJSONArray.put(((UnityAdsZone)localIterator.next()).getZoneOptions());
    }
    return localJSONArray;
  }
  
  public Map getZonesMap()
  {
    return this.a;
  }
  
  public boolean setCurrentZone(String paramString)
  {
    if (this.a.containsKey(paramString))
    {
      this.c = ((UnityAdsZone)this.a.get(paramString));
      return true;
    }
    this.c = null;
    return false;
  }
  
  public int zoneCount()
  {
    if (this.a != null) {
      return this.a.size();
    }
    return 0;
  }
}
