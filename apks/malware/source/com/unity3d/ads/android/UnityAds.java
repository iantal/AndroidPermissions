package com.unity3d.ads.android;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import com.unity3d.ads.android.cache.IUnityAdsCacheListener;
import com.unity3d.ads.android.cache.UnityAdsCacheManager;
import com.unity3d.ads.android.cache.UnityAdsDownloader;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import com.unity3d.ads.android.campaign.UnityAdsCampaign.UnityAdsCampaignStatus;
import com.unity3d.ads.android.campaign.UnityAdsCampaignHandler;
import com.unity3d.ads.android.data.UnityAdsAdvertisingId;
import com.unity3d.ads.android.item.UnityAdsRewardItem;
import com.unity3d.ads.android.item.UnityAdsRewardItemManager;
import com.unity3d.ads.android.properties.UnityAdsProperties;
import com.unity3d.ads.android.video.UnityAdsVideoPausedView;
import com.unity3d.ads.android.view.IUnityAdsMainViewListener;
import com.unity3d.ads.android.view.UnityAdsFullscreenActivity;
import com.unity3d.ads.android.view.UnityAdsMainView;
import com.unity3d.ads.android.view.UnityAdsMainView.UnityAdsMainViewAction;
import com.unity3d.ads.android.webapp.IUnityAdsWebBridgeListener;
import com.unity3d.ads.android.webapp.IUnityAdsWebDataListener;
import com.unity3d.ads.android.webapp.UnityAdsWebData;
import com.unity3d.ads.android.webapp.UnityAdsWebView;
import com.unity3d.ads.android.zone.UnityAdsIncentivizedZone;
import com.unity3d.ads.android.zone.UnityAdsZone;
import com.unity3d.ads.android.zone.UnityAdsZoneManager;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@TargetApi(9)
public class UnityAds
  implements IUnityAdsCacheListener, IUnityAdsMainViewListener, IUnityAdsWebBridgeListener, IUnityAdsWebDataListener
{
  public static final String UNITY_ADS_OPTION_GAMERSID_KEY = "sid";
  public static final String UNITY_ADS_OPTION_MUTE_VIDEO_SOUNDS = "muteVideoSounds";
  public static final String UNITY_ADS_OPTION_NOOFFERSCREEN_KEY = "noOfferScreen";
  public static final String UNITY_ADS_OPTION_OPENANIMATED_KEY = "openAnimated";
  public static final String UNITY_ADS_OPTION_VIDEO_USES_DEVICE_ORIENTATION = "useDeviceOrientationForVideo";
  public static final String UNITY_ADS_REWARDITEM_NAME_KEY = "name";
  public static final String UNITY_ADS_REWARDITEM_PICTURE_KEY = "picture";
  private static boolean a = false;
  private static boolean b = false;
  private static boolean c = false;
  public static UnityAdsCacheManager cachemanager = null;
  private static boolean d = false;
  private static boolean e = false;
  private static boolean f = false;
  private static boolean g = false;
  private static boolean h = false;
  private static boolean i = false;
  private static boolean j = false;
  private static AlertDialog k = null;
  private static TimerTask l = null;
  private static Timer m = null;
  public static UnityAdsMainView mainview;
  private static TimerTask n = null;
  private static Timer o = null;
  private static long p = 0L;
  private static UnityAds q = null;
  private static IUnityAdsListener r = null;
  private static int s = -1;
  private static final String[] t = { "Unity Ads is ready to show ads", "Unity Ads not ready to show ads: not initialized", "Unity Ads not ready to show ads: webapp not initialized", "Unity Ads not ready to show ads: already showing ads", "Unity Ads not ready to show ads: no internet connection available", "Unity Ads not ready to show ads: no ads are available", "Unity Ads not ready to show ads: zero ads available", "Unity Ads not ready to show ads: video not cached" };
  public static UnityAdsWebData webdata = null;
  
  static
  {
    mainview = null;
  }
  
  private UnityAds() {}
  
  private static Intent a(JSONObject paramJSONObject)
  {
    Object localObject2;
    try
    {
      if ((paramJSONObject.has("packageName")) && (!paramJSONObject.has("className")) && (!paramJSONObject.has("action")) && (!paramJSONObject.has("mimeType")))
      {
        localObject1 = UnityAdsProperties.getCurrentActivity();
        if (localObject1 == null)
        {
          UnityAdsDeviceLog.error("Unable to parse data to generate intent: current activity is null");
          return null;
        }
        localObject2 = ((Activity)localObject1).getPackageManager().getLaunchIntentForPackage(paramJSONObject.getString("packageName"));
        localObject1 = localObject2;
        if (localObject2 == null) {
          break label470;
        }
        localObject1 = localObject2;
        if (!paramJSONObject.has("flags")) {
          break label470;
        }
        ((Intent)localObject2).addFlags(paramJSONObject.getInt("flags"));
        return localObject2;
      }
    }
    catch (JSONException paramJSONObject)
    {
      UnityAdsDeviceLog.error("Exception while parsing intent json: " + paramJSONObject.getMessage());
      return null;
    }
    Object localObject1 = new Intent();
    if ((paramJSONObject.has("className")) && (paramJSONObject.has("packageName"))) {
      ((Intent)localObject1).setClassName(paramJSONObject.getString("packageName"), paramJSONObject.getString("className"));
    }
    if (paramJSONObject.has("action")) {
      ((Intent)localObject1).setAction(paramJSONObject.getString("action"));
    }
    if (paramJSONObject.has("uri")) {
      ((Intent)localObject1).setData(Uri.parse(paramJSONObject.getString("uri")));
    }
    if (paramJSONObject.has("mimeType")) {
      ((Intent)localObject1).setType(paramJSONObject.getString("mimeType"));
    }
    int i1;
    if (paramJSONObject.has("categories"))
    {
      localObject2 = paramJSONObject.getJSONArray("categories");
      if (((JSONArray)localObject2).length() > 0)
      {
        i1 = 0;
        while (i1 < ((JSONArray)localObject2).length())
        {
          ((Intent)localObject1).addCategory(((JSONArray)localObject2).getString(i1));
          i1 += 1;
        }
      }
    }
    if (paramJSONObject.has("flags")) {
      ((Intent)localObject1).setFlags(paramJSONObject.getInt("flags"));
    }
    if (paramJSONObject.has("extras"))
    {
      paramJSONObject = paramJSONObject.getJSONArray("extras");
      i1 = 0;
    }
    for (;;)
    {
      if (i1 < paramJSONObject.length())
      {
        Object localObject3 = paramJSONObject.getJSONObject(i1);
        localObject2 = ((JSONObject)localObject3).getString("key");
        localObject3 = ((JSONObject)localObject3).get("value");
        if ((localObject3 instanceof String)) {
          ((Intent)localObject1).putExtra((String)localObject2, (String)localObject3);
        } else if ((localObject3 instanceof Integer)) {
          ((Intent)localObject1).putExtra((String)localObject2, ((Integer)localObject3).intValue());
        } else if ((localObject3 instanceof Double)) {
          ((Intent)localObject1).putExtra((String)localObject2, ((Double)localObject3).doubleValue());
        } else if ((localObject3 instanceof Boolean)) {
          ((Intent)localObject1).putExtra((String)localObject2, ((Boolean)localObject3).booleanValue());
        } else {
          UnityAdsDeviceLog.error("Unable to parse launch intent extra " + (String)localObject2);
        }
      }
      else
      {
        label470:
        return localObject1;
      }
      i1 += 1;
    }
  }
  
  private static void a(int paramInt)
  {
    if (paramInt != s)
    {
      s = paramInt;
      UnityAdsDeviceLog.info(t[paramInt]);
    }
  }
  
  private static void a(long paramLong)
  {
    if (h)
    {
      UnityAdsDeviceLog.debug("Prevent double start of video playback");
      return;
    }
    h = true;
    UnityAdsDeviceLog.debug("Running threaded");
    UnityAdsUtils.runOnUiThread(new l((byte)0), paramLong);
  }
  
  public static boolean canShow()
  {
    if (webdata == null)
    {
      a(1);
      return false;
    }
    if (!d)
    {
      a(2);
      return false;
    }
    if (b)
    {
      a(3);
      return false;
    }
    Object localObject = UnityAdsProperties.getCurrentActivity();
    if (localObject != null)
    {
      localObject = (ConnectivityManager)((Activity)localObject).getBaseContext().getSystemService("connectivity");
      if (localObject != null)
      {
        localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
        if ((localObject != null) && (((NetworkInfo)localObject).isConnected())) {}
        for (int i1 = 1; i1 == 0; i1 = 0)
        {
          a(4);
          return false;
        }
      }
    }
    if (webdata.initInProgress()) {
      return false;
    }
    localObject = webdata.getViewableVideoPlanCampaigns();
    if (localObject == null)
    {
      a(5);
      return false;
    }
    if (((ArrayList)localObject).size() == 0)
    {
      a(6);
      return false;
    }
    localObject = (UnityAdsCampaign)((ArrayList)localObject).get(0);
    if ((!((UnityAdsCampaign)localObject).allowStreamingVideo().booleanValue()) && (!cachemanager.isCampaignCached((UnityAdsCampaign)localObject, true)))
    {
      a(7);
      return false;
    }
    a(0);
    return true;
  }
  
  public static boolean canShowAds()
  {
    return canShow();
  }
  
  public static void changeActivity(Activity paramActivity)
  {
    if (paramActivity == null) {
      UnityAdsDeviceLog.debug("changeActivity: null, ignoring");
    }
    do
    {
      return;
      UnityAdsDeviceLog.debug("changeActivity: " + paramActivity.getClass().getName());
    } while ((paramActivity == null) || (paramActivity.equals(UnityAdsProperties.getCurrentActivity())));
    UnityAdsProperties.CURRENT_ACTIVITY = new WeakReference(paramActivity);
    if ((paramActivity != null) && ((paramActivity instanceof UnityAdsFullscreenActivity)))
    {
      if (!e) {
        break label274;
      }
      UnityAdsDeviceLog.debug("This open request is from the developer, setting start view");
    }
    label274:
    for (paramActivity = "start";; paramActivity = null)
    {
      JSONObject localJSONObject;
      if (paramActivity != null) {
        localJSONObject = new JSONObject();
      }
      try
      {
        localObject = UnityAdsWebData.getZoneManager().getCurrentZone();
        localJSONObject.put("action", "open");
        localJSONObject.put("zone", ((UnityAdsZone)localObject).getZoneId());
        if (((UnityAdsZone)localObject).isIncentivized()) {
          localJSONObject.put("itemKey", ((UnityAdsIncentivizedZone)localObject).itemManager().getCurrentItem().getKey());
        }
        localObject = Boolean.valueOf(true);
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Object localObject;
          Boolean localBoolean = Boolean.valueOf(false);
        }
      }
      UnityAdsDeviceLog.debug("DataOk: " + localObject);
      if (((Boolean)localObject).booleanValue())
      {
        UnityAdsDeviceLog.debug("Opening with view:" + paramActivity + " and data:" + localJSONObject.toString());
        if (mainview != null) {
          new Thread(new c(paramActivity, localJSONObject)).start();
        }
      }
      e = false;
      return;
      UnityAdsProperties.BASE_ACTIVITY = new WeakReference(paramActivity);
      return;
    }
  }
  
  public static void checkMainview()
  {
    if (g)
    {
      g = false;
      if (mainview != null) {
        mainview.fixActivityAttachment();
      }
    }
  }
  
  public static void enableUnityDeveloperInternalTestMode()
  {
    UnityAdsProperties.CAMPAIGN_DATA_URL = "https://impact.staging.applifier.com/mobile/campaigns";
    UnityAdsProperties.UNITY_DEVELOPER_INTERNAL_TEST = Boolean.valueOf(true);
  }
  
  public static String getCurrentRewardItemKey()
  {
    UnityAdsZone localUnityAdsZone = UnityAdsWebData.getZoneManager().getCurrentZone();
    if ((localUnityAdsZone != null) && (localUnityAdsZone.isIncentivized())) {
      return ((UnityAdsIncentivizedZone)localUnityAdsZone).itemManager().getCurrentItem().getKey();
    }
    return null;
  }
  
  public static String getDefaultRewardItemKey()
  {
    UnityAdsZone localUnityAdsZone = UnityAdsWebData.getZoneManager().getCurrentZone();
    if ((localUnityAdsZone != null) && (localUnityAdsZone.isIncentivized())) {
      return ((UnityAdsIncentivizedZone)localUnityAdsZone).itemManager().getDefaultItem().getKey();
    }
    return null;
  }
  
  public static Map getRewardItemDetailsWithKey(String paramString)
  {
    Object localObject = UnityAdsWebData.getZoneManager().getCurrentZone();
    if ((localObject != null) && (((UnityAdsZone)localObject).isIncentivized()))
    {
      localObject = ((UnityAdsIncentivizedZone)localObject).itemManager().getItem(paramString);
      if (localObject != null) {
        return ((UnityAdsRewardItem)localObject).getDetails();
      }
      UnityAdsDeviceLog.info("Could not fetch reward item: " + paramString);
    }
    return null;
  }
  
  public static ArrayList getRewardItemKeys()
  {
    Object localObject1 = UnityAdsWebData.getZoneManager().getCurrentZone();
    if ((localObject1 != null) && (((UnityAdsZone)localObject1).isIncentivized()))
    {
      Object localObject2 = ((UnityAdsIncentivizedZone)localObject1).itemManager().allItems();
      localObject1 = new ArrayList();
      localObject2 = ((ArrayList)localObject2).iterator();
      while (((Iterator)localObject2).hasNext()) {
        ((ArrayList)localObject1).add(((UnityAdsRewardItem)((Iterator)localObject2).next()).getKey());
      }
      return localObject1;
    }
    return null;
  }
  
  public static String getSDKVersion()
  {
    return "1405";
  }
  
  public static String getZone()
  {
    Object localObject = UnityAdsWebData.getZoneManager();
    if (localObject != null)
    {
      localObject = ((UnityAdsZoneManager)localObject).getCurrentZone();
      if (localObject != null) {
        return ((UnityAdsZone)localObject).getZoneId();
      }
    }
    return null;
  }
  
  public static void handleFullscreenDestroy()
  {
    if (i) {
      t();
    }
    while (!b) {
      return;
    }
    g = true;
  }
  
  public static boolean hasMultipleRewardItems()
  {
    UnityAdsZone localUnityAdsZone = UnityAdsWebData.getZoneManager().getCurrentZone();
    if ((localUnityAdsZone != null) && (localUnityAdsZone.isIncentivized())) {
      return ((UnityAdsIncentivizedZone)localUnityAdsZone).itemManager().itemCount() > 1;
    }
    return false;
  }
  
  public static boolean hide()
  {
    if (b)
    {
      q();
      return true;
    }
    return false;
  }
  
  public static void init(Activity paramActivity, String paramString, IUnityAdsListener paramIUnityAdsListener)
  {
    if ((q != null) || (a)) {
      return;
    }
    if ((paramString == null) || (paramString.length() == 0)) {
      throw new IllegalArgumentException("gameId is empty");
    }
    try
    {
      if (Integer.parseInt(paramString) <= 0) {
        throw new IllegalArgumentException("gameId is invalid");
      }
    }
    catch (NumberFormatException paramActivity)
    {
      throw new IllegalArgumentException("gameId does not parse as an integer");
    }
    if ((UnityAdsProperties.UNITY_VERSION != null) && (UnityAdsProperties.UNITY_VERSION.length() > 0)) {
      UnityAdsDeviceLog.info("Initializing Unity Ads version 1405 (Unity + " + UnityAdsProperties.UNITY_VERSION + ") with gameId " + paramString);
    }
    try
    {
      Class.forName("com.unity3d.ads.android.webapp.UnityAdsWebBridge").getMethod("handleWebEvent", new Class[] { String.class, String.class });
      UnityAdsDeviceLog.debug("UnityAds ProGuard check OK");
      localObject = paramActivity.getPackageName();
      localPackageManager = paramActivity.getPackageManager();
      if ((localObject == null) || (localPackageManager == null)) {}
    }
    catch (ClassNotFoundException paramActivity)
    {
      try
      {
        PackageManager localPackageManager;
        Object localObject = localPackageManager.getPackageInfo((String)localObject, 1);
        int i1 = 0;
        while (i1 < ((PackageInfo)localObject).activities.length)
        {
          if (localObject.activities[i1].launchMode == 2)
          {
            i = true;
            UnityAdsDeviceLog.debug("Running in singleTask application mode");
          }
          i1 += 1;
        }
        UnityAdsDeviceLog.info("Initializing Unity Ads version 1405 with gameId " + paramString);
      }
      catch (Exception localException2)
      {
        UnityAdsDeviceLog.debug("Error while checking singleTask activities");
      }
      paramActivity = paramActivity;
      UnityAdsDeviceLog.error("UnityAds ProGuard check fail: com.unity3d.ads.android.webapp.UnityAdsWebBridge class not found, check ProGuard settings");
      return;
    }
    catch (NoSuchMethodException paramActivity)
    {
      UnityAdsDeviceLog.error("UnityAds ProGuard check fail: com.unity3d.ads.android.webapp.handleWebEvent method not found, check ProGuard settings");
      return;
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        UnityAdsDeviceLog.debug("UnityAds ProGuard check: Unknown exception: " + localException1);
      }
      if (q == null) {
        q = new UnityAds();
      }
      setListener(paramIUnityAdsListener);
      UnityAdsProperties.UNITY_ADS_GAME_ID = paramString;
      UnityAdsProperties.BASE_ACTIVITY = new WeakReference(paramActivity);
      UnityAdsProperties.CURRENT_ACTIVITY = new WeakReference(paramActivity);
      UnityAdsVideoPausedView.initScreenMetrics(paramActivity);
      UnityAdsDeviceLog.debug("Is debuggable=" + UnityAdsUtils.isDebuggable(paramActivity));
      paramString = new UnityAdsCacheManager(paramActivity);
      cachemanager = paramString;
      paramString.setDownloadListener(q);
      paramString = new UnityAdsWebData();
      webdata = paramString;
      paramString.setWebDataListener(q);
      new Thread(new b(paramActivity)).start();
    }
  }
  
  public static boolean isSupported()
  {
    return Build.VERSION.SDK_INT >= 9;
  }
  
  private static void q()
  {
    
    if ((UnityAdsProperties.getCurrentActivity() != null) && ((UnityAdsProperties.getCurrentActivity() instanceof UnityAdsFullscreenActivity)))
    {
      k localK = new k((byte)0);
      new Handler(Looper.getMainLooper()).postDelayed(localK, 1L);
      return;
    }
    UnityAdsDeviceLog.debug("Did not close");
  }
  
  private static void r()
  {
    if (l != null) {
      l.cancel();
    }
    if (m != null)
    {
      m.cancel();
      m.purge();
    }
    l = null;
    m = null;
  }
  
  private static void s()
  {
    p = 0L;
    if (o != null) {
      o.cancel();
    }
  }
  
  public static void setCampaignDataURL(String paramString)
  {
    UnityAdsProperties.CAMPAIGN_DATA_URL = paramString;
  }
  
  public static void setDebugMode(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      UnityAdsDeviceLog.setLogLevel(UnityAdsDeviceLog.LOGLEVEL_DEBUG);
      return;
    }
    UnityAdsDeviceLog.setLogLevel(UnityAdsDeviceLog.LOGLEVEL_INFO);
  }
  
  public static void setDefaultRewardItemAsRewardItem()
  {
    if (canShow())
    {
      Object localObject = UnityAdsWebData.getZoneManager().getCurrentZone();
      if ((localObject != null) && (((UnityAdsZone)localObject).isIncentivized()))
      {
        localObject = ((UnityAdsIncentivizedZone)localObject).itemManager();
        ((UnityAdsRewardItemManager)localObject).setCurrentItem(((UnityAdsRewardItemManager)localObject).getDefaultItem().getKey());
      }
    }
  }
  
  public static void setListener(IUnityAdsListener paramIUnityAdsListener)
  {
    r = paramIUnityAdsListener;
  }
  
  public static boolean setRewardItemKey(String paramString)
  {
    if (canShow())
    {
      UnityAdsZone localUnityAdsZone = UnityAdsWebData.getZoneManager().getCurrentZone();
      if ((localUnityAdsZone != null) && (localUnityAdsZone.isIncentivized())) {
        return ((UnityAdsIncentivizedZone)localUnityAdsZone).itemManager().setCurrentItem(paramString);
      }
    }
    return false;
  }
  
  public static void setTestDeveloperId(String paramString)
  {
    UnityAdsProperties.TEST_DEVELOPER_ID = paramString;
  }
  
  public static void setTestMode(boolean paramBoolean)
  {
    UnityAdsProperties.TESTMODE_ENABLED = Boolean.valueOf(paramBoolean);
  }
  
  public static void setTestOptionsId(String paramString)
  {
    UnityAdsProperties.TEST_OPTIONS_ID = paramString;
  }
  
  public static boolean setZone(String paramString)
  {
    if (!b)
    {
      if (UnityAdsWebData.getZoneManager() == null) {
        throw new IllegalStateException("Unable to set zone before campaigns are available");
      }
      return UnityAdsWebData.getZoneManager().setCurrentZone(paramString);
    }
    return false;
  }
  
  public static boolean setZone(String paramString1, String paramString2)
  {
    if ((!b) && (setZone(paramString1)))
    {
      paramString1 = UnityAdsWebData.getZoneManager().getCurrentZone();
      if (paramString1.isIncentivized()) {
        return ((UnityAdsIncentivizedZone)paramString1).itemManager().setCurrentItem(paramString2);
      }
    }
    return false;
  }
  
  public static boolean show()
  {
    return show(null);
  }
  
  public static boolean show(Map paramMap)
  {
    if (canShow())
    {
      UnityAdsZone localUnityAdsZone = UnityAdsWebData.getZoneManager().getCurrentZone();
      if (localUnityAdsZone != null)
      {
        UnityAdsDownloader.stopAllDownloads();
        localUnityAdsZone.mergeOptions(paramMap);
        if (localUnityAdsZone.noOfferScreen())
        {
          paramMap = webdata.getViewableVideoPlanCampaigns();
          if (paramMap.size() > 0) {
            UnityAdsProperties.SELECTED_CAMPAIGN = (UnityAdsCampaign)paramMap.get(0);
          }
        }
        UnityAdsDeviceLog.info("Launching ad from \"" + localUnityAdsZone.getZoneName() + "\", options: " + localUnityAdsZone.getZoneOptions().toString());
        e = true;
        b = true;
        h = false;
        j = false;
        UnityAdsProperties.SELECTED_CAMPAIGN_CACHED = Boolean.valueOf(false);
        paramMap = new Intent(UnityAdsProperties.getCurrentActivity(), UnityAdsFullscreenActivity.class);
        int i1 = 268500992;
        if (UnityAdsWebData.getZoneManager().getCurrentZone().openAnimated()) {
          i1 = 268435456;
        }
        paramMap.addFlags(i1);
        try
        {
          UnityAdsProperties.getBaseActivity().startActivity(paramMap);
          return b;
        }
        catch (ActivityNotFoundException paramMap)
        {
          for (;;)
          {
            UnityAdsDeviceLog.error("Could not find UnityAdsFullScreenActivity (failed Android manifest merging?): " + paramMap.getStackTrace());
          }
        }
        catch (Exception paramMap)
        {
          for (;;)
          {
            UnityAdsDeviceLog.error("Weird error: " + paramMap.getStackTrace());
          }
        }
      }
      UnityAdsDeviceLog.error("Unity Ads current zone is null");
    }
    for (;;)
    {
      return false;
      UnityAdsDeviceLog.error("Unity Ads not ready to show ads");
    }
  }
  
  private static void t()
  {
    if (j) {
      return;
    }
    int i1 = 30;
    if (i) {
      i1 = 250;
    }
    new Handler(Looper.getMainLooper()).postDelayed(new i(), i1);
  }
  
  public void onAllCampaignsReady() {}
  
  public void onCampaignReady(UnityAdsCampaignHandler paramUnityAdsCampaignHandler)
  {
    if ((paramUnityAdsCampaignHandler == null) || (paramUnityAdsCampaignHandler.getCampaign() == null)) {
      return;
    }
    UnityAdsDeviceLog.debug(paramUnityAdsCampaignHandler.getCampaign().toString());
  }
  
  public void onCampaignUpdateStarted()
  {
    UnityAdsDeviceLog.debug("Campaign updates started.");
  }
  
  public void onCloseAdsView(JSONObject paramJSONObject)
  {
    hide();
  }
  
  public void onLaunchIntent(JSONObject paramJSONObject)
  {
    Intent localIntent;
    try
    {
      localIntent = a(paramJSONObject);
      if (localIntent == null)
      {
        UnityAdsDeviceLog.error("No suitable intent to launch");
        UnityAdsDeviceLog.debug("Intent JSON: " + paramJSONObject.toString());
        return;
      }
      paramJSONObject = UnityAdsProperties.getCurrentActivity();
      if (paramJSONObject == null)
      {
        UnityAdsDeviceLog.error("Unable to launch intent: current activity is null");
        return;
      }
    }
    catch (Exception paramJSONObject)
    {
      UnityAdsDeviceLog.error("Failed to launch intent: " + paramJSONObject.getMessage());
      return;
    }
    paramJSONObject.startActivity(localIntent);
  }
  
  public void onMainViewAction(UnityAdsMainView.UnityAdsMainViewAction paramUnityAdsMainViewAction)
  {
    switch (j.a[paramUnityAdsMainViewAction.ordinal()])
    {
    default: 
    case 1: 
    case 2: 
    case 3: 
    case 4: 
      do
      {
        do
        {
          do
          {
            return;
          } while (!b);
          q();
          return;
          if (r != null) {
            r.onVideoStarted();
          }
          paramUnityAdsMainViewAction = webdata.getViewableVideoPlanCampaigns();
          if (paramUnityAdsMainViewAction.size() > 1)
          {
            paramUnityAdsMainViewAction = (UnityAdsCampaign)paramUnityAdsMainViewAction.get(1);
            if ((cachemanager.isCampaignCached(UnityAdsProperties.SELECTED_CAMPAIGN, true)) && (!cachemanager.isCampaignCached(paramUnityAdsMainViewAction, true)) && (paramUnityAdsMainViewAction.allowCacheVideo().booleanValue())) {
              cachemanager.cacheNextVideo(paramUnityAdsMainViewAction);
            }
          }
          r();
          return;
          UnityAdsProperties.CAMPAIGN_REFRESH_VIEWS_COUNT += 1;
        } while ((r == null) || (UnityAdsProperties.SELECTED_CAMPAIGN == null) || (UnityAdsProperties.SELECTED_CAMPAIGN.isViewed().booleanValue()));
        UnityAdsDeviceLog.info("Unity Ads video completed");
        UnityAdsProperties.SELECTED_CAMPAIGN.setCampaignStatus(UnityAdsCampaign.UnityAdsCampaignStatus.VIEWED);
        r.onVideoCompleted(getCurrentRewardItemKey(), false);
        return;
        UnityAdsProperties.CAMPAIGN_REFRESH_VIEWS_COUNT += 1;
      } while ((r == null) || (UnityAdsProperties.SELECTED_CAMPAIGN == null) || (UnityAdsProperties.SELECTED_CAMPAIGN.isViewed().booleanValue()));
      UnityAdsDeviceLog.info("Unity Ads video skipped");
      UnityAdsProperties.SELECTED_CAMPAIGN.setCampaignStatus(UnityAdsCampaign.UnityAdsCampaignStatus.VIEWED);
      r.onVideoCompleted(getCurrentRewardItemKey(), true);
      return;
    }
    UnityAdsDeviceLog.debug("Retrying video play, because something went wrong.");
    h = false;
    a(300L);
  }
  
  /* Error */
  public void onOpenPlayStore(JSONObject paramJSONObject)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: invokestatic 878	com/unity3d/ads/android/UnityAdsDeviceLog:entered	()V
    //   6: aload_1
    //   7: ifnull +159 -> 166
    //   10: aload_1
    //   11: invokevirtual 491	org/json/JSONObject:toString	()Ljava/lang/String;
    //   14: invokestatic 323	com/unity3d/ads/android/UnityAdsDeviceLog:debug	(Ljava/lang/String;)V
    //   17: iconst_0
    //   18: invokestatic 481	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   21: astore 6
    //   23: aload_1
    //   24: ldc_w 953
    //   27: invokevirtual 160	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   30: ifeq +144 -> 174
    //   33: aload_1
    //   34: ldc_w 953
    //   37: invokevirtual 190	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   40: astore_3
    //   41: aload 5
    //   43: astore 4
    //   45: aload_1
    //   46: ldc_w 955
    //   49: invokevirtual 160	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   52: ifeq +12 -> 64
    //   55: aload_1
    //   56: ldc_w 955
    //   59: invokevirtual 190	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   62: astore 4
    //   64: aload 6
    //   66: astore 5
    //   68: aload_1
    //   69: ldc_w 957
    //   72: invokevirtual 160	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   75: ifeq +17 -> 92
    //   78: aload_1
    //   79: ldc_w 957
    //   82: invokevirtual 960	org/json/JSONObject:getBoolean	(Ljava/lang/String;)Z
    //   85: istore_2
    //   86: iload_2
    //   87: invokestatic 481	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   90: astore 5
    //   92: aload_3
    //   93: ifnull +123 -> 216
    //   96: aload 5
    //   98: invokevirtual 308	java/lang/Boolean:booleanValue	()Z
    //   101: ifne +115 -> 216
    //   104: new 210	java/lang/StringBuilder
    //   107: dup
    //   108: ldc_w 962
    //   111: invokespecial 214	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   114: aload_3
    //   115: invokevirtual 222	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   118: invokevirtual 225	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   121: invokestatic 323	com/unity3d/ads/android/UnityAdsDeviceLog:debug	(Ljava/lang/String;)V
    //   124: invokestatic 172	com/unity3d/ads/android/properties/UnityAdsProperties:getCurrentActivity	()Landroid/app/Activity;
    //   127: ifnull +39 -> 166
    //   130: invokestatic 172	com/unity3d/ads/android/properties/UnityAdsProperties:getCurrentActivity	()Landroid/app/Activity;
    //   133: new 204	android/content/Intent
    //   136: dup
    //   137: ldc_w 964
    //   140: new 210	java/lang/StringBuilder
    //   143: dup
    //   144: ldc_w 966
    //   147: invokespecial 214	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   150: aload_3
    //   151: invokevirtual 222	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   154: invokevirtual 225	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   157: invokestatic 241	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   160: invokespecial 969	android/content/Intent:<init>	(Ljava/lang/String;Landroid/net/Uri;)V
    //   163: invokevirtual 858	android/app/Activity:startActivity	(Landroid/content/Intent;)V
    //   166: return
    //   167: astore_3
    //   168: ldc_w 971
    //   171: invokestatic 180	com/unity3d/ads/android/UnityAdsDeviceLog:error	(Ljava/lang/String;)V
    //   174: aconst_null
    //   175: astore_3
    //   176: goto -135 -> 41
    //   179: astore 4
    //   181: ldc_w 973
    //   184: invokestatic 180	com/unity3d/ads/android/UnityAdsDeviceLog:error	(Ljava/lang/String;)V
    //   187: aload 5
    //   189: astore 4
    //   191: goto -127 -> 64
    //   194: astore_1
    //   195: ldc_w 975
    //   198: invokestatic 180	com/unity3d/ads/android/UnityAdsDeviceLog:error	(Ljava/lang/String;)V
    //   201: aload 6
    //   203: astore 5
    //   205: goto -113 -> 92
    //   208: astore_1
    //   209: ldc_w 977
    //   212: invokestatic 180	com/unity3d/ads/android/UnityAdsDeviceLog:error	(Ljava/lang/String;)V
    //   215: return
    //   216: aload 4
    //   218: ifnull -52 -> 166
    //   221: new 210	java/lang/StringBuilder
    //   224: dup
    //   225: ldc_w 979
    //   228: invokespecial 214	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   231: aload 4
    //   233: invokevirtual 222	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   236: invokevirtual 225	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   239: invokestatic 323	com/unity3d/ads/android/UnityAdsDeviceLog:debug	(Ljava/lang/String;)V
    //   242: invokestatic 172	com/unity3d/ads/android/properties/UnityAdsProperties:getCurrentActivity	()Landroid/app/Activity;
    //   245: ifnull -79 -> 166
    //   248: invokestatic 172	com/unity3d/ads/android/properties/UnityAdsProperties:getCurrentActivity	()Landroid/app/Activity;
    //   251: new 204	android/content/Intent
    //   254: dup
    //   255: ldc_w 964
    //   258: aload 4
    //   260: invokestatic 241	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   263: invokespecial 969	android/content/Intent:<init>	(Ljava/lang/String;Landroid/net/Uri;)V
    //   266: invokevirtual 858	android/app/Activity:startActivity	(Landroid/content/Intent;)V
    //   269: return
    //   270: astore_1
    //   271: ldc_w 981
    //   274: invokestatic 180	com/unity3d/ads/android/UnityAdsDeviceLog:error	(Ljava/lang/String;)V
    //   277: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	278	0	this	UnityAds
    //   0	278	1	paramJSONObject	JSONObject
    //   85	2	2	bool	boolean
    //   40	111	3	str	String
    //   167	1	3	localException1	Exception
    //   175	1	3	localObject1	Object
    //   43	20	4	localObject2	Object
    //   179	1	4	localException2	Exception
    //   189	70	4	localObject3	Object
    //   1	203	5	localObject4	Object
    //   21	181	6	localBoolean	Boolean
    // Exception table:
    //   from	to	target	type
    //   33	41	167	java/lang/Exception
    //   55	64	179	java/lang/Exception
    //   78	86	194	java/lang/Exception
    //   130	166	208	java/lang/Exception
    //   248	269	270	java/lang/Exception
  }
  
  public void onOrientationRequest(JSONObject paramJSONObject)
  {
    ((Activity)UnityAdsProperties.CURRENT_ACTIVITY.get()).setRequestedOrientation(paramJSONObject.optInt("orientation", -1));
  }
  
  public void onPauseVideo(JSONObject paramJSONObject) {}
  
  public void onPlayVideo(JSONObject paramJSONObject)
  {
    
    if (paramJSONObject.has("campaignId")) {
      localObject = null;
    }
    try
    {
      String str = paramJSONObject.getString("campaignId");
      localObject = str;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        UnityAdsDeviceLog.error("Could not get campaignId");
      }
    }
    if (localObject != null)
    {
      if ((webdata != null) && (webdata.getCampaignById((String)localObject) != null)) {
        UnityAdsProperties.SELECTED_CAMPAIGN = webdata.getCampaignById((String)localObject);
      }
      if ((UnityAdsProperties.SELECTED_CAMPAIGN != null) && (UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId() != null) && (UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId().equals(localObject))) {
        localObject = Boolean.valueOf(false);
      }
    }
    try
    {
      boolean bool = paramJSONObject.getBoolean("rewatch");
      paramJSONObject = Boolean.valueOf(bool);
    }
    catch (Exception paramJSONObject)
    {
      for (;;)
      {
        paramJSONObject = (JSONObject)localObject;
      }
    }
    UnityAdsDeviceLog.debug("Selected campaign=" + UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId() + " isViewed: " + UnityAdsProperties.SELECTED_CAMPAIGN.isViewed());
    if ((UnityAdsProperties.SELECTED_CAMPAIGN != null) && ((paramJSONObject.booleanValue()) || (!UnityAdsProperties.SELECTED_CAMPAIGN.isViewed().booleanValue())))
    {
      if (paramJSONObject.booleanValue()) {
        h = false;
      }
      a(0L);
    }
  }
  
  public void onWebAppInitComplete(JSONObject paramJSONObject)
  {
    int i1 = 1;
    UnityAdsDeviceLog.entered();
    d = true;
    paramJSONObject = Boolean.valueOf(true);
    if ((webdata != null) && (webdata.getViewableVideoPlanCampaigns() != null) && (webdata.getViewableVideoPlanCampaigns().size() > 0)) {}
    for (;;)
    {
      JSONObject localJSONObject;
      if (i1 != 0) {
        localJSONObject = new JSONObject();
      }
      try
      {
        localJSONObject.put("action", "initComplete");
        if (paramJSONObject.booleanValue())
        {
          mainview.webview.setWebViewCurrentView("start", localJSONObject);
          if ((!c) && (r != null)) {
            UnityAdsUtils.runOnUiThread(new e());
          }
        }
        return;
        i1 = 0;
      }
      catch (Exception paramJSONObject)
      {
        for (;;)
        {
          paramJSONObject = Boolean.valueOf(false);
        }
      }
    }
  }
  
  public void onWebAppLoadComplete(JSONObject paramJSONObject) {}
  
  public void onWebDataCompleted()
  {
    boolean bool2 = true;
    UnityAdsDeviceLog.entered();
    boolean bool1;
    int i2;
    if ((webdata.getData() != null) && (webdata.getData().has("data")))
    {
      try
      {
        localObject1 = webdata.getData().getJSONObject("data");
        i1 = 0;
      }
      catch (Exception localException1)
      {
        for (;;)
        {
          Object localObject1;
          Timer localTimer;
          int i1 = 1;
          localObject2 = null;
        }
      }
      bool1 = bool2;
      i2 = i1;
      if (i1 == 0)
      {
        s();
        if (UnityAdsProperties.CAMPAIGN_REFRESH_SECONDS > 0)
        {
          n = new h();
          p = SystemClock.elapsedRealtime() + UnityAdsProperties.CAMPAIGN_REFRESH_SECONDS * 1000;
          localTimer = new Timer();
          o = localTimer;
          localTimer.schedule(n, UnityAdsProperties.CAMPAIGN_REFRESH_SECONDS * 1000);
        }
        bool1 = bool2;
        i2 = i1;
        if (!((JSONObject)localObject1).has("sdkIsCurrent")) {}
      }
    }
    for (;;)
    {
      try
      {
        bool1 = ((JSONObject)localObject1).getBoolean("sdkIsCurrent");
        i2 = i1;
      }
      catch (Exception localException2)
      {
        Object localObject2;
        i2 = 1;
        bool1 = bool2;
        continue;
      }
      if ((i2 == 0) && (!bool1) && (UnityAdsProperties.getCurrentActivity() != null) && (UnityAdsUtils.isDebuggable(UnityAdsProperties.getCurrentActivity())))
      {
        localObject1 = new AlertDialog.Builder(UnityAdsProperties.getCurrentActivity()).create();
        k = (AlertDialog)localObject1;
        ((AlertDialog)localObject1).setTitle("Unity Ads");
        k.setMessage("You are not running the latest version of Unity Ads android. Please update your version (this dialog won't appear in release builds).");
        k.setButton("OK", new a(this));
        k.show();
      }
      UnityAdsDeviceLog.entered();
      if (a) {
        cachemanager.updateCache(webdata.getVideoPlanCampaigns());
      }
      d = false;
      if (mainview != null)
      {
        UnityAdsDeviceLog.debug("Destroying views");
        mainview.webview.destroy();
        mainview = null;
      }
      mainview = new UnityAdsMainView(UnityAdsProperties.getCurrentActivity(), q, q);
      return;
      i2 = 0;
      bool1 = bool2;
    }
  }
  
  public void onWebDataFailed()
  {
    if ((r != null) && (!c)) {
      r.onFetchFailed();
    }
  }
}
