package com.unity3d.ads.android.campaign;

import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.cache.IUnityAdsDownloadListener;
import com.unity3d.ads.android.cache.UnityAdsDownloader;
import java.util.ArrayList;

public class UnityAdsCampaignHandler
  implements IUnityAdsDownloadListener
{
  private ArrayList a = null;
  private UnityAdsCampaign b = null;
  private IUnityAdsCampaignHandlerListener c = null;
  private long d = 0L;
  private long e = 0L;
  
  public UnityAdsCampaignHandler(UnityAdsCampaign paramUnityAdsCampaign)
  {
    this.b = paramUnityAdsCampaign;
  }
  
  private boolean a()
  {
    long l1 = UnityAdsUtils.getSizeForLocalFile(this.b.getVideoFilename());
    long l2 = this.b.getVideoFileExpectedSize();
    UnityAdsDeviceLog.debug("localSize=" + l1 + ", expectedSize=" + l2);
    if (l1 == -1L) {}
    do
    {
      return false;
      if (l2 == -1L) {
        return true;
      }
    } while ((l1 <= 0L) || (l2 <= 0L) || (l1 != l2));
    return true;
  }
  
  private boolean a(String paramString)
  {
    boolean bool2 = false;
    this.e = System.currentTimeMillis();
    int i;
    if (this.a != null)
    {
      i = 0;
      if (i >= this.a.size()) {
        break label109;
      }
      if (!((String)this.a.get(i)).equals(paramString)) {
        break label102;
      }
    }
    for (;;)
    {
      if (i >= 0) {
        this.a.remove(i);
      }
      boolean bool1 = bool2;
      if (this.a != null)
      {
        bool1 = bool2;
        if (this.a.size() == 0)
        {
          bool1 = bool2;
          if (this.c != null)
          {
            UnityAdsDownloader.removeListener(this);
            bool1 = true;
          }
        }
      }
      return bool1;
      label102:
      i += 1;
      break;
      label109:
      i = -1;
    }
  }
  
  private void b()
  {
    if (this.b == null) {
      return;
    }
    if (this.a == null) {
      this.a = new ArrayList();
    }
    this.a.add(this.b.getVideoUrl());
    this.d = System.currentTimeMillis();
    UnityAdsDownloader.addDownload(this.b);
  }
  
  public void clearData()
  {
    if (this.c != null) {
      this.c = null;
    }
    if (this.a != null) {
      this.a.clear();
    }
    if (this.b != null)
    {
      this.b.clearData();
      this.b = null;
    }
  }
  
  public void downloadCampaign()
  {
    if ((!UnityAdsUtils.isFileInCache(this.b.getVideoFilename())) && (UnityAdsUtils.canUseExternalStorage()))
    {
      if (!hasDownloads()) {
        UnityAdsDownloader.addListener(this);
      }
      b();
    }
    do
    {
      return;
      this.b.getVideoFilename();
    } while ((a()) || (!UnityAdsUtils.canUseExternalStorage()));
    if (!hasDownloads()) {
      UnityAdsDownloader.addListener(this);
    }
    UnityAdsUtils.removeFile(this.b.getVideoFilename());
    UnityAdsDownloader.addListener(this);
    b();
  }
  
  public long getCachingDurationInMillis()
  {
    long l2 = 0L;
    long l1 = l2;
    if (this.d > 0L)
    {
      l1 = l2;
      if (this.e > 0L) {
        l1 = this.e - this.d;
      }
    }
    return l1;
  }
  
  public UnityAdsCampaign getCampaign()
  {
    return this.b;
  }
  
  public boolean hasDownloads()
  {
    return (this.a != null) && (this.a.size() > 0);
  }
  
  public void initCampaign(boolean paramBoolean)
  {
    this.b.getVideoUrl();
    if (((this.b.shouldCacheVideo().booleanValue()) || ((this.b.allowCacheVideo().booleanValue()) && (paramBoolean))) && (!UnityAdsUtils.isFileInCache(this.b.getVideoFilename())) && (UnityAdsUtils.canUseExternalStorage()))
    {
      if (!hasDownloads()) {
        UnityAdsDownloader.addListener(this);
      }
      b();
    }
    for (;;)
    {
      if (this.c != null) {
        this.c.onCampaignHandled(this);
      }
      return;
      if ((this.b.shouldCacheVideo().booleanValue()) && (!a()) && (UnityAdsUtils.canUseExternalStorage()))
      {
        UnityAdsDeviceLog.debug("The file was not okay, redownloading");
        UnityAdsUtils.removeFile(this.b.getVideoFilename());
        UnityAdsDownloader.addListener(this);
        b();
      }
    }
  }
  
  public void onFileDownloadCancelled(String paramString)
  {
    if (a(paramString)) {
      UnityAdsDeviceLog.debug("Download cancelled: " + this.b.getCampaignId());
    }
  }
  
  public void onFileDownloadCompleted(String paramString)
  {
    if (a(paramString)) {
      UnityAdsDeviceLog.debug("Reporting campaign download completion: " + this.b.getCampaignId());
    }
  }
  
  public void setListener(IUnityAdsCampaignHandlerListener paramIUnityAdsCampaignHandlerListener)
  {
    this.c = paramIUnityAdsCampaignHandlerListener;
  }
}
