package com.unity3d.ads.android.webapp;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.graphics.Paint;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebSettings.RenderPriority;
import android.webkit.WebStorage.QuotaUpdater;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.data.UnityAdsDevice;
import com.unity3d.ads.android.properties.UnityAdsProperties;
import com.unity3d.ads.android.zone.UnityAdsZoneManager;
import java.io.File;
import java.lang.reflect.Method;
import org.json.JSONObject;

@TargetApi(9)
public class UnityAdsWebView
  extends WebView
{
  private String a = null;
  private IUnityAdsWebViewListener b = null;
  private boolean c = false;
  private UnityAdsWebBridge d = null;
  private String e = "start";
  
  public UnityAdsWebView(Activity paramActivity, IUnityAdsWebViewListener paramIUnityAdsWebViewListener, UnityAdsWebBridge paramUnityAdsWebBridge)
  {
    super(paramActivity);
    UnityAdsDeviceLog.debug("Loading WebView from URL: " + UnityAdsProperties.WEBVIEW_BASE_URL);
    a(UnityAdsProperties.WEBVIEW_BASE_URL, paramIUnityAdsWebViewListener, paramUnityAdsWebBridge);
  }
  
  public UnityAdsWebView(Activity paramActivity, String paramString, IUnityAdsWebViewListener paramIUnityAdsWebViewListener, UnityAdsWebBridge paramUnityAdsWebBridge)
  {
    super(paramActivity);
    a(paramString, paramIUnityAdsWebViewListener, paramUnityAdsWebBridge);
  }
  
  public UnityAdsWebView(Context paramContext)
  {
    super(paramContext);
  }
  
  public UnityAdsWebView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
  }
  
  public UnityAdsWebView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
  }
  
  private void a(String paramString, IUnityAdsWebViewListener paramIUnityAdsWebViewListener, UnityAdsWebBridge paramUnityAdsWebBridge)
  {
    this.b = paramIUnityAdsWebViewListener;
    this.a = paramString;
    this.d = paramUnityAdsWebBridge;
    getSettings().setJavaScriptEnabled(true);
    if ((this.a != null) && (this.a.indexOf("_raw.html") != -1))
    {
      getSettings().setCacheMode(2);
      UnityAdsDeviceLog.debug("LOAD_NO_CACHE");
      if ((getContext() == null) || (getContext().getCacheDir() == null)) {
        break label341;
      }
    }
    label335:
    label341:
    for (paramString = getContext().getCacheDir().toString();; paramString = null)
    {
      getSettings().setSupportZoom(false);
      getSettings().setBuiltInZoomControls(false);
      getSettings().setLightTouchEnabled(false);
      getSettings().setRenderPriority(WebSettings.RenderPriority.HIGH);
      getSettings().setSupportMultipleWindows(false);
      getSettings().setAllowFileAccess(false);
      setHorizontalScrollBarEnabled(false);
      setVerticalScrollBarEnabled(false);
      setClickable(true);
      setFocusable(true);
      setFocusableInTouchMode(true);
      setInitialScale(0);
      setBackgroundColor(-16777216);
      setBackgroundDrawable(null);
      setBackgroundResource(0);
      setWebViewClient(new o(this, (byte)0));
      setWebChromeClient(new n(this, (byte)0));
      if (paramString != null) {
        if (Build.VERSION.SDK_INT > 7) {
          break label335;
        }
      }
      for (boolean bool = false;; bool = true)
      {
        getSettings().setAppCacheEnabled(bool);
        getSettings().setDomStorageEnabled(true);
        getSettings().setAppCacheMaxSize(10485760L);
        getSettings().setAppCachePath(paramString);
        UnityAdsDeviceLog.debug("Adding javascript interface");
        addJavascriptInterface(this.d, "unityadsnativebridge");
        loadUrl(this.a);
        if (Build.VERSION.SDK_INT > 8)
        {
          setOnLongClickListener(new l(this));
          setLongClickable(false);
        }
        return;
        if (Build.VERSION.SDK_INT < 17)
        {
          getSettings().setCacheMode(0);
          break;
        }
        getSettings().setCacheMode(-1);
        break;
      }
    }
  }
  
  public void clearWebView()
  {
    this.c = false;
    this.b = null;
    setWebViewClient(null);
    setWebChromeClient(null);
  }
  
  public String getWebViewCurrentView()
  {
    return this.e;
  }
  
  public void initWebApp(JSONObject paramJSONObject)
  {
    JSONObject localJSONObject;
    if (isWebAppLoaded()) {
      localJSONObject = new JSONObject();
    }
    try
    {
      localJSONObject.put("campaignData", paramJSONObject);
      localJSONObject.put("platform", "android");
      paramJSONObject = UnityAdsDevice.getAdvertisingTrackingId();
      int i;
      if (paramJSONObject != null) {
        if (UnityAdsDevice.isLimitAdTrackingEnabled())
        {
          i = 0;
          localJSONObject.put("trackingEnabled", i);
          localJSONObject.put("advertisingTrackingId", UnityAdsUtils.Md5(paramJSONObject).toLowerCase());
          localJSONObject.put("rawAdvertisingTrackingId", paramJSONObject);
        }
      }
      for (;;)
      {
        localJSONObject.put("sdkVersion", "1405");
        localJSONObject.put("gameId", UnityAdsProperties.UNITY_ADS_GAME_ID);
        localJSONObject.put("screenDensity", UnityAdsDevice.getScreenDensity());
        localJSONObject.put("screenSize", UnityAdsDevice.getScreenSize());
        localJSONObject.put("zones", UnityAdsWebData.getZoneManager().getZonesJson());
        if ((UnityAdsProperties.UNITY_VERSION != null) && (UnityAdsProperties.UNITY_VERSION.length() > 0)) {
          localJSONObject.put("unityVersion", UnityAdsProperties.UNITY_VERSION);
        }
        localJSONObject.put("softwareVersion", UnityAdsDevice.getSoftwareVersion());
        localJSONObject.put("deviceType", UnityAdsDevice.getDeviceType());
        paramJSONObject = String.format("%s%s(%s);", new Object[] { "javascript:unityads.", "init", localJSONObject.toString() });
        UnityAdsDeviceLog.debug("Initializing WebView with JS call: " + paramJSONObject);
        UnityAdsUtils.runOnUiThread(new m(this, paramJSONObject, this));
        return;
        i = 1;
        break;
        if (!"unknown".equals(UnityAdsDevice.getAndroidId(false)))
        {
          localJSONObject.put("androidId", UnityAdsDevice.getAndroidId(true));
          localJSONObject.put("rawAndroidId", UnityAdsDevice.getAndroidId(false));
        }
      }
      return;
    }
    catch (Exception paramJSONObject)
    {
      UnityAdsDeviceLog.debug("Error creating webview init params");
    }
  }
  
  public boolean isWebAppLoaded()
  {
    return this.c;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    switch (paramInt)
    {
    default: 
      return false;
    }
    UnityAdsDeviceLog.entered();
    if (this.b != null) {
      this.b.onBackButtonClicked(this);
    }
    return true;
  }
  
  public void sendNativeEventToWebApp(String paramString, JSONObject paramJSONObject)
  {
    if (isWebAppLoaded())
    {
      String str = "{}";
      if (paramJSONObject != null) {
        str = paramJSONObject.toString();
      }
      paramString = String.format("%s%s(\"%s\", %s);", new Object[] { "javascript:unityads.", "handleNativeEvent", paramString, str });
      UnityAdsDeviceLog.debug("Send native event to WebApp: " + paramString);
      UnityAdsUtils.runOnUiThread(new m(this, paramString, this));
    }
  }
  
  public void setRenderMode(int paramInt)
  {
    try
    {
      View.class.getMethod("setLayerType", new Class[] { Integer.TYPE, Paint.class }).invoke(this, new Object[] { Integer.valueOf(paramInt), null });
      return;
    }
    catch (Exception localException)
    {
      UnityAdsDeviceLog.error("Could not invoke setLayerType");
    }
  }
  
  public void setWebViewCurrentView(String paramString)
  {
    setWebViewCurrentView(paramString, null);
  }
  
  public void setWebViewCurrentView(String paramString, JSONObject paramJSONObject)
  {
    String str;
    if (isWebAppLoaded())
    {
      str = "{}";
      if (paramJSONObject != null) {
        str = paramJSONObject.toString();
      }
      str = String.format("%s%s(\"%s\", %s);", new Object[] { "javascript:unityads.", "setView", paramString, str });
      this.e = paramString;
      UnityAdsUtils.runOnUiThread(new m(this, str, this));
      UnityAdsDeviceLog.debug("Send change view to WebApp: " + str);
      if ((paramJSONObject != null) && (UnityAdsProperties.getBaseActivity() != null)) {
        paramString = "test";
      }
    }
    try
    {
      str = paramJSONObject.getString("action");
      paramString = str;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    UnityAdsDeviceLog.debug("dataHasApiActionKey=" + paramJSONObject.has("action"));
    UnityAdsDeviceLog.debug("actionEqualsWebViewApiOpen=" + paramString.equals("open"));
    UnityAdsDeviceLog.debug("isDebuggable=" + UnityAdsUtils.isDebuggable(UnityAdsProperties.getBaseActivity()));
    UnityAdsDeviceLog.debug("runWebViewTests=" + UnityAdsProperties.RUN_WEBVIEW_TESTS);
    UnityAdsDeviceLog.debug("testJavaScriptContents=" + UnityAdsProperties.TEST_JAVASCRIPT);
    if ((paramJSONObject.has("action")) && (paramString != null) && (paramString.equals("open")) && (UnityAdsUtils.isDebuggable(UnityAdsProperties.getBaseActivity())) && (UnityAdsProperties.RUN_WEBVIEW_TESTS.booleanValue()) && (UnityAdsProperties.TEST_JAVASCRIPT != null))
    {
      UnityAdsDeviceLog.debug("Running test-javascript: " + UnityAdsProperties.TEST_JAVASCRIPT);
      UnityAdsUtils.runOnUiThread(new m(this, UnityAdsProperties.TEST_JAVASCRIPT, this));
      UnityAdsProperties.RUN_WEBVIEW_TESTS = Boolean.valueOf(false);
    }
  }
  
  private class UnityAdsJavascriptRunner
    implements Runnable
  {
    private String _jsString = null;
    private WebView _webView = null;
    
    public UnityAdsJavascriptRunner(String paramString, WebView paramWebView)
    {
      this._jsString = paramString;
      this._webView = paramWebView;
    }
    
    public void run()
    {
      if (this._jsString != null)
      {
        try
        {
          int i = Build.VERSION.SDK_INT;
          if (i >= 19) {
            try
            {
              WebView.class.getMethod("evaluateJavascript", new Class[] { String.class, ValueCallback.class }).invoke(this._webView, new Object[] { this._jsString, null });
              return;
            }
            catch (Exception localException1)
            {
              UnityAdsDeviceLog.error("Could not invoke evaluateJavascript");
              return;
            }
          }
          UnityAdsWebView.this.loadUrl(this._jsString);
        }
        catch (Exception localException2)
        {
          UnityAdsDeviceLog.error("Error while processing JavaScriptString!");
          return;
        }
        return;
      }
      UnityAdsDeviceLog.error("Could not process JavaScript, the string is NULL");
    }
  }
  
  private class UnityAdsViewChromeClient
    extends WebChromeClient
  {
    private UnityAdsViewChromeClient() {}
    
    public void onConsoleMessage(String paramString1, int paramInt, String paramString2)
    {
      String str = paramString2;
      Object localObject = null;
      try
      {
        paramString2 = new File(paramString2);
        if (paramString2 != null) {
          str = paramString2.getName();
        }
        UnityAdsDeviceLog.debug("JavaScript (sourceId=" + str + ", line=" + paramInt + "): " + paramString1);
        return;
      }
      catch (Exception paramString2)
      {
        for (;;)
        {
          UnityAdsDeviceLog.error("Could not handle sourceId: " + paramString2.getMessage());
          paramString2 = localObject;
        }
      }
    }
    
    public void onReachedMaxAppCacheSize(long paramLong1, long paramLong2, WebStorage.QuotaUpdater paramQuotaUpdater)
    {
      paramQuotaUpdater.updateQuota(2L * paramLong1);
    }
  }
  
  private class UnityAdsViewClient
    extends WebViewClient
  {
    private UnityAdsViewClient() {}
    
    public void onPageFinished(WebView paramWebView, String paramString)
    {
      super.onPageFinished(paramWebView, paramString);
      UnityAdsDeviceLog.debug("Finished url: " + paramString);
      if ((UnityAdsWebView.access$200(UnityAdsWebView.this) != null) && (!UnityAdsWebView.access$300(UnityAdsWebView.this)))
      {
        UnityAdsWebView.access$302(UnityAdsWebView.this, true);
        UnityAdsWebView.access$200(UnityAdsWebView.this).onWebAppLoaded();
      }
    }
    
    public void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
    {
      UnityAdsDeviceLog.error(paramInt + " (" + paramString2 + ") " + paramString1);
      super.onReceivedError(paramWebView, paramInt, paramString1, paramString2);
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      UnityAdsDeviceLog.debug("Trying to load url: " + paramString);
      return false;
    }
  }
}
