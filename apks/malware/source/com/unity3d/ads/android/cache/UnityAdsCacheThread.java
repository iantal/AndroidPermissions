package com.unity3d.ads.android.cache;

import android.os.Bundle;
import android.os.Looper;
import android.os.Message;
import com.unity3d.ads.android.UnityAdsDeviceLog;

class UnityAdsCacheThread
  extends Thread
{
  private static final int MSG_DOWNLOAD = 1;
  private static UnityAdsCacheThreadHandler _handler = null;
  private static boolean _ready = false;
  private static final Object _readyLock = new Object();
  
  UnityAdsCacheThread() {}
  
  public static void download(String paramString1, String paramString2)
  {
    try
    {
      if (!_ready) {
        init();
      }
      Bundle localBundle = new Bundle();
      localBundle.putString("source", paramString1);
      localBundle.putString("target", paramString2);
      paramString1 = new Message();
      paramString1.what = 1;
      paramString1.setData(localBundle);
      _handler.setStoppedStatus(false);
      _handler.sendMessage(paramString1);
      return;
    }
    finally {}
  }
  
  public static String getCurrentDownload()
  {
    if (!_ready) {
      return null;
    }
    return _handler.getCurrentDownload();
  }
  
  private static void init()
  {
    ??? = new UnityAdsCacheThread();
    ((UnityAdsCacheThread)???).setName("UnityAdsCacheThread");
    ((UnityAdsCacheThread)???).start();
    for (;;)
    {
      if (!_ready) {
        try
        {
          synchronized (_readyLock)
          {
            _readyLock.wait();
          }
        }
        catch (InterruptedException localInterruptedException)
        {
          UnityAdsDeviceLog.debug("Couldn't synchronize thread");
        }
      }
    }
  }
  
  public static void stopAllDownloads()
  {
    if (!_ready) {
      return;
    }
    _handler.removeMessages(1);
    _handler.setStoppedStatus(true);
  }
  
  public void run()
  {
    Looper.prepare();
    _handler = new UnityAdsCacheThreadHandler();
    _ready = true;
    synchronized (_readyLock)
    {
      _readyLock.notify();
      Looper.loop();
      return;
    }
  }
}
