package com.unity3d.ads.android.cache;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build.VERSION;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import com.unity3d.ads.android.properties.UnityAdsProperties;
import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

@TargetApi(9)
public class UnityAdsCache
{
  private static File _cacheDirectory = null;
  
  public UnityAdsCache() {}
  
  public static void cacheCampaign(UnityAdsCampaign paramUnityAdsCampaign)
  {
    String str1 = paramUnityAdsCampaign.getVideoFilename();
    if (isFileCached(str1, paramUnityAdsCampaign.getVideoFileExpectedSize())) {}
    String str2;
    do
    {
      return;
      str2 = UnityAdsCacheThread.getCurrentDownload();
    } while ((str2 != null) && (str2.equals(getFullFilename(str1))));
    UnityAdsCacheThread.download(paramUnityAdsCampaign.getVideoUrl(), getFullFilename(str1));
  }
  
  public static String getCacheDirectory()
  {
    if (_cacheDirectory != null) {
      return _cacheDirectory.getAbsolutePath();
    }
    return null;
  }
  
  private static String getFullFilename(String paramString)
  {
    return getCacheDirectory() + "/" + paramString;
  }
  
  public static void initialize(ArrayList<UnityAdsCampaign> paramArrayList)
  {
    if ((paramArrayList == null) || (paramArrayList.size() == 0)) {}
    for (;;)
    {
      return;
      UnityAdsDeviceLog.debug("Unity Ads cache: initializing cache with " + paramArrayList.size() + " campaigns");
      stopAllDownloads();
      Object localObject = new HashMap();
      HashMap localHashMap = new HashMap();
      int i = 1;
      paramArrayList = paramArrayList.iterator();
      if (paramArrayList.hasNext())
      {
        UnityAdsCampaign localUnityAdsCampaign = (UnityAdsCampaign)paramArrayList.next();
        String str;
        if ((localUnityAdsCampaign.forceCacheVideo().booleanValue()) || ((localUnityAdsCampaign.allowCacheVideo().booleanValue()) && (i != 0)))
        {
          str = localUnityAdsCampaign.getVideoFilename();
          if (isFileCached(str, localUnityAdsCampaign.getVideoFileExpectedSize())) {
            break label197;
          }
          UnityAdsDeviceLog.debug("Unity Ads cache: queuing " + str + " for download");
          ((HashMap)localObject).put(localUnityAdsCampaign.getVideoUrl(), str);
        }
        for (;;)
        {
          localHashMap.put(localUnityAdsCampaign.getVideoFilename(), Long.valueOf(localUnityAdsCampaign.getVideoFileExpectedSize()));
          i = 0;
          break;
          label197:
          UnityAdsDeviceLog.debug("Unity Ads cache: not downloading " + str + ", already in cache");
        }
      }
      initializeCacheDirectory(localHashMap);
      paramArrayList = ((HashMap)localObject).entrySet().iterator();
      while (paramArrayList.hasNext())
      {
        localObject = (Map.Entry)paramArrayList.next();
        UnityAdsCacheThread.download((String)((Map.Entry)localObject).getKey(), getFullFilename((String)((Map.Entry)localObject).getValue()));
      }
    }
  }
  
  private static void initializeCacheDirectory(HashMap<String, Long> paramHashMap)
  {
    _cacheDirectory = new File(UnityAdsProperties.APPLICATION_CONTEXT.getFilesDir().getPath());
    Object localObject1;
    if (Build.VERSION.SDK_INT > 18)
    {
      localObject1 = UnityAdsProperties.APPLICATION_CONTEXT.getExternalCacheDir();
      if (localObject1 != null)
      {
        _cacheDirectory = new File(((File)localObject1).getAbsolutePath(), "UnityAdsVideoCache");
        if (_cacheDirectory.mkdirs()) {
          UnityAdsDeviceLog.debug("Successfully created cache");
        }
      }
    }
    UnityAdsDeviceLog.debug("Unity Ads cache: using " + _cacheDirectory.getAbsolutePath() + " as cache");
    if (!_cacheDirectory.isDirectory())
    {
      UnityAdsDeviceLog.error("Unity Ads cache: Creating cache dir failed");
      return;
    }
    paramHashMap.put("UnityAds-pendingrequests.dat", Long.valueOf(-1L));
    label180:
    int i;
    label186:
    Object localObject2;
    String str;
    if (_cacheDirectory.getAbsolutePath().endsWith("UnityAdsVideoCache"))
    {
      UnityAdsDeviceLog.debug("Unity Ads cache: checking cache directory " + _cacheDirectory.getAbsolutePath());
      localObject1 = _cacheDirectory.listFiles();
      int j = localObject1.length;
      i = 0;
      if (i < j)
      {
        localObject2 = localObject1[i];
        str = localObject2.getName();
        if (paramHashMap.containsKey(str)) {
          break label309;
        }
        UnityAdsDeviceLog.debug("Unity Ads cache: " + str + " not found in ad plan, deleting from cache");
        if (!localObject2.delete()) {
          UnityAdsDeviceLog.debug("Unity Ads cache: Couldn't delete file: " + localObject2.getAbsolutePath());
        }
      }
    }
    for (;;)
    {
      i += 1;
      break label186;
      break;
      UnityAdsDeviceLog.debug("Unity Ads cache: checking app directory for Unity Ads cached files");
      localObject1 = new FilenameFilter()
      {
        public boolean accept(File paramAnonymousFile, String paramAnonymousString)
        {
          boolean bool = paramAnonymousString.startsWith("UnityAds-");
          UnityAdsDeviceLog.debug("Unity Ads cache: filtering result for file: " + paramAnonymousString + ", " + bool);
          return bool;
        }
      };
      localObject1 = _cacheDirectory.listFiles((FilenameFilter)localObject1);
      break label180;
      label309:
      long l = ((Long)paramHashMap.get(str)).longValue();
      if (l != -1L) {
        if (localObject2.length() != l)
        {
          UnityAdsDeviceLog.debug("Unity Ads cache: " + str + " file size mismatch, deleting from cache");
          if (!localObject2.delete()) {
            UnityAdsDeviceLog.debug("Unity Ads cache: Couldn't delete file: " + localObject2.getAbsolutePath());
          }
        }
        else
        {
          UnityAdsDeviceLog.debug("Unity Ads cache: " + str + " found, keeping");
        }
      }
    }
  }
  
  public static boolean isCampaignCached(UnityAdsCampaign paramUnityAdsCampaign)
  {
    return isFileCached(paramUnityAdsCampaign.getVideoFilename(), paramUnityAdsCampaign.getVideoFileExpectedSize());
  }
  
  private static boolean isFileCached(String paramString, long paramLong)
  {
    paramString = new File(getCacheDirectory() + "/" + paramString);
    return (paramString.exists()) && ((paramLong == -1L) || (paramString.length() == paramLong));
  }
  
  public static void stopAllDownloads() {}
}
