package com.unity3d.ads.android.cache;

import android.os.AsyncTask;
import android.os.SystemClock;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;

final class b
  extends AsyncTask
{
  private URL a = null;
  private InputStream b = null;
  private OutputStream c = null;
  private URLConnection d = null;
  private boolean e = false;
  private UnityAdsCampaign f = null;
  
  public b(UnityAdsCampaign paramUnityAdsCampaign)
  {
    this.f = paramUnityAdsCampaign;
  }
  
  private String a(String... paramVarArgs)
  {
    long l2 = SystemClock.elapsedRealtime();
    long l1;
    do
    {
      for (;;)
      {
        try
        {
          this.a = new URL(paramVarArgs[0]);
          paramVarArgs = UnityAdsDownloader.a(this.f.getVideoFilename());
          if (paramVarArgs == null)
          {
            onCancelled();
            return null;
          }
        }
        catch (Exception paramVarArgs)
        {
          UnityAdsDeviceLog.error("Problems with url: " + paramVarArgs.getMessage());
          onCancelled();
          return null;
        }
        this.c = new BufferedOutputStream(paramVarArgs);
        try
        {
          this.d = this.a.openConnection();
          this.d.setConnectTimeout(10000);
          this.d.setReadTimeout(10000);
          this.d.connect();
          if (this.d == null) {}
        }
        catch (Exception paramVarArgs)
        {
          try
          {
            this.b = new BufferedInputStream(this.d.getInputStream());
            paramVarArgs = new byte['á€€'];
            l1 = 0L;
            try
            {
              boolean bool;
              do
              {
                int i = this.b.read(paramVarArgs);
                if (i == -1) {
                  break;
                }
                l1 += i;
                this.c.write(paramVarArgs, 0, i);
                bool = this.e;
              } while (!bool);
              return null;
            }
            catch (Exception paramVarArgs)
            {
              UnityAdsDeviceLog.error("Problems downloading file: " + paramVarArgs.getMessage());
              b();
              UnityAdsDownloader.a();
              return null;
            }
            paramVarArgs = paramVarArgs;
            UnityAdsDeviceLog.error("Problems opening connection: " + paramVarArgs.getMessage());
          }
          catch (Exception paramVarArgs)
          {
            for (;;)
            {
              UnityAdsDeviceLog.error("Problems opening stream: " + paramVarArgs.getMessage());
            }
          }
        }
      }
      a();
      l2 = SystemClock.elapsedRealtime() - l2;
      UnityAdsDeviceLog.debug("File: " + this.f.getVideoFilename() + " of " + l1 + " bytes downloaded in " + l2 + "ms");
    } while ((l2 <= 0L) || (l1 <= 0L));
    com.unity3d.ads.android.properties.UnityAdsProperties.CACHING_SPEED = l1 / l2;
    return null;
  }
  
  private void a()
  {
    try
    {
      this.c.flush();
      this.c.close();
      this.b.close();
      return;
    }
    catch (Exception localException)
    {
      UnityAdsDeviceLog.error("Problems closing connection: " + localException.getMessage());
    }
  }
  
  private void b()
  {
    String str = "ERROR";
    if (this.a != null) {
      str = this.a.toString();
    }
    UnityAdsDeviceLog.debug("Download cancelled for: " + str);
    a();
    UnityAdsUtils.removeFile(this.f.getVideoFilename());
    UnityAdsDownloader.a(this.f);
    UnityAdsDownloader.a(this);
    UnityAdsDownloader.a(c.DownloadCancelled, str);
  }
  
  protected final void onCancelled()
  {
    UnityAdsDeviceLog.entered();
    this.e = true;
    b();
  }
  
  protected final void onPreExecute()
  {
    super.onPreExecute();
  }
}
