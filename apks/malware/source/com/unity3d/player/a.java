package com.unity3d.player;

import android.graphics.ImageFormat;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.Build.VERSION;
import java.util.Iterator;
import java.util.List;

final class a
{
  private Camera a = null;
  private byte[] b = null;
  private int c = 0;
  private int d = 0;
  private int e = 0;
  private int f = -1;
  private int g;
  private int h;
  private int i;
  
  a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int j = paramInt2;
    if (paramInt2 == 0) {
      j = 640;
    }
    paramInt2 = paramInt3;
    if (paramInt3 == 0) {
      paramInt2 = 480;
    }
    paramInt3 = paramInt4;
    if (paramInt4 == 0) {
      paramInt3 = 24;
    }
    this.f = paramInt1;
    this.i = paramInt3;
    this.g = j;
    this.h = paramInt2;
    g();
    h();
  }
  
  private void g()
  {
    if (Build.VERSION.SDK_INT < 9)
    {
      this.a = Camera.open();
      return;
    }
    this.a = Camera.open(this.f);
  }
  
  private void h()
  {
    Camera.Parameters localParameters = this.a.getParameters();
    int j = this.g;
    int k = this.h;
    Object localObject2 = localParameters.getSupportedPreviewSizes();
    Object localObject1 = (Camera.Size)((List)localObject2).get(0);
    float f3 = j / k;
    int m = ((Camera.Size)localObject1).width;
    int n = ((Camera.Size)localObject1).height;
    float f1 = Math.abs(f3 - m / n);
    m = j * k;
    j = Math.abs(m - ((Camera.Size)localObject1).width * ((Camera.Size)localObject1).height);
    Object localObject3 = ((List)localObject2).iterator();
    while (((Iterator)localObject3).hasNext())
    {
      localObject2 = (Camera.Size)((Iterator)localObject3).next();
      k = ((Camera.Size)localObject2).width;
      n = ((Camera.Size)localObject2).height;
      float f2 = Math.abs(f3 - k / n);
      if (f2 < f1)
      {
        f1 = f2;
        localObject1 = localObject2;
      }
      else
      {
        k = Math.abs(m - ((Camera.Size)localObject2).width * ((Camera.Size)localObject2).height);
        if (k >= j) {
          break label745;
        }
        j = k;
        localObject1 = localObject2;
      }
    }
    label361:
    label480:
    label599:
    label727:
    label730:
    label745:
    for (;;)
    {
      break;
      localParameters.setPreviewSize(((Camera.Size)localObject1).width, ((Camera.Size)localObject1).height);
      if (Build.VERSION.SDK_INT < 9)
      {
        int i1 = this.i;
        localObject2 = localParameters.getSupportedPreviewFrameRates();
        if (localObject2 != null)
        {
          j = ((Integer)((List)localObject2).get(0)).intValue();
          k = Math.abs(j - i1);
          localObject2 = ((List)localObject2).iterator();
          m = j;
          if (!((Iterator)localObject2).hasNext()) {
            break label361;
          }
          n = ((Integer)((Iterator)localObject2).next()).intValue();
          m = Math.abs(n - i1);
          if (m >= k) {
            break label730;
          }
          k = n;
          j = m;
        }
      }
      for (;;)
      {
        m = k;
        k = j;
        j = m;
        break;
        m = 24;
        localParameters.setPreviewFrameRate(m);
        localObject2 = String.format("%d", new Object[] { Integer.valueOf(m) });
        this.a.setParameters(localParameters);
        j = localParameters.getPreviewFormat();
        this.d = ((Camera.Size)localObject1).height;
        this.e = ((Camera.Size)localObject1).width;
        if (Build.VERSION.SDK_INT >= 8)
        {
          k = ImageFormat.getBitsPerPixel(j);
          m = ((Camera.Size)localObject1).width;
          this.c = (((Camera.Size)localObject1).height * m * k / 8);
          localObject1 = String.format(", bpp=%d", new Object[] { Integer.valueOf(k) });
          f.Log(3, String.format("cam[%d]: size = %dx%d; format=%d, fps=%s%s", new Object[] { Integer.valueOf(this.f), Integer.valueOf(this.e), Integer.valueOf(this.d), Integer.valueOf(j), localObject2, localObject1 }));
          return;
          k = this.i * 1000;
          localObject3 = localParameters.getSupportedPreviewFpsRange();
          localObject2 = (int[])((List)localObject3).get(0);
          j = k - localObject2[0] + (localObject2[1] - k);
          Iterator localIterator = ((List)localObject3).iterator();
          if (localIterator.hasNext())
          {
            localObject3 = (int[])localIterator.next();
            if (k - localObject3[0] + (localObject3[1] - k) >= j) {
              break label727;
            }
            j = localObject3[0];
            m = localObject3[1];
            localObject2 = localObject3;
            j = k - j + (m - k);
          }
        }
        for (;;)
        {
          break label599;
          localParameters.setPreviewFpsRange(localObject2[0], localObject2[1]);
          localObject2 = String.format("(%d, %d)", new Object[] { Integer.valueOf(localObject2[0]), Integer.valueOf(localObject2[1]) });
          break;
          localObject1 = "";
          break label480;
        }
        m = j;
        j = k;
        k = m;
      }
    }
  }
  
  final Camera a()
  {
    return this.a;
  }
  
  public final void a(Camera.PreviewCallback paramPreviewCallback)
  {
    if (Build.VERSION.SDK_INT < 8)
    {
      this.a.setPreviewCallback(paramPreviewCallback);
      return;
    }
    this.a.addCallbackBuffer(b());
    this.a.setPreviewCallbackWithBuffer(paramPreviewCallback);
  }
  
  final void b(Camera.PreviewCallback paramPreviewCallback)
  {
    g();
    h();
    a(paramPreviewCallback);
    this.a.startPreview();
  }
  
  final byte[] b()
  {
    if (this.b == null) {
      this.b = new byte[this.c];
    }
    return this.b;
  }
  
  final int c()
  {
    return this.e;
  }
  
  final int d()
  {
    return this.d;
  }
  
  final int e()
  {
    return this.f;
  }
  
  final void f()
  {
    this.a.stopPreview();
    if (Build.VERSION.SDK_INT < 8) {
      this.a.setPreviewCallback(null);
    }
    for (;;)
    {
      this.a.release();
      return;
      this.a.setPreviewCallbackWithBuffer(null);
    }
  }
}
