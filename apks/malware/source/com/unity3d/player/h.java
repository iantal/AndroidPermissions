package com.unity3d.player;

import android.content.Context;
import android.hardware.GeomagneticField;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.os.Bundle;
import android.view.Display;
import android.view.WindowManager;
import java.util.Iterator;
import java.util.List;

final class h
  implements SensorEventListener, LocationListener
{
  private static final int[] d = { 1, 1, 0, 1, -1, 1, 1, 0, -1, -1, 0, 1, 1, -1, 1, 0 };
  private Runnable A = new i(this);
  private Runnable B = new j(this);
  private Runnable C = new k(this);
  private Runnable D = new l(this);
  private Runnable E = new m(this);
  private float[] F = new float[5];
  private double G;
  private Runnable H = new n(this);
  private float[] I = new float[9];
  private float[] J = new float[3];
  private int K;
  private Runnable L = new o(this);
  private Location M;
  private float N = 0.0F;
  private boolean O = false;
  private int P = 0;
  private boolean Q = false;
  private int R = 0;
  private final Context a;
  private final UnityPlayer b;
  private final WindowManager c;
  private float[] e = new float[3];
  private float[] f = new float[3];
  private float g;
  private float h;
  private float i;
  private long j;
  private float k;
  private float l;
  private float m;
  private long n;
  private float o;
  private float p;
  private float q;
  private long r;
  private float s;
  private float t;
  private float u;
  private long v;
  private float w;
  private float x;
  private float y;
  private float z;
  
  protected h(Context paramContext, UnityPlayer paramUnityPlayer)
  {
    this.a = paramContext;
    this.b = paramUnityPlayer;
    this.c = ((WindowManager)this.a.getSystemService("window"));
  }
  
  private void a(Location paramLocation)
  {
    int i7 = 1;
    if (paramLocation == null) {
      return;
    }
    Object localObject = this.M;
    int i4;
    if (localObject == null) {
      i4 = i7;
    }
    label23:
    int i2;
    label92:
    int i3;
    label104:
    int i1;
    label113:
    label146:
    label154:
    int i5;
    label165:
    int i6;
    label177:
    String str;
    boolean bool;
    for (;;)
    {
      if (i4 != 0)
      {
        this.M = paramLocation;
        this.b.nativeSetLocation((float)paramLocation.getLatitude(), (float)paramLocation.getLongitude(), (float)paramLocation.getAltitude(), paramLocation.getAccuracy(), paramLocation.getTime() / 1000.0D);
        return;
        long l1 = paramLocation.getTime() - ((Location)localObject).getTime();
        if (l1 <= 120000L) {
          break label251;
        }
        i2 = 1;
        if (l1 >= -120000L) {
          break label256;
        }
        i3 = 1;
        if (l1 <= 0L) {
          break label262;
        }
        i1 = 1;
        i4 = i7;
        if (i2 == 0) {
          if (i3 == 0)
          {
            i4 = (int)(paramLocation.getAccuracy() - ((Location)localObject).getAccuracy());
            if (i4 <= 0) {
              break label267;
            }
            i2 = 1;
            if (i4 >= 0) {
              break label272;
            }
            i3 = 1;
            if (i4 <= 200) {
              break label278;
            }
            i5 = 1;
            if (paramLocation.getAccuracy() != 0.0F) {
              break label284;
            }
            i6 = 1;
            str = paramLocation.getProvider();
            localObject = ((Location)localObject).getProvider();
            if (str != null) {
              break label296;
            }
            if (localObject != null) {
              break label290;
            }
            bool = true;
          }
        }
      }
    }
    for (;;)
    {
      i4 = i7;
      if (i3 != 0) {
        break label23;
      }
      if (i1 != 0)
      {
        i4 = i7;
        if (i2 == 0) {
          break label23;
        }
      }
      if ((i1 != 0) && ((i6 | i5) == 0))
      {
        i4 = i7;
        if (bool) {
          break label23;
        }
      }
      i4 = 0;
      break label23;
      break;
      label251:
      i2 = 0;
      break label92;
      label256:
      i3 = 0;
      break label104;
      label262:
      i1 = 0;
      break label113;
      label267:
      i2 = 0;
      break label146;
      label272:
      i3 = 0;
      break label154;
      label278:
      i5 = 0;
      break label165;
      label284:
      i6 = 0;
      break label177;
      label290:
      bool = false;
      continue;
      label296:
      bool = str.equals(localObject);
    }
  }
  
  public final void a(float paramFloat)
  {
    this.N = paramFloat;
  }
  
  public final boolean a()
  {
    return !((LocationManager)this.a.getSystemService("location")).getProviders(new Criteria(), true).isEmpty();
  }
  
  public final void b()
  {
    this.Q = false;
    if (this.O)
    {
      f.Log(5, "Location_StartUpdatingLocation already started!");
      return;
    }
    if (!a())
    {
      this.R = 3;
      this.b.nativeSetLocationStatus(3);
      return;
    }
    LocationManager localLocationManager = (LocationManager)this.a.getSystemService("location");
    this.R = 1;
    this.b.nativeSetLocationStatus(1);
    Object localObject1 = localLocationManager.getProviders(true);
    if (((List)localObject1).isEmpty())
    {
      this.R = 3;
      this.b.nativeSetLocationStatus(3);
      return;
    }
    Object localObject2;
    LocationProvider localLocationProvider;
    if (this.P == 2)
    {
      localObject2 = ((List)localObject1).iterator();
      do
      {
        if (!((Iterator)localObject2).hasNext()) {
          break;
        }
        localLocationProvider = localLocationManager.getProvider((String)((Iterator)localObject2).next());
      } while (localLocationProvider.getAccuracy() != 2);
    }
    for (;;)
    {
      localObject1 = ((List)localObject1).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (String)((Iterator)localObject1).next();
        if ((localLocationProvider == null) || (localLocationManager.getProvider((String)localObject2).getAccuracy() != 1))
        {
          a(localLocationManager.getLastKnownLocation((String)localObject2));
          localLocationManager.requestLocationUpdates((String)localObject2, 0L, this.N, this, this.a.getMainLooper());
          this.O = true;
        }
      }
      break;
      localLocationProvider = null;
    }
  }
  
  public final void b(float paramFloat)
  {
    if (paramFloat < 100.0F)
    {
      this.P = 1;
      return;
    }
    if (paramFloat < 500.0F)
    {
      this.P = 1;
      return;
    }
    this.P = 2;
  }
  
  public final void c()
  {
    ((LocationManager)this.a.getSystemService("location")).removeUpdates(this);
    this.O = false;
    this.M = null;
    this.R = 0;
    this.b.nativeSetLocationStatus(0);
  }
  
  public final void d()
  {
    if ((this.R == 1) || (this.R == 2))
    {
      this.Q = true;
      c();
    }
  }
  
  public final void e()
  {
    if (this.Q) {
      b();
    }
  }
  
  public final void onAccuracyChanged(Sensor paramSensor, int paramInt) {}
  
  public final void onLocationChanged(Location paramLocation)
  {
    this.R = 2;
    this.b.nativeSetLocationStatus(2);
    a(paramLocation);
  }
  
  public final void onProviderDisabled(String paramString)
  {
    this.M = null;
  }
  
  public final void onProviderEnabled(String paramString) {}
  
  public final void onSensorChanged(SensorEvent paramSensorEvent)
  {
    int i1 = this.c.getDefaultDisplay().getOrientation();
    int i3 = i1 - 1 & 0x3;
    float f1 = d[(i3 * 4 + 0)];
    float f2 = d[(i3 * 4 + 1)];
    int i2 = d[(i3 * 4 + 2)];
    i3 = d[(i3 * 4 + 3)];
    float f3;
    float f4;
    switch (paramSensorEvent.sensor.getType())
    {
    case 3: 
    case 5: 
    case 6: 
    case 7: 
    case 8: 
    default: 
      return;
    case 1: 
      this.e = ((float[])paramSensorEvent.values.clone());
      i2 = this.c.getDefaultDisplay().getOrientation();
      i3 = i2 - 1 & 0x3;
      f1 = d[(i3 * 4 + 0)];
      f2 = d[(i3 * 4 + 1)];
      i1 = d[(i3 * 4 + 2)];
      i3 = d[(i3 * 4 + 3)];
      this.g = (f1 * -0.10197162F * paramSensorEvent.values[i1]);
      this.h = (paramSensorEvent.values[i3] * (f2 * -0.10197162F));
      this.i = (paramSensorEvent.values[2] * -0.10197162F);
      this.j = paramSensorEvent.timestamp;
      this.b.queueEvent(this.A);
      f2 = paramSensorEvent.values[0];
      f1 = paramSensorEvent.values[1];
      f3 = paramSensorEvent.values[2];
      f4 = 1.0F / (float)Math.sqrt(f2 * f2 + f1 * f1 + f3 * f3);
      f2 *= f4;
      f1 *= f4;
      f4 = f3 * f4;
      i1 = this.b.getOrientation();
      if (i1 == 1) {
        i1 = 0;
      }
      break;
    }
    for (;;)
    {
      label367:
      i1 = i2 - i1 & 0x3;
      if (i1 == 1) {}
      for (;;)
      {
        label382:
        if (-1.0F < f2)
        {
          i1 = 1;
          f3 = f2;
        }
        for (;;)
        {
          if (f3 < -f2)
          {
            f3 = -f2;
            i1 = 2;
          }
          for (;;)
          {
            f2 = f3;
            if (f3 < f1)
            {
              i1 = 3;
              f2 = f1;
            }
            f3 = f2;
            if (f2 < -f1)
            {
              f3 = -f1;
              i1 = 4;
            }
            f1 = f3;
            if (f3 < f4)
            {
              i1 = 5;
              f1 = f4;
            }
            f2 = f1;
            if (f1 < -f4)
            {
              f2 = -f4;
              i1 = 6;
            }
            if (f2 < 0.5D * Math.sqrt(3.0D)) {
              i1 = 0;
            }
            this.K = i1;
            this.b.queueEvent(this.L);
            return;
            if (i1 == 0)
            {
              i1 = 1;
              break label367;
            }
            if (i1 == 9)
            {
              i1 = 2;
              break label367;
            }
            if (i1 != 8) {
              break label1217;
            }
            i1 = 3;
            break label367;
            if (i1 != 3) {
              break label1206;
            }
            f2 = -f2;
            break label382;
            this.f = ((float[])paramSensorEvent.values.clone());
            this.G = (System.currentTimeMillis() / 1000.0D);
            if (!SensorManager.getRotationMatrix(this.I, null, this.e, this.f)) {
              break;
            }
            SensorManager.getOrientation(this.I, this.J);
            f1 = (float)Math.toDegrees(this.J[0]);
            switch (i1)
            {
            }
            while (f1 >= 360.0F)
            {
              f1 -= 360.0F;
              continue;
              this.k = (paramSensorEvent.values[i2] * f1);
              this.l = (paramSensorEvent.values[i3] * f2);
              this.m = paramSensorEvent.values[2];
              this.n = paramSensorEvent.timestamp;
              this.b.queueEvent(this.B);
              return;
              this.o = (f1 * -0.10197162F * paramSensorEvent.values[i2]);
              this.p = (paramSensorEvent.values[i3] * (f2 * -0.10197162F));
              this.q = (paramSensorEvent.values[2] * -0.10197162F);
              this.r = paramSensorEvent.timestamp;
              this.b.queueEvent(this.C);
              return;
              this.s = (f1 * -0.10197162F * paramSensorEvent.values[i2]);
              this.t = (paramSensorEvent.values[i3] * (f2 * -0.10197162F));
              this.u = (paramSensorEvent.values[2] * -0.10197162F);
              this.v = paramSensorEvent.timestamp;
              this.b.queueEvent(this.D);
              return;
              this.x = paramSensorEvent.values[0];
              this.y = paramSensorEvent.values[1];
              this.z = paramSensorEvent.values[2];
              if (paramSensorEvent.values.length == 4) {
                f1 = paramSensorEvent.values[3];
              }
              for (;;)
              {
                this.w = f1;
                this.b.queueEvent(this.E);
                return;
                f1 = this.x * this.x + this.y * this.y + this.z * this.z;
                if (f1 < 1.0F) {
                  f1 = (float)Math.sqrt(1.0F - f1);
                } else {
                  f1 = 0.0F;
                }
              }
              f1 += 90.0F;
              continue;
              f1 += 180.0F;
              continue;
              f1 += 270.0F;
            }
            if (f1 < 0.0F) {
              f1 += 360.0F;
            }
            for (;;)
            {
              this.F[0] = this.f[0];
              this.F[1] = this.f[1];
              this.F[2] = this.f[2];
              this.F[3] = f1;
              if ((this.M != null) && (System.currentTimeMillis() - this.M.getTime() < 1200000L)) {
                f1 += new GeomagneticField((float)this.M.getLatitude(), (float)this.M.getLongitude(), (float)this.M.getAltitude(), this.M.getTime()).getDeclination();
              }
              for (;;)
              {
                if (f1 >= 360.0F)
                {
                  f1 -= 360.0F;
                }
                else
                {
                  f2 = f1;
                  if (f1 < 0.0F) {
                    f2 = f1 + 360.0F;
                  }
                  this.F[4] = f2;
                  this.b.queueEvent(this.H);
                  return;
                }
              }
            }
          }
          f3 = -1.0F;
          i1 = 0;
        }
        label1206:
        f3 = f1;
        f1 = f2;
        f2 = f3;
      }
      label1217:
      i1 = 0;
    }
  }
  
  public final void onStatusChanged(String paramString, int paramInt, Bundle paramBundle) {}
}
