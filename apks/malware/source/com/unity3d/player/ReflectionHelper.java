package com.unity3d.player;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Iterator;

class ReflectionHelper
{
  ReflectionHelper() {}
  
  private static float a(Class paramClass1, Class paramClass2)
  {
    if (paramClass1.equals(paramClass2)) {
      return 1.0F;
    }
    if ((!paramClass1.isPrimitive()) && (!paramClass2.isPrimitive())) {
      try
      {
        Class localClass = paramClass1.asSubclass(paramClass2);
        if (localClass != null) {
          return 0.5F;
        }
      }
      catch (ClassCastException localClassCastException)
      {
        try
        {
          paramClass1 = paramClass2.asSubclass(paramClass1);
          if (paramClass1 != null) {
            return 0.1F;
          }
        }
        catch (ClassCastException paramClass1) {}
      }
    }
    return 0.0F;
  }
  
  private static float a(Class paramClass, Class[] paramArrayOfClass1, Class[] paramArrayOfClass2)
  {
    int j = 0;
    if (paramArrayOfClass2.length == 0) {
      return 0.1F;
    }
    if (paramArrayOfClass1 == null) {}
    for (int i = 0; i + 1 != paramArrayOfClass2.length; i = paramArrayOfClass1.length) {
      return 0.0F;
    }
    float f1 = 1.0F;
    float f2 = f1;
    if (paramArrayOfClass1 != null)
    {
      int k = paramArrayOfClass1.length;
      i = 0;
      for (;;)
      {
        f2 = f1;
        if (j >= k) {
          break;
        }
        f1 *= a(paramArrayOfClass1[j], paramArrayOfClass2[i]);
        j += 1;
        i += 1;
      }
    }
    return f2 * a(paramClass, paramArrayOfClass2[(paramArrayOfClass2.length - 1)]);
  }
  
  private static Class a(String paramString, int[] paramArrayOfInt)
  {
    while (paramArrayOfInt[0] < paramString.length())
    {
      int i = paramArrayOfInt[0];
      paramArrayOfInt[0] = (i + 1);
      char c = paramString.charAt(i);
      if ((c != '(') && (c != ')')) {
        if (c == 'L')
        {
          i = paramString.indexOf(';', paramArrayOfInt[0]);
          if (i == -1) {
            break;
          }
          paramString = paramString.substring(paramArrayOfInt[0], i);
          paramArrayOfInt[0] = (i + 1);
          paramString = paramString.replace('/', '.');
        }
      }
      try
      {
        paramString = Class.forName(paramString);
        return paramString;
      }
      catch (ClassNotFoundException paramString)
      {
        for (;;) {}
      }
      if (c == 'Z') {
        return Boolean.TYPE;
      }
      if (c == 'I') {
        return Integer.TYPE;
      }
      if (c == 'F') {
        return Float.TYPE;
      }
      if (c == 'V') {
        return Void.TYPE;
      }
      if (c == 'B') {
        return Byte.TYPE;
      }
      if (c == 'S') {
        return Short.TYPE;
      }
      if (c == 'J') {
        return Long.TYPE;
      }
      if (c == 'D') {
        return Double.TYPE;
      }
      if (c == '[') {
        return Array.newInstance(a(paramString, paramArrayOfInt), 0).getClass();
      }
      f.Log(5, "parseType; " + c + " is not known!");
    }
    return null;
  }
  
  private static Class[] a(String paramString)
  {
    int[] arrayOfInt = new int[1];
    arrayOfInt[0] = 0;
    Object localObject = new ArrayList();
    while (arrayOfInt[0] < paramString.length())
    {
      Class localClass = a(paramString, arrayOfInt);
      if (localClass == null) {
        break;
      }
      ((ArrayList)localObject).add(localClass);
    }
    paramString = new Class[((ArrayList)localObject).size()];
    localObject = ((ArrayList)localObject).iterator();
    int i = 0;
    while (((Iterator)localObject).hasNext())
    {
      paramString[i] = ((Class)((Iterator)localObject).next());
      i += 1;
    }
    return paramString;
  }
  
  protected static Constructor getConstructorID(Class paramClass, String paramString)
  {
    Class[] arrayOfClass = a(paramString);
    Object localObject = null;
    float f1 = 0.0F;
    Constructor[] arrayOfConstructor = paramClass.getConstructors();
    int j = arrayOfConstructor.length;
    int i = 0;
    if (i < j)
    {
      Constructor localConstructor = arrayOfConstructor[i];
      float f2 = a(Void.TYPE, localConstructor.getParameterTypes(), arrayOfClass);
      if (f2 <= f1) {
        break label133;
      }
      localObject = localConstructor;
      if (f2 != 1.0F)
      {
        localObject = localConstructor;
        f1 = f2;
      }
    }
    label133:
    for (;;)
    {
      i += 1;
      break;
      if (localObject == null) {
        f.Log(6, "getConstructorID(\"" + paramClass.getName() + "\", \"" + paramString + "\") FAILED!");
      }
      return localObject;
    }
  }
  
  protected static Field getFieldID(Class paramClass, String paramString1, String paramString2, boolean paramBoolean)
  {
    Class[] arrayOfClass = a(paramString2);
    float f1 = 0.0F;
    Class localClass2 = null;
    Class localClass1 = paramClass;
    paramClass = localClass2;
    localClass2 = paramClass;
    if (localClass1 != null)
    {
      Field[] arrayOfField = localClass1.getDeclaredFields();
      int j = arrayOfField.length;
      int i = 0;
      for (;;)
      {
        if (i < j)
        {
          localClass2 = arrayOfField[i];
          if ((paramBoolean == Modifier.isStatic(localClass2.getModifiers())) && (localClass2.getName().compareTo(paramString1) == 0))
          {
            float f2 = a(localClass2.getType(), null, arrayOfClass);
            if (f2 > f1)
            {
              if (f2 != 1.0F)
              {
                paramClass = localClass2;
                f1 = f2;
                label114:
                i += 1;
                continue;
              }
              f1 = f2;
              paramClass = localClass2;
            }
          }
        }
      }
    }
    for (;;)
    {
      localClass2 = paramClass;
      if (f1 != 1.0F)
      {
        localClass2 = paramClass;
        if (!localClass1.isPrimitive())
        {
          localClass2 = paramClass;
          if (!localClass1.isInterface())
          {
            localClass2 = paramClass;
            if (!localClass1.equals(Object.class))
            {
              localClass2 = paramClass;
              if (!localClass1.equals(Void.TYPE))
              {
                localClass1 = localClass1.getSuperclass();
                break;
              }
            }
          }
        }
      }
      if (localClass2 == null) {
        f.Log(6, "getFieldID(\"" + paramString1 + "\", \"" + paramString2 + "\") FAILED!");
      }
      return localClass2;
      break label114;
    }
  }
  
  protected static Method getMethodID(Class paramClass, String paramString1, String paramString2, boolean paramBoolean)
  {
    Class[] arrayOfClass = a(paramString2);
    Class localClass2 = null;
    float f1 = 0.0F;
    Class localClass1 = paramClass;
    paramClass = localClass2;
    localClass2 = paramClass;
    if (localClass1 != null)
    {
      Method[] arrayOfMethod = localClass1.getDeclaredMethods();
      int j = arrayOfMethod.length;
      int i = 0;
      for (;;)
      {
        if (i < j)
        {
          localClass2 = arrayOfMethod[i];
          if ((paramBoolean == Modifier.isStatic(localClass2.getModifiers())) && (localClass2.getName().compareTo(paramString1) == 0))
          {
            float f2 = a(localClass2.getReturnType(), localClass2.getParameterTypes(), arrayOfClass);
            if (f2 > f1)
            {
              if (f2 != 1.0F)
              {
                paramClass = localClass2;
                f1 = f2;
                label118:
                i += 1;
                continue;
              }
              f1 = f2;
              paramClass = localClass2;
            }
          }
        }
      }
    }
    for (;;)
    {
      localClass2 = paramClass;
      if (f1 != 1.0F)
      {
        localClass2 = paramClass;
        if (!localClass1.isPrimitive())
        {
          localClass2 = paramClass;
          if (!localClass1.isInterface())
          {
            localClass2 = paramClass;
            if (!localClass1.equals(Object.class))
            {
              localClass2 = paramClass;
              if (!localClass1.equals(Void.TYPE))
              {
                localClass1 = localClass1.getSuperclass();
                break;
              }
            }
          }
        }
      }
      if (localClass2 == null) {
        f.Log(6, "getMethodID(\"" + paramString1 + "\", \"" + paramString2 + "\") FAILED!");
      }
      return localClass2;
      break label118;
    }
  }
}
