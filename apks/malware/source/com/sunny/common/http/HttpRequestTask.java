package com.sunny.common.http;

import android.net.Uri;
import android.os.AsyncTask;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import org.json.JSONException;
import org.json.JSONObject;

public class HttpRequestTask
  extends AsyncTask
{
  public static final int GET = 0;
  public static final int POST = 1;
  private static final String bh = "{'status':10000,'result':{'errormsg':'连接超时，你当前的网络环境可能比较慢，请稍后重试'}}";
  private static final String bi = "{'status':10000,'result':{'errormsg':'你当前的网络未连接或比较慢，请稍后重试'}}";
  private static final String bj = "{'status':10000,'result':{'errormsg':'您的请求被运营商跳转了，请稍后重试'}}";
  private static final String bk = "{'status':10000,'result':{'errormsg':'喜欢的人太多了，一下招呼不过来，请稍后重试'}}";
  private static final String bl = "{'status':10000,'result':{'errormsg':'貌似服务器有点问题了，请稍后重试'}}";
  private static final String bm = "{'status':10000,'result':{'errormsg':'喜欢的人太多了，一下招呼不过来，请稍后重试'}}";
  private static final String bn = "{'status':10000,'result':{'errormsg':'喜欢的人太多了，一下招呼不过来，请稍后重试'}}";
  private int X = 200;
  private int Y = 30000;
  private int Z;
  private HttpRequestTask.NetResultListener jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$NetResultListener;
  HttpRequestTask.ParseType jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$ParseType = HttpRequestTask.ParseType.STRING;
  private int aa;
  private int ab;
  ArrayList b;
  private String be;
  private String bg;
  String bo;
  private String bp = "utf-8";
  private HashMap d;
  private HashMap e = new HashMap();
  
  public HttpRequestTask() {}
  
  public void addHeader(HashMap paramHashMap)
  {
    if ((paramHashMap == null) || (paramHashMap.size() == 0)) {
      return;
    }
    this.e.putAll(paramHashMap);
  }
  
  protected Object doInBackground(Object... paramVarArgs)
  {
    if (paramVarArgs == null) {
      return null;
    }
    if (this.bg == null) {
      this.bg = ((String)paramVarArgs[0]);
    }
    Object localObject1 = new HashMap();
    Uri.parse(this.bg);
    long l = System.currentTimeMillis();
    this.aa = ((int)(l / 1000L));
    ((HashMap)localObject1).putAll(this.e);
    Object localObject2 = new HttpRequest(this.bg, (HashMap)localObject1);
    ((HttpRequest)localObject2).setTimeOut(this.Y);
    ((HttpRequest)localObject2).registerTaskLisener(this);
    if (paramVarArgs.length > 1)
    {
      if (this.d == null) {
        this.d = ((HashMap)paramVarArgs[1]);
      }
      if (paramVarArgs.length > 2)
      {
        if (this.bo == null) {
          this.bo = ((String)paramVarArgs[2]);
        }
        if (this.b == null) {
          this.b = ((ArrayList)paramVarArgs[3]);
        }
      }
    }
    if (this.ab == 0) {
      localObject1 = ((HttpRequest)localObject2).get();
    }
    for (;;)
    {
      paramVarArgs = ((HttpRequest)localObject2).getContentType();
      this.bp = paramVarArgs.substring(paramVarArgs.indexOf("=") + 1);
      if (paramVarArgs.equals("application/json")) {
        this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$ParseType = HttpRequestTask.ParseType.JSON;
      }
      this.Z = ((int)(System.currentTimeMillis() - l));
      this.X = ((HttpRequest)localObject2).getErrorCode();
      this.be = ((HttpRequest)localObject2).getErrorMsg();
      if (localObject1 == null)
      {
        paramVarArgs = ((HttpRequest)localObject2).getError();
        if (paramVarArgs == null) {
          break;
        }
        try
        {
          if (paramVarArgs == HttpRequest.RequestErrorCode.TIMEOUT_ERROR)
          {
            paramVarArgs = new JSONObject("{'status':10000,'result':{'errormsg':'连接超时，你当前的网络环境可能比较慢，请稍后重试'}}");
            return paramVarArgs;
            localObject1 = ((HttpRequest)localObject2).post(this.d, this.bo, this.b);
          }
          else
          {
            if (paramVarArgs == HttpRequest.RequestErrorCode.NETWORK_IOERROR) {
              return new JSONObject("{'status':10000,'result':{'errormsg':'你当前的网络未连接或比较慢，请稍后重试'}}");
            }
            if (paramVarArgs == HttpRequest.RequestErrorCode.REDIRECT_ERROR) {
              return new JSONObject("{'status':10000,'result':{'errormsg':'您的请求被运营商跳转了，请稍后重试'}}");
            }
            if (paramVarArgs == HttpRequest.RequestErrorCode.SERVER_ERROR) {
              return new JSONObject("{'status':10000,'result':{'errormsg':'喜欢的人太多了，一下招呼不过来，请稍后重试'}}");
            }
            if (paramVarArgs == HttpRequest.RequestErrorCode.CONTENTTYPE_ERROR) {
              return new JSONObject("{'status':10000,'result':{'errormsg':'貌似服务器有点问题了，请稍后重试'}}");
            }
            if (paramVarArgs == HttpRequest.RequestErrorCode.UNKNOWN_ERROR) {
              return new JSONObject("{'status':10000,'result':{'errormsg':'喜欢的人太多了，一下招呼不过来，请稍后重试'}}");
            }
            if (paramVarArgs == HttpRequest.RequestErrorCode.HTTP400_ERROR)
            {
              paramVarArgs = new JSONObject("{'status':10000,'result':{'errormsg':'喜欢的人太多了，一下招呼不过来，请稍后重试'}}");
              return paramVarArgs;
            }
          }
        }
        catch (JSONException paramVarArgs)
        {
          paramVarArgs.printStackTrace();
          return null;
        }
      }
    }
    if ((this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$ParseType.equals(HttpRequestTask.ParseType.JSON)) || (this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$ParseType.equals(HttpRequestTask.ParseType.STRING))) {}
    for (;;)
    {
      try
      {
        paramVarArgs = new BufferedReader(new InputStreamReader((InputStream)localObject1, this.bp));
        localObject2 = new StringBuilder();
        str = paramVarArgs.readLine();
        if (str == null)
        {
          paramVarArgs = ((StringBuilder)localObject2).toString();
          boolean bool = this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$ParseType.equals(HttpRequestTask.ParseType.JSON);
          if (!bool) {
            continue;
          }
        }
      }
      catch (OutOfMemoryError localOutOfMemoryError1)
      {
        String str;
        paramVarArgs = null;
        localOutOfMemoryError1.printStackTrace();
        try
        {
          paramVarArgs = new JSONObject("{'status':10000,'result':{'errormsg':'貌似服务器有点问题了，请稍后重试'}}");
        }
        catch (JSONException paramVarArgs)
        {
          try
          {
            localJSONException.printStackTrace();
          }
          catch (OutOfMemoryError localOutOfMemoryError2) {}
          paramVarArgs = paramVarArgs;
          paramVarArgs.printStackTrace();
          paramVarArgs = null;
          continue;
        }
        try
        {
          ((InputStream)localObject1).close();
          return paramVarArgs;
        }
        catch (IOException paramVarArgs)
        {
          paramVarArgs.printStackTrace();
          return null;
        }
      }
      catch (IOException paramVarArgs)
      {
        paramVarArgs.printStackTrace();
        try
        {
          ((InputStream)localObject1).close();
          return null;
        }
        catch (IOException paramVarArgs)
        {
          paramVarArgs.printStackTrace();
          return null;
        }
      }
      finally
      {
        try
        {
          ((InputStream)localObject1).close();
          throw paramVarArgs;
        }
        catch (IOException paramVarArgs)
        {
          paramVarArgs.printStackTrace();
          return null;
        }
      }
      try
      {
        paramVarArgs = new JSONObject(paramVarArgs);
      }
      catch (JSONException localJSONException)
      {
        try
        {
          ((InputStream)localObject1).close();
        }
        catch (IOException paramVarArgs)
        {
          paramVarArgs.printStackTrace();
          return null;
        }
        localJSONException = localJSONException;
      }
      try
      {
        ((InputStream)localObject1).close();
        return paramVarArgs;
      }
      catch (IOException paramVarArgs)
      {
        paramVarArgs.printStackTrace();
        return null;
      }
      ((StringBuilder)localObject2).append(str + '\n');
      continue;
      continue;
      paramVarArgs = null;
    }
  }
  
  public Object executeSync(Object... paramVarArgs)
  {
    onPreExecute();
    paramVarArgs = doInBackground(paramVarArgs);
    onPostExecute(paramVarArgs);
    return paramVarArgs;
  }
  
  protected void onPostExecute(Object paramObject)
  {
    super.onPostExecute(paramObject);
    if ((this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$NetResultListener != null) && (paramObject != null)) {
      this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$NetResultListener.OnSuccess(paramObject);
    }
  }
  
  protected void onPreExecute()
  {
    super.onPreExecute();
  }
  
  protected void onProgressUpdate(Integer... paramVarArgs)
  {
    super.onProgressUpdate(paramVarArgs);
  }
  
  public void setFunchionType(int paramInt)
  {
    this.ab = paramInt;
  }
  
  public void setNetResultListener(HttpRequestTask.NetResultListener paramNetResultListener)
  {
    this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$NetResultListener = paramNetResultListener;
  }
  
  public void setParams(HashMap paramHashMap)
  {
    this.d = paramHashMap;
  }
  
  public void setParseType(HttpRequestTask.ParseType paramParseType)
  {
    this.jdField_a_of_type_ComSunnyCommonHttpHttpRequestTask$ParseType = paramParseType;
  }
  
  public void setTimeOut(int paramInt)
  {
    this.Y = paramInt;
  }
  
  public void setUrl(String paramString)
  {
    this.bg = paramString;
  }
}
