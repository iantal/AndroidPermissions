package com.lepeng.fastjson.util;

import android.annotation.SuppressLint;
import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.JSONObject;
import com.lepeng.fastjson.annotation.JSONField;
import com.lepeng.fastjson.annotation.JSONType;
import com.lepeng.fastjson.parser.JSONScanner;
import com.lepeng.fastjson.parser.ParserConfig;
import com.lepeng.fastjson.parser.deserializer.FieldDeserializer;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class TypeUtils
{
  private static ConcurrentMap a = new ConcurrentHashMap();
  
  static
  {
    addBaseClassMappings();
  }
  
  public TypeUtils() {}
  
  private static boolean a(Class paramClass, String paramString)
  {
    Object localObject = (JSONType)paramClass.getAnnotation(JSONType.class);
    int j;
    int i;
    if ((localObject != null) && (((JSONType)localObject).ignores() != null))
    {
      localObject = ((JSONType)localObject).ignores();
      j = localObject.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= j)
      {
        if ((paramClass.getSuperclass() == Object.class) || (paramClass.getSuperclass() == null) || (!a(paramClass.getSuperclass(), paramString))) {
          break;
        }
        return true;
      }
      if (paramString.equalsIgnoreCase(localObject[i])) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public static void addBaseClassMappings()
  {
    a.put("byte", Byte.TYPE);
    a.put("short", Short.TYPE);
    a.put("int", Integer.TYPE);
    a.put("long", Long.TYPE);
    a.put("float", Float.TYPE);
    a.put("double", Double.TYPE);
    a.put("boolean", Boolean.TYPE);
    a.put("char", Character.TYPE);
    a.put("[byte", [B.class);
    a.put("[short", [S.class);
    a.put("[int", [I.class);
    a.put("[long", [J.class);
    a.put("[float", [F.class);
    a.put("[double", [D.class);
    a.put("[boolean", [Z.class);
    a.put("[char", [C.class);
    a.put(HashMap.class.getName(), HashMap.class);
  }
  
  public static void addClassMapping(String paramString, Class paramClass)
  {
    String str = paramString;
    if (paramString == null) {
      str = paramClass.getName();
    }
    a.put(str, paramClass);
  }
  
  public static final Object cast(Object paramObject, Class paramClass, ParserConfig paramParserConfig)
  {
    Object localObject;
    if (paramObject == null) {
      localObject = null;
    }
    do
    {
      Map localMap;
      do
      {
        do
        {
          do
          {
            return localObject;
            if (paramClass == null) {
              throw new IllegalArgumentException("clazz is null");
            }
            localObject = paramObject;
          } while (paramClass == paramObject.getClass());
          if (!(paramObject instanceof Map)) {
            break;
          }
          localObject = paramObject;
        } while (paramClass == Map.class);
        localMap = (Map)paramObject;
        if (paramClass != Object.class) {
          break;
        }
        localObject = paramObject;
      } while (!localMap.containsKey(JSON.DEFAULT_TYPE_KEY));
      return castToJavaBean((Map)paramObject, paramClass, paramParserConfig);
      if ((paramClass.isArray()) && ((paramObject instanceof Collection)))
      {
        localObject = (Collection)paramObject;
        int i = 0;
        paramObject = Array.newInstance(paramClass.getComponentType(), ((Collection)localObject).size());
        localObject = ((Collection)localObject).iterator();
        for (;;)
        {
          if (!((Iterator)localObject).hasNext()) {
            return paramObject;
          }
          Array.set(paramObject, i, cast(((Iterator)localObject).next(), paramClass.getComponentType(), paramParserConfig));
          i += 1;
        }
      }
      localObject = paramObject;
    } while (paramClass.isAssignableFrom(paramObject.getClass()));
    if ((paramClass == Boolean.TYPE) || (paramClass == Boolean.class)) {
      return castToBoolean(paramObject);
    }
    if ((paramClass == Byte.TYPE) || (paramClass == Byte.class)) {
      return castToByte(paramObject);
    }
    if ((paramClass == Short.TYPE) || (paramClass == Short.class)) {
      return castToShort(paramObject);
    }
    if ((paramClass == Integer.TYPE) || (paramClass == Integer.class)) {
      return castToInt(paramObject);
    }
    if ((paramClass == Long.TYPE) || (paramClass == Long.class)) {
      return castToLong(paramObject);
    }
    if ((paramClass == Float.TYPE) || (paramClass == Float.class)) {
      return castToFloat(paramObject);
    }
    if ((paramClass == Double.TYPE) || (paramClass == Double.class)) {
      return castToDouble(paramObject);
    }
    if (paramClass == String.class) {
      return castToString(paramObject);
    }
    if (paramClass == BigDecimal.class) {
      return castToBigDecimal(paramObject);
    }
    if (paramClass == BigInteger.class) {
      return castToBigInteger(paramObject);
    }
    if (paramClass == java.util.Date.class) {
      return castToDate(paramObject);
    }
    if (paramClass == java.sql.Date.class) {
      return castToSqlDate(paramObject);
    }
    if (paramClass == Timestamp.class) {
      return castToTimestamp(paramObject);
    }
    if (paramClass.isEnum()) {
      return castToEnum(paramObject, paramClass, paramParserConfig);
    }
    if (Calendar.class.isAssignableFrom(paramClass))
    {
      paramParserConfig = castToDate(paramObject);
      if (paramClass == Calendar.class) {
        paramObject = Calendar.getInstance();
      }
      for (;;)
      {
        paramObject.setTime(paramParserConfig);
        return paramObject;
        try
        {
          paramObject = (Calendar)paramClass.newInstance();
        }
        catch (Exception paramObject)
        {
          throw new JSONException("can not cast to : " + paramClass.getName(), paramObject);
        }
      }
    }
    if (((paramObject instanceof String)) && (((String)paramObject).length() == 0)) {
      return null;
    }
    throw new JSONException("can not cast to : " + paramClass.getName());
  }
  
  public static final Object cast(Object paramObject, ParameterizedType paramParameterizedType, ParserConfig paramParserConfig)
  {
    Object localObject = paramParameterizedType.getRawType();
    Type localType1;
    if ((localObject == List.class) || (localObject == ArrayList.class))
    {
      localType1 = paramParameterizedType.getActualTypeArguments()[0];
      if ((paramObject instanceof Iterable))
      {
        paramParameterizedType = new ArrayList();
        paramObject = ((Iterable)paramObject).iterator();
        for (;;)
        {
          if (!paramObject.hasNext()) {
            return paramParameterizedType;
          }
          paramParameterizedType.add(cast(paramObject.next(), localType1, paramParserConfig));
        }
      }
    }
    if ((localObject == Map.class) || (localObject == HashMap.class))
    {
      localType1 = paramParameterizedType.getActualTypeArguments()[0];
      Type localType2 = paramParameterizedType.getActualTypeArguments()[1];
      if ((paramObject instanceof Map))
      {
        paramParameterizedType = new HashMap();
        paramObject = ((Map)paramObject).entrySet().iterator();
        for (;;)
        {
          if (!paramObject.hasNext()) {
            return paramParameterizedType;
          }
          localObject = (Map.Entry)paramObject.next();
          paramParameterizedType.put(cast(((Map.Entry)localObject).getKey(), localType1, paramParserConfig), cast(((Map.Entry)localObject).getValue(), localType2, paramParserConfig));
        }
      }
    }
    if (((paramObject instanceof String)) && (((String)paramObject).length() == 0)) {
      return null;
    }
    if ((paramParameterizedType.getActualTypeArguments().length == 1) && ((paramParameterizedType.getActualTypeArguments()[0] instanceof WildcardType))) {
      return cast(paramObject, (Type)localObject, paramParserConfig);
    }
    throw new JSONException("can not cast to : " + paramParameterizedType);
  }
  
  public static final Object cast(Object paramObject, Type paramType, ParserConfig paramParserConfig)
  {
    if (paramObject == null) {
      paramObject = null;
    }
    do
    {
      return paramObject;
      if ((paramType instanceof Class)) {
        return cast(paramObject, (Class)paramType, paramParserConfig);
      }
      if ((paramType instanceof ParameterizedType)) {
        return cast(paramObject, (ParameterizedType)paramType, paramParserConfig);
      }
      if (((paramObject instanceof String)) && (((String)paramObject).length() == 0)) {
        return null;
      }
    } while ((paramType instanceof TypeVariable));
    throw new JSONException("can not cast to : " + paramType);
  }
  
  public static final BigDecimal castToBigDecimal(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof BigDecimal)) {
      return (BigDecimal)paramObject;
    }
    if ((paramObject instanceof BigInteger)) {
      return new BigDecimal((BigInteger)paramObject);
    }
    paramObject = paramObject.toString();
    if (paramObject.length() == 0) {
      return null;
    }
    return new BigDecimal(paramObject);
  }
  
  public static final BigInteger castToBigInteger(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof BigInteger)) {
      return (BigInteger)paramObject;
    }
    if (((paramObject instanceof Float)) || ((paramObject instanceof Double))) {
      return BigInteger.valueOf(((Number)paramObject).longValue());
    }
    paramObject = paramObject.toString();
    if (paramObject.length() == 0) {
      return null;
    }
    return new BigInteger(paramObject);
  }
  
  public static final Boolean castToBoolean(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Boolean)) {
      return (Boolean)paramObject;
    }
    if ((paramObject instanceof Number))
    {
      if (((Number)paramObject).intValue() == 1) {
        return Boolean.valueOf(true);
      }
      return Boolean.valueOf(false);
    }
    if ((paramObject instanceof String))
    {
      String str = (String)paramObject;
      if (str.length() == 0) {
        return null;
      }
      if ("true".equals(str)) {
        return Boolean.TRUE;
      }
      if ("false".equals(str)) {
        return Boolean.FALSE;
      }
      if ("1".equals(str)) {
        return Boolean.TRUE;
      }
    }
    throw new JSONException("can not cast to int, value : " + paramObject);
  }
  
  public static final Byte castToByte(Object paramObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      if ((paramObject instanceof Number)) {
        return Byte.valueOf(((Number)paramObject).byteValue());
      }
      if (!(paramObject instanceof String)) {
        break;
      }
      paramObject = (String)paramObject;
    } while (paramObject.length() == 0);
    return Byte.valueOf(Byte.parseByte(paramObject));
    throw new JSONException("can not cast to byte, value : " + paramObject);
  }
  
  public static final byte[] castToBytes(Object paramObject)
  {
    if ((paramObject instanceof byte[])) {
      return (byte[])paramObject;
    }
    if ((paramObject instanceof String)) {
      return Base64.decodeFast((String)paramObject);
    }
    throw new JSONException("can not cast to int, value : " + paramObject);
  }
  
  public static final Character castToChar(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Character)) {
      return (Character)paramObject;
    }
    if ((paramObject instanceof String))
    {
      String str = (String)paramObject;
      if (str.length() == 0) {
        return null;
      }
      if (str.length() != 1) {
        throw new JSONException("can not cast to byte, value : " + paramObject);
      }
      return Character.valueOf(str.charAt(0));
    }
    throw new JSONException("can not cast to byte, value : " + paramObject);
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public static final java.util.Date castToDate(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return ((Calendar)paramObject).getTime();
    }
    if ((paramObject instanceof java.util.Date)) {
      return (java.util.Date)paramObject;
    }
    long l = -1L;
    if ((paramObject instanceof Number)) {
      l = ((Number)paramObject).longValue();
    }
    if ((paramObject instanceof String))
    {
      String str = (String)paramObject;
      if (str.indexOf('-') != -1)
      {
        if (str.length() == JSON.DEFFAULT_DATE_FORMAT.length()) {
          paramObject = JSON.DEFFAULT_DATE_FORMAT;
        }
        for (;;)
        {
          paramObject = new SimpleDateFormat(paramObject);
          try
          {
            paramObject = paramObject.parse(str);
            return paramObject;
          }
          catch (ParseException paramObject)
          {
            throw new JSONException("can not cast to Date, value : " + str);
          }
          if (str.length() == 10) {
            paramObject = "yyyy-MM-dd";
          } else if (str.length() == "yyyy-MM-dd HH:mm:ss".length()) {
            paramObject = "yyyy-MM-dd HH:mm:ss";
          } else {
            paramObject = "yyyy-MM-dd HH:mm:ss.SSS";
          }
        }
      }
      if (str.length() == 0) {
        return null;
      }
      l = Long.parseLong(str);
    }
    if (l < 0L) {
      throw new JSONException("can not cast to Date, value : " + paramObject);
    }
    return new java.util.Date(l);
  }
  
  public static final Double castToDouble(Object paramObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      if ((paramObject instanceof Number)) {
        return Double.valueOf(((Number)paramObject).doubleValue());
      }
      if (!(paramObject instanceof String)) {
        break;
      }
      paramObject = paramObject.toString();
    } while (paramObject.length() == 0);
    return Double.valueOf(Double.parseDouble(paramObject));
    throw new JSONException("can not cast to double, value : " + paramObject);
  }
  
  public static final Object castToEnum(Object paramObject, Class paramClass, ParserConfig paramParserConfig)
  {
    int i = 0;
    try
    {
      if ((paramObject instanceof String))
      {
        paramObject = (String)paramObject;
        if (paramObject.length() == 0) {
          return null;
        }
        return Enum.valueOf(paramClass, paramObject);
      }
      int j;
      int k;
      if ((paramObject instanceof Number))
      {
        j = ((Number)paramObject).intValue();
        paramObject = (Object[])paramClass.getMethod("values", new Class[0]).invoke(null, new Object[0]);
        k = paramObject.length;
      }
      for (;;)
      {
        if (i >= k) {
          throw new JSONException("can not cast to : " + paramClass.getName());
        }
        paramParserConfig = (Enum)paramObject[i];
        int m = paramParserConfig.ordinal();
        if (m == j) {
          break;
        }
        i += 1;
      }
      return paramParserConfig;
    }
    catch (Exception paramObject)
    {
      throw new JSONException("can not cast to : " + paramClass.getName(), paramObject);
    }
  }
  
  public static final Float castToFloat(Object paramObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      if ((paramObject instanceof Number)) {
        return Float.valueOf(((Number)paramObject).floatValue());
      }
      if (!(paramObject instanceof String)) {
        break;
      }
      paramObject = paramObject.toString();
    } while (paramObject.length() == 0);
    return Float.valueOf(Float.parseFloat(paramObject));
    throw new JSONException("can not cast to float, value : " + paramObject);
  }
  
  public static final Integer castToInt(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Integer)) {
      return (Integer)paramObject;
    }
    if ((paramObject instanceof Number)) {
      return Integer.valueOf(((Number)paramObject).intValue());
    }
    if ((paramObject instanceof String))
    {
      paramObject = (String)paramObject;
      if (paramObject.length() == 0) {
        return null;
      }
      return Integer.valueOf(Integer.parseInt(paramObject));
    }
    throw new JSONException("can not cast to int, value : " + paramObject);
  }
  
  public static final Object castToJavaBean(Object paramObject, Class paramClass)
  {
    return cast(paramObject, paramClass, ParserConfig.getGlobalInstance());
  }
  
  public static final Object castToJavaBean(Map paramMap, Class paramClass, ParserConfig paramParserConfig)
  {
    int i = 0;
    if (paramClass == StackTraceElement.class) {}
    Object localObject2;
    try
    {
      paramClass = (String)paramMap.get("className");
      paramParserConfig = (String)paramMap.get("methodName");
      localObject1 = (String)paramMap.get("fileName");
      paramMap = (Number)paramMap.get("lineNumber");
      if (paramMap == null) {}
      for (;;)
      {
        return new StackTraceElement(paramClass, paramParserConfig, (String)localObject1, i);
        i = paramMap.intValue();
      }
      localObject1 = paramMap.get(JSON.DEFAULT_TYPE_KEY);
      if (!(localObject1 instanceof String)) {
        break label185;
      }
      localObject1 = (String)localObject1;
      localObject2 = loadClass((String)localObject1);
      if (localObject2 == null) {
        throw new ClassNotFoundException(localObject1 + " not found");
      }
    }
    catch (Exception paramMap)
    {
      throw new JSONException(paramMap.getMessage(), paramMap);
    }
    if (!localObject2.equals(paramClass)) {
      return castToJavaBean(paramMap, (Class)localObject2, paramParserConfig);
    }
    label185:
    if (paramClass.isInterface())
    {
      if ((paramMap instanceof JSONObject)) {}
      for (paramMap = (JSONObject)paramMap;; paramMap = new JSONObject(paramMap)) {
        return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { paramClass }, paramMap);
      }
    }
    Object localObject1 = paramParserConfig;
    if (paramParserConfig == null) {
      localObject1 = ParserConfig.getGlobalInstance();
    }
    paramParserConfig = ((ParserConfig)localObject1).getFieldDeserializers(paramClass);
    paramClass = paramClass.getDeclaredConstructor(new Class[0]);
    if (!paramClass.isAccessible()) {
      paramClass.setAccessible(true);
    }
    paramClass = paramClass.newInstance(new Object[0]);
    paramParserConfig = paramParserConfig.entrySet().iterator();
    for (;;)
    {
      if (!paramParserConfig.hasNext()) {
        return paramClass;
      }
      localObject2 = (Map.Entry)paramParserConfig.next();
      Object localObject3 = (String)((Map.Entry)localObject2).getKey();
      localObject2 = (FieldDeserializer)((Map.Entry)localObject2).getValue();
      if (paramMap.containsKey(localObject3))
      {
        localObject3 = paramMap.get(localObject3);
        Method localMethod = ((FieldDeserializer)localObject2).getMethod();
        if (localMethod != null)
        {
          localMethod.invoke(paramClass, new Object[] { cast(localObject3, localMethod.getGenericParameterTypes()[0], (ParserConfig)localObject1) });
        }
        else
        {
          localObject2 = ((FieldDeserializer)localObject2).getField();
          ((Field)localObject2).set(paramClass, cast(localObject3, ((Field)localObject2).getGenericType(), (ParserConfig)localObject1));
        }
      }
    }
  }
  
  public static final Long castToLong(Object paramObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      if ((paramObject instanceof Number)) {
        return Long.valueOf(((Number)paramObject).longValue());
      }
      if (!(paramObject instanceof String)) {
        break;
      }
      localObject = (String)paramObject;
    } while (((String)localObject).length() == 0);
    JSONScanner localJSONScanner;
    try
    {
      long l = Long.parseLong((String)localObject);
      return Long.valueOf(l);
    }
    catch (NumberFormatException localNumberFormatException)
    {
      localJSONScanner = new JSONScanner((String)localObject);
      if (!localJSONScanner.scanISO8601DateIfMatch(false)) {}
    }
    for (Object localObject = localJSONScanner.getCalendar();; localObject = null)
    {
      localJSONScanner.close();
      if (localObject != null) {
        return Long.valueOf(((Calendar)localObject).getTimeInMillis());
      }
      throw new JSONException("can not cast to long, value : " + paramObject);
    }
  }
  
  public static final Short castToShort(Object paramObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      if ((paramObject instanceof Number)) {
        return Short.valueOf(((Number)paramObject).shortValue());
      }
      if (!(paramObject instanceof String)) {
        break;
      }
      paramObject = (String)paramObject;
    } while (paramObject.length() == 0);
    return Short.valueOf(Short.parseShort(paramObject));
    throw new JSONException("can not cast to short, value : " + paramObject);
  }
  
  public static final java.sql.Date castToSqlDate(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return new java.sql.Date(((Calendar)paramObject).getTimeInMillis());
    }
    if ((paramObject instanceof java.sql.Date)) {
      return (java.sql.Date)paramObject;
    }
    if ((paramObject instanceof java.util.Date)) {
      return new java.sql.Date(((java.util.Date)paramObject).getTime());
    }
    if ((paramObject instanceof Number)) {}
    for (long l = ((Number)paramObject).longValue();; l = 0L)
    {
      if ((paramObject instanceof String))
      {
        String str = (String)paramObject;
        if (str.length() == 0) {
          return null;
        }
        l = Long.parseLong(str);
      }
      if (l <= 0L) {
        throw new JSONException("can not cast to Date, value : " + paramObject);
      }
      return new java.sql.Date(l);
    }
  }
  
  public static final String castToString(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    return paramObject.toString();
  }
  
  public static final Timestamp castToTimestamp(Object paramObject)
  {
    if (paramObject == null) {
      return null;
    }
    if ((paramObject instanceof Calendar)) {
      return new Timestamp(((Calendar)paramObject).getTimeInMillis());
    }
    if ((paramObject instanceof Timestamp)) {
      return (Timestamp)paramObject;
    }
    if ((paramObject instanceof java.util.Date)) {
      return new Timestamp(((java.util.Date)paramObject).getTime());
    }
    if ((paramObject instanceof Number)) {}
    for (long l = ((Number)paramObject).longValue();; l = 0L)
    {
      if ((paramObject instanceof String))
      {
        String str = (String)paramObject;
        if (str.length() == 0) {
          return null;
        }
        l = Long.parseLong(str);
      }
      if (l <= 0L) {
        throw new JSONException("can not cast to Date, value : " + paramObject);
      }
      return new Timestamp(l);
    }
  }
  
  public static void clearClassMapping()
  {
    a.clear();
    addBaseClassMappings();
  }
  
  public static List computeGetters(Class paramClass, Map paramMap)
  {
    return computeGetters(paramClass, paramMap, true);
  }
  
  public static List computeGetters(Class paramClass, Map paramMap, boolean paramBoolean)
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    Method[] arrayOfMethod = paramClass.getMethods();
    int j = arrayOfMethod.length;
    int i = 0;
    Object localObject3;
    label113:
    label125:
    Method localMethod;
    Object localObject4;
    label159:
    Object localObject2;
    Object localObject1;
    label351:
    int k;
    if (i >= j)
    {
      localObject3 = paramClass.getFields();
      j = localObject3.length;
      i = 0;
      if (i >= j)
      {
        paramMap = new ArrayList();
        paramClass = (JSONType)paramClass.getAnnotation(JSONType.class);
        if (paramClass == null) {
          break label1148;
        }
        paramClass = paramClass.orders();
        if ((paramClass == null) || (paramClass.length != localLinkedHashMap.size())) {
          break label1061;
        }
        j = paramClass.length;
        i = 0;
        if (i < j) {
          break label1032;
        }
        i = 1;
        if (i == 0) {
          break label1097;
        }
        j = paramClass.length;
        i = 0;
        if (i < j) {
          break label1067;
        }
        return paramMap;
      }
    }
    else
    {
      localMethod = arrayOfMethod[i];
      localObject4 = localMethod.getName();
      if (Modifier.isStatic(localMethod.getModifiers())) {}
      do
      {
        for (;;)
        {
          i += 1;
          break;
          if ((!localMethod.getReturnType().equals(Void.TYPE)) && (localMethod.getParameterTypes().length == 0) && (localMethod.getReturnType() != ClassLoader.class) && ((!localMethod.getName().equals("getMetaClass")) || (!localMethod.getReturnType().getName().equals("groovy.lang.MetaClass"))))
          {
            localObject2 = (JSONField)localMethod.getAnnotation(JSONField.class);
            localObject1 = localObject2;
            if (localObject2 == null) {
              localObject1 = getSupperMethodAnnotation(paramClass, localMethod);
            }
            if (localObject1 == null) {
              break label351;
            }
            if (((JSONField)localObject1).serialize())
            {
              if (((JSONField)localObject1).name().length() == 0) {
                break label351;
              }
              localObject2 = ((JSONField)localObject1).name();
              localObject1 = localObject2;
              if (paramMap != null)
              {
                localObject1 = (String)paramMap.get(localObject2);
                if (localObject1 == null) {}
              }
              else
              {
                localLinkedHashMap.put(localObject1, new FieldInfo((String)localObject1, localMethod, null));
              }
            }
          }
        }
        if (!((String)localObject4).startsWith("get")) {
          break label577;
        }
      } while ((((String)localObject4).length() < 4) || (((String)localObject4).equals("getClass")));
      k = ((String)localObject4).charAt(3);
      if (k == 95)
      {
        localObject1 = ((String)localObject4).substring(4);
        label405:
        if (a(paramClass, (String)localObject1)) {
          break label849;
        }
        localObject3 = ParserConfig.getField(paramClass, (String)localObject1);
        if (localObject3 != null) {
          break label1173;
        }
        localObject3 = ParserConfig.getField(paramClass, (String)localObject1);
      }
    }
    label577:
    label644:
    label849:
    label903:
    label1032:
    label1061:
    label1067:
    label1097:
    label1148:
    label1156:
    label1159:
    label1173:
    for (;;)
    {
      localObject2 = localObject1;
      if (localObject3 != null)
      {
        JSONField localJSONField = (JSONField)((Field)localObject3).getAnnotation(JSONField.class);
        localObject2 = localObject1;
        if (localJSONField != null)
        {
          if (!localJSONField.serialize()) {
            break label159;
          }
          localObject2 = localObject1;
          if (localJSONField.name().length() != 0)
          {
            localObject1 = localJSONField.name();
            localObject2 = localObject1;
            if (paramMap != null)
            {
              localObject1 = (String)paramMap.get(localObject1);
              if (localObject1 == null) {
                break label159;
              }
            }
          }
        }
      }
      for (;;)
      {
        localObject2 = localObject1;
        if (paramMap != null)
        {
          localObject2 = (String)paramMap.get(localObject1);
          if (localObject2 == null) {
            break label159;
          }
        }
        localLinkedHashMap.put(localObject2, new FieldInfo((String)localObject2, localMethod, (Field)localObject3));
        if ((!((String)localObject4).startsWith("is")) || (((String)localObject4).length() < 3)) {
          break label159;
        }
        char c = ((String)localObject4).charAt(2);
        if (Character.isUpperCase(c))
        {
          localObject1 = Character.toLowerCase(((String)localObject4).charAt(2)) + ((String)localObject4).substring(3);
          localObject3 = ParserConfig.getField(paramClass, (String)localObject1);
          localObject2 = localObject1;
          if (localObject3 == null) {
            break label1159;
          }
          localObject4 = (JSONField)((Field)localObject3).getAnnotation(JSONField.class);
          localObject2 = localObject1;
          if (localObject4 == null) {
            break label1159;
          }
          if (!((JSONField)localObject4).serialize()) {
            break label159;
          }
          localObject2 = localObject1;
          if (((JSONField)localObject4).name().length() == 0) {
            break label1159;
          }
          localObject1 = ((JSONField)localObject4).name();
          localObject2 = localObject1;
          if (paramMap == null) {
            break label1159;
          }
          localObject1 = (String)paramMap.get(localObject1);
          if (localObject1 == null) {
            break label159;
          }
        }
        for (;;)
        {
          localObject2 = localObject1;
          if (paramMap != null)
          {
            localObject2 = (String)paramMap.get(localObject1);
            if (localObject2 == null) {
              break label159;
            }
          }
          localLinkedHashMap.put(localObject2, new FieldInfo((String)localObject2, localMethod, (Field)localObject3));
          break label159;
          if (k == 102)
          {
            localObject1 = ((String)localObject4).substring(3);
            break label405;
          }
          localObject1 = Character.toLowerCase(((String)localObject4).charAt(3)) + ((String)localObject4).substring(4);
          break label405;
          break label159;
          if (c == '_')
          {
            localObject1 = ((String)localObject4).substring(3);
            break label644;
          }
          if (c != 'f') {
            break label159;
          }
          localObject1 = ((String)localObject4).substring(2);
          break label644;
          arrayOfMethod = localObject3[i];
          if (Modifier.isStatic(arrayOfMethod.getModifiers())) {}
          do
          {
            i += 1;
            break;
            localObject2 = (JSONField)arrayOfMethod.getAnnotation(JSONField.class);
            localObject1 = arrayOfMethod.getName();
            if (localObject2 == null) {
              break label1156;
            }
          } while (!((JSONField)localObject2).serialize());
          if (((JSONField)localObject2).name().length() != 0) {
            localObject1 = ((JSONField)localObject2).name();
          }
          for (;;)
          {
            localObject2 = localObject1;
            if (paramMap != null)
            {
              localObject2 = (String)paramMap.get(localObject1);
              if (localObject2 == null) {
                break label903;
              }
            }
            if (localLinkedHashMap.containsKey(localObject2)) {
              break label903;
            }
            localLinkedHashMap.put(localObject2, new FieldInfo((String)localObject2, null, arrayOfMethod));
            break label903;
            if (!localLinkedHashMap.containsKey(paramClass[i]))
            {
              i = 0;
              break label113;
            }
            i += 1;
            break;
            i = 0;
            break label113;
            paramMap.add((FieldInfo)localLinkedHashMap.get(paramClass[i]));
            i += 1;
            break label125;
            paramClass = localLinkedHashMap.values().iterator();
            for (;;)
            {
              if (!paramClass.hasNext())
              {
                if (!paramBoolean) {
                  break;
                }
                Collections.sort(paramMap);
                return paramMap;
              }
              paramMap.add((FieldInfo)paramClass.next());
            }
            i = 0;
            paramClass = null;
            break label113;
          }
          localObject1 = localObject2;
        }
        localObject1 = localObject2;
      }
    }
  }
  
  public static Class getClass(Type paramType)
  {
    if (paramType.getClass() == Class.class) {
      return (Class)paramType;
    }
    if ((paramType instanceof ParameterizedType)) {
      return getClass(((ParameterizedType)paramType).getRawType());
    }
    return Object.class;
  }
  
  public static JSONField getSupperMethodAnnotation(Class paramClass, Method paramMethod)
  {
    paramClass = paramClass.getInterfaces();
    int m = paramClass.length;
    int i = 0;
    Method[] arrayOfMethod;
    int j;
    for (;;)
    {
      if (i >= m) {
        return null;
      }
      arrayOfMethod = paramClass[i].getMethods();
      int n = arrayOfMethod.length;
      j = 0;
      if (j < n) {
        break;
      }
      i += 1;
    }
    Object localObject = arrayOfMethod[j];
    if (!((Method)localObject).getName().equals(paramMethod.getName())) {}
    while (((Method)localObject).getParameterTypes().length != paramMethod.getParameterTypes().length)
    {
      j += 1;
      break;
    }
    int k = 0;
    for (;;)
    {
      if (k >= ((Method)localObject).getParameterTypes().length) {}
      for (k = 1;; k = 0)
      {
        if (k == 0) {
          break label157;
        }
        localObject = (JSONField)((Method)localObject).getAnnotation(JSONField.class);
        if (localObject == null) {
          break;
        }
        return localObject;
        if (localObject.getParameterTypes()[k].equals(paramMethod.getParameterTypes()[k])) {
          break label159;
        }
      }
      label157:
      break;
      label159:
      k += 1;
    }
  }
  
  public static Class loadClass(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {
      localObject = null;
    }
    Class localClass1;
    do
    {
      return localObject;
      localClass1 = (Class)a.get(paramString);
      localObject = localClass1;
    } while (localClass1 != null);
    if (paramString.charAt(0) == '[') {
      return Array.newInstance(loadClass(paramString.substring(1)), 0).getClass();
    }
    if ((paramString.startsWith("L")) && (paramString.endsWith(";"))) {
      return loadClass(paramString.substring(1, paramString.length() - 1));
    }
    Object localObject = localClass1;
    try
    {
      localClass1 = Thread.currentThread().getContextClassLoader().loadClass(paramString);
      localObject = localClass1;
      addClassMapping(paramString, localClass1);
      return localClass1;
    }
    catch (Throwable localThrowable)
    {
      try
      {
        Class localClass2 = Class.forName(paramString);
        localObject = localClass2;
        addClassMapping(paramString, localClass2);
        return localClass2;
      }
      catch (Throwable paramString) {}
    }
    return localObject;
  }
}
