package com.videoclient.player.wight;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.DrawableContainer;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewParent;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.CompoundButton;
import com.alipay.whatapp.video.R.styleable;

public class SwitchButton
  extends CompoundButton
{
  private int a;
  private int b;
  private int c = 0;
  private int d = 0;
  private int e = 0;
  private int f;
  private int g = 200;
  private int h;
  private int i;
  private int j = 16;
  private float k;
  private float l = 0.2F;
  private Paint m;
  private RectF n;
  private Drawable o;
  private Drawable p;
  private Drawable q;
  private Drawable r;
  private a s;
  private PorterDuffXfermode t;
  
  public SwitchButton(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SwitchButton(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    a(paramAttributeSet);
  }
  
  public SwitchButton(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    a(paramAttributeSet);
  }
  
  private int a(int paramInt)
  {
    int i1 = paramInt;
    if (paramInt < this.d) {
      i1 = this.d;
    }
    paramInt = i1;
    if (i1 > this.e) {
      paramInt = this.e;
    }
    i1 = this.c;
    this.c = paramInt;
    return paramInt - i1;
  }
  
  private Bitmap a(Drawable paramDrawable)
  {
    if (paramDrawable == null) {}
    do
    {
      return null;
      if ((paramDrawable instanceof DrawableContainer)) {
        return a(paramDrawable.getCurrent());
      }
    } while (!(paramDrawable instanceof BitmapDrawable));
    return ((BitmapDrawable)paramDrawable).getBitmap();
  }
  
  private void a(AttributeSet paramAttributeSet)
  {
    setGravity(16);
    this.m = new Paint();
    this.m.setColor(-65536);
    this.t = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);
    this.s = new a(this, getContext(), new AccelerateDecelerateInterpolator());
    this.n = new RectF();
    if ((paramAttributeSet != null) && (getContext() != null))
    {
      paramAttributeSet = getContext().obtainStyledAttributes(paramAttributeSet, R.styleable.SwitchButton);
      if (paramAttributeSet != null)
      {
        this.j = ((int)paramAttributeSet.getDimension(4, 0.0F));
        a(paramAttributeSet.getDrawable(0), paramAttributeSet.getDrawable(1), paramAttributeSet.getDrawable(2), paramAttributeSet.getDrawable(3));
        paramAttributeSet.recycle();
      }
    }
    this.i = ViewConfiguration.get(getContext()).getScaledTouchSlop();
    setChecked(isChecked());
    setClickable(true);
  }
  
  public void a(Drawable paramDrawable1, Drawable paramDrawable2, Drawable paramDrawable3, Drawable paramDrawable4)
  {
    if ((paramDrawable1 == null) || (paramDrawable2 == null) || (paramDrawable3 == null) || (paramDrawable4 == null)) {
      throw new IllegalArgumentException("ALL NULL");
    }
    this.o = paramDrawable1;
    this.p = paramDrawable2;
    this.q = paramDrawable3;
    this.r = paramDrawable4;
    this.o.setBounds(0, 0, this.o.getIntrinsicWidth(), this.o.getIntrinsicHeight());
    this.o.setCallback(this);
    this.p.setBounds(0, 0, this.p.getIntrinsicWidth(), this.p.getIntrinsicHeight());
    this.p.setCallback(this);
    this.q.setBounds(0, 0, this.q.getIntrinsicWidth(), this.q.getIntrinsicHeight());
    this.q.setCallback(this);
    this.r.setBounds(0, 0, this.r.getIntrinsicWidth(), this.r.getIntrinsicHeight());
    this.r.setCallback(this);
    this.d = ((paramDrawable2.getIntrinsicWidth() - paramDrawable1.getIntrinsicWidth()) * -1);
    if (isChecked()) {}
    for (int i1 = this.d;; i1 = this.e)
    {
      a(i1);
      requestLayout();
      return;
    }
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    int[] arrayOfInt = getDrawableState();
    if (this.o != null) {
      this.o.setState(arrayOfInt);
    }
    if (this.p != null) {
      this.p.setState(arrayOfInt);
    }
    if (this.q != null) {
      this.q.setState(arrayOfInt);
    }
    if (this.r != null) {
      this.r.setState(arrayOfInt);
    }
    invalidate();
  }
  
  public int getCompoundPaddingRight()
  {
    int i2 = super.getCompoundPaddingRight();
    if (this.o != null) {}
    for (int i1 = this.o.getIntrinsicWidth();; i1 = 0)
    {
      i2 = i1 + i2;
      i1 = i2;
      if (!TextUtils.isEmpty(getText())) {
        i1 = i2 + this.j;
      }
      return i1;
    }
  }
  
  @TargetApi(11)
  public void jumpDrawablesToCurrentState()
  {
    if (Build.VERSION.SDK_INT >= 11)
    {
      super.jumpDrawablesToCurrentState();
      if (this.o != null) {
        this.o.jumpToCurrentState();
      }
      if (this.p != null) {
        this.p.jumpToCurrentState();
      }
      if (this.q != null) {
        this.q.jumpToCurrentState();
      }
      if (this.r != null) {
        this.r.jumpToCurrentState();
      }
    }
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    paramCanvas.save();
    paramCanvas.translate(this.a, this.b);
    Bitmap localBitmap;
    if ((this.p != null) && (this.q != null))
    {
      localBitmap = a(this.p);
      if ((this.q != null) && (localBitmap != null) && (!localBitmap.isRecycled()))
      {
        int i1 = paramCanvas.saveLayer(0.0F, 0.0F, getWidth(), getHeight(), this.m, 31);
        this.q.draw(paramCanvas);
        this.m.setXfermode(this.t);
        paramCanvas.drawBitmap(localBitmap, this.c, 0.0F, this.m);
        this.m.setXfermode(null);
        paramCanvas.restoreToCount(i1);
      }
    }
    if (this.o != null) {
      this.o.draw(paramCanvas);
    }
    if (this.r != null)
    {
      localBitmap = a(this.r);
      if ((localBitmap != null) && (!localBitmap.isRecycled())) {
        paramCanvas.drawBitmap(localBitmap, this.c, 0.0F, this.m);
      }
    }
    paramCanvas.restore();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = 0;
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    Object localObject = getCompoundDrawables();
    if (localObject != null) {
      if ((localObject.length > 1) && (localObject[1] != null))
      {
        paramInt1 = localObject[1].getIntrinsicHeight() + getCompoundDrawablePadding();
        if ((localObject.length > 2) && (localObject[2] != null))
        {
          paramInt2 = localObject[2].getIntrinsicWidth() + getCompoundDrawablePadding();
          label79:
          if ((localObject.length > 3) && (localObject[3] != null))
          {
            paramInt3 = localObject[3].getIntrinsicHeight();
            paramInt4 = getCompoundDrawablePadding();
            paramInt4 = paramInt3 + paramInt4;
            paramInt3 = paramInt2;
            paramInt2 = paramInt1;
            paramInt1 = paramInt4;
          }
        }
      }
    }
    for (;;)
    {
      int i2 = getWidth();
      label184:
      float f1;
      float f2;
      if (this.o != null)
      {
        paramInt4 = this.o.getIntrinsicWidth();
        this.a = (i2 - paramInt4 - getPaddingRight() - paramInt3);
        paramInt4 = getHeight();
        if (this.o == null) {
          break label290;
        }
        paramInt3 = this.o.getIntrinsicHeight();
        this.b = ((paramInt2 + (paramInt4 - paramInt3) - paramInt1) / 2);
        localObject = this.n;
        f1 = this.a;
        f2 = this.b;
        paramInt2 = this.a;
        if (this.o == null) {
          break label296;
        }
      }
      label290:
      label296:
      for (paramInt1 = this.o.getIntrinsicWidth();; paramInt1 = 0)
      {
        float f3 = paramInt1 + paramInt2;
        paramInt2 = this.b;
        paramInt1 = i1;
        if (this.o != null) {
          paramInt1 = this.o.getIntrinsicHeight();
        }
        ((RectF)localObject).set(f1, f2, f3, paramInt1 + paramInt2);
        return;
        paramInt4 = 0;
        break;
        paramInt3 = 0;
        break label184;
      }
      paramInt3 = paramInt2;
      paramInt2 = paramInt1;
      paramInt1 = 0;
      continue;
      paramInt2 = 0;
      break label79;
      paramInt1 = 0;
      break;
      paramInt1 = 0;
      paramInt2 = 0;
      paramInt3 = 0;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i3 = 0;
    int i4 = 0;
    int i2 = 0;
    int i1;
    switch (View.MeasureSpec.getMode(paramInt1))
    {
    default: 
      i1 = getCompoundPaddingLeft() + getCompoundPaddingRight();
      switch (View.MeasureSpec.getMode(paramInt2))
      {
      default: 
        if (this.o != null) {
          i2 = this.o.getIntrinsicHeight();
        }
        i2 = i2 + getCompoundPaddingTop() + getCompoundPaddingBottom();
      }
      break;
    }
    for (;;)
    {
      super.onMeasure(paramInt1, paramInt2);
      paramInt1 = i1;
      if (i1 < getMeasuredWidth()) {
        paramInt1 = getMeasuredWidth();
      }
      paramInt2 = i2;
      if (i2 < getMeasuredHeight()) {
        paramInt2 = getMeasuredHeight();
      }
      setMeasuredDimension(paramInt1, paramInt2);
      return;
      i1 = getCompoundPaddingLeft() + getCompoundPaddingRight();
      break;
      i1 = View.MeasureSpec.getSize(paramInt1);
      break;
      i1 = getCompoundPaddingLeft() + getCompoundPaddingRight();
      break;
      i2 = i3;
      if (this.o != null) {
        i2 = this.o.getIntrinsicHeight();
      }
      i2 = i2 + getCompoundPaddingTop() + getCompoundPaddingBottom();
      continue;
      i2 = View.MeasureSpec.getSize(paramInt2);
      continue;
      i2 = i4;
      if (this.o != null) {
        i2 = this.o.getIntrinsicHeight();
      }
      i2 = i2 + getCompoundPaddingTop() + getCompoundPaddingBottom();
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i1;
    if (Build.VERSION.SDK_INT >= 8)
    {
      i1 = paramMotionEvent.getActionMasked();
      switch (i1)
      {
      }
    }
    for (;;)
    {
      super.onTouchEvent(paramMotionEvent);
      return isEnabled();
      i1 = paramMotionEvent.getAction() & 0xFF;
      break;
      if ((isEnabled()) && (this.n.contains(paramMotionEvent.getX(), paramMotionEvent.getY())))
      {
        this.h = 1;
        this.f = 0;
        this.k = paramMotionEvent.getX();
        setClickable(false);
        continue;
        float f1;
        switch (this.h)
        {
        case 0: 
        default: 
          break;
        case 1: 
          f1 = paramMotionEvent.getX();
          if (Math.abs(f1 - this.k) > this.i)
          {
            this.h = 2;
            if (getParent() != null) {
              getParent().requestDisallowInterceptTouchEvent(true);
            }
            this.k = f1;
            return true;
          }
          break;
        case 2: 
          f1 = paramMotionEvent.getX();
          this.f += a(this.c + (int)(f1 - this.k));
          this.k = f1;
          invalidate();
          return true;
          setClickable(true);
          if (this.h == 2)
          {
            this.h = 0;
            if (Math.abs(this.f) >= Math.abs(this.o.getIntrinsicWidth() * this.l)) {
              toggle();
            } else {
              this.s.a(isChecked());
            }
          }
          else if (this.h == 1)
          {
            this.h = 0;
            toggle();
            continue;
            setClickable(true);
            if (this.h == 2)
            {
              this.h = 0;
              this.s.a(isChecked());
            }
            else
            {
              this.h = 0;
            }
          }
          break;
        }
      }
    }
  }
  
  public void setChecked(boolean paramBoolean)
  {
    boolean bool = isChecked();
    super.setChecked(paramBoolean);
    if ((bool ^ paramBoolean))
    {
      if ((getWidth() > 0) && (this.s != null)) {
        this.s.a(paramBoolean);
      }
    }
    else {
      return;
    }
    if (isChecked()) {}
    for (int i1 = this.d;; i1 = this.e)
    {
      a(i1);
      return;
    }
  }
  
  public void setDuration(int paramInt)
  {
    this.g = paramInt;
  }
  
  public void setMinChangeDistanceScale(float paramFloat)
  {
    this.l = paramFloat;
  }
  
  public void setWithTextInterval(int paramInt)
  {
    this.j = paramInt;
    requestLayout();
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == this.o) || (paramDrawable == this.p) || (paramDrawable == this.q) || (paramDrawable == this.r);
  }
}
