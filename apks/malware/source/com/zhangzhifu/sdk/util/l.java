package com.zhangzhifu.sdk.util;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Proxy;
import android.os.Build;
import android.os.Build.VERSION;
import com.zhangzhifu.sdk.a.e;
import com.zhangzhifu.sdk.b.m;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

public class l
{
  private static boolean a = false;
  private static boolean b = true;
  private static FileWriter c = null;
  private static String d = "/sdcard/Platform-Log.txt";
  private static int[] e = { 10, 20, 30, 50, 100, 300, 500 };
  
  public static String a(InputStream paramInputStream)
  {
    BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramInputStream));
    paramInputStream = new StringBuffer();
    for (;;)
    {
      try
      {
        str = localBufferedReader.readLine();
        if (str != null) {
          continue;
        }
      }
      catch (IOException localIOException)
      {
        String str;
        localIOException.printStackTrace();
        continue;
      }
      return paramInputStream.toString();
      paramInputStream.append(str);
    }
  }
  
  public static String a(HttpEntity paramHttpEntity)
  {
    try
    {
      String str = EntityUtils.toString(paramHttpEntity);
      return str;
    }
    catch (Exception localException)
    {
      n.f("====", "处理entity错误" + paramHttpEntity + " , " + localException.getMessage() + " , " + localException.getStackTrace());
    }
    return null;
  }
  
  public static String a(HttpResponse paramHttpResponse, Context paramContext)
  {
    paramHttpResponse.getAllHeaders();
    try
    {
      paramHttpResponse = EntityUtils.toString(paramHttpResponse.getEntity());
      return paramHttpResponse;
    }
    catch (Exception paramHttpResponse) {}
    return null;
  }
  
  public static HttpResponse a(String paramString, Header[] paramArrayOfHeader, Context paramContext)
  {
    for (;;)
    {
      DefaultHttpClient localDefaultHttpClient;
      try
      {
        localDefaultHttpClient = new DefaultHttpClient();
        paramString = new HttpGet(paramString);
        int i = j.b(paramContext);
        System.out.println("网络类型：" + i);
        if (a(paramContext))
        {
          if (i == 4)
          {
            paramContext = new HttpHost("10.0.0.172", 80, "http");
            localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
          }
        }
        else
        {
          if (paramArrayOfHeader != null) {
            paramString.setHeaders(paramArrayOfHeader);
          }
          return localDefaultHttpClient.execute(paramString);
        }
        if (i == 5)
        {
          paramContext = new HttpHost("10.0.0.200", 80, "http");
          localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
          continue;
        }
        if (i != 6) {
          break label207;
        }
      }
      catch (Exception paramString)
      {
        n.b("zhangPay_log", paramString.getMessage() + "=================================================获取协议异常！");
        return null;
      }
      paramContext = new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort(), "http");
      localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
      continue;
      label207:
      paramContext = new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort(), "http");
      localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
    }
  }
  
  public static boolean a(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.getType() == 1)) {
        return false;
      }
      paramContext = Proxy.getDefaultHost();
      if (paramContext != null)
      {
        boolean bool = paramContext.equals("");
        if (!bool) {
          return true;
        }
      }
    }
    catch (Exception paramContext) {}
    return false;
  }
  
  public static Header[] a(Context paramContext, String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("lac", e.b(paramContext, "lac", "0"));
    localHashMap.put("mcc", e.b(paramContext, "mcc", "0"));
    localHashMap.put("mnc", e.b(paramContext, "mnc", "0"));
    localHashMap.put("cid", e.b(paramContext, "cid", "0"));
    String str1 = e.b(paramContext, "latitude", "-1");
    String str2 = e.b(paramContext, "longitude", "-1");
    e.a();
    String str3 = e.n(paramContext);
    e.a();
    return a(paramContext, paramString1, paramString2, str3, e.o(paramContext), localHashMap, Double.valueOf(str1).doubleValue(), Double.valueOf(str2).doubleValue());
  }
  
  public static Header[] a(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, Map paramMap, double paramDouble1, double paramDouble2)
  {
    return new Header[] { new BasicHeader("mobileModel", Build.MODEL), new BasicHeader("sign", paramString1), new BasicHeader("osVersion", Build.VERSION.SDK_INT), new BasicHeader("netMode", j.j(paramContext)), new BasicHeader("sdkVersion", "3.4.15"), new BasicHeader("package", j.n(paramContext)), new BasicHeader("mobile", j.o(paramContext)), new BasicHeader("clientmobile", j.p(paramContext)), new BasicHeader("mobileimsi", j.q(paramContext)), new BasicHeader("mobileimei", j.e(paramContext)), new BasicHeader("cp", paramString2), new BasicHeader("qd", paramString3), new BasicHeader("appId", paramString4), new BasicHeader("lac", (String)paramMap.get("lac")), new BasicHeader("mcc", (String)paramMap.get("mcc")), new BasicHeader("mnc", (String)paramMap.get("mnc")), new BasicHeader("cid", (String)paramMap.get("cid")), new BasicHeader("latitude", paramDouble1), new BasicHeader("longitude", paramDouble2), new BasicHeader(m.o, Build.BOARD), new BasicHeader(m.n, Build.BOOTLOADER), new BasicHeader(m.m, Build.BRAND), new BasicHeader(m.l, Build.CPU_ABI), new BasicHeader(m.k, Build.DEVICE), new BasicHeader(m.j, j.i(paramContext)), new BasicHeader(m.i, Build.FINGERPRINT), new BasicHeader(m.p, Build.HARDWARE), new BasicHeader(m.s, j.f(paramContext)), new BasicHeader(m.r, Build.ID), new BasicHeader(m.t, j.b()), new BasicHeader(m.u, j.c()), new BasicHeader(m.v, j.a()), new BasicHeader(m.w, j.d()), new BasicHeader(m.x, j.r(paramContext)), new BasicHeader(m.y, j.e()), new BasicHeader(m.z, j.s(paramContext)), new BasicHeader(m.A, j.t(paramContext)) };
  }
  
  public static Header[] a(Context paramContext, String paramString1, String paramString2, Map paramMap, double paramDouble1, double paramDouble2)
  {
    e.a();
    String str = e.n(paramContext);
    e.a();
    return a(paramContext, paramString1, paramString2, str, e.o(paramContext), paramMap, paramDouble1, paramDouble2);
  }
}
