package com.zhangzhifu.sdk.util;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.text.format.Formatter;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.zhangzhifu.sdk.a.e;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.Proxy.Type;
import java.util.HashMap;
import java.util.Map;

public class j
{
  public static String a = "platform";
  public static Uri b = Uri.parse("content://telephony/carriers/preferapn");
  public static String c;
  private static String d = "";
  private static String e;
  private static String f;
  private static String g = "00000000000";
  private static String h;
  private static int i;
  private static int j;
  private static String k = "unknow";
  private static String l;
  private static int m = -1;
  private static int n = -1;
  private static int o = -1;
  private static String p = "";
  private static String q = "";
  private static Map r;
  private static String s;
  private static String t;
  
  public static String a()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static void a(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    k = "unknow";
    if (localNetworkInfo != null) {}
    switch (localNetworkInfo.getType())
    {
    default: 
      k = "unknow";
      return;
    case 0: 
      int i1 = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
      paramContext = k(paramContext);
      if (i1 == 1)
      {
        if (paramContext != null)
        {
          k = "gprs-wap";
          return;
        }
        k = "gprs-net";
        return;
      }
      if ((i1 == 2) || (i1 == 0))
      {
        if (paramContext != null)
        {
          k = "edge-wap";
          return;
        }
        k = "edge-net";
        return;
      }
      if (paramContext != null)
      {
        k = "3g-wap";
        return;
      }
      k = "3g-net";
      return;
    }
    k = "wifi";
  }
  
  public static int b(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (localNetworkInfo != null)
    {
      switch (localNetworkInfo.getType())
      {
      default: 
        return 0;
      case 0: 
        int i1 = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
        paramContext = k(paramContext);
        if ((i1 == 1) || (i1 == 2))
        {
          if (paramContext != null) {
            return 4;
          }
          return 6;
        }
        if (i1 == 4)
        {
          if (paramContext != null) {
            return 5;
          }
          return 6;
        }
        if ((i1 == 5) || (i1 == 6))
        {
          if (paramContext != null) {
            return 5;
          }
          return 6;
        }
        if ((i1 == 3) || (i1 == 8))
        {
          if (paramContext != null) {
            return 4;
          }
          return 6;
        }
        if (paramContext != null) {
          return 4;
        }
        return 6;
      }
      return 3;
    }
    return 0;
  }
  
  public static String b()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static String c()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "N/A";
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return "N/A";
  }
  
  public static String c(Context paramContext)
  {
    if (e != null) {
      return e;
    }
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    e = paramContext;
    if (paramContext == null) {
      e = "";
    }
    return e;
  }
  
  public static String d()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/cpuinfo")).readLine().split(":\\s+", 2)[1];
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return null;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static void d(Context paramContext)
  {
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    e = paramContext;
    if (paramContext != null)
    {
      if ((e.startsWith("46000")) || (e.startsWith("46002")) || (e.startsWith("46007")))
      {
        c = "mobile";
        return;
      }
      if (e.startsWith("46001"))
      {
        c = "unicom";
        return;
      }
      if (e.startsWith("46003"))
      {
        c = "telecom";
        return;
      }
      c = "unknow";
      return;
    }
    e = "";
    c = "unknown";
  }
  
  /* Error */
  public static String e()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: new 180	java/io/BufferedReader
    //   8: dup
    //   9: new 182	java/io/FileReader
    //   12: dup
    //   13: ldc -24
    //   15: invokespecial 185	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   18: bipush 8
    //   20: invokespecial 235	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   23: astore_1
    //   24: aload_1
    //   25: astore_0
    //   26: aload_1
    //   27: invokevirtual 191	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   30: astore_2
    //   31: aload 4
    //   33: astore_0
    //   34: aload_2
    //   35: ifnull +5 -> 40
    //   38: aload_2
    //   39: astore_0
    //   40: aload_1
    //   41: invokevirtual 236	java/io/BufferedReader:close	()V
    //   44: new 106	java/lang/StringBuilder
    //   47: dup
    //   48: aload_0
    //   49: aload_0
    //   50: bipush 58
    //   52: invokevirtual 240	java/lang/String:indexOf	(I)I
    //   55: iconst_1
    //   56: iadd
    //   57: aload_0
    //   58: bipush 107
    //   60: invokevirtual 240	java/lang/String:indexOf	(I)I
    //   63: invokevirtual 244	java/lang/String:substring	(II)Ljava/lang/String;
    //   66: invokevirtual 104	java/lang/String:trim	()Ljava/lang/String;
    //   69: invokestatic 250	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   72: i2l
    //   73: invokestatic 253	java/lang/String:valueOf	(J)Ljava/lang/String;
    //   76: invokespecial 113	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   79: invokevirtual 123	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   82: areturn
    //   83: astore_2
    //   84: aconst_null
    //   85: astore_1
    //   86: aload_1
    //   87: astore_0
    //   88: aload_2
    //   89: invokevirtual 192	java/io/FileNotFoundException:printStackTrace	()V
    //   92: aload_3
    //   93: astore_0
    //   94: aload_1
    //   95: ifnull -51 -> 44
    //   98: aload_1
    //   99: invokevirtual 236	java/io/BufferedReader:close	()V
    //   102: aload_3
    //   103: astore_0
    //   104: goto -60 -> 44
    //   107: astore_0
    //   108: aload_0
    //   109: invokevirtual 126	java/io/IOException:printStackTrace	()V
    //   112: aload_3
    //   113: astore_0
    //   114: goto -70 -> 44
    //   117: astore_2
    //   118: aconst_null
    //   119: astore_1
    //   120: aload_1
    //   121: astore_0
    //   122: aload_2
    //   123: invokevirtual 126	java/io/IOException:printStackTrace	()V
    //   126: aload_3
    //   127: astore_0
    //   128: aload_1
    //   129: ifnull -85 -> 44
    //   132: aload_1
    //   133: invokevirtual 236	java/io/BufferedReader:close	()V
    //   136: aload_3
    //   137: astore_0
    //   138: goto -94 -> 44
    //   141: astore_0
    //   142: aload_0
    //   143: invokevirtual 126	java/io/IOException:printStackTrace	()V
    //   146: aload_3
    //   147: astore_0
    //   148: goto -104 -> 44
    //   151: astore_1
    //   152: aconst_null
    //   153: astore_0
    //   154: aload_0
    //   155: ifnull +7 -> 162
    //   158: aload_0
    //   159: invokevirtual 236	java/io/BufferedReader:close	()V
    //   162: aload_1
    //   163: athrow
    //   164: astore_0
    //   165: aload_0
    //   166: invokevirtual 126	java/io/IOException:printStackTrace	()V
    //   169: goto -7 -> 162
    //   172: astore_1
    //   173: aload_1
    //   174: invokevirtual 126	java/io/IOException:printStackTrace	()V
    //   177: goto -133 -> 44
    //   180: astore_1
    //   181: goto -27 -> 154
    //   184: astore_2
    //   185: goto -65 -> 120
    //   188: astore_2
    //   189: goto -103 -> 86
    // Local variable table:
    //   start	length	slot	name	signature
    //   25	79	0	localObject1	Object
    //   107	2	0	localIOException1	IOException
    //   113	25	0	localObject2	Object
    //   141	2	0	localIOException2	IOException
    //   147	12	0	localObject3	Object
    //   164	2	0	localIOException3	IOException
    //   23	110	1	localBufferedReader	BufferedReader
    //   151	12	1	localObject4	Object
    //   172	2	1	localIOException4	IOException
    //   180	1	1	localObject5	Object
    //   30	9	2	str	String
    //   83	6	2	localFileNotFoundException1	FileNotFoundException
    //   117	6	2	localIOException5	IOException
    //   184	1	2	localIOException6	IOException
    //   188	1	2	localFileNotFoundException2	FileNotFoundException
    //   1	146	3	localObject6	Object
    //   3	29	4	localObject7	Object
    // Exception table:
    //   from	to	target	type
    //   5	24	83	java/io/FileNotFoundException
    //   98	102	107	java/io/IOException
    //   5	24	117	java/io/IOException
    //   132	136	141	java/io/IOException
    //   5	24	151	finally
    //   158	162	164	java/io/IOException
    //   40	44	172	java/io/IOException
    //   26	31	180	finally
    //   88	92	180	finally
    //   122	126	180	finally
    //   26	31	184	java/io/IOException
    //   26	31	188	java/io/FileNotFoundException
  }
  
  public static String e(Context paramContext)
  {
    if (f != null) {
      return f;
    }
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    f = paramContext;
    if (paramContext == null) {
      f = "";
    }
    return f;
  }
  
  public static String f(Context paramContext)
  {
    if (l != null) {
      return l;
    }
    paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo();
    int i1;
    if (paramContext != null)
    {
      paramContext = paramContext.getMacAddress();
      if (paramContext != null)
      {
        l = "";
        i1 = 0;
      }
    }
    for (;;)
    {
      if (i1 >= paramContext.length()) {
        return l;
      }
      char c1 = paramContext.charAt(i1);
      if (c1 != ':') {
        l += c1;
      }
      i1 += 1;
    }
  }
  
  public static int g(Context paramContext)
  {
    if (i > 0) {
      return i;
    }
    u(paramContext);
    return i;
  }
  
  public static int h(Context paramContext)
  {
    if (j > 0) {
      return j;
    }
    u(paramContext);
    return j;
  }
  
  public static String i(Context paramContext)
  {
    if (h != null) {
      return h;
    }
    paramContext = h(paramContext) + "*" + g(paramContext);
    h = paramContext;
    return paramContext;
  }
  
  public static String j(Context paramContext)
  {
    a(paramContext);
    return k;
  }
  
  public static java.net.Proxy k(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.getType() == 1)) {
        return null;
      }
      paramContext = android.net.Proxy.getDefaultHost();
      if ((paramContext != null) && (!paramContext.equals("")))
      {
        paramContext = new java.net.Proxy(Proxy.Type.HTTP, new InetSocketAddress(android.net.Proxy.getDefaultHost(), android.net.Proxy.getDefaultPort()));
        return paramContext;
      }
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static int l(Context paramContext)
  {
    if (m != -1) {
      return m;
    }
    try
    {
      m = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_CPID");
      return m;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        m = 0;
        n.f("===", "得到CPID 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static int m(Context paramContext)
  {
    if (n != -1) {
      return n;
    }
    try
    {
      n = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_APPFEE_ID");
      return n;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        n = -1;
        n.f("===", "得到serviceId 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String n(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    paramContext = paramContext.getPackageName();
    n.f("", "包名为" + paramContext);
    return paramContext;
  }
  
  public static String o(Context paramContext)
  {
    return e.g(paramContext);
  }
  
  public static String p(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
  }
  
  public static String q(Context paramContext)
  {
    r = new HashMap();
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    r.put("CallState", paramContext.getCallState());
    r.put("DataState", paramContext.getDataState());
    r.put("DeviceId", paramContext.getDeviceId());
    r.put("Line1Number", paramContext.getLine1Number());
    r.put("NetworkCountryIso", paramContext.getNetworkCountryIso());
    r.put("NetworkOperator", paramContext.getNetworkOperator());
    r.put("NetworkOperatorName", paramContext.getNetworkOperatorName());
    r.put("SimSerialNumber", paramContext.getSimSerialNumber());
    r.put("PhoneType", paramContext.getPhoneType());
    r.put("SimCountryIso", paramContext.getSimCountryIso());
    r.put("SimOperator", paramContext.getSimOperator());
    r.put("SimOperatorName", paramContext.getSimOperatorName());
    r.put("SimSerialNumber", paramContext.getSimSerialNumber());
    r.put("SimState", paramContext.getSimState());
    r.put("SubscriberId", paramContext.getSubscriberId());
    s = (String)r.get("SubscriberId");
    try
    {
      Method localMethod = paramContext.getClass().getDeclaredMethod("getCallStateGemini", new Class[] { Integer.TYPE });
      String str = "SIM卡1信息:\n" + d;
      d = str;
      d = str + "\n\nSIM卡2信息:";
      r.put("CallState_1", localMethod.invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("DataState_1", paramContext.getClass().getMethod("getDataStateGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("DeviceId_1", paramContext.getClass().getMethod("getDeviceIdGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("Line1Number_1", paramContext.getClass().getMethod("getLine1NumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("NetworkCountryIso_1", paramContext.getClass().getMethod("getNetworkCountryIsoGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("NetworkOperator_1", paramContext.getClass().getMethod("getNetworkOperatorGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("NetworkOperatorName_1", paramContext.getClass().getMethod("getNetworkOperatorNameGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SimSerialNumber_1", paramContext.getClass().getMethod("getSimSerialNumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("PhoneType_1", paramContext.getClass().getMethod("getPhoneTypeGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SimCountryIso_1", paramContext.getClass().getMethod("getSimCountryIsoGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SimOperator_1", paramContext.getClass().getMethod("getSimOperatorGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SimOperatorName_1", paramContext.getClass().getMethod("getSimOperatorNameGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SimSerialNumber_1", paramContext.getClass().getMethod("getSimSerialNumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SimState_1", paramContext.getClass().getMethod("getSimStateGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      r.put("SubscriberId_1", paramContext.getClass().getMethod("getSubscriberIdGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      t = (String)r.get("SubscriberId_1");
      if ((s != null) || (s.length() > 0)) {
        return s;
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        d = "SIM卡信息:\n" + d;
      }
      if ((s != null) || ((s.length() > 0) && (t != null)) || (t.length() > 0)) {
        return s;
      }
      if ((s == null) || ((s.length() == 0) && (t != null)) || (t.length() > 0)) {
        return t;
      }
    }
    return s;
  }
  
  public static String r(Context paramContext)
  {
    try
    {
      paramContext = (ActivityManager)paramContext.getSystemService("activity");
      ActivityManager.MemoryInfo localMemoryInfo = new ActivityManager.MemoryInfo();
      paramContext.getMemoryInfo(localMemoryInfo);
      l1 = localMemoryInfo.availMem / 1024L;
      return l1;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        long l1 = 0L;
      }
    }
  }
  
  public static String s(Context paramContext)
  {
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l1 = localStatFs.getBlockSize();
      paramContext = Formatter.formatFileSize(paramContext, localStatFs.getBlockCount() * l1);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static String t(Context paramContext)
  {
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l1 = localStatFs.getBlockSize();
      paramContext = Formatter.formatFileSize(paramContext, localStatFs.getAvailableBlocks() * l1);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  private static void u(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    j = localDisplayMetrics.heightPixels;
    i = localDisplayMetrics.widthPixels;
  }
}
