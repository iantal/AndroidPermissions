package com.zhangzhifu.sdk.util;

import android.content.Context;
import android.net.ConnectivityManager;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class f
{
  public static int a = -1;
  
  public static void a(Context paramContext)
  {
    if ((com.zhangzhifu.sdk.b.m.a) || (com.zhangzhifu.sdk.b.m.b) || (com.zhangzhifu.sdk.b.m.c) || (com.zhangzhifu.sdk.b.m.f) || (com.zhangzhifu.sdk.b.m.e) || (com.zhangzhifu.sdk.b.m.g) || (com.zhangzhifu.sdk.b.m.h)) {
      return;
    }
    b(paramContext);
  }
  
  public static void a(Context paramContext, boolean paramBoolean)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    try
    {
      Object localObject = Class.forName(paramContext.getClass().getName()).getDeclaredField("mService");
      ((Field)localObject).setAccessible(true);
      paramContext = ((Field)localObject).get(paramContext);
      localObject = Class.forName(paramContext.getClass().getName()).getDeclaredMethod("setMobileDataEnabled", new Class[] { Boolean.TYPE });
      ((Method)localObject).setAccessible(true);
      ((Method)localObject).invoke(paramContext, new Object[] { Boolean.valueOf(paramBoolean) });
      return;
    }
    catch (ClassNotFoundException paramContext)
    {
      n.f("==", "ClassNotFoundException");
      paramContext.printStackTrace();
      return;
    }
    catch (NoSuchFieldException paramContext)
    {
      n.f("==", "NoSuchFieldException");
      paramContext.printStackTrace();
      return;
    }
    catch (SecurityException paramContext)
    {
      n.f("==", "SecurityException");
      paramContext.printStackTrace();
      return;
    }
    catch (NoSuchMethodException paramContext)
    {
      n.f("==", "NoSuchMethodException");
      paramContext.printStackTrace();
      return;
    }
    catch (IllegalArgumentException paramContext)
    {
      n.f("==", "IllegalArgumentException");
      paramContext.printStackTrace();
      return;
    }
    catch (IllegalAccessException paramContext)
    {
      n.f("==", "IllegalAccessException");
      paramContext.printStackTrace();
      return;
    }
    catch (InvocationTargetException paramContext)
    {
      n.f("==", "InvocationTargetException");
      paramContext.printStackTrace();
    }
  }
  
  public static void b(Context paramContext)
  {
    m localM;
    if (a != -1)
    {
      n.f("", "开始恢复网络：" + a);
      localM = new m(paramContext);
      switch (a)
      {
      }
    }
    for (;;)
    {
      a = -1;
      return;
      localM.a();
      continue;
      localM.b();
      a(paramContext, true);
      continue;
      localM.b();
      a(paramContext, false);
    }
  }
}
