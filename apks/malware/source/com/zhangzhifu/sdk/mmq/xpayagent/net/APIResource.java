package com.zhangzhifu.sdk.mmq.xpayagent.net;

import com.zhangzhifu.sdk.mmq.xpayagent.WaterWest;
import com.zhangzhifu.sdk.mmq.xpayagent.exception.APIException;
import com.zhangzhifu.sdk.mmq.xpayagent.exception.AuthenticationException;
import com.zhangzhifu.sdk.mmq.xpayagent.exception.InvalidRequestException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

public abstract class APIResource
{
  public static final String CHARSET = "UTF-8";
  
  public APIResource() {}
  
  private static String a(InputStream paramInputStream)
  {
    String str = new Scanner(paramInputStream, "UTF-8").useDelimiter("\\A").next();
    paramInputStream.close();
    return str;
  }
  
  private static HttpURLConnection a(String paramString1, String paramString2, String paramString3)
  {
    HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL(paramString1).openConnection();
    localHttpURLConnection.setConnectTimeout(15000);
    localHttpURLConnection.setReadTimeout(60000);
    localHttpURLConnection.setUseCaches(false);
    HashMap localHashMap = new HashMap();
    localHashMap.put("Accept-Charset", "UTF-8");
    localHashMap.put("User-Agent", String.format("WaterWest/v1", new Object[0]));
    paramString1 = paramString3;
    if (paramString3 == null) {
      paramString1 = WaterWest.apiKey;
    }
    localHashMap.put("Authorization", String.format("Beer %s", new Object[] { paramString1 }));
    paramString1 = localHashMap.entrySet().iterator();
    for (;;)
    {
      if (!paramString1.hasNext())
      {
        localHttpURLConnection.setDoOutput(true);
        localHttpURLConnection.setRequestMethod("POST");
        localHttpURLConnection.setRequestProperty("Content-Type", String.format("application/x-www-form-urlencoded;charset=%s", new Object[] { "UTF-8" }));
        paramString1 = null;
      }
      try
      {
        paramString3 = localHttpURLConnection.getOutputStream();
        paramString1 = paramString3;
        paramString3.write(paramString2.getBytes("UTF-8"));
        return localHttpURLConnection;
      }
      finally
      {
        if (paramString1 == null) {
          break;
        }
        paramString1.close();
      }
      paramString3 = (Map.Entry)paramString1.next();
      localHttpURLConnection.setRequestProperty((String)paramString3.getKey(), (String)paramString3.getValue());
    }
  }
  
  private static Map a(Map paramMap)
  {
    if (paramMap == null) {
      return new HashMap();
    }
    HashMap localHashMap = new HashMap();
    paramMap = paramMap.entrySet().iterator();
    for (;;)
    {
      if (!paramMap.hasNext()) {
        return localHashMap;
      }
      Object localObject1 = (Map.Entry)paramMap.next();
      String str = (String)((Map.Entry)localObject1).getKey();
      Object localObject2 = ((Map.Entry)localObject1).getValue();
      if ((localObject2 instanceof Map))
      {
        localObject1 = new HashMap();
        localObject2 = ((Map)localObject2).entrySet().iterator();
        for (;;)
        {
          if (!((Iterator)localObject2).hasNext())
          {
            localHashMap.putAll(a((Map)localObject1));
            break;
          }
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject2).next();
          ((Map)localObject1).put(String.format("%s[%s]", new Object[] { str, localEntry.getKey() }), localEntry.getValue());
        }
      }
      if ((localObject2 instanceof ArrayList))
      {
        localObject1 = (ArrayList)localObject2;
        localObject2 = new HashMap();
        int j = ((ArrayList)localObject1).size();
        int i = 0;
        for (;;)
        {
          if (i >= j)
          {
            localHashMap.putAll(a((Map)localObject2));
            break;
          }
          ((Map)localObject2).put(String.format("%s[%d]", new Object[] { str, Integer.valueOf(i) }), ((ArrayList)localObject1).get(i));
          i += 1;
        }
      }
      if ("".equals(localObject2)) {
        throw new InvalidRequestException("You cannot set '" + str + "' to an empty string. We interpret empty strings as null in requests. You may set '" + str + "' to null to delete the property.", str, null);
      }
      if (localObject2 == null) {
        localHashMap.put(str, "");
      } else {
        localHashMap.put(str, localObject2.toString());
      }
    }
  }
  
  /* Error */
  private static WaterWestResponse b(String paramString1, String paramString2, String paramString3)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore 4
    //   6: aload_0
    //   7: aload_1
    //   8: aload_2
    //   9: invokestatic 208	com/zhangzhifu/sdk/mmq/xpayagent/net/APIResource:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/net/HttpURLConnection;
    //   12: astore_0
    //   13: aload_0
    //   14: astore 4
    //   16: aload_0
    //   17: astore 5
    //   19: aload_0
    //   20: invokevirtual 211	java/net/HttpURLConnection:getResponseCode	()I
    //   23: istore_3
    //   24: iload_3
    //   25: sipush 200
    //   28: if_icmplt +54 -> 82
    //   31: iload_3
    //   32: sipush 300
    //   35: if_icmpge +47 -> 82
    //   38: aload_0
    //   39: astore 4
    //   41: aload_0
    //   42: astore 5
    //   44: aload_0
    //   45: invokevirtual 215	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   48: invokestatic 217	com/zhangzhifu/sdk/mmq/xpayagent/net/APIResource:a	(Ljava/io/InputStream;)Ljava/lang/String;
    //   51: astore_1
    //   52: aload_0
    //   53: astore 4
    //   55: aload_0
    //   56: astore 5
    //   58: new 219	com/zhangzhifu/sdk/mmq/xpayagent/net/WaterWestResponse
    //   61: dup
    //   62: iload_3
    //   63: aload_1
    //   64: aload_0
    //   65: invokevirtual 223	java/net/HttpURLConnection:getHeaderFields	()Ljava/util/Map;
    //   68: invokespecial 226	com/zhangzhifu/sdk/mmq/xpayagent/net/WaterWestResponse:<init>	(ILjava/lang/String;Ljava/util/Map;)V
    //   71: astore_1
    //   72: aload_0
    //   73: ifnull +7 -> 80
    //   76: aload_0
    //   77: invokevirtual 229	java/net/HttpURLConnection:disconnect	()V
    //   80: aload_1
    //   81: areturn
    //   82: aload_0
    //   83: astore 4
    //   85: aload_0
    //   86: astore 5
    //   88: aload_0
    //   89: invokevirtual 232	java/net/HttpURLConnection:getErrorStream	()Ljava/io/InputStream;
    //   92: invokestatic 217	com/zhangzhifu/sdk/mmq/xpayagent/net/APIResource:a	(Ljava/io/InputStream;)Ljava/lang/String;
    //   95: astore_1
    //   96: goto -44 -> 52
    //   99: astore_0
    //   100: aload 4
    //   102: astore 5
    //   104: new 234	com/zhangzhifu/sdk/mmq/xpayagent/exception/APIConnectionException
    //   107: dup
    //   108: ldc -20
    //   110: iconst_2
    //   111: anewarray 4	java/lang/Object
    //   114: dup
    //   115: iconst_0
    //   116: invokestatic 239	com/zhangzhifu/sdk/mmq/xpayagent/WaterWest:getApiBase	()Ljava/lang/String;
    //   119: aastore
    //   120: dup
    //   121: iconst_1
    //   122: aload_0
    //   123: invokevirtual 242	java/io/IOException:getMessage	()Ljava/lang/String;
    //   126: aastore
    //   127: invokestatic 80	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   130: aload_0
    //   131: invokespecial 245	com/zhangzhifu/sdk/mmq/xpayagent/exception/APIConnectionException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   134: athrow
    //   135: astore_0
    //   136: aload 5
    //   138: ifnull +8 -> 146
    //   141: aload 5
    //   143: invokevirtual 229	java/net/HttpURLConnection:disconnect	()V
    //   146: aload_0
    //   147: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	148	0	paramString1	String
    //   0	148	1	paramString2	String
    //   0	148	2	paramString3	String
    //   23	40	3	i	int
    //   4	97	4	str	String
    //   1	141	5	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   6	13	99	java/io/IOException
    //   19	24	99	java/io/IOException
    //   44	52	99	java/io/IOException
    //   58	72	99	java/io/IOException
    //   88	96	99	java/io/IOException
    //   6	13	135	finally
    //   19	24	135	finally
    //   44	52	135	finally
    //   58	72	135	finally
    //   88	96	135	finally
    //   104	135	135	finally
  }
  
  protected static String classURL(Class paramClass)
  {
    return String.format("%ss", new Object[] { singleClassURL(paramClass) });
  }
  
  public static String getChargeResult(String paramString1, Map paramMap, String paramString2)
  {
    for (;;)
    {
      try
      {
        localObject1 = a(paramMap);
        paramMap = new StringBuilder();
        localObject1 = ((Map)localObject1).entrySet().iterator();
        if (!((Iterator)localObject1).hasNext()) {
          paramMap = paramMap.toString();
        }
      }
      catch (UnsupportedEncodingException paramString1)
      {
        Object localObject1;
        int i;
        Object localObject2;
        String str;
        throw new InvalidRequestException("Unable to encode parameters to UTF-8", null, paramString1);
      }
      try
      {
        paramString1 = b(paramString1, paramMap, paramString2);
        i = paramString1.responseCode;
        paramString1 = paramString1.bo;
        if ((i >= 200) && (i < 300)) {
          break;
        }
        paramString1 = new a((byte)0);
        switch (i)
        {
        case 402: 
        case 403: 
        default: 
          throw new APIException(paramString1.bm, null);
        }
      }
      catch (ClassCastException paramString1)
      {
        throw paramString1;
      }
      localObject2 = (Map.Entry)((Iterator)localObject1).next();
      if (paramMap.length() > 0) {
        paramMap.append("&");
      }
      str = (String)((Map.Entry)localObject2).getKey();
      localObject2 = (String)((Map.Entry)localObject2).getValue();
      paramMap.append(String.format("%s=%s", new Object[] { h(str), h((String)localObject2) }));
    }
    throw new InvalidRequestException(paramString1.bm, paramString1.aI, null);
    throw new InvalidRequestException(paramString1.bm, paramString1.aI, null);
    throw new AuthenticationException(paramString1.bm);
    return paramString1;
  }
  
  public static String getResult(String paramString1, Map paramMap, String paramString2)
  {
    return getChargeResult(paramString1, paramMap, paramString2);
  }
  
  private static String h(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return URLEncoder.encode(paramString, "UTF-8");
  }
  
  protected static String instanceURL(Class paramClass, String paramString)
  {
    try
    {
      paramClass = String.format("%s/%s", new Object[] { classURL(paramClass), h(paramString) });
      return paramClass;
    }
    catch (UnsupportedEncodingException paramClass)
    {
      throw new InvalidRequestException("Unable to encode parameters to UTF-8", null, paramClass);
    }
  }
  
  protected static String singleClassURL(Class paramClass)
  {
    String str2 = WaterWest.getApiBase();
    String str1 = paramClass.getSimpleName().toLowerCase().replace("$", " ");
    paramClass = str1;
    if (str1.equals("redenvelope")) {
      paramClass = "red_envelope";
    }
    return String.format("%s/v1/%s", new Object[] { str2, paramClass });
  }
}
