package com.DefaultCompany.HWInfo;

import android.util.Log;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.regex.Pattern;

public class CPUInfo
{
  public CPUInfo() {}
  
  /* Error */
  public String getCpuName()
  {
    // Byte code:
    //   0: new 20	java/io/BufferedReader
    //   3: dup
    //   4: new 22	java/io/FileReader
    //   7: dup
    //   8: ldc 24
    //   10: invokespecial 27	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   13: invokespecial 30	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   16: astore_2
    //   17: aload_2
    //   18: invokevirtual 33	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   21: ldc 35
    //   23: iconst_2
    //   24: invokevirtual 41	java/lang/String:split	(Ljava/lang/String;I)[Ljava/lang/String;
    //   27: astore_3
    //   28: aload_2
    //   29: invokevirtual 44	java/io/BufferedReader:close	()V
    //   32: iconst_0
    //   33: istore_1
    //   34: iload_1
    //   35: aload_3
    //   36: arraylength
    //   37: if_icmplt +9 -> 46
    //   40: aload_3
    //   41: iconst_1
    //   42: aaload
    //   43: astore_2
    //   44: aload_2
    //   45: areturn
    //   46: iload_1
    //   47: iconst_1
    //   48: iadd
    //   49: istore_1
    //   50: goto -16 -> 34
    //   53: astore_2
    //   54: aload_2
    //   55: invokevirtual 47	java/io/FileNotFoundException:printStackTrace	()V
    //   58: aconst_null
    //   59: areturn
    //   60: astore_2
    //   61: aload_2
    //   62: invokevirtual 48	java/io/IOException:printStackTrace	()V
    //   65: goto -7 -> 58
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	68	0	this	CPUInfo
    //   33	17	1	i	int
    //   16	29	2	localBufferedReader	BufferedReader
    //   53	2	2	localFileNotFoundException	FileNotFoundException
    //   60	2	2	localIOException	IOException
    //   27	14	3	arrayOfString	String[]
    // Exception table:
    //   from	to	target	type
    //   0	32	53	java/io/FileNotFoundException
    //   34	40	53	java/io/FileNotFoundException
    //   0	32	60	java/io/IOException
    //   34	40	60	java/io/IOException
  }
  
  public String getCurCpuFreq()
  {
    String str3 = "N/A";
    String str1 = str3;
    String str2 = str3;
    try
    {
      BufferedReader localBufferedReader = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq"));
      str1 = str3;
      str2 = str3;
      str3 = localBufferedReader.readLine().trim();
      str1 = str3;
      str2 = str3;
      localBufferedReader.close();
      return str3;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return str1;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return localFileNotFoundException;
  }
  
  public String getMaxCpuFreq()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public String getMinCpuFreq()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public int getNumCores()
  {
    try
    {
      File[] arrayOfFile = new File("/sys/devices/system/cpu/").listFiles(new FileFilter()
      {
        public boolean accept(File paramAnonymousFile)
        {
          return Pattern.matches("cpu[0-9]", paramAnonymousFile.getName());
        }
      });
      Log.d("NOVA", "CPU Count: " + arrayOfFile.length);
      int i = arrayOfFile.length;
      return i;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return 1;
  }
}
