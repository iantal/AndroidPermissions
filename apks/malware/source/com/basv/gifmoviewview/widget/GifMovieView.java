package com.basv.gifmoviewview.widget;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Movie;
import android.os.Build.VERSION;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;

public class GifMovieView
  extends View
{
  private static final int DEFAULT_MOVIEW_DURATION = 1000;
  private int mCurrentAnimationTime = 0;
  private float mLeft;
  private int mMeasuredMovieHeight;
  private int mMeasuredMovieWidth;
  private Movie mMovie;
  private int mMovieResourceId;
  private long mMovieStart;
  private volatile boolean mPaused = false;
  private float mScale;
  private float mTop;
  private boolean mVisible = true;
  
  public GifMovieView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public GifMovieView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public GifMovieView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    setViewAttributes(paramContext, paramAttributeSet, paramInt);
  }
  
  private void drawMovieFrame(Canvas paramCanvas)
  {
    this.mMovie.setTime(this.mCurrentAnimationTime);
    paramCanvas.save(1);
    paramCanvas.scale(this.mScale, this.mScale);
    this.mMovie.draw(paramCanvas, this.mLeft / this.mScale, this.mTop / this.mScale);
    paramCanvas.restore();
  }
  
  @SuppressLint({"NewApi"})
  private void invalidateView()
  {
    if (this.mVisible)
    {
      if (Build.VERSION.SDK_INT >= 16) {
        postInvalidateOnAnimation();
      }
    }
    else {
      return;
    }
    invalidate();
  }
  
  @SuppressLint({"NewApi"})
  private void setViewAttributes(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 11) {
      setLayerType(1, null);
    }
    this.mMovieResourceId = -1;
    this.mPaused = false;
    if (this.mMovieResourceId != -1) {
      this.mMovie = Movie.decodeStream(getResources().openRawResource(this.mMovieResourceId));
    }
  }
  
  private void updateAnimationTime()
  {
    long l = SystemClock.uptimeMillis();
    if (this.mMovieStart == 0L) {
      this.mMovieStart = l;
    }
    int j = this.mMovie.duration();
    int i = j;
    if (j == 0) {
      i = 1000;
    }
    this.mCurrentAnimationTime = ((int)((l - this.mMovieStart) % i));
  }
  
  public Movie getMovie()
  {
    return this.mMovie;
  }
  
  public boolean isPaused()
  {
    return this.mPaused;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    if (this.mMovie != null)
    {
      if (!this.mPaused)
      {
        updateAnimationTime();
        drawMovieFrame(paramCanvas);
        invalidateView();
      }
    }
    else {
      return;
    }
    drawMovieFrame(paramCanvas);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    this.mLeft = ((getWidth() - this.mMeasuredMovieWidth) / 2.0F);
    this.mTop = ((getHeight() - this.mMeasuredMovieHeight) / 2.0F);
    if (getVisibility() == 0) {}
    for (paramBoolean = true;; paramBoolean = false)
    {
      this.mVisible = paramBoolean;
      return;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = 1;
    int k;
    int m;
    int j;
    float f1;
    if (this.mMovie != null)
    {
      k = this.mMovie.width();
      m = this.mMovie.height();
      int n = View.MeasureSpec.getMode(paramInt1);
      j = 0;
      if (n == 0) {
        break label202;
      }
      paramInt1 = View.MeasureSpec.getSize(paramInt1);
      if (k > paramInt1)
      {
        f1 = k / paramInt1;
        paramInt1 = j;
      }
    }
    for (;;)
    {
      float f2;
      if (View.MeasureSpec.getMode(paramInt2) != 0)
      {
        paramInt2 = View.MeasureSpec.getSize(paramInt2);
        if (m > paramInt2) {
          f2 = m / paramInt2;
        }
      }
      for (;;)
      {
        label89:
        if (paramInt1 != 0) {}
        for (this.mScale = Math.min(f1, f2);; this.mScale = (1.0F / Math.max(f1, f2)))
        {
          this.mMeasuredMovieWidth = ((int)(k * this.mScale));
          this.mMeasuredMovieHeight = ((int)(m * this.mScale));
          setMeasuredDimension(this.mMeasuredMovieWidth, this.mMeasuredMovieHeight);
          return;
          f1 = paramInt1 / k;
          paramInt1 = 1;
          break;
          f2 = paramInt2 / m;
          paramInt1 = i;
          break label89;
        }
        setMeasuredDimension(getSuggestedMinimumWidth(), getSuggestedMinimumHeight());
        return;
        f2 = 1.0F;
      }
      label202:
      f1 = 1.0F;
      paramInt1 = j;
    }
  }
  
  @SuppressLint({"NewApi"})
  public void onScreenStateChanged(int paramInt)
  {
    boolean bool = true;
    super.onScreenStateChanged(paramInt);
    if (paramInt == 1) {}
    for (;;)
    {
      this.mVisible = bool;
      invalidateView();
      return;
      bool = false;
    }
  }
  
  @SuppressLint({"NewApi"})
  protected void onVisibilityChanged(View paramView, int paramInt)
  {
    super.onVisibilityChanged(paramView, paramInt);
    if (paramInt == 0) {}
    for (boolean bool = true;; bool = false)
    {
      this.mVisible = bool;
      invalidateView();
      return;
    }
  }
  
  protected void onWindowVisibilityChanged(int paramInt)
  {
    super.onWindowVisibilityChanged(paramInt);
    if (paramInt == 0) {}
    for (boolean bool = true;; bool = false)
    {
      this.mVisible = bool;
      invalidateView();
      return;
    }
  }
  
  public void setMovie(Movie paramMovie)
  {
    this.mMovie = paramMovie;
    requestLayout();
  }
  
  public void setMovieResource(int paramInt)
  {
    this.mMovieResourceId = paramInt;
    this.mMovie = Movie.decodeStream(getResources().openRawResource(this.mMovieResourceId));
    requestLayout();
  }
  
  public void setMovieTime(int paramInt)
  {
    this.mCurrentAnimationTime = paramInt;
    invalidate();
  }
  
  public void setPaused(boolean paramBoolean)
  {
    this.mPaused = paramBoolean;
    if (!paramBoolean) {
      this.mMovieStart = (SystemClock.uptimeMillis() - this.mCurrentAnimationTime);
    }
    invalidate();
  }
}
