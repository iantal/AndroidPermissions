package com.pollfish.e;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.Log;
import com.pollfish.a.a;
import com.pollfish.f.b;
import com.pollfish.f.c;
import com.pollfish.main.PollFish;
import java.net.URL;

public class a
{
  public static Bitmap a(Context paramContext)
  {
    paramContext = a(paramContext, "images/pollfish_indicator_left.png", a.a.f, false);
    if (paramContext != null) {}
    try
    {
      int i = c.a(paramContext, "indicator_left.png");
      b.a("ResImages", "indic_left hashBtmp: " + i);
      if (i == -1491025382)
      {
        b.a("ResImages", "indic_left approved");
        return paramContext;
      }
      Log.w("Pollfish", "You should not change the images of the library");
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        b.b("ResImages", "indic_left approved error: " + paramContext);
      }
    }
    return null;
  }
  
  private static Bitmap a(Context paramContext, String paramString, int paramInt, boolean paramBoolean)
  {
    paramString = PollFish.class.getClassLoader().getResource(paramString);
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inScaled = paramBoolean;
    if (paramString == null) {
      return BitmapFactory.decodeResource(paramContext.getResources(), paramInt, localOptions);
    }
    try
    {
      paramContext = BitmapFactory.decodeStream(paramString.openStream(), null, localOptions);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      com.pollfish.f.b.a.a(paramContext);
      new RuntimeException("BITMAP NOT DECODED");
    }
    return null;
  }
  
  public static Drawable a(Context paramContext, Bitmap paramBitmap)
  {
    return new BitmapDrawable(paramContext.getResources(), paramBitmap);
  }
  
  public static Bitmap b(Context paramContext)
  {
    paramContext = a(paramContext, "images/pollfish_indicator_right.png", a.a.g, false);
    if (paramContext != null) {}
    try
    {
      int i = c.a(paramContext, "indicator_right.png");
      b.a("ResImages", "indicator_right hashBtmp: " + i);
      if (i == 264519317)
      {
        b.a("ResImages", "indicator_right approved");
        return paramContext;
      }
      Log.w("Pollfish", "You should not change the images of the library");
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        b.b("ResImages", "indicator_right approved error: " + paramContext);
      }
    }
    return null;
  }
  
  public static Bitmap c(Context paramContext)
  {
    paramContext = a(paramContext, "images/pollfish_indicator_win_left.png", a.a.h, false);
    if (paramContext != null) {}
    try
    {
      int i = c.a(paramContext, "indicator_win_left.png");
      b.a("ResImages", "indicator_win_left hashBtmp: " + i);
      if (i == -1942405355)
      {
        b.a("ResImages", "indicator_win_left approved");
        return paramContext;
      }
      Log.w("Pollfish", "You should not change the images of the library");
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        b.b("ResImages", "indicator_win_left approved error: " + paramContext);
      }
    }
    return null;
  }
  
  public static Bitmap d(Context paramContext)
  {
    paramContext = a(paramContext, "images/pollfish_indicator_win_right.png", a.a.i, false);
    if (paramContext != null) {}
    try
    {
      int i = c.a(paramContext, "indicator_win_right.png");
      b.a("ResImages", "indicator_win_right hashBtmp: " + i);
      if (i == -1130941472)
      {
        b.a("ResImages", "indicator_win_right approved");
        return paramContext;
      }
      Log.w("Pollfish", "You should not change the images of the library");
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        b.b("ResImages", "indicator_win_right approved error: " + paramContext);
      }
    }
    return null;
  }
}
