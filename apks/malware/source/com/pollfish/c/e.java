package com.pollfish.c;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import com.pollfish.a.c;
import com.pollfish.f.b;
import com.pollfish.f.b.a;
import com.pollfish.interfaces.a.a;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;

public class e
  extends g
{
  private c a;
  private Activity b;
  private String c;
  private String d;
  private a.a e;
  
  public e(c paramC, Activity paramActivity, a.a paramA)
  {
    this.a = paramC;
    this.b = paramActivity;
    this.e = paramA;
    this.c = (paramActivity.getApplicationContext().getCacheDir().getAbsolutePath() + "/" + "pollfish_cache" + paramC.a());
    try
    {
      this.d = this.c.substring(this.c.lastIndexOf("/") + 1, this.c.length());
      return;
    }
    catch (Exception paramC)
    {
      b.b("DownloadAssetTask", "Error retrieving file parent and name: " + this.d);
      a.a(paramC);
    }
  }
  
  private boolean a(Context paramContext, Bitmap paramBitmap, String paramString)
  {
    if (paramBitmap != null) {}
    try
    {
      return a(paramBitmap, paramString);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        a.a(paramContext);
        b.b("DownloadAssetTask", "Bitmap not loaded: " + paramContext);
      }
    }
    b.a("DownloadAssetTask", "bitmap = null for path: " + paramString);
    return false;
  }
  
  private boolean a(Bitmap paramBitmap, String paramString)
  {
    paramString = new File(paramString);
    try
    {
      FileOutputStream localFileOutputStream = new FileOutputStream(paramString);
      paramBitmap.compress(Bitmap.CompressFormat.PNG, 100, localFileOutputStream);
      localFileOutputStream.flush();
      localFileOutputStream.close();
      return true;
    }
    catch (FileNotFoundException paramBitmap)
    {
      b.b("DownloadAssetTask", "writeToCacheFromBitmap error: " + paramBitmap);
      a.a(paramBitmap);
    }
    catch (IOException paramBitmap)
    {
      try
      {
        for (;;)
        {
          if (paramString.exists()) {
            paramString.delete();
          }
          return false;
          paramBitmap = paramBitmap;
          b.b("DownloadAssetTask", "writeToCacheFromBitmap error: " + paramBitmap);
          a.a(paramBitmap);
        }
      }
      catch (Exception paramBitmap)
      {
        for (;;)
        {
          a.a(paramBitmap);
          b.b("DownloadAssetTask", "writeToCacheFromBitmap error: " + paramBitmap);
        }
      }
    }
  }
  
  private boolean a(InputStream paramInputStream, File paramFile)
  {
    try
    {
      FileOutputStream localFileOutputStream = new FileOutputStream(paramFile);
      byte[] arrayOfByte = new byte['Ä€'];
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte);
        if (i == -1) {
          break;
        }
        localFileOutputStream.write(arrayOfByte, 0, i);
      }
      boolean bool;
      return false;
    }
    catch (Exception paramInputStream)
    {
      b.b("DownloadAssetTask", "writeToMemoryFromInputStream error: " + paramInputStream);
      a.a(paramInputStream);
      try
      {
        if (paramFile.exists()) {
          paramFile.delete();
        }
        return false;
      }
      catch (Exception paramFile)
      {
        a.a(paramFile);
        b.b("DownloadAssetTask", "writeToMemoryFromInputStream error: " + paramInputStream);
      }
      localFileOutputStream.close();
      bool = paramFile.exists();
      return bool;
    }
  }
  
  private boolean a(String paramString)
  {
    for (;;)
    {
      try
      {
        paramString = new URL(paramString).openConnection();
        paramString.setConnectTimeout(5000);
        paramString.setReadTimeout(5000);
        paramString.connect();
        paramString = paramString.getInputStream();
        localBufferedInputStream = new BufferedInputStream(paramString, 8192);
        if (this.a.e() == 1)
        {
          Bitmap localBitmap = BitmapFactory.decodeStream(localBufferedInputStream);
          bool = a(this.b, localBitmap, this.c);
        }
      }
      catch (IOException paramString)
      {
        BufferedInputStream localBufferedInputStream;
        bool = false;
        b.b("DownloadAssetTask", "Error getting the ASSET from server: " + paramString);
        a.a(paramString);
        return bool;
      }
      catch (Exception paramString)
      {
        boolean bool = false;
        a.a(paramString);
        b.b("DownloadAssetTask", "Error getting the ASSET from server: " + paramString);
        return bool;
      }
      try
      {
        localBufferedInputStream.close();
        paramString.close();
        return bool;
      }
      catch (Exception paramString)
      {
        continue;
      }
      catch (IOException paramString)
      {
        continue;
      }
      bool = a(paramString, new File(this.c));
    }
  }
  
  protected Boolean a(Void... paramVarArgs)
  {
    boolean bool = new File(this.c).exists();
    b.a("DownloadAssetTask", "file: " + this.d + " exists in cache: " + bool);
    if (!bool) {
      b.a("DownloadAssetTask", "Downloading file: " + this.d);
    }
    for (bool = a(this.a.d());; bool = true) {
      return Boolean.valueOf(bool);
    }
  }
  
  protected void a(Boolean paramBoolean)
  {
    b.a("DownloadAssetTask", "Downloading file with name: " + this.d + " with sucess: " + paramBoolean);
    if (paramBoolean.booleanValue()) {
      this.e.a(this.a.a());
    }
    this.e.a();
  }
}
