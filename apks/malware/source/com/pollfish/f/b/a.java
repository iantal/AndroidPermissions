package com.pollfish.f.b;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.Xml;
import com.pollfish.f.b;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import org.xmlpull.v1.XmlSerializer;

public class a
{
  private static String a = "production";
  private static String b = "unknown";
  private static String c = String.valueOf(5);
  private static String d = Build.MODEL;
  private static String e = Build.VERSION.RELEASE;
  private static Map f;
  private static String g;
  private static boolean h = false;
  private static boolean i = false;
  private static String j;
  private static boolean k = false;
  private static String l = "";
  
  public static void a(Context paramContext, String paramString1, String paramString2, boolean paramBoolean1, boolean paramBoolean2)
  {
    h = paramBoolean2;
    if (paramString1 != null)
    {
      g = paramString1;
      if (paramContext == null) {
        throw new IllegalArgumentException("context cannot be null.");
      }
    }
    else
    {
      throw new RuntimeException("AirbrakeNotifier requires an Airbrake API key.");
    }
    if (paramString2 != null) {
      a = paramString2;
    }
    a(paramBoolean1);
    paramString1 = Thread.getDefaultUncaughtExceptionHandler();
    if ((!(paramString1 instanceof a)) && ((paramString2.equals("production")) || (!paramBoolean1))) {
      Thread.setDefaultUncaughtExceptionHandler(new a(paramString1));
    }
    try
    {
      b = paramContext.getPackageName();
      paramString1 = paramContext.getPackageManager().getPackageInfo(b, 0);
      if (paramString1.versionName != null) {
        c = paramString1.versionName;
      }
      j = paramContext.getFilesDir().getAbsolutePath() + "/unsent_airbrake_exceptions/";
      if (j != null)
      {
        paramContext = new File(j);
        paramContext.mkdirs();
        k = paramContext.exists();
        b.a("AirbrakeNotifier", "Registered and ready to handle exceptions.");
      }
      return;
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        b.b("AirbrakeNotifier", "Exception caught:" + paramString1);
      }
    }
  }
  
  public static void a(Context paramContext, String paramString1, boolean paramBoolean, String paramString2)
  {
    h = paramBoolean;
    l = paramString2;
    if (!paramBoolean) {}
    try
    {
      a(paramContext, paramString1, "production", true, paramBoolean);
      return;
    }
    catch (Exception paramContext)
    {
      b.b("AirbrakeNotifier", "register exception : " + paramContext);
    }
  }
  
  /* Error */
  private static void a(File paramFile)
  {
    // Byte code:
    //   0: new 184	java/net/URL
    //   3: dup
    //   4: ldc -70
    //   6: invokespecial 187	java/net/URL:<init>	(Ljava/lang/String;)V
    //   9: invokevirtual 191	java/net/URL:openConnection	()Ljava/net/URLConnection;
    //   12: checkcast 193	java/net/HttpURLConnection
    //   15: astore_2
    //   16: aload_2
    //   17: iconst_1
    //   18: invokevirtual 196	java/net/HttpURLConnection:setDoOutput	(Z)V
    //   21: aload_2
    //   22: ldc -58
    //   24: ldc -56
    //   26: invokevirtual 203	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   29: new 205	java/io/FileInputStream
    //   32: dup
    //   33: aload_0
    //   34: invokespecial 207	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   37: astore_3
    //   38: aload_2
    //   39: invokevirtual 211	java/net/HttpURLConnection:getOutputStream	()Ljava/io/OutputStream;
    //   42: astore 4
    //   44: sipush 4096
    //   47: newarray byte
    //   49: astore 5
    //   51: aload_3
    //   52: aload 5
    //   54: invokevirtual 215	java/io/FileInputStream:read	([B)I
    //   57: istore_1
    //   58: iload_1
    //   59: iflt +45 -> 104
    //   62: aload 4
    //   64: aload 5
    //   66: iconst_0
    //   67: iload_1
    //   68: invokevirtual 221	java/io/OutputStream:write	([BII)V
    //   71: goto -20 -> 51
    //   74: astore_0
    //   75: ldc -96
    //   77: new 128	java/lang/StringBuilder
    //   80: dup
    //   81: invokespecial 130	java/lang/StringBuilder:<init>	()V
    //   84: ldc -87
    //   86: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   89: aload_0
    //   90: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   93: invokevirtual 148	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   96: invokestatic 174	com/pollfish/f/b:b	(Ljava/lang/String;Ljava/lang/String;)V
    //   99: aload_2
    //   100: invokevirtual 224	java/net/HttpURLConnection:disconnect	()V
    //   103: return
    //   104: aload 4
    //   106: invokevirtual 227	java/io/OutputStream:flush	()V
    //   109: aload 4
    //   111: invokevirtual 230	java/io/OutputStream:close	()V
    //   114: aload_3
    //   115: invokevirtual 231	java/io/FileInputStream:close	()V
    //   118: aload_2
    //   119: invokevirtual 235	java/net/HttpURLConnection:getResponseCode	()I
    //   122: istore_1
    //   123: ldc -96
    //   125: new 128	java/lang/StringBuilder
    //   128: dup
    //   129: invokespecial 130	java/lang/StringBuilder:<init>	()V
    //   132: ldc -19
    //   134: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   137: aload_0
    //   138: invokevirtual 240	java/io/File:getName	()Ljava/lang/String;
    //   141: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   144: ldc -14
    //   146: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   149: iload_1
    //   150: invokestatic 39	java/lang/String:valueOf	(I)Ljava/lang/String;
    //   153: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   156: invokevirtual 148	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   159: invokestatic 174	com/pollfish/f/b:b	(Ljava/lang/String;Ljava/lang/String;)V
    //   162: aload_0
    //   163: invokevirtual 245	java/io/File:delete	()Z
    //   166: pop
    //   167: aload_2
    //   168: invokevirtual 224	java/net/HttpURLConnection:disconnect	()V
    //   171: return
    //   172: astore_0
    //   173: ldc -96
    //   175: new 128	java/lang/StringBuilder
    //   178: dup
    //   179: invokespecial 130	java/lang/StringBuilder:<init>	()V
    //   182: ldc -87
    //   184: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   187: aload_0
    //   188: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   191: invokevirtual 148	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   194: invokestatic 174	com/pollfish/f/b:b	(Ljava/lang/String;Ljava/lang/String;)V
    //   197: return
    //   198: astore_0
    //   199: aload_2
    //   200: invokevirtual 224	java/net/HttpURLConnection:disconnect	()V
    //   203: aload_0
    //   204: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	205	0	paramFile	File
    //   57	93	1	m	int
    //   15	185	2	localHttpURLConnection	java.net.HttpURLConnection
    //   37	78	3	localFileInputStream	java.io.FileInputStream
    //   42	68	4	localOutputStream	java.io.OutputStream
    //   49	16	5	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   16	51	74	java/io/IOException
    //   51	58	74	java/io/IOException
    //   62	71	74	java/io/IOException
    //   104	162	74	java/io/IOException
    //   0	16	172	java/lang/Exception
    //   99	103	172	java/lang/Exception
    //   162	171	172	java/lang/Exception
    //   199	205	172	java/lang/Exception
    //   16	51	198	finally
    //   51	58	198	finally
    //   62	71	198	finally
    //   75	99	198	finally
    //   104	162	198	finally
  }
  
  public static void a(Throwable paramThrowable)
  {
    try
    {
      if (!h) {
        a(paramThrowable, null);
      }
      return;
    }
    catch (Exception paramThrowable)
    {
      b.b("AirbrakeNotifier", "notify exception : " + paramThrowable);
    }
  }
  
  public static void a(Throwable paramThrowable, final Map paramMap)
  {
    if (paramThrowable != null) {}
    try
    {
      if (k) {
        new AsyncTask()
        {
          protected Void a(Void... paramAnonymousVarArgs)
          {
            try
            {
              a.b(this.a, paramMap);
              a.a();
              return null;
            }
            catch (Exception paramAnonymousVarArgs)
            {
              for (;;)
              {
                b.b("AirbrakeNotifier", "Exception caught:" + paramAnonymousVarArgs);
              }
            }
          }
        }.execute(new Void[0]);
      }
      return;
    }
    catch (Exception paramThrowable)
    {
      b.b("AirbrakeNotifier", "notify exception : " + paramThrowable);
    }
  }
  
  public static void a(boolean paramBoolean)
  {
    i = paramBoolean;
  }
  
  /* Error */
  private static void b()
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: getstatic 150	com/pollfish/f/b/a:j	Ljava/lang/String;
    //   6: ifnull +98 -> 104
    //   9: new 136	java/io/File
    //   12: dup
    //   13: getstatic 150	com/pollfish/f/b/a:j	Ljava/lang/String;
    //   16: invokespecial 151	java/io/File:<init>	(Ljava/lang/String;)V
    //   19: astore_2
    //   20: aload_2
    //   21: invokevirtual 158	java/io/File:exists	()Z
    //   24: ifeq +80 -> 104
    //   27: aload_2
    //   28: invokevirtual 262	java/io/File:isDirectory	()Z
    //   31: ifeq +73 -> 104
    //   34: aload_2
    //   35: invokevirtual 266	java/io/File:listFiles	()[Ljava/io/File;
    //   38: astore_2
    //   39: aload_2
    //   40: arraylength
    //   41: istore_1
    //   42: iconst_0
    //   43: istore_0
    //   44: iload_0
    //   45: iload_1
    //   46: if_icmpge +58 -> 104
    //   49: aload_2
    //   50: iload_0
    //   51: aaload
    //   52: astore_3
    //   53: aload_3
    //   54: invokevirtual 158	java/io/File:exists	()Z
    //   57: ifeq +14 -> 71
    //   60: aload_3
    //   61: invokevirtual 269	java/io/File:isFile	()Z
    //   64: ifeq +7 -> 71
    //   67: aload_3
    //   68: invokestatic 271	com/pollfish/f/b/a:a	(Ljava/io/File;)V
    //   71: iload_0
    //   72: iconst_1
    //   73: iadd
    //   74: istore_0
    //   75: goto -31 -> 44
    //   78: astore_2
    //   79: ldc -96
    //   81: new 128	java/lang/StringBuilder
    //   84: dup
    //   85: invokespecial 130	java/lang/StringBuilder:<init>	()V
    //   88: ldc_w 273
    //   91: invokevirtual 143	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   94: aload_2
    //   95: invokevirtual 172	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   98: invokevirtual 148	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   101: invokestatic 174	com/pollfish/f/b:b	(Ljava/lang/String;Ljava/lang/String;)V
    //   104: ldc 2
    //   106: monitorexit
    //   107: return
    //   108: astore_2
    //   109: ldc 2
    //   111: monitorexit
    //   112: aload_2
    //   113: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   43	32	0	m	int
    //   41	6	1	n	int
    //   19	31	2	localObject1	Object
    //   78	17	2	localException	Exception
    //   108	5	2	localObject2	Object
    //   52	16	3	localFile	File
    // Exception table:
    //   from	to	target	type
    //   3	42	78	java/lang/Exception
    //   53	71	78	java/lang/Exception
    //   3	42	108	finally
    //   53	71	108	finally
    //   79	104	108	finally
  }
  
  private static void c(Throwable paramThrowable, Map paramMap)
  {
    for (;;)
    {
      BufferedWriter localBufferedWriter;
      XmlSerializer localXmlSerializer;
      try
      {
        int m = new Random().nextInt(99999);
        if (j != null)
        {
          localBufferedWriter = new BufferedWriter(new FileWriter(j + c + "-" + String.valueOf(m) + ".xml"));
          localXmlSerializer = Xml.newSerializer();
          localXmlSerializer.setOutput(localBufferedWriter);
          localXmlSerializer.startDocument("UTF-8", Boolean.valueOf(true));
          localXmlSerializer.startTag("", "notice");
          localXmlSerializer.attribute("", "version", "2.0");
          localXmlSerializer.startTag("", "api-key");
          localXmlSerializer.text(g);
          localXmlSerializer.endTag("", "api-key");
          localXmlSerializer.startTag("", "notifier");
          localXmlSerializer.startTag("", "name");
          localXmlSerializer.text("Android Airbrake Notifier");
          localXmlSerializer.endTag("", "name");
          localXmlSerializer.startTag("", "version");
          localXmlSerializer.text("1.3.0");
          localXmlSerializer.endTag("", "version");
          localXmlSerializer.startTag("", "url");
          localXmlSerializer.text("http://lbdb.pollfish.com:3000");
          localXmlSerializer.endTag("", "url");
          localXmlSerializer.endTag("", "notifier");
          localXmlSerializer.startTag("", "error");
          localXmlSerializer.startTag("", "class");
          localXmlSerializer.text(paramThrowable.getClass().getName());
          localXmlSerializer.endTag("", "class");
          localXmlSerializer.startTag("", "message");
          localXmlSerializer.text("[" + l + " - appVers: " + c + "] " + paramThrowable.toString());
          localXmlSerializer.endTag("", "message");
          localXmlSerializer.startTag("", "backtrace");
          Throwable localThrowable1 = paramThrowable;
          if (localThrowable1 != null) {
            try
            {
              StackTraceElement[] arrayOfStackTraceElement = localThrowable1.getStackTrace();
              int n = arrayOfStackTraceElement.length;
              m = 0;
              if (m >= n) {
                break label1145;
              }
              StackTraceElement localStackTraceElement = arrayOfStackTraceElement[m];
              localXmlSerializer.startTag("", "line");
              try
              {
                localXmlSerializer.attribute("", "method", localStackTraceElement.getClassName() + "." + localStackTraceElement.getMethodName());
                if (localStackTraceElement.getFileName() != null) {
                  continue;
                }
                str = "Unknown";
                localXmlSerializer.attribute("", "file", str);
                localXmlSerializer.attribute("", "number", String.valueOf(localStackTraceElement.getLineNumber()));
              }
              catch (Throwable localThrowable3)
              {
                String str;
                b.b("AirbrakeNotifier", "Exception caught:" + localThrowable3);
                continue;
              }
              localXmlSerializer.endTag("", "line");
              m += 1;
              continue;
              str = localStackTraceElement.getFileName();
              continue;
              localXmlSerializer.endTag("", "backtrace");
            }
            catch (Throwable localThrowable2)
            {
              b.b("AirbrakeNotifier", "Exception caught:" + paramThrowable);
            }
          }
          localXmlSerializer.endTag("", "error");
          localXmlSerializer.startTag("", "request");
          localXmlSerializer.startTag("", "url");
          localXmlSerializer.endTag("", "url");
          localXmlSerializer.startTag("", "component");
          localXmlSerializer.endTag("", "component");
          localXmlSerializer.startTag("", "action");
          localXmlSerializer.endTag("", "action");
          localXmlSerializer.startTag("", "cgi-data");
          localXmlSerializer.startTag("", "var");
          localXmlSerializer.attribute("", "key", "Device");
          localXmlSerializer.text(d);
          localXmlSerializer.endTag("", "var");
          localXmlSerializer.startTag("", "var");
          localXmlSerializer.attribute("", "key", "Android Version");
          localXmlSerializer.text(e);
          localXmlSerializer.endTag("", "var");
          localXmlSerializer.startTag("", "var");
          localXmlSerializer.attribute("", "key", "App Version");
          localXmlSerializer.text(l + " - appVers: " + c);
          localXmlSerializer.endTag("", "var");
          if ((f == null) || (f.isEmpty())) {
            break label1268;
          }
          localObject = f.entrySet().iterator();
          if (!((Iterator)localObject).hasNext()) {
            break label1268;
          }
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
          localXmlSerializer.startTag("", "var");
          localXmlSerializer.attribute("", "key", (String)localEntry.getKey());
          localXmlSerializer.text((String)localEntry.getValue());
          localXmlSerializer.endTag("", "var");
          continue;
        }
        return;
      }
      catch (Exception paramThrowable)
      {
        b.b("AirbrakeNotifier", "Exception caught:" + paramThrowable);
      }
      label1145:
      Object localObject = ((Throwable)localObject).getCause();
      if (localObject != null)
      {
        localXmlSerializer.startTag("", "line");
        try
        {
          localXmlSerializer.attribute("", "file", "### CAUSED BY ###: " + ((Throwable)localObject).toString());
          localXmlSerializer.attribute("", "number", "");
          localXmlSerializer.endTag("", "line");
        }
        catch (Throwable localThrowable4)
        {
          for (;;)
          {
            b.b("AirbrakeNotifier", "Exception caught:" + localThrowable4);
          }
        }
        label1268:
        if ((paramMap != null) && (!paramMap.isEmpty()))
        {
          paramMap = paramMap.entrySet().iterator();
          while (paramMap.hasNext())
          {
            localObject = (Map.Entry)paramMap.next();
            localXmlSerializer.startTag("", "var");
            localXmlSerializer.attribute("", "key", (String)((Map.Entry)localObject).getKey());
            localXmlSerializer.text((String)((Map.Entry)localObject).getValue());
            localXmlSerializer.endTag("", "var");
          }
        }
        localXmlSerializer.endTag("", "cgi-data");
        localXmlSerializer.endTag("", "request");
        localXmlSerializer.startTag("", "server-environment");
        localXmlSerializer.startTag("", "environment-name");
        localXmlSerializer.text(a);
        localXmlSerializer.endTag("", "environment-name");
        localXmlSerializer.startTag("", "app-version");
        localXmlSerializer.text(l + " - appVers: " + c);
        localXmlSerializer.endTag("", "app-version");
        localXmlSerializer.endTag("", "server-environment");
        localXmlSerializer.endTag("", "notice");
        localXmlSerializer.endDocument();
        localBufferedWriter.flush();
        localBufferedWriter.close();
        b.b("AirbrakeNotifier", "Writing new " + paramThrowable.getClass().getName() + " exception to disk.");
        return;
      }
    }
  }
  
  private static class a
    implements Thread.UncaughtExceptionHandler
  {
    private Thread.UncaughtExceptionHandler a;
    
    public a(Thread.UncaughtExceptionHandler paramUncaughtExceptionHandler)
    {
      this.a = paramUncaughtExceptionHandler;
    }
    
    public void uncaughtException(Thread paramThread, Throwable paramThrowable)
    {
      a.a(paramThrowable);
      this.a.uncaughtException(paramThread, paramThrowable);
    }
  }
}
