package com.hzpz.pay.jsoup.helper;

import com.hzpz.pay.jsoup.Connection.Base;
import com.hzpz.pay.jsoup.Connection.Method;
import java.net.URL;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

abstract class d
  implements Connection.Base
{
  URL a;
  Connection.Method b;
  Map c = new LinkedHashMap();
  Map d = new LinkedHashMap();
  
  private d() {}
  
  private String e(String paramString)
  {
    Validate.a(paramString, "Header name must not be null");
    Object localObject2 = (String)this.c.get(paramString);
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = (String)this.c.get(paramString.toLowerCase());
    }
    localObject2 = localObject1;
    if (localObject1 == null)
    {
      paramString = f(paramString);
      localObject2 = localObject1;
      if (paramString != null) {
        localObject2 = (String)paramString.getValue();
      }
    }
    return localObject2;
  }
  
  private Map.Entry f(String paramString)
  {
    paramString = paramString.toLowerCase();
    Iterator localIterator = this.c.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      if (((String)localEntry.getKey()).toLowerCase().equals(paramString)) {
        return localEntry;
      }
    }
    return null;
  }
  
  public Connection.Base a(Connection.Method paramMethod)
  {
    Validate.a(paramMethod, "Method must not be null");
    this.b = paramMethod;
    return this;
  }
  
  public Connection.Base a(String paramString1, String paramString2)
  {
    Validate.a(paramString1, "Header name must not be empty");
    Validate.a(paramString2, "Header value must not be null");
    c(paramString1);
    this.c.put(paramString1, paramString2);
    return this;
  }
  
  public Connection.Base a(URL paramURL)
  {
    Validate.a(paramURL, "URL must not be null");
    this.a = paramURL;
    return this;
  }
  
  public String a(String paramString)
  {
    Validate.a(paramString, "Header name must not be null");
    return e(paramString);
  }
  
  public URL a()
  {
    return this.a;
  }
  
  public Connection.Base b(String paramString1, String paramString2)
  {
    Validate.a(paramString1, "Cookie name must not be empty");
    Validate.a(paramString2, "Cookie value must not be null");
    this.d.put(paramString1, paramString2);
    return this;
  }
  
  public Connection.Method b()
  {
    return this.b;
  }
  
  public boolean b(String paramString)
  {
    Validate.a(paramString, "Header name must not be empty");
    return e(paramString) != null;
  }
  
  public Connection.Base c(String paramString)
  {
    Validate.a(paramString, "Header name must not be empty");
    paramString = f(paramString);
    if (paramString != null) {
      this.c.remove(paramString.getKey());
    }
    return this;
  }
  
  public Map c()
  {
    return this.c;
  }
  
  public boolean c(String paramString1, String paramString2)
  {
    return (b(paramString1)) && (a(paramString1).equalsIgnoreCase(paramString2));
  }
  
  public Map d()
  {
    return this.d;
  }
  
  public boolean d(String paramString)
  {
    Validate.a(paramString, "Cookie name must not be empty");
    return this.d.containsKey(paramString);
  }
}
