package com.soft.android.appinstaller;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import com.soft.android.appinstaller.core.Internals;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;

public class MemberActivity
  extends Activity
{
  private ArrayAdapter<String> adapter = null;
  private Button buttonExit;
  private Button buttonRefresh;
  private List<String> data;
  ProgressDialog dialog = null;
  private List<String> links;
  private ListView lv1;
  private final String memberZone = GlobalConfig.getInstance().getValue("memberZone");
  private String memberZoneLink = this.memberZone;
  private List<String> types;
  
  public MemberActivity() {}
  
  public void onCreate(Bundle paramBundle)
  {
    Log.v("MemberActivity", "onCreate");
    super.onCreate(paramBundle);
    GlobalConfig.getInstance().init(this);
    OpInfo.getInstance().init(this);
    this.buttonExit = ((Button)findViewById(2131165197));
    this.buttonRefresh = ((Button)findViewById(2131165198));
    this.buttonExit.setText(OpInfo.getInstance().getInternals().getOverridableValueForLocation("ui.memberscreen.buttons.exit.caption", this.buttonExit.getText().toString()));
    this.buttonRefresh.setText(OpInfo.getInstance().getInternals().getOverridableValueForLocation("ui.memberscreen.buttons.refresh.caption", this.buttonRefresh.getText().toString()));
    this.data = RemoteCache.getInstance().getData();
    this.links = RemoteCache.getInstance().getLinks();
    this.types = RemoteCache.getInstance().getTypes();
    setContentView(2130903042);
    setTitle("Content");
    this.adapter = new ArrayAdapter(this, 17367043, this.data);
    this.lv1 = ((ListView)findViewById(2131165196));
    this.lv1.setAdapter(this.adapter);
    this.lv1.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        Log.v("TYPE", (String)MemberActivity.this.types.get(paramAnonymousInt));
        if (((String)MemberActivity.this.types.get(paramAnonymousInt)).equals("dir"))
        {
          RemoteCache.getInstance().getHistory().push(MemberActivity.this.memberZoneLink);
          MemberActivity.access$102(MemberActivity.this, MemberActivity.this.memberZone + (String)MemberActivity.this.links.get(paramAnonymousInt));
          MemberActivity.this.readWebpage(paramAnonymousView, false);
        }
        while (!((String)MemberActivity.this.types.get(paramAnonymousInt)).equals("content")) {
          return;
        }
        if (GlobalConfig.getInstance().existsRuntimeValue("smsWasSent")) {}
        for (paramAnonymousAdapterView = Uri.parse(MemberActivity.this.memberZone + (String)MemberActivity.this.links.get(paramAnonymousInt) + "&o=1");; paramAnonymousAdapterView = Uri.parse(MemberActivity.this.memberZone + (String)MemberActivity.this.links.get(paramAnonymousInt)))
        {
          paramAnonymousAdapterView = new Intent("android.intent.action.VIEW", paramAnonymousAdapterView);
          MemberActivity.this.startActivity(paramAnonymousAdapterView);
          return;
        }
      }
    });
    if (this.data.isEmpty()) {
      readWebpage(null, true);
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      if (RemoteCache.getInstance().getHistory().isEmpty()) {
        return true;
      }
      this.memberZoneLink = ((String)RemoteCache.getInstance().getHistory().pop());
      readWebpage(null, false);
      return true;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public void onMemberExitClicked(View paramView)
  {
    Log.v("MemberActivity", "exit clicked");
    finish();
  }
  
  public void onMemberOpenClicked(View paramView)
  {
    Log.v("MemberActivity", "Open clicked");
    readWebpage(paramView, true);
  }
  
  public void readWebpage(View paramView, boolean paramBoolean)
  {
    if (GlobalConfig.getInstance().existsRuntimeValue("smsWasSent")) {
      if (!this.memberZoneLink.equals(this.memberZone)) {
        break label149;
      }
    }
    label149:
    for (this.memberZoneLink = this.memberZoneLink.concat("?o=1");; this.memberZoneLink = this.memberZoneLink.concat("&o=1"))
    {
      if ((paramBoolean) && (RemoteCache.getInstance().getCache().containsKey(this.memberZoneLink)))
      {
        RemoteCache.getInstance().getCache().remove(this.memberZoneLink);
        Log.v("REMOVED_FROM_CACHE", this.memberZoneLink);
      }
      this.dialog = ProgressDialog.show(this, "", "Please wait for few seconds...", true);
      Log.v("MemberActivity", "readWebPage = " + this.memberZoneLink);
      new DownloadWebPageTask(null).execute(new String[] { this.memberZoneLink });
      return;
    }
  }
  
  private class DownloadWebPageTask
    extends AsyncTask<String, Void, String>
  {
    private DownloadWebPageTask() {}
    
    protected String doInBackground(String... paramVarArgs)
    {
      Log.v("MemberActivity", "doInBackground");
      StringBuffer localStringBuffer1 = new StringBuffer();
      int j = paramVarArgs.length;
      int i = 0;
      if (i < j)
      {
        String str = paramVarArgs[i];
        if (RemoteCache.getInstance().getCache().containsKey(str))
        {
          Log.v("USING_CACHE", "TRUE");
          localStringBuffer1.append((String)RemoteCache.getInstance().getCache().get(str));
        }
        Object localObject2;
        StringBuffer localStringBuffer2;
        for (;;)
        {
          i += 1;
          break;
          Log.v("USING_CACHE", "FALSE");
          localObject1 = new DefaultHttpClient();
          Log.v("doInBackground", str);
          localObject2 = new HttpGet(str);
          localStringBuffer2 = new StringBuffer();
          try
          {
            localObject1 = ((DefaultHttpClient)localObject1).execute((HttpUriRequest)localObject2);
            int k = ((HttpResponse)localObject1).getStatusLine().getStatusCode();
            switch (k)
            {
            }
          }
          catch (Exception localException)
          {
            for (;;)
            {
              Log.v("MemberActivity", "ex: " + localException.getMessage());
              continue;
              localStringBuffer1.append("ERROR 403");
              localStringBuffer1.append('\n');
            }
          }
          if (!RemoteCache.getInstance().getCache().containsKey(str)) {
            RemoteCache.getInstance().getCache().put(str, localStringBuffer2.toString());
          }
        }
        Object localObject1 = new BufferedReader(new InputStreamReader(((HttpResponse)localObject1).getEntity().getContent()));
        for (;;)
        {
          localObject2 = ((BufferedReader)localObject1).readLine();
          if (localObject2 == null) {
            break;
          }
          localStringBuffer1.append((String)localObject2);
          localStringBuffer1.append('\n');
          localStringBuffer2.append((String)localObject2);
          localStringBuffer2.append('\n');
        }
      }
      return localStringBuffer1.toString();
    }
    
    protected void onPostExecute(String paramString)
    {
      if (paramString.startsWith("ERROR"))
      {
        Log.v("onPostExecute", "403");
        paramString = new Intent(MemberActivity.this.getApplicationContext(), FirstActivity.class);
        MemberActivity.this.startActivityForResult(paramString, 0);
        MemberActivity.this.finish();
      }
      for (;;)
      {
        try
        {
          if (MemberActivity.this.dialog != null) {
            MemberActivity.this.dialog.dismiss();
          }
          return;
        }
        catch (Exception paramString) {}
        Log.v("MemberActivity", "onPostExecute");
        HashConfig localHashConfig = new HashConfig();
        localHashConfig.init(paramString);
        MemberActivity.this.data.clear();
        MemberActivity.this.links.clear();
        MemberActivity.this.types.clear();
        int i = 0;
        if (localHashConfig.get(String.valueOf(i) + "_name") != null)
        {
          MemberActivity.this.data.add(localHashConfig.getParam(String.valueOf(i) + "_name", "<null>"));
          MemberActivity.this.links.add(localHashConfig.getParam(String.valueOf(i) + "_link", ""));
          MemberActivity.this.types.add(localHashConfig.getParam(String.valueOf(i) + "_type", ""));
          i += 1;
        }
        else
        {
          MemberActivity.this.adapter.notifyDataSetChanged();
          MemberActivity.access$602(MemberActivity.this, (ListView)MemberActivity.this.findViewById(2131165196));
          MemberActivity.this.lv1.setSelection(0);
          MemberActivity.this.setTitle(localHashConfig.getParam("name", "Content"));
        }
      }
    }
  }
}
