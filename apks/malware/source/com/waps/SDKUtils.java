package com.waps;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.Intent.ShortcutIconResource;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.Browser;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import android.webkit.WebView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class SDKUtils
{
  WebView a;
  private Context b;
  private PackageManager c;
  private ApplicationInfo d;
  private String e = "";
  private PackageInfo f;
  private Handler g;
  private RelativeLayout h;
  private LinearLayout i;
  
  public SDKUtils(Context paramContext)
  {
    this.b = paramContext;
  }
  
  public SDKUtils(Context paramContext, Handler paramHandler, RelativeLayout paramRelativeLayout, LinearLayout paramLinearLayout)
  {
    this.b = paramContext;
    this.g = paramHandler;
    this.h = paramRelativeLayout;
    this.i = paramLinearLayout;
    this.a = this.a;
  }
  
  public static String getClassName(Context paramContext, String paramString)
  {
    String str = "";
    try
    {
      if (!isNull(paramString)) {
        str = getMetaData(paramContext, paramString);
      }
      paramContext = str;
      if (isNull(str)) {
        paramContext = "com.waps.OffersWebView";
      }
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getErrorLog(Throwable paramThrowable)
  {
    try
    {
      StringWriter localStringWriter = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter(localStringWriter);
      paramThrowable.printStackTrace(localPrintWriter);
      for (paramThrowable = paramThrowable.getCause(); paramThrowable != null; paramThrowable = paramThrowable.getCause()) {
        paramThrowable.printStackTrace(localPrintWriter);
      }
      paramThrowable = localStringWriter.toString();
      return paramThrowable;
    }
    catch (Exception paramThrowable) {}
    return "";
  }
  
  public static String getMetaData(Context paramContext, String paramString)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    try
    {
      paramContext = localPackageManager.getApplicationInfo(paramContext.getPackageName(), 128);
      if ((paramContext != null) && (paramContext.metaData != null))
      {
        paramContext = paramContext.metaData.getString(paramString);
        boolean bool = isNull(paramContext);
        if (!bool) {
          return paramContext;
        }
      }
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  protected static Class getOfferClass(Context paramContext, String paramString)
  {
    try
    {
      paramContext = Class.forName(getClassName(paramContext, paramString));
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static boolean isNull(String paramString)
  {
    return (paramString == null) || ("".equals(paramString.trim()));
  }
  
  public void addBrowserBookmark(String paramString1, String paramString2)
  {
    try
    {
      ContentResolver localContentResolver = this.b.getContentResolver();
      localContentResolver.delete(Browser.BOOKMARKS_URI, "title=?", new String[] { paramString1 });
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("bookmark", Integer.valueOf(1));
      localContentValues.put("title", paramString1);
      localContentValues.put("url", paramString2);
      localContentResolver.insert(Browser.BOOKMARKS_URI, localContentValues);
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public void callTel(String paramString)
  {
    Intent localIntent = new Intent();
    localIntent.setAction("android.intent.action.DIAL");
    localIntent.setData(Uri.parse("tel:" + paramString));
    this.b.startActivity(localIntent);
  }
  
  public void close()
  {
    ((Activity)this.b).finish();
  }
  
  public void closeAd()
  {
    try
    {
      this.g.post(new as(this));
      return;
    }
    catch (Exception localException) {}
  }
  
  public void closeOfDialog(String paramString)
  {
    submit((String)AppConnect.d(this.b).get("message_title"), paramString);
  }
  
  public void closeSubmit(String paramString)
  {
    Toast.makeText(this.b, paramString, 1).show();
    ((Activity)this.b).finish();
  }
  
  public void createMoreShortcut_forUrl(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    if (paramString4 != null) {}
    try
    {
      if (!paramString4.equals(""))
      {
        if ((paramString5 != null) && (!paramString5.equals("")))
        {
          createShortcut_forUrl(paramString1, paramString2, paramString3, paramString4, paramString5);
          return;
        }
        createShortcut_forUrl(paramString1, paramString2, paramString3, paramString4);
        return;
      }
      createShortcut_forUrl(paramString1, paramString2, paramString3);
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public void createShortcut_forApp(String paramString)
  {
    for (;;)
    {
      try
      {
        localObject2 = getAppInfoMap(paramString);
        if ((localObject2 == null) || (((Map)localObject2).size() <= 0)) {
          continue;
        }
        localObject1 = (String)((Map)localObject2).get("appName");
        j = ((Integer)((Map)localObject2).get("appIcon")).intValue();
        String str = (String)((Map)localObject2).get("activityName");
        localObject2 = new Intent("com.android.launcher.action.INSTALL_SHORTCUT");
        ((Intent)localObject2).putExtra("android.intent.extra.shortcut.NAME", (String)localObject1);
        ((Intent)localObject2).putExtra("duplicate", false);
        localObject1 = new ComponentName(paramString, str);
        ((Intent)localObject2).putExtra("android.intent.extra.shortcut.INTENT", new Intent("android.intent.action.MAIN").setComponent((ComponentName)localObject1));
        localObject1 = null;
        if (!this.b.getPackageName().equals(paramString)) {
          continue;
        }
        paramString = this.b;
      }
      catch (Exception paramString)
      {
        try
        {
          Object localObject2;
          int j;
          paramString = this.b.createPackageContext(paramString, 3);
        }
        catch (PackageManager.NameNotFoundException paramString)
        {
          Object localObject1;
          paramString = (String)localObject1;
        }
        paramString = paramString;
        return;
      }
      if (paramString != null) {
        ((Intent)localObject2).putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(paramString, j));
      }
      this.b.sendBroadcast((Intent)localObject2);
      return;
    }
  }
  
  public void createShortcut_forUrl(String paramString1, String paramString2, String paramString3)
  {
    createShortcut_forUrl(paramString1, paramString2, paramString3, "");
  }
  
  public void createShortcut_forUrl(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    createShortcut_forUrl(paramString1, paramString2, paramString3, paramString4, "");
  }
  
  public void createShortcut_forUrl(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    String str = loadStringFromLocal("DesktopI.dat", "/Android/data/cache");
    Intent localIntent;
    if ((str == null) || (str.equals("")) || (!str.contains(paramString1)))
    {
      localIntent = new Intent("com.android.launcher.action.INSTALL_SHORTCUT");
      localIntent.putExtra("android.intent.extra.shortcut.NAME", paramString1);
      localIntent.putExtra("duplicate", false);
      if ((paramString4 == null) || ("".equals(paramString4))) {
        break label279;
      }
      if ((paramString5 == null) || ("".equals(paramString5.trim()))) {
        break label234;
      }
      paramString4 = goToTargetBrowser_Intent(paramString4, paramString5, paramString2, this.b.getPackageManager());
      if (paramString4 == null) {
        break label253;
      }
      localIntent.putExtra("android.intent.extra.shortcut.INTENT", paramString4);
      label135:
      paramString2 = null;
    }
    try
    {
      paramString3 = BitmapFactory.decodeStream(getNetDataToStream(paramString3));
      if (!getDeviceName().toLowerCase().contains("motoa953")) {
        break label305;
      }
      paramString3 = Bitmap.createScaledBitmap(paramString3, 48, 48, true);
      paramString2 = paramString3;
    }
    catch (Exception paramString3)
    {
      label174:
      for (;;) {}
    }
    if (paramString2 != null) {
      localIntent.putExtra("android.intent.extra.shortcut.ICON", paramString2);
    }
    for (;;)
    {
      this.b.sendBroadcast(localIntent);
      saveDataToLocal(str + paramString1 + ";", "DesktopI.dat", "/Android/data/cache", true);
      return;
      label234:
      paramString4 = goToTargetBrowser_Intent(paramString4, paramString2, this.b.getPackageManager());
      break;
      label253:
      localIntent.putExtra("android.intent.extra.shortcut.INTENT", new Intent("android.intent.action.VIEW", Uri.parse(paramString2)));
      break label135;
      label279:
      localIntent.putExtra("android.intent.extra.shortcut.INTENT", new Intent("android.intent.action.VIEW", Uri.parse(paramString2)));
      break label135;
      label305:
      paramString3 = Bitmap.createScaledBitmap(paramString3, 80, 80, true);
      paramString2 = paramString3;
      break label174;
      localIntent.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(this.b, 17301516));
    }
  }
  
  public void deleteLocalFiles(File paramFile)
  {
    try
    {
      if (paramFile.exists())
      {
        if (paramFile.isFile())
        {
          paramFile.delete();
          return;
        }
        if (paramFile.isDirectory())
        {
          paramFile = paramFile.listFiles();
          int k = paramFile.length;
          int j = 0;
          while (j < k)
          {
            deleteLocalFiles(paramFile[j]);
            j += 1;
          }
        }
      }
      return;
    }
    catch (Exception paramFile) {}
  }
  
  public void full_screen()
  {
    this.g.post(new au(this));
  }
  
  public String[] getAllPermissions()
  {
    Object localObject = this.b.getPackageManager();
    try
    {
      localObject = ((PackageManager)localObject).getPackageInfo(this.b.getPackageName(), 4096).requestedPermissions;
      return localObject;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public Map getAppInfoMap(String paramString)
  {
    try
    {
      HashMap localHashMap = new HashMap();
      PackageManager localPackageManager = this.b.getPackageManager();
      Object localObject1 = new Intent("android.intent.action.MAIN", null);
      ((Intent)localObject1).addCategory("android.intent.category.LAUNCHER");
      localObject1 = localPackageManager.queryIntentActivities((Intent)localObject1, 1);
      int j = 0;
      while (j < ((List)localObject1).size())
      {
        Object localObject2 = (ResolveInfo)((List)localObject1).get(j);
        if (((ResolveInfo)localObject2).activityInfo.packageName.equals(paramString))
        {
          String str = ((ResolveInfo)localObject2).loadLabel(localPackageManager).toString();
          int k = ((ResolveInfo)localObject2).activityInfo.applicationInfo.icon;
          localObject2 = ((ResolveInfo)localObject2).activityInfo.name;
          if ((localObject2 != null) && (!"".equals(((String)localObject2).trim())))
          {
            localHashMap.put("appName", str);
            localHashMap.put("appIcon", Integer.valueOf(k));
            localHashMap.put("activityName", localObject2);
            return localHashMap;
          }
        }
        j += 1;
      }
      return null;
    }
    catch (Exception paramString) {}
  }
  
  public String getAppVersion(String paramString)
  {
    try
    {
      paramString = this.b.createPackageContext(paramString, 3);
      this.c = paramString.getPackageManager();
      this.f = this.c.getPackageInfo(paramString.getPackageName(), 0);
      if (this.f != null)
      {
        paramString = this.f.versionName;
        if ((paramString != null) && (!"".equals(paramString.trim()))) {
          return paramString;
        }
        Log.i("WAPS_SDK", "The app is not exist.");
      }
    }
    catch (PackageManager.NameNotFoundException paramString)
    {
      for (;;) {}
    }
    return "";
  }
  
  public String getBrowserPackageName(String paramString)
  {
    String str1;
    try
    {
      String str2 = getInstalled();
      if ((paramString != null) && (!"".equals(paramString.trim())))
      {
        if (paramString.indexOf(";") < 0)
        {
          str1 = paramString;
          if (!str2.contains(paramString)) {
            break label98;
          }
        }
        else
        {
          paramString = paramString.split(";");
          int j = 0;
          while (j < paramString.length)
          {
            if (str2.contains(paramString[j]))
            {
              paramString = paramString[j];
              return paramString;
            }
            j += 1;
          }
        }
      }
      else {
        str1 = "";
      }
    }
    catch (Exception paramString)
    {
      return "";
    }
    return str1;
    label98:
    return "";
  }
  
  public String getCountryCode()
  {
    return Locale.getDefault().getCountry();
  }
  
  public String getDeviceName()
  {
    return Build.MODEL;
  }
  
  public int getDeviceOSVersion()
  {
    return Integer.parseInt(Build.VERSION.SDK);
  }
  
  public String getDownload(String paramString)
  {
    try
    {
      new w(this.b, null, paramString).execute(new String[] { paramString });
      return "";
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
      }
    }
  }
  
  public String getDownload(String paramString1, String paramString2)
  {
    try
    {
      new w(this.b, null, paramString1, paramString2).execute(new String[] { paramString1 });
      return "";
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        paramString1.printStackTrace();
      }
    }
  }
  
  public HttpResponse getHttpResponse(String paramString)
  {
    Object localObject1;
    if (!isCmwap()) {
      try
      {
        paramString = new HttpGet(paramString.replaceAll(" ", "%20"));
        localObject1 = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, 150000);
        HttpConnectionParams.setSoTimeout((HttpParams)localObject1, 300000);
        paramString = new DefaultHttpClient((HttpParams)localObject1).execute(paramString);
        return paramString;
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return null;
      }
    }
    try
    {
      HttpHost localHttpHost = new HttpHost("10.0.0.172", 80, "http");
      Object localObject2;
      if (paramString.startsWith("http://app"))
      {
        localObject2 = new HttpHost("app.wapx.cn", 80, "http");
        localObject1 = paramString.replaceAll(" ", "%20").replaceFirst("http://app.wapx.cn", "");
      }
      for (paramString = (String)localObject2;; paramString = (String)localObject2)
      {
        localObject1 = new HttpGet((String)localObject1);
        localObject2 = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout((HttpParams)localObject2, 15000);
        HttpConnectionParams.setSoTimeout((HttpParams)localObject2, 30000);
        localObject2 = new DefaultHttpClient((HttpParams)localObject2);
        ((HttpClient)localObject2).getParams().setParameter("http.route.default-proxy", localHttpHost);
        return ((HttpClient)localObject2).execute(paramString, (HttpRequest)localObject1);
        localObject2 = new HttpHost("ads.wapx.cn", 80, "http");
        localObject1 = paramString.replaceAll(" ", "%20").replaceFirst("http://ads.wapx.cn", "");
      }
      return null;
    }
    catch (Exception paramString) {}
  }
  
  public String getImsi()
  {
    try
    {
      Object localObject = (TelephonyManager)this.b.getSystemService("phone");
      if (localObject != null)
      {
        localObject = ((TelephonyManager)localObject).getSubscriberId();
        return localObject;
      }
    }
    catch (Exception localException)
    {
      return "";
    }
    return "";
  }
  
  public String getInstalled()
  {
    String str1 = "";
    String str2 = str1;
    for (;;)
    {
      try
      {
        this.c = this.b.getPackageManager();
        str2 = str1;
        List localList = this.c.getInstalledPackages(0);
        int j = 0;
        str2 = str1;
        Object localObject = str1;
        if (j < localList.size())
        {
          str2 = str1;
          localObject = (PackageInfo)localList.get(j);
          str2 = str1;
          int k = ((PackageInfo)localObject).applicationInfo.flags;
          str2 = str1;
          ApplicationInfo localApplicationInfo = ((PackageInfo)localObject).applicationInfo;
          if ((k & 0x1) <= 0)
          {
            str2 = str1;
            str1 = str1 + ((PackageInfo)localObject).packageName + ";";
            j += 1;
          }
        }
        else
        {
          return localObject;
        }
      }
      catch (Exception localException)
      {
        localObject = str2;
      }
    }
  }
  
  public String getLanguageCode()
  {
    return Locale.getDefault().getLanguage();
  }
  
  public List getList(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    int j;
    if ((paramString != null) && (!"".equals(paramString)) && (paramString.indexOf("[;]") >= 0))
    {
      paramString = paramString.split("\\[;\\]");
      j = 0;
    }
    while (j < paramString.length)
    {
      localArrayList.add(paramString[j]);
      j += 1;
      continue;
      localArrayList.add(paramString);
    }
    return localArrayList;
  }
  
  public String getLocation()
  {
    Object localObject = "";
    try
    {
      String str1 = getLocationByGPS();
      if (str1 != null)
      {
        localObject = str1;
        if (!str1.equals(""))
        {
          str2 = str1;
          localObject = str1;
          if (!str1.equals("0.0;0.0")) {
            break label44;
          }
        }
      }
      localObject = str1;
      String str2 = getLocationByNetwork();
      label44:
      return str2;
    }
    catch (Exception localException) {}
    return localObject;
  }
  
  public String getLocationByGPS()
  {
    try
    {
      if (hasThePermission("ACCESS_FINE_LOCATION"))
      {
        Object localObject = (LocationManager)this.b.getSystemService("location");
        if (((LocationManager)localObject).isProviderEnabled("gps"))
        {
          localObject = ((LocationManager)localObject).getLastKnownLocation("gps");
          if (localObject != null)
          {
            double d1 = ((Location)localObject).getLongitude();
            double d2 = ((Location)localObject).getLatitude();
            localObject = d1 + ";" + d2;
            return localObject;
          }
        }
      }
    }
    catch (Exception localException) {}
    return "";
  }
  
  public String getLocationByNetwork()
  {
    try
    {
      Object localObject = (LocationManager)this.b.getSystemService("location");
      ((LocationManager)localObject).requestLocationUpdates("network", 1000L, 0.0F, new av(this));
      localObject = ((LocationManager)localObject).getLastKnownLocation("network");
      if (localObject != null)
      {
        double d1 = ((Location)localObject).getLongitude();
        double d2 = ((Location)localObject).getLatitude();
        localObject = d1 + ";" + d2;
        return localObject;
      }
    }
    catch (Exception localException) {}
    return "";
  }
  
  public String getMac_Address()
  {
    for (;;)
    {
      try
      {
        if (!hasThePermission("ACCESS_WIFI_STATE")) {
          continue;
        }
        Object localObject = ((WifiManager)this.b.getSystemService("wifi")).getConnectionInfo();
        if (localObject == null) {
          continue;
        }
        localObject = ((WifiInfo)localObject).getMacAddress();
        if ((localObject != null) && (!"".equals(((String)localObject).trim()))) {
          return localObject;
        }
        Log.i("WAPS_SDK", "The mac address is not found!");
      }
      catch (Exception localException)
      {
        continue;
      }
      return "";
      Log.i("WAPS_SDK", "Pleass check the Network connection!");
      continue;
      Log.i("WAPS_SDK", "Permission.ACCESS_WIFI_STATE is not found or the device is Emulator, Please check it!");
    }
  }
  
  public InputStream getNetDataToStream(String paramString)
  {
    try
    {
      Object localObject1 = paramString.substring(paramString.indexOf("http://") + 7, paramString.indexOf("/", paramString.indexOf("http://") + 8));
      Object localObject2 = paramString.substring(0, paramString.indexOf("/", paramString.indexOf("http://") + 8));
      if (!isCmwap()) {}
      for (paramString = new DefaultHttpClient().execute(new HttpGet(paramString.replaceAll(" ", "%20")));; paramString = ((HttpClient)localObject2).execute((HttpHost)localObject1, paramString))
      {
        return paramString.getEntity().getContent();
        HttpHost localHttpHost = new HttpHost("10.0.0.172", 80, "http");
        localObject1 = new HttpHost((String)localObject1, 80, "http");
        paramString = new HttpGet(paramString.replaceAll(" ", "%20").replaceFirst((String)localObject2, ""));
        localObject2 = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout((HttpParams)localObject2, 15000);
        HttpConnectionParams.setSoTimeout((HttpParams)localObject2, 30000);
        localObject2 = new DefaultHttpClient((HttpParams)localObject2);
        ((HttpClient)localObject2).getParams().setParameter("http.route.default-proxy", localHttpHost);
      }
      return null;
    }
    catch (Exception paramString) {}
  }
  
  public String getNodeTrimValues(NodeList paramNodeList)
  {
    Object localObject1 = "";
    int j = 0;
    if (j < paramNodeList.getLength())
    {
      Object localObject2 = (Element)paramNodeList.item(j);
      if (localObject2 == null) {
        break label200;
      }
      NodeList localNodeList = ((Element)localObject2).getChildNodes();
      if (localNodeList.getLength() > 0)
      {
        int k = 0;
        for (localObject2 = localObject1;; localObject2 = localObject1)
        {
          localObject1 = localObject2;
          if (k >= localNodeList.getLength()) {
            break;
          }
          Node localNode = localNodeList.item(k);
          localObject1 = localObject2;
          if (localNode != null) {
            localObject1 = (String)localObject2 + localNode.getNodeValue() + "[;]";
          }
          k += 1;
        }
      }
      localObject1 = (String)localObject1 + "a[;]";
    }
    label200:
    for (;;)
    {
      j += 1;
      break;
      if ((localObject1 != null) && (!((String)localObject1).equals(""))) {
        return ((String)localObject1).substring(0, ((String)localObject1).length() - 3).trim();
      }
      return null;
    }
  }
  
  public String getParams()
  {
    return AppConnect.getInstance(this.b).c(this.b);
  }
  
  public void getPushAd()
  {
    AppConnect.getInstance(this.b).getPushAd();
  }
  
  public String getRandomString(String paramString, int paramInt)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    try
    {
      if ((!isNull(paramString)) && (paramInt > 0))
      {
        int j = 0;
        while (j < paramInt)
        {
          localStringBuffer.append(paramString.charAt((int)(Math.random() * 100.0D) % 30));
          j += 1;
        }
        paramString = localStringBuffer.toString().toLowerCase();
        return paramString;
      }
    }
    catch (Exception paramString) {}
    return "";
  }
  
  public String getResponseResult(HttpResponse paramHttpResponse)
  {
    try
    {
      paramHttpResponse = EntityUtils.toString(paramHttpResponse.getEntity());
      return paramHttpResponse;
    }
    catch (Exception paramHttpResponse) {}
    return "";
  }
  
  public String getRunningAppPackageNames()
  {
    String str = "";
    label133:
    for (;;)
    {
      try
      {
        Iterator localIterator = ((ActivityManager)this.b.getSystemService("activity")).getRunningAppProcesses().iterator();
        if (localIterator.hasNext())
        {
          ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)localIterator.next();
          if (!getInstalled().contains(localRunningAppProcessInfo.processName)) {
            break label133;
          }
          str = str + localRunningAppProcessInfo.processName + ";";
          break label133;
        }
        if ((str != null) && (!"".equals(str.trim())) && (str.endsWith(";")))
        {
          str = str.substring(0, str.length() - 1);
          return str;
        }
      }
      catch (Exception localException) {}
      return "";
    }
  }
  
  public String getSDKVersion()
  {
    return "1.6.3";
  }
  
  public String getScreenStatus()
  {
    try
    {
      if (this.b.getResources().getConfiguration().orientation == 1) {
        return "true";
      }
      if (this.b.getResources().getConfiguration().orientation == 2) {
        return "false";
      }
    }
    catch (Exception localException) {}
    return "";
  }
  
  public String getUdid()
  {
    try
    {
      Object localObject = (TelephonyManager)this.b.getSystemService("phone");
      if (localObject != null)
      {
        localObject = ((TelephonyManager)localObject).getDeviceId();
        return localObject;
      }
    }
    catch (Exception localException)
    {
      return "";
    }
    return "";
  }
  
  public String getWAPS_ID()
  {
    try
    {
      AppConnect.getInstance(this.b);
      String str3 = AppConnect.a();
      String str1;
      if (str3 != null)
      {
        str1 = str3;
        if (!"".equals(str3.trim())) {}
      }
      else
      {
        this.c = this.b.getPackageManager();
        this.d = this.c.getApplicationInfo(this.b.getPackageName(), 128);
        if ((this.d != null) && (this.d.metaData != null))
        {
          str3 = this.d.metaData.getString("WAPS_ID");
          if (str3 != null)
          {
            str1 = str3;
            if (!"".equals(str3.trim())) {}
          }
          else
          {
            str1 = this.d.metaData.getString("APP_ID");
          }
          if ((str1 != null) && (!"".equals(str1.trim())))
          {
            this.e = str1.toString();
            if ((this.e != null) && (!this.e.equals(""))) {
              return this.e;
            }
          }
          else
          {
            return "";
          }
        }
      }
    }
    catch (Exception localException)
    {
      String str2 = "";
      return str2;
    }
  }
  
  public String getWAPS_PID()
  {
    this.c = this.b.getPackageManager();
    String str2 = "";
    try
    {
      this.d = this.c.getApplicationInfo(this.b.getPackageName(), 128);
      String str1 = str2;
      if (this.d != null)
      {
        str1 = str2;
        if (this.d.metaData != null)
        {
          Object localObject = this.d.metaData.get("WAPS_PID");
          str1 = str2;
          if (localObject != null)
          {
            this.e = localObject.toString();
            str1 = str2;
            if (this.e != null)
            {
              str1 = str2;
              if (!this.e.equals("")) {
                str1 = this.e;
              }
            }
          }
        }
      }
      return str1;
    }
    catch (Exception localException) {}
    return "";
  }
  
  public void goToTargetBrowser(String paramString1, String paramString2, PackageManager paramPackageManager)
  {
    try
    {
      paramString1 = goToTargetBrowser_Intent(paramString1, paramString2, paramPackageManager);
      this.b.startActivity(paramString1);
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public Intent goToTargetBrowser_Intent(String paramString1, String paramString2, PackageManager paramPackageManager)
  {
    try
    {
      paramString1 = goToTargetBrowser_Intent(paramString1, "", paramString2, paramPackageManager);
      if (paramString1 != null) {
        return paramString1;
      }
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  public Intent goToTargetBrowser_Intent(String paramString1, String paramString2, String paramString3, PackageManager paramPackageManager)
  {
    try
    {
      if (getInstalled().contains(paramString1))
      {
        Intent localIntent = paramPackageManager.getLaunchIntentForPackage(paramString1);
        paramPackageManager = localIntent;
        if (paramString2 != null)
        {
          paramPackageManager = localIntent;
          if (!"".equals(paramString2.trim()))
          {
            paramPackageManager = new Intent();
            paramPackageManager.setClassName(paramString1, paramString2);
          }
        }
        paramPackageManager.setAction("android.intent.action.VIEW");
        paramPackageManager.addCategory("android.intent.category.DEFAULT");
        paramPackageManager.setData(Uri.parse(paramString3));
        return paramPackageManager;
      }
      new Intent("android.intent.action.VIEW", Uri.parse(paramString3)).setFlags(268435456);
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
    return null;
  }
  
  public boolean hasThePermission(String paramString)
  {
    boolean bool2 = false;
    try
    {
      String[] arrayOfString = getAllPermissions();
      boolean bool1 = bool2;
      int k;
      int j;
      if (arrayOfString != null)
      {
        bool1 = bool2;
        if (arrayOfString.length > 0)
        {
          k = arrayOfString.length;
          j = 0;
        }
      }
      for (;;)
      {
        bool1 = bool2;
        if (j < k)
        {
          String str = arrayOfString[j];
          if (!isNull(paramString))
          {
            bool1 = str.contains(paramString);
            if (bool1) {
              bool1 = true;
            }
          }
        }
        else
        {
          return bool1;
        }
        j += 1;
      }
      return false;
    }
    catch (Exception paramString) {}
  }
  
  public int initAdWidth()
  {
    try
    {
      if (this.b.getResources().getConfiguration().orientation == 1) {
        return ((Activity)this.b).getWindowManager().getDefaultDisplay().getWidth();
      }
      if (this.b.getResources().getConfiguration().orientation == 2)
      {
        int j = ((Activity)this.b).getWindowManager().getDefaultDisplay().getHeight();
        return j;
      }
    }
    catch (Exception localException) {}
    return 0;
  }
  
  public boolean isClient()
  {
    try
    {
      NetworkInfo localNetworkInfo = ((ConnectivityManager)this.b.getSystemService("connectivity")).getActiveNetworkInfo();
      if (localNetworkInfo != null) {
        return true;
      }
    }
    catch (Exception localException) {}
    return false;
  }
  
  public boolean isCmwap()
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)this.b.getSystemService("connectivity")).getActiveNetworkInfo();
    return (localNetworkInfo != null) && (localNetworkInfo.getExtraInfo() != null) && (localNetworkInfo.getExtraInfo().toLowerCase().contains("wap"));
  }
  
  public String isInstalled(String paramString)
  {
    try
    {
      if (this.b.getPackageManager().getLaunchIntentForPackage(paramString) != null) {
        return "true";
      }
      return "false";
    }
    catch (Exception paramString) {}
    return "";
  }
  
  /* Error */
  public boolean isShortcutInstalled(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aload_0
    //   4: getfield 33	com/waps/SDKUtils:b	Landroid/content/Context;
    //   7: invokevirtual 140	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
    //   10: astore 5
    //   12: aload_0
    //   13: invokevirtual 947	com/waps/SDKUtils:getDeviceOSVersion	()I
    //   16: bipush 8
    //   18: if_icmpge +66 -> 84
    //   21: ldc_w 949
    //   24: invokestatic 206	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   27: astore_3
    //   28: aload 5
    //   30: aload_3
    //   31: iconst_1
    //   32: anewarray 127	java/lang/String
    //   35: dup
    //   36: iconst_0
    //   37: ldc -85
    //   39: aastore
    //   40: ldc -108
    //   42: iconst_1
    //   43: anewarray 127	java/lang/String
    //   46: dup
    //   47: iconst_0
    //   48: aload_1
    //   49: aastore
    //   50: aconst_null
    //   51: invokevirtual 953	android/content/ContentResolver:query	(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
    //   54: astore_1
    //   55: aload_1
    //   56: ifnull +85 -> 141
    //   59: aload_1
    //   60: invokeinterface 958 1 0
    //   65: istore_2
    //   66: iload_2
    //   67: ifeq +74 -> 141
    //   70: iconst_1
    //   71: istore_2
    //   72: aload_1
    //   73: ifnull +9 -> 82
    //   76: aload_1
    //   77: invokeinterface 960 1 0
    //   82: iload_2
    //   83: ireturn
    //   84: ldc_w 962
    //   87: invokestatic 206	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   90: astore_3
    //   91: goto -63 -> 28
    //   94: astore_1
    //   95: aconst_null
    //   96: astore_1
    //   97: aload_1
    //   98: ifnull +41 -> 139
    //   101: aload_1
    //   102: invokeinterface 960 1 0
    //   107: iconst_0
    //   108: ireturn
    //   109: astore_1
    //   110: aload 4
    //   112: astore_3
    //   113: aload_3
    //   114: ifnull +9 -> 123
    //   117: aload_3
    //   118: invokeinterface 960 1 0
    //   123: aload_1
    //   124: athrow
    //   125: astore 4
    //   127: aload_1
    //   128: astore_3
    //   129: aload 4
    //   131: astore_1
    //   132: goto -19 -> 113
    //   135: astore_3
    //   136: goto -39 -> 97
    //   139: iconst_0
    //   140: ireturn
    //   141: iconst_0
    //   142: istore_2
    //   143: goto -71 -> 72
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	146	0	this	SDKUtils
    //   0	146	1	paramString	String
    //   65	78	2	bool	boolean
    //   27	102	3	localObject1	Object
    //   135	1	3	localException	Exception
    //   1	110	4	localObject2	Object
    //   125	5	4	localObject3	Object
    //   10	19	5	localContentResolver	ContentResolver
    // Exception table:
    //   from	to	target	type
    //   3	28	94	java/lang/Exception
    //   28	55	94	java/lang/Exception
    //   84	91	94	java/lang/Exception
    //   3	28	109	finally
    //   28	55	109	finally
    //   84	91	109	finally
    //   59	66	125	finally
    //   59	66	135	java/lang/Exception
  }
  
  /* Error */
  public boolean isTimeLimited(String paramString1, String paramString2)
  {
    // Byte code:
    //   0: new 966	java/util/Date
    //   3: dup
    //   4: invokestatic 972	java/lang/System:currentTimeMillis	()J
    //   7: invokespecial 975	java/util/Date:<init>	(J)V
    //   10: astore 6
    //   12: new 977	java/text/SimpleDateFormat
    //   15: dup
    //   16: ldc_w 979
    //   19: invokespecial 980	java/text/SimpleDateFormat:<init>	(Ljava/lang/String;)V
    //   22: astore 7
    //   24: new 977	java/text/SimpleDateFormat
    //   27: dup
    //   28: ldc_w 982
    //   31: invokespecial 980	java/text/SimpleDateFormat:<init>	(Ljava/lang/String;)V
    //   34: astore 8
    //   36: new 977	java/text/SimpleDateFormat
    //   39: dup
    //   40: ldc_w 984
    //   43: invokespecial 980	java/text/SimpleDateFormat:<init>	(Ljava/lang/String;)V
    //   46: astore 9
    //   48: aload 8
    //   50: aload 9
    //   52: aload_1
    //   53: invokevirtual 987	java/text/SimpleDateFormat:parse	(Ljava/lang/String;)Ljava/util/Date;
    //   56: invokevirtual 991	java/text/SimpleDateFormat:format	(Ljava/util/Date;)Ljava/lang/String;
    //   59: ldc_w 993
    //   62: invokevirtual 134	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   65: ifeq +146 -> 211
    //   68: new 192	java/lang/StringBuilder
    //   71: dup
    //   72: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   75: aload 8
    //   77: aload 6
    //   79: invokevirtual 991	java/text/SimpleDateFormat:format	(Ljava/util/Date;)Ljava/lang/String;
    //   82: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   85: ldc_w 551
    //   88: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: aload_1
    //   92: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   95: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   98: astore 4
    //   100: aload_2
    //   101: astore 5
    //   103: aload 8
    //   105: aload 9
    //   107: aload_1
    //   108: invokevirtual 987	java/text/SimpleDateFormat:parse	(Ljava/lang/String;)Ljava/util/Date;
    //   111: invokevirtual 991	java/text/SimpleDateFormat:format	(Ljava/util/Date;)Ljava/lang/String;
    //   114: ldc_w 993
    //   117: invokevirtual 134	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   120: ifeq +35 -> 155
    //   123: new 192	java/lang/StringBuilder
    //   126: dup
    //   127: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   130: aload 8
    //   132: aload 6
    //   134: invokevirtual 991	java/text/SimpleDateFormat:format	(Ljava/util/Date;)Ljava/lang/String;
    //   137: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   140: ldc_w 551
    //   143: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   146: aload_2
    //   147: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   150: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   153: astore 5
    //   155: aload 7
    //   157: aload 4
    //   159: invokevirtual 987	java/text/SimpleDateFormat:parse	(Ljava/lang/String;)Ljava/util/Date;
    //   162: astore_1
    //   163: aload 7
    //   165: aload 5
    //   167: invokevirtual 987	java/text/SimpleDateFormat:parse	(Ljava/lang/String;)Ljava/util/Date;
    //   170: astore_2
    //   171: aload 6
    //   173: aload_1
    //   174: invokevirtual 997	java/util/Date:after	(Ljava/util/Date;)Z
    //   177: ifeq +25 -> 202
    //   180: aload 6
    //   182: aload_2
    //   183: invokevirtual 1000	java/util/Date:before	(Ljava/util/Date;)Z
    //   186: istore_3
    //   187: iload_3
    //   188: ifeq +14 -> 202
    //   191: iconst_1
    //   192: ireturn
    //   193: astore 4
    //   195: aload_1
    //   196: astore 4
    //   198: goto -98 -> 100
    //   201: astore_1
    //   202: iconst_0
    //   203: ireturn
    //   204: astore_1
    //   205: aload_2
    //   206: astore 5
    //   208: goto -53 -> 155
    //   211: aload_1
    //   212: astore 4
    //   214: goto -114 -> 100
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	217	0	this	SDKUtils
    //   0	217	1	paramString1	String
    //   0	217	2	paramString2	String
    //   186	2	3	bool	boolean
    //   98	60	4	str1	String
    //   193	1	4	localException	Exception
    //   196	17	4	str2	String
    //   101	106	5	str3	String
    //   10	171	6	localDate	java.util.Date
    //   22	142	7	localSimpleDateFormat1	java.text.SimpleDateFormat
    //   34	97	8	localSimpleDateFormat2	java.text.SimpleDateFormat
    //   46	60	9	localSimpleDateFormat3	java.text.SimpleDateFormat
    // Exception table:
    //   from	to	target	type
    //   48	100	193	java/lang/Exception
    //   0	48	201	java/lang/Exception
    //   155	187	201	java/lang/Exception
    //   103	155	204	java/lang/Exception
  }
  
  public void load(String paramString)
  {
    if (paramString != null) {
      try
      {
        if (!"".equals(paramString))
        {
          this.c = this.b.getPackageManager();
          paramString = this.c.getLaunchIntentForPackage(paramString);
          if (paramString != null)
          {
            this.b.startActivity(paramString);
            return;
          }
          Log.i("WAPS_SDK", "The app is not exist.");
          return;
        }
      }
      catch (Exception paramString) {}
    }
  }
  
  public InputStream loadStreamFromLocal(String paramString1, String paramString2)
  {
    try
    {
      if (Environment.getExternalStorageState().equals("mounted"))
      {
        paramString2 = Environment.getExternalStorageDirectory().toString() + paramString2;
        paramString2 = new File(paramString2 + "/" + paramString1);
        if ((paramString2.exists()) && (paramString2.length() > 0L)) {
          return new FileInputStream(paramString2);
        }
      }
      paramString1 = this.b.getFileStreamPath(paramString1);
      if ((paramString1.exists()) && (paramString1.length() > 0L))
      {
        paramString1 = new FileInputStream(paramString1);
        return paramString1;
      }
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  /* Error */
  public String loadStringFromLocal(String paramString1, String paramString2)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aconst_null
    //   4: astore_3
    //   5: invokestatic 1008	android/os/Environment:getExternalStorageState	()Ljava/lang/String;
    //   8: ldc_w 1010
    //   11: invokevirtual 134	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   14: ifeq +498 -> 512
    //   17: new 192	java/lang/StringBuilder
    //   20: dup
    //   21: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   24: invokestatic 1014	android/os/Environment:getExternalStorageDirectory	()Ljava/io/File;
    //   27: invokevirtual 1015	java/io/File:toString	()Ljava/lang/String;
    //   30: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   33: aload_2
    //   34: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   37: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   40: astore_2
    //   41: new 396	java/io/File
    //   44: dup
    //   45: new 192	java/lang/StringBuilder
    //   48: dup
    //   49: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   52: aload_2
    //   53: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   56: ldc_w 734
    //   59: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   62: aload_1
    //   63: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   69: invokespecial 1016	java/io/File:<init>	(Ljava/lang/String;)V
    //   72: astore_2
    //   73: aload_2
    //   74: invokevirtual 400	java/io/File:exists	()Z
    //   77: ifeq +435 -> 512
    //   80: aload_2
    //   81: invokevirtual 1018	java/io/File:length	()J
    //   84: lconst_0
    //   85: lcmp
    //   86: ifle +426 -> 512
    //   89: new 1020	java/io/FileInputStream
    //   92: dup
    //   93: aload_2
    //   94: invokespecial 1022	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   97: astore_2
    //   98: new 1030	java/io/BufferedReader
    //   101: dup
    //   102: new 1032	java/io/InputStreamReader
    //   105: dup
    //   106: aload_2
    //   107: invokespecial 1035	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   110: invokespecial 1038	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   113: astore_3
    //   114: aload_3
    //   115: ifnull +83 -> 198
    //   118: ldc 29
    //   120: astore_1
    //   121: aload_3
    //   122: astore 4
    //   124: aload_2
    //   125: astore 5
    //   127: aload_3
    //   128: invokevirtual 1041	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   131: astore 6
    //   133: aload 6
    //   135: ifnull +38 -> 173
    //   138: aload_3
    //   139: astore 4
    //   141: aload_2
    //   142: astore 5
    //   144: new 192	java/lang/StringBuilder
    //   147: dup
    //   148: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   151: aload_1
    //   152: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   155: aload 6
    //   157: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   160: ldc_w 1043
    //   163: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   166: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   169: astore_1
    //   170: goto -49 -> 121
    //   173: aload_2
    //   174: ifnull +7 -> 181
    //   177: aload_2
    //   178: invokevirtual 1044	java/io/FileInputStream:close	()V
    //   181: aload_1
    //   182: astore 4
    //   184: aload_3
    //   185: ifnull +10 -> 195
    //   188: aload_3
    //   189: invokevirtual 1045	java/io/BufferedReader:close	()V
    //   192: aload_1
    //   193: astore 4
    //   195: aload 4
    //   197: areturn
    //   198: aload_3
    //   199: astore 4
    //   201: aload_2
    //   202: astore_3
    //   203: aload 4
    //   205: astore_2
    //   206: aload_0
    //   207: getfield 33	com/waps/SDKUtils:b	Landroid/content/Context;
    //   210: aload_1
    //   211: invokevirtual 1026	android/content/Context:getFileStreamPath	(Ljava/lang/String;)Ljava/io/File;
    //   214: astore 5
    //   216: aload_2
    //   217: astore 4
    //   219: aload_3
    //   220: astore_1
    //   221: aload 5
    //   223: invokevirtual 400	java/io/File:exists	()Z
    //   226: ifeq +130 -> 356
    //   229: aload_2
    //   230: astore 4
    //   232: aload_3
    //   233: astore_1
    //   234: aload 5
    //   236: invokevirtual 1018	java/io/File:length	()J
    //   239: lconst_0
    //   240: lcmp
    //   241: ifle +115 -> 356
    //   244: new 1020	java/io/FileInputStream
    //   247: dup
    //   248: aload 5
    //   250: invokespecial 1022	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   253: astore_1
    //   254: new 1030	java/io/BufferedReader
    //   257: dup
    //   258: new 1032	java/io/InputStreamReader
    //   261: dup
    //   262: aload_1
    //   263: invokespecial 1035	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   266: invokespecial 1038	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   269: astore_3
    //   270: aload_3
    //   271: ifnull +82 -> 353
    //   274: ldc 29
    //   276: astore_2
    //   277: aload_3
    //   278: astore 4
    //   280: aload_1
    //   281: astore 5
    //   283: aload_3
    //   284: invokevirtual 1041	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   287: astore 6
    //   289: aload 6
    //   291: ifnull +38 -> 329
    //   294: aload_3
    //   295: astore 4
    //   297: aload_1
    //   298: astore 5
    //   300: new 192	java/lang/StringBuilder
    //   303: dup
    //   304: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   307: aload_2
    //   308: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   311: aload 6
    //   313: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   316: ldc_w 1043
    //   319: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   322: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   325: astore_2
    //   326: goto -49 -> 277
    //   329: aload_1
    //   330: ifnull +7 -> 337
    //   333: aload_1
    //   334: invokevirtual 1044	java/io/FileInputStream:close	()V
    //   337: aload_2
    //   338: astore 4
    //   340: aload_3
    //   341: ifnull -146 -> 195
    //   344: aload_3
    //   345: invokevirtual 1045	java/io/BufferedReader:close	()V
    //   348: aload_2
    //   349: areturn
    //   350: astore_1
    //   351: aload_2
    //   352: areturn
    //   353: aload_3
    //   354: astore 4
    //   356: aload_1
    //   357: ifnull +7 -> 364
    //   360: aload_1
    //   361: invokevirtual 1044	java/io/FileInputStream:close	()V
    //   364: aload 4
    //   366: ifnull +8 -> 374
    //   369: aload 4
    //   371: invokevirtual 1045	java/io/BufferedReader:close	()V
    //   374: ldc 29
    //   376: areturn
    //   377: astore_1
    //   378: aconst_null
    //   379: astore_1
    //   380: aload 4
    //   382: astore_2
    //   383: aload_1
    //   384: ifnull +7 -> 391
    //   387: aload_1
    //   388: invokevirtual 1044	java/io/FileInputStream:close	()V
    //   391: aload_2
    //   392: ifnull -18 -> 374
    //   395: aload_2
    //   396: invokevirtual 1045	java/io/BufferedReader:close	()V
    //   399: goto -25 -> 374
    //   402: astore_1
    //   403: goto -29 -> 374
    //   406: astore_3
    //   407: aconst_null
    //   408: astore_1
    //   409: aconst_null
    //   410: astore 4
    //   412: aload_1
    //   413: ifnull +7 -> 420
    //   416: aload_1
    //   417: invokevirtual 1044	java/io/FileInputStream:close	()V
    //   420: aload 4
    //   422: ifnull +8 -> 430
    //   425: aload 4
    //   427: invokevirtual 1045	java/io/BufferedReader:close	()V
    //   430: aload_3
    //   431: athrow
    //   432: astore_1
    //   433: goto -3 -> 430
    //   436: astore_3
    //   437: aconst_null
    //   438: astore 4
    //   440: aload_2
    //   441: astore_1
    //   442: goto -30 -> 412
    //   445: astore_3
    //   446: aload 5
    //   448: astore_1
    //   449: goto -37 -> 412
    //   452: astore 4
    //   454: aload_3
    //   455: astore_1
    //   456: aload 4
    //   458: astore_3
    //   459: aload_2
    //   460: astore 4
    //   462: goto -50 -> 412
    //   465: astore_3
    //   466: aload_2
    //   467: astore 4
    //   469: goto -57 -> 412
    //   472: astore_1
    //   473: aload_2
    //   474: astore_1
    //   475: aload 4
    //   477: astore_2
    //   478: goto -95 -> 383
    //   481: astore_1
    //   482: aload_2
    //   483: astore_1
    //   484: aload_3
    //   485: astore_2
    //   486: goto -103 -> 383
    //   489: astore_1
    //   490: aload_3
    //   491: astore_1
    //   492: goto -109 -> 383
    //   495: astore_3
    //   496: goto -113 -> 383
    //   499: astore_2
    //   500: aload_3
    //   501: astore_2
    //   502: goto -119 -> 383
    //   505: astore_1
    //   506: goto -132 -> 374
    //   509: astore_2
    //   510: aload_1
    //   511: areturn
    //   512: aconst_null
    //   513: astore 4
    //   515: aload_3
    //   516: astore_2
    //   517: aload 4
    //   519: astore_3
    //   520: goto -314 -> 206
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	523	0	this	SDKUtils
    //   0	523	1	paramString1	String
    //   0	523	2	paramString2	String
    //   4	350	3	localObject1	Object
    //   406	25	3	localObject2	Object
    //   436	1	3	localObject3	Object
    //   445	10	3	localObject4	Object
    //   458	1	3	localObject5	Object
    //   465	26	3	localObject6	Object
    //   495	21	3	localException	Exception
    //   519	1	3	str1	String
    //   1	438	4	localObject7	Object
    //   452	5	4	localObject8	Object
    //   460	58	4	str2	String
    //   125	322	5	localObject9	Object
    //   131	181	6	str3	String
    // Exception table:
    //   from	to	target	type
    //   333	337	350	java/io/IOException
    //   344	348	350	java/io/IOException
    //   5	98	377	java/lang/Exception
    //   387	391	402	java/io/IOException
    //   395	399	402	java/io/IOException
    //   5	98	406	finally
    //   416	420	432	java/io/IOException
    //   425	430	432	java/io/IOException
    //   98	114	436	finally
    //   127	133	445	finally
    //   144	170	445	finally
    //   283	289	445	finally
    //   300	326	445	finally
    //   206	216	452	finally
    //   221	229	452	finally
    //   234	254	452	finally
    //   254	270	465	finally
    //   98	114	472	java/lang/Exception
    //   127	133	481	java/lang/Exception
    //   144	170	481	java/lang/Exception
    //   206	216	489	java/lang/Exception
    //   221	229	489	java/lang/Exception
    //   234	254	489	java/lang/Exception
    //   254	270	495	java/lang/Exception
    //   283	289	499	java/lang/Exception
    //   300	326	499	java/lang/Exception
    //   360	364	505	java/io/IOException
    //   369	374	505	java/io/IOException
    //   177	181	509	java/io/IOException
    //   188	192	509	java/io/IOException
  }
  
  public void openAd()
  {
    openAd("");
  }
  
  public void openAd(String paramString)
  {
    try
    {
      this.g.post(new at(this, paramString));
      return;
    }
    catch (Exception paramString) {}
  }
  
  public boolean openUrl(WebView paramWebView, String paramString)
  {
    String str1;
    try
    {
      if (paramString.startsWith("http://"))
      {
        paramWebView.loadUrl(paramString);
        return true;
      }
      if (paramString.contains(";http://"))
      {
        localObject = paramString.substring(0, paramString.indexOf(";http://"));
        str1 = paramString.substring(paramString.indexOf("http://"));
        paramString = (String)localObject;
        if (!isNull(paramString))
        {
          if (!paramString.startsWith("load://")) {
            break label166;
          }
          str2 = paramString.substring("load://".length());
          if (str2 != "")
          {
            localObject = this.b.getPackageManager();
            paramString = null;
          }
        }
      }
    }
    catch (Exception paramWebView)
    {
      Object localObject;
      String str2;
      label116:
      paramWebView.printStackTrace();
    }
    try
    {
      localObject = ((PackageManager)localObject).getLaunchIntentForPackage(str2);
      paramString = (String)localObject;
    }
    catch (Exception localException)
    {
      break label116;
    }
    if (paramString != null)
    {
      this.b.startActivity(paramString);
      AppConnect.getInstanceNoConnect(this.b).a(str2, 1);
      return true;
    }
    for (;;)
    {
      return false;
      str1 = "";
      break;
      paramWebView.loadUrl(str1);
      continue;
      label166:
      boolean bool = paramString.startsWith("market://");
      if (!bool) {
        break label283;
      }
      try
      {
        paramWebView = paramString.split("id=");
        paramWebView = new Intent("android.intent.action.VIEW", Uri.parse("market://details?id=" + paramWebView[1]));
        this.b.startActivity(paramWebView);
      }
      catch (Exception paramWebView)
      {
        try
        {
          new AlertDialog.Builder(this.b).setTitle("").setMessage("Android market is unavailable at this device. To view this link install market.").setPositiveButton("确定", new aw(this)).create().show();
        }
        catch (Exception paramWebView) {}
      }
    }
    label283:
    paramWebView.loadUrl(paramString);
    return true;
  }
  
  public void openUrlByBrowser(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = getBrowserPackageName(paramString1);
      if ((paramString1 != null) && (!"".equals(paramString1.trim())))
      {
        goToTargetBrowser(paramString1, paramString2, this.b.getPackageManager());
        return;
      }
      paramString1 = new Intent("android.intent.action.VIEW", Uri.parse(paramString2));
      paramString1.setFlags(268435456);
      this.b.startActivity(paramString1);
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public Intent openUrlByBrowser_Intent(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = getBrowserPackageName(paramString1);
      if ((paramString1 != null) && (!"".equals(paramString1.trim()))) {
        return goToTargetBrowser_Intent(paramString1, paramString2, this.b.getPackageManager());
      }
      paramString1 = new Intent("android.intent.action.VIEW", Uri.parse(paramString2));
      paramString1.setFlags(268435456);
      return paramString1;
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  public String replaceData(String paramString)
  {
    String str = paramString;
    if (!paramString.equals(""))
    {
      str = paramString;
      if (paramString.equals("a")) {
        str = paramString.replace("a", "");
      }
    }
    return str;
  }
  
  /* Error */
  public void saveDataToLocal(InputStream paramInputStream, String paramString1, String paramString2, boolean paramBoolean)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 8
    //   3: aconst_null
    //   4: astore 9
    //   6: aconst_null
    //   7: astore 10
    //   9: aload 8
    //   11: astore 6
    //   13: aload 9
    //   15: astore 7
    //   17: sipush 10240
    //   20: newarray byte
    //   22: astore 11
    //   24: aload 8
    //   26: astore 6
    //   28: aload 9
    //   30: astore 7
    //   32: invokestatic 1008	android/os/Environment:getExternalStorageState	()Ljava/lang/String;
    //   35: ldc_w 1010
    //   38: invokevirtual 134	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   41: ifeq +220 -> 261
    //   44: aload 8
    //   46: astore 6
    //   48: aload 9
    //   50: astore 7
    //   52: new 192	java/lang/StringBuilder
    //   55: dup
    //   56: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   59: invokestatic 1014	android/os/Environment:getExternalStorageDirectory	()Ljava/io/File;
    //   62: invokevirtual 1015	java/io/File:toString	()Ljava/lang/String;
    //   65: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   68: aload_3
    //   69: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   72: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   75: astore 10
    //   77: aload 8
    //   79: astore 6
    //   81: aload 9
    //   83: astore 7
    //   85: new 396	java/io/File
    //   88: dup
    //   89: aload 10
    //   91: invokespecial 1016	java/io/File:<init>	(Ljava/lang/String;)V
    //   94: astore_3
    //   95: aload 8
    //   97: astore 6
    //   99: aload 9
    //   101: astore 7
    //   103: new 396	java/io/File
    //   106: dup
    //   107: new 192	java/lang/StringBuilder
    //   110: dup
    //   111: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   114: aload 10
    //   116: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   119: ldc_w 734
    //   122: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   125: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   128: aload_2
    //   129: invokespecial 1122	java/io/File:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   132: astore_2
    //   133: aload 8
    //   135: astore 6
    //   137: aload 9
    //   139: astore 7
    //   141: aload_3
    //   142: invokevirtual 400	java/io/File:exists	()Z
    //   145: ifne +16 -> 161
    //   148: aload 8
    //   150: astore 6
    //   152: aload 9
    //   154: astore 7
    //   156: aload_3
    //   157: invokevirtual 1125	java/io/File:mkdirs	()Z
    //   160: pop
    //   161: aload 8
    //   163: astore 6
    //   165: aload 9
    //   167: astore 7
    //   169: aload_2
    //   170: invokevirtual 400	java/io/File:exists	()Z
    //   173: ifne +16 -> 189
    //   176: aload 8
    //   178: astore 6
    //   180: aload 9
    //   182: astore 7
    //   184: aload_2
    //   185: invokevirtual 1128	java/io/File:createNewFile	()Z
    //   188: pop
    //   189: aload_2
    //   190: ifnull +58 -> 248
    //   193: aload 8
    //   195: astore 6
    //   197: aload 9
    //   199: astore 7
    //   201: new 1130	java/io/FileOutputStream
    //   204: dup
    //   205: aload_2
    //   206: invokespecial 1131	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   209: astore_2
    //   210: aload_1
    //   211: aload 11
    //   213: invokevirtual 1137	java/io/InputStream:read	([B)I
    //   216: istore 5
    //   218: aload_2
    //   219: astore_3
    //   220: iload 5
    //   222: iconst_m1
    //   223: if_icmpeq +27 -> 250
    //   226: aload_2
    //   227: aload 11
    //   229: iconst_0
    //   230: iload 5
    //   232: invokevirtual 1141	java/io/FileOutputStream:write	([BII)V
    //   235: goto -25 -> 210
    //   238: astore_1
    //   239: aload_2
    //   240: ifnull +7 -> 247
    //   243: aload_2
    //   244: invokevirtual 1142	java/io/FileOutputStream:close	()V
    //   247: return
    //   248: aconst_null
    //   249: astore_3
    //   250: aload_3
    //   251: ifnull -4 -> 247
    //   254: aload_3
    //   255: invokevirtual 1142	java/io/FileOutputStream:close	()V
    //   258: return
    //   259: astore_1
    //   260: return
    //   261: aload 10
    //   263: astore_3
    //   264: iload 4
    //   266: ifeq -16 -> 250
    //   269: aload 8
    //   271: astore 6
    //   273: aload 9
    //   275: astore 7
    //   277: aload_0
    //   278: getfield 33	com/waps/SDKUtils:b	Landroid/content/Context;
    //   281: aload_2
    //   282: iconst_3
    //   283: invokevirtual 1146	android/content/Context:openFileOutput	(Ljava/lang/String;I)Ljava/io/FileOutputStream;
    //   286: astore_2
    //   287: aload_2
    //   288: astore 6
    //   290: aload_2
    //   291: astore 7
    //   293: sipush 10240
    //   296: newarray byte
    //   298: astore 8
    //   300: aload_2
    //   301: astore 6
    //   303: aload_2
    //   304: astore 7
    //   306: aload_1
    //   307: aload 8
    //   309: invokevirtual 1137	java/io/InputStream:read	([B)I
    //   312: istore 5
    //   314: aload_2
    //   315: astore_3
    //   316: iload 5
    //   318: iconst_m1
    //   319: if_icmpeq -69 -> 250
    //   322: aload_2
    //   323: astore 6
    //   325: aload_2
    //   326: astore 7
    //   328: aload_2
    //   329: aload 8
    //   331: iconst_0
    //   332: iload 5
    //   334: invokevirtual 1141	java/io/FileOutputStream:write	([BII)V
    //   337: goto -37 -> 300
    //   340: astore_1
    //   341: aload 6
    //   343: astore_2
    //   344: goto -105 -> 239
    //   347: astore_1
    //   348: aload 7
    //   350: astore_2
    //   351: aload_2
    //   352: ifnull +7 -> 359
    //   355: aload_2
    //   356: invokevirtual 1142	java/io/FileOutputStream:close	()V
    //   359: aload_1
    //   360: athrow
    //   361: astore_1
    //   362: return
    //   363: astore_2
    //   364: goto -5 -> 359
    //   367: astore_1
    //   368: goto -17 -> 351
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	371	0	this	SDKUtils
    //   0	371	1	paramInputStream	InputStream
    //   0	371	2	paramString1	String
    //   0	371	3	paramString2	String
    //   0	371	4	paramBoolean	boolean
    //   216	117	5	j	int
    //   11	331	6	localObject1	Object
    //   15	334	7	localObject2	Object
    //   1	329	8	arrayOfByte1	byte[]
    //   4	270	9	localObject3	Object
    //   7	255	10	str	String
    //   22	206	11	arrayOfByte2	byte[]
    // Exception table:
    //   from	to	target	type
    //   210	218	238	java/lang/Exception
    //   226	235	238	java/lang/Exception
    //   254	258	259	java/io/IOException
    //   17	24	340	java/lang/Exception
    //   32	44	340	java/lang/Exception
    //   52	77	340	java/lang/Exception
    //   85	95	340	java/lang/Exception
    //   103	133	340	java/lang/Exception
    //   141	148	340	java/lang/Exception
    //   156	161	340	java/lang/Exception
    //   169	176	340	java/lang/Exception
    //   184	189	340	java/lang/Exception
    //   201	210	340	java/lang/Exception
    //   277	287	340	java/lang/Exception
    //   293	300	340	java/lang/Exception
    //   306	314	340	java/lang/Exception
    //   328	337	340	java/lang/Exception
    //   17	24	347	finally
    //   32	44	347	finally
    //   52	77	347	finally
    //   85	95	347	finally
    //   103	133	347	finally
    //   141	148	347	finally
    //   156	161	347	finally
    //   169	176	347	finally
    //   184	189	347	finally
    //   201	210	347	finally
    //   277	287	347	finally
    //   293	300	347	finally
    //   306	314	347	finally
    //   328	337	347	finally
    //   243	247	361	java/io/IOException
    //   355	359	363	java/io/IOException
    //   210	218	367	finally
    //   226	235	367	finally
  }
  
  /* Error */
  public void saveDataToLocal(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 7
    //   3: aconst_null
    //   4: astore 6
    //   6: aload 7
    //   8: astore 5
    //   10: aload_1
    //   11: ldc_w 1148
    //   14: invokevirtual 1152	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   17: astore 8
    //   19: aload 6
    //   21: astore_1
    //   22: aload 7
    //   24: astore 5
    //   26: invokestatic 1008	android/os/Environment:getExternalStorageState	()Ljava/lang/String;
    //   29: ldc_w 1010
    //   32: invokevirtual 134	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   35: ifeq +148 -> 183
    //   38: aload 7
    //   40: astore 5
    //   42: new 192	java/lang/StringBuilder
    //   45: dup
    //   46: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   49: invokestatic 1014	android/os/Environment:getExternalStorageDirectory	()Ljava/io/File;
    //   52: invokevirtual 1015	java/io/File:toString	()Ljava/lang/String;
    //   55: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   58: aload_3
    //   59: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   62: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   65: astore_3
    //   66: aload 7
    //   68: astore 5
    //   70: new 396	java/io/File
    //   73: dup
    //   74: aload_3
    //   75: invokespecial 1016	java/io/File:<init>	(Ljava/lang/String;)V
    //   78: astore_1
    //   79: aload 7
    //   81: astore 5
    //   83: new 396	java/io/File
    //   86: dup
    //   87: new 192	java/lang/StringBuilder
    //   90: dup
    //   91: invokespecial 193	java/lang/StringBuilder:<init>	()V
    //   94: aload_3
    //   95: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   98: ldc_w 734
    //   101: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   104: aload_2
    //   105: invokevirtual 199	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   108: invokevirtual 200	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   111: invokespecial 1016	java/io/File:<init>	(Ljava/lang/String;)V
    //   114: astore_3
    //   115: aload 7
    //   117: astore 5
    //   119: aload_1
    //   120: invokevirtual 400	java/io/File:exists	()Z
    //   123: ifne +12 -> 135
    //   126: aload 7
    //   128: astore 5
    //   130: aload_1
    //   131: invokevirtual 1125	java/io/File:mkdirs	()Z
    //   134: pop
    //   135: aload 7
    //   137: astore 5
    //   139: aload_3
    //   140: invokevirtual 400	java/io/File:exists	()Z
    //   143: ifne +12 -> 155
    //   146: aload 7
    //   148: astore 5
    //   150: aload_3
    //   151: invokevirtual 1128	java/io/File:createNewFile	()Z
    //   154: pop
    //   155: aload 6
    //   157: astore_1
    //   158: aload_3
    //   159: ifnull +24 -> 183
    //   162: aload 7
    //   164: astore 5
    //   166: new 1130	java/io/FileOutputStream
    //   169: dup
    //   170: aload_3
    //   171: invokespecial 1131	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   174: astore_3
    //   175: aload_3
    //   176: aload 8
    //   178: invokevirtual 1155	java/io/FileOutputStream:write	([B)V
    //   181: aload_3
    //   182: astore_1
    //   183: aload_1
    //   184: astore_3
    //   185: iload 4
    //   187: ifeq +29 -> 216
    //   190: aload_1
    //   191: astore 5
    //   193: aload_0
    //   194: getfield 33	com/waps/SDKUtils:b	Landroid/content/Context;
    //   197: aload_2
    //   198: iconst_3
    //   199: invokevirtual 1146	android/content/Context:openFileOutput	(Ljava/lang/String;I)Ljava/io/FileOutputStream;
    //   202: astore_2
    //   203: aload_2
    //   204: astore_1
    //   205: aload_1
    //   206: astore 5
    //   208: aload_1
    //   209: aload 8
    //   211: invokevirtual 1155	java/io/FileOutputStream:write	([B)V
    //   214: aload_1
    //   215: astore_3
    //   216: aload_3
    //   217: ifnull +7 -> 224
    //   220: aload_3
    //   221: invokevirtual 1142	java/io/FileOutputStream:close	()V
    //   224: return
    //   225: astore_1
    //   226: aload 5
    //   228: ifnull -4 -> 224
    //   231: aload 5
    //   233: invokevirtual 1142	java/io/FileOutputStream:close	()V
    //   236: return
    //   237: astore_1
    //   238: return
    //   239: astore_1
    //   240: aconst_null
    //   241: astore_2
    //   242: aload_2
    //   243: ifnull +7 -> 250
    //   246: aload_2
    //   247: invokevirtual 1142	java/io/FileOutputStream:close	()V
    //   250: aload_1
    //   251: athrow
    //   252: astore_1
    //   253: return
    //   254: astore_2
    //   255: goto -5 -> 250
    //   258: astore_1
    //   259: aload_3
    //   260: astore_2
    //   261: goto -19 -> 242
    //   264: astore_3
    //   265: aload_1
    //   266: astore_2
    //   267: aload_3
    //   268: astore_1
    //   269: goto -27 -> 242
    //   272: astore_3
    //   273: aload_1
    //   274: astore_2
    //   275: aload_3
    //   276: astore_1
    //   277: goto -35 -> 242
    //   280: astore_1
    //   281: aload_3
    //   282: astore 5
    //   284: goto -58 -> 226
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	287	0	this	SDKUtils
    //   0	287	1	paramString1	String
    //   0	287	2	paramString2	String
    //   0	287	3	paramString3	String
    //   0	287	4	paramBoolean	boolean
    //   8	275	5	localObject1	Object
    //   4	152	6	localObject2	Object
    //   1	162	7	localObject3	Object
    //   17	193	8	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   10	19	225	java/lang/Exception
    //   26	38	225	java/lang/Exception
    //   42	66	225	java/lang/Exception
    //   70	79	225	java/lang/Exception
    //   83	115	225	java/lang/Exception
    //   119	126	225	java/lang/Exception
    //   130	135	225	java/lang/Exception
    //   139	146	225	java/lang/Exception
    //   150	155	225	java/lang/Exception
    //   166	175	225	java/lang/Exception
    //   193	203	225	java/lang/Exception
    //   208	214	225	java/lang/Exception
    //   231	236	237	java/io/IOException
    //   10	19	239	finally
    //   26	38	239	finally
    //   42	66	239	finally
    //   70	79	239	finally
    //   83	115	239	finally
    //   119	126	239	finally
    //   130	135	239	finally
    //   139	146	239	finally
    //   150	155	239	finally
    //   166	175	239	finally
    //   220	224	252	java/io/IOException
    //   246	250	254	java/io/IOException
    //   175	181	258	finally
    //   193	203	264	finally
    //   208	214	272	finally
    //   175	181	280	java/lang/Exception
  }
  
  public void sendSMS(String paramString1, String paramString2)
  {
    Intent localIntent = new Intent();
    localIntent.setAction("android.intent.action.SENDTO");
    localIntent.setData(Uri.parse("smsto:" + paramString1));
    localIntent.putExtra("sms_body", paramString2);
    this.b.startActivity(localIntent);
  }
  
  public void showToast(String paramString)
  {
    Toast.makeText(this.b, paramString, 1).show();
  }
  
  public String[] splitString(String paramString1, String paramString2, String paramString3)
  {
    if (paramString2 != null) {}
    try
    {
      if ("".equals(paramString2.trim())) {
        return new String[] { paramString1 };
      }
      String str;
      if (paramString3 != null)
      {
        str = paramString3;
        if (paramString3.equals("")) {}
      }
      for (;;)
      {
        if ((paramString1 != null) && (!"".equals(paramString1.trim())))
        {
          paramString3 = paramString1;
          if (paramString1.endsWith(paramString2)) {
            paramString3 = paramString1.substring(0, paramString1.lastIndexOf(paramString2));
          }
          if (paramString3.indexOf(paramString2) > 0) {
            return paramString3.split(str);
          }
          if (paramString3.indexOf(paramString2) == 0) {
            return new String[] { paramString3.substring(1) };
          }
          return new String[] { paramString3 };
        }
        return null;
        str = paramString2;
      }
      return null;
    }
    catch (Exception paramString1) {}
  }
  
  public void submit(String paramString1, String paramString2)
  {
    if ((paramString2 != null) && (!"".equals(paramString2)))
    {
      new AlertDialog.Builder(this.b).setTitle(paramString1).setMessage(paramString2).setPositiveButton("确定", new ar(this)).create().show();
      return;
    }
    ((Activity)this.b).finish();
  }
}
