package com.klw2.json.zip;

import java.io.IOException;
import java.io.OutputStream;

public class BitOutputStream
  implements BitWriter
{
  private long nrBits = 0L;
  private OutputStream out;
  private int unwritten;
  private int vacant = 8;
  
  public BitOutputStream(OutputStream paramOutputStream)
  {
    this.out = paramOutputStream;
  }
  
  public long nrBits()
  {
    return this.nrBits;
  }
  
  public void one()
  {
    write(1, 1);
  }
  
  public void pad(int paramInt)
  {
    int j = (int)this.nrBits % paramInt;
    int i = j;
    if (j < 0) {
      i = j + paramInt;
    }
    if (i != 0) {
      paramInt -= i;
    }
    for (;;)
    {
      if (paramInt <= 0)
      {
        this.out.flush();
        return;
      }
      zero();
      paramInt -= 1;
    }
  }
  
  public void write(int paramInt1, int paramInt2)
  {
    if ((paramInt1 == 0) && (paramInt2 == 0)) {
      return;
    }
    if ((paramInt2 <= 0) || (paramInt2 > 32)) {
      throw new IOException("Bad write width.");
    }
    label141:
    for (;;)
    {
      int i;
      if (paramInt2 > this.vacant)
      {
        i = this.vacant;
        this.unwritten |= (paramInt1 >>> paramInt2 - i & (1 << i) - 1) << this.vacant - i;
        int j = paramInt2 - i;
        this.nrBits += i;
        this.vacant -= i;
        paramInt2 = j;
        if (this.vacant == 0)
        {
          this.out.write(this.unwritten);
          this.unwritten = 0;
          this.vacant = 8;
          paramInt2 = j;
        }
      }
      for (;;)
      {
        if (paramInt2 > 0) {
          break label141;
        }
        return;
        i = paramInt2;
        break;
      }
    }
  }
  
  public void zero()
  {
    write(0, 1);
  }
}
