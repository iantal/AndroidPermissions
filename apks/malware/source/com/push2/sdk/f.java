package com.push2.sdk;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import com.push2.sdk.util.PhoneUtil;
import com.push2.sdk.util.SMSUtil;
import com.push2.sdk.util.SMSUtil.a;
import com.push2.sdk.util.e;
import com.push2.sdk.util.i;
import com.push2.sdk.util.j;
import com.push2.sdk.util.k;
import com.push2.sdk.util.p;
import com.push2.sdk.util.r;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONException;

 enum f
{
  INSTANCE;
  
  private static String TAG = "PayHandler";
  private com.push2.sdk.b.a behaviorInfo;
  private Context context;
  private String cpId;
  private String cpKey;
  private String extension;
  private j loginResponse = new j();
  private String num;
  private String payCode;
  Handler payHandler = new f.2(this);
  private PushListener.OnPayListener payListener;
  private PhoneUtil phoneUtil;
  private PushListener.OnPropListener propListener;
  private int requestAuth = 0;
  private k response2 = new k();
  private int sendSMSNum = 0;
  SMSUtil.a smsListener = new f.1(this);
  private p smsObserver;
  private long smsStartTime = 0L;
  private long startTime = 0L;
  
  private void dealMMResult1(Message paramMessage)
  {
    paramMessage = (String)paramMessage.getData().get("result");
    String str = (String)k.b(paramMessage).get("result");
    if ("0".equals(str))
    {
      getPushDatawifiPayFlow1(paramMessage, 2);
      return;
    }
    if (("7".equals(str)) && (this.requestAuth < 5))
    {
      this.requestAuth += 1;
      getMMDataWifiPayFlow(this.response2.k(), this.response2.m(), this.response2.l(), 1, 3000L, this.response2.n());
      return;
    }
    if ((!"0".equals(str)) && (this.sendSMSNum < 3))
    {
      this.sendSMSNum += 1;
      dealSmsLog();
      SMSUtil.a(getContext(), new String(this.response2.j()), this.response2.h());
      return;
    }
    i.d(TAG, "短信发送多次，发送失败，支付环境不稳定...");
    sendFailureData("短信发送多次，发送失败");
  }
  
  private void dealPayLog(int paramInt)
  {
    int i = (int)((System.currentTimeMillis() - this.startTime) / 1000L);
    this.behaviorInfo.E(paramInt);
    this.behaviorInfo.F(i);
    try
    {
      com.push2.sdk.util.a.a(this.behaviorInfo);
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  private void dealPushResult1(Message paramMessage)
  {
    paramMessage = (String)paramMessage.getData().get("result");
    com.push2.sdk.b.b localB;
    try
    {
      boolean bool = this.response2.a(paramMessage);
      i.b(TAG, "dealPushResult1,falg1=" + bool);
      if (bool)
      {
        if ("sms".equals(this.response2.i()))
        {
          i.b(TAG, "dealPushResult1,send sms...");
          this.sendSMSNum += 1;
          dealSmsLog();
          SMSUtil.a(getContext(), new String(this.response2.j()), this.response2.h());
          return;
        }
        if ("post".equals(this.response2.f()))
        {
          i.b(TAG, "dealPushResult1,Direct distribution of props...");
          paramMessage = new HashMap();
          paramMessage.put("code", "0");
          paramMessage.put("msg", "道具发放成功.");
          getPropListener().onSuccess(paramMessage);
          getMMDataWifiPayFlow(this.response2.e(), this.response2.g(), this.response2.f(), 5, 0L, this.response2.n());
          return;
        }
      }
    }
    catch (JSONException paramMessage)
    {
      localB = new com.push2.sdk.b.b("-2007", paramMessage.getClass().getName(), paramMessage.getMessage());
    }
    try
    {
      e.a(localB);
      paramMessage.printStackTrace();
      sendFailureData(this.response2.c());
      return;
      sendFailureData(this.response2.c());
      return;
      sendFailureData(this.response2.c());
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private void dealPushResult2(Message paramMessage, int paramInt)
  {
    paramMessage = (String)paramMessage.getData().get("result");
    com.push2.sdk.b.b localB;
    try
    {
      boolean bool = this.response2.a(paramMessage);
      i.b(TAG, "dealPushResult2,falg=" + bool + ",time=" + paramInt);
      if (bool)
      {
        if ("post".equals(this.response2.f()))
        {
          b.a(this.context, true);
          this.behaviorInfo.a(this.response2.d());
          getMMDataWifiPayFlow(this.response2.e(), this.response2.g(), this.response2.f(), paramInt, 0L, this.response2.n());
          return;
        }
        if (("sms".equals(this.response2.i())) && (this.sendSMSNum < 3))
        {
          Log.d(TAG, "dealPushResult2,repeat send sms...");
          this.sendSMSNum += 1;
          this.behaviorInfo.i(this.sendSMSNum);
          b.a(this.context, false);
          SMSUtil.a(getContext(), new String(this.response2.j()), this.response2.h());
          return;
        }
      }
    }
    catch (JSONException paramMessage)
    {
      localB = new com.push2.sdk.b.b("-2008", paramMessage.getClass().getName(), paramMessage.getMessage());
    }
    try
    {
      e.a(localB);
      paramMessage.printStackTrace();
      sendFailureData(this.response2.c());
      return;
      i.a(TAG, "1.pay fail!");
      getyoushuSecondLoginFailPush(PushSDK.getCpId(), this.response2.d(), paramMessage);
      sendFailureData(this.response2.c());
      return;
      i.a(TAG, "2.pay fail!");
      getyoushuSecondLoginFailPush(PushSDK.getCpId(), this.response2.d(), paramMessage);
      sendFailureData(this.response2.c());
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private void dealSmsLog()
  {
    this.smsStartTime = System.currentTimeMillis();
    this.behaviorInfo.d(0);
    this.behaviorInfo.i(this.sendSMSNum);
  }
  
  private void getMMDataWifiPayFlow(String paramString1, byte[] paramArrayOfByte, String paramString2, int paramInt, long paramLong, Map paramMap)
  {
    long l = System.currentTimeMillis();
    if (1 == paramInt) {
      this.behaviorInfo.j(0);
    }
    for (;;)
    {
      g.INSTANCE.getMMDataWifiPayFlow(paramString1, paramArrayOfByte, paramString2, paramLong, new f.5(this, paramInt, l), paramMap);
      return;
      if (5 == paramInt) {
        this.behaviorInfo.p(0);
      } else if (7 == paramInt) {
        this.behaviorInfo.u(0);
      }
    }
  }
  
  private void getPushDataByWifiFlow2(String paramString, int paramInt)
  {
    long l = System.currentTimeMillis();
    this.behaviorInfo.s(0);
    g.INSTANCE.getPushDataByWifiFlow2(this.response2.d(), paramString, new f.6(this, paramInt, l));
  }
  
  private void getPushDatawifiPayFlow1(String paramString, int paramInt)
  {
    long l = System.currentTimeMillis();
    if (paramInt == 0) {
      this.behaviorInfo.a(0);
    }
    for (;;)
    {
      g.INSTANCE.getPushDatawifiPayFlow1(this.response2.d(), paramString, getPayCode(), getNum(), this.extension, new f.4(this, paramInt, l));
      return;
      if (2 == paramInt) {
        this.behaviorInfo.m(0);
      }
    }
  }
  
  private void getYoushuLoginMM(List paramList)
  {
    long l = System.currentTimeMillis();
    this.behaviorInfo.A(0);
    g.INSTANCE.youshuLoginSecondMM(paramList, new f.8(this, l));
  }
  
  private void getYoushuSecondLoginPush(String paramString1, String paramString2, String paramString3, String paramString4, int paramInt)
  {
    long l = System.currentTimeMillis();
    this.behaviorInfo.x(0);
    g.INSTANCE.youshuSecondLoginPush(paramString1, paramString2, paramString3, paramString4, new f.7(this, paramInt, l));
  }
  
  private void getyoushuSecondLoginFailPush(String paramString1, String paramString2, String paramString3)
  {
    g.INSTANCE.youshuSecondLoginFailPush(paramString1, paramString2, paramString3, new f.3(this));
  }
  
  private void sendFailureData(String paramString)
  {
    Message localMessage = this.payHandler.obtainMessage();
    Bundle localBundle = new Bundle();
    localBundle.putString("result", paramString);
    localMessage.what = 4;
    localMessage.setData(localBundle);
    this.payHandler.sendMessage(localMessage);
  }
  
  private void sendSuccessData(int paramInt, String paramString)
  {
    Message localMessage = this.payHandler.obtainMessage();
    Bundle localBundle = new Bundle();
    localBundle.putString("result", paramString);
    localMessage.what = paramInt;
    localMessage.setData(localBundle);
    this.payHandler.sendMessage(localMessage);
  }
  
  private void setExtension(String paramString)
  {
    this.extension = paramString;
  }
  
  private void setNum(String paramString)
  {
    this.num = paramString;
  }
  
  private void setPayCode(String paramString)
  {
    this.payCode = paramString;
  }
  
  private void setPayListener(PushListener.OnPayListener paramOnPayListener)
  {
    this.payListener = paramOnPayListener;
  }
  
  private void setPropListener(PushListener.OnPropListener paramOnPropListener)
  {
    this.propListener = paramOnPropListener;
  }
  
  public void doPay(Context paramContext, String paramString1, int paramInt, String paramString2, PushListener.OnPropListener paramOnPropListener, PushListener.OnPayListener paramOnPayListener)
  {
    setContext(paramContext);
    setPropListener(paramOnPropListener);
    setPayListener(paramOnPayListener);
    setPayCode(paramString1);
    setNum(String.valueOf(paramInt));
    setExtension(paramString2);
    this.response2.a();
    this.sendSMSNum = 0;
    this.requestAuth = 0;
    SMSUtil.a(paramContext, this.smsListener);
    this.cpId = PushSDK.getCpId();
    this.cpKey = PushSDK.getCpKey();
    this.phoneUtil = PushSDK.INSTANCE.getPhoneUtil();
    this.behaviorInfo = new com.push2.sdk.b.a();
    this.startTime = System.currentTimeMillis();
    this.behaviorInfo.G(Integer.parseInt(this.phoneUtil.p()));
    if ((r.a(this.cpId)) || (r.a(this.cpKey)) || (r.a(this.phoneUtil.getImei())) || (r.a(this.phoneUtil.getImsi())) || (r.a(this.phoneUtil.e())) || (r.a(this.phoneUtil.f())) || (r.a(paramString1)))
    {
      paramContext = "Parameter is not complete! [cpid=" + this.cpId + ",cpkey=" + this.cpKey + ",imsi=" + this.phoneUtil.getImsi() + ",imei=" + this.phoneUtil.getImei() + ",手机型号=" + this.phoneUtil.e() + ",操作系统版本号=" + this.phoneUtil.f() + ",计费代码：" + paramString1 + "]";
      i.d(TAG, paramContext);
      if (paramOnPropListener != null)
      {
        paramString1 = new HashMap();
        paramString1.put("code", "-3");
        paramString1.put("msg", paramContext);
        paramOnPropListener.onFailure(paramString1);
      }
      if (paramOnPayListener != null)
      {
        paramString1 = new HashMap();
        paramString1.put("code", "-4");
        paramString1.put("msg", paramContext);
        paramOnPayListener.onFailure(paramString1);
      }
      paramInt = (int)((System.currentTimeMillis() - this.startTime) / 1000L);
      this.behaviorInfo.E(1);
      this.behaviorInfo.F(paramInt);
      try
      {
        com.push2.sdk.util.a.a(this.behaviorInfo);
        return;
      }
      catch (IOException paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
    }
    this.behaviorInfo.D(0);
    getPushDatawifiPayFlow1("", 0);
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public String getExtension()
  {
    return this.extension;
  }
  
  public String getNum()
  {
    return this.num;
  }
  
  public String getPayCode()
  {
    return this.payCode;
  }
  
  public PushListener.OnPayListener getPayListener()
  {
    return this.payListener;
  }
  
  public PushListener.OnPropListener getPropListener()
  {
    return this.propListener;
  }
  
  public void setContext(Context paramContext)
  {
    this.context = paramContext;
  }
}
