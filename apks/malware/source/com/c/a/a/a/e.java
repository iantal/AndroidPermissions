package com.c.a.a.a;

import android.util.Log;
import java.io.UnsupportedEncodingException;

public class e
  implements Cloneable
{
  private int a;
  private byte[] b;
  
  public e(int paramInt, byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      throw new NullPointerException("EncodedStringValue: Text-string is null.");
    }
    this.a = paramInt;
    this.b = new byte[paramArrayOfByte.length];
    System.arraycopy(paramArrayOfByte, 0, this.b, 0, paramArrayOfByte.length);
  }
  
  public e(byte[] paramArrayOfByte)
  {
    this(106, paramArrayOfByte);
  }
  
  public void a(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      throw new NullPointerException("EncodedStringValue: Text-string is null.");
    }
    this.b = new byte[paramArrayOfByte.length];
    System.arraycopy(paramArrayOfByte, 0, this.b, 0, paramArrayOfByte.length);
  }
  
  public byte[] a()
  {
    byte[] arrayOfByte = new byte[this.b.length];
    System.arraycopy(this.b, 0, arrayOfByte, 0, this.b.length);
    return arrayOfByte;
  }
  
  public String b()
  {
    if (this.a == 0) {
      return new String(this.b);
    }
    try
    {
      String str1 = c.a(this.a);
      str1 = new String(this.b, str1);
      return str1;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException1)
    {
      try
      {
        String str2 = new String(this.b, "iso-8859-1");
        return str2;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException2) {}
    }
    return new String(this.b);
  }
  
  public Object clone()
  {
    super.clone();
    int i = this.b.length;
    Object localObject = new byte[i];
    System.arraycopy(this.b, 0, localObject, 0, i);
    try
    {
      localObject = new e(this.a, (byte[])localObject);
      return localObject;
    }
    catch (Exception localException)
    {
      Log.e("EncodedStringValue", "failed to clone an EncodedStringValue: " + this);
      localException.printStackTrace();
      throw new CloneNotSupportedException(localException.getMessage());
    }
  }
}
