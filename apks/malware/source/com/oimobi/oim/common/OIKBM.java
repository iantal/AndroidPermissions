package com.oimobi.oim.common;

import android.app.Service;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.IBinder;
import android.text.TextUtils;
import java.lang.reflect.Method;

public class OIKBM
  extends OIKM
{
  private Method onBind;
  private Method onConfigurationChanged;
  private Method onCreate;
  private Method onDestroy;
  private Method onLowMemory;
  private Method onRebind;
  private Method onStart;
  private Method onStartCommand;
  private Method onUnbind;
  private Method svMethod;
  
  public OIKBM() {}
  
  public String gkmn()
  {
    if (TextUtils.isEmpty(this.mKitManagerName))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("m").append("k").append("i").append("t").append(".").append("o").append("i").append("m").append(".").append("i").append("m").append("i").append(".").append("M").append("F").append("K").append("S");
      this.mKitManagerName = localStringBuilder.toString();
    }
    return this.mKitManagerName;
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    if (this.onBind == null) {
      this.onBind = getMethod(this.mKitManager, "onBind");
    }
    paramIntent = invokeMethod(this.mKitManager, this.onBind, new Object[] { paramIntent });
    if (paramIntent != null) {
      return (IBinder)paramIntent;
    }
    return null;
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    if (this.onConfigurationChanged == null) {
      this.onConfigurationChanged = getMethod(this.mKitManager, "onConfigurationChanged");
    }
    invokeMethod(this.mKitManager, this.onConfigurationChanged, new Object[] { paramConfiguration });
  }
  
  public void onCreate()
  {
    if (this.onCreate == null) {
      this.onCreate = getMethod(this.mKitManager, "onCreate");
    }
    invokeMethod(this.mKitManager, this.onCreate, null);
  }
  
  public void onDestroy()
  {
    if (this.onDestroy == null) {
      this.onDestroy = getMethod(this.mKitManager, "onDestroy");
    }
    invokeMethod(this.mKitManager, this.onDestroy, null);
  }
  
  public void onLowMemory()
  {
    if (this.onLowMemory == null) {
      this.onLowMemory = getMethod(this.mKitManager, "onLowMemory");
    }
    invokeMethod(this.mKitManager, this.onLowMemory, null);
  }
  
  public void onRebind(Intent paramIntent)
  {
    if (this.onRebind == null) {
      this.onRebind = getMethod(this.mKitManager, "onRebind");
    }
    invokeMethod(this.mKitManager, this.onRebind, new Object[] { paramIntent, paramIntent });
  }
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    if (this.onStart == null) {
      this.onStart = getMethod(this.mKitManager, "onStart");
    }
    invokeMethod(this.mKitManager, this.onStart, new Object[] { paramIntent, Integer.valueOf(paramInt) });
  }
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    int i = 3;
    if (this.onStartCommand == null) {
      this.onStartCommand = getMethod(this.mKitManager, "onStartCommand");
    }
    paramIntent = invokeMethod(this.mKitManager, this.onStartCommand, new Object[] { paramIntent, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) });
    paramInt1 = i;
    if (paramIntent != null) {
      paramInt1 = ((Integer)paramIntent).intValue();
    }
    return paramInt1;
  }
  
  public boolean onUnbind(Intent paramIntent)
  {
    boolean bool = true;
    if (this.onUnbind == null) {
      this.onUnbind = getMethod(this.mKitManager, "onUnbind");
    }
    paramIntent = invokeMethod(this.mKitManager, this.onUnbind, new Object[] { paramIntent });
    if (paramIntent != null) {
      bool = ((Boolean)paramIntent).booleanValue();
    }
    return bool;
  }
  
  public void sm(Object paramObject)
    throws Exception
  {
    if (paramObject == null) {
      throw new Exception();
    }
    this.mKitManager = paramObject;
  }
  
  public void svMethod(Service paramService)
  {
    if (this.svMethod == null) {
      this.svMethod = getMethod(this.mKitManager, "setService");
    }
    invokeMethod(this.mKitManager, this.svMethod, new Object[] { paramService });
  }
}
