package com.oimobi.oim.common;

import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ServiceInfo;
import com.oimobi.oim.OIA;
import com.oimobi.oim.OIK;
import com.oimobi.oim.OIR;
import com.oimobi.oim.OIS;

public class UtilsClass
{
  private static Class AClass;
  private static Class BClass;
  private static Class KClass;
  private static Class SClass;
  
  public UtilsClass() {}
  
  protected static Class getAClass(Context paramContext)
  {
    if (AClass == null) {
      AClass = getActivityChild(paramContext, OIA.class);
    }
    return AClass;
  }
  
  private static Class getActivityChild(Context paramContext, Class paramClass)
  {
    Object localObject = paramContext.getApplicationInfo().packageName;
    for (;;)
    {
      try
      {
        paramContext = paramContext.getPackageManager().getPackageInfo((String)localObject, 1);
        paramContext = paramContext.activities;
        if (paramContext == null) {
          return paramClass;
        }
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        paramContext.printStackTrace();
        return paramClass;
      }
      int i = 0;
      while (i < paramContext.length) {
        try
        {
          localObject = Class.forName(paramContext[i].name);
          if (paramClass.isAssignableFrom((Class)localObject)) {
            return localObject;
          }
        }
        catch (ClassNotFoundException localClassNotFoundException)
        {
          localClassNotFoundException.printStackTrace();
          i += 1;
        }
      }
    }
  }
  
  protected static Class getBClass(Context paramContext)
  {
    if (BClass == null) {
      BClass = getReceiverChild(paramContext, OIR.class);
    }
    return BClass;
  }
  
  protected static Class getKClass(Context paramContext)
  {
    if (KClass == null) {
      KClass = getServiceChild(paramContext, OIK.class);
    }
    return KClass;
  }
  
  private static Class getReceiverChild(Context paramContext, Class paramClass)
  {
    Object localObject = paramContext.getApplicationInfo().packageName;
    for (;;)
    {
      try
      {
        paramContext = paramContext.getPackageManager().getPackageInfo((String)localObject, 2);
        paramContext = paramContext.receivers;
        if (paramContext == null) {
          return paramClass;
        }
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        paramContext.printStackTrace();
        return paramClass;
      }
      int i = 0;
      while (i < paramContext.length) {
        try
        {
          localObject = Class.forName(paramContext[i].name);
          if (paramClass.isAssignableFrom((Class)localObject)) {
            return localObject;
          }
        }
        catch (ClassNotFoundException localClassNotFoundException)
        {
          localClassNotFoundException.printStackTrace();
          i += 1;
        }
      }
    }
  }
  
  protected static Class getSClass(Context paramContext)
  {
    if (SClass == null) {
      SClass = getServiceChild(paramContext, OIS.class);
    }
    return SClass;
  }
  
  private static Class getServiceChild(Context paramContext, Class paramClass)
  {
    Object localObject = paramContext.getApplicationInfo().packageName;
    for (;;)
    {
      try
      {
        paramContext = paramContext.getPackageManager().getPackageInfo((String)localObject, 4);
        paramContext = paramContext.services;
        if (paramContext == null) {
          return paramClass;
        }
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        paramContext.printStackTrace();
        return paramClass;
      }
      int i = 0;
      while (i < paramContext.length) {
        try
        {
          localObject = Class.forName(paramContext[i].name);
          if (paramClass.isAssignableFrom((Class)localObject)) {
            return localObject;
          }
        }
        catch (ClassNotFoundException localClassNotFoundException)
        {
          localClassNotFoundException.printStackTrace();
          i += 1;
        }
      }
    }
  }
}
