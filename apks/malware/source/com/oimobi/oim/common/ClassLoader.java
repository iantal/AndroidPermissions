package com.oimobi.oim.common;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.util.HashMap;

public class ClassLoader
{
  private static DexClassLoader mClassLoaderKit;
  private static File mDexDir;
  private static File mJar;
  private static File mJarDir;
  private static File mJarTemp;
  private static File mJarTempDe;
  private static File mJarUpdate;
  private static HashMap<String, OIKM> mManagers = new HashMap();
  private static File mdex;
  
  public ClassLoader() {}
  
  public static boolean checkJar(Context paramContext)
  {
    boolean bool = false;
    if (getJarFile(paramContext).exists()) {
      bool = true;
    }
    return bool;
  }
  
  @SuppressLint({"NewApi"})
  private static <T extends OIKM> T doGetManager(Context paramContext, Class<T> paramClass)
    throws Exception
  {
    try
    {
      paramClass = (OIKM)paramClass.newInstance();
      paramClass.sm(getKitDexClassLoader(paramContext).loadClass(paramClass.gkmn()).newInstance());
      return paramClass;
    }
    catch (Exception paramClass)
    {
      reInitKit(paramContext);
      throw paramClass;
    }
  }
  
  private static File getDexDir(Context paramContext)
  {
    if (mDexDir == null) {
      mDexDir = paramContext.getDir(Constants.DEX_DIR, 0);
    }
    return mDexDir;
  }
  
  public static File getDexFile(Context paramContext)
  {
    if (mdex == null) {
      mdex = new File(getDexDir(paramContext), Constants.DEXNAME);
    }
    return mdex;
  }
  
  public static File getJarDir(Context paramContext)
  {
    if (mJarDir == null) {
      mJarDir = paramContext.getDir(Constants.JAR_DIR, 0);
    }
    return mJarDir;
  }
  
  public static File getJarFile(Context paramContext)
  {
    if (mJar == null) {
      mJar = new File(getJarDir(paramContext), Constants.JAR_NAME);
    }
    return mJar;
  }
  
  public static File getJarTempDeFile(Context paramContext)
  {
    if (mJarTempDe == null) {
      mJarTempDe = new File(getJarDir(paramContext), "d" + Constants.JAR_NAME);
    }
    return mJarTempDe;
  }
  
  public static File getJarTempFile(Context paramContext)
  {
    if (mJarTemp == null) {
      mJarTemp = new File(getJarDir(paramContext), "t" + Constants.JAR_NAME);
    }
    return mJarTemp;
  }
  
  public static File getJarUpdateFile(Context paramContext)
  {
    if (mJarUpdate == null) {
      mJarUpdate = new File(getJarDir(paramContext), "u" + Constants.JAR_NAME);
    }
    return mJarUpdate;
  }
  
  private static DexClassLoader getKitDexClassLoader(Context paramContext)
    throws Exception
  {
    if (checkJar(paramContext))
    {
      if (mClassLoaderKit == null)
      {
        Object localObject = getJarFile(paramContext);
        File localFile1 = getDexDir(paramContext);
        File localFile2 = getDexFile(paramContext);
        if (localFile2.exists()) {
          localFile2.delete();
        }
        mClassLoaderKit = new DexClassLoader(((File)localObject).getAbsolutePath(), localFile1.getAbsolutePath(), null, paramContext.getClassLoader());
        if ((!getKitType(paramContext)) && (mClassLoaderKit != null))
        {
          localObject = new Intent();
          ((Intent)localObject).setAction(Constants.KIT_INIT_ACTION);
          paramContext.sendBroadcast((Intent)localObject);
        }
      }
      return mClassLoaderKit;
    }
    Utils.doInitKit(paramContext, false);
    throw new Exception("DexClassLoader Exception");
  }
  
  public static boolean getKitType(Context paramContext)
  {
    return Utils.getSharedPreferences(paramContext).getBoolean(Constants.KIT_FROM_TYPE, true);
  }
  
  public static <T extends OIKM> T getManager(Context paramContext, Class<T> paramClass)
    throws Exception
  {
    String str = paramClass.getName();
    OIKM localOIKM2 = (OIKM)mManagers.get(str);
    OIKM localOIKM1 = localOIKM2;
    if (localOIKM2 == null)
    {
      localOIKM1 = doGetManager(paramContext.getApplicationContext(), paramClass);
      mManagers.put(str, localOIKM1);
    }
    return localOIKM1;
  }
  
  private static void reInitKit(Context paramContext)
  {
    if (!getKitType(paramContext)) {
      Utils.doInitKit(paramContext, true);
    }
  }
  
  public static void resetKit(Context paramContext, boolean paramBoolean)
  {
    mClassLoaderKit = null;
    mManagers.clear();
    setKitType(paramContext, paramBoolean);
    try
    {
      getKitDexClassLoader(paramContext);
      return;
    }
    catch (Exception paramContext)
    {
      MyLog.I("error==" + paramContext.getMessage());
    }
  }
  
  public static void setKitType(Context paramContext, boolean paramBoolean)
  {
    Utils.getSharedPreferences(paramContext).edit().putBoolean(Constants.KIT_FROM_TYPE, paramBoolean).commit();
  }
}
