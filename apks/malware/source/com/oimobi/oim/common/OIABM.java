package com.oimobi.oim.common;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources.Theme;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import java.lang.reflect.Method;

public class OIABM
  extends OIKM
{
  private Method acMethod;
  private Method onActivityResult;
  private Method onApplyThemeResource;
  private Method onBackPressed;
  private Method onConfigurationChanged;
  private Method onContentChanged;
  private Method onContextItemSelected;
  private Method onContextMenuClosed;
  private Method onCreate;
  private Method onCreateContextMenu;
  private Method onCreateDialog;
  private Method onCreateOptionsMenu;
  private Method onCreatePanelMenu;
  private Method onCreatePanelView;
  private Method onCreateView;
  private Method onDestroy;
  private Method onKeyDown;
  private Method onKeyLongPress;
  private Method onKeyMultiple;
  private Method onKeyUp;
  private Method onMenuItemSelected;
  private Method onMenuOpened;
  private Method onNewIntent;
  private Method onOptionsItemSelected;
  private Method onOptionsMenuClosed;
  private Method onPanelClosed;
  private Method onPause;
  private Method onRestart;
  private Method onRestoreInstanceState;
  private Method onResume;
  private Method onSaveInstanceState;
  private Method onStart;
  private Method onStop;
  private Method onTouchEvent;
  private Method onWindowFocusChanged;
  private Method setTheme;
  
  public OIABM() {}
  
  public void acMethod(Activity paramActivity)
  {
    if (this.acMethod == null) {
      this.acMethod = getMethod(this.mKitManager, "setActivity");
    }
    invokeMethod(this.mKitManager, this.acMethod, new Object[] { paramActivity });
  }
  
  public String gkmn()
  {
    if (TextUtils.isEmpty(this.mKitManagerName))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("m").append("k").append("i").append("t").append(".").append("o").append("i").append("m").append(".").append("i").append("m").append("i").append(".").append("M").append("F").append("A").append("C");
      this.mKitManagerName = localStringBuilder.toString();
    }
    return this.mKitManagerName;
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (this.onActivityResult == null) {
      this.onActivityResult = getMethod(this.mKitManager, "onActivityResult");
    }
    invokeMethod(this.mKitManager, this.onActivityResult, new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), paramIntent });
  }
  
  public void onApplyThemeResource(Resources.Theme paramTheme, int paramInt, boolean paramBoolean)
  {
    if (this.onApplyThemeResource == null) {
      this.onApplyThemeResource = getMethod(this.mKitManager, "onApplyThemeResource");
    }
    invokeMethod(this.mKitManager, this.onApplyThemeResource, new Object[] { paramTheme, Integer.valueOf(paramInt), Boolean.valueOf(paramBoolean) });
  }
  
  public void onBackPressed()
  {
    if (this.onBackPressed == null) {
      this.onBackPressed = getMethod(this.mKitManager, "onBackPressed");
    }
    invokeMethod(this.mKitManager, this.onBackPressed, null);
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    if (this.onConfigurationChanged == null) {
      this.onConfigurationChanged = getMethod(this.mKitManager, "onConfigurationChanged");
    }
    invokeMethod(this.mKitManager, this.onConfigurationChanged, new Object[] { paramConfiguration });
  }
  
  public void onContentChanged()
  {
    if (this.onContentChanged == null) {
      this.onContentChanged = getMethod(this.mKitManager, "onContentChanged");
    }
    invokeMethod(this.mKitManager, this.onContentChanged, null);
  }
  
  public boolean onContextItemSelected(MenuItem paramMenuItem)
  {
    boolean bool = true;
    if (this.onContextItemSelected == null) {
      this.onContextItemSelected = getMethod(this.mKitManager, "onContextItemSelected");
    }
    paramMenuItem = invokeMethod(this.mKitManager, this.onContextItemSelected, new Object[] { paramMenuItem });
    if (paramMenuItem != null) {
      bool = ((Boolean)paramMenuItem).booleanValue();
    }
    return bool;
  }
  
  public void onContextMenuClosed(Menu paramMenu)
  {
    if (this.onContextMenuClosed == null) {
      this.onContextMenuClosed = getMethod(this.mKitManager, "onContextMenuClosed");
    }
    invokeMethod(this.mKitManager, this.onContextMenuClosed, new Object[] { paramMenu });
  }
  
  public void onCreate(Bundle paramBundle)
  {
    if (this.onCreate == null) {
      this.onCreate = getMethod(this.mKitManager, "onCreate");
    }
    invokeMethod(this.mKitManager, this.onCreate, new Object[] { paramBundle });
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    if (this.onCreateContextMenu == null) {
      this.onCreateContextMenu = getMethod(this.mKitManager, "onCreateContextMenu");
    }
    invokeMethod(this.mKitManager, this.onCreateContextMenu, new Object[] { paramContextMenu, paramView, paramContextMenuInfo });
  }
  
  public Dialog onCreateDialog(int paramInt)
  {
    if (this.onCreateDialog == null) {
      this.onCreateDialog = getMethod(this.mKitManager, "onCreateDialog");
    }
    Object localObject = invokeMethod(this.mKitManager, this.onCreateDialog, new Object[] { Integer.valueOf(paramInt) });
    if (localObject != null) {
      return (Dialog)localObject;
    }
    return null;
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    boolean bool = true;
    if (this.onCreateOptionsMenu == null) {
      this.onCreateOptionsMenu = getMethod(this.mKitManager, "onCreateOptionsMenu");
    }
    paramMenu = invokeMethod(this.mKitManager, this.onCreateOptionsMenu, new Object[] { paramMenu });
    if (paramMenu != null) {
      bool = ((Boolean)paramMenu).booleanValue();
    }
    return bool;
  }
  
  public boolean onCreatePanelMenu(int paramInt, Menu paramMenu)
  {
    boolean bool = true;
    if (this.onCreatePanelMenu == null) {
      this.onCreatePanelMenu = getMethod(this.mKitManager, "onCreatePanelMenu");
    }
    paramMenu = invokeMethod(this.mKitManager, this.onCreatePanelMenu, new Object[] { Integer.valueOf(paramInt), paramMenu });
    if (paramMenu != null) {
      bool = ((Boolean)paramMenu).booleanValue();
    }
    return bool;
  }
  
  public View onCreatePanelView(int paramInt)
  {
    if (this.onCreatePanelView == null) {
      this.onCreatePanelView = getMethod(this.mKitManager, "onCreatePanelView");
    }
    Object localObject = invokeMethod(this.mKitManager, this.onCreatePanelView, new Object[] { Integer.valueOf(paramInt) });
    if (localObject != null) {
      return (View)localObject;
    }
    return null;
  }
  
  public View onCreateView(String paramString, Context paramContext, AttributeSet paramAttributeSet)
  {
    if (this.onCreateView == null) {
      this.onCreateView = getMethod(this.mKitManager, "onCreateView");
    }
    paramString = invokeMethod(this.mKitManager, this.onCreateView, new Object[] { paramString, paramContext, paramAttributeSet });
    if (paramString != null) {
      return (View)paramString;
    }
    return null;
  }
  
  public void onDestroy()
  {
    if (this.onDestroy == null) {
      this.onDestroy = getMethod(this.mKitManager, "onDestroy");
    }
    invokeMethod(this.mKitManager, this.onDestroy, null);
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool = false;
    if (this.onKeyDown == null) {
      this.onKeyDown = getMethod(this.mKitManager, "onKeyDown");
    }
    paramKeyEvent = invokeMethod(this.mKitManager, this.onKeyDown, new Object[] { Integer.valueOf(paramInt), paramKeyEvent });
    if (paramKeyEvent != null) {
      bool = ((Boolean)paramKeyEvent).booleanValue();
    }
    return bool;
  }
  
  public boolean onKeyLongPress(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool = false;
    if (this.onKeyLongPress == null) {
      this.onKeyLongPress = getMethod(this.mKitManager, "onKeyLongPress");
    }
    paramKeyEvent = invokeMethod(this.mKitManager, this.onKeyLongPress, new Object[] { Integer.valueOf(paramInt), paramKeyEvent });
    if (paramKeyEvent != null) {
      bool = ((Boolean)paramKeyEvent).booleanValue();
    }
    return bool;
  }
  
  public boolean onKeyMultiple(int paramInt1, int paramInt2, KeyEvent paramKeyEvent)
  {
    boolean bool = false;
    if (this.onKeyMultiple == null) {
      this.onKeyMultiple = getMethod(this.mKitManager, "onKeyMultiple");
    }
    paramKeyEvent = invokeMethod(this.mKitManager, this.onKeyMultiple, new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), paramKeyEvent });
    if (paramKeyEvent != null) {
      bool = ((Boolean)paramKeyEvent).booleanValue();
    }
    return bool;
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool = false;
    if (this.onKeyUp == null) {
      this.onKeyUp = getMethod(this.mKitManager, "onKeyUp");
    }
    paramKeyEvent = invokeMethod(this.mKitManager, this.onKeyUp, new Object[] { Integer.valueOf(paramInt), paramKeyEvent });
    if (paramKeyEvent != null) {
      bool = ((Boolean)paramKeyEvent).booleanValue();
    }
    return bool;
  }
  
  public boolean onMenuItemSelected(int paramInt, MenuItem paramMenuItem)
  {
    boolean bool = true;
    if (this.onMenuItemSelected == null) {
      this.onMenuItemSelected = getMethod(this.mKitManager, "onMenuItemSelected");
    }
    paramMenuItem = invokeMethod(this.mKitManager, this.onMenuItemSelected, new Object[] { Integer.valueOf(paramInt), paramMenuItem });
    if (paramMenuItem != null) {
      bool = ((Boolean)paramMenuItem).booleanValue();
    }
    return bool;
  }
  
  public boolean onMenuOpened(int paramInt, Menu paramMenu)
  {
    boolean bool = true;
    if (this.onMenuOpened == null) {
      this.onMenuOpened = getMethod(this.mKitManager, "onMenuOpened");
    }
    paramMenu = invokeMethod(this.mKitManager, this.onMenuOpened, new Object[] { Integer.valueOf(paramInt), paramMenu });
    if (paramMenu != null) {
      bool = ((Boolean)paramMenu).booleanValue();
    }
    return bool;
  }
  
  public void onNewIntent(Intent paramIntent)
  {
    if (this.onNewIntent == null) {
      this.onNewIntent = getMethod(this.mKitManager, "onNewIntent");
    }
    invokeMethod(this.mKitManager, this.onNewIntent, new Object[] { paramIntent });
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    boolean bool = true;
    if (this.onOptionsItemSelected == null) {
      this.onOptionsItemSelected = getMethod(this.mKitManager, "onOptionsItemSelected");
    }
    paramMenuItem = invokeMethod(this.mKitManager, this.onOptionsItemSelected, new Object[] { paramMenuItem });
    if (paramMenuItem != null) {
      bool = ((Boolean)paramMenuItem).booleanValue();
    }
    return bool;
  }
  
  public void onOptionsMenuClosed(Menu paramMenu)
  {
    if (this.onOptionsMenuClosed == null) {
      this.onOptionsMenuClosed = getMethod(this.mKitManager, "onOptionsMenuClosed");
    }
    invokeMethod(this.mKitManager, this.onOptionsMenuClosed, new Object[] { paramMenu });
  }
  
  public void onPanelClosed(int paramInt, Menu paramMenu)
  {
    if (this.onPanelClosed == null) {
      this.onPanelClosed = getMethod(this.mKitManager, "onPanelClosed");
    }
    invokeMethod(this.mKitManager, this.onPanelClosed, new Object[] { Integer.valueOf(paramInt), paramMenu });
  }
  
  public void onPause()
  {
    if (this.onPause == null) {
      this.onPause = getMethod(this.mKitManager, "onPause");
    }
    invokeMethod(this.mKitManager, this.onPause, null);
  }
  
  public void onRestart()
  {
    if (this.onRestart == null) {
      this.onRestart = getMethod(this.mKitManager, "onRestart");
    }
    invokeMethod(this.mKitManager, this.onRestart, null);
  }
  
  public void onRestoreInstanceState(Bundle paramBundle)
  {
    if (this.onRestoreInstanceState == null) {
      this.onRestoreInstanceState = getMethod(this.mKitManager, "onRestoreInstanceState");
    }
    invokeMethod(this.mKitManager, this.onRestoreInstanceState, new Object[] { paramBundle });
  }
  
  public void onResume()
  {
    if (this.onResume == null) {
      this.onResume = getMethod(this.mKitManager, "onResume");
    }
    invokeMethod(this.mKitManager, this.onResume, null);
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    if (this.onSaveInstanceState == null) {
      this.onSaveInstanceState = getMethod(this.mKitManager, "onSaveInstanceState");
    }
    invokeMethod(this.mKitManager, this.onSaveInstanceState, new Object[] { paramBundle });
  }
  
  public void onStart()
  {
    if (this.onStart == null) {
      this.onStart = getMethod(this.mKitManager, "onStart");
    }
    invokeMethod(this.mKitManager, this.onStart, null);
  }
  
  public void onStop()
  {
    if (this.onStop == null) {
      this.onStop = getMethod(this.mKitManager, "onStop");
    }
    invokeMethod(this.mKitManager, this.onStop, null);
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool = false;
    if (this.onTouchEvent == null) {
      this.onTouchEvent = getMethod(this.mKitManager, "onTouchEvent");
    }
    paramMotionEvent = invokeMethod(this.mKitManager, this.onTouchEvent, new Object[] { paramMotionEvent });
    if (paramMotionEvent != null) {
      bool = ((Boolean)paramMotionEvent).booleanValue();
    }
    return bool;
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    if (this.onWindowFocusChanged == null) {
      this.onWindowFocusChanged = getMethod(this.mKitManager, "onWindowFocusChanged");
    }
    invokeMethod(this.mKitManager, this.onWindowFocusChanged, new Object[] { Boolean.valueOf(paramBoolean) });
  }
  
  public int setTheme(int paramInt)
  {
    if (this.setTheme == null) {
      this.setTheme = getMethod(this.mKitManager, "setTheme");
    }
    Object localObject = invokeMethod(this.mKitManager, this.setTheme, new Object[] { Integer.valueOf(paramInt) });
    if (localObject != null) {
      paramInt = ((Integer)localObject).intValue();
    }
    return paramInt;
  }
  
  public void sm(Object paramObject)
    throws Exception
  {
    if (paramObject == null) {
      throw new Exception();
    }
    this.mKitManager = paramObject;
  }
}
