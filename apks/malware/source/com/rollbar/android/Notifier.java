package com.rollbar.android;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.util.Log;
import com.rollbar.android.http.HttpRequestManager;
import com.rollbar.android.http.HttpResponse;
import com.rollbar.android.http.HttpResponseHandler;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Notifier
{
  private static final String DEFAULT_ENDPOINT = "https://api.rollbar.com/api/1/items/";
  private static final int DEFAULT_ITEM_SCHEDULE_DELAY = 1;
  private static final String ITEM_DIR_NAME = "rollbar-items";
  private static final int MAX_LOGCAT_SIZE = 100;
  private static final String NOTIFIER_VERSION = "0.0.6";
  private static int itemCounter = 0;
  private String accessToken;
  private String defaultCaughtExceptionLevel;
  private String endpoint;
  private String environment;
  private volatile boolean handlerScheduled;
  private boolean includeLogcat;
  private JSONObject personData;
  private File queuedItemDirectory;
  private boolean reportUncaughtExceptions;
  private RollbarThread rollbarThread;
  private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
  private boolean sendOnUncaughtException;
  private String uncaughtExceptionLevel;
  private int versionCode;
  private String versionName;
  
  public Notifier(Context paramContext, String paramString1, String paramString2)
  {
    this.accessToken = paramString1;
    this.environment = paramString2;
    try
    {
      paramString1 = paramContext.getPackageName();
      paramString1 = paramContext.getPackageManager().getPackageInfo(paramString1, 0);
      this.versionCode = paramString1.versionCode;
      this.versionName = paramString1.versionName;
      this.endpoint = "https://api.rollbar.com/api/1/items/";
      this.reportUncaughtExceptions = true;
      this.defaultCaughtExceptionLevel = "warning";
      this.uncaughtExceptionLevel = "error";
      this.sendOnUncaughtException = false;
      this.handlerScheduled = false;
      this.queuedItemDirectory = new File(paramContext.getCacheDir(), "rollbar-items");
      this.queuedItemDirectory.mkdirs();
      RollbarExceptionHandler.register(this);
      this.rollbarThread = new RollbarThread(this);
      this.rollbarThread.start();
      scheduleItemFileHandler();
      return;
    }
    catch (PackageManager.NameNotFoundException paramString1)
    {
      for (;;)
      {
        Log.e("Rollbar", "Error getting package info.");
      }
    }
  }
  
  private JSONObject buildClientData()
    throws JSONException
  {
    JSONObject localJSONObject1 = new JSONObject();
    localJSONObject1.put("timestamp", System.currentTimeMillis() / 1000L);
    JSONObject localJSONObject2 = new JSONObject();
    localJSONObject2.put("phone_model", Build.MODEL);
    localJSONObject2.put("android_version", Build.VERSION.RELEASE);
    localJSONObject2.put("code_version", this.versionName);
    localJSONObject2.put("version_code", this.versionCode);
    localJSONObject2.put("version_name", this.versionName);
    if (this.includeLogcat) {
      localJSONObject2.put("logs", getLogcatInfo());
    }
    localJSONObject1.put("android", localJSONObject2);
    localJSONObject1.put("user_ip", "$remote_ip");
    return localJSONObject1;
  }
  
  private JSONObject buildData(String paramString, JSONObject paramJSONObject)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("environment", this.environment);
    localJSONObject.put("level", paramString);
    localJSONObject.put("platform", "android");
    localJSONObject.put("framework", "android");
    localJSONObject.put("language", "java");
    localJSONObject.put("body", paramJSONObject);
    if (this.personData != null) {
      localJSONObject.put("person", this.personData);
    }
    localJSONObject.put("client", buildClientData());
    localJSONObject.put("notifier", buildNotifierData());
    return localJSONObject;
  }
  
  private JSONObject buildItemPayload(String paramString1, String paramString2)
  {
    try
    {
      JSONObject localJSONObject1 = new JSONObject();
      JSONObject localJSONObject2 = new JSONObject();
      localJSONObject2.put("body", paramString1);
      localJSONObject1.put("message", localJSONObject2);
      paramString1 = buildData(paramString2, localJSONObject1);
      return paramString1;
    }
    catch (JSONException paramString1)
    {
      Log.e("Rollbar", "There was an error constructing the JSON payload.", paramString1);
    }
    return null;
  }
  
  private JSONObject buildItemPayload(String paramString1, String paramString2, Map<String, String> paramMap)
  {
    try
    {
      JSONObject localJSONObject1 = new JSONObject();
      JSONObject localJSONObject2 = new JSONObject();
      localJSONObject2.put("body", paramString1);
      localJSONObject1.put("message", localJSONObject2);
      paramString1 = paramMap.keySet().iterator();
      for (;;)
      {
        if (!paramString1.hasNext()) {
          return buildData(paramString2, localJSONObject1);
        }
        String str = (String)paramString1.next();
        localJSONObject2.put(str, paramMap.get(str));
      }
      return null;
    }
    catch (JSONException paramString1)
    {
      Log.e("Rollbar", "There was an error constructing the JSON payload.", paramString1);
    }
  }
  
  private JSONObject buildItemPayload(Throwable paramThrowable, String paramString1, String paramString2)
  {
    try
    {
      JSONObject localJSONObject = new JSONObject();
      ArrayList localArrayList = new ArrayList();
      Throwable localThrowable;
      do
      {
        localArrayList.add(0, createTrace(paramThrowable, paramString2));
        localThrowable = paramThrowable.getCause();
        paramThrowable = localThrowable;
      } while (localThrowable != null);
      localJSONObject.put("trace_chain", new JSONArray(localArrayList));
      paramThrowable = paramString1;
      if (paramString1 == null) {
        paramThrowable = this.defaultCaughtExceptionLevel;
      }
      paramThrowable = buildData(paramThrowable, localJSONObject);
      return paramThrowable;
    }
    catch (JSONException paramThrowable)
    {
      Log.e("Rollbar", "There was an error constructing the JSON payload.", paramThrowable);
    }
    return null;
  }
  
  private JSONObject buildNotifierData()
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("name", "rollbar-android");
    localJSONObject.put("version", "0.0.6");
    return localJSONObject;
  }
  
  private JSONObject buildPayload(JSONArray paramJSONArray)
    throws JSONException
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("access_token", this.accessToken);
    localJSONObject.put("data", paramJSONArray);
    return localJSONObject;
  }
  
  private JSONObject createTrace(Throwable paramThrowable, String paramString)
    throws JSONException
  {
    JSONObject localJSONObject1 = new JSONObject();
    JSONArray localJSONArray = new JSONArray();
    Object localObject = paramThrowable.getStackTrace();
    int i = localObject.length - 1;
    for (;;)
    {
      if (i < 0) {}
      try
      {
        localObject = new ByteArrayOutputStream();
        PrintStream localPrintStream = new PrintStream((OutputStream)localObject);
        paramThrowable.printStackTrace(localPrintStream);
        localPrintStream.close();
        ((ByteArrayOutputStream)localObject).close();
        localJSONObject1.put("raw", ((ByteArrayOutputStream)localObject).toString("UTF-8"));
        localObject = new JSONObject();
        ((JSONObject)localObject).put("class", paramThrowable.getClass().getName());
        ((JSONObject)localObject).put("message", paramThrowable.getMessage());
        if (!TextUtils.isEmpty(paramString)) {
          ((JSONObject)localObject).put("description", paramString);
        }
        localJSONObject1.put("frames", localJSONArray);
        localJSONObject1.put("exception", localObject);
        return localJSONObject1;
        localPrintStream = localObject[i];
        JSONObject localJSONObject2 = new JSONObject();
        localJSONObject2.put("class_name", localPrintStream.getClassName());
        localJSONObject2.put("filename", localPrintStream.getFileName());
        localJSONObject2.put("method", localPrintStream.getMethodName());
        if (localPrintStream.getLineNumber() > 0) {
          localJSONObject2.put("lineno", localPrintStream.getLineNumber());
        }
        localJSONArray.put(localJSONObject2);
        i -= 1;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Log.e("Rollbar", "Exception printing stack trace.", localException);
        }
      }
    }
  }
  
  private JSONArray getLogcatInfo()
  {
    int i = android.os.Process.myPid();
    try
    {
      BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("logcat -d").getInputStream()), 8192);
      ArrayList localArrayList = new ArrayList();
      for (;;)
      {
        String str = localBufferedReader.readLine();
        if (str == null) {
          return new JSONArray(localArrayList);
        }
        if (str.contains(String.valueOf(i)))
        {
          localArrayList.add(str);
          if (localArrayList.size() > 100) {
            localArrayList.remove(0);
          }
        }
      }
      return null;
    }
    catch (IOException localIOException)
    {
      Log.e("Rollbar", "Unable to collect logcat info.", localIOException);
    }
  }
  
  private JSONArray loadItems(File paramFile)
  {
    Log.d("Rollbar", "Loading items...");
    Object localObject;
    for (;;)
    {
      try
      {
        localObject = new FileInputStream(paramFile);
        localStringBuilder = new StringBuilder();
        arrayOfByte = new byte['Ѐ'];
        if (((FileInputStream)localObject).read(arrayOfByte) == -1)
        {
          ((FileInputStream)localObject).close();
          localObject = new JSONArray(localStringBuilder.toString());
        }
      }
      catch (FileNotFoundException paramFile)
      {
        StringBuilder localStringBuilder;
        byte[] arrayOfByte;
        localObject = null;
        Log.e("Rollbar", "Unable to read item file.", paramFile);
        return localObject;
      }
      catch (IOException paramFile)
      {
        localObject = null;
        Log.e("Rollbar", "Unable to read item file.", paramFile);
        return localObject;
      }
      catch (JSONException localJSONException1)
      {
        localObject = null;
      }
      try
      {
        Log.d("Rollbar", "Items loaded.");
        return localObject;
      }
      catch (FileNotFoundException paramFile)
      {
        continue;
      }
      catch (IOException paramFile)
      {
        continue;
      }
      catch (JSONException localJSONException2)
      {
        for (;;) {}
      }
      localStringBuilder.append(new String(arrayOfByte));
    }
    Log.e("Rollbar", "Invalid item data. Deleting file.", localJSONException1);
    paramFile.delete();
    return localObject;
  }
  
  private void scheduleItemFileHandler()
  {
    if (!this.handlerScheduled)
    {
      this.handlerScheduled = true;
      Log.d("Rollbar", "Scheheduling item file handler...");
      this.scheduler.schedule(new Runnable()
      {
        public void run()
        {
          Log.d("Rollbar", "Item file handler running...");
          File[] arrayOfFile = Notifier.this.queuedItemDirectory.listFiles();
          int j = arrayOfFile.length;
          int i = 0;
          for (;;)
          {
            if (i >= j)
            {
              Notifier.this.handlerScheduled = false;
              Log.d("Rollbar", "Item file handler finished.");
              return;
            }
            File localFile = arrayOfFile[i];
            JSONArray localJSONArray = Notifier.this.loadItems(localFile);
            Notifier.this.postItems(localJSONArray, localFile);
            i += 1;
          }
        }
      }, 1L, TimeUnit.SECONDS);
    }
  }
  
  public void postItems(final JSONArray paramJSONArray, final File paramFile)
  {
    Log.i("Rollbar", "Sending item batch...");
    try
    {
      JSONObject localJSONObject = buildPayload(paramJSONArray);
      HttpRequestManager.getInstance().postJson(this.endpoint, localJSONObject, false, new HttpResponseHandler()
      {
        public void onFailure(HttpResponse paramAnonymousHttpResponse)
        {
          Log.e("Rollbar", "There was a problem reporting to Rollbar.");
          Log.e("Rollbar", "Response: " + paramAnonymousHttpResponse);
          if (paramFile == null) {
            if (!paramAnonymousHttpResponse.hasStatusCode()) {
              Notifier.this.writeItems(paramJSONArray);
            }
          }
          while (!paramAnonymousHttpResponse.hasStatusCode()) {
            return;
          }
          paramFile.delete();
        }
        
        public void onSuccess(HttpResponse paramAnonymousHttpResponse)
        {
          Log.i("Rollbar", "Success");
          if (paramFile != null) {
            paramFile.delete();
          }
        }
      });
      return;
    }
    catch (JSONException paramJSONArray)
    {
      Log.e("Rollbar", "There was an error constructing the JSON payload.", paramJSONArray);
    }
  }
  
  public void reportException(Throwable paramThrowable, String paramString1, String paramString2)
  {
    paramThrowable = buildItemPayload(paramThrowable, paramString1, paramString2);
    if (paramThrowable != null) {
      this.rollbarThread.queueItem(paramThrowable);
    }
  }
  
  public void reportMessage(String paramString1, String paramString2)
  {
    paramString1 = buildItemPayload(paramString1, paramString2);
    if (paramString1 != null) {
      this.rollbarThread.queueItem(paramString1);
    }
  }
  
  public void reportMessage(String paramString1, String paramString2, Map<String, String> paramMap)
  {
    paramString1 = buildItemPayload(paramString1, paramString2, paramMap);
    if (paramString1 != null) {
      this.rollbarThread.queueItem(paramString1);
    }
  }
  
  public void setDefaultCaughtExceptionLevel(String paramString)
  {
    this.defaultCaughtExceptionLevel = paramString;
  }
  
  public void setEndpoint(String paramString)
  {
    this.endpoint = paramString;
  }
  
  public void setIncludeLogcat(boolean paramBoolean)
  {
    this.includeLogcat = paramBoolean;
  }
  
  public void setPersonData(String paramString1, String paramString2, String paramString3)
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("id", paramString1);
      if (paramString2 != null) {
        localJSONObject.put("username", paramString2);
      }
      if (paramString3 != null) {
        localJSONObject.put("email", paramString3);
      }
      this.personData = localJSONObject;
      return;
    }
    catch (JSONException paramString1)
    {
      Log.e("Rollbar", "JSON error creating person data.", paramString1);
    }
  }
  
  public void setPersonData(JSONObject paramJSONObject)
  {
    this.personData = paramJSONObject;
  }
  
  public void setReportUncaughtExceptions(boolean paramBoolean)
  {
    this.reportUncaughtExceptions = paramBoolean;
  }
  
  public void setSendOnUncaughtException(boolean paramBoolean)
  {
    this.sendOnUncaughtException = paramBoolean;
  }
  
  public void setUncaughtExceptionLevel(String paramString)
  {
    this.uncaughtExceptionLevel = paramString;
  }
  
  public void uncaughtException(Throwable paramThrowable)
  {
    JSONArray localJSONArray;
    if (this.reportUncaughtExceptions)
    {
      Log.d("Rollbar", "Handling uncaught exception...");
      this.rollbarThread.interrupt();
      paramThrowable = buildItemPayload(paramThrowable, this.uncaughtExceptionLevel, null);
      if (paramThrowable != null)
      {
        localJSONArray = new JSONArray();
        localJSONArray.put(paramThrowable);
        if (!this.sendOnUncaughtException) {
          break label73;
        }
        postItems(localJSONArray, null);
      }
    }
    for (;;)
    {
      try
      {
        this.rollbarThread.join();
        return;
      }
      catch (InterruptedException paramThrowable)
      {
        label73:
        Log.d("Rollbar", "Couldn't join rollbar thread", paramThrowable);
      }
      writeItems(localJSONArray);
    }
  }
  
  public File writeItems(JSONArray paramJSONArray)
  {
    Log.d("Rollbar", "Writing items...");
    try
    {
      int i = itemCounter;
      itemCounter = i + 1;
      Object localObject = i + "." + System.currentTimeMillis();
      localObject = new File(this.queuedItemDirectory, (String)localObject);
      FileWriter localFileWriter = new FileWriter((File)localObject);
      localFileWriter.write(paramJSONArray.toString());
      localFileWriter.close();
      Log.d("Rollbar", "Items written");
      return localObject;
    }
    catch (IOException paramJSONArray)
    {
      Log.e("Rollbar", "Unable to write items.", paramJSONArray);
    }
    return null;
  }
}
