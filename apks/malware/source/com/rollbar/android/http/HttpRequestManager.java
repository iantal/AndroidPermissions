package com.rollbar.android.http;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONObject;

public class HttpRequestManager
{
  public static final int MAX_RETRIES = 5;
  private static HttpRequestManager instance = null;
  private ThreadPoolExecutor executor = (ThreadPoolExecutor)Executors.newCachedThreadPool();
  private ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
  
  private HttpRequestManager() {}
  
  public static HttpRequestManager getInstance()
  {
    if (instance == null) {
      instance = new HttpRequestManager();
    }
    return instance;
  }
  
  private void postJson(String paramString1, String paramString2, boolean paramBoolean, HttpResponseHandler paramHttpResponseHandler)
  {
    try
    {
      paramString1 = new URL(paramString1);
      paramString1 = new HttpRequest(paramString1, "POST", paramHttpResponseHandler);
      paramString1.setRequestProperty("Content-Type", "application/json");
      paramString1.setRequestProperty("Accept", "application/json");
      paramString1.setBody(paramString2);
      if (paramBoolean)
      {
        this.executor.execute(paramString1);
        return;
      }
    }
    catch (MalformedURLException paramString1)
    {
      paramHttpResponseHandler.onFailure(new HttpResponse(paramString1.toString()));
      return;
    }
    paramString1.run();
  }
  
  public void postJson(String paramString, JSONArray paramJSONArray, boolean paramBoolean, HttpResponseHandler paramHttpResponseHandler)
  {
    postJson(paramString, paramJSONArray.toString(), paramBoolean, paramHttpResponseHandler);
  }
  
  public void postJson(String paramString, JSONObject paramJSONObject, boolean paramBoolean, HttpResponseHandler paramHttpResponseHandler)
  {
    postJson(paramString, paramJSONObject.toString(), paramBoolean, paramHttpResponseHandler);
  }
  
  public void retryRequest(final HttpRequest paramHttpRequest)
  {
    int i = paramHttpRequest.getAttemptNumber();
    this.service.schedule(new Runnable()
    {
      public void run()
      {
        HttpRequestManager.this.executor.execute(paramHttpRequest);
      }
    }, i, TimeUnit.SECONDS);
  }
}
