package com.a.b;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.UUID;
import org.apache.http.message.BasicNameValuePair;

public class d
{
  private String a;
  private String b;
  private String c;
  private int d = 10000;
  private StringBuffer e;
  private int f = -111;
  private String g;
  private long h;
  private HttpURLConnection i;
  private f j;
  private e k;
  private File l;
  private boolean m = false;
  private InputStream n;
  private byte[] o;
  private String p = UUID.randomUUID().toString();
  
  public d(String paramString1, String paramString2, String paramString3, f paramF)
  {
    this.a = paramString1;
    this.b = paramString2;
    this.c = paramString3;
    this.j = paramF;
    this.e = new StringBuffer();
    this.k = new e(paramF, null, null, 0L);
  }
  
  private void a(HttpURLConnection paramHttpURLConnection)
  {
    try
    {
      this.f = paramHttpURLConnection.getResponseCode();
      this.g = paramHttpURLConnection.getContentEncoding();
      this.h = paramHttpURLConnection.getContentLength();
      this.n = paramHttpURLConnection.getInputStream();
      this.m = true;
      return;
    }
    catch (IOException paramHttpURLConnection)
    {
      paramHttpURLConnection.printStackTrace();
      this.e.append(paramHttpURLConnection.getMessage());
    }
  }
  
  public static byte[] a(String paramString)
  {
    return new d(paramString, null, null, null).b(0);
  }
  
  public static String b(String paramString)
  {
    paramString = a(paramString);
    if (paramString == null) {
      return null;
    }
    return new String(paramString);
  }
  
  private static LinkedList c(String paramString)
  {
    LinkedList localLinkedList = new LinkedList();
    if (paramString == null) {
      return localLinkedList;
    }
    paramString = paramString.split("&");
    int i2 = paramString.length;
    int i1 = 0;
    label26:
    String[] arrayOfString;
    if (i1 < i2)
    {
      arrayOfString = paramString[i1].split("=");
      if (arrayOfString.length == 2) {
        break label55;
      }
    }
    for (;;)
    {
      i1 += 1;
      break label26;
      break;
      label55:
      if ((!arrayOfString[0].equals("")) && (!arrayOfString[1].equals(""))) {
        try
        {
          localLinkedList.add(new BasicNameValuePair(URLEncoder.encode(arrayOfString[0], "utf-8"), URLEncoder.encode(arrayOfString[1], "utf-8")));
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException)
        {
          localUnsupportedEncodingException.printStackTrace();
        }
      }
    }
  }
  
  private void c()
  {
    DataOutputStream localDataOutputStream = new DataOutputStream(this.i.getOutputStream());
    localDataOutputStream.writeBytes("--" + this.p + "\r\n");
    localDataOutputStream.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"" + e(this.l.getName()) + "\"\r\n");
    localDataOutputStream.writeBytes("\r\n");
    FileInputStream localFileInputStream = new FileInputStream(this.l);
    this.k.a(localFileInputStream);
    this.k.a(localDataOutputStream);
    this.k.b(this.l.length());
    this.k.a();
    localDataOutputStream.writeBytes("\r\n--" + this.p + "--\r\n");
    this.k.b();
    this.k.c();
  }
  
  private void c(int paramInt)
  {
    Object localObject3;
    Object localObject4;
    switch (paramInt)
    {
    case 2: 
    default: 
      return;
    case 0: 
      try
      {
        localObject3 = c(this.b);
        if (((LinkedList)localObject3).size() > 0)
        {
          Object localObject1 = new StringBuffer();
          ((StringBuffer)localObject1).append(this.a).append("?");
          localObject3 = ((LinkedList)localObject3).iterator();
          if (!((Iterator)localObject3).hasNext())
          {
            localObject1 = ((StringBuffer)localObject1).substring(0, ((StringBuffer)localObject1).length() - 1);
            this.i = ((HttpURLConnection)new URL((String)localObject1).openConnection());
            this.i.setConnectTimeout(this.d);
            this.i.setDoInput(true);
            this.i.setRequestMethod("GET");
            localObject1 = d(this.c).iterator();
            if (((Iterator)localObject1).hasNext()) {
              break label258;
            }
            a(this.i);
            return;
          }
        }
      }
      catch (MalformedURLException localMalformedURLException)
      {
        for (;;)
        {
          localMalformedURLException.printStackTrace();
          this.e.append(localMalformedURLException.getMessage());
          return;
          localObject4 = (BasicNameValuePair)((Iterator)localObject3).next();
          localMalformedURLException.append(((BasicNameValuePair)localObject4).getName()).append("=").append(((BasicNameValuePair)localObject4).getValue()).append("&");
        }
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          localIOException.printStackTrace();
          this.e.append(localIOException.getMessage());
          return;
          String str = this.a;
          continue;
          localObject3 = (BasicNameValuePair)str.next();
          this.i.addRequestProperty(((BasicNameValuePair)localObject3).getName(), ((BasicNameValuePair)localObject3).getValue());
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return;
      }
    case 1: 
      label258:
      this.i = ((HttpURLConnection)new URL(this.a).openConnection());
      this.i.setConnectTimeout(this.d);
      this.i.setDoInput(true);
      this.i.setDoOutput(true);
      this.i.setRequestMethod("POST");
      localObject2 = d(this.c).iterator();
      if (!((Iterator)localObject2).hasNext())
      {
        this.i.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        localObject2 = new DataOutputStream(this.i.getOutputStream());
        localObject4 = c(this.b);
        if (((LinkedList)localObject4).size() > 0)
        {
          localObject3 = new StringBuffer();
          localObject4 = ((LinkedList)localObject4).iterator();
        }
      }
      for (;;)
      {
        if (!((Iterator)localObject4).hasNext())
        {
          ((DataOutputStream)localObject2).writeBytes(((StringBuffer)localObject3).substring(0, ((StringBuffer)localObject3).length() - 1));
          a(this.i);
          return;
          localObject3 = (BasicNameValuePair)((Iterator)localObject2).next();
          this.i.addRequestProperty(((BasicNameValuePair)localObject3).getName(), ((BasicNameValuePair)localObject3).getValue());
          break;
        }
        BasicNameValuePair localBasicNameValuePair = (BasicNameValuePair)((Iterator)localObject4).next();
        ((StringBuffer)localObject3).append(localBasicNameValuePair.getName()).append("=").append(localBasicNameValuePair.getValue()).append("&");
      }
    }
    this.i = ((HttpURLConnection)new URL(this.a).openConnection());
    this.i.setConnectTimeout(this.d);
    this.i.setDoInput(true);
    this.i.setDoOutput(true);
    this.i.setUseCaches(false);
    this.i.setRequestMethod("POST");
    this.i.setRequestProperty("Connection", "Keep-Alive");
    this.i.setRequestProperty("Charset", "UTF-8");
    this.i.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + this.p);
    Object localObject2 = d(this.c).iterator();
    for (;;)
    {
      if (!((Iterator)localObject2).hasNext())
      {
        c();
        a(this.i);
        return;
      }
      localObject3 = (BasicNameValuePair)((Iterator)localObject2).next();
      this.i.addRequestProperty(((BasicNameValuePair)localObject3).getName(), ((BasicNameValuePair)localObject3).getValue());
    }
  }
  
  private static LinkedList d(String paramString)
  {
    LinkedList localLinkedList = new LinkedList();
    if (paramString == null) {
      return localLinkedList;
    }
    paramString = paramString.split("&");
    int i2 = paramString.length;
    int i1 = 0;
    label26:
    String[] arrayOfString;
    if (i1 < i2)
    {
      arrayOfString = paramString[i1].split("\\|");
      if (arrayOfString.length == 2) {
        break label56;
      }
    }
    for (;;)
    {
      i1 += 1;
      break label26;
      break;
      label56:
      if ((!arrayOfString[0].equals("")) && (!arrayOfString[1].equals(""))) {
        localLinkedList.add(new BasicNameValuePair(arrayOfString[0], arrayOfString[1]));
      }
    }
  }
  
  private String e(String paramString)
  {
    return URLEncoder.encode(paramString, "UTF-8");
  }
  
  public int a()
  {
    return this.f;
  }
  
  public InputStream a(int paramInt)
  {
    if (this.m) {
      return this.n;
    }
    c(paramInt);
    return this.n;
  }
  
  public long b()
  {
    return this.h;
  }
  
  public byte[] b(int paramInt)
  {
    if (this.o != null) {
      return this.o;
    }
    InputStream localInputStream = a(paramInt);
    if (localInputStream == null) {
      return null;
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    this.k.b(this.h);
    this.k.a(localInputStream);
    this.k.a(localByteArrayOutputStream);
    this.k.a();
    this.o = localByteArrayOutputStream.toByteArray();
    this.k.b();
    this.i.disconnect();
    return this.o;
  }
  
  public String toString()
  {
    return "ZNetTask [url=" + this.a + ", params=" + this.b + ", header=" + this.c + ", timeOut=" + this.d + ", errorInfo=" + this.e + ", responseCode=" + this.f + ", encode=" + this.g + ", contentLenght=" + this.h + ", conn=" + this.i + ", zpl=" + this.j + ", zpc=" + this.k + "]";
  }
}
