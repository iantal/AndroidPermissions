package com.baidu.location;

import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Messenger;
import java.util.List;

public class GeofenceClient
  implements au, l
{
  public static final String BUNDLE_FOR_GEOFENCE_ID = "geofence_id";
  private static final int bh = 1;
  private Context bd;
  private OnGeofenceTriggerListener be;
  private ServiceConnection bf = new GeofenceClient.1(this);
  private Messenger bg = new Messenger(this.bk);
  private Messenger bi = null;
  private boolean bj = false;
  private a bk = new a(null);
  
  public GeofenceClient(Context paramContext)
  {
    this.bd = paramContext;
  }
  
  private void jdMethod_else()
  {
    if (this.bj) {
      return;
    }
    Intent localIntent = new Intent(this.bd, f.class);
    try
    {
      this.bd.bindService(localIntent, this.bf, 1);
      return;
    }
    catch (Exception localException)
    {
      this.bj = false;
    }
  }
  
  private void jdMethod_for(String paramString)
  {
    if (this.be != null) {
      this.be.onGeofenceTrigger(paramString);
    }
  }
  
  private void jdMethod_goto()
  {
    try
    {
      Message localMessage = Message.obtain(null, 207);
      localMessage.replyTo = this.bg;
      this.bi.send(localMessage);
      return;
    }
    catch (Exception localException) {}
  }
  
  public void addBDGeofence(BDGeofence paramBDGeofence, OnAddBDGeofencesResultListener paramOnAddBDGeofencesResultListener)
    throws NullPointerException, IllegalArgumentException, IllegalStateException
  {
    ak.a(paramBDGeofence, "geofence is null");
    if (paramBDGeofence != null) {
      ak.jdMethod_if(paramBDGeofence instanceof an, "BDGeofence must be created using BDGeofence.Builder");
    }
    ar.jdMethod_for(this.bd).jdMethod_if((an)paramBDGeofence, paramOnAddBDGeofencesResultListener);
  }
  
  public boolean isStarted()
  {
    return this.bj;
  }
  
  public void registerGeofenceTriggerListener(OnGeofenceTriggerListener paramOnGeofenceTriggerListener)
  {
    if (this.be == null) {
      this.be = paramOnGeofenceTriggerListener;
    }
  }
  
  public void removeBDGeofences(List paramList, OnRemoveBDGeofencesResultListener paramOnRemoveBDGeofencesResultListener)
    throws NullPointerException, IllegalArgumentException
  {
    ar.jdMethod_for(this.bd).jdMethod_if(paramList, paramOnRemoveBDGeofencesResultListener);
  }
  
  public void start()
    throws NullPointerException
  {
    ak.a(this.be, "OnGeofenceTriggerListener not register!");
    this.bk.obtainMessage(1).sendToTarget();
  }
  
  public void startGeofenceScann()
  {
    if (this.bj) {}
    try
    {
      Message localMessage = Message.obtain(null, 206);
      localMessage.replyTo = this.bg;
      this.bi.send(localMessage);
      return;
    }
    catch (Exception localException) {}
  }
  
  public void stop()
  {
    jdMethod_goto();
  }
  
  public static abstract interface OnAddBDGeofencesResultListener
  {
    public abstract void onAddBDGeofencesResult(int paramInt, String paramString);
  }
  
  public static abstract interface OnGeofenceTriggerListener
  {
    public abstract void onGeofenceTrigger(String paramString);
  }
  
  public static abstract interface OnRemoveBDGeofencesResultListener
  {
    public abstract void onRemoveBDGeofencesByRequestIdsResult(int paramInt, String[] paramArrayOfString);
  }
  
  private class a
    extends Handler
  {
    private a() {}
    
    public void handleMessage(Message paramMessage)
    {
      switch (paramMessage.what)
      {
      default: 
      case 208: 
        do
        {
          return;
          paramMessage = paramMessage.getData();
        } while (paramMessage == null);
        paramMessage = paramMessage.getString("geofence_id");
        GeofenceClient.jdMethod_if(GeofenceClient.this, paramMessage);
        return;
      }
      GeofenceClient.jdMethod_do(GeofenceClient.this);
    }
  }
}
