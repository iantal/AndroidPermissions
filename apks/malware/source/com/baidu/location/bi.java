package com.baidu.location;

import android.os.Build;
import android.os.Build.VERSION;
import android.os.Handler;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

class bi
  extends cb
{
  private static bi l = null;
  String a = null;
  String b = null;
  String c = null;
  Handler d = null;
  
  private bi() {}
  
  /* Error */
  public static void a(File paramFile1, File paramFile2)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: new 38	java/io/BufferedInputStream
    //   5: dup
    //   6: new 40	java/io/FileInputStream
    //   9: dup
    //   10: aload_0
    //   11: invokespecial 43	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   14: invokespecial 46	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   17: astore_0
    //   18: new 48	java/io/BufferedOutputStream
    //   21: dup
    //   22: new 50	java/io/FileOutputStream
    //   25: dup
    //   26: aload_1
    //   27: invokespecial 51	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   30: invokespecial 54	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   33: astore_1
    //   34: sipush 5120
    //   37: newarray byte
    //   39: astore_3
    //   40: aload_0
    //   41: aload_3
    //   42: invokevirtual 58	java/io/BufferedInputStream:read	([B)I
    //   45: istore_2
    //   46: iload_2
    //   47: iconst_m1
    //   48: if_icmpeq +38 -> 86
    //   51: aload_1
    //   52: aload_3
    //   53: iconst_0
    //   54: iload_2
    //   55: invokevirtual 62	java/io/BufferedOutputStream:write	([BII)V
    //   58: goto -18 -> 40
    //   61: astore 4
    //   63: aload_0
    //   64: astore_3
    //   65: aload 4
    //   67: astore_0
    //   68: aload_3
    //   69: ifnull +7 -> 76
    //   72: aload_3
    //   73: invokevirtual 65	java/io/BufferedInputStream:close	()V
    //   76: aload_1
    //   77: ifnull +7 -> 84
    //   80: aload_1
    //   81: invokevirtual 66	java/io/BufferedOutputStream:close	()V
    //   84: aload_0
    //   85: athrow
    //   86: aload_1
    //   87: invokevirtual 69	java/io/BufferedOutputStream:flush	()V
    //   90: aload_0
    //   91: ifnull +7 -> 98
    //   94: aload_0
    //   95: invokevirtual 65	java/io/BufferedInputStream:close	()V
    //   98: aload_1
    //   99: ifnull +7 -> 106
    //   102: aload_1
    //   103: invokevirtual 66	java/io/BufferedOutputStream:close	()V
    //   106: return
    //   107: astore_0
    //   108: aconst_null
    //   109: astore_1
    //   110: goto -42 -> 68
    //   113: astore 4
    //   115: aconst_null
    //   116: astore_1
    //   117: aload_0
    //   118: astore_3
    //   119: aload 4
    //   121: astore_0
    //   122: goto -54 -> 68
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	125	0	paramFile1	File
    //   0	125	1	paramFile2	File
    //   45	10	2	i	int
    //   1	118	3	localObject1	Object
    //   61	5	4	localObject2	Object
    //   113	7	4	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   34	40	61	finally
    //   40	46	61	finally
    //   51	58	61	finally
    //   86	90	61	finally
    //   2	18	107	finally
    //   18	34	113	finally
  }
  
  private static boolean a(String paramString1, String paramString2)
  {
    File localFile = new File(bh.g() + File.separator + "tmp");
    if (localFile.exists()) {
      localFile.delete();
    }
    FileOutputStream localFileOutputStream;
    try
    {
      localFileOutputStream = new FileOutputStream(localFile);
      byte[] arrayOfByte = new byte['á€€'];
      paramString1 = (HttpURLConnection)new URL(paramString1).openConnection();
      BufferedInputStream localBufferedInputStream = new BufferedInputStream(paramString1.getInputStream());
      for (;;)
      {
        int i = localBufferedInputStream.read(arrayOfByte);
        if (i <= 0) {
          break;
        }
        localFileOutputStream.write(arrayOfByte, 0, i);
      }
      paramString1.disconnect();
    }
    catch (Exception paramString1)
    {
      localFile.delete();
      return false;
    }
    localFileOutputStream.close();
    if (localFile.length() < 10240L)
    {
      localFile.delete();
      return false;
    }
    localFile.renameTo(new File(bh.g() + File.separator + paramString2));
    return true;
  }
  
  public static bi b()
  {
    if (l == null) {
      l = new bi();
    }
    return l;
  }
  
  private Handler i()
  {
    return this.d;
  }
  
  private void j()
  {
    if (this.a == null) {}
    while (!ao.g()) {
      return;
    }
    new bl(this).start();
  }
  
  private boolean k()
  {
    if (this.c == null) {}
    while (new File(bh.g() + File.separator + this.c).exists()) {
      return true;
    }
    return a("http://" + this.a + "/" + this.c, this.c);
  }
  
  private void l()
  {
    if (this.b == null) {}
    File localFile2;
    do
    {
      return;
      localFile2 = new File(bh.g() + File.separator + this.b);
    } while ((localFile2.exists()) || (!a("http://" + this.a + "/" + this.b, this.b)));
    File localFile1 = new File(bh.g() + File.separator + f.d);
    if (localFile1.exists()) {
      localFile1.delete();
    }
    try
    {
      a(localFile2, localFile1);
      return;
    }
    catch (Exception localException)
    {
      localFile1.delete();
    }
  }
  
  void a()
  {
    StringBuffer localStringBuffer = new StringBuffer(128);
    localStringBuffer.append("&sdk=");
    localStringBuffer.append(4.2F);
    localStringBuffer.append("&fw=");
    localStringBuffer.append(f.a());
    localStringBuffer.append("&suit=");
    localStringBuffer.append(2);
    if (bg.a().b == null)
    {
      localStringBuffer.append("&im=");
      localStringBuffer.append(bg.a().a);
    }
    for (;;)
    {
      localStringBuffer.append("&mb=");
      localStringBuffer.append(Build.MODEL);
      localStringBuffer.append("&sv=");
      String str2 = Build.VERSION.RELEASE;
      String str1 = str2;
      if (str2 != null)
      {
        str1 = str2;
        if (str2.length() > 10) {
          str1 = str2.substring(0, 10);
        }
      }
      localStringBuffer.append(str1);
      localStringBuffer.append("&pack=");
      localStringBuffer.append(bg.g);
      this.e = (bh.f() + "?&it=" + Jni.b(localStringBuffer.toString()));
      return;
      localStringBuffer.append("&cu=");
      localStringBuffer.append(bg.a().b);
    }
  }
  
  void a(boolean paramBoolean)
  {
    if (paramBoolean) {}
    try
    {
      JSONObject localJSONObject = new JSONObject(EntityUtils.toString(this.g, "utf-8"));
      if ("up".equals(localJSONObject.getString("res")))
      {
        this.a = localJSONObject.getString("upath");
        if (localJSONObject.has("u1")) {
          this.b = localJSONObject.getString("u1");
        }
        if (localJSONObject.has("u2")) {
          this.c = localJSONObject.getString("u2");
        }
        i().post(new bk(this));
      }
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    bm.a().a(System.currentTimeMillis());
  }
  
  public void c()
  {
    long l1 = bm.a().b();
    if (System.currentTimeMillis() - l1 > 172800000L) {
      i().postDelayed(new bj(this), 10000L);
    }
  }
}
