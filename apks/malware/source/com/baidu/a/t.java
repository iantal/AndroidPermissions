package com.baidu.a;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.location.Location;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.GZIPOutputStream;

final class t
{
  public static int a(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    try
    {
      paramContext = k(paramContext);
      return paramContext.widthPixels;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        y.a("createAdReqURL", paramContext);
        paramContext = localDisplayMetrics;
      }
    }
  }
  
  /* Error */
  static String a()
  {
    // Byte code:
    //   0: new 35	java/lang/StringBuffer
    //   3: dup
    //   4: invokespecial 36	java/lang/StringBuffer:<init>	()V
    //   7: astore_3
    //   8: bipush 20
    //   10: newarray char
    //   12: astore 4
    //   14: new 38	java/io/InputStreamReader
    //   17: dup
    //   18: new 40	java/io/FileInputStream
    //   21: dup
    //   22: ldc 42
    //   24: invokespecial 45	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   27: invokespecial 48	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   30: astore_2
    //   31: aload_2
    //   32: aload 4
    //   34: invokevirtual 54	java/io/Reader:read	([C)I
    //   37: istore_1
    //   38: iload_1
    //   39: iconst_m1
    //   40: if_icmpeq +73 -> 113
    //   43: iload_1
    //   44: aload 4
    //   46: arraylength
    //   47: if_icmpne +34 -> 81
    //   50: aload 4
    //   52: aload 4
    //   54: arraylength
    //   55: iconst_1
    //   56: isub
    //   57: caload
    //   58: bipush 13
    //   60: if_icmpeq +21 -> 81
    //   63: getstatic 60	java/lang/System:out	Ljava/io/PrintStream;
    //   66: aload 4
    //   68: invokevirtual 66	java/io/PrintStream:print	([C)V
    //   71: goto -40 -> 31
    //   74: astore_3
    //   75: aload_2
    //   76: invokevirtual 69	java/io/Reader:close	()V
    //   79: aconst_null
    //   80: areturn
    //   81: iconst_0
    //   82: istore_0
    //   83: iload_0
    //   84: iload_1
    //   85: if_icmpge -54 -> 31
    //   88: aload 4
    //   90: iload_0
    //   91: caload
    //   92: bipush 13
    //   94: if_icmpeq +12 -> 106
    //   97: aload_3
    //   98: aload 4
    //   100: iload_0
    //   101: caload
    //   102: invokevirtual 73	java/lang/StringBuffer:append	(C)Ljava/lang/StringBuffer;
    //   105: pop
    //   106: iload_0
    //   107: iconst_1
    //   108: iadd
    //   109: istore_0
    //   110: goto -27 -> 83
    //   113: aload_2
    //   114: invokevirtual 69	java/io/Reader:close	()V
    //   117: aload_3
    //   118: invokevirtual 76	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   121: invokevirtual 81	java/lang/String:trim	()Ljava/lang/String;
    //   124: ldc 83
    //   126: ldc 85
    //   128: invokevirtual 89	java/lang/String:replaceAll	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   131: areturn
    //   132: astore_2
    //   133: aload_2
    //   134: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   137: goto -20 -> 117
    //   140: astore_2
    //   141: aload_2
    //   142: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   145: aconst_null
    //   146: areturn
    //   147: astore_3
    //   148: aconst_null
    //   149: astore_2
    //   150: aload_2
    //   151: invokevirtual 69	java/io/Reader:close	()V
    //   154: aload_3
    //   155: athrow
    //   156: astore_2
    //   157: aload_2
    //   158: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   161: goto -7 -> 154
    //   164: astore_3
    //   165: goto -15 -> 150
    //   168: astore_2
    //   169: aconst_null
    //   170: astore_2
    //   171: goto -96 -> 75
    // Local variable table:
    //   start	length	slot	name	signature
    //   82	28	0	i	int
    //   37	49	1	j	int
    //   30	84	2	localInputStreamReader	InputStreamReader
    //   132	2	2	localIOException1	IOException
    //   140	2	2	localIOException2	IOException
    //   149	2	2	localObject1	Object
    //   156	2	2	localIOException3	IOException
    //   168	1	2	localException1	Exception
    //   170	1	2	localObject2	Object
    //   7	1	3	localStringBuffer	StringBuffer
    //   74	44	3	localException2	Exception
    //   147	8	3	localObject3	Object
    //   164	1	3	localObject4	Object
    //   12	87	4	arrayOfChar	char[]
    // Exception table:
    //   from	to	target	type
    //   31	38	74	java/lang/Exception
    //   43	71	74	java/lang/Exception
    //   97	106	74	java/lang/Exception
    //   113	117	132	java/io/IOException
    //   75	79	140	java/io/IOException
    //   8	31	147	finally
    //   150	154	156	java/io/IOException
    //   31	38	164	finally
    //   43	71	164	finally
    //   97	106	164	finally
    //   8	31	168	java/lang/Exception
  }
  
  private static String a(byte paramByte)
  {
    String str = "00" + Integer.toHexString(paramByte) + ":";
    return str.substring(str.length() - 3);
  }
  
  public static String a(Context paramContext, String paramString)
  {
    String str = "";
    Object localObject = paramContext.getPackageManager();
    label109:
    do
    {
      do
      {
        try
        {
          localObject = ((PackageManager)localObject).getApplicationInfo(paramContext.getPackageName(), 128);
          paramContext = str;
          if (localObject != null)
          {
            paramContext = null;
            if (((ApplicationInfo)localObject).metaData != null) {
              paramContext = ((ApplicationInfo)localObject).metaData.get(paramString);
            }
            if (paramContext != null) {
              break label109;
            }
            y.a("StatSDK", "null,can't find information for key:" + paramString);
            paramContext = str;
            if (paramString == "BaiduMobAd_STAT_ID")
            {
              y.c("不能在manifest.xml中找到APP Key||can't find app key in manifest.xml.");
              paramContext = str;
            }
          }
        }
        catch (PackageManager.NameNotFoundException paramContext)
        {
          do
          {
            paramContext = str;
          } while (paramString != "BaiduMobAd_STAT_ID");
          y.c("不能在manifest.xml中找到APP Key||can't find app key in manifest.xml.");
          return "";
        }
        return paramContext;
        str = paramContext.toString();
        paramContext = str;
      } while (!str.trim().equals(""));
      paramContext = str;
    } while (paramString != "BaiduMobAd_STAT_ID");
    y.c("APP Key值为空||The value of APP Key is empty.");
    return str;
  }
  
  public static String a(Context paramContext, String paramString1, String paramString2, int paramInt1, int paramInt2)
  {
    localObject = null;
    HttpURLConnection localHttpURLConnection = w.a(paramContext, paramString1, paramInt1, paramInt2);
    localHttpURLConnection.setDoOutput(true);
    localHttpURLConnection.setInstanceFollowRedirects(false);
    localHttpURLConnection.setUseCaches(false);
    localHttpURLConnection.setRequestProperty("Content-Type", "gzip");
    localHttpURLConnection.connect();
    y.a("AdUtil.httpPost connected");
    StringBuilder localStringBuilder = new StringBuilder();
    for (;;)
    {
      try
      {
        paramContext = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(localHttpURLConnection.getOutputStream())));
      }
      catch (IOException paramContext)
      {
        paramString1 = null;
        paramString2 = localObject;
        continue;
      }
      try
      {
        paramContext.write(paramString2);
        paramContext.close();
        paramString1 = new BufferedReader(new InputStreamReader(localHttpURLConnection.getInputStream()));
        try
        {
          paramContext = paramString1.readLine();
          if (paramContext == null) {
            continue;
          }
          localStringBuilder.append(paramContext);
          continue;
          if (paramString1 == null) {
            continue;
          }
        }
        catch (IOException paramContext)
        {
          paramString2 = localObject;
        }
      }
      catch (IOException paramString1)
      {
        paramString2 = paramContext;
        localObject = null;
        paramContext = paramString1;
        paramString1 = localObject;
      }
    }
    paramString1.close();
    if (paramString2 != null) {
      paramString2.close();
    }
    localHttpURLConnection.disconnect();
    throw paramContext;
    paramString1.close();
    localHttpURLConnection.disconnect();
    paramInt1 = localHttpURLConnection.getContentLength();
    if ((localHttpURLConnection.getResponseCode() != 200) || (paramInt1 != 0)) {
      throw new IOException("http code =" + localHttpURLConnection.getResponseCode() + "& contentResponse=" + localStringBuilder);
    }
    return localStringBuilder.toString();
  }
  
  public static int b(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    try
    {
      paramContext = k(paramContext);
      return paramContext.heightPixels;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        y.a("createAdReqURL", paramContext);
        paramContext = localDisplayMetrics;
      }
    }
  }
  
  public static String b()
  {
    String str2 = "";
    String str1 = str2;
    try
    {
      BluetoothAdapter localBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
      str1 = str2;
      if (localBluetoothAdapter != null)
      {
        str1 = str2;
        str2 = localBluetoothAdapter.getAddress();
        str1 = str2;
        if (str2 != null)
        {
          str1 = str2;
          str2 = z.a(u.a("30212102dicudiab", "30212102dicudiab", str2.getBytes()), "utf-8");
          str1 = str2;
        }
      }
      return str1;
    }
    catch (Exception localException)
    {
      y.a("sdkstat", localException);
    }
    return str1;
  }
  
  public static int c(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getPackageName();
    try
    {
      int i = localPackageManager.getPackageInfo(paramContext, 0).versionCode;
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      y.b(new Object[] { "sdkstat", "get app version code exception" });
    }
    return 1;
  }
  
  public static String d(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getPackageName();
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext, 0).versionName;
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      y.b(new Object[] { "sdkstat", "get app version name exception" });
    }
    return "";
  }
  
  public static String e(Context paramContext)
  {
    String str = String.format("%s_%s_%s", new Object[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
    try
    {
      if ((w.e(paramContext, "android.permission.ACCESS_FINE_LOCATION")) || (w.e(paramContext, "android.permission.ACCESS_COARSE_LOCATION")))
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getCellLocation();
        y.a("getLocation cell:", paramContext + "");
        if (paramContext == null) {
          return str;
        }
        if ((paramContext instanceof GsmCellLocation))
        {
          paramContext = (GsmCellLocation)paramContext;
          return String.format("%s_%s_%s", new Object[] { String.format("%d", new Object[] { Integer.valueOf(paramContext.getCid()) }), String.format("%d", new Object[] { Integer.valueOf(paramContext.getLac()) }), Integer.valueOf(0) });
        }
        paramContext = paramContext.toString().replace("[", "").replace("]", "").split(",");
        paramContext = String.format("%s_%s_%s", new Object[] { paramContext[0], paramContext[3], paramContext[4] });
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      y.a("getLocation", paramContext);
    }
    return str;
  }
  
  public static String f(Context paramContext)
  {
    try
    {
      if (w.e(paramContext, "android.permission.ACCESS_FINE_LOCATION"))
      {
        paramContext = ((LocationManager)paramContext.getSystemService("location")).getLastKnownLocation("gps");
        y.a("sdkstat", "location: " + paramContext);
        if (paramContext != null)
        {
          paramContext = String.format("%s_%s_%s", new Object[] { Long.valueOf(paramContext.getTime()), Double.valueOf(paramContext.getLongitude()), Double.valueOf(paramContext.getLatitude()) });
          return paramContext;
        }
      }
    }
    catch (Exception paramContext)
    {
      y.a("sdkstat", paramContext);
    }
    return "";
  }
  
  public static String g(Context paramContext)
  {
    try
    {
      if (w.e(paramContext, "android.permission.ACCESS_WIFI_STATE"))
      {
        localWifiInfo = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo();
        paramContext = localWifiInfo.getMacAddress();
      }
    }
    catch (Exception localException1)
    {
      WifiInfo localWifiInfo;
      paramContext = null;
    }
    try
    {
      y.a(String.format("ssid=%s mac=%s", new Object[] { localWifiInfo.getSSID(), localWifiInfo.getMacAddress() }));
      return paramContext;
    }
    catch (Exception localException2)
    {
      for (;;) {}
    }
    y.c("You need the android.Manifest.permission.ACCESS_WIFI_STATE permission. Open AndroidManifest.xml and just before the final </manifest> tag add:android.permission.ACCESS_WIFI_STATE");
    return null;
    y.a("sdkstat", localException1);
    return paramContext;
  }
  
  static String h(Context paramContext)
  {
    Object localObject3 = null;
    Object localObject1 = null;
    StringBuffer localStringBuffer = new StringBuffer();
    for (;;)
    {
      Object localObject2;
      try
      {
        Enumeration localEnumeration1 = NetworkInterface.getNetworkInterfaces();
        localObject3 = localObject1;
        localObject4 = localObject1;
        if (localEnumeration1.hasMoreElements())
        {
          localObject3 = localObject1;
          NetworkInterface localNetworkInterface = (NetworkInterface)localEnumeration1.nextElement();
          localObject3 = localObject1;
          Enumeration localEnumeration2 = localNetworkInterface.getInetAddresses();
          localObject4 = localObject1;
          localObject1 = localObject4;
          localObject3 = localObject4;
          if (!localEnumeration2.hasMoreElements()) {
            continue;
          }
          localObject3 = localObject4;
          localObject1 = (InetAddress)localEnumeration2.nextElement();
          localObject3 = localObject4;
          if (((InetAddress)localObject1).isAnyLocalAddress()) {
            continue;
          }
          localObject3 = localObject4;
          if (!(localObject1 instanceof Inet4Address)) {
            continue;
          }
          localObject3 = localObject4;
          if (((InetAddress)localObject1).isLoopbackAddress()) {
            continue;
          }
          localObject3 = localObject4;
          if (((InetAddress)localObject1).isSiteLocalAddress())
          {
            localObject3 = localObject4;
            localObject1 = localNetworkInterface.getHardwareAddress();
            break label251;
          }
          localObject3 = localObject4;
          if (((InetAddress)localObject1).isLinkLocalAddress()) {
            break label248;
          }
          localObject3 = localObject4;
          localObject1 = localNetworkInterface.getHardwareAddress();
        }
        int i;
        localObject2 = localObject4;
      }
      catch (SocketException localSocketException)
      {
        localSocketException.printStackTrace();
        localObject4 = localObject3;
        if (localObject4 != null)
        {
          i = 0;
          if (i < localObject4.length)
          {
            localStringBuffer.append(a(localObject4[i]));
            i += 1;
            continue;
          }
          paramContext = localStringBuffer.substring(0, localStringBuffer.length() - 1).replaceAll(":", "");
          return paramContext;
        }
        localObject2 = g(paramContext);
        paramContext = (Context)localObject2;
        if (localObject2 == null) {
          continue;
        }
        return ((String)localObject2).replaceAll(":", "");
      }
      label248:
      label251:
      Object localObject4 = localObject2;
    }
  }
  
  public static String i(Context paramContext)
  {
    int i = 0;
    for (;;)
    {
      try
      {
        if (!w.e(paramContext, "android.permission.ACCESS_WIFI_STATE")) {
          break label307;
        }
        Object localObject = (WifiManager)paramContext.getSystemService("wifi");
        if (!((WifiManager)localObject).isWifiEnabled()) {
          break label307;
        }
        y.a("[d]", ((WifiManager)localObject).getScanResults() + "");
        j = Integer.MAX_VALUE;
        k = -1;
        if (i < ((WifiManager)localObject).getScanResults().size())
        {
          paramContext = (ScanResult)((WifiManager)localObject).getScanResults().get(i);
          m = Math.abs(paramContext.level);
          y.a(String.format("%s %s_%s", new Object[] { paramContext.SSID, paramContext.BSSID, Integer.valueOf(m) }));
          if (j <= m) {
            break label296;
          }
          j = i;
          k = m;
          break label310;
        }
        if (k >= 0)
        {
          paramContext = (ScanResult)((WifiManager)localObject).getScanResults().get(k);
          paramContext = String.format("%s_%s", new Object[] { paramContext.BSSID.replace(":", "").toLowerCase(), Integer.valueOf(Math.abs(paramContext.level)) });
        }
        paramContext = "";
      }
      catch (Exception localException1)
      {
        try
        {
          localObject = ((WifiManager)localObject).getConnectionInfo();
          y.a(String.format("[active]%s %s_%s", new Object[] { ((WifiInfo)localObject).getSSID(), ((WifiInfo)localObject).getMacAddress(), Integer.valueOf(Math.abs(((WifiInfo)localObject).getRssi())) }));
          return paramContext;
        }
        catch (Exception localException2)
        {
          continue;
        }
        localException1 = localException1;
        paramContext = "";
        y.a("getWifiLocation", localException1);
        return paramContext;
      }
      continue;
      label296:
      int m = j;
      int j = k;
      int k = m;
      break label310;
      label307:
      return "";
      label310:
      i += 1;
      m = k;
      k = j;
      j = m;
    }
  }
  
  public static String j(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    String str = localNetworkInfo.getTypeName();
    paramContext = str;
    if (!str.equals("WIFI"))
    {
      paramContext = str;
      if (localNetworkInfo.getSubtypeName() != null) {
        paramContext = localNetworkInfo.getSubtypeName();
      }
    }
    return paramContext;
  }
  
  public static DisplayMetrics k(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getApplicationContext().getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics;
  }
}
