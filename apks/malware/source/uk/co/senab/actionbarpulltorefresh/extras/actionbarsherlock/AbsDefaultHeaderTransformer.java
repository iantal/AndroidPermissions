package uk.co.senab.actionbarpulltorefresh.extras.actionbarsherlock;

import android.app.Activity;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import uk.co.senab.actionbarpulltorefresh.library.DefaultHeaderTransformer;

public class AbsDefaultHeaderTransformer
  extends DefaultHeaderTransformer
{
  private Animation mHeaderInAnimation;
  private Animation mHeaderOutAnimation;
  
  public AbsDefaultHeaderTransformer() {}
  
  protected Drawable getActionBarBackground(Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= super.getMinimumApiLevel()) {
      return super.getActionBarBackground(paramContext);
    }
    paramContext = obtainStyledAttrsFromThemeAttr(paramContext, R.attr.actionBarStyle, R.styleable.SherlockActionBar);
    try
    {
      Drawable localDrawable = paramContext.getDrawable(2);
      return localDrawable;
    }
    finally
    {
      paramContext.recycle();
    }
  }
  
  protected int getActionBarSize(Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= super.getMinimumApiLevel()) {
      return super.getActionBarSize(paramContext);
    }
    paramContext = paramContext.obtainStyledAttributes(R.styleable.SherlockTheme);
    try
    {
      int i = paramContext.getDimensionPixelSize(7, 0);
      return i;
    }
    finally
    {
      paramContext.recycle();
    }
  }
  
  protected int getActionBarTitleStyle(Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= super.getMinimumApiLevel()) {
      return super.getActionBarTitleStyle(paramContext);
    }
    paramContext = obtainStyledAttrsFromThemeAttr(paramContext, R.attr.actionBarStyle, R.styleable.SherlockActionBar);
    try
    {
      int i = paramContext.getResourceId(0, 0);
      return i;
    }
    finally
    {
      paramContext.recycle();
    }
  }
  
  protected int getMinimumApiLevel()
  {
    return 7;
  }
  
  public boolean hideHeaderView()
  {
    boolean bool2;
    if (Build.VERSION.SDK_INT >= super.getMinimumApiLevel())
    {
      bool2 = super.hideHeaderView();
      return bool2;
    }
    View localView = getHeaderView();
    if ((localView != null) && (localView.getVisibility() != 8)) {}
    for (boolean bool1 = true;; bool1 = false)
    {
      bool2 = bool1;
      if (!bool1) {
        break;
      }
      if (this.mHeaderOutAnimation == null) {
        break label65;
      }
      localView.startAnimation(this.mHeaderOutAnimation);
      return bool1;
    }
    label65:
    localView.setVisibility(8);
    onReset();
    return bool1;
  }
  
  public void onRefreshMinimized()
  {
    if (Build.VERSION.SDK_INT >= super.getMinimumApiLevel()) {
      super.onRefreshMinimized();
    }
    View localView;
    do
    {
      return;
      localView = getHeaderView().findViewById(R.id.ptr_content);
    } while (localView == null);
    localView.startAnimation(AnimationUtils.loadAnimation(localView.getContext(), R.anim.fade_out));
    localView.setVisibility(4);
  }
  
  public void onViewCreated(Activity paramActivity, View paramView)
  {
    super.onViewCreated(paramActivity, paramView);
    this.mHeaderInAnimation = AnimationUtils.loadAnimation(paramActivity, R.anim.fade_in);
    this.mHeaderOutAnimation = AnimationUtils.loadAnimation(paramActivity, R.anim.fade_out);
    if ((this.mHeaderOutAnimation != null) || (this.mHeaderInAnimation != null))
    {
      paramActivity = new AnimationCallback();
      if (this.mHeaderOutAnimation != null) {
        this.mHeaderOutAnimation.setAnimationListener(paramActivity);
      }
    }
  }
  
  public boolean showHeaderView()
  {
    boolean bool2;
    if (Build.VERSION.SDK_INT >= super.getMinimumApiLevel())
    {
      bool2 = super.showHeaderView();
      return bool2;
    }
    View localView = getHeaderView();
    if ((localView != null) && (localView.getVisibility() != 0)) {}
    for (boolean bool1 = true;; bool1 = false)
    {
      bool2 = bool1;
      if (!bool1) {
        break;
      }
      if (this.mHeaderInAnimation != null) {
        localView.startAnimation(this.mHeaderInAnimation);
      }
      localView.setVisibility(0);
      return bool1;
    }
  }
  
  class AnimationCallback
    implements Animation.AnimationListener
  {
    AnimationCallback() {}
    
    public void onAnimationEnd(Animation paramAnimation)
    {
      if (paramAnimation == AbsDefaultHeaderTransformer.this.mHeaderOutAnimation)
      {
        paramAnimation = AbsDefaultHeaderTransformer.this.getHeaderView();
        if (paramAnimation != null) {
          paramAnimation.setVisibility(8);
        }
        AbsDefaultHeaderTransformer.this.onReset();
      }
    }
    
    public void onAnimationRepeat(Animation paramAnimation) {}
    
    public void onAnimationStart(Animation paramAnimation) {}
  }
}
