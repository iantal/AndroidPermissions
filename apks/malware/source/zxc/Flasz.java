package zxc;

import android.os.Handler;
import android.os.Message;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class Flasz
{
  private ArrayList<String> appUrl;
  private FileDownloadListener fileDownloadListener;
  private File fileSave;
  private int fileSize = -1;
  private HandlerProcessInDowning handlerProcess = null;
  
  public Flasz() {}
  
  public void downFile(String paramString, File paramFile, FileDownloadListener paramFileDownloadListener, ArrayList<String> paramArrayList)
    throws ClientProtocolException, IOException
  {
    this.fileDownloadListener = paramFileDownloadListener;
    this.fileSave = paramFile;
    this.appUrl = paramArrayList;
    this.handlerProcess = new HandlerProcessInDowning(null);
    new ThreadDownload(paramString).start();
  }
  
  public static abstract interface FileDownloadListener
  {
    public abstract void onDownSucceed(int paramInt, File paramFile, ArrayList<String> paramArrayList);
    
    public abstract void onDowning(int paramInt, double paramDouble);
  }
  
  private class HandlerProcessInDowning
    extends Handler
  {
    private HandlerProcessInDowning() {}
    
    public void handleMessage(Message paramMessage)
    {
      super.handleMessage(paramMessage);
      int i = paramMessage.arg1;
      double d = Double.parseDouble(paramMessage.obj.toString());
      switch (paramMessage.what)
      {
      }
      do
      {
        do
        {
          return;
        } while (Flasz.this.fileDownloadListener == null);
        Flasz.this.fileDownloadListener.onDowning(i, d);
        return;
      } while (Flasz.this.fileDownloadListener == null);
      Flasz.this.fileDownloadListener.onDowning(i, 100.0D);
      Flasz.this.fileDownloadListener.onDownSucceed(Flasz.this.fileSize, Flasz.this.fileSave, Flasz.this.appUrl);
    }
  }
  
  private class ThreadDownload
    extends Thread
  {
    private boolean isDownloading = false;
    private String url;
    
    public ThreadDownload(String paramString)
    {
      this.url = paramString;
    }
    
    private void sendHandleMsg(int paramInt1, int paramInt2, double paramDouble)
    {
      Message localMessage = new Message();
      localMessage.what = paramInt1;
      localMessage.arg1 = paramInt2;
      localMessage.obj = Double.valueOf(paramDouble);
      Flasz.this.handlerProcess.sendMessage(localMessage);
    }
    
    public void run()
    {
      super.run();
      int j = 0;
      int i = 0;
      double d1 = 0.0D;
      try
      {
        Object localObject = new DefaultHttpClient().execute(new HttpGet(this.url)).getEntity();
        Flasz.this.fileSize = ((int)((HttpEntity)localObject).getContentLength());
        InputStream localInputStream = ((HttpEntity)localObject).getContent();
        localObject = null;
        FileOutputStream localFileOutputStream;
        byte[] arrayOfByte;
        if (localInputStream != null)
        {
          if (Flasz.this.fileSave.exists()) {
            Flasz.this.fileSave.delete();
          }
          localFileOutputStream = new FileOutputStream(Flasz.this.fileSave);
          arrayOfByte = new byte['Ð€'];
          this.isDownloading = true;
        }
        for (;;)
        {
          int k = localInputStream.read(arrayOfByte);
          j = i;
          localObject = localFileOutputStream;
          if (k != -1)
          {
            if (!this.isDownloading)
            {
              localObject = localFileOutputStream;
              j = i;
            }
          }
          else
          {
            ((FileOutputStream)localObject).flush();
            if (localObject != null) {
              ((FileOutputStream)localObject).close();
            }
            sendHandleMsg(1, j, 100.0D);
            this.isDownloading = false;
            return;
          }
          localFileOutputStream.write(arrayOfByte, 0, k);
          j = i + k;
          double d2 = j / Flasz.this.fileSize;
          d2 = Double.parseDouble(new DecimalFormat("#0.0").format(d2 * 100.0D));
          i = j;
          if (d2 != d1)
          {
            d1 = d2;
            sendHandleMsg(0, j, d1);
            i = j;
          }
        }
        return;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        this.isDownloading = false;
      }
    }
  }
}
