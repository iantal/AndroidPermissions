package gqq.wwvrslwg.tnyijqWfo.jwpnBgcessh.a;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import gqq.wwvrslwg.tnyijqWfo.a.s;
import gqq.wwvrslwg.tnyijqWfo.jwpnBgcessh.b;
import gqq.wwvrslwg.tnyijqWfo.jwpnBgcessh.c;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public final class a
{
  private String a = "";
  private String b = "";
  private String c = "";
  private String d = "";
  private c e = null;
  private int f = b.b;
  
  public a(c paramC)
  {
    this.e = paramC;
  }
  
  public a(String paramString, c paramC)
  {
    if (!paramString.matches(gqq.wwvrslwg.tnyijqWfo.a.d.d.a(new Object[] { Integer.valueOf(7028), ".*,", Integer.valueOf(7009), Integer.valueOf(7008), ".*,", Integer.valueOf(8001), Integer.valueOf(8002), Integer.valueOf(8631), Integer.valueOf(7008), "=.*" }))) {
      throw new IllegalArgumentException(gqq.wwvrslwg.tnyijqWfo.a.d.d.a(new Object[] { Integer.valueOf(7010), Integer.valueOf(7011), "!" }));
    }
    this.e = paramC;
    paramString = paramString.split(",");
    this.a = paramString[0].substring(paramString[0].indexOf("=") + 1);
    this.b = paramString[1].substring(paramString[1].indexOf("=") + 1);
    this.d = paramString[1].substring(paramString[1].lastIndexOf("=") + 1);
    this.c = paramString[2].substring(paramString[2].indexOf("=") + 1);
  }
  
  public a(String paramString1, String paramString2, String paramString3, int paramInt, c paramC)
  {
    this.a = paramString1;
    this.b = paramString2;
    this.c = paramString3;
    this.f = paramInt;
    this.e = paramC;
  }
  
  private String j()
  {
    return this.a.substring(this.a.lastIndexOf("/") + 1, this.a.length()).toLowerCase();
  }
  
  public final void a(int paramInt)
  {
    this.f = paramInt;
  }
  
  public final void a(String paramString)
  {
    this.a = paramString;
  }
  
  public final boolean a()
  {
    if (this.a.equals("")) {}
    while ((!new File(this.e.j() + j()).exists()) || (b() == null)) {
      return false;
    }
    return true;
  }
  
  public final Drawable b()
  {
    if (this.f == b.b) {
      return this.e.i().a(this.a);
    }
    File localFile = new File(this.e.j() + j());
    if (!localFile.exists())
    {
      new StringBuilder("getDrawable4icon() - ").append(localFile.getAbsolutePath()).append(" not exist!");
      return null;
    }
    Bitmap localBitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath(), null);
    if (localBitmap != null) {
      return new BitmapDrawable(localBitmap);
    }
    localFile.delete();
    return null;
  }
  
  public final void b(String paramString)
  {
    this.b = paramString;
  }
  
  public final void c()
  {
    Object localObject5 = null;
    new StringBuilder("down icon - ").append(this.a);
    localObject8 = new File(this.e.j() + j());
    if (((File)localObject8).exists()) {}
    for (;;)
    {
      return;
      for (;;)
      {
        Object localObject2;
        try
        {
          localObject1 = (HttpURLConnection)new URL(this.a).openConnection();
        }
        catch (Exception localException2)
        {
          Object localObject1;
          Object localObject6;
          localObject2 = null;
          Object localObject3 = null;
          continue;
        }
        Object localObject4;
        try
        {
          localObject3 = ((HttpURLConnection)localObject1).getInputStream();
        }
        catch (Exception localException3)
        {
          localObject4 = localObject2;
          localObject2 = null;
          continue;
        }
        try
        {
          localObject8 = new FileOutputStream((File)localObject8);
          try
          {
            s.a((InputStream)localObject3, (OutputStream)localObject8);
            ((InputStream)localObject3).close();
            ((OutputStream)localObject8).close();
            ((HttpURLConnection)localObject1).disconnect();
            return;
          }
          catch (Exception localException4)
          {
            localObject6 = localObject3;
            localObject3 = localObject1;
            localObject1 = localObject8;
          }
        }
        catch (Exception localException5)
        {
          Object localObject7 = localObject2;
          localObject2 = null;
          localObject8 = localObject4;
          localObject4 = localObject7;
          localObject7 = localObject8;
        }
      }
      if (localObject6 != null) {}
      try
      {
        localObject6.close();
        if (localObject1 != null) {
          ((OutputStream)localObject1).close();
        }
        if (localObject3 == null) {
          continue;
        }
        ((HttpURLConnection)localObject3).disconnect();
        return;
      }
      catch (Exception localException1)
      {
        localException1.printStackTrace();
        return;
      }
    }
  }
  
  public final void c(String paramString)
  {
    this.c = paramString;
  }
  
  public final String d()
  {
    return this.a;
  }
  
  public final void d(String paramString)
  {
    this.d = paramString;
  }
  
  public final String e()
  {
    return this.b;
  }
  
  public final boolean equals(Object paramObject)
  {
    return toString().equals(paramObject.toString());
  }
  
  public final String f()
  {
    return this.c;
  }
  
  public final String g()
  {
    return this.d;
  }
  
  public final c h()
  {
    return this.e;
  }
  
  public final int i()
  {
    return this.f;
  }
  
  public final String toString()
  {
    return getClass().getName() + this.a + this.b + this.c + this.d;
  }
}
