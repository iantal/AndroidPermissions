package gqq.wwvrslwg.tnyijqWfo.a;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import gqq.wwvrslwg.tnyijqWfo.a.d.f;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EncodingUtils;

public final class s
{
  public static String a = "";
  public static String[] b = { "id", "title", "name", "url", "filesize" };
  private static FilenameFilter c = new t();
  
  public static long a(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    byte[] arrayOfByte = new byte['Ѐ'];
    int i;
    for (long l = 0L;; l += i)
    {
      i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        break;
      }
      paramOutputStream.write(arrayOfByte, 0, i);
    }
    return l;
  }
  
  public static String a(Context paramContext, String paramString)
  {
    if (r.m(paramContext)) {}
    for (paramContext = Environment.getExternalStorageDirectory().getPath() + "/" + d(paramString);; paramContext = Environment.getDataDirectory() + "/data/" + paramContext.getApplicationContext().getPackageName() + "/files/" + paramString + "/")
    {
      paramString = new File(paramContext);
      if (!paramString.exists()) {
        paramString.mkdirs();
      }
      return paramContext;
    }
  }
  
  public static String a(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      InputStream localInputStream = paramContext.getAssets().open(paramString1);
      paramString1 = a(localInputStream);
      int i = paramString1.indexOf(paramString2);
      paramContext = paramString1;
      if (i != -1) {
        paramContext = paramString1.substring(0, i);
      }
      localInputStream.close();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  private static String a(Context paramContext, String paramString, boolean paramBoolean)
  {
    if (paramString == null) {
      paramString = "";
    }
    String str;
    for (;;)
    {
      try
      {
        paramString.trim();
        str = paramString;
        if (paramString.equals("")) {
          break label136;
        }
        str = paramString;
        if (paramString.lastIndexOf("/") == paramString.length() - 1) {
          break label136;
        }
        str = paramString + "/";
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return null;
      }
      paramContext = new File(str);
      if (paramContext.exists()) {
        break;
      }
      paramContext.mkdirs();
      return str;
      str = Environment.getDataDirectory() + "/data/" + paramContext.getApplicationContext().getPackageName() + "/files/";
      continue;
      continue;
      label136:
      if (paramBoolean != true) {}
    }
    return str;
  }
  
  public static String a(File paramFile)
  {
    Object localObject3 = null;
    Object localObject2 = null;
    Object localObject1 = localObject3;
    try
    {
      if (paramFile.exists())
      {
        localObject1 = localObject3;
        paramFile = new FileInputStream(paramFile);
        localObject1 = localObject3;
        localObject2 = new byte[paramFile.available()];
        localObject1 = localObject3;
        paramFile.read((byte[])localObject2);
        localObject1 = localObject3;
        localObject2 = EncodingUtils.getString((byte[])localObject2, "UTF-8");
        localObject1 = localObject2;
        paramFile.close();
      }
      return localObject2;
    }
    catch (Exception paramFile)
    {
      paramFile.printStackTrace();
    }
    return localObject1;
  }
  
  private static String a(InputStream paramInputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    for (;;)
    {
      int i = paramInputStream.read();
      if (i == -1) {
        break;
      }
      localByteArrayOutputStream.write(i);
    }
    return localByteArrayOutputStream.toString();
  }
  
  public static List a(Properties paramProperties)
  {
    ArrayList localArrayList = new ArrayList();
    paramProperties = paramProperties.entrySet().iterator();
    while (paramProperties.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramProperties.next();
      localArrayList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    return localArrayList;
  }
  
  public static Properties a(String paramString)
  {
    Object localObject = new File(paramString);
    if (!((File)localObject).exists()) {
      return null;
    }
    paramString = new Properties();
    try
    {
      localObject = new FileInputStream((File)localObject);
      paramString.load((InputStream)localObject);
      ((FileInputStream)localObject).close();
      return paramString;
    }
    catch (Exception localException) {}
    return paramString;
  }
  
  public static Properties a(String paramString, Context paramContext)
  {
    Properties localProperties = new Properties();
    try
    {
      paramString = paramContext.getAssets().open(paramString);
      paramContext = a(paramString);
      localProperties.load(new ByteArrayInputStream(h.a(new String(new byte[] { 97, 98, 99, 49, 50, 51, 52, 53 }), paramContext).getBytes("UTF-8")));
      paramString.close();
      return localProperties;
    }
    catch (Exception paramString) {}
    return localProperties;
  }
  
  public static Properties a(byte[] paramArrayOfByte)
  {
    Properties localProperties = new Properties();
    try
    {
      paramArrayOfByte = new ByteArrayInputStream(paramArrayOfByte);
      localProperties.load(paramArrayOfByte);
      paramArrayOfByte.close();
      return localProperties;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return localProperties;
  }
  
  public static void a(String paramString1, String paramString2)
  {
    paramString1 = d(paramString1) + paramString2;
    try
    {
      paramString1 = new File(paramString1);
      if (paramString1.exists()) {
        paramString1.delete();
      }
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public static void a(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      File localFile = new File(paramString1);
      if (!localFile.exists()) {
        localFile.createNewFile();
      }
      paramString1 = a(localFile.getAbsolutePath());
      paramString1.put(paramString2, paramString3);
      paramString2 = new FileOutputStream(localFile);
      paramString1.store(paramString2, "");
      paramString2.close();
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void a(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    try
    {
      paramString2 = d(paramString1, paramString2);
      paramString1 = a(paramString2.getAbsolutePath());
      paramString1.put(paramString3, paramString4);
      paramString2 = new FileOutputStream(paramString2);
      paramString1.store(paramString2, "定时配置");
      paramString2.close();
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void a(String paramString, String[] paramArrayOfString, Context paramContext)
  {
    int j = 0;
    String str = f.a(paramContext).e();
    String[] arrayOfString = b;
    paramContext = new Properties();
    try
    {
      File localFile = new File(str);
      int i = j;
      if (!localFile.exists())
      {
        localFile.mkdirs();
        i = j;
      }
      while (i < arrayOfString.length)
      {
        paramContext.setProperty(arrayOfString[i], paramArrayOfString[i]);
        i += 1;
      }
      paramString = new FileOutputStream(d(str) + paramString, false);
      paramContext.store(paramString, "");
      paramString.flush();
      paramString.close();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void a(String... paramVarArgs)
  {
    int j = paramVarArgs.length;
    int i = 0;
    while (i < j)
    {
      File localFile = new File(paramVarArgs[i]);
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      i += 1;
    }
  }
  
  /* Error */
  public static boolean a(Context paramContext, Properties paramProperties, String paramString1, String paramString2, boolean paramBoolean)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aload_0
    //   4: aload_2
    //   5: iload 4
    //   7: invokestatic 318	gqq/wwvrslwg/tnyijqWfo/a/s:a	(Landroid/content/Context;Ljava/lang/String;Z)Ljava/lang/String;
    //   10: astore_0
    //   11: new 69	java/io/File
    //   14: dup
    //   15: new 60	java/lang/StringBuilder
    //   18: dup
    //   19: invokespecial 61	java/lang/StringBuilder:<init>	()V
    //   22: aload_0
    //   23: invokestatic 83	gqq/wwvrslwg/tnyijqWfo/a/s:d	(Ljava/lang/String;)Ljava/lang/String;
    //   26: invokevirtual 77	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   29: aload_3
    //   30: invokevirtual 77	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   33: invokevirtual 86	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   36: invokespecial 89	java/io/File:<init>	(Ljava/lang/String;)V
    //   39: astore_0
    //   40: aload_0
    //   41: invokevirtual 93	java/io/File:exists	()Z
    //   44: pop
    //   45: aload_0
    //   46: invokevirtual 265	java/io/File:delete	()Z
    //   49: pop
    //   50: aload_0
    //   51: invokevirtual 269	java/io/File:createNewFile	()Z
    //   54: pop
    //   55: new 280	java/io/FileOutputStream
    //   58: dup
    //   59: aload_0
    //   60: invokespecial 281	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   63: astore_2
    //   64: aload_2
    //   65: astore_0
    //   66: aload_1
    //   67: aload_2
    //   68: ldc -84
    //   70: invokevirtual 285	java/util/Properties:store	(Ljava/io/OutputStream;Ljava/lang/String;)V
    //   73: aload_2
    //   74: astore_0
    //   75: aload_2
    //   76: invokevirtual 286	java/io/FileOutputStream:close	()V
    //   79: aload_2
    //   80: invokevirtual 286	java/io/FileOutputStream:close	()V
    //   83: iconst_1
    //   84: ireturn
    //   85: astore_3
    //   86: aconst_null
    //   87: astore_1
    //   88: aload_1
    //   89: astore_0
    //   90: aload_3
    //   91: invokevirtual 145	java/lang/Exception:printStackTrace	()V
    //   94: aload_1
    //   95: ifnull +7 -> 102
    //   98: aload_1
    //   99: invokevirtual 286	java/io/FileOutputStream:close	()V
    //   102: iconst_0
    //   103: ireturn
    //   104: astore_0
    //   105: aload 5
    //   107: astore_1
    //   108: aload_1
    //   109: ifnull +7 -> 116
    //   112: aload_1
    //   113: invokevirtual 286	java/io/FileOutputStream:close	()V
    //   116: aload_0
    //   117: athrow
    //   118: astore_0
    //   119: goto -36 -> 83
    //   122: astore_0
    //   123: goto -21 -> 102
    //   126: astore_1
    //   127: goto -11 -> 116
    //   130: astore_2
    //   131: aload_0
    //   132: astore_1
    //   133: aload_2
    //   134: astore_0
    //   135: goto -27 -> 108
    //   138: astore_3
    //   139: aload_2
    //   140: astore_1
    //   141: goto -53 -> 88
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	144	0	paramContext	Context
    //   0	144	1	paramProperties	Properties
    //   0	144	2	paramString1	String
    //   0	144	3	paramString2	String
    //   0	144	4	paramBoolean	boolean
    //   1	105	5	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   3	64	85	java/lang/Exception
    //   3	64	104	finally
    //   79	83	118	java/lang/Exception
    //   98	102	122	java/lang/Exception
    //   112	116	126	java/lang/Exception
    //   66	73	130	finally
    //   75	79	130	finally
    //   90	94	130	finally
    //   66	73	138	java/lang/Exception
    //   75	79	138	java/lang/Exception
  }
  
  public static boolean a(Properties paramProperties, String paramString1, String paramString2)
  {
    if (paramProperties == null) {
      return false;
    }
    try
    {
      File localFile = new File(paramString1);
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      paramString1 = new FileOutputStream(new File(d(paramString1) + paramString2));
      paramProperties.store(paramString1, "UTF-8");
      paramString1.close();
      return true;
    }
    catch (Exception paramProperties)
    {
      paramProperties.printStackTrace();
    }
    return false;
  }
  
  public static String[] a(String paramString, String[] paramArrayOfString)
  {
    Properties localProperties = new Properties();
    String[] arrayOfString = new String[paramArrayOfString.length];
    try
    {
      paramString = new BufferedInputStream(new FileInputStream(paramString));
      localProperties.load(paramString);
      paramString.close();
      int i = 0;
      for (;;)
      {
        paramString = arrayOfString;
        if (i >= paramArrayOfString.length) {
          break;
        }
        arrayOfString[i] = localProperties.getProperty(paramArrayOfString[i]);
        i += 1;
      }
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString = null;
    }
  }
  
  public static String b(String paramString1, String paramString2)
  {
    paramString1 = d(paramString1) + paramString2;
    try
    {
      if (new File(paramString1).exists())
      {
        paramString2 = new FileInputStream(paramString1);
        paramString1 = new byte[paramString2.available()];
        paramString2.read(paramString1);
        paramString1 = EncodingUtils.getString(paramString1, "UTF-8");
      }
    }
    catch (Exception paramString2)
    {
      paramString1 = "";
    }
    try
    {
      paramString2.close();
      return paramString1;
    }
    catch (Exception paramString2)
    {
      for (;;) {}
    }
    return null;
    paramString2.printStackTrace();
    return paramString1;
  }
  
  public static void b(String paramString)
  {
    paramString = new File(paramString);
    if ((paramString.exists()) && (paramString.isDirectory()))
    {
      paramString = paramString.listFiles();
      int j = paramString.length;
      int i = 0;
      while (i < j)
      {
        paramString[i].delete();
        i += 1;
      }
    }
  }
  
  public static void b(String paramString, Context paramContext)
  {
    a(f.a(paramContext).e(), paramString);
  }
  
  public static void b(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    try
    {
      paramString1 = new File(d(paramString1) + paramString2);
      paramString2 = new File(paramString3);
      if (!paramString2.exists()) {
        paramString2.mkdirs();
      }
      paramString2 = new File(d(paramString3) + paramString4);
      if (paramString1.exists())
      {
        if (paramString2.exists()) {
          paramString2.delete();
        }
        paramString1.renameTo(paramString2);
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean b(String paramString1, String paramString2, String paramString3)
  {
    paramString2 = d(paramString1) + paramString2;
    try
    {
      paramString1 = new File(paramString1);
      if (!paramString1.exists()) {
        paramString1.mkdirs();
      }
      paramString1 = new File(paramString2);
      if (!paramString1.exists()) {
        paramString1.createNewFile();
      }
      paramString1 = new FileOutputStream(paramString2);
      paramString1.write(paramString3.getBytes());
      paramString1.flush();
      paramString1.close();
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static Bitmap c(String paramString1, String paramString2)
  {
    try
    {
      File localFile = new File(d(paramString1) + paramString2);
      if (!localFile.exists()) {
        return null;
      }
      if (localFile.length() == 0L)
      {
        localFile.delete();
        return null;
      }
    }
    catch (Exception localException)
    {
      try
      {
        new File(d(paramString1) + paramString2).delete();
        return null;
      }
      catch (Exception paramString1)
      {
        return null;
      }
      Bitmap localBitmap = BitmapFactory.decodeFile(d(paramString1) + paramString2);
      return localBitmap;
    }
  }
  
  public static Properties c(String paramString, Context paramContext)
  {
    Properties localProperties = new Properties();
    try
    {
      paramString = paramContext.getAssets().open(paramString);
      localProperties.load(paramString);
      paramString.close();
      return localProperties;
    }
    catch (IOException paramString)
    {
      return localProperties;
    }
    catch (FileNotFoundException paramString) {}
    return localProperties;
  }
  
  public static void c(String paramString)
  {
    for (;;)
    {
      try
      {
        paramString = new File(paramString);
        if (paramString.isDirectory())
        {
          arrayOfFile = paramString.listFiles();
          i = 0;
          if (i >= arrayOfFile.length) {
            continue;
          }
          l = paramString.lastModified();
          if (l != 0L) {}
        }
      }
      catch (Exception paramString)
      {
        File[] arrayOfFile;
        int i;
        long l;
        return;
      }
      try
      {
        if (System.currentTimeMillis() - l > 432000000L) {
          arrayOfFile[i].delete();
        }
      }
      catch (Exception localException)
      {
        continue;
      }
      i += 1;
    }
    paramString.delete();
  }
  
  private static File d(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = d(paramString1) + paramString2;
      paramString1 = new File(paramString1);
      if (!paramString1.exists()) {
        paramString1.mkdirs();
      }
      paramString1 = new File(paramString2);
      if (!paramString1.exists()) {
        paramString1.createNewFile();
      }
      return paramString1;
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  public static String d(String paramString)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    str.trim();
    paramString = str;
    if (!str.equals(""))
    {
      paramString = str;
      if (str.lastIndexOf("/") != str.length() - 1) {
        paramString = str + "/";
      }
    }
    return paramString;
  }
}
