package aurelienribon.tweenengine;

public abstract class BaseTween
{
  private TweenCallback callback;
  private int callbackTriggers;
  private float currentTime;
  protected float delay;
  private float deltaTime;
  protected float duration;
  boolean isAutoRemoveEnabled;
  boolean isAutoStartEnabled;
  private boolean isFinished;
  private boolean isInitialized;
  private boolean isIterationStep;
  private boolean isKilled;
  private boolean isPaused;
  private boolean isStarted;
  private boolean isYoyo;
  private int repeatCnt;
  private float repeatDelay;
  private int step;
  private Object userData;
  
  static
  {
    if (!BaseTween.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      $assertionsDisabled = bool;
      return;
    }
  }
  
  public BaseTween() {}
  
  private void initialize()
  {
    if (this.currentTime + this.deltaTime >= this.delay)
    {
      initializeOverride();
      this.isInitialized = true;
      this.isIterationStep = true;
      this.step = 0;
      this.deltaTime -= this.delay - this.currentTime;
      this.currentTime = 0.0F;
      callCallback(1);
      callCallback(2);
    }
  }
  
  private void testCompletion()
  {
    if ((this.repeatCnt >= 0) && ((this.step > this.repeatCnt * 2) || (this.step < 0))) {}
    for (boolean bool = true;; bool = false)
    {
      this.isFinished = bool;
      return;
    }
  }
  
  private void testRelaunch()
  {
    if ((!this.isIterationStep) && (this.repeatCnt >= 0) && (this.step < 0) && (this.currentTime + this.deltaTime >= 0.0F))
    {
      assert (this.step == -1);
      this.isIterationStep = true;
      this.step = 0;
      f = 0.0F - this.currentTime;
      this.deltaTime -= f;
      this.currentTime = 0.0F;
      callCallback(1);
      callCallback(2);
      updateOverride(this.step, this.step - 1, this.isIterationStep, f);
    }
    while ((this.isIterationStep) || (this.repeatCnt < 0) || (this.step <= this.repeatCnt * 2) || (this.currentTime + this.deltaTime >= 0.0F)) {
      return;
    }
    assert (this.step == this.repeatCnt * 2 + 1);
    this.isIterationStep = true;
    this.step = (this.repeatCnt * 2);
    float f = 0.0F - this.currentTime;
    this.deltaTime -= f;
    this.currentTime = this.duration;
    callCallback(16);
    callCallback(32);
    updateOverride(this.step, this.step + 1, this.isIterationStep, f);
  }
  
  private void updateStep()
  {
    while (isValid(this.step))
    {
      if ((!this.isIterationStep) && (this.currentTime + this.deltaTime <= 0.0F))
      {
        this.isIterationStep = true;
        this.step -= 1;
        f = 0.0F - this.currentTime;
        this.deltaTime -= f;
        this.currentTime = this.duration;
        if (isReverse(this.step)) {
          forceStartValues();
        }
        for (;;)
        {
          callCallback(32);
          updateOverride(this.step, this.step + 1, this.isIterationStep, f);
          break;
          forceEndValues();
        }
      }
      if ((!this.isIterationStep) && (this.currentTime + this.deltaTime >= this.repeatDelay))
      {
        this.isIterationStep = true;
        this.step += 1;
        f = this.repeatDelay - this.currentTime;
        this.deltaTime -= f;
        this.currentTime = 0.0F;
        if (isReverse(this.step)) {
          forceEndValues();
        }
        for (;;)
        {
          callCallback(2);
          updateOverride(this.step, this.step - 1, this.isIterationStep, f);
          break;
          forceStartValues();
        }
      }
      if ((this.isIterationStep) && (this.currentTime + this.deltaTime < 0.0F))
      {
        this.isIterationStep = false;
        this.step -= 1;
        f = 0.0F - this.currentTime;
        this.deltaTime -= f;
        this.currentTime = 0.0F;
        updateOverride(this.step, this.step + 1, this.isIterationStep, f);
        callCallback(64);
        if (this.step < 0) {
          callCallback(128);
        } else {
          this.currentTime = this.repeatDelay;
        }
      }
      else if ((this.isIterationStep) && (this.currentTime + this.deltaTime > this.duration))
      {
        this.isIterationStep = false;
        this.step += 1;
        f = this.duration - this.currentTime;
        this.deltaTime -= f;
        this.currentTime = this.duration;
        updateOverride(this.step, this.step - 1, this.isIterationStep, f);
        callCallback(4);
        if (this.step > this.repeatCnt * 2) {
          callCallback(8);
        }
        this.currentTime = 0.0F;
      }
      else
      {
        if (!this.isIterationStep) {
          break label514;
        }
        f = this.deltaTime;
        this.deltaTime -= f;
        this.currentTime += f;
        updateOverride(this.step, this.step, this.isIterationStep, f);
      }
    }
    return;
    label514:
    float f = this.deltaTime;
    this.deltaTime -= f;
    this.currentTime = (f + this.currentTime);
  }
  
  public Object build()
  {
    return this;
  }
  
  protected void callCallback(int paramInt)
  {
    if ((this.callback != null) && ((this.callbackTriggers & paramInt) > 0)) {
      this.callback.onEvent(paramInt, this);
    }
  }
  
  protected abstract boolean containsTarget(Object paramObject);
  
  protected abstract boolean containsTarget(Object paramObject, int paramInt);
  
  public Object delay(float paramFloat)
  {
    this.delay += paramFloat;
    return this;
  }
  
  protected abstract void forceEndValues();
  
  protected abstract void forceStartValues();
  
  protected void forceToEnd(float paramFloat)
  {
    this.currentTime = (paramFloat - getFullDuration());
    this.step = (this.repeatCnt * 2 + 1);
    this.isIterationStep = false;
    if (isReverse(this.repeatCnt * 2))
    {
      forceStartValues();
      return;
    }
    forceEndValues();
  }
  
  protected void forceToStart()
  {
    this.currentTime = (-this.delay);
    this.step = -1;
    this.isIterationStep = false;
    if (isReverse(0))
    {
      forceEndValues();
      return;
    }
    forceStartValues();
  }
  
  public void free() {}
  
  public float getCurrentTime()
  {
    return this.currentTime;
  }
  
  public float getDelay()
  {
    return this.delay;
  }
  
  public float getDuration()
  {
    return this.duration;
  }
  
  public float getFullDuration()
  {
    if (this.repeatCnt < 0) {
      return -1.0F;
    }
    return this.delay + this.duration + (this.repeatDelay + this.duration) * this.repeatCnt;
  }
  
  public int getRepeatCount()
  {
    return this.repeatCnt;
  }
  
  public float getRepeatDelay()
  {
    return this.repeatDelay;
  }
  
  public int getStep()
  {
    return this.step;
  }
  
  public Object getUserData()
  {
    return this.userData;
  }
  
  protected void initializeOverride() {}
  
  public boolean isFinished()
  {
    return (this.isFinished) || (this.isKilled);
  }
  
  public boolean isInitialized()
  {
    return this.isInitialized;
  }
  
  public boolean isPaused()
  {
    return this.isPaused;
  }
  
  protected boolean isReverse(int paramInt)
  {
    return (this.isYoyo) && (Math.abs(paramInt % 4) == 2);
  }
  
  public boolean isStarted()
  {
    return this.isStarted;
  }
  
  protected boolean isValid(int paramInt)
  {
    return ((paramInt >= 0) && (paramInt <= this.repeatCnt * 2)) || (this.repeatCnt < 0);
  }
  
  public boolean isYoyo()
  {
    return this.isYoyo;
  }
  
  public void kill()
  {
    this.isKilled = true;
  }
  
  protected void killTarget(Object paramObject)
  {
    if (containsTarget(paramObject)) {
      kill();
    }
  }
  
  protected void killTarget(Object paramObject, int paramInt)
  {
    if (containsTarget(paramObject, paramInt)) {
      kill();
    }
  }
  
  public void pause()
  {
    this.isPaused = true;
  }
  
  public Object repeat(int paramInt, float paramFloat)
  {
    if (this.isStarted) {
      throw new RuntimeException("You can't change the repetitions of a tween or timeline once it is started");
    }
    this.repeatCnt = paramInt;
    if (paramFloat >= 0.0F) {}
    for (;;)
    {
      this.repeatDelay = paramFloat;
      this.isYoyo = false;
      return this;
      paramFloat = 0.0F;
    }
  }
  
  public Object repeatYoyo(int paramInt, float paramFloat)
  {
    if (this.isStarted) {
      throw new RuntimeException("You can't change the repetitions of a tween or timeline once it is started");
    }
    this.repeatCnt = paramInt;
    if (paramFloat >= 0.0F) {}
    for (;;)
    {
      this.repeatDelay = paramFloat;
      this.isYoyo = true;
      return this;
      paramFloat = 0.0F;
    }
  }
  
  protected void reset()
  {
    this.step = -2;
    this.repeatCnt = 0;
    this.isYoyo = false;
    this.isIterationStep = false;
    this.deltaTime = 0.0F;
    this.currentTime = 0.0F;
    this.repeatDelay = 0.0F;
    this.duration = 0.0F;
    this.delay = 0.0F;
    this.isPaused = false;
    this.isKilled = false;
    this.isFinished = false;
    this.isInitialized = false;
    this.isStarted = false;
    this.callback = null;
    this.callbackTriggers = 0;
    this.userData = null;
    this.isAutoStartEnabled = true;
    this.isAutoRemoveEnabled = true;
  }
  
  public void resume()
  {
    this.isPaused = false;
  }
  
  public Object setCallback(TweenCallback paramTweenCallback)
  {
    this.callback = paramTweenCallback;
    this.callbackTriggers = 8;
    return this;
  }
  
  public Object setCallbackTriggers(int paramInt)
  {
    this.callbackTriggers = paramInt;
    return this;
  }
  
  public Object setUserData(Object paramObject)
  {
    this.userData = paramObject;
    return this;
  }
  
  public Object start()
  {
    build();
    this.currentTime = 0.0F;
    this.isStarted = true;
    return this;
  }
  
  public Object start(TweenManager paramTweenManager)
  {
    paramTweenManager.add(this);
    return this;
  }
  
  public void update(float paramFloat)
  {
    if ((!this.isStarted) || (this.isPaused) || (this.isKilled)) {
      return;
    }
    this.deltaTime = paramFloat;
    if (!this.isInitialized) {
      initialize();
    }
    if (this.isInitialized)
    {
      testRelaunch();
      updateStep();
      testCompletion();
    }
    this.currentTime += this.deltaTime;
    this.deltaTime = 0.0F;
  }
  
  protected void updateOverride(int paramInt1, int paramInt2, boolean paramBoolean, float paramFloat) {}
}
