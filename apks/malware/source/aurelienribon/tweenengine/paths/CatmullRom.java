package aurelienribon.tweenengine.paths;

import aurelienribon.tweenengine.TweenPath;

public class CatmullRom
  implements TweenPath
{
  public CatmullRom() {}
  
  private float catmullRomSpline(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5)
  {
    return (paramFloat3 - paramFloat1) * 0.5F * (paramFloat5 * paramFloat5 * paramFloat5 - 2.0F * paramFloat5 * paramFloat5 + paramFloat5) + ((2.0F * paramFloat5 * paramFloat5 * paramFloat5 - 3.0F * paramFloat5 * paramFloat5 + 1.0F) * paramFloat2 + (-2.0F * paramFloat5 * paramFloat5 * paramFloat5 + 3.0F * paramFloat5 * paramFloat5) * paramFloat3) + (paramFloat4 - paramFloat2) * 0.5F * (paramFloat5 * paramFloat5 * paramFloat5 - paramFloat5 * paramFloat5);
  }
  
  public float compute(float paramFloat, float[] paramArrayOfFloat, int paramInt)
  {
    int i = Math.min(Math.max((int)Math.floor((paramInt - 1) * paramFloat), 0), paramInt - 2);
    paramFloat = (paramInt - 1) * paramFloat - i;
    if (i == 0) {
      return catmullRomSpline(paramArrayOfFloat[0], paramArrayOfFloat[0], paramArrayOfFloat[1], paramArrayOfFloat[2], paramFloat);
    }
    if (i == paramInt - 2) {
      return catmullRomSpline(paramArrayOfFloat[(paramInt - 3)], paramArrayOfFloat[(paramInt - 2)], paramArrayOfFloat[(paramInt - 1)], paramArrayOfFloat[(paramInt - 1)], paramFloat);
    }
    return catmullRomSpline(paramArrayOfFloat[(i - 1)], paramArrayOfFloat[i], paramArrayOfFloat[(i + 1)], paramArrayOfFloat[(i + 2)], paramFloat);
  }
}
