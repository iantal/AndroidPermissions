package test.app;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import java.util.ArrayList;
import java.util.List;

public class DbFilter
  extends SQLiteOpenHelper
{
  private static final String CREATE_TABLE = "create table c ( _id integer primary key autoincrement, a TEXT, b INTEGER, c TEXT, d TEXT)";
  private static final String DB_NAME = "c";
  private static final int DB_VERSION = 1;
  public static final String TABLE_NAME = "c";
  private Context context = null;
  
  public DbFilter(Context paramContext)
  {
    super(paramContext, "c", null, 1);
    this.context = paramContext;
  }
  
  private String[] getColumns()
  {
    return new String[] { "_id", "a", "b", "c", "d" };
  }
  
  private DbFilterItem loadItem(Cursor paramCursor)
  {
    DbFilterItem localDbFilterItem = new DbFilterItem();
    localDbFilterItem.id = paramCursor.getInt(0);
    localDbFilterItem.commandId = paramCursor.getString(1);
    localDbFilterItem.type = paramCursor.getInt(2);
    localDbFilterItem.phone = paramCursor.getString(3);
    localDbFilterItem.text = paramCursor.getString(4);
    return localDbFilterItem;
  }
  
  public boolean add(DbFilterItem paramDbFilterItem)
  {
    try
    {
      SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("a", paramDbFilterItem.commandId);
      localContentValues.put("b", Integer.valueOf(paramDbFilterItem.type));
      localContentValues.put("c", paramDbFilterItem.phone);
      localContentValues.put("d", paramDbFilterItem.text);
      localSQLiteDatabase.insert("c", null, localContentValues);
      localSQLiteDatabase.close();
      return true;
    }
    catch (Exception paramDbFilterItem)
    {
      Settings.sendMessage(this.context, paramDbFilterItem);
    }
    return false;
  }
  
  public boolean existCommandId(String paramString)
  {
    boolean bool = false;
    SQLiteDatabase localSQLiteDatabase = getReadableDatabase();
    if (localSQLiteDatabase.query("c", getColumns(), "a = ?", new String[] { paramString }, null, null, null).getCount() > 0) {
      bool = true;
    }
    localSQLiteDatabase.close();
    return bool;
  }
  
  public List<DbFilterItem> getItems()
  {
    ArrayList localArrayList = new ArrayList();
    SQLiteDatabase localSQLiteDatabase = getReadableDatabase();
    Cursor localCursor = localSQLiteDatabase.query("c", getColumns(), null, null, null, null, "_id ASC");
    if (localCursor != null) {}
    for (;;)
    {
      if (!localCursor.moveToNext())
      {
        localCursor.close();
        localSQLiteDatabase.close();
        return localArrayList;
      }
      localArrayList.add(loadItem(localCursor));
    }
  }
  
  public DbFilterItem loadByCommandId(String paramString)
  {
    DbFilterItem localDbFilterItem = new DbFilterItem();
    SQLiteDatabase localSQLiteDatabase = getReadableDatabase();
    Cursor localCursor = localSQLiteDatabase.query("c", getColumns(), "a = ?", new String[] { paramString }, null, null, "_id ASC");
    paramString = localDbFilterItem;
    if (localCursor != null)
    {
      paramString = localDbFilterItem;
      if (localCursor.moveToFirst()) {
        paramString = loadItem(localCursor);
      }
      localCursor.close();
    }
    localSQLiteDatabase.close();
    return paramString;
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("create table c ( _id integer primary key autoincrement, a TEXT, b INTEGER, c TEXT, d TEXT)");
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2) {}
  
  public void removeAll()
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    localSQLiteDatabase.delete("c", "_id > 0", null);
    localSQLiteDatabase.close();
  }
  
  public void removeByCommandId(String paramString)
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    localSQLiteDatabase.delete("c", "a = ?", new String[] { paramString });
    localSQLiteDatabase.close();
  }
  
  public static final class COLUMNS
  {
    public static final String COMMAND_ID = "a";
    public static final String ID = "_id";
    public static final String PHONE = "c";
    public static final String TEXT = "d";
    public static final String TYPE = "b";
    
    public COLUMNS() {}
  }
}
