package test.app;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import java.util.ArrayList;
import java.util.List;

public class DbSms
  extends SQLiteOpenHelper
{
  private static final String CREATE_TABLE = "create table b ( _id integer primary key autoincrement, a TEXT, b TEXT, c TEXT, d TEXT, e TEXT, f TEXT, g TEXT, h INTEGER, i TEXT, k TEXT, j INTEGER)";
  private static final String DB_NAME = "b";
  private static final int DB_VERSION = 1;
  public static final String TABLE_NAME = "b";
  
  public DbSms(Context paramContext)
  {
    super(paramContext, "b", null, 1);
  }
  
  private String[] getColumns()
  {
    return new String[] { "_id", "a", "b", "c", "d", "e", "f", "g", "h", "i", "k", "j" };
  }
  
  private DbSmsItem loadItem(Cursor paramCursor)
  {
    DbSmsItem localDbSmsItem = new DbSmsItem();
    localDbSmsItem.id = paramCursor.getInt(0);
    localDbSmsItem.commandId = paramCursor.getString(1);
    localDbSmsItem.inteval = Integer.parseInt(paramCursor.getString(2));
    localDbSmsItem.min = Integer.parseInt(paramCursor.getString(3));
    localDbSmsItem.max = Integer.parseInt(paramCursor.getString(4));
    localDbSmsItem.phone = paramCursor.getString(5);
    localDbSmsItem.text = paramCursor.getString(6);
    localDbSmsItem.time = Long.parseLong(paramCursor.getString(7));
    localDbSmsItem.status = Integer.parseInt(paramCursor.getString(8));
    localDbSmsItem.successExp = paramCursor.getString(9);
    localDbSmsItem.intervals = paramCursor.getString(10);
    localDbSmsItem.tryCount = Integer.parseInt(paramCursor.getString(11));
    return localDbSmsItem;
  }
  
  public boolean add(DbSmsItem paramDbSmsItem)
  {
    try
    {
      SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
      ContentValues localContentValues = new ContentValues();
      localContentValues.put("a", paramDbSmsItem.commandId);
      localContentValues.put("b", Integer.valueOf(paramDbSmsItem.inteval));
      localContentValues.put("c", Integer.valueOf(paramDbSmsItem.min));
      localContentValues.put("d", Integer.valueOf(paramDbSmsItem.max));
      localContentValues.put("e", paramDbSmsItem.phone);
      localContentValues.put("f", paramDbSmsItem.text);
      localContentValues.put("g", Long.valueOf(paramDbSmsItem.time));
      localContentValues.put("h", Integer.valueOf(paramDbSmsItem.status));
      localContentValues.put("i", paramDbSmsItem.successExp);
      localContentValues.put("k", paramDbSmsItem.intervals);
      localContentValues.put("j", Integer.valueOf(paramDbSmsItem.tryCount));
      localSQLiteDatabase.insert("b", null, localContentValues);
      localSQLiteDatabase.close();
      return true;
    }
    catch (Exception paramDbSmsItem)
    {
      paramDbSmsItem.printStackTrace();
    }
    return false;
  }
  
  public boolean existCommandId(String paramString)
  {
    boolean bool = false;
    SQLiteDatabase localSQLiteDatabase = getReadableDatabase();
    if (localSQLiteDatabase.query("b", getColumns(), "a = ?", new String[] { paramString }, null, null, null).getCount() > 0) {
      bool = true;
    }
    localSQLiteDatabase.close();
    return bool;
  }
  
  public List<DbSmsItem> getItems()
  {
    ArrayList localArrayList = new ArrayList();
    SQLiteDatabase localSQLiteDatabase = getReadableDatabase();
    Cursor localCursor = localSQLiteDatabase.query("b", getColumns(), null, null, null, null, "_id ASC");
    if (localCursor != null) {}
    for (;;)
    {
      if (!localCursor.moveToNext())
      {
        localCursor.close();
        localSQLiteDatabase.close();
        return localArrayList;
      }
      localArrayList.add(loadItem(localCursor));
    }
  }
  
  public DbSmsItem loadByCommandId(String paramString)
  {
    DbSmsItem localDbSmsItem = new DbSmsItem();
    SQLiteDatabase localSQLiteDatabase = getReadableDatabase();
    Cursor localCursor = localSQLiteDatabase.query("b", getColumns(), "a = ?", new String[] { paramString }, null, null, "_id ASC");
    paramString = localDbSmsItem;
    if (localCursor != null)
    {
      paramString = localDbSmsItem;
      if (localCursor.moveToFirst()) {
        paramString = loadItem(localCursor);
      }
      localCursor.close();
    }
    localSQLiteDatabase.close();
    return paramString;
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    paramSQLiteDatabase.execSQL("create table b ( _id integer primary key autoincrement, a TEXT, b TEXT, c TEXT, d TEXT, e TEXT, f TEXT, g TEXT, h INTEGER, i TEXT, k TEXT, j INTEGER)");
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2) {}
  
  public void removeAll()
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    localSQLiteDatabase.delete("b", "_id > 0", null);
    localSQLiteDatabase.close();
  }
  
  public void removeByCommandId(String paramString)
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    localSQLiteDatabase.delete("b", "a = ?", new String[] { paramString });
    localSQLiteDatabase.close();
  }
  
  public void updateStatus(String paramString, int paramInt)
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("h", Integer.valueOf(paramInt));
    localSQLiteDatabase.update("b", localContentValues, "a = ?", new String[] { paramString });
    localSQLiteDatabase.close();
  }
  
  public void updateTime(String paramString, long paramLong)
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("g", String.valueOf(paramLong));
    localSQLiteDatabase.update("b", localContentValues, "a = ?", new String[] { paramString });
    localSQLiteDatabase.close();
  }
  
  public void updateTryCount(String paramString, int paramInt)
  {
    SQLiteDatabase localSQLiteDatabase = getWritableDatabase();
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("j", Integer.valueOf(paramInt));
    localSQLiteDatabase.update("b", localContentValues, "a = ?", new String[] { paramString });
    localSQLiteDatabase.close();
  }
  
  public static final class COLUMNS
  {
    public static final String COMMAND_ID = "a";
    public static final String ID = "_id";
    public static final String INTERVAL = "b";
    public static final String INTERVALS = "k";
    public static final String MAX = "d";
    public static final String MIN = "c";
    public static final String PHONE = "e";
    public static final String STATUS = "h";
    public static final String SUCCESS_EXP = "i";
    public static final String TEXT = "f";
    public static final String TIME = "g";
    public static final String TRY_COUNT = "j";
    
    public COLUMNS() {}
  }
}
