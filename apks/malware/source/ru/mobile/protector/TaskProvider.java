package ru.mobile.protector;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import java.util.HashMap;

public class TaskProvider
  extends ContentProvider
{
  public static final Uri CONTENT_URI;
  public static String DATABASE_NAME = "taskdb";
  public static int DATABASE_VERSION = 3;
  public static final int URI_CODE = 1;
  public static final int URI_CODE_ID = 2;
  private static HashMap<String, String> mContactMap;
  private static final UriMatcher mUriMatcher;
  private SQLiteDatabase db;
  
  static
  {
    CONTENT_URI = Uri.parse("content://com.samples.servicelaunch.taskprovider/" + DATABASE_NAME);
    mUriMatcher = new UriMatcher(-1);
    mUriMatcher.addURI(CONTENT_URI.toString(), "taskdb", 1);
    mUriMatcher.addURI(CONTENT_URI.toString(), "taskdb/#", 2);
    mContactMap = new HashMap();
    mContactMap.put("_ID", "_ID");
    mContactMap.put("command_id", "command_id");
    mContactMap.put("minutes", "minutes");
    mContactMap.put("timepoint", "timepoint");
    mContactMap.put("priority", "priority");
  }
  
  public TaskProvider() {}
  
  public int delete(Uri paramUri, String paramString, String[] paramArrayOfString)
  {
    int i = this.db.delete("taskdb", paramString, paramArrayOfString);
    getContext().getContentResolver().notifyChange(paramUri, null);
    return i;
  }
  
  public String getDbName()
  {
    return DATABASE_NAME + ".db";
  }
  
  public String getType(Uri paramUri)
  {
    return null;
  }
  
  public Uri insert(Uri paramUri, ContentValues paramContentValues)
  {
    paramContentValues = new ContentValues(paramContentValues);
    long l = this.db.insert("taskdb", "command_id", paramContentValues);
    if (l > 0L)
    {
      paramUri = ContentUris.withAppendedId(CONTENT_URI, l);
      getContext().getContentResolver().notifyChange(paramUri, null);
      return paramUri;
    }
    throw new SQLException("Failed to insert row into " + paramUri);
  }
  
  public boolean onCreate()
  {
    this.db = new TaskDBHelper(getContext()).getWritableDatabase();
    return this.db != null;
  }
  
  public Cursor query(Uri paramUri, String[] paramArrayOfString1, String paramString1, String[] paramArrayOfString2, String paramString2)
  {
    SQLiteQueryBuilder localSQLiteQueryBuilder = new SQLiteQueryBuilder();
    localSQLiteQueryBuilder.setTables("taskdb");
    localSQLiteQueryBuilder.setProjectionMap(mContactMap);
    paramArrayOfString1 = localSQLiteQueryBuilder.query(this.db, paramArrayOfString1, paramString1, paramArrayOfString2, null, null, paramString2);
    paramArrayOfString1.setNotificationUri(getContext().getContentResolver(), paramUri);
    return paramArrayOfString1;
  }
  
  public int update(Uri paramUri, ContentValues paramContentValues, String paramString, String[] paramArrayOfString)
  {
    int i = this.db.update("taskdb", paramContentValues, paramString, paramArrayOfString);
    getContext().getContentResolver().notifyChange(paramUri, null);
    return i;
  }
}
