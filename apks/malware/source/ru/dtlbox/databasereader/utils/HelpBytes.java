package ru.dtlbox.databasereader.utils;

import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;

public class HelpBytes
{
  protected static final char[] hexArray = "0123456789ABCDEF".toCharArray();
  
  public HelpBytes() {}
  
  public static byte[] bytesFromLong(long paramLong)
  {
    return ByteBuffer.allocate(8).putLong(paramLong).array();
  }
  
  public static String bytesToHex(byte[] paramArrayOfByte)
  {
    char[] arrayOfChar = new char[paramArrayOfByte.length * 2];
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return new String(arrayOfChar);
      }
      int j = paramArrayOfByte[i] & 0xFF;
      arrayOfChar[(i * 2)] = hexArray[(j >>> 4)];
      arrayOfChar[(i * 2 + 1)] = hexArray[(j & 0xF)];
      i += 1;
    }
  }
  
  public static String bytesToHexWithSpace(byte[] paramArrayOfByte)
  {
    char[] arrayOfChar = new char[paramArrayOfByte.length * 2];
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return new String(arrayOfChar);
      }
      int j = paramArrayOfByte[i] & 0xFF;
      arrayOfChar[(i * 2)] = hexArray[(j >>> 4)];
      arrayOfChar[(i * 2 + 1)] = hexArray[(j & 0xF)];
      i += 1;
    }
  }
  
  public static byte[] fromString(String paramString)
    throws UnsupportedEncodingException
  {
    return paramString.getBytes("US-ASCII");
  }
  
  public static double getDouble(byte[] paramArrayOfByte)
  {
    long l = 0L;
    int i = 0;
    for (;;)
    {
      if (i >= 8) {
        return Double.longBitsToDouble(l);
      }
      l |= (paramArrayOfByte[i] & 0xFF) << i * 8;
      i += 1;
    }
  }
  
  public static byte[] getFromArray(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    ByteBuffer localByteBuffer = ByteBuffer.allocate(paramInt2 - paramInt1);
    for (;;)
    {
      if (paramInt1 >= paramInt2) {
        return localByteBuffer.array();
      }
      localByteBuffer.put(paramArrayOfByte[paramInt1]);
      paramInt1 += 1;
    }
  }
  
  public static byte[] getFromArray(int[] paramArrayOfInt, int paramInt1, int paramInt2)
  {
    System.out.print("start getFromArray\n");
    ByteBuffer localByteBuffer = ByteBuffer.allocate((paramInt2 - paramInt1) * 4);
    for (;;)
    {
      if (paramInt1 >= paramInt2)
      {
        System.out.print("\n");
        return localByteBuffer.array();
      }
      System.out.print(Integer.toHexString(paramArrayOfInt[paramInt1]) + " ");
      localByteBuffer.putInt(paramArrayOfInt[paramInt1]);
      paramInt1 += 1;
    }
  }
  
  public static byte[] getFromArray(short[] paramArrayOfShort, int paramInt1, int paramInt2)
  {
    ByteBuffer localByteBuffer = ByteBuffer.allocate((paramInt2 - paramInt1) * 2);
    for (;;)
    {
      if (paramInt1 >= paramInt2) {
        return localByteBuffer.array();
      }
      localByteBuffer.putShort(paramArrayOfShort[paramInt1]);
      paramInt1 += 1;
    }
  }
  
  public static long getLong(byte[] paramArrayOfByte, int paramInt)
  {
    return (paramArrayOfByte[paramInt] & 0xFF) << 56 | (paramArrayOfByte[(paramInt + 1)] & 0xFF) << 48 | (paramArrayOfByte[(paramInt + 2)] & 0xFF) << 40 | (paramArrayOfByte[(paramInt + 3)] & 0xFF) << 32 | (paramArrayOfByte[(paramInt + 4)] & 0xFF) << 24 | (paramArrayOfByte[(paramInt + 5)] & 0xFF) << 16 | (paramArrayOfByte[(paramInt + 6)] & 0xFF) << 8 | paramArrayOfByte[(paramInt + 7)] & 0xFF;
  }
  
  public static byte[] hexStringToByteArray(String paramString)
  {
    int j = paramString.length();
    byte[] arrayOfByte = new byte[j / 2];
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return arrayOfByte;
      }
      arrayOfByte[(i / 2)] = ((byte)((Character.digit(paramString.charAt(i), 16) << 4) + Character.digit(paramString.charAt(i + 1), 16)));
      i += 2;
    }
  }
  
  public static int includes(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    int k = 0;
    int i = 0;
    int j = 0;
    if (j >= paramArrayOfByte1.length) {
      return k;
    }
    int m;
    if (paramArrayOfByte1[j] == paramArrayOfByte2[i])
    {
      int n = i + 1;
      i = n;
      m = k;
      if (n == paramArrayOfByte2.length)
      {
        m = k + 1;
        i = 0;
      }
    }
    for (;;)
    {
      j += 1;
      k = m;
      break;
      i = 0;
      m = k;
    }
  }
  
  public static int intFromBytes(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 24 | (paramArrayOfByte[1] & 0xFF) << 16 | (paramArrayOfByte[2] & 0xFF) << 8 | paramArrayOfByte[3] & 0xFF;
  }
  
  public static int intFromTwoBytes(byte paramByte1, byte paramByte2)
  {
    return (paramByte1 & 0xFF) << 8 | paramByte2 & 0xFF;
  }
  
  public static boolean isContain(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    int j = 0;
    int i = 0;
    int k = 0;
    if (k >= paramArrayOfByte1.length)
    {
      System.out.print(" maxl: " + j + "\n");
      return false;
    }
    int m;
    if (paramArrayOfByte1[k] == paramArrayOfByte2[i])
    {
      if (i == paramArrayOfByte2.length - 1)
      {
        System.out.print(" maxl: " + j + "\n");
        return true;
      }
      int n = i + 1;
      i = n;
      m = j;
      if (j < n)
      {
        m = n;
        i = n;
      }
    }
    for (;;)
    {
      k += 1;
      j = m;
      break;
      i = 0;
      m = j;
    }
  }
  
  private static boolean isNear(long paramLong)
  {
    return Math.abs(System.currentTimeMillis() - paramLong) < 25032704L;
  }
}
