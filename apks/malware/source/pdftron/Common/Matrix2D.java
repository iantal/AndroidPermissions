package pdftron.Common;

import pdftron.PDF.Point;

public class Matrix2D
{
  private long a;
  
  public Matrix2D()
    throws PDFNetException
  {
    this.a = Matrix2DCreate(1.0D, 0.0D, 0.0D, 1.0D, 0.0D, 0.0D);
  }
  
  public Matrix2D(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6)
    throws PDFNetException
  {
    this.a = Matrix2DCreate(paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6);
  }
  
  private Matrix2D(long paramLong)
  {
    this.a = paramLong;
  }
  
  private static native void Concat(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6);
  
  private static native void Destroy(long paramLong);
  
  private static native boolean Equals(long paramLong1, long paramLong2);
  
  private static native int HashCode(long paramLong);
  
  private static native long Inverse(long paramLong);
  
  private static native long Matrix2DCreate(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6);
  
  private static native double[] Mult(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native long Multiply(long paramLong1, long paramLong2);
  
  private static native long RotationMatrix(double paramDouble);
  
  private static native void Scale(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native void Set(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6);
  
  private static native void Translate(long paramLong, double paramDouble1, double paramDouble2);
  
  public static Matrix2D __Create(long paramLong)
  {
    return new Matrix2D(paramLong);
  }
  
  private static native double getA(long paramLong);
  
  private static native double getB(long paramLong);
  
  private static native double getC(long paramLong);
  
  private static native double getD(long paramLong);
  
  private static native double getH(long paramLong);
  
  private static native double getV(long paramLong);
  
  public static Matrix2D identityMatrix()
    throws PDFNetException
  {
    return new Matrix2D();
  }
  
  public static Matrix2D rotationMatrix(double paramDouble)
    throws PDFNetException
  {
    return new Matrix2D(RotationMatrix(paramDouble));
  }
  
  private static native void setA(long paramLong, double paramDouble);
  
  private static native void setB(long paramLong, double paramDouble);
  
  private static native void setC(long paramLong, double paramDouble);
  
  private static native void setD(long paramLong, double paramDouble);
  
  private static native void setH(long paramLong, double paramDouble);
  
  private static native void setV(long paramLong, double paramDouble);
  
  public static Matrix2D zeroMatrix()
    throws PDFNetException
  {
    return new Matrix2D(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
  }
  
  public long __GetHandle()
  {
    return this.a;
  }
  
  public void concat(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6)
    throws PDFNetException
  {
    Concat(this.a, paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6);
  }
  
  public void destroy()
    throws PDFNetException
  {
    if (this.a != 0L)
    {
      Destroy(this.a);
      this.a = 0L;
    }
  }
  
  public boolean equals(Object paramObject)
  {
    if ((paramObject != null) && (paramObject.getClass().equals(getClass()))) {
      return Equals(this.a, ((Matrix2D)paramObject).a);
    }
    return false;
  }
  
  protected void finalize()
    throws Throwable
  {
    destroy();
  }
  
  public double getA()
    throws PDFNetException
  {
    return getA(this.a);
  }
  
  public double getB()
    throws PDFNetException
  {
    return getB(this.a);
  }
  
  public double getC()
    throws PDFNetException
  {
    return getC(this.a);
  }
  
  public double getD()
    throws PDFNetException
  {
    return getD(this.a);
  }
  
  public double getH()
    throws PDFNetException
  {
    return getH(this.a);
  }
  
  public double getV()
    throws PDFNetException
  {
    return getV(this.a);
  }
  
  public int hashCode()
  {
    return HashCode(this.a);
  }
  
  public Matrix2D inverse()
    throws PDFNetException
  {
    return new Matrix2D(Inverse(this.a));
  }
  
  public Point multPoint(double paramDouble1, double paramDouble2)
    throws PDFNetException
  {
    double[] arrayOfDouble = Mult(this.a, paramDouble1, paramDouble2);
    return new Point(arrayOfDouble[0], arrayOfDouble[1]);
  }
  
  public Matrix2D multiply(Matrix2D paramMatrix2D)
    throws PDFNetException
  {
    return new Matrix2D(Multiply(this.a, paramMatrix2D.a));
  }
  
  public Matrix2D scale(double paramDouble1, double paramDouble2)
    throws PDFNetException
  {
    Scale(this.a, paramDouble1, paramDouble2);
    return this;
  }
  
  public void set(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6)
    throws PDFNetException
  {
    Set(this.a, paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6);
  }
  
  public void setA(double paramDouble)
    throws PDFNetException
  {
    setA(this.a, paramDouble);
  }
  
  public void setB(double paramDouble)
    throws PDFNetException
  {
    setB(this.a, paramDouble);
  }
  
  public void setC(double paramDouble)
    throws PDFNetException
  {
    setC(this.a, paramDouble);
  }
  
  public void setD(double paramDouble)
    throws PDFNetException
  {
    setD(this.a, paramDouble);
  }
  
  public void setH(double paramDouble)
    throws PDFNetException
  {
    setH(this.a, paramDouble);
  }
  
  public void setV(double paramDouble)
    throws PDFNetException
  {
    setV(this.a, paramDouble);
  }
  
  public Matrix2D translate(double paramDouble1, double paramDouble2)
    throws PDFNetException
  {
    Translate(this.a, paramDouble1, paramDouble2);
    return this;
  }
}
