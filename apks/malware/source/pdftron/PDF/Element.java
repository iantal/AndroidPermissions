package pdftron.PDF;

import pdftron.Common.Matrix2D;
import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.PDF.Struct.SElement;
import pdftron.SDF.Obj;

public class Element
{
  public static final int e_closepath = 6;
  public static final int e_conicto = 4;
  public static final int e_cubicto = 3;
  public static final int e_form = 9;
  public static final int e_group_begin = 10;
  public static final int e_group_end = 11;
  public static final int e_image = 6;
  public static final int e_inline_image = 7;
  public static final int e_lineto = 2;
  public static final int e_marked_content_begin = 12;
  public static final int e_marked_content_end = 13;
  public static final int e_marked_content_point = 14;
  public static final int e_moveto = 1;
  public static final int e_null = 0;
  public static final int e_path = 1;
  public static final int e_rect = 5;
  public static final int e_shading = 8;
  public static final int e_text = 3;
  public static final int e_text_begin = 2;
  public static final int e_text_end = 5;
  public static final int e_text_new_line = 4;
  long a;
  private Object b;
  private Object c;
  
  Element(long paramLong, Object paramObject1, Object paramObject2)
  {
    this.a = paramLong;
    this.b = paramObject1;
    this.c = paramObject2;
  }
  
  private static native long GetBBox(long paramLong);
  
  private static native int GetBitsPerComponent(long paramLong);
  
  private static native long GetCTM(long paramLong);
  
  private static native long GetCharIterator(long paramLong);
  
  private static native int GetComponentNum(long paramLong);
  
  private static native long GetDecodeArray(long paramLong);
  
  private static native long GetGState(long paramLong);
  
  private static native long GetImageColorSpace(long paramLong);
  
  private static native long GetImageData(long paramLong);
  
  private static native int GetImageDataSize(long paramLong);
  
  private static native int GetImageHeight(long paramLong);
  
  private static native int GetImageRenderingIntent(long paramLong);
  
  private static native int GetImageWidth(long paramLong);
  
  private static native long GetMCPropertyDict(long paramLong);
  
  private static native long GetMCTag(long paramLong);
  
  private static native long GetMask(long paramLong);
  
  private static native double[] GetNewTextLineOffset(long paramLong);
  
  private static native long GetParentStructElement(long paramLong);
  
  private static native double[] GetPathPoints(long paramLong);
  
  private static native byte[] GetPathTypes(long paramLong);
  
  private static native double GetPosAdjustment(long paramLong);
  
  private static native long GetShading(long paramLong);
  
  private static native int GetStructMCID(long paramLong);
  
  private static native byte[] GetTextData(long paramLong);
  
  private static native double GetTextLength(long paramLong);
  
  private static native long GetTextMatrix(long paramLong);
  
  private static native String GetTextString(long paramLong);
  
  private static native int GetType(long paramLong);
  
  private static native long GetXObject(long paramLong);
  
  private static native boolean HasTextMatrix(long paramLong);
  
  private static native boolean IsClipWindingFill(long paramLong);
  
  private static native boolean IsClippingPath(long paramLong);
  
  private static native boolean IsFilled(long paramLong);
  
  private static native boolean IsImageInterpolate(long paramLong);
  
  private static native boolean IsImageMask(long paramLong);
  
  private static native boolean IsOCVisible(long paramLong);
  
  private static native boolean IsStroked(long paramLong);
  
  private static native boolean IsWindingFill(long paramLong);
  
  private static native void SetClipWindingFill(long paramLong, boolean paramBoolean);
  
  private static native void SetNewTextLineOffset(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native void SetPathClip(long paramLong, boolean paramBoolean);
  
  private static native void SetPathFill(long paramLong, boolean paramBoolean);
  
  private static native void SetPathPoints(long paramLong, double[] paramArrayOfDouble);
  
  private static native void SetPathStroke(long paramLong, boolean paramBoolean);
  
  private static native void SetPathTypes(long paramLong, byte[] paramArrayOfByte);
  
  private static native void SetPosAdjustment(long paramLong, double paramDouble);
  
  private static native void SetTextData(long paramLong, byte[] paramArrayOfByte);
  
  private static native void SetTextMatrix(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6);
  
  private static native void SetTextMatrix(long paramLong1, long paramLong2);
  
  private static native void SetWindingFill(long paramLong, boolean paramBoolean);
  
  private static native void UpdateTextMetrics(long paramLong);
  
  public Rect getBBox()
    throws PDFNetException
  {
    long l = GetBBox(this.a);
    if (l == 0L) {
      return null;
    }
    return new Rect(l);
  }
  
  public int getBitsPerComponent()
    throws PDFNetException
  {
    return GetBitsPerComponent(this.a);
  }
  
  public Matrix2D getCTM()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetCTM(this.a));
  }
  
  public CharIterator getCharIterator()
    throws PDFNetException
  {
    return new CharIterator(GetCharIterator(this.a), this.b);
  }
  
  public int getComponentNum()
    throws PDFNetException
  {
    return GetComponentNum(this.a);
  }
  
  public Obj getDecodeArray()
    throws PDFNetException
  {
    return Obj.__Create(GetDecodeArray(this.a), this.c);
  }
  
  public GState getGState()
    throws PDFNetException
  {
    return new GState(GetGState(this.a), this.b, this.c);
  }
  
  public ColorSpace getImageColorSpace()
    throws PDFNetException
  {
    return ColorSpace.__Create(GetImageColorSpace(this.a), this.c);
  }
  
  public Filter getImageData()
    throws PDFNetException
  {
    return Filter.__Create(GetImageData(this.a), null);
  }
  
  public int getImageDataSize()
    throws PDFNetException
  {
    return GetImageDataSize(this.a);
  }
  
  public int getImageHeight()
    throws PDFNetException
  {
    return GetImageHeight(this.a);
  }
  
  public int getImageRenderingIntent()
    throws PDFNetException
  {
    return GetImageRenderingIntent(this.a);
  }
  
  public int getImageWidth()
    throws PDFNetException
  {
    return GetImageWidth(this.a);
  }
  
  public Obj getMCPropertyDict()
    throws PDFNetException
  {
    return Obj.__Create(GetMCPropertyDict(this.a), this.c);
  }
  
  public Obj getMCTag()
    throws PDFNetException
  {
    return Obj.__Create(GetMCTag(this.a), this.c);
  }
  
  public Obj getMask()
    throws PDFNetException
  {
    return Obj.__Create(GetMask(this.a), this.c);
  }
  
  public double[] getNewTextLineOffset()
    throws PDFNetException
  {
    return GetNewTextLineOffset(this.a);
  }
  
  public SElement getParentStructElement()
    throws PDFNetException
  {
    return SElement.__Create(GetParentStructElement(this.a), this);
  }
  
  public double[] getPathPoints()
    throws PDFNetException
  {
    return GetPathPoints(this.a);
  }
  
  public byte[] getPathTypes()
    throws PDFNetException
  {
    return GetPathTypes(this.a);
  }
  
  public double getPosAdjustment()
    throws PDFNetException
  {
    return GetPosAdjustment(this.a);
  }
  
  public Shading getShading()
    throws PDFNetException
  {
    return Shading.a(GetShading(this.a), this.c);
  }
  
  public int getStructMCID()
    throws PDFNetException
  {
    return GetStructMCID(this.a);
  }
  
  public byte[] getTextData()
    throws PDFNetException
  {
    return GetTextData(this.a);
  }
  
  public double getTextLength()
    throws PDFNetException
  {
    return GetTextLength(this.a);
  }
  
  public Matrix2D getTextMatrix()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetTextMatrix(this.a));
  }
  
  public String getTextString()
    throws PDFNetException
  {
    return GetTextString(this.a);
  }
  
  public int getType()
    throws PDFNetException
  {
    return GetType(this.a);
  }
  
  public Obj getXObject()
    throws PDFNetException
  {
    return Obj.__Create(GetXObject(this.a), this.c);
  }
  
  public boolean hasTextMatrix()
    throws PDFNetException
  {
    return HasTextMatrix(this.a);
  }
  
  public boolean isClipWindingFill()
    throws PDFNetException
  {
    return IsClipWindingFill(this.a);
  }
  
  public boolean isClippingPath()
    throws PDFNetException
  {
    return IsClippingPath(this.a);
  }
  
  public boolean isFilled()
    throws PDFNetException
  {
    return IsFilled(this.a);
  }
  
  public boolean isImageInterpolate()
    throws PDFNetException
  {
    return IsImageInterpolate(this.a);
  }
  
  public boolean isImageMask()
    throws PDFNetException
  {
    return IsImageMask(this.a);
  }
  
  public boolean isOCVisible()
    throws PDFNetException
  {
    return IsOCVisible(this.a);
  }
  
  public boolean isStroked()
    throws PDFNetException
  {
    return IsStroked(this.a);
  }
  
  public boolean isWindingFill()
    throws PDFNetException
  {
    return IsWindingFill(this.a);
  }
  
  public void setClipWindingFill(boolean paramBoolean)
    throws PDFNetException
  {
    SetClipWindingFill(this.a, paramBoolean);
  }
  
  public void setNewTextLineOffset(double paramDouble1, double paramDouble2)
    throws PDFNetException
  {
    SetNewTextLineOffset(this.a, paramDouble1, paramDouble2);
  }
  
  public void setPathClip(boolean paramBoolean)
    throws PDFNetException
  {
    SetPathClip(this.a, paramBoolean);
  }
  
  public void setPathFill(boolean paramBoolean)
    throws PDFNetException
  {
    SetPathFill(this.a, paramBoolean);
  }
  
  public void setPathPoints(double[] paramArrayOfDouble)
    throws PDFNetException
  {
    SetPathPoints(this.a, paramArrayOfDouble);
  }
  
  public void setPathStroke(boolean paramBoolean)
    throws PDFNetException
  {
    SetPathStroke(this.a, paramBoolean);
  }
  
  public void setPathTypes(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    SetPathTypes(this.a, paramArrayOfByte);
  }
  
  public void setPosAdjustment(double paramDouble)
    throws PDFNetException
  {
    SetPosAdjustment(this.a, paramDouble);
  }
  
  public void setTextData(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    SetTextData(this.a, paramArrayOfByte);
  }
  
  public void setTextMatrix(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6)
    throws PDFNetException
  {
    SetTextMatrix(this.a, paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6);
  }
  
  public void setTextMatrix(Matrix2D paramMatrix2D)
    throws PDFNetException
  {
    SetTextMatrix(this.a, paramMatrix2D.__GetHandle());
  }
  
  public void setWindingFill(boolean paramBoolean)
    throws PDFNetException
  {
    SetWindingFill(this.a, paramBoolean);
  }
  
  public void updateTextMetrics()
    throws PDFNetException
  {
    UpdateTextMetrics(this.a);
  }
}
