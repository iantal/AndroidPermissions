package pdftron.PDF;

import pdftron.Common.Matrix2D;
import pdftron.Common.PDFNetException;
import pdftron.SDF.Obj;

public class Shading
{
  public static final int e_axial_shading = 1;
  public static final int e_coons_shading = 5;
  public static final int e_free_gouraud_shading = 3;
  public static final int e_function_shading = 0;
  public static final int e_lattice_gouraud_shading = 4;
  public static final int e_null = 7;
  public static final int e_radial_shading = 2;
  public static final int e_tensor_shading = 6;
  long a;
  Object b;
  
  private Shading(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public Shading(Obj paramObj)
  {
    this.a = paramObj.__GetHandle();
    this.b = paramObj.__GetRefHandle();
  }
  
  private static native boolean GetAntialias(long paramLong);
  
  private static native long GetBBox(long paramLong);
  
  private static native long GetBackground(long paramLong);
  
  private static native long GetBaseColorSpace(long paramLong);
  
  private static native long GetColor(long paramLong, double paramDouble);
  
  private static native long GetColor(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native double[] GetCoords(long paramLong);
  
  private static native double[] GetCoordsRadial(long paramLong);
  
  private static native double[] GetDomain(long paramLong);
  
  private static native long GetMatrix(long paramLong);
  
  private static native double GetParamEnd(long paramLong);
  
  private static native double GetParamStart(long paramLong);
  
  private static native int GetType(long paramLong);
  
  private static native int GetTypeStatic(long paramLong);
  
  private static native boolean HasBBox(long paramLong);
  
  private static native boolean HasBackground(long paramLong);
  
  private static native boolean IsExtendEnd(long paramLong);
  
  private static native boolean IsExtendStart(long paramLong);
  
  static Shading a(long paramLong, Object paramObject)
  {
    if (paramLong == 0L) {
      return null;
    }
    return new Shading(paramLong, paramObject);
  }
  
  public static int getType(Obj paramObj)
    throws PDFNetException
  {
    return GetTypeStatic(paramObj.__GetHandle());
  }
  
  public boolean getAntialias()
    throws PDFNetException
  {
    return GetAntialias(this.a);
  }
  
  public Rect getBBox()
    throws PDFNetException
  {
    return new Rect(GetBBox(this.a));
  }
  
  public ColorPt getBackground()
    throws PDFNetException
  {
    return new ColorPt(GetBackground(this.a));
  }
  
  public ColorSpace getBaseColorSpace()
    throws PDFNetException
  {
    return ColorSpace.__Create(GetBaseColorSpace(this.a), this.b);
  }
  
  public ColorPt getColor(double paramDouble)
    throws PDFNetException
  {
    return new ColorPt(GetColor(this.a, paramDouble));
  }
  
  public ColorPt getColor(double paramDouble1, double paramDouble2)
    throws PDFNetException
  {
    return new ColorPt(GetColor(this.a, paramDouble1, paramDouble2));
  }
  
  public double[] getCoords()
    throws PDFNetException
  {
    return GetCoords(this.a);
  }
  
  public double[] getCoordsRadial()
    throws PDFNetException
  {
    return GetCoordsRadial(this.a);
  }
  
  public double[] getDomain()
    throws PDFNetException
  {
    return GetDomain(this.a);
  }
  
  public Matrix2D getMatrix()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetMatrix(this.a));
  }
  
  public double getParamEnd()
    throws PDFNetException
  {
    return GetParamEnd(this.a);
  }
  
  public double getParamStart()
    throws PDFNetException
  {
    return GetParamStart(this.a);
  }
  
  public Obj getSDFObj()
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public int getType()
    throws PDFNetException
  {
    return GetType(this.a);
  }
  
  public boolean hasBBox()
    throws PDFNetException
  {
    return HasBBox(this.a);
  }
  
  public boolean hasBackground()
    throws PDFNetException
  {
    return HasBackground(this.a);
  }
  
  public boolean isExtendEnd()
    throws PDFNetException
  {
    return IsExtendEnd(this.a);
  }
  
  public boolean isExtendStart()
    throws PDFNetException
  {
    return IsExtendStart(this.a);
  }
}
