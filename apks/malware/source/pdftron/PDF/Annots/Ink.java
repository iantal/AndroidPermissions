package pdftron.PDF.Annots;

import pdftron.Common.PDFNetException;
import pdftron.PDF.Annot;
import pdftron.PDF.Point;
import pdftron.PDF.Rect;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;

public class Ink
  extends Markup
{
  public Ink() {}
  
  private Ink(long paramLong, Object paramObject)
  {
    super(paramLong, paramObject);
  }
  
  public Ink(Annot paramAnnot)
    throws PDFNetException
  {
    super(paramAnnot.getSDFObj());
  }
  
  public Ink(Obj paramObj)
  {
    super(paramObj);
  }
  
  private static native long Create(long paramLong1, long paramLong2);
  
  private static native int GetPathCount(long paramLong);
  
  private static native int GetPointCount(long paramLong, int paramInt);
  
  private static native double GetPointx(long paramLong, int paramInt1, int paramInt2);
  
  private static native double GetPointy(long paramLong, int paramInt1, int paramInt2);
  
  private static native void SetPoint(long paramLong, int paramInt1, int paramInt2, double paramDouble1, double paramDouble2);
  
  public static Ink create(Doc paramDoc, Rect paramRect)
    throws PDFNetException
  {
    return new Ink(Create(paramDoc.__GetHandle(), paramRect.__GetHandle()), paramDoc);
  }
  
  public Point GetPoint(int paramInt1, int paramInt2)
    throws PDFNetException
  {
    return new Point(GetPointx(__GetHandle(), paramInt1, paramInt2), GetPointy(__GetHandle(), paramInt1, paramInt2));
  }
  
  public int getPathCount()
    throws PDFNetException
  {
    return GetPathCount(__GetHandle());
  }
  
  public int getPointCount(int paramInt)
    throws PDFNetException
  {
    return GetPointCount(__GetHandle(), paramInt);
  }
  
  public void setPoint(int paramInt1, int paramInt2, Point paramPoint)
    throws PDFNetException
  {
    SetPoint(__GetHandle(), paramInt1, paramInt2, paramPoint.x, paramPoint.y);
  }
}
