package pdftron.PDF;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.Filters.FilterReader;
import pdftron.Filters.FilterWriter;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;

public class Image
{
  public static final int e_ascii_hex = 6;
  public static final int e_flate = 3;
  public static final int e_g3 = 4;
  public static final int e_g4 = 5;
  public static final int e_jp2 = 2;
  public static final int e_jpeg = 1;
  public static final int e_none = 0;
  long a;
  Object b;
  
  private Image(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public Image(Obj paramObj)
  {
    this.a = paramObj.__GetHandle();
    this.b = paramObj.__GetRefHandle();
  }
  
  private static native long Create(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, long paramLong3, int paramInt4);
  
  private static native long Create(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, long paramLong3, long paramLong4);
  
  private static native long Create(long paramLong1, String paramString, long paramLong2);
  
  private static native long Create(long paramLong1, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, long paramLong2, int paramInt4);
  
  private static native long Create(long paramLong1, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, long paramLong2, long paramLong3);
  
  private static native long Create(long paramLong, int[] paramArrayOfInt, int paramInt1, int paramInt2);
  
  private static native long CreateImageMask(long paramLong1, long paramLong2, int paramInt1, int paramInt2, long paramLong3);
  
  private static native long CreateImageMask(long paramLong1, byte[] paramArrayOfByte, int paramInt1, int paramInt2, long paramLong2);
  
  private static native long CreateSoftMask(long paramLong1, long paramLong2, int paramInt1, int paramInt2, int paramInt3, long paramLong3);
  
  private static native long CreateSoftMask(long paramLong1, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, long paramLong2);
  
  private static native int Export(long paramLong1, long paramLong2);
  
  private static native int Export(long paramLong, String paramString);
  
  private static native void ExportAsPng(long paramLong1, long paramLong2);
  
  private static native void ExportAsPng(long paramLong, String paramString);
  
  private static native void ExportAsTiff(long paramLong1, long paramLong2);
  
  private static native void ExportAsTiff(long paramLong, String paramString);
  
  private static native int GetBitsPerComponent(long paramLong);
  
  private static native int GetComponentNum(long paramLong);
  
  private static native long GetDecodeArray(long paramLong);
  
  private static native long GetImageColorSpace(long paramLong);
  
  private static native long GetImageData(long paramLong);
  
  private static native int GetImageDataSize(long paramLong);
  
  private static native int GetImageHeight(long paramLong);
  
  private static native int GetImageRenderingIntent(long paramLong);
  
  private static native int GetImageWidth(long paramLong);
  
  private static native long GetMask(long paramLong);
  
  private static native int[] GetRawImageData(long paramLong);
  
  private static native long GetSoftMask(long paramLong);
  
  private static native boolean IsImageInterpolate(long paramLong);
  
  private static native boolean IsImageMask(long paramLong);
  
  private static native boolean IsValid(long paramLong);
  
  private static native void SetMask(long paramLong1, long paramLong2);
  
  private static native void SetMaskObj(long paramLong1, long paramLong2);
  
  private static native void SetSoftMask(long paramLong1, long paramLong2);
  
  public static Image create(Doc paramDoc, Bitmap paramBitmap)
    throws PDFNetException, InterruptedException
  {
    int i = paramBitmap.getHeight();
    int j = paramBitmap.getWidth();
    if (j * i <= 0) {
      return null;
    }
    int[] arrayOfInt = new int[j * i];
    paramBitmap.getPixels(arrayOfInt, 0, j, 0, 0, j, i);
    return new Image(Create(paramDoc.__GetHandle(), arrayOfInt, j, i), paramDoc);
  }
  
  public static Image create(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramString, 0L), paramDoc);
  }
  
  public static Image create(Doc paramDoc, String paramString, Obj paramObj)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramString, paramObj.__GetHandle()), paramDoc);
  }
  
  public static Image create(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2, int paramInt3, ColorSpace paramColorSpace)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, paramInt3, paramColorSpace.a, 0L), paramDoc);
  }
  
  public static Image create(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2, int paramInt3, ColorSpace paramColorSpace, int paramInt4)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, paramInt3, paramColorSpace.a, paramInt4), paramDoc);
  }
  
  public static Image create(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2, int paramInt3, ColorSpace paramColorSpace, Obj paramObj)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, paramInt3, paramColorSpace.a, paramObj.__GetHandle()), paramDoc);
  }
  
  public static Image create(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, ColorSpace paramColorSpace)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, paramInt3, paramColorSpace.a, 0L), paramDoc);
  }
  
  public static Image create(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, ColorSpace paramColorSpace, int paramInt4)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, paramInt3, paramColorSpace.a, paramInt4), paramDoc);
  }
  
  public static Image create(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, ColorSpace paramColorSpace, Obj paramObj)
    throws PDFNetException
  {
    return new Image(Create(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, paramInt3, paramColorSpace.a, paramObj.__GetHandle()), paramDoc);
  }
  
  public static Image createImageMask(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2)
    throws PDFNetException
  {
    return new Image(CreateImageMask(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, 0L), paramDoc);
  }
  
  public static Image createImageMask(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2, Obj paramObj)
    throws PDFNetException
  {
    return new Image(CreateImageMask(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, paramObj.__GetHandle()), paramDoc);
  }
  
  public static Image createImageMask(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    throws PDFNetException
  {
    return new Image(CreateImageMask(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, 0L), paramDoc);
  }
  
  public static Image createImageMask(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2, Obj paramObj)
    throws PDFNetException
  {
    return new Image(CreateImageMask(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, paramObj.__GetHandle()), paramDoc);
  }
  
  public static Image createSoftMask(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2, int paramInt3)
    throws PDFNetException
  {
    return new Image(CreateSoftMask(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, paramInt3, 0L), paramDoc);
  }
  
  public static Image createSoftMask(Doc paramDoc, FilterReader paramFilterReader, int paramInt1, int paramInt2, int paramInt3, Obj paramObj)
    throws PDFNetException
  {
    return new Image(CreateSoftMask(paramDoc.__GetHandle(), paramFilterReader.__GetHandle(), paramInt1, paramInt2, paramInt3, paramObj.__GetHandle()), paramDoc);
  }
  
  public static Image createSoftMask(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3)
    throws PDFNetException
  {
    return new Image(CreateSoftMask(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, paramInt3, 0L), paramDoc);
  }
  
  public static Image createSoftMask(Doc paramDoc, byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, Obj paramObj)
    throws PDFNetException
  {
    return new Image(CreateSoftMask(paramDoc.__GetHandle(), paramArrayOfByte, paramInt1, paramInt2, paramInt3, paramObj.__GetHandle()), paramDoc);
  }
  
  public int export(String paramString)
    throws PDFNetException
  {
    return Export(this.a, paramString);
  }
  
  public int export(FilterWriter paramFilterWriter)
    throws PDFNetException
  {
    return Export(this.a, paramFilterWriter.__GetHandle());
  }
  
  public void exportAsPng(String paramString)
    throws PDFNetException
  {
    ExportAsPng(this.a, paramString);
  }
  
  public void exportAsPng(FilterWriter paramFilterWriter)
    throws PDFNetException
  {
    ExportAsPng(this.a, paramFilterWriter.__GetHandle());
  }
  
  public void exportAsTiff(String paramString)
    throws PDFNetException
  {
    ExportAsTiff(this.a, paramString);
  }
  
  public void exportAsTiff(FilterWriter paramFilterWriter)
    throws PDFNetException
  {
    ExportAsTiff(this.a, paramFilterWriter.__GetHandle());
  }
  
  public Bitmap getBitmap()
    throws PDFNetException
  {
    int[] arrayOfInt = GetRawImageData(this.a);
    if (arrayOfInt != null)
    {
      int i = arrayOfInt[(arrayOfInt.length - 2)];
      int j = arrayOfInt[(arrayOfInt.length - 1)];
      Bitmap localBitmap = Bitmap.createBitmap(i, j, Bitmap.Config.ARGB_8888);
      localBitmap.setPixels(arrayOfInt, 0, i, 0, 0, i, j);
      return localBitmap;
    }
    return null;
  }
  
  public int getBitsPerComponent()
    throws PDFNetException
  {
    return GetBitsPerComponent(this.a);
  }
  
  public int getComponentNum()
    throws PDFNetException
  {
    return GetComponentNum(this.a);
  }
  
  public Obj getDecodeArray()
    throws PDFNetException
  {
    return Obj.__Create(GetDecodeArray(this.a), this.b);
  }
  
  public ColorSpace getImageColorSpace()
    throws PDFNetException
  {
    return ColorSpace.__Create(GetImageColorSpace(this.a), this.b);
  }
  
  public Filter getImageData()
    throws PDFNetException
  {
    return Filter.__Create(GetImageData(this.a), null);
  }
  
  public int getImageDataSize()
    throws PDFNetException
  {
    return GetImageDataSize(this.a);
  }
  
  public int getImageHeight()
    throws PDFNetException
  {
    return GetImageHeight(this.a);
  }
  
  public int getImageRenderingIntent()
    throws PDFNetException
  {
    return GetImageRenderingIntent(this.a);
  }
  
  public int getImageWidth()
    throws PDFNetException
  {
    return GetImageWidth(this.a);
  }
  
  public Obj getMask()
    throws PDFNetException
  {
    return Obj.__Create(GetMask(this.a), this.b);
  }
  
  public Obj getSDFObj()
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public Obj getSoftMask()
    throws PDFNetException
  {
    return Obj.__Create(GetSoftMask(this.a), this.b);
  }
  
  public boolean isImageInterpolate()
    throws PDFNetException
  {
    return IsImageInterpolate(this.a);
  }
  
  public boolean isImageMask()
    throws PDFNetException
  {
    return IsImageMask(this.a);
  }
  
  public boolean isValid()
    throws PDFNetException
  {
    return IsValid(this.a);
  }
  
  public void setMask(Image paramImage)
    throws PDFNetException
  {
    SetMask(this.a, paramImage.a);
  }
  
  public void setMask(Obj paramObj)
    throws PDFNetException
  {
    SetMaskObj(this.a, paramObj.__GetHandle());
  }
  
  public void setSoftMask(Image paramImage)
    throws PDFNetException
  {
    SetSoftMask(this.a, paramImage.a);
  }
}
