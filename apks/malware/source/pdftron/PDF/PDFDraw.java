package pdftron.PDF;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import pdftron.Common.PDFNetException;
import pdftron.PDF.OCG.Context;
import pdftron.SDF.Obj;

public class PDFDraw
  extends s
{
  public static final int e_bgr = 3;
  public static final int e_bgra = 1;
  public static final int e_gray = 4;
  public static final int e_gray_alpha = 5;
  public static final int e_rgb = 2;
  public static final int e_rgba = 0;
  private long a;
  private long d;
  
  public PDFDraw()
    throws PDFNetException
  {
    this.a = PDFDrawCreate(92.0D);
    this.d = 0L;
    clearList();
  }
  
  public PDFDraw(double paramDouble)
    throws PDFNetException
  {
    this.a = PDFDrawCreate(paramDouble);
    this.d = 0L;
    clearList();
  }
  
  private static native void Destroy(long paramLong1, long paramLong2);
  
  private static native void DestroyProcData(long paramLong);
  
  private static native void Export(long paramLong1, long paramLong2, String paramString1, String paramString2, long paramLong3);
  
  private static native long[] GetBitmap(long paramLong1, long paramLong2);
  
  private static native long PDFDrawCreate(double paramDouble);
  
  private static native void SetAntiAliasing(long paramLong, boolean paramBoolean);
  
  private static native void SetCaching(long paramLong, boolean paramBoolean);
  
  private static native void SetDPI(long paramLong, double paramDouble);
  
  private static native void SetDataBuf(long paramLong1, long paramLong2, int[] paramArrayOfInt);
  
  private static native void SetDataBufByte(long paramLong1, long paramLong2, byte[] paramArrayOfByte);
  
  private static native void SetDefaultPageColor(long paramLong, byte paramByte1, byte paramByte2, byte paramByte3);
  
  private static native void SetDrawAnnotations(long paramLong, boolean paramBoolean);
  
  private static native long SetErrorReportProc(long paramLong, ErrorReportProc paramErrorReportProc, Object paramObject);
  
  private static native void SetFlipYAxis(long paramLong, boolean paramBoolean);
  
  private static native void SetGamma(long paramLong, double paramDouble);
  
  private static native void SetImageSize(long paramLong, int paramInt1, int paramInt2, boolean paramBoolean);
  
  private static native void SetImageSmoothing(long paramLong, boolean paramBoolean);
  
  private static native void SetOCGContext(long paramLong1, long paramLong2);
  
  private static native void SetOverprint(long paramLong, int paramInt);
  
  private static native void SetPageBox(long paramLong, int paramInt);
  
  private static native void SetPageTransparent(long paramLong, boolean paramBoolean);
  
  private static native void SetPrintMode(long paramLong, boolean paramBoolean);
  
  private static native void SetRasterizerType(long paramLong, int paramInt);
  
  private static native void SetRotate(long paramLong, int paramInt);
  
  private static native void SetThinLineAdjustment(long paramLong, boolean paramBoolean1, boolean paramBoolean2);
  
  public void destroy()
    throws PDFNetException
  {
    if (this.a != 0L)
    {
      Destroy(this.a, this.d);
      this.a = 0L;
    }
  }
  
  public void export(Page paramPage, String paramString)
    throws PDFNetException
  {
    Export(this.a, paramPage.a, paramString, "PNG", 0L);
  }
  
  public void export(Page paramPage, String paramString1, String paramString2)
    throws PDFNetException
  {
    Export(this.a, paramPage.a, paramString1, paramString2, 0L);
  }
  
  public void export(Page paramPage, String paramString1, String paramString2, Obj paramObj)
    throws PDFNetException
  {
    Export(this.a, paramPage.a, paramString1, paramString2, paramObj.__GetHandle());
  }
  
  public Bitmap getBitmap(Page paramPage)
  {
    paramPage = getIntBuffer(paramPage);
    int i = paramPage.width;
    int j = paramPage.height;
    if (i * j == 0) {
      return null;
    }
    return Bitmap.createBitmap(paramPage.data, i, j, Bitmap.Config.ARGB_4444);
  }
  
  public byte[] getByteBuffer(Page paramPage)
  {
    paramPage = GetBitmap(this.a, paramPage.a);
    long l1 = paramPage[0];
    long l2 = paramPage[2];
    long l3 = paramPage[3];
    paramPage = new byte[(int)l2 * (int)l3];
    SetDataBufByte(this.a, l1, paramPage);
    return paramPage;
  }
  
  public IntBufferData getIntBuffer(Page paramPage)
  {
    paramPage = GetBitmap(this.a, paramPage.a);
    long l = paramPage[0];
    IntBufferData localIntBufferData = new IntBufferData();
    localIntBufferData.width = ((int)paramPage[1]);
    localIntBufferData.height = ((int)paramPage[2]);
    localIntBufferData.stride = ((int)paramPage[3]);
    localIntBufferData.data = new int[localIntBufferData.width * localIntBufferData.height];
    SetDataBuf(this.a, l, localIntBufferData.data);
    return localIntBufferData;
  }
  
  public void setAntiAliasing(boolean paramBoolean)
    throws PDFNetException
  {
    SetAntiAliasing(this.a, paramBoolean);
  }
  
  public void setCaching()
    throws PDFNetException
  {
    SetCaching(this.a, true);
  }
  
  public void setCaching(boolean paramBoolean)
    throws PDFNetException
  {
    SetCaching(this.a, paramBoolean);
  }
  
  public void setDPI(double paramDouble)
    throws PDFNetException
  {
    SetDPI(this.a, paramDouble);
  }
  
  public void setDefaultPageColor(byte paramByte1, byte paramByte2, byte paramByte3)
    throws PDFNetException
  {
    SetDefaultPageColor(this.a, paramByte1, paramByte2, paramByte3);
  }
  
  public void setDrawAnnotations(boolean paramBoolean)
    throws PDFNetException
  {
    SetDrawAnnotations(this.a, paramBoolean);
  }
  
  public void setErrorReportProc(ErrorReportProc paramErrorReportProc, Object paramObject)
    throws PDFNetException
  {
    if (this.d != 0L) {
      DestroyProcData(this.d);
    }
    this.d = SetErrorReportProc(this.a, paramErrorReportProc, paramObject);
  }
  
  public void setFlipYAxis(boolean paramBoolean)
    throws PDFNetException
  {
    SetFlipYAxis(this.a, paramBoolean);
  }
  
  public void setGamma(double paramDouble)
    throws PDFNetException
  {
    SetGamma(this.a, paramDouble);
  }
  
  public void setImageSize(int paramInt1, int paramInt2)
    throws PDFNetException
  {
    SetImageSize(this.a, paramInt1, paramInt2, true);
  }
  
  public void setImageSize(int paramInt1, int paramInt2, boolean paramBoolean)
    throws PDFNetException
  {
    SetImageSize(this.a, paramInt1, paramInt2, paramBoolean);
  }
  
  public void setImageSmoothing()
    throws PDFNetException
  {
    SetImageSmoothing(this.a, true);
  }
  
  public void setImageSmoothing(boolean paramBoolean)
    throws PDFNetException
  {
    SetImageSmoothing(this.a, paramBoolean);
  }
  
  public void setOCGContext(Context paramContext)
    throws PDFNetException
  {
    if (paramContext == null)
    {
      SetOCGContext(this.a, 0L);
      return;
    }
    SetOCGContext(this.a, paramContext.__GetHandle());
  }
  
  public void setOverprint(int paramInt)
    throws PDFNetException
  {
    SetOverprint(this.a, paramInt);
  }
  
  public void setPageBox(int paramInt)
    throws PDFNetException
  {
    SetPageBox(this.a, paramInt);
  }
  
  public void setPageTransparent(boolean paramBoolean)
    throws PDFNetException
  {
    SetPageTransparent(this.a, paramBoolean);
  }
  
  public void setPrintMode(boolean paramBoolean)
    throws PDFNetException
  {
    SetPrintMode(this.a, paramBoolean);
  }
  
  public void setRasterizerType(int paramInt)
    throws PDFNetException
  {
    SetRasterizerType(this.a, paramInt);
  }
  
  public void setRotate(int paramInt)
    throws PDFNetException
  {
    SetRotate(this.a, paramInt);
  }
  
  public void setThinLineAdjustment(boolean paramBoolean1, boolean paramBoolean2)
  {
    SetThinLineAdjustment(this.a, paramBoolean1, paramBoolean2);
  }
  
  public class IntBufferData
  {
    public int[] data;
    public int height = 0;
    public int stride = 0;
    public int width = 0;
    
    public IntBufferData() {}
  }
}
