package pdftron.PDF.Tools;

import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.PointF;
import android.graphics.RectF;
import android.os.Build.VERSION;
import android.util.Log;
import android.view.MotionEvent;
import android.widget.Toast;
import java.util.LinkedList;
import pdftron.PDF.Annot;
import pdftron.PDF.Annot.BorderStyle;
import pdftron.PDF.Annots.Markup;
import pdftron.PDF.Annots.Popup;
import pdftron.PDF.ColorPt;
import pdftron.PDF.PDFDoc;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.Page;
import pdftron.PDF.Rect;
import pdftron.PDF.TextExtractor;

final class b
  extends u
{
  private final float A = a(7.5F);
  private RectF a;
  private RectF b;
  private RectF c;
  private int d;
  private boolean e;
  private boolean f;
  private boolean g;
  private boolean h;
  private boolean u;
  private Paint v;
  private boolean w;
  private boolean x;
  private PointF[] y = new PointF[8];
  private PointF[] z = new PointF[8];
  
  public b(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
    int i = 0;
    while (i < 8)
    {
      this.y[i] = new PointF();
      this.z[i] = new PointF();
      i += 1;
    }
    this.v = new Paint();
    this.v.setAntiAlias(true);
    this.a = new RectF();
    this.b = new RectF();
    this.e = false;
    this.f = false;
    this.g = false;
    this.h = false;
    this.u = false;
    this.w = false;
    this.x = false;
  }
  
  private boolean a(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (this.c != null)
    {
      float f1 = this.y[2].x - this.y[0].x;
      float f2 = this.y[0].y - this.y[6].y;
      boolean bool1;
      if ((this.y[0].x < this.c.left) && (paramFloat1 < 0.0F))
      {
        this.y[0].x = this.c.left;
        this.y[6].x = this.y[0].x;
        if (paramBoolean)
        {
          this.y[2].x = (f1 + this.y[0].x);
          this.y[4].x = this.y[2].x;
        }
        bool1 = true;
      }
      for (;;)
      {
        boolean bool2;
        if ((this.y[0].y > this.c.bottom) && (paramFloat2 > 0.0F))
        {
          this.y[0].y = this.c.bottom;
          this.y[2].y = this.y[0].y;
          if (paramBoolean)
          {
            this.y[6].y = (this.y[0].y - f2);
            this.y[4].y = this.y[6].y;
          }
          bool2 = true;
        }
        do
        {
          do
          {
            return bool2;
            if ((this.y[2].x <= this.c.right) || (paramFloat1 <= 0.0F)) {
              break label492;
            }
            this.y[2].x = this.c.right;
            this.y[4].x = this.y[2].x;
            if (paramBoolean)
            {
              this.y[0].x = (this.y[2].x - f1);
              this.y[6].x = this.y[0].x;
            }
            bool1 = true;
            break;
            bool2 = bool1;
          } while (this.y[4].y >= this.c.top);
          bool2 = bool1;
        } while (paramFloat2 >= 0.0F);
        this.y[4].y = this.c.top;
        this.y[6].y = this.y[4].y;
        if (paramBoolean)
        {
          this.y[0].y = (f2 + this.y[4].y);
          this.y[2].y = this.y[0].y;
        }
        return true;
        label492:
        bool1 = false;
      }
    }
    return false;
  }
  
  private void b()
  {
    this.f = true;
    float f1 = this.m.left;
    float f2 = this.m.bottom;
    float f3 = this.m.right;
    float f4 = this.m.top;
    float f5 = this.i.getScrollX();
    float f6 = this.i.getScrollY();
    double[] arrayOfDouble = this.i.convPagePtToClientPt(f1, f4, this.l);
    this.y[0].x = ((float)arrayOfDouble[0] + f5);
    this.y[0].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt((f1 + f3) / 2.0F, f4, this.l);
    this.y[1].x = ((float)arrayOfDouble[0] + f5);
    this.y[1].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt(f3, f4, this.l);
    this.y[2].x = ((float)arrayOfDouble[0] + f5);
    this.y[2].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt(f3, (f2 + f4) / 2.0F, this.l);
    this.y[3].x = ((float)arrayOfDouble[0] + f5);
    this.y[3].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt(f3, f2, this.l);
    this.y[4].x = ((float)arrayOfDouble[0] + f5);
    this.y[4].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt((f1 + f3) / 2.0F, f2, this.l);
    this.y[5].x = ((float)arrayOfDouble[0] + f5);
    this.y[5].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt(f1, f2, this.l);
    this.y[6].x = ((float)arrayOfDouble[0] + f5);
    this.y[6].y = ((float)arrayOfDouble[1] + f6);
    arrayOfDouble = this.i.convPagePtToClientPt(f1, (f2 + f4) / 2.0F, this.l);
    this.y[7].x = ((float)arrayOfDouble[0] + f5);
    this.y[7].y = ((float)arrayOfDouble[1] + f6);
    this.a.left = (this.y[6].x - this.A);
    this.a.top = (this.y[6].y - this.A);
    this.a.right = (this.y[2].x + this.A);
    this.a.bottom = (this.y[2].y + this.A);
    int i = 0;
    while (i < 8)
    {
      this.z[i].set(this.y[i]);
      i += 1;
    }
  }
  
  public final void a()
  {
    boolean bool2 = false;
    super.a();
    this.o = new LinkedList();
    if (this.k != null) {}
    for (;;)
    {
      int i;
      try
      {
        this.i.lockDoc(true);
        if (this.k.getType() == 0)
        {
          bool1 = true;
          this.g = bool1;
          if ((this.k.getType() != 8) && (this.k.getType() != 9) && (this.k.getType() != 11))
          {
            bool1 = bool2;
            if (this.k.getType() != 10)
            {
              this.h = bool1;
              i = this.k.getType();
              if (!this.k.isMarkup()) {
                break label247;
              }
              this.o.add("Note");
              break label247;
              this.o.add("Color");
              if ((i != 8) && (i != 0)) {
                this.o.add("Thickness");
              }
              this.o.add("Delete");
              if (this.h) {
                this.o.add("Copy to Clipboard");
              }
              this.c = a(this.l);
            }
          }
        }
        else
        {
          bool1 = false;
          continue;
        }
        boolean bool1 = true;
      }
      catch (Exception localException)
      {
        return;
      }
      finally
      {
        this.i.unlockDoc();
      }
      continue;
      label247:
      if ((i != 3) && (i != 4) && (i != 5) && (i != 6) && (i != 14) && (i != 7) && (i != 9) && (i != 10) && (i != 11) && (i != 8)) {
        if (i != 0) {}
      }
    }
  }
  
  protected final void a(int paramInt, final String paramString)
  {
    int i = 0;
    super.a(paramInt, paramString);
    if (this.k != null) {}
    label879:
    label917:
    label920:
    for (;;)
    {
      Object localObject;
      try
      {
        this.i.lockDoc(true);
        paramString = new String(paramString).toLowerCase();
        if (paramString.equals("delete"))
        {
          this.j = 1;
          this.i.getDoc().getPage(this.l).annotRemove(this.k);
          this.i.update(this.k, this.l);
          this.k = null;
          this.i.unlockDoc();
          return;
        }
        if (paramString.equals("color"))
        {
          boolean bool = this.k.isMarkup();
          this.j = 2;
          paramInt = 255;
          paramString = this.k.getColorAsRGB();
          i = (int)Math.floor(paramString.get(0) * 255.0D + 0.5D);
          int j = (int)Math.floor(paramString.get(1) * 255.0D + 0.5D);
          int k = (int)Math.floor(paramString.get(2) * 255.0D + 0.5D);
          if (bool) {
            paramInt = (int)Math.floor(new Markup(this.k).getOpacity() * 255.0D + 0.5D);
          }
          paramInt = Color.argb(paramInt, i, j, k);
          paramString = new f(this.i.getContext(), paramInt);
          paramString.a(bool);
          paramString.setButton("OK", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              paramAnonymousInt = paramString.a();
              double d1 = Color.red(paramAnonymousInt) / 255.0D;
              double d2 = Color.green(paramAnonymousInt) / 255.0D;
              double d3 = Color.blue(paramAnonymousInt) / 255.0D;
              double d4 = Color.alpha(paramAnonymousInt) / 255.0D;
              try
              {
                b.this.i.lockDoc(true);
                paramAnonymousDialogInterface = new ColorPt(d1, d2, d3);
                b.this.k.setColor(paramAnonymousDialogInterface, 3);
                if (b.this.k.isMarkup()) {
                  new Markup(b.this.k).setOpacity(d4);
                }
                b.this.k.refreshAppearance();
                b.this.i.update(b.this.k, b.this.l);
              }
              catch (Exception paramAnonymousDialogInterface)
              {
                for (;;)
                {
                  b.this.i.unlockDoc();
                }
              }
              finally
              {
                b.this.i.unlockDoc();
              }
              paramAnonymousDialogInterface = b.this.i.getContext().getSharedPreferences("com_pdftron_pdfnet_pdfviewctrl_prefs_file", 0).edit();
              paramAnonymousDialogInterface.putInt("annotation_creation_color", paramAnonymousInt);
              paramAnonymousDialogInterface.commit();
              b.this.a(b.this.o, b.this.h());
            }
          });
          paramString.setButton2("Cancel", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              b.this.a(b.this.o, b.this.h());
            }
          });
          paramString.show();
          continue;
        }
      }
      catch (Exception paramString)
      {
        Log.v("PDFNet", paramString.toString());
        this.i.unlockDoc();
        continue;
        if (paramString.equals("note"))
        {
          Markup localMarkup = new Markup(this.k);
          localObject = localMarkup.getPopup();
          if (localObject != null)
          {
            paramString = (String)localObject;
            if (((Popup)localObject).isValid()) {}
          }
          else
          {
            paramString = Popup.create(this.i.getDoc(), this.k.getRect());
            localMarkup.setPopup(paramString);
          }
          localObject = new e(this.i.getContext(), paramString.getContents());
          ((e)localObject).setButton("OK", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              try
              {
                b.this.i.lockDoc(true);
                paramString.setContents(this.b.a());
                b.this.i.unlockDoc();
              }
              catch (Exception paramAnonymousDialogInterface)
              {
                for (;;)
                {
                  paramAnonymousDialogInterface = paramAnonymousDialogInterface;
                  b.this.i.unlockDoc();
                }
              }
              finally
              {
                paramAnonymousDialogInterface = finally;
                b.this.i.unlockDoc();
                throw paramAnonymousDialogInterface;
              }
              b.this.a(b.this.o, b.this.h());
            }
          });
          ((e)localObject).setButton2("Cancel", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              b.this.a(b.this.o, b.this.h());
            }
          });
          ((e)localObject).show();
          continue;
        }
      }
      finally
      {
        this.i.unlockDoc();
      }
      if (paramString.equals("thickness"))
      {
        if (Build.VERSION.SDK_INT < 11)
        {
          paramString = new LinkedList();
          paramString.add("0.5pt");
          paramString.add("1pt");
          paramString.add("2pt");
          paramString.add("3pt");
          paramString.add("4pt");
          paramString.add("5pt");
          paramString.add("7pt");
          paramString.add("9pt");
          a(paramString, h());
        }
        else
        {
          paramString = this.k.getBorderStyle();
          localObject = new i(this.i.getContext(), (float)paramString.getWidth());
          ((i)localObject).setButton("OK", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              try
              {
                b.this.i.lockDoc(true);
                float f = this.a.a();
                paramString.setWidth(f);
                b.this.k.setBorderStyle(paramString);
                b.this.k.refreshAppearance();
                b.this.i.update();
                paramAnonymousDialogInterface = b.this.i.getContext().getSharedPreferences("com_pdftron_pdfnet_pdfviewctrl_prefs_file", 0).edit();
                paramAnonymousDialogInterface.putFloat("annotation_creation_thickness", f);
                paramAnonymousDialogInterface.commit();
                b.this.i.unlockDoc();
              }
              catch (Exception paramAnonymousDialogInterface)
              {
                for (;;)
                {
                  paramAnonymousDialogInterface = paramAnonymousDialogInterface;
                  b.this.i.unlockDoc();
                }
              }
              finally
              {
                paramAnonymousDialogInterface = finally;
                b.this.i.unlockDoc();
                throw paramAnonymousDialogInterface;
              }
              b.this.a(b.this.o, b.this.h());
            }
          });
          ((i)localObject).setButton2("Cancel", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              b.this.a(b.this.o, b.this.h());
            }
          });
          ((i)localObject).show();
        }
      }
      else if (paramString.endsWith("pt"))
      {
        float f1 = Float.valueOf(paramString.replace("pt", "")).floatValue();
        paramString = this.k.getBorderStyle();
        paramString.setWidth(f1);
        this.k.setBorderStyle(paramString);
        this.k.refreshAppearance();
        this.i.update();
        paramString = this.i.getContext().getSharedPreferences("com_pdftron_pdfnet_pdfviewctrl_prefs_file", 0).edit();
        paramString.putFloat("annotation_creation_thickness", f1);
        paramString.commit();
        a(this.o, h());
      }
      else if (paramString.equals("copy to clipboard"))
      {
        paramString = new TextExtractor();
        localObject = this.i.getDoc().getPage(this.l);
        paramInt = i;
        if (localObject != null)
        {
          paramString.begin((Page)localObject);
          paramString = paramString.getTextUnderAnnot(this.k);
          if (Build.VERSION.SDK_INT >= 11) {
            break label879;
          }
          localObject = (android.text.ClipboardManager)this.i.getContext().getSystemService("clipboard");
          if (localObject == null) {
            break label917;
          }
          ((android.text.ClipboardManager)localObject).setText(paramString);
          break label917;
        }
        for (;;)
        {
          if (paramInt != 0) {
            break label920;
          }
          Toast.makeText(this.i.getContext(), "failed to copy text", 0).show();
          break;
          localObject = (android.content.ClipboardManager)this.i.getContext().getSystemService("clipboard");
          if (localObject != null)
          {
            ((android.content.ClipboardManager)localObject).setText(paramString);
            break label917;
            this.j = 1;
            return;
          }
          paramInt = 1;
        }
      }
    }
  }
  
  public final void a(boolean paramBoolean)
  {
    this.w = true;
  }
  
  public final int getMode()
  {
    return 2;
  }
  
  public final boolean onDown(MotionEvent paramMotionEvent)
  {
    super.onDown(paramMotionEvent);
    float f4 = paramMotionEvent.getX() + this.i.getScrollX();
    float f5 = paramMotionEvent.getY() + this.i.getScrollY();
    this.d = -1;
    float f6 = this.A;
    float f1 = -1.0F;
    int i = 0;
    while (i < 8)
    {
      float f2 = f1;
      if (!this.g)
      {
        f2 = f1;
        if (!this.h)
        {
          f2 = this.y[i].x;
          float f3 = this.y[i].y;
          f3 = (float)Math.sqrt((f4 - f2) * (f4 - f2) + (f5 - f3) * (f5 - f3));
          f2 = f1;
          if (f3 <= f6 * 2.25F) {
            if (f3 >= f1)
            {
              f2 = f1;
              if (f1 >= 0.0F) {}
            }
            else
            {
              this.d = i;
              f2 = f3;
            }
          }
        }
      }
      this.z[i].set(this.y[i]);
      i += 1;
      f1 = f2;
    }
    if ((!this.h) && (this.d < 0) && (this.a.contains(f4, f5))) {
      this.d = 8;
    }
    if (this.k != null) {
      this.c = a(this.l);
    }
    return false;
  }
  
  public final void onDraw(Canvas paramCanvas, Matrix paramMatrix)
  {
    super.onDraw(paramCanvas, paramMatrix);
    float f1 = this.y[6].x;
    float f2 = this.y[6].y;
    float f3 = this.y[2].x;
    float f4 = this.y[2].y;
    float f5 = this.y[1].x;
    float f6 = this.y[7].y;
    if ((this.k != null) && (f3 - f1 > 0.0F) && (f4 - f2 > 0.0F))
    {
      this.v.setColor(Color.rgb(128, 128, 128));
      this.v.setAlpha(128);
      this.v.setStyle(Paint.Style.FILL);
      paramCanvas.drawRect(f1, f2, f3, f4, this.v);
      if ((!this.g) && (!this.h))
      {
        this.v.setColor(Color.rgb(255, 175, 0));
        this.v.setAlpha(255);
        paramCanvas.drawCircle(f1, f4, this.A, this.v);
        paramCanvas.drawCircle(f5, f4, this.A, this.v);
        paramCanvas.drawCircle(f3, f4, this.A, this.v);
        paramCanvas.drawCircle(f3, f6, this.A, this.v);
        paramCanvas.drawCircle(f3, f2, this.A, this.v);
        paramCanvas.drawCircle(f5, f2, this.A, this.v);
        paramCanvas.drawCircle(f1, f2, this.A, this.v);
        paramCanvas.drawCircle(f1, f6, this.A, this.v);
        this.v.setColor(Color.rgb(100, 100, 100));
        this.v.setStyle(Paint.Style.STROKE);
        paramCanvas.drawCircle(f1, f4, this.A, this.v);
        paramCanvas.drawCircle(f5, f4, this.A, this.v);
        paramCanvas.drawCircle(f3, f4, this.A, this.v);
        paramCanvas.drawCircle(f3, f6, this.A, this.v);
        paramCanvas.drawCircle(f3, f2, this.A, this.v);
        paramCanvas.drawCircle(f5, f2, this.A, this.v);
        paramCanvas.drawCircle(f1, f2, this.A, this.v);
        paramCanvas.drawCircle(f1, f6, this.A, this.v);
      }
    }
  }
  
  public final boolean onFlingStop()
  {
    super.onFlingStop();
    if (this.k != null)
    {
      if (!this.f) {
        b();
      }
      if (!this.w) {
        a(this.o, h());
      }
      this.i.invalidate((int)Math.floor(this.a.left), (int)Math.floor(this.a.top), (int)Math.ceil(this.a.right), (int)Math.ceil(this.a.bottom));
    }
    return false;
  }
  
  public final void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    if (this.k != null)
    {
      if ((this.i.isContinuousPagePresentationMode(this.i.getPagePresentationMode())) || (this.l == this.i.getCurrentPage())) {
        break label80;
      }
      this.k = null;
      this.j = 1;
      b();
      this.d = -1;
      if (e()) {
        d();
      }
    }
    label80:
    do
    {
      return;
      b();
    } while ((!e()) || (!paramBoolean));
    d();
    a(this.o, h());
  }
  
  public final boolean onLongPress(MotionEvent paramMotionEvent)
  {
    super.onLongPress(paramMotionEvent);
    if (this.k != null)
    {
      if (this.d < 0) {
        break label92;
      }
      this.j = 2;
      b();
      this.d = 8;
      this.i.invalidate((int)Math.floor(this.a.left), (int)Math.floor(this.a.top), (int)Math.ceil(this.a.right), (int)Math.ceil(this.a.bottom));
    }
    for (;;)
    {
      return false;
      label92:
      this.k = null;
      this.j = 1;
      b();
      this.d = -1;
      this.i.invalidate((int)Math.floor(this.a.left), (int)Math.floor(this.a.top), (int)Math.ceil(this.a.right), (int)Math.ceil(this.a.bottom));
    }
  }
  
  public final boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    if (this.u) {
      return false;
    }
    if (this.d >= 0)
    {
      paramFloat1 = paramMotionEvent2.getX() - paramMotionEvent1.getX();
      paramFloat2 = paramMotionEvent2.getY() - paramMotionEvent1.getY();
      float f1 = 2.0F * this.A;
      this.b.set(this.a);
      int i;
      if (this.d == 8)
      {
        i = 0;
        while (i < 8)
        {
          this.y[i].x = (this.z[i].x + paramFloat1);
          this.y[i].y = (this.z[i].y + paramFloat2);
          i += 1;
        }
        if (a(paramFloat1, paramFloat2, true))
        {
          this.y[7].x = this.y[0].x;
          this.y[7].y = ((this.y[0].y + this.y[6].y) / 2.0F);
          this.y[1].x = ((this.y[0].x + this.y[2].x) / 2.0F);
          this.y[1].y = this.y[0].y;
          this.y[3].x = this.y[2].x;
          this.y[3].y = ((this.y[2].y + this.y[4].y) / 2.0F);
          this.y[5].x = ((this.y[6].x + this.y[4].x) / 2.0F);
          this.y[5].y = this.y[6].y;
        }
        this.a.left = (this.y[6].x - this.A);
        this.a.top = (this.y[6].y - this.A);
        this.a.right = (this.y[2].x + this.A);
        this.a.bottom = (this.y[2].y + this.A);
        this.e = true;
        paramFloat1 = Math.min(this.b.left, this.a.left);
        paramFloat2 = Math.max(this.b.right, this.a.right);
        f1 = Math.min(this.b.top, this.a.top);
        float f2 = Math.max(this.b.bottom, this.a.bottom);
        this.i.invalidate((int)paramFloat1 - 1, (int)f1 - 1, (int)Math.ceil(paramFloat2) + 1, (int)Math.ceil(f2) + 1);
        return true;
      }
      switch (this.d)
      {
      default: 
        label588:
        i = 0;
      }
      while (i != 0)
      {
        a(paramFloat1, paramFloat2, false);
        this.y[7].x = this.y[0].x;
        this.y[7].y = ((this.y[0].y + this.y[6].y) / 2.0F);
        this.y[1].x = ((this.y[0].x + this.y[2].x) / 2.0F);
        this.y[1].y = this.y[0].y;
        this.y[3].x = this.y[2].x;
        this.y[3].y = ((this.y[2].y + this.y[4].y) / 2.0F);
        this.y[5].x = ((this.y[6].x + this.y[4].x) / 2.0F);
        this.y[5].y = this.y[6].y;
        this.a.left = (this.y[6].x - this.A);
        this.a.top = (this.y[6].y - this.A);
        this.a.right = (this.y[2].x + this.A);
        this.a.bottom = (this.y[2].y + this.A);
        this.e = true;
        break;
        if ((this.z[0].x + paramFloat1 >= this.z[2].x - f1) || (this.z[0].y + paramFloat2 <= f1 + this.z[6].y)) {
          break label588;
        }
        this.y[0].x = (this.z[0].x + paramFloat1);
        this.y[6].x = (this.z[6].x + paramFloat1);
        this.y[0].y = (this.z[0].y + paramFloat2);
        this.y[2].y = (this.z[2].y + paramFloat2);
        i = 1;
        continue;
        if (this.z[0].y + paramFloat2 <= f1 + this.z[6].y) {
          break label588;
        }
        this.y[0].y = (this.z[0].y + paramFloat2);
        this.y[2].y = (this.z[2].y + paramFloat2);
        i = 1;
        continue;
        if ((this.z[0].x >= this.z[2].x + paramFloat1 - f1) || (this.z[0].y + paramFloat2 <= f1 + this.z[6].y)) {
          break label588;
        }
        this.y[2].x = (this.z[2].x + paramFloat1);
        this.y[4].x = (this.z[4].x + paramFloat1);
        this.y[2].y = (this.z[2].y + paramFloat2);
        this.y[0].y = (this.z[0].y + paramFloat2);
        i = 1;
        continue;
        if (this.z[0].x >= this.z[2].x + paramFloat1 - f1) {
          break label588;
        }
        this.y[2].x = (this.z[2].x + paramFloat1);
        this.y[4].x = (this.z[4].x + paramFloat1);
        i = 1;
        continue;
        if ((this.z[0].x >= this.z[2].x + paramFloat1 - f1) || (this.z[0].y <= f1 + (this.z[6].y + paramFloat2))) {
          break label588;
        }
        this.y[2].x = (this.z[2].x + paramFloat1);
        this.y[4].x = (this.z[4].x + paramFloat1);
        this.y[4].y = (this.z[4].y + paramFloat2);
        this.y[6].y = (this.z[6].y + paramFloat2);
        i = 1;
        continue;
        if (this.z[0].y <= f1 + (this.z[6].y + paramFloat2)) {
          break label588;
        }
        this.y[4].y = (this.z[4].y + paramFloat2);
        this.y[6].y = (this.z[6].y + paramFloat2);
        i = 1;
        continue;
        if ((this.z[0].x + paramFloat1 >= this.z[2].x - f1) || (this.z[0].y <= f1 + (this.z[6].y + paramFloat2))) {
          break label588;
        }
        this.y[6].x = (this.z[6].x + paramFloat1);
        this.y[0].x = (this.z[0].x + paramFloat1);
        this.y[4].y = (this.z[4].y + paramFloat2);
        this.y[6].y = (this.z[6].y + paramFloat2);
        i = 1;
        continue;
        if (this.z[0].x + paramFloat1 >= this.z[2].x - f1) {
          break label588;
        }
        this.y[6].x = (this.z[6].x + paramFloat1);
        this.y[0].x = (this.z[0].x + paramFloat1);
        i = 1;
      }
    }
    f();
    return false;
  }
  
  public final void onPageTurning(int paramInt1, int paramInt2)
  {
    super.onPageTurning(paramInt1, paramInt2);
    this.j = 1;
  }
  
  public final boolean onScaleEnd(float paramFloat1, float paramFloat2)
  {
    super.onScaleEnd(paramFloat1, paramFloat2);
    if (this.k != null)
    {
      this.u = true;
      b();
    }
    return false;
  }
  
  public final boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    super.onSingleTapConfirmed(paramMotionEvent);
    int i = (int)(paramMotionEvent.getX() + 0.5D);
    int j = (int)(paramMotionEvent.getY() + 0.5D);
    if (this.k != null)
    {
      if ((!a(i, j)) && (!this.w)) {
        break label139;
      }
      this.j = 2;
      b();
      this.i.invalidate((int)Math.floor(this.a.left), (int)Math.floor(this.a.top), (int)Math.ceil(this.a.right), (int)Math.ceil(this.a.bottom));
      if (!this.w) {
        a(this.o, h());
      }
    }
    for (;;)
    {
      return false;
      label139:
      this.k = null;
      this.j = 1;
      b();
      this.i.invalidate((int)Math.floor(this.a.left), (int)Math.floor(this.a.top), (int)Math.ceil(this.a.right), (int)Math.ceil(this.a.bottom));
    }
  }
  
  public final boolean onUp(final MotionEvent paramMotionEvent, int paramInt)
  {
    super.onUp(paramMotionEvent, paramInt);
    if (this.x) {
      return false;
    }
    this.j = 2;
    this.u = false;
    if ((this.k != null) && ((this.e) || (!this.f) || (paramInt == 1) || (paramInt == 2) || (paramInt == 4)))
    {
      if (!this.f) {
        b();
      }
      try
      {
        this.i.lockDoc(true);
        Object localObject1;
        Object localObject2;
        if (this.e)
        {
          this.e = false;
          float f1 = this.y[6].x;
          float f2 = this.i.getScrollX();
          float f3 = this.y[6].y;
          float f4 = this.i.getScrollY();
          float f5 = this.y[2].x;
          float f6 = this.i.getScrollX();
          float f7 = this.y[2].y;
          float f8 = this.i.getScrollY();
          paramMotionEvent = this.i.convClientPtToPagePt(f1 - f2, f3 - f4, this.l);
          localObject1 = this.i.convClientPtToPagePt(f5 - f6, f7 - f8, this.l);
          paramMotionEvent = new Rect(paramMotionEvent[0], paramMotionEvent[1], localObject1[0], localObject1[1]);
          paramMotionEvent.normalize();
          localObject2 = this.k.getRect();
          localObject1 = this.i.convPagePtToClientPt(((Rect)localObject2).getX1(), ((Rect)localObject2).getY1(), this.l);
          localObject2 = this.i.convPagePtToClientPt(((Rect)localObject2).getX2(), ((Rect)localObject2).getY2(), this.l);
          localObject1 = new Rect(localObject1[0], localObject1[1], localObject2[0], localObject2[1]);
          ((Rect)localObject1).normalize();
          this.k.resize(paramMotionEvent);
          this.k.refreshAppearance();
          g();
          this.i.update((Rect)localObject1);
          this.i.update(this.k, this.l);
        }
        while ((this.w) && (!this.x))
        {
          localObject2 = new Markup(this.k);
          localObject1 = ((Markup)localObject2).getPopup();
          if (localObject1 != null)
          {
            paramMotionEvent = (MotionEvent)localObject1;
            if (((Popup)localObject1).isValid()) {}
          }
          else
          {
            paramMotionEvent = Popup.create(this.i.getDoc(), this.k.getRect());
            ((Markup)localObject2).setPopup(paramMotionEvent);
          }
          localObject1 = new e(this.i.getContext(), paramMotionEvent.getContents());
          ((e)localObject1).setButton("OK", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              try
              {
                b.this.i.lockDoc(true);
                paramMotionEvent.setContents(this.b.a());
                b.this.i.unlockDoc();
              }
              catch (Exception paramAnonymousDialogInterface)
              {
                for (;;)
                {
                  paramAnonymousDialogInterface = paramAnonymousDialogInterface;
                  b.this.i.unlockDoc();
                }
              }
              finally
              {
                paramAnonymousDialogInterface = finally;
                b.this.i.unlockDoc();
                throw paramAnonymousDialogInterface;
              }
              b.a(b.this, false);
              b.b(b.this, false);
              b.this.a(b.this.o, b.this.h());
            }
          });
          ((e)localObject1).setButton2("Cancel", new DialogInterface.OnClickListener()
          {
            public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
            {
              b.a(b.this, false);
              b.b(b.this, false);
              b.this.a(b.this.o, b.this.h());
            }
          });
          ((e)localObject1).show();
          this.x = true;
          return false;
          if ((paramInt == 2) || (paramInt == 4)) {
            b();
          }
        }
        return false;
      }
      catch (Exception paramMotionEvent)
      {
        this.i.unlockDoc();
        for (;;)
        {
          if ((paramInt == 1) || (paramInt == 2) || (paramInt == 4)) {
            a(this.o, h());
          }
          this.i.waitForRendering();
          if ((paramInt != 1) && (paramInt != 3)) {
            break;
          }
          return true;
          this.i.unlockDoc();
        }
      }
      finally
      {
        this.i.unlockDoc();
      }
    }
    return false;
  }
}
