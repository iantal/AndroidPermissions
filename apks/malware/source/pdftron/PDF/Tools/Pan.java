package pdftron.PDF.Tools;

import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import android.widget.Toast;
import java.util.LinkedList;
import pdftron.PDF.Annot;
import pdftron.PDF.PDFDoc;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.PDFViewCtrl.Selection;
import pdftron.PDF.PDFViewCtrl.TextSearchListener;

final class Pan
  extends u
{
  private b a;
  private a b;
  private Paint c = new Paint();
  
  public Pan(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
    this.c.setAntiAlias(true);
    this.a = new b(paramPDFViewCtrl, 1);
    this.b = new a(paramPDFViewCtrl, 2);
    this.i.setBuiltInPageSlidingEnabled(true);
  }
  
  private void a(int paramInt1, int paramInt2)
  {
    this.k = null;
    this.l = 0;
    this.i.cancelFindText();
    try
    {
      this.i.lockDoc(true);
      Annot localAnnot = this.i.getAnnotationAt(paramInt1, paramInt2);
      if ((localAnnot != null) && (localAnnot.isValid()))
      {
        this.k = localAnnot;
        g();
      }
      return;
    }
    catch (Exception localException) {}finally
    {
      this.i.unlockDoc();
    }
  }
  
  public final void a()
  {
    this.o = new LinkedList();
    this.o.add("Line");
    this.o.add("Arrow");
    this.o.add("Rectangle");
    this.o.add("Oval");
    this.o.add("Freehand");
    this.o.add("Sticky Note");
  }
  
  protected final void a(int paramInt, String paramString)
  {
    paramString = new String(paramString).toLowerCase();
    if (paramString.equals("line")) {
      this.j = 3;
    }
    do
    {
      return;
      if (paramString.equals("arrow"))
      {
        this.j = 4;
        return;
      }
      if (paramString.equals("rectangle"))
      {
        this.j = 5;
        return;
      }
      if (paramString.equals("oval"))
      {
        this.j = 6;
        return;
      }
      if (paramString.equals("freehand"))
      {
        this.j = 7;
        return;
      }
    } while (!paramString.equals("sticky note"));
    this.j = 8;
  }
  
  public final int getMode()
  {
    return 1;
  }
  
  public final void onClose()
  {
    super.onClose();
    this.a.dismiss();
    this.b.dismiss();
  }
  
  public final void onDraw(Canvas paramCanvas, Matrix paramMatrix)
  {
    this.s = 0.0F;
    if ((this.b != null) && (this.b.isShowing()))
    {
      this.s = this.t;
      if (this.s < 0.0F) {
        this.s = 0.0F;
      }
    }
    super.onDraw(paramCanvas, paramMatrix);
    if (this.a != null)
    {
      paramMatrix = this.a.b();
      if (!paramMatrix.isEmpty())
      {
        this.c.setStyle(Paint.Style.FILL);
        this.c.setColor(Color.rgb(0, 100, 175));
        this.c.setAlpha(127);
        paramCanvas.drawPath(paramMatrix, this.c);
      }
    }
  }
  
  public final void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if ((this.a != null) && (this.a.isShowing()))
    {
      if (!this.a.b().isEmpty()) {
        this.a.c();
      }
      this.i.invalidate();
    }
  }
  
  public final boolean onLongPress(MotionEvent paramMotionEvent)
  {
    int j = (int)(paramMotionEvent.getX() + 0.5D);
    int k = (int)(paramMotionEvent.getY() + 0.5D);
    a(j, k);
    for (;;)
    {
      int i;
      float f2;
      try
      {
        this.i.lockDoc(true);
        if ((this.k != null) && (this.k.getType() == 1))
        {
          this.j = 9;
          this.l = this.i.getPageNumberFromClientPt(j, k);
          this.i.unlockDoc();
          this.p = false;
          return false;
        }
        if ((this.k != null) && (this.k.getType() == 19))
        {
          i = 1;
          f1 = paramMotionEvent.getX();
          f2 = paramMotionEvent.getY();
          if (f1 < 0.5F) {
            continue;
          }
          f1 -= 0.5F;
          break label327;
          if ((i != 0) || (!this.i.selectByRect(f1, f2, f1 + 1.0F, f2 + 1.0F))) {
            continue;
          }
          this.j = 10;
        }
      }
      catch (Exception paramMotionEvent)
      {
        this.i.unlockDoc();
        continue;
        i = 0;
        continue;
        float f1 = 0.0F;
        break label327;
        f2 = 0.0F;
        continue;
        if ((i == 0) && (this.k != null))
        {
          this.j = 2;
          this.l = this.i.getPageNumberFromClientPt(j, k);
          continue;
        }
      }
      finally
      {
        this.i.unlockDoc();
      }
      if (i != 0)
      {
        this.j = 11;
        this.l = this.i.getPageNumberFromClientPt(j, k);
      }
      else
      {
        this.j = 1;
        paramMotionEvent = new RectF(j - 5, k, j + 5, k + 1);
        a(this.o, paramMotionEvent);
        continue;
        label327:
        if (f2 >= 0.5F) {
          f2 -= 0.5F;
        }
      }
    }
  }
  
  public final boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    super.onMove(paramMotionEvent1, paramMotionEvent2, paramFloat1, paramFloat2);
    this.p = false;
    return false;
  }
  
  public final boolean onScaleBegin(float paramFloat1, float paramFloat2)
  {
    return false;
  }
  
  public final boolean onScaleEnd(float paramFloat1, float paramFloat2)
  {
    super.onScaleEnd(paramFloat1, paramFloat2);
    this.p = false;
    return false;
  }
  
  public final boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    super.onSingleTapConfirmed(paramMotionEvent);
    f();
    int i = (int)(paramMotionEvent.getX() + 0.5D);
    int j = (int)(paramMotionEvent.getY() + 0.5D);
    a(i, j);
    if (this.k != null) {}
    for (;;)
    {
      try
      {
        this.i.lockDoc(true);
        if (this.k.getType() == 1)
        {
          this.j = 9;
          this.l = this.i.getPageNumberFromClientPt(i, j);
          this.i.unlockDoc();
          this.i.invalidate();
          this.p = false;
          return false;
        }
        if (this.k.getType() == 19)
        {
          this.j = 11;
          continue;
        }
      }
      catch (Exception paramMotionEvent)
      {
        this.i.unlockDoc();
        continue;
        this.j = 2;
        continue;
      }
      finally
      {
        this.i.unlockDoc();
      }
      this.j = 1;
      if (!this.p)
      {
        float f1 = this.i.getHeight();
        float f2 = f1 / 4.0F;
        if (j <= f2) {
          this.a.a();
        } else if (j >= f1 - f2) {
          this.b.a();
        }
      }
    }
  }
  
  public final boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    super.onUp(paramMotionEvent, paramInt);
    this.p = false;
    return false;
  }
  
  class Toolbar
    extends PopupWindow
    implements PopupWindow.OnDismissListener
  {
    protected Context a;
    protected PDFViewCtrl b;
    protected EditText c;
    private int d;
    
    public Toolbar(PDFViewCtrl paramPDFViewCtrl, int paramInt)
    {
      super();
      this.b = paramPDFViewCtrl;
      this.a = this.b.getContext();
      this.d = paramInt;
      setOnDismissListener(this);
      this.c = new EditText(this.a);
      this.c.setText("");
      this.c.setTextSize(2, 15.0F);
      this.c.setGravity(16);
      this.c.setMaxEms(0);
      this.c.setVisibility(4);
      this.c.setFocusable(false);
      setWidth(-1);
      setHeight(-2);
      setFocusable(true);
      setTouchable(true);
      setOutsideTouchable(true);
      setAnimationStyle(-1);
    }
    
    public void a()
    {
      int[] arrayOfInt = new int[2];
      this.b.getLocationOnScreen(arrayOfInt);
      setWidth(this.b.getWidth());
      if (this.d == 1) {
        showAtLocation(this.b, 48, arrayOfInt[0], arrayOfInt[1]);
      }
      while (this.d != 2) {
        return;
      }
      showAtLocation(this.b, 48, arrayOfInt[0], arrayOfInt[1] + this.b.getHeight() - (int)Pan.this.t);
    }
    
    public void onDismiss() {}
    
    public class TButton
      extends Button
    {
      public static final int TYPE_NEXT_PAGE = 5;
      public static final int TYPE_NEXT_SEARCH = 1;
      public static final int TYPE_PREV_PAGE = 4;
      public static final int TYPE_PREV_SEARCH = 2;
      public static final int TYPE_SETTING_SEARCH = 3;
      private Paint a;
      private Path b;
      private int c;
      
      public TButton(Context paramContext, int paramInt)
      {
        super();
        this.c = paramInt;
        this.a = new Paint();
        this.a.setAntiAlias(true);
        this.b = new Path();
      }
      
      protected void onDraw(Canvas paramCanvas)
      {
        super.onDraw(paramCanvas);
        paramCanvas.drawPath(this.b, this.a);
      }
      
      protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
      {
        paramInt1 = getWidth();
        paramInt2 = getHeight();
        float f = Math.min(paramInt1, paramInt2) / 4.0F;
        this.b.reset();
        if (this.c == 2)
        {
          this.b.moveTo(f, paramInt2 - f);
          this.b.rLineTo(f * 2.0F, 0.0F);
          this.b.rLineTo(-f, f * -2.0F);
          this.b.close();
        }
        do
        {
          do
          {
            return;
            if (this.c == 1)
            {
              this.b.moveTo(f, f);
              this.b.rLineTo(f * 2.0F, 0.0F);
              this.b.rLineTo(-f, f * 2.0F);
              this.b.close();
              return;
            }
          } while (this.c == 3);
          if (this.c == 4)
          {
            this.b.moveTo(f, paramInt2 - f);
            this.b.rLineTo(f * 2.0F, 0.0F);
            this.b.rLineTo(-f, f * -2.0F);
            this.b.close();
            return;
          }
        } while (this.c != 5);
        this.b.moveTo(f, f);
        this.b.rLineTo(f * 2.0F, 0.0F);
        this.b.rLineTo(-f, f * 2.0F);
        this.b.close();
      }
      
      protected void onMeasure(int paramInt1, int paramInt2)
      {
        paramInt1 = Pan.Toolbar.this.c.getHeight();
        setMeasuredDimension(paramInt1, paramInt1);
      }
    }
  }
  
  final class a
    extends Pan.Toolbar
    implements View.OnClickListener, SeekBar.OnSeekBarChangeListener
  {
    private TextView d;
    private SeekBar e;
    private Pan.Toolbar.TButton f;
    private Pan.Toolbar.TButton g;
    private boolean h;
    
    public a(PDFViewCtrl paramPDFViewCtrl, int paramInt)
    {
      super(paramPDFViewCtrl, 2);
      setTouchInterceptor(new View.OnTouchListener()
      {
        public final boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
        {
          if (paramAnonymousMotionEvent.getAction() == 4)
          {
            Pan.a.this.dismiss();
            return true;
          }
          return false;
        }
      });
      this.f = new Pan.Toolbar.TButton(this, this.a, 4);
      this.f.setGravity(16);
      this.f.setOnClickListener(this);
      this.g = new Pan.Toolbar.TButton(this, this.a, 5);
      this.g.setGravity(16);
      this.g.setOnClickListener(this);
      this.d = new TextView(this.a);
      this.d.setTextSize(2, 15.0F);
      this.e = new SeekBar(this.a);
      this.e.setOnSeekBarChangeListener(this);
      this.h = false;
      paramPDFViewCtrl = new LinearLayout(this.a);
      this$1 = new LinearLayout.LayoutParams(-2, -1);
      paramPDFViewCtrl.addView(this.f, Pan.this);
      paramPDFViewCtrl.addView(this.g, Pan.this);
      this$1 = new LinearLayout(this.a);
      Pan.this.setId(1);
      Pan.this.addView(paramPDFViewCtrl);
      Pan.this.addView(this.c);
      Pan.this.addView(this.d);
      paramPDFViewCtrl = new RelativeLayout.LayoutParams(-2, -2);
      paramPDFViewCtrl.addRule(11, -1);
      paramPDFViewCtrl.addRule(15, -1);
      RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
      localLayoutParams.addRule(9, -1);
      localLayoutParams.addRule(0, Pan.this.getId());
      localLayoutParams.addRule(15, -1);
      RelativeLayout localRelativeLayout = new RelativeLayout(this.a);
      localRelativeLayout.addView(Pan.this, paramPDFViewCtrl);
      localRelativeLayout.addView(this.e, localLayoutParams);
      setContentView(localRelativeLayout);
    }
    
    public final void a()
    {
      boolean bool2 = true;
      Object localObject = this.b.getDoc();
      if (localObject != null) {}
      for (;;)
      {
        try
        {
          j = ((PDFDoc)localObject).getPageCount();
          this.h = true;
          this.e.setMax(j - 1);
          this.h = false;
          k = this.b.getCurrentPage();
          this.e.setProgress(k - 1);
          localObject = ((PDFDoc)localObject).getFileName();
          if ((localObject == null) || (((String)localObject).length() <= 0)) {
            continue;
          }
          localObject = ((String)localObject).substring(((String)localObject).lastIndexOf('/') + 1);
          this.d.setText((CharSequence)localObject);
          k = this.b.getCurrentPage();
          localObject = this.f;
          if (k <= 1) {
            continue;
          }
          bool1 = true;
        }
        catch (Exception localException)
        {
          int j;
          int k;
          continue;
          boolean bool1 = false;
          continue;
          bool1 = false;
          continue;
        }
        ((Pan.Toolbar.TButton)localObject).setEnabled(bool1);
        localObject = this.g;
        if (k >= j) {
          continue;
        }
        bool1 = bool2;
        ((Pan.Toolbar.TButton)localObject).setEnabled(bool1);
        super.a();
        return;
        this.d.setText("[no file name]");
      }
    }
    
    public final void onClick(View paramView)
    {
      if (paramView == this.f)
      {
        this.b.gotoPreviousPage();
        this.e.setProgress(this.b.getCurrentPage() - 1);
      }
      while (paramView != this.g) {
        return;
      }
      this.b.gotoNextPage();
      this.e.setProgress(this.b.getCurrentPage() - 1);
    }
    
    public final void onDismiss()
    {
      this.b.invalidate();
    }
    
    /* Error */
    public final void onProgressChanged(SeekBar paramSeekBar, int paramInt, boolean paramBoolean)
    {
      // Byte code:
      //   0: iconst_1
      //   1: istore 5
      //   3: aload_1
      //   4: aload_0
      //   5: getfield 74	pdftron/PDF/Tools/Pan$a:e	Landroid/widget/SeekBar;
      //   8: if_acmpne +110 -> 118
      //   11: aload_0
      //   12: getfield 80	pdftron/PDF/Tools/Pan$a:h	Z
      //   15: ifne +103 -> 118
      //   18: aload_0
      //   19: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   22: iconst_1
      //   23: invokevirtual 193	pdftron/PDF/PDFViewCtrl:lockDoc	(Z)V
      //   26: aload_0
      //   27: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   30: invokevirtual 133	pdftron/PDF/PDFViewCtrl:getDoc	()Lpdftron/PDF/PDFDoc;
      //   33: astore_1
      //   34: aload_1
      //   35: ifnull +76 -> 111
      //   38: iload_3
      //   39: ifeq +14 -> 53
      //   42: aload_0
      //   43: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   46: iload_2
      //   47: iconst_1
      //   48: iadd
      //   49: invokevirtual 197	pdftron/PDF/PDFViewCtrl:setCurrentPage	(I)Z
      //   52: pop
      //   53: aload_0
      //   54: getfield 28	pdftron/PDF/Tools/Pan$a:i	Lpdftron/PDF/Tools/Pan;
      //   57: invokevirtual 199	pdftron/PDF/Tools/Pan:f	()V
      //   60: aload_1
      //   61: invokevirtual 138	pdftron/PDF/PDFDoc:getPageCount	()I
      //   64: istore_2
      //   65: aload_0
      //   66: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   69: invokevirtual 144	pdftron/PDF/PDFViewCtrl:getCurrentPage	()I
      //   72: istore 4
      //   74: aload_0
      //   75: getfield 47	pdftron/PDF/Tools/Pan$a:f	Lpdftron/PDF/Tools/Pan$Toolbar$TButton;
      //   78: astore_1
      //   79: iload 4
      //   81: iconst_1
      //   82: if_icmple +37 -> 119
      //   85: iconst_1
      //   86: istore_3
      //   87: aload_1
      //   88: iload_3
      //   89: invokevirtual 172	pdftron/PDF/Tools/Pan$Toolbar$TButton:setEnabled	(Z)V
      //   92: aload_0
      //   93: getfield 57	pdftron/PDF/Tools/Pan$a:g	Lpdftron/PDF/Tools/Pan$Toolbar$TButton;
      //   96: astore_1
      //   97: iload 4
      //   99: iload_2
      //   100: if_icmpge +24 -> 124
      //   103: iload 5
      //   105: istore_3
      //   106: aload_1
      //   107: iload_3
      //   108: invokevirtual 172	pdftron/PDF/Tools/Pan$Toolbar$TButton:setEnabled	(Z)V
      //   111: aload_0
      //   112: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   115: invokevirtual 202	pdftron/PDF/PDFViewCtrl:unlockDoc	()V
      //   118: return
      //   119: iconst_0
      //   120: istore_3
      //   121: goto -34 -> 87
      //   124: iconst_0
      //   125: istore_3
      //   126: goto -20 -> 106
      //   129: astore_1
      //   130: aload_0
      //   131: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   134: invokevirtual 202	pdftron/PDF/PDFViewCtrl:unlockDoc	()V
      //   137: return
      //   138: astore_1
      //   139: aload_0
      //   140: getfield 127	pdftron/PDF/Tools/Pan$a:b	Lpdftron/PDF/PDFViewCtrl;
      //   143: invokevirtual 202	pdftron/PDF/PDFViewCtrl:unlockDoc	()V
      //   146: aload_1
      //   147: athrow
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	148	0	this	a
      //   0	148	1	paramSeekBar	SeekBar
      //   0	148	2	paramInt	int
      //   0	148	3	paramBoolean	boolean
      //   72	29	4	j	int
      //   1	103	5	bool	boolean
      // Exception table:
      //   from	to	target	type
      //   18	34	129	java/lang/Exception
      //   42	53	129	java/lang/Exception
      //   53	79	129	java/lang/Exception
      //   87	97	129	java/lang/Exception
      //   106	111	129	java/lang/Exception
      //   18	34	138	finally
      //   42	53	138	finally
      //   53	79	138	finally
      //   87	97	138	finally
      //   106	111	138	finally
    }
    
    public final void onStartTrackingTouch(SeekBar paramSeekBar) {}
    
    public final void onStopTrackingTouch(SeekBar paramSeekBar) {}
  }
  
  final class b
    extends Pan.Toolbar
    implements View.OnClickListener, View.OnKeyListener, View.OnLongClickListener, PDFViewCtrl.TextSearchListener
  {
    private EditText d;
    private Pan.Toolbar.TButton e;
    private Pan.Toolbar.TButton f;
    private ProgressBar g;
    private boolean h;
    private boolean i;
    private boolean j;
    private boolean k;
    private Path l = new Path();
    private boolean m;
    
    public b(PDFViewCtrl paramPDFViewCtrl, int paramInt)
    {
      super(paramPDFViewCtrl, 1);
      this$1 = this.b.getContext().getSharedPreferences("com_pdftron_pdfnet_pdfviewctrl_prefs_file", 0);
      this.i = Pan.this.getBoolean("text_search_whole_word", false);
      this.h = Pan.this.getBoolean("text_search_case_sensitive", true);
      this.j = Pan.this.getBoolean("text_search_use_regs", false);
      this.e = new Pan.Toolbar.TButton(this, this.a, 2);
      this.e.setGravity(16);
      this.e.setOnClickListener(this);
      this.f = new Pan.Toolbar.TButton(this, this.a, 1);
      this.f.setGravity(16);
      this.f.setOnClickListener(this);
      this.d = new EditText(this.a);
      this.d.setText("");
      this.d.setHint("long press for options");
      this.d.setTextSize(2, 15.0F);
      this.d.setOnKeyListener(this);
      this.d.setSingleLine(true);
      this.d.setGravity(16);
      this.d.setLongClickable(true);
      this.d.setOnLongClickListener(this);
      this.d.setId(1);
      this.g = new ProgressBar(this.a, null, 16842872);
      this.g.getProgressDrawable().setAlpha(125);
      this.g.setVisibility(8);
      this.g.setIndeterminate(false);
      this.g.setMax(100);
      this.g.setPadding(2, 3, 2, 7);
      this$1 = new RelativeLayout(this.a);
      paramPDFViewCtrl = new RelativeLayout.LayoutParams(-2, -2);
      paramPDFViewCtrl.addRule(11, -1);
      paramPDFViewCtrl.addRule(9, -1);
      Pan.this.addView(this.d, paramPDFViewCtrl);
      paramPDFViewCtrl = new RelativeLayout.LayoutParams(-2, -2);
      paramPDFViewCtrl.addRule(6, this.d.getId());
      paramPDFViewCtrl.addRule(5, this.d.getId());
      paramPDFViewCtrl.addRule(8, this.d.getId());
      paramPDFViewCtrl.addRule(7, this.d.getId());
      Pan.this.addView(this.g, paramPDFViewCtrl);
      paramPDFViewCtrl = new RelativeLayout.LayoutParams(-2, -1);
      paramPDFViewCtrl.addRule(11, -1);
      paramPDFViewCtrl.addRule(15, -1);
      LinearLayout localLinearLayout = new LinearLayout(this.a);
      localLinearLayout.addView(this.e, paramPDFViewCtrl);
      localLinearLayout.addView(this.f, paramPDFViewCtrl);
      localLinearLayout.addView(Pan.this, paramPDFViewCtrl);
      localLinearLayout.addView(this.c);
      setContentView(localLinearLayout);
    }
    
    private void a(int paramInt)
    {
      if (paramInt == 1)
      {
        float f1 = this.b.getScrollX();
        float f2 = this.b.getScrollY();
        paramInt = this.b.getSelectionBeginPage();
        int i3 = this.b.getSelectionEndPage();
        while (paramInt <= i3)
        {
          double[] arrayOfDouble1 = this.b.getSelection(paramInt).getQuads();
          int i4 = arrayOfDouble1.length / 8;
          if (i4 != 0)
          {
            int i2 = 0;
            int i1 = 0;
            while (i2 < i4)
            {
              double[] arrayOfDouble2 = this.b.convPagePtToClientPt(arrayOfDouble1[i1], arrayOfDouble1[(i1 + 1)], paramInt);
              float f3 = (float)arrayOfDouble2[0];
              float f4 = (float)arrayOfDouble2[1];
              this.l.moveTo(f3 + f1, f4 + f2);
              arrayOfDouble2 = this.b.convPagePtToClientPt(arrayOfDouble1[(i1 + 2)], arrayOfDouble1[(i1 + 3)], paramInt);
              f3 = (float)arrayOfDouble2[0];
              f4 = (float)arrayOfDouble2[1];
              this.l.lineTo(f3 + f1, f4 + f2);
              arrayOfDouble2 = this.b.convPagePtToClientPt(arrayOfDouble1[(i1 + 4)], arrayOfDouble1[(i1 + 5)], paramInt);
              f3 = (float)arrayOfDouble2[0];
              f4 = (float)arrayOfDouble2[1];
              this.l.lineTo(f3 + f1, f4 + f2);
              arrayOfDouble2 = this.b.convPagePtToClientPt(arrayOfDouble1[(i1 + 6)], arrayOfDouble1[(i1 + 7)], paramInt);
              f3 = (float)arrayOfDouble2[0];
              f4 = (float)arrayOfDouble2[1];
              this.l.lineTo(f3 + f1, f4 + f2);
              this.l.close();
              i2 += 1;
              i1 += 8;
            }
          }
          paramInt += 1;
        }
      }
      this.b.requestRendering();
      this.b.invalidate();
    }
    
    private void d()
    {
      this.l.reset();
      String str = this.d.getText().toString().trim();
      PDFViewCtrl localPDFViewCtrl;
      boolean bool2;
      boolean bool3;
      if (str.length() > 0)
      {
        localPDFViewCtrl = this.b;
        bool2 = this.h;
        bool3 = this.i;
        if (this.k) {
          break label72;
        }
      }
      label72:
      for (boolean bool1 = true;; bool1 = false)
      {
        localPDFViewCtrl.findText(str, bool2, bool3, bool1, this.j, this);
        return;
      }
    }
    
    public final Path b()
    {
      return this.l;
    }
    
    public final void c()
    {
      this.l.reset();
      a(1);
    }
    
    public final void onClick(View paramView)
    {
      if (paramView == this.e)
      {
        bool = this.k;
        this.k = false;
        d();
        this.k = bool;
      }
      while (paramView != this.f) {
        return;
      }
      boolean bool = this.k;
      this.k = true;
      d();
      this.k = bool;
    }
    
    public final void onDismiss()
    {
      boolean bool = this.m;
      this.b.cancelFindText();
      if (bool)
      {
        Toast localToast = Toast.makeText(this.b.getContext(), "Text search canceled.", 0);
        localToast.setGravity(17, 0, 0);
        localToast.show();
      }
      this.b.invalidate();
      this.l.reset();
    }
    
    public final boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
    {
      if ((paramKeyEvent.getAction() == 0) && (paramInt == 66))
      {
        this.k = true;
        d();
        return true;
      }
      return false;
    }
    
    public final boolean onLongClick(final View paramView)
    {
      if (paramView == this.d)
      {
        paramView = new j(this.b.getContext());
        paramView.setButton("OK", new DialogInterface.OnClickListener()
        {
          public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            Pan.b.a(Pan.b.this, paramView.b());
            Pan.b.b(Pan.b.this, paramView.a());
            Pan.b.c(Pan.b.this, paramView.c());
            paramAnonymousDialogInterface = Pan.b.this.b.getContext().getSharedPreferences("com_pdftron_pdfnet_pdfviewctrl_prefs_file", 0).edit();
            paramAnonymousDialogInterface.putBoolean("text_search_whole_word", Pan.b.a(Pan.b.this));
            paramAnonymousDialogInterface.putBoolean("text_search_case_sensitive", Pan.b.b(Pan.b.this));
            paramAnonymousDialogInterface.putBoolean("text_search_use_regs", Pan.b.c(Pan.b.this));
            paramAnonymousDialogInterface.commit();
          }
        });
        paramView.setButton2("Cancel", new DialogInterface.OnClickListener()
        {
          public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
        });
      }
      try
      {
        paramView.b(this.h);
        paramView.a(this.i);
        paramView.c(this.j);
        paramView.show();
        return false;
      }
      catch (Exception paramView)
      {
        for (;;) {}
      }
    }
    
    public final void onTextSearchEnd(int paramInt)
    {
      if (paramInt == 1)
      {
        ((InputMethodManager)this.b.getContext().getSystemService("input_method")).hideSoftInputFromWindow(this.d.getWindowToken(), 0);
        Pan.this.f();
      }
      a(paramInt);
      this.g.setVisibility(8);
      this.m = false;
      if (paramInt == 0)
      {
        localToast = Toast.makeText(this.b.getContext(), "Nothing was found.", 0);
        localToast.setGravity(17, 0, 0);
        localToast.show();
      }
      while (paramInt != 2) {
        return;
      }
      Toast localToast = Toast.makeText(this.b.getContext(), "Invalid search string.", 0);
      localToast.setGravity(17, 0, 0);
      localToast.show();
    }
    
    public final void onTextSearchProgress(int paramInt)
    {
      this.g.setProgress(paramInt);
    }
    
    public final void onTextSearchStart()
    {
      this.g.setProgress(0);
      this.g.setVisibility(0);
      this.m = true;
    }
  }
}
