package pdftron.SDF;

import pdftron.Common.PDFNetException;

public class NameTree
{
  private long a;
  private Object b;
  
  private NameTree(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public NameTree(Obj paramObj)
  {
    this.a = paramObj.a;
    this.b = paramObj.b;
  }
  
  private static native long Create(long paramLong, String paramString);
  
  private static native void Erase(long paramLong1, long paramLong2);
  
  private static native void Erase(long paramLong, byte[] paramArrayOfByte);
  
  private static native long Find(long paramLong, String paramString);
  
  private static native long GetIterator(long paramLong);
  
  private static native long GetIterator(long paramLong, byte[] paramArrayOfByte);
  
  private static native long GetValue(long paramLong, byte[] paramArrayOfByte);
  
  private static native boolean IsValid(long paramLong);
  
  private static native void Put(long paramLong1, byte[] paramArrayOfByte, long paramLong2);
  
  public static NameTree create(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return new NameTree(Create(paramDoc.impl, paramString), paramDoc);
  }
  
  public static NameTree find(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return new NameTree(Find(paramDoc.impl, paramString), paramDoc);
  }
  
  public void erase(DictIterator paramDictIterator)
    throws PDFNetException
  {
    Erase(this.a, paramDictIterator.a);
  }
  
  public void erase(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    Erase(this.a, paramArrayOfByte);
  }
  
  public NameTreeIterator getIterator()
    throws PDFNetException
  {
    return new NameTreeIterator(GetIterator(this.a), this.b);
  }
  
  public NameTreeIterator getIterator(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return new NameTreeIterator(GetIterator(this.a, paramArrayOfByte), this.b);
  }
  
  public Obj getSDFObj()
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public Obj getValue(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return Obj.__Create(GetValue(this.a, paramArrayOfByte), this.b);
  }
  
  public boolean isValid()
    throws PDFNetException
  {
    return IsValid(this.a);
  }
  
  public void put(byte[] paramArrayOfByte, Obj paramObj)
    throws PDFNetException
  {
    Put(this.a, paramArrayOfByte, paramObj.a);
  }
}
