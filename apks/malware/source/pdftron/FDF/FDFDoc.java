package pdftron.FDF;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.SDF.Obj;
import pdftron.SDF.SDFDoc;

public class FDFDoc
{
  private long a;
  
  public FDFDoc()
    throws PDFNetException
  {
    this.a = FDFDocCreate();
  }
  
  private FDFDoc(long paramLong)
  {
    this.a = paramLong;
  }
  
  public FDFDoc(InputStream paramInputStream)
    throws PDFNetException, IOException
  {
    this(paramInputStream, 1048576);
  }
  
  /* Error */
  public FDFDoc(InputStream paramInputStream, int paramInt)
    throws PDFNetException, IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 12	java/lang/Object:<init>	()V
    //   4: lconst_0
    //   5: lstore 8
    //   7: lload 8
    //   9: lstore 4
    //   11: aload_1
    //   12: invokevirtual 34	java/io/InputStream:available	()I
    //   15: i2l
    //   16: invokestatic 38	pdftron/FDF/FDFDoc:MemStreamCreateMemFilt	(J)J
    //   19: lstore 6
    //   21: lload 6
    //   23: lstore 4
    //   25: lload 6
    //   27: lstore 8
    //   29: iload_2
    //   30: newarray byte
    //   32: astore 10
    //   34: lload 6
    //   36: lstore 4
    //   38: lload 6
    //   40: lstore 8
    //   42: aload_1
    //   43: aload 10
    //   45: invokevirtual 42	java/io/InputStream:read	([B)I
    //   48: istore_3
    //   49: iload_3
    //   50: iload_2
    //   51: if_icmpne +34 -> 85
    //   54: lload 6
    //   56: lstore 4
    //   58: lload 6
    //   60: lstore 8
    //   62: lload 6
    //   64: aload 10
    //   66: iload_2
    //   67: invokestatic 46	pdftron/FDF/FDFDoc:MemStreamWriteData	(J[BI)V
    //   70: goto -36 -> 34
    //   73: astore_1
    //   74: lload 4
    //   76: aconst_null
    //   77: invokestatic 52	pdftron/Filters/Filter:__Create	(JLpdftron/Filters/Filter;)Lpdftron/Filters/Filter;
    //   80: invokevirtual 55	pdftron/Filters/Filter:destroy	()V
    //   83: aload_1
    //   84: athrow
    //   85: iload_3
    //   86: ifle +19 -> 105
    //   89: lload 6
    //   91: lstore 4
    //   93: lload 6
    //   95: lstore 8
    //   97: lload 6
    //   99: aload 10
    //   101: iload_3
    //   102: invokestatic 46	pdftron/FDF/FDFDoc:MemStreamWriteData	(J[BI)V
    //   105: lload 6
    //   107: lstore 4
    //   109: lload 6
    //   111: lstore 8
    //   113: aload_0
    //   114: lload 6
    //   116: invokestatic 58	pdftron/FDF/FDFDoc:MemStreamCreateDoc	(J)J
    //   119: putfield 18	pdftron/FDF/FDFDoc:a	J
    //   122: return
    //   123: astore_1
    //   124: lload 8
    //   126: aconst_null
    //   127: invokestatic 52	pdftron/Filters/Filter:__Create	(JLpdftron/Filters/Filter;)Lpdftron/Filters/Filter;
    //   130: invokevirtual 55	pdftron/Filters/Filter:destroy	()V
    //   133: aload_1
    //   134: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	135	0	this	FDFDoc
    //   0	135	1	paramInputStream	InputStream
    //   0	135	2	paramInt	int
    //   48	54	3	i	int
    //   9	99	4	l1	long
    //   19	96	6	l2	long
    //   5	120	8	l3	long
    //   32	68	10	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   11	21	73	pdftron/Common/PDFNetException
    //   29	34	73	pdftron/Common/PDFNetException
    //   42	49	73	pdftron/Common/PDFNetException
    //   62	70	73	pdftron/Common/PDFNetException
    //   97	105	73	pdftron/Common/PDFNetException
    //   113	122	73	pdftron/Common/PDFNetException
    //   11	21	123	java/io/IOException
    //   29	34	123	java/io/IOException
    //   42	49	123	java/io/IOException
    //   62	70	123	java/io/IOException
    //   97	105	123	java/io/IOException
    //   113	122	123	java/io/IOException
  }
  
  public FDFDoc(String paramString)
    throws PDFNetException
  {
    this.a = FDFDocCreate(paramString);
  }
  
  public FDFDoc(Filter paramFilter)
    throws PDFNetException
  {
    paramFilter.__SetRefHandle(this);
    this.a = FDFDocCreate(paramFilter.__GetHandle());
  }
  
  public FDFDoc(SDFDoc paramSDFDoc)
    throws PDFNetException
  {
    if (paramSDFDoc.__GetRefHandle() != null) {
      throw new PDFNetException("false", 36L, "FDFDoc.java", "FDFDoc(SDFDoc)", "SDFDoc is already owned by another document.");
    }
    this.a = paramSDFDoc.__GetHandle();
    paramSDFDoc.__SetRef(this);
  }
  
  public FDFDoc(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    this.a = FDFDocCreate(paramArrayOfByte);
  }
  
  private static native void Close(long paramLong);
  
  private static native long CreateFromXFDF(String paramString);
  
  private static native long FDFDocCreate();
  
  private static native long FDFDocCreate(long paramLong);
  
  private static native long FDFDocCreate(String paramString);
  
  private static native long FDFDocCreate(byte[] paramArrayOfByte);
  
  private static native long FieldCreate(long paramLong1, String paramString, int paramInt, long paramLong2);
  
  private static native long FieldCreate(long paramLong, String paramString1, int paramInt, String paramString2);
  
  private static native long GetFDF(long paramLong);
  
  private static native long GetField(long paramLong, String paramString);
  
  private static native long GetFieldIterator(long paramLong, String paramString);
  
  private static native long GetFieldIteratorBegin(long paramLong);
  
  private static native long GetID(long paramLong);
  
  private static native String GetPDFFileName(long paramLong);
  
  private static native long GetRoot(long paramLong);
  
  private static native long GetTrailer(long paramLong);
  
  private static native boolean IsModified(long paramLong);
  
  private static native long MemStreamCreateDoc(long paramLong);
  
  private static native long MemStreamCreateMemFilt(long paramLong)
    throws PDFNetException;
  
  private static native void MemStreamWriteData(long paramLong, byte[] paramArrayOfByte, int paramInt);
  
  private static native void ReadData(byte[] paramArrayOfByte, int paramInt, long paramLong);
  
  private static native void Save(long paramLong, String paramString);
  
  private static native byte[] Save(long paramLong);
  
  private static native long SaveAsXFDF(long paramLong, String paramString);
  
  private static native long[] SaveStream(long paramLong);
  
  private static native void SetID(long paramLong1, long paramLong2);
  
  private static native void SetPDFFileName(long paramLong, String paramString);
  
  public static FDFDoc __Create(long paramLong)
  {
    return new FDFDoc(paramLong);
  }
  
  public static FDFDoc createFromXFDF(String paramString)
    throws PDFNetException
  {
    return new FDFDoc(CreateFromXFDF(paramString));
  }
  
  public long __GetHandle()
  {
    return this.a;
  }
  
  public void close()
    throws PDFNetException
  {
    if (this.a != 0L)
    {
      Close(this.a);
      this.a = 0L;
    }
  }
  
  public FDFField fieldCreate(String paramString, int paramInt)
    throws PDFNetException
  {
    return new FDFField(FieldCreate(this.a, paramString, paramInt, 0L), this);
  }
  
  public FDFField fieldCreate(String paramString1, int paramInt, String paramString2)
    throws PDFNetException
  {
    return new FDFField(FieldCreate(this.a, paramString1, paramInt, paramString2), this);
  }
  
  public FDFField fieldCreate(String paramString, int paramInt, Obj paramObj)
    throws PDFNetException
  {
    return new FDFField(FieldCreate(this.a, paramString, paramInt, paramObj.__GetHandle()), this);
  }
  
  protected void finalize()
    throws Throwable
  {
    close();
  }
  
  public Obj getFDF()
    throws PDFNetException
  {
    return Obj.__Create(GetFDF(this.a), this);
  }
  
  public FDFField getField(String paramString)
    throws PDFNetException
  {
    long l = GetField(this.a, paramString);
    if (l != 0L) {
      return new FDFField(l, this);
    }
    return null;
  }
  
  public FDFFieldIterator getFieldIterator()
    throws PDFNetException
  {
    return new FDFFieldIterator(GetFieldIteratorBegin(this.a), this);
  }
  
  public FDFFieldIterator getFieldIterator(String paramString)
    throws PDFNetException
  {
    return new FDFFieldIterator(GetFieldIterator(this.a, paramString), this);
  }
  
  public Obj getID()
    throws PDFNetException
  {
    return Obj.__Create(GetID(this.a), this);
  }
  
  public String getPDFFileName()
    throws PDFNetException
  {
    return GetPDFFileName(this.a);
  }
  
  public Obj getRoot()
    throws PDFNetException
  {
    return Obj.__Create(GetRoot(this.a), this);
  }
  
  public SDFDoc getSDFDoc()
  {
    return SDFDoc.__Create(this.a, this);
  }
  
  public Obj getTrailer()
    throws PDFNetException
  {
    return Obj.__Create(GetTrailer(this.a), this);
  }
  
  public boolean isModified()
    throws PDFNetException
  {
    return IsModified(this.a);
  }
  
  public void save(OutputStream paramOutputStream)
    throws PDFNetException, IOException
  {
    save(paramOutputStream, 1048576);
  }
  
  public void save(OutputStream paramOutputStream, int paramInt)
    throws PDFNetException, IOException
  {
    Object localObject = SaveStream(this.a);
    long l1 = localObject[0];
    long l2 = localObject[1];
    localObject = new byte[paramInt];
    long l3 = paramInt;
    while (l1 < l2 - l3)
    {
      ReadData((byte[])localObject, paramInt, l1);
      paramOutputStream.write((byte[])localObject);
      l1 += paramInt;
    }
    paramInt = (int)(l2 - l1);
    if (paramInt > 0)
    {
      ReadData((byte[])localObject, paramInt, l1);
      paramOutputStream.write((byte[])localObject, 0, paramInt);
    }
  }
  
  public void save(String paramString)
    throws PDFNetException
  {
    Save(this.a, paramString);
  }
  
  public byte[] save()
    throws PDFNetException
  {
    return Save(this.a);
  }
  
  public void saveAsXFDF(String paramString)
    throws PDFNetException
  {
    SaveAsXFDF(this.a, paramString);
  }
  
  public void setID(Obj paramObj)
    throws PDFNetException
  {
    SetID(this.a, paramObj.__GetHandle());
  }
  
  public void setPDFFileName(String paramString)
    throws PDFNetException
  {
    SetPDFFileName(this.a, paramString);
  }
}
