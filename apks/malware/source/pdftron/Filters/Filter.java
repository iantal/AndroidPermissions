package pdftron.Filters;

import pdftron.Common.PDFNetException;

public class Filter
{
  protected Filter attached;
  protected long impl;
  protected Object ref;
  
  protected Filter(long paramLong, Filter paramFilter)
  {
    this.impl = paramLong;
    this.attached = paramFilter;
  }
  
  private static native void AttachFilter(long paramLong1, long paramLong2);
  
  private static native boolean CanSeek(long paramLong);
  
  private static native long CreateInputIterator(long paramLong);
  
  private static native void Destroy(long paramLong);
  
  private static native void Flush(long paramLong);
  
  private static native void FlushAll(long paramLong);
  
  private static native long GetAttachedFilter(long paramLong);
  
  private static native String GetDecodeName(long paramLong);
  
  private static native String GetFilePath(long paramLong);
  
  private static native String GetName(long paramLong);
  
  private static native long GetSourceFilter(long paramLong);
  
  private static native boolean IsInputFilter(long paramLong);
  
  private static native long ReleaseAttachedFilter(long paramLong);
  
  private static native void Seek(long paramLong1, long paramLong2, int paramInt);
  
  private static native void SetStreamLength(long paramLong1, long paramLong2);
  
  private static native long Tell(long paramLong);
  
  public static Filter __Create(long paramLong, Filter paramFilter)
  {
    return new Filter(paramLong, paramFilter);
  }
  
  public long __GetHandle()
  {
    return this.impl;
  }
  
  public void __SetRefHandle(Object paramObject)
  {
    this.ref = paramObject;
  }
  
  public void attachFilter(Filter paramFilter)
    throws PDFNetException
  {
    if (paramFilter != null)
    {
      AttachFilter(this.impl, paramFilter.impl);
      paramFilter.attached = this;
    }
  }
  
  public boolean canSeek()
    throws PDFNetException
  {
    return CanSeek(this.impl);
  }
  
  public Filter createInputIterator()
    throws PDFNetException
  {
    return new Filter(CreateInputIterator(this.impl), null);
  }
  
  public void destroy()
    throws PDFNetException
  {
    if ((this.attached == null) && (this.ref == null) && (this.impl != 0L))
    {
      Destroy(this.impl);
      this.impl = 0L;
    }
  }
  
  protected void finalize()
    throws Throwable
  {
    destroy();
  }
  
  public void flush()
    throws PDFNetException
  {
    Flush(this.impl);
  }
  
  public void flushAll()
    throws PDFNetException
  {
    FlushAll(this.impl);
  }
  
  public Filter getAttachedFilter()
    throws PDFNetException
  {
    return new Filter(GetAttachedFilter(this.impl), this);
  }
  
  public String getDecodeName()
    throws PDFNetException
  {
    return GetDecodeName(this.impl);
  }
  
  public String getFilePath()
    throws PDFNetException
  {
    return GetFilePath(this.impl);
  }
  
  public String getName()
    throws PDFNetException
  {
    return GetName(this.impl);
  }
  
  public Filter getSourceFilter()
    throws PDFNetException
  {
    long l = GetSourceFilter(this.impl);
    for (Filter localFilter = this; localFilter.attached != null; localFilter = localFilter.attached) {}
    return new Filter(l, localFilter);
  }
  
  public boolean isInputFilter()
    throws PDFNetException
  {
    return IsInputFilter(this.impl);
  }
  
  public Filter releaseAttachedFilter()
    throws PDFNetException
  {
    long l = ReleaseAttachedFilter(this.impl);
    if (l == 0L) {
      return null;
    }
    return new Filter(l, null);
  }
  
  public void seek(long paramLong, int paramInt)
    throws PDFNetException
  {
    Seek(this.impl, paramLong, paramInt);
  }
  
  public void setStreamLength(long paramLong)
    throws PDFNetException
  {
    SetStreamLength(this.impl, paramLong);
  }
  
  public long tell()
    throws PDFNetException
  {
    return Tell(this.impl);
  }
}
