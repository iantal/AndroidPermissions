package fr.castorflex.android.smoothprogressbar;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.LinearInterpolator;
import android.widget.ProgressBar;

public class SmoothProgressBar
  extends ProgressBar
{
  private static final int INTERPOLATOR_ACCELERATE = 0;
  private static final int INTERPOLATOR_ACCELERATEDECELERATE = 2;
  private static final int INTERPOLATOR_DECELERATE = 3;
  private static final int INTERPOLATOR_LINEAR = 1;
  
  public SmoothProgressBar(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SmoothProgressBar(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, R.attr.spbStyle);
  }
  
  public SmoothProgressBar(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    Resources localResources = paramContext.getResources();
    paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.SmoothProgressBar, paramInt, 0);
    paramInt = paramAttributeSet.getColor(1, localResources.getColor(R.color.spb_default_color));
    int i = paramAttributeSet.getInteger(4, localResources.getInteger(R.integer.spb_default_sections_count));
    int j = paramAttributeSet.getDimensionPixelSize(3, localResources.getDimensionPixelSize(R.dimen.spb_default_stroke_separator_length));
    int k = paramAttributeSet.getDimensionPixelSize(2, localResources.getDimensionPixelSize(R.dimen.spb_default_stroke_width));
    String str = paramAttributeSet.getString(5);
    int m = paramAttributeSet.getInteger(6, localResources.getInteger(R.integer.spb_default_interpolator));
    boolean bool1 = paramAttributeSet.getBoolean(7, localResources.getBoolean(R.bool.spb_default_reversed));
    boolean bool2 = paramAttributeSet.getBoolean(8, localResources.getBoolean(R.bool.spb_default_mirror_mode));
    int n = paramAttributeSet.getResourceId(9, 0);
    paramAttributeSet.recycle();
    switch (m)
    {
    default: 
      paramAttributeSet = new AccelerateInterpolator();
      int[] arrayOfInt = null;
      if (n != 0) {
        arrayOfInt = localResources.getIntArray(n);
      }
      paramContext = new SmoothProgressDrawable.Builder(paramContext).interpolator(paramAttributeSet).sectionsCount(i).separatorLength(j).width(k).reversed(bool1).mirrorMode(bool2);
      if (str != null) {
        paramContext.speed(Float.parseFloat(str));
      }
      if ((arrayOfInt != null) && (arrayOfInt.length > 0)) {
        paramContext.colors(arrayOfInt);
      }
      break;
    }
    for (;;)
    {
      setIndeterminateDrawable(paramContext.build());
      return;
      paramAttributeSet = new AccelerateDecelerateInterpolator();
      break;
      paramAttributeSet = new DecelerateInterpolator();
      break;
      paramAttributeSet = new LinearInterpolator();
      break;
      paramContext.color(paramInt);
    }
  }
}
