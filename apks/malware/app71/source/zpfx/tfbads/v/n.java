package zpfx.tfbads.v;

import android.os.Handler;
import android.os.Message;
import java.io.IOException;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

class n
  implements Runnable
{
  n(XcRxZX paramXcRxZX, String paramString) {}
  
  public void run()
  {
    Object localObject1 = new HttpGet(this.b);
    Object localObject2 = new DefaultHttpClient();
    ((HttpClient)localObject2).getParams().setParameter("http.connection.timeout", Integer.valueOf(20000));
    ((HttpClient)localObject2).getParams().setParameter("http.socket.timeout", Integer.valueOf(10000));
    try
    {
      localObject1 = ((HttpClient)localObject2).execute((HttpUriRequest)localObject1);
      int i = ((HttpResponse)localObject1).getStatusLine().getStatusCode();
      if (i == 200)
      {
        localObject2 = EntityUtils.toString(((HttpResponse)localObject1).getEntity());
        localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = "";
        }
        localObject2 = new Message();
        ((Message)localObject2).what = 1;
        ((Message)localObject2).obj = ((String)localObject1).trim();
        ((Message)localObject2).arg1 = i;
        this.a.m.sendMessage((Message)localObject2);
        return;
      }
      localObject1 = new Message();
      ((Message)localObject1).what = 3;
      ((Message)localObject1).arg1 = i;
      this.a.m.sendMessage((Message)localObject1);
      return;
    }
    catch (ClientProtocolException localClientProtocolException)
    {
      localObject2 = new Message();
      ((Message)localObject2).what = 0;
      ((Message)localObject2).obj = localClientProtocolException.toString();
      this.a.m.sendMessage((Message)localObject2);
      return;
    }
    catch (IOException localIOException)
    {
      localObject2 = new Message();
      ((Message)localObject2).what = 2;
      ((Message)localObject2).obj = localIOException.toString();
      this.a.m.sendMessage((Message)localObject2);
    }
  }
}
