package com.zfplus.lib;

import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class b
{
  private static String a = "national";
  private Cipher b = null;
  private Cipher c = null;
  
  public b()
  {
    this(a);
  }
  
  public b(String paramString)
  {
    paramString = b(paramString.getBytes());
    this.b = Cipher.getInstance("DES");
    this.b.init(1, paramString);
    this.c = Cipher.getInstance("DES");
    this.c.init(2, paramString);
  }
  
  public static byte[] a(String paramString)
  {
    paramString = paramString.getBytes();
    int j = paramString.length;
    byte[] arrayOfByte = new byte[j / 2];
    int i = 0;
    while (i < j)
    {
      String str = new String(paramString, i, 2);
      arrayOfByte[(i / 2)] = ((byte)Integer.parseInt(str, 16));
      i += 2;
    }
    return arrayOfByte;
  }
  
  private Key b(byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = new byte[8];
    int i = 0;
    while ((i < paramArrayOfByte.length) && (i < arrayOfByte.length))
    {
      arrayOfByte[i] = paramArrayOfByte[i];
      i += 1;
    }
    return new SecretKeySpec(arrayOfByte, "DES");
  }
  
  public byte[] a(byte[] paramArrayOfByte)
  {
    return this.c.doFinal(paramArrayOfByte);
  }
  
  public String b(String paramString)
  {
    return new String(a(a(paramString)));
  }
}
