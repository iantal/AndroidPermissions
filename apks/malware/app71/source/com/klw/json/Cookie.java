package com.klw.json;

public class Cookie
{
  public Cookie() {}
  
  public static String escape(String paramString)
  {
    paramString = paramString.trim();
    int j = paramString.length();
    StringBuilder localStringBuilder = new StringBuilder(j);
    int i = 0;
    if (i >= j) {
      return localStringBuilder.toString();
    }
    char c = paramString.charAt(i);
    if ((c < ' ') || (c == '+') || (c == '%') || (c == '=') || (c == ';'))
    {
      localStringBuilder.append('%');
      localStringBuilder.append(Character.forDigit((char)(c >>> '\004' & 0xF), 16));
      localStringBuilder.append(Character.forDigit((char)(c & 0xF), 16));
    }
    for (;;)
    {
      i += 1;
      break;
      localStringBuilder.append(c);
    }
  }
  
  public static JSONObject toJSONObject(String paramString)
  {
    JSONObject localJSONObject = new JSONObject();
    JSONTokener localJSONTokener = new JSONTokener(paramString);
    localJSONObject.put("name", localJSONTokener.nextTo('='));
    localJSONTokener.next('=');
    localJSONObject.put("value", localJSONTokener.nextTo(';'));
    localJSONTokener.next();
    if (!localJSONTokener.more()) {
      return localJSONObject;
    }
    String str = unescape(localJSONTokener.nextTo("=;"));
    if (localJSONTokener.next() != '=') {
      if (str.equals("secure")) {
        paramString = Boolean.TRUE;
      }
    }
    for (;;)
    {
      localJSONObject.put(str, paramString);
      break;
      throw localJSONTokener.syntaxError("Missing '=' in cookie parameter.");
      paramString = unescape(localJSONTokener.nextTo(';'));
      localJSONTokener.next();
    }
  }
  
  public static String toString(JSONObject paramJSONObject)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(escape(paramJSONObject.getString("name")));
    localStringBuilder.append("=");
    localStringBuilder.append(escape(paramJSONObject.getString("value")));
    if (paramJSONObject.has("expires"))
    {
      localStringBuilder.append(";expires=");
      localStringBuilder.append(paramJSONObject.getString("expires"));
    }
    if (paramJSONObject.has("domain"))
    {
      localStringBuilder.append(";domain=");
      localStringBuilder.append(escape(paramJSONObject.getString("domain")));
    }
    if (paramJSONObject.has("path"))
    {
      localStringBuilder.append(";path=");
      localStringBuilder.append(escape(paramJSONObject.getString("path")));
    }
    if (paramJSONObject.optBoolean("secure")) {
      localStringBuilder.append(";secure");
    }
    return localStringBuilder.toString();
  }
  
  public static String unescape(String paramString)
  {
    int k = paramString.length();
    StringBuilder localStringBuilder = new StringBuilder(k);
    int i = 0;
    if (i >= k) {
      return localStringBuilder.toString();
    }
    char c2 = paramString.charAt(i);
    char c1;
    int j;
    if (c2 == '+')
    {
      c1 = ' ';
      j = i;
    }
    for (;;)
    {
      localStringBuilder.append(c1);
      i = j + 1;
      break;
      c1 = c2;
      j = i;
      if (c2 == '%')
      {
        c1 = c2;
        j = i;
        if (i + 2 < k)
        {
          int m = JSONTokener.dehexchar(paramString.charAt(i + 1));
          int n = JSONTokener.dehexchar(paramString.charAt(i + 2));
          c1 = c2;
          j = i;
          if (m >= 0)
          {
            c1 = c2;
            j = i;
            if (n >= 0)
            {
              c1 = (char)(m * 16 + n);
              j = i + 2;
            }
          }
        }
      }
    }
  }
}
