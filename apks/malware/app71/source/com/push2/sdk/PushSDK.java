package com.push2.sdk;

import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.util.Log;
import com.push2.sdk.util.PhoneUtil;
import com.push2.sdk.util.e;
import com.push2.sdk.util.i;
import com.push2.sdk.util.n;
import com.push2.sdk.util.r;
import java.util.HashMap;
import java.util.Map;

public enum PushSDK
{
  private static String TAG;
  private static boolean authLock = false;
  private static String channelid;
  private static String cpId;
  private static String cpKey;
  private static boolean initLock;
  private static boolean payLock;
  private static long startTimePay;
  private PushListener.OnAuthListener authListener;
  private Context context;
  private PushListener.OnInitListener initListener;
  private Handler inithandler = new Handler();
  private boolean isPro = false;
  private Handler kangpayHandler = new Handler();
  private Handler mmpayHandler = new Handler();
  private PushListener.OnPayListener payListener;
  private String phoneIp;
  private PhoneUtil phoneUtil;
  private PushListener.OnPropListener propListener;
  private long startTimeAuth = 0L;
  private long startTimeLogin = 0L;
  
  static
  {
    ENUM$VALUES = new PushSDK[] { INSTANCE };
    TAG = "PushSDK";
    startTimePay = 0L;
    payLock = false;
    initLock = false;
  }
  
  private void changeNet()
  {
    if ((!n.d()) && (!n.c())) {
      n.b();
    }
    try
    {
      Thread.sleep(1000L);
      if ((!n.c()) && (!n.d())) {
        n.a();
      }
    }
    catch (InterruptedException localInterruptedException1)
    {
      for (;;)
      {
        try
        {
          Thread.sleep(1000L);
          return;
        }
        catch (InterruptedException localInterruptedException2)
        {
          com.push2.sdk.b.b localB1;
          localB2 = new com.push2.sdk.b.b("-2012", localInterruptedException2.getClass().getName(), localInterruptedException2.getMessage());
        }
        localInterruptedException1 = localInterruptedException1;
        localB1 = new com.push2.sdk.b.b("-2011", localInterruptedException1.getClass().getName(), localInterruptedException1.getMessage());
        try
        {
          e.a(localB1);
          localInterruptedException1.printStackTrace();
        }
        catch (Exception localException1)
        {
          localException1.printStackTrace();
        }
      }
    }
    try
    {
      com.push2.sdk.b.b localB2;
      e.a(localB2);
      localInterruptedException2.printStackTrace();
      return;
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        localException2.printStackTrace();
      }
    }
  }
  
  public static boolean getAuthLock()
  {
    return authLock;
  }
  
  public static String getChannelid()
  {
    return channelid;
  }
  
  public static String getCpId()
  {
    return cpId;
  }
  
  public static String getCpKey()
  {
    return cpKey;
  }
  
  public static boolean getInitLock()
  {
    return initLock;
  }
  
  public static boolean getPayLock()
  {
    return payLock;
  }
  
  private void setAuthListener(PushListener.OnAuthListener paramOnAuthListener)
  {
    this.authListener = paramOnAuthListener;
  }
  
  private static void setAuthLock(boolean paramBoolean)
  {
    authLock = paramBoolean;
  }
  
  private static void setChannelid(String paramString)
  {
    channelid = paramString;
  }
  
  private void setContext(Context paramContext)
  {
    this.context = paramContext;
  }
  
  private static void setCpId(String paramString)
  {
    cpId = paramString;
  }
  
  private static void setCpKey(String paramString)
  {
    cpKey = paramString;
  }
  
  public static void setDebugMode(boolean paramBoolean)
  {
    b.a = paramBoolean;
  }
  
  private void setInitListener(PushListener.OnInitListener paramOnInitListener)
  {
    this.initListener = paramOnInitListener;
  }
  
  public static void setInitLock(boolean paramBoolean)
  {
    initLock = paramBoolean;
  }
  
  private void setPayListener(PushListener.OnPayListener paramOnPayListener)
  {
    this.payListener = paramOnPayListener;
  }
  
  public static void setPayLock(boolean paramBoolean)
  {
    payLock = paramBoolean;
  }
  
  private void setPropListener(PushListener.OnPropListener paramOnPropListener)
  {
    this.propListener = paramOnPropListener;
  }
  
  public void clearCache() {}
  
  public PushListener.OnAuthListener getAuthListener()
  {
    return this.authListener;
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public PushListener.OnInitListener getInitListener()
  {
    return this.initListener;
  }
  
  public PushListener.OnPayListener getPayListener()
  {
    return this.payListener;
  }
  
  public PhoneUtil getPhoneUtil()
  {
    return this.phoneUtil;
  }
  
  public PushListener.OnPropListener getPropListener()
  {
    return this.propListener;
  }
  
  public void init(Context paramContext, PushListener.OnInitListener paramOnInitListener)
  {
    for (;;)
    {
      try
      {
        if (getInitLock())
        {
          i.e(TAG, "正在初始化,请稍后...");
          return;
        }
        this.phoneUtil = new PhoneUtil(paramContext);
        n.a(paramContext);
        setChannelid(PushApplicationInit.c());
        setCpId(PushApplicationInit.a());
        setCpKey(PushApplicationInit.b());
        if ((r.a(getCpId())) || (r.a(getCpKey())) || (r.a(this.phoneUtil.getImei())) || (r.a(this.phoneUtil.getImsi())) || (r.a(this.phoneUtil.e())) || (r.a(this.phoneUtil.f())) || (r.a(getChannelid())))
        {
          paramContext = "Parameter is not complete! [cpid=" + getCpId() + ",cpkey=" + getCpKey() + ",imsi=" + this.phoneUtil.getImsi() + ",imei=" + this.phoneUtil.getImei() + ",手机型号=" + this.phoneUtil.e() + ",操作系统版本号=" + this.phoneUtil.f() + ",channelid:" + getChannelid() + "]";
          i.d(TAG, paramContext);
          if (paramOnInitListener == null) {
            continue;
          }
          localObject = new HashMap();
          ((Map)localObject).put("code", "-2");
          ((Map)localObject).put("msg", paramContext);
          paramOnInitListener.onFailure((Map)localObject);
          continue;
        }
        if (paramContext == null) {
          break label360;
        }
      }
      finally {}
      if (paramContext.getMainLooper() != null)
      {
        this.inithandler = new Handler(paramContext.getMainLooper());
        this.mmpayHandler = new Handler(paramContext.getMainLooper());
        this.kangpayHandler = new Handler(paramContext.getMainLooper());
      }
      label360:
      changeNet();
      setInitLock(true);
      setContext(paramContext);
      setInitListener(paramOnInitListener);
      Object localObject = new Intent();
      ((Intent)localObject).setAction("com.push2.sdk.service.SMS_SERVICE");
      ((Intent)localObject).setPackage(paramContext.getPackageName());
      paramContext.startService((Intent)localObject);
      this.startTimeLogin = System.currentTimeMillis();
      if ("cmcc".equals(this.phoneUtil.a()))
      {
        this.inithandler.post(new InitSDKRunn(paramContext, paramOnInitListener));
      }
      else if ("ctcc".equals(this.phoneUtil.a()))
      {
        setInitLock(false);
        if (getInitListener() != null)
        {
          paramContext = new HashMap();
          paramContext.put("code", "0");
          paramContext.put("msg", "Push SDK init success!");
          getInitListener().onSuccess(paramContext);
        }
        else
        {
          Log.e(TAG, "init success!,but OnInitListener is null!");
        }
      }
    }
  }
  
  public boolean isPayAuth()
  {
    if (this.context != null) {
      return b.a(this.context);
    }
    return false;
  }
  
  public void onDestroy()
  {
    d.INSTANCE.disconnect();
  }
  
  public void pay(String paramString1, int paramInt, String paramString2, PushListener.OnPropListener paramOnPropListener, PushListener.OnPayListener paramOnPayListener)
  {
    for (;;)
    {
      try
      {
        if (getInitLock())
        {
          i.e(TAG, "Initializing please wait ...");
          return;
        }
        if (getPayLock())
        {
          i.e(TAG, "paying please wait ...");
          continue;
        }
        if (!getAuthLock()) {
          break label61;
        }
      }
      finally {}
      i.e(TAG, "authing please wait ...");
      continue;
      label61:
      if (getContext() != null) {
        break;
      }
      i.d(TAG, "uninitialized context is null.");
    }
    n.a(getContext());
    changeNet();
    setPayLock(true);
    this.isPro = false;
    setPropListener(paramOnPropListener);
    setPayListener(paramOnPayListener);
    if (paramString2 == null) {
      paramString2 = "";
    }
    for (;;)
    {
      startTimePay = System.currentTimeMillis();
      try
      {
        if ("cmcc".equals(this.phoneUtil.a())) {
          this.mmpayHandler.post(new MMPayRunn(this.context, paramString1, paramInt, paramString2, paramOnPropListener, paramOnPayListener));
        }
      }
      catch (Exception paramString1)
      {
        paramString2 = new com.push2.sdk.b.b("-2010", paramString1.getClass().getName(), paramString1.getMessage());
        try
        {
          e.a(paramString2);
          setPayLock(false);
          startTimePay = 0L;
          paramString2 = new HashMap();
          paramString2.put("code", "-4");
          paramString2.put("msg", paramString1.getMessage().toString());
          if (getPayListener() != null)
          {
            getPayListener().onFailure(paramString2);
            paramString1.printStackTrace();
            break;
            if ("ctcc".equals(this.phoneUtil.a()))
            {
              this.kangpayHandler.post(new KangPayRunn(this.context, paramString1, paramInt, paramString2, paramOnPropListener, paramOnPayListener));
              break;
            }
            "cucc".equals(this.phoneUtil.a());
          }
        }
        catch (Exception paramString2)
        {
          for (;;)
          {
            paramString2.printStackTrace();
            continue;
            i.d(TAG, "支付失败报异常,支付回调接口为null");
          }
        }
      }
    }
  }
  
  public void payAuth(PushListener.OnAuthListener paramOnAuthListener)
  {
    for (;;)
    {
      try
      {
        if (getAuthLock())
        {
          i.e(TAG, "正在验证，请稍后...");
          return;
        }
        if (getPayLock())
        {
          i.e(TAG, "正在支付,请稍后执行验证...");
          if (getAuthListener() == null) {
            continue;
          }
          paramOnAuthListener = new HashMap();
          paramOnAuthListener.put("code", "-6");
          paramOnAuthListener.put("msg", "正在支付,请稍后执行验证..");
          getAuthListener().onSuccess(paramOnAuthListener);
          continue;
        }
        if (getContext() != null) {
          break label164;
        }
      }
      finally {}
      i.e("GZ", "没有初始化,不能验证,context is null");
      if (getAuthListener() != null)
      {
        paramOnAuthListener = new HashMap();
        paramOnAuthListener.put("code", "-6");
        paramOnAuthListener.put("msg", "没有初始化,不能验证,context is null");
        getAuthListener().onSuccess(paramOnAuthListener);
        continue;
        label164:
        if (b.a(getContext()))
        {
          i.e(TAG, "已通过验证，不需再次验证.");
          if (getAuthListener() != null)
          {
            paramOnAuthListener = new HashMap();
            paramOnAuthListener.put("code", "0");
            paramOnAuthListener.put("msg", "已通过验证，不需再次验证.");
            getAuthListener().onSuccess(paramOnAuthListener);
          }
        }
        else
        {
          changeNet();
          setAuthLock(true);
          setAuthListener(paramOnAuthListener);
          this.startTimeAuth = System.currentTimeMillis();
          a.INSTANCE.doPayAuth(getContext(), new PushSDK.1(this));
        }
      }
    }
  }
  
  public void setPhoneUtil(PhoneUtil paramPhoneUtil)
  {
    this.phoneUtil = paramPhoneUtil;
  }
}
