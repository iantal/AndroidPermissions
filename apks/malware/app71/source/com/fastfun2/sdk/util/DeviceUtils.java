package com.fastfun2.sdk.util;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.Locale;

public class DeviceUtils
{
  public DeviceUtils() {}
  
  public static void appendDeviceInfo(Context paramContext, StringBuffer paramStringBuffer)
  {
    int j = 1;
    paramStringBuffer.append("&imei=").append(getImei(paramContext));
    paramStringBuffer.append("&imsi=").append(getImsi(paramContext));
    StringBuffer localStringBuffer = paramStringBuffer.append("&aimei=");
    if (getImeiAuthenticity(paramContext))
    {
      i = 1;
      localStringBuffer.append(i);
      localStringBuffer = paramStringBuffer.append("&aimsi=");
      if (!getImsiAuthenticity(paramContext)) {
        break label164;
      }
    }
    label164:
    for (int i = j;; i = 0)
    {
      localStringBuffer.append(i);
      paramStringBuffer.append("&iccid=").append(getIccid(paramContext));
      paramStringBuffer.append("&pmodel=").append(encodeData(getModel()));
      paramStringBuffer.append("&osversion=").append(encodeData(getRelease()));
      paramStringBuffer.append("&nwtype=").append(encodeData(getNetWorkType(paramContext)));
      paramStringBuffer.append("&ctech=").append(encodeData(getNetworkClass(paramContext)));
      return;
      i = 0;
      break;
    }
  }
  
  private static String emptyStr(String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "";
    }
    return str;
  }
  
  private static String encodeData(String paramString)
  {
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8");
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static String getCarrierName(Context paramContext)
  {
    try
    {
      String str = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return getImsi(paramContext);
  }
  
  public static String getCountryCode()
  {
    try
    {
      String str1 = Locale.getDefault().getCountry();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getCpuRatioCur()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "";
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String getCpuRatioMax()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static int getHeightPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.heightPixels;
  }
  
  public static final String getIccid(Context paramContext)
  {
    try
    {
      paramContext = IccidUtil.getIccid(paramContext);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getImei(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    if ((str == null) || (str.length() != 15))
    {
      str = getImsi(paramContext);
      SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMEI_A", false);
      return str;
    }
    SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMEI_A", true);
    return str;
  }
  
  public static boolean getImeiAuthenticity(Context paramContext)
  {
    return SharedUtil.getBoolean(paramContext, "device_authenticity", "Key_IMEI_A", false);
  }
  
  public static final String getImsi(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    if ((str == null) || (str.length() != 15))
    {
      str = ImsiUtil.getImsi(paramContext);
      SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMSI_A", false);
      return str;
    }
    SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMSI_A", true);
    return str;
  }
  
  public static boolean getImsiAuthenticity(Context paramContext)
  {
    return SharedUtil.getBoolean(paramContext, "device_authenticity", "Key_IMSI_A", false);
  }
  
  public static String getIpAddress()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (SocketException localSocketException)
    {
      for (;;)
      {
        Object localObject;
        label18:
        Enumeration localEnumeration;
        InetAddress localInetAddress;
        Log.e("WifiPreference IpAddress", localSocketException.toString());
      }
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while (localInetAddress.isLoopbackAddress());
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static String getLanguageCode()
  {
    try
    {
      String str1 = Locale.getDefault().getLanguage();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getMacAddress(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
      if (paramContext != null) {}
      boolean bool;
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        bool = paramContext.equals("");
        if (bool) {
          paramContext = "unknown";
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = "unknown";
    }
    return paramContext;
  }
  
  public static String getManufacturer()
  {
    return Build.MANUFACTURER;
  }
  
  public static String getMenoryRatio()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/meminfo"), 8192).readLine();
      if (str != null)
      {
        str = str.substring(str.indexOf(":") + 2, str.indexOf("k") - 1).trim();
        return str;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "";
  }
  
  public static String getModel()
  {
    return Build.MODEL;
  }
  
  public static String getNetWorkType(Context paramContext)
  {
    try
    {
      Object localObject = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()))
      {
        localObject = ((NetworkInfo)localObject).getTypeName();
        boolean bool = ((String)localObject).equalsIgnoreCase("WIFI");
        if (bool) {
          return "WIFI";
        }
        if (((String)localObject).equalsIgnoreCase("MOBILE"))
        {
          paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
          return paramContext;
        }
        return "";
      }
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getNetworkClass(Context paramContext)
  {
    return NetworkClassUtil.getNetworkClass(getNetWorkType(paramContext));
  }
  
  public static String getNetworkTypeName(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return "GPRS";
      }
      paramContext = paramContext.getTypeName();
      if (paramContext.compareTo("MOBILE") != 0)
      {
        int i = paramContext.compareTo("mobile");
        if (i != 0) {}
      }
      else
      {
        return "GPRS";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "GPRS";
  }
  
  public static String getRelease()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static String getSSID(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getSSID();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static int getScreenDensity(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.densityDpi;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  /* Error */
  public static long[] getTcpRxTxBytes(Context paramContext)
  {
    // Byte code:
    //   0: lconst_0
    //   1: lstore 6
    //   3: aconst_null
    //   4: astore 11
    //   6: aconst_null
    //   7: astore 12
    //   9: aconst_null
    //   10: astore 9
    //   12: aload_0
    //   13: invokestatic 398	com/fastfun2/sdk/util/DeviceUtils:getUid	(Landroid/content/Context;)I
    //   16: istore_1
    //   17: new 178	java/lang/StringBuilder
    //   20: dup
    //   21: ldc_w 400
    //   24: invokespecial 183	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   27: iload_1
    //   28: invokevirtual 403	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   31: ldc_w 405
    //   34: invokevirtual 189	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   37: invokevirtual 192	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   40: astore_0
    //   41: new 178	java/lang/StringBuilder
    //   44: dup
    //   45: ldc_w 400
    //   48: invokespecial 183	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   51: iload_1
    //   52: invokevirtual 403	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   55: ldc_w 407
    //   58: invokevirtual 189	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   61: invokevirtual 192	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   64: astore 13
    //   66: new 129	java/io/FileReader
    //   69: dup
    //   70: aload_0
    //   71: invokespecial 134	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   74: astore_0
    //   75: new 127	java/io/BufferedReader
    //   78: dup
    //   79: aload_0
    //   80: sipush 500
    //   83: invokespecial 324	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   86: astore 8
    //   88: aload 8
    //   90: invokevirtual 140	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   93: invokevirtual 279	java/lang/String:toString	()Ljava/lang/String;
    //   96: invokevirtual 145	java/lang/String:trim	()Ljava/lang/String;
    //   99: invokestatic 413	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   102: lstore 4
    //   104: aload_0
    //   105: invokevirtual 414	java/io/FileReader:close	()V
    //   108: aload 8
    //   110: invokevirtual 415	java/io/BufferedReader:close	()V
    //   113: new 129	java/io/FileReader
    //   116: dup
    //   117: aload 13
    //   119: invokespecial 134	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   122: astore_0
    //   123: new 127	java/io/BufferedReader
    //   126: dup
    //   127: aload_0
    //   128: sipush 500
    //   131: invokespecial 324	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   134: astore 8
    //   136: aload 8
    //   138: invokevirtual 140	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   141: invokevirtual 279	java/lang/String:toString	()Ljava/lang/String;
    //   144: invokevirtual 145	java/lang/String:trim	()Ljava/lang/String;
    //   147: invokestatic 413	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   150: lstore_2
    //   151: aload_0
    //   152: invokevirtual 414	java/io/FileReader:close	()V
    //   155: aload 8
    //   157: invokevirtual 415	java/io/BufferedReader:close	()V
    //   160: lload 4
    //   162: lconst_0
    //   163: lcmp
    //   164: ifge +362 -> 526
    //   167: lconst_0
    //   168: lstore 4
    //   170: lload_2
    //   171: lconst_0
    //   172: lcmp
    //   173: ifge +350 -> 523
    //   176: lload 6
    //   178: lstore_2
    //   179: iconst_2
    //   180: newarray long
    //   182: dup
    //   183: iconst_0
    //   184: lload 4
    //   186: lastore
    //   187: dup
    //   188: iconst_1
    //   189: lload_2
    //   190: lastore
    //   191: areturn
    //   192: astore 9
    //   194: aconst_null
    //   195: astore_0
    //   196: aconst_null
    //   197: astore 8
    //   199: aload 9
    //   201: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   204: aload 8
    //   206: ifnull +8 -> 214
    //   209: aload 8
    //   211: invokevirtual 414	java/io/FileReader:close	()V
    //   214: aload_0
    //   215: ifnull +297 -> 512
    //   218: aload_0
    //   219: invokevirtual 415	java/io/BufferedReader:close	()V
    //   222: lconst_0
    //   223: lstore 4
    //   225: goto -112 -> 113
    //   228: astore_0
    //   229: aload_0
    //   230: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   233: lconst_0
    //   234: lstore 4
    //   236: goto -123 -> 113
    //   239: astore 8
    //   241: aconst_null
    //   242: astore_0
    //   243: aload 9
    //   245: ifnull +8 -> 253
    //   248: aload 9
    //   250: invokevirtual 414	java/io/FileReader:close	()V
    //   253: aload_0
    //   254: ifnull +7 -> 261
    //   257: aload_0
    //   258: invokevirtual 415	java/io/BufferedReader:close	()V
    //   261: aload 8
    //   263: athrow
    //   264: astore_0
    //   265: aload_0
    //   266: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   269: goto -8 -> 261
    //   272: astore_0
    //   273: aload_0
    //   274: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   277: goto -164 -> 113
    //   280: astore 9
    //   282: aconst_null
    //   283: astore_0
    //   284: aload 11
    //   286: astore 8
    //   288: aload 9
    //   290: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   293: aload_0
    //   294: ifnull +7 -> 301
    //   297: aload_0
    //   298: invokevirtual 414	java/io/FileReader:close	()V
    //   301: aload 8
    //   303: ifnull +215 -> 518
    //   306: aload 8
    //   308: invokevirtual 415	java/io/BufferedReader:close	()V
    //   311: lconst_0
    //   312: lstore_2
    //   313: goto -153 -> 160
    //   316: astore_0
    //   317: aload_0
    //   318: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   321: lconst_0
    //   322: lstore_2
    //   323: goto -163 -> 160
    //   326: astore 8
    //   328: aconst_null
    //   329: astore 9
    //   331: aload 12
    //   333: astore_0
    //   334: aload 9
    //   336: astore 10
    //   338: aload_0
    //   339: astore 9
    //   341: aload 10
    //   343: astore_0
    //   344: aload 9
    //   346: ifnull +8 -> 354
    //   349: aload 9
    //   351: invokevirtual 414	java/io/FileReader:close	()V
    //   354: aload_0
    //   355: ifnull +7 -> 362
    //   358: aload_0
    //   359: invokevirtual 415	java/io/BufferedReader:close	()V
    //   362: aload 8
    //   364: athrow
    //   365: astore_0
    //   366: aload_0
    //   367: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   370: goto -8 -> 362
    //   373: astore_0
    //   374: aload_0
    //   375: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   378: goto -218 -> 160
    //   381: astore 8
    //   383: aconst_null
    //   384: astore 10
    //   386: aload_0
    //   387: astore 9
    //   389: aload 10
    //   391: astore_0
    //   392: goto -48 -> 344
    //   395: astore 9
    //   397: aload 11
    //   399: astore 8
    //   401: goto -113 -> 288
    //   404: astore 8
    //   406: aconst_null
    //   407: astore 10
    //   409: aload_0
    //   410: astore 9
    //   412: aload 10
    //   414: astore_0
    //   415: goto -172 -> 243
    //   418: astore 9
    //   420: aconst_null
    //   421: astore 10
    //   423: aload_0
    //   424: astore 8
    //   426: aload 10
    //   428: astore_0
    //   429: goto -230 -> 199
    //   432: astore 10
    //   434: aload 8
    //   436: astore 9
    //   438: aload_0
    //   439: astore 8
    //   441: aload 9
    //   443: astore_0
    //   444: aload 10
    //   446: astore 9
    //   448: goto -249 -> 199
    //   451: astore 10
    //   453: aload_0
    //   454: astore 9
    //   456: aload 8
    //   458: astore_0
    //   459: aload 10
    //   461: astore 8
    //   463: goto -220 -> 243
    //   466: astore 9
    //   468: goto -180 -> 288
    //   471: astore 10
    //   473: aload_0
    //   474: astore 9
    //   476: aload 8
    //   478: astore_0
    //   479: aload 10
    //   481: astore 8
    //   483: goto -139 -> 344
    //   486: astore 10
    //   488: aload 8
    //   490: astore 9
    //   492: aload 10
    //   494: astore 8
    //   496: goto -162 -> 334
    //   499: astore 10
    //   501: aload 8
    //   503: astore 9
    //   505: aload 10
    //   507: astore 8
    //   509: goto -266 -> 243
    //   512: lconst_0
    //   513: lstore 4
    //   515: goto -402 -> 113
    //   518: lconst_0
    //   519: lstore_2
    //   520: goto -360 -> 160
    //   523: goto -344 -> 179
    //   526: goto -356 -> 170
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	529	0	paramContext	Context
    //   16	36	1	i	int
    //   150	370	2	l1	long
    //   102	412	4	l2	long
    //   1	176	6	l3	long
    //   86	124	8	localBufferedReader	BufferedReader
    //   239	23	8	localObject1	Object
    //   286	21	8	localObject2	Object
    //   326	37	8	localObject3	Object
    //   381	1	8	localObject4	Object
    //   399	1	8	localObject5	Object
    //   404	1	8	localObject6	Object
    //   424	84	8	localObject7	Object
    //   10	1	9	localObject8	Object
    //   192	57	9	localException1	Exception
    //   280	9	9	localException2	Exception
    //   329	59	9	localContext1	Context
    //   395	1	9	localException3	Exception
    //   410	1	9	localContext2	Context
    //   418	1	9	localException4	Exception
    //   436	19	9	localObject9	Object
    //   466	1	9	localException5	Exception
    //   474	30	9	localObject10	Object
    //   336	91	10	localContext3	Context
    //   432	13	10	localException6	Exception
    //   451	9	10	localObject11	Object
    //   471	9	10	localObject12	Object
    //   486	7	10	localObject13	Object
    //   499	7	10	localObject14	Object
    //   4	394	11	localObject15	Object
    //   7	325	12	localObject16	Object
    //   64	54	13	str	String
    // Exception table:
    //   from	to	target	type
    //   66	75	192	java/lang/Exception
    //   209	214	228	java/lang/Exception
    //   218	222	228	java/lang/Exception
    //   66	75	239	finally
    //   248	253	264	java/lang/Exception
    //   257	261	264	java/lang/Exception
    //   104	113	272	java/lang/Exception
    //   113	123	280	java/lang/Exception
    //   297	301	316	java/lang/Exception
    //   306	311	316	java/lang/Exception
    //   113	123	326	finally
    //   349	354	365	java/lang/Exception
    //   358	362	365	java/lang/Exception
    //   151	160	373	java/lang/Exception
    //   123	136	381	finally
    //   123	136	395	java/lang/Exception
    //   75	88	404	finally
    //   75	88	418	java/lang/Exception
    //   88	104	432	java/lang/Exception
    //   88	104	451	finally
    //   136	151	466	java/lang/Exception
    //   136	151	471	finally
    //   288	293	486	finally
    //   199	204	499	finally
  }
  
  private static int getUid(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 1).uid;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
  
  public static int getVersionCode(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 16384).versionCode;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static int getWidthPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.widthPixels;
  }
}
