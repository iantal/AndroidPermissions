package com.klw2.json;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.ResourceBundle;
import java.util.Set;

public class JSONObject
{
  public static final Object NULL = new a((byte)0);
  private final Map map = new HashMap();
  
  public JSONObject() {}
  
  public JSONObject(JSONObject paramJSONObject, String[] paramArrayOfString)
  {
    this();
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfString.length) {
        return;
      }
      try
      {
        putOnce(paramArrayOfString[i], paramJSONObject.opt(paramArrayOfString[i]));
        i += 1;
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
    }
  }
  
  public JSONObject(JSONTokener paramJSONTokener)
  {
    this();
    if (paramJSONTokener.nextClean() != '{') {
      throw paramJSONTokener.syntaxError("A JSONObject text must begin with '{'");
    }
    do
    {
      paramJSONTokener.back();
      String str;
      switch (paramJSONTokener.nextClean())
      {
      default: 
        paramJSONTokener.back();
        str = paramJSONTokener.nextValue().toString();
        if (paramJSONTokener.nextClean() != ':') {
          throw paramJSONTokener.syntaxError("Expected a ':' after a key");
        }
      case '\000': 
        throw paramJSONTokener.syntaxError("A JSONObject text must end with '}'");
        putOnce(str, paramJSONTokener.nextValue());
        switch (paramJSONTokener.nextClean())
        {
        default: 
          throw paramJSONTokener.syntaxError("Expected a ',' or '}'");
        }
        break;
      }
    } while (paramJSONTokener.nextClean() != '}');
  }
  
  public JSONObject(Object paramObject)
  {
    this();
    populateMap(paramObject);
  }
  
  public JSONObject(Object paramObject, String[] paramArrayOfString)
  {
    this();
    Class localClass = paramObject.getClass();
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfString.length) {
        return;
      }
      String str = paramArrayOfString[i];
      try
      {
        putOpt(str, localClass.getField(str).get(paramObject));
        i += 1;
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
    }
  }
  
  public JSONObject(String paramString)
  {
    this(new JSONTokener(paramString));
  }
  
  public JSONObject(String paramString, Locale paramLocale)
  {
    this();
    ResourceBundle localResourceBundle = ResourceBundle.getBundle(paramString, paramLocale, Thread.currentThread().getContextClassLoader());
    Enumeration localEnumeration = localResourceBundle.getKeys();
    Object localObject;
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        return;
      }
      localObject = localEnumeration.nextElement();
    } while (localObject == null);
    String[] arrayOfString = ((String)localObject).split("\\.");
    int j = arrayOfString.length - 1;
    int i = 0;
    for (paramLocale = this;; paramLocale = paramString)
    {
      if (i >= j)
      {
        paramLocale.put(arrayOfString[j], localResourceBundle.getString((String)localObject));
        break;
      }
      String str = arrayOfString[i];
      JSONObject localJSONObject = paramLocale.optJSONObject(str);
      paramString = localJSONObject;
      if (localJSONObject == null)
      {
        paramString = new JSONObject();
        paramLocale.put(str, paramString);
      }
      i += 1;
    }
  }
  
  public JSONObject(Map paramMap)
  {
    if (paramMap != null) {
      paramMap = paramMap.entrySet().iterator();
    }
    for (;;)
    {
      if (!paramMap.hasNext()) {
        return;
      }
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      Object localObject = localEntry.getValue();
      if (localObject != null) {
        this.map.put((String)localEntry.getKey(), wrap(localObject));
      }
    }
  }
  
  public static String doubleToString(double paramDouble)
  {
    Object localObject;
    if ((Double.isInfinite(paramDouble)) || (Double.isNaN(paramDouble))) {
      localObject = "null";
    }
    String str;
    do
    {
      do
      {
        do
        {
          return localObject;
          str = Double.toString(paramDouble);
          localObject = str;
        } while (str.indexOf('.') <= 0);
        localObject = str;
      } while (str.indexOf('e') >= 0);
      localObject = str;
    } while (str.indexOf('E') >= 0);
    for (;;)
    {
      if (!str.endsWith("0"))
      {
        localObject = str;
        if (!str.endsWith(".")) {
          break;
        }
        return str.substring(0, str.length() - 1);
      }
      str = str.substring(0, str.length() - 1);
    }
  }
  
  public static String[] getNames(JSONObject paramJSONObject)
  {
    int i = paramJSONObject.length();
    if (i == 0) {
      return null;
    }
    paramJSONObject = paramJSONObject.keys();
    String[] arrayOfString = new String[i];
    i = 0;
    while (paramJSONObject.hasNext())
    {
      arrayOfString[i] = ((String)paramJSONObject.next());
      i += 1;
    }
    return arrayOfString;
  }
  
  public static String[] getNames(Object paramObject)
  {
    String[] arrayOfString = null;
    if (paramObject == null) {
      paramObject = arrayOfString;
    }
    Field[] arrayOfField;
    int j;
    do
    {
      return paramObject;
      arrayOfField = paramObject.getClass().getFields();
      j = arrayOfField.length;
      paramObject = arrayOfString;
    } while (j == 0);
    arrayOfString = new String[j];
    int i = 0;
    for (;;)
    {
      paramObject = arrayOfString;
      if (i >= j) {
        break;
      }
      arrayOfString[i] = arrayOfField[i].getName();
      i += 1;
    }
  }
  
  static final void indent(Writer paramWriter, int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {
        return;
      }
      paramWriter.write(32);
      i += 1;
    }
  }
  
  public static String numberToString(Number paramNumber)
  {
    if (paramNumber == null) {
      throw new JSONException("Null pointer");
    }
    testValidity(paramNumber);
    String str = paramNumber.toString();
    paramNumber = str;
    if (str.indexOf('.') > 0)
    {
      paramNumber = str;
      if (str.indexOf('e') < 0)
      {
        paramNumber = str;
        if (str.indexOf('E') >= 0) {}
      }
    }
    for (;;)
    {
      if (!str.endsWith("0"))
      {
        paramNumber = str;
        if (str.endsWith(".")) {
          paramNumber = str.substring(0, str.length() - 1);
        }
        return paramNumber;
      }
      str = str.substring(0, str.length() - 1);
    }
  }
  
  private void populateMap(Object paramObject)
  {
    int j = 0;
    Object localObject1 = paramObject.getClass();
    int i;
    Method[] arrayOfMethod;
    if (((Class)localObject1).getClassLoader() != null)
    {
      i = 1;
      if (i != 0)
      {
        arrayOfMethod = ((Class)localObject1).getMethods();
        i = j;
      }
    }
    for (;;)
    {
      if (i >= arrayOfMethod.length)
      {
        return;
        arrayOfMethod = ((Class)localObject1).getDeclaredMethods();
        i = j;
      }
      else
      {
        Method localMethod = arrayOfMethod[i];
        try
        {
          if (Modifier.isPublic(localMethod.getModifiers()))
          {
            Object localObject2 = localMethod.getName();
            localObject1 = "";
            if (((String)localObject2).startsWith("get")) {
              if (!"getClass".equals(localObject2))
              {
                boolean bool = "getDeclaringClass".equals(localObject2);
                if (!bool) {}
              }
              else
              {
                localObject1 = "";
                if ((((String)localObject1).length() <= 0) || (!Character.isUpperCase(((String)localObject1).charAt(0))) || (localMethod.getParameterTypes().length != 0)) {
                  break label294;
                }
                if (((String)localObject1).length() != 1) {
                  break label234;
                }
                localObject2 = ((String)localObject1).toLowerCase();
              }
            }
            for (;;)
            {
              localObject1 = localMethod.invoke(paramObject, null);
              if (localObject1 == null) {
                break label294;
              }
              this.map.put(localObject2, wrap(localObject1));
              break label294;
              localObject1 = ((String)localObject2).substring(3);
              break;
              if (!((String)localObject2).startsWith("is")) {
                break;
              }
              localObject1 = ((String)localObject2).substring(2);
              break;
              label234:
              localObject2 = localObject1;
              if (!Character.isUpperCase(((String)localObject1).charAt(1))) {
                localObject2 = ((String)localObject1).substring(0, 1).toLowerCase() + ((String)localObject1).substring(1);
              }
            }
            i = 0;
          }
        }
        catch (Exception localException)
        {
          label294:
          i += 1;
        }
      }
    }
  }
  
  public static Writer quote(String paramString, Writer paramWriter)
  {
    if ((paramString == null) || (paramString.length() == 0))
    {
      paramWriter.write("\"\"");
      return paramWriter;
    }
    int m = paramString.length();
    paramWriter.write(34);
    int i = 0;
    int j = 0;
    if (j >= m)
    {
      paramWriter.write(34);
      return paramWriter;
    }
    int k = paramString.charAt(j);
    switch (k)
    {
    default: 
      if ((k < 32) || ((k >= 128) && (k < 160)) || ((k >= 8192) && (k < 8448)))
      {
        paramWriter.write("\\u");
        String str = Integer.toHexString(k);
        paramWriter.write("0000", 0, 4 - str.length());
        paramWriter.write(str);
      }
      break;
    }
    for (;;)
    {
      j += 1;
      i = k;
      break;
      paramWriter.write(92);
      paramWriter.write(k);
      continue;
      if (i == 60) {
        paramWriter.write(92);
      }
      paramWriter.write(k);
      continue;
      paramWriter.write("\\b");
      continue;
      paramWriter.write("\\t");
      continue;
      paramWriter.write("\\n");
      continue;
      paramWriter.write("\\f");
      continue;
      paramWriter.write("\\r");
      continue;
      paramWriter.write(k);
    }
  }
  
  public static String quote(String paramString)
  {
    StringWriter localStringWriter = new StringWriter();
    synchronized (localStringWriter.getBuffer())
    {
      try
      {
        paramString = quote(paramString, localStringWriter).toString();
        return paramString;
      }
      catch (IOException paramString)
      {
        return "";
      }
    }
  }
  
  public static Object stringToValue(String paramString)
  {
    if (paramString.equals("")) {}
    for (;;)
    {
      return paramString;
      if (paramString.equalsIgnoreCase("true")) {
        return Boolean.TRUE;
      }
      if (paramString.equalsIgnoreCase("false")) {
        return Boolean.FALSE;
      }
      if (paramString.equalsIgnoreCase("null")) {
        return NULL;
      }
      int i = paramString.charAt(0);
      if (((i >= 48) && (i <= 57)) || (i == 45)) {
        try
        {
          Object localObject;
          if ((paramString.indexOf('.') >= 0) || (paramString.indexOf('e') >= 0) || (paramString.indexOf('E') >= 0))
          {
            localObject = Double.valueOf(paramString);
            if ((!((Double)localObject).isInfinite()) && (!((Double)localObject).isNaN())) {
              return localObject;
            }
          }
          else
          {
            localObject = new Long(paramString);
            if (paramString.equals(((Long)localObject).toString()))
            {
              if (((Long)localObject).longValue() == ((Long)localObject).intValue())
              {
                i = ((Long)localObject).intValue();
                return Integer.valueOf(i);
              }
              return localObject;
            }
          }
        }
        catch (Exception localException) {}
      }
    }
    return paramString;
  }
  
  public static void testValidity(Object paramObject)
  {
    if (paramObject != null) {
      if ((paramObject instanceof Double))
      {
        if ((((Double)paramObject).isInfinite()) || (((Double)paramObject).isNaN())) {
          throw new JSONException("JSON does not allow non-finite numbers.");
        }
      }
      else if (((paramObject instanceof Float)) && ((((Float)paramObject).isInfinite()) || (((Float)paramObject).isNaN()))) {
        throw new JSONException("JSON does not allow non-finite numbers.");
      }
    }
  }
  
  public static String valueToString(Object paramObject)
  {
    if ((paramObject == null) || (paramObject.equals(null))) {
      return "null";
    }
    if ((paramObject instanceof JSONString))
    {
      try
      {
        paramObject = ((JSONString)paramObject).toJSONString();
        if ((paramObject instanceof String)) {
          return (String)paramObject;
        }
      }
      catch (Exception paramObject)
      {
        throw new JSONException(paramObject);
      }
      throw new JSONException("Bad value from toJSONString: " + paramObject);
    }
    if ((paramObject instanceof Number)) {
      return numberToString((Number)paramObject);
    }
    if (((paramObject instanceof Boolean)) || ((paramObject instanceof JSONObject)) || ((paramObject instanceof JSONArray))) {
      return paramObject.toString();
    }
    if ((paramObject instanceof Map)) {
      return new JSONObject((Map)paramObject).toString();
    }
    if ((paramObject instanceof Collection)) {
      return new JSONArray((Collection)paramObject).toString();
    }
    if (paramObject.getClass().isArray()) {
      return new JSONArray(paramObject).toString();
    }
    return quote(paramObject.toString());
  }
  
  public static Object wrap(Object paramObject)
  {
    if (paramObject == null) {}
    try
    {
      return NULL;
    }
    catch (Exception paramObject)
    {
      return null;
    }
    if ((!(paramObject instanceof JSONObject)) && (!(paramObject instanceof JSONArray)) && (!NULL.equals(paramObject)) && (!(paramObject instanceof JSONString)) && (!(paramObject instanceof Byte)) && (!(paramObject instanceof Character)) && (!(paramObject instanceof Short)) && (!(paramObject instanceof Integer)) && (!(paramObject instanceof Long)) && (!(paramObject instanceof Boolean)) && (!(paramObject instanceof Float)) && (!(paramObject instanceof Double)) && (!(paramObject instanceof String)))
    {
      if ((paramObject instanceof Collection)) {
        return new JSONArray((Collection)paramObject);
      }
      if (paramObject.getClass().isArray()) {
        return new JSONArray(paramObject);
      }
      if ((paramObject instanceof Map)) {
        return new JSONObject((Map)paramObject);
      }
      Object localObject = paramObject.getClass().getPackage();
      if (localObject != null) {}
      for (localObject = ((Package)localObject).getName();; localObject = "")
      {
        if ((((String)localObject).startsWith("java.")) || (((String)localObject).startsWith("javax.")) || (paramObject.getClass().getClassLoader() == null)) {
          return paramObject.toString();
        }
        paramObject = new JSONObject(paramObject);
        return paramObject;
      }
    }
    return paramObject;
  }
  
  static final Writer writeValue(Writer paramWriter, Object paramObject, int paramInt1, int paramInt2)
  {
    if ((paramObject == null) || (paramObject.equals(null)))
    {
      paramWriter.write("null");
      return paramWriter;
    }
    if ((paramObject instanceof JSONObject))
    {
      ((JSONObject)paramObject).write(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof JSONArray))
    {
      ((JSONArray)paramObject).write(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof Map))
    {
      new JSONObject((Map)paramObject).write(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof Collection))
    {
      new JSONArray((Collection)paramObject).write(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if (paramObject.getClass().isArray())
    {
      new JSONArray(paramObject).write(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof Number))
    {
      paramWriter.write(numberToString((Number)paramObject));
      return paramWriter;
    }
    if ((paramObject instanceof Boolean))
    {
      paramWriter.write(paramObject.toString());
      return paramWriter;
    }
    if ((paramObject instanceof JSONString)) {
      for (;;)
      {
        try
        {
          String str = ((JSONString)paramObject).toJSONString();
          if (str != null)
          {
            paramObject = str.toString();
            paramWriter.write(paramObject);
            return paramWriter;
          }
        }
        catch (Exception paramWriter)
        {
          throw new JSONException(paramWriter);
        }
        paramObject = quote(paramObject.toString());
      }
    }
    quote(paramObject.toString(), paramWriter);
    return paramWriter;
  }
  
  public JSONObject accumulate(String paramString, Object paramObject)
  {
    testValidity(paramObject);
    Object localObject = opt(paramString);
    if (localObject == null)
    {
      localObject = paramObject;
      if ((paramObject instanceof JSONArray)) {
        localObject = new JSONArray().put(paramObject);
      }
      put(paramString, localObject);
      return this;
    }
    if ((localObject instanceof JSONArray))
    {
      ((JSONArray)localObject).put(paramObject);
      return this;
    }
    put(paramString, new JSONArray().put(localObject).put(paramObject));
    return this;
  }
  
  public JSONObject append(String paramString, Object paramObject)
  {
    testValidity(paramObject);
    Object localObject = opt(paramString);
    if (localObject == null)
    {
      put(paramString, new JSONArray().put(paramObject));
      return this;
    }
    if ((localObject instanceof JSONArray))
    {
      put(paramString, ((JSONArray)localObject).put(paramObject));
      return this;
    }
    throw new JSONException("JSONObject[" + paramString + "] is not a JSONArray.");
  }
  
  public Object get(String paramString)
  {
    if (paramString == null) {
      throw new JSONException("Null key.");
    }
    Object localObject = opt(paramString);
    if (localObject == null) {
      throw new JSONException("JSONObject[" + quote(paramString) + "] not found.");
    }
    return localObject;
  }
  
  public Object get(String paramString, Object paramObject)
  {
    try
    {
      paramString = get(paramString);
      return paramString;
    }
    catch (Exception paramString) {}
    return paramObject;
  }
  
  public boolean getBoolean(String paramString)
  {
    Object localObject = get(paramString);
    if ((localObject.equals(Boolean.FALSE)) || (((localObject instanceof String)) && (((String)localObject).equalsIgnoreCase("false")))) {
      return false;
    }
    if ((localObject.equals(Boolean.TRUE)) || (((localObject instanceof String)) && (((String)localObject).equalsIgnoreCase("true")))) {
      return true;
    }
    throw new JSONException("JSONObject[" + quote(paramString) + "] is not a Boolean.");
  }
  
  public boolean getBoolean(String paramString, boolean paramBoolean)
  {
    try
    {
      boolean bool = getBoolean(paramString);
      return bool;
    }
    catch (Exception paramString) {}
    return paramBoolean;
  }
  
  public double getDouble(String paramString)
  {
    Object localObject = get(paramString);
    try
    {
      if ((localObject instanceof Number)) {
        return ((Number)localObject).doubleValue();
      }
      double d = Double.parseDouble((String)localObject);
      return d;
    }
    catch (Exception localException)
    {
      throw new JSONException("JSONObject[" + quote(paramString) + "] is not a number.");
    }
  }
  
  public double getDouble(String paramString, double paramDouble)
  {
    try
    {
      double d = getDouble(paramString);
      return d;
    }
    catch (Exception paramString) {}
    return paramDouble;
  }
  
  public int getInt(String paramString)
  {
    Object localObject = get(paramString);
    try
    {
      if ((localObject instanceof Number)) {
        return ((Number)localObject).intValue();
      }
      int i = Integer.parseInt((String)localObject);
      return i;
    }
    catch (Exception localException)
    {
      throw new JSONException("JSONObject[" + quote(paramString) + "] is not an int.");
    }
  }
  
  public int getInt(String paramString, int paramInt)
  {
    try
    {
      int i = getInt(paramString);
      return i;
    }
    catch (Exception paramString) {}
    return paramInt;
  }
  
  public JSONArray getJSONArray(String paramString)
  {
    Object localObject = get(paramString);
    if ((localObject instanceof JSONArray)) {
      return (JSONArray)localObject;
    }
    throw new JSONException("JSONObject[" + quote(paramString) + "] is not a JSONArray.");
  }
  
  public JSONArray getJSONArray(String paramString, JSONArray paramJSONArray)
  {
    try
    {
      paramString = getJSONArray(paramString);
      return paramString;
    }
    catch (Exception paramString) {}
    return paramJSONArray;
  }
  
  public JSONObject getJSONObject(String paramString)
  {
    Object localObject = get(paramString);
    if ((localObject instanceof JSONObject)) {
      return (JSONObject)localObject;
    }
    throw new JSONException("JSONObject[" + quote(paramString) + "] is not a JSONObject.");
  }
  
  public JSONObject getJSONObject(String paramString, JSONObject paramJSONObject)
  {
    try
    {
      paramString = getJSONObject(paramString);
      return paramString;
    }
    catch (Exception paramString) {}
    return paramJSONObject;
  }
  
  public long getLong(String paramString)
  {
    Object localObject = get(paramString);
    try
    {
      if ((localObject instanceof Number)) {
        return ((Number)localObject).longValue();
      }
      long l = Long.parseLong((String)localObject);
      return l;
    }
    catch (Exception localException)
    {
      throw new JSONException("JSONObject[" + quote(paramString) + "] is not a long.");
    }
  }
  
  public long getLong(String paramString, long paramLong)
  {
    try
    {
      long l = getLong(paramString);
      return l;
    }
    catch (Exception paramString) {}
    return paramLong;
  }
  
  public String getString(String paramString)
  {
    Object localObject = get(paramString);
    if ((localObject instanceof String)) {
      return (String)localObject;
    }
    throw new JSONException("JSONObject[" + quote(paramString) + "] not a string.");
  }
  
  public String getString(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = getString(paramString1);
      return paramString1;
    }
    catch (Exception paramString1) {}
    return paramString2;
  }
  
  public boolean has(String paramString)
  {
    return this.map.containsKey(paramString);
  }
  
  public JSONObject increment(String paramString)
  {
    Object localObject = opt(paramString);
    if (localObject == null)
    {
      put(paramString, 1);
      return this;
    }
    if ((localObject instanceof Integer))
    {
      put(paramString, ((Integer)localObject).intValue() + 1);
      return this;
    }
    if ((localObject instanceof Long))
    {
      put(paramString, ((Long)localObject).longValue() + 1L);
      return this;
    }
    if ((localObject instanceof Double))
    {
      put(paramString, ((Double)localObject).doubleValue() + 1.0D);
      return this;
    }
    if ((localObject instanceof Float))
    {
      put(paramString, ((Float)localObject).floatValue() + 1.0F);
      return this;
    }
    throw new JSONException("Unable to increment [" + quote(paramString) + "].");
  }
  
  public boolean isNull(String paramString)
  {
    return NULL.equals(opt(paramString));
  }
  
  public Set keySet()
  {
    return this.map.keySet();
  }
  
  public Iterator keys()
  {
    return keySet().iterator();
  }
  
  public int length()
  {
    return this.map.size();
  }
  
  public JSONArray names()
  {
    JSONArray localJSONArray = new JSONArray();
    Object localObject = keys();
    for (;;)
    {
      if (!((Iterator)localObject).hasNext())
      {
        localObject = localJSONArray;
        if (localJSONArray.length() == 0) {
          localObject = null;
        }
        return localObject;
      }
      localJSONArray.put(((Iterator)localObject).next());
    }
  }
  
  public Object opt(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return this.map.get(paramString);
  }
  
  public boolean optBoolean(String paramString)
  {
    return optBoolean(paramString, false);
  }
  
  public boolean optBoolean(String paramString, boolean paramBoolean)
  {
    try
    {
      boolean bool = getBoolean(paramString);
      return bool;
    }
    catch (Exception paramString) {}
    return paramBoolean;
  }
  
  public double optDouble(String paramString)
  {
    return optDouble(paramString, NaN.0D);
  }
  
  public double optDouble(String paramString, double paramDouble)
  {
    try
    {
      double d = getDouble(paramString);
      return d;
    }
    catch (Exception paramString) {}
    return paramDouble;
  }
  
  public int optInt(String paramString)
  {
    return optInt(paramString, 0);
  }
  
  public int optInt(String paramString, int paramInt)
  {
    try
    {
      int i = getInt(paramString);
      return i;
    }
    catch (Exception paramString) {}
    return paramInt;
  }
  
  public JSONArray optJSONArray(String paramString)
  {
    paramString = opt(paramString);
    if ((paramString instanceof JSONArray)) {
      return (JSONArray)paramString;
    }
    return null;
  }
  
  public JSONObject optJSONObject(String paramString)
  {
    paramString = opt(paramString);
    if ((paramString instanceof JSONObject)) {
      return (JSONObject)paramString;
    }
    return null;
  }
  
  public long optLong(String paramString)
  {
    return optLong(paramString, 0L);
  }
  
  public long optLong(String paramString, long paramLong)
  {
    try
    {
      long l = getLong(paramString);
      return l;
    }
    catch (Exception paramString) {}
    return paramLong;
  }
  
  public String optString(String paramString)
  {
    return optString(paramString, "");
  }
  
  public String optString(String paramString1, String paramString2)
  {
    paramString1 = opt(paramString1);
    if (NULL.equals(paramString1)) {
      return paramString2;
    }
    return paramString1.toString();
  }
  
  public JSONObject put(String paramString, double paramDouble)
  {
    put(paramString, new Double(paramDouble));
    return this;
  }
  
  public JSONObject put(String paramString, int paramInt)
  {
    put(paramString, new Integer(paramInt));
    return this;
  }
  
  public JSONObject put(String paramString, long paramLong)
  {
    put(paramString, new Long(paramLong));
    return this;
  }
  
  public JSONObject put(String paramString, Object paramObject)
  {
    if (paramString == null) {
      throw new NullPointerException("Null key.");
    }
    if (paramObject != null)
    {
      testValidity(paramObject);
      this.map.put(paramString, paramObject);
      return this;
    }
    remove(paramString);
    return this;
  }
  
  public JSONObject put(String paramString, Collection paramCollection)
  {
    put(paramString, new JSONArray(paramCollection));
    return this;
  }
  
  public JSONObject put(String paramString, Map paramMap)
  {
    put(paramString, new JSONObject(paramMap));
    return this;
  }
  
  public JSONObject put(String paramString, boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (Boolean localBoolean = Boolean.TRUE;; localBoolean = Boolean.FALSE)
    {
      put(paramString, localBoolean);
      return this;
    }
  }
  
  public JSONObject putOnce(String paramString, Object paramObject)
  {
    if ((paramString != null) && (paramObject != null))
    {
      if (opt(paramString) != null) {
        throw new JSONException("Duplicate key \"" + paramString + "\"");
      }
      put(paramString, paramObject);
    }
    return this;
  }
  
  public JSONObject putOpt(String paramString, Object paramObject)
  {
    if ((paramString != null) && (paramObject != null)) {
      put(paramString, paramObject);
    }
    return this;
  }
  
  public Object remove(String paramString)
  {
    return this.map.remove(paramString);
  }
  
  public boolean similar(Object paramObject)
  {
    try
    {
      if (!(paramObject instanceof JSONObject)) {
        return false;
      }
      Object localObject1 = keySet();
      if (!((Set)localObject1).equals(((JSONObject)paramObject).keySet())) {
        return false;
      }
      localObject1 = ((Set)localObject1).iterator();
      boolean bool;
      do
      {
        Object localObject3;
        Object localObject2;
        do
        {
          do
          {
            if (!((Iterator)localObject1).hasNext()) {
              return true;
            }
            localObject3 = (String)((Iterator)localObject1).next();
            localObject2 = get((String)localObject3);
            localObject3 = ((JSONObject)paramObject).get((String)localObject3);
            if (!(localObject2 instanceof JSONObject)) {
              break;
            }
          } while (((JSONObject)localObject2).similar(localObject3));
          return false;
          if (!(localObject2 instanceof JSONArray)) {
            break;
          }
        } while (((JSONArray)localObject2).similar(localObject3));
        return false;
        bool = localObject2.equals(localObject3);
      } while (bool);
      return false;
    }
    catch (Throwable paramObject) {}
    return false;
  }
  
  public JSONArray toJSONArray(JSONArray paramJSONArray)
  {
    if ((paramJSONArray == null) || (paramJSONArray.length() == 0)) {
      return null;
    }
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    while (i < paramJSONArray.length())
    {
      localJSONArray.put(opt(paramJSONArray.getString(i)));
      i += 1;
    }
    return localJSONArray;
  }
  
  public String toString()
  {
    try
    {
      String str = toString(0);
      return str;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public String toString(int paramInt)
  {
    Object localObject1 = new StringWriter();
    synchronized (((StringWriter)localObject1).getBuffer())
    {
      localObject1 = write((Writer)localObject1, paramInt, 0).toString();
      return localObject1;
    }
  }
  
  public Writer write(Writer paramWriter)
  {
    return write(paramWriter, 0, 0);
  }
  
  Writer write(Writer paramWriter, int paramInt1, int paramInt2)
  {
    int i = 0;
    for (;;)
    {
      int j;
      try
      {
        j = length();
        localObject1 = keys();
        paramWriter.write(123);
        if (j != 1) {
          break label214;
        }
        localObject1 = ((Iterator)localObject1).next();
        paramWriter.write(quote(localObject1.toString()));
        paramWriter.write(58);
        if (paramInt1 > 0) {
          paramWriter.write(32);
        }
        writeValue(paramWriter, this.map.get(localObject1), paramInt1, paramInt2);
        paramWriter.write(125);
        return paramWriter;
      }
      catch (IOException paramWriter)
      {
        Object localObject1;
        Object localObject2;
        throw new JSONException(paramWriter);
      }
      localObject2 = ((Iterator)localObject1).next();
      if (i != 0) {
        paramWriter.write(44);
      }
      if (paramInt1 > 0) {
        paramWriter.write(10);
      }
      indent(paramWriter, j);
      paramWriter.write(quote(localObject2.toString()));
      paramWriter.write(58);
      if (paramInt1 > 0) {
        paramWriter.write(32);
      }
      writeValue(paramWriter, this.map.get(localObject2), paramInt1, j);
      i = 1;
      if (!((Iterator)localObject1).hasNext())
      {
        if (paramInt1 > 0) {
          paramWriter.write(10);
        }
        indent(paramWriter, paramInt2);
        continue;
        label214:
        if (j != 0) {
          j = paramInt2 + paramInt1;
        }
      }
    }
  }
}
