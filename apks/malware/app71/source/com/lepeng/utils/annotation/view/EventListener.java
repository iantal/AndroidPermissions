package com.lepeng.utils.annotation.view;

import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.lang.reflect.Method;

public class EventListener
  implements View.OnClickListener, View.OnLongClickListener, AdapterView.OnItemClickListener, AdapterView.OnItemLongClickListener, AdapterView.OnItemSelectedListener
{
  private Object b;
  private String m;
  private String n;
  private String o;
  private String p;
  private String q;
  private String r;
  
  public EventListener(Object paramObject)
  {
    this.b = paramObject;
  }
  
  private static Object a(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { View.class });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new IllegalArgumentException("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      CheckedExceptionHandler.handleException(paramObject);
    }
    return null;
  }
  
  private static boolean a(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {}
    for (;;)
    {
      return false;
      try
      {
        Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { View.class });
        if (localMethod != null)
        {
          paramObject = localMethod.invoke(paramObject, paramVarArgs);
          if (paramObject != null) {
            return Boolean.valueOf(paramObject.toString()).booleanValue();
          }
        }
        else
        {
          throw new IllegalArgumentException("no such method:" + paramString);
        }
      }
      catch (Exception paramObject)
      {
        CheckedExceptionHandler.handleException(paramObject);
      }
    }
    return false;
  }
  
  private static Object b(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class, View.class, Integer.TYPE, Long.TYPE });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new IllegalArgumentException("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      CheckedExceptionHandler.handleException(paramObject);
    }
    return null;
  }
  
  private static boolean b(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      throw new IllegalArgumentException("invokeItemLongClickMethod: handler is null :");
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class, View.class, Integer.TYPE, Long.TYPE });
      if (localMethod != null)
      {
        paramObject = localMethod.invoke(paramObject, paramVarArgs);
        if (paramObject == null) {}
        for (boolean bool = false;; bool = Boolean.valueOf(paramObject.toString()).booleanValue()) {
          return Boolean.valueOf(bool).booleanValue();
        }
      }
      throw new IllegalArgumentException("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      CheckedExceptionHandler.handleException(paramObject);
    }
    return false;
  }
  
  private static Object c(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class, View.class, Integer.TYPE, Long.TYPE });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new IllegalArgumentException("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      CheckedExceptionHandler.handleException(paramObject);
    }
    return null;
  }
  
  private static Object d(Object paramObject, String paramString, Object... paramVarArgs)
  {
    if (paramObject == null) {
      return null;
    }
    try
    {
      Method localMethod = paramObject.getClass().getDeclaredMethod(paramString, new Class[] { AdapterView.class });
      if (localMethod != null) {
        return localMethod.invoke(paramObject, paramVarArgs);
      }
      throw new IllegalArgumentException("no such method:" + paramString);
    }
    catch (Exception paramObject)
    {
      CheckedExceptionHandler.handleException(paramObject);
    }
    return null;
  }
  
  public EventListener click(String paramString)
  {
    this.m = paramString;
    return this;
  }
  
  public EventListener itemClick(String paramString)
  {
    this.o = paramString;
    return this;
  }
  
  public EventListener itemLongClick(String paramString)
  {
    this.r = paramString;
    return this;
  }
  
  public EventListener longClick(String paramString)
  {
    this.n = paramString;
    return this;
  }
  
  public EventListener noSelect(String paramString)
  {
    this.q = paramString;
    return this;
  }
  
  public void onClick(View paramView)
  {
    a(this.b, this.m, new Object[] { paramView });
  }
  
  public void onItemClick(AdapterView paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    b(this.b, this.o, new Object[] { paramAdapterView, paramView, Integer.valueOf(paramInt), Long.valueOf(paramLong) });
  }
  
  public boolean onItemLongClick(AdapterView paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    return b(this.b, this.r, new Object[] { paramAdapterView, paramView, Integer.valueOf(paramInt), Long.valueOf(paramLong) });
  }
  
  public void onItemSelected(AdapterView paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    c(this.b, this.p, new Object[] { paramAdapterView, paramView, Integer.valueOf(paramInt), Long.valueOf(paramLong) });
  }
  
  public boolean onLongClick(View paramView)
  {
    return a(this.b, this.n, new Object[] { paramView });
  }
  
  public void onNothingSelected(AdapterView paramAdapterView)
  {
    d(this.b, this.q, new Object[] { paramAdapterView });
  }
  
  public EventListener select(String paramString)
  {
    this.p = paramString;
    return this;
  }
}
