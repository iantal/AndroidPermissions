package com.lepeng.fastjson.parser;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONArray;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.JSONObject;
import com.lepeng.fastjson.parser.deserializer.FieldDeserializer;
import com.lepeng.fastjson.parser.deserializer.IntegerDeserializer;
import com.lepeng.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.lepeng.fastjson.parser.deserializer.ListResolveFieldDeserializer;
import com.lepeng.fastjson.parser.deserializer.LongDeserializer;
import com.lepeng.fastjson.parser.deserializer.MapResolveFieldDeserializer;
import com.lepeng.fastjson.parser.deserializer.ObjectDeserializer;
import com.lepeng.fastjson.parser.deserializer.StringDeserializer;
import com.lepeng.fastjson.util.TypeUtils;
import java.io.Closeable;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class DefaultJSONParser
  extends AbstractJSONParser
  implements Closeable
{
  public static final int NONE = 0;
  public static final int NeedToResolve = 1;
  public static final int TypeNameRedirect = 2;
  private static final Set jdField_a_of_type_JavaUtilSet = new HashSet();
  private DateFormat jdField_a_of_type_JavaTextDateFormat;
  private ParseContext[] jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext = new ParseContext[8];
  private final List b = new ArrayList();
  protected ParserConfig config;
  protected ParseContext context;
  private String f = JSON.DEFFAULT_DATE_FORMAT;
  private int g = 0;
  private int h = 0;
  protected final Object input;
  protected final JSONLexer lexer;
  protected final SymbolTable symbolTable;
  
  static
  {
    jdField_a_of_type_JavaUtilSet.add(Boolean.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Byte.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Short.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Integer.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Long.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Float.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Double.TYPE);
    jdField_a_of_type_JavaUtilSet.add(Boolean.class);
    jdField_a_of_type_JavaUtilSet.add(Byte.class);
    jdField_a_of_type_JavaUtilSet.add(Short.class);
    jdField_a_of_type_JavaUtilSet.add(Integer.class);
    jdField_a_of_type_JavaUtilSet.add(Long.class);
    jdField_a_of_type_JavaUtilSet.add(Float.class);
    jdField_a_of_type_JavaUtilSet.add(Double.class);
    jdField_a_of_type_JavaUtilSet.add(BigInteger.class);
    jdField_a_of_type_JavaUtilSet.add(BigDecimal.class);
    jdField_a_of_type_JavaUtilSet.add(String.class);
  }
  
  public DefaultJSONParser(JSONLexer paramJSONLexer)
  {
    this(paramJSONLexer, ParserConfig.getGlobalInstance());
  }
  
  public DefaultJSONParser(JSONLexer paramJSONLexer, ParserConfig paramParserConfig)
  {
    this(null, paramJSONLexer, paramParserConfig);
  }
  
  public DefaultJSONParser(Object paramObject, JSONLexer paramJSONLexer, ParserConfig paramParserConfig)
  {
    this.lexer = paramJSONLexer;
    this.input = paramObject;
    this.config = paramParserConfig;
    this.symbolTable = paramParserConfig.getSymbolTable();
    paramJSONLexer.nextToken(12);
  }
  
  public DefaultJSONParser(String paramString)
  {
    this(paramString, ParserConfig.getGlobalInstance(), JSON.DEFAULT_PARSER_FEATURE);
  }
  
  public DefaultJSONParser(String paramString, ParserConfig paramParserConfig)
  {
    this(paramString, new JSONScanner(paramString, JSON.DEFAULT_PARSER_FEATURE), paramParserConfig);
  }
  
  public DefaultJSONParser(String paramString, ParserConfig paramParserConfig, int paramInt)
  {
    this(paramString, new JSONScanner(paramString, paramInt), paramParserConfig);
  }
  
  public DefaultJSONParser(char[] paramArrayOfChar, int paramInt1, ParserConfig paramParserConfig, int paramInt2)
  {
    this(paramArrayOfChar, new JSONScanner(paramArrayOfChar, paramInt1, paramInt2), paramParserConfig);
  }
  
  private void a(ParseContext paramParseContext)
  {
    int i = this.g;
    this.g = (i + 1);
    if (i >= this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext.length)
    {
      ParseContext[] arrayOfParseContext = new ParseContext[this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext.length * 3 / 2];
      System.arraycopy(this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext, 0, arrayOfParseContext, 0, this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext.length);
      this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext = arrayOfParseContext;
    }
    this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext[i] = paramParseContext;
  }
  
  public final void accept(int paramInt)
  {
    JSONLexer localJSONLexer = getLexer();
    if (localJSONLexer.token() == paramInt)
    {
      localJSONLexer.nextToken();
      return;
    }
    throw new JSONException("syntax error, expect " + JSONToken.name(paramInt) + ", actual " + JSONToken.name(localJSONLexer.token()));
  }
  
  public final void accept(int paramInt1, int paramInt2)
  {
    JSONLexer localJSONLexer = getLexer();
    if (localJSONLexer.token() == paramInt1)
    {
      localJSONLexer.nextToken(paramInt2);
      return;
    }
    throw new JSONException("syntax error, expect " + JSONToken.name(paramInt1) + ", actual " + JSONToken.name(localJSONLexer.token()));
  }
  
  public void addResolveTask(DefaultJSONParser.ResolveTask paramResolveTask)
  {
    this.b.add(paramResolveTask);
  }
  
  public void checkListResolve(Collection paramCollection)
  {
    if (this.h == 1)
    {
      int i = paramCollection.size();
      paramCollection = (List)paramCollection;
      DefaultJSONParser.ResolveTask localResolveTask = getLastResolveTask();
      localResolveTask.setFieldDeserializer(new ListResolveFieldDeserializer(this, paramCollection, i - 1));
      localResolveTask.setOwnerContext(this.context);
      setResolveStatus(0);
    }
  }
  
  public void checkMapResolve(Map paramMap, String paramString)
  {
    if (this.h == 1)
    {
      paramMap = new MapResolveFieldDeserializer(paramMap, paramString);
      paramString = getLastResolveTask();
      paramString.setFieldDeserializer(paramMap);
      paramString.setOwnerContext(this.context);
      setResolveStatus(0);
    }
  }
  
  public void close()
  {
    JSONLexer localJSONLexer = getLexer();
    try
    {
      if ((isEnabled(Feature.AutoCloseSource)) && (localJSONLexer.token() != 20)) {
        throw new JSONException("not close json text, token : " + JSONToken.name(localJSONLexer.token()));
      }
    }
    finally
    {
      localJSONLexer.close();
    }
    localJSONLexer.close();
  }
  
  public void config(Feature paramFeature, boolean paramBoolean)
  {
    getLexer().config(paramFeature, paramBoolean);
  }
  
  public ParserConfig getConfig()
  {
    return this.config;
  }
  
  public ParseContext getContext()
  {
    return this.context;
  }
  
  public String getDateFomartPattern()
  {
    return this.f;
  }
  
  public DateFormat getDateFormat()
  {
    if (this.jdField_a_of_type_JavaTextDateFormat == null) {
      this.jdField_a_of_type_JavaTextDateFormat = new SimpleDateFormat(this.f);
    }
    return this.jdField_a_of_type_JavaTextDateFormat;
  }
  
  public String getInput()
  {
    if ((this.input instanceof char[])) {
      return new String((char[])this.input);
    }
    return this.input.toString();
  }
  
  public DefaultJSONParser.ResolveTask getLastResolveTask()
  {
    return (DefaultJSONParser.ResolveTask)this.b.get(this.b.size() - 1);
  }
  
  public JSONLexer getLexer()
  {
    return this.lexer;
  }
  
  public Object getObject(String paramString)
  {
    int i = 0;
    for (;;)
    {
      if (i >= this.g) {
        return null;
      }
      if (paramString.equals(this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext[i].getPath())) {
        return this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext[i].getObject();
      }
      i += 1;
    }
  }
  
  public int getResolveStatus()
  {
    return this.h;
  }
  
  public List getResolveTaskList()
  {
    return this.b;
  }
  
  public SymbolTable getSymbolTable()
  {
    return this.symbolTable;
  }
  
  public boolean isEnabled(Feature paramFeature)
  {
    return getLexer().isEnabled(paramFeature);
  }
  
  public Object parse()
  {
    return parse(null);
  }
  
  public Object parse(Object paramObject)
  {
    Object localObject1 = null;
    JSONLexer localJSONLexer = getLexer();
    switch (localJSONLexer.token())
    {
    case 5: 
    case 10: 
    case 11: 
    case 13: 
    case 15: 
    case 16: 
    case 17: 
    case 18: 
    case 19: 
    default: 
      throw new JSONException("syntax error, pos " + localJSONLexer.getBufferPosition());
    case 21: 
      localJSONLexer.nextToken();
      localObject1 = new HashSet();
      parseArray((Collection)localObject1, paramObject);
      paramObject = localObject1;
    }
    do
    {
      do
      {
        return paramObject;
        localJSONLexer.nextToken();
        localObject1 = new TreeSet();
        parseArray((Collection)localObject1, paramObject);
        return localObject1;
        localObject1 = new JSONArray();
        parseArray((Collection)localObject1, paramObject);
        return localObject1;
        return parseObject(new JSONObject(), paramObject);
        paramObject = localJSONLexer.integerValue();
        localJSONLexer.nextToken();
        return paramObject;
        paramObject = localJSONLexer.decimalValue(isEnabled(Feature.UseBigDecimal));
        localJSONLexer.nextToken();
        return paramObject;
        localObject1 = localJSONLexer.stringVal();
        localJSONLexer.nextToken(16);
        paramObject = localObject1;
      } while (!localJSONLexer.isEnabled(Feature.AllowISO8601DateFormat));
      paramObject = new JSONScanner((String)localObject1);
      try
      {
        if (paramObject.scanISO8601DateIfMatch())
        {
          localObject1 = paramObject.getCalendar().getTime();
          return localObject1;
        }
      }
      finally
      {
        paramObject.close();
      }
      paramObject.close();
      return localObject2;
      localJSONLexer.nextToken();
      return null;
      localJSONLexer.nextToken();
      return Boolean.TRUE;
      localJSONLexer.nextToken();
      return Boolean.FALSE;
      localJSONLexer.nextToken(18);
      if (localJSONLexer.token() != 18) {
        throw new JSONException("syntax error");
      }
      localJSONLexer.nextToken(10);
      accept(10);
      long l = localJSONLexer.integerValue().longValue();
      accept(2);
      accept(11);
      return new Date(l);
      paramObject = localObject2;
    } while (localJSONLexer.isBlankInput());
    throw new JSONException("unterminated json string, pos " + localJSONLexer.getBufferPosition());
  }
  
  public List parseArray(Class paramClass)
  {
    ArrayList localArrayList = new ArrayList();
    parseArray(paramClass, localArrayList);
    return localArrayList;
  }
  
  public void parseArray(Class paramClass, Collection paramCollection)
  {
    parseArray(paramClass, paramCollection);
  }
  
  public void parseArray(Type paramType, Collection paramCollection)
  {
    parseArray(paramType, paramCollection, null);
  }
  
  public void parseArray(Type paramType, Collection paramCollection, Object paramObject)
  {
    if ((this.lexer.token() == 21) || (this.lexer.token() == 22)) {
      this.lexer.nextToken();
    }
    if (this.lexer.token() != 14) {
      throw new JSONException("exepct '[', but " + JSONToken.name(this.lexer.token()));
    }
    Object localObject;
    ParseContext localParseContext;
    int i;
    if (Integer.TYPE == paramType)
    {
      localObject = IntegerDeserializer.instance;
      this.lexer.nextToken(2);
      localParseContext = getContext();
      setContext(paramCollection, paramObject);
      i = 0;
    }
    for (;;)
    {
      try
      {
        if (isEnabled(Feature.AllowArbitraryCommas))
        {
          if (this.lexer.token() == 16) {}
        }
        else
        {
          int j = this.lexer.token();
          if (j != 15) {
            break label235;
          }
          setContext(localParseContext);
          this.lexer.nextToken(16);
          return;
          if (String.class == paramType)
          {
            localObject = StringDeserializer.instance;
            this.lexer.nextToken(4);
            break;
          }
          localObject = this.config.getDeserializer(paramType);
          this.lexer.nextToken(((ObjectDeserializer)localObject).getFastMatchToken());
          break;
        }
        this.lexer.nextToken();
        continue;
        if (Integer.TYPE != paramType) {
          break label287;
        }
      }
      finally
      {
        setContext(localParseContext);
      }
      label235:
      paramCollection.add(IntegerDeserializer.instance.deserialze(this, null, null));
      if (this.lexer.token() == 16)
      {
        this.lexer.nextToken(((ObjectDeserializer)localObject).getFastMatchToken());
        break label409;
        label287:
        if (String.class == paramType)
        {
          if (this.lexer.token() == 4)
          {
            paramObject = this.lexer.stringVal();
            this.lexer.nextToken(16);
          }
          for (;;)
          {
            paramCollection.add(paramObject);
            break;
            paramObject = parse();
            if (paramObject == null) {
              paramObject = null;
            } else {
              paramObject = paramObject.toString();
            }
          }
        }
        if (this.lexer.token() == 8) {
          this.lexer.nextToken();
        }
        for (paramObject = null;; paramObject = ((ObjectDeserializer)localObject).deserialze(this, paramType, Integer.valueOf(i)))
        {
          paramCollection.add(paramObject);
          checkListResolve(paramCollection);
          break;
        }
      }
      label409:
      i += 1;
    }
  }
  
  public final void parseArray(Collection paramCollection)
  {
    parseArray(paramCollection, null);
  }
  
  public final void parseArray(Collection paramCollection, Object paramObject)
  {
    JSONLexer localJSONLexer = getLexer();
    if ((localJSONLexer.token() == 21) || (localJSONLexer.token() == 22)) {
      localJSONLexer.nextToken();
    }
    if (localJSONLexer.token() != 14) {
      throw new JSONException("syntax error, expect [, actual " + JSONToken.name(localJSONLexer.token()) + ", pos " + localJSONLexer.pos());
    }
    localJSONLexer.nextToken(4);
    ParseContext localParseContext = getContext();
    setContext(paramCollection, paramObject);
    int i = 0;
    for (;;)
    {
      try
      {
        if (isEnabled(Feature.AllowArbitraryCommas)) {
          if (localJSONLexer.token() == 16) {
            continue;
          }
        }
        switch (localJSONLexer.token())
        {
        case 5: 
        case 9: 
        case 10: 
        case 11: 
        case 13: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
          paramObject = parse();
          paramCollection.add(paramObject);
          checkListResolve(paramCollection);
          if (localJSONLexer.token() != 16) {
            break label505;
          }
          localJSONLexer.nextToken(4);
          break label505;
          localJSONLexer.nextToken();
          break;
        case 2: 
          paramObject = localJSONLexer.integerValue();
        }
      }
      finally
      {
        setContext(localParseContext);
      }
      localJSONLexer.nextToken(16);
      continue;
      if (localJSONLexer.isEnabled(Feature.UseBigDecimal)) {}
      for (paramObject = localJSONLexer.decimalValue(true);; paramObject = localJSONLexer.decimalValue(false))
      {
        localJSONLexer.nextToken(16);
        break;
      }
      String str = localJSONLexer.stringVal();
      localJSONLexer.nextToken(16);
      paramObject = str;
      if (localJSONLexer.isEnabled(Feature.AllowISO8601DateFormat))
      {
        JSONScanner localJSONScanner = new JSONScanner(str);
        paramObject = str;
        if (localJSONScanner.scanISO8601DateIfMatch()) {
          paramObject = localJSONScanner.getCalendar().getTime();
        }
        localJSONScanner.close();
        continue;
        paramObject = Boolean.TRUE;
        localJSONLexer.nextToken(16);
        continue;
        paramObject = Boolean.FALSE;
        localJSONLexer.nextToken(16);
        continue;
        paramObject = parseObject(new JSONObject(), Integer.valueOf(i));
        continue;
        paramObject = new JSONArray();
        parseArray(paramObject, Integer.valueOf(i));
        continue;
        paramObject = null;
        localJSONLexer.nextToken(4);
        continue;
        localJSONLexer.nextToken(16);
        setContext(localParseContext);
        return;
        throw new JSONException("unclosed jsonArray");
        continue;
        label505:
        i += 1;
      }
    }
  }
  
  public Object[] parseArray(Type[] paramArrayOfType)
  {
    if (this.lexer.token() == 8)
    {
      this.lexer.nextToken(16);
      return null;
    }
    if (this.lexer.token() != 14) {
      throw new JSONException("syntax error : " + this.lexer.tokenName());
    }
    Object[] arrayOfObject = new Object[paramArrayOfType.length];
    if (paramArrayOfType.length == 0)
    {
      this.lexer.nextToken(15);
      if (this.lexer.token() != 15) {
        throw new JSONException("syntax error");
      }
      this.lexer.nextToken(16);
      return new Object[0];
    }
    this.lexer.nextToken(2);
    int i = 0;
    Object localObject;
    label187:
    Type localType;
    label381:
    boolean bool;
    if (i >= paramArrayOfType.length)
    {
      if (this.lexer.token() != 15) {
        throw new JSONException("syntax error");
      }
    }
    else
    {
      if (this.lexer.token() == 8)
      {
        this.lexer.nextToken(16);
        localObject = null;
      }
      for (;;)
      {
        arrayOfObject[i] = localObject;
        if (this.lexer.token() == 15) {
          break;
        }
        if (this.lexer.token() == 16) {
          break label602;
        }
        throw new JSONException("syntax error :" + JSONToken.name(this.lexer.token()));
        localType = paramArrayOfType[i];
        if ((localType == Integer.TYPE) || (localType == Integer.class))
        {
          if (this.lexer.token() == 2)
          {
            localObject = Integer.valueOf(this.lexer.intValue());
            this.lexer.nextToken(16);
          }
          else
          {
            localObject = TypeUtils.cast(parse(), localType, this.config);
          }
        }
        else
        {
          if (localType != String.class) {
            break label381;
          }
          if (this.lexer.token() == 4)
          {
            localObject = this.lexer.stringVal();
            this.lexer.nextToken(16);
          }
          else
          {
            localObject = TypeUtils.cast(parse(), localType, this.config);
          }
        }
      }
      if ((i != paramArrayOfType.length - 1) || (!(localType instanceof Class))) {
        break label649;
      }
      localObject = (Class)localType;
      bool = ((Class)localObject).isArray();
      localObject = ((Class)localObject).getComponentType();
    }
    for (;;)
    {
      if ((bool) && (this.lexer.token() != 14))
      {
        ArrayList localArrayList = new ArrayList();
        localObject = this.config.getDeserializer((Type)localObject);
        int j = ((ObjectDeserializer)localObject).getFastMatchToken();
        if (this.lexer.token() != 15)
        {
          for (;;)
          {
            localArrayList.add(((ObjectDeserializer)localObject).deserialze(this, localType, null));
            if (this.lexer.token() != 16) {
              break;
            }
            this.lexer.nextToken(j);
          }
          if (this.lexer.token() != 15) {}
        }
        else
        {
          localObject = TypeUtils.cast(localArrayList, localType, this.config);
          break label187;
        }
        throw new JSONException("syntax error :" + JSONToken.name(this.lexer.token()));
      }
      localObject = this.config.getDeserializer(localType).deserialze(this, localType, null);
      break label187;
      label602:
      if (i == paramArrayOfType.length - 1) {
        this.lexer.nextToken(15);
      }
      for (;;)
      {
        i += 1;
        break;
        this.lexer.nextToken(2);
      }
      this.lexer.nextToken(16);
      return arrayOfObject;
      label649:
      localObject = null;
      bool = false;
    }
  }
  
  public Object parseArrayWithType(Type paramType)
  {
    if (this.lexer.token() == 8)
    {
      this.lexer.nextToken();
      return null;
    }
    Object localObject1 = ((ParameterizedType)paramType).getActualTypeArguments();
    if (localObject1.length != 1) {
      throw new JSONException("not support type " + paramType);
    }
    localObject1 = localObject1[0];
    if ((localObject1 instanceof Class))
    {
      paramType = new ArrayList();
      parseArray((Class)localObject1, paramType);
      return paramType;
    }
    Object localObject2;
    if ((localObject1 instanceof WildcardType))
    {
      localObject2 = (WildcardType)localObject1;
      localObject1 = localObject2.getUpperBounds()[0];
      if (Object.class.equals(localObject1))
      {
        if (((WildcardType)localObject2).getLowerBounds().length == 0) {
          return parse();
        }
        throw new JSONException("not support type : " + paramType);
      }
      paramType = new ArrayList();
      parseArray((Class)localObject1, paramType);
      return paramType;
    }
    if ((localObject1 instanceof TypeVariable))
    {
      localObject2 = (TypeVariable)localObject1;
      Type[] arrayOfType = ((TypeVariable)localObject2).getBounds();
      if (arrayOfType.length != 1) {
        throw new JSONException("not support : " + localObject2);
      }
      localObject2 = arrayOfType[0];
      if ((localObject2 instanceof Class))
      {
        paramType = new ArrayList();
        parseArray((Class)localObject2, paramType);
        return paramType;
      }
    }
    if ((localObject1 instanceof ParameterizedType))
    {
      paramType = (ParameterizedType)localObject1;
      localObject1 = new ArrayList();
      parseArray(paramType, (Collection)localObject1);
      return localObject1;
    }
    throw new JSONException("TODO : " + paramType);
  }
  
  public Object parseKey()
  {
    if (this.lexer.token() == 18)
    {
      String str = this.lexer.stringVal();
      this.lexer.nextToken(16);
      return str;
    }
    return parse(null);
  }
  
  public JSONObject parseObject()
  {
    JSONObject localJSONObject = new JSONObject();
    parseObject(localJSONObject);
    return localJSONObject;
  }
  
  public Object parseObject(Class paramClass)
  {
    return parseObject(paramClass);
  }
  
  public Object parseObject(Type paramType)
  {
    if (this.lexer.token() == 8)
    {
      this.lexer.nextToken();
      return null;
    }
    ObjectDeserializer localObjectDeserializer = this.config.getDeserializer(paramType);
    try
    {
      paramType = localObjectDeserializer.deserialze(this, paramType, null);
      return paramType;
    }
    catch (JSONException paramType)
    {
      throw paramType;
    }
    catch (Throwable paramType)
    {
      throw new JSONException(paramType.getMessage(), paramType);
    }
  }
  
  public Object parseObject(Map paramMap)
  {
    return parseObject(paramMap, null);
  }
  
  public final Object parseObject(Map paramMap, Object paramObject)
  {
    JSONLexer localJSONLexer = this.lexer;
    if ((localJSONLexer.token() != 12) && (localJSONLexer.token() != 16)) {
      throw new JSONException("syntax error, expect {, actual " + localJSONLexer.tokenName());
    }
    ParseContext localParseContext = getContext();
    int i = 0;
    int j;
    int k;
    label93:
    Object localObject2;
    for (;;)
    {
      try
      {
        localJSONLexer.skipWhitespace();
        j = localJSONLexer.getCurrent();
        k = j;
        if (isEnabled(Feature.AllowArbitraryCommas)) {
          break label1708;
        }
        if (k != 34) {
          break label202;
        }
        localObject2 = localJSONLexer.scanSymbol(this.symbolTable, '"');
        localJSONLexer.skipWhitespace();
        localObject1 = localObject2;
        if (localJSONLexer.getCurrent() == ':') {
          break label1696;
        }
        throw new JSONException("expect ':' at " + localJSONLexer.pos() + ", name " + localObject2);
      }
      finally
      {
        setContext(localParseContext);
      }
      label181:
      localJSONLexer.next();
      localJSONLexer.skipWhitespace();
      j = localJSONLexer.getCurrent();
      break label1708;
      label202:
      if (k == 125)
      {
        localJSONLexer.next();
        localJSONLexer.resetStringPosition();
        localJSONLexer.nextToken();
        setContext(localParseContext);
        return paramMap;
      }
      if (k == 39)
      {
        if (!isEnabled(Feature.AllowSingleQuotes)) {
          throw new JSONException("syntax error");
        }
        localObject1 = localJSONLexer.scanSymbol(this.symbolTable, '\'');
        localJSONLexer.skipWhitespace();
        if (localJSONLexer.getCurrent() == ':') {
          break label1696;
        }
        throw new JSONException("expect ':' at " + localJSONLexer.pos());
      }
      if (k == 26) {
        throw new JSONException("syntax error");
      }
      if (k != 44) {
        break label1722;
      }
      throw new JSONException("syntax error");
      label354:
      localJSONLexer.resetStringPosition();
      localJSONLexer.scanNumber();
      if (localJSONLexer.token() == 2) {}
      for (localObject1 = localJSONLexer.integerValue(); localJSONLexer.getCurrent() != ':'; localObject1 = localJSONLexer.decimalValue(true)) {
        throw new JSONException("expect ':' at " + localJSONLexer.pos() + ", name " + localObject1);
      }
      label441:
      localJSONLexer.nextToken();
      localObject1 = parse();
      j = 1;
      label455:
      if (j == 0)
      {
        localJSONLexer.next();
        localJSONLexer.skipWhitespace();
      }
      j = localJSONLexer.getCurrent();
      localJSONLexer.resetStringPosition();
      if (localObject1 != JSON.DEFAULT_TYPE_KEY) {
        break label772;
      }
      localObject2 = localJSONLexer.scanSymbol(this.symbolTable, '"');
      localObject1 = TypeUtils.loadClass((String)localObject2);
      if (localObject1 != null) {
        break;
      }
      paramMap.put(JSON.DEFAULT_TYPE_KEY, localObject2);
    }
    label531:
    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {
      throw new JSONException("syntax error");
    }
    Object localObject1 = localJSONLexer.scanSymbolUnQuoted(this.symbolTable);
    localJSONLexer.skipWhitespace();
    char c = localJSONLexer.getCurrent();
    if (c != ':')
    {
      throw new JSONException("expect ':' at " + localJSONLexer.pos() + ", actual " + c);
      localJSONLexer.nextToken(16);
      if (localJSONLexer.token() == 13)
      {
        localJSONLexer.nextToken(16);
        try
        {
          paramMap = this.config.getDeserializer((Type)localObject1);
          if (!(paramMap instanceof JavaBeanDeserializer)) {
            break label1691;
          }
          paramMap = ((JavaBeanDeserializer)paramMap).createInstance(this, (Type)localObject1);
          label670:
          paramObject = paramMap;
          if (paramMap == null) {
            if (localObject1 != Cloneable.class) {
              break label700;
            }
          }
          label700:
          for (paramObject = new HashMap();; paramObject = ((Class)localObject1).newInstance())
          {
            setContext(localParseContext);
            return paramObject;
          }
          setResolveStatus(2);
        }
        catch (Exception paramMap)
        {
          throw new JSONException("create instance error", paramMap);
        }
      }
      if ((this.context != null) && (!(paramObject instanceof Integer))) {
        popContext();
      }
      paramMap = this.config.getDeserializer((Type)localObject1).deserialze(this, (Type)localObject1, paramObject);
      setContext(localParseContext);
      return paramMap;
      label772:
      if (localObject1 == "$ref")
      {
        localJSONLexer.nextToken(4);
        if (localJSONLexer.token() == 4)
        {
          localObject1 = localJSONLexer.stringVal();
          localJSONLexer.nextToken(13);
          paramObject = null;
          if ("@".equals(localObject1))
          {
            paramMap = paramObject;
            if (getContext() != null) {
              paramMap = getContext().getObject();
            }
          }
          while (localJSONLexer.token() != 13)
          {
            throw new JSONException("syntax error");
            if ("..".equals(localObject1))
            {
              paramMap = localParseContext.getParentContext();
              if (paramMap.getObject() != null)
              {
                paramMap = paramMap.getObject();
              }
              else
              {
                addResolveTask(new DefaultJSONParser.ResolveTask(paramMap, (String)localObject1));
                setResolveStatus(1);
                paramMap = paramObject;
              }
            }
            else if ("$".equals(localObject1))
            {
              for (paramMap = localParseContext;; paramMap = paramMap.getParentContext()) {
                if (paramMap.getParentContext() == null)
                {
                  if (paramMap.getObject() == null) {
                    break label960;
                  }
                  paramMap = paramMap.getObject();
                  break;
                }
              }
              label960:
              addResolveTask(new DefaultJSONParser.ResolveTask(paramMap, (String)localObject1));
              setResolveStatus(1);
              paramMap = paramObject;
            }
            else
            {
              addResolveTask(new DefaultJSONParser.ResolveTask(localParseContext, (String)localObject1));
              setResolveStatus(1);
              paramMap = paramObject;
            }
          }
          localJSONLexer.nextToken(16);
          setContext(localParseContext);
          return paramMap;
        }
        throw new JSONException("illegal ref, " + JSONToken.name(localJSONLexer.token()));
      }
      if (i == 0)
      {
        setContext(paramMap, paramObject);
        if ((this.context == null) || ((paramObject instanceof Integer))) {
          break label1763;
        }
        popContext();
        break label1763;
        label1089:
        if (j != 34) {
          break label1769;
        }
        localJSONLexer.scanString();
        localObject2 = localJSONLexer.stringVal();
        Object localObject3 = localObject2;
        if (localJSONLexer.isEnabled(Feature.AllowISO8601DateFormat))
        {
          localObject3 = new JSONScanner((String)localObject2);
          if (((JSONScanner)localObject3).scanISO8601DateIfMatch()) {
            localObject2 = ((JSONScanner)localObject3).getCalendar().getTime();
          }
          ((JSONScanner)localObject3).close();
          localObject3 = localObject2;
        }
        if (paramMap.getClass() == JSONObject.class) {
          paramMap.put(localObject1.toString(), localObject3);
        }
        for (;;)
        {
          localJSONLexer.skipWhitespace();
          j = localJSONLexer.getCurrent();
          if (j != 44) {
            break label1610;
          }
          localJSONLexer.next();
          break;
          paramMap.put(localObject1, localObject3);
        }
      }
    }
    for (;;)
    {
      label1227:
      localJSONLexer.scanNumber();
      if (localJSONLexer.token() == 2) {}
      for (localObject2 = localJSONLexer.integerValue();; localObject2 = localJSONLexer.numberValue())
      {
        paramMap.put(localObject1, localObject2);
        break;
      }
      label1610:
      label1691:
      label1696:
      label1708:
      label1722:
      label1763:
      label1769:
      do
      {
        if (j == 91)
        {
          localJSONLexer.nextToken();
          localObject2 = new JSONArray();
          parseArray((Collection)localObject2, localObject1);
          paramMap.put(localObject1, localObject2);
          if (localJSONLexer.token() == 13)
          {
            localJSONLexer.nextToken();
            setContext(localParseContext);
            return paramMap;
          }
          if (localJSONLexer.token() == 16) {
            break;
          }
          throw new JSONException("syntax error");
        }
        if (j == 123)
        {
          localJSONLexer.nextToken();
          localObject2 = parseObject(new JSONObject(), localObject1);
          checkMapResolve(paramMap, localObject1.toString());
          if (paramMap.getClass() == JSONObject.class) {
            paramMap.put(localObject1.toString(), localObject2);
          }
          for (;;)
          {
            setContext(localParseContext, localObject2, localObject1);
            if (localJSONLexer.token() != 13) {
              break;
            }
            localJSONLexer.nextToken();
            setContext(localParseContext);
            setContext(localParseContext);
            return paramMap;
            paramMap.put(localObject1, localObject2);
          }
          if (localJSONLexer.token() == 16) {
            break;
          }
          throw new JSONException("syntax error, " + localJSONLexer.tokenName());
        }
        localJSONLexer.nextToken();
        paramMap.put(localObject1, parse());
        if (localJSONLexer.token() == 13)
        {
          localJSONLexer.nextToken();
          setContext(localParseContext);
          return paramMap;
        }
        if (localJSONLexer.token() == 16) {
          break;
        }
        throw new JSONException("syntax error, position at " + localJSONLexer.pos() + ", name " + localObject1);
        if (j == 125)
        {
          localJSONLexer.next();
          localJSONLexer.resetStringPosition();
          localJSONLexer.nextToken();
          setContext(paramMap, paramObject);
          setContext(localParseContext);
          return paramMap;
        }
        throw new JSONException("syntax error, position at " + localJSONLexer.pos() + ", name " + localObject1);
        break label1089;
        paramMap = null;
        break label670;
        j = 0;
        break label455;
        j = 0;
        break label455;
        if (j == 44) {
          break label181;
        }
        k = j;
        break label93;
        if (((k >= 48) && (k <= 57)) || (k == 45)) {
          break label354;
        }
        if (k == 123) {
          break label441;
        }
        if (k != 91) {
          break label531;
        }
        break label441;
        i = 1;
        break label1089;
        if ((j >= 48) && (j <= 57)) {
          break label1227;
        }
      } while (j != 45);
    }
  }
  
  public void parseObject(Object paramObject)
  {
    Class localClass = paramObject.getClass();
    Map localMap = this.config.getFieldDeserializers(localClass);
    if ((this.lexer.token() != 12) && (this.lexer.token() != 16)) {
      throw new JSONException("syntax error, expect {, actual " + this.lexer.tokenName());
    }
    Object[] arrayOfObject = new Object[1];
    do
    {
      do
      {
        localObject1 = this.lexer.scanSymbol(this.symbolTable);
        if (localObject1 != null) {
          break;
        }
        if (this.lexer.token() == 13)
        {
          this.lexer.nextToken(16);
          return;
        }
      } while ((this.lexer.token() == 16) && (isEnabled(Feature.AllowArbitraryCommas)));
      localObject2 = (FieldDeserializer)localMap.get(localObject1);
      if (localObject2 != null) {
        break;
      }
      if (!isEnabled(Feature.IgnoreNotMatch)) {
        throw new JSONException("setter not found, class " + localClass.getName() + ", property " + (String)localObject1);
      }
      this.lexer.nextTokenWithColon();
      parse();
    } while (this.lexer.token() != 13);
    this.lexer.nextToken();
    return;
    localObject1 = ((FieldDeserializer)localObject2).getMethod();
    Object localObject3 = localObject1.getParameterTypes()[0];
    Object localObject2 = localObject1.getGenericParameterTypes()[0];
    if (localObject3 == Integer.TYPE)
    {
      this.lexer.nextTokenWithColon(2);
      arrayOfObject[0] = IntegerDeserializer.instance.deserialze(this, (Type)localObject2, null);
    }
    for (;;)
    {
      try
      {
        ((Method)localObject1).invoke(paramObject, arrayOfObject);
        if ((this.lexer.token() == 16) || (this.lexer.token() != 13)) {
          break;
        }
        this.lexer.nextToken(16);
        return;
      }
      catch (Exception paramObject)
      {
        throw new JSONException("set proprety error, " + ((Method)localObject1).getName(), paramObject);
      }
      if (localObject3 == String.class)
      {
        this.lexer.nextTokenWithColon(4);
        arrayOfObject[0] = StringDeserializer.deserialze(this);
      }
      else if (localObject3 == Long.TYPE)
      {
        this.lexer.nextTokenWithColon(2);
        arrayOfObject[0] = LongDeserializer.instance.deserialze(this, (Type)localObject2, null);
      }
      else
      {
        localObject3 = this.config.getDeserializer((Class)localObject3, (Type)localObject2);
        this.lexer.nextTokenWithColon(((ObjectDeserializer)localObject3).getFastMatchToken());
        arrayOfObject[0] = ((ObjectDeserializer)localObject3).deserialze(this, (Type)localObject2, null);
      }
    }
  }
  
  public void popContext()
  {
    if (isEnabled(Feature.DisableCircularReferenceDetect)) {
      return;
    }
    this.context = this.context.getParentContext();
    this.jdField_a_of_type_ArrayOfComLepengFastjsonParserParseContext[(this.g - 1)] = null;
    this.g -= 1;
  }
  
  public void setConfig(ParserConfig paramParserConfig)
  {
    this.config = paramParserConfig;
  }
  
  public ParseContext setContext(ParseContext paramParseContext, Object paramObject1, Object paramObject2)
  {
    if (isEnabled(Feature.DisableCircularReferenceDetect)) {
      return null;
    }
    this.context = new ParseContext(paramParseContext, paramObject1, paramObject2);
    a(this.context);
    return this.context;
  }
  
  public ParseContext setContext(Object paramObject1, Object paramObject2)
  {
    if (isEnabled(Feature.DisableCircularReferenceDetect)) {
      return null;
    }
    return setContext(this.context, paramObject1, paramObject2);
  }
  
  public void setContext(ParseContext paramParseContext)
  {
    if (isEnabled(Feature.DisableCircularReferenceDetect)) {
      return;
    }
    this.context = paramParseContext;
  }
  
  public void setDateFomrat(DateFormat paramDateFormat)
  {
    this.jdField_a_of_type_JavaTextDateFormat = paramDateFormat;
  }
  
  public void setDateFormat(String paramString)
  {
    this.f = paramString;
    this.jdField_a_of_type_JavaTextDateFormat = null;
  }
  
  public void setResolveStatus(int paramInt)
  {
    this.h = paramInt;
  }
}
