package com.zhangzhifu.sdk.util;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import com.zhangzhifu.sdk.modle.ZhangPayBean;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class MobileNetworkManage
{
  public static final String CLOSE_MOBILE_NETWORK = "com.sz5g.superaction.CLOSE_MOBILE_NETWORK";
  public static final int MAX_RECONNECT_TIMES = 10;
  public static final int MAX_RETRY_TIMES = 3;
  public static final int MOBILE_OPEN = 2;
  public static final int NETWORK_SLEEP_TIME = 1000;
  public static final int NONE_OPEN = 0;
  public static final String OPEN_MOBILE_NETWORK = "com.sz5g.superaction.OPEN_MOBILE_NETWORK";
  public static final int WIFI_OPEN = 1;
  public static int currentNetworType = -1;
  private Context ao;
  
  public MobileNetworkManage(Context paramContext)
  {
    this.ao = paramContext;
  }
  
  public static boolean initFee(Context paramContext)
  {
    if (currentNetworType != -1) {}
    NetManage localNetManage;
    do
    {
      return true;
      WifiManage localWifiManage = new WifiManage(paramContext);
      localNetManage = new NetManage(paramContext);
      if (localWifiManage.isWifiManageEnable()) {
        break label89;
      }
      if (!localNetManage.isDataConnected())
      {
        ZhangPayLog.showSaveLog("startWFee", "移动网络没有打开，正在打开移动网络....");
        toggleMobileData(paramContext, true);
        if (currentNetworType != 1) {
          currentNetworType = 0;
        }
      }
      if (localNetManage.isCurrentWapAPN()) {
        break;
      }
    } while (localNetManage.setWapNetWork());
    return false;
    ZhangPayLog.showSaveLog("startFee", "current is WAP");
    return true;
    label89:
    return false;
  }
  
  public static void recoverNetWork(Context paramContext)
  {
    if ((ZhangPayBean.SMS_FEEING) || (ZhangPayBean.MMS_FEEING) || (ZhangPayBean.WAP_FEEING) || (ZhangPayBean.PCWAP_FEEING) || (ZhangPayBean.MM_FEEING) || (ZhangPayBean.WOWAP_FEEING) || (ZhangPayBean.MMR_FEEING)) {
      return;
    }
    recoverNetWorkDir(paramContext);
  }
  
  public static void recoverNetWorkDir(Context paramContext)
  {
    WifiManage localWifiManage;
    if (currentNetworType != -1)
    {
      ZhangPayLog.showSaveLog("", "开始恢复网络：" + currentNetworType);
      localWifiManage = new WifiManage(paramContext);
      switch (currentNetworType)
      {
      }
    }
    for (;;)
    {
      currentNetworType = -1;
      return;
      localWifiManage.OpenWifi();
      continue;
      localWifiManage.CloseWifi();
      toggleMobileData(paramContext, true);
      continue;
      localWifiManage.CloseWifi();
      toggleMobileData(paramContext, false);
    }
  }
  
  public static void toggleMobileData(Context paramContext, boolean paramBoolean)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    try
    {
      Object localObject = Class.forName(paramContext.getClass().getName()).getDeclaredField("mService");
      ((Field)localObject).setAccessible(true);
      paramContext = ((Field)localObject).get(paramContext);
      localObject = Class.forName(paramContext.getClass().getName()).getDeclaredMethod("setMobileDataEnabled", new Class[] { Boolean.TYPE });
      ((Method)localObject).setAccessible(true);
      ((Method)localObject).invoke(paramContext, new Object[] { Boolean.valueOf(paramBoolean) });
      return;
    }
    catch (ClassNotFoundException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "ClassNotFoundException");
      paramContext.printStackTrace();
      return;
    }
    catch (NoSuchFieldException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "NoSuchFieldException");
      paramContext.printStackTrace();
      return;
    }
    catch (SecurityException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "SecurityException");
      paramContext.printStackTrace();
      return;
    }
    catch (NoSuchMethodException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "NoSuchMethodException");
      paramContext.printStackTrace();
      return;
    }
    catch (IllegalArgumentException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "IllegalArgumentException");
      paramContext.printStackTrace();
      return;
    }
    catch (IllegalAccessException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "IllegalAccessException");
      paramContext.printStackTrace();
      return;
    }
    catch (InvocationTargetException paramContext)
    {
      ZhangPayLog.showSaveLog("==", "InvocationTargetException");
      paramContext.printStackTrace();
    }
  }
  
  public void closeMobileNetwork()
  {
    Intent localIntent = new Intent("com.sz5g.superaction.CLOSE_MOBILE_NETWORK");
    this.ao.sendBroadcast(localIntent);
  }
  
  public String getSIMCardType()
  {
    return SystemInfo.getCardType(this.ao);
  }
  
  public boolean isMobileNetworkOpened()
  {
    String str = SystemInfo.getNetworkInfo(this.ao);
    return (!str.equals("unknow")) && (!str.equals("wifi"));
  }
  
  public void openMobileNetwork()
  {
    Intent localIntent = new Intent("com.sz5g.superaction.OPEN_MOBILE_NETWORK");
    this.ao.sendBroadcast(localIntent);
  }
}
