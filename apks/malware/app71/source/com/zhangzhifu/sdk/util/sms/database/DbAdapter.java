package com.zhangzhifu.sdk.util.sms.database;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import java.io.PrintStream;
import java.util.HashMap;

public final class DbAdapter
{
  public static final String ALLOWEDRULE = "allowedrule";
  public static final String ALLOW_MESSAGES_DB_TABLE = "allowedmessages";
  public static final String BLOCKEDRULE = "blockedrule";
  public static final String BLOCKED_MESSAGES_DB_TABLE = "blockedmessages";
  public static final String BLOCKED_PHONE_DB_TABLE = "blockedphone";
  public static final String DB_TABLE = "rules";
  public static final String FORMADDRESS = "number";
  public static final String FORMTIME = "timestamp";
  public static final String KEY_ID = "_id";
  public static final String KEY_NAME = "rule";
  public static final String KEY_TYPE = "type";
  public static final String MSGBODY = "msgbody";
  public static final String STATUS = "status";
  private SQLiteDatabase dG = null;
  
  public DbAdapter(Context paramContext)
  {
    this.dG = DbAdapter.DatabaseHelper.getHelper(paramContext).getReadableDatabase();
  }
  
  public DbAdapter(SQLiteDatabase paramSQLiteDatabase)
  {
    this.dG = paramSQLiteDatabase;
  }
  
  public final HashMap Query(Context paramContext)
  {
    HashMap localHashMap = new HashMap();
    try
    {
      paramContext = SharePreferUtil.getInstance().getFilterPort(paramContext);
      paramContext = this.dG.query("blockedmessages", new String[] { "msgbody", "timestamp" }, "number=?", new String[] { paramContext }, null, null, "_id desc");
      if (paramContext != null)
      {
        paramContext.moveToFirst();
        while (!paramContext.isAfterLast())
        {
          String str1 = paramContext.getString(paramContext.getColumnIndex("msgbody"));
          String str2 = paramContext.getString(paramContext.getColumnIndex("timestamp"));
          localHashMap.put("dbSMS_Body", str1);
          localHashMap.put("dbSMS_Time", str2);
          System.out.println("msgbody=====================" + str1 + "\b时间" + str2);
          paramContext.moveToNext();
        }
      }
      System.out.println("=======================================Cursor= null");
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      System.out.println("=======================================查询出现问题");
      return null;
    }
    return localHashMap;
  }
  
  public final long createAllowOne(String paramString1, long paramLong, String paramString2)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("number", paramString1);
    localContentValues.put("timestamp", Long.valueOf(paramLong));
    localContentValues.put("allowedrule", paramString2);
    localContentValues.put("status", Integer.valueOf(0));
    return this.dG.insert("allowedmessages", null, localContentValues);
  }
  
  public final long createOne(String paramString, int paramInt)
  {
    if (this.dG.rawQuery("SELECT * FROM rules WHERE rule='" + paramString + "' and type='" + paramInt + "'", null).getCount() > 0) {
      return -2L;
    }
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("rule", paramString);
    localContentValues.put("type", Integer.valueOf(paramInt));
    return this.dG.insert("rules", null, localContentValues);
  }
  
  public final long createOne(String paramString1, long paramLong, String paramString2)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("number", paramString1);
    localContentValues.put("timestamp", Long.valueOf(paramLong));
    localContentValues.put("blockedrule", paramString2);
    localContentValues.put("status", Integer.valueOf(0));
    return this.dG.insert("blockedphone", null, localContentValues);
  }
  
  public final long createOne(String paramString1, String paramString2, long paramLong, String paramString3)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("number", paramString1);
    localContentValues.put("msgbody", paramString2);
    localContentValues.put("timestamp", Long.valueOf(paramLong));
    localContentValues.put("blockedrule", paramString3);
    localContentValues.put("status", Integer.valueOf(0));
    return this.dG.insert("blockedmessages", null, localContentValues);
  }
  
  public final boolean deleteAll(String paramString)
  {
    return this.dG.delete(paramString, null, null) > 0;
  }
  
  public final boolean deleteAll(String paramString1, String paramString2)
  {
    return this.dG.delete(paramString1, paramString2, null) > 0;
  }
  
  public final boolean deleteOne(String paramString, long paramLong)
  {
    return this.dG.delete(paramString, "_id=" + paramLong, null) > 0;
  }
  
  public final Cursor fetchAllRulesType(String paramString)
  {
    return this.dG.query("rules", new String[] { "_id", "rule", "type" }, paramString, null, null, null, "type");
  }
  
  public final Cursor fetchAllRulesTypeRawQuery(String paramString)
  {
    return this.dG.rawQuery("SELECT * FROM rules WHERE " + paramString, null);
  }
  
  public final Cursor fetchAllowMsgAll()
  {
    return this.dG.query("allowedmessages", new String[] { "_id", "number", "timestamp", "allowedrule", "status" }, null, null, null, null, "_id DESC");
  }
  
  public final Cursor fetchBlockedMSGAll()
  {
    return this.dG.query("blockedmessages", new String[] { "_id", "number", "msgbody", "timestamp", "blockedrule", "status" }, null, null, null, null, "_id DESC");
  }
  
  public final Cursor fetchBlockedPhoneAll()
  {
    return this.dG.query("blockedphone", new String[] { "_id", "number", "timestamp", "blockedrule", "status" }, null, null, null, null, "_id DESC");
  }
  
  public final Cursor fetchOneId(long paramLong)
  {
    Object localObject = this.dG;
    String str = "_id=" + paramLong;
    localObject = ((SQLiteDatabase)localObject).query(true, "rules", new String[] { "_id", "rule", "type" }, str, null, null, null, null, null);
    if (localObject != null) {
      ((Cursor)localObject).moveToFirst();
    }
    return localObject;
  }
  
  public final Cursor fetchRulesAll()
  {
    return this.dG.query("rules", new String[] { "_id", "rule", "type" }, null, null, null, null, "type");
  }
  
  public final Cursor fuzzySearch(String paramString)
  {
    return this.dG.rawQuery("select * from rules where rule like '%" + paramString + "%'", null);
  }
  
  public final SQLiteDatabase getmDb()
  {
    return this.dG;
  }
  
  public final boolean updateMSGStatus(int paramInt, String paramString)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("status", Integer.valueOf(paramInt));
    return this.dG.update("blockedmessages", localContentValues, paramString, null) > 0;
  }
  
  public final boolean updateMSGStatus(long paramLong, int paramInt)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("status", Integer.valueOf(paramInt));
    return this.dG.update("blockedmessages", localContentValues, "_id=" + paramLong, null) > 0;
  }
  
  public final boolean updateOneId(long paramLong1, String paramString, long paramLong2)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("rule", paramString);
    localContentValues.put("type", Long.valueOf(paramLong2));
    return this.dG.update("rules", localContentValues, "_id=" + paramLong1, null) > 0;
  }
  
  public final boolean updatePhoneStatus(int paramInt, String paramString)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("status", Integer.valueOf(paramInt));
    return this.dG.update("blockedphone", localContentValues, paramString, null) > 0;
  }
  
  public final boolean updateStatus(String paramString, long paramLong, int paramInt)
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("status", Integer.valueOf(paramInt));
    return this.dG.update(paramString, localContentValues, "_id=" + paramLong, null) > 0;
  }
}
