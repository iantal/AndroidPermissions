package com.umpay.huafubao.b;

import android.content.Context;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.apache.http.HttpVersion;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

public class a
{
  protected final DefaultHttpClient a;
  protected final HttpContext b;
  protected ExecutorService c;
  protected final Map d;
  final Map e;
  private int f = 10;
  private int g = 10000;
  private boolean h = true;
  
  public a()
  {
    this((byte)0);
  }
  
  private a(byte paramByte)
  {
    this(localSchemeRegistry);
  }
  
  private a(SchemeRegistry paramSchemeRegistry)
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    ConnManagerParams.setTimeout(localBasicHttpParams, this.g);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, this.g);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, this.g);
    ConnManagerParams.setMaxConnectionsPerRoute(localBasicHttpParams, new ConnPerRouteBean(this.f));
    ConnManagerParams.setMaxTotalConnections(localBasicHttpParams, 10);
    HttpProtocolParams.setUseExpectContinue(localBasicHttpParams, false);
    HttpConnectionParams.setStaleCheckingEnabled(localBasicHttpParams, false);
    HttpClientParams.setRedirecting(localBasicHttpParams, false);
    HttpClientParams.setAuthenticating(localBasicHttpParams, false);
    HttpConnectionParams.setTcpNoDelay(localBasicHttpParams, true);
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, 8192);
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
    HttpProtocolParams.setContentCharset(localBasicHttpParams, "UTF-8");
    HttpProtocolParams.setUserAgent(localBasicHttpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", new Object[] { "1.4.5" }));
    paramSchemeRegistry = new ThreadSafeClientConnManager(localBasicHttpParams, paramSchemeRegistry);
    this.c = Executors.newCachedThreadPool();
    this.d = new WeakHashMap();
    this.e = new HashMap();
    this.b = new SyncBasicHttpContext(new BasicHttpContext());
    this.a = new DefaultHttpClient(paramSchemeRegistry, localBasicHttpParams);
    this.a.addRequestInterceptor(new b(this));
    this.a.addResponseInterceptor(new c(this));
    this.a.setHttpRequestRetryHandler(new s());
  }
  
  public final HttpClient a()
  {
    return this.a;
  }
  
  public final void a(Context paramContext)
  {
    Object localObject = (List)this.d.get(paramContext);
    if (localObject != null)
    {
      localObject = ((List)localObject).iterator();
      while (((Iterator)localObject).hasNext())
      {
        e localE = (e)((q)((Iterator)localObject).next()).a.get();
        if (localE != null)
        {
          localE.b = true;
          if ((localE.a != null) && (!localE.a.isAborted())) {
            localE.a.abort();
          }
          localE.a();
        }
      }
      this.d.remove(paramContext);
    }
  }
  
  public final HttpContext b()
  {
    return this.b;
  }
  
  public final void c()
  {
    this.g = 35000;
    HttpParams localHttpParams = this.a.getParams();
    ConnManagerParams.setTimeout(localHttpParams, this.g);
    HttpConnectionParams.setSoTimeout(localHttpParams, this.g);
    HttpConnectionParams.setConnectionTimeout(localHttpParams, this.g);
  }
}
