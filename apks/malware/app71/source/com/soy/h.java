package com.soy;

import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public final class h
{
  private static final h a = new h();
  private static Key b;
  
  public h() {}
  
  public static h a(String paramString)
  {
    try
    {
      b = new SecretKeySpec(paramString.getBytes("UTF-8"), "AES");
      return a;
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
      }
    }
  }
  
  public static String b(String paramString)
  {
    Object localObject = null;
    try
    {
      Cipher localCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
      localCipher.init(1, new SecretKeySpec(b.getEncoded(), "AES"));
      paramString = localCipher.doFinal(paramString.getBytes("UTF-8"));
      return new String(f.a(paramString));
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        paramString = localObject;
      }
    }
  }
  
  public static String c(String paramString)
  {
    Object localObject = null;
    try
    {
      Cipher localCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
      localCipher.init(2, new SecretKeySpec(b.getEncoded(), "AES"));
      paramString = localCipher.doFinal(f.a(paramString));
      return new String(paramString).trim();
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        paramString = localObject;
      }
    }
  }
}
