package net.tsz.afinal.http;

import android.os.SystemClock;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.HashSet;
import javax.net.ssl.SSLHandshakeException;
import org.apache.http.NoHttpResponseException;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.protocol.HttpContext;

public class RetryHandler
  implements HttpRequestRetryHandler
{
  private static final int RETRY_SLEEP_TIME_MILLIS = 1000;
  private static HashSet exceptionBlacklist;
  private static HashSet exceptionWhitelist = new HashSet();
  private final int maxRetries;
  
  static
  {
    exceptionBlacklist = new HashSet();
    exceptionWhitelist.add(NoHttpResponseException.class);
    exceptionWhitelist.add(UnknownHostException.class);
    exceptionWhitelist.add(SocketException.class);
    exceptionBlacklist.add(InterruptedIOException.class);
    exceptionBlacklist.add(SSLHandshakeException.class);
  }
  
  public RetryHandler(int paramInt)
  {
    this.maxRetries = paramInt;
  }
  
  public boolean retryRequest(IOException paramIOException, int paramInt, HttpContext paramHttpContext)
  {
    boolean bool2 = true;
    Boolean localBoolean = (Boolean)paramHttpContext.getAttribute("http.request_sent");
    int i;
    boolean bool1;
    if ((localBoolean != null) && (localBoolean.booleanValue()))
    {
      i = 1;
      if (paramInt <= this.maxRetries) {
        break label102;
      }
      bool1 = false;
    }
    for (;;)
    {
      label43:
      if (bool1)
      {
        paramHttpContext = (HttpUriRequest)paramHttpContext.getAttribute("http.request");
        if ((paramHttpContext != null) && (!"POST".equals(paramHttpContext.getMethod()))) {
          bool1 = bool2;
        }
      }
      for (;;)
      {
        if (bool1)
        {
          SystemClock.sleep(1000L);
          return bool1;
          i = 0;
          break;
          label102:
          if (exceptionBlacklist.contains(paramIOException.getClass()))
          {
            bool1 = false;
            break label43;
          }
          if (exceptionWhitelist.contains(paramIOException.getClass()))
          {
            bool1 = true;
            break label43;
          }
          if (i != 0) {
            break label167;
          }
          bool1 = true;
          break label43;
          bool1 = false;
          continue;
        }
        paramIOException.printStackTrace();
        return bool1;
      }
      label167:
      bool1 = true;
    }
  }
}
