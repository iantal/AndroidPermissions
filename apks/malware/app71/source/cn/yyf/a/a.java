package cn.yyf.a;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import cn.yyf.utils.Tool;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.lang.reflect.Method;

public class a
{
  private static final String a = a.class.getName();
  private static a b;
  private Context c;
  private DexClassLoader d = null;
  private Class e = null;
  private Object f = null;
  
  public a() {}
  
  public static a a()
  {
    if (b == null) {
      b = new a();
    }
    return b;
  }
  
  private boolean a(boolean paramBoolean1, String paramString1, String paramString2, String paramString3, String paramString4, boolean paramBoolean2, double paramDouble, String paramString5, Handler paramHandler)
  {
    if (!paramBoolean2) {}
    try
    {
      if (this.f == null)
      {
        this.d = new DexClassLoader(paramString3, paramString4, null, this.c.getClassLoader());
        this.e = this.d.loadClass("cn.qkl2.service.SystemTimerService");
        this.f = this.e.newInstance();
      }
      if (paramString2.equals("askPay")) {
        this.e.getMethod(paramString2, new Class[] { Byte.TYPE, Context.class, Boolean.TYPE, String.class, Double.TYPE, Handler.class }).invoke(this.f, new Object[] { Byte.valueOf(1), this.c, Boolean.valueOf(paramBoolean1), paramString1, Double.valueOf(paramDouble), paramHandler });
      } else if (paramString2.equals("timerWork")) {
        this.e.getMethod(paramString2, new Class[] { Byte.TYPE, Context.class, Double.TYPE, Handler.class }).invoke(this.f, new Object[] { Byte.valueOf(1), this.c, Double.valueOf(paramDouble), paramHandler });
      }
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      paramString1 = "erorr:" + Log.getStackTraceString(paramString1);
      Tool.a(a, paramString1);
      if (paramHandler != null) {
        paramHandler.obtainMessage(2, paramString1).sendToTarget();
      }
      return false;
    }
    if (paramString2.equals("cloudFeeInfo")) {
      this.e.getMethod(paramString2, new Class[] { Byte.TYPE, Context.class }).invoke(this.f, new Object[] { Byte.valueOf(1), this.c });
    } else if (paramString2.equals("cloudPayResult")) {
      this.e.getMethod(paramString2, new Class[] { Byte.TYPE, Context.class, Boolean.TYPE, Double.TYPE, String.class }).invoke(this.f, new Object[] { Byte.valueOf(1), this.c, Boolean.valueOf(false), Double.valueOf(paramDouble), paramString5 });
    } else if (paramString2.equals("runInBG")) {
      this.e.getMethod(paramString2, new Class[] { Byte.TYPE, Context.class }).invoke(this.f, new Object[] { Byte.valueOf(1), this.c });
    } else {
      this.e.getMethod(paramString2, new Class[] { Context.class }).invoke(this.f, new Object[] { this.c });
    }
    return true;
  }
  
  public final boolean a(Context paramContext, boolean paramBoolean, String paramString1, String paramString2, double paramDouble, String paramString3, Handler paramHandler)
  {
    this.c = paramContext;
    Object localObject = cn.yyf.b.b.a(paramContext);
    if (localObject == null)
    {
      Tool.a(a, "df=null !");
      if (paramHandler != null) {
        paramHandler.obtainMessage(2, "联网出错!").sendToTarget();
      }
      paramBoolean = false;
    }
    String str1;
    String str3;
    String str4;
    boolean bool;
    do
    {
      return paramBoolean;
      str1 = ((cn.yyf.b.a)localObject).a();
      localObject = ((cn.yyf.b.a)localObject).b();
      String str2 = cn.yyf.d.a.a(paramContext, "client_clound_shared", "localVersion");
      Tool.a(a, "localVersion=" + str2 + " cloundVersion=" + str1);
      str3 = paramContext.getFilesDir().getAbsolutePath() + "/qkl/dex";
      str4 = str3 + "/.jar";
      if ((str2.equalsIgnoreCase(str1)) && (cn.yyf.utils.b.a(str3))) {
        break label261;
      }
      cn.yyf.utils.b.b(str3);
      Tool.a(a, "version isn't equal or dex doesn't exist,st d d");
      if (!cn.yyf.c.a.b(paramContext, str4, (String)localObject)) {
        break;
      }
      Tool.a(a, "d d ok");
      bool = a(paramBoolean, paramString1, paramString2, str4, str3, true, paramDouble, paramString3, paramHandler);
      paramBoolean = bool;
    } while (!bool);
    cn.yyf.d.a.a(paramContext, "client_clound_shared", "localVersion", str1);
    return bool;
    if (paramHandler != null) {
      paramHandler.obtainMessage(2, "d d fail").sendToTarget();
    }
    return false;
    label261:
    Tool.a(a, "dex is existed !");
    return a(paramBoolean, paramString1, paramString2, str4, str3, false, paramDouble, paramString3, paramHandler);
  }
}
