package com.prime31;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.MediaScannerConnection;
import android.media.MediaScannerConnection.MediaScannerConnectionClient;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.provider.MediaStore.Images.Media;
import android.speech.tts.TextToSpeech;
import android.speech.tts.TextToSpeech.OnInitListener;
import android.speech.tts.TextToSpeech.OnUtteranceCompletedListener;
import android.text.Editable;
import android.text.Html;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;
import com.urbanairship.UAirship;
import com.urbanairship.analytics.Analytics;
import com.urbanairship.push.PushManager;
import com.urbanairship.push.PushPreferences;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.channels.FileChannel;
import java.util.Date;
import java.util.HashMap;

public class EtceteraPlugin
  implements TextToSpeech.OnInitListener, TextToSpeech.OnUtteranceCompletedListener
{
  private static EtceteraPlugin _instance;
  private final String DONT_SHOW_AGAIN_KEY = "RTADontShowAgain";
  private final String FIRST_LAUNCH_DATE_KEY = "RTAFirstLaunchDate";
  private final String LAST_TIME_ASKED = "RTALastTimeAsked";
  private final String LAUNCH_COUNT_KEY = "RTALaunchCount";
  public Activity _activity;
  private String _desiredFileName = "image.jpg";
  private int _desiredHeight = 512;
  private int _desiredWidth = 512;
  private ProgressDialog _dialog;
  private TextToSpeech _tts;
  private Field _unityPlayerActivityField;
  private Class<?> _unityPlayerClass;
  private Method _unitySendMessageMethod;
  private int _utteranceId = 0;
  
  public EtceteraPlugin()
  {
    try
    {
      this._unityPlayerClass = Class.forName("com.unity3d.player.UnityPlayer");
      this._unityPlayerActivityField = this._unityPlayerClass.getField("currentActivity");
      this._unitySendMessageMethod = this._unityPlayerClass.getMethod("UnitySendMessage", new Class[] { String.class, String.class, String.class });
      return;
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      Log.i("Prime31", "could not find UnityPlayer class: " + localClassNotFoundException.getMessage());
      return;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      Log.i("Prime31", "could not find currentActivity field: " + localNoSuchFieldException.getMessage());
      return;
    }
    catch (Exception localException)
    {
      Log.i("Prime31", "unkown exception occurred locating UnityPlayer.currentActivity: " + localException.getMessage());
    }
  }
  
  public static void copyFile(File paramFile1, File paramFile2)
    throws IOException
  {
    if (!paramFile2.exists()) {
      paramFile2.createNewFile();
    }
    File localFile = null;
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      paramFile1 = new FileInputStream(paramFile1).getChannel();
      localObject1 = localObject2;
      localFile = paramFile1;
      paramFile2 = new FileOutputStream(paramFile2).getChannel();
      localObject1 = paramFile2;
      localFile = paramFile1;
      paramFile2.transferFrom(paramFile1, 0L, paramFile1.size());
      if (paramFile1 != null) {
        paramFile1.close();
      }
      if (paramFile2 != null) {
        paramFile2.close();
      }
      return;
    }
    finally
    {
      if (localFile != null) {
        localFile.close();
      }
      if (localObject1 != null) {
        ((FileChannel)localObject1).close();
      }
    }
  }
  
  private Activity getActivity()
  {
    if (this._unityPlayerActivityField != null) {
      try
      {
        Activity localActivity = (Activity)this._unityPlayerActivityField.get(this._unityPlayerClass);
        return localActivity;
      }
      catch (Exception localException)
      {
        Log.i("Prime31", "error getting currentActivity: " + localException.getMessage());
      }
    }
    return this._activity;
  }
  
  private HashMap<String, String> getTtsUtteranceIdHashMap()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("utteranceId", Integer.toString(this._utteranceId));
    this._utteranceId += 1;
    return localHashMap;
  }
  
  public static EtceteraPlugin instance()
  {
    if (_instance == null) {
      _instance = new EtceteraPlugin();
    }
    return _instance;
  }
  
  private void resizeImageAtPath(String paramString1, String paramString2)
    throws FileNotFoundException
  {
    Bitmap localBitmap = BitmapFactory.decodeFile(paramString1);
    Log.i("Prime31", "found image: " + localBitmap);
    File localFile1;
    File localFile2;
    if (localBitmap == null)
    {
      localFile1 = new File(paramString1);
      localFile2 = new File(paramString2);
    }
    try
    {
      copyFile(localFile1, localFile2);
      Log.i("Prime31", "resizing image at path: " + paramString1);
      int i = localBitmap.getWidth();
      int j = localBitmap.getHeight();
      if ((this._desiredWidth == 0) && (this._desiredHeight == 0))
      {
        this._desiredWidth = i;
        this._desiredHeight = j;
      }
      float f1 = this._desiredWidth / i;
      float f2 = this._desiredHeight / j;
      paramString1 = new Matrix();
      paramString1.postScale(f1, f2);
      paramString1 = Bitmap.createBitmap(localBitmap, 0, 0, i, j, paramString1, true);
      paramString2 = new FileOutputStream(paramString2);
      paramString1.compress(Bitmap.CompressFormat.JPEG, 70, paramString2);
      return;
    }
    catch (IOException paramString1)
    {
      Log.e("Prime31", "failed to perform fallback copy of file: " + paramString1.getMessage());
      throw new FileNotFoundException();
    }
  }
  
  private TextToSpeech tts()
  {
    if (this._tts == null)
    {
      this._tts = new TextToSpeech(getActivity(), this);
      this._tts.setOnUtteranceCompletedListener(this);
    }
    return this._tts;
  }
  
  public void UnitySendMessage(String paramString1, String paramString2, String paramString3)
  {
    if (this._unitySendMessageMethod != null) {
      try
      {
        this._unitySendMessageMethod.invoke(null, new Object[] { paramString1, paramString2, paramString3 });
        return;
      }
      catch (IllegalArgumentException paramString1)
      {
        Log.i("Prime31", "could not find UnitySendMessage method: " + paramString1.getMessage());
        return;
      }
      catch (IllegalAccessException paramString1)
      {
        Log.i("Prime31", "could not find UnitySendMessage method: " + paramString1.getMessage());
        return;
      }
      catch (InvocationTargetException paramString1)
      {
        Log.i("Prime31", "could not find UnitySendMessage method: " + paramString1.getMessage());
        return;
      }
    }
    Log.i("Prime31", "UnitySendMessage: " + paramString1 + ", " + paramString2 + ", " + paramString3);
  }
  
  public void askForReview(int paramInt1, int paramInt2, int paramInt3, String paramString1, String paramString2, String paramString3)
  {
    SharedPreferences localSharedPreferences = getActivity().getSharedPreferences("RTA", 0);
    if (localSharedPreferences.getBoolean("RTADontShowAgain", false)) {
      return;
    }
    SharedPreferences.Editor localEditor = localSharedPreferences.edit();
    long l = localSharedPreferences.getLong("RTALaunchCount", 0L) + 1L;
    localEditor.putLong("RTALaunchCount", l);
    Long localLong2 = Long.valueOf(localSharedPreferences.getLong("RTAFirstLaunchDate", 0L));
    Long localLong1 = localLong2;
    if (localLong2.longValue() == 0L)
    {
      Log.i("Prime31", "first launch date not set in prefs. setting it now");
      localLong1 = Long.valueOf(System.currentTimeMillis());
      localEditor.putLong("RTAFirstLaunchDate", localLong1.longValue());
    }
    if (l >= paramInt1)
    {
      Log.i("Prime31", "launch count > launchesUntilPrompt. checking to see if first launch was greater than hoursUntilPrompt");
      if (System.currentTimeMillis() >= localLong1.longValue() + paramInt2 * 60 * 60 * 1000)
      {
        Log.i("Prime31", "hoursUntilFirstPrompt have expired so we are clear to proceed");
        localLong1 = Long.valueOf(localSharedPreferences.getLong("RTALastTimeAsked", 0L));
        if ((localLong1.longValue() == 0L) || (System.currentTimeMillis() >= localLong1.longValue() + paramInt3 * 60 * 60 * 1000))
        {
          Log.i("Prime31", "lastPromptDate is either 0 or enough time has elapsed to prompt again");
          localEditor.putLong("RTALastTimeAsked", System.currentTimeMillis());
          askForReviewNow(paramString1, paramString2, paramString3);
        }
      }
    }
    localEditor.commit();
  }
  
  public void askForReviewNow(final String paramString1, final String paramString2, final String paramString3)
  {
    final SharedPreferences localSharedPreferences = getActivity().getSharedPreferences("RTA", 0);
    if (localSharedPreferences.getBoolean("RTADontShowAgain", false)) {
      return;
    }
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        final Dialog localDialog = new Dialog(EtceteraPlugin.this.getActivity());
        localDialog.setTitle(paramString1);
        Object localObject1 = new LinearLayout(EtceteraPlugin.this.getActivity());
        ((LinearLayout)localObject1).setPadding(5, 0, 5, 0);
        ((LinearLayout)localObject1).setOrientation(1);
        Object localObject2 = new TextView(EtceteraPlugin.this.getActivity());
        ((TextView)localObject2).setIncludeFontPadding(true);
        ((TextView)localObject2).setText(paramString2);
        ((TextView)localObject2).setWidth(500);
        ((LinearLayout)localObject1).addView((View)localObject2);
        localObject2 = new View(EtceteraPlugin.this.getActivity());
        ((View)localObject2).setLayoutParams(new ViewGroup.LayoutParams(10, 10));
        ((LinearLayout)localObject1).addView((View)localObject2);
        localObject2 = new Button(EtceteraPlugin.this.getActivity());
        ((Button)localObject2).setText("Yes, rate it!");
        ((Button)localObject2).setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymous2View)
          {
            paramAnonymous2View = this.val$prefs.edit();
            paramAnonymous2View.putBoolean("RTADontShowAgain", true);
            paramAnonymous2View.commit();
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "askForReviewWillOpenMarket", "");
            paramAnonymous2View = "market://";
            if (Build.VERSION.SDK_INT >= 11)
            {
              Log.i("Prime31", "we have Honeycomb so redirect to the webpage instead of the Market");
              paramAnonymous2View = "https://market.android.com/";
            }
            EtceteraPlugin.this.getActivity().startActivity(new Intent("android.intent.action.VIEW", Uri.parse(paramAnonymous2View + "details?id=" + this.val$appPackageName)));
            localDialog.dismiss();
          }
        });
        ((LinearLayout)localObject1).addView((View)localObject2);
        localObject2 = new Button(EtceteraPlugin.this.getActivity());
        ((Button)localObject2).setText("Remind me later");
        ((Button)localObject2).setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymous2View)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "askForReviewRemindMeLater", "");
            localDialog.dismiss();
          }
        });
        ((LinearLayout)localObject1).addView((View)localObject2);
        localObject2 = new Button(EtceteraPlugin.this.getActivity());
        ((Button)localObject2).setText("Don't ask again");
        ((Button)localObject2).setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymous2View)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "askForReviewDontAskAgain", "");
            paramAnonymous2View = this.val$prefs.edit();
            paramAnonymous2View.putBoolean("RTADontShowAgain", true);
            paramAnonymous2View.commit();
            localDialog.dismiss();
          }
        });
        ((LinearLayout)localObject1).addView((View)localObject2);
        localDialog.setContentView((View)localObject1);
        localDialog.show();
        float f = EtceteraPlugin.this.getActivity().getWindowManager().getDefaultDisplay().getWidth() * 0.8F;
        if (Build.VERSION.SDK_INT >= 11) {
          f = 450.0F;
        }
        localObject1 = new WindowManager.LayoutParams();
        ((WindowManager.LayoutParams)localObject1).copyFrom(localDialog.getWindow().getAttributes());
        ((WindowManager.LayoutParams)localObject1).width = ((int)f);
        localDialog.getWindow().setAttributes((WindowManager.LayoutParams)localObject1);
      }
    });
  }
  
  public void cameraPhotoTaken(String paramString)
  {
    if (paramString == null)
    {
      UnitySendMessage("EtceteraAndroidManager", "photoChooserCancelled", "");
      return;
    }
    Log.i("Prime31", "going to resize the file at path: " + paramString);
    String str = getActivity().getCacheDir().getAbsolutePath() + "/" + this._desiredFileName;
    try
    {
      resizeImageAtPath(paramString, str);
      UnitySendMessage("EtceteraAndroidManager", "photoChooserSucceeded", str);
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      Log.i("Prime31", "file could not be found to resize it: " + paramString);
      UnitySendMessage("EtceteraAndroidManager", "photoChooserCancelled", "");
    }
  }
  
  public float getScreenDensity()
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    getActivity().getWindowManager().getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.density;
  }
  
  public void hideProgressDialog()
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (EtceteraPlugin.this._dialog != null)
        {
          EtceteraPlugin.this._dialog.dismiss();
          EtceteraPlugin.this._dialog = null;
        }
      }
    });
  }
  
  public void initTTS()
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        EtceteraPlugin.this.tts();
      }
    });
  }
  
  public void onInit(int paramInt)
  {
    if (paramInt == 0)
    {
      UnitySendMessage("EtceteraAndroidManager", "ttsInitialized", "1");
      return;
    }
    UnitySendMessage("EtceteraAndroidManager", "ttsInitialized", "0");
  }
  
  public void onUtteranceCompleted(String paramString)
  {
    UnitySendMessage("EtceteraAndroidManager", "ttsUtteranceCompleted", paramString);
  }
  
  public void photoAlbumItemChosen(String paramString)
  {
    if (paramString == null)
    {
      UnitySendMessage("EtceteraAndroidManager", "albumChooserCancelled", "");
      return;
    }
    Log.i("Prime31", "going to resize the file at path: " + paramString);
    String str = getActivity().getCacheDir().getAbsolutePath() + "/" + this._desiredFileName;
    try
    {
      resizeImageAtPath(paramString, str);
      UnitySendMessage("EtceteraAndroidManager", "albumChooserSucceeded", str);
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      Log.i("Prime31", "file could not be found to resize it: " + paramString);
      UnitySendMessage("EtceteraAndroidManager", "albumChooserCancelled", "");
    }
  }
  
  public void playMovie(final String paramString, final int paramInt1, final boolean paramBoolean1, final int paramInt2, final boolean paramBoolean2)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Bundle localBundle = new Bundle();
        localBundle.putString("path", paramString);
        localBundle.putBoolean("showControls", paramBoolean1);
        localBundle.putInt("color", paramInt1);
        localBundle.putInt("scalingMode", paramInt2);
        localBundle.putBoolean("closeOnTouch", paramBoolean2);
        Intent localIntent = new Intent(EtceteraPlugin.this.getActivity().getApplicationContext(), P31VideoPlayerActivity.class);
        localIntent.putExtras(localBundle);
        EtceteraPlugin.this.getActivity().startActivity(localIntent);
      }
    });
  }
  
  public void playSilence(final long paramLong, int paramInt)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        HashMap localHashMap = EtceteraPlugin.this.getTtsUtteranceIdHashMap();
        if (EtceteraPlugin.this.tts().playSilence(paramLong, this.val$queueMode, localHashMap) == -1) {
          Log.i("Prime31", "tts failed to play silence");
        }
      }
    });
  }
  
  public void promptForPictureFromAlbum(int paramInt1, int paramInt2, String paramString)
  {
    this._desiredWidth = paramInt1;
    this._desiredHeight = paramInt2;
    this._desiredFileName = paramString;
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Intent localIntent = new Intent(EtceteraPlugin.this.getActivity(), EtceteraProxyActivity.class);
        localIntent.putExtra("type", "album");
        EtceteraPlugin.this.getActivity().startActivity(localIntent);
      }
    });
  }
  
  public void promptToTakePhoto(int paramInt1, int paramInt2, String paramString)
  {
    this._desiredWidth = paramInt1;
    this._desiredHeight = paramInt2;
    this._desiredFileName = paramString;
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Intent localIntent = new Intent(EtceteraPlugin.this.getActivity(), EtceteraProxyActivity.class);
        localIntent.putExtra("type", "camera");
        EtceteraPlugin.this.getActivity().startActivity(localIntent);
      }
    });
  }
  
  public void promptToTakeVideo(String paramString)
  {
    String str = paramString;
    if (!paramString.endsWith("3gp")) {
      if (!paramString.contains(".")) {
        break label74;
      }
    }
    label74:
    for (str = paramString.substring(0, paramString.length() - 3) + "3gp";; str = paramString + ".3gp")
    {
      this._desiredFileName = str;
      getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          Intent localIntent = new Intent(EtceteraPlugin.this.getActivity(), EtceteraProxyActivity.class);
          localIntent.putExtra("type", "video");
          localIntent.putExtra("path", EtceteraPlugin.this.getActivity().getCacheDir().getAbsolutePath() + "/" + EtceteraPlugin.this._desiredFileName);
          EtceteraPlugin.this.getActivity().startActivity(localIntent);
        }
      });
      return;
    }
  }
  
  public void resetAskForReview()
  {
    SharedPreferences.Editor localEditor = getActivity().getSharedPreferences("RTA", 0).edit();
    localEditor.clear();
    localEditor.commit();
  }
  
  public boolean saveImageToGallery(String paramString1, String paramString2)
  {
    Object localObject1 = new ContentValues();
    ((ContentValues)localObject1).put("title", paramString2);
    ((ContentValues)localObject1).put("date_added", Long.valueOf(new Date().getTime()));
    ((ContentValues)localObject1).put("datetaken", Long.valueOf(new Date().getTime()));
    ((ContentValues)localObject1).put("date_modified", Long.valueOf(new Date().getTime()));
    ((ContentValues)localObject1).put("mime_type", "image/png");
    try
    {
      paramString2 = new File(paramString1);
      Object localObject2 = paramString2.getParentFile();
      String str = ((File)localObject2).toString().toLowerCase();
      localObject2 = ((File)localObject2).getName().toLowerCase();
      ((ContentValues)localObject1).put("bucket_id", Integer.valueOf(str.hashCode()));
      ((ContentValues)localObject1).put("bucket_display_name", (String)localObject2);
      ((ContentValues)localObject1).put("_size", Long.valueOf(paramString2.length()));
      ((ContentValues)localObject1).put("_data", paramString1);
      paramString1 = getActivity().getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, (ContentValues)localObject1);
      paramString2 = new P31MediaScanner(paramString2);
      localObject1 = new MediaScannerConnection(getActivity(), paramString2);
      paramString2.setScanner((MediaScannerConnection)localObject1);
      ((MediaScannerConnection)localObject1).connect();
      Log.i("Prime31", " saved to gallery with uri: " + paramString1);
      return true;
    }
    catch (Exception paramString1)
    {
      Log.i("Prime31", "saveImageToGallery failed: " + paramString1.getMessage());
    }
    return false;
  }
  
  /* Error */
  public void scaleImageAtPath(String paramString, float paramFloat)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 313	android/graphics/BitmapFactory:decodeFile	(Ljava/lang/String;)Landroid/graphics/Bitmap;
    //   4: astore 5
    //   6: aload 5
    //   8: ifnonnull +27 -> 35
    //   11: ldc -88
    //   13: new 170	java/lang/StringBuilder
    //   16: dup
    //   17: ldc_w 669
    //   20: invokespecial 175	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   23: aload_1
    //   24: invokevirtual 183	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   27: invokevirtual 186	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   30: invokestatic 360	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   33: pop
    //   34: return
    //   35: aload 5
    //   37: invokevirtual 329	android/graphics/Bitmap:getWidth	()I
    //   40: istore_3
    //   41: aload 5
    //   43: invokevirtual 332	android/graphics/Bitmap:getHeight	()I
    //   46: istore 4
    //   48: new 334	android/graphics/Matrix
    //   51: dup
    //   52: invokespecial 335	android/graphics/Matrix:<init>	()V
    //   55: astore 6
    //   57: aload 6
    //   59: fload_2
    //   60: fload_2
    //   61: invokevirtual 339	android/graphics/Matrix:postScale	(FF)Z
    //   64: pop
    //   65: aload 5
    //   67: iconst_0
    //   68: iconst_0
    //   69: iload_3
    //   70: iload 4
    //   72: aload 6
    //   74: iconst_1
    //   75: invokestatic 343	android/graphics/Bitmap:createBitmap	(Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;
    //   78: astore 5
    //   80: new 254	java/io/FileOutputStream
    //   83: dup
    //   84: aload_1
    //   85: invokespecial 344	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   88: astore_1
    //   89: aload 5
    //   91: getstatic 350	android/graphics/Bitmap$CompressFormat:JPEG	Landroid/graphics/Bitmap$CompressFormat;
    //   94: bipush 70
    //   96: aload_1
    //   97: invokevirtual 354	android/graphics/Bitmap:compress	(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
    //   100: pop
    //   101: return
    //   102: astore_1
    //   103: ldc -88
    //   105: new 170	java/lang/StringBuilder
    //   108: dup
    //   109: ldc_w 671
    //   112: invokespecial 175	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   115: aload_1
    //   116: invokevirtual 672	java/io/FileNotFoundException:getMessage	()Ljava/lang/String;
    //   119: invokevirtual 183	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   122: invokevirtual 186	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   125: invokestatic 192	android/util/Log:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   128: pop
    //   129: return
    //   130: astore_1
    //   131: goto -28 -> 103
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	134	0	this	EtceteraPlugin
    //   0	134	1	paramString	String
    //   0	134	2	paramFloat	float
    //   40	30	3	i	int
    //   46	25	4	j	int
    //   4	86	5	localBitmap	Bitmap
    //   55	18	6	localMatrix	Matrix
    // Exception table:
    //   from	to	target	type
    //   80	89	102	java/io/FileNotFoundException
    //   89	101	130	java/io/FileNotFoundException
  }
  
  public void setPitch(final float paramFloat)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (EtceteraPlugin.this.tts().setPitch(paramFloat) == -1) {
          Log.i("Prime31", "tts failed to set pitch");
        }
      }
    });
  }
  
  public void setSpeechRate(final float paramFloat)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (EtceteraPlugin.this.tts().setSpeechRate(paramFloat) == -1) {
          Log.i("Prime31", "tts failed to set speech rate");
        }
      }
    });
  }
  
  public void showAlert(final String paramString1, final String paramString2, final String paramString3, final String paramString4)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        new AlertDialog.Builder(EtceteraPlugin.this.getActivity()).setTitle(paramString1).setMessage(paramString2).setPositiveButton(paramString3, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "alertButtonClicked", this.val$positiveButton);
          }
        }).setNegativeButton(paramString4, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "alertButtonClicked", this.val$negativeButton);
          }
        }).setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymous2DialogInterface)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "alertCancelled", "");
          }
        }).show();
      }
    });
  }
  
  public void showAlertPrompt(final String paramString1, final String paramString2, final String paramString3, final String paramString4, final String paramString5, final String paramString6)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Object localObject = new EditText(EtceteraPlugin.this.getActivity());
        ((EditText)localObject).setHint(paramString3);
        ((EditText)localObject).setText(paramString4);
        localObject = new AlertDialog.Builder(EtceteraPlugin.this.getActivity()).setTitle(paramString1).setMessage(paramString2).setView((View)localObject).setPositiveButton(paramString5, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "promptFinishedWithText", this.val$input.getText().toString());
          }
        }).setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymous2DialogInterface)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "promptCancelled", "");
          }
        });
        if (paramString6.length() > 0) {
          ((AlertDialog.Builder)localObject).setNegativeButton(paramString6, new DialogInterface.OnClickListener()
          {
            public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
            {
              EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "promptCancelled", "");
            }
          });
        }
        ((AlertDialog.Builder)localObject).show();
      }
    });
  }
  
  public void showAlertPromptWithTwoFields(final String paramString1, final String paramString2, final String paramString3, final String paramString4, final String paramString5, final String paramString6, final String paramString7, final String paramString8)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        LinearLayout localLinearLayout = new LinearLayout(EtceteraPlugin.this.getActivity());
        localLinearLayout.setOrientation(1);
        localLinearLayout.setLayoutParams(new LinearLayout.LayoutParams(-1, -2));
        final EditText localEditText1 = new EditText(EtceteraPlugin.this.getActivity());
        final EditText localEditText2 = new EditText(EtceteraPlugin.this.getActivity());
        localEditText1.setHint(paramString3);
        localEditText1.setText(paramString4);
        localEditText2.setHint(paramString5);
        localEditText2.setText(paramString6);
        localLinearLayout.addView(localEditText1);
        localLinearLayout.addView(localEditText2);
        new AlertDialog.Builder(EtceteraPlugin.this.getActivity()).setTitle(paramString1).setMessage(paramString2).setView(localLinearLayout).setPositiveButton(paramString7, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "promptFinishedWithText", localEditText1.getText().toString() + "|||" + localEditText2.getText().toString());
          }
        }).setNegativeButton(paramString8, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "twoFieldPromptCancelled", "");
          }
        }).setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymous2DialogInterface)
          {
            EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "twoFieldPromptCancelled", "");
          }
        }).show();
      }
    });
  }
  
  public void showEmailComposer(final String paramString1, final String paramString2, final String paramString3, final boolean paramBoolean, final String paramString4)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Intent localIntent = new Intent("android.intent.action.SEND");
        if (paramBoolean)
        {
          localIntent.setType("text/html");
          localIntent.putExtra("android.intent.extra.TEXT", Html.fromHtml(paramString3));
        }
        for (;;)
        {
          localIntent.putExtra("android.intent.extra.EMAIL", new String[] { paramString1 });
          localIntent.putExtra("android.intent.extra.SUBJECT", paramString2);
          if ((paramString4 != null) && (paramString4.length() > 0))
          {
            localIntent.putExtra("android.intent.extra.STREAM", Uri.fromFile(new File(paramString4)));
            Log.i("prime31", "added attachment");
          }
          EtceteraPlugin.this.getActivity().startActivity(Intent.createChooser(localIntent, "Send mail..."));
          return;
          localIntent.setType("plain/text");
          localIntent.putExtra("android.intent.extra.TEXT", paramString3);
        }
      }
    });
  }
  
  public void showProgressDialog(final String paramString1, final String paramString2)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        EtceteraPlugin.this._dialog = ProgressDialog.show(EtceteraPlugin.this.getActivity(), paramString1, paramString2, true);
      }
    });
  }
  
  public void showSMSComposer(final String paramString)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        try
        {
          Intent localIntent = new Intent("android.intent.action.VIEW");
          localIntent.putExtra("sms_body", paramString);
          localIntent.setType("vnd.android-dir/mms-sms");
          EtceteraPlugin.this.getActivity().startActivity(localIntent);
          return;
        }
        catch (ActivityNotFoundException localActivityNotFoundException)
        {
          Log.e("Prime31", "no SMS actvity found: " + localActivityNotFoundException.getMessage());
        }
      }
    });
  }
  
  public void showToast(final String paramString, final boolean paramBoolean)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Activity localActivity = EtceteraPlugin.this.getActivity();
        String str = paramString;
        if (paramBoolean) {}
        for (int i = 0;; i = 1)
        {
          Toast.makeText(localActivity, str, i).show();
          return;
        }
      }
    });
  }
  
  public void showWebView(String paramString1, final String paramString2)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        Intent localIntent = new Intent(EtceteraPlugin.this.getActivity(), WebViewActivity.class);
        localIntent.putExtra("url", paramString2);
        EtceteraPlugin.this.getActivity().startActivity(localIntent);
      }
    });
  }
  
  public void speak(final String paramString, final int paramInt)
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        HashMap localHashMap = EtceteraPlugin.this.getTtsUtteranceIdHashMap();
        if (EtceteraPlugin.this.tts().speak(paramString, paramInt, localHashMap) == -1) {
          EtceteraPlugin.this.UnitySendMessage("EtceteraAndroidManager", "ttsFailedToSpeak", "");
        }
      }
    });
  }
  
  public void stop()
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (EtceteraPlugin.this.tts().stop() == -1) {
          Log.i("Prime31", "tts failed to stop");
        }
      }
    });
  }
  
  public void teardownTTS()
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (EtceteraPlugin.this._tts != null)
        {
          EtceteraPlugin.this._tts.stop();
          EtceteraPlugin.this._tts.shutdown();
          EtceteraPlugin.this._tts = null;
        }
      }
    });
  }
  
  public void urbanAirshipActivityStarted()
  {
    UAirship.shared().getAnalytics().activityStarted(getActivity());
  }
  
  public void urbanAirshipActivityStopped()
  {
    UAirship.shared().getAnalytics().activityStopped(getActivity());
  }
  
  public void urbanAirshipDisablePush() {}
  
  public void urbanAirshipEnablePush() {}
  
  public String urbanAirshipGetAPID()
  {
    return PushManager.shared().getPreferences().getPushId();
  }
  
  public void videoTaken(String paramString)
  {
    if (paramString == null)
    {
      UnitySendMessage("EtceteraAndroidManager", "videoRecordingCancelled", "");
      return;
    }
    UnitySendMessage("EtceteraAndroidManager", "videoRecordingSucceeded", paramString);
  }
  
  public class P31MediaScanner
    implements MediaScannerConnection.MediaScannerConnectionClient
  {
    private File _file;
    private MediaScannerConnection _scanner;
    private boolean _scannerConnected;
    
    public P31MediaScanner(File paramFile)
    {
      this._file = paramFile;
    }
    
    public void onMediaScannerConnected()
    {
      Log.i("Prime31", "scanner connected");
      if (this._scanner != null) {
        this._scanner.scanFile(this._file.getAbsolutePath(), "image/png");
      }
      this._scannerConnected = true;
    }
    
    public void onScanCompleted(String paramString, Uri paramUri)
    {
      Log.i("Prime31", "scanner finished for file: " + paramString);
    }
    
    public void setScanner(MediaScannerConnection paramMediaScannerConnection)
    {
      Log.i("Prime31", "scanner set");
      this._scanner = paramMediaScannerConnection;
      if (this._scannerConnected) {
        this._scanner.scanFile(this._file.getAbsolutePath(), "image/png");
      }
    }
  }
}
