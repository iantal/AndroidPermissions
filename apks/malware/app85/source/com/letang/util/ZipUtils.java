package com.letang.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

public class ZipUtils
{
  private static final int BUFF_SIZE = 1048576;
  
  public ZipUtils() {}
  
  public static Enumeration<?> getEntriesEnumeration(File paramFile)
    throws ZipException, IOException
  {
    return new ZipFile(paramFile).entries();
  }
  
  public static ArrayList<String> getEntriesNames(File paramFile)
    throws ZipException, IOException
  {
    ArrayList localArrayList = new ArrayList();
    paramFile = getEntriesEnumeration(paramFile);
    for (;;)
    {
      if (!paramFile.hasMoreElements()) {
        return localArrayList;
      }
      localArrayList.add(new String(getEntryName((ZipEntry)paramFile.nextElement()).getBytes("GB2312"), "8859_1"));
    }
  }
  
  public static String getEntryComment(ZipEntry paramZipEntry)
    throws UnsupportedEncodingException
  {
    return new String(paramZipEntry.getComment().getBytes("GB2312"), "8859_1");
  }
  
  public static String getEntryName(ZipEntry paramZipEntry)
    throws UnsupportedEncodingException
  {
    return new String(paramZipEntry.getName().getBytes("GB2312"), "8859_1");
  }
  
  public static void upZipFile(File paramFile, String paramString)
    throws ZipException, IOException
  {
    Object localObject1 = new File(paramString);
    if (!((File)localObject1).exists()) {
      ((File)localObject1).mkdirs();
    }
    paramFile = new ZipFile(paramFile);
    localObject1 = paramFile.entries();
    if (!((Enumeration)localObject1).hasMoreElements()) {
      return;
    }
    Object localObject2 = (ZipEntry)((Enumeration)localObject1).nextElement();
    InputStream localInputStream = paramFile.getInputStream((ZipEntry)localObject2);
    localObject2 = new File(new String((paramString + File.separator + ((ZipEntry)localObject2).getName()).getBytes("8859_1"), "GB2312"));
    if (!((File)localObject2).exists())
    {
      localObject3 = ((File)localObject2).getParentFile();
      if (!((File)localObject3).exists()) {
        ((File)localObject3).mkdirs();
      }
      ((File)localObject2).createNewFile();
    }
    localObject2 = new FileOutputStream((File)localObject2);
    Object localObject3 = new byte[1048576];
    for (;;)
    {
      int i = localInputStream.read((byte[])localObject3);
      if (i <= 0)
      {
        localInputStream.close();
        ((OutputStream)localObject2).close();
        break;
      }
      ((OutputStream)localObject2).write((byte[])localObject3, 0, i);
    }
  }
  
  public static ArrayList<File> upZipSelectedFile(File paramFile, String paramString1, String paramString2)
    throws ZipException, IOException
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject1 = new File(paramString1);
    if (!((File)localObject1).exists()) {
      ((File)localObject1).mkdir();
    }
    paramFile = new ZipFile(paramFile);
    localObject1 = paramFile.entries();
    do
    {
      if (!((Enumeration)localObject1).hasMoreElements()) {
        return localArrayList;
      }
      localObject2 = (ZipEntry)((Enumeration)localObject1).nextElement();
    } while (!((ZipEntry)localObject2).getName().contains(paramString2));
    InputStream localInputStream = paramFile.getInputStream((ZipEntry)localObject2);
    Object localObject2 = new File(new String((paramString1 + File.separator + ((ZipEntry)localObject2).getName()).getBytes("8859_1"), "GB2312"));
    if (!((File)localObject2).exists())
    {
      localObject3 = ((File)localObject2).getParentFile();
      if (!((File)localObject3).exists()) {
        ((File)localObject3).mkdirs();
      }
      ((File)localObject2).createNewFile();
    }
    Object localObject3 = new FileOutputStream((File)localObject2);
    byte[] arrayOfByte = new byte[1048576];
    for (;;)
    {
      int i = localInputStream.read(arrayOfByte);
      if (i <= 0)
      {
        localInputStream.close();
        ((OutputStream)localObject3).close();
        localArrayList.add(localObject2);
        break;
      }
      ((OutputStream)localObject3).write(arrayOfByte, 0, i);
    }
  }
  
  private static void zipFile(File paramFile, ZipOutputStream paramZipOutputStream, String paramString)
    throws FileNotFoundException, IOException
  {
    Object localObject = new StringBuilder(String.valueOf(paramString));
    int j;
    int i;
    if (paramString.trim().length() == 0)
    {
      paramString = "";
      paramString = new String((paramString + paramFile.getName()).getBytes("8859_1"), "GB2312");
      if (paramFile.isDirectory())
      {
        paramFile = paramFile.listFiles();
        j = paramFile.length;
        i = 0;
      }
    }
    else
    {
      for (;;)
      {
        if (i >= j)
        {
          return;
          paramString = File.separator;
          break;
        }
        zipFile(paramFile[i], paramZipOutputStream, paramString);
        i += 1;
      }
    }
    localObject = new byte[1048576];
    paramFile = new BufferedInputStream(new FileInputStream(paramFile), 1048576);
    paramZipOutputStream.putNextEntry(new ZipEntry(paramString));
    for (;;)
    {
      i = paramFile.read((byte[])localObject);
      if (i == -1)
      {
        paramFile.close();
        paramZipOutputStream.flush();
        paramZipOutputStream.closeEntry();
        return;
      }
      paramZipOutputStream.write((byte[])localObject, 0, i);
    }
  }
  
  public static void zipFiles(Collection<File> paramCollection, File paramFile)
    throws IOException
  {
    paramFile = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(paramFile), 1048576));
    paramCollection = paramCollection.iterator();
    for (;;)
    {
      if (!paramCollection.hasNext())
      {
        paramFile.close();
        return;
      }
      zipFile((File)paramCollection.next(), paramFile, "");
    }
  }
  
  public static void zipFiles(Collection<File> paramCollection, File paramFile, String paramString)
    throws IOException
  {
    paramFile = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(paramFile), 1048576));
    paramCollection = paramCollection.iterator();
    for (;;)
    {
      if (!paramCollection.hasNext())
      {
        paramFile.setComment(paramString);
        paramFile.close();
        return;
      }
      zipFile((File)paramCollection.next(), paramFile, "");
    }
  }
}
