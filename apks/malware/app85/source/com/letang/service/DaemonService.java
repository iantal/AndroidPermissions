package com.letang.service;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.Service;
import android.content.ComponentName;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.res.Resources;
import android.os.IBinder;
import android.util.Log;
import com.letang.launchui.AdActivity;
import com.letang.launchui.RecoActivity;
import com.letang.launchui.RecoOtherActivity;
import dalvik.system.DexClassLoader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;

public class DaemonService
  extends Service
{
  private Resources apkResources;
  private Class clientClass;
  private Object clientInstance;
  private boolean forceStop = false;
  int resourceId = 0;
  
  public DaemonService() {}
  
  private Boolean getRebootFlag()
  {
    return Boolean.valueOf(getSharedPreferences("RebootService", 2).getBoolean("reboot", false));
  }
  
  private void setRebootFlag(Boolean paramBoolean)
  {
    getSharedPreferences("RebootService", 2).edit().putBoolean("reboot", paramBoolean.booleanValue());
  }
  
  public Resources getResources()
  {
    if (this.apkResources == null) {
      return super.getResources();
    }
    return this.apkResources;
  }
  
  void loadServiceClass()
  {
    DexClassLoader localDexClassLoader = PlugInTools.getApkLoader(this, 1);
    Log.d("LoadDex", "LoadDex");
    try
    {
      this.clientClass = localDexClassLoader.loadClass("com.letang.apkservice.ClientService");
      this.clientInstance = this.clientClass.getConstructor(new Class[0]).newInstance(new Object[0]);
      this.apkResources = PlugInTools.getApkFileInfo(getApplicationContext(), PlugInTools.getApkPath(1, this));
      setAdActivity();
      setRecoActivity();
      setRecoOtherActivity();
      setNotifyIconId(this.resourceId);
      this.clientClass.getMethod("setService", new Class[] { Service.class }).invoke(this.clientInstance, new Object[] { this });
      return;
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      localClassNotFoundException.printStackTrace();
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      localIllegalArgumentException.printStackTrace();
      return;
    }
    catch (SecurityException localSecurityException)
    {
      localSecurityException.printStackTrace();
      return;
    }
    catch (InstantiationException localInstantiationException)
    {
      localInstantiationException.printStackTrace();
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      localIllegalAccessException.printStackTrace();
      return;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      localInvocationTargetException.printStackTrace();
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      localNoSuchMethodException.printStackTrace();
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("onDestroy", new Class[0]);
      if (localMethod != null)
      {
        localMethod.setAccessible(true);
        localMethod.invoke(this.clientInstance, new Object[0]);
      }
      return;
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        try
        {
          if (getRebootFlag().booleanValue())
          {
            setRebootFlag(Boolean.valueOf(false));
            startClientService();
          }
          return;
        }
        catch (Exception localException2)
        {
          localException2.printStackTrace();
        }
        localException1 = localException1;
        localException1.printStackTrace();
      }
    }
  }
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    super.onStart(paramIntent, paramInt);
    paramIntent = ((ActivityManager)getSystemService("activity")).getRunningServices(Integer.MAX_VALUE).iterator();
    ActivityManager.RunningServiceInfo localRunningServiceInfo;
    do
    {
      if (!paramIntent.hasNext())
      {
        startClientService();
        return;
      }
      localRunningServiceInfo = (ActivityManager.RunningServiceInfo)paramIntent.next();
      Log.d("serviceName", localRunningServiceInfo.service.getClassName() + "--package--" + localRunningServiceInfo.service.getPackageName());
    } while ((!localRunningServiceInfo.service.getClassName().equals("com.letang.service.DaemonService")) || (localRunningServiceInfo.service.getPackageName().equals(getApplicationInfo().packageName)));
    stopSelf();
    PlugInTools.SystemExit(this);
  }
  
  void setAdActivity()
  {
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("setAdActivity", new Class[] { Class.class });
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, new Object[] { AdActivity.class });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  void setNotifyIconId(int paramInt)
  {
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("setNotifyIconId", new Class[] { Integer.TYPE });
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, new Object[] { Integer.valueOf(paramInt) });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  void setRecoActivity()
  {
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("setRecoActivity", new Class[] { Class.class });
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, new Object[] { RecoActivity.class });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  void setRecoOtherActivity()
  {
    try
    {
      Method localMethod = this.clientClass.getDeclaredMethod("setRecoOtherActivity", new Class[] { Class.class });
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, new Object[] { RecoOtherActivity.class });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void startClientService()
  {
    try
    {
      this.resourceId = 17301646;
      loadServiceClass();
      Method localMethod = this.clientClass.getDeclaredMethod("onStart", new Class[] { Intent.class, Integer.TYPE });
      localMethod.setAccessible(true);
      localMethod.invoke(this.clientInstance, new Object[] { null, Integer.valueOf(0) });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
}
