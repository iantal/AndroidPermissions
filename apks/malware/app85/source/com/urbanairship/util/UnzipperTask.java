package com.urbanairship.util;

import android.os.AsyncTask;
import com.urbanairship.Logger;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class UnzipperTask
  extends AsyncTask<File, Integer, Exception>
{
  private Delegate delegate;
  
  public UnzipperTask() {}
  
  protected Exception doInBackground(File... paramVarArgs)
  {
    if (paramVarArgs.length != 2) {
      throw new IllegalArgumentException();
    }
    File localFile = paramVarArgs[0];
    paramVarArgs = paramVarArgs[1];
    for (;;)
    {
      Object localObject2;
      Object localObject3;
      try
      {
        ZipFile localZipFile = new ZipFile(localFile.getCanonicalPath());
        Object localObject1 = Collections.list(localZipFile.entries());
        Logger.verbose("Zip file: " + localZipFile.getName() + " contains " + ((ArrayList)localObject1).size() + " files");
        localObject1 = ((ArrayList)localObject1).iterator();
        if (!((Iterator)localObject1).hasNext()) {
          break;
        }
        localObject2 = (ZipEntry)((Iterator)localObject1).next();
        if (((ZipEntry)localObject2).getSize() == 0L) {
          continue;
        }
        localObject3 = ((ZipEntry)localObject2).getName();
        Logger.info("Unzipping file entry: " + (String)localObject3);
        localObject3 = new File(paramVarArgs, (String)localObject3).getCanonicalFile();
        Logger.debug("Creating file " + localObject3);
        if (!((File)localObject3).getParentFile().mkdirs()) {
          Logger.debug("Couldn't create or didn't need to create " + ((File)localObject3).getParentFile());
        }
        ((File)localObject3).createNewFile();
        localObject2 = localZipFile.getInputStream((ZipEntry)localObject2);
        localObject3 = new FileOutputStream((File)localObject3);
        byte[] arrayOfByte = new byte['á€€'];
        int i = ((InputStream)localObject2).read(arrayOfByte);
        if (i > 0)
        {
          ((FileOutputStream)localObject3).write(arrayOfByte, 0, i);
          continue;
        }
        ((FileOutputStream)localObject3).flush();
      }
      catch (Exception paramVarArgs)
      {
        localFile.delete();
        return paramVarArgs;
      }
      ((InputStream)localObject2).close();
      ((FileOutputStream)localObject3).close();
    }
    localFile.delete();
    return null;
  }
  
  protected void onPostExecute(Exception paramException)
  {
    if (paramException != null)
    {
      this.delegate.onFail(paramException);
      return;
    }
    this.delegate.onSuccess();
  }
  
  protected void onProgressUpdate(Integer... paramVarArgs)
  {
    this.delegate.onProgressUpdate(paramVarArgs[0].intValue());
  }
  
  public void setDelegate(Delegate paramDelegate)
  {
    this.delegate = paramDelegate;
  }
  
  public static abstract class Delegate
  {
    public Delegate() {}
    
    public abstract void onFail(Exception paramException);
    
    public abstract void onProgressUpdate(int paramInt);
    
    public abstract void onSuccess();
  }
}
