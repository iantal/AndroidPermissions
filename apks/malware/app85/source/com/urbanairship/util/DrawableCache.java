package com.urbanairship.util;

import android.graphics.drawable.Drawable;
import com.urbanairship.Logger;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class DrawableCache
{
  private int currentSize;
  private final Map<String, Drawable> drawableMap = Collections.synchronizedMap(new LRUCache(20, 0.75F));
  private int maxSize;
  
  public DrawableCache(int paramInt)
  {
    setMaxSize(paramInt);
  }
  
  private void decrementSizeBy(Object paramObject)
  {
    this.currentSize -= estimatedSize((Drawable)paramObject);
    Logger.verbose("DrawableCache decrement: ~" + this.currentSize + " bytes");
  }
  
  private int estimatedSize(Drawable paramDrawable)
  {
    int i = paramDrawable.getIntrinsicWidth();
    int j = paramDrawable.getIntrinsicHeight();
    if ((i < 0) || (j < 0)) {
      return 0;
    }
    return i * j * 4;
  }
  
  private void housekeeping()
  {
    if (this.currentSize > this.maxSize)
    {
      Logger.verbose("DrawableCache: purge");
      Object localObject1 = this.drawableMap.entrySet();
      synchronized (this.drawableMap)
      {
        localObject1 = ((Set)localObject1).iterator();
        if ((((Iterator)localObject1).hasNext()) && (this.currentSize > this.maxSize))
        {
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject1).next();
          Logger.verbose("DrawableCache: removing " + (String)localEntry.getKey());
          ((Iterator)localObject1).remove();
        }
      }
    }
  }
  
  private void incrementSizeBy(Object paramObject)
  {
    this.currentSize += estimatedSize((Drawable)paramObject);
    Logger.verbose("DrawableCache increment: ~" + this.currentSize + " bytes");
  }
  
  public boolean containsKey(String paramString)
  {
    return this.drawableMap.containsKey(paramString);
  }
  
  public Drawable get(String paramString)
  {
    return (Drawable)this.drawableMap.get(paramString);
  }
  
  public Drawable put(String paramString, Drawable paramDrawable)
  {
    this.drawableMap.put(paramString, paramDrawable);
    housekeeping();
    return paramDrawable;
  }
  
  public Drawable remove(String paramString)
  {
    return (Drawable)this.drawableMap.remove(paramString);
  }
  
  public void setMaxSize(int paramInt)
  {
    this.maxSize = paramInt;
  }
  
  private class LRUCache<K, V>
    extends LinkedHashMap<K, V>
  {
    private static final long serialVersionUID = 1L;
    
    public LRUCache(int paramInt, float paramFloat)
    {
      super(paramFloat, true);
    }
    
    public V put(K paramK, V paramV)
    {
      DrawableCache.this.incrementSizeBy(paramV);
      return super.put(paramK, paramV);
    }
    
    public V remove(Object paramObject)
    {
      paramObject = super.remove(paramObject);
      DrawableCache.this.decrementSizeBy(paramObject);
      return paramObject;
    }
    
    protected boolean removeEldestEntry(Map.Entry<K, V> paramEntry)
    {
      return false;
    }
  }
}
