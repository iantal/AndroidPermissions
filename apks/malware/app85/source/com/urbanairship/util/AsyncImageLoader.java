package com.urbanairship.util;

import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.Message;
import com.urbanairship.Logger;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class AsyncImageLoader
{
  private Delegate delegate;
  
  public AsyncImageLoader(String paramString, Delegate paramDelegate)
  {
    this.delegate = paramDelegate;
    fetchDrawableOnThread(paramString);
  }
  
  private InputStream fetch(String paramString)
    throws MalformedURLException, IOException, IllegalStateException
  {
    return new DefaultHttpClient().execute(new HttpGet(paramString)).getEntity().getContent();
  }
  
  private Drawable fetchDrawable(String paramString)
  {
    try
    {
      paramString = Drawable.createFromStream(fetch(paramString), "Async Image");
      return paramString;
    }
    catch (MalformedURLException paramString)
    {
      Logger.error("fetchDrawable failed", paramString);
      return null;
    }
    catch (IOException paramString)
    {
      Logger.error("fetchDrawable failed", paramString);
      return null;
    }
    catch (IllegalStateException paramString)
    {
      Logger.error("fetchDrawable failed", paramString);
    }
    return null;
  }
  
  private void fetchDrawableOnThread(final String paramString)
  {
    new Thread()
    {
      public void handleMessage(Message paramAnonymousMessage)
      {
        if ((Drawable)paramAnonymousMessage.obj != null) {
          AsyncImageLoader.this.delegate.imageLoaded(paramString, (Drawable)paramAnonymousMessage.obj);
        }
      }
    }
    {
      public void run()
      {
        Object localObject = AsyncImageLoader.this.fetchDrawable(paramString);
        localObject = this.val$handler.obtainMessage(1, localObject);
        this.val$handler.sendMessage((Message)localObject);
      }
    }.start();
  }
  
  public static abstract class Delegate
  {
    public Delegate() {}
    
    public abstract void imageLoaded(String paramString, Drawable paramDrawable);
  }
}
