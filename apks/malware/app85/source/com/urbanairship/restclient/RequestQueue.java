package com.urbanairship.restclient;

import com.urbanairship.Logger;
import java.util.HashMap;
import java.util.LinkedList;

public class RequestQueue
{
  private HashMap<Request, AsyncHandler> handlers = new HashMap();
  private int maxConcurrentRequests = 3;
  private LinkedList<Request> requests = new LinkedList();
  private int runningRequests = 0;
  
  public RequestQueue() {}
  
  private void removeRequest(Request paramRequest)
  {
    try
    {
      Logger.verbose("removing request " + paramRequest.getURI());
      this.handlers.remove(paramRequest);
      this.runningRequests -= 1;
      update();
      return;
    }
    finally
    {
      paramRequest = finally;
      throw paramRequest;
    }
  }
  
  private void runRequest(final Request paramRequest)
  {
    Logger.verbose("running request " + paramRequest.getURI());
    this.runningRequests += 1;
    final AsyncHandler localAsyncHandler = (AsyncHandler)this.handlers.get(paramRequest);
    try
    {
      paramRequest.executeAsync(new AsyncHandler()
      {
        public void onComplete(Response paramAnonymousResponse)
        {
          RequestQueue.this.removeRequest(paramRequest);
          localAsyncHandler.onComplete(paramAnonymousResponse);
        }
        
        public void onError(Exception paramAnonymousException)
        {
          RequestQueue.this.removeRequest(paramRequest);
          localAsyncHandler.onError(paramAnonymousException);
        }
        
        public void onProgress(int paramAnonymousInt)
        {
          localAsyncHandler.onProgress(paramAnonymousInt);
        }
      });
      return;
    }
    catch (Exception localException)
    {
      Logger.error("Error running request", localException);
      localAsyncHandler.onError(localException);
      removeRequest(paramRequest);
    }
  }
  
  private void update()
  {
    while ((this.runningRequests < this.maxConcurrentRequests) && (!this.requests.isEmpty())) {
      runRequest((Request)this.requests.poll());
    }
  }
  
  public void addRequest(Request paramRequest, AsyncHandler paramAsyncHandler)
  {
    try
    {
      Logger.verbose("adding request " + paramRequest.getURI());
      this.requests.add(paramRequest);
      this.handlers.put(paramRequest, paramAsyncHandler);
      update();
      return;
    }
    finally
    {
      paramRequest = finally;
      throw paramRequest;
    }
  }
  
  public int getMaxConcurrentRequests()
  {
    return this.maxConcurrentRequests;
  }
  
  public void setMaxConcurrentRequests(int paramInt)
  {
    this.maxConcurrentRequests = paramInt;
  }
}
