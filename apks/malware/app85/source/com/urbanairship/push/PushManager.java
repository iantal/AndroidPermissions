package com.urbanairship.push;

import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.AirshipConfigOptions.TransportType;
import com.urbanairship.CoreReceiver;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.analytics.Analytics;
import com.urbanairship.analytics.PushArrivedEvent;
import com.urbanairship.push.c2dm.C2DMPushManager;
import com.urbanairship.push.c2dm.C2DMPushReceiver;
import com.urbanairship.push.embedded.EmbeddedPushManager;
import com.urbanairship.restclient.AppAuthenticatedRequest;
import com.urbanairship.restclient.AsyncHandler;
import com.urbanairship.restclient.Request;
import com.urbanairship.restclient.RequestQueue;
import com.urbanairship.restclient.Response;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public class PushManager
{
  private static final String ACTION_DELETE_APID = "com.urbanairship.push.DELETE_APID";
  public static final String ACTION_NOTIFICATION_OPENED = "com.urbanairship.push.NOTIFICATION_OPENED";
  public static final String ACTION_NOTIFICATION_OPENED_PROXY = "com.urbanairship.push.NOTIFICATION_OPENED_PROXY";
  public static final String ACTION_PUSH_RECEIVED = "com.urbanairship.push.PUSH_RECEIVED";
  public static final String ACTION_REGISTRATION_FINISHED = "com.urbanairship.push.REGISTRATION_FINISHED";
  private static final String ACTION_UPDATE_APID = "com.urbanairship.push.UPDATE_APID";
  public static final String EXTRA_ALERT = "com.urbanairship.push.ALERT";
  public static final String EXTRA_APID = "com.urbanairship.push.APID";
  public static final String EXTRA_C2DM_REGISTRATION_ID = "com.urbanairship.push.C2DM_REGISTRATION_ID";
  public static final String EXTRA_EXPIRATION = "com.urbanairship.push.EXPIRATION";
  public static final String EXTRA_NOTIFICATION_ID = "com.urbanairship.push.NOTIFICATION_ID";
  private static final String EXTRA_PING = "com.urbanairship.push.PING";
  public static final String EXTRA_PUSH_ID = "com.urbanairship.push.PUSH_ID";
  public static final String EXTRA_REGISTRATION_ERROR = "com.urbanairship.push.REGISTRATION_ERROR";
  public static final String EXTRA_REGISTRATION_VALID = "com.urbanairship.push.REGISTRATION_VALID";
  public static final String EXTRA_STRING_EXTRA = "com.urbanairship.push.STRING_EXTRA";
  private static final PushManager instance = new PushManager();
  private DeleteApidReceiver deleteApidReceiver = new DeleteApidReceiver(null);
  private Class<? extends BroadcastReceiver> intentReceiver;
  private PushNotificationBuilder notificationBuilder;
  private PushPreferences preferences = new PushPreferences();
  private Boolean reconnecting = Boolean.valueOf(false);
  private RequestQueue requestQueue = new RequestQueue();
  private UpdateApidReceiver updateApidReceiver = new UpdateApidReceiver(null);
  
  private PushManager()
  {
    this.requestQueue.setMaxConcurrentRequests(1);
    Context localContext = UAirship.shared().getApplicationContext();
    localContext.registerReceiver(this.updateApidReceiver, new IntentFilter("com.urbanairship.push.UPDATE_APID"));
    localContext.registerReceiver(this.deleteApidReceiver, new IntentFilter("com.urbanairship.push.DELETE_APID"));
    this.notificationBuilder = new BasicPushNotificationBuilder();
  }
  
  private static void checkRequiredPermission(String paramString)
  {
    PackageManager localPackageManager = UAirship.getPackageManager();
    if (!isPermissionKnown(paramString)) {
      Logger.error("Required permission " + paramString + " is unknown to PackageManager.");
    }
    while (-1 != localPackageManager.checkPermission(paramString, UAirship.getPackageName())) {
      return;
    }
    Logger.error("AndroidManifest.xml missing required push permission: " + paramString);
  }
  
  private void deleteApid(final String paramString)
  {
    Logger.debug("Deleting APID: " + paramString);
    if ((paramString == null) || (paramString.length() == 0))
    {
      Logger.error("No APID. Cannot delete.");
      return;
    }
    Object localObject = UAirship.shared().getAirshipConfigOptions();
    localObject = ((AirshipConfigOptions)localObject).hostURL + "api/apids/" + paramString;
    Logger.verbose("URL: " + (String)localObject);
    localObject = new AppAuthenticatedRequest("DELETE", (String)localObject);
    paramString = new AsyncHandler()
    {
      public void onComplete(Response paramAnonymousResponse)
      {
        Logger.info("Delete APID status code: " + paramAnonymousResponse.status());
        if (paramAnonymousResponse.status() == 204)
        {
          Logger.info("Delete request succeeded.");
          return;
        }
        Logger.info("Delete request failed. Response status: " + paramAnonymousResponse.status());
      }
      
      public void onError(Exception paramAnonymousException)
      {
        Logger.error("Error deleting APID", paramAnonymousException);
        PushManager.this.scheduleAction("com.urbanairship.push.DELETE_APID", paramString);
      }
    };
    this.requestQueue.addRequest((Request)localObject, paramString);
  }
  
  public static void deliverPush(String paramString1, String paramString2, Map<String, String> paramMap)
  {
    if (!shared().getPreferences().isPushEnabled()) {
      Logger.info("Received a push when push is disabled! Ignoring.");
    }
    String str1;
    Intent localIntent;
    Object localObject2;
    do
    {
      return;
      str1 = (String)paramMap.remove("com.urbanairship.push.APID");
      if ((str1 != null) && (!str1.equalsIgnoreCase(shared().getPreferences().getPushId())))
      {
        Logger.info("Received a push addressed to a different APID: " + str1);
        instance.deleteApid(str1);
        return;
      }
      str1 = paramString2;
      if (paramString2 == null) {
        str1 = UUID.randomUUID().toString();
      }
      paramString2 = new PushArrivedEvent(str1);
      UAirship.shared().getAnalytics().addEvent(paramString2);
      if (paramMap.containsKey("com.urbanairship.push.PING"))
      {
        Logger.verbose("Received UA Ping.");
        return;
      }
      if (paramMap.containsKey("com.urbanairship.push.EXPIRATION"))
      {
        paramString2 = (String)paramMap.get("com.urbanairship.push.EXPIRATION");
        Logger.debug("Notification expiration time is \"" + paramString2 + "\"");
        try
        {
          if (Long.parseLong(paramString2) * 1000L < System.currentTimeMillis())
          {
            Logger.debug("Notification expired, ignoring.");
            return;
          }
        }
        catch (NumberFormatException paramString2)
        {
          Logger.debug("Ignoring malformed expiration time: " + paramString2.getMessage());
          Logger.debug("Notification current, delivering.");
          paramMap.remove("com.urbanairship.push.EXPIRATION");
        }
      }
      paramString2 = UAirship.shared().getApplicationContext();
      localIntent = new Intent("com.urbanairship.push.PUSH_RECEIVED");
      localObject2 = shared().getNotificationBuilder();
      if (localObject2 != null)
      {
        localObject1 = ((PushNotificationBuilder)localObject2).buildNotification(paramString1, paramMap);
        if (localObject1 != null)
        {
          int i = ((PushNotificationBuilder)localObject2).getNextId(paramString1, paramMap);
          localIntent.putExtra("com.urbanairship.push.NOTIFICATION_ID", i);
          if (((Notification)localObject1).contentIntent == null)
          {
            localObject2 = new Intent("com.urbanairship.push.NOTIFICATION_OPENED_PROXY." + UUID.randomUUID().toString());
            ((Intent)localObject2).setClass(UAirship.shared().getApplicationContext(), CoreReceiver.class);
            Iterator localIterator = paramMap.keySet().iterator();
            while (localIterator.hasNext())
            {
              String str2 = (String)localIterator.next();
              ((Intent)localObject2).putExtra(str2, (String)paramMap.get(str2));
            }
            ((Intent)localObject2).putExtra("com.urbanairship.push.ALERT", paramString1);
            ((Intent)localObject2).putExtra("com.urbanairship.push.PUSH_ID", str1);
            ((Notification)localObject1).contentIntent = PendingIntent.getBroadcast(UAirship.shared().getApplicationContext(), 0, (Intent)localObject2, 0);
          }
          ((NotificationManager)paramString2.getSystemService("notification")).notify(i, (Notification)localObject1);
        }
      }
      localObject1 = shared().getIntentReceiver();
    } while (localObject1 == null);
    localIntent.setClass(UAirship.shared().getApplicationContext(), (Class)localObject1);
    Object localObject1 = paramMap.keySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (String)((Iterator)localObject1).next();
      localIntent.putExtra((String)localObject2, (String)paramMap.get(localObject2));
    }
    localIntent.putExtra("com.urbanairship.push.ALERT", paramString1);
    localIntent.putExtra("com.urbanairship.push.PUSH_ID", str1);
    paramString2.sendBroadcast(localIntent);
  }
  
  public static void disablePush()
  {
    if (instance.preferences.isPushEnabled())
    {
      instance.preferences.setPushEnabled(false);
      if (instance.preferences.getC2DMId() != null)
      {
        instance.setC2DMId(null);
        C2DMPushManager.unregister();
      }
      instance.deleteApid(instance.preferences.getPushId());
      EmbeddedPushManager.shared().stopHeartBeat();
      stopService();
    }
  }
  
  public static void enablePush()
  {
    if (!instance.preferences.isPushEnabled())
    {
      instance.preferences.setPushEnabled(true);
      startService();
    }
  }
  
  public static void init()
  {
    if (UAirship.shared().isFlying())
    {
      Logger.verbose("PushManager init");
      startService();
      return;
    }
    throw new IllegalStateException("UAirship.takeOff must be called before PushManager.init!");
  }
  
  private static boolean isPermissionKnown(String paramString)
  {
    try
    {
      UAirship.getPackageManager().getPermissionInfo(paramString, 0);
      return true;
    }
    catch (PackageManager.NameNotFoundException paramString) {}
    return false;
  }
  
  private void scheduleAction(String paramString1, String paramString2)
  {
    AlarmManager localAlarmManager = (AlarmManager)UAirship.shared().getApplicationContext().getSystemService("alarm");
    Intent localIntent = new Intent();
    localIntent.setClass(UAirship.shared().getApplicationContext(), PushManager.class);
    localIntent.setAction(paramString1);
    localIntent.putExtra("com.urbanairship.push.APID", paramString2);
    paramString2 = PendingIntent.getService(UAirship.shared().getApplicationContext(), 0, localIntent, 0);
    long l = System.currentTimeMillis();
    Logger.info("Scheduling action " + paramString1 + " in 10 minutes");
    localAlarmManager.set(1, l + 600000L, paramString2);
  }
  
  public static PushManager shared()
  {
    return instance;
  }
  
  public static void startService()
  {
    Logger.verbose("PushManager startService");
    Context localContext = UAirship.shared().getApplicationContext();
    Intent localIntent = new Intent(localContext, PushService.class);
    localIntent.setAction("com.urbanairship.push.START");
    localContext.startService(localIntent);
  }
  
  public static void stopService()
  {
    Logger.verbose("PushManager stopService");
    Context localContext = UAirship.shared().getApplicationContext();
    Intent localIntent = new Intent(localContext, PushService.class);
    localIntent.setAction("com.urbanairship.push.STOP");
    localContext.stopService(localIntent);
  }
  
  /* Error */
  private void updateApid()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 102	com/urbanairship/push/PushManager:preferences	Lcom/urbanairship/push/PushPreferences;
    //   4: iconst_1
    //   5: invokevirtual 515	com/urbanairship/push/PushPreferences:setApidUpdateNeeded	(Z)Z
    //   8: pop
    //   9: aload_0
    //   10: getfield 102	com/urbanairship/push/PushManager:preferences	Lcom/urbanairship/push/PushPreferences;
    //   13: invokevirtual 273	com/urbanairship/push/PushPreferences:getPushId	()Ljava/lang/String;
    //   16: astore_1
    //   17: new 174	java/lang/StringBuilder
    //   20: dup
    //   21: invokespecial 175	java/lang/StringBuilder:<init>	()V
    //   24: ldc_w 517
    //   27: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   30: aload_1
    //   31: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   34: invokevirtual 187	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   37: invokestatic 208	com/urbanairship/Logger:debug	(Ljava/lang/String;)V
    //   40: aload_1
    //   41: ifnull +10 -> 51
    //   44: aload_1
    //   45: invokevirtual 214	java/lang/String:length	()I
    //   48: ifne +10 -> 58
    //   51: ldc_w 519
    //   54: invokestatic 192	com/urbanairship/Logger:error	(Ljava/lang/String;)V
    //   57: return
    //   58: invokestatic 125	com/urbanairship/UAirship:shared	()Lcom/urbanairship/UAirship;
    //   61: invokevirtual 220	com/urbanairship/UAirship:getAirshipConfigOptions	()Lcom/urbanairship/AirshipConfigOptions;
    //   64: astore_2
    //   65: new 174	java/lang/StringBuilder
    //   68: dup
    //   69: invokespecial 175	java/lang/StringBuilder:<init>	()V
    //   72: aload_2
    //   73: getfield 225	com/urbanairship/AirshipConfigOptions:hostURL	Ljava/lang/String;
    //   76: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   79: ldc -29
    //   81: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   84: aload_1
    //   85: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   88: invokevirtual 187	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   91: astore_3
    //   92: aload_0
    //   93: invokevirtual 520	com/urbanairship/push/PushManager:getC2DMId	()Ljava/lang/String;
    //   96: astore 4
    //   98: new 522	org/json/JSONObject
    //   101: dup
    //   102: invokespecial 523	org/json/JSONObject:<init>	()V
    //   105: astore_2
    //   106: aload_2
    //   107: ldc_w 525
    //   110: aload_0
    //   111: invokevirtual 528	com/urbanairship/push/PushManager:getAlias	()Ljava/lang/String;
    //   114: invokevirtual 532	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
    //   117: pop
    //   118: aload_2
    //   119: ldc_w 534
    //   122: new 536	org/json/JSONArray
    //   125: dup
    //   126: aload_0
    //   127: invokevirtual 539	com/urbanairship/push/PushManager:getTags	()Ljava/util/Set;
    //   130: invokespecial 542	org/json/JSONArray:<init>	(Ljava/util/Collection;)V
    //   133: invokevirtual 532	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
    //   136: pop
    //   137: aload_2
    //   138: ldc_w 544
    //   141: aload 4
    //   143: invokevirtual 532	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
    //   146: pop
    //   147: new 174	java/lang/StringBuilder
    //   150: dup
    //   151: invokespecial 175	java/lang/StringBuilder:<init>	()V
    //   154: ldc -27
    //   156: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   159: aload_3
    //   160: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   163: invokevirtual 187	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   166: invokestatic 232	com/urbanairship/Logger:verbose	(Ljava/lang/String;)V
    //   169: new 234	com/urbanairship/restclient/AppAuthenticatedRequest
    //   172: dup
    //   173: ldc_w 546
    //   176: aload_3
    //   177: invokespecial 238	com/urbanairship/restclient/AppAuthenticatedRequest:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   180: astore_3
    //   181: new 548	org/apache/http/entity/StringEntity
    //   184: dup
    //   185: aload_2
    //   186: invokevirtual 549	org/json/JSONObject:toString	()Ljava/lang/String;
    //   189: invokespecial 550	org/apache/http/entity/StringEntity:<init>	(Ljava/lang/String;)V
    //   192: astore 4
    //   194: aload 4
    //   196: ldc_w 552
    //   199: invokevirtual 555	org/apache/http/entity/StringEntity:setContentType	(Ljava/lang/String;)V
    //   202: aload_3
    //   203: aload 4
    //   205: invokevirtual 559	com/urbanairship/restclient/AppAuthenticatedRequest:setEntity	(Lorg/apache/http/HttpEntity;)V
    //   208: new 174	java/lang/StringBuilder
    //   211: dup
    //   212: invokespecial 175	java/lang/StringBuilder:<init>	()V
    //   215: ldc_w 561
    //   218: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   221: aload_2
    //   222: invokevirtual 549	org/json/JSONObject:toString	()Ljava/lang/String;
    //   225: invokevirtual 181	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   228: invokevirtual 187	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   231: invokestatic 232	com/urbanairship/Logger:verbose	(Ljava/lang/String;)V
    //   234: new 6	com/urbanairship/push/PushManager$1
    //   237: dup
    //   238: aload_0
    //   239: aload_1
    //   240: invokespecial 562	com/urbanairship/push/PushManager$1:<init>	(Lcom/urbanairship/push/PushManager;Ljava/lang/String;)V
    //   243: astore_1
    //   244: aload_0
    //   245: getfield 115	com/urbanairship/push/PushManager:requestQueue	Lcom/urbanairship/restclient/RequestQueue;
    //   248: aload_3
    //   249: aload_1
    //   250: invokevirtual 244	com/urbanairship/restclient/RequestQueue:addRequest	(Lcom/urbanairship/restclient/Request;Lcom/urbanairship/restclient/AsyncHandler;)V
    //   253: return
    //   254: astore_1
    //   255: ldc_w 564
    //   258: invokestatic 192	com/urbanairship/Logger:error	(Ljava/lang/String;)V
    //   261: return
    //   262: astore_2
    //   263: ldc_w 566
    //   266: invokestatic 192	com/urbanairship/Logger:error	(Ljava/lang/String;)V
    //   269: goto -35 -> 234
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	272	0	this	PushManager
    //   16	234	1	localObject1	Object
    //   254	1	1	localJSONException	org.json.JSONException
    //   64	158	2	localObject2	Object
    //   262	1	2	localUnsupportedEncodingException	java.io.UnsupportedEncodingException
    //   91	158	3	localObject3	Object
    //   96	108	4	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   106	147	254	org/json/JSONException
    //   181	234	262	java/io/UnsupportedEncodingException
  }
  
  public static void validateManifest()
  {
    PackageManager localPackageManager = UAirship.getPackageManager();
    String str = UAirship.getPackageName();
    AirshipConfigOptions localAirshipConfigOptions = UAirship.shared().getAirshipConfigOptions();
    Object localObject = new ComponentName(str, PushService.class.getCanonicalName());
    try
    {
      localPackageManager.getServiceInfo((ComponentName)localObject, 128);
      if ((AirshipConfigOptions.TransportType.C2DM == localAirshipConfigOptions.getTransport()) || (AirshipConfigOptions.TransportType.HYBRID == localAirshipConfigOptions.getTransport()))
      {
        checkRequiredPermission("com.google.android.c2dm.permission.RECEIVE");
        checkRequiredPermission(str + ".permission.C2D_MESSAGE");
        localObject = new ComponentName(str, C2DMPushReceiver.class.getCanonicalName());
      }
      try
      {
        localPackageManager.getReceiverInfo((ComponentName)localObject, 128);
        localObject = new Intent("com.google.android.c2dm.intent.RECEIVE");
        ((Intent)localObject).addCategory(str);
        if (localPackageManager.queryBroadcastReceivers((Intent)localObject, 0).isEmpty()) {
          Logger.error("AndroidManifest.xml's " + C2DMPushReceiver.class.getCanonicalName() + " declaration missing required " + ((Intent)localObject).getAction() + " filter with category=" + str);
        }
        Intent localIntent = new Intent("com.google.android.c2dm.intent.REGISTRATION");
        localIntent.addCategory(str);
        if (localPackageManager.queryBroadcastReceivers((Intent)localObject, 0).isEmpty()) {
          Logger.error("AndroidManifest.xml's " + C2DMPushReceiver.class.getCanonicalName() + " declaration missing required " + localIntent.getAction() + " filter with category=" + str);
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException1)
      {
        for (;;)
        {
          Logger.error("AndroidManifest.xml missing required receiver: " + C2DMPushReceiver.class.getCanonicalName());
        }
      }
      if ((AirshipConfigOptions.TransportType.HELIUM == localAirshipConfigOptions.getTransport()) || (AirshipConfigOptions.TransportType.HYBRID == localAirshipConfigOptions.getTransport())) {
        checkRequiredPermission("android.permission.RECEIVE_BOOT_COMPLETED");
      }
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException2)
    {
      for (;;)
      {
        Logger.error("AndroidManifest.xml missing required service: " + PushService.class.getCanonicalName());
      }
    }
  }
  
  public void c2dmRegistrationFailed(String paramString)
  {
    int j = 1;
    Logger.error("C2DM Failure: " + paramString);
    int i;
    if ("SERVICE_NOT_AVAILABLE".equals(paramString))
    {
      C2DMPushManager.retryRegistration();
      i = 0;
    }
    for (;;)
    {
      if (i != 0)
      {
        setC2DMId(null);
        if (UAirship.shared().getAirshipConfigOptions().getTransport() == AirshipConfigOptions.TransportType.HYBRID) {
          EmbeddedPushManager.init(UAirship.shared().getApplicationContext(), UAirship.shared().getAirshipConfigOptions().getAppKey());
        }
      }
      Context localContext = UAirship.shared().getApplicationContext();
      Class localClass = shared().getIntentReceiver();
      if (localClass != null)
      {
        Intent localIntent = new Intent("com.urbanairship.push.REGISTRATION_FINISHED");
        localIntent.setClass(UAirship.shared().getApplicationContext(), localClass);
        localIntent.putExtra("com.urbanairship.push.APID", this.preferences.getPushId());
        localIntent.putExtra("com.urbanairship.push.REGISTRATION_VALID", false);
        localIntent.putExtra("com.urbanairship.push.REGISTRATION_ERROR", paramString);
        localContext.sendBroadcast(localIntent);
      }
      return;
      i = j;
      if (!"ACCOUNT_MISSING".equals(paramString))
      {
        i = j;
        if (!"AUTHENTICATION_FAILED".equals(paramString))
        {
          i = j;
          if (!"TOO_MANY_REGISTRATIONS".equals(paramString)) {
            if ("INVALID_SENDER".equals(paramString))
            {
              Logger.error("Your C2DM sender ID is invalid. Please check your AirshipConfig.");
              i = j;
            }
            else
            {
              i = j;
              if (!"PHONE_REGISTRATION_ERROR".equals(paramString)) {
                i = 0;
              }
            }
          }
        }
      }
    }
  }
  
  public void c2dmRegistrationResponseReceived(String paramString)
  {
    setC2DMId(paramString);
  }
  
  public String getAPID()
  {
    if (this.preferences.isAPIDReady()) {
      return this.preferences.getPushId();
    }
    return null;
  }
  
  public String getAlias()
  {
    return getPreferences().getAlias();
  }
  
  public String getC2DMId()
  {
    return getPreferences().getC2DMId();
  }
  
  public Class<?> getIntentReceiver()
  {
    return this.intentReceiver;
  }
  
  public PushNotificationBuilder getNotificationBuilder()
  {
    return this.notificationBuilder;
  }
  
  public PushPreferences getPreferences()
  {
    return this.preferences;
  }
  
  public Set<String> getTags()
  {
    return getPreferences().getTags();
  }
  
  public void heliumRegistrationResponseReceived(boolean paramBoolean)
  {
    boolean bool = EmbeddedPushManager.shared().getExtraApidRegistrationsDisabled();
    if ((!bool) && (this.preferences.isApidUpdateNeeded())) {
      updateApid();
    }
    while ((!bool) || (this.reconnecting.booleanValue())) {
      return;
    }
    sendRegistrationFinishedBroadcast(paramBoolean);
  }
  
  public void sendRegistrationFinishedBroadcast(boolean paramBoolean)
  {
    this.preferences.setAPIDReady(paramBoolean);
    Context localContext = UAirship.shared().getApplicationContext();
    Class localClass = shared().getIntentReceiver();
    if (localClass != null)
    {
      Intent localIntent = new Intent("com.urbanairship.push.REGISTRATION_FINISHED");
      localIntent.setClass(localContext, localClass);
      localIntent.putExtra("com.urbanairship.push.APID", this.preferences.getPushId());
      localIntent.putExtra("com.urbanairship.push.REGISTRATION_VALID", paramBoolean);
      this.reconnecting = Boolean.valueOf(paramBoolean);
      if (this.preferences.getC2DMId() != null) {
        localIntent.putExtra("com.urbanairship.push.C2DM_REGISTRATION_ID", this.preferences.getC2DMId());
      }
      localContext.sendBroadcast(localIntent);
    }
  }
  
  public void setAlias(String paramString)
  {
    PushPreferences localPushPreferences = getPreferences();
    String str = localPushPreferences.getAlias();
    if ((paramString == null) && (str == null)) {}
    while ((paramString != null) && (paramString.equals(str))) {
      return;
    }
    localPushPreferences.setAlias(paramString);
    updateApid();
  }
  
  public void setAliasAndTags(String paramString, Set<String> paramSet)
  {
    int k = 1;
    int j = 0;
    if (paramSet == null) {
      throw new IllegalArgumentException("Tags must be non-null.");
    }
    PushPreferences localPushPreferences = getPreferences();
    String str = localPushPreferences.getAlias();
    int i;
    if ((paramString == null) && (str == null)) {
      i = 0;
    }
    for (;;)
    {
      if (i != 0)
      {
        localPushPreferences.setAlias(paramString);
        j = 1;
      }
      if (!paramSet.equals(localPushPreferences.getTags())) {
        localPushPreferences.setTags(paramSet);
      }
      for (i = k;; i = j)
      {
        if (i != 0) {
          updateApid();
        }
        return;
        if ((paramString == null) || (!paramString.equals(str))) {
          break label114;
        }
        i = 0;
        break;
      }
      label114:
      i = 1;
    }
  }
  
  public void setC2DMId(String paramString)
  {
    PushPreferences localPushPreferences = getPreferences();
    String str = localPushPreferences.getC2DMId();
    if (str != null)
    {
      if (!str.equals(paramString)) {}
    }
    else {
      while (paramString == null) {
        return;
      }
    }
    localPushPreferences.setC2DMId(paramString);
    updateApid();
  }
  
  public void setIntentReceiver(Class<? extends BroadcastReceiver> paramClass)
  {
    ComponentName localComponentName = new ComponentName(UAirship.getPackageName(), paramClass.getCanonicalName());
    try
    {
      UAirship.getPackageManager().getReceiverInfo(localComponentName, 128);
      this.intentReceiver = paramClass;
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      Logger.error("The receiver class passed to PushManager.setIntentReceiver() is not declared in the manifest.");
      Logger.error("AndroidManifest.xml missing required receiver: " + paramClass.getCanonicalName());
    }
  }
  
  public void setNotificationBuilder(PushNotificationBuilder paramPushNotificationBuilder)
  {
    this.notificationBuilder = paramPushNotificationBuilder;
  }
  
  public void setTags(Set<String> paramSet)
  {
    if (paramSet == null) {
      throw new IllegalArgumentException("Tags must be non-null.");
    }
    PushPreferences localPushPreferences = getPreferences();
    if (paramSet.equals(localPushPreferences.getTags())) {
      return;
    }
    localPushPreferences.setTags(paramSet);
    updateApid();
  }
  
  public void updateApidIfNecessary()
  {
    if (this.preferences.isApidUpdateNeeded()) {
      updateApid();
    }
  }
  
  private class DeleteApidReceiver
    extends BroadcastReceiver
  {
    private DeleteApidReceiver() {}
    
    public void onReceive(Context paramContext, Intent paramIntent)
    {
      if (paramIntent != null)
      {
        paramContext = paramIntent.getStringExtra("com.urbanairship.push.APID");
        if (paramContext != null) {
          PushManager.this.deleteApid(paramContext);
        }
      }
    }
  }
  
  private class UpdateApidReceiver
    extends BroadcastReceiver
  {
    private UpdateApidReceiver() {}
    
    public void onReceive(Context paramContext, Intent paramIntent)
    {
      PushManager.this.updateApid();
    }
  }
}
