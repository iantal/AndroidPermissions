package com.urbanairship.push.embedded;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;

public class Network
{
  public Network() {}
  
  private static ConnectivityManager connMan()
  {
    return (ConnectivityManager)UAirship.shared().getApplicationContext().getSystemService("connectivity");
  }
  
  public static String getActiveIPAddress()
  {
    Object localObject4 = null;
    for (;;)
    {
      Object localObject5;
      try
      {
        localEnumeration1 = NetworkInterface.getNetworkInterfaces();
        localObject5 = localObject4;
      }
      catch (SocketException localSocketException1)
      {
        Enumeration localEnumeration1;
        Object localObject1;
        Object localObject2 = null;
        Logger.error("Error fetching IP address information");
        continue;
      }
      try
      {
        if (localEnumeration1.hasMoreElements())
        {
          localObject5 = localObject4;
          Enumeration localEnumeration2 = ((NetworkInterface)localEnumeration1.nextElement()).getInetAddresses();
          localObject1 = localObject4;
          localObject4 = localObject1;
          localObject5 = localObject1;
          if (!localEnumeration2.hasMoreElements()) {
            continue;
          }
          localObject5 = localObject1;
          localObject4 = (InetAddress)localEnumeration2.nextElement();
          localObject5 = localObject1;
          if ((((InetAddress)localObject4).isLoopbackAddress()) || (localObject1 != null)) {
            break label128;
          }
          localObject5 = localObject1;
          localObject1 = ((InetAddress)localObject4).getHostAddress();
          continue;
        }
      }
      catch (SocketException localSocketException2)
      {
        Object localObject3 = localObject5;
        continue;
      }
    }
    localObject1 = localObject4;
    Logger.verbose("Detected active IP address as: " + (String)localObject1);
    return localObject1;
  }
  
  private static NetworkInfo info()
  {
    ConnectivityManager localConnectivityManager = connMan();
    if (localConnectivityManager != null) {
      return localConnectivityManager.getActiveNetworkInfo();
    }
    Logger.error("Error fetching network info.");
    return null;
  }
  
  public static boolean isConnected()
  {
    NetworkInfo localNetworkInfo = info();
    if (localNetworkInfo == null) {
      return false;
    }
    return localNetworkInfo.isConnected();
  }
  
  public static String typeName()
  {
    NetworkInfo localNetworkInfo = info();
    if (localNetworkInfo == null) {
      return "none";
    }
    return localNetworkInfo.getTypeName();
  }
}
