package com.urbanairship.push.embedded;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.SystemClock;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;
import com.urbanairship.push.PushPreferences;
import com.urbanairship.push.PushService;
import com.urbanairship.push.proto.Messages.KeyValue;
import com.urbanairship.push.proto.Messages.PushNotification;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class EmbeddedPushManager
{
  private static BroadcastReceiver connectivityChanged;
  static final String holdingPatternWarning = "This application is in a holding pattern, most likely because your account does not have Helium access. To sign up for a free trial, visit https://go.urbanairship.com/apps/free-trial/.  Once granted permission, youshould fully uninstall the app before testing again, in order to clear this flag.";
  public static final EmbeddedPushManager instance = new EmbeddedPushManager();
  public static final String version = "3.0.7";
  private BoxOfficeClient boxOfficeClient = new BoxOfficeClient();
  private HeliumConnection connection = null;
  private volatile boolean extraApidRegistrationsDisabled = false;
  private String ipAddress = null;
  
  private EmbeddedPushManager() {}
  
  public static void deliverPush(Messages.PushNotification paramPushNotification)
  {
    Logger.debug("Received Helium Push.");
    String str = paramPushNotification.getMessage();
    Object localObject = paramPushNotification.getPayload();
    HashMap localHashMap = new HashMap();
    if (paramPushNotification.getMapCount() > 0)
    {
      localObject = paramPushNotification.getMapList().iterator();
      while (((Iterator)localObject).hasNext())
      {
        Messages.KeyValue localKeyValue = (Messages.KeyValue)((Iterator)localObject).next();
        localHashMap.put(localKeyValue.getKey(), localKeyValue.getValue());
      }
    }
    if ((localObject != null) && (((String)localObject).length() > 0)) {
      localHashMap.put("com.urbanairship.push.STRING_EXTRA", localObject);
    }
    PushManager.deliverPush(str, paramPushNotification.getMessageId(), localHashMap);
  }
  
  public static void init(Context paramContext, String paramString)
  {
    Logger.info("Embedded Push Initializing...");
    paramString = new Intent(paramContext, PushService.class);
    paramString.setAction("com.urbanairship.push.HEARTBEAT");
    paramString = PendingIntent.getService(paramContext, 0, paramString, 0);
    ((AlarmManager)paramContext.getSystemService("alarm")).setInexactRepeating(3, SystemClock.elapsedRealtime() + 900000L, 900000L, paramString);
    if (shared().isInHoldingPattern())
    {
      long l = PushManager.shared().getPreferences().getRetryAfter();
      Logger.debug("In holding pattern. Will retry after " + l);
      Logger.error("This application is in a holding pattern, most likely because your account does not have Helium access. To sign up for a free trial, visit https://go.urbanairship.com/apps/free-trial/.  Once granted permission, youshould fully uninstall the app before testing again, in order to clear this flag.");
      PushManager.stopService();
      return;
    }
    shared().clearConnection();
    if (connectivityChanged == null)
    {
      connectivityChanged = new BroadcastReceiver()
      {
        public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
        {
          String str = "Connectivity changed: connected=" + Network.isConnected();
          paramAnonymousContext = str;
          if (Network.isConnected()) {
            paramAnonymousContext = str + ", network type=" + Network.typeName();
          }
          Logger.info(paramAnonymousContext);
          if (Network.isConnected())
          {
            if ((paramAnonymousIntent != null) && (paramAnonymousIntent.getBooleanExtra("isFailover", false))) {
              Logger.verbose("Network failover.");
            }
            if ((EmbeddedPushManager.shared().connection == null) || (EmbeddedPushManager.shared().ipChanged()))
            {
              EmbeddedPushManager.shared().setIPAddress(Network.getActiveIPAddress());
              EmbeddedPushManager.shared().reconnect();
            }
            return;
          }
          Logger.info("Connectivity lost, shutting down helium connection");
          EmbeddedPushManager.shared().clearConnection();
        }
      };
      paramContext.registerReceiver(connectivityChanged, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
    }
    Logger.verbose("Embedded Push initialization complete.");
  }
  
  private boolean ipChanged()
  {
    boolean bool = true;
    String str = Network.getActiveIPAddress();
    Logger.verbose("Current IP: " + str + ". Previous IP: " + this.ipAddress);
    if ((this.ipAddress == null) && (str != null)) {}
    for (;;)
    {
      Logger.verbose("IP Changed: " + bool);
      return bool;
      if ((this.ipAddress == null) || (str == null) || (this.ipAddress.equals(str))) {
        bool = false;
      }
    }
  }
  
  private void reconnect()
  {
    if (this.connection != null)
    {
      Logger.info("Reconnecting to Helium");
      long l = this.connection.getRetryInterval();
      this.connection.abort();
      this.connection = new HeliumConnection(this, this.boxOfficeClient);
      this.connection.setRetryInterval(l);
    }
    for (;;)
    {
      this.connection.start();
      return;
      Logger.info("Starting new Helium connection");
      this.connection = new HeliumConnection(this, this.boxOfficeClient);
    }
  }
  
  protected static void sendRegistrationResponse(boolean paramBoolean)
  {
    Logger.debug("sending valid: " + UAirship.getPackageName() + ", " + paramBoolean);
    PushManager.shared().heliumRegistrationResponseReceived(paramBoolean);
  }
  
  public static EmbeddedPushManager shared()
  {
    return instance;
  }
  
  public static void stop() {}
  
  public void clearConnection()
  {
    setIPAddress(null);
    if (this.connection != null)
    {
      this.connection.abort();
      this.connection = null;
    }
  }
  
  public boolean getExtraApidRegistrationsDisabled()
  {
    try
    {
      boolean bool = this.extraApidRegistrationsDisabled;
      return bool;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public boolean isInHoldingPattern()
  {
    PushPreferences localPushPreferences = PushManager.shared().getPreferences();
    long l3 = System.currentTimeMillis() / 1000L;
    long l2 = localPushPreferences.getRetryAfter();
    long l1 = l2;
    if (l2 - l3 > 604800L)
    {
      l1 = 0L;
      localPushPreferences.setRetryAfter(0L);
    }
    return l1 > l3;
  }
  
  public void setExtraApidRegistrationsDisabled(boolean paramBoolean)
  {
    try
    {
      if (UAirship.shared().isFlying()) {
        Logger.error("** EmbeddedPushManager.setExtraApidRegistrationsDisabled should be called prior to takeOff! **");
      }
      this.extraApidRegistrationsDisabled = paramBoolean;
      return;
    }
    finally {}
  }
  
  public boolean setHoldingPattern(long paramLong)
  {
    long l2 = System.currentTimeMillis() / 1000L;
    if (l2 >= paramLong)
    {
      Logger.debug("BoxOffice retry_after response is in the past. Ignoring.");
      return false;
    }
    long l1 = paramLong;
    if (paramLong - l2 > 604800L)
    {
      Logger.debug("BoxOffice retry_after response of " + paramLong + " exceeds our maximum retry delay. Setting to max delay.");
      l1 = l2 + 604800L;
    }
    Logger.debug("Received BoxOffice response to reconnect after: " + l1 + ". Currently: " + l2 + ". Shutting down" + "for " + (l1 - l2) + " seconds.");
    return PushManager.shared().getPreferences().setRetryAfter(l1);
  }
  
  public void setIPAddress(String paramString)
  {
    try
    {
      this.ipAddress = paramString;
      return;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  public void stopHeartBeat()
  {
    Context localContext = UAirship.shared().getApplicationContext();
    Logger.debug("stopping heart beat");
    Object localObject = new Intent(localContext, PushService.class);
    ((Intent)localObject).setAction("com.urbanairship.push.HEARTBEAT");
    localObject = PendingIntent.getService(localContext, 0, (Intent)localObject, 536870912);
    if (localObject != null) {
      ((AlarmManager)localContext.getSystemService("alarm")).cancel((PendingIntent)localObject);
    }
  }
  
  public void teardown()
  {
    Logger.verbose("Embedded Push teardown!");
    Context localContext = UAirship.shared().getApplicationContext();
    if (connectivityChanged != null)
    {
      localContext.unregisterReceiver(connectivityChanged);
      connectivityChanged = null;
    }
    clearConnection();
  }
}
