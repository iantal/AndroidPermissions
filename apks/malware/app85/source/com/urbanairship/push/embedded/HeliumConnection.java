package com.urbanairship.push.embedded;

import com.google.protobuf.InvalidProtocolBufferException;
import com.urbanairship.Logger;
import com.urbanairship.push.PushManager;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.InetSocketAddress;
import java.net.Socket;

public class HeliumConnection
  extends Thread
{
  public static final int CONNECTION_TIMEOUT = 60000;
  private BoxOfficeClient boxOffice;
  private HeliumClient helium;
  private EmbeddedPushManager manager;
  private long retryInterval = 10000L;
  private volatile boolean running = false;
  private Socket socket;
  
  public HeliumConnection(EmbeddedPushManager paramEmbeddedPushManager, BoxOfficeClient paramBoxOfficeClient)
  {
    this.manager = paramEmbeddedPushManager;
    this.boxOffice = paramBoxOfficeClient;
    setName("HeliumConnectionThread");
  }
  
  private void close(Socket paramSocket)
  {
    if (paramSocket != null) {}
    try
    {
      if ((paramSocket.isConnected()) && (!paramSocket.isClosed())) {
        paramSocket.close();
      }
      return;
    }
    catch (IOException paramSocket)
    {
      Logger.warn("Error closing socket.");
    }
  }
  
  private boolean sleepForRetryInterval(long paramLong)
  {
    long l = this.retryInterval;
    if (System.currentTimeMillis() - paramLong < 180000L) {}
    for (paramLong = Math.min(l * 2, 640000L);; paramLong = 10000L)
    {
      Logger.debug("Rescheduling connection in " + paramLong + "ms.");
      this.retryInterval = paramLong;
      try
      {
        Thread.sleep(paramLong);
        return true;
      }
      catch (InterruptedException localInterruptedException) {}
    }
    return false;
  }
  
  public void abort()
  {
    Logger.debug("Connection aborting.");
    this.running = false;
    Logger.debug("Closing socket.");
    if (this.socket != null) {
      close(this.socket);
    }
    Logger.debug("Service stopped, socket closed successfully.");
  }
  
  public long getRetryInterval()
  {
    return this.retryInterval;
  }
  
  public boolean isConnected()
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (this.socket != null)
    {
      bool1 = bool2;
      if (this.socket.isConnected())
      {
        bool1 = bool2;
        if (!this.socket.isClosed()) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public void run()
  {
    Logger.verbose("HeliumConnection - run");
    this.running = true;
    label126:
    long l;
    for (;;)
    {
      if (this.running) {
        String str1 = Network.typeName();
      }
      String str2;
      try
      {
        str2 = this.boxOffice.lookup();
        if (str2 == null) {
          throw new BoxOfficeClient.BoxOfficeException("No Helium servers available for connection.");
        }
      }
      catch (BoxOfficeClient.FirstRunForbiddenException localFirstRunForbiddenException)
      {
        Logger.error(localFirstRunForbiddenException.getMessage());
        EmbeddedPushManager.shared().stopHeartBeat();
        PushManager.stopService();
        this.running = false;
        return;
        if (!Thread.interrupted()) {
          break label126;
        }
        Logger.debug("Thread interrupted during lookup.");
        this.running = false;
        return;
      }
      catch (BoxOfficeClient.FatalBoxOfficeException localFatalBoxOfficeException)
      {
        Logger.error(localFatalBoxOfficeException.getMessage());
        PushManager.stopService();
        this.running = false;
        return;
      }
      catch (BoxOfficeClient.BoxOfficeException localBoxOfficeException)
      {
        Logger.error(localBoxOfficeException.getMessage());
      }
      if (!sleepForRetryInterval(System.currentTimeMillis()))
      {
        this.running = false;
        return;
        Object localObject2 = str2.split(":");
        str2 = localObject2[0];
        localObject2 = new Integer(localObject2[1]);
        if (!this.running)
        {
          Logger.debug("Connection sequence aborted. Ending prior to opening Helium connection.");
          return;
        }
        Logger.debug("Connecting to " + str2 + ":" + localObject2);
        l = System.currentTimeMillis();
        try
        {
          this.socket = new Socket();
          this.socket.setTcpNoDelay(false);
          this.socket.setSoTimeout((int)Config.Helium.max_keepalive_interval);
          this.socket.connect(new InetSocketAddress(str2, ((Integer)localObject2).intValue()), 60000);
          Logger.info("Connection established to " + this.socket.getInetAddress() + ":" + localObject2 + " on network type " + localBoxOfficeException);
          this.helium = new HeliumClient(this.socket, this.boxOffice);
          this.helium.register();
          while (this.running)
          {
            this.helium.readResponse();
            Thread.sleep(100L);
          }
        }
        catch (InterruptedException localInterruptedException)
        {
          Logger.debug("Connection thread interrupted.");
          this.running = false;
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
            return;
            if (!this.running)
            {
              Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
            }
            else
            {
              close(this.socket);
              if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
              {
                this.boxOffice.incrementFailureCount();
                if (!sleepForRetryInterval(l)) {
                  this.running = false;
                }
              }
              else
              {
                this.running = false;
              }
            }
          }
          else
          {
            close(this.socket);
            if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
            {
              this.boxOffice.incrementFailureCount();
              if (!sleepForRetryInterval(l)) {
                this.running = false;
              }
            }
            else
            {
              this.running = false;
              return;
            }
          }
        }
        catch (InvalidProtocolBufferException localInvalidProtocolBufferException)
        {
          Logger.debug("Invalid protobuf exception (Expected, likely due to socket interruption).");
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
          }
          else
          {
            close(this.socket);
            if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
            {
              this.boxOffice.incrementFailureCount();
              if (!sleepForRetryInterval(l)) {
                this.running = false;
              }
            }
            else
            {
              this.running = false;
            }
          }
        }
        catch (InterruptedIOException localInterruptedIOException)
        {
          Logger.debug("Socket timed out.");
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
          }
          else
          {
            close(this.socket);
            if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
            {
              this.boxOffice.incrementFailureCount();
              if (!sleepForRetryInterval(l)) {
                this.running = false;
              }
            }
            else
            {
              this.running = false;
            }
          }
        }
        catch (IOException localIOException)
        {
          Logger.debug("IOException (Expected following restart or connectivity change).");
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
          }
          else
          {
            close(this.socket);
            if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
            {
              this.boxOffice.incrementFailureCount();
              if (!sleepForRetryInterval(l)) {
                this.running = false;
              }
            }
            else
            {
              this.running = false;
            }
          }
        }
        catch (HeliumClient.HeliumInvalidPackageException localHeliumInvalidPackageException)
        {
          Logger.error(localHeliumInvalidPackageException.getMessage());
          EmbeddedPushManager.shared().stopHeartBeat();
          PushManager.stopService();
          EmbeddedPushManager.sendRegistrationResponse(false);
          this.running = false;
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
            return;
          }
          close(this.socket);
          if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
          {
            this.boxOffice.incrementFailureCount();
            if (!sleepForRetryInterval(l)) {
              this.running = false;
            }
          }
          else
          {
            this.running = false;
            return;
          }
        }
        catch (HeliumClient.HeliumException localHeliumException)
        {
          Logger.debug("Helium exception - secret not set.");
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
          }
          else
          {
            close(this.socket);
            if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
            {
              this.boxOffice.incrementFailureCount();
              if (!sleepForRetryInterval(l)) {
                this.running = false;
              }
            }
            else
            {
              this.running = false;
            }
          }
        }
        catch (Exception localException)
        {
          Logger.debug("Exception in Helium connection. Network type=" + localBoxOfficeException + " " + localException.getMessage());
          if (!this.running)
          {
            Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
          }
          else
          {
            close(this.socket);
            if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
            {
              this.boxOffice.incrementFailureCount();
              if (!sleepForRetryInterval(l)) {
                this.running = false;
              }
            }
            else
            {
              this.running = false;
            }
          }
        }
        finally
        {
          if (this.running) {
            break label1180;
          }
        }
      }
    }
    Logger.debug("Connection aborted, shutting down. Network type=" + localBoxOfficeException);
    for (;;)
    {
      throw localObject1;
      label1180:
      close(this.socket);
      if ((Network.isConnected()) && (!this.manager.isInHoldingPattern()))
      {
        this.boxOffice.incrementFailureCount();
        if (sleepForRetryInterval(l)) {
          break;
        }
        this.running = false;
        return;
      }
      this.running = false;
    }
  }
  
  public void setRetryInterval(long paramLong)
  {
    this.retryInterval = Math.min(paramLong, 640000L);
  }
}
