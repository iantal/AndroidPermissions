package com.urbanairship.push.embedded;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.os.Build;
import android.os.Build.VERSION;
import android.provider.Settings.Secure;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;
import com.urbanairship.push.PushPreferences;
import com.urbanairship.restclient.Request;
import com.urbanairship.restclient.Response;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import org.apache.http.Header;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

public class BoxOfficeClient
{
  private HeliumServer currentServer;
  private UUID encryptionKey;
  private final LinkedList<HeliumServer> servers = new LinkedList();
  
  public BoxOfficeClient() {}
  
  private void doLookup()
    throws BoxOfficeClient.InvalidSecretException, BoxOfficeClient.BoxOfficeException
  {
    Logger.info("Performing BoxOffice lookup.");
    Object localObject2 = PushManager.shared().getPreferences();
    Object localObject3 = new BasicNameValuePair("apid", ((PushPreferences)localObject2).getPushId());
    BasicNameValuePair localBasicNameValuePair = new BasicNameValuePair("secret", ((PushPreferences)localObject2).getPushSecret());
    Object localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(localObject3);
    ((ArrayList)localObject1).add(localBasicNameValuePair);
    localObject3 = new Request("POST", Config.BoxOffice.url + "/lookup");
    for (;;)
    {
      try
      {
        ((Request)localObject3).setEntity(new UrlEncodedFormEntity((List)localObject1, "UTF-8"));
        setRequestHeaders((Request)localObject3);
        localObject1 = UAirship.getPackageInfo();
        if (localObject1 != null)
        {
          localObject1 = ((PackageInfo)localObject1).versionName;
          Logger.verbose("Set package version header:" + (String)localObject1);
          ((Request)localObject3).setHeader("X-UA-Package-Version", (String)localObject1);
          ((Request)localObject3).setHeader("User-Agent", String.format("Embedded Push/%s Android/%s [%s]", new Object[] { "3.0.7", Build.VERSION.RELEASE, UAirship.getPackageName() }));
        }
        String str1 = "Unavailable";
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        try
        {
          localObject1 = ((Request)localObject3).execute();
          if (localObject1 != null) {
            break;
          }
          throw new BoxOfficeException("Error posting to /lookup");
        }
        catch (Exception localException)
        {
          throw new BoxOfficeException("Error posting to /lookup");
        }
        localUnsupportedEncodingException = localUnsupportedEncodingException;
        throw new BoxOfficeException("Failed to post to /firstrun; UTF-8 unsupported!");
      }
    }
    int i = localException.status();
    if (i == 401)
    {
      ((PushPreferences)localObject2).setPushSecret(null);
      ((PushPreferences)localObject2).setPushId(null);
      throw new InvalidSecretException("Error posting to lookup; bad secret. Clearing APID and secret.");
    }
    if (i == 200)
    {
      processCacheHeaders(localException);
      localObject2 = localException.contentType();
      String str2 = localException.body().trim();
      if ((localObject2 != null) && (((String)localObject2).equals("application/json"))) {
        processJSONLookup(str2);
      }
      try
      {
        Thread.sleep(3000L);
        return;
      }
      catch (InterruptedException localInterruptedException)
      {
        Thread.currentThread().interrupt();
        return;
      }
      throw new BoxOfficeException("Received invalid BoxOffice response; content type is not application/json");
    }
    throw new BoxOfficeException("Error posting to /lookup: " + i);
  }
  
  private String generateApid()
    throws BoxOfficeClient.BoxOfficeException
  {
    String str = UUID.randomUUID().toString();
    Logger.debug("Generating APID: " + str);
    if (PushManager.shared().getPreferences().setPushId(str)) {
      return str;
    }
    throw new BoxOfficeException("The APID was invalid or failed to save.");
  }
  
  private String generateOrRetrieveApid()
    throws BoxOfficeClient.BoxOfficeException
  {
    String str = PushManager.shared().getPreferences().getPushId();
    if (str != null) {
      return str;
    }
    return generateApid();
  }
  
  private static String getHashedDeviceId(Context paramContext)
  {
    int i = 0;
    if (paramContext == null) {}
    do
    {
      return "";
      paramContext = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
    } while (paramContext == null);
    paramContext = paramContext.getBytes();
    try
    {
      Object localObject = MessageDigest.getInstance("SHA-1");
      ((MessageDigest)localObject).update(paramContext, 0, paramContext.length);
      paramContext = ((MessageDigest)localObject).digest();
      localObject = new StringBuilder();
      int j = paramContext.length;
      while (i < j)
      {
        ((StringBuilder)localObject).append(String.format("%02x", new Object[] { Byte.valueOf(paramContext[i]) }));
        i += 1;
      }
      paramContext = ((StringBuilder)localObject).toString();
      return paramContext;
    }
    catch (NoSuchAlgorithmException paramContext)
    {
      Logger.error("Unable to hash the device ID: SHA1 digester not present");
    }
    return "";
  }
  
  private void processCacheHeaders(Response paramResponse)
  {
    Logger.verbose("Helium Cache TTL is " + Config.Helium.heliumCacheTTL + " ms");
    Logger.verbose("Helium Cache Min TTL is " + Config.Helium.minHeliumCacheTTL + " ms");
    Header localHeader = paramResponse.getFirstHeader("X-UA-Helium-TTL-MaxSec");
    int i;
    if (localHeader != null) {
      i = 0;
    }
    try
    {
      j = Integer.parseInt(localHeader.getValue());
      i = j;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      int j;
      for (;;) {}
    }
    if ((i > 0) && (i <= 86400000L))
    {
      Config.Helium.heliumCacheTTL = i * 1000;
      Logger.verbose("Set Helium Cache TTL to " + Config.Helium.heliumCacheTTL + " ms");
    }
    paramResponse = paramResponse.getFirstHeader("X-UA-Helium-TTL-MinSec");
    if (paramResponse != null) {
      i = -1;
    }
    try
    {
      j = Integer.parseInt(paramResponse.getValue());
      i = j;
    }
    catch (NumberFormatException paramResponse)
    {
      for (;;) {}
    }
    if ((i >= 0) && (i <= Config.Helium.heliumCacheTTL))
    {
      Config.Helium.minHeliumCacheTTL = i * 1000;
      Logger.verbose("Set Helium Cache Min TTL to " + Config.Helium.minHeliumCacheTTL + " ms");
    }
  }
  
  private void processJSONLookup(String paramString)
    throws BoxOfficeClient.BoxOfficeException
  {
    Logger.debug("Received lookup response from BoxOffice.");
    try
    {
      JSONObject localJSONObject = (JSONObject)new JSONTokener(paramString).nextValue();
      if (localJSONObject.has("retry_after"))
      {
        EmbeddedPushManager.shared().setHoldingPattern(localJSONObject.getLong("retry_after"));
        Logger.error("This application is in a holding pattern, most likely because your account does not have Helium access. To sign up for a free trial, visit https://go.urbanairship.com/apps/free-trial/.  Once granted permission, youshould fully uninstall the app before testing again, in order to clear this flag.");
        throw new FatalBoxOfficeException("Stop connecting. In a holding pattern.");
      }
    }
    catch (JSONException localJSONException)
    {
      throw new BoxOfficeException(String.format("Unparseable JSON: '%s'", new Object[] { paramString }));
      this.encryptionKey = UUID.fromString(localJSONException.getString("tut"));
      this.servers.clear();
      JSONArray localJSONArray = localJSONException.getJSONArray("servers");
      Logger.verbose("Helium servers returned: " + localJSONArray.toString());
      int j = localJSONArray.length();
      int i = 0;
      while (i < j)
      {
        this.servers.add(new HeliumServer(localJSONArray.getString(i)));
        i += 1;
      }
      if (localJSONException.has("max_keepalive_interval")) {
        Config.Helium.max_keepalive_interval = localJSONException.getInt("max_keepalive_interval") * 1000;
      }
      return;
    }
    catch (NullPointerException localNullPointerException)
    {
      throw new BoxOfficeException(String.format("Invalid Response: '%s'", new Object[] { paramString }));
    }
  }
  
  private void setRequestHeaders(Request paramRequest)
  {
    paramRequest.setHeader("X-UA-Device-Family", "Android");
    paramRequest.setHeader("X-UA-Device-Model", Build.MODEL);
    paramRequest.setHeader("X-UA-OS-Version", Build.VERSION.RELEASE);
    paramRequest.setHeader("X-UA-Lib-Version", "3.0.7");
    paramRequest.setHeader("X-UA-Package-Name", UAirship.getPackageName());
    paramRequest.setHeader("X-UA-Sent-At", new DecimalFormat("0.000").format(System.currentTimeMillis() / 1000.0D));
    paramRequest.setHeader("X-UA-App-Key", UAirship.shared().getAirshipConfigOptions().getAppKey());
    if (UAirship.shared().getAirshipConfigOptions().analyticsEnabled) {
      paramRequest.setHeader("X-UA-Device-ID", getHashedDeviceId(UAirship.shared().getApplicationContext()));
    }
  }
  
  public String firstRun()
    throws BoxOfficeClient.BoxOfficeException
  {
    Logger.info("Performing BoxOffice firstRun.");
    Object localObject2 = generateOrRetrieveApid();
    Object localObject1 = new ArrayList();
    ((ArrayList)localObject1).add(new BasicNameValuePair("package", UAirship.getPackageName()));
    ((ArrayList)localObject1).add(new BasicNameValuePair("apid", (String)localObject2));
    localObject2 = new Request("POST", Config.BoxOffice.url + "/firstrun");
    try
    {
      ((Request)localObject2).setEntity(new UrlEncodedFormEntity((List)localObject1, "UTF-8"));
      setRequestHeaders((Request)localObject2);
      localObject2 = ((Request)localObject2).execute();
      localObject1 = PushManager.shared().getPreferences();
      if (localObject2 == null) {
        throw new BoxOfficeException("Failed to post to /firstrun; request failed");
      }
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      throw new BoxOfficeException("Failed to post to /firstrun; UTF-8 unsupported!");
    }
    int i = ((Response)localObject2).status();
    if (i == 409)
    {
      localUnsupportedEncodingException.setPushId(null);
      throw new BoxOfficeException("Unrecoverable firstrun state. Clearing APID.");
    }
    if (i == 403) {
      throw new FirstRunForbiddenException("Failed to post to firstrun; forbidden. Reason:\n" + ((Response)localObject2).body());
    }
    if (i == 200)
    {
      localObject2 = ((Response)localObject2).body().trim();
      if (localUnsupportedEncodingException.setPushSecret((String)localObject2)) {
        return localObject2;
      }
      throw new BoxOfficeException("Failed to post to /firstrun; The secret was invalid or failed to save.");
    }
    throw new BoxOfficeException("Failed to post to /firstrun: " + i + ". Check your airship configuration, particularly your app key and secret.");
  }
  
  protected UUID getEncryptionKey()
  {
    return this.encryptionKey;
  }
  
  protected void incrementFailureCount()
  {
    if (this.currentServer != null)
    {
      HeliumServer.access$108(this.currentServer);
      Logger.debug("Set failure count for " + this.currentServer.address + " to " + this.currentServer.failureCount);
    }
  }
  
  public String lookup()
    throws BoxOfficeClient.BoxOfficeException
  {
    Object localObject = PushManager.shared().getPreferences();
    if ((((PushPreferences)localObject).getPushSecret() == null) || (((PushPreferences)localObject).getPushId() == null)) {
      firstRun();
    }
    do
    {
      if (this.servers.isEmpty()) {
        doLookup();
      }
      if (this.servers.isEmpty())
      {
        Logger.debug("No Helium servers returned from BoxOffice lookup.");
        return null;
      }
      localObject = (HeliumServer)this.servers.remove();
    } while (!((HeliumServer)localObject).isValid());
    if (((HeliumServer)localObject).address.split(":").length != 2) {
      throw new BoxOfficeException(String.format("Got invalid server: '%s'", new Object[] { localObject }));
    }
    this.servers.add(localObject);
    this.currentServer = ((HeliumServer)localObject);
    return ((HeliumServer)localObject).address;
  }
  
  protected void resetFailureCount()
  {
    if (this.currentServer != null)
    {
      Logger.debug("Reset failure count for " + this.currentServer.address + " to 0.");
      HeliumServer.access$102(this.currentServer, 0);
    }
  }
  
  public static class BoxOfficeException
    extends Exception
  {
    private static final long serialVersionUID = 1L;
    
    public BoxOfficeException(String paramString)
    {
      super();
    }
  }
  
  public static class FatalBoxOfficeException
    extends BoxOfficeClient.BoxOfficeException
  {
    private static final long serialVersionUID = 1L;
    
    public FatalBoxOfficeException(String paramString)
    {
      super();
    }
  }
  
  public static class FirstRunForbiddenException
    extends BoxOfficeClient.FatalBoxOfficeException
  {
    private static final long serialVersionUID = 1L;
    
    public FirstRunForbiddenException(String paramString)
    {
      super();
    }
  }
  
  protected class HeliumServer
  {
    private String address;
    private long discoveredAt = System.currentTimeMillis();
    private int failureCount = 0;
    
    public HeliumServer(String paramString)
    {
      this.address = paramString;
    }
    
    public boolean isValid()
    {
      boolean bool = true;
      long l = System.currentTimeMillis() - this.discoveredAt;
      Logger.verbose("Failure count for Helium server " + this.address + " is " + this.failureCount);
      Logger.verbose("Cache TTL for Helium server " + this.address + " is " + (Config.Helium.heliumCacheTTL - l) + "ms");
      if (l < 0L) {
        bool = false;
      }
      do
      {
        return bool;
        if (l < Config.Helium.minHeliumCacheTTL)
        {
          Logger.verbose("Server valid. Age less than minimum cache TTL.");
          return true;
        }
      } while ((l < Config.Helium.heliumCacheTTL) && (this.failureCount < 3));
      return false;
    }
  }
  
  public static class InvalidSecretException
    extends BoxOfficeClient.BoxOfficeException
  {
    private static final long serialVersionUID = 1L;
    
    public InvalidSecretException(String paramString)
    {
      super();
    }
  }
}
