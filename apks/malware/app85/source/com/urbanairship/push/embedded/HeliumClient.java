package com.urbanairship.push.embedded;

import android.os.Build.VERSION;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;
import com.urbanairship.push.PushPreferences;
import com.urbanairship.push.proto.Messages.AirshipMethod;
import com.urbanairship.push.proto.Messages.OS;
import com.urbanairship.push.proto.Messages.PushNotification;
import com.urbanairship.push.proto.Messages.Register;
import com.urbanairship.push.proto.Messages.Register.Builder;
import com.urbanairship.push.proto.Messages.RegistrationEnvelope;
import com.urbanairship.push.proto.Messages.RegistrationEnvelope.Builder;
import com.urbanairship.push.proto.Messages.RegistrationResponse;
import com.urbanairship.push.proto.Messages.Relier;
import com.urbanairship.push.proto.Messages.Relier.Builder;
import com.urbanairship.push.proto.Rpc.Request;
import com.urbanairship.push.proto.Rpc.Request.Builder;
import com.urbanairship.util.Base64;
import com.urbanairship.util.Base64DecoderException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class HeliumClient
{
  private BoxOfficeClient boxOfficeClient;
  private CodedInputStream in;
  private OutputStream out;
  private PushPreferences prefs = PushManager.shared().getPreferences();
  private HashMap<String, String> pushIDs;
  
  public HeliumClient(Socket paramSocket, BoxOfficeClient paramBoxOfficeClient)
    throws IOException
  {
    this.boxOfficeClient = paramBoxOfficeClient;
    this.in = CodedInputStream.newInstance(paramSocket.getInputStream());
    this.out = paramSocket.getOutputStream();
    this.pushIDs = new HashMap();
  }
  
  private void handleNotification(Messages.PushNotification paramPushNotification)
  {
    String str1 = paramPushNotification.getPackageName();
    String str2 = paramPushNotification.getMessageId();
    Logger.verbose("Got app id: " + str1);
    if (messageAlreadySent(str1, str2))
    {
      Logger.info("Message " + str2 + " already sent. Discarding.");
      return;
    }
    Logger.info("Message " + str2 + " received.");
    recordMessage(str1, str2);
    if (!this.prefs.isPushEnabled())
    {
      Logger.warn(String.format("Got push notification, but Push is disabled", new Object[0]));
      return;
    }
    EmbeddedPushManager.deliverPush(paramPushNotification);
  }
  
  private void handleRegistration(Messages.RegistrationResponse paramRegistrationResponse)
    throws HeliumClient.HeliumInvalidPackageException
  {
    Logger.debug("Registration response received!");
    List localList1 = paramRegistrationResponse.getValidReliersList();
    List localList2 = paramRegistrationResponse.getInvalidReliersList();
    Object localObject1 = localList1.iterator();
    for (paramRegistrationResponse = ""; ((Iterator)localObject1).hasNext(); paramRegistrationResponse = paramRegistrationResponse + ((Messages.Relier)localObject2).getPackage() + " ") {
      localObject2 = (Messages.Relier)((Iterator)localObject1).next();
    }
    Object localObject2 = localList2.iterator();
    Messages.Relier localRelier;
    for (localObject1 = ""; ((Iterator)localObject2).hasNext(); localObject1 = (String)localObject1 + localRelier.getPackage() + " ") {
      localRelier = (Messages.Relier)((Iterator)localObject2).next();
    }
    Logger.verbose("Valid: " + paramRegistrationResponse);
    Logger.verbose("Invalid: " + (String)localObject1);
    if (localList1.size() > 0) {
      EmbeddedPushManager.sendRegistrationResponse(true);
    }
    while (localList2.size() <= 0)
    {
      this.boxOfficeClient.resetFailureCount();
      return;
    }
    throw new HeliumInvalidPackageException("Package name on server does not match the application package name.");
  }
  
  private boolean messageAlreadySent(String paramString1, String paramString2)
  {
    return (this.pushIDs.containsKey(paramString1)) && (((String)this.pushIDs.get(paramString1)).equals(paramString2));
  }
  
  private static ArrayList<Messages.Relier> protoReliers(String paramString1, String paramString2)
  {
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(Messages.Relier.newBuilder().setPackage(paramString1).setAppKey(paramString2).build());
    return localArrayList;
  }
  
  private void recordMessage(String paramString1, String paramString2)
  {
    this.pushIDs.put(paramString1, paramString2);
  }
  
  private void sendRequest(Messages.AirshipMethod paramAirshipMethod, ByteString paramByteString)
    throws IOException
  {
    paramAirshipMethod = Rpc.Request.newBuilder().setBody(paramByteString).setMethodId(paramAirshipMethod).build();
    int i = (short)paramAirshipMethod.getSerializedSize();
    Logger.verbose("HeliumClient.sendRequest() - Protobuf Request Size: " + i);
    paramByteString = new ByteArrayOutputStream(i + 2);
    paramByteString.write(i >> 8 & 0xFF);
    paramByteString.write(i & 0xFF);
    paramAirshipMethod.writeTo(paramByteString);
    this.out.write(paramByteString.toByteArray());
    this.out.flush();
  }
  
  protected void readResponse()
    throws IOException, HeliumClient.HeliumException, Crypto.NullUUID, Base64DecoderException
  {
    int i = ByteBuffer.wrap(this.in.readRawBytes(2)).getShort();
    Logger.verbose("HeliumClient.readResponse() - Protobuf Response Size: " + i);
    if (i == 0)
    {
      Logger.verbose("HeliumClient.readResponse() - Keepalive Read");
      return;
    }
    if (this.boxOfficeClient.getEncryptionKey() == null) {
      throw new HeliumException("HeliumClient.readResponse() - No Key");
    }
    Object localObject = Base64.decode(this.in.readRawBytes(i));
    localObject = Rpc.Request.parseFrom(new Crypto(this.boxOfficeClient.getEncryptionKey()).decrypt((byte[])localObject));
    Logger.verbose("response read");
    if (((Rpc.Request)localObject).getMethodId() == Messages.AirshipMethod.REGISTER)
    {
      handleRegistration(Messages.RegistrationResponse.parseFrom(((Rpc.Request)localObject).getBody()));
      return;
    }
    if (((Rpc.Request)localObject).getMethodId() == Messages.AirshipMethod.PUSH_NOTIFICATION)
    {
      handleNotification(Messages.PushNotification.parseFrom(((Rpc.Request)localObject).getBody()));
      return;
    }
    Logger.error("HeliumClient.readResponse() - Recevied an unknown Helium method type.");
  }
  
  protected void register()
    throws IOException, Crypto.NullUUID
  {
    Object localObject = UAirship.shared().getAirshipConfigOptions().getAppKey();
    localObject = Messages.Register.newBuilder().setApid(this.prefs.getPushId()).setOs(Messages.OS.ANDROID).setOsVersion(Build.VERSION.RELEASE).setUaVersion("3.0.7").setSecret(this.prefs.getPushSecret()).addAllReliers(protoReliers(UAirship.getPackageName(), (String)localObject)).build().toByteArray();
    localObject = ByteString.copyFrom(Base64.encodeBytesToBytes(new Crypto(this.boxOfficeClient.getEncryptionKey()).encrypt((byte[])localObject)));
    localObject = Messages.RegistrationEnvelope.newBuilder().setApid(this.prefs.getPushId()).setRegistration((ByteString)localObject).build();
    sendRequest(Messages.AirshipMethod.REGISTER, ((Messages.RegistrationEnvelope)localObject).toByteString());
  }
  
  public class HeliumException
    extends Exception
  {
    private static final long serialVersionUID = 1L;
    
    public HeliumException(String paramString)
    {
      super();
    }
  }
  
  public class HeliumInvalidPackageException
    extends HeliumClient.HeliumException
  {
    private static final long serialVersionUID = 1L;
    
    public HeliumInvalidPackageException(String paramString)
    {
      super(paramString);
    }
  }
}
