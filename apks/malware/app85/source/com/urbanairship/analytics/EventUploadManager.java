package com.urbanairship.analytics;

import android.content.pm.PackageInfo;
import android.os.Build;
import android.os.Build.VERSION;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.Logger;
import com.urbanairship.Preferences;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;
import com.urbanairship.push.PushPreferences;
import com.urbanairship.restclient.Request;
import com.urbanairship.restclient.Response;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URI;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.zip.GZIPOutputStream;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.entity.AbstractHttpEntity;
import org.apache.http.entity.ByteArrayEntity;

class EventUploadManager
  implements Runnable
{
  public static final int DEFAULT_BATCH_SIZE = 102400;
  public static final String LAST_SEND_KEY = "LAST_SEND";
  public static final int MAX_BATCH_SIZE = 512000;
  public static final String MAX_BATCH_SIZE_KEY = "MAX_BATCH_SIZE";
  public static final int MAX_TOTAL_DB_SIZE = 5120000;
  public static final String MAX_TOTAL_DB_SIZE_KEY = "MAX_TOTAL_DB_SIZE";
  public static final String MAX_WAIT_KEY = "MAX_WAIT";
  public static final int MAX_WAIT_MS = 604800000;
  public static final String MIN_BATCH_INTERVAL_KEY = "MIN_BATCH_INTERVAL";
  public static final int MIN_BATCH_INTERVAL_MS = 60000;
  private int batchSize;
  private Thread currentThread;
  private EventDataManager dataManager;
  private long lastSendTime;
  private int maxBatchSize;
  private int maxTotalDBSize;
  private int maxWait;
  private int minBatchInterval;
  private Preferences prefs = new Preferences("com.urbanairship.analytics");
  private volatile boolean running;
  private boolean useGzip;
  
  public EventUploadManager(EventDataManager paramEventDataManager)
  {
    loadPrefs();
    this.batchSize = 102400;
    this.dataManager = paramEventDataManager;
    this.useGzip = true;
  }
  
  private void loadPrefs()
  {
    this.maxTotalDBSize = this.prefs.getInt("MAX_TOTAL_DB_SIZE", 5120000);
    this.maxBatchSize = this.prefs.getInt("MAX_BATCH_SIZE", 512000);
    this.maxWait = this.prefs.getInt("MAX_WAIT", 604800000);
    this.minBatchInterval = this.prefs.getInt("MIN_BATCH_INTERVAL", 60000);
    this.lastSendTime = this.prefs.getLong("LAST_SEND", System.currentTimeMillis());
  }
  
  private void saveHeaders(Response paramResponse)
  {
    int i = 5120000;
    Header localHeader1 = paramResponse.getFirstHeader("X-UA-Max-Total");
    Header localHeader2 = paramResponse.getFirstHeader("X-UA-Max-Batch");
    Header localHeader3 = paramResponse.getFirstHeader("X-UA-Max-Wait");
    paramResponse = paramResponse.getFirstHeader("X-UA-Min-Batch-Interval");
    int j;
    if (localHeader1 != null)
    {
      j = Math.min(Integer.parseInt(localHeader1.getValue()) * 1024, 5120000);
      if (j > 0) {
        break label180;
      }
    }
    for (;;)
    {
      this.maxTotalDBSize = i;
      if (localHeader2 != null)
      {
        j = Math.min(Integer.parseInt(localHeader2.getValue()) * 1024, 512000);
        i = j;
        if (j <= 0) {
          i = 512000;
        }
        this.maxBatchSize = i;
      }
      if (localHeader3 != null)
      {
        j = Math.min(Integer.parseInt(localHeader3.getValue()), 604800000);
        i = j;
        if (j <= 0) {
          i = 604800000;
        }
        this.maxWait = i;
      }
      if (paramResponse != null)
      {
        j = Math.max(Integer.parseInt(paramResponse.getValue()), 60000);
        i = j;
        if (j <= 0) {
          i = 60000;
        }
        this.minBatchInterval = i;
      }
      savePrefs();
      return;
      label180:
      i = j;
    }
  }
  
  private void savePrefs()
  {
    this.prefs.putInt("MAX_TOTAL_DB_SIZE", this.maxTotalDBSize);
    this.prefs.putInt("MAX_BATCH_SIZE", this.maxBatchSize);
    this.prefs.putInt("MAX_WAIT", this.maxWait);
    this.prefs.putInt("MIN_BATCH_INTERVAL", this.minBatchInterval);
    this.prefs.putLong("LAST_SEND", this.lastSendTime);
  }
  
  private boolean send(Collection<String> paramCollection)
  {
    if (paramCollection == null)
    {
      Logger.error("Send failed. No events.");
      return false;
    }
    Logger.info("Sending " + paramCollection.size() + " events.");
    Object localObject = new ByteArrayOutputStream();
    try
    {
      ((ByteArrayOutputStream)localObject).write("[".getBytes());
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext())
      {
        ((ByteArrayOutputStream)localObject).write(((String)paramCollection.next()).getBytes());
        if (paramCollection.hasNext()) {
          ((ByteArrayOutputStream)localObject).write(",".getBytes());
        }
      }
      ((ByteArrayOutputStream)localObject).write("]".getBytes());
    }
    catch (IOException paramCollection)
    {
      Logger.error("Unable to create raw JSON payload.");
      return false;
    }
    byte[] arrayOfByte = ((ByteArrayOutputStream)localObject).toByteArray();
    Request localRequest = new Request("POST", UAirship.shared().getAirshipConfigOptions().analyticsServer + "warp9/");
    if (this.useGzip) {}
    for (;;)
    {
      try
      {
        int i = arrayOfByte.length / 4;
        paramCollection = new ByteArrayOutputStream(i);
        localObject = new GZIPOutputStream(paramCollection);
        ((GZIPOutputStream)localObject).write(arrayOfByte);
        ((GZIPOutputStream)localObject).close();
        paramCollection = paramCollection.toByteArray();
        Logger.verbose("GZIP'd: " + arrayOfByte.length + " into " + paramCollection.length + " (expected " + i + ")");
        paramCollection = new ByteArrayEntity(paramCollection);
        Logger.error("GZIP of analytics payload failed.");
      }
      catch (IOException paramCollection)
      {
        try
        {
          paramCollection.setContentEncoding("gzip");
          localObject = paramCollection;
          if (paramCollection == null)
          {
            localObject = new ByteArrayEntity(arrayOfByte);
            localRequest.setEntity((HttpEntity)localObject);
          }
          ((AbstractHttpEntity)localObject).setContentType("application/json");
          localRequest.setEntity((HttpEntity)localObject);
          setHeaders(localRequest);
          Logger.debug("Sending Analytics to: " + localRequest.getURI().toASCIIString());
          paramCollection = localRequest.execute();
          if (paramCollection == null) {
            break label426;
          }
          Logger.debug("Warp 9 response: " + paramCollection.status());
          saveHeaders(paramCollection);
          if (paramCollection.status() != 200) {
            break label424;
          }
          return true;
        }
        catch (IOException localIOException)
        {
          for (;;) {}
        }
        paramCollection = paramCollection;
        paramCollection = null;
      }
      continue;
      label424:
      return false;
      label426:
      return false;
      paramCollection = null;
    }
  }
  
  private void setHeaders(Request paramRequest)
  {
    paramRequest.setHeader("X-UA-Device-Family", "android");
    paramRequest.setHeader("X-UA-Sent-At", Double.toString(System.currentTimeMillis() / 1000.0D));
    paramRequest.setHeader("X-UA-Package-Name", UAirship.getPackageName());
    paramRequest.setHeader("X-UA-Package-Version", UAirship.getPackageInfo().versionName);
    Object localObject = Analytics.getHashedDeviceId();
    if (((String)localObject).length() > 0) {
      paramRequest.setHeader("X-UA-Device-ID", (String)localObject);
    }
    localObject = UAirship.shared().getAirshipConfigOptions();
    paramRequest.setHeader("X-UA-App-Key", ((AirshipConfigOptions)localObject).getAppKey());
    paramRequest.setHeader("X-UA-In-Production", Boolean.toString(((AirshipConfigOptions)localObject).inProduction));
    paramRequest.setHeader("X-UA-Device-Model", Build.MODEL);
    paramRequest.setHeader("X-UA-OS-Version", Build.VERSION.RELEASE);
    localObject = PushManager.shared().getPreferences().getPushId();
    if ((localObject != null) && (((String)localObject).length() > 0)) {
      paramRequest.setHeader("X-UA-Apid", (String)localObject);
    }
  }
  
  public int getMaxTotalDBSize()
  {
    return this.maxTotalDBSize;
  }
  
  public void run()
  {
    this.running = true;
    for (;;)
    {
      long l;
      if (this.running)
      {
        l = Math.max(0L, this.lastSendTime + this.minBatchInterval - System.currentTimeMillis());
        if (l <= 0L) {}
      }
      try
      {
        Thread.sleep(l);
        if (!this.running) {
          return;
        }
      }
      catch (InterruptedException localInterruptedException)
      {
        Logger.info("InterruptedException in EventUploadManager. Bailing!");
        this.running = false;
        return;
      }
      this.lastSendTime = System.currentTimeMillis();
      this.prefs.putLong("LAST_SEND", this.lastSendTime);
      int i = this.dataManager.getEventCount();
      if (i <= 0)
      {
        this.running = false;
        Logger.info("Exiting analytics upload thread.");
        return;
      }
      i = this.dataManager.getDatabaseSize() / i;
      Map localMap = this.dataManager.getOldestEvents(this.batchSize / i);
      if (send(localMap.values()))
      {
        l = ((Long)Collections.max(localMap.keySet())).longValue();
        this.dataManager.deleteEventsOlderThan(l);
      }
    }
  }
  
  public void startUploadingIfNecessary()
  {
    if (!this.running)
    {
      Logger.verbose("EventUploadManager - starting upload thread");
      this.currentThread = new Thread(this);
      this.currentThread.start();
    }
  }
  
  public void stopUpload()
  {
    this.running = false;
  }
}
