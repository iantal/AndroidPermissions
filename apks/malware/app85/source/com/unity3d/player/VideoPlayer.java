package com.unity3d.player;

import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnBufferingUpdateListener;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.media.MediaPlayer.OnVideoSizeChangedListener;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.MediaController;
import android.widget.MediaController.MediaPlayerControl;
import java.io.FileInputStream;
import java.io.IOException;

public class VideoPlayer
  extends Activity
  implements SensorEventListener, MediaPlayer.OnBufferingUpdateListener, MediaPlayer.OnCompletionListener, MediaPlayer.OnPreparedListener, MediaPlayer.OnVideoSizeChangedListener, SurfaceHolder.Callback, MediaController.MediaPlayerControl
{
  private int a;
  private int b;
  private int c;
  private int d;
  private MediaPlayer e;
  private MediaController f;
  private SurfaceView g;
  private SurfaceHolder h;
  private String i;
  private int j;
  private int k;
  private boolean l;
  private boolean m = false;
  private boolean n = false;
  private FrameLayout o;
  private int p = 0;
  private boolean q = false;
  private int r = 0;
  private PowerManager.WakeLock s = null;
  
  public VideoPlayer() {}
  
  private void a()
  {
    if (this.e != null)
    {
      this.e.release();
      this.e = null;
    }
    this.c = 0;
    this.d = 0;
    this.n = false;
    this.m = false;
  }
  
  private void b()
  {
    if (isPlaying()) {}
    do
    {
      return;
      c();
    } while (this.q);
    start();
  }
  
  private void c()
  {
    Object localObject = (WindowManager)getSystemService("window");
    this.a = ((WindowManager)localObject).getDefaultDisplay().getWidth();
    this.b = ((WindowManager)localObject).getDefaultDisplay().getHeight();
    int i2 = this.a;
    int i1 = this.b;
    float f1;
    if ((this.k == 1) || (this.k == 2))
    {
      f1 = this.c / this.d;
      if (this.a / this.b <= f1) {
        i1 = (int)(this.a / f1);
      }
    }
    for (;;)
    {
      localObject = new FrameLayout.LayoutParams(i2, i1, 17);
      this.o.updateViewLayout(this.g, (ViewGroup.LayoutParams)localObject);
      return;
      i2 = (int)(this.b * f1);
      continue;
      if (this.k == 0)
      {
        i2 = this.c;
        i1 = this.d;
      }
    }
  }
  
  public boolean canPause()
  {
    return true;
  }
  
  public boolean canSeekBackward()
  {
    return true;
  }
  
  public boolean canSeekForward()
  {
    return true;
  }
  
  public void finish()
  {
    super.finish();
    overridePendingTransition(0, 0);
  }
  
  public int getBufferPercentage()
  {
    if (this.l) {
      return this.p;
    }
    return 100;
  }
  
  public int getCurrentPosition()
  {
    if (this.e == null) {
      return 0;
    }
    return this.e.getCurrentPosition();
  }
  
  public int getDuration()
  {
    if (this.e == null) {
      return 0;
    }
    return this.e.getDuration();
  }
  
  public boolean isPlaying()
  {
    int i1;
    if ((this.n) && (this.m))
    {
      i1 = 1;
      if (this.e != null) {
        break label36;
      }
      if (i1 != 0) {
        break label34;
      }
    }
    label34:
    label36:
    while ((this.e.isPlaying()) || (i1 == 0))
    {
      return true;
      i1 = 0;
      break;
      return false;
    }
    return false;
  }
  
  public void onAccuracyChanged(Sensor paramSensor, int paramInt) {}
  
  public void onBufferingUpdate(MediaPlayer paramMediaPlayer, int paramInt)
  {
    this.p = paramInt;
  }
  
  public void onCompletion(MediaPlayer paramMediaPlayer)
  {
    finish();
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    c();
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    int i1 = 4;
    super.onCreate(paramBundle);
    paramBundle = getIntent().getExtras();
    if (paramBundle.getString("fileName").length() == 0)
    {
      finish();
      return;
    }
    setTheme(16973831);
    requestWindowFeature(1);
    getWindow().setFlags(1024, 1024);
    int i2 = paramBundle.getInt("screenOrientation");
    if ((paramBundle.getBoolean("autorotationOn")) || (i2 == 4))
    {
      if (Build.VERSION.SDK_INT >= 9) {
        i1 = 10;
      }
      setRequestedOrientation(i1);
    }
    String str;
    int i3;
    boolean bool;
    for (;;)
    {
      if (paramBundle.getBoolean("wakeLock"))
      {
        this.s = ((PowerManager)getSystemService("power")).newWakeLock(26, "videowakelock");
        this.s.acquire();
      }
      str = paramBundle.getString("fileName");
      i1 = paramBundle.getInt("backgroundColor");
      i2 = paramBundle.getInt("controlMode");
      i3 = paramBundle.getInt("scalingMode");
      bool = paramBundle.getBoolean("isURL");
      if (str.length() != 0) {
        break;
      }
      finish();
      return;
      setRequestedOrientation(i2);
    }
    this.o = new FrameLayout(this);
    this.g = new SurfaceView(this);
    this.h = this.g.getHolder();
    this.h.addCallback(this);
    this.h.setType(3);
    this.o.setBackgroundColor(i1);
    this.o.addView(this.g);
    setContentView(this.o);
    this.i = str;
    this.j = i2;
    this.k = i3;
    this.l = bool;
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    a();
    if (this.s != null) {
      this.s.release();
    }
    this.s = null;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((paramInt == 26) || (paramInt == 82) || (paramInt == 25) || (paramInt == 24) || (paramInt == 0)) {
      return super.onKeyDown(paramInt, paramKeyEvent);
    }
    if ((this.f != null) && ((paramInt == 23) || (paramInt == 19) || (paramInt == 20) || (paramInt == 21) || (paramInt == 22))) {
      return this.f.onKeyDown(paramInt, paramKeyEvent);
    }
    finish();
    return true;
  }
  
  protected void onPause()
  {
    super.onPause();
    if (!this.q)
    {
      pause();
      this.q = false;
    }
    if (this.e != null) {
      this.r = this.e.getCurrentPosition();
    }
  }
  
  public void onPrepared(MediaPlayer paramMediaPlayer)
  {
    this.n = true;
    if ((this.n) && (this.m)) {
      b();
    }
  }
  
  protected void onResume()
  {
    super.onResume();
    if (!this.q) {
      start();
    }
  }
  
  public void onSensorChanged(SensorEvent paramSensorEvent) {}
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (this.f != null) {
      return this.f.onTouchEvent(paramMotionEvent);
    }
    int i1 = paramMotionEvent.getAction();
    if ((this.j == 2) && ((i1 & 0xFF) == 0)) {
      finish();
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void onVideoSizeChanged(MediaPlayer paramMediaPlayer, int paramInt1, int paramInt2)
  {
    if ((paramInt1 == 0) || (paramInt2 == 0)) {}
    do
    {
      return;
      this.m = true;
      this.c = paramInt1;
      this.d = paramInt2;
    } while ((!this.n) || (!this.m));
    b();
  }
  
  public void pause()
  {
    if (this.e == null) {
      return;
    }
    this.e.pause();
    this.q = true;
  }
  
  public void seekTo(int paramInt)
  {
    if (this.e == null) {
      return;
    }
    this.e.seekTo(paramInt);
  }
  
  public void start()
  {
    if (this.e == null) {
      return;
    }
    this.e.start();
    this.q = false;
  }
  
  public void surfaceChanged(SurfaceHolder paramSurfaceHolder, int paramInt1, int paramInt2, int paramInt3)
  {
    this.a = paramInt2;
    this.b = paramInt3;
  }
  
  public void surfaceCreated(SurfaceHolder paramSurfaceHolder)
  {
    a();
    for (;;)
    {
      try
      {
        this.e = new MediaPlayer();
        if (!this.l) {
          continue;
        }
        this.e.setDataSource(this, Uri.parse(this.i));
        this.e.setDisplay(this.h);
        this.e.setOnBufferingUpdateListener(this);
        this.e.setOnCompletionListener(this);
        this.e.setOnPreparedListener(this);
        this.e.setOnVideoSizeChangedListener(this);
        this.e.setAudioStreamType(3);
        this.e.prepare();
        if ((this.j == 0) || (this.j == 1))
        {
          this.f = new MediaController(this);
          this.f.setMediaPlayer(this);
          this.f.setAnchorView(this.g);
          this.f.setEnabled(true);
          this.f.show();
        }
      }
      catch (Exception paramSurfaceHolder)
      {
        finish();
        continue;
      }
      seekTo(this.r);
      return;
      paramSurfaceHolder = getResources().getAssets();
      try
      {
        paramSurfaceHolder = paramSurfaceHolder.openFd(this.i);
        this.e.setDataSource(paramSurfaceHolder.getFileDescriptor(), paramSurfaceHolder.getStartOffset(), paramSurfaceHolder.getLength());
        paramSurfaceHolder.close();
      }
      catch (IOException paramSurfaceHolder)
      {
        paramSurfaceHolder = new FileInputStream(this.i);
        this.e.setDataSource(paramSurfaceHolder.getFD());
        paramSurfaceHolder.close();
      }
    }
  }
  
  public void surfaceDestroyed(SurfaceHolder paramSurfaceHolder)
  {
    a();
  }
}
