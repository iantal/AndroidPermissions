package com.unity3d.player.a;

import com.unity3d.player.b.b;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public final class a
  implements h
{
  private static final byte[] a = { 16, 74, 71, -80, 32, 101, -47, 72, 117, -14, 0, -29, 70, 65, -12, 74 };
  private Cipher b;
  private Cipher c;
  
  public a(byte[] paramArrayOfByte, String paramString1, String paramString2)
  {
    try
    {
      paramArrayOfByte = new SecretKeySpec(SecretKeyFactory.getInstance("PBEWITHSHAAND256BITAES-CBC-BC").generateSecret(new PBEKeySpec((paramString1 + paramString2).toCharArray(), paramArrayOfByte, 1024, 256)).getEncoded(), "AES");
      this.b = Cipher.getInstance("AES/CBC/PKCS5Padding");
      this.b.init(1, paramArrayOfByte, new IvParameterSpec(a));
      this.c = Cipher.getInstance("AES/CBC/PKCS5Padding");
      this.c.init(2, paramArrayOfByte, new IvParameterSpec(a));
      return;
    }
    catch (GeneralSecurityException paramArrayOfByte)
    {
      throw new RuntimeException("Invalid environment", paramArrayOfByte);
    }
  }
  
  public final String a(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    try
    {
      paramString = com.unity3d.player.b.a.a(this.b.doFinal(("com.android.vending.licensing.AESObfuscator-1|" + paramString).getBytes("UTF-8")));
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      throw new RuntimeException("Invalid environment", paramString);
    }
    catch (GeneralSecurityException paramString)
    {
      throw new RuntimeException("Invalid environment", paramString);
    }
  }
  
  public final String b(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    try
    {
      String str1 = new String(this.c.doFinal(com.unity3d.player.b.a.a(paramString)), "UTF-8");
      if (str1.indexOf("com.android.vending.licensing.AESObfuscator-1|") != 0) {
        throw new l("Header not found (invalid data or key):" + paramString);
      }
    }
    catch (b localB)
    {
      throw new l(localB.getMessage() + ":" + paramString);
      String str2 = localB.substring("com.android.vending.licensing.AESObfuscator-1|".length(), localB.length());
      return str2;
    }
    catch (IllegalBlockSizeException localIllegalBlockSizeException)
    {
      throw new l(localIllegalBlockSizeException.getMessage() + ":" + paramString);
    }
    catch (BadPaddingException localBadPaddingException)
    {
      throw new l(localBadPaddingException.getMessage() + ":" + paramString);
    }
    catch (UnsupportedEncodingException paramString)
    {
      throw new RuntimeException("Invalid environment", paramString);
    }
  }
}
