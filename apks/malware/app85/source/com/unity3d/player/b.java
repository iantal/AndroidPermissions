package com.unity3d.player;

import android.os.Build;
import android.util.Log;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.HashMap;
import java.util.Map;

final class b
{
  private int a = 0;
  private String b;
  private int c = 0;
  
  b()
  {
    Map localMap = a("/proc/cpuinfo");
    String str2 = (String)localMap.get("CPU architecture");
    String str1 = (String)localMap.get("Features");
    if (str2 != null)
    {
      int j = str2.length();
      int i = 0;
      while ((i < j) && (Character.isDigit(str2.charAt(i)))) {
        i += 1;
      }
      str2 = str2.substring(0, i);
      if (Build.CPU_ABI.toLowerCase().startsWith("arm"))
      {
        this.a |= 0x2;
        if ((Integer.decode(str2).intValue() >= 7) && (!Build.CPU_ABI.equalsIgnoreCase("armeabi"))) {
          this.a |= 0x10;
        }
        if (Integer.decode(str2).intValue() >= 6) {
          this.a |= 0x8;
        }
        if (Integer.decode(str2).intValue() >= 5) {
          this.a |= 0x4;
        }
      }
    }
    if (str1 != null)
    {
      if (str1.contains("vfpv3")) {
        this.a |= 0x20;
      }
      if (str1.contains("neon")) {
        this.a |= 0x40;
      }
      if (str1.contains("vfp")) {
        this.a |= 0x80;
      }
    }
    if (Build.CPU_ABI.equalsIgnoreCase("x86")) {
      this.a = 1;
    }
    this.b = ((String)localMap.get("Processor"));
    this.c = b((String)a("/proc/meminfo").get("MemTotal"));
  }
  
  private static Map a(String paramString)
  {
    localHashMap = new HashMap();
    try
    {
      LineNumberReader localLineNumberReader = new LineNumberReader(new FileReader(paramString), 8192);
      for (paramString = localLineNumberReader.readLine(); paramString != null; paramString = localLineNumberReader.readLine())
      {
        int i = paramString.indexOf(':');
        if (i >= 0) {
          localHashMap.put(paramString.substring(0, i).trim(), paramString.substring(i + 1).trim());
        }
      }
      return localHashMap;
    }
    catch (FileNotFoundException paramString)
    {
      Log.e("FileNotFoundException", paramString.toString());
      return localHashMap;
    }
    catch (IOException paramString)
    {
      Log.e("IOException", paramString.toString());
    }
  }
  
  private static int b(String paramString)
  {
    int j = paramString.length();
    int i = 0;
    while ((i < j) && (Character.isDigit(paramString.charAt(i)))) {
      i += 1;
    }
    return Integer.decode(paramString.substring(0, i)).intValue();
  }
  
  public final int a()
  {
    return this.a;
  }
  
  public final String b()
  {
    return this.b;
  }
  
  public final int c()
  {
    return this.c / 1024;
  }
}
