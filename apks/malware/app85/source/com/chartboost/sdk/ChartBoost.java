package com.chartboost.sdk;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONObject;

public class ChartBoost
{
  public static final String DEFAULT_LOCATION = "Default";
  public static final String TAG = "ChartBoost";
  private static ChartBoost sharedChartBoost = null;
  private static int timeoutConnect = 30000;
  private static int timeoutRead = 30000;
  protected int activityHeight = 0;
  protected int activityWidth = 0;
  private String appId;
  private String appSignature;
  private Map<String, JSONObject> cacheMap = new HashMap();
  private Map<String, LoadDataConnection> connectionMap = new HashMap();
  private Context context;
  private ChartBoostDelegate delegate;
  public long preloadTime = 0L;
  
  private ChartBoost() {}
  
  private boolean cacheExists(CBWebView.CBViewType paramCBViewType, String paramString)
  {
    return getCache(paramCBViewType, paramString) != null;
  }
  
  private JSONObject getCache(CBWebView.CBViewType paramCBViewType, String paramString)
  {
    return (JSONObject)this.cacheMap.get(paramString + paramCBViewType);
  }
  
  private LoadDataConnection getConnection(CBWebView.CBViewType paramCBViewType, String paramString)
  {
    return (LoadDataConnection)this.connectionMap.get(paramString + paramCBViewType);
  }
  
  public static ChartBoost getSharedChartBoost(Context paramContext)
  {
    try
    {
      if (sharedChartBoost == null) {
        sharedChartBoost = new ChartBoost();
      }
      if (!(paramContext instanceof Activity)) {
        Log.e("ChartBoost", "Chartboost context should be instance of activity");
      }
      sharedChartBoost.context = paramContext;
      paramContext = sharedChartBoost;
      return paramContext;
    }
    finally {}
  }
  
  private void invokeCallbackFailed(CBWebView.CBViewType paramCBViewType, String paramString)
  {
    putCache(paramCBViewType, paramString, null);
    putConnection(paramCBViewType, paramString, null);
    if (this.delegate != null)
    {
      if (paramCBViewType == CBWebView.CBViewType.CBViewTypeInterstitial) {
        this.delegate.didFailToLoadInterstitial();
      }
      if (paramCBViewType == CBWebView.CBViewType.CBViewTypeMoreApps) {
        this.delegate.didFailToLoadMoreApps();
      }
    }
  }
  
  private void loadChartBoostView(JSONObject paramJSONObject, CBWebView.CBViewType paramCBViewType)
  {
    Intent localIntent = new Intent(this.context, CBDialogActivity.class);
    localIntent.putExtra("bk_type", paramCBViewType.ordinal());
    localIntent.putExtra("bk_cfgo", paramJSONObject.toString());
    this.context.startActivity(localIntent);
  }
  
  private void putCache(CBWebView.CBViewType paramCBViewType, String paramString, JSONObject paramJSONObject)
  {
    paramCBViewType = paramString + paramCBViewType;
    if (paramJSONObject == null)
    {
      this.cacheMap.remove(paramCBViewType);
      return;
    }
    this.cacheMap.put(paramCBViewType, paramJSONObject);
  }
  
  private void putConnection(CBWebView.CBViewType paramCBViewType, String paramString, LoadDataConnection paramLoadDataConnection)
  {
    paramCBViewType = paramString + paramCBViewType;
    if (paramLoadDataConnection == null)
    {
      this.connectionMap.remove(paramCBViewType);
      return;
    }
    this.connectionMap.put(paramCBViewType, paramLoadDataConnection);
  }
  
  private void showCache(CBWebView.CBViewType paramCBViewType, String paramString)
  {
    JSONObject localJSONObject = getCache(paramCBViewType, paramString);
    putCache(paramCBViewType, paramString, null);
    putConnection(paramCBViewType, paramString, null);
    try
    {
      if (paramCBViewType == CBWebView.CBViewType.CBViewTypeInterstitial)
      {
        paramString = new CBAPIRequest(this.context, "api", "show");
        paramString.appendDeviceInfoParams();
        paramString.appendBodyArgument("ad_id", localJSONObject.getString("ad_id"));
        paramString.sign(this.appId, this.appSignature);
        new GenericConnection(this.context).execute(new CBAPIRequest[] { paramString });
      }
      loadChartBoostView(localJSONObject, paramCBViewType);
      return;
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        Log.e("ChartBoost", "error generating request!");
      }
    }
  }
  
  private void showView(CBWebView.CBViewType paramCBViewType, String paramString, Boolean paramBoolean)
  {
    boolean bool = true;
    Object localObject2;
    if (paramCBViewType == CBWebView.CBViewType.CBViewTypeInterstitial)
    {
      localObject2 = Boolean.valueOf(bool);
      if (!cacheExists(paramCBViewType, paramString)) {
        break label39;
      }
      showCache(paramCBViewType, paramString);
    }
    label39:
    label74:
    Object localObject1;
    label105:
    label248:
    do
    {
      do
      {
        return;
        bool = false;
        break;
        if (this.delegate == null) {
          break label74;
        }
        if (!((Boolean)localObject2).booleanValue()) {
          break label248;
        }
        bool = this.delegate.shouldRequestInterstitial();
      } while (!Boolean.valueOf(bool).booleanValue());
      localObject1 = getConnection(paramCBViewType, paramString);
      if (localObject1 == null)
      {
        Context localContext = this.context;
        if (((Boolean)localObject2).booleanValue())
        {
          localObject1 = "get";
          localObject1 = new CBAPIRequest(localContext, "api", (String)localObject1);
        }
        for (;;)
        {
          try
          {
            ((CBAPIRequest)localObject1).appendDeviceInfoParams();
            if (((Boolean)localObject2).booleanValue()) {
              ((CBAPIRequest)localObject1).appendBodyArgument("location", paramString);
            }
            ((CBAPIRequest)localObject1).sign(this.appId, this.appSignature);
            localObject2 = new LoadDataConnection(this.context);
            try
            {
              ((LoadDataConnection)localObject2).shouldCache = paramBoolean.booleanValue();
              if ((paramCBViewType == CBWebView.CBViewType.CBViewTypeMoreApps) && (!paramBoolean.booleanValue()))
              {
                if (this.delegate == null) {
                  continue;
                }
                ((LoadDataConnection)localObject2).shouldShowProgress = this.delegate.shouldDisplayLoadingViewForMoreApps();
              }
              ((LoadDataConnection)localObject2).viewType = paramCBViewType;
              ((LoadDataConnection)localObject2).location = paramString;
              putConnection(paramCBViewType, paramString, (LoadDataConnection)localObject2);
              ((LoadDataConnection)localObject2).execute(new CBAPIRequest[] { localObject1 });
              return;
            }
            catch (Exception paramCBViewType)
            {
              return;
            }
            bool = this.delegate.shouldRequestMoreApps();
          }
          catch (Exception paramCBViewType) {}
          localObject1 = "more";
          break label105;
          ((LoadDataConnection)localObject2).shouldShowProgress = true;
        }
      }
    } while (paramBoolean.booleanValue());
    ((LoadDataConnection)localObject1).shouldCache = paramBoolean.booleanValue();
    return;
  }
  
  public void cacheInterstitial()
  {
    showView(CBWebView.CBViewType.CBViewTypeInterstitial, "Default", Boolean.valueOf(true));
  }
  
  public void cacheInterstitial(String paramString)
  {
    showView(CBWebView.CBViewType.CBViewTypeInterstitial, paramString, Boolean.valueOf(true));
  }
  
  public void cacheMoreApps()
  {
    showView(CBWebView.CBViewType.CBViewTypeMoreApps, "Default", Boolean.valueOf(true));
  }
  
  public void clearCache()
  {
    this.cacheMap = new HashMap();
    this.connectionMap = new HashMap();
    this.preloadTime = 0L;
  }
  
  public String getAppId()
  {
    return this.appId;
  }
  
  public String getAppSignature()
  {
    return this.appSignature;
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public ChartBoostDelegate getDelegate()
  {
    return this.delegate;
  }
  
  public int getTimeoutConnect()
  {
    return timeoutConnect;
  }
  
  public int getTimeoutRead()
  {
    return timeoutRead;
  }
  
  public boolean hasCachedInterstitial()
  {
    return cacheExists(CBWebView.CBViewType.CBViewTypeInterstitial, "Default");
  }
  
  public boolean hasCachedInterstitial(String paramString)
  {
    return cacheExists(CBWebView.CBViewType.CBViewTypeInterstitial, paramString);
  }
  
  public boolean hasCachedMoreApps()
  {
    return cacheExists(CBWebView.CBViewType.CBViewTypeMoreApps, "Default");
  }
  
  public void install()
  {
    try
    {
      CBAPIRequest localCBAPIRequest = new CBAPIRequest(this.context, "api", "install");
      localCBAPIRequest.appendDeviceInfoParams();
      localCBAPIRequest.sign(this.appId, this.appSignature);
      new GenericConnection(this.context).execute(new CBAPIRequest[] { localCBAPIRequest });
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void setAppId(String paramString)
  {
    this.appId = paramString;
  }
  
  public void setAppSignature(String paramString)
  {
    this.appSignature = paramString;
  }
  
  public void setConnectionTimeout(int paramInt)
  {
    if (paramInt < 10000) {
      Log.w("ChartBoost", "Timeout less than minimum of 10000 milliseconds");
    }
    timeoutConnect = Math.max(paramInt, 10000);
  }
  
  public void setDelegate(ChartBoostDelegate paramChartBoostDelegate)
  {
    this.delegate = paramChartBoostDelegate;
  }
  
  public void setReadTimeout(int paramInt)
  {
    if (paramInt < 10000) {
      Log.w("ChartBoost", "Timeout less than minimum of 10000 milliseconds");
    }
    timeoutRead = Math.max(paramInt, 10000);
  }
  
  public void showInterstitial()
  {
    showView(CBWebView.CBViewType.CBViewTypeInterstitial, "Default", Boolean.valueOf(false));
  }
  
  public void showInterstitial(String paramString)
  {
    showView(CBWebView.CBViewType.CBViewTypeInterstitial, paramString, Boolean.valueOf(false));
  }
  
  public void showMoreApps()
  {
    showView(CBWebView.CBViewType.CBViewTypeMoreApps, "Default", Boolean.valueOf(false));
  }
  
  private class GenericConnection
    extends CBAPIConnection
  {
    public GenericConnection(Context paramContext)
    {
      super();
    }
    
    protected void onPostExecute(JSONObject paramJSONObject)
    {
      try
      {
        validateJson(paramJSONObject);
        super.onPostExecute(paramJSONObject);
        return;
      }
      catch (Exception localException)
      {
        localException = localException;
        super.onPostExecute(paramJSONObject);
        return;
      }
      finally
      {
        localObject = finally;
        super.onPostExecute(paramJSONObject);
        throw localObject;
      }
    }
  }
  
  private class LoadDataConnection
    extends CBAPIConnection
  {
    public boolean hadError = false;
    public String location = "Default";
    public boolean shouldCache = false;
    public CBWebView.CBViewType viewType = CBWebView.CBViewType.CBViewTypeInterstitial;
    
    public LoadDataConnection(Context paramContext)
    {
      super();
    }
    
    protected void onPostExecute(JSONObject paramJSONObject)
    {
      try
      {
        validateJson(paramJSONObject);
      }
      catch (Exception localException)
      {
        for (;;)
        {
          ChartBoost.this.invokeCallbackFailed(this.viewType, this.location);
          this.hadError = true;
          super.onPostExecute(paramJSONObject);
        }
      }
      finally
      {
        super.onPostExecute(paramJSONObject);
      }
      if (!this.hadError)
      {
        ChartBoost.this.putCache(this.viewType, this.location, paramJSONObject);
        if (!this.shouldCache) {
          ChartBoost.this.showCache(this.viewType, this.location);
        }
      }
    }
  }
}
