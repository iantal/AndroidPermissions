package com.chartboost.sdk;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.os.AsyncTask;
import android.util.Log;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.scheme.SocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

public class CBAPIConnection
  extends AsyncTask<CBAPIRequest, Void, JSONObject>
{
  private static final String CB_DEFAULT_ENDPOINT = "https://www.chartboost.com/";
  public static final int DEFAULT_CONNECT_TIMEOUT = 30000;
  public static final int DEFAULT_READ_TIMEOUT = 30000;
  public static final int MIN_TIMEOUT = 10000;
  protected Context context = null;
  public Object data;
  private String endpoint;
  private HttpClient httpClient;
  public String loadingMessage = "Loading...";
  private ProgressDialog progressDialog = null;
  public boolean shouldShowProgress = false;
  
  public CBAPIConnection(Context paramContext)
  {
    this.context = paramContext;
    setEndpoint("https://www.chartboost.com/");
    this.httpClient = createHttpClient();
  }
  
  private HttpClient createHttpClient()
  {
    try
    {
      Object localObject1 = KeyStore.getInstance(KeyStore.getDefaultType());
      ((KeyStore)localObject1).load(null, null);
      Object localObject2 = new TrustingSocketFactory((KeyStore)localObject1);
      ((org.apache.http.conn.ssl.SSLSocketFactory)localObject2).setHostnameVerifier(org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
      localObject1 = new BasicHttpParams();
      HttpProtocolParams.setVersion((HttpParams)localObject1, HttpVersion.HTTP_1_1);
      HttpProtocolParams.setContentCharset((HttpParams)localObject1, "UTF-8");
      SchemeRegistry localSchemeRegistry = new SchemeRegistry();
      localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
      localSchemeRegistry.register(new Scheme("https", (SocketFactory)localObject2, 443));
      localObject2 = new ThreadSafeClientConnManager((HttpParams)localObject1, localSchemeRegistry);
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, ChartBoost.getSharedChartBoost(this.context).getTimeoutConnect());
      HttpConnectionParams.setSoTimeout((HttpParams)localObject1, ChartBoost.getSharedChartBoost(this.context).getTimeoutRead());
      localObject1 = new DefaultHttpClient((ClientConnectionManager)localObject2, (HttpParams)localObject1);
      return localObject1;
    }
    catch (Exception localException) {}
    return new DefaultHttpClient();
  }
  
  protected JSONObject doInBackground(CBAPIRequest... paramVarArgs)
  {
    Object localObject3 = paramVarArgs[0];
    Object localObject1 = getEndpoint() + ((CBAPIRequest)localObject3).getController() + "/" + ((CBAPIRequest)localObject3).getAction() + ".json";
    Object localObject4 = ((CBAPIRequest)localObject3).getQuery();
    paramVarArgs = (CBAPIRequest[])localObject1;
    Iterator localIterator;
    if (localObject4 != null)
    {
      paramVarArgs = "";
      localIterator = ((Map)localObject4).keySet().iterator();
    }
    for (;;)
    {
      Object localObject2;
      if (!localIterator.hasNext())
      {
        paramVarArgs = localObject1 + "?" + paramVarArgs;
        paramVarArgs = new HttpPost(paramVarArgs);
        localObject1 = ((CBAPIRequest)localObject3).getBody();
        if (localObject1 != null)
        {
          localObject2 = new ArrayList();
          localObject3 = ((Map)localObject1).keySet().iterator();
          label155:
          if (((Iterator)localObject3).hasNext()) {
            break label405;
          }
        }
      }
      try
      {
        paramVarArgs.setEntity(new UrlEncodedFormEntity((List)localObject2));
        label178:
        localObject1 = this.httpClient;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException1)
      {
        try
        {
          paramVarArgs = ((HttpClient)localObject1).execute(paramVarArgs);
          int i = paramVarArgs.getStatusLine().getStatusCode();
          if ((i < 300) && (i >= 200))
          {
            paramVarArgs = new BufferedReader(new InputStreamReader(paramVarArgs.getEntity().getContent(), "UTF-8"));
            localObject1 = new StringBuilder();
            for (;;)
            {
              localObject2 = paramVarArgs.readLine();
              if (localObject2 == null)
              {
                paramVarArgs = new JSONObject(new JSONTokener(((StringBuilder)localObject1).toString()));
                Log.i("ChartBoost", "Request response received: " + paramVarArgs.optString("message"));
                return paramVarArgs;
                localObject2 = (String)localIterator.next();
                String str = (String)((Map)localObject4).get(localObject2);
                try
                {
                  localObject2 = paramVarArgs + URLEncoder.encode((String)localObject2, "UTF-8") + "=" + URLEncoder.encode(str, "UTF-8") + "&";
                  paramVarArgs = (CBAPIRequest[])localObject2;
                }
                catch (UnsupportedEncodingException localUnsupportedEncodingException2)
                {
                  localUnsupportedEncodingException2.printStackTrace();
                }
                break;
                label405:
                localObject4 = (String)((Iterator)localObject3).next();
                localUnsupportedEncodingException2.add(new BasicNameValuePair((String)localObject4, (String)((Map)localObject1).get(localObject4)));
                break label155;
                localUnsupportedEncodingException1 = localUnsupportedEncodingException1;
                localUnsupportedEncodingException1.printStackTrace();
                break label178;
              }
              localUnsupportedEncodingException1.append(localUnsupportedEncodingException2).append("\n");
            }
          }
          Log.w("ChartBoost", "Request failed: " + paramVarArgs);
        }
        catch (Exception paramVarArgs)
        {
          Log.e("ChartBoost", "Exception on http request: " + paramVarArgs.getLocalizedMessage());
          return null;
        }
      }
    }
    return null;
  }
  
  public String getEndpoint()
  {
    return this.endpoint;
  }
  
  protected void onPostExecute(JSONObject paramJSONObject)
  {
    if (this.progressDialog != null) {}
    try
    {
      this.progressDialog.dismiss();
      this.progressDialog = null;
      return;
    }
    catch (Exception paramJSONObject)
    {
      for (;;)
      {
        paramJSONObject.printStackTrace();
      }
    }
  }
  
  protected void onPreExecute()
  {
    if (this.shouldShowProgress) {
      this.progressDialog = ProgressDialog.show(this.context, null, this.loadingMessage, true, true, new DialogInterface.OnCancelListener()
      {
        public void onCancel(DialogInterface paramAnonymousDialogInterface)
        {
          CBAPIConnection.this.cancel(true);
        }
      });
    }
  }
  
  public void sendRequest() {}
  
  public void setEndpoint(String paramString)
  {
    this.endpoint = paramString;
  }
  
  protected void validateJson(JSONObject paramJSONObject)
    throws JSONException, IOException
  {
    if (paramJSONObject != null)
    {
      int i = paramJSONObject.getInt("status");
      if ((i < 300) && (i >= 200))
      {
        Log.i("JSON", paramJSONObject.toString());
        return;
      }
      throw new IOException();
    }
    throw new IOException();
  }
  
  private class TrustingSocketFactory
    extends org.apache.http.conn.ssl.SSLSocketFactory
  {
    SSLContext sslContext = SSLContext.getInstance("TLS");
    
    public TrustingSocketFactory(KeyStore paramKeyStore)
      throws Exception
    {
      super();
      this$1 = new X509TrustManager()
      {
        public void checkClientTrusted(X509Certificate[] paramAnonymousArrayOfX509Certificate, String paramAnonymousString)
          throws CertificateException
        {}
        
        public void checkServerTrusted(X509Certificate[] paramAnonymousArrayOfX509Certificate, String paramAnonymousString)
          throws CertificateException
        {}
        
        public X509Certificate[] getAcceptedIssuers()
        {
          return null;
        }
      };
      this.sslContext.init(null, new TrustManager[] { CBAPIConnection.this }, null);
    }
    
    public Socket createSocket()
      throws IOException
    {
      return this.sslContext.getSocketFactory().createSocket();
    }
    
    public Socket createSocket(Socket paramSocket, String paramString, int paramInt, boolean paramBoolean)
      throws IOException, UnknownHostException
    {
      return this.sslContext.getSocketFactory().createSocket(paramSocket, paramString, paramInt, paramBoolean);
    }
  }
}
