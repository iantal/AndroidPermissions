package com.chartboost.sdk;

import android.app.Activity;
import android.content.Context;
import java.math.BigDecimal;
import java.util.Map;
import org.json.JSONObject;

public class CBAnalytics
{
  public static final String TAG = "ChartBoost Analytics";
  private static CBAnalytics sharedAnalytics = null;
  private Activity activity;
  private Context context;
  
  private CBAnalytics() {}
  
  public static CBAnalytics getSharedAnalytics(Activity paramActivity)
  {
    try
    {
      if (sharedAnalytics == null) {
        sharedAnalytics = new CBAnalytics();
      }
      sharedAnalytics.context = paramActivity;
      sharedAnalytics.activity = paramActivity;
      paramActivity = sharedAnalytics;
      return paramActivity;
    }
    finally {}
  }
  
  private String round(double paramDouble, int paramInt1, int paramInt2)
  {
    return new BigDecimal(paramDouble).setScale(paramInt1, paramInt2).doubleValue();
  }
  
  public Boolean recordPaymentTransaction(String paramString1, String paramString2, double paramDouble, String paramString3, int paramInt, Map<String, Object> paramMap)
  {
    try
    {
      ChartBoost localChartBoost = ChartBoost.getSharedChartBoost(this.activity);
      if ((localChartBoost.getAppId() == null) || (localChartBoost.getAppSignature() == null)) {
        return Boolean.valueOf(false);
      }
      CBAPIRequest localCBAPIRequest = new CBAPIRequest(this.activity, "api", "purchase");
      localCBAPIRequest.appendDeviceInfoParams();
      localCBAPIRequest.appendBodyArgument("product_id", paramString1);
      localCBAPIRequest.appendBodyArgument("title", paramString2);
      localCBAPIRequest.appendBodyArgument("price", round(paramDouble, 2, 4));
      localCBAPIRequest.appendBodyArgument("currency", paramString3);
      localCBAPIRequest.appendBodyArgument("quantity", paramInt);
      localCBAPIRequest.appendBodyArgument("timestamp", System.currentTimeMillis() / 1000.0D);
      if (paramMap != null) {
        localCBAPIRequest.appendBodyArgument("meta", new JSONObject(paramMap).toString());
      }
      localCBAPIRequest.sign(localChartBoost.getAppId(), localChartBoost.getAppSignature());
      new TransactionConnection(this.context).execute(new CBAPIRequest[] { localCBAPIRequest });
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
    return Boolean.valueOf(true);
  }
  
  public Boolean trackEvent(String paramString)
  {
    trackEvent(paramString, 1.0D, null);
    return Boolean.valueOf(true);
  }
  
  public Boolean trackEvent(String paramString, double paramDouble)
  {
    trackEvent(paramString, paramDouble, null);
    return Boolean.valueOf(true);
  }
  
  public Boolean trackEvent(String paramString, double paramDouble, Map<String, Object> paramMap)
  {
    try
    {
      ChartBoost localChartBoost = ChartBoost.getSharedChartBoost(this.activity);
      if ((localChartBoost.getAppId() == null) || (localChartBoost.getAppSignature() == null)) {
        return Boolean.valueOf(false);
      }
      CBAPIRequest localCBAPIRequest = new CBAPIRequest(this.activity, "api", "event");
      localCBAPIRequest.appendDeviceInfoParams();
      localCBAPIRequest.appendBodyArgument("key", paramString);
      localCBAPIRequest.appendBodyArgument("value", paramDouble);
      localCBAPIRequest.appendBodyArgument("timestamp", System.currentTimeMillis() / 1000.0D);
      if (paramMap != null) {
        localCBAPIRequest.appendBodyArgument("meta", new JSONObject(paramMap).toString());
      }
      localCBAPIRequest.sign(localChartBoost.getAppId(), localChartBoost.getAppSignature());
      new TransactionConnection(this.context).execute(new CBAPIRequest[] { localCBAPIRequest });
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    return Boolean.valueOf(true);
  }
  
  private class TransactionConnection
    extends CBAPIConnection
  {
    public TransactionConnection(Context paramContext)
    {
      super();
    }
    
    protected void onPostExecute(JSONObject paramJSONObject)
    {
      try
      {
        validateJson(paramJSONObject);
        super.onPostExecute(paramJSONObject);
        return;
      }
      catch (Exception localException)
      {
        localException = localException;
        super.onPostExecute(paramJSONObject);
        return;
      }
      finally
      {
        localObject = finally;
        super.onPostExecute(paramJSONObject);
        throw localObject;
      }
    }
  }
}
