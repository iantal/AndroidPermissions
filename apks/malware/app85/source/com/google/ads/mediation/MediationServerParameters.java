package com.google.ads.mediation;

import com.google.ads.util.b;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public abstract class MediationServerParameters
{
  public MediationServerParameters() {}
  
  protected void a() {}
  
  public void load(Map<String, String> paramMap)
    throws MediationServerParameters.MappingException
  {
    Object localObject1 = new HashSet();
    Object localObject2 = getClass().getFields();
    int j = localObject2.length;
    int i = 0;
    Object localObject3;
    while (i < j)
    {
      localObject3 = localObject2[i];
      if (((Field)localObject3).getAnnotation(Parameter.class) != null) {
        ((Set)localObject1).add(localObject3);
      }
      i += 1;
    }
    if (((Set)localObject1).size() == 0) {
      b.e("No server options fields detected.  To suppress this message either add a field with the @Parameter annotation, or override the load() method");
    }
    paramMap = paramMap.entrySet().iterator();
    Field localField;
    if (paramMap.hasNext())
    {
      localObject2 = (Map.Entry)paramMap.next();
      localObject3 = ((Set)localObject1).iterator();
      do
      {
        if (!((Iterator)localObject3).hasNext()) {
          break;
        }
        localField = (Field)((Iterator)localObject3).next();
      } while (!((Parameter)localField.getAnnotation(Parameter.class)).name().equals(((Map.Entry)localObject2).getKey()));
    }
    for (;;)
    {
      try
      {
        localField.set(this, ((Map.Entry)localObject2).getValue());
        ((Set)localObject1).remove(localField);
        i = 1;
        if (i != 0) {
          break;
        }
        b.e("Unexpected Server Option: " + (String)((Map.Entry)localObject2).getKey() + " = '" + (String)((Map.Entry)localObject2).getValue() + "'");
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        b.b("Server Option '" + (String)((Map.Entry)localObject2).getKey() + "' could not be set: Illegal Access");
        continue;
      }
      paramMap = ((Set)localObject1).iterator();
      while (paramMap.hasNext())
      {
        localObject1 = (Field)paramMap.next();
        if (((Parameter)((Field)localObject1).getAnnotation(Parameter.class)).required())
        {
          b.b("Required Server Option missing: " + ((Parameter)((Field)localObject1).getAnnotation(Parameter.class)).name());
          throw new MappingException("Required Server Option missing: " + ((Parameter)((Field)localObject1).getAnnotation(Parameter.class)).name());
        }
      }
      a();
      return;
      i = 0;
    }
  }
  
  public static class MappingException
    extends Exception
  {
    public MappingException(String paramString)
    {
      super();
    }
  }
  
  @Retention(RetentionPolicy.RUNTIME)
  @Target({java.lang.annotation.ElementType.FIELD})
  protected static @interface Parameter
  {
    String name();
    
    boolean required() default true;
  }
}
