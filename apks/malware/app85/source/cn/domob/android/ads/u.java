package cn.domob.android.ads;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.net.Uri;
import android.os.Handler;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.WindowManager.LayoutParams;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.view.animation.TranslateAnimation;
import android.webkit.DownloadListener;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.MediaController;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.VideoView;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.List;

class u
{
  private static final String A = "domob_banner.png";
  private static final String B = "domob_exit.png";
  private static final String C = "domob_loading.png";
  private static final String D = "domob_next_off.png";
  private static final String E = "domob_next.png";
  private static final String F = "domob_out.png";
  private static final String G = "domob_preview_off.png";
  private static final String H = "domob_preview.png";
  private static final String I = "domob_refresh.png";
  private static final int J = 35;
  private static final int K = 35;
  private static final int L = 40;
  private static final int M = 500;
  private static final String[] N = { ".mp4", ".3gp", ".asf", ".avi", ".m4u", ".m4v", ".mov", ".mp4", ".mpe", ".mpeg", ".mpg", ".mpg4" };
  private static H a = new H(u.class.getSimpleName());
  private static final String w = "domob";
  private static final String x = "close";
  private static final String y = "inapp";
  private static final String z = "url";
  private C b;
  private String c = null;
  private Context d = null;
  private String e;
  private Dialog f = null;
  private b g;
  private D.a h;
  private Handler i = new Handler();
  private RelativeLayout j;
  private float k = 1.0F;
  private View l;
  private ImageButton m;
  private ImageButton n;
  private ImageButton o;
  private ImageButton p;
  private ImageButton q;
  private ImageView r;
  private RotateAnimation s;
  private Animation t;
  private Animation u;
  private boolean v = false;
  
  public u(Context paramContext, String paramString1, String paramString2, b paramB, D.a paramA)
  {
    a.a(this, "Initialize DomobLandingPageBuilder");
    this.d = paramContext;
    this.k = n.u(this.d);
    this.b = new C(this.d, null, -1);
    this.c = paramString1;
    this.e = paramString2;
    this.g = paramB;
    this.h = paramA;
    try
    {
      this.l = d();
      e();
      return;
    }
    catch (Exception paramContext)
    {
      a.a(paramContext);
    }
  }
  
  private Drawable a(Context paramContext, String paramString)
  {
    try
    {
      paramContext = new BitmapDrawable(BitmapFactory.decodeStream(this.d.getAssets().open(paramString)));
      return paramContext;
    }
    catch (IOException paramContext)
    {
      a.a(paramContext);
      a.e("Failed to load source file:" + paramString);
    }
    return null;
  }
  
  private LinearLayout a(String paramString, ImageButton paramImageButton)
  {
    LinearLayout localLinearLayout = new LinearLayout(this.d);
    paramImageButton.setBackgroundDrawable(a(this.d, paramString));
    paramImageButton.setLayoutParams(new LinearLayout.LayoutParams((int)(this.k * 35.0F), (int)(this.k * 35.0F)));
    localLinearLayout.setLayoutParams(new LinearLayout.LayoutParams(-2, -2, 1.0F));
    localLinearLayout.setGravity(17);
    localLinearLayout.addView(paramImageButton);
    return localLinearLayout;
  }
  
  private boolean a(int paramInt1, int paramInt2)
  {
    int i1 = Integer.toBinaryString(paramInt2).length() - 1;
    return (paramInt1 >>> i1) % 2 == (paramInt2 >>> i1) % 2;
  }
  
  private View d()
    throws IOException
  {
    LinearLayout localLinearLayout = new LinearLayout(this.d);
    localLinearLayout.setOrientation(0);
    localLinearLayout.setGravity(17);
    localLinearLayout.setBackgroundDrawable(a(this.d, "domob_banner.png"));
    localLinearLayout.addView(j());
    localLinearLayout.addView(l());
    localLinearLayout.addView(p());
    localLinearLayout.addView(n());
    localLinearLayout.addView(h());
    return localLinearLayout;
  }
  
  private void e()
    throws IOException
  {
    this.r = new ImageView(this.d);
    this.r.setBackgroundDrawable(new BitmapDrawable(BitmapFactory.decodeStream(this.d.getAssets().open("domob_loading.png"))));
    this.r.setVisibility(8);
    this.s = new RotateAnimation(0.0F, 360.0F, 1, 0.5F, 1, 0.5F);
    this.s.setDuration(1000L);
    this.s.setInterpolator(new LinearInterpolator());
    this.s.setRepeatCount(-1);
  }
  
  private boolean f()
  {
    if ((this.d instanceof Activity)) {
      return a(((Activity)this.d).getWindow().getAttributes().flags, 1024);
    }
    return false;
  }
  
  private WebView g()
  {
    this.r.setVisibility(0);
    this.r.startAnimation(this.s);
    this.b.setVisibility(0);
    this.b.getSettings().setJavaScriptEnabled(true);
    this.b.setDownloadListener(new DownloadListener()
    {
      public void onDownloadStart(String paramAnonymousString1, final String paramAnonymousString2, String paramAnonymousString3, String paramAnonymousString4, long paramAnonymousLong)
      {
        paramAnonymousString2 = paramAnonymousString1.substring(paramAnonymousString1.lastIndexOf("."));
        u.b().a(u.this, paramAnonymousString1 + "----on Download start:" + paramAnonymousString2);
        if (Arrays.asList(u.c()).contains(paramAnonymousString2))
        {
          paramAnonymousString2 = new Dialog(u.e(u.this), 16973831);
          paramAnonymousString2.setOnDismissListener(new DialogInterface.OnDismissListener()
          {
            public void onDismiss(DialogInterface paramAnonymous2DialogInterface)
            {
              u.b().b(u.this, "Video dialog dismissed.");
            }
          });
          paramAnonymousString3 = new VideoView(u.e(u.this));
          paramAnonymousString3.setVideoURI(Uri.parse(paramAnonymousString1));
          paramAnonymousString3.setMediaController(new MediaController(u.e(u.this)));
          paramAnonymousString3.setOnErrorListener(new MediaPlayer.OnErrorListener()
          {
            public boolean onError(MediaPlayer paramAnonymous2MediaPlayer, int paramAnonymous2Int1, int paramAnonymous2Int2)
            {
              u.b().e(u.this, "Video play error.");
              return false;
            }
          });
          paramAnonymousString3.setOnCompletionListener(new MediaPlayer.OnCompletionListener()
          {
            public void onCompletion(MediaPlayer paramAnonymous2MediaPlayer)
            {
              paramAnonymousString2.dismiss();
            }
          });
          paramAnonymousString1 = new RelativeLayout(u.e(u.this));
          paramAnonymousString1.setBackgroundColor(-16777216);
          paramAnonymousString1.setLayoutParams(new RelativeLayout.LayoutParams(-1, -1));
          paramAnonymousString4 = new RelativeLayout.LayoutParams(-1, -1);
          paramAnonymousString4.addRule(13);
          paramAnonymousString1.addView(paramAnonymousString3, paramAnonymousString4);
          paramAnonymousString2.setContentView(paramAnonymousString1);
          paramAnonymousString2.show();
          paramAnonymousString3.start();
          paramAnonymousString3.requestFocus();
        }
        while (u.c(u.this) == null) {
          return;
        }
        u.c(u.this).a(paramAnonymousString1, u.f(u.this));
      }
    });
    this.b.setWebViewClient(new a(this.h));
    this.b.setWebChromeClient(new WebChromeClient()
    {
      public void onProgressChanged(WebView paramAnonymousWebView, int paramAnonymousInt)
      {
        u.g(u.this);
        super.onProgressChanged(paramAnonymousWebView, paramAnonymousInt);
      }
    });
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-1, -1);
    localLayoutParams.addRule(12);
    this.b.setLayoutParams(localLayoutParams);
    this.b.loadUrl(this.c);
    return this.b;
  }
  
  private LinearLayout h()
  {
    this.q = new ImageButton(this.d);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams((int)(this.k * 35.0F), (int)(this.k * 35.0F));
    this.q.setLayoutParams(localLayoutParams);
    this.q.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        u.h(u.this);
      }
    });
    return a("domob_exit.png", this.q);
  }
  
  private void i()
  {
    this.u = new TranslateAnimation(1, 0.0F, 1, 0.0F, 1, 0.0F, 1, 1.0F);
    this.u.setDuration(500L);
    this.j.startAnimation(this.u);
    this.i.postDelayed(new Runnable()
    {
      public void run()
      {
        u.k(u.this).dismiss();
      }
    }, 500L);
  }
  
  private LinearLayout j()
  {
    this.m = new ImageButton(this.d);
    Object localObject = new LinearLayout.LayoutParams((int)(this.k * 35.0F), (int)(this.k * 35.0F));
    this.m.setLayoutParams((ViewGroup.LayoutParams)localObject);
    if (this.b.canGoBack()) {}
    for (localObject = "domob_preview.png";; localObject = "domob_preview_off.png")
    {
      this.m.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          u.l(u.this);
        }
      });
      return a((String)localObject, this.m);
    }
  }
  
  private void k()
  {
    if (this.b == null) {}
    while (!this.b.canGoBack()) {
      return;
    }
    this.b.goBack();
    r();
  }
  
  private LinearLayout l()
  {
    this.n = new ImageButton(this.d);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams((int)(this.k * 35.0F), (int)(this.k * 35.0F));
    this.n.setLayoutParams(localLayoutParams);
    this.n.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        u.m(u.this);
      }
    });
    return a("domob_next_off.png", this.n);
  }
  
  private void m()
  {
    if (this.b == null) {}
    while (!this.b.canGoForward()) {
      return;
    }
    this.b.goForward();
    r();
  }
  
  private LinearLayout n()
  {
    this.o = new ImageButton(this.d);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams((int)(this.k * 35.0F), (int)(this.k * 35.0F));
    this.o.setLayoutParams(localLayoutParams);
    this.o.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        try
        {
          u.n(u.this);
          return;
        }
        catch (Exception paramAnonymousView)
        {
          u.b().e(this, "intent " + u.o(u.this) + " error");
        }
      }
    });
    return a("domob_out.png", this.o);
  }
  
  private void o()
  {
    Intent localIntent = new Intent("android.intent.action.VIEW", Uri.parse(this.c));
    this.d.startActivity(localIntent);
  }
  
  private LinearLayout p()
  {
    this.p = new ImageButton(this.d);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams((int)(this.k * 35.0F), (int)(this.k * 35.0F));
    this.p.setLayoutParams(localLayoutParams);
    this.p.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        try
        {
          u.p(u.this);
          return;
        }
        catch (Exception paramAnonymousView)
        {
          u.b().e(this, "intent " + u.o(u.this) + " error");
        }
      }
    });
    return a("domob_refresh.png", this.p);
  }
  
  private void q()
  {
    if (this.b == null) {
      return;
    }
    this.b.reload();
  }
  
  private void r()
  {
    if (this.b.canGoBack()) {
      this.m.setBackgroundDrawable(a(this.d, "domob_preview.png"));
    }
    while (this.b.canGoForward())
    {
      this.n.setBackgroundDrawable(a(this.d, "domob_next.png"));
      return;
      this.m.setBackgroundDrawable(a(this.d, "domob_preview_off.png"));
    }
    this.n.setBackgroundDrawable(a(this.d, "domob_next_off.png"));
  }
  
  protected Dialog a()
    throws Exception
  {
    a.a(this, "Start to build FS/RFS landingpage");
    this.j = new RelativeLayout(this.d);
    this.j.setLayoutParams(new RelativeLayout.LayoutParams(-1, -1));
    this.j.addView(g());
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(13);
    this.j.addView(this.r, localLayoutParams);
    if (f())
    {
      this.f = new Dialog(this.d, 16973841);
      localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
      localLayoutParams.addRule(11);
      this.j.addView(h(), localLayoutParams);
    }
    for (;;)
    {
      this.t = new TranslateAnimation(1, 0.0F, 1, 0.0F, 1, 1.0F, 1, 0.0F);
      this.t.setDuration(500L);
      this.j.startAnimation(this.t);
      this.f.getWindow().getAttributes().dimAmount = 0.5F;
      this.f.getWindow().setFlags(2, 2);
      this.f.setContentView(this.j);
      this.f.setOnDismissListener(new DialogInterface.OnDismissListener()
      {
        public void onDismiss(DialogInterface paramAnonymousDialogInterface)
        {
          u.b(u.this).removeView(u.a(u.this));
          if (u.c(u.this) != null) {
            u.c(u.this).E();
          }
          if ((!u.d(u.this)) && (u.c(u.this) != null)) {
            u.c(u.this).D();
          }
        }
      });
      return this.f;
      this.f = new Dialog(this.d, 16973840);
      ((RelativeLayout.LayoutParams)this.b.getLayoutParams()).bottomMargin = ((int)(this.k * 40.0F));
      localLayoutParams = new RelativeLayout.LayoutParams(-1, (int)(this.k * 40.0F));
      localLayoutParams.addRule(12);
      this.j.addView(this.l, localLayoutParams);
    }
  }
  
  class a
    extends D
  {
    a(D.a paramA)
    {
      super();
    }
    
    public void onPageFinished(WebView paramWebView, String paramString)
    {
      super.onPageFinished(paramWebView, paramString);
      u.b().a(u.this, "onPageFinished");
      u.a(u.this, true);
      if (u.c(u.this) != null) {
        u.c(u.this).B();
      }
      u.i(u.this).clearAnimation();
      u.i(u.this).setVisibility(8);
      u.g(u.this);
    }
    
    public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap)
    {
      super.onPageStarted(paramWebView, paramString, paramBitmap);
      u.b().a(u.this, "onPageStarted");
      u.i(u.this).setVisibility(0);
      u.i(u.this).startAnimation(u.j(u.this));
      u.g(u.this);
    }
    
    public void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
    {
      super.onReceivedError(paramWebView, paramInt, paramString1, paramString2);
      if (u.c(u.this) != null) {
        u.c(u.this).C();
      }
      u.b().e(u.this, String.format("WebView ReceivedError, errorCode=%d, description=%s, failingUrl=%s", new Object[] { Integer.valueOf(paramInt), paramString1, paramString2 }));
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      u.b().a("Override URL loading in landing page.");
      if (u.c(u.this) != null) {
        u.c(u.this).g(paramString);
      }
      if (paramString.startsWith("domob"))
      {
        Uri localUri = Uri.parse(paramString);
        String str = localUri.getHost();
        if (str.equals("close"))
        {
          u.h(u.this);
          return true;
        }
        if (!str.equals("inapp")) {
          break label151;
        }
        paramWebView = localUri.getQueryParameter("url");
        try
        {
          paramString = URLDecoder.decode(paramWebView, "UTF-8");
          paramWebView = paramString;
        }
        catch (UnsupportedEncodingException paramString)
        {
          for (;;)
          {
            u.b().e("Error happened during loading Landing Page.");
          }
        }
        u.b().a("Open landing page with URL:" + paramWebView);
        return true;
      }
      if (paramString.startsWith("http://"))
      {
        paramWebView.loadUrl(paramString);
        return true;
      }
      label151:
      return super.shouldOverrideUrlLoading(paramWebView, paramString);
    }
  }
  
  public static abstract interface b
  {
    public abstract void B();
    
    public abstract void C();
    
    public abstract void D();
    
    public abstract void E();
    
    public abstract void a(String paramString1, String paramString2);
    
    public abstract void g(String paramString);
  }
}
