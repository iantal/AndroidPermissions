package cn.domob.android.ads;

import android.app.Activity;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.webkit.WebView;
import android.widget.FrameLayout.LayoutParams;
import android.widget.Toast;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

class f
  implements D.a, E, G.a, e.a, h.a, j.a, o.a, u.b, z.a
{
  private static final String A = "report";
  private static final String B = "launch";
  private static final String C = "custom";
  private static final String D = "expand";
  private static final String E = "close";
  private static final String F = "clk";
  private static final String G = "imp";
  private static final String H = "event";
  private static final String I = "visit";
  private static final String J = "url";
  private static final String K = "phase";
  private static final String L = "wtai://wp/mc;";
  private static final String M = "addAsset";
  private static final String N = "addAssets";
  private static final int O = 10;
  private static H i = new H(f.class.getSimpleName());
  private static final String x = "domob";
  private static final String y = "inapp";
  private static final String z = "download";
  protected Context a;
  protected DomobAdView b = null;
  protected i c = null;
  protected b d = new b();
  protected m e;
  protected boolean f = false;
  protected boolean g = false;
  protected boolean h = false;
  private String j = null;
  private String k = null;
  private String l;
  private String m = null;
  private String n = null;
  private String o = null;
  private boolean p = false;
  private boolean q = true;
  private boolean r = true;
  private boolean s = false;
  private int t;
  private Handler u = new Handler(Looper.getMainLooper());
  private long v = 0L;
  private long w = 0L;
  
  public f(DomobAdView paramDomobAdView, String paramString)
  {
    i.a("Init DomobAdController.");
    if (paramDomobAdView != null)
    {
      this.b = paramDomobAdView;
      this.a = paramDomobAdView.a();
    }
    this.j = paramString;
    if (paramString == null) {
      this.j = g.a().a(this.a);
    }
    g.a().b(this.j);
    I();
    e.a(this.a, this);
  }
  
  public f(String paramString)
  {
    i.a("Init DomobAdController.");
    this.j = paramString;
    if (paramString == null) {
      this.j = g.a().a(this.a);
    }
    g.a().b(this.j);
  }
  
  private void I()
  {
    a localA = new a(this.a, "domob_config");
    g.a().c(localA.a("cookie_id", null));
    g.a().a(localA.a("disable", false), localA.a("timestamp", 0L), localA.a("time", 0));
    this.t = localA.a("interval", 20000);
  }
  
  private void J()
  {
    HashMap localHashMap = new HashMap();
    String str = this.c.c();
    if (str != null)
    {
      localHashMap.put("cookie_id", str);
      g.a().c(str);
    }
    int i1;
    if (this.c.f() != null) {
      if (this.c.f().d())
      {
        i1 = this.c.f().a() * 1000;
        if (i1 > 0) {
          break label256;
        }
        this.t = 0;
      }
    }
    for (;;)
    {
      localHashMap.put("interval", Integer.valueOf(this.t));
      boolean bool = this.c.f().b();
      long l1 = System.currentTimeMillis();
      i1 = this.c.f().c();
      localHashMap.put("timestamp", Long.valueOf(l1));
      localHashMap.put("disable", Boolean.valueOf(bool));
      localHashMap.put("time", Integer.valueOf(i1));
      i.a(this, "disable time stamp:" + l1);
      i.a(this, "disable time:" + i1);
      g.a().a(bool, l1, i1);
      if (!localHashMap.isEmpty()) {
        new a(this.a, "domob_config").a(localHashMap);
      }
      return;
      label256:
      if ((i1 > 0) && (i1 < 5000)) {
        this.t = 5000;
      } else if (i1 >= 5000) {
        this.t = i1;
      }
    }
  }
  
  private void K()
  {
    String str = this.c.d().t();
    if (n.a(this.a, str)) {
      g.a().d(this.c.d().a());
    }
  }
  
  private boolean L()
  {
    return (!this.f) && (!this.h) && (!this.g);
  }
  
  private void M()
  {
    this.f = false;
    this.g = false;
    this.h = false;
  }
  
  private void a(C paramC, i.b.a paramA, E paramE)
  {
    paramE = new F(this.a, 10, paramE);
    String str = paramA.b();
    if (A.e(str))
    {
      i.e("Content type of expandable is null or empty.");
      A();
    }
    do
    {
      return;
      if (str.equals("url"))
      {
        paramA = paramA.c();
        i.a("Get an DomobWebView instance for EXPANDABLE and load with URL:" + paramA);
        paramE.a(paramC, paramA, null, false);
        return;
      }
    } while (!str.equals("content"));
    str = paramA.d();
    paramA = paramA.e();
    i.a(String.format("Get an DomobWebView instance for EXPANDABLE and load data = [%s] with base URL=[%s]", new Object[] { paramA, str }));
    paramE.a(paramC, str, paramA, false);
  }
  
  private void a(i.b.a paramA)
  {
    i.a("Show expandable part of current creative.");
    String str1 = this.b.g().a().getUrl();
    String str2 = this.b.g().b().getUrl();
    i.a(String.format("bannerURL:%s, ExURL:%s", new Object[] { str1, str2 }));
    this.b.g().a(paramA);
  }
  
  private void a(String paramString, o paramO)
  {
    w localW = new w(this.a);
    localW.getClass();
    w.c localC = new w.c(localW);
    localC.a = paramO.a().d().l();
    localC.d = paramO.c();
    localC.e = paramO.d();
    localC.f = paramO.e();
    localW.a(paramO.a().d().k(), w.h.b, paramString, localC, null);
  }
  
  private void a(String paramString1, String paramString2, int paramInt, String paramString3)
  {
    w localW = new w(this.a);
    localW.getClass();
    w.c localC = new w.c(localW);
    localC.d = paramString2;
    localC.e = paramInt;
    localC.f = paramString3;
    localW.a("http://e.domob.cn/event_report", w.h.e, paramString1, localC, null);
  }
  
  private boolean a(C paramC, String paramString, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        if (paramString.startsWith("domob"))
        {
          if ("domob".equals(Uri.parse(paramString).getScheme()))
          {
            i.a("Scheme domob://");
            return b(paramC, paramString, paramBoolean);
          }
        }
        else
        {
          if ((!paramString.startsWith("http:")) && (!paramString.startsWith("tel:")) && (!paramString.startsWith("voicemail:")) && (!paramString.startsWith("sms:")) && (!paramString.startsWith("mailto:")) && (!paramString.startsWith("geo:")) && (!paramString.startsWith("wtai://wp/mc;"))) {
            break label275;
          }
          i.a("Handle other phone intents.");
          if (paramBoolean) {
            w();
          }
          paramC = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
          paramC.addFlags(268435456);
          if (paramString.startsWith("wtai://wp/mc;"))
          {
            i.a("Create intent for: wtai://wp/mc;");
            paramC = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + paramString.substring("wtai://wp/mc;".length())));
          }
        }
        try
        {
          this.a.startActivity(paramC);
          return true;
        }
        catch (ActivityNotFoundException paramC)
        {
          Log.w("DomobSDK", "Could not handle intent with URI: " + paramString + ". Is this intent unsupported on your phone?");
          return false;
        }
        i.a("Handle unknown intents.");
      }
      catch (Exception paramC)
      {
        i.e("Exception in click.");
        i.a(paramC);
        return false;
      }
      label275:
      if (paramBoolean) {
        w();
      }
      paramC = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      paramC.addFlags(268435456);
      try
      {
        this.a.startActivity(paramC);
      }
      catch (ActivityNotFoundException paramC)
      {
        Log.w("DomobSDK", "Could not handle intent with URI: " + paramString + ". Is this intent unsupported on your phone?");
      }
    }
  }
  
  private void b(i paramI, int paramInt)
  {
    if (paramI != null)
    {
      this.c = paramI;
      J();
      if (paramI.d() != null)
      {
        z();
        K();
        i.b("Get ad response successfully.");
        return;
      }
      if (paramI.e() != null) {
        Log.e("DomobSDK", String.format("Response contains error info. Error code is [%d] and error content is [%s]", new Object[] { Integer.valueOf(paramI.e().a()), paramI.e().b() }));
      }
      for (;;)
      {
        A();
        return;
        i.e("Unexpected resp, Try to request again after refresh interval.");
      }
    }
    switch (paramInt)
    {
    default: 
      Log.w("DomobSDK", "Connection Error. Please make sure that your network is available.");
    }
    for (;;)
    {
      i.e("AdResponse instance is null. Try to request again after refresh interval.");
      break;
      Log.w("DomobSDK", "There is no ad response for the request this time.");
      continue;
      Log.w("DomobSDK", "Bad Request. Please make sure that your publisher ID or any other infomation is correct.");
      continue;
      Log.w("DomobSDK", "Your publisher ID is forbidden by web server. Please ask domob's support for help.");
      continue;
      Log.w("DomobSDK", "Your publisher ID is not available temporarily, e.g. Your app is being examined and verified.");
      continue;
      Log.w("DomobSDK", "Server Error.");
      continue;
      Log.w("DomobSDK", "Server Busy.");
    }
  }
  
  private void b(String paramString1, String paramString2)
  {
    w localW = new w(this.a);
    localW.getClass();
    w.c localC = new w.c(localW);
    localC.a = this.c.d().l();
    if (paramString2 != null) {
      localC.h = paramString2;
    }
    localW.a(this.c.d().k(), w.h.c, paramString1, localC, null);
  }
  
  private boolean b(C paramC, String paramString, boolean paramBoolean)
    throws Exception
  {
    Object localObject1 = Uri.parse(paramString);
    Object localObject2 = ((Uri)localObject1).getHost();
    if (((String)localObject2).equals("inapp"))
    {
      if (paramBoolean) {
        w();
      }
      paramC = URLDecoder.decode(((Uri)localObject1).getQueryParameter("url"), "UTF-8");
      i.a("Open landing page with URL:" + paramC);
      if (this.a != null)
      {
        M();
        new u(this.a, paramC, paramString, this, this).a().show();
        ((Activity)this.a).runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (f.this.b.e() != null) {
              f.this.b.e().onLandingPageOpening();
            }
          }
        });
      }
    }
    do
    {
      for (;;)
      {
        return true;
        if (((String)localObject2).equals("download"))
        {
          if (paramBoolean) {
            w();
          }
          paramC = URLDecoder.decode(((Uri)localObject1).getQueryParameter("url"), "UTF-8");
          new o(this.a, (Uri)localObject1, this.c, this).i();
          i.a("Download app with URL:" + paramC);
        }
        else if (((String)localObject2).equals("launch"))
        {
          if (paramBoolean) {
            w();
          }
          new j(this.a, (Uri)localObject1, this).a();
        }
        else if (((String)localObject2).equals("expand"))
        {
          if (paramBoolean) {
            w();
          }
          if (this.c.d().h() != null)
          {
            i.a("Expandable part url:" + this.c.d().h().c());
            i.a("Expandable part base and content:" + this.c.d().h().d() + " || " + this.c.d().h().e());
            a(this.c.d().h());
          }
          else
          {
            i.e("广告应答无Expandable部分，无法进行expand action。");
            return false;
          }
        }
        else if (((String)localObject2).equals("report"))
        {
          paramC = ((Uri)localObject1).getPath();
          if ((paramC == null) || (paramC.indexOf("/") == -1))
          {
            i.e("There is no report type.");
            return false;
          }
          paramC = paramC.substring(1);
          if (paramC.equals("imp"))
          {
            paramString = A.a(((Uri)localObject1).getQuery());
            paramC = "s";
            if (paramString.containsKey("phase"))
            {
              paramC = (String)paramString.get("phase");
              paramString.remove("phase");
            }
            a(this.c.d().j(), paramString, paramC, "ac", 0L);
          }
          else if (paramC.equals("event"))
          {
            paramString = A.a(((Uri)localObject1).getQuery());
            paramC = this.c.d().k();
            if (paramString.containsKey("url"))
            {
              paramC = (String)paramString.get("url");
              paramString.remove("url");
            }
            localObject1 = new w(this.a);
            localObject1.getClass();
            localObject2 = new w.c((w)localObject1);
            ((w.c)localObject2).a = this.c.d().l();
            ((w.c)localObject2).b = "ac";
            ((w)localObject1).a(paramC, null, null, (w.c)localObject2, paramString);
          }
          else if (paramC.equals("clk"))
          {
            paramC = ((Uri)localObject1).getQuery();
            a(this.c.d().i(), A.a(paramC), "ac");
          }
          else if (paramC.equals("visit"))
          {
            paramC = ((Uri)localObject1).getQueryParameter("url");
            new l(this.a, paramC, null).b();
          }
          else
          {
            i.e("Unknown reprot type.");
          }
        }
        else if (((String)localObject2).equals("close"))
        {
          this.b.k();
        }
        else if (((String)localObject2).equals("addAsset"))
        {
          i.b("JS function 'addAsset' is called.");
          paramString = A.a(((Uri)localObject1).getQuery());
          localObject1 = paramString.keySet().iterator();
          while (((Iterator)localObject1).hasNext())
          {
            localObject2 = (String)((Iterator)localObject1).next();
            i.b(String.format("param: %s=%s", new Object[] { localObject2, paramString.get(localObject2) }));
          }
          if (paramString.size() == 2)
          {
            localObject1 = (String)paramString.get("url");
            paramString = (String)paramString.get("alias");
            i.b(String.format("url=%s, alias=%s", new Object[] { localObject1, paramString }));
            paramC.a((String)localObject1, paramString, this.c.d().a());
          }
        }
        else
        {
          if (!((String)localObject2).equals("addAssets")) {
            break;
          }
          i.b("JS function 'addAssets' is called.");
          paramString = A.a(((Uri)localObject1).getQuery());
          localObject1 = paramString.keySet().iterator();
          while (((Iterator)localObject1).hasNext())
          {
            localObject2 = (String)((Iterator)localObject1).next();
            i.b(String.format("param: %s=%s", new Object[] { localObject2, paramString.get(localObject2) }));
            paramC.a((String)paramString.get(localObject2), (String)localObject2, this.c.d().a());
          }
        }
      }
    } while (((String)localObject2).equals("custom"));
    i.e("Handle unknown action : " + (String)localObject2);
    return false;
  }
  
  private void j(String paramString)
  {
    b(paramString, null);
  }
  
  private void k(String paramString)
  {
    w localW = new w(this.a);
    localW.getClass();
    w.c localC = new w.c(localW);
    localC.a = this.c.d().l();
    localW.a(this.c.d().k(), w.h.h, paramString, localC, null);
  }
  
  private void l(String paramString)
  {
    new w(this.a).a(this.c.d().k(), w.h.g, paramString, null, null);
  }
  
  protected void A()
  {
    i.b("Failed to get ad response.");
    this.s = false;
    a();
    ((Activity)this.a).runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (f.this.b.e() != null) {
          f.this.b.e().onFailedToReceiveFreshAd(f.this.b);
        }
      }
    });
  }
  
  public void B()
  {
    if (L())
    {
      j("load_success");
      this.f = true;
    }
  }
  
  public void C()
  {
    if (L())
    {
      j("load_failed");
      this.h = true;
    }
  }
  
  public void D()
  {
    if (L())
    {
      j("load_cancel");
      this.g = true;
    }
  }
  
  public void E()
  {
    ((Activity)this.a).runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (f.this.b.e() != null) {
          f.this.b.e().onLandingPageClose();
        }
      }
    });
    j("close_lp");
  }
  
  public void F()
  {
    k("la_success");
  }
  
  public void G()
  {
    k("la_failed");
  }
  
  protected void a()
  {
    if (this.q)
    {
      i.b("Start schedule new request. Refresh interval is " + this.t);
      if (this.t == 0) {
        i.a("AdView is auto refreshable but interval from ad response is 0. DON'T SCHEDULE.");
      }
    }
    else
    {
      return;
    }
    this.u.removeCallbacks(this.d);
    this.u.postDelayed(this.d, this.t);
  }
  
  protected void a(int paramInt)
  {
    this.t = paramInt;
  }
  
  protected void a(long paramLong)
  {
    this.v = paramLong;
    this.w = 0L;
  }
  
  public void a(WebView paramWebView, String paramString)
  {
    i.b("WebView 拦截到 URL：" + paramString);
    a((C)paramWebView, paramString, true);
  }
  
  public void a(C paramC)
  {
    i.a("Finished to load WebView with id=" + paramC.a());
    if (paramC.a().equals(this.e.a().a()))
    {
      DomobAdView localDomobAdView = this.b;
      localDomobAdView.getClass();
      paramC.setWebViewClient(new DomobAdView.a(localDomobAdView, this));
      paramC = this.c.d().h();
      if (paramC != null)
      {
        i.b("There is expandable part in current creative.");
        if (paramC.g())
        {
          a(this.e.b(), paramC, this);
          return;
        }
        a(this.e.b(), paramC, null);
        i.b("Expandable preload is disabled in current creative. Show Ad.");
      }
    }
    for (;;)
    {
      c(this.e.a());
      return;
      i.b("Banner is ready and there is no expandable part in current creative. Show Ad.");
      continue;
      paramC.setWebViewClient(new a(this));
      i.b("Both banner and expandable part are ok in current creative. Show Ad.");
      if (this.c.d().h().i()) {
        a(this.c.d().h());
      }
    }
  }
  
  public void a(i paramI, int paramInt)
  {
    b(paramI, paramInt);
  }
  
  public void a(o paramO)
  {
    a("install_success", paramO);
  }
  
  protected void a(String paramString)
  {
    this.j = paramString;
  }
  
  public void a(String paramString1, int paramInt, String paramString2)
  {
    a("up_alert", paramString1, paramInt, paramString2);
  }
  
  public void a(String paramString1, int paramInt, String paramString2, boolean paramBoolean, String paramString3) {}
  
  public void a(String paramString1, String paramString2)
  {
    i.a(String.format("LandingPage 内下载，地址为%s，infoURL为%s", new Object[] { paramString1, paramString2 }));
    if (paramString2 != null) {}
    try
    {
      if (paramString2.length() != 0)
      {
        localObject = A.a(Uri.parse(paramString2).getQuery());
        if (((HashMap)localObject).containsKey("url")) {
          ((HashMap)localObject).put("url", paramString1);
        }
        localObject = A.a((HashMap)localObject);
      }
      for (Object localObject = "domob://download?" + (String)localObject;; localObject = "domob://download?url=" + URLEncoder.encode(paramString1, "UTF-8"))
      {
        b(null, (String)localObject, false);
        return;
      }
      return;
    }
    catch (Exception localException)
    {
      i.e(String.format("解析LandingPage中下载出现错误，地址为%s，infoURL为%s", new Object[] { paramString1, paramString2 }));
    }
  }
  
  protected void a(String paramString1, String paramString2, long paramLong)
  {
    a(this.c.d().j(), null, paramString1, paramString2, paramLong);
  }
  
  protected void a(String paramString1, HashMap<String, String> paramHashMap, String paramString2)
  {
    String str = this.c.d().l();
    w localW = new w(this.a);
    localW.getClass();
    w.b localB = new w.b(localW);
    localB.a = str;
    if (paramString2 != null) {
      localB.b = paramString2;
    }
    localW.a(paramString1, localB, paramHashMap);
  }
  
  protected void a(String paramString1, HashMap<String, String> paramHashMap, String paramString2, String paramString3, long paramLong)
  {
    w localW = new w(this.a);
    localW.getClass();
    w.f localF = new w.f(localW);
    localF.a = this.c.d().l();
    int[] arrayOfInt = new int[2];
    this.b.getLocationOnScreen(arrayOfInt);
    localF.d = String.format("%d,%d,%d,%d", new Object[] { Integer.valueOf(arrayOfInt[0]), Integer.valueOf(arrayOfInt[1]), Integer.valueOf(this.b.getWidth()), Integer.valueOf(this.b.getHeight()) });
    localF.e = n.v(this.a);
    localF.f = n.w(this.a);
    localF.g = n.s(this.a);
    localF.h = paramString2;
    localF.b = paramString3;
    localF.i = paramLong;
    localW.a(paramString1, localF, paramHashMap);
  }
  
  protected void a(boolean paramBoolean)
  {
    i.a("Auto refresh is set to " + paramBoolean);
    this.q = paramBoolean;
  }
  
  protected void b()
  {
    this.u.removeCallbacks(this.d);
  }
  
  public void b(C paramC)
  {
    if (paramC.a().equals(this.e.a().a()))
    {
      i.e("Failed to load WebView.");
      this.s = false;
      a();
      ((Activity)this.a).runOnUiThread(new Runnable()
      {
        public void run()
        {
          if (f.this.b.e() != null) {
            f.this.b.e().onFailedToReceiveFreshAd(f.this.b);
          }
        }
      });
      return;
    }
    c(this.e.a());
  }
  
  public void b(o paramO)
  {
    a("run", paramO);
  }
  
  protected void b(String paramString)
  {
    this.k = paramString;
  }
  
  public void b(String paramString1, int paramInt, String paramString2)
  {
    a("up_ok", paramString1, paramInt, paramString2);
  }
  
  protected void b(boolean paramBoolean)
  {
    i.a("Transition animation is set to " + paramBoolean);
    this.r = paramBoolean;
  }
  
  protected void c()
  {
    if (this.q)
    {
      this.u.removeCallbacks(this.d);
      long l1 = System.currentTimeMillis();
      long l2 = this.w;
      this.w = (l1 - this.v + l2);
      i.a("Pause schedule and the ad has shown " + this.w + "ms");
    }
  }
  
  protected void c(C paramC)
  {
    if (this.r)
    {
      int i1 = this.c.d().m();
      switch (i1)
      {
      default: 
        i1 -= 2;
        if ((i1 >= 0) && (i1 < J.a.values().length))
        {
          this.b.a(paramC, J.a(J.a.values()[i1]));
          return;
        }
        break;
      case 0: 
        this.b.a(paramC, null);
        return;
      case 1: 
        i1 = J.a.values().length;
        i1 = (int)(Math.random() * i1);
        this.b.a(paramC, J.a(J.a.values()[i1]));
        return;
      }
      i.e("Invalid animation type index.");
      this.b.a(paramC, null);
      return;
    }
    this.b.a(paramC, null);
  }
  
  public void c(o paramO)
  {
    a("download_finish", paramO);
  }
  
  protected void c(String paramString)
  {
    this.l = paramString;
  }
  
  public void c(String paramString1, int paramInt, String paramString2)
  {
    a("up_cancel", paramString1, paramInt, paramString2);
  }
  
  protected void c(boolean paramBoolean)
  {
    this.s = paramBoolean;
  }
  
  protected void d()
  {
    long l1;
    if (this.q)
    {
      this.v = System.currentTimeMillis();
      l1 = this.t - this.w;
      if (l1 <= 0L)
      {
        i.a("Maybe there is no ad, request no.");
        i();
      }
    }
    else
    {
      return;
    }
    i.a("Resume with remaining time:" + l1);
    this.u.postDelayed(this.d, l1);
  }
  
  public void d(o paramO)
  {
    a("download_failed", paramO);
  }
  
  protected void d(String paramString)
  {
    this.m = paramString;
  }
  
  public void d(String paramString1, int paramInt, String paramString2)
  {
    a("up_skip", paramString1, paramInt, paramString2);
  }
  
  protected void d(boolean paramBoolean)
  {
    this.p = paramBoolean;
  }
  
  protected long e()
  {
    long l1 = System.currentTimeMillis();
    long l2 = this.w;
    return l1 - this.v + l2;
  }
  
  public void e(o paramO)
  {
    a("download_start", paramO);
  }
  
  protected void e(String paramString)
  {
    this.n = paramString;
  }
  
  public void e(String paramString1, int paramInt, String paramString2)
  {
    a("download_finish", paramString1, paramInt, paramString2);
  }
  
  public void f(o paramO)
  {
    a("download_cancel", paramO);
  }
  
  protected void f(String paramString)
  {
    this.o = paramString;
  }
  
  public void f(String paramString1, int paramInt, String paramString2)
  {
    a("download_failed", paramString1, paramInt, paramString2);
  }
  
  protected boolean f()
  {
    return this.q;
  }
  
  public void g(o paramO)
  {
    a("download_repeat", paramO);
    if (this.a != null) {
      ((Activity)this.a).runOnUiThread(new Runnable()
      {
        public void run()
        {
          Toast.makeText(f.this.a, "应用正在下载", 0).show();
        }
      });
    }
  }
  
  public void g(String paramString)
  {
    if (this.c.d().s()) {
      b("lp_url", paramString);
    }
  }
  
  public void g(String paramString1, int paramInt, String paramString2)
  {
    a("download_start", paramString1, paramInt, paramString2);
  }
  
  protected boolean g()
  {
    i.a("Check settings and permissions.");
    if ((this.j != null) && (this.j.length() != 0))
    {
      if (A.a(this.a))
      {
        i.a("All permissions are ok.");
        return true;
      }
      Log.w("DomobSDK", "Permission denied.");
    }
    for (;;)
    {
      return false;
      Log.w("DomobSDK", "Please set your PlacementID first.");
    }
  }
  
  /* Error */
  protected void h()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 155	cn/domob/android/ads/f:p	Z
    //   6: ifne +17 -> 23
    //   9: aload_0
    //   10: getfield 161	cn/domob/android/ads/f:s	Z
    //   13: ifne +10 -> 23
    //   16: aload_0
    //   17: invokevirtual 958	cn/domob/android/ads/f:i	()V
    //   20: aload_0
    //   21: monitorexit
    //   22: return
    //   23: getstatic 139	cn/domob/android/ads/f:i	Lcn/domob/android/ads/H;
    //   26: ldc_w 988
    //   29: invokevirtual 197	cn/domob/android/ads/H:a	(Ljava/lang/String;)V
    //   32: goto -12 -> 20
    //   35: astore_1
    //   36: aload_0
    //   37: monitorexit
    //   38: aload_1
    //   39: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	40	0	this	f
    //   35	4	1	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	20	35	finally
    //   23	32	35	finally
  }
  
  public void h(o paramO) {}
  
  public void h(String paramString)
  {
    if (a(null, paramString, false))
    {
      k("la_failsafe_success");
      return;
    }
    k("la_failsafe_failed");
  }
  
  public void h(String paramString1, int paramInt, String paramString2)
  {
    a("download_cancel", paramString1, paramInt, paramString2);
  }
  
  protected void i()
  {
    for (;;)
    {
      try
      {
        if ((this.b.getVisibility() == 0) && (this.b.i()) && (this.b.b()) && (this.b.c()))
        {
          if (!this.s)
          {
            v();
            return;
          }
          i.d("DomobAdView is requesting.");
          continue;
        }
        this.u.removeCallbacks(this.d);
      }
      finally {}
      this.u.postDelayed(this.d, this.t);
    }
  }
  
  public void i(o paramO)
  {
    a("download_md5_failed", paramO);
  }
  
  public void i(String paramString)
  {
    l(paramString);
  }
  
  public void i(String paramString1, int paramInt, String paramString2)
  {
    a("download_repeat", paramString1, paramInt, paramString2);
  }
  
  protected String j()
  {
    return this.j;
  }
  
  public void j(o paramO)
  {
    e.a().a(paramO);
  }
  
  public void j(String paramString1, int paramInt, String paramString2) {}
  
  protected int k()
  {
    return this.b.d();
  }
  
  public void k(String paramString1, int paramInt, String paramString2)
  {
    a("download_md5_failed", paramString1, paramInt, paramString2);
  }
  
  protected String l()
  {
    return this.b.h();
  }
  
  protected String m()
  {
    return this.k;
  }
  
  protected String n()
  {
    return this.l;
  }
  
  protected String o()
  {
    return this.m;
  }
  
  protected String p()
  {
    return this.n;
  }
  
  protected String q()
  {
    return this.o;
  }
  
  protected Context r()
  {
    return this.a;
  }
  
  protected DomobAdListener s()
  {
    return this.b.e();
  }
  
  protected boolean t()
  {
    return this.p;
  }
  
  protected i u()
  {
    return this.c;
  }
  
  protected void v()
  {
    if (!g.a().c(this.a))
    {
      if (!this.s)
      {
        b();
        i.b("Load after schedule request.");
        this.s = true;
        new h(this).a();
        return;
      }
      i.d("An ad is requesting.");
      return;
    }
    i.d("Ad has been disabled currently. Disable expire time = " + new Date(g.a().c()));
  }
  
  protected void w()
  {
    a(this.c.d().i(), null, null);
  }
  
  protected void x()
  {
    G.a().a(this.a, this);
    y();
  }
  
  protected void y()
  {
    this.p = true;
    this.s = false;
    a();
  }
  
  protected void z()
  {
    final i.b localB = this.c.d();
    ((Activity)this.a).runOnUiThread(new Runnable()
    {
      public void run()
      {
        int i = (int)(localB.b() * n.u(f.this.a));
        int j = (int)(localB.c() * n.u(f.this.a));
        f.this.b.a(i, j);
        f.this.e = f.this.b.f();
        f.H().a("Background WebView is:" + f.this.e.a().a());
        f.this.e.a().setLayoutParams(new FrameLayout.LayoutParams(i, j));
        String str = localB.e();
        if ((str != null) && (str.length() != 0))
        {
          if (str.equals("url"))
          {
            f.H().a("Get an DomobWebView instance and load with URL:" + localB.d());
            new F(f.this.a, f.this).a(f.this.e.a(), localB.d(), null);
          }
          while (!str.equals("content")) {
            return;
          }
          f.H().a(String.format("Get an DomobWebView instance and load data = [%s] with base URL=[%s]", new Object[] { localB.g(), localB.f() }));
          new F(f.this.a, f.this).a(f.this.e.a(), localB.f(), localB.g());
          return;
        }
        f.H().e("Content type is not available.");
        f.this.A();
      }
    });
  }
  
  class a
    extends D
  {
    a(D.a paramA)
    {
      super();
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      f.H().a("Override URL loading in Expandable:" + paramString);
      if ((paramString.startsWith("domob")) && (Uri.parse(paramString).getHost().equals("close")))
      {
        f.this.b.g().c();
        return true;
      }
      return super.shouldOverrideUrlLoading(paramWebView, paramString);
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      f.this.i();
    }
  }
}
