package org.scribe.extractors;

import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.scribe.exceptions.OAuthParametersMissingException;
import org.scribe.model.OAuthRequest;
import org.scribe.utils.Preconditions;
import org.scribe.utils.URLUtils;

public class HeaderExtractorImpl
  implements HeaderExtractor
{
  private static final String PARAM_SEPARATOR = ", ";
  private static final String PREAMBLE = "OAuth ";
  
  public HeaderExtractorImpl() {}
  
  private void checkPreconditions(OAuthRequest paramOAuthRequest)
  {
    Preconditions.checkNotNull(paramOAuthRequest, "Cannot extract a header from a null object");
    if ((paramOAuthRequest.getOauthParameters() == null) || (paramOAuthRequest.getOauthParameters().size() <= 0)) {
      throw new OAuthParametersMissingException(paramOAuthRequest);
    }
  }
  
  public String extract(OAuthRequest paramOAuthRequest)
  {
    checkPreconditions(paramOAuthRequest);
    paramOAuthRequest = paramOAuthRequest.getOauthParameters();
    StringBuffer localStringBuffer = new StringBuffer(paramOAuthRequest.size() * 20);
    localStringBuffer.append("OAuth ");
    Iterator localIterator = paramOAuthRequest.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localStringBuffer.toString();
      }
      String str = (String)localIterator.next();
      if (localStringBuffer.length() > "OAuth ".length()) {
        localStringBuffer.append(", ");
      }
      localStringBuffer.append(String.format("%s=\"%s\"", new Object[] { str, URLUtils.percentEncode((String)paramOAuthRequest.get(str)) }));
    }
  }
}
