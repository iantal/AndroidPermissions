package org.scribe.model;

import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.scribe.exceptions.OAuthException;
import org.scribe.utils.MapUtils;
import org.scribe.utils.URLUtils;

class Request
{
  private static final String CONTENT_LENGTH = "Content-Length";
  private static final String CONTENT_TYPE = "Content-Type";
  public static final String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
  private Map<String, String> bodyParams;
  private byte[] bytePayload = null;
  private String charset;
  private Long connectTimeout = null;
  private HttpURLConnection connection;
  private boolean connectionKeepAlive = false;
  private Map<String, String> headers;
  private String payload = null;
  private Map<String, String> querystringParams;
  private Long readTimeout = null;
  private String url;
  private Verb verb;
  
  public Request(Verb paramVerb, String paramString)
  {
    this.verb = paramVerb;
    this.url = paramString;
    this.querystringParams = new HashMap();
    this.bodyParams = new HashMap();
    this.headers = new HashMap();
  }
  
  private void createConnection()
    throws IOException
  {
    String str2 = URLUtils.appendParametersToQueryString(this.url, this.querystringParams);
    if (this.connection == null) {
      if (!this.connectionKeepAlive) {
        break label55;
      }
    }
    label55:
    for (String str1 = "true";; str1 = "false")
    {
      System.setProperty("http.keepAlive", str1);
      this.connection = ((HttpURLConnection)new URL(str2).openConnection());
      return;
    }
  }
  
  void addBody(HttpURLConnection paramHttpURLConnection, byte[] paramArrayOfByte)
    throws IOException
  {
    paramHttpURLConnection.setRequestProperty("Content-Length", String.valueOf(paramArrayOfByte.length));
    if (paramHttpURLConnection.getRequestProperty("Content-Type") == null) {
      paramHttpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    }
    paramHttpURLConnection.setDoOutput(true);
    paramHttpURLConnection.getOutputStream().write(paramArrayOfByte);
  }
  
  public void addBodyParameter(String paramString1, String paramString2)
  {
    this.bodyParams.put(paramString1, paramString2);
  }
  
  public void addHeader(String paramString1, String paramString2)
  {
    this.headers.put(paramString1, paramString2);
  }
  
  void addHeaders(HttpURLConnection paramHttpURLConnection)
  {
    Iterator localIterator = this.headers.keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      String str = (String)localIterator.next();
      paramHttpURLConnection.setRequestProperty(str, (String)this.headers.get(str));
    }
  }
  
  public void addPayload(String paramString)
  {
    this.payload = paramString;
  }
  
  public void addPayload(byte[] paramArrayOfByte)
  {
    this.bytePayload = paramArrayOfByte;
  }
  
  public void addQuerystringParameter(String paramString1, String paramString2)
  {
    this.querystringParams.put(paramString1, paramString2);
  }
  
  Response doSend()
    throws IOException
  {
    this.connection.setRequestMethod(this.verb.name());
    if (this.connectTimeout != null) {
      this.connection.setConnectTimeout(this.connectTimeout.intValue());
    }
    if (this.readTimeout != null) {
      this.connection.setReadTimeout(this.readTimeout.intValue());
    }
    addHeaders(this.connection);
    if ((this.verb.equals(Verb.PUT)) || (this.verb.equals(Verb.POST))) {
      addBody(this.connection, getByteBodyContents());
    }
    return new Response(this.connection);
  }
  
  public String getBodyContents()
  {
    try
    {
      String str = new String(getByteBodyContents(), getCharset());
      return str;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      throw new OAuthException("Unsupported Charset: " + this.charset, localUnsupportedEncodingException);
    }
  }
  
  public Map<String, String> getBodyParams()
  {
    return this.bodyParams;
  }
  
  byte[] getByteBodyContents()
  {
    if (this.bytePayload != null) {
      return this.bytePayload;
    }
    if (this.payload != null) {}
    for (Object localObject = this.payload;; localObject = URLUtils.formURLEncodeMap(this.bodyParams)) {
      try
      {
        localObject = ((String)localObject).getBytes(getCharset());
        return localObject;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        throw new OAuthException("Unsupported Charset: " + getCharset(), localUnsupportedEncodingException);
      }
    }
  }
  
  public String getCharset()
  {
    if (this.charset == null) {
      return Charset.defaultCharset().name();
    }
    return this.charset;
  }
  
  public Map<String, String> getHeaders()
  {
    return this.headers;
  }
  
  public Map<String, String> getQueryStringParams()
  {
    try
    {
      HashMap localHashMap = new HashMap();
      localHashMap.putAll(MapUtils.queryStringToMap(new URL(this.url).getQuery()));
      localHashMap.putAll(this.querystringParams);
      return localHashMap;
    }
    catch (MalformedURLException localMalformedURLException)
    {
      throw new OAuthException("Malformed URL", localMalformedURLException);
    }
  }
  
  public String getSanitizedUrl()
  {
    return this.url.replaceAll("\\?.*", "").replace("\\:\\d{4}", "");
  }
  
  public String getUrl()
  {
    return this.url;
  }
  
  public Verb getVerb()
  {
    return this.verb;
  }
  
  public Response send()
  {
    try
    {
      createConnection();
      Response localResponse = doSend();
      return localResponse;
    }
    catch (UnknownHostException localUnknownHostException)
    {
      throw new OAuthException("Could not reach the desired host. Check your network connection.", localUnknownHostException);
    }
    catch (IOException localIOException)
    {
      throw new OAuthException("Problems while creating connection.", localIOException);
    }
  }
  
  public void setCharset(String paramString)
  {
    this.charset = paramString;
  }
  
  public void setConnectTimeout(int paramInt, TimeUnit paramTimeUnit)
  {
    this.connectTimeout = Long.valueOf(paramTimeUnit.toMillis(paramInt));
  }
  
  void setConnection(HttpURLConnection paramHttpURLConnection)
  {
    this.connection = paramHttpURLConnection;
  }
  
  public void setConnectionKeepAlive(boolean paramBoolean)
  {
    this.connectionKeepAlive = paramBoolean;
  }
  
  public void setReadTimeout(int paramInt, TimeUnit paramTimeUnit)
  {
    this.readTimeout = Long.valueOf(paramTimeUnit.toMillis(paramInt));
  }
  
  public String toString()
  {
    return String.format("@Request(%s %s)", new Object[] { getVerb(), getUrl() });
  }
}
