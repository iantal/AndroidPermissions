package org.scribe.services;

import com.prime31.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.scribe.exceptions.OAuthSignatureException;
import org.scribe.utils.Preconditions;
import org.scribe.utils.URLUtils;

public class HMACSha1SignatureService
  implements SignatureService
{
  private static final String CARRIAGE_RETURN = "\r\n";
  private static final String EMPTY_STRING = "";
  private static final String HMAC_SHA1 = "HmacSHA1";
  private static final String METHOD = "HMAC-SHA1";
  private static final String UTF8 = "UTF-8";
  
  public HMACSha1SignatureService() {}
  
  private String doSign(String paramString1, String paramString2)
    throws Exception
  {
    paramString2 = new SecretKeySpec(paramString2.getBytes("UTF-8"), "HmacSHA1");
    Mac localMac = Mac.getInstance("HmacSHA1");
    localMac.init(paramString2);
    return new String(Base64.encodeBytes(localMac.doFinal(paramString1.getBytes("UTF-8")))).replace("\r\n", "");
  }
  
  public String getSignature(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      Preconditions.checkEmptyString(paramString1, "Base string cant be null or empty string");
      Preconditions.checkEmptyString(paramString2, "Api secret cant be null or empty string");
      paramString2 = doSign(paramString1, URLUtils.percentEncode(paramString2) + '&' + URLUtils.percentEncode(paramString3));
      return paramString2;
    }
    catch (Exception paramString2)
    {
      throw new OAuthSignatureException(paramString1, paramString2);
    }
  }
  
  public String getSignatureMethod()
  {
    return "HMAC-SHA1";
  }
}
