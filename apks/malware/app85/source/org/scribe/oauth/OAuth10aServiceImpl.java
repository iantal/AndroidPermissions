package org.scribe.oauth;

import android.util.Log;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.scribe.builder.api.DefaultApi10a;
import org.scribe.extractors.AccessTokenExtractor;
import org.scribe.extractors.BaseStringExtractor;
import org.scribe.extractors.HeaderExtractor;
import org.scribe.extractors.RequestTokenExtractor;
import org.scribe.model.OAuthConfig;
import org.scribe.model.OAuthConstants;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Token;
import org.scribe.model.Verifier;
import org.scribe.services.SignatureService;
import org.scribe.services.TimestampService;

public class OAuth10aServiceImpl
  implements OAuthService
{
  private static final String VERSION = "1.0";
  private DefaultApi10a api;
  private OAuthConfig config;
  
  public OAuth10aServiceImpl(DefaultApi10a paramDefaultApi10a, OAuthConfig paramOAuthConfig)
  {
    this.api = paramDefaultApi10a;
    this.config = paramOAuthConfig;
  }
  
  private void addOAuthParams(OAuthRequest paramOAuthRequest, Token paramToken)
  {
    paramOAuthRequest.addOAuthParameter("oauth_timestamp", this.api.getTimestampService().getTimestampInSeconds());
    paramOAuthRequest.addOAuthParameter("oauth_nonce", this.api.getTimestampService().getNonce());
    paramOAuthRequest.addOAuthParameter("oauth_consumer_key", this.config.getApiKey());
    paramOAuthRequest.addOAuthParameter("oauth_signature_method", this.api.getSignatureService().getSignatureMethod());
    paramOAuthRequest.addOAuthParameter("oauth_version", getVersion());
    if (this.config.hasScope()) {
      paramOAuthRequest.addOAuthParameter("scope", this.config.getScope());
    }
    paramOAuthRequest.addOAuthParameter("oauth_signature", getSignature(paramOAuthRequest, paramToken));
  }
  
  private void addSignature(OAuthRequest paramOAuthRequest)
  {
    switch (this.config.getSignatureType())
    {
    }
    for (;;)
    {
      return;
      paramOAuthRequest.addHeader("Authorization", this.api.getHeaderExtractor().extract(paramOAuthRequest));
      return;
      Iterator localIterator = paramOAuthRequest.getOauthParameters().entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        paramOAuthRequest.addQuerystringParameter((String)localEntry.getKey(), (String)localEntry.getValue());
      }
    }
  }
  
  private String getSignature(OAuthRequest paramOAuthRequest, Token paramToken)
  {
    paramOAuthRequest = this.api.getBaseStringExtractor().extract(paramOAuthRequest);
    return this.api.getSignatureService().getSignature(paramOAuthRequest, this.config.getApiSecret(), paramToken.getSecret());
  }
  
  public Token getAccessToken(Token paramToken, Verifier paramVerifier)
  {
    Log.i("Prime31-OAS", "access token endpoint: " + this.api.getAccessTokenEndpoint());
    OAuthRequest localOAuthRequest = new OAuthRequest(this.api.getAccessTokenVerb(), this.api.getAccessTokenEndpoint());
    localOAuthRequest.addOAuthParameter("oauth_token", paramToken.getToken());
    localOAuthRequest.addOAuthParameter("oauth_verifier", paramVerifier.getValue());
    addOAuthParams(localOAuthRequest, paramToken);
    addSignature(localOAuthRequest);
    paramToken = localOAuthRequest.send();
    try
    {
      Log.i("Prime31-OAS", "access token response code: " + paramToken.getCode());
      Log.i("Prime31-OAS", "access token body: " + paramToken.getBody());
      return this.api.getAccessTokenExtractor().extract(paramToken.getBody());
    }
    catch (Exception paramVerifier)
    {
      for (;;)
      {
        Log.i("Prime31-OAS", "error getting access token body: " + paramVerifier.getMessage());
      }
    }
  }
  
  public String getAuthorizationUrl(Token paramToken)
  {
    return this.api.getAuthorizationUrl(paramToken);
  }
  
  public Token getRequestToken()
  {
    Log.i("Prime31-OAS", "request token endpoint: " + this.api.getRequestTokenEndpoint());
    Object localObject = new OAuthRequest(this.api.getRequestTokenVerb(), this.api.getRequestTokenEndpoint());
    ((OAuthRequest)localObject).addOAuthParameter("oauth_callback", this.config.getCallback());
    addOAuthParams((OAuthRequest)localObject, OAuthConstants.EMPTY_TOKEN);
    addSignature((OAuthRequest)localObject);
    localObject = ((OAuthRequest)localObject).send();
    try
    {
      Log.i("Prime31-OAS", "request token response code: " + ((Response)localObject).getCode());
      Log.i("Prime31-OAS", "request token body: " + ((Response)localObject).getBody());
      return this.api.getRequestTokenExtractor().extract(((Response)localObject).getBody());
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Log.i("Prime31-OAS", "error getting request token body: " + localException.getMessage());
      }
    }
  }
  
  public String getVersion()
  {
    return "1.0";
  }
  
  public void signRequest(Token paramToken, OAuthRequest paramOAuthRequest)
  {
    paramOAuthRequest.addOAuthParameter("oauth_token", paramToken.getToken());
    addOAuthParams(paramOAuthRequest, paramToken);
    addSignature(paramOAuthRequest);
  }
}
