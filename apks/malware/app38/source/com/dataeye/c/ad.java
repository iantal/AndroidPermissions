package com.dataeye.c;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.text.TextUtils;
import com.dataeye.a.g;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

public class ad
  implements Thread.UncaughtExceptionHandler
{
  private static ad d;
  private final Thread.UncaughtExceptionHandler a = Thread.getDefaultUncaughtExceptionHandler();
  private Thread b;
  private Throwable c;
  
  public ad(Application paramApplication)
  {
    Thread.setDefaultUncaughtExceptionHandler(this);
  }
  
  public static g a(Throwable paramThrowable)
  {
    g localG = new g();
    localG.a = ab.b();
    Object localObject = new StringWriter();
    paramThrowable.printStackTrace(new PrintWriter((Writer)localObject));
    localObject = ((StringWriter)localObject).getBuffer();
    int i = ((StringBuffer)localObject).toString().indexOf("\n");
    if (i > 0) {}
    for (localG.b = ((StringBuffer)localObject).toString().substring(0, i);; localG.b = paramThrowable.getMessage()) {
      try
      {
        localG.c = ab.e(((StringBuffer)localObject).toString());
        return localG;
      }
      catch (IOException paramThrowable)
      {
        localG.c = new byte[0];
      }
    }
    return localG;
  }
  
  public static Map a(String paramString, Throwable paramThrowable)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("errorTime", ab.b());
    Object localObject = new StringWriter();
    paramThrowable.printStackTrace(new PrintWriter((Writer)localObject));
    localObject = ((StringWriter)localObject).getBuffer();
    if (!TextUtils.isEmpty(paramString)) {
      localHashMap.put("title", paramString);
    }
    for (;;)
    {
      localHashMap.put("content", ab.i(((StringBuffer)localObject).toString()));
      return localHashMap;
      int i = ((StringBuffer)localObject).toString().indexOf("\n");
      if (i > 0) {
        localHashMap.put("title", ab.i(((StringBuffer)localObject).substring(0, i).toString()));
      } else {
        localHashMap.put("title", ab.i(paramThrowable.getMessage()));
      }
    }
  }
  
  public static void a(Context paramContext)
  {
    if ((d == null) && ((paramContext instanceof Activity))) {
      d = new ad(((Activity)paramContext).getApplication());
    }
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    this.b = paramThread;
    this.c = paramThrowable;
    try
    {
      b.a(a(paramThrowable));
      b.a(false);
      Thread.sleep(3000L);
      if (this.a != null) {
        this.a.uncaughtException(this.b, this.c);
      }
      return;
    }
    catch (Throwable paramThread)
    {
      for (;;)
      {
        t.a("Invoke UnCaughtException errorï¼Œreason:" + paramThread.getMessage(), paramThread);
      }
    }
  }
}
