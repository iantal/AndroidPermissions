package com.dataeye.c;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.dataeye.DCConfigParams;
import com.dataeye.DCEvent;
import com.dataeye.b.a;
import com.dataeye.b.f;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

public class ab
{
  static HttpRequestRetryHandler a = new ac();
  
  public static String a(Context paramContext)
  {
    return Environment.getExternalStorageDirectory().toString();
  }
  
  public static String a(String paramString)
  {
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      localMessageDigest.reset();
      localMessageDigest.update(paramString.getBytes());
      paramString = a.a(localMessageDigest.digest());
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  public static ArrayList a(String paramString, ArrayList paramArrayList)
  {
    localArrayList = new ArrayList();
    try
    {
      paramString = Runtime.getRuntime().exec(paramString);
      BufferedOutputStream localBufferedOutputStream = new BufferedOutputStream(paramString.getOutputStream());
      BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramString.getInputStream()));
      paramArrayList = paramArrayList.iterator();
      if (!paramArrayList.hasNext())
      {
        localBufferedOutputStream.write("exit\n".getBytes());
        localBufferedOutputStream.flush();
      }
      for (;;)
      {
        paramArrayList = localBufferedReader.readLine();
        if (paramArrayList == null)
        {
          paramString.waitFor();
          return localArrayList;
          localBufferedOutputStream.write(((String)paramArrayList.next() + " 2>&1\n").getBytes());
          break;
        }
        localArrayList.add(paramArrayList);
      }
      return localArrayList;
    }
    catch (Exception paramString) {}
  }
  
  /* Error */
  public static void a(String paramString1, String paramString2)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: new 154	java/io/FileWriter
    //   5: dup
    //   6: aload_0
    //   7: invokespecial 155	java/io/FileWriter:<init>	(Ljava/lang/String;)V
    //   10: astore_0
    //   11: aload_0
    //   12: aload_1
    //   13: invokevirtual 158	java/io/FileWriter:append	(Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   16: pop
    //   17: aload_0
    //   18: invokevirtual 159	java/io/FileWriter:flush	()V
    //   21: aload_0
    //   22: ifnull +7 -> 29
    //   25: aload_0
    //   26: invokevirtual 162	java/io/FileWriter:close	()V
    //   29: return
    //   30: astore_0
    //   31: aconst_null
    //   32: astore_0
    //   33: aload_0
    //   34: ifnull -5 -> 29
    //   37: aload_0
    //   38: invokevirtual 162	java/io/FileWriter:close	()V
    //   41: return
    //   42: astore_0
    //   43: return
    //   44: astore_0
    //   45: aload_2
    //   46: astore_1
    //   47: aload_1
    //   48: ifnull +7 -> 55
    //   51: aload_1
    //   52: invokevirtual 162	java/io/FileWriter:close	()V
    //   55: aload_0
    //   56: athrow
    //   57: astore_1
    //   58: goto -3 -> 55
    //   61: astore_0
    //   62: return
    //   63: astore_2
    //   64: aload_0
    //   65: astore_1
    //   66: aload_2
    //   67: astore_0
    //   68: goto -21 -> 47
    //   71: astore_1
    //   72: goto -39 -> 33
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	75	0	paramString1	String
    //   0	75	1	paramString2	String
    //   1	45	2	localObject1	Object
    //   63	4	2	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   2	11	30	java/lang/Exception
    //   37	41	42	java/io/IOException
    //   2	11	44	finally
    //   51	55	57	java/io/IOException
    //   25	29	61	java/io/IOException
    //   11	21	63	finally
    //   11	21	71	java/lang/Exception
  }
  
  public static boolean a()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static boolean a(Context paramContext, String... paramVarArgs)
  {
    boolean bool2 = false;
    PackageManager localPackageManager = paramContext.getPackageManager();
    int i = 0;
    for (;;)
    {
      boolean bool1;
      if (i >= paramVarArgs.length) {
        bool1 = true;
      }
      do
      {
        return bool1;
        bool1 = bool2;
      } while (localPackageManager.checkPermission(paramVarArgs[i], paramContext.getPackageName()) != 0);
      i += 1;
    }
  }
  
  public static boolean a(String paramString, f paramF)
  {
    long l = System.currentTimeMillis();
    Object localObject = b("http://%1$s/dc/sync_adr", paramString);
    str = y.c("DC_CURRENT_HOST", "rd.gdatacube.net");
    try
    {
      localObject = b((String)localObject, paramF);
      if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200)
      {
        if (!"{\"code\":0}".equals(EntityUtils.toString(((HttpResponse)localObject).getEntity(), "UTF-8")))
        {
          v.a("_dc_oss_def_intercept", "sync address maybe intercepted", false, System.currentTimeMillis() - l, paramF.a().length, paramString);
          c(paramString, str);
          return false;
        }
        if (!str.equals(paramString)) {
          y.e("DC_CURRENT_HOST", paramString);
        }
        b.m = 0;
        return true;
      }
      c(paramString, str);
    }
    catch (Exception paramF)
    {
      for (;;)
      {
        c(paramString, str);
      }
    }
    return false;
  }
  
  public static byte[] a(byte[] paramArrayOfByte)
  {
    paramArrayOfByte = new ByteArrayInputStream(paramArrayOfByte);
    GZIPInputStream localGZIPInputStream = new GZIPInputStream(paramArrayOfByte, 32);
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte[32];
    for (;;)
    {
      int i = localGZIPInputStream.read(arrayOfByte);
      if (i == -1)
      {
        localGZIPInputStream.close();
        paramArrayOfByte.close();
        return localByteArrayOutputStream.toByteArray();
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  public static int b()
  {
    return (int)(System.currentTimeMillis() / 1000L);
  }
  
  public static String b(Context paramContext)
  {
    return paramContext.getFilesDir().getAbsolutePath();
  }
  
  public static String b(String paramString1, String paramString2)
  {
    if (!TextUtils.isEmpty(paramString2)) {}
    for (paramString1 = String.format(paramString1, new Object[] { paramString2 });; paramString1 = String.format(paramString1, new Object[] { "rd.gdatacube.net" }))
    {
      t.a("upload data appurl:" + paramString1);
      return paramString1;
    }
  }
  
  /* Error */
  public static HttpResponse b(String paramString, f paramF)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: aload_3
    //   6: astore_2
    //   7: new 310	org/apache/http/params/BasicHttpParams
    //   10: dup
    //   11: invokespecial 311	org/apache/http/params/BasicHttpParams:<init>	()V
    //   14: astore 5
    //   16: aload_3
    //   17: astore_2
    //   18: aload 5
    //   20: sipush 10000
    //   23: invokestatic 317	org/apache/http/params/HttpConnectionParams:setConnectionTimeout	(Lorg/apache/http/params/HttpParams;I)V
    //   26: aload_3
    //   27: astore_2
    //   28: aload 5
    //   30: sipush 10000
    //   33: invokestatic 320	org/apache/http/params/HttpConnectionParams:setSoTimeout	(Lorg/apache/http/params/HttpParams;I)V
    //   36: aload_3
    //   37: astore_2
    //   38: invokestatic 323	com/dataeye/c/b:e	()Landroid/content/Context;
    //   41: ifnull +36 -> 77
    //   44: aload_3
    //   45: astore_2
    //   46: invokestatic 323	com/dataeye/c/b:e	()Landroid/content/Context;
    //   49: invokestatic 326	com/dataeye/c/ab:q	(Landroid/content/Context;)Ljava/lang/String;
    //   52: invokestatic 330	com/dataeye/c/ab:j	(Ljava/lang/String;)Lorg/apache/http/HttpHost;
    //   55: astore 6
    //   57: aload 6
    //   59: ifnull +18 -> 77
    //   62: aload_3
    //   63: astore_2
    //   64: aload 5
    //   66: ldc_w 332
    //   69: aload 6
    //   71: invokeinterface 338 3 0
    //   76: pop
    //   77: aload_3
    //   78: astore_2
    //   79: new 340	org/apache/http/impl/client/DefaultHttpClient
    //   82: dup
    //   83: aload 5
    //   85: invokespecial 343	org/apache/http/impl/client/DefaultHttpClient:<init>	(Lorg/apache/http/params/HttpParams;)V
    //   88: astore_3
    //   89: aload_3
    //   90: getstatic 15	com/dataeye/c/ab:a	Lorg/apache/http/client/HttpRequestRetryHandler;
    //   93: invokevirtual 347	org/apache/http/impl/client/DefaultHttpClient:setHttpRequestRetryHandler	(Lorg/apache/http/client/HttpRequestRetryHandler;)V
    //   96: new 349	org/apache/http/client/methods/HttpPost
    //   99: dup
    //   100: aload_0
    //   101: invokespecial 350	org/apache/http/client/methods/HttpPost:<init>	(Ljava/lang/String;)V
    //   104: astore_0
    //   105: aload_0
    //   106: ldc_w 352
    //   109: ldc_w 354
    //   112: invokevirtual 357	org/apache/http/client/methods/HttpPost:setHeader	(Ljava/lang/String;Ljava/lang/String;)V
    //   115: aload_0
    //   116: new 359	org/apache/http/entity/ByteArrayEntity
    //   119: dup
    //   120: aload_1
    //   121: invokevirtual 243	com/dataeye/b/f:a	()[B
    //   124: invokespecial 360	org/apache/http/entity/ByteArrayEntity:<init>	([B)V
    //   127: invokevirtual 364	org/apache/http/client/methods/HttpPost:setEntity	(Lorg/apache/http/HttpEntity;)V
    //   130: aload_3
    //   131: aload_0
    //   132: invokevirtual 368	org/apache/http/impl/client/DefaultHttpClient:execute	(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
    //   135: astore_0
    //   136: aload_3
    //   137: ifnull +19 -> 156
    //   140: aload_3
    //   141: invokevirtual 372	org/apache/http/impl/client/DefaultHttpClient:getConnectionManager	()Lorg/apache/http/conn/ClientConnectionManager;
    //   144: ifnull +12 -> 156
    //   147: aload_3
    //   148: invokevirtual 372	org/apache/http/impl/client/DefaultHttpClient:getConnectionManager	()Lorg/apache/http/conn/ClientConnectionManager;
    //   151: invokeinterface 377 1 0
    //   156: aload_0
    //   157: areturn
    //   158: astore_0
    //   159: aload 4
    //   161: astore_2
    //   162: aload_0
    //   163: athrow
    //   164: astore_0
    //   165: aload_2
    //   166: ifnull +19 -> 185
    //   169: aload_2
    //   170: invokevirtual 372	org/apache/http/impl/client/DefaultHttpClient:getConnectionManager	()Lorg/apache/http/conn/ClientConnectionManager;
    //   173: ifnull +12 -> 185
    //   176: aload_2
    //   177: invokevirtual 372	org/apache/http/impl/client/DefaultHttpClient:getConnectionManager	()Lorg/apache/http/conn/ClientConnectionManager;
    //   180: invokeinterface 377 1 0
    //   185: aload_0
    //   186: athrow
    //   187: astore_0
    //   188: aload_3
    //   189: astore_2
    //   190: goto -25 -> 165
    //   193: astore_0
    //   194: aload_3
    //   195: astore_2
    //   196: goto -34 -> 162
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	199	0	paramString	String
    //   0	199	1	paramF	f
    //   6	190	2	localObject1	Object
    //   1	194	3	localDefaultHttpClient	org.apache.http.impl.client.DefaultHttpClient
    //   3	157	4	localObject2	Object
    //   14	70	5	localBasicHttpParams	org.apache.http.params.BasicHttpParams
    //   55	15	6	localHttpHost	HttpHost
    // Exception table:
    //   from	to	target	type
    //   7	16	158	java/io/IOException
    //   18	26	158	java/io/IOException
    //   28	36	158	java/io/IOException
    //   38	44	158	java/io/IOException
    //   46	57	158	java/io/IOException
    //   64	77	158	java/io/IOException
    //   79	89	158	java/io/IOException
    //   7	16	164	finally
    //   18	26	164	finally
    //   28	36	164	finally
    //   38	44	164	finally
    //   46	57	164	finally
    //   64	77	164	finally
    //   79	89	164	finally
    //   162	164	164	finally
    //   89	136	187	finally
    //   89	136	193	java/io/IOException
  }
  
  public static void b(String paramString)
  {
    paramString = new File(paramString);
    try
    {
      if (!paramString.exists()) {
        paramString.mkdirs();
      }
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static String c()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static String c(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getSimOperator();
  }
  
  /* Error */
  public static String c(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: new 88	java/io/BufferedReader
    //   5: dup
    //   6: new 406	java/io/FileReader
    //   9: dup
    //   10: aload_0
    //   11: invokespecial 407	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   14: invokespecial 100	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   17: astore_0
    //   18: aload_0
    //   19: invokevirtual 121	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   22: astore_1
    //   23: aload_1
    //   24: astore_2
    //   25: aload_0
    //   26: ifnull +9 -> 35
    //   29: aload_0
    //   30: invokevirtual 408	java/io/BufferedReader:close	()V
    //   33: aload_1
    //   34: astore_2
    //   35: aload_2
    //   36: areturn
    //   37: astore_0
    //   38: aconst_null
    //   39: astore_0
    //   40: aload_0
    //   41: ifnull -6 -> 35
    //   44: aload_0
    //   45: invokevirtual 408	java/io/BufferedReader:close	()V
    //   48: aconst_null
    //   49: areturn
    //   50: astore_0
    //   51: aconst_null
    //   52: areturn
    //   53: astore_1
    //   54: aconst_null
    //   55: astore_0
    //   56: aload_0
    //   57: ifnull +7 -> 64
    //   60: aload_0
    //   61: invokevirtual 408	java/io/BufferedReader:close	()V
    //   64: aload_1
    //   65: athrow
    //   66: astore_0
    //   67: goto -3 -> 64
    //   70: astore_0
    //   71: aload_1
    //   72: areturn
    //   73: astore_1
    //   74: goto -18 -> 56
    //   77: astore_1
    //   78: goto -38 -> 40
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	81	0	paramString	String
    //   22	12	1	str1	String
    //   53	19	1	str2	String
    //   73	1	1	localObject1	Object
    //   77	1	1	localException	Exception
    //   1	35	2	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   2	18	37	java/lang/Exception
    //   44	48	50	java/io/IOException
    //   2	18	53	finally
    //   60	64	66	java/io/IOException
    //   29	33	70	java/io/IOException
    //   18	23	73	finally
    //   18	23	77	java/lang/Exception
  }
  
  private static void c(String paramString1, String paramString2)
  {
    if (!paramString2.equals(paramString1)) {
      b.j();
    }
    do
    {
      return;
      b.m += 1;
    } while (b.m < 4);
    b.j();
  }
  
  public static String d()
  {
    return Build.MODEL;
  }
  
  public static String d(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
  }
  
  public static String d(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return "";
    }
    return paramString.trim();
  }
  
  public static int e(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext != null)
      {
        if ("wifi".equals(paramContext.getTypeName().toLowerCase())) {
          return 2;
        }
        if ("mobile".equals(paramContext.getTypeName().toLowerCase())) {
          return 1;
        }
        if ("edge".equals(paramContext.getTypeName().toLowerCase())) {
          return 4;
        }
        return 3;
      }
    }
    return 3;
  }
  
  public static String e()
  {
    return Build.MANUFACTURER;
  }
  
  public static byte[] e(String paramString)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream(paramString.length());
    GZIPOutputStream localGZIPOutputStream = new GZIPOutputStream(localByteArrayOutputStream);
    localGZIPOutputStream.write(paramString.getBytes("UTF-8"));
    localGZIPOutputStream.close();
    paramString = localByteArrayOutputStream.toByteArray();
    localByteArrayOutputStream.close();
    return paramString;
  }
  
  public static String f()
  {
    return Build.BRAND + "|" + Build.MODEL;
  }
  
  public static String f(Context paramContext)
  {
    Object localObject = y.c("DC_APPVERSION", "");
    if (!TextUtils.isEmpty((CharSequence)localObject)) {
      return localObject;
    }
    localObject = paramContext.getPackageManager();
    try
    {
      paramContext = ((PackageManager)localObject).getPackageInfo(paramContext.getPackageName(), 0).versionName;
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      t.a("Invoke getAppVersion error" + paramContext.getMessage(), paramContext);
    }
    return "";
  }
  
  public static String f(String paramString)
  {
    try
    {
      paramString = InetAddress.getByName(paramString).getHostAddress();
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "0.0.0.0";
  }
  
  public static String g()
  {
    return Build.CPU_ABI;
  }
  
  public static String g(Context paramContext)
  {
    String str = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
    paramContext = str;
    if (TextUtils.isEmpty(str)) {
      paramContext = "";
    }
    return paramContext;
  }
  
  public static Map g(String paramString)
  {
    HashMap localHashMap = new HashMap();
    if (TextUtils.isEmpty(paramString)) {
      return null;
    }
    try
    {
      paramString = new JSONObject(paramString);
      Iterator localIterator = paramString.keys();
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          paramString = localHashMap;
          break;
        }
        String str1 = (String)localIterator.next();
        String str2 = paramString.getString(str1);
        localHashMap.put(str1, h(str2));
      }
      return paramString;
    }
    catch (Exception paramString)
    {
      t.a("Invoke findThirdBird error,reason:" + paramString.getMessage(), paramString);
      paramString = null;
    }
  }
  
  public static int h(String paramString)
  {
    try
    {
      Class.forName(paramString);
      return 1;
    }
    catch (Throwable paramString) {}
    return 0;
  }
  
  public static String h(Context paramContext)
  {
    if (paramContext != null) {
      return paramContext.getPackageName();
    }
    return "";
  }
  
  public static boolean h()
  {
    boolean bool = false;
    Object localObject2 = System.getenv("PATH");
    Object localObject1 = new ArrayList();
    localObject2 = ((String)localObject2).split(":");
    int i = 0;
    if (i >= localObject2.length)
    {
      localObject2 = a("/system/bin/sh", (ArrayList)localObject1);
      localObject1 = "";
      i = 0;
    }
    for (;;)
    {
      if (i >= ((ArrayList)localObject2).size())
      {
        if (((String)localObject1).contains("-rwsr-sr-x root     root")) {
          bool = true;
        }
        return bool;
        ((ArrayList)localObject1).add("ls -l " + localObject2[i] + "/su");
        i += 1;
        break;
      }
      localObject1 = localObject1 + (String)((ArrayList)localObject2).get(i);
      i += 1;
    }
  }
  
  public static String i(Context paramContext)
  {
    paramContext = ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay();
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    paramContext.getMetrics(localDisplayMetrics);
    if (localDisplayMetrics.heightPixels > localDisplayMetrics.widthPixels) {
      return localDisplayMetrics.widthPixels + "x" + localDisplayMetrics.heightPixels;
    }
    return localDisplayMetrics.heightPixels + "x" + localDisplayMetrics.widthPixels;
  }
  
  public static String i(String paramString)
  {
    try
    {
      paramString = URLEncoder.encode(paramString, "utf-8");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString) {}
    return "";
  }
  
  public static void i()
  {
    int i = DCConfigParams.getParameterInt("DESelf_Key_SessionPeriod", 30000);
    b.c = i;
    t.a("A:" + i);
    i = DCConfigParams.getParameterInt("DESelf_Key_UploadPeriod", 60000);
    ae.b = i;
    t.a("B:" + i);
    boolean bool = DCConfigParams.getParameterBoolean("DESelf_Key_OpenDebugLog", true);
    t.c = bool;
    t.a("C:" + bool);
    Object localObject = DCConfigParams.getParameterString("DESelf_Key_ThirdBird", "");
    t.a("D:" + (String)localObject);
    localObject = g((String)localObject);
    if (localObject != null)
    {
      DCEvent.onEvent("_DESelf_ThirdBird_Event", (Map)localObject);
      t.a("E:" + localObject.toString());
    }
    b.h();
  }
  
  public static String j()
  {
    return TimeZone.getDefault().getDisplayName(false, 0, Locale.US);
  }
  
  public static String j(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      boolean bool;
      t.a("Invoke DCUtils.getImsi error , reason:" + localException1.getMessage(), localException1);
    }
    catch (Exception localException1)
    {
      try
      {
        bool = TextUtils.isEmpty(paramContext);
        if (bool) {
          paramContext = "";
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = "";
    }
    return paramContext;
  }
  
  private static HttpHost j(String paramString)
  {
    if (!TextUtils.isEmpty(paramString))
    {
      paramString = paramString.toLowerCase();
      if ((paramString.startsWith("uniwap")) || (paramString.startsWith("3gwap"))) {
        return new HttpHost("10.0.0.172", 80);
      }
      if (paramString.startsWith("cmwap")) {
        return new HttpHost("10.0.0.172", 80);
      }
      if (paramString.startsWith("ctwap")) {
        return new HttpHost("10.0.0.200", 80);
      }
    }
    return null;
  }
  
  public static String k(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
      boolean bool;
      t.a("Invoke DCUtils.getImsi error , reason:" + localException1.getMessage(), localException1);
    }
    catch (Exception localException1)
    {
      try
      {
        bool = TextUtils.isEmpty(paramContext);
        if (bool) {
          paramContext = "";
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = "";
    }
    return paramContext;
  }
  
  public static String l(Context paramContext)
  {
    return paramContext.getResources().getConfiguration().locale.getCountry();
  }
  
  public static boolean m(Context paramContext)
  {
    if (paramContext != null)
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext != null) {
        return paramContext.isAvailable();
      }
    }
    return false;
  }
  
  public static boolean n(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.isConnected()) && (paramContext.getType() == 1);
  }
  
  public static boolean o(Context paramContext)
  {
    Iterator localIterator = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses().iterator();
    ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo;
    do
    {
      if (!localIterator.hasNext()) {
        return false;
      }
      localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)localIterator.next();
    } while ((!localRunningAppProcessInfo.processName.equals(paramContext.getPackageName())) || (localRunningAppProcessInfo.importance == 100));
    return true;
  }
  
  public static boolean p(Context paramContext)
  {
    return ((KeyguardManager)paramContext.getSystemService("keyguard")).inKeyguardRestrictedInputMode();
  }
  
  private static String q(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.isAvailable()))
      {
        paramContext = paramContext.getExtraInfo();
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      t.b("invoke DCUtils.getNetworkState error, reason:" + paramContext.getMessage(), paramContext);
    }
    return "";
  }
}
