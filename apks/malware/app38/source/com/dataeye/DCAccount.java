package com.dataeye;

import android.text.TextUtils;
import com.dataeye.c.b;
import com.dataeye.c.s;
import com.dataeye.c.t;
import com.dataeye.c.u;
import java.util.HashMap;
import java.util.Map;

public class DCAccount
{
  public DCAccount() {}
  
  public static void addTag(String paramString1, String paramString2)
  {
    if (!b.b) {
      t.c("Invoke DCAccount.tag() fail , DataEye SDK need init first!");
    }
    while (TextUtils.isEmpty(paramString1)) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("tag", paramString1);
    if (!TextUtils.isEmpty(paramString2)) {
      localHashMap.put("subTag", paramString2);
    }
    DCEvent.onEvent("_DESelf_addTag", localHashMap);
    s.a("DCAccount_tag");
  }
  
  public static String getAccountId()
  {
    if (b.b)
    {
      s.a("DCAgent_getAccountId");
      return com.dataeye.c.a.f();
    }
    t.c("Invoke DCAccount.getAccountId() fail , DataEye SDK need init first!");
    return "";
  }
  
  public static void login(String paramString)
  {
    login(paramString, "");
  }
  
  public static void login(String paramString1, String paramString2)
  {
    if (!b.b)
    {
      t.c("Invoke DCAccount.login() fail , DataEye SDK need init first!");
      return;
    }
    if (b.i == 1)
    {
      com.dataeye.c.a.b();
      t.b("Invoke DCAccount.login() Ignored, because ReportMode is DEFAULT , please invoke ");
      return;
    }
    String str = paramString1;
    if (TextUtils.isEmpty(paramString1))
    {
      str = com.dataeye.c.a.b();
      t.a("login", "loginWithAccountId", "warning", new Object[] { "ReportMode=AFTER_MODE, accountId=null , so accountId=Uid" });
    }
    paramString1 = com.dataeye.c.a.f();
    if (!paramString1.equals(com.dataeye.c.a.b())) {
      if (!str.equals(paramString1))
      {
        if (!paramString1.equals("_DESelf_DEFAULT_ACCOUNTID"))
        {
          b.b(com.dataeye.c.a.g(), b.d);
          if (com.dataeye.c.a.m != null) {
            com.dataeye.c.a.m.c();
          }
        }
        b.c();
        com.dataeye.c.a.a(str, paramString2);
        t.b("Invoke DCAccount.login() success, accountid:" + str);
      }
    }
    for (;;)
    {
      s.a("DCAccount_login");
      return;
      t.a("Invoke DCAccount.login() warring, " + str + " repeat login ");
      continue;
      b.c();
      com.dataeye.c.a.a(str, paramString2);
      t.b("Invoke DCAccount.login() success, accountid:" + str);
    }
  }
  
  public static void logout()
  {
    if (b.i == 1)
    {
      t.b("Invoke DCAccount.logout() Ignored, because ReportMode is DEFAULT");
      return;
    }
    if (com.dataeye.c.a.c())
    {
      b.b(com.dataeye.c.a.g(), b.d);
      com.dataeye.c.a.i();
    }
    s.a("DCAccount_logout");
  }
  
  public static void removeTag(String paramString1, String paramString2)
  {
    if (!b.b) {
      t.c("Invoke DCAccount.unTag() fail , DataEye SDK need init first!");
    }
    while (TextUtils.isEmpty(paramString1)) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("tag", paramString1);
    if (!TextUtils.isEmpty(paramString2)) {
      localHashMap.put("subTag", paramString2);
    }
    DCEvent.onEvent("_DESelf_removeTag", localHashMap);
    s.a("DCAccount_unTag");
  }
  
  public static void setAccountType(int paramInt)
  {
    if (!b.b)
    {
      t.c("Invoke DCAccount.setAccountType() fail , DataEye SDK need init first!");
      return;
    }
    com.dataeye.c.a.b(paramInt);
    s.a("DCAccount_setAccountType");
  }
  
  public static void setAge(int paramInt)
  {
    if (!b.b)
    {
      t.c("Invoke DCAccount.setAge() fail , DataEye SDK need init first!");
      return;
    }
    com.dataeye.c.a.d(paramInt);
    s.a("DCAccount_setAge");
  }
  
  public static void setGameServer(String paramString)
  {
    if (!b.b)
    {
      t.c("Invoke DCAccount.setGameServer() fail , DataEye SDK need init first!");
      return;
    }
    if (TextUtils.isEmpty(paramString))
    {
      t.c("Invoke DCAccount.setGameServer() fail , gameServer is empty!");
      return;
    }
    com.dataeye.c.a.b(paramString);
    s.a("DCAccount_setGameServer");
  }
  
  public static void setGender(int paramInt)
  {
    if (!b.b)
    {
      t.c("Invoke DCAccount.setGender() fail , DataEye SDK need init first!");
      return;
    }
    com.dataeye.c.a.c(paramInt);
    s.a("DCAccount_setGender");
  }
  
  public static void setLevel(int paramInt)
  {
    if (!b.b)
    {
      t.c("Invoke DCAccount.setLevel() fail , DataEye SDK need init first!");
      return;
    }
    int i = com.dataeye.c.a.g().g;
    if (i == paramInt)
    {
      t.c("Invoke DCAccount.setLevel() fail ,same level set again! ");
      return;
    }
    if (i < paramInt)
    {
      t.c("Invoke DCAccount.setLevel() fail ,new level is less than the current level! ");
      return;
    }
    long l = b.b(i);
    HashMap localHashMap;
    if (i > 0)
    {
      localHashMap = new HashMap();
      localHashMap.put("endLevel", String.valueOf(paramInt));
      localHashMap.put("spendTimeInLevel", String.valueOf(l / 1000L + 1L));
      DCEvent.onEventEnd("_DESelf_Level", localHashMap, String.valueOf(i));
      b.a(i);
    }
    if (paramInt > 0)
    {
      com.dataeye.c.a.e(paramInt);
      localHashMap = new HashMap();
      localHashMap.put("startLevel", String.valueOf(paramInt));
      DCEvent.onEventBegin("_DESelf_Level", localHashMap, String.valueOf(paramInt));
      b.c(paramInt);
      b.a(false);
    }
    s.a("DCAccount_setLevel");
  }
}
