package com.dataeye;

import android.content.Context;
import android.text.TextUtils;
import com.dataeye.c.a;
import com.dataeye.c.aa;
import com.dataeye.c.ab;
import com.dataeye.c.ad;
import com.dataeye.c.ae;
import com.dataeye.c.b;
import com.dataeye.c.s;
import com.dataeye.c.t;
import com.dataeye.c.u;
import java.util.HashMap;
import java.util.Map;

public class DCAgent
{
  public DCAgent() {}
  
  public static String getUID()
  {
    if (!b.b) {
      t.c("Invoke DCAgent.getUID() fail , DataEye SDK need init first! \n Maybe you can try to invoke DCAccont.getUid(Context)");
    }
    s.a("DCAgent_getUid");
    if (b.b) {
      return a.b();
    }
    return "";
  }
  
  public static String getUID(Context paramContext)
  {
    s.a("DCAgent_getUid");
    if (b.b) {
      return a.b();
    }
    return a.b(paramContext);
  }
  
  public static void initConfig(Context paramContext, String paramString1, String paramString2)
  {
    if (b.b)
    {
      t.c("Invoke DCAgent.setVersion() must before DataEye SDK init");
      return;
    }
    try
    {
      b.a(paramContext, paramString1, paramString2);
      s.a("DCAgent_initConfig");
      return;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        t.b("DataEye SDK init error , reason:" + paramContext.getMessage(), paramContext);
      }
    }
  }
  
  public static void onKillProcessOrExit()
  {
    
    boolean bool;
    if (a.g() != null)
    {
      if (a.m != null) {
        a.m.c();
      }
      if (a.a())
      {
        bool = false;
        b.a(bool);
      }
    }
    for (;;)
    {
      s.a("DCAgent_onKillProcessOrExit");
      return;
      bool = true;
      break;
      b.m();
    }
  }
  
  public static void onPause(Context paramContext)
  {
    if (b.b)
    {
      b.d();
      new aa(paramContext).start();
      if (a.m != null) {
        a.m.c();
      }
    }
    s.a("DCAgent_onPause");
  }
  
  public static void onResume(Context paramContext)
  {
    try
    {
      if (!b.b) {
        b.a(paramContext, null, null);
      }
      if (b.b)
      {
        b.a();
        ae.b();
      }
      s.a("DCAgent_onResume");
      return;
    }
    catch (Throwable paramContext) {}
  }
  
  public static void reportError(String paramString1, String paramString2)
  {
    if (!b.b)
    {
      t.c("Invoke DCAgent.reportError() fail , DataEye SDK need init first!");
      return;
    }
    if (DCConfigParams.getParameterBoolean("DESelf_Key_ForBidReportError", false))
    {
      t.a("DataEye SDK Online Config : forbid report error to webserver ");
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("errorTime", ab.b());
    if (!TextUtils.isEmpty(paramString1))
    {
      localHashMap.put("title", ab.i(paramString1));
      if (TextUtils.isEmpty(paramString2)) {
        break label126;
      }
      localHashMap.put("content", ab.i(paramString2));
    }
    for (;;)
    {
      DCEvent.onEvent("_DESelf_UserDefined_ErrorReport_2", localHashMap);
      s.a("DCAgent_reportError");
      return;
      localHashMap.put("title", "");
      break;
      label126:
      localHashMap.put("content", "");
    }
  }
  
  public static void reportError(String paramString, Throwable paramThrowable)
  {
    if (!b.b)
    {
      t.c("Invoke DCAgent.reportError() fail , DataEye SDK need init first!");
      return;
    }
    if (DCConfigParams.getParameterBoolean("DESelf_Key_ForBidReportError", false))
    {
      t.a("DataEye SDK Online Config : forbid report error to webserver ");
      return;
    }
    DCEvent.onEvent("_DESelf_UserDefined_ErrorReport_2", ad.a(paramString, paramThrowable));
    s.a("DCAgent_reportError");
  }
  
  public static void setDebugMode(boolean paramBoolean)
  {
    if (b.b) {
      t.c("Invoke DCAgent.setDebugMode() must before DataEye SDK init");
    }
    t.a = paramBoolean;
    s.a("DCAgent_setDebugMode");
  }
  
  public static void setReportMode(int paramInt)
  {
    if (b.b)
    {
      t.c("Invoke DCAgent.setReportMode() must before DataEye SDK init");
      return;
    }
    if (paramInt == 2) {}
    for (b.i = 2;; b.i = 1)
    {
      s.a("DCAgent_setReportMode");
      return;
    }
  }
  
  public static void setUploadInterval(int paramInt)
  {
    if (b.b)
    {
      t.c("Invoke DCAgent.setUploadInterval() must before DataEye SDK init");
      return;
    }
    if ((paramInt <= 30) || (paramInt >= 43200))
    {
      t.b("Warring: Upload Interval must be greater than 30 seconds and less than 12 hours ");
      return;
    }
    b.n = paramInt * 1000;
    s.a("DCAgent_setUploadInterval");
  }
  
  public static void setVersion(String paramString)
  {
    if (b.b)
    {
      t.c("Invoke DCAgent.setVersion() must before DataEye SDK init");
      return;
    }
    if (!TextUtils.isEmpty(paramString)) {
      b.j = paramString;
    }
    s.a("DCAgent_setVersion");
  }
  
  public static void uploadNow()
  {
    if (!b.b)
    {
      t.b("Invoke DCAgent.uploadNow() Ignored,  DataEye SDK need init first");
      return;
    }
    if (b.b)
    {
      t.b("Invoke DCAgent.uploadNow success,  atï¼š" + System.currentTimeMillis());
      if (!a.c()) {
        break label55;
      }
      b.a(false);
    }
    for (;;)
    {
      s.a("DCAgent_uploadNow");
      return;
      label55:
      b.m();
    }
  }
}
