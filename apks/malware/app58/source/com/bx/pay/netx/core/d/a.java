package com.bx.pay.netx.core.d;

import android.os.SystemClock;
import android.text.TextUtils;
import com.bx.pay.netx.core.ab;
import com.bx.pay.netx.core.ag;
import com.bx.pay.netx.core.ah;
import com.bx.pay.netx.core.ai;
import com.bx.pay.netx.core.e;
import com.bx.pay.netx.core.r;
import com.bx.pay.netx.core.t;
import com.bx.pay.netx.core.u;
import com.bx.pay.netx.core.v;
import com.bx.pay.netx.core.w;
import com.bx.pay.netx.core.z;
import java.io.IOException;
import java.net.ConnectException;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.conn.HttpHostConnectException;

public final class a
  implements r
{
  protected static final boolean a = w.b;
  private static int b = 5000;
  private static int c = 4096;
  private final com.bx.pay.netx.core.c.a d;
  private final String e;
  private e f;
  
  private a(com.bx.pay.netx.core.c.a paramA, int paramInt, String paramString)
  {
    b.a(paramInt);
    this.e = paramString;
    this.d = paramA;
  }
  
  public a(com.bx.pay.netx.core.c.a paramA, String paramString)
  {
    this(paramA, c, paramString);
  }
  
  private String a(HttpResponse paramHttpResponse)
  {
    paramHttpResponse = paramHttpResponse.getFirstHeader("Content-Type");
    int i;
    if (paramHttpResponse != null)
    {
      paramHttpResponse = paramHttpResponse.getValue();
      if (!TextUtils.isEmpty(paramHttpResponse))
      {
        paramHttpResponse = paramHttpResponse.split(";");
        i = 1;
      }
    }
    for (;;)
    {
      if (i >= paramHttpResponse.length) {}
      Object localObject;
      for (paramHttpResponse = null;; paramHttpResponse = localObject[1])
      {
        localObject = paramHttpResponse;
        if (paramHttpResponse == null) {
          localObject = this.e;
        }
        return localObject;
        localObject = paramHttpResponse[i].trim().split("=");
        if ((localObject.length != 2) || (!localObject[0].equals("charset"))) {
          break;
        }
      }
      i += 1;
    }
  }
  
  private void a(String paramString, ab paramAb, v paramV)
  {
    ag localAg = paramAb.q();
    int i = paramAb.p();
    try
    {
      localAg.a(paramV);
      paramAb.a(String.format("%s-retry [timeout=%s]", new Object[] { paramString, Integer.valueOf(i) }));
      this.f.f(paramAb);
      return;
    }
    catch (v paramV)
    {
      paramAb.a(String.format("%s-timeout-giveup [timeout=%s]", new Object[] { paramString, Integer.valueOf(i) }));
      throw paramV;
    }
  }
  
  public final u a(ab paramAb)
  {
    u localU1 = ab.m();
    long l1 = SystemClock.elapsedRealtime();
    if (paramAb.i())
    {
      paramAb.b("perform-discard-cancelled");
      this.f.b(paramAb);
      throw new t(localU1);
    }
    HttpResponse localHttpResponse2 = null;
    Object localObject2 = null;
    Object localObject1 = localObject2;
    HttpResponse localHttpResponse1 = localHttpResponse2;
    for (;;)
    {
      int i;
      try
      {
        paramAb.l();
        localObject1 = localObject2;
        localHttpResponse1 = localHttpResponse2;
        localHttpResponse2 = this.d.a(paramAb);
        localObject1 = localObject2;
        localHttpResponse1 = localHttpResponse2;
        StatusLine localStatusLine = localHttpResponse2.getStatusLine();
        localObject1 = localObject2;
        localHttpResponse1 = localHttpResponse2;
        i = localStatusLine.getStatusCode();
        if (i >= 200) {
          if (i > 299)
          {
            break label608;
            localObject1 = localObject2;
            localHttpResponse1 = localHttpResponse2;
            a(String.valueOf(i), paramAb, new t());
          }
          else
          {
            localObject1 = localObject2;
            localHttpResponse1 = localHttpResponse2;
            byte[] arrayOfByte = paramAb.a(localHttpResponse2, this.f);
            localObject1 = arrayOfByte;
            localHttpResponse1 = localHttpResponse2;
            long l2 = SystemClock.elapsedRealtime() - l1;
            localObject1 = arrayOfByte;
            localHttpResponse1 = localHttpResponse2;
            if (!a)
            {
              localObject1 = arrayOfByte;
              localHttpResponse1 = localHttpResponse2;
              if (l2 <= b) {}
            }
            else
            {
              if (arrayOfByte == null) {
                continue;
              }
              localObject1 = arrayOfByte;
              localHttpResponse1 = localHttpResponse2;
              localObject2 = Integer.valueOf(arrayOfByte.length);
              localObject1 = arrayOfByte;
              localHttpResponse1 = localHttpResponse2;
              w.b("HTTP response for request=<%s> [lifetime=%d], [size=%s], [rc=%d], [retryCount=%s]", new Object[] { paramAb, Long.valueOf(l2), localObject2, Integer.valueOf(localStatusLine.getStatusCode()), Integer.valueOf(paramAb.q().b()) });
            }
            localObject1 = arrayOfByte;
            localHttpResponse1 = localHttpResponse2;
            return new u(i, arrayOfByte, a(localHttpResponse2));
            localObject1 = localObject2;
            localHttpResponse1 = localHttpResponse2;
            throw new IOException();
          }
        }
      }
      catch (SocketTimeoutException localSocketTimeoutException)
      {
        a("socket", paramAb, new ai());
        break;
        localObject2 = "null";
        continue;
      }
      catch (ConnectTimeoutException localConnectTimeoutException)
      {
        a("connection", paramAb, new ai());
      }
      catch (HttpHostConnectException localHttpHostConnectException)
      {
        a("host", paramAb, new ai());
      }
      catch (ConnectException localConnectException)
      {
        a("connection", paramAb, new t());
      }
      catch (SocketException localSocketException)
      {
        a("socket", paramAb, new ai());
      }
      catch (MalformedURLException localMalformedURLException)
      {
        throw new RuntimeException("Bad URL " + paramAb.d(), localMalformedURLException);
      }
      catch (IOException localIOException)
      {
        if (localHttpResponse1 == null) {
          throw new z(localIOException);
        }
        i = localHttpResponse1.getStatusLine().getStatusCode();
        w.c("Unexpected response code %d for %s", new Object[] { Integer.valueOf(i), paramAb.d() });
        u localU2;
        if (localSocketException != null)
        {
          localU2 = new u(i, localSocketException, a(localHttpResponse1));
          if ((i == 401) || (i == 403))
          {
            a("auth", paramAb, new com.bx.pay.netx.core.a(localU2));
            break;
          }
          throw new ah(localU2);
        }
        throw new t(localU2);
      }
      label608:
      if (i != 400) {
        if (i != 408) {}
      }
    }
  }
  
  public final void a(e paramE)
  {
    this.f = paramE;
  }
}
