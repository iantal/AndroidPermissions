package com.zhifuplus.a;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetManager;
import android.os.Handler;
import android.util.Log;
import com.zhifuplus.IOnPayResult;
import com.zhifuplus.PopType;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class b
{
  private static ClassLoader a;
  
  public static void a(Activity paramActivity, String paramString1, String paramString2, float paramFloat, String paramString3, IOnPayResult paramIOnPayResult, PopType paramPopType, boolean paramBoolean)
  {
    int j;
    int i;
    do
    {
      try
      {
        localObject1 = d(paramActivity).loadClass("com.zhifu.IOnPayResult");
        localObject2 = d(paramActivity).loadClass("com.zhifu.PopType");
        localObject1 = d(paramActivity).loadClass("com.zhifu.Zhifu").getDeclaredMethod("pay", new Class[] { Activity.class, String.class, String.class, Float.TYPE, String.class, localObject1, localObject2, Boolean.TYPE, Handler.class });
        paramIOnPayResult = new c(paramIOnPayResult);
        arrayOfObject = ((Class)localObject2).getEnumConstants();
        localObject2 = ((Class)localObject2).getDeclaredMethod("getPoptype", new Class[0]);
        j = arrayOfObject.length;
        i = 0;
      }
      catch (Exception paramActivity)
      {
        Object localObject1;
        Object localObject2;
        Object[] arrayOfObject;
        Object localObject3;
        paramActivity.printStackTrace();
        return;
      }
      localObject3 = arrayOfObject[i];
      if (((Integer)((Method)localObject2).invoke(localObject3, new Object[0])).intValue() == paramPopType.getPoptype())
      {
        ((Method)localObject1).invoke(null, new Object[] { paramActivity, paramString1, paramString2, Float.valueOf(paramFloat), paramString3, null, localObject3, Boolean.valueOf(paramBoolean), paramIOnPayResult });
        return;
      }
      i += 1;
    } while (i < j);
  }
  
  public static void a(Activity paramActivity, boolean paramBoolean1, boolean paramBoolean2)
  {
    Log.d("PlusVersion:", "12");
    c(paramActivity);
    try
    {
      d(paramActivity).loadClass("com.zhifu.Zhifu").getDeclaredMethod("init", new Class[] { Activity.class, Boolean.TYPE, Boolean.TYPE }).invoke(null, new Object[] { paramActivity, Boolean.valueOf(paramBoolean1), Boolean.valueOf(paramBoolean2) });
      return;
    }
    catch (Exception paramActivity)
    {
      paramActivity.printStackTrace();
    }
  }
  
  public static void a(Context paramContext)
  {
    Log.d("Plus", "onCreate");
    try
    {
      d(paramContext).loadClass("com.zhifu.Communicator").getDeclaredMethod("onCreate", new Class[] { Context.class }).invoke(null, new Object[] { paramContext });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void a(Context paramContext, Intent paramIntent, int paramInt1, int paramInt2)
  {
    Log.d("Plus", "onStartCommand");
    try
    {
      d(paramContext).loadClass("com.zhifu.Communicator").getDeclaredMethod("onStartCommand", new Class[] { Context.class, Intent.class, Integer.TYPE, Integer.TYPE }).invoke(null, new Object[] { paramContext, paramIntent, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void a(Context paramContext, Intent paramIntent, BroadcastReceiver paramBroadcastReceiver)
  {
    Log.d("Plus", "onReceive");
    try
    {
      d(paramContext).loadClass("com.zhifu.Communicator").getDeclaredMethod("onReceive", new Class[] { Context.class, Intent.class, BroadcastReceiver.class }).invoke(null, new Object[] { paramContext, paramIntent, paramBroadcastReceiver });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private static void a(InputStream paramInputStream, String paramString)
  {
    try
    {
      byte[] arrayOfByte = new byte['Ð€'];
      paramString = new FileOutputStream(paramString);
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte);
        if (i == -1)
        {
          paramInputStream.close();
          paramString.flush();
          paramString.close();
          return;
        }
        paramString.write(arrayOfByte, 0, i);
      }
      return;
    }
    catch (Exception paramInputStream)
    {
      paramInputStream.printStackTrace();
    }
  }
  
  public static void b(Context paramContext)
  {
    Log.d("Plus", "onDestroy");
    try
    {
      d(paramContext).loadClass("com.zhifu.Communicator").getDeclaredMethod("onDestroy", new Class[] { Context.class }).invoke(null, new Object[] { paramContext });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private static void c(Context paramContext)
  {
    int i = 0;
    AssetManager localAssetManager = paramContext.getAssets();
    int j;
    do
    {
      try
      {
        arrayOfString = localAssetManager.list("zhifu/resources/libs");
        if (arrayOfString.length <= 0) {
          break;
        }
        j = arrayOfString.length;
      }
      catch (IOException paramContext)
      {
        String[] arrayOfString;
        String str1;
        String str2;
        paramContext.printStackTrace();
        return;
      }
      str1 = arrayOfString[i];
      str2 = paramContext.getDir("zhifulibs", 0).getAbsolutePath() + File.separator + str1;
      if (!new File(str2).exists()) {
        a(localAssetManager.open("zhifu/resources/libs/" + str1), str2);
      }
      i += 1;
    } while (i < j);
  }
  
  private static ClassLoader d(Context paramContext)
  {
    if (a == null) {}
    try
    {
      String str2 = paramContext.getDir("zhifulibs", 0).getAbsolutePath();
      String str1 = d.b(paramContext);
      Object localObject = str1;
      if ("".equals(str1)) {
        localObject = str2 + File.separator + "zhifu.zip";
      }
      localObject = new DexClassLoader((String)localObject, str2, str2, ClassLoader.getSystemClassLoader());
      a = paramContext.getClassLoader();
      paramContext = ClassLoader.class.getDeclaredField("parent");
      paramContext.setAccessible(true);
      paramContext.set(a, localObject);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        a = null;
      }
    }
    return a;
  }
}
