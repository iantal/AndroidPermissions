package org.cocos2dx.chameleon;

import android.app.Activity;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Proxy;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONObject;

public class c
  implements h
{
  c(GameProxy.4 param4, f.a paramA, String paramString) {}
  
  public static String a(Context paramContext, String paramString1, String paramString2, JSONObject paramJSONObject)
  {
    String str = "";
    paramString1 = new HttpPost(paramString1);
    paramString1.addHeader("messagename", paramString2);
    if (a.a != null) {
      paramString1.addHeader("version", a.a);
    }
    if (a.b != null) {
      paramString1.addHeader("imsi", a.b);
    }
    if (a.c != null) {
      paramString1.addHeader("imei", a.c);
    }
    if (a.d != null) {
      paramString1.addHeader("token", a.d);
    }
    paramString1.setEntity(new StringEntity(paramJSONObject.toString(), "UTF-8"));
    paramString2 = a(paramContext).execute(paramString1);
    paramContext = str;
    if (paramString2.getStatusLine().getStatusCode() == 200)
    {
      paramString1 = new StringBuilder();
      paramString2 = new BufferedReader(new InputStreamReader(paramString2.getEntity().getContent()));
      for (paramContext = paramString2.readLine(); paramContext != null; paramContext = paramString2.readLine()) {
        paramString1.append(paramContext);
      }
      paramContext = paramString1.toString();
    }
    return paramContext;
  }
  
  public static String a(File paramFile)
  {
    MessageDigest localMessageDigest;
    try
    {
      paramFile = new FileInputStream(paramFile.getAbsolutePath());
      byte[] arrayOfByte = new byte['Ȁ'];
      localMessageDigest = MessageDigest.getInstance("MD5");
      for (;;)
      {
        int i = paramFile.read(arrayOfByte);
        if (i <= 0) {
          break;
        }
        localMessageDigest.update(arrayOfByte, 0, i);
      }
      paramFile.close();
    }
    catch (Exception paramFile)
    {
      paramFile.printStackTrace();
      return null;
    }
    paramFile = a(localMessageDigest.digest());
    return paramFile;
  }
  
  public static String a(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer(paramArrayOfByte.length << 1);
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      int j = paramArrayOfByte[i];
      localStringBuffer.append("0123456789ABCDEF".charAt(j >> 4 & 0xF)).append("0123456789ABCDEF".charAt(j & 0xF));
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  public static HttpClient a(Context paramContext)
  {
    Object localObject = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout((HttpParams)localObject, 15000);
    HttpConnectionParams.setSoTimeout((HttpParams)localObject, 25000);
    localObject = new DefaultHttpClient((HttpParams)localObject);
    if (b(paramContext)) {
      ((DefaultHttpClient)localObject).getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort(), "http"));
    }
    return localObject;
  }
  
  public static boolean a(Context paramContext, String paramString1, String paramString2)
  {
    paramString2 = paramContext.openFileOutput(paramString2, 0);
    paramString1 = new HttpGet(paramString1);
    paramContext = a(paramContext).execute(paramString1);
    if (paramContext.getStatusLine().getStatusCode() == 200)
    {
      long l3 = paramContext.getEntity().getContentLength();
      long l1 = 0L;
      paramContext = paramContext.getEntity().getContent();
      long l2 = l1;
      if (paramContext != null)
      {
        paramString1 = new byte['Ѐ'];
        for (;;)
        {
          int i = paramContext.read(paramString1);
          l2 = l1;
          if (i == -1) {
            break;
          }
          paramString2.write(paramString1, 0, i);
          l1 += i;
        }
      }
      paramString2.flush();
      if (paramString2 != null) {
        paramString2.close();
      }
      if (paramContext != null) {
        paramContext.close();
      }
      return l2 == l3;
    }
    return false;
  }
  
  public static boolean b(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.getType() == 1)) {
        return false;
      }
      paramContext = Proxy.getDefaultHost();
      if (paramContext == null) {
        return false;
      }
      boolean bool = paramContext.equals("");
      if (bool) {
        return false;
      }
    }
    catch (Exception paramContext)
    {
      return false;
    }
    return true;
  }
  
  static boolean b(File paramFile)
  {
    try
    {
      ZipFile localZipFile = new ZipFile(paramFile);
      try
      {
        localZipFile.close();
        return true;
      }
      catch (IOException localIOException1)
      {
        Log.w("MultiDex", "Failed to close zip file: " + paramFile.getAbsolutePath());
      }
    }
    catch (ZipException localZipException)
    {
      for (;;)
      {
        Log.w("MultiDex", "File " + paramFile.getAbsolutePath() + " is not a valid zip file.", localZipException);
      }
    }
    catch (IOException localIOException2)
    {
      for (;;)
      {
        Log.w("MultiDex", "Got an IOException trying to open zip file: " + paramFile.getAbsolutePath(), localIOException2);
      }
    }
    return false;
  }
  
  public void a(String paramString)
  {
    String str = paramString;
    if ("has".equals(paramString)) {
      str = this.a.b;
    }
    paramString = new File(this.c.b.getFilesDir().getAbsolutePath() + File.separator + str);
    this.c.b.runOnUiThread(new d(this, paramString));
  }
  
  public void b(String paramString)
  {
    Bundle localBundle = new Bundle();
    Message localMessage = new Message();
    localBundle.putString("ret", "0");
    localBundle.putString("message", paramString);
    localMessage.setData(localBundle);
    this.c.d.sendMessage(localMessage);
  }
}
