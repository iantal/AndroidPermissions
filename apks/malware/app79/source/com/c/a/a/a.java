package com.c.a.a;

import com.c.a.d.b;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

public class a
{
  public static String a(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = b(a(a(paramString1.getBytes()), paramString2.getBytes()));
      return paramString1;
    }
    catch (b paramString1) {}
    return paramString2;
  }
  
  private static void a(StringBuffer paramStringBuffer, byte paramByte)
  {
    paramStringBuffer.append("0123456789ABCDEFGHIJKLNMOPQRSTUVWXYZ~!@".charAt(paramByte >> 4 & 0xF)).append("0123456789ABCDEFGHIJKLNMOPQRSTUVWXYZ~!@".charAt(paramByte & 0xF));
  }
  
  private static byte[] a(String paramString)
  {
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    while (i < j)
    {
      arrayOfByte[i] = Integer.valueOf(paramString.substring(i * 2, i * 2 + 2), 16).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  /* Error */
  private static byte[] a(byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: ldc 63
    //   2: invokestatic 69	javax/crypto/KeyGenerator:getInstance	(Ljava/lang/String;)Ljavax/crypto/KeyGenerator;
    //   5: astore_2
    //   6: getstatic 75	android/os/Build$VERSION:SDK_INT	I
    //   9: bipush 17
    //   11: if_icmplt +34 -> 45
    //   14: ldc 77
    //   16: ldc 79
    //   18: invokestatic 84	java/security/SecureRandom:getInstance	(Ljava/lang/String;Ljava/lang/String;)Ljava/security/SecureRandom;
    //   21: astore_1
    //   22: aload_1
    //   23: aload_0
    //   24: invokevirtual 88	java/security/SecureRandom:setSeed	([B)V
    //   27: aload_2
    //   28: sipush 128
    //   31: aload_1
    //   32: invokevirtual 92	javax/crypto/KeyGenerator:init	(ILjava/security/SecureRandom;)V
    //   35: aload_2
    //   36: invokevirtual 96	javax/crypto/KeyGenerator:generateKey	()Ljavax/crypto/SecretKey;
    //   39: invokeinterface 101 1 0
    //   44: areturn
    //   45: ldc 77
    //   47: invokestatic 104	java/security/SecureRandom:getInstance	(Ljava/lang/String;)Ljava/security/SecureRandom;
    //   50: astore_1
    //   51: goto -29 -> 22
    //   54: astore_0
    //   55: new 8	com/c/a/d/b
    //   58: dup
    //   59: aload_0
    //   60: invokevirtual 108	java/security/NoSuchAlgorithmException:getMessage	()Ljava/lang/String;
    //   63: sipush 5950
    //   66: invokespecial 112	com/c/a/d/b:<init>	(Ljava/lang/String;I)V
    //   69: athrow
    //   70: astore_0
    //   71: new 8	com/c/a/d/b
    //   74: dup
    //   75: aload_0
    //   76: invokevirtual 113	java/security/NoSuchProviderException:getMessage	()Ljava/lang/String;
    //   79: sipush 5981
    //   82: invokespecial 112	com/c/a/d/b:<init>	(Ljava/lang/String;I)V
    //   85: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	86	0	paramArrayOfByte	byte[]
    //   21	30	1	localSecureRandom	java.security.SecureRandom
    //   5	31	2	localKeyGenerator	javax.crypto.KeyGenerator
    // Exception table:
    //   from	to	target	type
    //   0	22	54	java/security/NoSuchAlgorithmException
    //   22	45	54	java/security/NoSuchAlgorithmException
    //   45	51	54	java/security/NoSuchAlgorithmException
    //   0	22	70	java/security/NoSuchProviderException
    //   22	45	70	java/security/NoSuchProviderException
    //   45	51	70	java/security/NoSuchProviderException
  }
  
  private static byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
    try
    {
      Cipher localCipher = Cipher.getInstance("AES");
      localCipher.init(1, paramArrayOfByte1);
      paramArrayOfByte1 = localCipher.doFinal(paramArrayOfByte2);
      return paramArrayOfByte1;
    }
    catch (NoSuchPaddingException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5940);
    }
    catch (NoSuchAlgorithmException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5941);
    }
    catch (InvalidKeyException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5942);
    }
    catch (IllegalBlockSizeException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5943);
    }
    catch (BadPaddingException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5944);
    }
  }
  
  public static String b(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = new String(b(a(paramString1.getBytes()), a(paramString2)));
      return paramString1;
    }
    catch (b paramString1) {}
    return paramString2;
  }
  
  private static String b(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer(paramArrayOfByte.length * 2);
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      a(localStringBuffer, paramArrayOfByte[i]);
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  private static byte[] b(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
    try
    {
      Cipher localCipher = Cipher.getInstance("AES");
      localCipher.init(2, paramArrayOfByte1);
      paramArrayOfByte1 = localCipher.doFinal(paramArrayOfByte2);
      return paramArrayOfByte1;
    }
    catch (NoSuchAlgorithmException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5946);
    }
    catch (NoSuchPaddingException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5945);
    }
    catch (InvalidKeyException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5947);
    }
    catch (IllegalBlockSizeException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5948);
    }
    catch (BadPaddingException paramArrayOfByte1)
    {
      throw new b(paramArrayOfByte1.getMessage(), 5949);
    }
  }
}
