package com.tencent.bugly.crashreport.biz;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Application;
import android.app.Instrumentation;
import android.content.Context;
import android.os.Build.VERSION;
import com.tencent.bugly.a.ao;
import com.tencent.bugly.a.b;
import com.tencent.bugly.a.bf;

public class c
{
  private boolean a;
  private boolean b;
  
  public c() {}
  
  private void a(Activity paramActivity)
  {
    f.a().a(paramActivity);
  }
  
  private boolean a()
  {
    try
    {
      Object localObject = b.a("android.app.ActivityThread", "currentActivityThread", null, (Class[])null, (Object[])null);
      if (localObject == null) {
        throw new IllegalStateException("Failed to get CurrentActivityThread.");
      }
      Instrumentation localInstrumentation = (Instrumentation)b.a(localObject.getClass(), "mInstrumentation", localObject);
      if (localInstrumentation == null) {
        throw new IllegalStateException("Failed to get Instrumentation instance.");
      }
      if (localInstrumentation.getClass().equals(c.class)) {
        return true;
      }
      if (!localInstrumentation.getClass().equals(Instrumentation.class)) {
        throw new IllegalStateException("Not original Instrumentation instance, give up monitoring.");
      }
      b.a(localObject.getClass(), "mInstrumentation", new e(this, localInstrumentation), localObject);
      bf.c("[session] registed by instrument", new Object[0]);
      return true;
    }
    catch (Exception localException) {}
    return false;
  }
  
  @TargetApi(14)
  private boolean a(Context paramContext)
  {
    if (Build.VERSION.SDK_INT < 14) {}
    while (!(paramContext.getApplicationContext() instanceof Application)) {
      return false;
    }
    paramContext = (Application)paramContext.getApplicationContext();
    try
    {
      paramContext.registerActivityLifecycleCallbacks(new d(this));
      bool = true;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        boolean bool = false;
      }
    }
    bf.c("[session] registed by api", new Object[0]);
    return bool;
  }
  
  private void b(Activity paramActivity)
  {
    f.a().a(paramActivity);
  }
  
  public void a(Context paramContext, ao paramAo)
  {
    if (this.a) {}
    do
    {
      return;
      this.a = true;
      this.b = a(paramContext);
      if (!this.b) {
        this.b = a();
      }
    } while (this.b);
    bf.c("[session] registed by api", new Object[0]);
  }
}
