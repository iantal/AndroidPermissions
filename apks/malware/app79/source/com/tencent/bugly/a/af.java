package com.tencent.bugly.a;

import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

public final class af
  extends am
{
  static byte[] k;
  static Map<String, String> l;
  public short a = 0;
  public byte b = 0;
  public int c = 0;
  public int d = 0;
  public String e = null;
  public String f = null;
  public byte[] g;
  public int h = 0;
  public Map<String, String> i;
  public Map<String, String> j;
  
  static
  {
    if (!af.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      m = bool;
      k = null;
      l = null;
      return;
    }
  }
  
  public af() {}
  
  public void a(aj paramAj)
  {
    try
    {
      this.a = paramAj.a(this.a, 1, true);
      this.b = paramAj.a(this.b, 2, true);
      this.c = paramAj.a(this.c, 3, true);
      this.d = paramAj.a(this.d, 4, true);
      this.e = paramAj.a(5, true);
      this.f = paramAj.a(6, true);
      if (k == null) {
        k = new byte[] { 0 };
      }
      this.g = ((byte[])paramAj.a(k, 7, true));
      this.h = paramAj.a(this.h, 8, true);
      if (l == null)
      {
        l = new HashMap();
        l.put("", "");
      }
      this.i = ((Map)paramAj.a(l, 9, true));
      if (l == null)
      {
        l = new HashMap();
        l.put("", "");
      }
      this.j = ((Map)paramAj.a(l, 10, true));
      return;
    }
    catch (Exception paramAj)
    {
      paramAj.printStackTrace();
      System.out.println("RequestPacket decode error " + ae.a(this.g));
      throw new RuntimeException(paramAj);
    }
  }
  
  public void a(al paramAl)
  {
    paramAl.a(this.a, 1);
    paramAl.b(this.b, 2);
    paramAl.a(this.c, 3);
    paramAl.a(this.d, 4);
    paramAl.a(this.e, 5);
    paramAl.a(this.f, 6);
    paramAl.a(this.g, 7);
    paramAl.a(this.h, 8);
    paramAl.a(this.i, 9);
    paramAl.a(this.j, 10);
  }
  
  public void a(StringBuilder paramStringBuilder, int paramInt)
  {
    paramStringBuilder = new ah(paramStringBuilder, paramInt);
    paramStringBuilder.a(this.a, "iVersion");
    paramStringBuilder.a(this.b, "cPacketType");
    paramStringBuilder.a(this.c, "iMessageType");
    paramStringBuilder.a(this.d, "iRequestId");
    paramStringBuilder.a(this.e, "sServantName");
    paramStringBuilder.a(this.f, "sFuncName");
    paramStringBuilder.a(this.g, "sBuffer");
    paramStringBuilder.a(this.h, "iTimeout");
    paramStringBuilder.a(this.i, "context");
    paramStringBuilder.a(this.j, "status");
  }
  
  public Object clone()
  {
    Object localObject1 = null;
    try
    {
      Object localObject2 = super.clone();
      localObject1 = localObject2;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      while (m) {}
      throw new AssertionError();
    }
    return localObject1;
  }
  
  public boolean equals(Object paramObject)
  {
    paramObject = (af)paramObject;
    return (an.a(1, paramObject.a)) && (an.a(1, paramObject.b)) && (an.a(1, paramObject.c)) && (an.a(1, paramObject.d)) && (an.a(Integer.valueOf(1), paramObject.e)) && (an.a(Integer.valueOf(1), paramObject.f)) && (an.a(Integer.valueOf(1), paramObject.g)) && (an.a(1, paramObject.h)) && (an.a(Integer.valueOf(1), paramObject.i)) && (an.a(Integer.valueOf(1), paramObject.j));
  }
}
