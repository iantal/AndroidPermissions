package com.unicom.wounipaysms.tools;

import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class StringUtil
{
  public static final String LOG_TAG = "StringUtil";
  public static final int TYPE_REMOVE_SPACE_ALL = 0;
  public static final int TYPE_REMOVE_SPACE_BOTH = 3;
  public static final int TYPE_REMOVE_SPACE_LEFT = 1;
  public static final int TYPE_REMOVE_SPACE_RIGHT = 2;
  private static final String[] nums = { "一", "二", "三", "四", "五", "六", "七", "八", "九", "十" };
  private static final String[] units = { "", "十", "百", "千", "万", "十", "百", "千", "亿" };
  
  private StringUtil() {}
  
  public static String bytesToString(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return null;
    }
    StringBuffer localStringBuffer = new StringBuffer("");
    int j = paramArrayOfByte.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return localStringBuffer.toString();
      }
      localStringBuffer.append((char)(paramArrayOfByte[i] & 0xFF));
      i += 1;
    }
  }
  
  public static int dataFromString(String paramString)
  {
    if (paramString == null) {}
    while (paramString == null) {
      return 0;
    }
    return Integer.valueOf(paramString).intValue();
  }
  
  public static SpannableString getKeyWordSpannableString(String paramString1, String paramString2, int paramInt, SpannableString paramSpannableString)
  {
    SpannableString localSpannableString = paramSpannableString;
    if (paramSpannableString == null) {
      if (isEmptyString(paramString1)) {
        paramString1 = null;
      }
    }
    do
    {
      return paramString1;
      localSpannableString = new SpannableString(paramString1);
      paramString1 = localSpannableString;
    } while (isEmptyString(paramString2));
    paramString2 = Pattern.compile(paramString2).matcher(localSpannableString);
    for (;;)
    {
      paramString1 = localSpannableString;
      if (!paramString2.find()) {
        break;
      }
      int i = paramString2.start();
      int j = paramString2.end();
      localSpannableString.setSpan(new ForegroundColorSpan(paramInt), i, j, 33);
    }
  }
  
  public static String getStringNotNull(String paramString)
  {
    if (paramString != null) {
      return paramString;
    }
    return "";
  }
  
  public static boolean isEmptyString(String paramString)
  {
    return (paramString == null) || (paramString.length() == 0);
  }
  
  public static boolean isSameString(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      return paramString1.equals(paramString2);
    }
    return (paramString1 == null) && (paramString2 == null);
  }
  
  public static String mathNum2ChineseNum(int paramInt, boolean paramBoolean)
  {
    Object localObject1 = "";
    int i = paramInt;
    if (paramInt < 0)
    {
      localObject1 = "负";
      i = Math.abs(paramInt);
    }
    paramInt = String.valueOf(i).length() - 1;
    Object localObject2;
    if (paramInt < 0)
    {
      localObject2 = localObject1;
      if (((String)localObject1).endsWith("零")) {
        localObject2 = ((String)localObject1).substring(0, ((String)localObject1).length() - 1);
      }
      localObject1 = localObject2;
      if (i > 9)
      {
        localObject1 = localObject2;
        if (i < 20)
        {
          localObject1 = localObject2;
          if (!paramBoolean) {
            localObject1 = ((String)localObject2).substring(1, ((String)localObject2).length());
          }
        }
      }
      return localObject1;
    }
    int j = (int)(i / Math.pow(10.0D, paramInt));
    if (j % 10 != 0)
    {
      localObject2 = String.valueOf(j);
      localObject2 = ((String)localObject2).substring(((String)localObject2).length() - 1, ((String)localObject2).length());
      localObject2 = new StringBuilder(String.valueOf(localObject1)).append(nums[(Integer.parseInt(localObject2) - 1)]).toString() + units[paramInt];
    }
    for (;;)
    {
      paramInt -= 1;
      localObject1 = localObject2;
      break;
      localObject2 = localObject1;
      if (!((String)localObject1).endsWith("零")) {
        localObject2 = localObject1 + "零";
      }
    }
  }
  
  public static String removeSpace(String paramString)
  {
    return removeSpace(paramString, 3);
  }
  
  public static String removeSpace(String paramString, int paramInt)
  {
    if (isEmptyString(paramString)) {
      paramString = "";
    }
    String str;
    int i;
    label80:
    label92:
    do
    {
      return paramString;
      switch (paramInt)
      {
      default: 
        return paramString;
      case 0: 
        return paramString.replace(" ", "");
      }
      if (3 != paramInt)
      {
        str = paramString;
        if (1 != paramInt) {}
      }
      else
      {
        int j = paramString.length();
        i = 0;
        if (i < j) {
          break label131;
        }
        if (i >= j) {
          break label148;
        }
        str = paramString.substring(i);
      }
      if (3 == paramInt) {
        break;
      }
      paramString = str;
    } while (2 != paramInt);
    paramInt = str.length() - 1;
    for (;;)
    {
      if (paramInt < 0) {}
      label131:
      label148:
      while (str.charAt(paramInt) != ' ')
      {
        if (paramInt < 0) {
          break label173;
        }
        return str.substring(0, paramInt + 1);
        if (paramString.charAt(i) != ' ') {
          break label80;
        }
        i += 1;
        break;
        str = "";
        break label92;
      }
      paramInt -= 1;
    }
    label173:
    return "";
  }
  
  public static String[] splitString(String paramString1, String paramString2)
  {
    int j = 0;
    ArrayList localArrayList = new ArrayList();
    if ((isEmptyString(paramString1)) || (isEmptyString(paramString2))) {
      return (String[])localArrayList.toArray(new String[1]);
    }
    int i = paramString1.indexOf(paramString2, 0);
    if (i >= 0) {
      if (i < 0)
      {
        if (j > paramString1.length() - 1) {
          break label139;
        }
        localArrayList.add(paramString1.substring(j));
      }
    }
    for (;;)
    {
      return (String[])localArrayList.toArray(new String[1]);
      if (i > j) {
        localArrayList.add(paramString1.substring(j, i));
      }
      for (;;)
      {
        j = i + 1;
        i = paramString1.indexOf(paramString2, j);
        break;
        localArrayList.add("");
      }
      label139:
      localArrayList.add("");
      continue;
      localArrayList.add(paramString1);
    }
  }
  
  public static boolean startsWith(String paramString1, String paramString2)
  {
    if ((isEmptyString(paramString1)) || (isEmptyString(paramString2))) {
      return false;
    }
    return paramString1.startsWith(paramString2);
  }
  
  public static byte[] toLH(int paramInt)
  {
    return new byte[] { (byte)(paramInt & 0xFF), (byte)(paramInt >> 8 & 0xFF), (byte)(paramInt >> 16 & 0xFF), (byte)(paramInt >> 24 & 0xFF) };
  }
  
  public static String trimContentBetweenBrackets(String paramString)
  {
    if (isEmptyString(paramString)) {
      return "";
    }
    return paramString.replaceAll("\\(.*\\)", "");
  }
}
