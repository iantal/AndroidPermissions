package com.unicom.wounipaysms.tools;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.NinePatch;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.GradientDrawable.Orientation;
import android.graphics.drawable.NinePatchDrawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.IBinder;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.webkit.WebSettings;
import android.webkit.WebView;
import com.unicom.wounipaysms.crypt.CryptUtil;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Enumeration;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PhoneInfoTools
{
  private static final String TAG = "PhoneInfoTools";
  static Pattern ipPattern = Pattern.compile("((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d)(\\.((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d)){3}");
  private static final float round = 10.0F;
  
  public PhoneInfoTools() {}
  
  public static void FullScreenCornerTop(View paramView)
  {
    GradientDrawable localGradientDrawable = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { Color.rgb(24, 162, 255), Color.rgb(0, 125, 231) });
    localGradientDrawable.setGradientType(0);
    paramView.setBackgroundDrawable(localGradientDrawable);
  }
  
  public static GradientDrawable GetChangeBackground(int paramInt1, int paramInt2, float paramFloat)
  {
    float f = paramFloat;
    if (paramFloat == 0.0F) {
      f = 10.0F;
    }
    GradientDrawable localGradientDrawable = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { paramInt1, paramInt2 });
    localGradientDrawable.setGradientType(0);
    localGradientDrawable.setCornerRadii(new float[] { f, f, f, f, 0.0F, 0.0F, 0.0F, 0.0F });
    return localGradientDrawable;
  }
  
  public static GradientDrawable GetCorner(float paramFloat, int paramInt)
  {
    float f = paramFloat;
    if (paramFloat == 0.0F) {
      f = 10.0F;
    }
    GradientDrawable localGradientDrawable = new GradientDrawable();
    localGradientDrawable.setCornerRadii(new float[] { f + 2.0F, f + 2.0F, f + 2.0F, f + 2.0F, f, f, f, f });
    localGradientDrawable.setColor(paramInt);
    return localGradientDrawable;
  }
  
  public static GradientDrawable GetCornerWithLine(int paramInt1, int paramInt2, float paramFloat, int paramInt3)
  {
    float f = paramFloat;
    if (paramFloat == 0.0F) {
      f = 10.0F;
    }
    GradientDrawable localGradientDrawable = new GradientDrawable();
    localGradientDrawable.setCornerRadii(new float[] { f + 2.0F, f + 2.0F, f + 2.0F, f + 2.0F, f, f, f, f });
    localGradientDrawable.setColor(paramInt3);
    localGradientDrawable.setStroke(paramInt1, paramInt2);
    return localGradientDrawable;
  }
  
  public static String GetHostIP()
  {
    try
    {
      localEnumeration1 = NetworkInterface.getNetworkInterfaces();
      bool = localEnumeration1.hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Enumeration localEnumeration1;
        boolean bool;
        label18:
        Enumeration localEnumeration2;
        Object localObject;
        localException.printStackTrace();
      }
    }
    return "";
    localEnumeration2 = ((NetworkInterface)localEnumeration1.nextElement()).getInetAddresses();
    do
    {
      do
      {
        if (!localEnumeration2.hasMoreElements()) {
          break;
        }
        localObject = (InetAddress)localEnumeration2.nextElement();
      } while (((InetAddress)localObject).isLoopbackAddress());
      localObject = ((InetAddress)localObject).getHostAddress().toString();
      bool = ipPattern.matcher((CharSequence)localObject).matches();
    } while (!bool);
    return localObject;
  }
  
  public static String Md5(String paramString)
  {
    for (;;)
    {
      int i;
      try
      {
        localObject = MessageDigest.getInstance("MD5");
        ((MessageDigest)localObject).update(paramString.getBytes());
        paramString = ((MessageDigest)localObject).digest();
        localObject = new StringBuffer("");
        i = 0;
        if (i < paramString.length) {
          break label86;
        }
        return ((StringBuffer)localObject).toString();
      }
      catch (NoSuchAlgorithmException paramString)
      {
        Object localObject;
        paramString.printStackTrace();
        return "";
      }
      if (j < 16) {
        ((StringBuffer)localObject).append("0");
      }
      ((StringBuffer)localObject).append(Integer.toHexString(j));
      i += 1;
      continue;
      label86:
      int k = paramString[i];
      int j = k;
      if (k < 0) {
        j = k + 256;
      }
    }
  }
  
  public static String getAPN(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext != null)
    {
      String str = paramContext.getExtraInfo();
      paramContext = str;
      if (str != null) {}
    }
    else
    {
      paramContext = "手机未取到网络信息";
    }
    return paramContext;
  }
  
  public static final String getAppid(Context paramContext)
  {
    try
    {
      paramContext = getMetaInfo(paramContext, "AppId").toString();
      paramContext = paramContext.substring(6, paramContext.length());
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static final String getCpid(Context paramContext)
  {
    try
    {
      paramContext = getMetaInfo(paramContext, "cpId").toString();
      paramContext = paramContext.substring(5, paramContext.length());
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static String getCurrentAPN(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext != null)
    {
      if (paramContext.getType() == 1) {
        return "wifi";
      }
      if (paramContext.getType() == 0)
      {
        switch (paramContext.getSubtype())
        {
        default: 
          return "unknow";
        case 3: 
          return "UMTS";
        case 5: 
        case 6: 
        case 8: 
          return "EVDO";
        case 4: 
          return "CDMA";
        case 1: 
          return "GPRS";
        case 2: 
          return "EDGE";
        case 7: 
          return "1xRTT";
        case 10: 
          return "HSPA";
        case 9: 
          return "HSUPA";
        }
        return "IDEN";
      }
      return "unknow";
    }
    return "无网络";
  }
  
  public static String getDeviceMac(Context paramContext)
  {
    return ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
  }
  
  public static Drawable getDrawable(Bitmap paramBitmap)
  {
    return new BitmapDrawable(paramBitmap);
  }
  
  public static Drawable getDrawbleFromAssets(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      paramContext = Drawable.createFromStream(paramContext.getAssets().open(paramString1), paramString2);
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static Drawable getDrawbleFromRes(Context paramContext, String paramString)
  {
    Resources localResources = paramContext.getResources();
    return localResources.getDrawable(localResources.getIdentifier(paramString, "drawable", paramContext.getPackageName()));
  }
  
  public static final String getFidVac(Context paramContext)
  {
    try
    {
      paramContext = new BufferedReader(new InputStreamReader(paramContext.getAssets().open("premessable.txt")));
      String str = paramContext.readLine();
      paramContext.close();
      return str;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static final String getIMEI(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    paramContext = str;
    if (str == null) {
      paramContext = "";
    }
    return paramContext;
  }
  
  public static final String getIMSI(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    paramContext = str;
    if (str == null) {
      paramContext = "";
    }
    return paramContext;
  }
  
  public static String getImsiStr(Context paramContext)
  {
    Object localObject2 = getSubscriberId2(0);
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = "";
    }
    localObject2 = localObject1;
    if (((String)localObject1).equals("")) {
      localObject2 = getSubscriberId2(1);
    }
    localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = "";
    }
    localObject2 = localObject1;
    if (((String)localObject1).equals("")) {
      localObject2 = getIMSI(paramContext);
    }
    return localObject2;
  }
  
  public static final String getMSISDN(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
    paramContext = str;
    if (str == null) {
      paramContext = "";
    }
    return paramContext;
  }
  
  public static final Object getMetaInfo(Context paramContext, String paramString)
  {
    paramString = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.get(paramString);
    paramContext = paramString;
    if (paramString == null) {
      paramContext = "";
    }
    return paramContext;
  }
  
  public static NinePatchDrawable getNinePatchDrawable(Bitmap paramBitmap)
  {
    byte[] arrayOfByte = paramBitmap.getNinePatchChunk();
    if (NinePatch.isNinePatchChunk(arrayOfByte)) {
      return new NinePatchDrawable(paramBitmap, arrayOfByte, new Rect(), null);
    }
    return null;
  }
  
  public static NinePatchDrawable getNinePatchDrawbleFromAssets(Context paramContext, String paramString)
  {
    try
    {
      paramContext = BitmapFactory.decodeStream(paramContext.getAssets().open(paramString));
      paramString = paramContext.getNinePatchChunk();
      if (NinePatch.isNinePatchChunk(paramString))
      {
        paramContext = new NinePatchDrawable(paramContext, paramString, new Rect(), null);
        return paramContext;
      }
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static final String getPayPhoneValue(Context paramContext, String paramString)
  {
    paramString = getStringInSP(paramContext.getApplicationContext().getSharedPreferences("WoUniPayUser", 0), CryptUtil.encryptBy3DesAndBase64(paramString, MultimodeConfig.SMS_ENCODE_KEY), "");
    paramContext = paramString;
    if (!TextUtils.isEmpty(paramString)) {
      paramContext = CryptUtil.decryptBy3DesAndBase64(paramString, MultimodeConfig.SMS_ENCODE_KEY);
    }
    return paramContext;
  }
  
  public static final String getPhoneNum(Context paramContext)
  {
    try
    {
      Object localObject = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
      paramContext = (Context)localObject;
      if (((String)localObject).length() > 11) {
        paramContext = ((String)localObject).substring(((String)localObject).length() - 11);
      }
      localObject = paramContext;
      if (paramContext == null) {
        localObject = "";
      }
      return localObject;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static final String getSdkVersion()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static int getSecondSimState()
  {
    int j = getSimState("gsm.sim.state_2");
    int i = j;
    if (j == 0) {
      i = getSimState("gsm.sim.state_1");
    }
    return i;
  }
  
  private static int getSimState(String paramString)
  {
    try
    {
      Object localObject = Class.forName("android.os.SystemProperties").getDeclaredMethod("get", new Class[] { String.class });
      ((Method)localObject).setAccessible(true);
      localObject = (String)((Method)localObject).invoke(null, new Object[] { paramString });
      paramString = (String)localObject;
      if (localObject != null) {
        paramString = localObject.split(",")[0];
      }
      if ("ABSENT".equals(paramString)) {
        return 1;
      }
      if ("PIN_REQUIRED".equals(paramString)) {
        return 2;
      }
      if ("PUK_REQUIRED".equals(paramString)) {
        return 3;
      }
      if ("NETWORK_LOCKED".equals(paramString)) {
        return 4;
      }
      boolean bool = "READY".equals(paramString);
      if (bool) {
        return 5;
      }
      return 0;
    }
    catch (Exception paramString) {}
    return 0;
  }
  
  public static int getStatusBarHeight(Context paramContext)
  {
    try
    {
      Class localClass = Class.forName("com.android.internal.R$dimen");
      Object localObject = localClass.newInstance();
      int i = Integer.parseInt(localClass.getField("status_bar_height").get(localObject).toString());
      i = paramContext.getApplicationContext().getResources().getDimensionPixelSize(i);
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
  
  public static String getStringInSP(SharedPreferences paramSharedPreferences, String paramString1, String paramString2)
  {
    if (paramSharedPreferences == null)
    {
      Log.w("PhoneInfoTools", "getStringInSP input sp is null");
      return paramString2;
    }
    if (paramString1 == null)
    {
      Log.w("PhoneInfoTools", "getStringInSP input strKey is null");
      return paramString2;
    }
    return paramSharedPreferences.getString(paramString1, paramString2);
  }
  
  public static String getSubscriberId(int paramInt)
  {
    Object localObject1;
    if (paramInt == 1) {
      localObject1 = "iphonesubinfo2";
    }
    try
    {
      for (;;)
      {
        Method localMethod = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
        localMethod.setAccessible(true);
        localObject2 = localMethod.invoke(null, new Object[] { localObject1 });
        localObject1 = localObject2;
        if (localObject2 == null)
        {
          localObject1 = localObject2;
          if (paramInt == 1) {
            localObject1 = localMethod.invoke(null, new Object[] { "iphonesubinfo1" });
          }
        }
        if (localObject1 != null) {
          break;
        }
        return null;
        localObject1 = "iphonesubinfo";
      }
      Object localObject2 = Class.forName("com.android.internal.telephony.IPhoneSubInfo$Stub").getDeclaredMethod("asInterface", new Class[] { IBinder.class });
      ((Method)localObject2).setAccessible(true);
      localObject1 = ((Method)localObject2).invoke(null, new Object[] { localObject1 });
      localObject1 = (String)localObject1.getClass().getMethod("getSubscriberId", new Class[0]).invoke(localObject1, new Object[0]);
      return localObject1;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public static String getSubscriberId2(int paramInt)
  {
    Object localObject1;
    if (paramInt == 1) {
      localObject1 = "iphonesubinfo2";
    }
    try
    {
      for (;;)
      {
        Method localMethod = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
        localMethod.setAccessible(true);
        localObject2 = localMethod.invoke(null, new Object[] { localObject1 });
        localObject1 = localObject2;
        if (localObject2 == null)
        {
          localObject1 = localObject2;
          if (paramInt == 1) {
            localObject1 = localMethod.invoke(null, new Object[] { "iphonesubinfo1" });
          }
        }
        if (localObject1 != null) {
          break;
        }
        return null;
        localObject1 = "iphonesubinfo";
      }
      Object localObject2 = Class.forName("com.android.internal.telephony.IPhoneSubInfo$Stub").getDeclaredMethod("asInterface", new Class[] { IBinder.class });
      ((Method)localObject2).setAccessible(true);
      localObject1 = ((Method)localObject2).invoke(null, new Object[] { localObject1 });
      localObject1 = (String)localObject1.getClass().getMethod("getSubscriberId", new Class[0]).invoke(localObject1, new Object[0]);
      return localObject1;
    }
    catch (Exception localException) {}
    return "";
  }
  
  public static final String getUA(Context paramContext)
  {
    return new WebView(paramContext).getSettings().getUserAgentString();
  }
  
  public static final int getVersionCode(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getPackageName();
    try
    {
      int i = localPackageManager.getPackageInfo(paramContext, 0).versionCode;
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return 1;
  }
  
  public static final String getVersionName(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getPackageName();
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext, 0).versionName;
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return "1.0.0";
  }
  
  public static GradientDrawable getWindowsBackGround(int paramInt)
  {
    GradientDrawable localGradientDrawable = new GradientDrawable();
    localGradientDrawable.setColor(paramInt);
    return localGradientDrawable;
  }
  
  public static boolean isDualMode()
  {
    try
    {
      Object localObject = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", new Class[] { String.class });
      ((Method)localObject).setAccessible(true);
      if (((Method)localObject).invoke(null, new Object[] { "phone" }) != null)
      {
        localObject = ((Method)localObject).invoke(null, new Object[] { "phone2" });
        if (localObject != null) {
          return true;
        }
      }
      return false;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public static final boolean isExistSdCard()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static final boolean isNetAvailable(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    if (paramContext.getActiveNetworkInfo() != null) {
      return paramContext.getActiveNetworkInfo().isAvailable();
    }
    return false;
  }
  
  public static boolean isNetWorkViable(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.isAvailable());
  }
  
  public static final boolean isSimVaild(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getSimState() == 5;
  }
  
  public static boolean isUnicomCard(int paramInt)
  {
    String str = getSubscriberId2(paramInt);
    return (!TextUtils.isEmpty(str)) && ((str.contains("46001")) || (str.contains("46006")));
  }
  
  public static boolean isUnicomCard(String paramString)
  {
    return ((paramString.startsWith("46001")) || (paramString.startsWith("46006"))) && (!TextUtils.isEmpty(paramString));
  }
  
  public static void savePayPhoneValue(Context paramContext, String paramString1, String paramString2)
  {
    paramContext = paramContext.getApplicationContext().getSharedPreferences("WoUniPayUser", 0).edit();
    paramContext.putString(CryptUtil.encryptBy3DesAndBase64(paramString1, MultimodeConfig.SMS_ENCODE_KEY), CryptUtil.encryptBy3DesAndBase64(paramString2, MultimodeConfig.SMS_ENCODE_KEY));
    paramContext.commit();
  }
  
  public static void toCorner(View paramView, float paramFloat)
  {
    float f = paramFloat;
    if (paramFloat == 0.0F) {
      f = 10.0F;
    }
    GradientDrawable localGradientDrawable = new GradientDrawable();
    localGradientDrawable.setCornerRadii(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, f, f, f, f });
    localGradientDrawable.setColor(Color.rgb(240, 240, 240));
    paramView.setBackgroundDrawable(localGradientDrawable);
  }
  
  public static void toCornerTop(View paramView, float paramFloat)
  {
    float f = paramFloat;
    if (paramFloat == 0.0F) {
      f = 10.0F;
    }
    GradientDrawable localGradientDrawable = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, new int[] { Color.rgb(24, 162, 255), Color.rgb(0, 125, 231) });
    localGradientDrawable.setGradientType(0);
    localGradientDrawable.setCornerRadii(new float[] { f, f, f, f, 0.0F, 0.0F, 0.0F, 0.0F });
    paramView.setBackgroundDrawable(localGradientDrawable);
  }
}
