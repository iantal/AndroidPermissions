package com.lepeng.utils.datastorage.db.sqlite;

import android.text.TextUtils;
import com.lepeng.utils.datastorage.db.table.Id;
import com.lepeng.utils.datastorage.db.table.KeyValue;
import com.lepeng.utils.datastorage.db.table.ManyToOne;
import com.lepeng.utils.datastorage.db.table.Property;
import com.lepeng.utils.datastorage.db.table.TableInfo;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class SqlBuilder
{
  public SqlBuilder() {}
  
  private static KeyValue a(ManyToOne paramManyToOne, Object paramObject)
  {
    Object localObject = null;
    String str = paramManyToOne.getColumn();
    paramObject = paramManyToOne.getValue(paramObject);
    paramManyToOne = localObject;
    if (paramObject != null)
    {
      paramObject = TableInfo.get(paramObject.getClass()).getId().getValue(paramObject);
      paramManyToOne = localObject;
      if (str != null)
      {
        paramManyToOne = localObject;
        if (paramObject != null) {
          paramManyToOne = new KeyValue(str, paramObject);
        }
      }
    }
    return paramManyToOne;
  }
  
  private static KeyValue a(Property paramProperty, Object paramObject)
  {
    Object localObject = null;
    String str = paramProperty.getColumn();
    paramObject = paramProperty.getValue(paramObject);
    if (paramObject != null) {
      paramObject = new KeyValue(str, paramObject);
    }
    do
    {
      do
      {
        return paramObject;
        paramObject = localObject;
      } while (paramProperty.getDefaultValue() == null);
      paramObject = localObject;
    } while (paramProperty.getDefaultValue().trim().length() == 0);
    return new KeyValue(str, paramProperty.getDefaultValue());
  }
  
  private static String a(String paramString)
  {
    return "UPDATE sqlite_sequence SET seq = 0 where name = " + paramString;
  }
  
  private static String a(String paramString, Object paramObject)
  {
    paramString = new StringBuffer(paramString).append("=");
    if (((paramObject instanceof String)) || ((paramObject instanceof java.util.Date)) || ((paramObject instanceof java.sql.Date))) {
      paramString.append("'").append(paramObject).append("'");
    }
    for (;;)
    {
      return paramString.toString();
      paramString.append(paramObject);
    }
  }
  
  private static String b(String paramString)
  {
    return "DELETE FROM " + paramString;
  }
  
  public static SqlInfo buildDeleteSql(Class<?> paramClass, Object paramObject)
  {
    Object localObject = TableInfo.get(paramClass);
    paramClass = ((TableInfo)localObject).getId();
    if (paramObject == null) {
      throw new IllegalArgumentException("getDeleteSQL:idValue is null");
    }
    localObject = new StringBuffer(b(((TableInfo)localObject).getTableName()));
    ((StringBuffer)localObject).append(" WHERE ").append(paramClass.getColumn()).append("=?");
    paramClass = new SqlInfo();
    paramClass.setSql(((StringBuffer)localObject).toString());
    paramClass.addValue(paramObject);
    return paramClass;
  }
  
  public static SqlInfo buildDeleteSql(Object paramObject)
  {
    TableInfo localTableInfo = TableInfo.get(paramObject.getClass());
    Object localObject2 = localTableInfo.getId();
    Object localObject1 = ((Id)localObject2).getValue(paramObject);
    if (localObject1 == null) {
      throw new IllegalArgumentException("getDeleteSQL:" + paramObject.getClass() + " id value is null");
    }
    paramObject = new StringBuffer(b(localTableInfo.getTableName()));
    paramObject.append(" WHERE ").append(((Id)localObject2).getColumn()).append("=?");
    localObject2 = new SqlInfo();
    ((SqlInfo)localObject2).setSql(paramObject.toString());
    ((SqlInfo)localObject2).addValue(localObject1);
    return localObject2;
  }
  
  public static String buildDeleteSql(Class<?> paramClass, String paramString)
  {
    paramClass = new StringBuffer(b(TableInfo.get(paramClass).getTableName()));
    if (!TextUtils.isEmpty(paramString))
    {
      paramClass.append(" WHERE ");
      paramClass.append(paramString);
    }
    return paramClass.toString();
  }
  
  public static SqlInfo buildInsertSql(Object paramObject)
  {
    List localList = getSaveKeyValueListByEntity(paramObject);
    StringBuffer localStringBuffer = new StringBuffer();
    KeyValue localKeyValue = null;
    Object localObject = localKeyValue;
    int j;
    int i;
    if (localList != null)
    {
      localObject = localKeyValue;
      if (localList.size() > 0)
      {
        localObject = new SqlInfo();
        localStringBuffer.append("INSERT INTO ");
        localStringBuffer.append(TableInfo.get(paramObject.getClass()).getTableName());
        localStringBuffer.append(" (");
        paramObject = localList.iterator();
        if (paramObject.hasNext()) {
          break label164;
        }
        localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
        localStringBuffer.append(") VALUES ( ");
        j = localList.size();
        i = 0;
      }
    }
    for (;;)
    {
      if (i >= j)
      {
        localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
        localStringBuffer.append(")");
        ((SqlInfo)localObject).setSql(localStringBuffer.toString());
        return localObject;
        label164:
        localKeyValue = (KeyValue)paramObject.next();
        localStringBuffer.append(localKeyValue.getKey()).append(",");
        ((SqlInfo)localObject).addValue(localKeyValue.getValue());
        break;
      }
      localStringBuffer.append("?,");
      i += 1;
    }
  }
  
  public static SqlInfo buildUpdateReqSql(Class<?> paramClass)
  {
    paramClass = new StringBuffer(a(TableInfo.get(paramClass).getTableName()));
    SqlInfo localSqlInfo = new SqlInfo();
    localSqlInfo.setSql(paramClass.toString());
    return localSqlInfo;
  }
  
  private static String c(String paramString)
  {
    return "SELECT * FROM " + paramString;
  }
  
  public static String getClearSql(Class<?> paramClass)
  {
    paramClass = TableInfo.get(paramClass);
    return "DELETE FROM " + paramClass.getTableName();
  }
  
  public static String getCreatTableSQL(Class<?> paramClass)
  {
    Object localObject1 = TableInfo.get(paramClass);
    Object localObject2 = ((TableInfo)localObject1).getId();
    paramClass = new StringBuffer();
    paramClass.append("CREATE TABLE IF NOT EXISTS ");
    paramClass.append(((TableInfo)localObject1).getTableName());
    paramClass.append(" ( ");
    Object localObject3 = ((Id)localObject2).getDataType();
    if ((localObject3 == Integer.TYPE) || (localObject3 == Integer.class))
    {
      paramClass.append("\"").append(((Id)localObject2).getColumn()).append("\"    ").append("INTEGER PRIMARY KEY AUTOINCREMENT,");
      localObject2 = ((TableInfo)localObject1).propertyMap.values().iterator();
      label96:
      if (((Iterator)localObject2).hasNext()) {
        break label177;
      }
      localObject1 = ((TableInfo)localObject1).manyToOneMap.values().iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext())
      {
        paramClass.deleteCharAt(paramClass.length() - 1);
        paramClass.append(" )");
        return paramClass.toString();
        paramClass.append("\"").append(((Id)localObject2).getColumn()).append("\"    ").append("TEXT PRIMARY KEY,");
        break;
        label177:
        localObject3 = (Property)((Iterator)localObject2).next();
        paramClass.append("\"").append(((Property)localObject3).getColumn());
        paramClass.append("\",");
        break label96;
      }
      localObject2 = (ManyToOne)((Iterator)localObject1).next();
      paramClass.append("\"").append(((ManyToOne)localObject2).getColumn()).append("\",");
    }
  }
  
  public static String getLimit(Integer paramInteger1, Integer paramInteger2)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append(" limit ");
    localStringBuffer.append(paramInteger1);
    localStringBuffer.append(",");
    localStringBuffer.append(paramInteger2);
    return localStringBuffer.toString();
  }
  
  public static List<KeyValue> getSaveKeyValueListByEntity(Object paramObject)
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject1 = TableInfo.get(paramObject.getClass());
    Object localObject2 = ((TableInfo)localObject1).getId().getValue(paramObject);
    if ((!(localObject2 instanceof Integer)) && ((localObject2 instanceof String)) && (localObject2 != null)) {
      localArrayList.add(new KeyValue(((TableInfo)localObject1).getId().getColumn(), localObject2));
    }
    localObject2 = ((TableInfo)localObject1).propertyMap.values().iterator();
    if (!((Iterator)localObject2).hasNext()) {
      localObject1 = ((TableInfo)localObject1).manyToOneMap.values().iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext())
      {
        return localArrayList;
        KeyValue localKeyValue = a((Property)((Iterator)localObject2).next(), paramObject);
        if (localKeyValue == null) {
          break;
        }
        localArrayList.add(localKeyValue);
        break;
      }
      localObject2 = a((ManyToOne)((Iterator)localObject1).next(), paramObject);
      if (localObject2 != null) {
        localArrayList.add(localObject2);
      }
    }
  }
  
  public static String getSelectSQL(Class<?> paramClass)
  {
    return c(TableInfo.get(paramClass).getTableName());
  }
  
  public static String getSelectSQL(Class<?> paramClass, Object paramObject)
  {
    paramClass = TableInfo.get(paramClass);
    StringBuffer localStringBuffer = new StringBuffer(c(paramClass.getTableName()));
    localStringBuffer.append(" WHERE ");
    localStringBuffer.append(a(paramClass.getId().getColumn(), paramObject));
    return localStringBuffer.toString();
  }
  
  public static String getSelectSQLByWhere(Class<?> paramClass, String paramString)
  {
    paramClass = new StringBuffer(c(TableInfo.get(paramClass).getTableName()));
    if (!TextUtils.isEmpty(paramString)) {
      paramClass.append(" WHERE ").append(paramString);
    }
    return paramClass.toString();
  }
  
  public static String getSelectSQLByWhereLimit(Class<?> paramClass, String paramString, Integer paramInteger1, Integer paramInteger2)
  {
    paramClass = new StringBuffer(c(TableInfo.get(paramClass).getTableName()));
    if (!TextUtils.isEmpty(paramString)) {
      paramClass.append(" WHERE ").append(paramString);
    }
    paramClass.append(getLimit(paramInteger1, paramInteger2));
    return paramClass.toString();
  }
  
  public static String getSelectSQLLimit(Class<?> paramClass, Integer paramInteger1, Integer paramInteger2)
  {
    paramClass = new StringBuffer(c(TableInfo.get(paramClass).getTableName()));
    paramClass.append(getLimit(paramInteger1, paramInteger2));
    return paramClass.toString();
  }
  
  public static SqlInfo getSelectSqlAsSqlInfo(Class<?> paramClass, Object paramObject)
  {
    Object localObject = TableInfo.get(paramClass);
    paramClass = new StringBuffer(c(((TableInfo)localObject).getTableName()));
    paramClass.append(" WHERE ").append(((TableInfo)localObject).getId().getColumn()).append("=?");
    localObject = new SqlInfo();
    ((SqlInfo)localObject).setSql(paramClass.toString());
    ((SqlInfo)localObject).addValue(paramObject);
    return localObject;
  }
  
  public static SqlInfo getSelectSqlAsSqlInfoByRealId(Class<?> paramClass, Object paramObject)
  {
    paramClass = new StringBuffer(c(TableInfo.get(paramClass).getTableName()));
    paramClass.append(" WHERE ").append("real_id").append("=?");
    SqlInfo localSqlInfo = new SqlInfo();
    localSqlInfo.setSql(paramClass.toString());
    localSqlInfo.addValue(paramObject);
    return localSqlInfo;
  }
  
  public static SqlInfo getUpdateSqlAsSqlInfo(Object paramObject)
  {
    TableInfo localTableInfo = TableInfo.get(paramObject.getClass());
    Object localObject1 = localTableInfo.getId().getValue(paramObject);
    if (localObject1 == null) {
      throw new IllegalArgumentException("this entity[" + paramObject.getClass() + "]'s id value is null");
    }
    Object localObject2 = new ArrayList();
    Object localObject3 = localTableInfo.propertyMap.values().iterator();
    if (!((Iterator)localObject3).hasNext()) {
      localObject3 = localTableInfo.manyToOneMap.values().iterator();
    }
    KeyValue localKeyValue;
    for (;;)
    {
      if (!((Iterator)localObject3).hasNext())
      {
        if ((localObject2 != null) && (((List)localObject2).size() != 0)) {
          break label192;
        }
        return null;
        localKeyValue = a((Property)((Iterator)localObject3).next(), paramObject);
        if (localKeyValue == null) {
          break;
        }
        ((List)localObject2).add(localKeyValue);
        break;
      }
      localKeyValue = a((ManyToOne)((Iterator)localObject3).next(), paramObject);
      if (localKeyValue != null) {
        ((List)localObject2).add(localKeyValue);
      }
    }
    label192:
    paramObject = new SqlInfo();
    localObject3 = new StringBuffer("UPDATE ");
    ((StringBuffer)localObject3).append(localTableInfo.getTableName());
    ((StringBuffer)localObject3).append(" SET ");
    localObject2 = ((List)localObject2).iterator();
    for (;;)
    {
      if (!((Iterator)localObject2).hasNext())
      {
        ((StringBuffer)localObject3).deleteCharAt(((StringBuffer)localObject3).length() - 1);
        ((StringBuffer)localObject3).append(" WHERE ").append(localTableInfo.getId().getColumn()).append("=?");
        paramObject.addValue(localObject1);
        paramObject.setSql(((StringBuffer)localObject3).toString());
        return paramObject;
      }
      localKeyValue = (KeyValue)((Iterator)localObject2).next();
      ((StringBuffer)localObject3).append(localKeyValue.getKey()).append("=?,");
      paramObject.addValue(localKeyValue.getValue());
    }
  }
  
  public static SqlInfo getUpdateSqlAsSqlInfo(Object paramObject, String paramString)
  {
    Object localObject1 = TableInfo.get(paramObject.getClass());
    Object localObject2 = new ArrayList();
    Object localObject3 = ((TableInfo)localObject1).propertyMap.values().iterator();
    if (!((Iterator)localObject3).hasNext()) {
      localObject3 = ((TableInfo)localObject1).manyToOneMap.values().iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject3).hasNext())
      {
        if ((localObject2 != null) && (((List)localObject2).size() != 0)) {
          break label177;
        }
        throw new IllegalArgumentException("this entity[" + paramObject.getClass() + "] has no property");
        localKeyValue = a((Property)((Iterator)localObject3).next(), paramObject);
        if (localKeyValue == null) {
          break;
        }
        ((List)localObject2).add(localKeyValue);
        break;
      }
      KeyValue localKeyValue = a((ManyToOne)((Iterator)localObject3).next(), paramObject);
      if (localKeyValue != null) {
        ((List)localObject2).add(localKeyValue);
      }
    }
    label177:
    paramObject = new SqlInfo();
    localObject3 = new StringBuffer("UPDATE ");
    ((StringBuffer)localObject3).append(((TableInfo)localObject1).getTableName());
    ((StringBuffer)localObject3).append(" SET ");
    localObject1 = ((List)localObject2).iterator();
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext())
      {
        ((StringBuffer)localObject3).deleteCharAt(((StringBuffer)localObject3).length() - 1);
        if (!TextUtils.isEmpty(paramString)) {
          ((StringBuffer)localObject3).append(" WHERE ").append(paramString);
        }
        paramObject.setSql(((StringBuffer)localObject3).toString());
        return paramObject;
      }
      localObject2 = (KeyValue)((Iterator)localObject1).next();
      ((StringBuffer)localObject3).append(((KeyValue)localObject2).getKey()).append("=?,");
      paramObject.addValue(((KeyValue)localObject2).getValue());
    }
  }
}
