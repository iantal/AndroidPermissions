package com.lepeng.fastjson.serializer;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.CharTypes;
import com.lepeng.fastjson.util.Base64;
import com.lepeng.fastjson.util.IOUtils;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.lang.ref.SoftReference;
import java.nio.charset.Charset;

public final class SerializeWriter
  extends Writer
{
  private static final ThreadLocal<SoftReference<char[]>> c = new ThreadLocal();
  protected char[] buf;
  protected int count;
  private int features;
  private final Writer writer;
  
  public SerializeWriter()
  {
    this(null);
  }
  
  public SerializeWriter(int paramInt)
  {
    this(null, paramInt);
  }
  
  public SerializeWriter(Writer paramWriter)
  {
    this.writer = paramWriter;
    this.features = JSON.DEFAULT_GENERATE_FEATURE;
    paramWriter = (SoftReference)c.get();
    if (paramWriter != null)
    {
      this.buf = ((char[])paramWriter.get());
      c.set(null);
    }
    if (this.buf == null) {
      this.buf = new char['Ѐ'];
    }
  }
  
  public SerializeWriter(Writer paramWriter, int paramInt)
  {
    this.writer = paramWriter;
    if (paramInt <= 0) {
      throw new IllegalArgumentException("Negative initial size: " + paramInt);
    }
    this.buf = new char[paramInt];
  }
  
  public SerializeWriter(Writer paramWriter, SerializerFeature... paramVarArgs)
  {
    this.writer = paramWriter;
    paramWriter = (SoftReference)c.get();
    if (paramWriter != null)
    {
      this.buf = ((char[])paramWriter.get());
      c.set(null);
    }
    if (this.buf == null) {
      this.buf = new char['Ѐ'];
    }
    int k = paramVarArgs.length;
    int i = 0;
    for (;;)
    {
      if (i >= k)
      {
        this.features = j;
        return;
      }
      j |= paramVarArgs[i].getMask();
      i += 1;
    }
  }
  
  public SerializeWriter(SerializerFeature... paramVarArgs)
  {
    this(null, paramVarArgs);
  }
  
  private void a(String paramString)
  {
    int m = 0;
    int i = 0;
    if (paramString == null)
    {
      i = this.count + 4;
      if (i > this.buf.length) {
        expandCapacity(i);
      }
      "null".getChars(0, 4, this.buf, this.count);
      this.count = i;
      return;
    }
    int j = paramString.length();
    int i3 = this.count + j + 2;
    if (i3 > this.buf.length)
    {
      if (this.writer != null)
      {
        write('\'');
        if (i >= paramString.length())
        {
          write('\'');
          return;
        }
        char c1 = paramString.charAt(i);
        if ((c1 <= '\r') || (c1 == '\\') || (c1 == '\'') || ((c1 == '/') && (isEnabled(SerializerFeature.WriteSlashAsSpecial))))
        {
          write('\\');
          write(CharTypes.replaceChars[c1]);
        }
        for (;;)
        {
          i += 1;
          break;
          write(c1);
        }
      }
      expandCapacity(i3);
    }
    int i1 = this.count + 1;
    int i2 = i1 + j;
    this.buf[this.count] = '\'';
    paramString.getChars(0, j, this.buf, i1);
    this.count = i3;
    int k = -1;
    i = i1;
    j = 0;
    label323:
    int n;
    if (i >= i2)
    {
      i = i3 + j;
      if (i > this.buf.length) {
        expandCapacity(i);
      }
      this.count = i;
      if (j == 1)
      {
        System.arraycopy(this.buf, k + 1, this.buf, k + 2, i2 - k - 1);
        this.buf[k] = '\\';
        this.buf[(k + 1)] = CharTypes.replaceChars[m];
        this.buf[(this.count - 1)] = '\'';
      }
    }
    else
    {
      n = this.buf[i];
      if ((n > 13) && (n != 92) && (n != 39) && ((n != 47) || (!isEnabled(SerializerFeature.WriteSlashAsSpecial)))) {
        break label607;
      }
      k = j + 1;
      m = n;
      j = i;
    }
    for (;;)
    {
      i += 1;
      n = k;
      k = j;
      j = n;
      break;
      if (j <= 1) {
        break label323;
      }
      System.arraycopy(this.buf, k + 1, this.buf, k + 2, i2 - k - 1);
      this.buf[k] = '\\';
      paramString = this.buf;
      i = k + 1;
      paramString[i] = CharTypes.replaceChars[m];
      j = i2 + 1;
      i -= 2;
      while (i >= i1)
      {
        m = this.buf[i];
        if ((m > 13) && (m != 92) && (m != 39))
        {
          k = j;
          if (m == 47)
          {
            k = j;
            if (!isEnabled(SerializerFeature.WriteSlashAsSpecial)) {}
          }
        }
        else
        {
          System.arraycopy(this.buf, i + 1, this.buf, i + 2, j - i - 1);
          this.buf[i] = '\\';
          this.buf[(i + 1)] = CharTypes.replaceChars[m];
          k = j + 1;
        }
        i -= 1;
        j = k;
      }
      break label323;
      label607:
      n = j;
      j = k;
      k = n;
    }
  }
  
  private void a(String paramString, char paramChar)
  {
    a(paramString, paramChar, true);
  }
  
  private void a(String paramString, char paramChar, boolean paramBoolean)
  {
    if (paramString == null)
    {
      writeNull();
      if (paramChar != 0) {
        write(paramChar);
      }
    }
    int i2;
    do
    {
      return;
      m = paramString.length();
      k = this.count + m + 2;
      i2 = k;
      if (paramChar != 0) {
        i2 = k + 1;
      }
      if (i2 <= this.buf.length) {
        break label410;
      }
      if (this.writer == null) {
        break label404;
      }
      write('"');
      k = 0;
      if (k < paramString.length()) {
        break;
      }
      write('"');
    } while (paramChar == 0);
    write(paramChar);
    return;
    int i = paramString.charAt(k);
    if (isEnabled(SerializerFeature.BrowserCompatible)) {
      if ((i == 8) || (i == 12) || (i == 10) || (i == 13) || (i == 9) || (i == 34) || (i == 47) || (i == 92))
      {
        write('\\');
        write(CharTypes.replaceChars[i]);
      }
    }
    for (;;)
    {
      k += 1;
      break;
      if (i < 32)
      {
        write('\\');
        write('u');
        write('0');
        write('0');
        write(CharTypes.ASCII_CHARS[(i * 2)]);
        write(CharTypes.ASCII_CHARS[(i * 2 + 1)]);
      }
      else
      {
        if (i >= 127)
        {
          write('\\');
          write('u');
          write(CharTypes.digits[(i >>> 12 & 0xF)]);
          write(CharTypes.digits[(i >>> 8 & 0xF)]);
          write(CharTypes.digits[(i >>> 4 & 0xF)]);
          write(CharTypes.digits[(i & 0xF)]);
          continue;
          if (((i < CharTypes.specicalFlags_doubleQuotes.length) && (CharTypes.specicalFlags_doubleQuotes[i] != 0)) || ((i == 47) && (isEnabled(SerializerFeature.WriteSlashAsSpecial))))
          {
            write('\\');
            write(CharTypes.replaceChars[i]);
            continue;
          }
        }
        write(i);
      }
    }
    label404:
    expandCapacity(i2);
    label410:
    int i4 = this.count + 1;
    int i5 = i4 + m;
    this.buf[this.count] = '"';
    paramString.getChars(0, m, this.buf, i4);
    this.count = i2;
    int j;
    if (isEnabled(SerializerFeature.BrowserCompatible))
    {
      i1 = i2;
      m = -1;
      k = i4;
      if (k >= i5)
      {
        if (i1 > this.buf.length) {
          expandCapacity(i1);
        }
        this.count = i1;
        n = i5;
        if (m < i4)
        {
          if (paramChar == 0) {
            break label1148;
          }
          this.buf[(this.count - 2)] = '"';
          this.buf[(this.count - 1)] = paramChar;
        }
      }
      else
      {
        i2 = this.buf[k];
        if ((i2 == 34) || (i2 == 47) || (i2 == 92))
        {
          n = i1 + 1;
          m = k;
        }
        for (;;)
        {
          k += 1;
          i1 = n;
          break;
          if ((i2 == 8) || (i2 == 12) || (i2 == 10) || (i2 == 13) || (i2 == 9))
          {
            n = i1 + 1;
            m = k;
          }
          else if (i2 < 32)
          {
            n = i1 + 5;
            m = k;
          }
          else
          {
            n = i1;
            if (i2 >= 127)
            {
              n = i1 + 5;
              m = k;
            }
          }
        }
      }
      j = this.buf[m];
      if ((j == 8) || (j == 12) || (j == 10) || (j == 13) || (j == 9))
      {
        System.arraycopy(this.buf, m + 1, this.buf, m + 2, n - m - 1);
        this.buf[m] = '\\';
        this.buf[(m + 1)] = CharTypes.replaceChars[j];
        k = n + 1;
      }
      for (;;)
      {
        m -= 1;
        n = k;
        break;
        if ((j == 34) || (j == 47) || (j == 92))
        {
          System.arraycopy(this.buf, m + 1, this.buf, m + 2, n - m - 1);
          this.buf[m] = '\\';
          this.buf[(m + 1)] = j;
          k = n + 1;
        }
        else if (j < 32)
        {
          System.arraycopy(this.buf, m + 1, this.buf, m + 6, n - m - 1);
          this.buf[m] = '\\';
          this.buf[(m + 1)] = 'u';
          this.buf[(m + 2)] = '0';
          this.buf[(m + 3)] = '0';
          this.buf[(m + 4)] = CharTypes.ASCII_CHARS[(j * 2)];
          this.buf[(m + 5)] = CharTypes.ASCII_CHARS[(j * 2 + 1)];
          k = n + 5;
        }
        else
        {
          k = n;
          if (j >= 127)
          {
            System.arraycopy(this.buf, m + 1, this.buf, m + 6, n - m - 1);
            this.buf[m] = '\\';
            this.buf[(m + 1)] = 'u';
            this.buf[(m + 2)] = CharTypes.digits[(j >>> 12 & 0xF)];
            this.buf[(m + 3)] = CharTypes.digits[(j >>> 8 & 0xF)];
            this.buf[(m + 4)] = CharTypes.digits[(j >>> 4 & 0xF)];
            this.buf[(m + 5)] = CharTypes.digits[(j & 0xF)];
            k = n + 5;
          }
        }
      }
      label1148:
      this.buf[(this.count - 1)] = '"';
      return;
    }
    int i1 = 0;
    int i8 = 0;
    int n = -1;
    int i3 = -1;
    int i6 = 0;
    int i7 = 0;
    int k = i3;
    int m = n;
    if (paramBoolean)
    {
      i1 = i4;
      m = i8;
      k = i3;
      i3 = i7;
      if (i1 >= i5)
      {
        i1 = m;
        m = n;
        i6 = i3;
      }
    }
    else
    {
      n = i2 + i1;
      if (n > this.buf.length) {
        expandCapacity(n);
      }
      this.count = n;
      if (i1 != 1) {
        break label1504;
      }
      System.arraycopy(this.buf, m + 1, this.buf, m + 2, i5 - m - 1);
      this.buf[m] = '\\';
      this.buf[(m + 1)] = CharTypes.replaceChars[i6];
      label1312:
      if (paramChar == 0) {
        break label1648;
      }
      this.buf[(this.count - 2)] = '"';
      this.buf[(this.count - 1)] = paramChar;
      return;
    }
    i6 = this.buf[i1];
    if (i6 >= 93)
    {
      i6 = n;
      n = m;
      m = i6;
    }
    for (;;)
    {
      i1 += 1;
      i6 = n;
      n = m;
      m = i6;
      break;
      if (i6 == 32)
      {
        i6 = m;
        m = n;
        n = i6;
      }
      else if ((i6 >= 48) && (i6 != 92))
      {
        i6 = m;
        m = n;
        n = i6;
      }
      else
      {
        if (((i6 < CharTypes.specicalFlags_doubleQuotes.length) && (CharTypes.specicalFlags_doubleQuotes[i6] != 0)) || ((i6 == 47) && (isEnabled(SerializerFeature.WriteSlashAsSpecial))))
        {
          n = m + 1;
          if (k == -1)
          {
            m = i1;
            i3 = i6;
            k = i1;
            continue;
            label1504:
            if (i1 <= 1) {
              break label1312;
            }
            m = k - i4;
            n = i5;
            label1521:
            if (m < paramString.length())
            {
              j = paramString.charAt(m);
              if (((j >= CharTypes.specicalFlags_doubleQuotes.length) || (CharTypes.specicalFlags_doubleQuotes[j] == 0)) && ((j != 47) || (!isEnabled(SerializerFeature.WriteSlashAsSpecial)))) {
                break label1630;
              }
              char[] arrayOfChar = this.buf;
              i1 = k + 1;
              arrayOfChar[k] = '\\';
              arrayOfChar = this.buf;
              k = i1 + 1;
              arrayOfChar[i1] = CharTypes.replaceChars[j];
              n += 1;
            }
            for (;;)
            {
              m += 1;
              break label1521;
              break;
              label1630:
              this.buf[k] = j;
              k += 1;
            }
            label1648:
            this.buf[(this.count - 1)] = '"';
            return;
          }
          i3 = i6;
          m = i1;
          continue;
        }
        i6 = m;
        m = n;
        n = i6;
      }
    }
  }
  
  private void b(String paramString)
  {
    boolean[] arrayOfBoolean = CharTypes.specicalFlags_doubleQuotes;
    int m = paramString.length();
    int i4 = this.count + m + 1;
    if (i4 > this.buf.length)
    {
      if (this.writer != null)
      {
        if (m == 0)
        {
          write('"');
          write('"');
          write(':');
          return;
        }
        j = 0;
        for (;;)
        {
          if (j >= m) {}
          for (j = 0;; j = 1)
          {
            if (j != 0) {
              write('"');
            }
            k = 0;
            if (k < m) {
              break label145;
            }
            if (j != 0) {
              write('"');
            }
            write(':');
            return;
            k = paramString.charAt(j);
            if ((k >= arrayOfBoolean.length) || (arrayOfBoolean[k] == 0)) {
              break;
            }
          }
          j += 1;
        }
        label145:
        int i = paramString.charAt(k);
        if ((i < arrayOfBoolean.length) && (arrayOfBoolean[i] != 0))
        {
          write('\\');
          write(CharTypes.replaceChars[i]);
        }
        for (;;)
        {
          k += 1;
          break;
          write(i);
        }
      }
      expandCapacity(i4);
    }
    if (m == 0)
    {
      if (this.count + 3 > this.buf.length) {
        expandCapacity(this.count + 3);
      }
      paramString = this.buf;
      j = this.count;
      this.count = (j + 1);
      paramString[j] = 34;
      paramString = this.buf;
      j = this.count;
      this.count = (j + 1);
      paramString[j] = 34;
      paramString = this.buf;
      j = this.count;
      this.count = (j + 1);
      paramString[j] = 58;
      return;
    }
    int i5 = this.count;
    int i1 = i5 + m;
    paramString.getChars(0, m, this.buf, i5);
    this.count = i4;
    int i2 = 0;
    m = i5;
    if (m >= i1)
    {
      this.buf[(this.count - 1)] = ':';
      return;
    }
    int i6 = this.buf[m];
    int n = m;
    int i3 = i2;
    int j = i1;
    int k = i4;
    if (i6 < arrayOfBoolean.length)
    {
      n = m;
      i3 = i2;
      j = i1;
      k = i4;
      if (arrayOfBoolean[i6] != 0)
      {
        if (i2 != 0) {
          break label574;
        }
        k = i4 + 3;
        if (k > this.buf.length) {
          expandCapacity(k);
        }
        this.count = k;
        System.arraycopy(this.buf, m + 1, this.buf, m + 3, i1 - m - 1);
        System.arraycopy(this.buf, 0, this.buf, 1, m);
        this.buf[i5] = '"';
        paramString = this.buf;
        j = m + 1;
        paramString[j] = 92;
        paramString = this.buf;
        n = j + 1;
        paramString[n] = CharTypes.replaceChars[i6];
        j = i1 + 2;
        this.buf[(this.count - 2)] = '"';
      }
    }
    for (i3 = 1;; i3 = i2)
    {
      m = n + 1;
      i2 = i3;
      i1 = j;
      i4 = k;
      break;
      label574:
      k = i4 + 1;
      if (k > this.buf.length) {
        expandCapacity(k);
      }
      this.count = k;
      System.arraycopy(this.buf, m + 1, this.buf, m + 2, i1 - m);
      this.buf[m] = '\\';
      paramString = this.buf;
      n = m + 1;
      paramString[n] = CharTypes.replaceChars[i6];
      j = i1 + 1;
    }
  }
  
  private void c(String paramString)
  {
    boolean[] arrayOfBoolean = CharTypes.specicalFlags_singleQuotes;
    int m = paramString.length();
    int i4 = this.count + m + 1;
    if (i4 > this.buf.length)
    {
      if (this.writer != null)
      {
        if (m == 0)
        {
          write('\'');
          write('\'');
          write(':');
          return;
        }
        j = 0;
        for (;;)
        {
          if (j >= m) {}
          for (j = 0;; j = 1)
          {
            if (j != 0) {
              write('\'');
            }
            k = 0;
            if (k < m) {
              break label145;
            }
            if (j != 0) {
              write('\'');
            }
            write(':');
            return;
            k = paramString.charAt(j);
            if ((k >= arrayOfBoolean.length) || (arrayOfBoolean[k] == 0)) {
              break;
            }
          }
          j += 1;
        }
        label145:
        int i = paramString.charAt(k);
        if ((i < arrayOfBoolean.length) && (arrayOfBoolean[i] != 0))
        {
          write('\\');
          write(CharTypes.replaceChars[i]);
        }
        for (;;)
        {
          k += 1;
          break;
          write(i);
        }
      }
      expandCapacity(i4);
    }
    if (m == 0)
    {
      if (this.count + 3 > this.buf.length) {
        expandCapacity(this.count + 3);
      }
      paramString = this.buf;
      j = this.count;
      this.count = (j + 1);
      paramString[j] = 39;
      paramString = this.buf;
      j = this.count;
      this.count = (j + 1);
      paramString[j] = 39;
      paramString = this.buf;
      j = this.count;
      this.count = (j + 1);
      paramString[j] = 58;
      return;
    }
    int i5 = this.count;
    int i1 = i5 + m;
    paramString.getChars(0, m, this.buf, i5);
    this.count = i4;
    int i2 = 0;
    m = i5;
    if (m >= i1)
    {
      this.buf[(i4 - 1)] = ':';
      return;
    }
    int i6 = this.buf[m];
    int n = m;
    int i3 = i2;
    int j = i1;
    int k = i4;
    if (i6 < arrayOfBoolean.length)
    {
      n = m;
      i3 = i2;
      j = i1;
      k = i4;
      if (arrayOfBoolean[i6] != 0)
      {
        if (i2 != 0) {
          break label572;
        }
        k = i4 + 3;
        if (k > this.buf.length) {
          expandCapacity(k);
        }
        this.count = k;
        System.arraycopy(this.buf, m + 1, this.buf, m + 3, i1 - m - 1);
        System.arraycopy(this.buf, 0, this.buf, 1, m);
        this.buf[i5] = '\'';
        paramString = this.buf;
        j = m + 1;
        paramString[j] = 92;
        paramString = this.buf;
        n = j + 1;
        paramString[n] = CharTypes.replaceChars[i6];
        j = i1 + 2;
        this.buf[(this.count - 2)] = '\'';
      }
    }
    for (i3 = 1;; i3 = i2)
    {
      m = n + 1;
      i2 = i3;
      i1 = j;
      i4 = k;
      break;
      label572:
      k = i4 + 1;
      if (k > this.buf.length) {
        expandCapacity(k);
      }
      this.count = k;
      System.arraycopy(this.buf, m + 1, this.buf, m + 2, i1 - m);
      this.buf[m] = '\\';
      paramString = this.buf;
      n = m + 1;
      paramString[n] = CharTypes.replaceChars[i6];
      j = i1 + 1;
    }
  }
  
  public SerializeWriter append(char paramChar)
  {
    write(paramChar);
    return this;
  }
  
  public SerializeWriter append(CharSequence paramCharSequence)
  {
    if (paramCharSequence == null) {}
    for (paramCharSequence = "null";; paramCharSequence = paramCharSequence.toString())
    {
      write(paramCharSequence, 0, paramCharSequence.length());
      return this;
    }
  }
  
  public SerializeWriter append(CharSequence paramCharSequence, int paramInt1, int paramInt2)
  {
    Object localObject = paramCharSequence;
    if (paramCharSequence == null) {
      localObject = "null";
    }
    paramCharSequence = ((CharSequence)localObject).subSequence(paramInt1, paramInt2).toString();
    write(paramCharSequence, 0, paramCharSequence.length());
    return this;
  }
  
  public void close()
  {
    if ((this.writer != null) && (this.count > 0)) {
      flush();
    }
    if (this.buf.length <= 8192) {
      c.set(new SoftReference(this.buf));
    }
    this.buf = null;
  }
  
  public void config(SerializerFeature paramSerializerFeature, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      this.features |= paramSerializerFeature.getMask();
      return;
    }
    this.features &= (paramSerializerFeature.getMask() ^ 0xFFFFFFFF);
  }
  
  public void expandCapacity(int paramInt)
  {
    int i = this.buf.length * 3 / 2 + 1;
    if (i < paramInt) {}
    for (;;)
    {
      char[] arrayOfChar = new char[paramInt];
      System.arraycopy(this.buf, 0, arrayOfChar, 0, this.count);
      this.buf = arrayOfChar;
      return;
      paramInt = i;
    }
  }
  
  public void flush()
  {
    if (this.writer == null) {
      return;
    }
    try
    {
      this.writer.write(this.buf, 0, this.count);
      this.writer.flush();
      this.count = 0;
      return;
    }
    catch (IOException localIOException)
    {
      throw new JSONException(localIOException.getMessage(), localIOException);
    }
  }
  
  public int getBufferLength()
  {
    return this.buf.length;
  }
  
  public boolean isEnabled(SerializerFeature paramSerializerFeature)
  {
    return SerializerFeature.isEnabled(this.features, paramSerializerFeature);
  }
  
  public void reset()
  {
    this.count = 0;
  }
  
  public int size()
  {
    return this.count;
  }
  
  public byte[] toBytes(String paramString)
  {
    if (this.writer != null) {
      throw new UnsupportedOperationException("writer not null");
    }
    String str = paramString;
    if (paramString == null) {
      str = "UTF-8";
    }
    return new SerialWriterStringEncoder(Charset.forName(str)).encode(this.buf, 0, this.count);
  }
  
  public char[] toCharArray()
  {
    if (this.writer != null) {
      throw new UnsupportedOperationException("writer not null");
    }
    char[] arrayOfChar = new char[this.count];
    System.arraycopy(this.buf, 0, arrayOfChar, 0, this.count);
    return arrayOfChar;
  }
  
  public String toString()
  {
    return new String(this.buf, 0, this.count);
  }
  
  public void write(char paramChar)
  {
    int j = this.count + 1;
    int i = j;
    if (j > this.buf.length)
    {
      if (this.writer != null) {
        break label48;
      }
      expandCapacity(j);
    }
    for (i = j;; i = 1)
    {
      this.buf[this.count] = paramChar;
      this.count = i;
      return;
      label48:
      flush();
    }
  }
  
  public void write(int paramInt)
  {
    int j = this.count + 1;
    int i = j;
    if (j > this.buf.length)
    {
      if (this.writer != null) {
        break label49;
      }
      expandCapacity(j);
    }
    for (i = j;; i = 1)
    {
      this.buf[this.count] = ((char)paramInt);
      this.count = i;
      return;
      label49:
      flush();
    }
  }
  
  public void write(String paramString)
  {
    if (paramString == null)
    {
      writeNull();
      return;
    }
    write(paramString, 0, paramString.length());
  }
  
  public void write(String paramString, int paramInt1, int paramInt2)
  {
    int k = this.count + paramInt2;
    int i;
    int j;
    if (k > this.buf.length)
    {
      i = paramInt1;
      j = paramInt2;
      if (this.writer == null)
      {
        expandCapacity(k);
        i = k;
        j = paramInt1;
      }
    }
    for (;;)
    {
      paramString.getChars(j, paramInt2 + j, this.buf, this.count);
      this.count = i;
      return;
      do
      {
        paramInt2 = this.buf.length - this.count;
        paramString.getChars(i, i + paramInt2, this.buf, this.count);
        this.count = this.buf.length;
        flush();
        paramInt1 = j - paramInt2;
        k = i + paramInt2;
        i = k;
        j = paramInt1;
      } while (paramInt1 > this.buf.length);
      paramInt2 = paramInt1;
      j = k;
      i = paramInt1;
      continue;
      i = k;
      j = paramInt1;
    }
  }
  
  public void write(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      write("true");
      return;
    }
    write("false");
  }
  
  public void write(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    if ((paramInt1 < 0) || (paramInt1 > paramArrayOfChar.length) || (paramInt2 < 0) || (paramInt1 + paramInt2 > paramArrayOfChar.length) || (paramInt1 + paramInt2 < 0)) {
      throw new IndexOutOfBoundsException();
    }
    if (paramInt2 == 0) {
      return;
    }
    int k = this.count + paramInt2;
    int i;
    int j;
    if (k > this.buf.length)
    {
      i = paramInt1;
      j = paramInt2;
      if (this.writer == null)
      {
        expandCapacity(k);
        i = k;
        j = paramInt1;
      }
    }
    for (;;)
    {
      System.arraycopy(paramArrayOfChar, j, this.buf, this.count, paramInt2);
      this.count = i;
      return;
      do
      {
        paramInt2 = this.buf.length - this.count;
        System.arraycopy(paramArrayOfChar, i, this.buf, this.count, paramInt2);
        this.count = this.buf.length;
        flush();
        paramInt1 = j - paramInt2;
        k = i + paramInt2;
        i = k;
        j = paramInt1;
      } while (paramInt1 > this.buf.length);
      paramInt2 = paramInt1;
      j = k;
      i = paramInt1;
      continue;
      i = k;
      j = paramInt1;
    }
  }
  
  public void writeByteArray(byte[] paramArrayOfByte)
  {
    int k = 0;
    int j = 0;
    int m = paramArrayOfByte.length;
    if (m == 0)
    {
      write("\"\"");
      return;
    }
    char[] arrayOfChar1 = Base64.CA;
    int n = m / 3 * 3;
    int i = (m - 1) / 3;
    int i2 = this.count;
    int i1 = (i + 1 << 2) + this.count + 2;
    if (i1 > this.buf.length)
    {
      if (this.writer != null)
      {
        write('"');
        i = 0;
        if (i >= n)
        {
          k = m - n;
          if (k > 0)
          {
            n = paramArrayOfByte[n];
            i = j;
            if (k == 2) {
              i = (paramArrayOfByte[(m - 1)] & 0xFF) << 2;
            }
            i |= (n & 0xFF) << 10;
            write(arrayOfChar1[(i >> 12)]);
            write(arrayOfChar1[(i >>> 6 & 0x3F)]);
            if (k != 2) {
              break label319;
            }
          }
        }
        label319:
        for (c1 = arrayOfChar1[(i & 0x3F)];; c1 = '=')
        {
          write(c1);
          write('=');
          write('"');
          return;
          i2 = i + 1;
          k = paramArrayOfByte[i];
          i1 = i2 + 1;
          i2 = paramArrayOfByte[i2];
          i = i1 + 1;
          k = (i2 & 0xFF) << 8 | (k & 0xFF) << 16 | paramArrayOfByte[i1] & 0xFF;
          write(arrayOfChar1[(k >>> 18 & 0x3F)]);
          write(arrayOfChar1[(k >>> 12 & 0x3F)]);
          write(arrayOfChar1[(k >>> 6 & 0x3F)]);
          write(arrayOfChar1[(k & 0x3F)]);
          break;
        }
      }
      expandCapacity(i1);
    }
    this.count = i1;
    char[] arrayOfChar2 = this.buf;
    i = i2 + 1;
    arrayOfChar2[i2] = '"';
    j = 0;
    if (j >= n)
    {
      j = m - n;
      if (j > 0)
      {
        n = paramArrayOfByte[n];
        i = k;
        if (j == 2) {
          i = (paramArrayOfByte[(m - 1)] & 0xFF) << 2;
        }
        i |= (n & 0xFF) << 10;
        this.buf[(i1 - 5)] = arrayOfChar1[(i >> 12)];
        this.buf[(i1 - 4)] = arrayOfChar1[(i >>> 6 & 0x3F)];
        paramArrayOfByte = this.buf;
        if (j != 2) {
          break label667;
        }
      }
    }
    label667:
    for (char c1 = arrayOfChar1[(i & 0x3F)];; c1 = '=')
    {
      paramArrayOfByte[(i1 - 3)] = c1;
      this.buf[(i1 - 2)] = '=';
      this.buf[(i1 - 1)] = '"';
      return;
      int i4 = j + 1;
      i2 = paramArrayOfByte[j];
      int i3 = i4 + 1;
      i4 = paramArrayOfByte[i4];
      j = i3 + 1;
      i2 = (i4 & 0xFF) << 8 | (i2 & 0xFF) << 16 | paramArrayOfByte[i3] & 0xFF;
      arrayOfChar2 = this.buf;
      i3 = i + 1;
      arrayOfChar2[i] = arrayOfChar1[(i2 >>> 18 & 0x3F)];
      arrayOfChar2 = this.buf;
      i = i3 + 1;
      arrayOfChar2[i3] = arrayOfChar1[(i2 >>> 12 & 0x3F)];
      arrayOfChar2 = this.buf;
      i3 = i + 1;
      arrayOfChar2[i] = arrayOfChar1[(i2 >>> 6 & 0x3F)];
      arrayOfChar2 = this.buf;
      i = i3 + 1;
      arrayOfChar2[i3] = arrayOfChar1[(i2 & 0x3F)];
      break;
    }
  }
  
  public void writeFieldName(String paramString)
  {
    writeFieldName(paramString, false);
  }
  
  public void writeFieldName(String paramString, boolean paramBoolean)
  {
    if (paramString == null)
    {
      write("null:");
      return;
    }
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      if (isEnabled(SerializerFeature.QuoteFieldNames))
      {
        a(paramString);
        write(':');
        return;
      }
      c(paramString);
      return;
    }
    if (isEnabled(SerializerFeature.QuoteFieldNames))
    {
      a(paramString, ':', paramBoolean);
      return;
    }
    b(paramString);
  }
  
  public void writeInt(int paramInt)
  {
    if (paramInt == Integer.MIN_VALUE)
    {
      write("-2147483648");
      return;
    }
    if (paramInt < 0) {}
    for (int i = IOUtils.stringSize(-paramInt) + 1;; i = IOUtils.stringSize(paramInt))
    {
      int j = this.count + i;
      if (j > this.buf.length)
      {
        if (this.writer != null) {
          break;
        }
        expandCapacity(j);
      }
      IOUtils.getChars(paramInt, j, this.buf);
      this.count = j;
      return;
    }
    char[] arrayOfChar = new char[i];
    IOUtils.getChars(paramInt, i, arrayOfChar);
    write(arrayOfChar, 0, arrayOfChar.length);
  }
  
  public void writeIntAndChar(int paramInt, char paramChar)
  {
    if (paramInt == Integer.MIN_VALUE)
    {
      write("-2147483648");
      write(paramChar);
      return;
    }
    if (paramInt < 0) {}
    int j;
    for (int i = IOUtils.stringSize(-paramInt) + 1;; i = IOUtils.stringSize(paramInt))
    {
      i += this.count;
      j = i + 1;
      if (j <= this.buf.length) {
        break label86;
      }
      if (this.writer == null) {
        break;
      }
      writeInt(paramInt);
      write(paramChar);
      return;
    }
    expandCapacity(j);
    label86:
    IOUtils.getChars(paramInt, i, this.buf);
    this.buf[i] = paramChar;
    this.count = j;
  }
  
  public void writeLong(long paramLong)
  {
    if (paramLong == Long.MIN_VALUE)
    {
      write("-9223372036854775808");
      return;
    }
    if (paramLong < 0L) {}
    for (int i = IOUtils.stringSize(-paramLong) + 1;; i = IOUtils.stringSize(paramLong))
    {
      int j = this.count + i;
      if (j > this.buf.length)
      {
        if (this.writer != null) {
          break;
        }
        expandCapacity(j);
      }
      IOUtils.getChars(paramLong, j, this.buf);
      this.count = j;
      return;
    }
    char[] arrayOfChar = new char[i];
    IOUtils.getChars(paramLong, i, arrayOfChar);
    write(arrayOfChar, 0, arrayOfChar.length);
  }
  
  public void writeLongAndChar(long paramLong, char paramChar)
  {
    if (paramLong == Long.MIN_VALUE)
    {
      write("-9223372036854775808");
      write(paramChar);
      return;
    }
    if (paramLong < 0L) {}
    int j;
    for (int i = IOUtils.stringSize(-paramLong) + 1;; i = IOUtils.stringSize(paramLong))
    {
      i += this.count;
      j = i + 1;
      if (j <= this.buf.length) {
        break label94;
      }
      if (this.writer == null) {
        break;
      }
      writeLong(paramLong);
      write(paramChar);
      return;
    }
    expandCapacity(j);
    label94:
    IOUtils.getChars(paramLong, i, this.buf);
    this.buf[i] = paramChar;
    this.count = j;
  }
  
  public void writeNull()
  {
    write("null");
  }
  
  public void writeString(String paramString)
  {
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      a(paramString);
      return;
    }
    a(paramString, '\000');
  }
  
  public void writeString(String paramString, char paramChar)
  {
    if (isEnabled(SerializerFeature.UseSingleQuotes))
    {
      a(paramString);
      write(paramChar);
      return;
    }
    a(paramString, paramChar);
  }
  
  public void writeTo(OutputStream paramOutputStream, String paramString)
  {
    writeTo(paramOutputStream, Charset.forName(paramString));
  }
  
  public void writeTo(OutputStream paramOutputStream, Charset paramCharset)
  {
    if (this.writer != null) {
      throw new UnsupportedOperationException("writer not null");
    }
    paramOutputStream.write(new String(this.buf, 0, this.count).getBytes(paramCharset));
  }
  
  public void writeTo(Writer paramWriter)
  {
    if (this.writer != null) {
      throw new UnsupportedOperationException("writer not null");
    }
    paramWriter.write(this.buf, 0, this.count);
  }
}
