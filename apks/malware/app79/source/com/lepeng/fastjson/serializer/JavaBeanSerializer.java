package com.lepeng.fastjson.serializer;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.util.FieldInfo;
import com.lepeng.fastjson.util.TypeUtils;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class JavaBeanSerializer
  implements ObjectSerializer
{
  private final FieldSerializer[] a;
  private final FieldSerializer[] b;
  
  public JavaBeanSerializer(Class<?> paramClass)
  {
    this(paramClass, null);
  }
  
  public JavaBeanSerializer(Class<?> paramClass, Map<String, String> paramMap)
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = TypeUtils.computeGetters(paramClass, paramMap, false).iterator();
    if (!localIterator.hasNext())
    {
      this.a = ((FieldSerializer[])localArrayList.toArray(new FieldSerializer[localArrayList.size()]));
      localArrayList = new ArrayList();
      paramClass = TypeUtils.computeGetters(paramClass, paramMap, true).iterator();
    }
    for (;;)
    {
      if (!paramClass.hasNext())
      {
        this.b = ((FieldSerializer[])localArrayList.toArray(new FieldSerializer[localArrayList.size()]));
        return;
        localArrayList.add(createFieldSerializer((FieldInfo)localIterator.next()));
        break;
      }
      localArrayList.add(createFieldSerializer((FieldInfo)paramClass.next()));
    }
  }
  
  public JavaBeanSerializer(Class<?> paramClass, String... paramVarArgs)
  {
    this(paramClass, a(paramVarArgs));
  }
  
  static Map<String, String> a(String... paramVarArgs)
  {
    HashMap localHashMap = new HashMap();
    int j = paramVarArgs.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return localHashMap;
      }
      String str = paramVarArgs[i];
      localHashMap.put(str, str);
      i += 1;
    }
  }
  
  public FieldSerializer createFieldSerializer(FieldInfo paramFieldInfo)
  {
    if (paramFieldInfo.getFieldClass() == Number.class) {
      return new a(paramFieldInfo);
    }
    return new ObjectFieldSerializer(paramFieldInfo);
  }
  
  public FieldSerializer[] getGetters()
  {
    return this.a;
  }
  
  protected boolean isWriteClassName(JSONSerializer paramJSONSerializer, Object paramObject1, Type paramType, Object paramObject2)
  {
    return paramJSONSerializer.isWriteClassName(paramType, paramObject1);
  }
  
  public void write(JSONSerializer paramJSONSerializer, Object paramObject1, Object paramObject2, Type paramType)
  {
    int j = 0;
    SerializeWriter localSerializeWriter = paramJSONSerializer.getWriter();
    if (paramObject1 == null)
    {
      localSerializeWriter.writeNull();
      return;
    }
    if (paramJSONSerializer.containsReference(paramObject1))
    {
      writeReference(paramJSONSerializer, paramObject1);
      return;
    }
    FieldSerializer[] arrayOfFieldSerializer;
    SerialContext localSerialContext;
    if (localSerializeWriter.isEnabled(SerializerFeature.SortField))
    {
      arrayOfFieldSerializer = this.b;
      localSerialContext = paramJSONSerializer.getContext();
      paramJSONSerializer.setContext(localSerialContext, paramObject1, paramObject2);
    }
    int i;
    int k;
    for (;;)
    {
      Object localObject;
      try
      {
        localSerializeWriter.append('{');
        if ((arrayOfFieldSerializer.length > 0) && (localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)))
        {
          paramJSONSerializer.incrementIndent();
          paramJSONSerializer.println();
        }
        if ((!isWriteClassName(paramJSONSerializer, paramObject1, paramType, paramObject2)) || (paramObject1.getClass() == paramType)) {
          break label438;
        }
        localSerializeWriter.writeFieldName(JSON.DEFAULT_TYPE_KEY);
        paramJSONSerializer.write(paramObject1.getClass());
        i = 1;
        if (j >= arrayOfFieldSerializer.length)
        {
          if ((arrayOfFieldSerializer.length > 0) && (localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)))
          {
            paramJSONSerializer.decrementIdent();
            paramJSONSerializer.println();
          }
          localSerializeWriter.append('}');
          return;
          arrayOfFieldSerializer = this.a;
          break;
        }
        paramObject2 = arrayOfFieldSerializer[j];
        if (paramJSONSerializer.isEnabled(SerializerFeature.SkipTransientField))
        {
          paramType = paramObject2.getField();
          if ((paramType != null) && (Modifier.isTransient(paramType.getModifiers())))
          {
            k = i;
            break label444;
          }
        }
        k = i;
        if (!FilterUtils.applyName(paramJSONSerializer, paramObject1, paramObject2.getName())) {
          break label444;
        }
        paramType = paramObject2.getPropertyValue(paramObject1);
        k = i;
        if (!FilterUtils.apply(paramJSONSerializer, paramObject1, paramObject2.getName(), paramType)) {
          break label444;
        }
        String str = FilterUtils.processKey(paramJSONSerializer, paramObject1, paramObject2.getName(), paramType);
        localObject = FilterUtils.processValue(paramJSONSerializer, paramObject1, paramObject2.getName(), paramType);
        if ((localObject == null) && (!paramObject2.isWriteNull()))
        {
          k = i;
          if (!paramJSONSerializer.isEnabled(SerializerFeature.WriteMapNullValue)) {
            break label444;
          }
        }
        if (i != 0)
        {
          localSerializeWriter.append(',');
          if (localSerializeWriter.isEnabled(SerializerFeature.PrettyFormat)) {
            paramJSONSerializer.println();
          }
        }
        if (str != paramObject2.getName())
        {
          localSerializeWriter.writeFieldName(str);
          paramJSONSerializer.write(localObject);
          break label457;
        }
        if (paramType != localObject) {
          paramObject2.writePrefix(paramJSONSerializer);
        }
      }
      catch (Exception paramObject1)
      {
        throw new JSONException("write javaBean error", paramObject1);
      }
      finally
      {
        paramJSONSerializer.setContext(localSerialContext);
      }
      paramObject2.writeProperty(paramJSONSerializer, localObject);
      break label457;
      label438:
      i = 0;
    }
    for (;;)
    {
      label444:
      j += 1;
      i = k;
      break;
      label457:
      k = 1;
    }
  }
  
  public void writeReference(JSONSerializer paramJSONSerializer, Object paramObject)
  {
    paramJSONSerializer.writeReference(paramObject);
  }
}
