package com.lepeng.fastjson.parser;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import java.io.Closeable;
import java.lang.ref.SoftReference;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;

public abstract class JSONLexer
  implements Closeable
{
  public static final byte EOI = 26;
  protected static final int INT_MULTMIN_RADIX_TEN = -214748364;
  protected static final int INT_N_MULTMAX_RADIX_TEN = -214748364;
  protected static final long MULTMIN_RADIX_TEN = -922337203685477580L;
  protected static final long N_MULTMAX_RADIX_TEN = -922337203685477580L;
  private static final ThreadLocal<SoftReference<char[]>> a = new ThreadLocal();
  protected static final int[] digits;
  protected static final char[] typeFieldName = ("\"" + JSON.DEFAULT_TYPE_KEY + "\":\"").toCharArray();
  protected static boolean[] whitespaceFlags = new boolean['Ä€'];
  protected int bp;
  protected Calendar calendar = null;
  protected char ch;
  protected int eofPos;
  protected int features = JSON.DEFAULT_PARSER_FEATURE;
  protected boolean hasSpecial;
  protected Keywords keywods = Keywords.DEFAULT_KEYWORDS;
  protected int np;
  protected int pos;
  protected char[] sbuf;
  protected int sp;
  protected int token;
  
  static
  {
    whitespaceFlags[32] = true;
    whitespaceFlags[10] = true;
    whitespaceFlags[13] = true;
    whitespaceFlags[9] = true;
    whitespaceFlags[12] = true;
    whitespaceFlags[8] = true;
    digits = new int[103];
    int i = 48;
    if (i > 57)
    {
      i = 97;
      label108:
      if (i <= 102) {
        break label140;
      }
      i = 65;
    }
    for (;;)
    {
      if (i > 70)
      {
        return;
        digits[i] = (i - 48);
        i += 1;
        break;
        label140:
        digits[i] = (i - 97 + 10);
        i += 1;
        break label108;
      }
      digits[i] = (i - 65 + 10);
      i += 1;
    }
  }
  
  public JSONLexer()
  {
    SoftReference localSoftReference = (SoftReference)a.get();
    if (localSoftReference != null)
    {
      this.sbuf = ((char[])localSoftReference.get());
      a.set(null);
    }
    if (this.sbuf == null) {
      this.sbuf = new char[64];
    }
  }
  
  public static final boolean isWhitespace(char paramChar)
  {
    return (paramChar == ' ') || (paramChar == '\n') || (paramChar == '\r') || (paramChar == '\t') || (paramChar == '\f') || (paramChar == '\b');
  }
  
  public abstract String addSymbol(int paramInt1, int paramInt2, int paramInt3, SymbolTable paramSymbolTable);
  
  protected abstract void arrayCopy(int paramInt1, char[] paramArrayOfChar, int paramInt2, int paramInt3);
  
  public abstract byte[] bytesValue();
  
  public abstract char charAt(int paramInt);
  
  public void close()
  {
    if (this.sbuf.length <= 8192) {
      a.set(new SoftReference(this.sbuf));
    }
    this.sbuf = null;
  }
  
  public void config(Feature paramFeature, boolean paramBoolean)
  {
    this.features = Feature.config(this.features, paramFeature, paramBoolean);
  }
  
  protected abstract void copyTo(int paramInt1, int paramInt2, char[] paramArrayOfChar);
  
  public final Number decimalValue(boolean paramBoolean)
  {
    int i = charAt(this.np + this.sp - 1);
    if (i == 70) {
      return Float.valueOf(Float.parseFloat(numberString()));
    }
    if (i == 68) {
      return Double.valueOf(Double.parseDouble(numberString()));
    }
    if (paramBoolean) {
      return decimalValue();
    }
    return Double.valueOf(doubleValue());
  }
  
  public final BigDecimal decimalValue()
  {
    return new BigDecimal(numberString());
  }
  
  public double doubleValue()
  {
    return Double.parseDouble(numberString());
  }
  
  public float floatValue()
  {
    return Float.parseFloat(numberString());
  }
  
  public final int getBufferPosition()
  {
    return this.bp;
  }
  
  public Calendar getCalendar()
  {
    return this.calendar;
  }
  
  public final char getCurrent()
  {
    return this.ch;
  }
  
  public final int intValue()
  {
    int j = 0;
    int i = this.np;
    int i1 = this.np + this.sp;
    int k;
    int m;
    int n;
    if (charAt(this.np) == '-')
    {
      k = 1;
      m = Integer.MIN_VALUE;
      i += 1;
      if ((k != 0) && (i >= i1)) {
        break label224;
      }
      int[] arrayOfInt = digits;
      j = i + 1;
      n = -arrayOfInt[charAt(i)];
      i = j;
      j = n;
    }
    label76:
    label224:
    for (;;)
    {
      if (i >= i1) {}
      for (;;)
      {
        if (k != 0)
        {
          if (i > this.np + 1)
          {
            return j;
            m = -2147483647;
            k = 0;
            break;
            n = i + 1;
            int i2 = charAt(i);
            i = n;
            if (i2 == 76) {
              continue;
            }
            i = n;
            if (i2 == 83) {
              continue;
            }
            i = n;
            if (i2 == 66) {
              continue;
            }
            i = digits[i2];
            if (j < -214748364) {
              throw new NumberFormatException(numberString());
            }
            j *= 10;
            if (j < m + i) {
              throw new NumberFormatException(numberString());
            }
            j -= i;
            i = n;
            break label76;
          }
          throw new NumberFormatException(numberString());
        }
      }
      return -j;
    }
  }
  
  public final Number integerValue()
  {
    long l1 = 0L;
    int k = this.np;
    int i = this.np;
    int j = this.sp + i;
    i = 32;
    long l2;
    int m;
    label89:
    label94:
    int n;
    switch (charAt(j - 1))
    {
    default: 
      if (charAt(this.np) == '-')
      {
        l2 = Long.MIN_VALUE;
        m = 1;
        k += 1;
        if (m == 0) {
          break label207;
        }
        if (k >= j) {
          break label368;
        }
        int[] arrayOfInt = digits;
        n = k + 1;
        l1 = -arrayOfInt[charAt(k)];
        k = n;
      }
      break;
    }
    label207:
    label289:
    label295:
    label307:
    label368:
    for (;;)
    {
      if (k >= j)
      {
        if (m == 0) {
          break label307;
        }
        if (k <= this.np + 1) {
          break label295;
        }
        if ((l1 < -2147483648L) || (i == 76)) {
          break label289;
        }
        return Integer.valueOf((int)l1);
        j -= 1;
        i = 76;
        break;
        j -= 1;
        i = 83;
        break;
        j -= 1;
        i = 66;
        break;
        l2 = -9223372036854775807L;
        m = 0;
        break label89;
        break label94;
      }
      n = digits[charAt(k)];
      if (l1 < -922337203685477580L) {
        return new BigInteger(numberString());
      }
      l1 *= 10L;
      if (l1 < n + l2) {
        return new BigInteger(numberString());
      }
      l1 -= n;
      k += 1;
      continue;
      return Long.valueOf(l1);
      throw new NumberFormatException(numberString());
      l1 = -l1;
      if ((l1 <= 2147483647L) && (i != 76))
      {
        if (i == 83) {
          return Short.valueOf((short)(int)l1);
        }
        if (i == 66) {
          return Byte.valueOf((byte)(int)l1);
        }
        return Integer.valueOf((int)l1);
      }
      return Long.valueOf(l1);
    }
  }
  
  public final boolean isBlankInput()
  {
    boolean bool2 = false;
    int i = 0;
    for (;;)
    {
      char c = charAt(i);
      boolean bool1;
      if (c == '\032') {
        bool1 = true;
      }
      do
      {
        return bool1;
        bool1 = bool2;
      } while (!isWhitespace(c));
      i += 1;
    }
  }
  
  public abstract boolean isEOF();
  
  public final boolean isEnabled(Feature paramFeature)
  {
    return Feature.isEnabled(this.features, paramFeature);
  }
  
  public final boolean isRef()
  {
    if (this.sp != 4) {}
    while ((charAt(this.np + 1) != '$') || (charAt(this.np + 2) != 'r') || (charAt(this.np + 3) != 'e') || (charAt(this.np + 4) != 'f')) {
      return false;
    }
    return true;
  }
  
  public final long longValue()
  {
    long l1 = 0L;
    int i = this.np;
    int m = this.np + this.sp;
    int j;
    long l2;
    int k;
    if (charAt(this.np) == '-')
    {
      j = 1;
      l2 = Long.MIN_VALUE;
      i += 1;
      if ((j != 0) && (i >= m)) {
        break label234;
      }
      int[] arrayOfInt = digits;
      k = i + 1;
      l1 = -arrayOfInt[charAt(i)];
      i = k;
    }
    label76:
    label234:
    for (;;)
    {
      if (i >= m) {}
      for (;;)
      {
        if (j != 0)
        {
          if (i > this.np + 1)
          {
            return l1;
            j = 0;
            l2 = -9223372036854775807L;
            break;
            k = i + 1;
            int n = charAt(i);
            i = k;
            if (n == 76) {
              continue;
            }
            i = k;
            if (n == 83) {
              continue;
            }
            i = k;
            if (n == 66) {
              continue;
            }
            i = digits[n];
            if (l1 < -922337203685477580L) {
              throw new NumberFormatException(numberString());
            }
            l1 *= 10L;
            if (l1 < i + l2) {
              throw new NumberFormatException(numberString());
            }
            l1 -= i;
            i = k;
            break label76;
          }
          throw new NumberFormatException(numberString());
        }
      }
      return -l1;
    }
  }
  
  public abstract char next();
  
  public final void nextIdent()
  {
    for (;;)
    {
      if (!isWhitespace(this.ch))
      {
        if ((this.ch != '_') && (!Character.isLetter(this.ch))) {
          break;
        }
        scanIdent();
        return;
      }
      next();
    }
    nextToken();
  }
  
  public final void nextToken()
  {
    this.sp = 0;
    for (;;)
    {
      this.pos = this.bp;
      if (this.ch == '"')
      {
        scanString();
        return;
      }
      if (this.ch == ',')
      {
        next();
        this.token = 16;
        return;
      }
      if ((this.ch >= '0') && (this.ch <= '9'))
      {
        scanNumber();
        return;
      }
      if (this.ch == '-')
      {
        scanNumber();
        return;
      }
      switch (this.ch)
      {
      default: 
        if (!isEOF()) {
          break label444;
        }
        if (this.token != 20) {
          break;
        }
        throw new JSONException("EOF error");
      case '\'': 
        if (!isEnabled(Feature.AllowSingleQuotes)) {
          throw new JSONException("Feature.AllowSingleQuotes is false");
        }
        scanStringSingleQuote();
        return;
      case '\b': 
      case '\t': 
      case '\n': 
      case '\f': 
      case '\r': 
      case ' ': 
        next();
      }
    }
    scanTrue();
    return;
    scanTreeSet();
    return;
    scanSet();
    return;
    scanFalse();
    return;
    scanNullOrNew();
    return;
    next();
    this.token = 10;
    return;
    next();
    this.token = 11;
    return;
    next();
    this.token = 14;
    return;
    next();
    this.token = 15;
    return;
    next();
    this.token = 12;
    return;
    next();
    this.token = 13;
    return;
    next();
    this.token = 17;
    return;
    this.token = 20;
    int i = this.eofPos;
    this.bp = i;
    this.pos = i;
    return;
    label444:
    this.token = 1;
    next();
  }
  
  public final void nextToken(int paramInt)
  {
    this.sp = 0;
    switch (paramInt)
    {
    }
    for (;;)
    {
      if ((this.ch == ' ') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\f') || (this.ch == '\b'))
      {
        next();
        break;
        if (this.ch == '{')
        {
          this.token = 12;
          next();
          return;
        }
        if (this.ch == '[')
        {
          this.token = 14;
          next();
          return;
          if (this.ch == ',')
          {
            this.token = 16;
            next();
            return;
          }
          if (this.ch == '}')
          {
            this.token = 13;
            next();
            return;
          }
          if (this.ch == ']')
          {
            this.token = 15;
            next();
            return;
          }
          if (this.ch == '\032')
          {
            this.token = 20;
            return;
            if ((this.ch >= '0') && (this.ch <= '9'))
            {
              this.pos = this.bp;
              scanNumber();
              return;
            }
            if (this.ch == '"')
            {
              this.pos = this.bp;
              scanString();
              return;
            }
            if (this.ch == '[')
            {
              this.token = 14;
              next();
              return;
            }
            if (this.ch == '{')
            {
              this.token = 12;
              next();
              return;
              if (this.ch == '"')
              {
                this.pos = this.bp;
                scanString();
                return;
              }
              if ((this.ch >= '0') && (this.ch <= '9'))
              {
                this.pos = this.bp;
                scanNumber();
                return;
              }
              if (this.ch == '[')
              {
                this.token = 14;
                next();
                return;
              }
              if (this.ch == '{')
              {
                this.token = 12;
                next();
                return;
                if (this.ch == '[')
                {
                  this.token = 14;
                  next();
                  return;
                }
                if (this.ch == '{')
                {
                  this.token = 12;
                  next();
                  return;
                  if (this.ch == ']')
                  {
                    this.token = 15;
                    next();
                    return;
                  }
                  if (this.ch == '\032')
                  {
                    this.token = 20;
                    return;
                    nextIdent();
                    return;
                  }
                }
              }
            }
          }
        }
      }
    }
    nextToken();
  }
  
  public final void nextTokenWithColon()
  {
    this.sp = 0;
    for (;;)
    {
      if (this.ch == ':')
      {
        next();
        nextToken();
        return;
      }
      if ((this.ch != ' ') && (this.ch != '\n') && (this.ch != '\r') && (this.ch != '\t') && (this.ch != '\f') && (this.ch != '\b')) {
        break;
      }
      next();
    }
    throw new JSONException("not match ':' - " + this.ch);
  }
  
  public final void nextTokenWithColon(int paramInt)
  {
    this.sp = 0;
    if (this.ch == ':') {
      next();
    }
    for (;;)
    {
      if (paramInt == 2)
      {
        if ((this.ch >= '0') && (this.ch <= '9'))
        {
          this.pos = this.bp;
          scanNumber();
          return;
          if (isWhitespace(this.ch))
          {
            next();
            break;
          }
          throw new JSONException("not match ':', actual " + this.ch);
        }
        if (this.ch != '"') {
          break label277;
        }
        this.pos = this.bp;
        scanString();
        return;
      }
      if (paramInt == 4)
      {
        if (this.ch == '"')
        {
          this.pos = this.bp;
          scanString();
          return;
        }
        if ((this.ch >= '0') && (this.ch <= '9'))
        {
          this.pos = this.bp;
          scanNumber();
        }
      }
      else if (paramInt == 12)
      {
        if (this.ch == '{')
        {
          this.token = 12;
          next();
          return;
        }
        if (this.ch == '[')
        {
          this.token = 14;
          next();
        }
      }
      else if (paramInt == 14)
      {
        if (this.ch == '[')
        {
          this.token = 14;
          next();
          return;
        }
        if (this.ch == '{')
        {
          this.token = 12;
          next();
          return;
        }
      }
      label277:
      if (!isWhitespace(this.ch)) {
        break label295;
      }
      next();
    }
    label295:
    nextToken();
  }
  
  public abstract String numberString();
  
  public final Number numberValue()
  {
    int i = charAt(this.np + this.sp - 1);
    String str = numberString();
    switch (i)
    {
    case 69: 
    default: 
      return new BigDecimal(str);
    case 68: 
      return Double.valueOf(Double.parseDouble(str));
    }
    return Float.valueOf(Float.parseFloat(str));
  }
  
  public final int pos()
  {
    return this.pos;
  }
  
  protected final void putChar(char paramChar)
  {
    if (this.sp == this.sbuf.length)
    {
      arrayOfChar = new char[this.sbuf.length * 2];
      System.arraycopy(this.sbuf, 0, arrayOfChar, 0, this.sbuf.length);
      this.sbuf = arrayOfChar;
    }
    char[] arrayOfChar = this.sbuf;
    int i = this.sp;
    this.sp = (i + 1);
    arrayOfChar[i] = paramChar;
  }
  
  public final void resetStringPosition()
  {
    this.sp = 0;
  }
  
  public final void scanFalse()
  {
    if (this.ch != 'f') {
      throw new JSONException("error parse false");
    }
    next();
    if (this.ch != 'a') {
      throw new JSONException("error parse false");
    }
    next();
    if (this.ch != 'l') {
      throw new JSONException("error parse false");
    }
    next();
    if (this.ch != 's') {
      throw new JSONException("error parse false");
    }
    next();
    if (this.ch != 'e') {
      throw new JSONException("error parse false");
    }
    next();
    if ((this.ch == ' ') || (this.ch == ',') || (this.ch == '}') || (this.ch == ']') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\032') || (this.ch == '\f') || (this.ch == '\b'))
    {
      this.token = 7;
      return;
    }
    throw new JSONException("scan false error");
  }
  
  public final void scanIdent()
  {
    this.np = (this.bp - 1);
    this.hasSpecial = false;
    do
    {
      this.sp += 1;
      next();
    } while (Character.isLetterOrDigit(this.ch));
    Object localObject = stringVal();
    localObject = this.keywods.getKeyword((String)localObject);
    if (localObject != null)
    {
      this.token = ((Integer)localObject).intValue();
      return;
    }
    this.token = 18;
  }
  
  public final void scanNullOrNew()
  {
    if (this.ch != 'n') {
      throw new JSONException("error parse null or new");
    }
    next();
    if (this.ch == 'u')
    {
      next();
      if (this.ch != 'l') {
        throw new JSONException("error parse true");
      }
      next();
      if (this.ch != 'l') {
        throw new JSONException("error parse true");
      }
      next();
      if ((this.ch == ' ') || (this.ch == ',') || (this.ch == '}') || (this.ch == ']') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\032') || (this.ch == '\f') || (this.ch == '\b'))
      {
        this.token = 8;
        return;
      }
      throw new JSONException("scan true error");
    }
    if (this.ch != 'e') {
      throw new JSONException("error parse e");
    }
    next();
    if (this.ch != 'w') {
      throw new JSONException("error parse w");
    }
    next();
    if ((this.ch == ' ') || (this.ch == ',') || (this.ch == '}') || (this.ch == ']') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\032') || (this.ch == '\f') || (this.ch == '\b'))
    {
      this.token = 9;
      return;
    }
    throw new JSONException("scan true error");
  }
  
  public final void scanNumber()
  {
    this.np = this.bp;
    if (this.ch == '-')
    {
      this.sp += 1;
      next();
    }
    while ((this.ch >= '0') && (this.ch <= '9'))
    {
      this.sp += 1;
      next();
    }
    int i = 0;
    if (this.ch == '.')
    {
      this.sp += 1;
      next();
      while ((this.ch >= '0') && (this.ch <= '9'))
      {
        this.sp += 1;
        next();
      }
      i = 1;
    }
    if (this.ch == 'L')
    {
      this.sp += 1;
      next();
    }
    while (i != 0)
    {
      this.token = 3;
      return;
      if (this.ch == 'S')
      {
        this.sp += 1;
        next();
      }
      else if (this.ch == 'B')
      {
        this.sp += 1;
        next();
      }
      else if (this.ch == 'F')
      {
        this.sp += 1;
        next();
        i = 1;
      }
      else if (this.ch == 'D')
      {
        this.sp += 1;
        next();
        i = 1;
      }
      else if ((this.ch == 'e') || (this.ch == 'E'))
      {
        this.sp += 1;
        next();
        if ((this.ch == '+') || (this.ch == '-'))
        {
          this.sp += 1;
          next();
        }
        while ((this.ch >= '0') && (this.ch <= '9'))
        {
          this.sp += 1;
          next();
        }
        if ((this.ch == 'D') || (this.ch == 'F'))
        {
          this.sp += 1;
          next();
        }
        i = 1;
      }
    }
    this.token = 2;
  }
  
  public final void scanSet()
  {
    if (this.ch != 'S') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'e') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 't') {
      throw new JSONException("error parse true");
    }
    next();
    if ((this.ch == ' ') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\f') || (this.ch == '\b') || (this.ch == '[') || (this.ch == '('))
    {
      this.token = 21;
      return;
    }
    throw new JSONException("scan set error");
  }
  
  public final void scanString()
  {
    this.np = this.bp;
    this.hasSpecial = false;
    for (;;)
    {
      int k = this.bp + 1;
      this.bp = k;
      char c = charAt(k);
      if (c == '"')
      {
        this.token = 4;
        k = this.bp + 1;
        this.bp = k;
        this.ch = charAt(k);
        return;
      }
      if (c == '\032') {
        throw new JSONException("unclosed string : " + c);
      }
      char[] arrayOfChar;
      if (c == '\\')
      {
        int m;
        if (!this.hasSpecial)
        {
          this.hasSpecial = true;
          if (this.sp >= this.sbuf.length)
          {
            m = this.sbuf.length * 2;
            k = m;
            if (this.sp > m) {
              k = this.sp;
            }
            arrayOfChar = new char[k];
            System.arraycopy(this.sbuf, 0, arrayOfChar, 0, this.sbuf.length);
            this.sbuf = arrayOfChar;
          }
          copyTo(this.np + 1, this.sp, this.sbuf);
        }
        k = this.bp + 1;
        this.bp = k;
        c = charAt(k);
        switch (c)
        {
        default: 
          this.ch = c;
          throw new JSONException("unclosed string : " + c);
        case '0': 
          putChar('\000');
          break;
        case '1': 
          putChar('\001');
          break;
        case '2': 
          putChar('\002');
          break;
        case '3': 
          putChar('\003');
          break;
        case '4': 
          putChar('\004');
          break;
        case '5': 
          putChar('\005');
          break;
        case '6': 
          putChar('\006');
          break;
        case '7': 
          putChar('\007');
          break;
        case 'b': 
          putChar('\b');
          break;
        case 't': 
          putChar('\t');
          break;
        case 'n': 
          putChar('\n');
          break;
        case 'v': 
          putChar('\013');
          break;
        case 'F': 
        case 'f': 
          putChar('\f');
          break;
        case 'r': 
          putChar('\r');
          break;
        case '"': 
          putChar('"');
          break;
        case '\'': 
          putChar('\'');
          break;
        case '/': 
          putChar('/');
          break;
        case '\\': 
          putChar('\\');
          break;
        case 'x': 
          k = this.bp + 1;
          this.bp = k;
          k = charAt(k);
          m = this.bp + 1;
          this.bp = m;
          m = charAt(m);
          putChar((char)(digits[k] * 16 + digits[m]));
          break;
        case 'u': 
          k = this.bp + 1;
          this.bp = k;
          c = charAt(k);
          k = this.bp + 1;
          this.bp = k;
          int i = charAt(k);
          k = this.bp + 1;
          this.bp = k;
          int j = charAt(k);
          k = this.bp + 1;
          this.bp = k;
          putChar((char)Integer.parseInt(new String(new char[] { c, i, j, charAt(k) }), 16));
          break;
        }
      }
      else if (!this.hasSpecial)
      {
        this.sp += 1;
      }
      else if (this.sp == this.sbuf.length)
      {
        putChar(c);
      }
      else
      {
        arrayOfChar = this.sbuf;
        k = this.sp;
        this.sp = (k + 1);
        arrayOfChar[k] = c;
      }
    }
  }
  
  public final void scanStringSingleQuote()
  {
    this.np = this.bp;
    this.hasSpecial = false;
    for (;;)
    {
      int k = this.bp + 1;
      this.bp = k;
      char c = charAt(k);
      if (c == '\'')
      {
        this.token = 4;
        next();
        return;
      }
      if (c == '\032') {
        throw new JSONException("unclosed single-quote string");
      }
      char[] arrayOfChar;
      if (c == '\\')
      {
        if (!this.hasSpecial)
        {
          this.hasSpecial = true;
          if (this.sp > this.sbuf.length)
          {
            arrayOfChar = new char[this.sp * 2];
            System.arraycopy(this.sbuf, 0, arrayOfChar, 0, this.sbuf.length);
            this.sbuf = arrayOfChar;
          }
          copyTo(this.np + 1, this.sp, this.sbuf);
        }
        k = this.bp + 1;
        this.bp = k;
        c = charAt(k);
        switch (c)
        {
        default: 
          this.ch = c;
          throw new JSONException("unclosed single-quote string");
        case '0': 
          putChar('\000');
          break;
        case '1': 
          putChar('\001');
          break;
        case '2': 
          putChar('\002');
          break;
        case '3': 
          putChar('\003');
          break;
        case '4': 
          putChar('\004');
          break;
        case '5': 
          putChar('\005');
          break;
        case '6': 
          putChar('\006');
          break;
        case '7': 
          putChar('\007');
          break;
        case 'b': 
          putChar('\b');
          break;
        case 't': 
          putChar('\t');
          break;
        case 'n': 
          putChar('\n');
          break;
        case 'v': 
          putChar('\013');
          break;
        case 'F': 
        case 'f': 
          putChar('\f');
          break;
        case 'r': 
          putChar('\r');
          break;
        case '"': 
          putChar('"');
          break;
        case '\'': 
          putChar('\'');
          break;
        case '/': 
          putChar('/');
          break;
        case '\\': 
          putChar('\\');
          break;
        case 'x': 
          k = this.bp + 1;
          this.bp = k;
          k = charAt(k);
          int m = this.bp + 1;
          this.bp = m;
          m = charAt(m);
          putChar((char)(digits[k] * 16 + digits[m]));
          break;
        case 'u': 
          k = this.bp + 1;
          this.bp = k;
          c = charAt(k);
          k = this.bp + 1;
          this.bp = k;
          int i = charAt(k);
          k = this.bp + 1;
          this.bp = k;
          int j = charAt(k);
          k = this.bp + 1;
          this.bp = k;
          putChar((char)Integer.parseInt(new String(new char[] { c, i, j, charAt(k) }), 16));
          break;
        }
      }
      else if (!this.hasSpecial)
      {
        this.sp += 1;
      }
      else if (this.sp == this.sbuf.length)
      {
        putChar(c);
      }
      else
      {
        arrayOfChar = this.sbuf;
        k = this.sp;
        this.sp = (k + 1);
        arrayOfChar[k] = c;
      }
    }
  }
  
  public final String scanSymbol(SymbolTable paramSymbolTable)
  {
    skipWhitespace();
    if (this.ch == '"') {
      return scanSymbol(paramSymbolTable, '"');
    }
    if (this.ch == '\'')
    {
      if (!isEnabled(Feature.AllowSingleQuotes)) {
        throw new JSONException("syntax error");
      }
      return scanSymbol(paramSymbolTable, '\'');
    }
    if (this.ch == '}')
    {
      next();
      this.token = 13;
      return null;
    }
    if (this.ch == ',')
    {
      next();
      this.token = 16;
      return null;
    }
    if (this.ch == '\032')
    {
      this.token = 20;
      return null;
    }
    if (!isEnabled(Feature.AllowUnQuotedFieldNames)) {
      throw new JSONException("syntax error");
    }
    return scanSymbolUnQuoted(paramSymbolTable);
  }
  
  public final String scanSymbol(SymbolTable paramSymbolTable, char paramChar)
  {
    this.np = this.bp;
    this.sp = 0;
    int m = 0;
    int j = 0;
    for (;;)
    {
      int k = this.bp + 1;
      this.bp = k;
      char c1 = charAt(k);
      if (c1 == paramChar)
      {
        this.token = 4;
        next();
        if (m != 0) {
          break;
        }
        return addSymbol(this.np + 1, this.sp, j, paramSymbolTable);
      }
      if (c1 == '\032') {
        throw new JSONException("unclosed.str");
      }
      char[] arrayOfChar;
      if (c1 == '\\')
      {
        k = m;
        if (m == 0)
        {
          if (this.sp >= this.sbuf.length)
          {
            m = this.sbuf.length * 2;
            k = m;
            if (this.sp > m) {
              k = this.sp;
            }
            arrayOfChar = new char[k];
            System.arraycopy(this.sbuf, 0, arrayOfChar, 0, this.sbuf.length);
            this.sbuf = arrayOfChar;
          }
          arrayCopy(this.np + 1, this.sbuf, 0, this.sp);
          k = 1;
        }
        m = this.bp + 1;
        this.bp = m;
        c1 = charAt(m);
        char c2;
        switch (c1)
        {
        default: 
          this.ch = c1;
          throw new JSONException("unclosed.str.lit");
        case '0': 
          j = j * 31 + c1;
          putChar('\000');
          m = k;
          break;
        case '1': 
          j = j * 31 + c1;
          putChar('\001');
          m = k;
          break;
        case '2': 
          j = j * 31 + c1;
          putChar('\002');
          m = k;
          break;
        case '3': 
          j = j * 31 + c1;
          putChar('\003');
          m = k;
          break;
        case '4': 
          j = j * 31 + c1;
          putChar('\004');
          m = k;
          break;
        case '5': 
          j = j * 31 + c1;
          putChar('\005');
          m = k;
          break;
        case '6': 
          j = j * 31 + c1;
          putChar('\006');
          m = k;
          break;
        case '7': 
          j = j * 31 + c1;
          putChar('\007');
          m = k;
          break;
        case 'b': 
          j = j * 31 + 8;
          putChar('\b');
          m = k;
          break;
        case 't': 
          j = j * 31 + 9;
          putChar('\t');
          m = k;
          break;
        case 'n': 
          j = j * 31 + 10;
          putChar('\n');
          m = k;
          break;
        case 'v': 
          j = j * 31 + 11;
          putChar('\013');
          m = k;
          break;
        case 'F': 
        case 'f': 
          j = j * 31 + 12;
          putChar('\f');
          m = k;
          break;
        case 'r': 
          j = j * 31 + 13;
          putChar('\r');
          m = k;
          break;
        case '"': 
          j = j * 31 + 34;
          putChar('"');
          m = k;
          break;
        case '\'': 
          j = j * 31 + 39;
          putChar('\'');
          m = k;
          break;
        case '/': 
          j = j * 31 + 47;
          putChar('/');
          m = k;
          break;
        case '\\': 
          j = j * 31 + 92;
          putChar('\\');
          m = k;
          break;
        case 'x': 
          m = this.bp + 1;
          this.bp = m;
          c1 = charAt(m);
          this.ch = c1;
          m = this.bp + 1;
          this.bp = m;
          c2 = charAt(m);
          this.ch = c2;
          c1 = (char)(digits[c1] * 16 + digits[c2]);
          j = j * 31 + c1;
          putChar(c1);
          m = k;
          break;
        case 'u': 
          m = this.bp + 1;
          this.bp = m;
          c1 = charAt(m);
          m = this.bp + 1;
          this.bp = m;
          c2 = charAt(m);
          m = this.bp + 1;
          this.bp = m;
          int i = charAt(m);
          m = this.bp + 1;
          this.bp = m;
          m = Integer.parseInt(new String(new char[] { c1, c2, i, charAt(m) }), 16);
          j = j * 31 + m;
          putChar((char)m);
          m = k;
          break;
        }
      }
      else
      {
        j = j * 31 + c1;
        if (m == 0)
        {
          this.sp += 1;
        }
        else if (this.sp == this.sbuf.length)
        {
          putChar(c1);
        }
        else
        {
          arrayOfChar = this.sbuf;
          k = this.sp;
          this.sp = (k + 1);
          arrayOfChar[k] = c1;
        }
      }
    }
    return paramSymbolTable.addSymbol(this.sbuf, 0, this.sp, j);
  }
  
  public final String scanSymbolUnQuoted(SymbolTable paramSymbolTable)
  {
    boolean[] arrayOfBoolean = CharTypes.firstIdentifierFlags;
    int j = this.ch;
    if ((this.ch < arrayOfBoolean.length) && (arrayOfBoolean[j] == 0)) {}
    for (int i = 0; i == 0; i = 1) {
      throw new JSONException("illegal identifier : " + this.ch);
    }
    arrayOfBoolean = CharTypes.identifierFlags;
    this.np = this.bp;
    this.sp = 1;
    i = j;
    for (;;)
    {
      j = this.bp + 1;
      this.bp = j;
      j = charAt(j);
      if ((j < arrayOfBoolean.length) && (arrayOfBoolean[j] == 0))
      {
        this.ch = charAt(this.bp);
        this.token = 18;
        if ((this.sp != 4) || (i != 3392903) || (charAt(this.np) != 'n') || (charAt(this.np + 1) != 'u') || (charAt(this.np + 2) != 'l') || (charAt(this.np + 3) != 'l')) {
          break;
        }
        return null;
      }
      i = i * 31 + j;
      this.sp += 1;
    }
    return addSymbol(this.np, this.sp, i, paramSymbolTable);
  }
  
  public final void scanTreeSet()
  {
    if (this.ch != 'T') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'r') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'e') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'e') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'S') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'e') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 't') {
      throw new JSONException("error parse true");
    }
    next();
    if ((this.ch == ' ') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\f') || (this.ch == '\b') || (this.ch == '[') || (this.ch == '('))
    {
      this.token = 22;
      return;
    }
    throw new JSONException("scan set error");
  }
  
  public final void scanTrue()
  {
    if (this.ch != 't') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'r') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'u') {
      throw new JSONException("error parse true");
    }
    next();
    if (this.ch != 'e') {
      throw new JSONException("error parse true");
    }
    next();
    if ((this.ch == ' ') || (this.ch == ',') || (this.ch == '}') || (this.ch == ']') || (this.ch == '\n') || (this.ch == '\r') || (this.ch == '\t') || (this.ch == '\032') || (this.ch == '\f') || (this.ch == '\b'))
    {
      this.token = 6;
      return;
    }
    throw new JSONException("scan true error");
  }
  
  public final void skipWhitespace()
  {
    while (whitespaceFlags[this.ch] != 0) {
      next();
    }
  }
  
  public abstract String stringVal();
  
  public final int token()
  {
    return this.token;
  }
  
  public final String tokenName()
  {
    return JSONToken.name(this.token);
  }
}
