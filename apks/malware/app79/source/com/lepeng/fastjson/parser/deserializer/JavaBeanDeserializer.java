package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.DefaultJSONParser.ResolveTask;
import com.lepeng.fastjson.parser.Feature;
import com.lepeng.fastjson.parser.JSONLexer;
import com.lepeng.fastjson.parser.JSONToken;
import com.lepeng.fastjson.parser.ParseContext;
import com.lepeng.fastjson.parser.ParserConfig;
import com.lepeng.fastjson.util.DeserializeBeanInfo;
import com.lepeng.fastjson.util.FieldInfo;
import com.lepeng.fastjson.util.TypeUtils;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class JavaBeanDeserializer
  implements ObjectDeserializer
{
  private DeserializeBeanInfo a;
  private final List<FieldDeserializer> c = new ArrayList();
  private final Class<?> clazz;
  private final Map<String, FieldDeserializer> d = new IdentityHashMap();
  
  public JavaBeanDeserializer(ParserConfig paramParserConfig, Class<?> paramClass)
  {
    this(paramParserConfig, paramClass, paramClass);
  }
  
  public JavaBeanDeserializer(ParserConfig paramParserConfig, Class<?> paramClass, Type paramType)
  {
    this.clazz = paramClass;
    this.a = DeserializeBeanInfo.computeSetters(paramClass, paramType);
    paramType = this.a.getFieldList().iterator();
    for (;;)
    {
      if (!paramType.hasNext()) {
        return;
      }
      a(paramParserConfig, paramClass, (FieldInfo)paramType.next());
    }
  }
  
  private void a(ParserConfig paramParserConfig, Class<?> paramClass, FieldInfo paramFieldInfo)
  {
    paramParserConfig = createFieldDeserializer(paramParserConfig, paramClass, paramFieldInfo);
    this.d.put(paramFieldInfo.getName().intern(), paramParserConfig);
    this.c.add(paramParserConfig);
  }
  
  public FieldDeserializer createFieldDeserializer(ParserConfig paramParserConfig, Class<?> paramClass, FieldInfo paramFieldInfo)
  {
    return paramParserConfig.createFieldDeserializer(paramParserConfig, paramClass, paramFieldInfo);
  }
  
  /* Error */
  public Object createInstance(DefaultJSONParser paramDefaultJSONParser, Type paramType)
  {
    // Byte code:
    //   0: aload_2
    //   1: instanceof 108
    //   4: ifeq +49 -> 53
    //   7: aload_0
    //   8: getfield 40	com/lepeng/fastjson/parser/deserializer/JavaBeanDeserializer:clazz	Ljava/lang/Class;
    //   11: invokevirtual 111	java/lang/Class:isInterface	()Z
    //   14: ifeq +39 -> 53
    //   17: aload_2
    //   18: checkcast 108	java/lang/Class
    //   21: astore_1
    //   22: invokestatic 117	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   25: invokevirtual 121	java/lang/Thread:getContextClassLoader	()Ljava/lang/ClassLoader;
    //   28: astore_2
    //   29: new 123	com/lepeng/fastjson/JSONObject
    //   32: dup
    //   33: invokespecial 124	com/lepeng/fastjson/JSONObject:<init>	()V
    //   36: astore_3
    //   37: aload_2
    //   38: iconst_1
    //   39: anewarray 108	java/lang/Class
    //   42: dup
    //   43: iconst_0
    //   44: aload_1
    //   45: aastore
    //   46: aload_3
    //   47: invokestatic 130	java/lang/reflect/Proxy:newProxyInstance	(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;
    //   50: astore_3
    //   51: aload_3
    //   52: areturn
    //   53: aload_0
    //   54: getfield 48	com/lepeng/fastjson/parser/deserializer/JavaBeanDeserializer:a	Lcom/lepeng/fastjson/util/DeserializeBeanInfo;
    //   57: invokevirtual 134	com/lepeng/fastjson/util/DeserializeBeanInfo:getDefaultConstructor	()Ljava/lang/reflect/Constructor;
    //   60: ifnonnull +5 -> 65
    //   63: aconst_null
    //   64: areturn
    //   65: aload_0
    //   66: getfield 48	com/lepeng/fastjson/parser/deserializer/JavaBeanDeserializer:a	Lcom/lepeng/fastjson/util/DeserializeBeanInfo;
    //   69: invokevirtual 134	com/lepeng/fastjson/util/DeserializeBeanInfo:getDefaultConstructor	()Ljava/lang/reflect/Constructor;
    //   72: astore_2
    //   73: aload_2
    //   74: invokevirtual 140	java/lang/reflect/Constructor:getParameterTypes	()[Ljava/lang/Class;
    //   77: arraylength
    //   78: ifne +109 -> 187
    //   81: aload_2
    //   82: iconst_0
    //   83: anewarray 4	java/lang/Object
    //   86: invokevirtual 144	java/lang/reflect/Constructor:newInstance	([Ljava/lang/Object;)Ljava/lang/Object;
    //   89: astore_2
    //   90: aload_2
    //   91: astore_3
    //   92: aload_1
    //   93: getstatic 150	com/lepeng/fastjson/parser/Feature:InitStringFieldAsEmpty	Lcom/lepeng/fastjson/parser/Feature;
    //   96: invokevirtual 156	com/lepeng/fastjson/parser/DefaultJSONParser:isEnabled	(Lcom/lepeng/fastjson/parser/Feature;)Z
    //   99: ifeq -48 -> 51
    //   102: aload_0
    //   103: getfield 48	com/lepeng/fastjson/parser/deserializer/JavaBeanDeserializer:a	Lcom/lepeng/fastjson/util/DeserializeBeanInfo;
    //   106: invokevirtual 52	com/lepeng/fastjson/util/DeserializeBeanInfo:getFieldList	()Ljava/util/List;
    //   109: invokeinterface 58 1 0
    //   114: astore_1
    //   115: aload_2
    //   116: astore_3
    //   117: aload_1
    //   118: invokeinterface 64 1 0
    //   123: ifeq -72 -> 51
    //   126: aload_1
    //   127: invokeinterface 68 1 0
    //   132: checkcast 70	com/lepeng/fastjson/util/FieldInfo
    //   135: astore_3
    //   136: aload_3
    //   137: invokevirtual 160	com/lepeng/fastjson/util/FieldInfo:getFieldClass	()Ljava/lang/Class;
    //   140: ldc 84
    //   142: if_acmpne -27 -> 115
    //   145: aload_3
    //   146: aload_2
    //   147: ldc -94
    //   149: invokevirtual 166	com/lepeng/fastjson/util/FieldInfo:set	(Ljava/lang/Object;Ljava/lang/Object;)V
    //   152: goto -37 -> 115
    //   155: astore_1
    //   156: new 168	com/lepeng/fastjson/JSONException
    //   159: dup
    //   160: new 170	java/lang/StringBuilder
    //   163: dup
    //   164: ldc -84
    //   166: invokespecial 175	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   169: aload_0
    //   170: getfield 40	com/lepeng/fastjson/parser/deserializer/JavaBeanDeserializer:clazz	Ljava/lang/Class;
    //   173: invokevirtual 176	java/lang/Class:getName	()Ljava/lang/String;
    //   176: invokevirtual 180	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   179: invokevirtual 183	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   182: aload_1
    //   183: invokespecial 186	com/lepeng/fastjson/JSONException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   186: athrow
    //   187: aload_2
    //   188: iconst_1
    //   189: anewarray 4	java/lang/Object
    //   192: dup
    //   193: iconst_0
    //   194: aload_1
    //   195: invokevirtual 190	com/lepeng/fastjson/parser/DefaultJSONParser:getContext	()Lcom/lepeng/fastjson/parser/ParseContext;
    //   198: invokevirtual 195	com/lepeng/fastjson/parser/ParseContext:getObject	()Ljava/lang/Object;
    //   201: aastore
    //   202: invokevirtual 144	java/lang/reflect/Constructor:newInstance	([Ljava/lang/Object;)Ljava/lang/Object;
    //   205: astore_2
    //   206: goto -116 -> 90
    //   209: astore_1
    //   210: new 168	com/lepeng/fastjson/JSONException
    //   213: dup
    //   214: new 170	java/lang/StringBuilder
    //   217: dup
    //   218: ldc -84
    //   220: invokespecial 175	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   223: aload_0
    //   224: getfield 40	com/lepeng/fastjson/parser/deserializer/JavaBeanDeserializer:clazz	Ljava/lang/Class;
    //   227: invokevirtual 176	java/lang/Class:getName	()Ljava/lang/String;
    //   230: invokevirtual 180	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   233: invokevirtual 183	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   236: aload_1
    //   237: invokespecial 186	com/lepeng/fastjson/JSONException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   240: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	241	0	this	JavaBeanDeserializer
    //   0	241	1	paramDefaultJSONParser	DefaultJSONParser
    //   0	241	2	paramType	Type
    //   36	110	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   145	152	155	java/lang/Exception
    //   65	90	209	java/lang/Exception
    //   187	206	209	java/lang/Exception
  }
  
  public <T> T deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    return deserialze(paramDefaultJSONParser, paramType, paramObject, null);
  }
  
  public <T> T deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject1, Object paramObject2)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    if (localJSONLexer.token() == 8)
    {
      localJSONLexer.nextToken(16);
      return null;
    }
    ParseContext localParseContext = paramDefaultJSONParser.getContext();
    Object localObject3;
    Object localObject4;
    String str;
    Object localObject2;
    Object localObject1;
    if (paramObject2 != null)
    {
      localParseContext = localParseContext.getParentContext();
      localObject3 = null;
      localObject4 = null;
      str = null;
      localObject2 = localObject4;
      localObject1 = paramObject2;
      try
      {
        if (localJSONLexer.token() == 13)
        {
          localObject2 = localObject4;
          localObject1 = paramObject2;
          localJSONLexer.nextToken(16);
          paramObject1 = paramObject2;
          if (paramObject2 == null)
          {
            localObject2 = localObject4;
            localObject1 = paramObject2;
            paramObject1 = createInstance(paramDefaultJSONParser, paramType);
          }
          if (0 != 0) {
            throw new NullPointerException();
          }
          paramDefaultJSONParser.setContext(localParseContext);
          return paramObject1;
        }
        localObject2 = localObject4;
        localObject1 = paramObject2;
        if (localJSONLexer.token() != 12)
        {
          localObject2 = localObject4;
          localObject1 = paramObject2;
          if (localJSONLexer.token() != 16)
          {
            localObject2 = localObject4;
            localObject1 = paramObject2;
            paramType = new StringBuffer().append("syntax error, expect {, actual ").append(localJSONLexer.tokenName()).append(", pos ").append(localJSONLexer.pos());
            localObject2 = localObject4;
            localObject1 = paramObject2;
            if ((paramObject1 instanceof String))
            {
              localObject2 = localObject4;
              localObject1 = paramObject2;
              paramType.append(", fieldName ").append(paramObject1);
            }
            localObject2 = localObject4;
            throw new JSONException(paramType.toString());
          }
        }
      }
      finally
      {
        paramObject2 = localObject2;
      }
    }
    for (;;)
    {
      if (paramObject2 != null) {
        paramObject2.setObject(localObject1);
      }
      paramDefaultJSONParser.setContext(localParseContext);
      throw paramType;
      localObject2 = localObject4;
      localObject1 = paramObject2;
      if (paramDefaultJSONParser.getResolveStatus() == 2)
      {
        localObject2 = localObject4;
        localObject1 = paramObject2;
        paramDefaultJSONParser.setResolveStatus(0);
      }
      localObject2 = str;
      localObject1 = paramObject2;
      paramObject2 = localObject3;
      for (;;)
      {
        try
        {
          label326:
          str = localJSONLexer.scanSymbol(paramDefaultJSONParser.getSymbolTable());
          if (str == null) {
            if (localJSONLexer.token() == 13)
            {
              localJSONLexer.nextToken(16);
              paramObject1 = localObject1;
              label362:
              if (paramObject1 != null) {
                break label1307;
              }
              if (localObject2 != null) {
                break label1091;
              }
            }
          }
        }
        finally {}
        try
        {
          paramType = createInstance(paramDefaultJSONParser, paramType);
          if (paramObject2 != null) {
            paramObject2.setObject(paramType);
          }
          paramDefaultJSONParser.setContext(localParseContext);
          return paramType;
        }
        finally
        {
          localObject1 = paramObject1;
        }
        if ((localJSONLexer.token() != 16) || (!paramDefaultJSONParser.isEnabled(Feature.AllowArbitraryCommas)))
        {
          if ("$ref" == str)
          {
            localJSONLexer.nextTokenWithColon(4);
            if (localJSONLexer.token() == 4)
            {
              localObject2 = localJSONLexer.stringVal();
              if ("@".equals(localObject2))
              {
                paramType = localParseContext.getObject();
                localObject2 = paramObject2;
                localObject1 = paramType;
                localJSONLexer.nextToken(13);
                localObject2 = paramObject2;
                localObject1 = paramType;
                if (localJSONLexer.token() != 13)
                {
                  localObject2 = paramObject2;
                  localObject1 = paramType;
                  throw new JSONException("illegal ref");
                }
              }
              else
              {
                if ("..".equals(localObject2))
                {
                  paramType = localParseContext.getParentContext();
                  if (paramType.getObject() != null)
                  {
                    paramType = paramType.getObject();
                    continue;
                  }
                  paramDefaultJSONParser.addResolveTask(new DefaultJSONParser.ResolveTask(paramType, (String)localObject2));
                  paramDefaultJSONParser.setResolveStatus(1);
                  paramType = (Type)localObject1;
                  continue;
                }
                if ("$".equals(localObject2))
                {
                  paramType = localParseContext;
                  if (paramType.getParentContext() == null)
                  {
                    if (paramType.getObject() != null) {
                      paramType = paramType.getObject();
                    }
                  }
                  else
                  {
                    paramType = paramType.getParentContext();
                    continue;
                  }
                  paramDefaultJSONParser.addResolveTask(new DefaultJSONParser.ResolveTask(paramType, (String)localObject2));
                  paramDefaultJSONParser.setResolveStatus(1);
                  paramType = (Type)localObject1;
                  continue;
                }
                paramDefaultJSONParser.addResolveTask(new DefaultJSONParser.ResolveTask(localParseContext, (String)localObject2));
                paramDefaultJSONParser.setResolveStatus(1);
                paramType = (Type)localObject1;
                continue;
              }
            }
            else
            {
              throw new JSONException("illegal ref, " + JSONToken.name(localJSONLexer.token()));
              break;
            }
            localObject2 = paramObject2;
            localObject1 = paramType;
            localJSONLexer.nextToken(16);
            localObject2 = paramObject2;
            localObject1 = paramType;
            paramDefaultJSONParser.setContext(localParseContext, paramType, paramObject1);
            if (paramObject2 != null) {
              paramObject2.setObject(paramType);
            }
            paramDefaultJSONParser.setContext(localParseContext);
            return paramType;
          }
          if (JSON.DEFAULT_TYPE_KEY != str) {
            break label884;
          }
          localJSONLexer.nextTokenWithColon(4);
          if (localJSONLexer.token() != 4) {
            break label873;
          }
          localObject3 = localJSONLexer.stringVal();
          localJSONLexer.nextToken(16);
          if ((!(paramType instanceof Class)) || (!((String)localObject3).equals(((Class)paramType).getName()))) {
            break label830;
          }
          if (localJSONLexer.token() == 13)
          {
            localJSONLexer.nextToken();
            paramObject1 = localObject1;
          }
        }
      }
      label830:
      paramType = TypeUtils.loadClass((String)localObject3);
      paramType = paramDefaultJSONParser.getConfig().getDeserializer(paramType).deserialze(paramDefaultJSONParser, paramType, paramObject1);
      if (paramObject2 != null) {
        paramObject2.setObject(localObject1);
      }
      paramDefaultJSONParser.setContext(localParseContext);
      return paramType;
      label873:
      throw new JSONException("syntax error");
      label884:
      if ((localObject1 == null) && (localObject2 == null))
      {
        localObject3 = createInstance(paramDefaultJSONParser, paramType);
        localObject4 = localObject2;
        if (localObject3 == null)
        {
          localObject2 = paramObject2;
          localObject1 = localObject3;
          localObject4 = new HashMap(this.c.size());
        }
        localObject2 = paramObject2;
        localObject1 = localObject3;
        paramObject2 = paramDefaultJSONParser.setContext(localParseContext, localObject3, paramObject1);
        localObject1 = localObject3;
        localObject2 = localObject4;
      }
      for (;;)
      {
        try
        {
          if (!parseField(paramDefaultJSONParser, str, localObject1, paramType, (Map)localObject2))
          {
            if (localJSONLexer.token() != 13) {
              break label1312;
            }
            localJSONLexer.nextToken();
            paramObject1 = localObject1;
            break label362;
          }
          if (localJSONLexer.token() == 16) {
            break label326;
          }
          if (localJSONLexer.token() == 13)
          {
            localJSONLexer.nextToken(16);
            paramObject1 = localObject1;
            break label362;
          }
          if ((localJSONLexer.token() != 18) && (localJSONLexer.token() != 1)) {
            break label1312;
          }
          throw new JSONException("syntax error, unexpect token " + JSONToken.name(localJSONLexer.token()));
        }
        finally {}
        break;
        label1091:
        localObject1 = this.a.getFieldList();
        int j = ((List)localObject1).size();
        paramType = new Object[j];
        int i = 0;
        if (i >= j)
        {
          localObject1 = this.a.getCreatorConstructor();
          if (localObject1 == null) {
            break label1241;
          }
        }
        for (;;)
        {
          try
          {
            paramType = this.a.getCreatorConstructor().newInstance(paramType);
            if (paramObject2 != null) {
              paramObject2.setObject(paramType);
            }
            paramDefaultJSONParser.setContext(localParseContext);
            return paramType;
          }
          catch (Exception paramType)
          {
            throw new JSONException("create instance error, " + this.a.getCreatorConstructor().toGenericString(), paramType);
          }
          paramType[i] = ((Map)localObject2).get(((FieldInfo)((List)localObject1).get(i)).getName());
          i += 1;
          break;
          label1241:
          localObject1 = this.a.getFactoryMethod();
          if (localObject1 != null) {
            try
            {
              paramType = this.a.getFactoryMethod().invoke(null, paramType);
            }
            catch (Exception paramType)
            {
              throw new JSONException("create factory method error, " + this.a.getFactoryMethod().toString(), paramType);
            }
          } else {
            label1307:
            paramType = paramObject1;
          }
        }
        label1312:
        break label326;
      }
      break;
    }
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
  
  public Map<String, FieldDeserializer> getFieldDeserializerMap()
  {
    return this.d;
  }
  
  public boolean parseField(DefaultJSONParser paramDefaultJSONParser, String paramString, Object paramObject, Type paramType, Map<String, Object> paramMap)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    FieldDeserializer localFieldDeserializer = (FieldDeserializer)this.d.get(paramString);
    Object localObject = localFieldDeserializer;
    if (localFieldDeserializer == null)
    {
      localObject = this.d.entrySet().iterator();
      if (((Iterator)localObject).hasNext()) {
        break label116;
      }
      localObject = localFieldDeserializer;
    }
    for (;;)
    {
      if (localObject == null)
      {
        if (!paramDefaultJSONParser.isEnabled(Feature.IgnoreNotMatch))
        {
          throw new JSONException("setter not found, class " + this.clazz.getName() + ", property " + paramString);
          label116:
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
          if (!((String)localEntry.getKey()).equalsIgnoreCase(paramString)) {
            break;
          }
          localObject = (FieldDeserializer)localEntry.getValue();
          continue;
        }
        localJSONLexer.nextTokenWithColon();
        paramDefaultJSONParser.parse();
        return false;
      }
    }
    localJSONLexer.nextTokenWithColon(((FieldDeserializer)localObject).getFastMatchToken());
    ((FieldDeserializer)localObject).parseField(paramDefaultJSONParser, paramObject, paramType, paramMap);
    return true;
  }
}
