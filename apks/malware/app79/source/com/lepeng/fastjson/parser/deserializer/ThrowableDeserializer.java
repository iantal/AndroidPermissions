package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONException;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.Feature;
import com.lepeng.fastjson.parser.JSONLexer;
import com.lepeng.fastjson.parser.ParserConfig;
import com.lepeng.fastjson.util.TypeUtils;
import java.lang.reflect.Constructor;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

public class ThrowableDeserializer
  extends JavaBeanDeserializer
{
  public ThrowableDeserializer(ParserConfig paramParserConfig, Class<?> paramClass)
  {
    super(paramParserConfig, paramClass);
  }
  
  private Throwable a(String paramString, Throwable paramThrowable, Class<?> paramClass)
  {
    Object localObject2 = null;
    Object localObject1 = null;
    Constructor[] arrayOfConstructor = paramClass.getConstructors();
    int j = arrayOfConstructor.length;
    int i = 0;
    Object localObject3 = null;
    paramClass = (Class<?>)localObject2;
    if (i >= j)
    {
      if (localObject3 != null) {
        return (Throwable)localObject3.newInstance(new Object[] { paramString, paramThrowable });
      }
    }
    else
    {
      localObject2 = arrayOfConstructor[i];
      if (((Constructor)localObject2).getParameterTypes().length == 0)
      {
        paramClass = (Class<?>)localObject1;
        localObject1 = localObject2;
      }
    }
    for (;;)
    {
      i += 1;
      localObject2 = localObject1;
      localObject1 = paramClass;
      paramClass = (Class<?>)localObject2;
      break;
      if ((((Constructor)localObject2).getParameterTypes().length == 1) && (localObject2.getParameterTypes()[0] == String.class))
      {
        localObject1 = paramClass;
        paramClass = (Class<?>)localObject2;
      }
      else if ((((Constructor)localObject2).getParameterTypes().length == 2) && (localObject2.getParameterTypes()[0] == String.class) && (localObject2.getParameterTypes()[1] == Throwable.class))
      {
        Class<?> localClass = paramClass;
        localObject3 = localObject2;
        paramClass = (Class<?>)localObject1;
        localObject1 = localClass;
        continue;
        if (localObject1 != null) {
          return (Throwable)((Constructor)localObject1).newInstance(new Object[] { paramString });
        }
        if (paramClass != null) {
          return (Throwable)paramClass.newInstance(new Object[0]);
        }
        return null;
      }
      else
      {
        localObject2 = paramClass;
        paramClass = (Class<?>)localObject1;
        localObject1 = localObject2;
      }
    }
  }
  
  public <T> T deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    JSONLexer localJSONLexer = paramDefaultJSONParser.getLexer();
    if (localJSONLexer.token() == 8)
    {
      localJSONLexer.nextToken();
      paramObject = null;
      return paramObject;
    }
    if (paramDefaultJSONParser.getResolveStatus() == 2)
    {
      paramDefaultJSONParser.setResolveStatus(0);
      label38:
      paramObject = null;
      if ((paramType == null) || (!(paramType instanceof Class))) {
        break label503;
      }
      paramType = (Class)paramType;
      if (!Throwable.class.isAssignableFrom(paramType)) {
        break label503;
      }
    }
    for (;;)
    {
      Object localObject2 = null;
      Object localObject3 = null;
      HashMap localHashMap = new HashMap();
      Object localObject1 = paramType;
      paramType = (Type)localObject3;
      for (;;)
      {
        label86:
        localObject3 = localJSONLexer.scanSymbol(paramDefaultJSONParser.getSymbolTable());
        if (localObject3 == null) {
          if (localJSONLexer.token() == 13)
          {
            localJSONLexer.nextToken(16);
            localObject3 = paramObject;
            paramObject = localObject2;
            if (localObject1 != null) {
              break label445;
            }
            paramDefaultJSONParser = new Exception(paramObject, (Throwable)localObject3);
          }
        }
        for (;;)
        {
          label141:
          paramObject = paramDefaultJSONParser;
          if (paramType == null) {
            break;
          }
          paramDefaultJSONParser.setStackTrace(paramType);
          return paramDefaultJSONParser;
          if (localJSONLexer.token() == 12) {
            break label38;
          }
          throw new JSONException("syntax error");
          if ((localJSONLexer.token() == 16) && (localJSONLexer.isEnabled(Feature.AllowArbitraryCommas))) {
            break label86;
          }
          localJSONLexer.nextTokenWithColon(4);
          if (JSON.DEFAULT_TYPE_KEY.equals(localObject3)) {
            if (localJSONLexer.token() == 4)
            {
              localObject1 = TypeUtils.loadClass(localJSONLexer.stringVal());
              localJSONLexer.nextToken(16);
              localObject3 = localObject2;
              localObject2 = paramObject;
              paramObject = localObject3;
            }
          }
          for (;;)
          {
            if (localJSONLexer.token() == 13)
            {
              localJSONLexer.nextToken(16);
              localObject3 = localObject2;
              break;
              throw new JSONException("syntax error");
              if ("message".equals(localObject3))
              {
                if (localJSONLexer.token() == 8) {}
                for (localObject2 = null;; localObject2 = localJSONLexer.stringVal())
                {
                  localJSONLexer.nextToken();
                  localObject3 = paramObject;
                  paramObject = localObject2;
                  localObject2 = localObject3;
                  break;
                  if (localJSONLexer.token() != 4) {
                    break label342;
                  }
                }
                label342:
                throw new JSONException("syntax error");
              }
              if ("cause".equals(localObject3))
              {
                localObject3 = (Throwable)deserialze(paramDefaultJSONParser, null, "cause");
                paramObject = localObject2;
                localObject2 = localObject3;
              }
              else if ("stackTrace".equals(localObject3))
              {
                paramType = (StackTraceElement[])paramDefaultJSONParser.parseObject([Ljava.lang.StackTraceElement.class);
                localObject3 = paramObject;
                paramObject = localObject2;
                localObject2 = localObject3;
              }
              else
              {
                localHashMap.put(localObject3, paramDefaultJSONParser.parse());
                localObject3 = paramObject;
                paramObject = localObject2;
                localObject2 = localObject3;
                continue;
                try
                {
                  label445:
                  localObject1 = a(paramObject, (Throwable)localObject3, (Class)localObject1);
                  paramDefaultJSONParser = (DefaultJSONParser)localObject1;
                  if (localObject1 != null) {
                    break label141;
                  }
                  paramDefaultJSONParser = new Exception(paramObject, (Throwable)localObject3);
                }
                catch (Exception paramDefaultJSONParser)
                {
                  throw new JSONException("create instance error", paramDefaultJSONParser);
                }
              }
            }
          }
        }
        localObject3 = localObject2;
        localObject2 = paramObject;
        paramObject = localObject3;
      }
      label503:
      paramType = null;
    }
  }
  
  public int getFastMatchToken()
  {
    return 12;
  }
}
