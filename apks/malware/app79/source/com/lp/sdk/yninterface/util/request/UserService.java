package com.lp.sdk.yninterface.util.request;

import com.lepeng.data.UtilApplication;
import com.lepeng.utils.L;
import com.lepeng.utils.MResource;
import com.lepeng.utils.NetworkUtil;
import com.lepeng.utils.StrUtil;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import com.lepeng.utils.http.HttpUtil;
import com.lepeng.utils.reflect.RefUtil;
import com.lp.sdk.yninterface.data.EnumData.ErrorCodeType;
import com.lp.sdk.yninterface.data.EnumData.HttpServer;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class UserService
{
  private static boolean C = true;
  public static String SERV_IP = EnumData.HttpServer.SERV_HOST.strName();
  private static String URL;
  private static HttpUtil b;
  
  public UserService() {}
  
  private static Object a(ServiceParams paramServiceParams)
  {
    return getHttpUtil().postSync(URL + "/" + paramServiceParams.getRtype(), paramServiceParams);
  }
  
  private static void a(ServiceParams paramServiceParams, ServiceRequester paramServiceRequester)
  {
    getHttpUtil().post(URL + "/" + paramServiceParams.getRtype(), paramServiceParams, paramServiceRequester);
  }
  
  private static void a(ServiceParams paramServiceParams, Map<String, ?> paramMap)
  {
    Iterator localIterator = paramMap.keySet().iterator();
    if (!localIterator.hasNext())
    {
      paramMap = new HashMap();
      localIterator = paramServiceParams.urlParams.keySet().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        return;
        str = (String)localIterator.next();
        if ((str.equalsIgnoreCase("paramString")) || (str.equalsIgnoreCase("requestString")) || (str.equalsIgnoreCase("fileParams")) || (str.equalsIgnoreCase("httpEntity")) || (str.equalsIgnoreCase("urlParams"))) {
          break;
        }
        Object localObject = paramMap.get(str);
        if (localObject == null) {
          break;
        }
        paramServiceParams.put(str, localObject.toString());
        break;
      }
      String str = (String)localIterator.next();
      try
      {
        paramMap.put(str, new String[] { URLEncoder.encode((String)paramServiceParams.urlParams.get(str), "UTF-8") });
      }
      catch (Exception localException)
      {
        CheckedExceptionHandler.handleException(localException);
      }
    }
  }
  
  public static boolean getDataFromServer(ServiceParams paramServiceParams, ServiceRequester paramServiceRequester)
  {
    return getDataFromServer(null, paramServiceParams, paramServiceRequester);
  }
  
  public static boolean getDataFromServer(Boolean paramBoolean, ServiceParams paramServiceParams, ServiceRequester paramServiceRequester)
  {
    if (!NetworkUtil.detect(UtilApplication.getInstance().ctx))
    {
      L.toastShort(MResource.getIdByName(UtilApplication.getInstance().ctx, "string", "tip_no_network"));
      paramServiceRequester.onFailure(new IllegalArgumentException("no network"), "no network");
      return false;
    }
    if (paramServiceParams == null)
    {
      paramServiceRequester.onFailure(new IllegalArgumentException("you must input a serviceparams to get data"), "you must input a serviceparams to get data");
      return false;
    }
    L.i(paramServiceParams.getRtype() + " paramString [" + paramServiceParams + "]");
    Map localMap = RefUtil.getFieldValueMap(paramServiceParams);
    if (localMap == null)
    {
      paramServiceRequester.onFailure(new IllegalArgumentException("you must input a correct serviceparams to get data"), "you must input a correct serviceparams to get data");
      return false;
    }
    if ((paramBoolean == null) || (!paramBoolean.booleanValue())) {
      paramServiceRequester.setbShowDlg(false);
    }
    for (;;)
    {
      a(paramServiceParams, localMap);
      a(paramServiceParams, paramServiceRequester);
      return true;
      paramServiceRequester.setbShowDlg(true);
    }
  }
  
  public static HttpUtil getHttpUtil()
  {
    if (C)
    {
      initServer(SERV_IP);
      C = false;
    }
    if (b == null) {
      b = HttpUtil.getInstance();
    }
    return b;
  }
  
  public static ResultEx getSyncInfo(ServiceParams paramServiceParams)
  {
    Object localObject = RefUtil.getFieldValueMap(paramServiceParams);
    if (localObject == null) {
      paramServiceParams = null;
    }
    do
    {
      return paramServiceParams;
      a(paramServiceParams, (Map)localObject);
      paramServiceParams = (String)a(paramServiceParams);
      if (StrUtil.isEmptyOrNull(paramServiceParams)) {
        return null;
      }
      localObject = (ResultEx)ResultEx.fromString(ResultEx.class, paramServiceParams.trim());
      paramServiceParams = (ServiceParams)localObject;
    } while (localObject != null);
    L.e(EnumData.ErrorCodeType.ILLEGAL_DATA_FORMAT.strName());
    return null;
  }
  
  public static void initServer(String paramString)
  {
    URL = "http://" + paramString;
  }
  
  public static void resetHttp()
  {
    if (b != null) {
      b.resetHttp();
    }
  }
}
