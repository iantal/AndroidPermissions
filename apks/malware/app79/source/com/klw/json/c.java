package com.klw.json;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class c
{
  public static final Object a = new d(null);
  private final Map<String, Object> b = new HashMap();
  
  public c() {}
  
  public c(f paramF)
  {
    this();
    if (paramF.d() != '{') {
      throw paramF.a("A JSONObject text must begin with '{'");
    }
    do
    {
      paramF.a();
      String str;
      switch (paramF.d())
      {
      default: 
        paramF.a();
        str = paramF.e().toString();
        if (paramF.d() != ':') {
          throw paramF.a("Expected a ':' after a key");
        }
      case '\000': 
        throw paramF.a("A JSONObject text must end with '}'");
        b(str, paramF.e());
        switch (paramF.d())
        {
        default: 
          throw paramF.a("Expected a ',' or '}'");
        }
        break;
      }
    } while (paramF.d() != '}');
  }
  
  public c(Object paramObject)
  {
    this();
    c(paramObject);
  }
  
  public c(Map<String, Object> paramMap)
  {
    if (paramMap != null) {
      paramMap = paramMap.entrySet().iterator();
    }
    for (;;)
    {
      if (!paramMap.hasNext()) {
        return;
      }
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      Object localObject = localEntry.getValue();
      if (localObject != null) {
        this.b.put((String)localEntry.getKey(), b(localObject));
      }
    }
  }
  
  static final Writer a(Writer paramWriter, Object paramObject, int paramInt1, int paramInt2)
  {
    if ((paramObject == null) || (paramObject.equals(null)))
    {
      paramWriter.write("null");
      return paramWriter;
    }
    if ((paramObject instanceof c))
    {
      ((c)paramObject).a(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof a))
    {
      ((a)paramObject).a(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof Map))
    {
      new c((Map)paramObject).a(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof Collection))
    {
      new a((Collection)paramObject).a(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if (paramObject.getClass().isArray())
    {
      new a(paramObject).a(paramWriter, paramInt1, paramInt2);
      return paramWriter;
    }
    if ((paramObject instanceof Number))
    {
      paramWriter.write(a((Number)paramObject));
      return paramWriter;
    }
    if ((paramObject instanceof Boolean))
    {
      paramWriter.write(paramObject.toString());
      return paramWriter;
    }
    if ((paramObject instanceof e)) {
      for (;;)
      {
        try
        {
          String str = ((e)paramObject).a();
          if (str != null)
          {
            paramObject = str.toString();
            paramWriter.write(paramObject);
            return paramWriter;
          }
        }
        catch (Exception paramWriter)
        {
          throw new b(paramWriter);
        }
        paramObject = d(paramObject.toString());
      }
    }
    a(paramObject.toString(), paramWriter);
    return paramWriter;
  }
  
  public static Writer a(String paramString, Writer paramWriter)
  {
    if ((paramString == null) || (paramString.length() == 0))
    {
      paramWriter.write("\"\"");
      return paramWriter;
    }
    int m = paramString.length();
    paramWriter.write(34);
    int i = 0;
    int j = 0;
    if (i >= m)
    {
      paramWriter.write(34);
      return paramWriter;
    }
    int k = paramString.charAt(i);
    switch (k)
    {
    default: 
      if ((k < 32) || ((k >= 128) && (k < 160)) || ((k >= 8192) && (k < 8448)))
      {
        paramWriter.write("\\u");
        String str = Integer.toHexString(k);
        paramWriter.write("0000", 0, 4 - str.length());
        paramWriter.write(str);
      }
      break;
    }
    for (;;)
    {
      i += 1;
      j = k;
      break;
      paramWriter.write(92);
      paramWriter.write(k);
      continue;
      if (j == 60) {
        paramWriter.write(92);
      }
      paramWriter.write(k);
      continue;
      paramWriter.write("\\b");
      continue;
      paramWriter.write("\\t");
      continue;
      paramWriter.write("\\n");
      continue;
      paramWriter.write("\\f");
      continue;
      paramWriter.write("\\r");
      continue;
      paramWriter.write(k);
    }
  }
  
  public static String a(Number paramNumber)
  {
    if (paramNumber == null) {
      throw new b("Null pointer");
    }
    a(paramNumber);
    String str = paramNumber.toString();
    paramNumber = str;
    if (str.indexOf('.') > 0)
    {
      paramNumber = str;
      if (str.indexOf('e') < 0)
      {
        paramNumber = str;
        if (str.indexOf('E') >= 0) {}
      }
    }
    for (;;)
    {
      if (!str.endsWith("0"))
      {
        paramNumber = str;
        if (str.endsWith(".")) {
          paramNumber = str.substring(0, str.length() - 1);
        }
        return paramNumber;
      }
      str = str.substring(0, str.length() - 1);
    }
  }
  
  static final void a(Writer paramWriter, int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {
        return;
      }
      paramWriter.write(32);
      i += 1;
    }
  }
  
  public static void a(Object paramObject)
  {
    if (paramObject != null) {
      if ((paramObject instanceof Double))
      {
        if ((((Double)paramObject).isInfinite()) || (((Double)paramObject).isNaN())) {
          throw new b("JSON does not allow non-finite numbers.");
        }
      }
      else if (((paramObject instanceof Float)) && ((((Float)paramObject).isInfinite()) || (((Float)paramObject).isNaN()))) {
        throw new b("JSON does not allow non-finite numbers.");
      }
    }
  }
  
  public static Object b(Object paramObject)
  {
    if (paramObject == null) {}
    try
    {
      return a;
    }
    catch (Exception paramObject)
    {
      localObject = null;
    }
    Object localObject = paramObject;
    if (!(paramObject instanceof c))
    {
      localObject = paramObject;
      if (!(paramObject instanceof a))
      {
        localObject = paramObject;
        if (!a.equals(paramObject))
        {
          localObject = paramObject;
          if (!(paramObject instanceof e))
          {
            localObject = paramObject;
            if (!(paramObject instanceof Byte))
            {
              localObject = paramObject;
              if (!(paramObject instanceof Character))
              {
                localObject = paramObject;
                if (!(paramObject instanceof Short))
                {
                  localObject = paramObject;
                  if (!(paramObject instanceof Integer))
                  {
                    localObject = paramObject;
                    if (!(paramObject instanceof Long))
                    {
                      localObject = paramObject;
                      if (!(paramObject instanceof Boolean))
                      {
                        localObject = paramObject;
                        if (!(paramObject instanceof Float))
                        {
                          localObject = paramObject;
                          if (!(paramObject instanceof Double))
                          {
                            localObject = paramObject;
                            if (!(paramObject instanceof String))
                            {
                              if ((paramObject instanceof Collection)) {
                                return new a((Collection)paramObject);
                              }
                              if (paramObject.getClass().isArray()) {
                                return new a(paramObject);
                              }
                              if ((paramObject instanceof Map)) {
                                return new c((Map)paramObject);
                              }
                              localObject = paramObject.getClass().getPackage();
                              if (localObject == null) {
                                break label253;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    label253:
    for (localObject = ((Package)localObject).getName();; localObject = "")
    {
      if ((((String)localObject).startsWith("java.")) || (((String)localObject).startsWith("javax.")) || (paramObject.getClass().getClassLoader() == null)) {
        return paramObject.toString();
      }
      paramObject = new c(paramObject);
      return paramObject;
      return localObject;
    }
  }
  
  private void c(Object paramObject)
  {
    int j = 0;
    Object localObject1 = paramObject.getClass();
    int i;
    Method[] arrayOfMethod;
    if (((Class)localObject1).getClassLoader() != null)
    {
      i = 1;
      if (i == 0) {
        break label44;
      }
      arrayOfMethod = ((Class)localObject1).getMethods();
      i = j;
    }
    label44:
    label200:
    label211:
    label291:
    label299:
    for (;;)
    {
      if (i >= arrayOfMethod.length)
      {
        return;
        i = 0;
        break;
        arrayOfMethod = ((Class)localObject1).getDeclaredMethods();
        i = j;
        continue;
      }
      Method localMethod = arrayOfMethod[i];
      try
      {
        if (!Modifier.isPublic(localMethod.getModifiers())) {
          break label299;
        }
        localObject2 = localMethod.getName();
        localObject1 = "";
        if (!((String)localObject2).startsWith("get")) {
          break label211;
        }
        if ("getClass".equals(localObject2)) {
          break label291;
        }
        if (!"getDeclaringClass".equals(localObject2)) {
          break label200;
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Object localObject2;
          break;
          String str = "";
        }
        i += 1;
      }
      if ((((String)localObject1).length() > 0) && (Character.isUpperCase(((String)localObject1).charAt(0))) && (localMethod.getParameterTypes().length == 0))
      {
        if (((String)localObject1).length() == 1) {
          localObject2 = ((String)localObject1).toLowerCase();
        }
        for (;;)
        {
          localObject1 = localMethod.invoke(paramObject, null);
          if (localObject1 == null) {
            break label299;
          }
          this.b.put(localObject2, b(localObject1));
          break label299;
          localObject1 = ((String)localObject2).substring(3);
          break;
          if (!((String)localObject2).startsWith("is")) {
            break;
          }
          localObject1 = ((String)localObject2).substring(2);
          break;
          localObject2 = localObject1;
          if (!Character.isUpperCase(((String)localObject1).charAt(1))) {
            localObject2 = ((String)localObject1).substring(0, 1).toLowerCase() + ((String)localObject1).substring(1);
          }
        }
      }
    }
  }
  
  public static String d(String paramString)
  {
    StringWriter localStringWriter = new StringWriter();
    synchronized (localStringWriter.getBuffer())
    {
      try
      {
        paramString = a(paramString, localStringWriter).toString();
        return paramString;
      }
      catch (IOException paramString)
      {
        return "";
      }
    }
  }
  
  public static Object f(String paramString)
  {
    if (paramString.equals("")) {}
    for (;;)
    {
      return paramString;
      if (paramString.equalsIgnoreCase("true")) {
        return Boolean.TRUE;
      }
      if (paramString.equalsIgnoreCase("false")) {
        return Boolean.FALSE;
      }
      if (paramString.equalsIgnoreCase("null")) {
        return a;
      }
      int i = paramString.charAt(0);
      if (((i >= 48) && (i <= 57)) || (i == 45)) {
        try
        {
          Object localObject;
          if ((paramString.indexOf('.') > -1) || (paramString.indexOf('e') > -1) || (paramString.indexOf('E') > -1))
          {
            localObject = Double.valueOf(paramString);
            if ((!((Double)localObject).isInfinite()) && (!((Double)localObject).isNaN())) {
              return localObject;
            }
          }
          else
          {
            localObject = new Long(paramString);
            if (paramString.equals(((Long)localObject).toString()))
            {
              if (((Long)localObject).longValue() == ((Long)localObject).intValue())
              {
                i = ((Long)localObject).intValue();
                return Integer.valueOf(i);
              }
              return localObject;
            }
          }
        }
        catch (Exception localException) {}
      }
    }
    return paramString;
  }
  
  public c a(String paramString, Object paramObject)
  {
    if (paramString == null) {
      throw new NullPointerException("Null key.");
    }
    if (paramObject != null)
    {
      a(paramObject);
      this.b.put(paramString, paramObject);
      return this;
    }
    e(paramString);
    return this;
  }
  
  Writer a(Writer paramWriter, int paramInt1, int paramInt2)
  {
    int i = 0;
    for (;;)
    {
      int j;
      Object localObject1;
      try
      {
        j = c();
        localObject1 = a();
        paramWriter.write(123);
        if (j != 1) {
          break label217;
        }
        localObject1 = ((Iterator)localObject1).next();
        paramWriter.write(d(localObject1.toString()));
        paramWriter.write(58);
        if (paramInt1 > 0) {
          paramWriter.write(32);
        }
        a(paramWriter, this.b.get(localObject1), paramInt1, paramInt2);
        paramWriter.write(125);
        return paramWriter;
      }
      catch (IOException paramWriter)
      {
        throw new b(paramWriter);
      }
      if (!((Iterator)localObject1).hasNext())
      {
        if (paramInt1 > 0) {
          paramWriter.write(10);
        }
        a(paramWriter, paramInt2);
      }
      else
      {
        Object localObject2 = ((Iterator)localObject1).next();
        if (i != 0) {
          paramWriter.write(44);
        }
        if (paramInt1 > 0) {
          paramWriter.write(10);
        }
        a(paramWriter, j);
        paramWriter.write(d(localObject2.toString()));
        paramWriter.write(58);
        if (paramInt1 > 0) {
          paramWriter.write(32);
        }
        a(paramWriter, this.b.get(localObject2), paramInt1, j);
        i = 1;
        continue;
        label217:
        if (j != 0) {
          j = paramInt2 + paramInt1;
        }
      }
    }
  }
  
  public Object a(String paramString)
  {
    if (paramString == null) {
      throw new b("Null key.");
    }
    Object localObject = c(paramString);
    if (localObject == null) {
      throw new b("JSONObject[" + d(paramString) + "] not found.");
    }
    return localObject;
  }
  
  public String a(int paramInt)
  {
    Object localObject1 = new StringWriter();
    synchronized (((StringWriter)localObject1).getBuffer())
    {
      localObject1 = a((Writer)localObject1, paramInt, 0).toString();
      return localObject1;
    }
  }
  
  public String a(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = b(paramString1);
      return paramString1;
    }
    catch (Exception paramString1) {}
    return paramString2;
  }
  
  public Iterator<String> a()
  {
    return b().iterator();
  }
  
  public c b(String paramString, Object paramObject)
  {
    if ((paramString != null) && (paramObject != null))
    {
      if (c(paramString) != null) {
        throw new b("Duplicate key \"" + paramString + "\"");
      }
      a(paramString, paramObject);
    }
    return this;
  }
  
  public String b(String paramString)
  {
    Object localObject = a(paramString);
    if ((localObject instanceof String)) {
      return (String)localObject;
    }
    throw new b("JSONObject[" + d(paramString) + "] not a string.");
  }
  
  public Set<String> b()
  {
    return this.b.keySet();
  }
  
  public int c()
  {
    return this.b.size();
  }
  
  public Object c(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return this.b.get(paramString);
  }
  
  public Object e(String paramString)
  {
    return this.b.remove(paramString);
  }
  
  public String toString()
  {
    try
    {
      String str = a(0);
      return str;
    }
    catch (Exception localException) {}
    return null;
  }
}
