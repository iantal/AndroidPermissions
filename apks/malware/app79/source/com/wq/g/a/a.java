package com.wq.g.a;

import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public final class a
{
  public static String a(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = b(paramString2);
      paramString1 = a(paramString1);
      paramString2 = paramString2.getBytes("UTF-8");
      paramString1 = new String(a(b.a(paramString2, 0, 16), paramString2, paramString1));
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return "";
  }
  
  private static String a(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return localStringBuffer.toString();
      }
      String str2 = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      String str1 = str2;
      if (str2.length() == 1) {
        str1 = '0' + str2;
      }
      localStringBuffer.append(str1.toUpperCase());
      i += 1;
    }
  }
  
  private static byte[] a(String paramString)
  {
    if (paramString.length() < 1) {
      return null;
    }
    byte[] arrayOfByte = new byte[paramString.length() / 2];
    int i = 0;
    for (;;)
    {
      if (i >= paramString.length() / 2) {
        return arrayOfByte;
      }
      arrayOfByte[i] = ((byte)(Integer.parseInt(paramString.substring(i * 2, i * 2 + 1), 16) * 16 + Integer.parseInt(paramString.substring(i * 2 + 1, i * 2 + 2), 16)));
      i += 1;
    }
  }
  
  private static byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3)
  {
    paramArrayOfByte1 = new IvParameterSpec(paramArrayOfByte1);
    paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, "AES");
    Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    localCipher.init(2, paramArrayOfByte2, paramArrayOfByte1);
    return localCipher.doFinal(paramArrayOfByte3);
  }
  
  private static String b(String paramString)
  {
    localObject2 = null;
    localObject1 = null;
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      localObject1 = localMessageDigest;
      localObject2 = localMessageDigest;
      localMessageDigest.reset();
      localObject1 = localMessageDigest;
      localObject2 = localMessageDigest;
      localMessageDigest.update(paramString.getBytes("UTF-8"));
      localObject1 = localMessageDigest;
    }
    catch (NoSuchAlgorithmException paramString)
    {
      for (;;)
      {
        System.out.println("NoSuchAlgorithmException caught!");
        System.exit(-1);
      }
    }
    catch (UnsupportedEncodingException paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        localObject1 = localObject2;
      }
    }
    return a(localObject1.digest());
  }
}
