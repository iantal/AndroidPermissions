package com.nicon.tool;

import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

public class a
{
  private static String a = "DES";
  
  public static String a(String paramString)
  {
    return a(paramString, "123456789");
  }
  
  private static String a(String paramString1, String paramString2)
  {
    try
    {
      SecureRandom localSecureRandom = new SecureRandom();
      paramString2 = new DESKeySpec(paramString2.getBytes());
      paramString2 = SecretKeyFactory.getInstance(a).generateSecret(paramString2);
      Cipher localCipher = Cipher.getInstance(a);
      localCipher.init(2, paramString2, localSecureRandom);
      paramString1 = new String(localCipher.doFinal(a(paramString1.getBytes())));
      return paramString1;
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  public static byte[] a(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte.length % 2 != 0) {
      throw new IllegalArgumentException("长度不是偶数");
    }
    byte[] arrayOfByte = new byte[paramArrayOfByte.length / 2];
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return arrayOfByte;
      }
      String str = new String(paramArrayOfByte, i, 2);
      arrayOfByte[(i / 2)] = ((byte)Integer.parseInt(str, 16));
      i += 2;
    }
  }
}
