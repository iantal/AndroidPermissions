package com.cn21.order.sdk.util;

import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.cn21.dualsim.DualSimDetector;
import com.cn21.dualsim.DualSimInterface;
import com.cn21.order.sdk.helper.a;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Util
{
  public static boolean DEBUG_LOG = true;
  public static boolean DEBUG_LOG_TO_SDCARD = true;
  private static String a = "payCenterSDK";
  
  private static String a(byte[] paramArrayOfByte)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).update(paramArrayOfByte);
      byte[] arrayOfByte = ((MessageDigest)localObject).digest();
      if (arrayOfByte == null) {
        return null;
      }
      StringBuilder localStringBuilder = new StringBuilder(arrayOfByte.length * 2);
      int i = 0;
      for (;;)
      {
        if (i >= arrayOfByte.length) {
          return localStringBuilder.toString();
        }
        localObject = Integer.toString(arrayOfByte[i] & 0xFF, 16);
        paramArrayOfByte = (byte[])localObject;
        if (((String)localObject).length() == 1) {
          paramArrayOfByte = "0" + (String)localObject;
        }
        localStringBuilder.append(paramArrayOfByte);
        i += 1;
      }
      return "";
    }
    catch (NoSuchAlgorithmException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
  }
  
  public static boolean checkProtocolVersion(String paramString)
  {
    return (paramString.equals("v1.0")) || (paramString.equals("v2.0"));
  }
  
  public static String getAppSignature(Context paramContext)
  {
    String str = getPackageName(paramContext);
    try
    {
      paramContext = a(paramContext.getPackageManager().getPackageInfo(str, 64).signatures[0].toByteArray());
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static String getEsn(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId().trim().toString();
  }
  
  public static String getICCID(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getSimSerialNumber();
  }
  
  public static String getIMEI(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    paramContext = str;
    if (str == null) {
      paramContext = "";
    }
    Log.e("getIMEI", "getIMEI:" + paramContext);
    return paramContext;
  }
  
  public static String getIMSI(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    paramContext = str;
    if (str == null) {
      paramContext = "";
    }
    Log.e("getIMSI", "getIMSI:" + paramContext);
    return paramContext;
  }
  
  public static String getModel()
  {
    Object localObject2 = Build.MODEL;
    Object localObject1 = localObject2;
    if ("sdk".equals(localObject2)) {
      localObject1 = "XT800";
    }
    localObject2 = localObject1;
    if ("".equals(localObject1)) {
      localObject2 = "XT800";
    }
    return localObject2;
  }
  
  public static String getPackageName(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).packageName;
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static int[] getResolution(Context paramContext)
  {
    paramContext = ((Activity)paramContext).getWindowManager().getDefaultDisplay();
    return new int[] { paramContext.getWidth(), paramContext.getHeight() };
  }
  
  public static a getTelecomImsi$1c38bd5b(Context paramContext)
  {
    a localA = new a();
    DualSimInterface localDualSimInterface = DualSimDetector.detectSimModel(paramContext, false);
    if (localDualSimInterface == null)
    {
      isTelecomIMSI(getIMSI(paramContext));
      return localA;
    }
    String str = localDualSimInterface.getIMSI(0, paramContext);
    paramContext = localDualSimInterface.getIMSI(1, paramContext);
    isTelecomIMSI(str);
    isTelecomIMSI(paramContext);
    return localA;
  }
  
  public static File getTempPathOnSDCard()
  {
    Object localObject1 = Environment.getExternalStorageState();
    if ((localObject1 != null) && (((String)localObject1).contains("removed"))) {}
    for (Object localObject2 = new File("/mnt/sdcard/paycenter");; localObject2 = new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "paycenter"))
    {
      if (!((File)localObject2).exists()) {
        ((File)localObject2).mkdirs();
      }
      localObject1 = localObject2;
      if (!((File)localObject2).exists())
      {
        localObject2 = new File("/mnt/sdcard/paycenter");
        localObject1 = localObject2;
        if (!((File)localObject2).exists())
        {
          ((File)localObject2).mkdirs();
          localObject1 = localObject2;
        }
      }
      localObject2 = localObject1;
      if (!((File)localObject1).exists())
      {
        localObject1 = new File("/mnt/sdcard2/paycenter");
        localObject2 = localObject1;
        if (!((File)localObject1).exists())
        {
          ((File)localObject1).mkdirs();
          localObject2 = localObject1;
        }
      }
      localObject1 = localObject2;
      if (!((File)localObject2).exists())
      {
        localObject2 = new File("/mnt/emmc/paycenter");
        localObject1 = localObject2;
        if (!((File)localObject2).exists())
        {
          ((File)localObject2).mkdirs();
          localObject1 = localObject2;
        }
      }
      localObject2 = localObject1;
      if (!((File)localObject1).exists())
      {
        localObject1 = new File("/storage/sdcard1/paycenter");
        localObject2 = localObject1;
        if (!((File)localObject1).exists())
        {
          ((File)localObject1).mkdirs();
          localObject2 = localObject1;
        }
      }
      localObject1 = localObject2;
      if (!((File)localObject2).exists())
      {
        localObject2 = new File("/storage/sdcard2/paycenter");
        localObject1 = localObject2;
        if (!((File)localObject2).exists())
        {
          ((File)localObject2).mkdirs();
          localObject1 = localObject2;
        }
      }
      return localObject1;
    }
  }
  
  public static String getTimeStamp()
  {
    Date localDate = Calendar.getInstance().getTime();
    return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(localDate);
  }
  
  public static String getVersionRelease()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static boolean is3rd(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.getType() == 0);
  }
  
  public static boolean isInternetOpen(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    boolean bool = paramContext.getNetworkInfo(1).isConnectedOrConnecting();
    return paramContext.getNetworkInfo(0).isConnectedOrConnecting() | bool;
  }
  
  public static boolean isNetworkAvailable(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    int i;
    if (paramContext != null)
    {
      paramContext = paramContext.getAllNetworkInfo();
      if (paramContext != null) {
        i = 0;
      }
    }
    for (;;)
    {
      if (i >= paramContext.length) {
        return false;
      }
      if (paramContext[i].getState() == NetworkInfo.State.CONNECTED) {
        return true;
      }
      i += 1;
    }
  }
  
  public static boolean isTelecomIMSI(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return false;
    }
    return Pattern.compile("^(4600[3,5])\\d{10}$").matcher(paramString).matches();
  }
  
  public static boolean isTelecomNumber(String paramString)
  {
    if ((TextUtils.isEmpty(paramString)) || (11 < paramString.length())) {
      return false;
    }
    if ((paramString.startsWith("46003")) || (paramString.startsWith("46005"))) {
      return true;
    }
    return Pattern.compile("^((133)|(153)|(18[0-1,9])|(177))\\d{8}$").matcher(paramString).matches();
  }
  
  public static boolean isWifi(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.getType() == 1);
  }
  
  public static void log(String paramString)
  {
    if (DEBUG_LOG) {
      Log.i(a, paramString);
    }
    if (DEBUG_LOG_TO_SDCARD) {
      log2SD(paramString);
    }
  }
  
  public static void log(String paramString, Throwable paramThrowable)
  {
    Log.e(a, "Exception :[" + paramString + "]", paramThrowable);
    paramThrowable.printStackTrace();
  }
  
  public static void log2SD(String paramString)
  {
    Object localObject = getTempPathOnSDCard();
    ((File)localObject).mkdirs();
    File localFile = new File((File)localObject, "paycenter.log");
    localObject = getTimeStamp() + "|" + paramString;
    paramString = (String)localObject;
    if (!((String)localObject).endsWith("\n")) {
      paramString = localObject + "\r\n";
    }
    try
    {
      localObject = new FileOutputStream(localFile, true);
      ((FileOutputStream)localObject).write(paramString.getBytes());
      ((FileOutputStream)localObject).close();
      return;
    }
    catch (FileNotFoundException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
}
