package com.cn21.order.sdk.util;

import android.text.TextUtils;
import android.util.Log;
import com.cn21.order.sdk.helper.a;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

public final class b
{
  private static String a = "http://vip.189.cn/oc/";
  private static String b = "json";
  private static String c = "30010";
  private static String d;
  private static String e;
  private String f = "v1.0";
  
  private b(String paramString)
  {
    this.f = paramString;
  }
  
  /* Error */
  private static String a(java.io.InputStream paramInputStream)
  {
    // Byte code:
    //   0: new 39	java/lang/StringBuilder
    //   3: dup
    //   4: invokespecial 40	java/lang/StringBuilder:<init>	()V
    //   7: astore_1
    //   8: new 42	java/io/BufferedReader
    //   11: dup
    //   12: new 44	java/io/InputStreamReader
    //   15: dup
    //   16: aload_0
    //   17: ldc 46
    //   19: invokespecial 49	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;Ljava/lang/String;)V
    //   22: sipush 8192
    //   25: invokespecial 52	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   28: astore_2
    //   29: aload_2
    //   30: invokevirtual 56	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   33: astore_3
    //   34: aload_3
    //   35: ifnonnull +12 -> 47
    //   38: aload_0
    //   39: invokevirtual 61	java/io/InputStream:close	()V
    //   42: aload_1
    //   43: invokevirtual 64	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   46: areturn
    //   47: aload_1
    //   48: new 39	java/lang/StringBuilder
    //   51: dup
    //   52: aload_3
    //   53: invokestatic 70	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   56: invokespecial 72	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   59: ldc 74
    //   61: invokevirtual 78	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   64: invokevirtual 64	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   67: invokevirtual 78	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   70: pop
    //   71: goto -42 -> 29
    //   74: astore_2
    //   75: aload_1
    //   76: iconst_0
    //   77: aload_1
    //   78: invokevirtual 82	java/lang/StringBuilder:length	()I
    //   81: invokevirtual 86	java/lang/StringBuilder:delete	(II)Ljava/lang/StringBuilder;
    //   84: pop
    //   85: ldc 88
    //   87: aload_2
    //   88: invokevirtual 91	java/io/IOException:getMessage	()Ljava/lang/String;
    //   91: aload_2
    //   92: invokestatic 96	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   95: pop
    //   96: aload_0
    //   97: invokevirtual 61	java/io/InputStream:close	()V
    //   100: goto -58 -> 42
    //   103: astore_0
    //   104: ldc 88
    //   106: aload_0
    //   107: invokevirtual 91	java/io/IOException:getMessage	()Ljava/lang/String;
    //   110: aload_0
    //   111: invokestatic 96	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   114: pop
    //   115: goto -73 -> 42
    //   118: astore_1
    //   119: aload_0
    //   120: invokevirtual 61	java/io/InputStream:close	()V
    //   123: aload_1
    //   124: athrow
    //   125: astore_0
    //   126: ldc 88
    //   128: aload_0
    //   129: invokevirtual 91	java/io/IOException:getMessage	()Ljava/lang/String;
    //   132: aload_0
    //   133: invokestatic 96	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   136: pop
    //   137: goto -14 -> 123
    //   140: astore_0
    //   141: ldc 88
    //   143: aload_0
    //   144: invokevirtual 91	java/io/IOException:getMessage	()Ljava/lang/String;
    //   147: aload_0
    //   148: invokestatic 96	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   151: pop
    //   152: goto -110 -> 42
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	155	0	paramInputStream	java.io.InputStream
    //   7	71	1	localStringBuilder	StringBuilder
    //   118	6	1	localObject	Object
    //   28	2	2	localBufferedReader	java.io.BufferedReader
    //   74	18	2	localIOException	IOException
    //   33	20	3	str	String
    // Exception table:
    //   from	to	target	type
    //   8	29	74	java/io/IOException
    //   29	34	74	java/io/IOException
    //   47	71	74	java/io/IOException
    //   96	100	103	java/io/IOException
    //   8	29	118	finally
    //   29	34	118	finally
    //   47	71	118	finally
    //   75	96	118	finally
    //   119	123	125	java/io/IOException
    //   38	42	140	java/io/IOException
  }
  
  private String a(String paramString, JSONObject paramJSONObject)
  {
    paramJSONObject = a(paramJSONObject, e);
    String str1 = d;
    Object localObject1 = c;
    Object localObject2 = b;
    Object localObject3 = this.f;
    String str2 = e;
    str1 = c.a(c.a(str1 + (String)localObject1 + (String)localObject2 + (String)localObject3 + paramJSONObject, str2));
    localObject1 = new HashMap();
    ((HashMap)localObject1).put("cpId", d);
    ((HashMap)localObject1).put("clientType", c);
    ((HashMap)localObject1).put("format", b);
    ((HashMap)localObject1).put("version", this.f);
    ((HashMap)localObject1).put("paras", paramJSONObject);
    ((HashMap)localObject1).put("sign", str1);
    paramJSONObject = new DefaultHttpClient();
    str1 = a + paramString;
    paramString = new HttpPost(str1);
    paramString.setHeader("X-ClientType", "1");
    for (;;)
    {
      try
      {
        localObject2 = new ArrayList();
        localObject1 = ((HashMap)localObject1).entrySet().iterator();
        if (!((Iterator)localObject1).hasNext())
        {
          paramString.setEntity(new StringEntity("900 Success", "UTF-8"));
          paramString.setEntity(new UrlEncodedFormEntity((List)localObject2, "UTF-8"));
          localObject1 = paramJSONObject.execute(paramString);
          if (((HttpResponse)localObject1).getStatusLine().getStatusCode() != 200) {
            break label612;
          }
        }
      }
      catch (IllegalArgumentException localIllegalArgumentException)
      {
        Log.w("NetAccess", "Arg exception trying to execute request for " + str1 + " : " + localIllegalArgumentException);
        paramString.abort();
        paramJSONObject.getConnectionManager().shutdown();
        return "";
      }
      catch (IOException localIOException1)
      {
        Log.w("NetAccess", "IOException trying to execute request for " + localIOException1);
        localIOException1.printStackTrace();
        paramString.abort();
        paramJSONObject.getConnectionManager().shutdown();
        return "";
      }
      catch (Exception localException1)
      {
        Log.w("NetAccess", "Exception trying to execute request for " + localException1);
        localException1.printStackTrace();
        paramString.abort();
        paramJSONObject.getConnectionManager().shutdown();
        return "";
      }
      try
      {
        str1 = a(((HttpResponse)localObject1).getEntity().getContent());
        paramJSONObject.getConnectionManager().shutdown();
        return str1;
      }
      catch (IOException localIOException2)
      {
        Log.w("NetAccess", "IOException getting entity for " + localIOException2);
        if (paramJSONObject == null) {
          break;
        }
        paramJSONObject.getConnectionManager().shutdown();
        paramString.abort();
        return "";
      }
      catch (Exception localException2)
      {
        Log.w("NetAccess", "Exception getting entity for " + localException2);
        if (paramJSONObject == null) {
          break label604;
        }
        paramJSONObject.getConnectionManager().shutdown();
        paramString.abort();
        return "";
      }
      localObject3 = (Map.Entry)((Iterator)localObject1).next();
      ((List)localObject2).add(new BasicNameValuePair((String)((Map.Entry)localObject3).getKey(), (String)((Map.Entry)localObject3).getValue()));
    }
    label604:
    label612:
    paramJSONObject.getConnectionManager().shutdown();
    return "";
  }
  
  private String a(JSONObject paramJSONObject, String paramString)
  {
    if (paramJSONObject == null) {
      return null;
    }
    StringBuffer localStringBuffer = new StringBuffer();
    Iterator localIterator = paramJSONObject.keys();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        paramJSONObject = localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
      }
      try
      {
        if (this.f.equals("v1.0"))
        {
          new d();
          paramJSONObject = d.a(paramJSONObject.toString(), "UTF-8", paramString);
          return paramJSONObject;
          String str1 = localIterator.next().toString();
          String str2 = paramJSONObject.optString(str1);
          localStringBuffer.append(str1).append("=").append(str2).append("&");
        }
        else
        {
          paramString = paramString.substring(0, paramString.length() - 2);
          paramJSONObject = paramJSONObject.toString();
          paramJSONObject = new String(Base64.encodeBase64(a.a(paramString.getBytes(), paramJSONObject.getBytes())));
          return paramJSONObject;
        }
      }
      catch (Exception paramJSONObject)
      {
        paramJSONObject.printStackTrace();
      }
    }
    return null;
  }
  
  public static JSONObject a(String paramString1, JSONObject paramJSONObject, String paramString2)
  {
    paramString1 = new b(paramString2).a(paramString1, paramJSONObject);
    if (TextUtils.isEmpty(paramString1))
    {
      paramString1 = new JSONObject();
      try
      {
        paramString1.put("result", -102024);
        paramString1.put("msg", "网络连接异常，请检查网络");
        return paramString1;
      }
      catch (JSONException paramJSONObject)
      {
        paramJSONObject.printStackTrace();
        return paramString1;
      }
    }
    try
    {
      paramString1 = new JSONObject(paramString1);
      return paramString1;
    }
    catch (JSONException paramString1)
    {
      paramString1 = new JSONObject();
      try
      {
        paramString1.put("result", -99998);
        paramString1.put("msg", "结果字符串转换异常!");
        return paramString1;
      }
      catch (JSONException paramJSONObject)
      {
        paramJSONObject.printStackTrace();
      }
    }
    return paramString1;
  }
  
  public static void a(String paramString)
  {
    d = paramString;
  }
  
  public static void b(String paramString)
  {
    e = paramString;
  }
}
