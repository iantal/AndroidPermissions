package com.e.a.b;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import org.json.JSONObject;

public class b
{
  static b J;
  static b a = null;
  public String A;
  public int B;
  public String C;
  public String D;
  public String E;
  public int F;
  public int G;
  public boolean H = false;
  public int I = 1;
  public String b;
  public String c;
  public String d;
  public String e;
  public int f;
  public String g;
  public String h;
  public String i;
  public String j;
  public String k;
  public String l;
  public String m;
  public int n = 1;
  public int o = 1;
  public String p;
  public String q;
  public String r;
  public String s;
  public String t;
  public int u;
  public int v;
  public String w;
  public String x;
  public String y;
  public String z = "3.1.7";
  
  public b() {}
  
  public static b a()
  {
    if (J == null) {
      J = new b();
    }
    return J;
  }
  
  public static void a(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    WifiManager localWifiManager = (WifiManager)paramContext.getSystemService("wifi");
    TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    b localB = a();
    localB.p = localTelephonyManager.getDeviceId();
    localB.q = localTelephonyManager.getSubscriberId();
    localB.r = localWifiManager.getConnectionInfo().getMacAddress();
    localB.s = Build.MODEL;
    localB.t = Build.VERSION.RELEASE;
    localB.u = localDisplayMetrics.heightPixels;
    localB.v = localDisplayMetrics.widthPixels;
    localB.w = c();
    localB.x = b(paramContext);
    localB.y = localWifiManager.getConnectionInfo().getSSID();
    localB.z = "3.1.7";
    localB.n = 1;
    localB.A = null;
    localB.B = 0;
    localB.C = Build.MANUFACTURER;
    localB.D = c(paramContext);
    localB.E = d(paramContext);
    localB.F = ((int)localDisplayMetrics.density);
    localB.G = localDisplayMetrics.densityDpi;
  }
  
  public static void a(String paramString)
  {
    b localB = a();
    try
    {
      paramString = new JSONObject(paramString);
      localB.b = paramString.getString("packageName");
      localB.c = paramString.getString("channelId");
      localB.d = paramString.getString("appName");
      localB.e = paramString.getString("versionName");
      localB.f = paramString.getInt("versionCode");
      localB.g = paramString.getString("programID");
      localB.i = paramString.getString("appId");
      localB.j = paramString.getString("appKey");
      localB.k = paramString.getString("staticMark");
      localB.l = paramString.getString("publicKey");
      localB.m = paramString.getString("dexSha1");
      return;
    }
    catch (Exception paramString)
    {
      localB.b = "";
      localB.c = "";
      localB.d = "";
      localB.e = "";
      localB.f = -1;
      localB.g = "";
      localB.h = "";
      localB.i = "";
    }
  }
  
  public static String b(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext == null) {
      paramContext = "";
    }
    String str;
    do
    {
      return paramContext;
      str = paramContext.getTypeName();
      if (str.compareTo("MOBILE") == 0) {
        break;
      }
      paramContext = str;
    } while (str.compareTo("mobile") != 0);
    return "GPRS";
  }
  
  public static void b()
  {
    J = null;
  }
  
  public static String c()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (SocketException localSocketException)
    {
      for (;;)
      {
        Object localObject;
        label18:
        Enumeration localEnumeration;
        InetAddress localInetAddress;
        Log.e("WifiPreference IpAddress", localSocketException.toString());
      }
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while (localInetAddress.isLoopbackAddress());
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static String c(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static String d(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return "unknown";
      }
      int i1 = paramContext.getType();
      if (i1 == 1) {
        return "wifi";
      }
      paramContext = paramContext.getExtraInfo();
      if (paramContext == null) {
        return "unknown";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "unknown";
  }
}
