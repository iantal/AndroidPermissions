package com.hzpz.pay.jsoup.helper;

import com.hzpz.pay.jsoup.Connection;
import com.hzpz.pay.jsoup.Connection.Method;
import com.hzpz.pay.jsoup.Connection.Request;
import com.hzpz.pay.jsoup.Connection.Response;
import com.hzpz.pay.jsoup.nodes.Document;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HttpConnection
  implements Connection
{
  private Connection.Request a = new HttpConnection.Request(null);
  private Connection.Response b = new HttpConnection.Response();
  
  private HttpConnection() {}
  
  public static Connection b(String paramString)
  {
    HttpConnection localHttpConnection = new HttpConnection();
    localHttpConnection.a(paramString);
    return localHttpConnection;
  }
  
  private static String e(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return paramString.replaceAll(" ", "%20");
  }
  
  private static String f(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return paramString.replaceAll("\"", "%22");
  }
  
  public Connection a(int paramInt)
  {
    this.a.a(paramInt);
    return this;
  }
  
  public Connection a(String paramString)
  {
    Validate.a(paramString, "Must supply a valid URL");
    try
    {
      this.a.a(new URL(e(paramString)));
      return this;
    }
    catch (MalformedURLException localMalformedURLException)
    {
      throw new IllegalArgumentException("Malformed URL: " + paramString, localMalformedURLException);
    }
  }
  
  public Connection a(String paramString1, String paramString2)
  {
    this.a.a(paramString1, paramString2);
    return this;
  }
  
  public Connection a(Map paramMap)
  {
    Validate.a(paramMap, "Data map must not be null");
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      this.a.a(HttpConnection.KeyVal.a((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    return this;
  }
  
  public Connection a(boolean paramBoolean)
  {
    this.a.a(paramBoolean);
    return this;
  }
  
  public Document a()
  {
    this.a.a(Connection.Method.a);
    c();
    return this.b.e();
  }
  
  public Connection b(Map paramMap)
  {
    Validate.a(paramMap, "Cookie map must not be null");
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      this.a.b((String)localEntry.getKey(), (String)localEntry.getValue());
    }
    return this;
  }
  
  public Connection b(boolean paramBoolean)
  {
    this.a.b(paramBoolean);
    return this;
  }
  
  public Document b()
  {
    this.a.a(Connection.Method.b);
    c();
    return this.b.e();
  }
  
  public Connection.Response c()
  {
    this.b = HttpConnection.Response.a(this.a);
    return this.b;
  }
  
  public Connection.Response d()
  {
    return this.b;
  }
}
