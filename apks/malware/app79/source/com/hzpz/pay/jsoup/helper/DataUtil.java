package com.hzpz.pay.jsoup.helper;

import com.hzpz.pay.jsoup.nodes.Document;
import com.hzpz.pay.jsoup.nodes.Document.OutputSettings;
import com.hzpz.pay.jsoup.nodes.Element;
import com.hzpz.pay.jsoup.parser.Parser;
import com.hzpz.pay.jsoup.select.Elements;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Locale;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class DataUtil
{
  private static final Pattern a = Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)");
  private static final char[] b = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
  
  private DataUtil() {}
  
  static Document a(ByteBuffer paramByteBuffer, String paramString1, String paramString2, Parser paramParser)
  {
    String str3;
    Document localDocument;
    Element localElement;
    if (paramString1 == null)
    {
      str3 = Charset.forName("UTF-8").decode(paramByteBuffer).toString();
      localDocument = paramParser.a(str3, paramString2);
      localElement = localDocument.a("meta[http-equiv=content-type], meta[charset]").c();
      if (localElement == null) {
        break label287;
      }
      if (!localElement.e("http-equiv")) {
        break label298;
      }
    }
    String str2;
    label281:
    label287:
    label298:
    for (String str1 = a(localElement.d("content"));; str2 = null)
    {
      Object localObject = str1;
      if (str1 == null)
      {
        localObject = str1;
        if (localElement.e("charset")) {
          localObject = str1;
        }
      }
      for (;;)
      {
        try
        {
          if (Charset.isSupported(localElement.d("charset"))) {
            localObject = localElement.d("charset");
          }
          if ((localObject == null) || (((String)localObject).length() == 0) || (((String)localObject).equals("UTF-8"))) {
            break label287;
          }
          paramString1 = ((String)localObject).trim().replaceAll("[\"']", "");
          paramByteBuffer.rewind();
          str1 = Charset.forName(paramString1).decode(paramByteBuffer).toString();
          localObject = null;
          if ((str1.length() <= 0) || (str1.charAt(0) != 65279)) {
            break label281;
          }
          paramByteBuffer.rewind();
          str1 = Charset.forName("UTF-8").decode(paramByteBuffer).toString().substring(1);
          paramString1 = "UTF-8";
          paramByteBuffer = null;
          localObject = paramByteBuffer;
          if (paramByteBuffer == null)
          {
            localObject = paramParser.a(str1, paramString2);
            ((Document)localObject).e().a(paramString1);
          }
          return localObject;
        }
        catch (IllegalCharsetNameException localIllegalCharsetNameException)
        {
          localObject = null;
          continue;
        }
        Validate.a(paramString1, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
        str2 = Charset.forName(paramString1).decode(paramByteBuffer).toString();
        localObject = null;
        continue;
        paramByteBuffer = (ByteBuffer)localObject;
        continue;
        str2 = str3;
        localObject = localDocument;
      }
    }
  }
  
  static String a(String paramString)
  {
    if (paramString == null) {}
    for (;;)
    {
      return null;
      paramString = a.matcher(paramString);
      if (paramString.find())
      {
        paramString = paramString.group(1).trim().replace("charset=", "");
        if (paramString.length() != 0) {
          try
          {
            if (Charset.isSupported(paramString)) {
              return paramString;
            }
            paramString = paramString.toUpperCase(Locale.ENGLISH);
            boolean bool = Charset.isSupported(paramString);
            if (bool) {
              return paramString;
            }
          }
          catch (IllegalCharsetNameException paramString) {}
        }
      }
    }
    return null;
  }
  
  static ByteBuffer a()
  {
    return ByteBuffer.allocate(0);
  }
  
  static ByteBuffer a(InputStream paramInputStream, int paramInt)
  {
    int i = 1;
    boolean bool;
    label20:
    byte[] arrayOfByte;
    ByteArrayOutputStream localByteArrayOutputStream;
    if (paramInt >= 0)
    {
      bool = true;
      Validate.a(bool, "maxSize must be 0 (unlimited) or larger");
      if (paramInt <= 0) {
        break label87;
      }
      arrayOfByte = new byte[131072];
      localByteArrayOutputStream = new ByteArrayOutputStream(131072);
    }
    for (;;)
    {
      int k = paramInputStream.read(arrayOfByte);
      if (k != -1)
      {
        j = paramInt;
        if (i == 0) {
          break label97;
        }
        if (k > paramInt) {
          localByteArrayOutputStream.write(arrayOfByte, 0, paramInt);
        }
      }
      else
      {
        return ByteBuffer.wrap(localByteArrayOutputStream.toByteArray());
        bool = false;
        break;
        label87:
        i = 0;
        break label20;
      }
      int j = paramInt - k;
      label97:
      localByteArrayOutputStream.write(arrayOfByte, 0, k);
      paramInt = j;
    }
  }
  
  static void a(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    byte[] arrayOfByte = new byte[131072];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        break;
      }
      paramOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  static String b()
  {
    StringBuilder localStringBuilder = new StringBuilder(32);
    Random localRandom = new Random();
    int i = 0;
    while (i < 32)
    {
      localStringBuilder.append(b[localRandom.nextInt(b.length)]);
      i += 1;
    }
    return localStringBuilder.toString();
  }
}
