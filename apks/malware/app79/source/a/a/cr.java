package a.a;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

class cr
  extends ic<cp>
{
  private cr() {}
  
  public void a(ht paramHt, cp paramCp)
  {
    paramHt.f();
    Object localObject = paramHt.h();
    if (((hq)localObject).b == 0)
    {
      paramHt.g();
      if (!paramCp.d()) {
        throw new hu("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
    }
    else
    {
      switch (((hq)localObject).c)
      {
      default: 
        hw.a(paramHt, ((hq)localObject).b);
      }
      for (;;)
      {
        paramHt.i();
        break;
        if (((hq)localObject).b == 13)
        {
          localObject = paramHt.j();
          paramCp.a = new HashMap(((hs)localObject).c * 2);
          int i = 0;
          while (i < ((hs)localObject).c)
          {
            String str = paramHt.v();
            cw localCw = new cw();
            localCw.a(paramHt);
            paramCp.a.put(str, localCw);
            i += 1;
          }
          paramHt.k();
          paramCp.a(true);
        }
        else
        {
          hw.a(paramHt, ((hq)localObject).b);
          continue;
          if (((hq)localObject).b == 8)
          {
            paramCp.b = paramHt.s();
            paramCp.b(true);
          }
          else
          {
            hw.a(paramHt, ((hq)localObject).b);
            continue;
            if (((hq)localObject).b == 11)
            {
              paramCp.c = paramHt.v();
              paramCp.c(true);
            }
            else
            {
              hw.a(paramHt, ((hq)localObject).b);
            }
          }
        }
      }
    }
    paramCp.f();
  }
  
  public void b(ht paramHt, cp paramCp)
  {
    paramCp.f();
    paramHt.a(cp.g());
    if (paramCp.a != null)
    {
      paramHt.a(cp.h());
      paramHt.a(new hs((byte)11, (byte)12, paramCp.a.size()));
      Iterator localIterator = paramCp.a.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        paramHt.a((String)localEntry.getKey());
        ((cw)localEntry.getValue()).b(paramHt);
      }
      paramHt.d();
      paramHt.b();
    }
    paramHt.a(cp.i());
    paramHt.a(paramCp.b);
    paramHt.b();
    if (paramCp.c != null)
    {
      paramHt.a(cp.j());
      paramHt.a(paramCp.c);
      paramHt.b();
    }
    paramHt.c();
    paramHt.a();
  }
}
