package a.a;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class g
  extends bl
  implements iz
{
  public g(String paramString, Map<String, Object> paramMap, long paramLong, int paramInt)
  {
    a(paramString);
    b(System.currentTimeMillis());
    if (paramMap.size() > 0) {
      a(b(paramMap));
    }
    if (paramInt > 0) {}
    for (;;)
    {
      a(paramInt);
      if (paramLong > 0L) {
        a(paramLong);
      }
      return;
      paramInt = 1;
    }
  }
  
  public static f a(String paramString1, String paramString2, Map<String, Object> paramMap)
  {
    f localF = new f();
    localF.b = paramString1;
    localF.c = paramString2;
    localF.d = paramMap;
    return localF;
  }
  
  public static String b(String paramString1, String paramString2, Map<String, Object> paramMap)
  {
    return paramString1 + paramString2;
  }
  
  private HashMap<String, em> b(Map<String, Object> paramMap)
  {
    paramMap = paramMap.entrySet().iterator();
    HashMap localHashMap = new HashMap();
    int i = 0;
    label207:
    while ((i < 10) && (paramMap.hasNext()))
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      em localEm = new em();
      Object localObject = localEntry.getValue();
      if ((localObject instanceof String)) {
        localEm.a((String)localObject);
      }
      for (;;)
      {
        if (!localEm.d()) {
          break label207;
        }
        localHashMap.put(localEntry.getKey(), localEm);
        i += 1;
        break;
        if ((localObject instanceof Long)) {
          localEm.a(((Long)localObject).longValue());
        } else if ((localObject instanceof Integer)) {
          localEm.a(((Integer)localObject).longValue());
        } else if ((localObject instanceof Float)) {
          localEm.a(((Float)localObject).longValue());
        } else if ((localObject instanceof Double)) {
          localEm.a(((Double)localObject).longValue());
        }
      }
    }
    return localHashMap;
  }
  
  public void a(fs paramFs, String paramString)
  {
    Object localObject;
    dd localDd;
    if (paramFs.b() > 0)
    {
      localObject = paramFs.c().iterator();
      do
      {
        if (!((Iterator)localObject).hasNext()) {
          break;
        }
        localDd = (dd)((Iterator)localObject).next();
      } while (!paramString.equals(localDd.a()));
    }
    for (;;)
    {
      localObject = localDd;
      if (localDd == null)
      {
        localObject = new dd();
        ((dd)localObject).a(paramString);
        paramFs.a((dd)localObject);
      }
      ((dd)localObject).a(this);
      return;
      localDd = null;
    }
  }
}
