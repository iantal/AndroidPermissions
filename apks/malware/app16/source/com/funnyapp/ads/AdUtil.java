package com.funnyapp.ads;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Handler;
import android.support.v4.app.NotificationCompat.Builder;
import android.text.Html;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

public class AdUtil
{
  public static final int NOTIFICATION_ID = 1;
  private static final String TAG = "ads";
  private final String QUERY_ACTIVE_STATUS_PARAMS = "/activate.php?imei=%s&package=%s";
  private final String QUERY_SUB_STATUS_PARAMS = "/myapp.php?imei=%s&package=%s";
  private final String SUBSCRIPTION_URL = "http://mobileapp.url.ph";
  private Context context;
  private String packageName = "";
  
  public AdUtil(Context paramContext)
  {
    this.context = paramContext;
    this.packageName = paramContext.getApplicationInfo().packageName;
  }
  
  private static int getAppIcon(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 0).icon;
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static void notifyHotApp(HotApp paramHotApp, Context paramContext)
  {
    NotificationManager localNotificationManager = (NotificationManager)paramContext.getSystemService("notification");
    Object localObject = new Intent("android.intent.action.VIEW");
    ((Intent)localObject).setData(Uri.parse(paramHotApp.getUrl()));
    localObject = PendingIntent.getActivity(paramContext, 0, (Intent)localObject, 0);
    paramHotApp = new NotificationCompat.Builder(paramContext).setContentTitle(paramHotApp.getTitle()).setSmallIcon(getAppIcon(paramContext)).setLargeIcon(paramHotApp.getImage()).setContentText(Html.fromHtml(paramHotApp.getHtml()));
    paramHotApp.setContentIntent((PendingIntent)localObject);
    paramHotApp = paramHotApp.build();
    paramHotApp.flags |= 0x10;
    localNotificationManager.notify(1, paramHotApp);
  }
  
  public String getDataJson(String paramString1, String paramString2)
  {
    String str = "";
    DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
    ArrayList localArrayList = new ArrayList();
    paramString1 = paramString1 + paramString2;
    Log.i("ads", paramString1);
    paramString1 = new HttpPost(paramString1);
    try
    {
      paramString1.setEntity(new UrlEncodedFormEntity(localArrayList));
      paramString2 = new BasicResponseHandler();
    }
    catch (UnsupportedEncodingException paramString2)
    {
      try
      {
        paramString1 = (String)localDefaultHttpClient.execute(paramString1, paramString2);
        Log.i("ads", paramString1);
        return paramString1;
        paramString2 = paramString2;
        Log.e("ads", paramString2.getMessage());
      }
      catch (ClientProtocolException paramString1)
      {
        for (;;)
        {
          Log.e("ads", paramString1.getMessage());
          paramString1 = str;
        }
      }
      catch (IOException paramString1)
      {
        for (;;)
        {
          Log.e("ads", paramString1.getMessage());
          paramString1 = str;
        }
      }
      catch (IllegalStateException paramString1)
      {
        for (;;)
        {
          Log.e("ads", paramString1.getMessage());
          paramString1 = str;
        }
      }
    }
  }
  
  public void getHotApp()
  {
    String str1 = getDataJson("http://mobileapp.url.ph", String.format("/myapp.php?imei=%s&package=%s", new Object[] { "", this.packageName }));
    if ((str1 == null) || (str1.length() == 0)) {
      return;
    }
    Object localObject;
    try
    {
      localObject = new JSONObject(str1);
      try
      {
        str1 = ((JSONObject)localObject).getString("action");
        String str2 = ((JSONObject)localObject).getString("url");
        String str3 = ((JSONObject)localObject).getString("html");
        String str4 = ((JSONObject)localObject).getString("image");
        String str5 = ((JSONObject)localObject).getString("title");
        long l = Long.valueOf(((JSONObject)localObject).getString("notifyTime")).longValue();
        int j = Integer.valueOf(((JSONObject)localObject).getString("biendo")).intValue() * 60;
        localObject = new Random();
        int i = 0;
        if (j != 0) {
          i = ((Random)localObject).nextInt(j);
        }
        localObject = new HotApp();
        ((HotApp)localObject).setHtml(str3);
        ((HotApp)localObject).setUrl(str2);
        ((HotApp)localObject).setAction(str1);
        ((HotApp)localObject).setTitle(str5);
        ((HotApp)localObject).setImageUrl(str4);
        if (System.currentTimeMillis() < l)
        {
          new Alarm().setAlarm(this.context, i * 60 * 1000 + l);
          return;
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return;
      }
    }
    catch (JSONException localJSONException)
    {
      Log.e("ads", localJSONException.getMessage());
      return;
    }
    tmp273_270[0] = localObject;
    new DownloadImageTask(localJSONException).execute(tmp273_270);
  }
  
  public Bitmap getImage(String paramString)
    throws IOException
  {
    Object localObject1 = null;
    Bitmap localBitmap = null;
    Object localObject2 = null;
    try
    {
      paramString = new URL(paramString);
      localObject2 = paramString.openConnection();
      if (!(localObject2 instanceof HttpURLConnection)) {
        throw new IOException("Not an HTTP connection");
      }
    }
    catch (MalformedURLException paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        paramString = (String)localObject2;
      }
      paramString = localObject1;
      try
      {
        localObject2 = (HttpURLConnection)localObject2;
        paramString = localObject1;
        ((HttpURLConnection)localObject2).setRequestMethod("GET");
        paramString = localObject1;
        ((HttpURLConnection)localObject2).setConnectTimeout(5000);
        paramString = localObject1;
        ((HttpURLConnection)localObject2).connect();
        paramString = localObject1;
        if (((HttpURLConnection)localObject2).getResponseCode() == 200)
        {
          paramString = localObject1;
          InputStream localInputStream = ((HttpURLConnection)localObject2).getInputStream();
          paramString = localObject1;
          localBitmap = BitmapFactory.decodeStream(localInputStream);
          paramString = localBitmap;
          localInputStream.close();
        }
        paramString = localBitmap;
        ((HttpURLConnection)localObject2).disconnect();
        return localBitmap;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
    return paramString;
  }
  
  private class DownloadImageTask
    extends AsyncTask<HotApp, Integer, Bitmap>
  {
    String action;
    HotApp app;
    
    public DownloadImageTask(String paramString)
    {
      this.action = paramString;
    }
    
    protected Bitmap doInBackground(HotApp... paramVarArgs)
    {
      this.app = paramVarArgs[0];
      paramVarArgs = this.app.getImageUrl();
      try
      {
        paramVarArgs = AdUtil.this.getImage(paramVarArgs);
        this.app.setImage(paramVarArgs);
        return paramVarArgs;
      }
      catch (Exception paramVarArgs) {}
      return null;
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      int i = new Random().nextInt(5);
      if (this.action.equals("NOTIFY"))
      {
        Log.i("ads", "notify");
        new Handler().postDelayed(new Runnable()
        {
          public void run()
          {
            AdUtil.notifyHotApp(AdUtil.DownloadImageTask.this.app, AdUtil.this.context);
          }
        }, (i + 3) * 1000 * 60);
      }
    }
  }
}
