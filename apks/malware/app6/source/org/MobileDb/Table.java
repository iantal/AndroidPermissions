package org.MobileDb;

import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;

public class Table
{
  private long _offset = -1L;
  private Vector fields;
  private InputStream inputStream = null;
  private int last_find_index = -1;
  private Row last_find_row = null;
  private boolean loadAllDataInMemory = true;
  public String name;
  private Field[] opt_fields = null;
  private Row[] opt_rows = null;
  private boolean optimized = false;
  private String pathToDb = null;
  private Vector rows;
  private int rowsCount = 0;
  private boolean transaction = false;
  
  public Table()
  {
    this.name = "";
    this.fields = new Vector();
    this.rows = new Vector();
  }
  
  public Table(String paramString)
  {
    this.name = paramString;
    this.fields = new Vector();
    this.rows = new Vector();
  }
  
  public Table(String paramString1, boolean paramBoolean, String paramString2)
  {
    this.name = paramString1;
    this.fields = new Vector();
    this.loadAllDataInMemory = paramBoolean;
    if (paramBoolean)
    {
      this.rows = new Vector();
      this.pathToDb = null;
      return;
    }
    this.pathToDb = paramString2;
  }
  
  public void addField(Field paramField)
  {
    if (!this.optimized) {
      this.fields.addElement(paramField);
    }
  }
  
  public void addRow()
  {
    this.rowsCount += 1;
  }
  
  public void addRow(Row paramRow)
  {
    if (!this.optimized) {
      this.rows.addElement(paramRow);
    }
  }
  
  public Row createRow()
  {
    if (!this.optimized)
    {
      int[] arrayOfInt = new int[this.fields.size()];
      int i = 0;
      while (i < this.fields.size())
      {
        arrayOfInt[i] = ((Field)this.fields.elementAt(i)).type;
        i += 1;
      }
      return new Row(arrayOfInt);
    }
    return null;
  }
  
  public int fieldsCount()
  {
    if (this.optimized) {
      return this.opt_fields.length;
    }
    return this.fields.size();
  }
  
  public Field getField(int paramInt)
  {
    if (this.optimized)
    {
      if ((paramInt >= 0) && (paramInt < this.opt_fields.length)) {
        return this.opt_fields[paramInt];
      }
    }
    else if ((paramInt >= 0) && (paramInt < this.fields.size())) {
      return (Field)this.fields.elementAt(paramInt);
    }
    return null;
  }
  
  public Object getFieldValueByName(String paramString, int paramInt)
  {
    if (this.loadAllDataInMemory)
    {
      if (this.optimized)
      {
        if ((this.last_find_index != paramInt) && (getRow(paramInt) == null)) {
          return null;
        }
        paramInt = 0;
        while (paramInt < this.opt_fields.length)
        {
          if (paramString.equals(this.opt_fields[paramInt].name)) {
            return this.last_find_row.getValue(paramInt);
          }
          paramInt += 1;
        }
      }
      if ((this.last_find_index != paramInt) && (getRow(paramInt) == null)) {
        return null;
      }
      paramInt = 0;
      while (paramInt < this.fields.size())
      {
        if (paramString.equals(((Field)this.fields.elementAt(paramInt)).name)) {
          return this.last_find_row.getValue(paramInt);
        }
        paramInt += 1;
      }
    }
    if ((this.last_find_index != paramInt) && (getRow(paramInt) == null)) {
      return null;
    }
    paramInt = 0;
    while (paramInt < this.fields.size())
    {
      if (paramString.equals(((Field)this.fields.elementAt(paramInt)).name)) {
        return this.last_find_row.getValue(paramInt);
      }
      paramInt += 1;
    }
    return null;
  }
  
  public long getOffset()
  {
    return this._offset;
  }
  
  public Row getRow(int paramInt)
  {
    InputStream localInputStream;
    if (this.loadAllDataInMemory)
    {
      if (this.optimized)
      {
        if ((paramInt >= 0) && (paramInt < this.opt_rows.length))
        {
          this.last_find_row = this.opt_rows[paramInt];
          this.last_find_index = paramInt;
          return this.last_find_row;
        }
      }
      else if ((paramInt >= 0) && (paramInt < this.rows.size()))
      {
        this.last_find_row = ((Row)this.rows.elementAt(paramInt));
        this.last_find_index = paramInt;
        return this.last_find_row;
      }
    }
    else if ((paramInt >= 0) && (paramInt < this.rowsCount))
    {
      this.last_find_index = paramInt;
      if (this.transaction) {
        localInputStream = this.inputStream;
      }
    }
    for (;;)
    {
      Row localRow2;
      int i;
      byte[] arrayOfByte;
      try
      {
        if (localInputStream.read() == 11)
        {
          localRow2 = createRow();
          paramInt = 0;
          if (paramInt >= localRow2.fieldsCount()) {
            break label426;
          }
          i = localRow2.getFieldType(paramInt);
          if (i == Field.SMALL_INT)
          {
            localRow2.setValue(paramInt, new Integer(localInputStream.read()));
          }
          else if (i == Field.SHORT_INT)
          {
            arrayOfByte = new byte[2];
            MobileDatabase.readDataFromStream(localInputStream, arrayOfByte);
            localRow2.setValue(paramInt, new Integer(MobileDatabase.shortIntFromBytes(arrayOfByte)));
          }
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      return null;
      if (i == Field.INT)
      {
        arrayOfByte = new byte[4];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        localRow2.setValue(paramInt, new Integer(MobileDatabase.intFromBytes(arrayOfByte)));
      }
      else if (i == Field.TIME)
      {
        arrayOfByte = new byte[4];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        localRow2.setValue(paramInt, new Integer(MobileDatabase.intFromBytes(arrayOfByte)));
      }
      else if (i == Field.NAME)
      {
        arrayOfByte = new byte[localException.read()];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        localRow2.setValue(paramInt, MobileDatabase.getUtf8String(arrayOfByte));
      }
      else if (i == Field.TEXT)
      {
        arrayOfByte = new byte[2];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        arrayOfByte = new byte[MobileDatabase.shortIntFromBytes(arrayOfByte)];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        localRow2.setValue(paramInt, MobileDatabase.getUtf8String(arrayOfByte));
      }
      else if (i == Field.BINARY)
      {
        arrayOfByte = new byte[4];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        arrayOfByte = new byte[MobileDatabase.intFromBytes(arrayOfByte)];
        MobileDatabase.readDataFromStream(localException, arrayOfByte);
        localRow2.setValue(paramInt, arrayOfByte);
        break label439;
        label426:
        this.last_find_row = localRow2;
        Row localRow1 = this.last_find_row;
        return localRow1;
      }
      label439:
      paramInt += 1;
    }
  }
  
  public boolean isOptimized()
  {
    return this.optimized;
  }
  
  public void optimize()
  {
    if (!this.loadAllDataInMemory) {}
    while (this.optimized) {
      return;
    }
    this.opt_fields = new Field[this.fields.size()];
    this.fields.copyInto(this.opt_fields);
    this.opt_rows = new Row[this.rows.size()];
    this.rows.copyInto(this.opt_rows);
    this.optimized = true;
    this.fields = null;
    this.rows = null;
    System.gc();
  }
  
  public void removeAllFields()
  {
    if (!this.optimized) {
      this.fields.removeAllElements();
    }
  }
  
  public void removeAllRows()
  {
    if (!this.loadAllDataInMemory) {}
    while (this.optimized) {
      return;
    }
    this.rows.removeAllElements();
  }
  
  public void removeField(Field paramField)
  {
    if (!this.optimized) {
      this.fields.removeElement(paramField);
    }
  }
  
  public void removeRow(Row paramRow)
  {
    if (!this.optimized) {
      this.rows.removeElement(paramRow);
    }
  }
  
  public int rowsCount()
  {
    if (this.loadAllDataInMemory)
    {
      if (this.optimized) {
        return this.opt_rows.length;
      }
      return this.rows.size();
    }
    return this.rowsCount;
  }
  
  public void setOffset(long paramLong)
  {
    this._offset = (paramLong - 1L);
  }
  
  public void startTransaction()
  {
    if (this.loadAllDataInMemory) {}
    while (this.rowsCount == 0) {
      return;
    }
    try
    {
      this.inputStream = getClass().getResourceAsStream(this.pathToDb);
      this.inputStream.skip(this._offset);
      this.transaction = true;
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void stopTransaction()
  {
    if (this.loadAllDataInMemory) {
      return;
    }
    try
    {
      this.inputStream.close();
      this.transaction = true;
      return;
    }
    catch (IOException localIOException)
    {
      for (;;) {}
    }
  }
}
