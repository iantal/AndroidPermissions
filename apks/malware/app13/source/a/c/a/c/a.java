package a.c.a.c;

import a.c.a.b.f;
import android.util.Log;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public final class a
{
  protected a() {}
  
  public static void a()
  {
    a.c.a.a.a(new a());
  }
  
  private void a(a.c.a.b.a paramA)
  {
    while (!paramA.e())
    {
      a.c.a.a.a("RootTools v3.4", f.f().c(paramA));
      try
      {
        if (!paramA.e()) {
          paramA.wait(2000L);
        }
        if ((paramA.d()) || (paramA.e())) {
          continue;
        }
        if ((!f.a) && (!f.b))
        {
          Log.e("RootTools v3.4", "Waiting for a command to be executed in a shell that is not executing and not reading! \n\n Command: " + paramA.c());
          Exception localException1 = new Exception();
          localException1.setStackTrace(Thread.currentThread().getStackTrace());
          localException1.printStackTrace();
          continue;
        }
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          localInterruptedException.printStackTrace();
        }
      }
      finally {}
      Exception localException2;
      if ((f.a) && (!f.b))
      {
        Log.e("RootTools v3.4", "Waiting for a command to be executed in a shell that is executing but not reading! \n\n Command: " + paramA.c());
        localException2 = new Exception();
        localException2.setStackTrace(Thread.currentThread().getStackTrace());
        localException2.printStackTrace();
      }
      else
      {
        Log.e("RootTools v3.4", "Waiting for a command to be executed in a shell that is not reading! \n\n Command: " + paramA.c());
        localException2 = new Exception();
        localException2.setStackTrace(Thread.currentThread().getStackTrace());
        localException2.printStackTrace();
      }
    }
  }
  
  public boolean a(String paramString)
  {
    boolean bool2 = false;
    Object localObject1 = new ArrayList();
    Object localObject2 = new b(this, 0, false, new String[] { "ls " + paramString }, (List)localObject1);
    try
    {
      boolean bool1;
      if (!f.g())
      {
        f.j().a((a.c.a.b.a)localObject2);
        a((a.c.a.b.a)localObject2);
        Iterator localIterator = ((List)localObject1).iterator();
        while (localIterator.hasNext()) {
          if (((String)localIterator.next()).trim().equals(paramString)) {
            bool1 = true;
          }
        }
      }
      for (;;)
      {
        return bool1;
        f.f().a((a.c.a.b.a)localObject2);
        a((a.c.a.b.a)localObject2);
        break;
        try
        {
          a.c.a.a.a(false);
          ((List)localObject1).clear();
        }
        catch (Exception localException)
        {
          for (;;)
          {
            try
            {
              f.i().a((a.c.a.b.a)localObject2);
              a((a.c.a.b.a)localObject2);
              localObject2 = new ArrayList();
              ((List)localObject2).addAll((Collection)localObject1);
              localObject1 = ((List)localObject2).iterator();
              bool1 = bool2;
              if (!((Iterator)localObject1).hasNext()) {
                break;
              }
              if (!((String)((Iterator)localObject1).next()).trim().equals(paramString)) {
                continue;
              }
              return true;
            }
            catch (Exception paramString) {}
            localException = localException;
          }
        }
      }
    }
    catch (Exception paramString)
    {
      return false;
    }
    return false;
  }
  
  public boolean b(String paramString)
  {
    int j = 0;
    a.c.a.a.b.clear();
    ArrayList localArrayList = new ArrayList();
    Object localObject1 = new String[8];
    localObject1[0] = "/sbin/";
    localObject1[1] = "/system/bin/";
    localObject1[2] = "/system/xbin/";
    localObject1[3] = "/data/local/xbin/";
    localObject1[4] = "/data/local/bin/";
    localObject1[5] = "/system/sd/xbin/";
    localObject1[6] = "/system/bin/failsafe/";
    localObject1[7] = "/data/local/";
    a.c.a.a.c("Checking for " + paramString);
    boolean bool1;
    for (;;)
    {
      try
      {
        k = localObject1.length;
        i = 0;
        if (i < k)
        {
          localObject2 = localObject1[i];
          localObject2 = new c(this, 0, false, new String[] { "stat " + (String)localObject2 + paramString }, paramString, localArrayList, (String)localObject2);
          a.c.a.a.b(false).a((a.c.a.b.a)localObject2);
          a((a.c.a.b.a)localObject2);
          i += 1;
          continue;
        }
        bool1 = localArrayList.isEmpty();
        if (bool1) {
          continue;
        }
        bool1 = true;
        bool2 = bool1;
      }
      catch (Exception localException2)
      {
        int k;
        int i;
        Object localObject2;
        a.c.a.a.c(paramString + " was not found, more information MAY be available with Debugging on.");
        bool2 = false;
        continue;
        a.c.a.a.c(paramString + " was NOT found here: " + localException2);
        continue;
        bool3 = bool1;
        if (bool1) {
          break label610;
        }
      }
      bool1 = bool2;
      if (bool2) {
        continue;
      }
      a.c.a.a.c("Trying second method");
      k = localObject1.length;
      bool1 = bool2;
      i = j;
      if (i >= k) {
        continue;
      }
      localObject2 = localObject1[i];
      if (!a.c.a.a.a((String)localObject2 + paramString)) {
        continue;
      }
      a.c.a.a.c(paramString + " was found here: " + (String)localObject2);
      localArrayList.add(localObject2);
      bool1 = true;
      i += 1;
      continue;
      bool1 = false;
    }
    boolean bool3;
    a.c.a.a.c("Trying third method");
    boolean bool2 = bool1;
    for (;;)
    {
      try
      {
        localObject1 = a.c.a.a.a();
        bool3 = bool1;
        if (localObject1 != null)
        {
          bool2 = bool1;
          localObject1 = ((List)localObject1).iterator();
          bool2 = bool1;
          bool3 = bool1;
          if (((Iterator)localObject1).hasNext())
          {
            bool2 = bool1;
            String str = (String)((Iterator)localObject1).next();
            bool2 = bool1;
            if (a.c.a.a.a(str + "/" + paramString))
            {
              bool2 = bool1;
              a.c.a.a.c(paramString + " was found here: " + str);
              bool2 = bool1;
              localArrayList.add(str);
              bool1 = true;
            }
            else
            {
              bool2 = bool1;
              a.c.a.a.c(paramString + " was NOT found here: " + str);
            }
          }
        }
      }
      catch (Exception localException1)
      {
        a.c.a.a.c(paramString + " was not found, more information MAY be available with Debugging on.");
        bool3 = bool2;
      }
      label610:
      Collections.reverse(localArrayList);
      a.c.a.a.b.addAll(localArrayList);
      return bool3;
    }
  }
}
