package swm.CallFlowListener;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.TabActivity;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.text.Editable;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.SlidingDrawer;
import android.widget.SlidingDrawer.OnDrawerCloseListener;
import android.widget.SlidingDrawer.OnDrawerOpenListener;
import android.widget.SlidingDrawer.OnDrawerScrollListener;
import android.widget.TabHost;
import android.widget.TabHost.OnTabChangeListener;
import android.widget.TabHost.TabSpec;
import android.widget.TabWidget;
import android.widget.TextView;
import android.widget.Toast;
import com.waps.AdView;
import com.waps.AppConnect;
import java.util.Calendar;
import java.util.List;

public class MainActivity
  extends TabActivity
  implements View.OnClickListener
{
  public static final String NOTIFICATION = "swm.CallFlowListener.action.NOTIFICATION";
  private TextView callRate;
  private TextView callSurplus;
  private boolean close = false;
  private ImageButton close_notification;
  private DataReceiver dataReceiver;
  private String date;
  private TextView dateCall;
  private TextView dateFlow;
  private SharedPreferences.Editor editor;
  private TextView flowRate;
  private TextView flowSurplus;
  private ImageButton hot_application;
  private boolean isUnregister = true;
  private boolean isVibrate = false;
  private long maxMonthDial = 450L;
  private long maxMonthFlow = 80L;
  private TextView monthAnswer;
  private long monthAnswerTime;
  private TextView monthCall;
  private TextView monthDial;
  private int monthDialRate;
  private long monthDialSurplus;
  private long monthDialTime;
  private TextView monthFlow;
  private int monthFlowRate;
  private long monthFlowSurplus;
  private TextView monthRx;
  private long monthRxCount;
  private TextView monthTotalCall;
  private TextView monthTotalFlow;
  private long monthTotalTime;
  private TextView monthTx;
  private long monthTxCount;
  private Calendar myCalendar;
  private SlidingDrawer mySlidingDrawer;
  private TabHost myTabHost;
  private Intent notification;
  private ImageButton open_vibrator;
  private ImageButton pause_listener;
  private ProgressBar progressbarCall;
  private ProgressBar progressbarFlow;
  private ImageButton reset;
  private ImageButton set_monthtotal;
  private ImageButton share;
  private SharedPreferences sp;
  private String time;
  private TextView timeCall;
  private TextView timeFlow;
  private TextView todayAnswer;
  private long todayAnswerTime;
  private TextView todayDial;
  private long todayDialTime;
  private TextView todayRx;
  private long todayRxCount;
  private TextView todayTotalCall;
  private TextView todayTotalFlow;
  private long todayTotalTime;
  private TextView todayTx;
  private long todayTxCount;
  private long totalWifi;
  private TextView wifi;
  
  public MainActivity() {}
  
  private String changeFormat(long paramLong)
  {
    return String.format("%.1f", new Object[] { Double.valueOf(paramLong / 1048576.0D) });
  }
  
  public static boolean isServiceRunning(Context paramContext, String paramString)
  {
    boolean bool = false;
    paramContext = ((ActivityManager)paramContext.getSystemService("activity")).getRunningServices(30);
    if (paramContext.size() <= 0) {
      return false;
    }
    int i = 0;
    for (;;)
    {
      if (i >= paramContext.size()) {}
      for (;;)
      {
        return bool;
        if (!((ActivityManager.RunningServiceInfo)paramContext.get(i)).service.getClassName().equals(paramString)) {
          break;
        }
        bool = true;
      }
      i += 1;
    }
  }
  
  private void setDateTime()
  {
    this.myCalendar = Calendar.getInstance();
    this.date = (this.myCalendar.get(1) + "-" + (this.myCalendar.get(2) + 1) + "-" + this.myCalendar.get(5));
    this.dateCall.setText(this.date);
    this.dateFlow.setText(this.date);
    if (this.myCalendar.get(11) < 12) {
      if (this.myCalendar.get(12) < 10) {
        this.time = ("上午" + this.myCalendar.get(10) + ":0" + this.myCalendar.get(12));
      }
    }
    for (;;)
    {
      this.timeCall.setText(this.time);
      this.timeFlow.setText(this.time);
      return;
      this.time = ("上午" + this.myCalendar.get(10) + ":" + this.myCalendar.get(12));
      continue;
      if (this.myCalendar.get(12) < 10) {
        this.time = ("下午" + this.myCalendar.get(10) + ":0" + this.myCalendar.get(12));
      } else {
        this.time = ("下午" + this.myCalendar.get(10) + ":" + this.myCalendar.get(12));
      }
    }
  }
  
  private void showInputFlowDialog()
  {
    View localView = LayoutInflater.from(this).inflate(2130903042, null);
    final EditText localEditText1 = (EditText)localView.findViewById(2131165222);
    final EditText localEditText2 = (EditText)localView.findViewById(2131165223);
    localEditText1.setText(this.maxMonthDial);
    localEditText2.setText(this.maxMonthFlow);
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
    localBuilder.setTitle("设置包月（套餐）量");
    localBuilder.setView(localView);
    localBuilder.setPositiveButton(17039370, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = localEditText1.getText().toString();
        String str = localEditText2.getText().toString();
        try
        {
          MainActivity.this.maxMonthDial = Long.parseLong(paramAnonymousDialogInterface);
          MainActivity.this.maxMonthFlow = Long.parseLong(str);
          MainActivity.this.monthCall.setText("包月时长：" + MainActivity.this.maxMonthDial + "分钟");
          MainActivity.this.monthFlow.setText("包月流量：" + MainActivity.this.maxMonthFlow + "MB");
          MainActivity.this.updateSurplus();
          MainActivity.this.editor.putLong("maxMonthDial", MainActivity.this.maxMonthDial);
          MainActivity.this.editor.putLong("maxMonthFlow", MainActivity.this.maxMonthFlow);
          MainActivity.this.editor.commit();
          return;
        }
        catch (Exception paramAnonymousDialogInterface)
        {
          Toast.makeText(MainActivity.this, "您输入的数字不正确，请重新输入！", 1).show();
        }
      }
    });
    localBuilder.setNegativeButton(17039360, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.show();
  }
  
  private void updateSurplus()
  {
    double d = Double.parseDouble(changeFormat(this.monthRxCount + this.monthTxCount));
    long l;
    if (d > d)
    {
      l = d + 1L;
      this.monthDialSurplus = (this.maxMonthDial - this.monthDialTime);
      this.monthFlowSurplus = (this.maxMonthFlow - l);
      this.callSurplus.setText("本月剩余通话：" + this.monthDialSurplus + "分钟");
      this.flowSurplus.setText("本月剩余流量：" + this.monthFlowSurplus + "MB");
      if (this.monthDialSurplus <= 0L) {
        break label344;
      }
      this.callSurplus.setTextColor(-1);
      this.monthDialRate = ((int)(this.monthDialTime * 100L / this.maxMonthDial));
      this.progressbarCall.setProgress(this.monthDialRate);
      this.callRate.setText("通话已用：" + this.monthDialRate + "%");
      if (this.monthDialRate < 90) {
        break label333;
      }
      this.callRate.setTextColor(-65536);
      label217:
      this.progressbarCall.refreshDrawableState();
      if (this.monthFlowSurplus <= 0L) {
        break label428;
      }
      this.flowSurplus.setTextColor(-1);
      this.monthFlowRate = ((int)(l * 100L / this.maxMonthFlow));
      this.progressbarFlow.setProgress(this.monthFlowRate);
      this.flowRate.setText("流量已用：" + this.monthFlowRate + "%");
      if (this.monthFlowRate < 90) {
        break label417;
      }
      this.flowRate.setTextColor(-65536);
    }
    for (;;)
    {
      this.progressbarFlow.refreshDrawableState();
      return;
      l = d;
      break;
      label333:
      this.callRate.setTextColor(-1);
      break label217;
      label344:
      this.monthDialRate = ((int)(this.monthDialTime * 100L / this.maxMonthDial));
      this.progressbarCall.setProgress(100);
      this.callRate.setText("通话已用：" + this.monthDialRate + "%");
      this.callSurplus.setTextColor(-65536);
      break label217;
      label417:
      this.flowRate.setTextColor(-1);
      continue;
      label428:
      this.monthFlowRate = ((int)(l * 100L / this.maxMonthFlow));
      this.progressbarFlow.setProgress(100);
      this.flowRate.setText("流量已用：" + this.monthFlowRate + "%");
      this.flowSurplus.setTextColor(-65536);
    }
  }
  
  public void onClick(View paramView)
  {
    if (paramView == this.close_notification)
    {
      if (!this.close)
      {
        this.close_notification.setBackgroundResource(2130837522);
        this.close = true;
        this.notification.putExtra("close", true);
        sendBroadcast(this.notification);
      }
    }
    else
    {
      if (paramView == this.set_monthtotal)
      {
        this.mySlidingDrawer.close();
        showInputFlowDialog();
      }
      if (paramView == this.pause_listener)
      {
        this.mySlidingDrawer.close();
        new AlertDialog.Builder(this).setTitle("警告").setMessage(2131034140).setPositiveButton("确定", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            paramAnonymousDialogInterface = new Intent(MainActivity.this, CallFlowService.class);
            MainActivity.this.stopService(paramAnonymousDialogInterface);
          }
        }).setNegativeButton("取消", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            paramAnonymousDialogInterface.cancel();
          }
        }).create().show();
      }
      if ((paramView == this.open_vibrator) && (paramView == this.open_vibrator))
      {
        if (this.isVibrate) {
          break label388;
        }
        this.open_vibrator.setBackgroundResource(2130837513);
        this.isVibrate = true;
        this.notification.putExtra("isVibrate", true);
      }
    }
    for (;;)
    {
      sendBroadcast(this.notification);
      if (paramView == this.hot_application) {
        AppConnect.getInstance(this).showOffers(this);
      }
      if (paramView == this.share)
      {
        this.mySlidingDrawer.close();
        Intent localIntent = new Intent("android.intent.action.SEND");
        localIntent.setType("image/*");
        localIntent.putExtra("android.intent.extra.SUBJECT", "分享");
        localIntent.putExtra("android.intent.extra.TEXT", "偶正在使用”通话和流量监测器“，感觉不错喽，赶紧下载安装体验一下吧...");
        localIntent.setFlags(268435456);
        startActivity(Intent.createChooser(localIntent, getTitle()));
      }
      if (paramView == this.reset)
      {
        this.mySlidingDrawer.close();
        new AlertDialog.Builder(this).setTitle("警告").setMessage("本操作会将数据统计结果全部清为0，你确定要重置数据吗？").setPositiveButton("确定", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            MainActivity.this.notification.putExtra("resetToZero", true);
            MainActivity.this.sendBroadcast(MainActivity.this.notification);
          }
        }).setNegativeButton("取消", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            paramAnonymousDialogInterface.cancel();
          }
        }).create().show();
      }
      return;
      this.close_notification.setBackgroundResource(2130837512);
      this.close = false;
      this.notification.putExtra("close", false);
      break;
      label388:
      this.open_vibrator.setBackgroundResource(2130837515);
      this.isVibrate = false;
      this.notification.putExtra("isVibrate", false);
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903041);
    new AdView(this, (LinearLayout)findViewById(2131165221)).DisplayAd();
    AppConnect.getInstance(this);
    AppConnect.getInstance(this).setPushIcon(2130837511);
    AppConnect.getInstance(this).setPushAudio(true);
    this.myTabHost = getTabHost();
    this.myTabHost.addTab(this.myTabHost.newTabSpec("tab1").setIndicator("通话", null).setContent(2131165184));
    this.myTabHost.addTab(this.myTabHost.newTabSpec("tab2").setIndicator("流量", null).setContent(2131165197));
    this.myTabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener()
    {
      public void onTabChanged(String paramAnonymousString)
      {
        MainActivity.this.mySlidingDrawer.close();
        if (!paramAnonymousString.equals("tab1")) {
          paramAnonymousString.equals("tab2");
        }
      }
    });
    paramBundle = getTabWidget().getChildAt(0);
    ((TextView)paramBundle.findViewById(16908310)).setTextSize(25.0F);
    ((ImageView)paramBundle.findViewById(16908294)).setPadding(0, -5, 0, 0);
    paramBundle = getTabWidget().getChildAt(1);
    ((TextView)paramBundle.findViewById(16908310)).setTextSize(25.0F);
    ((ImageView)paramBundle.findViewById(16908294)).setPadding(0, -5, 0, 0);
    this.progressbarCall = ((ProgressBar)findViewById(2131165194));
    this.progressbarFlow = ((ProgressBar)findViewById(2131165207));
    this.dateCall = ((TextView)findViewById(2131165185));
    this.dateFlow = ((TextView)findViewById(2131165198));
    this.timeCall = ((TextView)findViewById(2131165186));
    this.timeFlow = ((TextView)findViewById(2131165199));
    this.todayDial = ((TextView)findViewById(2131165187));
    this.todayAnswer = ((TextView)findViewById(2131165188));
    this.todayTotalCall = ((TextView)findViewById(2131165189));
    this.monthDial = ((TextView)findViewById(2131165190));
    this.monthAnswer = ((TextView)findViewById(2131165191));
    this.monthTotalCall = ((TextView)findViewById(2131165192));
    this.callSurplus = ((TextView)findViewById(2131165193));
    this.callRate = ((TextView)findViewById(2131165195));
    this.monthCall = ((TextView)findViewById(2131165196));
    this.todayRx = ((TextView)findViewById(2131165200));
    this.todayTx = ((TextView)findViewById(2131165201));
    this.todayTotalFlow = ((TextView)findViewById(2131165202));
    this.monthRx = ((TextView)findViewById(2131165203));
    this.monthTx = ((TextView)findViewById(2131165204));
    this.monthTotalFlow = ((TextView)findViewById(2131165205));
    this.flowSurplus = ((TextView)findViewById(2131165206));
    this.flowRate = ((TextView)findViewById(2131165208));
    this.monthFlow = ((TextView)findViewById(2131165210));
    this.wifi = ((TextView)findViewById(2131165209));
    this.close_notification = ((ImageButton)findViewById(2131165214));
    this.reset = ((ImageButton)findViewById(2131165220));
    this.set_monthtotal = ((ImageButton)findViewById(2131165215));
    this.pause_listener = ((ImageButton)findViewById(2131165216));
    this.hot_application = ((ImageButton)findViewById(2131165218));
    this.open_vibrator = ((ImageButton)findViewById(2131165217));
    this.share = ((ImageButton)findViewById(2131165219));
    this.close_notification.setOnClickListener(this);
    this.reset.setOnClickListener(this);
    this.set_monthtotal.setOnClickListener(this);
    this.pause_listener.setOnClickListener(this);
    this.hot_application.setOnClickListener(this);
    this.open_vibrator.setOnClickListener(this);
    this.share.setOnClickListener(this);
    this.mySlidingDrawer = ((SlidingDrawer)findViewById(2131165211));
    this.mySlidingDrawer.unlock();
    this.mySlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener()
    {
      public void onDrawerOpened()
      {
        MainActivity.this.mySlidingDrawer.getHandle().setBackgroundResource(2130837517);
      }
    });
    this.mySlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener()
    {
      public void onDrawerClosed()
      {
        MainActivity.this.mySlidingDrawer.getHandle().setBackgroundResource(2130837516);
      }
    });
    this.mySlidingDrawer.setOnDrawerScrollListener(new SlidingDrawer.OnDrawerScrollListener()
    {
      public void onScrollEnded() {}
      
      public void onScrollStarted() {}
    });
    this.sp = getSharedPreferences("CallFlow", 0);
    this.editor = this.sp.edit();
    this.maxMonthDial = this.sp.getLong("maxMonthDial", 450L);
    this.maxMonthFlow = this.sp.getLong("maxMonthFlow", 80L);
    this.monthCall.setText("包月通话：" + this.maxMonthDial + "分钟");
    this.monthFlow.setText("包月流量：" + this.maxMonthFlow + "MB");
    this.todayDialTime = this.sp.getLong("todayDialTime", 0L);
    this.todayAnswerTime = this.sp.getLong("todayAnswerTime", 0L);
    this.todayTotalTime = (this.todayDialTime + this.todayAnswerTime);
    this.monthDialTime = this.sp.getLong("monthDialTime", 0L);
    this.monthAnswerTime = this.sp.getLong("monthAnswerTime", 0L);
    this.monthTotalTime = (this.monthDialTime + this.monthAnswerTime);
    this.todayDial.setText(this.todayDialTime);
    this.todayAnswer.setText(this.todayAnswerTime);
    this.todayTotalCall.setText(this.todayTotalTime);
    this.monthDial.setText(this.monthDialTime);
    this.monthAnswer.setText(this.monthAnswerTime);
    this.monthTotalCall.setText(this.monthTotalTime);
    this.notification = new Intent();
    this.notification.setAction("swm.CallFlowListener.action.NOTIFICATION");
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getMenuInflater().inflate(2131099648, paramMenu);
    return true;
  }
  
  protected void onDestroy()
  {
    this.editor.putLong("maxMonthDial", this.maxMonthDial);
    this.editor.putLong("maxMonthFlow", this.maxMonthFlow);
    this.editor.commit();
    AppConnect.getInstance(this).finalize();
    super.onDestroy();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    int i = paramMenuItem.getItemId();
    this.mySlidingDrawer.close();
    switch (i)
    {
    }
    for (;;)
    {
      return true;
      paramMenuItem = LayoutInflater.from(this).inflate(2130903040, null);
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
      localBuilder.setTitle("帮助");
      localBuilder.setView(paramMenuItem);
      localBuilder.setPositiveButton("离开", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.cancel();
        }
      });
      localBuilder.show();
      continue;
      new AlertDialog.Builder(this).setTitle("关于").setMessage("九州工作室精心制作             QQ：651978326").setPositiveButton("离开", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.cancel();
        }
      }).create().show();
      continue;
      finish();
    }
  }
  
  protected void onResume()
  {
    if (this.isUnregister)
    {
      this.dataReceiver = new DataReceiver();
      IntentFilter localIntentFilter = new IntentFilter();
      localIntentFilter.addAction("swm.CallFlowListener.action.FLOW_DATA");
      registerReceiver(this.dataReceiver, localIntentFilter);
      this.isUnregister = false;
    }
    super.onResume();
  }
  
  protected void onStart()
  {
    super.onStart();
    setDateTime();
    Intent localIntent = new Intent(this, CallFlowService.class);
    if (!isServiceRunning(this, "swm.CallFlowListener.CallFlowService")) {
      startService(localIntent);
    }
  }
  
  public void onStop()
  {
    if (!this.isUnregister)
    {
      unregisterReceiver(this.dataReceiver);
      this.isUnregister = true;
    }
    super.onStop();
  }
  
  class DataReceiver
    extends BroadcastReceiver
  {
    DataReceiver() {}
    
    public void onReceive(Context paramContext, Intent paramIntent)
    {
      MainActivity.this.setDateTime();
      MainActivity.this.close = paramIntent.getBooleanExtra("close", false);
      if (!MainActivity.this.close)
      {
        MainActivity.this.close_notification.setBackgroundResource(2130837512);
        MainActivity.this.isVibrate = paramIntent.getBooleanExtra("isVibrate", false);
        if (MainActivity.this.isVibrate) {
          break label656;
        }
        MainActivity.this.open_vibrator.setBackgroundResource(2130837515);
      }
      for (;;)
      {
        MainActivity.this.todayDialTime = paramIntent.getLongExtra("todayDialTime", 0L);
        MainActivity.this.todayAnswerTime = paramIntent.getLongExtra("todayAnswerTime", 0L);
        MainActivity.this.todayTotalTime = (MainActivity.this.todayDialTime + MainActivity.this.todayAnswerTime);
        MainActivity.this.monthDialTime = paramIntent.getLongExtra("monthDialTime", 0L);
        MainActivity.this.monthAnswerTime = paramIntent.getLongExtra("monthAnswerTime", 0L);
        MainActivity.this.monthTotalTime = (MainActivity.this.monthDialTime + MainActivity.this.monthAnswerTime);
        MainActivity.this.todayDial.setText(MainActivity.this.todayDialTime);
        MainActivity.this.todayAnswer.setText(MainActivity.this.todayAnswerTime);
        MainActivity.this.todayTotalCall.setText(MainActivity.this.todayTotalTime);
        MainActivity.this.monthDial.setText(MainActivity.this.monthDialTime);
        MainActivity.this.monthAnswer.setText(MainActivity.this.monthAnswerTime);
        MainActivity.this.monthTotalCall.setText(MainActivity.this.monthTotalTime);
        MainActivity.this.todayRxCount = paramIntent.getLongExtra("todayRxCount", 0L);
        MainActivity.this.todayTxCount = paramIntent.getLongExtra("todayTxCount", 0L);
        MainActivity.this.monthRxCount = paramIntent.getLongExtra("monthRxCount", 0L);
        MainActivity.this.monthTxCount = paramIntent.getLongExtra("monthTxCount", 0L);
        MainActivity.this.totalWifi = paramIntent.getLongExtra("totalWifi", 0L);
        MainActivity.this.todayRx.setText(MainActivity.this.changeFormat(MainActivity.this.todayRxCount));
        MainActivity.this.todayTx.setText(MainActivity.this.changeFormat(MainActivity.this.todayTxCount));
        MainActivity.this.todayTotalFlow.setText(MainActivity.this.changeFormat(MainActivity.this.todayRxCount + MainActivity.this.todayTxCount));
        MainActivity.this.monthRx.setText(MainActivity.this.changeFormat(MainActivity.this.monthRxCount));
        MainActivity.this.monthTx.setText(MainActivity.this.changeFormat(MainActivity.this.monthTxCount));
        MainActivity.this.monthTotalFlow.setText(MainActivity.this.changeFormat(MainActivity.this.monthRxCount + MainActivity.this.monthTxCount));
        MainActivity.this.wifi.setText("本月Wifi使用流量：" + MainActivity.this.changeFormat(MainActivity.this.totalWifi) + "MB");
        MainActivity.this.updateSurplus();
        return;
        MainActivity.this.close_notification.setBackgroundResource(2130837522);
        break;
        label656:
        MainActivity.this.open_vibrator.setBackgroundResource(2130837513);
      }
    }
  }
}
