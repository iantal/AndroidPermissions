package com.waps;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningTaskInfo;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.view.View;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class w
  extends AsyncTask
{
  public static boolean e = false;
  public static boolean f = false;
  protected int a;
  z b;
  String c = "";
  String d = "";
  float g = 0.0F;
  float h = 0.0F;
  NumberFormat i = new DecimalFormat("#0");
  float j;
  InputStream k = null;
  FileOutputStream l = null;
  String m = "";
  String n = "";
  File o = null;
  private String p;
  private View q;
  private x r;
  private y s;
  private Context t;
  
  public w(Context paramContext, View paramView, String paramString)
  {
    try
    {
      this.t = paramContext;
      this.q = paramView;
      this.p = paramString;
      this.c = paramString.substring(paramString.indexOf("http://") + 7, paramString.indexOf("/", paramString.indexOf("http://") + 8));
      this.d = paramString.substring(0, paramString.indexOf("/", paramString.indexOf("http://") + 8));
      this.r = new x(this.t);
      this.b = new z(this.t);
      AppConnect.a(this.t, this.b);
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public w(Context paramContext, View paramView, String paramString1, String paramString2)
  {
    try
    {
      this.t = paramContext;
      this.q = paramView;
      this.p = paramString1;
      this.c = paramString1.substring(paramString1.indexOf("http://") + 7, paramString1.indexOf("/", paramString1.indexOf("http://") + 8));
      this.d = paramString1.substring(0, paramString1.indexOf("/", paramString1.indexOf("http://") + 8));
      this.r = new x(this.t);
      this.b = new z(this.t);
      AppConnect.a(this.t, this.b);
      this.m = (paramString2 + ".apk");
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public String a(String paramString)
  {
    try
    {
      paramString = paramString.substring(paramString.lastIndexOf("/") + 1, paramString.indexOf(".apk") + 4);
      return paramString;
    }
    catch (Exception paramString) {}
    return "";
  }
  
  protected String a(String... paramVarArgs)
  {
    for (;;)
    {
      try
      {
        this.a = ((int)System.currentTimeMillis());
        this.r.a(this.q, (String)AppConnect.d(this.t).get("getting_filename"), this.a, "0 %");
        if (SDKUtils.isNull(this.m)) {
          this.m = a(this.p);
        }
        this.n = "/sdcard/download/";
        if (this.b.a()) {
          continue;
        }
        paramVarArgs = new DefaultHttpClient().execute(new HttpGet(paramVarArgs[0].replaceAll(" ", "%20")));
        paramVarArgs = paramVarArgs.getEntity();
        this.k = paramVarArgs.getContent();
        this.g = ((float)paramVarArgs.getContentLength());
        if (!Environment.getExternalStorageState().equals("mounted")) {
          continue;
        }
        paramVarArgs = new File(this.n);
        localObject1 = new File(this.n, this.m);
        if (!paramVarArgs.exists()) {
          paramVarArgs.mkdir();
        }
        if (!((File)localObject1).exists()) {
          ((File)localObject1).createNewFile();
        }
        this.l = new FileOutputStream((File)localObject1);
        if (this.k == null) {
          continue;
        }
        paramVarArgs = new byte[51200];
      }
      catch (Exception paramVarArgs)
      {
        Object localObject1;
        paramVarArgs.printStackTrace();
        try
        {
          if (this.k != null) {
            this.k.close();
          }
          if (this.l == null) {
            continue;
          }
          this.l.close();
        }
        catch (Exception paramVarArgs) {}
        continue;
        Thread.sleep(500L);
        continue;
        continue;
      }
      finally
      {
        try
        {
          if (this.k != null) {
            this.k.close();
          }
          if (this.l != null) {
            this.l.close();
          }
        }
        catch (Exception localException2)
        {
          int i1;
          continue;
        }
        throw paramVarArgs;
        this.l.write(paramVarArgs, 0, i1);
        this.h += i1;
        this.j = (this.h / this.g * 100.0F);
        publishProgress(new Integer[] { Integer.valueOf((int)(this.h / this.g) * 100) });
        this.i.format(this.j);
        this.r.a(this.q, this.m, this.a, this.i.format(this.j) + " %");
        f = true;
        continue;
        this.o = this.t.getFileStreamPath(this.m);
        continue;
        this.r.a(this.q, this.m, this.a, paramVarArgs, (String)AppConnect.d(this.t).get("download_complete"));
        continue;
      }
      i1 = this.k.read(paramVarArgs);
      if (i1 != -1) {}
      try
      {
        localObject1 = ((ActivityManager.RunningTaskInfo)((ActivityManager)this.t.getSystemService("activity")).getRunningTasks(2).get(0)).topActivity.getClassName();
        if ((((String)localObject1).contains("PackageInstallerActivity")) || (((String)localObject1).contains("InstallAppProgress")))
        {
          boolean bool = ((Activity)this.t).isFinishing();
          if (!bool) {}
        }
        else
        {
          if (Integer.parseInt(this.i.format(this.j)) <= 100) {
            continue;
          }
          this.r.a(this.q, this.m, this.a, this.n + this.m, (String)AppConnect.d(this.t).get("failed_to_download"));
          i1 = this.k.read(paramVarArgs);
          Thread.sleep(1000L);
          if (i1 == -1)
          {
            f = false;
            paramVarArgs = this.n + this.m;
            if (!Environment.getExternalStorageState().equals("mounted")) {
              continue;
            }
            this.o = new File(paramVarArgs);
            if (!this.m.endsWith(".apk")) {
              continue;
            }
            this.r.a(this.q, this.m, this.a, paramVarArgs, (String)AppConnect.d(this.t).get("click_to_install"));
            e = true;
            paramVarArgs = new Intent();
            paramVarArgs.setAction("android.intent.action.VIEW");
            paramVarArgs.setDataAndType(Uri.fromFile(this.o), "application/vnd.android.package-archive");
            this.t.startActivity(paramVarArgs);
            this.s = new y(this.r, this.a, this.m);
            a(this.s);
          }
        }
      }
      catch (Exception localException1)
      {
        Object localObject2;
        Object localObject3;
        localException1.printStackTrace();
      }
      try
      {
        if (this.k != null) {
          this.k.close();
        }
        if (this.l != null) {
          this.l.close();
        }
      }
      catch (Exception paramVarArgs)
      {
        continue;
      }
      return "";
      localObject2 = paramVarArgs[0];
      paramVarArgs = new HttpHost("10.0.0.172", 80, "http");
      localObject1 = new HttpHost(this.c, 80, "http");
      localObject2 = new HttpGet(((String)localObject2).replaceAll(" ", "%20").replaceFirst(this.d, ""));
      localObject3 = new BasicHttpParams();
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject3, 15000);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject3, 30000);
      localObject3 = new DefaultHttpClient((HttpParams)localObject3);
      ((HttpClient)localObject3).getParams().setParameter("http.route.default-proxy", paramVarArgs);
      paramVarArgs = ((HttpClient)localObject3).execute((HttpHost)localObject1, (HttpRequest)localObject2);
      continue;
      this.l = this.t.openFileOutput(this.m, 3);
    }
  }
  
  public void a(y paramY)
  {
    IntentFilter localIntentFilter = new IntentFilter();
    localIntentFilter.addAction("android.intent.action.PACKAGE_ADDED");
    localIntentFilter.addDataScheme("package");
    this.t.registerReceiver(paramY, localIntentFilter);
  }
  
  public long b(String paramString)
  {
    try
    {
      if (!this.b.a())
      {
        paramString = (HttpURLConnection)new URL(paramString).openConnection();
        paramString.setConnectTimeout(5000);
        paramString.setRequestMethod("GET");
        return paramString.getContentLength();
      }
      HttpHost localHttpHost1 = new HttpHost("10.0.0.172", 80, "http");
      HttpHost localHttpHost2 = new HttpHost(this.c, 80, "http");
      paramString = new HttpGet(paramString.replaceAll(" ", "%20").replaceFirst(this.d, ""));
      Object localObject = new BasicHttpParams();
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject, 15000);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject, 30000);
      localObject = new DefaultHttpClient((HttpParams)localObject);
      ((HttpClient)localObject).getParams().setParameter("http.route.default-proxy", localHttpHost1);
      long l1 = ((HttpClient)localObject).execute(localHttpHost2, paramString).getEntity().getContentLength();
      return l1;
    }
    catch (Exception paramString) {}
    return 0L;
  }
}
