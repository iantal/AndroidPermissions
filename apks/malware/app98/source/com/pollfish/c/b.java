package com.pollfish.c;

import android.app.Activity;
import android.content.Context;
import com.pollfish.f.b.a;
import com.pollfish.f.c;
import com.pollfish.interfaces.a.b;
import com.pollfish.interfaces.a.d;
import java.io.File;
import java.io.FileInputStream;
import org.json.JSONObject;

public class b
  extends g
{
  private com.pollfish.a.b a;
  private a.b b;
  private Activity c;
  private a.d d;
  private String e;
  
  public b(com.pollfish.a.b paramB, a.b paramB1, a.d paramD, Activity paramActivity)
  {
    this.a = paramB;
    this.b = paramB1;
    this.c = paramActivity;
    this.d = paramD;
    this.e = (paramActivity.getApplicationContext().getCacheDir().getAbsolutePath() + "/" + "pollfish_queue");
  }
  
  protected Boolean a(Void... paramVarArgs)
  {
    com.pollfish.f.b.a("CheckQueueTask", "checking queue..");
    try
    {
      paramVarArgs = new File(this.e);
      if (paramVarArgs.exists())
      {
        paramVarArgs = paramVarArgs.listFiles();
        if (paramVarArgs != null)
        {
          com.pollfish.f.b.a("CheckQueueTask", "Num of current files in queue: " + paramVarArgs.length);
          if (paramVarArgs.length > 0)
          {
            int i = c.a(this.c, "pollfish_pref_queue") + 1;
            com.pollfish.f.b.a("CheckQueueTask", "numTried to empty queue: " + i);
            c.a(this.c, "pollfish_pref_queue", i);
            com.pollfish.f.b.a("CheckQueueTask", "Sending files from queue to server");
            i = 0;
            while (i < paramVarArgs.length)
            {
              a(paramVarArgs[i]);
              i += 1;
            }
            return Boolean.valueOf(true);
          }
          com.pollfish.f.b.a("CheckQueueTask", "queue is empty");
          c.a(this.c, "pollfish_pref_queue", 0);
        }
      }
    }
    catch (Exception paramVarArgs)
    {
      for (;;)
      {
        a.a(paramVarArgs);
        com.pollfish.f.b.b("CheckQueueTask", "Error reading queue in cache: " + paramVarArgs);
      }
    }
    return Boolean.valueOf(false);
  }
  
  protected void a()
  {
    super.a();
  }
  
  public void a(File paramFile)
  {
    try
    {
      com.pollfish.f.b.a("CheckQueueTask", "Send request to server from cache with name: " + paramFile.getName());
      Object localObject1 = new FileInputStream(paramFile.getAbsolutePath());
      Object localObject2 = new byte[((FileInputStream)localObject1).available()];
      ((FileInputStream)localObject1).read((byte[])localObject2);
      ((FileInputStream)localObject1).close();
      localObject1 = new JSONObject(new String((byte[])localObject2, "UTF-8"));
      if (localObject1 != null)
      {
        localObject2 = ((JSONObject)localObject1).getString("serverUrl");
        if (localObject2 != null)
        {
          ((JSONObject)localObject1).remove("serverUrl");
          com.pollfish.f.b.a("CheckQueueTask", "Queue cache file: with params size():" + ((JSONObject)localObject1).length() + " and name: " + paramFile.getName() + " is being send to server url: " + (String)localObject2);
          new d(this.a, (String)localObject2, (JSONObject)localObject1, this.b, this.c, false, paramFile.getName(), null).c(new Void[0]);
          return;
        }
        com.pollfish.f.b.a("CheckQueueTask", "Did not find a valid server url in queue to sent request for file: " + paramFile.getName());
        return;
      }
    }
    catch (Exception localException1)
    {
      a.a(localException1);
      com.pollfish.f.b.b("CheckQueueTask", "loadJSONFromFile Error reading queue in cache: " + localException1 + " deleting file");
      try
      {
        File localFile = new File(paramFile.getAbsolutePath());
        if (localFile.exists())
        {
          localFile.delete();
          return;
        }
      }
      catch (Exception localException2)
      {
        a.a(localException2);
        com.pollfish.f.b.b("CheckQueueTask", "Error during loadJSONFromFile for file: " + paramFile.getName() + " e: " + localException2 + " deleting file");
      }
    }
  }
  
  protected void a(Boolean paramBoolean)
  {
    com.pollfish.f.b.a("CheckQueueTask", "After checking queue result: " + paramBoolean);
    if ((this.d != null) && (!paramBoolean.booleanValue())) {
      this.d.a();
    }
    super.a(paramBoolean);
  }
}
