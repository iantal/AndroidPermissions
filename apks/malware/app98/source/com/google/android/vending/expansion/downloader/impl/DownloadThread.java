package com.google.android.vending.expansion.downloader.impl;

import android.content.Context;
import android.net.Proxy;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.Log;
import com.google.android.vending.expansion.downloader.Helpers;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.Random;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.methods.HttpGet;

public class DownloadThread
{
  private Context mContext;
  private final DownloadsDB mDB;
  private DownloadInfo mInfo;
  private final DownloadNotification mNotification;
  private DownloaderService mService;
  private String mUserAgent;
  
  public DownloadThread(DownloadInfo paramDownloadInfo, DownloaderService paramDownloaderService, DownloadNotification paramDownloadNotification)
  {
    this.mContext = paramDownloaderService;
    this.mInfo = paramDownloadInfo;
    this.mService = paramDownloaderService;
    this.mNotification = paramDownloadNotification;
    this.mDB = DownloadsDB.getDB(paramDownloaderService);
    this.mUserAgent = ("APKXDL (Linux; U; Android " + Build.VERSION.RELEASE + ";" + Locale.getDefault().toString() + "; " + Build.DEVICE + "/" + Build.ID + ")" + paramDownloaderService.getPackageName());
  }
  
  private void addRequestHeaders(InnerState paramInnerState, HttpGet paramHttpGet)
  {
    if (paramInnerState.mContinuingDownload)
    {
      if (paramInnerState.mHeaderETag != null) {
        paramHttpGet.addHeader("If-Match", paramInnerState.mHeaderETag);
      }
      paramHttpGet.addHeader("Range", "bytes=" + paramInnerState.mBytesSoFar + "-");
    }
  }
  
  private boolean cannotResume(InnerState paramInnerState)
  {
    return (paramInnerState.mBytesSoFar > 0) && (paramInnerState.mHeaderETag == null);
  }
  
  private void checkConnectivity(State paramState)
    throws DownloadThread.StopRequest
  {
    switch (this.mService.getNetworkAvailabilityState(this.mDB))
    {
    case 1: 
    case 4: 
    default: 
      return;
    case 2: 
      throw new StopRequest(195, "waiting for network to return");
    case 6: 
      throw new StopRequest(196, "waiting for wifi or for download over cellular to be authorized");
    case 5: 
      throw new StopRequest(195, "roaming is not allowed");
    }
    throw new StopRequest(197, "waiting for wifi");
  }
  
  private void checkPausedOrCanceled(State paramState)
    throws DownloadThread.StopRequest
  {
    if (this.mService.getControl() == 1) {}
    switch (this.mService.getStatus())
    {
    default: 
      return;
    case 193: 
      throw new StopRequest(this.mService.getStatus(), "download paused");
    }
    throw new StopRequest(this.mService.getStatus(), "download cancelled");
  }
  
  private void cleanupDestination(State paramState, int paramInt)
  {
    closeDestination(paramState);
    if ((paramState.mFilename != null) && (DownloaderService.isStatusError(paramInt)))
    {
      new File(paramState.mFilename).delete();
      paramState.mFilename = null;
    }
  }
  
  private void closeDestination(State paramState)
  {
    try
    {
      if (paramState.mStream != null)
      {
        paramState.mStream.close();
        paramState.mStream = null;
      }
      return;
    }
    catch (IOException paramState) {}
  }
  
  private void executeDownload(State paramState, AndroidHttpClient paramAndroidHttpClient, HttpGet paramHttpGet)
    throws DownloadThread.StopRequest, DownloadThread.RetryDownload
  {
    InnerState localInnerState = new InnerState(null);
    byte[] arrayOfByte = new byte['á€€'];
    checkPausedOrCanceled(paramState);
    setupDestinationFile(paramState, localInnerState);
    addRequestHeaders(localInnerState, paramHttpGet);
    checkConnectivity(paramState);
    this.mNotification.onDownloadStateChanged(3);
    paramAndroidHttpClient = sendRequest(paramState, paramAndroidHttpClient, paramHttpGet);
    handleExceptionalStatus(paramState, localInnerState, paramAndroidHttpClient);
    processResponseHeaders(paramState, localInnerState, paramAndroidHttpClient);
    paramAndroidHttpClient = openResponseEntity(paramState, paramAndroidHttpClient);
    this.mNotification.onDownloadStateChanged(4);
    transferData(paramState, localInnerState, arrayOfByte, paramAndroidHttpClient);
  }
  
  private void finalizeDestinationFile(State paramState)
    throws DownloadThread.StopRequest
  {
    syncDestination(paramState);
    String str = paramState.mFilename;
    Object localObject = Helpers.generateSaveFileName(this.mService, this.mInfo.mFileName);
    if (!paramState.mFilename.equals(localObject))
    {
      paramState = new File(str);
      localObject = new File((String)localObject);
      if ((this.mInfo.mTotalBytes != -1L) && (this.mInfo.mCurrentBytes == this.mInfo.mTotalBytes))
      {
        if (!paramState.renameTo((File)localObject)) {
          throw new StopRequest(492, "unable to finalize destination file");
        }
      }
      else {
        throw new StopRequest(487, "file delivered with incorrect size. probably due to network not browser configured");
      }
    }
  }
  
  private int getFinalStatusForHttpError(State paramState)
  {
    if (this.mService.getNetworkAvailabilityState(this.mDB) != 1) {
      return 195;
    }
    if (this.mInfo.mNumFailed < 5)
    {
      paramState.mCountRetry = true;
      return 194;
    }
    Log.w("LVLDL", "reached max retries for " + this.mInfo.mNumFailed);
    return 495;
  }
  
  private void handleEndOfStream(State paramState, InnerState paramInnerState)
    throws DownloadThread.StopRequest
  {
    this.mInfo.mCurrentBytes = paramInnerState.mBytesSoFar;
    this.mDB.updateDownload(this.mInfo);
    int i;
    if ((paramInnerState.mHeaderContentLength != null) && (paramInnerState.mBytesSoFar != Integer.parseInt(paramInnerState.mHeaderContentLength))) {
      i = 1;
    }
    while (i != 0) {
      if (cannotResume(paramInnerState))
      {
        throw new StopRequest(489, "mismatched content length");
        i = 0;
      }
      else
      {
        throw new StopRequest(getFinalStatusForHttpError(paramState), "closed socket before end of file");
      }
    }
  }
  
  private void handleExceptionalStatus(State paramState, InnerState paramInnerState, HttpResponse paramHttpResponse)
    throws DownloadThread.StopRequest, DownloadThread.RetryDownload
  {
    int j = paramHttpResponse.getStatusLine().getStatusCode();
    if ((j == 503) && (this.mInfo.mNumFailed < 5)) {
      handleServiceUnavailable(paramState, paramHttpResponse);
    }
    if ((j == 301) || (j == 302) || (j == 303) || (j == 307)) {
      handleRedirect(paramState, paramHttpResponse, j);
    }
    if (paramInnerState.mContinuingDownload) {}
    for (int i = 206; j != i; i = 200)
    {
      handleOtherStatus(paramState, paramInnerState, j);
      return;
    }
    paramState.mRedirectCount = 0;
  }
  
  private void handleOtherStatus(State paramState, InnerState paramInnerState, int paramInt)
    throws DownloadThread.StopRequest
  {
    int i;
    if (DownloaderService.isStatusError(paramInt)) {
      i = paramInt;
    }
    for (;;)
    {
      throw new StopRequest(i, "http error " + paramInt);
      if ((paramInt >= 300) && (paramInt < 400)) {
        i = 493;
      } else if ((paramInnerState.mContinuingDownload) && (paramInt == 200)) {
        i = 489;
      } else {
        i = 494;
      }
    }
  }
  
  private void handleRedirect(State paramState, HttpResponse paramHttpResponse, int paramInt)
    throws DownloadThread.StopRequest, DownloadThread.RetryDownload
  {
    if (paramState.mRedirectCount >= 5) {
      throw new StopRequest(497, "too many redirects");
    }
    paramHttpResponse = paramHttpResponse.getFirstHeader("Location");
    if (paramHttpResponse == null) {
      return;
    }
    try
    {
      paramHttpResponse = new URI(this.mInfo.mUri).resolve(new URI(paramHttpResponse.getValue())).toString();
      paramState.mRedirectCount += 1;
      paramState.mRequestUri = paramHttpResponse;
      if ((paramInt == 301) || (paramInt == 303)) {
        paramState.mNewUri = paramHttpResponse;
      }
      throw new RetryDownload(null);
    }
    catch (URISyntaxException paramState)
    {
      throw new StopRequest(495, "Couldn't resolve redirect URI");
    }
  }
  
  private void handleServiceUnavailable(State paramState, HttpResponse paramHttpResponse)
    throws DownloadThread.StopRequest
  {
    paramState.mCountRetry = true;
    paramHttpResponse = paramHttpResponse.getFirstHeader("Retry-After");
    if (paramHttpResponse != null) {}
    try
    {
      paramState.mRetryAfter = Integer.parseInt(paramHttpResponse.getValue());
      if (paramState.mRetryAfter < 0)
      {
        paramState.mRetryAfter = 0;
        throw new StopRequest(194, "got 503 Service Unavailable, will retry later");
      }
      if (paramState.mRetryAfter < 30) {
        paramState.mRetryAfter = 30;
      }
      for (;;)
      {
        paramState.mRetryAfter += Helpers.sRandom.nextInt(31);
        paramState.mRetryAfter *= 1000;
        break;
        if (paramState.mRetryAfter > 86400) {
          paramState.mRetryAfter = 86400;
        }
      }
    }
    catch (NumberFormatException paramState)
    {
      for (;;) {}
    }
  }
  
  private static final boolean isLocalHost(String paramString)
  {
    if (paramString == null) {}
    for (;;)
    {
      return false;
      try
      {
        paramString = URI.create(paramString).getHost();
        if (paramString != null) {
          if ((!paramString.equalsIgnoreCase("localhost")) && (!paramString.equals("127.0.0.1")))
          {
            boolean bool = paramString.equals("[::1]");
            if (!bool) {}
          }
          else
          {
            return true;
          }
        }
      }
      catch (IllegalArgumentException paramString) {}
    }
    return false;
  }
  
  private void logNetworkState()
  {
    StringBuilder localStringBuilder = new StringBuilder().append("Net ");
    if (this.mService.getNetworkAvailabilityState(this.mDB) == 1) {}
    for (String str = "Up";; str = "Down")
    {
      Log.i("LVLDL", str);
      return;
    }
  }
  
  private void notifyDownloadCompleted(int paramInt1, boolean paramBoolean1, int paramInt2, int paramInt3, boolean paramBoolean2, String paramString)
  {
    updateDownloadDatabase(paramInt1, paramBoolean1, paramInt2, paramInt3, paramBoolean2, paramString);
    if (DownloaderService.isStatusCompleted(paramInt1)) {}
  }
  
  private InputStream openResponseEntity(State paramState, HttpResponse paramHttpResponse)
    throws DownloadThread.StopRequest
  {
    try
    {
      paramHttpResponse = paramHttpResponse.getEntity().getContent();
      return paramHttpResponse;
    }
    catch (IOException paramHttpResponse)
    {
      logNetworkState();
      throw new StopRequest(getFinalStatusForHttpError(paramState), "while getting entity: " + paramHttpResponse.toString(), paramHttpResponse);
    }
  }
  
  /* Error */
  private void processResponseHeaders(State paramState, InnerState paramInnerState, HttpResponse paramHttpResponse)
    throws DownloadThread.StopRequest
  {
    // Byte code:
    //   0: aload_2
    //   1: getfield 106	com/google/android/vending/expansion/downloader/impl/DownloadThread$InnerState:mContinuingDownload	Z
    //   4: ifeq +4 -> 8
    //   7: return
    //   8: aload_0
    //   9: aload_1
    //   10: aload_2
    //   11: aload_3
    //   12: invokespecial 462	com/google/android/vending/expansion/downloader/impl/DownloadThread:readResponseHeaders	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$InnerState;Lorg/apache/http/HttpResponse;)V
    //   15: aload_1
    //   16: aload_0
    //   17: getfield 41	com/google/android/vending/expansion/downloader/impl/DownloadThread:mService	Lcom/google/android/vending/expansion/downloader/impl/DownloaderService;
    //   20: aload_0
    //   21: getfield 39	com/google/android/vending/expansion/downloader/impl/DownloadThread:mInfo	Lcom/google/android/vending/expansion/downloader/impl/DownloadInfo;
    //   24: getfield 243	com/google/android/vending/expansion/downloader/impl/DownloadInfo:mFileName	Ljava/lang/String;
    //   27: aload_0
    //   28: getfield 39	com/google/android/vending/expansion/downloader/impl/DownloadThread:mInfo	Lcom/google/android/vending/expansion/downloader/impl/DownloadInfo;
    //   31: getfield 259	com/google/android/vending/expansion/downloader/impl/DownloadInfo:mTotalBytes	J
    //   34: invokevirtual 466	com/google/android/vending/expansion/downloader/impl/DownloaderService:generateSaveFile	(Ljava/lang/String;J)Ljava/lang/String;
    //   37: putfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   40: aload_1
    //   41: new 191	java/io/FileOutputStream
    //   44: dup
    //   45: aload_1
    //   46: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   49: invokespecial 467	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   52: putfield 189	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mStream	Ljava/io/FileOutputStream;
    //   55: aload_0
    //   56: aload_1
    //   57: aload_2
    //   58: invokespecial 470	com/google/android/vending/expansion/downloader/impl/DownloadThread:updateDatabaseFromHeaders	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$InnerState;)V
    //   61: aload_0
    //   62: aload_1
    //   63: invokespecial 209	com/google/android/vending/expansion/downloader/impl/DownloadThread:checkConnectivity	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;)V
    //   66: return
    //   67: astore_1
    //   68: new 17	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   71: dup
    //   72: aload_0
    //   73: aload_1
    //   74: getfield 473	com/google/android/vending/expansion/downloader/impl/DownloaderService$GenerateSaveFileError:mStatus	I
    //   77: aload_1
    //   78: getfield 476	com/google/android/vending/expansion/downloader/impl/DownloaderService$GenerateSaveFileError:mMessage	Ljava/lang/String;
    //   81: invokespecial 143	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest:<init>	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread;ILjava/lang/String;)V
    //   84: athrow
    //   85: astore_3
    //   86: new 176	java/io/File
    //   89: dup
    //   90: aload_0
    //   91: getfield 41	com/google/android/vending/expansion/downloader/impl/DownloadThread:mService	Lcom/google/android/vending/expansion/downloader/impl/DownloaderService;
    //   94: invokestatic 480	com/google/android/vending/expansion/downloader/Helpers:getSaveFilePath	(Landroid/content/Context;)Ljava/lang/String;
    //   97: invokespecial 179	java/io/File:<init>	(Ljava/lang/String;)V
    //   100: astore 4
    //   102: aload 4
    //   104: invokevirtual 483	java/io/File:mkdirs	()Z
    //   107: ifeq -52 -> 55
    //   110: aload_1
    //   111: new 191	java/io/FileOutputStream
    //   114: dup
    //   115: aload_1
    //   116: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   119: invokespecial 467	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   122: putfield 189	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mStream	Ljava/io/FileOutputStream;
    //   125: goto -70 -> 55
    //   128: astore_1
    //   129: new 17	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   132: dup
    //   133: aload_0
    //   134: sipush 492
    //   137: new 53	java/lang/StringBuilder
    //   140: dup
    //   141: invokespecial 54	java/lang/StringBuilder:<init>	()V
    //   144: ldc_w 485
    //   147: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   150: aload_3
    //   151: invokevirtual 486	java/io/FileNotFoundException:toString	()Ljava/lang/String;
    //   154: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   157: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   160: aload_3
    //   161: invokespecial 453	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest:<init>	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   164: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	165	0	this	DownloadThread
    //   0	165	1	paramState	State
    //   0	165	2	paramInnerState	InnerState
    //   0	165	3	paramHttpResponse	HttpResponse
    //   100	3	4	localFile	File
    // Exception table:
    //   from	to	target	type
    //   15	40	67	com/google/android/vending/expansion/downloader/impl/DownloaderService$GenerateSaveFileError
    //   40	55	85	java/io/FileNotFoundException
    //   102	125	128	java/lang/Exception
  }
  
  private int readFromResponse(State paramState, InnerState paramInnerState, byte[] paramArrayOfByte, InputStream paramInputStream)
    throws DownloadThread.StopRequest
  {
    try
    {
      int i = paramInputStream.read(paramArrayOfByte);
      return i;
    }
    catch (IOException paramArrayOfByte)
    {
      logNetworkState();
      this.mInfo.mCurrentBytes = paramInnerState.mBytesSoFar;
      this.mDB.updateDownload(this.mInfo);
      if (cannotResume(paramInnerState)) {
        throw new StopRequest(489, "while reading response: " + paramArrayOfByte.toString() + ", can't resume interrupted download with no ETag", paramArrayOfByte);
      }
      throw new StopRequest(getFinalStatusForHttpError(paramState), "while reading response: " + paramArrayOfByte.toString(), paramArrayOfByte);
    }
  }
  
  private void readResponseHeaders(State paramState, InnerState paramInnerState, HttpResponse paramHttpResponse)
    throws DownloadThread.StopRequest
  {
    paramState = paramHttpResponse.getFirstHeader("Content-Disposition");
    if (paramState != null) {
      paramInnerState.mHeaderContentDisposition = paramState.getValue();
    }
    paramState = paramHttpResponse.getFirstHeader("Content-Location");
    if (paramState != null) {
      paramInnerState.mHeaderContentLocation = paramState.getValue();
    }
    paramState = paramHttpResponse.getFirstHeader("ETag");
    if (paramState != null) {
      paramInnerState.mHeaderETag = paramState.getValue();
    }
    paramState = null;
    Header localHeader = paramHttpResponse.getFirstHeader("Transfer-Encoding");
    if (localHeader != null) {
      paramState = localHeader.getValue();
    }
    localHeader = paramHttpResponse.getFirstHeader("Content-Type");
    if ((localHeader != null) && (!localHeader.getValue().equals("application/vnd.android.obb"))) {
      throw new StopRequest(487, "file delivered with incorrect Mime type");
    }
    if (paramState == null)
    {
      paramHttpResponse = paramHttpResponse.getFirstHeader("Content-Length");
      if (paramHttpResponse != null)
      {
        paramInnerState.mHeaderContentLength = paramHttpResponse.getValue();
        long l = Long.parseLong(paramInnerState.mHeaderContentLength);
        if ((l != -1L) && (l != this.mInfo.mTotalBytes)) {
          Log.e("LVLDL", "Incorrect file size delivered.");
        }
      }
    }
    if ((paramInnerState.mHeaderContentLength == null) && ((paramState == null) || (!paramState.equalsIgnoreCase("chunked")))) {}
    for (int i = 1; i != 0; i = 0) {
      throw new StopRequest(495, "can't know size of download, giving up");
    }
  }
  
  private void reportProgress(State paramState, InnerState paramInnerState)
  {
    long l1 = System.currentTimeMillis();
    if ((paramInnerState.mBytesSoFar - paramInnerState.mBytesNotified > 4096) && (l1 - paramInnerState.mTimeLastNotification > 1000L))
    {
      this.mInfo.mCurrentBytes = paramInnerState.mBytesSoFar;
      this.mDB.updateDownloadCurrentBytes(this.mInfo);
      paramInnerState.mBytesNotified = paramInnerState.mBytesSoFar;
      paramInnerState.mTimeLastNotification = l1;
      l1 = paramInnerState.mBytesThisSession;
      long l2 = this.mService.mBytesSoFar;
      this.mService.notifyUpdateBytes(l1 + l2);
    }
  }
  
  private HttpResponse sendRequest(State paramState, AndroidHttpClient paramAndroidHttpClient, HttpGet paramHttpGet)
    throws DownloadThread.StopRequest
  {
    try
    {
      paramAndroidHttpClient = paramAndroidHttpClient.execute(paramHttpGet);
      return paramAndroidHttpClient;
    }
    catch (IllegalArgumentException paramState)
    {
      throw new StopRequest(495, "while trying to execute request: " + paramState.toString(), paramState);
    }
    catch (IOException paramAndroidHttpClient)
    {
      logNetworkState();
      throw new StopRequest(getFinalStatusForHttpError(paramState), "while trying to execute request: " + paramAndroidHttpClient.toString(), paramAndroidHttpClient);
    }
  }
  
  private void setupDestinationFile(State paramState, InnerState paramInnerState)
    throws DownloadThread.StopRequest
  {
    File localFile;
    long l;
    if (paramState.mFilename != null)
    {
      if (!Helpers.isFilenameValid(paramState.mFilename)) {
        throw new StopRequest(492, "found invalid internal destination filename");
      }
      localFile = new File(paramState.mFilename);
      if (localFile.exists())
      {
        l = localFile.length();
        if (l != 0L) {
          break label89;
        }
        localFile.delete();
        paramState.mFilename = null;
      }
    }
    for (;;)
    {
      if (paramState.mStream != null) {
        closeDestination(paramState);
      }
      return;
      label89:
      if (this.mInfo.mETag == null)
      {
        localFile.delete();
        throw new StopRequest(489, "Trying to resume a download that can't be resumed");
      }
      try
      {
        paramState.mStream = new FileOutputStream(paramState.mFilename, true);
        paramInnerState.mBytesSoFar = ((int)l);
        if (this.mInfo.mTotalBytes != -1L) {
          paramInnerState.mHeaderContentLength = Long.toString(this.mInfo.mTotalBytes);
        }
        paramInnerState.mHeaderETag = this.mInfo.mETag;
        paramInnerState.mContinuingDownload = true;
      }
      catch (FileNotFoundException paramState)
      {
        throw new StopRequest(492, "while opening destination for resuming: " + paramState.toString(), paramState);
      }
    }
  }
  
  /* Error */
  private void syncDestination(State paramState)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: aconst_null
    //   4: astore 7
    //   6: aconst_null
    //   7: astore 4
    //   9: aconst_null
    //   10: astore_2
    //   11: aconst_null
    //   12: astore 5
    //   14: new 191	java/io/FileOutputStream
    //   17: dup
    //   18: aload_1
    //   19: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   22: iconst_1
    //   23: invokespecial 591	java/io/FileOutputStream:<init>	(Ljava/lang/String;Z)V
    //   26: astore_3
    //   27: aload_3
    //   28: invokevirtual 604	java/io/FileOutputStream:getFD	()Ljava/io/FileDescriptor;
    //   31: invokevirtual 609	java/io/FileDescriptor:sync	()V
    //   34: aload_3
    //   35: ifnull +405 -> 440
    //   38: aload_3
    //   39: invokevirtual 194	java/io/FileOutputStream:close	()V
    //   42: return
    //   43: astore_1
    //   44: ldc_w 282
    //   47: ldc_w 611
    //   50: aload_1
    //   51: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   54: pop
    //   55: return
    //   56: astore_1
    //   57: ldc_w 282
    //   60: ldc_w 616
    //   63: aload_1
    //   64: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   67: pop
    //   68: return
    //   69: astore 4
    //   71: aload 5
    //   73: astore_3
    //   74: aload_3
    //   75: astore_2
    //   76: ldc_w 282
    //   79: new 53	java/lang/StringBuilder
    //   82: dup
    //   83: invokespecial 54	java/lang/StringBuilder:<init>	()V
    //   86: ldc_w 618
    //   89: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   92: aload_1
    //   93: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   96: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   99: ldc_w 620
    //   102: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   105: aload 4
    //   107: invokevirtual 623	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   110: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   113: invokestatic 290	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   116: pop
    //   117: aload_3
    //   118: ifnull -76 -> 42
    //   121: aload_3
    //   122: invokevirtual 194	java/io/FileOutputStream:close	()V
    //   125: return
    //   126: astore_1
    //   127: ldc_w 282
    //   130: ldc_w 611
    //   133: aload_1
    //   134: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   137: pop
    //   138: return
    //   139: astore_1
    //   140: ldc_w 282
    //   143: ldc_w 616
    //   146: aload_1
    //   147: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   150: pop
    //   151: return
    //   152: astore 4
    //   154: aload 6
    //   156: astore_3
    //   157: aload_3
    //   158: astore_2
    //   159: ldc_w 282
    //   162: new 53	java/lang/StringBuilder
    //   165: dup
    //   166: invokespecial 54	java/lang/StringBuilder:<init>	()V
    //   169: ldc_w 618
    //   172: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: aload_1
    //   176: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   179: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   182: ldc_w 625
    //   185: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   188: aload 4
    //   190: invokevirtual 623	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   193: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   196: invokestatic 290	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   199: pop
    //   200: aload_3
    //   201: ifnull -159 -> 42
    //   204: aload_3
    //   205: invokevirtual 194	java/io/FileOutputStream:close	()V
    //   208: return
    //   209: astore_1
    //   210: ldc_w 282
    //   213: ldc_w 611
    //   216: aload_1
    //   217: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   220: pop
    //   221: return
    //   222: astore_1
    //   223: ldc_w 282
    //   226: ldc_w 616
    //   229: aload_1
    //   230: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   233: pop
    //   234: return
    //   235: astore 4
    //   237: aload 7
    //   239: astore_3
    //   240: aload_3
    //   241: astore_2
    //   242: ldc_w 282
    //   245: new 53	java/lang/StringBuilder
    //   248: dup
    //   249: invokespecial 54	java/lang/StringBuilder:<init>	()V
    //   252: ldc_w 627
    //   255: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   258: aload_1
    //   259: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   262: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   265: ldc_w 629
    //   268: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   271: aload 4
    //   273: invokevirtual 623	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   276: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   279: invokestatic 290	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   282: pop
    //   283: aload_3
    //   284: ifnull -242 -> 42
    //   287: aload_3
    //   288: invokevirtual 194	java/io/FileOutputStream:close	()V
    //   291: return
    //   292: astore_1
    //   293: ldc_w 282
    //   296: ldc_w 611
    //   299: aload_1
    //   300: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   303: pop
    //   304: return
    //   305: astore_1
    //   306: ldc_w 282
    //   309: ldc_w 616
    //   312: aload_1
    //   313: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   316: pop
    //   317: return
    //   318: astore_3
    //   319: aload 4
    //   321: astore_1
    //   322: aload_1
    //   323: astore_2
    //   324: ldc_w 282
    //   327: ldc_w 631
    //   330: aload_3
    //   331: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   334: pop
    //   335: aload_1
    //   336: ifnull -294 -> 42
    //   339: aload_1
    //   340: invokevirtual 194	java/io/FileOutputStream:close	()V
    //   343: return
    //   344: astore_1
    //   345: ldc_w 282
    //   348: ldc_w 611
    //   351: aload_1
    //   352: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   355: pop
    //   356: return
    //   357: astore_1
    //   358: ldc_w 282
    //   361: ldc_w 616
    //   364: aload_1
    //   365: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   368: pop
    //   369: return
    //   370: astore_1
    //   371: aload_2
    //   372: ifnull +7 -> 379
    //   375: aload_2
    //   376: invokevirtual 194	java/io/FileOutputStream:close	()V
    //   379: aload_1
    //   380: athrow
    //   381: astore_2
    //   382: ldc_w 282
    //   385: ldc_w 611
    //   388: aload_2
    //   389: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   392: pop
    //   393: goto -14 -> 379
    //   396: astore_2
    //   397: ldc_w 282
    //   400: ldc_w 616
    //   403: aload_2
    //   404: invokestatic 614	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   407: pop
    //   408: goto -29 -> 379
    //   411: astore_1
    //   412: aload_3
    //   413: astore_2
    //   414: goto -43 -> 371
    //   417: astore_2
    //   418: aload_3
    //   419: astore_1
    //   420: aload_2
    //   421: astore_3
    //   422: goto -100 -> 322
    //   425: astore 4
    //   427: goto -187 -> 240
    //   430: astore 4
    //   432: goto -275 -> 157
    //   435: astore 4
    //   437: goto -363 -> 74
    //   440: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	441	0	this	DownloadThread
    //   0	441	1	paramState	State
    //   10	366	2	localObject1	Object
    //   381	8	2	localIOException1	IOException
    //   396	8	2	localRuntimeException1	RuntimeException
    //   413	1	2	localObject2	Object
    //   417	4	2	localRuntimeException2	RuntimeException
    //   26	262	3	localObject3	Object
    //   318	101	3	localRuntimeException3	RuntimeException
    //   421	1	3	localRuntimeException4	RuntimeException
    //   7	1	4	localObject4	Object
    //   69	37	4	localFileNotFoundException1	FileNotFoundException
    //   152	37	4	localSyncFailedException1	java.io.SyncFailedException
    //   235	85	4	localIOException2	IOException
    //   425	1	4	localIOException3	IOException
    //   430	1	4	localSyncFailedException2	java.io.SyncFailedException
    //   435	1	4	localFileNotFoundException2	FileNotFoundException
    //   12	60	5	localObject5	Object
    //   1	154	6	localObject6	Object
    //   4	234	7	localObject7	Object
    // Exception table:
    //   from	to	target	type
    //   38	42	43	java/io/IOException
    //   38	42	56	java/lang/RuntimeException
    //   14	27	69	java/io/FileNotFoundException
    //   121	125	126	java/io/IOException
    //   121	125	139	java/lang/RuntimeException
    //   14	27	152	java/io/SyncFailedException
    //   204	208	209	java/io/IOException
    //   204	208	222	java/lang/RuntimeException
    //   14	27	235	java/io/IOException
    //   287	291	292	java/io/IOException
    //   287	291	305	java/lang/RuntimeException
    //   14	27	318	java/lang/RuntimeException
    //   339	343	344	java/io/IOException
    //   339	343	357	java/lang/RuntimeException
    //   14	27	370	finally
    //   76	117	370	finally
    //   159	200	370	finally
    //   242	283	370	finally
    //   324	335	370	finally
    //   375	379	381	java/io/IOException
    //   375	379	396	java/lang/RuntimeException
    //   27	34	411	finally
    //   27	34	417	java/lang/RuntimeException
    //   27	34	425	java/io/IOException
    //   27	34	430	java/io/SyncFailedException
    //   27	34	435	java/io/FileNotFoundException
  }
  
  private void transferData(State paramState, InnerState paramInnerState, byte[] paramArrayOfByte, InputStream paramInputStream)
    throws DownloadThread.StopRequest
  {
    for (;;)
    {
      int i = readFromResponse(paramState, paramInnerState, paramArrayOfByte, paramInputStream);
      if (i == -1)
      {
        handleEndOfStream(paramState, paramInnerState);
        return;
      }
      paramState.mGotData = true;
      writeDataToDestination(paramState, paramArrayOfByte, i);
      paramInnerState.mBytesSoFar += i;
      paramInnerState.mBytesThisSession += i;
      reportProgress(paramState, paramInnerState);
      checkPausedOrCanceled(paramState);
    }
  }
  
  private void updateDatabaseFromHeaders(State paramState, InnerState paramInnerState)
  {
    this.mInfo.mETag = paramInnerState.mHeaderETag;
    this.mDB.updateDownload(this.mInfo);
  }
  
  private void updateDownloadDatabase(int paramInt1, boolean paramBoolean1, int paramInt2, int paramInt3, boolean paramBoolean2, String paramString)
  {
    this.mInfo.mStatus = paramInt1;
    this.mInfo.mRetryAfter = paramInt2;
    this.mInfo.mRedirectCount = paramInt3;
    this.mInfo.mLastMod = System.currentTimeMillis();
    if (!paramBoolean1) {
      this.mInfo.mNumFailed = 0;
    }
    for (;;)
    {
      this.mDB.updateDownload(this.mInfo);
      return;
      if (paramBoolean2)
      {
        this.mInfo.mNumFailed = 1;
      }
      else
      {
        paramString = this.mInfo;
        paramString.mNumFailed += 1;
      }
    }
  }
  
  private String userAgent()
  {
    return this.mUserAgent;
  }
  
  private void writeDataToDestination(State paramState, byte[] paramArrayOfByte, int paramInt)
    throws DownloadThread.StopRequest
  {
    try
    {
      if (paramState.mStream == null) {
        paramState.mStream = new FileOutputStream(paramState.mFilename, true);
      }
      paramState.mStream.write(paramArrayOfByte, 0, paramInt);
      closeDestination(paramState);
      return;
    }
    catch (IOException paramArrayOfByte)
    {
      if (!Helpers.isExternalMediaMounted()) {
        throw new StopRequest(499, "external media not mounted while writing destination file");
      }
      if (Helpers.getAvailableBytes(Helpers.getFilesystemRoot(paramState.mFilename)) < paramInt) {
        throw new StopRequest(498, "insufficient space while writing destination file", paramArrayOfByte);
      }
      throw new StopRequest(492, "while writing destination file: " + paramArrayOfByte.toString(), paramArrayOfByte);
    }
  }
  
  public HttpHost getPreferredHttpHost(Context paramContext, String paramString)
  {
    if ((!isLocalHost(paramString)) && (!this.mService.isWiFi()))
    {
      paramString = Proxy.getHost(paramContext);
      if (paramString != null) {
        return new HttpHost(paramString, Proxy.getPort(paramContext), "http");
      }
    }
    return null;
  }
  
  /* Error */
  public void run()
  {
    // Byte code:
    //   0: bipush 10
    //   2: invokestatic 702	android/os/Process:setThreadPriority	(I)V
    //   5: new 14	com/google/android/vending/expansion/downloader/impl/DownloadThread$State
    //   8: dup
    //   9: aload_0
    //   10: getfield 39	com/google/android/vending/expansion/downloader/impl/DownloadThread:mInfo	Lcom/google/android/vending/expansion/downloader/impl/DownloadInfo;
    //   13: aload_0
    //   14: getfield 41	com/google/android/vending/expansion/downloader/impl/DownloadThread:mService	Lcom/google/android/vending/expansion/downloader/impl/DownloaderService;
    //   17: invokespecial 705	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:<init>	(Lcom/google/android/vending/expansion/downloader/impl/DownloadInfo;Lcom/google/android/vending/expansion/downloader/impl/DownloaderService;)V
    //   20: astore 12
    //   22: aconst_null
    //   23: astore 10
    //   25: aconst_null
    //   26: astore 11
    //   28: aconst_null
    //   29: astore 9
    //   31: aconst_null
    //   32: astore 7
    //   34: aconst_null
    //   35: astore_3
    //   36: aconst_null
    //   37: astore 5
    //   39: aload 9
    //   41: astore 4
    //   43: aload 10
    //   45: astore 6
    //   47: aload 11
    //   49: astore_2
    //   50: aload_0
    //   51: getfield 37	com/google/android/vending/expansion/downloader/impl/DownloadThread:mContext	Landroid/content/Context;
    //   54: ldc_w 707
    //   57: invokevirtual 713	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   60: checkcast 715	android/os/PowerManager
    //   63: iconst_1
    //   64: ldc_w 282
    //   67: invokevirtual 719	android/os/PowerManager:newWakeLock	(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;
    //   70: astore 8
    //   72: aload 9
    //   74: astore 4
    //   76: aload 8
    //   78: astore 5
    //   80: aload 10
    //   82: astore 6
    //   84: aload 8
    //   86: astore 7
    //   88: aload 11
    //   90: astore_2
    //   91: aload 8
    //   93: astore_3
    //   94: aload 8
    //   96: invokevirtual 724	android/os/PowerManager$WakeLock:acquire	()V
    //   99: aload 9
    //   101: astore 4
    //   103: aload 8
    //   105: astore 5
    //   107: aload 10
    //   109: astore 6
    //   111: aload 8
    //   113: astore 7
    //   115: aload 11
    //   117: astore_2
    //   118: aload 8
    //   120: astore_3
    //   121: aload_0
    //   122: invokespecial 726	com/google/android/vending/expansion/downloader/impl/DownloadThread:userAgent	()Ljava/lang/String;
    //   125: aload_0
    //   126: getfield 37	com/google/android/vending/expansion/downloader/impl/DownloadThread:mContext	Landroid/content/Context;
    //   129: invokestatic 730	com/google/android/vending/expansion/downloader/impl/AndroidHttpClient:newInstance	(Ljava/lang/String;Landroid/content/Context;)Lcom/google/android/vending/expansion/downloader/impl/AndroidHttpClient;
    //   132: astore 9
    //   134: iconst_0
    //   135: istore_1
    //   136: iload_1
    //   137: ifne +345 -> 482
    //   140: aload 9
    //   142: astore 4
    //   144: aload 8
    //   146: astore 5
    //   148: aload 9
    //   150: astore 6
    //   152: aload 8
    //   154: astore 7
    //   156: aload 9
    //   158: astore_2
    //   159: aload 8
    //   161: astore_3
    //   162: aload 9
    //   164: invokevirtual 734	com/google/android/vending/expansion/downloader/impl/AndroidHttpClient:getParams	()Lorg/apache/http/params/HttpParams;
    //   167: aload_0
    //   168: aload_0
    //   169: getfield 37	com/google/android/vending/expansion/downloader/impl/DownloadThread:mContext	Landroid/content/Context;
    //   172: aload 12
    //   174: getfield 369	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRequestUri	Ljava/lang/String;
    //   177: invokevirtual 736	com/google/android/vending/expansion/downloader/impl/DownloadThread:getPreferredHttpHost	(Landroid/content/Context;Ljava/lang/String;)Lorg/apache/http/HttpHost;
    //   180: invokestatic 742	org/apache/http/conn/params/ConnRouteParams:setDefaultProxy	(Lorg/apache/http/params/HttpParams;Lorg/apache/http/HttpHost;)V
    //   183: aload 9
    //   185: astore 4
    //   187: aload 8
    //   189: astore 5
    //   191: aload 9
    //   193: astore 6
    //   195: aload 8
    //   197: astore 7
    //   199: aload 9
    //   201: astore_2
    //   202: aload 8
    //   204: astore_3
    //   205: new 113	org/apache/http/client/methods/HttpGet
    //   208: dup
    //   209: aload 12
    //   211: getfield 369	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRequestUri	Ljava/lang/String;
    //   214: invokespecial 743	org/apache/http/client/methods/HttpGet:<init>	(Ljava/lang/String;)V
    //   217: astore 10
    //   219: aload_0
    //   220: aload 12
    //   222: aload 9
    //   224: aload 10
    //   226: invokespecial 745	com/google/android/vending/expansion/downloader/impl/DownloadThread:executeDownload	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;Lcom/google/android/vending/expansion/downloader/impl/AndroidHttpClient;Lorg/apache/http/client/methods/HttpGet;)V
    //   229: iconst_1
    //   230: istore_1
    //   231: aload 9
    //   233: astore 4
    //   235: aload 8
    //   237: astore 5
    //   239: aload 9
    //   241: astore 6
    //   243: aload 8
    //   245: astore 7
    //   247: aload 9
    //   249: astore_2
    //   250: aload 8
    //   252: astore_3
    //   253: aload 10
    //   255: invokevirtual 748	org/apache/http/client/methods/HttpGet:abort	()V
    //   258: goto -122 -> 136
    //   261: astore_2
    //   262: aload 9
    //   264: astore 4
    //   266: aload 8
    //   268: astore 5
    //   270: aload 9
    //   272: astore 6
    //   274: aload 8
    //   276: astore 7
    //   278: aload 9
    //   280: astore_2
    //   281: aload 8
    //   283: astore_3
    //   284: aload 10
    //   286: invokevirtual 748	org/apache/http/client/methods/HttpGet:abort	()V
    //   289: goto -153 -> 136
    //   292: astore 11
    //   294: aload 9
    //   296: astore 4
    //   298: aload 8
    //   300: astore 5
    //   302: aload 9
    //   304: astore 6
    //   306: aload 8
    //   308: astore 7
    //   310: aload 9
    //   312: astore_2
    //   313: aload 8
    //   315: astore_3
    //   316: aload 10
    //   318: invokevirtual 748	org/apache/http/client/methods/HttpGet:abort	()V
    //   321: aload 9
    //   323: astore 4
    //   325: aload 8
    //   327: astore 5
    //   329: aload 9
    //   331: astore 6
    //   333: aload 8
    //   335: astore 7
    //   337: aload 9
    //   339: astore_2
    //   340: aload 8
    //   342: astore_3
    //   343: aload 11
    //   345: athrow
    //   346: astore 6
    //   348: aload 4
    //   350: astore_2
    //   351: aload 5
    //   353: astore_3
    //   354: ldc_w 282
    //   357: new 53	java/lang/StringBuilder
    //   360: dup
    //   361: invokespecial 54	java/lang/StringBuilder:<init>	()V
    //   364: ldc_w 750
    //   367: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   370: aload_0
    //   371: getfield 39	com/google/android/vending/expansion/downloader/impl/DownloadThread:mInfo	Lcom/google/android/vending/expansion/downloader/impl/DownloadInfo;
    //   374: getfield 243	com/google/android/vending/expansion/downloader/impl/DownloadInfo:mFileName	Ljava/lang/String;
    //   377: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   380: ldc_w 629
    //   383: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   386: aload 6
    //   388: invokevirtual 753	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest:getMessage	()Ljava/lang/String;
    //   391: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   394: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   397: invokestatic 290	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   400: pop
    //   401: aload 4
    //   403: astore_2
    //   404: aload 5
    //   406: astore_3
    //   407: aload 6
    //   409: invokevirtual 756	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest:printStackTrace	()V
    //   412: aload 4
    //   414: astore_2
    //   415: aload 5
    //   417: astore_3
    //   418: aload 6
    //   420: getfield 759	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest:mFinalStatus	I
    //   423: istore_1
    //   424: aload 5
    //   426: ifnull +8 -> 434
    //   429: aload 5
    //   431: invokevirtual 762	android/os/PowerManager$WakeLock:release	()V
    //   434: aload 4
    //   436: ifnull +8 -> 444
    //   439: aload 4
    //   441: invokevirtual 763	com/google/android/vending/expansion/downloader/impl/AndroidHttpClient:close	()V
    //   444: aload_0
    //   445: aload 12
    //   447: iload_1
    //   448: invokespecial 765	com/google/android/vending/expansion/downloader/impl/DownloadThread:cleanupDestination	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;I)V
    //   451: aload_0
    //   452: iload_1
    //   453: aload 12
    //   455: getfield 280	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mCountRetry	Z
    //   458: aload 12
    //   460: getfield 384	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRetryAfter	I
    //   463: aload 12
    //   465: getfield 338	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRedirectCount	I
    //   468: aload 12
    //   470: getfield 638	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mGotData	Z
    //   473: aload 12
    //   475: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   478: invokespecial 767	com/google/android/vending/expansion/downloader/impl/DownloadThread:notifyDownloadCompleted	(IZIIZLjava/lang/String;)V
    //   481: return
    //   482: aload 9
    //   484: astore 4
    //   486: aload 8
    //   488: astore 5
    //   490: aload 9
    //   492: astore 6
    //   494: aload 8
    //   496: astore 7
    //   498: aload 9
    //   500: astore_2
    //   501: aload 8
    //   503: astore_3
    //   504: aload_0
    //   505: aload 12
    //   507: invokespecial 769	com/google/android/vending/expansion/downloader/impl/DownloadThread:finalizeDestinationFile	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;)V
    //   510: aload 8
    //   512: ifnull +8 -> 520
    //   515: aload 8
    //   517: invokevirtual 762	android/os/PowerManager$WakeLock:release	()V
    //   520: aload 9
    //   522: ifnull +8 -> 530
    //   525: aload 9
    //   527: invokevirtual 763	com/google/android/vending/expansion/downloader/impl/AndroidHttpClient:close	()V
    //   530: aload_0
    //   531: aload 12
    //   533: sipush 200
    //   536: invokespecial 765	com/google/android/vending/expansion/downloader/impl/DownloadThread:cleanupDestination	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;I)V
    //   539: aload_0
    //   540: sipush 200
    //   543: aload 12
    //   545: getfield 280	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mCountRetry	Z
    //   548: aload 12
    //   550: getfield 384	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRetryAfter	I
    //   553: aload 12
    //   555: getfield 338	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRedirectCount	I
    //   558: aload 12
    //   560: getfield 638	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mGotData	Z
    //   563: aload 12
    //   565: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   568: invokespecial 767	com/google/android/vending/expansion/downloader/impl/DownloadThread:notifyDownloadCompleted	(IZIIZLjava/lang/String;)V
    //   571: return
    //   572: astore 4
    //   574: aload 6
    //   576: astore_2
    //   577: aload 7
    //   579: astore_3
    //   580: ldc_w 282
    //   583: new 53	java/lang/StringBuilder
    //   586: dup
    //   587: invokespecial 54	java/lang/StringBuilder:<init>	()V
    //   590: ldc_w 771
    //   593: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   596: aload_0
    //   597: getfield 39	com/google/android/vending/expansion/downloader/impl/DownloadThread:mInfo	Lcom/google/android/vending/expansion/downloader/impl/DownloadInfo;
    //   600: getfield 243	com/google/android/vending/expansion/downloader/impl/DownloadInfo:mFileName	Ljava/lang/String;
    //   603: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   606: ldc_w 629
    //   609: invokevirtual 60	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   612: aload 4
    //   614: invokevirtual 623	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   617: invokevirtual 97	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   620: invokestatic 290	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   623: pop
    //   624: aload 7
    //   626: ifnull +8 -> 634
    //   629: aload 7
    //   631: invokevirtual 762	android/os/PowerManager$WakeLock:release	()V
    //   634: aload 6
    //   636: ifnull +8 -> 644
    //   639: aload 6
    //   641: invokevirtual 763	com/google/android/vending/expansion/downloader/impl/AndroidHttpClient:close	()V
    //   644: aload_0
    //   645: aload 12
    //   647: sipush 491
    //   650: invokespecial 765	com/google/android/vending/expansion/downloader/impl/DownloadThread:cleanupDestination	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;I)V
    //   653: aload_0
    //   654: sipush 491
    //   657: aload 12
    //   659: getfield 280	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mCountRetry	Z
    //   662: aload 12
    //   664: getfield 384	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRetryAfter	I
    //   667: aload 12
    //   669: getfield 338	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRedirectCount	I
    //   672: aload 12
    //   674: getfield 638	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mGotData	Z
    //   677: aload 12
    //   679: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   682: invokespecial 767	com/google/android/vending/expansion/downloader/impl/DownloadThread:notifyDownloadCompleted	(IZIIZLjava/lang/String;)V
    //   685: return
    //   686: astore 4
    //   688: aload_3
    //   689: ifnull +7 -> 696
    //   692: aload_3
    //   693: invokevirtual 762	android/os/PowerManager$WakeLock:release	()V
    //   696: aload_2
    //   697: ifnull +7 -> 704
    //   700: aload_2
    //   701: invokevirtual 763	com/google/android/vending/expansion/downloader/impl/AndroidHttpClient:close	()V
    //   704: aload_0
    //   705: aload 12
    //   707: sipush 491
    //   710: invokespecial 765	com/google/android/vending/expansion/downloader/impl/DownloadThread:cleanupDestination	(Lcom/google/android/vending/expansion/downloader/impl/DownloadThread$State;I)V
    //   713: aload_0
    //   714: sipush 491
    //   717: aload 12
    //   719: getfield 280	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mCountRetry	Z
    //   722: aload 12
    //   724: getfield 384	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRetryAfter	I
    //   727: aload 12
    //   729: getfield 338	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mRedirectCount	I
    //   732: aload 12
    //   734: getfield 638	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mGotData	Z
    //   737: aload 12
    //   739: getfield 170	com/google/android/vending/expansion/downloader/impl/DownloadThread$State:mFilename	Ljava/lang/String;
    //   742: invokespecial 767	com/google/android/vending/expansion/downloader/impl/DownloadThread:notifyDownloadCompleted	(IZIIZLjava/lang/String;)V
    //   745: aload 4
    //   747: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	748	0	this	DownloadThread
    //   135	318	1	i	int
    //   49	201	2	localObject1	Object
    //   261	1	2	localRetryDownload	RetryDownload
    //   280	421	2	localAndroidHttpClient1	AndroidHttpClient
    //   35	658	3	localObject2	Object
    //   41	444	4	localAndroidHttpClient2	AndroidHttpClient
    //   572	41	4	localThrowable	Throwable
    //   686	60	4	localObject3	Object
    //   37	452	5	localObject4	Object
    //   45	287	6	localObject5	Object
    //   346	73	6	localStopRequest	StopRequest
    //   492	148	6	localAndroidHttpClient3	AndroidHttpClient
    //   32	598	7	localObject6	Object
    //   70	446	8	localWakeLock	android.os.PowerManager.WakeLock
    //   29	497	9	localAndroidHttpClient4	AndroidHttpClient
    //   23	294	10	localHttpGet	HttpGet
    //   26	90	11	localObject7	Object
    //   292	52	11	localObject8	Object
    //   20	718	12	localState	State
    // Exception table:
    //   from	to	target	type
    //   219	229	261	com/google/android/vending/expansion/downloader/impl/DownloadThread$RetryDownload
    //   219	229	292	finally
    //   50	72	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   94	99	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   121	134	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   162	183	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   205	219	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   253	258	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   284	289	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   316	321	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   343	346	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   504	510	346	com/google/android/vending/expansion/downloader/impl/DownloadThread$StopRequest
    //   50	72	572	java/lang/Throwable
    //   94	99	572	java/lang/Throwable
    //   121	134	572	java/lang/Throwable
    //   162	183	572	java/lang/Throwable
    //   205	219	572	java/lang/Throwable
    //   253	258	572	java/lang/Throwable
    //   284	289	572	java/lang/Throwable
    //   316	321	572	java/lang/Throwable
    //   343	346	572	java/lang/Throwable
    //   504	510	572	java/lang/Throwable
    //   50	72	686	finally
    //   94	99	686	finally
    //   121	134	686	finally
    //   162	183	686	finally
    //   205	219	686	finally
    //   253	258	686	finally
    //   284	289	686	finally
    //   316	321	686	finally
    //   343	346	686	finally
    //   354	401	686	finally
    //   407	412	686	finally
    //   418	424	686	finally
    //   504	510	686	finally
    //   580	624	686	finally
  }
  
  private static class InnerState
  {
    public int mBytesNotified = 0;
    public int mBytesSoFar = 0;
    public int mBytesThisSession = 0;
    public boolean mContinuingDownload = false;
    public String mHeaderContentDisposition;
    public String mHeaderContentLength;
    public String mHeaderContentLocation;
    public String mHeaderETag;
    public long mTimeLastNotification = 0L;
    
    private InnerState() {}
  }
  
  private class RetryDownload
    extends Throwable
  {
    private static final long serialVersionUID = 6196036036517540229L;
    
    private RetryDownload() {}
  }
  
  private static class State
  {
    public boolean mCountRetry = false;
    public String mFilename;
    public boolean mGotData = false;
    public String mNewUri;
    public int mRedirectCount = 0;
    public String mRequestUri;
    public int mRetryAfter = 0;
    public FileOutputStream mStream;
    
    public State(DownloadInfo paramDownloadInfo, DownloaderService paramDownloaderService)
    {
      this.mRedirectCount = paramDownloadInfo.mRedirectCount;
      this.mRequestUri = paramDownloadInfo.mUri;
      this.mFilename = paramDownloaderService.generateTempSaveFileName(paramDownloadInfo.mFileName);
    }
  }
  
  private class StopRequest
    extends Throwable
  {
    private static final long serialVersionUID = 6338592678988347973L;
    public int mFinalStatus;
    
    public StopRequest(int paramInt, String paramString)
    {
      super();
      this.mFinalStatus = paramInt;
    }
    
    public StopRequest(int paramInt, String paramString, Throwable paramThrowable)
    {
      super(paramThrowable);
      this.mFinalStatus = paramInt;
    }
  }
}
