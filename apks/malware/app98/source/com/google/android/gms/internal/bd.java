package com.google.android.gms.internal;

import java.lang.reflect.Field;

public final class bd<T>
  extends bc.a
{
  private final T cd;
  
  private bd(T paramT)
  {
    this.cd = paramT;
  }
  
  public static <T> T a(bc paramBc)
  {
    if ((paramBc instanceof bd)) {
      return ((bd)paramBc).cd;
    }
    paramBc = paramBc.asBinder();
    Object localObject = paramBc.getClass().getDeclaredFields();
    if (localObject.length == 1)
    {
      localObject = localObject[0];
      if (!((Field)localObject).isAccessible())
      {
        ((Field)localObject).setAccessible(true);
        try
        {
          paramBc = ((Field)localObject).get(paramBc);
          return paramBc;
        }
        catch (NullPointerException paramBc)
        {
          throw new IllegalArgumentException("Binder object is null.", paramBc);
        }
        catch (IllegalArgumentException paramBc)
        {
          throw new IllegalArgumentException("remoteBinder is the wrong class.", paramBc);
        }
        catch (IllegalAccessException paramBc)
        {
          throw new IllegalArgumentException("Could not access the field in remoteBinder.", paramBc);
        }
      }
      throw new IllegalArgumentException("The concrete class implementing IObjectWrapper must have exactly one declared *private* field for the wrapped object. Preferably, this is an instance of the ObjectWrapper<T> class.");
    }
    throw new IllegalArgumentException("The concrete class implementing IObjectWrapper must have exactly *one* declared private field for the wrapped object.  Preferably, this is an instance of the ObjectWrapper<T> class.");
  }
  
  public static <T> bc f(T paramT)
  {
    return new bd(paramT);
  }
}
