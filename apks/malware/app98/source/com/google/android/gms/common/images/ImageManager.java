package com.google.android.gms.common.images;

import android.content.ComponentCallbacks2;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.ParcelFileDescriptor;
import android.os.Parcelable;
import android.os.ResultReceiver;
import android.util.Log;
import android.widget.ImageView;
import com.google.android.gms.internal.af;
import com.google.android.gms.internal.ba;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public final class ImageManager
{
  private static ImageManager ai;
  private final af<Uri, WeakReference<Drawable.ConstantState>> aj;
  private final Map<ListenerHolder, ImageReceiver> ak;
  private final Map<Uri, ImageReceiver> al;
  private final Context mContext;
  
  private ImageManager(Context paramContext)
  {
    this.mContext = paramContext.getApplicationContext();
    this.aj = new af(50);
    if (ba.ad()) {
      this.mContext.registerComponentCallbacks(new c(this.aj));
    }
    this.ak = new HashMap();
    this.al = new HashMap();
  }
  
  private void a(ListenerHolder paramListenerHolder, Uri paramUri)
  {
    if (paramUri != null)
    {
      localObject = (WeakReference)this.aj.get(paramUri);
      if (localObject != null)
      {
        localObject = (Drawable.ConstantState)((WeakReference)localObject).get();
        if (localObject != null) {
          paramListenerHolder.handleCachedDrawable(paramUri, ((Drawable.ConstantState)localObject).newDrawable());
        }
      }
    }
    while (!paramListenerHolder.shouldLoadImage(paramUri)) {
      return;
    }
    ImageReceiver localImageReceiver = (ImageReceiver)this.al.get(paramUri);
    Object localObject = localImageReceiver;
    if (localImageReceiver == null)
    {
      localObject = new ImageReceiver(paramUri);
      this.al.put(paramUri, localObject);
    }
    ((ImageReceiver)localObject).addOnImageLoadedListenerHolder(paramListenerHolder);
    this.ak.put(paramListenerHolder, localObject);
    paramListenerHolder = new Intent("com.google.android.gms.common.images.LOAD_IMAGE");
    paramListenerHolder.putExtra("com.google.android.gms.extras.uri", paramUri);
    paramListenerHolder.putExtra("com.google.android.gms.extras.resultReceiver", (Parcelable)localObject);
    paramListenerHolder.putExtra("com.google.android.gms.extras.priority", 3);
    this.mContext.sendBroadcast(paramListenerHolder);
  }
  
  public static ImageManager create(Context paramContext)
  {
    if (ai == null) {
      ai = new ImageManager(paramContext);
    }
    return ai;
  }
  
  public void loadImage(ImageView paramImageView, int paramInt)
  {
    loadImage(paramImageView, null, paramInt);
  }
  
  public void loadImage(ImageView paramImageView, Uri paramUri)
  {
    loadImage(paramImageView, paramUri, 0);
  }
  
  public void loadImage(ImageView paramImageView, Uri paramUri, int paramInt)
  {
    a(new b(paramImageView, paramInt, null), paramUri);
  }
  
  public void loadImage(OnImageLoadedListener paramOnImageLoadedListener, Uri paramUri)
  {
    loadImage(paramOnImageLoadedListener, paramUri, 0);
  }
  
  public void loadImage(OnImageLoadedListener paramOnImageLoadedListener, Uri paramUri, int paramInt)
  {
    a(new a(paramOnImageLoadedListener, paramInt, null), paramUri);
  }
  
  public final class ImageReceiver
    extends ResultReceiver
  {
    private final ArrayList<ImageManager.ListenerHolder> ao;
    private final Uri mUri;
    
    ImageReceiver(Uri paramUri)
    {
      super();
      this.mUri = paramUri;
      this.ao = new ArrayList();
    }
    
    public void addOnImageLoadedListenerHolder(ImageManager.ListenerHolder paramListenerHolder)
    {
      this.ao.add(paramListenerHolder);
    }
    
    public Uri getUri()
    {
      return this.mUri;
    }
    
    public void onReceiveResult(int paramInt, Bundle paramBundle)
    {
      Object localObject = null;
      ParcelFileDescriptor localParcelFileDescriptor = (ParcelFileDescriptor)paramBundle.getParcelable("com.google.android.gms.extra.fileDescriptor");
      paramBundle = localObject;
      if (localParcelFileDescriptor != null) {
        paramBundle = BitmapFactory.decodeFileDescriptor(localParcelFileDescriptor.getFileDescriptor());
      }
      try
      {
        localParcelFileDescriptor.close();
        paramBundle = new BitmapDrawable(ImageManager.a(ImageManager.this).getResources(), paramBundle);
        ImageManager.b(ImageManager.this).put(this.mUri, new WeakReference(paramBundle.getConstantState()));
        ImageManager.c(ImageManager.this).remove(this.mUri);
        int i = this.ao.size();
        paramInt = 0;
        while (paramInt < i)
        {
          ((ImageManager.ListenerHolder)this.ao.get(paramInt)).onImageLoaded(this.mUri, paramBundle);
          paramInt += 1;
        }
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          Log.e("ImageManager", "closed failed", localIOException);
        }
      }
    }
    
    public void removeOnImageLoadedListenerHolder(ImageManager.ListenerHolder paramListenerHolder)
    {
      this.ao.remove(paramListenerHolder);
    }
  }
  
  abstract class ListenerHolder
    implements ImageManager.OnImageLoadedListener
  {
    protected final int mDefaultResId;
    protected final int mHashCode;
    
    private ListenerHolder(int paramInt1, int paramInt2)
    {
      this.mHashCode = paramInt1;
      this.mDefaultResId = paramInt2;
    }
    
    public abstract void handleCachedDrawable(Uri paramUri, Drawable paramDrawable);
    
    public int hashCode()
    {
      return this.mHashCode;
    }
    
    public abstract void onImageLoaded(Uri paramUri, Drawable paramDrawable);
    
    public abstract boolean shouldLoadImage(Uri paramUri);
  }
  
  public static abstract interface OnImageLoadedListener
  {
    public abstract void onImageLoaded(Uri paramUri, Drawable paramDrawable);
  }
  
  final class a
    extends ImageManager.ListenerHolder
  {
    private final WeakReference<ImageManager.OnImageLoadedListener> am;
    
    private a(ImageManager.OnImageLoadedListener paramOnImageLoadedListener, int paramInt)
    {
      super(paramOnImageLoadedListener.hashCode(), paramInt, null);
      this.am = new WeakReference(paramOnImageLoadedListener);
    }
    
    public boolean equals(Object paramObject)
    {
      boolean bool2 = false;
      boolean bool1 = bool2;
      if ((paramObject instanceof a))
      {
        paramObject = (a)paramObject;
        bool1 = bool2;
        if (this.am != null)
        {
          bool1 = bool2;
          if (paramObject.am != null)
          {
            bool1 = bool2;
            if (this.mHashCode == paramObject.mHashCode) {
              bool1 = true;
            }
          }
        }
      }
      return bool1;
    }
    
    public void handleCachedDrawable(Uri paramUri, Drawable paramDrawable)
    {
      ImageManager.OnImageLoadedListener localOnImageLoadedListener = (ImageManager.OnImageLoadedListener)this.am.get();
      if (localOnImageLoadedListener != null) {
        localOnImageLoadedListener.onImageLoaded(paramUri, paramDrawable);
      }
    }
    
    public void onImageLoaded(Uri paramUri, Drawable paramDrawable)
    {
      Object localObject = (ImageManager.ImageReceiver)ImageManager.d(ImageManager.this).remove(this);
      localObject = (ImageManager.OnImageLoadedListener)this.am.get();
      if (localObject != null) {
        ((ImageManager.OnImageLoadedListener)localObject).onImageLoaded(paramUri, paramDrawable);
      }
    }
    
    public boolean shouldLoadImage(Uri paramUri)
    {
      if (paramUri == null)
      {
        ImageManager.OnImageLoadedListener localOnImageLoadedListener = (ImageManager.OnImageLoadedListener)this.am.get();
        if (localOnImageLoadedListener != null)
        {
          if (this.mDefaultResId != 0) {
            break label36;
          }
          localOnImageLoadedListener.onImageLoaded(paramUri, null);
        }
        for (;;)
        {
          return false;
          label36:
          localOnImageLoadedListener.onImageLoaded(paramUri, ImageManager.a(ImageManager.this).getResources().getDrawable(this.mDefaultResId));
        }
      }
      return true;
    }
  }
  
  final class b
    extends ImageManager.ListenerHolder
  {
    private final WeakReference<ImageView> ap;
    
    private b(ImageView paramImageView, int paramInt)
    {
      super(paramImageView.hashCode(), paramInt, null);
      this.ap = new WeakReference(paramImageView);
    }
    
    public boolean equals(Object paramObject)
    {
      boolean bool2 = false;
      boolean bool1 = bool2;
      if ((paramObject instanceof b))
      {
        paramObject = (b)paramObject;
        bool1 = bool2;
        if (this.ap != null)
        {
          bool1 = bool2;
          if (paramObject.ap != null)
          {
            bool1 = bool2;
            if (this.mHashCode == paramObject.mHashCode) {
              bool1 = true;
            }
          }
        }
      }
      return bool1;
    }
    
    public void handleCachedDrawable(Uri paramUri, Drawable paramDrawable)
    {
      paramUri = (ImageView)this.ap.get();
      if (paramUri != null) {
        paramUri.setImageDrawable(paramDrawable);
      }
      paramUri = (ImageManager.ImageReceiver)ImageManager.d(ImageManager.this).remove(this);
      if (paramUri != null) {
        paramUri.removeOnImageLoadedListenerHolder(this);
      }
    }
    
    public void onImageLoaded(Uri paramUri, Drawable paramDrawable)
    {
      ImageManager.ImageReceiver localImageReceiver = (ImageManager.ImageReceiver)ImageManager.d(ImageManager.this).remove(this);
      ImageView localImageView = (ImageView)this.ap.get();
      if (localImageView == null) {}
      while ((localImageReceiver == null) || (!localImageReceiver.getUri().equals(paramUri))) {
        return;
      }
      localImageView.setImageDrawable(paramDrawable);
    }
    
    public boolean shouldLoadImage(Uri paramUri)
    {
      ImageView localImageView = (ImageView)this.ap.get();
      if (localImageView != null)
      {
        if (this.mDefaultResId != 0) {
          break label59;
        }
        localImageView.setImageDrawable(null);
      }
      while (paramUri == null)
      {
        paramUri = (ImageManager.ImageReceiver)ImageManager.d(ImageManager.this).remove(this);
        if (paramUri != null) {
          paramUri.removeOnImageLoadedListenerHolder(this);
        }
        return false;
        label59:
        localImageView.setImageResource(this.mDefaultResId);
      }
      return true;
    }
  }
  
  static final class c
    implements ComponentCallbacks2
  {
    private final af<Uri, WeakReference<Drawable.ConstantState>> aq;
    
    public c(af<Uri, WeakReference<Drawable.ConstantState>> paramAf)
    {
      this.aq = paramAf;
    }
    
    public void onConfigurationChanged(Configuration paramConfiguration) {}
    
    public void onLowMemory()
    {
      this.aq.evictAll();
    }
    
    public void onTrimMemory(int paramInt)
    {
      if (paramInt >= 60) {
        this.aq.evictAll();
      }
      while (paramInt < 40) {
        return;
      }
      this.aq.trimToSize(this.aq.size() / 2);
    }
  }
}
