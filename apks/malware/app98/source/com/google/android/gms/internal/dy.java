package com.google.android.gms.internal;

import android.app.PendingIntent;
import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.os.ParcelFileDescriptor;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.plus.PlusClient.OnAccessRevokedListener;
import com.google.android.gms.plus.PlusClient.OnMomentsLoadedListener;
import com.google.android.gms.plus.PlusClient.OnPeopleLoadedListener;
import com.google.android.gms.plus.PlusClient.OnPersonLoadedListener;
import com.google.android.gms.plus.PlusClient.a;
import com.google.android.gms.plus.PlusClient.b;
import com.google.android.gms.plus.model.moments.Moment;
import com.google.android.gms.plus.model.moments.MomentBuffer;
import com.google.android.gms.plus.model.people.Person;
import com.google.android.gms.plus.model.people.PersonBuffer;
import java.io.IOException;

public class dy
  extends p<dx>
{
  private final String g;
  private final String[] gN;
  private final String ha;
  private final String hb;
  private Person hc;
  private final String[] hd;
  
  public dy(Context paramContext, String paramString1, String paramString2, String paramString3, GooglePlayServicesClient.ConnectionCallbacks paramConnectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener paramOnConnectionFailedListener, String[] paramArrayOfString1, String[] paramArrayOfString2, String[] paramArrayOfString3)
  {
    super(paramContext, paramConnectionCallbacks, paramOnConnectionFailedListener, paramArrayOfString3);
    this.ha = paramString1;
    this.hb = paramString2;
    this.g = paramString3;
    this.hd = paramArrayOfString1;
    this.gN = paramArrayOfString2;
  }
  
  protected dx W(IBinder paramIBinder)
  {
    return dx.a.V(paramIBinder);
  }
  
  protected void a(u paramU, p<dx>.d paramP)
    throws RemoteException
  {
    Bundle localBundle = new Bundle();
    localBundle.putBoolean("skip_oob", false);
    localBundle.putStringArray("request_visible_actions", this.hd);
    if (this.gN != null) {
      localBundle.putStringArray("required_features", this.gN);
    }
    paramU.a(new i(paramP), 3136100, this.ha, this.hb, j(), this.g, localBundle);
  }
  
  public void a(PlusClient.a paramA, Uri paramUri, int paramInt)
  {
    n();
    Bundle localBundle = new Bundle();
    localBundle.putInt("bounding_box", paramInt);
    paramA = new c(paramA);
    try
    {
      ((dx)o()).a(paramA, paramUri, localBundle);
      return;
    }
    catch (RemoteException paramUri)
    {
      paramA.a(8, null, null);
    }
  }
  
  public void a(PlusClient.b paramB, String paramString)
  {
    n();
    paramB = new j(paramB);
    try
    {
      ((dx)o()).a(paramB, paramString);
      return;
    }
    catch (RemoteException paramString)
    {
      paramB.a(8, null, null);
    }
  }
  
  protected String b()
  {
    return "com.google.android.gms.plus.service.START";
  }
  
  protected String c()
  {
    return "com.google.android.gms.plus.internal.IPlusService";
  }
  
  public void clearDefaultAccount()
  {
    n();
    try
    {
      this.hc = null;
      ((dx)o()).clearDefaultAccount();
      return;
    }
    catch (RemoteException localRemoteException)
    {
      throw new IllegalStateException(localRemoteException);
    }
  }
  
  public String getAccountName()
  {
    n();
    try
    {
      String str = ((dx)o()).getAccountName();
      return str;
    }
    catch (RemoteException localRemoteException)
    {
      throw new IllegalStateException(localRemoteException);
    }
  }
  
  public Person getCurrentPerson()
  {
    n();
    return this.hc;
  }
  
  public void loadMoments(PlusClient.OnMomentsLoadedListener paramOnMomentsLoadedListener, int paramInt, String paramString1, Uri paramUri, String paramString2, String paramString3)
  {
    n();
    paramOnMomentsLoadedListener = new a(paramOnMomentsLoadedListener);
    try
    {
      ((dx)o()).a(paramOnMomentsLoadedListener, paramInt, paramString1, paramUri, paramString2, paramString3);
      return;
    }
    catch (RemoteException paramString1)
    {
      paramOnMomentsLoadedListener.a(k.e(8), null, null);
    }
  }
  
  public void loadPeople(PlusClient.OnPeopleLoadedListener paramOnPeopleLoadedListener, int paramInt1, int paramInt2, int paramInt3, String paramString)
  {
    n();
    paramOnPeopleLoadedListener = new e(paramOnPeopleLoadedListener);
    try
    {
      ((dx)o()).a(paramOnPeopleLoadedListener, paramInt1, paramInt2, paramInt3, paramString);
      return;
    }
    catch (RemoteException paramString)
    {
      paramOnPeopleLoadedListener.a(k.e(8), null);
    }
  }
  
  public void loadPerson(PlusClient.OnPersonLoadedListener paramOnPersonLoadedListener, String paramString)
  {
    n();
    paramOnPersonLoadedListener = new g(paramOnPersonLoadedListener);
    try
    {
      ((dx)o()).e(paramOnPersonLoadedListener, paramString);
      return;
    }
    catch (RemoteException paramString)
    {
      paramOnPersonLoadedListener.a(8, null, null);
    }
  }
  
  public void removeMoment(String paramString)
  {
    n();
    try
    {
      ((dx)o()).removeMoment(paramString);
      return;
    }
    catch (RemoteException paramString)
    {
      throw new IllegalStateException(paramString);
    }
  }
  
  public void revokeAccessAndDisconnect(PlusClient.OnAccessRevokedListener paramOnAccessRevokedListener)
  {
    n();
    clearDefaultAccount();
    paramOnAccessRevokedListener = new l(paramOnAccessRevokedListener);
    try
    {
      ((dx)o()).c(paramOnAccessRevokedListener);
      return;
    }
    catch (RemoteException paramOnAccessRevokedListener)
    {
      throw new IllegalStateException(paramOnAccessRevokedListener);
    }
  }
  
  public void writeMoment(Moment paramMoment)
  {
    n();
    try
    {
      paramMoment = at.a((ef)paramMoment);
      ((dx)o()).a(paramMoment);
      return;
    }
    catch (RemoteException paramMoment)
    {
      throw new IllegalStateException(paramMoment);
    }
  }
  
  final class a
    extends dv
  {
    private final PlusClient.OnMomentsLoadedListener he;
    
    public a(PlusClient.OnMomentsLoadedListener paramOnMomentsLoadedListener)
    {
      this.he = paramOnMomentsLoadedListener;
    }
    
    public void a(k paramK, String paramString1, String paramString2)
    {
      if (paramK.h() != null) {
        paramK.h().getParcelable("pendingIntent");
      }
      ConnectionResult localConnectionResult = new ConnectionResult(paramK.getStatusCode(), null);
      dy.this.a(new dy.b(dy.this, this.he, localConnectionResult, paramK, paramString1, paramString2));
    }
  }
  
  final class b
    extends p<dx>.c<PlusClient.OnMomentsLoadedListener>
  {
    private final ConnectionResult hg;
    private final String hh;
    private final String hi;
    
    public b(PlusClient.OnMomentsLoadedListener paramOnMomentsLoadedListener, ConnectionResult paramConnectionResult, k paramK, String paramString1, String paramString2)
    {
      super(paramOnMomentsLoadedListener, paramK);
      this.hg = paramConnectionResult;
      this.hh = paramString1;
      this.hi = paramString2;
    }
    
    protected void a(PlusClient.OnMomentsLoadedListener paramOnMomentsLoadedListener)
    {
      if (paramOnMomentsLoadedListener != null) {
        paramOnMomentsLoadedListener.onMomentsLoaded(this.hg, new MomentBuffer(this.O), this.hh, this.hi);
      }
    }
  }
  
  final class c
    extends dv
  {
    private final PlusClient.a hj;
    
    public c(PlusClient.a paramA)
    {
      this.hj = paramA;
    }
    
    public void a(int paramInt, Bundle paramBundle, ParcelFileDescriptor paramParcelFileDescriptor)
    {
      PendingIntent localPendingIntent = null;
      if (paramBundle != null) {
        localPendingIntent = (PendingIntent)paramBundle.getParcelable("pendingIntent");
      }
      paramBundle = new ConnectionResult(paramInt, localPendingIntent);
      dy.this.a(new dy.d(dy.this, this.hj, paramBundle, paramParcelFileDescriptor));
    }
  }
  
  final class d
    extends p<dx>.b<PlusClient.a>
  {
    private final ConnectionResult hg;
    private final ParcelFileDescriptor hk;
    
    public d(PlusClient.a paramA, ConnectionResult paramConnectionResult, ParcelFileDescriptor paramParcelFileDescriptor)
    {
      super(paramA);
      this.hg = paramConnectionResult;
      this.hk = paramParcelFileDescriptor;
    }
    
    public void a(PlusClient.a paramA)
    {
      if (paramA != null)
      {
        paramA.a(this.hg, this.hk);
        return;
      }
      try
      {
        this.hk.close();
        return;
      }
      catch (IOException paramA)
      {
        Log.e("PlusClientImpl", "failed close", paramA);
      }
    }
    
    public void q()
    {
      super.q();
    }
  }
  
  final class e
    extends dv
  {
    private final PlusClient.OnPeopleLoadedListener hl;
    
    public e(PlusClient.OnPeopleLoadedListener paramOnPeopleLoadedListener)
    {
      this.hl = paramOnPeopleLoadedListener;
    }
    
    public void a(k paramK, String paramString)
    {
      if (paramK.h() != null) {
        paramK.h().getParcelable("pendingIntent");
      }
      ConnectionResult localConnectionResult = new ConnectionResult(paramK.getStatusCode(), null);
      dy.this.a(new dy.f(dy.this, this.hl, localConnectionResult, paramK, paramString));
    }
  }
  
  final class f
    extends p<dx>.c<PlusClient.OnPeopleLoadedListener>
  {
    private final ConnectionResult hg;
    private final String hh;
    
    public f(PlusClient.OnPeopleLoadedListener paramOnPeopleLoadedListener, ConnectionResult paramConnectionResult, k paramK, String paramString)
    {
      super(paramOnPeopleLoadedListener, paramK);
      this.hg = paramConnectionResult;
      this.hh = paramString;
    }
    
    protected void a(PlusClient.OnPeopleLoadedListener paramOnPeopleLoadedListener)
    {
      if (paramOnPeopleLoadedListener != null) {
        paramOnPeopleLoadedListener.onPeopleLoaded(this.hg, new PersonBuffer(this.O), this.hh);
      }
    }
  }
  
  final class g
    extends dv
  {
    private final PlusClient.OnPersonLoadedListener hm;
    
    public g(PlusClient.OnPersonLoadedListener paramOnPersonLoadedListener)
    {
      this.hm = paramOnPersonLoadedListener;
    }
    
    public void a(int paramInt, Bundle paramBundle, at paramAt)
    {
      if (paramBundle != null) {}
      for (paramBundle = (PendingIntent)paramBundle.getParcelable("pendingIntent");; paramBundle = null)
      {
        paramBundle = new ConnectionResult(paramInt, paramBundle);
        if (paramAt == null)
        {
          dy.this.a(new dy.h(dy.this, this.hm, paramBundle, null));
          return;
        }
        paramAt = (eq)paramAt.a(eq.CREATOR);
        dy.this.a(new dy.h(dy.this, this.hm, paramBundle, paramAt));
        return;
      }
    }
  }
  
  final class h
    extends p<dx>.b<PlusClient.OnPersonLoadedListener>
  {
    private final ConnectionResult hg;
    private final Person hn;
    
    public h(PlusClient.OnPersonLoadedListener paramOnPersonLoadedListener, ConnectionResult paramConnectionResult, Person paramPerson)
    {
      super(paramOnPersonLoadedListener);
      this.hg = paramConnectionResult;
      this.hn = paramPerson;
    }
    
    protected void a(PlusClient.OnPersonLoadedListener paramOnPersonLoadedListener)
    {
      if (paramOnPersonLoadedListener != null) {
        paramOnPersonLoadedListener.onPersonLoaded(this.hg, this.hn);
      }
    }
  }
  
  public final class i
    extends t.a
  {
    private p.d cL;
    
    public i(p.d paramD)
    {
      this.cL = paramD;
    }
    
    public void a(int paramInt, IBinder paramIBinder, Bundle paramBundle)
    {
      if ((paramInt == 0) && (paramBundle != null) && (paramBundle.containsKey("loaded_person"))) {
        dy.a(dy.this, eq.d(paramBundle.getByteArray("loaded_person")));
      }
      this.cL.a(paramInt, paramIBinder, paramBundle);
    }
  }
  
  final class j
    extends dv
  {
    private final PlusClient.b ho;
    
    public j(PlusClient.b paramB)
    {
      this.ho = paramB;
    }
    
    public void a(int paramInt, Bundle paramBundle1, Bundle paramBundle2)
    {
      Object localObject = null;
      if (paramBundle1 != null) {}
      for (paramBundle1 = (PendingIntent)paramBundle1.getParcelable("pendingIntent");; paramBundle1 = null)
      {
        ConnectionResult localConnectionResult = new ConnectionResult(paramInt, paramBundle1);
        paramBundle1 = localObject;
        if (paramBundle2 != null) {
          paramBundle1 = new du(paramBundle2);
        }
        dy.this.a(new dy.k(dy.this, this.ho, localConnectionResult, paramBundle1));
        return;
      }
    }
  }
  
  final class k
    extends p<dx>.b<PlusClient.b>
  {
    public final ConnectionResult gD;
    public final du hp;
    
    public k(PlusClient.b paramB, ConnectionResult paramConnectionResult, du paramDu)
    {
      super(paramB);
      this.gD = paramConnectionResult;
      this.hp = paramDu;
    }
    
    protected void a(PlusClient.b paramB)
    {
      if (paramB != null) {
        paramB.a(this.gD, this.hp);
      }
    }
  }
  
  final class l
    extends dv
  {
    private final PlusClient.OnAccessRevokedListener hq;
    
    public l(PlusClient.OnAccessRevokedListener paramOnAccessRevokedListener)
    {
      this.hq = paramOnAccessRevokedListener;
    }
    
    public void b(int paramInt, Bundle paramBundle)
    {
      PendingIntent localPendingIntent = null;
      if (paramBundle != null) {
        localPendingIntent = (PendingIntent)paramBundle.getParcelable("pendingIntent");
      }
      paramBundle = new ConnectionResult(paramInt, localPendingIntent);
      dy.this.a(new dy.m(dy.this, this.hq, paramBundle));
    }
  }
  
  final class m
    extends p<dx>.b<PlusClient.OnAccessRevokedListener>
  {
    private final ConnectionResult hg;
    
    public m(PlusClient.OnAccessRevokedListener paramOnAccessRevokedListener, ConnectionResult paramConnectionResult)
    {
      super(paramOnAccessRevokedListener);
      this.hg = paramConnectionResult;
    }
    
    protected void a(PlusClient.OnAccessRevokedListener paramOnAccessRevokedListener)
    {
      dy.this.disconnect();
      if (paramOnAccessRevokedListener != null) {
        paramOnAccessRevokedListener.onAccessRevoked(this.hg);
      }
    }
  }
}
