package com.google.android.gms.games.multiplayer;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import com.google.android.gms.games.Game;
import com.google.android.gms.games.GameEntity;
import com.google.android.gms.internal.w;
import com.google.android.gms.internal.w.a;
import com.google.android.gms.internal.x;
import java.util.ArrayList;

public final class InvitationEntity
  implements Invitation
{
  public static final Parcelable.Creator<InvitationEntity> CREATOR = new Parcelable.Creator()
  {
    public InvitationEntity[] C(int paramAnonymousInt)
    {
      return new InvitationEntity[paramAnonymousInt];
    }
    
    public InvitationEntity p(Parcel paramAnonymousParcel)
    {
      GameEntity localGameEntity = (GameEntity)GameEntity.CREATOR.createFromParcel(paramAnonymousParcel);
      String str = paramAnonymousParcel.readString();
      long l = paramAnonymousParcel.readLong();
      int j = paramAnonymousParcel.readInt();
      Participant localParticipant = (Participant)ParticipantEntity.CREATOR.createFromParcel(paramAnonymousParcel);
      int k = paramAnonymousParcel.readInt();
      ArrayList localArrayList = new ArrayList(k);
      int i = 0;
      while (i < k)
      {
        localArrayList.add(ParticipantEntity.CREATOR.createFromParcel(paramAnonymousParcel));
        i += 1;
      }
      return new InvitationEntity(localGameEntity, str, l, j, localParticipant, localArrayList, null);
    }
  };
  private final GameEntity dE;
  private final String dF;
  private final long dG;
  private final int dH;
  private final Participant dI;
  private final ArrayList<Participant> dJ;
  
  private InvitationEntity(GameEntity paramGameEntity, String paramString, long paramLong, int paramInt, Participant paramParticipant, ArrayList<Participant> paramArrayList)
  {
    this.dE = paramGameEntity;
    this.dF = paramString;
    this.dG = paramLong;
    this.dH = paramInt;
    this.dI = paramParticipant;
    this.dJ = paramArrayList;
  }
  
  public InvitationEntity(Invitation paramInvitation)
  {
    this.dE = new GameEntity(paramInvitation.getGame());
    this.dF = paramInvitation.getInvitationId();
    this.dG = paramInvitation.getCreationTimestamp();
    this.dH = paramInvitation.getInvitationType();
    String str = paramInvitation.getInviter().getParticipantId();
    Participant localParticipant = null;
    ArrayList localArrayList = paramInvitation.getParticipants();
    int j = localArrayList.size();
    this.dJ = new ArrayList(j);
    int i = 0;
    paramInvitation = localParticipant;
    while (i < j)
    {
      localParticipant = (Participant)localArrayList.get(i);
      if (localParticipant.getParticipantId().equals(str)) {
        paramInvitation = localParticipant;
      }
      this.dJ.add(localParticipant.freeze());
      i += 1;
    }
    x.b(paramInvitation, "Must have a valid inviter!");
    this.dI = ((Participant)paramInvitation.freeze());
  }
  
  public static int a(Invitation paramInvitation)
  {
    return w.hashCode(new Object[] { paramInvitation.getGame(), paramInvitation.getInvitationId(), Long.valueOf(paramInvitation.getCreationTimestamp()), Integer.valueOf(paramInvitation.getInvitationType()), paramInvitation.getInviter(), paramInvitation.getParticipants() });
  }
  
  public static boolean a(Invitation paramInvitation, Object paramObject)
  {
    boolean bool2 = true;
    boolean bool1;
    if (!(paramObject instanceof Invitation)) {
      bool1 = false;
    }
    do
    {
      do
      {
        return bool1;
        bool1 = bool2;
      } while (paramInvitation == paramObject);
      paramObject = (Invitation)paramObject;
      if ((!w.a(paramObject.getGame(), paramInvitation.getGame())) || (!w.a(paramObject.getInvitationId(), paramInvitation.getInvitationId())) || (!w.a(Long.valueOf(paramObject.getCreationTimestamp()), Long.valueOf(paramInvitation.getCreationTimestamp()))) || (!w.a(Integer.valueOf(paramObject.getInvitationType()), Integer.valueOf(paramInvitation.getInvitationType()))) || (!w.a(paramObject.getInviter(), paramInvitation.getInviter()))) {
        break;
      }
      bool1 = bool2;
    } while (w.a(paramObject.getParticipants(), paramInvitation.getParticipants()));
    return false;
  }
  
  public static String b(Invitation paramInvitation)
  {
    return w.c(paramInvitation).a("Game", paramInvitation.getGame()).a("InvitationId", paramInvitation.getInvitationId()).a("CreationTimestamp", Long.valueOf(paramInvitation.getCreationTimestamp())).a("InvitationType", Integer.valueOf(paramInvitation.getInvitationType())).a("Inviter", paramInvitation.getInviter()).a("Participants", paramInvitation.getParticipants()).toString();
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public boolean equals(Object paramObject)
  {
    return a(this, paramObject);
  }
  
  public Invitation freeze()
  {
    return this;
  }
  
  public long getCreationTimestamp()
  {
    return this.dG;
  }
  
  public Game getGame()
  {
    return this.dE;
  }
  
  public String getInvitationId()
  {
    return this.dF;
  }
  
  public int getInvitationType()
  {
    return this.dH;
  }
  
  public Participant getInviter()
  {
    return this.dI;
  }
  
  public ArrayList<Participant> getParticipants()
  {
    return this.dJ;
  }
  
  public int hashCode()
  {
    return a(this);
  }
  
  public String toString()
  {
    return b(this);
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    this.dE.writeToParcel(paramParcel, paramInt);
    paramParcel.writeString(this.dF);
    paramParcel.writeLong(this.dG);
    paramParcel.writeInt(this.dH);
    this.dI.writeToParcel(paramParcel, paramInt);
    int j = this.dJ.size();
    paramParcel.writeInt(j);
    int i = 0;
    while (i < j)
    {
      ((Participant)this.dJ.get(i)).writeToParcel(paramParcel, paramInt);
      i += 1;
    }
  }
}
