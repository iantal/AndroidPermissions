package com.google.android.gms.internal;

import android.app.PendingIntent;
import android.content.Context;
import android.location.Location;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Looper;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationClient.OnAddGeofencesResultListener;
import com.google.android.gms.location.LocationClient.OnRemoveGeofencesResultListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationStatusCodes;
import java.util.List;

public class ce
  extends p<cc>
{
  private final ch<cc> eE = new c(null);
  private final cd eJ = new cd(paramContext, this.eE);
  private final String eK;
  
  public ce(Context paramContext, GooglePlayServicesClient.ConnectionCallbacks paramConnectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener paramOnConnectionFailedListener, String paramString)
  {
    super(paramContext, paramConnectionCallbacks, paramOnConnectionFailedListener, new String[0]);
    this.eK = paramString;
  }
  
  protected void a(u paramU, p<cc>.d paramP)
    throws RemoteException
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("client_name", this.eK);
    paramU.e(paramP, 3136100, getContext().getPackageName(), localBundle);
  }
  
  public void addGeofences(List<cf> paramList, PendingIntent paramPendingIntent, LocationClient.OnAddGeofencesResultListener paramOnAddGeofencesResultListener)
  {
    n();
    if ((paramList != null) && (paramList.size() > 0)) {}
    for (boolean bool = true;; bool = false)
    {
      x.b(bool, "At least one geofence must be specified.");
      x.b(paramPendingIntent, "PendingIntent must be specified.");
      x.b(paramOnAddGeofencesResultListener, "OnAddGeofencesResultListener not provided.");
      if (paramOnAddGeofencesResultListener == null) {}
      for (paramOnAddGeofencesResultListener = null;; paramOnAddGeofencesResultListener = new b(paramOnAddGeofencesResultListener)) {
        try
        {
          ((cc)o()).a(paramList, paramPendingIntent, paramOnAddGeofencesResultListener, getContext().getPackageName());
          return;
        }
        catch (RemoteException paramList)
        {
          throw new IllegalStateException(paramList);
        }
      }
    }
  }
  
  protected String b()
  {
    return "com.google.android.location.internal.GoogleLocationManagerService.START";
  }
  
  protected String c()
  {
    return "com.google.android.gms.location.internal.IGoogleLocationManagerService";
  }
  
  public void disconnect()
  {
    synchronized (this.eJ)
    {
      if (isConnected()) {
        this.eJ.removeAllListeners();
      }
      super.disconnect();
      return;
    }
  }
  
  public Location getLastLocation()
  {
    return this.eJ.getLastLocation();
  }
  
  protected cc q(IBinder paramIBinder)
  {
    return cc.a.p(paramIBinder);
  }
  
  public void removeActivityUpdates(PendingIntent paramPendingIntent)
  {
    n();
    x.d(paramPendingIntent);
    try
    {
      ((cc)o()).removeActivityUpdates(paramPendingIntent);
      return;
    }
    catch (RemoteException paramPendingIntent)
    {
      throw new IllegalStateException(paramPendingIntent);
    }
  }
  
  public void removeGeofences(PendingIntent paramPendingIntent, LocationClient.OnRemoveGeofencesResultListener paramOnRemoveGeofencesResultListener)
  {
    n();
    x.b(paramPendingIntent, "PendingIntent must be specified.");
    x.b(paramOnRemoveGeofencesResultListener, "OnRemoveGeofencesResultListener not provided.");
    if (paramOnRemoveGeofencesResultListener == null) {}
    for (paramOnRemoveGeofencesResultListener = null;; paramOnRemoveGeofencesResultListener = new b(paramOnRemoveGeofencesResultListener)) {
      try
      {
        ((cc)o()).a(paramPendingIntent, paramOnRemoveGeofencesResultListener, getContext().getPackageName());
        return;
      }
      catch (RemoteException paramPendingIntent)
      {
        throw new IllegalStateException(paramPendingIntent);
      }
    }
  }
  
  public void removeGeofences(List<String> paramList, LocationClient.OnRemoveGeofencesResultListener paramOnRemoveGeofencesResultListener)
  {
    n();
    if ((paramList != null) && (paramList.size() > 0)) {}
    for (boolean bool = true;; bool = false)
    {
      x.b(bool, "geofenceRequestIds can't be null nor empty.");
      x.b(paramOnRemoveGeofencesResultListener, "OnRemoveGeofencesResultListener not provided.");
      String[] arrayOfString = (String[])paramList.toArray(new String[0]);
      if (paramOnRemoveGeofencesResultListener == null) {}
      for (paramList = null;; paramList = new b(paramOnRemoveGeofencesResultListener)) {
        try
        {
          ((cc)o()).a(arrayOfString, paramList, getContext().getPackageName());
          return;
        }
        catch (RemoteException paramList)
        {
          throw new IllegalStateException(paramList);
        }
      }
    }
  }
  
  public void removeLocationUpdates(PendingIntent paramPendingIntent)
  {
    this.eJ.removeLocationUpdates(paramPendingIntent);
  }
  
  public void removeLocationUpdates(LocationListener paramLocationListener)
  {
    this.eJ.removeLocationUpdates(paramLocationListener);
  }
  
  public void requestActivityUpdates(long paramLong, PendingIntent paramPendingIntent)
  {
    boolean bool = true;
    n();
    x.d(paramPendingIntent);
    if (paramLong >= 0L) {}
    for (;;)
    {
      x.b(bool, "detectionIntervalMillis must be >= 0");
      try
      {
        ((cc)o()).a(paramLong, true, paramPendingIntent);
        return;
      }
      catch (RemoteException paramPendingIntent)
      {
        throw new IllegalStateException(paramPendingIntent);
      }
      bool = false;
    }
  }
  
  public void requestLocationUpdates(LocationRequest paramLocationRequest, PendingIntent paramPendingIntent)
  {
    this.eJ.requestLocationUpdates(paramLocationRequest, paramPendingIntent);
  }
  
  public void requestLocationUpdates(LocationRequest paramLocationRequest, LocationListener paramLocationListener)
  {
    requestLocationUpdates(paramLocationRequest, paramLocationListener, null);
  }
  
  public void requestLocationUpdates(LocationRequest paramLocationRequest, LocationListener paramLocationListener, Looper paramLooper)
  {
    synchronized (this.eJ)
    {
      this.eJ.requestLocationUpdates(paramLocationRequest, paramLocationListener, paramLooper);
      return;
    }
  }
  
  final class a
    extends p<cc>.b<LocationClient.OnAddGeofencesResultListener>
  {
    private final String[] eL;
    private final int p;
    
    public a(LocationClient.OnAddGeofencesResultListener paramOnAddGeofencesResultListener, int paramInt, String[] paramArrayOfString)
    {
      super(paramOnAddGeofencesResultListener);
      this.p = LocationStatusCodes.J(paramInt);
      this.eL = paramArrayOfString;
    }
    
    protected void a(LocationClient.OnAddGeofencesResultListener paramOnAddGeofencesResultListener)
    {
      if (paramOnAddGeofencesResultListener != null) {
        paramOnAddGeofencesResultListener.onAddGeofencesResult(this.p, this.eL);
      }
    }
  }
  
  final class b
    extends cb.a
  {
    private final LocationClient.OnAddGeofencesResultListener eN;
    private final LocationClient.OnRemoveGeofencesResultListener eO;
    
    public b(LocationClient.OnAddGeofencesResultListener paramOnAddGeofencesResultListener)
    {
      this.eN = paramOnAddGeofencesResultListener;
      this.eO = null;
    }
    
    public b(LocationClient.OnRemoveGeofencesResultListener paramOnRemoveGeofencesResultListener)
    {
      this.eO = paramOnRemoveGeofencesResultListener;
      this.eN = null;
    }
    
    public void onAddGeofencesResult(int paramInt, String[] paramArrayOfString)
      throws RemoteException
    {
      ce.this.a(new ce.a(ce.this, this.eN, paramInt, paramArrayOfString));
    }
    
    public void onRemoveGeofencesByPendingIntentResult(int paramInt, PendingIntent paramPendingIntent)
    {
      ce.this.a(new ce.d(ce.this, 1, this.eO, paramInt, paramPendingIntent));
    }
    
    public void onRemoveGeofencesByRequestIdsResult(int paramInt, String[] paramArrayOfString)
    {
      ce.this.a(new ce.d(ce.this, 2, this.eO, paramInt, paramArrayOfString));
    }
  }
  
  final class c
    implements ch<cc>
  {
    private c() {}
    
    public cc az()
    {
      return (cc)ce.b(ce.this);
    }
    
    public void n()
    {
      ce.a(ce.this);
    }
  }
  
  final class d
    extends p<cc>.b<LocationClient.OnRemoveGeofencesResultListener>
  {
    private final String[] eL;
    private final int eP;
    private final PendingIntent mPendingIntent;
    private final int p;
    
    public d(int paramInt1, LocationClient.OnRemoveGeofencesResultListener paramOnRemoveGeofencesResultListener, int paramInt2, PendingIntent paramPendingIntent)
    {
      super(paramOnRemoveGeofencesResultListener);
      if (paramInt1 == 1) {}
      for (;;)
      {
        n.a(bool);
        this.eP = paramInt1;
        this.p = LocationStatusCodes.J(paramInt2);
        this.mPendingIntent = paramPendingIntent;
        this.eL = null;
        return;
        bool = false;
      }
    }
    
    public d(int paramInt1, LocationClient.OnRemoveGeofencesResultListener paramOnRemoveGeofencesResultListener, int paramInt2, String[] paramArrayOfString)
    {
      super(paramOnRemoveGeofencesResultListener);
      if (paramInt1 == 2) {}
      for (boolean bool = true;; bool = false)
      {
        n.a(bool);
        this.eP = paramInt1;
        this.p = LocationStatusCodes.J(paramInt2);
        this.eL = paramArrayOfString;
        this.mPendingIntent = null;
        return;
      }
    }
    
    protected void a(LocationClient.OnRemoveGeofencesResultListener paramOnRemoveGeofencesResultListener)
    {
      if (paramOnRemoveGeofencesResultListener != null) {}
      switch (this.eP)
      {
      default: 
        Log.wtf("LocationClientImpl", "Unsupported action: " + this.eP);
        return;
      case 1: 
        paramOnRemoveGeofencesResultListener.onRemoveGeofencesByPendingIntentResult(this.p, this.mPendingIntent);
        return;
      }
      paramOnRemoveGeofencesResultListener.onRemoveGeofencesByRequestIdsResult(this.p, this.eL);
    }
  }
}
