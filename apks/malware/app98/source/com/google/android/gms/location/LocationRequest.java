package com.google.android.gms.location;

import android.os.Parcel;
import android.os.SystemClock;
import com.google.android.gms.internal.ae;

public final class LocationRequest
  implements ae
{
  public static final LocationRequestCreator CREATOR = new LocationRequestCreator();
  public static final int PRIORITY_BALANCED_POWER_ACCURACY = 102;
  public static final int PRIORITY_HIGH_ACCURACY = 100;
  public static final int PRIORITY_NO_POWER = 105;
  int T;
  long eA = (this.ez / 6.0D);
  boolean eB = false;
  int eC = Integer.MAX_VALUE;
  float eD = 0.0F;
  long eu = Long.MAX_VALUE;
  long ez = 3600000L;
  int mPriority = 102;
  
  public LocationRequest() {}
  
  private static void H(int paramInt)
  {
    switch (paramInt)
    {
    case 101: 
    case 103: 
    default: 
      throw new IllegalArgumentException("invalid quality: " + paramInt);
    }
  }
  
  public static String I(int paramInt)
  {
    switch (paramInt)
    {
    case 101: 
    case 103: 
    default: 
      return "???";
    case 100: 
      return "PRIORITY_HIGH_ACCURACY";
    case 102: 
      return "PRIORITY_BALANCED_POWER_ACCURACY";
    }
    return "PRIORITY_LOW_POWER";
  }
  
  private static void a(float paramFloat)
  {
    if (paramFloat < 0.0F) {
      throw new IllegalArgumentException("invalid displacement: " + paramFloat);
    }
  }
  
  private static void c(long paramLong)
  {
    if (paramLong < 0L) {
      throw new IllegalArgumentException("invalid interval: " + paramLong);
    }
  }
  
  public static LocationRequest create()
  {
    return new LocationRequest();
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public long getExpirationTime()
  {
    return this.eu;
  }
  
  public long getFastestInterval()
  {
    return this.eA;
  }
  
  public long getInterval()
  {
    return this.ez;
  }
  
  public int getNumUpdates()
  {
    return this.eC;
  }
  
  public int getPriority()
  {
    return this.mPriority;
  }
  
  public float getSmallestDisplacement()
  {
    return this.eD;
  }
  
  public LocationRequest setExpirationDuration(long paramLong)
  {
    long l = SystemClock.elapsedRealtime();
    if (paramLong > Long.MAX_VALUE - l) {}
    for (this.eu = Long.MAX_VALUE;; this.eu = (l + paramLong))
    {
      if (this.eu < 0L) {
        this.eu = 0L;
      }
      return this;
    }
  }
  
  public LocationRequest setExpirationTime(long paramLong)
  {
    this.eu = paramLong;
    if (this.eu < 0L) {
      this.eu = 0L;
    }
    return this;
  }
  
  public LocationRequest setFastestInterval(long paramLong)
  {
    c(paramLong);
    this.eB = true;
    this.eA = paramLong;
    return this;
  }
  
  public LocationRequest setInterval(long paramLong)
  {
    c(paramLong);
    this.ez = paramLong;
    if (!this.eB) {
      this.eA = ((this.ez / 6.0D));
    }
    return this;
  }
  
  public LocationRequest setNumUpdates(int paramInt)
  {
    if (paramInt <= 0) {
      throw new IllegalArgumentException("invalid numUpdates: " + paramInt);
    }
    this.eC = paramInt;
    return this;
  }
  
  public LocationRequest setPriority(int paramInt)
  {
    H(paramInt);
    this.mPriority = paramInt;
    return this;
  }
  
  public LocationRequest setSmallestDisplacement(float paramFloat)
  {
    a(paramFloat);
    this.eD = paramFloat;
    return this;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Request[").append(I(this.mPriority));
    if (this.mPriority != 105)
    {
      localStringBuilder.append(" requested=");
      localStringBuilder.append(this.ez + "ms");
    }
    localStringBuilder.append(" fastest=");
    localStringBuilder.append(this.eA + "ms");
    if (this.eu != Long.MAX_VALUE)
    {
      long l1 = this.eu;
      long l2 = SystemClock.elapsedRealtime();
      localStringBuilder.append(" expireIn=");
      localStringBuilder.append(l1 - l2 + "ms");
    }
    if (this.eC != Integer.MAX_VALUE) {
      localStringBuilder.append(" num=").append(this.eC);
    }
    localStringBuilder.append(']');
    return localStringBuilder.toString();
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    LocationRequestCreator localLocationRequestCreator = CREATOR;
    LocationRequestCreator.a(this, paramParcel, paramInt);
  }
}
