package com.googlecode.apdfviewer;

import java.io.File;
import java.io.FileDescriptor;
import java.util.List;

public class PDF
{
  public static boolean nativeLibraryLoaded = true;
  private int pdf_ptr = 0;
  
  static
  {
    try
    {
      System.loadLibrary("pdfview2");
      return;
    }
    catch (UnsatisfiedLinkError localUnsatisfiedLinkError)
    {
      nativeLibraryLoaded = false;
    }
  }
  
  public PDF(File paramFile)
  {
    if (!nativeLibraryLoaded) {
      return;
    }
    parseFile(paramFile.getAbsolutePath());
  }
  
  public PDF(FileDescriptor paramFileDescriptor)
  {
    parseFileDescriptor(paramFileDescriptor);
  }
  
  public PDF(byte[] paramArrayOfByte)
  {
    parseBytes(paramArrayOfByte);
  }
  
  private synchronized native int parseBytes(byte[] paramArrayOfByte);
  
  private synchronized native int parseFile(String paramString);
  
  private synchronized native int parseFileDescriptor(FileDescriptor paramFileDescriptor);
  
  public synchronized native void clearFindResult();
  
  public synchronized native List<FindResult> find(String paramString, int paramInt);
  
  public synchronized native List<FindResult> findOnPage(int paramInt, String paramString);
  
  public synchronized native void freeMemory();
  
  public synchronized native int getPageCount();
  
  public synchronized native int getPageSize(int paramInt, Size paramSize);
  
  public synchronized native int[] renderPage(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, Size paramSize);
  
  public static class Size
    implements Cloneable
  {
    public int height;
    public int width;
    
    public Size()
    {
      this.width = 0;
      this.height = 0;
    }
    
    public Size(int paramInt1, int paramInt2)
    {
      this.width = paramInt1;
      this.height = paramInt2;
    }
    
    public Size clone()
    {
      return new Size(this.width, this.height);
    }
  }
}
