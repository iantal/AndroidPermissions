package com.jasonkostempski.android.calendar;

import android.content.Context;
import android.content.res.Resources;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import com.qbiki.util.DateUtil;
import java.util.Calendar;
import java.util.Set;

public class CalendarView
  extends LinearLayout
{
  public static final int DAY_VIEW = 1;
  public static final int MONTH_VIEW = 2;
  private final int CENTURY_VIEW = 5;
  private final int DECADE_VIEW = 4;
  private final int ITEM_VIEW = 0;
  private final int YEAR_VIEW = 3;
  private CalendarWrapper _calendar;
  private int _currentMonth;
  private int _currentView;
  private int _currentYear;
  private CalendarWrapper.OnDateChangedListener _dateChanged = new CalendarWrapper.OnDateChangedListener()
  {
    public void onDateChanged(CalendarWrapper paramAnonymousCalendarWrapper)
    {
      if ((CalendarView.this._currentYear != paramAnonymousCalendarWrapper.getYear()) || (CalendarView.this._currentMonth != paramAnonymousCalendarWrapper.getMonth())) {}
      for (boolean bool = true;; bool = false)
      {
        if (Boolean.valueOf(bool).booleanValue())
        {
          CalendarView.this.refreshDayCells();
          CalendarView.this.invokeMonthChangedListener();
        }
        CalendarView.this.refreshCurrentDate();
        CalendarView.this.refreshUpText();
        return;
      }
    }
  };
  private View.OnClickListener _dayClicked = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      paramAnonymousView = (int[])paramAnonymousView.findViewById(2131099817).getTag();
      CalendarView.this._calendar.addMonthSetDay(paramAnonymousView[0], paramAnonymousView[1]);
      CalendarView.this.invokeSelectedDayChangedListener();
      CalendarView.this.setView(1);
    }
  };
  private TableLayout _days;
  private LinearLayout _events;
  private View.OnClickListener _incrementClicked = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      int i;
      if (paramAnonymousView == CalendarView.this._next)
      {
        i = 1;
        if (CalendarView.this._currentView != 2) {
          break label41;
        }
        CalendarView.this._calendar.addMonth(i);
      }
      label41:
      do
      {
        return;
        i = -1;
        break;
        if (CalendarView.this._currentView == 1)
        {
          CalendarView.this._calendar.addDay(i);
          CalendarView.this.invokeSelectedDayChangedListener();
          return;
        }
      } while (CalendarView.this._currentView != 3);
      CalendarView.this._calendar.addYear(i);
      CalendarView.this.refreshUpText();
    }
  };
  private View.OnClickListener _monthClicked = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      CalendarView.this._calendar.setYearAndMonth(CalendarView.this._currentYear, ((Integer)paramAnonymousView.getTag()).intValue());
      CalendarView.this.setView(2);
    }
  };
  private TableLayout _months;
  private Button _next;
  private OnMonthChangedListener _onMonthChangedListener;
  private OnSelectedDayChangedListener _onSelectedDayChangedListener;
  private Button _prev;
  private Button _up;
  private View.OnClickListener _upClicked = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      CalendarView.this.setView(CalendarView.this._currentView + 1);
    }
  };
  private View.OnClickListener _yearClicked = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      CalendarView.this._calendar.setYear(((Integer)paramAnonymousView.getTag()).intValue());
      CalendarView.this.setView(3);
    }
  };
  private TableLayout _years;
  
  public CalendarView(Context paramContext)
  {
    super(paramContext);
    init(paramContext);
  }
  
  public CalendarView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init(paramContext);
  }
  
  private void cleanDayEventMarkers()
  {
    int k = 1;
    int i = 0;
    int j = 0;
    while (j < 42)
    {
      getDayTextView((TableRow)this._days.getChildAt(k), i).setBackgroundDrawable(null);
      int n = i + 1;
      i = n;
      int m = k;
      if (n == 7)
      {
        i = 0;
        m = k + 1;
      }
      j += 1;
      k = m;
    }
  }
  
  private TextView getDayTextView(TableRow paramTableRow, int paramInt)
  {
    return (TextView)paramTableRow.getChildAt(paramInt).findViewById(2131099817);
  }
  
  private void init(Context paramContext)
  {
    paramContext = LayoutInflater.from(paramContext).inflate(2130903079, this, true);
    this._calendar = new CalendarWrapper();
    this._days = ((TableLayout)paramContext.findViewById(2131099813));
    this._months = ((TableLayout)paramContext.findViewById(2131099814));
    this._years = ((TableLayout)paramContext.findViewById(2131099815));
    this._up = ((Button)paramContext.findViewById(2131099810));
    this._prev = ((Button)paramContext.findViewById(2131099809));
    this._next = ((Button)paramContext.findViewById(2131099811));
    this._events = ((LinearLayout)paramContext.findViewById(2131099812));
    refreshCurrentDate();
    paramContext = this._calendar.getShortDayNames();
    int i = 0;
    TableRow localTableRow;
    label162:
    Object localObject;
    while (i < 7)
    {
      localTableRow = (TableRow)this._days.getChildAt(i);
      j = 0;
      if (j < 7)
      {
        boolean bool;
        if (i == 0)
        {
          bool = true;
          localObject = localTableRow.getChildAt(j);
          TextView localTextView = (TextView)((View)localObject).findViewById(2131099817);
          if (!Boolean.valueOf(bool).booleanValue()) {
            break label214;
          }
          localTextView.setText(paramContext[j]);
        }
        for (;;)
        {
          j += 1;
          break;
          bool = false;
          break label162;
          label214:
          ((View)localObject).setOnClickListener(this._dayClicked);
        }
      }
      i += 1;
    }
    refreshDayCells();
    paramContext = this._calendar.getShortMonthNames();
    int j = 0;
    i = 0;
    while (i < 3)
    {
      localTableRow = (TableRow)this._months.getChildAt(i);
      int k = 0;
      while (k < 4)
      {
        localObject = (TextView)localTableRow.getChildAt(k);
        ((TextView)localObject).setOnClickListener(this._monthClicked);
        ((TextView)localObject).setText(paramContext[j]);
        ((TextView)localObject).setTag(Integer.valueOf(j));
        j += 1;
        k += 1;
      }
      i += 1;
    }
    i = 0;
    while (i < 3)
    {
      paramContext = (TableRow)this._years.getChildAt(i);
      j = 0;
      while (j < 4)
      {
        ((TextView)paramContext.getChildAt(j)).setOnClickListener(this._yearClicked);
        j += 1;
      }
      i += 1;
    }
    this._calendar.setOnDateChangedListener(this._dateChanged);
    this._up.setOnClickListener(this._upClicked);
    this._prev.setOnClickListener(this._incrementClicked);
    this._next.setOnClickListener(this._incrementClicked);
    setView(2);
  }
  
  private void invokeMonthChangedListener()
  {
    if (this._onMonthChangedListener != null) {
      this._onMonthChangedListener.onMonthChanged(this);
    }
  }
  
  private void invokeSelectedDayChangedListener()
  {
    if (this._onSelectedDayChangedListener != null) {
      this._onSelectedDayChangedListener.onSelectedDayChanged(this);
    }
  }
  
  private void refreshCurrentDate()
  {
    this._currentYear = this._calendar.getYear();
    this._currentMonth = this._calendar.getMonth();
    this._calendar.getDay();
  }
  
  private void refreshDayCells()
  {
    int[] arrayOfInt = this._calendar.get7x6DayArray();
    int i1 = -1;
    int j = 1;
    int i = 0;
    int k = 0;
    if (k < arrayOfInt.length)
    {
      int m = i1;
      if (arrayOfInt[k] == 1) {
        m = i1 + 1;
      }
      TextView localTextView = getDayTextView((TableRow)this._days.getChildAt(j), i);
      localTextView.setBackgroundDrawable(null);
      localTextView.setText(arrayOfInt[k] + "");
      if (m == 0) {
        localTextView.setTextColor(-3355444);
      }
      for (;;)
      {
        localTextView.setTag(new int[] { m, arrayOfInt[k] });
        i1 = i + 1;
        i = i1;
        int n = j;
        if (i1 == 7)
        {
          i = 0;
          n = j + 1;
        }
        k += 1;
        i1 = m;
        j = n;
        break;
        localTextView.setTextColor(-12303292);
      }
    }
  }
  
  private void refreshUpText()
  {
    switch (this._currentView)
    {
    default: 
      return;
    case 2: 
      this._up.setText(this._calendar.toString("MMMM yyyy"));
      return;
    case 3: 
      this._up.setText(this._calendar.toString("yyyy"));
      return;
    case 5: 
      this._up.setText("CENTURY_VIEW");
      return;
    case 4: 
      this._up.setText("DECADE_VIEW");
      return;
    case 1: 
      this._up.setText(android.text.format.DateFormat.format("EEEE, ", this._calendar.getSelectedDay()) + android.text.format.DateFormat.getMediumDateFormat(getContext()).format(this._calendar.getSelectedDay().getTime()));
      return;
    }
    this._up.setText("ITEM_VIEW");
  }
  
  public Calendar getSelectedDay()
  {
    return this._calendar.getSelectedDay();
  }
  
  public int getView()
  {
    return this._currentView;
  }
  
  public Calendar getVisibleEndDate()
  {
    return this._calendar.getVisibleEndDate();
  }
  
  public Calendar getVisibleStartDate()
  {
    return this._calendar.getVisibleStartDate();
  }
  
  public void markDays(Set<Calendar> paramSet)
  {
    int k = 1;
    int i = 0;
    Calendar localCalendar1 = DateUtil.getDayStart(this._calendar.getVisibleStartDate().getTime());
    Calendar localCalendar2 = Calendar.getInstance();
    int j = 0;
    if (j < 42)
    {
      View localView1 = ((TableRow)this._days.getChildAt(k)).getChildAt(i);
      View localView2 = localView1.findViewById(2131099818);
      if (paramSet.contains(localCalendar1))
      {
        localView1.findViewById(2131099818).setVisibility(0);
        label84:
        if (!DateUtil.isSameDay(localCalendar1, localCalendar2)) {
          break label164;
        }
        localView1.setBackgroundDrawable(getResources().getDrawable(2130837650));
      }
      for (;;)
      {
        localCalendar1.add(5, 1);
        int n = i + 1;
        i = n;
        int m = k;
        if (n == 7)
        {
          i = 0;
          m = k + 1;
        }
        j += 1;
        k = m;
        break;
        localView2.setVisibility(8);
        break label84;
        label164:
        localView1.setBackgroundDrawable(null);
      }
    }
  }
  
  public void setDaysWithEvents(CalendarDayMarker[] paramArrayOfCalendarDayMarker)
  {
    int n = 0;
    int k = 1;
    int i = 0;
    Calendar localCalendar = this._calendar.getVisibleStartDate();
    int j = 0;
    if ((j >= 42) || (n == paramArrayOfCalendarDayMarker.length)) {
      return;
    }
    TextView localTextView = getDayTextView((TableRow)this._days.getChildAt(k), i);
    int i2 = ((int[])(int[])localTextView.getTag())[1];
    int i1 = 0;
    for (;;)
    {
      int m = n;
      if (i1 < paramArrayOfCalendarDayMarker.length)
      {
        CalendarDayMarker localCalendarDayMarker = paramArrayOfCalendarDayMarker[i1];
        if ((localCalendar.get(1) == localCalendarDayMarker.getYear()) && (localCalendar.get(2) == localCalendarDayMarker.getMonth()) && (i2 == localCalendarDayMarker.getDay()))
        {
          localTextView.setBackgroundColor(localCalendarDayMarker.getColor());
          m = n + 1;
        }
      }
      else
      {
        localCalendar.add(5, 1);
        n = i + 1;
        i = n;
        i1 = k;
        if (n == 7)
        {
          i = 0;
          i1 = k + 1;
        }
        j += 1;
        n = m;
        k = i1;
        break;
      }
      i1 += 1;
    }
  }
  
  public void setDaysWithEvents(CalendarDayMarker[] paramArrayOfCalendarDayMarker, boolean paramBoolean)
  {
    if (paramBoolean) {
      cleanDayEventMarkers();
    }
    setDaysWithEvents(paramArrayOfCalendarDayMarker);
  }
  
  public void setListViewItems(View[] paramArrayOfView)
  {
    this._events.removeAllViews();
    int i = 0;
    while (i < paramArrayOfView.length)
    {
      this._events.addView(paramArrayOfView[i]);
      i += 1;
    }
  }
  
  public void setOnMonthChangedListener(OnMonthChangedListener paramOnMonthChangedListener)
  {
    this._onMonthChangedListener = paramOnMonthChangedListener;
  }
  
  public void setOnSelectedDayChangedListener(OnSelectedDayChangedListener paramOnSelectedDayChangedListener)
  {
    this._onSelectedDayChangedListener = paramOnSelectedDayChangedListener;
  }
  
  public void setSelectedDay(Calendar paramCalendar)
  {
    if (!getSelectedDay().equals(paramCalendar))
    {
      this._calendar.setSelectedDay(paramCalendar);
      if (this._currentView != 1) {
        break label32;
      }
      invokeSelectedDayChangedListener();
    }
    label32:
    while (this._currentView != 3) {
      return;
    }
    refreshUpText();
  }
  
  public void setView(int paramInt)
  {
    int i = 8;
    boolean bool = false;
    Object localObject;
    if (this._currentView != paramInt)
    {
      this._currentView = paramInt;
      localObject = this._events;
      if (this._currentView != 1) {
        break label135;
      }
      paramInt = 0;
      ((LinearLayout)localObject).setVisibility(paramInt);
      localObject = this._years;
      if (this._currentView != 4) {
        break label141;
      }
      paramInt = 0;
      label56:
      ((TableLayout)localObject).setVisibility(paramInt);
      localObject = this._months;
      if (this._currentView != 3) {
        break label147;
      }
    }
    label135:
    label141:
    label147:
    for (paramInt = 0;; paramInt = 8)
    {
      ((TableLayout)localObject).setVisibility(paramInt);
      localObject = this._days;
      paramInt = i;
      if (this._currentView == 2) {
        paramInt = 0;
      }
      ((TableLayout)localObject).setVisibility(paramInt);
      localObject = this._up;
      if (this._currentView != 3) {
        bool = true;
      }
      ((Button)localObject).setEnabled(bool);
      refreshUpText();
      return;
      paramInt = 8;
      break;
      paramInt = 8;
      break label56;
    }
  }
  
  public static abstract interface OnMonthChangedListener
  {
    public abstract void onMonthChanged(CalendarView paramCalendarView);
  }
  
  public static abstract interface OnSelectedDayChangedListener
  {
    public abstract void onSelectedDayChanged(CalendarView paramCalendarView);
  }
}
