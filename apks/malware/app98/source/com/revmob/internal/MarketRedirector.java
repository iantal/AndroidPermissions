package com.revmob.internal;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolException;
import org.apache.http.client.RedirectHandler;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.DefaultRedirectHandler;
import org.apache.http.protocol.HttpContext;

public class MarketRedirector
{
  private static Pattern AMAZON_URL_PATTERN = Pattern.compile("android\\?p=[a-zA-Z0-9\\.]+");
  private static Pattern GOOGLE_PLAY_URL_PATTERN;
  private static int TIMEOUT_IN_SECONDS = 30;
  private String entity;
  private AbstractHttpClient httpclient;
  private RedirectHandler redirectHandler;
  private String url;
  
  static
  {
    GOOGLE_PLAY_URL_PATTERN = Pattern.compile("details\\?id=[a-zA-Z0-9\\.]+");
  }
  
  public MarketRedirector(String paramString)
  {
    this(paramString, "", new DefaultHttpClient(), new MarketRedirectHandler());
  }
  
  public MarketRedirector(String paramString1, String paramString2)
  {
    this(paramString1, paramString2, new DefaultHttpClient(), new MarketRedirectHandler());
  }
  
  MarketRedirector(String paramString1, String paramString2, AbstractHttpClient paramAbstractHttpClient, RedirectHandler paramRedirectHandler)
  {
    this.url = paramString1;
    this.entity = paramString2;
    this.httpclient = paramAbstractHttpClient;
    this.redirectHandler = paramRedirectHandler;
    this.httpclient.setRedirectHandler(this.redirectHandler);
  }
  
  public static boolean isAmazonAppStoreUri(String paramString)
  {
    return paramString.startsWith("amzn://");
  }
  
  public static boolean isGooglePlayUri(String paramString)
  {
    return paramString.startsWith("market://");
  }
  
  static String rewriteMarketUrl(String paramString)
  {
    Matcher localMatcher2 = GOOGLE_PLAY_URL_PATTERN.matcher(paramString);
    Matcher localMatcher1 = AMAZON_URL_PATTERN.matcher(paramString);
    if (localMatcher2.find())
    {
      paramString = localMatcher2.group();
      paramString = "market://" + paramString;
    }
    while (!localMatcher1.find()) {
      return paramString;
    }
    paramString = localMatcher1.group();
    return "amzn://apps/" + paramString;
  }
  
  public String getMarketUrl()
  {
    if ((isGooglePlayUri(this.url)) || (isAmazonAppStoreUri(this.url))) {
      return this.url;
    }
    post();
    URI localURI = ((MarketRedirectHandler)this.redirectHandler).getLastRedirectedUrl();
    if (localURI != null) {
      return rewriteMarketUrl(localURI.toString());
    }
    return null;
  }
  
  HttpResponse post()
  {
    HTTPHelper localHTTPHelper = new HTTPHelper(this.httpclient);
    localHTTPHelper.setTimeout(TIMEOUT_IN_SECONDS);
    return localHTTPHelper.post(this.url, this.entity);
  }
  
  static class MarketRedirectHandler
    extends DefaultRedirectHandler
  {
    private URI lastRedirectedUri;
    
    MarketRedirectHandler() {}
    
    public URI getLastRedirectedUrl()
    {
      return this.lastRedirectedUri;
    }
    
    public URI getLocationURI(HttpResponse paramHttpResponse, HttpContext paramHttpContext)
      throws ProtocolException
    {
      this.lastRedirectedUri = super.getLocationURI(paramHttpResponse, paramHttpContext);
      return this.lastRedirectedUri;
    }
    
    public boolean isRedirectRequested(HttpResponse paramHttpResponse, HttpContext paramHttpContext)
    {
      Object localObject = paramHttpResponse.getLastHeader("Location");
      if (localObject != null)
      {
        localObject = ((Header)localObject).getValue();
        if ((MarketRedirector.isGooglePlayUri((String)localObject)) || (MarketRedirector.isAmazonAppStoreUri((String)localObject))) {
          try
          {
            this.lastRedirectedUri = new URI((String)localObject);
            return false;
          }
          catch (URISyntaxException localURISyntaxException)
          {
            return super.isRedirectRequested(paramHttpResponse, paramHttpContext);
          }
        }
      }
      return super.isRedirectRequested(paramHttpResponse, paramHttpContext);
    }
  }
}
