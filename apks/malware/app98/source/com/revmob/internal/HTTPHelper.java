package com.revmob.internal;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.Drawable;
import android.webkit.WebSettings;
import android.webkit.WebView;
import com.revmob.android.RevMobScreen;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.SocketException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLPeerUnverifiedException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.HttpHostConnectException;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class HTTPHelper
{
  public static int globalTimeoutInSeconds = 30;
  private static String userAgent;
  private AbstractHttpClient httpclient;
  
  public HTTPHelper()
  {
    this(new DefaultHttpClient());
  }
  
  public HTTPHelper(AbstractHttpClient paramAbstractHttpClient)
  {
    this.httpclient = paramAbstractHttpClient;
    setTimeout(globalTimeoutInSeconds);
    this.httpclient.getConnectionManager().getSchemeRegistry().register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
  }
  
  public static int calculateInSampleSize(int[] paramArrayOfInt, int paramInt1, int paramInt2)
  {
    int j = paramArrayOfInt[0];
    int k = paramArrayOfInt[1];
    int i = 1;
    if ((k > paramInt2) || (j > paramInt1))
    {
      i = Math.round(k / paramInt2);
      paramInt1 = Math.round(j / paramInt1);
      if (i >= paramInt1) {
        break label56;
      }
    }
    while (i < 4)
    {
      return i;
      label56:
      i = paramInt1;
    }
    return 3;
  }
  
  public static String encodedResponseBody(HttpEntity paramHttpEntity)
  {
    if (paramHttpEntity == null) {
      return null;
    }
    String str = "";
    Object localObject = str;
    StringBuffer localStringBuffer;
    InputStreamReader localInputStreamReader;
    try
    {
      localStringBuffer = new StringBuffer(1024);
      localObject = str;
      localInputStreamReader = new InputStreamReader(paramHttpEntity.getContent(), "UTF-8");
      localObject = str;
      paramHttpEntity = new char['Ð€'];
      for (;;)
      {
        localObject = str;
        int i = localInputStreamReader.read(paramHttpEntity, 0, 1023);
        if (i <= 0) {
          break;
        }
        localObject = str;
        localStringBuffer.append(paramHttpEntity, 0, i);
      }
      localObject = str;
    }
    catch (IOException paramHttpEntity)
    {
      RMLog.w("Read error.");
      return localObject;
    }
    paramHttpEntity = localStringBuffer.toString();
    localObject = paramHttpEntity;
    localInputStreamReader.close();
    return paramHttpEntity;
  }
  
  public static String getUserAgent()
  {
    return userAgent;
  }
  
  private HttpResponse sendRequest(HttpRequestBase paramHttpRequestBase)
    throws SSLException
  {
    try
    {
      HttpResponse localHttpResponse = this.httpclient.execute(paramHttpRequestBase);
      return localHttpResponse;
    }
    catch (UnknownHostException localUnknownHostException)
    {
      RMLog.w("Error on requesting path " + paramHttpRequestBase.getRequestLine() + ". Is the device connected to the internet?", localUnknownHostException);
      return null;
    }
    catch (HttpHostConnectException paramHttpRequestBase)
    {
      throw new SSLException(paramHttpRequestBase);
    }
    catch (SSLPeerUnverifiedException paramHttpRequestBase)
    {
      throw new SSLException(paramHttpRequestBase);
    }
    catch (SocketException paramHttpRequestBase)
    {
      for (;;)
      {
        RMLog.w("Server took too long to respond.");
      }
    }
    catch (SSLException paramHttpRequestBase)
    {
      throw paramHttpRequestBase;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        RMLog.w("Error on requesting path " + paramHttpRequestBase.getRequestLine() + ". Did the device lost its connection?", localIOException);
      }
    }
  }
  
  private HttpResponse sendRequestDealingWithSSLErrors(HttpRequestBase paramHttpRequestBase)
  {
    try
    {
      HttpResponse localHttpResponse1 = sendRequest(paramHttpRequestBase);
      return localHttpResponse1;
    }
    catch (SSLException localSSLException) {}
    try
    {
      if (paramHttpRequestBase.getURI().toString().startsWith("https://"))
      {
        paramHttpRequestBase.setURI(new URI(paramHttpRequestBase.getURI().toString().replace("https://", "http://")));
        HttpResponse localHttpResponse2 = sendRequest(paramHttpRequestBase);
        return localHttpResponse2;
      }
    }
    catch (SSLException paramHttpRequestBase)
    {
      RMLog.i("Problem with SSL. What is the version of your Android?");
      return null;
    }
    catch (URISyntaxException localURISyntaxException)
    {
      for (;;)
      {
        RMLog.e("Invalid url: " + paramHttpRequestBase.getURI().toString());
      }
    }
  }
  
  public static void setUserAgent(String paramString, Activity paramActivity)
  {
    if (paramActivity != null)
    {
      userAgent = System.getProperty("http.agent");
      try
      {
        if (AndroidHelper.isUIThread()) {
          userAgent = new WebView(paramActivity).getSettings().getUserAgentString();
        }
        return;
      }
      catch (Exception paramString)
      {
        RMLog.e(paramString.getMessage());
        return;
      }
    }
    userAgent = paramString;
  }
  
  public Bitmap downloadBitmap(String paramString)
  {
    int i = calculateInSampleSize(getImageSize(paramString), RevMobScreen.getScreenWidth(), RevMobScreen.getScreenHeight());
    paramString = getAndReturnTheStream(paramString);
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inSampleSize = i;
    return BitmapFactory.decodeStream(paramString, null, localOptions);
  }
  
  public String downloadHtml(String paramString)
  {
    paramString = get(paramString);
    if ((paramString != null) && (paramString.getEntity() != null)) {
      return encodedResponseBody(paramString.getEntity());
    }
    return null;
  }
  
  public Drawable downloadImage(String paramString)
  {
    return Drawable.createFromStream(getAndReturnTheStream(paramString), "src");
  }
  
  public HttpResponse get(String paramString)
  {
    return sendRequestDealingWithSSLErrors(new HttpGet(paramString));
  }
  
  public InputStream getAndReturnTheStream(String paramString)
  {
    try
    {
      paramString = get(paramString);
      if ((paramString != null) && (paramString.getEntity() != null))
      {
        paramString = paramString.getEntity().getContent();
        return paramString;
      }
    }
    catch (IllegalStateException paramString)
    {
      RMLog.e("Read error.");
      return null;
    }
    catch (IOException paramString)
    {
      for (;;)
      {
        RMLog.w("Read error.");
      }
    }
  }
  
  public int[] getImageSize(String paramString)
  {
    paramString = getAndReturnTheStream(paramString);
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inJustDecodeBounds = true;
    BitmapFactory.decodeStream(paramString, null, localOptions);
    int i = localOptions.outWidth;
    int j = localOptions.outHeight;
    try
    {
      paramString.close();
      return new int[] { i, j };
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
  }
  
  public HttpResponse post(String paramString1, String paramString2)
  {
    try
    {
      this.httpclient.getParams().setParameter("http.useragent", userAgent);
      paramString1 = new HttpPost(paramString1);
      paramString1.addHeader("User-Agent", userAgent);
      paramString1.setEntity(new StringEntity(paramString2, "UTF-8"));
      paramString1.setHeader("content-type", "application/json");
      paramString1 = sendRequestDealingWithSSLErrors(paramString1);
      return paramString1;
    }
    catch (UnsupportedEncodingException paramString1)
    {
      RMLog.w("Encoding error.", paramString1);
      return null;
    }
    catch (RuntimeException paramString1)
    {
      for (;;)
      {
        RMLog.e("Unknown error", paramString1);
      }
    }
  }
  
  public void setTimeout(int paramInt)
  {
    HttpConnectionParams.setConnectionTimeout(this.httpclient.getParams(), paramInt * 1000);
  }
}
