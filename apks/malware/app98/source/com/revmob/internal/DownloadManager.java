package com.revmob.internal;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import org.apache.http.util.ByteArrayBuffer;

public class DownloadManager
  extends AsyncTask<String, Void, String>
{
  private Activity activity;
  private File audioFile;
  private AsyncTaskCompleteListener callback;
  private String filePath;
  private String filename;
  private boolean isSuccessful;
  private URL url;
  
  public DownloadManager(Activity paramActivity, String paramString1, String paramString2, AsyncTaskCompleteListener paramAsyncTaskCompleteListener)
  {
    this.activity = paramActivity;
    this.filename = paramString2;
    this.callback = paramAsyncTaskCompleteListener;
    try
    {
      this.url = new URL(paramString1);
      return;
    }
    catch (MalformedURLException paramActivity)
    {
      paramActivity.printStackTrace();
    }
  }
  
  private void createFilePath(Activity paramActivity)
  {
    this.filePath = paramActivity.getApplicationContext().getFilesDir().getPath();
  }
  
  protected String doInBackground(String... paramVarArgs)
  {
    long l;
    Object localObject;
    try
    {
      createFilePath(this.activity);
      this.audioFile = new File(this.filePath, this.filename);
      this.filePath = this.audioFile.getAbsolutePath();
      if (!this.audioFile.exists())
      {
        l = System.currentTimeMillis();
        RMLog.i("Download begining");
        RMLog.i("Download url:" + this.url);
        RMLog.i("Downloaded file name:" + this.filename);
        localObject = new BufferedInputStream(this.url.openConnection().getInputStream());
        paramVarArgs = new ByteArrayBuffer(50);
        for (;;)
        {
          int i = ((BufferedInputStream)localObject).read();
          if (i == -1) {
            break;
          }
          paramVarArgs.append((byte)i);
        }
        return null;
      }
    }
    catch (IOException paramVarArgs)
    {
      this.isSuccessful = false;
      RMLog.i("Download Error: " + paramVarArgs);
      paramVarArgs.printStackTrace();
    }
    for (;;)
    {
      localObject = new FileOutputStream(this.audioFile);
      ((FileOutputStream)localObject).write(paramVarArgs.toByteArray());
      ((FileOutputStream)localObject).close();
      RMLog.i("Download ready in " + (System.currentTimeMillis() - l) / 1000L + " sec");
      this.isSuccessful = true;
    }
  }
  
  public File getAudioFile()
  {
    return this.audioFile;
  }
  
  public String getFilePath()
  {
    return this.filePath;
  }
  
  public boolean getIsSuccessful()
  {
    return this.isSuccessful;
  }
  
  protected void onPostExecute(String paramString)
  {
    super.onPostExecute(paramString);
    this.callback.onTaskComplete(paramString);
  }
}
