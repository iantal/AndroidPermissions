package com.revmob.ads.fullscreen;

import android.app.Activity;
import android.content.Intent;
import android.content.res.Configuration;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.webkit.WebView;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.revmob.RevMobAdsListener;
import com.revmob.RevMobParallaxMode;
import com.revmob.ads.fullscreen.client.FullscreenData;
import com.revmob.ads.fullscreen.internal.FullscreenClickListener;
import com.revmob.ads.fullscreen.internal.FullscreenDSPClickListener;
import com.revmob.ads.fullscreen.internal.FullscreenStatic;
import com.revmob.ads.fullscreen.internal.FullscreenView;
import com.revmob.ads.fullscreen.internal.FullscreenWebViewClickListener;
import com.revmob.ads.fullscreen.internal.FullscreenWebview;
import com.revmob.ads.internal.StaticAssets;
import com.revmob.client.RevMobClient;
import com.revmob.internal.AndroidHelper;
import com.revmob.internal.RMLog;
import com.revmob.internal.RevMobSoundPlayer;
import com.revmob.internal.RevMobWebViewClient;
import com.revmob.internal.RevMobWebViewClient.RevMobWebViewClickListener;
import java.io.IOException;

public class FullscreenActivity
  extends Activity
  implements SensorEventListener
{
  private static final int BACKGROUND_COLOR = -587202560;
  private static Boolean fullscreenActivityAvailable;
  public FullscreenData data;
  public FullscreenView fullscreenView;
  public boolean isParallaxEnabled = false;
  public RelativeLayout layout;
  private Sensor mOrientation;
  private SensorManager mSensorManager;
  public ProgressBar progressBar;
  public RevMobAdsListener publisherListener;
  
  public FullscreenActivity() {}
  
  private void addCloseButton()
  {
    ImageView localImageView = new ImageView(this);
    localImageView.setImageDrawable(StaticAssets.getCloseButton());
    localImageView.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        FullscreenActivity.this.finish();
      }
    });
    int i = AndroidHelper.dipToPixels(this, 40);
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(i, i);
    i = AndroidHelper.dipToPixels(this, 20);
    localLayoutParams.rightMargin = i;
    localLayoutParams.topMargin = i;
    localLayoutParams.addRule(11);
    localLayoutParams.addRule(6);
    this.layout.addView(localImageView, localLayoutParams);
  }
  
  private void createFullscreenView()
  {
    if (this.data.isHtmlFullscreen())
    {
      localObject = new FullscreenWebViewClickListener(this);
      localObject = new RevMobWebViewClient(this.publisherListener, (RevMobWebViewClient.RevMobWebViewClickListener)localObject);
      this.fullscreenView = new FullscreenWebview(this, this.data.getHtmlAdUrl(), this.data.getHtmlCode(), (RevMobWebViewClient)localObject);
      return;
    }
    if (this.data.isDspFullscreen())
    {
      localObject = new FullscreenDSPClickListener(this);
      localObject = new RevMobWebViewClient(this.publisherListener, (RevMobWebViewClient.RevMobWebViewClickListener)localObject);
      this.fullscreenView = new FullscreenWebview(this, this.data.getDspUrl(), this.data.getDspHtml(), (RevMobWebViewClient)localObject);
      return;
    }
    if (RevMobClient.getInstance().getParallaxMode() == RevMobParallaxMode.DEFAULT) {
      this.isParallaxEnabled = true;
    }
    Object localObject = new FullscreenClickListener(this);
    this.fullscreenView = new FullscreenStatic(this, this.data, (FullscreenClickListener)localObject, this.isParallaxEnabled, this.data.getParallaxDelta());
  }
  
  private void createViewClickUrl(String paramString)
  {
    this.fullscreenView = new FullscreenWebview(this, paramString, null, new RevMobWebViewClient(null, null)
    {
      public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        FullscreenActivity.this.removeProgressBar();
        FullscreenActivity.this.addCloseButton();
      }
    });
  }
  
  private void initFullscreen()
  {
    ((View)this.fullscreenView).setAnimation(this.data.getShowAnimation());
    this.layout = new RelativeLayout(this);
    this.layout.setBackgroundColor(-587202560);
    this.layout.setGravity(48);
    this.layout.addView((View)this.fullscreenView, new RelativeLayout.LayoutParams(-1, -1));
    setContentView(this.layout, new RelativeLayout.LayoutParams(-1, -1));
    playSoundOnShow();
  }
  
  public static Boolean isFullscreenActivityAvailable(Activity paramActivity)
  {
    if (fullscreenActivityAvailable == null) {
      fullscreenActivityAvailable = Boolean.valueOf(AndroidHelper.isIntentAvailable(paramActivity, FullscreenActivity.class));
    }
    return fullscreenActivityAvailable;
  }
  
  private void playSoundOnShow()
  {
    RevMobSoundPlayer localRevMobSoundPlayer = new RevMobSoundPlayer();
    try
    {
      localRevMobSoundPlayer.playFullscreenSound(this, this.data.getShowSoundURL());
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public void addProgressBar()
  {
    if (this.progressBar == null)
    {
      this.progressBar = new ProgressBar(this);
      this.progressBar.setIndeterminate(true);
      RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
      int i = AndroidHelper.dipToPixels(this, 15);
      localLayoutParams.setMargins(i, i, i, i);
      this.layout.addView(this.progressBar, localLayoutParams);
    }
  }
  
  public void close()
  {
    Animation localAnimation = this.data.getCloseAnimation();
    ((View)this.fullscreenView).setAnimation(localAnimation);
    localAnimation.setAnimationListener(new Animation.AnimationListener()
    {
      public void onAnimationEnd(Animation paramAnonymousAnimation)
      {
        FullscreenActivity.this.layout.removeView((View)FullscreenActivity.this.fullscreenView);
        FullscreenActivity.this.layout.removeAllViews();
        FullscreenActivity.this.finish();
      }
      
      public void onAnimationRepeat(Animation paramAnonymousAnimation) {}
      
      public void onAnimationStart(Animation paramAnonymousAnimation) {}
    });
    ((View)this.fullscreenView).startAnimation(localAnimation);
  }
  
  public void finish()
  {
    super.finish();
  }
  
  public void onAccuracyChanged(Sensor paramSensor, int paramInt) {}
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    this.fullscreenView.update();
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = null;
    requestWindowFeature(1);
    getWindow().addFlags(1024);
    getWindow().setFlags(4, 4);
    Intent localIntent = getIntent();
    String str = localIntent.getStringExtra("com.revmob.ads.fullscreen.adUrl");
    try
    {
      if (getLastNonConfigurationInstance() != null) {
        paramBundle = (FullscreenData)getLastNonConfigurationInstance();
      }
      while (paramBundle != null)
      {
        this.data = paramBundle;
        this.publisherListener = this.data.getPublisherListener();
        createFullscreenView();
        initFullscreen();
        return;
        if (str != null) {
          paramBundle = FullscreenData.getLoadedFullscreen(str);
        }
      }
      createViewClickUrl(localIntent.getStringExtra("marketURL"));
      initFullscreen();
      addProgressBar();
      return;
    }
    catch (RuntimeException paramBundle)
    {
      RMLog.e("Unexpected error on create Fullscreen Ad.", paramBundle);
      if (this.publisherListener != null) {
        this.publisherListener.onRevMobAdNotReceived("Unexpected error on create Fullscreen Ad.");
      }
      finish();
    }
  }
  
  protected void onDestroy()
  {
    FullscreenData.cleanLoadedFullscreen(this.data);
    super.onDestroy();
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      if (this.publisherListener != null) {
        this.publisherListener.onRevMobAdDismiss();
      }
      finish();
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  protected void onPause()
  {
    super.onPause();
    if (this.mSensorManager != null) {
      this.mSensorManager.unregisterListener(this);
    }
  }
  
  protected void onResume()
  {
    super.onResume();
    if ((this.data != null) && (this.isParallaxEnabled))
    {
      this.mSensorManager = ((SensorManager)getSystemService("sensor"));
      this.mOrientation = this.mSensorManager.getDefaultSensor(3);
      if (this.mOrientation != null) {
        this.mSensorManager.registerListener(this, this.mOrientation, 3);
      }
    }
  }
  
  public Object onRetainNonConfigurationInstance()
  {
    return this.data;
  }
  
  public void onSensorChanged(SensorEvent paramSensorEvent)
  {
    if ((this.data != null) && (this.isParallaxEnabled) && (paramSensorEvent.sensor.getType() == 3) && (!this.data.isHtmlFullscreen()) && (!this.data.isDspFullscreen())) {
      ((FullscreenStatic)this.fullscreenView).updateAccordingToDevicePosition((int)paramSensorEvent.values[0], (int)paramSensorEvent.values[1]);
    }
  }
  
  public void removeProgressBar()
  {
    if (this.progressBar != null) {
      this.layout.removeView(this.progressBar);
    }
  }
}
