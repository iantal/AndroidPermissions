package com.revmob.ads.internal;

import com.revmob.RevMobAdsListener;
import com.revmob.client.RevMobClientListener;
import com.revmob.internal.HTTPHelper;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public abstract class AdRevMobClientListener
  implements RevMobClientListener
{
  protected Ad ad;
  protected RevMobAdsListener publisherListener;
  
  public AdRevMobClientListener(Ad paramAd, RevMobAdsListener paramRevMobAdsListener)
  {
    this.ad = paramAd;
    this.publisherListener = paramRevMobAdsListener;
  }
  
  public static String getAppOrSite(JSONObject paramJSONObject)
    throws JSONException
  {
    return optionalGetString(paramJSONObject, "app_or_site", "app");
  }
  
  public static String getClickUrl(JSONArray paramJSONArray)
    throws JSONException
  {
    return getLinkByRel(paramJSONArray, "clicks");
  }
  
  public static String getCustomUserAgent(JSONObject paramJSONObject)
    throws JSONException
  {
    return optionalGetString(paramJSONObject, "customUserAgent", HTTPHelper.getUserAgent());
  }
  
  public static boolean getFollowRedirect(JSONObject paramJSONObject)
    throws JSONException
  {
    return Boolean.parseBoolean(optionalGetString(paramJSONObject, "follow_redirect", "true"));
  }
  
  public static String getImpressionUrl(JSONArray paramJSONArray)
    throws JSONException
  {
    return getLinkByRel(paramJSONArray, "impressions");
  }
  
  public static String getLinkByRel(JSONArray paramJSONArray, String paramString)
    throws JSONException
  {
    int i = 0;
    while (i < paramJSONArray.length())
    {
      if (paramJSONArray.getJSONObject(i).getString("rel").equals(paramString)) {
        return paramJSONArray.getJSONObject(i).getString("href");
      }
      i += 1;
    }
    return null;
  }
  
  public static boolean getOpenInside(JSONObject paramJSONObject)
    throws JSONException
  {
    return Boolean.parseBoolean(optionalGetString(paramJSONObject, "open_inside", "false"));
  }
  
  public static String optionalGetString(JSONObject paramJSONObject, String paramString1, String paramString2)
  {
    try
    {
      paramJSONObject = paramJSONObject.getString(paramString1);
      return paramJSONObject;
    }
    catch (JSONException paramJSONObject) {}
    return paramString2;
  }
  
  public void handleError(String paramString)
  {
    if (this.publisherListener != null) {
      this.publisherListener.onRevMobAdNotReceived("Ad not received: " + paramString);
    }
  }
  
  public void handleResponse(String paramString)
    throws JSONException
  {}
}
