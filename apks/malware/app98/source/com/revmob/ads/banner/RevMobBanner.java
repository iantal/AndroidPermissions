package com.revmob.ads.banner;

import android.app.Activity;
import android.view.Display;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.webkit.WebView;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.revmob.RevMobAdsListener;
import com.revmob.ads.banner.client.BannerClientListener;
import com.revmob.ads.banner.client.BannerData;
import com.revmob.ads.internal.Ad;
import com.revmob.ads.internal.AdState;
import com.revmob.android.RevMobContext;
import com.revmob.client.AdData;
import com.revmob.client.RevMobClient;
import com.revmob.internal.MarketAsyncManager;
import com.revmob.internal.RMLog;
import com.revmob.internal.RevMobSoundPlayer;
import com.revmob.internal.RevMobWebView;
import com.revmob.internal.RevMobWebViewClient;
import com.revmob.internal.RevMobWebViewClient.RevMobWebViewClickListener;
import java.io.IOException;

public class RevMobBanner
  extends RelativeLayout
  implements Ad
{
  public static final int DEFAULT_HEIGHT_IN_DIP = 50;
  public static final int DEFAULT_WIDTH_IN_DIP = 320;
  private Activity activity;
  private View adView;
  private BannerData data;
  private int height = 50;
  final View.OnClickListener onClickListener = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      RevMobBanner.this.activity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          RevMobBanner.access$002(RevMobBanner.this, AdState.CLICKED);
          new MarketAsyncManager(RevMobBanner.this.activity, RevMobBanner.this.data, RevMobBanner.this.publisherListener).execute(new Void[0]);
          RevMobBanner.this.hide();
          RevMobBanner.this.load(RevMobBanner.this.placementId);
        }
      });
    }
  };
  private String placementId;
  private RevMobAdsListener publisherListener;
  private AdState state;
  private int width = 320;
  
  public RevMobBanner(Activity paramActivity, RevMobAdsListener paramRevMobAdsListener)
  {
    super(paramActivity);
    this.activity = paramActivity;
    this.publisherListener = paramRevMobAdsListener;
    this.state = AdState.CREATED;
  }
  
  private void addDSPAdView()
  {
    RevMobWebViewClient localRevMobWebViewClient = new RevMobWebViewClient(this.publisherListener, new RevMobWebViewClient.RevMobWebViewClickListener()
    {
      public boolean handleClick(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        RevMobBanner.this.onClickListener.onClick(RevMobBanner.this.adView);
        return true;
      }
      
      public void handlePageFinished(WebView paramAnonymousWebView, String paramAnonymousString) {}
    });
    this.adView = new RevMobWebView(getContext(), this.data.getDspUrl(), this.data.getDspHtml(), localRevMobWebViewClient);
    this.adView.setBackgroundColor(0);
    calculateDimensions();
    this.adView.setLayoutParams(new RelativeLayout.LayoutParams(this.width, this.height));
    this.adView.bringToFront();
    this.adView.setAnimation(this.data.getShowAnimation());
    addView(this.adView);
    playSoundOnShow();
  }
  
  private void addHtmlAdView()
  {
    RevMobWebViewClient localRevMobWebViewClient = new RevMobWebViewClient(this.publisherListener, new RevMobWebViewClient.RevMobWebViewClickListener()
    {
      public boolean handleClick(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        if (paramAnonymousString.endsWith("#click")) {
          RevMobBanner.this.onClickListener.onClick(RevMobBanner.this.adView);
        }
        return true;
      }
      
      public void handlePageFinished(WebView paramAnonymousWebView, String paramAnonymousString) {}
    });
    this.adView = new RevMobWebView(getContext(), this.data.getHtmlAdUrl(), null, localRevMobWebViewClient);
    this.adView.setBackgroundColor(0);
    calculateDimensions();
    this.adView.setLayoutParams(new RelativeLayout.LayoutParams(this.width, this.height));
    this.adView.bringToFront();
    this.adView.setAnimation(this.data.getShowAnimation());
    addView(this.adView);
    playSoundOnShow();
  }
  
  private void addImageView()
  {
    this.adView = new ImageView(getContext());
    ((ImageView)this.adView).setImageBitmap(this.data.getDrawable());
    if (getParent() != null) {
      ((View)getParent()).setVisibility(0);
    }
    calculateDimensions();
    this.adView.setLayoutParams(new RelativeLayout.LayoutParams(this.width, this.height));
    ((ImageView)this.adView).setScaleType(ImageView.ScaleType.FIT_XY);
    this.adView.setOnClickListener(this.onClickListener);
    this.adView.setAnimation(this.data.getShowAnimation());
    addView(this.adView);
    playSoundOnShow();
  }
  
  private void calculateDimensions()
  {
    View localView = (View)getParent();
    int j = ((Activity)getContext()).getWindowManager().getDefaultDisplay().getWidth();
    int i = j;
    if (localView != null)
    {
      i = j;
      if (localView.getWidth() != 0) {
        i = localView.getWidth();
      }
    }
    this.width = i;
    j = this.width * 50 / 320;
    i = j;
    if (localView != null)
    {
      i = j;
      if (localView.getHeight() != 0) {
        i = Math.min(localView.getHeight(), j);
      }
    }
    this.height = i;
  }
  
  private boolean isLoaded()
  {
    return this.data != null;
  }
  
  private void playSoundOnShow()
  {
    RevMobSoundPlayer localRevMobSoundPlayer = new RevMobSoundPlayer();
    try
    {
      localRevMobSoundPlayer.playBannerSound(this.activity, this.data.getShowSoundURL());
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public void hide()
  {
    Animation localAnimation = this.data.getCloseAnimation();
    this.adView.setAnimation(localAnimation);
    localAnimation.setAnimationListener(new Animation.AnimationListener()
    {
      public void onAnimationEnd(Animation paramAnonymousAnimation)
      {
        ((ViewGroup)RevMobBanner.this.adView.getParent()).removeView(RevMobBanner.this.adView);
      }
      
      public void onAnimationRepeat(Animation paramAnonymousAnimation) {}
      
      public void onAnimationStart(Animation paramAnonymousAnimation) {}
    });
    this.adView.startAnimation(localAnimation);
  }
  
  public void load()
  {
    load(null);
  }
  
  public void load(String paramString)
  {
    this.placementId = paramString;
    if ((this.state == AdState.CREATED) || (this.state == AdState.CLOSED) || (this.state == AdState.CLICKED)) {
      if (paramString == null) {
        break label91;
      }
    }
    label91:
    for (String str = "Loading Banner " + paramString;; str = "Loading Banner")
    {
      RMLog.i(str);
      RevMobClient.getInstance().fetchBanner(paramString, RevMobContext.toPayload(this.activity), new BannerClientListener(this, this.publisherListener));
      return;
    }
  }
  
  public void reportShowOrHidden()
  {
    if (isShown())
    {
      if ((isLoaded()) && (this.state != AdState.DISPLAYED))
      {
        this.state = AdState.DISPLAYED;
        if (this.publisherListener != null) {
          this.publisherListener.onRevMobAdDisplayed();
        }
        RevMobClient.getInstance().reportImpression(this.data.getImpressionUrl(), RevMobContext.toPayload(this.activity));
      }
      return;
    }
    this.state = AdState.HIDDEN;
  }
  
  public void updateWithData(AdData paramAdData)
  {
    this.state = AdState.LOADED;
    this.data = ((BannerData)paramAdData);
    if (this.publisherListener != null) {
      this.publisherListener.onRevMobAdReceived();
    }
    setOnClickListener(this.onClickListener);
    ((Activity)getContext()).runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (RevMobBanner.this.data.isHtmlBanner()) {
          RevMobBanner.this.addHtmlAdView();
        }
        for (;;)
        {
          RevMobBanner.this.reportShowOrHidden();
          return;
          if (RevMobBanner.this.data.isDspBanner()) {
            RevMobBanner.this.addDSPAdView();
          } else {
            RevMobBanner.this.addImageView();
          }
        }
      }
    });
  }
}
