package com.qbiki.feedback;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnMultiChoiceClickListener;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore.Images.Media;
import android.support.v4.app.FragmentActivity;
import android.text.format.DateFormat;
import android.util.Log;
import android.util.SparseBooleanArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import com.qbiki.location.AsyncGeocoder;
import com.qbiki.location.LocationDetectorActivity;
import com.qbiki.location.LocationUtil;
import com.qbiki.location.LocationsListFragment;
import com.qbiki.location.MarkerMapFragment;
import com.qbiki.location.SimpleLocationManager;
import com.qbiki.location.SimpleLocationManager.BestLocationEstimateListenerAdapter;
import com.qbiki.mbfx.DynamicHTML;
import com.qbiki.modules.signaturestamp.DrawSurfaceActivity;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StyleUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

public class FeedbackFragment
  extends SCFragment
  implements ResponseListener
{
  private static final int CONTENT = 1801;
  private static final int FILE = 1802;
  private static final int IMAGE_MAX_SIZE = 220;
  public static final String LATITUDE = "latitude";
  public static final String LONGITUDE = "longitude";
  public static final double NO_COORDINATE = 1000.0D;
  private static final int SELECT_CAMERA = 1302;
  private static final int SELECT_IMAGE = 1301;
  private static final int SELECT_LOCATION = 1300;
  private static final int SELECT_SIGN = 1303;
  private static final String TAG = "FeedbackActivity";
  private SparseBooleanArray checkedMultiList;
  private String confirmationmessage;
  private double defaultLatitude;
  private double defaultLongitude;
  private String imgFileName;
  private boolean isOnlyEnterData = false;
  private boolean isShowLocationPicker;
  private JSONObject jsonObject;
  private CharSequence[] listItems;
  private LinearLayout ll;
  private Location mCurrentLocation = new Location("code");
  private AsyncGeocoder mGeocoder;
  private SimpleLocationManager mLocationManager;
  private View mView = null;
  private double nearLatitude = 0.0D;
  private double nearLongitude = 0.0D;
  private String pageId;
  private ProgressDialog progressDialog = null;
  private int progressDialogCount = 0;
  private int radius = 0;
  private boolean resultDistanceInMiles = true;
  private String resultType;
  private ArrayList<String> sendToAddresses;
  private boolean shouldUseCurrentLocation = false;
  private String slideToNextPage;
  private Bundle style;
  private List<LinearLayout> subLinLayout;
  private String submitbuttontext;
  private PickerView targetPV;
  private ArrayList<Field> theFields;
  private String theName = null;
  private String theRadius = "any";
  private String theType = "any";
  private Page thisPage;
  
  public FeedbackFragment() {}
  
  private Bitmap decodeBitmapFromUri(Uri paramUri, int paramInt)
  {
    Bitmap localBitmap2 = null;
    Bitmap localBitmap1 = localBitmap2;
    BitmapFactory.Options localOptions;
    try
    {
      localOptions = new BitmapFactory.Options();
      localBitmap1 = localBitmap2;
      localOptions.inJustDecodeBounds = true;
      if (paramInt == 1801)
      {
        localBitmap1 = localBitmap2;
        BitmapFactory.decodeStream(getActivity().getContentResolver().openInputStream(paramUri), null, localOptions);
      }
      for (;;)
      {
        int i = 1;
        localBitmap1 = localBitmap2;
        if (localOptions.outHeight <= 220)
        {
          localBitmap1 = localBitmap2;
          if (localOptions.outWidth <= 220) {}
        }
        else
        {
          localBitmap1 = localBitmap2;
          i = (int)Math.pow(2.0D, (int)Math.round(Math.log(220.0D / Math.max(localOptions.outHeight, localOptions.outWidth)) / Math.log(0.5D)));
        }
        localBitmap1 = localBitmap2;
        localOptions = new BitmapFactory.Options();
        localBitmap1 = localBitmap2;
        localOptions.inSampleSize = i;
        if (paramInt != 1801) {
          break;
        }
        localBitmap1 = localBitmap2;
        return BitmapFactory.decodeStream(getActivity().getContentResolver().openInputStream(paramUri), null, localOptions);
        localBitmap1 = localBitmap2;
        BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
      }
      localBitmap1 = localBitmap2;
    }
    catch (Exception paramUri)
    {
      Log.e("FeedbackActivity", "decodeBitmapFromUriString: " + paramUri.toString(), paramUri);
      return localBitmap1;
    }
    localBitmap2 = BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
    localBitmap1 = localBitmap2;
    paramUri = ImageUtil.correctImageOrientation(paramUri.getPath(), localBitmap2);
    return paramUri;
  }
  
  private void dismissProgressDialog()
  {
    try
    {
      this.progressDialogCount -= 1;
      if (this.progressDialogCount < 0) {
        this.progressDialogCount = 0;
      }
      Log.v("FeedbackActivity", "dismissProgressDialog: " + this.progressDialogCount);
      if ((this.progressDialogCount == 0) && (this.progressDialog != null)) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally {}
  }
  
  private void onParseLocationsTaskFinished()
  {
    int i = 0;
    if (i < this.ll.getChildCount())
    {
      PickerView localPickerView;
      if (this.ll.getChildAt(i).getClass().equals(PickerView.class))
      {
        localPickerView = (PickerView)this.ll.getChildAt(i);
        if (localPickerView.type != 2) {
          break label98;
        }
        this.nearLatitude = this.mCurrentLocation.getLatitude();
        this.nearLongitude = this.mCurrentLocation.getLongitude();
        localPickerView.latitude = this.nearLatitude;
        localPickerView.longitude = this.nearLongitude;
      }
      for (;;)
      {
        i += 1;
        break;
        label98:
        if ((localPickerView.type == 5) || (localPickerView.type == 11))
        {
          this.theName = localPickerView.ev.getText().toString().toLowerCase(Locale.getDefault());
        }
        else if (localPickerView.type == 7)
        {
          if (localPickerView.field.fieldId.equalsIgnoreCase("field2")) {
            this.theType = localPickerView.ev.getText().toString().toLowerCase(Locale.getDefault());
          }
          if (localPickerView.field.fieldId.equalsIgnoreCase("field4"))
          {
            this.theRadius = localPickerView.ev.getText().toString().toLowerCase(Locale.getDefault());
            if (!this.theRadius.equalsIgnoreCase("any")) {
              try
              {
                this.radius = Integer.parseInt(this.theRadius.trim());
              }
              catch (NumberFormatException localNumberFormatException)
              {
                this.radius = 0;
              }
            } else {
              this.radius = 0;
            }
          }
        }
      }
    }
    Object localObject1 = new ArrayList();
    Object localObject2;
    Object localObject3;
    if ((this.thisPage.locationsArray != null) && (this.thisPage.locationsArray.size() != 0))
    {
      localObject2 = this.thisPage.locationsArray.iterator();
      while (((Iterator)localObject2).hasNext())
      {
        localObject3 = (LocationModel)((Iterator)localObject2).next();
        ((LocationModel)localObject3).distance = LocationUtil.getDistance(this.nearLatitude, this.nearLongitude, ((LocationModel)localObject3).latitude, ((LocationModel)localObject3).longitude, this.resultDistanceInMiles);
        if (((this.radius == 0) || (((LocationModel)localObject3).distance <= this.radius)) && ((this.theName == null) || (this.theName.equalsIgnoreCase("")) || (((LocationModel)localObject3).locationName.toLowerCase(Locale.getDefault()).contains(this.theName))))
        {
          String[] arrayOfString = ((LocationModel)localObject3).locationType.split(",");
          this.theType = this.theType.replace(" ", "");
          i = 0;
          int j = 0;
          while (j < arrayOfString.length)
          {
            String str = arrayOfString[j].replace(" ", "");
            if ((this.theType != null) && (!this.theType.equalsIgnoreCase("")) && (!this.theType.equalsIgnoreCase("any")) && (!str.equalsIgnoreCase(this.theType)))
            {
              i = 1;
              j += 1;
            }
            else
            {
              i = 0;
            }
          }
          if (i == 0) {
            ((ArrayList)localObject1).add(localObject3);
          }
        }
      }
    }
    if (((ArrayList)localObject1).size() == 0)
    {
      localObject1 = new AlertDialog.Builder(getActivity());
      ((AlertDialog.Builder)localObject1).setMessage("Sorry, no locations found. Please try again.").setCancelable(true).setPositiveButton("OK", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
      });
      ((AlertDialog.Builder)localObject1).create().show();
    }
    do
    {
      return;
      Collections.sort((List)localObject1);
      i = this.thisPage.getLocationsLimit();
      if (((ArrayList)localObject1).size() <= i) {}
      for (localObject1 = new ArrayList((Collection)localObject1);; localObject1 = new ArrayList(((ArrayList)localObject1).subList(0, i - 1)))
      {
        localObject3 = "locationfinder:name=" + this.theName + ",type=" + this.theType + ",lat=" + this.nearLatitude + ",lon=" + this.nearLongitude;
        localObject2 = new Page((String)localObject3);
        ((Page)localObject2).setType("locationslist");
        ((Page)localObject2).locationsArray = ((ArrayList)localObject1);
        App.appConfig.getPages().put(localObject3, localObject2);
        if (!this.resultType.equalsIgnoreCase("list")) {
          break;
        }
        localObject1 = new Bundle();
        ((Bundle)localObject1).putParcelableArrayList("locationsList", ((Page)localObject2).locationsArray);
        ((Bundle)localObject1).putBoolean("resultDistanceInMiles", this.resultDistanceInMiles);
        App.showPage(new FragmentInfo(LocationsListFragment.class.getName(), (Bundle)localObject1), this);
        return;
      }
    } while (!this.resultType.equalsIgnoreCase("map"));
    localObject1 = new Bundle();
    ((Bundle)localObject1).putParcelableArrayList("locationsList", ((Page)localObject2).locationsArray);
    App.showPage(new FragmentInfo(MarkerMapFragment.class.getName(), (Bundle)localObject1), this);
  }
  
  private void sendEditProfileForm(String paramString)
  {
    int i = 0;
    Object localObject1;
    while (i < this.ll.getChildCount())
    {
      if (this.ll.getChildAt(i).getClass().equals(PickerView.class))
      {
        localObject1 = (PickerView)this.ll.getChildAt(i);
        if (!((PickerView)localObject1).requirementSatisfied())
        {
          DialogUtil.showAlert(getActivity(), "Error", ((PickerView)localObject1).getRequirementMessage());
          return;
        }
      }
      i += 1;
    }
    ArrayList localArrayList = new ArrayList();
    i = 0;
    for (;;)
    {
      try
      {
        if (i >= this.ll.getChildCount()) {
          continue;
        }
        if (!this.ll.getChildAt(i).getClass().equals(PickerView.class)) {
          break label693;
        }
        localPickerView = (PickerView)this.ll.getChildAt(i);
        str1 = "";
        str2 = "";
        if ((localPickerView.type != 0) && (localPickerView.type != 1) && (localPickerView.type != 5) && (localPickerView.type != 11) && (localPickerView.type != 6) && (localPickerView.type != 7) && (localPickerView.type != 8)) {
          continue;
        }
        localObject1 = localPickerView.field.getfTargetParam();
        localObject2 = localPickerView.ev.getText().toString();
      }
      catch (UnsupportedEncodingException paramString)
      {
        PickerView localPickerView;
        String str1;
        String str2;
        Log.e("FeedbackActivity", "submitFeedback: " + paramString, paramString);
        return;
        DialogUtil.showAlert(getActivity(), "ERROR", "Invalid Upload Image target URL.");
        localObject1 = str1;
        Object localObject2 = str2;
        continue;
      }
      catch (FileNotFoundException paramString)
      {
        Log.e("FeedbackActivity", "submitFeedback: " + paramString, paramString);
        return;
        paramString = new HttpPost(paramString);
        paramString.setEntity(new UrlEncodedFormEntity(localArrayList));
        showProgressDialog();
        Requester.sendRequest(paramString, this);
        return;
      }
      catch (IOException paramString)
      {
        Log.e("FeedbackActivity", "submitFeedback: " + paramString, paramString);
        return;
      }
      catch (Exception paramString)
      {
        Log.e("FeedbackActivity", "submitFeedback: " + paramString, paramString);
        return;
      }
      localArrayList.add(new BasicNameValuePair((String)localObject1 + ":", (String)localObject2));
      if (localPickerView.type == 2)
      {
        localObject1 = localPickerView.field.getfTargetParam();
        localObject2 = localPickerView.ev.getText().toString() + " <a href=\"http://maps.google.com/maps?q=" + localPickerView.latitude + "," + localPickerView.longitude + "\">VIEW MAP</a>";
      }
      else if ((localPickerView.type != 3) && (localPickerView.type != 4))
      {
        localObject1 = str1;
        localObject2 = str2;
        if (localPickerView.type != 9) {}
      }
      else
      {
        localObject1 = str1;
        localObject2 = str2;
        if (localPickerView.imageUri != null)
        {
          localObject1 = DynamicHTML.replaceMBFXContextinURL(localPickerView.field.fTargetURL);
          if ((localObject1 != null) && (!((String)localObject1).equalsIgnoreCase("")))
          {
            Log.v("FeedbackActivity", "tempPV.imageUri = " + localPickerView.imageUri);
            localObject2 = new ByteArrayEntity(DataUtil.readBytes(getActivity().getContentResolver().openInputStream(localPickerView.imageUri)));
            localObject1 = new HttpPost((String)localObject1);
            ((HttpPost)localObject1).setEntity((HttpEntity)localObject2);
            showProgressDialog();
            Requester.sendRequest((HttpUriRequest)localObject1, new ResponseListener()
            {
              public void onResponseReceived(HttpResponse paramAnonymousHttpResponse)
              {
                FeedbackFragment.this.dismissProgressDialog();
                paramAnonymousHttpResponse = Requester.getResponseBody(paramAnonymousHttpResponse);
                if (!paramAnonymousHttpResponse.equalsIgnoreCase("ok"))
                {
                  DialogUtil.showAlert(FeedbackFragment.this.getActivity(), "Error uploading image", paramAnonymousHttpResponse);
                  return;
                }
                DialogUtil.showAlert(FeedbackFragment.this.getActivity(), "New image uploaded successfully!", paramAnonymousHttpResponse);
              }
              
              public void onResponseTimeout()
              {
                FeedbackFragment.this.dismissProgressDialog();
                DialogUtil.showAlert(FeedbackFragment.this.getActivity(), "ERROR", "Server is NOT responding.");
              }
            });
            localObject1 = str1;
            localObject2 = str2;
          }
          else
          {
            label693:
            i += 1;
          }
        }
      }
    }
  }
  
  private void setLocationFromInput(EditText paramEditText, Location paramLocation)
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation)) {
      this.mLocationManager.stopUpdatingLocation();
    }
    this.mCurrentLocation = paramLocation;
    updateUiForLocation(this.mCurrentLocation, paramEditText);
  }
  
  private void showProgressDialog()
  {
    try
    {
      this.progressDialogCount += 1;
      Log.v("FeedbackActivity", "showProgressDialog: " + this.progressDialogCount);
      if (this.progressDialogCount == 1)
      {
        this.progressDialog = new ProgressDialog(getActivity());
        this.progressDialog.setProgressStyle(0);
        this.progressDialog.setMessage("Submitting...");
        this.progressDialog.setCancelable(false);
        this.progressDialog.show();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void startGettingLocation(final EditText paramEditText)
  {
    this.mLocationManager = new SimpleLocationManager(getActivity(), new SimpleLocationManager.BestLocationEstimateListenerAdapter(false)
    {
      public void onBestLocationEstimateChanged(Location paramAnonymousLocation)
      {
        super.onBestLocationEstimateChanged(paramAnonymousLocation);
        Log.d("FeedbackActivity", "got location: " + paramAnonymousLocation);
        FeedbackFragment.access$302(FeedbackFragment.this, paramAnonymousLocation);
        FeedbackFragment.this.updateUiForLocation(paramAnonymousLocation, paramEditText);
      }
    });
    this.mLocationManager.setMinTime(2000L);
  }
  
  private void submitFeedback()
  {
    int i = 0;
    Object localObject1;
    while (i < this.ll.getChildCount())
    {
      if (this.ll.getChildAt(i).getClass().equals(PickerView.class))
      {
        localObject1 = (PickerView)this.ll.getChildAt(i);
        if (!((PickerView)localObject1).requirementSatisfied())
        {
          DialogUtil.showAlert(getActivity(), "Error", ((PickerView)localObject1).getRequirementMessage());
          return;
        }
      }
      i += 1;
    }
    String str = "http://" + App.serverHostName + "/sendnativeform.ashx";
    ArrayList localArrayList = new ArrayList(4);
    i = 0;
    if (i < this.sendToAddresses.size())
    {
      if (i == 0) {
        localArrayList.add(new BasicNameValuePair("sendtoaddress", (String)this.sendToAddresses.get(i)));
      }
      for (;;)
      {
        i += 1;
        break;
        localArrayList.add(new BasicNameValuePair("sendtoaddress" + i, (String)this.sendToAddresses.get(i)));
      }
    }
    localArrayList.add(new BasicNameValuePair("publisherid", App.publisherId));
    localArrayList.add(new BasicNameValuePair("username", App.username));
    localArrayList.add(new BasicNameValuePair("appid", App.appId));
    localArrayList.add(new BasicNameValuePair("pageid", this.pageId));
    i = 0;
    for (;;)
    {
      try
      {
        if (i >= this.ll.getChildCount()) {
          continue;
        }
        if (!this.ll.getChildAt(i).getClass().equals(PickerView.class)) {
          break label1170;
        }
        localPickerView = (PickerView)this.ll.getChildAt(i);
        localObject2 = "";
        localObject1 = "";
        k = 0;
        if ((localPickerView.type != 0) && (localPickerView.type != 1) && (localPickerView.type != 5) && (localPickerView.type != 11) && (localPickerView.type != 6) && (localPickerView.type != 7) && (localPickerView.type != 8) && (localPickerView.type != 10)) {
          continue;
        }
        localObject3 = localPickerView.field.fieldLabel;
        localObject4 = localPickerView.ev.getText().toString();
        j = k;
        localObject2 = localObject3;
        localObject1 = localObject4;
        if (localPickerView.type == 10)
        {
          j = 1;
          localObject1 = localObject4;
          localObject2 = localObject3;
        }
        localObject3 = new StringBuilder().append((String)localObject2);
        if (j == 0) {
          continue;
        }
        localObject2 = ":lb";
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        PickerView localPickerView;
        int k;
        Object localObject3;
        Object localObject4;
        int j;
        Log.e("FeedbackActivity", "submitFeedback: " + localUnsupportedEncodingException, localUnsupportedEncodingException);
        return;
        Object localObject2 = ":";
        continue;
        HttpPost localHttpPost = new HttpPost(str);
        localHttpPost.setEntity(new UrlEncodedFormEntity(localArrayList, "UTF-8"));
        showProgressDialog();
        Requester.sendRequest(localHttpPost, this);
        return;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        Log.e("FeedbackActivity", "submitFeedback: " + localFileNotFoundException, localFileNotFoundException);
        return;
      }
      catch (IOException localIOException)
      {
        Log.e("FeedbackActivity", "submitFeedback: " + localIOException, localIOException);
        return;
      }
      catch (Exception localException)
      {
        Log.e("FeedbackActivity", "submitFeedback: " + localException, localException);
        return;
      }
      localArrayList.add(new BasicNameValuePair((String)localObject2, (String)localObject1));
      if (localPickerView.type == 2)
      {
        localObject2 = localPickerView.field.fieldLabel;
        if ((localPickerView.latitude == 0.0D) && (localPickerView.longitude == 0.0D))
        {
          localPickerView.latitude = this.mCurrentLocation.getLatitude();
          localPickerView.longitude = this.mCurrentLocation.getLongitude();
        }
        localObject1 = localPickerView.ev.getText().toString() + " <a href=\"http://maps.google.com/maps?q=" + localPickerView.latitude + "," + localPickerView.longitude + "\">VIEW MAP</a>";
        j = k;
      }
      else if ((localPickerView.type != 3) && (localPickerView.type != 4))
      {
        j = k;
        if (localPickerView.type != 9) {}
      }
      else
      {
        localObject2 = localPickerView.field.fieldLabel;
        if (localPickerView.imageUri == null)
        {
          localObject1 = "<img src=\"http://" + App.serverHostName + "/formimages/default.png\">";
          j = k;
        }
        else
        {
          localObject1 = UUID.randomUUID().toString();
          localObject3 = "http://" + App.serverHostName + "/saveformimage.ashx?uuid=" + (String)localObject1 + "&username=" + App.username + "&appid=" + App.appId + "&publisherid=" + App.publisherId;
          localObject1 = "<a href=\"http://" + App.serverHostName + "/formimages/" + (String)localObject1 + ".png\"><img src=\"http://" + App.serverHostName + "/formimages/" + (String)localObject1 + ".png\" style='max-width:500px;height:auto;'></a>";
          Log.v("FeedbackActivity", "tempPV.imageUri = " + localPickerView.imageUri);
          localObject4 = new ByteArrayEntity(DataUtil.readBytes(getActivity().getContentResolver().openInputStream(localPickerView.imageUri)));
          localObject3 = new HttpPost((String)localObject3);
          ((HttpPost)localObject3).setEntity((HttpEntity)localObject4);
          showProgressDialog();
          Requester.sendRequest((HttpUriRequest)localObject3, new ResponseListener()
          {
            public void onResponseReceived(HttpResponse paramAnonymousHttpResponse)
            {
              FeedbackFragment.this.dismissProgressDialog();
              paramAnonymousHttpResponse = Requester.getResponseBody(paramAnonymousHttpResponse);
              if (!paramAnonymousHttpResponse.equalsIgnoreCase("ok")) {
                DialogUtil.showAlert(FeedbackFragment.this.getActivity(), "Error uploading image", paramAnonymousHttpResponse);
              }
            }
            
            public void onResponseTimeout()
            {
              FeedbackFragment.this.dismissProgressDialog();
              DialogUtil.showAlert(FeedbackFragment.this.getActivity(), "ERROR", "Server is NOT responding.");
            }
          });
          j = k;
          continue;
          label1170:
          i += 1;
        }
      }
    }
  }
  
  private void updateUiForLocation(Location paramLocation, final EditText paramEditText)
  {
    if (this.mGeocoder == null) {
      this.mGeocoder = new AsyncGeocoder(getActivity(), getActivity(), new AsyncTaskListener()
      {
        public void asyncTaskFinished(Object paramAnonymousObject)
        {
          Log.d("FeedbackActivity", "got address: " + paramAnonymousObject);
          if (paramAnonymousObject != null)
          {
            FeedbackFragment.access$1402(FeedbackFragment.this, FeedbackFragment.this.mCurrentLocation.getLatitude());
            FeedbackFragment.access$1502(FeedbackFragment.this, FeedbackFragment.this.mCurrentLocation.getLongitude());
            paramEditText.setText((String)paramAnonymousObject);
          }
        }
      });
    }
    this.mGeocoder.getAddress(paramLocation);
  }
  
  @SuppressLint({"NewApi"})
  protected void init()
  {
    Object localObject1 = getArguments();
    if (localObject1 != null)
    {
      this.theFields = ((Bundle)localObject1).getParcelableArrayList("feedbackfields");
      this.imgFileName = ((Bundle)localObject1).getString("headerimage");
      this.pageId = ((Bundle)localObject1).getString("pageid");
      this.sendToAddresses = ((Bundle)localObject1).getStringArrayList("sendtoaddresses");
      this.submitbuttontext = ((Bundle)localObject1).getString("submitbutton");
      this.confirmationmessage = ((Bundle)localObject1).getString("confirmmessage");
      this.defaultLatitude = ((Bundle)localObject1).getDouble("latitude", 1000.0D);
      this.defaultLongitude = ((Bundle)localObject1).getDouble("longitude", 1000.0D);
      this.resultType = ((Bundle)localObject1).getString("resultType");
      this.resultDistanceInMiles = ((Bundle)localObject1).getBoolean("resultDistanceInMiles");
      this.isShowLocationPicker = ((Bundle)localObject1).getBoolean("showLocationPicker");
      this.isOnlyEnterData = ((Bundle)localObject1).getBoolean("isOnlyEnterData");
      this.slideToNextPage = ((Bundle)localObject1).getString("slidetonextpage");
      this.subLinLayout = new ArrayList();
      this.style = ((Bundle)localObject1).getBundle("PAGE_STYLE");
      if ((((Bundle)localObject1).getBoolean("rightToLeft")) && (Build.VERSION.SDK_INT >= 17)) {
        this.mView.setLayoutDirection(1);
      }
      localObject1 = ((Bundle)localObject1).getString("jsonstring");
      if (localObject1 == null) {}
    }
    try
    {
      this.jsonObject = new JSONObject((String)localObject1);
      this.thisPage = ((Page)App.appConfig.getPages().get(this.pageId));
      localObject2 = this.thisPage.getTargetURL();
      localObject1 = localObject2;
      if (localObject2 != null)
      {
        localObject1 = localObject2;
        if (!((String)localObject2).equalsIgnoreCase("")) {
          localObject1 = DynamicHTML.replaceMBFXContextinURL((String)localObject2);
        }
      }
      localObject2 = (ImageView)this.mView.findViewById(2131099864);
      localObject3 = App.getDrawableResource(this.imgFileName);
      if (localObject3 != null) {
        ((ImageView)localObject2).setImageDrawable((Drawable)localObject3);
      }
      this.ll = ((LinearLayout)this.mView.findViewById(2131099863));
      StyleUtil.setBackground(this.ll, this.style);
      localObject3 = this.theFields.iterator();
      for (;;)
      {
        if (!((Iterator)localObject3).hasNext()) {
          break label2225;
        }
        localObject4 = (Field)((Iterator)localObject3).next();
        localObject2 = DynamicHTML.getJSONforPath(this.jsonObject, ((Field)localObject4).getfJsonSourcePath());
        if (!((Field)localObject4).fieldType.equalsIgnoreCase("date")) {
          break label563;
        }
        localPickerView = new PickerView(getActivity(), (Field)localObject4, 0);
        localPickerView.field = ((Field)localObject4);
        localObject5 = localPickerView.ev;
        if ((localObject2 == null) || (!localObject2.getClass().equals(String.class))) {
          break;
        }
        localObject2 = (String)localObject2;
        ((EditText)localObject5).setText((CharSequence)localObject2);
        StyleUtil.setTextColor(localPickerView.tv, this.style);
        localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
        localPickerView.btn.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            paramAnonymousView = new DatePickerDialog(FeedbackFragment.this.getActivity(), localPickerView.mDateSetListener, localPickerView.mYear, localPickerView.mMonth, localPickerView.mDay);
            paramAnonymousView.setOwnerActivity(FeedbackFragment.this.getActivity());
            paramAnonymousView.show();
          }
        });
        this.ll.addView(localPickerView);
      }
    }
    catch (JSONException localJSONException)
    {
      Object localObject4;
      for (;;)
      {
        final PickerView localPickerView;
        Object localObject5;
        Log.e("FeedbackActivity", "Extract json from EXTRA: " + localJSONException);
        continue;
        localObject2 = "";
        continue;
        label563:
        if (((Field)localObject4).fieldType.equalsIgnoreCase("time"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 1);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class))) {}
          for (localObject2 = (String)localObject2;; localObject2 = "")
          {
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            localPickerView.btn.setOnClickListener(new View.OnClickListener()
            {
              public void onClick(View paramAnonymousView)
              {
                paramAnonymousView = new TimePickerDialog(FeedbackFragment.this.getActivity(), localPickerView.mTimeSetListener, localPickerView.mHour, localPickerView.mMinute, DateFormat.is24HourFormat(FeedbackFragment.this.getActivity()));
                paramAnonymousView.setOwnerActivity(FeedbackFragment.this.getActivity());
                paramAnonymousView.show();
              }
            });
            this.ll.addView(localPickerView);
            break;
          }
        }
        if (((Field)localObject4).fieldType.equalsIgnoreCase("location"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 2);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class)))
          {
            localObject2 = (String)localObject2;
            label770:
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            if ((this.defaultLatitude == 1000.0D) || (this.defaultLongitude == 1000.0D)) {
              break label911;
            }
            this.mCurrentLocation.setLatitude(this.defaultLatitude);
            this.mCurrentLocation.setLongitude(this.defaultLongitude);
            setLocationFromInput(localPickerView.ev, this.mCurrentLocation);
          }
          for (;;)
          {
            if (!this.isShowLocationPicker) {
              localPickerView.btn.setVisibility(8);
            }
            localPickerView.btn.setOnClickListener(new View.OnClickListener()
            {
              public void onClick(View paramAnonymousView)
              {
                FeedbackFragment.access$002(FeedbackFragment.this, localPickerView);
                if ((FeedbackFragment.this.mLocationManager != null) && (FeedbackFragment.this.shouldUseCurrentLocation)) {
                  FeedbackFragment.this.mLocationManager.stopUpdatingLocation();
                }
                FeedbackFragment.access$202(FeedbackFragment.this, false);
                paramAnonymousView = new Intent(FeedbackFragment.this.getActivity(), LocationDetectorActivity.class);
                paramAnonymousView.setAction("com.qbiki.modules.ACTION_PICK_LOCATION");
                if ((FeedbackFragment.this.mCurrentLocation.getLatitude() != 0.0D) && (FeedbackFragment.this.mCurrentLocation.getLongitude() != 0.0D))
                {
                  paramAnonymousView.putExtra("latitude", FeedbackFragment.this.mCurrentLocation.getLatitude());
                  paramAnonymousView.putExtra("longitude", FeedbackFragment.this.mCurrentLocation.getLongitude());
                }
                FeedbackFragment.this.startActivityForResult(paramAnonymousView, 1300);
              }
            });
            this.ll.addView(localPickerView);
            break;
            localObject2 = "";
            break label770;
            label911:
            this.shouldUseCurrentLocation = true;
            startGettingLocation(localPickerView.ev);
          }
        }
        if (((Field)localObject4).fieldType.equalsIgnoreCase("text"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 5);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class))) {}
          for (localObject2 = (String)localObject2;; localObject2 = "")
          {
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            this.ll.addView(localPickerView);
            break;
          }
        }
        if (((Field)localObject4).fieldType.equalsIgnoreCase("multilinetext"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 11);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class))) {}
          for (localObject2 = (String)localObject2;; localObject2 = "")
          {
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            this.ll.addView(localPickerView);
            break;
          }
        }
        if (((Field)localObject4).fieldType.equalsIgnoreCase("label"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 10);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class))) {}
          for (localObject2 = (String)localObject2;; localObject2 = "")
          {
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            this.ll.addView(localPickerView);
            break;
          }
        }
        if (((Field)localObject4).fieldType.equalsIgnoreCase("email"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 6);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class))) {}
          for (localObject2 = (String)localObject2;; localObject2 = "")
          {
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            this.ll.addView(localPickerView);
            break;
          }
        }
        if (((Field)localObject4).fieldType.equalsIgnoreCase("image"))
        {
          localObject2 = new PickerView(getActivity(), (Field)localObject4, 3);
          ((PickerView)localObject2).field = ((Field)localObject4);
          StyleUtil.setTextColor(((PickerView)localObject2).tv, this.style);
          ((PickerView)localObject2).fTargetURL = DynamicHTML.replaceMBFXContextinURL(((Field)localObject4).fTargetURL);
          ((PickerView)localObject2).btn.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              FeedbackFragment.access$002(FeedbackFragment.this, this.val$imagePV);
              FeedbackFragment.this.startActivityForResult(new Intent("android.intent.action.PICK", MediaStore.Images.Media.EXTERNAL_CONTENT_URI), 1301);
            }
          });
          this.ll.addView((View)localObject2);
        }
        else if (((Field)localObject4).fieldType.equalsIgnoreCase("camera"))
        {
          localObject2 = new PickerView(getActivity(), (Field)localObject4, 4);
          ((PickerView)localObject2).field = ((Field)localObject4);
          ((PickerView)localObject2).fTargetURL = DynamicHTML.replaceMBFXContextinURL(((Field)localObject4).fTargetURL);
          StyleUtil.setTextColor(((PickerView)localObject2).tv, this.style);
          ((PickerView)localObject2).btn.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              try
              {
                FeedbackFragment.access$002(FeedbackFragment.this, this.val$cameraPV);
                paramAnonymousView = new Intent("android.media.action.IMAGE_CAPTURE");
                paramAnonymousView.putExtra("output", Uri.fromFile(new File(Environment.getExternalStorageDirectory(), this.val$cameraPV.field.fieldId + ".jpg")));
                FeedbackFragment.this.startActivityForResult(paramAnonymousView, 1302);
                return;
              }
              catch (ActivityNotFoundException paramAnonymousView)
              {
                DialogUtil.showAlert(FeedbackFragment.this.getActivity(), 2131361916, 2131361936);
              }
            }
          });
          this.ll.addView((View)localObject2);
        }
        else if (((Field)localObject4).fieldType.equalsIgnoreCase("signature"))
        {
          localObject2 = new PickerView(getActivity(), (Field)localObject4, 9);
          ((PickerView)localObject2).field = ((Field)localObject4);
          StyleUtil.setTextColor(((PickerView)localObject2).tv, this.style);
          ((PickerView)localObject2).fTargetURL = DynamicHTML.replaceMBFXContextinURL(((Field)localObject4).fTargetURL);
          ((PickerView)localObject2).btn.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              FeedbackFragment.access$002(FeedbackFragment.this, this.val$imagePV);
              paramAnonymousView = new Intent(FeedbackFragment.this.getActivity(), DrawSurfaceActivity.class);
              paramAnonymousView.putExtra("surfWidth", this.val$imagePV.imgView.getWidth());
              paramAnonymousView.putExtra("surfHeight", this.val$imagePV.imgView.getHeight());
              FeedbackFragment.this.startActivityForResult(paramAnonymousView, 1303);
            }
          });
          this.ll.addView((View)localObject2);
        }
        else if (((Field)localObject4).fieldType.equalsIgnoreCase("list"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 7);
          localPickerView.field = ((Field)localObject4);
          StyleUtil.setTextColor(localPickerView.tv, this.style);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class)))
          {
            localObject2 = (String)localObject2;
            label1767:
            ((EditText)localObject5).setText((CharSequence)localObject2);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            localPickerView.btn.setOnClickListener(new View.OnClickListener()
            {
              public void onClick(View paramAnonymousView)
              {
                FeedbackFragment.access$002(FeedbackFragment.this, localPickerView);
                paramAnonymousView = this.val$f.getListItems();
                FeedbackFragment.access$402(FeedbackFragment.this, (CharSequence[])paramAnonymousView.toArray(new CharSequence[paramAnonymousView.size()]));
                paramAnonymousView = new AlertDialog.Builder(FeedbackFragment.this.getActivity());
                paramAnonymousView.setTitle("Choose from list");
                paramAnonymousView.setItems(FeedbackFragment.this.listItems, new DialogInterface.OnClickListener()
                {
                  public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
                  {
                    FeedbackFragment.this.targetPV.ev.setText(FeedbackFragment.this.listItems[paramAnonymous2Int]);
                    paramAnonymous2DialogInterface = FeedbackFragment.this.targetPV.field.referenceFieldId;
                    int i;
                    if ((paramAnonymous2DialogInterface != null) && (paramAnonymous2DialogInterface.length() > 0)) {
                      i = 0;
                    }
                    for (;;)
                    {
                      if (i < FeedbackFragment.this.theFields.size())
                      {
                        Field localField = (Field)FeedbackFragment.this.theFields.get(i);
                        if (localField.fieldId.equalsIgnoreCase(paramAnonymous2DialogInterface)) {
                          localField.idListItem = ((String)FeedbackFragment.this.listItems[paramAnonymous2Int]);
                        }
                      }
                      else
                      {
                        return;
                      }
                      i += 1;
                    }
                  }
                });
                paramAnonymousView.create().show();
              }
            });
            if ((localPickerView.field.referenceFieldId == null) || (localPickerView.field.referenceFieldId.length() <= 0)) {
              break label2009;
            }
            localObject2 = localPickerView.field.referenceFieldId;
            if ((localObject2 != null) && (((String)localObject2).length() > 0)) {
              i = 0;
            }
          }
          for (;;)
          {
            if (i < this.theFields.size())
            {
              localObject5 = (Field)this.theFields.get(i);
              if (((Field)localObject5).fieldId.equalsIgnoreCase((String)localObject2)) {
                ((Field)localObject5).idListItem = ((String)((Field)localObject4).getListItems().get(0));
              }
            }
            else
            {
              localObject2 = new LinearLayout(getActivity());
              ((LinearLayout)localObject2).setLayoutParams(new LinearLayout.LayoutParams(-1, -1));
              ((LinearLayout)localObject2).setBackgroundColor(Color.rgb(72, 72, 72));
              ((LinearLayout)localObject2).setGravity(17);
              ((LinearLayout)localObject2).setOrientation(1);
              ((LinearLayout)localObject2).setId(3687134);
              ((LinearLayout)localObject2).addView(localPickerView);
              this.subLinLayout.add(localObject2);
              break;
              localObject2 = "";
              break label1767;
            }
            i += 1;
          }
          label2009:
          this.ll.addView(localPickerView);
        }
        else if (((Field)localObject4).fieldType.equalsIgnoreCase("multilist"))
        {
          localPickerView = new PickerView(getActivity(), (Field)localObject4, 8);
          localPickerView.field = ((Field)localObject4);
          localObject5 = localPickerView.ev;
          if ((localObject2 != null) && (localObject2.getClass().equals(String.class))) {}
          for (localObject2 = (String)localObject2;; localObject2 = "")
          {
            ((EditText)localObject5).setText((CharSequence)localObject2);
            StyleUtil.setTextColor(localPickerView.tv, this.style);
            localPickerView.fTargetParam = ((Field)localObject4).fTargetParam;
            localPickerView.btn.setOnClickListener(new View.OnClickListener()
            {
              public void onClick(View paramAnonymousView)
              {
                FeedbackFragment.access$002(FeedbackFragment.this, localPickerView);
                paramAnonymousView = this.val$f.idListItem;
                Map localMap = this.val$f.getMultiListItems();
                if (paramAnonymousView != null) {}
                for (paramAnonymousView = (List)localMap.get(paramAnonymousView);; paramAnonymousView = (List)localMap.get(localMap.keySet().toArray()[0]))
                {
                  FeedbackFragment.access$602(FeedbackFragment.this, new SparseBooleanArray());
                  if (paramAnonymousView == null) {
                    break;
                  }
                  FeedbackFragment.access$402(FeedbackFragment.this, (CharSequence[])paramAnonymousView.toArray(new CharSequence[paramAnonymousView.size()]));
                  int i = 0;
                  while (i < paramAnonymousView.size())
                  {
                    FeedbackFragment.this.checkedMultiList.put(i, false);
                    i += 1;
                  }
                }
                FeedbackFragment.access$402(FeedbackFragment.this, null);
                paramAnonymousView = new AlertDialog.Builder(FeedbackFragment.this.getActivity());
                paramAnonymousView.setTitle("Check from list");
                paramAnonymousView.setMultiChoiceItems(FeedbackFragment.this.listItems, null, new DialogInterface.OnMultiChoiceClickListener()
                {
                  public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int, boolean paramAnonymous2Boolean)
                  {
                    FeedbackFragment.this.checkedMultiList.put(paramAnonymous2Int, paramAnonymous2Boolean);
                  }
                });
                paramAnonymousView.setPositiveButton("Done", new DialogInterface.OnClickListener()
                {
                  public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
                  {
                    paramAnonymous2DialogInterface = "";
                    paramAnonymous2Int = 0;
                    if (paramAnonymous2Int < FeedbackFragment.this.checkedMultiList.size())
                    {
                      Object localObject = paramAnonymous2DialogInterface;
                      if (FeedbackFragment.this.checkedMultiList.get(paramAnonymous2Int))
                      {
                        localObject = new StringBuilder().append(paramAnonymous2DialogInterface);
                        if (paramAnonymous2DialogInterface.length() != 0) {
                          break label96;
                        }
                      }
                      label96:
                      for (paramAnonymous2DialogInterface = "";; paramAnonymous2DialogInterface = ",")
                      {
                        localObject = paramAnonymous2DialogInterface + FeedbackFragment.this.listItems[paramAnonymous2Int];
                        paramAnonymous2Int += 1;
                        paramAnonymous2DialogInterface = (DialogInterface)localObject;
                        break;
                      }
                    }
                    FeedbackFragment.this.targetPV.ev.setText(paramAnonymous2DialogInterface);
                  }
                });
                paramAnonymousView.create().show();
              }
            });
            if ((this.subLinLayout.size() <= 0) || (((Field)localObject4).idListItem == null)) {
              break label2213;
            }
            localObject2 = (LinearLayout)this.subLinLayout.get(this.subLinLayout.size() - 1);
            ((LinearLayout)localObject2).addView(localPickerView);
            this.ll.addView((View)localObject2);
            break;
          }
          label2213:
          this.ll.addView(localPickerView);
        }
      }
      label2225:
      int i = 0;
      while (i < this.ll.getChildCount()) {
        if ((!this.ll.getChildAt(i).getClass().equals(PickerView.class)) && (!this.ll.getChildAt(i).getClass().equals(LinearLayout.class)))
        {
          i += 1;
        }
        else
        {
          localObject2 = new ArrayList();
          label2367:
          int j;
          if (this.ll.getChildAt(i).getId() == 3687134)
          {
            localObject3 = (LinearLayout)this.ll.getChildAt(i);
            if (((LinearLayout)localObject3).getChildCount() >= 2)
            {
              ((List)localObject2).add((LinearLayout)((LinearLayout)localObject3).getChildAt(0));
              ((List)localObject2).add((LinearLayout)((LinearLayout)localObject3).getChildAt(1));
            }
            j = 0;
            label2369:
            if (j < ((List)localObject2).size())
            {
              localObject3 = (LinearLayout)((List)localObject2).get(j);
              if (localObject3.getClass().equals(PickerView.class))
              {
                localObject3 = (PickerView)localObject3;
                if (((PickerView)localObject3).type != 2) {
                  break label2492;
                }
                this.nearLatitude = this.mCurrentLocation.getLatitude();
                this.nearLongitude = this.mCurrentLocation.getLongitude();
                ((PickerView)localObject3).latitude = this.nearLatitude;
                ((PickerView)localObject3).longitude = this.nearLongitude;
              }
            }
          }
          for (;;)
          {
            j += 1;
            break label2369;
            break;
            ((List)localObject2).add((LinearLayout)this.ll.getChildAt(i));
            break label2367;
            label2492:
            if ((((PickerView)localObject3).type == 5) || (((PickerView)localObject3).type == 11))
            {
              this.theName = ((PickerView)localObject3).ev.getText().toString();
            }
            else if (((PickerView)localObject3).type == 7)
            {
              localObject4 = ((PickerView)localObject3).field.getListItems();
              if ((((PickerView)localObject3).ev.getText().toString().equalsIgnoreCase("")) && (localObject4 != null) && (((List)localObject4).size() > 0)) {
                ((PickerView)localObject3).ev.setText((CharSequence)((List)localObject4).get(0));
              }
            }
            else if (((PickerView)localObject3).type != 8) {}
          }
        }
      }
      final LinearLayout localLinearLayout;
      if (this.isOnlyEnterData)
      {
        localLinearLayout = (LinearLayout)getActivity().getLayoutInflater().inflate(2130903125, this.ll, false);
        localObject2 = (Button)localLinearLayout.findViewById(2131099900);
        ((Button)localObject2).setText(this.submitbuttontext);
        ((Button)localObject2).setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            ArrayList localArrayList1 = new ArrayList();
            ArrayList localArrayList2 = new ArrayList();
            int i = 0;
            if (i < FeedbackFragment.this.ll.getChildCount())
            {
              PickerView localPickerView;
              if (FeedbackFragment.this.ll.getChildAt(i).getClass().equals(PickerView.class))
              {
                localPickerView = (PickerView)FeedbackFragment.this.ll.getChildAt(i);
                String str = localPickerView.field.fieldLabel;
                paramAnonymousView = "";
                if ((localPickerView.type != 3) && (localPickerView.type != 4) && (localPickerView.type != 9)) {
                  break label159;
                }
                if (localPickerView.imageUri != null) {
                  paramAnonymousView = localPickerView.imageUri.toString();
                }
                label129:
                if (str == null) {
                  break label182;
                }
                localArrayList1.add(str);
                label141:
                if (paramAnonymousView == null) {
                  break label192;
                }
                localArrayList2.add(paramAnonymousView);
              }
              for (;;)
              {
                i += 1;
                break;
                label159:
                if (localPickerView.ev == null) {
                  break label129;
                }
                paramAnonymousView = localPickerView.ev.getText().toString();
                break label129;
                label182:
                localArrayList1.add("");
                break label141;
                label192:
                localArrayList2.add("");
              }
            }
            paramAnonymousView = new Intent();
            paramAnonymousView.putStringArrayListExtra("content_data_name", localArrayList1);
            paramAnonymousView.putStringArrayListExtra("content_data_value", localArrayList2);
            FeedbackFragment.this.getActivity().setResult(-1, paramAnonymousView);
            App.closePage(FeedbackFragment.this);
          }
        });
        this.ll.addView(localLinearLayout);
        return;
      }
      Object localObject2 = (LinearLayout)getActivity().getLayoutInflater().inflate(2130903125, this.ll, false);
      Object localObject3 = (Button)((LinearLayout)localObject2).findViewById(2131099900);
      ((Button)localObject3).setText(this.submitbuttontext);
      ((Button)localObject3).setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if (FeedbackFragment.this.thisPage.getType().equalsIgnoreCase("locationfinder")) {
            if (FeedbackFragment.this.thisPage.locationsArray == null) {
              if ((FeedbackFragment.this.thisPage.getSourcexml() != null) && (!FeedbackFragment.this.thisPage.getSourcexml().equalsIgnoreCase("")))
              {
                paramAnonymousView = new FeedbackFragment.1ParseLocationsAsyncTask(FeedbackFragment.this, FeedbackFragment.this.getActivity());
                paramAnonymousView.setAsyncTaskListener(new AsyncTaskListener()
                {
                  public void asyncTaskFinished(Object paramAnonymous2Object)
                  {
                    paramAnonymous2Object = (String)paramAnonymous2Object;
                    if (paramAnonymous2Object != null)
                    {
                      DialogUtil.showAlert(FeedbackFragment.this.getActivity(), "Error", paramAnonymous2Object, new DialogInterface.OnClickListener()
                      {
                        public void onClick(DialogInterface paramAnonymous3DialogInterface, int paramAnonymous3Int)
                        {
                          paramAnonymous3DialogInterface.dismiss();
                          App.closePage(FeedbackFragment.this);
                        }
                      });
                      return;
                    }
                    FeedbackFragment.this.onParseLocationsTaskFinished();
                  }
                });
                paramAnonymousView.execute(new String[0]);
              }
            }
          }
          do
          {
            return;
            paramAnonymousView = new AlertDialog.Builder(FeedbackFragment.this.getActivity());
            paramAnonymousView.setMessage("Sorry, unable to find locations source.").setCancelable(true).setPositiveButton("OK", new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int) {}
            });
            paramAnonymousView.create().show();
            return;
            FeedbackFragment.this.onParseLocationsTaskFinished();
            return;
            if (FeedbackFragment.this.thisPage.getType().equalsIgnoreCase("feedback"))
            {
              FeedbackFragment.this.submitFeedback();
              return;
            }
          } while (!FeedbackFragment.this.thisPage.getType().equalsIgnoreCase("edituserprofile"));
          FeedbackFragment.this.sendEditProfileForm(localLinearLayout);
        }
      });
      this.ll.addView((View)localObject2);
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    if (paramInt1 == 1301) {
      if (paramInt2 == -1)
      {
        paramIntent = paramIntent.getData();
        localObject = decodeBitmapFromUri(paramIntent, 1801);
        this.targetPV.imgView.setImageBitmap((Bitmap)localObject);
        this.targetPV.imageUri = paramIntent;
      }
    }
    do
    {
      do
      {
        do
        {
          do
          {
            return;
            if (paramInt1 != 1302) {
              break;
            }
          } while (paramInt2 != -1);
          paramIntent = Uri.fromFile(new File(Environment.getExternalStorageDirectory(), this.targetPV.field.fieldId + ".jpg"));
          localObject = decodeBitmapFromUri(paramIntent, 1802);
          this.targetPV.imgView.setImageBitmap((Bitmap)localObject);
          this.targetPV.imageUri = paramIntent;
          return;
          if (paramInt1 != 1300) {
            break;
          }
        } while (paramInt2 != -1);
        localObject = paramIntent.getExtras().getString("address");
        this.targetPV.ev.setText((CharSequence)localObject);
        this.targetPV.latitude = paramIntent.getExtras().getDouble("latitude");
        this.targetPV.longitude = paramIntent.getExtras().getDouble("longitude");
        this.mCurrentLocation.setLatitude(this.targetPV.latitude);
        this.mCurrentLocation.setLongitude(this.targetPV.longitude);
        this.mCurrentLocation.setProvider((String)localObject);
        return;
      } while ((paramInt1 != 1303) || (paramInt2 != -1));
      localObject = paramIntent.getExtras().getString("imagePath");
      paramIntent = DataUtil.copyToSDCard((String)localObject, "SignatureStamp", getActivity());
    } while (paramIntent == null);
    Object localObject = BitmapFactory.decodeFile((String)localObject);
    this.targetPV.imgView.setImageBitmap((Bitmap)localObject);
    this.targetPV.imageUri = Uri.fromFile(new File(paramIntent));
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903110, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation))
    {
      if (!paramBoolean) {
        break label31;
      }
      this.mLocationManager.stopUpdatingLocation();
    }
    for (;;)
    {
      super.onHiddenChanged(paramBoolean);
      return;
      label31:
      this.mLocationManager.startUpdatingLocation();
    }
  }
  
  public void onPause()
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation)) {
      this.mLocationManager.stopUpdatingLocation();
    }
    super.onPause();
  }
  
  public void onResponseReceived(HttpResponse paramHttpResponse)
  {
    dismissProgressDialog();
    paramHttpResponse = Requester.getResponseBody(paramHttpResponse);
    if (paramHttpResponse.equalsIgnoreCase("ok"))
    {
      if ((this.slideToNextPage != null) && (this.slideToNextPage.trim().length() != 0))
      {
        App.showPageWithId(this.slideToNextPage, getActivity());
        return;
      }
      DialogUtil.showAlert(getActivity(), null, this.confirmationmessage);
      return;
    }
    DialogUtil.showAlert(getActivity(), "ERROR", paramHttpResponse);
  }
  
  public void onResponseTimeout()
  {
    dismissProgressDialog();
    DialogUtil.showAlert(getActivity(), "ERROR", "Server is NOT responding.");
  }
  
  public void onResume()
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation) && (!isHidden())) {
      this.mLocationManager.startUpdatingLocation();
    }
    super.onResume();
  }
}
