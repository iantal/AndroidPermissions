package com.qbiki.widget;

import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.TimePickerDialog;
import android.app.TimePickerDialog.OnTimeSetListener;
import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.BaseSavedState;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.LinearLayout;
import android.widget.TimePicker;
import java.util.Calendar;
import java.util.Date;

public class DateTimePicker
  extends LinearLayout
{
  public static final int MODE_DATE = 1;
  public static final int MODE_DATE_TIME = 0;
  public static final int MODE_TIME = 2;
  private Calendar mCalendar;
  private Context mContext;
  private Button mDateButton;
  private DatePickerDialog mDatePickerDialog;
  private Object mDateSetListener;
  private int mMode = 0;
  private Button mTimeButton;
  private TimePickerDialog mTimePickerDialog;
  private Object mTimeSetListener;
  
  public DateTimePicker(Context paramContext)
  {
    super(paramContext);
    init(paramContext);
  }
  
  public DateTimePicker(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init(paramContext);
  }
  
  private void init(Context paramContext)
  {
    this.mContext = paramContext;
    paramContext = LayoutInflater.from(paramContext).inflate(2130903088, this, true);
    this.mDateButton = ((Button)paramContext.findViewById(2131099830));
    this.mTimeButton = ((Button)paramContext.findViewById(2131099831));
    setDate(new Date());
    if (!isInEditMode())
    {
      this.mDateSetListener = new DatePickerDialog.OnDateSetListener()
      {
        public void onDateSet(DatePicker paramAnonymousDatePicker, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
        {
          DateTimePicker.this.mCalendar.set(1, paramAnonymousInt1);
          DateTimePicker.this.mCalendar.set(2, paramAnonymousInt2);
          DateTimePicker.this.mCalendar.set(5, paramAnonymousInt3);
          DateTimePicker.this.updateLabels();
        }
      };
      this.mDatePickerDialog = new DatePickerDialog(this.mContext, (DatePickerDialog.OnDateSetListener)this.mDateSetListener, this.mCalendar.get(1), this.mCalendar.get(2), this.mCalendar.get(5));
      this.mTimeSetListener = new TimePickerDialog.OnTimeSetListener()
      {
        public void onTimeSet(TimePicker paramAnonymousTimePicker, int paramAnonymousInt1, int paramAnonymousInt2)
        {
          DateTimePicker.this.mCalendar.set(11, paramAnonymousInt1);
          DateTimePicker.this.mCalendar.set(12, paramAnonymousInt2);
          DateTimePicker.this.updateLabels();
        }
      };
      this.mTimePickerDialog = new TimePickerDialog(this.mContext, (TimePickerDialog.OnTimeSetListener)this.mTimeSetListener, this.mCalendar.get(11), this.mCalendar.get(12), false);
      this.mDateButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          DateTimePicker.this.mDatePickerDialog.updateDate(DateTimePicker.this.mCalendar.get(1), DateTimePicker.this.mCalendar.get(2), DateTimePicker.this.mCalendar.get(5));
          DateTimePicker.this.mDatePickerDialog.show();
        }
      });
      this.mTimeButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          DateTimePicker.this.mTimePickerDialog.updateTime(DateTimePicker.this.mCalendar.get(11), DateTimePicker.this.mCalendar.get(12));
          DateTimePicker.this.mTimePickerDialog.show();
        }
      });
    }
  }
  
  public Calendar getCalendar()
  {
    return this.mCalendar;
  }
  
  public Date getDate()
  {
    return this.mCalendar.getTime();
  }
  
  public int getMode()
  {
    return this.mMode;
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    setMode(paramParcelable.mode);
    setDate(new Date(paramParcelable.date));
  }
  
  public Parcelable onSaveInstanceState()
  {
    SavedState localSavedState = new SavedState(super.onSaveInstanceState());
    localSavedState.mode = this.mMode;
    localSavedState.date = this.mCalendar.getTimeInMillis();
    return localSavedState;
  }
  
  public void setCalendar(Calendar paramCalendar)
  {
    this.mCalendar = paramCalendar;
    updateLabels();
  }
  
  public void setDate(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    setCalendar(localCalendar);
  }
  
  public void setMode(int paramInt)
  {
    this.mMode = paramInt;
    this.mDateButton.setVisibility(0);
    this.mTimeButton.setVisibility(0);
    switch (this.mMode)
    {
    default: 
      return;
    case 1: 
      this.mTimeButton.setVisibility(8);
      return;
    }
    this.mDateButton.setVisibility(8);
  }
  
  public void updateLabels()
  {
    Date localDate = this.mCalendar.getTime();
    this.mDateButton.setText(android.text.format.DateFormat.format("EEE, ", this.mCalendar) + android.text.format.DateFormat.getMediumDateFormat(this.mContext).format(localDate));
    this.mTimeButton.setText(android.text.format.DateFormat.getTimeFormat(this.mContext).format(localDate));
  }
  
  static class SavedState
    extends View.BaseSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator()
    {
      public DateTimePicker.SavedState createFromParcel(Parcel paramAnonymousParcel)
      {
        return new DateTimePicker.SavedState(paramAnonymousParcel, null);
      }
      
      public DateTimePicker.SavedState[] newArray(int paramAnonymousInt)
      {
        return new DateTimePicker.SavedState[paramAnonymousInt];
      }
    };
    long date;
    int mode;
    
    private SavedState(Parcel paramParcel)
    {
      super();
      this.mode = paramParcel.readInt();
      this.date = paramParcel.readLong();
    }
    
    SavedState(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeInt(this.mode);
      paramParcel.writeLong(this.date);
    }
  }
}
