package com.qbiki.seattleclouds.asynctasks;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.util.Log;
import android.util.Xml;
import android.view.Window;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DialogUtil;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.io.FileUtils;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class DownloadExternalResourcesAsyncTask
  extends AsyncTask<String, Integer, String>
{
  public static final String EXTERNAL_RESOURCES_LIST_FILE = "sc_external_storage_resources.xml";
  private static final String NO_EXTERNAL_STORAGE_RESULT = "NO_EXTERNAL_STORAGE_RESULT";
  private static final String TAG = DownloadExternalResourcesAsyncTask.class.getSimpleName();
  private final Activity activity;
  private ProgressDialog dialog;
  private boolean isCancelled = false;
  private AsyncTaskListener listener = null;
  
  public DownloadExternalResourcesAsyncTask(Activity paramActivity)
  {
    this.activity = paramActivity;
  }
  
  private List<String> getFileList()
  {
    ArrayList localArrayList = new ArrayList();
    XmlPullParser localXmlPullParser = Xml.newPullParser();
    for (;;)
    {
      try
      {
        localXmlPullParser.setInput(App.getResourceStream("sc_external_storage_resources.xml"), null);
        i = localXmlPullParser.getEventType();
      }
      catch (XmlPullParserException localXmlPullParserException)
      {
        String str;
        Log.e(TAG, "Error parsing external resource list file " + localXmlPullParserException.toString(), localXmlPullParserException);
        return localArrayList;
      }
      catch (IOException localIOException)
      {
        Log.e(TAG, "Error parsing external resource list file " + localIOException.toString(), localIOException);
        return localArrayList;
      }
      int i = localXmlPullParser.next();
      if (localXmlPullParser.getName().equalsIgnoreCase("file"))
      {
        str = localXmlPullParser.getAttributeValue(null, "source");
        if ((str != null) && (str.length() != 0))
        {
          localArrayList.add(str);
          continue;
          if ((i != 1) && (0 == 0)) {
            switch (i)
            {
            }
          }
        }
      }
    }
  }
  
  protected String doInBackground(String... paramVarArgs)
  {
    paramVarArgs = getFileList();
    if (paramVarArgs.size() == 0)
    {
      Log.w(TAG, "External resource file list is empty, nothing to download");
      return "ok";
    }
    if (!"mounted".equals(Environment.getExternalStorageState()))
    {
      Log.w(TAG, "External resource file list is empty, nothing to download");
      return "NO_EXTERNAL_STORAGE_RESULT";
    }
    String str1 = App.getAppExternalResourcesPath();
    Object localObject = new File(str1);
    if (!((File)localObject).exists()) {
      ((File)localObject).mkdirs();
    }
    str1 = str1 + File.separator;
    this.dialog.setMax(paramVarArgs.size());
    int i = 0;
    localObject = paramVarArgs.iterator();
    String str2;
    if (((Iterator)localObject).hasNext())
    {
      str2 = (String)((Iterator)localObject).next();
      if (!this.isCancelled) {}
    }
    else
    {
      Log.v(TAG, "Downloaded " + i + " out of " + paramVarArgs.size() + " files");
      return "ok";
    }
    File localFile = new File(str1 + Uri.parse(str2).getLastPathSegment());
    if (!localFile.exists()) {
      Log.v(TAG, "Downloading file: " + str2);
    }
    for (;;)
    {
      try
      {
        FileUtils.copyURLToFile(new URL(str2), localFile, 3000, 3000);
        i += 1;
        publishProgress(new Integer[] { Integer.valueOf(i) });
      }
      catch (Exception localException)
      {
        Log.e(TAG, "Error downloading file: " + str2, localException);
        continue;
      }
      Log.v(TAG, "File already exists: " + str2);
    }
  }
  
  protected void onCancelled()
  {
    super.onCancelled();
    this.dialog.dismiss();
    if (this.listener != null) {
      this.listener.asyncTaskFinished(new Boolean(true));
    }
  }
  
  protected void onPostExecute(String paramString)
  {
    super.onPostExecute(paramString);
    this.dialog.dismiss();
    if (paramString.equals("NO_EXTERNAL_STORAGE_RESULT")) {
      DialogUtil.showAlert(this.activity, 2131361915, 2131361937, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          if (DownloadExternalResourcesAsyncTask.this.listener != null) {
            DownloadExternalResourcesAsyncTask.this.listener.asyncTaskFinished(null);
          }
        }
      });
    }
    while (this.listener == null) {
      return;
    }
    this.listener.asyncTaskFinished(null);
  }
  
  protected void onPreExecute()
  {
    this.dialog = new ProgressDialog(this.activity);
    this.dialog.setProgressStyle(1);
    this.dialog.setMessage("Downloading resources.\nPlease wait...");
    this.dialog.setCancelable(true);
    this.dialog.getWindow().clearFlags(2);
    this.dialog.show();
    this.dialog.setOnCancelListener(new DialogInterface.OnCancelListener()
    {
      public void onCancel(DialogInterface paramAnonymousDialogInterface)
      {
        DownloadExternalResourcesAsyncTask.access$002(DownloadExternalResourcesAsyncTask.this, true);
      }
    });
    super.onPreExecute();
  }
  
  protected void onProgressUpdate(Integer... paramVarArgs)
  {
    super.onProgressUpdate(paramVarArgs);
    this.dialog.setProgress(paramVarArgs[0].intValue());
  }
  
  public void setAsyncTaskListener(AsyncTaskListener paramAsyncTaskListener)
  {
    this.listener = paramAsyncTaskListener;
  }
}
