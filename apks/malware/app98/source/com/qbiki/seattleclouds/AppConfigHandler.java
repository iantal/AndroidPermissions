package com.qbiki.seattleclouds;

import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import com.qbiki.feedback.Field;
import com.qbiki.feedback.LocationModel;
import com.qbiki.modules.magazinestore.MagazineInfo;
import com.qbiki.modules.order.OrderConfigInfo;
import com.qbiki.modules.sharepoint.SPServerCredentials;
import com.qbiki.seattleclouds.mosaic.ImgMetadata;
import com.qbiki.util.CollectionUtil;
import com.qbiki.util.ColorUtil;
import com.qbiki.util.DataUtil;
import com.qbiki.util.StringUtil;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class AppConfigHandler
  extends DefaultHandler
{
  public static final String APP_CONFIG_FILE_NAME = "app.xml";
  private static final String TAG = "AppConfigHandler";
  private String currentFieldId;
  private String currentId;
  private LocationModel currentLocationEl;
  private ImgMetadata currentMosaicImage;
  private StringBuilder mBuilder;
  private AppConfig mConfig;
  private Context mCtx;
  private String mCurrentPageId;
  private int mNavigationItemsNumber = 4;
  private List<String> mParentElements;
  private String mPublisherFacebookAppID = "";
  
  public AppConfigHandler(Context paramContext)
  {
    this.mCtx = paramContext;
    this.mConfig = new AppConfig();
  }
  
  public static HashMap<String, String> convertAttributesToMap(Attributes paramAttributes)
  {
    HashMap localHashMap = new HashMap();
    int i = 0;
    while (i < paramAttributes.getLength())
    {
      localHashMap.put(paramAttributes.getQName(i), paramAttributes.getValue(i));
      i += 1;
    }
    return localHashMap;
  }
  
  private void fixConfigAfterParsing()
  {
    if (this.mConfig.getNavigationType() == 0) {
      this.mConfig.setNavigationType(getLegacyNavigationType());
    }
    if (this.mConfig.getNavigationType() == 3) {
      this.mConfig.setNavigationType(1);
    }
    if (this.mConfig.getNavigationItems().size() != 0) {
      this.mNavigationItemsNumber = this.mConfig.getNavigationItems().size();
    }
    if ((this.mConfig.getNavigationType() == 5) && (this.mNavigationItemsNumber > 5)) {
      this.mNavigationItemsNumber = 5;
    }
    if (this.mNavigationItemsNumber < 2) {
      this.mNavigationItemsNumber = 2;
    }
    if ((this.mConfig.getNavigationType() == 1) || (this.mConfig.getNavigationType() == 4) || (this.mConfig.getNavigationType() == 5))
    {
      int i = this.mConfig.getNavigationItems().size() + 1;
      while (this.mConfig.getNavigationItems().size() < this.mNavigationItemsNumber)
      {
        NavigationItem localNavigationItem = new NavigationItem();
        String str2 = (String)this.mConfig.getProps().get("tab" + i + "text");
        String str1 = str2;
        if (str2 == null) {
          str1 = this.mCtx.getString(2131361900) + " " + i;
        }
        localNavigationItem.setText(str1);
        str1 = (String)this.mConfig.getProps().get("tab" + i + "icon");
        if (str1 != null) {
          localNavigationItem.setIcon(str1);
        }
        this.mConfig.getNavigationItems().add(localNavigationItem);
        i += 1;
      }
      while (this.mConfig.getNavigationItems().size() > this.mNavigationItemsNumber) {
        this.mConfig.getNavigationItems().remove(this.mConfig.getNavigationItems().size() - 1);
      }
    }
    if (this.mConfig.getFacebookAppID().equalsIgnoreCase(""))
    {
      if (!this.mPublisherFacebookAppID.equalsIgnoreCase("")) {
        this.mConfig.setFacebookAppID(this.mPublisherFacebookAppID);
      }
    }
    else {
      return;
    }
    this.mConfig.setFacebookAppID(App.defaultFacebookAppID);
  }
  
  public static int getAdTypeAttribute(Attributes paramAttributes, String paramString, int paramInt)
  {
    paramAttributes = paramAttributes.getValue(paramString);
    if (paramAttributes == null) {}
    do
    {
      return paramInt;
      if (paramAttributes.equalsIgnoreCase("admob")) {
        return 1;
      }
      if (paramAttributes.equalsIgnoreCase("scad")) {
        return 2;
      }
      if (paramAttributes.equalsIgnoreCase("dfp")) {
        return 4;
      }
    } while (!paramAttributes.equalsIgnoreCase("inherited"));
    return 100;
  }
  
  public static String getAttribute(Attributes paramAttributes, String paramString1, String paramString2)
  {
    paramString1 = paramAttributes.getValue(paramString1);
    paramAttributes = paramString1;
    if (paramString1 == null) {
      paramAttributes = paramString2;
    }
    return paramAttributes;
  }
  
  public static boolean getBoolAttribute(Attributes paramAttributes, String paramString, boolean paramBoolean)
  {
    return getBoolValue(paramAttributes.getValue(paramString), paramBoolean);
  }
  
  public static boolean getBoolValue(String paramString, boolean paramBoolean)
  {
    if (paramString == null) {
      return paramBoolean;
    }
    if ((paramString.equalsIgnoreCase("true")) || (paramString.equalsIgnoreCase("yes"))) {}
    for (paramBoolean = true;; paramBoolean = false) {
      return paramBoolean;
    }
  }
  
  public static Integer getColorAttribute(Attributes paramAttributes, String paramString, Integer paramInteger)
  {
    return ColorUtil.getColorValue(paramAttributes.getValue(paramString), paramInteger);
  }
  
  public static int getIntAttribute(Attributes paramAttributes, String paramString, int paramInt)
  {
    try
    {
      int i = Integer.parseInt(paramAttributes.getValue(paramString).trim());
      return i;
    }
    catch (Exception paramAttributes) {}
    return paramInt;
  }
  
  public static int getLegacyNavigationType()
  {
    try
    {
      boolean bool = DataUtil.readString(App.getResourceStream("template.qbiki")).contains("wheel");
      if (bool) {
        return 3;
      }
      return 2;
    }
    catch (IOException localIOException)
    {
      return 1;
    }
    catch (IllegalArgumentException localIllegalArgumentException) {}
    return 1;
  }
  
  private Page getOrCreatePage(String paramString)
  {
    Page localPage2 = (Page)this.mConfig.getPages().get(paramString);
    Page localPage1 = localPage2;
    if (localPage2 == null)
    {
      localPage1 = new Page(paramString);
      this.mConfig.getPages().put(localPage1.getId(), localPage1);
    }
    return localPage1;
  }
  
  public static String getTrimmedAttribute(Attributes paramAttributes, String paramString)
  {
    paramString = paramAttributes.getValue(paramString);
    paramAttributes = paramString;
    if (paramString != null) {
      paramAttributes = paramString.trim();
    }
    return paramAttributes;
  }
  
  /* Error */
  public static void parseAppConfig(Context paramContext)
  {
    // Byte code:
    //   0: new 2	com/qbiki/seattleclouds/AppConfigHandler
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 251	com/qbiki/seattleclouds/AppConfigHandler:<init>	(Landroid/content/Context;)V
    //   8: astore_0
    //   9: ldc 8
    //   11: invokestatic 221	com/qbiki/seattleclouds/App:getResourceStream	(Ljava/lang/String;)Ljava/io/InputStream;
    //   14: astore_1
    //   15: aload_1
    //   16: getstatic 257	android/util/Xml$Encoding:UTF_8	Landroid/util/Xml$Encoding;
    //   19: aload_0
    //   20: invokestatic 263	android/util/Xml:parse	(Ljava/io/InputStream;Landroid/util/Xml$Encoding;Lorg/xml/sax/ContentHandler;)V
    //   23: aload_1
    //   24: ifnull +7 -> 31
    //   27: aload_1
    //   28: invokevirtual 268	java/io/InputStream:close	()V
    //   31: aload_0
    //   32: invokevirtual 272	com/qbiki/seattleclouds/AppConfigHandler:getConfig	()Lcom/qbiki/seattleclouds/AppConfig;
    //   35: putstatic 275	com/qbiki/seattleclouds/App:appConfig	Lcom/qbiki/seattleclouds/AppConfig;
    //   38: return
    //   39: astore_2
    //   40: ldc 11
    //   42: new 102	java/lang/StringBuilder
    //   45: dup
    //   46: invokespecial 103	java/lang/StringBuilder:<init>	()V
    //   49: ldc_w 277
    //   52: invokevirtual 109	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   55: aload_2
    //   56: invokevirtual 280	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   59: invokevirtual 118	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   62: aload_2
    //   63: invokestatic 286	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   66: pop
    //   67: aload_1
    //   68: ifnull -37 -> 31
    //   71: aload_1
    //   72: invokevirtual 268	java/io/InputStream:close	()V
    //   75: goto -44 -> 31
    //   78: astore_1
    //   79: goto -48 -> 31
    //   82: astore_0
    //   83: aload_1
    //   84: ifnull +7 -> 91
    //   87: aload_1
    //   88: invokevirtual 268	java/io/InputStream:close	()V
    //   91: aload_0
    //   92: athrow
    //   93: astore_1
    //   94: goto -63 -> 31
    //   97: astore_1
    //   98: goto -7 -> 91
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	101	0	paramContext	Context
    //   14	58	1	localInputStream	java.io.InputStream
    //   78	10	1	localIOException1	IOException
    //   93	1	1	localIOException2	IOException
    //   97	1	1	localIOException3	IOException
    //   39	24	2	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   15	23	39	java/lang/Exception
    //   71	75	78	java/io/IOException
    //   15	23	82	finally
    //   40	67	82	finally
    //   27	31	93	java/io/IOException
    //   87	91	97	java/io/IOException
  }
  
  public void characters(char[] paramArrayOfChar, int paramInt1, int paramInt2)
    throws SAXException
  {
    super.characters(paramArrayOfChar, paramInt1, paramInt2);
    this.mBuilder.append(paramArrayOfChar, paramInt1, paramInt2);
  }
  
  public void endDocument()
    throws SAXException
  {
    super.endDocument();
    fixConfigAfterParsing();
    this.mConfig.setInitialized(true);
    Log.v("AppConfigHandler", "Ended parsing app config file");
  }
  
  public void endElement(String paramString1, String paramString2, String paramString3)
    throws SAXException
  {
    super.endElement(paramString1, paramString2, paramString3);
    if (paramString2.equalsIgnoreCase("prop"))
    {
      this.mConfig.getProps().put(this.currentId, this.mBuilder.toString().trim());
      paramString3 = null;
      paramString1 = paramString3;
      if (this.mParentElements.size() > 2)
      {
        paramString1 = paramString3;
        if (((String)this.mParentElements.get(1)).equalsIgnoreCase("page")) {
          paramString1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
        }
      }
      if (paramString1 == null) {
        break label615;
      }
      paramString3 = paramString1.getType();
      label114:
      if (paramString1 != null)
      {
        if (!paramString2.equalsIgnoreCase("webpicture")) {
          break label620;
        }
        if (this.currentMosaicImage != null)
        {
          paramString1.mosaicImages.add(this.currentMosaicImage);
          this.currentMosaicImage = null;
        }
      }
    }
    for (;;)
    {
      this.mBuilder.setLength(0);
      if (this.mParentElements.size() > 0) {
        this.mParentElements.remove(this.mParentElements.size() - 1);
      }
      return;
      if ((this.currentMosaicImage != null) && (paramString2.equalsIgnoreCase("title")))
      {
        this.currentMosaicImage.title = this.mBuilder.toString().trim();
        break;
      }
      if ((this.currentMosaicImage != null) && (paramString2.equalsIgnoreCase("file")))
      {
        this.currentMosaicImage.filename = this.mBuilder.toString().trim();
        break;
      }
      if ((this.currentMosaicImage != null) && (paramString2.equalsIgnoreCase("caption")))
      {
        this.currentMosaicImage.caption = this.mBuilder.toString().trim();
        break;
      }
      if (paramString2.equalsIgnoreCase("quizrandomize"))
      {
        this.mConfig.setQuizRandomize(getBoolValue(this.mBuilder.toString(), false));
        break;
      }
      if (paramString2.equalsIgnoreCase("name"))
      {
        this.currentLocationEl.locationName = this.mBuilder.toString();
        break;
      }
      if (paramString2.equalsIgnoreCase("latitude"))
      {
        try
        {
          this.currentLocationEl.latitude = Double.parseDouble(this.mBuilder.toString());
        }
        catch (Exception paramString1)
        {
          Log.e("AppConfigHandler", "endElement: " + paramString1);
        }
        break;
      }
      if (paramString2.equalsIgnoreCase("longitude"))
      {
        try
        {
          this.currentLocationEl.longitude = Double.parseDouble(this.mBuilder.toString());
        }
        catch (Exception paramString1)
        {
          Log.e("AppConfigHandler", "endElement: " + paramString1);
        }
        break;
      }
      if (paramString2.equalsIgnoreCase("imageurl"))
      {
        this.currentLocationEl.locationImage = this.mBuilder.toString();
        break;
      }
      if (paramString2.equalsIgnoreCase("ldescription"))
      {
        this.currentLocationEl.locationDescription = this.mBuilder.toString();
        break;
      }
      if (paramString2.equalsIgnoreCase("ltarget"))
      {
        this.currentLocationEl.locationTarget = this.mBuilder.toString();
        break;
      }
      if ((!paramString2.equalsIgnoreCase("rotationapp")) || (!App.isPreviewer)) {
        break;
      }
      if (this.mBuilder.toString().trim().equalsIgnoreCase("true")) {}
      for (boolean bool = true;; bool = false)
      {
        App.rotationEnabled = bool;
        break;
      }
      label615:
      paramString3 = null;
      break label114;
      label620:
      if (paramString2.equalsIgnoreCase("location"))
      {
        if (paramString1.locationsArray != null) {
          paramString1.locationsArray.add(this.currentLocationEl);
        }
      }
      else if (paramString2.equalsIgnoreCase("songfile"))
      {
        paramString1.setKaraokeSongFile(this.mBuilder.toString().trim());
      }
      else if (paramString2.equalsIgnoreCase("autostart"))
      {
        paramString1.setKaraokeAutoStart(Boolean.parseBoolean(this.mBuilder.toString().trim()));
      }
      else if (paramString2.equalsIgnoreCase("email"))
      {
        paramString1.setEmail(this.mBuilder.toString().trim());
      }
      else if (paramString2.equalsIgnoreCase("image"))
      {
        paramString1.setImageName(this.mBuilder.toString().trim());
      }
      else if ((paramString2.equalsIgnoreCase("res")) && (paramString3.equalsIgnoreCase("memogame")))
      {
        paramString1.addMemoGameResource(this.mBuilder.toString().trim());
      }
      else if ((paramString2.equalsIgnoreCase("appdescription")) && (paramString3.equalsIgnoreCase("appshare")))
      {
        paramString1.setAppDescription(this.mBuilder.toString().trim());
      }
      else if ((paramString2.equalsIgnoreCase("share_link")) && (paramString3.equalsIgnoreCase("appshare")))
      {
        paramString1.setAppShareLink(this.mBuilder.toString().trim());
      }
      else if ((paramString2.equalsIgnoreCase("epubfile")) && (paramString3.equalsIgnoreCase("epubreader")))
      {
        paramString1.setEpubFile(this.mBuilder.toString().trim());
      }
      else if (paramString2.equalsIgnoreCase("recordonopen"))
      {
        paramString1.setRecordOnOpen(Boolean.parseBoolean(this.mBuilder.toString().trim()));
      }
      else if (paramString2.equalsIgnoreCase("pictureonopen"))
      {
        paramString1.setPictureOnOpen(Boolean.parseBoolean(this.mBuilder.toString().trim()));
      }
      else if (paramString2.equalsIgnoreCase("pdffile"))
      {
        paramString1.setPDFFile(this.mBuilder.toString().trim());
      }
      else if (paramString2.equalsIgnoreCase("headerImage"))
      {
        paramString1.setHeaderimage(this.mBuilder.toString().trim());
      }
      else if (paramString2.equalsIgnoreCase("magazine"))
      {
        paramString1 = paramString1.getMagazinesInfo();
        if (paramString1.size() > 0) {
          ((MagazineInfo)paramString1.get(paramString1.size() - 1)).description = this.mBuilder.toString();
        }
      }
    }
  }
  
  public AppConfig getConfig()
  {
    return this.mConfig;
  }
  
  public void startDocument()
    throws SAXException
  {
    Log.v("AppConfigHandler", "Started parsing app config file");
    super.startDocument();
    this.mBuilder = new StringBuilder();
    this.mParentElements = new ArrayList();
  }
  
  public void startElement(String paramString1, String paramString2, String paramString3, Attributes paramAttributes)
    throws SAXException
  {
    super.startElement(paramString1, paramString2, paramString3, paramAttributes);
    if ((paramString2.equalsIgnoreCase("navigation")) && (this.mParentElements.size() == 1))
    {
      paramString1 = this.mConfig.getNavigationSettings();
      paramString1.setBackgroundColor(getColorAttribute(paramAttributes, "backgroundColor", Integer.valueOf(0)).intValue());
      paramString1.setBackgroundImage(paramAttributes.getValue("backgroundImage"));
      paramString1.setContentOverlap(getIntAttribute(paramAttributes, "contentOverlap", 0));
      paramString1.setNavigationItemsOnBottom(getAttribute(paramAttributes, "itemsPosition", "top").equals("bottom"));
      paramString1.setTextFont(getAttribute(paramAttributes, "textFont", "normal"));
      paramString1.setTextStyle(getIntAttribute(paramAttributes, "textStyle", 0));
      paramString1.setTextSize(getIntAttribute(paramAttributes, "textSize", 10));
      paramString1.setTabsPerPageForPhone(getIntAttribute(paramAttributes, "tabsPerPagePhone", 0));
      if (paramString1.getTabsPerPageForPhone() <= 0) {
        paramString1.setTabsPerPageForPhone(5);
      }
      paramString1.setTabsPerPageForTablet(getIntAttribute(paramAttributes, "tabsPerPageTablet", 0));
      if (paramString1.getTabsPerPageForTablet() <= 0) {
        paramString1.setTabsPerPageForTablet(7);
      }
      if (!paramString1.isNavigationItemsOnBottom()) {
        paramString1.setContentOverlap(0);
      }
      paramString1 = paramAttributes.getValue("type");
      if (paramString1.equals("tabs")) {
        this.mConfig.setNavigationType(1);
      }
    }
    for (;;)
    {
      this.mParentElements.add(paramString2);
      return;
      if (paramString1.equals("simple"))
      {
        this.mConfig.setNavigationType(2);
      }
      else if (paramString1.equals("wheel"))
      {
        this.mConfig.setNavigationType(3);
      }
      else if (paramString1.equals("customtabs"))
      {
        this.mConfig.setNavigationType(4);
      }
      else if (paramString1.equals("legacyTabs"))
      {
        this.mConfig.setNavigationType(5);
        continue;
        if ((paramString2.equalsIgnoreCase("item")) && (this.mParentElements.size() == 3) && (((String)this.mParentElements.get(2)).equalsIgnoreCase("items")) && (((String)this.mParentElements.get(1)).equalsIgnoreCase("navigation")))
        {
          paramString1 = new NavigationItem();
          paramString1.setText(paramAttributes.getValue("text"));
          paramString1.setIcon(paramAttributes.getValue("icon"));
          paramString1.setSelectedIcon(paramAttributes.getValue("selectedIcon"));
          paramString1.setTextColor(getColorAttribute(paramAttributes, "textColor", Integer.valueOf(-3355444)).intValue());
          paramString1.setSelectedTextColor(getColorAttribute(paramAttributes, "selectedTextColor", Integer.valueOf(-1)).intValue());
          paramString1.setBackgroundColor(getColorAttribute(paramAttributes, "backgroundColor", Integer.valueOf(0)).intValue());
          paramString1.setSelectedBackgroundColor(getColorAttribute(paramAttributes, "selectedBackgroundColor", null));
          paramString1.setBackgroundImage(paramAttributes.getValue("backgroundImage"));
          paramString1.setSelectedBackgroundImage(paramAttributes.getValue("selectedBackgroundImage"));
          this.mConfig.getNavigationItems().add(paramString1);
        }
        else if (paramString2.equalsIgnoreCase("prop"))
        {
          this.currentId = paramAttributes.getValue("id");
        }
        else if (paramString2.equalsIgnoreCase("template"))
        {
          this.mNavigationItemsNumber = getIntAttribute(paramAttributes, "tabsnumber", 4);
          this.mConfig.setGlobalTopAdType(getAdTypeAttribute(paramAttributes, "topadtype", 0));
          this.mConfig.setGlobalBottomAdType(getAdTypeAttribute(paramAttributes, "bottomadtype", 0));
          this.mConfig.setScaleWebPagesToBaseResolution(getBoolAttribute(paramAttributes, "scaleWebPagesToBaseResolution", true));
        }
        else if (paramString2.equalsIgnoreCase("admobpublisher"))
        {
          paramString1 = paramAttributes.getValue("id");
          if ((paramString1 != null) && (!paramString1.trim().equals(""))) {
            this.mConfig.setAdMobPublisherId(paramString1.trim());
          }
        }
        else if (paramString2.equalsIgnoreCase("doubleclickpublisher"))
        {
          paramString1 = paramAttributes.getValue("unitId");
          if ((paramString1 != null) && (!paramString1.trim().equals(""))) {
            this.mConfig.setDfpAdUnitId(paramString1.trim());
          }
        }
        else
        {
          int i;
          if (paramString2.equalsIgnoreCase("scads"))
          {
            int j = getIntAttribute(paramAttributes, "refreshRate", 30);
            i = j;
            if (j < 10) {
              i = 10;
            }
            j = i;
            if (i > 120) {
              j = 120;
            }
            this.mConfig.setScAdRefreshRate(j);
          }
          else if ((this.mParentElements.size() == 1) && (paramString2.equals("pollfish")))
          {
            this.mConfig.setPollfishApiKey(getTrimmedAttribute(paramAttributes, "apiKey"));
            this.mConfig.setPollfishPosition(getTrimmedAttribute(paramAttributes, "position"));
            this.mConfig.setPollfishPadding(getIntAttribute(paramAttributes, "padding", 0));
          }
          else if (paramString2.equalsIgnoreCase("googleanalyticsid"))
          {
            paramString1 = paramAttributes.getValue("id");
            if ((paramString1 != null) && (!paramString1.trim().equals(""))) {
              this.mConfig.setGoogleAnalyticsId(paramString1.trim());
            }
          }
          else if (paramString2.equalsIgnoreCase("sentpageid"))
          {
            paramString1 = paramAttributes.getValue("id");
            if ((paramString1 != null) && (!paramString1.trim().equals(""))) {
              this.mConfig.setSentPageId(paramString1.trim());
            }
          }
          else if (paramString2.equalsIgnoreCase("quizrandomize"))
          {
            this.mBuilder = new StringBuilder();
            this.mConfig.setQuizPagesNumber(getIntAttribute(paramAttributes, "nquestions", 20));
          }
          else if ((this.mParentElements.size() == 1) && (paramString2.equals("geofencing")))
          {
            this.mConfig.setGeofencingEnabled(getBoolAttribute(paramAttributes, "enabled", false));
          }
          else
          {
            Object localObject1;
            Object localObject2;
            if (paramString2.equalsIgnoreCase("page"))
            {
              this.mCurrentPageId = paramAttributes.getValue("id");
              if ((this.mParentElements.size() == 1) && (((String)this.mParentElements.get(0)).equalsIgnoreCase("xml")))
              {
                localObject1 = getOrCreatePage(this.mCurrentPageId);
                ((Page)localObject1).setType(getAttribute(paramAttributes, "type", "html"));
                ((Page)localObject1).setTitle(paramAttributes.getValue("title"));
                ((Page)localObject1).setActionBarVisible(getBoolAttribute(paramAttributes, "shownavbar", true));
                ((Page)localObject1).setSlidePageId(paramAttributes.getValue("slidepageid"));
                ((Page)localObject1).setSlideTransition(paramAttributes.getValue("slidetransition"));
                ((Page)localObject1).setTransition(paramAttributes.getValue("transition"));
                ((Page)localObject1).setHeaderimage(paramAttributes.getValue("headerimage"));
                ((Page)localObject1).setSubmitbutton(paramAttributes.getValue("submitbutton"));
                ((Page)localObject1).setConfirmmessage(paramAttributes.getValue("confirmmessage"));
                ((Page)localObject1).setNextpage(paramAttributes.getValue("nextpage"));
                if (getBoolAttribute(paramAttributes, "rightToLeft", false)) {
                  ((Page)localObject1).setRightToLeftLayoutDirection();
                }
                ((Page)localObject1).setSendtoaddress(paramAttributes.getValue("sendtoaddress"));
                i = 0;
                localObject2 = new ArrayList();
                paramString3 = new StringBuilder().append("sendtoaddress");
                if (i == 0) {}
                for (paramString1 = "";; paramString1 = Integer.valueOf(i))
                {
                  paramString3 = paramAttributes.getValue(paramString1);
                  paramString1 = paramString3;
                  if (paramString3 == null) {
                    paramString1 = "";
                  }
                  if (paramString1.length() <= 0) {
                    break label1435;
                  }
                  ((ArrayList)localObject2).add(paramString1);
                  i += 1;
                  break;
                }
                label1435:
                ((Page)localObject1).setSendToAddresses((ArrayList)localObject2);
                ((Page)localObject1).setHasreviews(paramAttributes.getValue("hasreviews"));
                ((Page)localObject1).setHasreviewhtmlkey(getBoolAttribute(paramAttributes, "hasreviewhtmlkey", false));
                ((Page)localObject1).setHasSendAction(getBoolAttribute(paramAttributes, "hassend", false));
                ((Page)localObject1).setHasFields(getBoolAttribute(paramAttributes, "hasfields", false));
                ((Page)localObject1).setDynamicData(getBoolAttribute(paramAttributes, "dynamicdata", false));
                if (((Page)localObject1).isDynamicData()) {
                  ((Page)localObject1).setHasFields(false);
                }
                ((Page)localObject1).setHasHomeAction(getBoolAttribute(paramAttributes, "hashome", ((Page)localObject1).hasHomeAction()));
                ((Page)localObject1).setZoomEnabled(getBoolAttribute(paramAttributes, "zoomEnabled", false));
                ((Page)localObject1).setTopAdType(getAdTypeAttribute(paramAttributes, "topadtype", 0));
                ((Page)localObject1).setBottomAdType(getAdTypeAttribute(paramAttributes, "bottomadtype", 0));
                ((Page)localObject1).setRevMobPageEnterType(paramAttributes.getValue("enterrevmob"));
                ((Page)localObject1).setPollfishPosition(getTrimmedAttribute(paramAttributes, "pollfishPosition"));
                ((Page)localObject1).setPollfishPadding(getIntAttribute(paramAttributes, "pollfishPadding", 0));
                ((Page)localObject1).setGlobeSourceType(paramAttributes.getValue("sourcetype"));
                ((Page)localObject1).setGlobeLocationsURL(paramAttributes.getValue("xmlurl"));
                ((Page)localObject1).setGlobeLocationImage(paramAttributes.getValue("locationimage"));
                ((Page)localObject1).setFbpageid(paramAttributes.getValue("fbpageid"));
                ((Page)localObject1).setRssFeedURL(paramAttributes.getValue("rssSourceURL"));
                ((Page)localObject1).setAllowBaseUrl(paramAttributes.getValue("allowbaseurl"));
                ((Page)localObject1).setCameraWelcomeImg(paramAttributes.getValue("welcomeimg"));
                ((Page)localObject1).setSlideToNextPage(paramAttributes.getValue("nextpage"));
                ((Page)localObject1).setTextDirection(paramAttributes.getValue("textDirection"));
                paramString3 = paramAttributes.getValue("quizcategory");
                paramString1 = paramString3;
                if (paramString3 == null) {
                  paramString1 = "";
                }
                ((Page)localObject1).setQuizCategory(paramString1);
                ((Page)localObject1).setQuizTitle(paramAttributes.getValue("quiztitle"));
                ((Page)localObject1).setQuizBackgroundImage(paramAttributes.getValue("quizbgimage"));
                ((Page)localObject1).setQuizButtonsBgImage(paramAttributes.getValue("quizbuttonsbgimage"));
                if (((Page)localObject1).getType().equalsIgnoreCase("map"))
                {
                  ((Page)localObject1).locationsArray = new ArrayList();
                  paramString3 = paramAttributes.getValue("resultType");
                  if (paramString3 != null) {
                    break label2587;
                  }
                  paramString1 = "list";
                  label1880:
                  ((Page)localObject1).setResultType(paramString1);
                  ((Page)localObject1).setShowLocationPicker(getBoolAttribute(paramAttributes, "showLocationPicker", true));
                  ((Page)localObject1).setLocationsLimit(getIntAttribute(paramAttributes, "locationsLimit", 500));
                  ((Page)localObject1).setResultDistanceInMiles(true);
                  if ("km".equalsIgnoreCase(paramAttributes.getValue("resultUnits"))) {
                    ((Page)localObject1).setResultDistanceInMiles(false);
                  }
                  if ((((Page)localObject1).getType().equalsIgnoreCase("quizquestion")) && (!this.mConfig.getQuizPages().contains(((Page)localObject1).getId()))) {
                    this.mConfig.getQuizPages().add(((Page)localObject1).getId());
                  }
                  if (!((Page)localObject1).getType().equalsIgnoreCase("scoreboard")) {
                    break label2624;
                  }
                  paramString1 = paramAttributes.getValue("scbemail");
                  if (paramString1 == null) {
                    break label2618;
                  }
                  label2024:
                  ((Page)localObject1).setScoreBoardEmail(paramString1);
                }
                for (;;)
                {
                  try
                  {
                    if (paramAttributes.getValue("sourcexml") != null) {
                      ((Page)localObject1).setSourcexml(URLDecoder.decode(paramAttributes.getValue("sourcexml"), "UTF-8"));
                    }
                    if (paramAttributes.getValue("loginurl") != null) {
                      ((Page)localObject1).setLoginURL(URLDecoder.decode(paramAttributes.getValue("loginurl"), "UTF-8"));
                    }
                    if (paramAttributes.getValue("facebookloginurl") != null) {
                      ((Page)localObject1).setFacebookLoginURL(URLDecoder.decode(paramAttributes.getValue("facebookloginurl"), "UTF-8"));
                    }
                    if (paramAttributes.getValue("forgotpasswordurl") != null) {
                      ((Page)localObject1).setForgotPasswordURL(URLDecoder.decode(paramAttributes.getValue("forgotpasswordurl"), "UTF-8"));
                    }
                    if (paramAttributes.getValue("registerurl") != null) {
                      ((Page)localObject1).setRegisterURL(URLDecoder.decode(paramAttributes.getValue("registerurl"), "UTF-8"));
                    }
                    if (paramAttributes.getValue("targeturl") != null) {
                      ((Page)localObject1).setTargetURL(URLDecoder.decode(paramAttributes.getValue("targeturl"), "UTF-8"));
                    }
                    if (paramAttributes.getValue("jsonurl") != null) {
                      ((Page)localObject1).setJsonURL(URLDecoder.decode(paramAttributes.getValue("jsonurl"), "UTF-8"));
                    }
                    if (((Page)localObject1).getNextpage() != null) {
                      ((Page)localObject1).setNextpage(URLDecoder.decode(((Page)localObject1).getNextpage(), "UTF-8"));
                    }
                    if (((Page)localObject1).getSubmitbutton() != null) {
                      ((Page)localObject1).setSubmitbutton(URLDecoder.decode(((Page)localObject1).getSubmitbutton(), "UTF-8"));
                    }
                    if ((((Page)localObject1).getType().equalsIgnoreCase("edituserprofile")) && (((Page)localObject1).getConfirmmessage() != null)) {
                      ((Page)localObject1).setConfirmmessage(URLDecoder.decode(((Page)localObject1).getConfirmmessage(), "UTF-8"));
                    }
                    if (((Page)localObject1).getGlobeLocationsURL() != null) {
                      ((Page)localObject1).setGlobeLocationsURL(URLDecoder.decode(((Page)localObject1).getGlobeLocationsURL(), "UTF-8"));
                    }
                  }
                  catch (UnsupportedEncodingException paramString1)
                  {
                    label2587:
                    label2618:
                    label2624:
                    Log.e("AppConfigHandler", "UTF-8 is not a valid encoding string");
                    continue;
                    ((Page)localObject1).setCalendarEventCategoryColors(paramString1);
                    ((Page)localObject1).setCoordinateFormatType(getIntAttribute(paramAttributes, "coordinateFormatType", ((Page)localObject1).getCoordinateFormatType()));
                    i = getColorAttribute(paramAttributes, "backgroundColor", Integer.valueOf(Integer.MAX_VALUE)).intValue();
                    if (i == Integer.MAX_VALUE) {
                      continue;
                    }
                    ((Page)localObject1).getStyle().putInt("backgroundColor", i);
                    i = getColorAttribute(paramAttributes, "textColor", Integer.valueOf(Integer.MAX_VALUE)).intValue();
                    if (i == Integer.MAX_VALUE) {
                      continue;
                    }
                    ((Page)localObject1).getStyle().putInt("textColor", i);
                    paramString1 = paramAttributes.getValue("backgroundImage");
                    if (paramString1 == null) {
                      continue;
                    }
                    ((Page)localObject1).getStyle().putString("backgroundImage", paramString1);
                    paramString1 = paramAttributes.getValue("configFile");
                    if ((paramString1 == null) || (paramString1.trim().length() == 0)) {
                      continue;
                    }
                    ((Page)localObject1).setConfigFile(paramString1);
                    ((Page)localObject1).setPhotoBottomText(getAttribute(paramAttributes, "photoBottomText", ""));
                    ((Page)localObject1).setLeftTextPrefixes(getAttribute(paramAttributes, "leftTextPrefixes", "").split(","));
                    ((Page)localObject1).setSmsNumber(getAttribute(paramAttributes, "smsnumber", ""));
                    ((Page)localObject1).setSmsBody(getAttribute(paramAttributes, "smsbody", ""));
                    if (!((Page)localObject1).getType().equalsIgnoreCase("purchase")) {
                      break label2986;
                    }
                  }
                  paramString1 = paramAttributes.getValue("categories");
                  if ((paramString1 != null) && (!paramString1.trim().equals("")))
                  {
                    paramString1 = CollectionUtil.newArrayList(paramString1.trim().split(","));
                    if (paramString1.size() != 0) {
                      ((Page)localObject1).setCalendarEventCategories(paramString1);
                    }
                  }
                  paramString1 = paramAttributes.getValue("categorycolors");
                  if ((paramString1 == null) || (paramString1.trim().equals(""))) {
                    continue;
                  }
                  paramString3 = CollectionUtil.newArrayList(paramString1.trim().split(","));
                  if (paramString3.size() == 0) {
                    continue;
                  }
                  paramString1 = new ArrayList(paramString3.size());
                  paramString3 = paramString3.iterator();
                  if (!paramString3.hasNext()) {
                    continue;
                  }
                  paramString1.add(ColorUtil.getColorValue((String)paramString3.next(), Integer.valueOf(-1)));
                  continue;
                  if ((!((Page)localObject1).getType().equalsIgnoreCase("fbfanpage")) && (!((Page)localObject1).getType().equalsIgnoreCase("appshare"))) {
                    break;
                  }
                  paramString3 = paramAttributes.getValue("fbappid");
                  paramString1 = paramString3;
                  if (paramString3 == null) {
                    paramString1 = "";
                  }
                  ((Page)localObject1).setFBappid(paramString1);
                  break;
                  paramString1 = paramString3;
                  if (paramString3.equalsIgnoreCase("list")) {
                    break label1880;
                  }
                  paramString1 = paramString3;
                  if (paramString3.equalsIgnoreCase("map")) {
                    break label1880;
                  }
                  paramString1 = "list";
                  break label1880;
                  paramString1 = "";
                  break label2024;
                  if (((Page)localObject1).getType().equalsIgnoreCase("order"))
                  {
                    paramString1 = new OrderConfigInfo();
                    paramString1.initFrom(paramAttributes);
                    ((Page)localObject1).setOrderConfing(paramString1);
                  }
                }
                ((Page)localObject1).setProductId(getTrimmedAttribute(paramAttributes, "productID"));
                ((Page)localObject1).setProductType(getAttribute(paramAttributes, "productType", "nonconsumable"));
                ((Page)localObject1).setRedirectUrl(getTrimmedAttribute(paramAttributes, "redirectUrl"));
                for (;;)
                {
                  ((Page)localObject1).setNote(paramAttributes.getValue("note"));
                  ((Page)localObject1).setParameters(convertAttributesToMap(paramAttributes));
                  break;
                  label2986:
                  if (((Page)localObject1).getType().equalsIgnoreCase("magazinestore"))
                  {
                    ((Page)localObject1).setHeaderimage(paramAttributes.getValue("headerImageName"));
                  }
                  else if (((Page)localObject1).getType().equalsIgnoreCase("nearbylocations"))
                  {
                    paramString1 = getTrimmedAttribute(paramAttributes, "placesApiKey");
                    if ((paramString1 == null) || (paramString1.equals(""))) {
                      ((Page)localObject1).setPlacesApiKey("AIzaSyDcbnDqRozxjllddKHhKwfQEflvej1qd8A");
                    } else {
                      ((Page)localObject1).setPlacesApiKey(paramString1);
                    }
                  }
                  else if (((Page)localObject1).getType().equalsIgnoreCase("messenger"))
                  {
                    ((Page)localObject1).setMaxMessageLength(getIntAttribute(paramAttributes, "maxMessageLength", 0));
                    if (this.mConfig.getMessengerNotificationPageId() == null) {
                      this.mConfig.setMessengerNotificationPageId(((Page)localObject1).getId());
                    }
                  }
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("location"))
            {
              this.currentLocationEl = new LocationModel();
            }
            else if ((paramString2.equalsIgnoreCase("name")) || (paramString2.equalsIgnoreCase("latitude")) || (paramString2.equalsIgnoreCase("longitude")) || (paramString2.equalsIgnoreCase("imageurl")) || (paramString2.equalsIgnoreCase("ldescription")) || (paramString2.equalsIgnoreCase("ltarget")))
            {
              this.mBuilder.setLength(0);
            }
            else if (paramString2.equalsIgnoreCase("field"))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (paramString1 != null)
                {
                  this.currentFieldId = paramAttributes.getValue("id");
                  paramString3 = new Field(this.currentFieldId);
                  paramString3.setFieldType(paramAttributes.getValue("type"));
                  paramString3.setFieldLabel(paramAttributes.getValue("label"));
                  paramString3.setFieldName(paramAttributes.getValue("name"));
                  paramString3.setFieldRequired(paramAttributes.getValue("required"));
                  paramString3.setfTargetURL(paramAttributes.getValue("targeturl"));
                  paramString3.setfJsonSourcePath(paramAttributes.getValue("jsonsourcepath"));
                  paramString3.setfTargetParam(paramAttributes.getValue("targetparam"));
                  if (paramAttributes.getValue("fieldlinescount") != null) {
                    paramString3.setLineCount((int)Float.parseFloat(paramAttributes.getValue("fieldlinescount")));
                  }
                  if (paramAttributes.getValue("referencefieldid") != null) {
                    paramString3.setReferenceFieldId(paramAttributes.getValue("referencefieldid"));
                  }
                  paramString1.getFields().add(paramString3);
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("listitem"))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString3 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (paramString3 != null)
                {
                  paramString1 = null;
                  localObject1 = paramString3.fields.iterator();
                  while (((Iterator)localObject1).hasNext())
                  {
                    paramString3 = (Field)((Iterator)localObject1).next();
                    if (paramString3.getFieldId().equalsIgnoreCase(this.currentFieldId)) {
                      paramString1 = paramString3;
                    }
                  }
                  if (paramString1 != null) {
                    paramString1.getListItems().add(paramAttributes.getValue("value"));
                  }
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("multilist"))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString3 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (paramString3 != null)
                {
                  paramString1 = null;
                  localObject1 = paramString3.fields.iterator();
                  while (((Iterator)localObject1).hasNext())
                  {
                    paramString3 = (Field)((Iterator)localObject1).next();
                    if (paramString3.getFieldId().equalsIgnoreCase(this.currentFieldId)) {
                      paramString1 = paramString3;
                    }
                  }
                  if (paramString1 != null)
                  {
                    paramString3 = paramAttributes.getValue("idlistitem");
                    i = 0;
                    localObject1 = new ArrayList();
                    for (;;)
                    {
                      i += 1;
                      localObject2 = paramAttributes.getValue("value" + i);
                      if (localObject2 == null) {
                        break;
                      }
                      ((ArrayList)localObject1).add(localObject2);
                    }
                    if (paramString3 != null) {
                      paramString1.getMultiListItems().put(paramString3, localObject1);
                    } else {
                      paramString1.getMultiListItems().put("list", localObject1);
                    }
                  }
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("webalbum"))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (paramAttributes.getValue("title") != null) {
                  paramString1.setTitle(paramAttributes.getValue("title").trim());
                }
                paramString1.mosaicImages = new ArrayList();
              }
            }
            else if (paramString2.equalsIgnoreCase("webpicture"))
            {
              this.currentMosaicImage = new ImgMetadata();
            }
            else if (paramString2.equalsIgnoreCase("login"))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (paramString1 != null)
                {
                  paramString3 = new HashMap();
                  paramString3.put("password", paramAttributes.getValue("password"));
                  paramString3.put("login", paramAttributes.getValue("user"));
                  paramString3.put("url", paramAttributes.getValue("url"));
                  paramString1.listLoginUsers.add(paramString3);
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("fbapp"))
            {
              this.mConfig.setFacebookAppID(App.defaultFacebookAppID);
              paramString1 = paramAttributes.getValue("apikey");
              if ((paramString1 != null) && (!paramString1.trim().equalsIgnoreCase(""))) {
                this.mConfig.setFacebookAppID(paramString1);
              }
            }
            else if (paramString2.equalsIgnoreCase("info"))
            {
              this.mPublisherFacebookAppID = "";
              paramString1 = paramAttributes.getValue("publisherFacebookApiKey");
              if (paramString1 != null) {
                this.mPublisherFacebookAppID = paramString1;
              }
            }
            else if (paramString2.equalsIgnoreCase("revmobappid"))
            {
              App.revMobAppid = paramAttributes.getValue("id");
            }
            else if (paramString2.equalsIgnoreCase("cover"))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (paramString1.getType().equalsIgnoreCase("cameracover")) {
                  paramString1.addCameraCover(paramAttributes.getValue("image"));
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("pdftron"))
            {
              paramString1 = paramAttributes.getValue("licenseKey");
              if (paramString1 != null) {
                App.pdftronLicenseKey = paramString1;
              }
            }
            else if (paramString2.equalsIgnoreCase("magazine"))
            {
              paramString1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
              if (paramString1 != null) {
                paramString1.getMagazinesInfo().add(new MagazineInfo(paramAttributes));
              }
            }
            else if (paramString2.equalsIgnoreCase("sharepointclient"))
            {
              if (paramAttributes.getValue("url") != null) {}
              try
              {
                this.mConfig.getSharepointGlobalServerCredentials().setURL(new URI(paramAttributes.getValue("url")));
                if (paramAttributes.getValue("username") != null) {
                  this.mConfig.getSharepointGlobalServerCredentials().setUsername(paramAttributes.getValue("username"));
                }
                if (paramAttributes.getValue("password") == null) {
                  continue;
                }
                this.mConfig.getSharepointGlobalServerCredentials().setPassword(paramAttributes.getValue("password"));
              }
              catch (URISyntaxException paramString1)
              {
                for (;;)
                {
                  Log.e("AppConfigHandler", "Sharepoint parsing error", paramString1);
                }
              }
            }
            else if (paramString2.equalsIgnoreCase("result"))
            {
              if (this.mConfig.getPages() != null)
              {
                localObject1 = (Page)this.mConfig.getPages().get(this.mCurrentPageId);
                if (localObject1 != null)
                {
                  localObject2 = new HashMap();
                  paramString3 = paramAttributes.getValue("message");
                  paramString1 = paramString3;
                  if (StringUtil.isEmpty(paramString3)) {
                    paramString1 = "";
                  }
                  ((HashMap)localObject2).put("message", paramString1);
                  paramString3 = paramAttributes.getValue("imageName");
                  paramString1 = paramString3;
                  if (StringUtil.isEmpty(paramString3)) {
                    paramString1 = "";
                  }
                  ((HashMap)localObject2).put("imageName", paramString1);
                  paramString3 = paramAttributes.getValue("pageName");
                  paramString1 = paramString3;
                  if (StringUtil.isEmpty(paramString3)) {
                    paramString1 = "";
                  }
                  ((HashMap)localObject2).put("pageName", paramString1);
                  ((Page)localObject1).getResultsBMI().add(localObject2);
                }
              }
            }
            else if ((this.mParentElements.size() == 2) && (((String)this.mParentElements.get(1)).equalsIgnoreCase("pntopics")) && (paramString2.equals("topic")))
            {
              this.mConfig.getPNTopics().add(getAttribute(paramAttributes, "id", ""));
            }
            else if ((paramString2.equalsIgnoreCase("resource")) && (this.mParentElements.size() == 3) && (((String)this.mParentElements.get(2)).equalsIgnoreCase("page")) && (((String)this.mParentElements.get(1)).equalsIgnoreCase("hostedresources")))
            {
              if (this.mConfig.getPages() != null)
              {
                paramString1 = getOrCreatePage(this.mCurrentPageId);
                paramString3 = paramAttributes.getValue("url");
                if (paramString3 != null)
                {
                  paramAttributes = new HashMap();
                  paramAttributes.put("url", paramString3);
                  paramString1.addHostedResource(paramAttributes);
                }
              }
            }
            else if ((paramString2.equalsIgnoreCase("levelInfo")) && (this.mConfig.getPages() != null))
            {
              paramString1 = getOrCreatePage(this.mCurrentPageId);
              if (paramString1.getType().equalsIgnoreCase("puzzle"))
              {
                paramString3 = paramAttributes.getValue("title");
                localObject1 = paramAttributes.getValue("rows");
                paramAttributes = paramAttributes.getValue("nextPage");
                if ((paramString3 != null) && (paramString3.length() > 0) && (localObject1 != null) && (((String)localObject1).length() > 0))
                {
                  localObject2 = new HashMap();
                  ((HashMap)localObject2).put("title", paramString3);
                  ((HashMap)localObject2).put("rows", localObject1);
                  ((HashMap)localObject2).put("nextPage", paramAttributes);
                  paramString1.addPuzzleLevel((HashMap)localObject2);
                }
              }
            }
          }
        }
      }
    }
  }
}
