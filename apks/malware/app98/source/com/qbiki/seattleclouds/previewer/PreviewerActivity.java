package com.qbiki.seattleclouds.previewer;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.ContextThemeWrapper;
import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.scapi.SCApi;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragmentActivity;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptListener;

public class PreviewerActivity
  extends SCFragmentActivity
  implements PreviewerLoginFragment.OnLoginListener, PreviewerAppsFragment.OnLogoutListener
{
  private static boolean DEBUG = false;
  private static final String TAG = "PreviewerActivity";
  private Fragment mCurrentFragment;
  private boolean mInitialFragmentAdded = false;
  private MenuItem mLogInAsItem;
  private MenuItem mLogOutItem;
  private MenuItem mRefreshItem;
  
  public PreviewerActivity() {}
  
  private void logDebug(String paramString)
  {
    if (DEBUG) {
      Log.d("PreviewerActivity", paramString);
    }
  }
  
  private void refresh()
  {
    logDebug("refresh");
    refreshActionBar();
    if (App.authenticated) {}
    FragmentTransaction localFragmentTransaction;
    for (this.mCurrentFragment = new PreviewerAppsFragment();; this.mCurrentFragment = new PreviewerLoginFragment())
    {
      this.mCurrentFragment.setRetainInstance(true);
      localFragmentTransaction = getSupportFragmentManager().beginTransaction();
      localFragmentTransaction.setTransition(4099);
      logDebug("Initial Fragment added: " + this.mInitialFragmentAdded);
      if (!this.mInitialFragmentAdded) {
        break;
      }
      logDebug("replacing fragment");
      localFragmentTransaction.replace(16908290, this.mCurrentFragment).commit();
      return;
    }
    logDebug("adding fragment");
    localFragmentTransaction.add(16908290, this.mCurrentFragment).commit();
    this.mInitialFragmentAdded = true;
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    logDebug("onCreate");
    App.rotationEnabled = true;
    super.onCreate(paramBundle);
    if (paramBundle == null)
    {
      logDebug("Initial onCreate => adding new fragment");
      refresh();
      return;
    }
    this.mInitialFragmentAdded = true;
    this.mCurrentFragment = getSupportFragmentManager().findFragmentById(16908290);
    refreshActionBar();
    logDebug("savedInstanceState NOT NULL => no need to create fragment");
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getSupportMenuInflater().inflate(2131558428, paramMenu);
    this.mLogInAsItem = paramMenu.findItem(2131100313);
    this.mLogOutItem = paramMenu.findItem(2131100316);
    this.mRefreshItem = paramMenu.findItem(2131100314);
    return true;
  }
  
  public void onLogin()
  {
    refresh();
  }
  
  public void onLogout()
  {
    if ((this.mCurrentFragment instanceof PreviewerAppsFragment)) {
      ((PreviewerAppsFragment)this.mCurrentFragment).clearCache();
    }
    App.authenticated = false;
    App.password = "";
    if (App.allowLoginAs) {}
    for (App.username = App.adminUserName;; App.username = "")
    {
      ((App)getApplication()).saveLoginInfo();
      SCApi.getInstance().removeAuthenticationAndCleanSettings();
      refresh();
      return;
    }
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    boolean bool = true;
    switch (paramMenuItem.getItemId())
    {
    default: 
      bool = super.onOptionsItemSelected(paramMenuItem);
    case 2131100314: 
      do
      {
        return bool;
      } while (!(this.mCurrentFragment instanceof PreviewerAppsFragment));
      ((PreviewerAppsFragment)this.mCurrentFragment).refresh();
      return true;
    case 2131100315: 
      startActivity(new Intent(this, PreviewerAboutActivity.class));
      return true;
    case 2131100316: 
      onLogout();
      return true;
    }
    DialogUtil.showPrompt(new ContextThemeWrapper(this, 2131492986), "Log in as user:", null, true, App.username, "Log in", new DialogUtil.PromptListener()
    {
      public void onCancel() {}
      
      public void onStringInput(String paramAnonymousString)
      {
        if (!paramAnonymousString.equals(""))
        {
          App.username = paramAnonymousString;
          App.password = "";
          ((App)PreviewerActivity.this.getApplication()).saveLoginInfo();
          PreviewerActivity.this.refreshActionBar();
          if ((PreviewerActivity.this.mCurrentFragment instanceof PreviewerAppsFragment)) {
            ((PreviewerAppsFragment)PreviewerActivity.this.mCurrentFragment).refreshClean();
          }
        }
      }
    });
    return true;
  }
  
  public boolean onPrepareOptionsMenu(Menu paramMenu)
  {
    if (this.mLogInAsItem != null) {
      if ((!App.authenticated) || (!App.allowLoginAs)) {
        break label117;
      }
    }
    label117:
    for (boolean bool = true;; bool = false)
    {
      this.mLogInAsItem.setVisible(bool);
      this.mLogInAsItem.setEnabled(bool);
      if (this.mLogOutItem != null)
      {
        this.mLogOutItem.setVisible(App.authenticated);
        this.mLogOutItem.setEnabled(App.authenticated);
      }
      if (this.mRefreshItem != null)
      {
        this.mRefreshItem.setVisible(App.authenticated);
        this.mRefreshItem.setEnabled(App.authenticated);
      }
      super.onPrepareOptionsMenu(paramMenu);
      return true;
    }
  }
  
  public void refreshActionBar()
  {
    if ((App.authenticated) && (App.allowLoginAs))
    {
      getSupportActionBar().setSubtitle(getString(2131361954, new Object[] { App.adminUserName, App.username }));
      return;
    }
    getSupportActionBar().setSubtitle(null);
  }
}
