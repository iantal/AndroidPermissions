package com.qbiki.seattleclouds.previewer;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap.CompressFormat;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import com.google.android.bitmapfun.ImageCache.ImageCacheParams;
import com.google.android.bitmapfun.ImageFetcher;
import com.qbiki.scapi.HttpResponseException;
import com.qbiki.scapi.SCApi;
import com.qbiki.scapi.SCApiException;
import com.qbiki.scapi.SCApiRequestAsyncTask;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppStarterActivity;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.JObjectUtil;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.FileUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh;
import uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh.SetupWizard;
import uk.co.senab.actionbarpulltorefresh.library.PullToRefreshLayout;
import uk.co.senab.actionbarpulltorefresh.library.listeners.OnRefreshListener;
import uk.co.senab.actionbarpulltorefresh.library.viewdelegates.ViewDelegate;

public class PreviewerAppsFragment
  extends SCFragment
  implements AdapterView.OnItemClickListener, OnRefreshListener
{
  private static final boolean DEBUG = false;
  private static final boolean DEBUG_LAYOUT = false;
  static final String IMAGE_CACHE_DIR = "previewer/appIcons";
  private static final String TAG = "PreviewerAppsFragment";
  static Map<String, SCApp> mAppsMap = new HashMap();
  static int mIconSize = 144;
  private AppsAdapter mAdapter;
  private List<SCApp> mApps = new ArrayList();
  private View mEmptyView;
  private GridView mGridView;
  private ImageFetcher mImageFetcher;
  private int mItemSpacing;
  private int mItemWidth;
  private int mLastGridWidth = 0;
  private OnLogoutListener mLogoutListener;
  private boolean mNeedsRefresh = true;
  private ProgressBar mProgressView;
  private PullToRefreshLayout mPullToRefreshLayout;
  private View mView;
  
  public PreviewerAppsFragment() {}
  
  private File getAppListCacheFile()
  {
    return new File(App.getUserProtectedStoragePath() + "/_previewer/appList/cache.json");
  }
  
  public static void startApp(Activity paramActivity, String paramString)
  {
    App.appId = paramString;
    JObjectUtil.clean();
    paramString = new Intent(paramActivity, AppStarterActivity.class);
    paramString.putExtra("startedInApp", true);
    paramActivity.startActivity(paramString);
  }
  
  public void clearCache()
  {
    FileUtils.deleteQuietly(getAppListCacheFile());
    this.mImageFetcher.clearCache();
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if (paramBoolean)
    {
      if (this.mImageFetcher != null) {
        this.mImageFetcher.setExitTasksEarly(false);
      }
      if (this.mAdapter != null) {
        this.mAdapter.notifyDataSetChanged();
      }
    }
    while (this.mImageFetcher == null) {
      return;
    }
    this.mImageFetcher.setPauseWork(false);
    this.mImageFetcher.setExitTasksEarly(true);
    this.mImageFetcher.flushCache();
  }
  
  public void onAttach(Activity paramActivity)
  {
    super.onAttach(paramActivity);
    if (this.mAdapter != null) {
      this.mAdapter.setContext(paramActivity);
    }
    try
    {
      this.mLogoutListener = ((OnLogoutListener)paramActivity);
      return;
    }
    catch (ClassCastException localClassCastException)
    {
      throw new ClassCastException(paramActivity.toString() + " must implement OnLogoutListener");
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.mItemWidth = DeviceUtil.dpToPx(getActivity(), 280.0F);
    this.mItemSpacing = DeviceUtil.dpToPx(getActivity(), 8.0F);
    this.mAdapter = new AppsAdapter(getActivity());
    paramBundle = new ImageCache.ImageCacheParams(getActivity(), "previewer/appIcons");
    paramBundle.diskCacheEnabled = true;
    paramBundle.compressFormat = Bitmap.CompressFormat.PNG;
    paramBundle.setMemCacheSizePercent(0.05F);
    paramBundle.clearReusableBitmapsOnClearCache = true;
    this.mImageFetcher = new ImageFetcher(getActivity(), mIconSize, false);
    this.mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), paramBundle);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903144, paramViewGroup, false);
    this.mProgressView = ((ProgressBar)this.mView.findViewById(2131099725));
    this.mEmptyView = this.mView.findViewById(16908292);
    this.mPullToRefreshLayout = ((PullToRefreshLayout)this.mView.findViewById(2131099952));
    this.mGridView = ((GridView)this.mView.findViewById(2131099937));
    this.mGridView.setEmptyView(this.mEmptyView);
    this.mGridView.setAdapter(this.mAdapter);
    this.mGridView.setOnItemClickListener(this);
    this.mGridView.setOnScrollListener(new AbsListView.OnScrollListener()
    {
      public void onScroll(AbsListView paramAnonymousAbsListView, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onScrollStateChanged(AbsListView paramAnonymousAbsListView, int paramAnonymousInt)
      {
        if (paramAnonymousInt == 2) {}
        for (boolean bool = true;; bool = false)
        {
          PreviewerAppsFragment.this.mImageFetcher.setPauseWork(bool);
          return;
        }
      }
    });
    ActionBarPullToRefresh.from(getActivity()).allChildrenArePullable().useViewDelegate(TextView.class, new ViewDelegate()
    {
      public boolean isReadyForPull(View paramAnonymousView, float paramAnonymousFloat1, float paramAnonymousFloat2)
      {
        return true;
      }
    }).listener(this).setup(this.mPullToRefreshLayout);
    return this.mView;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.mImageFetcher != null) {
      this.mImageFetcher.closeCache();
    }
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    paramAdapterView = new Intent(getActivity(), PreviewerAppViewActivity.class);
    paramAdapterView.putExtra("ARG_APP_ID", ((SCApp)this.mApps.get(paramInt)).getId());
    startActivity(paramAdapterView);
  }
  
  public void onRefreshStarted(View paramView)
  {
    refresh();
  }
  
  public void onResume()
  {
    super.onResume();
    if (this.mNeedsRefresh) {
      refresh();
    }
  }
  
  public void refresh()
  {
    this.mNeedsRefresh = false;
    new RefreshAppsTask(this).execute(new Void[0]);
  }
  
  public void refreshClean()
  {
    this.mApps = new ArrayList();
    mAppsMap = new HashMap();
    refresh();
  }
  
  public void setUiRefreshing(boolean paramBoolean)
  {
    if (paramBoolean) {
      if (this.mApps.size() == 0)
      {
        this.mEmptyView.setVisibility(8);
        this.mProgressView.setVisibility(0);
      }
    }
    for (;;)
    {
      this.mPullToRefreshLayout.setRefreshing(paramBoolean);
      return;
      this.mProgressView.setVisibility(8);
    }
  }
  
  private class AppsAdapter
    extends BaseAdapter
  {
    private Context mContext;
    private LayoutInflater mInflater;
    private boolean mReloadImages = true;
    
    public AppsAdapter(Context paramContext)
    {
      setContext(paramContext);
    }
    
    public int getCount()
    {
      return PreviewerAppsFragment.this.mApps.size();
    }
    
    public Object getItem(int paramInt)
    {
      return PreviewerAppsFragment.this.mApps.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return 0L;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView != null) {}
      for (;;)
      {
        paramViewGroup = (ImageView)paramView.findViewById(2131099944);
        TextView localTextView1 = (TextView)paramView.findViewById(2131099734);
        TextView localTextView2 = (TextView)paramView.findViewById(2131099945);
        SCApp localSCApp = (SCApp)PreviewerAppsFragment.this.mApps.get(paramInt);
        localTextView1.setText(localSCApp.getTitle());
        localTextView2.setText(localSCApp.getId() + " (" + localSCApp.getPlatformString() + ")");
        if (!this.mReloadImages) {
          break;
        }
        PreviewerAppsFragment.this.mImageFetcher.loadImage(localSCApp.getIconLink(), paramViewGroup);
        return paramView;
        paramView = this.mInflater.inflate(2130903232, null);
      }
      paramViewGroup.setImageDrawable(null);
      return paramView;
    }
    
    public void notifyDataSetChanged()
    {
      notifyDataSetChangedWithReloadingImages(true);
    }
    
    public void notifyDataSetChangedWithReloadingImages(boolean paramBoolean)
    {
      this.mReloadImages = paramBoolean;
      super.notifyDataSetChanged();
    }
    
    public void setContext(Context paramContext)
    {
      this.mContext = paramContext;
      this.mInflater = LayoutInflater.from(this.mContext);
    }
  }
  
  static abstract interface OnLogoutListener
  {
    public abstract void onLogout();
  }
  
  private class RefreshAppsTask
    extends SCApiRequestAsyncTask<Void, Void, String>
  {
    private List<SCApp> newApps = new ArrayList();
    private Map<String, SCApp> newAppsMap = new HashMap();
    
    public RefreshAppsTask(Fragment paramFragment)
    {
      super();
    }
    
    private void cacheAppList(final JSONArray paramJSONArray)
    {
      new Thread(new Runnable()
      {
        public void run()
        {
          try
          {
            FileUtils.writeStringToFile(PreviewerAppsFragment.this.getAppListCacheFile(), paramJSONArray.toString(), "UTF-8");
            return;
          }
          catch (IOException localIOException) {}
        }
      }).start();
    }
    
    private void parseAppListFromCacheIfNeeded()
    {
      if (PreviewerAppsFragment.this.mApps.size() > 0) {
        return;
      }
      try
      {
        parseAppsList(new JSONArray(FileUtils.readFileToString(PreviewerAppsFragment.this.getAppListCacheFile(), "UTF-8")));
        return;
      }
      catch (IOException localIOException) {}catch (JSONException localJSONException) {}
    }
    
    private void parseAppsList(JSONArray paramJSONArray)
      throws JSONException
    {
      int i = 0;
      while (i < paramJSONArray.length())
      {
        SCApp localSCApp = new SCApp(paramJSONArray.getJSONObject(i));
        this.newApps.add(localSCApp);
        this.newAppsMap.put(localSCApp.getId(), localSCApp);
        i += 1;
      }
    }
    
    protected void onPostExecute(String paramString)
    {
      if (paramString != null) {
        if (paramString.equals("notEnoughPrivileges")) {
          PreviewerAppsFragment.this.mLogoutListener.onLogout();
        }
      }
      for (;;)
      {
        PreviewerAppsFragment.this.setUiRefreshing(false);
        return;
        PreviewerAppsFragment.access$102(PreviewerAppsFragment.this, this.newApps);
        PreviewerAppsFragment.mAppsMap = this.newAppsMap;
        PreviewerAppsFragment.this.mAdapter.notifyDataSetChangedWithReloadingImages(false);
        PreviewerAppsFragment.this.mImageFetcher.clearCache();
        new Handler().postDelayed(new Runnable()
        {
          public void run()
          {
            if (PreviewerAppsFragment.this.mAdapter != null) {
              PreviewerAppsFragment.this.mAdapter.notifyDataSetChangedWithReloadingImages(true);
            }
          }
        }, 500L);
        continue;
        if (PreviewerAppsFragment.this.mApps.size() == 0)
        {
          PreviewerAppsFragment.access$102(PreviewerAppsFragment.this, this.newApps);
          PreviewerAppsFragment.mAppsMap = this.newAppsMap;
          PreviewerAppsFragment.this.mAdapter.notifyDataSetChanged();
        }
      }
    }
    
    protected void onPreExecute()
    {
      PreviewerAppsFragment.this.setUiRefreshing(true);
      super.onPreExecute();
    }
    
    protected String performRequest(Void... paramVarArgs)
      throws IOException, JSONException, HttpResponseException, SCApiException
    {
      try
      {
        paramVarArgs = SCApi.getInstance().listAppsForUsername(App.username).getJSONArray("items");
        parseAppsList(paramVarArgs);
        if (paramVarArgs != null) {
          cacheAppList(paramVarArgs);
        }
        return "ok";
      }
      catch (IOException paramVarArgs)
      {
        parseAppListFromCacheIfNeeded();
        throw paramVarArgs;
      }
      catch (JSONException paramVarArgs)
      {
        parseAppListFromCacheIfNeeded();
        throw paramVarArgs;
      }
      catch (HttpResponseException paramVarArgs)
      {
        parseAppListFromCacheIfNeeded();
        throw paramVarArgs;
      }
      catch (SCApiException paramVarArgs)
      {
        j = 0;
        i = j;
        try
        {
          if (paramVarArgs.getErrorCode() == 403)
          {
            boolean bool = paramVarArgs.getErrorReason().equals("notEnoughPrivileges");
            i = j;
            if (bool) {
              i = 1;
            }
          }
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            Log.e("PreviewerAppsFragment", "JSON parsing exception: " + localJSONException.toString());
            i = j;
          }
          parseAppListFromCacheIfNeeded();
          throw paramVarArgs;
        }
        if (i != 0)
        {
          Log.w("PreviewerAppsFragment", "SCApi exception: not enough privileges");
          return "notEnoughPrivileges";
        }
      }
    }
  }
}
