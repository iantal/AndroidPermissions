package com.qbiki.seattleclouds.previewer;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.text.method.PasswordTransformationMethod;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;
import com.facebook.android.DialogError;
import com.facebook.android.Facebook;
import com.facebook.android.Facebook.DialogListener;
import com.facebook.android.FacebookError;
import com.facebook.android.SessionEvents;
import com.google.android.gms.auth.GoogleAuthException;
import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.android.gms.auth.GooglePlayServicesAvailabilityException;
import com.google.android.gms.auth.UserRecoverableAuthException;
import com.google.android.gms.common.AccountPicker;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.qbiki.scapi.HttpResponseException;
import com.qbiki.scapi.SCApi;
import com.qbiki.scapi.SCApiException;
import com.qbiki.scapi.SCApiRequestAsyncTask;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DataUtil;
import com.qbiki.util.HTTPUtil;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class PreviewerLoginFragment
  extends SCFragment
{
  private static final boolean LOGV = false;
  private static final String OAUTH_SCOPE = "oauth2:https://www.googleapis.com/auth/userinfo.profile";
  private static final int REQUEST_CODE_CHOOSE_ACCOUNT = 1002;
  private static final int REQUEST_CODE_RECOVER_FROM_AUTH_ERROR = 1003;
  private static final int REQUEST_CODE_RECOVER_FROM_PLAY_SERVICES_ERROR = 1001;
  private static final String REQUEST_PROTOCOL = SCApi.getServerRequestProtocol(SERVER_HOST_NAME);
  private static final String SERVER_BASE_URL = REQUEST_PROTOCOL + "://" + SERVER_HOST_NAME + "/";
  private static final String SERVER_HOST_NAME = App.serverHostName;
  private static final String TAG = "PreviewerLoginFragment";
  private static Facebook facebook = null;
  private TextView mFacebookLoginButton;
  private View mFormContainer;
  private TextView mGoogleLoginButton;
  private Button mLoginButton;
  private OnLoginListener mLoginListener;
  private EditText mPasswordTextEdit;
  private ProgressBar mProgressBar;
  private String mSelectedGoogleAccount = null;
  private EditText mUsernameTextEdit;
  private View mView;
  
  public PreviewerLoginFragment() {}
  
  private boolean checkGooglePlayServicesAvailable(boolean paramBoolean)
  {
    if (getActivity() == null) {}
    int i;
    do
    {
      return false;
      i = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getActivity());
      if (!GooglePlayServicesUtil.isUserRecoverableError(i)) {
        break;
      }
    } while (!paramBoolean);
    GooglePlayServicesUtil.getErrorDialog(i, getActivity(), 1001).show();
    return false;
    return true;
  }
  
  private void chooseAccount()
  {
    startActivityForResult(AccountPicker.newChooseAccountIntent(null, null, new String[] { "com.google" }, true, null, null, null, null), 1002);
  }
  
  private void executeAuthTask()
  {
    String str1 = this.mUsernameTextEdit.getText().toString().trim();
    String str2 = this.mPasswordTextEdit.getText().toString().trim();
    new AuthTask(this).execute(new String[] { str1, str2 });
  }
  
  private void executeAuthWithFacebookTask()
  {
    new AuthWithFacebookTask(null).execute(new Void[0]);
  }
  
  private void executeAuthWithGoogleAsyncTask()
  {
    new GoogleSignInAsyncTask(this.mSelectedGoogleAccount, "oauth2:https://www.googleapis.com/auth/userinfo.profile", 1003).execute(new Void[0]);
  }
  
  private Facebook getFacebook()
  {
    if (facebook == null) {
      facebook = new Facebook(App.defaultFacebookAppID);
    }
    return facebook;
  }
  
  private String getNetworkError()
  {
    FragmentActivity localFragmentActivity = getActivity();
    if (localFragmentActivity == null) {
      return "";
    }
    ConnectivityManager localConnectivityManager = (ConnectivityManager)localFragmentActivity.getSystemService("connectivity");
    if ((localConnectivityManager.getActiveNetworkInfo() == null) || (!localConnectivityManager.getActiveNetworkInfo().isConnected())) {
      return localFragmentActivity.getString(2131361931);
    }
    return localFragmentActivity.getString(2131361932);
  }
  
  private void hideKeyboard()
  {
    Object localObject = getActivity();
    if (localObject != null)
    {
      InputMethodManager localInputMethodManager = (InputMethodManager)((Activity)localObject).getSystemService("input_method");
      localObject = ((Activity)localObject).getCurrentFocus();
      if (localObject != null) {
        localInputMethodManager.hideSoftInputFromWindow(((View)localObject).getWindowToken(), 2);
      }
    }
  }
  
  private void loginToFacebook()
  {
    Facebook localFacebook = getFacebook();
    FragmentActivity localFragmentActivity = getActivity();
    FBLoginDialogListener localFBLoginDialogListener = new FBLoginDialogListener(null);
    localFacebook.authorize(localFragmentActivity, new String[] { "user_about_me" }, -1, localFBLoginDialogListener);
  }
  
  private void setLoginButtonsEnabled(boolean paramBoolean)
  {
    this.mLoginButton.setEnabled(paramBoolean);
    this.mFacebookLoginButton.setClickable(paramBoolean);
    this.mGoogleLoginButton.setClickable(paramBoolean);
  }
  
  private void showErrorOnMainThread(int paramInt)
  {
    FragmentActivity localFragmentActivity = getActivity();
    if (localFragmentActivity == null) {
      return;
    }
    showErrorOnMainThread(localFragmentActivity.getString(paramInt));
  }
  
  private void showErrorOnMainThread(final String paramString)
  {
    if (getActivity() == null) {
      return;
    }
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (PreviewerLoginFragment.this.getActivity() == null) {
          return;
        }
        Toast.makeText(PreviewerLoginFragment.this.getActivity(), paramString, 1).show();
      }
    });
  }
  
  private void startSignInWithGoogleProcess()
  {
    if (this.mSelectedGoogleAccount == null)
    {
      chooseAccount();
      return;
    }
    executeAuthWithGoogleAsyncTask();
  }
  
  private void updateUiForLogInProgress(boolean paramBoolean)
  {
    if (!paramBoolean) {}
    for (boolean bool = true;; bool = false)
    {
      setLoginButtonsEnabled(bool);
      if (!paramBoolean) {
        break;
      }
      hideKeyboard();
      this.mProgressBar.setVisibility(0);
      this.mFormContainer.setVisibility(8);
      return;
    }
    new Handler().postDelayed(new Runnable()
    {
      public void run()
      {
        if ((PreviewerLoginFragment.this.mProgressBar != null) && (PreviewerLoginFragment.this.mProgressBar.getVisibility() == 0))
        {
          PreviewerLoginFragment.this.mProgressBar.setVisibility(8);
          PreviewerLoginFragment.this.mFormContainer.setVisibility(0);
        }
      }
    }, 700L);
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    switch (paramInt1)
    {
    default: 
    case 1001: 
    case 1002: 
      do
      {
        return;
        if (paramInt2 == -1)
        {
          startSignInWithGoogleProcess();
          return;
        }
        checkGooglePlayServicesAvailable(true);
        return;
      } while ((paramInt2 != -1) || (paramIntent == null) || (paramIntent.getExtras() == null));
      paramIntent = paramIntent.getStringExtra("authAccount");
      if (paramIntent != null) {
        this.mSelectedGoogleAccount = paramIntent;
      }
      executeAuthWithGoogleAsyncTask();
      return;
    }
    if (paramInt2 == -1)
    {
      executeAuthWithGoogleAsyncTask();
      return;
    }
    chooseAccount();
  }
  
  public void onAttach(Activity paramActivity)
  {
    super.onAttach(paramActivity);
    try
    {
      this.mLoginListener = ((OnLoginListener)paramActivity);
      return;
    }
    catch (ClassCastException localClassCastException)
    {
      throw new ClassCastException(paramActivity.toString() + " must implement OnLoginListener");
    }
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903145, paramViewGroup, false);
    this.mFormContainer = this.mView.findViewById(2131099953);
    this.mUsernameTextEdit = ((EditText)this.mView.findViewById(2131099954));
    this.mPasswordTextEdit = ((EditText)this.mView.findViewById(2131099955));
    this.mLoginButton = ((Button)this.mView.findViewById(2131099956));
    this.mProgressBar = ((ProgressBar)this.mView.findViewById(2131099725));
    this.mFacebookLoginButton = ((TextView)this.mView.findViewById(2131099958));
    this.mGoogleLoginButton = ((TextView)this.mView.findViewById(2131099959));
    this.mUsernameTextEdit.setText(App.username);
    this.mPasswordTextEdit.setText(App.password);
    this.mPasswordTextEdit.setTypeface(Typeface.DEFAULT);
    this.mPasswordTextEdit.setTransformationMethod(new PasswordTransformationMethod());
    this.mPasswordTextEdit.setOnEditorActionListener(new TextView.OnEditorActionListener()
    {
      public boolean onEditorAction(TextView paramAnonymousTextView, int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
      {
        PreviewerLoginFragment.this.executeAuthTask();
        return true;
      }
    });
    this.mLoginButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PreviewerLoginFragment.this.executeAuthTask();
      }
    });
    if ((!App.publisherId.equals("")) || (App.isPublisherWithoutWebsite(getActivity()))) {
      this.mView.findViewById(2131099957).setVisibility(4);
    }
    for (;;)
    {
      return this.mView;
      this.mFacebookLoginButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          PreviewerLoginFragment.this.loginToFacebook();
        }
      });
      if (checkGooglePlayServicesAvailable(false)) {
        this.mGoogleLoginButton.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            if (PreviewerLoginFragment.this.checkGooglePlayServicesAvailable(true)) {
              PreviewerLoginFragment.this.startSignInWithGoogleProcess();
            }
          }
        });
      } else {
        this.mGoogleLoginButton.setVisibility(8);
      }
    }
  }
  
  private class AuthTask
    extends SCApiRequestAsyncTask<String, Void, String>
  {
    public AuthTask(Fragment paramFragment)
    {
      super();
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      if (PreviewerLoginFragment.this.getActivity() == null) {
        return;
      }
      if ((paramString != null) && (PreviewerLoginFragment.this.mLoginListener != null)) {
        PreviewerLoginFragment.this.mLoginListener.onLogin();
      }
      PreviewerLoginFragment.this.updateUiForLogInProgress(false);
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
      PreviewerLoginFragment.this.updateUiForLogInProgress(true);
    }
    
    protected String performRequest(String... paramVarArgs)
      throws IOException, JSONException, HttpResponseException, SCApiException
    {
      String str = paramVarArgs[0];
      paramVarArgs = paramVarArgs[1];
      try
      {
        str = SCApi.getInstance().authenticate(str, paramVarArgs).getString("username");
        App.username = str;
        App.password = paramVarArgs;
        App.authenticated = true;
        App.adminUserName = "";
        App.allowLoginAs = false;
        if (SCApi.getInstance().canLogInAsAnotherUser())
        {
          App.adminUserName = App.username;
          App.allowLoginAs = true;
        }
        ((App)PreviewerLoginFragment.this.getActivity().getApplication()).saveLoginInfo();
        return "ok";
      }
      catch (SCApiException paramVarArgs)
      {
        int i = 0;
        try
        {
          int j = paramVarArgs.getErrorCode();
          if (j == 403) {
            i = 1;
          }
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            Log.e("PreviewerLoginFragment", "JSON parsing exception: " + localJSONException.toString());
          }
          throw paramVarArgs;
        }
        if (i != 0)
        {
          PreviewerLoginFragment.this.showErrorOnMainThread(2131361945);
          return null;
        }
      }
    }
  }
  
  private class AuthWithFacebookTask
    extends AsyncTask<Void, Void, String>
  {
    private AuthWithFacebookTask() {}
    
    protected String doInBackground(Void... paramVarArgs)
    {
      Object localObject5 = null;
      Object localObject6 = null;
      Object localObject7 = null;
      JSONObject localJSONObject = null;
      Object localObject4 = null;
      Object localObject8 = PreviewerLoginFragment.this.getFacebook();
      paramVarArgs = localJSONObject;
      if (localObject8 != null)
      {
        Object localObject2 = localObject5;
        Object localObject3 = localObject6;
        Object localObject1 = localObject7;
        paramVarArgs = localJSONObject;
        try
        {
          if (((Facebook)localObject8).isSessionValid())
          {
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            localJSONObject = new JSONObject(((Facebook)localObject8).request("me"));
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            localObject8 = new HashMap();
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            paramVarArgs = "unknown.email." + localJSONObject.getString("id") + "@facebook.com";
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            if (localJSONObject.has("email"))
            {
              localObject2 = localObject5;
              localObject3 = localObject6;
              localObject1 = localObject7;
              paramVarArgs = localJSONObject.getString("email");
            }
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            ((Map)localObject8).put("id", localJSONObject.getString("id"));
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            ((Map)localObject8).put("email", paramVarArgs);
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            ((Map)localObject8).put("first_name", localJSONObject.getString("first_name"));
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            ((Map)localObject8).put("last_name", localJSONObject.getString("last_name"));
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            ((Map)localObject8).put("gender", localJSONObject.getString("gender"));
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            localJSONObject = new JSONObject(HTTPUtil.performPostRequest(PreviewerLoginFragment.SERVER_BASE_URL + "fbmobauth.ashx", (Map)localObject8));
            localObject2 = localObject5;
            localObject3 = localObject6;
            localObject1 = localObject7;
            if (localJSONObject.getString("resp").equals("success"))
            {
              paramVarArgs = "OK";
              localObject2 = paramVarArgs;
              localObject3 = paramVarArgs;
              localObject1 = paramVarArgs;
              new PreviewerLoginFragment.AuthTask(PreviewerLoginFragment.this, PreviewerLoginFragment.this).execute(new String[] { localJSONObject.getString("username"), localJSONObject.getString("password") });
            }
            for (;;)
            {
              localObject2 = paramVarArgs;
              localObject3 = paramVarArgs;
              localObject1 = paramVarArgs;
              PreviewerLoginFragment.this.getFacebook().logout(PreviewerLoginFragment.this.getActivity());
              return paramVarArgs;
              localObject2 = localObject5;
              localObject3 = localObject6;
              localObject1 = localObject7;
              PreviewerLoginFragment.this.showErrorOnMainThread(localJSONObject.getString("error").toString());
              paramVarArgs = localObject4;
            }
          }
          return paramVarArgs;
        }
        catch (MalformedURLException paramVarArgs)
        {
          Log.w("PreviewerLoginFragment", "Error performing auth with Facebook request: " + paramVarArgs, paramVarArgs);
          PreviewerLoginFragment.this.showErrorOnMainThread(2131361933);
          return localObject2;
        }
        catch (IOException paramVarArgs)
        {
          Log.w("PreviewerLoginFragment", "Error performing auth with Facebook request: " + paramVarArgs, paramVarArgs);
          PreviewerLoginFragment.this.showErrorOnMainThread(PreviewerLoginFragment.access$1400(PreviewerLoginFragment.this));
          return localObject3;
        }
        catch (JSONException paramVarArgs)
        {
          Log.w("PreviewerLoginFragment", "Error performing auth with Facebook request: " + paramVarArgs, paramVarArgs);
          PreviewerLoginFragment.this.showErrorOnMainThread(2131361933);
          paramVarArgs = (Void[])localObject1;
        }
      }
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      if (PreviewerLoginFragment.this.getActivity() == null) {}
      while (paramString != null) {
        return;
      }
      PreviewerLoginFragment.this.updateUiForLogInProgress(false);
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
      PreviewerLoginFragment.this.updateUiForLogInProgress(true);
    }
  }
  
  private final class FBLoginDialogListener
    implements Facebook.DialogListener
  {
    private FBLoginDialogListener() {}
    
    public void onCancel()
    {
      SessionEvents.onLoginError("Action Canceled");
    }
    
    public void onComplete(Bundle paramBundle)
    {
      SessionEvents.onLoginSuccess();
      PreviewerLoginFragment.this.executeAuthWithFacebookTask();
    }
    
    public void onError(DialogError paramDialogError)
    {
      SessionEvents.onLoginError(paramDialogError.getMessage());
      Toast.makeText(PreviewerLoginFragment.this.getActivity(), paramDialogError.getMessage(), 1).show();
    }
    
    public void onFacebookError(FacebookError paramFacebookError)
    {
      SessionEvents.onLoginError(paramFacebookError.getMessage());
      Toast.makeText(PreviewerLoginFragment.this.getActivity(), paramFacebookError.getMessage(), 1).show();
    }
  }
  
  private class GoogleSignInAsyncTask
    extends AsyncTask<Void, Void, String>
  {
    protected String mEmail;
    private JSONObject mProfile = null;
    protected int mRequestCode;
    protected String mScope;
    
    public GoogleSignInAsyncTask(String paramString1, String paramString2, int paramInt)
    {
      this.mScope = paramString2;
      this.mEmail = paramString1;
      this.mRequestCode = paramInt;
    }
    
    private JSONObject fetchProfileFromGoogleServer(String paramString)
      throws IOException, JSONException, HttpResponseException
    {
      HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL("https://www.googleapis.com/oauth2/v1/userinfo?access_token=" + paramString).openConnection();
      int i = localHttpURLConnection.getResponseCode();
      if (i == 200) {
        return new JSONObject(DataUtil.readString(localHttpURLConnection.getInputStream()));
      }
      if ((i == 401) && (PreviewerLoginFragment.this.getActivity() != null)) {
        GoogleAuthUtil.invalidateToken(PreviewerLoginFragment.this.getActivity(), paramString);
      }
      throw new HttpResponseException(i, "Server returned error: " + i);
    }
    
    private void showPlayServicesErrorDialog(final int paramInt)
    {
      if (PreviewerLoginFragment.this.getActivity() == null) {
        return;
      }
      PreviewerLoginFragment.this.getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          if (PreviewerLoginFragment.this.getActivity() == null) {
            return;
          }
          GooglePlayServicesUtil.getErrorDialog(paramInt, PreviewerLoginFragment.this.getActivity(), 1001).show();
        }
      });
    }
    
    protected String doInBackground(Void... paramVarArgs)
    {
      Object localObject6 = null;
      Object localObject7 = null;
      Object localObject8 = null;
      Object localObject9 = null;
      Object localObject10 = null;
      Object localObject11 = null;
      paramVarArgs = null;
      Object localObject12 = PreviewerLoginFragment.this.getActivity();
      if (localObject12 == null) {
        return null;
      }
      Void[] arrayOfVoid = paramVarArgs;
      Object localObject1 = localObject6;
      Object localObject2 = localObject7;
      Object localObject3 = localObject8;
      Object localObject4 = localObject9;
      Object localObject5 = localObject10;
      try
      {
        this.mProfile = fetchProfileFromGoogleServer(GoogleAuthUtil.getToken((Context)localObject12, this.mEmail, this.mScope));
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        localObject12 = new HashMap();
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        ((Map)localObject12).put("id", this.mProfile.getString("id"));
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        ((Map)localObject12).put("email", this.mEmail);
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        if (this.mProfile.has("given_name"))
        {
          arrayOfVoid = paramVarArgs;
          localObject1 = localObject6;
          localObject2 = localObject7;
          localObject3 = localObject8;
          localObject4 = localObject9;
          localObject5 = localObject10;
          ((Map)localObject12).put("given_name", this.mProfile.getString("given_name"));
        }
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        if (this.mProfile.has("family_name"))
        {
          arrayOfVoid = paramVarArgs;
          localObject1 = localObject6;
          localObject2 = localObject7;
          localObject3 = localObject8;
          localObject4 = localObject9;
          localObject5 = localObject10;
          ((Map)localObject12).put("family_name", this.mProfile.getString("family_name"));
        }
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        localObject12 = new JSONObject(HTTPUtil.performPostRequest(PreviewerLoginFragment.SERVER_BASE_URL + "googlemobauth.ashx", (Map)localObject12));
        arrayOfVoid = paramVarArgs;
        localObject1 = localObject6;
        localObject2 = localObject7;
        localObject3 = localObject8;
        localObject4 = localObject9;
        localObject5 = localObject10;
        if (((JSONObject)localObject12).getString("resp").equals("success"))
        {
          paramVarArgs = "OK";
          arrayOfVoid = paramVarArgs;
          localObject1 = paramVarArgs;
          localObject2 = paramVarArgs;
          localObject3 = paramVarArgs;
          localObject4 = paramVarArgs;
          localObject5 = paramVarArgs;
          new PreviewerLoginFragment.AuthTask(PreviewerLoginFragment.this, PreviewerLoginFragment.this).execute(new String[] { ((JSONObject)localObject12).getString("username"), ((JSONObject)localObject12).getString("password") });
        }
        else
        {
          arrayOfVoid = paramVarArgs;
          localObject1 = localObject6;
          localObject2 = localObject7;
          localObject3 = localObject8;
          localObject4 = localObject9;
          localObject5 = localObject10;
          PreviewerLoginFragment.this.showErrorOnMainThread(((JSONObject)localObject12).getString("error").toString());
          paramVarArgs = localObject11;
        }
      }
      catch (GooglePlayServicesAvailabilityException paramVarArgs)
      {
        showPlayServicesErrorDialog(paramVarArgs.getConnectionStatusCode());
        paramVarArgs = arrayOfVoid;
      }
      catch (UserRecoverableAuthException paramVarArgs)
      {
        PreviewerLoginFragment.this.startActivityForResult(paramVarArgs.getIntent(), this.mRequestCode);
        paramVarArgs = (Void[])localObject1;
      }
      catch (GoogleAuthException paramVarArgs)
      {
        Log.w("PreviewerLoginFragment", "Google Auth unrecoverable error: " + paramVarArgs.getMessage(), paramVarArgs);
        PreviewerLoginFragment.this.showErrorOnMainThread("Unrecoverable error: " + paramVarArgs.getMessage());
        paramVarArgs = (Void[])localObject2;
      }
      catch (IOException paramVarArgs)
      {
        PreviewerLoginFragment.this.showErrorOnMainThread(PreviewerLoginFragment.access$1400(PreviewerLoginFragment.this));
        paramVarArgs = (Void[])localObject3;
      }
      catch (JSONException paramVarArgs)
      {
        Log.w("Bad response: " + paramVarArgs.getMessage(), paramVarArgs);
        PreviewerLoginFragment.this.showErrorOnMainThread(2131361933);
        paramVarArgs = (Void[])localObject4;
      }
      catch (HttpResponseException paramVarArgs)
      {
        PreviewerLoginFragment.this.showErrorOnMainThread(2131361946);
        paramVarArgs = (Void[])localObject5;
      }
      return paramVarArgs;
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      if (PreviewerLoginFragment.this.getActivity() == null) {}
      while (paramString != null) {
        return;
      }
      PreviewerLoginFragment.this.updateUiForLogInProgress(false);
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
      PreviewerLoginFragment.this.updateUiForLogInProgress(true);
    }
  }
  
  static abstract interface OnLoginListener
  {
    public abstract void onLogin();
  }
}
