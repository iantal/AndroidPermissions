package com.qbiki.mbfx;

import android.app.Activity;
import android.net.Uri;
import android.util.Log;
import com.google.analytics.tracking.android.GoogleAnalytics;
import com.google.analytics.tracking.android.Tracker;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.Page;
import com.qbiki.util.DataUtil;
import com.qbiki.util.asyncrequester.Requester;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Map;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONStringer;

public class DynamicHTML
{
  public static final int PROGRESS_ERROR_FILE_NOT_FOUND = 2;
  public static final int PROGRESS_ERROR_INCORRECT_URL = 5;
  public static final int PROGRESS_ERROR_JSON_EXCEPTION = 3;
  public static final int PROGRESS_ERROR_NO_DATA = 1;
  public static final int PROGRESS_ERROR_OTHER = -1;
  public static final int PROGRESS_ERROR_TIMEOUT = 4;
  private static final int REQUEST_TIMEOUT_SECONDS = 30;
  public static String TAG = "DynamicHTML";
  
  public DynamicHTML() {}
  
  public static Object getJSONforPath(Object paramObject, String paramString)
  {
    Object localObject1 = paramObject;
    Object localObject2 = localObject1;
    String[] arrayOfString;
    if (paramObject != null)
    {
      localObject2 = localObject1;
      if (paramString != null)
      {
        arrayOfString = paramString.split("\\.");
        localObject2 = localObject1;
        if ((localObject1.getClass().equals(JSONObject.class)) && (paramString.indexOf(".") != -1)) {
          break label106;
        }
      }
    }
    label106:
    do
    {
      try
      {
        localObject2 = ((JSONObject)localObject1).get(paramString);
        return localObject2;
      }
      catch (JSONException paramObject)
      {
        paramObject.printStackTrace();
        return localObject1;
      }
      catch (NullPointerException paramObject)
      {
        Log.e(TAG, "getJSONforPath: " + paramObject);
        return localObject1;
      }
      localObject2 = localObject1;
    } while (arrayOfString.length <= 0);
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      localObject2 = localObject1;
      if (i >= j) {
        break;
      }
      paramObject = arrayOfString[i];
      try
      {
        Log.e(TAG, "KEY: " + paramObject);
        paramObject = ((JSONObject)localObject1).get(paramObject);
        i += 1;
        localObject1 = paramObject;
      }
      catch (JSONException paramObject)
      {
        for (;;)
        {
          Log.e(TAG, "getJSONforPath: " + paramString);
          paramObject = localObject1;
        }
      }
      catch (NullPointerException paramObject)
      {
        for (;;)
        {
          Log.e(TAG, "getJSONforPath: " + paramObject);
          paramObject = localObject1;
        }
      }
    }
  }
  
  public static JSONObject getJsonForItem(int paramInt, JSONObject paramJSONObject)
  {
    if (paramInt != -1) {
      try
      {
        Object localObject = paramJSONObject.getJSONArray("items");
        if ((localObject != null) && (((JSONArray)localObject).length() > paramInt))
        {
          localObject = ((JSONArray)localObject).getJSONObject(paramInt);
          return localObject;
        }
        return null;
      }
      catch (JSONException localJSONException)
      {
        Log.e("getJsonForRssItem", "Error getting JSONObject");
      }
    }
    return paramJSONObject;
  }
  
  public static String getJsonParamFromUrl(String paramString)
  {
    String str2 = "";
    try
    {
      int i = paramString.indexOf("?");
      String str1 = str2;
      if (i != -1)
      {
        paramString = paramString.substring(i + 1);
        i = paramString.indexOf("=");
        str1 = str2;
        if (i != -1)
        {
          str1 = str2;
          if (paramString != null)
          {
            str1 = str2;
            if (!paramString.equalsIgnoreCase(""))
            {
              String str3 = paramString.substring(0, i);
              str1 = str2;
              if (str3 != null)
              {
                str1 = str2;
                if (str3.equalsIgnoreCase("jsonurl")) {
                  str1 = paramString.substring(i + 1);
                }
              }
            }
          }
        }
      }
      return str1;
    }
    catch (Exception paramString)
    {
      Log.e(TAG, "getNamedParamFromUrl: " + paramString);
    }
    return "";
  }
  
  public static String getNamedParamFromUrl(String paramString1, String paramString2)
  {
    String str = "";
    Object localObject1 = str;
    try
    {
      int i = paramString1.indexOf("?");
      Object localObject2 = str;
      if (i != -1)
      {
        localObject1 = str;
        String[] arrayOfString = paramString1.substring(i + 1).split("&");
        i = 0;
        for (paramString1 = str;; paramString1 = (String)localObject1)
        {
          localObject1 = paramString1;
          localObject2 = paramString1;
          if (i >= arrayOfString.length) {
            break;
          }
          localObject2 = arrayOfString[i];
          localObject1 = paramString1;
          int j = ((String)localObject2).indexOf("=");
          localObject1 = paramString1;
          if (j != -1)
          {
            localObject1 = paramString1;
            str = ((String)localObject2).substring(0, j);
            localObject1 = paramString1;
            localObject2 = ((String)localObject2).substring(j + 1);
            localObject1 = paramString1;
            boolean bool = str.equalsIgnoreCase(paramString2);
            localObject1 = paramString1;
            if (bool) {
              localObject1 = localObject2;
            }
          }
          i += 1;
        }
      }
      return localObject2;
    }
    catch (Exception paramString1)
    {
      Log.e(TAG, "getNamedParamFromUrl: " + paramString1);
      localObject2 = localObject1;
    }
  }
  
  public static String processDynamicBlock(String paramString, Object paramObject)
  {
    String str1 = null;
    if (paramObject.getClass().equals(JSONObject.class))
    {
      localObject1 = (JSONObject)paramObject;
      localObject1 = str1;
    }
    Object localObject2;
    for (;;)
    {
      str1 = paramString;
      if (localObject1 == null) {
        break label210;
      }
      str1 = "";
      i = 0;
      for (;;)
      {
        if (i >= ((JSONArray)localObject1).length()) {
          break label210;
        }
        localObject2 = "";
        try
        {
          String str2 = processDynamicBlock(paramString, ((JSONArray)localObject1).get(i));
          localObject2 = str2;
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            Log.e(TAG, "processDynamicBlock Array index: " + i);
          }
        }
        catch (NullPointerException localNullPointerException)
        {
          for (;;)
          {
            Log.e(TAG, "processDynamicBlock: " + localNullPointerException);
          }
        }
        str1 = str1 + (String)localObject2;
        i += 1;
      }
      if (paramObject.getClass().equals(JSONArray.class))
      {
        localObject1 = (JSONArray)paramObject;
      }
      else
      {
        localObject1 = str1;
        if (paramObject.getClass().equals(JSONStringer.class))
        {
          localObject1 = (JSONStringer)paramObject;
          localObject1 = str1;
        }
      }
    }
    label210:
    Object localObject1 = str1;
    int i = ((String)localObject1).indexOf("[%for-each");
    for (paramString = str1; i != -1; paramString = str1)
    {
      localObject1 = ((String)localObject1).substring(i);
      i = ((String)localObject1).indexOf("[%end for-each%]");
      str1 = paramString;
      if (i != -1)
      {
        localObject2 = ((String)localObject1).substring(0, i + 16);
        int j = ((String)localObject1).indexOf("%]");
        str1 = paramString;
        if (j != -1)
        {
          str1 = ((String)localObject1).substring(11, j);
          str1 = paramString.replace((CharSequence)localObject2, processDynamicBlock(((String)localObject1).substring(j + 2, i), getJSONforPath(paramObject, str1)));
        }
      }
      localObject1 = str1;
      i = ((String)localObject1).indexOf("[%for-each");
    }
    localObject1 = paramString;
    i = ((String)localObject1).indexOf("[%=");
    str1 = paramString;
    for (;;)
    {
      if (i != -1)
      {
        localObject1 = ((String)localObject1).substring(i);
        i = ((String)localObject1).indexOf("%]");
        paramString = str1;
        Object localObject3;
        if (i != -1)
        {
          localObject2 = ((String)localObject1).substring(0, i + 2);
          i = ((String)localObject1).indexOf("%]");
          paramString = str1;
          if (i != -1)
          {
            localObject3 = getJSONforPath(paramObject, ((String)localObject1).substring(3, i));
            localObject1 = "";
          }
        }
        try
        {
          if (localObject3.getClass().equals(JSONStringer.class)) {
            paramString = ((JSONStringer)localObject3).toString();
          }
          for (;;)
          {
            paramString = str1.replace((CharSequence)localObject2, paramString.toString());
            localObject1 = paramString;
            i = ((String)localObject1).indexOf("[%=");
            str1 = paramString;
            break;
            paramString = (String)localObject1;
            if (localObject3.getClass().equals(String.class)) {
              paramString = (String)localObject3;
            }
          }
        }
        catch (NullPointerException paramString)
        {
          for (;;)
          {
            Log.e(TAG, "processDynamicBlock Process values: " + paramString);
            paramString = (String)localObject1;
          }
        }
      }
    }
    return str1;
  }
  
  public static void processDynamicData(String paramString, JSONObject paramJSONObject, Activity paramActivity, ProgressObserver paramProgressObserver)
  {
    paramProgressObserver.onProgressStart();
    Object localObject = Uri.parse(paramString);
    String str2 = ((Uri)localObject).getLastPathSegment();
    Page localPage = (Page)App.appConfig.getPages().get(str2);
    int i = -1;
    if (((Uri)localObject).getQueryParameter("itemid") != null) {}
    try
    {
      i = Integer.parseInt(((Uri)localObject).getQueryParameter("itemid").trim());
      if ((localPage == null) || (!localPage.isDynamicData())) {}
    }
    catch (Exception localException)
    {
      for (;;)
      {
        try
        {
          str3 = DataUtil.readString(App.getResourceStream(localPage.getId()));
          localObject = getJsonParamFromUrl(paramString);
          paramString = (String)localObject;
          if (((String)localObject).equalsIgnoreCase("")) {
            paramString = localPage.getJsonURL();
          }
          if (paramJSONObject != null) {
            continue;
          }
          paramString = replaceMBFXContextinURL(paramString);
        }
        catch (FileNotFoundException paramString)
        {
          String str3;
          int j;
          Log.e(TAG, "dynamic page: " + paramString, paramString);
          paramProgressObserver.onProgressError(2);
          paramProgressObserver.onProgressFinished();
          return;
          paramJSONObject = getJsonForItem(i, paramJSONObject);
          continue;
          str1 = paramJSONObject.getString("identifier");
          paramString = str1;
          if (str1 != null) {
            break label575;
          }
          paramString = paramJSONObject.getString("title");
          break label575;
          if (GoogleAnalytics.getInstance(paramActivity).getDefaultTracker() == null) {
            continue;
          }
          GoogleAnalytics.getInstance(paramActivity).getDefaultTracker().trackView(str2 + "_" + str1);
          continue;
        }
        catch (ConnectTimeoutException paramString)
        {
          Log.e(TAG, "dynamic page: " + paramString, paramString);
          paramProgressObserver.onProgressError(4);
          paramProgressObserver.onProgressFinished();
          return;
        }
        catch (IOException paramString)
        {
          Log.e(TAG, "dynamic page: " + paramString, paramString);
          paramProgressObserver.onProgressError(1);
          paramProgressObserver.onProgressFinished();
          return;
        }
        catch (JSONException paramString)
        {
          Log.e(TAG, "dynamic page: " + paramString, paramString);
          paramProgressObserver.onProgressError(3);
          paramProgressObserver.onProgressFinished();
          return;
        }
        try
        {
          paramString = new HttpGet(paramString);
          paramJSONObject = new BasicHttpParams();
          HttpConnectionParams.setConnectionTimeout(paramJSONObject, 30000);
          paramJSONObject = Requester.getResponseBody((BasicHttpResponse)new DefaultHttpClient(paramJSONObject).execute(paramString));
          j = paramJSONObject.indexOf("{");
          paramString = paramJSONObject;
          if (j != -1) {
            paramString = paramJSONObject.substring(j);
          }
          paramJSONObject = new JSONObject(paramString);
          if (i != -1) {
            continue;
          }
          if (GoogleAnalytics.getInstance(paramActivity).getDefaultTracker() != null) {
            GoogleAnalytics.getInstance(paramActivity).getDefaultTracker().trackView(str2);
          }
          paramString = replaceMBFXContext(processDynamicBlock(str3, paramJSONObject));
          if ((paramString != null) && (!paramString.equalsIgnoreCase(""))) {
            paramProgressObserver.onProgressComplete(paramString);
          }
          paramProgressObserver.onProgressFinished();
          return;
        }
        catch (IllegalStateException paramString)
        {
          new JSONObject("{}");
          paramProgressObserver.onProgressError(5);
          paramProgressObserver.onProgressFinished();
          return;
        }
        localException = localException;
        i = -1;
      }
    }
    for (;;)
    {
      paramProgressObserver.onProgressError(-1);
      paramProgressObserver.onProgressFinished();
      return;
      label575:
      String str1 = paramString;
      if (paramString == null) {
        str1 = "";
      }
    }
  }
  
  public static String replaceMBFXContext(String paramString)
  {
    String str2 = paramString;
    int i = str2.indexOf("{%=");
    for (String str1 = paramString;; str1 = paramString)
    {
      if (i == -1) {
        return str1;
      }
      str2 = str2.substring(i);
      i = str2.indexOf("%}");
      paramString = str1;
      String str3;
      if (i != -1)
      {
        str3 = str2.substring(0, i + 2);
        i = str2.indexOf("%}");
        paramString = str1;
        if (i != -1)
        {
          str2 = str2.substring(3, i);
          paramString = "";
        }
      }
      try
      {
        str2 = (String)User.class.getField(str2).get(MBFXContext.getSessionUser());
        paramString = str2;
      }
      catch (SecurityException localSecurityException)
      {
        for (;;)
        {
          Log.e(TAG, "replaceMBFXContext: " + localSecurityException);
        }
      }
      catch (NoSuchFieldException localNoSuchFieldException)
      {
        for (;;)
        {
          Log.e(TAG, "replaceMBFXContext: " + localNoSuchFieldException);
        }
      }
      catch (IllegalArgumentException localIllegalArgumentException)
      {
        for (;;)
        {
          Log.e(TAG, "replaceMBFXContext: " + localIllegalArgumentException);
        }
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        for (;;)
        {
          Log.e(TAG, "replaceMBFXContext: " + localIllegalAccessException);
        }
      }
      catch (NullPointerException localNullPointerException)
      {
        for (;;)
        {
          Log.e(TAG, "replaceMBFXContext: " + localNullPointerException);
        }
      }
      str2 = paramString;
      if (paramString == null) {
        str2 = "";
      }
      paramString = str1.replace(str3, str2.toString());
      str2 = paramString;
      i = str2.indexOf("{%=");
    }
    return str1;
  }
  
  public static String replaceMBFXContextinURL(String paramString)
  {
    String str1 = paramString;
    String str2 = str1;
    if (paramString != null)
    {
      paramString = str1;
      int i = paramString.indexOf("{");
      for (;;)
      {
        str2 = str1;
        if (i == -1) {
          return str2;
        }
        str2 = paramString.substring(i);
        i = str2.indexOf("}");
        paramString = str1;
        String str3;
        if (i != -1)
        {
          str3 = str2.substring(0, i + 1);
          i = str2.indexOf("}");
          paramString = str1;
          if (i != -1)
          {
            str2 = str2.substring(1, i);
            paramString = "";
          }
        }
        try
        {
          str2 = (String)User.class.getField(str2).get(MBFXContext.getSessionUser());
          paramString = str2;
        }
        catch (SecurityException localSecurityException)
        {
          for (;;)
          {
            Log.e(TAG, "replaceMBFXContextinURL: " + localSecurityException);
          }
        }
        catch (NoSuchFieldException localNoSuchFieldException)
        {
          for (;;)
          {
            Log.e(TAG, "replaceMBFXContextinURL: " + localNoSuchFieldException);
          }
        }
        catch (IllegalArgumentException localIllegalArgumentException)
        {
          for (;;)
          {
            Log.e(TAG, "replaceMBFXContextinURL: " + localIllegalArgumentException);
          }
        }
        catch (IllegalAccessException localIllegalAccessException)
        {
          for (;;)
          {
            Log.e(TAG, "replaceMBFXContextinURL: " + localIllegalAccessException);
          }
        }
        catch (NullPointerException localNullPointerException)
        {
          for (;;)
          {
            Log.e(TAG, "replaceMBFXContextinURL: " + localNullPointerException);
          }
        }
        paramString = str1.replace(str3, paramString.toString());
        str2 = paramString;
        i = str2.indexOf("{");
        str1 = paramString;
        paramString = str2;
      }
    }
    return localNullPointerException;
  }
  
  public static abstract interface ProgressObserver
  {
    public abstract void onProgressComplete(String paramString);
    
    public abstract void onProgressError(int paramInt);
    
    public abstract void onProgressFinished();
    
    public abstract void onProgressStart();
  }
}
