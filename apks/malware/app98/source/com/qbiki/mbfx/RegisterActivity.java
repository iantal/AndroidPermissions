package com.qbiki.mbfx;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.asyncrequester.Requester;
import com.qbiki.util.asyncrequester.ResponseListener;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

public class RegisterActivity
  extends SCActivity
  implements ResponseListener
{
  private static final String TAG = "RegisterActivity";
  private EditText emailET = null;
  private String[] genders = { "-", "Male", "Female", "Prefer not to say" };
  private Spinner mGenderSpinner;
  private EditText passwordET = null;
  private ProgressDialog progressDialog = null;
  private int progressDialogCount = 0;
  private Button registerBtn = null;
  private String registerURL = null;
  private User tmpUser = null;
  private EditText usernameET = null;
  
  public RegisterActivity() {}
  
  private void dismissProgressDialog()
  {
    try
    {
      this.progressDialogCount -= 1;
      if (this.progressDialogCount < 0) {
        this.progressDialogCount = 0;
      }
      Log.v("RegisterActivity", "dismissProgressDialog: " + this.progressDialogCount);
      if ((this.progressDialogCount == 0) && (this.progressDialog != null)) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally {}
  }
  
  private void registerAction()
  {
    try
    {
      String str1 = this.usernameET.getText().toString();
      String str2 = this.passwordET.getText().toString();
      String str3 = this.emailET.getText().toString();
      Integer localInteger = Integer.valueOf(this.mGenderSpinner.getSelectedItemPosition());
      this.tmpUser = new User();
      this.tmpUser.username = str1;
      this.tmpUser.gender = this.genders[localInteger.intValue()];
      ((InputMethodManager)getSystemService("input_method")).hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 2);
      HttpPost localHttpPost = new HttpPost(this.registerURL);
      ArrayList localArrayList = new ArrayList(6);
      localArrayList.add(new BasicNameValuePair("username", str1));
      localArrayList.add(new BasicNameValuePair("password", str2));
      localArrayList.add(new BasicNameValuePair("email", str3));
      localArrayList.add(new BasicNameValuePair("gender", localInteger.toString()));
      localHttpPost.setEntity(new UrlEncodedFormEntity(localArrayList));
      showProgressDialog();
      Requester.sendRequest(localHttpPost, this);
      return;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      Log.e("RegisterActivity", "loginAction: " + localUnsupportedEncodingException, localUnsupportedEncodingException);
    }
  }
  
  private void showProgressDialog()
  {
    try
    {
      this.progressDialogCount += 1;
      Log.v("RegisterActivity", "showProgressDialog: " + this.progressDialogCount);
      if (this.progressDialogCount == 1)
      {
        this.progressDialog = new ProgressDialog(this);
        this.progressDialog.setProgressStyle(0);
        this.progressDialog.setMessage("Please wait...");
        this.progressDialog.setCancelable(true);
        this.progressDialog.setTitle("Retrieving Password");
        this.progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymousDialogInterface) {}
        });
        this.progressDialog.show();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903161);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null) {
      this.registerURL = paramBundle.getString("registerURL");
    }
    this.usernameET = ((EditText)findViewById(2131100007));
    this.passwordET = ((EditText)findViewById(2131100008));
    this.emailET = ((EditText)findViewById(2131100009));
    this.mGenderSpinner = ((Spinner)findViewById(2131100010));
    paramBundle = new ArrayAdapter(this, 17367048, this.genders);
    paramBundle.setDropDownViewResource(17367049);
    this.mGenderSpinner.setAdapter(paramBundle);
    this.mGenderSpinner.setSelection(this.genders.length - 1);
    this.registerBtn = ((Button)findViewById(2131100011));
    this.registerBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        RegisterActivity.this.registerAction();
      }
    });
  }
  
  public void onResponseReceived(HttpResponse paramHttpResponse)
  {
    dismissProgressDialog();
    paramHttpResponse = Requester.getResponseBody(paramHttpResponse);
    long l1 = 0L;
    try
    {
      localJSONObject = new JSONObject(paramHttpResponse);
    }
    catch (JSONException localJSONException1)
    {
      JSONObject localJSONObject;
      long l2;
      label34:
      for (;;) {}
    }
    try
    {
      l2 = localJSONObject.getLong("ok");
      l1 = l2;
    }
    catch (JSONException localJSONException2)
    {
      break label34;
    }
    if (l1 != 0L)
    {
      this.tmpUser.userid = new Long(l1).toString();
      paramHttpResponse = new AlertDialog.Builder(this);
      paramHttpResponse.setMessage("Registered successfully!").setCancelable(true).setPositiveButton("OK", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface = new Intent();
          paramAnonymousDialogInterface.putExtra("user", RegisterActivity.this.tmpUser);
          RegisterActivity.this.setResult(-1, paramAnonymousDialogInterface);
          RegisterActivity.this.finish();
        }
      });
      paramHttpResponse.setTitle("Register");
      paramHttpResponse.create().show();
      return;
    }
    DialogUtil.showAlert(this, "Register", paramHttpResponse);
  }
  
  public void onResponseTimeout()
  {
    dismissProgressDialog();
    DialogUtil.showAlert(this, "ERROR", "Server is NOT responding.");
  }
}
