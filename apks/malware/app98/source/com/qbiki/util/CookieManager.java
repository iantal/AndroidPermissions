package com.qbiki.util;

import android.annotation.SuppressLint;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class CookieManager
{
  private static final String DATE_FORMAT = "EEE, dd-MMM-yyyy hh:mm:ss z";
  private static final char DOT = '.';
  private static final String EXPIRES = "expires";
  private static final String SET_COOKIE = "Set-Cookie";
  private DateFormat dateFormat = new SimpleDateFormat("EEE, dd-MMM-yyyy hh:mm:ss z");
  private Map<String, Map<String, Map<String, String>>> store = new HashMap();
  
  @SuppressLint({"SimpleDateFormat"})
  public CookieManager() {}
  
  private String getDomainFromHost(String paramString)
  {
    String str = paramString;
    if (paramString.indexOf('.') != paramString.lastIndexOf('.')) {
      str = paramString.substring(paramString.indexOf('.') + 1);
    }
    return str;
  }
  
  private String getHost(String paramString)
  {
    int j = paramString.indexOf("://") + 3;
    int i = j;
    if (j == -1) {
      i = 0;
    }
    String str = paramString;
    if (paramString.indexOf("/", i) > -1) {
      str = paramString.substring(0, paramString.indexOf("/", i));
    }
    return str;
  }
  
  private boolean isNotExpired(String paramString)
  {
    if (paramString == null) {}
    for (;;)
    {
      return true;
      Date localDate = new Date();
      try
      {
        int i = localDate.compareTo(this.dateFormat.parse(paramString));
        if (i > 0) {
          return false;
        }
      }
      catch (ParseException paramString)
      {
        paramString.printStackTrace();
      }
    }
    return false;
  }
  
  public HashMap<String, String> getCookie(String paramString)
    throws IOException
  {
    paramString = getDomainFromHost(getHost(paramString));
    Object localObject = (Map)this.store.get(paramString);
    if (localObject == null) {}
    for (;;)
    {
      return null;
      try
      {
        Iterator localIterator = ((Map)localObject).keySet().iterator();
        do
        {
          if (!localIterator.hasNext()) {
            break;
          }
          paramString = (Map)((Map)localObject).get((String)localIterator.next());
        } while (!isNotExpired((String)paramString.get("expires")));
        localObject = new HashMap();
        ((HashMap)localObject).put("Authorization", ((String)paramString.get("Authorization")).toString());
        return localObject;
      }
      catch (IllegalStateException paramString)
      {
        throw paramString;
      }
    }
  }
  
  public boolean removeCookie(String paramString)
  {
    paramString = getDomainFromHost(getHost(paramString));
    return this.store.remove(paramString) != null;
  }
  
  /* Error */
  public void setCookies(HttpURLConnection paramHttpURLConnection)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokevirtual 155	java/net/HttpURLConnection:getURL	()Ljava/net/URL;
    //   5: invokevirtual 159	java/net/URL:getHost	()Ljava/lang/String;
    //   8: invokespecial 102	com/qbiki/util/CookieManager:getDomainFromHost	(Ljava/lang/String;)Ljava/lang/String;
    //   11: astore_2
    //   12: aload_0
    //   13: getfield 34	com/qbiki/util/CookieManager:store	Ljava/util/Map;
    //   16: aload_2
    //   17: invokeinterface 108 2 0
    //   22: checkcast 104	java/util/Map
    //   25: astore_2
    //   26: aload_2
    //   27: ifnonnull +4 -> 31
    //   30: return
    //   31: aload_2
    //   32: invokeinterface 112 1 0
    //   37: invokeinterface 118 1 0
    //   42: astore_3
    //   43: aload_3
    //   44: invokeinterface 124 1 0
    //   49: ifeq -19 -> 30
    //   52: aload_2
    //   53: aload_3
    //   54: invokeinterface 128 1 0
    //   59: checkcast 47	java/lang/String
    //   62: invokeinterface 108 2 0
    //   67: checkcast 104	java/util/Map
    //   70: astore 4
    //   72: aload_0
    //   73: aload 4
    //   75: ldc 14
    //   77: invokeinterface 108 2 0
    //   82: checkcast 47	java/lang/String
    //   85: invokespecial 130	com/qbiki/util/CookieManager:isNotExpired	(Ljava/lang/String;)Z
    //   88: ifeq -45 -> 43
    //   91: aload_1
    //   92: ldc -124
    //   94: aload 4
    //   96: ldc -124
    //   98: invokeinterface 108 2 0
    //   103: checkcast 47	java/lang/String
    //   106: invokevirtual 136	java/lang/String:toString	()Ljava/lang/String;
    //   109: invokevirtual 163	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   112: goto -69 -> 43
    //   115: astore_1
    //   116: new 96	java/io/IOException
    //   119: dup
    //   120: ldc -91
    //   122: invokespecial 166	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   125: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	126	0	this	CookieManager
    //   0	126	1	paramHttpURLConnection	HttpURLConnection
    //   11	42	2	localObject	Object
    //   42	12	3	localIterator	Iterator
    //   70	25	4	localMap	Map
    // Exception table:
    //   from	to	target	type
    //   31	43	115	java/lang/IllegalStateException
    //   43	112	115	java/lang/IllegalStateException
  }
  
  public void storeCookies(HttpURLConnection paramHttpURLConnection, HashMap<String, String> paramHashMap)
    throws IOException
  {
    Object localObject2 = getDomainFromHost(paramHttpURLConnection.getURL().getHost());
    Object localObject1;
    if (this.store.containsKey(localObject2)) {
      localObject1 = (Map)this.store.get(localObject2);
    }
    for (;;)
    {
      localObject2 = new HashMap();
      if ((paramHashMap != null) && (paramHashMap.containsKey("Authorization"))) {
        break;
      }
      return;
      localObject1 = new HashMap();
      this.store.put(localObject2, localObject1);
    }
    int i = 1;
    for (;;)
    {
      String str1 = paramHttpURLConnection.getHeaderFieldKey(i);
      if (str1 == null) {
        break;
      }
      if ((str1.equalsIgnoreCase("Set-Cookie")) || (str1.equalsIgnoreCase("Persistent-Auth")))
      {
        String str2 = paramHttpURLConnection.getHeaderField(i);
        if ((!StringUtil.isEmpty(str2)) || ((str2.equalsIgnoreCase("true")) && (str1.equalsIgnoreCase("Persistent-Auth"))))
        {
          ((Map)localObject2).put("Authorization", (String)paramHashMap.get("Authorization"));
          paramHashMap = Calendar.getInstance();
          paramHashMap.setTime(new Date());
          paramHashMap.add(10, 1);
          ((Map)localObject2).put("EXPIRES", this.dateFormat.format(paramHashMap.getTime()));
          ((Map)localObject1).put(paramHttpURLConnection.getURL().getPath(), localObject2);
          return;
        }
      }
      i += 1;
    }
  }
  
  public String toString()
  {
    return this.store.toString();
  }
}
