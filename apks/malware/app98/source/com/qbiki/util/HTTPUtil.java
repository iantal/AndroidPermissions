package com.qbiki.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class HTTPUtil
{
  public static final int DEFAULT_NETWORK_TIMEOUT = 30000;
  public static final String HTTP_MOVED_TEMP = "302 - MOVED_TEMP";
  public static final String HTTP_REQUEST_TIMEOUT = "408 - Request Timeout";
  public static final String HTTP_UNAUTHORIZED = "401 - UNAUTHORIZED";
  public static CookieManager cm = null;
  
  public HTTPUtil() {}
  
  public static HashMap<String, String> getRequestPropertyForDomain(String paramString)
    throws IOException
  {
    if (cm != null) {}
    for (paramString = cm.getCookie(paramString); (paramString != null) && (paramString.containsKey("Authorization")); paramString = null) {
      return paramString;
    }
    return null;
  }
  
  public static String getUrlEncodedParameterString(Map<String, String> paramMap)
  {
    if ((paramMap == null) || (paramMap.size() == 0)) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder(paramMap.size() * 20);
    Iterator localIterator = paramMap.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str1 = (String)localIterator.next();
      if (str1 != null)
      {
        String str2 = (String)paramMap.get(str1);
        if (str2 != null) {
          try
          {
            localStringBuilder.append(URLEncoder.encode(str1, "UTF-8"));
            localStringBuilder.append("=");
            localStringBuilder.append(URLEncoder.encode(str2, "UTF-8"));
            localStringBuilder.append("&");
          }
          catch (UnsupportedEncodingException localUnsupportedEncodingException) {}
        }
      }
    }
    if (localStringBuilder.length() > 0) {
      localStringBuilder.delete(localStringBuilder.length() - 1, localStringBuilder.length());
    }
    return localStringBuilder.toString();
  }
  
  public static InputStream getUrlStream(String paramString)
    throws IOException
  {
    return getUrlStream(paramString, 30000, null, false);
  }
  
  public static InputStream getUrlStream(String paramString, int paramInt, HashMap<String, String> paramHashMap)
    throws IOException
  {
    return getUrlStream(paramString, paramInt, paramHashMap, false);
  }
  
  public static InputStream getUrlStream(String paramString, int paramInt, HashMap<String, String> paramHashMap, boolean paramBoolean)
    throws IOException
  {
    return getUrlStream(paramString, paramInt, paramHashMap, paramBoolean, -1);
  }
  
  public static InputStream getUrlStream(String paramString, int paramInt1, HashMap<String, String> paramHashMap, boolean paramBoolean, int paramInt2)
    throws IOException
  {
    if ((cm == null) && (paramBoolean)) {
      cm = new CookieManager();
    }
    HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL(paramString).openConnection();
    do
    {
      int i;
      do
      {
        try
        {
          localHttpURLConnection.setReadTimeout(paramInt1);
          localHttpURLConnection.setConnectTimeout(paramInt1);
          localHttpURLConnection.setRequestMethod("GET");
          if (paramHashMap != null)
          {
            paramString = paramHashMap.keySet().iterator();
            while (paramString.hasNext())
            {
              localObject = (String)paramString.next();
              localHttpURLConnection.setRequestProperty((String)localObject, (String)paramHashMap.get(localObject));
            }
          }
          localObject = paramString;
        }
        catch (IOException paramString)
        {
          if (localHttpURLConnection.getResponseCode() == 401)
          {
            throw new HttpUnauthorizedException("401 - UNAUTHORIZED");
            if (paramBoolean) {
              cm.setCookies(localHttpURLConnection);
            }
            localHttpURLConnection.setDoInput(true);
            localHttpURLConnection.connect();
            if (paramBoolean) {
              cm.storeCookies(localHttpURLConnection, paramHashMap);
            }
            paramString = localHttpURLConnection.getInputStream();
            localObject = paramString;
            if (paramInt2 >= 0)
            {
              i = localHttpURLConnection.getResponseCode();
              if ((i == 302) && (paramInt2 < 3)) {
                localObject = getUrlStream(localHttpURLConnection.getHeaderField("Location"), paramInt1, paramHashMap, paramBoolean, paramInt2 + 1);
              }
            }
            else
            {
              return localObject;
            }
          }
          else
          {
            throw paramString;
          }
        }
      } while (i != 302);
      Object localObject = paramString;
    } while (paramInt2 < 3);
    throw new HttpUnauthorizedException("408 - Request Timeout");
  }
  
  public static InputStream getUrlStream(String paramString, boolean paramBoolean)
    throws IOException
  {
    return getUrlStream(paramString, 30000, null, paramBoolean);
  }
  
  public static InputStream getUrlStream(String paramString, boolean paramBoolean1, boolean paramBoolean2)
    throws IOException
  {
    if (paramBoolean2) {}
    for (int i = 0;; i = -1) {
      return getUrlStream(paramString, 30000, null, paramBoolean1, i);
    }
  }
  
  public static boolean isUrlAccessible(String paramString)
  {
    Object localObject = null;
    try
    {
      paramString = performGetRequest(paramString);
      return (paramString != null) && (paramString.trim().length() != 0);
    }
    catch (IOException paramString)
    {
      for (;;)
      {
        paramString = localObject;
      }
    }
  }
  
  public static String performGetRequest(String paramString)
    throws IOException
  {
    return performGetRequest(paramString, 30000);
  }
  
  public static String performGetRequest(String paramString, int paramInt)
    throws IOException
  {
    return DataUtil.readString(getUrlStream(paramString, paramInt, null, false));
  }
  
  public static String performGetRequest(String paramString, int paramInt, boolean paramBoolean)
    throws IOException
  {
    return DataUtil.readString(getUrlStream(paramString, paramInt, null, paramBoolean));
  }
  
  public static String performGetRequest(String paramString, HashMap<String, String> paramHashMap)
    throws IOException
  {
    return DataUtil.readString(getUrlStream(paramString, 30000, paramHashMap, false));
  }
  
  public static String performGetRequest(String paramString, HashMap<String, String> paramHashMap, boolean paramBoolean)
    throws IOException
  {
    return DataUtil.readString(getUrlStream(paramString, 30000, paramHashMap, paramBoolean));
  }
  
  public static String performGetRequest(String paramString, HashMap<String, String> paramHashMap, boolean paramBoolean1, boolean paramBoolean2)
    throws IOException
  {
    if (paramBoolean2) {}
    for (int i = 0;; i = -1) {
      return DataUtil.readString(getUrlStream(paramString, 30000, paramHashMap, paramBoolean1, i));
    }
  }
  
  public static String performGetRequest(String paramString, Map<String, String> paramMap)
    throws IOException
  {
    return performGetRequest(paramString, paramMap, 30000);
  }
  
  public static String performGetRequest(String paramString, Map<String, String> paramMap, int paramInt)
    throws IOException
  {
    String str = getUrlEncodedParameterString(paramMap);
    paramMap = paramString;
    if (str.length() > 0) {
      paramMap = paramString + "?" + str;
    }
    return performGetRequest(paramMap, paramInt);
  }
  
  public static String performPostRequest(String paramString1, String paramString2)
    throws IOException
  {
    return performPostRequest(paramString1, paramString2, 30000);
  }
  
  public static String performPostRequest(String paramString1, String paramString2, int paramInt)
    throws IOException
  {
    Object localObject = null;
    try
    {
      HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL(paramString1).openConnection();
      localHttpURLConnection.setReadTimeout(paramInt);
      localHttpURLConnection.setConnectTimeout(paramInt);
      localHttpURLConnection.setRequestMethod("POST");
      localHttpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
      localHttpURLConnection.setDoInput(true);
      localHttpURLConnection.setDoOutput(true);
      localHttpURLConnection.connect();
      paramString1 = new OutputStreamWriter(localHttpURLConnection.getOutputStream());
      if (paramString1 == null) {
        break label115;
      }
    }
    finally
    {
      try
      {
        paramString1.write(paramString2);
        paramString1.flush();
        paramString2 = DataUtil.readString(localHttpURLConnection.getInputStream());
        if (paramString1 != null) {
          paramString1.close();
        }
        return paramString2;
      }
      finally {}
      paramString2 = finally;
      paramString1 = localObject;
    }
    paramString1.close();
    label115:
    throw paramString2;
  }
  
  public static String performPostRequest(String paramString, Map<String, String> paramMap)
    throws IOException
  {
    return performPostRequest(paramString, paramMap, 30000);
  }
  
  public static String performPostRequest(String paramString, Map<String, String> paramMap, int paramInt)
    throws IOException
  {
    return performPostRequest(paramString, getUrlEncodedParameterString(paramMap), paramInt);
  }
  
  public static void removeCookiesForURL(String paramString)
  {
    if (cm != null) {
      cm.removeCookie(paramString);
    }
  }
  
  public static class HttpUnauthorizedException
    extends IOException
  {
    private static final long serialVersionUID = 1L;
    
    public HttpUnauthorizedException(String paramString)
    {
      super();
    }
  }
}
