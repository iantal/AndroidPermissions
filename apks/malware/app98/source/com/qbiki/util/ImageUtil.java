package com.qbiki.util;

import android.app.Activity;
import android.content.ContentResolver;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class ImageUtil
{
  private static final boolean DEBUG = false;
  private static final String TAG = "ImageUtil";
  
  public ImageUtil() {}
  
  /* Error */
  public static String base64EncodeFromResources(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokestatic 28	com/qbiki/seattleclouds/App:getResourceStream	(Ljava/lang/String;)Ljava/io/InputStream;
    //   4: astore_0
    //   5: aload_0
    //   6: ifnonnull +6 -> 12
    //   9: ldc 30
    //   11: areturn
    //   12: new 32	java/io/ByteArrayOutputStream
    //   15: dup
    //   16: invokespecial 33	java/io/ByteArrayOutputStream:<init>	()V
    //   19: astore_2
    //   20: sipush 16384
    //   23: newarray byte
    //   25: astore_3
    //   26: aload_0
    //   27: aload_3
    //   28: iconst_0
    //   29: aload_3
    //   30: arraylength
    //   31: invokevirtual 39	java/io/InputStream:read	([BII)I
    //   34: istore_1
    //   35: iload_1
    //   36: iconst_m1
    //   37: if_icmpeq +34 -> 71
    //   40: aload_2
    //   41: aload_3
    //   42: iconst_0
    //   43: iload_1
    //   44: invokevirtual 43	java/io/ByteArrayOutputStream:write	([BII)V
    //   47: goto -21 -> 26
    //   50: astore_2
    //   51: ldc 11
    //   53: ldc 45
    //   55: aload_2
    //   56: invokestatic 51	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   59: pop
    //   60: aload_0
    //   61: ifnull -52 -> 9
    //   64: aload_0
    //   65: invokevirtual 54	java/io/InputStream:close	()V
    //   68: ldc 30
    //   70: areturn
    //   71: aload_2
    //   72: invokevirtual 57	java/io/ByteArrayOutputStream:flush	()V
    //   75: aload_0
    //   76: ifnull +7 -> 83
    //   79: aload_0
    //   80: invokevirtual 54	java/io/InputStream:close	()V
    //   83: new 59	java/lang/String
    //   86: dup
    //   87: aload_2
    //   88: invokevirtual 63	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   91: invokestatic 69	org/apache/commons/codec/binary/Base64:encodeBase64	([B)[B
    //   94: invokespecial 72	java/lang/String:<init>	([B)V
    //   97: astore_0
    //   98: aload_0
    //   99: areturn
    //   100: astore_0
    //   101: ldc 11
    //   103: ldc 45
    //   105: aload_0
    //   106: invokestatic 51	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   109: pop
    //   110: ldc 30
    //   112: areturn
    //   113: astore_2
    //   114: aload_0
    //   115: ifnull +7 -> 122
    //   118: aload_0
    //   119: invokevirtual 54	java/io/InputStream:close	()V
    //   122: aload_2
    //   123: athrow
    //   124: astore_0
    //   125: goto -42 -> 83
    //   128: astore_0
    //   129: ldc 30
    //   131: areturn
    //   132: astore_0
    //   133: goto -11 -> 122
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	136	0	paramString	String
    //   34	10	1	i	int
    //   19	22	2	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    //   50	38	2	localIOException	IOException
    //   113	10	2	localObject	Object
    //   25	17	3	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   26	35	50	java/io/IOException
    //   40	47	50	java/io/IOException
    //   71	75	50	java/io/IOException
    //   83	98	100	java/lang/Exception
    //   26	35	113	finally
    //   40	47	113	finally
    //   51	60	113	finally
    //   71	75	113	finally
    //   79	83	124	java/io/IOException
    //   64	68	128	java/io/IOException
    //   118	122	132	java/io/IOException
  }
  
  public static void clearBitmap(Bitmap paramBitmap)
  {
    if (paramBitmap != null) {
      paramBitmap.recycle();
    }
    System.gc();
  }
  
  public static Bitmap correctImageOrientation(String paramString, Bitmap paramBitmap)
  {
    for (;;)
    {
      ExifInterface localExifInterface;
      try
      {
        localExifInterface = new ExifInterface(paramString);
        if (localExifInterface.getAttribute("Orientation").equals("6"))
        {
          paramString = rotate(paramBitmap, 90);
          return paramString;
        }
      }
      catch (IOException paramString)
      {
        return paramBitmap;
      }
      if (localExifInterface.getAttribute("Orientation").equals("8"))
      {
        paramString = rotate(paramBitmap, 270);
      }
      else
      {
        paramString = paramBitmap;
        if (localExifInterface.getAttribute("Orientation").equals("3")) {
          paramString = rotate(paramBitmap, 180);
        }
      }
    }
  }
  
  public static Bitmap decodeBitmapFromStream(Uri paramUri, int paramInt, Activity paramActivity)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inJustDecodeBounds = true;
    if (paramUri.toString().indexOf("content://") == 0) {}
    for (;;)
    {
      try
      {
        BitmapFactory.decodeStream(paramActivity.getContentResolver().openInputStream(paramUri), null, localOptions);
        int i = 1;
        if ((localOptions.outHeight > paramInt) || (localOptions.outWidth > paramInt)) {
          i = (int)Math.pow(2.0D, (int)(Math.log(paramInt / Math.min(localOptions.outHeight, localOptions.outWidth)) / Math.log(0.5D)));
        }
        localOptions = new BitmapFactory.Options();
        localOptions.inSampleSize = i;
        localOptions.inPreferredConfig = Bitmap.Config.RGB_565;
        if (paramUri.toString().indexOf("content://") != 0) {
          break;
        }
      }
      catch (FileNotFoundException localFileNotFoundException1)
      {
        try
        {
          paramUri = BitmapFactory.decodeStream(paramActivity.getContentResolver().openInputStream(paramUri), null, localOptions);
          return paramUri;
        }
        catch (FileNotFoundException paramUri)
        {
          Log.e("ImageUtil", "decodeBitmapFromStream error", paramUri);
          return null;
        }
        localFileNotFoundException1 = localFileNotFoundException1;
        localFileNotFoundException1.printStackTrace();
        continue;
      }
      try
      {
        BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
      }
      catch (FileNotFoundException localFileNotFoundException2)
      {
        localFileNotFoundException2.printStackTrace();
      }
    }
    try
    {
      paramUri = BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
      return paramUri;
    }
    catch (FileNotFoundException paramUri)
    {
      Log.e("ImageUtil", "decodeBitmapFromStream error", paramUri);
    }
    return null;
  }
  
  public static Bitmap decodeBitmapResource(String paramString, int paramInt)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inJustDecodeBounds = true;
    BitmapFactory.decodeStream(App.getResourceStream(paramString), null, localOptions);
    int i = 1;
    if ((localOptions.outHeight > paramInt) || (localOptions.outWidth > paramInt)) {
      i = (int)Math.pow(2.0D, (int)(Math.log(paramInt / Math.min(localOptions.outHeight, localOptions.outWidth)) / Math.log(0.5D)));
    }
    localOptions = new BitmapFactory.Options();
    localOptions.inSampleSize = i;
    localOptions.inPurgeable = true;
    return BitmapFactory.decodeStream(App.getResourceStream(paramString), null, localOptions);
  }
  
  public static Bitmap decodeExternalBitmap(String paramString, int paramInt)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(paramString, localOptions);
    int i = 1;
    if ((localOptions.outHeight > paramInt) || (localOptions.outWidth > paramInt)) {
      i = (int)Math.pow(2.0D, Math.log(paramInt / Math.min(localOptions.outHeight, localOptions.outWidth)) / Math.log(0.5D));
    }
    localOptions = new BitmapFactory.Options();
    localOptions.inSampleSize = i;
    localOptions.inPurgeable = true;
    return BitmapFactory.decodeFile(paramString, localOptions);
  }
  
  public static Bitmap getScaledBitmap(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (paramBitmap == null) {
      return null;
    }
    double d = paramBitmap.getWidth() / paramBitmap.getHeight();
    if (((paramBoolean) && (paramBitmap.getWidth() < paramBitmap.getHeight())) || ((!paramBoolean) && (paramBitmap.getWidth() > paramBitmap.getHeight())))
    {
      int i = (int)(paramInt1 / d);
      paramInt2 = paramInt1;
      paramInt1 = i;
    }
    for (;;)
    {
      return Bitmap.createScaledBitmap(paramBitmap, paramInt2, paramInt1, true);
      paramInt1 = paramInt2;
      paramInt2 = (int)(paramInt1 * d);
    }
  }
  
  public static Bitmap getScaledBitmapResource(String paramString, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    paramString = decodeBitmapResource(paramString, Math.max(paramInt1, paramInt2));
    if (paramString == null) {
      return null;
    }
    return getScaledBitmap(paramString, paramInt1, paramInt2, paramBoolean);
  }
  
  public static Bitmap getScaledExternalBitmap(String paramString, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    paramString = decodeExternalBitmap(paramString, Math.max(paramInt1, paramInt2));
    if (paramString == null) {
      return null;
    }
    return getScaledBitmap(paramString, paramInt1, paramInt2, paramBoolean);
  }
  
  public static Bitmap rotate(Bitmap paramBitmap, int paramInt)
  {
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    Matrix localMatrix = new Matrix();
    localMatrix.postRotate(paramInt);
    return Bitmap.createBitmap(paramBitmap, 0, 0, i, j, localMatrix, true);
  }
}
