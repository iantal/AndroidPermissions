package com.qbiki.util;

import android.content.Context;
import android.content.res.Resources;
import android.text.format.DateUtils;
import java.util.Calendar;
import java.util.Date;

public class DateUtil
{
  public DateUtil() {}
  
  public static Calendar getCalendarForDate(long paramLong)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(new Date(paramLong));
    return localCalendar;
  }
  
  public static Calendar getCalendarForDate(Date paramDate)
  {
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(paramDate);
    return localCalendar;
  }
  
  public static Calendar getDateByAddingDaysToDate(Calendar paramCalendar, int paramInt)
  {
    paramCalendar = (Calendar)paramCalendar.clone();
    paramCalendar.add(6, paramInt);
    return paramCalendar;
  }
  
  public static Date getDateByAddingDaysToDate(Date paramDate, int paramInt)
  {
    return getDateByAddingDaysToDate(getCalendarForDate(paramDate), paramInt).getTime();
  }
  
  public static Calendar getDateByCopyingTime(Calendar paramCalendar1, Calendar paramCalendar2)
  {
    paramCalendar1 = (Calendar)paramCalendar1.clone();
    paramCalendar1.set(11, paramCalendar2.get(11));
    paramCalendar1.set(12, paramCalendar2.get(12));
    paramCalendar1.set(13, paramCalendar2.get(13));
    paramCalendar1.set(14, paramCalendar2.get(14));
    return paramCalendar1;
  }
  
  public static Date getDateByCopyingTime(Date paramDate1, Date paramDate2)
  {
    return getDateByCopyingTime(getCalendarForDate(paramDate1), getCalendarForDate(paramDate2)).getTime();
  }
  
  public static Calendar getDayEnd(Date paramDate)
  {
    paramDate = getCalendarForDate(paramDate);
    setDayEnd(paramDate);
    return paramDate;
  }
  
  public static Calendar getDayStart(Date paramDate)
  {
    paramDate = getCalendarForDate(paramDate);
    setDayStart(paramDate);
    return paramDate;
  }
  
  public static int getDaysBetweenDates(Calendar paramCalendar1, Calendar paramCalendar2, boolean paramBoolean)
  {
    int i = 1;
    if (paramCalendar1.equals(paramCalendar2)) {
      return 0;
    }
    int j = i;
    Calendar localCalendar1 = paramCalendar1;
    Calendar localCalendar2 = paramCalendar2;
    if (paramCalendar1.after(paramCalendar2))
    {
      j = i;
      localCalendar1 = paramCalendar2;
      localCalendar2 = paramCalendar1;
      if (!paramBoolean)
      {
        j = -1;
        localCalendar2 = paramCalendar1;
        localCalendar1 = paramCalendar2;
      }
    }
    int k;
    if (localCalendar1.get(1) == localCalendar2.get(1))
    {
      k = localCalendar2.get(6) - localCalendar1.get(6);
      return k * j;
    }
    i = localCalendar1.getActualMaximum(6) - localCalendar1.get(6) + localCalendar2.get(6);
    paramCalendar1 = (Calendar)localCalendar2.clone();
    paramCalendar1.set(1, localCalendar1.get(1) + 1);
    for (;;)
    {
      k = i;
      if (!paramCalendar1.before(localCalendar2)) {
        break;
      }
      i += paramCalendar1.getActualMaximum(6);
      paramCalendar1.add(1, 1);
    }
  }
  
  public static int getDaysBetweenDates(Date paramDate1, Date paramDate2, boolean paramBoolean)
  {
    return getDaysBetweenDates(getCalendarForDate(paramDate1), getCalendarForDate(paramDate2), paramBoolean);
  }
  
  public static String getRelativeDayNumberString(Context paramContext, Date paramDate)
  {
    int i = getDaysBetweenDates(paramDate, new Date(), false);
    if (i == -1) {
      return paramContext.getResources().getString(2131362034);
    }
    if (i == 0) {
      return paramContext.getResources().getString(2131362033);
    }
    if (i == 1) {
      return paramContext.getResources().getString(2131362035);
    }
    if (i < 0) {
      return paramContext.getResources().getString(2131362036, new Object[] { Integer.valueOf(i * -1) });
    }
    return paramContext.getResources().getString(2131362037, new Object[] { Integer.valueOf(i) });
  }
  
  public static String getRelativeDayString(Context paramContext, Date paramDate)
  {
    Date localDate = new Date();
    int i = getDaysBetweenDates(paramDate, localDate, false);
    if (i == -1) {
      return paramContext.getResources().getString(2131362034);
    }
    if (i == 0) {
      return paramContext.getResources().getString(2131362033);
    }
    if (i == 1) {
      return paramContext.getResources().getString(2131362035);
    }
    if ((i > 1) && (i < 5))
    {
      paramContext = Calendar.getInstance();
      paramContext.setTime(paramDate);
      return DateUtils.getDayOfWeekString(paramContext.get(7), 10);
    }
    if (isSameYear(localDate, paramDate)) {
      return DateUtils.formatDateTime(paramContext, paramDate.getTime(), 65552);
    }
    return DateUtils.formatDateTime(paramContext, paramDate.getTime(), 65556);
  }
  
  public static boolean isSameDay(Calendar paramCalendar1, Calendar paramCalendar2)
  {
    return (paramCalendar1.get(0) == paramCalendar2.get(0)) && (paramCalendar1.get(1) == paramCalendar2.get(1)) && (paramCalendar1.get(6) == paramCalendar2.get(6));
  }
  
  public static boolean isSameDay(Date paramDate1, Date paramDate2)
  {
    return isSameDay(getCalendarForDate(paramDate1), getCalendarForDate(paramDate2));
  }
  
  public static boolean isSameMonth(Calendar paramCalendar1, Calendar paramCalendar2)
  {
    return (paramCalendar1.get(0) == paramCalendar2.get(0)) && (paramCalendar1.get(1) == paramCalendar2.get(1)) && (paramCalendar1.get(2) == paramCalendar2.get(2));
  }
  
  public static boolean isSameMonth(Date paramDate1, Date paramDate2)
  {
    return isSameMonth(getCalendarForDate(paramDate1), getCalendarForDate(paramDate2));
  }
  
  public static boolean isSameYear(Calendar paramCalendar1, Calendar paramCalendar2)
  {
    return (paramCalendar1.get(0) == paramCalendar2.get(0)) && (paramCalendar1.get(1) == paramCalendar2.get(1));
  }
  
  public static boolean isSameYear(Date paramDate1, Date paramDate2)
  {
    return isSameYear(getCalendarForDate(paramDate1), getCalendarForDate(paramDate2));
  }
  
  public static void setDayEnd(Calendar paramCalendar)
  {
    paramCalendar.set(11, 23);
    paramCalendar.set(12, 59);
    paramCalendar.set(13, 59);
    paramCalendar.set(14, 999);
  }
  
  public static void setDayStart(Calendar paramCalendar)
  {
    paramCalendar.set(11, 0);
    paramCalendar.set(12, 0);
    paramCalendar.set(13, 0);
    paramCalendar.set(14, 0);
  }
}
