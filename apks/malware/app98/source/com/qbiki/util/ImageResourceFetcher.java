package com.qbiki.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.widget.ImageView;
import com.google.android.bitmapfun.ImageFetcher;

public class ImageResourceFetcher
  extends ImageFetcher
{
  private ImageResourceFtecherListener mListener = null;
  
  public ImageResourceFetcher(Context paramContext, int paramInt)
  {
    super(paramContext, paramInt);
  }
  
  public ImageResourceFetcher(Context paramContext, int paramInt1, int paramInt2)
  {
    super(paramContext, paramInt1, paramInt2);
  }
  
  public ImageResourceFtecherListener getListener()
  {
    return this.mListener;
  }
  
  protected Bitmap processBitmap(Object paramObject)
  {
    Object localObject = null;
    if (paramObject == null) {}
    String str;
    do
    {
      return localObject;
      str = String.valueOf(paramObject);
    } while (str.length() == 0);
    if (str.startsWith("http")) {}
    for (localObject = super.processBitmap(paramObject);; localObject = ImageUtil.decodeBitmapResource(str, Math.max(this.mImageWidth, this.mImageHeight)))
    {
      paramObject = localObject;
      if (localObject == null) {
        paramObject = ImageUtil.decodeExternalBitmap(str, Math.max(this.mImageWidth, this.mImageHeight));
      }
      localObject = paramObject;
      if (paramObject == null) {
        break;
      }
      return ImageUtil.getScaledBitmap(paramObject, this.mImageWidth, this.mImageHeight, true);
    }
  }
  
  protected void setImageDrawable(ImageView paramImageView, Drawable paramDrawable)
  {
    super.setImageDrawable(paramImageView, paramDrawable);
    if (this.mListener != null) {
      this.mListener.taskFinished(paramImageView);
    }
  }
  
  public void setListener(ImageResourceFtecherListener paramImageResourceFtecherListener)
  {
    this.mListener = paramImageResourceFtecherListener;
  }
  
  public static abstract interface ImageResourceFtecherListener
  {
    public abstract void taskFinished(ImageView paramImageView);
  }
}
