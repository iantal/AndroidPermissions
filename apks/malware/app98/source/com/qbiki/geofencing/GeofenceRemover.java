package com.qbiki.geofencing;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender.SendIntentException;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationClient.OnRemoveGeofencesResultListener;
import java.util.Arrays;
import java.util.List;

public class GeofenceRemover
  implements GooglePlayServicesClient.ConnectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener, LocationClient.OnRemoveGeofencesResultListener
{
  private Context mContext;
  private List<String> mCurrentGeofenceIds;
  private PendingIntent mCurrentIntent;
  private boolean mInProgress;
  private LocationClient mLocationClient;
  private GeofenceUtils.REMOVE_TYPE mRequestType;
  
  public GeofenceRemover(Context paramContext)
  {
    this.mContext = paramContext;
    this.mCurrentGeofenceIds = null;
    this.mLocationClient = null;
    this.mInProgress = false;
  }
  
  private void continueRemoveGeofences()
  {
    switch (1.$SwitchMap$com$qbiki$geofencing$GeofenceUtils$REMOVE_TYPE[this.mRequestType.ordinal()])
    {
    default: 
      return;
    case 1: 
      this.mLocationClient.removeGeofences(this.mCurrentIntent, this);
      return;
    }
    this.mLocationClient.removeGeofences(this.mCurrentGeofenceIds, this);
  }
  
  private GooglePlayServicesClient getLocationClient()
  {
    if (this.mLocationClient == null) {
      this.mLocationClient = new LocationClient(this.mContext, this, this);
    }
    return this.mLocationClient;
  }
  
  private void requestConnection()
  {
    getLocationClient().connect();
  }
  
  private void requestDisconnection()
  {
    this.mInProgress = false;
    getLocationClient().disconnect();
    if (this.mRequestType == GeofenceUtils.REMOVE_TYPE.INTENT) {
      this.mCurrentIntent.cancel();
    }
  }
  
  public boolean getInProgressFlag()
  {
    return this.mInProgress;
  }
  
  public void onConnected(Bundle paramBundle)
  {
    Log.d("Geofencing", this.mContext.getString(2131361869));
    continueRemoveGeofences();
  }
  
  public void onConnectionFailed(ConnectionResult paramConnectionResult)
  {
    this.mInProgress = false;
    if (paramConnectionResult.hasResolution()) {
      try
      {
        paramConnectionResult.startResolutionForResult((Activity)this.mContext, 9000);
        return;
      }
      catch (IntentSender.SendIntentException paramConnectionResult)
      {
        paramConnectionResult.printStackTrace();
        return;
      }
    }
    Intent localIntent = new Intent("com.qbiki.seattleclouds.geofence.ACTION_CONNECTION_ERROR");
    localIntent.addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES").putExtra("com.qbiki.seattleclouds.geofence.EXTRA_CONNECTION_ERROR_CODE", paramConnectionResult.getErrorCode());
    LocalBroadcastManager.getInstance(this.mContext).sendBroadcast(localIntent);
  }
  
  public void onDisconnected()
  {
    this.mInProgress = false;
    Log.d("Geofencing", this.mContext.getString(2131361870));
    this.mLocationClient = null;
  }
  
  public void onRemoveGeofencesByPendingIntentResult(int paramInt, PendingIntent paramPendingIntent)
  {
    paramPendingIntent = new Intent();
    if (paramInt == 0)
    {
      Log.d("Geofencing", this.mContext.getString(2131361885));
      paramPendingIntent.setAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_DELETED");
      paramPendingIntent.putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS", this.mContext.getString(2131361885));
    }
    for (;;)
    {
      LocalBroadcastManager.getInstance(this.mContext).sendBroadcast(paramPendingIntent);
      requestDisconnection();
      return;
      Log.w("Geofencing", this.mContext.getString(2131361884, new Object[] { Integer.valueOf(paramInt) }));
      paramPendingIntent.setAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ERROR");
      paramPendingIntent.putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS", this.mContext.getString(2131361884, new Object[] { Integer.valueOf(paramInt) }));
      paramPendingIntent.putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS_CODE", paramInt);
    }
  }
  
  public void onRemoveGeofencesByRequestIdsResult(int paramInt, String[] paramArrayOfString)
  {
    Intent localIntent = new Intent();
    if (paramInt == 0)
    {
      paramArrayOfString = this.mContext.getString(2131361883, new Object[] { Arrays.toString(paramArrayOfString) });
      Log.d("Geofencing", paramArrayOfString);
      localIntent.setAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_DELETED").addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES").putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS", paramArrayOfString);
    }
    for (;;)
    {
      LocalBroadcastManager.getInstance(this.mContext).sendBroadcast(localIntent);
      requestDisconnection();
      return;
      paramArrayOfString = this.mContext.getString(2131361881, new Object[] { Integer.valueOf(paramInt), Arrays.toString(paramArrayOfString) });
      Log.e("Geofencing", paramArrayOfString);
      localIntent.setAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ERROR").addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES").putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS", paramArrayOfString);
    }
  }
  
  public void removeGeofencesById(List<String> paramList)
    throws IllegalArgumentException, UnsupportedOperationException
  {
    if ((paramList == null) || (paramList.size() == 0)) {
      throw new IllegalArgumentException();
    }
    if (!this.mInProgress)
    {
      this.mRequestType = GeofenceUtils.REMOVE_TYPE.LIST;
      this.mCurrentGeofenceIds = paramList;
      requestConnection();
      return;
    }
    throw new UnsupportedOperationException();
  }
  
  public void removeGeofencesByIntent(PendingIntent paramPendingIntent)
  {
    if (!this.mInProgress)
    {
      this.mRequestType = GeofenceUtils.REMOVE_TYPE.INTENT;
      this.mCurrentIntent = paramPendingIntent;
      requestConnection();
      return;
    }
    throw new UnsupportedOperationException();
  }
  
  public void setInProgressFlag(boolean paramBoolean)
  {
    this.mInProgress = paramBoolean;
  }
}
