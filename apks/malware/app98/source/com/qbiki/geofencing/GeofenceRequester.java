package com.qbiki.geofencing;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentSender.SendIntentException;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationClient.OnAddGeofencesResultListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class GeofenceRequester
  implements LocationClient.OnAddGeofencesResultListener, GooglePlayServicesClient.ConnectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener
{
  private final Activity mActivity;
  private ArrayList<Geofence> mCurrentGeofences;
  private PendingIntent mGeofencePendingIntent;
  private boolean mInProgress;
  private LocationClient mLocationClient;
  
  public GeofenceRequester(Activity paramActivity)
  {
    this.mActivity = paramActivity;
    this.mGeofencePendingIntent = null;
    this.mLocationClient = null;
    this.mInProgress = false;
  }
  
  private void continueAddGeofences()
  {
    this.mGeofencePendingIntent = createRequestPendingIntent();
    this.mLocationClient.addGeofences(this.mCurrentGeofences, this.mGeofencePendingIntent, this);
  }
  
  private PendingIntent createRequestPendingIntent()
  {
    if (this.mGeofencePendingIntent != null) {
      return this.mGeofencePendingIntent;
    }
    Intent localIntent = new Intent(this.mActivity, ReceiveTransitionsIntentService.class);
    return PendingIntent.getService(this.mActivity, 0, localIntent, 134217728);
  }
  
  private GooglePlayServicesClient getLocationClient()
  {
    if (this.mLocationClient == null) {
      this.mLocationClient = new LocationClient(this.mActivity, this, this);
    }
    return this.mLocationClient;
  }
  
  private void requestConnection()
  {
    getLocationClient().connect();
  }
  
  private void requestDisconnection()
  {
    this.mInProgress = false;
    getLocationClient().disconnect();
  }
  
  public void addGeofences(List<Geofence> paramList)
    throws UnsupportedOperationException
  {
    this.mCurrentGeofences = ((ArrayList)paramList);
    if (!this.mInProgress)
    {
      this.mInProgress = true;
      requestConnection();
      return;
    }
    throw new UnsupportedOperationException();
  }
  
  public boolean getInProgressFlag()
  {
    return this.mInProgress;
  }
  
  public PendingIntent getRequestPendingIntent()
  {
    return createRequestPendingIntent();
  }
  
  public void onAddGeofencesResult(int paramInt, String[] paramArrayOfString)
  {
    Intent localIntent = new Intent();
    if (paramInt == 0)
    {
      paramArrayOfString = this.mActivity.getString(2131361866, new Object[] { Arrays.toString(paramArrayOfString) });
      Log.d("Geofencing", paramArrayOfString);
      localIntent.setAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ADDED").addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES").putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS", paramArrayOfString);
    }
    for (;;)
    {
      LocalBroadcastManager.getInstance(this.mActivity).sendBroadcast(localIntent);
      requestDisconnection();
      return;
      paramArrayOfString = this.mActivity.getString(2131361867, new Object[] { Integer.valueOf(paramInt), Arrays.toString(paramArrayOfString) });
      Log.e("Geofencing", paramArrayOfString);
      localIntent.setAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ERROR").addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES").putExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS", paramArrayOfString);
    }
  }
  
  public void onConnected(Bundle paramBundle)
  {
    Log.d("Geofencing", this.mActivity.getString(2131361869));
    continueAddGeofences();
  }
  
  public void onConnectionFailed(ConnectionResult paramConnectionResult)
  {
    this.mInProgress = false;
    if (paramConnectionResult.hasResolution()) {
      try
      {
        paramConnectionResult.startResolutionForResult(this.mActivity, 9000);
        return;
      }
      catch (IntentSender.SendIntentException paramConnectionResult)
      {
        paramConnectionResult.printStackTrace();
        return;
      }
    }
    Intent localIntent = new Intent("com.qbiki.seattleclouds.geofence.ACTION_CONNECTION_ERROR");
    localIntent.addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES").putExtra("com.qbiki.seattleclouds.geofence.EXTRA_CONNECTION_ERROR_CODE", paramConnectionResult.getErrorCode());
    LocalBroadcastManager.getInstance(this.mActivity).sendBroadcast(localIntent);
  }
  
  public void onDisconnected()
  {
    this.mInProgress = false;
    Log.d("Geofencing", this.mActivity.getString(2131361870));
    this.mLocationClient = null;
  }
  
  public void setInProgressFlag(boolean paramBoolean)
  {
    this.mInProgress = paramBoolean;
  }
}
