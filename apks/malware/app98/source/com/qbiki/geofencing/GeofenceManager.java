package com.qbiki.geofencing;

import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.content.LocalBroadcastManager;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.Geofence.Builder;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.util.DataUtil;
import com.qbiki.util.StringUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class GeofenceManager
{
  private static final boolean DEBUG = false;
  private static final String PREFS_FILE_ROOT = "com.qbiki.geofencing.GeofenceManager.";
  private static final String TAG = "GeofenceManager";
  private static Map<String, SCGeofence> mGeofences;
  private static String mNewConfigHash;
  private FragmentActivity mActivity;
  private GeofenceBroadcastReceiver mBroadcastReceiver;
  private String mCurrentConfigHash;
  private List<Geofence> mCurrentGeofences;
  private GeofenceRemover mGeofenceRemover;
  private GeofenceRequester mGeofenceRequester;
  private boolean mGeofencesRegistered;
  private IntentFilter mIntentFilter;
  private GeofenceUtils.REQUEST_TYPE mRequestType;
  
  public GeofenceManager(FragmentActivity paramFragmentActivity)
  {
    this.mActivity = paramFragmentActivity;
    this.mBroadcastReceiver = new GeofenceBroadcastReceiver(null);
    this.mIntentFilter = new IntentFilter();
    this.mIntentFilter.addAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ADDED");
    this.mIntentFilter.addAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_DELETED");
    this.mIntentFilter.addAction("com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ERROR");
    this.mIntentFilter.addCategory("com.qbiki.seattleclouds.geofence.CATEGORY_LOCATION_SERVICES");
    this.mCurrentGeofences = new ArrayList();
    this.mGeofenceRequester = new GeofenceRequester(this.mActivity);
    this.mGeofenceRemover = new GeofenceRemover(this.mActivity);
  }
  
  private String getPrefsName()
  {
    String str = "com.qbiki.geofencing.GeofenceManager." + App.publisherId + "." + App.username + "." + App.appId;
    logDebug("Geofence Mananger prefs name: " + str);
    return str;
  }
  
  public static void loadGeofences(OnLoadGeofencesResultListener paramOnLoadGeofencesResultListener)
  {
    loadGeofences(false, paramOnLoadGeofencesResultListener);
  }
  
  public static void loadGeofences(boolean paramBoolean, OnLoadGeofencesResultListener paramOnLoadGeofencesResultListener)
  {
    if ((!paramBoolean) && (mGeofences != null))
    {
      paramOnLoadGeofencesResultListener.OnLoadGeofencesResult(0, mGeofences);
      return;
    }
    new LoadGeofencesAsyncTask(paramOnLoadGeofencesResultListener).execute(new Void[0]);
  }
  
  private void loadPersistedState()
  {
    SharedPreferences localSharedPreferences = this.mActivity.getSharedPreferences(getPrefsName(), 0);
    this.mCurrentConfigHash = localSharedPreferences.getString("configHash", "");
    this.mGeofencesRegistered = localSharedPreferences.getBoolean("geofencesRegistered", false);
  }
  
  private static void logDebug(String paramString) {}
  
  private void persistState()
  {
    SharedPreferences.Editor localEditor = this.mActivity.getSharedPreferences(getPrefsName(), 0).edit();
    localEditor.putString("configHash", this.mCurrentConfigHash);
    localEditor.putBoolean("geofencesRegistered", this.mGeofencesRegistered);
    localEditor.commit();
  }
  
  private void registerGeofences()
  {
    this.mRequestType = GeofenceUtils.REQUEST_TYPE.ADD;
    if (!servicesConnected()) {
      return;
    }
    try
    {
      this.mGeofenceRequester.addGeofences(this.mCurrentGeofences);
      return;
    }
    catch (UnsupportedOperationException localUnsupportedOperationException)
    {
      Log.i("GeofenceManager", this.mActivity.getString(2131361868));
    }
  }
  
  private boolean servicesConnected()
  {
    boolean bool = false;
    int i = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this.mActivity);
    if (i == 0)
    {
      logDebug(this.mActivity.getString(2131361880));
      bool = true;
    }
    Dialog localDialog;
    do
    {
      return bool;
      localDialog = GooglePlayServicesUtil.getErrorDialog(i, this.mActivity, 0);
    } while (localDialog == null);
    ErrorDialogFragment localErrorDialogFragment = new ErrorDialogFragment();
    localErrorDialogFragment.setDialog(localDialog);
    localErrorDialogFragment.show(this.mActivity.getSupportFragmentManager(), "Geofencing");
    return false;
  }
  
  private void unregisterGeofencesByPendingIntent()
  {
    this.mRequestType = GeofenceUtils.REQUEST_TYPE.REMOVE;
    if (!servicesConnected()) {
      return;
    }
    LocalBroadcastManager.getInstance(this.mActivity).registerReceiver(this.mBroadcastReceiver, this.mIntentFilter);
    try
    {
      this.mGeofenceRemover.removeGeofencesByIntent(this.mGeofenceRequester.getRequestPendingIntent());
      return;
    }
    catch (UnsupportedOperationException localUnsupportedOperationException)
    {
      LocalBroadcastManager.getInstance(this.mActivity).unregisterReceiver(this.mBroadcastReceiver);
      Log.i("GeofenceManager", this.mActivity.getString(2131361882));
    }
  }
  
  public boolean processActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    boolean bool = false;
    logDebug("Processing activity result...");
    if (paramInt1 == 9000)
    {
      if (paramInt2 != -1) {
        break label91;
      }
      if (GeofenceUtils.REQUEST_TYPE.ADD != this.mRequestType) {
        break label56;
      }
      this.mGeofenceRequester.setInProgressFlag(false);
      this.mGeofenceRequester.addGeofences(this.mCurrentGeofences);
    }
    for (;;)
    {
      bool = true;
      return bool;
      label56:
      if (GeofenceUtils.REQUEST_TYPE.REMOVE == this.mRequestType)
      {
        this.mGeofenceRemover.setInProgressFlag(false);
        this.mGeofenceRemover.removeGeofencesByIntent(this.mGeofenceRequester.getRequestPendingIntent());
        continue;
        label91:
        Log.w("GeofenceManager", this.mActivity.getString(2131361879));
      }
    }
  }
  
  public void refreshGeofences()
  {
    loadPersistedState();
    if ((!App.appConfig.isGeofencingEnabled()) && (!this.mGeofencesRegistered))
    {
      logDebug("Geofencing disabled, there are NO registered geofences => Do nothing");
      return;
    }
    if ((!App.appConfig.isGeofencingEnabled()) && (this.mGeofencesRegistered))
    {
      logDebug("Geofencing disabled, there are registered geofences => Remove all currently registered geofences");
      unregisterGeofencesByPendingIntent();
      return;
    }
    loadGeofences(true, new OnLoadGeofencesResultListener()
    {
      public void OnLoadGeofencesResult(int paramAnonymousInt, Map<String, SCGeofence> paramAnonymousMap)
      {
        if (paramAnonymousInt == 0)
        {
          if (!GeofenceManager.this.mCurrentConfigHash.equals(GeofenceManager.mNewConfigHash))
          {
            GeofenceManager.logDebug("Geofences configuration has changed => refreshing");
            GeofenceManager.this.unregisterGeofencesByPendingIntent();
            return;
          }
          GeofenceManager.logDebug("Geofences configuration has NOT changed => do nothing");
          return;
        }
        GeofenceManager.logDebug("Geofences failed to load. Nothing to refresh");
      }
    });
  }
  
  public static class ErrorDialogFragment
    extends DialogFragment
  {
    private Dialog mDialog = null;
    
    public ErrorDialogFragment() {}
    
    public Dialog onCreateDialog(Bundle paramBundle)
    {
      return this.mDialog;
    }
    
    public void setDialog(Dialog paramDialog)
    {
      this.mDialog = paramDialog;
    }
  }
  
  private class GeofenceBroadcastReceiver
    extends BroadcastReceiver
  {
    private GeofenceBroadcastReceiver() {}
    
    private void handleGeofenceError(Context paramContext, Intent paramIntent)
    {
      String str = paramIntent.getStringExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS");
      if (paramIntent.getIntExtra("com.qbiki.seattleclouds.geofence.EXTRA_GEOFENCE_STATUS_CODE", 64302) == 1000) {}
      for (;;)
      {
        LocalBroadcastManager.getInstance(GeofenceManager.this.mActivity).unregisterReceiver(this);
        return;
        Toast.makeText(paramContext, str, 1).show();
      }
    }
    
    private void handleGeofenceTransition(Context paramContext, Intent paramIntent)
    {
      GeofenceManager.logDebug("Geofence transition detected");
    }
    
    private void handleGeofencesAdded(Context paramContext, Intent paramIntent)
    {
      GeofenceManager.access$902(GeofenceManager.this, true);
      GeofenceManager.access$202(GeofenceManager.this, GeofenceManager.mNewConfigHash);
      GeofenceManager.this.persistState();
      GeofenceManager.logDebug("Geofence refreshing process finished");
      LocalBroadcastManager.getInstance(GeofenceManager.this.mActivity).unregisterReceiver(this);
    }
    
    private void handleGeofencesRemoved(Context paramContext, Intent paramIntent)
    {
      GeofenceManager.logDebug("Old geofences removed");
      if (App.appConfig.isGeofencingEnabled())
      {
        GeofenceManager.this.mCurrentGeofences.clear();
        paramContext = GeofenceManager.mGeofences.values().iterator();
        for (;;)
        {
          if (paramContext.hasNext())
          {
            paramIntent = (SCGeofence)paramContext.next();
            if (GeofenceManager.this.mCurrentGeofences.size() == 100) {
              Log.w("GeofenceManager", "Too many geofences (more than 100). Ignoring the remaining ones...");
            }
          }
          else
          {
            if (GeofenceManager.this.mCurrentGeofences.size() <= 0) {
              break;
            }
            GeofenceManager.logDebug("Geofencing is enabled => adding new geofences");
            GeofenceManager.this.registerGeofences();
            return;
          }
          GeofenceManager.logDebug("Preparing geofence for registering: " + paramIntent);
          paramIntent = new Geofence.Builder().setRequestId(paramIntent.getId()).setTransitionTypes(1).setCircularRegion(paramIntent.getLatitude(), paramIntent.getLongitude(), paramIntent.getRadius()).setExpirationDuration(-1L).build();
          GeofenceManager.this.mCurrentGeofences.add(paramIntent);
        }
        GeofenceManager.logDebug("Geofencing is enabled, but there are no geofences to add => refresh finished");
        GeofenceManager.access$902(GeofenceManager.this, false);
        GeofenceManager.access$202(GeofenceManager.this, GeofenceManager.mNewConfigHash);
        GeofenceManager.this.persistState();
        LocalBroadcastManager.getInstance(GeofenceManager.this.mActivity).unregisterReceiver(this);
        return;
      }
      GeofenceManager.logDebug("Geofencing is disabled => don't add new geofences and save current Geofence Manger state");
      GeofenceManager.access$902(GeofenceManager.this, false);
      GeofenceManager.access$202(GeofenceManager.this, "");
      GeofenceManager.this.persistState();
      LocalBroadcastManager.getInstance(GeofenceManager.this.mActivity).unregisterReceiver(this);
    }
    
    public void onReceive(Context paramContext, Intent paramIntent)
    {
      String str = paramIntent.getAction();
      if (TextUtils.equals(str, "com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ERROR"))
      {
        handleGeofenceError(paramContext, paramIntent);
        return;
      }
      if (TextUtils.equals(str, "com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_DELETED"))
      {
        handleGeofencesRemoved(paramContext, paramIntent);
        return;
      }
      if (TextUtils.equals(str, "com.qbiki.seattleclouds.geofence.ACTION_GEOFENCES_ADDED"))
      {
        handleGeofencesAdded(paramContext, paramIntent);
        return;
      }
      if (TextUtils.equals(str, "com.qbiki.seattleclouds.geofence.ACTION_GEOFENCE_TRANSITION"))
      {
        handleGeofenceTransition(paramContext, paramIntent);
        return;
      }
      Log.e("GeofenceManager", GeofenceManager.this.mActivity.getString(2131361878, new Object[] { str }));
      Toast.makeText(paramContext, 2131361877, 1).show();
    }
  }
  
  private static class LoadGeofencesAsyncTask
    extends AsyncTask<Void, Void, String>
  {
    private OnLoadGeofencesResultListener listener;
    
    public LoadGeofencesAsyncTask(OnLoadGeofencesResultListener paramOnLoadGeofencesResultListener)
    {
      this.listener = paramOnLoadGeofencesResultListener;
    }
    
    protected String doInBackground(Void... paramVarArgs)
    {
      GeofenceManager.logDebug("Loading geofences...");
      HashMap localHashMap = new HashMap();
      for (;;)
      {
        int i;
        try
        {
          paramVarArgs = DataUtil.readString(App.getResourceStream("geofencingConfig.json"));
          GeofenceManager.access$102(StringUtil.md5(paramVarArgs));
          GeofenceManager.logDebug("New config hash: " + GeofenceManager.mNewConfigHash);
          JSONArray localJSONArray = new JSONObject(paramVarArgs).getJSONArray("items");
          i = 0;
          int j = localJSONArray.length();
          if (i < j)
          {
            paramVarArgs = null;
            try
            {
              SCGeofence localSCGeofence = SCGeofence.fromJson(localJSONArray.getJSONObject(i));
              paramVarArgs = localSCGeofence;
            }
            catch (JSONException localJSONException)
            {
              Log.w("GeofenceManager", "Error parsing geofence: " + i, localJSONException);
              continue;
            }
            if ((paramVarArgs == null) || (!paramVarArgs.isValid())) {
              break label249;
            }
            localHashMap.put(paramVarArgs.getId(), paramVarArgs);
          }
        }
        catch (IllegalArgumentException paramVarArgs)
        {
          Log.e("GeofenceManager", "Error loading config file: " + paramVarArgs);
          return null;
          GeofenceManager.access$502(localHashMap);
          return "ok";
        }
        catch (IOException paramVarArgs)
        {
          Log.e("GeofenceManager", "Error loading config file: " + paramVarArgs);
          return null;
        }
        catch (JSONException paramVarArgs)
        {
          Log.e("GeofenceManager", "Error parsing config file: " + paramVarArgs);
          return null;
        }
        label249:
        i += 1;
      }
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      if (paramString != null) {}
      for (int i = 0;; i = 1)
      {
        this.listener.OnLoadGeofencesResult(i, GeofenceManager.mGeofences);
        return;
      }
    }
  }
}
