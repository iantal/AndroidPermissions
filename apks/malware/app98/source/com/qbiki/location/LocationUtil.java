package com.qbiki.location;

import android.location.Location;
import java.text.NumberFormat;

public class LocationUtil
{
  public static final double CONST_YARDS_IN_MILE = 1760.0D;
  public static final int COORDINATE_FORMAT_DEGREES = 0;
  public static final int COORDINATE_FORMAT_MINUTES = 1;
  public static final int COORDINATE_FORMAT_SECONDS = 2;
  private static NumberFormat mCoordDegreesFormatter = ;
  
  static
  {
    mCoordDegreesFormatter.setMaximumFractionDigits(6);
    mCoordDegreesFormatter.setMinimumFractionDigits(6);
  }
  
  public LocationUtil() {}
  
  public static String formatCoordinate(double paramDouble, int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return mCoordDegreesFormatter.format(paramDouble);
    case 2: 
      return setFractionPartDigits(Location.convert(paramDouble, 2), 2);
    }
    return setFractionPartDigits(Location.convert(paramDouble, 1), 5);
  }
  
  public static String formatCoordinates(double paramDouble1, double paramDouble2, int paramInt)
  {
    return formatCoordinate(paramDouble1, paramInt) + ", " + formatCoordinate(paramDouble2, paramInt);
  }
  
  public static String getAddressWithoutStreet(String paramString)
  {
    String[] arrayOfString = paramString.split(",");
    if (arrayOfString.length <= 3) {
      return paramString;
    }
    paramString = new StringBuilder((arrayOfString.length - 1) * 20);
    paramString.append(arrayOfString[1].trim());
    int i = 2;
    while (i < arrayOfString.length)
    {
      paramString.append(",").append(arrayOfString[i]);
      i += 1;
    }
    return paramString.toString();
  }
  
  public static double getDistance(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (double d1 = 3959.0D;; d1 = 6371.0D)
    {
      double d2 = (paramDouble3 - paramDouble1) * 3.141592653589793D / 180.0D;
      paramDouble2 = (paramDouble4 - paramDouble2) * 3.141592653589793D / 180.0D;
      paramDouble1 = Math.sin(d2 / 2.0D) * Math.sin(d2 / 2.0D) + Math.cos(3.141592653589793D * paramDouble1 / 180.0D) * Math.cos(3.141592653589793D * paramDouble3 / 180.0D) * Math.sin(paramDouble2 / 2.0D) * Math.sin(paramDouble2 / 2.0D);
      return d1 * (2.0D * Math.atan2(Math.sqrt(paramDouble1), Math.sqrt(1.0D - paramDouble1)));
    }
  }
  
  private static String setFractionPartDigits(String paramString, int paramInt)
  {
    int i = paramString.lastIndexOf(".");
    String str1 = "";
    if (i == paramString.length() - 1) {}
    String str2;
    for (;;)
    {
      str2 = str1;
      if (str1.length() > paramInt) {}
      for (str2 = str1.substring(0, paramInt); str2.length() < paramInt; str2 = str2 + "0") {}
      if (i == -1)
      {
        paramString = paramString + ".";
      }
      else
      {
        str2 = paramString.substring(0, i + 1);
        str1 = paramString.substring(i + 1);
        paramString = str2;
      }
    }
    return paramString + str2;
  }
}
