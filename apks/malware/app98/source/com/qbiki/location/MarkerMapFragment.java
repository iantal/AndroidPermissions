package com.qbiki.location;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.LatLngBounds.Builder;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.qbiki.feedback.LocationModel;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCMapFragment;
import com.qbiki.util.DeviceUtil;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;

public class MarkerMapFragment
  extends SCMapFragment
  implements GoogleMap.OnInfoWindowClickListener
{
  public static final String ARG_LOCATIONS = "locationsList";
  private static final double CLOSE_LOCATIONS_THRESHOLD = 7.0E-4D;
  private static final float DEFAULT_CLOSE_LOCTIONS_ZOOM_LEVEL = 19.0F;
  private static final float DEFAULT_PADDING = 70.0F;
  private static final float DEFAULT_ZOOM_LEVEL = 11.0F;
  private static final boolean LOGV = false;
  private static final String TAG = "MarkerMapFragment";
  private boolean mAnimatedMarkerZooming = true;
  private ArrayList<LocationModel> mLocations;
  protected GoogleMap mMap;
  private MapView mMapView;
  protected HashMap<Marker, LocationModel> mMarkerLocations;
  
  public MarkerMapFragment() {}
  
  private void changeCamera(CameraUpdate paramCameraUpdate)
  {
    if (this.mAnimatedMarkerZooming)
    {
      this.mMap.animateCamera(paramCameraUpdate);
      return;
    }
    this.mMap.moveCamera(paramCameraUpdate);
  }
  
  private void setUpMapIfNeeded()
  {
    int i;
    if (this.mMap == null)
    {
      this.mMap = ((MapView)getView().findViewById(2131099684)).getMap();
      if (this.mMap != null) {
        i = 0;
      }
    }
    try
    {
      MapsInitializer.initialize(getActivity());
      i = 1;
    }
    catch (GooglePlayServicesNotAvailableException localGooglePlayServicesNotAvailableException)
    {
      for (;;)
      {
        Log.w("MarkerMapFragment", "Could not initialize maps");
      }
    }
    if (i != 0) {
      setUpMap();
    }
  }
  
  private void zoomToMarkers()
  {
    try
    {
      if (this.mLocations.size() == 1)
      {
        changeCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(((LocationModel)this.mLocations.get(0)).latitude, ((LocationModel)this.mLocations.get(0)).longitude), 11.0F));
        return;
      }
      if (this.mLocations.size() <= 0) {
        return;
      }
      LatLngBounds.Builder localBuilder = LatLngBounds.builder();
      Iterator localIterator = this.mLocations.iterator();
      while (localIterator.hasNext())
      {
        LocationModel localLocationModel = (LocationModel)localIterator.next();
        localBuilder.include(new LatLng(localLocationModel.latitude, localLocationModel.longitude));
      }
      localLatLngBounds = localNullPointerException.build();
    }
    catch (NullPointerException localNullPointerException)
    {
      Log.e("MarkerMapFragment", "Could not animate camera", localNullPointerException);
      return;
    }
    LatLngBounds localLatLngBounds;
    if ((Math.abs(localLatLngBounds.northeast.latitude - localLatLngBounds.southwest.latitude) < 7.0E-4D) && (Math.abs(localLatLngBounds.northeast.longitude - localLatLngBounds.southwest.longitude) < 7.0E-4D))
    {
      changeCamera(CameraUpdateFactory.newLatLngZoom(new LatLng((localLatLngBounds.northeast.latitude + localLatLngBounds.southwest.latitude) / 2.0D, (localLatLngBounds.northeast.longitude + localLatLngBounds.southwest.longitude) / 2.0D), 19.0F));
      return;
    }
    changeCamera(CameraUpdateFactory.newLatLngBounds(localLatLngBounds, DeviceUtil.dpToPx(getActivity(), 70.0F)));
  }
  
  public void onInfoWindowClick(Marker paramMarker)
  {
    paramMarker = (LocationModel)this.mMarkerLocations.get(paramMarker);
    if (paramMarker != null)
    {
      String str = paramMarker.locationTarget;
      if ((str != null) && (str.trim().length() != 0))
      {
        paramMarker = str;
        if (str.indexOf("/") == -1) {
          paramMarker = App.getResourceUrl(str);
        }
        App.showPage(paramMarker, this);
      }
    }
  }
  
  public void onResume()
  {
    super.onResume();
    setUpMapIfNeeded();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    this.mMapView = ((MapView)paramView.findViewById(2131099684));
  }
  
  protected void setUpMap()
  {
    Object localObject1 = getArguments();
    if (localObject1 != null) {
      this.mLocations = ((Bundle)localObject1).getParcelableArrayList("locationsList");
    }
    if (this.mLocations == null) {
      this.mLocations = new ArrayList();
    }
    this.mMarkerLocations = new HashMap(this.mLocations.size());
    this.mMap.setMyLocationEnabled(true);
    this.mMap.setOnInfoWindowClickListener(this);
    localObject1 = this.mLocations.iterator();
    while (((Iterator)localObject1).hasNext())
    {
      LocationModel localLocationModel = (LocationModel)((Iterator)localObject1).next();
      Object localObject2 = new MarkerOptions();
      ((MarkerOptions)localObject2).position(new LatLng(localLocationModel.latitude, localLocationModel.longitude));
      if ((localLocationModel.locationName != null) && (localLocationModel.locationName.trim().length() != 0)) {
        ((MarkerOptions)localObject2).title(localLocationModel.locationName);
      }
      if ((localLocationModel.locationDescription != null) && (localLocationModel.locationDescription.trim().length() != 0)) {
        ((MarkerOptions)localObject2).snippet(localLocationModel.locationDescription);
      }
      localObject2 = this.mMap.addMarker((MarkerOptions)localObject2);
      this.mMarkerLocations.put(localObject2, localLocationModel);
    }
    if (this.mAnimatedMarkerZooming) {
      new Timer().schedule(new TimerTask()
      {
        public void run()
        {
          FragmentActivity localFragmentActivity = MarkerMapFragment.this.getActivity();
          if (localFragmentActivity != null) {
            localFragmentActivity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                MarkerMapFragment.this.zoomToMarkers();
              }
            });
          }
        }
      }, 1000L);
    }
    while (!this.mMapView.getViewTreeObserver().isAlive()) {
      return;
    }
    this.mMapView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener()
    {
      @SuppressLint({"NewApi"})
      public void onGlobalLayout()
      {
        if (Build.VERSION.SDK_INT < 16) {
          MarkerMapFragment.this.mMapView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        }
        for (;;)
        {
          MarkerMapFragment.this.zoomToMarkers();
          return;
          MarkerMapFragment.this.mMapView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
        }
      }
    });
  }
}
