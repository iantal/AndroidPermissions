package com.qbiki.location;

import android.app.Activity;
import android.app.SearchManager;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.GestureDetectorCompat;
import android.util.Log;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.widget.SearchView;
import com.actionbarsherlock.widget.SearchView.OnQueryTextListener;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.LocationSource;
import com.google.android.gms.maps.LocationSource.OnLocationChangedListener;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.qbiki.seattleclouds.SCMapFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.widget.TouchableWrapper;
import com.qbiki.widget.TouchableWrapper.OnTouchListener;

public class LocationDetectorFragment
  extends SCMapFragment
  implements SearchView.OnQueryTextListener
{
  public static final String ADDRESS = "address";
  private static final int ADDRESS_REFRESH_INTERVAL = 500;
  public static final String ARG_COORDINATE_FORMAT = "ARG_COORDINATE_FORMAT";
  public static final String ARG_PICKER_MODE_ENABLED = "ARG_PICKER_MODE_ENABLED";
  public static final String ARG_USE_ACTIVITY_SEARCH = "ARG_USE_ACTIVITY_SEARCH";
  private static final boolean DEBUG = false;
  private static final int DEFAULT_LOCATION_ZOOM_LEVEL = 16;
  private static final int DEFAULT_SEARH_ZOOM_LEVEL = 6;
  public static final String LATITUDE = "latitude";
  public static final String LONGITUDE = "longitude";
  public static final double NO_COORDINATE = 1000.0D;
  private static final boolean SEARCH_DEBUG = false;
  private static final String TAG = "LocationDetectorFragment";
  private TextView mAddressText;
  private int mCoordinateFormat = 0;
  private LatLng mCurrentLocation = new LatLng(0.0D, 0.0D);
  private GestureDetectorCompat mDetector;
  private AsyncGeocoder mGeocoder;
  private LatLng mLastAddressLocation = new LatLng(0.0D, 0.0D);
  private long mLastAddressRefreshTime = 0L;
  private TextView mLatitudeText;
  private TextView mLongitudeText;
  private boolean mLookupAddressForCurrentLocation = true;
  private GoogleMap mMap;
  protected boolean mMapFollowsMyLocation = false;
  protected boolean mMapZoomsToMyLocation = false;
  private boolean mPickerModeEnabled = false;
  private AsyncGeocoder mReverseGeocoder;
  private SearchView mSearchView;
  private TouchableWrapper mTouchableMapWrapper;
  
  public LocationDetectorFragment() {}
  
  private InputMethodManager getInputMethodManager()
  {
    FragmentActivity localFragmentActivity = getActivity();
    if (localFragmentActivity != null) {
      return (InputMethodManager)localFragmentActivity.getSystemService("input_method");
    }
    return null;
  }
  
  private View getSearchView()
  {
    this.mSearchView = new SearchView(getActivity());
    Object localObject = this.mSearchView;
    if (!DeviceUtil.isTablet(getActivity())) {}
    for (boolean bool = true;; bool = false)
    {
      ((SearchView)localObject).setIconifiedByDefault(bool);
      this.mSearchView.setQueryHint(getString(2131362192));
      this.mSearchView.setOnQueryTextListener(this);
      this.mSearchView.setOnQueryTextFocusChangeListener(new View.OnFocusChangeListener()
      {
        public void onFocusChange(View paramAnonymousView, boolean paramAnonymousBoolean)
        {
          if (paramAnonymousBoolean)
          {
            paramAnonymousView = LocationDetectorFragment.this;
            LocationDetectorFragment.this.mMapFollowsMyLocation = false;
            paramAnonymousView.mMapZoomsToMyLocation = false;
          }
        }
      });
      if ((getActivity() instanceof LocationDetectorActivity))
      {
        localObject = (SearchManager)getActivity().getSystemService("search");
        this.mSearchView.setSearchableInfo(((SearchManager)localObject).getSearchableInfo(getActivity().getComponentName()));
      }
      return this.mSearchView;
    }
  }
  
  private void initButtonActions()
  {
    ((Button)getView().findViewById(2131099926)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = LocationDetectorFragment.this.mMap.getCameraPosition().target;
        Intent localIntent = new Intent();
        localIntent.putExtra("address", LocationDetectorFragment.this.mAddressText.getText().toString());
        localIntent.putExtra("latitude", paramAnonymousView.latitude);
        localIntent.putExtra("longitude", paramAnonymousView.longitude);
        LocationDetectorFragment.this.getActivity().setResult(-1, localIntent);
        LocationDetectorFragment.this.getActivity().finish();
      }
    });
    ((Button)getView().findViewById(2131099794)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        LocationDetectorFragment.this.getActivity().setResult(0, null);
        LocationDetectorFragment.this.getActivity().finish();
      }
    });
  }
  
  private LatLng latLngFromLocation(Location paramLocation)
  {
    return new LatLng(paramLocation.getLatitude(), paramLocation.getLongitude());
  }
  
  private void setUpMap()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      this.mCoordinateFormat = localBundle.getInt("ARG_COORDINATE_FORMAT", this.mCoordinateFormat);
    }
    UiSettings localUiSettings = this.mMap.getUiSettings();
    localUiSettings.setCompassEnabled(true);
    this.mCurrentLocation = this.mMap.getCameraPosition().target;
    refreshCoordinates(this.mCurrentLocation);
    if (this.mPickerModeEnabled)
    {
      this.mMapFollowsMyLocation = false;
      this.mMapZoomsToMyLocation = false;
      double d1 = localBundle.getDouble("latitude", 1000.0D);
      double d2 = localBundle.getDouble("longitude", 1000.0D);
      if ((d1 != 1000.0D) && (d2 != 1000.0D)) {
        this.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(d1, d2), 16.0F));
      }
    }
    for (;;)
    {
      if (this.mMapFollowsMyLocation) {
        this.mMap.setLocationSource(new MyCurrentLocationSource(null));
      }
      this.mMap.setMyLocationEnabled(true);
      localUiSettings.setMyLocationButtonEnabled(true);
      this.mMap.setOnCameraChangeListener(new GoogleMap.OnCameraChangeListener()
      {
        public void onCameraChange(CameraPosition paramAnonymousCameraPosition)
        {
          if (!LocationDetectorFragment.this.mCurrentLocation.equals(paramAnonymousCameraPosition.target))
          {
            LocationDetectorFragment.access$302(LocationDetectorFragment.this, paramAnonymousCameraPosition.target);
            LocationDetectorFragment.this.refreshCoordinates(LocationDetectorFragment.this.mCurrentLocation);
            if (System.currentTimeMillis() - LocationDetectorFragment.this.mLastAddressRefreshTime > 500L)
            {
              LocationDetectorFragment.access$402(LocationDetectorFragment.this, System.currentTimeMillis());
              LocationDetectorFragment.this.refreshAddress(LocationDetectorFragment.this.mCurrentLocation);
            }
          }
        }
      });
      this.mTouchableMapWrapper.setListener(new TouchableWrapper.OnTouchListener()
      {
        public boolean onTouch(MotionEvent paramAnonymousMotionEvent)
        {
          LocationDetectorFragment.this.mDetector.onTouchEvent(paramAnonymousMotionEvent);
          if (paramAnonymousMotionEvent.getAction() == 1) {
            LocationDetectorFragment.this.refreshAddress(LocationDetectorFragment.this.mCurrentLocation);
          }
          return false;
        }
      });
      this.mDetector = new GestureDetectorCompat(getActivity(), new GestureDetector.SimpleOnGestureListener()
      {
        public boolean onDown(MotionEvent paramAnonymousMotionEvent)
        {
          LocationDetectorFragment.this.mMapZoomsToMyLocation = false;
          LocationDetectorFragment.access$602(LocationDetectorFragment.this, true);
          LocationDetectorFragment.this.mSearchView.clearFocus();
          return false;
        }
        
        public boolean onScroll(MotionEvent paramAnonymousMotionEvent1, MotionEvent paramAnonymousMotionEvent2, float paramAnonymousFloat1, float paramAnonymousFloat2)
        {
          if (!LocationDetectorFragment.this.mMapFollowsMyLocation) {}
          while ((Math.abs(paramAnonymousFloat1) <= 10.0F) && (Math.abs(paramAnonymousFloat2) <= 10.0F)) {
            return false;
          }
          LocationDetectorFragment.this.mMapFollowsMyLocation = false;
          return false;
        }
      });
      return;
      this.mMapFollowsMyLocation = true;
      this.mMapZoomsToMyLocation = true;
    }
  }
  
  private void setUpMapIfNeeded()
  {
    int i;
    if (this.mMap == null)
    {
      this.mMap = ((MapView)getView().findViewById(2131099684)).getMap();
      if (this.mMap != null) {
        i = 0;
      }
    }
    try
    {
      MapsInitializer.initialize(getActivity());
      i = 1;
    }
    catch (GooglePlayServicesNotAvailableException localGooglePlayServicesNotAvailableException)
    {
      for (;;)
      {
        Log.w("LocationDetectorFragment", "Could not initialize maps");
      }
    }
    if (i != 0) {
      setUpMap();
    }
  }
  
  void handleSearchAction(String paramString)
  {
    this.mMapFollowsMyLocation = false;
    this.mMapZoomsToMyLocation = false;
    this.mLookupAddressForCurrentLocation = false;
    this.mSearchView.clearFocus();
    InputMethodManager localInputMethodManager = getInputMethodManager();
    if (localInputMethodManager != null) {
      localInputMethodManager.hideSoftInputFromWindow(this.mSearchView.getWindowToken(), 0);
    }
    this.mAddressText.setText(paramString);
    this.mSearchView.setQuery(paramString, false);
    if (this.mReverseGeocoder == null) {
      this.mReverseGeocoder = new AsyncGeocoder(getActivity(), getActivity(), new AsyncTaskListener()
      {
        public void asyncTaskFinished(Object paramAnonymousObject)
        {
          paramAnonymousObject = (Location)paramAnonymousObject;
          if (paramAnonymousObject == null)
          {
            DialogUtil.showAlert(LocationDetectorFragment.this.getActivity(), 2131361916, 2131362196);
            return;
          }
          if (paramAnonymousObject.equals(AsyncGeocoder.LOCATION_NOT_FOUND))
          {
            Toast.makeText(LocationDetectorFragment.this.getActivity(), LocationDetectorFragment.this.getString(2131362195, new Object[] { LocationDetectorFragment.this.mSearchView.getQuery() }), 1).show();
            return;
          }
          paramAnonymousObject = LocationDetectorFragment.this.latLngFromLocation(paramAnonymousObject);
          LocationDetectorFragment.this.refreshCoordinates(paramAnonymousObject);
          if (LocationDetectorFragment.this.mMap.getCameraPosition().zoom < 6.0F)
          {
            LocationDetectorFragment.this.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(paramAnonymousObject, 6.0F));
            return;
          }
          LocationDetectorFragment.this.mMap.animateCamera(CameraUpdateFactory.newLatLng(paramAnonymousObject));
        }
      });
    }
    this.mReverseGeocoder.getLocation(paramString);
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if (paramBoolean)
    {
      getActivity().getWindow().setSoftInputMode(32);
      return;
    }
    getActivity().getWindow().setSoftInputMode(16);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenu = paramMenu.add(2131361934);
    paramMenu.setIcon(17301583);
    paramMenu.setShowAsAction(10);
    paramMenu.setActionView(getSearchView());
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    return paramLayoutInflater.inflate(2130903134, paramViewGroup, false);
  }
  
  public boolean onQueryTextChange(String paramString)
  {
    return true;
  }
  
  public boolean onQueryTextSubmit(String paramString)
  {
    handleSearchAction(paramString);
    return true;
  }
  
  public void onResume()
  {
    super.onResume();
    setUpMapIfNeeded();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    this.mTouchableMapWrapper = ((TouchableWrapper)paramView.findViewById(2131099924));
    this.mLatitudeText = ((TextView)paramView.findViewById(2131099921));
    this.mLongitudeText = ((TextView)paramView.findViewById(2131099922));
    this.mAddressText = ((TextView)paramView.findViewById(2131099920));
    this.mAddressText.setText("");
    paramBundle = getArguments();
    if (paramBundle != null) {
      this.mPickerModeEnabled = paramBundle.getBoolean("ARG_PICKER_MODE_ENABLED");
    }
    if (this.mPickerModeEnabled)
    {
      paramView.findViewById(2131099792).setVisibility(0);
      initButtonActions();
    }
    refreshCoordinates(this.mCurrentLocation);
  }
  
  protected void refreshAddress(LatLng paramLatLng)
  {
    if (!this.mLookupAddressForCurrentLocation) {}
    while (this.mLastAddressLocation.equals(paramLatLng)) {
      return;
    }
    this.mLastAddressLocation = paramLatLng;
    if (this.mGeocoder == null) {
      this.mGeocoder = new AsyncGeocoder(getActivity(), getActivity(), new AsyncTaskListener()
      {
        public void asyncTaskFinished(Object paramAnonymousObject)
        {
          String str = (String)paramAnonymousObject;
          paramAnonymousObject = str;
          if (str == null) {
            paramAnonymousObject = LocationUtil.formatCoordinates(LocationDetectorFragment.this.mLastAddressLocation.latitude, LocationDetectorFragment.this.mLastAddressLocation.longitude, LocationDetectorFragment.this.mCoordinateFormat);
          }
          LocationDetectorFragment.this.mAddressText.setText(paramAnonymousObject);
        }
      });
    }
    this.mGeocoder.getAddress(paramLatLng.latitude, paramLatLng.longitude);
  }
  
  protected void refreshCoordinates(double paramDouble1, double paramDouble2)
  {
    this.mLatitudeText.setText(LocationUtil.formatCoordinate(paramDouble1, this.mCoordinateFormat));
    this.mLongitudeText.setText(LocationUtil.formatCoordinate(paramDouble2, this.mCoordinateFormat));
  }
  
  protected void refreshCoordinates(LatLng paramLatLng)
  {
    refreshCoordinates(paramLatLng.latitude, paramLatLng.longitude);
  }
  
  private class MyCurrentLocationSource
    implements LocationSource
  {
    private LocationSource.OnLocationChangedListener mListener;
    private SimpleLocationManager mLocationManager;
    
    private MyCurrentLocationSource() {}
    
    public void activate(LocationSource.OnLocationChangedListener paramOnLocationChangedListener)
    {
      this.mListener = paramOnLocationChangedListener;
      if (LocationDetectorFragment.this.getActivity() == null) {
        return;
      }
      if (this.mLocationManager == null)
      {
        this.mLocationManager = new SimpleLocationManager(LocationDetectorFragment.this.getActivity(), new SimpleLocationManager.BestLocationEstimateListenerAdapter()
        {
          public void onBestLocationEstimateChanged(Location paramAnonymousLocation)
          {
            super.onBestLocationEstimateChanged(paramAnonymousLocation);
            if (LocationDetectorFragment.MyCurrentLocationSource.this.mListener != null) {
              LocationDetectorFragment.MyCurrentLocationSource.this.mListener.onLocationChanged(paramAnonymousLocation);
            }
            if (LocationDetectorFragment.this.mMapFollowsMyLocation)
            {
              if (LocationDetectorFragment.this.mMapZoomsToMyLocation) {
                LocationDetectorFragment.this.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(paramAnonymousLocation.getLatitude(), paramAnonymousLocation.getLongitude()), 16.0F));
              }
            }
            else {
              return;
            }
            LocationDetectorFragment.this.mMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(paramAnonymousLocation.getLatitude(), paramAnonymousLocation.getLongitude())));
          }
        });
        this.mLocationManager.setMinTime(500L);
      }
      this.mLocationManager.startUpdatingLocation();
    }
    
    public void deactivate()
    {
      this.mListener = null;
      if (this.mLocationManager != null) {
        this.mLocationManager.stopUpdatingLocation();
      }
    }
  }
}
