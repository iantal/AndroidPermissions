package com.qbiki.shoppingcart;

import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import android.util.Log;
import android.webkit.WebView;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.MoneyFormatUtil;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ShoppingCart
{
  private static boolean DEBUG_PAGE = true;
  public static final int FAILED_ADDED = 1;
  public static final int FAILED_REMOVED = 3;
  public static final int FAILED_UPDATE = 5;
  public static final int SUCCESSFULLY_ADDED = 0;
  public static final int SUCCESSFULLY_REMOVED = 2;
  public static final int SUCCESSFULLY_UPDATED = 4;
  private static String TAG = ShoppingCart.class.getSimpleName();
  private String mDeliveryAddress = "";
  private ArrayList<ShoppingCartItem> shoppingCard = new ArrayList();
  
  public ShoppingCart() {}
  
  public int addToCart(SCProduct paramSCProduct, Context paramContext)
  {
    if (paramSCProduct == null) {
      return 1;
    }
    int i = this.shoppingCard.indexOf(paramSCProduct);
    if (i >= 0)
    {
      paramSCProduct = (ShoppingCartItem)this.shoppingCard.get(i);
      paramSCProduct.setQuantity(paramSCProduct.getQuantity() + 1);
    }
    for (;;)
    {
      return 0;
      paramSCProduct = new ShoppingCartItem(paramSCProduct);
      this.shoppingCard.add(paramSCProduct);
    }
  }
  
  public void addToCart(String paramString, Context paramContext)
    throws UnsupportedEncodingException
  {
    SCProduct localSCProduct = new SCProduct();
    Resources localResources = paramContext.getResources();
    String str = localResources.getString(2131362153);
    localSCProduct.setID(Uri.parse(paramString).getHost());
    int i = paramString.indexOf("?");
    if (i != -1)
    {
      localResources.getString(2131362152);
      String[] arrayOfString = paramString.substring(i + 1).split("&");
      int j = arrayOfString.length;
      i = 0;
      if (i < j)
      {
        paramString = arrayOfString[i].split("=");
        Object localObject;
        if (paramString.length == 2)
        {
          localObject = paramString[0];
          str = paramString[1];
          if (!localObject.equalsIgnoreCase("itemname")) {
            break label152;
          }
          localSCProduct.setName(str);
          paramString = str;
        }
        for (;;)
        {
          if (localObject.equalsIgnoreCase("urlinfo")) {
            localSCProduct.setURLInfo(paramString);
          }
          i += 1;
          break;
          label152:
          if (localObject.equalsIgnoreCase("itemprice"))
          {
            paramString = str.replaceAll("[^\\d.]", "");
            localSCProduct.setPrice(Double.parseDouble(paramString));
          }
          else
          {
            paramString = str;
            if (localObject.equalsIgnoreCase("urlimg"))
            {
              localSCProduct.setURLImage(str);
              paramString = str;
            }
          }
        }
      }
      str = localSCProduct.getName() + " " + localResources.getString(2131362152);
    }
    i = this.shoppingCard.indexOf(localSCProduct);
    if (i >= 0)
    {
      paramString = (ShoppingCartItem)this.shoppingCard.get(i);
      paramString.setQuantity(paramString.getQuantity() + 1);
    }
    for (;;)
    {
      DialogUtil.showAlert(paramContext, "Info", str);
      return;
      paramString = new ShoppingCartItem(localSCProduct);
      this.shoppingCard.add(paramString);
    }
  }
  
  public void clear()
  {
    this.shoppingCard.clear();
  }
  
  public String getDeliveryAddress()
  {
    return this.mDeliveryAddress;
  }
  
  public ArrayList<ShoppingCartItem> getShoppingCartItems()
  {
    return this.shoppingCard;
  }
  
  public int removeFromCart(SCProduct paramSCProduct, Context paramContext)
  {
    if (paramSCProduct == null) {
      return 3;
    }
    int i = this.shoppingCard.indexOf(paramSCProduct);
    if (i >= 0) {
      this.shoppingCard.remove(i);
    }
    return 2;
  }
  
  public void removeFromCart(String paramString, Context paramContext)
    throws UnsupportedEncodingException
  {
    Resources localResources = paramContext.getResources();
    Object localObject = localResources.getString(2131362154);
    String str = Uri.parse(paramString).getHost();
    int j = -1;
    int i = 0;
    Iterator localIterator = this.shoppingCard.iterator();
    paramString = (String)localObject;
    while (localIterator.hasNext())
    {
      localObject = (ShoppingCartItem)localIterator.next();
      if (((ShoppingCartItem)localObject).getID().compareTo(str) == 0)
      {
        paramString = ((ShoppingCartItem)localObject).getName() + " " + localResources.getString(2131362155);
        j = i;
      }
      i += 1;
    }
    if (j == -1)
    {
      DialogUtil.showAlert(paramContext, "Info", paramString);
      return;
    }
    localObject = (ShoppingCartItem)this.shoppingCard.get(j);
    i = ((ShoppingCartItem)localObject).getQuantity();
    if (i > 1) {
      ((ShoppingCartItem)localObject).setQuantity(i - 1);
    }
    for (;;)
    {
      DialogUtil.showAlert(paramContext, "Info", paramString);
      return;
      this.shoppingCard.remove(j);
    }
  }
  
  public void setDeliveryAddress(String paramString)
  {
    this.mDeliveryAddress = paramString;
  }
  
  public int setQuantityForProduct(Integer paramInteger, SCProduct paramSCProduct, Context paramContext)
  {
    if (paramSCProduct == null) {}
    int i;
    do
    {
      return 5;
      i = this.shoppingCard.indexOf(paramSCProduct);
    } while (i < 0);
    ((ShoppingCartItem)this.shoppingCard.get(i)).setQuantity(paramInteger.intValue());
    return 4;
  }
  
  public void showShoppingCartFromWeb(WebView paramWebView, String paramString)
  {
    Object localObject = "javascript:document.getElementById(\"shpreturnurl\").value = \"" + App.urlScheme + "\";";
    paramString = (String)localObject + "document.getElementById(\"shppage\").value = \"" + paramString + "\";";
    localObject = new JSONArray();
    Iterator localIterator = this.shoppingCard.iterator();
    while (localIterator.hasNext())
    {
      ShoppingCartItem localShoppingCartItem = (ShoppingCartItem)localIterator.next();
      try
      {
        JSONObject localJSONObject = new JSONObject();
        localJSONObject.put("itemid", localShoppingCartItem.getID());
        localJSONObject.put("itemname", localShoppingCartItem.getName());
        localJSONObject.put("itemprice", MoneyFormatUtil.getFormattedCurrencyString("USD", localShoppingCartItem.getPrice()));
        localJSONObject.put("itemcount", localShoppingCartItem.getQuantity());
        localJSONObject.put("urlimg", localShoppingCartItem.getURLImage());
        localJSONObject.put("urlinfo", localShoppingCartItem.getURLInfo());
        ((JSONArray)localObject).put(localJSONObject);
      }
      catch (JSONException paramWebView)
      {
        Log.e(TAG, "ERROR:" + paramWebView.getLocalizedMessage(), paramWebView);
        return;
      }
    }
    localObject = ((JSONArray)localObject).toString();
    if (DEBUG_PAGE) {
      Log.d(TAG, (String)localObject);
    }
    paramWebView.loadUrl(paramString + "getShoppingCart(" + (String)localObject + ");");
  }
}
