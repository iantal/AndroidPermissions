package com.qbiki.modules.nativetetris;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.util.Log;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class TetrisGame
{
  private static final int BLOCK_I = 6;
  private static final int BLOCK_J = 1;
  private static final int BLOCK_L = 0;
  private static final int BLOCK_O = 2;
  private static final int BLOCK_S = 3;
  private static final int BLOCK_T = 4;
  private static final int BLOCK_Z = 5;
  private static final String CELL_IMG_RES = "CELL_IMG_RES";
  public static final int COLUMNS_COUNT = 10;
  private static final String GAME_BEST_SCORE = "GAME_BEST_SCORE";
  private static final String GAME_BOARD = "GAME_BOARD";
  public static final int GAME_IS_RUNING = 0;
  private static final String GAME_LEVEL = "GAME_LEVEL";
  public static final int GAME_OVER = 2;
  public static final int GAME_PAUSED = 1;
  private static final String GAME_SCORE = "GAME_SCORE";
  private static final String GAME_STATE = "GAME_STATE";
  private static final String IS_CELL_EMPTY = "IS_CELL_EMPTY";
  public static final int LEVEL_UP_AT_SCORE = 100;
  public static final int LINES_COUNT = 22;
  public static final String TAG = TetrisGame.class.getSimpleName();
  public static final int X_SPAWN_POINT = 4;
  public static final int Y_SPAWN_POINT = 0;
  static int blockid = 0;
  private BlockObject mActiveBlock = null;
  private ArrayList<Cell> mBoard = new ArrayList(220);
  private int mGameBestScore;
  private int mGameLevel;
  private int mGameScore;
  private int mGameState;
  private int mHiestXpoint = 22;
  private BlockObject mNextBlock = null;
  
  public TetrisGame()
  {
    int i = 0;
    while (i < 220)
    {
      this.mBoard.add(new Cell());
      i += 1;
    }
    initTestCase(3);
  }
  
  private void addBlockToBuilding()
  {
    Cell localCell1 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[0].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[0].x));
    Cell localCell2 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[1].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[1].x));
    Cell localCell3 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[2].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[2].x));
    Cell localCell4 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[3].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[3].x));
    if (this.mHiestXpoint > this.mActiveBlock.mBasePoint.x) {
      this.mHiestXpoint = this.mActiveBlock.mBasePoint.x;
    }
    localCell1.setIsEmpty(false);
    localCell1.setImageResource(this.mActiveBlock.mImgResKey);
    localCell2.setIsEmpty(false);
    localCell2.setImageResource(this.mActiveBlock.mImgResKey);
    localCell3.setIsEmpty(false);
    localCell3.setImageResource(this.mActiveBlock.mImgResKey);
    localCell4.setIsEmpty(false);
    localCell4.setImageResource(this.mActiveBlock.mImgResKey);
  }
  
  private boolean canMoveDown()
  {
    boolean bool = true;
    moveActiveBlock(0, 1);
    if (!isCollision()) {}
    for (;;)
    {
      moveActiveBlock(0, -1);
      return bool;
      bool = false;
    }
  }
  
  private boolean canMoveLeft()
  {
    moveActiveBlock(-1, 0);
    if (!isCollision()) {}
    for (boolean bool = true;; bool = false)
    {
      moveActiveBlock(1, 0);
      return bool;
    }
  }
  
  private boolean canMoveRight()
  {
    boolean bool = true;
    moveActiveBlock(1, 0);
    if (!isCollision()) {}
    for (;;)
    {
      moveActiveBlock(-1, 0);
      return bool;
      bool = false;
    }
  }
  
  private boolean canRotate()
  {
    boolean bool = true;
    if ((this.mGameState == 1) || (this.mGameState == 2)) {
      return false;
    }
    this.mActiveBlock.rotate(BlockObject.RotateDirection.CLOCKWISE);
    if (!isCollision()) {}
    for (;;)
    {
      this.mActiveBlock.rotate(BlockObject.RotateDirection.COUNTER_CLOCKWISE);
      return bool;
      bool = false;
    }
  }
  
  private ArrayList<Integer> getFullLines()
  {
    ArrayList localArrayList = new ArrayList();
    if ((21 < 0) || (0 < 0) || (21 >= 22) || (22 >= 0)) {
      return localArrayList;
    }
    int i = 21;
    label36:
    int m;
    int j;
    if (i >= 0)
    {
      m = 1;
      j = 0;
    }
    for (;;)
    {
      int k = m;
      if (j < 10)
      {
        if (((Cell)this.mBoard.get(i * 10 + j)).isEmpty()) {
          k = 0;
        }
      }
      else
      {
        if (k != 0) {
          localArrayList.add(Integer.valueOf(i));
        }
        i -= 1;
        break label36;
        break;
      }
      j += 1;
    }
  }
  
  private void initTestCase(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return;
    case 0: 
      initTestCase0();
      return;
    case 1: 
      initTestCase1();
      return;
    }
    initTestCase2();
  }
  
  private void initTestCase0()
  {
    int i = 0;
    while (i < 22)
    {
      int j = 0;
      if (j < 10)
      {
        Cell localCell;
        if (i == 21)
        {
          localCell = (Cell)this.mBoard.get(i * 10 + j);
          localCell.setIsEmpty(false);
          localCell.setImageResource("red");
        }
        for (;;)
        {
          j += 1;
          break;
          if (i == 20)
          {
            localCell = (Cell)this.mBoard.get(i * 10 + j);
            localCell.setIsEmpty(false);
            localCell.setImageResource("blue");
          }
          else if (i == 19)
          {
            localCell = (Cell)this.mBoard.get(i * 10 + j);
            localCell.setIsEmpty(false);
            localCell.setImageResource("blue");
          }
          else if ((i == 18) && (j != 8))
          {
            localCell = (Cell)this.mBoard.get(i * 10 + j);
            localCell.setIsEmpty(false);
            localCell.setImageResource("blue");
          }
        }
      }
      i += 1;
    }
  }
  
  private void initTestCase1()
  {
    int i = 0;
    while (i < 22)
    {
      int j = 0;
      while (j < 10)
      {
        if ((i == 21) && (j % 2 == 0)) {
          ((Cell)this.mBoard.get(i * 10 + j)).setIsEmpty(false);
        }
        j += 1;
      }
      i += 1;
    }
  }
  
  private void initTestCase2()
  {
    int i = 0;
    while (i < 22)
    {
      int j = 0;
      while (j < 10)
      {
        if ((i == 21) && (j != 5)) {
          ((Cell)this.mBoard.get(i * 10 + j)).setIsEmpty(false);
        }
        j += 1;
      }
      i += 1;
    }
  }
  
  private boolean isCollision()
  {
    boolean bool = false;
    if (this.mActiveBlock == null) {}
    while (isOutOfBounds()) {
      return true;
    }
    Cell localCell1 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[0].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[0].x));
    Cell localCell2 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[1].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[1].x));
    Cell localCell3 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[2].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[2].x));
    Cell localCell4 = (Cell)this.mBoard.get((this.mActiveBlock.mBasePoint.y + this.mActiveBlock.mCoords[3].y) * 10 + (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.mCoords[3].x));
    if ((!localCell1.isEmpty()) || (!localCell2.isEmpty()) || (!localCell3.isEmpty()) || (!localCell4.isEmpty())) {
      bool = true;
    }
    return bool;
  }
  
  private boolean isOutOfBounds()
  {
    if (this.mActiveBlock == null) {}
    do
    {
      return false;
      if ((this.mActiveBlock.mBasePoint.x < 0) || (this.mActiveBlock.mBasePoint.x + this.mActiveBlock.getWidth() > 10)) {
        return true;
      }
    } while (this.mActiveBlock.mBasePoint.y + 4 <= 22);
    return true;
  }
  
  private void moveActiveBlock(int paramInt1, int paramInt2)
  {
    this.mActiveBlock.moveTo(this.mActiveBlock.getBasePoint().x + paramInt1, this.mActiveBlock.getBasePoint().y + paramInt2);
  }
  
  private void moveBuildingDownFromLineAndUp(int paramInt)
  {
    int i = 1;
    if (this.mHiestXpoint < 1) {
      this.mHiestXpoint = i;
    }
    for (;;)
    {
      if (paramInt < this.mHiestXpoint) {
        break label108;
      }
      i = 0;
      for (;;)
      {
        if (i < 10)
        {
          Cell localCell1 = (Cell)this.mBoard.get(paramInt * 10 + i);
          Cell localCell2 = (Cell)this.mBoard.get((paramInt - 1) * 10 + i);
          localCell1.setIsEmpty(localCell2.isEmpty());
          localCell1.setImageResource(localCell2.getImageResource());
          i += 1;
          continue;
          i = this.mHiestXpoint;
          break;
        }
      }
      paramInt -= 1;
    }
    label108:
    removeLine(0);
  }
  
  private void removeLine(int paramInt)
  {
    int i = 0;
    while (i < 10)
    {
      ((Cell)this.mBoard.get(paramInt * 10 + i)).setIsEmpty(true);
      i += 1;
    }
  }
  
  private void removeLinesAndMoveBuildDown()
  {
    ArrayList localArrayList = getFullLines();
    int j = localArrayList.size();
    updateScore(j);
    int i = 0;
    while (i < j)
    {
      removeLine(((Integer)localArrayList.get(i)).intValue());
      i += 1;
    }
    i = 0;
    while (i < j)
    {
      moveBuildingDownFromLineAndUp(((Integer)localArrayList.get(i)).intValue() + i);
      i += 1;
    }
  }
  
  private void updateScore(int paramInt)
  {
    switch (paramInt)
    {
    }
    for (;;)
    {
      if (this.mGameScore - this.mGameLevel * 100 >= 100) {
        this.mGameLevel += 1;
      }
      if (this.mGameScore > this.mGameBestScore) {
        this.mGameBestScore = this.mGameScore;
      }
      return;
      this.mGameScore += 10;
      continue;
      this.mGameScore += 25;
      continue;
      this.mGameScore += 40;
      continue;
      this.mGameScore += 55;
    }
  }
  
  public void drawBuilding(Canvas paramCanvas, int paramInt1, int paramInt2, HashMap<String, Drawable> paramHashMap)
  {
    int j = paramInt2 + 0;
    int n = 0;
    int k = j + paramInt1;
    int i = 0 + paramInt1;
    int m = 0;
    while (m < 22)
    {
      int i2 = 0;
      int i1 = j;
      j = i2;
      while (j < 10)
      {
        Object localObject = (Cell)this.mBoard.get(m * 10 + j);
        if (!((Cell)localObject).isEmpty())
        {
          localObject = (Drawable)paramHashMap.get(((Cell)localObject).getImageResource());
          if (localObject != null)
          {
            ((Drawable)localObject).setBounds(i1, n, k, i);
            ((Drawable)localObject).draw(paramCanvas);
          }
        }
        i2 = k + paramInt1;
        j += 1;
        i1 = k;
        k = i2;
      }
      j = paramInt2 + 0;
      n = i;
      k = j + paramInt1;
      i = n + paramInt1;
      m += 1;
    }
  }
  
  public BlockObject getActiveBlock()
  {
    return this.mActiveBlock;
  }
  
  public int getGameBestScore()
  {
    return this.mGameBestScore;
  }
  
  public int getGameLevel()
  {
    return this.mGameLevel;
  }
  
  public int getGameScore()
  {
    return this.mGameScore;
  }
  
  public int getGameState()
  {
    return this.mGameState;
  }
  
  public int getInterval()
  {
    return 2050 - this.mGameLevel * 2;
  }
  
  public BlockObject getNextBlock()
  {
    return this.mNextBlock;
  }
  
  public void newGame()
  {
    this.mGameScore = 0;
    this.mGameLevel = 0;
  }
  
  public void resetGame()
  {
    int i = 0;
    while (i < 220)
    {
      Cell localCell = (Cell)this.mBoard.get(i);
      localCell.setIsEmpty(true);
      localCell.setImageResource("empty");
      i += 1;
    }
    this.mGameLevel = 0;
    this.mGameScore = 0;
    this.mGameState = 1;
  }
  
  public void restoreGame(Context paramContext, String paramString)
  {
    if (paramContext == null) {}
    for (;;)
    {
      return;
      paramContext = paramContext.getSharedPreferences("GAME_STATEnativeTetris" + paramString, 0).getString("GAME_STATE", "");
      if (paramContext.length() == 0)
      {
        this.mGameScore = 0;
        this.mGameBestScore = 0;
        this.mGameLevel = 0;
        return;
      }
      try
      {
        paramContext = new JSONObject(paramContext);
        this.mGameScore = paramContext.getInt("GAME_SCORE");
        this.mGameBestScore = paramContext.getInt("GAME_BEST_SCORE");
        this.mGameLevel = paramContext.getInt("GAME_LEVEL");
        this.mGameState = paramContext.getInt("GAME_STATE");
        paramContext = paramContext.getJSONArray("GAME_BOARD");
        int j = paramContext.length();
        int i = 0;
        while (i < j)
        {
          paramString = (JSONObject)paramContext.get(i);
          Cell localCell = (Cell)this.mBoard.get(i);
          localCell.setIsEmpty(paramString.getBoolean("IS_CELL_EMPTY"));
          localCell.setImageResource(paramString.getString("CELL_IMG_RES"));
          i += 1;
        }
        return;
      }
      catch (JSONException paramContext)
      {
        this.mGameScore = 0;
        this.mGameBestScore = 0;
        this.mGameLevel = 0;
        Log.e(TAG, "ERROR:" + paramContext.getLocalizedMessage(), paramContext);
      }
    }
  }
  
  public void rotateActiveBlock()
  {
    if ((this.mActiveBlock != null) && (canRotate())) {
      this.mActiveBlock.rotate(BlockObject.RotateDirection.CLOCKWISE);
    }
  }
  
  public void saveGame(Context paramContext, String paramString)
  {
    JSONObject localJSONObject1 = new JSONObject();
    do
    {
      try
      {
        localJSONObject1.put("GAME_SCORE", this.mGameScore);
        localJSONObject1.put("GAME_BEST_SCORE", this.mGameBestScore);
        localJSONObject1.put("GAME_LEVEL", this.mGameLevel);
        localJSONObject1.put("GAME_STATE", this.mGameState);
        JSONArray localJSONArray = new JSONArray();
        Iterator localIterator = this.mBoard.iterator();
        while (localIterator.hasNext())
        {
          Cell localCell = (Cell)localIterator.next();
          JSONObject localJSONObject2 = new JSONObject();
          localJSONObject2.put("IS_CELL_EMPTY", localCell.isEmpty());
          localJSONObject2.put("CELL_IMG_RES", localCell.getImageResource());
          localJSONArray.put(localJSONObject2);
        }
        localJSONObject1.put("GAME_BOARD", localJSONArray);
      }
      catch (JSONException paramContext)
      {
        Log.e(TAG, "ERROR:" + paramContext.getLocalizedMessage(), paramContext);
        return;
      }
    } while (paramContext == null);
    paramContext = paramContext.getSharedPreferences("GAME_STATEnativeTetris" + paramString, 0).edit();
    paramContext.putString("GAME_STATE", localJSONObject1.toString());
    paramContext.commit();
  }
  
  public void setGameState(int paramInt)
  {
    this.mGameState = paramInt;
  }
  
  public void spawnBlock()
  {
    Random localRandom = new Random(new Date().getTime());
    Object localObject = null;
    switch (localRandom.nextInt(7))
    {
    }
    for (;;)
    {
      switch (localRandom.nextInt(7))
      {
      }
      try
      {
        for (;;)
        {
          if (this.mNextBlock != null) {
            break label303;
          }
          this.mNextBlock = ((BlockObject)localObject).clone();
          this.mNextBlock.mBasePoint.x = 0;
          this.mNextBlock.mBasePoint.y = 0;
          spawnBlock();
          return;
          localObject = new BlockL();
          break;
          localObject = new BlockJ();
          break;
          localObject = new BlockO();
          break;
          localObject = new BlockS();
          break;
          localObject = new BlockT();
          break;
          localObject = new BlockZ();
          break;
          localObject = new BlockI();
          break;
          ((BlockObject)localObject).mImgResKey = "blue";
          continue;
          ((BlockObject)localObject).mImgResKey = "cyan";
          continue;
          ((BlockObject)localObject).mImgResKey = "green";
          continue;
          ((BlockObject)localObject).mImgResKey = "magenta";
          continue;
          ((BlockObject)localObject).mImgResKey = "orange";
          continue;
          ((BlockObject)localObject).mImgResKey = "red";
          continue;
          ((BlockObject)localObject).mImgResKey = "yellow";
        }
        label303:
        this.mActiveBlock = this.mNextBlock.clone();
        this.mNextBlock = ((BlockObject)localObject);
        return;
      }
      catch (CloneNotSupportedException localCloneNotSupportedException)
      {
        Log.e(TAG, "Error:" + localCloneNotSupportedException.getLocalizedMessage(), localCloneNotSupportedException);
      }
    }
  }
  
  public boolean tryMoveActiveBlock(int paramInt1, int paramInt2)
  {
    boolean bool2 = true;
    boolean bool3 = true;
    if ((this.mGameState == 1) || (this.mGameState == 2)) {}
    do
    {
      do
      {
        return false;
      } while (this.mActiveBlock == null);
      if (paramInt1 > 0) {
        bool2 = true & canMoveRight();
      }
      boolean bool1 = bool2;
      if (paramInt1 < 0) {
        bool1 = bool2 & canMoveLeft();
      }
      bool2 = bool1;
      if (paramInt2 > 0)
      {
        bool3 = true & canMoveDown();
        bool2 = bool1 & bool3;
      }
      if (bool2) {
        moveActiveBlock(paramInt1, paramInt2);
      }
      while (bool3) {
        return true;
      }
      addBlockToBuilding();
      removeLinesAndMoveBuildDown();
      spawnBlock();
    } while (!isCollision());
    this.mGameState = 2;
    return false;
  }
  
  private class Cell
  {
    private String mImageResource = "empty";
    private boolean mIsEmpty = true;
    
    public Cell() {}
    
    public String getImageResource()
    {
      return this.mImageResource;
    }
    
    public boolean isEmpty()
    {
      return this.mIsEmpty;
    }
    
    public void setImageResource(String paramString)
    {
      this.mImageResource = paramString;
    }
    
    public void setIsEmpty(boolean paramBoolean)
    {
      this.mIsEmpty = paramBoolean;
    }
  }
}
