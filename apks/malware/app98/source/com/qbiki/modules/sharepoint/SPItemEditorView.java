package com.qbiki.modules.sharepoint;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.app.TimePickerDialog.OnTimeSetListener;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnMultiChoiceClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore.Images.Media;
import android.text.format.DateFormat;
import android.util.Base64;
import android.util.Log;
import android.util.SparseBooleanArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import com.qbiki.feedback.Field;
import com.qbiki.feedback.PickerView;
import com.qbiki.location.AsyncGeocoder;
import com.qbiki.location.LocationDetectorActivity;
import com.qbiki.location.SimpleLocationManager;
import com.qbiki.location.SimpleLocationManager.BestLocationEstimateListenerAdapter;
import com.qbiki.mbfx.DynamicHTML;
import com.qbiki.modules.signaturestamp.DrawSurfaceActivity;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.StringUtil;
import com.qbiki.util.StyleUtil;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public class SPItemEditorView
{
  private static final int CONTENT = 1801;
  private static final int FILE = 1802;
  private static final int IMAGE_MAX_SIZE = 220;
  public static final String LATITUDE = "latitude";
  public static final String LONGITUDE = "longitude";
  public static final double NO_COORDINATE = 1000.0D;
  private static final String PREFERENCES_FOR_REMEMBER = "PREFERENCES_FOR_REMEMBER_DATA";
  private static final int SELECT_CAMERA = 1302;
  private static final int SELECT_IMAGE = 1301;
  private static final int SELECT_LOCATION = 1300;
  private static final int SELECT_SIGN = 1303;
  private static final String TAG = "SPItemEditorView";
  private Activity activity = null;
  private boolean afterSaved = false;
  private ArrayList<Object> arrFields = new ArrayList();
  private SparseBooleanArray checkedMultiList;
  private SPList dataList = new SPList();
  private SPListItem dataListItem = new SPListItem();
  private HashMap<String, String> dataUser = new HashMap();
  private double defaultLatitude;
  private double defaultLongitude;
  private SCFragment fragment;
  private HashMap<String, Uri> imagesForUpload = new HashMap();
  private String imgFileName;
  private boolean isModeCreateNewItem;
  private CharSequence[] listItems;
  private CharSequence[] listItemsID;
  private LinearLayout ll;
  private Location mCurrentLocation = new Location("code");
  private AsyncGeocoder mGeocoder;
  private View mLoadingView;
  private SimpleLocationManager mLocationManager;
  private Resources mResources;
  private View mView = null;
  private double nearLatitude = 0.0D;
  private double nearLongitude = 0.0D;
  private ProgressDialog progressDialog = null;
  private int progressDialogCount = 0;
  private boolean shouldUseCurrentLocation = false;
  private Bundle style;
  private String tag;
  private PickerView targetPV;
  
  public SPItemEditorView(Activity paramActivity)
  {
    this.activity = paramActivity;
    this.mResources = paramActivity.getResources();
  }
  
  public SPItemEditorView(Activity paramActivity, SPList paramSPList, SPListItem paramSPListItem, ArrayList<Object> paramArrayList)
  {
    this(paramActivity);
    this.dataList = paramSPList;
    this.dataListItem = paramSPListItem;
    if (this.dataListItem == null)
    {
      this.isModeCreateNewItem = true;
      this.dataListItem = new SPListItem();
      this.dataListItem.userData = new HashMap();
    }
    if (paramArrayList != null) {
      setArrFields(paramArrayList);
    }
  }
  
  public SPItemEditorView(SCFragment paramSCFragment)
  {
    this(paramSCFragment.getActivity());
    this.fragment = paramSCFragment;
  }
  
  public SPItemEditorView(SCFragment paramSCFragment, SPList paramSPList, SPListItem paramSPListItem, ArrayList<Object> paramArrayList)
  {
    this(paramSCFragment.getActivity(), paramSPList, paramSPListItem, paramArrayList);
    this.fragment = paramSCFragment;
  }
  
  private void checkRememberedData()
  {
    if ((SPServer.getInstance().credentials.enableRememberDataInEditor) && (this.isModeCreateNewItem))
    {
      Object localObject1 = getActivity();
      Object localObject2 = "PREFERENCES_FOR_REMEMBER_DATA" + this.dataList.idList;
      getActivity();
      localObject1 = (HashMap)((Activity)localObject1).getSharedPreferences((String)localObject2, 0).getAll();
      if ((localObject1 != null) && (((HashMap)localObject1).size() > 0))
      {
        this.dataUser.clear();
        localObject2 = this.arrFields.iterator();
        while (((Iterator)localObject2).hasNext())
        {
          Object localObject3 = (SPField)((Iterator)localObject2).next();
          localObject3 = "ows_" + ((SPField)localObject3).name;
          if ((((HashMap)localObject1).containsKey(localObject3)) && (!StringUtil.isEmpty(((String)((HashMap)localObject1).get(localObject3)).toString()))) {
            this.dataUser.put(localObject3, ((HashMap)localObject1).get(localObject3));
          }
        }
      }
    }
  }
  
  private Bitmap decodeBitmapFromUri(Uri paramUri, int paramInt)
  {
    try
    {
      BitmapFactory.Options localOptions = new BitmapFactory.Options();
      localOptions.inJustDecodeBounds = true;
      if (paramInt == 1801) {
        BitmapFactory.decodeStream(getActivity().getContentResolver().openInputStream(paramUri), null, localOptions);
      }
      for (;;)
      {
        int i = 1;
        if ((localOptions.outHeight > 220) || (localOptions.outWidth > 220)) {
          i = (int)Math.pow(2.0D, (int)Math.round(Math.log(220.0D / Math.max(localOptions.outHeight, localOptions.outWidth)) / Math.log(0.5D)));
        }
        localOptions = new BitmapFactory.Options();
        localOptions.inSampleSize = i;
        if (paramInt != 1801) {
          break;
        }
        return BitmapFactory.decodeStream(getActivity().getContentResolver().openInputStream(paramUri), null, localOptions);
        BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
      }
      paramUri = BitmapFactory.decodeStream(new FileInputStream(new File(paramUri.getPath())), null, localOptions);
    }
    catch (Exception paramUri)
    {
      Log.e("SPItemEditorView", "decodeBitmapFromUriString: " + paramUri.toString(), paramUri);
      return null;
    }
    return paramUri;
  }
  
  private void deleteItem()
  {
    SPResponseListener local13 = new SPResponseListener()
    {
      public void onResponseError(String paramAnonymousString)
      {
        SPItemEditorView.this.dismissProgressDialog();
        DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.mResources.getString(2131361915), paramAnonymousString);
      }
      
      public void onResponseReceived(ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
      {
        SPItemEditorView.this.dismissProgressDialog();
        DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.mResources.getString(2131361917), SPItemEditorView.this.mResources.getString(2131362362), new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            paramAnonymous2DialogInterface = new Intent();
            Object localObject = SPItemEditorView.this.dataList;
            ((SPList)localObject).itemCount -= 1;
            paramAnonymous2DialogInterface.putExtra("listSelected", SPItemEditorView.this.dataList);
            paramAnonymous2DialogInterface.putExtra("isDeleted", true);
            localObject = SPItemEditorView.this.getActivity();
            SPItemEditorView.this.getActivity();
            ((Activity)localObject).setResult(-1, paramAnonymous2DialogInterface);
            SPItemEditorView.this.getActivity().finish();
          }
        });
      }
      
      public void onResponseTimeout()
      {
        SPItemEditorView.this.dismissProgressDialog();
        DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.mResources.getString(2131361915), SPItemEditorView.this.mResources.getString(2131362355));
      }
    };
    showProgressDialog();
    SPServer.getInstance().deleteListItem(this.dataList, this.dataListItem, local13);
  }
  
  private void dismissProgressDialog()
  {
    try
    {
      this.progressDialogCount -= 1;
      if (this.progressDialogCount < 0) {
        this.progressDialogCount = 0;
      }
      Log.v("SPItemEditorView", "dismissProgressDialog: " + this.progressDialogCount);
      if ((this.progressDialogCount == 0) && (this.progressDialog != null)) {
        this.progressDialog.dismiss();
      }
      return;
    }
    finally {}
  }
  
  private Activity getActivity()
  {
    return this.activity;
  }
  
  private String getTypeOfFieldWithValue(SPField paramSPField, String paramString)
  {
    if (paramSPField.name.indexOf("Email") != -1) {
      return "email";
    }
    if (paramSPField.name.indexOf("Address") != -1) {
      return "location";
    }
    if (paramSPField.type.indexOf("DateTime") != -1)
    {
      if (paramSPField.format.equals("DateOnly")) {
        return "date";
      }
      if (paramSPField.format.equals("TimeOnly")) {
        return "time";
      }
      return "datetime";
    }
    if (paramSPField.type.indexOf("Note") == 0)
    {
      if (((paramString.indexOf("<") != -1) && (paramString.indexOf("</") != -1) && (paramString.indexOf(">") != -1)) || (paramSPField.richText)) {
        return "multilinerichtext";
      }
      return "multilinetext";
    }
    if ((paramSPField.type.indexOf("LookupMulti") == 0) || (paramSPField.type.equals("MultiChoice"))) {
      return "multilist";
    }
    if ((paramSPField.type.indexOf("Choice") != -1) || (paramSPField.type.indexOf("Lookup") == 0)) {
      return "list";
    }
    if ((paramSPField.type.indexOf("URL") != -1) && (paramSPField.format.equals("Image"))) {
      return "camimg";
    }
    if (paramSPField.type.equals("Number")) {
      return "int";
    }
    if (paramSPField.type.equals("Currency")) {
      return "float";
    }
    if (paramSPField.type.equals("Boolean")) {
      return "switch";
    }
    return "text";
  }
  
  private void rememeberValuesOfItem()
  {
    showProgressDialog(this.mResources.getString(2131362363));
    this.imagesForUpload.clear();
    int i = 0;
    PickerView localPickerView;
    try
    {
      if (i >= this.ll.getChildCount()) {
        break label943;
      }
      if (!this.ll.getChildAt(i).getClass().equals(PickerView.class)) {
        break label1081;
      }
      localPickerView = (PickerView)this.ll.getChildAt(i);
      String str1;
      if ((localPickerView.type == 5) || (localPickerView.type == 11) || (localPickerView.type == 6) || (localPickerView.type == 10))
      {
        str1 = localPickerView.field.fieldLabel;
        setValueForItem(localPickerView.ev.getText().toString(), str1, localPickerView.field.fieldId, true);
      }
      else if (localPickerView.type == 14)
      {
        str1 = localPickerView.field.fieldLabel;
        setValueForItem(localPickerView.richEditor.getText().toString(), str1, localPickerView.field.fieldId, true);
      }
    }
    catch (Exception localException)
    {
      Log.e("SPItemEditorView", "rememeberValuesOfItem: " + localException, localException);
      DialogUtil.showAlert(getActivity(), 2131361915, localException.getMessage());
      return;
    }
    Object localObject3;
    Object localObject2;
    Object localObject1;
    if ((localPickerView.type == 0) || (localPickerView.type == 1) || (localPickerView.type == 12))
    {
      localObject3 = localPickerView.field.fieldLabel;
      localObject2 = localPickerView.ev.getText().toString();
      if (localPickerView.type == 0) {
        localObject1 = (String)localObject2 + " 00:00:00";
      }
      for (;;)
      {
        setValueForItem((String)localObject1, (String)localObject3, localPickerView.field.fieldId, true);
        break;
        if (localPickerView.type != 1)
        {
          localObject1 = localObject2;
          if (localPickerView.type != 12) {}
        }
        else if ((((String)localObject2).contains("PM")) || (((String)localObject2).contains("AM")))
        {
          localObject1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd hh:mm a", Locale.US).parse((String)localObject2));
        }
        else
        {
          localObject1 = localObject2;
          if (!StringUtil.isEmpty((String)localObject2))
          {
            localObject1 = localObject2;
            if (!((String)localObject2).contains("PM"))
            {
              localObject1 = localObject2;
              if (!((String)localObject2).contains("AM")) {
                localObject1 = (String)localObject2 + ":00";
              }
            }
          }
        }
      }
    }
    if ((localPickerView.type == 7) || (localPickerView.type == 8))
    {
      String str2 = localPickerView.field.fieldLabel;
      localObject2 = localPickerView.selectedID;
      localObject3 = localPickerView.ev.getText().toString();
      localObject1 = localObject2;
      if (StringUtil.isEmpty((String)localObject2)) {
        localObject1 = localObject3;
      }
      setValueForItem((String)localObject1, str2, localPickerView.field.fieldId, true);
    }
    else if (localPickerView.type == 13)
    {
      localObject2 = localPickerView.field.fieldLabel;
      if (!localPickerView.getSwithPosition()) {
        break label1088;
      }
      localObject1 = "1";
      label576:
      setValueForItem((String)localObject1, (String)localObject2, localPickerView.field.fieldId, true);
    }
    else if (localPickerView.type == 2)
    {
      localObject1 = localPickerView.field.fieldLabel;
      if ((localPickerView.latitude == 0.0D) && (localPickerView.longitude == 0.0D))
      {
        localPickerView.latitude = this.mCurrentLocation.getLatitude();
        localPickerView.longitude = this.mCurrentLocation.getLongitude();
      }
      setValueForItem(localPickerView.latitude + ", " + localPickerView.longitude, (String)localObject1, localPickerView.field.fieldId, true);
    }
    else if ((localPickerView.type == 3) || (localPickerView.type == 4) || (localPickerView.type == 9))
    {
      localObject1 = localPickerView.field.fieldLabel;
      if (localPickerView.imageUri != null)
      {
        setValueForItem(localPickerView.imageUri.toString(), (String)localObject1, localPickerView.field.fieldId, true);
        Log.v("SPItemEditorView", "tempPV.imageUri = " + localPickerView.imageUri);
        localObject2 = SPServer.getInstance().credentials.uploadFolderURL + UUID.randomUUID().toString() + ".jpg";
        localObject1 = localObject2;
        if (((String)localObject2).indexOf(",") != -1) {
          localObject1 = ((String)localObject2).substring(0, ((String)localObject2).indexOf(","));
        }
        if ((localPickerView.imageUri != null) && (!StringUtil.isEmpty(localPickerView.imageUri.toString()))) {
          this.imagesForUpload.put(localPickerView.field.fieldId, localPickerView.imageUri);
        }
        for (;;)
        {
          setValueForItem((String)localObject1, localPickerView.field.fieldLabel, localPickerView.field.fieldId, true);
          break;
          localObject1 = localPickerView.fTargetURL;
        }
        label943:
        localObject2 = this.dataListItem.arrHiddenFields;
        localObject1 = localObject2;
        if (SPServer.getInstance().credentials.getHideFields() != null) {
          localObject1 = concat((String[])localObject2, SPServer.getInstance().credentials.getHideFields());
        }
        localObject3 = SPServer.getInstance().credentials.getValuesForFields();
        localObject2 = localObject3;
        if (localObject3 != null) {
          break label1095;
        }
        localObject2 = new Hashtable();
        break label1095;
      }
    }
    for (;;)
    {
      if ((i < localObject1.length) && (((Hashtable)localObject2).size() > 0))
      {
        if (((Hashtable)localObject2).contains(localObject1[i])) {
          setValueForItem((String)((Hashtable)localObject2).get(localObject1[i]), "ows_" + localObject1[i], "", true);
        }
      }
      else
      {
        dismissProgressDialog();
        return;
        label1081:
        i += 1;
        break;
        label1088:
        localObject1 = "0";
        break label576;
        label1095:
        i = 0;
        continue;
      }
      i += 1;
    }
  }
  
  private void saveDataOnServer()
  {
    if (this.imagesForUpload.size() > 0) {
      try
      {
        final String str1 = (String)this.imagesForUpload.keySet().iterator().next();
        Object localObject1 = (Uri)this.imagesForUpload.get(str1);
        Object localObject2 = getFieldFromArrFields(str1);
        localObject2 = "ows_" + ((SPField)localObject2).name;
        localObject2 = (String)this.dataListItem.userData.get(localObject2);
        localObject1 = DataUtil.readBytes(getActivity().getContentResolver().openInputStream((Uri)localObject1));
        String str2 = SPServer.getInstance().credentials.uploadFolderURL + UUID.randomUUID().toString() + ".png";
        if (str2.indexOf(",") != -1) {
          str2.substring(0, str2.indexOf(","));
        }
        SPServer.getInstance().uploadItemToDictinationURL((byte[])localObject1, (String)localObject2, new SPResponseListener()
        {
          public void onResponseError(String paramAnonymousString)
          {
            SPItemEditorView.this.dismissProgressDialog();
            DialogUtil.showAlert(SPItemEditorView.this.getActivity(), 2131361915, paramAnonymousString);
          }
          
          public void onResponseReceived(ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
          {
            SPItemEditorView.this.saveDataOnServer();
          }
          
          public void onResponseTimeout()
          {
            SPItemEditorView.this.dismissProgressDialog();
            DialogUtil.showAlert(SPItemEditorView.this.getActivity(), 2131361915, SPItemEditorView.this.mResources.getString(2131362355));
            SPItemEditorView.this.setValueForItem("", "", str1, false);
          }
        });
        this.imagesForUpload.remove(str1);
        return;
      }
      catch (Exception localException)
      {
        Log.e(this.tag, localException.getMessage());
        return;
      }
    }
    SPResponseListener local15 = new SPResponseListener()
    {
      public void onResponseError(String paramAnonymousString)
      {
        SPItemEditorView.this.dismissProgressDialog();
        DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.mResources.getString(2131361915), paramAnonymousString);
      }
      
      public void onResponseReceived(ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
      {
        SPItemEditorView.access$1902(SPItemEditorView.this, true);
        SPItemEditorView.this.dismissProgressDialog();
        paramAnonymousString = SPItemEditorView.this.getActivity();
        String str = SPItemEditorView.this.mResources.getString(2131361917);
        StringBuilder localStringBuilder = new StringBuilder().append("Item successfully ");
        if (SPItemEditorView.this.isModeCreateNewItem) {}
        for (paramAnonymousArrayList = SPItemEditorView.this.mResources.getString(2131362364);; paramAnonymousArrayList = SPItemEditorView.this.mResources.getString(2131362365))
        {
          DialogUtil.showAlert(paramAnonymousString, str, paramAnonymousArrayList, new DialogInterface.OnClickListener()
          {
            public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
            {
              paramAnonymous2DialogInterface = new Intent();
              if (SPItemEditorView.this.isModeCreateNewItem)
              {
                localObject = SPItemEditorView.this.dataList;
                ((SPList)localObject).itemCount += 1;
              }
              paramAnonymous2DialogInterface.putExtra("listSelected", SPItemEditorView.this.dataList);
              paramAnonymous2DialogInterface.putExtra("listItemSelected", SPItemEditorView.this.dataListItem);
              paramAnonymous2DialogInterface.putExtra("isModeCreateNewItem", SPItemEditorView.this.isModeCreateNewItem);
              Object localObject = SPItemEditorView.this.getActivity();
              SPItemEditorView.this.getActivity();
              ((Activity)localObject).setResult(-1, paramAnonymous2DialogInterface);
              SPItemEditorView.this.getActivity().finish();
            }
          });
          return;
        }
      }
      
      public void onResponseTimeout()
      {
        SPItemEditorView.this.dismissProgressDialog();
        DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.mResources.getString(2131361915), SPItemEditorView.this.mResources.getString(2131362355));
      }
    };
    if (this.isModeCreateNewItem)
    {
      SPServer.getInstance().newListItem(this.dataList, this.dataListItem, local15);
      return;
    }
    SPServer.getInstance().updateListItem(this.dataList, this.dataListItem, local15);
  }
  
  private List<String> setListValuesForLookupField(SPField paramSPField, Field paramField)
  {
    Object localObject;
    ArrayList localArrayList;
    Iterator localIterator;
    SPListItem localSPListItem;
    String str;
    if (paramSPField.type.equals("Lookup"))
    {
      localObject = new ArrayList();
      localArrayList = new ArrayList();
      localIterator = paramSPField.choicesForLookup.iterator();
      while (localIterator.hasNext())
      {
        localSPListItem = (SPListItem)localIterator.next();
        if (localSPListItem.userData.containsKey("ows_" + paramSPField.lookupShowFieldOfList))
        {
          str = (String)localSPListItem.userData.get("ows_" + paramSPField.lookupShowFieldOfList);
          str = SPSOAPParser.removePrefix(str);
          ((ArrayList)localObject).add(str);
          localArrayList.add(localSPListItem.ID + "# " + str);
        }
        else
        {
          if (StringUtil.isEmpty(localSPListItem.name))
          {
            str = localSPListItem.title;
            label200:
            if (!StringUtil.isEmpty(str)) {
              break label225;
            }
            str = localSPListItem.fileLeafRef;
          }
          for (;;)
          {
            break;
            str = localSPListItem.name;
            break label200;
            label225:
            if (StringUtil.isEmpty(localSPListItem.name)) {
              str = localSPListItem.title;
            } else {
              str = localSPListItem.name;
            }
          }
        }
      }
      paramField.listItems = ((List)localObject);
      paramField.listItems_id = localArrayList;
      paramSPField = paramField.getListItems();
    }
    label473:
    label498:
    do
    {
      do
      {
        return paramSPField;
        if (!paramSPField.type.equals("LookupMulti")) {
          break;
        }
        localObject = new ArrayList();
        localArrayList = new ArrayList();
        localIterator = paramSPField.choicesForLookup.iterator();
        while (localIterator.hasNext())
        {
          localSPListItem = (SPListItem)localIterator.next();
          if (localSPListItem.userData.containsKey("ows_" + paramSPField.lookupShowFieldOfList))
          {
            str = (String)localSPListItem.userData.get("ows_" + paramSPField.lookupShowFieldOfList);
            str = SPSOAPParser.removePrefix(str);
            ((ArrayList)localObject).add(str);
            localArrayList.add(localSPListItem.ID + "# " + str);
          }
          else
          {
            if (StringUtil.isEmpty(localSPListItem.name))
            {
              str = localSPListItem.title;
              if (!StringUtil.isEmpty(str)) {
                break label498;
              }
              str = localSPListItem.fileLeafRef;
            }
            for (;;)
            {
              break;
              str = localSPListItem.name;
              break label473;
              if (StringUtil.isEmpty(localSPListItem.name)) {
                str = localSPListItem.title;
              } else {
                str = localSPListItem.name;
              }
            }
          }
        }
        paramField.multiListItems = new HashMap();
        paramField.multiListItems.put("0", localObject);
        paramField.multiListItems_id = new HashMap();
        paramField.multiListItems_id.put("0", localArrayList);
        localObject = paramField.getMultiListItems();
        str = null;
        if (paramField.idListItem != null) {
          return (List)((Map)localObject).get(paramField.idListItem);
        }
        paramSPField = str;
      } while (localObject == null);
      paramSPField = str;
    } while (((Map)localObject).size() <= 0);
    return (List)((Map)localObject).get(localObject.keySet().toArray()[0]);
    return null;
  }
  
  private void setLocationFromInput(EditText paramEditText, Location paramLocation)
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation)) {
      this.mLocationManager.stopUpdatingLocation();
    }
    this.mCurrentLocation = paramLocation;
    updateUiForLocation(this.mCurrentLocation, paramEditText);
  }
  
  private void setValueForItem(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    Object localObject = getFieldFromArrFields(paramString3);
    String str = "ows_" + ((SPField)localObject).name;
    int i;
    label121:
    String[] arrayOfString;
    if ((this.dataListItem.userData.containsKey(str)) && (this.dataListItem.userData.get(str) != null))
    {
      paramString2 = ((String)this.dataListItem.userData.get(str)).toString();
      paramString3 = "";
      if ((localObject == null) || (!((SPField)localObject).type.equals("LookupMulti")) || (paramString1 == null)) {
        break label230;
      }
      localObject = paramString1.split(", ");
      i = 0;
      paramString1 = paramString3;
      if (i >= localObject.length) {
        break label296;
      }
      arrayOfString = localObject[i].split("# ");
      if (arrayOfString.length != 2) {
        break label225;
      }
      paramString3 = new StringBuilder().append(paramString3);
      if (i < 1) {
        break label218;
      }
      paramString1 = ";#";
    }
    label173:
    label218:
    label225:
    for (paramString3 = paramString1 + arrayOfString[0] + ";#" + arrayOfString[1];; paramString3 = paramString2)
    {
      i += 1;
      break label121;
      paramString2 = "";
      break;
      paramString1 = "";
      break label173;
    }
    label230:
    if ((localObject != null) && (((SPField)localObject).type.equals("Lookup")) && (paramString1 != null))
    {
      paramString1 = paramString1.split("# ");
      if (paramString1.length == 2) {
        paramString1 = paramString1[0] + ";#" + paramString1[1];
      }
    }
    label296:
    while (paramBoolean)
    {
      this.dataUser.put(str, paramString1);
      return;
      paramString1 = paramString2;
      continue;
      paramString3 = "";
      i = paramString2.indexOf(";#");
      if (i != -1) {
        paramString3 = paramString2.substring(i, ";#".length() + i);
      }
      localObject = new StringBuilder();
      paramString2 = paramString3;
      if (StringUtil.isEmpty(paramString3)) {
        paramString2 = "";
      }
      paramString3 = ((StringBuilder)localObject).append(paramString2);
      paramString2 = paramString1;
      if (StringUtil.isEmpty(paramString1)) {
        paramString2 = "";
      }
      paramString1 = paramString2;
    }
    this.dataListItem.userData.put(str, paramString1);
    changeClassObjects(str, paramString1);
  }
  
  private boolean showList(Field paramField, boolean paramBoolean)
  {
    Object localObject;
    if (paramBoolean)
    {
      Map localMap1 = paramField.getMultiListItems();
      Map localMap2 = paramField.multiListItems_id;
      List localList = null;
      ArrayList localArrayList = new ArrayList();
      paramField = localList;
      localObject = localArrayList;
      if (localMap1 != null)
      {
        paramField = localList;
        localObject = localArrayList;
        if (localMap1.size() > 0)
        {
          localList = (List)localMap1.get(localMap1.keySet().toArray()[0]);
          paramField = localList;
          localObject = localArrayList;
          if (localMap2 != null)
          {
            paramField = localList;
            localObject = localArrayList;
            if (localMap2.size() > 0)
            {
              localObject = (List)localMap2.get(localMap2.keySet().toArray()[0]);
              paramField = localList;
            }
          }
        }
      }
      if ((paramField != null) && (paramField.size() > 0))
      {
        this.checkedMultiList = new SparseBooleanArray();
        if (paramField != null)
        {
          this.listItems = ((CharSequence[])paramField.toArray(new CharSequence[paramField.size()]));
          this.listItemsID = ((CharSequence[])((List)localObject).toArray(new CharSequence[((List)localObject).size()]));
          int i = 0;
          while (i < paramField.size())
          {
            this.checkedMultiList.put(i, false);
            i += 1;
          }
        }
        this.listItems = null;
        this.listItemsID = null;
        getActivity().runOnUiThread(new Runnable()
        {
          public void run()
          {
            AlertDialog.Builder localBuilder = new AlertDialog.Builder(SPItemEditorView.this.getActivity());
            localBuilder.setTitle(SPItemEditorView.this.mResources.getString(2131362360));
            localBuilder.setMultiChoiceItems(SPItemEditorView.this.listItems, null, new DialogInterface.OnMultiChoiceClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int, boolean paramAnonymous2Boolean)
              {
                SPItemEditorView.this.checkedMultiList.put(paramAnonymous2Int, paramAnonymous2Boolean);
              }
            });
            localBuilder.setPositiveButton(SPItemEditorView.this.mResources.getString(2131361910), new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                Object localObject1 = "";
                paramAnonymous2DialogInterface = "";
                paramAnonymous2Int = 0;
                if (paramAnonymous2Int < SPItemEditorView.this.checkedMultiList.size())
                {
                  localObject2 = localObject1;
                  Object localObject3 = paramAnonymous2DialogInterface;
                  if (SPItemEditorView.this.checkedMultiList.get(paramAnonymous2Int))
                  {
                    localObject2 = new StringBuilder().append((String)localObject1);
                    if (((String)localObject1).length() != 0) {
                      break label200;
                    }
                    localObject1 = "";
                    label71:
                    localObject1 = (String)localObject1 + SPItemEditorView.this.listItems[paramAnonymous2Int];
                    localObject2 = localObject1;
                    localObject3 = paramAnonymous2DialogInterface;
                    if (SPItemEditorView.this.listItemsID != null)
                    {
                      localObject2 = localObject1;
                      localObject3 = paramAnonymous2DialogInterface;
                      if (SPItemEditorView.this.listItemsID.length > 0)
                      {
                        localObject2 = new StringBuilder().append(paramAnonymous2DialogInterface);
                        if (paramAnonymous2DialogInterface.length() != 0) {
                          break label206;
                        }
                      }
                    }
                  }
                  label200:
                  label206:
                  for (paramAnonymous2DialogInterface = "";; paramAnonymous2DialogInterface = ", ")
                  {
                    localObject3 = paramAnonymous2DialogInterface + SPItemEditorView.this.listItemsID[paramAnonymous2Int];
                    localObject2 = localObject1;
                    paramAnonymous2Int += 1;
                    localObject1 = localObject2;
                    paramAnonymous2DialogInterface = (DialogInterface)localObject3;
                    break;
                    localObject1 = ",";
                    break label71;
                  }
                }
                Object localObject2 = paramAnonymous2DialogInterface;
                if (StringUtil.isEmpty(paramAnonymous2DialogInterface)) {
                  localObject2 = localObject1;
                }
                SPItemEditorView.this.targetPV.ev.setText((CharSequence)localObject1);
                paramAnonymous2DialogInterface = SPItemEditorView.this.targetPV.field.referenceFieldId;
                SPItemEditorView.this.targetPV.selectedID = ((String)localObject2);
              }
            });
            localBuilder.create().show();
          }
        });
        return true;
      }
    }
    else
    {
      localObject = paramField.getListItems();
      if (paramField.listItems_id != null) {}
      for (paramField = paramField.listItems_id; (localObject != null) && (((List)localObject).size() > 0); paramField = new ArrayList())
      {
        this.listItems = ((CharSequence[])((List)localObject).toArray(new CharSequence[((List)localObject).size()]));
        this.listItemsID = ((CharSequence[])paramField.toArray(new CharSequence[paramField.size()]));
        getActivity().runOnUiThread(new Runnable()
        {
          public void run()
          {
            AlertDialog.Builder localBuilder = new AlertDialog.Builder(SPItemEditorView.this.getActivity());
            localBuilder.setTitle(SPItemEditorView.this.mResources.getString(2131362361));
            localBuilder.setItems(SPItemEditorView.this.listItems, new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                SPItemEditorView.this.targetPV.ev.setText(SPItemEditorView.this.listItems[paramAnonymous2Int]);
                if ((SPItemEditorView.this.listItemsID != null) && (SPItemEditorView.this.listItemsID.length > 0))
                {
                  SPItemEditorView.this.targetPV.selectedID = ((String)SPItemEditorView.this.listItemsID[paramAnonymous2Int]);
                  return;
                }
                SPItemEditorView.this.targetPV.selectedID = SPItemEditorView.this.listItems[paramAnonymous2Int].toString();
              }
            });
            if (SPItemEditorView.this != null) {
              localBuilder.create().show();
            }
          }
        });
        return true;
      }
    }
    return false;
  }
  
  private void showProgressDialog()
  {
    try
    {
      showProgressDialog("Submitting...");
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void showProgressDialog(String paramString)
  {
    try
    {
      this.progressDialogCount += 1;
      Log.v("SPItemEditorView", "showProgressDialog: " + this.progressDialogCount);
      if (this.progressDialogCount == 1)
      {
        this.progressDialog = new ProgressDialog(getActivity());
        this.progressDialog.setProgressStyle(0);
        this.progressDialog.setMessage(paramString);
        this.progressDialog.setCancelable(false);
        this.progressDialog.show();
      }
      return;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  private void startGettingLocation(final EditText paramEditText)
  {
    this.mLocationManager = new SimpleLocationManager(getActivity(), new SimpleLocationManager.BestLocationEstimateListenerAdapter(false)
    {
      public void onBestLocationEstimateChanged(Location paramAnonymousLocation)
      {
        super.onBestLocationEstimateChanged(paramAnonymousLocation);
        Log.d("SPItemEditorView", "got location: " + paramAnonymousLocation);
        SPItemEditorView.access$502(SPItemEditorView.this, paramAnonymousLocation);
        SPItemEditorView.this.updateUiForLocation(paramAnonymousLocation, paramEditText);
      }
    });
    this.mLocationManager.setMinTime(2000L);
  }
  
  private void submitFeedback()
  {
    this.imagesForUpload.clear();
    int i = 0;
    Object localObject1;
    while (i < this.ll.getChildCount())
    {
      if (this.ll.getChildAt(i).getClass().equals(PickerView.class))
      {
        localObject1 = (PickerView)this.ll.getChildAt(i);
        if (!((PickerView)localObject1).requirementSatisfied())
        {
          DialogUtil.showAlert(getActivity(), this.mResources.getString(2131361915), ((PickerView)localObject1).getRequirementMessage());
          return;
        }
      }
      i += 1;
    }
    i = 0;
    PickerView localPickerView;
    try
    {
      if (i >= this.ll.getChildCount()) {
        break label1010;
      }
      if (!this.ll.getChildAt(i).getClass().equals(PickerView.class)) {
        break label1152;
      }
      localPickerView = (PickerView)this.ll.getChildAt(i);
      if ((localPickerView.type == 5) || (localPickerView.type == 11) || (localPickerView.type == 6) || (localPickerView.type == 10))
      {
        localObject1 = localPickerView.field.fieldLabel;
        setValueForItem(localPickerView.ev.getText().toString(), (String)localObject1, localPickerView.field.fieldId, false);
      }
      else if (localPickerView.type == 14)
      {
        localObject1 = localPickerView.field.fieldLabel;
        setValueForItem(localPickerView.richEditor.getText().toString(), (String)localObject1, localPickerView.field.fieldId, false);
      }
    }
    catch (Exception localException)
    {
      Log.e("SPItemEditorView", "submitItemEditorView: " + localException, localException);
      DialogUtil.showAlert(getActivity(), 2131361915, localException.getMessage());
      return;
    }
    Object localObject4;
    Object localObject3;
    Object localObject2;
    if ((localPickerView.type == 0) || (localPickerView.type == 1) || (localPickerView.type == 12))
    {
      localObject4 = localPickerView.field.fieldLabel;
      localObject3 = localPickerView.ev.getText().toString();
      if (localPickerView.type == 0) {
        localObject2 = (String)localObject3 + " 00:00:00";
      }
      for (;;)
      {
        setValueForItem((String)localObject2, (String)localObject4, localPickerView.field.fieldId, false);
        break;
        if (localPickerView.type != 1)
        {
          localObject2 = localObject3;
          if (localPickerView.type != 12) {}
        }
        else if ((((String)localObject3).contains("PM")) || (((String)localObject3).contains("AM")))
        {
          localObject2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US).format(new SimpleDateFormat("yyyy-MM-dd hh:mm a", Locale.US).parse((String)localObject3));
        }
        else
        {
          localObject2 = localObject3;
          if (!StringUtil.isEmpty((String)localObject3))
          {
            localObject2 = localObject3;
            if (!((String)localObject3).contains("PM"))
            {
              localObject2 = localObject3;
              if (!((String)localObject3).contains("AM")) {
                localObject2 = (String)localObject3 + ":00";
              }
            }
          }
        }
      }
    }
    if ((localPickerView.type == 7) || (localPickerView.type == 8))
    {
      String str = localPickerView.field.fieldLabel;
      localObject3 = localPickerView.selectedID;
      localObject4 = localPickerView.ev.getText().toString();
      localObject2 = localObject3;
      if (StringUtil.isEmpty((String)localObject3)) {
        localObject2 = localObject4;
      }
      setValueForItem((String)localObject2, str, localPickerView.field.fieldId, false);
    }
    else if (localPickerView.type == 13)
    {
      localObject3 = localPickerView.field.fieldLabel;
      if (!localPickerView.getSwithPosition()) {
        break label1159;
      }
      localObject2 = "1";
      label643:
      setValueForItem((String)localObject2, (String)localObject3, localPickerView.field.fieldId, false);
    }
    else if (localPickerView.type == 2)
    {
      localObject2 = localPickerView.field.fieldLabel;
      if ((localPickerView.latitude == 0.0D) && (localPickerView.longitude == 0.0D))
      {
        localPickerView.latitude = this.mCurrentLocation.getLatitude();
        localPickerView.longitude = this.mCurrentLocation.getLongitude();
      }
      setValueForItem(localPickerView.latitude + ", " + localPickerView.longitude, (String)localObject2, localPickerView.field.fieldId, false);
    }
    else if ((localPickerView.type == 3) || (localPickerView.type == 4) || (localPickerView.type == 9))
    {
      localObject2 = localPickerView.field.fieldLabel;
      if (localPickerView.imageUri != null)
      {
        setValueForItem(localPickerView.imageUri.toString(), (String)localObject2, localPickerView.field.fieldId, false);
        Log.v("SPItemEditorView", "tempPV.imageUri = " + localPickerView.imageUri);
        localObject3 = SPServer.getInstance().credentials.uploadFolderURL + UUID.randomUUID().toString() + ".jpg";
        localObject2 = localObject3;
        if (((String)localObject3).indexOf(",") != -1) {
          localObject2 = ((String)localObject3).substring(0, ((String)localObject3).indexOf(","));
        }
        if ((localPickerView.imageUri != null) && (!StringUtil.isEmpty(localPickerView.imageUri.toString()))) {
          this.imagesForUpload.put(localPickerView.field.fieldId, localPickerView.imageUri);
        }
        for (;;)
        {
          setValueForItem((String)localObject2, localPickerView.field.fieldLabel, localPickerView.field.fieldId, false);
          break;
          localObject2 = localPickerView.fTargetURL;
        }
        label1010:
        localObject3 = this.dataListItem.arrHiddenFields;
        localObject2 = localObject3;
        if (SPServer.getInstance().credentials.getHideFields() != null) {
          localObject2 = concat((String[])localObject3, SPServer.getInstance().credentials.getHideFields());
        }
        localObject4 = SPServer.getInstance().credentials.getValuesForFields();
        localObject3 = localObject4;
        if (localObject4 != null) {
          break label1166;
        }
        localObject3 = new Hashtable();
        break label1166;
      }
    }
    for (;;)
    {
      if ((i < localObject2.length) && (((Hashtable)localObject3).size() > 0))
      {
        if (((Hashtable)localObject3).contains(localObject2[i])) {
          setValueForItem((String)((Hashtable)localObject3).get(localObject2[i]), "ows_" + localObject2[i], "", false);
        }
      }
      else
      {
        showProgressDialog();
        saveDataOnServer();
        return;
        label1152:
        i += 1;
        break;
        label1159:
        localObject2 = "0";
        break label643;
        label1166:
        i = 0;
        continue;
      }
      i += 1;
    }
  }
  
  private void updateUiForLocation(Location paramLocation, final EditText paramEditText)
  {
    if (this.mGeocoder == null) {
      this.mGeocoder = new AsyncGeocoder(getActivity(), getActivity(), new AsyncTaskListener()
      {
        public void asyncTaskFinished(Object paramAnonymousObject)
        {
          Log.d("SPItemEditorView", "got address: " + paramAnonymousObject);
          if (paramAnonymousObject != null)
          {
            SPItemEditorView.access$2302(SPItemEditorView.this, SPItemEditorView.this.mCurrentLocation.getLatitude());
            SPItemEditorView.access$2402(SPItemEditorView.this, SPItemEditorView.this.mCurrentLocation.getLongitude());
            paramEditText.setText((String)paramAnonymousObject);
          }
        }
      });
    }
    this.mGeocoder.getAddress(paramLocation);
  }
  
  void changeClassObjects(String paramString1, String paramString2)
  {
    if (paramString1.equals("ows_Title")) {
      this.dataListItem.title = paramString2;
    }
    SPListItem localSPListItem;
    if (paramString1.equals("ows_ID"))
    {
      localSPListItem = this.dataListItem;
      if (!StringUtil.isEmpty(paramString2))
      {
        str = paramString2;
        localSPListItem.ID = Integer.valueOf(Integer.parseInt(str));
      }
    }
    else
    {
      if (paramString1.equals("ows__Level"))
      {
        localSPListItem = this.dataListItem;
        if (StringUtil.isEmpty(paramString2)) {
          break label426;
        }
        str = paramString2;
        label80:
        localSPListItem.level = Integer.valueOf(Integer.parseInt(str));
      }
      if (paramString1.equals("ows_NameOrTitle")) {
        this.dataListItem.name = paramString2;
      }
      if (paramString1.equals("ows_LinkFilename")) {
        this.dataListItem.name = paramString2;
      }
      if (paramString1.equals("ows_LinkTitle")) {
        this.dataListItem.title = paramString2;
      }
      if (paramString1.equals("ows_FSObjType")) {
        this.dataListItem.type = paramString2;
      }
      if (paramString1.equals("ows_DocIcon")) {
        this.dataListItem.docIcon = paramString2;
      }
      if (paramString1.equals("ows_UniqueId")) {
        this.dataListItem.uniqueId = paramString2;
      }
      if (paramString1.equals("ows_FileRef")) {
        this.dataListItem.fileRef = paramString2;
      }
      if (paramString1.equals("ows_Author")) {
        this.dataListItem.author = paramString2;
      }
      if (paramString1.equals("ows_Created")) {
        this.dataListItem.setCreateDate(paramString2);
      }
      if (paramString1.equals("ows_Editor")) {
        this.dataListItem.editor = paramString2;
      }
      if (paramString1.equals("ows_Modified")) {
        this.dataListItem.setModifiedDate(paramString2);
      }
      if (paramString1.equals("ows_FileSizeDisplay"))
      {
        localSPListItem = this.dataListItem;
        if (StringUtil.isEmpty(paramString2)) {
          break label433;
        }
        str = paramString2;
        label315:
        localSPListItem.fileSize = Integer.valueOf(Integer.parseInt(str));
      }
      if (paramString1.equals("ows_FileLeafRef")) {
        this.dataListItem.fileLeafRef = paramString2;
      }
      if (paramString1.equals("ows__UIVersionString")) {
        this.dataListItem.version = paramString2;
      }
      if (paramString1.equals("ows_Attachments"))
      {
        localSPListItem = this.dataListItem;
        if (StringUtil.isEmpty(paramString2)) {
          break label440;
        }
      }
    }
    label426:
    label433:
    label440:
    for (String str = paramString2;; str = "0")
    {
      localSPListItem.attachments = Integer.valueOf(Integer.parseInt(str));
      if (paramString1.equals("ows_ContentType")) {
        this.dataListItem.contentType = paramString2;
      }
      return;
      str = "0";
      break;
      str = "0";
      break label80;
      str = "0";
      break label315;
    }
  }
  
  String[] concat(String[] paramArrayOfString1, String[] paramArrayOfString2)
  {
    int i = paramArrayOfString1.length;
    int j = paramArrayOfString2.length;
    String[] arrayOfString = new String[i + j];
    System.arraycopy(paramArrayOfString1, 0, arrayOfString, 0, i);
    System.arraycopy(paramArrayOfString2, 0, arrayOfString, i, j);
    return arrayOfString;
  }
  
  public View createView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903212, paramViewGroup, false);
    this.mLoadingView = this.mView.findViewById(2131099836);
    init();
    return this.mView;
  }
  
  public ArrayList<Object> getArrFields()
  {
    return this.arrFields;
  }
  
  public SPField getFieldFromArrFields(String paramString)
  {
    Object localObject = null;
    Iterator localIterator = this.arrFields.iterator();
    while (localIterator.hasNext())
    {
      SPField localSPField = (SPField)localIterator.next();
      localObject = localSPField;
      if (localSPField.ID.equals(paramString)) {
        return localSPField;
      }
    }
    return localObject;
  }
  
  public void init()
  {
    Object localObject1 = (ImageView)this.mView.findViewById(2131099864);
    Object localObject4 = App.getDrawableResource(this.imgFileName);
    if (localObject4 != null) {
      ((ImageView)localObject1).setImageDrawable((Drawable)localObject4);
    }
    this.ll = ((LinearLayout)this.mView.findViewById(2131099863));
    StyleUtil.setBackground(this.ll, this.style);
    checkRememberedData();
    Iterator localIterator1 = this.arrFields.iterator();
    while (localIterator1.hasNext())
    {
      Object localObject7 = (SPField)localIterator1.next();
      label213:
      label283:
      final Field localField;
      if ((this.dataListItem.userData.containsKey("ows_" + ((SPField)localObject7).name)) && (this.dataListItem.userData.get("ows_" + ((SPField)localObject7).name) != null))
      {
        localObject6 = ((String)this.dataListItem.userData.get("ows_" + ((SPField)localObject7).name)).toString();
        if (!this.dataUser.containsKey("ows_" + ((SPField)localObject7).name)) {
          break label599;
        }
        localObject4 = (String)this.dataUser.get("ows_" + ((SPField)localObject7).name);
        localObject1 = localObject6;
        if (SPServer.getInstance().credentials.enableRememberDataInEditor)
        {
          localObject1 = localObject6;
          if (!StringUtil.isEmpty((String)localObject4))
          {
            localObject1 = localObject6;
            if (this.isModeCreateNewItem) {
              localObject1 = localObject4;
            }
          }
        }
        localField = new Field(((SPField)localObject7).ID);
        localField.fdefaultvalue_id = ((String)localObject1);
        localField.fieldLabel = ((SPField)localObject7).displayName;
        if (!((SPField)localObject7).required) {
          break label607;
        }
        localObject6 = "yes";
        label365:
        localField.fieldRequired = ((String)localObject6);
        localField.fieldType = getTypeOfFieldWithValue((SPField)localObject7, (String)localObject1);
        if (!((SPField)localObject7).type.equals("Lookup")) {
          break label615;
        }
        localObject1 = SPSOAPParser.removePrefix((String)localObject1);
        setListValuesForLookupField((SPField)localObject7, localField);
        label412:
        if ((!SPServer.getInstance().credentials.enableRememberDataInEditor) || (StringUtil.isEmpty((String)localObject4)) || (!this.isModeCreateNewItem)) {
          break label1023;
        }
        localField.fdefaultvalue = ((String)localObject1);
        label445:
        if (!localField.fieldType.equalsIgnoreCase("date")) {
          break label1207;
        }
        localObject1 = new PickerView(getActivity(), localField, 0);
        ((PickerView)localObject1).field = localField;
        ((PickerView)localObject1).ev.setText(localField.fdefaultvalue);
      }
      try
      {
        localObject4 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
        localObject4 = new SimpleDateFormat("yyyy-MM-dd", Locale.US).format(((SimpleDateFormat)localObject4).parse(localField.fdefaultvalue));
        ((PickerView)localObject1).ev.setText((CharSequence)localObject4);
        StyleUtil.setTextColor(((PickerView)localObject1).tv, this.style);
        ((PickerView)localObject1).fTargetParam = localField.fTargetParam;
        ((PickerView)localObject1).btn.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            paramAnonymousView = new DatePickerDialog(SPItemEditorView.this.getActivity(), new DatePickerDialog.OnDateSetListener()
            {
              public void onDateSet(android.widget.DatePicker paramAnonymous2DatePicker, int paramAnonymous2Int1, int paramAnonymous2Int2, int paramAnonymous2Int3)
              {
                paramAnonymous2DatePicker = Calendar.getInstance();
                paramAnonymous2DatePicker.set(1, paramAnonymous2Int1);
                paramAnonymous2DatePicker.set(2, paramAnonymous2Int2);
                paramAnonymous2DatePicker.set(5, paramAnonymous2Int3);
                SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
                SPItemEditorView.1.this.val$datePV.ev.setText(localSimpleDateFormat.format(paramAnonymous2DatePicker.getTime()));
              }
            }, this.val$datePV.mYear, this.val$datePV.mMonth, this.val$datePV.mDay);
            paramAnonymousView.setOwnerActivity(SPItemEditorView.this.getActivity());
            paramAnonymousView.show();
          }
        });
        this.ll.addView((View)localObject1);
        continue;
        localObject6 = "";
        break label213;
        label599:
        localObject4 = "";
        break label283;
        label607:
        localObject6 = "no";
        break label365;
        label615:
        if (((SPField)localObject7).type.equals("LookupMulti"))
        {
          localObject6 = "";
          localObject8 = ((String)localObject1).split(";#");
          int i = 0;
          localObject1 = localObject6;
          if (i < localObject8.length)
          {
            localObject6 = localObject1;
            if ((i + 1) % 2 == 0)
            {
              localObject6 = new StringBuilder().append((String)localObject1);
              if (i <= 1) {
                break label716;
              }
            }
            label716:
            for (localObject1 = ", ";; localObject1 = "")
            {
              localObject6 = (String)localObject1 + localObject8[i];
              i += 1;
              localObject1 = localObject6;
              break;
            }
          }
          setListValuesForLookupField((SPField)localObject7, localField);
          break label412;
        }
        if (((SPField)localObject7).type.equals("MultiChoice"))
        {
          localField.multiListItems = new HashMap();
          localObject8 = new ArrayList();
          localIterator2 = ((SPField)localObject7).choices.iterator();
          if (localIterator2.hasNext())
          {
            localObject6 = (String)localIterator2.next();
            if (localObject6 != null) {}
            for (localObject6 = localObject6.toString();; localObject6 = null)
            {
              ((ArrayList)localObject8).add(localObject6);
              break;
            }
          }
          localField.multiListItems.put("0", localObject8);
          break label412;
        }
        if ((localField.fieldType.equalsIgnoreCase("camimg")) || (((SPField)localObject7).type.equalsIgnoreCase("url")))
        {
          localObject6 = localObject1;
          if (((String)localObject1).indexOf(",") != -1) {
            localObject6 = ((String)localObject1).substring(0, ((String)localObject1).indexOf(","));
          }
          localField.fTargetURL = ((String)localObject6);
          localObject1 = localObject6;
          if (!((SPField)localObject7).type.equalsIgnoreCase("url")) {
            break label412;
          }
          localField.fdefaultvalue = ((String)localObject6);
          localObject1 = localObject6;
          break label412;
        }
        Object localObject8 = new ArrayList();
        Iterator localIterator2 = ((SPField)localObject7).choices.iterator();
        if (localIterator2.hasNext())
        {
          localObject6 = (String)localIterator2.next();
          if (localObject6 != null) {}
          for (localObject6 = localObject6.toString();; localObject6 = null)
          {
            ((ArrayList)localObject8).add(localObject6);
            break;
          }
        }
        localField.listItems = ((List)localObject8);
        break label412;
        label1023:
        if ((this.isModeCreateNewItem) && (!localField.fieldType.equals("list")))
        {
          localField.fdefaultvalue = ((SPField)localObject7).choiceDefault;
          break label445;
        }
        if ((StringUtil.isEmpty((String)localObject1)) && (localField.fieldType.equals("list")) && (!StringUtil.isEmpty(((SPField)localObject7).choiceDefault)))
        {
          localField.fdefaultvalue = SPSOAPParser.removePrefix(((SPField)localObject7).choiceDefault);
          if (!StringUtil.isEmpty((String)this.dataListItem.userData.get("ows_" + ((SPField)localObject7).name))) {
            break label445;
          }
          this.dataListItem.userData.put("ows_" + ((SPField)localObject7).name, ((SPField)localObject7).choiceDefault);
          break label445;
        }
        localField.fdefaultvalue = ((String)localObject1);
      }
      catch (ParseException localParseException3)
      {
        for (;;)
        {
          localParseException3.printStackTrace();
        }
      }
      label1207:
      if (localField.fieldType.equalsIgnoreCase("time"))
      {
        localObject5 = new PickerView(getActivity(), localField, 1);
        ((PickerView)localObject5).field = localField;
        ((PickerView)localObject5).ev.setText(localField.fdefaultvalue);
        for (;;)
        {
          try
          {
            localObject6 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
            if (!DateFormat.is24HourFormat(getActivity())) {
              continue;
            }
            localObject1 = "HH:mm";
            localObject1 = new SimpleDateFormat((String)localObject1, Locale.US).format(((SimpleDateFormat)localObject6).parse(localField.fdefaultvalue));
            ((PickerView)localObject5).ev.setText((CharSequence)localObject1);
          }
          catch (ParseException localParseException1)
          {
            localParseException1.printStackTrace();
            continue;
          }
          StyleUtil.setTextColor(((PickerView)localObject5).tv, this.style);
          ((PickerView)localObject5).fTargetParam = localField.fTargetParam;
          ((PickerView)localObject5).btn.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              paramAnonymousView = new TimePickerDialog(SPItemEditorView.this.getActivity(), new TimePickerDialog.OnTimeSetListener()
              {
                public void onTimeSet(android.widget.TimePicker paramAnonymous2TimePicker, int paramAnonymous2Int1, int paramAnonymous2Int2)
                {
                  Calendar localCalendar = Calendar.getInstance();
                  localCalendar.set(11, paramAnonymous2Int1);
                  paramAnonymous2Int1 = paramAnonymous2Int2 % 5;
                  if (paramAnonymous2Int1 < 3)
                  {
                    paramAnonymous2Int1 = -paramAnonymous2Int1;
                    localCalendar.add(12, paramAnonymous2Int1);
                    if (!DateFormat.is24HourFormat(SPItemEditorView.this.getActivity())) {
                      break label94;
                    }
                  }
                  label94:
                  for (paramAnonymous2TimePicker = " HH:mm";; paramAnonymous2TimePicker = " hh:mm a")
                  {
                    paramAnonymous2TimePicker = new SimpleDateFormat(paramAnonymous2TimePicker, Locale.US);
                    SPItemEditorView.2.this.val$timePV.ev.setText(paramAnonymous2TimePicker.format(localCalendar.getTime()));
                    return;
                    paramAnonymous2Int1 = 5 - paramAnonymous2Int1;
                    break;
                  }
                }
              }, this.val$timePV.mHour, this.val$timePV.mMinute, DateFormat.is24HourFormat(SPItemEditorView.this.getActivity()));
              paramAnonymousView.setOwnerActivity(SPItemEditorView.this.getActivity());
              paramAnonymousView.show();
            }
          });
          this.ll.addView((View)localObject5);
          break;
          localObject1 = "hh:mm a";
        }
      }
      if (localField.fieldType.equalsIgnoreCase("datetime"))
      {
        localObject5 = new PickerView(getActivity(), localField, 12);
        ((PickerView)localObject5).field = localField;
        ((PickerView)localObject5).ev.setText(localField.fdefaultvalue);
        for (;;)
        {
          try
          {
            localObject6 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
            localObject7 = new StringBuilder().append("yyyy-MM-dd ");
            if (!DateFormat.is24HourFormat(getActivity())) {
              continue;
            }
            localObject2 = "HH:mm";
            localObject2 = new SimpleDateFormat((String)localObject2, Locale.US);
            localObject6 = ((SimpleDateFormat)localObject6).parse(localField.fdefaultvalue);
            ((PickerView)localObject5).ev.setText(((SimpleDateFormat)localObject2).format((Date)localObject6));
          }
          catch (ParseException localParseException2)
          {
            Object localObject2;
            localParseException2.printStackTrace();
            continue;
          }
          StyleUtil.setTextColor(((PickerView)localObject5).tv, this.style);
          ((PickerView)localObject5).fTargetParam = localField.fTargetParam;
          ((PickerView)localObject5).btn.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(final View paramAnonymousView)
            {
              paramAnonymousView = new Dialog(SPItemEditorView.this.getActivity());
              paramAnonymousView.setContentView(2130903113);
              paramAnonymousView.setTitle(SPItemEditorView.this.mResources.getString(2131362359));
              final com.qbiki.feedback.DatePicker localDatePicker = (com.qbiki.feedback.DatePicker)paramAnonymousView.findViewById(2131099881);
              try
              {
                localDatePicker.setStartYear(1900);
                localDatePicker.setEndYear(2100);
                final com.qbiki.feedback.TimePicker localTimePicker = (com.qbiki.feedback.TimePicker)paramAnonymousView.findViewById(2131099882);
                if (DateFormat.is24HourFormat(SPItemEditorView.this.getActivity()))
                {
                  i = 24;
                  localTimePicker.setCurrentTimeFormate(i);
                  localTimePicker.setAMPMVisible(true);
                  ((Button)paramAnonymousView.findViewById(2131099883)).setOnClickListener(new View.OnClickListener()
                  {
                    public void onClick(View paramAnonymous2View)
                    {
                      paramAnonymousView.dismiss();
                    }
                  });
                  ((Button)paramAnonymousView.findViewById(2131099884)).setOnClickListener(new View.OnClickListener()
                  {
                    public void onClick(View paramAnonymous2View)
                    {
                      Calendar localCalendar1 = localDatePicker.getCal();
                      Calendar localCalendar2 = localTimePicker.getCal();
                      int i = localCalendar2.get(12) % 5;
                      SimpleDateFormat localSimpleDateFormat;
                      if (i < 3)
                      {
                        i = -i;
                        localCalendar2.add(12, i);
                        localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
                        if (!DateFormat.is24HourFormat(SPItemEditorView.this.getActivity())) {
                          break label152;
                        }
                      }
                      label152:
                      for (paramAnonymous2View = " HH:mm";; paramAnonymous2View = " hh:mm a")
                      {
                        paramAnonymous2View = new SimpleDateFormat(paramAnonymous2View, Locale.US);
                        paramAnonymous2View = localSimpleDateFormat.format(localCalendar1.getTime()) + paramAnonymous2View.format(localCalendar2.getTime());
                        SPItemEditorView.3.this.val$datetimePV.ev.setText(paramAnonymous2View);
                        paramAnonymousView.dismiss();
                        return;
                        i = 5 - i;
                        break;
                      }
                    }
                  });
                  paramAnonymousView.show();
                  return;
                }
              }
              catch (Exception localException)
              {
                for (;;)
                {
                  Log.e("", localException.toString());
                  continue;
                  int i = 12;
                }
              }
            }
          });
          this.ll.addView((View)localObject5);
          break;
          localObject2 = "hh:mm a";
        }
      }
      if (localField.fieldType.equalsIgnoreCase("switch"))
      {
        localObject5 = new PickerView(getActivity(), localField, 13);
        if (localParseException2.equals("1")) {}
        for (boolean bool = true;; bool = false)
        {
          ((PickerView)localObject5).setSwithPosition(bool);
          StyleUtil.setTextColor(((PickerView)localObject5).tv, this.style);
          ((PickerView)localObject5).fTargetParam = localField.fTargetParam;
          this.ll.addView((View)localObject5);
          break;
        }
      }
      if (localField.fieldType.equalsIgnoreCase("location"))
      {
        localObject3 = new PickerView(getActivity(), localField, 2);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        if (!StringUtil.isEmpty(localField.fdefaultvalue))
        {
          this.mCurrentLocation.setLatitude(this.defaultLatitude);
          this.mCurrentLocation.setLongitude(this.defaultLongitude);
          setLocationFromInput(((PickerView)localObject3).ev, this.mCurrentLocation);
        }
        for (;;)
        {
          ((PickerView)localObject3).btn.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              SPItemEditorView.access$202(SPItemEditorView.this, this.val$locationPV);
              if ((SPItemEditorView.this.mLocationManager != null) && (SPItemEditorView.this.shouldUseCurrentLocation)) {
                SPItemEditorView.this.mLocationManager.stopUpdatingLocation();
              }
              SPItemEditorView.access$402(SPItemEditorView.this, false);
              paramAnonymousView = new Intent(SPItemEditorView.this.getActivity(), LocationDetectorActivity.class);
              paramAnonymousView.setAction("com.qbiki.modules.ACTION_PICK_LOCATION");
              if ((SPItemEditorView.this.mCurrentLocation.getLatitude() != 0.0D) && (SPItemEditorView.this.mCurrentLocation.getLongitude() != 0.0D))
              {
                paramAnonymousView.putExtra("latitude", SPItemEditorView.this.mCurrentLocation.getLatitude());
                paramAnonymousView.putExtra("longitude", SPItemEditorView.this.mCurrentLocation.getLongitude());
              }
              SPItemEditorView.this.getActivity().startActivityForResult(paramAnonymousView, 1300);
            }
          });
          this.ll.addView((View)localObject3);
          break;
          this.shouldUseCurrentLocation = true;
          startGettingLocation(((PickerView)localObject3).ev);
        }
      }
      if ((localField.fieldType.equalsIgnoreCase("text")) || (localField.fieldType.equalsIgnoreCase("int")) || (localField.fieldType.equalsIgnoreCase("float")))
      {
        if ((localField.fieldType.equalsIgnoreCase("int")) && (localField.fdefaultvalue.indexOf(".") != -1)) {}
        for (localField.fdefaultvalue = localField.fdefaultvalue.substring(0, localField.fdefaultvalue.indexOf("."));; localField.fdefaultvalue = localField.fdefaultvalue.substring(0, localField.fdefaultvalue.indexOf(".") + 3)) {
          do
          {
            localObject3 = new PickerView(getActivity(), localField, 5);
            ((PickerView)localObject3).field = localField;
            ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
            StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
            ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
            this.ll.addView((View)localObject3);
            break;
          } while ((!localField.fieldType.equalsIgnoreCase("float")) || (localField.fdefaultvalue.indexOf(".") == -1));
        }
      }
      if (localField.fieldType.equalsIgnoreCase("multilinetext"))
      {
        localObject3 = new PickerView(getActivity(), localField, 11);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("multilinerichtext"))
      {
        localObject3 = new PickerView(getActivity(), localField, 14);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).richEditor.setText(localField.fdefaultvalue);
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("label"))
      {
        localObject3 = new PickerView(getActivity(), localField, 10);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("email"))
      {
        localObject3 = new PickerView(getActivity(), localField, 6);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("camimg"))
      {
        localObject3 = new PickerView(getActivity(), localField, 3);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).fTargetURL = DynamicHTML.replaceMBFXContextinURL(localField.fTargetURL);
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).btn.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            paramAnonymousView = new AlertDialog.Builder(SPItemEditorView.this.getActivity()).create();
            paramAnonymousView.setTitle(2131362062);
            paramAnonymousView.setButton(SPItemEditorView.this.getActivity().getResources().getString(2131362063), new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                SPItemEditorView.access$202(SPItemEditorView.this, SPItemEditorView.5.this.val$cameraPV);
                SPItemEditorView.this.fragment.startActivityForResult(new Intent("android.intent.action.PICK", MediaStore.Images.Media.EXTERNAL_CONTENT_URI), 1301);
              }
            });
            paramAnonymousView.setButton3(SPItemEditorView.this.getActivity().getResources().getString(2131362064), new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                try
                {
                  SPItemEditorView.access$202(SPItemEditorView.this, SPItemEditorView.5.this.val$cameraPV);
                  paramAnonymous2DialogInterface = new Intent("android.media.action.IMAGE_CAPTURE");
                  paramAnonymous2DialogInterface.putExtra("output", Uri.fromFile(new File(Environment.getExternalStorageDirectory(), SPItemEditorView.5.this.val$cameraPV.field.fieldId + ".jpg")));
                  SPItemEditorView.this.fragment.startActivityForResult(paramAnonymous2DialogInterface, 1302);
                  return;
                }
                catch (ActivityNotFoundException paramAnonymous2DialogInterface)
                {
                  DialogUtil.showAlert(SPItemEditorView.this.getActivity(), 2131361916, 2131361936);
                }
              }
            });
            paramAnonymousView.setButton2(SPItemEditorView.this.getActivity().getResources().getString(2131361911), new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int) {}
            });
            paramAnonymousView.show();
          }
        });
        new DownloadTask((PickerView)localObject3).execute(new String[] { ((PickerView)localObject3).fTargetURL });
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("signature"))
      {
        localObject3 = new PickerView(getActivity(), localField, 9);
        ((PickerView)localObject3).field = localField;
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetURL = DynamicHTML.replaceMBFXContextinURL(localField.fTargetURL);
        ((PickerView)localObject3).btn.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            SPItemEditorView.access$202(SPItemEditorView.this, this.val$imagePV);
            paramAnonymousView = new Intent(SPItemEditorView.this.getActivity(), DrawSurfaceActivity.class);
            paramAnonymousView.putExtra("surfWidth", this.val$imagePV.imgView.getWidth());
            paramAnonymousView.putExtra("surfHeight", this.val$imagePV.imgView.getHeight());
            SPItemEditorView.this.getActivity().startActivityForResult(paramAnonymousView, 1303);
          }
        });
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("list"))
      {
        localObject3 = new PickerView(getActivity(), localField, 7);
        ((PickerView)localObject3).field = localField;
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
        ((PickerView)localObject3).selectedID = localField.fdefaultvalue_id.replace(";#", "# ");
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        ((PickerView)localObject3).btn.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            SPItemEditorView.access$202(SPItemEditorView.this, this.val$listPV);
            if (SPItemEditorView.this.showList(localField, false)) {
              return;
            }
            SPItemEditorView.this.mLoadingView.setVisibility(0);
            if (this.val$spfield.lookupListID.equals("Self")) {}
            for (paramAnonymousView = SPItemEditorView.this.dataList.idList;; paramAnonymousView = this.val$spfield.lookupListID)
            {
              paramAnonymousView = new SPList(paramAnonymousView);
              paramAnonymousView.fieldsOfList = new ArrayList();
              SPField localSPField = new SPField(this.val$spfield.lookupShowFieldOfList);
              paramAnonymousView.fieldsOfList.add(localSPField);
              SPServer.getInstance().getListItemsResponse(paramAnonymousView, new SPResponseListener()
              {
                public void onResponseError(String paramAnonymous2String)
                {
                  SPItemEditorView.this.mLoadingView.setVisibility(8);
                  DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.getActivity().getResources().getString(2131361915), paramAnonymous2String);
                }
                
                public void onResponseReceived(ArrayList<Object> paramAnonymous2ArrayList, String paramAnonymous2String)
                {
                  SPItemEditorView.this.mLoadingView.setVisibility(8);
                  int i = 0;
                  while (i < paramAnonymous2ArrayList.size())
                  {
                    SPItemEditorView.7.this.val$spfield.choicesForLookup.add((SPListItem)paramAnonymous2ArrayList.get(i));
                    i += 1;
                  }
                  SPItemEditorView.this.setListValuesForLookupField(SPItemEditorView.7.this.val$spfield, SPItemEditorView.7.this.val$f);
                  SPItemEditorView.this.showList(SPItemEditorView.7.this.val$f, false);
                }
                
                public void onResponseTimeout()
                {
                  SPItemEditorView.this.mLoadingView.setVisibility(8);
                  DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.getActivity().getResources().getString(2131361915), SPItemEditorView.this.mResources.getString(2131362355));
                }
              });
              return;
            }
          }
        });
        this.ll.addView((View)localObject3);
      }
      else if (localField.fieldType.equalsIgnoreCase("multilist"))
      {
        localObject3 = new PickerView(getActivity(), localField, 8);
        ((PickerView)localObject3).field = localField;
        ((PickerView)localObject3).ev.setText(localField.fdefaultvalue);
        ((PickerView)localObject3).selectedID = localField.fdefaultvalue_id.replace(";#", "# ");
        StyleUtil.setTextColor(((PickerView)localObject3).tv, this.style);
        ((PickerView)localObject3).fTargetParam = localField.fTargetParam;
        ((PickerView)localObject3).btn.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            SPItemEditorView.access$202(SPItemEditorView.this, this.val$listPV);
            if (SPItemEditorView.this.showList(localField, true)) {
              return;
            }
            SPItemEditorView.this.mLoadingView.setVisibility(0);
            if (StringUtil.isEqual(this.val$spfield.lookupListID, "Self")) {}
            for (paramAnonymousView = SPItemEditorView.this.dataList.idList;; paramAnonymousView = this.val$spfield.lookupListID)
            {
              paramAnonymousView = new SPList(paramAnonymousView);
              paramAnonymousView.fieldsOfList = new ArrayList();
              SPField localSPField = new SPField(this.val$spfield.lookupShowFieldOfList);
              paramAnonymousView.fieldsOfList.add(localSPField);
              SPServer.getInstance().getListItemsResponse(paramAnonymousView, new SPResponseListener()
              {
                public void onResponseError(String paramAnonymous2String)
                {
                  SPItemEditorView.this.mLoadingView.setVisibility(8);
                  DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.getActivity().getResources().getString(2131361915), paramAnonymous2String);
                }
                
                public void onResponseReceived(ArrayList<Object> paramAnonymous2ArrayList, String paramAnonymous2String)
                {
                  SPItemEditorView.this.mLoadingView.setVisibility(8);
                  int i = 0;
                  while (i < paramAnonymous2ArrayList.size())
                  {
                    SPItemEditorView.8.this.val$spfield.choicesForLookup.add((SPListItem)paramAnonymous2ArrayList.get(i));
                    i += 1;
                  }
                  SPItemEditorView.this.setListValuesForLookupField(SPItemEditorView.8.this.val$spfield, SPItemEditorView.8.this.val$f);
                  SPItemEditorView.this.showList(SPItemEditorView.8.this.val$f, true);
                }
                
                public void onResponseTimeout()
                {
                  SPItemEditorView.this.mLoadingView.setVisibility(8);
                  DialogUtil.showAlert(SPItemEditorView.this.getActivity(), SPItemEditorView.this.getActivity().getResources().getString(2131361915), "Time Out");
                }
              });
              return;
            }
          }
        });
        this.ll.addView((View)localObject3);
      }
    }
    Object localObject5 = (LinearLayout)getActivity().getLayoutInflater().inflate(2130903125, this.ll, false);
    Object localObject6 = (Button)((LinearLayout)localObject5).findViewById(2131099900);
    if (this.isModeCreateNewItem) {}
    for (Object localObject3 = this.mResources.getString(2131361923);; localObject3 = this.mResources.getString(2131361909))
    {
      ((Button)localObject6).setText((CharSequence)localObject3);
      ((Button)localObject6).setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          SPItemEditorView.this.submitFeedback();
        }
      });
      if ((this.arrFields != null) && (this.arrFields.size() > 0)) {
        this.ll.addView((View)localObject5);
      }
      if (!this.isModeCreateNewItem)
      {
        localObject3 = (LinearLayout)getActivity().getLayoutInflater().inflate(2130903119, this.ll, false);
        localObject5 = (Button)((LinearLayout)localObject3).findViewById(2131099896);
        ((Button)localObject5).setText(this.mResources.getString(2131361913));
        ((Button)localObject5).setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            SPItemEditorView.this.deleteItem();
          }
        });
        if ((this.arrFields != null) && (this.arrFields.size() > 0)) {
          this.ll.addView((View)localObject3);
        }
      }
      return;
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (paramInt1 == 1301) {
      if (paramInt2 == -1)
      {
        paramIntent = paramIntent.getData();
        localObject = decodeBitmapFromUri(paramIntent, 1801);
        this.targetPV.imgView.setImageBitmap((Bitmap)localObject);
        this.targetPV.imageUri = paramIntent;
      }
    }
    do
    {
      do
      {
        do
        {
          do
          {
            return;
            if (paramInt1 != 1302) {
              break;
            }
          } while (paramInt2 != -1);
          paramIntent = Uri.fromFile(new File(Environment.getExternalStorageDirectory(), this.targetPV.field.fieldId + ".jpg"));
          localObject = decodeBitmapFromUri(paramIntent, 1802);
          this.targetPV.imgView.setImageBitmap((Bitmap)localObject);
          this.targetPV.imageUri = paramIntent;
          return;
          if (paramInt1 != 1300) {
            break;
          }
        } while (paramInt2 != -1);
        localObject = paramIntent.getExtras().getString("address");
        this.targetPV.ev.setText((CharSequence)localObject);
        this.targetPV.latitude = paramIntent.getExtras().getDouble("latitude");
        this.targetPV.longitude = paramIntent.getExtras().getDouble("longitude");
        this.mCurrentLocation.setLatitude(this.targetPV.latitude);
        this.mCurrentLocation.setLongitude(this.targetPV.longitude);
        this.mCurrentLocation.setProvider((String)localObject);
        return;
      } while ((paramInt1 != 1303) || (paramInt2 != -1));
      localObject = paramIntent.getExtras().getString("imagePath");
      paramIntent = DataUtil.copyToSDCard((String)localObject, "SignatureStamp", getActivity());
    } while (paramIntent == null);
    Object localObject = BitmapFactory.decodeFile((String)localObject);
    this.targetPV.imgView.setImageBitmap((Bitmap)localObject);
    this.targetPV.imageUri = Uri.fromFile(new File(paramIntent));
  }
  
  public void onDestroy()
  {
    if ((SPServer.getInstance().credentials.enableRememberDataInEditor) && (this.isModeCreateNewItem) && (!this.afterSaved))
    {
      rememeberValuesOfItem();
      Object localObject1 = getActivity();
      Object localObject2 = "PREFERENCES_FOR_REMEMBER_DATA" + this.dataList.idList;
      getActivity();
      localObject1 = ((Activity)localObject1).getSharedPreferences((String)localObject2, 0).edit();
      localObject2 = this.dataUser.keySet().iterator();
      while (((Iterator)localObject2).hasNext())
      {
        String str = (String)((Iterator)localObject2).next();
        ((SharedPreferences.Editor)localObject1).putString(str, (String)this.dataUser.get(str));
      }
      ((SharedPreferences.Editor)localObject1).commit();
      this.dataUser.clear();
    }
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation))
    {
      if (paramBoolean) {
        this.mLocationManager.stopUpdatingLocation();
      }
    }
    else {
      return;
    }
    this.mLocationManager.startUpdatingLocation();
  }
  
  public void onPause()
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation)) {
      this.mLocationManager.stopUpdatingLocation();
    }
  }
  
  public void onResume()
  {
    if ((this.mLocationManager != null) && (this.shouldUseCurrentLocation)) {
      this.mLocationManager.startUpdatingLocation();
    }
  }
  
  public void refreshEditor(SPList paramSPList, SPListItem paramSPListItem, ArrayList<Object> paramArrayList)
  {
    this.isModeCreateNewItem = false;
    this.dataList = paramSPList;
    this.dataListItem = paramSPListItem;
    if (this.dataListItem == null)
    {
      this.isModeCreateNewItem = true;
      this.dataListItem = new SPListItem();
      this.dataListItem.userData = new HashMap();
    }
    if (paramArrayList != null) {
      setArrFields(paramArrayList);
    }
    init();
  }
  
  public void setArrFields(ArrayList<Object> paramArrayList)
  {
    Object localObject2 = SPServer.getInstance().credentials.getHideFields();
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = new String[0];
    }
    localObject1 = Arrays.asList((Object[])localObject1);
    this.arrFields.clear();
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      localObject2 = paramArrayList.next();
      if ((localObject2 instanceof SPField))
      {
        localObject2 = (SPField)localObject2;
        String str;
        if (!this.isModeCreateNewItem)
        {
          str = (String)this.dataListItem.userData.get(((SPField)localObject2).name);
          if (str == null) {}
        }
        for (((SPField)localObject2).choiceDefault = str;; ((SPField)localObject2).choiceDefault = "")
        {
          if ((((List)localObject1).contains(((SPField)localObject2).name)) || (Arrays.asList(this.dataListItem.arrHiddenFields).contains(((SPField)localObject2).name))) {
            break label158;
          }
          this.arrFields.add(localObject2);
          break;
        }
      }
      else
      {
        label158:
        Log.e("LOG", "STRINGGG");
      }
    }
  }
  
  private class DownloadTask
    extends AsyncTask<String, String, String>
  {
    private PickerView targetPV;
    
    public DownloadTask(PickerView paramPickerView)
    {
      this.targetPV = paramPickerView;
    }
    
    protected String doInBackground(String... paramVarArgs)
    {
      if ((paramVarArgs == null) || (paramVarArgs.length <= 0)) {
        return null;
      }
      paramVarArgs = paramVarArgs[0];
      try
      {
        paramVarArgs = loadImage(paramVarArgs);
        return paramVarArgs;
      }
      catch (IOException paramVarArgs)
      {
        Log.e(SPItemEditorView.this.tag, paramVarArgs.toString());
      }
      return null;
    }
    
    public String loadImage(String paramString)
      throws IOException
    {
      localObject1 = null;
      Object localObject5 = null;
      for (;;)
      {
        try
        {
          localHttpURLConnection = (HttpURLConnection)new URL(paramString).openConnection();
          localObject1 = localHttpURLConnection;
          localObject4 = SPServer.getInstance();
          localObject1 = localHttpURLConnection;
          new ArrayList();
          localObject1 = localHttpURLConnection;
          if (!StringUtil.isEmpty(((SPServer)localObject4).credentials.getUsername()))
          {
            localObject1 = localHttpURLConnection;
            if (!StringUtil.isEmpty(((SPServer)localObject4).credentials.getPassword())) {}
          }
          else
          {
            localObject1 = localHttpURLConnection;
            localObject4 = HTTPUtil.getRequestPropertyForDomain(paramString);
            if (localObject4 != null)
            {
              localObject1 = localHttpURLConnection;
              localObject7 = localObject4.keySet().toArray()[0].toString();
              localObject1 = localHttpURLConnection;
              localHttpURLConnection.setRequestProperty((String)localObject7, (String)((HashMap)localObject4).get(localObject7));
            }
            localObject1 = localHttpURLConnection;
            localObject7 = new byte[localHttpURLConnection.getContentLength()];
            localObject1 = localHttpURLConnection;
            localObject4 = new DataInputStream(localHttpURLConnection.getInputStream());
          }
        }
        finally
        {
          HttpURLConnection localHttpURLConnection;
          Object localObject7;
          paramString = (String)localObject5;
        }
        try
        {
          ((DataInputStream)localObject4).readFully((byte[])localObject7);
          localObject1 = SPItemEditorView.this.getActivity().getCacheDir().getAbsolutePath() + "/SharePointData/";
          localObject5 = new File((String)localObject1);
          if (!((File)localObject5).exists()) {
            ((File)localObject5).mkdirs();
          }
          localObject5 = new File((String)localObject1 + StringUtil.getLastPathComponentFromUrl(paramString));
        }
        finally
        {
          for (;;)
          {
            paramString = (String)localObject4;
            localObject1 = localObject2;
            Object localObject3 = localObject6;
          }
        }
        try
        {
          localObject5 = new FileOutputStream((File)localObject5, true);
          ((FileOutputStream)localObject5).write((byte[])localObject7);
          ((FileOutputStream)localObject5).flush();
          ((FileOutputStream)localObject5).close();
          paramString = (String)localObject1 + StringUtil.getLastPathComponentFromUrl(paramString);
          if (localHttpURLConnection != null) {
            localHttpURLConnection.disconnect();
          }
          if (localObject4 != null) {
            ((DataInputStream)localObject4).close();
          }
        }
        catch (FileNotFoundException paramString)
        {
          Log.e(SPItemEditorView.this.tag, paramString.toString());
          paramString = null;
          if (localObject2 == null) {
            break label435;
          }
          localObject2.disconnect();
          if (localObject4 == null) {
            continue;
          }
          ((DataInputStream)localObject4).close();
          return null;
        }
        return paramString;
        localObject1 = localHttpURLConnection;
        localObject4 = Base64.encodeToString((((SPServer)localObject4).credentials.getUsername() + ":" + ((SPServer)localObject4).credentials.getPassword()).getBytes(), 2);
        localObject1 = localHttpURLConnection;
        localHttpURLConnection.setRequestProperty("Authorization", "Basic " + (String)localObject4);
      }
      if (localObject1 != null) {
        ((HttpURLConnection)localObject1).disconnect();
      }
      if (paramString != null) {
        paramString.close();
      }
      throw localObject2;
    }
    
    protected void onPostExecute(String paramString)
    {
      if (paramString == null) {}
      Bitmap localBitmap;
      do
      {
        return;
        paramString = Uri.fromFile(new File(paramString));
        localBitmap = SPItemEditorView.this.decodeBitmapFromUri(paramString, 1802);
      } while (this.targetPV.imgView == null);
      this.targetPV.imgView.setImageBitmap(localBitmap);
      this.targetPV.imageUri = paramString;
    }
  }
}
