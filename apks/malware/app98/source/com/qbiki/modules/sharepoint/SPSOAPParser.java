package com.qbiki.modules.sharepoint;

import android.util.Log;
import com.qbiki.util.StringUtil;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import org.ksoap2.serialization.AttributeInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class SPSOAPParser
{
  private static final String tag = "SPSOAPParser";
  
  public SPSOAPParser() {}
  
  public static boolean StringArrayContainValue(String[] paramArrayOfString, String paramString)
  {
    if (paramArrayOfString == null) {}
    for (;;)
    {
      return false;
      int i = 0;
      while (i < paramArrayOfString.length)
      {
        if (paramArrayOfString[i].equals(paramString)) {
          return true;
        }
        i += 1;
      }
    }
  }
  
  public static boolean StringArrayIsEmptyOrNull(String[] paramArrayOfString)
  {
    if (paramArrayOfString == null) {}
    while (paramArrayOfString.length == 0) {
      return true;
    }
    return false;
  }
  
  public static ArrayList<Object> parseListAndViewResult(SoapObject paramSoapObject)
  {
    List localList = Arrays.asList(new String[] { "ID", "_Level", "NameOrTitle", "LinkFilename", "LinkTitle", "Title", "FSObjType", "DocIcon", "UniqueId", "FileRef", "Author", "Created", "Editor", "Modified", "FileSizeDisplay", "FileLeafRef", "ImageSize", "_UIVersionString", "Attachments", "ContentType" });
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    int i = 0;
    while (i < paramSoapObject.getPropertyCount())
    {
      if ((paramSoapObject.getProperty(i) instanceof SoapObject))
      {
        Object localObject2 = (SoapObject)paramSoapObject.getProperty(i);
        int k = 1;
        int j = k;
        if (((SoapObject)localObject2).hasAttribute("Hidden"))
        {
          j = k;
          if (((SoapObject)localObject2).getAttribute("Hidden").toString().equals("TRUE")) {
            j = 0;
          }
        }
        boolean bool2 = false;
        boolean bool1 = bool2;
        if (((SoapObject)localObject2).hasAttribute("ReadOnly"))
        {
          bool1 = bool2;
          if (((SoapObject)localObject2).getAttribute("ReadOnly").toString().equals("TRUE"))
          {
            if (!((SoapObject)localObject2).hasAttribute("Name")) {
              break label737;
            }
            localObject1 = ((SoapObject)localObject2).getAttribute("Name").toString();
            bool1 = bool2;
            if (!localList.contains(localObject1)) {
              bool1 = true;
            }
          }
        }
        boolean bool3 = false;
        bool2 = bool3;
        if (((SoapObject)localObject2).hasAttribute("RichText"))
        {
          bool2 = bool3;
          if (((SoapObject)localObject2).getAttribute("RichText").toString().equals("TRUE")) {
            bool2 = true;
          }
        }
        SPField localSPField = new SPField();
        if (((SoapObject)localObject2).hasAttribute("ID"))
        {
          localObject1 = ((SoapObject)localObject2).getAttribute("ID").toString();
          label362:
          localSPField.ID = ((String)localObject1);
          if (!((SoapObject)localObject2).hasAttribute("Name")) {
            break label751;
          }
          localObject1 = ((SoapObject)localObject2).getAttribute("Name").toString();
          label391:
          localSPField.name = ((String)localObject1);
          if (!((SoapObject)localObject2).hasAttribute("DisplayName")) {
            break label758;
          }
          localObject1 = ((SoapObject)localObject2).getAttribute("DisplayName").toString();
          label420:
          localSPField.displayName = ((String)localObject1);
          if (j != 0) {
            break label765;
          }
          bool3 = true;
          label434:
          localSPField.hidden = bool3;
          if (!((SoapObject)localObject2).hasAttribute("Format")) {
            break label771;
          }
          localObject1 = ((SoapObject)localObject2).getAttribute("Format").toString();
          label463:
          localSPField.format = ((String)localObject1);
          if (!((SoapObject)localObject2).hasAttribute("Type")) {
            break label778;
          }
          localObject1 = ((SoapObject)localObject2).getAttribute("Type").toString();
          label492:
          localSPField.type = ((String)localObject1);
          localSPField.readOnly = bool1;
          localSPField.richText = bool2;
          if ((((SoapObject)localObject2).hasAttribute("Required")) && (((SoapObject)localObject2).getAttribute("Required").toString().equals("TRUE"))) {
            localSPField.required = true;
          }
          if ((localSPField.type.equals("Lookup")) || (localSPField.type.equals("LookupMulti")))
          {
            if (!((SoapObject)localObject2).hasAttribute("List")) {
              break label785;
            }
            localObject1 = ((SoapObject)localObject2).getAttribute("List").toString();
            label595:
            localSPField.lookupListID = ((String)localObject1);
            if (!((SoapObject)localObject2).hasAttribute("ShowField")) {
              break label792;
            }
          }
        }
        Object localObject3;
        label737:
        label751:
        label758:
        label765:
        label771:
        label778:
        label785:
        label792:
        for (Object localObject1 = ((SoapObject)localObject2).getAttribute("ShowField").toString();; localObject1 = "")
        {
          localSPField.lookupShowFieldOfList = ((String)localObject1);
          localArrayList1.add(Integer.valueOf(localArrayList2.size()).toString());
          if (!((SoapObject)localObject2).hasProperty("CHOICES")) {
            break label799;
          }
          localSPField.choices = new ArrayList();
          localObject1 = (SoapObject)((SoapObject)localObject2).getProperty("CHOICES");
          j = 0;
          while (j < ((SoapObject)localObject1).getPropertyCount())
          {
            if ((((SoapObject)localObject1).getProperty(j) instanceof SoapPrimitive))
            {
              localObject3 = (SoapPrimitive)((SoapObject)localObject1).getProperty(j);
              localSPField.choices.add(((SoapPrimitive)localObject3).toString());
            }
            j += 1;
          }
          localObject1 = "";
          break;
          localObject1 = "";
          break label362;
          localObject1 = "";
          break label391;
          localObject1 = "";
          break label420;
          bool3 = false;
          break label434;
          localObject1 = "";
          break label463;
          localObject1 = "";
          break label492;
          localObject1 = "";
          break label595;
        }
        label799:
        if (((SoapObject)localObject2).hasProperty("Default")) {
          localSPField.choiceDefault = ((SoapPrimitive)((SoapObject)localObject2).getProperty("Default")).toString();
        }
        if (((SoapObject)localObject2).hasProperty("MAPPINGS"))
        {
          localSPField.mappings = new HashMap();
          localObject1 = (SoapObject)((SoapObject)localObject2).getProperty("MAPPINGS");
          j = 0;
          while (j < ((SoapObject)localObject1).getPropertyCount())
          {
            if ((((SoapObject)localObject1).getProperty(j) instanceof SoapPrimitive))
            {
              localObject2 = (SoapPrimitive)((SoapObject)localObject1).getProperty(j);
              localObject3 = (String)((SoapPrimitive)localObject2).getAttribute("Value");
              localSPField.mappings.put(localObject3, ((SoapPrimitive)localObject2).toString());
            }
            j += 1;
          }
        }
        if ((!localSPField.hidden) && (!localSPField.readOnly)) {
          localArrayList2.add(localSPField);
        }
      }
      i += 1;
    }
    if (localArrayList1.size() > 0) {
      localArrayList2.add(0, localArrayList1);
    }
    return localArrayList2;
  }
  
  public static ArrayList<Object> parseListCollectionResult(SoapObject paramSoapObject)
  {
    ArrayList localArrayList = new ArrayList();
    SoapObject localSoapObject1 = (SoapObject)paramSoapObject.getProperty(0);
    int i = 0;
    if (i < localSoapObject1.getPropertyCount())
    {
      SPList localSPList;
      if ((localSoapObject1.getProperty(i) instanceof SoapObject))
      {
        SoapObject localSoapObject2 = (SoapObject)localSoapObject1.getProperty(i);
        localSPList = new SPList();
        if (!localSoapObject2.hasAttribute("ID")) {
          break label574;
        }
        paramSoapObject = localSoapObject2.getAttribute("ID").toString();
        label78:
        localSPList.idList = paramSoapObject;
        if (!localSoapObject2.hasAttribute("DocTemplateUrl")) {
          break label580;
        }
        paramSoapObject = localSoapObject2.getAttribute("DocTemplateUrl").toString();
        label105:
        localSPList.docTemplateUrl = paramSoapObject;
        if (!localSoapObject2.hasAttribute("DefaultViewUrl")) {
          break label586;
        }
        paramSoapObject = localSoapObject2.getAttribute("DefaultViewUrl").toString();
        label132:
        localSPList.defaultViewUrl = paramSoapObject;
        if (!localSoapObject2.hasAttribute("Title")) {
          break label592;
        }
        paramSoapObject = localSoapObject2.getAttributeAsString("Title").toString();
        label159:
        localSPList.title = paramSoapObject;
        if (!localSoapObject2.hasAttribute("Description")) {
          break label598;
        }
        paramSoapObject = localSoapObject2.getAttribute("Description").toString();
        label186:
        localSPList.description = paramSoapObject;
        if (!localSoapObject2.hasAttribute("ImageUrl")) {
          break label604;
        }
        paramSoapObject = localSoapObject2.getAttribute("ImageUrl").toString();
        label213:
        localSPList.imageUrl = paramSoapObject;
        if (!localSoapObject2.hasAttribute("Name")) {
          break label610;
        }
        paramSoapObject = localSoapObject2.getAttributeAsString("Name").toString();
        label240:
        localSPList.name = paramSoapObject;
        if (!localSoapObject2.hasAttribute("ServerTemplate")) {
          break label616;
        }
        paramSoapObject = localSoapObject2.getAttribute("ServerTemplate").toString();
        label269:
        localSPList.setServerTemplate(Integer.valueOf(Integer.parseInt(paramSoapObject)));
        if (!localSoapObject2.hasAttribute("BaseType")) {
          break label623;
        }
        paramSoapObject = localSoapObject2.getAttribute("BaseType").toString();
        label304:
        localSPList.baseType = Integer.parseInt(paramSoapObject);
        if (!localSoapObject2.hasAttribute("Modified")) {
          break label630;
        }
        paramSoapObject = localSoapObject2.getAttribute("Created").toString();
        label334:
        localSPList.setCreateDate(paramSoapObject);
        if (!localSoapObject2.hasAttribute("Modified")) {
          break label636;
        }
        paramSoapObject = localSoapObject2.getAttribute("Modified").toString();
        label361:
        localSPList.setModifiedDate(paramSoapObject);
        if (!localSoapObject2.hasAttribute("LastDeleted")) {
          break label642;
        }
        paramSoapObject = localSoapObject2.getAttribute("LastDeleted").toString();
        label390:
        localSPList.setLastDeletedDate(paramSoapObject);
        if (!localSoapObject2.hasAttribute("Version")) {
          break label648;
        }
        paramSoapObject = localSoapObject2.getAttribute("Version").toString();
        label419:
        localSPList.version = Integer.parseInt(paramSoapObject);
        if (!localSoapObject2.hasAttribute("ItemCount")) {
          break label655;
        }
        paramSoapObject = localSoapObject2.getAttribute("ItemCount").toString();
        label451:
        localSPList.itemCount = Integer.parseInt(paramSoapObject);
        if (!localSoapObject2.hasAttribute("WebFullUrl")) {
          break label662;
        }
        paramSoapObject = localSoapObject2.getAttribute("WebFullUrl").toString();
        label483:
        localSPList.webFullUrl = paramSoapObject;
        if ((!StringUtil.isEmpty(SPServer.getInstance().credentials.getDatatype())) || (!StringArrayIsEmptyOrNull(SPServer.getInstance().credentials.getServertemplatenumbers())))
        {
          if ((!SPServer.getInstance().credentials.getDatatype().equals("list")) || (!localSPList.isItem)) {
            break label688;
          }
          if (!StringUtil.isEmpty(SPServer.getInstance().credentials.getListid())) {
            break label668;
          }
        }
      }
      for (;;)
      {
        label560:
        localArrayList.add(localSPList);
        label574:
        label580:
        label586:
        label592:
        label598:
        label604:
        label610:
        label616:
        label623:
        label630:
        label636:
        label642:
        label648:
        label655:
        label662:
        label668:
        label688:
        do
        {
          i += 1;
          break;
          paramSoapObject = "";
          break label78;
          paramSoapObject = "";
          break label105;
          paramSoapObject = "";
          break label132;
          paramSoapObject = "";
          break label159;
          paramSoapObject = "";
          break label186;
          paramSoapObject = "";
          break label213;
          paramSoapObject = "";
          break label240;
          paramSoapObject = "0";
          break label269;
          paramSoapObject = "0";
          break label304;
          paramSoapObject = "";
          break label334;
          paramSoapObject = "";
          break label361;
          paramSoapObject = "";
          break label390;
          paramSoapObject = "0";
          break label419;
          paramSoapObject = "0";
          break label451;
          paramSoapObject = "";
          break label483;
          if (localSPList.idList.equalsIgnoreCase(SPServer.getInstance().credentials.getListid())) {
            break label560;
          }
          if ((SPServer.getInstance().credentials.getDatatype().equals("file")) && (localSPList.isFile) && ((StringUtil.isEmpty(SPServer.getInstance().credentials.getListid())) || (localSPList.idList.equalsIgnoreCase(SPServer.getInstance().credentials.getListid())))) {
            break label560;
          }
        } while (!StringArrayContainValue(SPServer.getInstance().credentials.getServertemplatenumbers(), localSPList.getServerTemplate().toString()));
      }
    }
    return localArrayList;
  }
  
  public static ArrayList<Object> parseListItemsResult(SoapObject paramSoapObject)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    while (i < paramSoapObject.getPropertyCount())
    {
      if ((paramSoapObject.getProperty(i) instanceof SoapObject))
      {
        SoapObject localSoapObject = (SoapObject)paramSoapObject.getProperty(i);
        SPListItem localSPListItem = new SPListItem();
        label110:
        label147:
        label189:
        label220:
        label262:
        label293:
        label327:
        label358:
        label392:
        label426:
        label460:
        label494:
        label528:
        label559:
        label596:
        boolean bool;
        if (localSoapObject.hasAttribute("ows_ID"))
        {
          localObject = localSoapObject.getAttribute("ows_ID").toString();
          localSPListItem.ID = Integer.valueOf(Integer.parseInt((String)localObject));
          if (!localSoapObject.hasAttribute("ows__Level")) {
            break label800;
          }
          localObject = localSoapObject.getAttribute("ows__Level").toString();
          localSPListItem.level = Integer.valueOf(Integer.parseInt((String)localObject));
          if (!localSoapObject.hasAttribute("ows_NameOrTitle")) {
            break label808;
          }
          localObject = localSoapObject.getAttribute("ows_NameOrTitle").toString();
          localSPListItem.name = ((String)localObject);
          if (StringUtil.isEmpty(localSPListItem.name))
          {
            if (!localSoapObject.hasAttribute("ows_LinkFilename")) {
              break label815;
            }
            localObject = localSoapObject.getAttribute("ows_LinkFilename").toString();
            localSPListItem.name = ((String)localObject);
          }
          if (!localSoapObject.hasAttribute("ows_LinkTitle")) {
            break label822;
          }
          localObject = localSoapObject.getAttribute("ows_LinkTitle").toString();
          localSPListItem.title = ((String)localObject);
          if (StringUtil.isEmpty(localSPListItem.title))
          {
            if (!localSoapObject.hasAttribute("ows_Title")) {
              break label829;
            }
            localObject = localSoapObject.getAttribute("ows_Title").toString();
            localSPListItem.title = ((String)localObject);
          }
          if (!localSoapObject.hasAttribute("ows_FSObjType")) {
            break label836;
          }
          localObject = localSoapObject.getAttribute("ows_FSObjType").toString();
          localSPListItem.type = removePrefix((String)localObject);
          if (!localSoapObject.hasAttribute("ows_DocIcon")) {
            break label843;
          }
          localObject = localSoapObject.getAttribute("ows_DocIcon").toString();
          localSPListItem.docIcon = ((String)localObject);
          if (!localSoapObject.hasAttribute("ows_UniqueId")) {
            break label850;
          }
          localObject = localSoapObject.getAttribute("ows_UniqueId").toString();
          localSPListItem.uniqueId = removePrefix((String)localObject);
          if (!localSoapObject.hasAttribute("ows_FileRef")) {
            break label857;
          }
          localObject = localSoapObject.getAttribute("ows_FileRef").toString();
          localSPListItem.fileRef = removePrefix((String)localObject);
          if (!localSoapObject.hasAttribute("ows_Author")) {
            break label864;
          }
          localObject = localSoapObject.getAttribute("ows_Author").toString();
          localSPListItem.author = removePrefix((String)localObject);
          if (!localSoapObject.hasAttribute("ows_Created")) {
            break label871;
          }
          localObject = localSoapObject.getAttribute("ows_Created").toString();
          localSPListItem.setCreateDate(removePrefix((String)localObject));
          if (!localSoapObject.hasAttribute("ows_Editor")) {
            break label878;
          }
          localObject = localSoapObject.getAttribute("ows_Editor").toString();
          localSPListItem.editor = removePrefix((String)localObject);
          if (!localSoapObject.hasAttribute("ows_Modified")) {
            break label885;
          }
          localObject = localSoapObject.getAttribute("ows_Modified").toString();
          localSPListItem.setModifiedDate((String)localObject);
          if (!localSoapObject.hasAttribute("ows_FileSizeDisplay")) {
            break label892;
          }
          localObject = localSoapObject.getAttribute("ows_FileSizeDisplay").toString();
          localSPListItem.fileSize = Integer.valueOf(Integer.parseInt((String)localObject));
          if (!localSoapObject.hasAttribute("ows_FileLeafRef")) {
            break label900;
          }
          localObject = localSoapObject.getAttribute("ows_FileLeafRef").toString();
          localSPListItem.fileLeafRef = removePrefix((String)localObject);
          if (!localSoapObject.hasAttribute("ows_ImageSize")) {
            break label907;
          }
          bool = true;
          label619:
          localSPListItem.isImage = bool;
          if (!localSoapObject.hasAttribute("ows__UIVersionString")) {
            break label912;
          }
          localObject = localSoapObject.getAttribute("ows__UIVersionString").toString();
          label649:
          localSPListItem.version = ((String)localObject);
          if (!localSoapObject.hasAttribute("ows_Attachments")) {
            break label919;
          }
          localObject = localSoapObject.getAttribute("ows_Attachments").toString();
          label680:
          localSPListItem.attachments = Integer.valueOf(Integer.parseInt((String)localObject));
          if (!localSoapObject.hasAttribute("ows_ContentType")) {
            break label927;
          }
        }
        label800:
        label808:
        label815:
        label822:
        label829:
        label836:
        label843:
        label850:
        label857:
        label864:
        label871:
        label878:
        label885:
        label892:
        label900:
        label907:
        label912:
        label919:
        label927:
        for (Object localObject = localSoapObject.getAttribute("ows_ContentType").toString();; localObject = "")
        {
          localSPListItem.contentType = ((String)localObject);
          localObject = new HashMap();
          int j = 0;
          while (j < localSoapObject.getAttributeCount())
          {
            AttributeInfo localAttributeInfo = new AttributeInfo();
            localSoapObject.getAttributeInfo(j, localAttributeInfo);
            if (localAttributeInfo != null) {
              ((HashMap)localObject).put(localAttributeInfo.getName(), localAttributeInfo.getValue().toString());
            }
            j += 1;
          }
          localObject = "0";
          break;
          localObject = "0";
          break label110;
          localObject = "";
          break label147;
          localObject = "";
          break label189;
          localObject = "";
          break label220;
          localObject = "";
          break label262;
          localObject = "";
          break label293;
          localObject = "";
          break label327;
          localObject = "";
          break label358;
          localObject = "";
          break label392;
          localObject = "";
          break label426;
          localObject = "";
          break label460;
          localObject = "";
          break label494;
          localObject = "";
          break label528;
          localObject = "0";
          break label559;
          localObject = "";
          break label596;
          bool = false;
          break label619;
          localObject = "";
          break label649;
          localObject = "0";
          break label680;
        }
        localSPListItem.userData = ((HashMap)localObject);
        localArrayList.add(localSPListItem);
      }
      i += 1;
    }
    return localArrayList;
  }
  
  public static ArrayList<Object> parseWebCollectionResult(SoapObject paramSoapObject)
  {
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    if (i < paramSoapObject.getPropertyCount())
    {
      SoapObject localSoapObject;
      SPWeb localSPWeb;
      String str;
      if ((paramSoapObject.getProperty(i) instanceof SoapObject))
      {
        localSoapObject = (SoapObject)paramSoapObject.getProperty(i);
        localSPWeb = new SPWeb();
        if (!localSoapObject.hasAttribute("Title")) {
          break label125;
        }
        str = localSoapObject.getAttribute("Title").toString();
        label69:
        localSPWeb.title = str;
      }
      for (;;)
      {
        try
        {
          if (!localSoapObject.hasAttribute("Url")) {
            continue;
          }
          str = localSoapObject.getAttribute("Url").toString();
          localSPWeb.URL = new URI(str);
        }
        catch (URISyntaxException localURISyntaxException)
        {
          label125:
          Log.e("SPSOAPParser", localURISyntaxException.getMessage());
          continue;
        }
        localArrayList.add(localSPWeb);
        i += 1;
        break;
        str = "";
        break label69;
        str = "";
      }
    }
    return localArrayList;
  }
  
  public static String removePrefix(String paramString)
  {
    if (StringUtil.isEmpty(paramString)) {}
    Object localObject1;
    label86:
    do
    {
      return paramString;
      localObject1 = "";
      String[] arrayOfString = paramString.split(";#");
      int i = 0;
      if (i < arrayOfString.length)
      {
        Object localObject2 = localObject1;
        if ((i + 1) % 2 == 0)
        {
          localObject2 = new StringBuilder().append((String)localObject1);
          if (i <= 1) {
            break label86;
          }
        }
        for (localObject1 = ";";; localObject1 = "")
        {
          localObject2 = (String)localObject1 + arrayOfString[i];
          i += 1;
          localObject1 = localObject2;
          break;
        }
      }
    } while (StringUtil.isEmpty((String)localObject1));
    return localObject1;
  }
}
