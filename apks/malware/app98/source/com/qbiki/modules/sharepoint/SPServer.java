package com.qbiki.modules.sharepoint;

import android.os.AsyncTask;
import android.util.Base64;
import android.util.Log;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.StringUtil;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.xmlpull.v1.XmlPullParserException;

public class SPServer
{
  public static final String DT_EDIT = "edit";
  public static final String DT_FILE = "file";
  public static final String DT_ITEM = "item";
  public static final String DT_LIST = "list";
  public static final String DT_NEW = "new";
  public static final String GetListAndView = "GetListAndView";
  public static final String GetListItems = "GetListItems";
  private static SPServer server;
  private String UpdateCommand = "";
  private SPAsyncRequester asyncRequester;
  public SPServerCredentials credentials;
  private String destinationURL;
  private String folderName;
  private SPList selectedList;
  private SPListItem selectedListItem;
  private String urlItem = "";
  
  public SPServer() {}
  
  public static void destroy()
  {
    if (server != null) {
      server = null;
    }
  }
  
  public static SPServer getInstance()
  {
    if (server == null)
    {
      server = new SPServer();
      server.credentials = new SPServerCredentials();
    }
    return server;
  }
  
  public void copyItem(String paramString, SPResponseListener paramSPResponseListener)
  {
    this.urlItem = paramString;
    this.selectedListItem = null;
    this.selectedList = null;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPResponseListener = this.asyncRequester;
    StringBuilder localStringBuilder = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramString = server.credentials.getURL().toString();; paramString = "")
    {
      paramSPResponseListener.execute(new String[] { paramString + "/_vti_bin/Copy.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetItem", "GetItem" });
      return;
    }
  }
  
  public void deleteListItem(SPList paramSPList, SPListItem paramSPListItem, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.selectedListItem = paramSPListItem;
    this.folderName = null;
    this.UpdateCommand = "Delete";
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPListItem = this.asyncRequester;
    paramSPResponseListener = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramSPListItem.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/UpdateListItems", "UpdateListItems" });
      return;
    }
  }
  
  public void getAllCollectionResponse(final SPResponseListener paramSPResponseListener)
  {
    getWebCollectionResponse(new SPResponseListener()
    {
      public void onResponseError(String paramAnonymousString)
      {
        paramSPResponseListener.onResponseError(paramAnonymousString);
      }
      
      public void onResponseReceived(final ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
      {
        SPServer.server.getListCollectionResponse(new SPResponseListener()
        {
          public void onResponseError(String paramAnonymous2String)
          {
            SPServer.1.this.val$callback.onResponseError(paramAnonymous2String);
          }
          
          public void onResponseReceived(ArrayList<Object> paramAnonymous2ArrayList, String paramAnonymous2String)
          {
            paramAnonymousArrayList.addAll(paramAnonymous2ArrayList);
            SPServer.1.this.val$callback.onResponseReceived(paramAnonymousArrayList, "");
          }
          
          public void onResponseTimeout()
          {
            SPServer.1.this.val$callback.onResponseTimeout();
          }
        });
      }
      
      public void onResponseTimeout()
      {
        paramSPResponseListener.onResponseTimeout();
      }
    });
  }
  
  public void getFieldsResponse(SPList paramSPList, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.selectedListItem = null;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPResponseListener = this.asyncRequester;
    StringBuilder localStringBuilder = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramSPResponseListener.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetListAndView", "GetListAndView" });
      return;
    }
  }
  
  public void getItemResponse(SPList paramSPList, SPListItem paramSPListItem, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.selectedListItem = paramSPListItem;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPListItem = this.asyncRequester;
    paramSPResponseListener = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramSPListItem.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetListItems", "GetListItems" });
      return;
    }
  }
  
  public void getListCollectionResponse(SPResponseListener paramSPResponseListener)
  {
    this.selectedListItem = null;
    this.selectedList = null;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    SPAsyncRequester localSPAsyncRequester = this.asyncRequester;
    StringBuilder localStringBuilder = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPResponseListener = server.credentials.getURL().toString();; paramSPResponseListener = "")
    {
      localSPAsyncRequester.execute(new String[] { paramSPResponseListener + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetListCollection", "GetListCollection" });
      return;
    }
  }
  
  public void getListItemsResponse(SPList paramSPList, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.selectedListItem = null;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPResponseListener = this.asyncRequester;
    StringBuilder localStringBuilder = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramSPResponseListener.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetListItems", "GetListItems" });
      return;
    }
  }
  
  public void getListItemsResponseWithFields(SPList paramSPList, SPResponseListener paramSPResponseListener)
  {
    getListItemsResponse(paramSPList, paramSPResponseListener);
  }
  
  public void getListItemsResponseWithFolder(SPList paramSPList, String paramString, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.folderName = paramString;
    this.selectedListItem = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramString = this.asyncRequester;
    paramSPResponseListener = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramString.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetListItems", "GetListItems" });
      return;
    }
  }
  
  public void getWebCollectionResponse(SPResponseListener paramSPResponseListener)
  {
    this.selectedListItem = null;
    this.selectedList = null;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    SPAsyncRequester localSPAsyncRequester = this.asyncRequester;
    StringBuilder localStringBuilder = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPResponseListener = server.credentials.getURL().toString();; paramSPResponseListener = "")
    {
      localSPAsyncRequester.execute(new String[] { paramSPResponseListener + "/_vti_bin/Webs.asmx", "http://schemas.microsoft.com/sharepoint/soap/GetWebCollection", "GetWebCollection" });
      return;
    }
  }
  
  public void newListItem(SPList paramSPList, SPListItem paramSPListItem, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.selectedListItem = paramSPListItem;
    this.folderName = null;
    this.UpdateCommand = "New";
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPListItem = this.asyncRequester;
    paramSPResponseListener = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramSPListItem.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/UpdateListItems", "UpdateListItems" });
      return;
    }
  }
  
  public void updateListItem(SPList paramSPList, SPListItem paramSPListItem, SPResponseListener paramSPResponseListener)
  {
    this.selectedList = paramSPList;
    this.selectedListItem = paramSPListItem;
    this.folderName = null;
    this.UpdateCommand = "Update";
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    paramSPListItem = this.asyncRequester;
    paramSPResponseListener = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramSPList = server.credentials.getURL().toString();; paramSPList = "")
    {
      paramSPListItem.execute(new String[] { paramSPList + "/_vti_bin/Lists.asmx", "http://schemas.microsoft.com/sharepoint/soap/UpdateListItems", "UpdateListItems" });
      return;
    }
  }
  
  public void uploadItemToDictinationURL(byte[] paramArrayOfByte, String paramString, SPResponseListener paramSPResponseListener)
  {
    this.urlItem = null;
    this.selectedListItem = null;
    this.selectedList = null;
    this.destinationURL = paramString;
    this.folderName = null;
    if (this.asyncRequester != null)
    {
      this.asyncRequester.cancel(true);
      this.asyncRequester.stopHttpTransport();
    }
    this.asyncRequester = new SPAsyncRequester(paramSPResponseListener);
    this.asyncRequester.setData(paramArrayOfByte);
    paramString = this.asyncRequester;
    paramSPResponseListener = new StringBuilder();
    if (server.credentials.getURL() != null) {}
    for (paramArrayOfByte = server.credentials.getURL().toString();; paramArrayOfByte = "")
    {
      paramString.execute(new String[] { paramArrayOfByte + "/_vti_bin/Copy.asmx", "http://schemas.microsoft.com/sharepoint/soap/CopyIntoItems", "CopyIntoItems" });
      return;
    }
  }
  
  public class SPAsyncRequester
    extends AsyncTask<String, Void, ArrayList<Object>>
  {
    private static final String NAMESPACE = "http://schemas.microsoft.com/sharepoint/soap/";
    private static final String tag = "SPAsyncRequester";
    protected String METHOD_NAME = "";
    protected String SOAP_ACTION = "";
    protected String URL = "";
    private HttpTransportSE androidHttpTransport;
    private SPResponseListener callbackActivity;
    private byte[] data;
    private String error = null;
    
    protected SPAsyncRequester(SPResponseListener paramSPResponseListener)
    {
      this.callbackActivity = paramSPResponseListener;
    }
    
    protected ArrayList<Object> doInBackground(String... paramVarArgs)
    {
      if (paramVarArgs.length > 0) {
        this.URL = paramVarArgs[0];
      }
      if (paramVarArgs.length > 1) {
        this.SOAP_ACTION = paramVarArgs[1];
      }
      if (paramVarArgs.length > 2) {
        this.METHOD_NAME = paramVarArgs[2];
      }
      return run();
    }
    
    public byte[] getData()
    {
      return this.data;
    }
    
    protected void onPostExecute(ArrayList<Object> paramArrayList)
    {
      super.onPostExecute(paramArrayList);
      if (!StringUtil.isEmpty(this.error))
      {
        this.callbackActivity.onResponseError(this.error);
        return;
      }
      if (paramArrayList == null)
      {
        this.callbackActivity.onResponseTimeout();
        return;
      }
      this.callbackActivity.onResponseReceived(paramArrayList, this.METHOD_NAME);
    }
    
    public ArrayList<Object> run()
    {
      label170:
      label175:
      label325:
      label350:
      label849:
      label931:
      label984:
      label1042:
      label1058:
      label1133:
      label1149:
      label1396:
      label1638:
      label1720:
      Object localObject3;
      try
      {
        this.androidHttpTransport = new HttpTransportSE(this.URL, 30000);
        localSoapSerializationEnvelope = new SoapSerializationEnvelope(120);
        SoapObject localSoapObject = new SoapObject("http://schemas.microsoft.com/sharepoint/soap/", this.METHOD_NAME);
        localSoapSerializationEnvelope.setOutputSoapObject(localSoapObject);
        localSoapSerializationEnvelope.dotNet = true;
        localSoapSerializationEnvelope.implicitTypes = true;
        localSoapSerializationEnvelope.setAddAdornments(false);
        if (((this.METHOD_NAME.equals("GetListAndView")) || (this.METHOD_NAME.equals("GetListItems"))) && (SPServer.this.selectedList != null)) {
          if ((SPServer.this.selectedList == null) || (StringUtil.isEmpty(SPServer.this.selectedList.idList))) {
            throw new Exception("The List Name is empty.");
          }
        }
      }
      catch (SoapFault localSoapFault)
      {
        if ((localSoapFault != null) && (localSoapFault.getMessage() != null))
        {
          localObject1 = localSoapFault.getMessage();
          Log.e("SPAsyncRequester", (String)localObject1);
          if (localSoapFault == null) {
            break label2331;
          }
          localObject1 = localSoapFault.getMessage();
          this.error = ((String)localObject1);
          return null;
          localSoapFault.addProperty("listName", SPServer.this.selectedList.idList);
          if (this.METHOD_NAME.equals("GetListItems")) {
            if (SPServer.this.selectedList.fieldsOfList != null)
            {
              localObject1 = new SoapObject("", "ViewFields");
              localObject4 = SPServer.this.selectedList.fieldsOfList.iterator();
              while (((Iterator)localObject4).hasNext())
              {
                localObject5 = ((Iterator)localObject4).next();
                if ((localObject5 instanceof SPField))
                {
                  localObject6 = new SoapObject("", "FieldRef");
                  ((SoapObject)localObject6).addAttribute("Name", ((SPField)localObject5).name);
                  ((SoapObject)localObject1).addSoapObject((SoapObject)localObject6);
                }
              }
            }
          }
        }
      }
      catch (SocketTimeoutException localSocketTimeoutException)
      {
        if ((localSocketTimeoutException != null) && (localSocketTimeoutException.getMessage() != null))
        {
          localObject1 = localSocketTimeoutException.getMessage();
          Log.e("SPAsyncRequester", (String)localObject1);
          this.callbackActivity.onResponseTimeout();
          if (localSocketTimeoutException == null) {
            break label2345;
          }
          localObject1 = localSocketTimeoutException.getMessage();
          this.error = ((String)localObject1);
          return null;
          localObject4 = new SoapObject("", "viewFields");
          ((SoapObject)localObject4).addSoapObject((SoapObject)localObject1);
          localSocketTimeoutException.addSoapObject((SoapObject)localObject4);
          localObject4 = new StringBuilder().append("<Query><OrderBy><FieldRef Name='");
          if (!SPServer.this.selectedList.isItem) {
            break label2392;
          }
          localObject1 = "Title";
          localObject1 = (String)localObject1 + "' Ascending='TRUE'/></OrderBy></Query>";
          if (!StringUtil.isEmpty(SPServer.server.credentials.getQuery())) {
            localObject1 = SPServer.server.credentials.getQuery();
          }
          if (SPServer.this.selectedListItem != null) {
            localObject1 = "<Query><Where><Eq><FieldRef Name='ID'/><Value Type='Text'>" + SPServer.this.selectedListItem.ID + "</Value></Eq></Where></Query>";
          }
          localObject4 = new SoapObject("", "query");
          localObject1 = new SPParserXMLtoSOAPObject((String)localObject1).getResultObject();
          if ((localObject1 instanceof SoapObject)) {
            ((SoapObject)localObject4).addSoapObject((SoapObject)localObject1);
          }
          for (;;)
          {
            localSocketTimeoutException.addSoapObject((SoapObject)localObject4);
            localSocketTimeoutException.addProperty("rowLimit", Integer.valueOf(SPServer.this.selectedList.itemCount));
            localObject1 = new SoapObject("", "queryOptions");
            localObject4 = new SoapObject("", "QueryOptions");
            if (!StringUtil.isEmpty(SPServer.server.credentials.viewLibraryMode))
            {
              localObject5 = new SoapObject("", "ViewAttributes");
              ((SoapObject)localObject5).addAttribute("Scope", SPServer.server.credentials.viewLibraryMode);
              ((SoapObject)localObject4).addSoapObject((SoapObject)localObject5);
            }
            if (!StringUtil.isEmpty(SPServer.this.folderName))
            {
              if (!SPServer.this.folderName.startsWith("/")) {
                SPServer.access$302(SPServer.this, "/" + SPServer.this.folderName);
              }
              if ((SPServer.server.credentials.getURL().getPath() != null) && (SPServer.server.credentials.getURL().getPath().length() > 1) && (SPServer.this.folderName.indexOf(SPServer.server.credentials.getURL().getPath().substring(1)) == 0)) {
                SPServer.access$302(SPServer.this, SPServer.this.folderName.replaceFirst(SPServer.server.credentials.getURL().getPath().substring(1) + "/", ""));
              }
              ((SoapObject)localObject4).addProperty("Folder", SPServer.this.folderName);
            }
            ((SoapObject)localObject1).addSoapObject((SoapObject)localObject4);
            localSocketTimeoutException.addSoapObject((SoapObject)localObject1);
            Object localObject2 = new ArrayList();
            if ((!StringUtil.isEmpty(SPServer.server.credentials.getUsername())) && (!StringUtil.isEmpty(SPServer.server.credentials.getPassword()))) {
              break label1638;
            }
            localObject1 = HTTPUtil.getRequestPropertyForDomain(this.URL);
            if (localObject1 == null) {
              break;
            }
            localObject4 = localObject1.keySet().toArray()[0].toString();
            localObject1 = new HeaderProperty((String)localObject4, (String)((HashMap)localObject1).get(localObject4));
            ((List)localObject2).add(localObject1);
            this.androidHttpTransport.call(this.SOAP_ACTION, localSoapSerializationEnvelope, (List)localObject2);
            localObject4 = new Vector();
            localObject1 = null;
            if (!(localSoapSerializationEnvelope.getResponse() instanceof Vector)) {
              break label1720;
            }
            localObject2 = (Vector)localSoapSerializationEnvelope.getResponse();
            if (!this.METHOD_NAME.equals("GetListCollection")) {
              break label1747;
            }
            return SPSOAPParser.parseListCollectionResult((SoapObject)localObject1);
            if ((localObject1 instanceof SoapPrimitive)) {
              ((SoapObject)localObject4).addProperty(((SoapPrimitive)localObject1).getName(), localObject1);
            }
          }
        }
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          if ((localIOException != null) && (localIOException.getMessage() != null))
          {
            localObject1 = localIOException.getMessage();
            Log.e("SPAsyncRequester", (String)localObject1);
            if (localIOException == null) {
              break label2359;
            }
            localObject1 = localIOException.getMessage();
            this.error = ((String)localObject1);
            continue;
            if (this.METHOD_NAME.equals("UpdateListItems")) {
              if ((SPServer.this.selectedList == null) || (StringUtil.isEmpty(SPServer.this.selectedList.idList))) {
                throw new Exception("The List Name is emplty.");
              }
            }
          }
        }
      }
      catch (XmlPullParserException localXmlPullParserException)
      {
        Object localObject6;
        while ((localXmlPullParserException != null) && (localXmlPullParserException.getMessage() != null))
        {
          localObject1 = localXmlPullParserException.getMessage();
          Log.e("SPAsyncRequester", (String)localObject1);
          if (localXmlPullParserException == null) {
            break label2373;
          }
          localObject1 = localXmlPullParserException.getMessage();
          this.error = ((String)localObject1);
          continue;
          localXmlPullParserException.addProperty("listName", SPServer.this.selectedList.idList);
          localObject1 = new SoapObject("", "updates");
          localObject4 = new SoapObject("", "Batch");
          ((SoapObject)localObject4).addAttribute("OnError", "Continue");
          ((SoapObject)localObject4).addAttribute("ListVersion", "1");
          localObject5 = new SoapObject("", "Method");
          ((SoapObject)localObject5).addAttribute("ID", "1");
          ((SoapObject)localObject5).addAttribute("Cmd", SPServer.this.UpdateCommand);
          localObject6 = SPServer.this.selectedListItem.userData.keySet().iterator();
          while (((Iterator)localObject6).hasNext())
          {
            String str = (String)((Iterator)localObject6).next();
            Object localObject7 = (String)SPServer.this.selectedListItem.userData.get(str);
            if (!StringUtil.isEmpty((String)localObject7))
            {
              localObject7 = new SoapPrimitive("", "Field", (String)localObject7);
              ((SoapPrimitive)localObject7).addAttribute("Name", str.replace("ows_", ""));
              ((SoapObject)localObject5).addProperty(((SoapPrimitive)localObject7).getName(), localObject7);
            }
          }
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          SoapSerializationEnvelope localSoapSerializationEnvelope;
          Object localObject4;
          Object localObject5;
          if ((localException != null) && (localException.getMessage() != null))
          {
            localObject1 = localException.getMessage();
            Log.e("SPAsyncRequester", (String)localObject1);
            if (localException == null) {
              break label2386;
            }
          }
          label1747:
          label2331:
          label2345:
          label2359:
          label2373:
          label2386:
          for (Object localObject1 = localException.getMessage();; localObject1 = "")
          {
            this.error = ((String)localObject1);
            break label175;
            ((SoapObject)localObject4).addSoapObject((SoapObject)localObject5);
            ((SoapObject)localObject1).addSoapObject((SoapObject)localObject4);
            localException.addSoapObject((SoapObject)localObject1);
            break label849;
            if (this.METHOD_NAME.equals("GetItem"))
            {
              localObject1 = new SoapPrimitive("", "Url", SPServer.this.urlItem);
              localException.addProperty(((SoapPrimitive)localObject1).getName(), localObject1);
              break label849;
            }
            if (!this.METHOD_NAME.equals("CopyIntoItems")) {
              break label849;
            }
            localObject1 = new SoapPrimitive("", "SourceUrl", "SharePoint Client");
            localException.addProperty(((SoapPrimitive)localObject1).getName(), localObject1);
            localObject1 = new SoapObject("", "DestinationUrls");
            localObject4 = new SoapPrimitive("", "string", SPServer.this.destinationURL);
            ((SoapObject)localObject1).addProperty(((SoapPrimitive)localObject4).getName(), localObject4);
            localException.addSoapObject((SoapObject)localObject1);
            localException.addSoapObject(new SoapObject("", "Fields"));
            localObject1 = new SoapPrimitive("", "Stream", Base64.encodeToString(getData(), 0));
            localException.addProperty(((SoapPrimitive)localObject1).getName(), localObject1);
            break label849;
            throw new Exception("401 - UNAUTHORIZED");
            localObject1 = Base64.encodeToString((SPServer.server.credentials.getUsername() + ":" + SPServer.server.credentials.getPassword()).getBytes(), 2);
            localObject1 = new HeaderProperty("Authorization", "Basic " + (String)localObject1);
            break label931;
            localObject3 = localObject4;
            if (!(localSoapSerializationEnvelope.getResponse() instanceof SoapObject)) {
              break label984;
            }
            localObject1 = (SoapObject)localSoapSerializationEnvelope.getResponse();
            localObject3 = localObject4;
            break label984;
            if (this.METHOD_NAME.equals("GetListAndView"))
            {
              localObject3 = new ArrayList();
              if (!((SoapObject)localObject1).hasProperty("ListAndView")) {
                break label2399;
              }
              localObject3 = (SoapObject)((SoapObject)localObject1).getProperty("ListAndView");
              localObject1 = localObject3;
              if (localObject3 != null)
              {
                localObject1 = localObject3;
                if (((SoapObject)localObject3).hasProperty("List"))
                {
                  localObject3 = (SoapObject)((SoapObject)localObject3).getProperty("List");
                  localObject1 = localObject3;
                  if (localObject3 != null)
                  {
                    localObject1 = localObject3;
                    if (((SoapObject)localObject3).hasProperty("Fields")) {
                      localObject1 = (SoapObject)((SoapObject)localObject3).getProperty("Fields");
                    }
                  }
                }
              }
              localObject3 = SPSOAPParser.parseListAndViewResult((SoapObject)localObject1);
              break label2399;
            }
            if (this.METHOD_NAME.equals("GetListItems"))
            {
              localObject3 = new ArrayList();
              if (!((SoapObject)localObject1).hasProperty("listitems")) {
                break label2401;
              }
              localObject3 = (SoapObject)((SoapObject)localObject1).getProperty("listitems");
              localObject1 = localObject3;
              if (localObject3 != null)
              {
                localObject1 = localObject3;
                if (((SoapObject)localObject3).getPropertyCount() > 0)
                {
                  localObject1 = localObject3;
                  if ((((SoapObject)localObject3).getProperty(0) instanceof SoapObject)) {
                    localObject1 = (SoapObject)((SoapObject)localObject3).getProperty(0);
                  }
                }
              }
              localObject3 = SPSOAPParser.parseListItemsResult((SoapObject)localObject1);
              break label2401;
            }
            if (this.METHOD_NAME.equals("GetWebCollection"))
            {
              localObject3 = new ArrayList();
              if (((SoapObject)localObject1).getPropertyCount() <= 0) {
                break label2403;
              }
              localObject3 = SPSOAPParser.parseWebCollectionResult((SoapObject)((SoapObject)localObject1).getProperty(0));
              break label2403;
            }
            if (this.METHOD_NAME.equals("UpdateListItems"))
            {
              localObject4 = new ArrayList();
              localObject3 = localObject4;
              if (!((SoapObject)localObject1).hasProperty("Results")) {
                return localObject3;
              }
              localObject1 = (SoapObject)((SoapObject)localObject1).getProperty("Results");
              localObject3 = localObject4;
              if (!((SoapObject)localObject1).hasProperty("Result")) {
                return localObject3;
              }
              localObject1 = (SoapObject)((SoapObject)localObject1).getProperty("Result");
              if (((SoapObject)localObject1).hasProperty("ErrorText"))
              {
                this.error = ((SoapPrimitive)((SoapObject)localObject1).getProperty("ErrorText")).toString();
                return localObject4;
              }
              localObject3 = localObject4;
              if (!((SoapObject)localObject1).hasProperty("row")) {
                return localObject3;
              }
              return SPSOAPParser.parseListItemsResult((SoapObject)((SoapObject)localObject1).getProperty("row"));
            }
            if (this.METHOD_NAME.equals("GetItem"))
            {
              if (((Vector)localObject3).size() == 3)
              {
                localObject1 = ((Vector)localObject3).get(2);
                if ((localObject1 instanceof SoapPrimitive))
                {
                  localObject1 = ((SoapPrimitive)localObject1).toString();
                  localObject3 = new ArrayList();
                  ((ArrayList)localObject3).add(localObject1);
                  return localObject3;
                }
                this.error = "Failed to get an item.";
                break label175;
              }
              this.error = "Failed to get an item.";
              break label175;
            }
            if (!this.METHOD_NAME.equals("CopyIntoItems")) {
              break label175;
            }
            if (((Vector)localObject3).size() == 2)
            {
              localObject1 = ((Vector)localObject3).get(1);
              if ((localObject1 instanceof SoapObject))
              {
                localObject3 = (SoapObject)((SoapObject)localObject1).getProperty("CopyResult");
                localObject1 = (String)((SoapObject)localObject3).getAttribute("ErrorCode");
                if ((localObject1 == null) || (!((String)localObject1).equalsIgnoreCase("success"))) {
                  throw new Exception((String)localObject1);
                }
                localObject3 = (String)((SoapObject)localObject3).getAttribute("DestinationUrl");
                localObject4 = new ArrayList();
                ((ArrayList)localObject4).add(localObject1);
                ((ArrayList)localObject4).add(localObject3);
                return localObject4;
              }
              this.error = "Failed to upload an item.";
              break label175;
            }
            this.error = "Failed to upload an item.";
            break label175;
            localObject1 = "SoapFault";
            break;
            localObject1 = "SoapFault";
            break label170;
            localObject1 = "Error timeout";
            break label325;
            localObject1 = "Error timeout";
            break label350;
            localObject1 = "IOException";
            break label1042;
            localObject1 = "IOException";
            break label1058;
            localObject1 = "XmlPullParserException";
            break label1133;
            localObject1 = "XmlPullParserException";
            break label1149;
            localObject1 = "";
            break label1396;
          }
          label2392:
          localObject1 = "FileLeafRef";
        }
        label2399:
        return localObject3;
      }
      label2401:
      return localObject3;
      label2403:
      return localObject3;
      return localObject3;
    }
    
    public void setData(byte[] paramArrayOfByte)
    {
      this.data = paramArrayOfByte;
    }
    
    public void stopHttpTransport()
    {
      if (this.androidHttpTransport != null)
      {
        this.androidHttpTransport.reset();
        this.androidHttpTransport = null;
      }
    }
  }
}
