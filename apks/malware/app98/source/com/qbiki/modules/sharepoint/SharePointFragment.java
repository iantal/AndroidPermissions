package com.qbiki.modules.sharepoint;

import android.app.Activity;
import android.content.Intent;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptAuthListener;
import com.qbiki.util.IntentUtil;
import com.qbiki.util.StringUtil;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.apache.commons.codec.binary.Base64;

public class SharePointFragment
  extends SCFragment
{
  public static final int kVIEW_MODE_PHONE = 1;
  public static final int kVIEW_MODE_TABLET = 2;
  private SPFileDetailView fileDetail = null;
  private boolean isUpdatedData = false;
  private SPItemEditorView itemEditor = null;
  private SPListItem listItemSelected = null;
  private SPList listSelected = null;
  private ListView mListView;
  private View mLoadingView;
  private View mNoItemsView;
  private Resources mResources;
  private SPResponseListener responseListener = null;
  private String tag = "SharePointFragment";
  private int viewMode = 1;
  private SPWeb webSelected = null;
  
  public SharePointFragment() {}
  
  private void authorization(String paramString1, String paramString2)
  {
    new AuthorizationRequest(null).execute(new String[] { paramString1, paramString2 });
  }
  
  private void getData()
  {
    this.mNoItemsView.setVisibility(8);
    this.responseListener = new SPResponseListener()
    {
      public void onResponseError(String paramAnonymousString)
      {
        SharePointFragment.this.mLoadingView.setVisibility(8);
        if (paramAnonymousString.equals("401 - UNAUTHORIZED"))
        {
          SharePointFragment.this.authorization("", "");
          return;
        }
        DialogUtil.showAlert(SharePointFragment.this.getActivity(), SharePointFragment.this.mResources.getString(2131361915), paramAnonymousString);
      }
      
      public void onResponseReceived(ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
      {
        SharePointFragment.this.mLoadingView.setVisibility(8);
        if ((paramAnonymousArrayList != null) && (paramAnonymousArrayList.size() > 0))
        {
          paramAnonymousString = SPServer.getInstance();
          if ((paramAnonymousString.credentials.getDatatype().equalsIgnoreCase("item")) && (!StringUtil.isEmpty(paramAnonymousString.credentials.getItemid())))
          {
            SharePointFragment.this.mListView.setVisibility(0);
            SharePointFragment.access$202(SharePointFragment.this, (SPListItem)paramAnonymousArrayList.get(0));
            SharePointFragment.this.refreshData();
          }
        }
        for (;;)
        {
          SharePointFragment.this.invalidateOptionsMenu();
          return;
          if ((paramAnonymousString.credentials.getDatatype().equalsIgnoreCase("file")) && (!StringUtil.isEmpty(paramAnonymousString.credentials.getItemid())))
          {
            SharePointFragment.access$202(SharePointFragment.this, (SPListItem)paramAnonymousArrayList.get(0));
            try
            {
              paramAnonymousArrayList = new URI(paramAnonymousString.credentials.getURL().getScheme() + "://" + paramAnonymousString.credentials.getURL().getHost() + "/" + SharePointFragment.this.listItemSelected.fileRef);
              SharePointFragment.this.fileDetail.refreshView(paramAnonymousArrayList);
            }
            catch (URISyntaxException paramAnonymousArrayList)
            {
              Log.e(SharePointFragment.this.tag, paramAnonymousArrayList.getMessage());
            }
          }
          else if ((paramAnonymousString.credentials.getDatatype().equalsIgnoreCase("edit")) && (!StringUtil.isEmpty(paramAnonymousString.credentials.getListid())) && (!StringUtil.isEmpty(paramAnonymousString.credentials.getItemid())))
          {
            SharePointFragment.access$202(SharePointFragment.this, (SPListItem)paramAnonymousArrayList.get(0));
            SharePointFragment.this.itemEditor.refreshEditor(SharePointFragment.this.listSelected, SharePointFragment.this.listItemSelected, SharePointFragment.this.listSelected.fieldsOfList);
          }
          else
          {
            SharePointFragment.this.displayItemsInTable(paramAnonymousArrayList);
            continue;
            DialogUtil.showAlert(SharePointFragment.this.getActivity(), "", SharePointFragment.this.mResources.getString(2131362356));
          }
        }
      }
      
      public void onResponseTimeout()
      {
        SharePointFragment.this.mLoadingView.setVisibility(8);
        DialogUtil.showAlert(SharePointFragment.this.getActivity(), "", SharePointFragment.this.mResources.getString(2131362355));
      }
    };
    SPServer localSPServer = SPServer.getInstance();
    if (localSPServer.credentials.getURL() != null) {
      if (((localSPServer.credentials.getDatatype().equalsIgnoreCase("edit")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("item")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("file")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("new"))) && (!StringUtil.isEmpty(localSPServer.credentials.getListid()))) {
        if (!localSPServer.credentials.getDatatype().equalsIgnoreCase("new")) {}
      }
    }
    while (this.listSelected == null)
    {
      do
      {
        this.mLoadingView.setVisibility(0);
        this.listSelected = new SPList(localSPServer.credentials.getListid());
        this.listSelected.isItem = true;
        refreshData();
        return;
      } while (!StringUtil.isEmpty(localSPServer.credentials.getItemid()));
      if (this.listSelected != null)
      {
        this.mLoadingView.setVisibility(0);
        refreshData();
        return;
      }
      if (((SPServer.getInstance().credentials.getDatatype().equals("list")) || (SPServer.getInstance().credentials.getDatatype().equals("file"))) && (!StringUtil.isEmpty(SPServer.getInstance().credentials.getListid()))) {
        localSPServer.getListCollectionResponse(new SPResponseListener()
        {
          public void onResponseError(String paramAnonymousString)
          {
            SharePointFragment.this.mLoadingView.setVisibility(8);
            if (paramAnonymousString.equals("401 - UNAUTHORIZED"))
            {
              SharePointFragment.this.authorization("", "");
              return;
            }
            DialogUtil.showAlert(SharePointFragment.this.getActivity(), SharePointFragment.this.getResources().getString(2131361915), paramAnonymousString);
          }
          
          public void onResponseReceived(ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
          {
            if (paramAnonymousArrayList.size() > 0)
            {
              paramAnonymousArrayList = paramAnonymousArrayList.get(0);
              if ((paramAnonymousArrayList instanceof SPList))
              {
                SharePointFragment.access$502(SharePointFragment.this, (SPList)paramAnonymousArrayList);
                SharePointFragment.this.refreshData();
              }
              return;
            }
            SharePointFragment.this.mLoadingView.setVisibility(8);
          }
          
          public void onResponseTimeout()
          {
            SharePointFragment.this.mLoadingView.setVisibility(8);
          }
        });
      }
      for (;;)
      {
        this.mLoadingView.setVisibility(0);
        return;
        localSPServer.getAllCollectionResponse(this.responseListener);
      }
    }
    localSPServer.getListItemsResponse(this.listSelected, this.responseListener);
    this.mLoadingView.setVisibility(0);
  }
  
  void displayItemFieldsInTable(final SPList paramSPList, SPListItem paramSPListItem)
  {
    this.mListView.setVisibility(0);
    this.mLoadingView.setVisibility(8);
    paramSPList = new SPListViewAdapter(getActivity(), SPField.removeHidenFields(paramSPList.fieldsOfList), paramSPList, paramSPListItem);
    this.mListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = paramSPList.onItemClickFromAdapter(paramAnonymousAdapterView, paramAnonymousView, paramAnonymousInt, paramAnonymousLong);
        if (paramAnonymousAdapterView != null)
        {
          if (!paramAnonymousAdapterView.getArguments().containsKey("scheme")) {
            break label76;
          }
          paramAnonymousAdapterView = paramAnonymousAdapterView.getArguments().getString("scheme");
          if (!App.processScheme(paramAnonymousAdapterView, SharePointFragment.this))
          {
            paramAnonymousAdapterView = new Intent("android.intent.action.VIEW", Uri.parse(paramAnonymousAdapterView));
            IntentUtil.startActivitySafe(SharePointFragment.this.getActivity(), paramAnonymousAdapterView);
          }
        }
        return;
        label76:
        App.showPage(paramAnonymousAdapterView, SharePointFragment.this);
      }
    });
    this.mListView.setAdapter(paramSPList);
  }
  
  void displayItemsInTable(final ArrayList<Object> paramArrayList)
  {
    if (getActivity() != null)
    {
      this.mListView.setVisibility(0);
      paramArrayList = new SPListViewAdapter(getActivity(), paramArrayList, getListSelected());
      this.mListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
      {
        public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
        {
          paramAnonymousAdapterView = paramArrayList.onItemClickFromAdapter(paramAnonymousAdapterView, paramAnonymousView, paramAnonymousInt, paramAnonymousLong);
          if (paramAnonymousAdapterView != null)
          {
            if (!paramAnonymousAdapterView.getArguments().containsKey("scheme")) {
              break label76;
            }
            paramAnonymousAdapterView = paramAnonymousAdapterView.getArguments().getString("scheme");
            if (!App.processScheme(paramAnonymousAdapterView, SharePointFragment.this))
            {
              paramAnonymousAdapterView = new Intent("android.intent.action.VIEW", Uri.parse(paramAnonymousAdapterView));
              IntentUtil.startActivitySafe(SharePointFragment.this.getActivity(), paramAnonymousAdapterView);
            }
          }
          return;
          label76:
          paramAnonymousAdapterView = App.getPageIntent(paramAnonymousAdapterView, SharePointFragment.this.getActivity());
          SharePointFragment.this.startActivityForResult(paramAnonymousAdapterView, 1);
        }
      });
      this.mListView.setAdapter(paramArrayList);
    }
  }
  
  public SPListItem getListItemSelected()
  {
    return this.listItemSelected;
  }
  
  public SPList getListSelected()
  {
    return this.listSelected;
  }
  
  public ListView getListView()
  {
    return this.mListView;
  }
  
  public SPWeb getWebSelected()
  {
    return this.webSelected;
  }
  
  protected void init() {}
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt2, paramInt2, paramIntent);
    getActivity();
    if ((paramInt2 == -1) && (paramIntent != null))
    {
      this.listSelected = ((SPList)paramIntent.getExtras().getParcelable("listSelected"));
      if (!paramIntent.getExtras().containsKey("isModeCreateNewItem")) {
        break label171;
      }
      if (paramIntent.getExtras().getBoolean("isModeCreateNewItem", false)) {
        break label147;
      }
      this.listItemSelected = ((SPListItem)paramIntent.getExtras().getParcelable("listItemSelected"));
      displayItemFieldsInTable(this.listSelected, this.listItemSelected);
    }
    for (;;)
    {
      this.isUpdatedData = true;
      Object localObject = SPServer.getInstance();
      if ((((SPServer)localObject).credentials.getDatatype().equalsIgnoreCase("edit")) || (((SPServer)localObject).credentials.getDatatype().equalsIgnoreCase("new"))) {
        this.itemEditor.onActivityResult(paramInt1, paramInt2, paramIntent);
      }
      return;
      label147:
      this.mListView.setVisibility(8);
      this.mLoadingView.setVisibility(0);
      refreshData();
      continue;
      label171:
      if ((paramIntent.getExtras().containsKey("isDeleted")) && (paramIntent.getExtras().getBoolean("isDeleted", false)))
      {
        localObject = new Intent();
        ((Intent)localObject).putExtra("listSelected", this.listSelected);
        FragmentActivity localFragmentActivity = getActivity();
        getActivity();
        localFragmentActivity.setResult(-1, (Intent)localObject);
        getActivity().finish();
      }
      else
      {
        this.mListView.setVisibility(8);
        this.mLoadingView.setVisibility(0);
        refreshData();
      }
    }
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mResources = paramActivity.getResources();
    super.onAttach(paramActivity);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558435, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    Bundle localBundle = getArguments();
    Object localObject1;
    if (localBundle != null)
    {
      if (localBundle.getParcelable("listSelected") != null) {
        setListSelected((SPList)localBundle.getParcelable("listSelected"));
      }
      if (localBundle.getParcelable("listItemSelected") != null) {
        setListItemSelected((SPListItem)localBundle.getParcelable("listItemSelected"));
      }
      if (localBundle.getSerializable("webSelected") != null)
      {
        setWebSelected((SPWeb)localBundle.getSerializable("webSelected"));
        SPServer.getInstance().credentials.setSubSite(getWebSelected().URL);
      }
      this.viewMode = localBundle.getInt("mode");
      localObject1 = localBundle.getString("password");
      if (StringUtil.isEmpty((String)localObject1))
      {
        localObject1 = "";
        int i = ((String)localObject1).indexOf("#$" + App.username + "$#");
        Object localObject2 = localObject1;
        if (i != -1) {
          localObject2 = new String(Base64.decodeBase64(new String(Base64.decodeBase64(((String)localObject1).substring(0, i).getBytes())).replace("#$~" + App.username, "").getBytes()));
        }
        if (!StringUtil.isEmpty((String)localObject2)) {
          SPServer.getInstance().credentials.setPassword((String)localObject2);
        }
        localObject1 = localBundle.getString("datatype");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.setDatatype((String)localObject1);
        }
        localObject1 = localBundle.getString("url");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.setURLAndDenyChange((String)localObject1);
        }
        localObject1 = localBundle.getString("username");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.setUsernameAndDenyChange((String)localObject1);
        }
        localObject1 = localBundle.getString("listid");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.setListid((String)localObject1);
        }
        localObject1 = localBundle.getString("itemid");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.setItemid((String)localObject1);
        }
        localObject1 = localBundle.getStringArray("arrservertemplatenumbers");
        if ((localObject1 != null) && (localObject1.length > 0)) {
          SPServer.getInstance().credentials.setServertemplatenumbers((String[])localObject1);
        }
        localObject1 = localBundle.getStringArray("arrhidefields");
        if ((localObject1 != null) && (localObject1.length > 0)) {
          SPServer.getInstance().credentials.setHideFields((String[])localObject1);
        }
        localObject1 = localBundle.getString("query");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.setQuery((String)localObject1);
        }
        localObject1 = (HashMap)localBundle.getSerializable("dicvaluesforfields");
        if ((localObject1 != null) && (((HashMap)localObject1).size() > 0)) {
          SPServer.getInstance().credentials.setValuesForFields(new Hashtable((Map)localObject1));
        }
        localObject1 = localBundle.getStringArray("denyActions");
        if ((localObject1 != null) && (localObject1.length > 0)) {
          SPServer.getInstance().credentials.setDenyActions((String[])localObject1);
        }
        localObject1 = localBundle.getString("uploadfolderurl");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.uploadFolderURL = ((String)localObject1);
        }
        localObject1 = localBundle.getString("viewLibraryMode");
        if (!StringUtil.isEmpty((String)localObject1)) {
          SPServer.getInstance().credentials.viewLibraryMode = ((String)localObject1);
        }
        boolean bool = localBundle.getBoolean("enablerememberdata");
        SPServer.getInstance().credentials.enableRememberDataInEditor = bool;
        localBundle.getBoolean("enablemasterdetailview");
        invalidateOptionsMenu();
      }
    }
    else
    {
      localObject1 = SPServer.getInstance();
      if ((!((SPServer)localObject1).credentials.getDatatype().equalsIgnoreCase("edit")) && (!((SPServer)localObject1).credentials.getDatatype().equalsIgnoreCase("new"))) {
        break label796;
      }
      this.itemEditor = new SPItemEditorView(this);
      paramLayoutInflater = this.itemEditor.createView(paramLayoutInflater, paramViewGroup, paramBundle);
    }
    for (;;)
    {
      this.mLoadingView = paramLayoutInflater.findViewById(2131099836);
      this.mNoItemsView = paramLayoutInflater.findViewById(16908292);
      this.mNoItemsView.setVisibility(8);
      this.mLoadingView.setVisibility(8);
      return paramLayoutInflater;
      localObject1 = new String(Base64.decodeBase64(((String)localObject1).getBytes()));
      break;
      label796:
      if ((((SPServer)localObject1).credentials.getDatatype().equalsIgnoreCase("file")) && (!StringUtil.isEmpty(((SPServer)localObject1).credentials.getItemid())))
      {
        this.fileDetail = new SPFileDetailView(getActivity());
        paramLayoutInflater = this.fileDetail.createView(paramLayoutInflater, paramViewGroup, paramBundle);
      }
      else
      {
        paramLayoutInflater = paramLayoutInflater.inflate(2130903215, paramViewGroup, false);
        this.mListView = ((ListView)paramLayoutInflater.findViewById(16908298));
        this.mListView.setVisibility(8);
      }
    }
  }
  
  public void onDestroy()
  {
    SPServer localSPServer = SPServer.getInstance();
    if ((localSPServer.credentials.getDatatype().equalsIgnoreCase("edit")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("new"))) {
      this.itemEditor.onDestroy();
    }
    super.onDestroy();
  }
  
  public void onHiddenChanged(boolean paramBoolean)
  {
    super.onHiddenChanged(paramBoolean);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    boolean bool = true;
    Bundle localBundle = new Bundle();
    switch (paramMenuItem.getItemId())
    {
    default: 
      bool = super.onOptionsItemSelected(paramMenuItem);
    }
    do
    {
      do
      {
        return bool;
        localBundle.putParcelable("listSelected", this.listSelected);
        localBundle.putParcelable("listItemSelected", this.listItemSelected);
        paramMenuItem = new FragmentInfo(SPItemEditorFragment.class.getName(), localBundle);
      } while (paramMenuItem == null);
      startActivityForResult(App.getPageIntent(paramMenuItem, getActivity()), 1);
      return true;
      localBundle.putParcelable("listSelected", this.listSelected);
      paramMenuItem = new FragmentInfo(SPItemEditorFragment.class.getName(), localBundle);
    } while (paramMenuItem == null);
    startActivityForResult(App.getPageIntent(paramMenuItem, getActivity()), 1);
    return true;
  }
  
  public void onPause()
  {
    super.onPause();
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    MenuItem localMenuItem1 = paramMenu.findItem(2131100325);
    MenuItem localMenuItem2 = paramMenu.findItem(2131100326);
    SPServer localSPServer = SPServer.getInstance();
    if ((this.listItemSelected != null) && (this.listSelected != null) && (this.listSelected.fieldsOfList != null) && (!localSPServer.credentials.getDatatype().equalsIgnoreCase("edit")) && (!localSPServer.credentials.getDatatype().equalsIgnoreCase("new")))
    {
      localMenuItem1.setVisible(true);
      localMenuItem1.setEnabled(true);
      if ((this.listItemSelected != null) || (this.listSelected == null) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("edit")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("file")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("new")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("item"))) {
        break label216;
      }
      localMenuItem2.setVisible(true);
      localMenuItem2.setEnabled(true);
    }
    for (;;)
    {
      super.onPrepareOptionsMenu(paramMenu);
      return;
      localMenuItem1.setVisible(false);
      localMenuItem1.setEnabled(false);
      break;
      label216:
      localMenuItem2.setVisible(false);
      localMenuItem2.setEnabled(false);
    }
  }
  
  public void onResume()
  {
    if (this.isUpdatedData)
    {
      if ((this.listSelected != null) && (this.listItemSelected != null) && (this.itemEditor == null))
      {
        Intent localIntent = new Intent();
        localIntent.putExtra("listSelected", this.listSelected);
        FragmentActivity localFragmentActivity = getActivity();
        getActivity();
        localFragmentActivity.setResult(-1, localIntent);
      }
      this.isUpdatedData = false;
    }
    super.onResume();
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    super.onViewCreated(paramView, paramBundle);
    getData();
  }
  
  public void refreshData()
  {
    final SPServer localSPServer = SPServer.getInstance();
    if (this.listSelected != null)
    {
      if (this.listItemSelected != null) {
        break label59;
      }
      if (this.listSelected.fieldsOfList == null) {
        localSPServer.getFieldsResponse(this.listSelected, new SPResponseListener()
        {
          public void onResponseError(String paramAnonymousString)
          {
            if (paramAnonymousString.equals("401 - UNAUTHORIZED")) {
              SharePointFragment.this.authorization("", "");
            }
            SharePointFragment.this.mLoadingView.setVisibility(8);
          }
          
          public void onResponseReceived(ArrayList<Object> paramAnonymousArrayList, String paramAnonymousString)
          {
            paramAnonymousString = paramAnonymousArrayList.get(0);
            if ((paramAnonymousString instanceof ArrayList))
            {
              SharePointFragment.this.listSelected.lookUpFieldsIndexes = ((ArrayList)paramAnonymousString);
              paramAnonymousArrayList.remove(0);
            }
            SharePointFragment.this.listSelected.fieldsOfList = paramAnonymousArrayList;
            if (((localSPServer.credentials.getDatatype().equalsIgnoreCase("item")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("edit")) || (localSPServer.credentials.getDatatype().equalsIgnoreCase("file"))) && (!StringUtil.isEmpty(localSPServer.credentials.getItemid())))
            {
              SharePointFragment.access$202(SharePointFragment.this, new SPListItem(Integer.valueOf(Integer.parseInt(localSPServer.credentials.getItemid()))));
              localSPServer.getItemResponse(SharePointFragment.this.listSelected, SharePointFragment.this.listItemSelected, SharePointFragment.this.responseListener);
              return;
            }
            if ((localSPServer.credentials.getDatatype().equalsIgnoreCase("new")) && (!StringUtil.isEmpty(localSPServer.credentials.getListid())))
            {
              SharePointFragment.this.mLoadingView.setVisibility(8);
              SharePointFragment.this.itemEditor.refreshEditor(SharePointFragment.this.listSelected, null, SharePointFragment.this.listSelected.fieldsOfList);
              return;
            }
            localSPServer.getListItemsResponseWithFields(SharePointFragment.this.listSelected, SharePointFragment.this.responseListener);
          }
          
          public void onResponseTimeout()
          {
            SharePointFragment.this.mLoadingView.setVisibility(8);
          }
        });
      }
    }
    else
    {
      return;
    }
    localSPServer.getListItemsResponse(this.listSelected, this.responseListener);
    return;
    label59:
    if ((this.listSelected.itemCount != 0) && (this.listItemSelected.type.equals("1")))
    {
      localSPServer.getListItemsResponseWithFolder(this.listSelected, this.listItemSelected.fileRef, this.responseListener);
      return;
    }
    displayItemFieldsInTable(this.listSelected, this.listItemSelected);
  }
  
  public void setListItemSelected(SPListItem paramSPListItem)
  {
    this.listItemSelected = paramSPListItem;
  }
  
  public void setListSelected(SPList paramSPList)
  {
    this.listSelected = paramSPList;
  }
  
  public void setWebSelected(SPWeb paramSPWeb)
  {
    this.webSelected = paramSPWeb;
  }
  
  private class AuthorizationRequest
    extends AsyncTask<String, Void, String>
  {
    private AuthorizationRequest() {}
    
    /* Error */
    protected String doInBackground(String... paramVarArgs)
    {
      // Byte code:
      //   0: aload_1
      //   1: ifnull +248 -> 249
      //   4: aload_1
      //   5: arraylength
      //   6: istore_2
      //   7: iload_2
      //   8: iconst_2
      //   9: if_icmplt +240 -> 249
      //   12: aload_1
      //   13: iconst_0
      //   14: aaload
      //   15: astore_3
      //   16: aload_1
      //   17: iconst_1
      //   18: aaload
      //   19: astore_1
      //   20: aload_3
      //   21: invokestatic 42	com/qbiki/util/StringUtil:isEmpty	(Ljava/lang/String;)Z
      //   24: ifne +246 -> 270
      //   27: aload_1
      //   28: invokestatic 42	com/qbiki/util/StringUtil:isEmpty	(Ljava/lang/String;)Z
      //   31: ifeq +6 -> 37
      //   34: goto +236 -> 270
      //   37: new 44	java/lang/StringBuilder
      //   40: dup
      //   41: invokespecial 45	java/lang/StringBuilder:<init>	()V
      //   44: aload_3
      //   45: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   48: ldc 51
      //   50: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   53: aload_1
      //   54: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   57: invokevirtual 55	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   60: invokevirtual 61	java/lang/String:getBytes	()[B
      //   63: iconst_2
      //   64: invokestatic 67	android/util/Base64:encodeToString	([BI)Ljava/lang/String;
      //   67: astore_1
      //   68: new 69	java/util/HashMap
      //   71: dup
      //   72: invokespecial 70	java/util/HashMap:<init>	()V
      //   75: astore 4
      //   77: aload 4
      //   79: ldc 72
      //   81: new 44	java/lang/StringBuilder
      //   84: dup
      //   85: invokespecial 45	java/lang/StringBuilder:<init>	()V
      //   88: ldc 74
      //   90: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   93: aload_1
      //   94: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   97: invokevirtual 55	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   100: invokevirtual 78	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      //   103: pop
      //   104: invokestatic 84	com/qbiki/modules/sharepoint/SPServer:getInstance	()Lcom/qbiki/modules/sharepoint/SPServer;
      //   107: getfield 88	com/qbiki/modules/sharepoint/SPServer:credentials	Lcom/qbiki/modules/sharepoint/SPServerCredentials;
      //   110: invokevirtual 94	com/qbiki/modules/sharepoint/SPServerCredentials:getURL	()Ljava/net/URI;
      //   113: astore 5
      //   115: aload 5
      //   117: invokevirtual 97	java/net/URI:toString	()Ljava/lang/String;
      //   120: astore_3
      //   121: aload_3
      //   122: astore_1
      //   123: aload 5
      //   125: invokevirtual 100	java/net/URI:getPath	()Ljava/lang/String;
      //   128: ifnull +58 -> 186
      //   131: aload_3
      //   132: astore_1
      //   133: aload 5
      //   135: invokevirtual 100	java/net/URI:getPath	()Ljava/lang/String;
      //   138: ldc 102
      //   140: invokevirtual 106	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
      //   143: ifne +43 -> 186
      //   146: new 44	java/lang/StringBuilder
      //   149: dup
      //   150: invokespecial 45	java/lang/StringBuilder:<init>	()V
      //   153: aload_3
      //   154: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   157: astore 5
      //   159: aload_3
      //   160: ldc 108
      //   162: invokevirtual 111	java/lang/String:endsWith	(Ljava/lang/String;)Z
      //   165: ifeq +29 -> 194
      //   168: ldc 113
      //   170: astore_1
      //   171: aload 5
      //   173: aload_1
      //   174: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   177: ldc 115
      //   179: invokevirtual 49	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   182: invokevirtual 55	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   185: astore_1
      //   186: aload_1
      //   187: aload 4
      //   189: iconst_1
      //   190: invokestatic 121	com/qbiki/util/HTTPUtil:performGetRequest	(Ljava/lang/String;Ljava/util/HashMap;Z)Ljava/lang/String;
      //   193: areturn
      //   194: ldc 108
      //   196: astore_1
      //   197: goto -26 -> 171
      //   200: astore_1
      //   201: aload_1
      //   202: invokevirtual 124	java/io/IOException:getMessage	()Ljava/lang/String;
      //   205: ldc 126
      //   207: invokevirtual 130	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   210: ifeq +6 -> 216
      //   213: ldc 126
      //   215: areturn
      //   216: aload_0
      //   217: getfield 16	com/qbiki/modules/sharepoint/SharePointFragment$AuthorizationRequest:this$0	Lcom/qbiki/modules/sharepoint/SharePointFragment;
      //   220: invokestatic 134	com/qbiki/modules/sharepoint/SharePointFragment:access$400	(Lcom/qbiki/modules/sharepoint/SharePointFragment;)Ljava/lang/String;
      //   223: aload_1
      //   224: invokevirtual 124	java/io/IOException:getMessage	()Ljava/lang/String;
      //   227: invokestatic 140	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   230: pop
      //   231: aconst_null
      //   232: areturn
      //   233: astore_1
      //   234: aload_0
      //   235: getfield 16	com/qbiki/modules/sharepoint/SharePointFragment$AuthorizationRequest:this$0	Lcom/qbiki/modules/sharepoint/SharePointFragment;
      //   238: invokestatic 134	com/qbiki/modules/sharepoint/SharePointFragment:access$400	(Lcom/qbiki/modules/sharepoint/SharePointFragment;)Ljava/lang/String;
      //   241: aload_1
      //   242: invokevirtual 141	java/lang/IllegalArgumentException:getMessage	()Ljava/lang/String;
      //   245: invokestatic 140	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   248: pop
      //   249: aconst_null
      //   250: areturn
      //   251: astore_1
      //   252: aload_0
      //   253: getfield 16	com/qbiki/modules/sharepoint/SharePointFragment$AuthorizationRequest:this$0	Lcom/qbiki/modules/sharepoint/SharePointFragment;
      //   256: invokestatic 134	com/qbiki/modules/sharepoint/SharePointFragment:access$400	(Lcom/qbiki/modules/sharepoint/SharePointFragment;)Ljava/lang/String;
      //   259: aload_1
      //   260: invokevirtual 142	java/lang/IllegalStateException:getMessage	()Ljava/lang/String;
      //   263: invokestatic 140	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   266: pop
      //   267: goto -18 -> 249
      //   270: ldc 126
      //   272: areturn
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	273	0	this	AuthorizationRequest
      //   0	273	1	paramVarArgs	String[]
      //   6	4	2	i	int
      //   15	145	3	str	String
      //   75	113	4	localHashMap	HashMap
      //   113	59	5	localObject	Object
      // Exception table:
      //   from	to	target	type
      //   20	34	200	java/io/IOException
      //   37	121	200	java/io/IOException
      //   123	131	200	java/io/IOException
      //   133	168	200	java/io/IOException
      //   171	186	200	java/io/IOException
      //   186	194	200	java/io/IOException
      //   4	7	233	java/lang/IllegalArgumentException
      //   20	34	233	java/lang/IllegalArgumentException
      //   37	121	233	java/lang/IllegalArgumentException
      //   123	131	233	java/lang/IllegalArgumentException
      //   133	168	233	java/lang/IllegalArgumentException
      //   171	186	233	java/lang/IllegalArgumentException
      //   186	194	233	java/lang/IllegalArgumentException
      //   201	213	233	java/lang/IllegalArgumentException
      //   216	231	233	java/lang/IllegalArgumentException
      //   4	7	251	java/lang/IllegalStateException
      //   20	34	251	java/lang/IllegalStateException
      //   37	121	251	java/lang/IllegalStateException
      //   123	131	251	java/lang/IllegalStateException
      //   133	168	251	java/lang/IllegalStateException
      //   171	186	251	java/lang/IllegalStateException
      //   186	194	251	java/lang/IllegalStateException
      //   201	213	251	java/lang/IllegalStateException
      //   216	231	251	java/lang/IllegalStateException
    }
    
    protected void onPostExecute(String paramString)
    {
      if (!StringUtil.isEmpty(paramString))
      {
        if (paramString.equals("401 - UNAUTHORIZED"))
        {
          SharePointFragment.this.invalidateOptionsMenu();
          SharePointFragment.this.mNoItemsView.setVisibility(8);
          SharePointFragment.this.mLoadingView.setVisibility(8);
          try
          {
            DialogUtil.showPromptAuth(SharePointFragment.this.getActivity(), SharePointFragment.this.getResources().getString(2131361915), SharePointFragment.this.mResources.getString(2131362357) + " " + SPServer.getInstance().credentials.getURL().getHost(), true, SharePointFragment.this.getResources().getString(2131361920), new DialogUtil.PromptAuthListener()
            {
              public void onCancel()
              {
                SharePointFragment.this.mNoItemsView.setVisibility(0);
                SharePointFragment.this.mLoadingView.setVisibility(8);
              }
              
              public void onStringInputAuth(String paramAnonymousString1, String paramAnonymousString2)
              {
                SharePointFragment.this.mNoItemsView.setVisibility(8);
                SharePointFragment.this.mLoadingView.setVisibility(0);
                SharePointFragment.this.authorization(paramAnonymousString1, paramAnonymousString2);
              }
            });
            return;
          }
          catch (Resources.NotFoundException paramString)
          {
            Log.e(SharePointFragment.this.tag, paramString.getMessage());
            return;
          }
        }
        SharePointFragment.this.getData();
        return;
      }
      DialogUtil.showAlert(SharePointFragment.this.getActivity(), 2131361915, SharePointFragment.this.mResources.getString(2131362358));
    }
  }
}
