package com.qbiki.modules.sharepoint;

import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.util.Log;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class SPField
  implements Parcelable
{
  public static final Parcelable.Creator<SPField> CREATOR = new Parcelable.Creator()
  {
    public SPField createFromParcel(Parcel paramAnonymousParcel)
    {
      return new SPField(paramAnonymousParcel, null);
    }
    
    public SPField[] newArray(int paramAnonymousInt)
    {
      return new SPField[paramAnonymousInt];
    }
  };
  private static final long serialVersionUID = 4966835088075822773L;
  public String ID;
  public String choiceDefault;
  public ArrayList<String> choices;
  public ArrayList<SPListItem> choicesForLookup;
  public String displayName;
  public String format;
  public boolean hidden;
  public String lookupListID;
  public String lookupShowFieldOfList;
  public HashMap<Object, Object> mappings;
  public String name;
  public boolean readOnly;
  public boolean required;
  public boolean richText;
  public String type;
  
  public SPField()
  {
    this.choices = new ArrayList();
    this.mappings = new HashMap();
    this.choicesForLookup = new ArrayList();
  }
  
  private SPField(Parcel paramParcel)
  {
    this.ID = paramParcel.readString();
    if (this.ID == null) {
      this.ID = "";
    }
    this.name = paramParcel.readString();
    if (this.name == null) {
      this.name = "";
    }
    this.displayName = paramParcel.readString();
    if (this.displayName == null) {
      this.displayName = "";
    }
    this.type = paramParcel.readString();
    if (this.type == null) {
      this.type = "";
    }
    this.choiceDefault = paramParcel.readString();
    if (this.choiceDefault == null) {
      this.choiceDefault = "";
    }
    this.lookupListID = paramParcel.readString();
    if (this.lookupListID == null) {
      this.lookupListID = "";
    }
    this.format = paramParcel.readString();
    if (this.format == null) {
      this.format = "";
    }
    this.lookupShowFieldOfList = paramParcel.readString();
    if (this.lookupShowFieldOfList == null) {
      this.lookupShowFieldOfList = "";
    }
    this.choices = paramParcel.readArrayList(String.class.getClassLoader());
    if (this.choices == null) {
      this.choices = new ArrayList();
    }
    this.choicesForLookup = paramParcel.readArrayList(SPListItem.class.getClassLoader());
    if (this.choicesForLookup == null) {
      this.choicesForLookup = new ArrayList();
    }
    this.mappings = ((HashMap)paramParcel.readSerializable());
    if (this.mappings == null) {
      this.mappings = new HashMap();
    }
    if (paramParcel.readInt() == 1)
    {
      bool1 = true;
      this.hidden = bool1;
      if (paramParcel.readInt() != 1) {
        break label331;
      }
      bool1 = true;
      label290:
      this.readOnly = bool1;
      if (paramParcel.readInt() != 1) {
        break label336;
      }
      bool1 = true;
      label305:
      this.required = bool1;
      if (paramParcel.readInt() != 1) {
        break label341;
      }
    }
    label331:
    label336:
    label341:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      this.richText = bool1;
      return;
      bool1 = false;
      break;
      bool1 = false;
      break label290;
      bool1 = false;
      break label305;
    }
  }
  
  public SPField(String paramString)
  {
    this();
    this.name = paramString;
  }
  
  public static ArrayList<Object> removeHidenFields(ArrayList<Object> paramArrayList)
  {
    Object localObject2 = SPServer.getInstance().credentials.getHideFields();
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = new String[0];
    }
    localObject1 = Arrays.asList((Object[])localObject1);
    localObject2 = new SPListItem();
    ArrayList localArrayList = new ArrayList();
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      Object localObject3 = paramArrayList.next();
      if ((localObject3 instanceof SPField))
      {
        localObject3 = (SPField)localObject3;
        if ((!((List)localObject1).contains(((SPField)localObject3).name)) && (!Arrays.asList(((SPListItem)localObject2).arrHiddenFields).contains(((SPField)localObject3).name))) {
          localArrayList.add(localObject3);
        }
      }
      else
      {
        Log.e("LOG", "STRINGGG");
      }
    }
    return localArrayList;
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    int i = 1;
    paramParcel.writeString(this.ID);
    paramParcel.writeString(this.name);
    paramParcel.writeString(this.displayName);
    paramParcel.writeString(this.type);
    paramParcel.writeString(this.choiceDefault);
    paramParcel.writeString(this.lookupListID);
    paramParcel.writeString(this.format);
    paramParcel.writeString(this.lookupShowFieldOfList);
    paramParcel.writeList(this.choices);
    paramParcel.writeList(this.choicesForLookup);
    paramParcel.writeSerializable(this.mappings);
    if (this.hidden)
    {
      paramInt = 1;
      paramParcel.writeInt(paramInt);
      if (!this.readOnly) {
        break label152;
      }
      paramInt = 1;
      label113:
      paramParcel.writeInt(paramInt);
      if (!this.required) {
        break label157;
      }
      paramInt = 1;
      label127:
      paramParcel.writeInt(paramInt);
      if (!this.richText) {
        break label162;
      }
    }
    label152:
    label157:
    label162:
    for (paramInt = i;; paramInt = 0)
    {
      paramParcel.writeInt(paramInt);
      return;
      paramInt = 0;
      break;
      paramInt = 0;
      break label113;
      paramInt = 0;
      break label127;
    }
  }
}
