package com.qbiki.modules.puzzle;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.ads.AdManager;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StyleUtil;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class SCPuzzleGameFragment
  extends SCFragment
{
  public static final String LEVELS_KEY = "LEVELS_KEY";
  private static final int maximumAllowedRows = 15;
  private View fragmentView = null;
  private String imageName = "";
  private boolean inGame = false;
  private boolean isTablet = false;
  final ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener()
  {
    public void onGlobalLayout()
    {
      SCPuzzleGameFragment.this.createPuzzlePiecesIfNeeded();
    }
  };
  private List<HashMap<String, String>> levels = new ArrayList();
  private String[] levelsTitleStrings = null;
  private AdManager mAdManager;
  private MSize mContainerSize = new MSize(0, 0);
  private String mPageID = null;
  private String mWinningPage = null;
  private int max = 0;
  private int pieceSize = 100;
  private Button previewButton;
  private boolean previewing = false;
  private RelativeLayout puzzleContainer;
  private Bitmap puzzleImage = null;
  private ArrayList<PuzzlePiece> puzzlePieces = new ArrayList();
  private boolean puzzlePiecesCreated = false;
  private int puzzleRows = 4;
  private int puzzles = 0;
  private Button randomizeButton;
  private TextView rotateToPortraitTextView = null;
  private boolean shouldChooseLevel = false;
  private Bundle style;
  
  public SCPuzzleGameFragment() {}
  
  private void addLayoutListener()
  {
    ViewTreeObserver localViewTreeObserver = this.puzzleContainer.getViewTreeObserver();
    if (localViewTreeObserver != null) {
      localViewTreeObserver.addOnGlobalLayoutListener(this.layoutListener);
    }
  }
  
  private void arrangePuzzlePieces()
  {
    if (!this.puzzlePiecesCreated) {}
    do
    {
      do
      {
        do
        {
          return;
          i = getActivity().getResources().getConfiguration().orientation;
        } while ((!this.isTablet) && (i != 1));
        i = Math.min(this.puzzleContainer.getWidth(), this.puzzleContainer.getHeight());
        j = i / this.puzzleRows;
      } while (j == 0);
      localObject1 = new MSize(this.puzzleContainer.getWidth(), this.puzzleContainer.getHeight());
      this.max = (i / j);
      this.puzzles = (this.max * this.max);
    } while ((this.puzzlePieces.size() != this.puzzles) || (this.mContainerSize.Equals((MSize)localObject1)));
    this.mContainerSize = ((MSize)localObject1);
    this.pieceSize = j;
    int i = this.mContainerSize.getHeight();
    int i1 = (this.mContainerSize.getWidth() - this.max * this.pieceSize) / 2;
    i = (i - this.max * this.pieceSize) / 2;
    int k = 0;
    Object localObject1 = new ArrayList();
    Object localObject2 = this.puzzlePieces.iterator();
    while (((Iterator)localObject2).hasNext()) {
      ((ArrayList)localObject1).add(Integer.valueOf(((PuzzlePiece)((Iterator)localObject2).next()).getRealIndex()));
    }
    int j = 0;
    for (;;)
    {
      int n = i1;
      if (j >= this.max) {
        break;
      }
      int m = 0;
      while (m < this.max)
      {
        int i2 = ((Integer)((ArrayList)localObject1).get(k)).intValue();
        localObject2 = (PuzzlePiece)this.puzzlePieces.get(i2);
        ((PuzzlePiece)localObject2).setPosition(n, i);
        ((PuzzlePiece)localObject2).setSize(this.pieceSize, this.pieceSize);
        n += this.pieceSize;
        m += 1;
        k += 1;
      }
      i += this.pieceSize;
      j += 1;
    }
  }
  
  private void checkForGameComplete()
  {
    int j = 1;
    Iterator localIterator = this.puzzlePieces.iterator();
    PuzzlePiece localPuzzlePiece;
    do
    {
      i = j;
      if (!localIterator.hasNext()) {
        break;
      }
      localPuzzlePiece = (PuzzlePiece)localIterator.next();
    } while (localPuzzlePiece.getIndex() == localPuzzlePiece.getRealIndex());
    int i = 0;
    if (i != 0)
    {
      this.inGame = false;
      this.previewing = false;
      ((PuzzlePiece)this.puzzlePieces.get(this.puzzles - 1)).setVisibility(0);
      this.previewButton.setEnabled(false);
      showCongratulationDialog();
    }
  }
  
  private void createPuzzlePieces()
  {
    if (this.puzzlePiecesCreated) {}
    int i1;
    do
    {
      return;
      this.puzzlePiecesCreated = true;
      k = DeviceUtil.getSmallestScreenDimension(getActivity());
      i1 = k / this.puzzleRows;
      this.puzzleImage = ImageUtil.getScaledBitmapResource(this.imageName, k, k, true);
    } while (this.puzzleImage == null);
    int n = this.puzzleImage.getWidth();
    int m = this.puzzleImage.getHeight();
    int i = 0;
    int j = 0;
    if (n > k) {
      i = (n - k) / 2;
    }
    if (m > k) {
      j = (m - k) / 2;
    }
    if ((i > 0) || (j > 0)) {
      this.puzzleImage = Bitmap.createBitmap(this.puzzleImage, i, j, k, k);
    }
    int i2 = k / i1;
    i = 0;
    int k = 0;
    j = 0;
    for (;;)
    {
      n = 0;
      if (j >= i2) {
        break;
      }
      m = 0;
      while (m < i2)
      {
        PuzzlePiece localPuzzlePiece = new PuzzlePiece(getActivity());
        localPuzzlePiece.setPieceIndex(k, k);
        localPuzzlePiece.setImageBitmap(Bitmap.createBitmap(this.puzzleImage, n, i, i1, i1));
        this.puzzleContainer.addView(localPuzzlePiece);
        localPuzzlePiece.setPosition(n, i);
        this.puzzlePieces.add(localPuzzlePiece);
        n += i1;
        localPuzzlePiece.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            if ((SCPuzzleGameFragment.this.inGame) && (!SCPuzzleGameFragment.this.previewing))
            {
              paramAnonymousView = (SCPuzzleGameFragment.PuzzlePiece)paramAnonymousView;
              SCPuzzleGameFragment.this.movePiece(paramAnonymousView.getRealIndex());
            }
          }
        });
        m += 1;
        k += 1;
      }
      i += i1;
      j += 1;
    }
    this.pieceSize = i1;
    this.max = i2;
    this.puzzles = (i2 * i2);
  }
  
  private int getBlankPosition()
  {
    return getRealPosition(this.puzzles - 1);
  }
  
  private static int getLevelRows(String paramString, int paramInt)
  {
    if (paramString == null) {
      return paramInt;
    }
    try
    {
      int i = Integer.parseInt(paramString);
      return i;
    }
    catch (NumberFormatException paramString)
    {
      Log.e("Puzzle", "Exception", paramString);
    }
    return paramInt;
  }
  
  private int getPosition(int paramInt)
  {
    Iterator localIterator = this.puzzlePieces.iterator();
    while (localIterator.hasNext())
    {
      PuzzlePiece localPuzzlePiece = (PuzzlePiece)localIterator.next();
      if (localPuzzlePiece.getRealIndex() == paramInt) {
        return localPuzzlePiece.getIndex();
      }
    }
    return -1;
  }
  
  private int getRealPosition(int paramInt)
  {
    Iterator localIterator = this.puzzlePieces.iterator();
    while (localIterator.hasNext())
    {
      PuzzlePiece localPuzzlePiece = (PuzzlePiece)localIterator.next();
      if (localPuzzlePiece.getIndex() == paramInt) {
        return localPuzzlePiece.getRealIndex();
      }
    }
    return -1;
  }
  
  private void init()
  {
    Object localObject2 = getArguments();
    Object localObject1 = null;
    if (localObject2 != null)
    {
      this.style = ((Bundle)localObject2).getBundle("PAGE_STYLE");
      this.mPageID = ((Bundle)localObject2).getString("PAGE_ID");
      this.imageName = ((Bundle)localObject2).getString("imageName");
      localObject1 = (List)((Bundle)localObject2).getSerializable("LEVELS_KEY");
    }
    this.isTablet = DeviceUtil.isTabletNew(getActivity());
    this.puzzleContainer = ((RelativeLayout)this.fragmentView.findViewById(2131100136));
    StyleUtil.setBackground(this.puzzleContainer, this.style);
    StyleUtil.setBackground(this.fragmentView, this.style);
    if ((localObject1 != null) && (((List)localObject1).size() > 0))
    {
      if (((List)localObject1).size() <= 1) {
        break label425;
      }
      this.levels = new ArrayList();
      localObject2 = new ArrayList();
      Iterator localIterator = ((List)localObject1).iterator();
      while (localIterator.hasNext())
      {
        HashMap localHashMap = (HashMap)localIterator.next();
        int i = getLevelRows((String)localHashMap.get("rows"), -1);
        if ((i >= 3) && (i <= 15))
        {
          this.levels.add(localHashMap);
          ((List)localObject2).add(localHashMap.get("title"));
        }
      }
      this.levelsTitleStrings = ((String[])((List)localObject2).toArray(new String[((List)localObject2).size()]));
      if (this.levels.size() != 1) {
        break label417;
      }
      localObject1 = (HashMap)((List)localObject1).get(0);
      this.puzzleRows = Integer.parseInt((String)((HashMap)localObject1).get("rows"));
      this.puzzleRows = Math.min(15, this.puzzleRows);
      this.mWinningPage = ((String)((HashMap)localObject1).get("nextPage"));
    }
    for (;;)
    {
      this.rotateToPortraitTextView = ((TextView)this.fragmentView.findViewById(2131100035));
      this.previewButton = ((Button)this.fragmentView.findViewById(2131100137));
      this.randomizeButton = ((Button)this.fragmentView.findViewById(2131100138));
      this.previewButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          SCPuzzleGameFragment.this.previewPuzzle();
        }
      });
      this.randomizeButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          SCPuzzleGameFragment.this.randomizePuzzle();
        }
      });
      this.previewButton.setEnabled(false);
      setupAdViews();
      return;
      label417:
      this.shouldChooseLevel = true;
      continue;
      label425:
      localObject1 = (HashMap)((List)localObject1).get(0);
      this.puzzleRows = Integer.parseInt((String)((HashMap)localObject1).get("rows"));
      this.puzzleRows = Math.min(15, this.puzzleRows);
      this.mWinningPage = ((String)((HashMap)localObject1).get("nextPage"));
    }
  }
  
  private void movePiece(int paramInt)
  {
    int i = paramInt + 1;
    int j = this.max;
    int k = this.max;
    int m = getBlankPosition();
    if (((paramInt - 1 == m) && (paramInt % this.max != 0)) || ((i == m) && (i % this.max != 0)) || (paramInt - j == m) || (paramInt + k == m)) {
      swapPieces(paramInt, m);
    }
    checkForGameComplete();
  }
  
  private int randomFromTo(int paramInt1, int paramInt2)
  {
    return (int)(Math.random() * (paramInt2 - paramInt1 + 1)) + paramInt1;
  }
  
  private void removeLayoutListener()
  {
    ViewTreeObserver localViewTreeObserver = this.puzzleContainer.getViewTreeObserver();
    if (localViewTreeObserver != null)
    {
      if (Build.VERSION.SDK_INT >= 16) {
        localViewTreeObserver.removeOnGlobalLayoutListener(this.layoutListener);
      }
    }
    else {
      return;
    }
    localViewTreeObserver.removeGlobalOnLayoutListener(this.layoutListener);
  }
  
  private void setupAdViews()
  {
    LinearLayout localLinearLayout = (LinearLayout)this.fragmentView;
    Page localPage = (Page)App.appConfig.getPages().get(this.mPageID);
    this.mAdManager = new AdManager().showAds(getActivity(), localLinearLayout, localPage);
  }
  
  private void showCongratulationDialog()
  {
    if ((this.mWinningPage != null) && (this.mWinningPage.length() > 0))
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
      localBuilder.setMessage(2131362083).setCancelable(false).setPositiveButton(2131362086, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          App.showPageWithId(SCPuzzleGameFragment.this.mWinningPage, SCPuzzleGameFragment.this.getActivity());
        }
      });
      localBuilder.setTitle(2131362082);
      localBuilder.create().show();
      return;
    }
    DialogUtil.showAlert(getActivity(), 2131362082, 2131362083);
  }
  
  private void showLevelPicker()
  {
    removeLayoutListener();
    this.previewing = false;
    this.inGame = false;
    this.puzzlePiecesCreated = false;
    this.max = 0;
    this.mContainerSize = new MSize(0, 0);
    this.puzzleContainer.removeAllViews();
    this.puzzlePieces.clear();
    showViewForOrientation(getActivity().getResources().getConfiguration().orientation);
    Object localObject = new AlertDialog.Builder(getActivity());
    ((AlertDialog.Builder)localObject).setTitle(2131362085).setItems(this.levelsTitleStrings, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (HashMap)SCPuzzleGameFragment.this.levels.get(paramAnonymousInt);
        SCPuzzleGameFragment.access$202(SCPuzzleGameFragment.this, SCPuzzleGameFragment.getLevelRows((String)paramAnonymousDialogInterface.get("rows"), 15));
        SCPuzzleGameFragment.access$402(SCPuzzleGameFragment.this, (String)paramAnonymousDialogInterface.get("nextPage"));
        SCPuzzleGameFragment.this.addLayoutListener();
        SCPuzzleGameFragment.this.createPuzzlePiecesIfNeeded();
      }
    });
    localObject = ((AlertDialog.Builder)localObject).create();
    ((Dialog)localObject).setCancelable(false);
    ((Dialog)localObject).show();
  }
  
  private void showViewForOrientation(int paramInt)
  {
    if ((paramInt == 2) && (!this.isTablet))
    {
      this.puzzleContainer.setVisibility(8);
      this.rotateToPortraitTextView.setVisibility(0);
      this.randomizeButton.setEnabled(false);
      this.previewButton.setEnabled(false);
      return;
    }
    this.puzzleContainer.setVisibility(0);
    this.rotateToPortraitTextView.setVisibility(8);
    this.randomizeButton.setEnabled(true);
    this.previewButton.setEnabled(this.inGame);
    arrangePuzzlePieces();
  }
  
  private void swapPieces(int paramInt1, int paramInt2)
  {
    swapPieces(paramInt1, paramInt2, true);
  }
  
  private void swapPieces(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    int j = paramInt1;
    int i = paramInt2;
    if (paramBoolean)
    {
      j = getPosition(paramInt1);
      i = getPosition(paramInt2);
    }
    PuzzlePiece localPuzzlePiece1 = (PuzzlePiece)this.puzzlePieces.get(j);
    PuzzlePiece localPuzzlePiece2 = (PuzzlePiece)this.puzzlePieces.get(i);
    if (paramBoolean)
    {
      paramInt1 = localPuzzlePiece1.getRealIndex();
      paramInt2 = localPuzzlePiece2.getRealIndex();
      localPuzzlePiece2.setRealIndex(paramInt1);
      localPuzzlePiece1.setRealIndex(paramInt2);
    }
    paramInt1 = localPuzzlePiece1.x;
    paramInt2 = localPuzzlePiece1.y;
    localPuzzlePiece1.setPosition(localPuzzlePiece2.x, localPuzzlePiece2.y);
    localPuzzlePiece2.setPosition(paramInt1, paramInt2);
  }
  
  protected void createPuzzlePiecesIfNeeded()
  {
    try
    {
      if (!this.puzzlePiecesCreated) {
        createPuzzlePieces();
      }
      arrangePuzzlePieces();
      return;
    }
    finally {}
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    showViewForOrientation(paramConfiguration.orientation);
    super.onConfigurationChanged(paramConfiguration);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    if ((this.levels != null) && (this.levels.size() > 1)) {
      paramMenu.add(10, 11, 0, 2131362087);
    }
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fragmentView = paramLayoutInflater.inflate(2130903192, paramViewGroup, false);
    init();
    showViewForOrientation(getActivity().getResources().getConfiguration().orientation);
    return this.fragmentView;
  }
  
  public void onDestroy()
  {
    removeLayoutListener();
    if (this.mAdManager != null) {
      this.mAdManager.destroy();
    }
    super.onDestroy();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    showLevelPicker();
    return true;
  }
  
  public void onPause()
  {
    removeLayoutListener();
    super.onPause();
  }
  
  public void onResume()
  {
    super.onResume();
    if (this.shouldChooseLevel)
    {
      this.shouldChooseLevel = false;
      new Handler().postDelayed(new Runnable()
      {
        public void run()
        {
          SCPuzzleGameFragment.this.showLevelPicker();
        }
      }, 300L);
      return;
    }
    addLayoutListener();
  }
  
  protected void previewPuzzle()
  {
    if (this.puzzleImage == null) {
      return;
    }
    if (this.previewing)
    {
      ArrayList localArrayList = new ArrayList();
      Iterator localIterator = this.puzzlePieces.iterator();
      PuzzlePiece localPuzzlePiece;
      while (localIterator.hasNext())
      {
        localPuzzlePiece = (PuzzlePiece)localIterator.next();
        localArrayList.add(new Point(localPuzzlePiece.x, localPuzzlePiece.y));
      }
      localIterator = this.puzzlePieces.iterator();
      while (localIterator.hasNext())
      {
        localPuzzlePiece = (PuzzlePiece)localIterator.next();
        Point localPoint = (Point)localArrayList.get(localPuzzlePiece.getRealIndex());
        localPuzzlePiece.setPosition(localPoint.x, localPoint.y);
      }
      ((PuzzlePiece)this.puzzlePieces.get(this.puzzles - 1)).setVisibility(4);
      this.previewButton.setText(2131362080);
      if (this.previewing) {
        break label349;
      }
    }
    label349:
    for (boolean bool = true;; bool = false)
    {
      this.previewing = bool;
      return;
      int i = this.puzzleContainer.getHeight();
      int i1 = (this.puzzleContainer.getWidth() - this.max * this.pieceSize) / 2;
      i = (i - this.max * this.pieceSize) / 2;
      int k = 0;
      int j = 0;
      for (;;)
      {
        int n = i1;
        if (j >= this.max) {
          break;
        }
        int m = 0;
        while (m < this.max)
        {
          ((PuzzlePiece)this.puzzlePieces.get(k)).setPosition(n, i);
          n += this.pieceSize;
          m += 1;
          k += 1;
        }
        i += this.pieceSize;
        j += 1;
      }
      ((PuzzlePiece)this.puzzlePieces.get(this.puzzles - 1)).setVisibility(0);
      this.previewButton.setText(2131362081);
      break;
    }
  }
  
  protected void randomizePuzzle()
  {
    if ((this.puzzlePieces.size() == 0) || (this.puzzleImage == null)) {
      return;
    }
    int k;
    int j;
    if (this.inGame)
    {
      this.previewing = false;
      this.previewButton.setText(2131362080);
      i = this.puzzleContainer.getHeight();
      int i1 = (this.puzzleContainer.getWidth() - this.max * this.pieceSize) / 2;
      i = (i - this.max * this.pieceSize) / 2;
      k = 0;
      j = 0;
      for (;;)
      {
        int n = i1;
        if (j >= this.max) {
          break;
        }
        int m = 0;
        while (m < this.max)
        {
          PuzzlePiece localPuzzlePiece = (PuzzlePiece)this.puzzlePieces.get(k);
          localPuzzlePiece.setPieceIndex(k, k);
          localPuzzlePiece.setPosition(n, i);
          n += this.pieceSize;
          m += 1;
          k += 1;
        }
        i += this.pieceSize;
        j += 1;
      }
    }
    ((PuzzlePiece)this.puzzlePieces.get(this.puzzles - 1)).setVisibility(4);
    int i = 0;
    while (i < this.puzzleRows * 5)
    {
      j = randomFromTo(0, this.puzzles - 1);
      k = randomFromTo(0, this.puzzles - 1);
      if ((j != k) && (j < this.puzzles - 1) && (k < this.puzzles - 1)) {
        swapPieces(j, k);
      }
      i += 1;
    }
    this.inGame = true;
    this.previewButton.setEnabled(true);
  }
  
  private class MSize
  {
    private final int height;
    private final int width;
    
    public MSize(int paramInt1, int paramInt2)
    {
      this.width = paramInt1;
      this.height = paramInt2;
    }
    
    public boolean Equals(MSize paramMSize)
    {
      return (paramMSize.getWidth() == this.width) && (paramMSize.getHeight() == this.height);
    }
    
    public int getHeight()
    {
      return this.height;
    }
    
    public int getWidth()
    {
      return this.width;
    }
  }
  
  private class PuzzlePiece
    extends ImageView
  {
    private int index = 0;
    private int realIndex = 0;
    public int x = 0;
    public int y = 0;
    
    public PuzzlePiece(Context paramContext)
    {
      super();
    }
    
    public int getIndex()
    {
      return this.index;
    }
    
    public int getRealIndex()
    {
      return this.realIndex;
    }
    
    public void setIndex(int paramInt)
    {
      this.index = paramInt;
    }
    
    public void setPieceIndex(int paramInt1, int paramInt2)
    {
      setIndex(paramInt1);
      setRealIndex(paramInt2);
    }
    
    public void setPosition(int paramInt1, int paramInt2)
    {
      this.x = paramInt1;
      this.y = paramInt2;
      RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)getLayoutParams();
      if (localLayoutParams != null)
      {
        localLayoutParams.leftMargin = paramInt1;
        localLayoutParams.topMargin = paramInt2;
        setLayoutParams(localLayoutParams);
      }
    }
    
    public void setRealIndex(int paramInt)
    {
      this.realIndex = paramInt;
    }
    
    public void setSize(int paramInt1, int paramInt2)
    {
      RelativeLayout.LayoutParams localLayoutParams = (RelativeLayout.LayoutParams)getLayoutParams();
      if (localLayoutParams != null)
      {
        localLayoutParams.width = (paramInt1 - 1);
        localLayoutParams.height = (paramInt2 - 1);
        setLayoutParams(localLayoutParams);
      }
    }
  }
}
