package com.qbiki.modules.photoeffect;

import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Region.Op;
import android.os.Environment;
import com.qbiki.util.ImageUtil;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

public class Mask
{
  private static final int DUOTAP = 2;
  private static final String EXTERNAL_PICTURES_STORAGE_DIRECTORY = Environment.getExternalStorageDirectory().getAbsolutePath() + "/PhotoEffect/";
  private static final int MOVE = 0;
  private static final int NONE = -1;
  public static final String TAG = Mask.class.getSimpleName();
  private static final int ZOOM = 1;
  private String TEMP_PHOTO_NAME = "";
  private int alpha = 255;
  private float angle = 0.0F;
  private Bitmap bitmap;
  int bitmapHeight = 0;
  int bitmapWidth = 0;
  private PointF midPoint = new PointF(0.0F, 0.0F);
  private int mode = -1;
  private float oldAngle = 0.0F;
  private int oldMode = -1;
  private float oldScale = 1.0F;
  private RectF redBorder = null;
  private float scale = 1.0F;
  private boolean selected = true;
  int shiftX = 0;
  int shiftY = 0;
  private boolean touched = false;
  private boolean useOldValue = false;
  private int x;
  private int y;
  
  public Mask(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    this.bitmap = paramBitmap;
    this.x = paramInt1;
    this.y = paramInt2;
    this.bitmapHeight = this.bitmap.getHeight();
    this.bitmapWidth = this.bitmap.getWidth();
  }
  
  private Boolean saveTempImage(int paramInt)
  {
    this.TEMP_PHOTO_NAME = ("mask" + paramInt + ".png");
    if (this.bitmap != null)
    {
      File localFile = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY);
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      localFile = new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + this.TEMP_PHOTO_NAME);
      try
      {
        this.bitmap.compress(Bitmap.CompressFormat.PNG, 90, new FileOutputStream(localFile));
        ImageUtil.clearBitmap(this.bitmap);
        this.bitmap = null;
        return Boolean.valueOf(true);
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        return Boolean.valueOf(false);
      }
    }
    return Boolean.valueOf(false);
  }
  
  public void applyChanges(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    if (this.angle != 0.0F)
    {
      localMatrix = new Matrix();
      localMatrix.postRotate(this.angle);
      this.bitmap = Bitmap.createBitmap(this.bitmap, 0, 0, this.bitmap.getWidth(), this.bitmap.getHeight(), localMatrix, false);
    }
    Matrix localMatrix = new Matrix();
    localMatrix.postScale(this.scale, this.scale);
    float f7 = this.bitmap.getWidth();
    float f8 = this.scale;
    float f5 = this.bitmap.getHeight();
    float f6 = this.scale;
    RectF localRectF1 = new RectF(this.x - paramInt1 - this.bitmap.getWidth() * this.scale / 2.0F, this.y - paramInt2 - this.bitmap.getHeight() * this.scale / 2.0F, this.x - paramInt1 + this.bitmap.getWidth() * this.scale / 2.0F, this.y - paramInt2 + this.bitmap.getHeight() * this.scale / 2.0F);
    float f1;
    label248:
    float f9;
    float f10;
    float f3;
    label285:
    float f4;
    label324:
    RectF localRectF2;
    if (localRectF1.left < 0.0F)
    {
      f1 = localRectF1.left;
      if (localRectF1.top >= 0.0F) {
        break label672;
      }
      f2 = localRectF1.top;
      f9 = this.bitmap.getWidth();
      f10 = this.scale;
      if (localRectF1.right <= paramInt3) {
        break label678;
      }
      f3 = localRectF1.right - paramInt3;
      float f11 = this.bitmap.getHeight();
      float f12 = this.scale;
      if (localRectF1.bottom <= paramInt4) {
        break label684;
      }
      f4 = localRectF1.bottom - paramInt4;
      localRectF2 = new RectF(0.0F - f1, 0.0F - f2, f10 * f9 - f3, f12 * f11 - f4);
      f3 = localRectF2.left;
      f4 = localRectF2.top;
      f9 = localRectF2.right;
      if (localRectF1.left >= 0.0F) {
        break label690;
      }
      f1 = localRectF1.left;
      label395:
      f10 = localRectF2.bottom;
      if (localRectF1.top >= 0.0F) {
        break label696;
      }
    }
    label672:
    label678:
    label684:
    label690:
    label696:
    for (float f2 = localRectF1.top;; f2 = 0.0F)
    {
      RectF localRectF3 = new RectF(f3, f4, f9 + f1, f2 + f10);
      this.bitmap = Bitmap.createBitmap(this.bitmap, (int)(localRectF3.left / this.scale), (int)(localRectF3.top / this.scale), (int)(localRectF3.right / this.scale), (int)(localRectF3.bottom / this.scale), localMatrix, false);
      f1 = localRectF1.right - paramInt3;
      if (localRectF2.right == f7 * f8) {
        f1 = 0.0F;
      }
      f2 = localRectF1.bottom - paramInt4;
      if (localRectF2.bottom == f5 * f6) {
        f2 = 0.0F;
      }
      this.x = (this.x - paramInt1 + (int)(localRectF2.left / 2.0F - f1 / 2.0F));
      this.y = (this.y - paramInt2 + (int)(localRectF2.top / 2.0F - f2 / 2.0F));
      this.angle = 0.0F;
      this.scale = 1.0F;
      this.mode = -1;
      this.oldMode = -1;
      this.midPoint = new PointF(0.0F, 0.0F);
      this.bitmapHeight = this.bitmap.getHeight();
      this.bitmapWidth = this.bitmap.getWidth();
      saveTempImage(paramInt5);
      return;
      f1 = 0.0F;
      break;
      f2 = 0.0F;
      break label248;
      f3 = 0.0F;
      break label285;
      f4 = 0.0F;
      break label324;
      f1 = 0.0F;
      break label395;
    }
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (this.bitmap == null) {
      return;
    }
    paramCanvas.save();
    Paint localPaint = new Paint();
    localPaint.setAlpha(this.alpha);
    Object localObject = this.bitmap;
    if ((getMode() == 1) || (getMode() == 2))
    {
      localObject = new Matrix();
      if (this.angle != 0.0F)
      {
        ((Matrix)localObject).postRotate(this.angle);
        localObject = Bitmap.createBitmap(this.bitmap, 0, 0, this.bitmap.getWidth(), this.bitmap.getHeight(), (Matrix)localObject, false);
        label102:
        if ((this.scale == 1.0F) || (this.scale <= 0.0F)) {
          break label540;
        }
        if (this.oldMode != 0) {
          break label443;
        }
        this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() * this.scale / 2.0F - this.shiftX, this.y - ((Bitmap)localObject).getHeight() * this.scale / 2.0F - this.shiftY, this.x + ((Bitmap)localObject).getWidth() * this.scale / 2.0F - this.shiftX, this.y + ((Bitmap)localObject).getHeight() * this.scale / 2.0F - this.shiftY);
        paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
      }
    }
    for (;;)
    {
      if (isSelected())
      {
        localObject = new Path();
        localPaint = new Paint();
        localPaint.setStyle(Paint.Style.STROKE);
        localPaint.setColor(-65536);
        localPaint.setStrokeWidth(2.0F);
        localPaint.setAntiAlias(true);
        ((Path)localObject).addRect(new RectF(this.redBorder.left, this.redBorder.top, this.redBorder.right, this.redBorder.bottom), Path.Direction.CCW);
        paramCanvas.drawPath((Path)localObject, localPaint);
        paramCanvas.clipPath((Path)localObject, Region.Op.INTERSECT);
      }
      paramCanvas.restore();
      if (!isUseOldValue()) {
        break;
      }
      if ((this.mode != 1) || ((this.mode == 1) && (this.oldMode == 0)))
      {
        this.x -= this.shiftX;
        this.y -= this.shiftY;
      }
      this.shiftX = 0;
      this.shiftY = 0;
      setMode(-1);
      this.oldMode = -1;
      this.useOldValue = false;
      return;
      localObject = this.bitmap;
      break label102;
      label443:
      this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() * this.scale / 2.0F, this.y - ((Bitmap)localObject).getHeight() * this.scale / 2.0F, this.x + ((Bitmap)localObject).getWidth() * this.scale / 2.0F, this.y + ((Bitmap)localObject).getHeight() * this.scale / 2.0F);
      paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
      continue;
      label540:
      if (this.oldMode == 0)
      {
        this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() / 2 - this.shiftX, this.y - ((Bitmap)localObject).getHeight() / 2 - this.shiftY, this.x + ((Bitmap)localObject).getWidth() / 2 - this.shiftX, this.y + ((Bitmap)localObject).getHeight() / 2 - this.shiftY);
        paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
      }
      else
      {
        this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() / 2, this.y - ((Bitmap)localObject).getHeight() / 2, this.x + ((Bitmap)localObject).getWidth() / 2, this.y + ((Bitmap)localObject).getHeight() / 2);
        paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
        continue;
        if (getMode() == 0)
        {
          localObject = new Matrix();
          if (this.angle != 0.0F) {
            ((Matrix)localObject).postRotate(this.angle);
          }
          for (localObject = Bitmap.createBitmap(this.bitmap, 0, 0, this.bitmap.getWidth(), this.bitmap.getHeight(), (Matrix)localObject, false);; localObject = this.bitmap)
          {
            if ((this.scale == 1.0F) || (this.scale <= 0.0F)) {
              break label919;
            }
            this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() * this.scale / 2.0F - this.shiftX, this.y - ((Bitmap)localObject).getHeight() * this.scale / 2.0F - this.shiftY, this.x + ((Bitmap)localObject).getWidth() * this.scale / 2.0F - this.shiftX, this.y + ((Bitmap)localObject).getHeight() * this.scale / 2.0F - this.shiftY);
            paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
            break;
          }
          label919:
          this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() / 2 - this.shiftX, this.y - ((Bitmap)localObject).getHeight() / 2 - this.shiftY, this.x + ((Bitmap)localObject).getWidth() / 2 - this.shiftX, this.y + ((Bitmap)localObject).getHeight() / 2 - this.shiftY);
          paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
        }
        else
        {
          localObject = new Matrix();
          if (this.angle != 0.0F) {
            ((Matrix)localObject).postRotate(this.angle);
          }
          for (localObject = Bitmap.createBitmap(this.bitmap, 0, 0, this.bitmap.getWidth(), this.bitmap.getHeight(), (Matrix)localObject, false);; localObject = this.bitmap)
          {
            if ((this.scale == 1.0F) || (this.scale <= 0.0F)) {
              break label1211;
            }
            this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() * this.scale / 2.0F - this.shiftX, this.y - ((Bitmap)localObject).getHeight() * this.scale / 2.0F - this.shiftY, this.x + ((Bitmap)localObject).getWidth() * this.scale / 2.0F - this.shiftX, this.y + ((Bitmap)localObject).getHeight() * this.scale / 2.0F - this.shiftY);
            paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
            break;
          }
          label1211:
          this.redBorder = new RectF(this.x - ((Bitmap)localObject).getWidth() / 2 - this.shiftX, this.y - ((Bitmap)localObject).getHeight() / 2 - this.shiftY, this.x + ((Bitmap)localObject).getWidth() / 2 - this.shiftX, this.y + ((Bitmap)localObject).getHeight() / 2 - this.shiftY);
          paramCanvas.drawBitmap((Bitmap)localObject, null, this.redBorder, localPaint);
        }
      }
    }
  }
  
  public int getAlpha()
  {
    return this.alpha;
  }
  
  public float getAngle()
  {
    return this.angle;
  }
  
  public Bitmap getBitmap()
  {
    return this.bitmap;
  }
  
  public int getLeft()
  {
    return this.x - this.bitmap.getWidth() / 2 - this.shiftX;
  }
  
  public PointF getMidPoint()
  {
    return this.midPoint;
  }
  
  public int getMode()
  {
    return this.mode;
  }
  
  public Paint getPaint()
  {
    Paint localPaint = new Paint();
    localPaint.setAlpha(this.alpha);
    return localPaint;
  }
  
  public String getPathOfTempBitmap()
  {
    return EXTERNAL_PICTURES_STORAGE_DIRECTORY + this.TEMP_PHOTO_NAME;
  }
  
  public float getScale()
  {
    return this.scale;
  }
  
  public int getTop()
  {
    return this.y - this.bitmap.getHeight() / 2 - this.shiftY;
  }
  
  public int getX()
  {
    return this.x - this.shiftX;
  }
  
  public int getY()
  {
    return this.y - this.shiftY;
  }
  
  public boolean handleActionDown(int paramInt1, int paramInt2)
  {
    if ((paramInt1 >= this.redBorder.left) && (paramInt1 <= this.redBorder.right))
    {
      if ((paramInt2 >= this.redBorder.top) && (paramInt2 <= this.redBorder.bottom))
      {
        setTouched(true);
        setSelected(true);
        this.shiftX = (paramInt1 - (this.x - this.shiftX));
        this.shiftY = (paramInt2 - (this.y - this.shiftY));
        return true;
      }
      setTouched(false);
      setSelected(false);
      return false;
    }
    setTouched(false);
    setSelected(false);
    return false;
  }
  
  public boolean isSelected()
  {
    return this.selected;
  }
  
  public boolean isTouched()
  {
    return this.touched;
  }
  
  public boolean isUseOldValue()
  {
    return this.useOldValue;
  }
  
  public Boolean removeTempFile()
  {
    return Boolean.valueOf(new File(EXTERNAL_PICTURES_STORAGE_DIRECTORY + this.TEMP_PHOTO_NAME).delete());
  }
  
  public void setAlpha(int paramInt)
  {
    this.alpha = paramInt;
  }
  
  public void setAngle(float paramFloat)
  {
    this.angle = (57.29578F * paramFloat + this.oldAngle);
  }
  
  public void setBitmap(Bitmap paramBitmap)
  {
    this.bitmap = paramBitmap;
  }
  
  public void setMidPoint(PointF paramPointF)
  {
    this.midPoint = paramPointF;
  }
  
  public void setMode(int paramInt)
  {
    if ((paramInt == 0) || (paramInt == -1)) {
      this.oldMode = this.mode;
    }
    this.mode = paramInt;
  }
  
  public void setScale(float paramFloat)
  {
    this.scale = (paramFloat - 1.0F + this.oldScale);
  }
  
  public void setSelected(boolean paramBoolean)
  {
    this.selected = this.touched;
  }
  
  public void setTouched(boolean paramBoolean)
  {
    this.touched = paramBoolean;
  }
  
  public void setUseOldValue(boolean paramBoolean)
  {
    if (getMode() == -1)
    {
      this.x -= this.shiftX;
      this.y -= this.shiftY;
      this.shiftX = 0;
      this.shiftY = 0;
    }
    this.useOldValue = paramBoolean;
    this.oldScale = this.scale;
    this.oldAngle = this.angle;
  }
  
  public void setX(int paramInt)
  {
    this.x = paramInt;
  }
  
  public void setY(int paramInt)
  {
    this.y = paramInt;
  }
}
