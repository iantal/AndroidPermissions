package com.qbiki.modules.photoeffect;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.PointF;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.util.FloatMath;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnDoubleTapListener;
import android.view.GestureDetector.OnGestureListener;
import android.view.MotionEvent;
import android.view.View;
import android.widget.SeekBar;
import java.util.ArrayList;
import java.util.Iterator;

public class MaskImageView
  extends View
  implements GestureDetector.OnDoubleTapListener, GestureDetector.OnGestureListener
{
  private static final int DUOTAP = 2;
  private static final int MOVE = 0;
  private static final int NONE = -1;
  private static final int ZOOM = 1;
  private ArrayList<Mask> arrChooseImg = new ArrayList();
  float centerXView;
  float centerYView;
  private PhotoEffectFragment fragment;
  boolean isInit = false;
  private GestureDetector mGestureDetector = new GestureDetector(paramContext, this);
  private SeekBar mSeekBar = null;
  Mask maskSelected = null;
  private PointF midPointOfDistance = new PointF(0.0F, 0.0F);
  private int mode = -1;
  private float oldAngle = 0.0F;
  private float oldDistance = 0.0F;
  
  public MaskImageView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
    this.mGestureDetector = new GestureDetector(paramContext, this);
  }
  
  public MaskImageView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
  }
  
  public MaskImageView(Context paramContext, View paramView)
  {
    this(paramContext, null, 0);
    this.mSeekBar = ((SeekBar)paramView.findViewById(2131100122));
    this.mSeekBar.setProgress(this.mSeekBar.getMax());
    this.mGestureDetector = new GestureDetector(paramContext, this);
  }
  
  public MaskImageView(PhotoEffectFragment paramPhotoEffectFragment)
  {
    this(paramPhotoEffectFragment.getActivity(), paramPhotoEffectFragment.getmView());
    this.fragment = paramPhotoEffectFragment;
  }
  
  private float angleBetweenPoint1(MotionEvent paramMotionEvent)
  {
    return (float)Math.atan2(paramMotionEvent.getY(0) - paramMotionEvent.getY(1), paramMotionEvent.getX(0) - paramMotionEvent.getX(1));
  }
  
  private float distanceBetweenTwoPoints(MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX(0) - paramMotionEvent.getX(1);
    float f2 = paramMotionEvent.getY(0) - paramMotionEvent.getY(1);
    return FloatMath.sqrt(f1 * f1 + f2 * f2);
  }
  
  private void midPoint(PointF paramPointF, MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX(0);
    float f2 = paramMotionEvent.getX(1);
    float f3 = paramMotionEvent.getY(0);
    float f4 = paramMotionEvent.getY(1);
    paramPointF.set((f1 + f2) / 2.0F, (f3 + f4) / 2.0F);
  }
  
  public void addMask(Bitmap paramBitmap)
  {
    Iterator localIterator = this.arrChooseImg.iterator();
    while (localIterator.hasNext()) {
      ((Mask)localIterator.next()).setSelected(false);
    }
    paramBitmap = new Mask(paramBitmap, 0, 0);
    this.arrChooseImg.add(paramBitmap);
    this.maskSelected = paramBitmap;
    this.isInit = true;
  }
  
  public void alphaChangeOnSelectedMask(int paramInt)
  {
    if ((this.maskSelected != null) && (this.maskSelected.isSelected()))
    {
      this.maskSelected.setAlpha(paramInt);
      this.maskSelected.setMode(1);
      invalidate();
    }
  }
  
  public void applyChanges(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    Iterator localIterator = this.arrChooseImg.iterator();
    while (localIterator.hasNext())
    {
      Mask localMask = (Mask)localIterator.next();
      localMask.applyChanges(paramInt1, paramInt2, paramInt3, paramInt4, this.arrChooseImg.indexOf(localMask));
    }
    this.maskSelected = null;
  }
  
  public void deleteSelectedMask()
  {
    if ((this.maskSelected != null) && (this.maskSelected.isSelected()))
    {
      this.arrChooseImg.remove(this.maskSelected);
      invalidate();
    }
  }
  
  public ArrayList<Mask> getArrayOfChoosedImages()
  {
    return this.arrChooseImg;
  }
  
  public boolean onDoubleTap(MotionEvent paramMotionEvent)
  {
    this.mode = 2;
    if ((this.maskSelected != null) && (this.maskSelected.isSelected()))
    {
      this.maskSelected.setMode(2);
      this.maskSelected.setScale(1.5F);
      invalidate();
    }
    return false;
  }
  
  public boolean onDoubleTapEvent(MotionEvent paramMotionEvent)
  {
    return false;
  }
  
  public boolean onDown(MotionEvent paramMotionEvent)
  {
    return false;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    paramCanvas.save();
    Object localObject = new RectF(paramCanvas.getClipBounds());
    this.centerXView = ((RectF)localObject).centerX();
    this.centerYView = ((RectF)localObject).centerY();
    if (this.isInit)
    {
      localObject = (Mask)this.arrChooseImg.get(this.arrChooseImg.size() - 1);
      ((Mask)localObject).setX((int)this.centerXView);
      ((Mask)localObject).setY((int)this.centerYView);
      this.isInit = false;
    }
    localObject = this.arrChooseImg.iterator();
    while (((Iterator)localObject).hasNext()) {
      ((Mask)((Iterator)localObject).next()).draw(paramCanvas);
    }
    paramCanvas.restore();
  }
  
  public boolean onFling(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    return false;
  }
  
  public void onLongPress(MotionEvent paramMotionEvent) {}
  
  public boolean onScroll(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    return false;
  }
  
  public void onShowPress(MotionEvent paramMotionEvent) {}
  
  public boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    return false;
  }
  
  public boolean onSingleTapUp(MotionEvent paramMotionEvent)
  {
    return false;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    this.mGestureDetector.onTouchEvent(paramMotionEvent);
    this.fragment.hideMenu();
    switch (paramMotionEvent.getAction() & 0xFF)
    {
    }
    for (;;)
    {
      return true;
      int j = 1;
      int i = this.arrChooseImg.size() - 1;
      Mask localMask;
      if (i >= 0)
      {
        localMask = (Mask)this.arrChooseImg.get(i);
        if (j != 0) {
          if (localMask.handleActionDown((int)paramMotionEvent.getX(), (int)paramMotionEvent.getY()))
          {
            j = 0;
            this.mSeekBar.setProgress(localMask.getAlpha());
            this.maskSelected = localMask;
          }
        }
        for (;;)
        {
          i -= 1;
          break;
          localMask.setSelected(false);
        }
      }
      if (this.mode == -1) {
        this.mode = 0;
      }
      if (j != 0)
      {
        this.mSeekBar.setProgress(this.mSeekBar.getMax());
        this.maskSelected = null;
      }
      paramMotionEvent.getPointerId(0);
      continue;
      if (this.mode == 0)
      {
        if ((this.maskSelected != null) && (this.maskSelected.isTouched()))
        {
          this.maskSelected.setMode(0);
          this.maskSelected.setX((int)paramMotionEvent.getX());
          this.maskSelected.setY((int)paramMotionEvent.getY());
          invalidate();
        }
      }
      else if (this.mode == 1)
      {
        float f3 = distanceBetweenTwoPoints(paramMotionEvent);
        float f1 = angleBetweenPoint1(paramMotionEvent);
        float f2 = this.oldAngle;
        if (f3 > 10.0F)
        {
          f3 /= this.oldDistance;
          if ((this.maskSelected != null) && (this.maskSelected.isTouched()))
          {
            this.maskSelected.setMode(1);
            this.maskSelected.setAngle(f1 - f2);
            this.maskSelected.setScale(f3);
            this.maskSelected.setMidPoint(this.midPointOfDistance);
            invalidate();
            continue;
            this.oldDistance = distanceBetweenTwoPoints(paramMotionEvent);
            this.oldAngle = angleBetweenPoint1(paramMotionEvent);
            if (this.oldDistance > 10.0F)
            {
              midPoint(this.midPointOfDistance, paramMotionEvent);
              this.mode = 1;
            }
            Log.v(null, "ad");
            continue;
            if (this.mode != -1)
            {
              this.oldDistance = 0.0F;
              if (this.maskSelected != null) {
                this.maskSelected.setUseOldValue(true);
              }
              if ((this.maskSelected != null) && (this.maskSelected.getMode() != -1)) {
                invalidate();
              }
              this.mode = -1;
              continue;
              if (this.mode != -1)
              {
                if (this.maskSelected != null) {
                  this.maskSelected.setUseOldValue(true);
                }
                paramMotionEvent = this.arrChooseImg.iterator();
                while (paramMotionEvent.hasNext())
                {
                  localMask = (Mask)paramMotionEvent.next();
                  if (localMask.isTouched()) {
                    localMask.setTouched(false);
                  }
                }
                if ((this.maskSelected != null) && (this.maskSelected.getMode() != -1)) {
                  invalidate();
                }
                this.mode = -1;
                continue;
                if (this.mode != -1)
                {
                  if (this.maskSelected != null) {
                    this.maskSelected.setUseOldValue(true);
                  }
                  paramMotionEvent = this.arrChooseImg.iterator();
                  while (paramMotionEvent.hasNext())
                  {
                    localMask = (Mask)paramMotionEvent.next();
                    if (localMask.isTouched()) {
                      localMask.setTouched(false);
                    }
                  }
                  if ((this.maskSelected != null) && (this.maskSelected.getMode() != -1)) {
                    invalidate();
                  }
                  this.mode = -1;
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void removeAllMasks()
  {
    this.arrChooseImg.clear();
    invalidate();
  }
}
