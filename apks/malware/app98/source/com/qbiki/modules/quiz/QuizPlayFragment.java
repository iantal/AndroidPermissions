package com.qbiki.modules.quiz;

import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.StateSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ScrollView;
import android.widget.TextView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.StyleUtil;
import com.qbiki.util.TransitionUtils;
import java.util.ArrayList;
import java.util.Iterator;

public class QuizPlayFragment
  extends SCFragment
  implements QuizPlayListener
{
  View.OnClickListener answerButtonClick = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      paramAnonymousView = (String)paramAnonymousView.getTag();
      TransitionUtils.animateTransitionForViews(QuizPlayFragment.this.getActivity(), QuizPlayFragment.this.quizAnswersContainer, QuizPlayFragment.this.quizFeedbackContainerView, "PUSH_FROM_RIGHT");
      QuizPlayFragment.this.processAnswer(Integer.parseInt(paramAnonymousView));
    }
  };
  private TextView currentPointsAmount = null;
  private View mView = null;
  View.OnClickListener nextButtonClick = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      QuizPlayFragment.this.quizAnswersContainer.setVisibility(0);
      QuizPlayFragment.this.sharedQuizGamePlayerController.generateNextStep();
      if (QuizPlayFragment.this.initCurrentElement())
      {
        QuizPlayFragment.this.quizFeedbackContainerView.setVisibility(8);
        return;
      }
      App.closePage(QuizPlayFragment.this);
      paramAnonymousView = new Bundle();
      paramAnonymousView.putBundle("PAGE_STYLE", QuizPlayFragment.this.style);
      App.showPage(new FragmentInfo(QuizResultsFragment.class.getName(), paramAnonymousView), QuizPlayFragment.this);
    }
  };
  private ScrollView quizAnswersContainer = null;
  private LinearLayout quizAnswersContainerLL = null;
  private TextView quizFeedbackAnswerTextView = null;
  private View quizFeedbackContainerView = null;
  private Button quizFeedbackNextButton = null;
  private ScrollView quizFeedbackScrollView = null;
  private View quizQuestionContainerView = null;
  private TextView quizQuestionDescriptionTextView = null;
  private ImageView quizQuestionImageView = null;
  private QuizPlayController sharedQuizGamePlayerController;
  private Bundle style;
  private TextView totalPassedAmount = null;
  private View warningView = null;
  
  public QuizPlayFragment() {}
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null) {
      this.style = ((Bundle)localObject).getBundle("PAGE_STYLE");
    }
    this.sharedQuizGamePlayerController = QuizPlayController.getInstance(getActivity());
    this.quizQuestionContainerView = this.mView.findViewById(2131100146);
    this.quizQuestionImageView = ((ImageView)this.mView.findViewById(2131100147));
    this.quizQuestionDescriptionTextView = ((TextView)this.mView.findViewById(2131100148));
    this.quizAnswersContainer = ((ScrollView)this.mView.findViewById(2131100150));
    this.quizAnswersContainerLL = ((LinearLayout)this.mView.findViewById(2131100151));
    this.quizFeedbackContainerView = this.mView.findViewById(2131100152);
    this.quizFeedbackScrollView = ((ScrollView)this.mView.findViewById(2131100153));
    this.quizFeedbackAnswerTextView = ((TextView)this.mView.findViewById(2131100155));
    this.quizFeedbackNextButton = ((Button)this.mView.findViewById(2131100154));
    this.quizFeedbackNextButton.setOnClickListener(this.nextButtonClick);
    this.currentPointsAmount = ((TextView)this.mView.findViewById(2131100145));
    this.totalPassedAmount = ((TextView)this.mView.findViewById(2131100144));
    localObject = (TextView)this.mView.findViewById(2131100142);
    TextView localTextView = (TextView)this.mView.findViewById(2131100143);
    StyleUtil.setTextColor(this.quizQuestionDescriptionTextView, this.style);
    StyleUtil.setTextColor(this.quizFeedbackAnswerTextView, this.style);
    StyleUtil.setTextColor(this.currentPointsAmount, this.style);
    StyleUtil.setTextColor(this.totalPassedAmount, this.style);
    StyleUtil.setTextColor((TextView)localObject, this.style);
    StyleUtil.setTextColor(localTextView, this.style);
    initCurrentElement();
  }
  
  protected boolean initCurrentElement()
  {
    boolean bool2 = true;
    if (this.sharedQuizGamePlayerController.getCurrentElement() != null)
    {
      TransitionUtils.animateAppearingForView(getActivity(), this.quizAnswersContainerLL, "PUSH_FROM_RIGHT");
      TransitionUtils.animateAppearingForView(getActivity(), this.quizQuestionContainerView, "PUSH_FROM_RIGHT");
      this.quizAnswersContainerLL.removeAllViews();
      this.quizQuestionImageView.setImageDrawable(App.getDrawableResource(this.sharedQuizGamePlayerController.getCurrentElement().getQuestionImage()));
      this.quizQuestionDescriptionTextView.setText(this.sharedQuizGamePlayerController.getCurrentElement().getQuestionText());
      this.quizFeedbackScrollView.setBackgroundDrawable(App.getDrawableResource(this.sharedQuizGamePlayerController.getCurrentElement().getAnswerBgImage()));
      this.quizFeedbackAnswerTextView.setText(this.sharedQuizGamePlayerController.getCurrentElement().getAnswerText());
      this.quizFeedbackNextButton.setBackgroundDrawable(App.getDrawableResource(this.sharedQuizGamePlayerController.getCurrentElement().getChoiceBtnBgImage()));
      int i = 0;
      Iterator localIterator = this.sharedQuizGamePlayerController.getCurrentElement().getChoices().iterator();
      for (;;)
      {
        bool1 = bool2;
        if (!localIterator.hasNext()) {
          break;
        }
        Object localObject = ((QuizChoice)localIterator.next()).getText();
        Button localButton = new Button(getActivity());
        localButton.setText((CharSequence)localObject);
        localButton.setOnClickListener(this.answerButtonClick);
        localObject = new LinearLayout.LayoutParams(-1, -2);
        ((LinearLayout.LayoutParams)localObject).setMargins(10, 10, 10, 0);
        localButton.setLayoutParams((ViewGroup.LayoutParams)localObject);
        this.quizAnswersContainerLL.addView(localButton);
        localObject = new StateListDrawable();
        ColorDrawable localColorDrawable = new ColorDrawable(Color.parseColor("#e3bb87"));
        ((StateListDrawable)localObject).addState(new int[] { 16842919 }, localColorDrawable);
        localColorDrawable = new ColorDrawable(65280);
        ((StateListDrawable)localObject).addState(new int[] { 16842913 }, localColorDrawable);
        ((StateListDrawable)localObject).addState(StateSet.WILD_CARD, App.getDrawableResource(this.sharedQuizGamePlayerController.getCurrentElement().getChoiceBtnBgImage()));
        localButton.setBackgroundDrawable((Drawable)localObject);
        localButton.setTag(Integer.toString(i));
        i += 1;
      }
    }
    boolean bool1 = false;
    return bool1;
  }
  
  public void notifyAnswerWasCorrect(boolean paramBoolean)
  {
    if (paramBoolean) {}
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903196, paramViewGroup, false);
    init();
    this.mView.setBackgroundDrawable(App.getDrawableResource(this.sharedQuizGamePlayerController.getCurrentQuizBgImage()));
    StyleUtil.setBackground(this.mView, this.style);
    return this.mView;
  }
  
  public void processAnswer(int paramInt)
  {
    if (this.sharedQuizGamePlayerController.checkAnswer(paramInt))
    {
      this.sharedQuizGamePlayerController.addToCurrentPoints(this.sharedQuizGamePlayerController.getCurrentElement().getQuestionPoints().intValue());
      notifyAnswerWasCorrect(true);
    }
    for (;;)
    {
      getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          QuizPlayFragment.this.updatePointsLabel(QuizPlayFragment.this.sharedQuizGamePlayerController.getCurrentPoints());
          QuizPlayFragment.this.sharedQuizGamePlayerController.incrementCurrentQuizPassedQuestions();
          QuizPlayFragment.this.updatePassedQuestionsLabel(QuizPlayFragment.this.sharedQuizGamePlayerController.getCurrentQuizPassedQuestions(), QuizPlayFragment.this.sharedQuizGamePlayerController.getCurrentQuizTotalQuestions());
        }
      });
      return;
      notifyAnswerWasCorrect(false);
    }
  }
  
  public void returnToMainMenu()
  {
    App.closePage(this);
  }
  
  public void updatePassedQuestionsLabel(int paramInt1, int paramInt2)
  {
    String str = String.format("%d / %d", new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) });
    this.totalPassedAmount.setText(str);
  }
  
  public void updatePointsLabel(int paramInt)
  {
    String str = Integer.toString(paramInt);
    this.currentPointsAmount.setText(str);
  }
}
