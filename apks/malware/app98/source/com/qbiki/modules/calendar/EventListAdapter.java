package com.qbiki.modules.calendar;

import android.content.Context;
import android.graphics.Color;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;
import com.qbiki.util.DateUtil;
import com.qbiki.util.DeviceUtil;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class EventListAdapter
  extends BaseAdapter
{
  private static final String CATEGORY_COURT = "Court";
  private static final String CATEGORY_DETAIL = "Detail";
  private static final int SECTION_TEXT_COLOR = Color.parseColor("#AAAAAA");
  private static final int SECTION_TEXT_COLOR_TODAY = Color.parseColor("#FFFFFF");
  private Map<String, Integer> mCategoryColors;
  private Context mContext;
  private int mDefaultCategoryColor;
  private LayoutInflater mInflater;
  private List<EventListItem> mItems;
  private CategoryMarkerFactory mMarkerFactory;
  private java.text.DateFormat mTimeFormat;
  
  public EventListAdapter(Context paramContext, List<EventListItem> paramList, Map<String, Integer> paramMap, int paramInt)
  {
    this.mContext = paramContext;
    this.mInflater = LayoutInflater.from(paramContext);
    this.mTimeFormat = android.text.format.DateFormat.getTimeFormat(paramContext);
    this.mMarkerFactory = new CategoryMarkerFactory(paramContext);
    this.mItems = paramList;
    this.mCategoryColors = paramMap;
    this.mDefaultCategoryColor = paramInt;
  }
  
  private void bindEventView(View paramView, EventListItem paramEventListItem)
  {
    ViewHolder localViewHolder = (ViewHolder)paramView.getTag();
    paramView.setId((int)paramEventListItem.getId());
    String str = paramEventListItem.getCategory();
    Object localObject = (Integer)this.mCategoryColors.get(str);
    paramView = (View)localObject;
    if (localObject == null) {
      paramView = Integer.valueOf(this.mDefaultCategoryColor);
    }
    DeviceUtil.setBackground(localViewHolder.categoryMarker, this.mMarkerFactory.getCategoryMarker(paramView.intValue()));
    localViewHolder.title.setText(paramEventListItem.getTitle());
    if (str.equals("Court"))
    {
      localViewHolder.detail.setVisibility(0);
      localViewHolder.detail.setText(paramEventListItem.getCaseNumber());
      paramView = paramEventListItem.getLocation();
      if ((paramView != null) && (!paramView.equals(""))) {
        break label237;
      }
      localViewHolder.location.setVisibility(8);
    }
    for (;;)
    {
      localViewHolder.time.setVisibility(8);
      localViewHolder.ends.setVisibility(8);
      localViewHolder.allDay.setVisibility(8);
      if (!paramEventListItem.isAllDay()) {
        break label258;
      }
      localViewHolder.allDay.setVisibility(0);
      return;
      if (str.equals("Detail"))
      {
        localViewHolder.detail.setVisibility(0);
        localViewHolder.detail.setText(paramEventListItem.getReference());
        break;
      }
      localViewHolder.detail.setVisibility(8);
      break;
      label237:
      localViewHolder.location.setVisibility(0);
      localViewHolder.location.setText(paramView);
    }
    label258:
    paramView = paramEventListItem.getStartDate();
    localObject = paramEventListItem.getEndDate();
    if (DateUtil.isSameDay(paramView, paramEventListItem.getSection().getStartDate()))
    {
      localViewHolder.time.setVisibility(0);
      localViewHolder.time.setText(this.mTimeFormat.format(paramView));
      return;
    }
    if (DateUtil.isSameDay((Date)localObject, paramEventListItem.getSection().getStartDate()))
    {
      localViewHolder.ends.setVisibility(0);
      localViewHolder.time.setVisibility(0);
      localViewHolder.time.setText(this.mTimeFormat.format((Date)localObject));
      return;
    }
    localViewHolder.allDay.setVisibility(0);
  }
  
  private void bindSectionTitleView(EventListItem paramEventListItem, View paramView)
  {
    ViewHolder localViewHolder = (ViewHolder)paramView.getTag();
    String str2 = paramEventListItem.getTitle();
    String str3 = paramEventListItem.getCategory();
    boolean bool2 = DateUtil.isSameDay(new Date(), paramEventListItem.getStartDate());
    String str1 = str2;
    paramView = str3;
    boolean bool1 = bool2;
    if (str2 == null)
    {
      str1 = str2;
      paramView = str3;
      bool1 = bool2;
      if (str3 == null)
      {
        paramView = "";
        bool1 = bool2;
        if (bool2)
        {
          paramView = "" + this.mContext.getString(2131361918) + ", ";
          bool1 = true;
        }
        str1 = paramView + (String)android.text.format.DateFormat.format("EEEE", paramEventListItem.getStartDate());
        paramView = android.text.format.DateFormat.getMediumDateFormat(this.mContext).format(paramEventListItem.getStartDate());
        paramEventListItem.setTitle(str1);
        paramEventListItem.setCategory(paramView);
      }
    }
    if (bool1)
    {
      localViewHolder.title.setTextColor(SECTION_TEXT_COLOR_TODAY);
      localViewHolder.detail.setTextColor(SECTION_TEXT_COLOR_TODAY);
    }
    for (;;)
    {
      localViewHolder.title.setText(str1);
      localViewHolder.detail.setText(paramView);
      return;
      localViewHolder.title.setTextColor(SECTION_TEXT_COLOR);
      localViewHolder.detail.setTextColor(SECTION_TEXT_COLOR);
    }
  }
  
  public void bindView(View paramView, EventListItem paramEventListItem)
  {
    if (paramEventListItem.getType() == 0)
    {
      bindSectionTitleView(paramEventListItem, paramView);
      return;
    }
    bindEventView(paramView, paramEventListItem);
  }
  
  public void changeData(List<EventListItem> paramList)
  {
    this.mItems = paramList;
    notifyDataSetChanged();
  }
  
  public int getCount()
  {
    return this.mItems.size();
  }
  
  public Object getItem(int paramInt)
  {
    return this.mItems.get(paramInt);
  }
  
  public long getItemId(int paramInt)
  {
    return ((EventListItem)this.mItems.get(paramInt)).getId();
  }
  
  public int getItemViewType(int paramInt)
  {
    return ((EventListItem)this.mItems.get(paramInt)).getType();
  }
  
  public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    EventListItem localEventListItem = (EventListItem)getItem(paramInt);
    if (paramView == null) {
      paramView = newView(paramInt, paramViewGroup);
    }
    for (;;)
    {
      bindView(paramView, localEventListItem);
      return paramView;
    }
  }
  
  public int getViewTypeCount()
  {
    return 2;
  }
  
  public boolean isEnabled(int paramInt)
  {
    return getItemViewType(paramInt) != 0;
  }
  
  public View newView(int paramInt, ViewGroup paramViewGroup)
  {
    EventListItem localEventListItem = (EventListItem)getItem(paramInt);
    ViewHolder localViewHolder = new ViewHolder(null);
    if (localEventListItem.getType() == 0)
    {
      paramViewGroup = this.mInflater.inflate(2130903077, paramViewGroup, false);
      localViewHolder.title = ((TextView)paramViewGroup.findViewById(2131099804));
      localViewHolder.detail = ((TextView)paramViewGroup.findViewById(2131099805));
    }
    for (;;)
    {
      paramViewGroup.setTag(localViewHolder);
      return paramViewGroup;
      paramViewGroup = this.mInflater.inflate(2130903076, paramViewGroup, false);
      localViewHolder.title = ((TextView)paramViewGroup.findViewById(2131099801));
      localViewHolder.detail = ((TextView)paramViewGroup.findViewById(2131099802));
      localViewHolder.location = ((TextView)paramViewGroup.findViewById(2131099803));
      localViewHolder.time = ((TextView)paramViewGroup.findViewById(2131099799));
      localViewHolder.allDay = ((TextView)paramViewGroup.findViewById(2131099797));
      localViewHolder.ends = ((TextView)paramViewGroup.findViewById(2131099798));
      localViewHolder.categoryMarker = paramViewGroup.findViewById(2131099765);
    }
  }
  
  private static class ViewHolder
  {
    public TextView allDay;
    public View categoryMarker;
    public TextView detail;
    public TextView ends;
    public TextView location;
    public TextView time;
    public TextView title;
    
    private ViewHolder() {}
  }
}
