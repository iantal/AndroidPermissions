package com.qbiki.modules.calendar;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DateUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.widget.DateTimePicker;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

public class EventEditActivity
  extends SCActivity
{
  private static final String CATEGORY_COMP_TIME_EARNED = "Comp Time Earned";
  private static final String CATEGORY_COMP_TIME_USED = "Comp Time Used";
  private static final String CATEGORY_COURT = "Court";
  private static final String CATEGORY_DETAIL = "Detail";
  private static final String CATEGORY_FURLOUGH_DAY = "Furlough Day";
  private static final String CATEGORY_SICK_TIME = "Sick Time";
  private static final String CATEGORY_WORK = "Work";
  private static final int DAYS_ON_DAYS_OFF_PAIRS_COUNT = 6;
  private static final int DAYS_ON_DAYS_OFF_PAIRS_START_ID = 2131300353;
  private static final long NON_EXISTENT_EVENT_ID = -1L;
  public static final int RESULT_DELETED = 102;
  public static final int RESULT_SAVED = 101;
  private boolean isSyncedEvent = false;
  private CheckBox mAllDayCheckBox;
  private View mCaseNumberFieldContainer;
  private EditText mCaseNumberText;
  private Spinner mCategorySpinner;
  private List<EditText> mDaysOffFields = new ArrayList();
  private ViewGroup mDaysOnDaysOffFieldsContainer = null;
  private List<EditText> mDaysOnFields = new ArrayList();
  private DatabaseHelper mDbHelper;
  private String mDescription = "";
  private DateTimePicker mEndDatePicker;
  private Long mEventId = null;
  private View mLocationFieldContainer;
  private EditText mLocationText;
  private String mRecurringEventId = null;
  private View mReferenceFieldContainer;
  private EditText mReferenceText;
  private DateTimePicker mStartDatePicker;
  private EditText mTitleText;
  
  public EventEditActivity() {}
  
  private void configureFieldsForCurrentCategory()
  {
    this.mReferenceFieldContainer.setVisibility(8);
    this.mCaseNumberFieldContainer.setVisibility(8);
    this.mLocationFieldContainer.setVisibility(8);
    String str = this.mCategorySpinner.getSelectedItem().toString();
    if ((!str.equals("Sick Time")) && (!str.equals("Comp Time Used")) && (!str.equals("Comp Time Earned")) && (!str.equals("Furlough Day"))) {
      this.mLocationFieldContainer.setVisibility(0);
    }
    if (str.equals("Court")) {
      this.mCaseNumberFieldContainer.setVisibility(0);
    }
    while (str.equals("Work"))
    {
      setAllDayEnabled(true);
      if (this.mEventId.longValue() == -1L) {
        showDaysOnDaysOffFields();
      }
      return;
      if (str.equals("Detail")) {
        this.mReferenceFieldContainer.setVisibility(0);
      }
    }
    hideDaysOnDaysOffFields();
  }
  
  private void createDaysOnDaysOffFields()
  {
    LayoutInflater localLayoutInflater = getLayoutInflater();
    this.mDaysOnDaysOffFieldsContainer = ((ViewGroup)findViewById(2131099789));
    int i = 0;
    while (i < 6)
    {
      View localView = localLayoutInflater.inflate(2130903074, null);
      localView.setId(2131300353 + i);
      Object localObject = (TextView)localView.findViewById(2131099769);
      ((TextView)localObject).setText(((TextView)localObject).getText().toString() + " " + (i + 1));
      localObject = (TextView)localView.findViewById(2131099770);
      ((TextView)localObject).setText(((TextView)localObject).getText().toString() + " " + (i + 1));
      localObject = (EditText)localView.findViewById(2131099772);
      ((EditText)localObject).setId(2131300453 + i);
      ((EditText)localObject).setNextFocusDownId(2131300553 + i);
      ((EditText)localObject).setHint(((EditText)localObject).getHint().toString() + " " + (i + 1));
      this.mDaysOnFields.add(localObject);
      localObject = (EditText)localView.findViewById(2131099773);
      ((EditText)localObject).setId(2131300553 + i);
      ((EditText)localObject).setHint(((EditText)localObject).getHint().toString() + " " + (i + 1));
      if (i != 5) {
        ((EditText)localObject).setNextFocusDownId(2131300453 + i + 1);
      }
      this.mDaysOffFields.add(localObject);
      this.mDaysOnDaysOffFieldsContainer.addView(localView);
      i += 1;
    }
  }
  
  private void disableViewGroupChildren(ViewGroup paramViewGroup)
  {
    int i = 0;
    while (i < paramViewGroup.getChildCount())
    {
      View localView = paramViewGroup.getChildAt(i);
      localView.setEnabled(false);
      if ((localView instanceof ViewGroup)) {
        disableViewGroupChildren((ViewGroup)localView);
      }
      i += 1;
    }
  }
  
  private void generateWorkEvents()
  {
    StringBuilder localStringBuilder = new StringBuilder(getString(2131361990));
    final ArrayList localArrayList1 = new ArrayList();
    final ArrayList localArrayList2 = new ArrayList();
    int m = DateUtil.getDaysBetweenDates(this.mStartDatePicker.getCalendar(), this.mEndDatePicker.getCalendar(), true) + 1;
    int k = 0;
    Object localObject = this.mStartDatePicker.getDate();
    Date localDate1 = DateUtil.getDateByCopyingTime((Date)localObject, this.mEndDatePicker.getCalendar().getTime());
    if (k < m)
    {
      int j = 0;
      int i = k;
      for (;;)
      {
        k = i;
        if (j >= this.mDaysOnFields.size()) {
          break;
        }
        int n = getDaysOn(j);
        k = 0;
        while ((k < n) && (i < m))
        {
          Date localDate2 = DateUtil.getDateByAddingDaysToDate((Date)localObject, i);
          localArrayList1.add(localDate2);
          localArrayList2.add(DateUtil.getDateByAddingDaysToDate(localDate1, i));
          i += 1;
          localStringBuilder.append(DateFormat.format("MMM d, ", localDate2));
          k += 1;
        }
        i += getDaysOff(j);
        j += 1;
      }
    }
    localObject = new AlertDialog.Builder(this);
    ((AlertDialog.Builder)localObject).setMessage(localStringBuilder.substring(0, localStringBuilder.length() - 2)).setTitle(2131361914).setIcon(17301659).setCancelable(true).setPositiveButton(17039370, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = UUID.randomUUID().toString();
        paramAnonymousInt = 0;
        while (paramAnonymousInt < localArrayList1.size())
        {
          EventEditActivity.this.mDbHelper.insertEvent(paramAnonymousDialogInterface, EventEditActivity.this.mTitleText.getText().toString(), EventEditActivity.this.mCategorySpinner.getSelectedItem().toString(), EventEditActivity.this.mLocationText.getText().toString(), (Date)localArrayList1.get(paramAnonymousInt), (Date)localArrayList2.get(paramAnonymousInt), EventEditActivity.this.mAllDayCheckBox.isChecked(), EventEditActivity.this.mCaseNumberText.getText().toString(), EventEditActivity.this.mReferenceText.getText().toString());
          paramAnonymousInt += 1;
        }
        EventEditActivity.this.setResult(101);
        EventEditActivity.this.finish();
      }
    }).setNegativeButton(17039360, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    ((AlertDialog.Builder)localObject).create().show();
  }
  
  private int getDaysOff(int paramInt)
  {
    try
    {
      paramInt = Integer.parseInt(((EditText)this.mDaysOffFields.get(paramInt)).getText().toString());
      return paramInt;
    }
    catch (NumberFormatException localNumberFormatException) {}
    return 0;
  }
  
  private int getDaysOn(int paramInt)
  {
    try
    {
      paramInt = Integer.parseInt(((EditText)this.mDaysOnFields.get(paramInt)).getText().toString());
      return paramInt;
    }
    catch (NumberFormatException localNumberFormatException) {}
    return 0;
  }
  
  private void hideDaysOnDaysOffFields()
  {
    if (this.mDaysOnDaysOffFieldsContainer != null) {
      this.mDaysOnDaysOffFieldsContainer.setVisibility(8);
    }
  }
  
  private void initActions()
  {
    ((Button)findViewById(2131099793)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (EventEditActivity.this.mEndDatePicker.getCalendar().compareTo(EventEditActivity.this.mStartDatePicker.getCalendar()) < 0)
        {
          DialogUtil.showAlert(EventEditActivity.this, 2131361916, 2131361989);
          return;
        }
        if ((EventEditActivity.this.mCategorySpinner.getSelectedItem().toString().equals("Work")) && (EventEditActivity.this.getDaysOn(0) != 0) && (EventEditActivity.this.getDaysOff(0) != 0) && (!DateUtil.isSameDay(EventEditActivity.this.mStartDatePicker.getCalendar(), EventEditActivity.this.mEndDatePicker.getCalendar())))
        {
          EventEditActivity.this.generateWorkEvents();
          return;
        }
        if (EventEditActivity.this.mEventId.longValue() == -1L) {
          EventEditActivity.this.mDbHelper.insertEvent(EventEditActivity.this.mRecurringEventId, EventEditActivity.this.mTitleText.getText().toString(), EventEditActivity.this.mCategorySpinner.getSelectedItem().toString(), EventEditActivity.this.mLocationText.getText().toString(), EventEditActivity.this.mStartDatePicker.getDate(), EventEditActivity.this.mEndDatePicker.getDate(), EventEditActivity.this.mAllDayCheckBox.isChecked(), EventEditActivity.this.mCaseNumberText.getText().toString(), EventEditActivity.this.mReferenceText.getText().toString());
        }
        for (;;)
        {
          EventEditActivity.this.setResult(101);
          EventEditActivity.this.finish();
          return;
          EventEditActivity.this.mDbHelper.updateEvent(EventEditActivity.this.mEventId.longValue(), EventEditActivity.this.mRecurringEventId, EventEditActivity.this.mTitleText.getText().toString(), EventEditActivity.this.mCategorySpinner.getSelectedItem().toString(), EventEditActivity.this.mLocationText.getText().toString(), EventEditActivity.this.mStartDatePicker.getDate(), EventEditActivity.this.mEndDatePicker.getDate(), EventEditActivity.this.mAllDayCheckBox.isChecked(), EventEditActivity.this.mCaseNumberText.getText().toString(), EventEditActivity.this.mReferenceText.getText().toString());
        }
      }
    });
    ((Button)findViewById(2131099794)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        EventEditActivity.this.setResult(0);
        EventEditActivity.this.finish();
      }
    });
    Button localButton = (Button)findViewById(2131099795);
    localButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        EventDeleteDialog.show(EventEditActivity.this, EventEditActivity.this.mDbHelper, EventEditActivity.this.mEventId.longValue(), EventEditActivity.this.mRecurringEventId, new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
          {
            EventEditActivity.this.setResult(102);
            EventEditActivity.this.finish();
          }
        });
      }
    });
    if (this.mEventId.longValue() == -1L) {
      localButton.setVisibility(8);
    }
    this.mAllDayCheckBox.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        EventEditActivity.this.setAllDayEnabled(((CheckBox)paramAnonymousView).isChecked());
      }
    });
    this.mCategorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        EventEditActivity.this.configureFieldsForCurrentCategory();
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
    ((Button)findViewById(2131099791)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if ((EventEditActivity.this.mDescription != null) && (EventEditActivity.this.mDescription.trim().length() != 0))
        {
          if (!EventEditActivity.this.mDescription.startsWith("local://")) {
            break label56;
          }
          App.showPage(EventEditActivity.this.mDescription, EventEditActivity.this);
        }
        label56:
        while (!EventEditActivity.this.mDescription.startsWith("html:")) {
          return;
        }
        paramAnonymousView = App.getHtmlPageFragmentInfo(null);
        paramAnonymousView.getRawArguments().putString("ARG_HTML_STRING", EventEditActivity.this.mDescription.substring(5));
        EventEditActivity.this.startActivity(App.getPageIntent(paramAnonymousView, EventEditActivity.this));
      }
    });
  }
  
  private void initCategories()
  {
    Object localObject2 = null;
    Object localObject3 = getIntent().getExtras();
    Object localObject1 = localObject2;
    if (localObject3 != null)
    {
      localObject3 = ((Bundle)localObject3).getStringArrayList("categories");
      localObject1 = localObject2;
      if (localObject3 != null)
      {
        localObject1 = localObject2;
        if (((ArrayList)localObject3).size() != 0) {
          localObject1 = (String[])((ArrayList)localObject3).toArray(new String[0]);
        }
      }
    }
    localObject2 = localObject1;
    if (localObject1 == null)
    {
      localObject2 = new String[1];
      localObject2[0] = "";
    }
    localObject1 = new ArrayAdapter(this, 17367048, (Object[])localObject2);
    ((ArrayAdapter)localObject1).setDropDownViewResource(17367049);
    this.mCategorySpinner.setAdapter((SpinnerAdapter)localObject1);
    this.mCategorySpinner.setSelection(localObject2.length - 1);
  }
  
  private void initDbHelper()
  {
    String str = null;
    Object localObject = getIntent().getExtras();
    if (localObject != null) {
      str = ((Bundle)localObject).getString("databaseName");
    }
    if (str != null)
    {
      localObject = str;
      if (!str.trim().equals("")) {}
    }
    else
    {
      localObject = "calendar.db";
    }
    this.mDbHelper = new DatabaseHelper(this, (String)localObject);
  }
  
  private void populateFields()
  {
    Date localDate2 = new Date();
    Object localObject = getIntent().getExtras();
    Date localDate1 = localDate2;
    if (localObject != null)
    {
      this.mEventId = Long.valueOf(((Bundle)localObject).getLong("_id", -1L));
      localObject = Long.valueOf(((Bundle)localObject).getLong("startDate"));
      localDate1 = localDate2;
      if (localObject != null) {
        localDate1 = new Date(((Long)localObject).longValue());
      }
    }
    if (this.mEventId.longValue() == -1L)
    {
      localObject = Calendar.getInstance();
      ((Calendar)localObject).setTime(localDate1);
      ((Calendar)localObject).set(12, 0);
      ((Calendar)localObject).set(13, 0);
      ((Calendar)localObject).set(14, 0);
      ((Calendar)localObject).add(11, 1);
      localDate2 = ((Calendar)localObject).getTime();
      ((Calendar)localObject).add(11, 1);
      localDate1 = ((Calendar)localObject).getTime();
      this.mStartDatePicker.setDate(localDate2);
      this.mEndDatePicker.setDate(localDate1);
      return;
    }
    localObject = this.mDbHelper.fetchEventById(this.mEventId.longValue());
    this.mTitleText.setText(((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("title")));
    localDate2 = new Date(((Cursor)localObject).getLong(((Cursor)localObject).getColumnIndex("start_date")));
    localDate1 = new Date(((Cursor)localObject).getLong(((Cursor)localObject).getColumnIndex("end_date")));
    label288:
    int i;
    if (((Cursor)localObject).getInt(((Cursor)localObject).getColumnIndex("is_all_day")) == 1)
    {
      bool = true;
      setAllDayEnabled(bool);
      String str = ((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("category"));
      i = 0;
      label314:
      if (i < this.mCategorySpinner.getCount())
      {
        if (!str.equals(this.mCategorySpinner.getItemAtPosition(i).toString())) {
          break label509;
        }
        this.mCategorySpinner.setSelection(i);
      }
      this.mLocationText.setText(((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("location")));
      this.mReferenceText.setText(((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("reference")));
      this.mCaseNumberText.setText(((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("case_number")));
      this.mRecurringEventId = ((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("recurring_event_id"));
      if (((Cursor)localObject).getInt(((Cursor)localObject).getColumnIndex("is_synced_event")) != 1) {
        break label516;
      }
    }
    label509:
    label516:
    for (boolean bool = true;; bool = false)
    {
      this.isSyncedEvent = bool;
      this.mDescription = ((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("description"));
      ((Cursor)localObject).close();
      break;
      bool = false;
      break label288;
      i += 1;
      break label314;
    }
  }
  
  private void setAllDayEnabled(boolean paramBoolean)
  {
    this.mAllDayCheckBox.setChecked(paramBoolean);
    if (paramBoolean)
    {
      this.mStartDatePicker.setMode(1);
      this.mEndDatePicker.setMode(1);
      return;
    }
    this.mStartDatePicker.setMode(0);
    this.mEndDatePicker.setMode(0);
  }
  
  private void showDaysOnDaysOffFields()
  {
    if (this.mDaysOnDaysOffFieldsContainer == null) {
      createDaysOnDaysOffFields();
    }
    this.mDaysOnDaysOffFieldsContainer.setVisibility(0);
    ((EditText)this.mDaysOnFields.get(0)).requestFocus();
  }
  
  private void updateUiForSyncedEvent()
  {
    findViewById(2131099792).setVisibility(8);
    ((ViewGroup)findViewById(2131099775)).setEnabled(false);
    View localView = findViewById(2131099791);
    localView.setVisibility(0);
    localView.setEnabled(true);
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903075);
    this.mTitleText = ((EditText)findViewById(2131099776));
    this.mCategorySpinner = ((Spinner)findViewById(2131099777));
    this.mReferenceText = ((EditText)findViewById(2131099779));
    this.mReferenceFieldContainer = findViewById(2131099778);
    this.mCaseNumberText = ((EditText)findViewById(2131099781));
    this.mCaseNumberFieldContainer = findViewById(2131099780);
    this.mLocationText = ((EditText)findViewById(2131099783));
    this.mLocationFieldContainer = findViewById(2131099782);
    this.mStartDatePicker = ((DateTimePicker)findViewById(2131099784));
    this.mEndDatePicker = ((DateTimePicker)findViewById(2131099785));
    this.mAllDayCheckBox = ((CheckBox)findViewById(2131099788));
    initCategories();
    initDbHelper();
    createDaysOnDaysOffFields();
    populateFields();
    configureFieldsForCurrentCategory();
    initActions();
    if (this.isSyncedEvent) {
      updateUiForSyncedEvent();
    }
    getWindow().setSoftInputMode(3);
  }
  
  protected void onDestroy()
  {
    if (this.mDbHelper != null) {
      this.mDbHelper.close();
    }
    super.onDestroy();
  }
}
