package com.qbiki.modules.voicerecord;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DialogUtil;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

public class VoiceRecordPickerActivity
  extends SCActivity
{
  private String emailToSend = "";
  private boolean hasRecorded = false;
  private boolean onExternal = false;
  private Timer progressUpdateTimer = null;
  private ImageButton recordButton = null;
  private Drawable recordGrey = null;
  private String recordName = null;
  private boolean recordOnOpen = false;
  private Drawable recordRed = null;
  private long recordTime = 0L;
  private MediaRecorder recorder = null;
  private boolean recorderReady = false;
  private boolean recording = false;
  private String savePath = null;
  private boolean sendonly = false;
  private ImageButton stopButton = null;
  private TextView timeLabel = null;
  
  public VoiceRecordPickerActivity() {}
  
  private void createResultINtentAndClose()
  {
    Intent localIntent = new Intent();
    localIntent.putExtra("filePath", this.savePath + "/" + this.recordName);
    localIntent.putExtra("savePath", this.savePath);
    localIntent.putExtra("recordName", this.recordName);
    setResult(-1, localIntent);
    finish();
  }
  
  private void prepareRecorder()
  {
    if ((!getPackageManager().hasSystemFeature("android.hardware.microphone")) && (Integer.parseInt(Build.VERSION.SDK) > 7))
    {
      this.recordButton.setEnabled(false);
      this.stopButton.setEnabled(false);
      Toast.makeText(this, getResources().getString(2131362079), 1).show();
      this.recorderReady = false;
      return;
    }
    this.recordButton.setImageDrawable(this.recordRed);
    this.recordButton.setEnabled(true);
    this.stopButton.setEnabled(false);
    this.recordTime = 0L;
    this.timeLabel.setText("00:00:00");
    String str = this.savePath + "/" + this.recordName;
    if (this.recorder != null)
    {
      this.recorder.reset();
      this.recorder.release();
      this.recorder = null;
    }
    this.recorder = new MediaRecorder();
    this.recorder.setAudioSource(1);
    this.recorder.setOutputFormat(1);
    this.recorder.setAudioEncoder(1);
    this.recorder.setOutputFile(str);
    try
    {
      this.recorder.prepare();
      this.recorderReady = true;
      return;
    }
    catch (Exception localException)
    {
      this.recorderReady = false;
      Log.d("SCVoiceRecordPicker", "Exception", localException);
    }
  }
  
  @TargetApi(9)
  private void setOrientation()
  {
    if ((Build.VERSION.SDK_INT >= 9) && (App.rotationEnabled))
    {
      setRequestedOrientation(7);
      return;
    }
    setRequestedOrientation(1);
  }
  
  private void showMailForm()
  {
    if (this.onExternal)
    {
      Intent localIntent = new Intent("android.intent.action.SEND");
      localIntent.putExtra("android.intent.extra.EMAIL", new String[] { this.emailToSend });
      localIntent.setType("audio/x-wav");
      localIntent.putExtra("android.intent.extra.STREAM", Uri.fromFile(new File(this.savePath + "/" + this.recordName)));
      localIntent.putExtra("android.intent.extra.SUBJECT", "Voice record from " + App.appId);
      startActivity(localIntent);
      return;
    }
    DialogUtil.showAlert(this, "Info", "Can not send voice record from internal storage.");
  }
  
  private void startRecording()
  {
    this.recording = true;
    this.hasRecorded = false;
    startTimer();
    if (this.recorder == null) {
      prepareRecorder();
    }
    this.recorder.start();
    this.stopButton.setEnabled(true);
    this.recordButton.setEnabled(false);
    invalidateSupportOptionsMenu();
  }
  
  private void startTimer()
  {
    if (this.progressUpdateTimer == null)
    {
      this.progressUpdateTimer = new Timer();
      this.progressUpdateTimer.schedule(new TimerTask()
      {
        public void run()
        {
          VoiceRecordPickerActivity.access$314(VoiceRecordPickerActivity.this, 500L);
          VoiceRecordPickerActivity.this.runOnUiThread(new Runnable()
          {
            public void run()
            {
              VoiceRecordPickerActivity.this.updateFromTimer();
            }
          });
        }
      }, 500L, 500L);
    }
  }
  
  private void stopRecording()
  {
    if (this.recording) {
      this.recorder.stop();
    }
    this.hasRecorded = true;
    this.recording = false;
    stopTimer();
    this.stopButton.setEnabled(false);
    this.recordButton.setEnabled(false);
    if (this.recordOnOpen) {
      createResultINtentAndClose();
    }
    if (!isFinishing()) {
      invalidateSupportOptionsMenu();
    }
  }
  
  private void stopTimer()
  {
    if (this.progressUpdateTimer != null)
    {
      this.progressUpdateTimer.cancel();
      this.progressUpdateTimer.purge();
      this.progressUpdateTimer = null;
    }
  }
  
  @SuppressLint({"DefaultLocale"})
  public String millisToHoursMinutesSecondsString(long paramLong)
  {
    String str3 = String.format("%%0%dd", new Object[] { Integer.valueOf(2) });
    paramLong /= 1000L;
    String str1 = String.format(str3, new Object[] { Long.valueOf(paramLong % 60L) });
    String str2 = String.format(str3, new Object[] { Long.valueOf(paramLong % 3600L / 60L) });
    str3 = String.format(str3, new Object[] { Long.valueOf(paramLong / 3600L) });
    return str3 + ":" + str2 + ":" + str1;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setOrientation();
    setContentView(2130903237);
    setResult(0);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null)
    {
      this.sendonly = paramBundle.getBoolean("sendonly");
      this.emailToSend = paramBundle.getString("emailToSend");
      this.recordName = paramBundle.getString("recordName");
      this.savePath = paramBundle.getString("recordName");
      this.recordOnOpen = paramBundle.getBoolean("recordOnOpen", false);
    }
    if ((this.savePath == null) || (this.savePath.length() == 0))
    {
      if (!App.isExternalStorageWritable()) {
        break label361;
      }
      this.savePath = App.getAppExternalStoragePath();
      this.onExternal = true;
    }
    for (;;)
    {
      this.savePath += "/VoiceRecords";
      paramBundle = new File(this.savePath);
      if (!paramBundle.exists()) {
        paramBundle.mkdirs();
      }
      if ((this.recordName == null) || (this.recordName.length() == 0))
      {
        paramBundle = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss").format(new Date());
        this.recordName = (paramBundle + ".wav");
      }
      if (this.emailToSend == null) {
        this.emailToSend = "";
      }
      this.timeLabel = ((TextView)findViewById(2131100257));
      this.recordButton = ((ImageButton)findViewById(2131100256));
      this.recordButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if (!VoiceRecordPickerActivity.this.recording) {
            VoiceRecordPickerActivity.this.startRecording();
          }
        }
      });
      this.stopButton = ((ImageButton)findViewById(2131100258));
      this.stopButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if (VoiceRecordPickerActivity.this.recording) {
            VoiceRecordPickerActivity.this.stopRecording();
          }
        }
      });
      this.stopButton.setEnabled(false);
      this.recordRed = getResources().getDrawable(2130837766);
      this.recordGrey = getResources().getDrawable(2130837767);
      prepareRecorder();
      return;
      label361:
      this.savePath = App.getAppProtectedStoragePath();
    }
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getSupportMenuInflater().inflate(2131558440, paramMenu);
    if (this.sendonly) {
      paramMenu.findItem(2131100332).setTitle(2131362072);
    }
    return super.onCreateOptionsMenu(paramMenu);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100332: 
      if (this.sendonly)
      {
        showMailForm();
        return true;
      }
      createResultINtentAndClose();
      return true;
    case 2131100333: 
      if (this.recorder != null) {
        this.recorder.reset();
      }
      this.hasRecorded = false;
      prepareRecorder();
      invalidateSupportOptionsMenu();
      return true;
    }
    setResult(0);
    finish();
    return true;
  }
  
  protected void onPause()
  {
    if ((this.recording) && (this.recorder != null)) {
      stopRecording();
    }
    super.onPause();
  }
  
  public boolean onPrepareOptionsMenu(Menu paramMenu)
  {
    if (this.recording)
    {
      paramMenu.findItem(2131100333).setEnabled(false);
      paramMenu.findItem(2131100333).setVisible(false);
      if (this.hasRecorded) {
        break label119;
      }
      paramMenu.findItem(2131100332).setEnabled(false);
      paramMenu.findItem(2131100332).setVisible(false);
    }
    for (;;)
    {
      return super.onPrepareOptionsMenu(paramMenu);
      paramMenu.findItem(2131100333).setEnabled(true);
      paramMenu.findItem(2131100333).setVisible(true);
      break;
      label119:
      paramMenu.findItem(2131100332).setEnabled(true);
      paramMenu.findItem(2131100332).setVisible(true);
    }
  }
  
  protected void onResume()
  {
    if ((this.recordOnOpen) && (this.recorderReady)) {
      startRecording();
    }
    super.onResume();
  }
  
  protected void onStop()
  {
    if (this.recorder != null)
    {
      this.recorder.release();
      this.recorder = null;
    }
    super.onStop();
  }
  
  public void updateFromTimer()
  {
    if (this.recordTime - (int)this.recordTime == 0L)
    {
      if (this.recordButton.getDrawable() != this.recordRed) {
        break label57;
      }
      this.recordButton.setImageDrawable(this.recordGrey);
    }
    for (;;)
    {
      this.timeLabel.setText(millisToHoursMinutesSecondsString(this.recordTime));
      return;
      label57:
      this.recordButton.setImageDrawable(this.recordRed);
    }
  }
}
