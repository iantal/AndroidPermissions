package com.qbiki.modules.voicerecord;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.Html;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class SCVoiceRecordListFragment
  extends SCFragment
{
  public static final int REQUEST_VOICERECORD = 2;
  private String emailToSend = "";
  private View fView = null;
  private VoiceRecordListAdapter recordAdapter;
  private ArrayList<Map<String, String>> voiceRecords = new ArrayList();
  private ListView voicerecordListView = null;
  
  public SCVoiceRecordListFragment() {}
  
  private void addInternalList(File[] paramArrayOfFile)
  {
    int j = paramArrayOfFile.length;
    int i = 0;
    while (i < j)
    {
      File localFile = paramArrayOfFile[i];
      HashMap localHashMap = new HashMap();
      localHashMap.put("recordName", localFile.getName());
      localHashMap.put("filePath", localFile.getAbsolutePath());
      this.voiceRecords.add(localHashMap);
      this.recordAdapter.addItem(localFile.getName());
      i += 1;
    }
  }
  
  private void copyToSDCard(File[] paramArrayOfFile)
  {
    String str = App.getAppExternalStoragePath();
    str = str + "/VoiceRecords";
    int j = paramArrayOfFile.length;
    int i = 0;
    for (;;)
    {
      if (i < j)
      {
        Object localObject = paramArrayOfFile[i];
        File localFile = new File(str + "/" + ((File)localObject).getName());
        try
        {
          copy((File)localObject, localFile);
          ((File)localObject).delete();
          localObject = new HashMap();
          ((Map)localObject).put("recordName", localFile.getName());
          ((Map)localObject).put("filePath", localFile.getAbsolutePath());
          this.voiceRecords.add(localObject);
          this.recordAdapter.addItem(localFile.getName());
          i += 1;
        }
        catch (IOException localIOException)
        {
          for (;;)
          {
            Log.d("SCVoiceRecordList", "Exception", localIOException);
          }
        }
      }
    }
  }
  
  private void createFileList()
  {
    Object localObject1 = new FileFilter()
    {
      public boolean accept(File paramAnonymousFile)
      {
        return paramAnonymousFile.getName().indexOf(".wav") > 0;
      }
    };
    boolean bool1 = false;
    if (App.isExternalStorageWritable())
    {
      boolean bool2 = true;
      localObject2 = App.getAppExternalStoragePath();
      localObject2 = new File((String)localObject2 + "/VoiceRecords");
      bool1 = bool2;
      if (((File)localObject2).exists())
      {
        localObject2 = ((File)localObject2).listFiles((FileFilter)localObject1);
        int j = localObject2.length;
        int i = 0;
        for (;;)
        {
          bool1 = bool2;
          if (i >= j) {
            break;
          }
          Object localObject3 = localObject2[i];
          HashMap localHashMap = new HashMap();
          localHashMap.put("recordName", localObject3.getName());
          localHashMap.put("filePath", localObject3.getAbsolutePath());
          this.voiceRecords.add(localHashMap);
          this.recordAdapter.addItem(localObject3.getName());
          i += 1;
        }
      }
    }
    Object localObject2 = App.getAppProtectedStoragePath();
    localObject2 = new File((String)localObject2 + "/VoiceRecords");
    if (((File)localObject2).exists())
    {
      localObject1 = ((File)localObject2).listFiles((FileFilter)localObject1);
      if (localObject1.length > 0) {
        proposeToMoveOnExternalIfAvailable((File[])localObject1, bool1);
      }
    }
  }
  
  private void openVoiceRecorder()
  {
    openVoiceRecorder(false);
  }
  
  private void openVoiceRecorder(boolean paramBoolean)
  {
    Intent localIntent = new Intent(getActivity(), VoiceRecordPickerActivity.class);
    localIntent.putExtra("recordOnOpen", paramBoolean);
    startActivityForResult(localIntent, 2);
  }
  
  private void proposeToMoveOnExternalIfAvailable(final File[] paramArrayOfFile, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
      localBuilder.setMessage("Copy internal records to SD Card.").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          SCVoiceRecordListFragment.this.copyToSDCard(paramArrayOfFile);
        }
      }).setNegativeButton("No", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          SCVoiceRecordListFragment.this.addInternalList(paramArrayOfFile);
          paramAnonymousDialogInterface.cancel();
        }
      });
      localBuilder.create().show();
      return;
    }
    addInternalList(paramArrayOfFile);
  }
  
  private void sendAll()
  {
    int k = 0;
    Intent localIntent = new Intent("android.intent.action.SEND_MULTIPLE");
    localIntent.setType("audio/x-wav");
    localIntent.putExtra("android.intent.extra.EMAIL", new String[] { this.emailToSend });
    String str1 = "Voice records: <br />";
    ArrayList localArrayList = new ArrayList();
    int j = 0;
    int i = 0;
    if (i < this.voiceRecords.size())
    {
      String str2 = (String)((Map)this.voiceRecords.get(i)).get("recordName");
      File localFile = new File(App.getAppExternalStoragePath() + "/VoiceRecords/" + str2);
      if (localFile.exists())
      {
        j += 1;
        localArrayList.add(Uri.fromFile(localFile));
        str1 = str1 + j + ". " + str2 + "<br />";
      }
      for (;;)
      {
        i += 1;
        break;
        k = 1;
      }
    }
    localIntent.putExtra("android.intent.extra.TEXT", Html.fromHtml(str1).toString());
    localIntent.putParcelableArrayListExtra("android.intent.extra.STREAM", localArrayList);
    startActivity(Intent.createChooser(localIntent, null));
    if (k != 0) {
      DialogUtil.showAlert(getActivity(), "Info", "Can not send voice record from internal storage.");
    }
  }
  
  private void showDeleteConfirmDialog(final int paramInt)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(getActivity());
    localBuilder.setMessage("Are you sure you want to delete this item?").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        if (new File((String)((Map)SCVoiceRecordListFragment.this.voiceRecords.get(paramInt)).get("filePath")).delete())
        {
          SCVoiceRecordListFragment.this.voiceRecords.remove(paramInt);
          SCVoiceRecordListFragment.this.recordAdapter.removeItemAt(paramInt);
          if (SCVoiceRecordListFragment.this.voiceRecords.size() == 0) {
            SCVoiceRecordListFragment.this.recordAdapter.addItem("No records.");
          }
        }
      }
    }).setNegativeButton("No", new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface.cancel();
      }
    });
    localBuilder.create().show();
  }
  
  private void showMailForm(int paramInt)
  {
    Object localObject = (String)((Map)this.voiceRecords.get(paramInt)).get("recordName");
    String str = (String)((Map)this.voiceRecords.get(paramInt)).get("filePath");
    if (new File(App.getAppExternalStoragePath() + "/VoiceRecords/" + (String)localObject).exists())
    {
      localObject = new Intent("android.intent.action.SEND");
      ((Intent)localObject).putExtra("android.intent.extra.EMAIL", new String[] { this.emailToSend });
      ((Intent)localObject).setType("audio/x-wav");
      ((Intent)localObject).putExtra("android.intent.extra.STREAM", Uri.fromFile(new File(str)));
      ((Intent)localObject).putExtra("android.intent.extra.SUBJECT", "Voice record from " + App.appId);
      startActivity((Intent)localObject);
      return;
    }
    Toast.makeText(getActivity(), "Some record cannot be attached.", 0).show();
  }
  
  void copy(File paramFile1, File paramFile2)
    throws IOException
  {
    paramFile1 = new FileInputStream(paramFile1);
    paramFile2 = new FileOutputStream(paramFile2);
    byte[] arrayOfByte = new byte['Ð€'];
    for (;;)
    {
      int i = paramFile1.read(arrayOfByte);
      if (i <= 0) {
        break;
      }
      paramFile2.write(arrayOfByte, 0, i);
    }
    paramFile1.close();
    paramFile2.close();
  }
  
  protected void init()
  {
    this.recordAdapter = new VoiceRecordListAdapter(getActivity());
    this.voicerecordListView = ((ListView)this.fView.findViewById(2131100254));
    this.voicerecordListView.setAdapter(this.recordAdapter);
    this.voicerecordListView.setLongClickable(true);
    this.voicerecordListView.setSaveEnabled(false);
    this.voicerecordListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (SCVoiceRecordListFragment.this.voiceRecords.size() > 0)
        {
          SCVoiceRecordListFragment.this.showDeleteConfirmDialog(paramAnonymousInt);
          return false;
        }
        return true;
      }
    });
    this.voicerecordListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (SCVoiceRecordListFragment.this.voiceRecords.size() > 0) {
          SCVoiceRecordListFragment.this.showMailForm(paramAnonymousInt);
        }
      }
    });
    createFileList();
    if (this.voiceRecords.size() == 0) {
      this.recordAdapter.addItem("No records.");
    }
    boolean bool = false;
    Bundle localBundle = getArguments();
    if (localBundle != null)
    {
      this.emailToSend = localBundle.getString("emailToSend");
      if (this.emailToSend == null) {
        this.emailToSend = "";
      }
      bool = localBundle.getBoolean("recordOnOpen", false);
    }
    if (bool) {
      openVoiceRecorder(bool);
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    switch (paramInt1)
    {
    }
    do
    {
      return;
    } while (paramInt2 != -1);
    if (this.voiceRecords.size() == 0) {
      this.recordAdapter.removeItemAt(0);
    }
    String str = paramIntent.getExtras().getString("recordName");
    paramIntent = paramIntent.getExtras().getString("filePath");
    HashMap localHashMap = new HashMap();
    localHashMap.put("recordName", str);
    localHashMap.put("filePath", paramIntent);
    this.voiceRecords.add(localHashMap);
    this.recordAdapter.addItem(str);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558439, paramMenu);
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fView = paramLayoutInflater.inflate(2130903236, paramViewGroup, false);
    init();
    return this.fView;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100330: 
      openVoiceRecorder();
      return true;
    }
    sendAll();
    return true;
  }
  
  private static class ViewHolder
  {
    public TextView label = null;
    public ImageButton pButton = null;
    
    private ViewHolder() {}
  }
  
  private class VoiceRecordListAdapter
    extends BaseAdapter
  {
    private ArrayList<String> mData = new ArrayList();
    private LayoutInflater mInflater;
    
    public VoiceRecordListAdapter(Context paramContext)
    {
      this.mInflater = LayoutInflater.from(paramContext);
    }
    
    public void addItem(String paramString)
    {
      if ((this.mData.size() > 0) && (((String)this.mData.get(0)).contentEquals("No records."))) {
        removeItemAt(0);
      }
      this.mData.add(paramString);
      notifyDataSetChanged();
    }
    
    public int getCount()
    {
      return this.mData.size();
    }
    
    public String getItem(int paramInt)
    {
      return (String)this.mData.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      System.out.println("getView " + paramInt + " " + paramView);
      if (paramView == null)
      {
        paramView = this.mInflater.inflate(2130903235, null);
        paramViewGroup = new SCVoiceRecordListFragment.ViewHolder(null);
        paramViewGroup.label = ((TextView)paramView.findViewById(2131100253));
        paramViewGroup.pButton = ((ImageButton)paramView.findViewById(2131100252));
        paramView.setTag(paramViewGroup);
        if (!((String)this.mData.get(paramInt)).equalsIgnoreCase("No records.")) {
          break label147;
        }
        paramViewGroup.pButton.setVisibility(4);
      }
      for (;;)
      {
        paramViewGroup.label.setText((CharSequence)this.mData.get(paramInt));
        return paramView;
        paramViewGroup = (SCVoiceRecordListFragment.ViewHolder)paramView.getTag();
        break;
        label147:
        paramViewGroup.pButton.setVisibility(0);
        paramViewGroup.pButton.setFocusable(false);
        final Uri localUri = Uri.fromFile(new File((String)((Map)SCVoiceRecordListFragment.this.voiceRecords.get(paramInt)).get("filePath")));
        paramViewGroup.pButton.setOnClickListener(new View.OnClickListener()
        {
          public void onClick(View paramAnonymousView)
          {
            paramAnonymousView = new Intent("android.intent.action.VIEW", localUri);
            paramAnonymousView.setDataAndType(localUri, "audio/x-wav");
            SCVoiceRecordListFragment.this.startActivity(paramAnonymousView);
          }
        });
      }
    }
    
    public void removeItemAt(int paramInt)
    {
      if (paramInt > this.mData.size() - 1) {
        return;
      }
      this.mData.remove(paramInt);
      notifyDataSetChanged();
    }
  }
}
