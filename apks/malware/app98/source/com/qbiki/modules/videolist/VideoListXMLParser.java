package com.qbiki.modules.videolist;

import android.util.Xml;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class VideoListXMLParser
{
  private static final String ns = null;
  
  public VideoListXMLParser() {}
  
  private VideoFile readItem(XmlPullParser paramXmlPullParser)
    throws XmlPullParserException, IOException
  {
    paramXmlPullParser.require(2, ns, "videoitem");
    String str1;
    if (paramXmlPullParser.getAttributeValue(null, "uid") != null) {
      str1 = paramXmlPullParser.getAttributeValue(null, "uid");
    }
    for (;;)
    {
      String str2;
      label58:
      String str3;
      label81:
      String str4;
      label104:
      String str5;
      if (paramXmlPullParser.getAttributeValue(null, "title") != null)
      {
        str2 = paramXmlPullParser.getAttributeValue(null, "title");
        if (paramXmlPullParser.getAttributeValue(null, "image_thmb") == null) {
          break label194;
        }
        str3 = paramXmlPullParser.getAttributeValue(null, "image_thmb");
        if (paramXmlPullParser.getAttributeValue(null, "file_url") == null) {
          break label201;
        }
        str4 = paramXmlPullParser.getAttributeValue(null, "file_url");
        str5 = paramXmlPullParser.getAttributeValue(null, "file_size");
        if (str5 == null) {
          break label208;
        }
      }
      try
      {
        for (;;)
        {
          l = Long.parseLong(str5);
          str5 = paramXmlPullParser.getAttributeValue(null, "file_modified_date");
          if (str5 == null) {
            break label222;
          }
          paramXmlPullParser.next();
          paramXmlPullParser.require(3, ns, "videoitem");
          return new VideoFile(str1, str2, str3, str4, l, str5);
          str1 = "";
          break;
          str2 = "";
          break label58;
          label194:
          str3 = "";
          break label81;
          label201:
          str4 = "";
          break label104;
          label208:
          str5 = "0";
        }
      }
      catch (NumberFormatException localNumberFormatException)
      {
        for (;;)
        {
          long l = 0L;
          continue;
          label222:
          String str6 = "NA";
        }
      }
    }
  }
  
  private List<VideoFile> readListOfFiles(XmlPullParser paramXmlPullParser)
    throws XmlPullParserException, IOException
  {
    paramXmlPullParser.require(2, ns, "videoitems");
    ArrayList localArrayList = new ArrayList();
    while (paramXmlPullParser.next() != 3) {
      if (paramXmlPullParser.getEventType() == 2) {
        if (paramXmlPullParser.getName().equals("videoitem")) {
          localArrayList.add(readItem(paramXmlPullParser));
        } else {
          skip(paramXmlPullParser);
        }
      }
    }
    paramXmlPullParser.require(3, ns, "videoitems");
    return localArrayList;
  }
  
  private List<VideoFile> readPageConfig(XmlPullParser paramXmlPullParser)
    throws XmlPullParserException, IOException
  {
    List localList = null;
    paramXmlPullParser.require(2, ns, "pageConfig");
    while (paramXmlPullParser.next() != 3) {
      if (paramXmlPullParser.getEventType() == 2) {
        if (paramXmlPullParser.getName().equals("videoitems")) {
          localList = readListOfFiles(paramXmlPullParser);
        } else {
          skip(paramXmlPullParser);
        }
      }
    }
    return localList;
  }
  
  private void skip(XmlPullParser paramXmlPullParser)
    throws XmlPullParserException, IOException
  {
    if (paramXmlPullParser.getEventType() != 2) {
      throw new IllegalStateException();
    }
    int i = 1;
    while (i != 0) {
      switch (paramXmlPullParser.next())
      {
      default: 
        break;
      case 2: 
        i += 1;
        break;
      case 3: 
        i -= 1;
      }
    }
  }
  
  public List<VideoFile> parse(InputStream paramInputStream)
    throws XmlPullParserException, IOException
  {
    try
    {
      Object localObject1 = Xml.newPullParser();
      ((XmlPullParser)localObject1).setFeature("http://xmlpull.org/v1/doc/features.html#process-namespaces", false);
      ((XmlPullParser)localObject1).setInput(paramInputStream, null);
      ((XmlPullParser)localObject1).nextTag();
      localObject1 = readPageConfig((XmlPullParser)localObject1);
      return localObject1;
    }
    finally
    {
      paramInputStream.close();
    }
  }
}
