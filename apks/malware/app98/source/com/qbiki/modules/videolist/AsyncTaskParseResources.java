package com.qbiki.modules.videolist;

import android.net.Uri;
import android.os.AsyncTask;
import android.util.Log;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.AsyncTaskListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.xmlpull.v1.XmlPullParserException;

public class AsyncTaskParseResources
  extends AsyncTask<Object, Void, List<VideoFile>>
{
  static final boolean DEBUG = true;
  public static final byte JSON_SOURCE_TYPE = 1;
  static final String TAG = AsyncTaskParseResources.class.getSimpleName();
  public static final byte XML_SOURCE_TYPE = 2;
  AsyncTaskListener listener;
  
  public AsyncTaskParseResources() {}
  
  private String getFileName(String paramString)
  {
    String str = "";
    if (paramString != null) {
      str = Uri.parse(paramString).getLastPathSegment();
    }
    return str;
  }
  
  private List<VideoFile> getFilesListFromXML(String paramString)
    throws XmlPullParserException, IOException
  {
    new ArrayList(0);
    if (!App.resourceExists(paramString)) {
      throw new FileNotFoundException("XML file not found! Path:" + paramString);
    }
    Object localObject1 = new VideoListXMLParser();
    Object localObject2 = App.getResourceStream(paramString);
    if (localObject2 == null) {
      throw new FileNotFoundException("XML file not found! Path:" + paramString);
    }
    paramString = ((VideoListXMLParser)localObject1).parse((InputStream)localObject2);
    localObject1 = paramString.iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (VideoFile)((Iterator)localObject1).next();
      ((VideoFile)localObject2).setVideoOriginalFileName(getFileName(((VideoFile)localObject2).getVideoFileURI()));
    }
    localObject1 = paramString.iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (VideoFile)((Iterator)localObject1).next();
      Log.d(TAG, "uid: " + ((VideoFile)localObject2).getVideoFileUID() + " title: " + ((VideoFile)localObject2).getVideoFileTitle() + " image_thmb: " + ((VideoFile)localObject2).getVideoFileImageTHMB() + " file_url: " + ((VideoFile)localObject2).getVideoFileURI());
    }
    return paramString;
  }
  
  protected List<VideoFile> doInBackground(Object... paramVarArgs)
  {
    ArrayList localArrayList = new ArrayList(0);
    try
    {
      String str = (String)String.class.cast(paramVarArgs[0]);
      this.listener = ((AsyncTaskListener)AsyncTaskListener.class.cast(paramVarArgs[1]));
      paramVarArgs = getFilesListFromXML(str);
      return paramVarArgs;
    }
    catch (Exception paramVarArgs)
    {
      Log.e(TAG, "ERROR: " + paramVarArgs.getLocalizedMessage(), paramVarArgs);
    }
    return localArrayList;
  }
  
  protected void onPostExecute(List<VideoFile> paramList)
  {
    this.listener.asyncTaskFinished(paramList);
    super.onPostExecute(paramList);
  }
}
