package com.qbiki.modules.product.order;

import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.CheckedTextView;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.modules.order.OrderConfigInfo;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.shoppingcart.SCProduct;
import com.qbiki.shoppingcart.SCProductSubItem;
import com.qbiki.shoppingcart.ShoppingCart;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.MoneyFormatUtil;
import com.qbiki.util.ResourceImageResizer;
import com.qbiki.util.ToastUtils;
import java.util.ArrayList;
import java.util.Iterator;

public class POProductDetailsFragment
  extends SCFragment
{
  public static final String ADDRESS_KEY = "ADDRESS_KEY";
  public static final String CATEGORY_INDEX_KEY = "CATEGORY_INDEX_KEY";
  private static boolean DEBUG = false;
  public static final String PAGE_ID_KEY = "PAGE_ID_KEY";
  public static final String PRODUCT_INDEX_KEY = "PRODUCT_INDEX_KEY";
  private static String TAG = POProductDetailsFragment.class.getSimpleName();
  private ProductDetailsExpandbleListAdapter adapter;
  private String mCurrencyCode;
  private ArrayList<POProductGroup> mGroups;
  private ResourceImageResizer mImageFetcher;
  private LayoutInflater mLayoutInflater;
  private int mOptionGroupsCount;
  private String mPickUPAddress;
  private POProduct mProduct;
  private ExpandableListView mProductDetailsExpandableList;
  private int mSectionCount;
  private ArrayList<POProductSize> mSizes;
  
  public POProductDetailsFragment() {}
  
  private void addToShoppingCard(POProduct paramPOProduct, ArrayList<POProductGroup> paramArrayList)
  {
    SCProduct localSCProduct = new SCProduct();
    localSCProduct.setName(paramPOProduct.getName());
    Object localObject = paramPOProduct.getSizes();
    if ((localObject == null) || (((ArrayList)localObject).size() == 0)) {
      localSCProduct.setPrice(paramPOProduct.getPrice());
    }
    for (;;)
    {
      localSCProduct.setID(paramPOProduct.getName());
      localSCProduct.setPickUpAddress(this.mPickUPAddress);
      localSCProduct.setURLImage(paramPOProduct.getImageName());
      localSCProduct.setURLInfo(paramPOProduct.getUrlInfo());
      paramPOProduct = paramArrayList.iterator();
      while (paramPOProduct.hasNext())
      {
        paramArrayList = ((POProductGroup)paramPOProduct.next()).getOptions().iterator();
        while (paramArrayList.hasNext())
        {
          localObject = (POProductOption)paramArrayList.next();
          if (((POProductOption)localObject).isChecked()) {
            localSCProduct.addSubItem((SCProductSubItem)localObject);
          }
        }
      }
      localObject = ((ArrayList)localObject).iterator();
      if (((Iterator)localObject).hasNext())
      {
        POProductSize localPOProductSize = (POProductSize)((Iterator)localObject).next();
        if (!localPOProductSize.isChecked()) {
          break;
        }
        localSCProduct.setPrice(localPOProductSize.getPrice());
        localSCProduct.setDetail(localPOProductSize.getSizeName());
      }
    }
    int i = App.shoppingCart.addToCart(localSCProduct, getActivity());
    paramPOProduct = getActivity().getString(2131362153);
    switch (i)
    {
    }
    for (;;)
    {
      paramArrayList = getActivity().getString(2131361917);
      DialogUtil.showAlertWithPosNeutButtons(getActivity(), paramArrayList, paramPOProduct, null, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
      }, getActivity().getString(2131361920), new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          POContext.getInstance().openOrderPage(POProductDetailsFragment.this.getActivity(), POProductDetailsFragment.this, POProductDetailsFragment.this.mPickUPAddress);
        }
      }, getActivity().getString(2131362333));
      return;
      paramPOProduct = localSCProduct.getName() + " " + getActivity().getString(2131362152);
      continue;
      paramPOProduct = getActivity().getString(2131362153);
    }
  }
  
  private int canChangeOptionsCountFor(POProductGroup paramPOProductGroup, int paramInt)
  {
    if (((paramPOProductGroup.getMinItems() > paramInt) || (paramInt < 0)) && (paramInt != 0)) {
      return -1;
    }
    if (paramPOProductGroup.getMaxItems() < paramInt) {
      return 1;
    }
    return 0;
  }
  
  private void deselectAllSizes()
  {
    Iterator localIterator = this.mProduct.getSizes().iterator();
    while (localIterator.hasNext()) {
      ((POProductSize)localIterator.next()).setChecked(false);
    }
  }
  
  private int getCheckedOptionsCount(POProductGroup paramPOProductGroup)
  {
    int i = 0;
    paramPOProductGroup = paramPOProductGroup.getOptions().iterator();
    while (paramPOProductGroup.hasNext()) {
      if (((POProductOption)paramPOProductGroup.next()).isChecked()) {
        i += 1;
      }
    }
    return i;
  }
  
  private View getDescriptionItemView(View paramView, String paramString)
  {
    View localView;
    if (paramView == null)
    {
      localView = this.mLayoutInflater.inflate(17367044, null);
      paramView = new DescriptionItemView((TextView)localView.findViewById(16908308), (TextView)localView.findViewById(16908309));
      localView.setTag(paramView);
    }
    for (;;)
    {
      paramView.txtDescriptionTitle.setText(getActivity().getString(2131362325));
      paramView.txtDescriptionValue.setText(paramString);
      return localView;
      localView = paramView;
      paramView = (DescriptionItemView)paramView.getTag();
    }
  }
  
  private View getGroupItemView(View paramView, String paramString1, String paramString2)
  {
    Object localObject;
    if ((paramView == null) || (!GroupItemView.class.isInstance(paramView)))
    {
      localObject = (ViewGroup)this.mLayoutInflater.inflate(17367047, null);
      paramView = new GroupItemView((TextView)((ViewGroup)localObject).findViewById(16908308), (TextView)((ViewGroup)localObject).findViewById(16908309));
      ((ViewGroup)localObject).setTag(paramView);
    }
    for (;;)
    {
      paramView.sectionName.setText(paramString1);
      paramView.sectionDetail.setText(paramString2);
      return localObject;
      localObject = paramView;
      paramView = (GroupItemView)paramView.getTag();
    }
  }
  
  private View getImageDetailView(View paramView, String paramString)
  {
    if ((paramView == null) || (!(paramView.getTag() instanceof ImageDetailItemView)))
    {
      paramView = this.mLayoutInflater.inflate(2130903190, null);
      ImageDetailItemView localImageDetailItemView = new ImageDetailItemView((ImageView)paramView.findViewById(2131100132));
      paramView.setTag(localImageDetailItemView);
      this.mImageFetcher.loadImage(paramString, localImageDetailItemView.imageView);
      return paramView;
    }
    paramString = (ImageDetailItemView)paramView.getTag();
    return paramView;
  }
  
  private View getOptionItemView(View paramView, POProductOption paramPOProductOption)
  {
    Object localObject;
    if ((paramView == null) || (!GroupItemView.class.isInstance(paramView)))
    {
      localObject = (CheckedTextView)this.mLayoutInflater.inflate(17367055, null);
      paramView = new OptionItemView((CheckedTextView)localObject);
      ((CheckedTextView)localObject).setTag(paramView);
    }
    for (;;)
    {
      paramView.txtFileName.setText(paramPOProductOption.getName() + " (" + MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, paramPOProductOption.getPrice()) + ")");
      if ((paramPOProductOption.isChecked() ^ paramView.txtFileName.isChecked())) {
        paramView.txtFileName.toggle();
      }
      return localObject;
      localObject = paramView;
      paramView = (OptionItemView)paramView.getTag();
    }
  }
  
  private ArrayList<POProductGroup> getOptionsGroups(POProduct paramPOProduct)
  {
    Object localObject = paramPOProduct.getOptions();
    paramPOProduct = new ArrayList();
    localObject = ((ArrayList)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      POProductOption localPOProductOption = (POProductOption)((Iterator)localObject).next();
      int i = indexOfOptionGroup(paramPOProduct, localPOProductOption.getGroupName());
      if (i < 0)
      {
        POProductGroup localPOProductGroup = new POProductGroup();
        localPOProductGroup.setGroupName(localPOProductOption.getGroupName());
        localPOProductGroup.setMaxItems(localPOProductOption.getMaxItems());
        localPOProductGroup.setMinItems(localPOProductOption.getMinItems());
        localPOProductGroup.getOptions().add(localPOProductOption);
        paramPOProduct.add(localPOProductGroup);
      }
      else
      {
        ((POProductGroup)paramPOProduct.get(i)).getOptions().add(localPOProductOption);
      }
    }
    return paramPOProduct;
  }
  
  private View getSizeItemView(View paramView, POProductSize paramPOProductSize)
  {
    Object localObject;
    if (paramView == null)
    {
      localObject = (CheckedTextView)this.mLayoutInflater.inflate(17367055, null);
      paramView = new SizeItemView((CheckedTextView)localObject);
      ((CheckedTextView)localObject).setTag(paramView);
    }
    for (;;)
    {
      if ((paramPOProductSize.isChecked() ^ paramView.txtFileName.isChecked())) {
        paramView.txtFileName.toggle();
      }
      paramView.txtFileName.setText(paramPOProductSize.getSizeName() + " (" + MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, paramPOProductSize.getPrice()) + ")");
      return localObject;
      localObject = paramView;
      paramView = (SizeItemView)paramView.getTag();
    }
  }
  
  private int indexOfOptionGroup(ArrayList<POProductGroup> paramArrayList, String paramString)
  {
    int j;
    if ((paramArrayList == null) || (paramArrayList.size() == 0))
    {
      j = -1;
      return j;
    }
    int i = 0;
    paramArrayList = paramArrayList.iterator();
    for (;;)
    {
      if (!paramArrayList.hasNext()) {
        break label62;
      }
      j = i;
      if (((POProductGroup)paramArrayList.next()).getGroupName().equalsIgnoreCase(paramString)) {
        break;
      }
      i += 1;
    }
    label62:
    return -1;
  }
  
  private void initAddToOrderButton(Context paramContext)
  {
    LinearLayout localLinearLayout = new LinearLayout(paramContext);
    new LinearLayout.LayoutParams(-1, -2);
    localLinearLayout.setOrientation(1);
    localLinearLayout.setGravity(17);
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-2, -2);
    paramContext = new Button(paramContext);
    paramContext.setText(2131362326);
    paramContext.setLayoutParams(localLayoutParams);
    paramContext.setGravity(17);
    paramContext.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        POProductDetailsFragment.this.addToShoppingCard(POProductDetailsFragment.this.mProduct, POProductDetailsFragment.this.mGroups);
      }
    });
    localLinearLayout.addView(paramContext);
    this.mProductDetailsExpandableList.addFooterView(localLinearLayout);
  }
  
  private void setDefaults()
  {
    if ((this.mSizes != null) && (this.mSizes.size() > 0)) {
      ((POProductSize)this.mSizes.get(0)).setChecked(true);
    }
  }
  
  public void initCurrencyCode()
  {
    Object localObject = App.getFirstOrderPage();
    if (localObject == null) {}
    for (localObject = "USD"; (localObject == null) || (((String)localObject).length() == 0); localObject = ((Page)localObject).getOrderConfing().getCurrencyCode())
    {
      this.mCurrencyCode = "USD";
      return;
    }
    this.mCurrencyCode = ((String)localObject);
  }
  
  public void onActivityCreated(Bundle paramBundle)
  {
    this.mImageFetcher = new ResourceImageResizer(getActivity(), DeviceUtil.dpToPx(getActivity(), 240.0F));
    super.onActivityCreated(paramBundle);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setHasOptionsMenu(true);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558429, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mLayoutInflater = paramLayoutInflater;
    this.mProductDetailsExpandableList = ((ExpandableListView)this.mLayoutInflater.inflate(17367041, paramViewGroup, false));
    this.adapter = new ProductDetailsExpandbleListAdapter(null);
    initAddToOrderButton(getActivity());
    paramLayoutInflater = null;
    int i = -1;
    int j = -1;
    paramViewGroup = getArguments();
    if (paramViewGroup != null)
    {
      paramLayoutInflater = paramViewGroup.getString("PAGE_ID_KEY");
      i = paramViewGroup.getInt("CATEGORY_INDEX_KEY");
      j = paramViewGroup.getInt("PRODUCT_INDEX_KEY");
      this.mPickUPAddress = paramViewGroup.getString("ADDRESS_KEY");
    }
    initCurrencyCode();
    this.mProduct = POContext.getInstance().getProduct(paramLayoutInflater, i, j);
    this.mSizes = this.mProduct.getSizes();
    this.mGroups = getOptionsGroups(this.mProduct);
    this.mProductDetailsExpandableList.setAdapter(this.adapter);
    this.mOptionGroupsCount = this.mGroups.size();
    this.mSectionCount = (this.mOptionGroupsCount + 2);
    setDefaults();
    this.mProductDetailsExpandableList.setOnChildClickListener(new ExpandableListView.OnChildClickListener()
    {
      public boolean onChildClick(ExpandableListView paramAnonymousExpandableListView, View paramAnonymousView, int paramAnonymousInt1, int paramAnonymousInt2, long paramAnonymousLong)
      {
        if (paramAnonymousInt1 == 1)
        {
          POProductDetailsFragment.this.deselectAllSizes();
          ((POProductSize)POProductDetailsFragment.this.mSizes.get(paramAnonymousInt2)).setChecked(true);
        }
        for (;;)
        {
          POProductDetailsFragment.this.adapter.notifyDataSetChanged();
          return false;
          if (paramAnonymousInt1 >= 2)
          {
            paramAnonymousExpandableListView = (POProductGroup)POProductDetailsFragment.this.mGroups.get(paramAnonymousInt1 - 2);
            int i = POProductDetailsFragment.this.getCheckedOptionsCount(paramAnonymousExpandableListView);
            paramAnonymousView = (POProductDetailsFragment.OptionItemView)paramAnonymousView.getTag();
            POProductDetailsFragment localPOProductDetailsFragment = POProductDetailsFragment.this;
            if (paramAnonymousView.txtFileName.isChecked()) {
              i -= 1;
            }
            for (;;)
            {
              i = localPOProductDetailsFragment.canChangeOptionsCountFor(paramAnonymousExpandableListView, i);
              if (i <= 0) {
                break label170;
              }
              if (POProductDetailsFragment.DEBUG) {
                Log.d(POProductDetailsFragment.TAG, POProductDetailsFragment.this.getActivity().getString(2131362327));
              }
              ToastUtils.showToast(POProductDetailsFragment.this.getActivity(), 2131362327, true);
              break;
              i += 1;
            }
            label170:
            if (i >= 0) {
              break;
            }
            if (POProductDetailsFragment.DEBUG) {
              Log.d(POProductDetailsFragment.TAG, POProductDetailsFragment.this.getActivity().getString(2131362328));
            }
            ToastUtils.showToast(POProductDetailsFragment.this.getActivity(), 2131362328, true);
          }
        }
        paramAnonymousExpandableListView = (POProductOption)POProductDetailsFragment.this.adapter.getChild(paramAnonymousInt1, paramAnonymousInt2);
        if (!paramAnonymousView.txtFileName.isChecked()) {}
        for (boolean bool = true;; bool = false)
        {
          paramAnonymousExpandableListView.setChecked(bool);
          paramAnonymousView.txtFileName.toggle();
          break;
        }
      }
    });
    return this.mProductDetailsExpandableList;
  }
  
  public void onDestroy()
  {
    if (this.mImageFetcher != null) {
      this.mImageFetcher.closeCache();
    }
    super.onDestroy();
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    POContext.getInstance().openOrderPage(getActivity(), this, this.mPickUPAddress);
    return true;
  }
  
  private static class DescriptionItemView
  {
    final TextView txtDescriptionTitle;
    final TextView txtDescriptionValue;
    
    DescriptionItemView(TextView paramTextView1, TextView paramTextView2)
    {
      this.txtDescriptionTitle = paramTextView1;
      this.txtDescriptionValue = paramTextView2;
    }
  }
  
  private static class GroupItemView
  {
    final TextView sectionDetail;
    final TextView sectionName;
    
    GroupItemView(TextView paramTextView1, TextView paramTextView2)
    {
      this.sectionName = paramTextView1;
      this.sectionDetail = paramTextView2;
    }
  }
  
  private static class ImageDetailItemView
  {
    final ImageView imageView;
    
    ImageDetailItemView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
  
  private static class OptionItemView
  {
    final CheckedTextView txtFileName;
    
    OptionItemView(CheckedTextView paramCheckedTextView)
    {
      this.txtFileName = paramCheckedTextView;
    }
  }
  
  private class ProductDetailsExpandbleListAdapter
    extends BaseExpandableListAdapter
  {
    private ProductDetailsExpandbleListAdapter() {}
    
    public Object getChild(int paramInt1, int paramInt2)
    {
      if (paramInt1 == 0)
      {
        if (paramInt2 == 0) {
          return POProductDetailsFragment.this.mProduct.getImageName();
        }
        if (paramInt2 == 1) {
          return POProductDetailsFragment.this.mProduct.getDescription();
        }
        return "something is wrong";
      }
      if (paramInt1 == 1) {
        return POProductDetailsFragment.this.mProduct.getSizes().get(paramInt2);
      }
      if (paramInt1 >= 2) {
        return ((POProductGroup)POProductDetailsFragment.this.mGroups.get(paramInt1 - 2)).getOptions().get(paramInt2);
      }
      return "undefined";
    }
    
    public long getChildId(int paramInt1, int paramInt2)
    {
      return paramInt2;
    }
    
    public int getChildType(int paramInt1, int paramInt2)
    {
      if (paramInt1 == 0) {}
      do
      {
        return 0;
        if (paramInt1 == 1) {
          return 1;
        }
      } while (paramInt1 < 2);
      return 2;
    }
    
    public int getChildTypeCount()
    {
      return 3;
    }
    
    public View getChildView(int paramInt1, int paramInt2, boolean paramBoolean, View paramView, ViewGroup paramViewGroup)
    {
      if (paramInt1 == 0)
      {
        if (paramInt2 == 0) {
          return POProductDetailsFragment.this.getImageDetailView(paramView, (String)getChild(paramInt1, paramInt2));
        }
        return POProductDetailsFragment.this.getDescriptionItemView(paramView, (String)getChild(paramInt1, paramInt2));
      }
      if (paramInt1 == 1) {
        return POProductDetailsFragment.this.getSizeItemView(paramView, (POProductSize)getChild(paramInt1, paramInt2));
      }
      if (paramInt1 >= 2) {
        return POProductDetailsFragment.this.getOptionItemView(paramView, (POProductOption)getChild(paramInt1, paramInt2));
      }
      return POProductDetailsFragment.this.getOptionItemView(paramView, (POProductOption)getChild(paramInt1, paramInt2));
    }
    
    public int getChildrenCount(int paramInt)
    {
      if (paramInt == 0) {
        return 2;
      }
      if (paramInt == 1) {
        return POProductDetailsFragment.this.mProduct.getSizes().size();
      }
      if (paramInt >= 2) {
        return ((POProductGroup)POProductDetailsFragment.this.mGroups.get(paramInt - 2)).getOptions().size();
      }
      return 0;
    }
    
    public Object getGroup(int paramInt)
    {
      if (paramInt == 0) {
        return "Details";
      }
      if (paramInt == 1) {
        return POProductDetailsFragment.this.mSizes;
      }
      if (paramInt >= 2) {
        return POProductDetailsFragment.this.mGroups.get(paramInt - 2);
      }
      return "undefined";
    }
    
    public int getGroupCount()
    {
      return POProductDetailsFragment.this.mSectionCount;
    }
    
    public long getGroupId(int paramInt)
    {
      return paramInt;
    }
    
    public int getGroupType(int paramInt)
    {
      return 0;
    }
    
    public int getGroupTypeCount()
    {
      return 2;
    }
    
    public View getGroupView(int paramInt, boolean paramBoolean, View paramView, ViewGroup paramViewGroup)
    {
      if (paramInt == 0) {
        return POProductDetailsFragment.this.getGroupItemView(paramView, "Details", "Product details:");
      }
      if (paramInt == 1)
      {
        paramViewGroup = "Count: " + POProductDetailsFragment.this.mSizes.size();
        return POProductDetailsFragment.this.getGroupItemView(paramView, "Sizes", paramViewGroup);
      }
      if (paramInt >= 2)
      {
        Object localObject = (POProductGroup)getGroup(paramInt);
        paramViewGroup = ((POProductGroup)localObject).getGroupName();
        localObject = String.format(POProductDetailsFragment.this.getActivity().getString(2131362338), new Object[] { Integer.valueOf(((POProductGroup)localObject).getMaxItems()), Integer.valueOf(((POProductGroup)localObject).getMinItems()) });
        return POProductDetailsFragment.this.getGroupItemView(paramView, paramViewGroup, (String)localObject);
      }
      return POProductDetailsFragment.this.getGroupItemView(paramView, "undefined", "undefined");
    }
    
    public boolean hasStableIds()
    {
      return false;
    }
    
    public boolean isChildSelectable(int paramInt1, int paramInt2)
    {
      return true;
    }
  }
  
  private static class SizeItemView
  {
    final CheckedTextView txtFileName;
    
    SizeItemView(CheckedTextView paramCheckedTextView)
    {
      this.txtFileName = paramCheckedTextView;
    }
  }
}
