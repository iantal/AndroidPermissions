package com.qbiki.modules.order;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;
import com.qbiki.scapi.SCApi;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.shoppingcart.SCProduct;
import com.qbiki.shoppingcart.SCProductSubItem;
import com.qbiki.shoppingcart.ShoppingCart;
import com.qbiki.shoppingcart.ShoppingCartItem;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.MoneyFormatUtil;
import com.qbiki.util.ToastUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class OrderFragment
  extends SCFragment
{
  private static String APPID_PARAM_KEY;
  private static String CARD_CODE_PARAM_KEY;
  private static String CARD_EXP_MONTH_PARAM_KEY;
  private static String CARD_EXP_YEAR_PARAM_KEY;
  private static String CARD_FIRST_NAME_PARAM_KEY;
  private static String CARD_LAST_NAME_PARAM_KEY;
  private static String CARD_NUMBER_PARAM_KEY;
  private static String DELIVERY_ADDRESS_PARAM_KEY;
  private static String DELIVERY_METHOD_DELIVER = "Delivery";
  private static String DELIVERY_METHOD_PARAM_KEY;
  private static String DELIVERY_METHOD_PICKUP;
  private static String DELIVERY_PRICE_PARAM_KEY;
  private static String EMAIL_PARAM_KEY;
  private static String ITEM_ID_PARAM_PREFIX_KEY;
  private static String ITEM_NAME_PARAM_PREFIX_KEY;
  private static String ITEM_PRICE_PARAM_PREFIX_KEY;
  private static String ITEM_QUANTITY_PARAM_PREFIX_KEY;
  public static final String ORDER_INFO = "ORDER_INFO";
  private static String ORDER_INSTR_PARAM_KEY;
  public static final String PAGEID_PARAM_KEY = "pageId";
  private static String PAYMENT_METHOD_CASH;
  private static String PAYMENT_METHOD_CREDIT_CARD;
  private static String PAYMENT_METHOD_PARAM_KEY;
  private static String PHONE_PARAM_KEY;
  private static String PICKUP_ADDRESS_PARAM_KEY;
  private static String PUBLISHERID_PARAM_KEY;
  private static String TAG = OrderFragment.class.getSimpleName();
  private static String USERNAME_PARAM_KEY;
  private String[] expMonthSpinnerData = { "JAN", "FEB", "MAR", "APR", "MAY", "JUNE", "JULY", "AUG", "SEPT", "OCT", "NOV", "DEC" };
  private String[] expYearsSpinnerData = { "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024" };
  private boolean isValid = false;
  private ProductItemsExpandableListAdapter mAdapter;
  private String mCardCode = "";
  private EditText mCardCodeTextEdit;
  private String mCardExpireMonth = "";
  private Spinner mCardExpireMonthSpinner;
  private String mCardExpireYear = "";
  private Spinner mCardExpireYearSpinner;
  private String mCardFirstName = "";
  private EditText mCardFirstNameTextEdit;
  private String mCardLastName = "";
  private EditText mCardLastNameTextEdit;
  private String mCardNumber = "";
  private EditText mCardNumberTextEdit;
  private Activity mContext = null;
  private LinearLayout mCreditCardInfo;
  private String mCurrencyCode = "USD";
  private String mDeliveryAddress = "";
  private LinearLayout mDeliveryAddressBlock;
  private EditText mDeliveryAddressTextEdit;
  private String mDeliveryMethod = "";
  private Spinner mDeliveryMethodSpinner;
  private double mDeliveryPrice = 0.0D;
  private String mDetailsEmail = "";
  private EditText mDetailsEmailTextEdit;
  private String mDetailsInstructions = "";
  private EditText mDetailsInstructionsTextEdit;
  private View mFragmentView;
  private double mFreeDelivery = 0.0D;
  private LayoutInflater mLayoutInflater;
  private OrderConfigInfo mOrderConfig;
  private TextView mOrderShippingTextView;
  private TextView mOrderSubtotalTextView;
  private TextView mOrderTaxTextView;
  private TextView mOrderTotalTextView;
  private String mPageID;
  private String mPaymentMethod = "";
  private ArrayAdapter<String> mPaymentMethodAdapter;
  private Spinner mPaymentMethodSpinner;
  private String mPhoneNumber = "";
  private EditText mPhoneNumberTextEdit;
  private String mPickUpAddress = "";
  private View mProductsListFooterView;
  private View mProductsListHeaderView;
  private ExpandableListView mProductsListView;
  private ProgressDialog mProgressDialog;
  private Resources mResources;
  private ArrayList<ShoppingCartItem> mShoppingCartProducts;
  private double mTax = 0.0D;
  private int messageResId = 2131362306;
  private ArrayAdapter<String> quantitySpinnerAdapter;
  private String[] quantitySpinnerData = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19" };
  
  static
  {
    PUBLISHERID_PARAM_KEY = "publisherId";
    USERNAME_PARAM_KEY = "username";
    APPID_PARAM_KEY = "appId";
    EMAIL_PARAM_KEY = "email";
    PHONE_PARAM_KEY = "phoneNumber";
    ORDER_INSTR_PARAM_KEY = "orderInstructions";
    DELIVERY_METHOD_PARAM_KEY = "deliveryMethod";
    DELIVERY_ADDRESS_PARAM_KEY = "deliveryAddress";
    PICKUP_ADDRESS_PARAM_KEY = "pickUpAddress";
    DELIVERY_PRICE_PARAM_KEY = "shippingPrice";
    PAYMENT_METHOD_PARAM_KEY = "paymentMethod";
    CARD_NUMBER_PARAM_KEY = "cardNumber";
    CARD_CODE_PARAM_KEY = "cardCode";
    CARD_EXP_MONTH_PARAM_KEY = "cardExpMonth";
    CARD_EXP_YEAR_PARAM_KEY = "cardExpYear";
    CARD_FIRST_NAME_PARAM_KEY = "firstName";
    CARD_LAST_NAME_PARAM_KEY = "lastName";
    ITEM_ID_PARAM_PREFIX_KEY = "itemId";
    ITEM_NAME_PARAM_PREFIX_KEY = "itemName";
    ITEM_PRICE_PARAM_PREFIX_KEY = "itemPrice";
    ITEM_QUANTITY_PARAM_PREFIX_KEY = "itemQuantity";
    PAYMENT_METHOD_CASH = "Cash";
    PAYMENT_METHOD_CREDIT_CARD = "Credit card";
    DELIVERY_METHOD_PICKUP = "Pick up";
  }
  
  public OrderFragment() {}
  
  private void expandAll()
  {
    int i = 0;
    while (i < this.mShoppingCartProducts.size())
    {
      this.mProductsListView.collapseGroup(i);
      this.mProductsListView.expandGroup(i);
      i += 1;
    }
  }
  
  private HashMap<String, String> getRequestParams()
  {
    HashMap localHashMap = new HashMap(0);
    if ((this.mShoppingCartProducts == null) || (this.mShoppingCartProducts.size() == 0))
    {
      this.isValid = false;
      this.messageResId = 2131362314;
      localObject1 = null;
    }
    int j;
    Iterator localIterator;
    do
    {
      return localObject1;
      localHashMap.put(PUBLISHERID_PARAM_KEY, App.publisherId);
      localHashMap.put(USERNAME_PARAM_KEY, App.username);
      localHashMap.put(APPID_PARAM_KEY, App.appId);
      localHashMap.put("pageId", this.mPageID);
      if (this.mDetailsEmail.length() == 0)
      {
        this.isValid = false;
        this.messageResId = 2131362307;
        return null;
      }
      localHashMap.put(EMAIL_PARAM_KEY, this.mDetailsEmail);
      if (this.mPhoneNumber.length() == 0)
      {
        this.isValid = false;
        this.messageResId = 2131362308;
        return null;
      }
      localHashMap.put(PHONE_PARAM_KEY, this.mPhoneNumber);
      localHashMap.put(DELIVERY_METHOD_PARAM_KEY, this.mDeliveryMethod);
      if (this.mDeliveryMethod.equalsIgnoreCase(DELIVERY_METHOD_PICKUP))
      {
        if (!isAllPickUpAddressesAreEqual())
        {
          this.isValid = false;
          this.messageResId = 2131362313;
          return null;
        }
        localHashMap.put(PICKUP_ADDRESS_PARAM_KEY, this.mPickUpAddress);
      }
      if (this.mDeliveryMethod.length() == 0)
      {
        this.isValid = false;
        this.messageResId = 2131362306;
        return null;
      }
      localHashMap.put(DELIVERY_METHOD_PARAM_KEY, this.mDeliveryMethod);
      if ((this.mDeliveryMethod.compareTo(DELIVERY_METHOD_DELIVER) == 0) && (this.mDeliveryAddress.length() == 0))
      {
        this.isValid = false;
        this.messageResId = 2131362306;
        return null;
      }
      localHashMap.put(DELIVERY_ADDRESS_PARAM_KEY, this.mDeliveryAddress);
      if (this.mPaymentMethod.length() == 0)
      {
        this.isValid = false;
        this.messageResId = 2131362306;
        return null;
      }
      localHashMap.put(PAYMENT_METHOD_PARAM_KEY, this.mPaymentMethod);
      localHashMap.put(ORDER_INSTR_PARAM_KEY, this.mDetailsInstructions);
      if (this.mDeliveryPrice < 0.0D)
      {
        this.isValid = false;
        this.messageResId = 2131362306;
        return null;
      }
      localHashMap.put(DELIVERY_PRICE_PARAM_KEY, "" + this.mDeliveryPrice);
      if (this.mPaymentMethod.compareTo(PAYMENT_METHOD_CREDIT_CARD) == 0)
      {
        if (this.mCardNumber.length() == 0)
        {
          this.isValid = false;
          this.messageResId = 2131362306;
          return null;
        }
        localHashMap.put(CARD_NUMBER_PARAM_KEY, this.mCardNumber);
        if (this.mCardCode.length() == 0)
        {
          this.isValid = false;
          this.messageResId = 2131362311;
          return null;
        }
        localHashMap.put(CARD_CODE_PARAM_KEY, this.mCardCode);
        if (this.mCardExpireMonth.length() == 0)
        {
          this.isValid = false;
          this.messageResId = 2131362312;
          return null;
        }
        localHashMap.put(CARD_EXP_MONTH_PARAM_KEY, this.mCardExpireMonth);
        if (this.mCardExpireYear.length() == 0)
        {
          this.isValid = false;
          this.messageResId = 2131362306;
          return null;
        }
        localHashMap.put(CARD_EXP_YEAR_PARAM_KEY, this.mCardExpireYear);
        if (this.mCardFirstName.length() == 0)
        {
          this.isValid = false;
          this.messageResId = 2131362309;
          return null;
        }
        localHashMap.put(CARD_FIRST_NAME_PARAM_KEY, this.mCardFirstName);
        if (this.mCardLastName.length() == 0)
        {
          this.isValid = false;
          this.messageResId = 2131362310;
          return null;
        }
        localHashMap.put(CARD_LAST_NAME_PARAM_KEY, this.mCardLastName);
      }
      j = 1;
      localIterator = this.mShoppingCartProducts.iterator();
      localObject1 = localHashMap;
    } while (!localIterator.hasNext());
    Object localObject1 = (ShoppingCartItem)localIterator.next();
    localHashMap.put(ITEM_ID_PARAM_PREFIX_KEY + j, "itemId" + j);
    localHashMap.put(ITEM_NAME_PARAM_PREFIX_KEY + j, ((ShoppingCartItem)localObject1).getName() + this.mResources.getString(2131362324) + ((ShoppingCartItem)localObject1).getDetail());
    localHashMap.put(ITEM_PRICE_PARAM_PREFIX_KEY + j, "" + ((ShoppingCartItem)localObject1).getPrice());
    localHashMap.put(ITEM_QUANTITY_PARAM_PREFIX_KEY + j, "" + ((ShoppingCartItem)localObject1).getQuantity());
    Object localObject2 = ((ShoppingCartItem)localObject1).getSubItems();
    int i = j + 1;
    localObject2 = ((ArrayList)localObject2).iterator();
    for (;;)
    {
      j = i;
      if (!((Iterator)localObject2).hasNext()) {
        break;
      }
      SCProductSubItem localSCProductSubItem = (SCProductSubItem)((Iterator)localObject2).next();
      localHashMap.put(ITEM_ID_PARAM_PREFIX_KEY + i, "itemId" + i);
      localHashMap.put(ITEM_NAME_PARAM_PREFIX_KEY + i, ((ShoppingCartItem)localObject1).getName() + "(" + localSCProductSubItem.getName() + ")");
      localHashMap.put(ITEM_PRICE_PARAM_PREFIX_KEY + i, "" + localSCProductSubItem.getPrice());
      localHashMap.put(ITEM_QUANTITY_PARAM_PREFIX_KEY + i, "" + ((ShoppingCartItem)localObject1).getQuantity());
      i += 1;
    }
  }
  
  private void initCardExpMonthSpinner(Spinner paramSpinner)
  {
    ArrayAdapter localArrayAdapter = new ArrayAdapter(this.mContext, 17367048, this.expMonthSpinnerData);
    localArrayAdapter.setDropDownViewResource(17367049);
    paramSpinner.setAdapter(localArrayAdapter);
    paramSpinner.setPrompt(getResources().getString(2131362305));
    paramSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        OrderFragment.access$1302(OrderFragment.this, OrderFragment.this.expMonthSpinnerData[paramAnonymousInt]);
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
  }
  
  private void initCardExpYearSpinner(Spinner paramSpinner)
  {
    ArrayAdapter localArrayAdapter = new ArrayAdapter(this.mContext, 17367048, this.expYearsSpinnerData);
    localArrayAdapter.setDropDownViewResource(17367049);
    paramSpinner.setAdapter(localArrayAdapter);
    paramSpinner.setPrompt(getResources().getString(2131362305));
    paramSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        OrderFragment.access$1902(OrderFragment.this, OrderFragment.this.expYearsSpinnerData[paramAnonymousInt]);
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
  }
  
  private void initDeliveryMethodSpinner(Spinner paramSpinner)
  {
    Resources localResources = getResources();
    Object localObject = localResources.getString(2131362293);
    String str = localResources.getString(2131362294);
    localObject = new ArrayAdapter(this.mContext, 17367048, new String[] { localObject, str });
    ((ArrayAdapter)localObject).setDropDownViewResource(17367049);
    paramSpinner.setAdapter((SpinnerAdapter)localObject);
    paramSpinner.setPrompt(localResources.getString(2131362286));
    paramSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (paramAnonymousInt == 0)
        {
          OrderFragment.access$302(OrderFragment.this, OrderFragment.DELIVERY_METHOD_PICKUP);
          OrderFragment.this.mDeliveryAddressBlock.setVisibility(8);
        }
        for (;;)
        {
          OrderFragment.this.recalculateOrder();
          return;
          OrderFragment.access$302(OrderFragment.this, OrderFragment.DELIVERY_METHOD_DELIVER);
          OrderFragment.this.mDeliveryAddressBlock.setVisibility(0);
        }
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
  }
  
  private void initOrderProgressDialog()
  {
    this.mProgressDialog = new ProgressDialog(this.mContext);
    this.mProgressDialog.setMessage(getResources().getText(2131362302));
    this.mProgressDialog.setProgressStyle(0);
    this.mProgressDialog.setCancelable(false);
    this.mProgressDialog.setCanceledOnTouchOutside(false);
    this.mProgressDialog.setTitle(2131362303);
  }
  
  private void initPaymentMethodSpinner(Spinner paramSpinner)
  {
    Resources localResources = getResources();
    Object localObject = new ArrayList();
    int i = this.mOrderConfig.getPaymentMethod();
    if ((i & 0x1) == 1) {
      ((ArrayList)localObject).add(localResources.getString(2131362284));
    }
    if ((i & 0x2) == 2) {
      ((ArrayList)localObject).add(localResources.getString(2131362285));
    }
    localObject = (String[])((ArrayList)localObject).toArray(new String[((ArrayList)localObject).size()]);
    this.mPaymentMethodAdapter = new ArrayAdapter(this.mContext, 17367048, (Object[])localObject);
    this.mPaymentMethodAdapter.setDropDownViewResource(17367049);
    paramSpinner.setAdapter(this.mPaymentMethodAdapter);
    paramSpinner.setPrompt(localResources.getString(2131362286));
    paramSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        OrderFragment.access$802(OrderFragment.this, (String)OrderFragment.this.mPaymentMethodAdapter.getItem(paramAnonymousInt));
        if (OrderFragment.this.mPaymentMethod.equalsIgnoreCase(OrderFragment.PAYMENT_METHOD_CASH)) {
          OrderFragment.this.mCreditCardInfo.setVisibility(8);
        }
        while (!OrderFragment.this.mPaymentMethod.equalsIgnoreCase(OrderFragment.PAYMENT_METHOD_CREDIT_CARD)) {
          return;
        }
        OrderFragment.this.mCreditCardInfo.setVisibility(0);
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
  }
  
  private void initQuantitySpinnerAdapter(Spinner paramSpinner, int paramInt)
  {
    if (this.quantitySpinnerAdapter == null)
    {
      this.quantitySpinnerAdapter = new ArrayAdapter(this.mContext, 17367048, this.quantitySpinnerData);
      this.quantitySpinnerAdapter.setDropDownViewResource(17367049);
    }
    paramSpinner.setAdapter(this.quantitySpinnerAdapter);
    paramSpinner.setSelection(paramInt, false);
    paramSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (paramAnonymousAdapterView == null) {}
        do
        {
          return;
          paramAnonymousAdapterView = (Integer)paramAnonymousAdapterView.getTag();
        } while ((paramAnonymousAdapterView == null) || (paramAnonymousAdapterView.intValue() < 0));
        if (paramAnonymousInt == 0)
        {
          paramAnonymousAdapterView = (ShoppingCartItem)OrderFragment.this.mShoppingCartProducts.get(paramAnonymousAdapterView.intValue());
          App.shoppingCart.removeFromCart(paramAnonymousAdapterView, OrderFragment.this.mContext);
        }
        for (;;)
        {
          OrderFragment.access$1502(OrderFragment.this, App.shoppingCart.getShoppingCartItems());
          OrderFragment.this.mAdapter.notifyDataSetChanged();
          OrderFragment.this.recalculateOrder();
          OrderFragment.this.expandAll();
          return;
          paramAnonymousAdapterView = (ShoppingCartItem)OrderFragment.this.mShoppingCartProducts.get(paramAnonymousAdapterView.intValue());
          App.shoppingCart.setQuantityForProduct(Integer.valueOf(paramAnonymousInt), paramAnonymousAdapterView, OrderFragment.this.mContext);
        }
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
  }
  
  private void initSubmitButton(Button paramButton)
  {
    paramButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (OrderFragment.this.mProgressDialog.isShowing())
        {
          OrderFragment.this.mProgressDialog.cancel();
          return;
        }
        OrderFragment.this.mProgressDialog.show();
        OrderFragment.this.startOrderProcessing();
      }
    });
  }
  
  private void initUI(ViewGroup paramViewGroup)
  {
    this.mFragmentView = this.mLayoutInflater.inflate(2130903179, paramViewGroup, false);
    this.mProductsListView = ((ExpandableListView)this.mFragmentView.findViewById(2131100073));
    this.mProductsListHeaderView = this.mLayoutInflater.inflate(2130903181, null);
    this.mProductsListFooterView = this.mLayoutInflater.inflate(2130903180, null);
    this.mOrderShippingTextView = ((TextView)this.mProductsListFooterView.findViewById(2131100074));
    this.mOrderSubtotalTextView = ((TextView)this.mProductsListFooterView.findViewById(2131100075));
    this.mOrderTaxTextView = ((TextView)this.mProductsListFooterView.findViewById(2131100076));
    this.mOrderTotalTextView = ((TextView)this.mProductsListFooterView.findViewById(2131100077));
    this.mProductsListView.addHeaderView(this.mProductsListHeaderView, null, false);
    this.mProductsListView.addFooterView(this.mProductsListFooterView, null, false);
    this.mPhoneNumberTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100078));
    this.mDetailsEmailTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100079));
    this.mDetailsInstructionsTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100080));
    this.mDeliveryAddressTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100083));
    this.mCardFirstNameTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100086));
    this.mCardLastNameTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100087));
    this.mCardCodeTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100089));
    this.mCardNumberTextEdit = ((EditText)this.mProductsListFooterView.findViewById(2131100088));
    this.mDeliveryMethodSpinner = ((Spinner)this.mProductsListFooterView.findViewById(2131100081));
    initDeliveryMethodSpinner(this.mDeliveryMethodSpinner);
    this.mCardExpireMonthSpinner = ((Spinner)this.mProductsListFooterView.findViewById(2131100090));
    initCardExpMonthSpinner(this.mCardExpireMonthSpinner);
    this.mCardExpireYearSpinner = ((Spinner)this.mProductsListFooterView.findViewById(2131100092));
    initCardExpYearSpinner(this.mCardExpireYearSpinner);
    this.mPaymentMethodSpinner = ((Spinner)this.mProductsListFooterView.findViewById(2131100084));
    initPaymentMethodSpinner(this.mPaymentMethodSpinner);
    this.mCreditCardInfo = ((LinearLayout)this.mProductsListFooterView.findViewById(2131100085));
    this.mDeliveryAddressBlock = ((LinearLayout)this.mProductsListFooterView.findViewById(2131100082));
    initSubmitButton((Button)this.mProductsListFooterView.findViewById(2131100093));
  }
  
  private boolean isAllPickUpAddressesAreEqual()
  {
    this.mPickUpAddress = ((ShoppingCartItem)this.mShoppingCartProducts.get(0)).getPickUpAddress();
    Iterator localIterator = this.mShoppingCartProducts.iterator();
    while (localIterator.hasNext()) {
      if (!((ShoppingCartItem)localIterator.next()).getPickUpAddress().equalsIgnoreCase(this.mPickUpAddress)) {
        return false;
      }
    }
    return true;
  }
  
  private void recalculateOrder()
  {
    double d5 = this.mDeliveryPrice;
    double d4 = this.mTax / 100.0D;
    double d1 = 0.0D;
    Iterator localIterator = this.mShoppingCartProducts.iterator();
    while (localIterator.hasNext())
    {
      ShoppingCartItem localShoppingCartItem = (ShoppingCartItem)localIterator.next();
      d1 += localShoppingCartItem.getTotalPrice() * localShoppingCartItem.getQuantity();
    }
    double d2;
    double d3;
    if (this.mDeliveryMethod.equalsIgnoreCase(DELIVERY_METHOD_DELIVER))
    {
      d1 += d5;
      d2 = d1 * d4;
      d3 = 0.0D + (d1 + d2);
      if ((d3 > this.mFreeDelivery) && (this.mFreeDelivery != 0.0D))
      {
        this.mOrderShippingTextView.setText(this.mResources.getString(2131362323));
        d1 -= d5;
        d2 = d1 * d4;
        d3 += d1 + d2;
      }
    }
    for (;;)
    {
      this.mOrderSubtotalTextView.setText(MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, d1));
      this.mOrderTaxTextView.setText(MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, d2));
      this.mOrderTotalTextView.setText(MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, d3));
      return;
      this.mOrderShippingTextView.setText(MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, d5));
      continue;
      d1 += 0.0D;
      d2 = d1 * d4;
      d3 = 0.0D + (d1 + d2);
      this.mOrderShippingTextView.setText("--.--");
    }
  }
  
  private void restoreCreditCardPreferences()
  {
    SharedPreferences localSharedPreferences = this.mContext.getPreferences(0);
    Resources localResources = getResources();
    this.mCardFirstName = localResources.getString(2131362316);
    this.mCardLastName = localResources.getString(2131362315);
    this.mCardNumber = localResources.getString(2131362317);
    this.mCardCode = localResources.getString(2131362318);
    this.mCardExpireMonth = localResources.getString(2131362319);
    this.mCardExpireYear = localResources.getString(2131362320);
    this.mCardFirstName = localSharedPreferences.getString(CARD_FIRST_NAME_PARAM_KEY, this.mCardFirstName);
    this.mCardLastName = localSharedPreferences.getString(CARD_LAST_NAME_PARAM_KEY, this.mCardLastName);
    this.mCardNumber = localSharedPreferences.getString(CARD_NUMBER_PARAM_KEY, this.mCardNumber);
    this.mCardCode = localSharedPreferences.getString(CARD_CODE_PARAM_KEY, this.mCardCode);
    this.mCardExpireMonth = localSharedPreferences.getString(CARD_EXP_MONTH_PARAM_KEY, this.mCardExpireMonth);
    this.mCardExpireYear = localSharedPreferences.getString(CARD_EXP_YEAR_PARAM_KEY, this.mCardExpireYear);
    updateCreditCardUIElements();
  }
  
  private void saveCreditCardPreferences()
  {
    updateOrderDataFromUI();
    SharedPreferences.Editor localEditor = this.mContext.getPreferences(0).edit();
    localEditor.putString(CARD_FIRST_NAME_PARAM_KEY, this.mCardFirstName);
    localEditor.putString(CARD_LAST_NAME_PARAM_KEY, this.mCardLastName);
    localEditor.putString(CARD_NUMBER_PARAM_KEY, this.mCardNumber);
    localEditor.putString(CARD_CODE_PARAM_KEY, this.mCardCode);
    localEditor.putString(CARD_EXP_MONTH_PARAM_KEY, this.mCardExpireMonth);
    localEditor.putString(CARD_EXP_YEAR_PARAM_KEY, this.mCardExpireYear);
    localEditor.commit();
  }
  
  private void startOrderProcessing()
  {
    new ProcessOrderAsyncTask(null).execute(new Void[0]);
  }
  
  private void updateCreditCardUIElements()
  {
    this.mCardFirstNameTextEdit.setText(this.mCardFirstName);
    this.mCardLastNameTextEdit.setText(this.mCardLastName);
    this.mCardCodeTextEdit.setText(this.mCardCode);
    this.mCardNumberTextEdit.setText(this.mCardNumber);
    int i = Arrays.asList(this.expMonthSpinnerData).indexOf(this.mCardExpireMonth);
    this.mCardExpireMonthSpinner.setSelection(i);
    i = Arrays.asList(this.expYearsSpinnerData).indexOf(this.mCardExpireYear);
    this.mCardExpireYearSpinner.setSelection(i);
  }
  
  private void updateOrderDataFromUI()
  {
    this.mDetailsEmail = this.mDetailsEmailTextEdit.getText().toString();
    this.mDetailsInstructions = this.mDetailsInstructionsTextEdit.getText().toString();
    this.mDeliveryAddress = this.mDeliveryAddressTextEdit.getText().toString();
    this.mPhoneNumber = this.mPhoneNumberTextEdit.getText().toString();
    this.mCardFirstName = this.mCardFirstNameTextEdit.getText().toString();
    this.mCardLastName = this.mCardLastNameTextEdit.getText().toString();
    this.mCardNumber = this.mCardNumberTextEdit.getText().toString();
    this.mCardCode = this.mCardCodeTextEdit.getText().toString();
  }
  
  public View getProductItemView(View paramView, ShoppingCartItem paramShoppingCartItem, int paramInt)
  {
    Object localObject;
    if ((paramView == null) || (!ProductItemViewHolder.class.isInstance(paramView)))
    {
      localObject = (ViewGroup)this.mLayoutInflater.inflate(2130903178, null);
      paramView = new ProductItemViewHolder((TextView)((ViewGroup)localObject).findViewById(2131100069), (TextView)((ViewGroup)localObject).findViewById(2131100070), (TextView)((ViewGroup)localObject).findViewById(2131100072), (Spinner)((ViewGroup)localObject).findViewById(2131100071));
      ((ViewGroup)localObject).setTag(paramView);
    }
    for (;;)
    {
      paramView.txtItemName.setText(paramShoppingCartItem.getName());
      paramView.txtItemDetail.setText(paramShoppingCartItem.getDetail());
      paramView.spnItemQuantity.setTag(Integer.valueOf(paramInt));
      initQuantitySpinnerAdapter(paramView.spnItemQuantity, paramShoppingCartItem.getQuantity());
      paramView.txtItemPrice.setText(MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, paramShoppingCartItem.getPrice()));
      return localObject;
      localObject = paramView;
      paramView = (ProductItemViewHolder)paramView.getTag();
    }
  }
  
  public View getProductSubItemView(View paramView, SCProductSubItem paramSCProductSubItem)
  {
    Object localObject;
    if ((paramView == null) || (!ProductItemViewHolder.class.isInstance(paramView)))
    {
      localObject = (ViewGroup)this.mLayoutInflater.inflate(2130903182, null);
      paramView = new ProductSubItemViewHolder((TextView)((ViewGroup)localObject).findViewById(2131100094), (TextView)((ViewGroup)localObject).findViewById(2131100095));
      ((ViewGroup)localObject).setTag(paramView);
    }
    for (;;)
    {
      paramView.txtItemName.setText(paramSCProductSubItem.getName());
      paramView.txtItemPrice.setText(MoneyFormatUtil.getFormattedCurrencyString(this.mCurrencyCode, paramSCProductSubItem.getPrice()));
      return localObject;
      localObject = paramView;
      paramView = (ProductSubItemViewHolder)paramView.getTag();
    }
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mContext = getActivity();
    this.mResources = this.mContext.getResources();
    this.mLayoutInflater = paramLayoutInflater;
    paramLayoutInflater = getArguments();
    this.mPageID = paramLayoutInflater.getString("pageId");
    this.mOrderConfig = ((OrderConfigInfo)paramLayoutInflater.getParcelable("ORDER_INFO"));
    this.mDeliveryPrice = this.mOrderConfig.getDeliveryPrice();
    this.mFreeDelivery = this.mOrderConfig.getFreeDelivery();
    this.mTax = this.mOrderConfig.getOrderTaxPercent();
    this.mCurrencyCode = this.mOrderConfig.getCurrencyCode();
    initUI(paramViewGroup);
    initOrderProgressDialog();
    this.mAdapter = new ProductItemsExpandableListAdapter(null);
    this.mShoppingCartProducts = App.shoppingCart.getShoppingCartItems();
    this.mProductsListView.setAdapter(this.mAdapter);
    expandAll();
    recalculateOrder();
    return this.mFragmentView;
  }
  
  public void onResume()
  {
    super.onResume();
    restoreCreditCardPreferences();
  }
  
  public void onStop()
  {
    super.onStop();
    saveCreditCardPreferences();
  }
  
  private class ProcessOrderAsyncTask
    extends AsyncTask<Void, Void, String>
  {
    Map<String, String> params;
    
    private ProcessOrderAsyncTask() {}
    
    protected String doInBackground(Void... paramVarArgs)
    {
      if (OrderFragment.this.isValid)
      {
        paramVarArgs = SCApi.getServerRequestProtocol(App.serverHostName) + "://" + App.serverHostName + "/processmobileorder.ashx";
        try
        {
          paramVarArgs = HTTPUtil.performPostRequest(paramVarArgs, this.params);
          return paramVarArgs;
        }
        catch (IOException paramVarArgs)
        {
          String str = paramVarArgs.getLocalizedMessage();
          Log.e(OrderFragment.TAG, "ERROR: " + str, paramVarArgs);
          return str;
        }
      }
      return null;
    }
    
    protected void onPostExecute(String paramString)
    {
      if (OrderFragment.this.isValid)
      {
        OrderFragment.this.mProgressDialog.dismiss();
        if (paramString.compareToIgnoreCase("OK") != 0) {
          break label94;
        }
        String str = OrderFragment.this.mResources.getString(2131362304);
        ToastUtils.showToast(OrderFragment.this.getActivity(), str, true);
        OrderFragment.this.mShoppingCartProducts.clear();
        OrderFragment.this.mAdapter.notifyDataSetChanged();
        OrderFragment.this.recalculateOrder();
        OrderFragment.this.expandAll();
      }
      for (;;)
      {
        super.onPostExecute(paramString);
        return;
        label94:
        ToastUtils.showToast(OrderFragment.this.getActivity(), paramString, true);
      }
    }
    
    protected void onPreExecute()
    {
      OrderFragment.this.updateOrderDataFromUI();
      OrderFragment.access$2302(OrderFragment.this, true);
      OrderFragment.access$2402(OrderFragment.this, 2131362304);
      this.params = OrderFragment.this.getRequestParams();
      if (!OrderFragment.this.isValid)
      {
        OrderFragment.this.mProgressDialog.cancel();
        ToastUtils.showToast(OrderFragment.this.mContext, OrderFragment.this.messageResId);
      }
      super.onPreExecute();
    }
  }
  
  private static class ProductItemViewHolder
  {
    final Spinner spnItemQuantity;
    final TextView txtItemDetail;
    final TextView txtItemName;
    final TextView txtItemPrice;
    
    ProductItemViewHolder(TextView paramTextView1, TextView paramTextView2, TextView paramTextView3, Spinner paramSpinner)
    {
      this.txtItemName = paramTextView1;
      this.txtItemDetail = paramTextView2;
      this.txtItemPrice = paramTextView3;
      this.spnItemQuantity = paramSpinner;
    }
  }
  
  private class ProductItemsExpandableListAdapter
    extends BaseExpandableListAdapter
  {
    private ProductItemsExpandableListAdapter() {}
    
    public Object getChild(int paramInt1, int paramInt2)
    {
      return ((SCProduct)SCProduct.class.cast(getGroup(paramInt1))).getSubItem(paramInt2);
    }
    
    public long getChildId(int paramInt1, int paramInt2)
    {
      return 0L;
    }
    
    public View getChildView(int paramInt1, int paramInt2, boolean paramBoolean, View paramView, ViewGroup paramViewGroup)
    {
      return OrderFragment.this.getProductSubItemView(paramView, (SCProductSubItem)SCProductSubItem.class.cast(getChild(paramInt1, paramInt2)));
    }
    
    public int getChildrenCount(int paramInt)
    {
      return ((SCProduct)SCProduct.class.cast(getGroup(paramInt))).getSubItemsCount();
    }
    
    public Object getGroup(int paramInt)
    {
      return OrderFragment.this.mShoppingCartProducts.get(paramInt);
    }
    
    public int getGroupCount()
    {
      return OrderFragment.this.mShoppingCartProducts.size();
    }
    
    public long getGroupId(int paramInt)
    {
      return 0L;
    }
    
    public View getGroupView(int paramInt, boolean paramBoolean, View paramView, ViewGroup paramViewGroup)
    {
      return OrderFragment.this.getProductItemView(paramView, (ShoppingCartItem)ShoppingCartItem.class.cast(getGroup(paramInt)), paramInt);
    }
    
    public boolean hasStableIds()
    {
      return false;
    }
    
    public boolean isChildSelectable(int paramInt1, int paramInt2)
    {
      return true;
    }
  }
  
  private static class ProductSubItemViewHolder
  {
    final TextView txtItemName;
    final TextView txtItemPrice;
    
    ProductSubItemViewHolder(TextView paramTextView1, TextView paramTextView2)
    {
      this.txtItemName = paramTextView1;
      this.txtItemPrice = paramTextView2;
    }
  }
}
