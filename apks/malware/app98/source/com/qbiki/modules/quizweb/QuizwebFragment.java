package com.qbiki.modules.quizweb;

import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.LinearLayout;
import com.qbiki.ads.AdManager;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.Page;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DataUtil;
import com.qbiki.util.JObjectUtil;
import com.qbiki.util.WebViewUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

public class QuizwebFragment
  extends SCFragment
{
  public static final String ARG_URL = "ARG_URL";
  private String TAG = "QuizFragment";
  private String currentPageUrl;
  private int firstPageIndex;
  private boolean isOnStartUp = true;
  private AdManager mAdManager;
  private View mView = null;
  private WebView mWebView;
  private ArrayList<String> quizPagesArray;
  private String theHTML;
  
  public QuizwebFragment() {}
  
  private void setupAdViews()
  {
    LinearLayout localLinearLayout = (LinearLayout)this.mView.findViewById(2131100163);
    this.mAdManager = new AdManager().showAds(getActivity(), localLinearLayout, this.currentPageUrl);
  }
  
  private void setupWebView()
  {
    this.mWebView = ((WebView)this.mView.findViewById(2131100164));
    WebViewUtil.setDefaultSettings(this.mWebView);
    this.mWebView.setWebViewClient(new MyWebViewClient());
  }
  
  protected ArrayList<String> getQuestionsByCategory(String paramString, ArrayList<String> paramArrayList)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramString.equalsIgnoreCase("all"))
    {
      paramArrayList = new ArrayList(paramArrayList);
      return paramArrayList;
    }
    Iterator localIterator = paramArrayList.iterator();
    for (;;)
    {
      paramArrayList = localArrayList;
      if (!localIterator.hasNext()) {
        break;
      }
      paramArrayList = (String)localIterator.next();
      Page localPage = (Page)App.appConfig.getPages().get(paramArrayList);
      if ((localPage != null) && (localPage.getQuizCategory().equals(paramString))) {
        localArrayList.add(paramArrayList);
      }
    }
  }
  
  public ArrayList<String> getQuizPages()
  {
    return this.quizPagesArray;
  }
  
  protected String getRandomQuizPage()
  {
    String str1 = "";
    int i;
    int j;
    if (this.quizPagesArray.size() > 0)
    {
      i = this.quizPagesArray.size();
      j = (int)(Math.random() * i);
      String str2 = (String)this.quizPagesArray.get(i - 1);
      str1 = String.copyValueOf(((String)this.quizPagesArray.get(j)).toCharArray());
      if ((j != i - 1) || (i <= 1) || (str1.equalsIgnoreCase(str2))) {
        break label107;
      }
      Collections.swap(this.quizPagesArray, 0, i - 1);
    }
    for (;;)
    {
      this.quizPagesArray.remove(i - 1);
      return str1;
      label107:
      Collections.swap(this.quizPagesArray, j, i - 1);
    }
  }
  
  protected ArrayList<String> getRandomQuizPages(ArrayList<String> paramArrayList, int paramInt, String paramString)
  {
    if (!App.appConfig.isQuizRandomize())
    {
      paramArrayList = new ArrayList(paramArrayList);
      return paramArrayList;
    }
    if ((paramString == null) || ((paramString != null) && (paramString.equalsIgnoreCase("")))) {
      paramString = "all";
    }
    ArrayList localArrayList2;
    for (;;)
    {
      localArrayList2 = getQuestionsByCategory(paramString, paramArrayList);
      if (localArrayList2.size() != 0) {
        break;
      }
      return null;
    }
    int j = 1;
    ArrayList localArrayList1 = new ArrayList();
    int i = paramInt;
    if (paramInt > localArrayList2.size()) {
      i = localArrayList2.size();
    }
    if (!App.appConfig.getPassedCategoryQuestions().containsKey(paramString)) {
      App.appConfig.getPassedCategoryQuestions().put(paramString, new HashSet());
    }
    paramInt = j;
    if (localArrayList2.size() - ((HashSet)App.appConfig.getPassedCategoryQuestions().get(paramString)).size() < i)
    {
      ((HashSet)App.appConfig.getPassedCategoryQuestions().get(paramString)).clear();
      paramInt = j;
    }
    for (;;)
    {
      paramArrayList = localArrayList1;
      if (localArrayList1.size() >= i) {
        break;
      }
      paramArrayList = localArrayList1;
      if (paramInt == 0) {
        break;
      }
      j = localArrayList2.size();
      j = (int)(Math.random() * j);
      if (!((HashSet)App.appConfig.getPassedCategoryQuestions().get(paramString)).contains(new Integer(j)))
      {
        ((HashSet)App.appConfig.getPassedCategoryQuestions().get(paramString)).add(new Integer(j));
        localArrayList1.add(localArrayList2.get(j));
        if (i == localArrayList1.size()) {
          paramInt = 0;
        }
      }
    }
  }
  
  public void init()
  {
    Object localObject1 = getArguments();
    if (localObject1 != null) {
      this.currentPageUrl = ((Bundle)localObject1).getString("ARG_URL");
    }
    if ((this.currentPageUrl == null) && (this.theHTML == null)) {
      App.closePage(this);
    }
    int i;
    if (App.appConfig.isInitialized())
    {
      Uri localUri = Uri.parse(this.currentPageUrl);
      Object localObject3 = "";
      if (localUri.getQuery() != null)
      {
        localObject1 = localUri.getQuery().toString();
        i = ((String)localObject1).indexOf("=", 0);
        Object localObject2 = localObject3;
        if (i != -1)
        {
          String str = ((String)localObject1).substring(0, i);
          localObject1 = ((String)localObject1).substring(i + 1, ((String)localObject1).length());
          localObject2 = localObject3;
          if (str != null)
          {
            localObject2 = localObject3;
            if (str.equalsIgnoreCase("quizcategory"))
            {
              localObject2 = localObject3;
              if (localObject1 != null)
              {
                localObject2 = localObject3;
                if (!((String)localObject1).equalsIgnoreCase("")) {
                  localObject2 = localObject1;
                }
              }
            }
          }
        }
        localObject3 = localUri.getLastPathSegment();
        localObject1 = localObject3;
        if (localUri.getQuery() != null) {
          localObject1 = ((String)localObject3).replace(localUri.getQuery(), "");
        }
        this.quizPagesArray = App.appConfig.getQuizPages();
        localObject3 = (Page)App.appConfig.getPages().get(localObject1);
        if ((localObject3 != null) && (((Page)localObject3).getType().equals("quizquestion")))
        {
          this.quizPagesArray = getRandomQuizPages(App.appConfig.getQuizPages(), App.appConfig.getQuizPagesNumber(), localObject2);
          int j = this.quizPagesArray.size();
          JObjectUtil.saveJValue("numberOfQuestions", new Integer(j).toString());
          JObjectUtil.saveJValue("passedQuestions", new Integer(1).toString());
          JObjectUtil.saveJValue("correctAnswers", new Integer(0).toString());
          JObjectUtil.saveJValue("score", new Integer(0).toString());
          JObjectUtil.saveJValue("qscore", new Double(100.0D / j).toString());
          this.firstPageIndex = 0;
          i = 0;
          label365:
          if (i < this.quizPagesArray.size())
          {
            if (!((String)this.quizPagesArray.get(i)).equalsIgnoreCase((String)localObject1)) {
              break label500;
            }
            this.firstPageIndex = i;
          }
          if (j > 0)
          {
            this.currentPageUrl = App.getResourceUrl((String)this.quizPagesArray.get(this.firstPageIndex));
            localObject1 = this.currentPageUrl;
            this.quizPagesArray.remove(this.firstPageIndex);
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        localObject1 = DataUtil.readString(App.getResourceStream(Uri.parse((String)localObject1).getLastPathSegment()));
        if (localObject1 != null) {
          this.theHTML = JObjectUtil.processQuizHtmlBlock((String)localObject1);
        }
      }
      catch (IOException localIOException)
      {
        label500:
        Log.e(this.TAG, "Error to opening file stream");
        continue;
      }
      setupAdViews();
      setupWebView();
      if (this.theHTML != null) {
        break label536;
      }
      this.mWebView.loadUrl(this.currentPageUrl);
      return;
      localObject1 = "";
      break;
      i += 1;
      break label365;
      Log.v(this.TAG, "App config is null, skipping quiz page processing on activity create...");
    }
    label536:
    this.mWebView.loadDataWithBaseURL(this.currentPageUrl, this.theHTML, null, "UTF-8", this.currentPageUrl);
  }
  
  public boolean isOnStartUp()
  {
    return this.isOnStartUp;
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903200, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.mAdManager != null) {
      this.mAdManager.destroy();
    }
  }
  
  public void setOnStartUp(boolean paramBoolean)
  {
    this.isOnStartUp = paramBoolean;
  }
  
  public void setQuizPages(ArrayList<String> paramArrayList)
  {
    this.quizPagesArray = paramArrayList;
  }
  
  protected class MyWebViewClient
    extends WebViewClient
  {
    private static final String TAG = "QuizActivity.MyWebViewClient";
    private String nextPageUrl;
    private String processedHtml;
    
    protected MyWebViewClient() {}
    
    public void onPageStarted(WebView paramWebView, String paramString, Bitmap paramBitmap) {}
    
    public void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2)
    {
      Log.v("QuizActivity.MyWebViewClient", "onReceivedError: failingUrl = " + paramString2 + ", error code = " + paramInt + " [ " + paramString1 + " ]");
      super.onReceivedError(paramWebView, paramInt, paramString1, paramString2);
    }
    
    protected void parseParameters(String paramString)
    {
      Object localObject = Uri.parse(paramString);
      if (((Uri)localObject).getQuery() != null) {}
      for (localObject = ((Uri)localObject).getQuery().toString();; localObject = "")
      {
        int i = ((String)localObject).indexOf("=", 0);
        if (i != -1)
        {
          String str = ((String)localObject).substring(0, i);
          localObject = ((String)localObject).substring(i + 1, ((String)localObject).length());
          if ((str != null) && (!str.equalsIgnoreCase("")) && (localObject != null) && (!((String)localObject).equalsIgnoreCase("")))
          {
            JObjectUtil.saveJValue(str, (String)localObject);
            Log.v("QuizActivity.MyWebViewClient", "Save jkey/jvalue pair: " + paramString);
          }
        }
        return;
      }
    }
    
    public boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString)
    {
      String str = Uri.parse(paramString).getLastPathSegment();
      Page localPage = (Page)App.appConfig.getPages().get(str);
      this.processedHtml = null;
      this.nextPageUrl = paramString;
      if (localPage == null) {
        return false;
      }
      parseParameters(paramString);
      paramString = str;
      if (App.appConfig.isQuizRandomize()) {
        if (!localPage.getType().equalsIgnoreCase("quizquestion"))
        {
          paramString = str;
          if (!localPage.getType().equalsIgnoreCase("quizresult")) {}
        }
        else
        {
          str = QuizwebFragment.this.getRandomQuizPage();
          if (str != null)
          {
            paramString = str;
            if (str != null)
            {
              paramString = str;
              if (!str.equalsIgnoreCase("")) {}
            }
          }
          else
          {
            paramString = "Results.html";
          }
          this.nextPageUrl = App.getResourceUrl(paramString);
        }
      }
      try
      {
        paramString = DataUtil.readString(App.getResourceStream(paramString));
        if (paramString != null) {
          this.processedHtml = JObjectUtil.processQuizHtmlBlock(paramString);
        }
      }
      catch (IOException paramString)
      {
        for (;;)
        {
          Log.e("QuizActivity.MyWebViewClient", "Error getting rawHtml");
          continue;
          paramWebView.loadDataWithBaseURL(this.nextPageUrl, this.processedHtml, null, "UTF-8", this.nextPageUrl);
        }
      }
      if (this.processedHtml == null)
      {
        paramWebView.loadUrl(this.nextPageUrl);
        return true;
      }
    }
  }
}
