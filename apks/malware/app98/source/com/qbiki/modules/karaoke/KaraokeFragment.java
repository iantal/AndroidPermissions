package com.qbiki.modules.karaoke;

import android.annotation.SuppressLint;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.media.MediaPlayer.OnSeekCompleteListener;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DataUtil;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

@SuppressLint({"SetJavaScriptEnabled"})
public class KaraokeFragment
  extends SCFragment
{
  private Boolean autoStart = Boolean.valueOf(false);
  private ArrayList<KTime> kTime = new ArrayList();
  private View mView = null;
  private MediaPlayer mp;
  private Boolean mpPrepared = Boolean.valueOf(false);
  private String pageId;
  private ImageButton ppButton;
  private Timer progressUpdateTimer;
  private SeekBar seekBar;
  private Boolean seeking = Boolean.valueOf(false);
  private String songFile;
  private WebView webView;
  private Boolean webViewReady = Boolean.valueOf(false);
  
  public KaraokeFragment() {}
  
  private void configure()
  {
    if (this.mp != null)
    {
      this.seekBar.setProgress(0);
      this.seekBar.incrementProgressBy(100);
      this.seekBar.setMax(this.mp.getDuration());
    }
    for (;;)
    {
      this.seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener()
      {
        public void onProgressChanged(SeekBar paramAnonymousSeekBar, int paramAnonymousInt, boolean paramAnonymousBoolean)
        {
          if (paramAnonymousSeekBar.getProgress() % 500 == 0) {
            KaraokeFragment.this.colorLineForMillis(paramAnonymousSeekBar.getProgress());
          }
        }
        
        public void onStartTrackingTouch(SeekBar paramAnonymousSeekBar)
        {
          KaraokeFragment.access$602(KaraokeFragment.this, Boolean.valueOf(true));
        }
        
        public void onStopTrackingTouch(SeekBar paramAnonymousSeekBar)
        {
          KaraokeFragment.access$602(KaraokeFragment.this, Boolean.valueOf(false));
          if ((KaraokeFragment.this.mp != null) && (KaraokeFragment.this.mp.isPlaying()))
          {
            KaraokeFragment.this.mp.seekTo(paramAnonymousSeekBar.getProgress());
            KaraokeFragment.this.colorLineForMillis(paramAnonymousSeekBar.getProgress());
          }
        }
      });
      this.ppButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          KaraokeFragment.this.playPause();
        }
      });
      this.webView.addJavascriptInterface(new JSInterface()
      {
        public void lineTimesParsed(String paramAnonymousString)
        {
          KaraokeFragment.this.parseKTimes(paramAnonymousString);
          KaraokeFragment.access$402(KaraokeFragment.this, Boolean.valueOf(true));
          if (KaraokeFragment.this.autoStart.booleanValue()) {
            KaraokeFragment.this.getActivity().runOnUiThread(new Runnable()
            {
              public void run()
              {
                KaraokeFragment.this.mpPlay();
              }
            });
          }
        }
      }, "karaokeJSInterface");
      this.webView.setWebViewClient(new WebViewClient()
      {
        public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          super.onPageFinished(paramAnonymousWebView, paramAnonymousString);
          KaraokeFragment.this.webView.loadUrl("javascript:karaokeJSInterface.lineTimesParsed(getLineTimes());");
        }
        
        public boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          if (paramAnonymousString.startsWith("jumpto"))
          {
            Log.d("Karaoke", paramAnonymousString);
            paramAnonymousWebView = paramAnonymousString.substring(paramAnonymousString.indexOf(":") + 1);
            if (KaraokeFragment.this.mp != null) {
              KaraokeFragment.this.mp.seekTo(KTime.getMilleseconds(paramAnonymousWebView));
            }
            KaraokeFragment.this.colorLineForMillis(KTime.getMilleseconds(paramAnonymousWebView));
            return true;
          }
          return false;
        }
      });
      return;
      this.seekBar.setProgress(0);
      this.seekBar.setMax(0);
    }
  }
  
  private Boolean mpPause()
  {
    if ((this.mp != null) && (this.mp.isPlaying()))
    {
      this.mp.pause();
      this.ppButton.setImageResource(17301540);
    }
    return Boolean.valueOf(true);
  }
  
  private Boolean mpPlay()
  {
    if (this.mp != null) {}
    for (;;)
    {
      try
      {
        if (!this.mpPrepared.booleanValue()) {
          continue;
        }
        this.mp.start();
        this.mp.seekTo(this.seekBar.getProgress());
        this.ppButton.setImageResource(17301539);
      }
      catch (IllegalStateException localIllegalStateException)
      {
        localIllegalStateException.printStackTrace();
        continue;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        continue;
      }
      return Boolean.valueOf(false);
      this.mp.prepare();
    }
  }
  
  private void parseKTimes(String paramString)
  {
    paramString = paramString.split(" ");
    int i = 0;
    if (i < paramString.length)
    {
      String[] arrayOfString = paramString[i].split(",");
      switch (arrayOfString.length)
      {
      default: 
        this.kTime.add(new KTime("00:00:00", "00:00:00"));
      }
      for (;;)
      {
        i += 1;
        break;
        this.kTime.add(new KTime(arrayOfString[0], arrayOfString[1]));
        continue;
        this.kTime.add(new KTime(arrayOfString[0], "00:00:00"));
      }
    }
  }
  
  private void playPause()
  {
    if (this.mp != null)
    {
      if (this.mp.isPlaying()) {
        mpPause();
      }
    }
    else {
      return;
    }
    mpPlay();
  }
  
  private void updateSeeker()
  {
    getActivity().runOnUiThread(new Runnable()
    {
      public void run()
      {
        if ((KaraokeFragment.this.mp != null) && (KaraokeFragment.this.mp.isPlaying()))
        {
          if (!KaraokeFragment.this.seeking.booleanValue()) {
            KaraokeFragment.this.seekBar.setProgress(KaraokeFragment.this.mp.getCurrentPosition());
          }
          KaraokeFragment.this.colorLineForMillis(KaraokeFragment.this.mp.getCurrentPosition());
        }
      }
    });
  }
  
  public void colorLineForMillis(int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (i < this.kTime.size())
      {
        if (((KTime)this.kTime.get(i)).isInRange(paramInt).booleanValue()) {
          this.webView.loadUrl("javascript:colorLine(" + (i + 1) + ");void(0);");
        }
      }
      else {
        return;
      }
      i += 1;
    }
  }
  
  protected void init()
  {
    this.seekBar = ((SeekBar)this.mView.findViewById(2131099985));
    this.ppButton = ((ImageButton)this.mView.findViewById(2131099984));
    this.webView = ((WebView)this.mView.findViewById(2131099724));
    Object localObject1 = getArguments();
    this.pageId = ((Bundle)localObject1).getString("pageId");
    this.songFile = ((Bundle)localObject1).getString("songFile");
    this.autoStart = Boolean.valueOf(((Bundle)localObject1).getBoolean("autoStart"));
    this.webView.getSettings().setJavaScriptEnabled(true);
    localObject1 = "";
    for (;;)
    {
      try
      {
        localObject2 = DataUtil.readString(App.getResourceStream(this.pageId));
        localObject1 = localObject2;
      }
      catch (IOException localIOException1)
      {
        Object localObject2;
        Log.d("Karaoke", "IOException", localIOException1);
        continue;
      }
      catch (IllegalArgumentException localIllegalArgumentException1)
      {
        Log.d("Karaoke", "IllegalArgumentException", localIllegalArgumentException1);
        continue;
        AssetFileDescriptor localAssetFileDescriptor = getActivity().getAssets().openFd("Main/" + this.songFile);
        this.mp.setDataSource(localAssetFileDescriptor.getFileDescriptor(), localAssetFileDescriptor.getStartOffset(), localAssetFileDescriptor.getLength());
        continue;
      }
      try
      {
        this.mp = new MediaPlayer();
        this.mp.setScreenOnWhilePlaying(true);
        if ((!App.isPreviewer) && (!App.syncEnabled)) {
          continue;
        }
        localObject2 = new FileInputStream(new File(App.getAppResourcesPath() + "/" + this.songFile)).getFD();
        this.mp.setDataSource((FileDescriptor)localObject2);
        this.mp.setOnPreparedListener(new MediaPlayer.OnPreparedListener()
        {
          public void onPrepared(MediaPlayer paramAnonymousMediaPlayer)
          {
            paramAnonymousMediaPlayer.seekTo(KaraokeFragment.this.seekBar.getProgress());
            if (KaraokeFragment.this.progressUpdateTimer == null)
            {
              KaraokeFragment.access$102(KaraokeFragment.this, new Timer());
              KaraokeFragment.this.progressUpdateTimer.schedule(new TimerTask()
              {
                public void run()
                {
                  KaraokeFragment.this.updateSeeker();
                }
              }, 500L, 500L);
            }
            if ((KaraokeFragment.this.mpPrepared.booleanValue()) && (KaraokeFragment.this.webViewReady.booleanValue()))
            {
              paramAnonymousMediaPlayer.start();
              KaraokeFragment.this.ppButton.setImageResource(17301539);
            }
            KaraokeFragment.access$302(KaraokeFragment.this, Boolean.valueOf(true));
          }
        });
        this.mp.prepare();
        this.mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener()
        {
          public void onCompletion(MediaPlayer paramAnonymousMediaPlayer)
          {
            KaraokeFragment.this.ppButton.setImageResource(17301540);
            KaraokeFragment.this.seekBar.setProgress(0);
          }
        });
        this.mp.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener()
        {
          public void onSeekComplete(MediaPlayer paramAnonymousMediaPlayer)
          {
            KaraokeFragment.this.seekBar.setProgress(paramAnonymousMediaPlayer.getCurrentPosition());
          }
        });
      }
      catch (IllegalArgumentException localIllegalArgumentException2)
      {
        Log.e("Karaoke", "playSource: " + localIllegalArgumentException2, localIllegalArgumentException2);
      }
      catch (IllegalStateException localIllegalStateException)
      {
        Log.e("Karaoke", "playSource: " + localIllegalStateException, localIllegalStateException);
      }
      catch (IOException localIOException2)
      {
        Log.e("Karaoke", "playSource: " + localIOException2, localIOException2);
      }
      catch (Exception localException)
      {
        Log.e("Karaoke", "exception: " + localException, localException);
      }
    }
    configure();
    this.webView.loadDataWithBaseURL(App.getResourceUrl(""), (String)localObject1, null, "UTF-8", null);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903151, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    mpPause();
    if (this.progressUpdateTimer != null)
    {
      this.progressUpdateTimer.cancel();
      this.progressUpdateTimer.purge();
      this.progressUpdateTimer = null;
    }
    this.mp = null;
  }
  
  public void onPause()
  {
    super.onPause();
    mpPause();
  }
}
