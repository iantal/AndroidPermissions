package com.qbiki.modules.locationlock;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.location.Location;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import com.qbiki.geofencing.SCGeofence;
import com.qbiki.location.SimpleLocationManager;
import com.qbiki.location.SimpleLocationManager.BestLocationEstimateListenerAdapter;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.StyleUtil;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class LocationLockFragment
  extends SCFragment
{
  public static final String ARG_STORE_ID = "ARG_STORE_ID";
  private static final boolean DEBUG = false;
  private static final String TAG = "LocationLockFragment";
  private Location mBestLocation;
  private String mConfigFileName = "";
  private float mDesiredAccuracy = 5.0F;
  private boolean mFirstAppearance = true;
  private Map<String, SCGeofence> mGeofences = null;
  private View mLocatingContainer;
  private int mLocatingTimeout = 0;
  private ScheduledThreadPoolExecutor mLocatingTimeoutExecutor = new ScheduledThreadPoolExecutor(1);
  private ScheduledFuture<?> mLocatingTimeoutFuture = null;
  private SimpleLocationManager mLocationManager;
  private int mLockDelay = 10;
  private boolean mLockOutsideRegion = true;
  private String mLockPageId = "";
  private String mStoreId = "com.qbiki.locationlock.LocationLockFragment";
  private int mTotalMeasurements = 0;
  private Button mUnlockButton;
  private boolean mUnlockProcessFinished = false;
  private Date mUnlockedGeofenceDate;
  private String mUnlockedGeofenceId;
  
  public LocationLockFragment() {}
  
  private void dataPreparationFinished()
  {
    if (getActivity() == null) {
      return;
    }
    if ((this.mGeofences != null) && (this.mGeofences.size() > 0))
    {
      startUpdatingLocation();
      return;
    }
    updateUiForUnlockInProgress(false);
    DialogUtil.showAlert(getActivity(), 2131361915, 2131362371);
  }
  
  private SCGeofence getBestMatchingRegionForBestLocation()
  {
    Object localObject2;
    if ((this.mGeofences == null) || (this.mBestLocation == null))
    {
      localObject2 = null;
      return localObject2;
    }
    Object localObject1 = null;
    double d1 = -1.0D;
    Iterator localIterator = this.mGeofences.keySet().iterator();
    for (;;)
    {
      localObject2 = localObject1;
      if (!localIterator.hasNext()) {
        break;
      }
      localObject2 = (String)localIterator.next();
      localObject2 = (SCGeofence)this.mGeofences.get(localObject2);
      double d2 = getDistanceOfLocationFromGeofence(this.mBestLocation, (SCGeofence)localObject2);
      if ((d2 <= ((SCGeofence)localObject2).getRadius()) && ((d1 < 0.0D) || (d2 < d1)))
      {
        d1 = d2;
        localObject1 = localObject2;
      }
    }
  }
  
  private double getDistanceOfLocationFromGeofence(Location paramLocation, SCGeofence paramSCGeofence)
  {
    Location localLocation = new Location("codeGenerated");
    localLocation.setLatitude(paramSCGeofence.getLatitude());
    localLocation.setLongitude(paramSCGeofence.getLongitude());
    return paramLocation.distanceTo(localLocation);
  }
  
  private int getMinutesSince(Date paramDate)
  {
    if (paramDate == null) {
      return Integer.MAX_VALUE;
    }
    return (int)((new Date().getTime() - paramDate.getTime()) / 60000L);
  }
  
  private void loadPersistedState()
  {
    if (getActivity() == null) {
      return;
    }
    SharedPreferences localSharedPreferences = getActivity().getSharedPreferences(this.mStoreId, 0);
    this.mUnlockedGeofenceId = localSharedPreferences.getString("unlockedGeofenceId", "");
    this.mUnlockedGeofenceDate = new Date(localSharedPreferences.getLong("unlockedGeofenceDate", 0L));
  }
  
  private void persistState()
  {
    if (getActivity() == null) {
      return;
    }
    SharedPreferences.Editor localEditor = getActivity().getSharedPreferences(this.mStoreId, 0).edit();
    localEditor.putString("unlockedGeofenceId", this.mUnlockedGeofenceId);
    localEditor.putLong("unlockedGeofenceDate", this.mUnlockedGeofenceDate.getTime());
    localEditor.commit();
  }
  
  private void processBestLocation()
  {
    if (this.mGeofences == null) {}
    while (this.mUnlockProcessFinished) {
      return;
    }
    this.mUnlockProcessFinished = true;
    SCGeofence localSCGeofence = getBestMatchingRegionForBestLocation();
    if (localSCGeofence != null)
    {
      this.mUnlockedGeofenceId = localSCGeofence.getId();
      this.mUnlockedGeofenceDate = new Date();
      persistState();
      showPageForGeofence(localSCGeofence);
      return;
    }
    if ((this.mUnlockedGeofenceId != null) && (this.mUnlockedGeofenceId.trim().length() > 0))
    {
      localSCGeofence = (SCGeofence)this.mGeofences.get(this.mUnlockedGeofenceId);
      if ((localSCGeofence != null) && ((!this.mLockOutsideRegion) || (getMinutesSince(this.mUnlockedGeofenceDate) < this.mLockDelay)))
      {
        showPageForGeofence(localSCGeofence);
        return;
      }
    }
    if (this.mBestLocation == null)
    {
      updateUiForUnlockInProgress(false);
      DialogUtil.showAlert(getActivity(), 2131361915, 2131362368);
      return;
    }
    showLockedPage();
  }
  
  private void showLockedPage()
  {
    if ((this.mLockPageId != null) && (this.mLockPageId.trim().length() > 0))
    {
      App.showPageWithId(this.mLockPageId, this);
      return;
    }
    updateUiForUnlockInProgress(false);
    DialogUtil.showAlert(getActivity(), 2131361916, 2131362370);
  }
  
  private void showPageForGeofence(SCGeofence paramSCGeofence)
  {
    if (getActivity() == null) {
      return;
    }
    FragmentActivity localFragmentActivity = getActivity();
    if ("page".equals(paramSCGeofence.getAction()))
    {
      paramSCGeofence = paramSCGeofence.getActionParameters().get("pageId");
      if ((paramSCGeofence != null) && ((paramSCGeofence instanceof String)))
      {
        paramSCGeofence = (String)paramSCGeofence;
        if (paramSCGeofence.trim().length() > 0)
        {
          if (!this.mLockOutsideRegion)
          {
            App.showPageWithId(paramSCGeofence, this);
            return;
          }
          paramSCGeofence = App.getPageFragmentInfo(App.getResourceUrl(paramSCGeofence), localFragmentActivity);
          if (paramSCGeofence != null)
          {
            Intent localIntent = new Intent(localFragmentActivity, AutoFinishPageFragmentActivity.class);
            localIntent.putExtra("ARG_PAGE_FRAGMENT_INFO", paramSCGeofence);
            localIntent.putExtra("PAGE_TRANSITION", paramSCGeofence.getArguments().getString("PAGE_TRANSITION"));
            localIntent.putExtra("ARG_FINISH_TIMEOUT", this.mLockDelay * 60L);
            localFragmentActivity.startActivity(localIntent);
            return;
          }
        }
      }
    }
    updateUiForUnlockInProgress(false);
    DialogUtil.showAlert(localFragmentActivity, 2131361915, 2131362369);
  }
  
  private void startLocatingTimeoutTimer()
  {
    stopLocatingTimeoutTimer();
    ScheduledThreadPoolExecutor localScheduledThreadPoolExecutor = this.mLocatingTimeoutExecutor;
    Runnable local3 = new Runnable()
    {
      public void run()
      {
        if (LocationLockFragment.this.getActivity() == null) {
          return;
        }
        LocationLockFragment.this.getActivity().runOnUiThread(new Runnable()
        {
          public void run()
          {
            if (LocationLockFragment.this.getActivity() == null) {
              return;
            }
            LocationLockFragment.this.stopUpdatingLocation("Timed Out");
            LocationLockFragment.access$902(LocationLockFragment.this, null);
          }
        });
      }
    };
    if (this.mLocatingTimeout > 0) {}
    for (long l = this.mLocatingTimeout;; l = 10L)
    {
      this.mLocatingTimeoutFuture = localScheduledThreadPoolExecutor.schedule(local3, l, TimeUnit.SECONDS);
      return;
    }
  }
  
  private void startUnlockProcess()
  {
    updateUiForUnlockInProgress(true);
    this.mUnlockProcessFinished = false;
    this.mTotalMeasurements = 0;
    this.mBestLocation = null;
    if (this.mGeofences != null)
    {
      dataPreparationFinished();
      return;
    }
    new PrepareDataAsyncTask(null).execute(new Void[0]);
  }
  
  private void startUpdatingLocation()
  {
    if (getActivity() == null) {
      return;
    }
    startLocatingTimeoutTimer();
    this.mLocationManager = new SimpleLocationManager(getActivity(), new SimpleLocationManager.BestLocationEstimateListenerAdapter(false)
    {
      public void onBestLocationEstimateChanged(Location paramAnonymousLocation)
      {
        super.onBestLocationEstimateChanged(paramAnonymousLocation);
        if (LocationLockFragment.this.getActivity() == null) {}
        do
        {
          do
          {
            do
            {
              return;
            } while (LocationLockFragment.this.mUnlockProcessFinished);
            LocationLockFragment.access$308(LocationLockFragment.this);
          } while ((System.currentTimeMillis() - paramAnonymousLocation.getTime() > 5000L) || ((LocationLockFragment.this.mBestLocation != null) && (paramAnonymousLocation.getAccuracy() > LocationLockFragment.this.mBestLocation.getAccuracy() + 0.5F)));
          LocationLockFragment.access$402(LocationLockFragment.this, paramAnonymousLocation);
        } while ((LocationLockFragment.this.mLocatingTimeout != 0) && (paramAnonymousLocation.getAccuracy() > LocationLockFragment.this.mDesiredAccuracy + 0.5F));
        LocationLockFragment.this.stopLocatingTimeoutTimer();
        LocationLockFragment.this.stopUpdatingLocation("Acquired Location");
      }
    });
    this.mLocationManager.setMinTime(500L).setNotifiesLastKnownLocation(false).startUpdatingLocation();
  }
  
  private void stopLocatingTimeoutTimer()
  {
    if (this.mLocatingTimeoutFuture != null)
    {
      this.mLocatingTimeoutFuture.cancel(false);
      this.mLocatingTimeoutFuture = null;
    }
  }
  
  private void stopLocationManager()
  {
    if (this.mLocationManager != null)
    {
      this.mLocationManager.stopUpdatingLocation();
      this.mLocationManager = null;
    }
  }
  
  private void stopUpdatingLocation(String paramString)
  {
    stopLocationManager();
    processBestLocation();
  }
  
  private void updateUiForUnlockInProgress(boolean paramBoolean)
  {
    int j = 8;
    Object localObject = this.mLocatingContainer;
    if (paramBoolean)
    {
      i = 0;
      ((View)localObject).setVisibility(i);
      localObject = this.mUnlockButton;
      if (!paramBoolean) {
        break label46;
      }
    }
    label46:
    for (int i = j;; i = 0)
    {
      ((Button)localObject).setVisibility(i);
      return;
      i = 8;
      break;
    }
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if ((paramBoolean) && (this.mUnlockProcessFinished)) {
      updateUiForUnlockInProgress(false);
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.mLocatingTimeoutExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903135, paramViewGroup, false);
    this.mUnlockButton = ((Button)paramLayoutInflater.findViewById(2131099927));
    this.mUnlockButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        LocationLockFragment.this.startUnlockProcess();
      }
    });
    this.mLocatingContainer = paramLayoutInflater.findViewById(2131099928);
    paramViewGroup = getArguments();
    if (paramViewGroup != null)
    {
      paramBundle = paramViewGroup.getString("PAGE_ID");
      if (paramBundle != null) {
        this.mConfigFileName = (paramBundle.substring(0, paramBundle.lastIndexOf(".")) + ".json");
      }
      paramBundle = paramViewGroup.getString("ARG_STORE_ID");
      if ((paramBundle != null) && (paramBundle.trim().length() > 0)) {
        this.mStoreId = paramBundle;
      }
      paramViewGroup = paramViewGroup.getBundle("PAGE_STYLE");
      StyleUtil.setBackground(paramLayoutInflater, paramViewGroup);
      StyleUtil.setTextColor((TextView)paramLayoutInflater.findViewById(2131099929), paramViewGroup);
    }
    return paramLayoutInflater;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    this.mLocatingTimeoutExecutor.shutdown();
    stopLocationManager();
  }
  
  public void onResume()
  {
    super.onResume();
    if (this.mFirstAppearance)
    {
      this.mFirstAppearance = false;
      startUnlockProcess();
    }
  }
  
  public void onStop()
  {
    super.onStop();
    if (this.mUnlockProcessFinished) {
      updateUiForUnlockInProgress(false);
    }
  }
  
  private class PrepareDataAsyncTask
    extends AsyncTask<Void, Void, String>
  {
    private static final String TAG = "LocationLockFragment.PrepareDataAsyncTask";
    
    private PrepareDataAsyncTask() {}
    
    protected String doInBackground(Void... paramVarArgs)
    {
      if (LocationLockFragment.this.getActivity() == null) {
        return null;
      }
      HashMap localHashMap = new HashMap();
      for (;;)
      {
        int i;
        try
        {
          localJSONObject = new JSONObject(DataUtil.readString(App.getResourceStream(LocationLockFragment.this.mConfigFileName)));
          JSONArray localJSONArray = localJSONObject.getJSONArray("items");
          i = 0;
          int j = localJSONArray.length();
          if (i < j)
          {
            paramVarArgs = null;
            try
            {
              SCGeofence localSCGeofence = SCGeofence.fromJson(localJSONArray.getJSONObject(i));
              paramVarArgs = localSCGeofence;
            }
            catch (JSONException localJSONException)
            {
              Log.w("LocationLockFragment.PrepareDataAsyncTask", "Error parsing geofence: " + i, localJSONException);
              continue;
            }
            if ((paramVarArgs == null) || (!paramVarArgs.isValid())) {
              break label302;
            }
            localHashMap.put(paramVarArgs.getId(), paramVarArgs);
          }
        }
        catch (IllegalArgumentException paramVarArgs)
        {
          JSONObject localJSONObject;
          Log.e("LocationLockFragment.PrepareDataAsyncTask", "Error loading config file: " + paramVarArgs);
          return null;
          LocationLockFragment.access$1102(LocationLockFragment.this, localHashMap);
          LocationLockFragment.access$1202(LocationLockFragment.this, localJSONObject.getBoolean("lockOutsideRegion"));
          LocationLockFragment.access$1302(LocationLockFragment.this, localJSONObject.getInt("lockDelay"));
          LocationLockFragment.access$1402(LocationLockFragment.this, localJSONObject.getString("lockPageId"));
          LocationLockFragment.access$502(LocationLockFragment.this, localJSONObject.getInt("locatingTimeout"));
          LocationLockFragment.this.loadPersistedState();
          return "ok";
        }
        catch (IOException paramVarArgs)
        {
          Log.e("LocationLockFragment.PrepareDataAsyncTask", "Error loading config file: " + paramVarArgs);
          return null;
        }
        catch (JSONException paramVarArgs)
        {
          Log.e("LocationLockFragment.PrepareDataAsyncTask", "Error parsing config file: " + paramVarArgs);
          return null;
        }
        label302:
        i += 1;
      }
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      if (LocationLockFragment.this.getActivity() == null) {
        return;
      }
      if (paramString == null)
      {
        LocationLockFragment.access$1202(LocationLockFragment.this, true);
        LocationLockFragment.access$1302(LocationLockFragment.this, 10);
        LocationLockFragment.access$1402(LocationLockFragment.this, null);
        LocationLockFragment.access$502(LocationLockFragment.this, 0);
      }
      LocationLockFragment.this.dataPreparationFinished();
    }
  }
}
