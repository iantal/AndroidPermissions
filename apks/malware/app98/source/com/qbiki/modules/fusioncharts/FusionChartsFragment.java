package com.qbiki.modules.fusioncharts;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.Log;
import android.webkit.WebSettings;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.WebViewFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.DialogUtil.PromptAuthListener;
import com.qbiki.util.StringUtil;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.io.FileUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.json.JSONException;
import org.json.JSONObject;

public class FusionChartsFragment
  extends WebViewFragment
{
  public static final String ACTION_PARAMS = "ACTION_PARAMS";
  private static final boolean DEBUG = false;
  public static final String PAGE_ID = "PAGE_ID";
  private static final String TAG = FusionChartsFragment.class.getSimpleName();
  private String mAppResourcePath;
  private String mPageID = "";
  private Resources mResources;
  private String mTempPrefix;
  private String mUrl;
  
  public FusionChartsFragment() {}
  
  private boolean createTempFilesForPage(String paramString)
  {
    String str1 = this.mAppResourcePath + paramString;
    String str2 = this.mAppResourcePath + paramString + ".chartsettings.json";
    String str3 = this.mAppResourcePath + this.mTempPrefix + paramString;
    paramString = this.mAppResourcePath + this.mTempPrefix + paramString + ".chartsettings.json";
    if (!replaceFile(str1, str3)) {}
    while (!replaceFile(str2, paramString)) {
      return false;
    }
    return true;
  }
  
  private String getDataSourceURL(String paramString)
  {
    Object localObject5 = App.getResourceStream(paramString);
    Object localObject3 = null;
    Object localObject4 = null;
    paramString = null;
    String str = paramString;
    Object localObject1 = localObject3;
    Object localObject2 = localObject4;
    try
    {
      localObject5 = new JSONObject(DataUtil.readString((InputStream)localObject5));
      str = paramString;
      localObject1 = localObject3;
      localObject2 = localObject4;
      if (((JSONObject)localObject5).getString("isDataSourceLocal").compareTo("true") == 0) {
        return null;
      }
      str = paramString;
      localObject1 = localObject3;
      localObject2 = localObject4;
      paramString = ((JSONObject)localObject5).getString("dataSourceURL");
      str = paramString;
      localObject1 = paramString;
      localObject2 = paramString;
      boolean bool = StringUtil.isEmpty(paramString);
      if (bool) {
        break label212;
      }
    }
    catch (IllegalArgumentException paramString)
    {
      for (;;)
      {
        Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
        paramString = str;
      }
    }
    catch (IOException paramString)
    {
      for (;;)
      {
        Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
        paramString = (String)localObject1;
      }
    }
    catch (JSONException paramString)
    {
      for (;;)
      {
        Log.e(TAG, "ERROR:" + paramString.getLocalizedMessage(), paramString);
        paramString = (String)localObject2;
      }
    }
    return paramString;
    label212:
    return null;
  }
  
  private GetChartDataAsyncTask getDownloadAsyncTask()
  {
    new GetChartDataAsyncTask().setListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        if (((Integer)paramAnonymousObject).intValue() == 0)
        {
          FusionChartsFragment.this.showAuthDialog();
          return;
        }
        paramAnonymousObject = FusionChartsFragment.this.getParamsFromUrl(FusionChartsFragment.this.mUrl);
        FusionChartsFragment.this.createTempFilesForPage(FusionChartsFragment.this.mPageID);
        FusionChartsFragment.this.updateSettingsForPage(FusionChartsFragment.this.mPageID, paramAnonymousObject);
        FusionChartsFragment.this.mWebView.loadUrl("file://" + FusionChartsFragment.this.mAppResourcePath + FusionChartsFragment.this.mTempPrefix + FusionChartsFragment.this.mPageID);
      }
    });
  }
  
  private HashMap<String, String> getParamsFromUrl(String paramString)
  {
    try
    {
      HashMap localHashMap = new HashMap();
      Iterator localIterator = URLEncodedUtils.parse(new URI(URLDecoder.decode(paramString, "UTF-8")), "UTF-8").iterator();
      for (;;)
      {
        paramString = localHashMap;
        if (!localIterator.hasNext()) {
          break;
        }
        paramString = (NameValuePair)localIterator.next();
        localHashMap.put(paramString.getName(), paramString.getValue());
      }
      return null;
    }
    catch (URISyntaxException paramString)
    {
      Log.e(TAG, "URL parsing error ", paramString);
      paramString = null;
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      Log.e(TAG, "URL parsing error ", paramString);
    }
  }
  
  private String getTempPrefixForPageID(String paramString)
  {
    return paramString.hashCode() + "";
  }
  
  private boolean replaceFile(String paramString1, String paramString2)
  {
    paramString1 = new File(paramString1);
    if (paramString1.exists()) {}
    try
    {
      FileUtils.copyFile(paramString1, new File(paramString2));
      return true;
    }
    catch (IOException paramString2)
    {
      Log.e(TAG, "Error: Can't copy file: " + paramString1.getAbsolutePath(), paramString2);
    }
    return false;
  }
  
  @SuppressLint({"NewApi"})
  private void setAdditionalWebViewSettings()
  {
    if (Build.VERSION.SDK_INT >= 16) {
      this.mWebView.getSettings().setAllowUniversalAccessFromFileURLs(true);
    }
    this.mWebView.getSettings().setPluginState(WebSettings.PluginState.ON);
    this.mWebView.getSettings().setLoadWithOverviewMode(false);
    this.mWebView.getSettings().setUseWideViewPort(false);
  }
  
  private void showAuthDialog()
  {
    DialogUtil.showPromptAuth(getActivity(), this.mResources.getString(2131362350), this.mResources.getString(2131362349), false, this.mResources.getString(2131361920), new DialogUtil.PromptAuthListener()
    {
      public void onCancel() {}
      
      public void onStringInputAuth(String paramAnonymousString1, String paramAnonymousString2)
      {
        String str = App.getAppResourcesPath() + "/";
        str = str + FusionChartsFragment.this.mTempPrefix + FusionChartsFragment.this.mPageID + ".chartdata.json";
        FusionChartsFragment.this.getDownloadAsyncTask().execute(new Object[] { str, FusionChartsFragment.this.mUrl, paramAnonymousString1, paramAnonymousString2 });
      }
    });
  }
  
  private boolean updateSettingsForPage(String paramString, HashMap<String, String> paramHashMap)
  {
    String str1 = App.getAppResourcesPath() + "/";
    String str2 = this.mTempPrefix + paramString + ".chartdata.json";
    paramString = this.mTempPrefix + paramString + ".chartsettings.json";
    String str3 = str1 + paramString;
    paramString = App.getResourceStream(paramString);
    for (;;)
    {
      try
      {
        localJSONObject = new JSONObject(DataUtil.readString(paramString));
        str1 = (String)paramHashMap.get("Chart");
        paramString = str1;
        if (str1 != null) {
          break label295;
        }
        paramString = localJSONObject.getString("type");
      }
      catch (IllegalArgumentException paramString)
      {
        JSONObject localJSONObject;
        Log.e(TAG, "Error: Parsing the config file failed:", paramString);
        return false;
      }
      catch (IOException paramString)
      {
        Log.e(TAG, "Error: Parsing the config file failed:", paramString);
        return false;
      }
      catch (JSONException paramString)
      {
        Log.e(TAG, "Error: Parsing the config file failed:", paramString);
        return false;
      }
      paramHashMap = (String)paramHashMap.get("DataFormat");
      paramString = paramHashMap;
      if (paramHashMap == null)
      {
        paramHashMap = localJSONObject.getString("dataFormat");
        paramString = paramHashMap;
        if (paramHashMap == null) {
          paramString = "JSON";
        }
      }
      localJSONObject.put("isDataSourceLocal", true);
      localJSONObject.put("type", str1);
      localJSONObject.put("dataFormat", paramString);
      localJSONObject.put("dataSourceURL", str2);
      paramString = new FileOutputStream(str3);
      paramString.write(localJSONObject.toString().getBytes());
      paramString.flush();
      paramString.close();
      return true;
      label295:
      str1 = paramString;
      if (paramString == null) {
        str1 = "Column2D";
      }
    }
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mResources = paramActivity.getResources();
    super.onAttach(paramActivity);
  }
  
  public void onResume()
  {
    setAdditionalWebViewSettings();
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mPageID = ((Bundle)localObject).getString("PAGE_ID");
      this.mUrl = ((Bundle)localObject).getString("ACTION_PARAMS");
      this.mAppResourcePath = (App.getAppResourcesPath() + "/");
      this.mTempPrefix = getTempPrefixForPageID(this.mPageID);
      if (StringUtil.isEmpty(this.mUrl)) {
        this.mUrl = getDataSourceURL(this.mPageID + ".chartsettings.json");
      }
      if (StringUtil.isEmpty(this.mUrl)) {
        break label187;
      }
      localObject = this.mAppResourcePath + this.mTempPrefix + this.mPageID + ".chartdata.json";
      getDownloadAsyncTask().execute(new Object[] { localObject, this.mUrl });
    }
    for (;;)
    {
      super.onResume();
      return;
      label187:
      this.mWebView.loadUrl("file://" + this.mAppResourcePath + this.mPageID);
    }
  }
}
