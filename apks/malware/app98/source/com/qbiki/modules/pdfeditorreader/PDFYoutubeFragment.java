package com.qbiki.modules.pdfeditorreader;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnKeyListener;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.view.Display;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebChromeClient.CustomViewCallback;
import android.webkit.WebView;
import android.widget.FrameLayout;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class PDFYoutubeFragment
  extends DialogFragment
{
  public static final String YOUTUBE_VIDEO_ID = "YOUTUBE_VIDEO_ID";
  WebChromeClient.CustomViewCallback callback = null;
  boolean fullscreen = false;
  boolean isDialog = false;
  private final DialogInterface.OnKeyListener keyListener = new DialogInterface.OnKeyListener()
  {
    public boolean onKey(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
    {
      return PDFYoutubeFragment.this.processKey(paramAnonymousInt, paramAnonymousKeyEvent);
    }
  };
  private YoutubeWebView webView = null;
  
  public PDFYoutubeFragment() {}
  
  private boolean processKey(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramInt == 4)
    {
      bool1 = bool2;
      if (this.fullscreen)
      {
        if (!this.isDialog) {
          break label39;
        }
        this.webView.hideCustomView();
        bool1 = true;
      }
    }
    return bool1;
    label39:
    if (this.fullscreen) {
      this.webView.stopLoading();
    }
    this.webView.hideCustomView();
    return false;
  }
  
  public void onCancel(DialogInterface paramDialogInterface)
  {
    if (this.webView != null)
    {
      this.webView.stopLoading();
      this.webView.hideCustomView();
      this.webView.destroy();
    }
    super.onCancel(paramDialogInterface);
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    if ((this.isDialog) && (this.fullscreen))
    {
      Object localObject = getActivity().getWindowManager().getDefaultDisplay();
      int i = ((Display)localObject).getWidth();
      int j = ((Display)localObject).getHeight();
      localObject = this.webView.getLayout();
      ((FrameLayout)localObject).setMinimumWidth(i);
      ((FrameLayout)localObject).setMinimumHeight(j);
    }
    super.onConfigurationChanged(paramConfiguration);
  }
  
  @SuppressLint({"SetJavaScriptEnabled"})
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramBundle = getArguments();
    paramViewGroup = "";
    paramLayoutInflater = paramViewGroup;
    if (paramBundle != null)
    {
      paramLayoutInflater = paramViewGroup;
      if (paramBundle.containsKey("YOUTUBE_VIDEO_ID")) {
        paramLayoutInflater = paramBundle.getString("YOUTUBE_VIDEO_ID");
      }
      this.isDialog = paramBundle.getBoolean("isDialog");
    }
    this.webView = new YoutubeWebView(getActivity());
    paramViewGroup = this.webView.getLayout();
    if (!this.isDialog) {
      getActivity().setRequestedOrientation(0);
    }
    for (;;)
    {
      paramBundle = this.webView;
      YoutubeWebView localYoutubeWebView = this.webView;
      localYoutubeWebView.getClass();
      paramBundle.setActionProvider(new YoutubeWebView.YoutubeWebViewActionProvider(localYoutubeWebView)
      {
        public void willEnterFullscreen()
        {
          PDFYoutubeFragment.this.fullscreen = true;
          if (PDFYoutubeFragment.this.isDialog)
          {
            PDFYoutubeFragment.this.setCancelable(false);
            Object localObject = PDFYoutubeFragment.this.getActivity().getWindowManager().getDefaultDisplay();
            int i = ((Display)localObject).getWidth();
            int j = ((Display)localObject).getHeight();
            localObject = PDFYoutubeFragment.this.webView.getLayout();
            ((FrameLayout)localObject).setMinimumWidth(i);
            ((FrameLayout)localObject).setMinimumHeight(j);
            return;
          }
          PDFYoutubeFragment.this.getActivity().getWindow().addFlags(1024);
        }
        
        public void willExitFullscreen()
        {
          PDFYoutubeFragment.this.fullscreen = false;
          if (PDFYoutubeFragment.this.isDialog)
          {
            FrameLayout localFrameLayout = PDFYoutubeFragment.this.webView.getLayout();
            localFrameLayout.setMinimumWidth(560);
            localFrameLayout.setMinimumHeight(315);
            PDFYoutubeFragment.this.setCancelable(true);
            return;
          }
          PDFYoutubeFragment.this.getActivity().getWindow().clearFlags(1024);
        }
      });
      paramLayoutInflater = "<html><head><style>body {padding:0px;margin:0px;</style></head><body><center><iframe width='100%' height='100%' src='http://www.youtube.com/embed/" + paramLayoutInflater + "?autoplay=1&fs=0' frameborder='0' allowfullscreen='false'></iframe>";
      this.webView.loadDataWithBaseURL("http://www.youtube.com/embed", paramLayoutInflater, null, "UTF-8", null);
      return paramViewGroup;
      paramViewGroup.setMinimumWidth(560);
      paramViewGroup.setMinimumHeight(315);
      getDialog().setOnKeyListener(this.keyListener);
    }
  }
  
  public void onPause()
  {
    super.onPause();
    Object localObject = null;
    try
    {
      Method localMethod = WebView.class.getMethod("onPause", new Class[0]);
      localObject = localMethod;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      for (;;) {}
    }
    catch (SecurityException localSecurityException)
    {
      for (;;) {}
    }
    if (localObject != null) {}
    try
    {
      localObject.invoke(this.webView, new Object[0]);
      if ((this.isDialog) && (this.fullscreen))
      {
        this.webView.stopLoading();
        this.webView.hideCustomView();
      }
      return;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;) {}
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;) {}
    }
  }
  
  public void onStop()
  {
    if ((this.webView != null) && (this.fullscreen))
    {
      this.webView.stopLoading();
      this.webView.hideCustomView();
      this.webView.destroy();
    }
    super.onStop();
  }
}
