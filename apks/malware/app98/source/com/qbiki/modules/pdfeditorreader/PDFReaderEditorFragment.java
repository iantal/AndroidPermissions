package com.qbiki.modules.pdfeditorreader;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.googlecode.apdfviewer.PDF.Size;
import com.qbiki.modules.pdfreader.PDFDocumentHelper;
import com.qbiki.modules.pdfreader.PDFReaderFragment;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.util.DataUtil;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.ImageUtil;
import fi.harism.curl.CurlView;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class PDFReaderEditorFragment
  extends PDFReaderFragment
{
  public static final String NEXT_PAGE_IDENTIFIER = "NEXT_PAGE_IDENTIFIER";
  private static final int PDFEDITOR_CONTENTS_MENU_ITEM_ID = 1;
  private static final int TABLET_SMALLEST_SCREEN_DIMENSION = 500;
  private View.OnClickListener boxClicked = new View.OnClickListener()
  {
    public void onClick(View paramAnonymousView)
    {
      Object localObject = (Integer)paramAnonymousView.getTag(2131099681);
      paramAnonymousView = (Integer)paramAnonymousView.getTag(2131099682);
      JSONObject localJSONObject;
      if ((localObject != null) && (paramAnonymousView != null))
      {
        localJSONObject = PDFReaderEditorFragment.this.findBoxInfo(((Integer)localObject).intValue(), paramAnonymousView.intValue());
        if (localJSONObject == null) {}
      }
      try
      {
        paramAnonymousView = localJSONObject.getString("action");
        localObject = localJSONObject.getString("actionParam");
        localJSONObject = localJSONObject.getJSONObject("actionParams");
        PDFReaderEditorFragment.this.performAction(paramAnonymousView, (String)localObject, localJSONObject);
        return;
      }
      catch (JSONException paramAnonymousView)
      {
        Log.d("PDFEditor", "boxClicked", paramAnonymousView);
        return;
      }
      catch (NumberFormatException paramAnonymousView)
      {
        Log.d("PDFEditor", "boxClicked", paramAnonymousView);
      }
    }
  };
  private ListView contentsList = null;
  private LinearLayout controlsContainer = null;
  int currentShowingLayer = -1;
  private boolean isTablet = false;
  ArrayList<View> layerViews = new ArrayList();
  SparseArray<SparseArray<FrameLayout.LayoutParams>> layoutParamsMap = new SparseArray();
  private Button nextButton = null;
  String nextPageId = null;
  JSONArray pagesInfo = null;
  JSONObject pdfInfo = null;
  private Object syncObject = new Object();
  JSONArray tableOfContents = null;
  private ImageButton tcButton = null;
  private final BaseAdapter tocAdapater = new BaseAdapter()
  {
    public int getCount()
    {
      return PDFReaderEditorFragment.this.tableOfContents.length();
    }
    
    public JSONObject getItem(int paramAnonymousInt)
    {
      try
      {
        JSONObject localJSONObject = PDFReaderEditorFragment.this.tableOfContents.getJSONObject(paramAnonymousInt);
        return localJSONObject;
      }
      catch (JSONException localJSONException) {}
      return null;
    }
    
    public long getItemId(int paramAnonymousInt)
    {
      return paramAnonymousInt;
    }
    
    public View getView(int paramAnonymousInt, View paramAnonymousView, ViewGroup paramAnonymousViewGroup)
    {
      Object localObject = getItem(paramAnonymousInt);
      paramAnonymousViewGroup = (LinearLayout)paramAnonymousView;
      paramAnonymousView = paramAnonymousViewGroup;
      if (paramAnonymousViewGroup == null) {
        paramAnonymousView = (LinearLayout)PDFReaderEditorFragment.this.getActivity().getLayoutInflater().inflate(2130903184, null);
      }
      paramAnonymousViewGroup = (ImageView)paramAnonymousView.findViewById(2131099989);
      TextView localTextView1 = (TextView)paramAnonymousView.findViewById(2131100097);
      TextView localTextView2 = (TextView)paramAnonymousView.findViewById(2131100098);
      if (localObject != null) {}
      try
      {
        String str1 = ((JSONObject)localObject).getString("icon");
        String str2 = ((JSONObject)localObject).getString("title");
        localObject = ((JSONObject)localObject).getString("subtitle");
        paramAnonymousViewGroup.setImageBitmap(ImageUtil.decodeBitmapResource(str1, 100));
        localTextView1.setText(str2);
        localTextView2.setText((CharSequence)localObject);
        return paramAnonymousView;
      }
      catch (JSONException paramAnonymousViewGroup) {}
      return paramAnonymousView;
    }
  };
  private View touchOverlay = null;
  
  public PDFReaderEditorFragment() {}
  
  private void _refreshLayerForPage(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    SparseArray localSparseArray = (SparseArray)this.layoutParamsMap.get(paramInt);
    if (localSparseArray == null) {
      return;
    }
    paramInt = 0;
    while (paramInt < this.layerViews.size())
    {
      View localView = (View)this.layerViews.get(paramInt);
      FrameLayout.LayoutParams localLayoutParams2 = (FrameLayout.LayoutParams)localSparseArray.get(((Integer)localView.getTag(2131099682)).intValue());
      if (localLayoutParams2 != null)
      {
        FrameLayout.LayoutParams localLayoutParams1 = localLayoutParams2;
        int i;
        if (paramBoolean1)
        {
          i = this.curlView.getWidth() / 2;
          localLayoutParams1 = new FrameLayout.LayoutParams(localLayoutParams2);
          localLayoutParams1.leftMargin += i;
          localLayoutParams1.gravity = 51;
        }
        if ((localView instanceof Button))
        {
          i = localLayoutParams1.width;
          int j = ((Button)localView).getPaddingLeft();
          int k = ((Button)localView).getPaddingRight();
          int m = localLayoutParams1.height;
          int n = ((Button)localView).getPaddingTop();
          int i1 = ((Button)localView).getPaddingBottom();
          float f = textSizeFor(((Button)localView).getTypeface(), ((Button)localView).getText().toString(), new PDF.Size(i - j - k, m - n - i1));
          ((Button)localView).setTextSize(f);
        }
        localView.setLayoutParams(localLayoutParams1);
      }
      if (paramBoolean2) {
        localView.setVisibility(0);
      }
      paramInt += 1;
    }
    bringUIElementsToFront();
  }
  
  private void addLayerForPage(int paramInt, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        localObject = pageInfoForIndex(paramInt);
        if (localObject == null) {
          continue;
        }
      }
      catch (Exception localException)
      {
        Object localObject;
        SparseArray localSparseArray;
        JSONArray localJSONArray;
        int i;
        int j;
        Log.d("PDFEditor", "showLayerForPageIndex", localException);
        continue;
        i += 1;
        continue;
      }
      try
      {
        localSparseArray = (SparseArray)this.layoutParamsMap.get(paramInt);
        if (localSparseArray == null) {
          return;
        }
        localJSONArray = ((JSONObject)localObject).getJSONArray("boxes");
        i = 0;
        j = localJSONArray.length();
        if (i < j) {
          try
          {
            JSONObject localJSONObject = localJSONArray.getJSONObject(i);
            j = localJSONObject.getInt("index");
            FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)localSparseArray.get(j);
            if (localLayoutParams == null) {
              continue;
            }
            localObject = localLayoutParams;
            if (paramBoolean)
            {
              int k = this.curlView.getWidth() / 2;
              localObject = new FrameLayout.LayoutParams(localLayoutParams);
              ((FrameLayout.LayoutParams)localObject).gravity = 51;
              ((FrameLayout.LayoutParams)localObject).leftMargin += k;
            }
            localObject = viewForBoxInfo(localJSONObject, (FrameLayout.LayoutParams)localObject);
            if (localObject == null) {
              continue;
            }
            ((View)localObject).setTag(2131099681, Integer.valueOf(paramInt));
            ((View)localObject).setTag(2131099682, Integer.valueOf(j));
            this.layerViews.add(localObject);
            ((FrameLayout)this.fview).addView((View)localObject);
          }
          catch (JSONException localJSONException1)
          {
            Log.d("PDFEditor", "showLayerForPageIndex", localJSONException1);
          }
        }
        bringUIElementsToFront();
      }
      catch (JSONException localJSONException2)
      {
        Log.d("PDFEditor", "showLayerForPageIndex", localJSONException2);
      }
    }
  }
  
  private void bringUIElementsToFront()
  {
    ((FrameLayout)this.fview).bringChildToFront(this.controlsContainer);
    if (this.touchOverlay != null) {
      ((FrameLayout)this.fview).bringChildToFront(this.touchOverlay);
    }
    if (this.contentsList != null) {
      ((FrameLayout)this.fview).bringChildToFront(this.contentsList);
    }
  }
  
  private JSONObject findBoxInfo(int paramInt1, int paramInt2)
  {
    Object localObject = pageInfoForIndex(paramInt1);
    if (localObject != null) {
      try
      {
        localObject = ((JSONObject)localObject).getJSONArray("boxes");
        paramInt1 = 0;
        for (;;)
        {
          int i = ((JSONArray)localObject).length();
          if (paramInt1 >= i) {
            break;
          }
          try
          {
            JSONObject localJSONObject = ((JSONArray)localObject).getJSONObject(paramInt1);
            i = localJSONObject.getInt("index");
            if (i == paramInt2) {
              return localJSONObject;
            }
          }
          catch (JSONException localJSONException2)
          {
            Log.d("PDFEditor", "findBoxInfo", localJSONException2);
            paramInt1 += 1;
          }
        }
        return null;
      }
      catch (JSONException localJSONException1)
      {
        Log.d("PDFEditor", "findBoxInfo", localJSONException1);
      }
    }
  }
  
  private void loadJSONLayers()
  {
    Object localObject1 = getArguments();
    if (localObject1 == null) {}
    Object localObject2;
    do
    {
      do
      {
        return;
        localObject2 = ((Bundle)localObject1).getString("PAGE_ID");
        this.nextPageId = ((Bundle)localObject1).getString("NEXT_PAGE_IDENTIFIER");
      } while (localObject2 == null);
      localObject2 = App.getResourceStream(((String)localObject2).replace(".html", "") + ".pdfeditor.json");
      localObject1 = "{}";
    } while (localObject2 == null);
    for (;;)
    {
      try
      {
        localObject2 = DataUtil.readString((InputStream)localObject2);
        localObject1 = localObject2;
      }
      catch (IOException localIOException)
      {
        Log.d("PDFEditor", "loadJSONLayers", localIOException);
        continue;
      }
      try
      {
        this.pdfInfo = new JSONObject((String)localObject1);
        this.pagesInfo = this.pdfInfo.getJSONArray("pages");
        this.tableOfContents = this.pdfInfo.getJSONObject("tableofcontents").getJSONArray("items");
        return;
      }
      catch (JSONException localJSONException)
      {
        Log.d("PDFEditor", "loadJSONLayers", localJSONException);
        return;
      }
    }
  }
  
  private JSONObject pageInfoForIndex(int paramInt)
  {
    JSONObject localJSONObject;
    if (this.pagesInfo == null)
    {
      localJSONObject = null;
      return localJSONObject;
    }
    int i = 0;
    for (;;)
    {
      if (i >= this.pagesInfo.length()) {
        break label74;
      }
      try
      {
        localJSONObject = this.pagesInfo.getJSONObject(i);
        int j = localJSONObject.getInt("index");
        if (j == paramInt) {
          break;
        }
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          Log.d("PDFEditor", "pageForIndex", localJSONException);
        }
      }
      i += 1;
    }
    label74:
    return null;
  }
  
  private void refreshLayerForPage(int paramInt, boolean paramBoolean)
  {
    if (this.curlView.getViewMode() == 2)
    {
      if (paramInt == 0)
      {
        _refreshLayerForPage(paramInt, true, paramBoolean);
        return;
      }
      if (paramInt == this.pageCount / 2 - 1)
      {
        _refreshLayerForPage(paramInt * 2, false, paramBoolean);
        return;
      }
      if (paramInt == 1)
      {
        _refreshLayerForPage(paramInt, false, paramBoolean);
        _refreshLayerForPage(paramInt + 1, true, paramBoolean);
        return;
      }
      _refreshLayerForPage(paramInt * 2, false, paramBoolean);
      _refreshLayerForPage(paramInt * 2 - 1, true, paramBoolean);
      return;
    }
    _refreshLayerForPage(paramInt, false, paramBoolean);
  }
  
  private void removeLayer()
  {
    for (;;)
    {
      int i;
      synchronized (this.syncObject)
      {
        this.currentShowingLayer = -1;
        i = 0;
        if (i < this.layerViews.size())
        {
          View localView = (View)this.layerViews.get(i);
          if (localView != null) {
            ((FrameLayout)this.fview).removeView(localView);
          } else {
            Log.e("PDFEditor", "removeLayer: view is null");
          }
        }
      }
      this.layerViews.clear();
      return;
      i += 1;
    }
  }
  
  private void showLayerForPageIndex(final int paramInt, boolean paramBoolean)
  {
    synchronized (this.syncObject)
    {
      getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          Log.d("PDFEditor", "showLayerForPageIndex(" + paramInt + ")");
          PDFReaderEditorFragment.this.removeLayer();
          PDFReaderEditorFragment.this.currentShowingLayer = paramInt;
          if (PDFReaderEditorFragment.this.curlView.getViewMode() == 2)
          {
            if (paramInt == 0)
            {
              PDFReaderEditorFragment.this.addLayerForPage(paramInt, true);
              return;
            }
            if (paramInt == PDFReaderEditorFragment.this.pageCount / 2 - 1)
            {
              PDFReaderEditorFragment.this.addLayerForPage(paramInt * 2, false);
              return;
            }
            if (paramInt == 1)
            {
              PDFReaderEditorFragment.this.addLayerForPage(paramInt, false);
              PDFReaderEditorFragment.this.addLayerForPage(paramInt + 1, true);
              return;
            }
            PDFReaderEditorFragment.this.addLayerForPage(paramInt * 2, false);
            PDFReaderEditorFragment.this.addLayerForPage(paramInt * 2 - 1, true);
            return;
          }
          PDFReaderEditorFragment.this.addLayerForPage(paramInt, false);
        }
      });
      return;
    }
  }
  
  private String unescapeSpecials(String paramString)
  {
    try
    {
      String str = URLDecoder.decode(paramString, "UTF-8");
      return str;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      Log.d("PDFEditor", "unescapeSpecials", localUnsupportedEncodingException);
    }
    return paramString;
  }
  
  public Bitmap bitmapForBoxInfo(JSONObject paramJSONObject, FrameLayout.LayoutParams paramLayoutParams)
  {
    Object localObject = null;
    paramLayoutParams = viewForBoxInfo(paramJSONObject, paramLayoutParams);
    paramJSONObject = localObject;
    if (paramLayoutParams != null) {
      paramJSONObject = loadBitmapFromView(paramLayoutParams);
    }
    return paramJSONObject;
  }
  
  protected void destroyCurlView()
  {
    removeLayer();
    super.destroyCurlView();
  }
  
  public void didCurl(final int paramInt1, int paramInt2)
  {
    super.didCurl(paramInt1, paramInt2);
    if (paramInt2 == 0)
    {
      this.fview.post(new Runnable()
      {
        public void run()
        {
          PDFReaderEditorFragment.this.refreshLayerViewsPosition(true);
        }
      });
      return;
    }
    this.fview.post(new Runnable()
    {
      public void run()
      {
        PDFReaderEditorFragment.this.showLayerForPageIndex(paramInt1, true);
      }
    });
  }
  
  public void didStartDragging(int paramInt)
  {
    super.didStartDragging(paramInt);
    Object localObject1 = this.syncObject;
    paramInt = 0;
    try
    {
      while (paramInt < this.layerViews.size())
      {
        ((View)this.layerViews.get(paramInt)).setVisibility(4);
        paramInt += 1;
      }
      return;
    }
    finally {}
  }
  
  public void didStopDragging(boolean paramBoolean)
  {
    super.didStopDragging(paramBoolean);
  }
  
  public Rect getTextBounds(Typeface paramTypeface, float paramFloat, String paramString)
  {
    paramTypeface = new Rect();
    Paint localPaint = new Paint();
    localPaint.setTypeface(Typeface.DEFAULT);
    localPaint.setTextSize(paramFloat);
    localPaint.getTextBounds(paramString, 0, paramString.length(), paramTypeface);
    return paramTypeface;
  }
  
  protected void hideTableOfContents()
  {
    if (this.contentsList != null) {
      this.contentsList.setVisibility(8);
    }
    if (this.touchOverlay != null)
    {
      ((FrameLayout)this.fview).removeView(this.touchOverlay);
      this.touchOverlay = null;
    }
  }
  
  protected void init()
  {
    int i = DeviceUtil.getSmallestScreenDimension(getActivity());
    if (DeviceUtil.pxToDp(getActivity(), i) >= 500) {
      this.isTablet = true;
    }
    loadJSONLayers();
    super.init();
  }
  
  public FrameLayout.LayoutParams layoutParamsFor(JSONObject paramJSONObject, PDF.Size paramSize1, PDF.Size paramSize2)
  {
    FrameLayout.LayoutParams localLayoutParams = new FrameLayout.LayoutParams(10, 10);
    Object localObject5 = null;
    Object localObject6 = null;
    Object localObject3 = "selection";
    Object localObject1 = localObject3;
    if (paramJSONObject.has("type")) {}
    try
    {
      localObject1 = paramJSONObject.getString("type");
      localObject3 = localObject5;
      if (paramJSONObject.has("coord")) {}
      try
      {
        localObject3 = paramJSONObject.getJSONObject("coord");
        if ((localObject3 == null) || (localObject1 == null)) {}
        for (;;)
        {
          return localLayoutParams;
          localObject5 = localObject6;
          if (paramJSONObject.has("boxStyle")) {}
          try
          {
            localObject5 = paramJSONObject.getJSONObject("boxStyle");
            paramJSONObject = PDFDocumentHelper.sizeFrom(paramSize2, new PDF.Size(paramSize1.width, paramSize1.height));
            try
            {
              int m = (int)(paramSize2.width * ((JSONObject)localObject3).getDouble("x") / 100.0D);
              int i1 = (int)(paramSize2.height * ((JSONObject)localObject3).getDouble("y") / 100.0D);
              int n = (int)(paramSize2.width * ((JSONObject)localObject3).getDouble("w") / 100.0D);
              int k = (int)(paramSize2.height * ((JSONObject)localObject3).getDouble("h") / 100.0D);
              i = Math.abs(paramSize1.width - paramJSONObject.width) / 2;
              j = Math.abs(paramSize1.height - paramJSONObject.height) / 2;
              float f = Math.min(paramSize1.width / paramSize2.width, paramSize1.height / paramSize2.height);
              m = (int)(m * f);
              i1 = (int)(i1 * f);
              n = (int)(n * f);
              k = (int)(k * f);
              localLayoutParams.leftMargin = (m + i);
              localLayoutParams.topMargin = (i1 + j);
              localLayoutParams.width = n;
              localLayoutParams.height = k;
              localLayoutParams.gravity = 51;
            }
            catch (JSONException paramJSONObject)
            {
              for (;;)
              {
                int i;
                int j;
                Log.d("PDFEditor", "loadJSONLayers", paramJSONObject);
              }
            }
            if ((localObject5 == null) || (!((String)localObject1).equalsIgnoreCase("image"))) {
              continue;
            }
            i = 0;
            if (!((JSONObject)localObject5).has("border-width")) {
              continue;
            }
            try
            {
              j = ((JSONObject)localObject5).getInt("border-width");
              i = j;
            }
            catch (JSONException paramJSONObject)
            {
              for (;;) {}
            }
            localLayoutParams.width += i * 2;
            localLayoutParams.height += i * 2;
            return localLayoutParams;
          }
          catch (JSONException paramJSONObject)
          {
            for (;;)
            {
              localObject5 = localObject6;
            }
          }
        }
      }
      catch (JSONException localJSONException2)
      {
        for (;;)
        {
          localObject4 = localObject5;
        }
      }
    }
    catch (JSONException localJSONException1)
    {
      for (;;)
      {
        Object localObject4;
        Object localObject2 = localObject4;
      }
    }
  }
  
  protected Bitmap loadBitmap(int paramInt1, int paramInt2, int paramInt3)
  {
    Bitmap localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, this.docHelp.getBitmapConfig());
    localBitmap.eraseColor(-1);
    this.docHelp.stopPrecacheInBackground();
    Object localObject1 = this.docHelp.bitmapForPage(paramInt3, new PDF.Size(paramInt1, paramInt2));
    if (this.shouldPrecache) {
      this.docHelp.precacheInBackground(this.screenSize);
    }
    if (localObject1 == null) {}
    Canvas localCanvas;
    Paint localPaint;
    int i;
    PDF.Size localSize1;
    PDF.Size localSize2;
    int j;
    int k;
    Object localObject5;
    do
    {
      return localBitmap;
      localCanvas = new Canvas(localBitmap);
      localPaint = new Paint();
      localPaint.setColor(-4144960);
      i = (paramInt1 - ((Bitmap)localObject1).getWidth()) / 2;
      paramInt2 = (paramInt2 - ((Bitmap)localObject1).getHeight()) / 2;
      localCanvas.drawBitmap((Bitmap)localObject1, i, paramInt2, localPaint);
      localSize1 = new PDF.Size(((Bitmap)localObject1).getWidth(), ((Bitmap)localObject1).getHeight());
      localSize2 = this.docHelp.sizeForPage(paramInt3);
      localObject1 = PDFDocumentHelper.sizeFrom(localSize2, localSize1);
      float f1 = localSize1.width / ((PDF.Size)localObject1).width;
      float f2 = localSize1.height / ((PDF.Size)localObject1).height;
      j = (int)(Math.abs(localSize1.width - ((PDF.Size)localObject1).width) * f1);
      k = (int)(Math.abs(localSize1.height - ((PDF.Size)localObject1).height) * f2);
      localObject5 = pageInfoForIndex(paramInt3);
    } while (localObject5 == null);
    for (;;)
    {
      synchronized (this.syncObject)
      {
        Object localObject3 = (SparseArray)this.layoutParamsMap.get(paramInt3);
        localObject1 = localObject3;
        if (localObject3 == null)
        {
          localObject1 = new SparseArray();
          this.layoutParamsMap.append(paramInt3, localObject1);
        }
        try
        {
          localObject3 = ((JSONObject)localObject5).getJSONArray("boxes");
          paramInt1 = 0;
          int m = ((JSONArray)localObject3).length();
          if (paramInt1 >= m) {
            break label490;
          }
          try
          {
            Object localObject6 = ((JSONArray)localObject3).getJSONObject(paramInt1);
            m = ((JSONObject)localObject6).getInt("index");
            localObject5 = layoutParamsFor((JSONObject)localObject6, localSize1, localSize2);
            localObject6 = bitmapForBoxInfo((JSONObject)localObject6, (FrameLayout.LayoutParams)localObject5);
            ((FrameLayout.LayoutParams)localObject5).leftMargin += i - j;
            ((FrameLayout.LayoutParams)localObject5).topMargin += paramInt2 - k;
            ((SparseArray)localObject1).put(m, localObject5);
            if (localObject6 != null) {
              localCanvas.drawBitmap((Bitmap)localObject6, ((FrameLayout.LayoutParams)localObject5).leftMargin, ((FrameLayout.LayoutParams)localObject5).topMargin, localPaint);
            }
          }
          catch (JSONException localJSONException2)
          {
            Log.d("PDFEditor", "loadBitmap", localJSONException2);
            continue;
          }
          paramInt1 += 1;
          continue;
        }
        catch (JSONException localJSONException1)
        {
          Log.d("PDFEditor", "loadBitmap", localJSONException1);
        }
        return localBitmap;
      }
      label490:
      if (paramInt3 == this.currentShowingLayer) {
        this.fview.post(new Runnable()
        {
          public void run()
          {
            PDFReaderEditorFragment.this.refreshLayerViewsPosition(false);
          }
        });
      }
    }
  }
  
  public Bitmap loadBitmapFromView(View paramView)
  {
    if (paramView == null) {
      return null;
    }
    Bitmap localBitmap = Bitmap.createBitmap(paramView.getLayoutParams().width, paramView.getLayoutParams().height, this.docHelp.getBitmapConfig());
    Canvas localCanvas = new Canvas(localBitmap);
    paramView.layout(0, 0, paramView.getLayoutParams().width, paramView.getLayoutParams().height);
    paramView.draw(localCanvas);
    return localBitmap;
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    if ((this.tableOfContents != null) && (this.tableOfContents.length() > 0)) {
      paramMenu.add(0, 1, 0, 2131362190).setShowAsAction(1);
    }
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    }
    for (;;)
    {
      return super.onOptionsItemSelected(paramMenuItem);
      toggleTableOfContents();
    }
  }
  
  public void onViewModeChanged(int paramInt1, int paramInt2)
  {
    super.onViewModeChanged(paramInt1, paramInt2);
    if ((this.tableOfContents != null) && (this.contentsList != null))
    {
      bringUIElementsToFront();
      FrameLayout.LayoutParams localLayoutParams = new FrameLayout.LayoutParams((int)(this.fview.getWidth() / 1.5D), -1);
      localLayoutParams.gravity = 51;
      this.contentsList.setLayoutParams(localLayoutParams);
      this.contentsList.setMinimumWidth((int)(this.fview.getWidth() / 1.5D));
    }
  }
  
  public void performAction(String paramString1, String paramString2, JSONObject paramJSONObject)
  {
    int i;
    if ((paramString1.equals("pdfpage")) && (paramString2.length() > 0))
    {
      i = Integer.valueOf(paramString2).intValue();
      if (this.curlView.getViewMode() != 1)
      {
        this.curlView.setCurrentIndex(i / 2 + 1);
        showLayerForPageIndex(this.curlView.getCurrentIndex(), true);
      }
    }
    do
    {
      return;
      this.curlView.setCurrentIndex(i);
      break;
      if (((paramString1.equals("page")) || (paramString1.equals("pagetype"))) && (paramString2.length() > 0))
      {
        App.showPage(App.getResourceUrl(paramString2), this);
        return;
      }
      if ((paramString1.equals("movie")) && (paramString2.length() > 0))
      {
        try
        {
          paramString2 = App.getResourceRelativeUrl(paramJSONObject.getString("file"));
          paramString1 = new Bundle();
          paramString1.putString("VIDEO_FILE_PATH", paramString2);
          if (!this.isTablet)
          {
            App.showPage(new FragmentInfo(PDFVideoFragment.class.getName(), paramString1), getActivity());
            return;
          }
        }
        catch (JSONException paramString1)
        {
          Log.d("PDFEditor", "performAction", paramString1);
          return;
        }
        paramString1.putInt("pwidth", (int)(this.screenSize.width / 1.2D));
        paramString1.putInt("pheight", this.screenSize.width / 2);
        paramString1.putBoolean("isDialog", true);
        paramString2 = new PDFVideoFragment();
        paramString2.setStyle(1, 0);
        paramString2.setArguments(paramString1);
        paramString2.setCancelable(true);
        paramString2.show(getActivity().getSupportFragmentManager(), "moview");
        return;
      }
      if ((paramString1.equals("music")) && (paramString2.length() > 0)) {
        try
        {
          paramString2 = App.getResourceRelativeUrl(paramJSONObject.getString("file"));
          paramString1 = new Bundle();
          paramString1.putString("AUDIO_FILE_PATH", paramString2);
          paramString2 = new PDFAudioFragment();
          paramString2.setStyle(1, 0);
          paramString2.setArguments(paramString1);
          paramString2.setCancelable(true);
          paramString2.show(getActivity().getSupportFragmentManager(), "audio");
          return;
        }
        catch (JSONException paramString1)
        {
          Log.d("PDFEditor", "performAction", paramString1);
          return;
        }
      }
      if ((paramString1.equals("youtube")) && (paramString2.length() > 0))
      {
        try
        {
          paramString2 = paramJSONObject.getString("youtubeid");
          paramString1 = new Bundle();
          paramString1.putString("YOUTUBE_VIDEO_ID", paramString2);
          if (this.isTablet)
          {
            paramString1.putBoolean("isDialog", true);
            paramString2 = new PDFYoutubeFragment();
            paramString2.setStyle(2, 0);
            paramString2.setArguments(paramString1);
            paramString2.setCancelable(true);
            paramString2.show(getActivity().getSupportFragmentManager(), "youtube");
            return;
          }
        }
        catch (JSONException paramString1)
        {
          Log.d("PDFEditor", "performAction", paramString1);
          return;
        }
        App.showPage(new FragmentInfo(PDFYoutubeFragment.class.getName(), paramString1), getActivity());
        return;
      }
    } while (paramString2.length() <= 0);
    App.showPage(paramString2, this);
  }
  
  protected void refreshLayerViewsPosition(final boolean paramBoolean)
  {
    if (this.curlView != null) {
      getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          PDFReaderEditorFragment.this.refreshLayerForPage(PDFReaderEditorFragment.this.curlView.getCurrentIndex(), paramBoolean);
        }
      });
    }
  }
  
  protected void secondPhaseCurlInit()
  {
    super.secondPhaseCurlInit();
    showLayerForPageIndex(this.curlView.getCurrentIndex(), true);
    if (this.controlsContainer == null) {
      this.controlsContainer = ((LinearLayout)this.fview.findViewById(2131100100));
    }
    if ((this.nextPageId != null) && (this.nextPageId.length() > 0) && (this.nextButton == null))
    {
      this.nextButton = ((Button)this.fview.findViewById(2131100103));
      this.nextButton.setVisibility(0);
      this.nextButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          App.showPage(App.getResourceUrl(PDFReaderEditorFragment.this.nextPageId), PDFReaderEditorFragment.this);
        }
      });
    }
    if ((this.tableOfContents != null) && (this.tableOfContents.length() > 0) && (this.tcButton == null)) {
      if (this.contentsList == null)
      {
        this.contentsList = new ListView(getActivity());
        localLayoutParams = new FrameLayout.LayoutParams((int)(this.fview.getWidth() / 1.5D), -1);
        localLayoutParams.gravity = 51;
        this.contentsList.setLayoutParams(localLayoutParams);
        this.contentsList.setMinimumWidth((int)(this.fview.getWidth() / 1.5D));
        this.contentsList.setVisibility(8);
        this.contentsList.setAdapter(this.tocAdapater);
        this.contentsList.setBackgroundColor(Color.argb(255, 33, 33, 33));
        this.contentsList.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
          public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
          {
            JSONObject localJSONObject = (JSONObject)PDFReaderEditorFragment.this.tocAdapater.getItem(paramAnonymousInt);
            if (localJSONObject != null) {}
            try
            {
              paramAnonymousAdapterView = localJSONObject.getString("action");
              paramAnonymousView = localJSONObject.getString("actionParam");
              localJSONObject = localJSONObject.getJSONObject("actionParams");
              PDFReaderEditorFragment.this.getActivity().runOnUiThread(new Runnable()
              {
                public void run()
                {
                  PDFReaderEditorFragment.this.hideTableOfContents();
                }
              });
              PDFReaderEditorFragment.this.performAction(paramAnonymousAdapterView, paramAnonymousView, localJSONObject);
              return;
            }
            catch (JSONException paramAnonymousAdapterView) {}
          }
        });
        ((FrameLayout)this.fview).addView(this.contentsList);
        invalidateOptionsMenu();
      }
    }
    while (this.tableOfContents == null)
    {
      FrameLayout.LayoutParams localLayoutParams;
      return;
    }
    bringUIElementsToFront();
  }
  
  protected void showTableOfContents()
  {
    if (this.touchOverlay == null)
    {
      this.touchOverlay = new View(getActivity());
      this.touchOverlay.setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
      this.touchOverlay.setBackgroundColor(Color.argb(77, 77, 77, 77));
      ((FrameLayout)this.fview).addView(this.touchOverlay);
      this.touchOverlay.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          PDFReaderEditorFragment.this.hideTableOfContents();
        }
      });
    }
    bringUIElementsToFront();
    this.contentsList.setVisibility(0);
  }
  
  public float textSizeFor(Typeface paramTypeface, String paramString, PDF.Size paramSize)
  {
    float f1 = 1.0F;
    float f2 = 1.0F;
    for (Rect localRect = getTextBounds(paramTypeface, 1.0F, paramString); (localRect.width() <= paramSize.width) && (localRect.height() <= paramSize.height) && (f2 <= 14.0F); localRect = getTextBounds(paramTypeface, f1, paramString))
    {
      f2 = f1;
      f1 = (float)(f1 + 0.5D);
    }
    return (float)Math.floor(f2);
  }
  
  protected void toggleTableOfContents()
  {
    if ((this.contentsList == null) || (this.contentsList.getVisibility() != 0))
    {
      showTableOfContents();
      return;
    }
    hideTableOfContents();
  }
  
  public View viewForBoxInfo(JSONObject paramJSONObject, FrameLayout.LayoutParams paramLayoutParams)
  {
    Object localObject2;
    for (;;)
    {
      Object localObject3;
      try
      {
        str = paramJSONObject.getString("type");
        localObject1 = "";
        if (paramJSONObject.has("text")) {
          localObject1 = unescapeSpecials(paramJSONObject.getString("text"));
        }
        if (str.equalsIgnoreCase("button"))
        {
          localObject3 = new Button(getActivity());
          i = paramLayoutParams.width;
          j = ((Button)localObject3).getPaddingLeft();
          k = ((Button)localObject3).getPaddingRight();
          int m = paramLayoutParams.height;
          int n = ((Button)localObject3).getPaddingTop();
          int i1 = ((Button)localObject3).getPaddingBottom();
          ((Button)localObject3).setText((CharSequence)localObject1);
          float f = textSizeFor(((Button)localObject3).getTypeface(), (String)localObject1, new PDF.Size(i - j - k, m - n - i1));
          ((Button)localObject3).setTextSize(f);
          ((Button)localObject3).setGravity(17);
          localObject1 = localObject3;
          if (localObject1 == null) {
            break label549;
          }
          ((View)localObject1).setLayoutParams(paramLayoutParams);
          ((View)localObject1).setOnClickListener(this.boxClicked);
          if (!paramJSONObject.has("boxStyle")) {
            break;
          }
          paramLayoutParams = paramJSONObject.getJSONObject("boxStyle");
          paramJSONObject = new GradientDrawable();
          paramJSONObject.setShape(0);
          i = 0;
        }
      }
      catch (JSONException paramJSONObject)
      {
        String str;
        Object localObject1;
        int i;
        int j;
        int k;
        Log.d("PDFEditor", "loadJSONLayers", paramJSONObject);
      }
      try
      {
        if (str.equalsIgnoreCase("button")) {
          i = -3355444;
        }
        j = i;
        if (paramLayoutParams.has("background-color"))
        {
          localObject3 = paramLayoutParams.getString("background-color");
          j = i;
          if (((String)localObject3).length() > 0) {
            j = Color.parseColor((String)localObject3);
          }
        }
        paramJSONObject.setColor(j);
      }
      catch (Exception localException2)
      {
        Log.d("PDFEditor", "viewForBoxInfo", localException2);
        continue;
      }
      i = 0;
      if (paramLayoutParams.has("border-width")) {
        i = paramLayoutParams.getInt("border-width");
      }
      j = i;
      if (i < 1)
      {
        j = i;
        if (str.equalsIgnoreCase("button")) {
          j = 1;
        }
      }
      if (str.equalsIgnoreCase("image")) {
        ((ImageButton)localObject1).setPadding(j, j, j, j);
      }
      k = -7829368;
      i = k;
      try
      {
        if (paramLayoutParams.has("border-color"))
        {
          paramLayoutParams = paramLayoutParams.getString("border-color");
          i = k;
          if (paramLayoutParams.length() > 0) {
            i = Color.parseColor(paramLayoutParams);
          }
        }
        paramJSONObject.setStroke(j, i);
      }
      catch (Exception paramLayoutParams)
      {
        label549:
        Log.d("PDFEditor", "viewForBoxInfo", paramLayoutParams);
        continue;
      }
      ((View)localObject1).setBackgroundDrawable(paramJSONObject);
      return localObject1;
      if (str.equalsIgnoreCase("image"))
      {
        localObject3 = new ImageButton(getActivity());
        try
        {
          Bitmap localBitmap = BitmapFactory.decodeStream(App.getResourceStream(paramJSONObject.getString("src")));
          localObject1 = localObject3;
          if (localBitmap == null) {
            continue;
          }
          ((ImageButton)localObject3).setImageBitmap(localBitmap);
          ((ImageButton)localObject3).setScaleType(ImageView.ScaleType.FIT_XY);
          localObject1 = localObject3;
        }
        catch (Exception localException1)
        {
          Log.d("PDFEditor", "viewForBoxInfo", localException1);
          localObject2 = localObject3;
        }
        continue;
        return null;
      }
      else
      {
        localObject3 = new Button(getActivity());
        ((Button)localObject3).setGravity(51);
        ((Button)localObject3).setText(localObject2);
        localObject2 = localObject3;
      }
    }
    return localObject2;
  }
}
