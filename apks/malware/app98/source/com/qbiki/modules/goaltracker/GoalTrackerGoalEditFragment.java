package com.qbiki.modules.goaltracker;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.TimePickerDialog;
import android.app.TimePickerDialog.OnTimeSetListener;
import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;
import android.widget.TimePicker;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.UUID;

public class GoalTrackerGoalEditFragment
  extends SCFragment
{
  public static final String CATEGORY_ID_KEY = "CATEGORY_ID_KEY";
  public static final String GOAL_ID_KEY = "GOAL_ID_KEY";
  GoalTrackerAlarmReceiver alarm = new GoalTrackerAlarmReceiver();
  private TextView mAlertTimeTextView;
  ArrayList<HashMap<String, String>> mCategories;
  private GoalTrackerCategories mCategoriesInstance;
  private Spinner mCategoryIntervalSpinner;
  HashMap<String, String> mCurrentGoal;
  private TextView mDateTextView;
  private Date mDueDateTime;
  private String mGoalCategoryId;
  private String mGoalId;
  private String mGoalTitle = "";
  private EditText mGoalTitleEditText;
  private String mNote = "";
  private EditText mNotesEditText;
  private String mPriority = "PRIORITY_HIGH";
  private Spinner mPrioritySpinner;
  private String mRepeatInterval = "REPEAT_DAYLY";
  private Spinner mRepeatIntervalSpinner;
  
  public GoalTrackerGoalEditFragment() {}
  
  private HashMap<String, String> createNewGoalFromInputs()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("title", this.mGoalTitle);
    Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(this.mDueDateTime);
    localHashMap.put("due_date_time", localCalendar.getTimeInMillis() + "");
    localHashMap.put("priority", this.mPriority);
    localHashMap.put("repeat_interval", this.mRepeatInterval);
    localHashMap.put("note", this.mNote);
    localHashMap.put("priority", this.mPriority);
    localHashMap.put("id", UUID.randomUUID().toString());
    localHashMap.put("created_time", localCalendar.getTimeInMillis() + "");
    localHashMap.put("category_id", this.mGoalCategoryId);
    localHashMap.put("progress", "0");
    return localHashMap;
  }
  
  private String[] getCategoresForSpinner()
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = this.mCategories.iterator();
    while (localIterator.hasNext()) {
      localArrayList.add(((HashMap)localIterator.next()).get("name"));
    }
    return (String[])localArrayList.toArray(new String[localArrayList.size()]);
  }
  
  private ArrayList<HashMap<String, String>> getCategories()
  {
    Object localObject = this.mCategoriesInstance.getCategoriesList();
    if ((localObject != null) && (((ArrayList)localObject).size() > 0)) {
      return localObject;
    }
    localObject = Calendar.getInstance();
    HashMap localHashMap = new HashMap();
    localHashMap.put("name", "Category 1");
    localHashMap.put("id", UUID.randomUUID().toString());
    localHashMap.put("created_time", ((Calendar)localObject).getTimeInMillis() + "");
    this.mCategoriesInstance.addCategory(localHashMap);
    return this.mCategoriesInstance.getCategoriesList();
  }
  
  private int getCategorySpinnerSelectedPos(String paramString)
  {
    int j;
    if (paramString == null)
    {
      j = 0;
      return j;
    }
    int i = 0;
    Iterator localIterator = this.mCategories.iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        break label60;
      }
      j = i;
      if (paramString.equals(((HashMap)localIterator.next()).get("id"))) {
        break;
      }
      i += 1;
    }
    label60:
    return 0;
  }
  
  private int getPrioritySpinnerSelectedPos(String paramString)
  {
    if ("PRIORITY_HIGH".equals(paramString)) {}
    do
    {
      return 0;
      if ("PRIORITY_MEDIUM".equals(paramString)) {
        return 1;
      }
    } while (!"PRIORITY_LOW".equals(paramString));
    return 2;
  }
  
  private int getRepeatIntervalSpinnerSelectedPos(String paramString)
  {
    if ("REPEAT_DAYLY".equals(paramString)) {}
    do
    {
      return 0;
      if ("REPEAT_WEEKLY".equals(paramString)) {
        return 1;
      }
    } while (!"REPEAT_MONTHLY".equals(paramString));
    return 2;
  }
  
  private void initUIFromGoal(String paramString1, String paramString2)
  {
    this.mCurrentGoal = this.mCategoriesInstance.getGoal(paramString2);
    paramString1 = Calendar.getInstance();
    if (this.mCurrentGoal == null) {
      this.mDueDateTime = paramString1.getTime();
    }
    for (;;)
    {
      paramString1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
      this.mDateTextView.setText(paramString1.format(this.mDueDateTime));
      paramString1 = new SimpleDateFormat("HH:mm", Locale.getDefault());
      this.mAlertTimeTextView.setText(paramString1.format(this.mDueDateTime));
      return;
      try
      {
        paramString1.setTimeInMillis(Long.parseLong((String)this.mCurrentGoal.get("due_date_time")));
        this.mDueDateTime = paramString1.getTime();
        this.mPriority = ((String)this.mCurrentGoal.get("priority"));
        this.mPrioritySpinner.setSelection(getPrioritySpinnerSelectedPos(this.mPriority), true);
        this.mRepeatInterval = ((String)this.mCurrentGoal.get("repeat_interval"));
        this.mRepeatIntervalSpinner.setSelection(getRepeatIntervalSpinnerSelectedPos(this.mRepeatInterval), true);
        this.mCategoryIntervalSpinner.setSelection(getCategorySpinnerSelectedPos(this.mGoalCategoryId), true);
        this.mGoalTitle = ((String)this.mCurrentGoal.get("title"));
        this.mGoalTitleEditText.setText(this.mGoalTitle);
        this.mNote = ((String)this.mCurrentGoal.get("note"));
        this.mNotesEditText.setText(this.mNote);
      }
      catch (NumberFormatException paramString2)
      {
        for (;;) {}
      }
    }
  }
  
  private void pickDate(Activity paramActivity)
  {
    final Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(this.mDueDateTime);
    int i = localCalendar.get(1);
    int j = localCalendar.get(2);
    int k = localCalendar.get(5);
    new DatePickerDialog(paramActivity, new DatePickerDialog.OnDateSetListener()
    {
      public void onDateSet(DatePicker paramAnonymousDatePicker, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
      {
        localCalendar.set(1, paramAnonymousInt1);
        localCalendar.set(2, paramAnonymousInt2);
        localCalendar.set(5, paramAnonymousInt3);
        GoalTrackerGoalEditFragment.access$302(GoalTrackerGoalEditFragment.this, localCalendar.getTime());
        paramAnonymousDatePicker = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        GoalTrackerGoalEditFragment.this.mDateTextView.setText(paramAnonymousDatePicker.format(GoalTrackerGoalEditFragment.this.mDueDateTime));
      }
    }, i, j, k).show();
  }
  
  private void pickTime(Activity paramActivity)
  {
    final Calendar localCalendar = Calendar.getInstance();
    localCalendar.setTime(this.mDueDateTime);
    int i = localCalendar.get(11);
    int j = localCalendar.get(12);
    new TimePickerDialog(paramActivity, new TimePickerDialog.OnTimeSetListener()
    {
      public void onTimeSet(TimePicker paramAnonymousTimePicker, int paramAnonymousInt1, int paramAnonymousInt2)
      {
        localCalendar.set(11, paramAnonymousInt1);
        localCalendar.set(12, paramAnonymousInt2);
        GoalTrackerGoalEditFragment.access$302(GoalTrackerGoalEditFragment.this, localCalendar.getTime());
        paramAnonymousTimePicker = new SimpleDateFormat("HH:mm", Locale.getDefault());
        GoalTrackerGoalEditFragment.this.mAlertTimeTextView.setText(paramAnonymousTimePicker.format(GoalTrackerGoalEditFragment.this.mDueDateTime));
      }
    }, i, j, DateFormat.is24HourFormat(paramActivity)).show();
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, final Bundle paramBundle)
  {
    paramBundle = getArguments();
    if (paramBundle != null)
    {
      this.mGoalCategoryId = paramBundle.getString("CATEGORY_ID_KEY");
      this.mGoalId = paramBundle.getString("GOAL_ID_KEY");
    }
    paramBundle = getActivity();
    this.mCategoriesInstance = GoalTrackerCategories.getInstance(paramBundle);
    this.mCategoriesInstance.load();
    this.mCategories = getCategories();
    paramLayoutInflater = paramLayoutInflater.inflate(2130903148, paramViewGroup, false);
    this.mGoalTitleEditText = ((EditText)paramLayoutInflater.findViewById(2131099972));
    this.mNotesEditText = ((EditText)paramLayoutInflater.findViewById(2131099980));
    this.mDateTextView = ((TextView)paramLayoutInflater.findViewById(2131099973));
    this.mAlertTimeTextView = ((TextView)paramLayoutInflater.findViewById(2131099976));
    this.mPrioritySpinner = ((Spinner)paramLayoutInflater.findViewById(2131099975));
    this.mRepeatIntervalSpinner = ((Spinner)paramLayoutInflater.findViewById(2131099978));
    this.mCategoryIntervalSpinner = ((Spinner)paramLayoutInflater.findViewById(2131099979));
    ((Button)paramLayoutInflater.findViewById(2131099981)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = GoalTrackerGoalEditFragment.this.createNewGoalFromInputs();
        if (GoalTrackerGoalEditFragment.this.mCurrentGoal == null) {
          GoalTrackerGoalEditFragment.this.mCategoriesInstance.addGoalToCategory(GoalTrackerGoalEditFragment.this.mGoalCategoryId, paramAnonymousView);
        }
        for (;;)
        {
          GoalTrackerGoalEditFragment.this.mCategoriesInstance.save();
          Calendar localCalendar = Calendar.getInstance();
          localCalendar.setTime(GoalTrackerGoalEditFragment.this.mDueDateTime);
          GoalTrackerGoalEditFragment.this.alarm.setAlarm(paramBundle.getBaseContext(), (String)paramAnonymousView.get("id"), localCalendar, (String)paramAnonymousView.get("repeat_interval"));
          App.closePage(GoalTrackerGoalEditFragment.this);
          return;
          paramAnonymousView.put("id", GoalTrackerGoalEditFragment.this.mCurrentGoal.get("id"));
          GoalTrackerGoalEditFragment.this.mCategoriesInstance.updateGoal(paramAnonymousView);
        }
      }
    });
    paramViewGroup = (ImageButton)paramLayoutInflater.findViewById(2131099974);
    ImageButton localImageButton = (ImageButton)paramLayoutInflater.findViewById(2131099977);
    paramViewGroup.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        GoalTrackerGoalEditFragment.this.pickDate(paramBundle);
      }
    });
    localImageButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        GoalTrackerGoalEditFragment.this.pickTime(paramBundle);
      }
    });
    return paramLayoutInflater;
  }
  
  public void onViewCreated(View paramView, Bundle paramBundle)
  {
    this.mGoalTitleEditText.addTextChangedListener(new TextWatcher()
    {
      public void afterTextChanged(Editable paramAnonymousEditable) {}
      
      public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
      {
        GoalTrackerGoalEditFragment.access$602(GoalTrackerGoalEditFragment.this, paramAnonymousCharSequence.toString());
      }
    });
    this.mNotesEditText.addTextChangedListener(new TextWatcher()
    {
      public void afterTextChanged(Editable paramAnonymousEditable) {}
      
      public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
      {
        GoalTrackerGoalEditFragment.access$702(GoalTrackerGoalEditFragment.this, paramAnonymousCharSequence.toString());
      }
    });
    Object localObject = getActivity();
    ArrayAdapter localArrayAdapter = new ArrayAdapter((Context)localObject, 17367048, new String[] { ((Activity)localObject).getString(2131362405), ((Activity)localObject).getString(2131362406), ((Activity)localObject).getString(2131362407) });
    localArrayAdapter.setDropDownViewResource(17367049);
    this.mPrioritySpinner.setAdapter(localArrayAdapter);
    this.mPrioritySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        switch (paramAnonymousInt)
        {
        default: 
          GoalTrackerGoalEditFragment.access$802(GoalTrackerGoalEditFragment.this, "PRIORITY_HIGH");
          return;
        case 0: 
          GoalTrackerGoalEditFragment.access$802(GoalTrackerGoalEditFragment.this, "PRIORITY_HIGH");
          return;
        case 1: 
          GoalTrackerGoalEditFragment.access$802(GoalTrackerGoalEditFragment.this, "PRIORITY_MEDIUM");
          return;
        }
        GoalTrackerGoalEditFragment.access$802(GoalTrackerGoalEditFragment.this, "PRIORITY_LOW");
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
    localArrayAdapter = new ArrayAdapter((Context)localObject, 17367048, new String[] { ((Activity)localObject).getString(2131362402), ((Activity)localObject).getString(2131362403), ((Activity)localObject).getString(2131362404) });
    localArrayAdapter.setDropDownViewResource(17367049);
    this.mRepeatIntervalSpinner.setAdapter(localArrayAdapter);
    this.mRepeatIntervalSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        switch (paramAnonymousInt)
        {
        default: 
          GoalTrackerGoalEditFragment.access$902(GoalTrackerGoalEditFragment.this, "REPEAT_DAYLY");
          return;
        case 0: 
          GoalTrackerGoalEditFragment.access$902(GoalTrackerGoalEditFragment.this, "REPEAT_DAYLY");
          return;
        case 1: 
          GoalTrackerGoalEditFragment.access$902(GoalTrackerGoalEditFragment.this, "REPEAT_WEEKLY");
          return;
        }
        GoalTrackerGoalEditFragment.access$902(GoalTrackerGoalEditFragment.this, "REPEAT_MONTHLY");
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
    localObject = new ArrayAdapter((Context)localObject, 17367048, getCategoresForSpinner());
    ((ArrayAdapter)localObject).setDropDownViewResource(17367049);
    this.mCategoryIntervalSpinner.setAdapter((SpinnerAdapter)localObject);
    this.mCategoryIntervalSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener()
    {
      public void onItemSelected(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        if (GoalTrackerGoalEditFragment.this.mCategories != null) {
          GoalTrackerGoalEditFragment.access$102(GoalTrackerGoalEditFragment.this, (String)((HashMap)GoalTrackerGoalEditFragment.this.mCategories.get(paramAnonymousInt)).get("id"));
        }
      }
      
      public void onNothingSelected(AdapterView<?> paramAnonymousAdapterView) {}
    });
    initUIFromGoal(this.mGoalCategoryId, this.mGoalId);
    super.onViewCreated(paramView, paramBundle);
  }
}
