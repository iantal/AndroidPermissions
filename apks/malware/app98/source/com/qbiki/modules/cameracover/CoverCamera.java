package com.qbiki.modules.cameracover;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.hardware.Camera.Size;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.Gallery;
import android.widget.Gallery.LayoutParams;
import android.widget.ImageView;
import android.widget.Toast;
import com.google.android.bitmapfun.ImageResizer;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DeviceUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageCache;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import net.sourceforge.zbar.android.CameraPreview;

public class CoverCamera
  extends SCActivity
{
  Camera.AutoFocusCallback autoFocusCB = new Camera.AutoFocusCallback()
  {
    public void onAutoFocus(boolean paramAnonymousBoolean, Camera paramAnonymousCamera)
    {
      if (paramAnonymousBoolean)
      {
        CoverCamera.this.mCamera.takePicture(CoverCamera.this.shutterCallback, null, CoverCamera.this.pictureCallback);
        return;
      }
      Toast.makeText(CoverCamera.this, "Focus unsuccessful.", 0).show();
      CoverCamera.this.takePictureButton.setEnabled(true);
    }
  };
  private int concurrent = 0;
  private ArrayList<String> covers = new ArrayList();
  private Gallery gallery = null;
  private ImageCache imageCache = new ImageCache();
  final ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener()
  {
    public void onGlobalLayout()
    {
      CoverCamera.access$202(CoverCamera.this, CoverCamera.this.gallery.getWidth());
      CoverCamera.access$402(CoverCamera.this, CoverCamera.this.gallery.getHeight());
      CoverCamera.this.gallery.setAdapter(new CoverCamera.ImageAdapter(CoverCamera.this, CoverCamera.this));
      CoverCamera.this.gallery.getViewTreeObserver().removeGlobalOnLayoutListener(CoverCamera.this.layoutListener);
    }
  };
  private Camera mCamera;
  private CameraPreview mPreview;
  Camera.PictureCallback pictureCallback = new Camera.PictureCallback()
  {
    public void onPictureTaken(byte[] paramAnonymousArrayOfByte, Camera paramAnonymousCamera)
    {
      CoverCamera.this.releaseCamera();
      int i = CoverCamera.this.gallery.getSelectedItemPosition();
      paramAnonymousCamera = (String)CoverCamera.this.covers.get(i);
      paramAnonymousCamera = CoverCamera.this.imageCache.get(paramAnonymousCamera);
      ((CoverCamera.ImageAdapter)CoverCamera.this.gallery.getAdapter()).removeAll();
      CoverCamera.this.gallery.setAdapter(null);
      CoverCamera.this.imageCache.clear();
      i = Math.max(paramAnonymousCamera.getWidth(), paramAnonymousCamera.getHeight()) + 200;
      Object localObject = ImageResizer.decodeSampledBitmapFromByteArray(paramAnonymousArrayOfByte, i, i, null);
      paramAnonymousArrayOfByte = Bitmap.createScaledBitmap((Bitmap)localObject, paramAnonymousCamera.getHeight(), paramAnonymousCamera.getWidth(), true);
      ((Bitmap)localObject).recycle();
      localObject = new Matrix();
      ((Matrix)localObject).postRotate(90.0F);
      localObject = Bitmap.createBitmap(paramAnonymousArrayOfByte, 0, 0, paramAnonymousArrayOfByte.getWidth(), paramAnonymousArrayOfByte.getHeight(), (Matrix)localObject, true);
      paramAnonymousArrayOfByte.recycle();
      new Canvas((Bitmap)localObject).drawBitmap(paramAnonymousCamera, 0.0F, 0.0F, null);
      CoverCamera.this.saveImageAndExit((Bitmap)localObject);
      ((Bitmap)localObject).recycle();
      System.gc();
    }
  };
  private ArrayList<DownloadImageTask> que = new ArrayList();
  Camera.ShutterCallback shutterCallback = new Camera.ShutterCallback()
  {
    public void onShutter() {}
  };
  private Button takePictureButton = null;
  private int viewHeight = 100;
  private int viewWidth = 100;
  
  public CoverCamera() {}
  
  private void addToQue(DownloadImageTask paramDownloadImageTask)
  {
    synchronized (this.que)
    {
      this.que.add(paramDownloadImageTask);
      if (this.concurrent == 0) {
        executeNextQue();
      }
      return;
    }
  }
  
  private void executeNextQue()
  {
    synchronized (this.que)
    {
      if (this.que.size() > 0)
      {
        DownloadImageTask localDownloadImageTask = (DownloadImageTask)this.que.get(0);
        localDownloadImageTask.execute(new String[] { localDownloadImageTask.url });
        this.concurrent += 1;
      }
      return;
    }
  }
  
  private Bitmap loadImageFromNetwork(String paramString)
  {
    Object localObject4 = this.imageCache.get(paramString);
    Object localObject1 = localObject4;
    if ((localObject4 != null) || (paramString.startsWith("http://"))) {}
    try
    {
      Log.d("Background", paramString);
      localObject1 = BitmapFactory.decodeStream((InputStream)new URL(paramString).getContent());
      for (;;)
      {
        localObject4 = localObject1;
        if (localObject1 != null)
        {
          localObject4 = Bitmap.createScaledBitmap((Bitmap)localObject1, this.viewWidth, this.viewHeight, true);
          this.imageCache.put(paramString, (Bitmap)localObject4);
        }
        return localObject4;
        try
        {
          localObject1 = BitmapFactory.decodeStream(App.getResourceStream(paramString));
        }
        catch (Exception localException1)
        {
          Object localObject2 = localObject4;
        }
      }
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        Object localObject3 = localObject4;
      }
    }
  }
  
  private void releaseCamera()
  {
    if (this.mCamera != null)
    {
      this.mCamera.setPreviewCallback(null);
      this.mCamera.release();
      this.mCamera = null;
    }
  }
  
  private void removeAllFromQue()
  {
    ArrayList localArrayList = this.que;
    int i = 0;
    try
    {
      while (i < this.que.size())
      {
        ((DownloadImageTask)this.que.get(0)).cancel(true);
        i += 1;
      }
      this.que.clear();
      return;
    }
    finally {}
  }
  
  private void removeFromQue(DownloadImageTask paramDownloadImageTask)
  {
    synchronized (this.que)
    {
      this.que.remove(paramDownloadImageTask);
      this.concurrent -= 1;
      return;
    }
  }
  
  @SuppressLint({"SimpleDateFormat"})
  private void saveImageAndExit(Bitmap paramBitmap)
  {
    String str = App.getAppProtectedStoragePath() + "/CameraCovers";
    new File(str).mkdirs();
    Object localObject = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss").format(new Date());
    localObject = (String)localObject + ".png";
    str = str + "/" + (String)localObject;
    try
    {
      localObject = new FileOutputStream(str);
      paramBitmap.compress(Bitmap.CompressFormat.PNG, 90, (OutputStream)localObject);
      paramBitmap = new Intent();
      paramBitmap.putExtra("IMAGE_PATH", str);
      setResult(-1, paramBitmap);
      finish();
      return;
    }
    catch (Exception paramBitmap) {}
  }
  
  @TargetApi(9)
  private void setOrientation()
  {
    if ((Build.VERSION.SDK_INT >= 9) && (App.rotationEnabled))
    {
      if (DeviceUtil.getScreenOrientation(this) == 9)
      {
        setRequestedOrientation(9);
        return;
      }
      setRequestedOrientation(1);
      return;
    }
    setRequestedOrientation(1);
  }
  
  public Camera getCameraInstance()
  {
    Object localObject1 = null;
    try
    {
      Camera localCamera = Camera.open();
      localObject1 = localCamera;
      Camera.Parameters localParameters = localCamera.getParameters();
      localObject1 = localCamera;
      int i = getWindow().getWindowManager().getDefaultDisplay().getWidth();
      localObject1 = localCamera;
      int j = getWindow().getWindowManager().getDefaultDisplay().getHeight();
      localObject1 = localCamera;
      Object localObject2 = localCamera.getParameters().getSupportedPictureSizes();
      localObject1 = localCamera;
      localCamera.getClass();
      localObject1 = localCamera;
      localObject2 = getNearestSize((List)localObject2, new Camera.Size(localCamera, i, j));
      localObject1 = localCamera;
      Object localObject3 = localCamera.getParameters().getSupportedPreviewSizes();
      localObject1 = localCamera;
      localCamera.getClass();
      localObject1 = localCamera;
      localObject3 = getNearestSize((List)localObject3, new Camera.Size(localCamera, i, j));
      localObject1 = localCamera;
      localParameters.setPreviewSize(((Camera.Size)localObject3).width, ((Camera.Size)localObject3).height);
      localObject1 = localCamera;
      localParameters.setPictureSize(((Camera.Size)localObject2).width, ((Camera.Size)localObject2).height);
      localObject1 = localCamera;
      localCamera.setParameters(localParameters);
      return localCamera;
    }
    catch (Exception localException)
    {
      Log.e("CoverCamera", "Exception", localException);
    }
    return localObject1;
  }
  
  public Camera.Size getNearestSize(List<Camera.Size> paramList, Camera.Size paramSize)
  {
    int i1 = paramList.size();
    if (i1 <= 1) {
      return paramSize;
    }
    int i = 0;
    Object localObject2 = (Camera.Size)paramList.get(0);
    Camera.Size localSize = (Camera.Size)paramList.get(i1 - 1);
    Object localObject1 = localObject2;
    if (((Camera.Size)localObject2).width < localSize.width)
    {
      i = 1;
      localObject1 = localSize;
    }
    int k = paramSize.width;
    int j = paramSize.height;
    int m = 0;
    while (m < i1 - 1)
    {
      paramSize = (Camera.Size)paramList.get(m);
      localObject2 = (Camera.Size)paramList.get(m + 1);
      if (i != 0)
      {
        paramSize = (Camera.Size)paramList.get(i1 - 1 - m);
        localObject2 = (Camera.Size)paramList.get(i1 - 2 - m);
      }
      int n = k;
      if (k <= paramSize.width)
      {
        n = k;
        if (k >= ((Camera.Size)localObject2).width) {
          n = paramSize.width;
        }
      }
      k = j;
      if (j <= paramSize.height)
      {
        k = j;
        if (j >= ((Camera.Size)localObject2).height) {
          k = paramSize.height;
        }
      }
      m += 1;
      j = k;
      k = n;
    }
    m = 0;
    while (m < paramList.size())
    {
      paramSize = (Camera.Size)paramList.get(m);
      if (i != 0) {
        paramSize = (Camera.Size)paramList.get(i1 - 1 - m);
      }
      localObject2 = localObject1;
      if (j == paramSize.height)
      {
        localObject2 = localObject1;
        if (k <= paramSize.width) {
          localObject2 = paramSize;
        }
      }
      m += 1;
      localObject1 = localObject2;
    }
    return localObject1;
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setOrientation();
    setContentView(2130903084);
    paramBundle = getIntent().getExtras();
    if (paramBundle != null)
    {
      paramBundle = paramBundle.getStringArrayList("EXTRA_COMERA_COVERS_ARRAY");
      if (paramBundle != null) {
        this.covers = paramBundle;
      }
    }
    this.gallery = ((Gallery)findViewById(2131099822));
    this.takePictureButton = ((Button)findViewById(2131099820));
    this.takePictureButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        CoverCamera.this.takePictureButton.setEnabled(false);
        CoverCamera.this.mCamera.autoFocus(CoverCamera.this.autoFocusCB);
      }
    });
    this.mCamera = getCameraInstance();
    if (this.mCamera != null)
    {
      this.gallery.getViewTreeObserver().addOnGlobalLayoutListener(this.layoutListener);
      this.mPreview = new CameraPreview(this, this.mCamera, null, null);
      int j = 90;
      int i = j;
      if (Build.VERSION.SDK_INT >= 9)
      {
        i = j;
        if (DeviceUtil.getScreenOrientation(this) == 9) {
          i = 270;
        }
      }
      this.mPreview.setDisplayOrientation(i);
      ((FrameLayout)findViewById(2131099821)).addView(this.mPreview, 0);
    }
    for (;;)
    {
      setResult(0);
      return;
      DialogUtil.showAlert(this, 2131362139, 2131362142);
      this.takePictureButton.setEnabled(false);
    }
  }
  
  public void onPause()
  {
    super.onPause();
    ImageAdapter localImageAdapter = (ImageAdapter)this.gallery.getAdapter();
    if (localImageAdapter != null) {
      localImageAdapter.removeAll();
    }
    this.gallery.setAdapter(null);
    this.imageCache.clear();
    releaseCamera();
    removeAllFromQue();
  }
  
  static class CellHolder
  {
    ImageView image;
    
    CellHolder() {}
  }
  
  private class DownloadImageTask
    extends AsyncTask<String, Void, Bitmap>
  {
    private ImageView imageView;
    public int position = -1;
    public String url = "";
    
    private DownloadImageTask() {}
    
    protected Bitmap doInBackground(String... paramVarArgs)
    {
      return CoverCamera.this.loadImageFromNetwork(paramVarArgs[0]);
    }
    
    protected void onPostExecute(Bitmap paramBitmap)
    {
      if ((this.imageView != null) && (this.imageView.getTag() != null) && (this.position == ((Integer)this.imageView.getTag()).intValue())) {
        this.imageView.setImageBitmap(paramBitmap);
      }
      CoverCamera.this.removeFromQue(this);
      CoverCamera.this.executeNextQue();
    }
    
    public void setImageView(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
  }
  
  public class ImageAdapter
    extends BaseAdapter
  {
    private Context mContext;
    
    public ImageAdapter(Context paramContext)
    {
      this.mContext = paramContext;
    }
    
    public int getCount()
    {
      return CoverCamera.this.covers.size();
    }
    
    public Object getItem(int paramInt)
    {
      return Integer.valueOf(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null)
      {
        paramViewGroup = new ImageView(this.mContext);
        paramViewGroup.setLayoutParams(new Gallery.LayoutParams(CoverCamera.this.viewWidth, CoverCamera.this.viewHeight));
        paramView = new CoverCamera.CellHolder();
        paramView.image = paramViewGroup;
        paramViewGroup.setTag(paramView);
        paramView.image.setImageBitmap(null);
        paramView.image.setTag(Integer.valueOf(paramInt));
        paramViewGroup = (String)CoverCamera.this.covers.get(paramInt);
        if (CoverCamera.this.imageCache.get(paramViewGroup) == null) {
          break label141;
        }
        paramView.image.setImageBitmap(CoverCamera.this.imageCache.get(paramViewGroup));
      }
      for (;;)
      {
        return paramView.image;
        paramView = (CoverCamera.CellHolder)paramView.getTag();
        break;
        label141:
        CoverCamera.DownloadImageTask localDownloadImageTask = new CoverCamera.DownloadImageTask(CoverCamera.this, null);
        localDownloadImageTask.position = paramInt;
        localDownloadImageTask.setImageView(paramView.image);
        localDownloadImageTask.url = paramViewGroup;
        CoverCamera.this.addToQue(localDownloadImageTask);
      }
    }
    
    public void removeAll()
    {
      CoverCamera.this.covers.clear();
      notifyDataSetChanged();
    }
  }
}
