package com.qbiki.modules.dynamiclist;

import com.qbiki.util.ColorUtil;
import com.qbiki.util.StringUtil;

public class DynamicItemStyle
{
  private Integer backgroundColor = Integer.valueOf(Integer.MIN_VALUE);
  private Integer cellHeight = Integer.valueOf(Integer.MIN_VALUE);
  private Integer detailTextColor = Integer.valueOf(Integer.MIN_VALUE);
  private Integer detailTextLines = Integer.valueOf(Integer.MIN_VALUE);
  private Integer detailTextPaddingBottom = Integer.valueOf(Integer.MIN_VALUE);
  private Integer detailTextPaddingLeft = Integer.valueOf(Integer.MIN_VALUE);
  private Integer detailTextPaddingTop = Integer.valueOf(Integer.MIN_VALUE);
  private Integer detailTextSize = Integer.valueOf(Integer.MIN_VALUE);
  private String detailTextStyle = null;
  private SCDynamicStyleAlign imageAlign = SCDynamicStyleAlign.SCDynamicStyleAlignLeft;
  private Integer imageHeight = Integer.valueOf(Integer.MIN_VALUE);
  private Integer imagePaddingBottom = Integer.valueOf(Integer.MIN_VALUE);
  private Integer imagePaddingLeft = Integer.valueOf(Integer.MIN_VALUE);
  private Integer imagePaddingTop = Integer.valueOf(Integer.MIN_VALUE);
  private Integer imageWidth = Integer.valueOf(Integer.MIN_VALUE);
  private String name;
  private String parent = "";
  private Integer textColor = Integer.valueOf(Integer.MIN_VALUE);
  private Integer textLines = Integer.valueOf(Integer.MIN_VALUE);
  private Integer textPaddingBottom = Integer.valueOf(Integer.MIN_VALUE);
  private Integer textPaddingLeft = Integer.valueOf(Integer.MIN_VALUE);
  private Integer textPaddingTop = Integer.valueOf(Integer.MIN_VALUE);
  private Integer textSize = Integer.valueOf(Integer.MIN_VALUE);
  private String textStyle = null;
  private Integer textWidth = Integer.valueOf(Integer.MIN_VALUE);
  
  public DynamicItemStyle() {}
  
  public DynamicItemStyle(String paramString1, String paramString2)
  {
    this();
    if (paramString1 != null) {
      setName(paramString1);
    }
    if (paramString2 != null) {
      this.parent = paramString2;
    }
  }
  
  public static Integer getIntValueOrDefault(Integer paramInteger1, Integer paramInteger2)
  {
    Integer localInteger;
    if (paramInteger1.intValue() != Integer.MIN_VALUE)
    {
      localInteger = paramInteger1;
      if (paramInteger1.intValue() != Integer.MAX_VALUE) {}
    }
    else
    {
      localInteger = paramInteger2;
    }
    return localInteger;
  }
  
  public static Integer getIntValueOrZero(Integer paramInteger)
  {
    if ((paramInteger.intValue() == Integer.MIN_VALUE) || (paramInteger.intValue() == Integer.MAX_VALUE)) {}
    for (int i = 0;; i = paramInteger.intValue()) {
      return Integer.valueOf(i);
    }
  }
  
  public static final int getLayoutAlign(SCDynamicStyleAlign paramSCDynamicStyleAlign)
  {
    if (paramSCDynamicStyleAlign == SCDynamicStyleAlign.SCDynamicStyleAlignCenter) {
      return 13;
    }
    if (paramSCDynamicStyleAlign == SCDynamicStyleAlign.SCDynamicStyleAlignRight) {
      return 11;
    }
    return 9;
  }
  
  public static final int getTypeface(String paramString)
  {
    if ((paramString != null) && (paramString.equalsIgnoreCase("italic"))) {
      return 2;
    }
    if ((paramString != null) && (paramString.equalsIgnoreCase("bold"))) {
      return 1;
    }
    return 0;
  }
  
  public void addValueForAttribute(String paramString1, String paramString2)
  {
    if ((paramString1 == null) || (paramString2 == null)) {}
    do
    {
      return;
      if (paramString1.equalsIgnoreCase("textLines")) {
        this.textLines = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("textPaddingLeft")) {
        this.textPaddingLeft = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("textPaddingTop")) {
        this.textPaddingTop = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("textPaddingBottom")) {
        this.textPaddingBottom = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("textColor"))
      {
        this.textColor = ColorUtil.getColorValue(paramString2, Integer.valueOf(0));
        this.detailTextColor = this.textColor;
      }
      if (paramString1.equalsIgnoreCase("textSize"))
      {
        this.textSize = Integer.valueOf(Integer.parseInt(paramString2));
        this.detailTextSize = this.textSize;
      }
      if (paramString1.equalsIgnoreCase("textStyle"))
      {
        this.textStyle = paramString2;
        this.detailTextStyle = this.textStyle;
      }
      if (paramString1.equalsIgnoreCase("textWidth")) {
        this.textWidth = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("detailTextLines")) {
        this.detailTextLines = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("detailTextPaddingLeft")) {
        this.detailTextPaddingLeft = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("detailTextPaddingTop")) {
        this.detailTextPaddingTop = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("detailTextPaddingBottom")) {
        this.detailTextPaddingBottom = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("imageHeight")) {
        setImageHeight(paramString2);
      }
      if (paramString1.equalsIgnoreCase("imageWidth")) {
        setImageWidth(paramString2);
      }
      if (paramString1.equalsIgnoreCase("imageAlign")) {
        setImageAlign(paramString2);
      }
      if (paramString1.equalsIgnoreCase("imagePaddingLeft")) {
        this.imagePaddingLeft = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("imagePaddingTop")) {
        this.imagePaddingTop = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("imagePaddingBottom")) {
        this.imagePaddingBottom = Integer.valueOf(Integer.parseInt(paramString2));
      }
      if (paramString1.equalsIgnoreCase("height")) {
        this.cellHeight = Integer.valueOf(Integer.parseInt(paramString2));
      }
    } while (!paramString1.equalsIgnoreCase("backgroundColor"));
    this.backgroundColor = ColorUtil.getColorValue(paramString2, Integer.valueOf(0));
  }
  
  public Integer getBackgroundColor()
  {
    return this.backgroundColor;
  }
  
  public Integer getCellHeight()
  {
    return this.cellHeight;
  }
  
  public Integer getDetailTextColor()
  {
    return this.detailTextColor;
  }
  
  public Integer getDetailTextLines()
  {
    return this.detailTextLines;
  }
  
  public Integer getDetailTextPaddingBottom()
  {
    return this.detailTextPaddingBottom;
  }
  
  public Integer getDetailTextPaddingLeft()
  {
    return this.detailTextPaddingLeft;
  }
  
  public Integer getDetailTextPaddingTop()
  {
    return this.detailTextPaddingTop;
  }
  
  public Integer getDetailTextSize()
  {
    return this.detailTextSize;
  }
  
  public String getDetailTextStyle()
  {
    return this.detailTextStyle;
  }
  
  public SCDynamicStyleAlign getImageAlign()
  {
    return this.imageAlign;
  }
  
  public Integer getImageHeight()
  {
    return this.imageHeight;
  }
  
  public Integer getImagePaddingBottom()
  {
    return this.imagePaddingBottom;
  }
  
  public Integer getImagePaddingLeft()
  {
    return this.imagePaddingLeft;
  }
  
  public Integer getImagePaddingTop()
  {
    return this.imagePaddingTop;
  }
  
  public Integer getImageWidth()
  {
    return this.imageWidth;
  }
  
  public String getName()
  {
    return this.name;
  }
  
  public String getParent()
  {
    return this.parent;
  }
  
  public Integer getTextColor()
  {
    return this.textColor;
  }
  
  public Integer getTextLines()
  {
    return this.textLines;
  }
  
  public Integer getTextPaddingBottom()
  {
    return this.textPaddingBottom;
  }
  
  public Integer getTextPaddingLeft()
  {
    return this.textPaddingLeft;
  }
  
  public Integer getTextPaddingTop()
  {
    return this.textPaddingTop;
  }
  
  public Integer getTextSize()
  {
    return this.textSize;
  }
  
  public String getTextStyle()
  {
    return this.textStyle;
  }
  
  public Integer getTextWidth()
  {
    return this.textWidth;
  }
  
  public void setBackgroundColor(Integer paramInteger)
  {
    this.backgroundColor = paramInteger;
  }
  
  public void setCellHeight(Integer paramInteger)
  {
    this.cellHeight = paramInteger;
  }
  
  public void setDetailTextColor(Integer paramInteger)
  {
    this.detailTextColor = paramInteger;
  }
  
  public void setDetailTextLines(Integer paramInteger)
  {
    this.detailTextLines = paramInteger;
  }
  
  public void setDetailTextPaddingBottom(Integer paramInteger)
  {
    this.detailTextPaddingBottom = paramInteger;
  }
  
  public void setDetailTextPaddingLeft(Integer paramInteger)
  {
    this.detailTextPaddingLeft = paramInteger;
  }
  
  public void setDetailTextPaddingTop(Integer paramInteger)
  {
    this.detailTextPaddingTop = paramInteger;
  }
  
  public void setDetailTextSize(Integer paramInteger)
  {
    this.detailTextSize = paramInteger;
  }
  
  public void setDetailTextStyle(String paramString)
  {
    this.detailTextStyle = paramString;
  }
  
  public void setImageAlign(SCDynamicStyleAlign paramSCDynamicStyleAlign)
  {
    this.imageAlign = paramSCDynamicStyleAlign;
  }
  
  public void setImageAlign(String paramString)
  {
    if ((StringUtil.isEmpty(paramString)) || (paramString.equalsIgnoreCase("left"))) {
      this.imageAlign = SCDynamicStyleAlign.SCDynamicStyleAlignLeft;
    }
    do
    {
      return;
      if (paramString.equalsIgnoreCase("right"))
      {
        this.imageAlign = SCDynamicStyleAlign.SCDynamicStyleAlignRight;
        return;
      }
    } while (!paramString.equalsIgnoreCase("center"));
    this.imageAlign = SCDynamicStyleAlign.SCDynamicStyleAlignCenter;
  }
  
  public void setImageHeight(Integer paramInteger)
  {
    this.imageHeight = paramInteger;
  }
  
  public void setImageHeight(String paramString)
  {
    if ((StringUtil.isEmpty(paramString)) || (paramString.equalsIgnoreCase("auto")))
    {
      this.imageHeight = Integer.valueOf(Integer.MAX_VALUE);
      return;
    }
    this.imageHeight = Integer.valueOf(Integer.parseInt(paramString));
  }
  
  public void setImagePaddingBottom(Integer paramInteger)
  {
    this.imagePaddingBottom = paramInteger;
  }
  
  public void setImagePaddingLeft(Integer paramInteger)
  {
    this.imagePaddingLeft = paramInteger;
  }
  
  public void setImagePaddingTop(Integer paramInteger)
  {
    this.imagePaddingTop = paramInteger;
  }
  
  public void setImageWidth(Integer paramInteger)
  {
    this.imageWidth = paramInteger;
  }
  
  public void setImageWidth(String paramString)
  {
    if ((StringUtil.isEmpty(paramString)) || (paramString.equalsIgnoreCase("auto")))
    {
      this.imageWidth = Integer.valueOf(Integer.MAX_VALUE);
      return;
    }
    this.imageWidth = Integer.valueOf(Integer.parseInt(paramString));
  }
  
  public void setName(String paramString)
  {
    this.name = paramString;
  }
  
  public void setParent(String paramString)
  {
    this.parent = paramString;
  }
  
  public void setReferencedStyle(DynamicItemStyle paramDynamicItemStyle)
  {
    if (paramDynamicItemStyle == null) {}
    do
    {
      return;
      if (paramDynamicItemStyle.getTextColor().intValue() != Integer.MIN_VALUE) {
        this.textColor = paramDynamicItemStyle.getTextColor();
      }
      if (paramDynamicItemStyle.getTextSize().intValue() != Integer.MIN_VALUE) {
        this.textSize = paramDynamicItemStyle.getTextSize();
      }
      if (!StringUtil.isEmpty(paramDynamicItemStyle.getTextStyle())) {
        this.textStyle = paramDynamicItemStyle.getTextStyle();
      }
      if (paramDynamicItemStyle.getTextLines().intValue() != Integer.MIN_VALUE) {
        this.textLines = paramDynamicItemStyle.getTextLines();
      }
      if (paramDynamicItemStyle.getTextPaddingLeft().intValue() != Integer.MIN_VALUE) {
        this.textPaddingLeft = paramDynamicItemStyle.getTextPaddingLeft();
      }
      if (paramDynamicItemStyle.getTextPaddingTop().intValue() != Integer.MIN_VALUE) {
        this.textPaddingTop = paramDynamicItemStyle.getTextPaddingTop();
      }
    } while (paramDynamicItemStyle.getTextPaddingBottom().intValue() == Integer.MIN_VALUE);
    this.textPaddingBottom = paramDynamicItemStyle.getTextPaddingBottom();
  }
  
  public void setReferencedStyleForDetail(DynamicItemStyle paramDynamicItemStyle)
  {
    if (paramDynamicItemStyle == null) {}
    do
    {
      return;
      if (paramDynamicItemStyle.getTextColor().intValue() != Integer.MIN_VALUE) {
        this.detailTextColor = paramDynamicItemStyle.getTextColor();
      }
      if (paramDynamicItemStyle.getTextSize().intValue() != Integer.MIN_VALUE) {
        this.detailTextSize = paramDynamicItemStyle.getTextSize();
      }
      if (!StringUtil.isEmpty(paramDynamicItemStyle.getTextStyle())) {
        this.detailTextStyle = paramDynamicItemStyle.getTextStyle();
      }
      if (paramDynamicItemStyle.getDetailTextLines().intValue() != Integer.MIN_VALUE) {
        this.detailTextLines = paramDynamicItemStyle.getDetailTextLines();
      }
      if (paramDynamicItemStyle.getDetailTextPaddingLeft().intValue() != Integer.MIN_VALUE) {
        this.detailTextPaddingLeft = paramDynamicItemStyle.getDetailTextPaddingLeft();
      }
      if (paramDynamicItemStyle.getDetailTextPaddingTop().intValue() != Integer.MIN_VALUE) {
        this.detailTextPaddingTop = paramDynamicItemStyle.getDetailTextPaddingTop();
      }
    } while (paramDynamicItemStyle.getDetailTextPaddingBottom().intValue() == Integer.MIN_VALUE);
    this.detailTextPaddingBottom = paramDynamicItemStyle.getDetailTextPaddingBottom();
  }
  
  public void setTextColor(Integer paramInteger)
  {
    this.textColor = paramInteger;
  }
  
  public void setTextLines(Integer paramInteger)
  {
    this.textLines = paramInteger;
  }
  
  public void setTextPaddingBottom(Integer paramInteger)
  {
    this.textPaddingBottom = paramInteger;
  }
  
  public void setTextPaddingLeft(Integer paramInteger)
  {
    this.textPaddingLeft = paramInteger;
  }
  
  public void setTextPaddingTop(Integer paramInteger)
  {
    this.textPaddingTop = paramInteger;
  }
  
  public void setTextSize(Integer paramInteger)
  {
    this.textSize = paramInteger;
  }
  
  public void setTextStyle(String paramString)
  {
    this.textStyle = paramString;
  }
  
  public void setTextWidth(Integer paramInteger)
  {
    this.textWidth = paramInteger;
  }
}
