package com.qbiki.modules.rateandreview;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.RatingBar.OnRatingBarChangeListener;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.facebook.android.AsyncFacebookRunner;
import com.facebook.android.AsyncFacebookRunner.RequestListener;
import com.facebook.android.BaseRequestListener;
import com.facebook.android.DialogError;
import com.facebook.android.Facebook;
import com.facebook.android.Facebook.DialogListener;
import com.facebook.android.FacebookError;
import com.facebook.android.SessionEvents;
import com.facebook.android.SessionEvents.AuthListener;
import com.facebook.android.SessionEvents.LogoutListener;
import com.facebook.android.SessionStore;
import com.facebook.android.Util;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.AppConfig;
import com.qbiki.seattleclouds.AppLicensing;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.HTTPUtil;
import com.qbiki.util.StyleUtil;
import com.qbiki.util.WebViewUtil;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URLDecoder;
import org.json.JSONObject;

public class RateAndReviewFragment
  extends SCFragment
{
  private static final int NEW_RATE = 1520;
  public static final String TAG = "RateAndReviewActivity";
  public final int REQUEST_ME = 1;
  public final int REQUEST_PAGE_STATUS = 4;
  private String commentsNr = "0";
  private CurrentRateTask currentRateTask = null;
  private Facebook fb;
  private String fb_id = "";
  private String fbname = "";
  private AsyncFacebookRunner mAsyncRunner;
  private View mView = null;
  private WebView mWebView = null;
  private String pageid = "";
  private String pagerate = "0";
  private String ratingsNr = "0";
  private Bundle style;
  public String uid = "";
  
  public RateAndReviewFragment() {}
  
  private Context getContext()
  {
    Context localContext = null;
    FragmentActivity localFragmentActivity = getActivity();
    if (localFragmentActivity != null) {
      localContext = localFragmentActivity.getApplicationContext();
    }
    return localContext;
  }
  
  private void loginFB()
  {
    Facebook localFacebook = this.fb;
    FragmentActivity localFragmentActivity = getActivity();
    LoginDialogListener localLoginDialogListener = new LoginDialogListener(null);
    localFacebook.authorize(localFragmentActivity, new String[] { "publish_stream" }, -1, localLoginDialogListener);
  }
  
  private void setupWebView()
  {
    this.mWebView = ((WebView)this.mView.findViewById(2131100168));
    WebViewUtil.setDefaultSettings(this.mWebView);
  }
  
  public void changeLoginWin()
  {
    Object localObject;
    if (this.fb.isSessionValid())
    {
      ((LinearLayout)this.mView.findViewById(2131100171)).setVisibility(4);
      ((LinearLayout)this.mView.findViewById(2131100173)).setVisibility(0);
      localObject = new RRRequestListener();
      ((RRRequestListener)localObject).setRequestMethod(1);
      this.mAsyncRunner.request("me", (AsyncFacebookRunner.RequestListener)localObject);
    }
    for (;;)
    {
      invalidateOptionsMenu();
      return;
      ((LinearLayout)this.mView.findViewById(2131100171)).setVisibility(0);
      ((LinearLayout)this.mView.findViewById(2131100173)).setVisibility(4);
      localObject = (TextView)this.mView.findViewById(2131100170);
      if (getActivity() != null) {
        ((TextView)localObject).setText(getActivity().getResources().getString(2131362159));
      }
    }
  }
  
  public void getPageRatingDone(String paramString)
  {
    paramString = paramString.split(":");
    if ((paramString.length == 3) && (this != null))
    {
      this.pagerate = paramString[0];
      this.ratingsNr = paramString[1];
      this.commentsNr = paramString[2];
      ((RatingBar)this.mView.findViewById(2131100167)).setRating(Float.parseFloat(this.pagerate));
      paramString = String.format(getResources().getString(2131362158), new Object[] { this.commentsNr, this.ratingsNr });
      ((TextView)this.mView.findViewById(2131100166)).setText(paramString);
      refreshComments();
    }
  }
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.pageid = ((Bundle)localObject).getString("pageid");
      this.fb_id = ((Bundle)localObject).getString("fb_id");
      if ((this.fb_id == null) || (this.fb_id.length() == 0)) {
        this.fb_id = App.appConfig.getFacebookAppID();
      }
      this.style = ((Bundle)localObject).getBundle("PAGE_STYLE");
    }
    setupWebView();
    refreshComments();
    ((Button)this.mView.findViewById(2131100174)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        paramAnonymousView = new Intent(RateAndReviewFragment.this.getActivity(), NewRateAndCommentActivity.class);
        paramAnonymousView.putExtra("pageid", RateAndReviewFragment.this.pageid);
        paramAnonymousView.putExtra("fbid", RateAndReviewFragment.this.uid);
        paramAnonymousView.putExtra("fbname", RateAndReviewFragment.this.fbname);
        paramAnonymousView.putExtra("PAGE_STYLE", RateAndReviewFragment.this.style);
        RateAndReviewFragment.this.startActivityForResult(paramAnonymousView, 1520);
      }
    });
    ((Button)this.mView.findViewById(2131100175)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        new RateAndReviewFragment.PostOnFacebookAsyncTask(RateAndReviewFragment.this, null).execute(new Void[0]);
      }
    });
    ((Button)this.mView.findViewById(2131100172)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        RateAndReviewFragment.this.loginFB();
      }
    });
    ((Button)this.mView.findViewById(2131100176)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        new RateAndReviewFragment.FacebookLogoutAsyncTask(RateAndReviewFragment.this, null).execute(new Void[0]);
      }
    });
    ((RatingBar)this.mView.findViewById(2131100167)).setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener()
    {
      public void onRatingChanged(RatingBar paramAnonymousRatingBar, float paramAnonymousFloat, boolean paramAnonymousBoolean)
      {
        if (paramAnonymousBoolean) {
          ((RatingBar)RateAndReviewFragment.this.mView.findViewById(2131100167)).setRating(Float.parseFloat(RateAndReviewFragment.this.pagerate));
        }
      }
    });
    this.fb = new Facebook(this.fb_id);
    this.mAsyncRunner = new AsyncFacebookRunner(this.fb);
    localObject = getContext();
    if (localObject != null) {
      SessionStore.restore(this.fb, (Context)localObject);
    }
    SessionEvents.addAuthListener(new RRAuthListener());
    SessionEvents.addLogoutListener(new RRLogoutListener());
    changeLoginWin();
    refreshRate();
    StyleUtil.setBackground((LinearLayout)this.mView.findViewById(2131100165), this.style);
    StyleUtil.setBackground((LinearLayout)this.mView.findViewById(2131100169), this.style);
    StyleUtil.setTextColor((TextView)this.mView.findViewById(2131100166), this.style);
    StyleUtil.setTextColor((TextView)this.mView.findViewById(2131100170), this.style);
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if ((paramInt1 == 1520) && (paramInt2 != 0) && (paramIntent.getStringExtra("result").equalsIgnoreCase("OK"))) {
      refreshRate();
    }
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558432, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903201, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100320: 
      loginFB();
      return true;
    }
    new FacebookLogoutAsyncTask(null).execute(new Void[0]);
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    boolean bool3 = true;
    super.onPrepareOptionsMenu(paramMenu);
    MenuItem localMenuItem = paramMenu.findItem(2131100320);
    paramMenu = paramMenu.findItem(2131100321);
    boolean bool1;
    if ((this.fb != null) && (this.fb.isSessionValid()))
    {
      bool1 = true;
      if (bool1) {
        break label101;
      }
      bool2 = true;
      label54:
      localMenuItem.setVisible(bool2);
      if (bool1) {
        break label106;
      }
    }
    label101:
    label106:
    for (boolean bool2 = bool3;; bool2 = false)
    {
      localMenuItem.setEnabled(bool2);
      paramMenu.setVisible(bool1);
      paramMenu.setEnabled(bool1);
      return;
      bool1 = false;
      break;
      bool2 = false;
      break label54;
    }
  }
  
  public void refreshComments()
  {
    String str = "http://" + App.serverHostName + "/comments.aspx?username=" + App.username + "&appid=" + App.appId + "&pageid=" + this.pageid + "&guid=" + AppLicensing.getDeviceId(getActivity());
    this.mWebView.loadUrl(str);
  }
  
  public void refreshRate()
  {
    Object localObject = (ConnectivityManager)getActivity().getSystemService("connectivity");
    if ((((ConnectivityManager)localObject).getActiveNetworkInfo() == null) || (!((ConnectivityManager)localObject).getActiveNetworkInfo().isConnected()))
    {
      DialogUtil.showAlert(getActivity(), getResources().getString(2131361915), getResources().getString(2131362162));
      return;
    }
    localObject = "http://" + App.serverHostName + "/getpagerate.ashx?username=" + App.username + "&appid=" + App.appId + "&pageid=" + this.pageid;
    this.currentRateTask = new CurrentRateTask(null);
    this.currentRateTask.execute(new String[] { localObject });
  }
  
  private class CurrentRateTask
    extends AsyncTask<String, String, String>
  {
    private CurrentRateTask() {}
    
    protected String doInBackground(String... paramVarArgs)
    {
      try
      {
        paramVarArgs = HTTPUtil.performGetRequest(paramVarArgs[0]);
        return paramVarArgs;
      }
      catch (IOException paramVarArgs)
      {
        Log.e("RateAndReviewActivity", paramVarArgs.getMessage());
      }
      return null;
    }
    
    protected void onPostExecute(String paramString)
    {
      if ((paramString != null) && (paramString.startsWith("OK"))) {
        RateAndReviewFragment.this.getPageRatingDone(paramString.substring(2));
      }
    }
  }
  
  private class FacebookLogoutAsyncTask
    extends AsyncTask<Void, Void, Void>
  {
    private FacebookLogoutAsyncTask() {}
    
    protected Void doInBackground(Void... paramVarArgs)
    {
      try
      {
        paramVarArgs = RateAndReviewFragment.this.getActivity();
        if (paramVarArgs != null)
        {
          RateAndReviewFragment.this.fb.logout(paramVarArgs);
          paramVarArgs = RateAndReviewFragment.this.getContext();
          if (paramVarArgs != null) {
            SessionStore.clear(paramVarArgs);
          }
        }
      }
      catch (MalformedURLException paramVarArgs)
      {
        for (;;)
        {
          Log.e("RateAndReviewActivity", paramVarArgs.getMessage());
        }
      }
      catch (IOException paramVarArgs)
      {
        for (;;)
        {
          Log.e("RateAndReviewActivity", paramVarArgs.getMessage());
        }
      }
      return null;
    }
    
    protected void onPostExecute(Void paramVoid)
    {
      RateAndReviewFragment.this.changeLoginWin();
      super.onPostExecute(paramVoid);
    }
  }
  
  private final class LoginDialogListener
    implements Facebook.DialogListener
  {
    private LoginDialogListener() {}
    
    public void onCancel()
    {
      SessionEvents.onLoginError("Action Canceled");
    }
    
    public void onComplete(Bundle paramBundle) {}
    
    public void onError(DialogError paramDialogError)
    {
      SessionEvents.onLoginError(paramDialogError.getMessage());
    }
    
    public void onFacebookError(FacebookError paramFacebookError)
    {
      SessionEvents.onLoginError(paramFacebookError.getMessage());
    }
  }
  
  private class PostOnFacebookAsyncTask
    extends AsyncTask<Void, Void, Bundle>
  {
    private PostOnFacebookAsyncTask() {}
    
    protected Bundle doInBackground(Void... paramVarArgs)
    {
      paramVarArgs = "http://" + App.serverHostName + "/getfacebookjson.ashx?" + "username=" + App.username + "&appid=" + App.appId + "&pageid=" + RateAndReviewFragment.this.pageid + "&fbid=" + RateAndReviewFragment.this.fb_id + "&publisherid=" + App.publisherId;
      try
      {
        paramVarArgs = HTTPUtil.performGetRequest(paramVarArgs);
      }
      catch (IOException paramVarArgs)
      {
        label104:
        Log.e("RateAndReviewActivity", paramVarArgs.getMessage());
        return null;
      }
      try
      {
        localObject = URLDecoder.decode(paramVarArgs, "UTF-8");
        paramVarArgs = (Void[])localObject;
      }
      catch (Exception localException2)
      {
        Log.d("RateAndReview", "Exception", localException2);
        Log.d("RateAndReview", "Try to use Uri.decode");
        try
        {
          localObject = Uri.decode(paramVarArgs);
          paramVarArgs = (Void[])localObject;
        }
        catch (Exception localException1)
        {
          Log.d("RateAndReview", "Exception Uri", localException2);
        }
        break label104;
      }
      localObject = new Bundle();
      ((Bundle)localObject).putString("api_key", RateAndReviewFragment.this.fb_id);
      ((Bundle)localObject).putString("user_message_prompt", "Share on Facebook");
      ((Bundle)localObject).putString("attachment", paramVarArgs);
      return localObject;
    }
    
    protected void onPostExecute(Bundle paramBundle)
    {
      super.onPostExecute(paramBundle);
      if (paramBundle == null) {
        return;
      }
      RateAndReviewFragment.this.fb.dialog(RateAndReviewFragment.this.getActivity(), "stream.publish", paramBundle, new Facebook.DialogListener()
      {
        public void onCancel()
        {
          Log.e("RateAndReviewActivity", "Cancel");
        }
        
        public void onComplete(Bundle paramAnonymousBundle)
        {
          if ((paramAnonymousBundle.getString("post_id") != null) && (paramAnonymousBundle.getString("post_id").length() > 0)) {
            DialogUtil.showAlert(RateAndReviewFragment.this.getActivity(), 2131361917, "Message posted succesfully.");
          }
        }
        
        public void onError(DialogError paramAnonymousDialogError)
        {
          Log.e("RateAndReviewActivity", paramAnonymousDialogError.getMessage());
        }
        
        public void onFacebookError(FacebookError paramAnonymousFacebookError)
        {
          Log.e("RateAndReviewActivity", paramAnonymousFacebookError.getMessage());
        }
      });
    }
  }
  
  public class RRAuthListener
    implements SessionEvents.AuthListener
  {
    public RRAuthListener() {}
    
    public void onAuthFail(String paramString)
    {
      ((TextView)RateAndReviewFragment.this.mView.findViewById(2131100170)).setText("Facebook - Login failed");
      RateAndReviewFragment.this.changeLoginWin();
    }
    
    public void onAuthSucceed()
    {
      Object localObject = RateAndReviewFragment.this.getContext();
      if (localObject != null) {
        SessionStore.save(RateAndReviewFragment.this.fb, (Context)localObject);
      }
      localObject = new RateAndReviewFragment.RRRequestListener(RateAndReviewFragment.this);
      ((RateAndReviewFragment.RRRequestListener)localObject).setRequestMethod(1);
      RateAndReviewFragment.this.mAsyncRunner.request("me", (AsyncFacebookRunner.RequestListener)localObject);
      RateAndReviewFragment.this.changeLoginWin();
    }
  }
  
  public class RRLogoutListener
    implements SessionEvents.LogoutListener
  {
    public RRLogoutListener() {}
    
    public void onLogoutBegin()
    {
      RateAndReviewFragment.this.changeLoginWin();
    }
    
    public void onLogoutFinish()
    {
      Context localContext = RateAndReviewFragment.this.getContext();
      if (localContext != null) {
        SessionStore.clear(localContext);
      }
      RateAndReviewFragment.this.changeLoginWin();
    }
  }
  
  public class RRRequestListener
    extends BaseRequestListener
  {
    private int nextRequest = 0;
    private int requestMethod = 0;
    
    public RRRequestListener() {}
    
    public int getNextRequest()
    {
      return this.nextRequest;
    }
    
    public int getRequestMethod()
    {
      return this.requestMethod;
    }
    
    public void onComplete(String paramString, Object paramObject)
    {
      switch (this.requestMethod)
      {
      }
      do
      {
        do
        {
          return;
          try
          {
            paramString = Util.parseJson(paramString);
            RateAndReviewFragment.access$102(RateAndReviewFragment.this, paramString.getString("name"));
            RateAndReviewFragment.this.uid = paramString.getString("id");
            RateAndReviewFragment.this.getActivity().runOnUiThread(new Runnable()
            {
              public void run()
              {
                ((TextView)RateAndReviewFragment.this.mView.findViewById(2131100170)).setText(RateAndReviewFragment.this.getResources().getString(2131362163) + " " + RateAndReviewFragment.this.fbname);
              }
            });
            return;
          }
          catch (Exception paramString)
          {
            Log.e("Facebook", "Facebook Error: " + paramString.getMessage());
          }
        } while (!paramString.getMessage().contains("session"));
        try
        {
          paramString = RateAndReviewFragment.this.getActivity();
          if (paramString != null) {
            RateAndReviewFragment.this.fb.logout(paramString);
          }
        }
        catch (MalformedURLException paramString)
        {
          for (;;)
          {
            Log.e("RateAndReviewActivity", paramString.getMessage());
          }
        }
        catch (IOException paramString)
        {
          for (;;)
          {
            Log.e("RateAndReviewActivity", paramString.getMessage());
          }
        }
        paramString = RateAndReviewFragment.this.getContext();
        if (paramString != null) {
          SessionStore.clear(paramString);
        }
        paramString = RateAndReviewFragment.this.getActivity();
      } while (paramString == null);
      paramString.runOnUiThread(new Runnable()
      {
        public void run()
        {
          ((TextView)RateAndReviewFragment.this.mView.findViewById(2131100170)).setText(RateAndReviewFragment.this.getResources().getString(2131362159));
          RateAndReviewFragment.this.changeLoginWin();
        }
      });
    }
    
    public void onFacebookError(FacebookError paramFacebookError, Object paramObject)
    {
      super.onFacebookError(paramFacebookError, paramObject);
    }
    
    public void onFileNotFoundException(FileNotFoundException paramFileNotFoundException, Object paramObject)
    {
      super.onFileNotFoundException(paramFileNotFoundException, paramObject);
    }
    
    public void onIOException(IOException paramIOException, Object paramObject)
    {
      super.onIOException(paramIOException, paramObject);
    }
    
    public void onMalformedURLException(MalformedURLException paramMalformedURLException, Object paramObject)
    {
      super.onMalformedURLException(paramMalformedURLException, paramObject);
    }
    
    public void setNextRequest(int paramInt)
    {
      this.nextRequest = paramInt;
    }
    
    public void setRequestMethod(int paramInt)
    {
      this.requestMethod = paramInt;
    }
  }
}
