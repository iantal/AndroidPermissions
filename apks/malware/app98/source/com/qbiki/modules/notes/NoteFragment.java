package com.qbiki.modules.notes;

import android.app.Activity;
import android.database.Cursor;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.TextView;
import android.widget.Toast;
import com.qbiki.seattleclouds.App;
import com.qbiki.util.DateUtil;
import com.qbiki.widget.NotifyingEditText;
import com.qbiki.widget.NotifyingEditText.OnKeyPreImeListener;
import java.util.Date;

public class NoteFragment
  extends Fragment
{
  public static final long NON_EXISTENT_NOTE_ID = -1L;
  private Activity mActivity;
  private TextView mDateText;
  private DatabaseHelper mDbHelper;
  private boolean mIsNewNoteActivity = false;
  private NoteFragmentContainer mNoteFragmentContainer;
  private Long mNoteId = null;
  private String mOriginalText;
  private TextView mRelativeDateText;
  private NotifyingEditText mText;
  
  public NoteFragment() {}
  
  private void hideKeyboard()
  {
    ((InputMethodManager)getActivity().getSystemService("input_method")).hideSoftInputFromWindow(this.mText.getWindowToken(), 0);
  }
  
  private void initDbHelper()
  {
    String str = null;
    Object localObject = getArguments();
    if (localObject != null) {
      str = ((Bundle)localObject).getString("databaseName");
    }
    if (str != null)
    {
      localObject = str;
      if (!str.trim().equals("")) {}
    }
    else
    {
      localObject = "notes.db";
    }
    this.mDbHelper = new DatabaseHelper(this.mActivity, (String)localObject);
  }
  
  public static NoteFragment newInstance(long paramLong, String paramString)
  {
    NoteFragment localNoteFragment = new NoteFragment();
    Bundle localBundle = new Bundle();
    localBundle.putLong("_id", paramLong);
    localBundle.putString("databaseName", paramString);
    localNoteFragment.setArguments(localBundle);
    return localNoteFragment;
  }
  
  private void populateFields()
  {
    Date localDate = new Date();
    this.mOriginalText = "";
    Object localObject = localDate;
    if (this.mNoteId.longValue() != -1L)
    {
      localObject = this.mDbHelper.fetchNoteById(this.mNoteId.longValue());
      if (((Cursor)localObject).getCount() > 0)
      {
        localDate = new Date(((Cursor)localObject).getLong(((Cursor)localObject).getColumnIndex("date")));
        this.mOriginalText = ((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex("text"));
      }
      ((Cursor)localObject).close();
      localObject = localDate;
    }
    this.mDateText.setText(android.text.format.DateFormat.getMediumDateFormat(this.mActivity).format((Date)localObject) + " " + android.text.format.DateFormat.getTimeFormat(this.mActivity).format((Date)localObject));
    this.mRelativeDateText.setText(DateUtil.getRelativeDayNumberString(this.mActivity, (Date)localObject));
    this.mText.setText(this.mOriginalText);
  }
  
  private void saveNote()
  {
    String str = this.mText.getText().toString();
    if (((this.mNoteId.longValue() == -1L) && (str.length() == 0)) || (this.mOriginalText.equals(str))) {
      return;
    }
    Date localDate = new Date();
    if (this.mNoteId.longValue() == -1L) {
      this.mNoteId = Long.valueOf(this.mDbHelper.insertNote(str, localDate));
    }
    for (;;)
    {
      this.mOriginalText = str;
      if (this.mNoteFragmentContainer != null) {
        this.mNoteFragmentContainer.onNoteChanged(this, this.mNoteId.longValue(), str, localDate);
      }
      Toast.makeText(this.mActivity, 2131362032, 0).show();
      return;
      this.mDbHelper.updateNote(this.mNoteId.longValue(), str, localDate);
    }
  }
  
  private void showKeyboard()
  {
    ((InputMethodManager)this.mActivity.getSystemService("input_method")).toggleSoftInput(2, 0);
  }
  
  public String getNoteText()
  {
    if (this.mText != null) {
      return this.mText.getText().toString();
    }
    return null;
  }
  
  public void onActiveChanged(boolean paramBoolean1, boolean paramBoolean2)
  {
    if (paramBoolean1)
    {
      if (Build.VERSION.SDK_INT != 13)
      {
        if (paramBoolean2)
        {
          this.mText.requestFocus();
          this.mText.setCursorVisible(true);
        }
      }
      else {
        return;
      }
      this.mText.clearFocus();
      this.mText.setCursorVisible(false);
      return;
    }
    saveNote();
  }
  
  public void onAttach(Activity paramActivity)
  {
    super.onAttach(paramActivity);
    this.mActivity = paramActivity;
    if ((this.mActivity instanceof NoteFragmentContainer)) {
      this.mNoteFragmentContainer = ((NoteFragmentContainer)this.mActivity);
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = getArguments();
    if (paramBundle != null) {}
    for (this.mNoteId = Long.valueOf(paramBundle.getLong("_id", -1L));; this.mNoteId = Long.valueOf(-1L))
    {
      if (this.mNoteId.longValue() == -1L) {
        this.mIsNewNoteActivity = true;
      }
      return;
    }
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903174, paramViewGroup, false);
    this.mDateText = ((TextView)paramLayoutInflater.findViewById(2131100038));
    this.mRelativeDateText = ((TextView)paramLayoutInflater.findViewById(2131100063));
    this.mText = ((NotifyingEditText)paramLayoutInflater.findViewById(2131099838));
    this.mText.setOnKeyPreImeListener(new NotifyingEditText.OnKeyPreImeListener()
    {
      public boolean onKeyPreIme(int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
      {
        boolean bool2 = false;
        boolean bool1 = false;
        if (paramAnonymousInt == 4)
        {
          if (!NoteFragment.this.mIsNewNoteActivity) {
            break label76;
          }
          paramAnonymousKeyEvent = NoteFragment.this.getParentFragment();
          if (paramAnonymousKeyEvent != null)
          {
            App.closePage(paramAnonymousKeyEvent);
            bool1 = true;
          }
        }
        for (;;)
        {
          bool2 = bool1;
          if (Build.VERSION.SDK_INT != 13)
          {
            NoteFragment.this.mText.clearFocus();
            NoteFragment.this.mText.setCursorVisible(false);
            bool2 = bool1;
          }
          return bool2;
          label76:
          NoteFragment.this.saveNote();
        }
      }
    });
    initDbHelper();
    return paramLayoutInflater;
  }
  
  public void onDestroyView()
  {
    if (this.mDbHelper != null) {
      this.mDbHelper.close();
    }
    super.onDestroyView();
  }
  
  public void onPause()
  {
    super.onPause();
    if (this.mIsNewNoteActivity) {
      hideKeyboard();
    }
    saveNote();
  }
  
  public void onResume()
  {
    super.onResume();
    populateFields();
    if (this.mIsNewNoteActivity) {
      showKeyboard();
    }
  }
  
  public void setNoteFragmentContainer(NoteFragmentContainer paramNoteFragmentContainer)
  {
    this.mNoteFragmentContainer = paramNoteFragmentContainer;
  }
  
  public static abstract interface NoteFragmentContainer
  {
    public abstract boolean getKeyboardVisible();
    
    public abstract void onNoteChanged(NoteFragment paramNoteFragment, long paramLong, String paramString, Date paramDate);
  }
}
