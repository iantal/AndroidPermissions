package com.qbiki.modules.dropbox.medialist;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.res.Resources;
import android.database.DataSetObserver;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.ResultReceiver;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils.SimpleStringSplitter;
import android.text.TextUtils.StringSplitter;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.modules.videolist.DownloadService;
import com.qbiki.modules.videolist.DownloadService.DownloadServiceBinder;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCListFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.ConnectionUtil;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.StyleUtil;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;

public class DropboxMediaListFragment
  extends SCListFragment
{
  private static final boolean DEBUG = false;
  public static final byte JSON_SOURCE_TYPE = 1;
  public static final String PAGE_ID_KEY = "PAGE_ID_KEY";
  public static final String SOURCE_TYPE_KEY = "SOURCE_FILE_KEY";
  private static final String TAG = DropboxMediaListFragment.class.getSimpleName();
  private String INTERNAL_STORAGE_DIRECTORY;
  private String JSON_CONF_FILE_PATH;
  private String JSON_FILESLIST_FILE_PATH;
  private String PAGE_ID;
  private String PAGE_NO_EXTENTION;
  private String RECEIVER_ID;
  private String STORAGE_DIRECTORY;
  private ServiceConnection mConnection = new ServiceConnection()
  {
    public void onServiceConnected(ComponentName paramAnonymousComponentName, IBinder paramAnonymousIBinder)
    {
      if (DropboxMediaListFragment.this.mDownloadReceiver == null)
      {
        DropboxMediaListFragment.access$1402(DropboxMediaListFragment.this, new DropboxMediaListFragment.DownloadReceiver(DropboxMediaListFragment.this, new Handler()));
        DropboxMediaListFragment.this.mDownloadReceiver.setID(DropboxMediaListFragment.this.RECEIVER_ID);
      }
      DropboxMediaListFragment.access$1602(DropboxMediaListFragment.this, ((DownloadService.DownloadServiceBinder)paramAnonymousIBinder).getService());
      DropboxMediaListFragment.this.mDownloadService.setReceiver(DropboxMediaListFragment.this.mDownloadReceiver, DropboxMediaListFragment.this.RECEIVER_ID);
    }
    
    public void onServiceDisconnected(ComponentName paramAnonymousComponentName)
    {
      DropboxMediaListFragment.access$1602(DropboxMediaListFragment.this, null);
      DropboxMediaListFragment.access$1402(DropboxMediaListFragment.this, null);
    }
  };
  private int mCurrentSelectedCellIndex;
  private DownloadReceiver mDownloadReceiver;
  private DownloadService mDownloadService;
  private ArrayList<Integer> mFileIndexes = null;
  private MediaFilesListBaseAdapter mFilesListAdapter;
  private JSONObject mJsonConfig;
  private List<MediaFile> mListOfFiles;
  private Resources mResources;
  private Bundle mStyle;
  private ListItemViews mViewGenerator = null;
  
  public DropboxMediaListFragment() {}
  
  private long calculateTotalFilesSize(ArrayList<Integer> paramArrayList)
  {
    long l = 0L;
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      Integer localInteger = (Integer)paramArrayList.next();
      l += ((MediaFile)this.mListOfFiles.get(localInteger.intValue())).getFileSize();
    }
    return l;
  }
  
  private void cancelDownloading(int paramInt)
  {
    if (this.mDownloadService != null) {
      this.mDownloadService.cancelDownload(this.RECEIVER_ID, Integer.valueOf(paramInt));
    }
  }
  
  private void cancelDownloadingAtIndex(Integer paramInteger)
  {
    this.mCurrentSelectedCellIndex = paramInteger.intValue();
    paramInteger = (MediaFile)this.mListOfFiles.get(this.mCurrentSelectedCellIndex);
    if (paramInteger.getMediaFileProgress() <= 0) {
      return;
    }
    DialogUtil.showAlertWithPosNeutButtons(getActivity(), this.mResources.getString(2131361916), String.format(this.mResources.getString(2131362246, new Object[] { paramInteger.getMediaFileTitle() }), new Object[0]), null, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(DropboxMediaListFragment.this.mCurrentSelectedCellIndex);
        if (paramAnonymousDialogInterface.getMediaFileStatus() == MediaFile.MediaFileStatus.LOCAL) {
          return;
        }
        paramAnonymousDialogInterface.setMediaFileStatus(MediaFile.MediaFileStatus.ONLINE);
        paramAnonymousDialogInterface.setMediaFileProgress(0);
        if (Build.VERSION.SDK_INT >= 11) {
          DropboxMediaListFragment.this.mFilesListAdapter.notifyDataSetChanged();
        }
        DropboxMediaListFragment.this.cancelDownloading(DropboxMediaListFragment.this.mCurrentSelectedCellIndex);
      }
    }, this.mResources.getString(2131361920), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    }, this.mResources.getString(2131361911));
  }
  
  private void deleteFileAtIndex(Integer paramInteger)
  {
    this.mCurrentSelectedCellIndex = paramInteger.intValue();
    paramInteger = (MediaFile)this.mListOfFiles.get(this.mCurrentSelectedCellIndex);
    DialogUtil.showAlertWithPosNeutButtons(getActivity(), this.mResources.getString(2131361917), String.format(this.mResources.getString(2131362245, new Object[] { paramInteger.getMediaFileTitle() }), new Object[0]), null, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        paramAnonymousDialogInterface = (MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(DropboxMediaListFragment.this.mCurrentSelectedCellIndex);
        if (new File(paramAnonymousDialogInterface.getMediaFileDestinationPath()).delete())
        {
          paramAnonymousDialogInterface.setMediaFileStatus(MediaFile.MediaFileStatus.ONLINE);
          DropboxMediaListFragment.this.mFilesListAdapter.notifyDataSetChanged();
          return;
        }
        Log.e(DropboxMediaListFragment.TAG, " ERROR deleting file:" + paramAnonymousDialogInterface.getMediaFileDestinationPath());
      }
    }, this.mResources.getString(2131361920), new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
    }, this.mResources.getString(2131361911));
  }
  
  private boolean existLocal(MediaFile paramMediaFile)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(this.STORAGE_DIRECTORY).append(paramMediaFile.getMediaOriginalFileName());
    return new File(localStringBuilder.toString()).exists();
  }
  
  @SuppressLint({"NewApi"})
  private void getFilesListFromDropbox()
  {
    AsyncTaskListener local1 = new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        paramAnonymousObject = (HashMap)paramAnonymousObject;
        if (paramAnonymousObject != null)
        {
          if (paramAnonymousObject.containsKey("KEY_FILES")) {
            DropboxMediaListFragment.access$002(DropboxMediaListFragment.this, (List)paramAnonymousObject.get("KEY_FILES"));
          }
          if (paramAnonymousObject.containsKey("KEY_JSON_CONFIG")) {
            DropboxMediaListFragment.access$102(DropboxMediaListFragment.this, (JSONObject)paramAnonymousObject.get("KEY_JSON_CONFIG"));
          }
          DropboxMediaListFragment.this.updateStatuses(DropboxMediaListFragment.this.mListOfFiles);
          DropboxMediaListFragment.this.setListAdapter();
        }
      }
    };
    if (Build.VERSION.SDK_INT >= 11)
    {
      new AsyncTaskParseResources().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Object[] { this.STORAGE_DIRECTORY + this.JSON_FILESLIST_FILE_PATH, this.JSON_CONF_FILE_PATH, Integer.valueOf(100), local1 });
      return;
    }
    new AsyncTaskParseResources().execute(new Object[] { this.STORAGE_DIRECTORY + this.JSON_FILESLIST_FILE_PATH, this.JSON_CONF_FILE_PATH, Integer.valueOf(100), local1 });
  }
  
  @SuppressLint({"NewApi"})
  private void getFilesListFromLocalFile()
  {
    AsyncTaskListener local2 = new AsyncTaskListener()
    {
      public void asyncTaskFinished(Object paramAnonymousObject)
      {
        paramAnonymousObject = (HashMap)paramAnonymousObject;
        if (paramAnonymousObject.containsKey("KEY_FILES")) {
          DropboxMediaListFragment.access$002(DropboxMediaListFragment.this, (List)paramAnonymousObject.get("KEY_FILES"));
        }
        if (paramAnonymousObject.containsKey("KEY_JSON_CONFIG")) {
          DropboxMediaListFragment.access$102(DropboxMediaListFragment.this, (JSONObject)paramAnonymousObject.get("KEY_JSON_CONFIG"));
        }
        DropboxMediaListFragment.this.updateStatuses(DropboxMediaListFragment.this.mListOfFiles);
        DropboxMediaListFragment.this.setListAdapter();
      }
    };
    if (Build.VERSION.SDK_INT >= 11)
    {
      new AsyncTaskParseResources().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Object[] { this.STORAGE_DIRECTORY + this.JSON_FILESLIST_FILE_PATH, this.JSON_CONF_FILE_PATH, Integer.valueOf(101), local2 });
      return;
    }
    new AsyncTaskParseResources().execute(new Object[] { this.STORAGE_DIRECTORY + this.JSON_FILESLIST_FILE_PATH, this.JSON_CONF_FILE_PATH, Integer.valueOf(101), local2 });
  }
  
  private File getOrCreateStorageDir(String paramString)
  {
    paramString = new File(paramString);
    if (!paramString.exists()) {
      paramString.mkdirs();
    }
    return paramString;
  }
  
  private ProgressBar getProgressBar(int paramInt)
  {
    Object localObject = getListView();
    if (localObject == null) {}
    do
    {
      return null;
      localObject = ((ListView)localObject).getChildAt(paramInt - ((ListView)localObject).getFirstVisiblePosition());
    } while (localObject == null);
    return (ProgressBar)((View)localObject).findViewById(2131100246);
  }
  
  private TextView getProgressTitle(int paramInt)
  {
    Object localObject = getListView();
    if (localObject == null) {}
    do
    {
      return null;
      localObject = ((ListView)localObject).getChildAt(paramInt - ((ListView)localObject).getFirstVisiblePosition());
    } while (localObject == null);
    return (TextView)((View)localObject).findViewById(2131100245);
  }
  
  private void initPage()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      this.mStyle = ((Bundle)localObject).getBundle("PAGE_STYLE");
      StyleUtil.setBackground(getListView(), this.mStyle);
      TextUtils.SimpleStringSplitter localSimpleStringSplitter = new TextUtils.SimpleStringSplitter('.');
      this.PAGE_ID = ((Bundle)localObject).getString("PAGE_ID_KEY");
      localSimpleStringSplitter.setString(this.PAGE_ID);
      localObject = localSimpleStringSplitter.iterator();
      if (((Iterator)localObject).hasNext()) {
        this.PAGE_NO_EXTENTION = ((String)((Iterator)localObject).next());
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(this.PAGE_ID).append("conf.json");
      this.JSON_CONF_FILE_PATH = ((StringBuilder)localObject).toString();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(this.PAGE_ID).append("dropboxfiles.json");
      this.JSON_FILESLIST_FILE_PATH = ((StringBuilder)localObject).toString();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(App.getAppExternalResourcesPath()).append('/').append(this.PAGE_NO_EXTENTION).append('/');
      this.STORAGE_DIRECTORY = ((StringBuilder)localObject).toString();
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(Environment.getDataDirectory().getAbsolutePath()).append('/').append(this.PAGE_NO_EXTENTION).append('/');
      this.INTERNAL_STORAGE_DIRECTORY = ((StringBuilder)localObject).toString();
      this.RECEIVER_ID = (App.appId + this.PAGE_NO_EXTENTION);
      initStorageDirectory();
    }
  }
  
  private boolean initStorageDirectory()
  {
    String str = Environment.getExternalStorageState();
    if (str.compareTo("shared") == 0) {
      Toast.makeText(getActivity(), getResources().getString(2131362247), 1).show();
    }
    do
    {
      do
      {
        return false;
        if (str.compareTo("removed") != 0) {
          break;
        }
      } while (!getOrCreateStorageDir(this.INTERNAL_STORAGE_DIRECTORY).exists());
      this.STORAGE_DIRECTORY = this.INTERNAL_STORAGE_DIRECTORY;
      return true;
    } while ((!App.isExternalStorageWritable()) || (!getOrCreateStorageDir(this.STORAGE_DIRECTORY).exists()));
    return true;
  }
  
  private boolean isAudioFile(String paramString)
  {
    String[] arrayOfString2 = paramString.split("\\.");
    String[] arrayOfString1 = null;
    paramString = arrayOfString1;
    if (arrayOfString2 != null)
    {
      paramString = arrayOfString1;
      if (arrayOfString2.length > 1) {
        paramString = arrayOfString2[(arrayOfString2.length - 1)];
      }
    }
    if (paramString == null) {}
    for (;;)
    {
      return false;
      arrayOfString1 = new String[4];
      arrayOfString1[0] = "mp3";
      arrayOfString1[1] = "aac";
      arrayOfString1[2] = "m4r";
      arrayOfString1[3] = "m4a";
      int j = arrayOfString1.length;
      int i = 0;
      while (i < j)
      {
        if (paramString.compareToIgnoreCase(arrayOfString1[i]) == 0) {
          return true;
        }
        i += 1;
      }
    }
  }
  
  private void playFileAtIndex(Integer paramInteger)
  {
    paramInteger = (MediaFile)this.mListOfFiles.get(paramInteger.intValue());
    this.mFilesListAdapter.notifyDataSetChanged();
    Intent localIntent = new Intent("android.intent.action.VIEW");
    try
    {
      if (isAudioFile(paramInteger.getMediaFileDestinationPath())) {
        localIntent.setDataAndType(Uri.fromFile(new File(paramInteger.getMediaFileDestinationPath())), "audio/*");
      }
      for (;;)
      {
        getActivity().startActivity(localIntent);
        return;
        localIntent.setDataAndType(Uri.fromFile(new File(paramInteger.getMediaFileDestinationPath())), "video/*");
      }
      return;
    }
    catch (Exception paramInteger)
    {
      Toast.makeText(getActivity(), getResources().getString(2131362254) + paramInteger.getMessage(), 0).show();
    }
  }
  
  private void setListAdapter()
  {
    this.mFilesListAdapter = new MediaFilesListBaseAdapter();
    this.mFilesListAdapter.registerDataSetObserver(new DataSetObserver()
    {
      public void onChanged()
      {
        DropboxMediaListFragment.this.invalidateOptionsMenu();
        super.onChanged();
      }
    });
    ListView localListView = getListView();
    localListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = (MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(paramAnonymousInt);
        switch (DropboxMediaListFragment.14.$SwitchMap$com$qbiki$modules$dropbox$medialist$MediaFile$MediaFileStatus[paramAnonymousAdapterView.getMediaFileStatus().ordinal()])
        {
        default: 
          return;
        case 1: 
          DropboxMediaListFragment.this.startFileDownloadOrWarning(paramAnonymousInt);
          return;
        case 2: 
          DropboxMediaListFragment.this.cancelDownloadingAtIndex(Integer.valueOf(paramAnonymousInt));
          return;
        }
        DropboxMediaListFragment.this.playFileAtIndex(Integer.valueOf(paramAnonymousInt));
      }
    });
    localListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener()
    {
      public boolean onItemLongClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        paramAnonymousAdapterView = (MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(paramAnonymousInt);
        switch (DropboxMediaListFragment.14.$SwitchMap$com$qbiki$modules$dropbox$medialist$MediaFile$MediaFileStatus[paramAnonymousAdapterView.getMediaFileStatus().ordinal()])
        {
        default: 
          return false;
        }
        DropboxMediaListFragment.this.deleteFileAtIndex(Integer.valueOf(paramAnonymousInt));
        return true;
      }
    });
    setListAdapter(this.mFilesListAdapter);
  }
  
  private void startAllFilesDownloadOrWarning()
  {
    if (this.mListOfFiles == null) {
      return;
    }
    int j = this.mListOfFiles.size();
    ArrayList localArrayList = new ArrayList(0);
    int i = 0;
    while (i < j)
    {
      if (((MediaFile)this.mListOfFiles.get(i)).getMediaFileStatus() == MediaFile.MediaFileStatus.ONLINE) {
        localArrayList.add(Integer.valueOf(i));
      }
      i += 1;
    }
    startDownloadOrWarning(localArrayList);
  }
  
  private void startDownloadForIndexes(ArrayList<Integer> paramArrayList)
  {
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext()) {
      startDownloadForItemAtIndex((Integer)paramArrayList.next());
    }
  }
  
  @SuppressLint({"NewApi"})
  private void startDownloadForItemAtIndex(Integer paramInteger)
  {
    paramInteger = (MediaFile)this.mListOfFiles.get(paramInteger.intValue());
    paramInteger.setMediaFileStatus(MediaFile.MediaFileStatus.DOWNLOADING);
    paramInteger.setMediaFileProgress(0);
    this.mFilesListAdapter.notifyDataSetChanged();
    try
    {
      AsyncTaskListener local3 = new AsyncTaskListener()
      {
        public void asyncTaskFinished(Object paramAnonymousObject)
        {
          paramAnonymousObject = (MediaFile)MediaFile.class.cast(paramAnonymousObject);
          if (paramAnonymousObject.getMediaFileURI() == null)
          {
            Toast.makeText(DropboxMediaListFragment.this.getActivity(), DropboxMediaListFragment.this.getResources().getString(2131362248), 0).show();
            paramAnonymousObject.setMediaFileStatus(MediaFile.MediaFileStatus.LOCAL);
            DropboxMediaListFragment.this.mFilesListAdapter.notifyDataSetChanged();
            return;
          }
          DropboxMediaListFragment.this.startService(paramAnonymousObject);
        }
      };
      if (Build.VERSION.SDK_INT >= 11)
      {
        new GetMediaLinkAsyncTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Object[] { paramInteger, this.mJsonConfig.getString("tokenid"), local3 });
        return;
      }
      new GetMediaLinkAsyncTask().execute(new Object[] { paramInteger, this.mJsonConfig.getString("tokenid"), local3 });
      return;
    }
    catch (Exception paramInteger)
    {
      Log.e(TAG, "ERROR: " + paramInteger.getLocalizedMessage(), paramInteger);
    }
  }
  
  private void startDownloadOrWarning(ArrayList<Integer> paramArrayList)
  {
    long l = calculateTotalFilesSize(paramArrayList);
    this.mFileIndexes = paramArrayList;
    if ((ConnectionUtil.isConnected(getActivity(), 0)) && (l >= 52428800L))
    {
      DialogUtil.showAlertWithPosNeutButtons(getActivity(), this.mResources.getString(2131361916), String.format(this.mResources.getString(2131362255), new Object[] { String.format("%.1f", new Object[] { Float.valueOf((float)l / 1024.0F / 1024.0F) }) }), null, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          DropboxMediaListFragment.this.startDownloadForIndexes(DropboxMediaListFragment.this.mFileIndexes);
        }
      }, this.mResources.getString(2131361920), new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
      }, this.mResources.getString(2131361911));
      return;
    }
    startDownloadForIndexes(this.mFileIndexes);
  }
  
  private void startFileDownloadOrWarning(int paramInt)
  {
    ArrayList localArrayList = new ArrayList(0);
    localArrayList.add(Integer.valueOf(paramInt));
    startDownloadOrWarning(localArrayList);
  }
  
  private void updateProgress(int paramInt1, int paramInt2)
  {
    Object localObject = getProgressBar(paramInt1);
    if (localObject != null)
    {
      ((ProgressBar)localObject).setIndeterminate(false);
      ((ProgressBar)localObject).setProgress(paramInt2);
    }
    localObject = getProgressTitle(paramInt1);
    if (localObject != null) {
      ((TextView)localObject).setText(paramInt2 + "%");
    }
  }
  
  private void updateStatuses(List<MediaFile> paramList)
  {
    if (paramList != null)
    {
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        MediaFile localMediaFile = (MediaFile)paramList.next();
        if (existLocal(localMediaFile)) {
          localMediaFile.setMediaFileStatus(MediaFile.MediaFileStatus.LOCAL);
        }
        localMediaFile.setMediaFileDestinationPath(this.STORAGE_DIRECTORY + localMediaFile.getMediaOriginalFileName());
      }
    }
  }
  
  public void bindService()
  {
    getActivity().bindService(new Intent(getActivity(), DownloadService.class), this.mConnection, 1);
  }
  
  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    initPage();
    if (new File(this.STORAGE_DIRECTORY + this.JSON_FILESLIST_FILE_PATH).exists())
    {
      getFilesListFromLocalFile();
      return;
    }
    getFilesListFromDropbox();
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mResources = paramActivity.getResources();
    super.onAttach(paramActivity);
  }
  
  @SuppressLint({"NewApi"})
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    this.mViewGenerator = new ListItemViews(getActivity());
    this.mListOfFiles = new ArrayList(0);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558408, paramMenu);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100282: 
      getFilesListFromDropbox();
      return true;
    }
    startAllFilesDownloadOrWarning();
    return true;
  }
  
  public void onPause()
  {
    super.onPause();
    unbindService();
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    int k = 1;
    int j = k;
    int i;
    if (this.mListOfFiles != null)
    {
      i = 0;
      j = k;
      if (i < this.mListOfFiles.size())
      {
        if (((MediaFile)this.mListOfFiles.get(i)).getMediaFileStatus() != MediaFile.MediaFileStatus.DOWNLOADING) {
          break label153;
        }
        j = 0;
      }
    }
    if (j == 0) {
      paramMenu.findItem(2131100282).setVisible(false);
    }
    k = 0;
    if (this.mListOfFiles != null)
    {
      i = 0;
      for (;;)
      {
        j = k;
        if (i < this.mListOfFiles.size())
        {
          if (((MediaFile)this.mListOfFiles.get(i)).getMediaFileStatus() == MediaFile.MediaFileStatus.DOWNLOADING) {
            j = 1;
          }
        }
        else
        {
          if (j == 0) {
            break label167;
          }
          paramMenu.findItem(2131100283).setVisible(false);
          super.onPrepareOptionsMenu(paramMenu);
          return;
          label153:
          i += 1;
          break;
        }
        i += 1;
      }
    }
    label167:
    k = 1;
    if (this.mListOfFiles != null)
    {
      i = 0;
      for (;;)
      {
        j = k;
        if (i < this.mListOfFiles.size())
        {
          if (((MediaFile)this.mListOfFiles.get(i)).getMediaFileStatus() != MediaFile.MediaFileStatus.LOCAL) {
            j = 0;
          }
        }
        else
        {
          if (j == 0) {
            break;
          }
          paramMenu.findItem(2131100283).setVisible(false);
          super.onPrepareOptionsMenu(paramMenu);
          return;
        }
        i += 1;
      }
    }
    super.onPrepareOptionsMenu(paramMenu);
  }
  
  public void onResume()
  {
    super.onPause();
    bindService();
  }
  
  public void startService(MediaFile paramMediaFile)
  {
    try
    {
      Intent localIntent = new Intent(getActivity(), DownloadService.class);
      paramMediaFile.setMediaFileStatus(MediaFile.MediaFileStatus.DOWNLOADING);
      localIntent.putExtra("url", paramMediaFile.getMediaFileURI());
      localIntent.putExtra("destination", paramMediaFile.getMediaFileDestinationPath());
      localIntent.putExtra("pos", paramMediaFile.getMediaFilePos());
      localIntent.putExtra("resid", this.RECEIVER_ID);
      localIntent.putExtra("receiver", this.mDownloadReceiver);
      this.mDownloadService.startService(localIntent);
      return;
    }
    catch (Exception paramMediaFile)
    {
      Toast.makeText(getActivity().getApplicationContext(), paramMediaFile.getMessage(), 0).show();
      Log.e(TAG, "Start service error: " + paramMediaFile, paramMediaFile);
    }
  }
  
  public void unbindService()
  {
    getActivity().unbindService(this.mConnection);
  }
  
  private class DownloadReceiver
    extends ResultReceiver
  {
    private String id;
    
    public DownloadReceiver(Handler paramHandler)
    {
      super();
    }
    
    public String getID()
    {
      return this.id;
    }
    
    protected void onReceiveResult(int paramInt, Bundle paramBundle)
    {
      super.onReceiveResult(paramInt, paramBundle);
      int i;
      if (paramInt == 8344)
      {
        paramInt = paramBundle.getInt("progress");
        i = paramBundle.getInt("pos");
        if ((DropboxMediaListFragment.this.mListOfFiles != null) || (DropboxMediaListFragment.this.mListOfFiles.size() - 1 >= i)) {
          break label56;
        }
      }
      label56:
      label230:
      for (;;)
      {
        return;
        paramBundle = (MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(i);
        if (paramInt == 100) {
          paramBundle.setMediaFileStatus(MediaFile.MediaFileStatus.LOCAL);
        }
        for (;;)
        {
          if (paramInt == paramBundle.getMediaFileProgress()) {
            break label230;
          }
          paramBundle.setMediaFileProgress(paramInt);
          DropboxMediaListFragment.this.updateProgress(i, paramInt);
          if (paramInt != 100) {
            break;
          }
          DropboxMediaListFragment.this.mFilesListAdapter.notifyDataSetChanged();
          return;
          if (paramBundle.getMediaFileStatus() != MediaFile.MediaFileStatus.DOWNLOADING)
          {
            paramBundle.setMediaFileStatus(MediaFile.MediaFileStatus.DOWNLOADING);
            DropboxMediaListFragment.this.mFilesListAdapter.notifyDataSetChanged();
          }
          else if (paramInt < 0)
          {
            File localFile = new File(paramBundle.getMediaFileDestinationPath());
            if (localFile.exists()) {
              localFile.delete();
            }
            Toast.makeText(DropboxMediaListFragment.this.getActivity(), DropboxMediaListFragment.this.getResources().getString(2131362249), 0).show();
            paramBundle.setMediaFileStatus(MediaFile.MediaFileStatus.ONLINE);
            DropboxMediaListFragment.this.mFilesListAdapter.notifyDataSetChanged();
          }
        }
      }
    }
    
    public void setID(String paramString)
    {
      this.id = paramString;
    }
  }
  
  public class MediaFilesListBaseAdapter
    extends BaseAdapter
  {
    MediaFile vf;
    
    public MediaFilesListBaseAdapter() {}
    
    public boolean areAllItemsEnabled()
    {
      return true;
    }
    
    public int getCount()
    {
      if (DropboxMediaListFragment.this.mListOfFiles == null) {
        return 0;
      }
      return DropboxMediaListFragment.this.mListOfFiles.size();
    }
    
    public Object getItem(int paramInt)
    {
      return DropboxMediaListFragment.this.mListOfFiles.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public int getItemViewType(int paramInt)
    {
      return ((MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(paramInt)).getMediaFileStatus().ordinal();
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      this.vf = ((MediaFile)DropboxMediaListFragment.this.mListOfFiles.get(paramInt));
      this.vf.setMediaFilePos(paramInt);
      if (this.vf.getMediaFileStatus() == MediaFile.MediaFileStatus.DOWNLOADING)
      {
        paramViewGroup = DropboxMediaListFragment.this.mViewGenerator.getDownloadInProgressView(paramView, this.vf);
        ProgressBar localProgressBar = (ProgressBar)paramViewGroup.findViewById(2131100246);
        localProgressBar.setTag(Integer.valueOf(paramInt));
        TextView localTextView = (TextView)paramViewGroup.findViewById(2131100245);
        paramView = paramViewGroup;
        if (this.vf.getMediaFileProgress() <= 0)
        {
          localProgressBar.setIndeterminate(true);
          localTextView.setText("0%");
        }
      }
      for (paramView = paramViewGroup;; paramView = DropboxMediaListFragment.this.mViewGenerator.getFileView(paramView, this.vf))
      {
        StyleUtil.setTextColor((TextView)paramView.findViewById(2131100244), DropboxMediaListFragment.this.mStyle);
        StyleUtil.setBackground(paramView, DropboxMediaListFragment.this.mStyle);
        return paramView;
      }
    }
    
    public int getViewTypeCount()
    {
      return MediaFile.MediaFileStatus.values().length;
    }
    
    public boolean hasStableIds()
    {
      return true;
    }
    
    public boolean isEnabled(int paramInt)
    {
      return true;
    }
  }
}
