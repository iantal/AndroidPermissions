package com.qbiki.modules.facebookfeeds;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.ContentResolver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore.Images.Media;
import android.provider.MediaStore.Video.Media;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.facebook.android.AsyncFacebookRunner;
import com.facebook.android.BaseRequestListener;
import com.facebook.android.Facebook;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.ImageUtil;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import nl.siegmann.epublib.util.IOUtil;
import org.json.JSONException;
import org.json.JSONObject;

public class PostFeedFragment
  extends SCFragment
{
  public static final String ARG_POST_INFO = "ARG_POST_INFO";
  private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 100;
  private static final int CAPTURE_VIDEO_ACTIVITY_REQUEST_CODE = 200;
  private static int CURRENT_FEED_TYPE = 0;
  private static final boolean DEBUG = false;
  private static final int FEED_TYPE_IMAGE = 1;
  private static final int FEED_TYPE_TEXT = 0;
  private static final int FEED_TYPE_VIDEO = 2;
  private static final int MAX_ALLOWED_VIDEO_LENGTH = 120;
  private static final int MAX_ALLOWED_VIDEO_SIZE = 52428800;
  private static final int MAX_IMAGE_HEIGHT_WIDTH = 1000;
  private static final int MEDIA_TYPE_IMAGE = 1;
  private static final int MEDIA_TYPE_VIDEO = 2;
  private static final int PICK_IMAGE_ACTIVITY_REQUEST_CODE = 300;
  private static final int PICK_VIDEO_ACTIVITY_REQUEST_CODE = 400;
  private static final String TAG = PostFeedFragment.class.getSimpleName();
  private Activity mActivityContext;
  private AsyncFacebookRunner mAsyncRunner;
  private Facebook mFacebook;
  private Uri mFileUri;
  private ImageView mPostImageOrVideoThmb;
  private EditText mPostMessageEditText;
  private ProgressDialog mProgressDialog;
  
  public PostFeedFragment() {}
  
  private boolean checkCameraHardware(Context paramContext)
  {
    return paramContext.getPackageManager().hasSystemFeature("android.hardware.camera");
  }
  
  private void closePage()
  {
    if ((this.mProgressDialog != null) && (this.mProgressDialog.isShowing())) {
      this.mProgressDialog.dismiss();
    }
    App.closePage(this);
  }
  
  private Facebook getFacebook()
  {
    if (this.mFacebook == null) {
      this.mFacebook = FacebookContext.getInstance(this.mActivityContext).getFacebook();
    }
    return this.mFacebook;
  }
  
  private static Uri getOutputMediaFileUri(int paramInt)
  {
    return Uri.fromFile(FacebookFeedsUtils.getOutputMediaFile(paramInt));
  }
  
  private void launchProgressDialog()
  {
    this.mProgressDialog = ProgressDialog.show(getActivity(), getActivity().getString(2131362390), getActivity().getString(2131362391), true);
    this.mProgressDialog.setCancelable(false);
  }
  
  private void postFeedAction()
  {
    String str = this.mPostMessageEditText.getText().toString();
    launchProgressDialog();
    switch (CURRENT_FEED_TYPE)
    {
    default: 
      return;
    case 0: 
      postTextFeedAction(str);
      return;
    case 1: 
      postImageFeedAction(this.mFileUri, str);
      return;
    }
    postVideoFeedAction(this.mFileUri, str);
  }
  
  private void postImageFeedAction(Uri paramUri, String paramString)
  {
    File localFile = new File(paramUri.getPath());
    if ((paramUri == null) || (!localFile.exists()))
    {
      paramUri = this.mActivityContext.getString(2131362389);
      Toast.makeText(this.mActivityContext, paramUri, 1).show();
      Log.d(TAG, paramUri);
      return;
    }
    Bundle localBundle = new Bundle();
    localBundle.putString("message", paramString);
    localBundle.putString("description", paramString);
    paramString = ImageUtil.getScaledExternalBitmap(paramUri.getPath(), 1000, 1000, false);
    if (paramString == null)
    {
      Toast.makeText(this.mActivityContext, "unable to decode image", 1).show();
      Log.d(TAG, "unable to decode image");
      return;
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    paramString.compress(Bitmap.CompressFormat.PNG, 100, localByteArrayOutputStream);
    localBundle.putByteArray(paramUri.getLastPathSegment(), localByteArrayOutputStream.toByteArray());
    postImageFeedRequest(localBundle, localFile);
  }
  
  private void postImageFeedRequest(Bundle paramBundle, final File paramFile)
  {
    Facebook localFacebook = getFacebook();
    if (localFacebook == null)
    {
      showDebugToast("Facebook instance is not initialized");
      return;
    }
    paramBundle.putString("accessToken", localFacebook.getAccessToken());
    this.mAsyncRunner = new AsyncFacebookRunner(localFacebook);
    this.mAsyncRunner.request("/me/photos", paramBundle, "POST", new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject)
      {
        try
        {
          new JSONObject(paramAnonymousString);
          paramFile.delete();
          PostFeedFragment.this.mActivityContext.runOnUiThread(new Runnable()
          {
            public void run()
            {
              PostFeedFragment.this.hideSoftKeyboard(PostFeedFragment.this.mPostMessageEditText);
              PostFeedFragment.this.closePage();
            }
          });
          return;
        }
        catch (JSONException paramAnonymousString)
        {
          Log.e(PostFeedFragment.TAG, "Error parsing response.", paramAnonymousString);
        }
      }
    }, null);
  }
  
  private void postTextFeedAction(String paramString)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("message", paramString);
    postTextFeedRequest(localBundle);
  }
  
  private void postTextFeedRequest(Bundle paramBundle)
  {
    Facebook localFacebook = getFacebook();
    if (localFacebook == null)
    {
      showDebugToast("Facebook instance is not initialized");
      return;
    }
    paramBundle.putString("accessToken", localFacebook.getAccessToken());
    this.mAsyncRunner = new AsyncFacebookRunner(localFacebook);
    this.mAsyncRunner.request("/me/feed", paramBundle, "POST", new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject)
      {
        try
        {
          new JSONObject(paramAnonymousString);
          PostFeedFragment.this.mActivityContext.runOnUiThread(new Runnable()
          {
            public void run()
            {
              PostFeedFragment.this.hideSoftKeyboard(PostFeedFragment.this.mPostMessageEditText);
              PostFeedFragment.this.closePage();
            }
          });
          return;
        }
        catch (JSONException paramAnonymousString)
        {
          Log.e(PostFeedFragment.TAG, "Error parsing response.", paramAnonymousString);
        }
      }
    }, null);
  }
  
  private void postVideoFeedAction(Uri paramUri, String paramString)
  {
    String str = this.mActivityContext.getString(2131362388);
    File localFile = new File(paramUri.getPath());
    if ((paramUri == null) || (!localFile.exists()))
    {
      Toast.makeText(this.mActivityContext, str, 1).show();
      Log.d(TAG, str);
      return;
    }
    Bundle localBundle = new Bundle();
    localBundle.putString("message", paramString);
    try
    {
      paramString = new FileInputStream(new File(paramUri.getPath()));
      localBundle.putByteArray(paramUri.getLastPathSegment(), IOUtil.toByteArray(paramString));
      postVideoFeedRequest(localBundle, localFile);
      return;
    }
    catch (FileNotFoundException paramUri)
    {
      for (;;)
      {
        paramString = str + paramUri.getLocalizedMessage();
        Log.e(TAG, paramString, paramUri);
      }
    }
    catch (IOException paramUri)
    {
      for (;;)
      {
        Log.e(TAG, str, paramUri);
      }
    }
  }
  
  private void postVideoFeedRequest(Bundle paramBundle, final File paramFile)
  {
    Facebook localFacebook = getFacebook();
    if (localFacebook == null) {
      return;
    }
    paramBundle.putString("accessToken", localFacebook.getAccessToken());
    this.mAsyncRunner = new AsyncFacebookRunner(localFacebook);
    this.mAsyncRunner.request("/me/videos", paramBundle, "POST", new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject)
      {
        try
        {
          new JSONObject(paramAnonymousString);
          paramFile.delete();
          PostFeedFragment.this.mActivityContext.runOnUiThread(new Runnable()
          {
            public void run()
            {
              PostFeedFragment.this.hideSoftKeyboard(PostFeedFragment.this.mPostMessageEditText);
              PostFeedFragment.this.closePage();
            }
          });
          return;
        }
        catch (JSONException paramAnonymousString)
        {
          Log.e(PostFeedFragment.TAG, "Error parsing response.", paramAnonymousString);
        }
      }
    }, null);
  }
  
  private void processImageFile(Uri paramUri)
  {
    File localFile = new File(paramUri.getPath());
    new StringBuilder().append("Image saved to:\n").append(paramUri.getPath()).append("Exists: ").append(localFile.exists()).toString();
    if (localFile.exists())
    {
      paramUri = ImageUtil.getScaledExternalBitmap(paramUri.getPath(), 1000, 1000, false);
      if (paramUri != null) {
        this.mPostImageOrVideoThmb.setImageBitmap(paramUri);
      }
    }
  }
  
  private void processVideoFile(Uri paramUri)
  {
    File localFile = new File(paramUri.getPath());
    new StringBuilder().append("Video saved to:\n").append(paramUri.getPath()).append("Exists: ").append(localFile.exists()).toString();
    if (localFile.exists())
    {
      paramUri = ThumbnailUtils.createVideoThumbnail(paramUri.getPath(), 3);
      if (paramUri != null) {
        this.mPostImageOrVideoThmb.setImageBitmap(paramUri);
      }
    }
  }
  
  private void showImageCaptureCamera()
  {
    try
    {
      Intent localIntent = new Intent("android.media.action.IMAGE_CAPTURE");
      this.mFileUri = getOutputMediaFileUri(1);
      localIntent.putExtra("output", this.mFileUri);
      startActivityForResult(localIntent, 100);
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      Log.e(TAG, "Can't get image from camera", localActivityNotFoundException);
    }
  }
  
  private void showImageGallery()
  {
    try
    {
      startActivityForResult(new Intent("android.intent.action.PICK", MediaStore.Images.Media.EXTERNAL_CONTENT_URI), 300);
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      Log.e(TAG, "Can't get show image gallery", localActivityNotFoundException);
    }
  }
  
  private void showMediaPickerOptions()
  {
    final String str1 = this.mActivityContext.getString(2131362383);
    final String str2 = this.mActivityContext.getString(2131362384);
    final String str3 = this.mActivityContext.getString(2131362385);
    final String str4 = this.mActivityContext.getString(2131362386);
    if (checkCameraHardware(this.mActivityContext)) {}
    for (final String[] arrayOfString = { str1, str2, str3, str4 };; arrayOfString = new String[] { str3, str4 })
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(this.mActivityContext);
      localBuilder.setTitle(2131362387).setItems(arrayOfString, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface = arrayOfString[paramAnonymousInt];
          if (str1.equals(paramAnonymousDialogInterface)) {
            PostFeedFragment.this.showImageCaptureCamera();
          }
          do
          {
            return;
            if (str2.equals(paramAnonymousDialogInterface))
            {
              PostFeedFragment.this.showVideoCaptureCamera();
              return;
            }
            if (str3.equals(paramAnonymousDialogInterface))
            {
              PostFeedFragment.this.showImageGallery();
              return;
            }
          } while (!str4.equals(paramAnonymousDialogInterface));
          PostFeedFragment.this.showVideoGallery();
        }
      });
      localBuilder.create().show();
      return;
    }
  }
  
  private void showVideoCaptureCamera()
  {
    try
    {
      Intent localIntent = new Intent("android.media.action.VIDEO_CAPTURE");
      this.mFileUri = getOutputMediaFileUri(2);
      localIntent.putExtra("output", this.mFileUri);
      localIntent.putExtra("android.intent.extra.videoQuality", 1);
      localIntent.putExtra("android.intent.extra.durationLimit", 120);
      localIntent.putExtra("android.intent.extra.sizeLimit", 52428800);
      startActivityForResult(localIntent, 200);
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      Log.e(TAG, "Can't get video from camera", localActivityNotFoundException);
    }
  }
  
  private void showVideoGallery()
  {
    try
    {
      startActivityForResult(new Intent("android.intent.action.PICK", MediaStore.Video.Media.EXTERNAL_CONTENT_URI), 400);
      return;
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      Log.e(TAG, "Can't get show video gallery", localActivityNotFoundException);
    }
  }
  
  public void hideSoftKeyboard(View paramView)
  {
    if (paramView.requestFocus()) {
      ((InputMethodManager)this.mActivityContext.getSystemService("input_method")).hideSoftInputFromWindow(paramView.getWindowToken(), 1);
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (paramInt1 == 100) {
      if (paramInt2 == -1)
      {
        processImageFile(this.mFileUri);
        CURRENT_FEED_TYPE = 1;
      }
    }
    do
    {
      do
      {
        do
        {
          return;
        } while (paramInt2 != 0);
        return;
        if (paramInt1 != 200) {
          break;
        }
        if (paramInt2 == -1)
        {
          processVideoFile(this.mFileUri);
          CURRENT_FEED_TYPE = 2;
          return;
        }
      } while (paramInt2 != 0);
      return;
      if ((paramInt1 == 300) && (paramInt2 == -1) && (paramIntent != null))
      {
        localObject = paramIntent.getData();
        paramIntent = new String[1];
        paramIntent[0] = "_data";
        localObject = this.mActivityContext.getContentResolver().query((Uri)localObject, paramIntent, null, null, null);
        ((Cursor)localObject).moveToFirst();
        this.mFileUri = Uri.fromFile(new File(((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex(paramIntent[0]))));
        processImageFile(this.mFileUri);
        ((Cursor)localObject).close();
        CURRENT_FEED_TYPE = 1;
        return;
      }
    } while ((paramInt1 != 400) || (paramInt2 != -1) || (paramIntent == null));
    Object localObject = paramIntent.getData();
    paramIntent = new String[1];
    paramIntent[0] = "_data";
    localObject = this.mActivityContext.getContentResolver().query((Uri)localObject, paramIntent, null, null, null);
    ((Cursor)localObject).moveToFirst();
    this.mFileUri = Uri.fromFile(new File(((Cursor)localObject).getString(((Cursor)localObject).getColumnIndex(paramIntent[0]))));
    processVideoFile(this.mFileUri);
    ((Cursor)localObject).close();
    CURRENT_FEED_TYPE = 2;
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mActivityContext = paramActivity;
    super.onAttach(paramActivity);
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    paramMenuInflater.inflate(2131558413, paramMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(2130903131, paramViewGroup, false);
    this.mPostImageOrVideoThmb = ((ImageView)paramLayoutInflater.findViewById(2131099919));
    this.mPostMessageEditText = ((EditText)paramLayoutInflater.findViewById(2131099918));
    this.mPostImageOrVideoThmb.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        PostFeedFragment.this.showMediaPickerOptions();
      }
    });
    return paramLayoutInflater;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    postFeedAction();
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    super.onPrepareOptionsMenu(paramMenu);
  }
  
  public void onResume()
  {
    super.onResume();
  }
  
  void showDebugToast(String paramString) {}
}
