package com.qbiki.modules.facebookfeeds;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.SimpleAdapter.ViewBinder;
import android.widget.TextView;
import com.facebook.android.AsyncFacebookRunner;
import com.facebook.android.BaseRequestListener;
import com.facebook.android.Facebook;
import com.google.android.bitmapfun.ImageCache.ImageCacheParams;
import com.google.android.bitmapfun.ImageFetcher;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.AsyncTaskListener;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.ImageUtil;
import com.qbiki.util.StyleUtil;
import java.io.File;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class FeedCommentsFragment
  extends SCFragment
{
  public static final String ARG_POST_INFO = "ARG_POST_INFO";
  private static final boolean DEBUG = false;
  static final String IMAGE_CACHE_DIR = "facebook/profilePictures";
  private static final String TAG = FeedCommentsFragment.class.getSimpleName();
  private Activity mActivityContext;
  private Resources mAndroidResources;
  private AsyncFacebookRunner mAsyncRunner;
  private HashMap<String, HashMap<String, String>> mCashedUserInfo = new HashMap();
  private EditText mCommentEditText;
  private List<Map<String, String>> mCommentsList = new ArrayList();
  private ListView mCommentsListView;
  private Facebook mFacebook;
  private ImageView mFeedImageView;
  private TextView mFeedMessage;
  private String mFileThmbFilePath;
  private int mIconSize = 144;
  private ImageFetcher mImageFetcher;
  private boolean mIsFriend;
  private Button mLikeButton;
  private TextView mLikesAndCommentsInfoTextView;
  private ImageView mPlayOverlay;
  private Bundle mPostInfo;
  private String mPostOwnerUserName;
  private Button mSendCommentButton;
  private Bundle mStyle;
  
  public FeedCommentsFragment() {}
  
  private void getCommentsForPostIDRequest(String paramString)
  {
    this.mAsyncRunner = new AsyncFacebookRunner(getFacebook());
    Bundle localBundle = new Bundle();
    localBundle.putString("accessToken", this.mFacebook.getAccessToken());
    this.mAsyncRunner.request("/" + paramString, localBundle, new BaseRequestListener()
    {
      public void onComplete(final String paramAnonymousString, Object paramAnonymousObject)
      {
        try
        {
          paramAnonymousString = new JSONObject(paramAnonymousString);
          Log.d(FeedCommentsFragment.TAG, "Response for POSTID: " + paramAnonymousString.toString(1));
          FeedCommentsFragment.this.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              FeedCommentsFragment.this.parseCommentRespose(paramAnonymousString);
            }
          });
          return;
        }
        catch (JSONException paramAnonymousString)
        {
          Log.e(FeedCommentsFragment.TAG, "Error parsing response.", paramAnonymousString);
        }
      }
    });
  }
  
  private Facebook getFacebook()
  {
    if (this.mFacebook == null) {
      this.mFacebook = FacebookContext.getInstance(this.mActivityContext).getFacebook();
    }
    return this.mFacebook;
  }
  
  private void hideSoftKeyboard(View paramView)
  {
    if (paramView.requestFocus()) {
      ((InputMethodManager)getActivity().getSystemService("input_method")).hideSoftInputFromWindow(paramView.getWindowToken(), 1);
    }
  }
  
  private void isFriendRequest(String paramString)
  {
    AsyncFacebookRunner localAsyncFacebookRunner = new AsyncFacebookRunner(getFacebook());
    String str = String.format("SELECT name, uid FROM user WHERE uid in (SELECT uid2 FROM friend WHERE uid1 = me()) AND uid=%1$s", new Object[] { paramString });
    Bundle localBundle = new Bundle();
    localBundle.putString("method", "GET");
    localBundle.putString("q", str);
    localBundle.putString("accessToken", this.mFacebook.getAccessToken());
    str = this.mPostInfo.getString("current_user_id");
    if ((str != null) && (str.equals(paramString)))
    {
      this.mIsFriend = true;
      return;
    }
    localAsyncFacebookRunner.request("/fql", localBundle, new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject) {}
    });
  }
  
  private void parseCommentRespose(JSONObject paramJSONObject)
  {
    try
    {
      this.mCommentsList = new ArrayList();
      paramJSONObject = paramJSONObject.getJSONObject("comments").getJSONArray("data");
      int j = paramJSONObject.length();
      int i = 0;
      while (i < j)
      {
        HashMap localHashMap = new HashMap();
        JSONObject localJSONObject = paramJSONObject.getJSONObject(i);
        localHashMap.put("message", localJSONObject.getString("message"));
        localJSONObject = localJSONObject.getJSONObject("from");
        localHashMap.put("from_id", localJSONObject.getString("id"));
        localHashMap.put("from_name", localJSONObject.getString("name"));
        this.mCommentsList.add(localHashMap);
        i += 1;
      }
      setCommentsListAdapter(this.mCommentsList);
      return;
    }
    catch (JSONException paramJSONObject)
    {
      Log.e(TAG, "ERROR parsing comments", paramJSONObject);
    }
  }
  
  private void postCommentRequest(final String paramString1, String paramString2)
  {
    Object localObject = getFacebook();
    if (localObject == null)
    {
      showDebugToast("Facebook instance is not initialized");
      return;
    }
    this.mAsyncRunner = new AsyncFacebookRunner((Facebook)localObject);
    localObject = new Bundle();
    ((Bundle)localObject).putString("message", paramString2);
    ((Bundle)localObject).putString("method", "POST");
    ((Bundle)localObject).putString("accessToken", this.mFacebook.getAccessToken());
    this.mAsyncRunner.request("/" + paramString1 + "/comments", (Bundle)localObject, new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject)
      {
        try
        {
          new JSONObject(paramAnonymousString);
          paramAnonymousString = FeedCommentsFragment.this.getActivity();
          if (paramAnonymousString == null) {
            return;
          }
          paramAnonymousString.runOnUiThread(new Runnable()
          {
            public void run()
            {
              FeedCommentsFragment.this.hideSoftKeyboard(FeedCommentsFragment.this.mCommentEditText);
              FeedCommentsFragment.this.mCommentEditText.setText("");
            }
          });
          FeedCommentsFragment.this.getCommentsForPostIDRequest(paramString1);
          return;
        }
        catch (JSONException paramAnonymousString)
        {
          Log.e(FeedCommentsFragment.TAG, "Error parsing response.", paramAnonymousString);
        }
      }
    });
  }
  
  private void postLikeRequest(String paramString)
  {
    this.mAsyncRunner = new AsyncFacebookRunner(getFacebook());
    Bundle localBundle = new Bundle();
    localBundle.putString("method", "POST");
    localBundle.putString("accessToken", this.mFacebook.getAccessToken());
    this.mAsyncRunner.request("/" + paramString + "/likes", localBundle, new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject)
      {
        paramAnonymousString = FeedCommentsFragment.this.getActivity();
        if (paramAnonymousString == null) {
          return;
        }
        paramAnonymousString.runOnUiThread(new Runnable()
        {
          public void run() {}
        });
      }
    });
  }
  
  private void setCommentsListAdapter(List<Map<String, String>> paramList)
  {
    paramList = new SimpleAdapter(getActivity(), paramList, 2130903103, new String[] { "message", "from_name", "from_id" }, new int[] { 2131099842, 2131099843, 2131099841 });
    paramList.setViewBinder(new CommentsListItemViewBinder(null));
    this.mCommentsListView.setAdapter(paramList);
  }
  
  private void showAddToFriendDialog(String paramString1, final String paramString2)
  {
    paramString1 = String.format(this.mActivityContext.getString(2131362381), new Object[] { paramString1 });
    DialogUtil.showAlert(this.mActivityContext, this.mActivityContext.getString(2131361917), paramString1, new DialogInterface.OnClickListener()new DialogInterface.OnCancelListener
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        App.showPage(String.format("external://https://www.facebook.com/profile.php?id=%1$s", new Object[] { paramString2 }), FeedCommentsFragment.this.mActivityContext);
      }
    }, new DialogInterface.OnCancelListener()
    {
      public void onCancel(DialogInterface paramAnonymousDialogInterface) {}
    });
  }
  
  private void showDebugToast(String paramString) {}
  
  private void showMedia(Bundle paramBundle)
  {
    Intent localIntent = new Intent("android.intent.action.VIEW");
    String str = paramBundle.getString("type");
    if (str == null) {}
    do
    {
      return;
      if (str.equals("photo"))
      {
        localIntent.setDataAndType(Uri.parse("file://" + this.mFileThmbFilePath), URLConnection.guessContentTypeFromName(this.mFileThmbFilePath));
        startActivity(localIntent);
        return;
      }
    } while (!str.equals("video"));
    paramBundle = paramBundle.getString("source");
    localIntent.setDataAndType(Uri.parse(paramBundle), URLConnection.guessContentTypeFromName(paramBundle));
    startActivity(localIntent);
  }
  
  private void updateLikesAndCommentsInfo(Bundle paramBundle)
  {
    long l1 = Long.parseLong(paramBundle.getString("like_count"));
    long l2 = Long.parseLong(paramBundle.getString("comment_count"));
    paramBundle = String.format(this.mAndroidResources.getString(2131362379), new Object[] { Long.valueOf(l1), Long.valueOf(l2) });
    this.mLikesAndCommentsInfoTextView.setText(paramBundle);
  }
  
  private void updateMediaInfo(String paramString, final ImageView paramImageView)
  {
    DownloadMediaFileAsyncTask localDownloadMediaFileAsyncTask = new DownloadMediaFileAsyncTask();
    localDownloadMediaFileAsyncTask.setTaskListener(new AsyncTaskListener()
    {
      public void asyncTaskFinished(final Object paramAnonymousObject)
      {
        if (paramAnonymousObject != null)
        {
          paramAnonymousObject = (String)paramAnonymousObject;
          FeedCommentsFragment.this.getActivity().runOnUiThread(new Runnable()
          {
            public void run()
            {
              Bitmap localBitmap = ImageUtil.getScaledExternalBitmap(paramAnonymousObject, 960, 640, false);
              FeedCommentsFragment.10.this.val$imageView.setImageBitmap(localBitmap);
            }
          });
        }
      }
    });
    this.mFileThmbFilePath = FacebookFeedsUtils.getOutputMediaFile(1).getAbsolutePath();
    localDownloadMediaFileAsyncTask.execute(new String[] { paramString, this.mFileThmbFilePath });
  }
  
  private void updateUserInfoFromCache(String paramString, ImageView paramImageView, TextView paramTextView)
  {
    Object localObject3 = (HashMap)this.mCashedUserInfo.get(paramString);
    Object localObject2 = null;
    Object localObject1 = null;
    if (localObject3 != null)
    {
      String str = (String)((HashMap)localObject3).get("name");
      localObject3 = (String)((HashMap)localObject3).get("pic_big");
      if (paramImageView != null) {
        this.mImageFetcher.loadImage(localObject3, paramImageView);
      }
      localObject1 = localObject3;
      localObject2 = str;
      if (paramTextView != null)
      {
        paramTextView.setText(str);
        localObject2 = str;
        localObject1 = localObject3;
      }
    }
    if (((localObject2 != null) && (localObject1 != null)) || (paramImageView == null)) {
      return;
    }
    paramTextView = new HashMap();
    this.mCashedUserInfo.put(paramString, paramTextView);
    updateUserInfoRequest(paramString, paramImageView, paramTextView, false);
  }
  
  private void updateUserInfoRequest(String paramString, final ImageView paramImageView, final HashMap<String, String> paramHashMap, final boolean paramBoolean)
  {
    AsyncFacebookRunner localAsyncFacebookRunner = new AsyncFacebookRunner(getFacebook());
    paramString = String.format("SELECT uid, name, pic_big FROM user WHERE uid=%1$s", new Object[] { paramString });
    Bundle localBundle = new Bundle();
    localBundle.putString("method", "GET");
    localBundle.putString("q", paramString);
    localBundle.putString("accessToken", this.mFacebook.getAccessToken());
    localAsyncFacebookRunner.request("/fql", localBundle, new BaseRequestListener()
    {
      public void onComplete(String paramAnonymousString, Object paramAnonymousObject) {}
    });
  }
  
  public void onActiveChanged(boolean paramBoolean)
  {
    super.onActiveChanged(paramBoolean);
    if (paramBoolean) {
      if (this.mImageFetcher != null) {
        this.mImageFetcher.setExitTasksEarly(false);
      }
    }
    while (this.mImageFetcher == null) {
      return;
    }
    this.mImageFetcher.setPauseWork(false);
    this.mImageFetcher.setExitTasksEarly(true);
    this.mImageFetcher.flushCache();
  }
  
  public void onAttach(Activity paramActivity)
  {
    this.mAndroidResources = paramActivity.getResources();
    this.mActivityContext = paramActivity;
    super.onAttach(paramActivity);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    ImageCache.ImageCacheParams localImageCacheParams = new ImageCache.ImageCacheParams(getActivity(), "facebook/profilePictures");
    localImageCacheParams.diskCacheEnabled = true;
    localImageCacheParams.compressFormat = Bitmap.CompressFormat.PNG;
    localImageCacheParams.setMemCacheSizePercent(0.05F);
    localImageCacheParams.clearReusableBitmapsOnClearCache = true;
    this.mImageFetcher = new ImageFetcher(getActivity(), this.mIconSize, false);
    this.mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), localImageCacheParams);
    super.onCreate(paramBundle);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramBundle = getArguments();
    if (paramBundle != null) {
      this.mPostInfo = paramBundle.getBundle("ARG_POST_INFO");
    }
    this.mIsFriend = false;
    paramLayoutInflater = paramLayoutInflater.inflate(2130903129, paramViewGroup, false);
    this.mCommentsListView = ((ListView)paramLayoutInflater.findViewById(2131099911));
    this.mLikeButton = ((Button)paramLayoutInflater.findViewById(2131099910));
    this.mLikesAndCommentsInfoTextView = ((TextView)paramLayoutInflater.findViewById(2131099909));
    this.mFeedMessage = ((TextView)paramLayoutInflater.findViewById(2131099908));
    this.mFeedImageView = ((ImageView)paramLayoutInflater.findViewById(2131099906));
    this.mFeedImageView.setImageDrawable(new ColorDrawable(0));
    this.mSendCommentButton = ((Button)paramLayoutInflater.findViewById(2131099913));
    this.mCommentEditText = ((EditText)paramLayoutInflater.findViewById(2131099912));
    this.mPlayOverlay = ((ImageView)paramLayoutInflater.findViewById(2131099907));
    this.mSendCommentButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (!FeedCommentsFragment.this.mIsFriend)
        {
          FeedCommentsFragment.this.showAddToFriendDialog(FeedCommentsFragment.this.mPostOwnerUserName, FeedCommentsFragment.this.mPostInfo.getString("actor_id"));
          return;
        }
        paramAnonymousView = FeedCommentsFragment.this.mCommentEditText.getText().toString();
        FeedCommentsFragment.this.postCommentRequest(FeedCommentsFragment.this.mPostInfo.getString("post_id"), paramAnonymousView);
      }
    });
    this.mLikeButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (!FeedCommentsFragment.this.mIsFriend)
        {
          FeedCommentsFragment.this.showAddToFriendDialog(FeedCommentsFragment.this.mPostOwnerUserName, FeedCommentsFragment.this.mPostInfo.getString("actor_id"));
          return;
        }
        FeedCommentsFragment.this.postLikeRequest(FeedCommentsFragment.this.mPostInfo.getString("post_id"));
      }
    });
    this.mCommentsListView.setOnScrollListener(new AbsListView.OnScrollListener()
    {
      public void onScroll(AbsListView paramAnonymousAbsListView, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onScrollStateChanged(AbsListView paramAnonymousAbsListView, int paramAnonymousInt)
      {
        if (paramAnonymousInt == 2) {}
        for (boolean bool = true;; bool = false)
        {
          FeedCommentsFragment.this.mImageFetcher.setPauseWork(bool);
          return;
        }
      }
    });
    this.mFeedImageView.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        try
        {
          FeedCommentsFragment.this.showMedia(FeedCommentsFragment.this.mPostInfo);
          return;
        }
        catch (ActivityNotFoundException paramAnonymousView) {}
      }
    });
    this.mFeedMessage.setText(this.mPostInfo.getString("message"));
    paramViewGroup = this.mPostInfo.getString("type");
    if (paramViewGroup != null)
    {
      if (!paramViewGroup.equals("photo")) {
        break label340;
      }
      updateMediaInfo(this.mPostInfo.getString("source"), this.mFeedImageView);
      this.mPlayOverlay.setVisibility(8);
    }
    for (;;)
    {
      if (paramBundle != null)
      {
        this.mStyle = paramBundle.getBundle("PAGE_STYLE");
        StyleUtil.setBackground(this.mCommentsListView, this.mStyle);
        StyleUtil.setTextColor(this.mFeedMessage, this.mStyle);
        StyleUtil.setTextColor(this.mLikesAndCommentsInfoTextView, this.mStyle);
      }
      return paramLayoutInflater;
      label340:
      if (this.mPostInfo.getString("type").equals("video"))
      {
        updateMediaInfo(this.mPostInfo.getString("thmb_src"), this.mFeedImageView);
        this.mPlayOverlay.setVisibility(0);
      }
      else
      {
        this.mFeedImageView.setVisibility(8);
        this.mPlayOverlay.setVisibility(8);
      }
    }
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.mImageFetcher != null) {
      this.mImageFetcher.closeCache();
    }
  }
  
  public void onResume()
  {
    super.onResume();
    updateLikesAndCommentsInfo(this.mPostInfo);
    isFriendRequest(this.mPostInfo.getString("actor_id"));
    updateUserInfoRequest(this.mPostInfo.getString("actor_id"), null, null, true);
    getCommentsForPostIDRequest(this.mPostInfo.getString("post_id"));
  }
  
  private class CommentsListItemViewBinder
    implements SimpleAdapter.ViewBinder
  {
    private CommentsListItemViewBinder() {}
    
    public boolean setViewValue(View paramView, Object paramObject, String paramString)
    {
      switch (paramView.getId())
      {
      default: 
        return false;
      }
      FeedCommentsFragment.this.updateUserInfoFromCache(paramString, (ImageView)paramView, null);
      return true;
    }
  }
}
