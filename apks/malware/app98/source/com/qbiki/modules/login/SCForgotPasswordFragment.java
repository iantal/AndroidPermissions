package com.qbiki.modules.login;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.HTTPUtil;
import com.qbiki.widget.LoadingView;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONObject;

public class SCForgotPasswordFragment
  extends SCFragment
{
  private static final String FORGOT_PASSWORD_SUBMIT_URL = "http://" + App.serverHostName + "/sendforgotpassword.ashx";
  private static final boolean LOGV = false;
  private static final String TAG = "SCForgotPasswordFragment";
  private EditText emailET = null;
  private Button getPasswordBtn = null;
  private View mView = null;
  private String pageId = null;
  private LoadingView progressContainer;
  protected TextView responseTV = null;
  
  public SCForgotPasswordFragment() {}
  
  private void restorePasswordAction()
  {
    this.responseTV.setText("");
    String str = this.emailET.getText().toString();
    ((InputMethodManager)getActivity().getSystemService("input_method")).hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), 2);
    RestoreCredentialsHandler localRestoreCredentialsHandler = new RestoreCredentialsHandler(null);
    localRestoreCredentialsHandler.setLoadingMessage("Retrieving credentials ...");
    localRestoreCredentialsHandler.execute(new String[] { str });
  }
  
  protected void init()
  {
    Bundle localBundle = getArguments();
    if (localBundle != null) {
      this.pageId = localBundle.getString("pageId");
    }
    this.emailET = ((EditText)this.mView.findViewById(2131099993));
    this.responseTV = ((TextView)this.mView.findViewById(2131099995));
    this.progressContainer = ((LoadingView)this.mView.findViewById(2131099996));
    this.getPasswordBtn = ((Button)this.mView.findViewById(2131099994));
    this.getPasswordBtn.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        SCForgotPasswordFragment.this.restorePasswordAction();
      }
    });
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mView = paramLayoutInflater.inflate(2130903157, paramViewGroup, false);
    init();
    return this.mView;
  }
  
  private class RestoreCredentialsHandler
    extends AsyncTask<String, Void, String>
  {
    private String loadingMessage;
    
    private RestoreCredentialsHandler() {}
    
    protected String doInBackground(String... paramVarArgs)
    {
      try
      {
        paramVarArgs = sendRestoreRequest(paramVarArgs[0]);
        if (paramVarArgs != null)
        {
          paramVarArgs = new JSONObject(paramVarArgs);
          if (paramVarArgs.getString("resp").equals("success")) {
            return "1_" + paramVarArgs.getString("message").toString();
          }
          paramVarArgs = "0_" + paramVarArgs.getString("error").toString();
          return paramVarArgs;
        }
      }
      catch (Exception paramVarArgs) {}
      return null;
    }
    
    protected void onPostExecute(String paramString)
    {
      super.onPostExecute(paramString);
      SCForgotPasswordFragment.this.progressContainer.setVisibility(8);
      if (paramString != null)
      {
        if (!paramString.startsWith("1_")) {
          break label60;
        }
        SCForgotPasswordFragment.this.responseTV.setTextColor(-16711936);
      }
      for (;;)
      {
        paramString = paramString.substring(2);
        SCForgotPasswordFragment.this.responseTV.setText(paramString);
        return;
        label60:
        SCForgotPasswordFragment.this.responseTV.setTextColor(-65536);
      }
    }
    
    protected void onPreExecute()
    {
      SCForgotPasswordFragment.this.progressContainer.setVisibility(0);
      SCForgotPasswordFragment.this.progressContainer.setLoadingText(this.loadingMessage);
    }
    
    protected String sendRestoreRequest(String paramString)
      throws Exception
    {
      try
      {
        HashMap localHashMap = new HashMap();
        localHashMap.put("sendtoaddress", paramString);
        localHashMap.put("username", App.username);
        localHashMap.put("appid", App.appId);
        localHashMap.put("publisherid", App.publisherId);
        localHashMap.put("pageid", SCForgotPasswordFragment.this.pageId);
        paramString = HTTPUtil.performPostRequest(SCForgotPasswordFragment.FORGOT_PASSWORD_SUBMIT_URL, localHashMap);
        return paramString;
      }
      catch (Exception paramString)
      {
        throw paramString;
      }
    }
    
    public void setLoadingMessage(String paramString)
    {
      this.loadingMessage = paramString;
    }
  }
}
