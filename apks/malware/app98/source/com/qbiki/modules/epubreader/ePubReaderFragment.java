package com.qbiki.modules.epubreader;

import android.app.ProgressDialog;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.animation.AnimationUtils;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.TextView;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.SCFragment;
import com.qbiki.util.GestureFilter;
import com.qbiki.util.GestureFilter.SimpleGestureListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import nl.siegmann.epublib.domain.Book;
import nl.siegmann.epublib.domain.Resource;
import nl.siegmann.epublib.domain.TOCReference;
import nl.siegmann.epublib.domain.TableOfContents;
import nl.siegmann.epublib.epub.EpubReader;

public class ePubReaderFragment
  extends SCFragment
  implements GestureFilter.SimpleGestureListener
{
  private MenuItem backToReadingMenuItem;
  private String baseUrl = "";
  Book book = null;
  private MenuItem contentsMenuItem;
  private int currentIndex = -13;
  private GestureFilter detector;
  private ProgressDialog dialog = null;
  private ePubLoadTask eLoadTask;
  String ePubFilePath = "";
  String ePubResourcesPath = "";
  private boolean fullscreen = false;
  private LinearLayout fview = null;
  private ArrayList<Guide> guideList = new ArrayList();
  private boolean hasCoverImage = false;
  private int lastIndex = -13;
  private int maxIndex = 0;
  
  public ePubReaderFragment() {}
  
  private int findIndexForHref(String paramString)
  {
    int i = 0;
    Iterator localIterator = this.book.getContents().iterator();
    while (localIterator.hasNext())
    {
      Resource localResource = (Resource)localIterator.next();
      if (localResource.getHref().equals(paramString))
      {
        localResource.getId();
        return i;
      }
      i += 1;
    }
    return 0;
  }
  
  private void logTableOfContents(List<TOCReference> paramList, int paramInt)
  {
    if (paramList == null) {}
    for (;;)
    {
      return;
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        TOCReference localTOCReference = (TOCReference)paramList.next();
        try
        {
          StringBuilder localStringBuilder = new StringBuilder();
          int i = 0;
          while (i < paramInt)
          {
            localStringBuilder.append("\t");
            i += 1;
          }
          localStringBuilder.append(localTOCReference.getTitle());
          String str = localTOCReference.getCompleteHref();
          this.guideList.add(new Guide(localStringBuilder.toString(), str, localTOCReference.getResourceId()));
          logTableOfContents(localTOCReference.getChildren(), paramInt + 1);
        }
        catch (NullPointerException localNullPointerException)
        {
          Log.d("ePubReader", "logTableOfContents", localNullPointerException);
        }
      }
    }
  }
  
  private String rpath(String paramString)
  {
    int i = paramString.lastIndexOf("/");
    if (i > -1) {
      return paramString.substring(0, i);
    }
    return "";
  }
  
  private void setContentView(View paramView)
  {
    LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, -1);
    this.fview.removeAllViews();
    paramView.setOnTouchListener(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        return ePubReaderFragment.this.detector.onTouchEvent(paramAnonymousMotionEvent);
      }
    });
    this.fview.addView(paramView, localLayoutParams);
  }
  
  public boolean deleteDirectory(File paramFile)
  {
    if (paramFile.exists())
    {
      File[] arrayOfFile = paramFile.listFiles();
      if (arrayOfFile == null) {
        return true;
      }
      int j = arrayOfFile.length;
      int i = 0;
      if (i < j)
      {
        File localFile = arrayOfFile[i];
        if (localFile.isDirectory()) {
          deleteDirectory(localFile);
        }
        for (;;)
        {
          i += 1;
          break;
          localFile.delete();
        }
      }
    }
    return paramFile.delete();
  }
  
  public View getViewForIndex(int paramInt)
  {
    Object localObject = new View(getActivity());
    if (paramInt < 0)
    {
      if ((paramInt == -1) && (this.hasCoverImage))
      {
        localObject = new ImageView(getActivity());
        try
        {
          Bitmap localBitmap = BitmapFactory.decodeStream(this.book.getCoverImage().getInputStream());
          if (localBitmap != null) {
            ((ImageView)localObject).setImageBitmap(localBitmap);
          }
        }
        catch (Exception localException1)
        {
          for (;;)
          {
            Log.d("ePubReader", "Exception", localException1);
          }
        }
        ((ImageView)localObject).setClickable(true);
        ((ImageView)localObject).setOnTouchListener(new View.OnTouchListener()
        {
          public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
          {
            return ePubReaderFragment.this.detector.onTouchEvent(paramAnonymousMotionEvent);
          }
        });
        return localObject;
      }
    }
    else
    {
      if (paramInt == 0)
      {
        localObject = new ListView(getActivity());
        ((ListView)localObject).setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
          public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
          {
            ePubReaderFragment.this.goToPageFromGuide(paramAnonymousInt);
          }
        });
        ((ListView)localObject).setAdapter(new GuideAdapter());
        return localObject;
      }
      localObject = new WebView(getActivity());
      try
      {
        String str = new String(((Resource)this.book.getContents().get(paramInt - 1)).getData());
        ((WebView)localObject).loadDataWithBaseURL(this.baseUrl + rpath(((Resource)this.book.getContents().get(paramInt - 1)).getHref()) + "/", str, "text/html", "UTF-8", null);
        return localObject;
      }
      catch (Exception localException2)
      {
        for (;;)
        {
          Log.d("ePubReader", "exception", localException2);
        }
      }
    }
    this.currentIndex = paramInt;
    return localObject;
  }
  
  public void goToPage(int paramInt)
  {
    int i = this.currentIndex;
    this.currentIndex = paramInt;
    if (this.currentIndex < 0) {
      if (this.hasCoverImage) {
        this.currentIndex = -1;
      }
    }
    while (this.currentIndex == i)
    {
      return;
      this.currentIndex = 0;
      continue;
      if (this.currentIndex > this.maxIndex) {
        this.currentIndex = this.maxIndex;
      }
      if (this.currentIndex < 0) {
        this.currentIndex = 0;
      }
    }
    if (this.currentIndex > 0) {
      this.lastIndex = this.currentIndex;
    }
    View localView = getViewForIndex(this.currentIndex);
    localView.startAnimation(AnimationUtils.loadAnimation(getActivity(), 17432576));
    setContentView(localView);
    invalidateOptionsMenu();
  }
  
  public void goToPageFromGuide(int paramInt)
  {
    this.currentIndex = findIndexForHref(((Guide)this.guideList.get(paramInt)).getHref());
    View localView = getViewForIndex(this.currentIndex + 1);
    localView.startAnimation(AnimationUtils.loadAnimation(getActivity(), 17432576));
    setContentView(localView);
    if (this.currentIndex > 0) {
      this.lastIndex = this.currentIndex;
    }
    this.currentIndex += 1;
    invalidateOptionsMenu();
  }
  
  protected void init()
  {
    Object localObject = getArguments();
    if (localObject != null)
    {
      localObject = ((Bundle)localObject).getString("epubfilepath");
      if (localObject != null) {
        this.ePubFilePath = ((String)localObject);
      }
    }
    this.dialog = new ProgressDialog(getActivity());
    this.dialog.setMessage("Loading. Please wait...");
    this.dialog.setCancelable(false);
    this.eLoadTask = new ePubLoadTask(null);
    this.eLoadTask.execute(new String[] { this.ePubFilePath });
  }
  
  public void onCreateOptionsMenu(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    paramMenuInflater.inflate(2131558410, paramMenu);
    super.onCreateOptionsMenu(paramMenu, paramMenuInflater);
    this.contentsMenuItem = paramMenu.findItem(2131100287);
    this.backToReadingMenuItem = paramMenu.findItem(2131100288);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.fview = new LinearLayout(getActivity());
    init();
    return this.fview;
  }
  
  public void onDestroy()
  {
    if (this.eLoadTask != null) {
      this.eLoadTask.cancel(true);
    }
    deleteDirectory(new File(this.ePubResourcesPath));
    super.onDestroy();
  }
  
  public void onDoubleTap()
  {
    if (!this.fullscreen) {}
    for (boolean bool = true;; bool = false)
    {
      this.fullscreen = bool;
      if (!this.fullscreen) {
        break;
      }
      getActivity().getWindow().clearFlags(2048);
      getActivity().getWindow().addFlags(1024);
      return;
    }
    getActivity().getWindow().clearFlags(1024);
    getActivity().getWindow().addFlags(2048);
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    case 2131100287: 
      goToPage(0);
      return true;
    }
    goToPage(this.lastIndex);
    return true;
  }
  
  public void onPrepareOptionsMenu(Menu paramMenu)
  {
    super.onPrepareOptionsMenu(paramMenu);
    boolean bool3 = false;
    boolean bool2 = false;
    boolean bool1;
    if ((this.currentIndex == 0) && (this.lastIndex > 0)) {
      bool1 = true;
    }
    for (;;)
    {
      if (this.backToReadingMenuItem != null)
      {
        this.backToReadingMenuItem.setVisible(bool1);
        this.backToReadingMenuItem.setEnabled(bool1);
      }
      if (this.contentsMenuItem != null)
      {
        this.contentsMenuItem.setVisible(bool2);
        this.contentsMenuItem.setEnabled(bool2);
      }
      return;
      bool1 = bool3;
      if (this.lastIndex > 0)
      {
        bool2 = true;
        bool1 = bool3;
      }
    }
  }
  
  public void onSwipe(int paramInt)
  {
    if (this.currentIndex == 0) {
      return;
    }
    switch (paramInt)
    {
    case 2: 
    default: 
      return;
    case 3: 
      goToPage(this.currentIndex + 1);
      return;
    }
    goToPage(this.currentIndex - 1);
  }
  
  private class Guide
  {
    private String href = "";
    private String title = "";
    
    public Guide(String paramString1, String paramString2, String paramString3)
    {
      setTitle(paramString1);
      setHref(paramString2);
    }
    
    public String getHref()
    {
      return this.href;
    }
    
    public String getTitle()
    {
      return this.title;
    }
    
    public void setHref(String paramString)
    {
      this.href = paramString;
    }
    
    public void setTitle(String paramString)
    {
      this.title = paramString;
    }
  }
  
  public class GuideAdapter
    extends BaseAdapter
  {
    public GuideAdapter() {}
    
    public int getCount()
    {
      return ePubReaderFragment.this.guideList.size();
    }
    
    public Object getItem(int paramInt)
    {
      return ePubReaderFragment.this.guideList.get(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      paramViewGroup = (LinearLayout)paramView;
      if (paramViewGroup == null)
      {
        paramViewGroup = new LinearLayout(ePubReaderFragment.this.getActivity());
        TextView localTextView = new TextView(ePubReaderFragment.this.getActivity());
        localTextView.setGravity(16);
        localTextView.setTextSize(20.0F);
        localTextView.setMinHeight(50);
        paramViewGroup.addView(localTextView);
        paramView = new ePubReaderFragment.RowHolder();
        paramView.title = localTextView;
        paramViewGroup.setTag(paramView);
      }
      for (;;)
      {
        paramView.title.setText(((ePubReaderFragment.Guide)ePubReaderFragment.this.guideList.get(paramInt)).getTitle());
        return paramViewGroup;
        paramView = (ePubReaderFragment.RowHolder)paramViewGroup.getTag();
      }
    }
  }
  
  static class RowHolder
  {
    TextView title;
    
    RowHolder() {}
  }
  
  private class ePubLoadTask
    extends AsyncTask<String, Integer, Long>
  {
    private ePubLoadTask() {}
    
    protected Long doInBackground(String... paramVarArgs)
    {
      ePubReaderFragment.this.getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          ePubReaderFragment.this.dialog.show();
        }
      });
      try
      {
        paramVarArgs = new File(ePubReaderFragment.this.ePubFilePath).getName();
        paramVarArgs = paramVarArgs.substring(0, paramVarArgs.lastIndexOf("."));
        ePubReaderFragment.this.ePubResourcesPath = (App.getAppProtectedStoragePath() + "/ePubReader/" + paramVarArgs);
        new Decompress(App.getResourceOrUrlStream(ePubReaderFragment.this.ePubFilePath), ePubReaderFragment.this.ePubResourcesPath + "/").unzip();
        paramVarArgs = App.getResourceOrUrlStream(ePubReaderFragment.this.ePubFilePath);
        ePubReaderFragment.this.book = new EpubReader().readEpub(paramVarArgs);
        paramVarArgs = ePubReaderFragment.this.rpath(ePubReaderFragment.this.book.getOpfResource().getHref());
        if (new File(ePubReaderFragment.this.ePubResourcesPath + "/" + paramVarArgs + "/").exists())
        {
          ePubReaderFragment.access$402(ePubReaderFragment.this, ePubReaderFragment.this.ePubResourcesPath + "/" + paramVarArgs + "/");
          ePubReaderFragment.access$402(ePubReaderFragment.this, "file://" + ePubReaderFragment.this.baseUrl);
        }
      }
      catch (IOException paramVarArgs)
      {
        try
        {
          for (;;)
          {
            if (BitmapFactory.decodeStream(ePubReaderFragment.this.book.getCoverImage().getInputStream()) != null) {
              ePubReaderFragment.access$502(ePubReaderFragment.this, true);
            }
            ePubReaderFragment.this.logTableOfContents(ePubReaderFragment.this.book.getTableOfContents().getTocReferences(), 0);
            ePubReaderFragment.access$708(ePubReaderFragment.this);
            break label493;
            if (!new File(ePubReaderFragment.this.ePubResourcesPath + "/OEBPS/").exists()) {
              break;
            }
            ePubReaderFragment.access$402(ePubReaderFragment.this, ePubReaderFragment.this.ePubResourcesPath + "/OEBPS/");
          }
          paramVarArgs = paramVarArgs;
          Log.d("ePubReader", "Exception", paramVarArgs);
          break label493;
          ePubReaderFragment.access$402(ePubReaderFragment.this, ePubReaderFragment.this.ePubResourcesPath + "/OPS/");
        }
        catch (Exception paramVarArgs)
        {
          for (;;)
          {
            Log.d("ePubReader", "Exception", paramVarArgs);
          }
        }
      }
      label493:
      return null;
    }
    
    protected void onPostExecute(Long paramLong)
    {
      ePubReaderFragment.this.getActivity().runOnUiThread(new Runnable()
      {
        public void run()
        {
          ePubReaderFragment.this.dialog.dismiss();
          if (ePubReaderFragment.this.book != null)
          {
            ePubReaderFragment.access$002(ePubReaderFragment.this, new GestureFilter(ePubReaderFragment.this.getActivity(), ePubReaderFragment.this));
            ePubReaderFragment.this.detector.setMode(0);
            ePubReaderFragment.access$702(ePubReaderFragment.this, ePubReaderFragment.this.book.getContents().size());
            ePubReaderFragment.this.goToPage(-1);
          }
        }
      });
    }
    
    protected void onProgressUpdate(Integer... paramVarArgs) {}
  }
}
