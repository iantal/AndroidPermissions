package pdftron.Filters;

import pdftron.Common.PDFNetException;

public class FilterReader
{
  long a;
  private Filter b;
  
  public FilterReader()
    throws PDFNetException
  {
    this.a = FilterReaderCreate();
    this.b = null;
  }
  
  public FilterReader(Filter paramFilter)
    throws PDFNetException
  {
    this.a = FilterReaderCreate(paramFilter.impl);
    this.b = paramFilter;
  }
  
  private static native void AttachFilter(long paramLong1, long paramLong2);
  
  private static native long Count(long paramLong);
  
  private static native void Destroy(long paramLong);
  
  private static native long FilterReaderCreate();
  
  private static native long FilterReaderCreate(long paramLong);
  
  private static native void Flush(long paramLong);
  
  private static native void FlushAll(long paramLong);
  
  private static native int Get(long paramLong);
  
  private static native int Peek(long paramLong);
  
  private static native long Read(long paramLong, byte[] paramArrayOfByte);
  
  private static native void Seek(long paramLong1, long paramLong2, int paramInt);
  
  private static native long Tell(long paramLong);
  
  public long __GetHandle()
  {
    return this.a;
  }
  
  public void attachFilter(Filter paramFilter)
    throws PDFNetException
  {
    this.b = paramFilter;
    AttachFilter(this.a, paramFilter.impl);
  }
  
  public long count()
    throws PDFNetException
  {
    return Count(this.a);
  }
  
  public void destroy()
    throws PDFNetException
  {
    if (this.a != 0L)
    {
      Destroy(this.a);
      this.a = 0L;
    }
  }
  
  protected void finalize()
    throws PDFNetException
  {
    destroy();
  }
  
  public void flush()
    throws PDFNetException
  {
    Flush(this.a);
  }
  
  public void flushAll()
    throws PDFNetException
  {
    FlushAll(this.a);
  }
  
  public int get()
    throws PDFNetException
  {
    return Get(this.a);
  }
  
  public Filter getAttachedFilter()
    throws PDFNetException
  {
    return this.b;
  }
  
  public int peek()
    throws PDFNetException
  {
    return Peek(this.a);
  }
  
  public long read(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return Read(this.a, paramArrayOfByte);
  }
  
  public void seek(long paramLong, int paramInt)
    throws PDFNetException
  {
    Seek(this.a, paramLong, paramInt);
  }
  
  public long tell()
    throws PDFNetException
  {
    return Tell(this.a);
  }
}
