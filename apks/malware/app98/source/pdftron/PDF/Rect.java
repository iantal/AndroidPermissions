package pdftron.PDF;

import pdftron.Common.PDFNetException;
import pdftron.SDF.Obj;

public class Rect
{
  long a;
  
  public Rect()
    throws PDFNetException
  {
    this.a = RectCreate(0.0D, 0.0D, 0.0D, 0.0D);
  }
  
  public Rect(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
    throws PDFNetException
  {
    this.a = RectCreate(paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  Rect(long paramLong)
  {
    this.a = paramLong;
  }
  
  public Rect(Obj paramObj)
    throws PDFNetException
  {
    this.a = RectCreate(paramObj.__GetHandle());
  }
  
  private static native void Attach(long paramLong1, long paramLong2);
  
  private static native boolean Contains(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native void Destroy(long paramLong);
  
  private static native boolean Equals(long paramLong1, long paramLong2);
  
  private static native double[] Get(long paramLong);
  
  private static native double GetX1(long paramLong);
  
  private static native double GetX2(long paramLong);
  
  private static native double GetY1(long paramLong);
  
  private static native double GetY2(long paramLong);
  
  private static native int HashCode(long paramLong);
  
  private static native double Height(long paramLong);
  
  private static native boolean IntersectRect(long paramLong1, long paramLong2, long paramLong3);
  
  private static native void Normalize(long paramLong);
  
  private static native long RectCreate(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4);
  
  private static native long RectCreate(long paramLong);
  
  private static native void Set(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4);
  
  private static native void SetX1(long paramLong, double paramDouble);
  
  private static native void SetX2(long paramLong, double paramDouble);
  
  private static native void SetY1(long paramLong, double paramDouble);
  
  private static native void SetY2(long paramLong, double paramDouble);
  
  private static native boolean Update(long paramLong1, long paramLong2);
  
  private static native double Width(long paramLong);
  
  public static Rect __Create(long paramLong)
  {
    if (paramLong == 0L) {
      return null;
    }
    return new Rect(paramLong);
  }
  
  public long __GetHandle()
  {
    return this.a;
  }
  
  public void attach(Obj paramObj)
    throws PDFNetException
  {
    Attach(this.a, paramObj.__GetHandle());
  }
  
  public boolean contains(double paramDouble1, double paramDouble2)
    throws PDFNetException
  {
    return Contains(this.a, paramDouble1, paramDouble2);
  }
  
  public void destroy()
  {
    if (this.a != 0L)
    {
      Destroy(this.a);
      this.a = 0L;
    }
  }
  
  public boolean equals(Object paramObject)
  {
    if ((paramObject != null) && (paramObject.getClass().equals(getClass()))) {
      return Equals(this.a, ((Rect)paramObject).a);
    }
    return false;
  }
  
  protected void finalize()
    throws Throwable
  {
    destroy();
  }
  
  public double[] get()
    throws PDFNetException
  {
    return Get(this.a);
  }
  
  public double getHeight()
    throws PDFNetException
  {
    return Height(this.a);
  }
  
  public double getWidth()
    throws PDFNetException
  {
    return Width(this.a);
  }
  
  public double getX1()
    throws PDFNetException
  {
    return GetX1(this.a);
  }
  
  public double getX2()
    throws PDFNetException
  {
    return GetX2(this.a);
  }
  
  public double getY1()
    throws PDFNetException
  {
    return GetY1(this.a);
  }
  
  public double getY2()
    throws PDFNetException
  {
    return GetY2(this.a);
  }
  
  public int hashCode()
  {
    return HashCode(this.a);
  }
  
  public boolean intersectRect(Rect paramRect1, Rect paramRect2)
    throws PDFNetException
  {
    return IntersectRect(this.a, paramRect1.a, paramRect2.a);
  }
  
  public void normalize()
    throws PDFNetException
  {
    Normalize(this.a);
  }
  
  public void set(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
    throws PDFNetException
  {
    Set(this.a, paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  public void setX1(double paramDouble)
    throws PDFNetException
  {
    SetX1(this.a, paramDouble);
  }
  
  public void setX2(double paramDouble)
    throws PDFNetException
  {
    SetX2(this.a, paramDouble);
  }
  
  public void setY1(double paramDouble)
    throws PDFNetException
  {
    SetY1(this.a, paramDouble);
  }
  
  public void setY2(double paramDouble)
    throws PDFNetException
  {
    SetY2(this.a, paramDouble);
  }
  
  public boolean update()
    throws PDFNetException
  {
    return Update(this.a, 0L);
  }
  
  public boolean update(Obj paramObj)
    throws PDFNetException
  {
    return Update(this.a, paramObj.__GetHandle());
  }
}
