package pdftron.PDF;

import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;

public class ColorSpace
{
  public static final int e_cal_gray = 3;
  public static final int e_cal_rgb = 4;
  public static final int e_device_cmyk = 2;
  public static final int e_device_gray = 0;
  public static final int e_device_n = 10;
  public static final int e_device_rgb = 1;
  public static final int e_icc = 6;
  public static final int e_indexed = 7;
  public static final int e_lab = 5;
  public static final int e_null = 11;
  public static final int e_pattern = 8;
  public static final int e_separation = 9;
  long a;
  private Object b;
  
  private ColorSpace(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public ColorSpace(Obj paramObj)
  {
    this.a = paramObj.__GetHandle();
    this.b = paramObj.__GetRefHandle();
  }
  
  private static native long Convert2CMYK(long paramLong1, long paramLong2);
  
  private static native long Convert2Gray(long paramLong1, long paramLong2);
  
  private static native long Convert2RGB(long paramLong1, long paramLong2);
  
  private static native long CreateDeviceCMYKL();
  
  private static native long CreateDeviceGrayL();
  
  private static native long CreateDeviceRGBL();
  
  private static native long CreateICCFromBuffer(long paramLong, byte[] paramArrayOfByte);
  
  private static native long CreateICCFromFile(long paramLong, String paramString);
  
  private static native long CreateICCFromFilter(long paramLong1, long paramLong2);
  
  private static native long CreatePatternL();
  
  private static native long GetAlternateColorSpace(long paramLong);
  
  private static native long GetBaseColor(long paramLong, byte paramByte);
  
  private static native long GetBaseColorSpace(long paramLong);
  
  private static native int GetComponentNum(int paramInt, long paramLong);
  
  private static native int GetComponentNum(long paramLong);
  
  private static native byte[] GetLookupTable(long paramLong);
  
  private static native long GetTintFunction(long paramLong);
  
  private static native int GetType(long paramLong);
  
  private static native int GetTypeStatic(long paramLong);
  
  private static native void InitColor(long paramLong1, long paramLong2);
  
  private static native void InitComponentRanges(long paramLong, double[] paramArrayOfDouble1, double[] paramArrayOfDouble2);
  
  private static native boolean IsAll(long paramLong);
  
  private static native boolean IsNone(long paramLong);
  
  public static ColorSpace __Create(long paramLong, Object paramObject)
  {
    if (paramLong == 0L) {
      return null;
    }
    return new ColorSpace(paramLong, paramObject);
  }
  
  public static ColorSpace createDeviceCMYK()
    throws PDFNetException
  {
    return __Create(CreateDeviceCMYKL(), null);
  }
  
  public static ColorSpace createDeviceGray()
    throws PDFNetException
  {
    return __Create(CreateDeviceGrayL(), null);
  }
  
  public static ColorSpace createDeviceRGB()
    throws PDFNetException
  {
    return __Create(CreateDeviceRGBL(), null);
  }
  
  public static ColorSpace createICCFromBuffer(Doc paramDoc, byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return __Create(CreateICCFromBuffer(paramDoc.__GetHandle(), paramArrayOfByte), null);
  }
  
  public static ColorSpace createICCFromFile(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return __Create(CreateICCFromFile(paramDoc.__GetHandle(), paramString), null);
  }
  
  public static ColorSpace createICCFromFilter(Doc paramDoc, Filter paramFilter)
    throws PDFNetException
  {
    return __Create(CreateICCFromFilter(paramDoc.__GetHandle(), paramFilter.__GetHandle()), null);
  }
  
  public static ColorSpace createPattern()
    throws PDFNetException
  {
    return __Create(CreatePatternL(), null);
  }
  
  public static int getComponentNum(int paramInt, Obj paramObj)
    throws PDFNetException
  {
    return GetComponentNum(paramInt, paramObj.__GetHandle());
  }
  
  public static int getType(Obj paramObj)
    throws PDFNetException
  {
    return GetTypeStatic(paramObj.__GetHandle());
  }
  
  public ColorPt convert2CMYK(ColorPt paramColorPt)
    throws PDFNetException
  {
    return new ColorPt(Convert2CMYK(this.a, paramColorPt.a));
  }
  
  public ColorPt convert2Gray(ColorPt paramColorPt)
    throws PDFNetException
  {
    return new ColorPt(Convert2Gray(this.a, paramColorPt.a));
  }
  
  public ColorPt convert2RGB(ColorPt paramColorPt)
    throws PDFNetException
  {
    return new ColorPt(Convert2RGB(this.a, paramColorPt.a));
  }
  
  public ColorSpace getAlternateColorSpace()
    throws PDFNetException
  {
    return __Create(GetAlternateColorSpace(this.a), this.b);
  }
  
  public ColorPt getBaseColor(byte paramByte)
    throws PDFNetException
  {
    return new ColorPt(GetBaseColor(this.a, paramByte));
  }
  
  public ColorSpace getBaseColorSpace()
    throws PDFNetException
  {
    return __Create(GetBaseColorSpace(this.a), this.b);
  }
  
  public int getComponentNum()
    throws PDFNetException
  {
    return GetComponentNum(this.a);
  }
  
  public byte[] getLookupTable()
    throws PDFNetException
  {
    return GetLookupTable(this.a);
  }
  
  public Obj getSDFObj()
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public Function getTintFunction()
    throws PDFNetException
  {
    return Function.a(GetTintFunction(this.a), this.b);
  }
  
  public int getType()
    throws PDFNetException
  {
    return GetType(this.a);
  }
  
  public void initColor(ColorPt paramColorPt)
    throws PDFNetException
  {
    InitColor(this.a, paramColorPt.a);
  }
  
  public void initComponentRanges(double[] paramArrayOfDouble1, double[] paramArrayOfDouble2)
    throws PDFNetException
  {
    int i = getComponentNum();
    if ((i != paramArrayOfDouble1.length) || (i != paramArrayOfDouble2.length)) {
      throw new PDFNetException("", 0L, "", "", "Error: Arrays passed to InitComponentRanges must have a length\nequal to the number of components in the ColorSpace.");
    }
    InitComponentRanges(this.a, paramArrayOfDouble1, paramArrayOfDouble2);
  }
  
  public boolean isAll()
    throws PDFNetException
  {
    return IsAll(this.a);
  }
  
  public boolean isNone()
    throws PDFNetException
  {
    return IsNone(this.a);
  }
}
