package pdftron.PDF;

import pdftron.Common.Matrix2D;
import pdftron.Common.PDFNetException;
import pdftron.SDF.Obj;

public class Page
{
  public static final int e_0 = 0;
  public static final int e_180 = 2;
  public static final int e_270 = 3;
  public static final int e_90 = 1;
  public static final int e_art = 4;
  public static final int e_bleed = 2;
  public static final int e_crop = 1;
  public static final int e_media = 0;
  public static final int e_trim = 3;
  long a;
  Object b;
  
  public Page()
  {
    this.a = 0L;
  }
  
  Page(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public Page(Obj paramObj)
  {
    this.a = paramObj.__GetHandle();
    this.b = paramObj.__GetRefHandle();
  }
  
  private static native void AnnotInsert(long paramLong1, int paramInt, long paramLong2);
  
  private static native void AnnotPushBack(long paramLong1, long paramLong2);
  
  private static native void AnnotPushFront(long paramLong1, long paramLong2);
  
  private static native void AnnotRemove(long paramLong, int paramInt);
  
  private static native void AnnotRemove(long paramLong1, long paramLong2);
  
  private static native void FlattenField(long paramLong1, long paramLong2);
  
  private static native long GetAnnot(long paramLong, int paramInt);
  
  private static native long GetAnnots(long paramLong);
  
  private static native long GetBox(long paramLong, int paramInt);
  
  private static native long GetContents(long paramLong);
  
  private static native long GetCropBox(long paramLong);
  
  private static native long GetDefaultMatrix(long paramLong, boolean paramBoolean, int paramInt1, int paramInt2);
  
  private static native int GetIndex(long paramLong);
  
  private static native long GetMediaBox(long paramLong);
  
  private static native int GetNumAnnots(long paramLong);
  
  private static native double GetPageHeight(long paramLong, int paramInt);
  
  private static native double GetPageWidth(long paramLong, int paramInt);
  
  private static native long GetResourceDict(long paramLong);
  
  private static native int GetRotation(long paramLong);
  
  private static native int[] GetThumbInfo(long paramLong);
  
  private static native double GetUserUnitSize(long paramLong);
  
  private static native boolean HasTransition(long paramLong);
  
  private static native boolean IsValid(long paramLong);
  
  private static native void Scale(long paramLong, double paramDouble);
  
  private static native void SetBox(long paramLong1, int paramInt, long paramLong2);
  
  private static native void SetCropBox(long paramLong1, long paramLong2);
  
  private static native void SetMediaBox(long paramLong1, long paramLong2);
  
  private static native void SetRotation(long paramLong, int paramInt);
  
  private static native void SetUserUnitSize(long paramLong, double paramDouble);
  
  public static Page __Create(long paramLong, Object paramObject)
  {
    return new Page(paramLong, paramObject);
  }
  
  public void annotInsert(int paramInt, Annot paramAnnot)
    throws PDFNetException
  {
    AnnotInsert(this.a, paramInt, paramAnnot.a);
  }
  
  public void annotPushBack(Annot paramAnnot)
    throws PDFNetException
  {
    AnnotPushBack(this.a, paramAnnot.a);
  }
  
  public void annotPushFront(Annot paramAnnot)
    throws PDFNetException
  {
    AnnotPushFront(this.a, paramAnnot.a);
  }
  
  public void annotRemove(int paramInt)
    throws PDFNetException
  {
    AnnotRemove(this.a, paramInt);
  }
  
  public void annotRemove(Annot paramAnnot)
    throws PDFNetException
  {
    AnnotRemove(this.a, paramAnnot.a);
  }
  
  public Obj findInheritedAttribute(String paramString)
    throws PDFNetException
  {
    return Obj.__Create(this.a, paramString);
  }
  
  public void flattenField(Field paramField)
    throws PDFNetException
  {
    FlattenField(this.a, paramField.a);
  }
  
  public Annot getAnnot(int paramInt)
    throws PDFNetException
  {
    return new Annot(GetAnnot(this.a, paramInt), this.b);
  }
  
  public Obj getAnnots()
    throws PDFNetException
  {
    return Obj.__Create(GetAnnots(this.a), this.b);
  }
  
  public Rect getBox(int paramInt)
    throws PDFNetException
  {
    return new Rect(GetBox(this.a, paramInt));
  }
  
  public Obj getContents()
    throws PDFNetException
  {
    return Obj.__Create(GetContents(this.a), this.b);
  }
  
  public Rect getCropBox()
    throws PDFNetException
  {
    return new Rect(GetCropBox(this.a));
  }
  
  public Matrix2D getDefaultMatrix()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetDefaultMatrix(this.a, false, 1, 0));
  }
  
  public Matrix2D getDefaultMatrix(boolean paramBoolean, int paramInt1, int paramInt2)
    throws PDFNetException
  {
    return Matrix2D.__Create(GetDefaultMatrix(this.a, paramBoolean, paramInt1, paramInt2));
  }
  
  public int getIndex()
    throws PDFNetException
  {
    return GetIndex(this.a);
  }
  
  public Rect getMediaBox()
    throws PDFNetException
  {
    return new Rect(GetMediaBox(this.a));
  }
  
  public int getNumAnnots()
    throws PDFNetException
  {
    return GetNumAnnots(this.a);
  }
  
  public double getPageHeight()
    throws PDFNetException
  {
    return GetPageHeight(this.a, 1);
  }
  
  public double getPageHeight(int paramInt)
    throws PDFNetException
  {
    return GetPageHeight(this.a, paramInt);
  }
  
  public double getPageWidth()
    throws PDFNetException
  {
    return GetPageWidth(this.a, 1);
  }
  
  public double getPageWidth(int paramInt)
    throws PDFNetException
  {
    return GetPageWidth(this.a, paramInt);
  }
  
  public Obj getResourceDict()
    throws PDFNetException
  {
    return Obj.__Create(GetResourceDict(this.a), this.b);
  }
  
  public int getRotation()
    throws PDFNetException
  {
    return GetRotation(this.a);
  }
  
  public Obj getSDFObj()
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public int[] getThumbInfo()
  {
    return GetThumbInfo(this.a);
  }
  
  public double getUserUnitSize()
    throws PDFNetException
  {
    return GetUserUnitSize(this.a);
  }
  
  public boolean hasTransition()
    throws PDFNetException
  {
    return HasTransition(this.a);
  }
  
  public boolean isValid()
    throws PDFNetException
  {
    return IsValid(this.a);
  }
  
  public void scale(double paramDouble)
    throws PDFNetException
  {
    Scale(this.a, paramDouble);
  }
  
  public void setBox(int paramInt, Rect paramRect)
    throws PDFNetException
  {
    SetBox(this.a, paramInt, paramRect.a);
  }
  
  public void setCropBox(Rect paramRect)
    throws PDFNetException
  {
    SetCropBox(this.a, paramRect.a);
  }
  
  public void setMediaBox(Rect paramRect)
    throws PDFNetException
  {
    SetMediaBox(this.a, paramRect.a);
  }
  
  public void setRotation(int paramInt)
    throws PDFNetException
  {
    SetRotation(this.a, paramInt);
  }
  
  public void setUserUnitSize(double paramDouble)
    throws PDFNetException
  {
    SetUserUnitSize(this.a, paramDouble);
  }
}
