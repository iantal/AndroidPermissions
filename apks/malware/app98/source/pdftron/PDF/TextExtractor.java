package pdftron.PDF;

import pdftron.SDF.Obj;

public class TextExtractor
{
  public static final int e_no_dup_remove = 2;
  public static final int e_no_invisible_text = 16;
  public static final int e_no_ligature_exp = 1;
  public static final int e_output_bbox = 2;
  public static final int e_output_style_info = 4;
  public static final int e_punct_break = 4;
  public static final int e_remove_hidden_text = 8;
  public static final int e_words_as_elements = 1;
  private Object a;
  private long b = TextExtractorCreate();
  
  public TextExtractor() {}
  
  private static native void Begin(long paramLong1, long paramLong2, long paramLong3, int paramInt);
  
  private static native void Destroy(long paramLong);
  
  private static native String GetAsText(long paramLong, boolean paramBoolean);
  
  private static native String GetAsXML(long paramLong, int paramInt);
  
  private static native long GetFirstLine(long paramLong);
  
  private static native int GetNumLines(long paramLong);
  
  private static native String GetTextUnderAnnot(long paramLong1, long paramLong2);
  
  private static native int GetWordCount(long paramLong);
  
  private static native void LineDestroy(long paramLong);
  
  private static native boolean LineEndsWithHyphen(long paramLong);
  
  private static native boolean LineEquals(long paramLong1, long paramLong2);
  
  private static native long LineGetBBox(long paramLong);
  
  private static native int LineGetCurrentNum(long paramLong);
  
  private static native long LineGetFirstWord(long paramLong);
  
  private static native int LineGetFlowID(long paramLong);
  
  private static native long LineGetNextLine(long paramLong);
  
  private static native int LineGetNumWords(long paramLong);
  
  private static native int LineGetParagraphID(long paramLong);
  
  private static native double[] LineGetQuad(long paramLong);
  
  private static native long LineGetStyle(long paramLong);
  
  private static native long LineGetWord(long paramLong, int paramInt);
  
  private static native boolean LineIsSimpleLine(long paramLong);
  
  private static native boolean LineIsValid(long paramLong);
  
  private static native void StyleDestroy(long paramLong);
  
  private static native boolean StyleEquals(long paramLong1, long paramLong2);
  
  private static native int[] StyleGetColor(long paramLong);
  
  private static native long StyleGetFont(long paramLong);
  
  private static native String StyleGetFontName(long paramLong);
  
  private static native double StyleGetFontSize(long paramLong);
  
  private static native int StyleGetWeight(long paramLong);
  
  private static native boolean StyleIsItalic(long paramLong);
  
  private static native boolean StyleIsSerif(long paramLong);
  
  private static native long TextExtractorCreate();
  
  private static native void WordDestroy(long paramLong);
  
  private static native boolean WordEquals(long paramLong1, long paramLong2);
  
  private static native long WordGetBBox(long paramLong);
  
  private static native long WordGetCharStyle(long paramLong, int paramInt);
  
  private static native int WordGetCurrentNum(long paramLong);
  
  private static native double[] WordGetGlyphQuad(long paramLong, int paramInt);
  
  private static native long WordGetNextWord(long paramLong);
  
  private static native int WordGetNumGlyphs(long paramLong);
  
  private static native double[] WordGetQuad(long paramLong);
  
  private static native String WordGetString(long paramLong);
  
  private static native int WordGetStringLen(long paramLong);
  
  private static native long WordGetStyle(long paramLong);
  
  private static native boolean WordIsValid(long paramLong);
  
  public void begin(Page paramPage)
  {
    Begin(this.b, paramPage.a, 0L, 0);
    this.a = paramPage.b;
  }
  
  public void begin(Page paramPage, Rect paramRect)
  {
    long l = 0L;
    if (paramRect != null) {
      l = paramRect.a;
    }
    Begin(this.b, paramPage.a, l, 0);
    this.a = paramPage.b;
  }
  
  public void begin(Page paramPage, Rect paramRect, int paramInt)
  {
    long l = 0L;
    if (paramRect != null) {
      l = paramRect.a;
    }
    Begin(this.b, paramPage.a, l, paramInt);
    this.a = paramPage.b;
  }
  
  public void destroy()
  {
    if (this.b != 0L)
    {
      Destroy(this.b);
      this.b = 0L;
    }
  }
  
  protected void finalize()
    throws Throwable
  {
    destroy();
  }
  
  public String getAsText()
  {
    return GetAsText(this.b, true);
  }
  
  public String getAsText(boolean paramBoolean)
  {
    return GetAsText(this.b, paramBoolean);
  }
  
  public String getAsXML()
  {
    return GetAsXML(this.b, 0);
  }
  
  public String getAsXML(int paramInt)
  {
    return GetAsXML(this.b, paramInt);
  }
  
  public Line getFirstLine()
  {
    return new Line(GetFirstLine(this.b), this.a);
  }
  
  public int getNumLines()
  {
    return GetNumLines(this.b);
  }
  
  public String getTextUnderAnnot(Annot paramAnnot)
  {
    return GetTextUnderAnnot(this.b, paramAnnot.__GetHandle());
  }
  
  public int getWordCount()
  {
    return GetWordCount(this.b);
  }
  
  public class Line
  {
    private Object a;
    private long b;
    
    Line(long paramLong, Object paramObject)
    {
      this.b = paramLong;
      this.a = paramObject;
    }
    
    public void destroy()
    {
      if (this.b != 0L)
      {
        TextExtractor.s(this.b);
        this.b = 0L;
      }
    }
    
    public boolean endsWithHyphen()
    {
      return TextExtractor.D(this.b);
    }
    
    public boolean equals(Object paramObject)
    {
      if ((paramObject != null) && (paramObject.getClass().equals(getClass()))) {
        return TextExtractor.c(this.b, ((TextExtractor.Word)paramObject).a);
      }
      return false;
    }
    
    protected void finalize()
      throws Throwable
    {
      destroy();
    }
    
    public Rect getBBox()
    {
      return new Rect(TextExtractor.v(this.b));
    }
    
    public int getCurrentNum()
    {
      return TextExtractor.z(this.b);
    }
    
    public TextExtractor.Word getFirstWord()
    {
      return new TextExtractor.Word(TextExtractor.this, TextExtractor.x(this.b), this.a);
    }
    
    public int getFlowID()
    {
      return TextExtractor.C(this.b);
    }
    
    public Line getNextLine()
    {
      return new Line(TextExtractor.this, TextExtractor.y(this.b), this.a);
    }
    
    public int getNumWords()
    {
      return TextExtractor.t(this.b);
    }
    
    public int getParagraphID()
    {
      return TextExtractor.B(this.b);
    }
    
    public double[] getQuad()
    {
      return TextExtractor.w(this.b);
    }
    
    public TextExtractor.Style getStyle()
    {
      return new TextExtractor.Style(TextExtractor.this, TextExtractor.A(this.b), this.a);
    }
    
    public TextExtractor.Word getWord(int paramInt)
    {
      return new TextExtractor.Word(TextExtractor.this, TextExtractor.c(this.b, paramInt), this.a);
    }
    
    public boolean isSimpleLine()
    {
      return TextExtractor.u(this.b);
    }
    
    public boolean isValid()
    {
      if (this.b != 0L) {
        return TextExtractor.E(this.b);
      }
      return false;
    }
  }
  
  public class Style
  {
    private Object a;
    private long b;
    
    Style(long paramLong, Object paramObject)
    {
      this.b = paramLong;
      this.a = paramObject;
    }
    
    public void destroy()
    {
      if (this.b != 0L)
      {
        TextExtractor.a(this.b);
        this.b = 0L;
      }
    }
    
    public boolean equals(Object paramObject)
    {
      if ((paramObject != null) && (paramObject.getClass().equals(getClass()))) {
        return TextExtractor.a(this.b, ((Style)paramObject).b);
      }
      return false;
    }
    
    protected void finalize()
      throws Throwable
    {
      destroy();
    }
    
    public byte[] getColor()
    {
      int[] arrayOfInt = TextExtractor.h(this.b);
      return new byte[] { (byte)arrayOfInt[0], (byte)arrayOfInt[1], (byte)arrayOfInt[2] };
    }
    
    public Obj getFont()
    {
      return Obj.__Create(TextExtractor.b(this.b), this.a);
    }
    
    public String getFontName()
    {
      return TextExtractor.c(this.b);
    }
    
    public double getFontSize()
    {
      return TextExtractor.d(this.b);
    }
    
    public int getWeight()
    {
      return TextExtractor.e(this.b);
    }
    
    public boolean isItalic()
    {
      return TextExtractor.f(this.b);
    }
    
    public boolean isSerif()
    {
      return TextExtractor.g(this.b);
    }
  }
  
  public class Word
  {
    long a;
    private Object b;
    
    Word(long paramLong, Object paramObject)
    {
      this.a = paramLong;
      this.b = paramObject;
    }
    
    public void destroy()
    {
      if (this.a != 0L)
      {
        TextExtractor.i(this.a);
        this.a = 0L;
      }
    }
    
    public boolean equals(Object paramObject)
    {
      if ((paramObject != null) && (paramObject.getClass().equals(getClass()))) {
        return TextExtractor.b(this.a, ((Word)paramObject).a);
      }
      return false;
    }
    
    protected void finalize()
      throws Throwable
    {
      destroy();
    }
    
    public Rect getBBox()
    {
      return new Rect(TextExtractor.k(this.a));
    }
    
    public TextExtractor.Style getCharStyle(int paramInt)
    {
      return new TextExtractor.Style(TextExtractor.this, TextExtractor.b(this.a, paramInt), this.b);
    }
    
    public int getCurrentNum()
    {
      return TextExtractor.q(this.a);
    }
    
    public double[] getGlyphQuad(int paramInt)
    {
      return TextExtractor.a(this.a, paramInt);
    }
    
    public Word getNextWord()
    {
      return new Word(TextExtractor.this, TextExtractor.p(this.a), this.b);
    }
    
    public int getNumGlyphs()
    {
      return TextExtractor.j(this.a);
    }
    
    public double[] getQuad()
    {
      return TextExtractor.l(this.a);
    }
    
    public String getString()
    {
      return TextExtractor.o(this.a);
    }
    
    public int getStringLen()
    {
      return TextExtractor.n(this.a);
    }
    
    public TextExtractor.Style getStyle()
    {
      return new TextExtractor.Style(TextExtractor.this, TextExtractor.m(this.a), this.b);
    }
    
    public boolean isValid()
    {
      if (this.a != 0L) {
        return TextExtractor.r(this.a);
      }
      return false;
    }
  }
}
