package pdftron.PDF;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import pdftron.Common.PDFNetException;
import pdftron.FDF.FDFDoc;
import pdftron.Filters.Filter;
import pdftron.Filters.FilterReader;
import pdftron.PDF.OCG.Config;
import pdftron.PDF.Struct.STree;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;
import pdftron.SDF.SDFDoc;
import pdftron.SDF.SecurityHandler;

public class PDFDoc
  extends Doc
{
  public static final int e_insert_bookmark = 1;
  public static final int e_none = 0;
  
  public PDFDoc()
    throws PDFNetException
  {
    this.impl = PDFDocCreate();
  }
  
  private PDFDoc(long paramLong)
  {
    this.impl = paramLong;
  }
  
  public PDFDoc(InputStream paramInputStream)
    throws PDFNetException, IOException
  {
    this(paramInputStream, 1048576);
  }
  
  /* Error */
  public PDFDoc(InputStream paramInputStream, int paramInt)
    throws PDFNetException, IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 15	pdftron/SDF/Doc:<init>	()V
    //   4: aload_1
    //   5: invokevirtual 39	java/io/InputStream:available	()I
    //   8: i2l
    //   9: invokestatic 43	pdftron/PDF/PDFDoc:MemStreamCreateMemFilt	(J)J
    //   12: lstore 4
    //   14: iload_2
    //   15: newarray byte
    //   17: astore 6
    //   19: aload_1
    //   20: aload 6
    //   22: invokevirtual 47	java/io/InputStream:read	([B)I
    //   25: istore_3
    //   26: iload_3
    //   27: iload_2
    //   28: if_icmpne +26 -> 54
    //   31: lload 4
    //   33: aload 6
    //   35: iload_2
    //   36: invokestatic 51	pdftron/PDF/PDFDoc:MemStreamWriteData	(J[BI)V
    //   39: goto -20 -> 19
    //   42: astore_1
    //   43: lload 4
    //   45: aconst_null
    //   46: invokestatic 57	pdftron/Filters/Filter:__Create	(JLpdftron/Filters/Filter;)Lpdftron/Filters/Filter;
    //   49: invokevirtual 60	pdftron/Filters/Filter:destroy	()V
    //   52: aload_1
    //   53: athrow
    //   54: iload_3
    //   55: ifle +11 -> 66
    //   58: lload 4
    //   60: aload 6
    //   62: iload_3
    //   63: invokestatic 51	pdftron/PDF/PDFDoc:MemStreamWriteData	(J[BI)V
    //   66: aload_0
    //   67: lload 4
    //   69: invokestatic 63	pdftron/PDF/PDFDoc:MemStreamCreateDoc	(J)J
    //   72: putfield 23	pdftron/PDF/PDFDoc:impl	J
    //   75: return
    //   76: astore_1
    //   77: lconst_0
    //   78: lstore 4
    //   80: lload 4
    //   82: aconst_null
    //   83: invokestatic 57	pdftron/Filters/Filter:__Create	(JLpdftron/Filters/Filter;)Lpdftron/Filters/Filter;
    //   86: invokevirtual 60	pdftron/Filters/Filter:destroy	()V
    //   89: aload_1
    //   90: athrow
    //   91: astore_1
    //   92: goto -12 -> 80
    //   95: astore_1
    //   96: lconst_0
    //   97: lstore 4
    //   99: goto -56 -> 43
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	102	0	this	PDFDoc
    //   0	102	1	paramInputStream	InputStream
    //   0	102	2	paramInt	int
    //   25	38	3	i	int
    //   12	86	4	l	long
    //   17	44	6	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   14	19	42	pdftron/Common/PDFNetException
    //   19	26	42	pdftron/Common/PDFNetException
    //   31	39	42	pdftron/Common/PDFNetException
    //   58	66	42	pdftron/Common/PDFNetException
    //   4	14	76	java/io/IOException
    //   66	75	76	java/io/IOException
    //   14	19	91	java/io/IOException
    //   19	26	91	java/io/IOException
    //   31	39	91	java/io/IOException
    //   58	66	91	java/io/IOException
    //   4	14	95	pdftron/Common/PDFNetException
    //   66	75	95	pdftron/Common/PDFNetException
  }
  
  public PDFDoc(String paramString)
    throws PDFNetException
  {
    this.impl = PDFDocCreate(paramString);
  }
  
  public PDFDoc(Filter paramFilter)
    throws PDFNetException
  {
    paramFilter.__SetRefHandle(this);
    this.impl = PDFDocCreateFilter(paramFilter.__GetHandle());
  }
  
  public PDFDoc(SDFDoc paramSDFDoc)
    throws PDFNetException
  {
    if (paramSDFDoc.__GetRefHandle() != null) {
      throw new PDFNetException("false", 78L, "PDFDoc.java", "PDFDoc(SDFDoc)", "SDFDoc is already owned by another document.");
    }
    this.impl = paramSDFDoc.__GetHandle();
    paramSDFDoc.__SetRef(this);
  }
  
  public PDFDoc(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    this.impl = PDFDocCreate(paramArrayOfByte);
  }
  
  private static native void AddFileAttachment(long paramLong1, String paramString, long paramLong2);
  
  private static native void AddHighlights(long paramLong, String paramString);
  
  private static native void AddRootBookmark(long paramLong1, long paramLong2);
  
  private static native void Close(long paramLong);
  
  private static native long CreateIndirectArray(long paramLong);
  
  private static native long CreateIndirectBool(long paramLong, boolean paramBoolean);
  
  private static native long CreateIndirectDict(long paramLong);
  
  private static native long CreateIndirectName(long paramLong, String paramString);
  
  private static native long CreateIndirectNull(long paramLong);
  
  private static native long CreateIndirectNumber(long paramLong, double paramDouble);
  
  private static native long CreateIndirectStream(long paramLong1, long paramLong2, long paramLong3);
  
  private static native long CreateIndirectStream(long paramLong1, byte[] paramArrayOfByte, long paramLong2);
  
  private static native long CreateIndirectString(long paramLong, String paramString);
  
  private static native long CreateIndirectString(long paramLong, byte[] paramArrayOfByte);
  
  private static native long FDFExtract(long paramLong);
  
  private static native void FDFMerge(long paramLong1, long paramLong2);
  
  private static native long FieldCreate(long paramLong1, String paramString, int paramInt, long paramLong2, long paramLong3);
  
  private static native long FieldCreate(long paramLong, String paramString1, int paramInt, String paramString2, String paramString3);
  
  private static native void FlattenAnnotations(long paramLong, boolean paramBoolean);
  
  private static native long GetAcroForm(long paramLong);
  
  private static native long GetDocInfo(long paramLong);
  
  private static native long GetField(long paramLong, String paramString);
  
  private static native long GetFieldIterator(long paramLong, String paramString);
  
  private static native long GetFieldIteratorBegin(long paramLong);
  
  private static native String GetFileName(long paramLong);
  
  private static native long GetFirstBookmark(long paramLong);
  
  private static native long GetOCGConfig(long paramLong);
  
  private static native long GetOCGs(long paramLong);
  
  private static native long GetOpenAction(long paramLong);
  
  private static native long GetPage(long paramLong, int paramInt);
  
  private static native long GetPageIterator(long paramLong, int paramInt);
  
  private static native long GetPageIteratorBegin(long paramLong);
  
  private static native long GetPageLabel(long paramLong, int paramInt);
  
  private static native long GetPages(long paramLong);
  
  private static native int GetPagesCount(long paramLong);
  
  private static native long GetRoot(long paramLong);
  
  private static native long GetSecurityHandler(long paramLong);
  
  private static native long GetStructTree(long paramLong);
  
  private static native long GetTrailer(long paramLong);
  
  private static native long GetViewPrefs(long paramLong);
  
  private static native boolean HasOC(long paramLong);
  
  private static native long[] ImportPages(long paramLong, long[] paramArrayOfLong, boolean paramBoolean);
  
  private static native boolean InitSecurityHandler(long paramLong, Object paramObject);
  
  private static native boolean InitStdSecurityHandler(long paramLong, String paramString);
  
  private static native void InsertPageSet(long paramLong1, int paramInt1, long paramLong2, long paramLong3, int paramInt2, ProgressMonitor paramProgressMonitor);
  
  private static native boolean IsEncrypted(long paramLong);
  
  private static native boolean IsLinearized(long paramLong);
  
  private static native boolean IsLocked(long paramLong);
  
  private static native boolean IsModified(long paramLong);
  
  private static native boolean IsTagged(long paramLong);
  
  private static native void Lock(long paramLong);
  
  private static native long MemStreamCreateDoc(long paramLong);
  
  private static native long MemStreamCreateMemFilt(long paramLong)
    throws PDFNetException;
  
  private static native void MemStreamWriteData(long paramLong, byte[] paramArrayOfByte, int paramInt);
  
  private static native void MovePageSet(long paramLong1, int paramInt1, long paramLong2, long paramLong3, int paramInt2, ProgressMonitor paramProgressMonitor);
  
  private static native long PDFDocCreate();
  
  private static native long PDFDocCreate(String paramString);
  
  private static native long PDFDocCreate(byte[] paramArrayOfByte);
  
  private static native long PDFDocCreateFilter(long paramLong);
  
  private static native long PageCreate(long paramLong1, long paramLong2);
  
  private static native void PageInsert(long paramLong1, long paramLong2, long paramLong3);
  
  private static native void PagePushBack(long paramLong1, long paramLong2);
  
  private static native void PagePushFront(long paramLong1, long paramLong2);
  
  private static native void PageRemove(long paramLong1, long paramLong2);
  
  private static native void ReadData(byte[] paramArrayOfByte, int paramInt, long paramLong);
  
  private static native void RefreshFieldAppearances(long paramLong);
  
  private static native void RemovePageLabel(long paramLong, int paramInt);
  
  private static native void RemoveSecurity(long paramLong);
  
  private static native void Save(long paramLong1, String paramString, long paramLong2, ProgressMonitor paramProgressMonitor);
  
  private static native byte[] Save(long paramLong1, long paramLong2, ProgressMonitor paramProgressMonitor);
  
  private static native long[] SaveStream(long paramLong1, long paramLong2, ProgressMonitor paramProgressMonitor);
  
  private static native void SetOpenAction(long paramLong1, long paramLong2);
  
  private static native void SetPageLabel(long paramLong1, int paramInt, long paramLong2);
  
  private static native void SetSecurityHandler(long paramLong1, long paramLong2);
  
  private static native boolean TryLock(long paramLong, int paramInt);
  
  private static native void Unlock(long paramLong);
  
  public static PDFDoc __Create(long paramLong)
  {
    return new PDFDoc(paramLong);
  }
  
  public void addFileAttachment(String paramString, FileSpec paramFileSpec)
    throws PDFNetException
  {
    AddFileAttachment(this.impl, paramString, paramFileSpec.a);
  }
  
  public void addHighlights(String paramString)
  {
    AddHighlights(this.impl, paramString);
  }
  
  public void addRootBookmark(Bookmark paramBookmark)
    throws PDFNetException
  {
    AddRootBookmark(this.impl, paramBookmark.a);
  }
  
  public void close()
    throws PDFNetException
  {
    if (this.impl != 0L)
    {
      Close(this.impl);
      this.impl = 0L;
    }
  }
  
  public Obj createIndirectArray()
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectArray(this.impl), this);
  }
  
  public Obj createIndirectBool(boolean paramBoolean)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectBool(this.impl, paramBoolean), this);
  }
  
  public Obj createIndirectDict()
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectDict(this.impl), this);
  }
  
  public Obj createIndirectName(String paramString)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectName(this.impl, paramString), this);
  }
  
  public Obj createIndirectNull()
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectNull(this.impl), this);
  }
  
  public Obj createIndirectNumber(double paramDouble)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectNumber(this.impl, paramDouble), this);
  }
  
  public Obj createIndirectStream(FilterReader paramFilterReader)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectStream(this.impl, paramFilterReader.__GetHandle(), 0L), this);
  }
  
  public Obj createIndirectStream(FilterReader paramFilterReader, Filter paramFilter)
    throws PDFNetException
  {
    if (paramFilter != null) {
      paramFilter.__SetRefHandle(this);
    }
    return Obj.__Create(CreateIndirectStream(this.impl, paramFilterReader.__GetHandle(), paramFilter.__GetHandle()), this);
  }
  
  public Obj createIndirectStream(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectStream(this.impl, paramArrayOfByte, 0L), this);
  }
  
  public Obj createIndirectStream(byte[] paramArrayOfByte, Filter paramFilter)
    throws PDFNetException
  {
    if (paramFilter != null) {
      paramFilter.__SetRefHandle(this);
    }
    return Obj.__Create(CreateIndirectStream(this.impl, paramArrayOfByte, paramFilter.__GetHandle()), this);
  }
  
  public Obj createIndirectString(String paramString)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectString(this.impl, paramString), this);
  }
  
  public Obj createIndirectString(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectString(this.impl, paramArrayOfByte), this);
  }
  
  public FDFDoc fdfExtract()
    throws PDFNetException
  {
    return FDFDoc.__Create(FDFExtract(this.impl));
  }
  
  public void fdfMerge(FDFDoc paramFDFDoc)
    throws PDFNetException
  {
    FDFMerge(this.impl, paramFDFDoc.__GetHandle());
  }
  
  public Field fieldCreate(String paramString, int paramInt)
    throws PDFNetException
  {
    return new Field(FieldCreate(this.impl, paramString, paramInt, 0L, 0L), this);
  }
  
  public Field fieldCreate(String paramString1, int paramInt, String paramString2)
    throws PDFNetException
  {
    return new Field(FieldCreate(this.impl, paramString1, paramInt, paramString2, ""), this);
  }
  
  public Field fieldCreate(String paramString1, int paramInt, String paramString2, String paramString3)
    throws PDFNetException
  {
    return new Field(FieldCreate(this.impl, paramString1, paramInt, paramString2, paramString3), this);
  }
  
  public Field fieldCreate(String paramString, int paramInt, Obj paramObj)
    throws PDFNetException
  {
    return new Field(FieldCreate(this.impl, paramString, paramInt, paramObj.__GetHandle(), 0L), this);
  }
  
  public Field fieldCreate(String paramString, int paramInt, Obj paramObj1, Obj paramObj2)
    throws PDFNetException
  {
    return new Field(FieldCreate(this.impl, paramString, paramInt, paramObj1.__GetHandle(), paramObj2.__GetHandle()), this);
  }
  
  protected void finalize()
    throws Throwable
  {
    close();
  }
  
  public void flattenAnnotations()
    throws PDFNetException
  {
    FlattenAnnotations(this.impl, true);
  }
  
  public void flattenAnnotations(boolean paramBoolean)
    throws PDFNetException
  {
    FlattenAnnotations(this.impl, paramBoolean);
  }
  
  public Obj getAcroForm()
    throws PDFNetException
  {
    return Obj.__Create(GetAcroForm(this.impl), this);
  }
  
  public PDFDocInfo getDocInfo()
    throws PDFNetException
  {
    return new PDFDocInfo(GetDocInfo(this.impl), this);
  }
  
  public Field getField(String paramString)
    throws PDFNetException
  {
    long l = GetField(this.impl, paramString);
    if (l != 0L) {
      return new Field(l, this);
    }
    return null;
  }
  
  public FieldIterator getFieldIterator()
    throws PDFNetException
  {
    return new FieldIterator(GetFieldIteratorBegin(this.impl), this);
  }
  
  public FieldIterator getFieldIterator(String paramString)
    throws PDFNetException
  {
    return new FieldIterator(GetFieldIterator(this.impl, paramString), this);
  }
  
  public String getFileName()
    throws PDFNetException
  {
    return GetFileName(this.impl);
  }
  
  public Bookmark getFirstBookmark()
    throws PDFNetException
  {
    return new Bookmark(GetFirstBookmark(this.impl), this);
  }
  
  public Config getOCGConfig()
    throws PDFNetException
  {
    return Config.__Create(GetOCGConfig(this.impl), this);
  }
  
  public Obj getOCGs()
    throws PDFNetException
  {
    return Obj.__Create(GetOCGs(this.impl), this);
  }
  
  public Action getOpenAction()
    throws PDFNetException
  {
    return new Action(GetOpenAction(this.impl), this);
  }
  
  public Page getPage(int paramInt)
    throws PDFNetException
  {
    long l = GetPage(this.impl, paramInt);
    if (l != 0L) {
      return new Page(l, this);
    }
    return null;
  }
  
  public int getPageCount()
    throws PDFNetException
  {
    return GetPagesCount(this.impl);
  }
  
  public PageIterator getPageIterator()
    throws PDFNetException
  {
    return new PageIterator(GetPageIteratorBegin(this.impl), this);
  }
  
  public PageIterator getPageIterator(int paramInt)
    throws PDFNetException
  {
    return new PageIterator(GetPageIterator(this.impl, paramInt), this);
  }
  
  public PageLabel getPageLabel(int paramInt)
    throws PDFNetException
  {
    return new PageLabel(GetPageLabel(this.impl, paramInt), this);
  }
  
  public Obj getPages()
    throws PDFNetException
  {
    return Obj.__Create(GetPages(this.impl), this);
  }
  
  public Obj getRoot()
    throws PDFNetException
  {
    return Obj.__Create(GetRoot(this.impl), this);
  }
  
  public SDFDoc getSDFDoc()
  {
    return SDFDoc.__Create(this.impl, this);
  }
  
  public SecurityHandler getSecurityHandler()
  {
    SecurityHandler localSecurityHandler2 = SecurityHandler.__Create(GetSecurityHandler(this.impl), this);
    SecurityHandler localSecurityHandler1 = localSecurityHandler2;
    if (localSecurityHandler2.__GetHandle() == 0L) {
      localSecurityHandler1 = null;
    }
    return localSecurityHandler1;
  }
  
  public STree getStructTree()
    throws PDFNetException
  {
    return STree.__Create(GetStructTree(this.impl), this);
  }
  
  public Obj getTrailer()
    throws PDFNetException
  {
    return Obj.__Create(GetTrailer(this.impl), this);
  }
  
  public PDFDocViewPrefs getViewPrefs()
    throws PDFNetException
  {
    return new PDFDocViewPrefs(GetViewPrefs(this.impl), this);
  }
  
  public boolean hasOC()
    throws PDFNetException
  {
    return HasOC(this.impl);
  }
  
  public Page[] importPages(Page[] paramArrayOfPage)
    throws PDFNetException
  {
    return importPages(paramArrayOfPage, false);
  }
  
  public Page[] importPages(Page[] paramArrayOfPage, boolean paramBoolean)
    throws PDFNetException
  {
    int j = 0;
    Object localObject = new long[paramArrayOfPage.length];
    int i = 0;
    while (i < paramArrayOfPage.length)
    {
      localObject[i] = paramArrayOfPage[i].a;
      i += 1;
    }
    paramArrayOfPage = ImportPages(this.impl, (long[])localObject, paramBoolean);
    localObject = new Page[paramArrayOfPage.length];
    i = j;
    while (i < paramArrayOfPage.length)
    {
      localObject[i] = new Page(paramArrayOfPage[i], this);
      i += 1;
    }
    return localObject;
  }
  
  public boolean initSecurityHandler()
    throws PDFNetException
  {
    return InitSecurityHandler(this.impl, null);
  }
  
  public boolean initSecurityHandler(Object paramObject)
    throws PDFNetException
  {
    return InitSecurityHandler(this.impl, paramObject);
  }
  
  public boolean initStdSecurityHandler(String paramString)
    throws PDFNetException
  {
    return InitStdSecurityHandler(this.impl, paramString);
  }
  
  public void insertPages(int paramInt1, PDFDoc paramPDFDoc, int paramInt2, int paramInt3, int paramInt4, ProgressMonitor paramProgressMonitor)
    throws PDFNetException
  {
    PageSet localPageSet = new PageSet();
    localPageSet.addRange(paramInt2, paramInt3);
    insertPages(paramInt1, paramPDFDoc, localPageSet, paramInt4, paramProgressMonitor);
    localPageSet.destroy();
  }
  
  public void insertPages(int paramInt1, PDFDoc paramPDFDoc, PageSet paramPageSet, int paramInt2, ProgressMonitor paramProgressMonitor)
    throws PDFNetException
  {
    InsertPageSet(this.impl, paramInt1, paramPDFDoc.impl, paramPageSet.a, paramInt2, paramProgressMonitor);
  }
  
  public boolean isEncrypted()
    throws PDFNetException
  {
    return IsEncrypted(this.impl);
  }
  
  public boolean isLinearized()
    throws PDFNetException
  {
    return IsLinearized(this.impl);
  }
  
  public boolean isLocked()
    throws PDFNetException
  {
    return IsLocked(this.impl);
  }
  
  public boolean isModified()
    throws PDFNetException
  {
    return IsModified(this.impl);
  }
  
  public boolean isTagged()
  {
    return IsTagged(this.impl);
  }
  
  public void lock()
    throws PDFNetException
  {
    Lock(this.impl);
  }
  
  public void movePages(int paramInt1, PDFDoc paramPDFDoc, int paramInt2, int paramInt3, int paramInt4, ProgressMonitor paramProgressMonitor)
    throws PDFNetException
  {
    PageSet localPageSet = new PageSet();
    localPageSet.addRange(paramInt2, paramInt3);
    movePages(paramInt1, paramPDFDoc, localPageSet, paramInt4, paramProgressMonitor);
    localPageSet.destroy();
  }
  
  public void movePages(int paramInt1, PDFDoc paramPDFDoc, PageSet paramPageSet, int paramInt2, ProgressMonitor paramProgressMonitor)
    throws PDFNetException
  {
    MovePageSet(this.impl, paramInt1, paramPDFDoc.impl, paramPageSet.a, paramInt2, paramProgressMonitor);
  }
  
  public Page pageCreate()
    throws PDFNetException
  {
    return pageCreate(new Rect(0.0D, 0.0D, 612.0D, 792.0D));
  }
  
  public Page pageCreate(Rect paramRect)
    throws PDFNetException
  {
    return new Page(PageCreate(this.impl, paramRect.a), this);
  }
  
  public void pageInsert(PageIterator paramPageIterator, Page paramPage)
    throws PDFNetException
  {
    PageInsert(this.impl, paramPageIterator.a(), paramPage.a);
  }
  
  public void pagePushBack(Page paramPage)
    throws PDFNetException
  {
    PagePushBack(this.impl, paramPage.a);
  }
  
  public void pagePushFront(Page paramPage)
    throws PDFNetException
  {
    PagePushFront(this.impl, paramPage.a);
  }
  
  public void pageRemove(PageIterator paramPageIterator)
    throws PDFNetException
  {
    PageRemove(this.impl, paramPageIterator.a());
  }
  
  public void refreshFieldAppearances()
    throws PDFNetException
  {
    RefreshFieldAppearances(this.impl);
  }
  
  public void removePageLabel(int paramInt)
    throws PDFNetException
  {
    RemovePageLabel(this.impl, paramInt);
  }
  
  public void removeSecurity()
  {
    RemoveSecurity(this.impl);
  }
  
  public void save(OutputStream paramOutputStream, long paramLong, ProgressMonitor paramProgressMonitor)
    throws PDFNetException, IOException
  {
    save(paramOutputStream, paramLong, paramProgressMonitor, 1048576);
  }
  
  public void save(OutputStream paramOutputStream, long paramLong, ProgressMonitor paramProgressMonitor, int paramInt)
    throws PDFNetException, IOException
  {
    paramProgressMonitor = SaveStream(this.impl, paramLong, paramProgressMonitor);
    paramLong = paramProgressMonitor[0];
    long l1 = paramProgressMonitor[1];
    paramProgressMonitor = new byte[paramInt];
    long l2 = paramInt;
    while (paramLong < l1 - l2)
    {
      ReadData(paramProgressMonitor, paramInt, paramLong);
      paramOutputStream.write(paramProgressMonitor);
      paramLong += paramInt;
    }
    paramInt = (int)(l1 - paramLong);
    if (paramInt > 0)
    {
      ReadData(paramProgressMonitor, paramInt, paramLong);
      paramOutputStream.write(paramProgressMonitor, 0, paramInt);
    }
  }
  
  public void save(String paramString, long paramLong, ProgressMonitor paramProgressMonitor)
    throws PDFNetException
  {
    Save(this.impl, paramString, paramLong, paramProgressMonitor);
  }
  
  public byte[] save(long paramLong, ProgressMonitor paramProgressMonitor)
    throws PDFNetException
  {
    return Save(this.impl, paramLong, paramProgressMonitor);
  }
  
  public void setOpenAction(Action paramAction)
    throws PDFNetException
  {
    SetOpenAction(this.impl, paramAction.a);
  }
  
  public void setPageLabel(int paramInt, PageLabel paramPageLabel)
    throws PDFNetException
  {
    SetPageLabel(this.impl, paramInt, paramPageLabel.a);
  }
  
  public void setSecurityHandler(SecurityHandler paramSecurityHandler)
  {
    SetSecurityHandler(this.impl, paramSecurityHandler.__GetHandle());
    paramSecurityHandler.__SetRefHandle(this);
  }
  
  public boolean timedLock(int paramInt)
    throws PDFNetException
  {
    return TryLock(this.impl, paramInt);
  }
  
  public boolean tryLock()
    throws PDFNetException
  {
    return TryLock(this.impl, 0);
  }
  
  public void unlock()
    throws PDFNetException
  {
    Unlock(this.impl);
  }
}
