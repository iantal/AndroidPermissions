package pdftron.PDF;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import java.util.HashMap;
import pdftron.Common.PDFNetException;

final class p
{
  private HashMap<Integer, o> a = new HashMap();
  private int b = 10;
  private PDFDoc c;
  
  public p() {}
  
  public final int a()
  {
    return this.a.size();
  }
  
  public final Bitmap a(int paramInt)
  {
    if (this.c != null) {
      try
      {
        Object localObject = this.c.getPage(paramInt).getThumbInfo();
        if (localObject != null)
        {
          localObject = a(paramInt, localObject[(localObject.length - 2)], localObject[(localObject.length - 1)], (int[])localObject);
          return localObject;
        }
      }
      catch (PDFNetException localPDFNetException) {}
    }
    return null;
  }
  
  public final Bitmap a(int paramInt1, int paramInt2, int paramInt3, int[] paramArrayOfInt)
  {
    o localO = new o(paramInt1);
    try
    {
      localO.b = Bitmap.createBitmap(paramArrayOfInt, paramInt2, paramInt3, Bitmap.Config.ARGB_8888);
      this.a.put(Integer.valueOf(paramInt1), localO);
      return localO.b;
    }
    catch (OutOfMemoryError paramArrayOfInt)
    {
      for (;;)
      {
        localO.b = null;
      }
    }
    catch (Exception paramArrayOfInt)
    {
      for (;;) {}
    }
  }
  
  public final void a(int paramInt1, int paramInt2)
  {
    int k = 1;
    int j = 1;
    if (this.c == null) {
      return;
    }
    for (;;)
    {
      int i;
      try
      {
        i = this.c.getPageCount();
        if ((paramInt1 < 0) && (paramInt2 < 0))
        {
          this.a.clear();
          if (i < this.b)
          {
            paramInt1 = j;
            if (paramInt1 > i) {
              break;
            }
            a(paramInt1);
            paramInt1 += 1;
            continue;
          }
          i = this.b;
          paramInt1 = j;
          continue;
          HashMap localHashMap = (HashMap)this.a.clone();
          this.a.clear();
          if (paramInt1 > j) {
            break;
          }
          o localO = (o)localHashMap.get(Integer.valueOf(paramInt1));
          if (localO != null) {
            this.a.put(Integer.valueOf(localO.a), localO);
          } else {
            a(paramInt1);
          }
        }
      }
      catch (PDFNetException localPDFNetException)
      {
        return;
      }
      for (;;)
      {
        break;
        if (paramInt1 <= 0) {
          paramInt1 = k;
        }
      }
      j = paramInt2;
      if (paramInt2 > i)
      {
        j = i;
        continue;
        paramInt1 += 1;
      }
    }
  }
  
  public final void a(PDFDoc paramPDFDoc)
  {
    this.c = paramPDFDoc;
  }
  
  public final int b()
  {
    return this.b;
  }
  
  public final o b(int paramInt)
  {
    if (!this.a.isEmpty())
    {
      o localO = (o)this.a.get(Integer.valueOf(paramInt));
      if (localO != null) {
        return localO;
      }
    }
    return null;
  }
  
  public final void c()
  {
    this.a.clear();
  }
  
  public final void c(int paramInt)
  {
    this.a.remove(Integer.valueOf(paramInt));
  }
}
