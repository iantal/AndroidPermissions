package pdftron.PDF.Struct;

import pdftron.Common.PDFNetException;
import pdftron.SDF.Obj;

public class SElement
{
  private long a;
  private Object b;
  
  public SElement()
    throws PDFNetException
  {
    this.a = SElementCreate(0L);
  }
  
  SElement(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public SElement(Obj paramObj)
    throws PDFNetException
  {
    this.a = SElementCreate(paramObj.__GetHandle());
  }
  
  private static native void Destroy(long paramLong);
  
  private static native String GetActualText(long paramLong);
  
  private static native String GetAlt(long paramLong);
  
  private static native long GetAsContentItem(long paramLong, int paramInt);
  
  private static native long GetAsStructElem(long paramLong, int paramInt);
  
  private static native long GetID(long paramLong);
  
  private static native int GetNumKids(long paramLong);
  
  private static native long GetParent(long paramLong);
  
  private static native long GetSDFObj(long paramLong);
  
  private static native long GetStructTreeRoot(long paramLong);
  
  private static native String GetTitle(long paramLong);
  
  private static native String GetType(long paramLong);
  
  private static native boolean HasActualText(long paramLong);
  
  private static native boolean HasAlt(long paramLong);
  
  private static native boolean HasTitle(long paramLong);
  
  private static native boolean IsContentItem(long paramLong, int paramInt);
  
  private static native boolean IsValid(long paramLong);
  
  private static native long SElementCreate(long paramLong);
  
  public static SElement __Create(long paramLong, Object paramObject)
  {
    return new SElement(paramLong, paramObject);
  }
  
  public void destroy()
    throws PDFNetException
  {
    if (this.a != 0L)
    {
      Destroy(this.a);
      this.a = 0L;
    }
  }
  
  protected void finalize()
    throws Throwable
  {
    destroy();
  }
  
  public String getActualText()
    throws PDFNetException
  {
    return GetActualText(this.a);
  }
  
  public String getAlt()
    throws PDFNetException
  {
    return GetAlt(this.a);
  }
  
  public ContentItem getAsContentItem(int paramInt)
    throws PDFNetException
  {
    return new ContentItem(GetAsContentItem(this.a, paramInt), this.b);
  }
  
  public SElement getAsStructElem(int paramInt)
    throws PDFNetException
  {
    return new SElement(GetAsStructElem(this.a, paramInt), this.b);
  }
  
  public Obj getID()
    throws PDFNetException
  {
    return Obj.__Create(GetID(this.a), this.b);
  }
  
  public int getNumKids()
    throws PDFNetException
  {
    return GetNumKids(this.a);
  }
  
  public SElement getParent()
    throws PDFNetException
  {
    return new SElement(GetParent(this.a), this.b);
  }
  
  public Obj getSDFObj()
    throws PDFNetException
  {
    return Obj.__Create(GetSDFObj(this.a), this.b);
  }
  
  public STree getStructTreeRoot()
    throws PDFNetException
  {
    return new STree(GetStructTreeRoot(this.a), this.b);
  }
  
  public String getTitle()
    throws PDFNetException
  {
    return GetTitle(this.a);
  }
  
  public String getType()
    throws PDFNetException
  {
    return GetType(this.a);
  }
  
  public boolean hasActualText()
    throws PDFNetException
  {
    return HasActualText(this.a);
  }
  
  public boolean hasAlt()
    throws PDFNetException
  {
    return HasAlt(this.a);
  }
  
  public boolean hasTitle()
    throws PDFNetException
  {
    return HasTitle(this.a);
  }
  
  public boolean isContentItem(int paramInt)
    throws PDFNetException
  {
    return IsContentItem(this.a, paramInt);
  }
  
  public boolean isValid()
    throws PDFNetException
  {
    return IsValid(this.a);
  }
}
