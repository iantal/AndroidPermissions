package pdftron.PDF;

import pdftron.Common.Matrix2D;
import pdftron.Common.PDFNetException;
import pdftron.SDF.Obj;

public class GState
{
  public static final int e_BG_funct = 33;
  public static final int e_UCR_funct = 34;
  public static final int e_absolute_colorimetric = 0;
  public static final int e_alpha_is_shape = 25;
  public static final int e_auto_stoke_adjust = 28;
  public static final int e_bevel_join = 2;
  public static final int e_bl_color = 16;
  public static final int e_bl_color_burn = 8;
  public static final int e_bl_color_dodge = 7;
  public static final int e_bl_compatible = 0;
  public static final int e_bl_darken = 5;
  public static final int e_bl_difference = 4;
  public static final int e_bl_exclusion = 9;
  public static final int e_bl_hard_light = 10;
  public static final int e_bl_hue = 14;
  public static final int e_bl_lighten = 6;
  public static final int e_bl_luminosity = 13;
  public static final int e_bl_multiply = 2;
  public static final int e_bl_normal = 1;
  public static final int e_bl_overlay = 11;
  public static final int e_bl_saturation = 15;
  public static final int e_bl_screen = 3;
  public static final int e_bl_soft_light = 12;
  public static final int e_blend_mode = 22;
  public static final int e_butt_cap = 0;
  public static final int e_char_spacing = 12;
  public static final int e_clip_text = 7;
  public static final int e_dash_pattern = 11;
  public static final int e_fill_clip_text = 4;
  public static final int e_fill_color = 5;
  public static final int e_fill_cs = 4;
  public static final int e_fill_overprint = 30;
  public static final int e_fill_stroke_clip_text = 6;
  public static final int e_fill_stroke_text = 2;
  public static final int e_fill_text = 0;
  public static final int e_flatness = 9;
  public static final int e_font = 16;
  public static final int e_font_size = 17;
  public static final int e_halftone = 35;
  public static final int e_horizontal_scale = 14;
  public static final int e_invisible_text = 3;
  public static final int e_leading = 15;
  public static final int e_line_cap = 7;
  public static final int e_line_join = 8;
  public static final int e_line_width = 6;
  public static final int e_miter_join = 0;
  public static final int e_miter_limit = 10;
  public static final int e_null = 36;
  public static final int e_opacity_fill = 23;
  public static final int e_opacity_stroke = 24;
  public static final int e_overprint_mode = 31;
  public static final int e_perceptual = 3;
  public static final int e_relative_colorimetric = 1;
  public static final int e_rendering_intent = 1;
  public static final int e_round_cap = 1;
  public static final int e_round_join = 1;
  public static final int e_saturation = 2;
  public static final int e_smoothnes = 27;
  public static final int e_soft_mask = 26;
  public static final int e_square_cap = 2;
  public static final int e_stroke_clip_text = 5;
  public static final int e_stroke_color = 3;
  public static final int e_stroke_cs = 2;
  public static final int e_stroke_overprint = 29;
  public static final int e_stroke_text = 1;
  public static final int e_text_knockout = 20;
  public static final int e_text_pos_offset = 21;
  public static final int e_text_render_mode = 18;
  public static final int e_text_rise = 19;
  public static final int e_transfer_funct = 32;
  public static final int e_transform = 0;
  public static final int e_word_spacing = 13;
  long a;
  private Object b;
  private Object c;
  
  GState(long paramLong, Object paramObject1, Object paramObject2)
  {
    this.a = paramLong;
    this.b = paramObject1;
    this.c = paramObject2;
  }
  
  private static native void Concat(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6);
  
  private static native void Concat(long paramLong1, long paramLong2);
  
  private static native boolean GetAISFlag(long paramLong);
  
  private static native boolean GetAutoStrokeAdjust(long paramLong);
  
  private static native long GetBlackGenFunct(long paramLong);
  
  private static native int GetBlendMode(long paramLong);
  
  private static native double GetCharSpacing(long paramLong);
  
  private static native double[] GetDashes(long paramLong);
  
  private static native long GetFillColor(long paramLong);
  
  private static native long GetFillColorSpace(long paramLong);
  
  private static native double GetFillOpacity(long paramLong);
  
  private static native boolean GetFillOverprint(long paramLong);
  
  private static native long GetFillPattern(long paramLong);
  
  private static native double GetFlatness(long paramLong);
  
  private static native long GetFont(long paramLong);
  
  private static native double GetFontSize(long paramLong);
  
  private static native long GetHalftone(long paramLong);
  
  private static native double GetHorizontalScale(long paramLong);
  
  private static native double GetLeading(long paramLong);
  
  private static native int GetLineCap(long paramLong);
  
  private static native int GetLineJoin(long paramLong);
  
  private static native double GetLineWidth(long paramLong);
  
  private static native double GetMiterLimit(long paramLong);
  
  private static native int GetOverprintMode(long paramLong);
  
  private static native double GetPhase(long paramLong);
  
  private static native int GetRenderingIntent(long paramLong);
  
  private static native double GetSmoothnessTolerance(long paramLong);
  
  private static native long GetSoftMask(long paramLong);
  
  private static native long GetSoftMaskTransform(long paramLong);
  
  private static native long GetStrokeColor(long paramLong);
  
  private static native long GetStrokeColorSpace(long paramLong);
  
  private static native double GetStrokeOpacity(long paramLong);
  
  private static native boolean GetStrokeOverprint(long paramLong);
  
  private static native long GetStrokePattern(long paramLong);
  
  private static native int GetTextRenderMode(long paramLong);
  
  private static native double GetTextRise(long paramLong);
  
  private static native long GetTransferFunct(long paramLong);
  
  private static native long GetTransform(long paramLong);
  
  private static native long GetUCRFunct(long paramLong);
  
  private static native double GetWordSpacing(long paramLong);
  
  private static native boolean IsTextKnockout(long paramLong);
  
  private static native void SetAISFlag(long paramLong, boolean paramBoolean);
  
  private static native void SetAutoStrokeAdjust(long paramLong, boolean paramBoolean);
  
  private static native void SetBlackGenFunct(long paramLong1, long paramLong2);
  
  private static native void SetBlendMode(long paramLong, int paramInt);
  
  private static native void SetCharSpacing(long paramLong, double paramDouble);
  
  private static native void SetDashPattern(long paramLong, double[] paramArrayOfDouble, double paramDouble);
  
  private static native void SetFillColor(long paramLong1, long paramLong2);
  
  private static native void SetFillColor(long paramLong1, long paramLong2, long paramLong3);
  
  private static native void SetFillColorPt(long paramLong1, long paramLong2);
  
  private static native void SetFillColorSpace(long paramLong1, long paramLong2);
  
  private static native void SetFillOpacity(long paramLong, double paramDouble);
  
  private static native void SetFillOverprint(long paramLong, boolean paramBoolean);
  
  private static native void SetFlatness(long paramLong, double paramDouble);
  
  private static native void SetFont(long paramLong1, long paramLong2, double paramDouble);
  
  private static native void SetHalftone(long paramLong1, long paramLong2);
  
  private static native void SetHorizontalScale(long paramLong, double paramDouble);
  
  private static native void SetLeading(long paramLong, double paramDouble);
  
  private static native void SetLineCap(long paramLong, int paramInt);
  
  private static native void SetLineJoin(long paramLong, int paramInt);
  
  private static native void SetLineWidth(long paramLong, double paramDouble);
  
  private static native void SetMiterLimit(long paramLong, double paramDouble);
  
  private static native void SetOverprintMode(long paramLong, int paramInt);
  
  private static native void SetRenderingIntent(long paramLong, int paramInt);
  
  private static native void SetSmoothnessTolerance(long paramLong, double paramDouble);
  
  private static native void SetSoftMask(long paramLong1, long paramLong2);
  
  private static native void SetStrokeColor(long paramLong1, long paramLong2);
  
  private static native void SetStrokeColor(long paramLong1, long paramLong2, long paramLong3);
  
  private static native void SetStrokeColorPt(long paramLong1, long paramLong2);
  
  private static native void SetStrokeColorSpace(long paramLong1, long paramLong2);
  
  private static native void SetStrokeOpacity(long paramLong, double paramDouble);
  
  private static native void SetStrokeOverprint(long paramLong, boolean paramBoolean);
  
  private static native void SetTextKnockout(long paramLong, boolean paramBoolean);
  
  private static native void SetTextRenderMode(long paramLong, int paramInt);
  
  private static native void SetTextRise(long paramLong, double paramDouble);
  
  private static native void SetTransferFunct(long paramLong1, long paramLong2);
  
  private static native void SetTransform(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6);
  
  private static native void SetTransform(long paramLong1, long paramLong2);
  
  private static native void SetUCRFunct(long paramLong1, long paramLong2);
  
  private static native void SetWordSpacing(long paramLong, double paramDouble);
  
  public PatternColor GetStrokePattern()
    throws PDFNetException
  {
    return PatternColor.a(GetStrokePattern(this.a), this.c);
  }
  
  public void concat(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6)
    throws PDFNetException
  {
    Concat(this.a, paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6);
  }
  
  public void concat(Matrix2D paramMatrix2D)
    throws PDFNetException
  {
    Concat(this.a, paramMatrix2D.__GetHandle());
  }
  
  public boolean getAISFlag()
    throws PDFNetException
  {
    return GetAISFlag(this.a);
  }
  
  public boolean getAutoStrokeAdjust()
    throws PDFNetException
  {
    return GetAutoStrokeAdjust(this.a);
  }
  
  public Obj getBlackGenFunct()
    throws PDFNetException
  {
    return Obj.__Create(GetBlackGenFunct(this.a), this.c);
  }
  
  public int getBlendMode()
    throws PDFNetException
  {
    return GetBlendMode(this.a);
  }
  
  public double getCharSpacing()
    throws PDFNetException
  {
    return GetCharSpacing(this.a);
  }
  
  public double[] getDashes()
    throws PDFNetException
  {
    return GetDashes(this.a);
  }
  
  public ColorPt getFillColor()
    throws PDFNetException
  {
    return new ColorPt(GetFillColor(this.a));
  }
  
  public ColorSpace getFillColorSpace()
    throws PDFNetException
  {
    return ColorSpace.__Create(GetFillColorSpace(this.a), this.b);
  }
  
  public double getFillOpacity()
    throws PDFNetException
  {
    return GetFillOpacity(this.a);
  }
  
  public boolean getFillOverprint()
    throws PDFNetException
  {
    return GetFillOverprint(this.a);
  }
  
  public PatternColor getFillPattern()
    throws PDFNetException
  {
    return PatternColor.a(GetFillPattern(this.a), this.c);
  }
  
  public double getFlatness()
    throws PDFNetException
  {
    return GetFlatness(this.a);
  }
  
  public Font getFont()
    throws PDFNetException
  {
    return Font.a(GetFont(this.a), this.b);
  }
  
  public double getFontSize()
    throws PDFNetException
  {
    return GetFontSize(this.a);
  }
  
  public Obj getHalftone()
    throws PDFNetException
  {
    return Obj.__Create(GetHalftone(this.a), this.c);
  }
  
  public double getHorizontalScale()
    throws PDFNetException
  {
    return GetHorizontalScale(this.a);
  }
  
  public double getLeading()
    throws PDFNetException
  {
    return GetLeading(this.a);
  }
  
  public int getLineCap()
    throws PDFNetException
  {
    return GetLineCap(this.a);
  }
  
  public int getLineJoin()
    throws PDFNetException
  {
    return GetLineJoin(this.a);
  }
  
  public double getLineWidth()
    throws PDFNetException
  {
    return GetLineWidth(this.a);
  }
  
  public double getMiterLimit()
    throws PDFNetException
  {
    return GetMiterLimit(this.a);
  }
  
  public int getOverprintMode()
    throws PDFNetException
  {
    return GetOverprintMode(this.a);
  }
  
  public double getPhase()
    throws PDFNetException
  {
    return GetPhase(this.a);
  }
  
  public int getRenderingIntent()
    throws PDFNetException
  {
    return GetRenderingIntent(this.a);
  }
  
  public double getSmoothnessTolerance()
    throws PDFNetException
  {
    return GetSmoothnessTolerance(this.a);
  }
  
  public Obj getSoftMask()
    throws PDFNetException
  {
    return Obj.__Create(GetSoftMask(this.a), this.c);
  }
  
  public Matrix2D getSoftMaskTransform()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetSoftMaskTransform(this.a));
  }
  
  public ColorPt getStrokeColor()
    throws PDFNetException
  {
    return new ColorPt(GetStrokeColor(this.a));
  }
  
  public ColorSpace getStrokeColorSpace()
    throws PDFNetException
  {
    return ColorSpace.__Create(GetStrokeColorSpace(this.a), this.b);
  }
  
  public double getStrokeOpacity()
    throws PDFNetException
  {
    return GetStrokeOpacity(this.a);
  }
  
  public boolean getStrokeOverprint()
    throws PDFNetException
  {
    return GetStrokeOverprint(this.a);
  }
  
  public int getTextRenderMode()
    throws PDFNetException
  {
    return GetTextRenderMode(this.a);
  }
  
  public double getTextRise()
    throws PDFNetException
  {
    return GetTextRise(this.a);
  }
  
  public Obj getTransferFunct()
    throws PDFNetException
  {
    return Obj.__Create(GetTransferFunct(this.a), this.c);
  }
  
  public Matrix2D getTransform()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetTransform(this.a));
  }
  
  public Obj getUCRFunct()
    throws PDFNetException
  {
    return Obj.__Create(GetUCRFunct(this.a), this.c);
  }
  
  public double getWordSpacing()
    throws PDFNetException
  {
    return GetWordSpacing(this.a);
  }
  
  public boolean isTextKnockout()
    throws PDFNetException
  {
    return IsTextKnockout(this.a);
  }
  
  public void setAISFlag(boolean paramBoolean)
    throws PDFNetException
  {
    SetAISFlag(this.a, paramBoolean);
  }
  
  public void setAutoStrokeAdjust(boolean paramBoolean)
    throws PDFNetException
  {
    SetAutoStrokeAdjust(this.a, paramBoolean);
  }
  
  public void setBlackGenFunct(Obj paramObj)
    throws PDFNetException
  {
    SetBlackGenFunct(this.a, paramObj.__GetHandle());
  }
  
  public void setBlendMode(int paramInt)
    throws PDFNetException
  {
    SetBlendMode(this.a, paramInt);
  }
  
  public void setCharSpacing(double paramDouble)
    throws PDFNetException
  {
    SetCharSpacing(this.a, paramDouble);
  }
  
  public void setDashPattern(double[] paramArrayOfDouble, double paramDouble)
    throws PDFNetException
  {
    SetDashPattern(this.a, paramArrayOfDouble, paramDouble);
  }
  
  public void setFillColor(ColorPt paramColorPt)
    throws PDFNetException
  {
    SetFillColorPt(this.a, paramColorPt.a);
  }
  
  public void setFillColor(PatternColor paramPatternColor)
    throws PDFNetException
  {
    SetFillColor(this.a, paramPatternColor.a);
  }
  
  public void setFillColor(PatternColor paramPatternColor, ColorPt paramColorPt)
    throws PDFNetException
  {
    SetFillColor(this.a, paramPatternColor.a, paramColorPt.a);
  }
  
  public void setFillColorSpace(ColorSpace paramColorSpace)
    throws PDFNetException
  {
    SetFillColorSpace(this.a, paramColorSpace.a);
  }
  
  public void setFillOpacity(double paramDouble)
    throws PDFNetException
  {
    SetFillOpacity(this.a, paramDouble);
  }
  
  public void setFillOverprint(boolean paramBoolean)
    throws PDFNetException
  {
    SetFillOverprint(this.a, paramBoolean);
  }
  
  public void setFlatness(double paramDouble)
    throws PDFNetException
  {
    SetFlatness(this.a, paramDouble);
  }
  
  public void setFont(Font paramFont, double paramDouble)
    throws PDFNetException
  {
    SetFont(this.a, paramFont.a, paramDouble);
  }
  
  public void setHalftone(Obj paramObj)
    throws PDFNetException
  {
    SetHalftone(this.a, paramObj.__GetHandle());
  }
  
  public void setHorizontalScale(double paramDouble)
    throws PDFNetException
  {
    SetHorizontalScale(this.a, paramDouble);
  }
  
  public void setLeading(double paramDouble)
    throws PDFNetException
  {
    SetLeading(this.a, paramDouble);
  }
  
  public void setLineCap(int paramInt)
    throws PDFNetException
  {
    SetLineCap(this.a, paramInt);
  }
  
  public void setLineJoin(int paramInt)
    throws PDFNetException
  {
    SetLineJoin(this.a, paramInt);
  }
  
  public void setLineWidth(double paramDouble)
    throws PDFNetException
  {
    SetLineWidth(this.a, paramDouble);
  }
  
  public void setMiterLimit(double paramDouble)
    throws PDFNetException
  {
    SetMiterLimit(this.a, paramDouble);
  }
  
  public void setOverprintMode(int paramInt)
    throws PDFNetException
  {
    SetOverprintMode(this.a, paramInt);
  }
  
  public void setRenderingIntent(int paramInt)
    throws PDFNetException
  {
    SetRenderingIntent(this.a, paramInt);
  }
  
  public void setSmoothnessTolerance(double paramDouble)
    throws PDFNetException
  {
    SetSmoothnessTolerance(this.a, paramDouble);
  }
  
  public void setSoftMask(Obj paramObj)
    throws PDFNetException
  {
    SetSoftMask(this.a, paramObj.__GetHandle());
  }
  
  public void setStrokeColor(ColorPt paramColorPt)
    throws PDFNetException
  {
    SetStrokeColorPt(this.a, paramColorPt.a);
  }
  
  public void setStrokeColor(PatternColor paramPatternColor)
    throws PDFNetException
  {
    SetStrokeColor(this.a, paramPatternColor.a);
  }
  
  public void setStrokeColor(PatternColor paramPatternColor, ColorPt paramColorPt)
    throws PDFNetException
  {
    SetStrokeColor(this.a, paramPatternColor.a, paramColorPt.a);
  }
  
  public void setStrokeColorSpace(ColorSpace paramColorSpace)
    throws PDFNetException
  {
    SetStrokeColorSpace(this.a, paramColorSpace.a);
  }
  
  public void setStrokeOpacity(double paramDouble)
    throws PDFNetException
  {
    SetStrokeOpacity(this.a, paramDouble);
  }
  
  public void setStrokeOverprint(boolean paramBoolean)
    throws PDFNetException
  {
    SetStrokeOverprint(this.a, paramBoolean);
  }
  
  public void setTextKnockout(boolean paramBoolean)
    throws PDFNetException
  {
    SetTextKnockout(this.a, paramBoolean);
  }
  
  public void setTextRenderMode(int paramInt)
    throws PDFNetException
  {
    SetTextRenderMode(this.a, paramInt);
  }
  
  public void setTextRise(double paramDouble)
    throws PDFNetException
  {
    SetTextRise(this.a, paramDouble);
  }
  
  public void setTransferFunct(Obj paramObj)
    throws PDFNetException
  {
    SetTransferFunct(this.a, paramObj.__GetHandle());
  }
  
  public void setTransform(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6)
    throws PDFNetException
  {
    SetTransform(this.a, paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramDouble5, paramDouble6);
  }
  
  public void setTransform(Matrix2D paramMatrix2D)
    throws PDFNetException
  {
    SetTransform(this.a, paramMatrix2D.__GetHandle());
  }
  
  public void setUCRFunct(Obj paramObj)
    throws PDFNetException
  {
    SetUCRFunct(this.a, paramObj.__GetHandle());
  }
  
  public void setWordSpacing(double paramDouble)
    throws PDFNetException
  {
    SetWordSpacing(this.a, paramDouble);
  }
}
