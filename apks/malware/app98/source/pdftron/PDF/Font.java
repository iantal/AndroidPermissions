package pdftron.PDF;

import pdftron.Common.Matrix2D;
import pdftron.Common.PDFNetException;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;

public class Font
{
  public static final int e_CIDType0 = 5;
  public static final int e_CIDType2 = 6;
  public static final int e_IdentityH = 0;
  public static final int e_Indices = 1;
  public static final int e_MMType1 = 2;
  public static final int e_TrueType = 1;
  public static final int e_Type0 = 4;
  public static final int e_Type1 = 0;
  public static final int e_Type3 = 3;
  public static final int e_courier = 8;
  public static final int e_courier_bold = 9;
  public static final int e_courier_bold_oblique = 11;
  public static final int e_courier_oblique = 10;
  public static final int e_helvetica = 4;
  public static final int e_helvetica_bold = 5;
  public static final int e_helvetica_bold_oblique = 7;
  public static final int e_helvetica_oblique = 6;
  public static final int e_null = 14;
  public static final int e_symbol = 12;
  public static final int e_times_bold = 1;
  public static final int e_times_bold_italic = 3;
  public static final int e_times_italic = 2;
  public static final int e_times_roman = 0;
  public static final int e_zapf_dingbats = 13;
  long a;
  Object b;
  
  public Font()
  {
    this.a = 0L;
    this.b = null;
  }
  
  private Font(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public Font(Obj paramObj)
  {
    this.a = paramObj.__GetHandle();
    this.b = paramObj.__GetRefHandle();
  }
  
  private static native long Create(long paramLong, int paramInt, boolean paramBoolean);
  
  private static native long CreateCIDTrueTypeFont(long paramLong, String paramString, boolean paramBoolean1, boolean paramBoolean2, int paramInt);
  
  private static native long CreateTrueTypeFont(long paramLong, String paramString, boolean paramBoolean1, boolean paramBoolean2);
  
  private static native long CreateType1Font(long paramLong, String paramString, boolean paramBoolean);
  
  private static native double GetAscent(long paramLong);
  
  private static native long GetBBox(long paramLong);
  
  private static native long GetCharCodeIterator(long paramLong);
  
  private static native double GetDescent(long paramLong);
  
  private static native long GetDescriptor(long paramLong);
  
  private static native long GetEmbeddedFont(long paramLong);
  
  private static native int GetEmbeddedFontBufSize(long paramLong);
  
  private static native String GetEmbeddedFontName(long paramLong);
  
  private static native String[] GetEncoding(long paramLong);
  
  private static native String GetFamilyName(long paramLong);
  
  private static native PathData GetGlyphPath(long paramLong1, long paramLong2, boolean paramBoolean, long paramLong3);
  
  private static native double GetMaxWidth(long paramLong);
  
  private static native double GetMissingWidth(long paramLong);
  
  private static native String GetName(long paramLong);
  
  private static native int GetStandardType1FontType(long paramLong);
  
  private static native int GetType(long paramLong);
  
  private static native long GetType3FontMatrix(long paramLong);
  
  private static native long GetType3GlyphStream(long paramLong1, long paramLong2);
  
  private static native int GetTypeStatic(long paramLong);
  
  private static native short GetUnitsPerEm(long paramLong);
  
  private static native double GetWidth(long paramLong1, long paramLong2);
  
  private static native boolean IsAllCap(long paramLong);
  
  private static native boolean IsCFF(long paramLong);
  
  private static native boolean IsEmbedded(long paramLong);
  
  private static native boolean IsFixedWidth(long paramLong);
  
  private static native boolean IsForceBold(long paramLong);
  
  private static native boolean IsHorizontalMode(long paramLong);
  
  private static native boolean IsItalic(long paramLong);
  
  private static native boolean IsSerif(long paramLong);
  
  private static native boolean IsSimple(long paramLong);
  
  private static native boolean IsSymbolic(long paramLong);
  
  private static native char[] MapToUnicode(long paramLong1, long paramLong2);
  
  static Font a(long paramLong, Object paramObject)
  {
    if (paramLong == 0L) {
      return null;
    }
    return new Font(paramLong, paramObject);
  }
  
  public static Font create(Doc paramDoc, int paramInt)
    throws PDFNetException
  {
    return a(Create(paramDoc.__GetHandle(), paramInt, false), paramDoc);
  }
  
  public static Font create(Doc paramDoc, int paramInt, boolean paramBoolean)
    throws PDFNetException
  {
    return a(Create(paramDoc.__GetHandle(), paramInt, paramBoolean), paramDoc);
  }
  
  public static Font createCIDTrueTypeFont(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return a(CreateCIDTrueTypeFont(paramDoc.__GetHandle(), paramString, true, true, 0), paramDoc);
  }
  
  public static Font createCIDTrueTypeFont(Doc paramDoc, String paramString, boolean paramBoolean1, boolean paramBoolean2)
    throws PDFNetException
  {
    return a(CreateCIDTrueTypeFont(paramDoc.__GetHandle(), paramString, paramBoolean1, paramBoolean2, 0), paramDoc);
  }
  
  public static Font createCIDTrueTypeFont(Doc paramDoc, String paramString, boolean paramBoolean1, boolean paramBoolean2, int paramInt)
    throws PDFNetException
  {
    return a(CreateCIDTrueTypeFont(paramDoc.__GetHandle(), paramString, paramBoolean1, paramBoolean2, paramInt), paramDoc);
  }
  
  public static Font createTrueTypeFont(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return a(CreateTrueTypeFont(paramDoc.__GetHandle(), paramString, true, true), paramDoc);
  }
  
  public static Font createTrueTypeFont(Doc paramDoc, String paramString, boolean paramBoolean)
    throws PDFNetException
  {
    return a(CreateTrueTypeFont(paramDoc.__GetHandle(), paramString, paramBoolean, true), paramDoc);
  }
  
  public static Font createTrueTypeFont(Doc paramDoc, String paramString, boolean paramBoolean1, boolean paramBoolean2)
    throws PDFNetException
  {
    return a(CreateTrueTypeFont(paramDoc.__GetHandle(), paramString, paramBoolean1, paramBoolean2), paramDoc);
  }
  
  public static Font createType1Font(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    return a(CreateType1Font(paramDoc.__GetHandle(), paramString, true), paramDoc);
  }
  
  public static Font createType1Font(Doc paramDoc, String paramString, boolean paramBoolean)
    throws PDFNetException
  {
    return a(CreateType1Font(paramDoc.__GetHandle(), paramString, paramBoolean), paramDoc);
  }
  
  public static int getType(Obj paramObj)
    throws PDFNetException
  {
    return GetTypeStatic(paramObj.__GetHandle());
  }
  
  public Obj GetDescriptor()
    throws PDFNetException
  {
    return Obj.__Create(GetDescriptor(this.a), this.b);
  }
  
  public Obj GetSDFObj()
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public double getAscent()
    throws PDFNetException
  {
    return GetAscent(this.a);
  }
  
  public Rect getBBox()
    throws PDFNetException
  {
    return new Rect(GetBBox(this.a));
  }
  
  public FontCharCodeIterator getCharCodeIterator()
    throws PDFNetException
  {
    return new FontCharCodeIterator(GetCharCodeIterator(this.a), this.b);
  }
  
  public double getDescent()
    throws PDFNetException
  {
    return GetDescent(this.a);
  }
  
  public Obj getEmbeddedFont()
    throws PDFNetException
  {
    return Obj.__Create(GetEmbeddedFont(this.a), this.b);
  }
  
  public int getEmbeddedFontBufSize()
    throws PDFNetException
  {
    return GetEmbeddedFontBufSize(this.a);
  }
  
  public String getEmbeddedFontName()
    throws PDFNetException
  {
    return GetEmbeddedFontName(this.a);
  }
  
  public String[] getEncoding()
    throws PDFNetException
  {
    return GetEncoding(this.a);
  }
  
  public String getFamilyName()
    throws PDFNetException
  {
    return GetFamilyName(this.a);
  }
  
  public PathData getGlyphPath(long paramLong, boolean paramBoolean)
  {
    return GetGlyphPath(this.a, paramLong, paramBoolean, 0L);
  }
  
  public PathData getGlyphPath(long paramLong, boolean paramBoolean, Matrix2D paramMatrix2D)
  {
    return GetGlyphPath(this.a, paramLong, paramBoolean, paramMatrix2D.__GetHandle());
  }
  
  public double getMaxWidth()
    throws PDFNetException
  {
    return GetMaxWidth(this.a);
  }
  
  public double getMissingWidth()
    throws PDFNetException
  {
    return GetMissingWidth(this.a);
  }
  
  public String getName()
    throws PDFNetException
  {
    return GetName(this.a);
  }
  
  public int getStandardType1FontType()
    throws PDFNetException
  {
    return GetStandardType1FontType(this.a);
  }
  
  public int getType()
    throws PDFNetException
  {
    return GetType(this.a);
  }
  
  public Matrix2D getType3FontMatrix()
    throws PDFNetException
  {
    return Matrix2D.__Create(GetType3FontMatrix(this.a));
  }
  
  public Obj getType3GlyphStream(long paramLong)
  {
    return Obj.__Create(GetType3GlyphStream(this.a, paramLong), this.b);
  }
  
  public short getUnitsPerEm()
    throws PDFNetException
  {
    return GetUnitsPerEm(this.a);
  }
  
  public double getWidth(long paramLong)
    throws PDFNetException
  {
    return GetWidth(this.a, paramLong);
  }
  
  public boolean isAllCap()
    throws PDFNetException
  {
    return IsAllCap(this.a);
  }
  
  public boolean isCFF()
    throws PDFNetException
  {
    return IsCFF(this.a);
  }
  
  public boolean isEmbedded()
    throws PDFNetException
  {
    return IsEmbedded(this.a);
  }
  
  public boolean isFixedWidth()
    throws PDFNetException
  {
    return IsFixedWidth(this.a);
  }
  
  public boolean isForceBold()
    throws PDFNetException
  {
    return IsForceBold(this.a);
  }
  
  public boolean isHorizontalMode()
    throws PDFNetException
  {
    return IsHorizontalMode(this.a);
  }
  
  public boolean isItalic()
    throws PDFNetException
  {
    return IsItalic(this.a);
  }
  
  public boolean isSerif()
    throws PDFNetException
  {
    return IsSerif(this.a);
  }
  
  public boolean isSimple()
    throws PDFNetException
  {
    return IsSimple(this.a);
  }
  
  public boolean isSymbolic()
    throws PDFNetException
  {
    return IsSymbolic(this.a);
  }
  
  public char[] mapToUnicode(long paramLong)
    throws PDFNetException
  {
    return MapToUnicode(this.a, paramLong);
  }
}
