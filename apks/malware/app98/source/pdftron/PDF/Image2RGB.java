package pdftron.PDF;

import java.util.HashMap;
import java.util.LinkedList;
import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.SDF.Obj;

public class Image2RGB
  extends Filter
  implements t
{
  private Thread a;
  
  public Image2RGB(Element paramElement)
    throws PDFNetException
  {
    super(Image2RGBE(paramElement.a), null);
    clearList();
  }
  
  public Image2RGB(Image paramImage)
    throws PDFNetException
  {
    super(Image2RGBI(paramImage.a), null);
    clearList();
  }
  
  public Image2RGB(Obj paramObj)
    throws PDFNetException
  {
    super(Image2RGBO(paramObj.__GetHandle()), null);
    clearList();
  }
  
  private static native long Image2RGBE(long paramLong);
  
  private static native long Image2RGBI(long paramLong);
  
  private static native long Image2RGBO(long paramLong);
  
  protected void clearList()
    throws PDFNetException
  {
    this.a = Thread.currentThread();
    synchronized (s.b)
    {
      Object localObject1 = s.b.get(this.a);
      if (localObject1 == null) {
        break label72;
      }
      try
      {
        ??? = (LinkedList)localObject1;
        while (!((LinkedList)???).isEmpty())
        {
          ((t)((LinkedList)???).removeFirst()).destroy();
          continue;
          localObject2 = finally;
        }
      }
      finally {}
    }
    return;
    label72:
    LinkedList localLinkedList = new LinkedList();
    synchronized (s.b)
    {
      s.b.put(this.a, localLinkedList);
      return;
    }
  }
  
  public void destroy()
    throws PDFNetException
  {
    super.destroy();
  }
  
  protected void finalize()
    throws Throwable
  {
    if ((this.impl != 0L) && (this.ref == null)) {}
    Object localObject2;
    synchronized (s.b)
    {
      localObject2 = s.b.get(this.a);
      if (localObject2 == null) {}
    }
  }
}
