package pdftron.PDF.Annots;

import pdftron.Common.PDFNetException;
import pdftron.PDF.Annot;
import pdftron.PDF.Point;
import pdftron.PDF.Rect;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;

public class Line
  extends Markup
{
  public static final int e_Butt = 5;
  public static final int e_Circle = 1;
  public static final int e_ClosedArrow = 4;
  public static final int e_Diamond = 2;
  public static final int e_Inline = 0;
  public static final int e_LineArrow = 0;
  public static final int e_LineDimension = 1;
  public static final int e_None = 9;
  public static final int e_OpenArrow = 3;
  public static final int e_RClosedArrow = 7;
  public static final int e_ROpenArrow = 6;
  public static final int e_Slash = 8;
  public static final int e_Square = 0;
  public static final int e_Top = 1;
  public static final int e_Unknown = 10;
  public static final int e_null = 2;
  
  public Line() {}
  
  Line(long paramLong, Object paramObject)
  {
    super(paramLong, paramObject);
  }
  
  public Line(Annot paramAnnot)
    throws PDFNetException
  {
    super(paramAnnot.getSDFObj());
  }
  
  public Line(Obj paramObj)
  {
    super(paramObj);
  }
  
  private static native long Create(long paramLong1, long paramLong2);
  
  private static native int GetCaptionPosition(long paramLong);
  
  private static native double GetEndPointx(long paramLong);
  
  private static native double GetEndPointy(long paramLong);
  
  private static native int GetEndStyle(long paramLong);
  
  private static native int GetIntentType(long paramLong);
  
  private static native double GetLeaderLineExtensionLength(long paramLong);
  
  private static native double GetLeaderLineLength(long paramLong);
  
  private static native double GetLeaderLineOffset(long paramLong);
  
  private static native boolean GetShowCaption(long paramLong);
  
  private static native double GetStartPointx(long paramLong);
  
  private static native double GetStartPointy(long paramLong);
  
  private static native int GetStartStyle(long paramLong);
  
  private static native double GetTextHOffset(long paramLong);
  
  private static native double GetTextVOffset(long paramLong);
  
  private static native void SetCapPos(long paramLong, int paramInt);
  
  private static native void SetEndPoint(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native void SetEndStyle(long paramLong, int paramInt);
  
  private static native void SetIntentType(long paramLong, int paramInt);
  
  private static native void SetLeaderLineExtensionLength(long paramLong, double paramDouble);
  
  private static native void SetLeaderLineLength(long paramLong, double paramDouble);
  
  private static native void SetLeaderLineOffset(long paramLong, double paramDouble);
  
  private static native void SetShowCaption(long paramLong, boolean paramBoolean);
  
  private static native void SetStartPoint(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native void SetStartStyle(long paramLong, int paramInt);
  
  private static native void SetTextHOffset(long paramLong, double paramDouble);
  
  private static native void SetTextVOffset(long paramLong, double paramDouble);
  
  public static Line create(Doc paramDoc, Rect paramRect)
    throws PDFNetException
  {
    return new Line(Create(paramDoc.__GetHandle(), paramRect.__GetHandle()), paramDoc);
  }
  
  public int getCaptionPosition()
    throws PDFNetException
  {
    return GetCaptionPosition(__GetHandle());
  }
  
  public Point getEndPoint()
    throws PDFNetException
  {
    return new Point(GetEndPointx(__GetHandle()), GetEndPointy(__GetHandle()));
  }
  
  public int getEndStyle()
    throws PDFNetException
  {
    return GetEndStyle(__GetHandle());
  }
  
  public int getIntentType()
    throws PDFNetException
  {
    return GetIntentType(__GetHandle());
  }
  
  public double getLeaderLineExtensionLength()
    throws PDFNetException
  {
    return GetLeaderLineExtensionLength(__GetHandle());
  }
  
  public double getLeaderLineLength()
    throws PDFNetException
  {
    return GetLeaderLineLength(__GetHandle());
  }
  
  public double getLeaderLineOffset()
    throws PDFNetException
  {
    return GetLeaderLineOffset(__GetHandle());
  }
  
  public boolean getShowCaption()
    throws PDFNetException
  {
    return GetShowCaption(__GetHandle());
  }
  
  public Point getStartPoint()
    throws PDFNetException
  {
    return new Point(GetStartPointx(__GetHandle()), GetStartPointy(__GetHandle()));
  }
  
  public int getStartStyle()
    throws PDFNetException
  {
    return GetStartStyle(__GetHandle());
  }
  
  public double getTextHOffset()
    throws PDFNetException
  {
    return GetTextHOffset(__GetHandle());
  }
  
  public double getTextVOffset()
    throws PDFNetException
  {
    return GetTextVOffset(__GetHandle());
  }
  
  public void setCapPos(int paramInt)
    throws PDFNetException
  {
    SetCapPos(__GetHandle(), paramInt);
  }
  
  public void setEndPoint(Point paramPoint)
    throws PDFNetException
  {
    SetEndPoint(__GetHandle(), paramPoint.x, paramPoint.y);
  }
  
  public void setEndStyle(int paramInt)
    throws PDFNetException
  {
    SetEndStyle(__GetHandle(), paramInt);
  }
  
  public void setIntentType(int paramInt)
    throws PDFNetException
  {
    SetIntentType(__GetHandle(), paramInt);
  }
  
  public void setLeaderLineExtensionLength(double paramDouble)
    throws PDFNetException
  {
    SetLeaderLineExtensionLength(__GetHandle(), paramDouble);
  }
  
  public void setLeaderLineLength(double paramDouble)
    throws PDFNetException
  {
    SetLeaderLineLength(__GetHandle(), paramDouble);
  }
  
  public void setLeaderLineOffset(double paramDouble)
    throws PDFNetException
  {
    SetLeaderLineOffset(__GetHandle(), paramDouble);
  }
  
  public void setShowCaption(boolean paramBoolean)
    throws PDFNetException
  {
    SetShowCaption(__GetHandle(), paramBoolean);
  }
  
  public void setStartPoint(Point paramPoint)
    throws PDFNetException
  {
    SetStartPoint(__GetHandle(), paramPoint.x, paramPoint.y);
  }
  
  public void setStartStyle(int paramInt)
    throws PDFNetException
  {
    SetStartStyle(__GetHandle(), paramInt);
  }
  
  public void setTextHOffset(double paramDouble)
    throws PDFNetException
  {
    SetTextHOffset(__GetHandle(), paramDouble);
  }
  
  public void setTextVOffset(double paramDouble)
    throws PDFNetException
  {
    SetTextVOffset(__GetHandle(), paramDouble);
  }
}
