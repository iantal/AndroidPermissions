package pdftron.PDF;

import java.io.PrintStream;
import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;
import pdftron.SDF.ObjSet;

public class Convert
{
  public Convert() {}
  
  private static native void DocToEmf(long paramLong, String paramString);
  
  private static native void DocToSvg(long paramLong, String paramString);
  
  private static native void DocToSvgWithOptions(long paramLong1, String paramString, long paramLong2);
  
  private static native void DocToXod(long paramLong1, String paramString, long paramLong2);
  
  private static native long DocToXodStream(long paramLong1, long paramLong2);
  
  private static native void DocToXps(long paramLong1, String paramString, long paramLong2);
  
  private static native void FileToPdf(long paramLong, String paramString);
  
  private static native void FileToXod(String paramString1, String paramString2, long paramLong);
  
  private static native long FileToXodStream(String paramString, long paramLong);
  
  private static native void FileToXps(String paramString1, String paramString2, long paramLong);
  
  private static native void FromEmf(long paramLong, String paramString);
  
  private static native void FromXps(long paramLong, String paramString);
  
  private static native void FromXpsBuf(long paramLong, byte[] paramArrayOfByte);
  
  private static native void PageToEmf(long paramLong, String paramString);
  
  private static native void PageToSvg(long paramLong, String paramString);
  
  private static native void PageToSvgWithOptions(long paramLong1, String paramString, long paramLong2);
  
  private static native boolean RequiresPrinter(String paramString);
  
  public static void fromEmf(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    FromEmf(paramDoc.__GetHandle(), paramString);
  }
  
  public static void fromXps(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    FromXps(paramDoc.__GetHandle(), paramString);
  }
  
  public static void fromXps(Doc paramDoc, byte[] paramArrayOfByte)
    throws PDFNetException
  {
    FromXpsBuf(paramDoc.__GetHandle(), paramArrayOfByte);
  }
  
  public static boolean requiresPrinter(String paramString)
    throws PDFNetException
  {
    return RequiresPrinter(paramString);
  }
  
  public static void toEmf(Page paramPage, String paramString)
    throws PDFNetException
  {
    PageToEmf(paramPage.a, paramString);
  }
  
  public static void toEmf(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    DocToEmf(paramDoc.__GetHandle(), paramString);
  }
  
  public static void toPdf(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    FileToPdf(paramDoc.__GetHandle(), paramString);
  }
  
  public static void toSvg(Page paramPage, String paramString)
    throws PDFNetException
  {
    PageToSvg(paramPage.a, paramString);
  }
  
  public static void toSvg(Page paramPage, String paramString, SVGOutputOptions paramSVGOutputOptions)
    throws PDFNetException
  {
    PageToSvgWithOptions(paramPage.a, paramString, paramSVGOutputOptions.a.__GetHandle());
  }
  
  public static void toSvg(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    DocToSvg(paramDoc.__GetHandle(), paramString);
  }
  
  public static void toSvg(Doc paramDoc, String paramString, SVGOutputOptions paramSVGOutputOptions)
    throws PDFNetException
  {
    DocToSvgWithOptions(paramDoc.__GetHandle(), paramString, paramSVGOutputOptions.a.__GetHandle());
  }
  
  public static Filter toXod(String paramString)
    throws PDFNetException
  {
    return Filter.__Create(FileToXodStream(paramString, 0L), null);
  }
  
  public static Filter toXod(String paramString, XODOutputOptions paramXODOutputOptions)
    throws PDFNetException
  {
    return Filter.__Create(FileToXodStream(paramString, paramXODOutputOptions.a.__GetHandle()), null);
  }
  
  public static Filter toXod(Doc paramDoc)
    throws PDFNetException
  {
    return Filter.__Create(DocToXodStream(paramDoc.__GetHandle(), 0L), null);
  }
  
  public static Filter toXod(Doc paramDoc, XODOutputOptions paramXODOutputOptions)
    throws PDFNetException
  {
    return Filter.__Create(DocToXodStream(paramDoc.__GetHandle(), paramXODOutputOptions.a.__GetHandle()), null);
  }
  
  public static void toXod(String paramString1, String paramString2)
    throws PDFNetException
  {
    FileToXod(paramString1, paramString2, 0L);
  }
  
  public static void toXod(String paramString1, String paramString2, XODOutputOptions paramXODOutputOptions)
    throws PDFNetException
  {
    FileToXod(paramString1, paramString2, paramXODOutputOptions.a.__GetHandle());
  }
  
  public static void toXod(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    DocToXod(paramDoc.__GetHandle(), paramString, 0L);
  }
  
  public static void toXod(Doc paramDoc, String paramString, XODOutputOptions paramXODOutputOptions)
    throws PDFNetException
  {
    DocToXod(paramDoc.__GetHandle(), paramString, paramXODOutputOptions.a.__GetHandle());
  }
  
  public static void toXps(String paramString1, String paramString2)
    throws PDFNetException
  {
    FileToXps(paramString1, paramString2, 0L);
  }
  
  public static void toXps(String paramString1, String paramString2, XPSOutputOptions paramXPSOutputOptions)
    throws PDFNetException
  {
    FileToXps(paramString1, paramString2, paramXPSOutputOptions.a.__GetHandle());
  }
  
  public static void toXps(Doc paramDoc, String paramString)
    throws PDFNetException
  {
    DocToXps(paramDoc.__GetHandle(), paramString, 0L);
  }
  
  public static void toXps(Doc paramDoc, String paramString, XPSOutputOptions paramXPSOutputOptions)
    throws PDFNetException
  {
    DocToXps(paramDoc.__GetHandle(), paramString, paramXPSOutputOptions.a.__GetHandle());
  }
  
  public static class SVGOutputOptions
  {
    Obj a;
    private ObjSet b;
    
    public SVGOutputOptions()
    {
      try
      {
        this.b = new ObjSet();
        this.a = this.b.createDict();
        return;
      }
      catch (PDFNetException localPDFNetException)
      {
        System.err.println("Error occurred when creating SVGOutputOptions.");
      }
    }
    
    public void setEmbedImages(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("EMBEDIMAGES", paramBoolean);
    }
    
    public void setIndividualCharPlacement(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("INDIVIDUALCHARPLACEMENT", paramBoolean);
    }
    
    public void setNoFonts(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("NOFONTS", paramBoolean);
    }
    
    public void setNoUnicode(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("NOUNICODE", paramBoolean);
    }
    
    public void setRemoveCharPlacement(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("REMOVECHARPLACEMENT", paramBoolean);
    }
  }
  
  public static class XODOutputOptions
    extends Convert.XPSOutputCommonOptions
  {
    public XODOutputOptions() {}
    
    public void setElementLimit(int paramInt)
      throws PDFNetException
    {
      this.a.putNumber("ELEMENTLIMIT", paramInt);
    }
    
    public void setOpacityMaskWorkaround(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("MASKRENDER", paramBoolean);
    }
    
    public void setOutputThumbnails(boolean paramBoolean)
      throws PDFNetException
    {
      Obj localObj = this.a;
      if (!paramBoolean) {}
      for (paramBoolean = true;; paramBoolean = false)
      {
        localObj.putBool("NOTHUMBS", paramBoolean);
        return;
      }
    }
  }
  
  public static class XPSOutputCommonOptions
  {
    Obj a;
    private ObjSet b;
    
    public XPSOutputCommonOptions()
    {
      try
      {
        this.b = new ObjSet();
        this.a = this.b.createDict();
        return;
      }
      catch (PDFNetException localPDFNetException)
      {
        System.err.println("Error Occurred when creating XPSOutputCommonOptions.");
      }
    }
    
    public void setDPI(int paramInt)
      throws PDFNetException
    {
      this.a.putNumber("DPI", paramInt);
    }
    
    public void setPrintMode(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("PRINTMODE", paramBoolean);
    }
    
    public void setRenderPages(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("RENDER", paramBoolean);
    }
    
    public void setThickenLines(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("THICKENLINES", paramBoolean);
    }
  }
  
  public static class XPSOutputOptions
    extends Convert.XPSOutputCommonOptions
  {
    public XPSOutputOptions() {}
    
    public void setOpenXps(boolean paramBoolean)
      throws PDFNetException
    {
      this.a.putBool("OPENXPS", paramBoolean);
    }
  }
}
