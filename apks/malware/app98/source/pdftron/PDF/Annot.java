package pdftron.PDF;

import pdftron.Common.PDFNetException;
import pdftron.SDF.Doc;
import pdftron.SDF.Obj;

public class Annot
{
  public static final int e_3D = 24;
  public static final int e_Caret = 13;
  public static final int e_Circle = 5;
  public static final int e_FileAttachment = 16;
  public static final int e_FreeText = 2;
  public static final int e_Highlight = 8;
  public static final int e_Ink = 14;
  public static final int e_Line = 3;
  public static final int e_Link = 1;
  public static final int e_Movie = 18;
  public static final int e_Polygon = 6;
  public static final int e_Polyline = 7;
  public static final int e_Popup = 15;
  public static final int e_PrinterMark = 21;
  public static final int e_Projection = 26;
  public static final int e_Redact = 25;
  public static final int e_RichMedia = 27;
  public static final int e_Screen = 20;
  public static final int e_Sound = 17;
  public static final int e_Square = 4;
  public static final int e_Squiggly = 10;
  public static final int e_Stamp = 12;
  public static final int e_StrikeOut = 11;
  public static final int e_Text = 0;
  public static final int e_TrapNet = 22;
  public static final int e_Underline = 9;
  public static final int e_Unknown = 28;
  public static final int e_Watermark = 23;
  public static final int e_Widget = 19;
  public static final int e_down = 2;
  public static final int e_hidden = 1;
  public static final int e_invisible = 0;
  public static final int e_locked = 7;
  public static final int e_locked_contents = 9;
  public static final int e_no_rotate = 4;
  public static final int e_no_view = 5;
  public static final int e_no_zoom = 3;
  public static final int e_normal = 0;
  public static final int e_print = 2;
  public static final int e_read_only = 6;
  public static final int e_rollover = 1;
  public static final int e_toggle_no_view = 8;
  long a;
  private Object b;
  
  public Annot()
  {
    this.a = 0L;
    this.b = null;
  }
  
  protected Annot(long paramLong, Object paramObject)
  {
    this.a = paramLong;
    this.b = paramObject;
  }
  
  public Annot(Obj paramObj)
  {
    this.a = paramObj.__GetHandle();
    this.b = paramObj.__GetRefHandle();
  }
  
  private static native double[] BSGetDash(long paramLong);
  
  private static native int BSGetHR(long paramLong);
  
  private static native int BSGetStyle(long paramLong);
  
  private static native int BSGetVR(long paramLong);
  
  private static native double BSGetWidth(long paramLong);
  
  private static native void BSSetDash(long paramLong, double[] paramArrayOfDouble);
  
  private static native void BSSetHR(long paramLong, int paramInt);
  
  private static native void BSSetStyle(long paramLong, int paramInt);
  
  private static native void BSSetVR(long paramLong, int paramInt);
  
  private static native void BSSetWidth(long paramLong, double paramDouble);
  
  private static native long BorderStyleCreate(int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  
  private static native long BorderStyleCreate(int paramInt1, int paramInt2, int paramInt3, int paramInt4, double[] paramArrayOfDouble);
  
  private static native void BorderStyleDestroy(long paramLong);
  
  private static native long Create(long paramLong1, int paramInt, long paramLong2);
  
  private static native void Flatten(long paramLong1, long paramLong2);
  
  private static native String GetActiveAppearanceState(long paramLong);
  
  private static native long GetAppearance(long paramLong, int paramInt, String paramString);
  
  private static native long GetBorderStyle(long paramLong);
  
  private static native long GetColorAsCMYK(long paramLong);
  
  private static native long GetColorAsGray(long paramLong);
  
  private static native long GetColorAsRGB(long paramLong);
  
  private static native int GetColorCompNum(long paramLong);
  
  private static native String GetContents(long paramLong);
  
  private static native long GetDate(long paramLong);
  
  private static native boolean GetFlag(long paramLong, int paramInt);
  
  private static native long GetOptionalContent(long paramLong);
  
  private static native long GetPage(long paramLong);
  
  private static native long GetRect(long paramLong);
  
  private static native int GetStructParent(long paramLong);
  
  private static native int GetType(long paramLong);
  
  private static native long GetUniqueID(long paramLong);
  
  private static native boolean IsMarkup(long paramLong);
  
  private static native boolean IsValid(long paramLong);
  
  private static native void RefreshAppearance(long paramLong);
  
  private static native void RemoveAppearance(long paramLong, int paramInt, String paramString);
  
  private static native void Resize(long paramLong1, long paramLong2);
  
  private static native void SetActiveAppearanceState(long paramLong, String paramString);
  
  private static native void SetAppearance(long paramLong1, long paramLong2, int paramInt, String paramString);
  
  private static native void SetBorderStyle(long paramLong1, long paramLong2);
  
  private static native void SetColor(long paramLong1, long paramLong2, int paramInt);
  
  private static native void SetContents(long paramLong, String paramString);
  
  private static native void SetDate(long paramLong1, long paramLong2);
  
  private static native void SetFlag(long paramLong, int paramInt, boolean paramBoolean);
  
  private static native void SetOptionalContent(long paramLong1, long paramLong2);
  
  private static native long SetPage(long paramLong1, long paramLong2);
  
  private static native void SetRect(long paramLong1, long paramLong2);
  
  private static native void SetStructParent(long paramLong, int paramInt);
  
  private static native void SetUniqueID(long paramLong, String paramString);
  
  public static Annot __Create(long paramLong, Object paramObject)
  {
    if (paramLong == 0L) {
      return null;
    }
    return new Annot(paramLong, paramObject);
  }
  
  public static Annot create(Doc paramDoc, int paramInt, Rect paramRect)
    throws PDFNetException
  {
    return new Annot(Create(paramDoc.__GetHandle(), paramInt, paramRect.a), paramDoc);
  }
  
  public int GetStructParent()
    throws PDFNetException
  {
    return GetStructParent(this.a);
  }
  
  public long __GetHandle()
  {
    return this.a;
  }
  
  public Object __GetRefHandle()
  {
    return this.b;
  }
  
  public boolean equals(Object paramObject)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramObject != null)
    {
      bool1 = bool2;
      if (paramObject.getClass().equals(getClass()))
      {
        bool1 = bool2;
        if (this.a == ((Annot)paramObject).a) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public void flatten(Page paramPage)
    throws PDFNetException
  {
    Flatten(this.a, paramPage.a);
  }
  
  public String getActiveAppearanceState()
    throws PDFNetException
  {
    return GetActiveAppearanceState(this.a);
  }
  
  public Obj getAppearance()
    throws PDFNetException
  {
    return Obj.__Create(GetAppearance(this.a, 0, null), this.b);
  }
  
  public Obj getAppearance(int paramInt)
    throws PDFNetException
  {
    return Obj.__Create(GetAppearance(this.a, paramInt, null), this.b);
  }
  
  public Obj getAppearance(int paramInt, String paramString)
    throws PDFNetException
  {
    return Obj.__Create(GetAppearance(this.a, paramInt, paramString), this.b);
  }
  
  public BorderStyle getBorderStyle()
    throws PDFNetException
  {
    return new BorderStyle(GetBorderStyle(this.a));
  }
  
  public ColorPt getColorAsCMYK()
    throws PDFNetException
  {
    return new ColorPt(GetColorAsCMYK(this.a));
  }
  
  public ColorPt getColorAsGray()
    throws PDFNetException
  {
    return new ColorPt(GetColorAsGray(this.a));
  }
  
  public ColorPt getColorAsRGB()
    throws PDFNetException
  {
    return new ColorPt(GetColorAsRGB(this.a));
  }
  
  public int getColorCompNum()
    throws PDFNetException
  {
    return GetColorCompNum(this.a);
  }
  
  public String getContents()
    throws PDFNetException
  {
    return GetContents(this.a);
  }
  
  public Date getDate()
    throws PDFNetException
  {
    return new Date(GetDate(this.a));
  }
  
  public boolean getFlag(int paramInt)
    throws PDFNetException
  {
    return GetFlag(this.a, paramInt);
  }
  
  public Obj getOptionalContent()
    throws PDFNetException
  {
    return Obj.__Create(GetOptionalContent(this.a), this.b);
  }
  
  public Page getPage()
    throws PDFNetException
  {
    return new Page(GetPage(this.a), this.b);
  }
  
  public Rect getRect()
    throws PDFNetException
  {
    return new Rect(GetRect(this.a));
  }
  
  public Obj getSDFObj()
    throws PDFNetException
  {
    return Obj.__Create(this.a, this.b);
  }
  
  public int getType()
    throws PDFNetException
  {
    return GetType(this.a);
  }
  
  public Obj getUniqueID()
    throws PDFNetException
  {
    return Obj.__Create(GetUniqueID(this.a), this.b);
  }
  
  public boolean isMarkup()
    throws PDFNetException
  {
    return IsMarkup(this.a);
  }
  
  public boolean isValid()
    throws PDFNetException
  {
    return IsValid(this.a);
  }
  
  public void refreshAppearance()
    throws PDFNetException
  {
    RefreshAppearance(this.a);
  }
  
  public void removeAppearance(int paramInt, String paramString)
    throws PDFNetException
  {
    RemoveAppearance(this.a, paramInt, paramString);
  }
  
  public void resize(Rect paramRect)
    throws PDFNetException
  {
    Resize(this.a, paramRect.a);
  }
  
  public void setActiveAppearanceState(String paramString)
    throws PDFNetException
  {
    SetActiveAppearanceState(this.a, paramString);
  }
  
  public void setAppearance(Obj paramObj)
    throws PDFNetException
  {
    SetAppearance(this.a, paramObj.__GetHandle(), 0, null);
  }
  
  public void setAppearance(Obj paramObj, int paramInt)
    throws PDFNetException
  {
    SetAppearance(this.a, paramObj.__GetHandle(), paramInt, null);
  }
  
  public void setAppearance(Obj paramObj, int paramInt, String paramString)
    throws PDFNetException
  {
    SetAppearance(this.a, paramObj.__GetHandle(), paramInt, paramString);
  }
  
  public void setBorderStyle(BorderStyle paramBorderStyle)
    throws PDFNetException
  {
    SetBorderStyle(this.a, paramBorderStyle.a);
  }
  
  public void setColor(ColorPt paramColorPt, int paramInt)
    throws PDFNetException
  {
    SetColor(this.a, paramColorPt.a, paramInt);
  }
  
  public void setContents(String paramString)
    throws PDFNetException
  {
    SetContents(this.a, paramString);
  }
  
  public void setDate(Date paramDate)
    throws PDFNetException
  {
    SetDate(this.a, paramDate.a);
  }
  
  public void setFlag(int paramInt, boolean paramBoolean)
    throws PDFNetException
  {
    SetFlag(this.a, paramInt, paramBoolean);
  }
  
  public void setOptionalContent(Obj paramObj)
  {
    SetOptionalContent(this.a, paramObj.__GetHandle());
  }
  
  public void setPage(Page paramPage)
    throws PDFNetException
  {
    SetPage(this.a, paramPage.a);
  }
  
  public void setRect(Rect paramRect)
    throws PDFNetException
  {
    SetRect(this.a, paramRect.a);
  }
  
  public void setStructParent(int paramInt)
    throws PDFNetException
  {
    SetStructParent(this.a, paramInt);
  }
  
  public void setUniqueID(String paramString)
    throws PDFNetException
  {
    SetUniqueID(this.a, paramString);
  }
  
  public static class BorderStyle
  {
    public static final int e_beveled = 2;
    public static final int e_dashed = 1;
    public static final int e_inset = 3;
    public static final int e_solid = 0;
    public static final int e_underline = 4;
    long a;
    
    public BorderStyle(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
      throws PDFNetException
    {
      this.a = Annot.a(paramInt1, paramInt2, paramInt3, paramInt4);
    }
    
    public BorderStyle(int paramInt1, int paramInt2, int paramInt3, int paramInt4, double[] paramArrayOfDouble)
      throws PDFNetException
    {
      this.a = Annot.a(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfDouble);
    }
    
    BorderStyle(long paramLong)
    {
      this.a = paramLong;
    }
    
    public void destroy()
      throws PDFNetException
    {
      if (this.a != 0L)
      {
        Annot.a(this.a);
        this.a = 0L;
      }
    }
    
    protected void finalize()
      throws Throwable
    {
      destroy();
    }
    
    public double[] getDash()
      throws PDFNetException
    {
      return Annot.f(this.a);
    }
    
    public int getHR()
      throws PDFNetException
    {
      return Annot.c(this.a);
    }
    
    public int getStyle()
      throws PDFNetException
    {
      return Annot.b(this.a);
    }
    
    public int getVR()
      throws PDFNetException
    {
      return Annot.d(this.a);
    }
    
    public double getWidth()
      throws PDFNetException
    {
      return Annot.e(this.a);
    }
    
    public void setDash(double[] paramArrayOfDouble)
      throws PDFNetException
    {
      Annot.a(this.a, paramArrayOfDouble);
    }
    
    public void setHR(int paramInt)
      throws PDFNetException
    {
      Annot.b(this.a, paramInt);
    }
    
    public void setStyle(int paramInt)
      throws PDFNetException
    {
      Annot.a(this.a, paramInt);
    }
    
    public void setVR(int paramInt)
      throws PDFNetException
    {
      Annot.c(this.a, paramInt);
    }
    
    public void setWidth(double paramDouble)
      throws PDFNetException
    {
      Annot.a(this.a, paramDouble);
    }
  }
}
