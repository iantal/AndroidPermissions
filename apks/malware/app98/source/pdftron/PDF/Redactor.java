package pdftron.PDF;

import pdftron.Common.PDFNetException;
import pdftron.SDF.Doc;

public class Redactor
{
  public Redactor() {}
  
  private static native void Redact(long paramLong1, long[] paramArrayOfLong, boolean paramBoolean1, long paramLong2, long paramLong3, boolean paramBoolean2, boolean paramBoolean3, long paramLong4, double paramDouble1, double paramDouble2, long paramLong5, int paramInt1, int paramInt2, boolean paramBoolean4, long paramLong6, boolean paramBoolean5, boolean paramBoolean6);
  
  private static native long RedactionCreate(int paramInt, long paramLong, boolean paramBoolean, String paramString);
  
  private static native void RedactionDestroy(long paramLong);
  
  public static void redact(Doc paramDoc, Redaction[] paramArrayOfRedaction, Appearance paramAppearance, boolean paramBoolean1, boolean paramBoolean2)
    throws PDFNetException
  {
    long[] arrayOfLong = new long[paramArrayOfRedaction.length];
    int i = 0;
    while (i < paramArrayOfRedaction.length)
    {
      arrayOfLong[i] = paramArrayOfRedaction[i].a;
      i += 1;
    }
    long l1 = 0L;
    if (paramAppearance.font != null) {
      l1 = paramAppearance.font.a;
    }
    long l2 = 0L;
    if (paramAppearance.positiveOverlayColor != null) {
      l2 = paramAppearance.positiveOverlayColor.a;
    }
    long l3 = 0L;
    if (paramAppearance.negativeOverlayColor != null) {
      l3 = paramAppearance.negativeOverlayColor.a;
    }
    long l4 = 0L;
    if (paramAppearance.textColor != null) {
      l4 = paramAppearance.textColor.a;
    }
    long l5 = 0L;
    if (paramAppearance.redactedContentColor != null) {
      l5 = paramAppearance.redactedContentColor.a;
    }
    Redact(paramDoc.__GetHandle(), arrayOfLong, paramAppearance.redactionOverlay, l2, l3, paramAppearance.border, paramAppearance.useOverlayText, l1, paramAppearance.minFontSize, paramAppearance.maxFontSize, l4, paramAppearance.horizTextAlignment, paramAppearance.vertTextAlignment, paramAppearance.showRedactedContentRegions, l5, paramBoolean1, paramBoolean2);
  }
  
  public static class Appearance
  {
    public boolean border = true;
    public Font font;
    public int horizTextAlignment = -1;
    public double maxFontSize = 24.0D;
    public double minFontSize = 2.0D;
    public ColorPt negativeOverlayColor = new ColorPt(1.0D, 1.0D, 1.0D);
    public ColorPt positiveOverlayColor = new ColorPt(1.0D, 1.0D, 1.0D);
    public ColorPt redactedContentColor = new ColorPt(0.3D, 0.3D, 0.3D);
    public boolean redactionOverlay = true;
    public boolean showRedactedContentRegions = false;
    public ColorPt textColor = new ColorPt(0.0D, 0.0D, 0.0D);
    public boolean useOverlayText = true;
    public int vertTextAlignment = 1;
    
    public Appearance()
      throws PDFNetException
    {}
  }
  
  public static class Redaction
  {
    long a;
    
    public Redaction(int paramInt, Rect paramRect, boolean paramBoolean, String paramString)
      throws PDFNetException
    {
      this.a = Redactor.a(paramInt, paramRect.a, paramBoolean, paramString);
    }
    
    public void destroy()
    {
      if (this.a != 0L)
      {
        Redactor.a(this.a);
        this.a = 0L;
      }
    }
    
    protected void finalize()
      throws Throwable
    {
      destroy();
    }
  }
}
