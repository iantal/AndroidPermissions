package pdftron.PDF;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Matrix.ScaleToFit;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.RectF;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.text.method.PasswordTransformationMethod;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.EditText;
import android.widget.Scroller;
import android.widget.Toast;
import java.util.LinkedList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import pdftron.Common.PDFNetException;
import pdftron.SDF.SecurityHandler;

public class PDFViewCtrl
  extends ViewGroup
{
  public static final int DOWNLOAD_FINISH = 4;
  public static final int DOWNLOAD_PAGE = 0;
  public static final int DOWNLOAD_START = 5;
  public static final int OVERPRINT_OFF = 0;
  public static final int OVERPRINT_ON = 1;
  public static final int OVERPRINT_PDFX = 2;
  public static final int PAGE_CHANGE_BEGIN = -1;
  public static final int PAGE_CHANGE_END = 1;
  public static final int PAGE_CHANGE_ONGOING = 0;
  public static final int PAGE_PRESENTATION_FACING = 3;
  public static final int PAGE_PRESENTATION_FACING_CONT = 4;
  public static final int PAGE_PRESENTATION_FACING_COVER = 5;
  public static final int PAGE_PRESENTATION_FACING_COVER_CONT = 6;
  public static final int PAGE_PRESENTATION_SINGLE = 1;
  public static final int PAGE_PRESENTATION_SINGLE_CONT = 2;
  public static final int PAGE_VIEW_FIT_HEIGHT = 2;
  public static final int PAGE_VIEW_FIT_PAGE = 0;
  public static final int PAGE_VIEW_FIT_WIDTH = 1;
  public static final int PAGE_VIEW_ZOOM = 3;
  public static final int PRIOR_EVENT_DBLTAP = 4;
  public static final int PRIOR_EVENT_FLING = 3;
  public static final int PRIOR_EVENT_OTHER = 0;
  public static final int PRIOR_EVENT_PINCH = 2;
  public static final int PRIOR_EVENT_SCROLLING = 1;
  public static final int TEXT_SEARCH_CANCELED = -1;
  public static final int TEXT_SEARCH_FOUND = 1;
  public static final int TEXT_SEARCH_INVALID_INPUT = 2;
  public static final int TEXT_SEARCH_NOT_FOUND = 0;
  public static final int ZOOM_LIMIT_ABSOLUTE = 1;
  public static final int ZOOM_LIMIT_NONE = 3;
  public static final int ZOOM_LIMIT_RELATIVE = 2;
  protected static final int mContinuousModeCanvasId = 0;
  protected static final int mMaxTileNumPerCanvas = 100000;
  private boolean A;
  private boolean B;
  private boolean C;
  private boolean D;
  private MotionEvent E;
  private boolean F;
  private Matrix G;
  private Matrix H;
  private android.graphics.Rect I;
  private android.graphics.Rect J;
  private RectF K;
  private RectF L;
  private Paint M;
  private r.a[] N;
  private LinkedList<n> O;
  private int P = 0;
  private int Q = 0;
  private int R = 0;
  private int S = 0;
  private float T;
  private float U;
  private float V;
  private float W;
  private float X;
  private float Y;
  private float Z;
  private PDFDoc a;
  private ToolManager aA;
  private boolean aB;
  private int aC;
  private int aD;
  private boolean aE;
  private boolean aF;
  private boolean aG;
  private int aH;
  private int aI;
  private c aJ;
  private Object aK;
  private int aL;
  private int aM;
  private int aN;
  private long aO;
  private long aP;
  private GestureDetector aQ = new GestureDetector(getContext(), new a(this), null, true);
  private ScaleGestureDetector aR = new ScaleGestureDetector(getContext(), new f(this));
  private Handler aS = new g(this);
  private d aT = new h(this);
  private Handler aU = new i(this);
  private Handler aV = new j(this);
  private Handler aW = new k(this);
  private Handler aX = new l(this);
  private Handler aY = new m(this);
  private Handler aZ = new b(this);
  private float aa;
  private float ab;
  private float ac;
  private float ad;
  private int ae;
  private boolean af;
  private double ag;
  private double ah;
  private int ai;
  private double aj;
  private int ak;
  private float al;
  private float am;
  private boolean an;
  private boolean ao;
  private f ap;
  private TextSearchListener aq;
  private DocumentDownloadListener ar;
  private PageChangeListener as;
  private int at;
  private int au;
  private int av;
  private RenderingListener aw;
  private boolean ax;
  private a ay;
  private Tool az;
  private Scroller b;
  private Handler ba = new c(this);
  private Handler bb = new d(this);
  private Thread bc;
  private Handler bd = new e(this);
  private final Lock c = new ReentrantLock();
  private final Lock d = new ReentrantLock();
  private r e;
  private p f;
  private b g;
  private Canvas h;
  private Bitmap i;
  private boolean j;
  private boolean k;
  private boolean l;
  private boolean m;
  private int n;
  private int o;
  private int p;
  private int q;
  private boolean r;
  private boolean s;
  private boolean t;
  private boolean u;
  private boolean v;
  private int w;
  private int x;
  private boolean y;
  private boolean z;
  
  static
  {
    if (!PDFViewCtrl.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      be = bool;
      return;
    }
  }
  
  public PDFViewCtrl(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    a();
  }
  
  public PDFViewCtrl(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    a();
  }
  
  private static native void CancelFindText(long paramLong);
  
  private static native void CancelRendering(long paramLong);
  
  private static native void ClearSelection(long paramLong);
  
  private static native void CloseDoc(long paramLong);
  
  private static native double[] ConvCanvasPtToPagePt(long paramLong, double paramDouble1, double paramDouble2, int paramInt);
  
  private static native double[] ConvCanvasPtToScreenPt(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native double[] ConvPagePtToCanvasPt(long paramLong, double paramDouble1, double paramDouble2, int paramInt);
  
  private static native double[] ConvPagePtToScreenPt(long paramLong, double paramDouble1, double paramDouble2, int paramInt);
  
  private static native double[] ConvScreenPtToCanvasPt(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native double[] ConvScreenPtToPagePt(long paramLong, double paramDouble1, double paramDouble2, int paramInt);
  
  private static native void Destroy(long paramLong);
  
  private static native void DestroyRenderData(long paramLong1, long paramLong2, long paramLong3);
  
  private static native void DoProgressiveRender(long paramLong);
  
  private static native void DownloaderFinishedDownload(long paramLong1, long paramLong2);
  
  private static native void DownloaderUpdateOutline(long paramLong1, long paramLong2);
  
  private static native boolean DownloaderUpdatePage(long paramLong1, long paramLong2, int paramInt1, int paramInt2);
  
  private static native void DownloaderUpdateThumb(long paramLong1, long paramLong2, int paramInt1, int paramInt2);
  
  private static native void ExecuteAction(long paramLong1, long paramLong2);
  
  private static native boolean FindText(long paramLong, String paramString, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4);
  
  private static native long GetAnnotationAt(long paramLong, int paramInt1, int paramInt2);
  
  private static native double GetCanvasHeight(long paramLong);
  
  private static native double GetCanvasWidth(long paramLong);
  
  private static native int GetCellPerCol(long paramLong);
  
  private static native int GetCellPerRow(long paramLong);
  
  private static native int GetCellSideLength(long paramLong);
  
  private static native int GetCurCanvasId(long paramLong);
  
  private static native int GetCurrentPage(long paramLong);
  
  private static native long GetDoc(long paramLong);
  
  private static native double GetFindTextProgress(long paramLong);
  
  private static native double GetHScrollPos(long paramLong);
  
  private static native int GetNextCanvasId(long paramLong, int paramInt);
  
  private static native int GetPageNumberFromScreenPt(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native int GetPagePresentationMode(long paramLong);
  
  private static native double[] GetPageRects(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4);
  
  private static native int GetPageViewMode(long paramLong);
  
  private static native int GetPrevCanvasId(long paramLong, int paramInt);
  
  private static native long GetSelection(long paramLong, int paramInt);
  
  private static native int GetSelectionBeginPage(long paramLong);
  
  private static native int GetSelectionEndPage(long paramLong);
  
  private static native int GetTilingRegionHeight(long paramLong);
  
  private static native int GetTilingRegionWidth(long paramLong);
  
  private static native double GetVScrollPos(long paramLong);
  
  private static native double GetZoom(long paramLong);
  
  private static native boolean GotoFirstPage(long paramLong);
  
  private static native boolean GotoLastPage(long paramLong);
  
  private static native boolean GotoNextPage(long paramLong);
  
  private static native boolean GotoPreviousPage(long paramLong);
  
  private static native boolean HasSelection(long paramLong);
  
  private static native boolean HasSelectionOnPage(long paramLong, int paramInt);
  
  private static native boolean IsFinishedRendering(long paramLong, boolean paramBoolean);
  
  private static native void OnScroll(long paramLong, int paramInt1, int paramInt2, boolean paramBoolean);
  
  private static native void OnSize(long paramLong, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean);
  
  private static native void OpenURL(long paramLong, String paramString1, String paramString2, boolean paramBoolean);
  
  private native long[] PDFViewCtrlCreate(RenderCallback paramRenderCallback);
  
  private static native void PopViewingStates(long paramLong, boolean paramBoolean);
  
  private static native void PurgeMemory(long paramLong);
  
  private static native void PushViewingStates(long paramLong);
  
  private static native void RequestRender(long paramLong);
  
  private static native void SelectAll(long paramLong);
  
  private static native boolean SelectByRect(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4);
  
  private static native boolean SelectByStruct(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4);
  
  private static native String SelectionGetAsHtml(long paramLong);
  
  private static native String SelectionGetAsUnicode(long paramLong);
  
  private static native int SelectionGetPageNum(long paramLong);
  
  private static native double[] SelectionGetQuads(long paramLong);
  
  private static native boolean SelectyByHighlights(long paramLong1, long paramLong2);
  
  private static native void SetAntiAliasing(long paramLong, boolean paramBoolean);
  
  private static native void SetBackgroundColor(long paramLong, byte paramByte1, byte paramByte2, byte paramByte3, byte paramByte4);
  
  private static native void SetCaching(long paramLong, boolean paramBoolean);
  
  private static native boolean SetCurrentPage(long paramLong, int paramInt);
  
  private static native void SetDefaultPageColor(long paramLong, byte paramByte1, byte paramByte2, byte paramByte3);
  
  private static native void SetDoc(long paramLong1, long paramLong2);
  
  private static native void SetDrawAnnotations(long paramLong, boolean paramBoolean);
  
  private static native void SetFreezeTile(long paramLong, boolean paramBoolean);
  
  private static native void SetGamma(long paramLong, double paramDouble);
  
  private static native void SetHighlightFields(long paramLong, boolean paramBoolean);
  
  private static native void SetImageSmoothing(long paramLong, boolean paramBoolean);
  
  private static native void SetMemInfo(long paramLong, double paramDouble1, double paramDouble2);
  
  private static native void SetOverprint(long paramLong, int paramInt);
  
  private static native void SetPagePresentationMode(long paramLong, int paramInt);
  
  private static native void SetPageSpacing(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  
  private static native void SetPageViewMode(long paramLong, int paramInt);
  
  private static native void SetPathHinting(long paramLong, boolean paramBoolean);
  
  private static native void SetRightToLeftLanguage(long paramLong, boolean paramBoolean);
  
  private static native void SetThinLineAdjustment(long paramLong, boolean paramBoolean1, boolean paramBoolean2);
  
  private static native void SetThumbRenderEnabled(long paramLong, boolean paramBoolean);
  
  private static native boolean SetZoom(long paramLong, double paramDouble, boolean paramBoolean);
  
  private static native boolean SetZoom(long paramLong, int paramInt1, int paramInt2, double paramDouble, boolean paramBoolean);
  
  private static native void Update(long paramLong);
  
  private static native void Update(long paramLong1, long paramLong2);
  
  private static native void Update(long paramLong1, long paramLong2, int paramInt);
  
  private static native void UpdatePageLayout(long paramLong);
  
  private double a(double paramDouble)
  {
    if (this.ai == 3) {
      return paramDouble;
    }
    double d1;
    double d2;
    if (this.ai == 2)
    {
      d1 = this.ag;
      d2 = this.aj * d1;
      d1 = this.ah * this.aj;
      if ((d2 < 0.0D) || (paramDouble >= d2)) {
        break label90;
      }
    }
    for (;;)
    {
      if ((d1 >= 0.0D) && (d2 > d1)) {}
      for (;;)
      {
        return d1;
        d2 = this.ag;
        d1 = this.ah;
        break;
        d1 = d2;
      }
      label90:
      d2 = paramDouble;
    }
  }
  
  private int a(int paramInt)
  {
    return GetPrevCanvasId(this.aO, paramInt);
  }
  
  private void a()
  {
    this.ax = false;
    this.l = true;
    this.j = false;
    this.k = false;
    this.m = false;
    this.t = true;
    this.u = true;
    this.v = true;
    this.w = 2000;
    this.x = 750;
    this.n = 0;
    this.y = false;
    this.z = false;
    this.A = false;
    this.B = false;
    this.af = false;
    this.D = false;
    this.r = false;
    this.o = 0;
    this.aq = null;
    this.ao = false;
    this.as = null;
    this.at = 1;
    this.au = 1;
    this.av = 1;
    this.ar = null;
    this.aw = null;
    this.aB = false;
    this.ag = 0.0D;
    this.ah = 500000.0D;
    this.ai = 3;
    this.aj = 1.0D;
    this.aC = 0;
    this.aD = 2;
    this.ay = new a(getContext());
    this.N = new r.a[2];
    this.O = new LinkedList();
    this.q = -4276546;
    setBackgroundColor(this.q);
    this.p = Color.argb(255, 255, 255, 255);
    this.M = new Paint();
    this.M.setColor(this.p);
    this.M.setStyle(Paint.Style.FILL);
    this.M.setAntiAlias(true);
    this.M.setFilterBitmap(false);
    this.a = null;
    this.e = new r();
    this.f = new p();
    this.b = new Scroller(getContext());
    this.H = new Matrix();
    this.G = new Matrix();
    this.I = new android.graphics.Rect();
    this.J = new android.graphics.Rect();
    this.K = new RectF();
    this.L = new RectF();
    this.h = new Canvas();
    this.aQ.setIsLongpressEnabled(false);
    this.aF = true;
    setFocusable(true);
    setFocusableInTouchMode(true);
    setVerticalScrollBarEnabled(true);
    setHorizontalScrollBarEnabled(true);
    setScrollBarStyle(50331648);
    setWillNotDraw(false);
    this.aG = true;
    this.aH = 2000;
    this.aI = 1000;
    this.aJ = new c();
    this.aK = null;
    this.aL = 0;
    this.aM = 0;
    this.aN = 1;
    try
    {
      long[] arrayOfLong = PDFViewCtrlCreate(new RenderCallback());
      this.aO = arrayOfLong[0];
      this.aP = arrayOfLong[1];
      setImageSmoothing(false);
      setCaching(false);
      setOverprint(0);
      setPageViewMode(0);
      setPagePresentationMode(this.aD);
      long l1 = Runtime.getRuntime().maxMemory() / 1048576L;
      if (l1 <= 24L)
      {
        setRenderedContentCacheSize((l1 * 0.35D));
        return;
      }
      setRenderedContentCacheSize((l1 * 0.5D));
      return;
    }
    catch (Exception localException) {}
  }
  
  private void a(float paramFloat1, float paramFloat2)
  {
    this.ak = getPageNumberFromClientPt(paramFloat1, paramFloat2);
    double[] arrayOfDouble = convClientPtToPagePt(paramFloat1, paramFloat2, this.ak);
    this.al = ((float)arrayOfDouble[0]);
    this.am = ((float)arrayOfDouble[1]);
  }
  
  private void a(Canvas paramCanvas, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    double[] arrayOfDouble = a(paramInt3, paramInt4, this.P + paramInt3, this.Q + paramInt4);
    if (arrayOfDouble == null) {}
    for (;;)
    {
      return;
      int i2 = arrayOfDouble.length / 5;
      paramInt3 = 0;
      while (paramInt3 < i2)
      {
        int i3 = paramInt3 * 5;
        int i4 = (int)arrayOfDouble[i3];
        int i1 = 0;
        paramInt4 = i1;
        if (paramBoolean)
        {
          Bitmap localBitmap = c(i4);
          paramInt4 = i1;
          if (localBitmap != null)
          {
            float f1 = localBitmap.getWidth();
            float f2 = localBitmap.getHeight();
            float f8 = (float)arrayOfDouble[(i3 + 1)];
            float f5 = (float)arrayOfDouble[(i3 + 2)];
            float f7 = (float)arrayOfDouble[(i3 + 3)];
            float f10 = (float)arrayOfDouble[(i3 + 4)];
            float f9 = f7 - f8;
            float f6 = f10 - f5;
            float f3 = Math.max(paramInt1, f8);
            float f4 = Math.max(paramInt2, f5);
            f7 = Math.min(this.P + paramInt1, f7);
            f10 = Math.min(this.Q + paramInt2, f10);
            float f11 = (f3 - f8) / f9;
            float f12 = (f4 - f5) / f6;
            f8 = (f7 - f8) / f9;
            f5 = (f10 - f5) / f6;
            this.K.set(f11 * f1, f12 * f2, f1 * f8, f2 * f5);
            this.L.set(f3, f4, f7, f10);
            this.H.setRectToRect(this.K, this.L, Matrix.ScaleToFit.CENTER);
            paramCanvas.drawBitmap(localBitmap, this.H, this.M);
            paramInt4 = 1;
          }
        }
        if (paramInt4 == 0) {
          paramCanvas.drawRect((float)arrayOfDouble[(i3 + 1)], (float)arrayOfDouble[(i3 + 2)], (float)arrayOfDouble[(i3 + 3)], (float)arrayOfDouble[(i3 + 4)], this.M);
        }
        paramInt3 += 1;
      }
    }
  }
  
  private void a(Canvas paramCanvas, double[] paramArrayOfDouble, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    int i4 = paramArrayOfDouble.length / 5;
    int i1 = 0;
    while (i1 < i4)
    {
      int i5 = i1 * 5;
      int i6 = (int)paramArrayOfDouble[i5];
      if (i6 > 0)
      {
        int i3 = 0;
        int i2 = i3;
        float f1;
        float f2;
        float f5;
        float f7;
        float f6;
        float f3;
        float f4;
        if (paramBoolean)
        {
          Bitmap localBitmap = c(i6);
          i2 = i3;
          if (localBitmap != null)
          {
            f1 = localBitmap.getWidth();
            f2 = localBitmap.getHeight();
            float f8 = (float)paramArrayOfDouble[(i5 + 1)];
            f5 = (float)paramArrayOfDouble[(i5 + 2)];
            f7 = (float)paramArrayOfDouble[(i5 + 3)];
            float f10 = (float)paramArrayOfDouble[(i5 + 4)];
            float f9 = f7 - f8;
            f6 = f10 - f5;
            f3 = Math.max(0.0F, f8);
            f4 = Math.max(0.0F, f5);
            f7 = Math.min(this.P + 0, f7);
            f10 = Math.min(this.Q + 0, f10);
            float f11 = (f3 - f8) / f9;
            float f12 = (f4 - f5) / f6;
            f8 = (f7 - f8) / f9;
            f5 = (f10 - f5) / f6;
            this.K.set(f11 * f1, f12 * f2, f1 * f8, f2 * f5);
            this.L.set(paramInt1 + f3, paramInt2 + f4, paramInt1 + f7, paramInt2 + f10);
            this.H.setRectToRect(this.K, this.L, Matrix.ScaleToFit.CENTER);
            paramCanvas.drawBitmap(localBitmap, this.H, this.M);
            i2 = 1;
          }
        }
        if (i2 == 0)
        {
          f1 = (float)paramArrayOfDouble[(i5 + 1)];
          f2 = paramInt1;
          f3 = (float)paramArrayOfDouble[(i5 + 2)];
          f4 = paramInt2;
          f5 = (float)paramArrayOfDouble[(i5 + 3)];
          f6 = paramInt1;
          f7 = (float)paramArrayOfDouble[(i5 + 4)];
          paramCanvas.drawRect(f2 + f1, f4 + f3, f6 + f5, paramInt2 + f7, this.M);
        }
      }
      i1 += 1;
    }
  }
  
  private void a(PDFDoc paramPDFDoc, boolean paramBoolean)
  {
    this.bd.removeMessages(0);
    cancelRendering();
    this.e.b();
    this.f.c();
    System.gc();
    if (this.t)
    {
      SetThumbRenderEnabled(this.aO, false);
      SetThumbRenderEnabled(this.aO, true);
    }
    if (!paramBoolean) {}
    for (;;)
    {
      try
      {
        SetDoc(this.aO, paramPDFDoc.__GetHandle());
        this.a = paramPDFDoc;
        this.f.a(this.a);
        closeTool();
        if (this.aA != null) {
          this.az = this.aA.createDefaultTool(this);
        }
        if ((!this.u) || (this.t)) {}
      }
      catch (Exception paramPDFDoc)
      {
        try
        {
          lockDoc(true);
          this.f.a(-1, -1);
          unlockDoc();
          this.m = true;
          this.af = true;
          return;
        }
        finally
        {
          unlockDoc();
        }
        paramPDFDoc = paramPDFDoc;
        this.a = null;
        paramPDFDoc = Toast.makeText(getContext(), "Opening document failed: " + paramPDFDoc.toString(), 0);
        paramPDFDoc.setGravity(17, 0, 0);
        paramPDFDoc.show();
        invalidate();
        continue;
      }
      this.a = paramPDFDoc;
    }
  }
  
  private void a(boolean paramBoolean)
  {
    PopViewingStates(this.aO, paramBoolean);
  }
  
  private boolean a(float paramFloat1, float paramFloat2, double paramDouble)
  {
    b(paramFloat1, paramFloat2);
    paramDouble = a(paramDouble);
    boolean bool = SetZoom(this.aO, (int)this.U, (int)this.V, paramDouble, false);
    b();
    scrollTo(f(), g());
    return bool;
  }
  
  private boolean a(int paramInt1, int paramInt2)
  {
    int i1;
    boolean bool;
    for (;;)
    {
      try
      {
        if (this.a == null) {
          break;
        }
        i2 = getCurrentPage();
        if (isContinuousPagePresentationMode(this.aD)) {
          break label354;
        }
        i1 = 1;
      }
      catch (Exception localException)
      {
        int i2;
        a(false);
      }
      if (bool)
      {
        if (!this.b.isFinished()) {
          this.b.forceFinished(true);
        }
        if (i1 != 0)
        {
          this.R = GetTilingRegionWidth(this.aO);
          this.S = GetTilingRegionHeight(this.aO);
          if (!this.k)
          {
            this.aj = getZoom();
            this.c.lock();
            d();
            this.c.unlock();
            this.av = 1;
            this.aU.removeMessages(0);
            this.aU.sendEmptyMessage(0);
            i1 = getCurrentPage();
            if ((this.az != null) && (this.aA != null))
            {
              paramInt1 = this.az.getMode();
              this.az.onPageTurning(i2, i1);
              paramInt2 = this.az.getNextToolMode();
              if (paramInt1 != paramInt2)
              {
                this.az = this.aA.createTool(paramInt2, this, this.az);
                paramInt1 = paramInt2;
                continue;
                bool = GotoFirstPage(this.aO);
                continue;
                bool = GotoPreviousPage(this.aO);
                continue;
                bool = SetCurrentPage(this.aO, paramInt2);
                continue;
                bool = GotoNextPage(this.aO);
                continue;
                bool = GotoLastPage(this.aO);
                continue;
              }
            }
          }
        }
        if (!this.k)
        {
          scrollTo(f(), g());
          invalidate();
        }
      }
      return bool;
    }
    return false;
    for (;;)
    {
      switch (paramInt1)
      {
      }
      bool = false;
      break;
      label354:
      i1 = 0;
    }
  }
  
  private boolean a(long paramLong, int paramInt1, int paramInt2)
  {
    try
    {
      boolean bool = DownloaderUpdatePage(this.aO, paramLong, paramInt1, paramInt2);
      return bool;
    }
    catch (Exception localException) {}
    return true;
  }
  
  /* Error */
  private boolean a(Bitmap paramBitmap)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: iconst_0
    //   4: istore 4
    //   6: iconst_0
    //   7: istore_3
    //   8: aload_0
    //   9: invokevirtual 1027	pdftron/PDF/PDFViewCtrl:getChildCount	()I
    //   12: istore 5
    //   14: iload 5
    //   16: ifle +50 -> 66
    //   19: iload 5
    //   21: newarray int
    //   23: astore 7
    //   25: iconst_0
    //   26: istore_2
    //   27: aload 7
    //   29: astore 6
    //   31: iload_2
    //   32: iload 5
    //   34: if_icmpge +32 -> 66
    //   37: aload_0
    //   38: iload_2
    //   39: invokevirtual 1031	pdftron/PDF/PDFViewCtrl:getChildAt	(I)Landroid/view/View;
    //   42: astore 6
    //   44: aload 7
    //   46: iload_2
    //   47: aload 6
    //   49: invokevirtual 1036	android/view/View:getVisibility	()I
    //   52: iastore
    //   53: aload 6
    //   55: iconst_4
    //   56: invokevirtual 1039	android/view/View:setVisibility	(I)V
    //   59: iload_2
    //   60: iconst_1
    //   61: iadd
    //   62: istore_2
    //   63: goto -36 -> 27
    //   66: aload_0
    //   67: invokevirtual 1043	pdftron/PDF/PDFViewCtrl:getBackground	()Landroid/graphics/drawable/Drawable;
    //   70: astore 7
    //   72: aload 7
    //   74: ifnull +8 -> 82
    //   77: aload_0
    //   78: aconst_null
    //   79: invokevirtual 1047	pdftron/PDF/PDFViewCtrl:setBackgroundDrawable	(Landroid/graphics/drawable/Drawable;)V
    //   82: aload_0
    //   83: getfield 722	pdftron/PDF/PDFViewCtrl:h	Landroid/graphics/Canvas;
    //   86: aload_1
    //   87: invokevirtual 1051	android/graphics/Canvas:setBitmap	(Landroid/graphics/Bitmap;)V
    //   90: aload_0
    //   91: iconst_1
    //   92: putfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   95: aload_0
    //   96: iconst_1
    //   97: putfield 1053	pdftron/PDF/PDFViewCtrl:aE	Z
    //   100: aload_0
    //   101: aload_0
    //   102: getfield 722	pdftron/PDF/PDFViewCtrl:h	Landroid/graphics/Canvas;
    //   105: invokevirtual 1057	pdftron/PDF/PDFViewCtrl:draw	(Landroid/graphics/Canvas;)V
    //   108: aload_0
    //   109: iconst_0
    //   110: putfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   113: aload_0
    //   114: iconst_0
    //   115: putfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   118: aload 7
    //   120: ifnull +9 -> 129
    //   123: aload_0
    //   124: aload 7
    //   126: invokevirtual 1047	pdftron/PDF/PDFViewCtrl:setBackgroundDrawable	(Landroid/graphics/drawable/Drawable;)V
    //   129: iload 5
    //   131: ifle +208 -> 339
    //   134: aload 6
    //   136: ifnull +203 -> 339
    //   139: iload_3
    //   140: istore_2
    //   141: iload_2
    //   142: iload 5
    //   144: if_icmpge +22 -> 166
    //   147: aload_0
    //   148: iload_2
    //   149: invokevirtual 1031	pdftron/PDF/PDFViewCtrl:getChildAt	(I)Landroid/view/View;
    //   152: aload 6
    //   154: iload_2
    //   155: iaload
    //   156: invokevirtual 1039	android/view/View:setVisibility	(I)V
    //   159: iload_2
    //   160: iconst_1
    //   161: iadd
    //   162: istore_2
    //   163: goto -22 -> 141
    //   166: iconst_1
    //   167: ireturn
    //   168: astore_1
    //   169: aload_0
    //   170: iconst_0
    //   171: putfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   174: aload 7
    //   176: ifnull +9 -> 185
    //   179: aload_0
    //   180: aload 7
    //   182: invokevirtual 1047	pdftron/PDF/PDFViewCtrl:setBackgroundDrawable	(Landroid/graphics/drawable/Drawable;)V
    //   185: iload 5
    //   187: ifle +150 -> 337
    //   190: aload 6
    //   192: ifnull +145 -> 337
    //   195: iconst_0
    //   196: istore_2
    //   197: iload_2
    //   198: iload 5
    //   200: if_icmpge +22 -> 222
    //   203: aload_0
    //   204: iload_2
    //   205: invokevirtual 1031	pdftron/PDF/PDFViewCtrl:getChildAt	(I)Landroid/view/View;
    //   208: aload 6
    //   210: iload_2
    //   211: iaload
    //   212: invokevirtual 1039	android/view/View:setVisibility	(I)V
    //   215: iload_2
    //   216: iconst_1
    //   217: iadd
    //   218: istore_2
    //   219: goto -22 -> 197
    //   222: iconst_0
    //   223: ireturn
    //   224: astore_1
    //   225: aload_0
    //   226: iconst_0
    //   227: putfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   230: aload 7
    //   232: ifnull +9 -> 241
    //   235: aload_0
    //   236: aload 7
    //   238: invokevirtual 1047	pdftron/PDF/PDFViewCtrl:setBackgroundDrawable	(Landroid/graphics/drawable/Drawable;)V
    //   241: iload 5
    //   243: ifle +94 -> 337
    //   246: aload 6
    //   248: ifnull +89 -> 337
    //   251: iconst_0
    //   252: istore_2
    //   253: iload_2
    //   254: iload 5
    //   256: if_icmpge +22 -> 278
    //   259: aload_0
    //   260: iload_2
    //   261: invokevirtual 1031	pdftron/PDF/PDFViewCtrl:getChildAt	(I)Landroid/view/View;
    //   264: aload 6
    //   266: iload_2
    //   267: iaload
    //   268: invokevirtual 1039	android/view/View:setVisibility	(I)V
    //   271: iload_2
    //   272: iconst_1
    //   273: iadd
    //   274: istore_2
    //   275: goto -22 -> 253
    //   278: iconst_0
    //   279: ireturn
    //   280: astore_1
    //   281: aload_0
    //   282: iconst_0
    //   283: putfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   286: aload 7
    //   288: ifnull +9 -> 297
    //   291: aload_0
    //   292: aload 7
    //   294: invokevirtual 1047	pdftron/PDF/PDFViewCtrl:setBackgroundDrawable	(Landroid/graphics/drawable/Drawable;)V
    //   297: iload 5
    //   299: ifle +36 -> 335
    //   302: aload 6
    //   304: ifnull +31 -> 335
    //   307: iload 4
    //   309: istore_2
    //   310: iload_2
    //   311: iload 5
    //   313: if_icmpge +22 -> 335
    //   316: aload_0
    //   317: iload_2
    //   318: invokevirtual 1031	pdftron/PDF/PDFViewCtrl:getChildAt	(I)Landroid/view/View;
    //   321: aload 6
    //   323: iload_2
    //   324: iaload
    //   325: invokevirtual 1039	android/view/View:setVisibility	(I)V
    //   328: iload_2
    //   329: iconst_1
    //   330: iadd
    //   331: istore_2
    //   332: goto -22 -> 310
    //   335: aload_1
    //   336: athrow
    //   337: iconst_0
    //   338: ireturn
    //   339: iconst_1
    //   340: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	341	0	this	PDFViewCtrl
    //   0	341	1	paramBitmap	Bitmap
    //   26	306	2	i1	int
    //   7	133	3	i2	int
    //   4	304	4	i3	int
    //   12	302	5	i4	int
    //   1	321	6	localObject1	Object
    //   23	270	7	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   77	82	168	java/lang/Exception
    //   82	113	168	java/lang/Exception
    //   77	82	224	java/lang/OutOfMemoryError
    //   82	113	224	java/lang/OutOfMemoryError
    //   77	82	280	finally
    //   82	113	280	finally
  }
  
  private double[] a(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    return GetPageRects(this.aO, paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  private int b(int paramInt)
  {
    return GetNextCanvasId(this.aO, paramInt);
  }
  
  private void b()
  {
    this.R = GetTilingRegionWidth(this.aO);
    this.S = GetTilingRegionHeight(this.aO);
    this.e.a(GetCurCanvasId(this.aO), this.R, this.S, GetCellSideLength(this.aO), GetCellPerRow(this.aO), GetCellPerCol(this.aO));
  }
  
  private void b(float paramFloat1, float paramFloat2)
  {
    this.T = ((float)getZoom());
    this.W = paramFloat1;
    this.X = paramFloat2;
    this.U = paramFloat1;
    this.V = paramFloat2;
    this.n = getCurrentPage();
    double[] arrayOfDouble = convClientPtToCanvasPt(this.U, this.V);
    this.aa = ((float)arrayOfDouble[0]);
    this.ab = ((float)arrayOfDouble[1]);
    this.ae = getPageNumberFromClientPt(this.U, this.V);
    arrayOfDouble = convClientPtToPagePt(this.U, this.V, this.ae);
    this.ac = ((float)arrayOfDouble[0]);
    this.ad = ((float)arrayOfDouble[1]);
    try
    {
      if ((this.i == null) || (this.i.getWidth() != this.P) || (this.i.getHeight() != this.Q))
      {
        if (this.i != null)
        {
          this.i.recycle();
          this.i = null;
        }
        this.i = Bitmap.createBitmap(this.P, this.Q, Bitmap.Config.ARGB_8888);
      }
      if (a(this.i))
      {
        this.o = this.n;
        if ((!this.aE) && (this.u))
        {
          this.i.recycle();
          this.i = null;
          this.o = 0;
        }
      }
      else
      {
        this.aT.a();
        return;
      }
    }
    catch (Exception localException) {}catch (OutOfMemoryError localOutOfMemoryError)
    {
      this.aT.a();
    }
  }
  
  private void b(boolean paramBoolean)
  {
    this.aB = paramBoolean;
    SetFreezeTile(this.aO, paramBoolean);
  }
  
  private double c()
  {
    getZoom();
    try
    {
      b(true);
      PushViewingStates(this.aO);
      SetPageViewMode(this.aO, 0);
      double d1 = getZoom();
      return d1;
    }
    finally
    {
      b(false);
      a(true);
    }
  }
  
  private Bitmap c(int paramInt)
  {
    int i2 = 1;
    i1 = 1;
    Object localObject1 = this.f.b(paramInt);
    if (localObject1 != null)
    {
      localObject1 = ((o)localObject1).b;
      return localObject1;
    }
    if (!this.t)
    {
      int i4 = this.f.b();
      boolean bool;
      if (this.f.a() == i4)
      {
        int i3 = paramInt - i4 / 2;
        i2 = i3;
        if (i3 <= 0) {
          i2 = 1;
        }
        for (;;)
        {
          try
          {
            bool = isFinishedRendering();
            if (!bool) {
              if (i1 == 0) {}
            }
          }
          finally
          {
            i1 = 0;
            unlockDoc();
            if (i1 != 0) {
              this.aS.sendEmptyMessage(0);
            }
          }
          try
          {
            this.c.unlock();
            cancelRendering();
            this.c.lock();
            lockDoc(true);
            this.f.a(i2, i4 + i2 - 1);
            localObject1 = this.f.b(paramInt);
            unlockDoc();
            if (i1 != 0) {
              this.aS.sendEmptyMessage(0);
            }
            if (localObject1 == null) {
              continue;
            }
            return ((o)localObject1).b;
          }
          finally
          {
            continue;
          }
          i1 = 0;
        }
      }
      for (;;)
      {
        try
        {
          bool = isFinishedRendering();
          if (!bool)
          {
            i1 = i2;
            if (i1 == 0) {}
          }
        }
        finally
        {
          Bitmap localBitmap;
          Object localObject3;
          i1 = 0;
          unlockDoc();
          if (i1 != 0) {
            this.aS.sendEmptyMessage(0);
          }
        }
        try
        {
          this.c.unlock();
          cancelRendering();
          this.c.lock();
          lockDoc(true);
          localBitmap = this.f.a(paramInt);
          unlockDoc();
          localObject3 = localBitmap;
          if (i1 == 0) {
            break;
          }
          this.aS.sendEmptyMessage(0);
          return localBitmap;
        }
        finally
        {
          continue;
        }
        i1 = 0;
      }
    }
  }
  
  private void d()
  {
    int i1 = GetCurCanvasId(this.aO);
    r.a localA = this.e.a(i1);
    int i2 = GetCellSideLength(this.aO);
    int i3 = GetCellPerRow(this.aO);
    int i4 = GetCellPerCol(this.aO);
    int i5 = (int)Math.ceil(this.R / i2);
    int i6 = (int)Math.ceil(this.S / i2);
    if ((i5 != i3) || (i6 != i4))
    {
      this.af = true;
      requestLayout();
    }
    if ((localA == null) || (localA.b != this.R) || (localA.c != this.S) || (localA.d != i2) || (localA.e != i3) || (localA.f != i4)) {
      this.e.a(i1, this.R, this.S, i2, i3, i4);
    }
  }
  
  private int e()
  {
    int i1 = 0;
    try
    {
      if (this.a != null) {
        i1 = this.a.getPageCount();
      }
      return i1;
    }
    catch (Exception localException) {}
    return 0;
  }
  
  private int f()
  {
    return (int)(GetHScrollPos(this.aO) + 0.5D);
  }
  
  private int g()
  {
    return (int)(GetVScrollPos(this.aO) + 0.5D);
  }
  
  public void cancelFindText()
  {
    try
    {
      if ((this.ao) && (this.ap != null))
      {
        CancelFindText(this.aO);
        this.ap.cancel(false);
        while (this.ao) {}
        while (this.bc.isAlive()) {}
        this.bb.removeMessages(0);
        if (this.aq != null) {
          this.aq.onTextSearchEnd(-1);
        }
      }
      return;
    }
    finally {}
  }
  
  public void cancelRendering()
  {
    if (this.g != null)
    {
      this.g.a();
      this.g = null;
    }
    CancelRendering(this.aO);
  }
  
  public void clearSelection()
  {
    ClearSelection(this.aO);
  }
  
  public void closeDoc()
  {
    if (this.a != null)
    {
      cancelRendering();
      closeTool();
      this.e.b();
      this.f.c();
      SetThumbRenderEnabled(this.aO, false);
      if (this.t) {
        SetThumbRenderEnabled(this.aO, true);
      }
      this.a = null;
      CloseDoc(this.aO);
      this.af = true;
      requestLayout();
      System.gc();
    }
  }
  
  public void closeTool()
  {
    if (this.az != null) {
      this.az.onClose();
    }
  }
  
  protected int computeHorizontalScrollRange()
  {
    return this.R;
  }
  
  public void computeScroll()
  {
    int i1 = 1;
    if (!this.l) {
      if (this.b.computeScrollOffset())
      {
        i1 = this.b.getCurrX() - getScrollX();
        int i2 = this.b.getCurrY() - getScrollY();
        if ((i1 != 0) || (i2 != 0)) {
          scrollBy(i1, i2);
        }
        i1 = 0;
      }
    }
    for (;;)
    {
      if ((this.z) && (i1 != 0))
      {
        this.z = false;
        onFlingStop();
      }
      return;
      if (this.b.computeScrollOffset())
      {
        super.scrollTo(this.b.getCurrX(), this.b.getCurrY());
        i1 = 0;
      }
    }
  }
  
  protected int computeVerticalScrollRange()
  {
    return this.S;
  }
  
  public double[] convCanvasPtToClientPt(double paramDouble1, double paramDouble2)
  {
    return ConvCanvasPtToScreenPt(this.aO, paramDouble1, paramDouble2);
  }
  
  public double[] convCanvasPtToPagePt(double paramDouble1, double paramDouble2)
  {
    return ConvCanvasPtToPagePt(this.aO, paramDouble1, paramDouble2, -1);
  }
  
  public double[] convCanvasPtToPagePt(double paramDouble1, double paramDouble2, int paramInt)
  {
    return ConvCanvasPtToPagePt(this.aO, paramDouble1, paramDouble2, paramInt);
  }
  
  public double[] convClientPtToCanvasPt(double paramDouble1, double paramDouble2)
  {
    return ConvScreenPtToCanvasPt(this.aO, paramDouble1, paramDouble2);
  }
  
  public double[] convClientPtToPagePt(double paramDouble1, double paramDouble2)
  {
    return ConvScreenPtToPagePt(this.aO, paramDouble1, paramDouble2, -1);
  }
  
  public double[] convClientPtToPagePt(double paramDouble1, double paramDouble2, int paramInt)
  {
    return ConvScreenPtToPagePt(this.aO, paramDouble1, paramDouble2, paramInt);
  }
  
  public double[] convPagePtToCanvasPt(double paramDouble1, double paramDouble2)
  {
    return ConvPagePtToCanvasPt(this.aO, paramDouble1, paramDouble2, -1);
  }
  
  public double[] convPagePtToCanvasPt(double paramDouble1, double paramDouble2, int paramInt)
  {
    return ConvPagePtToCanvasPt(this.aO, paramDouble1, paramDouble2, paramInt);
  }
  
  public double[] convPagePtToClientPt(double paramDouble1, double paramDouble2, int paramInt)
  {
    return ConvPagePtToScreenPt(this.aO, paramDouble1, paramDouble2, paramInt);
  }
  
  public void destroy()
  {
    if (this.aO == 0L) {
      return;
    }
    pause();
    this.e.b();
    this.f.c();
    if (this.i != null) {
      this.i.recycle();
    }
    this.o = 0;
    if (this.aO != 0L)
    {
      Destroy(this.aO);
      this.aO = 0L;
    }
    if (this.aP != 0L)
    {
      DestroyRenderData(this.aP, 0L, 0L);
      this.aP = 0L;
    }
    this.a = null;
    System.gc();
  }
  
  public void executeAction(Action paramAction)
  {
    int i1 = getCurrentPage();
    ExecuteAction(this.aO, paramAction.__GetHandle());
    int i2 = getCurrentPage();
    if (i2 != i1) {
      setCurrentPage(i2);
    }
    setPageViewMode(0);
    setPagePresentationMode(this.aD);
    this.aj = getZoom();
    scrollTo(f(), g());
  }
  
  protected void finalize()
    throws Throwable
  {
    destroy();
  }
  
  /* Error */
  public int findText(String paramString, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, TextSearchListener paramTextSearchListener)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 7
    //   3: aload_0
    //   4: invokevirtual 1287	pdftron/PDF/PDFViewCtrl:cancelFindText	()V
    //   7: aload 6
    //   9: ifnonnull +121 -> 130
    //   12: aload_0
    //   13: monitorenter
    //   14: aload_0
    //   15: iconst_1
    //   16: putfield 388	pdftron/PDF/PDFViewCtrl:ao	Z
    //   19: aload_0
    //   20: monitorexit
    //   21: aload_0
    //   22: getfield 437	pdftron/PDF/PDFViewCtrl:aO	J
    //   25: aload_1
    //   26: iload_2
    //   27: iload_3
    //   28: iload 4
    //   30: iload 5
    //   32: invokestatic 1021	pdftron/PDF/PDFViewCtrl:FindText	(JLjava/lang/String;ZZZZ)Z
    //   35: istore_2
    //   36: iconst_0
    //   37: istore 5
    //   39: aload_0
    //   40: monitorenter
    //   41: aload_0
    //   42: iconst_0
    //   43: putfield 388	pdftron/PDF/PDFViewCtrl:ao	Z
    //   46: aload_0
    //   47: monitorexit
    //   48: aload_0
    //   49: aload_0
    //   50: getfield 441	pdftron/PDF/PDFViewCtrl:aD	I
    //   53: invokevirtual 966	pdftron/PDF/PDFViewCtrl:isContinuousPagePresentationMode	(I)Z
    //   56: ifne +25 -> 81
    //   59: aload_0
    //   60: getfield 279	pdftron/PDF/PDFViewCtrl:c	Ljava/util/concurrent/locks/Lock;
    //   63: invokeinterface 985 1 0
    //   68: aload_0
    //   69: invokespecial 443	pdftron/PDF/PDFViewCtrl:d	()V
    //   72: aload_0
    //   73: getfield 279	pdftron/PDF/PDFViewCtrl:c	Ljava/util/concurrent/locks/Lock;
    //   76: invokeinterface 988 1 0
    //   81: iload_2
    //   82: ifeq +15 -> 97
    //   85: aload_0
    //   86: aload_0
    //   87: invokespecial 446	pdftron/PDF/PDFViewCtrl:f	()I
    //   90: aload_0
    //   91: invokespecial 448	pdftron/PDF/PDFViewCtrl:g	()I
    //   94: invokevirtual 958	pdftron/PDF/PDFViewCtrl:scrollTo	(II)V
    //   97: iload 5
    //   99: ifne +29 -> 128
    //   102: iload_2
    //   103: ifeq +6 -> 109
    //   106: iconst_1
    //   107: istore 7
    //   109: iload 7
    //   111: ireturn
    //   112: astore_1
    //   113: aload_0
    //   114: monitorexit
    //   115: aload_1
    //   116: athrow
    //   117: astore_1
    //   118: iconst_0
    //   119: istore_2
    //   120: goto -81 -> 39
    //   123: astore_1
    //   124: aload_0
    //   125: monitorexit
    //   126: aload_1
    //   127: athrow
    //   128: iconst_2
    //   129: ireturn
    //   130: aload_0
    //   131: monitorenter
    //   132: aload_0
    //   133: iconst_1
    //   134: putfield 388	pdftron/PDF/PDFViewCtrl:ao	Z
    //   137: aload_0
    //   138: monitorexit
    //   139: aload_0
    //   140: aload 6
    //   142: putfield 384	pdftron/PDF/PDFViewCtrl:aq	Lpdftron/PDF/PDFViewCtrl$TextSearchListener;
    //   145: iload 4
    //   147: ifne +57 -> 204
    //   150: iconst_1
    //   151: istore 4
    //   153: new 50	pdftron/PDF/PDFViewCtrl$e
    //   156: dup
    //   157: aload_0
    //   158: aload_1
    //   159: iload_2
    //   160: iload_3
    //   161: iload 5
    //   163: iload 4
    //   165: invokespecial 1290	pdftron/PDF/PDFViewCtrl$e:<init>	(Lpdftron/PDF/PDFViewCtrl;Ljava/lang/String;ZZZZ)V
    //   168: astore_1
    //   169: aload_0
    //   170: new 53	pdftron/PDF/PDFViewCtrl$f
    //   173: dup
    //   174: aload_0
    //   175: invokespecial 1291	pdftron/PDF/PDFViewCtrl$f:<init>	(Lpdftron/PDF/PDFViewCtrl;)V
    //   178: putfield 1192	pdftron/PDF/PDFViewCtrl:ap	Lpdftron/PDF/PDFViewCtrl$f;
    //   181: aload_0
    //   182: getfield 1192	pdftron/PDF/PDFViewCtrl:ap	Lpdftron/PDF/PDFViewCtrl$f;
    //   185: iconst_1
    //   186: anewarray 50	pdftron/PDF/PDFViewCtrl$e
    //   189: dup
    //   190: iconst_0
    //   191: aload_1
    //   192: aastore
    //   193: invokevirtual 1295	pdftron/PDF/PDFViewCtrl$f:execute	([Ljava/lang/Object;)Landroid/os/AsyncTask;
    //   196: pop
    //   197: iconst_0
    //   198: ireturn
    //   199: astore_1
    //   200: aload_0
    //   201: monitorexit
    //   202: aload_1
    //   203: athrow
    //   204: iconst_0
    //   205: istore 4
    //   207: goto -54 -> 153
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	210	0	this	PDFViewCtrl
    //   0	210	1	paramString	String
    //   0	210	2	paramBoolean1	boolean
    //   0	210	3	paramBoolean2	boolean
    //   0	210	4	paramBoolean3	boolean
    //   0	210	5	paramBoolean4	boolean
    //   0	210	6	paramTextSearchListener	TextSearchListener
    //   1	109	7	i1	int
    // Exception table:
    //   from	to	target	type
    //   14	21	112	finally
    //   21	36	117	java/lang/Exception
    //   41	48	123	finally
    //   132	139	199	finally
  }
  
  public Annot getAnnotationAt(int paramInt1, int paramInt2)
  {
    if (this.a == null) {
      return null;
    }
    return new Annot(GetAnnotationAt(this.aO, paramInt1, paramInt2), this);
  }
  
  public double getCanvasHeight()
  {
    return GetCanvasHeight(this.aO);
  }
  
  public double getCanvasWidth()
  {
    return GetCanvasWidth(this.aO);
  }
  
  public int getCurrentPage()
  {
    double d1;
    int i2;
    double d2;
    if (this.a != null)
    {
      if ((this.aG) && (c.a(this.aJ))) {
        i3 = c.h(this.aJ);
      }
      int i4;
      int i5;
      double[] arrayOfDouble;
      int i6;
      do
      {
        return i3;
        if ((this.b.isFinished()) || (!this.l) || ((!isContinuousPagePresentationMode(this.aD)) && (!isFacingPagePresentationMode(this.aD)))) {
          break;
        }
        i4 = getScrollX();
        i5 = getScrollY();
        arrayOfDouble = a(i4, i5, this.P + i4, this.Q + i5);
        if (arrayOfDouble == null) {
          return GetCurrentPage(this.aO);
        }
        i6 = arrayOfDouble.length / 5;
        d1 = 0.0D;
        i1 = 0;
        i2 = 0;
        i3 = i1;
      } while (i2 >= i6);
      int i3 = i2 * 5;
      double d3 = arrayOfDouble[(i3 + 1)];
      double d4 = arrayOfDouble[(i3 + 2)];
      double d5 = arrayOfDouble[(i3 + 3)];
      double d6 = arrayOfDouble[(i3 + 4)];
      d2 = d3;
      if (d3 < i4) {
        d2 = i4;
      }
      d3 = d4;
      if (d4 < i5) {
        d3 = i5;
      }
      d4 = d5;
      if (d5 > this.P + i4) {
        d4 = this.P + i4;
      }
      d5 = d6;
      if (d6 > this.Q + i5) {
        d5 = this.Q + i5;
      }
      d3 = (d4 - d2) * (d5 - d3);
      d2 = d3;
      if (d3 < 0.0D) {
        d2 = -d3;
      }
      if (d2 <= d1) {
        break label347;
      }
      int i1 = (int)arrayOfDouble[i3];
    }
    for (;;)
    {
      i2 += 1;
      d1 = d2;
      break;
      return GetCurrentPage(this.aO);
      return 0;
      label347:
      d2 = d1;
    }
  }
  
  public PDFDoc getDoc()
  {
    return this.a;
  }
  
  public int getPageNumberFromClientPt(double paramDouble1, double paramDouble2)
  {
    return GetPageNumberFromScreenPt(this.aO, paramDouble1, paramDouble2);
  }
  
  public int getPagePresentationMode()
  {
    return GetPagePresentationMode(this.aO);
  }
  
  public int getPageViewMode()
  {
    return GetPageViewMode(this.aO);
  }
  
  public boolean getProgressiveRendering()
  {
    return this.v;
  }
  
  public boolean getRightToLeftLanguage()
  {
    return this.aN <= 0;
  }
  
  public Selection getSelection(int paramInt)
  {
    return new Selection(GetSelection(this.aO, paramInt), this);
  }
  
  public int getSelectionBeginPage()
  {
    return GetSelectionBeginPage(this.aO);
  }
  
  public int getSelectionEndPage()
  {
    return GetSelectionEndPage(this.aO);
  }
  
  public Tool getTool()
  {
    return this.az;
  }
  
  public ToolManager getToolManager()
  {
    return this.aA;
  }
  
  public int getViewCanvasHeight()
  {
    return this.S;
  }
  
  public int getViewCanvasWidth()
  {
    return this.R;
  }
  
  public double getZoom()
  {
    return GetZoom(this.aO);
  }
  
  public boolean gotoFirstPage()
  {
    return a(-2, 0);
  }
  
  public boolean gotoLastPage()
  {
    return a(2, 0);
  }
  
  public boolean gotoNextPage()
  {
    return a(1, 0);
  }
  
  @Deprecated
  public boolean gotoPage(int paramInt)
  {
    return setCurrentPage(paramInt);
  }
  
  public boolean gotoPreviousPage()
  {
    return a(-1, 0);
  }
  
  public boolean hasSelection()
  {
    return HasSelection(this.aO);
  }
  
  public boolean hasSelectionOnPage(int paramInt)
  {
    return HasSelectionOnPage(this.aO, paramInt);
  }
  
  public void initScrollbars(TypedArray paramTypedArray)
  {
    initializeScrollbars(paramTypedArray);
  }
  
  public boolean isContinuousPagePresentationMode(int paramInt)
  {
    return (paramInt == 2) || (paramInt == 4) || (paramInt == 6);
  }
  
  public boolean isFacingPagePresentationMode(int paramInt)
  {
    return (paramInt == 3) || (paramInt == 4) || (paramInt == 5) || (paramInt == 6);
  }
  
  public boolean isFinishedRendering()
  {
    return IsFinishedRendering(this.aO, false);
  }
  
  public boolean isFinishedRendering(boolean paramBoolean)
  {
    return IsFinishedRendering(this.aO, paramBoolean);
  }
  
  public boolean isHardwareAccelerated()
  {
    if (Build.VERSION.SDK_INT >= 11) {
      return super.isHardwareAccelerated();
    }
    return false;
  }
  
  public void lockDoc(boolean paramBoolean)
  {
    try
    {
      this.s = false;
      if (this.a != null)
      {
        if (paramBoolean)
        {
          this.s = true;
          if (!isFinishedRendering()) {
            cancelRendering();
          }
        }
        this.a.lock();
      }
      return;
    }
    catch (Exception localException) {}
  }
  
  protected boolean onDoubleTap(MotionEvent paramMotionEvent)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    int i1;
    int i2;
    if (this.az != null)
    {
      bool1 = bool2;
      if (this.aA != null) {
        for (i1 = this.az.getMode();; i1 = i2)
        {
          bool1 = this.az.onDoubleTap(paramMotionEvent);
          i2 = this.az.getNextToolMode();
          if (i1 == i2) {
            break;
          }
          this.az = this.aA.createTool(i2, this, this.az);
        }
      }
    }
    double d2;
    if ((!bool1) && (this.a != null))
    {
      cancelRendering();
      d1 = getZoom();
      d2 = c();
      if (Math.abs(d1 - d2) <= 0.009999999776482582D) {
        break label235;
      }
    }
    label235:
    for (double d1 = a(d2);; d1 = a(d1 * 2.0D))
    {
      a(paramMotionEvent.getX(), paramMotionEvent.getY(), d1);
      if ((this.az == null) || (this.aA == null)) {
        break;
      }
      for (i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onDoubleTapEnd(paramMotionEvent);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
    return true;
  }
  
  protected boolean onDoubleTapEvent(MotionEvent paramMotionEvent)
  {
    return false;
  }
  
  protected boolean onDown(MotionEvent paramMotionEvent)
  {
    this.an = false;
    a(paramMotionEvent.getX(), paramMotionEvent.getY());
    if (!this.b.isFinished()) {
      this.b.forceFinished(true);
    }
    int i1;
    int i2;
    if ((this.l) && (this.a != null))
    {
      i1 = getScrollX() - f();
      i2 = getScrollY() - g();
      if ((i1 != 0) || (i2 != 0)) {
        scrollBy(i1, i2);
      }
    }
    if ((this.az != null) && (this.aA != null)) {
      for (i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onDown(paramMotionEvent);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
    if ((this.a != null) && (!isContinuousPagePresentationMode(this.aD))) {
      this.aJ.a(paramMotionEvent, this.aH, this.aI);
    }
    return true;
  }
  
  /* Error */
  protected void onDraw(Canvas paramCanvas)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 528	pdftron/PDF/PDFViewCtrl:a	Lpdftron/PDF/PDFDoc;
    //   4: ifnonnull +4 -> 8
    //   7: return
    //   8: aload_0
    //   9: getfield 279	pdftron/PDF/PDFViewCtrl:c	Ljava/util/concurrent/locks/Lock;
    //   12: invokeinterface 985 1 0
    //   17: iconst_0
    //   18: istore 17
    //   20: aload_0
    //   21: invokevirtual 1229	pdftron/PDF/PDFViewCtrl:getScrollX	()I
    //   24: istore 38
    //   26: aload_0
    //   27: invokevirtual 1235	pdftron/PDF/PDFViewCtrl:getScrollY	()I
    //   30: istore 24
    //   32: iconst_0
    //   33: istore 22
    //   35: aload_0
    //   36: getfield 581	pdftron/PDF/PDFViewCtrl:j	Z
    //   39: ifne +30 -> 69
    //   42: aload_0
    //   43: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   46: ifne +23 -> 69
    //   49: aload_0
    //   50: getfield 320	pdftron/PDF/PDFViewCtrl:aU	Landroid/os/Handler;
    //   53: iconst_0
    //   54: invokevirtual 1430	android/os/Handler:hasMessages	(I)Z
    //   57: ifne +12 -> 69
    //   60: aload_0
    //   61: getfield 320	pdftron/PDF/PDFViewCtrl:aU	Landroid/os/Handler;
    //   64: iconst_0
    //   65: invokevirtual 991	android/os/Handler:sendEmptyMessage	(I)Z
    //   68: pop
    //   69: aload_0
    //   70: getfield 287	pdftron/PDF/PDFViewCtrl:R	I
    //   73: istore 21
    //   75: aload_0
    //   76: getfield 289	pdftron/PDF/PDFViewCtrl:S	I
    //   79: istore 41
    //   81: aload_0
    //   82: getfield 437	pdftron/PDF/PDFViewCtrl:aO	J
    //   85: invokestatic 520	pdftron/PDF/PDFViewCtrl:GetCurCanvasId	(J)I
    //   88: istore 20
    //   90: iconst_0
    //   91: istore 16
    //   93: aload_0
    //   94: getfield 684	pdftron/PDF/PDFViewCtrl:e	Lpdftron/PDF/r;
    //   97: iload 20
    //   99: invokevirtual 1153	pdftron/PDF/r:a	(I)Lpdftron/PDF/r$a;
    //   102: astore 45
    //   104: aload 45
    //   106: ifnull +25 -> 131
    //   109: aload 45
    //   111: getfield 1158	pdftron/PDF/r$a:b	I
    //   114: istore 21
    //   116: aload_0
    //   117: getfield 634	pdftron/PDF/PDFViewCtrl:N	[Lpdftron/PDF/r$a;
    //   120: astore 46
    //   122: iconst_1
    //   123: istore 16
    //   125: aload 46
    //   127: iconst_0
    //   128: aload 45
    //   130: aastore
    //   131: iconst_0
    //   132: istore 18
    //   134: aconst_null
    //   135: astore 45
    //   137: aload_0
    //   138: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   141: invokestatic 1313	pdftron/PDF/PDFViewCtrl$c:a	(Lpdftron/PDF/PDFViewCtrl$c;)Z
    //   144: ifeq +1965 -> 2109
    //   147: aload_0
    //   148: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   151: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   154: ifeq +1955 -> 2109
    //   157: aload_1
    //   158: invokevirtual 1435	android/graphics/Canvas:save	()I
    //   161: pop
    //   162: aload_1
    //   163: aload_0
    //   164: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   167: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   170: i2f
    //   171: fconst_0
    //   172: invokevirtual 1438	android/graphics/Canvas:translate	(FF)V
    //   175: aload_0
    //   176: getfield 703	pdftron/PDF/PDFViewCtrl:G	Landroid/graphics/Matrix;
    //   179: aload_0
    //   180: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   183: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   186: i2f
    //   187: fconst_0
    //   188: invokevirtual 1441	android/graphics/Matrix:setTranslate	(FF)V
    //   191: iload 38
    //   193: aload_0
    //   194: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   197: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   200: isub
    //   201: istore 17
    //   203: iload 17
    //   205: istore 19
    //   207: iload 17
    //   209: ifge +1923 -> 2132
    //   212: iload 17
    //   214: ineg
    //   215: istore 18
    //   217: iconst_0
    //   218: istore 19
    //   220: goto +1912 -> 2132
    //   223: aload_0
    //   224: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   227: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   230: ifge +315 -> 545
    //   233: aload_0
    //   234: getfield 525	pdftron/PDF/PDFViewCtrl:aN	I
    //   237: ifle +274 -> 511
    //   240: aload_0
    //   241: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   244: invokestatic 1444	pdftron/PDF/PDFViewCtrl$c:c	(Lpdftron/PDF/PDFViewCtrl$c;)[D
    //   247: astore 46
    //   249: aload_0
    //   250: getfield 525	pdftron/PDF/PDFViewCtrl:aN	I
    //   253: ifle +270 -> 523
    //   256: aload_0
    //   257: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   260: invokestatic 1446	pdftron/PDF/PDFViewCtrl$c:e	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   263: pop
    //   264: aload_0
    //   265: getfield 525	pdftron/PDF/PDFViewCtrl:aN	I
    //   268: ifle +266 -> 534
    //   271: aload_0
    //   272: iload 20
    //   274: invokespecial 1448	pdftron/PDF/PDFViewCtrl:b	(I)I
    //   277: istore 19
    //   279: aload 46
    //   281: astore 45
    //   283: iload 19
    //   285: ifle +1821 -> 2106
    //   288: aload_0
    //   289: getfield 684	pdftron/PDF/PDFViewCtrl:e	Lpdftron/PDF/r;
    //   292: iload 19
    //   294: invokevirtual 1153	pdftron/PDF/r:a	(I)Lpdftron/PDF/r$a;
    //   297: astore 47
    //   299: aload 46
    //   301: astore 45
    //   303: aload 47
    //   305: ifnull +1801 -> 2106
    //   308: aload_0
    //   309: getfield 634	pdftron/PDF/PDFViewCtrl:N	[Lpdftron/PDF/r$a;
    //   312: astore 45
    //   314: iload 16
    //   316: iconst_1
    //   317: iadd
    //   318: istore 19
    //   320: aload 45
    //   322: iload 16
    //   324: aload 47
    //   326: aastore
    //   327: iload 19
    //   329: istore 16
    //   331: aload 46
    //   333: astore 45
    //   335: iconst_1
    //   336: istore 25
    //   338: iconst_1
    //   339: istore 19
    //   341: iload 16
    //   343: istore 27
    //   345: iload 18
    //   347: istore 26
    //   349: iload 17
    //   351: istore 20
    //   353: iconst_0
    //   354: istore 17
    //   356: iconst_0
    //   357: istore 30
    //   359: aload_0
    //   360: getfield 581	pdftron/PDF/PDFViewCtrl:j	Z
    //   363: ifeq +24 -> 387
    //   366: aload_0
    //   367: getfield 581	pdftron/PDF/PDFViewCtrl:j	Z
    //   370: ifeq +10 -> 380
    //   373: aload_0
    //   374: getfield 589	pdftron/PDF/PDFViewCtrl:u	Z
    //   377: ifne +10 -> 387
    //   380: aload_0
    //   381: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   384: ifeq +1126 -> 1510
    //   387: aload_0
    //   388: getfield 589	pdftron/PDF/PDFViewCtrl:u	Z
    //   391: ifeq +10 -> 401
    //   394: aload_0
    //   395: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   398: ifeq +17 -> 415
    //   401: aload_0
    //   402: aload_1
    //   403: iload 38
    //   405: iload 24
    //   407: iload 20
    //   409: iload 24
    //   411: iconst_0
    //   412: invokespecial 1450	pdftron/PDF/PDFViewCtrl:a	(Landroid/graphics/Canvas;IIIIZ)V
    //   415: aload_0
    //   416: getfield 283	pdftron/PDF/PDFViewCtrl:P	I
    //   419: istore 18
    //   421: aload_0
    //   422: getfield 285	pdftron/PDF/PDFViewCtrl:Q	I
    //   425: istore 42
    //   427: iconst_0
    //   428: istore 28
    //   430: iload 24
    //   432: istore 16
    //   434: iload 28
    //   436: iload 27
    //   438: if_icmpge +1055 -> 1493
    //   441: aload_0
    //   442: getfield 634	pdftron/PDF/PDFViewCtrl:N	[Lpdftron/PDF/r$a;
    //   445: iload 28
    //   447: aaload
    //   448: astore 46
    //   450: getstatic 268	pdftron/PDF/PDFViewCtrl:be	Z
    //   453: ifne +241 -> 694
    //   456: aload 46
    //   458: ifnonnull +236 -> 694
    //   461: new 1452	java/lang/AssertionError
    //   464: dup
    //   465: invokespecial 1453	java/lang/AssertionError:<init>	()V
    //   468: athrow
    //   469: astore 45
    //   471: iload 19
    //   473: istore 16
    //   475: iconst_1
    //   476: istore 17
    //   478: iload 16
    //   480: ifeq +14 -> 494
    //   483: aload_1
    //   484: invokevirtual 1456	android/graphics/Canvas:restore	()V
    //   487: aload_0
    //   488: getfield 703	pdftron/PDF/PDFViewCtrl:G	Landroid/graphics/Matrix;
    //   491: invokevirtual 1459	android/graphics/Matrix:reset	()V
    //   494: iload 17
    //   496: ifeq +12 -> 508
    //   499: aload_0
    //   500: getfield 279	pdftron/PDF/PDFViewCtrl:c	Ljava/util/concurrent/locks/Lock;
    //   503: invokeinterface 988 1 0
    //   508: aload 45
    //   510: athrow
    //   511: aload_0
    //   512: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   515: invokestatic 1461	pdftron/PDF/PDFViewCtrl$c:d	(Lpdftron/PDF/PDFViewCtrl$c;)[D
    //   518: astore 46
    //   520: goto -271 -> 249
    //   523: aload_0
    //   524: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   527: invokestatic 1463	pdftron/PDF/PDFViewCtrl$c:f	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   530: pop
    //   531: goto -267 -> 264
    //   534: aload_0
    //   535: iload 20
    //   537: invokespecial 1465	pdftron/PDF/PDFViewCtrl:a	(I)I
    //   540: istore 19
    //   542: goto -263 -> 279
    //   545: aload_0
    //   546: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   549: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   552: ifle +1554 -> 2106
    //   555: aload_0
    //   556: getfield 525	pdftron/PDF/PDFViewCtrl:aN	I
    //   559: ifle +101 -> 660
    //   562: aload_0
    //   563: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   566: invokestatic 1461	pdftron/PDF/PDFViewCtrl$c:d	(Lpdftron/PDF/PDFViewCtrl$c;)[D
    //   569: astore 46
    //   571: aload_0
    //   572: getfield 525	pdftron/PDF/PDFViewCtrl:aN	I
    //   575: ifle +97 -> 672
    //   578: aload_0
    //   579: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   582: invokestatic 1463	pdftron/PDF/PDFViewCtrl$c:f	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   585: pop
    //   586: aload_0
    //   587: getfield 525	pdftron/PDF/PDFViewCtrl:aN	I
    //   590: ifle +93 -> 683
    //   593: aload_0
    //   594: iload 20
    //   596: invokespecial 1465	pdftron/PDF/PDFViewCtrl:a	(I)I
    //   599: istore 19
    //   601: aload 46
    //   603: astore 45
    //   605: iload 19
    //   607: ifle +1499 -> 2106
    //   610: aload_0
    //   611: getfield 684	pdftron/PDF/PDFViewCtrl:e	Lpdftron/PDF/r;
    //   614: iload 19
    //   616: invokevirtual 1153	pdftron/PDF/r:a	(I)Lpdftron/PDF/r$a;
    //   619: astore 47
    //   621: aload 46
    //   623: astore 45
    //   625: aload 47
    //   627: ifnull +1479 -> 2106
    //   630: aload_0
    //   631: getfield 634	pdftron/PDF/PDFViewCtrl:N	[Lpdftron/PDF/r$a;
    //   634: astore 45
    //   636: iload 16
    //   638: iconst_1
    //   639: iadd
    //   640: istore 19
    //   642: aload 45
    //   644: iload 16
    //   646: aload 47
    //   648: aastore
    //   649: aload 46
    //   651: astore 45
    //   653: iload 19
    //   655: istore 16
    //   657: goto -322 -> 335
    //   660: aload_0
    //   661: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   664: invokestatic 1444	pdftron/PDF/PDFViewCtrl$c:c	(Lpdftron/PDF/PDFViewCtrl$c;)[D
    //   667: astore 46
    //   669: goto -98 -> 571
    //   672: aload_0
    //   673: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   676: invokestatic 1446	pdftron/PDF/PDFViewCtrl$c:e	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   679: pop
    //   680: goto -94 -> 586
    //   683: aload_0
    //   684: iload 20
    //   686: invokespecial 1448	pdftron/PDF/PDFViewCtrl:b	(I)I
    //   689: istore 19
    //   691: goto -90 -> 601
    //   694: aload_0
    //   695: getfield 589	pdftron/PDF/PDFViewCtrl:u	Z
    //   698: ifeq +1463 -> 2161
    //   701: aload_0
    //   702: getfield 639	pdftron/PDF/PDFViewCtrl:O	Ljava/util/LinkedList;
    //   705: invokevirtual 1468	java/util/LinkedList:clear	()V
    //   708: goto +1453 -> 2161
    //   711: aload_0
    //   712: getfield 684	pdftron/PDF/PDFViewCtrl:e	Lpdftron/PDF/r;
    //   715: invokevirtual 1470	pdftron/PDF/r:a	()Z
    //   718: ifne +1679 -> 2397
    //   721: aload 46
    //   723: getfield 1162	pdftron/PDF/r$a:d	I
    //   726: istore 43
    //   728: aload 46
    //   730: getfield 1164	pdftron/PDF/r$a:e	I
    //   733: istore 44
    //   735: iload 29
    //   737: iload 43
    //   739: idiv
    //   740: istore 31
    //   742: iload 18
    //   744: iload 43
    //   746: idiv
    //   747: istore 23
    //   749: iload 23
    //   751: iload 44
    //   753: imul
    //   754: iload 31
    //   756: iadd
    //   757: istore 20
    //   759: iload 29
    //   761: iload 31
    //   763: iload 43
    //   765: imul
    //   766: isub
    //   767: istore 39
    //   769: iload 18
    //   771: iload 23
    //   773: iload 43
    //   775: imul
    //   776: isub
    //   777: istore 31
    //   779: getstatic 268	pdftron/PDF/PDFViewCtrl:be	Z
    //   782: ifne +1277 -> 2059
    //   785: iload 39
    //   787: iflt +22 -> 809
    //   790: iload 31
    //   792: iflt +17 -> 809
    //   795: iload 39
    //   797: iload 43
    //   799: if_icmpge +10 -> 809
    //   802: iload 31
    //   804: iload 43
    //   806: if_icmplt +1253 -> 2059
    //   809: new 1452	java/lang/AssertionError
    //   812: dup
    //   813: invokespecial 1453	java/lang/AssertionError:<init>	()V
    //   816: athrow
    //   817: getstatic 268	pdftron/PDF/PDFViewCtrl:be	Z
    //   820: ifne +16 -> 836
    //   823: iload 25
    //   825: ifne +11 -> 836
    //   828: new 1452	java/lang/AssertionError
    //   831: dup
    //   832: invokespecial 1453	java/lang/AssertionError:<init>	()V
    //   835: athrow
    //   836: aload_0
    //   837: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   840: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   843: ifge +56 -> 899
    //   846: aload_0
    //   847: getfield 283	pdftron/PDF/PDFViewCtrl:P	I
    //   850: iload 18
    //   852: isub
    //   853: istore 18
    //   855: iconst_0
    //   856: istore 17
    //   858: iconst_0
    //   859: istore 16
    //   861: iload 21
    //   863: aload_0
    //   864: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   867: invokestatic 1473	pdftron/PDF/PDFViewCtrl$c:g	(Lpdftron/PDF/PDFViewCtrl$c;)F
    //   870: f2d
    //   871: ldc2_w 791
    //   874: dadd
    //   875: d2i
    //   876: iadd
    //   877: istore 20
    //   879: aload 45
    //   881: ifnull +1352 -> 2233
    //   884: aload_0
    //   885: aload_1
    //   886: aload 45
    //   888: iload 20
    //   890: iload 24
    //   892: iconst_0
    //   893: invokespecial 1475	pdftron/PDF/PDFViewCtrl:a	(Landroid/graphics/Canvas;[DIIZ)V
    //   896: goto +1337 -> 2233
    //   899: aload_0
    //   900: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   903: invokestatic 1432	pdftron/PDF/PDFViewCtrl$c:b	(Lpdftron/PDF/PDFViewCtrl$c;)I
    //   906: ifle +1162 -> 2068
    //   909: aload_0
    //   910: getfield 283	pdftron/PDF/PDFViewCtrl:P	I
    //   913: iload 18
    //   915: isub
    //   916: istore 18
    //   918: aload 46
    //   920: getfield 1158	pdftron/PDF/r$a:b	I
    //   923: iload 18
    //   925: isub
    //   926: istore 17
    //   928: iconst_0
    //   929: istore 16
    //   931: iload 17
    //   933: ineg
    //   934: iload 18
    //   936: isub
    //   937: aload_0
    //   938: getfield 474	pdftron/PDF/PDFViewCtrl:aJ	Lpdftron/PDF/PDFViewCtrl$c;
    //   941: invokestatic 1473	pdftron/PDF/PDFViewCtrl$c:g	(Lpdftron/PDF/PDFViewCtrl$c;)F
    //   944: f2d
    //   945: ldc2_w 791
    //   948: dadd
    //   949: d2i
    //   950: isub
    //   951: istore 20
    //   953: goto -74 -> 879
    //   956: aload_0
    //   957: getfield 684	pdftron/PDF/PDFViewCtrl:e	Lpdftron/PDF/r;
    //   960: aload 46
    //   962: getfield 1477	pdftron/PDF/r$a:a	I
    //   965: iload 35
    //   967: invokevirtual 1480	pdftron/PDF/r:b	(II)Lpdftron/PDF/q;
    //   970: astore 47
    //   972: aload 47
    //   974: ifnull +1410 -> 2384
    //   977: aload_0
    //   978: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   981: ifeq +95 -> 1076
    //   984: aload_0
    //   985: getfield 708	pdftron/PDF/PDFViewCtrl:I	Landroid/graphics/Rect;
    //   988: iload 37
    //   990: iload 31
    //   992: iload 37
    //   994: iload 36
    //   996: iadd
    //   997: iload 31
    //   999: iload 33
    //   1001: iadd
    //   1002: invokevirtual 1483	android/graphics/Rect:set	(IIII)V
    //   1005: iload 37
    //   1007: aload 47
    //   1009: getfield 1486	pdftron/PDF/q:b	I
    //   1012: iadd
    //   1013: iload 29
    //   1015: isub
    //   1016: istore 37
    //   1018: aload 47
    //   1020: getfield 1487	pdftron/PDF/q:c	I
    //   1023: iload 31
    //   1025: iadd
    //   1026: iload 18
    //   1028: isub
    //   1029: istore 40
    //   1031: aload_0
    //   1032: getfield 710	pdftron/PDF/PDFViewCtrl:J	Landroid/graphics/Rect;
    //   1035: iload 37
    //   1037: iload 40
    //   1039: iload 37
    //   1041: iload 36
    //   1043: iadd
    //   1044: iload 40
    //   1046: iload 33
    //   1048: iadd
    //   1049: invokevirtual 1483	android/graphics/Rect:set	(IIII)V
    //   1052: aload_1
    //   1053: aload 47
    //   1055: getfield 1489	pdftron/PDF/q:f	Landroid/graphics/Bitmap;
    //   1058: aload_0
    //   1059: getfield 708	pdftron/PDF/PDFViewCtrl:I	Landroid/graphics/Rect;
    //   1062: aload_0
    //   1063: getfield 710	pdftron/PDF/PDFViewCtrl:J	Landroid/graphics/Rect;
    //   1066: aload_0
    //   1067: getfield 659	pdftron/PDF/PDFViewCtrl:M	Landroid/graphics/Paint;
    //   1070: invokevirtual 1492	android/graphics/Canvas:drawBitmap	(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V
    //   1073: goto +1292 -> 2365
    //   1076: aload_0
    //   1077: getfield 589	pdftron/PDF/PDFViewCtrl:u	Z
    //   1080: ifne +105 -> 1185
    //   1083: aload_0
    //   1084: getfield 708	pdftron/PDF/PDFViewCtrl:I	Landroid/graphics/Rect;
    //   1087: iload 37
    //   1089: iload 31
    //   1091: iload 37
    //   1093: iload 36
    //   1095: iadd
    //   1096: iload 31
    //   1098: iload 33
    //   1100: iadd
    //   1101: invokevirtual 1483	android/graphics/Rect:set	(IIII)V
    //   1104: aload_0
    //   1105: getfield 710	pdftron/PDF/PDFViewCtrl:J	Landroid/graphics/Rect;
    //   1108: aload 47
    //   1110: getfield 1486	pdftron/PDF/q:b	I
    //   1113: iload 37
    //   1115: iadd
    //   1116: iload 16
    //   1118: iadd
    //   1119: aload 47
    //   1121: getfield 1487	pdftron/PDF/q:c	I
    //   1124: iload 31
    //   1126: iadd
    //   1127: iload 30
    //   1129: iadd
    //   1130: iload 37
    //   1132: aload 47
    //   1134: getfield 1486	pdftron/PDF/q:b	I
    //   1137: iadd
    //   1138: iload 36
    //   1140: iadd
    //   1141: iload 16
    //   1143: iadd
    //   1144: aload 47
    //   1146: getfield 1487	pdftron/PDF/q:c	I
    //   1149: iload 31
    //   1151: iadd
    //   1152: iload 33
    //   1154: iadd
    //   1155: iload 30
    //   1157: iadd
    //   1158: invokevirtual 1483	android/graphics/Rect:set	(IIII)V
    //   1161: aload_1
    //   1162: aload 47
    //   1164: getfield 1489	pdftron/PDF/q:f	Landroid/graphics/Bitmap;
    //   1167: aload_0
    //   1168: getfield 708	pdftron/PDF/PDFViewCtrl:I	Landroid/graphics/Rect;
    //   1171: aload_0
    //   1172: getfield 710	pdftron/PDF/PDFViewCtrl:J	Landroid/graphics/Rect;
    //   1175: aload_0
    //   1176: getfield 659	pdftron/PDF/PDFViewCtrl:M	Landroid/graphics/Paint;
    //   1179: invokevirtual 1492	android/graphics/Canvas:drawBitmap	(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V
    //   1182: goto +1183 -> 2365
    //   1185: new 1494	pdftron/PDF/n
    //   1188: dup
    //   1189: invokespecial 1495	pdftron/PDF/n:<init>	()V
    //   1192: astore 48
    //   1194: aload 48
    //   1196: aload 47
    //   1198: getfield 1489	pdftron/PDF/q:f	Landroid/graphics/Bitmap;
    //   1201: putfield 1497	pdftron/PDF/n:a	Landroid/graphics/Bitmap;
    //   1204: aload 48
    //   1206: iload 37
    //   1208: putfield 1498	pdftron/PDF/n:b	I
    //   1211: aload 48
    //   1213: iload 31
    //   1215: putfield 1499	pdftron/PDF/n:c	I
    //   1218: aload 48
    //   1220: iload 37
    //   1222: iload 36
    //   1224: iadd
    //   1225: putfield 1500	pdftron/PDF/n:d	I
    //   1228: aload 48
    //   1230: iload 31
    //   1232: iload 33
    //   1234: iadd
    //   1235: putfield 1501	pdftron/PDF/n:e	I
    //   1238: aload 48
    //   1240: aload 47
    //   1242: getfield 1486	pdftron/PDF/q:b	I
    //   1245: iload 37
    //   1247: iadd
    //   1248: iload 16
    //   1250: iadd
    //   1251: putfield 1502	pdftron/PDF/n:f	I
    //   1254: aload 48
    //   1256: aload 47
    //   1258: getfield 1487	pdftron/PDF/q:c	I
    //   1261: iload 31
    //   1263: iadd
    //   1264: iload 30
    //   1266: iadd
    //   1267: putfield 1504	pdftron/PDF/n:g	I
    //   1270: aload 48
    //   1272: iload 37
    //   1274: aload 47
    //   1276: getfield 1486	pdftron/PDF/q:b	I
    //   1279: iadd
    //   1280: iload 36
    //   1282: iadd
    //   1283: iload 16
    //   1285: iadd
    //   1286: putfield 1506	pdftron/PDF/n:h	I
    //   1289: aload 48
    //   1291: aload 47
    //   1293: getfield 1487	pdftron/PDF/q:c	I
    //   1296: iload 31
    //   1298: iadd
    //   1299: iload 33
    //   1301: iadd
    //   1302: iload 30
    //   1304: iadd
    //   1305: putfield 1508	pdftron/PDF/n:i	I
    //   1308: aload_0
    //   1309: getfield 639	pdftron/PDF/PDFViewCtrl:O	Ljava/util/LinkedList;
    //   1312: aload 48
    //   1314: invokevirtual 1512	java/util/LinkedList:addLast	(Ljava/lang/Object;)V
    //   1317: goto +1048 -> 2365
    //   1320: aload_0
    //   1321: getfield 589	pdftron/PDF/PDFViewCtrl:u	Z
    //   1324: ifeq +1079 -> 2403
    //   1327: aload_0
    //   1328: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   1331: ifne +1072 -> 2403
    //   1334: iload 20
    //   1336: ifeq +22 -> 1358
    //   1339: iload 28
    //   1341: ifne +127 -> 1468
    //   1344: aload_0
    //   1345: aload_1
    //   1346: iload 38
    //   1348: iload 24
    //   1350: iload 29
    //   1352: iload 24
    //   1354: iconst_1
    //   1355: invokespecial 1450	pdftron/PDF/PDFViewCtrl:a	(Landroid/graphics/Canvas;IIIIZ)V
    //   1358: aload_0
    //   1359: getfield 639	pdftron/PDF/PDFViewCtrl:O	Ljava/util/LinkedList;
    //   1362: iconst_0
    //   1363: invokevirtual 1516	java/util/LinkedList:listIterator	(I)Ljava/util/ListIterator;
    //   1366: astore 46
    //   1368: aload 46
    //   1370: invokeinterface 1521 1 0
    //   1375: ifeq +1028 -> 2403
    //   1378: aload 46
    //   1380: invokeinterface 1525 1 0
    //   1385: checkcast 1494	pdftron/PDF/n
    //   1388: astore 47
    //   1390: aload_0
    //   1391: getfield 708	pdftron/PDF/PDFViewCtrl:I	Landroid/graphics/Rect;
    //   1394: aload 47
    //   1396: getfield 1498	pdftron/PDF/n:b	I
    //   1399: aload 47
    //   1401: getfield 1499	pdftron/PDF/n:c	I
    //   1404: aload 47
    //   1406: getfield 1500	pdftron/PDF/n:d	I
    //   1409: aload 47
    //   1411: getfield 1501	pdftron/PDF/n:e	I
    //   1414: invokevirtual 1483	android/graphics/Rect:set	(IIII)V
    //   1417: aload_0
    //   1418: getfield 710	pdftron/PDF/PDFViewCtrl:J	Landroid/graphics/Rect;
    //   1421: aload 47
    //   1423: getfield 1502	pdftron/PDF/n:f	I
    //   1426: aload 47
    //   1428: getfield 1504	pdftron/PDF/n:g	I
    //   1431: aload 47
    //   1433: getfield 1506	pdftron/PDF/n:h	I
    //   1436: aload 47
    //   1438: getfield 1508	pdftron/PDF/n:i	I
    //   1441: invokevirtual 1483	android/graphics/Rect:set	(IIII)V
    //   1444: aload_1
    //   1445: aload 47
    //   1447: getfield 1497	pdftron/PDF/n:a	Landroid/graphics/Bitmap;
    //   1450: aload_0
    //   1451: getfield 708	pdftron/PDF/PDFViewCtrl:I	Landroid/graphics/Rect;
    //   1454: aload_0
    //   1455: getfield 710	pdftron/PDF/PDFViewCtrl:J	Landroid/graphics/Rect;
    //   1458: aload_0
    //   1459: getfield 659	pdftron/PDF/PDFViewCtrl:M	Landroid/graphics/Paint;
    //   1462: invokevirtual 1492	android/graphics/Canvas:drawBitmap	(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V
    //   1465: goto -97 -> 1368
    //   1468: iload 25
    //   1470: ifeq -112 -> 1358
    //   1473: aload 45
    //   1475: ifnull -117 -> 1358
    //   1478: aload_0
    //   1479: aload_1
    //   1480: aload 45
    //   1482: iload 16
    //   1484: iload 30
    //   1486: iconst_1
    //   1487: invokespecial 1475	pdftron/PDF/PDFViewCtrl:a	(Landroid/graphics/Canvas;[DIIZ)V
    //   1490: goto -132 -> 1358
    //   1493: aload_0
    //   1494: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   1497: ifeq +13 -> 1510
    //   1500: iload 22
    //   1502: ifeq +8 -> 1510
    //   1505: aload_0
    //   1506: iconst_0
    //   1507: putfield 1053	pdftron/PDF/PDFViewCtrl:aE	Z
    //   1510: aload_0
    //   1511: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   1514: ifne +435 -> 1949
    //   1517: aload_0
    //   1518: getfield 281	pdftron/PDF/PDFViewCtrl:d	Ljava/util/concurrent/locks/Lock;
    //   1521: invokeinterface 985 1 0
    //   1526: aload_0
    //   1527: getfield 566	pdftron/PDF/PDFViewCtrl:i	Landroid/graphics/Bitmap;
    //   1530: ifnull +410 -> 1940
    //   1533: aload_0
    //   1534: getfield 563	pdftron/PDF/PDFViewCtrl:o	I
    //   1537: aload_0
    //   1538: invokevirtual 962	pdftron/PDF/PDFViewCtrl:getCurrentPage	()I
    //   1541: if_icmpne +399 -> 1940
    //   1544: aload_0
    //   1545: getfield 715	pdftron/PDF/PDFViewCtrl:K	Landroid/graphics/RectF;
    //   1548: fconst_0
    //   1549: fconst_0
    //   1550: aload_0
    //   1551: getfield 283	pdftron/PDF/PDFViewCtrl:P	I
    //   1554: i2f
    //   1555: aload_0
    //   1556: getfield 285	pdftron/PDF/PDFViewCtrl:Q	I
    //   1559: i2f
    //   1560: invokevirtual 835	android/graphics/RectF:set	(FFFF)V
    //   1563: aload_0
    //   1564: invokevirtual 980	pdftron/PDF/PDFViewCtrl:getZoom	()D
    //   1567: d2f
    //   1568: fstore 6
    //   1570: aload_0
    //   1571: getfield 1090	pdftron/PDF/PDFViewCtrl:aa	F
    //   1574: fstore_3
    //   1575: aload_0
    //   1576: getfield 1092	pdftron/PDF/PDFViewCtrl:ab	F
    //   1579: fstore_2
    //   1580: iconst_2
    //   1581: newarray float
    //   1583: astore 45
    //   1585: aload 45
    //   1587: iconst_0
    //   1588: fconst_0
    //   1589: fastore
    //   1590: aload 45
    //   1592: iconst_1
    //   1593: fconst_0
    //   1594: fastore
    //   1595: aload_0
    //   1596: invokevirtual 1229	pdftron/PDF/PDFViewCtrl:getScrollX	()I
    //   1599: i2f
    //   1600: fstore 4
    //   1602: aload_0
    //   1603: invokevirtual 1235	pdftron/PDF/PDFViewCtrl:getScrollY	()I
    //   1606: i2f
    //   1607: fstore 5
    //   1609: fload 4
    //   1611: fconst_0
    //   1612: fcmpg
    //   1613: ifle +10 -> 1623
    //   1616: fload 5
    //   1618: fconst_0
    //   1619: fcmpg
    //   1620: ifgt +48 -> 1668
    //   1623: aload_0
    //   1624: dconst_0
    //   1625: dconst_0
    //   1626: invokevirtual 1527	pdftron/PDF/PDFViewCtrl:convCanvasPtToClientPt	(DD)[D
    //   1629: astore 46
    //   1631: aload 46
    //   1633: iconst_0
    //   1634: daload
    //   1635: d2f
    //   1636: fstore 7
    //   1638: aload 46
    //   1640: iconst_1
    //   1641: daload
    //   1642: d2f
    //   1643: fstore 8
    //   1645: fload 4
    //   1647: fconst_0
    //   1648: fcmpg
    //   1649: ifgt +795 -> 2444
    //   1652: fload 7
    //   1654: fconst_0
    //   1655: fcmpl
    //   1656: ifle +788 -> 2444
    //   1659: aload 45
    //   1661: iconst_0
    //   1662: fload 7
    //   1664: fastore
    //   1665: goto +779 -> 2444
    //   1668: fload_3
    //   1669: fload 6
    //   1671: fmul
    //   1672: aload 45
    //   1674: iconst_0
    //   1675: faload
    //   1676: fadd
    //   1677: fstore 7
    //   1679: fload_2
    //   1680: fload 6
    //   1682: fmul
    //   1683: aload 45
    //   1685: iconst_1
    //   1686: faload
    //   1687: fadd
    //   1688: fstore 8
    //   1690: fload 6
    //   1692: aload_0
    //   1693: getfield 1080	pdftron/PDF/PDFViewCtrl:T	F
    //   1696: fdiv
    //   1697: fstore 9
    //   1699: aload_0
    //   1700: getfield 1082	pdftron/PDF/PDFViewCtrl:W	F
    //   1703: fstore 10
    //   1705: aload_0
    //   1706: getfield 1084	pdftron/PDF/PDFViewCtrl:X	F
    //   1709: fstore 11
    //   1711: aload_0
    //   1712: getfield 283	pdftron/PDF/PDFViewCtrl:P	I
    //   1715: i2f
    //   1716: fstore 12
    //   1718: aload_0
    //   1719: getfield 1082	pdftron/PDF/PDFViewCtrl:W	F
    //   1722: fstore 13
    //   1724: aload_0
    //   1725: getfield 285	pdftron/PDF/PDFViewCtrl:Q	I
    //   1728: i2f
    //   1729: fstore 14
    //   1731: aload_0
    //   1732: getfield 1084	pdftron/PDF/PDFViewCtrl:X	F
    //   1735: fstore 15
    //   1737: fconst_0
    //   1738: fstore 4
    //   1740: fconst_0
    //   1741: fstore 5
    //   1743: fload 5
    //   1745: fstore_3
    //   1746: fload 4
    //   1748: fstore_2
    //   1749: aload_0
    //   1750: getfield 597	pdftron/PDF/PDFViewCtrl:n	I
    //   1753: iconst_1
    //   1754: if_icmple +68 -> 1822
    //   1757: fload 5
    //   1759: fstore_3
    //   1760: fload 4
    //   1762: fstore_2
    //   1763: aload_0
    //   1764: aload_0
    //   1765: getfield 441	pdftron/PDF/PDFViewCtrl:aD	I
    //   1768: invokevirtual 966	pdftron/PDF/PDFViewCtrl:isContinuousPagePresentationMode	(I)Z
    //   1771: ifeq +51 -> 1822
    //   1774: aload_0
    //   1775: aload_0
    //   1776: getfield 1096	pdftron/PDF/PDFViewCtrl:ac	F
    //   1779: f2d
    //   1780: aload_0
    //   1781: getfield 1098	pdftron/PDF/PDFViewCtrl:ad	F
    //   1784: f2d
    //   1785: aload_0
    //   1786: getfield 1094	pdftron/PDF/PDFViewCtrl:ae	I
    //   1789: invokevirtual 1529	pdftron/PDF/PDFViewCtrl:convPagePtToCanvasPt	(DDI)[D
    //   1792: astore 45
    //   1794: aload_0
    //   1795: getfield 1090	pdftron/PDF/PDFViewCtrl:aa	F
    //   1798: aload 45
    //   1800: iconst_0
    //   1801: daload
    //   1802: d2f
    //   1803: fsub
    //   1804: fload 6
    //   1806: fmul
    //   1807: fstore_2
    //   1808: aload_0
    //   1809: getfield 1092	pdftron/PDF/PDFViewCtrl:ab	F
    //   1812: aload 45
    //   1814: iconst_1
    //   1815: daload
    //   1816: d2f
    //   1817: fsub
    //   1818: fload 6
    //   1820: fmul
    //   1821: fstore_3
    //   1822: aload_0
    //   1823: getfield 717	pdftron/PDF/PDFViewCtrl:L	Landroid/graphics/RectF;
    //   1826: fload 7
    //   1828: fload 10
    //   1830: fload 9
    //   1832: fmul
    //   1833: fsub
    //   1834: fload_2
    //   1835: fsub
    //   1836: fload 8
    //   1838: fload 11
    //   1840: fload 9
    //   1842: fmul
    //   1843: fsub
    //   1844: fload_3
    //   1845: fsub
    //   1846: fload 7
    //   1848: fload 12
    //   1850: fload 13
    //   1852: fsub
    //   1853: fload 9
    //   1855: fmul
    //   1856: fadd
    //   1857: fload_2
    //   1858: fsub
    //   1859: fload 8
    //   1861: fload 14
    //   1863: fload 15
    //   1865: fsub
    //   1866: fload 9
    //   1868: fmul
    //   1869: fadd
    //   1870: fload_3
    //   1871: fsub
    //   1872: invokevirtual 835	android/graphics/RectF:set	(FFFF)V
    //   1875: aload_0
    //   1876: getfield 701	pdftron/PDF/PDFViewCtrl:H	Landroid/graphics/Matrix;
    //   1879: aload_0
    //   1880: getfield 715	pdftron/PDF/PDFViewCtrl:K	Landroid/graphics/RectF;
    //   1883: aload_0
    //   1884: getfield 717	pdftron/PDF/PDFViewCtrl:L	Landroid/graphics/RectF;
    //   1887: getstatic 841	android/graphics/Matrix$ScaleToFit:CENTER	Landroid/graphics/Matrix$ScaleToFit;
    //   1890: invokevirtual 845	android/graphics/Matrix:setRectToRect	(Landroid/graphics/RectF;Landroid/graphics/RectF;Landroid/graphics/Matrix$ScaleToFit;)Z
    //   1893: pop
    //   1894: iload 25
    //   1896: ifeq +19 -> 1915
    //   1899: aload_1
    //   1900: invokevirtual 1435	android/graphics/Canvas:save	()I
    //   1903: pop
    //   1904: aload_1
    //   1905: iconst_0
    //   1906: iconst_0
    //   1907: iload 21
    //   1909: iload 41
    //   1911: invokevirtual 1533	android/graphics/Canvas:clipRect	(IIII)Z
    //   1914: pop
    //   1915: aload_1
    //   1916: aload_0
    //   1917: getfield 566	pdftron/PDF/PDFViewCtrl:i	Landroid/graphics/Bitmap;
    //   1920: aload_0
    //   1921: getfield 701	pdftron/PDF/PDFViewCtrl:H	Landroid/graphics/Matrix;
    //   1924: aload_0
    //   1925: getfield 659	pdftron/PDF/PDFViewCtrl:M	Landroid/graphics/Paint;
    //   1928: invokevirtual 849	android/graphics/Canvas:drawBitmap	(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V
    //   1931: iload 25
    //   1933: ifeq +7 -> 1940
    //   1936: aload_1
    //   1937: invokevirtual 1456	android/graphics/Canvas:restore	()V
    //   1940: aload_0
    //   1941: getfield 281	pdftron/PDF/PDFViewCtrl:d	Ljava/util/concurrent/locks/Lock;
    //   1944: invokeinterface 988 1 0
    //   1949: aload_0
    //   1950: getfield 279	pdftron/PDF/PDFViewCtrl:c	Ljava/util/concurrent/locks/Lock;
    //   1953: invokeinterface 988 1 0
    //   1958: aload_0
    //   1959: getfield 570	pdftron/PDF/PDFViewCtrl:az	Lpdftron/PDF/PDFViewCtrl$Tool;
    //   1962: ifnull +31 -> 1993
    //   1965: aload_0
    //   1966: getfield 581	pdftron/PDF/PDFViewCtrl:j	Z
    //   1969: ifne +24 -> 1993
    //   1972: aload_0
    //   1973: getfield 583	pdftron/PDF/PDFViewCtrl:k	Z
    //   1976: ifne +17 -> 1993
    //   1979: aload_0
    //   1980: getfield 570	pdftron/PDF/PDFViewCtrl:az	Lpdftron/PDF/PDFViewCtrl$Tool;
    //   1983: aload_1
    //   1984: aload_0
    //   1985: getfield 703	pdftron/PDF/PDFViewCtrl:G	Landroid/graphics/Matrix;
    //   1988: invokeinterface 1536 3 0
    //   1993: iload 19
    //   1995: ifeq -1988 -> 7
    //   1998: aload_1
    //   1999: invokevirtual 1456	android/graphics/Canvas:restore	()V
    //   2002: aload_0
    //   2003: getfield 703	pdftron/PDF/PDFViewCtrl:G	Landroid/graphics/Matrix;
    //   2006: invokevirtual 1459	android/graphics/Matrix:reset	()V
    //   2009: return
    //   2010: astore 45
    //   2012: iload 25
    //   2014: ifeq +7 -> 2021
    //   2017: aload_1
    //   2018: invokevirtual 1456	android/graphics/Canvas:restore	()V
    //   2021: aload 45
    //   2023: athrow
    //   2024: astore 45
    //   2026: iconst_1
    //   2027: istore 18
    //   2029: iload 17
    //   2031: istore 16
    //   2033: iload 18
    //   2035: istore 17
    //   2037: goto -1559 -> 478
    //   2040: astore 45
    //   2042: iconst_0
    //   2043: istore 17
    //   2045: iload 19
    //   2047: istore 16
    //   2049: goto -1571 -> 478
    //   2052: iload 22
    //   2054: istore 20
    //   2056: goto +355 -> 2411
    //   2059: iconst_0
    //   2060: istore 32
    //   2062: iconst_0
    //   2063: istore 23
    //   2065: goto +216 -> 2281
    //   2068: iload 20
    //   2070: istore 23
    //   2072: iload 17
    //   2074: istore 20
    //   2076: iload 23
    //   2078: istore 17
    //   2080: goto -1201 -> 879
    //   2083: iload 16
    //   2085: istore 23
    //   2087: iload 20
    //   2089: istore 29
    //   2091: iload 17
    //   2093: istore 16
    //   2095: iload 18
    //   2097: istore 17
    //   2099: iload 23
    //   2101: istore 18
    //   2103: goto -1392 -> 711
    //   2106: goto -1771 -> 335
    //   2109: aconst_null
    //   2110: astore 45
    //   2112: iconst_0
    //   2113: istore 25
    //   2115: iconst_0
    //   2116: istore 26
    //   2118: iconst_0
    //   2119: istore 19
    //   2121: iload 38
    //   2123: istore 20
    //   2125: iload 16
    //   2127: istore 27
    //   2129: goto -1776 -> 353
    //   2132: iload 19
    //   2134: istore 17
    //   2136: iload 19
    //   2138: iload 21
    //   2140: if_icmple -1917 -> 223
    //   2143: iload 21
    //   2145: istore 17
    //   2147: goto -1924 -> 223
    //   2150: astore 45
    //   2152: iconst_1
    //   2153: istore 16
    //   2155: iconst_1
    //   2156: istore 17
    //   2158: goto -1680 -> 478
    //   2161: iload 28
    //   2163: ifne -1346 -> 817
    //   2166: iload 20
    //   2168: iload 18
    //   2170: iadd
    //   2171: iload 21
    //   2173: if_icmple +29 -> 2202
    //   2176: iload 21
    //   2178: iload 20
    //   2180: isub
    //   2181: istore 23
    //   2183: iload 16
    //   2185: istore 18
    //   2187: iload 20
    //   2189: istore 29
    //   2191: iload 17
    //   2193: istore 16
    //   2195: iload 23
    //   2197: istore 17
    //   2199: goto -1488 -> 711
    //   2202: iload 20
    //   2204: ifne -121 -> 2083
    //   2207: iload 18
    //   2209: iload 26
    //   2211: isub
    //   2212: istore 23
    //   2214: iload 16
    //   2216: istore 18
    //   2218: iload 20
    //   2220: istore 29
    //   2222: iload 17
    //   2224: istore 16
    //   2226: iload 23
    //   2228: istore 17
    //   2230: goto -1519 -> 711
    //   2233: iload 24
    //   2235: istore 30
    //   2237: iload 20
    //   2239: istore 23
    //   2241: iload 16
    //   2243: istore 20
    //   2245: iload 17
    //   2247: istore 29
    //   2249: iload 23
    //   2251: istore 16
    //   2253: iload 18
    //   2255: istore 17
    //   2257: iload 20
    //   2259: istore 18
    //   2261: goto -1550 -> 711
    //   2264: iload 20
    //   2266: iload 44
    //   2268: iadd
    //   2269: istore 20
    //   2271: iconst_0
    //   2272: istore 31
    //   2274: iload 33
    //   2276: iload 32
    //   2278: iadd
    //   2279: istore 32
    //   2281: iload 32
    //   2283: iload 42
    //   2285: if_icmpge +105 -> 2390
    //   2288: iload 43
    //   2290: iload 31
    //   2292: isub
    //   2293: istore 34
    //   2295: iload 34
    //   2297: istore 33
    //   2299: iload 32
    //   2301: iload 34
    //   2303: iadd
    //   2304: iload 42
    //   2306: if_icmple +10 -> 2316
    //   2309: iload 42
    //   2311: iload 32
    //   2313: isub
    //   2314: istore 33
    //   2316: iload 39
    //   2318: istore 37
    //   2320: iload 20
    //   2322: istore 35
    //   2324: iconst_0
    //   2325: istore 34
    //   2327: iload 34
    //   2329: iload 17
    //   2331: if_icmpge -67 -> 2264
    //   2334: iload 43
    //   2336: iload 37
    //   2338: isub
    //   2339: istore 40
    //   2341: iload 40
    //   2343: istore 36
    //   2345: iload 34
    //   2347: iload 40
    //   2349: iadd
    //   2350: iload 17
    //   2352: if_icmple -1396 -> 956
    //   2355: iload 17
    //   2357: iload 34
    //   2359: isub
    //   2360: istore 36
    //   2362: goto -1406 -> 956
    //   2365: iconst_0
    //   2366: istore 37
    //   2368: iload 35
    //   2370: iconst_1
    //   2371: iadd
    //   2372: istore 35
    //   2374: iload 36
    //   2376: iload 34
    //   2378: iadd
    //   2379: istore 34
    //   2381: goto -54 -> 2327
    //   2384: iconst_1
    //   2385: istore 23
    //   2387: goto -22 -> 2365
    //   2390: iload 23
    //   2392: istore 20
    //   2394: goto -1074 -> 1320
    //   2397: iconst_1
    //   2398: istore 20
    //   2400: goto -1080 -> 1320
    //   2403: iload 20
    //   2405: ifeq -353 -> 2052
    //   2408: iconst_1
    //   2409: istore 20
    //   2411: iload 28
    //   2413: iconst_1
    //   2414: iadd
    //   2415: istore 28
    //   2417: iload 16
    //   2419: istore 23
    //   2421: iload 20
    //   2423: istore 22
    //   2425: iload 18
    //   2427: istore 16
    //   2429: iload 17
    //   2431: istore 18
    //   2433: iload 29
    //   2435: istore 20
    //   2437: iload 23
    //   2439: istore 17
    //   2441: goto -2007 -> 434
    //   2444: fload 5
    //   2446: fconst_0
    //   2447: fcmpg
    //   2448: ifgt -780 -> 1668
    //   2451: fload 8
    //   2453: fconst_0
    //   2454: fcmpl
    //   2455: ifle -787 -> 1668
    //   2458: aload 45
    //   2460: iconst_1
    //   2461: fload 8
    //   2463: fastore
    //   2464: goto -796 -> 1668
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	2467	0	this	PDFViewCtrl
    //   0	2467	1	paramCanvas	Canvas
    //   1579	279	2	f1	float
    //   1574	297	3	f2	float
    //   1600	161	4	f3	float
    //   1607	838	5	f4	float
    //   1568	251	6	f5	float
    //   1636	211	7	f6	float
    //   1643	819	8	f7	float
    //   1697	170	9	f8	float
    //   1703	126	10	f9	float
    //   1709	130	11	f10	float
    //   1716	133	12	f11	float
    //   1722	129	13	f12	float
    //   1729	133	14	f13	float
    //   1735	129	15	f14	float
    //   91	2337	16	i1	int
    //   18	2422	17	i2	int
    //   132	2300	18	i3	int
    //   205	1936	19	i4	int
    //   88	2348	20	i5	int
    //   73	2108	21	i6	int
    //   33	2391	22	i7	int
    //   747	1691	23	i8	int
    //   30	2204	24	i9	int
    //   336	1778	25	i10	int
    //   347	1865	26	i11	int
    //   343	1785	27	i12	int
    //   428	1988	28	i13	int
    //   735	1699	29	i14	int
    //   357	1879	30	i15	int
    //   740	1553	31	i16	int
    //   2060	254	32	i17	int
    //   999	1316	33	i18	int
    //   2293	87	34	i19	int
    //   965	1408	35	i20	int
    //   994	1385	36	i21	int
    //   988	1379	37	i22	int
    //   24	2098	38	i23	int
    //   767	1550	39	i24	int
    //   1029	1321	40	i25	int
    //   79	1831	41	i26	int
    //   425	1889	42	i27	int
    //   726	1613	43	i28	int
    //   733	1536	44	i29	int
    //   102	232	45	localObject1	Object
    //   469	40	45	localObject2	Object
    //   603	1210	45	localObject3	Object
    //   2010	12	45	localObject4	Object
    //   2024	1	45	localObject5	Object
    //   2040	1	45	localObject6	Object
    //   2110	1	45	localObject7	Object
    //   2150	309	45	localObject8	Object
    //   120	1519	46	localObject9	Object
    //   297	1149	47	localObject10	Object
    //   1192	121	48	localN	n
    // Exception table:
    //   from	to	target	type
    //   359	380	469	finally
    //   380	387	469	finally
    //   387	401	469	finally
    //   401	415	469	finally
    //   415	427	469	finally
    //   441	456	469	finally
    //   461	469	469	finally
    //   694	708	469	finally
    //   711	749	469	finally
    //   779	785	469	finally
    //   809	817	469	finally
    //   817	823	469	finally
    //   828	836	469	finally
    //   836	855	469	finally
    //   861	879	469	finally
    //   884	896	469	finally
    //   899	928	469	finally
    //   931	953	469	finally
    //   956	972	469	finally
    //   977	1073	469	finally
    //   1076	1182	469	finally
    //   1185	1317	469	finally
    //   1320	1334	469	finally
    //   1344	1358	469	finally
    //   1358	1368	469	finally
    //   1368	1465	469	finally
    //   1478	1490	469	finally
    //   1493	1500	469	finally
    //   1505	1510	469	finally
    //   1510	1585	469	finally
    //   1595	1609	469	finally
    //   1623	1631	469	finally
    //   1690	1737	469	finally
    //   1749	1757	469	finally
    //   1763	1822	469	finally
    //   1822	1894	469	finally
    //   1936	1940	469	finally
    //   1940	1949	469	finally
    //   1949	1958	469	finally
    //   2017	2021	469	finally
    //   2021	2024	469	finally
    //   1899	1915	2010	finally
    //   1915	1931	2010	finally
    //   20	32	2024	finally
    //   35	69	2024	finally
    //   69	90	2024	finally
    //   93	104	2024	finally
    //   109	122	2024	finally
    //   137	162	2024	finally
    //   1958	1993	2040	finally
    //   162	203	2150	finally
    //   223	249	2150	finally
    //   249	264	2150	finally
    //   264	279	2150	finally
    //   288	299	2150	finally
    //   308	314	2150	finally
    //   511	520	2150	finally
    //   523	531	2150	finally
    //   534	542	2150	finally
    //   545	571	2150	finally
    //   571	586	2150	finally
    //   586	601	2150	finally
    //   610	621	2150	finally
    //   630	636	2150	finally
    //   660	669	2150	finally
    //   672	680	2150	finally
    //   683	691	2150	finally
  }
  
  protected boolean onFling(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    if ((c.a(this.aJ)) && (this.a != null))
    {
      this.aJ.a(paramMotionEvent2, paramFloat1);
      return true;
    }
    int i4 = 0;
    int i2 = 0;
    int i1 = i4;
    if (this.az != null)
    {
      i1 = i4;
      if (this.aA != null)
      {
        for (i1 = this.az.getMode();; i1 = i4)
        {
          i2 = this.az.onUp(paramMotionEvent2, 3) | i2;
          i4 = this.az.getNextToolMode();
          if (i1 == i4) {
            break;
          }
          this.az = this.aA.createTool(i4, this, this.az);
        }
        i1 = i2;
      }
    }
    if (i1 != 0) {
      return true;
    }
    if (this.a != null)
    {
      i1 = this.R;
      int i3 = this.P;
      i4 = this.S;
      int i5 = this.Q;
      float f1 = paramFloat1;
      if (Math.abs(paramFloat1) < Math.abs(paramFloat2) * 1.5D) {
        f1 = 0.0F;
      }
      paramFloat1 = (float)(f1 * 0.75D);
      paramFloat2 = (float)(paramFloat2 * 0.75D);
      this.b.fling(getScrollX(), getScrollY(), -(int)paramFloat1, -(int)paramFloat2, 0, i1 - i3, 0, i4 - i5);
      if (this.l)
      {
        i1 = this.b.getFinalX();
        i3 = this.b.getStartX();
        i4 = this.b.getFinalY();
        i5 = this.b.getStartY();
        OnScroll(this.aO, i1 - i3, i4 - i5, true);
      }
      invalidate();
    }
    return true;
  }
  
  protected void onFlingStop()
  {
    if ((this.az != null) && (this.aA != null))
    {
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onFlingStop();
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = 1;
    this.ax = true;
    this.af = false;
    if ((paramBoolean) && (this.a != null) && (this.ai == 2)) {
      if (isFinishedRendering()) {
        break label170;
      }
    }
    for (;;)
    {
      double d1 = getZoom();
      cancelRendering();
      this.aj = c();
      double d2 = this.ag * this.aj;
      double d3 = this.ah * this.aj;
      if (d1 < d2) {
        setZoom(d2);
      }
      if (d1 > d3) {
        setZoom(d3);
      }
      if (i1 != 0) {
        requestRendering();
      }
      if ((this.aA != null) && (this.az == null)) {
        this.az = this.aA.createDefaultTool(this);
      }
      if (this.az != null) {
        this.az.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
      }
      return;
      label170:
      i1 = 0;
    }
  }
  
  protected void onLongPress(MotionEvent paramMotionEvent)
  {
    if ((this.az != null) && (this.aA != null))
    {
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onLongPress(paramMotionEvent);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i1 = 1;
    int i2 = View.MeasureSpec.getSize(paramInt1);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    setMeasuredDimension(i2, paramInt2);
    if ((this.P == i2) && (this.Q == paramInt2) && (this.a != null) && (!this.m) && (!this.af)) {}
    label278:
    label306:
    do
    {
      return;
      if ((this.P != i2) || (this.Q != paramInt2)) {}
      for (paramInt1 = 1;; paramInt1 = 0)
      {
        this.P = i2;
        this.Q = paramInt2;
        if ((this.a == null) || (i2 <= 0) || (paramInt2 <= 0)) {
          break label306;
        }
        cancelRendering();
        this.af = false;
        OnSize(this.aO, this.P, this.Q, this.P, false);
        if (!this.m) {
          break;
        }
        this.m = false;
        setPagePresentationMode(this.aD);
        setPageViewMode(0);
        scrollTo(0, 0);
        this.aj = getZoom();
        this.au = getCurrentPage();
        this.at = this.au;
        paramInt2 = i1;
        if (this.az == null) {
          break label278;
        }
        paramInt2 = i1;
        if (this.aA == null) {
          break label278;
        }
        for (paramInt1 = this.az.getMode();; paramInt1 = i2)
        {
          this.az.onSetDoc();
          i2 = this.az.getNextToolMode();
          paramInt2 = i1;
          if (paramInt1 == i2) {
            break;
          }
          this.az = this.aA.createTool(i2, this, this.az);
        }
      }
      paramInt2 = paramInt1;
      if (paramInt2 != 0) {
        this.e.b();
      }
      b();
      scrollTo(f(), g());
      return;
    } while (this.a != null);
    this.R = 0;
    this.S = 0;
  }
  
  protected boolean onScale(ScaleGestureDetector paramScaleGestureDetector)
  {
    if (c.a(this.aJ)) {
      return true;
    }
    if ((!this.D) && (this.a != null))
    {
      this.an = true;
      this.U = paramScaleGestureDetector.getFocusX();
      this.V = paramScaleGestureDetector.getFocusY();
      if (this.Y < 0.0F) {
        this.Y = this.U;
      }
      if (this.Z < 0.0F) {
        this.Z = this.V;
      }
      float f1 = (float)a(paramScaleGestureDetector.getScaleFactor() * this.T);
      if (Math.abs(f1 - getZoom()) >= 0.01D)
      {
        setZoom((int)(this.U + 0.5D), (int)(this.V + 0.5D), f1);
        this.aX.removeMessages(0);
        this.aX.sendEmptyMessageDelayed(0, 1000L);
        invalidate();
      }
      f1 = -this.U;
      float f2 = this.Y;
      float f3 = -this.V;
      float f4 = this.Z;
      this.Y = this.U;
      this.Z = this.V;
      scrollBy((int)(f1 + f2), (int)(f3 + f4));
    }
    if ((this.az != null) && (this.aA != null))
    {
      boolean bool;
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        bool = this.az.onScale(paramScaleGestureDetector.getFocusX(), paramScaleGestureDetector.getFocusY());
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
      if (bool) {
        return true;
      }
    }
    return false;
  }
  
  protected boolean onScaleBegin(ScaleGestureDetector paramScaleGestureDetector)
  {
    this.an = false;
    if (c.a(this.aJ)) {}
    do
    {
      return true;
      if ((this.az != null) && (this.aA != null))
      {
        boolean bool;
        int i2;
        for (int i1 = this.az.getMode();; i1 = i2)
        {
          bool = this.az.onScaleBegin(paramScaleGestureDetector.getFocusX(), paramScaleGestureDetector.getFocusY());
          i2 = this.az.getNextToolMode();
          if (i1 == i2) {
            break;
          }
          this.az = this.aA.createTool(i2, this, this.az);
        }
        if (bool)
        {
          this.D = true;
          return true;
        }
      }
    } while (this.a == null);
    cancelRendering();
    b(paramScaleGestureDetector.getFocusX(), paramScaleGestureDetector.getFocusY());
    this.j = true;
    this.Y = -1.0F;
    this.Z = -1.0F;
    this.aX.removeMessages(0);
    this.aX.sendEmptyMessageDelayed(0, 1000L);
    return true;
  }
  
  protected void onScaleEnd(ScaleGestureDetector paramScaleGestureDetector)
  {
    this.j = false;
    if (c.a(this.aJ))
    {
      this.j = false;
      return;
    }
    if ((!this.D) && (this.a != null))
    {
      this.U = paramScaleGestureDetector.getFocusX();
      this.V = paramScaleGestureDetector.getFocusY();
      float f1 = (float)a(paramScaleGestureDetector.getScaleFactor() * this.T);
      if (Math.abs(f1 - getZoom()) >= 0.01D)
      {
        this.aX.removeMessages(0);
        setZoom((int)this.U, (int)this.V, f1);
      }
    }
    if ((this.az != null) && (this.aA != null))
    {
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onScaleEnd(paramScaleGestureDetector.getFocusX(), paramScaleGestureDetector.getFocusY());
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
    invalidate();
  }
  
  protected boolean onScroll(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    if ((this.az != null) && (this.aA != null))
    {
      int i1 = this.az.getMode();
      boolean bool1 = false;
      for (;;)
      {
        bool1 = this.az.onMove(paramMotionEvent1, paramMotionEvent2, paramFloat1, paramFloat2) | bool1;
        int i2 = this.az.getNextToolMode();
        bool2 = bool1;
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
        i1 = i2;
      }
    }
    boolean bool2 = false;
    if (bool2) {}
    while (this.a == null) {
      return true;
    }
    if ((this.aG) && (!isContinuousPagePresentationMode(this.aD))) {
      this.aJ.a(paramMotionEvent2);
    }
    if (this.an)
    {
      a(paramMotionEvent2.getX(), paramMotionEvent2.getY());
      this.an = false;
    }
    paramFloat1 = paramMotionEvent2.getX();
    paramFloat2 = paramMotionEvent2.getY();
    paramMotionEvent1 = convPagePtToClientPt(this.al, this.am, this.ak);
    float f1 = (float)paramMotionEvent1[0];
    float f2 = (float)paramMotionEvent1[1];
    scrollBy((int)(f1 - paramFloat1), (int)(f2 - paramFloat2));
    return true;
  }
  
  protected void onShowPress(MotionEvent paramMotionEvent)
  {
    if ((this.az != null) && (this.aA != null))
    {
      boolean bool;
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        bool = this.az.onShowPress(paramMotionEvent);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
      if (!bool) {}
    }
  }
  
  protected boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    if ((this.az != null) && (this.aA != null))
    {
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onSingleTapConfirmed(paramMotionEvent);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
    this.aY.sendEmptyMessageDelayed(0, 200L);
    return false;
  }
  
  protected boolean onSingleTapUp(MotionEvent paramMotionEvent)
  {
    if ((this.az != null) && (this.aA != null))
    {
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onSingleTapUp(paramMotionEvent);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
    return false;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    super.onTouchEvent(paramMotionEvent);
    if (!this.aF) {
      return true;
    }
    if (this.aY.hasMessages(0))
    {
      this.aY.removeMessages(0);
      this.aY.dispatchMessage(this.aY.obtainMessage(0));
    }
    if (this.aZ.hasMessages(0))
    {
      this.aZ.removeMessages(0);
      this.aZ.dispatchMessage(this.aZ.obtainMessage(0));
    }
    boolean bool1 = this.aQ.onTouchEvent(paramMotionEvent);
    this.F = false;
    boolean bool2 = this.aR.onTouchEvent(paramMotionEvent);
    if (paramMotionEvent.getAction() == 0)
    {
      this.aW.removeMessages(1);
      this.E = MotionEvent.obtain(paramMotionEvent);
      this.aW.sendEmptyMessageAtTime(1, paramMotionEvent.getDownTime() + 500L);
      if (paramMotionEvent.getAction() == 1)
      {
        if (!this.y) {
          break label220;
        }
        MotionEvent.obtain(paramMotionEvent).setAction(-1);
        onUp(paramMotionEvent, 1);
        this.y = false;
        this.A = false;
      }
    }
    for (;;)
    {
      return bool1 | bool2;
      if ((paramMotionEvent.getAction() != 1) && (!bool1) && (!this.F)) {
        break;
      }
      this.aW.removeMessages(1);
      break;
      label220:
      if ((this.A) && (this.B))
      {
        onUp(paramMotionEvent, 2);
        this.A = false;
      }
      else if (this.C)
      {
        this.C = false;
        onUp(paramMotionEvent, 4);
      }
      else
      {
        onUp(paramMotionEvent, 0);
      }
    }
  }
  
  protected boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    if ((c.a(this.aJ)) && (this.a != null)) {
      this.aJ.a(paramMotionEvent, 0.0F);
    }
    while ((this.az == null) || (this.aA == null)) {
      return true;
    }
    int i2;
    for (int i1 = this.az.getMode();; i1 = i2)
    {
      this.az.onUp(paramMotionEvent, paramInt);
      i2 = this.az.getNextToolMode();
      if (i1 == i2) {
        break;
      }
      this.az = this.aA.createTool(i2, this, this.az);
    }
  }
  
  public void openURL(String paramString1, String paramString2)
    throws PDFNetException
  {
    this.aL = 0;
    this.aM = 0;
    closeDoc();
    OpenURL(this.aO, paramString1, paramString2, true);
    long l1 = GetDoc(this.aO);
    if (l1 == 0L) {}
    for (paramString1 = null;; paramString1 = PDFDoc.__Create(l1))
    {
      a(paramString1, true);
      if (this.a != null) {
        break;
      }
      throw new PDFNetException("Unknown", 0L, "pdftron.PDF.PDFViewCtrl", "openURL()", "pdftron.PDF.PDFViewCtrl.openURL(): unknow error, missing password?");
    }
    this.aM = this.a.getPageCount();
    if (this.ar != null) {
      this.ar.onDownloadEvent(5, 0, this.aL, this.aM);
    }
    if ((this.az != null) && (this.aA != null))
    {
      int i2;
      for (int i1 = this.az.getMode();; i1 = i2)
      {
        this.az.onDocumentDownloadEvent(5, 0, this.aL, this.aM);
        i2 = this.az.getNextToolMode();
        if (i1 == i2) {
          break;
        }
        this.az = this.aA.createTool(i2, this, this.az);
      }
    }
  }
  
  public void pause()
  {
    this.aS.removeCallbacksAndMessages(null);
    this.aU.removeCallbacksAndMessages(null);
    this.bd.removeCallbacksAndMessages(null);
    this.aX.removeCallbacksAndMessages(null);
    this.aW.removeCallbacksAndMessages(null);
    c.i(this.aJ).removeCallbacksAndMessages(null);
    this.aV.removeCallbacksAndMessages(null);
    this.aY.removeCallbacksAndMessages(null);
    this.aZ.removeCallbacksAndMessages(null);
    this.bb.removeCallbacksAndMessages(null);
    this.ba.removeCallbacksAndMessages(null);
    cancelRendering();
    cancelFindText();
    closeTool();
  }
  
  public void postToolOnCustomEvent(Object paramObject)
  {
    if (this.aZ.hasMessages(0)) {
      this.aZ.removeMessages(0);
    }
    this.aK = paramObject;
    this.aZ.sendEmptyMessage(0);
  }
  
  public void purgeMemory()
  {
    this.r = true;
    try
    {
      cancelRendering();
      PurgeMemory(this.aO);
      this.d.lock();
      if (this.i != null)
      {
        this.i.recycle();
        this.i = null;
      }
      this.o = 0;
      this.d.unlock();
      return;
    }
    finally
    {
      System.gc();
      this.r = false;
    }
  }
  
  public void requestLayout()
  {
    super.requestLayout();
  }
  
  public void requestRendering()
  {
    RequestRender(this.aO);
  }
  
  public void resume()
  {
    if ((this.aO != 0L) && (this.a != null)) {
      requestRendering();
    }
  }
  
  public void scrollBy(int paramInt1, int paramInt2)
  {
    long l1 = this.aO;
    if ((this.b.isFinished()) && (!this.j)) {}
    for (boolean bool = true;; bool = false)
    {
      OnScroll(l1, paramInt1, paramInt2, bool);
      super.scrollTo(f(), g());
      return;
    }
  }
  
  public void scrollTo(int paramInt1, int paramInt2)
  {
    long l1 = this.aO;
    int i1 = f();
    int i2 = g();
    if (!this.j) {}
    for (boolean bool = true;; bool = false)
    {
      OnScroll(l1, paramInt1 - i1, paramInt2 - i2, bool);
      super.scrollTo(f(), g());
      return;
    }
  }
  
  public void selectAll()
  {
    SelectAll(this.aO);
  }
  
  public boolean selectByHighlights(Highlights paramHighlights)
  {
    return SelectyByHighlights(this.aO, paramHighlights.a);
  }
  
  public boolean selectByRect(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    return SelectByRect(this.aO, paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  public boolean selectByStruct(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    return SelectByStruct(this.aO, paramDouble1, paramDouble2, paramDouble3, paramDouble4);
  }
  
  public void setAntiAliasing(boolean paramBoolean)
  {
    SetAntiAliasing(this.aO, paramBoolean);
    update();
  }
  
  public void setBuiltInPageSlidingEnabled(boolean paramBoolean)
  {
    this.aG = paramBoolean;
  }
  
  public void setBuiltInPageSlidingSpeed(int paramInt1, int paramInt2)
  {
    this.aH = paramInt1;
    this.aI = paramInt2;
  }
  
  public void setCaching(boolean paramBoolean)
  {
    SetCaching(this.aO, paramBoolean);
  }
  
  public void setClientBackgroundColor(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (int i1 = 0;; i1 = 255)
    {
      paramInt1 = Color.argb(i1, paramInt1, paramInt2, paramInt3);
      if (this.q != paramInt1)
      {
        paramInt2 = Color.red(paramInt1);
        paramInt3 = Color.green(paramInt1);
        i1 = Color.blue(paramInt1);
        int i2 = Color.alpha(paramInt1);
        SetBackgroundColor(this.aO, (byte)paramInt2, (byte)paramInt3, (byte)i1, (byte)i2);
        this.q = paramInt1;
        setBackgroundColor(this.q);
        invalidate();
      }
      return;
    }
  }
  
  public boolean setCurrentPage(int paramInt)
  {
    return a(0, paramInt);
  }
  
  public void setDefaultPageColor(int paramInt)
  {
    int i1 = Color.red(paramInt);
    int i2 = Color.green(paramInt);
    paramInt = Color.blue(paramInt);
    int i3 = Color.argb(255, i1, i2, paramInt);
    if (this.p != i3)
    {
      SetDefaultPageColor(this.aO, (byte)i1, (byte)i2, (byte)paramInt);
      this.p = i3;
      this.M.setColor(this.p);
      update();
    }
  }
  
  public void setDefaultPageColor(int paramInt1, int paramInt2, int paramInt3)
  {
    setDefaultPageColor(Color.argb(255, paramInt1, paramInt2, paramInt3));
  }
  
  public void setDoc(PDFDoc paramPDFDoc)
  {
    int i2 = 0;
    int i1 = 0;
    closeDoc();
    if (paramPDFDoc != null) {}
    for (;;)
    {
      try
      {
        SecurityHandler localSecurityHandler = paramPDFDoc.getSecurityHandler();
        if (localSecurityHandler != null)
        {
          if (!localSecurityHandler.getPermission(2)) {
            break label86;
          }
          a(paramPDFDoc, false);
          if (i1 != 0)
          {
            this.ay.a(paramPDFDoc);
            this.ay.show();
          }
        }
        else
        {
          if (!paramPDFDoc.initSecurityHandler()) {
            i2 = 1;
          }
          i1 = i2;
          if (i2 != 0) {
            continue;
          }
          a(paramPDFDoc, false);
          i1 = i2;
          continue;
        }
        return;
      }
      catch (Exception paramPDFDoc) {}
      label86:
      i1 = 1;
    }
  }
  
  public void setDocumentDownloadListener(DocumentDownloadListener paramDocumentDownloadListener)
  {
    this.ar = paramDocumentDownloadListener;
  }
  
  public void setDrawAnnotations(boolean paramBoolean)
  {
    SetDrawAnnotations(this.aO, paramBoolean);
    update();
  }
  
  public void setGamma(double paramDouble)
  {
    SetGamma(this.aO, paramDouble);
    update();
  }
  
  public void setHighlightFields(boolean paramBoolean)
  {
    SetHighlightFields(this.aO, paramBoolean);
    update();
  }
  
  public void setImageSmoothing(boolean paramBoolean)
  {
    SetImageSmoothing(this.aO, paramBoolean);
    update();
  }
  
  public void setInteractionEnabled(boolean paramBoolean)
  {
    this.aF = paramBoolean;
  }
  
  public void setOverprint(int paramInt)
  {
    SetOverprint(this.aO, paramInt);
    update();
  }
  
  public void setPageChangeListener(PageChangeListener paramPageChangeListener)
  {
    this.as = paramPageChangeListener;
  }
  
  public void setPagePresentationMode(int paramInt)
  {
    double d1;
    double d3;
    if (paramInt != this.aD)
    {
      this.aD = paramInt;
      SetPagePresentationMode(this.aO, this.aD);
      requestLayout();
      if (!this.aB)
      {
        if ((this.a == null) || (this.ai != 2)) {
          break label115;
        }
        d1 = getZoom();
        this.aj = c();
        double d2 = this.ag * this.aj;
        d3 = this.ah * this.aj;
        if (d1 >= d2) {
          break label100;
        }
        setZoom(d2);
      }
    }
    return;
    label100:
    if (d1 > d3)
    {
      setZoom(d3);
      return;
    }
    label115:
    b();
    scrollTo(f(), g());
  }
  
  public void setPageSpacing(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    SetPageSpacing(this.aO, paramInt1, paramInt2, paramInt3, paramInt4);
    requestRendering();
  }
  
  public void setPageViewMode(int paramInt)
  {
    if ((paramInt < 0) || (paramInt > 3)) {}
    do
    {
      do
      {
        return;
      } while (getPageViewMode() == paramInt);
      SetPageViewMode(this.aO, paramInt);
    } while (this.aB);
    requestLayout();
    if ((this.a != null) && (this.ai == 2))
    {
      double d1 = getZoom();
      this.aj = c();
      double d2 = this.ag * this.aj;
      double d3 = this.ah * this.aj;
      if (d1 < d2)
      {
        setZoom(d2);
        return;
      }
      if (d1 > d3)
      {
        setZoom(d3);
        return;
      }
    }
    b();
    scrollTo(f(), g());
  }
  
  public void setPathHinting(boolean paramBoolean)
  {
    SetPathHinting(this.aO, paramBoolean);
    update();
  }
  
  public void setProgressiveRendering(boolean paramBoolean)
  {
    this.v = paramBoolean;
  }
  
  public void setProgressiveRendering(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    this.v = paramBoolean;
    if (this.v)
    {
      if (paramInt1 <= 0) {
        break label31;
      }
      this.w = paramInt1;
      if (paramInt2 <= 0) {
        break label39;
      }
    }
    for (;;)
    {
      this.x = paramInt2;
      return;
      label31:
      paramInt1 = this.w;
      break;
      label39:
      paramInt2 = this.x;
    }
  }
  
  public void setRenderedContentCacheSize(long paramLong)
  {
    SetMemInfo(this.aO, 0.0D, paramLong << 10 << 10);
  }
  
  public void setRenderingListener(RenderingListener paramRenderingListener)
  {
    this.aw = paramRenderingListener;
  }
  
  public void setRightToLeftLanguage(boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (int i1 = -1;; i1 = 1)
    {
      if (i1 != this.aN)
      {
        this.aN = i1;
        SetRightToLeftLanguage(this.aO, paramBoolean);
        updatePageLayout();
      }
      return;
    }
  }
  
  public void setThinLineAdjustment(boolean paramBoolean1, boolean paramBoolean2)
  {
    SetThinLineAdjustment(this.aO, paramBoolean1, paramBoolean2);
    update();
  }
  
  public void setToolManager(ToolManager paramToolManager)
  {
    this.aA = paramToolManager;
    if ((this.aA != null) && (this.ax))
    {
      this.az = this.aA.createDefaultTool(this);
      return;
    }
    this.az = null;
  }
  
  public void setUseThumbView(boolean paramBoolean1, boolean paramBoolean2)
  {
    cancelRendering();
    if (!paramBoolean1)
    {
      this.f.c();
      SetThumbRenderEnabled(this.aO, false);
    }
    for (;;)
    {
      this.u = paramBoolean1;
      this.t = paramBoolean2;
      SetThumbRenderEnabled(this.aO, this.t);
      this.aS.sendEmptyMessage(0);
      return;
      if (this.t != paramBoolean2)
      {
        this.f.c();
        SetThumbRenderEnabled(this.aO, false);
      }
    }
  }
  
  public boolean setZoom(double paramDouble)
  {
    paramDouble = a(paramDouble);
    boolean bool = SetZoom(this.aO, paramDouble, false);
    b();
    scrollTo(f(), g());
    return bool;
  }
  
  public boolean setZoom(double paramDouble, boolean paramBoolean)
  {
    if (!paramBoolean) {
      return setZoom(paramDouble);
    }
    return a(this.P / 2.0F, this.Q / 2.0F, paramDouble);
  }
  
  public boolean setZoom(int paramInt1, int paramInt2, double paramDouble)
  {
    paramDouble = a(paramDouble);
    boolean bool = SetZoom(this.aO, paramInt1, paramInt2, paramDouble, false);
    b();
    scrollTo(f(), g());
    return bool;
  }
  
  public boolean setZoom(int paramInt1, int paramInt2, double paramDouble, boolean paramBoolean)
  {
    if (!paramBoolean) {
      return setZoom(paramInt1, paramInt2, paramDouble);
    }
    return a(paramInt1, paramInt2, paramDouble);
  }
  
  public void setZoomLimits(int paramInt, double paramDouble1, double paramDouble2)
  {
    double d1 = 0.0D;
    if ((paramInt == 1) || (paramInt == 2) || (paramInt == 3)) {
      this.ai = paramInt;
    }
    if (paramDouble1 < 0.0D) {
      paramDouble1 = d1;
    }
    for (;;)
    {
      d1 = paramDouble2;
      if (paramDouble1 > paramDouble2) {
        d1 = paramDouble1;
      }
      double d2 = paramDouble1;
      double d3 = d1;
      if (this.ai == 2)
      {
        paramDouble2 = paramDouble1;
        if (paramDouble1 > 1.0D) {
          paramDouble2 = 1.0D;
        }
        d2 = paramDouble2;
        d3 = d1;
        if (d1 < 1.0D)
        {
          d3 = 1.0D;
          d2 = paramDouble2;
        }
      }
      this.ag = d2;
      this.ah = d3;
      return;
    }
  }
  
  public boolean tryLockDoc()
  {
    try
    {
      if (this.a != null) {
        return false;
      }
      boolean bool = this.a.tryLock();
      return bool;
    }
    catch (PDFNetException localPDFNetException) {}
    return false;
  }
  
  public void unlockDoc()
  {
    try
    {
      if (this.a != null)
      {
        this.a.unlock();
        if (this.s) {
          requestRendering();
        }
      }
      return;
    }
    catch (Exception localException) {}
  }
  
  public void update()
  {
    Update(this.aO);
  }
  
  public void update(Annot paramAnnot, int paramInt)
  {
    Update(this.aO, paramAnnot.a, paramInt);
  }
  
  public void update(Rect paramRect)
  {
    Update(this.aO, paramRect.a);
  }
  
  public void updatePageLayout()
  {
    UpdatePageLayout(this.aO);
    b();
    this.af = true;
    requestLayout();
  }
  
  public void waitForRendering()
  {
    waitForRendering(1500);
  }
  
  public void waitForRendering(int paramInt)
  {
    long l1 = SystemClock.uptimeMillis();
    while ((!isFinishedRendering(true)) && (SystemClock.uptimeMillis() - l1 < paramInt)) {}
  }
  
  public static abstract interface DocumentDownloadListener
  {
    public abstract void onDownloadEvent(int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  }
  
  public static abstract interface PageChangeListener
  {
    public abstract void onPageChange(int paramInt1, int paramInt2, int paramInt3);
  }
  
  class RenderCallback
  {
    RenderCallback() {}
    
    private void CreateTileProc(PDFViewCtrl paramPDFViewCtrl, int[] paramArrayOfInt, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, boolean paramBoolean1, boolean paramBoolean2, int paramInt7, boolean paramBoolean3, int paramInt8, int paramInt9, int paramInt10, int paramInt11, int paramInt12, int paramInt13)
    {
      if (PDFViewCtrl.a(PDFViewCtrl.this)) {
        return;
      }
      PDFViewCtrl.b(PDFViewCtrl.this).lock();
      if ((paramInt13 != 0) || (paramBoolean3)) {}
      for (;;)
      {
        try
        {
          paramPDFViewCtrl = PDFViewCtrl.c(PDFViewCtrl.this).a(paramInt5);
          if ((paramPDFViewCtrl == null) || (paramPDFViewCtrl.b != paramInt8) || (paramPDFViewCtrl.c != paramInt9) || (paramPDFViewCtrl.d != paramInt10) || (paramPDFViewCtrl.e != paramInt11) || (paramPDFViewCtrl.f != paramInt12)) {
            PDFViewCtrl.c(PDFViewCtrl.this).a(paramInt5, paramInt8, paramInt9, paramInt10, paramInt11, paramInt12);
          }
          PDFViewCtrl.c(PDFViewCtrl.this).a(paramInt5, paramInt6, paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
          if (paramInt7 == 0)
          {
            if (paramBoolean1)
            {
              PDFViewCtrl.d(PDFViewCtrl.this).lock();
              if (PDFViewCtrl.e(PDFViewCtrl.this) != null)
              {
                PDFViewCtrl.e(PDFViewCtrl.this).recycle();
                PDFViewCtrl.a(PDFViewCtrl.this, null);
              }
              PDFViewCtrl.a(PDFViewCtrl.this, 0);
              PDFViewCtrl.d(PDFViewCtrl.this).unlock();
              PDFViewCtrl.f(PDFViewCtrl.this).sendEmptyMessage(0);
            }
            PDFViewCtrl.this.postInvalidate();
          }
          return;
        }
        catch (Exception paramPDFViewCtrl)
        {
          return;
        }
        catch (OutOfMemoryError paramPDFViewCtrl)
        {
          PDFViewCtrl.h(PDFViewCtrl.this).a();
          return;
        }
        finally
        {
          PDFViewCtrl.b(PDFViewCtrl.this).unlock();
        }
        PDFViewCtrl.g(PDFViewCtrl.this).a(paramInt13, paramInt3, paramInt4, paramArrayOfInt);
        PDFViewCtrl.f(PDFViewCtrl.this).sendEmptyMessage(0);
      }
    }
    
    private void PartDownloadedProcCallback(int paramInt1, long paramLong, int paramInt2, int paramInt3, PDFViewCtrl paramPDFViewCtrl)
    {
      paramPDFViewCtrl = new Message();
      paramPDFViewCtrl.setTarget(PDFViewCtrl.q(PDFViewCtrl.this));
      Vector localVector = new Vector();
      localVector.add(new Integer(paramInt1));
      localVector.add(new Long(paramLong));
      localVector.add(new Integer(paramInt2));
      localVector.add(new Integer(paramInt3));
      paramPDFViewCtrl.obj = localVector;
      paramPDFViewCtrl.sendToTarget();
      try
      {
        Thread.sleep(20L);
        return;
      }
      catch (InterruptedException paramPDFViewCtrl) {}
    }
    
    private void RemoveTileProc(int paramInt1, int paramInt2, int paramInt3)
    {
      PDFViewCtrl.b(PDFViewCtrl.this).lock();
      if (paramInt3 == 0)
      {
        if (PDFViewCtrl.c(PDFViewCtrl.this).a())
        {
          PDFViewCtrl.b(PDFViewCtrl.this).unlock();
          return;
        }
        if ((paramInt1 < 0) && (paramInt2 < 0)) {}
        for (;;)
        {
          try
          {
            PDFViewCtrl.c(PDFViewCtrl.this).b();
            return;
          }
          finally
          {
            PDFViewCtrl.b(PDFViewCtrl.this).unlock();
          }
          if ((paramInt1 > 0) && (paramInt2 < 0)) {
            PDFViewCtrl.c(PDFViewCtrl.this).b(paramInt1);
          } else if ((paramInt1 >= 0) && (paramInt2 >= 0)) {
            PDFViewCtrl.c(PDFViewCtrl.this).a(paramInt1, paramInt2);
          }
        }
      }
      try
      {
        PDFViewCtrl.g(PDFViewCtrl.this).c(paramInt3);
        return;
      }
      finally
      {
        PDFViewCtrl.b(PDFViewCtrl.this).unlock();
      }
    }
    
    private void RenderBegin(PDFViewCtrl paramPDFViewCtrl, boolean paramBoolean)
    {
      if (PDFViewCtrl.i(PDFViewCtrl.this) != null)
      {
        PDFViewCtrl.i(PDFViewCtrl.this).a();
        PDFViewCtrl.a(PDFViewCtrl.this, null);
      }
      PDFViewCtrl localPDFViewCtrl1;
      PDFViewCtrl localPDFViewCtrl2;
      if ((PDFViewCtrl.j(PDFViewCtrl.this)) && (!PDFViewCtrl.k(PDFViewCtrl.this)))
      {
        if (!PDFViewCtrl.l(PDFViewCtrl.this)) {
          break label131;
        }
        paramPDFViewCtrl = PDFViewCtrl.this;
        localPDFViewCtrl1 = PDFViewCtrl.this;
        localPDFViewCtrl2 = PDFViewCtrl.this;
        PDFViewCtrl.a(paramPDFViewCtrl, new PDFViewCtrl.b(localPDFViewCtrl1, PDFViewCtrl.m(PDFViewCtrl.this), PDFViewCtrl.n(PDFViewCtrl.this)));
      }
      for (;;)
      {
        if ((paramBoolean) && (PDFViewCtrl.o(PDFViewCtrl.this) != null)) {
          PDFViewCtrl.p(PDFViewCtrl.this).sendEmptyMessage(0);
        }
        return;
        label131:
        paramPDFViewCtrl = PDFViewCtrl.this;
        localPDFViewCtrl1 = PDFViewCtrl.this;
        localPDFViewCtrl2 = PDFViewCtrl.this;
        PDFViewCtrl.a(paramPDFViewCtrl, new PDFViewCtrl.b(localPDFViewCtrl1, PDFViewCtrl.m(PDFViewCtrl.this), PDFViewCtrl.n(PDFViewCtrl.this)));
      }
    }
    
    private void RenderEnd(boolean paramBoolean)
    {
      if (PDFViewCtrl.i(PDFViewCtrl.this) != null)
      {
        PDFViewCtrl.i(PDFViewCtrl.this).a();
        PDFViewCtrl.a(PDFViewCtrl.this, null);
      }
      if ((paramBoolean) && (PDFViewCtrl.o(PDFViewCtrl.this) != null)) {
        PDFViewCtrl.p(PDFViewCtrl.this).sendEmptyMessage(1);
      }
    }
  }
  
  public static abstract interface RenderingListener
  {
    public abstract void onRenderingFinished();
    
    public abstract void onRenderingStarted();
  }
  
  public class Selection
  {
    private long a;
    
    private Selection(long paramLong, Object paramObject, byte paramByte)
    {
      this.a = paramLong;
    }
    
    public String getAsHtml()
    {
      return PDFViewCtrl.d(this.a);
    }
    
    public String getAsUnicode()
    {
      return PDFViewCtrl.c(this.a);
    }
    
    public int getPageNum()
    {
      return PDFViewCtrl.a(this.a);
    }
    
    public double[] getQuads()
    {
      return PDFViewCtrl.b(this.a);
    }
  }
  
  public static abstract interface TextSearchListener
  {
    public abstract void onTextSearchEnd(int paramInt);
    
    public abstract void onTextSearchProgress(int paramInt);
    
    public abstract void onTextSearchStart();
  }
  
  public static abstract interface Tool
  {
    public abstract int getMode();
    
    public abstract int getNextToolMode();
    
    public abstract void onClose();
    
    public abstract void onCustom(Object paramObject);
    
    public abstract void onDocumentDownloadEvent(int paramInt1, int paramInt2, int paramInt3, int paramInt4);
    
    public abstract boolean onDoubleTap(MotionEvent paramMotionEvent);
    
    public abstract void onDoubleTapEnd(MotionEvent paramMotionEvent);
    
    public abstract boolean onDown(MotionEvent paramMotionEvent);
    
    public abstract void onDraw(Canvas paramCanvas, Matrix paramMatrix);
    
    public abstract boolean onFlingStop();
    
    public abstract void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4);
    
    public abstract boolean onLongPress(MotionEvent paramMotionEvent);
    
    public abstract boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2);
    
    public abstract void onPageTurning(int paramInt1, int paramInt2);
    
    public abstract void onPostSingleTapConfirmed();
    
    public abstract boolean onScale(float paramFloat1, float paramFloat2);
    
    public abstract boolean onScaleBegin(float paramFloat1, float paramFloat2);
    
    public abstract boolean onScaleEnd(float paramFloat1, float paramFloat2);
    
    public abstract void onSetDoc();
    
    public abstract boolean onShowPress(MotionEvent paramMotionEvent);
    
    public abstract boolean onSingleTapConfirmed(MotionEvent paramMotionEvent);
    
    public abstract boolean onSingleTapUp(MotionEvent paramMotionEvent);
    
    public abstract boolean onUp(MotionEvent paramMotionEvent, int paramInt);
  }
  
  public static abstract interface ToolManager
  {
    public abstract PDFViewCtrl.Tool createDefaultTool(PDFViewCtrl paramPDFViewCtrl);
    
    public abstract PDFViewCtrl.Tool createTool(int paramInt, PDFViewCtrl paramPDFViewCtrl, PDFViewCtrl.Tool paramTool);
  }
  
  private final class a
    extends AlertDialog
  {
    private EditText b;
    private PDFDoc c = null;
    private int d = 0;
    
    public a(Context paramContext)
    {
      super();
      setTitle("Password");
      this.b = new EditText(paramContext);
      paramContext = new ViewGroup.LayoutParams(-1, -1);
      this.b.setLayoutParams(paramContext);
      this.b.setTransformationMethod(new PasswordTransformationMethod());
      setView(this.b, 8, 8, 8, 8);
      setButton("OK", new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          PDFViewCtrl.a.a(PDFViewCtrl.a.this);
          paramAnonymousDialogInterface = PDFViewCtrl.a.b(PDFViewCtrl.a.this).getText().toString();
          try
          {
            if (PDFViewCtrl.a.c(PDFViewCtrl.a.this) == null) {
              return;
            }
            if (PDFViewCtrl.a.c(PDFViewCtrl.a.this).initStdSecurityHandler(paramAnonymousDialogInterface))
            {
              PDFViewCtrl.a(PDFViewCtrl.this, PDFViewCtrl.a.c(PDFViewCtrl.a.this), false);
              return;
            }
            if (PDFViewCtrl.a.d(PDFViewCtrl.a.this) == 3)
            {
              paramAnonymousDialogInterface = Toast.makeText(PDFViewCtrl.a.this.getContext(), "Opening document failed - incorrect password.", 0);
              paramAnonymousDialogInterface.setGravity(17, 0, 0);
              paramAnonymousDialogInterface.show();
              return;
            }
          }
          catch (Exception paramAnonymousDialogInterface)
          {
            paramAnonymousDialogInterface = Toast.makeText(PDFViewCtrl.a.this.getContext(), "Opening document failed - unknown reason.", 0);
            paramAnonymousDialogInterface.setGravity(17, 0, 0);
            paramAnonymousDialogInterface.show();
            return;
          }
          PDFViewCtrl.O(PDFViewCtrl.this).sendEmptyMessage(0);
        }
      });
      setButton2("Cancel", new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt) {}
      });
    }
    
    public final void a(PDFDoc paramPDFDoc)
    {
      this.c = paramPDFDoc;
      this.d = 0;
    }
    
    public final void show()
    {
      this.b.setText("");
      super.show();
    }
  }
  
  private final class b
  {
    private Timer b = new Timer();
    
    public b(long paramLong1, long paramLong2)
    {
      this.b.schedule(new a(), paramLong1, paramLong2);
    }
    
    public final void a()
    {
      this.b.cancel();
    }
    
    final class a
      extends TimerTask
    {
      a() {}
      
      public final void run()
      {
        PDFViewCtrl.d(PDFViewCtrl.this).lock();
        if (PDFViewCtrl.e(PDFViewCtrl.this) != null)
        {
          PDFViewCtrl.e(PDFViewCtrl.this).recycle();
          PDFViewCtrl.a(PDFViewCtrl.this, null);
        }
        PDFViewCtrl.a(PDFViewCtrl.this, 0);
        PDFViewCtrl.d(PDFViewCtrl.this).unlock();
        PDFViewCtrl.r(PDFViewCtrl.this);
      }
    }
  }
  
  final class c
  {
    private boolean A = false;
    private boolean B = false;
    private boolean C = false;
    private boolean a = false;
    private double[] b;
    private int c;
    private double[] d;
    private int e;
    private float f;
    private float g;
    private float h;
    private int i = 0;
    private int j = 0;
    private float k;
    private float l;
    private float m = PDFViewCtrl.a(PDFViewCtrl.this, 10.0F);
    private float n = PDFViewCtrl.a(PDFViewCtrl.this, PDFViewCtrl.Q(PDFViewCtrl.this));
    private float o = PDFViewCtrl.a(PDFViewCtrl.this, PDFViewCtrl.R(PDFViewCtrl.this));
    private long p;
    private int q;
    private int r;
    private int s;
    private int t;
    private int u;
    private int v;
    private int w;
    private int x;
    private a y = new a();
    private float[] z;
    
    public c() {}
    
    private void a(boolean paramBoolean)
    {
      this.a = false;
      this.i = 0;
      this.j = 0;
      if (!paramBoolean) {
        PDFViewCtrl.this.scrollBy(-(int)(this.k + 0.5D), 0);
      }
      for (;;)
      {
        this.b = null;
        this.c = 0;
        this.d = null;
        this.e = 0;
        int i2 = PDFViewCtrl.this.getChildCount();
        if ((i2 <= 0) || (this.z == null)) {
          break label128;
        }
        int i1 = 0;
        while (i1 < i2)
        {
          PDFViewCtrl.this.getChildAt(i1).setTranslationX(this.z[i1]);
          i1 += 1;
        }
        PDFViewCtrl.this.setCurrentPage(this.t);
      }
      this.z = null;
      label128:
      this.B = false;
      PDFViewCtrl.this.setInteractionEnabled(true);
      PDFViewCtrl.c(PDFViewCtrl.this, 1);
      PDFViewCtrl.W(PDFViewCtrl.this).removeMessages(0);
      PDFViewCtrl.W(PDFViewCtrl.this).sendEmptyMessage(0);
      PDFViewCtrl.this.invalidate();
    }
    
    private boolean a()
    {
      if (this.s <= 1) {}
      int i1;
      do
      {
        do
        {
          do
          {
            return false;
            i1 = PDFViewCtrl.this.getPagePresentationMode();
            if (i1 != 1) {
              break;
            }
          } while (this.q <= 1);
          return true;
          if (i1 != 3) {
            break;
          }
        } while ((this.s <= 2) || (this.r <= 2));
        return true;
      } while ((i1 != 5) || (this.r < 2));
      return true;
    }
    
    private double[] a(int paramInt)
    {
      Object localObject1;
      if ((PDFViewCtrl.X(PDFViewCtrl.this) == null) || (paramInt <= 0) || (paramInt > PDFViewCtrl.T(PDFViewCtrl.this))) {
        localObject1 = null;
      }
      for (;;)
      {
        return localObject1;
        int i1;
        label43:
        int i2;
        int i3;
        if (!PDFViewCtrl.this.isFinishedRendering())
        {
          i1 = 1;
          i2 = PDFViewCtrl.Y(PDFViewCtrl.this);
          i3 = PDFViewCtrl.Z(PDFViewCtrl.this);
          PDFViewCtrl.j(PDFViewCtrl.this, true);
          PDFViewCtrl.k(PDFViewCtrl.this, true);
          PDFViewCtrl.aa(PDFViewCtrl.this);
        }
        try
        {
          if (PDFViewCtrl.this.setCurrentPage(paramInt)) {
            if (PDFViewCtrl.this.isContinuousPagePresentationMode(PDFViewCtrl.J(PDFViewCtrl.this))) {
              break label248;
            }
          }
          label248:
          for (paramInt = 1;; paramInt = 0)
          {
            if (paramInt != 0)
            {
              PDFViewCtrl.b(PDFViewCtrl.this).lock();
              PDFViewCtrl.K(PDFViewCtrl.this);
              PDFViewCtrl.b(PDFViewCtrl.this).unlock();
            }
            double[] arrayOfDouble = PDFViewCtrl.a(PDFViewCtrl.this, 0.0D, 0.0D, PDFViewCtrl.ab(PDFViewCtrl.this), PDFViewCtrl.ac(PDFViewCtrl.this));
            PDFViewCtrl.k(PDFViewCtrl.this, false);
            PDFViewCtrl.l(PDFViewCtrl.this, true);
            PDFViewCtrl.f(PDFViewCtrl.this, i2);
            PDFViewCtrl.g(PDFViewCtrl.this, i3);
            PDFViewCtrl.j(PDFViewCtrl.this, false);
            localObject1 = arrayOfDouble;
            if (i1 == 0) {
              break;
            }
            PDFViewCtrl.f(PDFViewCtrl.this).sendEmptyMessage(0);
            return arrayOfDouble;
            i1 = 0;
            break label43;
          }
        }
        catch (Exception localException)
        {
          Object localObject2 = null;
          return null;
        }
        finally
        {
          PDFViewCtrl.k(PDFViewCtrl.this, false);
          PDFViewCtrl.l(PDFViewCtrl.this, true);
          PDFViewCtrl.f(PDFViewCtrl.this, i2);
          PDFViewCtrl.g(PDFViewCtrl.this, i3);
          PDFViewCtrl.j(PDFViewCtrl.this, false);
          if (i1 != 0) {
            PDFViewCtrl.f(PDFViewCtrl.this).sendEmptyMessage(0);
          }
        }
      }
    }
    
    private boolean b()
    {
      if (this.s <= 1) {}
      int i1;
      do
      {
        do
        {
          do
          {
            return false;
            i1 = PDFViewCtrl.this.getPagePresentationMode();
            if (i1 != 1) {
              break;
            }
          } while (this.q >= this.s);
          return true;
          if (i1 != 3) {
            break;
          }
        } while ((this.s <= 2) || (this.r >= this.s));
        return true;
      } while ((i1 != 5) || (this.r >= this.s));
      return true;
    }
    
    private int c()
    {
      int i1 = PDFViewCtrl.this.getPagePresentationMode();
      if (i1 == 1) {
        i1 = this.r - 1;
      }
      for (;;)
      {
        if (i1 < 0)
        {
          return 0;
          if ((i1 == 3) || (i1 == 5)) {
            i1 = this.r - 2;
          }
        }
        else
        {
          return i1;
        }
        i1 = 0;
      }
    }
    
    private int d()
    {
      int i4 = PDFViewCtrl.this.getPagePresentationMode();
      int i3 = PDFViewCtrl.T(PDFViewCtrl.this);
      int i2 = 0;
      int i1;
      if (i4 == 1)
      {
        i1 = i2;
        if (this.r < i3) {
          i1 = this.r + 1;
        }
      }
      do
      {
        do
        {
          do
          {
            return i1;
            if (i4 == 3) {
              break;
            }
            i1 = i2;
          } while (i4 != 5);
          i1 = i2;
        } while (this.r >= i3);
        i2 = this.r + 2;
        i1 = i2;
      } while (i2 <= i3);
      return i3;
    }
    
    public final void a(MotionEvent paramMotionEvent)
    {
      if ((!this.B) || (this.s == 0)) {}
      for (;;)
      {
        return;
        this.h = paramMotionEvent.getX();
        if (this.a) {
          break label638;
        }
        int i3 = PDFViewCtrl.this.getScrollX();
        i2 = 0;
        if (this.h - this.f <= -3.0F)
        {
          i1 = i2;
          if (i3 + PDFViewCtrl.this.getWidth() >= PDFViewCtrl.this.getViewCanvasWidth() - 1.0F) {
            i1 = 1;
          }
        }
        int i4;
        for (;;)
        {
          i4 = i1 * PDFViewCtrl.V(PDFViewCtrl.this);
          if (i4 != 0)
          {
            this.c = 0;
            this.b = new double[10];
            this.e = 0;
            this.d = new double[10];
          }
          i3 = 0;
          i1 = 0;
          i2 = 0;
          if (i4 <= 0) {
            break label421;
          }
          if (!b()) {
            break;
          }
          paramMotionEvent = a(d());
          if (paramMotionEvent == null) {
            break;
          }
          this.c += paramMotionEvent.length / 5;
          i2 = 0;
          while (i2 < paramMotionEvent.length)
          {
            this.b[i1] = paramMotionEvent[i2];
            i2 += 1;
            i1 += 1;
          }
          i1 = i2;
          if (this.h - this.f >= 3.0F)
          {
            i1 = i2;
            if (i3 <= 1.0F) {
              i1 = -1;
            }
          }
        }
        if ((a()) && (this.g < PDFViewCtrl.this.getWidth() - this.f))
        {
          paramMotionEvent = a(c());
          if (paramMotionEvent != null)
          {
            this.e += paramMotionEvent.length / 5;
            i2 = 0;
            i1 = 0;
            while (i2 < paramMotionEvent.length)
            {
              this.d[i1] = paramMotionEvent[i2];
              i2 += 1;
              i1 += 1;
            }
          }
        }
        this.a = true;
        while (this.a)
        {
          i2 = PDFViewCtrl.this.getChildCount();
          if (i2 <= 0) {
            break label605;
          }
          this.z = new float[i2];
          i1 = 0;
          while (i1 < i2)
          {
            paramMotionEvent = PDFViewCtrl.this.getChildAt(i1);
            this.z[i1] = paramMotionEvent.getTranslationX();
            i1 += 1;
          }
          label421:
          if (i4 < 0)
          {
            if (a())
            {
              paramMotionEvent = a(c());
              if (paramMotionEvent != null)
              {
                this.e += paramMotionEvent.length / 5;
                i4 = 0;
                i1 = i2;
                i2 = i4;
                while (i2 < paramMotionEvent.length)
                {
                  this.d[i1] = paramMotionEvent[i2];
                  i2 += 1;
                  i1 += 1;
                }
              }
            }
            if ((b()) && (this.g < PDFViewCtrl.this.getWidth() - this.f))
            {
              paramMotionEvent = a(d());
              if (paramMotionEvent != null)
              {
                this.c += paramMotionEvent.length / 5;
                i2 = 0;
                i1 = i3;
                while (i2 < paramMotionEvent.length)
                {
                  this.b[i1] = paramMotionEvent[i2];
                  i2 += 1;
                  i1 += 1;
                }
              }
            }
            this.a = true;
          }
        }
      }
      label605:
      PDFViewCtrl.c(PDFViewCtrl.this, -1);
      PDFViewCtrl.W(PDFViewCtrl.this).removeMessages(0);
      PDFViewCtrl.W(PDFViewCtrl.this).sendEmptyMessage(0);
      return;
      label638:
      this.C = true;
      float f1 = -this.h;
      float f2 = this.f;
      float f3 = PDFViewCtrl.this.getScrollX();
      float f4 = this.g;
      this.k = (-(f1 + f2) + (f3 - f4));
      this.k = ((int)(this.k + 0.5D));
      this.i = ((int)this.k);
      this.j = 0;
      int i2 = PDFViewCtrl.this.getChildCount();
      if (i2 > 0)
      {
        i1 = 0;
        while (i1 < i2)
        {
          paramMotionEvent = PDFViewCtrl.this.getChildAt(i1);
          paramMotionEvent.setTranslationX(this.i);
          paramMotionEvent.setTranslationY(0.0F);
          i1 += 1;
        }
      }
      int i1 = PDFViewCtrl.this.getWidth();
      i2 = PDFViewCtrl.this.getScrollX();
      float f5 = PDFViewCtrl.this.getViewCanvasWidth();
      f2 = 0.0F - this.m - i1;
      f1 = i1;
      f3 = this.m + f5;
      float f8 = i1;
      f4 = 0.0F + this.k - i2;
      f5 = f5 + this.k - i2;
      float f9 = this.k;
      float f10 = i2;
      float f6 = this.k + (f1 + f2) - i2;
      float f7 = this.k + f3 - i2;
      float f11 = this.k;
      float f12 = i2;
      f1 = Math.min(i1, f5) - Math.max(0.0F, f4);
      f2 = Math.min(i1, f6) - Math.max(0.0F, f9 + f2 - f10);
      f8 = Math.min(i1, f11 + (f8 + f3) - f12) - Math.max(0.0F, f7);
      this.v = 0;
      this.w = 0;
      this.x = 0;
      if ((f4 <= 0.0F) && (f5 >= i1))
      {
        a(false);
        PDFViewCtrl.this.invalidate();
        return;
      }
      this.t = this.q;
      this.u = this.q;
      if (PDFViewCtrl.V(PDFViewCtrl.this) > 0)
      {
        f3 = f1;
        if (f2 > f1)
        {
          f3 = f1;
          if (a())
          {
            this.t = c();
            f3 = f2;
          }
        }
        if ((f8 > f3) && (b())) {
          this.t = d();
        }
      }
      label1087:
      label1574:
      label1577:
      for (;;)
      {
        if (this.t <= 0) {
          this.t = 1;
        }
        if (this.t > this.s) {
          this.t = this.s;
        }
        if (PDFViewCtrl.V(PDFViewCtrl.this) > 0) {
          if (f4 > 0.0F) {
            if ((f4 > i1 / 2.0F) && (a()))
            {
              this.v = 1;
              this.w = ((int)(i1 - f6 + 0.5D));
              this.x = (i1 - this.w);
              break;
              if ((f2 <= f1) || (!b())) {
                break label1574;
              }
              this.t = d();
            }
          }
        }
        for (;;)
        {
          if ((f8 <= f2) || (!a())) {
            break label1577;
          }
          this.t = c();
          break label1087;
          this.v = -1;
          this.w = ((int)(f4 + 0.5D));
          this.x = (i1 - this.w);
          this.u = c();
          break;
          if (f5 >= i1) {
            break;
          }
          if ((f5 <= i1 / 2.0F) && (b()))
          {
            this.v = -1;
            this.w = ((int)(f7 + 0.5D));
            this.x = (i1 - this.w);
            break;
          }
          this.v = 1;
          this.w = ((int)(i1 - f5 + 0.5D));
          this.x = (i1 - this.w);
          this.u = d();
          break;
          if (f4 > 0.0F)
          {
            if ((f4 > i1 / 2.0F) && (b()))
            {
              this.v = 1;
              this.w = ((int)(i1 - f6 + 0.5D));
              this.x = (i1 - this.w);
              break;
            }
            this.v = -1;
            this.w = ((int)(f4 + 0.5D));
            this.x = (i1 - this.w);
            this.u = d();
            break;
          }
          if (f5 >= i1) {
            break;
          }
          if ((f5 <= i1 / 2.0F) && (a()))
          {
            this.v = -1;
            this.w = ((int)(f7 + 0.5D));
            this.x = (i1 - this.w);
            break;
          }
          this.v = 1;
          this.w = ((int)(i1 - f5 + 0.5D));
          this.x = (i1 - this.w);
          this.u = c();
          break;
          f2 = f1;
        }
      }
    }
    
    public final void a(MotionEvent paramMotionEvent, float paramFloat)
    {
      if ((this.B) && (!this.A))
      {
        if (!this.C) {
          a(paramMotionEvent);
        }
        if (Math.abs(paramFloat) > this.o)
        {
          if (paramFloat >= 0.0F) {
            break label121;
          }
          if ((this.v > 0) && (this.u > 0))
          {
            this.t = this.u;
            this.v = (-this.v);
          }
        }
      }
      for (this.w = this.x;; this.w = this.x)
      {
        label121:
        do
        {
          this.A = true;
          PDFViewCtrl.this.setInteractionEnabled(false);
          this.p = SystemClock.uptimeMillis();
          this.l = this.k;
          this.y.sendEmptyMessage(0);
          return;
        } while ((this.v >= 0) || (this.u <= 0));
        this.t = this.u;
        this.v = (-this.v);
      }
    }
    
    public final void a(MotionEvent paramMotionEvent, int paramInt1, int paramInt2)
    {
      c localC = PDFViewCtrl.S(PDFViewCtrl.this);
      float f1 = paramMotionEvent.getX();
      this.f = f1;
      localC.h = f1;
      PDFViewCtrl.S(PDFViewCtrl.this).g = PDFViewCtrl.this.getScrollX();
      PDFViewCtrl.S(PDFViewCtrl.this).a = false;
      PDFViewCtrl.S(PDFViewCtrl.this).q = PDFViewCtrl.this.getCurrentPage();
      PDFViewCtrl.S(PDFViewCtrl.this).t = PDFViewCtrl.S(PDFViewCtrl.this).q;
      PDFViewCtrl.S(PDFViewCtrl.this).s = PDFViewCtrl.T(PDFViewCtrl.this);
      PDFViewCtrl.S(PDFViewCtrl.this).r = PDFViewCtrl.U(PDFViewCtrl.this);
      this.A = false;
      this.C = false;
      this.B = true;
      this.n = PDFViewCtrl.a(PDFViewCtrl.this, paramInt1);
      this.o = PDFViewCtrl.a(PDFViewCtrl.this, paramInt2);
    }
    
    final class a
      extends Handler
    {
      a() {}
      
      public final void handleMessage(Message paramMessage)
      {
        if (PDFViewCtrl.c.j(PDFViewCtrl.c.this)) {
          sendEmptyMessage(0);
        }
      }
    }
  }
  
  private class d
    extends Handler
  {
    private d(byte paramByte) {}
    
    public final void a()
    {
      PDFViewCtrl.h(PDFViewCtrl.this, true);
      if (!hasMessages(0)) {
        sendEmptyMessage(0);
      }
    }
  }
  
  private final class e
  {
    public String a;
    public boolean b;
    public boolean c;
    public boolean d;
    public boolean e;
    
    public e(String paramString, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
    {
      this.a = new String(paramString);
      this.b = paramBoolean1;
      this.c = paramBoolean2;
      this.d = paramBoolean3;
      this.e = paramBoolean4;
    }
  }
  
  private final class f
    extends AsyncTask<PDFViewCtrl.e, Void, Integer>
  {
    private f(byte paramByte) {}
    
    private Integer a(PDFViewCtrl.e... paramVarArgs)
    {
      int i = 0;
      paramVarArgs = paramVarArgs[0];
      for (;;)
      {
        try
        {
          long l = PDFViewCtrl.I(PDFViewCtrl.this);
          String str = paramVarArgs.a;
          bool2 = paramVarArgs.b;
          boolean bool3 = paramVarArgs.c;
          if (paramVarArgs.e) {
            continue;
          }
          bool1 = true;
          bool2 = PDFViewCtrl.a(l, str, bool2, bool3, bool1, paramVarArgs.d);
          bool1 = false;
        }
        catch (Exception localException)
        {
          boolean bool1 = paramVarArgs.d;
          boolean bool2 = false;
          continue;
        }
        PDFViewCtrl.i(PDFViewCtrl.this, false);
        if (bool1) {
          break;
        }
        if (bool2) {
          i = 1;
        }
        return Integer.valueOf(i);
        bool1 = false;
      }
      return Integer.valueOf(2);
    }
    
    protected final void onPreExecute()
    {
      PDFViewCtrl.E(PDFViewCtrl.this).onTextSearchStart();
      PDFViewCtrl.a(PDFViewCtrl.this, new Thread(new Runnable()
      {
        public final void run()
        {
          try
          {
            while (PDFViewCtrl.F(PDFViewCtrl.this))
            {
              Thread.sleep(50L);
              PDFViewCtrl.G(PDFViewCtrl.this).sendEmptyMessage(0);
            }
            return;
          }
          catch (InterruptedException localInterruptedException) {}
        }
      }));
      PDFViewCtrl.H(PDFViewCtrl.this).start();
    }
  }
}
