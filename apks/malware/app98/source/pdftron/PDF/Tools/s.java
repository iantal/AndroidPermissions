package pdftron.PDF.Tools;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.RectF;
import android.view.MotionEvent;
import pdftron.PDF.Annot;
import pdftron.PDF.Annots.Popup;
import pdftron.PDF.Annots.Text;
import pdftron.PDF.ColorPt;
import pdftron.PDF.PDFDoc;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.Page;
import pdftron.PDF.Point;
import pdftron.PDF.Rect;

final class s
  extends r
{
  private float A = a(60.0F);
  private float B = a(2.0F);
  private Path u;
  private float v = this.A;
  private float w = this.v * 1.45F;
  private float x = this.v / 20.0F;
  private float y = this.v / 4.0F;
  private float z = this.v / 4.0F;
  
  public s(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
    this.j = 8;
    this.c.setStrokeWidth(this.x);
    this.u = new Path();
    float f = this.z;
    this.u.moveTo(0.0F, -f);
    this.u.rLineTo(0.0F, -(this.v - f * 2.0F));
    this.u.rQuadTo(0.0F, -f, f, -f);
    this.u.rLineTo(this.w - f * 2.0F, 0.0F);
    this.u.rQuadTo(f, 0.0F, f, f);
    this.u.rLineTo(0.0F, this.v - f * 2.0F);
    this.u.rQuadTo(0.0F, f, -f, f);
    this.u.rLineTo(-this.w + 4.0F * f, 0.0F);
    this.u.rLineTo(-1.75F * f, this.y);
    this.u.rLineTo(0.5F * f, -this.y);
    this.u.lineTo(f, 0.0F);
    this.u.rQuadTo(-f, 0.0F, -f, -f);
  }
  
  public final int getMode()
  {
    return 8;
  }
  
  public final boolean onDown(MotionEvent paramMotionEvent)
  {
    super.onDown(paramMotionEvent);
    this.c.setStrokeWidth(this.B);
    return false;
  }
  
  public final void onDraw(Canvas paramCanvas, Matrix paramMatrix)
  {
    this.u.offset(this.a.x, this.a.y);
    this.c.setStyle(Paint.Style.FILL);
    this.c.setColor(Color.rgb(255, 255, 0));
    boolean bool = this.i.isHardwareAccelerated();
    if (bool)
    {
      paramMatrix = new Path();
      paramMatrix.addPath(this.u);
      paramCanvas.drawPath(paramMatrix, this.c);
      this.c.setStyle(Paint.Style.STROKE);
      this.c.setColor(-16777216);
      if (!bool) {
        break label325;
      }
      paramMatrix = new Path();
      paramMatrix.addPath(this.u);
      paramCanvas.drawPath(paramMatrix, this.c);
    }
    for (;;)
    {
      float f1 = this.a.x;
      f1 = this.z + f1;
      float f2 = this.a.y;
      float f3 = this.v;
      f3 = this.z + (f2 - f3);
      paramCanvas.drawLine(f1, f3, this.w + f1 - this.z * 2.0F, f3, this.c);
      f2 = (this.v - this.z * 2.0F) / 2.0F;
      f3 += f2;
      paramCanvas.drawLine(f1, f3, this.w + f1 - this.z * 2.0F, f3, this.c);
      f2 = f3 + f2;
      paramCanvas.drawLine(f1, f2, this.w + f1 - 3.0F * this.z, f2, this.c);
      this.u.offset(-this.a.x, -this.a.y);
      return;
      paramCanvas.drawPath(this.u, this.c);
      break;
      label325:
      paramCanvas.drawPath(this.u, this.c);
    }
  }
  
  public final boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    float f1 = this.a.x;
    float f7 = this.a.y;
    this.a.x = (paramMotionEvent2.getX() + this.i.getScrollX());
    this.a.y = (paramMotionEvent2.getY() + this.i.getScrollY());
    if (this.e != null)
    {
      if (this.a.x >= this.e.left) {
        break label285;
      }
      this.a.x = this.e.left;
      if (this.a.y - this.v >= this.e.top) {
        break label330;
      }
      this.a.y = (this.e.top + this.v);
    }
    for (;;)
    {
      paramFloat1 = Math.min(f1, this.a.x);
      paramFloat2 = this.x;
      f1 = Math.max(f1, this.a.x);
      float f2 = this.w;
      float f3 = this.x;
      float f4 = Math.min(f7, this.a.y);
      float f5 = this.v;
      float f6 = this.x;
      f7 = Math.max(f7, this.a.y);
      float f8 = this.y;
      float f9 = this.x;
      this.i.invalidate((int)(paramFloat1 - paramFloat2), (int)(f4 - f5 - f6), (int)Math.ceil(f1 + f2 + f3), (int)Math.ceil(f7 + f8 + f9));
      return true;
      label285:
      if (this.a.x + this.w <= this.e.right) {
        break;
      }
      this.a.x = (this.e.right - this.w);
      break;
      label330:
      if (this.a.y > this.e.bottom) {
        this.a.y = this.e.bottom;
      }
    }
  }
  
  public final boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    this.j = 2;
    try
    {
      this.i.lockDoc(true);
      Object localObject1 = this.i.convClientPtToPagePt(this.a.x - this.i.getScrollX(), this.a.y - this.i.getScrollY(), this.d);
      paramMotionEvent = new Point(localObject1[0], localObject1[1]);
      Object localObject2 = new Rect();
      ((Rect)localObject2).set(localObject1[0], localObject1[1], localObject1[0] + 20.0D, localObject1[1] + 20.0D);
      paramMotionEvent = Text.create(this.i.getDoc(), paramMotionEvent);
      paramMotionEvent.setIcon(0);
      paramMotionEvent.setColor(new ColorPt(255.0D, 255.0D, 0.0D), 3);
      ((Rect)localObject2).set(localObject1[0] + 20.0D, localObject1[1] + 20.0D, localObject1[0] + 90.0D, localObject1[1] + 90.0D);
      localObject1 = Popup.create(this.i.getDoc(), (Rect)localObject2);
      ((Popup)localObject1).setParent(paramMotionEvent);
      paramMotionEvent.setPopup((Popup)localObject1);
      paramMotionEvent.refreshAppearance();
      localObject2 = this.i.getDoc().getPage(this.d);
      ((Page)localObject2).annotPushBack(paramMotionEvent);
      ((Page)localObject2).annotPushBack((Annot)localObject1);
      this.k = paramMotionEvent;
      this.l = this.d;
      g();
      this.j = 2;
      this.i.update(this.k, this.l);
      this.i.unlockDoc();
    }
    catch (Exception paramMotionEvent)
    {
      for (;;)
      {
        paramMotionEvent = paramMotionEvent;
        this.i.unlockDoc();
      }
    }
    finally
    {
      paramMotionEvent = finally;
      this.i.unlockDoc();
      throw paramMotionEvent;
    }
    this.i.waitForRendering();
    return false;
  }
}
