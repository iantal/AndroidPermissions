package pdftron.PDF.Tools;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.view.MotionEvent;
import pdftron.PDF.Annot.BorderStyle;
import pdftron.PDF.Annots.Line;
import pdftron.PDF.ColorPt;
import pdftron.PDF.PDFDoc;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.Page;

final class c
  extends r
{
  private double u = Math.cos(0.5235987750000001D);
  private double v = Math.sin(0.5235987750000001D);
  private PointF w = new PointF(0.0F, 0.0F);
  private PointF x = new PointF(0.0F, 0.0F);
  private final float y = a(20.0F);
  
  public c(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
    this.j = 4;
  }
  
  private void i()
  {
    this.w.set(this.b);
    this.x.set(this.b);
    double d1 = this.b.x - this.a.x;
    double d2 = this.b.y - this.a.y;
    double d3 = d1 * d1 + d2 * d2;
    if (d3 != 0.0D)
    {
      d3 = Math.sqrt(d3);
      d1 /= d3;
      d2 /= d3;
      double d5 = this.u;
      double d6 = this.v;
      d3 = this.u;
      double d4 = this.v;
      PointF localPointF = this.w;
      double d7 = this.a.x;
      localPointF.x = ((float)((d5 * d1 - d6 * d2) * this.y + d7));
      localPointF = this.w;
      d5 = this.a.y;
      localPointF.y = ((float)(this.y * (d3 * d2 + d4 * d1) + d5));
      d5 = this.u;
      d6 = this.v;
      d3 = this.u;
      d4 = this.v;
      localPointF = this.x;
      d7 = this.a.x;
      localPointF.x = ((float)(this.y * (d5 * d1 + d6 * d2) + d7));
      localPointF = this.x;
      d5 = this.a.y;
      localPointF.y = ((float)((d2 * d3 - d1 * d4) * this.y + d5));
    }
  }
  
  public final int getMode()
  {
    return 4;
  }
  
  public final boolean onDown(MotionEvent paramMotionEvent)
  {
    super.onDown(paramMotionEvent);
    this.w.set(this.a);
    this.x.set(this.a);
    i();
    return false;
  }
  
  public final void onDraw(Canvas paramCanvas, Matrix paramMatrix)
  {
    paramCanvas.drawLine(this.a.x, this.a.y, this.b.x, this.b.y, this.c);
    paramCanvas.drawLine(this.a.x, this.a.y, this.w.x, this.w.y, this.c);
    paramCanvas.drawLine(this.a.x, this.a.y, this.x.x, this.x.y, this.c);
  }
  
  public final boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    paramFloat1 = Math.min(Math.min(Math.min(this.a.x, this.b.x), this.w.x), this.x.x);
    float f2 = Math.max(Math.max(Math.max(this.a.x, this.b.x), this.w.x), this.x.x);
    float f4 = Math.min(Math.min(Math.min(this.a.y, this.b.y), this.w.y), this.x.y);
    float f1 = Math.max(Math.max(Math.max(this.a.y, this.b.y), this.w.y), this.x.y);
    this.b.x = (paramMotionEvent2.getX() + this.i.getScrollX());
    this.b.y = (paramMotionEvent2.getY() + this.i.getScrollY());
    if (this.e != null)
    {
      if (this.b.x >= this.e.left) {
        break label428;
      }
      this.b.x = this.e.left;
      if (this.b.y >= this.e.top) {
        break label463;
      }
      this.b.y = this.e.top;
    }
    for (;;)
    {
      i();
      paramFloat1 = Math.min(Math.min(paramFloat1, this.w.x), this.x.x);
      paramFloat2 = this.g;
      f2 = Math.max(Math.max(f2, this.w.x), this.x.x);
      float f3 = this.g;
      f4 = Math.min(Math.min(f4, this.w.y), this.x.y);
      float f5 = this.g;
      f1 = Math.max(Math.max(f1, this.w.y), this.x.y);
      float f6 = this.g;
      this.i.invalidate((int)(paramFloat1 - paramFloat2), (int)(f4 - f5), (int)Math.ceil(f2 + f3), (int)Math.ceil(f1 + f6));
      return true;
      label428:
      if (this.b.x <= this.e.right) {
        break;
      }
      this.b.x = this.e.right;
      break;
      label463:
      if (this.b.y > this.e.bottom) {
        this.b.y = this.e.bottom;
      }
    }
  }
  
  public final boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    this.j = 2;
    try
    {
      this.i.lockDoc(true);
      paramMotionEvent = b();
      if (paramMotionEvent != null)
      {
        paramMotionEvent = Line.create(this.i.getDoc(), paramMotionEvent);
        paramMotionEvent.setStartStyle(3);
        Annot.BorderStyle localBorderStyle = paramMotionEvent.getBorderStyle();
        localBorderStyle.setWidth(this.f);
        paramMotionEvent.setBorderStyle(localBorderStyle);
        double d1 = Color.red(this.h) / 255.0D;
        double d2 = Color.green(this.h) / 255.0D;
        double d3 = Color.blue(this.h) / 255.0D;
        double d4 = Color.alpha(this.h) / 255.0D;
        paramMotionEvent.setColor(new ColorPt(d1, d2, d3), 3);
        paramMotionEvent.setOpacity(d4);
        paramMotionEvent.refreshAppearance();
        this.i.getDoc().getPage(this.d).annotPushBack(paramMotionEvent);
        this.k = paramMotionEvent;
        this.l = this.d;
        g();
        this.i.update(this.k, this.l);
      }
    }
    catch (Exception paramMotionEvent)
    {
      for (;;)
      {
        float f1 = Math.min(Math.min(Math.min(this.a.x, this.b.x), this.w.x), this.x.x);
        float f2 = this.g;
        float f3 = Math.max(Math.max(Math.max(this.a.x, this.b.x), this.w.x), this.x.x);
        float f4 = this.g;
        float f5 = Math.min(Math.min(Math.min(this.a.y, this.b.y), this.w.y), this.x.y);
        float f6 = this.g;
        float f7 = Math.max(Math.max(Math.max(this.a.y, this.b.y), this.w.y), this.x.y);
        float f8 = this.g;
        this.i.postInvalidate((int)(f1 - f2), (int)(f5 - f6), (int)Math.ceil(f3 + f4), (int)Math.ceil(f7 + f8));
        this.i.unlockDoc();
      }
    }
    finally
    {
      this.i.unlockDoc();
    }
    this.i.waitForRendering();
    return false;
  }
}
