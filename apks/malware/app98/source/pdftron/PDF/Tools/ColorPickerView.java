package pdftron.PDF.Tools;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ComposeShader;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Paint.Style;
import android.graphics.Point;
import android.graphics.PorterDuff.Mode;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Shader.TileMode;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;

final class ColorPickerView
  extends View
{
  private static float f = 1.0F;
  private int A = 0;
  private float B;
  private RectF C;
  private RectF D;
  private RectF E;
  private RectF F;
  private a G;
  private Point H = null;
  private float a = 30.0F;
  private float b = 20.0F;
  private float c = 10.0F;
  private float d = 5.0F;
  private float e = 2.0F;
  private OnColorChangedListener g;
  private Paint h;
  private Paint i;
  private Paint j;
  private Paint k;
  private Paint l;
  private Paint m;
  private Paint n;
  private Shader o;
  private Shader p;
  private Shader q;
  private Shader r;
  private int s = 255;
  private float t = 360.0F;
  private float u = 0.0F;
  private float v = 0.0F;
  private String w = "Alpha";
  private int x = -14935012;
  private int y = -9539986;
  private boolean z = false;
  
  public ColorPickerView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  private ColorPickerView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, null, 0);
  }
  
  private ColorPickerView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, 0);
    f = getContext().getResources().getDisplayMetrics().density;
    this.d *= f;
    this.e *= f;
    this.a *= f;
    this.b *= f;
    this.c *= f;
    this.B = (Math.max(Math.max(this.d, this.e), 1.0F * f) * 1.5F);
    this.h = new Paint();
    this.i = new Paint();
    this.j = new Paint();
    this.k = new Paint();
    this.l = new Paint();
    this.m = new Paint();
    this.n = new Paint();
    this.i.setStyle(Paint.Style.STROKE);
    this.i.setStrokeWidth(f * 2.0F);
    this.i.setAntiAlias(true);
    this.k.setColor(this.x);
    this.k.setStyle(Paint.Style.STROKE);
    this.k.setStrokeWidth(f * 2.0F);
    this.k.setAntiAlias(true);
    this.m.setColor(-14935012);
    this.m.setTextSize(14.0F * f);
    this.m.setAntiAlias(true);
    this.m.setTextAlign(Paint.Align.CENTER);
    this.m.setFakeBoldText(true);
    setFocusable(true);
    setFocusableInTouchMode(true);
  }
  
  private boolean a(MotionEvent paramMotionEvent)
  {
    float f2 = 0.0F;
    float f1 = 0.0F;
    if (this.H == null) {}
    label259:
    do
    {
      return false;
      i1 = this.H.x;
      i2 = this.H.y;
      float f3;
      if (this.E.contains(i1, i2))
      {
        this.A = 1;
        f3 = paramMotionEvent.getY();
        paramMotionEvent = this.E;
        f2 = paramMotionEvent.height();
        if (f3 < paramMotionEvent.top) {}
        for (;;)
        {
          this.t = (360.0F - f1 * 360.0F / f2);
          return true;
          if (f3 > paramMotionEvent.bottom) {
            f1 = f2;
          } else {
            f1 = f3 - paramMotionEvent.top;
          }
        }
      }
      if (this.D.contains(i1, i2))
      {
        this.A = 0;
        f1 = paramMotionEvent.getX();
        float f5 = paramMotionEvent.getY();
        paramMotionEvent = this.D;
        float[] arrayOfFloat = new float[2];
        f3 = paramMotionEvent.width();
        float f4 = paramMotionEvent.height();
        if (f1 < paramMotionEvent.left)
        {
          f1 = 0.0F;
          if (f5 >= paramMotionEvent.top) {
            break label259;
          }
        }
        for (;;)
        {
          arrayOfFloat[0] = (f1 * (1.0F / f3));
          arrayOfFloat[1] = (1.0F - f2 * (1.0F / f4));
          this.u = arrayOfFloat[0];
          this.v = arrayOfFloat[1];
          return true;
          if (f1 > paramMotionEvent.right)
          {
            f1 = f3;
            break;
          }
          f1 -= paramMotionEvent.left;
          break;
          if (f5 > paramMotionEvent.bottom) {
            f2 = f4;
          } else {
            f2 = f5 - paramMotionEvent.top;
          }
        }
      }
    } while ((this.F == null) || (!this.F.contains(i1, i2)));
    this.A = 2;
    int i1 = (int)paramMotionEvent.getX();
    paramMotionEvent = this.F;
    int i2 = (int)paramMotionEvent.width();
    if (i1 < paramMotionEvent.left) {
      i1 = 0;
    }
    for (;;)
    {
      this.s = (255 - i1 * 255 / i2);
      return true;
      if (i1 > paramMotionEvent.right) {
        i1 = i2;
      } else {
        i1 -= (int)paramMotionEvent.left;
      }
    }
  }
  
  private static int[] c()
  {
    int[] arrayOfInt = new int['Å©'];
    int i2 = arrayOfInt.length - 1;
    int i1 = 0;
    while (i2 >= 0)
    {
      arrayOfInt[i1] = Color.HSVToColor(new float[] { i2, 1.0F, 1.0F });
      i2 -= 1;
      i1 += 1;
    }
    return arrayOfInt;
  }
  
  private int d()
  {
    int i2 = (int)(200.0F * f);
    int i1 = i2;
    if (this.z) {
      i1 = (int)(i2 + (this.c + this.b));
    }
    return i1;
  }
  
  public final int a()
  {
    return Color.HSVToColor(this.s, new float[] { this.t, this.u, this.v });
  }
  
  public final void a(int paramInt, boolean paramBoolean)
  {
    int i1 = Color.alpha(paramInt);
    int i2 = Color.red(paramInt);
    int i3 = Color.blue(paramInt);
    paramInt = Color.green(paramInt);
    float[] arrayOfFloat = new float[3];
    Color.RGBToHSV(i2, paramInt, i3, arrayOfFloat);
    this.s = i1;
    this.t = arrayOfFloat[0];
    this.u = arrayOfFloat[1];
    this.v = arrayOfFloat[2];
    if (this.g != null) {
      this.g.onColorChanged(Color.HSVToColor(this.s, new float[] { this.t, this.u, this.v }));
    }
    invalidate();
  }
  
  public final void a(OnColorChangedListener paramOnColorChangedListener)
  {
    this.g = paramOnColorChangedListener;
  }
  
  public final void a(boolean paramBoolean)
  {
    if (this.z != paramBoolean)
    {
      this.z = paramBoolean;
      this.o = null;
      this.p = null;
      this.q = null;
      this.r = null;
      requestLayout();
    }
  }
  
  public final float b()
  {
    return this.B;
  }
  
  protected final void onDraw(Canvas paramCanvas)
  {
    if ((this.C.width() <= 0.0F) || (this.C.height() <= 0.0F)) {}
    do
    {
      return;
      localRectF1 = this.D;
      this.n.setColor(this.y);
      paramCanvas.drawRect(this.C.left, this.C.top, localRectF1.right + 1.0F, localRectF1.bottom + 1.0F, this.n);
      if (this.o == null) {
        this.o = new LinearGradient(localRectF1.left, localRectF1.top, localRectF1.left, localRectF1.bottom, -1, -16777216, Shader.TileMode.CLAMP);
      }
      i1 = Color.HSVToColor(new float[] { this.t, 1.0F, 1.0F });
      this.p = new LinearGradient(localRectF1.left, localRectF1.top, localRectF1.right, localRectF1.top, -1, i1, Shader.TileMode.CLAMP);
      localObject = new ComposeShader(this.o, this.p, PorterDuff.Mode.MULTIPLY);
      this.h.setShader((Shader)localObject);
      paramCanvas.drawRect(localRectF1, this.h);
      f1 = this.u;
      f2 = this.v;
      localRectF1 = this.D;
      float f3 = localRectF1.height();
      float f4 = localRectF1.width();
      localObject = new Point();
      ((Point)localObject).x = ((int)(f1 * f4 + localRectF1.left));
      ((Point)localObject).y = ((int)((1.0F - f2) * f3 + localRectF1.top));
      this.i.setColor(-16777216);
      paramCanvas.drawCircle(((Point)localObject).x, ((Point)localObject).y, this.d - f * 1.0F, this.i);
      this.i.setColor(-2236963);
      paramCanvas.drawCircle(((Point)localObject).x, ((Point)localObject).y, this.d, this.i);
      localRectF1 = this.E;
      this.n.setColor(this.y);
      paramCanvas.drawRect(localRectF1.left - 1.0F, localRectF1.top - 1.0F, localRectF1.right + 1.0F, localRectF1.bottom + 1.0F, this.n);
      if (this.q == null)
      {
        this.q = new LinearGradient(localRectF1.left, localRectF1.top, localRectF1.left, localRectF1.bottom, c(), null, Shader.TileMode.CLAMP);
        this.j.setShader(this.q);
      }
      paramCanvas.drawRect(localRectF1, this.j);
      f1 = f * 4.0F / 2.0F;
      f2 = this.t;
      localRectF2 = this.E;
      f3 = localRectF2.height();
      localObject = new Point();
      ((Point)localObject).y = ((int)(f3 - f2 * f3 / 360.0F + localRectF2.top));
      ((Point)localObject).x = ((int)localRectF2.left);
      localRectF2 = new RectF();
      localRectF1.left -= this.e;
      localRectF1.right += this.e;
      localRectF2.top = (((Point)localObject).y - f1);
      localRectF2.bottom = (f1 + ((Point)localObject).y);
      paramCanvas.drawRoundRect(localRectF2, 2.0F, 2.0F, this.k);
    } while ((!this.z) || (this.F == null) || (this.G == null));
    RectF localRectF1 = this.F;
    this.n.setColor(this.y);
    paramCanvas.drawRect(localRectF1.left - 1.0F, localRectF1.top - 1.0F, localRectF1.right + 1.0F, localRectF1.bottom + 1.0F, this.n);
    this.G.draw(paramCanvas);
    Object localObject = new float[3];
    localObject[0] = this.t;
    localObject[1] = this.u;
    localObject[2] = this.v;
    int i1 = Color.HSVToColor((float[])localObject);
    int i2 = Color.HSVToColor(0, (float[])localObject);
    this.r = new LinearGradient(localRectF1.left, localRectF1.top, localRectF1.right, localRectF1.top, i1, i2, Shader.TileMode.CLAMP);
    this.l.setShader(this.r);
    paramCanvas.drawRect(localRectF1, this.l);
    if ((this.w != null) && (this.w != "")) {
      paramCanvas.drawText(this.w, localRectF1.centerX(), localRectF1.centerY() + f * 4.0F, this.m);
    }
    float f1 = f * 4.0F / 2.0F;
    i1 = this.s;
    RectF localRectF2 = this.F;
    float f2 = localRectF2.width();
    localObject = new Point();
    ((Point)localObject).x = ((int)(f2 - i1 * f2 / 255.0F + localRectF2.left));
    ((Point)localObject).y = ((int)localRectF2.top);
    localRectF2 = new RectF();
    localRectF2.left = (((Point)localObject).x - f1);
    localRectF2.right = (f1 + ((Point)localObject).x);
    localRectF1.top -= this.e;
    localRectF1.bottom += this.e;
    paramCanvas.drawRoundRect(localRectF2, 2.0F, 2.0F, this.k);
  }
  
  protected final void onMeasure(int paramInt1, int paramInt2)
  {
    int i4 = View.MeasureSpec.getMode(paramInt1);
    int i3 = View.MeasureSpec.getMode(paramInt2);
    int i2 = View.MeasureSpec.getSize(paramInt1);
    int i1 = View.MeasureSpec.getSize(paramInt2);
    paramInt1 = i2;
    if (i4 != Integer.MIN_VALUE)
    {
      if (i4 == 1073741824) {
        paramInt1 = i2;
      }
    }
    else
    {
      if ((i3 != Integer.MIN_VALUE) && (i3 != 1073741824)) {
        break label153;
      }
      label61:
      if (this.z) {
        break label168;
      }
      paramInt2 = (int)(paramInt1 - this.c - this.a);
      if (paramInt2 <= i1) {
        break label161;
      }
      paramInt2 = (int)(i1 + this.c + this.a);
    }
    for (;;)
    {
      setMeasuredDimension(paramInt2, i1);
      return;
      paramInt2 = d();
      paramInt1 = paramInt2;
      if (this.z) {
        paramInt1 = (int)(paramInt2 - (this.c + this.b));
      }
      paramInt1 = (int)(paramInt1 + this.a + this.c);
      break;
      label153:
      i1 = d();
      break label61;
      label161:
      i1 = paramInt2;
      paramInt2 = paramInt1;
      continue;
      label168:
      i2 = (int)(i1 - this.b + this.a);
      paramInt2 = i2;
      if (i2 > paramInt1)
      {
        i1 = (int)(paramInt1 - this.a + this.b);
        paramInt2 = paramInt1;
      }
    }
  }
  
  protected final void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    this.C = new RectF();
    this.C.left = (this.B + getPaddingLeft());
    this.C.right = (paramInt1 - this.B - getPaddingRight());
    this.C.top = (this.B + getPaddingTop());
    this.C.bottom = (paramInt2 - this.B - getPaddingBottom());
    RectF localRectF = this.C;
    float f2 = localRectF.height() - 2.0F;
    float f1 = f2;
    if (this.z) {
      f1 = f2 - (this.c + this.b);
    }
    f2 = localRectF.left + 1.0F;
    float f3 = localRectF.top + 1.0F;
    this.D = new RectF(f2, f3, f1 + f2, f3 + f1);
    localRectF = this.C;
    f2 = localRectF.right;
    f3 = this.a;
    float f4 = localRectF.top;
    float f5 = localRectF.bottom;
    if (this.z) {}
    for (f1 = this.c + this.b;; f1 = 0.0F)
    {
      this.E = new RectF(f2 - f3 + 1.0F, f4 + 1.0F, localRectF.right - 1.0F, f5 - 1.0F - f1);
      if (this.z)
      {
        localRectF = this.C;
        f1 = localRectF.left;
        f2 = localRectF.bottom;
        f3 = this.b;
        f4 = localRectF.bottom;
        this.F = new RectF(f1 + 1.0F, f2 - f3 + 1.0F, localRectF.right - 1.0F, f4 - 1.0F);
        this.G = new a((int)(5.0F * f));
        this.G.setBounds(Math.round(this.F.left), Math.round(this.F.top), Math.round(this.F.right), Math.round(this.F.bottom));
      }
      return;
    }
  }
  
  public final boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool;
    switch (paramMotionEvent.getAction())
    {
    default: 
      bool = false;
    }
    while (bool)
    {
      if (this.g != null) {
        this.g.onColorChanged(Color.HSVToColor(this.s, new float[] { this.t, this.u, this.v }));
      }
      invalidate();
      return true;
      this.H = new Point((int)paramMotionEvent.getX(), (int)paramMotionEvent.getY());
      bool = a(paramMotionEvent);
      continue;
      bool = a(paramMotionEvent);
      continue;
      this.H = null;
      bool = a(paramMotionEvent);
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public final boolean onTrackballEvent(MotionEvent paramMotionEvent)
  {
    float f1 = 0.0F;
    float f2 = 0.0F;
    float f4 = paramMotionEvent.getX();
    float f3 = paramMotionEvent.getY();
    if (paramMotionEvent.getAction() == 2) {}
    int i1;
    switch (this.A)
    {
    default: 
      i1 = 0;
      if (i1 != 0)
      {
        if (this.g != null) {
          this.g.onColorChanged(Color.HSVToColor(this.s, new float[] { this.t, this.u, this.v }));
        }
        invalidate();
        return true;
      }
      break;
    case 0: 
      f4 = this.u + f4 / 50.0F;
      f3 = this.v - f3 / 50.0F;
      if (f4 < 0.0F)
      {
        f1 = 0.0F;
        label152:
        if (f3 >= 0.0F) {
          break label190;
        }
      }
      break;
    }
    for (;;)
    {
      this.u = f1;
      this.v = f2;
      i1 = 1;
      break;
      f1 = f4;
      if (f4 <= 1.0F) {
        break label152;
      }
      f1 = 1.0F;
      break label152;
      label190:
      if (f3 > 1.0F)
      {
        f2 = 1.0F;
        continue;
        f2 = this.t - f3 * 10.0F;
        if (f2 < 0.0F) {}
        for (;;)
        {
          this.t = f1;
          i1 = 1;
          break;
          if (f2 > 360.0F)
          {
            f1 = 360.0F;
            continue;
            if ((!this.z) || (this.F == null))
            {
              i1 = 0;
              break;
            }
            int i2 = (int)(this.s - f4 * 10.0F);
            if (i2 < 0) {
              i1 = 0;
            }
            for (;;)
            {
              this.s = i1;
              i1 = 1;
              break;
              i1 = i2;
              if (i2 > 255) {
                i1 = 255;
              }
            }
            return super.onTrackballEvent(paramMotionEvent);
          }
          f1 = f2;
        }
      }
      else
      {
        f2 = f3;
      }
    }
  }
  
  public static abstract interface OnColorChangedListener
  {
    public abstract void onColorChanged(int paramInt);
  }
}
