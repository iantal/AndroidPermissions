package pdftron.PDF.Tools;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Path;
import android.graphics.PointF;
import android.view.MotionEvent;
import java.util.LinkedList;
import java.util.ListIterator;
import pdftron.PDF.Annot.BorderStyle;
import pdftron.PDF.Annots.Ink;
import pdftron.PDF.ColorPt;
import pdftron.PDF.PDFDoc;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.Page;
import pdftron.PDF.Point;

final class l
  extends r
{
  private Path u = new Path();
  private LinkedList<PointF> v = new LinkedList();
  
  public l(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
    this.j = 7;
  }
  
  public final int getMode()
  {
    return 7;
  }
  
  public final boolean onDown(MotionEvent paramMotionEvent)
  {
    super.onDown(paramMotionEvent);
    this.u.moveTo(this.a.x, this.a.y);
    this.v.add(new PointF(this.a.x, this.a.y));
    return false;
  }
  
  public final void onDraw(Canvas paramCanvas, Matrix paramMatrix)
  {
    paramCanvas.drawPath(this.u, this.c);
  }
  
  public final boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    paramFloat1 = paramMotionEvent2.getX() + this.i.getScrollX();
    paramFloat2 = paramMotionEvent2.getY() + this.i.getScrollY();
    this.u.lineTo(paramFloat1, paramFloat2);
    this.v.add(new PointF(paramFloat1, paramFloat2));
    this.a.x = Math.min(Math.min(paramFloat1, this.a.x), this.a.x);
    this.a.y = Math.min(Math.min(paramFloat2, this.a.y), this.a.y);
    this.b.x = Math.max(Math.max(paramFloat1, this.b.x), this.b.x);
    this.b.y = Math.max(Math.max(paramFloat2, this.b.y), this.b.y);
    paramFloat1 = this.a.x;
    paramFloat2 = this.g;
    float f1 = this.b.x;
    float f2 = this.g;
    float f3 = this.a.y;
    float f4 = this.g;
    float f5 = this.b.y;
    float f6 = this.g;
    this.i.invalidate((int)(paramFloat1 - paramFloat2), (int)(f3 - f4), (int)Math.ceil(f1 + f2), (int)Math.ceil(f5 + f6));
    return true;
  }
  
  public final boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    this.j = 2;
    try
    {
      this.i.lockDoc(true);
      paramMotionEvent = b();
      if (paramMotionEvent != null)
      {
        float f1 = this.i.getScrollX();
        float f2 = this.i.getScrollY();
        paramMotionEvent = Ink.create(this.i.getDoc(), paramMotionEvent);
        Object localObject1 = this.v.listIterator(0);
        Point localPoint = new Point();
        paramInt = 0;
        while (((ListIterator)localObject1).hasNext())
        {
          Object localObject2 = (PointF)((ListIterator)localObject1).next();
          localObject2 = this.i.convClientPtToPagePt(((PointF)localObject2).x - f1, ((PointF)localObject2).y - f2, this.d);
          localPoint.x = localObject2[0];
          localPoint.y = localObject2[1];
          paramMotionEvent.setPoint(0, paramInt, localPoint);
          paramInt += 1;
        }
        localObject1 = paramMotionEvent.getBorderStyle();
        ((Annot.BorderStyle)localObject1).setWidth(this.f);
        paramMotionEvent.setBorderStyle((Annot.BorderStyle)localObject1);
        double d1 = Color.red(this.h) / 255.0D;
        double d2 = Color.green(this.h) / 255.0D;
        double d3 = Color.blue(this.h) / 255.0D;
        double d4 = Color.alpha(this.h) / 255.0D;
        paramMotionEvent.setColor(new ColorPt(d1, d2, d3), 3);
        paramMotionEvent.setOpacity(d4);
        paramMotionEvent.refreshAppearance();
        this.i.getDoc().getPage(this.d).annotPushBack(paramMotionEvent);
        this.k = paramMotionEvent;
        this.l = this.d;
        g();
        this.i.update(this.k, this.l);
      }
      this.j = 2;
    }
    catch (Exception paramMotionEvent)
    {
      for (;;)
      {
        this.i.unlockDoc();
      }
    }
    finally
    {
      this.i.unlockDoc();
    }
    this.i.waitForRendering();
    return false;
  }
}
