package pdftron.PDF.Tools;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Matrix.ScaleToFit;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.FillType;
import android.graphics.PointF;
import android.graphics.RectF;
import android.os.Build.VERSION;
import android.view.MotionEvent;
import java.util.Iterator;
import java.util.LinkedList;
import pdftron.Common.PDFNetException;
import pdftron.PDF.Annots.Highlight;
import pdftron.PDF.Annots.Squiggly;
import pdftron.PDF.Annots.StrikeOut;
import pdftron.PDF.Annots.TextMarkup;
import pdftron.PDF.Annots.Underline;
import pdftron.PDF.ColorPt;
import pdftron.PDF.PDFDoc;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.PDFViewCtrl.Selection;
import pdftron.PDF.Page;
import pdftron.PDF.Point;
import pdftron.PDF.QuadPoint;

final class t
  extends u
{
  private int A = (int)a(5.0F);
  private float B;
  private float C;
  private float D;
  private Canvas E;
  private Bitmap F;
  private RectF G;
  private RectF H;
  private Matrix I;
  private RectF J;
  private PointF K;
  private Path L;
  private Path M;
  private Paint N;
  private float O = a(2.0F);
  private float P = a(7.5F);
  private Path a;
  private boolean b;
  private RectF c;
  private RectF d;
  private android.graphics.Rect e;
  private boolean f;
  private boolean g;
  private int h;
  private int u;
  private boolean v;
  private a[] w;
  private PointF x;
  private int y = (int)a(150.0F);
  private int z;
  
  public t(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
    new LinkedList();
    this.a = new Path();
    this.N = new Paint();
    this.N.setAntiAlias(true);
    this.b = false;
    this.c = new RectF();
    this.J = new RectF();
    this.d = new RectF();
    this.e = new android.graphics.Rect();
    this.u = -1;
    this.v = false;
    this.w = new a[2];
    this.w[0] = new a();
    this.w[1] = new a();
    this.w[0].a = new PointF();
    this.w[0].b = new PointF();
    this.w[1].a = new PointF();
    this.w[1].b = new PointF();
    this.x = new PointF();
    this.f = false;
    this.g = false;
    this.z = (this.y / 2);
    this.D = (this.z / 4.0F);
    this.B = (this.A / 4.0F);
    this.C = (this.B * 4.0F);
    this.F = Bitmap.createBitmap(this.y - (this.A << 1), this.z - (this.A << 1), Bitmap.Config.ARGB_8888);
    this.E = new Canvas();
    this.E.setBitmap(this.F);
    this.G = new RectF();
    this.H = new RectF();
    this.I = new Matrix();
    this.K = new PointF();
    this.L = new Path();
    this.M = new Path();
    float f1 = this.A;
    this.L.moveTo(0.0F, -f1 - this.D);
    this.L.rLineTo(0.0F, -(this.z - f1 * 2.0F));
    this.L.rQuadTo(0.0F, -f1, f1, -f1);
    this.L.rLineTo(this.y - f1 * 2.0F, 0.0F);
    this.L.rQuadTo(f1, 0.0F, f1, f1);
    this.L.rLineTo(0.0F, this.z - f1 * 2.0F);
    this.L.rQuadTo(0.0F, f1, -f1, f1);
    this.L.rLineTo(-(this.y - f1 * 2.0F - this.D) / 2.0F, 0.0F);
    this.L.rLineTo(-this.D / 2.0F, this.D / 2.0F);
    this.L.rLineTo(-this.D / 2.0F, -this.D / 2.0F);
    this.L.rLineTo(-(this.y - f1 * 2.0F - this.D) / 2.0F, 0.0F);
    this.L.rQuadTo(-f1, 0.0F, -f1, -f1);
    this.L.close();
    this.M.set(this.L);
    this.L.moveTo(this.A, -this.A - f1 - this.D);
    this.L.rLineTo(0.0F, -(this.z - f1 * 2.0F - this.A * 2));
    this.L.rQuadTo(0.0F, -f1, f1, -f1);
    this.L.rLineTo(this.y - f1 * 2.0F - this.A * 2, 0.0F);
    this.L.rQuadTo(f1, 0.0F, f1, f1);
    this.L.rLineTo(0.0F, this.z - f1 * 2.0F - this.A * 2);
    this.L.rQuadTo(0.0F, f1, -f1, f1);
    this.L.rLineTo(-this.y + f1 * 2.0F + this.A * 2, 0.0F);
    this.L.rQuadTo(-f1, 0.0F, -f1, -f1);
    this.L.close();
    this.L.setFillType(Path.FillType.EVEN_ODD);
  }
  
  private void a(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, boolean paramBoolean)
  {
    float f3 = 0.0F;
    float f2 = paramFloat2;
    float f1 = paramFloat3;
    paramFloat2 = paramFloat4;
    int i;
    if (paramBoolean)
    {
      f1 = paramFloat3 + 0.01F;
      paramFloat3 = paramFloat4 + 0.01F;
      if (f1 - 0.02F >= 0.0F)
      {
        paramFloat1 = f1 - 0.02F;
        paramFloat2 = f3;
        if (paramFloat3 - 0.02F >= 0.0F) {
          paramFloat2 = paramFloat3 - 0.02F;
        }
        f2 = paramFloat2;
        paramFloat2 = paramFloat3;
      }
    }
    else
    {
      this.i.clearSelection();
      if (this.a.isEmpty()) {
        break label313;
      }
      i = 1;
      label87:
      this.a.reset();
    }
    try
    {
      this.i.lockDoc(true);
      if (!paramBoolean) {
        break label319;
      }
      this.i.selectByRect(paramFloat1, f2, f1, paramFloat2);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        label125:
        this.i.unlockDoc();
      }
    }
    finally
    {
      this.i.unlockDoc();
    }
    if (i != 0) {
      this.d.set(this.c);
    }
    b();
    if (i == 0) {
      this.d.set(this.c);
    }
    for (;;)
    {
      this.d.union(this.J);
      b(f1, paramFloat2);
      this.d.union(this.J);
      this.e.left = ((int)this.d.left - (int)Math.ceil(this.C) - 1);
      this.e.top = ((int)this.d.top - 1);
      this.e.right = ((int)Math.ceil(this.d.right) + (int)Math.ceil(this.C) + 1);
      this.e.bottom = ((int)Math.ceil(this.d.bottom) + (int)Math.ceil(1.5F * this.C) + 1);
      return;
      paramFloat1 = 0.0F;
      break;
      label313:
      i = 0;
      break label87;
      label319:
      this.i.selectByStruct(paramFloat1, f2, f1, paramFloat2);
      break label125;
      this.d.union(this.c);
    }
  }
  
  private void b()
  {
    float f9 = this.i.getScrollX();
    float f10 = this.i.getScrollY();
    int n = this.i.getSelectionBeginPage();
    int i1 = this.i.getSelectionEndPage();
    float f2 = 1.0E10F;
    float f4 = 1.0E10F;
    float f1 = 0.0F;
    float f3 = 0.0F;
    int i = 0;
    int j = n;
    double[] arrayOfDouble1;
    int i2;
    int k;
    float f8;
    float f7;
    float f6;
    float f5;
    int m;
    label127:
    double[] arrayOfDouble2;
    if (j <= i1)
    {
      arrayOfDouble1 = this.i.getSelection(j).getQuads();
      i2 = arrayOfDouble1.length / 8;
      k = i;
      f8 = f3;
      f7 = f1;
      f6 = f4;
      f5 = f2;
      if (i2 != 0)
      {
        m = 0;
        k = 0;
        f5 = f3;
        f3 = f4;
        f4 = f1;
        f1 = f5;
        if (m < i2)
        {
          arrayOfDouble2 = this.i.convPagePtToClientPt(arrayOfDouble1[k], arrayOfDouble1[(k + 1)], j);
          f6 = (float)arrayOfDouble2[0] + f9;
          f7 = (float)arrayOfDouble2[1] + f10;
          this.a.moveTo(f6, f7);
          if (f2 > f6)
          {
            f2 = f6;
            label198:
            if (f4 >= f6) {
              break label958;
            }
            f4 = f6;
            label210:
            if (f3 <= f7) {
              break label961;
            }
            f3 = f7;
            label220:
            if (f1 >= f7) {
              break label964;
            }
            f5 = f7;
            label231:
            if ((j != n) || (m != 0)) {
              break label1128;
            }
            this.w[0].a.set(f6 - this.O / 2.0F, f7);
            f6 -= this.O + this.P;
            f1 = f2;
            if (f2 > f6) {
              f1 = f6;
            }
            if (f4 >= f6) {
              break label970;
            }
            f2 = f6;
          }
        }
      }
    }
    for (;;)
    {
      label303:
      arrayOfDouble2 = this.i.convPagePtToClientPt(arrayOfDouble1[(k + 2)], arrayOfDouble1[(k + 3)], j);
      f7 = (float)arrayOfDouble2[0] + f9;
      f6 = (float)arrayOfDouble2[1] + f10;
      this.a.lineTo(f7, f6);
      if (f1 > f7)
      {
        f1 = f7;
        label369:
        if (f2 >= f7) {
          break label979;
        }
        f2 = f7;
        label379:
        if (f3 <= f6) {
          break label982;
        }
        f3 = f6;
        label389:
        if (f5 >= f6) {
          break label985;
        }
        f4 = f6;
        label401:
        if ((j != i1) || (m != i2 - 1)) {
          break label1115;
        }
        this.w[1].b.set(this.O / 2.0F + f7, f6);
        f7 = this.O + this.P + f7;
        f6 += this.P * 2.0F;
        f5 = f1;
        if (f1 > f7) {
          f5 = f7;
        }
        f1 = f2;
        if (f2 < f7) {
          f1 = f7;
        }
        f2 = f3;
        if (f3 > f6) {
          f2 = f6;
        }
        if (f4 >= f6) {
          break label992;
        }
        f3 = f6;
        label514:
        f6 = f1;
        f1 = f5;
        f4 = f2;
        f2 = f6;
      }
      for (;;)
      {
        arrayOfDouble2 = this.i.convPagePtToClientPt(arrayOfDouble1[(k + 4)], arrayOfDouble1[(k + 5)], j);
        f6 = (float)arrayOfDouble2[0] + f9;
        f7 = (float)arrayOfDouble2[1] + f10;
        this.a.lineTo(f6, f7);
        if (f1 > f6)
        {
          f1 = f6;
          label592:
          if (f2 >= f6) {
            break label1001;
          }
          f2 = f6;
          label602:
          if (f4 <= f7) {
            break label1004;
          }
          f4 = f7;
          label614:
          if (f3 >= f7) {
            break label1007;
          }
          f5 = f7;
          label625:
          if ((j != i1) || (m != i2 - 1)) {
            break label1112;
          }
          this.w[1].a.set(this.O / 2.0F + f6, f7);
          f6 = this.O + this.P + f6;
          f3 = f1;
          if (f1 > f6) {
            f3 = f6;
          }
          if (f2 >= f6) {
            break label1013;
          }
          f1 = f6;
          label700:
          f2 = f1;
          f1 = f3;
        }
        label772:
        label782:
        label794:
        label805:
        label915:
        label958:
        label961:
        label964:
        label970:
        label979:
        label982:
        label985:
        label992:
        label1001:
        label1004:
        label1007:
        label1013:
        label1021:
        label1026:
        label1029:
        label1035:
        label1099:
        label1112:
        for (;;)
        {
          arrayOfDouble2 = this.i.convPagePtToClientPt(arrayOfDouble1[(k + 6)], arrayOfDouble1[(k + 7)], j);
          f7 = (float)arrayOfDouble2[0] + f9;
          f6 = (float)arrayOfDouble2[1] + f10;
          this.a.lineTo(f7, f6);
          if (f1 > f7)
          {
            f1 = f7;
            if (f2 >= f7) {
              break label1021;
            }
            f3 = f7;
            if (f4 <= f6) {
              break label1026;
            }
            f4 = f6;
            if (f5 >= f6) {
              break label1029;
            }
            f2 = f6;
            if ((j != n) || (m != 0)) {
              break label1099;
            }
            this.w[0].b.set(f7 - this.O / 2.0F, f6);
            f7 -= this.O + this.P;
            f6 -= this.P * 2.0F;
            f5 = f1;
            if (f1 > f7) {
              f5 = f7;
            }
            f1 = f3;
            if (f3 < f7) {
              f1 = f7;
            }
            f3 = f4;
            if (f4 > f6) {
              f3 = f6;
            }
            if (f2 >= f6) {
              break label1035;
            }
            f2 = f6;
            f4 = f1;
            f1 = f5;
          }
          for (;;)
          {
            this.a.close();
            m += 1;
            k += 8;
            f5 = f1;
            f1 = f2;
            i = 1;
            f2 = f5;
            break label127;
            break label198;
            break label210;
            break label220;
            f5 = f1;
            break label231;
            f2 = f4;
            break label303;
            break label369;
            break label379;
            break label389;
            f4 = f5;
            break label401;
            f3 = f4;
            break label514;
            break label592;
            break label602;
            break label614;
            f5 = f3;
            break label625;
            f1 = f2;
            break label700;
            break label772;
            f3 = f2;
            break label782;
            break label794;
            f2 = f5;
            break label805;
            break label915;
            f5 = f2;
            f6 = f3;
            f7 = f4;
            f8 = f1;
            k = i;
            j += 1;
            i = k;
            f3 = f8;
            f1 = f7;
            f4 = f6;
            f2 = f5;
            break;
            if (i != 0) {
              this.c.set(f2, f4, f1, f3);
            }
            return;
            f5 = f3;
            f3 = f4;
            f4 = f5;
          }
        }
        label1115:
        f5 = f3;
        f3 = f4;
        f4 = f5;
      }
      label1128:
      f1 = f2;
      f2 = f4;
    }
  }
  
  private void b(float paramFloat1, float paramFloat2)
  {
    float f1 = this.i.getScrollX();
    float f3 = this.i.getScrollY();
    paramFloat1 = f1 + paramFloat1 - this.y / 2.0F - this.B / 2.0F;
    f1 = this.y;
    float f2 = this.B;
    paramFloat2 = f3 + paramFloat2 - this.z * 1.45F - this.D - this.B / 2.0F;
    f3 = this.z;
    float f4 = this.D;
    float f5 = this.B;
    this.J.set(paramFloat1, paramFloat2, f1 + paramFloat1 + f2, f3 + paramFloat2 + f4 + f5);
  }
  
  public final void a()
  {
    super.a();
    this.o = new LinkedList();
    this.o.add("Copy");
    this.o.add("Highlight");
    this.o.add("Underline");
    this.o.add("Crossout");
    this.o.add("Squiggly");
  }
  
  protected final void a(int paramInt, String paramString)
  {
    int k;
    String str;
    if (this.i.hasSelection())
    {
      paramInt = this.i.getSelectionBeginPage();
      k = this.i.getSelectionEndPage();
      str = new String(paramString).toLowerCase();
      if (!str.equals("copy")) {
        break label173;
      }
      paramString = new String();
      while (paramInt <= k)
      {
        localObject1 = this.i.getSelection(paramInt).getAsUnicode();
        paramString = paramString + (String)localObject1;
        paramInt += 1;
      }
      if (Build.VERSION.SDK_INT >= 11) {
        break label143;
      }
      localObject1 = (android.text.ClipboardManager)this.i.getContext().getSystemService("clipboard");
      if (localObject1 != null) {
        ((android.text.ClipboardManager)localObject1).setText(paramString);
      }
    }
    label143:
    label173:
    while ((!str.equals("highlight")) && (!str.equals("underline")) && (!str.equals("crossout")) && (!str.equals("squiggly")))
    {
      do
      {
        return;
        localObject1 = (android.content.ClipboardManager)this.i.getContext().getSystemService("clipboard");
      } while (localObject1 == null);
      ((android.content.ClipboardManager)localObject1).setText(paramString);
      return;
    }
    Object localObject1 = new LinkedList();
    for (;;)
    {
      int i;
      int j;
      try
      {
        this.i.lockDoc(true);
        PDFDoc localPDFDoc = this.i.getDoc();
        if (paramInt <= k)
        {
          Object localObject2 = this.i.getSelection(paramInt).getQuads();
          int m = localObject2.length / 8;
          if (m == 0) {
            break label859;
          }
          Object localObject3 = new Point();
          Point localPoint1 = new Point();
          Point localPoint2 = new Point();
          Point localPoint3 = new Point();
          QuadPoint localQuadPoint = new QuadPoint((Point)localObject3, localPoint1, localPoint2, localPoint3);
          paramString = new TextMarkup();
          pdftron.PDF.Rect localRect = new pdftron.PDF.Rect(localObject2[0], localObject2[1], localObject2[4], localObject2[5]);
          if (str.equals("highlight"))
          {
            paramString = Highlight.create(localPDFDoc, localRect);
            break label851;
            if (i < m)
            {
              ((Point)localObject3).x = localObject2[j];
              ((Point)localObject3).y = localObject2[(j + 1)];
              localPoint1.x = localObject2[(j + 2)];
              localPoint1.y = localObject2[(j + 3)];
              localPoint2.x = localObject2[(j + 4)];
              localPoint2.y = localObject2[(j + 5)];
              localPoint3.x = localObject2[(j + 6)];
              localPoint3.y = localObject2[(j + 7)];
              localQuadPoint.p1 = ((Point)localObject3);
              localQuadPoint.p2 = localPoint1;
              localQuadPoint.p3 = localPoint2;
              localQuadPoint.p4 = localPoint3;
              paramString.setQuadPoint(i, localQuadPoint);
              i += 1;
              j += 8;
              continue;
            }
          }
          else
          {
            if (str.equals("underline"))
            {
              paramString = Underline.create(localPDFDoc, localRect);
              break label851;
            }
            if (str.equals("crossout"))
            {
              paramString = StrikeOut.create(localPDFDoc, localRect);
              break label851;
            }
            if (!str.equals("squiggly")) {
              break label851;
            }
            paramString = Squiggly.create(localPDFDoc, localRect);
            break label851;
          }
          paramString.setColor(new ColorPt(1.0D, 1.0D, 0.0D), 3);
          paramString.refreshAppearance();
          this.i.getDoc().getPage(paramInt).annotPushBack(paramString);
          localObject2 = paramString.getRect();
          paramString = new pdftron.PDF.Rect();
          ((pdftron.PDF.Rect)localObject2).normalize();
          localObject3 = this.i.convPagePtToClientPt(((pdftron.PDF.Rect)localObject2).getX1(), ((pdftron.PDF.Rect)localObject2).getY2(), paramInt);
          paramString.setX1(localObject3[0]);
          paramString.setY1(localObject3[1]);
          localObject2 = this.i.convPagePtToClientPt(((pdftron.PDF.Rect)localObject2).getX2(), ((pdftron.PDF.Rect)localObject2).getY1(), paramInt);
          paramString.setX2(localObject2[0]);
          paramString.setY2(localObject2[1]);
          ((LinkedList)localObject1).add(paramString);
          break label859;
        }
        this.u = -1;
        this.v = false;
        if (!this.a.isEmpty()) {
          this.a.reset();
        }
        this.i.clearSelection();
      }
      catch (PDFNetException paramString)
      {
        this.i.unlockDoc();
        continue;
      }
      finally
      {
        this.i.unlockDoc();
      }
      paramString = ((LinkedList)localObject1).iterator();
      if (paramString.hasNext())
      {
        localObject1 = (pdftron.PDF.Rect)paramString.next();
        this.i.update((pdftron.PDF.Rect)localObject1);
      }
      else
      {
        this.i.postToolOnCustomEvent(null);
        this.i.waitForRendering();
        return;
        label851:
        j = 0;
        i = 0;
        continue;
        label859:
        paramInt += 1;
      }
    }
  }
  
  public final int getMode()
  {
    return 10;
  }
  
  public final void onCustom(Object paramObject)
  {
    this.j = 1;
  }
  
  public final boolean onDown(MotionEvent paramMotionEvent)
  {
    float f4 = paramMotionEvent.getX() + this.i.getScrollX();
    float f5 = paramMotionEvent.getY() + this.i.getScrollY();
    this.K.x = f4;
    this.K.y = f5;
    float f1 = -1.0F;
    int j = -1;
    int i = 0;
    float f2;
    while (i < 2)
    {
      f2 = f4 - this.w[i].b.x;
      float f3 = f5 - this.w[i].b.y;
      f3 = (float)Math.sqrt(f2 * f2 + f3 * f3);
      int k = j;
      f2 = f1;
      if (f3 < this.P * 4.0F) {
        if (f1 >= 0.0F)
        {
          k = j;
          f2 = f1;
          if (f1 <= f3) {}
        }
        else
        {
          k = i;
          f2 = f3;
        }
      }
      i += 1;
      j = k;
      f1 = f2;
    }
    this.u = j;
    if (this.u >= 0)
    {
      f1 = (this.w[(1 - this.u)].a.x + this.w[(1 - this.u)].b.x) / 2.0F;
      f2 = (this.w[(1 - this.u)].a.y + this.w[(1 - this.u)].b.y) / 2.0F;
      this.x.set(f1, f2);
      b(paramMotionEvent.getX(), paramMotionEvent.getY());
      this.e.left = ((int)this.J.left - (int)Math.ceil(this.C) - 1);
      this.e.top = ((int)this.J.top - 1);
      this.e.right = ((int)Math.ceil(this.J.right) + (int)Math.ceil(this.C) + 1);
      this.e.bottom = ((int)Math.ceil(this.J.bottom) + (int)Math.ceil(1.5F * this.C) + 1);
      this.i.invalidate(this.e);
    }
    return false;
  }
  
  public final void onDraw(Canvas paramCanvas, Matrix paramMatrix)
  {
    if (!this.f) {
      super.onDraw(paramCanvas, paramMatrix);
    }
    float f1;
    float f2;
    float f3;
    float f4;
    if ((!this.f) && ((this.u >= 0) || (this.b)))
    {
      this.f = true;
      f1 = this.K.x - this.J.width() / 4.0F;
      f2 = this.K.y - this.J.height() / 4.0F;
      f3 = this.J.width() / 2.0F;
      f4 = this.J.height() / 2.0F;
      this.G.set(f1, f2, f3 + f1, f4 + f2);
      this.H.set(0.0F, 0.0F, this.F.getWidth(), this.F.getHeight());
      this.I.setRectToRect(this.G, this.H, Matrix.ScaleToFit.CENTER);
      this.E.save();
      this.E.setMatrix(this.I);
      this.i.draw(this.E);
      this.E.restore();
      this.f = false;
    }
    for (int i = 1;; i = 0)
    {
      if (!this.a.isEmpty())
      {
        this.N.setStyle(Paint.Style.FILL);
        this.N.setColor(Color.rgb(0, 100, 175));
        this.N.setAlpha(127);
        paramCanvas.drawPath(this.a, this.N);
        if (this.v)
        {
          this.N.setColor(Color.rgb(255, 128, 0));
          this.N.setStyle(Paint.Style.STROKE);
          this.N.setStrokeWidth(this.O);
          f1 = this.w[0].a.x;
          f2 = this.w[0].a.y;
          f3 = this.w[0].b.x;
          f4 = this.w[0].b.y;
          paramCanvas.drawLine(f1, f2, f3, f4, this.N);
          this.N.setStyle(Paint.Style.FILL);
          paramCanvas.drawCircle(f3, f4 - this.P, this.P, this.N);
          f1 = this.w[1].a.x;
          f2 = this.w[1].a.y;
          f3 = this.w[1].b.x;
          f4 = this.w[1].b.y;
          this.N.setStyle(Paint.Style.STROKE);
          paramCanvas.drawLine(f1, f2, f3, f4, this.N);
          this.N.setStyle(Paint.Style.FILL);
          paramCanvas.drawCircle(f3, this.P + f4, this.P, this.N);
        }
      }
      if (i != 0)
      {
        this.N.setStyle(Paint.Style.STROKE);
        this.N.setColor(-16777216);
        this.N.setStrokeWidth(0.0F);
        this.M.offset(this.J.left, this.J.bottom);
        this.N.setShadowLayer(this.C - 1.0F, 0.0F, this.C / 2.0F, -1778384896);
        boolean bool = this.i.isHardwareAccelerated();
        if (!bool) {
          break label871;
        }
        paramMatrix = new Path();
        paramMatrix.addPath(this.M);
        paramCanvas.drawPath(paramMatrix, this.N);
        this.N.clearShadowLayer();
        this.M.offset(-this.J.left, -this.J.bottom);
        paramCanvas.drawBitmap(this.F, this.J.left + this.A, this.J.top + this.A, null);
        this.N.setStyle(Paint.Style.FILL);
        this.N.setColor(-1);
        this.L.offset(this.J.left, this.J.bottom);
        if (!bool) {
          break label886;
        }
        paramMatrix = new Path();
        paramMatrix.addPath(this.L);
        paramMatrix.setFillType(Path.FillType.EVEN_ODD);
        paramCanvas.drawPath(paramMatrix, this.N);
        label779:
        this.N.setStyle(Paint.Style.STROKE);
        this.N.setColor(-16777216);
        this.N.setStrokeWidth(this.B);
        if (!bool) {
          break label901;
        }
        paramMatrix = new Path();
        paramMatrix.addPath(this.L);
        paramMatrix.setFillType(Path.FillType.EVEN_ODD);
        paramCanvas.drawPath(paramMatrix, this.N);
      }
      for (;;)
      {
        this.L.offset(-this.J.left, -this.J.bottom);
        return;
        label871:
        paramCanvas.drawPath(this.M, this.N);
        break;
        label886:
        paramCanvas.drawPath(this.L, this.N);
        break label779;
        label901:
        paramCanvas.drawPath(this.L, this.N);
      }
    }
  }
  
  public final boolean onFlingStop()
  {
    if (this.i.hasSelection())
    {
      float f1 = this.i.getScrollX();
      float f2 = this.i.getScrollY();
      a(this.o, new RectF(this.c.left - f1, this.c.top - f2, this.c.right - f1, this.c.bottom - f2));
    }
    return false;
  }
  
  public final void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    if (this.i.hasSelection())
    {
      if ((!this.i.isContinuousPagePresentationMode(this.h)) || (this.i.isContinuousPagePresentationMode(this.i.getPagePresentationMode()))) {
        break label83;
      }
      this.i.clearSelection();
      if (e()) {
        d();
      }
      this.a.reset();
      this.j = 1;
    }
    label83:
    do
    {
      return;
      this.a.reset();
      b();
      this.i.invalidate();
    } while (!e());
    d();
    float f1 = this.i.getScrollX();
    float f2 = this.i.getScrollY();
    a(this.o, new RectF(this.c.left - f1, this.c.top - f2, this.c.right - f1, this.c.bottom - f2));
  }
  
  public final boolean onLongPress(MotionEvent paramMotionEvent)
  {
    this.j = 10;
    this.b = true;
    float f1 = this.i.getScrollX();
    float f2 = this.i.getScrollY();
    this.K.x = (f1 + paramMotionEvent.getX());
    this.K.y = (f2 + paramMotionEvent.getY());
    if (this.u < 0)
    {
      this.u = -1;
      this.v = false;
      a(0.0F, 0.0F, paramMotionEvent.getX(), paramMotionEvent.getY(), true);
      this.i.invalidate(this.e);
      if (!this.i.hasSelection()) {
        this.j = 1;
      }
    }
    return false;
  }
  
  public final boolean onMove(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    paramFloat1 = this.i.getScrollX();
    paramFloat2 = this.i.getScrollY();
    this.K.x = (paramMotionEvent2.getX() + paramFloat1);
    this.K.y = (paramMotionEvent2.getY() + paramFloat2);
    if (this.u < 0)
    {
      if (this.b)
      {
        a(0.0F, 0.0F, paramMotionEvent2.getX(), paramMotionEvent2.getY(), true);
        this.i.invalidate(this.e);
        return true;
      }
      f();
      return false;
    }
    a(this.x.x - paramFloat1, this.x.y - paramFloat2, paramMotionEvent2.getX(), paramMotionEvent2.getY(), false);
    this.i.invalidate(this.e);
    return true;
  }
  
  public final boolean onScaleEnd(float paramFloat1, float paramFloat2)
  {
    super.onScaleEnd(paramFloat1, paramFloat2);
    this.g = true;
    return false;
  }
  
  public final boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    super.onSingleTapConfirmed(paramMotionEvent);
    this.j = 1;
    this.i.clearSelection();
    this.u = -1;
    this.v = false;
    if (!this.a.isEmpty())
    {
      this.a.reset();
      this.i.invalidate(this.e);
    }
    return false;
  }
  
  public final boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    if (this.i.hasSelection())
    {
      this.h = this.i.getPagePresentationMode();
      this.v = true;
      if ((this.g) || (paramInt == 1) || (paramInt == 2) || (paramInt == 4) || ((this.b) && (paramInt != 3)))
      {
        if ((this.g) || (paramInt == 2) || (paramInt == 4))
        {
          this.a.reset();
          b();
        }
        float f1 = this.i.getScrollX();
        float f2 = this.i.getScrollY();
        a(this.o, new RectF(this.c.left - f1, this.c.top - f2, this.c.right - f1, this.c.bottom - f2));
      }
    }
    this.g = false;
    this.b = false;
    this.u = -1;
    this.i.invalidate();
    return false;
  }
  
  private final class a
  {
    public PointF a;
    public PointF b;
    
    public a() {}
  }
}
