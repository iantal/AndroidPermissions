package pdftron.PDF.Tools;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.RectF;
import android.net.Uri;
import android.text.InputFilter.LengthFilter;
import android.text.method.PasswordTransformationMethod;
import android.view.MotionEvent;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import pdftron.Common.PDFNetException;
import pdftron.PDF.Action;
import pdftron.PDF.Annot;
import pdftron.PDF.Annot.BorderStyle;
import pdftron.PDF.Annots.Link;
import pdftron.PDF.Annots.Widget;
import pdftron.PDF.ColorPt;
import pdftron.PDF.ColorSpace;
import pdftron.PDF.Field;
import pdftron.PDF.Font;
import pdftron.PDF.GState;
import pdftron.PDF.PDFViewCtrl;
import pdftron.PDF.Rect;
import pdftron.SDF.Obj;

final class k
  extends u
{
  private Field a;
  private EditText b = null;
  private boolean c;
  private double d = 0.0D;
  
  public k(PDFViewCtrl paramPDFViewCtrl)
  {
    super(paramPDFViewCtrl);
  }
  
  private void a(MotionEvent paramMotionEvent)
  {
    int k = 0;
    int i = 0;
    int m = 0;
    int n = (int)(paramMotionEvent.getX() + 0.5D);
    int i1 = (int)(paramMotionEvent.getY() + 0.5D);
    if (this.k != null)
    {
      this.j = 11;
      j = k;
    }
    boolean bool;
    Object localObject;
    for (;;)
    {
      try
      {
        this.i.lockDoc(true);
        j = k;
        if (!a(n, i1)) {
          break label1105;
        }
        j = k;
        this.a = new Widget(this.k).getField();
        i = m;
        j = k;
        if (this.a.isValid())
        {
          i = m;
          j = k;
          if (!this.a.getFlag(0))
          {
            j = k;
            n = this.a.getType();
            if (n != 1) {
              continue;
            }
            j = k;
            paramMotionEvent = this.a;
            j = k;
            if (this.a.getValueAsBool()) {
              continue;
            }
            bool = true;
            j = k;
            paramMotionEvent.setValue(bool);
            j = k;
            localObject = this.a.getUpdateRect();
            j = k;
            paramMotionEvent = this.i.convPagePtToClientPt(((Rect)localObject).getX1(), ((Rect)localObject).getY1(), this.l);
            j = k;
            localObject = this.i.convPagePtToClientPt(((Rect)localObject).getX2(), ((Rect)localObject).getY2(), this.l);
            j = k;
            paramMotionEvent = new Rect(paramMotionEvent[0], paramMotionEvent[1], localObject[0], localObject[1]);
            j = k;
            paramMotionEvent.normalize();
            j = k;
            this.i.update(paramMotionEvent);
            i = 1;
          }
        }
      }
      catch (Exception paramMotionEvent)
      {
        this.i.unlockDoc();
        i = j;
        continue;
        if (n != 4) {
          break label649;
        }
        j = k;
        if (this.a.getFlag(14)) {
          continue;
        }
        i = m;
        j = k;
        if (!this.a.getFlag(17)) {
          continue;
        }
        j = k;
        new g(this.i, this.k, this.l).show();
        i = m;
        continue;
      }
      finally
      {
        this.i.unlockDoc();
      }
      this.i.unlockDoc();
      if (i != 0) {
        this.i.waitForRendering();
      }
      return;
      bool = false;
      continue;
      if (n == 2)
      {
        j = k;
        this.a.setValue(true);
        j = k;
        localObject = this.a.getUpdateRect();
        j = k;
        paramMotionEvent = this.i.convPagePtToClientPt(((Rect)localObject).getX1(), ((Rect)localObject).getY1(), this.l);
        j = k;
        localObject = this.i.convPagePtToClientPt(((Rect)localObject).getX2(), ((Rect)localObject).getY2(), this.l);
        j = k;
        paramMotionEvent = new Rect(paramMotionEvent[0], paramMotionEvent[1], localObject[0], localObject[1]);
        j = k;
        paramMotionEvent.normalize();
        j = k;
        this.i.update(paramMotionEvent);
        i = 1;
      }
      else
      {
        if (n == 0)
        {
          j = k;
          paramMotionEvent = new Link(this.k).getAction();
          if (paramMotionEvent == null) {
            break label1141;
          }
          j = k;
          if (paramMotionEvent.getType() == 5)
          {
            j = k;
            paramMotionEvent = paramMotionEvent.getSDFObj().findObj("URI");
            if (paramMotionEvent != null)
            {
              j = k;
              paramMotionEvent = new Intent("android.intent.action.VIEW", Uri.parse(paramMotionEvent.getAsPDFText()));
              j = k;
              this.i.getContext().startActivity(paramMotionEvent);
            }
            j = k;
            this.i.invalidate();
            i = 1;
            break label1143;
          }
          j = k;
          this.i.executeAction(paramMotionEvent);
          continue;
        }
        label649:
        i = m;
        if (n == 3)
        {
          j = k;
          if (b()) {
            break;
          }
          j = k;
          new h(this.i, this.k, this.l).show();
          i = m;
        }
      }
    }
    i = m;
    int j = k;
    for (;;)
    {
      try
      {
        if (!this.a.isValid()) {
          break;
        }
        j = k;
        i = this.a.getMaxLen();
        j = k;
        this.b = new EditText(this.i.getContext());
        j = k;
        paramMotionEvent = this.k.getBorderStyle();
        j = k;
        localObject = this.k.getSDFObj();
        j = k;
        if (((Obj)localObject).findObj("BS") == null)
        {
          j = k;
          if (((Obj)localObject).findObj("Border") == null)
          {
            j = k;
            paramMotionEvent.setWidth(0.0D);
          }
        }
        j = k;
        if (paramMotionEvent.getStyle() != 2)
        {
          j = k;
          if (paramMotionEvent.getStyle() != 3) {}
        }
        else
        {
          j = k;
          paramMotionEvent.setWidth(paramMotionEvent.getWidth() * 2.0D);
        }
        j = k;
        this.d = paramMotionEvent.getWidth();
        if (i >= 0)
        {
          j = k;
          paramMotionEvent = new InputFilter.LengthFilter(i);
          j = k;
          this.b.setFilters(new InputFilter.LengthFilter[] { paramMotionEvent });
        }
        j = k;
        this.c = this.a.getFlag(7);
        j = k;
        paramMotionEvent = this.b;
        j = k;
        if (this.c) {
          break label1153;
        }
        bool = true;
        j = k;
        paramMotionEvent.setSingleLine(bool);
        j = k;
        i = this.a.getJustification();
        if (i == 0)
        {
          j = k;
          this.b.setGravity(19);
          j = k;
          if (this.a.getFlag(8))
          {
            j = k;
            this.b.setTransformationMethod(new PasswordTransformationMethod());
          }
          j = k;
          paramMotionEvent = this.a.getValueAsString();
          j = k;
          this.b.setText(paramMotionEvent);
          j = k;
          l();
          j = k;
          i();
          j = k;
          j();
          j = k;
          this.i.addView(this.b);
          j = k;
          this.b.requestFocus();
          i = m;
          break;
        }
        if (i == 1)
        {
          j = k;
          this.b.setGravity(17);
          continue;
        }
        if (i != 2) {
          continue;
        }
        j = k;
        this.b.setGravity(21);
        continue;
        label1105:
        j = k;
        if (this.b != null)
        {
          j = k;
          m();
          i = 1;
        }
        j = i;
        this.k = null;
        j = i;
        this.j = 1;
      }
      catch (PDFNetException paramMotionEvent)
      {
        label1141:
        label1143:
        i = m;
      }
      i = 0;
      break;
      break;
      label1153:
      bool = false;
    }
  }
  
  private boolean b()
  {
    try
    {
      float f = 10.0F * (float)this.i.getZoom();
      Object localObject = this.a.getDefaultAppearance();
      double d1;
      double[] arrayOfDouble;
      if (localObject != null)
      {
        f = (float)((GState)localObject).getFontSize();
        if (f > 0.0F) {
          break label183;
        }
        d1 = this.m.left;
        double d2 = this.d;
        double d3 = this.m.bottom;
        double d4 = this.d;
        double d5 = this.m.right;
        double d6 = this.d;
        double d7 = this.m.top;
        double d8 = this.d;
        localObject = this.i.convPagePtToClientPt(d1 + d2, d3 - d4, this.l);
        arrayOfDouble = this.i.convPagePtToClientPt(d5 - d6, d7 + d8, this.l);
      }
      for (f = (float)(Math.abs(localObject[1] - arrayOfDouble[1]) / 2.5D); a(f) > 12.0F; f *= (float)d1)
      {
        return true;
        label183:
        d1 = this.i.getZoom();
      }
      return false;
    }
    catch (Exception localException)
    {
      return false;
    }
  }
  
  private void i()
  {
    try
    {
      float f = 10.0F * (float)this.i.getZoom();
      GState localGState = this.a.getDefaultAppearance();
      if (localGState != null)
      {
        f = (float)localGState.getFontSize();
        if (f > 0.0F) {
          break label185;
        }
      }
      double d1;
      for (f = (float)(this.b.getHeight() / 2.5D);; f *= (float)d1)
      {
        f = a(f);
        this.b.setTextSize(1, f);
        if (this.c) {
          break;
        }
        int i = this.b.getHeight();
        int j = this.b.getLineHeight();
        int k = this.b.getPaddingLeft();
        int m = this.b.getPaddingRight();
        int n = this.b.getPaddingTop();
        int i1 = this.b.getPaddingBottom();
        d1 = i - j - n - i1;
        double d2 = n / (n + i1);
        this.b.setPadding(k / 3, (int)(d1 * d2 + n), m, i1);
        return;
        label185:
        d1 = this.i.getZoom();
      }
      return;
    }
    catch (PDFNetException localPDFNetException) {}
  }
  
  private void j()
  {
    for (;;)
    {
      try
      {
        Object localObject1 = this.a.getDefaultAppearance();
        if (localObject1 != null)
        {
          localObject2 = ((GState)localObject1).getFillColor();
          localObject2 = ((GState)localObject1).getFillColorSpace().convert2RGB((ColorPt)localObject2);
          int i = Color.argb(255, (int)Math.floor(((ColorPt)localObject2).get(0) * 255.0D + 0.5D), (int)Math.floor(((ColorPt)localObject2).get(1) * 255.0D + 0.5D), (int)Math.floor(((ColorPt)localObject2).get(2) * 255.0D + 0.5D));
          this.b.setTextColor(i);
          localObject2 = k();
          if (localObject2 != null)
          {
            i = Color.argb(255, (int)Math.floor(((ColorPt)localObject2).get(0) * 255.0D + 0.5D), (int)Math.floor(((ColorPt)localObject2).get(1) * 255.0D + 0.5D), (int)Math.floor(((ColorPt)localObject2).get(2) * 255.0D + 0.5D));
            this.b.setBackgroundColor(i);
          }
          localObject2 = ((GState)localObject1).getFont();
          if (localObject2 != null)
          {
            localObject1 = ((Font)localObject2).getFamilyName();
            if (localObject1 == null) {
              break label244;
            }
            if (((String)localObject1).length() != 0) {
              break label241;
            }
            break label244;
            String str2 = ((Font)localObject2).getName();
            if (str2 == null) {
              break label251;
            }
            localObject2 = str2;
            if (str2.length() == 0) {
              break label251;
            }
            if (!((String)localObject1).contains("Times")) {
              ((String)localObject2).contains("Times");
            }
          }
        }
        return;
      }
      catch (PDFNetException localPDFNetException)
      {
        return;
      }
      label241:
      continue;
      label244:
      String str1 = "Times";
      continue;
      label251:
      Object localObject2 = "Times New Roman";
    }
  }
  
  private ColorPt k()
  {
    try
    {
      localObject = this.k.getSDFObj().findObj("MK");
      if (localObject == null) {
        break label253;
      }
      localObject = ((Obj)localObject).findObj("BG");
      if ((localObject == null) || (!((Obj)localObject).isArray())) {
        break label253;
      }
      switch ((int)((Obj)localObject).size())
      {
      case 1: 
        localObject = ((Obj)localObject).getAt(0);
        if (!((Obj)localObject).isNumber()) {
          break label253;
        }
        return new ColorPt(((Obj)localObject).getNumber(), ((Obj)localObject).getNumber(), ((Obj)localObject).getNumber());
      }
    }
    catch (Exception localException)
    {
      Object localObject;
      Obj localObj1;
      Obj localObj2;
      Obj localObj3;
      label253:
      for (;;) {}
    }
    localObj1 = ((Obj)localObject).getAt(0);
    localObj2 = ((Obj)localObject).getAt(1);
    localObject = ((Obj)localObject).getAt(2);
    if ((localObj1.isNumber()) && (localObj2.isNumber()) && (((Obj)localObject).isNumber()))
    {
      return new ColorPt(localObj1.getNumber(), localObj2.getNumber(), ((Obj)localObject).getNumber());
      localObj1 = ((Obj)localObject).getAt(0);
      localObj2 = ((Obj)localObject).getAt(1);
      localObj3 = ((Obj)localObject).getAt(2);
      localObject = ((Obj)localObject).getAt(3);
      if ((localObj1.isNumber()) && (localObj2.isNumber()) && (localObj3.isNumber()) && (((Obj)localObject).isNumber()))
      {
        localObject = new ColorPt(localObj1.getNumber(), localObj2.getNumber(), localObj3.getNumber(), ((Obj)localObject).getNumber());
        localObject = ColorSpace.createDeviceCMYK().convert2RGB((ColorPt)localObject);
        return localObject;
      }
    }
    return null;
  }
  
  private void l()
  {
    if (this.b != null)
    {
      double d1 = this.m.left;
      double d2 = this.d;
      double d3 = this.m.bottom;
      double d4 = this.d;
      double d5 = this.m.right;
      double d6 = this.d;
      double d7 = this.m.top;
      double d8 = this.d;
      double[] arrayOfDouble1 = this.i.convPagePtToClientPt(d1 + d2, d3 - d4, this.l);
      double[] arrayOfDouble2 = this.i.convPagePtToClientPt(d5 - d6, d7 + d8, this.l);
      d1 = arrayOfDouble1[0];
      d2 = arrayOfDouble1[1];
      d3 = arrayOfDouble2[0];
      d4 = arrayOfDouble2[1];
      int j = this.i.getScrollX();
      int i = this.i.getScrollY();
      j = (int)(j + d1 + 0.5D);
      i = (int)(i + d2 + 0.5D);
      this.b.layout(j, i, (int)(d3 + j - d1 + 0.5D), (int)(i + d4 - d2 + 0.5D));
    }
  }
  
  private void m()
  {
    try
    {
      this.i.lockDoc(true);
      String str = this.b.getText().toString();
      this.a.setValue(str);
      this.a.eraseAppearance();
      this.a.refreshAppearance();
      this.i.update(this.k, this.l);
      ((InputMethodManager)this.i.getContext().getSystemService("input_method")).hideSoftInputFromWindow(this.b.getWindowToken(), 0);
      this.i.removeView(this.b);
      this.k = null;
      this.j = 1;
      this.i.unlockDoc();
      return;
    }
    catch (Exception localException)
    {
      localException = localException;
      this.k = null;
      this.j = 1;
      this.i.unlockDoc();
      return;
    }
    finally
    {
      localObject = finally;
      this.k = null;
      this.j = 1;
      this.i.unlockDoc();
      throw localObject;
    }
  }
  
  public final int getMode()
  {
    return 11;
  }
  
  public final void onClose()
  {
    super.onClose();
    this.i.removeView(this.b);
  }
  
  public final void onDoubleTapEnd(MotionEvent paramMotionEvent)
  {
    if (this.b != null)
    {
      l();
      i();
      this.b.requestFocus();
    }
  }
  
  public final void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (this.k != null)
    {
      if (this.i.isContinuousPagePresentationMode(this.i.getPagePresentationMode())) {
        break label72;
      }
      if (this.l == this.i.getCurrentPage()) {
        break label60;
      }
      if (this.b != null) {
        m();
      }
      this.k = null;
      this.j = 1;
    }
    label60:
    label72:
    while (this.b == null)
    {
      do
      {
        return;
      } while (this.b == null);
      l();
      return;
    }
    l();
  }
  
  public final boolean onLongPress(MotionEvent paramMotionEvent)
  {
    a(paramMotionEvent);
    return false;
  }
  
  public final void onPageTurning(int paramInt1, int paramInt2)
  {
    this.j = 1;
    if ((this.k != null) && (this.b != null)) {
      m();
    }
  }
  
  public final void onPostSingleTapConfirmed()
  {
    if (this.b == null) {
      this.j = 1;
    }
  }
  
  public final boolean onScale(float paramFloat1, float paramFloat2)
  {
    if (this.b != null) {
      this.b.setVisibility(4);
    }
    return false;
  }
  
  public final boolean onScaleBegin(float paramFloat1, float paramFloat2)
  {
    EditText localEditText = this.b;
    return false;
  }
  
  public final boolean onScaleEnd(float paramFloat1, float paramFloat2)
  {
    if (this.b != null)
    {
      l();
      i();
      this.b.setVisibility(0);
      this.b.requestFocus();
    }
    return false;
  }
  
  public final boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    a(paramMotionEvent);
    return false;
  }
  
  public final boolean onUp(MotionEvent paramMotionEvent, int paramInt)
  {
    if ((this.b != null) && (paramInt == 4)) {
      l();
    }
    return false;
  }
}
