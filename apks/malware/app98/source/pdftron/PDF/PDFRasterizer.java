package pdftron.PDF;

import pdftron.Common.Matrix2D;
import pdftron.Common.PDFNetException;
import pdftron.PDF.OCG.Context;

public class PDFRasterizer
{
  private long a = PDFRasterizerCreate();
  
  public PDFRasterizer()
    throws PDFNetException
  {}
  
  private static native void Destroy(long paramLong);
  
  private static native long PDFRasterizerCreate();
  
  private static native void Rasterize(long paramLong1, long paramLong2, int[] paramArrayOfInt, int paramInt1, int paramInt2, boolean paramBoolean, long paramLong3, long paramLong4, long paramLong5);
  
  private static native void SetAntiAliasing(long paramLong, boolean paramBoolean);
  
  private static native void SetCaching(long paramLong, boolean paramBoolean);
  
  private static native void SetDrawAnnotations(long paramLong, boolean paramBoolean);
  
  private static native void SetGamma(long paramLong, double paramDouble);
  
  private static native void SetHighlightFields(long paramLong, boolean paramBoolean);
  
  private static native void SetImageSmoothing(long paramLong, boolean paramBoolean);
  
  private static native void SetOCGContext(long paramLong1, long paramLong2);
  
  private static native void SetOverprint(long paramLong, int paramInt);
  
  private static native void SetPathHinting(long paramLong, boolean paramBoolean);
  
  private static native void SetPrintMode(long paramLong, boolean paramBoolean);
  
  private static native void SetThinLineAdjustment(long paramLong, boolean paramBoolean1, boolean paramBoolean2);
  
  public void destroy()
    throws PDFNetException
  {
    if (this.a != 0L)
    {
      Destroy(this.a);
      this.a = 0L;
    }
  }
  
  public void rasterize(Page paramPage, int[] paramArrayOfInt, int paramInt1, int paramInt2, boolean paramBoolean, Matrix2D paramMatrix2D, Rect paramRect)
    throws PDFNetException
  {
    long l2 = this.a;
    long l3 = paramPage.a;
    long l4 = paramMatrix2D.__GetHandle();
    if (paramRect == null) {}
    for (long l1 = 0L;; l1 = paramRect.a)
    {
      Rasterize(l2, l3, paramArrayOfInt, paramInt1, paramInt2, paramBoolean, l4, l1, 0L);
      return;
    }
  }
  
  public void setAntiAliasing(boolean paramBoolean)
    throws PDFNetException
  {
    SetAntiAliasing(this.a, paramBoolean);
  }
  
  public void setCaching()
    throws PDFNetException
  {
    SetCaching(this.a, true);
  }
  
  public void setCaching(boolean paramBoolean)
    throws PDFNetException
  {
    SetCaching(this.a, paramBoolean);
  }
  
  public void setDrawAnnotations(boolean paramBoolean)
    throws PDFNetException
  {
    SetDrawAnnotations(this.a, paramBoolean);
  }
  
  public void setGamma(double paramDouble)
    throws PDFNetException
  {
    SetGamma(this.a, paramDouble);
  }
  
  public void setHighlightFields(boolean paramBoolean)
  {
    SetHighlightFields(this.a, paramBoolean);
  }
  
  public void setImageSmoothing()
    throws PDFNetException
  {
    SetImageSmoothing(this.a, true);
  }
  
  public void setImageSmoothing(boolean paramBoolean)
    throws PDFNetException
  {
    SetImageSmoothing(this.a, paramBoolean);
  }
  
  public void setOCGContext(Context paramContext)
    throws PDFNetException
  {
    if (paramContext == null)
    {
      SetOCGContext(this.a, 0L);
      return;
    }
    SetOCGContext(this.a, paramContext.__GetHandle());
  }
  
  public void setOverprint(int paramInt)
    throws PDFNetException
  {
    SetOverprint(this.a, paramInt);
  }
  
  public void setPathHinting(boolean paramBoolean)
    throws PDFNetException
  {
    SetPathHinting(this.a, paramBoolean);
  }
  
  public void setPrintMode(boolean paramBoolean)
    throws PDFNetException
  {
    SetPrintMode(this.a, paramBoolean);
  }
  
  public void setThinLineAdjustment(boolean paramBoolean1, boolean paramBoolean2)
  {
    SetThinLineAdjustment(this.a, paramBoolean1, paramBoolean2);
  }
}
