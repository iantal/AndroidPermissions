package pdftron.SDF;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import pdftron.Common.PDFNetException;
import pdftron.Filters.Filter;
import pdftron.Filters.FilterReader;

public class SDFDoc
  extends Doc
{
  public static final int e_compatibility = 32;
  public static final int e_hex_strings = 4;
  public static final int e_incremental = 1;
  public static final int e_linearized = 16;
  public static final int e_omit_xref = 8;
  public static final int e_remove_unused = 2;
  private Object a;
  
  public SDFDoc()
    throws PDFNetException
  {
    this.impl = SDFDocCreate();
    this.a = null;
  }
  
  SDFDoc(long paramLong, Object paramObject)
  {
    this.impl = paramLong;
    this.a = paramObject;
  }
  
  public SDFDoc(InputStream paramInputStream)
    throws PDFNetException, IOException
  {
    this(paramInputStream, 1048576);
  }
  
  /* Error */
  public SDFDoc(InputStream paramInputStream, int paramInt)
    throws PDFNetException, IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 25	pdftron/SDF/Doc:<init>	()V
    //   4: lconst_0
    //   5: lstore 8
    //   7: lload 8
    //   9: lstore 4
    //   11: aload_1
    //   12: invokevirtual 51	java/io/InputStream:available	()I
    //   15: i2l
    //   16: invokestatic 55	pdftron/SDF/SDFDoc:MemStreamCreateMemFilt	(J)J
    //   19: lstore 6
    //   21: lload 6
    //   23: lstore 4
    //   25: lload 6
    //   27: lstore 8
    //   29: iload_2
    //   30: newarray byte
    //   32: astore 10
    //   34: lload 6
    //   36: lstore 4
    //   38: lload 6
    //   40: lstore 8
    //   42: aload_1
    //   43: aload 10
    //   45: invokevirtual 59	java/io/InputStream:read	([B)I
    //   48: istore_3
    //   49: iload_3
    //   50: iload_2
    //   51: if_icmpne +34 -> 85
    //   54: lload 6
    //   56: lstore 4
    //   58: lload 6
    //   60: lstore 8
    //   62: lload 6
    //   64: aload 10
    //   66: iload_2
    //   67: invokestatic 63	pdftron/SDF/SDFDoc:MemStreamWriteData	(J[BI)V
    //   70: goto -36 -> 34
    //   73: astore_1
    //   74: lload 4
    //   76: aconst_null
    //   77: invokestatic 69	pdftron/Filters/Filter:__Create	(JLpdftron/Filters/Filter;)Lpdftron/Filters/Filter;
    //   80: invokevirtual 72	pdftron/Filters/Filter:destroy	()V
    //   83: aload_1
    //   84: athrow
    //   85: iload_3
    //   86: ifle +19 -> 105
    //   89: lload 6
    //   91: lstore 4
    //   93: lload 6
    //   95: lstore 8
    //   97: lload 6
    //   99: aload 10
    //   101: iload_3
    //   102: invokestatic 63	pdftron/SDF/SDFDoc:MemStreamWriteData	(J[BI)V
    //   105: lload 6
    //   107: lstore 4
    //   109: lload 6
    //   111: lstore 8
    //   113: aload_0
    //   114: lload 6
    //   116: invokestatic 75	pdftron/SDF/SDFDoc:MemStreamCreateDoc	(J)J
    //   119: putfield 33	pdftron/SDF/SDFDoc:impl	J
    //   122: return
    //   123: astore_1
    //   124: lload 8
    //   126: aconst_null
    //   127: invokestatic 69	pdftron/Filters/Filter:__Create	(JLpdftron/Filters/Filter;)Lpdftron/Filters/Filter;
    //   130: invokevirtual 72	pdftron/Filters/Filter:destroy	()V
    //   133: aload_1
    //   134: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	135	0	this	SDFDoc
    //   0	135	1	paramInputStream	InputStream
    //   0	135	2	paramInt	int
    //   48	54	3	i	int
    //   9	99	4	l1	long
    //   19	96	6	l2	long
    //   5	120	8	l3	long
    //   32	68	10	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   11	21	73	pdftron/Common/PDFNetException
    //   29	34	73	pdftron/Common/PDFNetException
    //   42	49	73	pdftron/Common/PDFNetException
    //   62	70	73	pdftron/Common/PDFNetException
    //   97	105	73	pdftron/Common/PDFNetException
    //   113	122	73	pdftron/Common/PDFNetException
    //   11	21	123	java/io/IOException
    //   29	34	123	java/io/IOException
    //   42	49	123	java/io/IOException
    //   62	70	123	java/io/IOException
    //   97	105	123	java/io/IOException
    //   113	122	123	java/io/IOException
  }
  
  public SDFDoc(String paramString)
    throws PDFNetException
  {
    this.impl = SDFDocCreate(paramString);
    this.a = null;
  }
  
  public SDFDoc(Filter paramFilter)
    throws PDFNetException
  {
    paramFilter.__SetRefHandle(this);
    this.impl = SDFDocCreate(paramFilter.__GetHandle());
    this.a = null;
  }
  
  public SDFDoc(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    this.impl = SDFDocCreate(paramArrayOfByte);
  }
  
  private static native void ClearMarks(long paramLong);
  
  private static native long CreateIndirectArray(long paramLong);
  
  private static native long CreateIndirectBool(long paramLong, boolean paramBoolean);
  
  private static native long CreateIndirectDict(long paramLong);
  
  private static native long CreateIndirectName(long paramLong, String paramString);
  
  private static native long CreateIndirectNull(long paramLong);
  
  private static native long CreateIndirectNumber(long paramLong, double paramDouble);
  
  private static native long CreateIndirectStream(long paramLong1, long paramLong2, long paramLong3);
  
  private static native long CreateIndirectStream(long paramLong1, byte[] paramArrayOfByte, long paramLong2);
  
  private static native long CreateIndirectString(long paramLong, String paramString);
  
  private static native long CreateIndirectString(long paramLong, byte[] paramArrayOfByte);
  
  private static native void Destroy(long paramLong);
  
  private static native void EnableDiskCaching(long paramLong, boolean paramBoolean);
  
  private static native String GetFileName(long paramLong);
  
  private static native String GetHeader(long paramLong);
  
  private static native long GetHintStream(long paramLong);
  
  private static native long GetLinearizationDict(long paramLong);
  
  private static native long GetObj(long paramLong1, long paramLong2);
  
  private static native long GetSecurityHandler(long paramLong);
  
  private static native long GetTrailer(long paramLong);
  
  private static native long ImportObj(long paramLong1, long paramLong2, boolean paramBoolean);
  
  private static native long[] ImportObjs(long paramLong, long[] paramArrayOfLong);
  
  private static native boolean InitSecurityHandler(long paramLong, Object paramObject);
  
  private static native boolean InitStdSecurityHandler(long paramLong, String paramString);
  
  private static native boolean IsEncrypted(long paramLong);
  
  private static native boolean IsFullSaveRequired(long paramLong);
  
  private static native boolean IsLinearized(long paramLong);
  
  private static native boolean IsLocked(long paramLong);
  
  private static native boolean IsModified(long paramLong);
  
  private static native void Lock(long paramLong);
  
  private static native long MemStreamCreateDoc(long paramLong);
  
  private static native long MemStreamCreateMemFilt(long paramLong)
    throws PDFNetException;
  
  private static native void MemStreamWriteData(long paramLong, byte[] paramArrayOfByte, int paramInt);
  
  private static native void ReadData(byte[] paramArrayOfByte, int paramInt, long paramLong);
  
  private static native void RemoveSecurity(long paramLong);
  
  private static native long SDFDocCreate();
  
  private static native long SDFDocCreate(long paramLong);
  
  private static native long SDFDocCreate(String paramString);
  
  private static native long SDFDocCreate(byte[] paramArrayOfByte);
  
  private static native void Save(long paramLong1, String paramString1, long paramLong2, ProgressMonitor paramProgressMonitor, String paramString2);
  
  private static native byte[] Save(long paramLong1, long paramLong2, ProgressMonitor paramProgressMonitor, String paramString);
  
  private static native long[] SaveStream(long paramLong1, long paramLong2, ProgressMonitor paramProgressMonitor, String paramString);
  
  private static native void SetSecurityHandler(long paramLong1, long paramLong2);
  
  private static native void Swap(long paramLong1, long paramLong2, long paramLong3);
  
  private static native boolean TryLock(long paramLong, int paramInt);
  
  private static native void Unlock(long paramLong);
  
  private static native long XRefSize(long paramLong);
  
  public static SDFDoc __Create(long paramLong, Object paramObject)
  {
    return new SDFDoc(paramLong, paramObject);
  }
  
  public long __GetHandle()
  {
    return this.impl;
  }
  
  public Object __GetRefHandle()
  {
    return this.a;
  }
  
  public void __SetRef(Object paramObject)
  {
    this.a = paramObject;
  }
  
  public void clearMarks()
    throws PDFNetException
  {
    ClearMarks(this.impl);
  }
  
  public void close()
    throws PDFNetException
  {
    if ((this.impl != 0L) && (this.a == null))
    {
      Destroy(this.impl);
      this.impl = 0L;
    }
  }
  
  public Obj createIndirectArray()
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectArray(this.impl), this);
  }
  
  public Obj createIndirectBool(boolean paramBoolean)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectBool(this.impl, paramBoolean), this);
  }
  
  public Obj createIndirectDict()
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectDict(this.impl), this);
  }
  
  public Obj createIndirectName(String paramString)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectName(this.impl, paramString), this);
  }
  
  public Obj createIndirectNull()
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectNull(this.impl), this);
  }
  
  public Obj createIndirectNumber(double paramDouble)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectNumber(this.impl, paramDouble), this);
  }
  
  public Obj createIndirectStream(FilterReader paramFilterReader)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectStream(this.impl, paramFilterReader.__GetHandle(), 0L), this);
  }
  
  public Obj createIndirectStream(FilterReader paramFilterReader, Filter paramFilter)
    throws PDFNetException
  {
    if (paramFilter != null) {
      paramFilter.__SetRefHandle(this);
    }
    return Obj.__Create(CreateIndirectStream(this.impl, paramFilterReader.__GetHandle(), paramFilter.__GetHandle()), this);
  }
  
  public Obj createIndirectStream(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectStream(this.impl, paramArrayOfByte, 0L), this);
  }
  
  public Obj createIndirectStream(byte[] paramArrayOfByte, Filter paramFilter)
    throws PDFNetException
  {
    if (paramFilter != null) {
      paramFilter.__SetRefHandle(this);
    }
    return Obj.__Create(CreateIndirectStream(this.impl, paramArrayOfByte, paramFilter.__GetHandle()), this);
  }
  
  public Obj createIndirectString(String paramString)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectString(this.impl, paramString), this);
  }
  
  public Obj createIndirectString(byte[] paramArrayOfByte)
    throws PDFNetException
  {
    return Obj.__Create(CreateIndirectString(this.impl, paramArrayOfByte), this);
  }
  
  public void enableDiskCaching(boolean paramBoolean)
  {
    EnableDiskCaching(this.impl, paramBoolean);
  }
  
  protected void finalize()
    throws Throwable
  {
    close();
  }
  
  public String getFileName()
    throws PDFNetException
  {
    return GetFileName(this.impl);
  }
  
  public String getHeader()
    throws PDFNetException
  {
    return GetHeader(this.impl);
  }
  
  public Obj getHintStream()
    throws PDFNetException
  {
    return Obj.__Create(GetHintStream(this.impl), this);
  }
  
  public Obj getLinearizationDict()
    throws PDFNetException
  {
    return Obj.__Create(GetLinearizationDict(this.impl), this);
  }
  
  public Obj getObj(long paramLong)
    throws PDFNetException
  {
    return Obj.__Create(GetObj(this.impl, paramLong), this);
  }
  
  public SecurityHandler getSecurityHandler()
  {
    return SecurityHandler.__Create(GetSecurityHandler(this.impl), this);
  }
  
  public Obj getTrailer()
    throws PDFNetException
  {
    return Obj.__Create(GetTrailer(this.impl), this);
  }
  
  public Obj importObj(Obj paramObj, boolean paramBoolean)
    throws PDFNetException
  {
    return Obj.__Create(ImportObj(this.impl, paramObj.a, paramBoolean), this);
  }
  
  public Obj[] importObjs(Obj[] paramArrayOfObj)
    throws PDFNetException
  {
    int j = 0;
    Object localObject = new long[paramArrayOfObj.length];
    int i = 0;
    while (i < localObject.length)
    {
      localObject[i] = paramArrayOfObj[i].a;
      i += 1;
    }
    paramArrayOfObj = ImportObjs(this.impl, (long[])localObject);
    localObject = new Obj[paramArrayOfObj.length];
    i = j;
    while (i < paramArrayOfObj.length)
    {
      localObject[i] = Obj.__Create(paramArrayOfObj[i], this);
      i += 1;
    }
    return localObject;
  }
  
  public boolean initSecurityHandler()
    throws PDFNetException
  {
    return InitSecurityHandler(this.impl, null);
  }
  
  public boolean initSecurityHandler(Object paramObject)
    throws PDFNetException
  {
    return InitSecurityHandler(this.impl, paramObject);
  }
  
  public boolean initStdSecurityHandler(String paramString)
    throws PDFNetException
  {
    return InitStdSecurityHandler(this.impl, paramString);
  }
  
  public boolean isEncrypted()
    throws PDFNetException
  {
    return IsEncrypted(this.impl);
  }
  
  public boolean isFullSaveRequired()
    throws PDFNetException
  {
    return IsFullSaveRequired(this.impl);
  }
  
  public boolean isLinearized()
    throws PDFNetException
  {
    return IsLinearized(this.impl);
  }
  
  public boolean isLocked()
    throws PDFNetException
  {
    return IsLocked(this.impl);
  }
  
  public boolean isModified()
    throws PDFNetException
  {
    return IsModified(this.impl);
  }
  
  public void lock()
    throws PDFNetException
  {
    Lock(this.impl);
  }
  
  public void removeSecurity()
  {
    RemoveSecurity(this.impl);
  }
  
  public void save(OutputStream paramOutputStream, long paramLong, ProgressMonitor paramProgressMonitor, String paramString)
    throws PDFNetException, IOException
  {
    save(paramOutputStream, paramLong, paramProgressMonitor, paramString, 1048576);
  }
  
  public void save(OutputStream paramOutputStream, long paramLong, ProgressMonitor paramProgressMonitor, String paramString, int paramInt)
    throws PDFNetException, IOException
  {
    paramProgressMonitor = SaveStream(this.impl, paramLong, paramProgressMonitor, paramString);
    paramLong = paramProgressMonitor[0];
    long l1 = paramProgressMonitor[1];
    paramProgressMonitor = new byte[paramInt];
    long l2 = paramInt;
    while (paramLong < l1 - l2)
    {
      ReadData(paramProgressMonitor, paramInt, paramLong);
      paramOutputStream.write(paramProgressMonitor);
      paramLong += paramInt;
    }
    paramInt = (int)(l1 - paramLong);
    if (paramInt > 0)
    {
      ReadData(paramProgressMonitor, paramInt, paramLong);
      paramOutputStream.write(paramProgressMonitor, 0, paramInt);
    }
  }
  
  public void save(String paramString1, long paramLong, ProgressMonitor paramProgressMonitor, String paramString2)
    throws PDFNetException
  {
    Save(this.impl, paramString1, paramLong, paramProgressMonitor, paramString2);
  }
  
  public byte[] save(long paramLong, ProgressMonitor paramProgressMonitor, String paramString)
    throws PDFNetException
  {
    return Save(this.impl, paramLong, paramProgressMonitor, paramString);
  }
  
  public void setSecurityHandler(SecurityHandler paramSecurityHandler)
  {
    paramSecurityHandler.b = this;
    SetSecurityHandler(this.impl, paramSecurityHandler.a);
  }
  
  public void swap(long paramLong1, long paramLong2)
    throws PDFNetException
  {
    Swap(this.impl, paramLong1, paramLong2);
  }
  
  public boolean timedLock(int paramInt)
    throws PDFNetException
  {
    return TryLock(this.impl, paramInt);
  }
  
  public void unlock()
    throws PDFNetException
  {
    Unlock(this.impl);
  }
  
  public long xRefSize()
    throws PDFNetException
  {
    return XRefSize(this.impl);
  }
}
