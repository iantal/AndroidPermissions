package net.sourceforge.zbar.android;

import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.TextView;
import com.google.zxing.client.android.Result;
import com.google.zxing.client.android.ResultHandler;
import com.google.zxing.client.android.ResultHandlerFactory;
import com.qbiki.modules.barcodescanner.BarcodeDescriptionFragment;
import com.qbiki.seattleclouds.App;
import com.qbiki.seattleclouds.FragmentInfo;
import com.qbiki.seattleclouds.SCActivity;
import com.qbiki.util.DialogUtil;
import com.qbiki.util.PlanarYUVLuminanceSource;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import net.sourceforge.zbar.Image;
import net.sourceforge.zbar.ImageScanner;
import net.sourceforge.zbar.Symbol;
import net.sourceforge.zbar.SymbolSet;

public class ZBarScanner
  extends SCActivity
{
  private static final String TAG = "ZBarScanner";
  private static boolean nativeLibsLoaded = true;
  private boolean QRCodeEnabled = true;
  Camera.AutoFocusCallback autoFocusCB = new Camera.AutoFocusCallback()
  {
    public void onAutoFocus(boolean paramAnonymousBoolean, Camera paramAnonymousCamera)
    {
      ZBarScanner.this.autoFocusHandler.postDelayed(ZBarScanner.this.doAutoFocus, 1000L);
    }
  };
  private Handler autoFocusHandler;
  private boolean barcodeEnabled = true;
  private boolean barcodeScanned = false;
  private Runnable doAutoFocus = new Runnable()
  {
    public void run()
    {
      if (ZBarScanner.this.previewing) {
        ZBarScanner.this.mCamera.autoFocus(ZBarScanner.this.autoFocusCB);
      }
    }
  };
  Button doneButton;
  private boolean fastScan = false;
  private Camera mCamera;
  private CameraPreview mPreview;
  private boolean needsBarcodeCrop = false;
  Camera.PreviewCallback previewCb = new Camera.PreviewCallback()
  {
    public void onPreviewFrame(byte[] paramAnonymousArrayOfByte, Camera paramAnonymousCamera)
    {
      paramAnonymousCamera = paramAnonymousCamera.getParameters().getPreviewSize();
      Object localObject1 = new Image(paramAnonymousCamera.width, paramAnonymousCamera.height, "Y800");
      ((Image)localObject1).setData(paramAnonymousArrayOfByte);
      if (ZBarScanner.this.scanner.scanImage((Image)localObject1) != 0)
      {
        localObject1 = ZBarScanner.this.scanner.getResults().iterator();
        for (;;)
        {
          if (((Iterator)localObject1).hasNext())
          {
            Object localObject2 = (Symbol)((Iterator)localObject1).next();
            if ((!ZBarScanner.this.QRCodeEnabled) || (!ZBarScanner.this.barcodeEnabled))
            {
              int i = 0;
              if (((Symbol)localObject2).getType() == 64) {
                i = 1;
              }
              if (((ZBarScanner.this.barcodeEnabled) && (i != 0)) || ((ZBarScanner.this.QRCodeEnabled) && (i == 0))) {}
            }
            else
            {
              Object localObject3 = new Result(((Symbol)localObject2).getData());
              localObject3 = ResultHandlerFactory.makeResultHandler(ZBarScanner.this, (Result)localObject3);
              ZBarScanner.this.scanText.setText(((ResultHandler)localObject3).getDisplayTitle());
              ZBarScanner.access$002(ZBarScanner.this, true);
              ZBarScanner.access$302(ZBarScanner.this, new Intent());
              ZBarScanner.this.resultIntent.putExtra("SCAN_RESULT", ((Symbol)localObject2).getData());
              ZBarScanner.this.resultIntent.putExtra("SCAN_RESULT_FORMAT", "" + ((Symbol)localObject2).getType());
              if (ZBarScanner.this.previewing)
              {
                ZBarScanner.access$202(ZBarScanner.this, false);
                ZBarScanner.this.mCamera.setPreviewCallback(null);
                ZBarScanner.this.mCamera.stopPreview();
              }
              if (ZBarScanner.this.needsBarcodeCrop) {
                localObject3 = ((Symbol)localObject2).getBounds();
              }
              try
              {
                localObject3 = new PlanarYUVLuminanceSource(paramAnonymousArrayOfByte, paramAnonymousCamera.width, paramAnonymousCamera.height, localObject3[0], localObject3[1], localObject3[2], localObject3[3], false);
                ZBarScanner.this.saveBarcodeImage(((PlanarYUVLuminanceSource)localObject3).renderCroppedGreyscaleBitmap());
                ZBarScanner.this.doneButton.setEnabled(true);
                ZBarScanner.this.scanButton.setEnabled(true);
                if (ZBarScanner.this.fastScan)
                {
                  ZBarScanner.this.releaseCamera();
                  localObject3 = new Bundle();
                  ((Bundle)localObject3).putString("RAW_DATA", ((Symbol)localObject2).getData());
                  ((Bundle)localObject3).putString("CROP_PATH", ZBarScanner.this.resultIntent.getExtras().getString("BARCODE_CROP"));
                  localObject2 = App.getPageIntent(new FragmentInfo(BarcodeDescriptionFragment.class.getName(), (Bundle)localObject3), ZBarScanner.this);
                  ZBarScanner.this.startActivityForResult((Intent)localObject2, 1000);
                }
              }
              catch (Exception localException)
              {
                for (;;)
                {
                  Log.e("ZBarCodeScanner", "Crop Exception", localException);
                }
              }
            }
          }
        }
      }
    }
  };
  private boolean previewing = true;
  private Intent resultIntent;
  Button scanButton;
  TextView scanText;
  ImageScanner scanner;
  
  static
  {
    try
    {
      System.loadLibrary("iconv");
    }
    catch (UnsatisfiedLinkError localUnsatisfiedLinkError1)
    {
      for (;;)
      {
        try
        {
          System.loadLibrary("zbarjni");
          return;
        }
        catch (UnsatisfiedLinkError localUnsatisfiedLinkError2)
        {
          Log.w("ZBarScanner", "Could not load native library: zbarjni");
          nativeLibsLoaded = false;
        }
        localUnsatisfiedLinkError1 = localUnsatisfiedLinkError1;
        Log.w("ZBarScanner", "Could not load native library: iconv");
        nativeLibsLoaded = false;
      }
    }
  }
  
  public ZBarScanner() {}
  
  public static Camera getCameraInstance()
  {
    try
    {
      Camera localCamera = Camera.open();
      return localCamera;
    }
    catch (Exception localException)
    {
      Log.e("ZBAR", "Exception", localException);
    }
    return null;
  }
  
  private void releaseCamera()
  {
    if (this.mCamera != null)
    {
      this.previewing = false;
      this.mCamera.setPreviewCallback(null);
      this.mCamera.release();
      this.mCamera = null;
    }
  }
  
  private void saveBarcodeImage(Bitmap paramBitmap)
  {
    String str = App.getAppProtectedStoragePath() + "/Barcodes";
    new File(str).mkdirs();
    Object localObject = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss").format(new Date());
    localObject = (String)localObject + ".png";
    str = str + "/" + (String)localObject;
    try
    {
      localObject = new FileOutputStream(str);
      paramBitmap.compress(Bitmap.CompressFormat.PNG, 90, (OutputStream)localObject);
      this.resultIntent.putExtra("BARCODE_CROP", str);
      return;
    }
    catch (Exception paramBitmap) {}
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (paramInt1 == 1000) {
      finish();
    }
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903240);
    setResult(0);
    if (!getPackageManager().hasSystemFeature("android.hardware.camera")) {
      DialogUtil.showAlert(this, 2131362121, 2131362122, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          ZBarScanner.this.finish();
        }
      });
    }
    if (!nativeLibsLoaded)
    {
      DialogUtil.showAlert(this, 2131361915, 2131362186, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          ZBarScanner.this.finish();
        }
      });
      return;
    }
    setRequestedOrientation(0);
    paramBundle = getIntent().getExtras();
    String str;
    if (paramBundle != null)
    {
      this.needsBarcodeCrop = paramBundle.getBoolean("NEED_BARCODE_CROP");
      str = paramBundle.getString("SCAN_MODE");
      if (str != null)
      {
        if (!str.equalsIgnoreCase("PRODUCT_MODE")) {
          break label332;
        }
        this.QRCodeEnabled = false;
        this.barcodeEnabled = true;
      }
    }
    for (;;)
    {
      this.fastScan = paramBundle.getBoolean("FAST_SCAN");
      this.autoFocusHandler = new Handler();
      this.mCamera = getCameraInstance();
      this.scanner = new ImageScanner();
      this.scanner.setConfig(0, 256, 3);
      this.scanner.setConfig(0, 257, 3);
      this.mPreview = new CameraPreview(this, this.mCamera, this.previewCb, this.autoFocusCB);
      ((FrameLayout)findViewById(2131100263)).addView(this.mPreview);
      this.scanText = ((TextView)findViewById(2131100264));
      this.scanButton = ((Button)findViewById(2131100265));
      this.scanButton.setEnabled(false);
      this.scanButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if (ZBarScanner.this.barcodeScanned)
          {
            ZBarScanner.access$002(ZBarScanner.this, false);
            ZBarScanner.this.scanText.setText(2131362119);
            ZBarScanner.this.mCamera.setPreviewCallback(ZBarScanner.this.previewCb);
            ZBarScanner.this.mCamera.startPreview();
            ZBarScanner.access$202(ZBarScanner.this, true);
            ZBarScanner.this.mCamera.autoFocus(ZBarScanner.this.autoFocusCB);
            ZBarScanner.this.scanButton.setEnabled(false);
          }
        }
      });
      this.doneButton = ((Button)findViewById(2131099926));
      if (this.fastScan) {
        break;
      }
      this.doneButton.setEnabled(false);
      this.doneButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          ZBarScanner.this.setResult(-1, ZBarScanner.this.resultIntent);
          ZBarScanner.this.finish();
        }
      });
      return;
      label332:
      if (str.equalsIgnoreCase("QR_CODE_MODE"))
      {
        this.QRCodeEnabled = true;
        this.barcodeEnabled = false;
      }
    }
    this.needsBarcodeCrop = true;
    this.doneButton.setVisibility(8);
    this.scanButton.setVisibility(8);
  }
  
  public void onPause()
  {
    super.onPause();
    releaseCamera();
  }
}
