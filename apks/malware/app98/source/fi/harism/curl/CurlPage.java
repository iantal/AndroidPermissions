package fi.harism.curl;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.RectF;

public class CurlPage
{
  public static final int SIDE_BACK = 2;
  public static final int SIDE_BOTH = 3;
  public static final int SIDE_FRONT = 1;
  private int mColorBack;
  private int mColorFront;
  private Bitmap mTextureBack;
  private Bitmap mTextureFront;
  private boolean mTexturesChanged;
  
  public CurlPage()
  {
    reset();
  }
  
  private int getNextHighestPO2(int paramInt)
  {
    paramInt -= 1;
    paramInt |= paramInt >> 1;
    paramInt |= paramInt >> 2;
    paramInt |= paramInt >> 4;
    paramInt |= paramInt >> 8;
    paramInt |= paramInt >> 16;
    return (paramInt | paramInt >> 32) + 1;
  }
  
  private Bitmap getTexture(Bitmap paramBitmap, RectF paramRectF)
  {
    int i = paramBitmap.getWidth();
    int j = paramBitmap.getHeight();
    int k = getNextHighestPO2(i);
    int m = getNextHighestPO2(j);
    Bitmap localBitmap = Bitmap.createBitmap(k, m, paramBitmap.getConfig());
    new Canvas(localBitmap).drawBitmap(paramBitmap, 0.0F, 0.0F, null);
    paramRectF.set(0.0F, 0.0F, i / k, j / m);
    return localBitmap;
  }
  
  public int getColor(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return this.mColorBack;
    }
    return this.mColorFront;
  }
  
  public Bitmap getTexture(RectF paramRectF, int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return getTexture(this.mTextureBack, paramRectF);
    }
    return getTexture(this.mTextureFront, paramRectF);
  }
  
  public boolean getTexturesChanged()
  {
    return this.mTexturesChanged;
  }
  
  public boolean hasBackTexture()
  {
    return !this.mTextureFront.equals(this.mTextureBack);
  }
  
  public void recycle()
  {
    if (this.mTextureFront != null) {
      this.mTextureFront.recycle();
    }
    this.mTextureFront = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);
    this.mTextureFront.eraseColor(this.mColorFront);
    if (this.mTextureBack != null) {
      this.mTextureBack.recycle();
    }
    this.mTextureBack = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);
    this.mTextureBack.eraseColor(this.mColorBack);
    this.mTexturesChanged = false;
  }
  
  public void reset()
  {
    this.mColorBack = -1;
    this.mColorFront = -1;
    recycle();
  }
  
  public void setColor(int paramInt1, int paramInt2)
  {
    switch (paramInt2)
    {
    default: 
      this.mColorBack = paramInt1;
      this.mColorFront = paramInt1;
      return;
    case 1: 
      this.mColorFront = paramInt1;
      return;
    }
    this.mColorBack = paramInt1;
  }
  
  public void setTexture(Bitmap paramBitmap, int paramInt)
  {
    Bitmap localBitmap = paramBitmap;
    if (paramBitmap == null)
    {
      localBitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);
      if (paramInt == 2) {
        localBitmap.eraseColor(this.mColorBack);
      }
    }
    else
    {
      switch (paramInt)
      {
      }
    }
    for (;;)
    {
      this.mTexturesChanged = true;
      return;
      localBitmap.eraseColor(this.mColorFront);
      break;
      if (this.mTextureFront != null) {
        this.mTextureFront.recycle();
      }
      this.mTextureFront = localBitmap;
      continue;
      if (this.mTextureBack != null) {
        this.mTextureBack.recycle();
      }
      this.mTextureBack = localBitmap;
      continue;
      if (this.mTextureFront != null) {
        this.mTextureFront.recycle();
      }
      if (this.mTextureBack != null) {
        this.mTextureBack.recycle();
      }
      this.mTextureBack = localBitmap;
      this.mTextureFront = localBitmap;
    }
  }
}
