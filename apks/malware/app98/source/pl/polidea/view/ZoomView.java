package pl.polidea.view;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.view.MotionEvent;
import android.view.View;
import android.widget.FrameLayout;

public class ZoomView
  extends FrameLayout
{
  private Bitmap ch;
  private long lastTapTime;
  private float lastd;
  private float lastdx1;
  private float lastdx2;
  private float lastdy1;
  private float lastdy2;
  ZoomViewListener listener;
  private final Matrix m = new Matrix();
  float maxZoom = 2.0F;
  private String miniMapCaption;
  private int miniMapCaptionColor = -1;
  private float miniMapCaptionSize = 10.0F;
  private int miniMapColor = -16777216;
  private int miniMapHeight = -1;
  private final Paint p = new Paint();
  private boolean pinching;
  private boolean scrolling;
  private boolean showMinimap = false;
  float smoothZoom = 1.0F;
  float smoothZoomX;
  float smoothZoomY;
  private float startd;
  private float touchLastX;
  private float touchLastY;
  private float touchStartX;
  private float touchStartY;
  private Rect visibleRect = new Rect();
  float zoom = 1.0F;
  float zoomX;
  float zoomY;
  private boolean zoomed;
  
  public ZoomView(Context paramContext)
  {
    super(paramContext);
  }
  
  private float bias(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f = paramFloat2;
    if (Math.abs(paramFloat2 - paramFloat1) >= paramFloat3) {
      f = paramFloat1 + Math.signum(paramFloat2 - paramFloat1) * paramFloat3;
    }
    return f;
  }
  
  private float clamp(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return Math.max(paramFloat1, Math.min(paramFloat2, paramFloat3));
  }
  
  private float lerp(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return (paramFloat2 - paramFloat1) * paramFloat3 + paramFloat1;
  }
  
  private void processDoubleTouchEvent(MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX(0);
    float f2 = this.lastdx1;
    this.lastdx1 = f1;
    float f3 = paramMotionEvent.getY(0);
    float f4 = this.lastdy1;
    this.lastdy1 = f3;
    float f5 = paramMotionEvent.getX(1);
    float f6 = this.lastdx2;
    this.lastdx2 = f5;
    float f7 = paramMotionEvent.getY(1);
    float f8 = this.lastdy2;
    this.lastdy2 = f7;
    float f9 = (float)Math.hypot(f5 - f1, f7 - f3);
    float f10 = this.lastd;
    this.lastd = f9;
    float f11 = Math.abs(f9 - this.startd);
    Math.atan2(f7 - f3, f5 - f1);
    switch (paramMotionEvent.getAction())
    {
    case 1: 
    default: 
      this.pinching = false;
    }
    for (;;)
    {
      paramMotionEvent.setAction(3);
      super.dispatchTouchEvent(paramMotionEvent);
      return;
      this.startd = f9;
      this.pinching = false;
      continue;
      if ((this.pinching) || (f11 > 30.0F))
      {
        this.pinching = true;
        smoothZoomTo(Math.max(1.0F, this.zoom * f9 / (f9 - (f9 - f10))), this.zoomX - 0.5F * (f1 - f2 + (f5 - f6)) / this.zoom, this.zoomY - 0.5F * (f3 - f4 + (f7 - f8)) / this.zoom);
      }
    }
  }
  
  private void processSingleTouchEvent(MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    float f3 = this.miniMapHeight * getWidth() / getHeight();
    float f4 = this.miniMapHeight;
    if ((f1 >= 10.0F) && (f1 <= 10.0F + f3) && (f2 >= 10.0F) && (f2 <= 10.0F + f4)) {}
    for (int i = 1; (this.showMinimap) && (this.smoothZoom > 1.0F) && (i != 0); i = 0)
    {
      processSingleTouchOnMinimap(paramMotionEvent);
      return;
    }
    processSingleTouchOutsideMinimap(paramMotionEvent);
  }
  
  private void processSingleTouchOnMinimap(MotionEvent paramMotionEvent)
  {
    float f3 = paramMotionEvent.getX();
    float f1 = paramMotionEvent.getY();
    float f4 = this.miniMapHeight * getWidth() / getHeight();
    float f2 = this.miniMapHeight;
    f3 = (f3 - 10.0F) / f4;
    f4 = getWidth();
    f1 = (f1 - 10.0F) / f2;
    f2 = getHeight();
    smoothZoomTo(this.smoothZoom, f3 * f4, f1 * f2);
  }
  
  private void processSingleTouchOutsideMinimap(MotionEvent paramMotionEvent)
  {
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    float f3 = this.touchStartX;
    float f4 = this.touchStartY;
    f3 = (float)Math.hypot(f1 - f3, f2 - f4);
    f4 = this.touchLastX;
    float f5 = this.touchLastY;
    this.touchLastX = f1;
    this.touchLastY = f2;
    switch (paramMotionEvent.getAction())
    {
    }
    for (;;)
    {
      paramMotionEvent.setLocation(this.zoomX + (f1 - 0.5F * getWidth()) / this.zoom, this.zoomY + (f2 - 0.5F * getHeight()) / this.zoom);
      paramMotionEvent.getX();
      paramMotionEvent.getY();
      super.dispatchTouchEvent(paramMotionEvent);
      return;
      this.touchStartX = f1;
      this.touchStartY = f2;
      this.touchLastX = f1;
      this.touchLastY = f2;
      this.scrolling = false;
      continue;
      if ((this.scrolling) || ((this.smoothZoom > 1.0F) && (f3 > 30.0F)))
      {
        if (!this.scrolling)
        {
          this.scrolling = true;
          paramMotionEvent.setAction(3);
          super.dispatchTouchEvent(paramMotionEvent);
        }
        this.smoothZoomX -= (f1 - f4) / this.zoom;
        this.smoothZoomY -= (f2 - f5) / this.zoom;
        return;
        if (f3 < 30.0F)
        {
          if (System.currentTimeMillis() - this.lastTapTime < 500L)
          {
            if (this.smoothZoom == 1.0F) {
              smoothZoomTo(this.maxZoom, f1, f2);
            }
            for (;;)
            {
              this.lastTapTime = 0L;
              paramMotionEvent.setAction(3);
              super.dispatchTouchEvent(paramMotionEvent);
              return;
              smoothZoomTo(1.0F, getWidth() / 2.0F, getHeight() / 2.0F);
            }
          }
          this.lastTapTime = System.currentTimeMillis();
          performClick();
        }
      }
    }
  }
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    this.zoom = lerp(bias(this.zoom, this.smoothZoom, 0.05F), this.smoothZoom, 0.2F);
    this.smoothZoomX = clamp(0.5F * getWidth() / this.smoothZoom, this.smoothZoomX, getWidth() - 0.5F * getWidth() / this.smoothZoom);
    this.smoothZoomY = clamp(0.5F * getHeight() / this.smoothZoom, this.smoothZoomY, getHeight() - 0.5F * getHeight() / this.smoothZoom);
    this.zoomX = lerp(bias(this.zoomX, this.smoothZoomX, 0.1F), this.smoothZoomX, 0.35F);
    this.zoomY = lerp(bias(this.zoomY, this.smoothZoomY, 0.1F), this.smoothZoomY, 0.35F);
    if ((this.zoom != this.smoothZoom) && (this.listener != null))
    {
      this.listener.onZooming(this.zoom, this.zoomX, this.zoomY);
      if ((Math.abs(this.zoom - this.smoothZoom) <= 1.0E-7F) && (Math.abs(this.zoomX - this.smoothZoomX) <= 1.0E-7F) && (Math.abs(this.zoomY - this.smoothZoomY) <= 1.0E-7F)) {
        break label320;
      }
    }
    label320:
    for (int i = 1;; i = 0)
    {
      if (getChildCount() != 0) {
        break label326;
      }
      return;
      if ((!this.zoomed) || (this.listener == null)) {
        break;
      }
      this.zoomed = false;
      this.listener.onZoomEnded(this.zoom, this.zoomX, this.zoomY);
      break;
    }
    label326:
    this.m.setTranslate(0.5F * getWidth(), 0.5F * getHeight());
    this.m.preScale(this.zoom, this.zoom);
    this.m.preTranslate(-clamp(0.5F * getWidth() / this.zoom, this.zoomX, getWidth() - 0.5F * getWidth() / this.zoom), -clamp(0.5F * getHeight() / this.zoom, this.zoomY, getHeight() - 0.5F * getHeight() / this.zoom));
    View localView = getChildAt(0);
    this.m.preTranslate(localView.getLeft(), localView.getTop());
    if ((i != 0) && (this.ch == null) && (isAnimationCacheEnabled()))
    {
      localView.setDrawingCacheEnabled(true);
      this.ch = localView.getDrawingCache();
    }
    if ((i != 0) && (isAnimationCacheEnabled()) && (this.ch != null))
    {
      this.p.setColor(-1);
      paramCanvas.drawBitmap(this.ch, this.m, this.p);
    }
    for (;;)
    {
      if (this.showMinimap)
      {
        if (this.miniMapHeight < 0) {
          this.miniMapHeight = (getHeight() / 4);
        }
        paramCanvas.translate(10.0F, 10.0F);
        this.p.setColor(0x80000000 | 0xFFFFFF & this.miniMapColor);
        float f1 = this.miniMapHeight * getWidth() / getHeight();
        float f2 = this.miniMapHeight;
        paramCanvas.drawRect(0.0F, 0.0F, f1, f2, this.p);
        if ((this.miniMapCaption != null) && (this.miniMapCaption.length() > 0))
        {
          this.p.setTextSize(this.miniMapCaptionSize);
          this.p.setColor(this.miniMapCaptionColor);
          this.p.setAntiAlias(true);
          paramCanvas.drawText(this.miniMapCaption, 10.0F, 10.0F + this.miniMapCaptionSize, this.p);
          this.p.setAntiAlias(false);
        }
        this.p.setColor(0x80000000 | 0xFFFFFF & this.miniMapColor);
        float f3 = this.zoomX * f1 / getWidth();
        float f4 = this.zoomY * f2 / getHeight();
        paramCanvas.drawRect(f3 - 0.5F * f1 / this.zoom, f4 - 0.5F * f2 / this.zoom, f3 + 0.5F * f1 / this.zoom, f4 + 0.5F * f2 / this.zoom, this.p);
        paramCanvas.translate(-10.0F, -10.0F);
      }
      getRootView().invalidate();
      invalidate();
      return;
      this.ch = null;
      paramCanvas.save();
      paramCanvas.concat(this.m);
      Rect localRect = paramCanvas.getClipBounds();
      if (!this.visibleRect.equals(localRect))
      {
        this.visibleRect = localRect;
        if (this.listener != null) {
          this.listener.onVisibleAreaChanged(this.visibleRect, this.zoom);
        }
      }
      localView.draw(paramCanvas);
      paramCanvas.restore();
    }
  }
  
  public boolean dispatchTouchEvent(MotionEvent paramMotionEvent)
  {
    if (paramMotionEvent.getPointerCount() == 1) {
      processSingleTouchEvent(paramMotionEvent);
    }
    if (paramMotionEvent.getPointerCount() == 2) {
      processDoubleTouchEvent(paramMotionEvent);
    }
    getRootView().invalidate();
    invalidate();
    return true;
  }
  
  public ZoomViewListener getListener()
  {
    return this.listener;
  }
  
  public float getMaxZoom()
  {
    return this.maxZoom;
  }
  
  public String getMiniMapCaption()
  {
    return this.miniMapCaption;
  }
  
  public int getMiniMapCaptionColor()
  {
    return this.miniMapCaptionColor;
  }
  
  public float getMiniMapCaptionSize()
  {
    return this.miniMapCaptionSize;
  }
  
  public int getMiniMapColor()
  {
    return this.miniMapColor;
  }
  
  public int getMiniMapHeight()
  {
    return this.miniMapHeight;
  }
  
  public float getZoom()
  {
    return this.zoom;
  }
  
  public float getZoomFocusX()
  {
    return this.zoomX * this.zoom;
  }
  
  public float getZoomFocusY()
  {
    return this.zoomY * this.zoom;
  }
  
  public boolean isMiniMapEnabled()
  {
    return this.showMinimap;
  }
  
  public void setListner(ZoomViewListener paramZoomViewListener)
  {
    this.listener = paramZoomViewListener;
  }
  
  public void setMaxZoom(float paramFloat)
  {
    if (paramFloat < 1.0F) {
      return;
    }
    this.maxZoom = paramFloat;
  }
  
  public void setMiniMapCaption(String paramString)
  {
    this.miniMapCaption = paramString;
  }
  
  public void setMiniMapCaptionColor(int paramInt)
  {
    this.miniMapCaptionColor = paramInt;
  }
  
  public void setMiniMapCaptionSize(float paramFloat)
  {
    this.miniMapCaptionSize = paramFloat;
  }
  
  public void setMiniMapColor(int paramInt)
  {
    this.miniMapColor = paramInt;
  }
  
  public void setMiniMapEnabled(boolean paramBoolean)
  {
    this.showMinimap = paramBoolean;
  }
  
  public void setMiniMapHeight(int paramInt)
  {
    if (paramInt < 0) {
      return;
    }
    this.miniMapHeight = paramInt;
  }
  
  public void smoothZoomTo(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    this.smoothZoom = clamp(1.0F, paramFloat1, this.maxZoom);
    this.smoothZoomX = paramFloat2;
    this.smoothZoomY = paramFloat3;
    if (this.listener != null)
    {
      this.zoomed = true;
      this.listener.onZoomStarted(this.smoothZoom, paramFloat2, paramFloat3);
    }
  }
  
  public void zoomTo(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    this.zoom = Math.min(paramFloat1, this.maxZoom);
    this.zoomX = paramFloat2;
    this.zoomY = paramFloat3;
    smoothZoomTo(this.zoom, paramFloat2, paramFloat3);
  }
  
  public static abstract interface ZoomViewListener
  {
    public abstract void onVisibleAreaChanged(Rect paramRect, float paramFloat);
    
    public abstract void onZoomEnded(float paramFloat1, float paramFloat2, float paramFloat3);
    
    public abstract void onZoomStarted(float paramFloat1, float paramFloat2, float paramFloat3);
    
    public abstract void onZooming(float paramFloat1, float paramFloat2, float paramFloat3);
  }
}
