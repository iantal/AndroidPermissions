package org.jsoup.helper;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class DataUtil
{
  private static final int bufferSize = 131072;
  private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)");
  static final String defaultCharset = "UTF-8";
  
  private DataUtil() {}
  
  static String getCharsetFromContentType(String paramString)
  {
    if (paramString == null) {}
    do
    {
      return null;
      paramString = charsetPattern.matcher(paramString);
    } while (!paramString.find());
    return paramString.group(1).trim().toUpperCase();
  }
  
  public static Document load(File paramFile, String paramString1, String paramString2)
    throws IOException
  {
    Object localObject = null;
    try
    {
      paramFile = new FileInputStream(paramFile);
      if (paramFile == null) {
        break label42;
      }
    }
    finally
    {
      try
      {
        paramString1 = parseByteData(readToByteBuffer(paramFile), paramString1, paramString2);
        if (paramFile != null) {
          paramFile.close();
        }
        return paramString1;
      }
      finally {}
      paramString1 = finally;
      paramFile = localObject;
    }
    paramFile.close();
    label42:
    throw paramString1;
  }
  
  public static Document load(InputStream paramInputStream, String paramString1, String paramString2)
    throws IOException
  {
    return parseByteData(readToByteBuffer(paramInputStream), paramString1, paramString2);
  }
  
  static Document parseByteData(ByteBuffer paramByteBuffer, String paramString1, String paramString2)
  {
    Object localObject1 = null;
    Object localObject2;
    String str1;
    Object localObject3;
    if (paramString1 == null)
    {
      String str2 = Charset.forName("UTF-8").decode(paramByteBuffer).toString();
      Document localDocument = Jsoup.parse(str2, paramString2);
      localObject2 = localDocument.select("meta[http-equiv=content-type], meta[charset]").first();
      localObject1 = localDocument;
      str1 = str2;
      localObject3 = paramString1;
      if (localObject2 != null)
      {
        if (!((Element)localObject2).hasAttr("http-equiv")) {
          break label180;
        }
        localObject2 = getCharsetFromContentType(((Element)localObject2).attr("content"));
        localObject1 = localDocument;
        str1 = str2;
        localObject3 = paramString1;
        if (localObject2 != null)
        {
          localObject1 = localDocument;
          str1 = str2;
          localObject3 = paramString1;
          if (((String)localObject2).length() != 0)
          {
            localObject1 = localDocument;
            str1 = str2;
            localObject3 = paramString1;
            if (!((String)localObject2).equals("UTF-8"))
            {
              localObject3 = localObject2;
              paramByteBuffer.rewind();
              str1 = Charset.forName((String)localObject2).decode(paramByteBuffer).toString();
              localObject1 = null;
            }
          }
        }
      }
    }
    for (;;)
    {
      paramByteBuffer = localObject1;
      if (localObject1 == null)
      {
        paramByteBuffer = Jsoup.parse(str1, paramString2);
        paramByteBuffer.outputSettings().charset((String)localObject3);
      }
      return paramByteBuffer;
      label180:
      localObject2 = ((Element)localObject2).attr("charset");
      break;
      Validate.notEmpty(paramString1, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
      str1 = Charset.forName(paramString1).decode(paramByteBuffer).toString();
      localObject3 = paramString1;
    }
  }
  
  static ByteBuffer readToByteBuffer(InputStream paramInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[131072];
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream(131072);
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        return ByteBuffer.wrap(localByteArrayOutputStream.toByteArray());
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, i);
    }
  }
}
