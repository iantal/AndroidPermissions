package org.jsoup.helper;

import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.jsoup.Connection;
import org.jsoup.Connection.Base;
import org.jsoup.Connection.KeyVal;
import org.jsoup.Connection.Method;
import org.jsoup.Connection.Request;
import org.jsoup.Connection.Response;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.parser.TokenQueue;

public class HttpConnection
  implements Connection
{
  private Connection.Request req = new Request(null);
  private Connection.Response res = new Response();
  
  private HttpConnection() {}
  
  public static Connection connect(String paramString)
  {
    HttpConnection localHttpConnection = new HttpConnection();
    localHttpConnection.url(paramString);
    return localHttpConnection;
  }
  
  public static Connection connect(URL paramURL)
  {
    HttpConnection localHttpConnection = new HttpConnection();
    localHttpConnection.url(paramURL);
    return localHttpConnection;
  }
  
  public Connection cookie(String paramString1, String paramString2)
  {
    this.req.cookie(paramString1, paramString2);
    return this;
  }
  
  public Connection data(String paramString1, String paramString2)
  {
    this.req.data(KeyVal.create(paramString1, paramString2));
    return this;
  }
  
  public Connection data(Map<String, String> paramMap)
  {
    Validate.notNull(paramMap, "Data map must not be null");
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      this.req.data(KeyVal.create((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    return this;
  }
  
  public Connection data(String... paramVarArgs)
  {
    Validate.notNull(paramVarArgs, "Data key value pairs must not be null");
    if (paramVarArgs.length % 2 == 0) {}
    for (boolean bool = true;; bool = false)
    {
      Validate.isTrue(bool, "Must supply an even number of key value pairs");
      int i = 0;
      while (i < paramVarArgs.length)
      {
        String str1 = paramVarArgs[i];
        String str2 = paramVarArgs[(i + 1)];
        Validate.notEmpty(str1, "Data key must not be empty");
        Validate.notNull(str2, "Data value must not be null");
        this.req.data(KeyVal.create(str1, str2));
        i += 2;
      }
    }
    return this;
  }
  
  public Connection.Response execute()
    throws IOException
  {
    this.res = Response.execute(this.req);
    return this.res;
  }
  
  public Connection followRedirects(boolean paramBoolean)
  {
    this.req.followRedirects(paramBoolean);
    return this;
  }
  
  public Document get()
    throws IOException
  {
    this.req.method(Connection.Method.GET);
    execute();
    return this.res.parse();
  }
  
  public Connection header(String paramString1, String paramString2)
  {
    this.req.header(paramString1, paramString2);
    return this;
  }
  
  public Connection ignoreContentType(boolean paramBoolean)
  {
    this.req.ignoreContentType(paramBoolean);
    return this;
  }
  
  public Connection ignoreHttpErrors(boolean paramBoolean)
  {
    this.req.ignoreHttpErrors(paramBoolean);
    return this;
  }
  
  public Connection method(Connection.Method paramMethod)
  {
    this.req.method(paramMethod);
    return this;
  }
  
  public Document post()
    throws IOException
  {
    this.req.method(Connection.Method.POST);
    execute();
    return this.res.parse();
  }
  
  public Connection referrer(String paramString)
  {
    Validate.notNull(paramString, "Referrer must not be null");
    this.req.header("Referer", paramString);
    return this;
  }
  
  public Connection.Request request()
  {
    return this.req;
  }
  
  public Connection request(Connection.Request paramRequest)
  {
    this.req = paramRequest;
    return this;
  }
  
  public Connection.Response response()
  {
    return this.res;
  }
  
  public Connection response(Connection.Response paramResponse)
  {
    this.res = paramResponse;
    return this;
  }
  
  public Connection timeout(int paramInt)
  {
    this.req.timeout(paramInt);
    return this;
  }
  
  public Connection url(String paramString)
  {
    Validate.notEmpty(paramString, "Must supply a valid URL");
    try
    {
      this.req.url(new URL(paramString));
      return this;
    }
    catch (MalformedURLException localMalformedURLException)
    {
      throw new IllegalArgumentException("Malformed URL: " + paramString, localMalformedURLException);
    }
  }
  
  public Connection url(URL paramURL)
  {
    this.req.url(paramURL);
    return this;
  }
  
  public Connection userAgent(String paramString)
  {
    Validate.notNull(paramString, "User agent must not be null");
    this.req.header("User-Agent", paramString);
    return this;
  }
  
  private static abstract class Base<T extends Connection.Base>
    implements Connection.Base<T>
  {
    Map<String, String> cookies = new LinkedHashMap();
    Map<String, String> headers = new LinkedHashMap();
    Connection.Method method;
    URL url;
    
    private Base() {}
    
    private String getHeaderCaseInsensitive(String paramString)
    {
      Validate.notNull(paramString, "Header name must not be null");
      Object localObject2 = (String)this.headers.get(paramString);
      Object localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = (String)this.headers.get(paramString.toLowerCase());
      }
      localObject2 = localObject1;
      if (localObject1 == null)
      {
        paramString = scanHeaders(paramString);
        localObject2 = localObject1;
        if (paramString != null) {
          localObject2 = (String)paramString.getValue();
        }
      }
      return localObject2;
    }
    
    private Map.Entry<String, String> scanHeaders(String paramString)
    {
      paramString = paramString.toLowerCase();
      Iterator localIterator = this.headers.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        if (((String)localEntry.getKey()).toLowerCase().equals(paramString)) {
          return localEntry;
        }
      }
      return null;
    }
    
    public String cookie(String paramString)
    {
      Validate.notNull(paramString, "Cookie name must not be null");
      return (String)this.cookies.get(paramString);
    }
    
    public T cookie(String paramString1, String paramString2)
    {
      Validate.notEmpty(paramString1, "Cookie name must not be empty");
      Validate.notNull(paramString2, "Cookie value must not be null");
      this.cookies.put(paramString1, paramString2);
      return this;
    }
    
    public Map<String, String> cookies()
    {
      return this.cookies;
    }
    
    public boolean hasCookie(String paramString)
    {
      Validate.notEmpty("Cookie name must not be empty");
      return this.cookies.containsKey(paramString);
    }
    
    public boolean hasHeader(String paramString)
    {
      Validate.notEmpty(paramString, "Header name must not be empty");
      return getHeaderCaseInsensitive(paramString) != null;
    }
    
    public String header(String paramString)
    {
      Validate.notNull(paramString, "Header name must not be null");
      return getHeaderCaseInsensitive(paramString);
    }
    
    public T header(String paramString1, String paramString2)
    {
      Validate.notEmpty(paramString1, "Header name must not be empty");
      Validate.notNull(paramString2, "Header value must not be null");
      removeHeader(paramString1);
      this.headers.put(paramString1, paramString2);
      return this;
    }
    
    public Map<String, String> headers()
    {
      return this.headers;
    }
    
    public T method(Connection.Method paramMethod)
    {
      Validate.notNull(paramMethod, "Method must not be null");
      this.method = paramMethod;
      return this;
    }
    
    public Connection.Method method()
    {
      return this.method;
    }
    
    public T removeCookie(String paramString)
    {
      Validate.notEmpty("Cookie name must not be empty");
      this.cookies.remove(paramString);
      return this;
    }
    
    public T removeHeader(String paramString)
    {
      Validate.notEmpty(paramString, "Header name must not be empty");
      paramString = scanHeaders(paramString);
      if (paramString != null) {
        this.headers.remove(paramString.getKey());
      }
      return this;
    }
    
    public URL url()
    {
      return this.url;
    }
    
    public T url(URL paramURL)
    {
      Validate.notNull(paramURL, "URL must not be null");
      this.url = paramURL;
      return this;
    }
  }
  
  public static class KeyVal
    implements Connection.KeyVal
  {
    private String key;
    private String value;
    
    private KeyVal(String paramString1, String paramString2)
    {
      this.key = paramString1;
      this.value = paramString2;
    }
    
    public static KeyVal create(String paramString1, String paramString2)
    {
      Validate.notEmpty(paramString1, "Data key must not be empty");
      Validate.notNull(paramString2, "Data value must not be null");
      return new KeyVal(paramString1, paramString2);
    }
    
    public String key()
    {
      return this.key;
    }
    
    public KeyVal key(String paramString)
    {
      Validate.notEmpty(paramString, "Data key must not be empty");
      this.key = paramString;
      return this;
    }
    
    public String toString()
    {
      return this.key + "=" + this.value;
    }
    
    public String value()
    {
      return this.value;
    }
    
    public KeyVal value(String paramString)
    {
      Validate.notNull(paramString, "Data value must not be null");
      this.value = paramString;
      return this;
    }
  }
  
  public static class Request
    extends HttpConnection.Base<Connection.Request>
    implements Connection.Request
  {
    private Collection<Connection.KeyVal> data = new ArrayList();
    private boolean followRedirects = true;
    private boolean ignoreContentType = false;
    private boolean ignoreHttpErrors = false;
    private int timeoutMilliseconds = 3000;
    
    private Request()
    {
      super();
      this.method = Connection.Method.GET;
      this.headers.put("Accept-Encoding", "gzip");
    }
    
    public Collection<Connection.KeyVal> data()
    {
      return this.data;
    }
    
    public Request data(Connection.KeyVal paramKeyVal)
    {
      Validate.notNull(paramKeyVal, "Key val must not be null");
      this.data.add(paramKeyVal);
      return this;
    }
    
    public Connection.Request followRedirects(boolean paramBoolean)
    {
      this.followRedirects = paramBoolean;
      return this;
    }
    
    public boolean followRedirects()
    {
      return this.followRedirects;
    }
    
    public void ignoreContentType(boolean paramBoolean)
    {
      this.ignoreContentType = paramBoolean;
    }
    
    public boolean ignoreContentType()
    {
      return this.ignoreContentType;
    }
    
    public void ignoreHttpErrors(boolean paramBoolean)
    {
      this.ignoreHttpErrors = paramBoolean;
    }
    
    public boolean ignoreHttpErrors()
    {
      return this.ignoreHttpErrors;
    }
    
    public int timeout()
    {
      return this.timeoutMilliseconds;
    }
    
    public Request timeout(int paramInt)
    {
      if (paramInt >= 0) {}
      for (boolean bool = true;; bool = false)
      {
        Validate.isTrue(bool, "Timeout milliseconds must be 0 (infinite) or greater");
        this.timeoutMilliseconds = paramInt;
        return this;
      }
    }
  }
  
  public static class Response
    extends HttpConnection.Base<Connection.Response>
    implements Connection.Response
  {
    private static final int MAX_REDIRECTS = 20;
    private ByteBuffer byteData;
    private String charset;
    private String contentType;
    private boolean executed = false;
    private int numRedirects = 0;
    private Connection.Request req;
    private int statusCode;
    private String statusMessage;
    
    Response()
    {
      super();
    }
    
    private Response(Response paramResponse)
      throws IOException
    {
      super();
      if (paramResponse != null)
      {
        paramResponse.numRedirects += 1;
        if (this.numRedirects >= 20) {
          throw new IOException(String.format("Too many redirects occurred trying to load URL %s", new Object[] { paramResponse.url() }));
        }
      }
    }
    
    private static HttpURLConnection createConnection(Connection.Request paramRequest)
      throws IOException
    {
      HttpURLConnection localHttpURLConnection = (HttpURLConnection)paramRequest.url().openConnection();
      localHttpURLConnection.setRequestMethod(paramRequest.method().name());
      localHttpURLConnection.setInstanceFollowRedirects(false);
      localHttpURLConnection.setConnectTimeout(paramRequest.timeout());
      localHttpURLConnection.setReadTimeout(paramRequest.timeout());
      if (paramRequest.method() == Connection.Method.POST) {
        localHttpURLConnection.setDoOutput(true);
      }
      if (paramRequest.cookies().size() > 0) {
        localHttpURLConnection.addRequestProperty("Cookie", getRequestCookieString(paramRequest));
      }
      paramRequest = paramRequest.headers().entrySet().iterator();
      while (paramRequest.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramRequest.next();
        localHttpURLConnection.addRequestProperty((String)localEntry.getKey(), (String)localEntry.getValue());
      }
      return localHttpURLConnection;
    }
    
    static Response execute(Connection.Request paramRequest)
      throws IOException
    {
      return execute(paramRequest, null);
    }
    
    /* Error */
    static Response execute(Connection.Request paramRequest, Response paramResponse)
      throws IOException
    {
      // Byte code:
      //   0: aload_0
      //   1: ldc -95
      //   3: invokestatic 167	org/jsoup/helper/Validate:notNull	(Ljava/lang/Object;Ljava/lang/String;)V
      //   6: aload_0
      //   7: invokeinterface 61 1 0
      //   12: invokevirtual 170	java/net/URL:getProtocol	()Ljava/lang/String;
      //   15: astore 6
      //   17: aload 6
      //   19: ldc -84
      //   21: invokevirtual 176	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   24: ifne +13 -> 37
      //   27: aload 6
      //   29: ldc -78
      //   31: invokevirtual 176	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   34: ifeq +249 -> 283
      //   37: iconst_1
      //   38: istore 5
      //   40: iload 5
      //   42: ldc -76
      //   44: invokestatic 184	org/jsoup/helper/Validate:isTrue	(ZLjava/lang/String;)V
      //   47: aload_0
      //   48: invokeinterface 73 1 0
      //   53: getstatic 187	org/jsoup/Connection$Method:GET	Lorg/jsoup/Connection$Method;
      //   56: if_acmpne +21 -> 77
      //   59: aload_0
      //   60: invokeinterface 191 1 0
      //   65: invokeinterface 194 1 0
      //   70: ifle +7 -> 77
      //   73: aload_0
      //   74: invokestatic 198	org/jsoup/helper/HttpConnection$Response:serialiseRequestUrl	(Lorg/jsoup/Connection$Request;)V
      //   77: aload_0
      //   78: invokestatic 200	org/jsoup/helper/HttpConnection$Response:createConnection	(Lorg/jsoup/Connection$Request;)Ljava/net/HttpURLConnection;
      //   81: astore 9
      //   83: aload 9
      //   85: invokevirtual 203	java/net/HttpURLConnection:connect	()V
      //   88: aload_0
      //   89: invokeinterface 73 1 0
      //   94: getstatic 101	org/jsoup/Connection$Method:POST	Lorg/jsoup/Connection$Method;
      //   97: if_acmpne +17 -> 114
      //   100: aload_0
      //   101: invokeinterface 191 1 0
      //   106: aload 9
      //   108: invokevirtual 207	java/net/HttpURLConnection:getOutputStream	()Ljava/io/OutputStream;
      //   111: invokestatic 211	org/jsoup/helper/HttpConnection$Response:writePost	(Ljava/util/Collection;Ljava/io/OutputStream;)V
      //   114: aload 9
      //   116: invokevirtual 214	java/net/HttpURLConnection:getResponseCode	()I
      //   119: istore 4
      //   121: iconst_0
      //   122: istore_3
      //   123: iload_3
      //   124: istore_2
      //   125: iload 4
      //   127: sipush 200
      //   130: if_icmpeq +29 -> 159
      //   133: iload 4
      //   135: sipush 302
      //   138: if_icmpeq +19 -> 157
      //   141: iload 4
      //   143: sipush 301
      //   146: if_icmpeq +11 -> 157
      //   149: iload 4
      //   151: sipush 303
      //   154: if_icmpne +135 -> 289
      //   157: iconst_1
      //   158: istore_2
      //   159: new 2	org/jsoup/helper/HttpConnection$Response
      //   162: dup
      //   163: aload_1
      //   164: invokespecial 216	org/jsoup/helper/HttpConnection$Response:<init>	(Lorg/jsoup/helper/HttpConnection$Response;)V
      //   167: astore 8
      //   169: aload 8
      //   171: aload 9
      //   173: aload_1
      //   174: invokespecial 220	org/jsoup/helper/HttpConnection$Response:setupFromConnection	(Ljava/net/HttpURLConnection;Lorg/jsoup/Connection$Response;)V
      //   177: iload_2
      //   178: ifeq +169 -> 347
      //   181: aload_0
      //   182: invokeinterface 223 1 0
      //   187: ifeq +160 -> 347
      //   190: aload_0
      //   191: new 63	java/net/URL
      //   194: dup
      //   195: aload_0
      //   196: invokeinterface 61 1 0
      //   201: aload 8
      //   203: ldc -31
      //   205: invokevirtual 229	org/jsoup/helper/HttpConnection$Response:header	(Ljava/lang/String;)Ljava/lang/String;
      //   208: invokespecial 232	java/net/URL:<init>	(Ljava/net/URL;Ljava/lang/String;)V
      //   211: invokeinterface 235 2 0
      //   216: pop
      //   217: aload 8
      //   219: getfield 238	org/jsoup/helper/HttpConnection$Response:cookies	Ljava/util/Map;
      //   222: invokeinterface 130 1 0
      //   227: invokeinterface 136 1 0
      //   232: astore_1
      //   233: aload_1
      //   234: invokeinterface 142 1 0
      //   239: ifeq +101 -> 340
      //   242: aload_1
      //   243: invokeinterface 146 1 0
      //   248: checkcast 148	java/util/Map$Entry
      //   251: astore 6
      //   253: aload_0
      //   254: aload 6
      //   256: invokeinterface 151 1 0
      //   261: checkcast 48	java/lang/String
      //   264: aload 6
      //   266: invokeinterface 154 1 0
      //   271: checkcast 48	java/lang/String
      //   274: invokeinterface 242 3 0
      //   279: pop
      //   280: goto -47 -> 233
      //   283: iconst_0
      //   284: istore 5
      //   286: goto -246 -> 40
      //   289: iload_3
      //   290: istore_2
      //   291: aload_0
      //   292: invokeinterface 245 1 0
      //   297: ifne -138 -> 159
      //   300: new 38	java/io/IOException
      //   303: dup
      //   304: new 247	java/lang/StringBuilder
      //   307: dup
      //   308: invokespecial 249	java/lang/StringBuilder:<init>	()V
      //   311: iload 4
      //   313: invokevirtual 253	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   316: ldc -1
      //   318: invokevirtual 258	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   321: aload_0
      //   322: invokeinterface 61 1 0
      //   327: invokevirtual 261	java/net/URL:toString	()Ljava/lang/String;
      //   330: invokevirtual 258	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   333: invokevirtual 262	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   336: invokespecial 55	java/io/IOException:<init>	(Ljava/lang/String;)V
      //   339: athrow
      //   340: aload_0
      //   341: aload 8
      //   343: invokestatic 159	org/jsoup/helper/HttpConnection$Response:execute	(Lorg/jsoup/Connection$Request;Lorg/jsoup/helper/HttpConnection$Response;)Lorg/jsoup/helper/HttpConnection$Response;
      //   346: areturn
      //   347: aload 8
      //   349: aload_0
      //   350: putfield 264	org/jsoup/helper/HttpConnection$Response:req	Lorg/jsoup/Connection$Request;
      //   353: aconst_null
      //   354: astore_1
      //   355: aconst_null
      //   356: astore_0
      //   357: aload_1
      //   358: astore 6
      //   360: aload_0
      //   361: astore 7
      //   363: aload 9
      //   365: invokevirtual 268	java/net/HttpURLConnection:getErrorStream	()Ljava/io/InputStream;
      //   368: ifnull +136 -> 504
      //   371: aload_1
      //   372: astore 6
      //   374: aload_0
      //   375: astore 7
      //   377: aload 9
      //   379: invokevirtual 268	java/net/HttpURLConnection:getErrorStream	()Ljava/io/InputStream;
      //   382: astore_0
      //   383: aload_1
      //   384: astore 6
      //   386: aload_0
      //   387: astore 7
      //   389: aload 8
      //   391: ldc_w 270
      //   394: invokevirtual 274	org/jsoup/helper/HttpConnection$Response:hasHeader	(Ljava/lang/String;)Z
      //   397: ifeq +122 -> 519
      //   400: aload_1
      //   401: astore 6
      //   403: aload_0
      //   404: astore 7
      //   406: aload 8
      //   408: ldc_w 270
      //   411: invokevirtual 229	org/jsoup/helper/HttpConnection$Response:header	(Ljava/lang/String;)Ljava/lang/String;
      //   414: ldc_w 276
      //   417: invokevirtual 279	java/lang/String:equalsIgnoreCase	(Ljava/lang/String;)Z
      //   420: ifeq +99 -> 519
      //   423: aload_1
      //   424: astore 6
      //   426: aload_0
      //   427: astore 7
      //   429: new 281	java/io/BufferedInputStream
      //   432: dup
      //   433: new 283	java/util/zip/GZIPInputStream
      //   436: dup
      //   437: aload_0
      //   438: invokespecial 286	java/util/zip/GZIPInputStream:<init>	(Ljava/io/InputStream;)V
      //   441: invokespecial 287	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
      //   444: astore_1
      //   445: aload_1
      //   446: astore 6
      //   448: aload_0
      //   449: astore 7
      //   451: aload 8
      //   453: aload_1
      //   454: invokestatic 293	org/jsoup/helper/DataUtil:readToByteBuffer	(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;
      //   457: putfield 295	org/jsoup/helper/HttpConnection$Response:byteData	Ljava/nio/ByteBuffer;
      //   460: aload_1
      //   461: astore 6
      //   463: aload_0
      //   464: astore 7
      //   466: aload 8
      //   468: aload 8
      //   470: getfield 297	org/jsoup/helper/HttpConnection$Response:contentType	Ljava/lang/String;
      //   473: invokestatic 300	org/jsoup/helper/DataUtil:getCharsetFromContentType	(Ljava/lang/String;)Ljava/lang/String;
      //   476: putfield 302	org/jsoup/helper/HttpConnection$Response:charset	Ljava/lang/String;
      //   479: aload_1
      //   480: ifnull +7 -> 487
      //   483: aload_1
      //   484: invokevirtual 307	java/io/InputStream:close	()V
      //   487: aload_0
      //   488: ifnull +7 -> 495
      //   491: aload_0
      //   492: invokevirtual 307	java/io/InputStream:close	()V
      //   495: aload 8
      //   497: iconst_1
      //   498: putfield 32	org/jsoup/helper/HttpConnection$Response:executed	Z
      //   501: aload 8
      //   503: areturn
      //   504: aload_1
      //   505: astore 6
      //   507: aload_0
      //   508: astore 7
      //   510: aload 9
      //   512: invokevirtual 310	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
      //   515: astore_0
      //   516: goto -133 -> 383
      //   519: aload_1
      //   520: astore 6
      //   522: aload_0
      //   523: astore 7
      //   525: new 281	java/io/BufferedInputStream
      //   528: dup
      //   529: aload_0
      //   530: invokespecial 287	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
      //   533: astore_1
      //   534: goto -89 -> 445
      //   537: astore_0
      //   538: aload 6
      //   540: ifnull +8 -> 548
      //   543: aload 6
      //   545: invokevirtual 307	java/io/InputStream:close	()V
      //   548: aload 7
      //   550: ifnull +8 -> 558
      //   553: aload 7
      //   555: invokevirtual 307	java/io/InputStream:close	()V
      //   558: aload_0
      //   559: athrow
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	560	0	paramRequest	Connection.Request
      //   0	560	1	paramResponse	Response
      //   124	167	2	i	int
      //   122	168	3	j	int
      //   119	193	4	k	int
      //   38	247	5	bool	boolean
      //   15	529	6	localObject	Object
      //   361	193	7	localRequest	Connection.Request
      //   167	335	8	localResponse	Response
      //   81	430	9	localHttpURLConnection	HttpURLConnection
      // Exception table:
      //   from	to	target	type
      //   363	371	537	finally
      //   377	383	537	finally
      //   389	400	537	finally
      //   406	423	537	finally
      //   429	445	537	finally
      //   451	460	537	finally
      //   466	479	537	finally
      //   510	516	537	finally
      //   525	534	537	finally
    }
    
    private static String getRequestCookieString(Connection.Request paramRequest)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      int i = 1;
      paramRequest = paramRequest.cookies().entrySet().iterator();
      if (paramRequest.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramRequest.next();
        if (i == 0) {
          localStringBuilder.append("; ");
        }
        for (;;)
        {
          localStringBuilder.append((String)localEntry.getKey()).append('=').append((String)localEntry.getValue());
          break;
          i = 0;
        }
      }
      return localStringBuilder.toString();
    }
    
    private static void serialiseRequestUrl(Connection.Request paramRequest)
      throws IOException
    {
      Object localObject = paramRequest.url();
      StringBuilder localStringBuilder = new StringBuilder();
      int i = 1;
      localStringBuilder.append(((URL)localObject).getProtocol()).append("://").append(((URL)localObject).getAuthority()).append(((URL)localObject).getPath()).append("?");
      if (((URL)localObject).getQuery() != null)
      {
        localStringBuilder.append(((URL)localObject).getQuery());
        i = 0;
      }
      localObject = paramRequest.data().iterator();
      if (((Iterator)localObject).hasNext())
      {
        Connection.KeyVal localKeyVal = (Connection.KeyVal)((Iterator)localObject).next();
        if (i == 0) {
          localStringBuilder.append('&');
        }
        for (;;)
        {
          localStringBuilder.append(URLEncoder.encode(localKeyVal.key(), "UTF-8")).append('=').append(URLEncoder.encode(localKeyVal.value(), "UTF-8"));
          break;
          i = 0;
        }
      }
      paramRequest.url(new URL(localStringBuilder.toString()));
      paramRequest.data().clear();
    }
    
    private void setupFromConnection(HttpURLConnection paramHttpURLConnection, Connection.Response paramResponse)
      throws IOException
    {
      this.method = Connection.Method.valueOf(paramHttpURLConnection.getRequestMethod());
      this.url = paramHttpURLConnection.getURL();
      this.statusCode = paramHttpURLConnection.getResponseCode();
      this.statusMessage = paramHttpURLConnection.getResponseMessage();
      this.contentType = paramHttpURLConnection.getContentType();
      processResponseHeaders(paramHttpURLConnection.getHeaderFields());
      if (paramResponse != null)
      {
        paramHttpURLConnection = paramResponse.cookies().entrySet().iterator();
        while (paramHttpURLConnection.hasNext())
        {
          paramResponse = (Map.Entry)paramHttpURLConnection.next();
          if (!hasCookie((String)paramResponse.getKey())) {
            cookie((String)paramResponse.getKey(), (String)paramResponse.getValue());
          }
        }
      }
    }
    
    private static void writePost(Collection<Connection.KeyVal> paramCollection, OutputStream paramOutputStream)
      throws IOException
    {
      paramOutputStream = new OutputStreamWriter(paramOutputStream, "UTF-8");
      int i = 1;
      paramCollection = paramCollection.iterator();
      if (paramCollection.hasNext())
      {
        Connection.KeyVal localKeyVal = (Connection.KeyVal)paramCollection.next();
        if (i == 0) {
          paramOutputStream.append('&');
        }
        for (;;)
        {
          paramOutputStream.write(URLEncoder.encode(localKeyVal.key(), "UTF-8"));
          paramOutputStream.write(61);
          paramOutputStream.write(URLEncoder.encode(localKeyVal.value(), "UTF-8"));
          break;
          i = 0;
        }
      }
      paramOutputStream.close();
    }
    
    public String body()
    {
      Validate.isTrue(this.executed, "Request must be executed (with .execute(), .get(), or .post() before getting response body");
      if (this.charset == null) {}
      for (String str = Charset.forName("UTF-8").decode(this.byteData).toString();; str = Charset.forName(this.charset).decode(this.byteData).toString())
      {
        this.byteData.rewind();
        return str;
      }
    }
    
    public byte[] bodyAsBytes()
    {
      Validate.isTrue(this.executed, "Request must be executed (with .execute(), .get(), or .post() before getting response body");
      return this.byteData.array();
    }
    
    public String charset()
    {
      return this.charset;
    }
    
    public String contentType()
    {
      return this.contentType;
    }
    
    public Document parse()
      throws IOException
    {
      Validate.isTrue(this.executed, "Request must be executed (with .execute(), .get(), or .post() before parsing response");
      if ((!this.req.ignoreContentType()) && ((this.contentType == null) || ((!this.contentType.startsWith("text/")) && (!this.contentType.startsWith("application/xml")) && (!this.contentType.startsWith("application/xhtml+xml"))))) {
        throw new IOException(String.format("Unhandled content type \"%s\" on URL %s. Must be text/*, application/xml, or application/xhtml+xml", new Object[] { this.contentType, this.url.toString() }));
      }
      Document localDocument = DataUtil.parseByteData(this.byteData, this.charset, this.url.toExternalForm());
      this.byteData.rewind();
      this.charset = localDocument.outputSettings().charset().name();
      return localDocument;
    }
    
    void processResponseHeaders(Map<String, List<String>> paramMap)
    {
      Iterator localIterator1 = paramMap.entrySet().iterator();
      while (localIterator1.hasNext())
      {
        Object localObject = (Map.Entry)localIterator1.next();
        paramMap = (String)((Map.Entry)localObject).getKey();
        if (paramMap != null)
        {
          localObject = (List)((Map.Entry)localObject).getValue();
          if (paramMap.equalsIgnoreCase("Set-Cookie"))
          {
            Iterator localIterator2 = ((List)localObject).iterator();
            while (localIterator2.hasNext())
            {
              paramMap = (String)localIterator2.next();
              if (paramMap != null)
              {
                paramMap = new TokenQueue(paramMap);
                String str = paramMap.chompTo("=").trim();
                localObject = paramMap.consumeTo(";").trim();
                paramMap = (Map<String, List<String>>)localObject;
                if (localObject == null) {
                  paramMap = "";
                }
                if ((str != null) && (str.length() > 0)) {
                  cookie(str, paramMap);
                }
              }
            }
          }
          else if (!((List)localObject).isEmpty())
          {
            header(paramMap, (String)((List)localObject).get(0));
          }
        }
      }
    }
    
    public int statusCode()
    {
      return this.statusCode;
    }
    
    public String statusMessage()
    {
      return this.statusMessage;
    }
  }
}
