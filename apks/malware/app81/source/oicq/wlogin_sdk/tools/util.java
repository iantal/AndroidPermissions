package oicq.wlogin_sdk.tools;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Proxy;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.util.Log;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.InflaterInputStream;
import oicq.wlogin_sdk.request.request_global;
import oicq.wlogin_sdk.tlv_type.tlv_t;

public class util
{
  public static int ASYN_CHECK_IMAGE = 0;
  public static int ASYN_CHECK_SMS = 0;
  public static int ASYN_EXCEPTION = 0;
  public static int ASYN_GET_REMOTE_ST_WITHOUT_PWD = 0;
  public static int ASYN_GET_ST_WITHOUT_PWD = 0;
  public static int ASYN_GET_ST_WITH_PWD = 0;
  public static int ASYN_NEW_REFLUSH_IMAGE = 0;
  public static int ASYN_NEW_TRANSPORT = 0;
  public static int ASYN_PING = 0;
  public static int ASYN_PUSH_CONNECTED = 0;
  public static int ASYN_PUSH_DISCONNECTED = 0;
  public static int ASYN_REFLUSH_IMAGE = 0;
  public static int ASYN_REFLUSH_SMS = 0;
  public static int ASYN_REPORT = 0;
  public static int ASYN_REPORT_ERROR = 0;
  public static int ASYN_TRANSPORT = 0;
  public static int ASYN_TRANSPORT_MSF = 0;
  public static int ASYN_TRANSPORT_PUSH = 0;
  public static final int D = 2;
  public static final int E_A1_DECRYPT = -1014;
  public static final int E_A1_FORMAT = -1016;
  public static final int E_APK_CHK_ERR = -1021;
  public static final int E_DECRYPT = -1002;
  public static final int E_ENCODING = -1013;
  public static final int E_INPUT = -1017;
  public static final int E_NAME_INVALID = -1008;
  public static final int E_NO_KEY = -1004;
  public static final int E_NO_REG_CMD = -1010;
  public static final int E_NO_RET = -1000;
  public static final int E_NO_TGTKEY = -1006;
  public static final int E_NO_UIN = -1003;
  public static final int E_PENDING = -1001;
  public static final int E_PK_LEN = -1009;
  public static final int E_PUSH_REG = -1011;
  public static final int E_RESOLVE_ADDR = -1007;
  public static final int E_SHARE_SERVICE_EXCEPTION = -1020;
  public static final int E_SHARE_SERVICE_PARAM = -1019;
  public static final int E_SHARE_SERVICE_UNCHECK = -1018;
  public static final int E_SYSTEM = -1012;
  public static final int E_TLV_DECRYPT = -1015;
  public static final int E_TLV_VERIFY = -1005;
  public static final String FILE_DIR = "tencent/wtlogin";
  private static int HONEYCOMB = 0;
  public static final int I = 1;
  public static LogCallBack LCB;
  public static boolean LOGCAT_OUT = false;
  public static int LOG_LEVEL = 0;
  public static int MAX_APPID = 65535;
  public static final int MAX_CONTENT_SIZE = 2048;
  public static final int MAX_FILE_SIZE = 102400;
  public static int MAX_NAME_LEN = 128;
  public static int SSO_VERSION = 0;
  public static final int S_DELAY = 3;
  public static final int S_GET_IMAGE = 2;
  public static final int S_GET_SMS_CHECK = 160;
  public static final int S_PUSH_RECONNECT = -1100;
  public static final int S_PWD_WRONG = 1;
  public static final int S_SUCCESS = 0;
  public static final String TAG = "wlogin_sdk";
  public static final int W = 0;
  static final char[] base64_encode_chars;
  static final char base64_pad_url = '_';
  static final short[] base64_reverse_table_url;
  public static String logContent;
  
  static
  {
    ASYN_GET_ST_WITH_PWD = 0;
    ASYN_REFLUSH_IMAGE = 1;
    ASYN_CHECK_IMAGE = 2;
    ASYN_GET_ST_WITHOUT_PWD = 3;
    ASYN_PING = 4;
    ASYN_REPORT = 5;
    ASYN_TRANSPORT = 6;
    ASYN_TRANSPORT_MSF = 7;
    ASYN_TRANSPORT_PUSH = 8;
    ASYN_PUSH_CONNECTED = 9;
    ASYN_PUSH_DISCONNECTED = 10;
    ASYN_REFLUSH_SMS = 11;
    ASYN_CHECK_SMS = 12;
    ASYN_EXCEPTION = 13;
    ASYN_REPORT_ERROR = 14;
    ASYN_GET_REMOTE_ST_WITHOUT_PWD = 15;
    ASYN_NEW_REFLUSH_IMAGE = 16;
    ASYN_NEW_TRANSPORT = 17;
    LOG_LEVEL = 1;
    LCB = null;
    LOGCAT_OUT = true;
    SSO_VERSION = 4;
    logContent = "";
    HONEYCOMB = 11;
    base64_encode_chars = new char[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
    short[] arrayOfShort = new short['Ā'];
    arrayOfShort[0] = -1;
    arrayOfShort[1] = -1;
    arrayOfShort[2] = -1;
    arrayOfShort[3] = -1;
    arrayOfShort[4] = -1;
    arrayOfShort[5] = -1;
    arrayOfShort[6] = -1;
    arrayOfShort[7] = -1;
    arrayOfShort[8] = -1;
    arrayOfShort[9] = -1;
    arrayOfShort[10] = -1;
    arrayOfShort[11] = -1;
    arrayOfShort[12] = -1;
    arrayOfShort[13] = -1;
    arrayOfShort[14] = -1;
    arrayOfShort[15] = -1;
    arrayOfShort[16] = -1;
    arrayOfShort[17] = -1;
    arrayOfShort[18] = -1;
    arrayOfShort[19] = -1;
    arrayOfShort[20] = -1;
    arrayOfShort[21] = -1;
    arrayOfShort[22] = -1;
    arrayOfShort[23] = -1;
    arrayOfShort[24] = -1;
    arrayOfShort[25] = -1;
    arrayOfShort[26] = -1;
    arrayOfShort[27] = -1;
    arrayOfShort[28] = -1;
    arrayOfShort[29] = -1;
    arrayOfShort[30] = -1;
    arrayOfShort[31] = -1;
    arrayOfShort[32] = -1;
    arrayOfShort[33] = -1;
    arrayOfShort[34] = -1;
    arrayOfShort[35] = -1;
    arrayOfShort[36] = -1;
    arrayOfShort[37] = -1;
    arrayOfShort[38] = -1;
    arrayOfShort[39] = -1;
    arrayOfShort[40] = -1;
    arrayOfShort[41] = -1;
    arrayOfShort[42] = 62;
    arrayOfShort[43] = -1;
    arrayOfShort[44] = -1;
    arrayOfShort[45] = 63;
    arrayOfShort[46] = -1;
    arrayOfShort[47] = -1;
    arrayOfShort[48] = 52;
    arrayOfShort[49] = 53;
    arrayOfShort[50] = 54;
    arrayOfShort[51] = 55;
    arrayOfShort[52] = 56;
    arrayOfShort[53] = 57;
    arrayOfShort[54] = 58;
    arrayOfShort[55] = 59;
    arrayOfShort[56] = 60;
    arrayOfShort[57] = 61;
    arrayOfShort[58] = -1;
    arrayOfShort[59] = -1;
    arrayOfShort[60] = -1;
    arrayOfShort[61] = -1;
    arrayOfShort[62] = -1;
    arrayOfShort[63] = -1;
    arrayOfShort[64] = -1;
    arrayOfShort[66] = 1;
    arrayOfShort[67] = 2;
    arrayOfShort[68] = 3;
    arrayOfShort[69] = 4;
    arrayOfShort[70] = 5;
    arrayOfShort[71] = 6;
    arrayOfShort[72] = 7;
    arrayOfShort[73] = 8;
    arrayOfShort[74] = 9;
    arrayOfShort[75] = 10;
    arrayOfShort[76] = 11;
    arrayOfShort[77] = 12;
    arrayOfShort[78] = 13;
    arrayOfShort[79] = 14;
    arrayOfShort[80] = 15;
    arrayOfShort[81] = 16;
    arrayOfShort[82] = 17;
    arrayOfShort[83] = 18;
    arrayOfShort[84] = 19;
    arrayOfShort[85] = 20;
    arrayOfShort[86] = 21;
    arrayOfShort[87] = 22;
    arrayOfShort[88] = 23;
    arrayOfShort[89] = 24;
    arrayOfShort[90] = 25;
    arrayOfShort[91] = -1;
    arrayOfShort[92] = -1;
    arrayOfShort[93] = -1;
    arrayOfShort[94] = -1;
    arrayOfShort[95] = -1;
    arrayOfShort[96] = -1;
    arrayOfShort[97] = 26;
    arrayOfShort[98] = 27;
    arrayOfShort[99] = 28;
    arrayOfShort[100] = 29;
    arrayOfShort[101] = 30;
    arrayOfShort[102] = 31;
    arrayOfShort[103] = 32;
    arrayOfShort[104] = 33;
    arrayOfShort[105] = 34;
    arrayOfShort[106] = 35;
    arrayOfShort[107] = 36;
    arrayOfShort[108] = 37;
    arrayOfShort[109] = 38;
    arrayOfShort[110] = 39;
    arrayOfShort[111] = 40;
    arrayOfShort[112] = 41;
    arrayOfShort[113] = 42;
    arrayOfShort[114] = 43;
    arrayOfShort[115] = 44;
    arrayOfShort[116] = 45;
    arrayOfShort[117] = 46;
    arrayOfShort[118] = 47;
    arrayOfShort[119] = 48;
    arrayOfShort[120] = 49;
    arrayOfShort[121] = 50;
    arrayOfShort[122] = 51;
    arrayOfShort[123] = -1;
    arrayOfShort[124] = -1;
    arrayOfShort[125] = -1;
    arrayOfShort[126] = -1;
    arrayOfShort[127] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[''] = -1;
    arrayOfShort[' '] = -1;
    arrayOfShort['¡'] = -1;
    arrayOfShort['¢'] = -1;
    arrayOfShort['£'] = -1;
    arrayOfShort['¤'] = -1;
    arrayOfShort['¥'] = -1;
    arrayOfShort['¦'] = -1;
    arrayOfShort['§'] = -1;
    arrayOfShort['¨'] = -1;
    arrayOfShort['©'] = -1;
    arrayOfShort['ª'] = -1;
    arrayOfShort['«'] = -1;
    arrayOfShort['¬'] = -1;
    arrayOfShort['­'] = -1;
    arrayOfShort['®'] = -1;
    arrayOfShort['¯'] = -1;
    arrayOfShort['°'] = -1;
    arrayOfShort['±'] = -1;
    arrayOfShort['²'] = -1;
    arrayOfShort['³'] = -1;
    arrayOfShort['´'] = -1;
    arrayOfShort['µ'] = -1;
    arrayOfShort['¶'] = -1;
    arrayOfShort['·'] = -1;
    arrayOfShort['¸'] = -1;
    arrayOfShort['¹'] = -1;
    arrayOfShort['º'] = -1;
    arrayOfShort['»'] = -1;
    arrayOfShort['¼'] = -1;
    arrayOfShort['½'] = -1;
    arrayOfShort['¾'] = -1;
    arrayOfShort['¿'] = -1;
    arrayOfShort['À'] = -1;
    arrayOfShort['Á'] = -1;
    arrayOfShort['Â'] = -1;
    arrayOfShort['Ã'] = -1;
    arrayOfShort['Ä'] = -1;
    arrayOfShort['Å'] = -1;
    arrayOfShort['Æ'] = -1;
    arrayOfShort['Ç'] = -1;
    arrayOfShort['È'] = -1;
    arrayOfShort['É'] = -1;
    arrayOfShort['Ê'] = -1;
    arrayOfShort['Ë'] = -1;
    arrayOfShort['Ì'] = -1;
    arrayOfShort['Í'] = -1;
    arrayOfShort['Î'] = -1;
    arrayOfShort['Ï'] = -1;
    arrayOfShort['Ð'] = -1;
    arrayOfShort['Ñ'] = -1;
    arrayOfShort['Ò'] = -1;
    arrayOfShort['Ó'] = -1;
    arrayOfShort['Ô'] = -1;
    arrayOfShort['Õ'] = -1;
    arrayOfShort['Ö'] = -1;
    arrayOfShort['×'] = -1;
    arrayOfShort['Ø'] = -1;
    arrayOfShort['Ù'] = -1;
    arrayOfShort['Ú'] = -1;
    arrayOfShort['Û'] = -1;
    arrayOfShort['Ü'] = -1;
    arrayOfShort['Ý'] = -1;
    arrayOfShort['Þ'] = -1;
    arrayOfShort['ß'] = -1;
    arrayOfShort['à'] = -1;
    arrayOfShort['á'] = -1;
    arrayOfShort['â'] = -1;
    arrayOfShort['ã'] = -1;
    arrayOfShort['ä'] = -1;
    arrayOfShort['å'] = -1;
    arrayOfShort['æ'] = -1;
    arrayOfShort['ç'] = -1;
    arrayOfShort['è'] = -1;
    arrayOfShort['é'] = -1;
    arrayOfShort['ê'] = -1;
    arrayOfShort['ë'] = -1;
    arrayOfShort['ì'] = -1;
    arrayOfShort['í'] = -1;
    arrayOfShort['î'] = -1;
    arrayOfShort['ï'] = -1;
    arrayOfShort['ð'] = -1;
    arrayOfShort['ñ'] = -1;
    arrayOfShort['ò'] = -1;
    arrayOfShort['ó'] = -1;
    arrayOfShort['ô'] = -1;
    arrayOfShort['õ'] = -1;
    arrayOfShort['ö'] = -1;
    arrayOfShort['÷'] = -1;
    arrayOfShort['ø'] = -1;
    arrayOfShort['ù'] = -1;
    arrayOfShort['ú'] = -1;
    arrayOfShort['û'] = -1;
    arrayOfShort['ü'] = -1;
    arrayOfShort['ý'] = -1;
    arrayOfShort['þ'] = -1;
    arrayOfShort['ÿ'] = -1;
    base64_reverse_table_url = arrayOfShort;
  }
  
  public util() {}
  
  public static boolean ExistSDCard()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static void LOGD(String paramString)
  {
    try
    {
      if (LOG_LEVEL >= 2)
      {
        if (LCB != null)
        {
          LCB.OnLog(paramString);
          return;
        }
        if (LOGCAT_OUT)
        {
          Log.d("wlogin_sdk" + getLineInfo(2), paramString);
          return;
        }
      }
    }
    catch (Exception paramString) {}
  }
  
  public static void LOGD(String paramString1, String paramString2)
  {
    try
    {
      if (LOG_LEVEL >= 2)
      {
        if (LCB != null)
        {
          LCB.OnLog(paramString1, paramString2);
          return;
        }
        if (LOGCAT_OUT)
        {
          Log.d("wlogin_sdk" + getLineInfo(2), paramString1 + ":" + paramString2);
          return;
        }
      }
    }
    catch (Exception paramString1) {}
  }
  
  public static void LOGI(String paramString)
  {
    try
    {
      if (LOG_LEVEL >= 1)
      {
        if (LCB != null)
        {
          LCB.OnLog(paramString);
          return;
        }
        if (LOGCAT_OUT)
        {
          Log.i("wlogin_sdk" + getLineInfo(2), paramString);
          return;
        }
      }
    }
    catch (Exception paramString) {}
  }
  
  public static void LOGI(String paramString1, Context paramContext, String paramString2, int paramInt)
  {
    try
    {
      if (LOG_LEVEL >= 1)
      {
        if (LCB != null) {
          LCB.OnLog(paramString1);
        }
        for (;;)
        {
          FileTracer.writeLog(paramContext, paramString2, paramString1);
          return;
          if (LOGCAT_OUT) {
            Log.i("wlogin_sdk" + getLineInfo(2), paramString1);
          }
        }
      }
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public static void LOGW(String paramString1, String paramString2)
  {
    try
    {
      if (LOG_LEVEL >= 0)
      {
        if (LCB != null)
        {
          LCB.OnLog(paramString1, paramString2);
          return;
        }
        if (LOGCAT_OUT)
        {
          Log.w("wlogin_sdk" + getLineInfo(2), paramString1 + ":" + paramString2);
          return;
        }
      }
    }
    catch (Exception paramString1) {}
  }
  
  public static void LOGW(String paramString1, String paramString2, Context paramContext, String paramString3)
  {
    try
    {
      if (LOG_LEVEL >= 0)
      {
        if (LCB != null) {
          LCB.OnLog(paramString1, paramString2);
        }
        for (;;)
        {
          FileTracer.writeLog(paramContext, paramString3, paramString1 + ":" + paramString2);
          return;
          if (LOGCAT_OUT) {
            Log.w("wlogin_sdk" + getLineInfo(2), paramString1 + ":" + paramString2);
          }
        }
      }
      return;
    }
    catch (Exception paramString1) {}
  }
  
  public static byte[] base64_decode_url(byte[] paramArrayOfByte, int paramInt)
  {
    int i = 0;
    int m = 0;
    byte[] arrayOfByte = new byte[24];
    int n = 0;
    int k = 0;
    int j = paramInt;
    paramInt = n;
    n = j - 1;
    if (j > 0)
    {
      i = k + 1;
      j = paramArrayOfByte[k];
      if (j == 0) {
        k = j;
      }
    }
    for (;;)
    {
      if (k == 95) {
        i = paramInt;
      }
      switch (m % 4)
      {
      default: 
        return arrayOfByte;
        k = j;
        if (j != 95)
        {
          k = j;
          if (j == 32) {
            k = 42;
          }
          int i1 = base64_reverse_table_url[k];
          if (i1 < 0)
          {
            k = i;
            j = n;
            i = i1;
            break;
          }
          switch (m % 4)
          {
          }
          for (;;)
          {
            m += 1;
            k = i;
            j = n;
            i = i1;
            break;
            arrayOfByte[paramInt] = ((byte)(i1 << 2));
            continue;
            j = paramInt + 1;
            arrayOfByte[paramInt] = ((byte)(arrayOfByte[paramInt] | i1 >> 4));
            arrayOfByte[j] = ((byte)((i1 & 0xF) << 4));
            paramInt = j;
            continue;
            j = paramInt + 1;
            arrayOfByte[paramInt] = ((byte)(arrayOfByte[paramInt] | i1 >> 2));
            arrayOfByte[j] = ((byte)((i1 & 0x3) << 6));
            paramInt = j;
            continue;
            j = paramInt + 1;
            arrayOfByte[paramInt] = ((byte)(arrayOfByte[paramInt] | i1));
            paramInt = j;
          }
        }
        break;
      case 0: 
      case 1: 
        return null;
      case 2: 
        i = paramInt + 1;
      case 3: 
        arrayOfByte[i] = 0;
        return arrayOfByte;
        k = i;
      }
    }
  }
  
  public static String base64_encode(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int j = paramArrayOfByte.length;
    int k;
    for (int i = 0;; i = k + 1)
    {
      if (i >= j) {}
      int m;
      for (;;)
      {
        return localStringBuffer.toString();
        m = i + 1;
        i = paramArrayOfByte[i] & 0xFF;
        if (m == j)
        {
          localStringBuffer.append(base64_encode_chars[(i >>> 2)]);
          localStringBuffer.append(base64_encode_chars[((i & 0x3) << 4)]);
        }
        else
        {
          k = m + 1;
          m = paramArrayOfByte[m] & 0xFF;
          if (k != j) {
            break;
          }
          localStringBuffer.append(base64_encode_chars[(i >>> 2)]);
          localStringBuffer.append(base64_encode_chars[((i & 0x3) << 4 | (m & 0xF0) >>> 4)]);
          localStringBuffer.append(base64_encode_chars[((m & 0xF) << 2)]);
        }
      }
      int n = paramArrayOfByte[k] & 0xFF;
      localStringBuffer.append(base64_encode_chars[(i >>> 2)]);
      localStringBuffer.append(base64_encode_chars[((i & 0x3) << 4 | (m & 0xF0) >>> 4)]);
      localStringBuffer.append(base64_encode_chars[((m & 0xF) << 2 | (n & 0xC0) >>> 6)]);
      localStringBuffer.append(base64_encode_chars[(n & 0x3F)]);
    }
  }
  
  public static long buf_len(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return 0L;
    }
    return paramArrayOfByte.length;
  }
  
  public static int buf_to_int16(byte[] paramArrayOfByte, int paramInt)
  {
    return (paramArrayOfByte[paramInt] << 8 & 0xFF00) + (paramArrayOfByte[(paramInt + 1)] << 0 & 0xFF);
  }
  
  public static int buf_to_int32(byte[] paramArrayOfByte, int paramInt)
  {
    return (paramArrayOfByte[paramInt] << 24 & 0xFF000000) + (paramArrayOfByte[(paramInt + 1)] << 16 & 0xFF0000) + (paramArrayOfByte[(paramInt + 2)] << 8 & 0xFF00) + (paramArrayOfByte[(paramInt + 3)] << 0 & 0xFF);
  }
  
  public static long buf_to_int64(byte[] paramArrayOfByte, int paramInt)
  {
    return 0L + (paramArrayOfByte[paramInt] << 56 & 0xFF00000000000000) + (paramArrayOfByte[(paramInt + 1)] << 48 & 0xFF000000000000) + (paramArrayOfByte[(paramInt + 2)] << 40 & 0xFF0000000000) + (paramArrayOfByte[(paramInt + 3)] << 32 & 0xFF00000000) + (paramArrayOfByte[(paramInt + 4)] << 24 & 0xFF000000) + (paramArrayOfByte[(paramInt + 5)] << 16 & 0xFF0000) + (paramArrayOfByte[(paramInt + 6)] << 8 & 0xFF00) + (paramArrayOfByte[(paramInt + 7)] << 0 & 0xFF);
  }
  
  public static int buf_to_int8(byte[] paramArrayOfByte, int paramInt)
  {
    return paramArrayOfByte[paramInt] & 0xFF;
  }
  
  public static String buf_to_string(byte[] paramArrayOfByte)
  {
    Object localObject;
    if (paramArrayOfByte == null)
    {
      localObject = "";
      return localObject;
    }
    String str = "";
    int i = 0;
    for (;;)
    {
      localObject = str;
      if (i >= paramArrayOfByte.length) {
        break;
      }
      str = new StringBuilder(String.valueOf(str)).append(Integer.toHexString(paramArrayOfByte[i] >> 4 & 0xF)).toString() + Integer.toHexString(paramArrayOfByte[i] & 0xF);
      i += 1;
    }
  }
  
  public static String buf_to_string(byte[] paramArrayOfByte, int paramInt)
  {
    Object localObject;
    if (paramArrayOfByte == null)
    {
      localObject = "";
      return localObject;
    }
    int i = paramInt;
    if (paramInt > paramArrayOfByte.length) {
      i = paramArrayOfByte.length;
    }
    String str = "";
    paramInt = 0;
    for (;;)
    {
      localObject = str;
      if (paramInt >= i) {
        break;
      }
      str = new StringBuilder(String.valueOf(str)).append(Integer.toHexString(paramArrayOfByte[paramInt] >> 4 & 0xF)).toString() + Integer.toHexString(paramArrayOfByte[paramInt] & 0xF);
      paramInt += 1;
    }
  }
  
  public static char[] byte2char(byte[] paramArrayOfByte)
  {
    char[] arrayOfChar = new char[paramArrayOfByte.length];
    int i = 0;
    for (;;)
    {
      if (i >= arrayOfChar.length) {
        return arrayOfChar;
      }
      arrayOfChar[i] = ((char)paramArrayOfByte[i]);
      i += 1;
    }
  }
  
  public static tlv_t bytes_to_tlv(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte.length < 4) {}
    while (buf_to_int16(paramArrayOfByte, 2) + 4 != paramArrayOfByte.length) {
      return null;
    }
    tlv_t localTlv_t = new tlv_t();
    localTlv_t.set_buf(paramArrayOfByte, paramArrayOfByte.length);
    return localTlv_t;
  }
  
  public static byte[] char2byte(char[] paramArrayOfChar, int paramInt)
  {
    byte[] arrayOfByte = new byte[paramInt];
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {
        return arrayOfByte;
      }
      arrayOfByte[i] = ((byte)paramArrayOfChar[i]);
      i += 1;
    }
  }
  
  public static Boolean check_uin_account(String paramString)
  {
    try
    {
      if (Long.parseLong(paramString) > 3000000000L) {
        return Boolean.valueOf(false);
      }
      return Boolean.valueOf(true);
    }
    catch (NumberFormatException paramString) {}
    return Boolean.valueOf(false);
  }
  
  public static void chg_retry_type(Context paramContext)
  {
    if (get_net_retry_type(paramContext) == 0)
    {
      set_net_retry_type(paramContext, 1);
      return;
    }
    set_net_retry_type(paramContext, 0);
  }
  
  public static byte[] compress(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length == 0)) {
      return paramArrayOfByte;
    }
    Object localObject1 = new ByteArrayOutputStream();
    try
    {
      localObject2 = new DeflaterOutputStream((OutputStream)localObject1);
      ((DeflaterOutputStream)localObject2).write(paramArrayOfByte);
      ((DeflaterOutputStream)localObject2).close();
      paramArrayOfByte = ((ByteArrayOutputStream)localObject1).toByteArray();
      return paramArrayOfByte;
    }
    catch (IOException paramArrayOfByte)
    {
      localObject1 = new StringWriter();
      Object localObject2 = new PrintWriter((Writer)localObject1, true);
      paramArrayOfByte.printStackTrace((PrintWriter)localObject2);
      ((PrintWriter)localObject2).flush();
      ((StringWriter)localObject1).flush();
      LOGW("exception", ((StringWriter)localObject1).toString());
    }
    return null;
  }
  
  public static void decompress(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length == 0)) {}
    int i;
    label35:
    int k;
    do
    {
      return;
      LOGI("data len:" + paramArrayOfByte.length);
      j = 0;
      i = 0;
      if (paramArrayOfByte.length <= j + 3) {
        break;
      }
      k = buf_to_int32(paramArrayOfByte, j);
    } while (paramArrayOfByte.length <= j + k + 3);
    Object localObject1 = new byte[k];
    System.arraycopy(paramArrayOfByte, j + 4, localObject1, 0, k);
    int j = j + 4 + k;
    i += 1;
    LOGI("len:" + k);
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    localObject1 = new ByteArrayInputStream((byte[])localObject1);
    for (;;)
    {
      Object localObject2;
      try
      {
        localObject1 = new InflaterInputStream((InputStream)localObject1);
        localObject2 = new byte['Ѐ'];
        k = ((InflaterInputStream)localObject1).read((byte[])localObject2);
        if (k != -1) {
          break label238;
        }
        LOGI(i + localByteArrayOutputStream.toString());
      }
      catch (IOException localIOException)
      {
        localObject1 = new StringWriter();
        localObject2 = new PrintWriter((Writer)localObject1, true);
        localIOException.printStackTrace((PrintWriter)localObject2);
        ((PrintWriter)localObject2).flush();
        ((StringWriter)localObject1).flush();
        LOGW("exception", ((StringWriter)localObject1).toString());
      }
      break label35;
      break;
      label238:
      localIOException.write((byte[])localObject2, 0, k);
    }
  }
  
  public static void deleteExpireFile(String paramString, int paramInt)
  {
    if ((paramString == null) || (paramString.length() == 0)) {}
    for (;;)
    {
      return;
      LOGI("file path:" + paramString);
      try
      {
        paramString = new File(paramString);
        if (!paramString.isDirectory()) {
          continue;
        }
        paramString = paramString.listFiles();
        if (paramString == null) {
          continue;
        }
        int j = paramString.length;
        int i = 0;
        while (i < j)
        {
          if ((!paramString[i].isDirectory()) && ((System.currentTimeMillis() - paramString[i].lastModified()) / 1000L > paramInt)) {
            paramString[i].delete();
          }
          i += 1;
        }
        StringWriter localStringWriter;
        PrintWriter localPrintWriter;
        return;
      }
      catch (Exception paramString)
      {
        localStringWriter = new StringWriter();
        localPrintWriter = new PrintWriter(localStringWriter, true);
        paramString.printStackTrace(localPrintWriter);
        localPrintWriter.flush();
        localStringWriter.flush();
        LOGW("exception", localStringWriter.toString());
      }
    }
  }
  
  public static void deleteExpireLog(Context paramContext)
  {
    if (paramContext == null) {
      return;
    }
    try
    {
      if (ExistSDCard())
      {
        deleteExpireFile(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + "tencent/wtlogin" + "/" + paramContext.getPackageName(), 691200);
        return;
      }
    }
    catch (Exception paramContext)
    {
      StringWriter localStringWriter = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
      paramContext.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      localStringWriter.flush();
      LOGW("exception", localStringWriter.toString());
      return;
    }
    deleteExpireFile(paramContext.getFilesDir().getPath() + "/" + "tencent/wtlogin", 259200);
  }
  
  public static int format_ret_code(int paramInt, String paramString)
  {
    switch (paramInt)
    {
    }
    do
    {
      return 17;
      return 0;
      return 1;
      return 2;
      return 5;
    } while (paramString == null);
    return 16;
  }
  
  public static String getCurrentDay()
  {
    return new SimpleDateFormat("yyyyMMdd").format(new Date());
  }
  
  public static String getDate()
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    return "[" + localSimpleDateFormat.format(new Date()) + "]";
  }
  
  public static String getFileMD5(File paramFile)
  {
    if (!paramFile.isFile()) {
      return null;
    }
    byte[] arrayOfByte = new byte['Ѐ'];
    try
    {
      MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
      paramFile = new FileInputStream(paramFile);
      try
      {
        for (;;)
        {
          int i = paramFile.read(arrayOfByte, 0, 1024);
          if (i == -1)
          {
            paramFile.close();
            return new BigInteger(1, localMessageDigest.digest()).toString(16);
          }
          localMessageDigest.update(arrayOfByte, 0, i);
        }
        printException(paramFile);
      }
      catch (Exception paramFile) {}
    }
    catch (Exception paramFile)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static long getFileModifyTime(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {}
    for (;;)
    {
      return 0L;
      try
      {
        paramString = new File(paramString);
        if ((paramString.exists()) && (paramString.isFile()))
        {
          long l = paramString.lastModified();
          return l;
        }
      }
      catch (Exception paramString)
      {
        StringWriter localStringWriter = new StringWriter();
        PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
        paramString.printStackTrace(localPrintWriter);
        localPrintWriter.flush();
        localStringWriter.flush();
        LOGW("exception", localStringWriter.toString());
      }
    }
    return 0L;
  }
  
  public static int getFileSize(String paramString)
  {
    int j = 0;
    try
    {
      paramString = new File(paramString);
      int i = j;
      if (paramString.exists())
      {
        i = j;
        if (paramString.isFile())
        {
          long l = paramString.length();
          i = (int)l;
        }
      }
      return i;
    }
    catch (Exception paramString)
    {
      StringWriter localStringWriter = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
      paramString.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      localStringWriter.flush();
      LOGW("exception", localStringWriter.toString());
    }
    return 0;
  }
  
  public static String getLineInfo(int paramInt)
  {
    if (paramInt < 0) {
      return "";
    }
    try
    {
      Object localObject = new Throwable().getStackTrace()[paramInt];
      localObject = "[" + ((StackTraceElement)localObject).getFileName() + ":" + ((StackTraceElement)localObject).getLineNumber() + "]";
      return localObject;
    }
    catch (Exception localException) {}
    return "";
  }
  
  public static String getLogFileName(Context paramContext, String paramString)
  {
    if ((paramContext == null) || (paramString == null) || (paramString.length() == 0)) {
      return null;
    }
    try
    {
      if (ExistSDCard()) {
        return Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + "tencent/wtlogin" + "/" + paramContext.getPackageName() + "/" + base64_encode(paramString.getBytes());
      }
      paramContext = paramContext.getFilesDir().getPath() + "/" + "tencent/wtlogin" + "/" + base64_encode(paramString.getBytes());
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramString = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter(paramString, true);
      paramContext.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      paramString.flush();
      LOGW("exception", paramString.toString());
    }
    return null;
  }
  
  public static long getLogModifyTime(Context paramContext, String paramString)
  {
    if ((paramContext == null) || (paramString == null) || (paramString.length() == 0)) {
      return 0L;
    }
    return getFileModifyTime(getLogFileName(paramContext, paramString));
  }
  
  public static String getPkgMD5FromPid(Context paramContext, long paramLong)
  {
    List localList = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses();
    int j = localList.size();
    int i = 0;
    for (;;)
    {
      if (i >= j) {}
      for (;;)
      {
        return null;
        Object localObject = (ActivityManager.RunningAppProcessInfo)localList.get(i);
        if (((ActivityManager.RunningAppProcessInfo)localObject).pid == paramLong) {
          try
          {
            if ((((ActivityManager.RunningAppProcessInfo)localObject).pkgList != null) && (((ActivityManager.RunningAppProcessInfo)localObject).pkgList.length > 0) && (localObject.pkgList[0].length() > 0))
            {
              localObject = getFileMD5(new File(paramContext.getPackageManager().getPackageInfo(localObject.pkgList[0], 0).applicationInfo.publicSourceDir));
              return localObject;
            }
          }
          catch (Exception localException)
          {
            printException(localException);
          }
        }
      }
      i += 1;
    }
  }
  
  public static String getPkgNameFromPid(Context paramContext, long paramLong)
  {
    List localList = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses();
    int j = localList.size();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return "";
      }
      Object localObject = (ActivityManager.RunningAppProcessInfo)localList.get(i);
      if (((ActivityManager.RunningAppProcessInfo)localObject).pid == paramLong) {
        try
        {
          if ((((ActivityManager.RunningAppProcessInfo)localObject).pkgList != null) && (((ActivityManager.RunningAppProcessInfo)localObject).pkgList.length > 0) && (localObject.pkgList[0].length() > 0))
          {
            localObject = paramContext.getPackageManager().getPackageInfo(localObject.pkgList[0], 64);
            if (localObject == null)
            {
              localObject = ((PackageInfo)localObject).packageName;
              return localObject;
            }
          }
          else
          {
            return "";
          }
        }
        catch (Exception localException)
        {
          printException(localException);
        }
      }
      i += 1;
    }
  }
  
  public static byte[] getPkgPublicKeyFromApkName(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramString, 64);
      if ((paramContext.signatures != null) && (paramContext.signatures.length > 0))
      {
        if (paramContext.signatures[0] == null) {
          return null;
        }
        paramContext = MD5.toMD5Byte(((X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(paramContext.signatures[0].toByteArray()))).getPublicKey().getEncoded());
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      printException(paramContext);
    }
    return null;
  }
  
  public static byte[] getPkgPublicKeyFromPid(Context paramContext, long paramLong)
  {
    List localList = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses();
    int j = localList.size();
    int i = 0;
    for (;;)
    {
      if (i >= j) {}
      for (;;)
      {
        return null;
        Object localObject = (ActivityManager.RunningAppProcessInfo)localList.get(i);
        if (((ActivityManager.RunningAppProcessInfo)localObject).pid == paramLong) {
          try
          {
            if ((((ActivityManager.RunningAppProcessInfo)localObject).pkgList != null) && (((ActivityManager.RunningAppProcessInfo)localObject).pkgList.length > 0) && (localObject.pkgList[0].length() > 0))
            {
              localObject = paramContext.getPackageManager().getPackageInfo(localObject.pkgList[0], 64);
              if ((((PackageInfo)localObject).signatures != null) && (((PackageInfo)localObject).signatures.length > 0) && (localObject.signatures[0] != null))
              {
                localObject = MD5.toMD5Byte(((X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(localObject.signatures[0].toByteArray()))).getPublicKey().getEncoded());
                return localObject;
              }
            }
          }
          catch (Exception localException)
          {
            printException(localException);
          }
        }
      }
      i += 1;
    }
  }
  
  public static long getSDAllSize()
  {
    StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
    long l = localStatFs.getBlockSize();
    return localStatFs.getBlockCount() * l;
  }
  
  public static long getSDFreeSize()
  {
    Object localObject = Environment.getExternalStorageDirectory();
    Log.i("wlogin_sdk", "sdcard path:" + ((File)localObject).getAbsolutePath());
    localObject = new StatFs(((File)localObject).getPath());
    long l = ((StatFs)localObject).getBlockSize();
    return ((StatFs)localObject).getAvailableBlocks() * l;
  }
  
  public static String getSdkVersion()
  {
    return "[" + SSO_VERSION + "]";
  }
  
  public static String getThreadId()
  {
    return "[" + Thread.currentThread().getId() + "]";
  }
  
  public static String getUser(String paramString)
  {
    if (paramString != null) {
      return "[" + paramString + "]";
    }
    return "[]";
  }
  
  public static byte[] get_IMEI(Context paramContext)
  {
    Object localObject1 = null;
    Object localObject3 = null;
    try
    {
      Object localObject2 = (TelephonyManager)paramContext.getSystemService("phone");
      if (localObject2 != null) {
        localObject1 = ((TelephonyManager)localObject2).getDeviceId();
      }
      paramContext = (WifiManager)paramContext.getSystemService("wifi");
      localObject2 = localObject3;
      if (paramContext != null)
      {
        paramContext = paramContext.getConnectionInfo();
        localObject2 = localObject3;
        if (paramContext != null) {
          localObject2 = paramContext.getMacAddress();
        }
      }
      paramContext = "";
      if (localObject1 != null) {
        paramContext = "" + (String)localObject1;
      }
      localObject1 = paramContext;
      if (localObject2 != null) {
        localObject1 = paramContext + (String)localObject2;
      }
      if (((String)localObject1).length() <= 0) {
        return new byte[0];
      }
      paramContext = MD5.toMD5Byte(((String)localObject1).getBytes());
      return paramContext;
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static byte[] get_apk_id(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageName().getBytes();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static byte[] get_apk_sig(Context paramContext, String paramString)
  {
    try
    {
      paramContext = getPkgPublicKeyFromApkName(paramContext, paramString);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static byte[] get_apk_v(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramString, 0).versionName.getBytes();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static String get_apn_string(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext.getType() == 0)
      {
        paramContext = paramContext.getExtraInfo();
        if (paramContext != null) {
          return paramContext;
        }
      }
      else
      {
        return "wifi";
      }
    }
    catch (Exception paramContext) {}
    return "wifi";
  }
  
  public static byte get_char(byte paramByte)
  {
    if ((paramByte >= 48) && (paramByte <= 57)) {
      return (byte)(paramByte - 48);
    }
    if ((paramByte >= 97) && (paramByte <= 102)) {
      return (byte)(paramByte - 97 + 10);
    }
    if ((paramByte >= 65) && (paramByte <= 70)) {
      return (byte)(paramByte - 65 + 10);
    }
    return 0;
  }
  
  public static long get_cur_time()
  {
    return request_global.get_cur_time();
  }
  
  public static byte[] get_imei_id(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext != null)
      {
        paramContext = paramContext.getDeviceId();
        if (paramContext != null)
        {
          paramContext = paramContext.getBytes();
          return paramContext;
        }
      }
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static byte[] get_ksid(Context paramContext)
  {
    byte[] arrayOfByte = new String("").getBytes();
    try
    {
      paramContext = string_to_buf(paramContext.getSharedPreferences("WLOGIN_DEVICE_INFO", 0).getString("ksid", new String("")));
      if ((paramContext == null) || (paramContext.length <= 0))
      {
        LOGD("get_ksid:null");
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        StringWriter localStringWriter = new StringWriter();
        PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
        paramContext.printStackTrace(localPrintWriter);
        localPrintWriter.flush();
        localStringWriter.flush();
        LOGW("exception", localStringWriter.toString());
        paramContext = arrayOfByte;
      }
      LOGD("get_ksid:" + buf_to_string(paramContext));
    }
    return paramContext;
  }
  
  public static byte[] get_mac_addr(Context paramContext)
  {
    try
    {
      paramContext = (WifiManager)paramContext.getSystemService("wifi");
      if (paramContext != null)
      {
        paramContext = paramContext.getConnectionInfo();
        if (paramContext != null)
        {
          paramContext = paramContext.getMacAddress();
          if (paramContext != null)
          {
            paramContext = paramContext.getBytes();
            return paramContext;
          }
        }
      }
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static int get_net_retry_type(Context paramContext)
  {
    return paramContext.getSharedPreferences("WLOGIN_NET_RETRY_TYPE", 0).getInt("type", 0);
  }
  
  public static int get_network_type(Context paramContext)
  {
    try
    {
      i = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo().getType();
      if (i == 0) {
        return 1;
      }
    }
    catch (Exception paramContext)
    {
      int i;
      for (;;)
      {
        i = 0;
      }
      if (i == 1) {
        return 2;
      }
    }
    return 0;
  }
  
  public static int get_os_type(int paramInt)
  {
    return 1;
  }
  
  public static byte[] get_os_type()
  {
    return new String("android").getBytes();
  }
  
  public static byte[] get_os_version()
  {
    return Build.VERSION.RELEASE.getBytes();
  }
  
  @SuppressLint({"NewApi"})
  @TargetApi(4)
  public static String get_proxy_ip()
  {
    if (Build.VERSION.SDK_INT < HONEYCOMB) {
      return Proxy.getDefaultHost();
    }
    return System.getProperty("http.proxyHost");
  }
  
  @SuppressLint({"NewApi", "NewApi"})
  @TargetApi(4)
  public static int get_proxy_port()
  {
    if (Build.VERSION.SDK_INT < HONEYCOMB) {
      return Proxy.getDefaultPort();
    }
    try
    {
      int i = Integer.parseInt(System.getProperty("http.proxyPort"));
      return i;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      localNumberFormatException.printStackTrace();
    }
    return -1;
  }
  
  public static int get_rand_16()
  {
    return (int)(Math.random() * 2.147483647E9D);
  }
  
  public static byte[] get_rand_16byte(SecureRandom paramSecureRandom)
  {
    return SecureRandom.getSeed(16);
  }
  
  public static byte[] get_rand_16byte(SecureRandom paramSecureRandom, byte[] paramArrayOfByte)
  {
    paramSecureRandom = SecureRandom.getSeed(16);
    byte[] arrayOfByte = new byte[paramSecureRandom.length + paramArrayOfByte.length];
    System.arraycopy(paramSecureRandom, 0, arrayOfByte, 0, paramSecureRandom.length);
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte, paramSecureRandom.length, paramArrayOfByte.length);
    return MD5.toMD5Byte(arrayOfByte);
  }
  
  public static int get_rand_32()
  {
    return (int)(Math.random() * 2.147483647E9D);
  }
  
  public static byte[] get_rand_8byte()
  {
    int i = (int)(Math.random() * 2.147483647E9D);
    byte[] arrayOfByte = new byte[8];
    int32_to_buf(arrayOfByte, 0, i);
    int32_to_buf(arrayOfByte, 4, (int)(Math.random() * 2.147483647E9D));
    return arrayOfByte;
  }
  
  public static byte[] get_rand_IMEI(Context paramContext)
  {
    paramContext = new byte[16];
    int32_to_buf(paramContext, 0, get_rand_32());
    int32_to_buf(paramContext, 4, get_rand_32());
    int32_to_buf(paramContext, 8, get_rand_32());
    int32_to_buf(paramContext, 12, get_rand_32());
    return MD5.toMD5Byte(paramContext);
  }
  
  public static String get_release_time()
  {
    return new String("2013/07/16 19:40");
  }
  
  public static byte[] get_saved_imei(Context paramContext)
  {
    byte[] arrayOfByte = new byte[0];
    try
    {
      paramContext = string_to_buf(paramContext.getSharedPreferences("WLOGIN_DEVICE_INFO", 0).getString("imei", new String("")));
      if ((paramContext == null) || (paramContext.length <= 0)) {
        return new byte[0];
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        StringWriter localStringWriter = new StringWriter();
        PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
        paramContext.printStackTrace(localPrintWriter);
        localPrintWriter.flush();
        localStringWriter.flush();
        LOGW("exception", localStringWriter.toString());
        paramContext = arrayOfByte;
      }
      LOGD("get_imei:" + buf_to_string(paramContext));
    }
    return paramContext;
  }
  
  public static int get_saved_network_type(Context paramContext)
  {
    return paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).getInt("network_type", 0);
  }
  
  public static long get_server_cur_time()
  {
    return request_global.get_server_cur_time();
  }
  
  public static byte[] get_server_host1(Context paramContext)
  {
    return paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).getString("host1", "").getBytes();
  }
  
  public static byte[] get_server_host2(Context paramContext)
  {
    return paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).getString("host2", "").getBytes();
  }
  
  public static byte[] get_signature(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 64).signatures[0].toByteArray();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static byte[] get_sim_operator_name(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext.getSimState() == 5)
      {
        paramContext = paramContext.getSimOperatorName().getBytes();
        return paramContext;
      }
    }
    catch (Exception paramContext) {}
    return new byte[0];
  }
  
  public static byte[] get_wap_server_host1(Context paramContext)
  {
    return paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).getString("wap-host1", "").getBytes();
  }
  
  public static byte[] get_wap_server_host2(Context paramContext)
  {
    return paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).getString("wap-host2", "").getBytes();
  }
  
  public static void int16_to_buf(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    paramArrayOfByte[(paramInt1 + 1)] = ((byte)(paramInt2 >> 0));
    paramArrayOfByte[(paramInt1 + 0)] = ((byte)(paramInt2 >> 8));
  }
  
  public static void int32_to_buf(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    paramArrayOfByte[(paramInt1 + 3)] = ((byte)(paramInt2 >> 0));
    paramArrayOfByte[(paramInt1 + 2)] = ((byte)(paramInt2 >> 8));
    paramArrayOfByte[(paramInt1 + 1)] = ((byte)(paramInt2 >> 16));
    paramArrayOfByte[(paramInt1 + 0)] = ((byte)(paramInt2 >> 24));
  }
  
  public static void int64_to_buf(byte[] paramArrayOfByte, int paramInt, long paramLong)
  {
    paramArrayOfByte[(paramInt + 7)] = ((byte)(int)(paramLong >> 0));
    paramArrayOfByte[(paramInt + 6)] = ((byte)(int)(paramLong >> 8));
    paramArrayOfByte[(paramInt + 5)] = ((byte)(int)(paramLong >> 16));
    paramArrayOfByte[(paramInt + 4)] = ((byte)(int)(paramLong >> 24));
    paramArrayOfByte[(paramInt + 3)] = ((byte)(int)(paramLong >> 32));
    paramArrayOfByte[(paramInt + 2)] = ((byte)(int)(paramLong >> 40));
    paramArrayOfByte[(paramInt + 1)] = ((byte)(int)(paramLong >> 48));
    paramArrayOfByte[(paramInt + 0)] = ((byte)(int)(paramLong >> 56));
  }
  
  public static void int64_to_buf32(byte[] paramArrayOfByte, int paramInt, long paramLong)
  {
    paramArrayOfByte[(paramInt + 3)] = ((byte)(int)(paramLong >> 0));
    paramArrayOfByte[(paramInt + 2)] = ((byte)(int)(paramLong >> 8));
    paramArrayOfByte[(paramInt + 1)] = ((byte)(int)(paramLong >> 16));
    paramArrayOfByte[(paramInt + 0)] = ((byte)(int)(paramLong >> 24));
  }
  
  public static void int8_to_buf(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    paramArrayOfByte[(paramInt1 + 0)] = ((byte)(paramInt2 >> 0));
  }
  
  public static boolean isFileExist(String paramString)
  {
    try
    {
      boolean bool = new File(paramString).exists();
      return bool;
    }
    catch (Exception paramString) {}
    return false;
  }
  
  public static boolean is_wap_proxy_retry(Context paramContext)
  {
    try
    {
      paramContext = get_apn_string(paramContext);
      if (paramContext != null)
      {
        if (paramContext.equalsIgnoreCase("cmwap")) {
          return true;
        }
        if ((paramContext.equalsIgnoreCase("uniwap")) || (paramContext.equalsIgnoreCase("ctwap"))) {
          break label59;
        }
        boolean bool = paramContext.equalsIgnoreCase("3gwap");
        if (bool) {
          break label59;
        }
      }
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
    return false;
    label59:
    return true;
  }
  
  public static boolean is_wap_retry(Context paramContext)
  {
    return get_net_retry_type(paramContext) != 0;
  }
  
  public static void printException(Exception paramException)
  {
    StringWriter localStringWriter = new StringWriter();
    PrintWriter localPrintWriter = new PrintWriter(localStringWriter, true);
    paramException.printStackTrace(localPrintWriter);
    localPrintWriter.flush();
    localStringWriter.flush();
    LOGW("exception:", localStringWriter.toString());
  }
  
  public static byte[] readFile(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {
      return null;
    }
    try
    {
      localObject = new File(paramString);
      if ((((File)localObject).exists()) && (((File)localObject).isFile()))
      {
        paramString = new FileInputStream(paramString);
        int i = paramString.available();
        if (i > 106496)
        {
          paramString.close();
          return null;
        }
        localObject = new byte[i];
        paramString.read((byte[])localObject);
        paramString.close();
        return localObject;
      }
    }
    catch (Exception paramString)
    {
      Object localObject = new StringWriter();
      PrintWriter localPrintWriter = new PrintWriter((Writer)localObject, true);
      paramString.printStackTrace(localPrintWriter);
      localPrintWriter.flush();
      ((StringWriter)localObject).flush();
      LOGW("exception", ((StringWriter)localObject).toString());
      return null;
    }
    return null;
  }
  
  public static byte[] readLog(Context paramContext, String paramString)
  {
    if ((paramContext == null) || (paramString == null) || (paramString.length() == 0)) {
      return null;
    }
    return readFile(getLogFileName(paramContext, paramString));
  }
  
  public static void save_imei(Context paramContext, byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte != null) && (paramArrayOfByte.length > 0))
    {
      paramContext = paramContext.getSharedPreferences("WLOGIN_DEVICE_INFO", 0).edit();
      paramContext.putString("imei", buf_to_string(paramArrayOfByte));
      paramContext.commit();
    }
  }
  
  public static void save_network_type(Context paramContext, int paramInt)
  {
    paramContext = paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).edit();
    paramContext.putInt("network_type", paramInt);
    paramContext.commit();
  }
  
  public static void set_ksid(Context paramContext, byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = get_ksid(paramContext);
    if ((arrayOfByte == null) || (arrayOfByte.length <= 0))
    {
      paramContext = paramContext.getSharedPreferences("WLOGIN_DEVICE_INFO", 0).edit();
      paramContext.putString("ksid", buf_to_string(paramArrayOfByte));
      paramContext.commit();
    }
  }
  
  public static void set_net_retry_type(Context paramContext, int paramInt)
  {
    paramContext = paramContext.getSharedPreferences("WLOGIN_NET_RETRY_TYPE", 0).edit();
    paramContext.putInt("type", paramInt);
    paramContext.commit();
  }
  
  public static void set_server_host1(Context paramContext, byte[] paramArrayOfByte)
  {
    paramContext = paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).edit();
    paramContext.putString("host1", new String(paramArrayOfByte));
    paramContext.commit();
  }
  
  public static void set_server_host2(Context paramContext, byte[] paramArrayOfByte)
  {
    paramContext = paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).edit();
    paramContext.putString("host2", new String(paramArrayOfByte));
    paramContext.commit();
  }
  
  public static void set_wap_server_host1(Context paramContext, byte[] paramArrayOfByte)
  {
    paramContext = paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).edit();
    paramContext.putString("wap-host1", new String(paramArrayOfByte));
    paramContext.commit();
  }
  
  public static void set_wap_server_host2(Context paramContext, byte[] paramArrayOfByte)
  {
    paramContext = paramContext.getSharedPreferences("WLOGIN_SERVER_INFO", 0).edit();
    paramContext.putString("wap-host2", new String(paramArrayOfByte));
    paramContext.commit();
  }
  
  public static byte[] string_to_buf(String paramString)
  {
    Object localObject;
    if (paramString == null)
    {
      localObject = new byte[0];
      return localObject;
    }
    byte[] arrayOfByte = new byte[paramString.length() / 2];
    int i = 0;
    for (;;)
    {
      localObject = arrayOfByte;
      if (i >= paramString.length() / 2) {
        break;
      }
      arrayOfByte[i] = ((byte)((get_char((byte)paramString.charAt(i * 2)) << 4) + get_char((byte)paramString.charAt(i * 2 + 1))));
      i += 1;
    }
  }
  
  public static byte[] tlv_to_bytes(int paramInt, byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = new byte[paramArrayOfByte.length + 4];
    int16_to_buf(arrayOfByte, 0, paramInt);
    int16_to_buf(arrayOfByte, 2, paramArrayOfByte.length);
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 4, paramArrayOfByte.length);
    return arrayOfByte;
  }
  
  public static boolean unsigned_bigthan(long paramLong1, long paramLong2)
  {
    if ((paramLong1 < 0L) && (paramLong2 >= 0L)) {}
    do
    {
      return true;
      if ((paramLong1 >= 0L) && (paramLong2 < 0L)) {
        return false;
      }
    } while (paramLong1 > paramLong2);
    return false;
  }
  
  /* Error */
  public static void writeFile(String paramString, byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: aload_0
    //   4: ifnull +12 -> 16
    //   7: aload_0
    //   8: invokevirtual 486	java/lang/String:length	()I
    //   11: istore_2
    //   12: iload_2
    //   13: ifne +7 -> 20
    //   16: ldc 2
    //   18: monitorexit
    //   19: return
    //   20: new 490	java/io/File
    //   23: dup
    //   24: aload_0
    //   25: invokespecial 491	java/io/File:<init>	(Ljava/lang/String;)V
    //   28: astore_3
    //   29: aload_3
    //   30: invokevirtual 603	java/io/File:exists	()Z
    //   33: ifne +30 -> 63
    //   36: aload_3
    //   37: invokevirtual 1043	java/io/File:getParentFile	()Ljava/io/File;
    //   40: astore 4
    //   42: aload 4
    //   44: ifnull -28 -> 16
    //   47: aload 4
    //   49: invokevirtual 1046	java/io/File:mkdirs	()Z
    //   52: ifne +11 -> 63
    //   55: aload 4
    //   57: invokevirtual 494	java/io/File:isDirectory	()Z
    //   60: ifeq -44 -> 16
    //   63: aload_0
    //   64: invokestatic 1048	oicq/wlogin_sdk/tools/util:getFileSize	(Ljava/lang/String;)I
    //   67: ldc 89
    //   69: if_icmpge -53 -> 16
    //   72: new 1050	java/io/FileOutputStream
    //   75: dup
    //   76: aload_3
    //   77: iconst_1
    //   78: invokespecial 1053	java/io/FileOutputStream:<init>	(Ljava/io/File;Z)V
    //   81: astore_0
    //   82: aload_0
    //   83: aload_1
    //   84: invokevirtual 1054	java/io/FileOutputStream:write	([B)V
    //   87: aload_0
    //   88: invokevirtual 1055	java/io/FileOutputStream:close	()V
    //   91: goto -75 -> 16
    //   94: astore_0
    //   95: new 424	java/io/StringWriter
    //   98: dup
    //   99: invokespecial 425	java/io/StringWriter:<init>	()V
    //   102: astore_1
    //   103: new 427	java/io/PrintWriter
    //   106: dup
    //   107: aload_1
    //   108: iconst_1
    //   109: invokespecial 430	java/io/PrintWriter:<init>	(Ljava/io/Writer;Z)V
    //   112: astore_3
    //   113: aload_0
    //   114: aload_3
    //   115: invokevirtual 511	java/lang/Exception:printStackTrace	(Ljava/io/PrintWriter;)V
    //   118: aload_3
    //   119: invokevirtual 437	java/io/PrintWriter:flush	()V
    //   122: aload_1
    //   123: invokevirtual 438	java/io/StringWriter:flush	()V
    //   126: ldc_w 440
    //   129: aload_1
    //   130: invokevirtual 441	java/io/StringWriter:toString	()Ljava/lang/String;
    //   133: invokestatic 443	oicq/wlogin_sdk/tools/util:LOGW	(Ljava/lang/String;Ljava/lang/String;)V
    //   136: goto -120 -> 16
    //   139: astore_0
    //   140: ldc 2
    //   142: monitorexit
    //   143: aload_0
    //   144: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	145	0	paramString	String
    //   0	145	1	paramArrayOfByte	byte[]
    //   11	2	2	i	int
    //   28	91	3	localObject	Object
    //   40	16	4	localFile	File
    // Exception table:
    //   from	to	target	type
    //   20	42	94	java/lang/Exception
    //   47	63	94	java/lang/Exception
    //   63	91	94	java/lang/Exception
    //   7	12	139	finally
    //   20	42	139	finally
    //   47	63	139	finally
    //   63	91	139	finally
    //   95	136	139	finally
  }
  
  private static final class APNName
  {
    public static final String NAME_3GNET = "3gnet";
    public static final String NAME_3GWAP = "3gwap";
    public static final String NAME_CMCC = "cmcc";
    public static final String NAME_CMCT = "cmct";
    public static final String NAME_CMNET = "cmnet";
    public static final String NAME_CMWAP = "cmwap";
    public static final String NAME_CTNET = "ctnet";
    public static final String NAME_CTWAP = "ctwap";
    public static final String NAME_UNICOM = "unicom";
    public static final String NAME_UNINET = "uninet";
    public static final String NAME_UNIWAP = "uniwap";
    public static final String NAME_WIFI = "wifi";
    
    private APNName() {}
  }
}
