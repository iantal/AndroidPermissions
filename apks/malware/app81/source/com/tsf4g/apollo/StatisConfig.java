package com.tsf4g.apollo;

import android.app.Activity;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import java.io.InputStream;
import java.util.HashMap;
import org.json.JSONException;
import org.json.JSONObject;

public class StatisConfig
  extends Activity
{
  HashMap<String, String> BaseConfig = new HashMap();
  final String FILE_NAME = "StatisBaseConfig.ini";
  String strJsonCfg = null;
  
  public StatisConfig() {}
  
  private String read(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open("StatisBaseConfig.ini");
      byte[] arrayOfByte = new byte['Ð€'];
      StringBuilder localStringBuilder = new StringBuilder("");
      for (;;)
      {
        int i = paramContext.read(arrayOfByte);
        if (i <= 0)
        {
          paramContext.close();
          return localStringBuilder.toString();
        }
        localStringBuilder.append(new String(arrayOfByte, 0, i));
      }
      return null;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public String GetBaseConfig(Context paramContext)
  {
    Object localObject = read(paramContext);
    int i;
    if (localObject != null)
    {
      ((String)localObject).replace("\r\n", "");
      paramContext = (Context)localObject;
      if (((String)localObject).contains("\r\n")) {
        paramContext = ((String)localObject).replace("\r\n", "\n");
      }
      paramContext = paramContext.replace(" ", "").split("\n");
      localObject = new JSONObject();
      i = 0;
    }
    for (;;)
    {
      if (i >= paramContext.length)
      {
        this.strJsonCfg = new String(((JSONObject)localObject).toString());
        return this.strJsonCfg;
      }
      String[] arrayOfString = paramContext[i].split("=");
      this.BaseConfig.put(arrayOfString[0], arrayOfString[1]);
      try
      {
        ((JSONObject)localObject).put(arrayOfString[0], arrayOfString[1]);
        i += 1;
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          localJSONException.printStackTrace();
        }
      }
    }
  }
}
