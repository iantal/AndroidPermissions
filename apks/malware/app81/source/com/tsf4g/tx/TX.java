package com.tsf4g.tx;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.os.Message;
import java.io.File;
import java.io.PrintStream;

public class TX
{
  public static TX Instance = new TX();
  NetworkStateChecker NetChecker = new NetworkStateChecker();
  private Handler mHandler = null;
  private Context m_cntxt;
  private String m_szBundleId = null;
  private String m_szModel = null;
  private String m_szSysVersion = null;
  private String m_szUdid = null;
  TXPaths paths = new TXPaths();
  private Thread savedMainThread = null;
  TXSystem xsystem = new TXSystem();
  
  static
  {
    System.loadLibrary("apollo");
  }
  
  private TX() {}
  
  private void CreateMainHandler()
  {
    this.mHandler = new Handler()
    {
      public void handleMessage(Message paramAnonymousMessage)
      {
        if (Thread.currentThread() == TX.this.savedMainThread) {
          System.out.println("Main Thread:" + TX.this.savedMainThread + "Current Thread:" + Thread.currentThread());
        }
        for (;;)
        {
          TX.this.callJNIperform(Integer.parseInt(paramAnonymousMessage.obj.toString()));
          TX.this.wakeup();
          return;
          System.out.println("Main Thread:" + TX.this.savedMainThread + "Current Thread:" + Thread.currentThread());
        }
      }
    };
  }
  
  private void TXcallJNIperform(int paramInt)
  {
    callJNIperform(paramInt);
  }
  
  private void cacheSystemInfo(Context paramContext)
  {
    this.m_szUdid = this.xsystem.GetUdid(paramContext);
    this.m_szBundleId = this.xsystem.GetBundleId(paramContext);
    this.m_szModel = this.xsystem.GetModel();
    this.m_szSysVersion = this.xsystem.GetSysVersion();
  }
  
  private native void callJNIonTXCreate(TXPaths paramTXPaths);
  
  private native void callJNIonTest();
  
  private native void callJNIperform(int paramInt);
  
  private void callbackFromJNI(int paramInt)
  {
    Message localMessage = new Message();
    localMessage.obj = Integer.valueOf(paramInt);
    if (Thread.currentThread() == this.savedMainThread)
    {
      System.out.println("Main Thread:" + this.savedMainThread + "Current Thread:" + Thread.currentThread());
      callJNIperform(paramInt);
      return;
    }
    System.out.println("Main Thread:" + this.savedMainThread + "Current Thread:" + Thread.currentThread());
    System.out.println("Send msg to MainThread");
    sendMsg(localMessage, this.mHandler);
  }
  
  private int checkNetworkState()
  {
    System.out.println("TX checkNetworkState");
    return this.NetChecker.CheckNetworkState(this.m_cntxt);
  }
  
  /* Error */
  private void sendMsg(Message paramMessage, Handler paramHandler)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 51	com/tsf4g/tx/TX:mHandler	Landroid/os/Handler;
    //   6: aload_1
    //   7: invokevirtual 176	android/os/Handler:sendMessage	(Landroid/os/Message;)Z
    //   10: pop
    //   11: aload_0
    //   12: invokevirtual 179	java/lang/Object:wait	()V
    //   15: aload_0
    //   16: monitorexit
    //   17: return
    //   18: astore_1
    //   19: aload_1
    //   20: invokevirtual 182	java/lang/InterruptedException:printStackTrace	()V
    //   23: goto -8 -> 15
    //   26: astore_1
    //   27: aload_0
    //   28: monitorexit
    //   29: aload_1
    //   30: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	31	0	this	TX
    //   0	31	1	paramMessage	Message
    //   0	31	2	paramHandler	Handler
    // Exception table:
    //   from	to	target	type
    //   11	15	18	java/lang/InterruptedException
    //   2	11	26	finally
    //   11	15	26	finally
    //   19	23	26	finally
  }
  
  private void wakeup()
  {
    try
    {
      notify();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void Initialize(Activity paramActivity)
  {
    System.out.println("TX Initialize");
    this.m_cntxt = paramActivity.getApplicationContext();
    getPaths(this.m_cntxt);
    this.savedMainThread = Thread.currentThread();
    CreateMainHandler();
    callJNIonTXCreate(this.paths);
    cacheSystemInfo(this.m_cntxt);
    System.out.println("TX Initialize ends");
  }
  
  public native void NetworkStateChangeNotify(int paramInt);
  
  void getPaths(Context paramContext)
  {
    File localFile = paramContext.getFilesDir();
    paramContext = paramContext.getCacheDir();
    this.paths.DataPath = (localFile.getAbsolutePath() + "/");
    this.paths.CachePath = (paramContext.getAbsolutePath() + "/");
    this.paths.AppPath = this.paths.CachePath.substring(0, this.paths.CachePath.lastIndexOf("/") + 1);
    System.out.println("AppPath:" + this.paths.AppPath + "\nCachePath:" + this.paths.CachePath + "\nDataPath:" + this.paths.DataPath);
  }
}
