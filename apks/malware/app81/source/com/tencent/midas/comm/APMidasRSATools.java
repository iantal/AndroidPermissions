package com.tencent.midas.comm;

import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;

public class APMidasRSATools
{
  private final String a = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy+ZF2XdZ6RwK/lAtyC7h\rLA4KaURXrD7gEGcx+t/l8KKLTLfR3j4vOHXHXjixipSXicyJcDH74rfO7ISnFkWQ\r+kVmB5kfhdrq5z6D/h/q7ko7MdU9SUlfZfAxwnS4VJY4xWoFWG9ZAoh5ZHJcloDU\rol0qYTUX/yWNiHkoUtnU+SP+ZJjODpqcYuVdLxlA0YelafeBc3SCeuEcPH9lIiRZ\rw0I91wQvPq7gM7/6qnMEdzm7nJdCIni83INl2bh3gW5UBwFBpNrI/fZkgDA4aVGV\rpplEP9bChkCpq2e1T9gw0ODuEVmgVaSvdwHLMYcGn+nYjWDYy16b6ImdkubF8q5l\rhwIDAQAB\r";
  private RSAPublicKey b;
  
  public APMidasRSATools() {}
  
  private byte a(char paramChar)
  {
    return (byte)"0123456789ABCDEF".indexOf(paramChar);
  }
  
  private byte[] a(String paramString)
  {
    if ((paramString == null) || (paramString.equals("")))
    {
      paramString = null;
      return paramString;
    }
    paramString = paramString.toUpperCase();
    int j = paramString.length() / 2;
    char[] arrayOfChar = paramString.toCharArray();
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    for (;;)
    {
      paramString = arrayOfByte;
      if (i >= j) {
        break;
      }
      int k = i * 2;
      int m = a(arrayOfChar[k]);
      arrayOfByte[i] = ((byte)(a(arrayOfChar[(k + 1)]) | m << 4));
      i += 1;
    }
  }
  
  private byte[] a(RSAPublicKey paramRSAPublicKey, byte[] paramArrayOfByte)
  {
    if (paramRSAPublicKey == null) {
      throw new Exception("解密私钥为空, 请设置");
    }
    try
    {
      Cipher localCipher = Cipher.getInstance("RSA");
      localCipher.init(2, paramRSAPublicKey);
      paramRSAPublicKey = localCipher.doFinal(paramArrayOfByte);
      return paramRSAPublicKey;
    }
    catch (NoSuchAlgorithmException paramRSAPublicKey)
    {
      throw new Exception("没有这样的解密算法");
    }
    catch (InvalidKeyException paramRSAPublicKey)
    {
      throw new Exception("密钥无效，请检查确认");
    }
    catch (IllegalBlockSizeException paramRSAPublicKey)
    {
      throw new Exception("密文长度无效或者过长");
    }
    catch (BadPaddingException paramRSAPublicKey)
    {
      throw new Exception("密文数据已损坏");
    }
    catch (Exception paramRSAPublicKey)
    {
      throw new Exception("其他错误");
    }
  }
  
  private byte[] b(String paramString)
  {
    return a(paramString);
  }
  
  private void c(String paramString)
  {
    try
    {
      paramString = APBase64.decode(paramString);
      this.b = ((RSAPublicKey)KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(paramString)));
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public String deCodeKey(String paramString)
  {
    byte[] arrayOfByte = (byte[])null;
    arrayOfByte = (byte[])null;
    try
    {
      c("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy+ZF2XdZ6RwK/lAtyC7h\rLA4KaURXrD7gEGcx+t/l8KKLTLfR3j4vOHXHXjixipSXicyJcDH74rfO7ISnFkWQ\r+kVmB5kfhdrq5z6D/h/q7ko7MdU9SUlfZfAxwnS4VJY4xWoFWG9ZAoh5ZHJcloDU\rol0qYTUX/yWNiHkoUtnU+SP+ZJjODpqcYuVdLxlA0YelafeBc3SCeuEcPH9lIiRZ\rw0I91wQvPq7gM7/6qnMEdzm7nJdCIni83INl2bh3gW5UBwFBpNrI/fZkgDA4aVGV\rpplEP9bChkCpq2e1T9gw0ODuEVmgVaSvdwHLMYcGn+nYjWDYy16b6ImdkubF8q5l\rhwIDAQAB\r");
      paramString = b(paramString);
      paramString = a(this.b, paramString);
      APLog.i("APMidasRSATools", "resultData=" + paramString.length);
      return new String(paramString);
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
}
