package com.tencent.midas.plugin;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.text.TextUtils;
import com.tencent.midas.comm.APLog;
import com.tencent.midas.comm.APMidasRSATools;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class APPluginUtils
{
  private static Map a = new ConcurrentHashMap();
  private static Map b = new ConcurrentHashMap();
  private static final char[] c = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
  private static String d = null;
  private static int e = 0;
  
  public APPluginUtils() {}
  
  static File a(Context paramContext)
  {
    return paramContext.getDir("midasplugins", 0);
  }
  
  /* Error */
  private static void a(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 8
    //   3: aconst_null
    //   4: astore 9
    //   6: ldc 64
    //   8: astore 7
    //   10: new 66	java/io/FileInputStream
    //   13: dup
    //   14: aload_1
    //   15: invokespecial 69	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   18: astore_1
    //   19: ldc 71
    //   21: invokestatic 77	java/security/MessageDigest:getInstance	(Ljava/lang/String;)Ljava/security/MessageDigest;
    //   24: astore 10
    //   26: new 79	java/io/File
    //   29: dup
    //   30: aload_2
    //   31: invokespecial 80	java/io/File:<init>	(Ljava/lang/String;)V
    //   34: astore_0
    //   35: aload_0
    //   36: invokevirtual 84	java/io/File:exists	()Z
    //   39: ifne +8 -> 47
    //   42: aload_0
    //   43: invokevirtual 87	java/io/File:mkdir	()Z
    //   46: pop
    //   47: new 79	java/io/File
    //   50: dup
    //   51: new 89	java/lang/StringBuilder
    //   54: dup
    //   55: aload_2
    //   56: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   59: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   62: aload_3
    //   63: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   69: invokespecial 80	java/io/File:<init>	(Ljava/lang/String;)V
    //   72: astore_0
    //   73: aload_0
    //   74: invokevirtual 84	java/io/File:exists	()Z
    //   77: istore 6
    //   79: iload 6
    //   81: ifeq +51 -> 132
    //   84: aload_1
    //   85: ifnull +7 -> 92
    //   88: aload_1
    //   89: invokevirtual 109	java/io/InputStream:close	()V
    //   92: iconst_0
    //   93: ifeq +11 -> 104
    //   96: new 111	java/lang/NullPointerException
    //   99: dup
    //   100: invokespecial 112	java/lang/NullPointerException:<init>	()V
    //   103: athrow
    //   104: ldc 64
    //   106: aload 4
    //   108: invokevirtual 116	java/lang/String:compareToIgnoreCase	(Ljava/lang/String;)I
    //   111: ifeq +12 -> 123
    //   114: aload_0
    //   115: ifnull +8 -> 123
    //   118: aload_0
    //   119: invokevirtual 119	java/io/File:delete	()Z
    //   122: pop
    //   123: return
    //   124: astore_1
    //   125: aload_1
    //   126: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   129: goto -25 -> 104
    //   132: new 124	java/io/FileOutputStream
    //   135: dup
    //   136: aload_0
    //   137: invokespecial 127	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   140: astore_2
    //   141: sipush 8192
    //   144: newarray byte
    //   146: astore_3
    //   147: aload_1
    //   148: aload_3
    //   149: invokevirtual 131	java/io/InputStream:read	([B)I
    //   152: istore 5
    //   154: iload 5
    //   156: iconst_m1
    //   157: if_icmpne +53 -> 210
    //   160: aload 10
    //   162: invokevirtual 135	java/security/MessageDigest:digest	()[B
    //   165: invokestatic 139	com/tencent/midas/plugin/APPluginUtils:toHexString	([B)Ljava/lang/String;
    //   168: astore 8
    //   170: aload_2
    //   171: invokevirtual 142	java/io/FileOutputStream:flush	()V
    //   174: aload_1
    //   175: ifnull +7 -> 182
    //   178: aload_1
    //   179: invokevirtual 109	java/io/InputStream:close	()V
    //   182: aload_2
    //   183: ifnull +7 -> 190
    //   186: aload_2
    //   187: invokevirtual 143	java/io/FileOutputStream:close	()V
    //   190: aload 8
    //   192: aload 4
    //   194: invokevirtual 116	java/lang/String:compareToIgnoreCase	(Ljava/lang/String;)I
    //   197: ifeq -74 -> 123
    //   200: aload_0
    //   201: ifnull -78 -> 123
    //   204: aload_0
    //   205: invokevirtual 119	java/io/File:delete	()Z
    //   208: pop
    //   209: return
    //   210: aload_2
    //   211: aload_3
    //   212: iconst_0
    //   213: iload 5
    //   215: invokevirtual 147	java/io/FileOutputStream:write	([BII)V
    //   218: aload 10
    //   220: aload_3
    //   221: iconst_0
    //   222: iload 5
    //   224: invokevirtual 150	java/security/MessageDigest:update	([BII)V
    //   227: goto -80 -> 147
    //   230: astore 7
    //   232: aload_0
    //   233: astore_3
    //   234: aload_2
    //   235: astore_0
    //   236: ldc 64
    //   238: astore_2
    //   239: aload 7
    //   241: invokevirtual 151	java/lang/Exception:printStackTrace	()V
    //   244: aload_1
    //   245: ifnull +7 -> 252
    //   248: aload_1
    //   249: invokevirtual 109	java/io/InputStream:close	()V
    //   252: aload_0
    //   253: ifnull +7 -> 260
    //   256: aload_0
    //   257: invokevirtual 143	java/io/FileOutputStream:close	()V
    //   260: aload_2
    //   261: aload 4
    //   263: invokevirtual 116	java/lang/String:compareToIgnoreCase	(Ljava/lang/String;)I
    //   266: ifeq -143 -> 123
    //   269: aload_3
    //   270: ifnull -147 -> 123
    //   273: aload_3
    //   274: invokevirtual 119	java/io/File:delete	()Z
    //   277: pop
    //   278: return
    //   279: astore_0
    //   280: aload_0
    //   281: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   284: goto -24 -> 260
    //   287: astore_0
    //   288: aconst_null
    //   289: astore_2
    //   290: aconst_null
    //   291: astore_1
    //   292: aload 8
    //   294: astore_3
    //   295: aload_1
    //   296: ifnull +7 -> 303
    //   299: aload_1
    //   300: invokevirtual 109	java/io/InputStream:close	()V
    //   303: aload_2
    //   304: ifnull +7 -> 311
    //   307: aload_2
    //   308: invokevirtual 143	java/io/FileOutputStream:close	()V
    //   311: aload 7
    //   313: aload 4
    //   315: invokevirtual 116	java/lang/String:compareToIgnoreCase	(Ljava/lang/String;)I
    //   318: ifeq +12 -> 330
    //   321: aload_3
    //   322: ifnull +8 -> 330
    //   325: aload_3
    //   326: invokevirtual 119	java/io/File:delete	()Z
    //   329: pop
    //   330: aload_0
    //   331: athrow
    //   332: astore_1
    //   333: aload_1
    //   334: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   337: goto -26 -> 311
    //   340: astore_1
    //   341: aload_1
    //   342: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   345: goto -155 -> 190
    //   348: astore_0
    //   349: aconst_null
    //   350: astore_2
    //   351: aload 8
    //   353: astore_3
    //   354: goto -59 -> 295
    //   357: astore 8
    //   359: aconst_null
    //   360: astore_2
    //   361: aload_0
    //   362: astore_3
    //   363: aload 8
    //   365: astore_0
    //   366: goto -71 -> 295
    //   369: astore 8
    //   371: aload_0
    //   372: astore_3
    //   373: aload 8
    //   375: astore_0
    //   376: goto -81 -> 295
    //   379: astore 9
    //   381: aload 8
    //   383: astore 7
    //   385: aload_0
    //   386: astore_3
    //   387: aload 9
    //   389: astore_0
    //   390: goto -95 -> 295
    //   393: astore 8
    //   395: aload_2
    //   396: astore 7
    //   398: aload_0
    //   399: astore_2
    //   400: aload 8
    //   402: astore_0
    //   403: goto -108 -> 295
    //   406: astore 7
    //   408: aconst_null
    //   409: astore_0
    //   410: aconst_null
    //   411: astore_1
    //   412: ldc 64
    //   414: astore_2
    //   415: aload 9
    //   417: astore_3
    //   418: goto -179 -> 239
    //   421: astore 7
    //   423: aconst_null
    //   424: astore_0
    //   425: ldc 64
    //   427: astore_2
    //   428: aload 9
    //   430: astore_3
    //   431: goto -192 -> 239
    //   434: astore 7
    //   436: ldc 64
    //   438: astore_2
    //   439: aconst_null
    //   440: astore 8
    //   442: aload_0
    //   443: astore_3
    //   444: aload 8
    //   446: astore_0
    //   447: goto -208 -> 239
    //   450: astore 7
    //   452: aload_0
    //   453: astore_3
    //   454: aload_2
    //   455: astore_0
    //   456: aload 8
    //   458: astore_2
    //   459: goto -220 -> 239
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	462	0	paramContext	Context
    //   0	462	1	paramString1	String
    //   0	462	2	paramString2	String
    //   0	462	3	paramString3	String
    //   0	462	4	paramString4	String
    //   152	71	5	i	int
    //   77	3	6	bool	boolean
    //   8	1	7	str1	String
    //   230	82	7	localException1	Exception
    //   383	14	7	localObject1	Object
    //   406	1	7	localException2	Exception
    //   421	1	7	localException3	Exception
    //   434	1	7	localException4	Exception
    //   450	1	7	localException5	Exception
    //   1	351	8	str2	String
    //   357	7	8	localObject2	Object
    //   369	13	8	localObject3	Object
    //   393	8	8	localObject4	Object
    //   440	17	8	localObject5	Object
    //   4	1	9	localObject6	Object
    //   379	50	9	localObject7	Object
    //   24	195	10	localMessageDigest	MessageDigest
    // Exception table:
    //   from	to	target	type
    //   88	92	124	java/io/IOException
    //   96	104	124	java/io/IOException
    //   141	147	230	java/lang/Exception
    //   147	154	230	java/lang/Exception
    //   160	170	230	java/lang/Exception
    //   210	227	230	java/lang/Exception
    //   248	252	279	java/io/IOException
    //   256	260	279	java/io/IOException
    //   10	19	287	finally
    //   299	303	332	java/io/IOException
    //   307	311	332	java/io/IOException
    //   178	182	340	java/io/IOException
    //   186	190	340	java/io/IOException
    //   19	47	348	finally
    //   47	73	348	finally
    //   73	79	357	finally
    //   132	141	357	finally
    //   141	147	369	finally
    //   147	154	369	finally
    //   160	170	369	finally
    //   210	227	369	finally
    //   170	174	379	finally
    //   239	244	393	finally
    //   10	19	406	java/lang/Exception
    //   19	47	421	java/lang/Exception
    //   47	73	421	java/lang/Exception
    //   73	79	434	java/lang/Exception
    //   132	141	434	java/lang/Exception
    //   170	174	450	java/lang/Exception
  }
  
  private static boolean a(String paramString1, String paramString2)
  {
    String str = "";
    for (;;)
    {
      try
      {
        localFileInputStream = new FileInputStream(paramString1);
        try
        {
          paramString1 = MessageDigest.getInstance("MD5");
          byte[] arrayOfByte = new byte[' '];
          int i = localFileInputStream.read(arrayOfByte);
          if (i == -1)
          {
            localFileInputStream.close();
            paramString1 = toHexString(paramString1.digest());
            APLog.i("APPluginUtils", "checkFileMD5 sMD5:" + paramString1);
            APLog.i("APPluginUtils", "checkFileMD5 MD5:" + paramString2);
            if (!paramString1.equalsIgnoreCase(paramString2)) {
              continue;
            }
            return true;
          }
          paramString1.update(arrayOfByte, 0, i);
          continue;
          if (localFileInputStream == null) {}
        }
        catch (Exception paramString1) {}
      }
      catch (Exception paramString1)
      {
        FileInputStream localFileInputStream;
        Object localObject = null;
        continue;
      }
      try
      {
        localFileInputStream.close();
        paramString1.printStackTrace();
        paramString1 = str;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
      }
    }
    return false;
  }
  
  static File b(Context paramContext)
  {
    return paramContext.getDir("midaspluginsTemp", 0);
  }
  
  /* Error */
  private static int c(Context paramContext)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokestatic 175	com/tencent/midas/plugin/APPluginUtils:getPluginNameFromAssets	(Landroid/content/Context;)Ljava/lang/String;
    //   4: astore 4
    //   6: ldc -102
    //   8: new 89	java/lang/StringBuilder
    //   11: dup
    //   12: ldc -79
    //   14: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   17: aload 4
    //   19: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   25: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   28: aload 4
    //   30: invokestatic 183	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   33: ifeq +6 -> 39
    //   36: bipush -2
    //   38: ireturn
    //   39: aload_0
    //   40: invokevirtual 187	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   43: aload 4
    //   45: invokevirtual 193	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   48: astore 4
    //   50: new 195	java/util/zip/ZipInputStream
    //   53: dup
    //   54: aload 4
    //   56: invokespecial 198	java/util/zip/ZipInputStream:<init>	(Ljava/io/InputStream;)V
    //   59: astore 6
    //   61: aload 6
    //   63: invokevirtual 202	java/util/zip/ZipInputStream:getNextEntry	()Ljava/util/zip/ZipEntry;
    //   66: astore 7
    //   68: aload_0
    //   69: invokestatic 204	com/tencent/midas/plugin/APPluginUtils:a	(Landroid/content/Context;)Ljava/io/File;
    //   72: invokevirtual 207	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   75: astore 11
    //   77: aload 7
    //   79: ifnonnull +25 -> 104
    //   82: aload 4
    //   84: ifnull +8 -> 92
    //   87: aload 4
    //   89: invokevirtual 109	java/io/InputStream:close	()V
    //   92: aload 6
    //   94: ifnull +8 -> 102
    //   97: aload 6
    //   99: invokevirtual 208	java/util/zip/ZipInputStream:close	()V
    //   102: iconst_0
    //   103: ireturn
    //   104: aload 7
    //   106: invokevirtual 213	java/util/zip/ZipEntry:getName	()Ljava/lang/String;
    //   109: astore 5
    //   111: aload 7
    //   113: invokevirtual 216	java/util/zip/ZipEntry:isDirectory	()Z
    //   116: ifne -39 -> 77
    //   119: ldc -102
    //   121: new 89	java/lang/StringBuilder
    //   124: dup
    //   125: ldc -38
    //   127: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   130: aload 5
    //   132: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   135: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   138: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   141: iconst_1
    //   142: istore_1
    //   143: ldc 64
    //   145: astore 8
    //   147: aload 5
    //   149: ldc -36
    //   151: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   154: ifeq +366 -> 520
    //   157: aload 5
    //   159: ldc -36
    //   161: invokevirtual 226	java/lang/String:lastIndexOf	(Ljava/lang/String;)I
    //   164: istore_2
    //   165: ldc -102
    //   167: new 89	java/lang/StringBuilder
    //   170: dup
    //   171: ldc -28
    //   173: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   176: iload_2
    //   177: invokevirtual 231	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   180: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   183: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   186: iload_2
    //   187: iconst_m1
    //   188: if_icmpeq +625 -> 813
    //   191: aload 5
    //   193: iconst_0
    //   194: iload_2
    //   195: invokevirtual 235	java/lang/String:substring	(II)Ljava/lang/String;
    //   198: astore 8
    //   200: ldc -102
    //   202: new 89	java/lang/StringBuilder
    //   205: dup
    //   206: ldc -19
    //   208: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   211: aload 8
    //   213: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   216: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   219: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   222: aload 8
    //   224: ldc -17
    //   226: invokevirtual 243	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   229: iconst_0
    //   230: aaload
    //   231: astore 10
    //   233: aload 8
    //   235: ldc -17
    //   237: invokevirtual 243	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   240: iconst_1
    //   241: aaload
    //   242: astore 12
    //   244: aload 8
    //   246: ldc -17
    //   248: invokevirtual 243	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   251: iconst_2
    //   252: aaload
    //   253: astore 13
    //   255: aload 8
    //   257: ldc -17
    //   259: invokevirtual 243	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   262: iconst_3
    //   263: aaload
    //   264: astore 9
    //   266: ldc -102
    //   268: new 89	java/lang/StringBuilder
    //   271: dup
    //   272: ldc -11
    //   274: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   277: aload 10
    //   279: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   282: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   285: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   288: ldc -102
    //   290: new 89	java/lang/StringBuilder
    //   293: dup
    //   294: ldc -9
    //   296: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   299: aload 12
    //   301: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   304: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   307: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   310: ldc -102
    //   312: new 89	java/lang/StringBuilder
    //   315: dup
    //   316: ldc -7
    //   318: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   321: aload 13
    //   323: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   326: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   329: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   332: ldc -102
    //   334: new 89	java/lang/StringBuilder
    //   337: dup
    //   338: ldc -5
    //   340: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   343: aload 9
    //   345: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   348: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   351: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   354: new 89	java/lang/StringBuilder
    //   357: dup
    //   358: aload 11
    //   360: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   363: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   366: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   369: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   372: aload 8
    //   374: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   377: ldc_w 256
    //   380: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   383: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   386: astore 10
    //   388: aload 9
    //   390: astore 8
    //   392: aload 10
    //   394: astore 9
    //   396: new 79	java/io/File
    //   399: dup
    //   400: aload 9
    //   402: invokespecial 80	java/io/File:<init>	(Ljava/lang/String;)V
    //   405: astore 10
    //   407: ldc -102
    //   409: new 89	java/lang/StringBuilder
    //   412: dup
    //   413: ldc_w 258
    //   416: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   419: aload 9
    //   421: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   424: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   427: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   430: new 260	java/io/BufferedOutputStream
    //   433: dup
    //   434: new 124	java/io/FileOutputStream
    //   437: dup
    //   438: aload 10
    //   440: invokespecial 127	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   443: invokespecial 263	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   446: astore 9
    //   448: sipush 8192
    //   451: newarray byte
    //   453: astore 12
    //   455: aload 6
    //   457: aload 12
    //   459: invokevirtual 264	java/util/zip/ZipInputStream:read	([B)I
    //   462: istore_2
    //   463: iload_2
    //   464: iconst_m1
    //   465: if_icmpne +88 -> 553
    //   468: aload 9
    //   470: invokevirtual 265	java/io/BufferedOutputStream:flush	()V
    //   473: aload 9
    //   475: invokevirtual 266	java/io/BufferedOutputStream:close	()V
    //   478: aload 10
    //   480: invokevirtual 269	java/io/File:getCanonicalPath	()Ljava/lang/String;
    //   483: aload 8
    //   485: invokestatic 271	com/tencent/midas/plugin/APPluginUtils:a	(Ljava/lang/String;Ljava/lang/String;)Z
    //   488: istore_3
    //   489: iload_3
    //   490: ifne +121 -> 611
    //   493: iload_1
    //   494: ifeq +117 -> 611
    //   497: aload 4
    //   499: ifnull +8 -> 507
    //   502: aload 4
    //   504: invokevirtual 109	java/io/InputStream:close	()V
    //   507: aload 6
    //   509: ifnull +8 -> 517
    //   512: aload 6
    //   514: invokevirtual 208	java/util/zip/ZipInputStream:close	()V
    //   517: bipush -3
    //   519: ireturn
    //   520: new 89	java/lang/StringBuilder
    //   523: dup
    //   524: aload 11
    //   526: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   529: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   532: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   535: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   538: aload 5
    //   540: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   543: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   546: astore 9
    //   548: iconst_0
    //   549: istore_1
    //   550: goto -154 -> 396
    //   553: aload 9
    //   555: aload 12
    //   557: iconst_0
    //   558: iload_2
    //   559: invokevirtual 272	java/io/BufferedOutputStream:write	([BII)V
    //   562: goto -107 -> 455
    //   565: astore 5
    //   567: aload 6
    //   569: astore_0
    //   570: aload 5
    //   572: invokevirtual 151	java/lang/Exception:printStackTrace	()V
    //   575: aload 5
    //   577: invokevirtual 273	java/lang/Exception:toString	()Ljava/lang/String;
    //   580: putstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   583: aload 4
    //   585: ifnull +8 -> 593
    //   588: aload 4
    //   590: invokevirtual 109	java/io/InputStream:close	()V
    //   593: aload_0
    //   594: ifnull +7 -> 601
    //   597: aload_0
    //   598: invokevirtual 208	java/util/zip/ZipInputStream:close	()V
    //   601: iconst_m1
    //   602: ireturn
    //   603: astore_0
    //   604: aload_0
    //   605: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   608: goto -91 -> 517
    //   611: new 89	java/lang/StringBuilder
    //   614: dup
    //   615: invokestatic 279	android/os/Environment:getExternalStorageDirectory	()Ljava/io/File;
    //   618: invokevirtual 269	java/io/File:getCanonicalPath	()Ljava/lang/String;
    //   621: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   624: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   627: ldc_w 281
    //   630: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   633: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   636: astore 9
    //   638: ldc -102
    //   640: new 89	java/lang/StringBuilder
    //   643: dup
    //   644: ldc_w 283
    //   647: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   650: aload 9
    //   652: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   655: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   658: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   661: aload 9
    //   663: invokestatic 183	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   666: ifne -589 -> 77
    //   669: iload_1
    //   670: ifeq +44 -> 714
    //   673: aload 5
    //   675: astore 7
    //   677: aload 5
    //   679: ldc -36
    //   681: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   684: ifeq +15 -> 699
    //   687: aload 5
    //   689: ldc -36
    //   691: ldc_w 256
    //   694: invokevirtual 287	java/lang/String:replace	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   697: astore 7
    //   699: aload_0
    //   700: aload 10
    //   702: invokevirtual 269	java/io/File:getCanonicalPath	()Ljava/lang/String;
    //   705: aload 9
    //   707: aload 7
    //   709: aload 8
    //   711: invokestatic 289	com/tencent/midas/plugin/APPluginUtils:a	(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   714: aload 6
    //   716: invokevirtual 202	java/util/zip/ZipInputStream:getNextEntry	()Ljava/util/zip/ZipEntry;
    //   719: astore 7
    //   721: goto -644 -> 77
    //   724: astore_0
    //   725: aload_0
    //   726: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   729: goto -627 -> 102
    //   732: astore_0
    //   733: aload_0
    //   734: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   737: goto -136 -> 601
    //   740: astore 5
    //   742: aconst_null
    //   743: astore 4
    //   745: aconst_null
    //   746: astore_0
    //   747: aload 4
    //   749: ifnull +8 -> 757
    //   752: aload 4
    //   754: invokevirtual 109	java/io/InputStream:close	()V
    //   757: aload_0
    //   758: ifnull +7 -> 765
    //   761: aload_0
    //   762: invokevirtual 208	java/util/zip/ZipInputStream:close	()V
    //   765: aload 5
    //   767: athrow
    //   768: astore_0
    //   769: aload_0
    //   770: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   773: goto -8 -> 765
    //   776: astore 5
    //   778: aconst_null
    //   779: astore_0
    //   780: goto -33 -> 747
    //   783: astore 5
    //   785: aload 6
    //   787: astore_0
    //   788: goto -41 -> 747
    //   791: astore 5
    //   793: goto -46 -> 747
    //   796: astore 5
    //   798: aconst_null
    //   799: astore 4
    //   801: aconst_null
    //   802: astore_0
    //   803: goto -233 -> 570
    //   806: astore 5
    //   808: aconst_null
    //   809: astore_0
    //   810: goto -240 -> 570
    //   813: aload 5
    //   815: astore 8
    //   817: goto -617 -> 200
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	820	0	paramContext	Context
    //   142	528	1	i	int
    //   164	395	2	j	int
    //   488	2	3	bool	boolean
    //   4	796	4	localObject1	Object
    //   109	430	5	str1	String
    //   565	123	5	localException1	Exception
    //   740	26	5	localObject2	Object
    //   776	1	5	localObject3	Object
    //   783	1	5	localObject4	Object
    //   791	1	5	localObject5	Object
    //   796	1	5	localException2	Exception
    //   806	8	5	localException3	Exception
    //   59	727	6	localZipInputStream	java.util.zip.ZipInputStream
    //   66	654	7	localObject6	Object
    //   145	671	8	localObject7	Object
    //   264	442	9	localObject8	Object
    //   231	470	10	localObject9	Object
    //   75	450	11	str2	String
    //   242	314	12	localObject10	Object
    //   253	69	13	str3	String
    // Exception table:
    //   from	to	target	type
    //   61	77	565	java/lang/Exception
    //   104	141	565	java/lang/Exception
    //   147	186	565	java/lang/Exception
    //   191	200	565	java/lang/Exception
    //   200	388	565	java/lang/Exception
    //   396	455	565	java/lang/Exception
    //   455	463	565	java/lang/Exception
    //   468	489	565	java/lang/Exception
    //   520	548	565	java/lang/Exception
    //   553	562	565	java/lang/Exception
    //   611	669	565	java/lang/Exception
    //   677	699	565	java/lang/Exception
    //   699	714	565	java/lang/Exception
    //   714	721	565	java/lang/Exception
    //   502	507	603	java/io/IOException
    //   512	517	603	java/io/IOException
    //   87	92	724	java/io/IOException
    //   97	102	724	java/io/IOException
    //   588	593	732	java/io/IOException
    //   597	601	732	java/io/IOException
    //   39	50	740	finally
    //   752	757	768	java/io/IOException
    //   761	765	768	java/io/IOException
    //   50	61	776	finally
    //   61	77	783	finally
    //   104	141	783	finally
    //   147	186	783	finally
    //   191	200	783	finally
    //   200	388	783	finally
    //   396	455	783	finally
    //   455	463	783	finally
    //   468	489	783	finally
    //   520	548	783	finally
    //   553	562	783	finally
    //   611	669	783	finally
    //   677	699	783	finally
    //   699	714	783	finally
    //   714	721	783	finally
    //   570	583	791	finally
    //   39	50	796	java/lang/Exception
    //   50	61	806	java/lang/Exception
  }
  
  public static void deleteDex(Context paramContext)
  {
    APLog.i("APPluginUtils", "deleteDex");
    deleteFiles(getOptimizedDexPath(paramContext));
  }
  
  public static void deleteFiles(File paramFile)
  {
    if (paramFile == null) {
      return;
    }
    if (paramFile.isDirectory())
    {
      File[] arrayOfFile = paramFile.listFiles();
      int i = 0;
      for (;;)
      {
        if (i >= arrayOfFile.length)
        {
          paramFile.delete();
          return;
        }
        File localFile = arrayOfFile[i];
        if ((localFile != null) && (localFile.exists())) {
          localFile.delete();
        }
        i += 1;
      }
    }
    paramFile.delete();
  }
  
  public static void deleteLibs(Context paramContext)
  {
    APLog.i("APPluginUtils", "deleteLibs");
    deleteFiles(getLibPath(paramContext));
  }
  
  public static void deletePlugin(Context paramContext)
  {
    APLog.i("APPluginUtils", "deletePlugin");
    deleteFiles(a(paramContext));
  }
  
  public static void deleteUpdatePlugin(Context paramContext)
  {
    APLog.i("APPluginUtils", "deleteUpdatePlugin");
    deleteFiles(b(paramContext));
  }
  
  /* Error */
  public static int extractLibs(String paramString1, String paramString2)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: aconst_null
    //   4: putstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   7: aload_1
    //   8: astore 5
    //   10: aload_1
    //   11: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   14: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   17: ifne +25 -> 42
    //   20: new 89	java/lang/StringBuilder
    //   23: dup
    //   24: aload_1
    //   25: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   28: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   31: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   34: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   37: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   40: astore 5
    //   42: new 318	java/util/zip/ZipFile
    //   45: dup
    //   46: aload_0
    //   47: invokespecial 319	java/util/zip/ZipFile:<init>	(Ljava/lang/String;)V
    //   50: invokevirtual 323	java/util/zip/ZipFile:entries	()Ljava/util/Enumeration;
    //   53: astore 7
    //   55: aload 7
    //   57: invokeinterface 328 1 0
    //   62: istore 4
    //   64: iload 4
    //   66: ifne +76 -> 142
    //   69: iconst_0
    //   70: istore_2
    //   71: aload 6
    //   73: astore_1
    //   74: ldc -102
    //   76: new 89	java/lang/StringBuilder
    //   79: dup
    //   80: ldc_w 330
    //   83: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   86: aload_1
    //   87: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   90: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   93: invokestatic 162	com/tencent/midas/comm/APLog:i	(Ljava/lang/String;Ljava/lang/String;)V
    //   96: getstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   99: ifnonnull +41 -> 140
    //   102: new 318	java/util/zip/ZipFile
    //   105: dup
    //   106: aload_0
    //   107: invokespecial 319	java/util/zip/ZipFile:<init>	(Ljava/lang/String;)V
    //   110: astore 8
    //   112: sipush 4096
    //   115: newarray byte
    //   117: astore 9
    //   119: aload 8
    //   121: invokevirtual 323	java/util/zip/ZipFile:entries	()Ljava/util/Enumeration;
    //   124: astore 10
    //   126: aload 10
    //   128: invokeinterface 328 1 0
    //   133: istore 4
    //   135: iload 4
    //   137: ifne +244 -> 381
    //   140: iload_2
    //   141: ireturn
    //   142: aload 7
    //   144: invokeinterface 334 1 0
    //   149: checkcast 210	java/util/zip/ZipEntry
    //   152: invokevirtual 213	java/util/zip/ZipEntry:getName	()Ljava/lang/String;
    //   155: astore_1
    //   156: aload_1
    //   157: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   160: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   163: ifne -108 -> 55
    //   166: aload_1
    //   167: ldc_w 336
    //   170: invokevirtual 339	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   173: ifne +13 -> 186
    //   176: aload_1
    //   177: ldc_w 341
    //   180: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   183: ifeq -128 -> 55
    //   186: new 79	java/io/File
    //   189: dup
    //   190: new 89	java/lang/StringBuilder
    //   193: dup
    //   194: aload 5
    //   196: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   199: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   202: aload_1
    //   203: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   206: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   209: invokespecial 80	java/io/File:<init>	(Ljava/lang/String;)V
    //   212: invokevirtual 344	java/io/File:getParentFile	()Ljava/io/File;
    //   215: invokevirtual 345	java/io/File:getName	()Ljava/lang/String;
    //   218: astore_1
    //   219: aload_1
    //   220: getstatic 350	android/os/Build:CPU_ABI	Ljava/lang/String;
    //   223: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   226: ifeq +12 -> 238
    //   229: getstatic 350	android/os/Build:CPU_ABI	Ljava/lang/String;
    //   232: astore_1
    //   233: iconst_0
    //   234: istore_2
    //   235: goto -161 -> 74
    //   238: iconst_0
    //   239: ifne +26 -> 265
    //   242: aload_1
    //   243: ldc_w 356
    //   246: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   249: ifne +389 -> 638
    //   252: aload_1
    //   253: ldc_w 358
    //   256: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   259: ifeq +6 -> 265
    //   262: goto +376 -> 638
    //   265: getstatic 350	android/os/Build:CPU_ABI	Ljava/lang/String;
    //   268: ldc_w 360
    //   271: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   274: ifeq +30 -> 304
    //   277: iconst_0
    //   278: ifne +26 -> 304
    //   281: aload_1
    //   282: ldc_w 356
    //   285: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   288: ifne +355 -> 643
    //   291: aload_1
    //   292: ldc_w 358
    //   295: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   298: ifeq +6 -> 304
    //   301: goto +342 -> 643
    //   304: getstatic 350	android/os/Build:CPU_ABI	Ljava/lang/String;
    //   307: ldc_w 362
    //   310: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   313: ifeq +36 -> 349
    //   316: iconst_0
    //   317: ifne +32 -> 349
    //   320: aload_1
    //   321: ldc_w 356
    //   324: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   327: ifne +17 -> 344
    //   330: aload_1
    //   331: ldc_w 358
    //   334: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   337: istore 4
    //   339: iload 4
    //   341: ifeq +8 -> 349
    //   344: iconst_0
    //   345: istore_2
    //   346: goto -272 -> 74
    //   349: iconst_0
    //   350: ifeq -295 -> 55
    //   353: iconst_0
    //   354: istore_2
    //   355: aload 6
    //   357: astore_1
    //   358: goto -284 -> 74
    //   361: astore_1
    //   362: aload_1
    //   363: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   366: aload_1
    //   367: invokestatic 366	com/tencent/midas/plugin/APPluginUtils:getExceptionInfo	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   370: putstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   373: iconst_m1
    //   374: istore_2
    //   375: aload 6
    //   377: astore_1
    //   378: goto -304 -> 74
    //   381: aload 10
    //   383: invokeinterface 334 1 0
    //   388: checkcast 210	java/util/zip/ZipEntry
    //   391: astore 11
    //   393: aload 11
    //   395: invokevirtual 213	java/util/zip/ZipEntry:getName	()Ljava/lang/String;
    //   398: astore 7
    //   400: aload 7
    //   402: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   405: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   408: ifne -282 -> 126
    //   411: aload 7
    //   413: ldc_w 336
    //   416: invokevirtual 339	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   419: ifne +14 -> 433
    //   422: aload 7
    //   424: ldc_w 341
    //   427: invokevirtual 223	java/lang/String:endsWith	(Ljava/lang/String;)Z
    //   430: ifeq -304 -> 126
    //   433: new 79	java/io/File
    //   436: dup
    //   437: new 89	java/lang/StringBuilder
    //   440: dup
    //   441: aload 5
    //   443: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   446: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   449: aload 7
    //   451: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   454: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   457: invokespecial 80	java/io/File:<init>	(Ljava/lang/String;)V
    //   460: astore 6
    //   462: aload 7
    //   464: getstatic 254	java/io/File:separator	Ljava/lang/String;
    //   467: invokevirtual 226	java/lang/String:lastIndexOf	(Ljava/lang/String;)I
    //   470: istore_3
    //   471: aload 7
    //   473: astore_0
    //   474: iload_3
    //   475: iconst_m1
    //   476: if_icmpeq +12 -> 488
    //   479: aload 7
    //   481: iload_3
    //   482: iconst_1
    //   483: iadd
    //   484: invokevirtual 369	java/lang/String:substring	(I)Ljava/lang/String;
    //   487: astore_0
    //   488: new 79	java/io/File
    //   491: dup
    //   492: new 89	java/lang/StringBuilder
    //   495: dup
    //   496: aload 5
    //   498: invokestatic 95	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   501: invokespecial 96	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   504: aload_0
    //   505: invokevirtual 100	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   508: invokevirtual 104	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   511: invokespecial 80	java/io/File:<init>	(Ljava/lang/String;)V
    //   514: astore 7
    //   516: aload 6
    //   518: astore_0
    //   519: goto +129 -> 648
    //   522: iload_3
    //   523: ifeq -397 -> 126
    //   526: aload 7
    //   528: invokevirtual 344	java/io/File:getParentFile	()Ljava/io/File;
    //   531: invokevirtual 372	java/io/File:mkdirs	()Z
    //   534: pop
    //   535: aload 8
    //   537: aload 11
    //   539: invokevirtual 376	java/util/zip/ZipFile:getInputStream	(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;
    //   542: astore_0
    //   543: new 124	java/io/FileOutputStream
    //   546: dup
    //   547: aload 7
    //   549: invokespecial 127	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   552: astore 6
    //   554: aload_0
    //   555: aload 9
    //   557: invokevirtual 131	java/io/InputStream:read	([B)I
    //   560: istore_3
    //   561: iload_3
    //   562: ifgt +35 -> 597
    //   565: getstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   568: ifnull -442 -> 126
    //   571: iload_2
    //   572: ireturn
    //   573: aload_0
    //   574: invokevirtual 345	java/io/File:getName	()Ljava/lang/String;
    //   577: aload_1
    //   578: invokevirtual 354	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   581: ifeq +8 -> 589
    //   584: iconst_1
    //   585: istore_3
    //   586: goto -64 -> 522
    //   589: aload_0
    //   590: invokevirtual 344	java/io/File:getParentFile	()Ljava/io/File;
    //   593: astore_0
    //   594: goto +54 -> 648
    //   597: aload 6
    //   599: aload 9
    //   601: iconst_0
    //   602: iload_3
    //   603: invokevirtual 147	java/io/FileOutputStream:write	([BII)V
    //   606: goto -52 -> 554
    //   609: astore_0
    //   610: aload_0
    //   611: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   614: aload_0
    //   615: invokestatic 366	com/tencent/midas/plugin/APPluginUtils:getExceptionInfo	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   618: putstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   621: goto -56 -> 565
    //   624: astore_0
    //   625: aload_0
    //   626: invokevirtual 122	java/io/IOException:printStackTrace	()V
    //   629: aload_0
    //   630: invokestatic 366	com/tencent/midas/plugin/APPluginUtils:getExceptionInfo	(Ljava/lang/Throwable;)Ljava/lang/String;
    //   633: putstatic 44	com/tencent/midas/plugin/APPluginUtils:d	Ljava/lang/String;
    //   636: iconst_m1
    //   637: ireturn
    //   638: iconst_0
    //   639: istore_2
    //   640: goto -566 -> 74
    //   643: iconst_0
    //   644: istore_2
    //   645: goto -571 -> 74
    //   648: aload_0
    //   649: ifnonnull -76 -> 573
    //   652: iconst_0
    //   653: istore_3
    //   654: goto -132 -> 522
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	657	0	paramString1	String
    //   0	657	1	paramString2	String
    //   70	575	2	i	int
    //   470	184	3	j	int
    //   62	278	4	bool	boolean
    //   8	489	5	str	String
    //   1	597	6	localObject1	Object
    //   53	495	7	localObject2	Object
    //   110	426	8	localZipFile	java.util.zip.ZipFile
    //   117	483	9	arrayOfByte	byte[]
    //   124	258	10	localEnumeration	java.util.Enumeration
    //   391	147	11	localZipEntry	java.util.zip.ZipEntry
    // Exception table:
    //   from	to	target	type
    //   42	55	361	java/io/IOException
    //   55	64	361	java/io/IOException
    //   142	186	361	java/io/IOException
    //   186	233	361	java/io/IOException
    //   242	262	361	java/io/IOException
    //   265	277	361	java/io/IOException
    //   281	301	361	java/io/IOException
    //   304	316	361	java/io/IOException
    //   320	339	361	java/io/IOException
    //   535	554	609	java/io/IOException
    //   554	561	609	java/io/IOException
    //   597	606	609	java/io/IOException
    //   96	126	624	java/io/IOException
    //   126	135	624	java/io/IOException
    //   381	433	624	java/io/IOException
    //   433	471	624	java/io/IOException
    //   479	488	624	java/io/IOException
    //   488	516	624	java/io/IOException
    //   526	535	624	java/io/IOException
    //   565	571	624	java/io/IOException
    //   573	584	624	java/io/IOException
    //   589	594	624	java/io/IOException
    //   610	621	624	java/io/IOException
  }
  
  public static void extractMidasPluginsLibs(Context paramContext)
  {
    try
    {
      deleteLibs(paramContext);
      e += 1;
      String str = getLibPath(paramContext).getCanonicalPath();
      paramContext = a(paramContext);
      if (paramContext != null)
      {
        paramContext = paramContext.listFiles();
        int i = 0;
        for (;;)
        {
          if (i >= paramContext.length) {
            return;
          }
          extractLibs(paramContext[i].getCanonicalPath(), str);
          i += 1;
        }
      }
      return;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static String getExceptionInfo(Throwable paramThrowable)
  {
    for (;;)
    {
      if (paramThrowable.getCause() == null)
      {
        StringWriter localStringWriter = new StringWriter();
        paramThrowable.printStackTrace(new PrintWriter(localStringWriter, true));
        return localStringWriter.getBuffer().toString();
      }
      paramThrowable = paramThrowable.getCause();
    }
  }
  
  public static File getInstallPath(Context paramContext, String paramString)
  {
    APLog.i("APPluginUtils", "APPluginUtils getInstallPath pluginName:" + paramString + " sInstallPathMap:" + a);
    Object localObject;
    if (TextUtils.isEmpty(paramString)) {
      localObject = null;
    }
    File localFile;
    do
    {
      return localObject;
      localFile = (File)a.get(paramString);
      APLog.i("APPluginUtils", "APPluginUtils getInstallPath installFile:" + localFile);
      localObject = localFile;
    } while (localFile != null);
    paramContext = a(paramContext);
    if (paramContext == null) {
      return null;
    }
    paramContext = paramContext.listFiles();
    APLog.i("APPluginUtils", "APPluginUtils getInstallPath fileList.length =" + paramContext.length);
    int i = 0;
    for (;;)
    {
      localObject = localFile;
      if (i >= paramContext.length) {
        break;
      }
      localObject = paramContext[i];
      APLog.i("APPluginUtils", "APPluginUtils getInstallPath file:" + ((File)localObject).getName());
      if (((File)localObject).getName().startsWith(paramString))
      {
        APLog.i("APPluginUtils", "APPluginUtils getInstallPath true");
        a.put(paramString, localObject);
        return localObject;
      }
      i += 1;
    }
  }
  
  public static String getInstallPathString(Context paramContext, String paramString)
  {
    String str = "";
    try
    {
      paramString = getInstallPath(paramContext, paramString);
      paramContext = str;
      if (paramString != null) {
        paramContext = paramString.getCanonicalPath();
      }
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static File getLibPath(Context paramContext)
  {
    return paramContext.getDir("midaslib_" + e, 0);
  }
  
  public static String getMD5FromPath(String paramString)
  {
    String str2 = "";
    String str1 = str2;
    int i;
    int j;
    if (!TextUtils.isEmpty(paramString))
    {
      i = paramString.lastIndexOf(".apk");
      j = paramString.lastIndexOf("_");
      APLog.i("APPluginUtils", "getMD5FromPath lastIndexOf startpos:" + j + " endpos:" + i);
      str1 = str2;
      if (i != -1)
      {
        str1 = str2;
        if (j == -1) {}
      }
    }
    try
    {
      str1 = paramString.substring(j + 1, i);
      APLog.i("APPluginUtils", "getMD5FromPath MD5:" + str1);
      return str1;
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        str1 = str2;
      }
    }
  }
  
  public static int getMidasCoreVersionCode(Context paramContext)
  {
    int j = 0;
    Object localObject1 = a(paramContext);
    int i;
    if (localObject1 != null)
    {
      localObject1 = ((File)localObject1).listFiles();
      i = 0;
    }
    for (;;)
    {
      if (i >= localObject1.length) {
        localObject1 = "";
      }
      for (;;)
      {
        paramContext = getPackageInfo(paramContext, (String)localObject1);
        i = j;
        if (paramContext != null) {
          i = paramContext.versionCode;
        }
        return i;
        Object localObject2 = localObject1[i];
        if (!localObject2.getName().startsWith("MidasCore")) {
          break;
        }
        try
        {
          localObject1 = localObject2.getCanonicalPath();
        }
        catch (IOException localIOException)
        {
          localIOException.printStackTrace();
          String str = "";
        }
      }
      i += 1;
    }
  }
  
  public static String getMidasCoreVersionName(Context paramContext)
  {
    Object localObject1 = a(paramContext);
    int i;
    if (localObject1 != null)
    {
      localObject1 = ((File)localObject1).listFiles();
      i = 0;
    }
    for (;;)
    {
      if (i >= localObject1.length) {
        localObject1 = "";
      }
      for (;;)
      {
        paramContext = getPackageInfo(paramContext, (String)localObject1);
        if (paramContext == null) {
          break label83;
        }
        return paramContext.versionName;
        Object localObject2 = localObject1[i];
        if (!localObject2.getName().startsWith("MidasCore")) {
          break;
        }
        try
        {
          localObject1 = localObject2.getCanonicalPath();
        }
        catch (IOException localIOException)
        {
          localIOException.printStackTrace();
          String str = "";
        }
      }
      i += 1;
    }
    label83:
    return "";
  }
  
  public static File getOptimizedDexPath(Context paramContext)
  {
    return paramContext.getDir("midasodex", 0);
  }
  
  public static PackageInfo getPackageInfo(Context paramContext, String paramString)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (TextUtils.isEmpty(paramString)) {
      paramContext = null;
    }
    PackageInfo localPackageInfo;
    do
    {
      do
      {
        return paramContext;
        localPackageInfo = (PackageInfo)b.get(paramString);
        paramContext = localPackageInfo;
      } while (localPackageInfo != null);
      localPackageInfo = localPackageManager.getPackageArchiveInfo(paramString, 128);
      paramContext = localPackageInfo;
    } while (localPackageInfo == null);
    b.put(paramString, localPackageInfo);
    return localPackageInfo;
  }
  
  public static String getPluginNameFromAssets(Context paramContext)
  {
    Object localObject = null;
    String[] arrayOfString = (String[])null;
    paramContext = paramContext.getAssets();
    int j;
    int i;
    try
    {
      paramContext = paramContext.list("");
      if (paramContext == null) {
        return null;
      }
    }
    catch (IOException paramContext)
    {
      for (;;)
      {
        APLog.w("APPLuginUtils", "getPluginNameFromAssets e:" + paramContext.getMessage());
        paramContext = arrayOfString;
      }
      j = paramContext.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= j) {}
      for (paramContext = localObject;; paramContext = arrayOfString)
      {
        APLog.i("APPluginUtils", "fileName:" + paramContext);
        return paramContext;
        arrayOfString = paramContext[i];
        APLog.i("APPluginUtils", "assetFile:" + arrayOfString);
        if ((!arrayOfString.startsWith("MidasPay")) || (!arrayOfString.endsWith(".zip"))) {
          break;
        }
      }
      i += 1;
    }
  }
  
  public static int installFromLocal(Context paramContext)
  {
    int k = 0;
    try
    {
      localObject1 = b(paramContext);
      localFile = a(paramContext);
      i = k;
      if (localObject1 == null) {
        break label41;
      }
      localObject1 = ((File)localObject1).listFiles();
      i = 0;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Object localObject1;
        File localFile;
        int j;
        label41:
        FileInputStream localFileInputStream;
        String str1;
        Object localObject2;
        Object localObject3;
        byte[] arrayOfByte;
        localException.printStackTrace();
        d = localException.toString();
        int i = -1;
        continue;
        deleteUpdatePlugin(paramContext);
        continue;
        i += 1;
        continue;
        j += 1;
      }
    }
    j = localObject1.length;
    if (i >= j)
    {
      i = k;
      if (i != 0)
      {
        unInstallPlugin(paramContext);
        APLog.i("APPluginUtils", "installFromLocal state:" + i);
        return i;
      }
    }
    else
    {
      localFileInputStream = localObject1[i];
      str1 = localFileInputStream.getName();
      APLog.i("APPluginUtils", "installFromLocal src fileName:" + str1);
      if ((!str1.endsWith(".apk")) && (!str1.endsWith(".ini"))) {
        break label466;
      }
      localObject2 = str1.split("\\_")[0];
      APLog.i("APPluginUtils", "installFromLocal name:" + (String)localObject2);
      if (localFile != null)
      {
        localObject3 = localFile.listFiles();
        j = 0;
        if (j < localObject3.length) {}
      }
      else
      {
        localObject2 = new File(localFile.getCanonicalPath() + File.separator + str1);
        APLog.i("APPluginUtils", "installFromLocal destfileName:" + str1);
        localObject3 = new BufferedOutputStream(new FileOutputStream((File)localObject2));
        localFileInputStream = new FileInputStream(localFileInputStream.getCanonicalPath());
        arrayOfByte = new byte[' '];
      }
      for (;;)
      {
        j = localFileInputStream.read(arrayOfByte);
        if (j == -1)
        {
          ((BufferedOutputStream)localObject3).flush();
          ((BufferedOutputStream)localObject3).close();
          if (!str1.endsWith(".apk")) {
            break label466;
          }
          str1 = getMD5FromPath(str1);
          APLog.i("APPluginUtils", "installFromLocal MD5:" + str1);
          if (a(((File)localObject2).getCanonicalPath(), str1)) {
            break label466;
          }
          i = -1;
          break;
          arrayOfByte = localObject3[j];
          String str2 = arrayOfByte.getName();
          APLog.i("APPluginUtils", "installFromLocal destFileName:" + str2);
          if (!str2.startsWith((String)localObject2)) {
            break label473;
          }
          arrayOfByte.delete();
          break label473;
        }
        ((BufferedOutputStream)localObject3).write(arrayOfByte, 0, j);
      }
    }
  }
  
  public static int installPlugin(Context paramContext)
  {
    int j = 0;
    try
    {
      unInstallPlugin(paramContext);
      int i = c(paramContext);
      j = i;
      if (i != 0)
      {
        unInstallPlugin(paramContext);
        j = i;
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext = paramContext;
        paramContext.printStackTrace();
        d = getExceptionInfo(paramContext);
      }
    }
    finally {}
    APLog.i("APPluginUtils", "installPlugin retCode:" + j);
    return j;
  }
  
  public static boolean isAssetsHasPlugin(Context paramContext)
  {
    return !TextUtils.isEmpty(getPluginNameFromAssets(paramContext));
  }
  
  public static boolean isNeedUpdateFromAssets(Context paramContext)
  {
    boolean bool = isPluginInstalled(paramContext);
    String str3 = getPluginNameFromAssets(paramContext);
    APLog.i("APPluginUtils", "isNeedUpdateFromAssets isInstall:" + bool + " fileName:" + str3);
    if ((!bool) && (!TextUtils.isEmpty(str3)))
    {
      unInstallPlugin(paramContext);
      return true;
    }
    for (;;)
    {
      try
      {
        str1 = getInstallPath(paramContext, "MidasCore").getCanonicalPath();
      }
      catch (Exception localException)
      {
        try
        {
          String str1;
          if (TextUtils.isEmpty(str1)) {
            break label221;
          }
          i = getPackageInfo(paramContext, str1).versionCode;
          int j = str3.lastIndexOf(".zip");
          APLog.i("APPluginUtils", "isNeedUpdateFromAssets lastIndexOf pos:" + j);
          paramContext = str3.substring(0, j);
          APLog.i("APPluginUtils", "isNeedUpdateFromAssets name:" + paramContext);
          j = Integer.parseInt(paramContext.split("_")[2]);
          APLog.i("APPluginUtils", "isNeedUpdateFromAssets assetsVersionCode:" + j + " coreVersionCode:" + i);
          if (j > i) {
            break;
          }
          return false;
        }
        catch (Exception paramContext)
        {
          String str2;
          return true;
        }
        localException = localException;
        localException.printStackTrace();
        str2 = "";
        continue;
      }
      label221:
      int i = 0;
    }
  }
  
  public static boolean isNeedUpdateFromLocal(Context paramContext)
  {
    File localFile = b(paramContext);
    label109:
    label173:
    do
    {
      try
      {
        paramContext = new File(localFile.getCanonicalPath() + "/MidasSign.ini");
        if (!paramContext.exists()) {
          return false;
        }
        localObject1 = new HashMap();
        localObject2 = new BufferedReader(new FileReader(paramContext.getCanonicalPath()));
        localObject3 = new APMidasRSATools();
        paramContext = ((BufferedReader)localObject2).readLine();
      }
      catch (Exception paramContext)
      {
        Object localObject1;
        Object localObject2;
        Object localObject3;
        boolean bool2;
        boolean bool1;
        Object localObject4;
        int i;
        paramContext.printStackTrace();
        return false;
      }
      paramContext = ((HashMap)localObject1).entrySet().iterator();
      bool2 = false;
      bool1 = false;
      if (paramContext.hasNext()) {
        break;
      }
      APLog.i("APPluginUtils", "isNeedUpdateFromLocal List isMidasPay:" + bool1);
      APLog.i("APPluginUtils", "isNeedUpdateFromLocal List isMidasCore:" + bool2);
      if (!bool1) {
        break label494;
      }
      if (bool2) {
        break label476;
      }
      break label494;
      APLog.i("APPluginUtils", "isNeedUpdateFromLocal sline:" + paramContext);
    } while (TextUtils.isEmpty(paramContext));
    localObject4 = paramContext.split("\\:");
    paramContext = localObject4[0];
    localObject4 = ((APMidasRSATools)localObject3).deCodeKey(localObject4[1]);
    localObject4 = ((String)localObject4).substring(((String)localObject4).length() - 32);
    APLog.i("APPluginUtils", "isNeedUpdateFromLocal read file name:" + paramContext);
    APLog.i("APPluginUtils", "isNeedUpdateFromLocal read file md5:" + (String)localObject4);
    ((HashMap)localObject1).put(paramContext, localObject4);
    paramContext = ((BufferedReader)localObject2).readLine();
    break label487;
    localObject2 = (Map.Entry)paramContext.next();
    localObject1 = (String)((Map.Entry)localObject2).getKey();
    localObject2 = (String)((Map.Entry)localObject2).getValue();
    if (((String)localObject1).startsWith("MidasPay"))
    {
      bool1 = true;
      label353:
      if (((String)localObject1).startsWith("MidasCore"))
      {
        bool2 = true;
        label366:
        if (localFile == null) {
          break label496;
        }
        localObject3 = localFile.listFiles();
        i = 0;
        label380:
        if (i >= localObject3.length) {
          break label496;
        }
      }
    }
    for (;;)
    {
      APLog.i("APPluginUtils", "isNeedUpdateFromLocal List isValid:" + bool3);
      if (!bool3)
      {
        return false;
        localObject4 = localObject3[i];
        if (((File)localObject4).getName().equalsIgnoreCase((String)localObject1))
        {
          bool3 = a(((File)localObject4).getCanonicalPath(), (String)localObject2);
          if (bool3)
          {
            bool3 = true;
            continue;
          }
        }
        i += 1;
        break label380;
        label476:
        return true;
      }
      break label109;
      break label366;
      break label353;
      label487:
      if (paramContext != null) {
        break label173;
      }
      break;
      label494:
      return false;
      label496:
      boolean bool3 = false;
    }
  }
  
  public static boolean isPluginInstalled(Context paramContext)
  {
    paramContext = a(paramContext);
    int k;
    int j;
    int i;
    if (paramContext != null)
    {
      paramContext = paramContext.listFiles();
      k = 0;
      j = 0;
      i = 0;
      if (k < paramContext.length) {}
    }
    for (;;)
    {
      if ((i != 0) && (j != 0))
      {
        return true;
        Object localObject = paramContext[k];
        int m;
        if (localObject.getName().startsWith("MidasCore")) {
          m = 1;
        }
        for (;;)
        {
          k += 1;
          i = m;
          break;
          m = i;
          if (localObject.getName().startsWith("MidasPay"))
          {
            j = 1;
            m = i;
          }
        }
      }
      return false;
      j = 0;
      i = 0;
    }
  }
  
  public static boolean isPluginValid(Context paramContext)
  {
    APLog.i("APPluginUtils", "isPluginValid");
    File localFile = a(paramContext);
    try
    {
      paramContext = new File(localFile.getCanonicalPath() + "/MidasSign.ini");
      if (!paramContext.exists())
      {
        APLog.i("APPluginUtils", "isPluginValid sig file is not found");
        return false;
      }
      localHashMap = new HashMap();
      localObject1 = new BufferedReader(new FileReader(paramContext.getCanonicalPath()));
      localObject2 = new APMidasRSATools();
      paramContext = ((BufferedReader)localObject1).readLine();
    }
    catch (Exception paramContext)
    {
      HashMap localHashMap;
      Object localObject1;
      Object localObject2;
      int i;
      paramContext.printStackTrace();
      return false;
    }
    paramContext = localFile.listFiles();
    int j = 0;
    i = 0;
    for (;;)
    {
      if (j >= paramContext.length)
      {
        APLog.i("APPluginUtils", "isPluginValid count:" + i);
        if ((i == localHashMap.size()) || (i >= 3)) {
          break label440;
        }
        return false;
      }
      label440:
      do
      {
        APLog.i("APPluginUtils", "isPluginValid sline:" + paramContext);
        if (TextUtils.isEmpty(paramContext)) {
          break;
        }
        Object localObject3 = paramContext.split("\\:");
        paramContext = localObject3[0];
        localObject3 = ((APMidasRSATools)localObject2).deCodeKey(localObject3[1]);
        localObject3 = ((String)localObject3).substring(((String)localObject3).length() - 32);
        paramContext = paramContext.split("\\_")[0];
        APLog.i("APPluginUtils", "isPluginValid name:" + paramContext);
        APLog.i("APPluginUtils", "isPluginValid md5:" + (String)localObject3);
        localHashMap.put(paramContext, localObject3);
        paramContext = ((BufferedReader)localObject1).readLine();
        continue;
        localFile = paramContext[j];
        localObject1 = localFile.getName();
        if (!((String)localObject1).startsWith("MidasSign"))
        {
          if (!((String)localObject1).startsWith("Midas")) {
            break label452;
          }
          localObject2 = (String)localHashMap.get(localObject1.split("\\_")[0]);
          APLog.i("APPluginUtils", "isPluginValid file:" + (String)localObject1 + " MD5:" + (String)localObject2);
          if (TextUtils.isEmpty((CharSequence)localObject2)) {
            break label452;
          }
          if (!a(localFile.getCanonicalPath(), (String)localObject2))
          {
            localFile.delete();
          }
          else
          {
            i += 1;
            break label452;
            return true;
          }
        }
        break label452;
      } while (paramContext != null);
      break;
      label452:
      j += 1;
    }
  }
  
  public static void release()
  {
    a.clear();
    b.clear();
  }
  
  public static String toHexString(byte[] paramArrayOfByte)
  {
    StringBuilder localStringBuilder = new StringBuilder(paramArrayOfByte.length * 2);
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfByte.length) {
        return localStringBuilder.toString();
      }
      localStringBuilder.append(c[((paramArrayOfByte[i] & 0xF0) >>> 4)]);
      localStringBuilder.append(c[(paramArrayOfByte[i] & 0xF)]);
      i += 1;
    }
  }
  
  public static void unInstallPlugin(Context paramContext)
  {
    APLog.i("APPluginUtils", "unInstallPlugin");
    deletePlugin(paramContext);
    deleteDex(paramContext);
    deleteLibs(paramContext);
    a.clear();
    b.clear();
    APPluginStatic.release();
    e += 1;
  }
}
