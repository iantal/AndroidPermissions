package com.tencent.bugly.unity;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.os.Process;
import android.text.TextUtils;
import android.util.Log;
import com.unity3d.player.UnityPlayer;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class UnityAgent
{
  private static UnityAgent a = null;
  public static String sdkPackageName = "com.tencent.bugly";
  private Context b = null;
  private Handler c = null;
  
  private UnityAgent()
  {
    applicationContext();
    this.c = new Handler(Looper.getMainLooper());
  }
  
  private static String a(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if (sdkPackageName == null) {
      sdkPackageName = "com.tencent.bugly";
    }
    localStringBuilder.append(sdkPackageName);
    localStringBuilder.append(".");
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  public static UnityAgent getInstance()
  {
    try
    {
      if (a == null) {
        a = new UnityAgent();
      }
      UnityAgent localUnityAgent = a;
      return localUnityAgent;
    }
    finally {}
  }
  
  public Context applicationContext()
  {
    if (this.b == null)
    {
      Activity localActivity = currentActivity();
      if (localActivity != null) {
        this.b = localActivity.getApplicationContext();
      }
    }
    return this.b;
  }
  
  public Activity currentActivity()
  {
    return UnityPlayer.currentActivity;
  }
  
  public void exitApplication()
  {
    int i = Process.myPid();
    printLog(String.format("Exit application by kill process %d", new Object[] { Integer.valueOf(i) }));
    Process.killProcess(i);
  }
  
  public String getVersion()
  {
    return "1.2.0";
  }
  
  public void printLog(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    Log.i("UnityAgent", paramString);
  }
  
  public void sendUnityMessage(String paramString1, String paramString2, String paramString3)
  {
    UnityPlayer.UnitySendMessage(paramString1, paramString2, paramString3);
  }
  
  public void setUserId(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return;
    }
    a.a(a("crashreport.CrashReport"), "setUserId", new Object[] { paramString });
  }
  
  public void traceException(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    a.a(a("crashreport.inner.InnerAPI"), "postU3dCrashAsync", new Object[] { paramString1, paramString2, paramString3 });
    if (paramBoolean)
    {
      if (this.c != null) {
        this.c.postDelayed(new Runnable()
        {
          public final void run()
          {
            UnityAgent.this.exitApplication();
          }
        }, 3000L);
      }
    }
    else {
      return;
    }
    try
    {
      Thread.sleep(3000L);
      exitApplication();
      return;
    }
    catch (InterruptedException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  static final class a
  {
    public static Object a(String paramString1, String paramString2, Object[] paramArrayOfObject)
    {
      int j = 0;
      for (;;)
      {
        try
        {
          Class localClass = Class.forName(paramString1);
          if (paramArrayOfObject != null)
          {
            i = paramArrayOfObject.length;
            if (i == 0) {
              break label111;
            }
            Class[] arrayOfClass = new Class[i];
            paramString1 = arrayOfClass;
            if (j < i)
            {
              arrayOfClass[j] = paramArrayOfObject[j].getClass();
              j += 1;
              continue;
            }
            paramString1 = localClass.getMethod(paramString2, paramString1);
            paramString1.setAccessible(true);
            paramString1 = paramString1.invoke(null, paramArrayOfObject);
            return paramString1;
          }
        }
        catch (ClassNotFoundException paramString1)
        {
          paramString1.printStackTrace();
          return null;
        }
        catch (NoSuchMethodException paramString1)
        {
          paramString1.printStackTrace();
          return null;
        }
        catch (InvocationTargetException paramString1)
        {
          paramString1.printStackTrace();
          return null;
        }
        catch (IllegalAccessException paramString1)
        {
          paramString1.printStackTrace();
          return null;
        }
        int i = 0;
        continue;
        label111:
        paramString1 = null;
      }
    }
  }
}
