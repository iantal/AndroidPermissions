package com.tencent.bugly.crashreport.crash.jni;

import android.content.Context;
import com.tencent.bugly.proguard.j;
import com.tencent.bugly.proguard.n;
import com.tencent.bugly.proguard.u;
import com.tencent.bugly.proguard.x;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class b
{
  private StringBuilder a;
  private int b = 0;
  
  public b(StringBuilder paramStringBuilder, int paramInt)
  {
    this.a = paramStringBuilder;
    this.b = paramInt;
  }
  
  /* Error */
  public static x a(Context paramContext, String paramString, NativeExceptionHandler paramNativeExceptionHandler)
  {
    // Byte code:
    //   0: aload_0
    //   1: ifnull +11 -> 12
    //   4: aload_1
    //   5: ifnull +7 -> 12
    //   8: aload_2
    //   9: ifnonnull +15 -> 24
    //   12: ldc 23
    //   14: iconst_0
    //   15: anewarray 4	java/lang/Object
    //   18: invokestatic 29	com/tencent/bugly/proguard/u:c	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   21: pop
    //   22: aconst_null
    //   23: areturn
    //   24: new 31	java/io/File
    //   27: dup
    //   28: aload_1
    //   29: ldc 33
    //   31: invokespecial 36	java/io/File:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   34: astore_1
    //   35: aload_1
    //   36: invokevirtual 40	java/io/File:exists	()Z
    //   39: ifeq -17 -> 22
    //   42: aload_1
    //   43: invokevirtual 43	java/io/File:canRead	()Z
    //   46: ifeq -24 -> 22
    //   49: new 45	java/io/FileInputStream
    //   52: dup
    //   53: aload_1
    //   54: invokespecial 48	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   57: astore 4
    //   59: aload 4
    //   61: astore_1
    //   62: aload 4
    //   64: invokestatic 51	com/tencent/bugly/crashreport/crash/jni/b:a	(Ljava/io/InputStream;)Ljava/lang/String;
    //   67: astore_3
    //   68: aload_3
    //   69: ifnull +15 -> 84
    //   72: aload 4
    //   74: astore_1
    //   75: aload_3
    //   76: ldc 53
    //   78: invokevirtual 59	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   81: ifne +34 -> 115
    //   84: aload 4
    //   86: astore_1
    //   87: ldc 61
    //   89: iconst_1
    //   90: anewarray 4	java/lang/Object
    //   93: dup
    //   94: iconst_0
    //   95: aload_3
    //   96: aastore
    //   97: invokestatic 29	com/tencent/bugly/proguard/u:c	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   100: pop
    //   101: aload 4
    //   103: invokevirtual 64	java/io/FileInputStream:close	()V
    //   106: aconst_null
    //   107: areturn
    //   108: astore_0
    //   109: aload_0
    //   110: invokevirtual 67	java/io/IOException:printStackTrace	()V
    //   113: aconst_null
    //   114: areturn
    //   115: aload 4
    //   117: astore_1
    //   118: new 69	java/util/HashMap
    //   121: dup
    //   122: invokespecial 70	java/util/HashMap:<init>	()V
    //   125: astore 6
    //   127: aconst_null
    //   128: astore_3
    //   129: aload 4
    //   131: astore_1
    //   132: aload 4
    //   134: invokestatic 51	com/tencent/bugly/crashreport/crash/jni/b:a	(Ljava/io/InputStream;)Ljava/lang/String;
    //   137: astore 5
    //   139: aload 5
    //   141: ifnull +32 -> 173
    //   144: aload_3
    //   145: ifnonnull +9 -> 154
    //   148: aload 5
    //   150: astore_3
    //   151: goto -22 -> 129
    //   154: aload 4
    //   156: astore_1
    //   157: aload 6
    //   159: aload_3
    //   160: aload 5
    //   162: invokeinterface 76 3 0
    //   167: pop
    //   168: aconst_null
    //   169: astore_3
    //   170: goto -41 -> 129
    //   173: aload_3
    //   174: ifnull +34 -> 208
    //   177: aload 4
    //   179: astore_1
    //   180: ldc 78
    //   182: iconst_1
    //   183: anewarray 4	java/lang/Object
    //   186: dup
    //   187: iconst_0
    //   188: aload_3
    //   189: aastore
    //   190: invokestatic 29	com/tencent/bugly/proguard/u:c	(Ljava/lang/String;[Ljava/lang/Object;)Z
    //   193: pop
    //   194: aload 4
    //   196: invokevirtual 64	java/io/FileInputStream:close	()V
    //   199: aconst_null
    //   200: areturn
    //   201: astore_0
    //   202: aload_0
    //   203: invokevirtual 67	java/io/IOException:printStackTrace	()V
    //   206: aconst_null
    //   207: areturn
    //   208: aload 4
    //   210: astore_1
    //   211: aload_0
    //   212: aload 6
    //   214: aload_2
    //   215: invokestatic 81	com/tencent/bugly/crashreport/crash/jni/b:a	(Landroid/content/Context;Ljava/util/Map;Lcom/tencent/bugly/crashreport/crash/jni/NativeExceptionHandler;)Lcom/tencent/bugly/proguard/x;
    //   218: astore_0
    //   219: aload 4
    //   221: invokevirtual 64	java/io/FileInputStream:close	()V
    //   224: aload_0
    //   225: areturn
    //   226: astore_1
    //   227: aload_1
    //   228: invokevirtual 67	java/io/IOException:printStackTrace	()V
    //   231: aload_0
    //   232: areturn
    //   233: astore_2
    //   234: aconst_null
    //   235: astore_0
    //   236: aload_0
    //   237: astore_1
    //   238: aload_2
    //   239: invokevirtual 67	java/io/IOException:printStackTrace	()V
    //   242: aload_0
    //   243: ifnull -221 -> 22
    //   246: aload_0
    //   247: invokevirtual 64	java/io/FileInputStream:close	()V
    //   250: aconst_null
    //   251: areturn
    //   252: astore_0
    //   253: aload_0
    //   254: invokevirtual 67	java/io/IOException:printStackTrace	()V
    //   257: aconst_null
    //   258: areturn
    //   259: astore_0
    //   260: aconst_null
    //   261: astore_1
    //   262: aload_1
    //   263: ifnull +7 -> 270
    //   266: aload_1
    //   267: invokevirtual 64	java/io/FileInputStream:close	()V
    //   270: aload_0
    //   271: athrow
    //   272: astore_1
    //   273: aload_1
    //   274: invokevirtual 67	java/io/IOException:printStackTrace	()V
    //   277: goto -7 -> 270
    //   280: astore_0
    //   281: goto -19 -> 262
    //   284: astore_2
    //   285: aload 4
    //   287: astore_0
    //   288: goto -52 -> 236
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	291	0	paramContext	Context
    //   0	291	1	paramString	String
    //   0	291	2	paramNativeExceptionHandler	NativeExceptionHandler
    //   67	122	3	localObject	Object
    //   57	229	4	localFileInputStream	java.io.FileInputStream
    //   137	24	5	str	String
    //   125	88	6	localHashMap	HashMap
    // Exception table:
    //   from	to	target	type
    //   101	106	108	java/io/IOException
    //   194	199	201	java/io/IOException
    //   219	224	226	java/io/IOException
    //   49	59	233	java/io/IOException
    //   246	250	252	java/io/IOException
    //   49	59	259	finally
    //   266	270	272	java/io/IOException
    //   62	68	280	finally
    //   75	84	280	finally
    //   87	101	280	finally
    //   118	127	280	finally
    //   132	139	280	finally
    //   157	168	280	finally
    //   180	194	280	finally
    //   211	219	280	finally
    //   238	242	280	finally
    //   62	68	284	java/io/IOException
    //   75	84	284	java/io/IOException
    //   87	101	284	java/io/IOException
    //   118	127	284	java/io/IOException
    //   132	139	284	java/io/IOException
    //   157	168	284	java/io/IOException
    //   180	194	284	java/io/IOException
    //   211	219	284	java/io/IOException
  }
  
  private static x a(Context paramContext, Map<String, String> paramMap, NativeExceptionHandler paramNativeExceptionHandler)
  {
    if (paramMap == null)
    {
      paramContext = null;
      return paramContext;
    }
    if (n.a(paramContext) == null)
    {
      u.c("abnormal com info not created", new Object[0]);
      return null;
    }
    paramContext = (String)paramMap.get("intStateStr");
    if ((paramContext == null) || (paramContext.trim().length() <= 0))
    {
      u.c("no intStateStr", new Object[0]);
      return null;
    }
    paramContext = c(paramContext);
    if (paramContext == null)
    {
      u.c("parse intSateMap fail", new Object[] { Integer.valueOf(paramMap.size()) });
      return null;
    }
    for (;;)
    {
      String str2;
      try
      {
        int i = ((Integer)paramContext.get("ep")).intValue();
        int j = ((Integer)paramContext.get("et")).intValue();
        ((Integer)paramContext.get("sino")).intValue();
        int k = ((Integer)paramContext.get("sico")).intValue();
        ((Integer)paramContext.get("spd")).intValue();
        ((Integer)paramContext.get("sud")).intValue();
        long l1 = ((Integer)paramContext.get("ets")).intValue();
        long l2 = ((Integer)paramContext.get("etms")).intValue();
        String str5 = (String)paramMap.get("soVersion");
        if (str5 == null)
        {
          u.c("error format at version", new Object[0]);
          return null;
        }
        String str3 = (String)paramMap.get("errorAddr");
        if (str3 == null)
        {
          str3 = "unknown2";
          paramContext = (String)paramMap.get("codeMsg");
          if (paramContext != null) {
            break label577;
          }
          paramContext = "unknown2";
          String str4 = (String)paramMap.get("tombPath");
          if (str4 != null) {
            break label580;
          }
          str4 = "unknown2";
          String str1 = (String)paramMap.get("signalName");
          if (str1 != null) {
            break label583;
          }
          str1 = "unknown2";
          paramMap.get("errnoMsg");
          str2 = (String)paramMap.get("stack");
          if (str2 != null) {
            break label586;
          }
          str2 = "unknown2";
          paramMap = (String)paramMap.get("jstack");
          if (paramMap == null) {
            break label589;
          }
          paramMap = str2 + "java:\n" + paramMap;
          l2 /= 1000L;
          String str6 = a(paramMap);
          String str7 = "UNKNOWN(" + i + ")";
          str2 = str1;
          paramMap = paramContext;
          if (k > 0)
          {
            str2 = str1 + "(" + paramContext + ")";
            paramMap = "KERNEL";
          }
          paramMap = paramNativeExceptionHandler.packageCrashDatas("unknown(" + j + ")", l1 * 1000L + l2, str2, str3, str6, paramMap, str7, str4, str5);
          paramContext = paramMap;
          if (paramMap == null) {
            break;
          }
          paramMap.k = true;
          return paramMap;
        }
      }
      catch (Throwable paramContext)
      {
        u.c("error format", new Object[0]);
        paramContext.printStackTrace();
        return null;
      }
      continue;
      label577:
      continue;
      label580:
      continue;
      label583:
      continue;
      label586:
      continue;
      label589:
      paramMap = str2;
    }
  }
  
  private static String a(InputStream paramInputStream)
    throws IOException
  {
    if (paramInputStream == null) {
      return null;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    for (;;)
    {
      int i = paramInputStream.read();
      if (i == -1) {
        break;
      }
      if (i == 0) {
        return localStringBuilder.toString();
      }
      localStringBuilder.append((char)i);
    }
  }
  
  protected static String a(String paramString)
  {
    if (paramString == null) {
      paramString = "";
    }
    String[] arrayOfString;
    do
    {
      return paramString;
      arrayOfString = paramString.split("\n");
    } while ((arrayOfString == null) && (arrayOfString.length == 0));
    paramString = new StringBuilder();
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      String str = arrayOfString[i];
      if (!str.contains("java.lang.Thread.getStackTrace(")) {
        paramString.append(str).append("\n");
      }
      i += 1;
    }
    return paramString.toString();
  }
  
  public static void b(String paramString)
  {
    paramString = new File(paramString, "rqd_record.eup");
    if ((!paramString.exists()) || (!paramString.canWrite())) {
      return;
    }
    paramString.delete();
    paramString.getAbsoluteFile();
    u.a();
  }
  
  private static Map<String, Integer> c(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    for (;;)
    {
      int i;
      String[] arrayOfString2;
      try
      {
        HashMap localHashMap = new HashMap();
        String[] arrayOfString1 = paramString.split(",");
        int j = arrayOfString1.length;
        i = 0;
        if (i >= j) {
          break;
        }
        String str = arrayOfString1[i];
        arrayOfString2 = str.split(":");
        if (arrayOfString2.length != 2)
        {
          u.c("error format at %s", new Object[] { str });
          return null;
        }
      }
      catch (Exception localException)
      {
        u.c("error format intStateStr %s", new Object[] { paramString });
        localException.printStackTrace();
        return null;
      }
      int k = Integer.parseInt(arrayOfString2[1]);
      localException.put(arrayOfString2[0], Integer.valueOf(k));
      i += 1;
    }
    return localException;
  }
  
  private void d(String paramString)
  {
    int i = 0;
    while (i < this.b)
    {
      this.a.append('\t');
      i += 1;
    }
    if (paramString != null) {
      this.a.append(paramString).append(": ");
    }
  }
  
  public b a(byte paramByte, String paramString)
  {
    d(paramString);
    this.a.append(paramByte).append('\n');
    return this;
  }
  
  public b a(char paramChar, String paramString)
  {
    d(paramString);
    this.a.append(paramChar).append('\n');
    return this;
  }
  
  public b a(double paramDouble, String paramString)
  {
    d(paramString);
    this.a.append(paramDouble).append('\n');
    return this;
  }
  
  public b a(float paramFloat, String paramString)
  {
    d(paramString);
    this.a.append(paramFloat).append('\n');
    return this;
  }
  
  public b a(int paramInt, String paramString)
  {
    d(paramString);
    this.a.append(paramInt).append('\n');
    return this;
  }
  
  public b a(long paramLong, String paramString)
  {
    d(paramString);
    this.a.append(paramLong).append('\n');
    return this;
  }
  
  public b a(j paramJ, String paramString)
  {
    a('{', paramString);
    if (paramJ == null) {
      this.a.append('\t').append("null");
    }
    for (;;)
    {
      a('}', null);
      return this;
      paramJ.a(this.a, this.b + 1);
    }
  }
  
  public <T> b a(T paramT, String paramString)
  {
    if (paramT == null)
    {
      this.a.append("null\n");
      return this;
    }
    if ((paramT instanceof Byte))
    {
      a(((Byte)paramT).byteValue(), paramString);
      return this;
    }
    if ((paramT instanceof Boolean))
    {
      a(((Boolean)paramT).booleanValue(), paramString);
      return this;
    }
    if ((paramT instanceof Short))
    {
      a(((Short)paramT).shortValue(), paramString);
      return this;
    }
    if ((paramT instanceof Integer))
    {
      a(((Integer)paramT).intValue(), paramString);
      return this;
    }
    if ((paramT instanceof Long))
    {
      a(((Long)paramT).longValue(), paramString);
      return this;
    }
    if ((paramT instanceof Float))
    {
      a(((Float)paramT).floatValue(), paramString);
      return this;
    }
    if ((paramT instanceof Double))
    {
      a(((Double)paramT).doubleValue(), paramString);
      return this;
    }
    if ((paramT instanceof String))
    {
      a((String)paramT, paramString);
      return this;
    }
    if ((paramT instanceof Map))
    {
      a((Map)paramT, paramString);
      return this;
    }
    if ((paramT instanceof List))
    {
      a((List)paramT, paramString);
      return this;
    }
    if ((paramT instanceof j))
    {
      a((j)paramT, paramString);
      return this;
    }
    if ((paramT instanceof byte[]))
    {
      a((byte[])paramT, paramString);
      return this;
    }
    if ((paramT instanceof boolean[]))
    {
      a((boolean[])paramT, paramString);
      return this;
    }
    if ((paramT instanceof short[]))
    {
      a((short[])paramT, paramString);
      return this;
    }
    if ((paramT instanceof int[]))
    {
      a((int[])paramT, paramString);
      return this;
    }
    if ((paramT instanceof long[]))
    {
      a((long[])paramT, paramString);
      return this;
    }
    if ((paramT instanceof float[]))
    {
      a((float[])paramT, paramString);
      return this;
    }
    if ((paramT instanceof double[]))
    {
      a((double[])paramT, paramString);
      return this;
    }
    if (paramT.getClass().isArray())
    {
      a((Object[])paramT, paramString);
      return this;
    }
    throw new com.tencent.bugly.proguard.b("write object error: unsupport type.");
  }
  
  public b a(String paramString1, String paramString2)
  {
    d(paramString2);
    if (paramString1 == null)
    {
      this.a.append("null\n");
      return this;
    }
    this.a.append(paramString1).append('\n');
    return this;
  }
  
  public <T> b a(Collection<T> paramCollection, String paramString)
  {
    if (paramCollection == null)
    {
      d(paramString);
      this.a.append("null\t");
      return this;
    }
    return a(paramCollection.toArray(), paramString);
  }
  
  public <K, V> b a(Map<K, V> paramMap, String paramString)
  {
    d(paramString);
    if (paramMap == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramMap.isEmpty())
    {
      this.a.append(paramMap.size()).append(", {}\n");
      return this;
    }
    this.a.append(paramMap.size()).append(", {\n");
    paramString = new b(this.a, this.b + 1);
    b localB = new b(this.a, this.b + 2);
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      paramString.a('(', null);
      localB.a(localEntry.getKey(), null);
      localB.a(localEntry.getValue(), null);
      paramString.a(')', null);
    }
    a('}', null);
    return this;
  }
  
  public b a(short paramShort, String paramString)
  {
    d(paramString);
    this.a.append(paramShort).append('\n');
    return this;
  }
  
  public b a(boolean paramBoolean, String paramString)
  {
    d(paramString);
    paramString = this.a;
    if (paramBoolean) {}
    for (char c = 'T';; c = 'F')
    {
      paramString.append(c).append('\n');
      return this;
    }
  }
  
  public b a(byte[] paramArrayOfByte, String paramString)
  {
    d(paramString);
    if (paramArrayOfByte == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfByte.length == 0)
    {
      this.a.append(paramArrayOfByte.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfByte.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfByte.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfByte[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
  
  public b a(double[] paramArrayOfDouble, String paramString)
  {
    d(paramString);
    if (paramArrayOfDouble == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfDouble.length == 0)
    {
      this.a.append(paramArrayOfDouble.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfDouble.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfDouble.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfDouble[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
  
  public b a(float[] paramArrayOfFloat, String paramString)
  {
    d(paramString);
    if (paramArrayOfFloat == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfFloat.length == 0)
    {
      this.a.append(paramArrayOfFloat.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfFloat.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfFloat.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfFloat[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
  
  public b a(int[] paramArrayOfInt, String paramString)
  {
    d(paramString);
    if (paramArrayOfInt == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfInt.length == 0)
    {
      this.a.append(paramArrayOfInt.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfInt.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfInt.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfInt[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
  
  public b a(long[] paramArrayOfLong, String paramString)
  {
    d(paramString);
    if (paramArrayOfLong == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfLong.length == 0)
    {
      this.a.append(paramArrayOfLong.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfLong.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfLong.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfLong[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
  
  public <T> b a(T[] paramArrayOfT, String paramString)
  {
    d(paramString);
    if (paramArrayOfT == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfT.length == 0)
    {
      this.a.append(paramArrayOfT.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfT.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfT.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfT[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
  
  public b a(short[] paramArrayOfShort, String paramString)
  {
    d(paramString);
    if (paramArrayOfShort == null)
    {
      this.a.append("null\n");
      return this;
    }
    if (paramArrayOfShort.length == 0)
    {
      this.a.append(paramArrayOfShort.length).append(", []\n");
      return this;
    }
    this.a.append(paramArrayOfShort.length).append(", [\n");
    paramString = new b(this.a, this.b + 1);
    int j = paramArrayOfShort.length;
    int i = 0;
    while (i < j)
    {
      paramString.a(paramArrayOfShort[i], null);
      i += 1;
    }
    a(']', null);
    return this;
  }
}
