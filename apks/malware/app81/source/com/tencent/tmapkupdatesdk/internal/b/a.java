package com.tencent.tmapkupdatesdk.internal.b;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.text.TextUtils;
import org.apache.http.HttpHost;
import org.apache.http.client.HttpClient;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;

public class a
{
  private static String a = "10.0.0.172";
  private static int b = 80;
  private static String c = "10.0.0.200";
  private static HttpClient d = null;
  
  public static HttpClient a()
  {
    try
    {
      if (d == null)
      {
        localObject1 = new BasicHttpParams();
        ConnManagerParams.setTimeout((HttpParams)localObject1, 1000L);
        ConnManagerParams.setMaxTotalConnections((HttpParams)localObject1, 200);
        ConnManagerParams.setMaxConnectionsPerRoute((HttpParams)localObject1, new ConnPerRouteBean(20));
        HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, 30000);
        HttpConnectionParams.setSoTimeout((HttpParams)localObject1, 30000);
        HttpProtocolParams.setUseExpectContinue((HttpParams)localObject1, true);
        HttpClientParams.setRedirecting((HttpParams)localObject1, true);
        HttpConnectionParams.setSocketBufferSize((HttpParams)localObject1, 4096);
        SchemeRegistry localSchemeRegistry = new SchemeRegistry();
        localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
        localSchemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
        d = new DefaultHttpClient(new ThreadSafeClientConnManager((HttpParams)localObject1, localSchemeRegistry), (HttpParams)localObject1);
      }
      a(d);
      Object localObject1 = d;
      return localObject1;
    }
    finally {}
  }
  
  public static void a(HttpClient paramHttpClient)
  {
    Object localObject = b();
    if (!TextUtils.isEmpty((CharSequence)localObject))
    {
      if ((!((String)localObject).equalsIgnoreCase("cmwap")) && (!((String)localObject).equalsIgnoreCase("3gwap")) && (!((String)localObject).equalsIgnoreCase("uniwap"))) {
        break label68;
      }
      localObject = new HttpHost(a, b);
      paramHttpClient.getParams().setParameter("http.route.default-proxy", localObject);
    }
    label68:
    while (!((String)localObject).equalsIgnoreCase("ctwap")) {
      return;
    }
    localObject = new HttpHost(c, b);
    paramHttpClient.getParams().setParameter("http.route.default-proxy", localObject);
  }
  
  public static String b()
  {
    Object localObject = com.tencent.tmapkupdatesdk.internal.c.a.a().b();
    if (localObject == null) {
      return "";
    }
    if (((Context)localObject).checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") == -1) {
      return "";
    }
    localObject = ((ConnectivityManager)((Context)localObject).getSystemService("connectivity")).getActiveNetworkInfo();
    if (localObject == null) {
      return "";
    }
    if (((NetworkInfo)localObject).getType() == 1) {
      return "wifi";
    }
    localObject = ((NetworkInfo)localObject).getExtraInfo();
    if (localObject == null) {
      return "";
    }
    return ((String)localObject).toLowerCase();
  }
}
