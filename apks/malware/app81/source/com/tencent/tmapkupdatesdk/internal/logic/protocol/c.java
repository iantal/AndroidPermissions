package com.tencent.tmapkupdatesdk.internal.logic.protocol;

import com.qq.taf.jce.JceInputStream;
import com.qq.taf.jce.JceOutputStream;
import com.qq.taf.jce.JceStruct;
import com.tencent.tmapkupdatesdk.internal.c.a;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.JceCmd;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.Net;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.ReqHead;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.Request;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.Response;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.RspHead;
import com.tencent.tmapkupdatesdk.internal.logic.protocol.jce.Terminal;
import com.tencent.tmassistantbase.util.Cryptor;
import com.tencent.tmassistantbase.util.TMLog;
import com.tencent.tmassistantbase.util.ZipUtils;

public class c
{
  private static String a = "ProtocolPackage";
  
  public static int a(JceStruct paramJceStruct)
  {
    if (paramJceStruct == null) {
      return -1;
    }
    paramJceStruct = paramJceStruct.getClass().getSimpleName();
    return JceCmd.convert(paramJceStruct.substring(0, paramJceStruct.length() - "Request".length())).value();
  }
  
  public static JceStruct a(JceStruct paramJceStruct, byte[] paramArrayOfByte)
  {
    TMLog.i(a, "enter");
    if ((paramJceStruct != null) && (paramArrayOfByte != null))
    {
      paramJceStruct = e(paramJceStruct);
      if (paramJceStruct != null) {
        try
        {
          paramArrayOfByte = new JceInputStream(paramArrayOfByte);
          paramArrayOfByte.setServerEncoding("utf-8");
          paramJceStruct.readFrom(paramArrayOfByte);
          TMLog.i(a, "exit");
          return paramJceStruct;
        }
        catch (Exception paramJceStruct)
        {
          paramJceStruct.printStackTrace();
          TMLog.w(a, "exception: ", paramJceStruct);
          return null;
        }
      }
    }
    TMLog.i(a, "exit");
    return null;
  }
  
  public static Response a(byte[] paramArrayOfByte)
  {
    TMLog.i(a, "enter");
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length < 4))
    {
      TMLog.i(a, "null == dataBuffer || dataBuffer.length < 4");
      TMLog.i(a, "exit");
      return null;
    }
    Response localResponse = new Response();
    try
    {
      paramArrayOfByte = new JceInputStream(paramArrayOfByte);
      paramArrayOfByte.setServerEncoding("utf-8");
      localResponse.readFrom(paramArrayOfByte);
      if (localResponse.head.ret == 0)
      {
        if ((localResponse.head.encryptWithPack & 0x2) == 2)
        {
          localResponse.body = b(localResponse.body, "ji*9^&43U0X-~./(".getBytes());
          TMLog.i(a, "decrypt process");
        }
        if ((localResponse.head.encryptWithPack & 0x1) == 1)
        {
          localResponse.body = ZipUtils.unzip(localResponse.body);
          TMLog.i(a, "unzip process");
        }
        a.a().b(localResponse.head.phoneGuid);
      }
      TMLog.i(a, "exit");
      return localResponse;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
      TMLog.w(a, "exception: ", paramArrayOfByte);
    }
    return null;
  }
  
  public static byte[] a(Request paramRequest)
  {
    TMLog.i(a, "enter");
    if (paramRequest == null)
    {
      TMLog.i(a, "null == request");
      TMLog.i(a, "exit");
      return null;
    }
    paramRequest.head.encryptWithPack = 0;
    if (paramRequest.body.length > 256)
    {
      paramRequest.body = ZipUtils.zip(paramRequest.body);
      TMLog.i(a, "zip process");
      paramRequest.head.encryptWithPack = ((byte)(paramRequest.head.encryptWithPack | 0x1));
    }
    paramRequest.body = a(paramRequest.body, "ji*9^&43U0X-~./(".getBytes());
    TMLog.i(a, "encrypt process");
    paramRequest.head.encryptWithPack = ((byte)(paramRequest.head.encryptWithPack | 0x2));
    TMLog.i(a, "exit");
    return d(paramRequest);
  }
  
  public static byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return new Cryptor().encrypt(paramArrayOfByte1, paramArrayOfByte2);
  }
  
  public static ReqHead b(JceStruct paramJceStruct)
  {
    TMLog.i(a, "enter");
    if (paramJceStruct == null)
    {
      TMLog.i(a, "null == jceRequestStruce");
      TMLog.i(a, "exit");
      return null;
    }
    byte b = (byte)a.a().f();
    Object localObject = a.a().d();
    a.a();
    Net localNet = new Net(b, (String)localObject, 0, a.c());
    localObject = new ReqHead();
    ((ReqHead)localObject).requestId = a.n();
    ((ReqHead)localObject).cmdId = a(paramJceStruct);
    ((ReqHead)localObject).qua = a.a().g();
    ((ReqHead)localObject).phoneGuid = a.a().j();
    ((ReqHead)localObject).terminal = a.a().h();
    ((ReqHead)localObject).assistantAPILevel = 0;
    ((ReqHead)localObject).assistantVersionCode = 0;
    ((ReqHead)localObject).net = localNet;
    ((ReqHead)localObject).hostPackageName = a.b(a.a().b());
    ((ReqHead)localObject).hostVersionCode = a.c(a.a().b());
    paramJceStruct = new StringBuilder();
    paramJceStruct.append("head:  head.requestId = " + ((ReqHead)localObject).requestId + "; head.cmdId = " + ((ReqHead)localObject).cmdId + "; head.qua = " + ((ReqHead)localObject).qua + "; head.phoneGuid = " + ((ReqHead)localObject).phoneGuid + "; head.assistantAPILevel = " + ((ReqHead)localObject).assistantAPILevel + "; head.assistantVersionCode = " + ((ReqHead)localObject).assistantVersionCode + "; head.hostPackageName" + ((ReqHead)localObject).hostPackageName + "; head.hostVersionCode= " + ((ReqHead)localObject).hostVersionCode);
    if (((ReqHead)localObject).terminal != null) {
      paramJceStruct.append("; head.terminal : (imei = " + ((ReqHead)localObject).terminal.imei + "; imsi = " + ((ReqHead)localObject).terminal.imsi + "; macAdress = " + ((ReqHead)localObject).terminal.macAdress + "; androidIdSdCard = " + ((ReqHead)localObject).terminal.androidIdSdCard + "; androidId = " + ((ReqHead)localObject).terminal.androidId + " )");
    }
    if (((ReqHead)localObject).net != null) {
      paramJceStruct.append("; head.net: (netType = " + ((ReqHead)localObject).net.netType + "; isWap = " + ((ReqHead)localObject).net.isWap + "; extNetworkOperator = " + ((ReqHead)localObject).net.extNetworkOperator + "; extNetworkType = " + ((ReqHead)localObject).net.extNetworkType + ")");
    }
    TMLog.i(a, paramJceStruct.toString());
    TMLog.i(a, "exit");
    return localObject;
  }
  
  public static byte[] b(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    return new Cryptor().decrypt(paramArrayOfByte1, paramArrayOfByte2);
  }
  
  public static Request c(JceStruct paramJceStruct)
  {
    TMLog.i(a, "enter");
    if (paramJceStruct == null)
    {
      TMLog.i(a, "null == jceRequestStruce");
      TMLog.i(a, "exit");
      return null;
    }
    Request localRequest = new Request();
    localRequest.head = b(paramJceStruct);
    localRequest.body = d(paramJceStruct);
    TMLog.i(a, "exit");
    return localRequest;
  }
  
  public static byte[] d(JceStruct paramJceStruct)
  {
    if (paramJceStruct == null) {
      return null;
    }
    JceOutputStream localJceOutputStream = new JceOutputStream();
    localJceOutputStream.setServerEncoding("utf-8");
    paramJceStruct.writeTo(localJceOutputStream);
    return localJceOutputStream.toByteArray();
  }
  
  private static JceStruct e(JceStruct paramJceStruct)
  {
    TMLog.i(a, "enter");
    if (paramJceStruct == null) {
      return null;
    }
    paramJceStruct = paramJceStruct.getClass().getSimpleName();
    paramJceStruct = paramJceStruct.substring(0, paramJceStruct.length() - "Request".length()) + "Response";
    try
    {
      paramJceStruct = (JceStruct)Class.forName("com.tencent.tmapkupdatesdk.internal.logic.protocol.jce." + paramJceStruct).newInstance();
      TMLog.i(a, "exit");
      return paramJceStruct;
    }
    catch (ClassNotFoundException paramJceStruct)
    {
      for (;;)
      {
        paramJceStruct.printStackTrace();
        TMLog.w(a, "exception: ", paramJceStruct);
        paramJceStruct = null;
      }
    }
    catch (IllegalAccessException paramJceStruct)
    {
      for (;;)
      {
        paramJceStruct.printStackTrace();
        TMLog.w(a, "exception: ", paramJceStruct);
        paramJceStruct = null;
      }
    }
    catch (InstantiationException paramJceStruct)
    {
      for (;;)
      {
        paramJceStruct.printStackTrace();
        TMLog.w(a, "exception: ", paramJceStruct);
        paramJceStruct = null;
      }
    }
  }
}
