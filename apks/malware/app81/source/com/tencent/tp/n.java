package com.tencent.tp;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.util.DisplayMetrics;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.StreamCorruptedException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public final class n
{
  Map a = new TreeMap();
  TreeMap b = new TreeMap();
  k[] c = null;
  Context d = null;
  TreeSet e;
  TreeSet f = new TreeSet();
  String g;
  int h;
  
  public n()
  {
    this.f.clear();
    this.e = new TreeSet();
    this.e.clear();
    this.e.add("166FC4CA01A56F29FB986FB72FE286D0");
    this.e.add("175778EB8721861CBCB77D8D34041588");
    this.e.add("841E13EF937A7AD5A9530EE5E6205DEF");
    this.e.add("D4D63E65BDC3933C55985FEAB3FBE3D5");
    this.e.add("25212873086EE14379E16D9728FA118B");
    this.e.add("2C3890F06BB0FC6C23DF6B1EBA9FF975");
    this.e.add("4FEB2947CF60D83E999FF6C5B7CBABAE");
    this.e.add("53836EC2C4F992A8DE2187AA07B75261");
    this.e.add("603A69D0F6B14AC2504FD8B2114D259A");
    this.e.add("97D17E5FF41B12D8ADFAF73C75D22AAA");
    this.e.add("AE0C63016F0E52C1DC1E0B14C6238612");
    this.e.add("C01C3B24CFA6C973894BAAC2C9F15ABD");
    this.e.add("C3292C45D467C9B05432F2E432D13490");
    this.e.add("23E1CAD613C3A1B55533A23B892E8A4C");
    this.e.add("26294872CA07F01A925214DF1BAFA321");
    this.e.add("2A61C2C27904FB4390D4A64815C58A6A");
    this.e.add("3A9C86CA41B287F1AE21FA55836A6519");
    this.e.add("3E7CA5B37DE5949442BCF5403470C40B");
    this.e.add("A7D420F0AB5B0FFA58CE153359CB6CD2");
    this.e.add("C62AAEB235AE8DA0E17C3C3026225080");
    this.e.add("8AB2A2B558FB11FE077586ABCB6C3E747678C036");
    this.e.add("E18660F33229BE7A5D6F32C356B16518F27C17D8");
    this.e.add("A09BA8CC6BE367919524AE9EFCE482BDC67B4CC2");
    this.e.add("06A73F320863CDD527F07CC191D1C6D4619C55CD");
    this.e.add("1F6C5C8EEE335466483A685F7D4EC32486AFCAEC");
    this.e.add("5429B5A5BD263A6DF389EEB48891B30F8FC0373B");
    this.e.add("FC0FAE11D893B56244AEC8C6F47ECA86AB260108");
    this.e.add("0378FD182FF9468F6A7BCEB5B8D294A89083E026");
    this.e.add("1E24738CECC988EB5AABDF1D0D15E9400183784E");
    this.e.add("275BC83B740D4C607EA0650B527320722D4D6EB2");
    this.e.add("81A3348D42A58AA9850FFB2A1B10FF0625616255");
    this.e.add("9EA2E63ADF3BAF31A277050D75C07816BDE2864F");
    this.e.add("A3D71593E0D20AB12FF62608B1D0823C0A019438");
    this.e.add("B3A73B30628C826AFBA251E2ED5E1026A011F72B");
    this.e.add("C9D4CE25CE87FE916DDCD4D25F95D1934E574D48");
    this.e.add("FC6D4D784A9E493E10B045E87458D15C5A12728E");
    this.e.add("021CA3A0157485F5DBAF6EE513FAF3FC1D789717");
    this.e.add("24798E46B987420BDF2E13640CA4ADB5B545B455");
    this.e.add("5429B5A5BD263A6DF389EEB48891B30F8FC0373B");
    this.e.add("761E56FF87AA359E65A200DD4D33043FF68E11F0");
    this.e.add("BC7D329ABE0ECBB4FE9E3D3E8B5450A9B424F1BD");
  }
  
  private void a(String paramString)
  {
    try
    {
      j.b(paramString);
      return;
    }
    catch (Throwable paramString) {}
  }
  
  /* Error */
  public void a()
  {
    // Byte code:
    //   0: new 150	javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: bipush 8
    //   6: newarray byte
    //   8: dup
    //   9: iconst_0
    //   10: ldc -105
    //   12: bastore
    //   13: dup
    //   14: iconst_1
    //   15: ldc -104
    //   17: bastore
    //   18: dup
    //   19: iconst_2
    //   20: ldc -103
    //   22: bastore
    //   23: dup
    //   24: iconst_3
    //   25: ldc -102
    //   27: bastore
    //   28: dup
    //   29: iconst_4
    //   30: ldc -101
    //   32: bastore
    //   33: dup
    //   34: iconst_5
    //   35: ldc -100
    //   37: bastore
    //   38: dup
    //   39: bipush 6
    //   41: ldc -104
    //   43: bastore
    //   44: dup
    //   45: bipush 7
    //   47: ldc -99
    //   49: bastore
    //   50: ldc -97
    //   52: invokespecial 162	javax/crypto/spec/SecretKeySpec:<init>	([BLjava/lang/String;)V
    //   55: astore_2
    //   56: ldc -97
    //   58: invokestatic 168	javax/crypto/Cipher:getInstance	(Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   61: astore_1
    //   62: aload_1
    //   63: iconst_2
    //   64: aload_2
    //   65: invokevirtual 172	javax/crypto/Cipher:init	(ILjava/security/Key;)V
    //   68: new 174	java/io/File
    //   71: dup
    //   72: new 176	java/lang/StringBuilder
    //   75: dup
    //   76: invokespecial 177	java/lang/StringBuilder:<init>	()V
    //   79: aload_0
    //   80: getfield 32	com/tencent/tp/n:d	Landroid/content/Context;
    //   83: invokevirtual 183	android/content/Context:getFilesDir	()Ljava/io/File;
    //   86: invokevirtual 187	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   89: ldc -67
    //   91: invokevirtual 192	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   94: invokevirtual 196	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   97: invokespecial 198	java/io/File:<init>	(Ljava/lang/String;)V
    //   100: astore_2
    //   101: aload_2
    //   102: invokevirtual 202	java/io/File:exists	()Z
    //   105: ifeq +127 -> 232
    //   108: new 204	java/io/ObjectInputStream
    //   111: dup
    //   112: new 206	java/io/FileInputStream
    //   115: dup
    //   116: aload_2
    //   117: invokespecial 209	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   120: invokespecial 212	java/io/ObjectInputStream:<init>	(Ljava/io/InputStream;)V
    //   123: astore_2
    //   124: aload_2
    //   125: invokevirtual 216	java/io/ObjectInputStream:readObject	()Ljava/lang/Object;
    //   128: checkcast 218	javax/crypto/SealedObject
    //   131: astore_3
    //   132: aload_3
    //   133: aload_1
    //   134: invokevirtual 222	javax/crypto/SealedObject:getObject	(Ljavax/crypto/Cipher;)Ljava/lang/Object;
    //   137: astore_1
    //   138: aload_1
    //   139: ifnull +28 -> 167
    //   142: aload_1
    //   143: invokevirtual 226	java/lang/Object:getClass	()Ljava/lang/Class;
    //   146: aload_0
    //   147: getfield 30	com/tencent/tp/n:b	Ljava/util/TreeMap;
    //   150: invokevirtual 226	java/lang/Object:getClass	()Ljava/lang/Class;
    //   153: invokevirtual 229	java/lang/Object:equals	(Ljava/lang/Object;)Z
    //   156: ifeq +11 -> 167
    //   159: aload_0
    //   160: aload_1
    //   161: checkcast 25	java/util/TreeMap
    //   164: putfield 30	com/tencent/tp/n:b	Ljava/util/TreeMap;
    //   167: aload_2
    //   168: invokevirtual 232	java/io/ObjectInputStream:close	()V
    //   171: return
    //   172: astore_2
    //   173: aconst_null
    //   174: astore_1
    //   175: aload_2
    //   176: invokevirtual 235	java/lang/Throwable:printStackTrace	()V
    //   179: aload_0
    //   180: invokevirtual 237	com/tencent/tp/n:b	()V
    //   183: goto -115 -> 68
    //   186: astore_1
    //   187: aload_1
    //   188: invokevirtual 238	javax/crypto/IllegalBlockSizeException:printStackTrace	()V
    //   191: aconst_null
    //   192: astore_1
    //   193: goto -55 -> 138
    //   196: astore_1
    //   197: aload_1
    //   198: invokevirtual 239	javax/crypto/BadPaddingException:printStackTrace	()V
    //   201: aconst_null
    //   202: astore_1
    //   203: goto -65 -> 138
    //   206: astore_1
    //   207: aload_1
    //   208: invokevirtual 240	java/lang/ClassNotFoundException:printStackTrace	()V
    //   211: goto -44 -> 167
    //   214: astore_1
    //   215: aload_1
    //   216: invokevirtual 241	java/io/StreamCorruptedException:printStackTrace	()V
    //   219: return
    //   220: astore_1
    //   221: aload_1
    //   222: invokevirtual 242	java/io/FileNotFoundException:printStackTrace	()V
    //   225: return
    //   226: astore_1
    //   227: aload_1
    //   228: invokevirtual 243	java/io/IOException:printStackTrace	()V
    //   231: return
    //   232: aload_0
    //   233: invokevirtual 237	com/tencent/tp/n:b	()V
    //   236: return
    //   237: astore_2
    //   238: goto -63 -> 175
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	241	0	this	n
    //   61	114	1	localObject1	Object
    //   186	2	1	localIllegalBlockSizeException	javax.crypto.IllegalBlockSizeException
    //   192	1	1	localObject2	Object
    //   196	2	1	localBadPaddingException	javax.crypto.BadPaddingException
    //   202	1	1	localObject3	Object
    //   206	2	1	localClassNotFoundException	ClassNotFoundException
    //   214	2	1	localStreamCorruptedException	StreamCorruptedException
    //   220	2	1	localFileNotFoundException	FileNotFoundException
    //   226	2	1	localIOException	IOException
    //   55	113	2	localObject4	Object
    //   172	4	2	localThrowable1	Throwable
    //   237	1	2	localThrowable2	Throwable
    //   131	2	3	localSealedObject	javax.crypto.SealedObject
    // Exception table:
    //   from	to	target	type
    //   0	62	172	java/lang/Throwable
    //   132	138	186	javax/crypto/IllegalBlockSizeException
    //   132	138	196	javax/crypto/BadPaddingException
    //   124	132	206	java/lang/ClassNotFoundException
    //   132	138	206	java/lang/ClassNotFoundException
    //   142	167	206	java/lang/ClassNotFoundException
    //   187	191	206	java/lang/ClassNotFoundException
    //   197	201	206	java/lang/ClassNotFoundException
    //   108	124	214	java/io/StreamCorruptedException
    //   124	132	214	java/io/StreamCorruptedException
    //   132	138	214	java/io/StreamCorruptedException
    //   142	167	214	java/io/StreamCorruptedException
    //   167	171	214	java/io/StreamCorruptedException
    //   187	191	214	java/io/StreamCorruptedException
    //   197	201	214	java/io/StreamCorruptedException
    //   207	211	214	java/io/StreamCorruptedException
    //   108	124	220	java/io/FileNotFoundException
    //   124	132	220	java/io/FileNotFoundException
    //   132	138	220	java/io/FileNotFoundException
    //   142	167	220	java/io/FileNotFoundException
    //   167	171	220	java/io/FileNotFoundException
    //   187	191	220	java/io/FileNotFoundException
    //   197	201	220	java/io/FileNotFoundException
    //   207	211	220	java/io/FileNotFoundException
    //   108	124	226	java/io/IOException
    //   124	132	226	java/io/IOException
    //   132	138	226	java/io/IOException
    //   142	167	226	java/io/IOException
    //   167	171	226	java/io/IOException
    //   187	191	226	java/io/IOException
    //   197	201	226	java/io/IOException
    //   207	211	226	java/io/IOException
    //   62	68	237	java/lang/Throwable
  }
  
  public void a(long paramLong1, long paramLong2) {}
  
  public void a(long paramLong1, long paramLong2, long paramLong3, int paramInt)
  {
    int i = 0;
    int j = 0;
    label45:
    String str;
    if ((j < this.c.length) && (i < paramLong3))
    {
      if (this.f.contains(this.c[j].c()))
      {
        if (!this.b.containsKey(this.c[j].f())) {
          break label557;
        }
        localObject1 = (k)this.b.get(this.c[j].f());
        if (localObject1 == null) {
          break label469;
        }
        if ((((k)localObject1).b() != this.c[j].b()) || (((k)localObject1).a() != this.c[j].a()) || (((k)localObject1).g() != this.c[j].g()) || (!((k)localObject1).c().equals(this.c[j].c())) || (((k)localObject1).e().equals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"))) {}
      }
      else
      {
        for (;;)
        {
          j += 1;
          break;
          if (!this.e.contains(this.c[j].c())) {
            break label45;
          }
        }
      }
      localObject2 = this.c[j];
      if (paramInt == 1) {
        localObject1 = r.c(((k)localObject2).d(), paramLong1, paramLong2);
      }
      for (;;)
      {
        ((k)localObject2).a((String)localObject1);
        this.b.put(((k)localObject2).f(), localObject2);
        localObject2 = "key:" + this.c[j].c() + "|" + this.c[j].f();
        str = "apk:" + this.c[j].e() + "|" + this.c[j].f();
        localObject1 = localObject2;
        if (((String)localObject2).length() > 63) {
          localObject1 = ((String)localObject2).substring(0, 63);
        }
        localObject2 = str;
        if (str.length() > 63) {
          localObject2 = str.substring(0, 63);
        }
        a((String)localObject1);
        a((String)localObject2);
        i += 1;
        break;
        if (paramInt == 2) {
          localObject1 = r.d(((k)localObject2).d(), paramLong1, paramLong2);
        } else {
          localObject1 = r.c(((k)localObject2).d(), paramLong1, paramLong2);
        }
      }
      label469:
      localObject2 = this.c[j];
      if (paramInt == 1) {
        localObject1 = r.c(((k)localObject2).d(), paramLong1, paramLong2);
      }
      for (;;)
      {
        ((k)localObject2).a((String)localObject1);
        this.b.put(((k)localObject2).f(), localObject2);
        break;
        if (paramInt == 2) {
          localObject1 = r.d(((k)localObject2).d(), paramLong1, paramLong2);
        } else {
          localObject1 = r.c(((k)localObject2).d(), paramLong1, paramLong2);
        }
      }
      label557:
      localObject2 = this.c[j];
      if (paramInt == 1) {
        localObject1 = r.c(((k)localObject2).d(), paramLong1, paramLong2);
      }
      for (;;)
      {
        ((k)localObject2).a((String)localObject1);
        this.b.put(((k)localObject2).f(), localObject2);
        break;
        if (paramInt == 2) {
          localObject1 = r.d(((k)localObject2).d(), paramLong1, paramLong2);
        } else {
          localObject1 = r.c(((k)localObject2).d(), paramLong1, paramLong2);
        }
      }
    }
    Object localObject1 = new ArrayList();
    Object localObject2 = this.b.keySet().iterator();
    label702:
    label892:
    label896:
    for (;;)
    {
      if ((((Iterator)localObject2).hasNext()) && (i < paramLong3))
      {
        str = (String)((Iterator)localObject2).next();
        paramInt = 0;
        if (paramInt >= this.c.length) {
          break label892;
        }
        if (!this.c[paramInt].f().equals(str)) {}
      }
      for (paramInt = 1;; paramInt = 0)
      {
        if (paramInt != 0) {
          break label896;
        }
        Object localObject3 = (k)this.b.get(str);
        if (localObject3 != null)
        {
          localObject3 = "Del:" + ((k)localObject3).e() + "|" + ((k)localObject3).f();
          if (((String)localObject3).length() > 63) {
            ((String)localObject3).substring(0, 63);
          }
        }
        ((List)localObject1).add(str);
        break;
        paramInt += 1;
        break label702;
        localObject1 = (String[])((List)localObject1).toArray(new String[0]);
        paramInt = 0;
        while (paramInt < localObject1.length)
        {
          this.b.remove(localObject1[paramInt]);
          paramInt += 1;
        }
        c();
        return;
      }
    }
  }
  
  public boolean a(int paramInt)
  {
    if (this.d == null) {}
    while (this.b == null) {
      return false;
    }
    this.c = r.a(this.d, paramInt);
    return true;
  }
  
  public boolean a(Context paramContext)
  {
    if (paramContext == null) {}
    while (this.d != null) {
      return false;
    }
    this.d = paramContext;
    a();
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (localPackageManager != null) {}
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext.getPackageName(), 0);
      this.g = paramContext.versionName;
      this.h = paramContext.versionCode;
      return true;
    }
    catch (Throwable paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
  }
  
  public boolean a(boolean paramBoolean, long paramLong1, long paramLong2, int paramInt)
  {
    if (this.d == null) {}
    while (this.b == null) {
      return false;
    }
    this.c = r.a(this.d, paramBoolean, paramLong1, paramLong2, paramInt);
    return true;
  }
  
  public void b()
  {
    Object localObject1 = new File(this.d.getFilesDir() + "/TssInfo.info");
    if (((File)localObject1).exists()) {
      try
      {
        localObject1 = new ObjectInputStream(new FileInputStream((File)localObject1));
        try
        {
          Object localObject2 = ((ObjectInputStream)localObject1).readObject();
          if (localObject2.getClass().equals(this.b.getClass())) {
            this.b = ((TreeMap)localObject2);
          }
          ((ObjectInputStream)localObject1).close();
          return;
        }
        catch (ClassNotFoundException localClassNotFoundException)
        {
          for (;;)
          {
            localClassNotFoundException.printStackTrace();
          }
        }
        return;
      }
      catch (StreamCorruptedException localStreamCorruptedException)
      {
        localStreamCorruptedException.printStackTrace();
        return;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        localFileNotFoundException.printStackTrace();
        return;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  /* Error */
  public void c()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 30	com/tencent/tp/n:b	Ljava/util/TreeMap;
    //   4: ifnull +13 -> 17
    //   7: aload_0
    //   8: getfield 30	com/tencent/tp/n:b	Ljava/util/TreeMap;
    //   11: invokevirtual 383	java/util/TreeMap:size	()I
    //   14: ifne +4 -> 18
    //   17: return
    //   18: new 150	javax/crypto/spec/SecretKeySpec
    //   21: dup
    //   22: bipush 8
    //   24: newarray byte
    //   26: dup
    //   27: iconst_0
    //   28: ldc -105
    //   30: bastore
    //   31: dup
    //   32: iconst_1
    //   33: ldc -104
    //   35: bastore
    //   36: dup
    //   37: iconst_2
    //   38: ldc -103
    //   40: bastore
    //   41: dup
    //   42: iconst_3
    //   43: ldc -102
    //   45: bastore
    //   46: dup
    //   47: iconst_4
    //   48: ldc -101
    //   50: bastore
    //   51: dup
    //   52: iconst_5
    //   53: ldc -100
    //   55: bastore
    //   56: dup
    //   57: bipush 6
    //   59: ldc -104
    //   61: bastore
    //   62: dup
    //   63: bipush 7
    //   65: ldc -99
    //   67: bastore
    //   68: ldc -97
    //   70: invokespecial 162	javax/crypto/spec/SecretKeySpec:<init>	([BLjava/lang/String;)V
    //   73: astore_2
    //   74: ldc -97
    //   76: invokestatic 168	javax/crypto/Cipher:getInstance	(Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   79: astore_1
    //   80: aload_1
    //   81: iconst_1
    //   82: aload_2
    //   83: invokevirtual 172	javax/crypto/Cipher:init	(ILjava/security/Key;)V
    //   86: new 174	java/io/File
    //   89: dup
    //   90: new 176	java/lang/StringBuilder
    //   93: dup
    //   94: invokespecial 177	java/lang/StringBuilder:<init>	()V
    //   97: aload_0
    //   98: getfield 32	com/tencent/tp/n:d	Landroid/content/Context;
    //   101: invokevirtual 183	android/content/Context:getFilesDir	()Ljava/io/File;
    //   104: invokevirtual 187	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   107: ldc -67
    //   109: invokevirtual 192	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   112: invokevirtual 196	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   115: invokespecial 198	java/io/File:<init>	(Ljava/lang/String;)V
    //   118: astore_2
    //   119: new 385	java/io/ObjectOutputStream
    //   122: dup
    //   123: new 387	java/io/FileOutputStream
    //   126: dup
    //   127: aload_2
    //   128: invokespecial 388	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   131: invokespecial 391	java/io/ObjectOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   134: astore_2
    //   135: aload_2
    //   136: new 218	javax/crypto/SealedObject
    //   139: dup
    //   140: aload_0
    //   141: getfield 30	com/tencent/tp/n:b	Ljava/util/TreeMap;
    //   144: aload_1
    //   145: invokespecial 394	javax/crypto/SealedObject:<init>	(Ljava/io/Serializable;Ljavax/crypto/Cipher;)V
    //   148: invokevirtual 398	java/io/ObjectOutputStream:writeObject	(Ljava/lang/Object;)V
    //   151: aload_2
    //   152: invokevirtual 399	java/io/ObjectOutputStream:close	()V
    //   155: return
    //   156: astore_1
    //   157: aload_1
    //   158: invokevirtual 242	java/io/FileNotFoundException:printStackTrace	()V
    //   161: return
    //   162: astore_1
    //   163: aload_1
    //   164: invokevirtual 235	java/lang/Throwable:printStackTrace	()V
    //   167: aload_0
    //   168: invokevirtual 401	com/tencent/tp/n:d	()V
    //   171: return
    //   172: astore_1
    //   173: aload_1
    //   174: invokevirtual 243	java/io/IOException:printStackTrace	()V
    //   177: return
    //   178: astore_1
    //   179: aload_1
    //   180: invokevirtual 238	javax/crypto/IllegalBlockSizeException:printStackTrace	()V
    //   183: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	184	0	this	n
    //   79	66	1	localCipher	javax.crypto.Cipher
    //   156	2	1	localFileNotFoundException	FileNotFoundException
    //   162	2	1	localThrowable	Throwable
    //   172	2	1	localIOException	IOException
    //   178	2	1	localIllegalBlockSizeException	javax.crypto.IllegalBlockSizeException
    //   73	79	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   119	155	156	java/io/FileNotFoundException
    //   18	86	162	java/lang/Throwable
    //   119	155	172	java/io/IOException
    //   119	155	178	javax/crypto/IllegalBlockSizeException
  }
  
  public void d()
  {
    if ((this.b == null) || (this.b.size() == 0)) {
      return;
    }
    Object localObject = new File(this.d.getFilesDir() + "/TssInfo.info");
    try
    {
      localObject = new ObjectOutputStream(new FileOutputStream((File)localObject));
      ((ObjectOutputStream)localObject).writeObject(this.b);
      ((ObjectOutputStream)localObject).close();
      return;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public boolean e()
  {
    if (this.d == null) {
      return false;
    }
    if (this.a == null) {
      return false;
    }
    this.a.put("AndroidId", m.a(this.d));
    this.a.put("ApiLevel", m.e());
    this.a.put("Serial", m.c());
    this.a.put("AppName", m.n(this.d));
    this.a.put("PackageName", this.d.getPackageName());
    this.a.put("AppVer", m.m(this.d));
    this.a.put("AppPubkeySha1", m.l(this.d));
    this.a.put("BootTime", m.b());
    this.a.put("Brand", m.g());
    this.a.put("Fp", m.d());
    this.a.put("Country", m.h());
    this.a.put("CpuProductor", m.j());
    this.a.put("CpuAbi", m.i());
    this.a.put("DeviceName", m.k());
    this.a.put("DisplayMetrics", m.b(this.d).heightPixels + "X" + m.b(this.d).widthPixels);
    this.a.put("FreeMemory", String.valueOf(m.c(this.d)));
    this.a.put("FreeStorage", String.valueOf(m.m()));
    this.a.put("IMEI", m.d(this.d));
    this.a.put("IMSI", m.e(this.d));
    this.a.put("Language", m.n());
    this.a.put("MacAddress", m.f(this.d));
    this.a.put("MobileNumber", m.g(this.d));
    this.a.put("NetworkName", m.i(this.d));
    this.a.put("NetworkType", m.h(this.d));
    this.a.put("Platform", m.p());
    this.a.put("RamSize", m.q());
    this.a.put("RomSize", m.r());
    this.a.put("SensorStates", m.j(this.d));
    this.a.put("Version", m.s());
    this.a.put("WifiHotspotMacAddress", m.o(this.d));
    this.a.put("SDCardState", String.valueOf(m.a()));
    this.a.put("KernelVer", m.o());
    if (m.a()) {
      this.a.put("SDCARDFreeSpace", String.valueOf(m.l()));
    }
    for (;;)
    {
      Iterator localIterator = this.a.keySet().iterator();
      while (localIterator.hasNext())
      {
        String str3 = (String)localIterator.next();
        if (str3 != null)
        {
          String str2 = (String)this.a.get(str3);
          String str1 = str2;
          if (str2 == null) {
            str1 = String.valueOf(str2);
          }
          str2 = str3 + ":" + str1;
          str1 = str2;
          if (str2.length() > 63) {
            str1 = str2.substring(0, 63);
          }
          a(str1);
        }
      }
      this.a.put("SDCARDFreeSpace", String.valueOf(-1));
    }
    return true;
  }
}
