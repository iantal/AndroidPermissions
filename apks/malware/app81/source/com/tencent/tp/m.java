package com.tencent.tp;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.hardware.SensorManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import android.os.SystemClock;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class m
{
  public m() {}
  
  public static String a(Context paramContext)
  {
    String str = null;
    if (paramContext != null) {}
    try
    {
      str = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
      return str;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String a(String paramString)
  {
    try
    {
      InputStream localInputStream = Runtime.getRuntime().exec(new String[] { "/system/bin/top", "-n", "1" }).getInputStream();
      BufferedReader localBufferedReader;
      String str;
      boolean bool;
      return null;
    }
    catch (Throwable paramString)
    {
      for (;;)
      {
        try
        {
          localBufferedReader = new BufferedReader(new InputStreamReader(localInputStream));
        }
        catch (Throwable paramString)
        {
          paramString = null;
          continue;
        }
        try
        {
          str = localBufferedReader.readLine();
          if (str == null)
          {
            paramString = str.split(" ");
            return paramString[7] + "|" + paramString[15];
          }
          bool = str.endsWith(paramString);
          if (bool)
          {
            continue;
            paramString = paramString;
            localInputStream = null;
            paramString = null;
          }
        }
        catch (Throwable paramString)
        {
          paramString = localBufferedReader;
        }
      }
      if (paramString != null) {}
      try
      {
        paramString.close();
        if (localInputStream != null) {
          try
          {
            localInputStream.close();
            return null;
          }
          catch (Throwable paramString)
          {
            return null;
          }
        }
      }
      catch (Throwable paramString)
      {
        for (;;) {}
      }
    }
  }
  
  public static boolean a()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static DisplayMetrics b(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      return localDisplayMetrics;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String b()
  {
    return String.valueOf(SystemClock.elapsedRealtime());
  }
  
  private static String b(String paramString)
  {
    paramString = new File(paramString);
    if (paramString.exists()) {
      try
      {
        paramString = new BufferedReader(new FileReader(paramString));
        String str = paramString.readLine();
        paramString.close();
        return str;
      }
      catch (Throwable paramString)
      {
        return "";
      }
    }
    return "";
  }
  
  public static long c(Context paramContext)
  {
    if (paramContext != null) {
      try
      {
        paramContext = (ActivityManager)paramContext.getSystemService("activity");
        ActivityManager.MemoryInfo localMemoryInfo = new ActivityManager.MemoryInfo();
        paramContext.getMemoryInfo(localMemoryInfo);
        long l = localMemoryInfo.availMem;
        return l;
      }
      catch (Throwable paramContext)
      {
        return -1L;
      }
    }
    return -1L;
  }
  
  public static String c()
  {
    Object localObject4 = null;
    Object localObject3 = localObject4;
    if (Build.VERSION.SDK_INT > 8) {}
    for (;;)
    {
      try
      {
        Object localObject1 = Build.class.getFields();
        int i = 0;
        if (i < localObject1.length)
        {
          if (localObject1[i].getName().equals("SERIAL"))
          {
            localObject1 = localObject1[i];
            localObject3 = localObject4;
            if (localObject1 != null) {
              localObject3 = ((Field)localObject1).get(Build.class).toString();
            }
            return localObject3;
          }
          i += 1;
        }
        else
        {
          Object localObject2 = null;
        }
      }
      catch (Throwable localThrowable)
      {
        return null;
      }
    }
  }
  
  public static String d()
  {
    return Build.FINGERPRINT;
  }
  
  public static String d(Context paramContext)
  {
    if (paramContext != null) {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
        return paramContext;
      }
      catch (Throwable paramContext)
      {
        return null;
      }
    }
    return null;
  }
  
  public static String e()
  {
    try
    {
      int i = Build.VERSION.SDK_INT;
      return String.valueOf(i);
    }
    catch (Throwable localThrowable) {}
    return "null";
  }
  
  public static String e(Context paramContext)
  {
    if (paramContext != null) {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
        return paramContext;
      }
      catch (Throwable paramContext)
      {
        return null;
      }
    }
    return null;
  }
  
  public static int f()
  {
    return Integer.parseInt(e());
  }
  
  public static String f(Context paramContext)
  {
    if (paramContext != null) {
      try
      {
        paramContext = (WifiManager)paramContext.getSystemService("wifi");
        if (paramContext != null)
        {
          paramContext = paramContext.getConnectionInfo();
          if (paramContext != null)
          {
            String str = paramContext.getMacAddress();
            paramContext = str;
            if (str != null) {
              paramContext = str.replace(":", " ");
            }
            return paramContext;
          }
          return null;
        }
        return null;
      }
      catch (Throwable paramContext)
      {
        return null;
      }
    }
    return null;
  }
  
  public static String g()
  {
    try
    {
      String str = Build.BRAND;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String g(Context paramContext)
  {
    if (paramContext != null) {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
        return paramContext;
      }
      catch (Throwable paramContext)
      {
        return null;
      }
    }
    return null;
  }
  
  public static String h()
  {
    try
    {
      String str = Locale.getDefault().getCountry();
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String h(Context paramContext)
  {
    for (;;)
    {
      try
      {
        NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
        int i;
        if (localNetworkInfo != null) {
          if (localNetworkInfo.getType() != 1)
          {
            if (localNetworkInfo.getType() != 0) {
              return "unknown";
            }
            paramContext = (TelephonyManager)paramContext.getSystemService("phone");
            if (paramContext == null) {
              return "unknown";
            }
            i = paramContext.getNetworkType();
          }
        }
        switch (i)
        {
        default: 
          return "unknown(" + String.valueOf(i) + ")";
          return "wifi";
          return "unknown";
        }
      }
      catch (Throwable paramContext)
      {
        return "unknown";
      }
    }
    return "unknown";
    return "GPRS";
    return "EDGE";
    return "UMTS";
    return "CDMA";
    return "CDMA - EVDO rev. 0";
    return "CDMA - EVDO rev. A";
    return "CDMA - 1xRTT";
    return "HSDPA";
    return "HSUPA";
    return "HSPA";
    return "iDen";
    return "CDMA - EVDO rev. B";
    return "LTE";
    return "eHRPD";
    return "HSPA+";
  }
  
  public static String i()
  {
    return Build.CPU_ABI + "|" + Build.CPU_ABI2;
  }
  
  public static String i(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return null;
      }
      if (paramContext.getType() == 1) {
        return "wifi";
      }
      paramContext = "" + paramContext.getExtraInfo();
      return paramContext;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String j()
  {
    int i = Build.VERSION.SDK_INT;
    String str = null;
    if (i >= 8) {}
    try
    {
      str = Build.HARDWARE;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String j(Context paramContext)
  {
    StringBuffer localStringBuffer;
    int i;
    if (paramContext != null)
    {
      localStringBuffer = new StringBuffer();
      if (Build.VERSION.SDK_INT < 10) {
        break label456;
      }
      try
      {
        localClass = Class.forName("android.hardware.Camera");
        j = ((Integer)localClass.getMethod("getNumberOfCameras", new Class[0]).invoke(localClass, new Object[0])).intValue();
        if (j != 0) {
          break label430;
        }
        localObject3 = "N";
        localObject1 = "N";
      }
      catch (Throwable localThrowable)
      {
        for (;;)
        {
          Class localClass;
          int j;
          Object localObject1;
          Object localObject7;
          Object localObject5;
          int k;
          Object localObject4 = "E";
          Object localObject3 = "E";
          continue;
          paramContext = "Y";
          continue;
          localObject2 = "N";
          continue;
          localObject6 = null;
          continue;
          localObject2 = "X";
          localObject3 = "X";
          continue;
          i += 1;
          localObject2 = localObject4;
        }
      }
      localObject4 = Class.forName("android.hardware.Camera$CameraInfo");
      localObject7 = ((Class)localObject4).newInstance();
      localObject5 = localClass.getMethods();
      k = localObject5.length;
      i = 0;
    }
    for (;;)
    {
      Object localObject6;
      if (i < k)
      {
        if (!localObject5[i].getName().equals("getCameraInfo")) {
          break label458;
        }
        localObject6 = localObject5[i];
        Field localField1 = ((Class)localObject4).getField("facing");
        Field localField2 = ((Class)localObject4).getField("CAMERA_FACING_BACK");
        Field localField3 = ((Class)localObject4).getField("CAMERA_FACING_FRONT");
        localObject4 = localObject1;
        localObject5 = localObject3;
        if (localObject6 != null)
        {
          i = 0;
          localObject4 = localObject1;
          localObject5 = localObject3;
          if (i < j)
          {
            localObject6.invoke(localClass, new Object[] { Integer.valueOf(i), localObject7 });
            k = localField1.getInt(localObject7);
            int m = localField2.getInt(localObject7);
            int n = localField3.getInt(localObject7);
            if (k == m)
            {
              localObject1 = "Y";
              localObject4 = localObject1;
              if (j != 1) {
                break label443;
              }
              localObject3 = "N";
              localObject4 = localObject1;
              break label443;
            }
            localObject4 = localObject1;
            if (k != n) {
              break label443;
            }
            localObject5 = "Y";
            localObject4 = localObject1;
            localObject3 = localObject5;
            if (j != 1) {
              break label443;
            }
            localObject4 = "N";
            localObject3 = localObject5;
            break label443;
          }
        }
        localObject3 = localObject4;
        localObject4 = localObject5;
        try
        {
          localObject1 = (SensorManager)paramContext.getSystemService("sensor");
          if (((SensorManager)localObject1).getDefaultSensor(1) != null) {
            break label396;
          }
          paramContext = "N";
          if (((SensorManager)localObject1).getDefaultSensor(4) == null) {
            break label403;
          }
          localObject1 = "Y";
        }
        catch (Throwable paramContext)
        {
          for (;;)
          {
            paramContext = "E";
            localObject2 = "E";
          }
        }
        localStringBuffer.append((String)localObject3).append((String)localObject4).append(paramContext).append((String)localObject1);
        return localStringBuffer.toString();
      }
      label396:
      label403:
      Object localObject2;
      label430:
      label443:
      return null;
      label456:
      return null;
      label458:
      i += 1;
    }
  }
  
  public static String k()
  {
    try
    {
      String str = Build.MODEL;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String k(Context paramContext)
  {
    String str = null;
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (localPackageManager != null) {}
    try
    {
      str = r.a(localPackageManager.getPackageInfo(paramContext.getPackageName(), 64).signatures[0].toByteArray());
      return str;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static long l()
  {
    long l1 = 0L;
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      l2 = localStatFs.getBlockSize();
      int i = localStatFs.getAvailableBlocks();
      l1 = i;
    }
    catch (Throwable localThrowable)
    {
      for (;;)
      {
        long l2 = 0L;
      }
    }
    return l1 * l2;
  }
  
  public static String l(Context paramContext)
  {
    String str = null;
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (localPackageManager != null) {}
    try
    {
      str = r.b(localPackageManager.getPackageInfo(paramContext.getPackageName(), 64).signatures[0].toByteArray());
      return str;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static long m()
  {
    long l1 = 0L;
    try
    {
      StatFs localStatFs = new StatFs("/data");
      l2 = localStatFs.getBlockSize();
      int i = localStatFs.getAvailableBlocks();
      l1 = i;
    }
    catch (Throwable localThrowable)
    {
      for (;;)
      {
        long l2 = 0L;
      }
    }
    return l1 * l2;
  }
  
  public static String m(Context paramContext)
  {
    String str = null;
    PackageManager localPackageManager = paramContext.getPackageManager();
    if (localPackageManager != null) {}
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext.getPackageName(), 0);
      str = paramContext.versionName + "(" + String.valueOf(paramContext.versionCode) + ")";
      return str;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String n()
  {
    try
    {
      String str = Locale.getDefault().getLanguage();
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String n(Context paramContext)
  {
    Object localObject2 = null;
    PackageManager localPackageManager = paramContext.getPackageManager();
    Object localObject1 = localObject2;
    if (localPackageManager != null) {}
    try
    {
      paramContext = localPackageManager.getApplicationInfo(paramContext.getPackageName(), 0);
      localObject1 = localObject2;
      if (paramContext != null) {
        localObject1 = localPackageManager.getApplicationLabel(paramContext).toString();
      }
      return localObject1;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String o()
  {
    try
    {
      Object localObject = b("/proc/version");
      localObject = Pattern.compile("\\w+\\s+\\w+\\s+([^\\s]+)\\s+\\(([^\\s@]+(?:@[^\\s.]+)?)[^)]*\\)\\s+\\((?:[^(]*\\([^)]*\\))?[^)]*\\)\\s+([^\\s]+)\\s+(?:PREEMPT\\s+)?(.+)").matcher((CharSequence)localObject);
      if (!((Matcher)localObject).matches()) {
        return "Unavailable";
      }
      if (((Matcher)localObject).groupCount() < 4) {
        return "Unavailable";
      }
      localObject = ((Matcher)localObject).group(1) + " " + ((Matcher)localObject).group(3);
      return localObject;
    }
    catch (Throwable localThrowable) {}
    return "Unavailable";
  }
  
  public static String o(Context paramContext)
  {
    Object localObject = null;
    if (paramContext != null) {
      try
      {
        paramContext = (WifiManager)paramContext.getSystemService("wifi");
        if (paramContext != null)
        {
          paramContext = paramContext.getConnectionInfo();
          if (paramContext == null) {
            break label58;
          }
          paramContext = paramContext.getBSSID();
          localObject = paramContext;
          if (paramContext != null) {
            return paramContext.replace(":", " ");
          }
        }
        else
        {
          return "null";
        }
      }
      catch (Throwable paramContext)
      {
        localObject = "null";
      }
    }
    return localObject;
    label58:
    return "null";
  }
  
  public static String p()
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append(k());
    localStringBuffer.append(";Android ");
    localStringBuffer.append(s());
    localStringBuffer.append(",level ");
    localStringBuffer.append(e());
    return localStringBuffer.toString();
  }
  
  public static String q()
  {
    try
    {
      FileReader localFileReader = new FileReader("/proc/meminfo");
      long l;
      if (localObject1 == null) {}
    }
    catch (Throwable localThrowable1)
    {
      try
      {
        localBufferedReader = new BufferedReader(localFileReader, 8192);
      }
      catch (Throwable localThrowable4)
      {
        for (;;)
        {
          BufferedReader localBufferedReader;
          Object localObject1;
          String str = null;
          localObject3 = localThrowable3;
          localObject2 = str;
        }
      }
      try
      {
        l = Long.parseLong(localBufferedReader.readLine().split(":\\s+", 2)[1].toLowerCase(Locale.US).replace("kb", "").trim()) / 1024L;
        str = l;
        localBufferedReader.close();
        localFileReader.close();
        return str;
      }
      catch (Throwable localThrowable5)
      {
        Object localObject4 = localObject2;
        localObject2 = localObject3;
        localObject3 = localObject4;
        break label93;
      }
      localThrowable1 = localThrowable1;
      localObject1 = null;
      localBufferedReader = null;
    }
    try
    {
      label93:
      localObject1.close();
      if (localBufferedReader == null) {}
    }
    catch (Throwable localThrowable2)
    {
      try
      {
        localBufferedReader.close();
        return null;
        localThrowable2 = localThrowable2;
      }
      catch (Throwable localThrowable3)
      {
        for (;;) {}
      }
    }
  }
  
  public static String r()
  {
    try
    {
      Object localObject = new StatFs(Environment.getDataDirectory().getPath());
      long l1 = ((StatFs)localObject).getBlockSize();
      long l2 = ((StatFs)localObject).getBlockCount();
      localObject = l2 * l1 / 1024L / 1024L + "";
      return localObject;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String s()
  {
    try
    {
      String str = Build.VERSION.RELEASE;
      return str;
    }
    catch (Throwable localThrowable) {}
    return "null";
  }
}
