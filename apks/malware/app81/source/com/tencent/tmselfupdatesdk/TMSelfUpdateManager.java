package com.tencent.tmselfupdatesdk;

import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.text.TextUtils;
import com.tencent.tmapkupdatesdk.ApkUpdateListener;
import com.tencent.tmapkupdatesdk.ApkUpdateManager;
import com.tencent.tmassistantbase.util.TMLog;
import com.tencent.tmassistantsdk.ITMAssistantCallBackListener;
import com.tencent.tmassistantsdk.TMAssistantCallYYBParamStruct;
import com.tencent.tmassistantsdk.TMAssistantCallYYB_V1;
import com.tencent.tmdownloader.ITMAssistantDownloadClientListener;
import com.tencent.tmdownloader.TMAssistantDownloadClient;
import com.tencent.tmdownloader.TMAssistantDownloadManager;
import com.tencent.tmselfupdatesdk.internal.PackageInstallReceiver;
import com.tencent.tmselfupdatesdk.model.TMSelfUpdateUpdateInfo;
import java.io.File;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class TMSelfUpdateManager
{
  private static final String DEFAULT_VIA = "ANDROID.YYB.UPDATE";
  protected static final String TAG = "TMSelfUpdateManager";
  private static final String YYB_APPID = "50801";
  private static final String YYB_PACKAGENAME = "com.tencent.android.qqdownloader";
  protected static boolean isMergeApk = true;
  protected static TMSelfUpdateManager mInstance = null;
  ReferenceQueue a;
  ArrayList b;
  Handler c;
  HandlerThread d = new HandlerThread("selfUpdateSDK_call_thread");
  String e = "";
  int f = -1;
  boolean g = false;
  int h;
  protected String hostPackageName = null;
  String i = "";
  private ApkUpdateListener mApkUpdateListener = new h(this);
  protected long mAppId = 0L;
  protected Context mContext = null;
  private ITMAssistantDownloadClientListener mDownloadPatchCallback = new f(this);
  private ITMAssistantDownloadClientListener mDownloadYYBCallback = new d(this);
  protected String mHostChannelId = "";
  protected TMAssistantCallYYB_V1 mOpenSDKInstance = null;
  private ITMAssistantCallBackListener mOpenSDKYYBStateListener = new c(this);
  private com.tencent.tmselfupdatesdk.internal.b mPackageInstallListener = new i(this);
  protected String mScene = "";
  protected String mYybChannelId = "";
  protected byte overwriteChannelid = 0;
  protected byte updateType = 0;
  
  protected TMSelfUpdateManager()
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    this.a = new ReferenceQueue();
    this.b = new ArrayList();
    this.d.start();
    this.c = new Handler(this.d.getLooper());
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  private void genNewPkgProcess()
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    this.c.post(new j(this));
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  public static TMSelfUpdateManager getInstance()
  {
    try
    {
      if (mInstance == null) {
        mInstance = new TMSelfUpdateManager();
      }
      TMSelfUpdateManager localTMSelfUpdateManager = mInstance;
      return localTMSelfUpdateManager;
    }
    finally {}
  }
  
  private void onCheckNeedUpdateInfo(TMSelfUpdateUpdateInfo paramTMSelfUpdateUpdateInfo)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    if (paramTMSelfUpdateUpdateInfo == null)
    {
      TMLog.i("TMSelfUpdateManager", "upateinfo == null");
      TMLog.i("TMSelfUpdateManager", "exit");
      return;
    }
    TMLog.i("TMSelfUpdateManager", "upateinfo: (status = " + paramTMSelfUpdateUpdateInfo.getStatus() + "; updateMedthod = " + paramTMSelfUpdateUpdateInfo.getUpdateMethod() + "; newApkSize = " + paramTMSelfUpdateUpdateInfo.getNewApkSize() + "; patchSize = " + paramTMSelfUpdateUpdateInfo.getPatchSize() + "; newFeature = " + paramTMSelfUpdateUpdateInfo.getNewFeature() + "; updateDownloadUrl = " + paramTMSelfUpdateUpdateInfo.getUpdateDownloadUrl() + ")");
    if ((this.b != null) && (this.b.size() > 0))
    {
      Iterator localIterator = this.b.iterator();
      while (localIterator.hasNext())
      {
        Object localObject = ((WeakReference)localIterator.next()).get();
        if (localObject == null) {
          TMLog.e("TMSelfUpdateManager", "onCheckNeedUpdateInfo listener = null");
        } else if ((localObject instanceof ITMSelfUpdateListener)) {
          ((ITMSelfUpdateListener)localObject).onUpdateInfoReceived(paramTMSelfUpdateUpdateInfo);
        }
      }
    }
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  private void onYYBStateChanged(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "state: " + paramInt1 + "; errorCode: " + paramInt2 + "; errorMsg: " + paramString2);
    Iterator localIterator = this.b.iterator();
    while (localIterator.hasNext())
    {
      Object localObject = ((WeakReference)localIterator.next()).get();
      if (localObject == null) {
        TMLog.i("TMSelfUpdateManager", "listener == null");
      } else if ((localObject instanceof YYBDownloadListener)) {
        ((YYBDownloadListener)localObject).onDownloadYYBStateChanged(paramString1, paramInt1, paramInt2, paramString2);
      }
    }
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  private void patchGenInstall(String paramString)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "patchPath: " + paramString);
    String str;
    if (!TextUtils.isEmpty(paramString))
    {
      str = paramString + "_" + this.hostPackageName + "_new.apk";
      if (!new File(str).exists()) {
        break label156;
      }
      TMLog.i("TMSelfUpdateManager", "new apk has yet existsï¼šurl:" + this.i + ";  newPath:" + str);
      startInstall(str, this.hostPackageName, this.updateType);
      a(0, -14, "SelfUpdate success,New Pakage is exists!");
    }
    for (;;)
    {
      TMLog.i("TMSelfUpdateManager", "exit");
      return;
      label156:
      int j = ApkUpdateManager.getInstance().patchNewApk(this.hostPackageName, paramString, str);
      TMLog.i("TMSelfUpdateManager", "now begin gen New apk; result=" + j + "; packageName=" + this.hostPackageName + "; patchPath=" + paramString + "; newGenApkPath=" + str);
      if (j == 0)
      {
        TMLog.i("TMSelfUpdateManager", "patchGenInstall overwriteChannelid = " + this.overwriteChannelid);
        writeChannelIdAfterUpdate(str);
        startInstall(str, this.hostPackageName, this.updateType);
        a(0, 0, "SelfUpdate success !");
      }
      else
      {
        a(2, j, "SelfUpdate failure,genNewApk failure!");
      }
    }
  }
  
  private boolean registerListener(Object paramObject)
  {
    if (paramObject == null) {
      return false;
    }
    for (;;)
    {
      localObject = this.a.poll();
      if (localObject == null) {
        break;
      }
      this.b.remove(localObject);
    }
    Object localObject = this.b.iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((WeakReference)((Iterator)localObject).next()).get() == paramObject) {
        return true;
      }
    }
    paramObject = new WeakReference(paramObject, this.a);
    this.b.add(paramObject);
    return true;
  }
  
  private void startInstall(String paramString1, String paramString2, byte paramByte)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "appPath: " + paramString1 + "; packageName: " + paramString2 + "; updateType: " + paramByte);
    paramString1 = Uri.fromFile(new File(paramString1));
    paramString2 = new Intent("android.intent.action.VIEW");
    paramString2.setDataAndType(paramString1, "application/vnd.android.package-archive");
    paramString2.addFlags(268435456);
    this.mContext.startActivity(paramString2);
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  private void unregisterListener()
  {
    this.b.clear();
  }
  
  TMAssistantDownloadClient a(boolean paramBoolean)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "isUseSDK: " + paramBoolean);
    TMAssistantDownloadClient localTMAssistantDownloadClient2;
    TMAssistantDownloadClient localTMAssistantDownloadClient1;
    if (paramBoolean)
    {
      localTMAssistantDownloadClient2 = TMAssistantDownloadManager.getInstance(this.mContext).getDownloadSDKClient("selfUpdateSDK_client_sdkupdate");
      TMLog.i("TMSelfUpdateManager", "get selfUpdateSDK_client_sdkupdate");
      localTMAssistantDownloadClient1 = localTMAssistantDownloadClient2;
      if (localTMAssistantDownloadClient2 != null)
      {
        localTMAssistantDownloadClient2.registerDownloadTaskListener(this.mDownloadPatchCallback);
        localTMAssistantDownloadClient1 = localTMAssistantDownloadClient2;
      }
    }
    for (;;)
    {
      TMLog.i("TMSelfUpdateManager", "returnValue(client): " + localTMAssistantDownloadClient1);
      TMLog.i("TMSelfUpdateManager", "exit");
      return localTMAssistantDownloadClient1;
      localTMAssistantDownloadClient2 = TMAssistantDownloadManager.getInstance(this.mContext).getDownloadSDKClient("selfUpdateSDK_client_yybupdate");
      TMLog.i("TMSelfUpdateManager", "get selfUpdateSDK_client_yybupdate");
      localTMAssistantDownloadClient1 = localTMAssistantDownloadClient2;
      if (localTMAssistantDownloadClient2 != null)
      {
        localTMAssistantDownloadClient2.registerDownloadTaskListener(this.mDownloadYYBCallback);
        localTMAssistantDownloadClient1 = localTMAssistantDownloadClient2;
      }
    }
  }
  
  void a(int paramInt1, int paramInt2, String paramString)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "onAppStateChanged state: " + paramInt1 + "; errorCode: " + paramInt2 + "; errorMsg: " + paramString);
    Iterator localIterator = this.b.iterator();
    while (localIterator.hasNext())
    {
      Object localObject = ((WeakReference)localIterator.next()).get();
      if (localObject == null) {
        TMLog.i("TMSelfUpdateManager", "listener == null");
      } else if ((localObject instanceof ITMSelfUpdateListener)) {
        ((ITMSelfUpdateListener)localObject).onDownloadAppStateChanged(paramInt1, paramInt2, paramString);
      }
    }
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  public void cancelYYBDownload()
  {
    TMLog.i("TMSelfUpdateManager", "cancelYYBDownload enter");
    this.c.post(new a(this));
    TMLog.i("TMSelfUpdateManager", "cancelYYBDownload exit");
  }
  
  public void checkSelfUpdate()
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "hostPackageName: " + this.hostPackageName);
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(this.hostPackageName);
    isMergeApk = false;
    ApkUpdateManager.getInstance().checkUpdate(localArrayList);
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  public int checkYYBInstallState()
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    int j = this.mOpenSDKInstance.checkQQDownloaderInstalled();
    if (j == 0) {
      TMLog.i("TMSelfUpdateManager", "yybExist: UpdateLogConst.YYB_INSTALLED");
    }
    for (;;)
    {
      TMLog.i("TMSelfUpdateManager", "returnValue: " + j);
      TMLog.i("TMSelfUpdateManager", "exit");
      return j;
      TMLog.i("TMSelfUpdateManager", "yybExist: UpdateLogConst.YYB_NOT_INSTALL");
    }
  }
  
  public void destroy()
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    unregisterListener();
    TMAssistantDownloadManager.closeAllService(this.mContext);
    if (this.mOpenSDKInstance != null)
    {
      boolean bool = this.mOpenSDKInstance.unregisterListener(this.mOpenSDKYYBStateListener);
      TMLog.i("TMSelfUpdateManager", "OpenSDKInstance.unregisterListener result: " + bool);
      this.mOpenSDKInstance.destroyQQDownloaderOpenSDK();
    }
    this.g = false;
    ApkUpdateManager.getInstance().destory();
    PackageInstallReceiver.a().b(this.mContext);
    PackageInstallReceiver.a().b(this.mPackageInstallListener);
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  protected void downloadAndMergeApk(TMSelfUpdateUpdateInfo paramTMSelfUpdateUpdateInfo)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    if ((paramTMSelfUpdateUpdateInfo != null) && (!TextUtils.isEmpty(paramTMSelfUpdateUpdateInfo.getUpdateDownloadUrl())))
    {
      TMLog.i("TMSelfUpdateManager", "updateInfo != null && !TextUtils.isEmpty(updateInfo.getUpdateDownloadUrl())");
      if (paramTMSelfUpdateUpdateInfo.getUpdateMethod() == 0)
      {
        this.h = 1;
        this.i = paramTMSelfUpdateUpdateInfo.getUpdateDownloadUrl();
        TMLog.i("TMSelfUpdateManager", "updateInfo.getUpdateMethod(): " + this.h);
        TMLog.i("TMSelfUpdateManager", "updateInfo.getUpdateDownloadUrl(): " + this.i);
        genNewPkgProcess();
      }
    }
    for (;;)
    {
      TMLog.i("TMSelfUpdateManager", "exit");
      return;
      if (paramTMSelfUpdateUpdateInfo.getUpdateMethod() == 1)
      {
        this.h = 2;
        break;
      }
      if (paramTMSelfUpdateUpdateInfo.getUpdateMethod() != 2) {
        break;
      }
      this.h = 4;
      break;
      TMLog.i("TMSelfUpdateManager", "updateInfo == null || TextUtils.isEmpty(updateInfo.getUpdateDownloadUrl())");
    }
  }
  
  public void init(Context paramContext, String paramString, ITMSelfUpdateListener paramITMSelfUpdateListener, YYBDownloadListener paramYYBDownloadListener, Bundle paramBundle)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    TMLog.i("TMSelfUpdateManager", "applicationContext: " + paramContext + "; yybchannelId: " + paramString + "; ITMSelfUpdateListener: " + paramITMSelfUpdateListener + "; YYBDownloadListener: " + paramYYBDownloadListener);
    initManager(paramContext, paramString, paramITMSelfUpdateListener, paramYYBDownloadListener, paramBundle);
    TMLog.i("TMSelfUpdateManager", "exit");
  }
  
  protected void initManager(Context paramContext, String paramString, ITMSelfUpdateListener paramITMSelfUpdateListener, YYBDownloadListener paramYYBDownloadListener, Bundle paramBundle)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    if (!(paramContext instanceof Application))
    {
      TMLog.e("TMSelfUpdateManager", "exception: you must input an application context!");
      throw new Exception("you must input an application context!");
    }
    this.mContext = paramContext;
    this.hostPackageName = this.mContext.getPackageName();
    this.mYybChannelId = paramString;
    TMLog.i("TMSelfUpdateManager", "applicationContext: " + paramContext + "; yybchannelId: " + paramString + "; hostPackageName: " + this.hostPackageName);
    paramContext = paramContext.getPackageManager().getApplicationInfo(this.hostPackageName, 128);
    if (paramContext.metaData != null)
    {
      paramContext.metaData.getString("YYB_APPKEY");
      paramContext = paramContext.metaData.getString("YYB_CHANNEL");
      if (TextUtils.isEmpty(paramContext))
      {
        this.mHostChannelId = null;
        TMLog.i("TMSelfUpdateManager", "mHostChannelId: " + this.mHostChannelId);
      }
    }
    else
    {
      this.e = ("http://www.myapp.com/downcenter/a/50801?g_f=" + this.mYybChannelId);
      this.mOpenSDKInstance = TMAssistantCallYYB_V1.getInstance();
      this.mOpenSDKInstance.initTMAssistantCallYYBApi(this.mContext);
      TMLog.i("TMSelfUpdateManager", "initQQDownloaderOpenSDK");
      this.mOpenSDKInstance.registerListener(this.mOpenSDKYYBStateListener);
      TMLog.i("TMSelfUpdateManager", "registerListener");
      if (paramBundle == null) {
        break label463;
      }
      paramString = paramBundle.getString("scene");
      paramContext = paramString;
      if (TextUtils.isEmpty(paramString)) {
        paramContext = this.hostPackageName;
      }
    }
    label463:
    for (this.mScene = ("ANDROID.YYB.UPDATE." + paramContext.toUpperCase());; this.mScene = ("ANDROID.YYB.UPDATE." + this.hostPackageName.toUpperCase()))
    {
      TMLog.i("TMSelfUpdateManager", "this.mScene: " + this.mScene);
      ApkUpdateManager.getInstance().init(this.mContext);
      TMLog.i("TMSelfUpdateManager", "ApkUpdateManager.init");
      ApkUpdateManager.getInstance().addListener(this.mApkUpdateListener);
      TMLog.i("TMSelfUpdateManager", "ApkUpdateManager.addListener");
      if (paramITMSelfUpdateListener != null)
      {
        boolean bool = registerListener(paramITMSelfUpdateListener);
        TMLog.i("TMSelfUpdateManager", "registerListener ret:" + bool);
      }
      if (paramYYBDownloadListener != null) {
        registerListener(paramYYBDownloadListener);
      }
      PackageInstallReceiver.a().a(this.mPackageInstallListener);
      PackageInstallReceiver.a().a(this.mContext);
      TMLog.i("TMSelfUpdateManager", "exit");
      return;
      this.mHostChannelId = paramContext;
      break;
    }
  }
  
  public void onActivityResume()
  {
    TMLog.i("TMSelfUpdateManager", "onActivityResume enter");
    if (this.mContext == null)
    {
      TMLog.e("TMSelfUpdateManager", "exception: you must input an application context!");
      throw new Exception("you must input an application or activity context!");
    }
    TMAssistantCallYYBParamStruct localTMAssistantCallYYBParamStruct = new TMAssistantCallYYBParamStruct();
    TMLog.i("TMSelfUpdateManager", "yyb isFromStartUpdate :" + this.g);
    if (this.g) {}
    try
    {
      int j = this.mOpenSDKInstance.checkQQDownloaderInstalled();
      TMLog.i("TMSelfUpdateManager", "yyb startSaveUpdateToWhere  flag: " + j);
      if (j == 0)
      {
        TMLog.i("TMSelfUpdateManager", "yyb startSaveUpdateToWhere!!");
        localTMAssistantCallYYBParamStruct.SNGAppId = "";
        localTMAssistantCallYYBParamStruct.taskPackageName = this.hostPackageName;
        localTMAssistantCallYYBParamStruct.channelId = this.mHostChannelId;
        TMLog.i("TMSelfUpdateManager", "isFromStartUpdate param: (param.SNGAppId = " + localTMAssistantCallYYBParamStruct.SNGAppId + "; param.taskPackageName = " + localTMAssistantCallYYBParamStruct.taskPackageName + "; param.channelId = " + localTMAssistantCallYYBParamStruct.channelId + "; param.via = " + localTMAssistantCallYYBParamStruct.via + ")");
        startSaveUpdateToWhere(this.mContext, localTMAssistantCallYYBParamStruct, true, true, j);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      TMLog.e("TMSelfUpdateManager", "exception:", localThrowable);
      localThrowable.printStackTrace();
      throw localThrowable;
    }
    finally
    {
      this.g = false;
      TMLog.i("TMSelfUpdateManager", "onActivityResume exit");
    }
  }
  
  protected int startSaveUpdate(boolean paramBoolean1, boolean paramBoolean2)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    if (this.mContext == null)
    {
      TMLog.e("TMSelfUpdateManager", "exception: you must input an application context!");
      throw new Exception("you must input an application or activity context!");
    }
    TMAssistantCallYYBParamStruct localTMAssistantCallYYBParamStruct = new TMAssistantCallYYBParamStruct();
    TMLog.i("TMSelfUpdateManager", "isAutoDownload = " + paramBoolean1 + "; isAutoInstall = " + paramBoolean2);
    localTMAssistantCallYYBParamStruct.SNGAppId = "1234";
    localTMAssistantCallYYBParamStruct.taskPackageName = this.hostPackageName;
    localTMAssistantCallYYBParamStruct.channelId = this.mHostChannelId;
    int j = checkYYBInstallState();
    TMLog.i("TMSelfUpdateManager", "checkYYBInstalled flag:" + j);
    if (j == 0)
    {
      localTMAssistantCallYYBParamStruct.via = this.mScene;
      TMLog.i("TMSelfUpdateManager", "param: (param.SNGAppId = " + localTMAssistantCallYYBParamStruct.SNGAppId + "; param.taskPackageName = " + localTMAssistantCallYYBParamStruct.taskPackageName + "; param.channelId = " + localTMAssistantCallYYBParamStruct.channelId + "; param.via = " + localTMAssistantCallYYBParamStruct.via + ")");
      startSaveUpdateToWhere(this.mContext, localTMAssistantCallYYBParamStruct, paramBoolean1, paramBoolean2, j);
      TMLog.i("TMSelfUpdateManager", "returnValue: " + 0);
      TMLog.i("TMSelfUpdateManager", "exit");
      return 0;
    }
    TMLog.i("TMSelfUpdateManager", "yyb  uninstall!");
    TMLog.i("TMSelfUpdateManager", "param: (param.SNGAppId = " + localTMAssistantCallYYBParamStruct.SNGAppId + "; param.taskPackageName = " + localTMAssistantCallYYBParamStruct.taskPackageName + "; param.channelId = " + localTMAssistantCallYYBParamStruct.channelId + "; param.via = " + localTMAssistantCallYYBParamStruct.via + ")");
    startSaveUpdateToWhere(this.mContext, localTMAssistantCallYYBParamStruct, paramBoolean1, paramBoolean2, j);
    this.c.post(new b(this, localTMAssistantCallYYBParamStruct));
    TMLog.i("TMSelfUpdateManager", "returnValue: " + this.f);
    TMLog.i("TMSelfUpdateManager", "exit");
    return this.f;
  }
  
  protected void startSaveUpdateToWhere(Context paramContext, TMAssistantCallYYBParamStruct paramTMAssistantCallYYBParamStruct, boolean paramBoolean1, boolean paramBoolean2, int paramInt)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    if (paramTMAssistantCallYYBParamStruct != null) {
      TMLog.i("TMSelfUpdateManager", "param: (param.SNGAppId = " + paramTMAssistantCallYYBParamStruct.SNGAppId + "; param.taskPackageName = " + paramTMAssistantCallYYBParamStruct.taskPackageName + "; param.channelId = " + paramTMAssistantCallYYBParamStruct.channelId + "; param.via = " + paramTMAssistantCallYYBParamStruct.via + ")");
    }
    TMLog.i("TMSelfUpdateManager", "isAutoDownload:" + paramBoolean1 + "; isAutoInstall: " + paramBoolean2 + "; checkQQDownloaderInstalled: " + paramInt);
    if (paramInt == 0) {
      this.mOpenSDKInstance.startToAppDetail(paramContext, paramTMAssistantCallYYBParamStruct, paramBoolean1, paramBoolean2);
    }
    for (;;)
    {
      TMLog.i("TMSelfUpdateManager", "exit");
      return;
      this.mOpenSDKInstance.addDownloadTaskFromAppDetail(paramTMAssistantCallYYBParamStruct, paramBoolean1, paramBoolean2);
    }
  }
  
  public int startSelfUpdate(boolean paramBoolean)
  {
    TMLog.i("TMSelfUpdateManager", "enter");
    if (paramBoolean)
    {
      this.updateType = 2;
      int j = startSaveUpdate(true, true);
      TMLog.i("TMSelfUpdateManager", "returnValue: " + j);
      return j;
    }
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(this.hostPackageName);
    isMergeApk = true;
    this.updateType = 1;
    TMLog.i("TMSelfUpdateManager", "checkUpdate: hostPackageName = " + this.hostPackageName);
    ApkUpdateManager.getInstance().checkUpdate(localArrayList);
    TMLog.i("TMSelfUpdateManager", "exit");
    return 0;
  }
  
  protected void writeChannelIdAfterUpdate(String paramString)
  {
    TMLog.i("TMSelfUpdateManager", "enter overwriteChannelid = " + this.overwriteChannelid);
    if (this.overwriteChannelid == 1) {
      TMLog.i("TMSelfUpdateManager", "writeChannelIdPath: " + paramString);
    }
    try
    {
      Object localObject = this.mContext.getPackageManager().getPackageInfo(this.hostPackageName, 0);
      if (localObject != null)
      {
        localObject = ((PackageInfo)localObject).applicationInfo.sourceDir;
        boolean bool = com.tencent.tmselfupdatesdk.internal.a.a.a((String)localObject, paramString);
        TMLog.i("TMSelfUpdateManager", "writeOldCommentToNewFile; result=" + bool + "; packageName=" + this.hostPackageName + "; oldApk=" + (String)localObject + "; newGenApkPath=" + paramString);
      }
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        TMLog.e("TMSelfUpdateManager", "exception: ", paramString);
      }
    }
    TMLog.i("TMSelfUpdateManager", "exit");
  }
}
