package com.tencent.msdk.notice;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.os.Handler;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.db.AppDBModel;
import com.tencent.msdk.db.NoticeDBModel;
import com.tencent.msdk.handle.MsdkThreadManager;
import com.tencent.msdk.login.LoginInfoManager;
import com.tencent.msdk.stat.ReportEvent;
import com.tencent.msdk.stat.eEVENT_TYPE;
import com.tencent.msdk.timer.TaskManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.File;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class NoticeManager
{
  public static final String ALERT_MSG_TYPE = "alertMsg";
  public static final String SCROLL_MSG_TYPE = "rollMsg";
  private static volatile NoticeManager instance = null;
  public static int sDefaultNoticeTime;
  public static String sNoticePicPath;
  public static int sNoticeTimeLimit;
  public static int sNoticeVersion = 0;
  public static int sRealNoticeTime;
  public Activity mActivity = null;
  private Vector<NoticeInfo> mAlertMsgVector = new Vector();
  private String mAppId = "";
  private String mAppKey = "";
  private String mMatId = "";
  private String mOpenId = "";
  public String mPackageName = null;
  private String mScrollMsg = "";
  public Handler mainHandler = null;
  
  static
  {
    sNoticeTimeLimit = 5;
    sDefaultNoticeTime = 10;
    sRealNoticeTime = 10;
    sNoticePicPath = "";
  }
  
  private NoticeManager()
  {
    setAppinfo();
    String str = WeGame.getInstance().WGGetVersion();
    try
    {
      sNoticeVersion = Integer.parseInt(Pattern.compile("\\.|a").matcher(str).replaceAll(""));
      Logger.d("msdkVersion:" + str + ",noticeVersion:" + sNoticeVersion);
      return;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      for (;;)
      {
        Logger.e("get Notice version error");
        sNoticeVersion = 0;
      }
    }
  }
  
  public static NoticeManager getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new NoticeManager();
      }
      return instance;
    }
    finally {}
  }
  
  public Boolean ckShowDbNotice(NoticeInfo paramNoticeInfo)
  {
    if (eMSDK_SCREENDIR.eMSDK_SCREENDIR_LANDSCAPE == NoticeRequestPara.SCREEN_DIR)
    {
      if (!T.ckIsEmpty(paramNoticeInfo.mNoticeHImgUrl))
      {
        if (NoticePic.checkNoticePicExist(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeHImgUrl, paramNoticeInfo.mNoticeHImgHash).booleanValue()) {
          return Boolean.valueOf(true);
        }
        NoticePic.downloadNoticePic(new NoticePic(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeHImgUrl, NoticeRequestPara.SCREEN_DIR, paramNoticeInfo.mNoticeHImgHash));
        Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " himg is not exist!");
        return Boolean.valueOf(false);
      }
      Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " himgUrl is null!");
      return Boolean.valueOf(false);
    }
    if (eMSDK_SCREENDIR.eMSDK_SCREENDIR_PORTRAIT == NoticeRequestPara.SCREEN_DIR)
    {
      if (!T.ckIsEmpty(paramNoticeInfo.mNoticeVImgUrl))
      {
        if (NoticePic.checkNoticePicExist(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeVImgUrl, paramNoticeInfo.mNoticeVImgHash).booleanValue()) {
          return Boolean.valueOf(true);
        }
        NoticePic.downloadNoticePic(new NoticePic(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeVImgUrl, NoticeRequestPara.SCREEN_DIR, paramNoticeInfo.mNoticeVImgHash));
        Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " vimg is not exist!");
        return Boolean.valueOf(false);
      }
      Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " vimgUrl is null!");
      return Boolean.valueOf(false);
    }
    if (!T.ckIsEmpty(paramNoticeInfo.mNoticeHImgUrl))
    {
      if (NoticePic.checkNoticePicExist(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeHImgUrl, paramNoticeInfo.mNoticeHImgHash).booleanValue())
      {
        if (!T.ckIsEmpty(paramNoticeInfo.mNoticeVImgUrl))
        {
          if (NoticePic.checkNoticePicExist(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeVImgUrl, paramNoticeInfo.mNoticeVImgHash).booleanValue()) {
            return Boolean.valueOf(true);
          }
          NoticePic.downloadNoticePic(new NoticePic(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeVImgUrl, NoticeRequestPara.SCREEN_DIR, paramNoticeInfo.mNoticeVImgHash));
          Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " vimg is not exist!");
          return Boolean.valueOf(false);
        }
        Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " vimgUrl is null!");
        return Boolean.valueOf(false);
      }
      NoticePic.downloadNoticePic(new NoticePic(paramNoticeInfo.mNoticeId, paramNoticeInfo.mNoticeHImgUrl, NoticeRequestPara.SCREEN_DIR, paramNoticeInfo.mNoticeHImgHash));
      Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " himg is not exist!");
      return Boolean.valueOf(false);
    }
    Logger.d("Notice_" + paramNoticeInfo.mNoticeId + " himgUrl is null!");
    return Boolean.valueOf(false);
  }
  
  public void closeScrollNotice()
  {
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity()))
    {
      Logger.w("notice module is closed!");
      return;
    }
    this.mScrollMsg = "";
    Intent localIntent = new Intent(this.mActivity, RollFloatService.class);
    this.mActivity.stopService(localIntent);
  }
  
  public void deleteAlertNoticeItemFromList()
  {
    if ((this.mAlertMsgVector != null) && (this.mAlertMsgVector.size() > 0)) {
      this.mAlertMsgVector.remove(0);
    }
  }
  
  public void displayAlertNotice()
  {
    Logger.d("displayAlertNotice intent");
    Intent localIntent = new Intent();
    localIntent.putExtra("alertMsg", getAlertNoticeItemFromList());
    localIntent.setClass(this.mActivity, AlertMsgActivity.class);
    this.mActivity.startActivity(localIntent);
  }
  
  public void displayRollNotice(String paramString)
  {
    this.mScrollMsg = paramString;
    Intent localIntent = new Intent();
    Logger.d("displayRollNotice intent");
    localIntent.putExtra("rollMsg", paramString);
    localIntent.setClass(this.mActivity, RollFloatService.class);
    this.mActivity.startService(localIntent);
  }
  
  public NoticeInfo getAlertNoticeItemFromList()
  {
    if ((this.mAlertMsgVector != null) && (this.mAlertMsgVector.size() > 0)) {
      return (NoticeInfo)this.mAlertMsgVector.firstElement();
    }
    return null;
  }
  
  public Context getContext()
  {
    return this.mActivity;
  }
  
  public float getDensity()
  {
    WindowManager localWindowManager = (WindowManager)this.mActivity.getSystemService("window");
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    localWindowManager.getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.density;
  }
  
  public int getHeight()
  {
    return ((WindowManager)this.mActivity.getSystemService("window")).getDefaultDisplay().getHeight();
  }
  
  public Vector<NoticeInfo> getNoticeBySceneAndType(eMSG_NOTICETYPE paramEMSG_NOTICETYPE, String paramString)
  {
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity()))
    {
      Logger.w("notice module is closed!");
      paramEMSG_NOTICETYPE = new Vector();
      return paramEMSG_NOTICETYPE;
    }
    paramEMSG_NOTICETYPE = getNoticeFromDBBySceneAndType(paramEMSG_NOTICETYPE, paramString);
    paramString = new Vector();
    Iterator localIterator = paramEMSG_NOTICETYPE.iterator();
    for (;;)
    {
      paramEMSG_NOTICETYPE = paramString;
      if (!localIterator.hasNext()) {
        break;
      }
      paramEMSG_NOTICETYPE = (NoticeInfo)localIterator.next();
      if (paramEMSG_NOTICETYPE.mNoticeContentType == eMSG_CONTENTTYPE.eMSG_CONTENTTYPE_IMAGE)
      {
        if (ckShowDbNotice(paramEMSG_NOTICETYPE).booleanValue())
        {
          paramEMSG_NOTICETYPE.mNoticeHImgUrl = NoticePic.getFilePathByNoticeIdAndHashValue(paramEMSG_NOTICETYPE.mNoticeId, paramEMSG_NOTICETYPE.mNoticeHImgUrl, paramEMSG_NOTICETYPE.mNoticeHImgHash);
          paramEMSG_NOTICETYPE.mNoticeVImgUrl = NoticePic.getFilePathByNoticeIdAndHashValue(paramEMSG_NOTICETYPE.mNoticeId, paramEMSG_NOTICETYPE.mNoticeVImgUrl, paramEMSG_NOTICETYPE.mNoticeVImgHash);
          NoticePic localNoticePic;
          if (!T.ckIsEmpty(paramEMSG_NOTICETYPE.mNoticeHImgUrl))
          {
            localNoticePic = new NoticePic(paramEMSG_NOTICETYPE.mNoticeId, paramEMSG_NOTICETYPE.mNoticeHImgUrl, eMSDK_SCREENDIR.eMSDK_SCREENDIR_LANDSCAPE, paramEMSG_NOTICETYPE.mNoticeHImgHash);
            paramEMSG_NOTICETYPE.mNoticePics.add(localNoticePic);
          }
          if (!T.ckIsEmpty(paramEMSG_NOTICETYPE.mNoticeVImgUrl))
          {
            localNoticePic = new NoticePic(paramEMSG_NOTICETYPE.mNoticeId, paramEMSG_NOTICETYPE.mNoticeVImgUrl, eMSDK_SCREENDIR.eMSDK_SCREENDIR_PORTRAIT, paramEMSG_NOTICETYPE.mNoticeVImgHash);
            paramEMSG_NOTICETYPE.mNoticePics.add(localNoticePic);
          }
          paramString.add(paramEMSG_NOTICETYPE);
        }
      }
      else if (paramEMSG_NOTICETYPE.mNoticeContentType == eMSG_CONTENTTYPE.eMSG_CONTENTTYPE_WEB)
      {
        if (!T.ckIsEmpty(paramEMSG_NOTICETYPE.mNoticeContentWebUrl)) {
          paramString.add(paramEMSG_NOTICETYPE);
        }
      }
      else {
        paramString.add(paramEMSG_NOTICETYPE);
      }
    }
  }
  
  public Vector<NoticeInfo> getNoticeFromDBBySceneAndType(eMSG_NOTICETYPE paramEMSG_NOTICETYPE, String paramString)
  {
    Vector localVector = new Vector();
    if ((paramEMSG_NOTICETYPE == null) || (T.ckIsEmpty(paramString)))
    {
      Logger.w("noticeType or scene is null");
      return localVector;
    }
    if (!eMSG_NOTICETYPE.checkIsValidType(paramEMSG_NOTICETYPE))
    {
      Logger.w("bad noticeType:" + paramEMSG_NOTICETYPE);
      return localVector;
    }
    setAppinfo();
    if (T.ckIsEmpty(this.mAppId))
    {
      Logger.w("appId is null");
      return localVector;
    }
    paramEMSG_NOTICETYPE = new NoticeDBModel().getNoticeRecordBySceneAndType(this.mAppId, this.mOpenId, paramEMSG_NOTICETYPE, paramString);
    Logger.d("noticeVector size:" + paramEMSG_NOTICETYPE.size());
    return paramEMSG_NOTICETYPE;
  }
  
  public void getNoticeInfo()
  {
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity()))
    {
      Logger.w("notice module is closed!");
      return;
    }
    Logger.d("getNotice");
    setAppinfo();
    NoticeRequestPara localNoticeRequestPara = new NoticeRequestPara();
    localNoticeRequestPara.mAppId = this.mAppId;
    localNoticeRequestPara.mAppKey = this.mAppKey;
    localNoticeRequestPara.mOpenId = this.mOpenId;
    Logger.d("appid：" + localNoticeRequestPara.mAppId + ";openid:" + localNoticeRequestPara.mOpenId);
    if (T.ckIsEmpty(getmMatId())) {
      setmMatId(new AppDBModel().getMatId(this.mAppId));
    }
    localNoticeRequestPara.mMatid = getmMatId();
    Logger.d("Notice Model:mat_id may be null:" + localNoticeRequestPara.mMatid + ";mMatId:" + getmMatId());
    updateAppInfoInDB();
    MsdkThreadManager.getInstance().getNoticeReq(localNoticeRequestPara);
  }
  
  public Resources getResources()
  {
    return this.mActivity.getApplicationContext().getResources();
  }
  
  public int getWidth()
  {
    return ((WindowManager)this.mActivity.getSystemService("window")).getDefaultDisplay().getWidth();
  }
  
  public String getmMatId()
  {
    return this.mMatId;
  }
  
  public void init(Activity paramActivity)
  {
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity()))
    {
      Logger.w("notice module is closed!");
      return;
    }
    Logger.d("notice module init start!");
    this.mActivity = paramActivity;
    try
    {
      ActivityInfo localActivityInfo = paramActivity.getPackageManager().getActivityInfo(paramActivity.getComponentName(), 128);
      PackageInfo localPackageInfo = paramActivity.getPackageManager().getPackageInfo(paramActivity.getPackageName(), 16384);
      NoticeRequestPara.SCREEN_DIR = eMSDK_SCREENDIR.getEnum(localActivityInfo);
      NoticeRequestPara.sGameVersion = localPackageInfo.versionCode;
      sNoticePicPath = paramActivity.getFilesDir().getAbsolutePath();
      new DisplayMetrics();
      NoticeRequestPara.sScreenDpi = getResources().getDisplayMetrics().densityDpi;
      sRealNoticeTime = ConfigManager.getNoticeTime(WeGame.getInstance().getActivity());
      this.mPackageName = paramActivity.getPackageName();
      NoticeHelper.reqMatid(new NoticeHelper.MatIdCallback()
      {
        public void onSuccess(String paramAnonymousString)
        {
          NoticeManager.access$002(NoticeManager.this, paramAnonymousString);
          Logger.d("notice module matId:" + NoticeManager.this.mMatId);
          NoticeManager.this.getNoticeInfo();
        }
        
        public void onTimeout()
        {
          Logger.w("notice module get matId failed:" + NoticeManager.this.mMatId);
          ReportEvent.ReportBasicClickEvent(eEVENT_TYPE.eEVENT_BASIC_MATIDFAIL);
          NoticeManager.this.getNoticeInfo();
        }
      });
      TaskManager.getInstance().resetNotifiedTimesByTaskName("noticeTask");
      Logger.d("notice module init finish! matid:" + getmMatId());
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        Logger.e("getComponentName NameNotFoundException");
      }
    }
  }
  
  public void onPause()
  {
    Logger.d("notice module on pause!");
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity())) {
      Logger.w("notice module is closed!");
    }
    do
    {
      return;
      Logger.d("Scroll notice:" + this.mScrollMsg);
    } while (T.ckIsEmpty(this.mScrollMsg));
    Intent localIntent = new Intent(this.mActivity, RollFloatService.class);
    this.mActivity.stopService(localIntent);
  }
  
  public void onResume()
  {
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity())) {
      Logger.w("notice module is closed!");
    }
    do
    {
      return;
      if ((this.mAlertMsgVector != null) && (this.mAlertMsgVector.size() > 0))
      {
        Logger.d("onResume show alert notice!");
        displayAlertNotice();
      }
    } while (T.ckIsEmpty(this.mScrollMsg));
    Logger.d("onResume show Scroll notice!");
    displayRollNotice(this.mScrollMsg);
  }
  
  public void setAppinfo()
  {
    Object localObject = LoginInfoManager.getInstance().getLastLoginUserInfo();
    if (((LoginRet)localObject).platform == WeGame.WXPLATID)
    {
      this.mAppId = WeGame.getInstance().wx_appid;
      this.mAppKey = WeGame.getInstance().getMSDKKey();
    }
    for (this.mOpenId = ((LoginRet)localObject).open_id;; this.mOpenId = ((LoginRet)localObject).open_id)
    {
      Logger.d("mAppId：" + this.mAppId + ";mOpenId:" + this.mOpenId);
      return;
      if (((LoginRet)localObject).platform != WeGame.QQPLATID) {
        break;
      }
      this.mAppId = WeGame.getInstance().qq_appid;
      this.mAppKey = WeGame.getInstance().getMSDKKey();
    }
    localObject = WeGame.getInstance().qq_appid;
    String str = WeGame.getInstance().wx_appid;
    if (T.ckIsEmpty((String)localObject)) {
      if (T.ckIsEmpty(str))
      {
        this.mAppId = "";
        this.mAppKey = "";
        Logger.e("appid is null");
      }
    }
    for (;;)
    {
      this.mOpenId = "";
      break;
      this.mAppId = WeGame.getInstance().wx_appid;
      this.mAppKey = WeGame.getInstance().getMSDKKey();
      continue;
      if (T.ckIsEmpty(str))
      {
        this.mAppId = WeGame.getInstance().qq_appid;
        this.mAppKey = WeGame.getInstance().getMSDKKey();
      }
      else
      {
        this.mAppId = (WeGame.getInstance().qq_appid + "|" + WeGame.getInstance().wx_appid);
        this.mAppKey = WeGame.getInstance().getMSDKKey();
      }
    }
  }
  
  public void setmMatId(String paramString)
  {
    this.mMatId = paramString;
  }
  
  public void showNoticeByScene(eMSG_NOTICETYPE paramEMSG_NOTICETYPE, String paramString)
  {
    if (!ConfigManager.needNotice(WeGame.getInstance().getActivity()))
    {
      Logger.w("notice module is closed!");
      return;
    }
    Object localObject = getNoticeBySceneAndType(paramEMSG_NOTICETYPE, paramString);
    if (((Vector)localObject).size() == 0)
    {
      Logger.d("No notice");
      return;
    }
    paramString = "";
    localObject = ((Vector)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      NoticeInfo localNoticeInfo = (NoticeInfo)((Iterator)localObject).next();
      if (localNoticeInfo.mNoticeType == eMSG_NOTICETYPE.eMSG_NOTICETYPE_ALERT)
      {
        this.mAlertMsgVector.add(localNoticeInfo);
      }
      else
      {
        paramString = paramString + "     " + localNoticeInfo.mNoticeContent;
        Logger.d("Add an Scroll notice id:" + localNoticeInfo.mNoticeId + ",content:" + localNoticeInfo.mNoticeContent);
        Logger.d("Scroll notice content before:" + paramString);
        this.mScrollMsg = Pattern.compile("\r|\n").matcher(paramString).replaceAll("");
        Logger.d("Scroll notice content after:" + this.mScrollMsg);
      }
    }
    if (this.mAlertMsgVector.size() > 0)
    {
      displayAlertNotice();
      return;
    }
    if (!T.ckIsEmpty(this.mScrollMsg))
    {
      displayRollNotice(this.mScrollMsg);
      return;
    }
    Logger.e("Error notice type :" + paramEMSG_NOTICETYPE);
  }
  
  public void updateAppInfoInDB()
  {
    AppInfo localAppInfo = new AppInfo();
    localAppInfo.appid = this.mAppId;
    localAppInfo.openid = this.mOpenId;
    localAppInfo.matid = getmMatId();
    localAppInfo.msdkVersion = WeGame.getInstance().WGGetVersion();
    localAppInfo.packageName = this.mActivity.getApplicationInfo().packageName;
    new AppDBModel().save(localAppInfo);
  }
}
