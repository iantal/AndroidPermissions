package com.tencent.msdk.communicator;

import android.os.Bundle;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Looper;
import android.os.Message;
import com.tencent.msdk.locallog.FilterLogHelper;
import com.tencent.msdk.tools.Logger;

public class HttpRequestManager
{
  public static final String NOTICE_ACTION = "/notice/gather_data/";
  public static final String PFKEY_ACTION = "/auth/getlogin_info/";
  public static final String QQA8LOGIN_ACTION = "/auth/qqa8_login/";
  public static final String RSP_KEY = "http_rsp";
  public static final String WXEXPIRED_LOGIN_ACTION = "/auth/wxexpired_login/";
  public static final String WXFIRST_LOGIN_ACTION = "/auth/wxfirst_login/";
  public static final Boolean isEncode = Boolean.valueOf(true);
  public static final int msdkEncodeType = 2;
  private IHttpRequestListener mListener;
  private Handler mWorkerHandler;
  
  public HttpRequestManager(IHttpRequestListener paramIHttpRequestListener)
  {
    this.mListener = paramIHttpRequestListener;
    initHandle();
  }
  
  private void initHandle()
  {
    this.mWorkerHandler = new Handler(Looper.getMainLooper(), new Handler.Callback()
    {
      public boolean handleMessage(Message paramAnonymousMessage)
      {
        if ((paramAnonymousMessage == null) || (paramAnonymousMessage.getData() == null))
        {
          Logger.e("msg || msg.getData() is null");
          return false;
        }
        int i = paramAnonymousMessage.arg1;
        MHttpResponse localMHttpResponse;
        switch (i)
        {
        default: 
          localMHttpResponse = (MHttpResponse)paramAnonymousMessage.getData().getParcelable("http_rsp");
          if (localMHttpResponse == null)
          {
            HttpRequestManager.this.notifyRequestfailure(Integer.valueOf(paramAnonymousMessage.what), "http error:" + i + ", response no params", i);
            Logger.d(paramAnonymousMessage.what + " HTTP_Failed statusCode：" + i);
            return false;
          }
          break;
        case 200: 
          localMHttpResponse = (MHttpResponse)paramAnonymousMessage.getData().getParcelable("http_rsp");
          if (localMHttpResponse == null)
          {
            Logger.d(paramAnonymousMessage.what + " HTTP_SUCCESS, response params but body is null");
            HttpRequestManager.this.notifyRequestfailure(Integer.valueOf(paramAnonymousMessage.what), "response no params", 1002);
            return false;
          }
          if (localMHttpResponse.getBody() == null)
          {
            Logger.d(paramAnonymousMessage.what + " HTTP_SUCCESS and rsp.getStatus:" + localMHttpResponse.getStatus() + ",response params but body is null");
            HttpRequestManager.this.notifyRequestfailure(Integer.valueOf(paramAnonymousMessage.what), "response params but body is null", 1002);
            return false;
          }
          Logger.d(paramAnonymousMessage.what + " HTTP_SUCCESS, status:" + localMHttpResponse.getStatus());
          HttpRequestManager.this.notifyRequestSuccess(Integer.valueOf(paramAnonymousMessage.what), localMHttpResponse.getBody(), localMHttpResponse.getStatus());
          return false;
        }
        if (localMHttpResponse.getBody() == null)
        {
          Logger.d("MHttpResponse.HTTP_Failed :" + localMHttpResponse.getBody());
          if (localMHttpResponse.getMsg() == null)
          {
            HttpRequestManager.this.notifyRequestfailure(Integer.valueOf(paramAnonymousMessage.what), "response params but body and msg are null", localMHttpResponse.getStatus());
            Logger.d("MHttpResponse.HTTP_Failed 1, statusCode:" + localMHttpResponse.getStatus() + "：response params but body and msg are null");
            return false;
          }
          HttpRequestManager.this.notifyRequestfailure(Integer.valueOf(paramAnonymousMessage.what), localMHttpResponse.getMsg(), localMHttpResponse.getStatus());
          Logger.d("MHttpResponse.HTTP_Failed 2, statusCode:" + localMHttpResponse.getStatus() + "：" + localMHttpResponse.getMsg());
          return false;
        }
        HttpRequestManager.this.notifyRequestfailure(Integer.valueOf(paramAnonymousMessage.what), new String(localMHttpResponse.getBody()), localMHttpResponse.getStatus());
        Logger.d("MHttpResponse.HTTP_Failed 3, statusCode:" + localMHttpResponse.getStatus());
        return false;
      }
    });
  }
  
  private void notifyRequestSuccess(Integer paramInteger, String paramString, int paramInt)
  {
    if (this.mListener != null)
    {
      this.mListener.onSuccess(paramString, paramInt, paramInteger.intValue());
      FilterLogHelper.saveSuccessResp(getInterfaceName(), paramString, paramInt, paramInteger);
    }
  }
  
  private void notifyRequestfailure(Integer paramInteger, String paramString, int paramInt)
  {
    if (this.mListener != null)
    {
      this.mListener.onFailure(paramString, paramInt, paramInteger.intValue());
      FilterLogHelper.saveFailureResp(getInterfaceName(), paramString, paramInt, paramInteger);
    }
  }
  
  protected String getInterfaceName()
  {
    String[] arrayOfString = this.mListener.getClass().getName().split("\\.");
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (arrayOfString != null)
    {
      localObject1 = localObject2;
      if (arrayOfString.length > 0) {
        localObject1 = arrayOfString[(arrayOfString.length - 1)];
      }
    }
    return localObject1;
  }
  
  public void getTextAsync(String paramString, int paramInt)
  {
    try
    {
      if (Looper.myLooper() == null) {
        Logger.w("The calling thread has not called Looper.prepare()");
      }
      MHttpRequest localMHttpRequest = new MHttpRequest();
      localMHttpRequest.setUrl(paramString);
      localMHttpRequest.setMethod(MHttpRequest.HttpMethod.GET);
      new HttpTask(this.mWorkerHandler, paramInt).execute(new MHttpRequest[] { localMHttpRequest });
      return;
    }
    finally {}
  }
  
  /* Error */
  public void postTextAsync(String paramString1, String paramString2, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 130	android/os/Looper:myLooper	()Landroid/os/Looper;
    //   5: ifnonnull +8 -> 13
    //   8: ldc -124
    //   10: invokestatic 138	com/tencent/msdk/tools/Logger:w	(Ljava/lang/String;)V
    //   13: new 140	com/tencent/msdk/communicator/MHttpRequest
    //   16: dup
    //   17: invokespecial 141	com/tencent/msdk/communicator/MHttpRequest:<init>	()V
    //   20: astore 4
    //   22: aload 4
    //   24: aload_1
    //   25: invokevirtual 144	com/tencent/msdk/communicator/MHttpRequest:setUrl	(Ljava/lang/String;)V
    //   28: aload 4
    //   30: getstatic 168	com/tencent/msdk/communicator/MHttpRequest$HttpMethod:POST	Lcom/tencent/msdk/communicator/MHttpRequest$HttpMethod;
    //   33: invokevirtual 154	com/tencent/msdk/communicator/MHttpRequest:setMethod	(Lcom/tencent/msdk/communicator/MHttpRequest$HttpMethod;)V
    //   36: sipush 2020
    //   39: iload_3
    //   40: if_icmpne +37 -> 77
    //   43: aload 4
    //   45: aload_2
    //   46: invokevirtual 171	com/tencent/msdk/communicator/MHttpRequest:setStrBody	(Ljava/lang/String;)V
    //   49: new 156	com/tencent/msdk/communicator/HttpTask
    //   52: dup
    //   53: aload_0
    //   54: getfield 80	com/tencent/msdk/communicator/HttpRequestManager:mWorkerHandler	Landroid/os/Handler;
    //   57: iload_3
    //   58: invokespecial 159	com/tencent/msdk/communicator/HttpTask:<init>	(Landroid/os/Handler;I)V
    //   61: iconst_1
    //   62: anewarray 140	com/tencent/msdk/communicator/MHttpRequest
    //   65: dup
    //   66: iconst_0
    //   67: aload 4
    //   69: aastore
    //   70: invokevirtual 163	com/tencent/msdk/communicator/HttpTask:execute	([Ljava/lang/Object;)Landroid/os/AsyncTask;
    //   73: pop
    //   74: aload_0
    //   75: monitorexit
    //   76: return
    //   77: aload 4
    //   79: aload_2
    //   80: invokevirtual 174	com/tencent/msdk/communicator/MHttpRequest:setBody	(Ljava/lang/String;)V
    //   83: goto -34 -> 49
    //   86: astore_1
    //   87: aload_0
    //   88: monitorexit
    //   89: aload_1
    //   90: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	91	0	this	HttpRequestManager
    //   0	91	1	paramString1	String
    //   0	91	2	paramString2	String
    //   0	91	3	paramInt	int
    //   20	58	4	localMHttpRequest	MHttpRequest
    // Exception table:
    //   from	to	target	type
    //   2	13	86	finally
    //   13	36	86	finally
    //   43	49	86	finally
    //   49	74	86	finally
    //   77	83	86	finally
  }
}
