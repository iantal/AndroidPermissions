package com.tencent.msdk.request;

import com.tencent.msdk.Singleton;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.communicator.HttpRequestManager;
import com.tencent.msdk.communicator.IHttpRequestListener;
import com.tencent.msdk.communicator.UrlManager;
import com.tencent.msdk.control.SwitcherManager;
import com.tencent.msdk.db.WxLoginModel;
import com.tencent.msdk.locallog.FilterLogHelper;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.login.LoginInfoManager;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.myapp.whitelist.WhiteListMng;
import com.tencent.msdk.notice.NoticeManager;
import com.tencent.msdk.permission.PermissionManage;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.remote.api.SafeJSONObject;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.stat.MsdkStat;
import com.tencent.msdk.tools.Logger;
import com.tencent.stat.StatAppMonitor;
import com.tencent.stat.StatService;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.json.JSONException;
import org.json.JSONObject;

public class WxRequestMng
  implements IHttpRequestListener
{
  private static final int DEFAULT_WX_ACCESS_TOKEN_EXPIRATION = 7200;
  private static final int DEFAULT_WX_REFRESH_TOKEN_EXPIRATION = 2592000;
  private final String REFRESH_RETRY_TIME_EVENT_NAME = "wgSecondRefreshTime";
  private final String REFRESH_TIME_EVENT_NAME = "wgFirstRefreshTime";
  private final int SAMPLE_RATE = 1;
  private String callbackMsg = "";
  private WakeupRet currentWakeUp = new WakeupRet();
  private boolean forceNotify = false;
  private int notifyState = 0;
  private long refreshRetryStartTime = 0L;
  private long refreshStartTime = 0L;
  private WxRequest req = new WxRequest();
  private WxLoginModel reqWXUserInfo;
  
  public WxRequestMng() {}
  
  private void callNotifyLogin(boolean paramBoolean, String paramString, int paramInt1, int paramInt2)
  {
    if (LoginManager.getInstance().getIsGameRequest())
    {
      notifyLogin(paramBoolean, paramInt2, paramInt1);
      return;
    }
    if (2018 == paramInt2)
    {
      if (paramBoolean)
      {
        if (this.forceNotify)
        {
          notifyLogin(paramBoolean, paramInt2, paramInt1);
          return;
        }
        SaveLogHelper.getInstance().reportLog("OnLoginNotify", "wxRequest finish but not notify statusCode:" + paramInt1, false);
        Logger.d("newLogin wxRequest finish but not notify, statusCode:" + paramInt1);
        return;
      }
      if (paramInt1 == 200)
      {
        notifyLogin(paramBoolean, paramInt2, paramInt1);
        return;
      }
      SaveLogHelper.getInstance().reportLog("OnLoginNotify", "wxRequest finish but not notify statusCode:" + paramInt1, false);
      Logger.d("newLogin wxRequest finish but not notify, statusCode:" + paramInt1);
      return;
    }
    notifyLogin(paramBoolean, paramInt2, paramInt1);
  }
  
  private void notifyLogin(boolean paramBoolean, int paramInt1, int paramInt2)
  {
    LoginManager.getInstance().setIsGameRequest(false);
    LoginRet localLoginRet2 = new LoginRet();
    localLoginRet2.platform = WeGame.WXPLATID;
    LoginRet localLoginRet1;
    if (true == paramBoolean)
    {
      localLoginRet2 = LoginInfoManager.getInstance().getLastLoginUserInfo();
      if (paramInt1 == 2013)
      {
        localLoginRet2.flag = 0;
        localLoginRet2.desc = WeGame.setDescribe(2005, WeGame.WXPLATID);
        localLoginRet1 = localLoginRet2;
      }
    }
    for (;;)
    {
      localLoginRet1.desc = (localLoginRet1.desc + " cb:" + this.callbackMsg);
      Logger.d("notifyLogin flag = " + localLoginRet1.flag + " desc = " + localLoginRet1.desc);
      WeGameNotifyGame.getInstance().OnPlatformLoginNotify(localLoginRet1);
      return;
      if (paramInt1 == 2012)
      {
        localLoginRet2.flag = 0;
        localLoginRet2.desc = WeGame.setDescribe(0, WeGame.WXPLATID);
        localLoginRet1 = localLoginRet2;
      }
      else if ((paramInt1 == 2014) || (paramInt1 == 2015))
      {
        localLoginRet2.flag = 0;
        localLoginRet2.desc = WeGame.setDescribe(0, WeGame.WXPLATID);
        localLoginRet1 = localLoginRet2;
      }
      else
      {
        localLoginRet1 = localLoginRet2;
        if (paramInt1 == 2018)
        {
          localLoginRet2.flag = 0;
          localLoginRet2.desc = WeGame.setDescribe(0, WeGame.WXPLATID);
          NoticeManager.getInstance().getNoticeInfo();
          localLoginRet1 = localLoginRet2;
          continue;
          if (paramInt2 != 200)
          {
            localLoginRet2.flag = 1003;
            localLoginRet2.desc = "network error";
            localLoginRet1 = localLoginRet2;
          }
          else if (paramInt1 == 2013)
          {
            localLoginRet2.flag = 2006;
            localLoginRet2.desc = WeGame.setDescribe(2006, WeGame.WXPLATID);
            localLoginRet1 = localLoginRet2;
          }
          else if (paramInt1 == 2012)
          {
            localLoginRet2.flag = -1;
            localLoginRet2.desc = "MSDK用Code换取accessToken失败";
            localLoginRet1 = localLoginRet2;
          }
          else if ((paramInt1 == 2014) || (paramInt1 == 2015))
          {
            localLoginRet2.flag = -2;
            localLoginRet2.desc = "自动登录用refreshToken换取accessToken失败";
            localLoginRet1 = localLoginRet2;
          }
          else
          {
            localLoginRet1 = localLoginRet2;
            if (paramInt1 == 2018)
            {
              localLoginRet2.flag = -2;
              localLoginRet2.desc = "local AccessToken & RefreshToken is expired!";
              localLoginRet1 = localLoginRet2;
            }
          }
        }
      }
    }
  }
  
  private void notifyWakup(boolean paramBoolean)
  {
    WeGameNotifyGame.getInstance().OnPlatformWakeupNotify(this.currentWakeUp);
  }
  
  private void reportEventToBeacon(int paramInt1, boolean paramBoolean1, int paramInt2, boolean paramBoolean2)
  {
    if (paramBoolean1) {
      if (paramInt1 == 2014) {
        BeaconHelper.reportMSDKEvent("wxExpiredLoginReq", this.refreshStartTime, true, null, true);
      }
    }
    do
    {
      do
      {
        return;
        if (paramInt1 == 2015)
        {
          BeaconHelper.reportMSDKEvent("wxExpiredLoginReq", this.refreshRetryStartTime, true, null, true);
          return;
        }
      } while (paramInt1 != 2012);
      BeaconHelper.reportMSDKEvent("wxFirstLoginReq", this.refreshStartTime, true, null, true);
      return;
      if (paramInt1 == 2014)
      {
        localHashMap = new HashMap();
        localHashMap.put("param_FailCode", "" + paramInt2);
        localStringBuilder = new StringBuilder().append("");
        if (paramBoolean2) {}
        for (paramInt1 = 1;; paramInt1 = 0)
        {
          localHashMap.put("msdk_logic_error", paramInt1);
          BeaconHelper.reportMSDKEvent("wxExpiredLoginReq", this.refreshStartTime, false, localHashMap, true);
          return;
        }
      }
      if (paramInt1 == 2015)
      {
        localHashMap = new HashMap();
        localHashMap.put("param_FailCode", "" + paramInt2);
        localStringBuilder = new StringBuilder().append("");
        if (paramBoolean2) {}
        for (paramInt1 = 1;; paramInt1 = 0)
        {
          localHashMap.put("msdk_logic_error", paramInt1);
          BeaconHelper.reportMSDKEvent("wxExpiredLoginReq", this.refreshRetryStartTime, false, localHashMap, true);
          return;
        }
      }
    } while (paramInt1 != 2012);
    HashMap localHashMap = new HashMap();
    localHashMap.put("param_FailCode", "" + paramInt2);
    StringBuilder localStringBuilder = new StringBuilder().append("");
    if (paramBoolean2) {}
    for (paramInt1 = 1;; paramInt1 = 0)
    {
      localHashMap.put("msdk_logic_error", paramInt1);
      BeaconHelper.reportMSDKEvent("wxFirstLoginReq", this.refreshStartTime, false, localHashMap, true);
      return;
    }
  }
  
  public static boolean updateWxInfo(WxResponse paramWxResponse)
  {
    long l = System.currentTimeMillis() / 1000L;
    String str1;
    String str2;
    label30:
    String str3;
    label41:
    String str4;
    label52:
    String str5;
    label63:
    WxLoginModel localWxLoginModel2;
    boolean bool1;
    WxLoginModel localWxLoginModel1;
    if (paramWxResponse.openid == null)
    {
      str1 = "";
      if (paramWxResponse.accessToken != null) {
        break label292;
      }
      str2 = "";
      if (paramWxResponse.refreshToken != null) {
        break label301;
      }
      str3 = "";
      if (paramWxResponse.pf != null) {
        break label310;
      }
      str4 = "";
      if (paramWxResponse.pfKey != null) {
        break label319;
      }
      str5 = "";
      localWxLoginModel2 = LoginManager.getInstance().getLastWxLoginModel();
      if (localWxLoginModel2 != null) {
        break label341;
      }
      bool1 = true;
      localWxLoginModel1 = new WxLoginModel();
      localWxLoginModel1.refresh_token_expire = (2592000L + l);
      if (paramWxResponse.expired == 0) {
        break label328;
      }
      localWxLoginModel1.access_token_expire = (paramWxResponse.expired + l);
      label116:
      localWxLoginModel1.open_id = str1;
      localWxLoginModel1.access_token = str2;
      localWxLoginModel1.refresh_token = str3;
      localWxLoginModel1.pf = str4;
      localWxLoginModel1.pf_key = str5;
      if (paramWxResponse.checkTokenFlag != 1) {
        break label458;
      }
      if (paramWxResponse.expired != 0) {
        localWxLoginModel1.access_token_expire = (paramWxResponse.expired + l);
      }
    }
    for (;;)
    {
      Logger.d("rspFromLogin.expired:" + paramWxResponse.expired);
      Logger.d("wxUserInfo.access_token_expire:" + localWxLoginModel1.access_token_expire + ", wxUserInfo.refresh_token_expire" + localWxLoginModel1.refresh_token_expire);
      localWxLoginModel1.save();
      WGPfManager.getInstance().setRegChannelId(paramWxResponse.regChannel);
      PermissionManage.getInstance().updateDataFromNet(paramWxResponse.permission);
      SwitcherManager.getInstance().updateSwitchData(paramWxResponse.otherFuncs);
      return bool1;
      str1 = paramWxResponse.openid;
      break;
      label292:
      str2 = paramWxResponse.accessToken;
      break label30;
      label301:
      str3 = paramWxResponse.refreshToken;
      break label41;
      label310:
      str4 = paramWxResponse.pf;
      break label52;
      label319:
      str5 = paramWxResponse.pfKey;
      break label63;
      label328:
      localWxLoginModel1.access_token_expire = (7200L + l);
      break label116;
      label341:
      if ((!str2.equals(localWxLoginModel2.access_token)) || (!str3.equals(localWxLoginModel2.refresh_token)) || (!str4.equals(localWxLoginModel2.pf)) || (!str5.equals(localWxLoginModel2.pf_key)) || (!str1.equals(localWxLoginModel2.open_id)))
      {
        boolean bool2 = true;
        bool1 = bool2;
        localWxLoginModel1 = localWxLoginModel2;
        if (str3.equals(localWxLoginModel2.refresh_token)) {
          break label116;
        }
        localWxLoginModel2.refresh_token_expire = (2592000L + l);
        bool1 = bool2;
        localWxLoginModel1 = localWxLoginModel2;
        break label116;
      }
      bool1 = false;
      localWxLoginModel1 = localWxLoginModel2;
      break label116;
      label458:
      if (paramWxResponse.checkTokenFlag == 0)
      {
        if (paramWxResponse.expired != 0) {
          localWxLoginModel1.access_token_expire = (paramWxResponse.expired + l);
        } else {
          localWxLoginModel1.access_token_expire = (7200L + l);
        }
      }
      else
      {
        Logger.d("wxUserInfo bad checkTokenFlag:" + paramWxResponse.checkTokenFlag);
        if (paramWxResponse.expired != 0) {
          localWxLoginModel1.access_token_expire = (paramWxResponse.expired + l);
        } else {
          localWxLoginModel1.access_token_expire = (7200L + l);
        }
      }
    }
  }
  
  private void wxExpiredLoginReq(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    new Properties().put("startTime", "" + System.currentTimeMillis());
    if (paramInt2 == 2014)
    {
      this.refreshStartTime = System.currentTimeMillis();
      Logger.d("wxExpiredLoginReq");
      this.notifyState = paramInt1;
      this.reqWXUserInfo = LoginManager.getInstance().getLastWxLoginModel();
      if ((this.reqWXUserInfo != null) && (this.reqWXUserInfo.isExisted())) {
        break label197;
      }
      Logger.d("wxUserInfo is not Existed");
      notify(false, "wxUserInfo is not Existed", 200, paramInt2);
      localObject1 = new HashMap();
      if (2013 != paramInt2) {
        break label175;
      }
      ((HashMap)localObject1).put("req", "expired");
    }
    for (;;)
    {
      ((HashMap)localObject1).put("failure", "wxUserInfo is not Existed");
      SaveLogHelper.getInstance().reportLog(getInterfaceName(), (HashMap)localObject1, true);
      return;
      if (paramInt2 != 2015) {
        break;
      }
      this.refreshRetryStartTime = System.currentTimeMillis();
      break;
      label175:
      if (2018 == paramInt2) {
        ((HashMap)localObject1).put("req", "verify");
      }
    }
    label197:
    Object localObject1 = this.req;
    localObject1.getClass();
    localObject2 = new WxRequest.WxExpiredLoginReq((WxRequest)localObject1);
    String str1 = WeGame.getInstance().wx_appid;
    String str2 = WGPfManager.getInstance().getChannelId();
    String str3 = this.reqWXUserInfo.access_token;
    String str4 = this.reqWXUserInfo.refresh_token;
    String str5 = WGPfManager.getInstance().getPlatformId();
    String str6 = WeGame.getInstance().offerId;
    localObject1 = this.reqWXUserInfo.open_id;
    WeGame.getInstance().setPlatId(WeGame.WXPLATID);
    localObject2 = ((WxRequest.WxExpiredLoginReq)localObject2).getReqJson("", str3, str4, str1, str2, str6, str5, this.reqWXUserInfo.open_id);
    if (paramBoolean) {}
    try
    {
      ((JSONObject)localObject2).put("checkTokenFlag", 1);
      ((MsdkStat)MsdkStat.gDefault.get()).addLoginLog((JSONObject)localObject2, false);
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        localJSONException.printStackTrace();
        continue;
        FilterLogHelper.saveKeysReq(getInterfaceName(), (JSONObject)localObject2, "expired");
      }
    }
    localObject1 = UrlManager.getUrl("/auth/wxexpired_login/", WeGame.WXPLATID, (String)localObject1);
    Logger.d("json: " + ((JSONObject)localObject2).toString());
    Logger.d("url: " + (String)localObject1 + ", checkTokenFlag:" + paramBoolean);
    if (paramBoolean)
    {
      FilterLogHelper.saveKeysReq(getInterfaceName(), (JSONObject)localObject2, "verify");
      new HttpRequestManager(this).postTextAsync((String)localObject1, ((JSONObject)localObject2).toString(), paramInt2);
      return;
    }
  }
  
  protected String getInterfaceName()
  {
    String[] arrayOfString = getClass().getName().split("\\.");
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (arrayOfString != null)
    {
      localObject1 = localObject2;
      if (arrayOfString.length > 0) {
        localObject1 = arrayOfString[(arrayOfString.length - 1)];
      }
    }
    return localObject1;
  }
  
  public void notify(boolean paramBoolean, String paramString, int paramInt1, int paramInt2)
  {
    if (2018 == paramInt2) {
      LoginManager.getInstance().setIsCheckingToken(false);
    }
    this.callbackMsg = (" content: " + paramString + " statusCode: " + paramInt1);
    if (this.notifyState == 1) {
      callNotifyLogin(paramBoolean, paramString, paramInt1, paramInt2);
    }
    while (this.notifyState != 2) {
      return;
    }
    notifyWakup(paramBoolean);
    callNotifyLogin(paramBoolean, paramString, paramInt1, paramInt2);
  }
  
  public void onFailure(String paramString, int paramInt1, int paramInt2)
  {
    if (paramInt2 == 2014)
    {
      localStatAppMonitor = new StatAppMonitor("wgFirstRefreshTime");
      localStatAppMonitor.setSampling(1);
      localStatAppMonitor.setMillisecondsConsume(System.currentTimeMillis() - this.refreshStartTime);
      if (paramInt1 == 3001)
      {
        localStatAppMonitor.setResultType(2);
        StatService.reportAppMonitorStat(WeGame.getInstance().getActivity(), localStatAppMonitor);
      }
    }
    while (paramInt2 != 2015) {
      for (;;)
      {
        reportEventToBeacon(paramInt2, false, paramInt1, false);
        Logger.d("errorContent:" + paramString + " statusCode: " + paramInt1);
        notify(false, paramString, paramInt1, paramInt2);
        return;
        localStatAppMonitor.setResultType(1);
      }
    }
    StatAppMonitor localStatAppMonitor = new StatAppMonitor("wgSecondRefreshTime");
    localStatAppMonitor.setSampling(1);
    localStatAppMonitor.setMillisecondsConsume(System.currentTimeMillis() - this.refreshRetryStartTime);
    if (paramInt1 == 3001) {
      localStatAppMonitor.setResultType(2);
    }
    for (;;)
    {
      StatService.reportAppMonitorStat(WeGame.getInstance().getActivity(), localStatAppMonitor);
      break;
      localStatAppMonitor.setResultType(1);
    }
  }
  
  public void onSuccess(String paramString, int paramInt1, int paramInt2)
  {
    if (paramInt2 == 2014)
    {
      localObject = new StatAppMonitor("wgFirstRefreshTime");
      ((StatAppMonitor)localObject).setSampling(1);
      ((StatAppMonitor)localObject).setMillisecondsConsume(System.currentTimeMillis() - this.refreshStartTime);
      ((StatAppMonitor)localObject).setResultType(0);
      StatService.reportAppMonitorStat(WeGame.getInstance().getActivity(), (StatAppMonitor)localObject);
    }
    label114:
    label405:
    WxLoginModel localWxLoginModel;
    do
    {
      WxResponse localWxResponse;
      do
      {
        do
        {
          break label114;
          break label114;
          String str;
          for (;;)
          {
            str = "";
            localWxResponse = new WxResponse();
            if (paramString != null) {
              break;
            }
            Logger.d("onSuccess: statusCode :" + paramInt1);
            notify(false, "response no params", paramInt1, paramInt2);
            reportEventToBeacon(paramInt2, false, 1002, false);
            return;
            if (paramInt2 == 2015)
            {
              localObject = new StatAppMonitor("wgSecondRefreshTime");
              ((StatAppMonitor)localObject).setSampling(1);
              ((StatAppMonitor)localObject).setMillisecondsConsume(System.currentTimeMillis() - this.refreshRetryStartTime);
              ((StatAppMonitor)localObject).setResultType(0);
              StatService.reportAppMonitorStat(WeGame.getInstance().getActivity(), (StatAppMonitor)localObject);
            }
          }
          localObject = str;
          try
          {
            localWxResponse.parseJson(new SafeJSONObject(paramString));
            localObject = str;
            str = localWxResponse.msg;
            localObject = str;
            if (localWxResponse.ret != 0) {
              break label405;
            }
            localObject = str;
            PermissionManage.getInstance().updateDataFromNet(localWxResponse.permission);
            localObject = str;
            SwitcherManager.getInstance().updateSwitchData(localWxResponse.otherFuncs);
            localObject = str;
            reportEventToBeacon(paramInt2, true, 0, false);
            if (paramInt2 == 2012)
            {
              localObject = str;
              if (((WhiteListMng)WhiteListMng.gDefault.get()).needQueryWhiteList())
              {
                localObject = str;
                ((WhiteListMng)WhiteListMng.gDefault.get()).setTmpWXLoginInfo(localWxResponse);
                localObject = str;
                ((WhiteListMng)WhiteListMng.gDefault.get()).queryUserWhiteListAsync(WeGame.WXPLATID, localWxResponse.openid, localWxResponse.accessToken);
                return;
              }
            }
          }
          catch (JSONException localJSONException)
          {
            Logger.d("JSONException json: " + paramString);
            localJSONException.printStackTrace();
            notify(false, (String)localObject, paramInt1, paramInt2);
            reportEventToBeacon(paramInt2, false, 1001, false);
            return;
          }
          localObject = localJSONException;
          this.forceNotify = updateWxInfo(localWxResponse);
          localObject = localJSONException;
          notify(true, localJSONException, paramInt1, paramInt2);
          return;
          localObject = localJSONException;
          Logger.d("onSuccess error ret:" + localWxResponse.ret + " ret: " + localWxResponse.msg);
          localObject = localJSONException;
          reportEventToBeacon(paramInt2, false, localWxResponse.ret, true);
          localObject = localJSONException;
          notify(false, localJSONException, paramInt1, paramInt2);
        } while (2018 != paramInt2);
        localObject = localJSONException;
        localWxLoginModel = LoginManager.getInstance().getLastWxLoginModel();
        localObject = localJSONException;
        if (localWxResponse.ret == 55536) {
          break;
        }
        localObject = localJSONException;
      } while (localWxResponse.ret != 45536);
    } while (localWxLoginModel == null);
    Object localObject = localJSONException;
    localWxLoginModel.access_token_expire = 0L;
    localObject = localJSONException;
    localWxLoginModel.refresh_token_expire = 0L;
    localObject = localJSONException;
    localWxLoginModel.save();
  }
  
  public void verifyLocalAndRefreshWxToken(WxLoginModel paramWxLoginModel, int paramInt)
  {
    boolean bool = true;
    paramWxLoginModel = paramWxLoginModel.getWakeupRet();
    int i;
    if (paramWxLoginModel == null)
    {
      this.notifyState = 1;
      i = this.notifyState;
      if (paramInt != 1) {
        break label51;
      }
    }
    for (;;)
    {
      wxExpiredLoginReq(i, 2018, bool);
      return;
      this.currentWakeUp = paramWxLoginModel;
      this.notifyState = 2;
      break;
      label51:
      bool = false;
    }
  }
  
  public void wxExpiredLoginReq(int paramInt, boolean paramBoolean)
  {
    Logger.d("wxExpiredLoginReq(" + paramInt + "," + paramBoolean + ")");
    wxExpiredLoginReq(paramInt, 2013, false);
  }
  
  public void wxFirstLoginReq(String paramString, int paramInt)
  {
    this.refreshStartTime = System.currentTimeMillis();
    this.notifyState = paramInt;
    if ((paramString == null) || (paramString.equals("")))
    {
      notify(false, "wxFirstLoginReq wxCode is empty", 200, 2012);
      Logger.e("wxFirstLoginReq wxCode is empty");
      paramString = new HashMap();
      paramString.put("req", "firstLogin");
      paramString.put("wxCode", "wxCode");
      SaveLogHelper.getInstance().reportLog(getInterfaceName(), "", paramString, true);
      return;
    }
    Object localObject = this.req;
    localObject.getClass();
    localObject = new WxRequest.WxFirstLoginReq((WxRequest)localObject);
    String str1 = WeGame.getInstance().wx_appid;
    String str2 = WGPfManager.getInstance().getChannelId();
    String str3 = WeGame.getInstance().offerId;
    String str4 = WGPfManager.getInstance().getPlatformId();
    WeGame.getInstance().setPlatId(WeGame.WXPLATID);
    localObject = ((WxRequest.WxFirstLoginReq)localObject).getReqJson("", paramString, str1, str2, str3, str4);
    ((MsdkStat)MsdkStat.gDefault.get()).addLoginLog((JSONObject)localObject, true);
    str1 = UrlManager.getUrl("/auth/wxfirst_login/", WeGame.WXPLATID);
    SaveLogHelper.getInstance().setWXCode(paramString);
    FilterLogHelper.saveKeysReq(getInterfaceName(), (JSONObject)localObject, "firstLogin");
    new HttpRequestManager(this).postTextAsync(str1, ((JSONObject)localObject).toString(), 2012);
  }
}
