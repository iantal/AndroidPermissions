package com.tencent.msdk.timer;

import com.tencent.msdk.timer.task.BaseTask;
import com.tencent.msdk.tools.Logger;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;

public class TaskManager
{
  private static volatile TaskManager instance = null;
  private final int PERIOD = 60000;
  private ArrayList<String> mDeedDelTaskNameList = new ArrayList();
  private long mPauseTime = 0L;
  private ArrayList<BaseTask> mRunningTaskList = new ArrayList();
  private Timer timer = null;
  
  private TaskManager() {}
  
  public static TaskManager getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new TaskManager();
      }
      return instance;
    }
    finally {}
  }
  
  public static void onPause()
  {
    getInstance().stopTimer();
    getInstance().mPauseTime = (System.currentTimeMillis() / 1000L);
  }
  
  public static void onResume()
  {
    getInstance().startTimer();
  }
  
  public int addDelTaskByName(String paramString)
  {
    Logger.d("task " + paramString + " deleted!");
    synchronized (this.mDeedDelTaskNameList)
    {
      if (this.mDeedDelTaskNameList.contains(paramString)) {
        return -1;
      }
      this.mDeedDelTaskNameList.add(paramString);
      return 0;
    }
  }
  
  public int addRunningTask(BaseTask paramBaseTask)
  {
    synchronized (this.mRunningTaskList)
    {
      if (this.mRunningTaskList.contains(paramBaseTask)) {
        return -1;
      }
      this.mRunningTaskList.add(paramBaseTask);
      return 0;
    }
  }
  
  public BaseTask getTaskByName(String paramString)
  {
    synchronized (this.mRunningTaskList)
    {
      Iterator localIterator = this.mRunningTaskList.iterator();
      while (localIterator.hasNext())
      {
        BaseTask localBaseTask = (BaseTask)localIterator.next();
        if (paramString.equals(localBaseTask.getmTaskName())) {
          return localBaseTask;
        }
      }
      return null;
    }
  }
  
  public void resetNotifiedTimesByTaskName(String paramString)
  {
    paramString = getTaskByName(paramString);
    if (paramString != null) {
      paramString.resetNotifiedTimes();
    }
  }
  
  public void startTimer()
  {
    if (this.timer == null)
    {
      this.timer = new Timer();
      this.timer.schedule(new TaskDispatcher(null), 0L, 60000L);
      Logger.d("TaskManager start Timer");
      return;
    }
    Logger.d("TaskManager timer started");
  }
  
  public void stopTimer()
  {
    if (this.timer != null)
    {
      this.timer.cancel();
      Logger.d("TaskManager stopTimer");
      return;
    }
    Logger.d("TaskManager no timer");
  }
  
  private class TaskDispatcher
    extends TimerTask
  {
    private TaskDispatcher() {}
    
    public void run()
    {
      Logger.d("TaskDispatcher run");
      for (;;)
      {
        BaseTask localBaseTask;
        synchronized (TaskManager.this.mRunningTaskList)
        {
          Iterator localIterator = TaskManager.this.mRunningTaskList.iterator();
          if (!localIterator.hasNext()) {
            break;
          }
          localBaseTask = (BaseTask)localIterator.next();
          if (TaskManager.this.mDeedDelTaskNameList.contains(localBaseTask.getmTaskName()))
          {
            localIterator.remove();
            TaskManager.this.mDeedDelTaskNameList.remove(localBaseTask.getmTaskName());
          }
        }
        localBaseTask.increaseNotifiedTimes();
        if (localBaseTask.getNotifiedTimes() == localBaseTask.getMyInterval())
        {
          localBaseTask.run();
          localBaseTask.resetNotifiedTimes();
        }
      }
    }
  }
}
