package com.tencent.msdk.doctor;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import com.tencent.msdk.tools.Logger;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

public abstract class CheckBase
{
  public Activity mContext = null;
  
  public CheckBase(Activity paramActivity)
  {
    this.mContext = paramActivity;
  }
  
  public abstract ArrayList<String> check();
  
  public String getValueFromAssetsFile(String paramString1, String paramString2)
  {
    Properties localProperties = new Properties();
    try
    {
      localProperties.load(this.mContext.getResources().getAssets().open(paramString2));
      return localProperties.getProperty(paramString1, "");
    }
    catch (IOException paramString1)
    {
      paramString1.printStackTrace();
      Logger.e("Msdk: read assets/" + paramString2 + " error");
    }
    return "error";
  }
  
  public boolean queryIntentFilter(Intent paramIntent, String paramString)
  {
    boolean bool2 = false;
    PackageManager localPackageManager = this.mContext.getPackageManager();
    if (localPackageManager == null)
    {
      Logger.e("PackageManager is null, check fail.");
      return false;
    }
    paramIntent = localPackageManager.queryIntentActivities(paramIntent, 65536).iterator();
    do
    {
      bool1 = bool2;
      if (!paramIntent.hasNext()) {
        break;
      }
    } while (!paramString.equals(((ResolveInfo)paramIntent.next()).activityInfo.name));
    boolean bool1 = true;
    if (!bool1) {
      Logger.e("Msdk: the intent-filter of " + paramString + " has not be configured correctly");
    }
    return bool1;
  }
}
