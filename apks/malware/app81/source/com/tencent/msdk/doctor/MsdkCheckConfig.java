package com.tencent.msdk.doctor;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Build.VERSION;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;

public class MsdkCheckConfig
{
  private final byte OFFERID = 16;
  private final byte QQAPPID = 1;
  private final byte QQAPPKEY = 2;
  private final byte QQBASEINFO = 19;
  private final byte WXAPPID = 4;
  private final byte WXAPPKEY = 8;
  private final byte WXBASEINFO = 28;
  private String channelFileName = "channel.ini";
  private Activity mActivity = WeGame.getInstance().getActivity();
  private String msdkConfigFileName = "msdkconfig.ini";
  private boolean needCheck = isNeedCheck();
  
  public MsdkCheckConfig() {}
  
  private boolean containPermissions(List<String> paramList, String[] paramArrayOfString)
  {
    boolean bool = true;
    int i = 0;
    while (i < paramArrayOfString.length)
    {
      if (!paramList.contains(paramArrayOfString[i]))
      {
        Logger.e("Msdk: Missing Android Permission " + paramArrayOfString[i]);
        bool = false;
      }
      i += 1;
    }
    return bool;
  }
  
  private String getValueFromAssetsFile(String paramString1, String paramString2)
  {
    Properties localProperties = new Properties();
    try
    {
      localProperties.load(this.mActivity.getResources().getAssets().open(paramString2));
      paramString1 = localProperties.getProperty(paramString1, "");
      System.out.println(paramString1);
      return paramString1;
    }
    catch (IOException paramString1)
    {
      paramString1.printStackTrace();
      Logger.e("Msdk: read assets/" + paramString2 + " error");
    }
    return "error";
  }
  
  private boolean isNeedCheck()
  {
    String str = getValueFromAssetsFile("MSDK_URL", this.msdkConfigFileName);
    if (str.equals("error")) {}
    do
    {
      return false;
      if (T.ckIsEmpty(str))
      {
        Logger.e("Msdk: MSDK_URL is not set properly in assets/msdkconfig.ini");
        return false;
      }
      if (str.charAt(str.length() - 1) == '/')
      {
        Logger.e("Msdk: MSDK_URL in msdkconfig.ini should not end with '/', maybe you should delete the '/' ");
        return false;
      }
      if ((str.contains("msdktest.qq.com")) || (str.contains("opensdktest.tencent.com")) || (str.contains("msdkdev.qq.com"))) {
        return true;
      }
    } while ((str.contains("opensdk.tencent.com")) || (str.contains("msdk.qq.com")));
    Logger.w("Msdk: MSDK_URL may be illegal, are you sure to use it");
    return false;
  }
  
  private boolean queryBaseInfo(byte paramByte)
  {
    return true;
  }
  
  private boolean queryIntentFilter(Intent paramIntent, String paramString)
  {
    boolean bool2 = false;
    paramIntent = this.mActivity.getPackageManager().queryIntentActivities(paramIntent, 65536).iterator();
    do
    {
      bool1 = bool2;
      if (!paramIntent.hasNext()) {
        break;
      }
    } while (!paramString.equals(((ResolveInfo)paramIntent.next()).activityInfo.name));
    boolean bool1 = true;
    if (!bool1) {
      Logger.e("Msdk: the intent-filter of " + paramString + " has not be configured correctly");
    }
    return bool1;
  }
  
  public boolean checkAllConfig()
  {
    if (!this.needCheck) {
      Logger.d("MSDK:MsdkCheckConfig is closed");
    }
    while ((checkBasicConfig()) && (checkQQConfig()) && (checkWXConfig()) && (checkPushConfig())) {
      return true;
    }
    return false;
  }
  
  public boolean checkBasicConfig()
  {
    if (!this.needCheck)
    {
      Logger.d("MSDK:MsdkCheckConfig is closed");
      return true;
    }
    Object localObject = WGPfManager.getInstance().getChannelId();
    if ((((String)localObject).equals("00000000")) || (((String)localObject).equals(getValueFromAssetsFile("CHANNEL", this.channelFileName)))) {
      Logger.d("Msdk: You are using a test channel");
    }
    for (;;)
    {
      localObject = this.mActivity.getPackageManager();
      String str = this.mActivity.getPackageName();
      try
      {
        localObject = ((PackageManager)localObject).getPackageInfo(str, 4096);
        return containPermissions(Arrays.asList(((PackageInfo)localObject).requestedPermissions), new String[] { "android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.WRITE_EXTERNAL_STORAGE", "android.permission.READ_PHONE_STATE", "android.permission.ACCESS_WIFI_STATE", "android.permission.CHANGE_WIFI_STATE", "android.permission.RESTART_PACKAGES", "android.permission.GET_TASKS", "android.permission.MOUNT_UNMOUNT_FILESYSTEMS", "android.permission.SYSTEM_ALERT_WINDOW", "android.permission.ACCESS_FINE_LOCATION" });
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        localNameNotFoundException.printStackTrace();
      }
      if (T.ckIsEmpty((String)localObject)) {
        Logger.e("Msdk: channelID is empty");
      }
    }
    return false;
  }
  
  public boolean checkPushConfig()
  {
    boolean bool = false;
    if (!this.needCheck)
    {
      Logger.d("MSDK:MsdkCheckConfig is closed");
      bool = true;
    }
    for (;;)
    {
      return bool;
      String str1 = getValueFromAssetsFile("PUSH", this.msdkConfigFileName);
      if (str1.equals("false")) {
        return true;
      }
      if (!str1.equals("true"))
      {
        Logger.e("Msdk: PUSH in assets/msdkconfig.ini is not set properly");
        return false;
      }
      String str2 = this.mActivity.getPackageName();
      str1 = str2 + ".push.ForwardActivity";
      try
      {
        Class.forName(str1);
        ActivityInfo localActivityInfo1 = this.mActivity.getPackageManager().getActivityInfo(new ComponentName(str2, str1), 128);
        ServiceInfo localServiceInfo = this.mActivity.getPackageManager().getServiceInfo(new ComponentName(str2, "com.tencent.msdk.push.HttpPushService"), 128);
        ActivityInfo localActivityInfo2 = this.mActivity.getPackageManager().getReceiverInfo(new ComponentName(str2, "com.tencent.msdk.push.AlarmReveiver"), 128);
        bool = true;
        if ((localActivityInfo1.flags & 0x20) != 32)
        {
          Logger.e("Msdk: the excludeFromRecents of " + str1 + " must be true");
          bool = false;
        }
        if (localActivityInfo1.exported != true)
        {
          Logger.e("Msdk: the exported of " + str1 + " must be true");
          bool = false;
        }
        if (localActivityInfo1.launchMode != 1)
        {
          Logger.e("Msdk: the launchMose of " + str1 + " must be singleTop");
          bool = false;
        }
        if (localActivityInfo1.taskAffinity.equals(str2))
        {
          Logger.e("Msdk: the taskAffinity of " + str1 + " must be different from the PackageName of the game: " + str2);
          bool = false;
        }
        if (localServiceInfo.exported != true)
        {
          Logger.e("Msdk: the exported of " + "com.tencent.msdk.push.HttpPushService" + " must be true");
          bool = false;
        }
        if (!localServiceInfo.processName.equals(".msdk_push_v_1"))
        {
          Logger.e("Msdk: the process of " + "com.tencent.msdk.push.HttpPushService" + " must be .msdk_push_v_1");
          bool = false;
        }
        if (!localActivityInfo2.processName.equals(".msdk_push_v_1"))
        {
          Logger.e("Msdk: the process of " + "com.tencent.msdk.push.AlarmReveiver" + " must be .msdk_push_v_1");
          return false;
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        localNameNotFoundException.printStackTrace();
        if (localNameNotFoundException.toString().contains(str1)) {
          Logger.e("Msdk: Lack of activity: " + str1);
        }
        if (localNameNotFoundException.toString().contains("com.tencent.msdk.push.HttpPushService")) {
          Logger.e("Msdk: Lack of service: " + "com.tencent.msdk.push.HttpPushService");
        }
        if (localNameNotFoundException.toString().contains("com.tencent.msdk.push.AlarmReveiver"))
        {
          Logger.e("Msdk: Lack of recevice: " + "com.tencent.msdk.push.AlarmReveiver");
          return false;
        }
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        localClassNotFoundException.printStackTrace();
        Logger.e("Msdk: ForwardActivity.java must be put into package " + this.mActivity.getPackageName() + ".push");
      }
    }
    return false;
  }
  
  public boolean checkQQConfig()
  {
    boolean bool2;
    if (!this.needCheck)
    {
      Logger.d("MSDK:MsdkCheckConfig is closed");
      bool2 = true;
    }
    Object localObject1;
    ActivityInfo localActivityInfo;
    boolean bool1;
    int j;
    int i;
    label510:
    do
    {
      do
      {
        return bool2;
        if (!queryBaseInfo((byte)19)) {
          return false;
        }
        String str = this.mActivity.getPackageName();
        localObject1 = Build.VERSION.SDK;
        for (;;)
        {
          try
          {
            localObject2 = this.mActivity.getPackageManager().getActivityInfo(new ComponentName(str, "com.tencent.tauth.AuthActivity"), 128);
            localActivityInfo = this.mActivity.getPackageManager().getActivityInfo(new ComponentName(str, "com.tencent.connect.common.AssistActivity"), 128);
            bool1 = true;
            if (((ActivityInfo)localObject2).launchMode != 2)
            {
              Logger.e("Msdk: the launchMose of " + "com.tencent.tauth.AuthActivity" + " be singleTask");
              bool1 = false;
            }
            if ((((ActivityInfo)localObject2).flags & 0x80) != 128)
            {
              Logger.e("Msdk: the noHistory of " + "com.tencent.tauth.AuthActivity" + " must be true");
              bool1 = false;
            }
            if (localActivityInfo.screenOrientation != 1)
            {
              Logger.e("Msdk: the screenOrientation of " + "com.tencent.connect.common.AssistActivity" + " must be portrait");
              bool1 = false;
            }
            j = Integer.parseInt((String)localObject1);
            if (j < 13)
            {
              i = 160;
              if ((localActivityInfo.configChanges & i) != i)
              {
                if (j >= 13) {
                  break label510;
                }
                Logger.e("Msdk: the configChanges of " + "com.tencent.connect.common.AssistActivity" + " must be " + "orientation|keyboardHidden");
                bool1 = false;
              }
              if (localActivityInfo.theme != 16973840)
              {
                Logger.e("Msdk: the theme of " + "com.tencent.connect.common.AssistActivity" + " must be Theme.Translucent.NoTitleBar");
                bool1 = false;
              }
              localObject1 = new Intent();
              ((Intent)localObject1).setData(Uri.parse("tencent" + WeGame.getInstance().qq_appid + "://"));
              if (queryIntentFilter((Intent)localObject1, "com.tencent.tauth.AuthActivity")) {
                break;
              }
              Logger.e("Msdk: QQ AppID for Initialiezed must be the same as configed in AndroidMenifest.xml");
              return false;
            }
          }
          catch (PackageManager.NameNotFoundException localNameNotFoundException1)
          {
            localNameNotFoundException1.printStackTrace();
            if (localNameNotFoundException1.toString().contains("com.tencent.tauth.AuthActivity")) {
              Logger.e("Msdk: Lack of activity: " + "com.tencent.tauth.AuthActivity");
            }
            if (localNameNotFoundException1.toString().contains("com.tencent.connect.common.AssistActivity")) {
              Logger.e("Msdk: Lack of activity: " + "com.tencent.connect.common.AssistActivity");
            }
            return false;
          }
          i = 1184;
          continue;
          Logger.e("Msdk: the configChanges of " + "com.tencent.connect.common.AssistActivity" + " must be " + "orientation|screenSize|keyboardHidden");
        }
        ((Intent)localObject1).setAction("android.intent.action.VIEW");
        ((Intent)localObject1).addCategory("android.intent.category.DEFAULT");
        ((Intent)localObject1).addCategory("android.intent.category.BROWSABLE");
        if (!queryIntentFilter((Intent)localObject1, "com.tencent.tauth.AuthActivity")) {
          bool1 = false;
        }
        localObject1 = this.mActivity.getPackageManager().getLaunchIntentForPackage(localNameNotFoundException1);
        bool2 = bool1;
      } while (!((Intent)localObject1).getComponent().getClassName().equals(this.mActivity.getClass().getName()));
      localObject2 = ((Intent)localObject1).getCategories();
      bool2 = bool1;
    } while (localObject2 == null);
    Object localObject2 = ((Set)localObject2).iterator();
    do
    {
      bool2 = bool1;
      if (!((Iterator)localObject2).hasNext()) {
        break;
      }
    } while (!((String)((Iterator)localObject2).next()).equals("android.intent.category.LAUNCHER"));
    for (;;)
    {
      try
      {
        localActivityInfo = this.mActivity.getPackageManager().getActivityInfo(new ComponentName(localNameNotFoundException1, ((Intent)localObject1).getComponent().getClassName()), 128);
        if ((localActivityInfo.configChanges & i) == i) {
          break;
        }
        if (j < 13)
        {
          Logger.e("Msdk: if the game Activity is Launch Activity,the configChanges of " + ((Intent)localObject1).getComponent().getClassName() + " must be orientation|keyboardHidden");
          bool1 = false;
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException2)
      {
        localNameNotFoundException2.printStackTrace();
        return false;
      }
      Logger.e("Msdk: if the game Activity is Launch Activity,the configChanges of " + ((Intent)localObject1).getComponent().getClassName() + " must be orientation|screenSize|keyboardHidden");
    }
  }
  
  public boolean checkWXConfig()
  {
    boolean bool = false;
    if (!this.needCheck)
    {
      Logger.d("MSDK:MsdkCheckConfig is closed");
      bool = true;
    }
    do
    {
      do
      {
        return bool;
      } while (!queryBaseInfo((byte)28));
      Object localObject = this.mActivity.getPackageName();
      String str = (String)localObject + ".wxapi.WXEntryActivity";
      try
      {
        Class.forName(str);
        ActivityInfo localActivityInfo = this.mActivity.getPackageManager().getActivityInfo(new ComponentName((String)localObject, str), 128);
        bool = true;
        if ((localActivityInfo.flags & 0x20) != 32)
        {
          Logger.e("Msdk: the excludeFromRecents of WXEntryActivity must be true");
          bool = false;
        }
        if (localActivityInfo.exported != true)
        {
          Logger.e("Msdk: the exported of WXEntryActivity must be true");
          bool = false;
        }
        if (localActivityInfo.launchMode != 1)
        {
          Logger.e("Msdk: the launchMose of WXEntryActivity must be singleTop");
          bool = false;
        }
        if (localActivityInfo.taskAffinity.equals(localObject))
        {
          Logger.e("Msdk: the taskAffinity of WXEntryActivity must be different from the PackageName of the game: " + (String)localObject);
          bool = false;
        }
        localObject = new Intent();
        ((Intent)localObject).setData(Uri.parse(WeGame.getInstance().wx_appid + "://"));
        if (!queryIntentFilter((Intent)localObject, str))
        {
          Logger.e("Msdk: WeiXin AppID for Initialiezed must be the same as configed in AndroidMenifest.xml");
          return false;
        }
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        localNameNotFoundException.printStackTrace();
        Logger.e("Msdk:  Lack of activity: " + str);
        return false;
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        localClassNotFoundException.printStackTrace();
        Logger.e("Msdk: WXEntryActivity.java must be put into package " + this.mActivity.getPackageName() + ".wxapi");
        return false;
      }
      localNameNotFoundException.setAction("android.intent.action.VIEW");
      localNameNotFoundException.addCategory("android.intent.category.DEFAULT");
    } while (queryIntentFilter(localNameNotFoundException, localClassNotFoundException));
    return false;
  }
  
  public void closeCheck()
  {
    this.needCheck = false;
  }
  
  public void openCheck()
  {
    this.needCheck = true;
  }
}
