package com.tencent.msdk.login;

import android.os.Bundle;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.CardRet;
import com.tencent.msdk.api.KVPair;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

public class LoginUtils
{
  public LoginUtils() {}
  
  public static void bundleToVector(Bundle paramBundle, CardRet paramCardRet)
  {
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      KVPair localKVPair = new KVPair();
      localKVPair.key = str;
      Object localObject = paramBundle.get(str);
      if (localObject != null)
      {
        localKVPair.value = localObject.toString();
        paramCardRet.extInfo.add(localKVPair);
        Logger.d(String.format("%s %s (%s)", new Object[] { str, localObject.toString(), localObject.getClass().getName() }));
      }
    }
  }
  
  public static void bundleToVector(Bundle paramBundle, WakeupRet paramWakeupRet)
  {
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      KVPair localKVPair = new KVPair();
      localKVPair.key = str;
      Object localObject = paramBundle.get(str);
      if (localObject != null)
      {
        localKVPair.value = localObject.toString();
        paramWakeupRet.extInfo.add(localKVPair);
        Logger.d(String.format("%s %s (%s)", new Object[] { str, localObject.toString(), localObject.getClass().getName() }));
      }
    }
  }
  
  public static int checkDiffLogin(LoginRet paramLoginRet)
  {
    LoginRet localLoginRet = new LoginRet();
    getLocalLoginRet(localLoginRet);
    Logger.d("******************local lr start********************");
    Logger.d(localLoginRet);
    Logger.d("******************local lr end*******************");
    SaveLogHelper.getInstance().reportLog("checkDiffLogin", localLoginRet, false);
    if (localLoginRet.open_id.equals(paramLoginRet.open_id))
    {
      Logger.d("local and callback is same user!");
      if (localLoginRet.flag == 0)
      {
        if (WeGame.QQPLATID == localLoginRet.platform) {
          if ((!checkOldTokenIsUserful(localLoginRet.getAccessToken(), paramLoginRet.getAccessToken())) || (!checkOldTokenIsUserful(localLoginRet.getTokenByType(2), paramLoginRet.getTokenByType(2)))) {}
        }
        while ((WeGame.WXPLATID != localLoginRet.platform) || ((checkOldTokenIsUserful(localLoginRet.getAccessToken(), paramLoginRet.getAccessToken())) && (checkOldTokenIsUserful(localLoginRet.getTokenByType(5), paramLoginRet.getTokenByType(5)))))
        {
          return 0;
          return 3002;
        }
        return 3002;
      }
      if (2007 == localLoginRet.flag)
      {
        paramLoginRet = new HashMap();
        paramLoginRet.put("call", "checkDiffLogin");
        SaveLogHelper.getInstance().reportLog("WxRequestMng", paramLoginRet, false);
        return 3004;
      }
      if (judgeSwitchUserState(paramLoginRet.platform)) {
        return 3002;
      }
      return 3001;
    }
    if (!T.ckIsEmpty(localLoginRet.open_id))
    {
      Logger.d("local openid:" + localLoginRet.open_id);
      if ((localLoginRet.flag == 0) || (2007 == localLoginRet.flag))
      {
        Logger.d("local user is valid");
        if (!T.ckIsEmpty(paramLoginRet.open_id))
        {
          Logger.d("call back openid:" + paramLoginRet.open_id);
          return 3003;
        }
        Logger.d("call back without openid");
        return 0;
      }
      Logger.d("local user is invalid");
      if ((!T.ckIsEmpty(paramLoginRet.open_id)) && (!T.ckIsEmpty(paramLoginRet.getAccessToken())))
      {
        Logger.d("call back openid:" + paramLoginRet.open_id);
        return 3003;
      }
      Logger.d("call back without openid");
      return 3001;
    }
    Logger.d("local without openid");
    if ((!T.ckIsEmpty(paramLoginRet.open_id)) && (!T.ckIsEmpty(paramLoginRet.getAccessToken())))
    {
      Logger.d("call back openid:" + paramLoginRet.open_id);
      if (judgeSwitchUserState(paramLoginRet.platform)) {
        return 3002;
      }
      return 3001;
    }
    Logger.d("call back without openid");
    return 3001;
  }
  
  public static boolean checkOldTokenIsUserful(String paramString1, String paramString2)
  {
    if (T.ckIsEmpty(paramString2)) {}
    do
    {
      return true;
      if (T.ckIsEmpty(paramString1)) {
        return false;
      }
    } while (paramString1.equals(paramString2));
    return false;
  }
  
  public static int getLocalLoginRet(LoginRet paramLoginRet)
  {
    Object localObject1 = LoginInfoManager.getInstance().getLastLoginUserInfo();
    paramLoginRet.platform = ((LoginRet)localObject1).platform;
    paramLoginRet.open_id = ((LoginRet)localObject1).open_id;
    paramLoginRet.flag = validateAccountToken((LoginRet)localObject1);
    if (WeGame.QQPLATID == ((LoginRet)localObject1).platform) {
      WeGame.getInstance().setOpenSdkLoginInfo(((LoginRet)localObject1).open_id, ((LoginRet)localObject1).getTokenByType(1), ((LoginRet)localObject1).getTokenExpireByType(1));
    }
    switch (paramLoginRet.flag)
    {
    default: 
      paramLoginRet.desc = "no login record or other error, ask user to login";
    }
    for (;;)
    {
      Logger.d("ret.platform = " + paramLoginRet.platform + ",flag:" + paramLoginRet.flag + ",openid:" + paramLoginRet.open_id + ", desc:" + paramLoginRet.desc + ", pf:" + paramLoginRet.pf + ", pfkey:" + paramLoginRet.pf_key);
      return paramLoginRet.platform;
      paramLoginRet.desc = "success";
      paramLoginRet.open_id = ((LoginRet)localObject1).open_id;
      paramLoginRet.pf = ((LoginRet)localObject1).pf;
      paramLoginRet.pf_key = ((LoginRet)localObject1).pf_key;
      paramLoginRet.platform = ((LoginRet)localObject1).platform;
      paramLoginRet.user_id = ((LoginRet)localObject1).user_id;
      Object localObject2 = ((LoginRet)localObject1).token.iterator();
      while (((Iterator)localObject2).hasNext())
      {
        TokenRet localTokenRet = (TokenRet)((Iterator)localObject2).next();
        paramLoginRet.token.add(localTokenRet);
      }
      LoginManager.getInstance().reportLogin(((LoginRet)localObject1).open_id, ((LoginRet)localObject1).platform);
      continue;
      paramLoginRet.desc = "qq access token expired, ask user login again!";
      continue;
      paramLoginRet.desc = "qq pay token expired, ask user login again!";
      continue;
      paramLoginRet.desc = "wechat access token expired, try to refresh it using refresh token";
      paramLoginRet.open_id = ((LoginRet)localObject1).open_id;
      paramLoginRet.pf = ((LoginRet)localObject1).pf;
      paramLoginRet.pf_key = ((LoginRet)localObject1).pf_key;
      paramLoginRet.platform = ((LoginRet)localObject1).platform;
      paramLoginRet.user_id = ((LoginRet)localObject1).user_id;
      localObject1 = ((LoginRet)localObject1).token.iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (TokenRet)((Iterator)localObject1).next();
        paramLoginRet.token.add(localObject2);
      }
      paramLoginRet.desc = "wechat refresh token is expired, ask user login again!";
    }
  }
  
  public static String getPlatformFromCallbackInfo(Bundle paramBundle)
  {
    String str = "";
    if (!T.ckIsEmpty(paramBundle.getString("platformId"))) {
      str = paramBundle.getString("platformId");
    }
    do
    {
      return str;
      if (!T.ckIsEmpty(paramBundle.getString("platform"))) {
        return paramBundle.getString("platform");
      }
      if (!T.ckIsEmpty(paramBundle.getString("current_uin"))) {
        return "qq_m";
      }
      if (!T.ckIsEmpty(paramBundle.getString("wx_callback"))) {
        return "wechat";
      }
    } while (T.ckIsEmpty(paramBundle.getString("KEY_REPORT_CHID")));
    return "mobile";
  }
  
  public static boolean judgeSwitchUserState(int paramInt)
  {
    Logger.d("login with callback");
    if (WeGame.QQPLATID == paramInt)
    {
      Logger.d("loginWithUrlInfo: qq");
      return true;
    }
    if (WeGame.WXPLATID == paramInt)
    {
      Logger.d("loginWithUrlInfo: wechat");
      return false;
    }
    if (WeGame.QQHALL == paramInt)
    {
      Logger.d("loginWithUrlInfo: hall");
      return false;
    }
    Logger.w("loginWithUrlInfo: " + paramInt);
    return false;
  }
  
  public static void setmCallbackRet(String paramString, Bundle paramBundle, LoginRet paramLoginRet)
  {
    if ("qq_m".equals(paramString))
    {
      paramLoginRet.platform = WeGame.QQPLATID;
      if (!T.ckIsEmpty(paramBundle.getString("openid"))) {}
      for (paramLoginRet.open_id = paramBundle.getString("openid");; paramLoginRet.open_id = paramBundle.getString("current_uin"))
      {
        if (!T.ckIsEmpty(paramBundle.getString("atoken"))) {
          paramLoginRet.token.add(new TokenRet(1, paramBundle.getString("atoken"), 7776000L));
        }
        if (!T.ckIsEmpty(paramBundle.getString("ptoken"))) {
          paramLoginRet.token.add(new TokenRet(2, paramBundle.getString("ptoken"), 518400L));
        }
        if (!T.ckIsEmpty(paramBundle.getString("pfKey"))) {
          paramLoginRet.pf_key = paramBundle.getString("pfKey");
        }
        return;
      }
    }
    if ("wechat".equals(paramString))
    {
      paramLoginRet.platform = WeGame.WXPLATID;
      paramLoginRet.open_id = paramBundle.getString("wx_openId");
      return;
    }
    if ("mobile".equals(paramString))
    {
      paramLoginRet.platform = WeGame.QQHALL;
      return;
    }
    Logger.d("handdle unknow platformID: " + paramString);
  }
  
  public static int validateAccountToken(LoginRet paramLoginRet)
  {
    long l1 = System.currentTimeMillis() / 1000L;
    if (paramLoginRet.platform == WeGame.WXPLATID)
    {
      if (l1 > paramLoginRet.getTokenExpireByType(5) - 86400L) {
        return 2008;
      }
      if (l1 > paramLoginRet.getTokenExpireByType(3) - 1800L) {
        return 2007;
      }
      return 0;
    }
    if (paramLoginRet.platform == WeGame.QQPLATID)
    {
      long l2 = paramLoginRet.getTokenExpireByType(1);
      long l3 = paramLoginRet.getTokenExpireByType(2);
      if (l1 > l2 - 86400L) {
        return 1006;
      }
      if (l1 > l3 - 43200L) {
        return 1007;
      }
      return 0;
    }
    return -1;
  }
}
