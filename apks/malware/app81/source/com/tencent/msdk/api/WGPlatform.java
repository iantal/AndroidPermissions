package com.tencent.msdk.api;

import android.app.Activity;
import android.content.Intent;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.ad.ADManager;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.consts.EPlatform;
import com.tencent.msdk.handle.MsdkThreadManager;
import com.tencent.msdk.lbs.Lbs;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.login.LoginTimer;
import com.tencent.msdk.myapp.autoupdate.AutoUpdateManager;
import com.tencent.msdk.myapp.autoupdate.WGSaveUpdateObserver;
import com.tencent.msdk.myapp.autoupdate.WGSaveUpdateObserverProxy;
import com.tencent.msdk.myapp.whitelist.WhiteListMng;
import com.tencent.msdk.notice.NoticeInfo;
import com.tencent.msdk.notice.NoticeManager;
import com.tencent.msdk.notice.eMSG_NOTICETYPE;
import com.tencent.msdk.permission.PermissionManage;
import com.tencent.msdk.pf.WGPfManager;
import com.tencent.msdk.push.PushSwitchMng;
import com.tencent.msdk.qq.ApiName;
import com.tencent.msdk.stat.MsdkStat;
import com.tencent.msdk.timer.TaskManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.SharedPreferencesTool;
import com.tencent.msdk.tools.T;
import com.tencent.msdk.tools.WeGameTools;
import com.tencent.msdk.weixin.BtnBase;
import com.tencent.msdk.weixin.MsgBase;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;

public final class WGPlatform
{
  private static final String TAG = WGPlatform.class.getName();
  
  public WGPlatform() {}
  
  public static void DestroyActivity() {}
  
  public static void Initialized(Activity paramActivity, MsdkBaseInfo paramMsdkBaseInfo)
  {
    WeGame.getInstance().Initialized(paramActivity, paramMsdkBaseInfo);
    WeGame.getInstance().ReportGameTime(1);
  }
  
  public static Boolean IsDifferentActivity(Activity paramActivity)
  {
    return Boolean.valueOf(WeGame.getInstance().IsDifferentActivity(paramActivity));
  }
  
  public static void WGAddCardToWXCardPackage(String paramString1, String paramString2, String paramString3)
  {
    MsdkThreadManager.getInstance().WGAddCardToWXCardPackage(paramString1, paramString2, paramString3);
  }
  
  public static void WGAddGameFriendToQQ(String paramString1, String paramString2, String paramString3)
  {
    MsdkThreadManager.getInstance().WGAddGameFriendToQQ(paramString1, paramString2, paramString3);
  }
  
  public static void WGBindQQGroup(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    MsdkThreadManager.getInstance().WGBindQQGroup(paramString1, paramString2, paramString3, paramString4);
  }
  
  public static boolean WGCheckApiSupport(ApiName paramApiName)
  {
    return WeGame.getInstance().checkApiSupport(paramApiName);
  }
  
  public static void WGCheckNeedUpdate() {}
  
  public static int WGCheckYYBInstalled()
  {
    return AutoUpdateManager.checkYYBInstalled();
  }
  
  public static boolean WGCleanLocation()
  {
    Logger.d("called");
    SaveLogHelper.getInstance().reportLog("WGCleanLocation", "", false);
    return MsdkThreadManager.getInstance().clearLocation();
  }
  
  public static void WGCloseAD(eADType paramEADType)
  {
    HashMap localHashMap = new HashMap();
    if (paramEADType == null) {}
    for (String str = "null";; str = String.valueOf(paramEADType.val()))
    {
      localHashMap.put("scene", str);
      SaveLogHelper.getInstance().reportLog("WGCloseAD", localHashMap, false);
      MsdkThreadManager.getInstance().closeAD(paramEADType);
      return;
    }
  }
  
  public static void WGEnableCrashReport(boolean paramBoolean1, boolean paramBoolean2)
  {
    WeGame.getInstance().enableCrashReport(paramBoolean1, paramBoolean2);
    HashMap localHashMap = new HashMap();
    localHashMap.put("rdmEnable", String.valueOf(paramBoolean1));
    localHashMap.put("mtaEnable", String.valueOf(paramBoolean2));
    SaveLogHelper.getInstance().reportLog("WGEnableCrashReport", localHashMap, false);
  }
  
  public static void WGFeedback(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("body", paramString);
    SaveLogHelper.getInstance().reportLog("WGFeedback", localHashMap, false);
    MsdkThreadManager.getInstance().sendFeedbackWithAppid(paramString);
  }
  
  public static boolean WGFeedback(String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("game", paramString1);
    localHashMap.put("txt", paramString2);
    SaveLogHelper.getInstance().reportLog("WGFeedback", localHashMap, false);
    return WeGame.getInstance().feedback(paramString1, paramString2);
  }
  
  public static String WGGetChannelId()
  {
    return "" + WGPfManager.getInstance().getChannelId();
  }
  
  public static boolean WGGetLocationInfo()
  {
    Logger.d("WGGetLocationInfo called");
    SaveLogHelper.getInstance().reportLog("WGGetLocationInfo", "", false);
    return new Lbs(WeGame.getInstance().getActivity()).getLocationInfo();
  }
  
  public static int WGGetLoginRecord(LoginRet paramLoginRet)
  {
    return LoginManager.getInstance().WGGetLoginRecord(paramLoginRet);
  }
  
  public static void WGGetNearbyPersonInfo()
  {
    Logger.d("called");
    SaveLogHelper.getInstance().reportLog("WGGetNearbyPersonInfo", "", false);
    new Lbs(WeGame.getInstance().getActivity()).getNearbyPlayer();
  }
  
  public static Vector<NoticeInfo> WGGetNoticeData(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("scene", paramString);
    SaveLogHelper.getInstance().reportLog("WGGetNoticeData", localHashMap, false);
    return NoticeManager.getInstance().getNoticeBySceneAndType(eMSG_NOTICETYPE.eMSG_NOTICETYPE_ALL, paramString);
  }
  
  public static int WGGetPaytokenValidTime()
  {
    return SharedPreferencesTool.getInt(WeGame.getInstance().getActivity(), "paytoken_expire_time", 518400);
  }
  
  public static String WGGetPf(String paramString)
  {
    return WGPfManager.getInstance().getPf(paramString);
  }
  
  public static String WGGetPfKey()
  {
    return WGPfManager.getInstance().getPfKey();
  }
  
  public static String WGGetPlatformAPPVersion(EPlatform paramEPlatform)
  {
    return WeGameTools.WGGetPlatformAPPVersion(WeGame.getInstance().getActivity(), paramEPlatform.val());
  }
  
  public static String WGGetRegisterChannelId()
  {
    return "" + WGPfManager.getInstance().getRegChannelId();
  }
  
  public static String WGGetVersion()
  {
    return WeGame.getInstance().WGGetVersion();
  }
  
  public static void WGHideScrollNotice()
  {
    SaveLogHelper.getInstance().reportLog("WGHideScrollNotice", "", false);
    MsdkThreadManager.getInstance().closeScrollNotice();
  }
  
  public static boolean WGIsPlatformInstalled(EPlatform paramEPlatform)
  {
    return WeGameTools.isPlatformInstalled(WeGame.getInstance().getActivity(), paramEPlatform.val());
  }
  
  public static boolean WGIsPlatformSupportApi(EPlatform paramEPlatform)
  {
    return WeGameTools.isPlatformSupportApi(WeGame.getInstance().getActivity(), paramEPlatform.val());
  }
  
  public static void WGJoinQQGroup(String paramString)
  {
    MsdkThreadManager.getInstance().WGJoinQQGroup(paramString);
  }
  
  public static void WGLogPlatformSDKVersion()
  {
    WeGame.getInstance().logPlatformSDKVersion();
  }
  
  public static void WGLogin(EPlatform paramEPlatform)
  {
    LoginManager.getInstance().WGLogin(paramEPlatform);
    HashMap localHashMap = new HashMap();
    if (paramEPlatform == null) {}
    for (paramEPlatform = "null";; paramEPlatform = String.valueOf(paramEPlatform.val()))
    {
      localHashMap.put("plat", paramEPlatform);
      SaveLogHelper.getInstance().reportLog("WGLogin", localHashMap, false);
      return;
    }
  }
  
  public static void WGLoginWithLocalInfo()
  {
    Logger.d("WGLoginWithLocalInfo");
    LoginManager.getInstance().WGLoginWithLocalInfo(true, null);
  }
  
  public static boolean WGLogout()
  {
    LoginTimer.getInstance().stopTimer();
    SaveLogHelper.getInstance().reportLog("WGLogout", "", false);
    WGHideScrollNotice();
    return WeGame.getInstance().logout();
  }
  
  public static boolean WGOpenAmsCenter(String paramString)
  {
    if ((paramString == null) || (paramString.length() > 256))
    {
      Logger.d("params to long, maxLength: 256");
      return false;
    }
    Object localObject2 = ConfigManager.readValueByKey(WeGame.getInstance().getActivity(), "AMS_CENTER_URL");
    for (;;)
    {
      try
      {
        Object localObject1;
        if (T.ckIsEmpty(new URL((String)localObject2).getQuery()))
        {
          localObject1 = (String)localObject2 + "?";
          localObject2 = localObject1;
          if (!T.ckIsEmpty(paramString))
          {
            char c = paramString.charAt(0);
            Logger.d("" + c);
            if ((paramString.charAt(0) == '?') || (paramString.charAt(0) == '&')) {
              localObject2 = (String)localObject1 + paramString.substring(1);
            }
          }
          else
          {
            Logger.d((String)localObject2);
            WGOpenUrl((String)localObject2);
            return true;
          }
        }
        else
        {
          localObject1 = localObject2;
          if (((String)localObject2).endsWith("&")) {
            continue;
          }
          localObject1 = (String)localObject2 + "&";
          continue;
        }
        localObject2 = (String)localObject1 + paramString;
      }
      catch (MalformedURLException paramString)
      {
        Logger.w("this api need a valid url start with http:// or https:// ");
        paramString.printStackTrace();
        return false;
      }
    }
  }
  
  public static void WGOpenUrl(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("url", paramString);
    SaveLogHelper.getInstance().reportLog("WGOpenUrl", localHashMap, false);
    MsdkThreadManager.getInstance().openUrl(paramString);
  }
  
  public static void WGOpenWeiXinDeeplink(String paramString)
  {
    MsdkThreadManager.getInstance().WGOpenWeiXinDeeplink(paramString);
  }
  
  public static boolean WGQueryQQGameFriendsInfo()
  {
    MsdkThreadManager.getInstance().queryQQGameFriendsInfo();
    SaveLogHelper.getInstance().reportLog("WGQueryQQGameFriendsInfo", "", false);
    return true;
  }
  
  public static void WGQueryQQGroupInfo(String paramString1, String paramString2)
  {
    MsdkThreadManager.getInstance().WGQueryQQGroupInfo(paramString1, paramString2);
  }
  
  public static void WGQueryQQGroupKey(String paramString)
  {
    MsdkThreadManager.getInstance().WGQueryQQGroupKey(paramString);
  }
  
  public static boolean WGQueryQQMyInfo()
  {
    MsdkThreadManager.getInstance().queryQQUserInfo();
    SaveLogHelper.getInstance().reportLog("WGQueryQQMyInfo", "", false);
    return true;
  }
  
  public static boolean WGQueryWXGameFriendsInfo()
  {
    MsdkThreadManager.getInstance().queryWXGameFriendsInfo();
    SaveLogHelper.getInstance().reportLog("WGQueryWXGameFriendsInfo", "", false);
    return true;
  }
  
  public static boolean WGQueryWXMyInfo()
  {
    MsdkThreadManager.getInstance().queryWXUserInfo();
    SaveLogHelper.getInstance().reportLog("WGQueryWXMyInfo", "", false);
    return true;
  }
  
  public static void WGRefreshWXToken()
  {
    if (PermissionManage.getInstance().isHavePermission("WGRefreshWXToken"))
    {
      LoginManager.getInstance().WGRefreshWxToken();
      localObject = new HashMap();
      ((HashMap)localObject).put("call", "WGRefreshWXToken");
      SaveLogHelper.getInstance().reportLog("WxRequestMng", (HashMap)localObject, true);
      return;
    }
    Object localObject = new LoginRet(WeGame.WXPLATID, -1, "WGRefreshWXToken function not permission");
    WeGameNotifyGame.getInstance().OnPlatformLoginNotify((LoginRet)localObject);
    Logger.d("WGRefreshWXToken function not permission");
    localObject = new HashMap();
    ((HashMap)localObject).put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WxRequestMng", (HashMap)localObject, true);
  }
  
  public static void WGReportEvent(String paramString1, String paramString2, boolean paramBoolean)
  {
    WeGame.getInstance().WGReportEvent(paramString1, paramString2, paramBoolean);
  }
  
  public static void WGReportEvent(String paramString, HashMap<String, String> paramHashMap, boolean paramBoolean)
  {
    WeGame.getInstance().WGReportEvent(paramString, paramHashMap, paramBoolean);
  }
  
  public static boolean WGSendMessageToWechatGameCenter(String paramString1, String paramString2, String paramString3, MsgBase paramMsgBase, BtnBase paramBtnBase, String paramString4)
  {
    Logger.d("friendOpenId:" + paramString1);
    Logger.d("title:" + paramString2);
    Logger.d("content:" + paramString3);
    Logger.d("pInfo:" + paramMsgBase);
    Logger.d("pButton:" + paramBtnBase);
    Logger.d("msdkExtInfo:" + paramString4);
    if ((T.ckIsEmpty(paramString1)) || (T.ckIsEmpty(paramString2)) || (T.ckIsEmpty(paramString3)) || (paramMsgBase == null) || (paramBtnBase == null))
    {
      Logger.d("friendOpenId, title, content, pInfo, pButton can not be empty");
      return false;
    }
    String str = paramString4;
    if (paramString4 == null) {
      str = "";
    }
    paramString4 = new HashMap();
    paramString4.put("fOpenId", paramString1);
    paramString4.put("title", paramString2);
    paramString4.put("content", paramString3);
    paramString4.put("pInfo", paramMsgBase.toString());
    paramString4.put("pButton", paramBtnBase.toString());
    paramString4.put("msdkExtInfo", str);
    SaveLogHelper.getInstance().reportLog("WGSendMessageToWechatGameCenter", paramString4, false);
    MsdkThreadManager.getInstance().sendMessageToWechatGameCenter(paramString1, paramString2, paramString3, paramMsgBase, paramBtnBase, str);
    return true;
  }
  
  public static void WGSendToQQ(eQQScene paramEQQScene, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt)
  {
    if (paramEQQScene == null)
    {
      paramEQQScene = new ShareRet();
      paramEQQScene.flag = -1;
      paramEQQScene.desc = "scene cann't be empty!";
      paramEQQScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEQQScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToQQ"))
    {
      WeGame.getInstance().WGSendToQQ(paramEQQScene.value, paramString1, paramString2, paramString3, paramString4, paramInt);
      HashMap localHashMap = new HashMap();
      if (paramEQQScene == null) {}
      for (paramEQQScene = "null";; paramEQQScene = String.valueOf(paramEQQScene.val()))
      {
        localHashMap.put("scene", paramEQQScene);
        localHashMap.put("title", paramString1);
        localHashMap.put("desc", paramString2);
        localHashMap.put("url", paramString3);
        localHashMap.put("imgUrl", paramString4);
        localHashMap.put("imgUrlLen", String.valueOf(paramInt));
        SaveLogHelper.getInstance().reportLog("WGSendToQQ", localHashMap, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToQQ function not permission");
    paramEQQScene = new HashMap();
    paramEQQScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToQQ", paramEQQScene, false);
  }
  
  public static boolean WGSendToQQGameFriend(int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7)
  {
    return WGSendToQQGameFriend(paramInt, paramString1, paramString2, paramString3, paramString4, paramString5, paramString6, paramString7, "");
  }
  
  public static boolean WGSendToQQGameFriend(int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8)
  {
    if (T.ckNonEmpty(new String[] { paramString1, paramString2, paramString3, paramString4, paramString5 }))
    {
      paramString1 = new ShareRet();
      paramString1.flag = -1;
      paramString1.desc = "friendOpenId, title, summary, targetUrl, imageUrl can not be empty!";
      paramString1.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramString1);
      Logger.w("friendOpenId, title, summary, targetUrl, imageUrl CAN NOT BE EMPTY");
      return false;
    }
    String str = paramString8;
    if (paramString8 == null) {
      str = "";
    }
    paramString8 = new HashMap();
    paramString8.put("act", String.valueOf(paramInt));
    paramString8.put("fOpenId", paramString1);
    paramString8.put("title", paramString2);
    paramString8.put("summary", paramString3);
    paramString8.put("tUrl", paramString4);
    paramString8.put("imageUrl", paramString5);
    paramString8.put("preText", paramString6);
    paramString8.put("gameTag", paramString7);
    paramString8.put("msdkExtInfo", str);
    SaveLogHelper.getInstance().reportLog("WGSendToQQGameFriend", paramString8, false);
    MsdkThreadManager.getInstance().sendToQQGameFriend(paramInt, paramString1, paramString2, paramString3, paramString4, paramString5, paramString6, paramString7, str);
    return true;
  }
  
  public static void WGSendToQQWithMusic(eQQScene paramEQQScene, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    if (paramEQQScene == null)
    {
      paramEQQScene = new ShareRet();
      paramEQQScene.flag = -1;
      paramEQQScene.desc = "scene cann't be empty!";
      paramEQQScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEQQScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToQQ"))
    {
      WeGame.getInstance().WGSendToQQWithMusic(paramEQQScene, paramString1, paramString2, paramString3, paramString4, paramString5);
      HashMap localHashMap = new HashMap();
      if (paramEQQScene == null) {}
      for (paramEQQScene = "null";; paramEQQScene = String.valueOf(paramEQQScene.val()))
      {
        localHashMap.put("scene", paramEQQScene);
        localHashMap.put("title", paramString1);
        localHashMap.put("desc", paramString2);
        localHashMap.put("musicUrl", paramString3);
        localHashMap.put("musicDataUrl", paramString4);
        localHashMap.put("imgUrl", paramString5);
        SaveLogHelper.getInstance().reportLog("WGSendToQQWithMusic", localHashMap, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToQQWithMusic function not permission");
    paramEQQScene = new HashMap();
    paramEQQScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToQQWithMusic", paramEQQScene, false);
  }
  
  public static void WGSendToQQWithPhoto(eQQScene paramEQQScene, String paramString)
  {
    if (paramEQQScene == null)
    {
      paramEQQScene = new ShareRet();
      paramEQQScene.flag = -1;
      paramEQQScene.desc = "scene cann't be empty!";
      paramEQQScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEQQScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    WeGame.getInstance().WGSendToQQWithPhoto(paramEQQScene.value, paramString);
    HashMap localHashMap = new HashMap();
    if (paramEQQScene == null) {}
    for (paramEQQScene = "null";; paramEQQScene = String.valueOf(paramEQQScene.val()))
    {
      localHashMap.put("scene", paramEQQScene);
      localHashMap.put("imgFilePath", paramString);
      SaveLogHelper.getInstance().reportLog("WGSendToQQWithPhoto", localHashMap, false);
      return;
    }
  }
  
  public static boolean WGSendToWXGameFriend(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6)
  {
    return WGSendToWXGameFriend(paramString1, paramString2, paramString3, paramString4, paramString5, paramString6, "");
  }
  
  public static boolean WGSendToWXGameFriend(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7)
  {
    Object localObject = new HashMap();
    ((HashMap)localObject).put("fOpenId", paramString1);
    ((HashMap)localObject).put("title", paramString2);
    ((HashMap)localObject).put("desc", paramString3);
    ((HashMap)localObject).put("messageExt", paramString4);
    ((HashMap)localObject).put("mediaTagName", paramString5);
    ((HashMap)localObject).put("thumbMediaId", paramString6);
    ((HashMap)localObject).put("msdkExtInfo", paramString7);
    SaveLogHelper.getInstance().reportLog("WGSendToWXGameFriend", (HashMap)localObject, false);
    if (T.ckNonEmpty(new String[] { paramString1, paramString2, paramString3 }))
    {
      Logger.w("fopenid, title, description  CAN NOT BE EMPTY");
      return false;
    }
    localObject = paramString7;
    if (paramString7 == null) {
      localObject = "";
    }
    MsdkThreadManager.getInstance().sendToWXGameFriend(paramString1, paramString2, paramString3, paramString4, paramString5, paramString6, (String)localObject);
    return true;
  }
  
  public static void WGSendToWeixin(String paramString1, String paramString2, String paramString3, byte[] paramArrayOfByte, int paramInt, String paramString4)
  {
    if (PermissionManage.getInstance().isHavePermission("WGSendToWeixin"))
    {
      WeGame.getInstance().WGSendToWeixin(paramString1, paramString2, paramString3, paramArrayOfByte, paramInt, paramString4);
      HashMap localHashMap = new HashMap();
      localHashMap.put("title", paramString1);
      localHashMap.put("desc", paramString2);
      localHashMap.put("messageExt", paramString4);
      localHashMap.put("mediaTagName", paramString3);
      localHashMap.put("thumbData", String.valueOf(paramArrayOfByte));
      SaveLogHelper.getInstance().reportLog("WGSendToWeixin", localHashMap, false);
      return;
    }
    Logger.d(TAG, "WGSendToWeixin function not permission");
    paramString1 = new HashMap();
    paramString1.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToWeixin", paramString1, false);
  }
  
  public static void WGSendToWeixinWithMusic(eWechatScene paramEWechatScene, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, byte[] paramArrayOfByte, int paramInt, String paramString6, String paramString7)
  {
    if (paramEWechatScene == null)
    {
      paramEWechatScene = new ShareRet();
      paramEWechatScene.flag = -1;
      paramEWechatScene.desc = "scene cann't be empty!";
      paramEWechatScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToWeixin"))
    {
      WeGame.getInstance().WGSendToWeixinWithMusic(paramEWechatScene, paramString1, paramString2, paramString3, paramString4, paramString5, paramArrayOfByte, paramInt, paramString6, paramString7);
      paramArrayOfByte = new HashMap();
      if (paramEWechatScene == null) {}
      for (paramEWechatScene = "null";; paramEWechatScene = String.valueOf(paramEWechatScene.val()))
      {
        paramArrayOfByte.put("scene", paramEWechatScene);
        paramArrayOfByte.put("title", paramString1);
        paramArrayOfByte.put("desc", paramString2);
        paramArrayOfByte.put("musicUrl", paramString3);
        paramArrayOfByte.put("musicDataUrl", paramString4);
        paramArrayOfByte.put("mediaTagName", paramString5);
        paramArrayOfByte.put("imgDataLen", String.valueOf(paramInt));
        paramArrayOfByte.put("mediaExt", paramString6);
        paramArrayOfByte.put("mediaAction", paramString7);
        SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithMusic", paramArrayOfByte, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToWeixinWithMusic function not permission");
    paramEWechatScene = new HashMap();
    paramEWechatScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithMusic", paramEWechatScene, false);
  }
  
  public static void WGSendToWeixinWithPhoto(eWechatScene paramEWechatScene, String paramString, byte[] paramArrayOfByte, int paramInt)
  {
    if (paramEWechatScene == null)
    {
      paramEWechatScene = new ShareRet();
      paramEWechatScene.flag = -1;
      paramEWechatScene.desc = "scene cann't be empty!";
      paramEWechatScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToWeixinWithPhoto"))
    {
      WeGame.getInstance().WGSendToWeixinWithPhoto(paramEWechatScene.value, paramString, paramArrayOfByte, paramInt);
      paramArrayOfByte = new HashMap();
      if (paramEWechatScene == null) {}
      for (paramEWechatScene = "null";; paramEWechatScene = String.valueOf(paramEWechatScene.val()))
      {
        paramArrayOfByte.put("scene", paramEWechatScene);
        paramArrayOfByte.put("mediaTagName", paramString);
        paramArrayOfByte.put("imgDataLen", String.valueOf(paramInt));
        SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithPhoto", paramArrayOfByte, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToWeixinWithPhoto function not permission");
    paramEWechatScene = new HashMap();
    paramEWechatScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithPhoto", paramEWechatScene, false);
  }
  
  public static void WGSendToWeixinWithPhoto(eWechatScene paramEWechatScene, String paramString1, byte[] paramArrayOfByte, int paramInt, String paramString2, String paramString3)
  {
    if (paramEWechatScene == null)
    {
      paramEWechatScene = new ShareRet();
      paramEWechatScene.flag = -1;
      paramEWechatScene.desc = "scene cann't be empty!";
      paramEWechatScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToWeixinWithPhoto"))
    {
      WeGame.getInstance().WGSendToWeixinWithPhoto(paramEWechatScene.value, paramString1, paramArrayOfByte, paramInt, paramString2, paramString3);
      paramArrayOfByte = new HashMap();
      if (paramEWechatScene == null) {}
      for (paramEWechatScene = "null";; paramEWechatScene = String.valueOf(paramEWechatScene.val()))
      {
        paramArrayOfByte.put("scene", paramEWechatScene);
        paramArrayOfByte.put("messageExt", paramString2);
        paramArrayOfByte.put("mediaTagName", paramString1);
        paramArrayOfByte.put("imgDataLen", String.valueOf(paramInt));
        paramArrayOfByte.put("mediaAction", paramString3);
        SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithPhoto", paramArrayOfByte, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToWeixinWithPhoto function not permission");
    paramEWechatScene = new HashMap();
    paramEWechatScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithPhoto", paramEWechatScene, false);
  }
  
  public static void WGSendToWeixinWithPhotoPath(eWechatScene paramEWechatScene, String paramString1, String paramString2, String paramString3, String paramString4)
  {
    if (paramEWechatScene == null)
    {
      paramEWechatScene = new ShareRet();
      paramEWechatScene.flag = -1;
      paramEWechatScene.desc = "scene cann't be empty!";
      paramEWechatScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToWeixinWithPhoto"))
    {
      WeGame.getInstance().WGSendToWeixinWithPhotoPath(paramEWechatScene.value, paramString1, paramString2, paramString3, paramString4);
      HashMap localHashMap = new HashMap();
      if (paramEWechatScene == null) {}
      for (paramEWechatScene = "null";; paramEWechatScene = String.valueOf(paramEWechatScene.val()))
      {
        localHashMap.put("scene", paramEWechatScene);
        localHashMap.put("messageExt", paramString3);
        localHashMap.put("mediaTagName", paramString1);
        localHashMap.put("imgPath", String.valueOf(paramString2));
        localHashMap.put("mediaAction", paramString4);
        SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithPhotoPath", localHashMap, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToWeixinWithPhoto function not permission");
    paramEWechatScene = new HashMap();
    paramEWechatScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithPhotoPath", paramEWechatScene, false);
  }
  
  public static void WGSendToWeixinWithUrl(eWechatScene paramEWechatScene, String paramString1, String paramString2, String paramString3, String paramString4, byte[] paramArrayOfByte, int paramInt, String paramString5)
  {
    if (paramEWechatScene == null)
    {
      paramEWechatScene = new ShareRet();
      paramEWechatScene.flag = -1;
      paramEWechatScene.desc = "scene cann't be empty!";
      paramEWechatScene.platform = WeGame.QQPLATID;
      WeGameNotifyGame.getInstance().OnShareNotify(paramEWechatScene);
      Logger.e("scene cann't be empty!");
      return;
    }
    if (PermissionManage.getInstance().isHavePermission("WGSendToWeixinWithPhoto"))
    {
      WeGame.getInstance().WGSendToWeixinWithUrl(paramEWechatScene.value, paramString1, paramString2, paramString3, paramString4, paramArrayOfByte, paramInt, paramString5);
      paramString1 = new HashMap();
      if (paramEWechatScene == null) {}
      for (paramEWechatScene = "null";; paramEWechatScene = String.valueOf(paramEWechatScene.val()))
      {
        paramString1.put("scene", paramEWechatScene);
        paramString1.put("mediaTagName", paramString4);
        paramString1.put("thumbImgData", String.valueOf(paramArrayOfByte));
        paramString1.put("messageExt", paramString5);
        SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithUrl", paramString1, false);
        return;
      }
    }
    Logger.d(TAG, "WGSendToWeixinWithPhoto function not permission");
    paramEWechatScene = new HashMap();
    paramEWechatScene.put("result", "no permission");
    SaveLogHelper.getInstance().reportLog("WGSendToWeixinWithUrl", paramEWechatScene, false);
  }
  
  public static void WGSetADObserver(WGADObserver paramWGADObserver)
  {
    WeGame.getInstance().setADObserver(paramWGADObserver);
  }
  
  public static void WGSetGroupObserver(WGGroupObserver paramWGGroupObserver)
  {
    WeGame.getInstance().setGroupObserver(paramWGGroupObserver);
  }
  
  public static void WGSetObserver(WGPlatformObserver paramWGPlatformObserver)
  {
    WeGame.getInstance().setObserver(paramWGPlatformObserver);
  }
  
  public static void WGSetPermission(int paramInt)
  {
    WeGame.getInstance().WGSetPermission(paramInt);
    HashMap localHashMap = new HashMap();
    localHashMap.put("permissions", "" + paramInt);
    SaveLogHelper.getInstance().reportLog("WGSetPermission", localHashMap, false);
  }
  
  public static void WGSetSaveUpdateObserver(WGSaveUpdateObserver paramWGSaveUpdateObserver)
  {
    Logger.d("WGSetSaveUpdateObserver");
    ((WGSaveUpdateObserverProxy)WGSaveUpdateObserverProxy.gDefault.get()).setmJavaObserver(paramWGSaveUpdateObserver);
  }
  
  public static void WGShowAD(eADType paramEADType)
  {
    HashMap localHashMap = new HashMap();
    if (paramEADType == null) {}
    for (String str = "null";; str = String.valueOf(paramEADType.val()))
    {
      localHashMap.put("scene", str);
      SaveLogHelper.getInstance().reportLog("WGShowAD", localHashMap, false);
      MsdkThreadManager.getInstance().openAD(paramEADType);
      return;
    }
  }
  
  public static void WGShowNotice(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("scene", paramString);
    SaveLogHelper.getInstance().reportLog("WGShowNotice", localHashMap, false);
    MsdkThreadManager.getInstance().showNoticeByScene(eMSG_NOTICETYPE.eMSG_NOTICETYPE_ALL, paramString);
  }
  
  public static void WGStartSaveUpdate(boolean paramBoolean)
  {
    Logger.d("WGStartSaveUpdate");
    AutoUpdateManager.startSelfUpdate(paramBoolean);
  }
  
  public static boolean WGSwitchUser(boolean paramBoolean)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("flag", String.valueOf(paramBoolean));
    SaveLogHelper.getInstance().reportLog("WGSwitchUser", localHashMap, false);
    return LoginManager.getInstance().switchUser(paramBoolean, null);
  }
  
  public static void WGTestSpeed(ArrayList<String> paramArrayList)
  {
    WeGame.getInstance().testSpeed(paramArrayList);
  }
  
  public static void WGUnbindQQGroup(String paramString1, String paramString2)
  {
    MsdkThreadManager.getInstance().WGUnbindQQGroup(paramString1, paramString2);
  }
  
  public static void handleCallback(Intent paramIntent)
  {
    SaveLogHelper.getInstance().reportLog("handleCallback", paramIntent, false);
    WeGame.getInstance().handleCallback(paramIntent);
  }
  
  public static void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    Logger.d("WGOnActivityResult called");
    WeGame.getInstance().onActivityResult(paramInt1, paramInt2, paramIntent);
  }
  
  public static void onDestory(Activity paramActivity)
  {
    Logger.d("WGOnDestory");
    WeGame.getInstance().ReportGameTime(4);
    PushSwitchMng.getInstance().disableInitXG();
    SaveLogHelper.getInstance().reportLog("onDestory", "", false);
    ADManager.getInstance().closeADDialog(eADType.Type_Pause);
    ADManager.getInstance().closeADDialog(eADType.Type_Stop);
    WeGame.getInstance().onDestory(paramActivity);
    AutoUpdateManager.onDestory(paramActivity);
  }
  
  public static void onPause()
  {
    Logger.d("WGOnPause");
    SaveLogHelper.getInstance().reportLog("onPause", "", false);
    SharedPreferencesTool.putBoolean(WeGame.getInstance().getActivity(), "ON_PAUSE_CALLED", true);
    NoticeManager.getInstance().onPause();
    ADManager.getInstance().onPause();
    ((MsdkStat)MsdkStat.gDefault.get()).onPause();
    TaskManager.onPause();
  }
  
  public static void onRestart()
  {
    Logger.d("onRestart");
    WeGame.getInstance().ReportGameTime(2);
    LoginTimer.getInstance().startTimer();
  }
  
  public static void onResume()
  {
    Logger.d("WeGame WGPlatform.onResume", "WGOnResume");
    SaveLogHelper.getInstance().reportLog("onResume", "", false);
    SharedPreferencesTool.putBoolean(WeGame.getInstance().getActivity(), "ON_RESUME_CALLED", true);
    NoticeManager.getInstance().onResume();
    ADManager.getInstance().onResume();
    ((WhiteListMng)WhiteListMng.gDefault.get()).onResume();
    AutoUpdateManager.onResume(WeGame.getInstance().getActivity());
    ((MsdkStat)MsdkStat.gDefault.get()).onResume();
    TaskManager.onResume();
    LoginTimer.getInstance().onResume();
  }
  
  public static void onStop()
  {
    Logger.d("onStop");
    WeGame.getInstance().ReportGameTime(3);
    LoginTimer.getInstance().stopTimer();
  }
  
  public static boolean wakeUpFromHall(Intent paramIntent)
  {
    return WeGame.getInstance().wakeUpFromHall(paramIntent);
  }
}
