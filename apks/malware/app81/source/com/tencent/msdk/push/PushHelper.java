package com.tencent.msdk.push;

import android.content.Context;
import android.os.Environment;
import com.tencent.beacon.event.UserAction;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.push.db.PushClientDbModel;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class PushHelper
{
  private static String mMatId = "";
  private static long sMatIdTimeOut = 10000L;
  
  public PushHelper() {}
  
  public static Context getContext()
  {
    Context localContext = null;
    if (HttpPushService.sHttpPushServiceContext != null) {
      localContext = HttpPushService.sHttpPushServiceContext;
    }
    while (WeGame.getInstance().getActivity() == null) {
      return localContext;
    }
    return WeGame.getInstance().getActivity();
  }
  
  public static String getTestValue(String paramString)
  {
    if (Environment.getExternalStorageState() == "mounted")
    {
      Object localObject = new File("msdk_push_test_config.ini");
      try
      {
        localObject = new FileInputStream((File)localObject);
        Properties localProperties = new Properties();
        localProperties.load((InputStream)localObject);
        localObject = localProperties.getProperty(paramString, "");
        if (T.ckIsEmpty((String)localObject)) {
          Logger.e("No " + paramString + " Configed");
        }
        return localObject;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
        return "";
      }
    }
    return "";
  }
  
  public static void reqMatid(MatIdCallback paramMatIdCallback)
  {
    String str = PushClientDbModel.getMatId();
    if (!T.ckIsEmpty(str))
    {
      paramMatIdCallback.onSuccess(str);
      return;
    }
    new Thread()
    {
      public void run()
      {
        long l = System.currentTimeMillis();
        while (System.currentTimeMillis() < PushHelper.sMatIdTimeOut + l) {
          try
          {
            PushHelper.access$102(UserAction.getQIMEI());
            String str = ConfigManager.getConfigedMatId();
            if (!T.ckIsEmpty(str)) {
              PushHelper.access$102(str);
            }
            Logger.d("matid: " + PushHelper.mMatId);
            if (!T.ckIsEmpty(PushHelper.mMatId))
            {
              this.val$callback.onSuccess(PushHelper.mMatId);
              return;
            }
            try
            {
              sleep(1000L);
            }
            catch (InterruptedException localInterruptedException)
            {
              localInterruptedException.printStackTrace();
            }
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
          }
        }
        this.val$callback.onTimeout();
      }
    }.start();
  }
  
  public static abstract interface MatIdCallback
  {
    public abstract void onSuccess(String paramString);
    
    public abstract void onTimeout();
  }
}
