package com.tencent.msdk.push;

import android.content.Context;
import com.tencent.android.tpush.XGIOperateCallback;
import com.tencent.android.tpush.XGPush4Msdk;
import com.tencent.android.tpush.XGPushConfig;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.control.SwitcherManager;
import com.tencent.msdk.locallog.SaveLogHelper;
import com.tencent.msdk.stat.BeaconHelper;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import com.tencent.stat.StatAccount;
import com.tencent.stat.StatService;
import java.util.HashMap;

public class PushSwitchMng
{
  private static final int DEFAULT_XG_PUSH_PORT = 8080;
  private static final String DEFAULT_XG_PUSH_SERVER = "183.232.93.168";
  private static volatile PushSwitchMng instance = null;
  private Context mAppContext;
  private boolean mIsInitXG = false;
  private boolean mIsTestEnv;
  private String mQqAppId;
  private String mQqAppKey = "";
  private String mWxAppId = "";
  
  public PushSwitchMng() {}
  
  private void bindXGUser(final int paramInt, String paramString)
  {
    Logger.d("register user bind for xgpush, openid:" + paramString);
    initXG();
    XGPush4Msdk.registerPush(this.mAppContext, paramString, new XGIOperateCallback()
    {
      public void onFail(Object paramAnonymousObject, int paramAnonymousInt, String paramAnonymousString)
      {
        Logger.w("register user failed, errCode:" + paramAnonymousInt + ", msg:" + paramAnonymousString);
        paramAnonymousObject = new HashMap();
        paramAnonymousObject.put("msg", paramAnonymousString);
        paramAnonymousObject.put("errcode", "" + paramAnonymousInt);
        SaveLogHelper.getInstance().reportLog("bindXGUser", paramAnonymousObject, true);
        paramAnonymousObject = new HashMap();
        paramAnonymousObject.put("param_FailCode", "" + BeaconHelper.getXGErrCode(paramAnonymousInt));
        paramAnonymousObject.put("msdk_logic_error", "0");
        BeaconHelper.reportMSDKEvent("regXGUser", 0L, false, paramAnonymousObject, true);
      }
      
      public void onSuccess(Object paramAnonymousObject, int paramAnonymousInt)
      {
        Logger.d("register user success, token:" + paramAnonymousObject);
        if (paramInt == WeGame.WXPLATID)
        {
          XGPush4Msdk.deleteTag(PushSwitchMng.this.mAppContext, "QQ");
          XGPush4Msdk.setTag(PushSwitchMng.this.mAppContext, "WX");
        }
        while (paramInt != WeGame.QQPLATID) {
          return;
        }
        XGPush4Msdk.deleteTag(PushSwitchMng.this.mAppContext, "WX");
        XGPush4Msdk.setTag(PushSwitchMng.this.mAppContext, "QQ");
      }
    });
  }
  
  public static PushSwitchMng getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new PushSwitchMng();
      }
      return instance;
    }
    finally {}
  }
  
  private void initXG()
  {
    if (this.mIsInitXG)
    {
      Logger.d("initXG have finished, no need again.");
      return;
    }
    XGPush4Msdk.setDebugServerInfo(this.mAppContext, null, 8080);
    if (this.mIsTestEnv) {
      XGPushConfig.enableDebug(this.mAppContext, true);
    }
    Object localObject = ConfigManager.readValueByKey(this.mAppContext, ConfigManager.configFileName, "XG_PUSH_SERVER");
    String str;
    int j;
    int i;
    if (!T.ckIsEmpty((String)localObject))
    {
      localObject = ((String)localObject).split(":");
      if ((localObject != null) && (localObject.length == 2))
      {
        str = localObject[0];
        localObject = localObject[1];
        j = 8080;
        i = j;
        if (T.ckIsEmpty((String)localObject)) {}
      }
    }
    for (;;)
    {
      try
      {
        i = Integer.valueOf((String)localObject).intValue();
        localObject = str;
        if (T.ckIsEmpty(str)) {
          localObject = "183.232.93.168";
        }
        Logger.d("xgpush server:" + (String)localObject + ", port:" + i);
        XGPush4Msdk.setDebugServerInfo(this.mAppContext, (String)localObject, i);
        long l1 = 0L;
        try
        {
          long l2 = Long.valueOf(this.mQqAppId).longValue();
          l1 = l2;
        }
        catch (NumberFormatException localNumberFormatException2)
        {
          Logger.e("qqAppId can't revert to Long, it's value:" + 0L);
          continue;
        }
        Logger.d("register init xgId:" + l1);
        XGPush4Msdk.setQQAppId(this.mAppContext, l1);
        XGPush4Msdk.setQQAppKey(this.mAppContext, this.mQqAppKey);
        this.mIsInitXG = true;
        return;
      }
      catch (NumberFormatException localNumberFormatException1)
      {
        Logger.e("xgPort can't revert to Integer, it's value:" + 8080);
        i = j;
        continue;
      }
      Logger.d("xgpush are using xianwang environment");
      continue;
      Logger.d("xgpush are using xianwang environment");
    }
  }
  
  private void registerXGDeviceWhenInit()
  {
    Logger.d("register device for xgpush");
    initXG();
    Logger.d("register device but no unregister");
    XGPush4Msdk.registerPush(this.mAppContext, null, new XGIOperateCallback()
    {
      public void onFail(Object paramAnonymousObject, int paramAnonymousInt, String paramAnonymousString)
      {
        Logger.w("register device failed, errCode:" + paramAnonymousInt + ", msg:" + paramAnonymousString);
        paramAnonymousObject = new HashMap();
        paramAnonymousObject.put("msg", paramAnonymousString);
        paramAnonymousObject.put("errcode", "" + paramAnonymousInt);
        SaveLogHelper.getInstance().reportLog("bindXGDevice", paramAnonymousObject, true);
        paramAnonymousObject = new HashMap();
        paramAnonymousObject.put("param_FailCode", "" + BeaconHelper.getXGErrCode(paramAnonymousInt));
        paramAnonymousObject.put("msdk_logic_error", "0");
        BeaconHelper.reportMSDKEvent("regXGDev", 0L, false, paramAnonymousObject, true);
      }
      
      public void onSuccess(Object paramAnonymousObject, int paramAnonymousInt)
      {
        Logger.d("register device success, token:" + paramAnonymousObject);
      }
    });
  }
  
  private void reportXGPush(int paramInt, String paramString)
  {
    Logger.d("XG PUSH reporting!");
    paramString = new StatAccount(paramString);
    if (paramInt == WeGame.WXPLATID)
    {
      paramString.setAccountType(4);
      paramString.setExt(this.mWxAppId);
    }
    for (;;)
    {
      StatService.reportAccount(this.mAppContext, paramString);
      StatService.commitEvents(this.mAppContext, -1);
      return;
      if (paramInt == WeGame.QQPLATID)
      {
        paramString.setAccountType(3);
        paramString.setExt(this.mQqAppId);
      }
    }
  }
  
  public void cancelXGPush()
  {
    Logger.d("cancel xg push");
    if ((this.mAppContext != null) && (ConfigManager.needPush(this.mAppContext))) {
      XGPush4Msdk.unregisterPush(this.mAppContext, null);
    }
  }
  
  public void disableInitXG()
  {
    this.mIsInitXG = false;
  }
  
  public void init(Context paramContext, String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    this.mIsTestEnv = paramBoolean;
    this.mAppContext = paramContext.getApplicationContext();
    this.mQqAppId = paramString1;
    this.mQqAppKey = paramString2;
    this.mWxAppId = paramString3;
  }
  
  public void registerAppPush()
  {
    Logger.d("PUSH: " + ConfigManager.needPush(this.mAppContext));
    if (ConfigManager.needPush(this.mAppContext))
    {
      Logger.d("PUSH opened!");
      if (SwitcherManager.getInstance().isUseMsdkPush())
      {
        Logger.d("register device for msdkpush");
        ((PushManager)PushManager.gDefault.get()).registerAppOnce(this.mAppContext, this.mQqAppId, this.mWxAppId);
        return;
      }
      registerXGDeviceWhenInit();
      return;
    }
    Logger.d("PUSH closed!");
  }
  
  public void registerAppUserPush(int paramInt1, int paramInt2, String paramString, boolean paramBoolean)
  {
    Logger.d("PUSH: " + ConfigManager.needPush(this.mAppContext));
    if (ConfigManager.needPush(this.mAppContext))
    {
      if (SwitcherManager.getInstance().isUseMsdkPush())
      {
        Logger.d("register user bind for msdkpush");
        if (paramInt2 == WeGame.QQPLATID) {
          ((PushManager)PushManager.gDefault.get()).registerAppUserOnce(WeGame.getInstance().getActivity(), WeGame.getInstance().qq_appid, paramString);
        }
      }
      while ((paramInt1 != 0) && ((paramInt1 != 2005) || (paramBoolean)))
      {
        do
        {
          return;
        } while (paramInt2 != WeGame.WXPLATID);
        ((PushManager)PushManager.gDefault.get()).registerAppUserOnce(WeGame.getInstance().getActivity(), WeGame.getInstance().wx_appid, paramString);
        return;
      }
      bindXGUser(paramInt2, paramString);
      reportXGPush(paramInt2, paramString);
      return;
    }
    Logger.d("PUSH Closed!");
  }
}
