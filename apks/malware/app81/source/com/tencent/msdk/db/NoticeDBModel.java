package com.tencent.msdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.notice.NoticeInfo;
import com.tencent.msdk.notice.eMSG_CONTENTTYPE;
import com.tencent.msdk.notice.eMSG_NOTICETYPE;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.util.Vector;

public class NoticeDBModel
  extends BaseDBModel
{
  private static String NOTICE_SQL_LIMIT = "20";
  public static final String TBL_NAME = "notice_info";
  public static String col_app_id;
  public static String col_content_type;
  public static String col_end_time;
  public static String col_horizontal_img_hash;
  public static String col_horizontal_img_url;
  public static String col_msg_content;
  public static String col_msg_id = "msg_id";
  public static String col_msg_order;
  public static String col_msg_scene;
  public static String col_msg_title;
  public static String col_msg_type;
  public static String col_msg_url;
  public static String col_open_id;
  public static String col_start_time;
  public static String col_update_time;
  public static String col_vertical_img_hash = "v_img_hash";
  public static String col_vertical_img_url;
  public static String col_web_url = "web_url";
  private DbManager helper = (DbManager)DbManager.gDefault.get();
  
  static
  {
    col_app_id = "app_id";
    col_open_id = "open_id";
    col_msg_url = "msg_url";
    col_msg_type = "msg_type";
    col_msg_scene = "msg_scene";
    col_start_time = "start_time";
    col_end_time = "end_time";
    col_update_time = "update_time";
    col_content_type = "content_type";
    col_msg_order = "msg_order";
    col_msg_content = "msg_content";
    col_msg_title = "msg_title";
    col_horizontal_img_url = "h_img_url";
    col_horizontal_img_hash = "h_img_hash";
    col_vertical_img_url = "v_img_url";
  }
  
  public NoticeDBModel() {}
  
  private NoticeInfo getColumnData(Cursor paramCursor)
  {
    NoticeInfo localNoticeInfo = new NoticeInfo();
    localNoticeInfo.mNoticeId = getStringByName(paramCursor, col_msg_id);
    localNoticeInfo.mAppId = getStringByName(paramCursor, col_app_id);
    localNoticeInfo.mOpenId = getStringByName(paramCursor, col_open_id);
    localNoticeInfo.mNoticeUrl = getStringByName(paramCursor, col_msg_url);
    localNoticeInfo.mNoticeType = eMSG_NOTICETYPE.getEnum(getIntByName(paramCursor, col_msg_type));
    localNoticeInfo.mNoticeScene = getStringByName(paramCursor, col_msg_scene);
    localNoticeInfo.mNoticeStartTime = getStringByName(paramCursor, col_start_time);
    localNoticeInfo.mNoticeEndTime = getStringByName(paramCursor, col_end_time);
    localNoticeInfo.mNoticeUpdateTime = getStringByName(paramCursor, col_update_time);
    localNoticeInfo.mNoticeContentType = eMSG_CONTENTTYPE.getEnum(getIntByName(paramCursor, col_content_type));
    localNoticeInfo.mNoticeTitle = getStringByName(paramCursor, col_msg_title);
    localNoticeInfo.mNoticeContent = getStringByName(paramCursor, col_msg_content);
    localNoticeInfo.mNoticeHImgUrl = getStringByName(paramCursor, col_horizontal_img_url);
    localNoticeInfo.mNoticeHImgHash = getStringByName(paramCursor, col_horizontal_img_hash);
    localNoticeInfo.mNoticeVImgUrl = getStringByName(paramCursor, col_vertical_img_url);
    localNoticeInfo.mNoticeVImgHash = getStringByName(paramCursor, col_vertical_img_hash);
    localNoticeInfo.mNoticeContentWebUrl = getStringByName(paramCursor, col_web_url);
    localNoticeInfo.mNoticeOrder = getStringByName(paramCursor, col_msg_order);
    return localNoticeInfo;
  }
  
  public static String getCreateTableSql()
  {
    String str = "" + "CREATE TABLE IF NOT EXISTS [notice_info] (";
    str = str + "[" + col_msg_id + "] NVARCHAR(32)  PRIMARY KEY NOT NULL,";
    str = str + "[" + col_app_id + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_open_id + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_msg_url + "] TEXT  NULL,";
    str = str + "[" + col_msg_type + "] VARCHAR(16)  NULL,";
    str = str + "[" + col_msg_scene + "] VARCHAR(16)  NULL,";
    str = str + "[" + col_start_time + "] TIMESTAMP  NULL,";
    str = str + "[" + col_end_time + "] TIMESTAMP  NULL,";
    str = str + "[" + col_update_time + "] TIMESTAMP  NULL,";
    str = str + "[" + col_content_type + "] VARCHAR(16)  NULL,";
    str = str + "[" + col_msg_order + "] VARCHAR(16)  NULL,";
    str = str + "[" + col_msg_content + "] TEXT  NULL,";
    str = str + "[" + col_msg_title + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_horizontal_img_url + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_horizontal_img_hash + "] VARCHAR(64)  NULL,";
    str = str + "[" + col_vertical_img_url + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_vertical_img_hash + "] VARCHAR(64)  NULL,";
    str = str + "[" + col_web_url + "] VARCHAR(256)  NULL";
    return str + ")";
  }
  
  public static String getDropTableSql()
  {
    return "DROP TABLE IF EXISTS notice_info";
  }
  
  public int deleteNoticeByMsgId(String paramString)
  {
    if (T.ckIsEmpty(paramString))
    {
      Logger.w("msg_id is null");
      return 0;
    }
    String str;
    String[] arrayOfString;
    int i;
    synchronized (this.helper)
    {
      str = " `" + col_msg_id + "` = ? ";
      arrayOfString = new String[1];
      arrayOfString[0] = paramString;
    }
    return 0;
  }
  
  public int deleteNoticeByTime(String paramString)
  {
    if (T.ckIsEmpty(paramString))
    {
      Logger.w("currentTime is null");
      return 0;
    }
    String str;
    String[] arrayOfString;
    int i;
    synchronized (this.helper)
    {
      str = " " + col_end_time + " < ? ";
      arrayOfString = new String[1];
      arrayOfString[0] = paramString;
    }
    return 0;
  }
  
  public int deleteNoticeInDBByMsgList(String paramString)
  {
    if (T.ckIsEmpty(paramString))
    {
      Logger.d("msgList is null");
      return 0;
    }
    paramString = paramString.replaceAll(" ", "");
    if (paramString.endsWith(","))
    {
      Logger.d("sql para is end with ,msgList:" + paramString);
      paramString = paramString.substring(0, paramString.length() - 1);
      Logger.d("sql para after check ,msgList:" + paramString);
    }
    for (;;)
    {
      int i;
      synchronized (this.helper)
      {
        paramString = " " + col_msg_id + " in (" + paramString + ") ";
      }
      Logger.d("msgList:" + paramString);
    }
    return 0;
  }
  
  public String getLastUpdateTimeByAppIdAndOpenId(String paramString1, String paramString2)
  {
    DbManager localDbManager = this.helper;
    String str1 = "0";
    String str2;
    String[] arrayOfString;
    try
    {
      Object localObject = " `" + col_update_time + "` DESC ";
      str2 = " `" + col_app_id + "` = ? AND " + " `" + col_open_id + "` = ?";
      arrayOfString = new String[2];
      arrayOfString[0] = paramString1;
      arrayOfString[1] = paramString2;
      paramString2 = str1;
      try
      {
        localObject = this.helper.getReadableDatabase().query("notice_info", null, str2, arrayOfString, null, null, (String)localObject, null);
        paramString1 = str1;
        if (localObject != null)
        {
          paramString1 = str1;
          paramString2 = str1;
          if (((Cursor)localObject).getCount() > 0)
          {
            paramString2 = str1;
            ((Cursor)localObject).moveToFirst();
            paramString2 = str1;
            paramString1 = getStringByName((Cursor)localObject, col_update_time);
          }
        }
        paramString2 = paramString1;
        ((Cursor)localObject).close();
      }
      catch (Exception paramString1)
      {
        for (;;)
        {
          Logger.d("getLastUpdateTimeByAppIdAndOpenId cause exception. Selection: " + str2 + arrayOfString);
          this.helper.close();
          paramString1.printStackTrace();
          paramString1 = paramString2;
        }
      }
      return paramString1;
    }
    finally {}
  }
  
  public Vector<NoticeInfo> getNoticeRecordBySceneAndType(String paramString1, String paramString2, eMSG_NOTICETYPE paramEMSG_NOTICETYPE, String paramString3)
  {
    String str1 = String.valueOf(System.currentTimeMillis() / 1000L);
    Vector localVector = new Vector();
    if ((T.ckIsEmpty(paramString1)) || (T.ckIsEmpty(paramString3)) || (T.ckIsEmpty(str1)))
    {
      Logger.w("appId,scene,currentTime maybe null");
      return localVector;
    }
    if (!eMSG_NOTICETYPE.checkIsValidType(paramEMSG_NOTICETYPE))
    {
      Logger.w("bad noticeType:" + paramEMSG_NOTICETYPE);
      return localVector;
    }
    for (;;)
    {
      String str2;
      synchronized (this.helper)
      {
        str2 = col_msg_type;
        if (eMSG_NOTICETYPE.eMSG_NOTICETYPE_ALL == paramEMSG_NOTICETYPE)
        {
          paramEMSG_NOTICETYPE = str2 + " in (0,1," + paramEMSG_NOTICETYPE.val() + ")";
          paramString1 = "SELECT * from notice_info where " + col_app_id + " like '%" + paramString1 + "%' AND " + col_open_id + " in ('','" + paramString2 + "') AND " + col_msg_scene + " = " + paramString3 + " AND " + col_start_time + " < " + str1 + " AND " + col_end_time + " > " + str1 + " AND " + paramEMSG_NOTICETYPE + " ORDER BY " + col_msg_order + " DESC, " + col_msg_id + " DESC LIMIT " + NOTICE_SQL_LIMIT + "; ";
          try
          {
            Logger.d(paramString1);
            paramString2 = this.helper.getReadableDatabase().rawQuery(paramString1, null);
            Logger.d("query result:" + paramString2.getCount());
            paramString2.moveToFirst();
            if (paramString2.isAfterLast()) {
              break label506;
            }
            paramEMSG_NOTICETYPE = getColumnData(paramString2);
            localVector.add(paramEMSG_NOTICETYPE);
            Logger.d("query result info:" + paramEMSG_NOTICETYPE.mNoticeId);
            paramString2.moveToNext();
            continue;
          }
          catch (Exception paramString2)
          {
            Logger.d("getNoticeRecordBySceneAndType cause exception. sql: " + paramString1);
            this.helper.close();
            paramString2.printStackTrace();
          }
          return localVector;
        }
      }
      paramEMSG_NOTICETYPE = str2 + " = " + paramEMSG_NOTICETYPE.val();
      continue;
      label506:
      paramString2.close();
    }
  }
  
  public String getRedundancyNoticeListByTime(String paramString)
  {
    Object localObject2 = "";
    if (T.ckIsEmpty(paramString))
    {
      Logger.w("currentTime maybe null");
      return "";
    }
    synchronized (this.helper)
    {
      String str = " " + col_end_time + " < ? ";
      String[] arrayOfString = new String[1];
      arrayOfString[0] = paramString;
      Object localObject1 = localObject2;
      Cursor localCursor;
      try
      {
        Logger.d("currentTimeStamp:" + paramString);
        localObject1 = localObject2;
        localCursor = this.helper.getReadableDatabase().query("notice_info", null, str, arrayOfString, col_msg_id, null, null, NOTICE_SQL_LIMIT);
        localObject1 = localObject2;
        Logger.d("query result:" + localCursor.getCount());
        localObject1 = localObject2;
        localCursor.moveToFirst();
        paramString = (String)localObject2;
        for (;;)
        {
          localObject1 = paramString;
          if (localCursor.isAfterLast()) {
            break;
          }
          localObject1 = paramString;
          localObject2 = getColumnData(localCursor);
          localObject1 = paramString;
          paramString = paramString + " " + ((NoticeInfo)localObject2).mNoticeId + " ,";
          localObject1 = paramString;
          localCursor.moveToNext();
        }
        localObject1 = paramString;
      }
      catch (Exception paramString)
      {
        Logger.w("getRedundancyNoticeListByTime cause exception. Selction: " + str + arrayOfString);
        this.helper.close();
        paramString.printStackTrace();
        paramString = (String)localObject1;
        return paramString;
      }
      localCursor.close();
    }
  }
  
  public String getTableName()
  {
    return "notice_info";
  }
  
  public boolean insert(NoticeInfo paramNoticeInfo)
  {
    if (paramNoticeInfo == null)
    {
      Logger.w("noticeInfo is null");
      return false;
    }
    try
    {
      synchronized (this.helper)
      {
        paramNoticeInfo = paramNoticeInfo.getUsableContentValues(this);
        Logger.d("insert, cv = " + paramNoticeInfo);
        this.helper.getWritableDatabase().insert("notice_info", null, paramNoticeInfo);
        return true;
      }
      return false;
    }
    catch (Exception paramNoticeInfo)
    {
      Logger.d("Insert into notice_info error");
      this.helper.close();
      paramNoticeInfo.printStackTrace();
    }
  }
  
  public boolean isExisted(NoticeInfo paramNoticeInfo)
  {
    if (paramNoticeInfo == null)
    {
      Logger.w("noticeInfo is null");
      return false;
    }
    String str;
    String[] arrayOfString;
    synchronized (this.helper)
    {
      str = " " + col_msg_id + " = ? ";
      arrayOfString = new String[1];
      arrayOfString[0] = String.valueOf(paramNoticeInfo.mNoticeId);
    }
    try
    {
      paramNoticeInfo = this.helper.getReadableDatabase().query("notice_info", null, str, arrayOfString, null, null, null, null);
      if (paramNoticeInfo.getCount() > 0)
      {
        paramNoticeInfo.close();
        return true;
        paramNoticeInfo = finally;
        throw paramNoticeInfo;
      }
      paramNoticeInfo.close();
      return false;
    }
    catch (Exception paramNoticeInfo)
    {
      Logger.d("isExisted cause exception, Selection: " + str + arrayOfString);
      this.helper.close();
    }
    return false;
  }
  
  public boolean save(NoticeInfo paramNoticeInfo)
  {
    if (paramNoticeInfo == null)
    {
      Logger.w("noticeInfo is null");
      return false;
    }
    String str;
    String[] arrayOfString;
    boolean bool;
    synchronized (this.helper)
    {
      str = " " + col_msg_id + " = ? ";
      arrayOfString = new String[1];
      arrayOfString[0] = String.valueOf(paramNoticeInfo.mNoticeId);
    }
    return false;
  }
}
