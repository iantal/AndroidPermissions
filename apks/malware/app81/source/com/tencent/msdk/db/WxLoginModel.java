package com.tencent.msdk.db;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.login.LoginManager;
import com.tencent.msdk.tea.DesUtils;
import com.tencent.msdk.tea.TEACoding;
import com.tencent.msdk.tools.CommonUtil;
import com.tencent.msdk.tools.Logger;
import java.util.ArrayList;
import java.util.Vector;

public class WxLoginModel
  extends BaseUserInfo
  implements ITbl
{
  static final String TBL_NAME = "wx_login_info";
  private static String col_access_token;
  private static String col_access_token_expire;
  private static String col_age;
  private static String col_avatar;
  private static String col_create_at = "create_at";
  private static String col_gender;
  private static String col_is_active;
  private static String col_nickname;
  private static String col_open_id = "open_id";
  private static String col_pf;
  private static String col_pf_key;
  private static String col_refresh_token;
  private static String col_refresh_token_expire;
  private static String col_update_at = "update_at";
  private static String col_wechat_uin;
  public static volatile WxLoginModel instance;
  private DbManager helper = (DbManager)DbManager.gDefault.get();
  private WakeupRet mWakeupRet = null;
  public String refresh_token = "";
  public long refresh_token_expire = 0L;
  public String wechat_uin = "";
  
  static
  {
    col_access_token_expire = "access_token_expire";
    col_access_token = "access_token";
    col_refresh_token = "refresh_token";
    col_refresh_token_expire = "refresh_token_expire";
    col_pf = "pf";
    col_pf_key = "pf_key";
    col_wechat_uin = "wechat_uin";
    col_nickname = "nickname";
    col_age = "age";
    col_avatar = "avatar";
    col_gender = "gender";
    col_is_active = "is_active";
  }
  
  public WxLoginModel() {}
  
  public WxLoginModel(String paramString)
  {
    super(paramString);
  }
  
  public static String getCreateTblSql()
  {
    String str = "" + "CREATE TABLE IF NOT EXISTS [wx_login_info] (";
    str = str + "[" + col_open_id + "] NVARCHAR(128)  UNIQUE NOT NULL,";
    str = str + "[" + col_access_token_expire + "] REAL  NULL,";
    str = str + "[" + col_access_token + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_refresh_token + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_refresh_token_expire + "] REAL  NULL,";
    str = str + "[" + col_pf + "] NVARCHAR(64)  NULL,";
    str = str + "[" + col_pf_key + "] NVARCHAR(128)  NULL,";
    str = str + "[" + col_wechat_uin + "] NVARCHAR(64)  NULL,";
    str = str + "[" + col_nickname + "] NVARCHAR(64)  NULL,";
    str = str + "[" + col_age + "] INTEGER  NULL,";
    str = str + "[" + col_avatar + "] VARCHAR(256)  NULL,";
    str = str + "[" + col_gender + "] INTEGER DEFAULT -1 NULL,";
    str = str + "[" + col_is_active + "] BOOLEAN  NULL,";
    str = str + "[" + col_create_at + "] TIMESTAMP  NULL,";
    str = str + "[" + col_update_at + "] TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL";
    return str + ")";
  }
  
  public static String getDropTblSql()
  {
    return "DROP TABLE IF EXISTS wx_login_info";
  }
  
  private ContentValues getUsableContentValues()
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put(col_open_id, this.open_id);
    TEACoding localTEACoding = new TEACoding(DesUtils.DB_KEY);
    if (!CommonUtil.ckIsEmpty(this.access_token))
    {
      localContentValues.put(col_access_token, localTEACoding.encode2HexBase64(this.access_token.getBytes()));
      localContentValues.put(col_access_token_expire, Long.valueOf(this.access_token_expire));
    }
    if (!CommonUtil.ckIsEmpty(this.refresh_token))
    {
      localContentValues.put(col_refresh_token, localTEACoding.encode2HexBase64(this.refresh_token.getBytes()));
      localContentValues.put(col_refresh_token_expire, Long.valueOf(this.refresh_token_expire));
    }
    if (!CommonUtil.ckIsEmpty(this.pf)) {
      localContentValues.put(col_pf, localTEACoding.encode2HexBase64(this.pf.getBytes()));
    }
    if (!CommonUtil.ckIsEmpty(this.pf_key)) {
      localContentValues.put(col_pf_key, localTEACoding.encode2HexBase64(this.pf_key.getBytes()));
    }
    long l = System.currentTimeMillis();
    localContentValues.put(col_create_at, Long.valueOf(l));
    return localContentValues;
  }
  
  public LoginRet convertToLoginRet()
  {
    LoginRet localLoginRet = new LoginRet();
    localLoginRet.open_id = this.open_id;
    localLoginRet.pf = this.pf;
    localLoginRet.pf_key = this.pf_key;
    localLoginRet.platform = WeGame.WXPLATID;
    localLoginRet.token.add(new TokenRet(3, this.access_token, this.access_token_expire));
    localLoginRet.token.add(new TokenRet(5, this.refresh_token, this.refresh_token_expire));
    return localLoginRet;
  }
  
  public boolean create()
  {
    synchronized (this.helper)
    {
      SQLiteDatabase localSQLiteDatabase = this.helper.getWritableDatabase();
      try
      {
        long l = localSQLiteDatabase.insert("wx_login_info", null, getUsableContentValues());
        Logger.d("" + l);
        return true;
      }
      catch (Exception localException)
      {
        this.helper.close();
        localException.printStackTrace();
        Logger.d("WXLoginModel create error");
        return false;
      }
    }
  }
  
  public int delete()
  {
    synchronized (this.helper)
    {
      SQLiteDatabase localSQLiteDatabase = this.helper.getWritableDatabase();
      String str = " `" + col_open_id + "` = ? ";
      String[] arrayOfString = new String[1];
      arrayOfString[0] = this.open_id;
      try
      {
        i = localSQLiteDatabase.delete("wx_login_info", str, arrayOfString);
        LoginManager.getInstance().resetLastWxLoginModel();
        return i;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          int i = 0;
          this.helper.close();
          localException.printStackTrace();
          Logger.d("delete error,, Selection: " + str + arrayOfString);
        }
      }
    }
  }
  
  public int deleteAll()
  {
    synchronized (this.helper)
    {
      SQLiteDatabase localSQLiteDatabase = this.helper.getWritableDatabase();
      try
      {
        i = localSQLiteDatabase.delete("wx_login_info", null, null);
        LoginManager.getInstance().resetLastWxLoginModel();
        return i;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
          int i = 0;
          this.helper.close();
          Logger.d("WxLoginModel deleteAll error.");
        }
      }
    }
  }
  
  public BaseUserInfo find()
  {
    return null;
  }
  
  public ArrayList<BaseUserInfo> findAll()
  {
    return null;
  }
  
  public WxLoginModel getLastWxLoginUserinfo()
  {
    synchronized (this.helper)
    {
      WxLoginModel localWxLoginModel = new WxLoginModel();
      try
      {
        Object localObject1 = " `" + col_create_at + "` DESC ";
        Cursor localCursor = this.helper.getReadableDatabase().query("wx_login_info", null, null, null, null, null, (String)localObject1, "1");
        if (localCursor.getCount() == 0)
        {
          localCursor.close();
          return null;
        }
        localCursor.moveToFirst();
        TEACoding localTEACoding = new TEACoding(DesUtils.DB_KEY);
        String str = getStringByName(localCursor, col_open_id);
        localObject1 = str;
        if (str == null) {
          localObject1 = "";
        }
        localWxLoginModel.open_id = ((String)localObject1);
        str = new String(localTEACoding.decodeFromBase64Str(getStringByName(localCursor, col_access_token)));
        localObject1 = str;
        if (str == null) {
          localObject1 = "";
        }
        localWxLoginModel.access_token = ((String)localObject1);
        localWxLoginModel.access_token_expire = getLongByName(localCursor, col_access_token_expire);
        str = new String(localTEACoding.decodeFromBase64Str(getStringByName(localCursor, col_refresh_token)));
        localObject1 = str;
        if (str == null) {
          localObject1 = "";
        }
        localWxLoginModel.refresh_token = ((String)localObject1);
        localWxLoginModel.refresh_token_expire = getLongByName(localCursor, col_refresh_token_expire);
        str = new String(localTEACoding.decodeFromBase64Str(getStringByName(localCursor, col_pf)));
        localObject1 = str;
        if (str == null) {
          localObject1 = "";
        }
        localWxLoginModel.pf = ((String)localObject1);
        str = new String(localTEACoding.decodeFromBase64Str(getStringByName(localCursor, col_pf_key)));
        localObject1 = str;
        if (str == null) {
          localObject1 = "";
        }
        localWxLoginModel.pf_key = ((String)localObject1);
        localWxLoginModel.create_at = getLongByName(localCursor, col_create_at);
        localCursor.close();
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Logger.w("getLastWxLoginUserinfo cause exception");
          this.helper.close();
          localException.printStackTrace();
        }
      }
      return localWxLoginModel;
    }
  }
  
  public String getTableName()
  {
    return "wx_login_info";
  }
  
  public WakeupRet getWakeupRet()
  {
    return this.mWakeupRet;
  }
  
  public boolean isExisted()
  {
    synchronized (this.helper)
    {
      Object localObject2 = this.helper.getReadableDatabase();
      String str = " " + col_open_id + " = ? ";
      String[] arrayOfString = new String[1];
      arrayOfString[0] = this.open_id;
      try
      {
        localObject2 = ((SQLiteDatabase)localObject2).query("wx_login_info", null, str, arrayOfString, null, null, null, null);
        if (((Cursor)localObject2).getCount() > 0)
        {
          ((Cursor)localObject2).close();
          return true;
        }
        ((Cursor)localObject2).close();
        return false;
      }
      catch (Exception localException)
      {
        this.helper.close();
        Logger.d("WxLoginModel isExisted error, Selection: " + str + arrayOfString);
        return true;
      }
    }
  }
  
  public boolean save()
  {
    deleteAll();
    boolean bool;
    if (isExisted()) {
      if (update() > 0) {
        bool = true;
      }
    }
    for (;;)
    {
      LoginManager.getInstance().resetLastWxLoginModel();
      return bool;
      bool = false;
      continue;
      bool = create();
    }
  }
  
  public void setWakeUpRet(WakeupRet paramWakeupRet)
  {
    this.mWakeupRet = paramWakeupRet;
  }
  
  public int update()
  {
    synchronized (this.helper)
    {
      SQLiteDatabase localSQLiteDatabase = this.helper.getWritableDatabase();
      ContentValues localContentValues = getUsableContentValues();
      String str = " `" + col_open_id + "` = ? ";
      String[] arrayOfString = new String[1];
      arrayOfString[0] = this.open_id;
      try
      {
        int i = localSQLiteDatabase.update("wx_login_info", localContentValues, str, arrayOfString);
        return i;
      }
      catch (Exception localException)
      {
        this.helper.close();
        Logger.d("WxLoginModel update error, Selection: " + str + arrayOfString);
        return 0;
      }
    }
  }
}
