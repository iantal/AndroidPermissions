package com.tencent.msdk.db;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.tencent.msdk.Singleton;
import com.tencent.msdk.tools.CommonUtil;
import com.tencent.msdk.tools.Logger;
import java.util.ArrayList;

public class PermissionModel
  implements ITbl
{
  public static final String TBL_NAME = "msdk_permission";
  private static final String col_permission = "PERMISSIONSTR";
  private static final String col_qq_appid = "QQ_APPID";
  private static final String col_wx_appid = "WX_APPID";
  private DbManager helper = (DbManager)DbManager.gDefault.get();
  public String permission = "";
  public String qqAppId = "";
  public String wxAppId = "";
  
  public PermissionModel() {}
  
  public static String getCreateTblSql()
  {
    return "CREATE TABLE IF NOT EXISTS msdk_permission ( QQ_APPID STRING UNIQUE NOT NULL, WX_APPID STRING, PERMISSIONSTR STRING)";
  }
  
  public static String getDropTblSql()
  {
    return "DROP TABLE IF EXISTS msdk_permission";
  }
  
  private ContentValues getUsableContentValues()
  {
    ContentValues localContentValues = new ContentValues();
    localContentValues.put("QQ_APPID", this.qqAppId);
    if (!CommonUtil.ckIsEmpty(this.wxAppId)) {
      localContentValues.put("WX_APPID", this.wxAppId);
    }
    if (!CommonUtil.ckIsEmpty(this.permission)) {
      localContentValues.put("PERMISSIONSTR", this.permission);
    }
    return localContentValues;
  }
  
  public boolean create()
  {
    synchronized (this.helper)
    {
      try
      {
        this.helper.getWritableDatabase().insert("msdk_permission", null, getUsableContentValues());
        return true;
      }
      catch (Exception localException)
      {
        Logger.e("Insert into qq_login_info error");
        this.helper.close();
        localException.printStackTrace();
        return false;
      }
    }
  }
  
  public int delete()
  {
    synchronized (this.helper)
    {
      String[] arrayOfString = new String[1];
      arrayOfString[0] = this.qqAppId;
      try
      {
        int i = this.helper.getWritableDatabase().delete("msdk_permission", " `QQ_APPID` = ? ", arrayOfString);
        return i;
      }
      catch (Exception localException)
      {
        Logger.e("PermissionModel delete error, selection:" + " `QQ_APPID` = ? " + arrayOfString);
        this.helper.close();
        localException.printStackTrace();
        return 0;
      }
    }
  }
  
  public int deleteAll()
  {
    return 0;
  }
  
  public BaseUserInfo find()
  {
    return null;
  }
  
  public ArrayList<BaseUserInfo> findAll()
  {
    return null;
  }
  
  public boolean firstTimeSave()
  {
    if (!isExisted()) {
      return create();
    }
    return true;
  }
  
  public void getRecord()
  {
    synchronized (this.helper)
    {
      try
      {
        Cursor localCursor = this.helper.getReadableDatabase().query("msdk_permission", null, null, null, null, null, null);
        if (localCursor.getCount() > 0)
        {
          localCursor.moveToFirst();
          this.qqAppId = localCursor.getString(localCursor.getColumnIndex("QQ_APPID"));
          this.wxAppId = localCursor.getString(localCursor.getColumnIndex("WX_APPID"));
          this.permission = localCursor.getString(localCursor.getColumnIndex("PERMISSIONSTR"));
        }
        if (localCursor != null) {
          localCursor.close();
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Logger.e("PermissionModel getRecord Exception.");
          this.helper.close();
          localException.printStackTrace();
        }
      }
      return;
    }
  }
  
  public String getTableName()
  {
    return "msdk_permission";
  }
  
  public boolean isExisted()
  {
    synchronized (this.helper)
    {
      String[] arrayOfString = new String[1];
      arrayOfString[0] = this.qqAppId;
      try
      {
        Cursor localCursor = this.helper.getReadableDatabase().query("msdk_permission", null, " QQ_APPID = ? ", arrayOfString, null, null, null, null);
        if (localCursor.getCount() > 0)
        {
          localCursor.close();
          return true;
        }
        localCursor.close();
        return false;
      }
      catch (Exception localException)
      {
        this.helper.close();
        Logger.e("isExisted error, selection:" + " QQ_APPID = ? " + arrayOfString);
        localException.printStackTrace();
        return true;
      }
    }
  }
  
  public boolean save()
  {
    if (isExisted()) {
      return update() > 0;
    }
    return create();
  }
  
  public int update()
  {
    synchronized (this.helper)
    {
      ContentValues localContentValues = getUsableContentValues();
      String[] arrayOfString = new String[1];
      arrayOfString[0] = this.qqAppId;
      try
      {
        int i = this.helper.getWritableDatabase().update("msdk_permission", localContentValues, " `QQ_APPID` = ? ", arrayOfString);
        return i;
      }
      catch (Exception localException)
      {
        Logger.e("PermissionModel update error, selection:" + " `QQ_APPID` = ? " + arrayOfString);
        this.helper.close();
        return 0;
      }
    }
  }
}
