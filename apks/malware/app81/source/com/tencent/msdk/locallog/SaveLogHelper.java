package com.tencent.msdk.locallog;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import com.tencent.mid.api.MidService;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.api.ADRet;
import com.tencent.msdk.api.CallbackRet;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.TokenRet;
import com.tencent.msdk.api.WakeupRet;
import com.tencent.msdk.api.eADType;
import com.tencent.msdk.control.SwitcherManager;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SaveLogHelper
{
  private static final String LOG_HEADER = "LogReportStart";
  private static final String LOG_SPLIT = "#";
  private static final String LOG_TAIL = "LogReportEnd";
  private static volatile SaveLogHelper instance;
  private String mAppId = "";
  private String mId = "";
  private String mOpenId = "";
  private String mWXCode = "";
  
  public SaveLogHelper() {}
  
  private JSONObject convertParamsToJSON(HashMap<String, String> paramHashMap)
  {
    if (paramHashMap == null)
    {
      paramHashMap = null;
      return paramHashMap;
    }
    Iterator localIterator = paramHashMap.entrySet().iterator();
    JSONObject localJSONObject = new JSONObject();
    for (;;)
    {
      paramHashMap = localJSONObject;
      if (!localIterator.hasNext()) {
        break;
      }
      Object localObject = (Map.Entry)localIterator.next();
      paramHashMap = (String)((Map.Entry)localObject).getKey();
      localObject = ((Map.Entry)localObject).getValue();
      try
      {
        localJSONObject.put(paramHashMap, localObject);
      }
      catch (JSONException paramHashMap)
      {
        paramHashMap.printStackTrace();
      }
    }
  }
  
  private String getAppId()
  {
    if (T.ckIsEmpty(this.mAppId)) {
      this.mAppId = WeGame.getInstance().qq_appid;
    }
    return this.mAppId;
  }
  
  private String getHostIp()
  {
    try
    {
      InetAddress localInetAddress;
      do
      {
        localObject = NetworkInterface.getNetworkInterfaces();
        Enumeration localEnumeration;
        while (!localEnumeration.hasMoreElements())
        {
          if (!((Enumeration)localObject).hasMoreElements()) {
            break;
          }
          localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
        }
        localInetAddress = (InetAddress)localEnumeration.nextElement();
      } while ((localInetAddress.isLoopbackAddress()) || (!(localInetAddress instanceof Inet4Address)));
      Object localObject = localInetAddress.getHostAddress().toString();
      return localObject;
    }
    catch (SocketException localSocketException)
    {
      localSocketException.printStackTrace();
      return "null";
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public static SaveLogHelper getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new SaveLogHelper();
      }
      return instance;
    }
    finally {}
  }
  
  private String getUploadLogStr(String paramString1, String paramString2, String paramString3)
  {
    String str = paramString1;
    if (T.ckIsEmpty(paramString1)) {
      str = "null";
    }
    str.replace("#", "*");
    paramString1 = paramString2;
    if (T.ckIsEmpty(paramString2)) {
      paramString1 = "null";
    }
    paramString1.replace("#", "*");
    paramString2 = paramString3;
    if (T.ckIsEmpty(paramString3)) {
      paramString2 = "{}";
    }
    paramString2.replace("#", "*");
    paramString3 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(System.currentTimeMillis()));
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("LogReportStart");
    localStringBuilder.append("#" + paramString3);
    localStringBuilder.append("#2");
    localStringBuilder.append("#" + WeGame.getInstance().WGGetVersion());
    localStringBuilder.append("#" + getAppId());
    localStringBuilder.append("#" + str);
    localStringBuilder.append("#" + getMid());
    localStringBuilder.append("#" + paramString1);
    localStringBuilder.append("#" + paramString2);
    localStringBuilder.append("#LogReportEnd");
    return localStringBuilder.toString();
  }
  
  public String getMid()
  {
    if ((this.mId == null) || (this.mId.trim().equals("")))
    {
      Activity localActivity = WeGame.getInstance().getActivity();
      if (localActivity != null) {
        this.mId = MidService.getMid(localActivity.getApplicationContext());
      }
    }
    return this.mId;
  }
  
  public String getWXCode()
  {
    return this.mWXCode;
  }
  
  public void reportAllLog() {}
  
  public void reportLog(String paramString, Intent paramIntent, boolean paramBoolean)
  {
    HashMap localHashMap = new HashMap();
    if ((paramIntent == null) || (paramIntent.getExtras() == null)) {
      localHashMap.put("intent", "null or extra is null");
    }
    for (;;)
    {
      reportLog(paramString, localHashMap, paramBoolean);
      return;
      try
      {
        Iterator localIterator = paramIntent.getExtras().keySet().iterator();
        while (localIterator.hasNext())
        {
          String str = (String)localIterator.next();
          localHashMap.put(str, String.valueOf(paramIntent.getExtras().get(str)));
        }
      }
      catch (Exception paramIntent)
      {
        Logger.w("exception:" + paramIntent.getMessage());
      }
    }
  }
  
  public void reportLog(String paramString, ADRet paramADRet, boolean paramBoolean)
  {
    if (paramADRet == null) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("viewTag", paramADRet.viewTag);
    if (paramADRet.scene == null) {}
    for (paramADRet = "null";; paramADRet = String.valueOf(paramADRet.scene.val()))
    {
      localHashMap.put("scene", paramADRet);
      reportLog(paramString, localHashMap, paramBoolean);
      return;
    }
  }
  
  public void reportLog(String paramString, CallbackRet paramCallbackRet, boolean paramBoolean)
  {
    if (paramCallbackRet == null) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("flag", String.valueOf(paramCallbackRet.flag));
    localHashMap.put("desc", paramCallbackRet.desc);
    localHashMap.put("platform", String.valueOf(paramCallbackRet.platform));
    if (-1 == paramCallbackRet.flag) {
      paramBoolean = true;
    }
    reportLog(paramString, localHashMap, paramBoolean);
  }
  
  public void reportLog(String paramString, LoginRet paramLoginRet, boolean paramBoolean)
  {
    if (paramLoginRet == null) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("desc", paramLoginRet.desc);
    localHashMap.put("open_id", paramLoginRet.open_id);
    localHashMap.put("pf", paramLoginRet.pf);
    localHashMap.put("pf_key", paramLoginRet.pf_key);
    localHashMap.put("user_id", paramLoginRet.user_id);
    localHashMap.put("flag", "" + paramLoginRet.flag);
    localHashMap.put("platform", "" + paramLoginRet.platform);
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    for (;;)
    {
      if (i < paramLoginRet.token.size())
      {
        String str;
        switch (((TokenRet)paramLoginRet.token.get(i)).type)
        {
        default: 
          str = "errorType";
        }
        try
        {
          for (;;)
          {
            JSONObject localJSONObject = new JSONObject();
            localJSONObject.put("type", str);
            localJSONObject.put("value", ((TokenRet)paramLoginRet.token.get(i)).value);
            localJSONObject.put("expiration", ((TokenRet)paramLoginRet.token.get(i)).expiration);
            localJSONArray.put(i, localJSONObject);
            i += 1;
            break;
            str = "eToken_QQ_Access";
            continue;
            str = "eToken_QQ_Pay";
            continue;
            str = "eToken_WX_Access";
            continue;
            str = "eToken_WX_Code";
            continue;
            str = "eToken_WX_Refresh";
          }
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            localJSONException.printStackTrace();
          }
        }
      }
    }
    localHashMap.put("token", localJSONArray.toString());
    boolean bool = paramBoolean;
    if ("OnLoginNotify".equals(paramString))
    {
      bool = paramBoolean;
      if (paramLoginRet.flag != 0)
      {
        bool = paramBoolean;
        if (paramLoginRet.flag != 2005)
        {
          bool = true;
          FilterLogHelper.addNetInfoToMap(localHashMap);
        }
      }
    }
    reportLog(paramString, paramLoginRet.open_id, localHashMap, bool);
  }
  
  public void reportLog(String paramString, WakeupRet paramWakeupRet, boolean paramBoolean)
  {
    if (paramWakeupRet == null) {
      return;
    }
    HashMap localHashMap = new HashMap();
    localHashMap.put("flag", String.valueOf(paramWakeupRet.flag));
    localHashMap.put("desc", paramWakeupRet.desc);
    localHashMap.put("platform", String.valueOf(paramWakeupRet.platform));
    localHashMap.put("wopenid", paramWakeupRet.open_id);
    localHashMap.put("media_tag", paramWakeupRet.media_tag_name);
    localHashMap.put("msgExt", paramWakeupRet.messageExt);
    localHashMap.put("lang", paramWakeupRet.lang);
    localHashMap.put("country", paramWakeupRet.country);
    reportLog(paramString, localHashMap, true);
  }
  
  public void reportLog(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (paramBoolean = true;; paramBoolean = SwitcherManager.getInstance().isUseLocalLogReport())
    {
      BeaconAppUploadLog.onAppLogUploadAction(getUploadLogStr(paramString2, paramString1, paramString3), paramBoolean);
      return;
    }
  }
  
  public void reportLog(String paramString1, String paramString2, HashMap<String, String> paramHashMap, boolean paramBoolean)
  {
    paramHashMap = convertParamsToJSON(paramHashMap);
    if (paramHashMap == null) {
      return;
    }
    reportLog(paramString1, paramString2, paramHashMap.toString(), paramBoolean);
  }
  
  public void reportLog(String paramString1, String paramString2, boolean paramBoolean)
  {
    reportLog(paramString1, this.mOpenId, paramString2, paramBoolean);
  }
  
  public void reportLog(String paramString, HashMap paramHashMap, boolean paramBoolean)
  {
    paramHashMap = convertParamsToJSON(paramHashMap);
    if (paramHashMap == null) {
      return;
    }
    reportLog(paramString, this.mOpenId, paramHashMap.toString(), paramBoolean);
  }
  
  public void setOpenId(String paramString)
  {
    this.mOpenId = paramString;
  }
  
  public void setWXCode(String paramString)
  {
    this.mWXCode = paramString;
  }
}
