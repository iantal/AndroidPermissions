package com.tencent.msdk.lbs;

import android.app.Activity;
import com.tencent.msdk.WeGameNotifyGame;
import com.tencent.msdk.api.LocationRet;
import com.tencent.msdk.handle.MsdkThreadManager;
import com.tencent.msdk.remote.api.RelationRet;
import com.tencent.msdk.tools.Logger;
import java.util.ArrayList;
import java.util.Iterator;
import org.json.JSONArray;

public class Lbs
{
  private Activity context;
  
  public Lbs(Activity paramActivity)
  {
    this.context = paramActivity;
  }
  
  public boolean getLocationInfo()
  {
    LocationService.Init(this.context);
    LocationService.getInstance().startLocating(new LocationService.LocatorListener()
    {
      public void onFail(int paramAnonymousInt)
      {
        Logger.d("get location failed: " + paramAnonymousInt);
        LocationRet localLocationRet = new LocationRet();
        if (paramAnonymousInt == 0)
        {
          localLocationRet.flag = -4;
          localLocationRet.desc = "location service is closed!";
        }
        for (;;)
        {
          WeGameNotifyGame.getInstance().OnGetLocationInfoCallback(localLocationRet);
          return;
          if (paramAnonymousInt == 1)
          {
            localLocationRet.flag = -5;
            localLocationRet.desc = "get location failed";
          }
        }
      }
      
      public void onSuccess(int paramAnonymousInt)
      {
        Logger.d("" + paramAnonymousInt);
        LocationInfo localLocationInfo = new LocationInfo();
        JSONArray localJSONArray = new JSONArray();
        Iterator localIterator = LocationService.getInstance().cellInfoList.iterator();
        Object localObject1;
        Object localObject2;
        while (localIterator.hasNext())
        {
          localObject1 = (CellIDInfo)localIterator.next();
          localObject2 = new LocationInfo.Cell();
          ((LocationInfo.Cell)localObject2).setCellid(((CellIDInfo)localObject1).cellId);
          ((LocationInfo.Cell)localObject2).setLac(((CellIDInfo)localObject1).locationAreaCode);
          ((LocationInfo.Cell)localObject2).setMcc(((CellIDInfo)localObject1).mobileCountryCode);
          ((LocationInfo.Cell)localObject2).setMnc(((CellIDInfo)localObject1).mobileNetworkCode);
          ((LocationInfo.Cell)localObject2).setRssi(((CellIDInfo)localObject1).rssi);
          localJSONArray.put(localObject2);
        }
        localLocationInfo.location.setLatitude(LocationService.getInstance().getLatitude());
        localLocationInfo.location.setLongitude(LocationService.getInstance().getLongitude());
        localLocationInfo.location.setAdditional("0");
        localLocationInfo.cells = localJSONArray;
        localJSONArray = new JSONArray();
        localIterator = LocationService.getInstance().getWifiInfoList().iterator();
        while (localIterator.hasNext())
        {
          localObject1 = (WifiInfo)localIterator.next();
          localObject2 = new LocationInfo.Wifi();
          ((LocationInfo.Wifi)localObject2).setMac(((WifiInfo)localObject1).mac);
          ((LocationInfo.Wifi)localObject2).setRssi(((WifiInfo)localObject1).rssi);
          localJSONArray.put(localObject2);
        }
        localLocationInfo.wifis = localJSONArray;
        MsdkThreadManager.getInstance().getLocationInfo(localLocationInfo);
      }
    });
    return true;
  }
  
  public void getNearbyPlayer()
  {
    LocationService.Init(this.context);
    LocationService.getInstance().startLocating(new LocationService.LocatorListener()
    {
      public void onFail(int paramAnonymousInt)
      {
        Logger.d("get location failed: " + paramAnonymousInt);
        RelationRet localRelationRet = new RelationRet();
        if (paramAnonymousInt == 0)
        {
          localRelationRet.flag = -4;
          localRelationRet.desc = "location service is closed!";
        }
        for (;;)
        {
          WeGameNotifyGame.getInstance().OnGetNearbyPlayerCallback(localRelationRet);
          return;
          if (paramAnonymousInt == 1)
          {
            localRelationRet.flag = -5;
            localRelationRet.desc = "get location failed";
          }
        }
      }
      
      public void onSuccess(int paramAnonymousInt)
      {
        Logger.d("" + paramAnonymousInt);
        LocationInfo localLocationInfo = new LocationInfo();
        JSONArray localJSONArray = new JSONArray();
        Iterator localIterator = LocationService.getInstance().cellInfoList.iterator();
        Object localObject1;
        Object localObject2;
        while (localIterator.hasNext())
        {
          localObject1 = (CellIDInfo)localIterator.next();
          localObject2 = new LocationInfo.Cell();
          ((LocationInfo.Cell)localObject2).setCellid(((CellIDInfo)localObject1).cellId);
          ((LocationInfo.Cell)localObject2).setLac(((CellIDInfo)localObject1).locationAreaCode);
          ((LocationInfo.Cell)localObject2).setMcc(((CellIDInfo)localObject1).mobileCountryCode);
          ((LocationInfo.Cell)localObject2).setMnc(((CellIDInfo)localObject1).mobileNetworkCode);
          ((LocationInfo.Cell)localObject2).setRssi(((CellIDInfo)localObject1).rssi);
          localJSONArray.put(localObject2);
        }
        localLocationInfo.location.setLatitude(LocationService.getInstance().getLatitude());
        localLocationInfo.location.setLongitude(LocationService.getInstance().getLongitude());
        localLocationInfo.location.setAdditional("0");
        localLocationInfo.cells = localJSONArray;
        localJSONArray = new JSONArray();
        localIterator = LocationService.getInstance().getWifiInfoList().iterator();
        while (localIterator.hasNext())
        {
          localObject1 = (WifiInfo)localIterator.next();
          localObject2 = new LocationInfo.Wifi();
          ((LocationInfo.Wifi)localObject2).setMac(((WifiInfo)localObject1).mac);
          ((LocationInfo.Wifi)localObject2).setRssi(((WifiInfo)localObject1).rssi);
          localJSONArray.put(localObject2);
        }
        localLocationInfo.wifis = localJSONArray;
        MsdkThreadManager.getInstance().getNearbyPlayer(localLocationInfo);
      }
    });
  }
}
