package com.tencent.msdk.lbs;

import android.app.Activity;
import android.location.LocationManager;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.telephony.NeighboringCellInfo;
import android.telephony.TelephonyManager;
import android.telephony.cdma.CdmaCellLocation;
import android.telephony.gsm.GsmCellLocation;
import android.util.Log;
import com.tencent.msdk.tools.Logger;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class LocationService
{
  static final int ERROR_GPS_TIMEOUT = 1;
  static final int ERROR_NOT_OPEN_GPS = 0;
  protected static final long GPS_TIMEOUT = 10000L;
  static final int RET_CODE_HAS_GPS_DATA = 1;
  static final int RET_CODE_NO_GPS_DATA = 0;
  private static Activity sActivity;
  private static LocationService sInstance;
  final int STATUS_FAIL = 1;
  final int STATUS_SUCCESS = 0;
  ArrayList<CellIDInfo> cellInfoList;
  int cellInfoStatus;
  int gpsStatus;
  private double latitude;
  private ArrayList<LocatorListener> listenerList = new ArrayList();
  private double longitude;
  ArrayList<WifiInfo> wifiInfoList;
  int wifiStatus;
  
  public LocationService() {}
  
  private void GPSLocation()
  {
    final LocationManager localLocationManager = (LocationManager)sActivity.getSystemService("location");
    try
    {
      if (localLocationManager.isProviderEnabled("gps"))
      {
        final MyLocationListener localMyLocationListener = new MyLocationListener(sInstance, localLocationManager);
        Logger.d("StartGPSLocating");
        sActivity.runOnUiThread(new Runnable()
        {
          public void run()
          {
            localLocationManager.requestLocationUpdates("gps", 2000L, 100.0F, localMyLocationListener);
          }
        });
        sActivity.runOnUiThread(new Runnable()
        {
          public void run()
          {
            final Handler localHandler = new Handler();
            localHandler.postDelayed(new Runnable()
            {
              public void run()
              {
                Logger.d("获取GPS超时");
                LocationService.this.gpsStatus = 1;
                LocationService.2.this.val$locationManager.removeUpdates(LocationService.2.this.val$locationListener);
                if ((LocationService.this.wifiStatus == 0) || (LocationService.this.cellInfoStatus == 0))
                {
                  Logger.d("成功获取位置信息，但没有GPS数据");
                  LocationService.sInstance.onSuccess(0);
                }
                for (;;)
                {
                  localHandler.removeCallbacks(this);
                  LocationService.2.this.val$locationManager.removeUpdates(LocationService.2.this.val$locationListener);
                  return;
                  if ((LocationService.this.wifiStatus == 1) && (LocationService.this.cellInfoStatus == 1))
                  {
                    Logger.d("获取位置信息失败，GPS数据超时");
                    LocationService.sInstance.onFail(1);
                  }
                }
              }
            }, 10000L);
          }
        });
        return;
      }
      Logger.d("GPS未开启");
      if ((this.wifiStatus == 0) || (this.cellInfoStatus == 0))
      {
        Logger.d("成功获取位置信息，但没有GPS数据");
        sInstance.onSuccess(0);
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      Log.d("LocationService", "GPS获取异常");
      if ((this.wifiStatus == 0) || (this.cellInfoStatus == 0))
      {
        Log.d("LocationService", "成功获取位置信息，但没有GPS数据");
        sInstance.onSuccess(0);
        return;
        if ((this.wifiStatus == 1) && (this.cellInfoStatus == 1))
        {
          Logger.d("获取位置信息失败，GPS数据超时");
          sInstance.onFail(0);
        }
      }
      else if ((this.wifiStatus == 1) && (this.cellInfoStatus == 1))
      {
        Log.d("LocationService", "获取位置信息失败，GPS数据超时");
        sInstance.onFail(1);
      }
    }
  }
  
  public static void Init(Activity paramActivity)
  {
    sActivity = paramActivity;
    if (sInstance == null) {
      sInstance = new LocationService();
    }
  }
  
  private void getCellIDInfo()
  {
    final TelephonyManager localTelephonyManager = (TelephonyManager)sActivity.getSystemService("phone");
    if (localTelephonyManager == null)
    {
      Logger.d("get TelephonyManager failed!");
      this.cellInfoStatus = 1;
      return;
    }
    this.cellInfoList = new ArrayList();
    Object localObject1 = new CellIDInfo();
    int j = localTelephonyManager.getNetworkType();
    boolean bool1 = false;
    Object localObject2 = localTelephonyManager.getCellLocation();
    if (localObject2 == null)
    {
      Log.d("LocationService", "cellLocation is null!!!");
      this.cellInfoStatus = 1;
      return;
    }
    if ((j == 0) || (localTelephonyManager.getNetworkOperator() == null))
    {
      Log.d("LocationService", "network type is unknown!!!");
      this.cellInfoStatus = 1;
      return;
    }
    boolean bool2;
    int i;
    int k;
    int m;
    int n;
    if ((localObject2 instanceof GsmCellLocation))
    {
      localObject2 = (GsmCellLocation)localObject2;
      bool2 = true;
      i = ((GsmCellLocation)localObject2).getLac();
      k = Integer.valueOf(localTelephonyManager.getNetworkOperator().substring(0, 3)).intValue();
      m = Integer.valueOf(localTelephonyManager.getNetworkOperator().substring(3, 5)).intValue();
      ((CellIDInfo)localObject1).cellId = ((GsmCellLocation)localObject2).getCid();
      ((CellIDInfo)localObject1).mobileCountryCode = k;
      ((CellIDInfo)localObject1).mobileNetworkCode = m;
      ((CellIDInfo)localObject1).locationAreaCode = i;
      ((CellIDInfo)localObject1).radioType = "gsm";
      ((CellIDInfo)localObject1).rssi = 65535;
      Logger.d("currentCell:" + ((CellIDInfo)localObject1).toString());
      this.cellInfoList.add(localObject1);
      localObject1 = localTelephonyManager.getNeighboringCellInfo();
      if (localObject1 == null)
      {
        Logger.d("LBS NeighboringCellInfo, list is null");
        this.cellInfoStatus = 1;
        return;
      }
      n = ((List)localObject1).size();
      Logger.d("NeighboringCellInfo size = " + n);
      i = 0;
      for (;;)
      {
        bool1 = bool2;
        if (i >= n) {
          break;
        }
        localObject2 = new CellIDInfo();
        ((CellIDInfo)localObject2).cellId = ((NeighboringCellInfo)((List)localObject1).get(i)).getCid();
        ((CellIDInfo)localObject2).mobileCountryCode = k;
        ((CellIDInfo)localObject2).mobileNetworkCode = m;
        ((CellIDInfo)localObject2).locationAreaCode = ((NeighboringCellInfo)((List)localObject1).get(i)).getLac();
        ((CellIDInfo)localObject2).rssi = ((NeighboringCellInfo)((List)localObject1).get(i)).getRssi();
        Logger.d("neighbor" + i + ":" + ((CellIDInfo)localObject2).toString());
        this.cellInfoList.add(localObject2);
        i += 1;
      }
    }
    if ((localObject2 instanceof CdmaCellLocation))
    {
      localObject2 = (CdmaCellLocation)localObject2;
      bool2 = true;
      k = ((CdmaCellLocation)localObject2).getNetworkId();
      m = Integer.valueOf(localTelephonyManager.getNetworkOperator().substring(0, 3)).intValue();
      n = ((CdmaCellLocation)localObject2).getSystemId();
      ((CellIDInfo)localObject1).cellId = ((CdmaCellLocation)localObject2).getBaseStationId();
      ((CellIDInfo)localObject1).mobileCountryCode = m;
      ((CellIDInfo)localObject1).mobileNetworkCode = n;
      ((CellIDInfo)localObject1).locationAreaCode = k;
      ((CellIDInfo)localObject1).radioType = "cdma";
      Logger.d("currentCell cmda" + ((CellIDInfo)localObject1).toString());
      this.cellInfoList.add(localObject1);
      localObject1 = localTelephonyManager.getNeighboringCellInfo();
      if (localObject1 == null)
      {
        Logger.d("LBS NeighboringCellInfo, cmda list is null");
        this.cellInfoStatus = 1;
        return;
      }
      int i1 = ((List)localObject1).size();
      Logger.d("NeighboringCellInfo size = " + i1);
      i = 0;
      for (;;)
      {
        bool1 = bool2;
        if (i >= i1) {
          break;
        }
        localObject2 = new CellIDInfo();
        ((CellIDInfo)localObject2).cellId = ((NeighboringCellInfo)((List)localObject1).get(i)).getCid();
        ((CellIDInfo)localObject2).mobileCountryCode = m;
        ((CellIDInfo)localObject2).mobileNetworkCode = n;
        ((CellIDInfo)localObject2).locationAreaCode = k;
        Logger.d("neighbor" + i + ":" + ((CellIDInfo)localObject2).toString());
        this.cellInfoList.add(localObject2);
        i += 1;
      }
    }
    Logger.d("getNetworkType, type:" + j + ", hasTelephony:" + bool1);
    if (bool1 == true)
    {
      sActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          MyPhoneStateListener localMyPhoneStateListener = new MyPhoneStateListener(LocationService.sInstance, localTelephonyManager);
          localTelephonyManager.listen(localMyPhoneStateListener, 256);
        }
      });
      return;
    }
    this.cellInfoStatus = 1;
  }
  
  public static LocationService getInstance()
  {
    return sInstance;
  }
  
  private void getWifiInfo()
  {
    Object localObject = (WifiManager)sActivity.getSystemService("wifi");
    if (localObject == null)
    {
      Logger.d("WifiManager为空");
      this.wifiStatus = 1;
      return;
    }
    this.wifiInfoList = new ArrayList();
    localObject = ((WifiManager)localObject).getScanResults();
    if (localObject == null)
    {
      Logger.d("未扫描到周围的WIFI热点");
      this.wifiStatus = 1;
      return;
    }
    int j = ((List)localObject).size();
    Logger.d("getScanResults size = " + j);
    int i = 0;
    while (i < j)
    {
      WifiInfo localWifiInfo = new WifiInfo();
      localWifiInfo.mac = ((ScanResult)((List)localObject).get(i)).BSSID;
      localWifiInfo.rssi = ((ScanResult)((List)localObject).get(i)).level;
      Logger.d("ScanResult" + i + ":" + localWifiInfo.toString());
      this.wifiInfoList.add(localWifiInfo);
      i += 1;
    }
    if (j == 0)
    {
      this.wifiStatus = 1;
      return;
    }
    this.wifiStatus = 0;
  }
  
  public ArrayList<CellIDInfo> getCellInfoList()
  {
    return this.cellInfoList;
  }
  
  public double getLatitude()
  {
    return this.latitude;
  }
  
  public double getLongitude()
  {
    return this.longitude;
  }
  
  public ArrayList<WifiInfo> getWifiInfoList()
  {
    return this.wifiInfoList;
  }
  
  public void onFail(int paramInt)
  {
    Logger.d("onFail");
    Iterator localIterator = this.listenerList.iterator();
    while (localIterator.hasNext())
    {
      LocatorListener localLocatorListener = (LocatorListener)localIterator.next();
      if (localLocatorListener != null) {
        localLocatorListener.onFail(paramInt);
      }
    }
    this.listenerList.clear();
  }
  
  public void onSuccess(int paramInt)
  {
    Iterator localIterator = this.listenerList.iterator();
    while (localIterator.hasNext())
    {
      LocatorListener localLocatorListener = (LocatorListener)localIterator.next();
      if (localLocatorListener != null) {
        localLocatorListener.onSuccess(paramInt);
      }
    }
    this.listenerList.clear();
  }
  
  public void setLatitude(double paramDouble)
  {
    this.latitude = paramDouble;
  }
  
  public void setLongitude(double paramDouble)
  {
    this.longitude = paramDouble;
  }
  
  public void startLocating(LocatorListener paramLocatorListener)
  {
    Logger.d("Start location");
    this.listenerList.add(paramLocatorListener);
    getCellIDInfo();
    getWifiInfo();
    GPSLocation();
  }
  
  static abstract interface LocatorListener
  {
    public abstract void onFail(int paramInt);
    
    public abstract void onSuccess(int paramInt);
  }
}
