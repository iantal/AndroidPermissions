package com.tencent.msdk.config;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Environment;
import com.tencent.msdk.ad.ADManager;
import com.tencent.msdk.api.eADType;
import com.tencent.msdk.notice.NoticeManager;
import com.tencent.msdk.push.PushConst;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class ConfigManager
{
  private static final String ACCEPT_SERVER_INTERVAL_KEY = "ACCEPT_SERVER_INTERVAL";
  private static final String AD_LAYOUT_PAUSE_DEFAULT_NAME = "AD_LAYOUT_PAUSE_DEFAULT";
  private static final String AD_LAYOUT_PAUSE_SHOW_NAME = "AD_LAYOUT_PAUSE_SHOW";
  private static final String AD_LAYOUT_STOP_DEFAULT_NAME = "AD_LAYOUT_STOP_DEFAULT";
  private static final String AD_LAYOUT_STOP_SHOW_NAME = "AD_LAYOUT_STOP_SHOW";
  private static final String AD_NEED_CONFIG_LAYOUT = "AD_NEED_CONFIG_LAYOUT";
  private static final String AD_PAUSE_BTN_NUM = "AD_PAUSE";
  private static final String AD_STOP_BTN_NUM = "AD_STOP";
  private static final String AD_TIME = "MSDK_AD_TIME";
  private static final String CHECK_BACKGROUND_KEY = "CHECK_BACKGROUND_TIME";
  private static final String CHECK_TOKEN_TIME_KEY = "CHECK_TOKEN_TIME";
  private static final String CLOSE_BUGLY_KEY = "CLOSE_BUGLY_REPORT";
  private static final int DEFAULT_BTN_VALUE = 2;
  private static final String IS_BETA_KEY = "BETA";
  private static final String KILL_WEBVIEW_PROCESS_KEY = "KILL_WEBVIEW_PROCESS";
  private static final String MAT_ID_KEY = "TEST_MAT_ID";
  private static final String NEED_AD_KEY = "MSDK_AD";
  public static final String NEED_LOCAL_LOG = "localLog";
  private static final String NEED_NOTICE_KEY = "needNotice";
  private static final String NEED_PUSH_KEY = "PUSH";
  private static final String NEED_STAT_LOG_KEY = "STAT_LOG";
  private static final String NEED_WXTOKEN_REFRESH = "WXTOKEN_REFRESH";
  private static final String NOTICE_TIME = "noticeTime";
  private static final String POLLING_INTERVAL_KEY = "TEST_POLLING_INTERVAL";
  private static final String POLLING_URL_KEY = "POLLING_URL";
  private static final String PUSH_URL_KEY = "PUSH_URL";
  private static String adConfigFile = "adconfig.ini";
  public static String configFileName = "msdkconfig.ini";
  private static final String domainKey = "MSDK_URL";
  private static String sPushConfigFile = "pushconfig.ini";
  
  public ConfigManager() {}
  
  public static int[] getADButtonNum(Context paramContext)
  {
    int[] arrayOfInt = new int[2];
    arrayOfInt[0] = 2;
    arrayOfInt[1] = 2;
    for (;;)
    {
      try
      {
        localObject = paramContext.getResources().getAssets().open(adConfigFile);
        paramContext = new Properties();
        paramContext.load((InputStream)localObject);
        ((InputStream)localObject).close();
        localObject = paramContext.getProperty("AD_PAUSE", String.valueOf(2));
        String str = paramContext.getProperty("AD_STOP", String.valueOf(2));
        paramContext = (Context)localObject;
        if (localObject != null) {
          paramContext = ((String)localObject).trim();
        }
        localObject = str;
        if (str != null) {
          localObject = str.trim();
        }
      }
      catch (IOException paramContext)
      {
        Object localObject;
        paramContext.printStackTrace();
        Logger.w("Please check your " + adConfigFile + " file under /assets/");
        continue;
      }
      try
      {
        arrayOfInt[0] = Integer.valueOf(paramContext).intValue();
        arrayOfInt[1] = Integer.valueOf((String)localObject).intValue();
        if ((arrayOfInt[0] != 2) && (arrayOfInt[0] != 3)) {
          arrayOfInt[0] = 2;
        }
        if ((arrayOfInt[1] != 2) && (arrayOfInt[1] != 3)) {
          arrayOfInt[1] = 2;
        }
        return arrayOfInt;
      }
      catch (NumberFormatException paramContext)
      {
        paramContext.printStackTrace();
      }
    }
  }
  
  public static int getADTime(Context paramContext)
  {
    paramContext = readValueByKey(paramContext, adConfigFile, "MSDK_AD_TIME");
    try
    {
      int i = Integer.parseInt(paramContext);
      if (i > ADManager.sADTimeLimit) {
        return i;
      }
      i = ADManager.sDefaultADTime;
      return i;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      Logger.e("Wrong Notice time :" + paramContext);
    }
    return ADManager.sDefaultADTime;
  }
  
  public static String getApiDomain(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("MSDK_URL", "");
      if ((paramContext == null) || (paramContext.length() == 0)) {
        Logger.e("No Domain Configed");
      }
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your msdkconfig.ini file under /assets/");
    }
    return "";
  }
  
  public static int getCheckBackgroundTime(Context paramContext)
  {
    paramContext = readValueByKey(paramContext, "CHECK_BACKGROUND_TIME");
    if (T.ckIsEmpty(paramContext)) {
      return 0;
    }
    try
    {
      i = Integer.parseInt(paramContext);
      return i;
    }
    catch (NumberFormatException paramContext)
    {
      for (;;)
      {
        int i = 0;
      }
    }
  }
  
  public static int getCheckTokenTime(Context paramContext)
  {
    paramContext = readValueByKey(paramContext, "CHECK_TOKEN_TIME");
    if (T.ckIsEmpty(paramContext)) {
      return 0;
    }
    try
    {
      i = Integer.parseInt(paramContext);
      return i;
    }
    catch (NumberFormatException paramContext)
    {
      for (;;)
      {
        int i = 0;
      }
    }
  }
  
  public static String getConfigADLayoutName(Context paramContext, eADType paramEADType, boolean paramBoolean)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(adConfigFile);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = null;
      if (eADType.Type_Pause == paramEADType) {
        if (paramBoolean) {
          paramContext = localProperties.getProperty("AD_LAYOUT_PAUSE_SHOW", "");
        }
      }
      while ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.w("No ADLayout Configed");
        return paramContext;
        paramContext = localProperties.getProperty("AD_LAYOUT_PAUSE_DEFAULT", "");
        continue;
        if (eADType.Type_Stop == paramEADType) {
          if (paramBoolean) {
            paramContext = localProperties.getProperty("AD_LAYOUT_STOP_SHOW", "");
          } else {
            paramContext = localProperties.getProperty("AD_LAYOUT_STOP_DEFAULT", "");
          }
        }
      }
      paramContext.trim();
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + adConfigFile + " file under /assets/");
    }
    return "";
  }
  
  public static String getConfigedMatId()
  {
    return readConfigFromSdCard(sPushConfigFile, "TEST_MAT_ID", "");
  }
  
  public static String getConfigedPollingInterval()
  {
    return readConfigFromSdCard(sPushConfigFile, "TEST_POLLING_INTERVAL", "");
  }
  
  public static String getIsServerIntervalAccepted()
  {
    return readConfigFromSdCard(sPushConfigFile, "ACCEPT_SERVER_INTERVAL", "");
  }
  
  public static int getNoticeTime(Context paramContext)
  {
    paramContext = readValueByKey(paramContext, "noticeTime");
    try
    {
      int i = Integer.parseInt(paramContext);
      if (i > NoticeManager.sNoticeTimeLimit) {
        return i;
      }
      i = NoticeManager.sDefaultNoticeTime;
      return i;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      Logger.e("Wrong Notice time :" + paramContext);
    }
    return NoticeManager.sDefaultNoticeTime;
  }
  
  public static String getPushMsgDomain()
  {
    return readConfigFromSdCard(sPushConfigFile, "PUSH_URL", "http://push.msdk.qq.com");
  }
  
  public static String getPushPollingDomain()
  {
    return readConfigFromSdCard(sPushConfigFile, "POLLING_URL", "http://polling.msdk.qq.com");
  }
  
  public static boolean isBeta(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("BETA", "");
      if ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.d("Whitelist is Closed!");
        return false;
      }
      boolean bool = "true".equals(paramContext.trim());
      if (bool) {
        return true;
      }
    }
    catch (IOException paramContext)
    {
      Logger.w("Please check your msdkconfig.ini file under /assets/");
      paramContext.printStackTrace();
    }
    return false;
  }
  
  public static boolean killWebViewProcess(Context paramContext)
  {
    boolean bool2 = true;
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("KILL_WEBVIEW_PROCESS", "");
      boolean bool1 = bool2;
      if (!T.ckIsEmpty(paramContext))
      {
        bool1 = bool2;
        if ("false".equals(paramContext.trim().toLowerCase()))
        {
          Logger.d("kill webview process");
          bool1 = false;
        }
      }
      return bool1;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + configFileName + " file under /assets/");
    }
    return true;
  }
  
  public static boolean needAD(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(adConfigFile);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("MSDK_AD", "");
      if ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.d("AD closed");
        return false;
      }
      boolean bool = "true".equals(paramContext.trim());
      if (bool) {
        return true;
      }
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + adConfigFile + " file under /assets/");
    }
    return false;
  }
  
  public static boolean needCloseBuglyReport(Context paramContext)
  {
    boolean bool2 = false;
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("CLOSE_BUGLY_REPORT", "");
      boolean bool1 = bool2;
      if (!T.ckIsEmpty(paramContext))
      {
        bool1 = bool2;
        if ("true".equals(paramContext.trim()))
        {
          Logger.d("bugly report closed");
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + configFileName + " file under /assets/");
    }
    return false;
  }
  
  public static boolean needConfigADLayout(Context paramContext)
  {
    boolean bool2 = false;
    try
    {
      paramContext = paramContext.getResources().getAssets().open(adConfigFile);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("AD_NEED_CONFIG_LAYOUT", "");
      boolean bool1 = bool2;
      if (!T.ckIsEmpty(paramContext))
      {
        bool1 = bool2;
        if ("true".equals(paramContext.trim()))
        {
          Logger.d("AD config layout allowed");
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + adConfigFile + " file under /assets/");
    }
    return false;
  }
  
  public static boolean needNotice(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("needNotice", "");
      if ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.d("needNotice closed");
        return false;
      }
      boolean bool = "true".equals(paramContext.trim());
      if (bool) {
        return true;
      }
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your msdkconfig.ini file under /assets/");
    }
    return false;
  }
  
  public static boolean needPush(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("PUSH", "");
      if ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.d("push closed");
        return false;
      }
      boolean bool = "true".equals(paramContext.trim());
      if (bool) {
        return true;
      }
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + configFileName + " file under /assets/");
    }
    return false;
  }
  
  public static boolean needStatLog(Context paramContext)
  {
    boolean bool2 = true;
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("STAT_LOG", "");
      boolean bool1 = bool2;
      if (!T.ckIsEmpty(paramContext))
      {
        bool1 = bool2;
        if ("false".equals(paramContext.trim()))
        {
          Logger.d("stat log closed");
          bool1 = false;
        }
      }
      return bool1;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + configFileName + " file under /assets/");
    }
    return true;
  }
  
  public static boolean needWXTokenRefresh(Context paramContext)
  {
    boolean bool2 = true;
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty("WXTOKEN_REFRESH", "");
      boolean bool1 = bool2;
      if (!T.ckIsEmpty(paramContext))
      {
        bool1 = bool2;
        if ("false".equals(paramContext.trim()))
        {
          Logger.d("NEED_WXTOKEN_REFRESH closed");
          bool1 = false;
        }
      }
      return bool1;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + configFileName + " file under /assets/");
    }
    return true;
  }
  
  private static String readConfigFromSdCard(String paramString1, String paramString2, String paramString3)
  {
    if (!"mounted".equals(Environment.getExternalStorageState())) {
      return paramString3;
    }
    try
    {
      paramString1 = new FileInputStream(new File(PushConst.PUSH_ROOT_DIR + paramString1));
      Properties localProperties = new Properties();
      localProperties.load(paramString1);
      paramString1.close();
      paramString1 = localProperties.getProperty(paramString2, "");
      if ((paramString1 == null) || (paramString1.length() == 0))
      {
        Logger.d("no key: " + paramString2);
        return paramString3;
      }
    }
    catch (FileNotFoundException paramString1)
    {
      paramString1.printStackTrace();
      return paramString3;
      paramString1 = paramString1.trim();
      return paramString1;
    }
    catch (IOException paramString1)
    {
      paramString1.printStackTrace();
    }
    return paramString3;
  }
  
  public static String readValueByKey(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(configFileName);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty(paramString, "");
      if ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.d("no key: " + paramString);
        return "";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + paramString + " in msdkconfig.ini file under /assets/");
    }
    return "";
  }
  
  public static String readValueByKey(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(paramString1);
      Properties localProperties = new Properties();
      localProperties.load(paramContext);
      paramContext.close();
      paramContext = localProperties.getProperty(paramString2, "");
      if ((paramContext == null) || (paramContext.length() == 0))
      {
        Logger.d("no key: " + paramString2);
        return "";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
      Logger.w("Please check your " + paramString1 + " file under /assets/");
    }
    return "";
  }
}
