package com.tencent.msdk.ad.view;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.ViewParent;
import android.view.animation.Interpolator;
import android.widget.Scroller;
import java.lang.reflect.Field;

public class ADScrollViewPager
  extends ViewPager
{
  public static final int DEFAULT_INTERVAL = 1500;
  public static final int LEFT = 0;
  public static final int MSG_SCROLL_NEXT = 0;
  public static final int RIGHT = 1;
  private int mDirection = 1;
  private Handler mHandler;
  private long mInterval = 1500L;
  private boolean mIsAutoScroll = false;
  private boolean mIsCycle = true;
  private boolean mIsStopByTouch = false;
  private Scroller mScroller = null;
  private boolean mStopScrollWhenTouch = true;
  
  public ADScrollViewPager(Context paramContext)
  {
    super(paramContext);
    init();
  }
  
  public ADScrollViewPager(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init();
  }
  
  private void init()
  {
    this.mHandler = new ScrollHandler(null);
    setViewPagerScroller();
  }
  
  private void sendScrollMessage(long paramLong)
  {
    this.mHandler.removeMessages(0);
    this.mHandler.sendEmptyMessageDelayed(0, paramLong);
  }
  
  private void setViewPagerScroller()
  {
    try
    {
      Field localField1 = ViewPager.class.getDeclaredField("mScroller");
      localField1.setAccessible(true);
      Field localField2 = ViewPager.class.getDeclaredField("sInterpolator");
      localField2.setAccessible(true);
      this.mScroller = new Scroller(getContext(), (Interpolator)localField2.get(null));
      localField1.set(this, this.mScroller);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public int getDirection()
  {
    if (this.mDirection == 0) {
      return 0;
    }
    return 1;
  }
  
  public long getInterval()
  {
    return this.mInterval;
  }
  
  public boolean isCycle()
  {
    return this.mIsCycle;
  }
  
  public boolean isStopScrollWhenTouch()
  {
    return this.mStopScrollWhenTouch;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (this.mStopScrollWhenTouch)
    {
      if ((paramMotionEvent.getAction() != 0) || (!this.mIsAutoScroll)) {
        break label46;
      }
      this.mIsStopByTouch = true;
      stopAutoScroll();
    }
    for (;;)
    {
      getParent().requestDisallowInterceptTouchEvent(true);
      return super.onTouchEvent(paramMotionEvent);
      label46:
      if ((paramMotionEvent.getAction() == 1) && (this.mIsStopByTouch)) {
        startAutoScroll();
      }
    }
  }
  
  public void scrollNext()
  {
    PagerAdapter localPagerAdapter = getAdapter();
    int i = getCurrentItem();
    int k;
    if (localPagerAdapter != null)
    {
      k = localPagerAdapter.getCount();
      if (k > 1) {}
    }
    else
    {
      return;
    }
    int j;
    if (this.mDirection == 0)
    {
      i -= 1;
      j = i;
      if (i >= 0) {
        break label70;
      }
      if (this.mIsCycle) {
        setCurrentItem(k - 1, true);
      }
    }
    for (;;)
    {
      return;
      i += 1;
      j = i;
      break;
      label70:
      if (i == k)
      {
        if (this.mIsCycle) {
          setCurrentItem(0, true);
        }
      }
      else {
        setCurrentItem(i, true);
      }
    }
  }
  
  public void setCycle(boolean paramBoolean)
  {
    this.mIsCycle = paramBoolean;
  }
  
  public void setDirection(int paramInt)
  {
    this.mDirection = paramInt;
  }
  
  public void setInterval(long paramLong)
  {
    this.mInterval = paramLong;
  }
  
  public void setStopScrollWhenTouch(boolean paramBoolean)
  {
    this.mStopScrollWhenTouch = paramBoolean;
  }
  
  public void startAutoScroll()
  {
    this.mIsAutoScroll = true;
    sendScrollMessage(this.mInterval);
  }
  
  public void startAutoScroll(int paramInt)
  {
    this.mIsAutoScroll = true;
    sendScrollMessage(paramInt);
  }
  
  public void stopAutoScroll()
  {
    this.mIsAutoScroll = false;
    this.mHandler.removeMessages(0);
  }
  
  private class ScrollHandler
    extends Handler
  {
    private ScrollHandler() {}
    
    public void handleMessage(Message paramMessage)
    {
      super.handleMessage(paramMessage);
      switch (paramMessage.what)
      {
      default: 
        return;
      }
      ADScrollViewPager.this.scrollNext();
      ADScrollViewPager.this.sendScrollMessage(ADScrollViewPager.this.mInterval);
    }
  }
}
