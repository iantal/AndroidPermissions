package com.tencent.msdk.ad.view;

import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import com.tencent.msdk.ad.ADItem;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.stat.ReportEvent;
import com.tencent.msdk.stat.eEVENT_TYPE;
import com.tencent.msdk.tools.Logger;
import java.util.HashSet;
import java.util.List;

public class ADPagerAdapter
  extends ScrollPagerAdapter
  implements View.OnClickListener
{
  public static final int MAX_VALUE = Integer.MAX_VALUE;
  private List<ADItem> adItemList;
  private Context context;
  private boolean isLooper;
  private HashSet<Integer> mRecordADShowId = new HashSet();
  private int size;
  
  public ADPagerAdapter(Context paramContext, List<ADItem> paramList)
  {
    this.context = paramContext;
    this.adItemList = paramList;
    this.size = paramList.size();
    this.isLooper = false;
  }
  
  private int getPosition(int paramInt)
  {
    int i = paramInt;
    if (this.isLooper) {
      i = paramInt % this.size;
    }
    return i;
  }
  
  public int getCount()
  {
    if (this.isLooper) {
      return Integer.MAX_VALUE;
    }
    return this.adItemList.size();
  }
  
  public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    if (paramView == null)
    {
      paramViewGroup = new ViewHolder(null);
      paramView = new ImageView(this.context);
      paramViewGroup.imageView = paramView;
      paramViewGroup.imageView.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
      paramViewGroup.imageView.setScaleType(ImageView.ScaleType.FIT_XY);
      paramViewGroup.imageView.setOnClickListener(this);
      paramView.setTag(paramViewGroup);
    }
    for (;;)
    {
      paramViewGroup.pos = paramInt;
      ADItem localADItem = (ADItem)this.adItemList.get(getPosition(paramInt));
      paramViewGroup.imageView.setImageBitmap(localADItem.bitmap);
      return paramView;
      paramViewGroup = (ViewHolder)paramView.getTag();
    }
  }
  
  public boolean isLoop()
  {
    return this.isLooper;
  }
  
  public void onClick(View paramView)
  {
    paramView = (ViewHolder)paramView.getTag();
    if (paramView == null) {}
    int i;
    int j;
    ADItem localADItem;
    do
    {
      return;
      i = paramView.pos;
      j = getPosition(i);
      Logger.d("other rawPos:" + i + ", frame:" + j);
      localADItem = (ADItem)this.adItemList.get(j);
    } while (localADItem == null);
    if ("other item:" + localADItem == null) {}
    for (paramView = null;; paramView = localADItem.toString() + ",rawPos:" + i)
    {
      Logger.d(paramView);
      WGPlatform.WGOpenUrl(localADItem.jumpUrl);
      ReportEvent.ReportADEvent(eEVENT_TYPE.eEVENT_AD_MORE, String.valueOf(localADItem.adid), String.valueOf(localADItem.adType), j);
      return;
    }
  }
  
  public void reportADShowEvent(int paramInt)
  {
    int i = getPosition(paramInt);
    ADItem localADItem = (ADItem)this.adItemList.get(i);
    if ("reportADShowEvent:" + localADItem == null) {}
    for (String str = null;; str = localADItem.toString() + ", pos:" + paramInt + ",frame:" + i)
    {
      Logger.d(str);
      if (!this.mRecordADShowId.contains(Integer.valueOf(localADItem.adid))) {
        break;
      }
      Logger.d("repeat report adid:" + localADItem.adid);
      return;
    }
    Logger.d("report adid:" + localADItem.adid);
    this.mRecordADShowId.add(Integer.valueOf(localADItem.adid));
    ReportEvent.ReportADEvent(eEVENT_TYPE.eEVENT_AD_SHOW, String.valueOf(localADItem.adid), String.valueOf(localADItem.adType), i);
  }
  
  public ADPagerAdapter setLoopMode(boolean paramBoolean)
  {
    this.isLooper = paramBoolean;
    return this;
  }
  
  private static class ViewHolder
  {
    ImageView imageView;
    int pos;
    
    private ViewHolder() {}
  }
}
