package com.tencent.msdk.ad.request;

import com.tencent.msdk.ad.ADInfo;
import com.tencent.msdk.ad.ADManager;
import com.tencent.msdk.tools.DownloadThread;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.File;
import java.io.FilenameFilter;
import java.net.MalformedURLException;
import java.net.URL;

public class ADPic
{
  public int mADId = -1;
  public String mPicHash = "";
  public String mPicUrl = "";
  
  public ADPic() {}
  
  public ADPic(int paramInt, String paramString1, String paramString2)
  {
    this.mADId = paramInt;
    this.mPicUrl = paramString1;
    this.mPicHash = paramString2;
  }
  
  public static Boolean checkPicExist(int paramInt, String paramString1, String paramString2)
  {
    if (T.ckIsEmpty(paramString1)) {
      return Boolean.valueOf(false);
    }
    if (new File(getLocalFilePathByIdURLHashValue(paramInt, paramString1, paramString2)).exists()) {
      return Boolean.valueOf(true);
    }
    return Boolean.valueOf(false);
  }
  
  public static void deletePicById(int paramInt)
  {
    String[] arrayOfString = getExternalMSDKDir().list(new FilenameFilter()
    {
      public boolean accept(File paramAnonymousFile, String paramAnonymousString)
      {
        return paramAnonymousString.contains(this.val$fileNameString);
      }
    });
    if (arrayOfString != null)
    {
      int i = arrayOfString.length;
      paramInt = 0;
      while (paramInt < i)
      {
        Object localObject = arrayOfString[paramInt];
        localObject = new File(getExternalMSDKDir(), (String)localObject);
        Logger.d("delete file:", ((File)localObject).toString());
        ((File)localObject).delete();
        paramInt += 1;
      }
    }
  }
  
  public static void downloadPic(ADPic paramADPic)
  {
    if ((paramADPic == null) || (T.ckIsEmpty(paramADPic.getmPicHash())) || (T.ckIsEmpty(paramADPic.getmPicUrl()))) {
      return;
    }
    try
    {
      if (checkPicExist(paramADPic.getmADId(), paramADPic.getmPicUrl(), paramADPic.getmPicHash()).booleanValue()) {
        break label101;
      }
      String str = getLocalFilePathByIdURLHashValue(paramADPic.getmADId(), paramADPic.getmPicUrl(), paramADPic.getmPicHash());
      if (!T.ckIsEmpty(str))
      {
        DownloadThread.addToDownloadQueue(new URL(paramADPic.getmPicUrl()), str, paramADPic.getmPicHash());
        return;
      }
    }
    catch (MalformedURLException paramADPic)
    {
      paramADPic.printStackTrace();
      return;
    }
    Logger.w("filePathString is empty");
    return;
    label101:
    Logger.w("file has exist");
  }
  
  public static File getExternalMSDKDir()
  {
    File localFile = new File(ADManager.sPicPath, "MSDK");
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    return localFile;
  }
  
  public static String getLocalFilePathByIdURLHashValue(int paramInt, String paramString1, String paramString2)
  {
    if ((T.ckIsEmpty(paramString1)) || (paramInt < 1) || (T.ckIsEmpty(paramString2))) {
      return "";
    }
    paramString1 = paramString1.split("\\.");
    return new File(getExternalMSDKDir(), "AD_" + paramInt + "_" + paramString2 + "." + paramString1[(paramString1.length - 1)]).toString();
  }
  
  public static void savePics(ADInfo paramADInfo)
  {
    if (paramADInfo == null) {}
    while (T.ckIsEmpty(paramADInfo.mPicUrl)) {
      return;
    }
    Logger.d("add to queue :" + paramADInfo.mADId + "," + paramADInfo.mPicUrl);
    downloadPic(new ADPic(paramADInfo.mADId, paramADInfo.mPicUrl, paramADInfo.mHashValue));
  }
  
  public int getmADId()
  {
    return this.mADId;
  }
  
  public String getmPicHash()
  {
    return this.mPicHash;
  }
  
  public String getmPicUrl()
  {
    return this.mPicUrl;
  }
  
  public void setmADId(int paramInt)
  {
    this.mADId = paramInt;
  }
  
  public void setmPicHash(String paramString)
  {
    if (!T.ckIsEmpty(paramString)) {
      this.mPicHash = paramString;
    }
  }
  
  public void setmPicUrl(String paramString)
  {
    if (!T.ckIsEmpty(paramString)) {
      this.mPicUrl = paramString;
    }
  }
}
