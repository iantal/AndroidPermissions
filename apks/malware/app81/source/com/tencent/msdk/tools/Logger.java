package com.tencent.msdk.tools;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import com.tencent.msdk.config.ConfigManager;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;

public class Logger
{
  public static final int ASSERT = 7;
  public static final int DEBUG = 3;
  public static String DEFAULT_TAG = "WeGame";
  public static final int ERROR = 6;
  public static final int INFO = 4;
  public static final int LOG_BOTH = 3;
  public static final int LOG_CONSOLE = 1;
  public static final int LOG_FILE = 2;
  private static final long LOG_FILE_SIZE = 10485760L;
  private static final int LOG_NULL = 0;
  private static final int STACK_TRACE_DEEP = 4;
  public static final int VERBOSE = 2;
  public static final int WARN = 5;
  private static FileLogHandler fileLog;
  private static int logDevice = 1;
  
  public Logger() {}
  
  public static void d(Intent paramIntent)
  {
    if (logDevice == 0) {
      return;
    }
    String str1 = getTag(null, 4);
    if ((paramIntent == null) || (paramIntent.getExtras() == null))
    {
      d("********************** INTENT START **************************");
      showLog(3, str1, "empty Intent", logDevice);
      d("********************** INTENT END **************************");
      return;
    }
    d("********************** INTENT START **************************");
    showLog(3, str1, "Action: " + paramIntent.getAction(), logDevice);
    showLog(3, str1, "Component: " + paramIntent.getComponent(), logDevice);
    showLog(3, str1, "Flags: " + paramIntent.getFlags(), logDevice);
    showLog(3, str1, "Scheme: " + paramIntent.getScheme(), logDevice);
    for (;;)
    {
      String str2;
      try
      {
        paramIntent = paramIntent.getExtras();
        Iterator localIterator = paramIntent.keySet().iterator();
        if (localIterator.hasNext())
        {
          str2 = (String)localIterator.next();
          if (!(paramIntent.get(str2) instanceof byte[])) {
            break label267;
          }
          showLog(3, str1, str2 + ":" + HexUtil.bytes2HexStr(paramIntent.getByteArray(str2)), logDevice);
        }
        if (!(paramIntent.get(str2) instanceof String)) {
          break label316;
        }
      }
      catch (Exception paramIntent)
      {
        paramIntent.printStackTrace();
        d("********************** INTENT END **************************");
        return;
      }
      label267:
      showLog(3, str1, str2 + ":" + paramIntent.getString(str2), logDevice);
      continue;
      label316:
      if ((paramIntent.get(str2) instanceof Long)) {
        showLog(3, str1, str2 + ":" + paramIntent.getLong(str2), logDevice);
      } else if ((paramIntent.get(str2) instanceof Integer)) {
        showLog(3, str1, str2 + ":" + paramIntent.getInt(str2), logDevice);
      } else {
        showLog(3, str1, str2, logDevice);
      }
    }
  }
  
  public static void d(Bundle paramBundle)
  {
    if (logDevice == 0) {}
    for (;;)
    {
      return;
      String str1 = getTag(null, 4);
      if (paramBundle == null)
      {
        showLog(3, str1, "empty bundle", logDevice);
        return;
      }
      Iterator localIterator = paramBundle.keySet().iterator();
      while (localIterator.hasNext())
      {
        String str2 = (String)localIterator.next();
        if ((paramBundle.get(str2) instanceof byte[])) {
          showLog(3, str1, str2 + ":" + HexUtil.bytes2HexStr(paramBundle.getByteArray(str2)), logDevice);
        } else if ((paramBundle.get(str2) instanceof String)) {
          showLog(3, str1, str2 + ":" + paramBundle.getString(str2), logDevice);
        } else if ((paramBundle.get(str2) instanceof Long)) {
          showLog(3, str1, str2 + ":" + paramBundle.getLong(str2), logDevice);
        } else if ((paramBundle.get(str2) instanceof Integer)) {
          showLog(3, str1, str2 + ":" + paramBundle.getInt(str2), logDevice);
        } else {
          showLog(3, str1, str2, logDevice);
        }
      }
    }
  }
  
  public static void d(Object paramObject)
  {
    if (logDevice == 0) {
      return;
    }
    String str = getTag(null, 4);
    if (paramObject == null)
    {
      showLog(3, str, "empty msg", logDevice);
      return;
    }
    showLog(3, str, paramObject.toString(), logDevice);
  }
  
  public static void d(String paramString)
  {
    if (logDevice > 0) {
      showLog(3, getTag(null, 4), " " + paramString, logDevice);
    }
  }
  
  public static void d(String paramString1, String paramString2)
  {
    if (logDevice > 0) {
      showLog(3, paramString1, paramString2, logDevice);
    }
  }
  
  public static void e(String paramString)
  {
    if (logDevice > 0) {
      showLog(6, getTag(null, 4), paramString, logDevice);
    }
  }
  
  public static void e(String paramString1, String paramString2)
  {
    if (logDevice > 0) {
      showLog(6, paramString1, paramString2, logDevice);
    }
  }
  
  public static void e(String paramString, Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return;
    }
    StackTraceElement[] arrayOfStackTraceElement = new Throwable().getStackTrace();
    if (arrayOfStackTraceElement.length > 1)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("class : ").append(arrayOfStackTraceElement[1].getClassName()).append("; line : ").append(arrayOfStackTraceElement[1].getLineNumber());
      showLog(6, paramString, localStringBuilder.toString(), logDevice);
    }
    paramThrowable.printStackTrace();
  }
  
  public static String getTag(String paramString, int paramInt)
  {
    Object localObject = Thread.currentThread().getStackTrace();
    if ((paramInt < 0) || (paramInt >= localObject.length)) {
      return DEFAULT_TAG;
    }
    String str1 = localObject[paramInt].getClassName();
    String str2 = localObject[paramInt].getMethodName();
    localObject = "";
    paramInt = str1.lastIndexOf('.');
    if (paramInt != -1) {
      localObject = str1.substring(paramInt + 1);
    }
    if (CommonUtil.ckIsEmpty(paramString)) {}
    for (paramString = DEFAULT_TAG + " " + (String)localObject + "." + str2;; paramString = DEFAULT_TAG + ">" + paramString + " " + (String)localObject + "." + str2) {
      return paramString;
    }
  }
  
  public static void init()
  {
    if (logDevice > 1) {
      fileLog = new FileLogHandler();
    }
  }
  
  public static void setLogType(Activity paramActivity)
  {
    paramActivity = ConfigManager.readValueByKey(paramActivity.getBaseContext(), "localLog");
    try
    {
      i = Integer.parseInt(paramActivity);
      Log.d(DEFAULT_TAG, "Logger type: " + i);
      switch (i)
      {
      default: 
        logDevice = 1;
        if (logDevice > 1) {
          fileLog = new FileLogHandler();
        }
        return;
      }
    }
    catch (Exception paramActivity)
    {
      for (;;)
      {
        int i = 1;
        continue;
        logDevice = 1;
        continue;
        logDevice = 2;
        continue;
        logDevice = 3;
        continue;
        logDevice = 0;
      }
    }
  }
  
  public static void showInConsole(int paramInt, String paramString1, String paramString2)
  {
    String str = paramString2;
    if (paramString2 == null) {
      str = "NULL MSG";
    }
    switch (paramInt)
    {
    default: 
      return;
    case 6: 
      Log.e(paramString1, str);
      return;
    case 5: 
      Log.w(paramString1, str);
      return;
    case 3: 
      Log.d(paramString1, str);
      return;
    case 4: 
      Log.i(paramString1, str);
      return;
    }
    Log.v(paramString1, str);
  }
  
  public static void showLog(int paramInt1, String paramString1, String paramString2, int paramInt2)
  {
    String str = paramString2;
    if (T.ckIsEmpty(paramString2)) {
      str = "NULL MSG";
    }
    paramString2 = paramString1;
    if (paramString1.length() > 89)
    {
      showInConsole(6, DEFAULT_TAG, "tag is longer than 89");
      paramString2 = paramString1.substring(0, 86) + "...";
    }
    switch (paramInt2)
    {
    default: 
      return;
    case 1: 
      showInConsole(paramInt1, paramString2, str);
      return;
    case 2: 
      writeToLog(System.currentTimeMillis() / 1000L + "\t" + paramString2 + "\t" + str);
      return;
    }
    showInConsole(paramInt1, paramString2, str);
    writeToLog(System.currentTimeMillis() / 1000L + "\t" + paramString2 + "\t" + str);
  }
  
  public static void timeStamp(Exception paramException, String paramString)
  {
    paramException = paramException.getStackTrace()[0];
    String str1 = paramException.getClassName();
    String str2 = paramException.getMethodName();
    int i = paramException.getLineNumber();
    if (paramString == null) {}
    for (paramException = "";; paramException = paramString + "-")
    {
      d("TimeStamp", paramException + str1 + "." + str2 + "():" + i);
      return;
    }
  }
  
  public static void w(String paramString)
  {
    if (logDevice > 0) {
      showLog(5, getTag(null, 4), paramString, logDevice);
    }
  }
  
  public static void w(String paramString1, String paramString2)
  {
    if (logDevice > 0) {
      showLog(5, paramString1, paramString2, logDevice);
    }
  }
  
  private static void writeToLog(String paramString)
  {
    Message localMessage = fileLog.obtainMessage();
    localMessage.obj = paramString;
    fileLog.sendMessage(localMessage);
  }
  
  private static class FileLogHandler
    extends Handler
  {
    private boolean hasSDCard = true;
    private File logFile;
    private FileOutputStream logOutput;
    
    FileLogHandler()
    {
      if (this.hasSDCard) {
        try
        {
          this.logFile = FileUtils.getLogFile();
          if (!this.logFile.exists())
          {
            this.logFile.createNewFile();
            return;
          }
          long l = this.logFile.length();
          if (l > 10485760L)
          {
            Log.d(Logger.DEFAULT_TAG, "Log size larger than LOG_FILE_SIZE:" + String.valueOf(l));
            this.logFile.delete();
            this.logFile.createNewFile();
            return;
          }
        }
        catch (IOException localIOException) {}
      }
    }
    
    FileOutputStream getLogOutput()
      throws Exception
    {
      if (this.logOutput == null) {
        this.logOutput = new FileOutputStream(this.logFile, true);
      }
      return this.logOutput;
    }
    
    public void handleMessage(Message paramMessage)
    {
      if (!this.hasSDCard) {}
      for (;;)
      {
        return;
        try
        {
          paramMessage = (String)paramMessage.obj + "\n";
          if (paramMessage != null)
          {
            paramMessage = paramMessage.getBytes();
            getLogOutput().write(paramMessage, 0, paramMessage.length);
            return;
          }
        }
        catch (Exception paramMessage)
        {
          paramMessage.printStackTrace();
        }
      }
    }
  }
}
