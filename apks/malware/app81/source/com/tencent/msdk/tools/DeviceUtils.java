package com.tencent.msdk.tools;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import java.util.Locale;

public class DeviceUtils
{
  public static final String APN_PROP_PROXY = "proxy";
  public static final int MPROXYTYPE_3GNET = 11;
  public static final int MPROXYTYPE_3GWAP = 10;
  public static final int MPROXYTYPE_CMNET = 1;
  public static final int MPROXYTYPE_CMWAP = 2;
  public static final int MPROXYTYPE_CTNET = 8;
  public static final int MPROXYTYPE_CTWAP = 9;
  public static final int MPROXYTYPE_DEFAULT = 0;
  public static final int MPROXYTYPE_NET = 6;
  public static final int MPROXYTYPE_UNINET = 4;
  public static final int MPROXYTYPE_UNIWAP = 5;
  public static final int MPROXYTYPE_WAP = 7;
  public static final int MPROXYTYPE_WIFI = 3;
  private static Uri PREFERRED_APN_URI = Uri.parse("content://telephony/carriers/preferapn");
  Class<Build> clz = Build.class;
  
  public DeviceUtils() {}
  
  public static String getApnProxy(Context paramContext)
  {
    paramContext = paramContext.getContentResolver().query(PREFERRED_APN_URI, null, null, null, null);
    paramContext.moveToFirst();
    if (paramContext.isAfterLast())
    {
      paramContext.close();
      return null;
    }
    String str = paramContext.getString(paramContext.getColumnIndex("proxy"));
    paramContext.close();
    return str;
  }
  
  public static String getBrand()
  {
    return Build.BRAND;
  }
  
  public static String getManufacturer()
  {
    return Build.MANUFACTURER;
  }
  
  public static int getNetworkType(Context paramContext)
  {
    if (paramContext == null) {}
    for (;;)
    {
      return 0;
      try
      {
        Object localObject = (ConnectivityManager)paramContext.getSystemService("connectivity");
        if (localObject != null)
        {
          localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
          if (localObject != null)
          {
            String str = ((NetworkInfo)localObject).getTypeName();
            Logger.d("typeName:" + str);
            if (str.toUpperCase(Locale.CHINESE).equals("WIFI")) {
              return 3;
            }
            localObject = ((NetworkInfo)localObject).getExtraInfo().toLowerCase(Locale.CHINESE);
            Logger.d("extraInfo:" + (String)localObject);
            if (((String)localObject).startsWith("cmwap")) {
              return 2;
            }
            if ((!((String)localObject).startsWith("cmnet")) && (!((String)localObject).startsWith("epc.tmobile.com")))
            {
              if (((String)localObject).startsWith("uniwap")) {
                return 5;
              }
              if (((String)localObject).startsWith("uninet")) {
                return 4;
              }
              if (((String)localObject).startsWith("wap")) {
                return 7;
              }
              if (((String)localObject).startsWith("net")) {
                return 6;
              }
              if (((String)localObject).startsWith("ctwap")) {
                return 9;
              }
              if (((String)localObject).startsWith("ctnet")) {
                return 8;
              }
              if (((String)localObject).startsWith("3gwap")) {
                return 10;
              }
              if (((String)localObject).startsWith("3gnet")) {
                return 11;
              }
              if (!((String)localObject).startsWith("#777")) {
                continue;
              }
              paramContext = getApnProxy(paramContext);
              if (paramContext != null)
              {
                int i = paramContext.length();
                if (i > 0) {
                  return 9;
                }
              }
              return 8;
            }
          }
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return 0;
      }
    }
    return 1;
  }
  
  public static String getScreenResolution(Activity paramActivity)
  {
    if (paramActivity == null) {
      return "";
    }
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    paramActivity.getWindowManager().getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.heightPixels + "*" + localDisplayMetrics.widthPixels;
  }
  
  public static String getVersionRelease()
  {
    return Build.VERSION.RELEASE;
  }
}
