package com.tencent.msdk.webview;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.ad.ADManager;
import com.tencent.msdk.ad.ADPosInfo;
import com.tencent.msdk.api.LoginRet;
import com.tencent.msdk.api.WGPlatform;
import com.tencent.msdk.login.LoginUtils;
import com.tencent.msdk.notice.NoticeManager;
import com.tencent.msdk.permission.PermissionManage;
import com.tencent.msdk.tea.DesUtils;
import com.tencent.msdk.tea.TEACoding;
import com.tencent.msdk.tools.HexUtil;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.MsdkSig;
import com.tencent.msdk.tools.T;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;

public class WebViewManager
{
  private static WebViewManager instance = null;
  private Activity act = null;
  private Boolean isInit = Boolean.valueOf(false);
  public String qqAppId = null;
  private String url = "";
  
  public WebViewManager() {}
  
  public static WebViewManager getInstance()
  {
    if (instance == null) {}
    try
    {
      if (instance == null) {
        instance = new WebViewManager();
      }
      return instance;
    }
    finally {}
  }
  
  private boolean isWXInstall()
  {
    return (WeGame.getInstance().api != null) && (WeGame.getInstance().api.isWXAppInstalled());
  }
  
  private void loadUrlInWnd(String paramString1, String paramString2)
  {
    Intent localIntent = new Intent();
    localIntent.putExtra("url", paramString1);
    localIntent.putExtra("sharedUrl", paramString2);
    paramString1 = ADManager.getInstance().getPosInfoById("3");
    if ((paramString1 != null) && (!T.ckIsEmpty(paramString1.mADPosUrl))) {
      paramString2 = paramString1.mADPosUrl;
    }
    for (paramString1 = paramString1.mADIds;; paramString1 = "")
    {
      localIntent.putExtra("favUrl", paramString2);
      localIntent.putExtra("adIds", paramString1);
      boolean bool1 = PermissionManage.getInstance().isHavePermission("WGSendToQQ");
      boolean bool2 = PermissionManage.getInstance().isHavePermission("WGSendToWeixin");
      localIntent.putExtra("sendToQQ", bool1);
      localIntent.putExtra("sendToWX", bool2);
      localIntent.putExtra("isWXInstall", isWXInstall());
      localIntent.setClass(this.act, WebViewActivity.class);
      try
      {
        this.act.startActivity(localIntent);
        return;
      }
      catch (ActivityNotFoundException paramString1)
      {
        Logger.w("cann't start WVMActivityï¼ŒAre you sure to register activity?");
        NoticeManager.getInstance().onResume();
      }
      paramString2 = "";
    }
  }
  
  public String getCurrentUrl()
  {
    return this.url;
  }
  
  public void init(Activity paramActivity, String paramString)
  {
    if (!this.isInit.booleanValue())
    {
      this.isInit = Boolean.valueOf(true);
      this.act = paramActivity;
      this.qqAppId = paramString;
    }
  }
  
  public void openUrl(String paramString)
  {
    Logger.d(paramString);
    LoginRet localLoginRet = new LoginRet();
    LoginUtils.getLocalLoginRet(localLoginRet);
    if (paramString == null)
    {
      Logger.w("this api need a valid url start with http:// or https:// or file:// or ftp://");
      return;
    }
    String str1 = paramString;
    if (!paramString.startsWith("http://"))
    {
      str1 = paramString;
      if (!paramString.startsWith("https://"))
      {
        str1 = paramString;
        if (!paramString.startsWith("file://"))
        {
          str1 = paramString;
          if (!paramString.startsWith("ftp://"))
          {
            Logger.w("you had better use a valid url start with http:// or https:// or ftp:// or file://");
            str1 = "http://" + paramString;
          }
        }
      }
    }
    for (;;)
    {
      String str3;
      Object localObject;
      String str2;
      String str4;
      try
      {
        if (T.ckIsEmpty(new URL(str1).getQuery()))
        {
          paramString = str1 + "?";
          paramString = paramString + "algorithm=v2";
          paramString = paramString + "&version=" + WGPlatform.WGGetVersion();
          str3 = "" + System.currentTimeMillis();
          localObject = paramString + "&timestamp=" + str3;
          str2 = "";
          if (localLoginRet.platform != WeGame.QQPLATID) {
            break label677;
          }
          str4 = WeGame.getInstance().qq_appid;
          str2 = localLoginRet.open_id;
          paramString = (String)localObject + "&appid=" + str4;
          paramString = paramString + "&openid=" + str2;
          paramString = paramString + "&sig=" + MsdkSig.make(new StringBuilder().append("").append(str3).toString(), WeGame.getInstance().getMSDKKey());
          paramString = paramString + "&encode=2";
          localObject = "" + "acctype=qq";
          localObject = (String)localObject + "&appid=" + str4;
          str2 = (String)localObject + "&openid=" + str2;
          str2 = str2 + "&access_token=" + localLoginRet.getTokenByType(1);
          str2 = str2 + "&platid=1";
          localObject = new TEACoding(DesUtils.REQUEST_KEY);
        }
      }
      catch (MalformedURLException paramString)
      {
        Logger.w("this api need a valid url start with http:// or https:// ");
        paramString.printStackTrace();
        return;
      }
      try
      {
        str2 = HexUtil.bytes2HexStr(((TEACoding)localObject).encode(str2.getBytes("ISO-8859-1")));
        Logger.d("hexEncry: " + str2);
        str2 = paramString + "&msdkEncodeParam=" + str2;
        paramString = str2;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        localUnsupportedEncodingException.printStackTrace();
        continue;
      }
      this.url = paramString;
      Logger.d("open url = " + paramString);
      NoticeManager.getInstance().onPause();
      loadUrlInWnd(this.url, str1);
      return;
      paramString = str1;
      if (!str1.endsWith("&"))
      {
        paramString = str1 + "&";
        continue;
        label677:
        paramString = (String)localObject;
        if (localLoginRet.platform == WeGame.WXPLATID)
        {
          str4 = WeGame.getInstance().wx_appid;
          str2 = localLoginRet.open_id;
          paramString = (String)localObject + "&appid=" + str4;
          paramString = paramString + "&openid=" + str2;
          paramString = paramString + "&sig=" + MsdkSig.make(new StringBuilder().append("").append(str3).toString(), WeGame.getInstance().getMSDKKey());
          paramString = paramString + "&encode=2";
          localObject = "" + "acctype=weixin";
          localObject = (String)localObject + "&appid=" + str4;
          str2 = (String)localObject + "&openid=" + str2;
          str2 = str2 + "&access_token=" + localLoginRet.getTokenByType(3);
          str2 = str2 + "&platid=1";
        }
      }
    }
  }
}
