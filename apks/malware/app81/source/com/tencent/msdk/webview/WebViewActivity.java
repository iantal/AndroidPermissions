package com.tencent.msdk.webview;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Process;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager.LayoutParams;
import android.webkit.ValueCallback;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.Toast;
import com.tencent.msdk.config.ConfigManager;
import com.tencent.msdk.tools.CommonUtil;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import com.tencent.smtt.export.external.extension.interfaces.IX5WebViewExtension;
import com.tencent.smtt.sdk.CookieSyncManager;
import com.tencent.smtt.sdk.DownloadListener;
import com.tencent.smtt.sdk.WebChromeClient;
import com.tencent.smtt.sdk.WebSettings;
import com.tencent.smtt.sdk.WebSettings.LayoutAlgorithm;
import com.tencent.smtt.sdk.WebSettings.PluginState;
import com.tencent.smtt.sdk.WebSettings.RenderPriority;
import com.tencent.smtt.sdk.WebView;
import com.tencent.smtt.sdk.WebViewClient;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class WebViewActivity
  extends Activity
  implements View.OnClickListener, AdapterView.OnItemClickListener
{
  private static final int THUMB_SIZE = 200;
  private Button cancelBtn;
  private String mAdIds;
  private SimpleAdapter mAdapter;
  private ImageButton mBackBtn;
  private Dialog mDownloadDlg;
  private ImageButton mFavBtn;
  private String mFavUrl;
  private ImageButton mForwardBtn;
  private GridView mGridView;
  private boolean mIsWXInstall;
  private ArrayList<HashMap<String, Object>> mItemArrayList;
  private View mLandFavBtn;
  private View mLandMoreBtn;
  private View mLandOpenQQBrowserBtn;
  private ImageButton mMoreBtn;
  private Dialog mMoreDlg;
  private ImageButton mOpenQQBrowserBtn;
  private String mOriginalUrl;
  private ViewGroup mParentLayout;
  private ImageButton mRefreshBtn;
  private ImageButton mReturnAppBtn;
  private boolean mSendToQQ;
  private boolean mSendToWeixin;
  private String mSharedUrl;
  private ImageButton mStopBtn;
  private RelativeLayout mTitleBarLayout;
  private String mTitleStr;
  private WebView mWebView;
  private ValueCallback<Uri> uploadFile;
  
  public WebViewActivity() {}
  
  private void changeBackForwordBtnState()
  {
    if (this.mWebView.canGoForward())
    {
      this.mForwardBtn.setEnabled(true);
      this.mForwardBtn.setAlpha(255);
    }
    while (this.mWebView.canGoBack())
    {
      this.mBackBtn.setEnabled(true);
      this.mBackBtn.setAlpha(255);
      return;
      this.mForwardBtn.setEnabled(false);
      this.mForwardBtn.setAlpha(100);
    }
    this.mBackBtn.setEnabled(false);
    this.mBackBtn.setAlpha(100);
  }
  
  public static boolean delDirFile(File paramFile)
  {
    if ((paramFile == null) || (!paramFile.exists()) || (!paramFile.isDirectory())) {
      return false;
    }
    String[] arrayOfString = paramFile.list();
    String str = paramFile.getAbsolutePath();
    int i = 0;
    label32:
    if (i < arrayOfString.length) {
      if (!str.endsWith(File.separator)) {
        break label95;
      }
    }
    label95:
    for (paramFile = new File(str + arrayOfString[i]);; paramFile = new File(str + File.separator + arrayOfString[i]))
    {
      if (paramFile.isFile()) {
        paramFile.delete();
      }
      i += 1;
      break label32;
      break;
    }
  }
  
  private void doAfterStartLoading()
  {
    if (this.mStopBtn.getVisibility() != 0) {
      this.mStopBtn.setVisibility(0);
    }
    if (this.mRefreshBtn.getVisibility() != 8) {
      this.mRefreshBtn.setVisibility(8);
    }
  }
  
  private void doAfterStop()
  {
    if (this.mStopBtn.getVisibility() != 8) {
      this.mStopBtn.setVisibility(8);
    }
    if (this.mRefreshBtn.getVisibility() != 0) {
      this.mRefreshBtn.setVisibility(0);
    }
  }
  
  private String getCurrentUrl()
  {
    String str2 = this.mWebView.getUrl();
    if ((str2 != null) && (this.mOriginalUrl != null))
    {
      String str1 = str2;
      if (str2.replace("/", "").toLowerCase().equals(this.mOriginalUrl.replace("/", "").toLowerCase()))
      {
        Logger.d("getCurrentUrl state:true");
        str1 = this.mSharedUrl;
      }
      return str1;
    }
    Logger.e("mWebView geturl is null!");
    return str2;
  }
  
  private ArrayList<ShareItem> getShareItems()
  {
    ArrayList localArrayList = new ArrayList();
    if ((this.mSendToWeixin) && (this.mIsWXInstall))
    {
      localShareItem1 = new ShareItem(WebViewResID.drawable_share_to_wx_friend, getString(WebViewResID.str_shareToWxFriend, new Object[] { "" }), "shareToWxfriend");
      localArrayList.add(new ShareItem(WebViewResID.drawable_share_to_wx, getString(WebViewResID.str_shareToWx, new Object[] { "" }), "shareToWx"));
      localArrayList.add(localShareItem1);
    }
    if ((this.mSendToQQ) && (isQQInstall()))
    {
      localShareItem1 = new ShareItem(WebViewResID.drawable_share_to_qzone, getString(WebViewResID.str_shareToQzone, new Object[] { "" }), "shareToQzone");
      localArrayList.add(new ShareItem(WebViewResID.drawable_share_to_qq, getString(WebViewResID.str_shareToQQ, new Object[] { "" }), "shareToQQ"));
      localArrayList.add(localShareItem1);
    }
    ShareItem localShareItem1 = new ShareItem(WebViewResID.drawable_open_by_qqbrowser, getString(WebViewResID.str_thrdcall_openqbx, new Object[] { "" }), "openByQQBrowser");
    ShareItem localShareItem2 = new ShareItem(WebViewResID.drawable_open_by_otherbrowser, getString(WebViewResID.str_thrdcall_openbrowser, new Object[] { "" }), "openByOtherBrowser");
    localArrayList.add(localShareItem1);
    localArrayList.add(localShareItem2);
    return localArrayList;
  }
  
  private void initExtras()
  {
    Intent localIntent = getIntent();
    if (localIntent == null) {
      return;
    }
    this.mFavUrl = localIntent.getStringExtra("favUrl");
    this.mAdIds = localIntent.getStringExtra("adIds");
    this.mSendToQQ = localIntent.getBooleanExtra("sendToQQ", false);
    this.mSendToWeixin = localIntent.getBooleanExtra("sendToWX", false);
    this.mIsWXInstall = localIntent.getBooleanExtra("isWXInstall", false);
  }
  
  private void initGridView()
  {
    this.mItemArrayList = new ArrayList();
    ArrayList localArrayList = this.mItemArrayList;
    int i = WebViewResID.layout_dlg_gridview_item;
    int j = WebViewResID.itemImage;
    int k = WebViewResID.itemText;
    this.mAdapter = new SimpleAdapter(this, localArrayList, i, new String[] { "icon", "title" }, new int[] { j, k });
    this.mGridView.setSelector(new ColorDrawable(0));
    this.mGridView.setAdapter(this.mAdapter);
    this.mGridView.setOnItemClickListener(this);
  }
  
  private void initLayout()
  {
    this.mParentLayout = ((ViewGroup)findViewById(WebViewResID.playout));
    this.mTitleBarLayout = ((RelativeLayout)findViewById(WebViewResID.titleBar));
    this.mRefreshBtn = ((ImageButton)findViewById(WebViewResID.refresh));
    this.mRefreshBtn.setOnClickListener(this);
    this.mStopBtn = ((ImageButton)findViewById(WebViewResID.stop));
    this.mStopBtn.setOnClickListener(this);
    this.mBackBtn = ((ImageButton)findViewById(WebViewResID.back));
    this.mBackBtn.setOnClickListener(this);
    this.mForwardBtn = ((ImageButton)findViewById(WebViewResID.forward));
    this.mForwardBtn.setOnClickListener(this);
    this.mFavBtn = ((ImageButton)findViewById(WebViewResID.fav));
    this.mFavBtn.setOnClickListener(this);
    this.mLandFavBtn = findViewById(WebViewResID.land_fav);
    this.mLandFavBtn.setOnClickListener(this);
    this.mLandOpenQQBrowserBtn = findViewById(WebViewResID.land_openByQQBrowser);
    this.mLandOpenQQBrowserBtn.setOnClickListener(this);
    this.mLandMoreBtn = findViewById(WebViewResID.land_more);
    this.mLandMoreBtn.setOnClickListener(this);
    this.mReturnAppBtn = ((ImageButton)findViewById(WebViewResID.return_app));
    this.mReturnAppBtn.setOnClickListener(this);
    this.mOpenQQBrowserBtn = ((ImageButton)findViewById(WebViewResID.openByQQBrowser));
    this.mOpenQQBrowserBtn.setOnClickListener(this);
    this.mMoreBtn = ((ImageButton)findViewById(WebViewResID.more));
    this.mMoreBtn.setOnClickListener(this);
  }
  
  private void initMoreDlg()
  {
    if (this.mMoreDlg == null)
    {
      this.mMoreDlg = new Dialog(this, WebViewResID.style_SheetDialogTheme);
      this.mMoreDlg.setContentView(WebViewResID.layout_sheet_dlg);
      this.mMoreDlg.setCanceledOnTouchOutside(false);
      Window localWindow = this.mMoreDlg.getWindow();
      WindowManager.LayoutParams localLayoutParams = localWindow.getAttributes();
      localLayoutParams.width = -1;
      localLayoutParams.gravity = 80;
      localLayoutParams.dimAmount = 0.5F;
      localWindow.setAttributes(localLayoutParams);
      localWindow.setWindowAnimations(WebViewResID.style_SheetDialogAnimation);
      localWindow.setBackgroundDrawableResource(WebViewResID.color_transparent);
      localWindow.addFlags(2);
      this.mGridView = ((GridView)this.mMoreDlg.findViewById(WebViewResID.dlg_gridview));
      initGridView();
      this.cancelBtn = ((Button)this.mMoreDlg.findViewById(WebViewResID.dlg_btn_cancel));
      this.cancelBtn.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if ((WebViewActivity.this.mMoreDlg != null) && (WebViewActivity.this.mMoreDlg.isShowing())) {
            WebViewActivity.this.mMoreDlg.dismiss();
          }
        }
      });
    }
    updateItemArrayList();
  }
  
  private void initToolbarStatus()
  {
    if (2 == getResources().getConfiguration().orientation)
    {
      this.mTitleBarLayout.setVisibility(8);
      if (!T.ckIsEmpty(this.mFavUrl)) {
        ((View)this.mLandFavBtn.getParent()).setVisibility(0);
      }
      for (;;)
      {
        ((View)this.mLandMoreBtn.getParent()).setVisibility(0);
        ((View)this.mLandOpenQQBrowserBtn.getParent()).setVisibility(0);
        return;
        ((View)this.mLandFavBtn.getParent()).setVisibility(8);
      }
    }
    this.mTitleBarLayout.setVisibility(0);
    if (!T.ckIsEmpty(this.mFavUrl)) {
      ((View)this.mFavBtn.getParent()).setVisibility(0);
    }
    for (;;)
    {
      ((View)this.mLandFavBtn.getParent()).setVisibility(8);
      ((View)this.mLandMoreBtn.getParent()).setVisibility(8);
      ((View)this.mLandOpenQQBrowserBtn.getParent()).setVisibility(8);
      return;
      ((View)this.mFavBtn.getParent()).setVisibility(8);
    }
  }
  
  private void initWebView()
  {
    this.mWebView.setWebChromeClient(new WebChromeClient()
    {
      public void onReceivedTitle(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        super.onReceivedTitle(paramAnonymousWebView, paramAnonymousString);
        WebViewActivity.access$002(WebViewActivity.this, paramAnonymousString);
      }
      
      public void openFileChooser(ValueCallback<Uri> paramAnonymousValueCallback, String paramAnonymousString1, String paramAnonymousString2)
      {
        WebViewActivity.access$102(WebViewActivity.this, paramAnonymousValueCallback);
        paramAnonymousValueCallback = new Intent("android.intent.action.GET_CONTENT");
        paramAnonymousValueCallback.addCategory("android.intent.category.OPENABLE");
        paramAnonymousValueCallback.setType("*/*");
        try
        {
          WebViewActivity.this.startActivityForResult(Intent.createChooser(paramAnonymousValueCallback, WebViewActivity.this.getResources().getString(WebViewResID.str_upload_file_title)), 0);
          return;
        }
        catch (ActivityNotFoundException paramAnonymousValueCallback)
        {
          paramAnonymousValueCallback.printStackTrace();
        }
      }
    });
    this.mWebView.setWebViewClient(new WebViewClient()
    {
      public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        WebViewActivity.this.changeBackForwordBtnState();
        WebViewActivity.this.doAfterStop();
      }
      
      public void onPageStarted(WebView paramAnonymousWebView, String paramAnonymousString, Bitmap paramAnonymousBitmap)
      {
        WebViewActivity.this.doAfterStartLoading();
      }
      
      @SuppressLint({"NewApi"})
      public boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, String paramAnonymousString)
      {
        Logger.d("loading url:" + paramAnonymousString);
        if (paramAnonymousString.startsWith("weixin:"))
        {
          new Intent();
          try
          {
            paramAnonymousWebView = Intent.parseUri(paramAnonymousString, 1);
            paramAnonymousWebView.addCategory("android.intent.category.BROWSABLE");
            paramAnonymousWebView.setComponent(null);
            if (Build.VERSION.SDK_INT >= 15) {
              paramAnonymousWebView.setSelector(null);
            }
            WebViewActivity.this.startActivity(paramAnonymousWebView);
            return true;
          }
          catch (Exception paramAnonymousWebView)
          {
            paramAnonymousWebView.printStackTrace();
            return true;
          }
        }
        return false;
      }
    });
    this.mWebView.setDownloadListener(new DownloadListener()
    {
      public void onDownloadStart(String paramAnonymousString1, String paramAnonymousString2, String paramAnonymousString3, String paramAnonymousString4, long paramAnonymousLong)
      {
        try
        {
          paramAnonymousString1 = new Intent("android.intent.action.VIEW", Uri.parse(paramAnonymousString1));
          WebViewActivity.this.startActivity(paramAnonymousString1);
          return;
        }
        catch (ActivityNotFoundException paramAnonymousString1)
        {
          Logger.e("default browser is uninstalled!");
        }
      }
    });
    if (Build.VERSION.SDK_INT >= 11)
    {
      this.mWebView.removeJavascriptInterface("searchBoxJavaBridge_");
      this.mWebView.removeJavascriptInterface("accessibility");
      this.mWebView.removeJavascriptInterface("accessibilityTraversal");
    }
    WebSettings localWebSettings = this.mWebView.getSettings();
    localWebSettings.setJavaScriptEnabled(true);
    localWebSettings.setAllowFileAccess(true);
    localWebSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
    localWebSettings.setSupportZoom(true);
    localWebSettings.setBuiltInZoomControls(true);
    localWebSettings.setUseWideViewPort(true);
    localWebSettings.setSupportMultipleWindows(false);
    if (Build.VERSION.SDK_INT >= 11) {
      localWebSettings.setDisplayZoomControls(false);
    }
    localWebSettings.setLoadWithOverviewMode(true);
    localWebSettings.setAppCacheEnabled(true);
    localWebSettings.setDatabaseEnabled(true);
    localWebSettings.setDomStorageEnabled(true);
    localWebSettings.setGeolocationEnabled(true);
    localWebSettings.setAppCacheMaxSize(Long.MAX_VALUE);
    localWebSettings.setAppCachePath(getDir("appcache", 0).getPath());
    localWebSettings.setDatabasePath(getDir("databases", 0).getPath());
    localWebSettings.setGeolocationDatabasePath(getDir("geolocation", 0).getPath());
    localWebSettings.setPluginState(WebSettings.PluginState.ON_DEMAND);
    localWebSettings.setRenderPriority(WebSettings.RenderPriority.HIGH);
    if (this.mWebView.getX5WebViewExtension() != null) {
      Logger.d("CoreVersion_FromSDK::" + this.mWebView.getX5WebViewExtension().getQQBrowserVersion());
    }
    for (;;)
    {
      CookieSyncManager.createInstance(this);
      CookieSyncManager.getInstance().sync();
      return;
      Logger.d("CoreVersion");
    }
  }
  
  private boolean isQQInstall()
  {
    try
    {
      localPackageInfo = getPackageManager().getPackageInfo("com.tencent.mobileqq", 0);
      if (localPackageInfo == null) {
        return false;
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        PackageInfo localPackageInfo = null;
        localNameNotFoundException.printStackTrace();
      }
    }
    return true;
  }
  
  private boolean isWebViewInSingleProcess(int paramInt)
  {
    Iterator localIterator = ((ActivityManager)getSystemService("activity")).getRunningAppProcesses().iterator();
    while (localIterator.hasNext())
    {
      ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)localIterator.next();
      if ((localRunningAppProcessInfo.pid == paramInt) && (localRunningAppProcessInfo.processName.contains("msdk_inner_webview"))) {
        return true;
      }
    }
    return false;
  }
  
  private void loadUrl()
  {
    this.mOriginalUrl = getIntent().getStringExtra("url");
    if (this.mOriginalUrl != null)
    {
      this.mSharedUrl = getIntent().getStringExtra("sharedUrl");
      if (this.mSharedUrl == null) {
        this.mSharedUrl = CommonUtil.getNoQueryUrl(this.mOriginalUrl);
      }
      this.mWebView.loadUrl(this.mOriginalUrl);
    }
  }
  
  private void openByQQBrowser()
  {
    String str = getCurrentUrl();
    if (str == null) {
      Logger.w("Shared Url == null!");
    }
    int i;
    do
    {
      return;
      i = MttLoader.loadUrl(this, str, null);
      if (i == 4)
      {
        if ((this.mMoreDlg != null) && (this.mMoreDlg.isShowing())) {
          this.mMoreDlg.dismiss();
        }
        showDownloadQQBrowserDlg();
        return;
      }
    } while (i != 5);
    Logger.w("qqbrowser version is too low...");
  }
  
  private String saveImageToSDCard()
  {
    File localFile = new File(getDir("msdk_webview", 0).getAbsolutePath());
    if ((!localFile.exists()) || (!localFile.isDirectory()))
    {
      localFile.mkdirs();
      localFile = new File(localFile, "thumb" + System.currentTimeMillis() + ".png");
      if (localFile.exists()) {
        localFile.delete();
      }
      if (this.mWebView != null) {
        break label104;
      }
    }
    label104:
    Bitmap localBitmap;
    do
    {
      do
      {
        return null;
        delDirFile(localFile);
        break;
        this.mWebView.setDrawingCacheEnabled(true);
        localBitmap = this.mWebView.getDrawingCache();
      } while (localBitmap == null);
      localBitmap = small(localBitmap);
    } while (localBitmap == null);
    try
    {
      localFile.createNewFile();
      FileOutputStream localFileOutputStream = new FileOutputStream(localFile);
      localBitmap.compress(Bitmap.CompressFormat.PNG, 50, localFileOutputStream);
      localFileOutputStream.flush();
      localFileOutputStream.close();
      this.mWebView.setDrawingCacheEnabled(false);
      return localFile.getAbsolutePath();
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      Logger.w(localFileNotFoundException.getMessage());
      return null;
    }
    catch (IOException localIOException)
    {
      Logger.w(localIOException.getMessage());
    }
    return null;
  }
  
  private void sendQQShare(String paramString)
  {
    if (!isQQInstall())
    {
      Toast.makeText(getApplicationContext(), getString(WebViewResID.str_uninstall_qq, new Object[] { "检测到未安装手Q，请安装手Q后再分享！" }), 0).show();
      return;
    }
    String str2 = getString(WebViewResID.str_untitle_share, new Object[] { "无标题" });
    String str3 = this.mTitleStr;
    String str1 = str3;
    if (T.ckIsEmpty(str3)) {
      str1 = str2;
    }
    str2 = saveImageToSDCard();
    if (str2 == null) {}
    for (int i = 0;; i = str2.length())
    {
      str3 = getCurrentUrl();
      Logger.d("webview qq_share targetUrl:" + str3);
      if (str3 != null) {
        break;
      }
      Logger.w("Shared Url == null!");
      return;
    }
    if (str3 == null) {}
    for (int j = 0;; j = str3.length())
    {
      if (j >= 500) {
        Logger.w("sendQQShare targetUrlLen too long!");
      }
      Intent localIntent = new Intent();
      localIntent.setClass(this, JumpShareActivity.class);
      localIntent.putExtra("itemId", paramString);
      localIntent.putExtra("title", str1);
      localIntent.putExtra("desc", null);
      localIntent.putExtra("url", str3);
      localIntent.putExtra("imgUrl", str2);
      localIntent.putExtra("imgUrlLen", i);
      startActivity(localIntent);
      return;
    }
  }
  
  private void sendWXShare(String paramString)
  {
    if (!this.mIsWXInstall)
    {
      Toast.makeText(getApplicationContext(), getString(WebViewResID.str_uninstall_wx, new Object[] { "检测到未安装微信，请安装微信后再分享！" }), 0).show();
      return;
    }
    Object localObject2 = getString(WebViewResID.str_untitle_share, new Object[] { "无标题" });
    String str = this.mTitleStr;
    Object localObject1 = str;
    if (T.ckIsEmpty(str)) {
      localObject1 = localObject2;
    }
    str = getCurrentUrl();
    Logger.d("webview wx_share targetUrl:" + str);
    if (str == null)
    {
      Logger.w("Shared Url == null!");
      return;
    }
    this.mWebView.setDrawingCacheEnabled(true);
    localObject2 = CommonUtil.bitmap2Bytes(this.mWebView.getDrawingCache());
    this.mWebView.setDrawingCacheEnabled(false);
    if (localObject2 == null) {}
    for (int i = 0;; i = localObject2.length)
    {
      localObject2 = BitmapFactory.decodeByteArray((byte[])localObject2, 0, i);
      if (localObject2 != null) {
        break;
      }
      Logger.w("sendWXShare BitmapFactory.decodeByteArray is null");
      return;
    }
    float f1 = ((Bitmap)localObject2).getWidth();
    float f2 = ((Bitmap)localObject2).getHeight();
    Object localObject3;
    if (f1 > f2)
    {
      localObject2 = Bitmap.createScaledBitmap((Bitmap)localObject2, 200, (int)(200.0F * (f2 / f1)), true);
      localObject3 = new ByteArrayOutputStream();
      ((Bitmap)localObject2).compress(Bitmap.CompressFormat.JPEG, 90, (OutputStream)localObject3);
      localObject2 = ((ByteArrayOutputStream)localObject3).toByteArray();
      if (localObject2 != null) {
        break label385;
      }
    }
    label385:
    for (i = 0;; i = localObject2.length)
    {
      localObject3 = new Intent();
      ((Intent)localObject3).setClass(this, JumpShareActivity.class);
      ((Intent)localObject3).putExtra("itemId", paramString);
      ((Intent)localObject3).putExtra("title", (String)localObject1);
      ((Intent)localObject3).putExtra("desc", null);
      ((Intent)localObject3).putExtra("webpageUrl", str);
      ((Intent)localObject3).putExtra("mediaTagName", "msdk");
      ((Intent)localObject3).putExtra("imgData", (byte[])localObject2);
      ((Intent)localObject3).putExtra("imgDataLen", i);
      startActivity((Intent)localObject3);
      return;
      localObject2 = Bitmap.createScaledBitmap((Bitmap)localObject2, (int)(200.0F * (f1 / f2)), 200, true);
      break;
    }
  }
  
  private void showDownloadQQBrowserDlg()
  {
    if (this.mDownloadDlg == null)
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
      localBuilder.setTitle(WebViewResID.str_thrdcall_recom_mtt_title);
      localBuilder.setMessage(WebViewResID.str_thrdcall_recom_mtt_content);
      localBuilder.setPositiveButton(WebViewResID.str_thrdcall_confirm, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface = new Intent("android.intent.action.VIEW", Uri.parse("http://mdc.html5.qq.com/d/directdown.jsp?channel_id=21380"));
          try
          {
            WebViewActivity.this.startActivity(paramAnonymousDialogInterface);
            return;
          }
          catch (Exception paramAnonymousDialogInterface)
          {
            paramAnonymousDialogInterface.printStackTrace();
          }
        }
      });
      localBuilder.setNegativeButton(WebViewResID.str_thrdcall_cancel, null);
      this.mDownloadDlg = localBuilder.create();
    }
    if ((this.mDownloadDlg != null) && (!this.mDownloadDlg.isShowing())) {
      this.mDownloadDlg.show();
    }
  }
  
  private static Bitmap small(Bitmap paramBitmap)
  {
    float f1 = paramBitmap.getWidth();
    float f2 = paramBitmap.getHeight();
    if (f1 > f2) {}
    for (paramBitmap = Bitmap.createScaledBitmap(paramBitmap, 200, (int)(f2 / f1 * 200.0F), true);; paramBitmap = Bitmap.createScaledBitmap(paramBitmap, (int)(f1 / f2 * 200.0F), 200, true))
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      paramBitmap.compress(Bitmap.CompressFormat.JPEG, 90, localByteArrayOutputStream);
      return paramBitmap;
    }
  }
  
  private void updateItemArrayList()
  {
    this.mItemArrayList.clear();
    ArrayList localArrayList = getShareItems();
    int i = 0;
    while (i < localArrayList.size())
    {
      HashMap localHashMap = new HashMap();
      localHashMap.put("icon", Integer.valueOf(((ShareItem)localArrayList.get(i)).iconId));
      localHashMap.put("title", ((ShareItem)localArrayList.get(i)).title);
      localHashMap.put("itemId", ((ShareItem)localArrayList.get(i)).itemId);
      this.mItemArrayList.add(localHashMap);
      i += 1;
    }
    this.mAdapter.notifyDataSetChanged();
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    Logger.d("WVMActivity onActivityResult, requestCode:" + paramInt1 + ",resultCode:" + paramInt2);
    if (paramInt2 == -1) {
      switch (paramInt1)
      {
      }
    }
    while ((paramInt2 != 0) || (this.uploadFile == null))
    {
      do
      {
        return;
      } while (this.uploadFile == null);
      if ((paramIntent == null) || (paramInt2 != -1)) {}
      for (paramIntent = null;; paramIntent = paramIntent.getData())
      {
        this.uploadFile.onReceiveValue(paramIntent);
        this.uploadFile = null;
        return;
      }
    }
    this.uploadFile.onReceiveValue(null);
    this.uploadFile = null;
  }
  
  public void onClick(View paramView)
  {
    int i = paramView.getId();
    if (i == WebViewResID.back) {
      if (this.mWebView.canGoBack()) {
        this.mWebView.goBack();
      }
    }
    do
    {
      do
      {
        do
        {
          do
          {
            do
            {
              return;
              if (i != WebViewResID.forward) {
                break;
              }
            } while (!this.mWebView.canGoForward());
            this.mWebView.goForward();
            return;
            if (i == WebViewResID.refresh)
            {
              this.mWebView.reload();
              return;
            }
            if (i == WebViewResID.stop)
            {
              this.mWebView.stopLoading();
              return;
            }
            if (i == WebViewResID.return_app)
            {
              finish();
              return;
            }
            if ((i != WebViewResID.more) && (i != WebViewResID.land_more)) {
              break;
            }
            initMoreDlg();
          } while (this.mMoreDlg == null);
          this.mMoreDlg.show();
          return;
          if ((i == WebViewResID.openByQQBrowser) || (i == WebViewResID.land_openByQQBrowser))
          {
            openByQQBrowser();
            return;
          }
        } while ((i != WebViewResID.fav) && (i != WebViewResID.land_fav));
        Logger.d("click button fav, mFavUrl:" + this.mFavUrl);
      } while (T.ckIsEmpty(this.mFavUrl));
      this.mWebView.loadUrl(this.mFavUrl);
    } while (T.ckIsEmpty(this.mAdIds));
    paramView = new Intent("com.tencent.msdk.webview.adreport");
    paramView.putExtra("adids", this.mAdIds);
    sendBroadcast(paramView);
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    if (2 == paramConfiguration.orientation)
    {
      getWindow().setFlags(1024, 1024);
      initToolbarStatus();
      return;
    }
    getWindow().clearFlags(1024);
    initToolbarStatus();
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    WebViewResID.init(this);
    if (WebViewResID.layout_thrdcall_window == 0)
    {
      Logger.w("WVMResID.layout_thrdcall_window == 0x00");
      finish();
      return;
    }
    if (2 == getResources().getConfiguration().orientation) {
      getWindow().setFlags(1024, 1024);
    }
    setContentView(WebViewResID.layout_thrdcall_window);
    this.mWebView = ((WebView)findViewById(WebViewResID.webview));
    if (this.mWebView == null)
    {
      finish();
      Logger.w("Fail to instance webview!!!");
      return;
    }
    initExtras();
    initWebView();
    initLayout();
    initToolbarStatus();
    changeBackForwordBtnState();
    loadUrl();
  }
  
  protected void onDestroy()
  {
    if (this.mWebView != null)
    {
      this.mWebView.removeAllViews();
      if (this.mParentLayout != null) {
        this.mParentLayout.removeView(this.mWebView);
      }
      this.mWebView.destroy();
    }
    if ((this.mMoreDlg != null) && (this.mMoreDlg.isShowing()))
    {
      this.mMoreDlg.dismiss();
      this.mMoreDlg = null;
    }
    if ((this.mDownloadDlg != null) && (this.mDownloadDlg.isShowing()))
    {
      this.mDownloadDlg.dismiss();
      this.mDownloadDlg = null;
    }
    super.onDestroy();
    if (ConfigManager.killWebViewProcess(getApplicationContext())) {
      Process.killProcess(Process.myPid());
    }
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    paramAdapterView = (String)((HashMap)paramAdapterView.getItemAtPosition(paramInt)).get("itemId");
    if ("openByOtherBrowser".equals(paramAdapterView))
    {
      paramAdapterView = getCurrentUrl();
      if (paramAdapterView == null)
      {
        Logger.w("Shared Url == null!");
        return;
      }
      paramAdapterView = new Intent("android.intent.action.VIEW", Uri.parse(paramAdapterView));
    }
    for (;;)
    {
      try
      {
        startActivity(paramAdapterView);
        if ((this.mMoreDlg == null) || (!this.mMoreDlg.isShowing())) {
          break;
        }
        this.mMoreDlg.dismiss();
        return;
      }
      catch (ActivityNotFoundException paramAdapterView)
      {
        Logger.e("default browser is uninstalled!");
        continue;
      }
      if ("openByQQBrowser".equals(paramAdapterView)) {
        openByQQBrowser();
      } else if (("shareToQQ".equals(paramAdapterView)) || ("shareToQzone".equals(paramAdapterView))) {
        sendQQShare(paramAdapterView);
      } else {
        sendWXShare(paramAdapterView);
      }
    }
  }
  
  protected void onNewIntent(Intent paramIntent)
  {
    super.onNewIntent(paramIntent);
    if ((paramIntent == null) || (this.mWebView == null)) {
      return;
    }
    initExtras();
    loadUrl();
  }
  
  public class ShareItem
  {
    public int iconId;
    public String itemId;
    public String title;
    
    public ShareItem(int paramInt, String paramString1, String paramString2)
    {
      this.itemId = paramString2;
      this.iconId = paramInt;
      this.title = paramString1;
    }
  }
}
