package com.tencent.msdk.stat;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import com.tencent.beacon.event.UserAction;
import com.tencent.mid.api.MidService;
import com.tencent.msdk.WeGame;
import com.tencent.msdk.tools.Logger;
import com.tencent.msdk.tools.T;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

public class DeviceInfo
{
  public static final String APN_PROP_PROXY = "proxy";
  private static Uri PREFERRED_APN_URI;
  private static String mImei;
  private Context mCtx;
  private PackageManager mPm;
  
  static
  {
    if (!DeviceInfo.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      $assertionsDisabled = bool;
      PREFERRED_APN_URI = Uri.parse("content://telephony/carriers/preferapn");
      mImei = "";
      return;
    }
  }
  
  public DeviceInfo(Context paramContext)
  {
    this.mCtx = paramContext;
    this.mPm = paramContext.getPackageManager();
  }
  
  public static String getApnProxy(Context paramContext)
  {
    localObject3 = null;
    localObject2 = null;
    localObject1 = null;
    label44:
    do
    {
      do
      {
        try
        {
          paramContext = paramContext.getContentResolver().query(PREFERRED_APN_URI, null, null, null, null);
          if (paramContext != null) {
            break label44;
          }
          localObject2 = localObject3;
          if (paramContext != null)
          {
            paramContext.close();
            localObject2 = localObject3;
          }
        }
        catch (Exception paramContext)
        {
          boolean bool;
          String str;
          localObject2 = localObject1;
          Logger.w(paramContext.getMessage());
          localObject2 = localObject3;
          return null;
        }
        finally
        {
          if (localObject2 == null) {
            break label158;
          }
          ((Cursor)localObject2).close();
        }
        return localObject2;
        localObject1 = paramContext;
        localObject2 = paramContext;
        paramContext.moveToFirst();
        localObject1 = paramContext;
        localObject2 = paramContext;
        bool = paramContext.isAfterLast();
        if (!bool) {
          break;
        }
        localObject2 = localObject3;
      } while (paramContext == null);
      paramContext.close();
      return null;
      localObject1 = paramContext;
      localObject2 = paramContext;
      str = paramContext.getString(paramContext.getColumnIndex("proxy"));
      localObject1 = str;
      localObject2 = localObject1;
    } while (paramContext == null);
    paramContext.close();
    return localObject1;
  }
  
  public static String getImei()
  {
    if (!T.ckIsEmpty(mImei)) {
      return mImei;
    }
    Object localObject = WeGame.getInstance().getActivity();
    if (localObject == null)
    {
      mImei = "";
      return mImei;
    }
    localObject = (TelephonyManager)((Activity)localObject).getSystemService("phone");
    if (localObject == null)
    {
      mImei = "";
      return mImei;
    }
    mImei = ((TelephonyManager)localObject).getDeviceId();
    if (T.ckIsEmpty(mImei)) {
      mImei = "";
    }
    return mImei;
  }
  
  private String getRAMInfo()
  {
    try
    {
      Object localObject = new BufferedReader(new FileReader("/proc/meminfo"), 8192);
      String str = ((BufferedReader)localObject).readLine();
      if (str == null)
      {
        ((BufferedReader)localObject).close();
        return "";
      }
      long l = Integer.valueOf(str.split("\\s+")[1]).intValue() * 1024;
      ((BufferedReader)localObject).close();
      localObject = "" + l;
      return localObject;
    }
    catch (IOException localIOException) {}
    return "";
  }
  
  private String getROMInfo()
  {
    StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
    long l1 = localStatFs.getBlockSize();
    long l2 = localStatFs.getBlockCount();
    return "" + l2 * l1;
  }
  
  public JSONObject getAllDeviceInfo()
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("mid", getMid());
      localJSONObject.put("qImei", getQImei());
      localJSONObject.put("appVersion", getVersionName());
      localJSONObject.put("appVersionCode", getVersionCode());
      localJSONObject.put("osSystem", "android");
      localJSONObject.put("deviceResolution", getResolution());
      localJSONObject.put("deviceApn", getApn());
      localJSONObject.put("mobileService", getProvidersName());
      localJSONObject.put("deviceTradeMark", getBrand());
      localJSONObject.put("deviceManufacturer", getManufacturer());
      localJSONObject.put("deviceModel", getModel());
      localJSONObject.put("deviceImei", getImei());
      localJSONObject.put("deviceName", getModel());
      localJSONObject.put("deviceRom", getROMInfo());
      localJSONObject.put("deviceRam", getRAMInfo());
      localJSONObject.put("deviceCPU", getCpuInfo());
      return localJSONObject;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    return localJSONObject;
  }
  
  public String getApn()
  {
    String str1 = "";
    Object localObject = (ConnectivityManager)WeGame.getInstance().getActivity().getSystemService("connectivity");
    if (localObject == null) {
      return "";
    }
    localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
    if (localObject == null) {
      return "";
    }
    String str2 = ((NetworkInfo)localObject).getTypeName();
    if (str2 == null) {
      return "";
    }
    Logger.d("typeName:" + str2);
    if (str2.toUpperCase(Locale.CHINA).equals("WIFI")) {
      str1 = "wifi";
    }
    for (;;)
    {
      return str1;
      if (((NetworkInfo)localObject).getExtraInfo() == null) {
        return "";
      }
      localObject = ((NetworkInfo)localObject).getExtraInfo().toLowerCase(Locale.CHINA);
      Logger.d("extraInfo:" + (String)localObject);
      if (((String)localObject).startsWith("cmwap"))
      {
        str1 = "cmwap";
      }
      else if ((((String)localObject).startsWith("cmnet")) || (((String)localObject).startsWith("epc.tmobile.com")))
      {
        str1 = "cmnet";
      }
      else if (((String)localObject).startsWith("uniwap"))
      {
        str1 = "uniwap";
      }
      else if (((String)localObject).startsWith("uninet"))
      {
        str1 = "uninet";
      }
      else if (((String)localObject).startsWith("wap"))
      {
        str1 = "wap";
      }
      else if (((String)localObject).startsWith("net"))
      {
        str1 = "net";
      }
      else if (((String)localObject).startsWith("ctwap"))
      {
        str1 = "ctwap";
      }
      else if (((String)localObject).startsWith("ctnet"))
      {
        str1 = "ctnet";
      }
      else if (((String)localObject).startsWith("3gwap"))
      {
        str1 = "3gwap";
      }
      else if (((String)localObject).startsWith("3gnet"))
      {
        str1 = "3gnet";
      }
      else if (((String)localObject).startsWith("#777"))
      {
        str1 = getApnProxy(WeGame.getInstance().getActivity());
        if ((str1 != null) && (str1.length() > 0)) {
          str1 = "cdma wap";
        } else {
          str1 = "cdma net";
        }
      }
    }
  }
  
  public String getBrand()
  {
    return Build.BRAND;
  }
  
  public String getCpuInfo()
  {
    int i = -1;
    for (;;)
    {
      try
      {
        RandomAccessFile localRandomAccessFile = new RandomAccessFile("/sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state", "r");
        if (0 == 0) {}
        try
        {
          localObject = localRandomAccessFile.readLine();
          if (localObject == null)
          {
            localRandomAccessFile.close();
            return "" + i;
          }
          localObject = ((String)localObject).split("\\s+");
          if (($assertionsDisabled) || (localObject.length == 2)) {
            continue;
          }
          throw new AssertionError();
        }
        catch (IOException localIOException1) {}
      }
      catch (IOException localIOException2)
      {
        Object localObject;
        int j;
        continue;
      }
      localIOException1.printStackTrace();
      continue;
      if (Integer.parseInt(localObject[1]) > 0)
      {
        j = Integer.parseInt(localObject[0]) / 1000;
        if (j > i) {
          i = j;
        }
      }
    }
  }
  
  public String getManufacturer()
  {
    return Build.MANUFACTURER;
  }
  
  public String getMid()
  {
    return MidService.getMid(this.mCtx.getApplicationContext());
  }
  
  public String getModel()
  {
    return Build.MODEL;
  }
  
  public String getNetwork()
  {
    Object localObject = (ConnectivityManager)this.mCtx.getSystemService("connectivity");
    if (localObject == null) {}
    do
    {
      return "";
      localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
    } while (localObject == null);
    return ((NetworkInfo)localObject).getExtraInfo().toLowerCase(Locale.CHINESE);
  }
  
  public String getOs()
  {
    return "android";
  }
  
  public String getPhoneName()
  {
    String str = Build.MODEL;
    BluetoothAdapter localBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
    if (localBluetoothAdapter != null) {
      str = localBluetoothAdapter.getName();
    }
    return str;
  }
  
  public String getProvidersName()
  {
    String str1 = null;
    String str2 = ((TelephonyManager)this.mCtx.getSystemService("phone")).getSubscriberId();
    if (str2 == null) {
      return "";
    }
    if ((str2.startsWith("46000")) || (str2.startsWith("46002"))) {
      str1 = "中国移动";
    }
    for (;;)
    {
      return str1;
      if (str2.startsWith("46001")) {
        str1 = "中国联通";
      } else if (str2.startsWith("46003")) {
        str1 = "中国电信";
      }
    }
  }
  
  public String getQImei()
  {
    Object localObject1 = null;
    try
    {
      localObject2 = UserAction.getQIMEI();
      localObject1 = localObject2;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Object localObject2;
        localException.printStackTrace();
      }
    }
    localObject2 = localObject1;
    if (T.ckIsEmpty(localObject1)) {
      localObject2 = "";
    }
    return localObject2;
  }
  
  public String getResolution()
  {
    DisplayMetrics localDisplayMetrics = this.mCtx.getResources().getDisplayMetrics();
    if (localDisplayMetrics == null) {
      return "";
    }
    return localDisplayMetrics.widthPixels + "*" + localDisplayMetrics.heightPixels;
  }
  
  public int getVersionCode()
  {
    if (WeGame.getInstance().appVersionCode >= 0) {
      return WeGame.getInstance().appVersionCode;
    }
    try
    {
      int i = this.mPm.getPackageInfo(this.mCtx.getPackageName(), 0).versionCode;
      return i;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      localNameNotFoundException.printStackTrace();
    }
    return -1;
  }
  
  public String getVersionName()
  {
    if (!T.ckIsEmpty(WeGame.getInstance().appVersionName)) {
      return WeGame.getInstance().appVersionName;
    }
    try
    {
      String str = this.mPm.getPackageInfo(this.mCtx.getPackageName(), 0).versionName;
      return str;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      localNameNotFoundException.printStackTrace();
    }
    return "";
  }
}
