package com.tencent.open.yyb;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.text.TextUtils;
import android.webkit.WebView;
import com.tencent.open.a.f;
import com.tencent.open.utils.Util;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONObject;

public class AppbarJsBridge
{
  public static final int AUTHORIZE_FAIL = -5;
  public static final String BUTTON_CLICK_CALLBACK_FUNCTION_NAME = "clickCallback";
  public static final String CALLBACK_LOGIN = "loginCallback";
  public static final String CALLBACK_SHARE = "shareCallback";
  public static final int Code_Java_Exception = -3;
  public static final int Code_None = -2;
  public static final int JSBRIDGE_VERSION = 1;
  public static final String JS_BRIDGE_SCHEME = "jsb://";
  public static final String READY_CALLBACK_FUNCTION_NAME = "readyCallback";
  public static final int Result_Fail = -1;
  public static final int Result_OK = 0;
  public static final int SHARE_QQ = 1;
  public static final int SHARE_QZ = 2;
  public static final int SHARE_TIMELINE = 4;
  public static final int SHARE_WX = 3;
  private WebView a;
  private Activity b;
  
  public AppbarJsBridge(Activity paramActivity, WebView paramWebView)
  {
    this.b = paramActivity;
    this.a = paramWebView;
  }
  
  private void a(Uri paramUri, String paramString1, int paramInt, String paramString2)
  {
    f.b("openSDK_LOG", "-->callAMethod : uri = " + paramUri);
    if (a(paramString1)) {}
    while (TextUtils.isEmpty(paramString2)) {
      try
      {
        AppbarJsBridge.class.getDeclaredMethod(paramString1, new Class[] { Uri.class, Integer.TYPE, String.class, String.class }).invoke(this, new Object[] { paramUri, Integer.valueOf(paramInt), paramString1, paramString2 });
        return;
      }
      catch (Exception paramUri)
      {
        do
        {
          f.b("openSDK_LOG", "-->callAMethod : Exception = " + paramUri.getMessage());
          paramUri.printStackTrace();
        } while (TextUtils.isEmpty(paramString2));
        responseFail(paramString2, paramInt, paramString1, -3);
        return;
      }
    }
    responseFail(paramString2, paramInt, paramString1, -5);
  }
  
  private boolean a(String paramString)
  {
    return true;
  }
  
  public void callback(String paramString1, String paramString2)
  {
    if (this.a != null)
    {
      StringBuffer localStringBuffer = new StringBuffer("javascript:");
      localStringBuffer.append("if(!!").append(paramString1).append("){");
      localStringBuffer.append(paramString1);
      localStringBuffer.append("(");
      localStringBuffer.append(paramString2);
      localStringBuffer.append(")}");
      this.a.loadUrl(localStringBuffer.toString());
    }
  }
  
  public void clickCallback()
  {
    response("clickCallback", 0, null, "");
  }
  
  public void closeWebView(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    f.b("openSDK_LOG", "-->closeWebView : url = " + paramUri);
    this.b.finish();
  }
  
  public void getAppInfo(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    paramUri = paramUri.getQueryParameter("packagenames");
    f.b("openSDK_LOG", "-->getAppInfo : packageNames = " + paramUri);
    if ((TextUtils.isEmpty(paramUri)) || (TextUtils.isEmpty(paramString2))) {}
    String[] arrayOfString;
    do
    {
      return;
      arrayOfString = paramUri.split(",");
    } while ((arrayOfString == null) || (arrayOfString.length == 0));
    JSONObject localJSONObject = new JSONObject();
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        break label238;
      }
      String str = arrayOfString[i].trim();
      paramUri = null;
      for (;;)
      {
        try
        {
          localObject = this.b.getPackageManager().getPackageInfo(str, 0);
          paramUri = (Uri)localObject;
        }
        catch (PackageManager.NameNotFoundException localNameNotFoundException)
        {
          Object localObject;
          f.b("openSDK_LOG", "-->getAppInfo : NameNotFoundException e1");
          continue;
          localNameNotFoundException.put("install", 0);
          continue;
        }
        try
        {
          localObject = new JSONObject();
          if (paramUri == null) {
            continue;
          }
          ((JSONObject)localObject).put("install", 1);
          ((JSONObject)localObject).put("appName", paramUri.applicationInfo.name);
          ((JSONObject)localObject).put("verCode", paramUri.versionCode);
          ((JSONObject)localObject).put("verName", paramUri.versionName);
          localJSONObject.put(str, localObject);
        }
        catch (Exception paramUri)
        {
          responseFail(paramString2, paramInt, paramString1, -3);
        }
      }
      i += 1;
    }
    label238:
    f.b("openSDK_LOG", "-->getAppInfo : result = " + localJSONObject.toString());
    response(paramString2, paramInt, paramString1, localJSONObject.toString());
  }
  
  public int getVersion()
  {
    return 1;
  }
  
  public void invoke(String paramString)
  {
    f.b("openSDK_LOG", "-->invoke : url = " + paramString);
    Object localObject1 = Uri.parse(paramString);
    String str2 = ((Uri)localObject1).getHost();
    f.b("openSDK_LOG", "-->invoke : hostAsMethodName = " + str2);
    if (TextUtils.isEmpty(str2)) {
      return;
    }
    Object localObject2 = ((Uri)localObject1).getPathSegments();
    paramString = null;
    int j;
    if ((localObject2 != null) && (((List)localObject2).size() > 0))
    {
      j = Util.parseIntValue((String)((List)localObject2).get(0));
      i = j;
      if (((List)localObject2).size() > 1) {
        paramString = (String)((List)localObject2).get(1);
      }
    }
    for (int i = j;; i = 0)
    {
      f.b("openSDK_LOG", "-->invoke : seqid = " + i + " callbackName = " + paramString);
      label426:
      String str1;
      if (str2.equals("callBatch")) {
        for (;;)
        {
          String str3;
          int m;
          StringBuilder localStringBuilder;
          try
          {
            JSONArray localJSONArray = new JSONArray(((Uri)localObject1).getQueryParameter("param"));
            int k = localJSONArray.length();
            j = 0;
            if (j >= k) {
              break;
            }
            localObject1 = localJSONArray.getJSONObject(j);
            str3 = ((JSONObject)localObject1).getString("method");
            m = ((JSONObject)localObject1).getInt("seqid");
            localObject2 = ((JSONObject)localObject1).optString("callback");
            JSONObject localJSONObject = ((JSONObject)localObject1).getJSONObject("args");
            localStringBuilder = new StringBuilder();
            Object localObject3 = localStringBuilder.append("jsb://").append(str3).append("/").append(m).append("/");
            if (TextUtils.isEmpty((CharSequence)localObject2)) {
              break label426;
            }
            localObject1 = localObject2;
            ((StringBuilder)localObject3).append((String)localObject1).append("?");
            if (localJSONObject == null) {
              break label433;
            }
            localObject1 = localJSONObject.keys();
            if (!((Iterator)localObject1).hasNext()) {
              break label433;
            }
            localObject3 = (String)((Iterator)localObject1).next();
            String str4 = Uri.decode(localJSONObject.getString((String)localObject3));
            localStringBuilder.append((String)localObject3).append("=").append(Uri.encode(str4)).append("&");
            continue;
            if (TextUtils.isEmpty(paramString)) {
              break;
            }
          }
          catch (Exception localException) {}
          responseFail(paramString, i, str2, -5);
          return;
          str1 = "";
          continue;
          label433:
          a(Uri.parse(localStringBuilder.toString()), str3, m, (String)localObject2);
          j += 1;
        }
      }
      a(str1, str2, i, paramString);
      return;
    }
  }
  
  public void openLoginActivity(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    f.b("openSDK_LOG", "-->openLoginActivity : url = " + paramUri);
    ((AppbarActivity)this.b).login();
  }
  
  public void openNewWindow(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    paramUri = paramUri.getQueryParameter("url");
    try
    {
      paramString1 = new Intent(this.b, AppbarActivity.class);
      paramString1.putExtra("url", paramUri);
      this.b.startActivity(paramString1);
      return;
    }
    catch (Exception paramUri)
    {
      paramUri.printStackTrace();
    }
  }
  
  public void pageControl(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    f.b("openSDK_LOG", "-->pageControl : url = " + paramUri);
    int i = Util.parseIntValue(paramUri.getQueryParameter("type"));
    if (this.a != null)
    {
      if (i != 1) {
        break label68;
      }
      this.a.goBack();
    }
    for (;;)
    {
      response(paramString2, paramInt, paramString1, "");
      return;
      label68:
      if (i == 2) {
        this.a.goForward();
      } else {
        this.a.reload();
      }
    }
  }
  
  public void ready()
  {
    response("readyCallback", 1, null, "true");
  }
  
  public void response(String paramString1, int paramInt, String paramString2, String paramString3)
  {
    response(paramString1, paramInt, paramString2, paramString3, null);
  }
  
  public void response(String paramString1, int paramInt, String paramString2, String paramString3, Map<String, String> paramMap)
  {
    if (TextUtils.isEmpty(paramString1)) {
      return;
    }
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("result", 0);
      localJSONObject.put("data", paramString3);
      if (!TextUtils.isEmpty(paramString2)) {
        localJSONObject.put("method", paramString2);
      }
      localJSONObject.put("seqid", paramInt);
      if (paramMap != null)
      {
        paramString2 = paramMap.keySet().iterator();
        while (paramString2.hasNext())
        {
          paramString3 = (String)paramString2.next();
          localJSONObject.put(paramString3, paramMap.get(paramString3));
        }
      }
      callback(paramString1, localJSONObject.toString());
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      return;
    }
  }
  
  public void responseFail(String paramString1, int paramInt1, String paramString2, int paramInt2)
  {
    if (TextUtils.isEmpty(paramString1)) {
      return;
    }
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("result", -1);
      localJSONObject.put("code", paramInt2);
      localJSONObject.put("method", paramString2);
      localJSONObject.put("seqid", paramInt1);
      callback(paramString1, localJSONObject.toString());
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public void responseShare(int paramInt)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", paramInt + "");
    response("shareCallback", 0, null, "0", localHashMap);
  }
  
  public void responseShareFail(int paramInt)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", paramInt + "");
    response("shareCallback", 0, null, "1", localHashMap);
  }
  
  public void setWebView(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    boolean bool = true;
    try
    {
      Object localObject = paramUri.getQueryParameter("title");
      int i = Util.parseIntValue(paramUri.getQueryParameter("buttonVisible"), 0);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        ((AppbarActivity)this.b).setAppbarTitle((String)localObject);
      }
      localObject = (AppbarActivity)this.b;
      if (i == 1) {}
      for (;;)
      {
        ((AppbarActivity)localObject).setShareVisibility(bool);
        f.b("openSDK_LOG", "-->setWebView : url = " + paramUri + " -- buttonVisiable = " + i);
        response(paramString2, paramInt, paramString1, "");
        return;
        bool = false;
      }
      return;
    }
    catch (Exception paramUri)
    {
      responseFail(paramString2, paramInt, paramString1, -3);
    }
  }
  
  public void share(Uri paramUri, int paramInt, String paramString1, String paramString2)
  {
    f.b("openSDK_LOG", "-->share : url = " + paramUri);
    String str1 = paramUri.getQueryParameter("title");
    String str2 = paramUri.getQueryParameter("summary");
    paramString2 = paramUri.getQueryParameter("iconUrl");
    paramString1 = paramString2;
    if (TextUtils.isEmpty(paramString2)) {
      paramString1 = "http://qzs.qq.com/open/mobile/jsbridge/demo.htm";
    }
    paramString2 = paramUri.getQueryParameter("jumpUrl");
    f.b("openSDK_LOG", "-->share : title = " + str1);
    f.b("openSDK_LOG", "-->share : summary = " + str2);
    f.b("openSDK_LOG", "-->share : iconUrl = " + paramString1);
    f.b("openSDK_LOG", "-->share : jumpUrl = " + paramString2);
    ShareModel localShareModel = new ShareModel();
    localShareModel.a = str1;
    localShareModel.b = str2;
    localShareModel.c = paramString1;
    localShareModel.d = paramString2;
    ((AppbarActivity)this.b).setShareModel(localShareModel);
    switch (Util.parseIntValue(paramUri.getQueryParameter("type"), 0))
    {
    default: 
      ((AppbarActivity)this.b).showFloatingDialog();
      return;
    case 1: 
      ((AppbarActivity)this.b).shareToQQ();
      return;
    case 2: 
      ((AppbarActivity)this.b).shareToQzone();
      return;
    case 3: 
      ((AppbarActivity)this.b).shareToWX();
      return;
    }
    ((AppbarActivity)this.b).shareToTimeline();
  }
}
