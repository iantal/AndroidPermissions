package com.tencent.android.tpush.service;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.DisplayMetrics;
import com.qq.taf.jce.JceStruct;
import com.tencent.android.tpush.common.e;
import com.tencent.android.tpush.data.UnregisterInfo;
import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.cache.CacheManager;
import com.tencent.android.tpush.service.channel.n;
import com.tencent.android.tpush.service.channel.protocol.AppInfo;
import com.tencent.android.tpush.service.channel.protocol.DeviceInfo;
import com.tencent.android.tpush.service.channel.protocol.MutableInfo;
import com.tencent.android.tpush.service.channel.protocol.NetworkInfo;
import com.tencent.android.tpush.service.channel.protocol.TpnsConfigReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsGetApListReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsPushClickReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsPushClientReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsPushVerifyReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsReconnectReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsRegisterReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsTokenTagReq;
import com.tencent.android.tpush.service.channel.protocol.TpnsUnregisterReq;
import com.tencent.android.tpush.service.channel.protocol.UnregInfo;
import com.tencent.android.tpush.service.channel.security.TpnsSecurity;
import com.tencent.android.tpush.service.d.d;
import com.tencent.mid.util.Util;
import java.util.ArrayList;
import java.util.Locale;
import java.util.TimeZone;
import org.json.JSONArray;

public class o
{
  private static o a = new o();
  private static JSONArray b = new JSONArray();
  private static final String c = com.tencent.android.tpush.encrypt.a.a("com.tencent.tpush.last_wifi_ts");
  private com.tencent.android.tpush.service.channel.o d = new p(this);
  
  public o() {}
  
  public static byte a(boolean paramBoolean)
  {
    if (paramBoolean) {
      return 1;
    }
    return 0;
  }
  
  public static DeviceInfo a(Context paramContext)
  {
    DeviceInfo localDeviceInfo = new DeviceInfo();
    localDeviceInfo.apiLevel = ("" + d.c());
    localDeviceInfo.imei = d.c(paramContext);
    localDeviceInfo.model = d.d();
    localDeviceInfo.manu = Build.MANUFACTURER;
    localDeviceInfo.model = Build.MODEL;
    localDeviceInfo.network = Util.getLinkedWay(paramContext);
    localDeviceInfo.os = "android";
    DisplayMetrics localDisplayMetrics = Util.getDisplayMetrics(paramContext);
    localDeviceInfo.resolution = (localDisplayMetrics.widthPixels + "*" + localDisplayMetrics.heightPixels);
    localDeviceInfo.apiLevel = ("" + Build.VERSION.SDK_INT);
    localDeviceInfo.sdCard = Util.getExternalStorageInfo(paramContext);
    localDeviceInfo.sdDouble = Util.getSimOperator(paramContext);
    try
    {
      localDeviceInfo.sdkVersion = String.valueOf(2.37F);
      localDeviceInfo.sdkVersionName = Build.VERSION.RELEASE;
      localDeviceInfo.isRooted = d.k(paramContext);
      localDeviceInfo.language = Locale.getDefault().getLanguage();
      localDeviceInfo.timezone = TimeZone.getDefault().getID();
      localDeviceInfo.launcherName = d.j(paramContext);
      return localDeviceInfo;
    }
    catch (Throwable localThrowable)
    {
      for (;;)
      {
        TLog.e("XGService", "", localThrowable);
      }
    }
  }
  
  public static o a()
  {
    return a;
  }
  
  private void a(int paramInt, String paramString, com.tencent.android.tpush.service.channel.a paramA)
  {
    TLog.v("XGService", "@@ loadConfiguraionFailHandler(" + paramInt + "," + paramString + ")");
  }
  
  private void a(int paramInt, String paramString1, String paramString2, TpnsUnregisterReq paramTpnsUnregisterReq, com.tencent.android.tpush.service.channel.a paramA)
  {
    TLog.v("XGService", "@@ uninstallReportFailedHandler(" + paramInt + "," + paramString1 + "," + paramString2 + "," + paramTpnsUnregisterReq + ")");
    paramString1 = new UnregisterInfo();
    paramString1.accessId = paramTpnsUnregisterReq.unregInfo.appInfo.accessId;
    paramString1.accessKey = paramTpnsUnregisterReq.unregInfo.appInfo.accessKey;
    paramString1.isUninstall = paramTpnsUnregisterReq.unregInfo.isUninstall;
    paramString1.packName = paramString2;
    paramString1.timestamp = paramTpnsUnregisterReq.unregInfo.timestamp;
  }
  
  private String b(Context paramContext)
  {
    int j = 0;
    Object localObject;
    long l1;
    if (paramContext != null)
    {
      localObject = new StringBuilder().append("getWifiList(").append(paramContext.getPackageName()).append("), lastWifiList size:");
      if (b == null) {}
      for (i = 0;; i = b.length())
      {
        TLog.v("XGService", i);
        localObject = e.a(paramContext, 10);
        if ((localObject == null) || (((JSONArray)localObject).length() <= 0)) {
          break label215;
        }
        l1 = d.c(paramContext, c, 0L);
        if ((b == null) || (b.length() <= 0)) {
          break label218;
        }
        if (!b.toString().equalsIgnoreCase(((JSONArray)localObject).toString())) {
          break;
        }
        return "";
      }
    }
    label215:
    label218:
    for (int i = Math.abs(b.length() - ((JSONArray)localObject).length());; i = 0)
    {
      long l2 = System.currentTimeMillis();
      if (i >= 3) {}
      for (i = 1;; i = 0)
      {
        if (i == 0)
        {
          i = j;
          if (Math.abs(l2 - l1) <= 1800000L) {}
        }
        else
        {
          i = 1;
        }
        if (i == 0) {
          break;
        }
        d.b(paramContext, c, l2);
        paramContext = ((JSONArray)localObject).toString();
        b = (JSONArray)localObject;
        return paramContext;
      }
      return "";
    }
  }
  
  public void a(long paramLong)
  {
    TLog.v("XGService", "@@ loadConfiguration(" + paramLong + ")");
    TpnsConfigReq localTpnsConfigReq = new TpnsConfigReq(paramLong);
    TLog.i("XGTcpSendPacks", "@@ =============loadConfiguration()================");
    com.tencent.android.tpush.service.channel.b.b().a(localTpnsConfigReq, new q(this));
  }
  
  public void a(long paramLong, String paramString1, int paramInt, String paramString2, com.tencent.android.tpush.service.channel.o paramO)
  {
    TLog.v("XGService", "@@ sendTag(" + paramLong + "," + paramString1 + ")");
    paramString1 = new TpnsTokenTagReq();
    paramString1.accessId = paramLong;
    paramString1.flag = paramInt;
    paramString1.tag = paramString2;
    TLog.e("XGTcpSendPacks", "@@ =============TpnsTokenTagReq()================");
    com.tencent.android.tpush.service.channel.b.b().a(paramString1, paramO);
  }
  
  public void a(long paramLong, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt, String paramString5, String paramString6, String paramString7, com.tencent.android.tpush.service.channel.o paramO)
  {
    TLog.v("XGService", "@@ register(" + paramLong + "," + paramString2 + "," + paramString3 + "," + paramString4 + "," + paramInt + ")");
    TpnsRegisterReq localTpnsRegisterReq = new TpnsRegisterReq();
    localTpnsRegisterReq.accessId = paramLong;
    localTpnsRegisterReq.accessKey = paramString1;
    localTpnsRegisterReq.deviceId = paramString2;
    localTpnsRegisterReq.appCert = paramString5;
    localTpnsRegisterReq.account = paramString3;
    localTpnsRegisterReq.ticket = paramString4;
    localTpnsRegisterReq.ticketType = ((short)paramInt);
    localTpnsRegisterReq.deviceInfo = a(l.f());
    localTpnsRegisterReq.token = CacheManager.getToken(l.f());
    localTpnsRegisterReq.version = 1;
    localTpnsRegisterReq.appVersion = paramString6;
    localTpnsRegisterReq.reserved = paramString7;
    TLog.i("XGTcpSendPacks", "@@ =============TpnsRegisterReq()================");
    com.tencent.android.tpush.service.channel.b.b().a(localTpnsRegisterReq, paramO);
  }
  
  public void a(JceStruct paramJceStruct, com.tencent.android.tpush.service.channel.a paramA)
  {
    TLog.tf("XGService", "@@ onReceivedServicePush(" + paramJceStruct + "," + paramA + ")");
    if (paramJceStruct == null) {
      return;
    }
    if ((paramJceStruct instanceof TpnsPushClientReq))
    {
      paramJceStruct = (TpnsPushClientReq)paramJceStruct;
      TLog.tf("XGService", ">> receive Notification  from server, msglist" + paramJceStruct.msgList);
      com.tencent.android.tpush.service.b.a.a().a(paramJceStruct.msgList, paramJceStruct.timeUs, paramA);
      return;
    }
    TLog.tf("XGService", "onReceivedServicePush unhandle message type:" + paramJceStruct.getClass().getName());
  }
  
  public void a(String paramString)
  {
    TLog.v("XGService", "@@ uninstallReport(" + paramString + ")");
    com.tencent.android.tpush.data.b localB = CacheManager.getRegisterInfoByPkgName(paramString);
    if (localB != null)
    {
      TLog.i("XGService", ">>> uninstall report:" + localB.a + " " + localB.b + " " + localB.c + " " + paramString);
      TpnsUnregisterReq localTpnsUnregisterReq = new TpnsUnregisterReq();
      localTpnsUnregisterReq.unregInfo = new UnregInfo(new AppInfo(localB.a, localB.b, "", (byte)0), (byte)1, System.currentTimeMillis());
      CacheManager.UninstallInfoByPkgName(paramString);
      TLog.e("XGTcpSendPacks", "@@ =============TpnsUnregisterReq()================");
      com.tencent.android.tpush.service.channel.b.b().a(localTpnsUnregisterReq, new r(this, paramString));
    }
  }
  
  public void a(String paramString1, String paramString2, long paramLong, String paramString3, String paramString4, com.tencent.android.tpush.service.channel.o paramO)
  {
    TLog.v("XGService", "@@ register(" + paramString1 + "," + paramString2 + "," + paramLong + "," + paramString4 + ")");
    TpnsUnregisterReq localTpnsUnregisterReq = new TpnsUnregisterReq();
    paramString2 = "";
    try
    {
      TLog.v("XGService", ">> unregister report:" + paramLong + " " + paramString3 + " " + paramString1 + " " + paramString4);
      paramString1 = TpnsSecurity.getEncryptAPKSignature(l.f().createPackageContext(paramString4, 0));
      localTpnsUnregisterReq.unregInfo = new UnregInfo(new AppInfo(paramLong, paramString3, paramString1, (byte)0), (byte)0, 0L);
      TLog.e("XGTcpSendPacks", "@@ =============TpnsUnregisterReq()================");
      com.tencent.android.tpush.service.channel.b.b().a(localTpnsUnregisterReq, paramO);
      return;
    }
    catch (PackageManager.NameNotFoundException paramString1)
    {
      for (;;)
      {
        TLog.e("XGService", ">> create context [for: " + paramString4 + "] fail.", paramString1);
        paramString1 = paramString2;
      }
    }
    catch (Exception paramString1)
    {
      for (;;)
      {
        TLog.e("XGService", ">> create context [for: " + paramString4 + "] fail.", paramString1);
        paramString1 = paramString2;
      }
    }
  }
  
  public void a(ArrayList paramArrayList, com.tencent.android.tpush.service.channel.o paramO)
  {
    TLog.v("XGService", "@@ msgAck(" + paramArrayList + ")");
    if ((paramArrayList != null) && (paramArrayList.size() > 0))
    {
      paramArrayList = new TpnsPushVerifyReq(paramArrayList);
      TLog.i("XGTcpSendPacks", "@@ =============msgAck()================");
      com.tencent.android.tpush.service.channel.b.b().a(paramArrayList, paramO);
    }
  }
  
  public void a(boolean paramBoolean, long paramLong)
  {
    TLog.v("XGService", "@@ loadIPList(" + paramBoolean + "," + paramLong + ")");
    long l = CacheManager.getLastLoadIpTime(l.f());
    TLog.i("XGService", ">> load configure list, last time =" + l);
    if (paramBoolean)
    {
      TLog.i("XGService", ">> Http");
      if (System.currentTimeMillis() - l > com.tencent.android.tpush.service.a.a.n)
      {
        TLog.i("XGService", ">> load configure list, interval on expries.");
        if (com.tencent.android.tpush.service.a.a.a(l.f()) != paramLong) {
          a().a(paramLong);
        }
      }
    }
    while (System.currentTimeMillis() - l < com.tencent.android.tpush.service.a.a.n)
    {
      TLog.i("XGService", ">> load ip list, interval not on ready.");
      return;
      TLog.i("XGService", ">> Tcp");
      if (com.tencent.android.tpush.service.a.a.a(l.f()) != paramLong) {
        a().a(paramLong);
      }
    }
    TpnsGetApListReq localTpnsGetApListReq = new TpnsGetApListReq();
    NetworkInfo localNetworkInfo = new NetworkInfo();
    localNetworkInfo.network = d.e(l.f());
    localNetworkInfo.op = d.f(l.f());
    localTpnsGetApListReq.netInfo = localNetworkInfo;
    TLog.i("XGTcpSendPacks", "@@ =============loadIPList()================");
    com.tencent.android.tpush.service.channel.b.b().a(localTpnsGetApListReq, new s(this));
  }
  
  public n b()
  {
    TLog.i("XGService", "@@ ==========getReconnPackage()start==========");
    if (!d.d(l.f()))
    {
      TLog.w("XGService", ">> no app registered!");
      return null;
    }
    Object localObject = new TpnsReconnectReq();
    ((TpnsReconnectReq)localObject).deviceId = com.tencent.android.tpush.service.d.b.a();
    ((TpnsReconnectReq)localObject).networkType = ((short)d.e(l.f()));
    ((TpnsReconnectReq)localObject).token = CacheManager.getToken(l.f());
    ((TpnsReconnectReq)localObject).unregInfoList = CacheManager.getUninstallAndUnregisterInfo(l.f());
    ((TpnsReconnectReq)localObject).recvMsgList = com.tencent.android.tpush.service.b.a.a().b(l.f(), com.tencent.android.tpush.service.b.a.a().b(l.f()));
    ((TpnsReconnectReq)localObject).msgClickList = com.tencent.android.tpush.service.b.a.a().a(l.f());
    try
    {
      ((TpnsReconnectReq)localObject).sdkVersion = String.valueOf(2.37F);
      TLog.v("XGService", ">> TpnsReconnectReq, deviceId=" + ((TpnsReconnectReq)localObject).deviceId + ",networkType=" + ((TpnsReconnectReq)localObject).networkType + ",token=" + ((TpnsReconnectReq)localObject).token + ",unregInfoList=" + ((TpnsReconnectReq)localObject).unregInfoList + ",recvMsgList=" + ((TpnsReconnectReq)localObject).recvMsgList + "req.msgClickList=" + ((TpnsReconnectReq)localObject).msgClickList + ",req.sdkVersion=" + ((TpnsReconnectReq)localObject).sdkVersion);
      localContext = l.f();
      localMutableInfo = new MutableInfo();
      if ((localContext != null) && (Util.isNetworkAvailable(localContext)) && (Util.isWifiNet(localContext)))
      {
        localMutableInfo.bssid = Util.getWiFiBBSID(localContext);
        localMutableInfo.ssid = Util.getWiFiSSID(localContext);
      }
      localMutableInfo.mac = Util.getWifiMacAddress(localContext);
    }
    catch (Throwable localThrowable)
    {
      try
      {
        Context localContext;
        MutableInfo localMutableInfo;
        localMutableInfo.wflist = b(localContext);
        ((TpnsReconnectReq)localObject).mutableInfo = localMutableInfo;
        localObject = new n((JceStruct)localObject, this.d);
        TLog.i("XGService", "@@ ==========getReconnPackage()end==========");
        return localObject;
        localThrowable = localThrowable;
        TLog.e("XGService", "", localThrowable);
      }
      catch (Exception localException)
      {
        for (;;)
        {
          TLog.e("XGService", ">> getWifiList(" + localThrowable + ")" + localException);
        }
      }
    }
  }
  
  public void b(ArrayList paramArrayList, com.tencent.android.tpush.service.channel.o paramO)
  {
    TLog.v("XGService", "@@ sendPushClickResult(" + paramArrayList + ")");
    if ((paramArrayList == null) || (paramArrayList.size() == 0)) {
      return;
    }
    TLog.i("XGService", "sendPushClickResult");
    TpnsPushClickReq localTpnsPushClickReq = new TpnsPushClickReq();
    localTpnsPushClickReq.msgClickList = paramArrayList;
    TLog.e("XGTcpSendPacks", "@@ =============TpnsPushClickReq()================");
    com.tencent.android.tpush.service.channel.b.b().a(localTpnsPushClickReq, paramO);
  }
}
