package com.tencent.android.tpush.horse;

import com.tencent.android.tpush.horse.data.StrategyItem;
import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.channel.protocol.TpnsRedirectReq;
import com.tencent.android.tpush.service.l;
import java.util.concurrent.LinkedBlockingQueue;

class c
  extends Thread
{
  protected p a = new d(this);
  private o c;
  private int d;
  private StrategyItem e;
  
  public c(a paramA, int paramInt)
  {
    this.d = paramInt;
  }
  
  public o a()
  {
    return this.c;
  }
  
  public void run()
  {
    TLog.i("XGHorse", "@@ =================run()====================");
    while (a.a(this.b).size() > 0) {
      try
      {
        this.e = ((StrategyItem)a.a(this.b).remove());
        TpnsRedirectReq localTpnsRedirectReq = new TpnsRedirectReq();
        localTpnsRedirectReq.network = com.tencent.android.tpush.service.d.d.e(l.f());
        localTpnsRedirectReq.op = com.tencent.android.tpush.service.d.d.f(l.f());
        this.c = new o();
        this.c.a(this.a);
        try
        {
          TLog.i("XGHorse", ">> HorseThread:" + getClass().getSimpleName() + Thread.currentThread() + "current NetworkType:" + localTpnsRedirectReq.network + ",current Isp:" + localTpnsRedirectReq.op);
          TLog.i("XGHorse", ">> connect");
          this.c.a(this.e);
          TLog.i("XGHorse", ">> send");
          this.c.a(localTpnsRedirectReq);
          TLog.i("XGHorse", ">> recv");
          this.c.b();
          TLog.i("XGHorse", ">> end");
        }
        catch (Throwable localThrowable)
        {
          TLog.tf("XGHorse", "HorseThread error", localThrowable);
          TLog.e("XGHorse", "HorseThread error", localThrowable);
        }
      }
      catch (Exception localException1)
      {
        TLog.e("XGHorse", ">>can not get strateItem from strategyItems>>", localException1);
        try
        {
          Thread.sleep(5000L);
        }
        catch (Exception localException2)
        {
          TLog.e("XGHorse", localException2.toString());
        }
      }
    }
  }
}
