package com.tencent.android.tpush.common;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.util.Log;
import com.tencent.android.tpush.logging.TLog;

public class l
{
  private static final String[] a = { "android.permission.INTERNET", "android.permission.READ_PHONE_STATE", "android.permission.ACCESS_WIFI_STATE", "android.permission.ACCESS_NETWORK_STATE", "android.permission.RECEIVE_BOOT_COMPLETED", "android.permission.WRITE_SETTINGS", "android.permission.RECEIVE_USER_PRESENT", "android.permission.WRITE_EXTERNAL_STORAGE" };
  
  public static boolean a(Context paramContext)
  {
    if (paramContext == null) {
      throw new IllegalArgumentException("The context parameter can not be null!");
    }
    try
    {
      localObject = paramContext.getPackageManager();
      if (localObject == null) {
        break label160;
      }
      paramContext = ((PackageManager)localObject).getPackageInfo(paramContext.getPackageName(), 4096).requestedPermissions;
      if (paramContext == null)
      {
        paramContext = new PermissionNotFoundException("The required permissions do not found!");
        TLog.e("TPush", "check required permissins exception.", paramContext);
        throw paramContext;
      }
    }
    catch (Exception paramContext)
    {
      TLog.e("TPush", "check required permissins exception.", paramContext);
      Log.e("TPush", "check required permissins exception.", paramContext);
      return false;
    }
    Object localObject = a;
    int j = localObject.length;
    int i = 0;
    while (i < j)
    {
      String str = localObject[i];
      if (!a(paramContext, str))
      {
        paramContext = new PermissionNotFoundException("The required permission of <" + str + "> does not found!");
        TLog.e("TPush", "check required permissins exception.", paramContext);
        throw paramContext;
      }
      i += 1;
    }
    label160:
    return true;
  }
  
  private static boolean a(String[] paramArrayOfString, String paramString)
  {
    boolean bool2 = false;
    int j = paramArrayOfString.length;
    int i = 0;
    for (;;)
    {
      boolean bool1 = bool2;
      if (i < j)
      {
        if (paramString.equals(paramArrayOfString[i])) {
          bool1 = true;
        }
      }
      else {
        return bool1;
      }
      i += 1;
    }
  }
}
