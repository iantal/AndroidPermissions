package com.tencent.android.tpush;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.util.Log;
import com.jg.JgClassChecked;
import com.tencent.android.tpush.a.b;
import com.tencent.android.tpush.a.h;
import com.tencent.android.tpush.common.g;
import com.tencent.android.tpush.common.m;
import com.tencent.android.tpush.common.p;
import com.tencent.android.tpush.encrypt.Rijndael;
import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.XGPushService;
import com.tencent.android.tpush.service.channel.security.TpnsSecurity;
import com.tencent.android.tpush.service.d.d;
import com.tencent.android.tpush.service.l;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

@JgClassChecked(author=1, fComment="确认已进行安全校验", lastDate="20150316", reviewer=3, vComment={com.jg.EType.RECEIVERCHECK, com.jg.EType.INTENTCHECK})
public class XGPushManager
{
  public static final int OPERATION_FAIL = 1;
  public static final int OPERATION_REQ_REGISTER = 100;
  public static final int OPERATION_REQ_UNREGISTER = 101;
  public static final int OPERATION_SUCCESS = 0;
  private static final String a = XGPushManager.class.getName();
  private static int b = -1;
  private static Map c = new ConcurrentHashMap();
  
  private XGPushManager() {}
  
  static long a(Context paramContext, XGLocalMessage paramXGLocalMessage, long paramLong)
  {
    if ((paramContext == null) || (paramXGLocalMessage == null)) {
      Log.e("TPush", ">>> addLocalNotification context == null or msg == null");
    }
    while (!TpnsSecurity.checkTpnsSecurityLibSo(paramContext)) {
      return -1L;
    }
    Intent localIntent = new Intent("com.tencent.android.tpush.action.CUSTOM_NOTIFICATION");
    localIntent.putExtra("appPkgName", paramContext.getPackageName());
    long l = paramLong;
    if (paramLong <= 0L) {
      l = XGPushConfig.getAccessId(paramContext);
    }
    localIntent.putExtra("accessId", l);
    localIntent.putExtra("type", paramXGLocalMessage.getType());
    localIntent.putExtra("title", paramXGLocalMessage.getTitle());
    localIntent.putExtra("content", paramXGLocalMessage.getContent());
    localIntent.putExtra("custom_content", paramXGLocalMessage.getCustom_content());
    localIntent.putExtra("date", paramXGLocalMessage.getDate());
    localIntent.putExtra("hour", paramXGLocalMessage.getHour());
    localIntent.putExtra("min", paramXGLocalMessage.getMin());
    localIntent.putExtra("builderId", paramXGLocalMessage.getBuilderId());
    localIntent.putExtra("ring", paramXGLocalMessage.getRing());
    localIntent.putExtra("vibrate", paramXGLocalMessage.getVibrate());
    localIntent.putExtra("lights", paramXGLocalMessage.getLights());
    localIntent.putExtra("ring_raw", paramXGLocalMessage.getRing_raw());
    localIntent.putExtra("icon_type", paramXGLocalMessage.getIcon_type());
    localIntent.putExtra("icon_res", paramXGLocalMessage.getIcon_res());
    localIntent.putExtra("style_id", paramXGLocalMessage.getStyle_id());
    localIntent.putExtra("small_icon", paramXGLocalMessage.getSmall_icon());
    localIntent.putExtra("action_type", paramXGLocalMessage.getAction_type());
    localIntent.putExtra("activity", paramXGLocalMessage.getActivity());
    localIntent.putExtra("url", paramXGLocalMessage.getUrl());
    localIntent.putExtra("intent", paramXGLocalMessage.getIntent());
    localIntent.putExtra("packageDownloadUrl", paramXGLocalMessage.getPackageDownloadUrl());
    localIntent.putExtra("packageName", paramXGLocalMessage.getPackageName());
    paramLong = System.currentTimeMillis();
    localIntent.putExtra("msgId", -paramLong);
    localIntent.putExtra("timeUs", paramLong);
    paramContext.sendBroadcast(localIntent);
    return -paramLong;
  }
  
  static XGPushClickedResult a(Activity paramActivity)
  {
    TLog.v("XGPushMessage", ">>> onClickResult " + paramActivity);
    TLog.i("TPush", ">>> onActivityStarted activity=" + paramActivity);
    if ((paramActivity == null) || (paramActivity.getIntent() == null)) {}
    Intent localIntent;
    do
    {
      return null;
      localIntent = paramActivity.getIntent();
      localObject = localIntent.getStringExtra("tag.tpush.MSG");
    } while ((localObject == null) || (!((String)localObject).equalsIgnoreCase("true")) || (!TpnsSecurity.checkTpnsSecurityLibSo(paramActivity)) || (!isEnableService(paramActivity)));
    Object localObject = new XGPushClickedResult();
    ((XGPushClickedResult)localObject).parseIntent(localIntent);
    localIntent.removeExtra("tag.tpush.MSG");
    g.a().a(new x(paramActivity, localIntent));
    return localObject;
  }
  
  static void a(Context paramContext)
  {
    if (paramContext != null)
    {
      TLog.d(a, paramContext.getPackageName() + "call stop Push Service");
      Intent localIntent = new Intent();
      localIntent.setClass(paramContext.getApplicationContext(), XGPushService.class);
      paramContext.stopService(localIntent);
    }
  }
  
  static void a(Context paramContext, Intent paramIntent, XGIOperateCallback paramXGIOperateCallback, boolean paramBoolean)
  {
    TLog.d("TPush", ">>> start service first,then regeister");
    try
    {
      p.c(paramContext);
      ad localAd = new ad(paramContext, paramIntent, paramXGIOperateCallback);
      paramContext.registerReceiver(localAd, new IntentFilter("com.tencent.android.tpush.action.SERVICE_START"));
      paramContext = new ae(paramContext, paramIntent, paramXGIOperateCallback);
      c.put(localAd, paramContext);
      g.a().a(paramContext, 3000L);
      return;
    }
    catch (Throwable paramContext)
    {
      TLog.w("TPush", "startServiceAndRegisterOrUnregister error", paramContext);
    }
  }
  
  static void a(Context paramContext, XGIOperateCallback paramXGIOperateCallback, long paramLong, String paramString)
  {
    if (paramContext == null)
    {
      if (paramXGIOperateCallback != null)
      {
        paramXGIOperateCallback.onFail(null, 10001, "The context parameter can not be null!");
        return;
      }
      throw new IllegalArgumentException("The context parameter can not be null!");
    }
    paramContext = paramContext.getApplicationContext();
    g.a().a(new w(paramContext, paramXGIOperateCallback, paramLong, paramString));
  }
  
  private static void a(Context paramContext, h paramH)
  {
    if ((XGPro.isEnableXGPro(paramContext)) && (paramH != null))
    {
      TLog.i("XGPro", "reportVerify2Mta BusiMsgId=" + paramH.d());
      Properties localProperties = new Properties();
      localProperties.put("busiMsgId", "" + paramH.d());
      paramH = paramH.h();
      if (paramH != null)
      {
        localProperties.put("type", "" + paramH.b());
        XGPro.a(paramContext).a("xg_verify_all", localProperties);
        if (paramH.b() == 1) {
          XGPro.a(paramContext).a("xg_verify_notify", localProperties);
        }
      }
    }
  }
  
  static void a(Context paramContext, String paramString, int paramInt, long paramLong)
  {
    if (paramContext == null) {
      throw new IllegalArgumentException("The context parameter can not be null!");
    }
    if ((!TpnsSecurity.checkTpnsSecurityLibSo(paramContext)) || (!isEnableService(paramContext))) {
      return;
    }
    if (paramString == null) {
      throw new IllegalArgumentException("The tagName parameter can not be null!");
    }
    long l = paramLong;
    if (paramLong <= 0L) {
      l = XGPushConfig.getAccessId(paramContext);
    }
    if (l < 0L) {
      throw new IllegalArgumentException("The accessId not set!");
    }
    Intent localIntent = new Intent("com.tencent.android.tpush.action.TAG");
    localIntent.putExtra("accId", l);
    localIntent.putExtra("packName", Rijndael.encrypt(paramContext.getPackageName()));
    localIntent.putExtra("tagFlag", paramInt);
    localIntent.putExtra("tagName", Rijndael.encrypt(paramString));
    paramContext.sendBroadcast(localIntent);
  }
  
  static void a(Context paramContext, String paramString1, String paramString2, int paramInt, String paramString3, XGIOperateCallback paramXGIOperateCallback, long paramLong, String paramString4)
  {
    if (paramContext == null)
    {
      paramXGIOperateCallback.onFail(null, 10001, "The context parameter can not be null!");
      return;
    }
    paramContext = paramContext.getApplicationContext();
    g.a().a(new aa(paramContext, paramXGIOperateCallback, paramLong, paramString4, paramString1, paramString2, paramString3, paramInt));
  }
  
  public static long addLocalNotification(Context paramContext, XGLocalMessage paramXGLocalMessage)
  {
    return a(paramContext, paramXGLocalMessage, -1L);
  }
  
  private static String b(Context paramContext)
  {
    if (!TpnsSecurity.checkTpnsSecurityLibSo(paramContext)) {
      return "xg_service_enable";
    }
    return Rijndael.encrypt(XGPushConfig.getAccessId(paramContext) + "," + "xg_service_enable");
  }
  
  private static void c(Context paramContext, Intent paramIntent)
  {
    Intent localIntent = new Intent("com.tencent.android.tpush.action.PUSH_CLICK.RESULT");
    localIntent.putExtras(paramIntent);
    localIntent.putExtra("packName", paramContext.getPackageName());
    localIntent.putExtra("clickTime", System.currentTimeMillis() / 1000L);
    paramContext.sendBroadcast(localIntent);
  }
  
  private static void c(Context paramContext, Intent paramIntent, XGIOperateCallback paramXGIOperateCallback)
  {
    try
    {
      String str = p.a(paramContext);
      TLog.v("TPush", ">>> register to " + str);
      if (!p.a(str)) {
        paramIntent.setPackage(str);
      }
      if (paramXGIOperateCallback != null) {
        paramContext.registerReceiver(new ab(paramXGIOperateCallback), new IntentFilter("com.tencent.android.tpush.action.REGISTER.RESULT"));
      }
      TLog.v("TPush", ">>> send register intent " + paramIntent);
      paramContext.sendBroadcast(paramIntent);
      return;
    }
    finally {}
  }
  
  public static void clearLocalNotifications(Context paramContext)
  {
    if (paramContext == null) {
      TLog.e("TPush", ">>> clearLocalNotifications  context==null.");
    }
    while ((!TpnsSecurity.checkTpnsSecurityLibSo(paramContext)) || (!isEnableService(paramContext))) {
      return;
    }
    l.b(paramContext);
    new Thread(new y(paramContext)).start();
  }
  
  private static void d(Context paramContext, Intent paramIntent)
  {
    if (paramIntent != null)
    {
      TLog.i("TPush", ">>> broadcast2NotifactionClickedFeedback intent=" + paramIntent);
      Intent localIntent = new Intent("com.tencent.android.tpush.action.FEEDBACK");
      localIntent.setPackage(paramContext.getPackageName());
      localIntent.putExtra("TPUSH.FEEDBACK", 4);
      localIntent.putExtra("TPUSH.ERRORCODE", 0);
      localIntent.putExtras(paramIntent);
      paramContext.sendBroadcast(localIntent);
    }
  }
  
  private static void d(Context paramContext, Intent paramIntent, XGIOperateCallback paramXGIOperateCallback)
  {
    String str = p.a(paramContext);
    if (!p.a(str)) {
      paramIntent.setPackage(str);
    }
    if (paramXGIOperateCallback != null) {
      paramContext.registerReceiver(new t(paramXGIOperateCallback), new IntentFilter("com.tencent.android.tpush.action.UNREGISTER.RESULT"));
    }
    paramContext.sendBroadcast(paramIntent);
  }
  
  public static void deleteKeyValueTag(Context paramContext, String paramString1, String paramString2)
  {
    if ((paramContext == null) || (paramString1 == null) || (paramString1.trim().length() == 0))
    {
      TLog.e("TPush", "deleteKeyValueTag context or tagKey invalid.");
      return;
    }
    a(paramContext, paramString1 + "::::" + paramString2, 4, -1L);
  }
  
  public static void deleteTag(Context paramContext, String paramString)
  {
    a(paramContext, paramString, 2, -1L);
  }
  
  public static void enableService(Context paramContext, boolean paramBoolean)
  {
    if (paramContext == null) {
      return;
    }
    if (paramBoolean) {}
    for (int i = 1;; i = 0)
    {
      b = i;
      TLog.i("TPush", "enableService=" + b);
      m.b(paramContext, b(paramContext), b);
      if (paramBoolean) {
        break;
      }
      Log.e("TPush", "XG is disable.");
      unregisterPush(paramContext, new z(paramContext));
      return;
    }
  }
  
  public static XGPushNotificationBuilder getDefaultNotificationBuilder(Context paramContext)
  {
    XGPushNotificationBuilder localXGPushNotificationBuilder = getNotificationBuilder(paramContext, 0);
    if (localXGPushNotificationBuilder == null) {
      b.a(paramContext);
    }
    return localXGPushNotificationBuilder;
  }
  
  public static XGPushNotificationBuilder getNotificationBuilder(Context paramContext, int paramInt)
  {
    if (paramContext == null)
    {
      Log.e("TPush", "getNotificationBuilder  context == null");
      return null;
    }
    return b.a(paramContext, paramInt);
  }
  
  public static int getServiceStatus(Context paramContext)
  {
    if (paramContext != null) {
      return p.b(paramContext);
    }
    return 0;
  }
  
  public static boolean isEnableService(Context paramContext)
  {
    boolean bool = false;
    if (paramContext == null) {
      bool = true;
    }
    for (;;)
    {
      return bool;
      if (b == -1)
      {
        b = m.a(paramContext, b(paramContext), 2);
        TLog.i("TPush", "isEnableService=" + b);
      }
      HashMap localHashMap;
      int i;
      label148:
      String str;
      if ((b == 2) && (TpnsSecurity.checkTpnsSecurityLibSo(paramContext)))
      {
        Object localObject = d.e(paramContext, com.tencent.android.tpush.service.a.a.b("stopXG"));
        if (!p.a((String)localObject))
        {
          localObject = Rijndael.decrypt((String)localObject);
          TLog.i("TPush", "get accessids which should be stop:" + (String)localObject);
          localObject = ((String)localObject).split(",");
          localHashMap = new HashMap();
          int j = localObject.length;
          i = 0;
          if (i < j) {
            str = localObject[i];
          }
        }
      }
      try
      {
        localHashMap.put(Long.valueOf(str), Long.valueOf(0L));
        i += 1;
        break label148;
        if (localHashMap.size() > 0)
        {
          if ((XGPushConfig.getAccessId(paramContext) > 0L) && (localHashMap.containsKey(Long.valueOf(XGPushConfig.getAccessId(paramContext)))))
          {
            enableService(paramContext, false);
            return false;
          }
          if ((XGPush4Msdk.getQQAccessId(paramContext) > 0L) && (localHashMap.containsKey(Long.valueOf(XGPush4Msdk.getQQAccessId(paramContext)))))
          {
            enableService(paramContext, false);
            return false;
          }
        }
        if (b == 0) {
          continue;
        }
        return true;
      }
      catch (NumberFormatException localNumberFormatException)
      {
        for (;;) {}
      }
    }
  }
  
  public static void msgAck(Context paramContext, h paramH)
  {
    if ((paramContext != null) && (paramH != null))
    {
      TLog.v("TPush", "@@ msgAck(" + paramContext.getPackageName() + "," + paramH.b() + ")");
      com.tencent.android.tpush.service.b.a.a().b(paramContext, paramContext.getPackageName(), paramH.b());
      if (paramH.b() > 0L)
      {
        Intent localIntent = new Intent("com.tencent.android.tpush.action.MSG_ACK");
        localIntent.putExtra("msgId", paramH.b());
        localIntent.putExtra("packName", paramContext.getPackageName());
        paramContext.sendBroadcast(localIntent);
        a(paramContext, paramH);
      }
    }
  }
  
  public static XGPushClickedResult onActivityStarted(Activity paramActivity)
  {
    TLog.v("XGPushMessage", ">>> onActivityStarted " + paramActivity);
    if ((paramActivity == null) || (paramActivity.getIntent() == null) || (!isEnableService(paramActivity))) {
      return null;
    }
    paramActivity = paramActivity.getIntent();
    if ((paramActivity != null) && (paramActivity.hasExtra("tag.tpush.NOTIFIC"))) {
      try
      {
        Object localObject = paramActivity.getSerializableExtra("tag.tpush.NOTIFIC");
        paramActivity.removeExtra("tag.tpush.NOTIFIC");
        if ((localObject != null) && ((localObject instanceof XGPushClickedResult)))
        {
          localObject = (XGPushClickedResult)localObject;
          ((XGPushClickedResult)localObject).parseIntent(paramActivity);
          return localObject;
        }
      }
      catch (Exception paramActivity) {}
    }
    return null;
  }
  
  public static void onActivityStoped(Activity paramActivity)
  {
    if (paramActivity == null) {}
  }
  
  public static void registerPush(Context paramContext)
  {
    registerPush(paramContext, new s());
  }
  
  public static void registerPush(Context paramContext, XGIOperateCallback paramXGIOperateCallback)
  {
    if (paramXGIOperateCallback == null) {
      throw new IllegalArgumentException("The callback parameter can not be null!");
    }
    a(paramContext, null, null, -1, null, paramXGIOperateCallback, -1L, null);
  }
  
  public static void registerPush(Context paramContext, String paramString)
  {
    if ((paramContext == null) || (paramString == null))
    {
      TLog.e("TPush", "the parameter context or account of registerPush is invalid.");
      return;
    }
    registerPush(paramContext, paramString, new u());
  }
  
  public static void registerPush(Context paramContext, String paramString, XGIOperateCallback paramXGIOperateCallback)
  {
    if (paramXGIOperateCallback == null) {
      throw new IllegalArgumentException("The callback parameter can not be null!");
    }
    registerPush(paramContext, paramString, "0", 0, null, paramXGIOperateCallback);
  }
  
  public static void registerPush(Context paramContext, String paramString1, String paramString2, int paramInt, String paramString3, XGIOperateCallback paramXGIOperateCallback)
  {
    if (paramXGIOperateCallback == null) {
      throw new IllegalArgumentException("The callback parameter can not be null!");
    }
    if ((paramContext == null) || (p.a(paramString1)) || (p.a(paramString2)) || (paramInt < 0))
    {
      paramXGIOperateCallback.onFail(null, 10001, "The context, account, ticket or ticketType is(are) invalid!");
      return;
    }
    a(paramContext, paramString1, paramString2, paramInt, paramString3, paramXGIOperateCallback, -1L, null);
  }
  
  public static void reportNotifactionClear2Mta(Context paramContext, long paramLong)
  {
    if (XGPro.isEnableXGPro(paramContext))
    {
      TLog.i("XGPro", "reportNotifactionClear2Mta BusiMsgId=" + paramLong);
      Properties localProperties = new Properties();
      localProperties.put("busiMsgId", "" + paramLong);
      XGPro.a(paramContext).a("xg_clear", localProperties);
    }
  }
  
  public static void reportNotifactionClicked2Mta(Context paramContext, Intent paramIntent)
  {
    if ((XGPro.isEnableXGPro(paramContext)) && (paramIntent != null))
    {
      TLog.i("TPush", ">>> reportNotifactionClicked2Mta intent=" + paramIntent);
      long l = paramIntent.getLongExtra("busiMsgId", -1L);
      TLog.i("XGPro", "reportNotifactionClicked2Mta BusiMsgId=" + l);
      paramIntent = new Properties();
      paramIntent.put("busiMsgId", String.valueOf(l));
      XGPro.a(paramContext).a("xg_click", paramIntent);
    }
  }
  
  public static void setDefaultNotificationBuilder(Context paramContext, XGPushNotificationBuilder paramXGPushNotificationBuilder)
  {
    if (paramContext == null) {
      throw new IllegalArgumentException("context is null.");
    }
    if (paramXGPushNotificationBuilder == null) {
      return;
    }
    b.a(paramContext, 0, paramXGPushNotificationBuilder);
  }
  
  public static void setKeyValueTag(Context paramContext, String paramString1, String paramString2)
  {
    if ((paramContext == null) || (paramString1 == null) || (paramString1.trim().length() == 0) || (paramString2 == null) || (paramString2.trim().length() == 0))
    {
      TLog.e("TPush", "setKeyValueTag context or tagKey or tagValue invalid.");
      return;
    }
    a(paramContext, paramString1 + "::::" + paramString2, 3, -1L);
  }
  
  public static void setPushNotificationBuilder(Context paramContext, int paramInt, XGPushNotificationBuilder paramXGPushNotificationBuilder)
  {
    if (paramContext == null) {
      throw new IllegalArgumentException("context is null.");
    }
    if ((paramInt < 1) || (paramInt > 4096)) {
      throw new IllegalArgumentException("notificationBulderId不在范围[1, 4096].");
    }
    if (paramXGPushNotificationBuilder == null) {
      return;
    }
    b.a(paramContext, paramInt, paramXGPushNotificationBuilder);
  }
  
  public static void setTag(Context paramContext, String paramString)
  {
    a(paramContext, paramString, 1, -1L);
  }
  
  public static void startPushService(Context paramContext)
  {
    if (paramContext != null)
    {
      TLog.d(a, paramContext.getPackageName() + "call start Push Service");
      p.e(paramContext);
      if (p.b(paramContext) == 0)
      {
        TLog.d(a, "Push Service isn't Running, need start!");
        p.c(paramContext);
      }
    }
  }
  
  public static void unregisterPush(Context paramContext)
  {
    if (paramContext == null)
    {
      TLog.e("TPush", "the context of unregisterPush is null");
      return;
    }
    unregisterPush(paramContext, new v());
  }
  
  public static void unregisterPush(Context paramContext, XGIOperateCallback paramXGIOperateCallback)
  {
    a(paramContext, paramXGIOperateCallback, XGPushConfig.getAccessId(paramContext), XGPushConfig.getAccessKey(paramContext));
  }
}
