package com.tencent.android.tpush.service.channel.b;

import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.channel.exception.IORefusedException;
import com.tencent.android.tpush.service.channel.exception.InnerException;
import com.tencent.android.tpush.service.channel.exception.UnexpectedDataException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class b
  extends f
  implements e
{
  private static final String h = b.class.getSimpleName();
  protected HashMap a = new HashMap(4);
  protected int b = 0;
  protected int c = -1;
  public ArrayList d = new ArrayList(1);
  protected String e = null;
  protected String f = null;
  protected final HashMap g = new HashMap(8);
  
  public b(String paramString1, String paramString2)
  {
    this.e = paramString1;
    this.f = paramString2;
  }
  
  public int a(OutputStream paramOutputStream)
  {
    TLog.d("Channel.HttpSendPacket", ">>> write(" + paramOutputStream + ")");
    c();
    for (;;)
    {
      try
      {
        this.b = 0;
        i = 0;
        j = i;
        try
        {
          if (b()) {
            continue;
          }
          j = this.b;
          this.b = (j + 1);
          if (j <= 2) {
            continue;
          }
          throw new InnerException("the duration of the current step is too long!");
        }
        catch (IORefusedException paramOutputStream) {}
      }
      catch (IORefusedException paramOutputStream)
      {
        int j;
        int i = 0;
        continue;
        continue;
      }
      TLog.v("Channel.HttpSendPacket", "write >>> IORefusedException thrown", paramOutputStream);
      j = i;
      return j;
      switch (this.c)
      {
      case -1: 
        throw new InnerException("illegal step value!");
        j = i + b(paramOutputStream);
        i = j;
        break;
      case 0: 
        d();
      }
    }
  }
  
  void a(int paramInt)
  {
    if (this.c != paramInt) {
      this.b = 0;
    }
    this.c = paramInt;
  }
  
  public void a(e paramE)
  {
    this.d.add(paramE);
  }
  
  public void a(String paramString1, String paramString2)
  {
    this.g.put(paramString1, paramString2);
  }
  
  protected int b(OutputStream paramOutputStream)
  {
    byte[] arrayOfByte = (byte[])this.a.get("httpData");
    Object localObject1 = arrayOfByte;
    if (arrayOfByte == null)
    {
      localObject1 = new ByteArrayOutputStream();
      Object localObject2;
      try
      {
        c((OutputStream)localObject1);
        arrayOfByte = ((ByteArrayOutputStream)localObject1).toByteArray();
        a("Content-Length", String.valueOf(arrayOfByte.length));
        localObject1 = "POST " + this.f + " HTTP/1.1" + "\r\n";
        localObject2 = this.g.entrySet().iterator();
        while (((Iterator)localObject2).hasNext())
        {
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject2).next();
          localObject1 = (String)localObject1 + (String)localEntry.getKey() + ": " + (String)localEntry.getValue() + "\r\n";
        }
        localObject2 = ((String)localObject1 + "\r\n").getBytes("UTF-8");
      }
      catch (IOException paramOutputStream)
      {
        throw new UnexpectedDataException("http content can not be write correctly!", paramOutputStream);
      }
      localObject1 = new byte[localObject2.length + arrayOfByte.length];
      System.arraycopy(localObject2, 0, localObject1, 0, localObject2.length);
      System.arraycopy(arrayOfByte, 0, localObject1, localObject2.length, arrayOfByte.length);
      this.a.put("httpData", localObject1);
      this.a.put("httpDataLeftLength", Integer.valueOf(localObject1.length));
    }
    int i = ((Integer)this.a.get("httpDataLeftLength")).intValue();
    if (i == 0)
    {
      a(0);
      return 0;
    }
    int j = com.tencent.android.tpush.service.channel.c.e.a(paramOutputStream, (byte[])localObject1);
    this.a.put("httpDataLeftLength", Integer.valueOf(i - j));
    return j;
  }
  
  protected void c(OutputStream paramOutputStream)
  {
    TLog.i(h, ">>sendPackets size=" + this.d.size());
    Iterator localIterator = this.d.iterator();
    while (localIterator.hasNext())
    {
      e localE = (e)localIterator.next();
      localE.a(this.j);
      localE.a(paramOutputStream);
    }
  }
}
