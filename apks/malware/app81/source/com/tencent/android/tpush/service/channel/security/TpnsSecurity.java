package com.tencent.android.tpush.service.channel.security;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Log;
import com.tencent.android.tpush.encrypt.Rijndael;
import com.tencent.android.tpush.logging.TLog;
import com.tencent.android.tpush.service.d.d;
import java.io.File;

public class TpnsSecurity
{
  private static final String DEVICE_ID_KEY_NAME = "deviceId_v1";
  private static final String DEVICE_ID_PREFIX = "deviceId_";
  private static final String DEVICE_ID_VERSION = "v1";
  private static final String SETTINGS_DEVICE_ID_KEY_NAME = ".com.tencent.tpush.cache.deviceId_v1";
  private static final String SETTINGS_DEVICE_ID_PREFIX = ".com.tencent.tpush.cache";
  private static final String SHAREPREFERENCE_FILE_NAME = "device_id";
  private static boolean loadedTpnsSecuritySo = false;
  public static final String tpnsSecurityLibFullName = "libtpnsSecurity.so";
  private static final String tpnsSecurityLibName = "tpnsSecurity";
  protected byte[] encKey;
  protected long inc = 0L;
  protected long incRemote;
  protected byte[] iv;
  protected byte[] key;
  protected long random;
  
  static
  {
    try
    {
      System.loadLibrary("tpnsSecurity");
      TLog.i("XGService", "libtpnsSecurity.so has loaded");
      loadedTpnsSecuritySo = true;
      return;
    }
    catch (Throwable localThrowable)
    {
      TLog.e("XGService", "can not load library,error:" + localThrowable.getMessage());
      loadedTpnsSecuritySo = false;
    }
  }
  
  public TpnsSecurity() {}
  
  public static boolean checkTpnsSecurityLibSo(Context paramContext)
  {
    if (loadedTpnsSecuritySo) {
      return true;
    }
    if (paramContext != null)
    {
      TLog.i("XGService", "@@ checkTpnsSecuritySo(" + paramContext.getPackageName() + ")");
      localObject = "";
    }
    try
    {
      paramContext = paramContext.getDir("lib", 0).getParentFile().getAbsolutePath() + File.separator + "lib" + File.separator + "libtpnsSecurity.so";
      localObject = paramContext;
      Log.i("XGService", ">> checkTpnsSecuritySo loadpath=" + paramContext);
      localObject = paramContext;
      System.load(paramContext);
      localObject = paramContext;
      Log.i("XGService", "libtpnsSecurity.so has loaded");
      localObject = paramContext;
      loadedTpnsSecuritySo = true;
    }
    catch (Throwable paramContext)
    {
      for (;;)
      {
        loadedTpnsSecuritySo = false;
        Log.e("XGService", "can not load library from " + (String)localObject + ",error:" + paramContext.getMessage());
        Log.e("XGService", "please add libtpnsSecurity.so to your android project and try again.");
        TLog.tf("XGService", "load .so failed", paramContext);
      }
    }
    return loadedTpnsSecuritySo;
  }
  
  protected static native byte[] generateAESKey();
  
  protected static native byte[] generateIV(long paramLong);
  
  public static String generateLocalSocketServieName(Context paramContext)
  {
    if (paramContext != null) {
      try
      {
        paramContext = generateLocalSocketServieNameNative(paramContext);
        return paramContext;
      }
      catch (Throwable paramContext)
      {
        TLog.e("XGService", "generateLocalSocketServieName 未知错误", paramContext);
      }
    }
    throw new SecurityException("generate local socket server name error");
  }
  
  private static native String generateLocalSocketServieNameNative(Object paramObject);
  
  public static String getBusinessDeviceId(Context paramContext)
  {
    if (paramContext == null) {
      throw new SecurityException("get device id error cause context is null");
    }
    String str = getSettingsLocalDeviceId(paramContext);
    if (str != null) {
      return str;
    }
    str = getPreferenceLocalDeviceId(paramContext);
    if (str != null)
    {
      setSettingsLocalDeviceId(paramContext, str);
      return str;
    }
    str = getBusinessDeviceIdNative(paramContext);
    setPreferenceLocalDeviceId(paramContext, str);
    setSettingsLocalDeviceId(paramContext, str);
    return str;
  }
  
  private static native String getBusinessDeviceIdNative(Object paramObject);
  
  public static String getEncryptAPKSignature(Context paramContext)
  {
    if (paramContext != null) {
      return getEncryptAPKSignatureNative(paramContext);
    }
    throw new SecurityException("get encrypt apk signature error");
  }
  
  private static native String getEncryptAPKSignatureNative(Object paramObject);
  
  private static String getPreferenceLocalDeviceId(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("device_id", 0);
    if (!paramContext.contains(com.tencent.android.tpush.encrypt.a.a("deviceId_v1"))) {}
    do
    {
      do
      {
        return null;
        paramContext = paramContext.getString(com.tencent.android.tpush.encrypt.a.a("deviceId_v1"), null);
      } while ((paramContext == null) || (paramContext.trim().equals("")));
      paramContext = Rijndael.decrypt(paramContext);
    } while (d.a(paramContext));
    return paramContext;
  }
  
  private static String getSettingsLocalDeviceId(Context paramContext)
  {
    paramContext = d.e(paramContext, ".com.tencent.tpush.cache.deviceId_v1");
    if (paramContext == null) {}
    do
    {
      return null;
      paramContext = Rijndael.decrypt(paramContext);
    } while (d.a(paramContext));
    return paramContext;
  }
  
  public static String oiSymmetryDecrypt2(String paramString)
  {
    "".getBytes();
    if (paramString != null) {}
    try
    {
      if (paramString.length() <= 0)
      {
        TLog.e("XGService", ">> oiSymmetryDecrypt2 解密内容输入为空");
        return "";
      }
      paramString = a.a(paramString);
      if ((paramString == null) || (paramString.length <= 0))
      {
        TLog.e("XGService", ">> oiSymmetryDecrypt2 解码失败，返回空字符串");
        return "failed";
      }
      paramString = oiSymmetryDecrypt2Byte(paramString);
      if ((paramString == null) || (paramString.length <= 0))
      {
        TLog.e("XGService", ">> oiSymmetryDecrypt2 解密失败，返回空字符串");
        return "failed";
      }
    }
    catch (Throwable paramString)
    {
      TLog.e("XGService", ">> oiSymmetryEncrypt2 未知错误", paramString);
      return "failed";
    }
    return new String(paramString);
  }
  
  private static native byte[] oiSymmetryDecrypt2Byte(byte[] paramArrayOfByte);
  
  public static String oiSymmetryEncrypt2(String paramString)
  {
    if (paramString != null) {}
    try
    {
      if (paramString.length() <= 0)
      {
        TLog.e("XGService", ">> oiSymmetryEncrypt2 加密内容输入为空");
        return "";
      }
      Object localObject = oiSymmetryEncrypt2Byte(paramString);
      if (localObject == null)
      {
        TLog.e("XGService", ">> oiSymmetryEncrypt2 加密失败，返回空字符串 inBuff:" + paramString);
        return "failed";
      }
      localObject = b.a((byte[])localObject);
      paramString = (String)localObject;
      if (localObject == null)
      {
        TLog.e("XGService", ">> oiSymmetryEncrypt2 Base64编码失败，返回空字符串");
        return "failed";
      }
    }
    catch (Throwable paramString)
    {
      TLog.e("XGService", ">> oiSymmetryEncrypt2 未知错误", paramString);
      paramString = "failed";
    }
    return paramString;
  }
  
  private static native byte[] oiSymmetryEncrypt2Byte(String paramString);
  
  private static void setPreferenceLocalDeviceId(Context paramContext, String paramString)
  {
    paramContext = paramContext.getSharedPreferences("device_id", 0).edit();
    paramContext.putString(com.tencent.android.tpush.encrypt.a.a("deviceId_v1"), Rijndael.encrypt(paramString));
    paramContext.commit();
  }
  
  private static void setSettingsLocalDeviceId(Context paramContext, String paramString)
  {
    d.a(paramContext, ".com.tencent.tpush.cache.deviceId_v1", Rijndael.encrypt(paramString));
  }
  
  private static String toCharsString(byte[] paramArrayOfByte)
  {
    int k = paramArrayOfByte.length;
    char[] arrayOfChar = new char[k * 2];
    int i = 0;
    if (i < k)
    {
      int m = paramArrayOfByte[i];
      int j = m >> 4 & 0xF;
      if (j >= 10)
      {
        j = j + 97 - 10;
        label44:
        arrayOfChar[(i * 2)] = ((char)j);
        j = m & 0xF;
        if (j < 10) {
          break label97;
        }
        j = j + 97 - 10;
      }
      for (;;)
      {
        arrayOfChar[(i * 2 + 1)] = ((char)j);
        i += 1;
        break;
        j += 48;
        break label44;
        label97:
        j += 48;
      }
    }
    return new String(arrayOfChar);
  }
  
  public void checkRemoteInc(long paramLong)
  {
    if (paramLong <= this.incRemote) {
      throw new SecurityException("检查的inc小于等于当前记录的远端inc");
    }
    this.incRemote = paramLong;
  }
  
  protected native byte[] decryptByAES(byte[] paramArrayOfByte, long paramLong);
  
  public byte[] decryptData(byte[] paramArrayOfByte)
  {
    try
    {
      byte[] arrayOfByte = decryptByAES(paramArrayOfByte, this.random);
      return arrayOfByte;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
    }
    return paramArrayOfByte;
  }
  
  protected native byte[] encryptByAES(byte[] paramArrayOfByte, long paramLong);
  
  protected native byte[] encryptByRSA(byte[] paramArrayOfByte);
  
  public byte[] encryptData(byte[] paramArrayOfByte)
  {
    try
    {
      byte[] arrayOfByte = encryptByAES(paramArrayOfByte, this.random);
      return arrayOfByte;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
    }
    return paramArrayOfByte;
  }
  
  public byte[] getEncKey()
  {
    return this.encKey;
  }
  
  public long getInc()
  {
    long l = this.inc + 1L;
    this.inc = l;
    return l;
  }
  
  public long getRandom()
  {
    return this.random;
  }
  
  public boolean needsUpdate()
  {
    return this.random == 0L;
  }
  
  public void reset()
  {
    this.random = 0L;
  }
  
  public void update()
  {
    for (this.random = 0L; this.random == 0L; this.random = ((Math.random() * 2.147483647E9D))) {}
    this.iv = generateIV(this.random);
    try
    {
      this.key = generateAESKey();
      this.encKey = encryptByRSA(this.key);
      return;
    }
    catch (Throwable localThrowable)
    {
      TLog.e("XGService", "update error:" + localThrowable.getMessage());
    }
  }
}
