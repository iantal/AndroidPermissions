package com.tencent.tpshell;

import android.os.Build;
import android.os.Build.VERSION;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class DeviceInfo
{
  private static String mCPUArch;
  private static boolean mIsArt;
  private static String mVMLibName;
  private static String mVMName;
  
  static {}
  
  public DeviceInfo() {}
  
  public static String getCpuArch()
  {
    return mCPUArch;
  }
  
  public static String getDeviceModel()
  {
    return Build.MODEL;
  }
  
  public static String getSystemVersion()
  {
    return Build.VERSION.RELEASE;
  }
  
  private static void init()
  {
    boolean bool2 = true;
    boolean bool1 = true;
    if (isYunOS())
    {
      if (judgeYunOSVMIsDalvik() != true)
      {
        mIsArt = bool1;
        if (!mIsArt) {
          break label56;
        }
        str = "art";
        label30:
        mVMName = str;
        if (!mIsArt) {
          break label62;
        }
      }
      label56:
      label62:
      for (str = "libart.so";; str = "libvmkid_lemur.so")
      {
        mVMLibName = str;
        initCPUArchInfo();
        return;
        bool1 = false;
        break;
        str = "vmkid";
        break label30;
      }
    }
    if (System.getProperty("java.vm.version").compareTo("2.0.0") >= 0)
    {
      bool1 = bool2;
      label83:
      mIsArt = bool1;
      if (!mIsArt) {
        break label121;
      }
      str = "art";
      label96:
      mVMName = str;
      if (!mIsArt) {
        break label127;
      }
    }
    label121:
    label127:
    for (String str = "libart.so";; str = "libdvm.so")
    {
      mVMLibName = str;
      break;
      bool1 = false;
      break label83;
      str = "dalvik";
      break label96;
    }
  }
  
  private static void initCPUArchInfo()
  {
    String str = Build.CPU_ABI;
    if (str.startsWith("armeabi")) {
      str = "arm";
    }
    for (;;)
    {
      mCPUArch = str;
      return;
      if (str.compareTo("arm64-v8a") == 0) {
        str = "arm64";
      } else if (str.compareTo("x86") == 0) {
        str = "x86";
      } else if (str.compareTo("x86_64") == 0) {
        str = "x86_64";
      } else {
        str = null;
      }
    }
  }
  
  public static boolean isArt()
  {
    return mIsArt;
  }
  
  private static boolean isYunOS()
  {
    return new File("/system/lib/libvmkid_lemur.so").exists();
  }
  
  private static boolean judgeYunOSVMIsDalvik()
  {
    boolean bool = false;
    Object localObject = new File("/proc/self/maps");
    try
    {
      localObject = new BufferedReader(new FileReader((File)localObject));
      for (;;)
      {
        String str = ((BufferedReader)localObject).readLine();
        if (str == null) {
          break;
        }
        int i = str.lastIndexOf('/');
        if ((i != -1) && (str.indexOf("libvmkid_lemur.so", i) != -1)) {
          bool = true;
        }
      }
      ((BufferedReader)localObject).close();
      return bool;
    }
    catch (IOException localIOException)
    {
      return true;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      for (;;) {}
    }
  }
  
  public static String vmLibName()
  {
    return mVMLibName;
  }
  
  public static String vmName()
  {
    return mVMName;
  }
}
