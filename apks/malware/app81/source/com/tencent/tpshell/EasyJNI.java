package com.tencent.tpshell;

import android.content.Context;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Vector;

public class EasyJNI
{
  static final String SIG = "Lcom/tencent/tpshell/AAA;";
  static final String TAG = "EasyJNI";
  static ClassLoader sAppClassLoader = EasyJNI.class.getClassLoader();
  static Vector<ClassLoader> sClassLoaderCollector = new Vector(2, 2);
  
  public EasyJNI() {}
  
  public static Object getFieldObject(String paramString1, Object paramObject, String paramString2)
    throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IllegalArgumentException
  {
    paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
    paramString1.setAccessible(true);
    return paramString1.get(paramObject);
  }
  
  public static Object invokeMethod(Object paramObject, String paramString1, String paramString2, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    if (paramObject == null) {}
    do
    {
      return null;
      paramString1 = loadClass(paramString1);
    } while (paramString1 == null);
    try
    {
      paramObject = paramString1.getDeclaredMethod(paramString2, paramArrayOfClass).invoke(paramObject, paramArrayOfObject);
      return paramObject;
    }
    catch (InvocationTargetException paramObject)
    {
      return null;
    }
    catch (IllegalAccessException paramObject)
    {
      return null;
    }
    catch (IllegalArgumentException paramObject)
    {
      return null;
    }
    catch (NoSuchMethodException paramObject) {}
    return null;
  }
  
  public static Object invokeStaticMethod(String paramString1, String paramString2, Class<?>[] paramArrayOfClass, Object[] paramArrayOfObject)
  {
    Object localObject = null;
    Class localClass = loadClass(paramString1);
    paramString1 = localObject;
    if (localClass != null) {}
    try
    {
      paramString1 = localClass.getDeclaredMethod(paramString2, paramArrayOfClass).invoke(null, paramArrayOfObject);
      return paramString1;
    }
    catch (InvocationTargetException paramString1)
    {
      return null;
    }
    catch (IllegalAccessException paramString1)
    {
      return null;
    }
    catch (IllegalArgumentException paramString1)
    {
      return null;
    }
    catch (NoSuchMethodException paramString1) {}
    return null;
  }
  
  public static Class<?> loadClass(String paramString)
  {
    if (paramString != null)
    {
      String str = paramString;
      if (paramString.contains("/")) {
        str = paramString.replace('/', '.');
      }
      try
      {
        if (sClassLoaderCollector.isEmpty() != true) {
          return ((ClassLoader)sClassLoaderCollector.lastElement()).loadClass(str);
        }
        paramString = sAppClassLoader.loadClass(str);
        return paramString;
      }
      catch (ClassNotFoundException paramString) {}
    }
    return null;
  }
  
  public static ClassLoader newDexClassLoader(Context paramContext, String paramString1, String paramString2, boolean paramBoolean)
  {
    if (paramString1 == null)
    {
      paramString1 = null;
      return paramString1;
    }
    for (;;)
    {
      try
      {
        if (sClassLoaderCollector.isEmpty() != true)
        {
          localClassLoader = (ClassLoader)sClassLoaderCollector.lastElement();
          paramContext = TPShellApplication.getOptimizedDirectory(paramContext);
          File localFile = new File(paramContext);
          if (localFile.exists() != true) {
            localFile.mkdirs();
          }
          if (localFile.canWrite() != true) {}
          paramString1 = new DexClassLoader(paramString1, paramContext, paramString2, localClassLoader);
          paramContext = paramString1;
          if (paramBoolean)
          {
            paramContext = paramString1;
            if (TPShellApplication.needreload() == 1) {
              paramContext = null;
            }
          }
          paramString1 = paramContext;
          if (paramContext == null) {
            break;
          }
          sClassLoaderCollector.add(paramContext);
          paramString1 = paramContext;
          break;
        }
      }
      finally {}
      ClassLoader localClassLoader = sAppClassLoader;
    }
  }
  
  public static void setFieldObject(String paramString1, Object paramObject1, String paramString2, Object paramObject2)
    throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IllegalArgumentException
  {
    paramString1 = Class.forName(paramString1).getDeclaredField(paramString2);
    paramString1.setAccessible(true);
    paramString1.set(paramObject1, paramObject2);
  }
}
