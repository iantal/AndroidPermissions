package com.tencent.tpshell;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class ExceptionHandler
{
  private File mBreakpadDir;
  private File mBuglyDir;
  private String mDeviceID;
  private boolean mExceptionInfo;
  private String mHost;
  private String mURL;
  
  static
  {
    System.loadLibrary("tprt");
  }
  
  public ExceptionHandler(File paramFile1, File paramFile2, String paramString)
  {
    if ((paramFile1 == null) || (paramFile2 == null)) {
      throw new NullPointerException();
    }
    this.mBreakpadDir = paramFile1;
    this.mBuglyDir = paramFile2;
    this.mDeviceID = paramString;
    initExceptionInfo();
    nativeInit(this.mBreakpadDir.getAbsolutePath(), this.mBuglyDir.getAbsolutePath());
  }
  
  private void addFile2Zip(File paramFile, String paramString, ZipOutputStream paramZipOutputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte['Ð€'];
    paramZipOutputStream.putNextEntry(new ZipEntry(paramString));
    paramFile = new FileInputStream(paramFile);
    for (;;)
    {
      int i = paramFile.read(arrayOfByte);
      if (i <= 0) {
        break;
      }
      paramZipOutputStream.write(arrayOfByte, 0, i);
    }
    paramFile.close();
    paramZipOutputStream.closeEntry();
  }
  
  private static void deleteFolder(File paramFile)
  {
    File[] arrayOfFile = paramFile.listFiles();
    if (arrayOfFile != null)
    {
      int j = arrayOfFile.length;
      int i = 0;
      if (i < j)
      {
        File localFile = arrayOfFile[i];
        if (localFile.isDirectory()) {
          deleteFolder(localFile);
        }
        for (;;)
        {
          i += 1;
          break;
          localFile.delete();
        }
      }
    }
    paramFile.delete();
  }
  
  private static void emptyFolder(File paramFile)
  {
    paramFile = paramFile.listFiles();
    if (paramFile != null)
    {
      int j = paramFile.length;
      int i = 0;
      if (i < j)
      {
        File localFile = paramFile[i];
        if (localFile.isDirectory()) {
          deleteFolder(localFile);
        }
        for (;;)
        {
          i += 1;
          break;
          localFile.delete();
        }
      }
    }
  }
  
  private void initExceptionInfo()
  {
    int i = 0;
    this.mExceptionInfo = false;
    if (this.mBreakpadDir.exists())
    {
      File[] arrayOfFile = this.mBreakpadDir.listFiles();
      int j = arrayOfFile.length;
      if (i < j)
      {
        File localFile = arrayOfFile[i];
        if (localFile.isFile() != true) {}
        while (!localFile.getName().endsWith(".dmp"))
        {
          i += 1;
          break;
        }
        this.mExceptionInfo = true;
      }
    }
  }
  
  private native void nativeInit(String paramString1, String paramString2);
  
  private native boolean nativeReportException(String paramString1, String paramString2);
  
  private boolean needBlockReport()
  {
    File[] arrayOfFile = this.mBreakpadDir.listFiles();
    int j = arrayOfFile.length;
    int i = 0;
    if (i < j)
    {
      File localFile = arrayOfFile[i];
      if (localFile.isFile() != true) {}
      while (!localFile.getName().endsWith(".dmp"))
      {
        i += 1;
        break;
      }
      return true;
    }
    return false;
  }
  
  private void packBreakpadInfo(ZipOutputStream paramZipOutputStream)
    throws IOException
  {
    if (this.mBreakpadDir.exists() != true) {
      return;
    }
    File[] arrayOfFile = this.mBreakpadDir.listFiles();
    int j = arrayOfFile.length;
    int i = 0;
    label27:
    File localFile;
    if (i < j)
    {
      localFile = arrayOfFile[i];
      if (localFile.isFile() == true) {
        break label54;
      }
    }
    for (;;)
    {
      i += 1;
      break label27;
      break;
      label54:
      if (localFile.getName().endsWith(".dmp")) {
        addFile2Zip(localFile, this.mDeviceID + '.' + DeviceInfo.getDeviceModel() + '.' + localFile.getName(), paramZipOutputStream);
      }
    }
  }
  
  private void packBuglyInfo(ZipOutputStream paramZipOutputStream)
    throws IOException
  {
    if (this.mBuglyDir.exists() != true) {
      return;
    }
    File[] arrayOfFile = this.mBuglyDir.listFiles();
    int j = arrayOfFile.length;
    int i = 0;
    label27:
    File localFile;
    if (i < j)
    {
      localFile = arrayOfFile[i];
      if (localFile.isFile() == true) {
        break label54;
      }
    }
    for (;;)
    {
      i += 1;
      break label27;
      break;
      label54:
      addFile2Zip(localFile, localFile.getName(), paramZipOutputStream);
    }
  }
  
  private void packCrashInfo2Zip(File paramFile)
    throws IOException
  {
    paramFile = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(paramFile)));
    packBreakpadInfo(paramFile);
    paramFile.close();
  }
  
  public boolean hasExcptionInfo()
  {
    return this.mExceptionInfo;
  }
  
  public void reportException(String paramString)
  {
    if (paramString == null) {
      throw new NullPointerException();
    }
    if (hasExcptionInfo() != true) {
      return;
    }
    this.mURL = paramString;
    paramString = new ReportRunnable(null);
    if (needBlockReport())
    {
      paramString.run();
      return;
    }
    new Thread(paramString).start();
  }
  
  private class ReportRunnable
    implements Runnable
  {
    private ReportRunnable() {}
    
    public void run()
    {
      String str = ExceptionHandler.this.mURL;
      File localFile = new File(ExceptionHandler.this.mBreakpadDir, "tp_upload.zip");
      if (localFile.exists()) {
        localFile.delete();
      }
      int i = 0;
      try
      {
        ExceptionHandler.this.packCrashInfo2Zip(localFile);
        if ((str == null) || (i != 0))
        {
          if (localFile.exists()) {
            localFile.delete();
          }
          return;
        }
      }
      catch (IOException localIOException)
      {
        do
        {
          for (;;)
          {
            localIOException.printStackTrace();
            i = 1;
          }
        } while (!ExceptionHandler.this.nativeReportException(str, localFile.getAbsolutePath()));
        ExceptionHandler.emptyFolder(ExceptionHandler.this.mBreakpadDir);
      }
    }
  }
}
