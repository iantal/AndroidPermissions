package com.tencent.tmassistantbase.util;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import com.tencent.tmassistantbase.kapalai.KapalaiAdapterUtil;
import com.tencent.tmassistantbase.kapalai.MobileIssueSettings;
import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class GlobalUtil
{
  protected static final String SharedPreferencesName = "TMAssistantSDKSharedPreference";
  protected static final String TAG = GlobalUtil.class.getSimpleName();
  protected static GlobalUtil mInstance = null;
  protected static int mMemUUID = 0;
  public final int JCE_CMDID_Empty = 0;
  public final int JCE_CMDID_GetAppSimpleDetail = 5;
  public final int JCE_CMDID_GetAppUpdate = 3;
  public final int JCE_CMDID_GetAuthorized = 4;
  public final int JCE_CMDID_GetSettings = 2;
  public final int JCE_CMDID_ReportLog = 1;
  protected Context mContext;
  public HashMap mJCECmdIdMap = null;
  public String mQUA = "";
  
  protected GlobalUtil()
  {
    this.mJCECmdIdMap.put(Integer.valueOf(1), "ReportLog");
    this.mJCECmdIdMap.put(Integer.valueOf(2), "GetSettings");
    this.mJCECmdIdMap.put(Integer.valueOf(3), "GetAppUpdate");
    this.mJCECmdIdMap.put(Integer.valueOf(4), "GetAuthorized");
    this.mJCECmdIdMap.put(Integer.valueOf(5), "GetAppSimpleDetail");
  }
  
  public static ArrayList String2List(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    if (!TextUtils.isEmpty(paramString))
    {
      paramString = paramString.split(",");
      int i = 0;
      while (i < paramString.length)
      {
        CharSequence localCharSequence = paramString[i];
        if (!TextUtils.isEmpty(localCharSequence)) {
          localArrayList.add(localCharSequence);
        }
        i += 1;
      }
    }
    return localArrayList;
  }
  
  public static int assistantErrorCode2SDKErrorCode(int paramInt)
  {
    switch (paramInt)
    {
    case -1000: 
    case -26: 
    case -24: 
    default: 
      return 604;
    case 0: 
      return 0;
    case -1: 
      return 709;
    case -11: 
      return 708;
    case -12: 
      return 730;
    case -13: 
      return 703;
    case -15: 
      return 1;
    case -16: 
      return 731;
    case -21: 
      return 700;
    case -22: 
      return 732;
    case -23: 
      return 601;
    case -25: 
      return 602;
    case -27: 
      return 606;
    }
    return 701;
  }
  
  public static int assistantState2SDKState(int paramInt)
  {
    switch (paramInt)
    {
    case 5: 
    case 7: 
    case 8: 
    default: 
      return 0;
    case 1: 
      return 2;
    case 6: 
      return 1;
    case 2: 
      return 3;
    case 4: 
      return 4;
    case 3: 
      return 5;
    }
    return 6;
  }
  
  public static String calcMD5AsString(String paramString)
  {
    int i = 0;
    Object localObject = "";
    if (!TextUtils.isEmpty(paramString)) {
      paramString = paramString.getBytes();
    }
    try
    {
      localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).reset();
      ((MessageDigest)localObject).update(paramString, 0, paramString.length);
      paramString = ((MessageDigest)localObject).digest();
      localObject = new StringBuffer();
      while (i < paramString.length)
      {
        ((StringBuffer)localObject).append(Integer.toHexString(paramString[i] & 0xFF));
        i += 1;
      }
      localObject = ((StringBuffer)localObject).toString();
      return localObject;
    }
    catch (NoSuchAlgorithmException paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static void deleteOldDB(String paramString)
  {
    if (getInstance().getContext() != null)
    {
      paramString = getInstance().getContext().getDatabasePath(paramString);
      if (paramString.exists() != true) {}
    }
    try
    {
      paramString.delete();
      TMLog.i("GlobalUtil", "deleteDB");
      return;
    }
    catch (Exception paramString)
    {
      TMLog.i("GlobalUtil", "deleteDB failed");
    }
  }
  
  public static String getAppPackageName(Context paramContext)
  {
    if (paramContext != null) {
      return paramContext.getPackageName();
    }
    return "";
  }
  
  public static int getAppVersionCode(Context paramContext)
  {
    int i = 0;
    PackageManager localPackageManager;
    if (paramContext != null) {
      localPackageManager = paramContext.getPackageManager();
    }
    try
    {
      i = localPackageManager.getPackageInfo(paramContext.getPackageName(), 0).versionCode;
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static GlobalUtil getInstance()
  {
    try
    {
      if (mInstance == null) {
        mInstance = new GlobalUtil();
      }
      GlobalUtil localGlobalUtil = mInstance;
      return localGlobalUtil;
    }
    finally {}
  }
  
  public static int getMemUUID()
  {
    try
    {
      int i = mMemUUID;
      mMemUUID = i + 1;
      return i;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  /* Error */
  public static String getNetStatus()
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: invokestatic 159	com/tencent/tmassistantbase/util/GlobalUtil:getInstance	()Lcom/tencent/tmassistantbase/util/GlobalUtil;
    //   6: invokevirtual 163	com/tencent/tmassistantbase/util/GlobalUtil:getContext	()Landroid/content/Context;
    //   9: astore_0
    //   10: aload_0
    //   11: ifnonnull +11 -> 22
    //   14: ldc 44
    //   16: astore_0
    //   17: ldc 2
    //   19: monitorexit
    //   20: aload_0
    //   21: areturn
    //   22: aload_0
    //   23: ldc -35
    //   25: invokevirtual 225	android/content/Context:checkCallingOrSelfPermission	(Ljava/lang/String;)I
    //   28: ifeq +16 -> 44
    //   31: ldc 44
    //   33: astore_0
    //   34: goto -17 -> 17
    //   37: astore_0
    //   38: ldc 44
    //   40: astore_0
    //   41: goto -24 -> 17
    //   44: aload_0
    //   45: ldc -29
    //   47: invokevirtual 231	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   50: checkcast 233	android/net/ConnectivityManager
    //   53: invokevirtual 237	android/net/ConnectivityManager:getActiveNetworkInfo	()Landroid/net/NetworkInfo;
    //   56: astore_0
    //   57: aload_0
    //   58: ifnonnull +9 -> 67
    //   61: ldc 44
    //   63: astore_0
    //   64: goto -47 -> 17
    //   67: aload_0
    //   68: invokevirtual 242	android/net/NetworkInfo:getType	()I
    //   71: iconst_1
    //   72: if_icmpne +9 -> 81
    //   75: ldc -12
    //   77: astore_0
    //   78: goto -61 -> 17
    //   81: aload_0
    //   82: invokevirtual 247	android/net/NetworkInfo:getExtraInfo	()Ljava/lang/String;
    //   85: astore_0
    //   86: aload_0
    //   87: ifnonnull +9 -> 96
    //   90: ldc 44
    //   92: astore_0
    //   93: goto -76 -> 17
    //   96: aload_0
    //   97: invokevirtual 250	java/lang/String:toLowerCase	()Ljava/lang/String;
    //   100: astore_0
    //   101: getstatic 34	com/tencent/tmassistantbase/util/GlobalUtil:TAG	Ljava/lang/String;
    //   104: new 252	java/lang/StringBuilder
    //   107: dup
    //   108: invokespecial 253	java/lang/StringBuilder:<init>	()V
    //   111: ldc -1
    //   113: invokevirtual 258	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   116: aload_0
    //   117: invokevirtual 258	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   120: invokevirtual 259	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   123: invokestatic 262	com/tencent/tmassistantbase/util/TMLog:v	(Ljava/lang/String;Ljava/lang/String;)V
    //   126: goto -109 -> 17
    //   129: astore_0
    //   130: ldc 2
    //   132: monitorexit
    //   133: aload_0
    //   134: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   9	25	0	localObject1	Object
    //   37	1	0	localException	Exception
    //   40	77	0	localObject2	Object
    //   129	5	0	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   22	31	37	java/lang/Exception
    //   3	10	129	finally
    //   22	31	129	finally
    //   44	57	129	finally
    //   67	75	129	finally
    //   81	86	129	finally
    //   96	126	129	finally
  }
  
  public static boolean isDBExist(String paramString)
  {
    return (getInstance().getContext() != null) && (getInstance().getContext().getDatabasePath(paramString).exists());
  }
  
  public static boolean isNetworkConncted()
  {
    Object localObject = getInstance().getContext();
    if (localObject == null)
    {
      TMLog.w(TAG, "GlobalUtil.getInstance().getContext() == null.");
      return false;
    }
    localObject = ((ConnectivityManager)((Context)localObject).getSystemService("connectivity")).getActiveNetworkInfo();
    if (localObject != null) {}
    for (boolean bool = ((NetworkInfo)localObject).isAvailable();; bool = false) {
      return bool;
    }
  }
  
  public static void updateFilePathAuthorized(String paramString)
  {
    Object localObject = new File(paramString);
    String str2 = ((File)localObject).getParent();
    String str1 = new File(str2).getParent();
    paramString = new File(str1).getParent();
    try
    {
      localObject = "chmod 777 " + ((File)localObject).getAbsolutePath();
      Runtime.getRuntime().exec((String)localObject);
      str2 = "chmod 777 " + str2;
      Runtime.getRuntime().exec(str2);
      str1 = "chmod 777 " + str1;
      Runtime.getRuntime().exec(str1);
      paramString = "chmod 777" + paramString;
      Runtime.getRuntime().exec(paramString);
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public boolean canReportValue()
  {
    return "wifi".equals(getNetStatus());
  }
  
  public void destroy()
  {
    this.mContext = null;
    mInstance = null;
  }
  
  public String getAndroidIdInPhone()
  {
    if (this.mContext == null) {
      return null;
    }
    return Settings.Secure.getString(getContext().getContentResolver(), "android_id");
  }
  
  public Context getContext()
  {
    return this.mContext;
  }
  
  public String getImei()
  {
    if (this.mContext == null) {
      return null;
    }
    try
    {
      Object localObject = new String[2];
      if (!MobileIssueSettings.isSupportDualSimIMEI) {}
      for (localObject = KapalaiAdapterUtil.getKAUInstance().getDualSimIMEIInfoMethod(this.mContext); (localObject != null) && (localObject.length > 0); localObject = KapalaiAdapterUtil.getKAUInstance().getDualSimIMEIInfoNormalMethod(this.mContext)) {
        return localObject[0];
      }
      localObject = ((TelephonyManager)getContext().getSystemService("phone")).getDeviceId();
      return localObject;
    }
    catch (Exception localException)
    {
      TMLog.e(TAG, "getImei Exception", localException);
    }
    return null;
  }
  
  public String getImsi()
  {
    if (this.mContext == null) {
      return null;
    }
    try
    {
      Object localObject = new String[2];
      if (!MobileIssueSettings.isSupportDualSimIMSI) {}
      for (localObject = KapalaiAdapterUtil.getKAUInstance().getDualSimIMSIInfoMethod(this.mContext); (localObject != null) && (localObject.length > 0); localObject = KapalaiAdapterUtil.getKAUInstance().getDualSimIMSIInfoNormalMethod(this.mContext)) {
        return localObject[0];
      }
      localObject = ((TelephonyManager)getContext().getSystemService("phone")).getSubscriberId();
      return localObject;
    }
    catch (Exception localException)
    {
      TMLog.e(TAG, "getImsi Exception", localException);
    }
    return null;
  }
  
  public int getJceCmdIdByClassName(String paramString)
  {
    if (paramString == null) {
      return 0;
    }
    if (this.mJCECmdIdMap != null)
    {
      Iterator localIterator = this.mJCECmdIdMap.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Object localObject = (Map.Entry)localIterator.next();
        if (localObject != null)
        {
          Integer localInteger = (Integer)((Map.Entry)localObject).getKey();
          localObject = (String)((Map.Entry)localObject).getValue();
          if ((localObject != null) && (((String)localObject).equals(paramString))) {
            return localInteger.intValue();
          }
        }
      }
    }
    return 0;
  }
  
  public String getMacAddress()
  {
    if (this.mContext == null) {
      return null;
    }
    try
    {
      WifiInfo localWifiInfo = ((WifiManager)getContext().getSystemService("wifi")).getConnectionInfo();
      if (localWifiInfo != null) {
        return localWifiInfo.getMacAddress();
      }
      return "";
    }
    catch (Exception localException) {}
    return "";
  }
  
  public String getNetworkOperator()
  {
    if (this.mContext == null) {
      return "";
    }
    return ((TelephonyManager)this.mContext.getSystemService("phone")).getNetworkOperator();
  }
  
  public int getNetworkType()
  {
    if (this.mContext == null) {
      return 0;
    }
    return ((TelephonyManager)this.mContext.getSystemService("phone")).getNetworkType();
  }
  
  public String getPhoneGuid()
  {
    if (this.mContext == null) {
      return "";
    }
    SharedPreferences localSharedPreferences = this.mContext.getSharedPreferences("TMAssistantSDKSharedPreference", 0);
    if (localSharedPreferences != null) {
      return localSharedPreferences.getString("TMAssistantSDKPhoneGUID", "");
    }
    return "";
  }
  
  public int getQQDownloaderAPILevel()
  {
    if (this.mContext == null) {
      TMLog.i("SelfUpdateSDK", "context == null");
    }
    for (;;)
    {
      return 0;
      TMLog.i("SelfUpdateSDK", "getQQDownloaderAPILevel");
      try
      {
        ApplicationInfo localApplicationInfo = this.mContext.getPackageManager().getApplicationInfo("com.tencent.android.qqdownloader", 128);
        TMLog.i("SelfUpdateSDK", "appInfo:" + localApplicationInfo);
        if ((localApplicationInfo != null) && (localApplicationInfo.metaData != null))
        {
          int i = localApplicationInfo.metaData.getInt("com.tencent.android.qqdownloader.sdk.apilevel");
          TMLog.i("SelfUpdateSDK", "apiLevel:" + i);
          return i;
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
    return 0;
  }
  
  public int getQQDownloaderVersionCode()
  {
    if (this.mContext == null) {}
    for (;;)
    {
      return 0;
      Object localObject = this.mContext.getPackageManager();
      if (localObject != null) {
        try
        {
          localObject = ((PackageManager)localObject).getPackageInfo("com.tencent.android.qqdownloader", 0);
          if (localObject != null)
          {
            int i = ((PackageInfo)localObject).versionCode;
            return i;
          }
        }
        catch (PackageManager.NameNotFoundException localNameNotFoundException)
        {
          localNameNotFoundException.printStackTrace();
        }
      }
    }
    return 0;
  }
  
  public void setContext(Context paramContext)
  {
    this.mContext = paramContext;
    this.mQUA = new QUASetting(paramContext).buildQUA();
    TMLog.initTMLog(paramContext);
  }
  
  public void setNetTypeValue(byte paramByte) {}
  
  public void setPhoneGuid(String paramString)
  {
    if (this.mContext == null) {}
    SharedPreferences localSharedPreferences;
    do
    {
      do
      {
        return;
      } while (paramString == null);
      localSharedPreferences = this.mContext.getSharedPreferences("TMAssistantSDKSharedPreference", 0);
    } while (localSharedPreferences == null);
    localSharedPreferences.edit().putString("TMAssistantSDKPhoneGUID", paramString).commit();
  }
}
