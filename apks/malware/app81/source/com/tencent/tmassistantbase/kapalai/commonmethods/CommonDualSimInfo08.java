package com.tencent.tmassistantbase.kapalai.commonmethods;

import android.content.Context;
import android.telephony.TelephonyManager;
import com.tencent.tmassistantbase.kapalai.ReflecterHelper;

public class CommonDualSimInfo08
  implements IDualSimInfo
{
  public static final int CLASS_NUMBER = 8;
  private TelephonyManager[] simTelephonyManager = null;
  
  public CommonDualSimInfo08() {}
  
  public String getKapalaiDualSimIMEI(int paramInt, Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)getKapalaiSimTelephonyManager(paramInt, paramContext);
      if (paramContext != null)
      {
        paramContext = paramContext.getDeviceId();
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      return null;
    }
    return null;
  }
  
  public String getKapalaiDualSimIMSI(int paramInt, Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)getKapalaiSimTelephonyManager(paramInt, paramContext);
      if (paramContext != null)
      {
        paramContext = paramContext.getSubscriberId();
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      return null;
    }
    return null;
  }
  
  public Object getKapalaiSimTelephonyManager(int paramInt, Context paramContext)
  {
    if (this.simTelephonyManager == null) {}
    try
    {
      this.simTelephonyManager = new TelephonyManager[2];
      this.simTelephonyManager[0] = ((TelephonyManager)ReflecterHelper.invokeStaticMethod("android.telephony.TelephonyManager", "getDefault"));
      this.simTelephonyManager[1] = ((TelephonyManager)ReflecterHelper.invokeStaticMethod("android.telephony.TelephonyManager", "getSecondary"));
      if ((this.simTelephonyManager != null) && (this.simTelephonyManager.length > paramInt))
      {
        paramContext = this.simTelephonyManager;
        if (paramInt <= 0) {}
        for (paramInt = 0;; paramInt = 1) {
          return paramContext[paramInt];
        }
      }
      return null;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
  }
}
