package com.tencent.mid.b;

import android.content.Context;
import com.tencent.mid.api.MidEntity;
import com.tencent.mid.util.Util;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class g
{
  private static g b = null;
  private Map<Integer, f> a = null;
  
  private g(Context paramContext)
  {
    this.a.put(Integer.valueOf(1), new e(paramContext));
    this.a.put(Integer.valueOf(2), new c(paramContext));
    this.a.put(Integer.valueOf(4), new d(paramContext));
  }
  
  public static g a(Context paramContext)
  {
    try
    {
      if (b == null) {
        b = new g(paramContext);
      }
      paramContext = b;
      return paramContext;
    }
    finally {}
  }
  
  public MidEntity a()
  {
    return a(new ArrayList(Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(4) })));
  }
  
  public MidEntity a(List<Integer> paramList)
  {
    if ((paramList == null) || (paramList.size() == 0)) {
      return null;
    }
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      Object localObject = (Integer)paramList.next();
      localObject = (f)this.a.get(localObject);
      if (localObject != null)
      {
        localObject = ((f)localObject).h();
        if ((localObject != null) && (((MidEntity)localObject).isMidValid())) {
          return localObject;
        }
      }
    }
    return null;
  }
  
  public void a(int paramInt1, int paramInt2)
  {
    a localA = b();
    if (paramInt1 > 0) {
      localA.c(paramInt1);
    }
    if (paramInt2 > 0) {
      localA.a(paramInt2);
    }
    localA.a(System.currentTimeMillis());
    localA.b(0);
    a(localA);
  }
  
  public void a(MidEntity paramMidEntity)
  {
    Iterator localIterator = this.a.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((f)((Map.Entry)localIterator.next()).getValue()).a(paramMidEntity);
    }
  }
  
  public void a(a paramA)
  {
    Iterator localIterator = this.a.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((f)((Map.Entry)localIterator.next()).getValue()).b(paramA);
    }
  }
  
  public a b()
  {
    return b(new ArrayList(Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(4) })));
  }
  
  public a b(List<Integer> paramList)
  {
    if ((paramList == null) || (paramList.size() == 0)) {
      return null;
    }
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      Object localObject = (Integer)paramList.next();
      localObject = (f)this.a.get(localObject);
      if (localObject != null)
      {
        localObject = ((f)localObject).j();
        if (localObject != null) {
          return localObject;
        }
      }
    }
    return null;
  }
  
  public void c()
  {
    Util.logInfo("clear mid cache");
    Iterator localIterator = this.a.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((f)((Map.Entry)localIterator.next()).getValue()).i();
    }
  }
}
