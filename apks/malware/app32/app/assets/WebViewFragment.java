package com.videoclient.player.fragment;

import java.lang.reflect.Field;
import java.util.List;

import org.gaogol.qlsp.R;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.DownloadManager;
import android.app.DownloadManager.Request;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.DownloadListener;
import android.webkit.JavascriptInterface;
import android.webkit.MimeTypeMap;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

import com.videoclient.player.HomeActivity;
import com.videoclient.player.ShowActivity;
import com.videoclient.player.model.StringTool;
import com.videoclient.player.pay.PayInfo;

public class WebViewFragment extends Fragment{
	
	public static final String URL_ARG="view_url";
	
	private WebView wv;
	private WebSettings ws;
	
	private Toast t;
	
	private JsObject js;
	
	private String html="<!doctype html><html lang=\"en\"><head></head><body></br></br></br></br></br></br></br></br></br></br></br></br><A ><font color=\"#9999cc\"><center>网络连接不存在</center></font></A></body></html>";
	
	@SuppressWarnings("deprecation")
	@SuppressLint("SetJavaScriptEnabled")
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		t=initToast(getActivity());
		View view=inflater.inflate(R.layout.fragment_main,null,false);
		Bundle args=getArguments();
		wv=(WebView) view.findViewById(R.id.webView1);
		String url=args.getString(URL_ARG);
		js = new JsObject();
		wv.setBackgroundColor(0);
		wv.setDrawingCacheEnabled(true);
		wv.setDownloadListener(new DownloadListener() {
			
			@SuppressLint("NewApi")
			@Override
			public void onDownloadStart(String url, String userAgent,
					String contentDisposition, String mimetype, long contentLength) {
				// TODO Auto-generated method stub
				DownloadManager dm = (DownloadManager) getActivity().getSystemService(Context.DOWNLOAD_SERVICE);
				DownloadManager.Request dr = new Request(Uri.parse(url));
				dr.setTitle("下载任务");
				dr.setDescription("开始下载");
				dr.setMimeType(mimetype);
				
				MimeTypeMap mtm=MimeTypeMap.getSingleton();
				String exten=mtm.getExtensionFromMimeType(mimetype);
				dr.setDestinationInExternalPublicDir("down", StringTool.getUrlFileName(url)+"."+exten);
				
				
				dr.setNotificationVisibility(Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
				dm.enqueue(dr);
			}
		});
		ws = wv.getSettings();
		ws.setJavaScriptEnabled(true);
		ws.setJavaScriptCanOpenWindowsAutomatically(true);
		ws.setPluginState(WebSettings.PluginState.ON);
		wv.setWebChromeClient(new WebChromeClient(){
			@Override
			public void onShowCustomView(View view, CustomViewCallback callback) {
				// TODO Auto-generated method stub
				super.onShowCustomView(view, callback);
				
			}
			
			@Override
			public void onProgressChanged(WebView view, int newProgress) {
				// TODO Auto-generated method stub
				super.onProgressChanged(view, newProgress);
//				Toast.makeText(context, text, duration)
//				if(newProgress>80){
//					t.cancel();
//				}else{
//					t.setGravity(Gravity.CENTER, 0, 0);
//					t.show();
//				}
			}
		});
		wv.setWebViewClient(new WebViewClient() {
			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
				view.loadUrl(url);
				HomeActivity.isUrlLoadFail=false;
//				Zlog.syso("secondurl:"+url);
//				
//				if(url.equals(HomeActivity.home_url)||url.equals(HomeActivity.pic_url)||url.equals(HomeActivity.video_url)){
//					view.loadUrl(url);
//					return true;
//				}
//				
//				SharedPreferences sp=getActivity().getSharedPreferences(PayInfo.PAY_XML_FILE, Context.MODE_PRIVATE);
//				int n = sp.getInt(PayInfo.PAY_STATE_KEY, PayInfo.PAY_STATE_NOPAY);
//				Zlog.syso("js..object..onClick..State:" + n);
//				switch (n) {
//				case PayInfo.PAY_STATE_NOPAY:
//					Intent i = new Intent(getActivity(), LogoActivity.class);
//					i.putExtra(LogoActivity.LOAD_STYP_KEY,
//							LogoActivity.LOAD_STYP_NO);
//					getActivity().startActivity(i);
//					getActivity().finish();
//					break;
//				case PayInfo.PAY_STATE_SENDING:
//					long time = System.currentTimeMillis();
//					long oldtime = sp.getLong(PayInfo.PAY_LAST_ACTION_TIME_KEY, 0);
//					long d = time - oldtime;
//					Zlog.syso("timeD:" + d);
//					if (d > PayInfo.PAY_TIME_D) {
//						sp.edit()
//								.putInt(PayInfo.PAY_STATE_KEY,
//										PayInfo.PAY_STATE_NOPAY).commit();
//						break;
//					} else {
//						String info = getResources()
//								.getString(R.string.pay_sending);
//						Toast.makeText(getActivity(), info, Toast.LENGTH_SHORT)
//								.show();
//						break;
//					}
//				case PayInfo.PAY_STATE_PAY:
//					view.loadUrl(url);
//					break;
//
//				}
				return true;
			}
			@Override
			public void onReceivedError(WebView view, int errorCode,
					String description, String failingUrl) {
				// TODO Auto-generated method stub
				super.onReceivedError(view, errorCode, description, failingUrl);
//				view.loadUrl("file:///android_asset/error.html");
				view.loadDataWithBaseURL(null,html,"text/html","utf-8",null);
				HomeActivity.isUrlLoadFail=true;
			}
		});
		wv.addJavascriptInterface(js, "JsObject");
		if(savedInstanceState==null){
			wv.loadUrl(url);
		}else{
		}
		HomeActivity.curWv=wv;
		return view;
	}
	
	
	
	private Toast initToast(Context context) {
		// TODO Auto-generated method stub
		Toast t=new Toast(context);
		t.setView(LayoutInflater.from(context).inflate(R.layout.toast_layout, null, false));
		return t;
	}



	@Override
	public void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
//		wv.onPause();
	}
	
	
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}
	
	@Override
	public void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		wv.onResume();
	}
	
	@Override
	public void onDetach() {
		// TODO Auto-generated method stub
		super.onDetach();
		try {  
            Field childFragmentManager = Fragment.class.getDeclaredField("mChildFragmentManager");  
            childFragmentManager.setAccessible(true);  
            childFragmentManager.set(this, null);  
  
        } catch (NoSuchFieldException e) {  
            throw new RuntimeException(e);  
        } catch (IllegalAccessException e) {  
            throw new RuntimeException(e);  
        }  
      
	}
	
	public WebView getWv() {
		return wv;
	}



	class JsObject {

		@JavascriptInterface
		public void openLive(String url, String type) {
			SharedPreferences sp = getActivity().getSharedPreferences(
					PayInfo.PAY_XML_FILE, Context.MODE_PRIVATE);
			if (url == null)
				return;
			int n = getActivity().getSharedPreferences(PayInfo.PAY_XML_FILE,
					Context.MODE_PRIVATE).getInt(PayInfo.PAY_STATE_KEY,
					PayInfo.PAY_STATE_NOPAY);
			switch (n) {
			case PayInfo.PAY_STATE_NOPAY:
				// Intent i = new Intent(getActivity(), LogoActivity.class);
				// i.putExtra(LogoActivity.LOAD_STYP_KEY,
				// LogoActivity.LOAD_STYP_NO);
				// getActivity().startActivity(i);
				// getActivity().finish();
				HomeActivity ha = (HomeActivity) getActivity();
				ha.showPayDialog();
				break;
			case PayInfo.PAY_STATE_SENDING:
				long time = System.currentTimeMillis();
				long oldtime = sp.getLong(PayInfo.PAY_LAST_ACTION_TIME_KEY, 0);
				long d = time - oldtime;
				if (d > PayInfo.PAY_TIME_D) {
					sp.edit()
							.putInt(PayInfo.PAY_STATE_KEY,
									PayInfo.PAY_STATE_NOPAY).commit();
					break;
				} else {
					String info = getResources()
							.getString(R.string.pay_sending);
					Toast.makeText(getActivity(), info, Toast.LENGTH_SHORT)
							.show();
					break;
				}
			case PayInfo.PAY_STATE_PAY:
				Intent intent = new Intent(Intent.ACTION_VIEW);
				Uri data = Uri.parse(url);
//				MimeTypeMap map = MimeTypeMap.getSingleton();
				// String
				// type=map.getMimeTypeFromExtension(MimeTypeMap.getFileExtensionFromUrl(url));
				// String type="video/mp4";
				intent.setDataAndType(data, type);
				getActivity().startActivity(intent);
				break;

			}

		}

		@JavascriptInterface
		public void openMovie(String url) {

			SharedPreferences sp = getActivity().getSharedPreferences(
					PayInfo.PAY_XML_FILE, Context.MODE_PRIVATE);
			if (url == null)
				return;
			int n = getActivity().getSharedPreferences(PayInfo.PAY_XML_FILE,
					Context.MODE_PRIVATE).getInt(PayInfo.PAY_STATE_KEY,
					PayInfo.PAY_STATE_NOPAY);
			switch (n) {
			case PayInfo.PAY_STATE_NOPAY:
				// Intent i = new Intent(getActivity(), LogoActivity.class);
				// i.putExtra(LogoActivity.LOAD_STYP_KEY,
				// LogoActivity.LOAD_STYP_NO);
				// getActivity().startActivity(i);
				// getActivity().finish();
				HomeActivity ha = (HomeActivity) getActivity();
				ha.showPayDialog();
				break;
			case PayInfo.PAY_STATE_SENDING:
				long time = System.currentTimeMillis();
				long oldtime = sp.getLong(PayInfo.PAY_LAST_ACTION_TIME_KEY, 0);
				long d = time - oldtime;
				if (d > PayInfo.PAY_TIME_D) {
					sp.edit()
							.putInt(PayInfo.PAY_STATE_KEY,
									PayInfo.PAY_STATE_NOPAY).commit();
					break;
				} else {
					String info = getResources()
							.getString(R.string.pay_sending);
					Toast.makeText(getActivity(), info, Toast.LENGTH_SHORT)
							.show();
					break;
				}
			case PayInfo.PAY_STATE_PAY:
				Intent intent = new Intent(Intent.ACTION_VIEW);
				Uri data = Uri.parse(url);
//				MimeTypeMap map = MimeTypeMap.getSingleton();
				// String
				// type=map.getMimeTypeFromExtension(MimeTypeMap.getFileExtensionFromUrl(url));
				String type = "video/mp4";
				intent.setDataAndType(data, type);
				getActivity().startActivity(intent);
				break;

			}

		}

		@JavascriptInterface
		public void openVideo(String url, int w, int h) {
			SharedPreferences sp = getActivity().getSharedPreferences(
					PayInfo.PAY_XML_FILE, Context.MODE_PRIVATE);
			if (url == null)
				return;
			int n = getActivity().getSharedPreferences(PayInfo.PAY_XML_FILE,
					Context.MODE_PRIVATE).getInt(PayInfo.PAY_STATE_KEY,
					PayInfo.PAY_STATE_NOPAY);
			switch (n) {
			case PayInfo.PAY_STATE_NOPAY:
				// Intent i = new Intent(getActivity(), LogoActivity.class);
				// i.putExtra(LogoActivity.LOAD_STYP_KEY,
				// LogoActivity.LOAD_STYP_NO);
				// getActivity().startActivity(i);
				// getActivity().finish();
				HomeActivity ha = (HomeActivity) getActivity();
				ha.showPayDialog();
				break;
			case PayInfo.PAY_STATE_SENDING:
				long time = System.currentTimeMillis();
				long oldtime = sp.getLong(PayInfo.PAY_LAST_ACTION_TIME_KEY, 0);
				long d = time - oldtime;
				if (d > PayInfo.PAY_TIME_D) {
					sp.edit()
							.putInt(PayInfo.PAY_STATE_KEY,
									PayInfo.PAY_STATE_NOPAY).commit();
					break;
				} else {
					String info = getResources()
							.getString(R.string.pay_sending);
					Toast.makeText(getActivity(), info, Toast.LENGTH_SHORT)
							.show();
					break;
				}
			case PayInfo.PAY_STATE_PAY:
//				Intent intent = new Intent(getActivity(), ShowActivity.class);
//				intent.putExtra("Viewurl", url);
//				intent.putExtra("Vieww", w);
//				intent.putExtra("Viewh", h);
//				getActivity().startActivity(intent);
				break;

			}

		}

		@JavascriptInterface
		@SuppressLint("NewApi")
		public void downloadApk(String url, String filename, String des) {
			if (url == null)
				return;
			DownloadManager dm = (DownloadManager) getActivity()
					.getSystemService(Context.DOWNLOAD_SERVICE);
			DownloadManager.Request dr = new Request(Uri.parse(url));
			dr.setTitle("应用下载");
			dr.setDescription(des);
			dr.setMimeType("application/vnd.android.package-archive");
			dr.setDestinationInExternalPublicDir("down", filename);
			dr.setNotificationVisibility(Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
			dm.enqueue(dr);
		}

		public int getPayState() {
			return getActivity().getSharedPreferences(PayInfo.PAY_XML_FILE,
					Context.MODE_PRIVATE).getInt(PayInfo.PAY_STATE_KEY,
					PayInfo.PAY_STATE_NOPAY);
		}

		public void callNum(String num) {
			Intent intent = new Intent();
			intent.setAction(Intent.ACTION_DIAL);
			intent.setData(Uri.parse("tel:" + num));
			startActivity(intent);
		}

		public String getInstalledPacks() {
			JSONArray array = new JSONArray();
			PackageManager pm = getActivity().getPackageManager();
			List<PackageInfo> infos = pm
					.getInstalledPackages(PackageManager.GET_ACTIVITIES);
			try {
				for (PackageInfo p : infos) {
					JSONObject json = new JSONObject();
					ApplicationInfo info = p.applicationInfo;
					String appName = info.loadLabel(pm).toString();
					String packageName = info.packageName;
					// Zlog.syso("appName:"+appName+",pkg:"+packageName);
					json.put("name", appName);
					json.put("package", packageName);
					array.put(json);
				}
				return array.toString();
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return "";
		}

	}
}
