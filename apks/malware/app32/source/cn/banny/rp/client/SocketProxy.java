package cn.banny.rp.client;

import cn.banny.rp.RequestConnect;
import cn.banny.rp.ReverseProxy;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;

public class SocketProxy
  implements SocketSession
{
  private final ReverseProxyClient client;
  private final RequestConnect connect;
  private Throwable exception;
  private final Selector selector;
  SocketChannel session;
  private final int socket;
  
  public SocketProxy(int paramInt, RequestConnect paramRequestConnect, ReverseProxyClient paramReverseProxyClient, Selector paramSelector)
  {
    this.socket = paramInt;
    this.connect = paramRequestConnect;
    this.client = paramReverseProxyClient;
    this.selector = paramSelector;
  }
  
  /* Error */
  private void messageReceived(SocketChannel paramSocketChannel, Object paramObject)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aload_2
    //   4: checkcast 38	[B
    //   7: astore 5
    //   9: new 40	java/io/ByteArrayOutputStream
    //   12: dup
    //   13: invokespecial 41	java/io/ByteArrayOutputStream:<init>	()V
    //   16: astore_3
    //   17: new 43	java/io/DataOutputStream
    //   20: dup
    //   21: aload_3
    //   22: invokespecial 46	java/io/DataOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   25: astore_2
    //   26: aload_2
    //   27: iconst_4
    //   28: invokevirtual 50	java/io/DataOutputStream:writeByte	(I)V
    //   31: aload_2
    //   32: aload_0
    //   33: getfield 25	cn/banny/rp/client/SocketProxy:socket	I
    //   36: invokevirtual 53	java/io/DataOutputStream:writeInt	(I)V
    //   39: aload_2
    //   40: aload 5
    //   42: arraylength
    //   43: invokevirtual 53	java/io/DataOutputStream:writeInt	(I)V
    //   46: aload_2
    //   47: aload 5
    //   49: invokevirtual 57	java/io/DataOutputStream:write	([B)V
    //   52: aload_0
    //   53: getfield 29	cn/banny/rp/client/SocketProxy:client	Lcn/banny/rp/client/ReverseProxyClient;
    //   56: aload_3
    //   57: invokevirtual 61	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   60: invokevirtual 66	cn/banny/rp/client/ReverseProxyClient:sendResponse	([B)V
    //   63: aload_3
    //   64: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   67: aload_2
    //   68: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   71: return
    //   72: astore 5
    //   74: aconst_null
    //   75: astore_2
    //   76: aload 4
    //   78: astore_3
    //   79: aload 5
    //   81: astore 4
    //   83: aload_0
    //   84: aload_1
    //   85: aload 4
    //   87: invokevirtual 75	cn/banny/rp/client/SocketProxy:exceptionCaught	(Ljava/nio/channels/SocketChannel;Ljava/lang/Throwable;)V
    //   90: aload_0
    //   91: invokevirtual 78	cn/banny/rp/client/SocketProxy:close	()V
    //   94: aload_3
    //   95: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   98: aload_2
    //   99: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   102: return
    //   103: astore_1
    //   104: aconst_null
    //   105: astore_2
    //   106: aconst_null
    //   107: astore_3
    //   108: aload_3
    //   109: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   112: aload_2
    //   113: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   116: aload_1
    //   117: athrow
    //   118: astore_1
    //   119: aconst_null
    //   120: astore_2
    //   121: goto -13 -> 108
    //   124: astore_1
    //   125: goto -17 -> 108
    //   128: astore_1
    //   129: goto -21 -> 108
    //   132: astore 4
    //   134: aconst_null
    //   135: astore_2
    //   136: goto -53 -> 83
    //   139: astore 4
    //   141: goto -58 -> 83
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	144	0	this	SocketProxy
    //   0	144	1	paramSocketChannel	SocketChannel
    //   0	144	2	paramObject	Object
    //   16	93	3	localObject1	Object
    //   1	85	4	localObject2	Object
    //   132	1	4	localIOException1	IOException
    //   139	1	4	localIOException2	IOException
    //   7	41	5	arrayOfByte	byte[]
    //   72	8	5	localIOException3	IOException
    // Exception table:
    //   from	to	target	type
    //   9	17	72	java/io/IOException
    //   9	17	103	finally
    //   17	26	118	finally
    //   26	63	124	finally
    //   83	94	128	finally
    //   17	26	132	java/io/IOException
    //   26	63	139	java/io/IOException
  }
  
  private void sessionOpened(SocketChannel paramSocketChannel)
  {
    if (this.session == null) {
      this.session = paramSocketChannel;
    }
  }
  
  void close()
  {
    if (this.session == null) {
      return;
    }
    SelectionKey localSelectionKey = this.session.keyFor(this.selector);
    if (localSelectionKey != null) {
      localSelectionKey.cancel();
    }
    ReverseProxy.closeQuietly(this.session);
    this.session = null;
    try
    {
      this.client.notifySessionClosed(this.socket, this.exception);
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  void connect()
  {
    SelectionKey localSelectionKey2 = null;
    SelectionKey localSelectionKey1 = null;
    try
    {
      localSocketChannel = SocketChannel.open();
      localSelectionKey1 = localSelectionKey2;
      Socket localSocket;
      if (localSelectionKey1 == null) {
        break label176;
      }
    }
    catch (IOException localIOException1)
    {
      try
      {
        localSocketChannel.configureBlocking(false);
        localSelectionKey1 = localSelectionKey2;
        localSocket = localSocketChannel.socket();
        localSelectionKey1 = localSelectionKey2;
        localSocket.setKeepAlive(this.connect.isKeepAlive());
        localSelectionKey1 = localSelectionKey2;
        localSocket.setReceiveBufferSize(this.connect.getReceiveBufferSize());
        localSelectionKey1 = localSelectionKey2;
        localSocket.setSendBufferSize(this.connect.getSendBufferSize());
        localSelectionKey1 = localSelectionKey2;
        localSocket.setOOBInline(this.connect.isOobInline());
        localSelectionKey1 = localSelectionKey2;
        localSocket.setReuseAddress(this.connect.isReuseAddress());
        localSelectionKey1 = localSelectionKey2;
        localSocket.setTcpNoDelay(this.connect.isTcpNoDelay());
        localSelectionKey1 = localSelectionKey2;
        localSocket.setTrafficClass(this.connect.getTrafficClass());
        localSelectionKey1 = localSelectionKey2;
        localSelectionKey2 = localSocketChannel.register(this.selector, 8);
        localSelectionKey1 = localSelectionKey2;
        localSelectionKey2.attach(this);
        localSelectionKey1 = localSelectionKey2;
        localSocketChannel.connect(this.connect.createInetSocketAddress());
        localSelectionKey1 = localSelectionKey2;
        sessionOpened(localSocketChannel);
        return;
      }
      catch (IOException localIOException2)
      {
        SocketChannel localSocketChannel;
        for (;;) {}
      }
      localIOException1 = localIOException1;
      localSocketChannel = null;
    }
    localSelectionKey1.cancel();
    label176:
    ReverseProxy.closeQuietly(localSocketChannel);
    throw localIOException1;
  }
  
  public void exceptionCaught(SocketChannel paramSocketChannel, Throwable paramThrowable)
  {
    if (ReverseProxy.debug) {
      paramThrowable.printStackTrace();
    }
    this.exception = paramThrowable;
  }
  
  public int getSocket()
  {
    return this.socket;
  }
  
  /* Error */
  public void processConnect(SocketChannel paramSocketChannel)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: aload_1
    //   3: invokevirtual 194	java/nio/channels/SocketChannel:finishConnect	()Z
    //   6: pop
    //   7: aload_1
    //   8: aload_0
    //   9: getfield 31	cn/banny/rp/client/SocketProxy:selector	Ljava/nio/channels/Selector;
    //   12: iconst_1
    //   13: invokevirtual 169	java/nio/channels/SocketChannel:register	(Ljava/nio/channels/Selector;I)Ljava/nio/channels/SelectionKey;
    //   16: aload_0
    //   17: invokevirtual 173	java/nio/channels/SelectionKey:attach	(Ljava/lang/Object;)Ljava/lang/Object;
    //   20: pop
    //   21: aload_1
    //   22: invokevirtual 116	java/nio/channels/SocketChannel:socket	()Ljava/net/Socket;
    //   25: astore 4
    //   27: new 40	java/io/ByteArrayOutputStream
    //   30: dup
    //   31: invokespecial 41	java/io/ByteArrayOutputStream:<init>	()V
    //   34: astore_3
    //   35: new 43	java/io/DataOutputStream
    //   38: dup
    //   39: aload_3
    //   40: invokespecial 46	java/io/DataOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   43: astore_1
    //   44: aload_1
    //   45: iconst_1
    //   46: invokevirtual 50	java/io/DataOutputStream:writeByte	(I)V
    //   49: aload_1
    //   50: aload_0
    //   51: getfield 25	cn/banny/rp/client/SocketProxy:socket	I
    //   54: invokevirtual 53	java/io/DataOutputStream:writeInt	(I)V
    //   57: aload 4
    //   59: invokevirtual 198	java/net/Socket:getLocalAddress	()Ljava/net/InetAddress;
    //   62: invokevirtual 203	java/net/InetAddress:getAddress	()[B
    //   65: astore_2
    //   66: aload_1
    //   67: aload_2
    //   68: arraylength
    //   69: invokevirtual 50	java/io/DataOutputStream:writeByte	(I)V
    //   72: aload_1
    //   73: aload_2
    //   74: invokevirtual 57	java/io/DataOutputStream:write	([B)V
    //   77: aload_1
    //   78: aload 4
    //   80: invokevirtual 206	java/net/Socket:getLocalPort	()I
    //   83: invokevirtual 209	java/io/DataOutputStream:writeShort	(I)V
    //   86: aload_0
    //   87: getfield 29	cn/banny/rp/client/SocketProxy:client	Lcn/banny/rp/client/ReverseProxyClient;
    //   90: aload_3
    //   91: invokevirtual 61	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   94: invokevirtual 66	cn/banny/rp/client/ReverseProxyClient:sendResponse	([B)V
    //   97: aload_3
    //   98: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   101: aload_1
    //   102: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   105: return
    //   106: astore_3
    //   107: aconst_null
    //   108: astore_1
    //   109: getstatic 186	cn/banny/rp/ReverseProxy:debug	Z
    //   112: ifeq +7 -> 119
    //   115: aload_3
    //   116: invokevirtual 105	java/io/IOException:printStackTrace	()V
    //   119: aload_0
    //   120: getfield 29	cn/banny/rp/client/SocketProxy:client	Lcn/banny/rp/client/ReverseProxyClient;
    //   123: aload_0
    //   124: getfield 25	cn/banny/rp/client/SocketProxy:socket	I
    //   127: aload_3
    //   128: invokevirtual 212	cn/banny/rp/client/ReverseProxyClient:sendException	(ILjava/lang/Throwable;)V
    //   131: aload_2
    //   132: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   135: aload_1
    //   136: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   139: return
    //   140: astore_2
    //   141: aconst_null
    //   142: astore_1
    //   143: aconst_null
    //   144: astore_3
    //   145: aload_3
    //   146: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   149: aload_1
    //   150: invokestatic 71	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   153: aload_2
    //   154: athrow
    //   155: astore_2
    //   156: aconst_null
    //   157: astore_1
    //   158: goto -13 -> 145
    //   161: astore_2
    //   162: goto -17 -> 145
    //   165: astore 4
    //   167: aload_2
    //   168: astore_3
    //   169: aload 4
    //   171: astore_2
    //   172: goto -27 -> 145
    //   175: astore 4
    //   177: aconst_null
    //   178: astore_1
    //   179: aload_3
    //   180: astore_2
    //   181: aload 4
    //   183: astore_3
    //   184: goto -75 -> 109
    //   187: astore 4
    //   189: aload_3
    //   190: astore_2
    //   191: aload 4
    //   193: astore_3
    //   194: goto -85 -> 109
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	197	0	this	SocketProxy
    //   0	197	1	paramSocketChannel	SocketChannel
    //   1	131	2	arrayOfByte	byte[]
    //   140	14	2	localObject1	Object
    //   155	1	2	localObject2	Object
    //   161	7	2	localObject3	Object
    //   171	20	2	localObject4	Object
    //   34	64	3	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    //   106	22	3	localIOException1	IOException
    //   144	50	3	localObject5	Object
    //   25	54	4	localSocket	Socket
    //   165	5	4	localObject6	Object
    //   175	7	4	localIOException2	IOException
    //   187	5	4	localIOException3	IOException
    // Exception table:
    //   from	to	target	type
    //   2	35	106	java/io/IOException
    //   2	35	140	finally
    //   35	44	155	finally
    //   44	97	161	finally
    //   109	119	165	finally
    //   119	131	165	finally
    //   35	44	175	java/io/IOException
    //   44	97	187	java/io/IOException
  }
  
  public void pushData(SocketChannel paramSocketChannel, byte[] paramArrayOfByte)
  {
    boolean bool = ReverseProxy.debug;
    messageReceived(paramSocketChannel, paramArrayOfByte);
  }
  
  public void sessionClosed(SocketChannel paramSocketChannel)
  {
    if (this.session != paramSocketChannel) {
      return;
    }
    close();
  }
  
  void writeData(byte[] paramArrayOfByte)
  {
    try
    {
      if (this.session.write(ByteBuffer.wrap(paramArrayOfByte)) < 1) {
        throw new EOFException();
      }
    }
    catch (IOException paramArrayOfByte)
    {
      exceptionCaught(this.session, paramArrayOfByte);
      close();
    }
  }
}
