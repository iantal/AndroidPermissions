package cn.banny.rp;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.channels.Channel;
import java.nio.channels.Selector;
import java.util.Calendar;
import java.util.Date;

public class ReverseProxy
{
  public static boolean debug;
  
  public ReverseProxy() {}
  
  public static void closeQuietly(InputStream paramInputStream)
  {
    if (paramInputStream == null) {
      return;
    }
    try
    {
      paramInputStream.close();
      return;
    }
    catch (IOException paramInputStream) {}
  }
  
  public static void closeQuietly(OutputStream paramOutputStream)
  {
    if (paramOutputStream == null) {
      return;
    }
    try
    {
      paramOutputStream.close();
      return;
    }
    catch (IOException paramOutputStream) {}
  }
  
  public static void closeQuietly(Channel paramChannel)
  {
    if (paramChannel == null) {
      return;
    }
    try
    {
      paramChannel.close();
      return;
    }
    catch (IOException paramChannel) {}
  }
  
  public static void closeQuietly(Selector paramSelector)
  {
    if (paramSelector == null) {
      return;
    }
    try
    {
      paramSelector.close();
      return;
    }
    catch (IOException paramSelector) {}
  }
  
  public static void inspect(String paramString, byte[] paramArrayOfByte, int paramInt)
  {
    inspect(null, paramString, paramArrayOfByte, paramInt);
  }
  
  public static void inspect(Date paramDate, String paramString, byte[] paramArrayOfByte, int paramInt)
  {
    int k = 0;
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append("\n>-----------------------------------------------------------------------------<\n");
    Calendar localCalendar = Calendar.getInstance();
    if (paramDate != null) {
      localCalendar.setTime(paramDate);
    }
    localStringBuffer.append('[').append(localCalendar.get(11));
    localStringBuffer.append(':').append(localCalendar.get(12));
    localStringBuffer.append(':').append(localCalendar.get(13));
    localStringBuffer.append(' ').append(localCalendar.get(14)).append("]");
    localStringBuffer.append(paramString);
    localStringBuffer.append("\nsize: ");
    int i;
    int m;
    int j;
    if (paramArrayOfByte != null)
    {
      localStringBuffer.append(paramArrayOfByte.length);
      localStringBuffer.append('\n');
      if (paramArrayOfByte != null)
      {
        i = 0;
        if (i < paramArrayOfByte.length) {
          break label267;
        }
        m = paramInt - i % paramInt;
        j = k;
        label173:
        if ((j < m) && (m < paramInt)) {
          break label453;
        }
        k = i - i % paramInt;
        j = k;
        if (k < i)
        {
          localStringBuffer.append("   ");
          j = k;
        }
      }
    }
    for (;;)
    {
      if (j >= i)
      {
        if (m < paramInt) {
          localStringBuffer.append('\n');
        }
        localStringBuffer.append("^-----------------------------------------------------------------------------^");
        System.out.println(localStringBuffer);
        return;
        localStringBuffer.append("null");
        break;
        label267:
        if (i % paramInt == 0)
        {
          paramDate = Integer.toHexString(i % 65536).toUpperCase();
          m = paramDate.length();
          j = 0;
          label295:
          if (j >= 4 - m) {
            localStringBuffer.append(paramDate).append(": ");
          }
        }
        else
        {
          paramDate = Integer.toString(paramArrayOfByte[i] & 0xFF, 16).toUpperCase();
          if (paramDate.length() < 2) {
            localStringBuffer.append('0');
          }
          localStringBuffer.append(paramDate);
          localStringBuffer.append(' ');
          if ((i + 1) % paramInt == 0)
          {
            localStringBuffer.append("   ");
            j = i - 15;
          }
        }
        for (;;)
        {
          if (j >= i + 1)
          {
            localStringBuffer.append('\n');
            i += 1;
            break;
            localStringBuffer.append('0');
            j += 1;
            break label295;
          }
          localStringBuffer.append(toChar(paramArrayOfByte[j]));
          j += 1;
        }
        label453:
        localStringBuffer.append("  ");
        localStringBuffer.append(' ');
        j = (byte)(j + 1);
        break label173;
      }
      localStringBuffer.append(toChar(paramArrayOfByte[j]));
      j += 1;
    }
  }
  
  public static void inspect(byte[] paramArrayOfByte, String paramString)
  {
    inspect(paramString, paramArrayOfByte, 16);
  }
  
  public static boolean isEmpty(String paramString)
  {
    boolean bool2 = true;
    boolean bool1 = bool2;
    if (paramString != null)
    {
      bool1 = bool2;
      if (paramString.trim().length() >= 1) {
        bool1 = false;
      }
    }
    return bool1;
  }
  
  private static char toChar(byte paramByte)
  {
    if (paramByte == 32) {
      return ' ';
    }
    if ((paramByte > 126) || (paramByte < 33) || (paramByte == 32) || (paramByte == 10)) {
      return '.';
    }
    return (char)paramByte;
  }
}
