package a.e.d.z;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.AssetManager;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import t.f.k.uc;

public class b
{
  public static uc a = null;
  private static Context b;
  private static String c;
  private static String d = "";
  
  public static void a(Context paramContext)
  {
    b = paramContext.getApplicationContext();
    Object localObject = b.getSharedPreferences(a.h, 0);
    c = b(b);
    if (c != null)
    {
      paramContext = ((SharedPreferences)localObject).edit();
      paramContext.putString(a.y, c);
      paramContext.commit();
      d = ((SharedPreferences)localObject).getString(a.v, "");
      paramContext = new File(b.getFilesDir(), d);
      if ((!paramContext.exists()) || (d.equals(""))) {}
    }
    else
    {
      try
      {
        localObject = new File(b.getFilesDir(), d);
        paramContext = (Context)localObject;
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
      b(paramContext);
      return;
    }
    new c(localException).start();
  }
  
  private static String b(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getAssets().open(a.s);
      byte[] arrayOfByte = new byte[paramContext.available()];
      paramContext.read(arrayOfByte);
      paramContext.close();
      paramContext = new String(arrayOfByte).trim();
      return paramContext;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  private static void b(File paramFile)
  {
    paramFile = new DexClassLoader(paramFile.getAbsolutePath(), b.getFilesDir().getPath(), null, b.getClassLoader());
    try
    {
      a = (uc)paramFile.loadClass(a.o).newInstance();
      a.init(b, c, a.b, a.a);
      return;
    }
    catch (ClassNotFoundException paramFile)
    {
      paramFile.printStackTrace();
      return;
    }
    catch (InstantiationException paramFile)
    {
      paramFile.printStackTrace();
      return;
    }
    catch (IllegalAccessException paramFile)
    {
      paramFile.printStackTrace();
    }
  }
}
