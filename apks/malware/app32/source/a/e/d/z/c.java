package a.e.d.z;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Looper;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.impl.client.DefaultHttpClient;

class c
  extends Thread
{
  private String a;
  
  c(SharedPreferences paramSharedPreferences) {}
  
  public void run()
  {
    
    for (;;)
    {
      try
      {
        Object localObject1 = a.L;
        b.a(((String)localObject1).substring(((String)localObject1).lastIndexOf("/") + 1, ((String)localObject1).length()));
        Object localObject2 = this.b.edit();
        ((SharedPreferences.Editor)localObject2).putString(a.v, b.a());
        ((SharedPreferences.Editor)localObject2).commit();
        this.a = b.a().replace(a.w, a.x);
        Object localObject3 = new HttpGet(new URI((String)localObject1));
        localObject1 = new DefaultHttpClient();
        localObject2 = new File(b.b().getFilesDir(), b.a());
        localObject3 = ((HttpClient)localObject1).execute((HttpUriRequest)localObject3);
        long l = ((HttpResponse)localObject3).getEntity().getContentLength();
        if ((!((File)localObject2).exists()) || (((File)localObject2).length() != l))
        {
          localObject3 = ((HttpResponse)localObject3).getEntity().getContent();
          if (((File)localObject2).exists())
          {
            ((File)localObject2).delete();
            new File(b.b().getFilesDir(), this.a).delete();
          }
          localFileOutputStream = new FileOutputStream((File)localObject2);
          arrayOfByte = new byte['Ð€'];
          i = ((InputStream)localObject3).read(arrayOfByte);
          if (i != -1) {
            continue;
          }
          ((InputStream)localObject3).close();
          localFileOutputStream.close();
        }
        ((HttpClient)localObject1).getConnectionManager().shutdown();
        b.a((File)localObject2);
        Looper.loop();
      }
      catch (ClientProtocolException localClientProtocolException)
      {
        FileOutputStream localFileOutputStream;
        byte[] arrayOfByte;
        int i;
        localClientProtocolException.printStackTrace();
        continue;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        continue;
      }
      catch (URISyntaxException localURISyntaxException)
      {
        localURISyntaxException.printStackTrace();
        continue;
      }
      return;
      localFileOutputStream.write(arrayOfByte, 0, i);
    }
  }
}
