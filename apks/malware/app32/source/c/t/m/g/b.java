package c.t.m.g;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.location.LocationManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Pair;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.eclipse.jdt.annotation.NonNull;

public class b
{
  private static volatile b e;
  public final Context a;
  private final c.a b;
  private final ExecutorService c;
  private final HashMap d;
  private y f;
  
  @SuppressLint({"NewApi"})
  private b(Context paramContext)
  {
    this.a = paramContext;
    paramContext = new ThreadPoolExecutor(1, 5, 60000L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue(), new b.1());
    if (Build.VERSION.SDK_INT >= 9) {
      paramContext.allowCoreThreadTimeOut(true);
    }
    this.c = paramContext;
    this.d = new HashMap();
    this.d.put("cell", new f("cell"));
    this.b = new c.a(this);
    new Thread(new b.2(this)).start();
  }
  
  public static b a(Context paramContext)
  {
    if (e == null) {}
    try
    {
      if (e == null) {
        e = new b(paramContext);
      }
      return e;
    }
    finally {}
  }
  
  public static String b(Context paramContext)
  {
    Object localObject2 = paramContext.getPackageManager();
    str = paramContext.getPackageName();
    localObject1 = null;
    for (;;)
    {
      try
      {
        localObject2 = ((PackageManager)localObject2).getApplicationInfo(str, 128).metaData;
        paramContext = localObject1;
        if (localObject2 != null)
        {
          if (!((Bundle)localObject2).containsKey("TencentGeoLocationSDK")) {
            continue;
          }
          paramContext = ((Bundle)localObject2).getString("TencentGeoLocationSDK");
        }
      }
      catch (PackageManager.NameNotFoundException paramContext)
      {
        new StringBuilder("doInBg: ").append(str).append(" not found").toString();
        aj.b();
        paramContext = localObject1;
        continue;
      }
      if (TextUtils.isEmpty(paramContext)) {
        aj.b();
      }
      return paramContext;
      if (((Bundle)localObject2).containsKey("TencentMapSDK")) {
        paramContext = ((Bundle)localObject2).getString("TencentMapSDK");
      } else {
        paramContext = "";
      }
    }
  }
  
  public final TelephonyManager a()
  {
    return (TelephonyManager)this.a.getSystemService("phone");
  }
  
  @NonNull
  public final e a(String paramString)
  {
    paramString = (e)this.d.get(paramString);
    if (paramString != null) {
      return paramString;
    }
    return d.c;
  }
  
  public final String a(String paramString, byte[] paramArrayOfByte)
  {
    if (this.f == null)
    {
      Bundle localBundle = new Bundle();
      localBundle.putString("channelId", c.a.d(this.b.c()));
      new z.1();
      this.f = new q(this.a, localBundle.getString("channelId"));
    }
    paramString = this.f.a(paramString, paramArrayOfByte);
    paramArrayOfByte = c.a.b((byte[])paramString.first);
    if (paramArrayOfByte != null) {
      return new String(paramArrayOfByte, (String)paramString.second);
    }
    return "{}";
  }
  
  public final WifiManager b()
  {
    return (WifiManager)this.a.getSystemService("wifi");
  }
  
  public final LocationManager c()
  {
    return (LocationManager)this.a.getSystemService("location");
  }
  
  @NonNull
  public final c.a d()
  {
    return this.b;
  }
  
  public final ExecutorService e()
  {
    return this.c;
  }
  
  public final boolean f()
  {
    WifiManager localWifiManager = b();
    if (localWifiManager != null) {}
    for (int i = 1; (i != 0) && (localWifiManager.isWifiEnabled()); i = 0) {
      return true;
    }
    return false;
  }
  
  final void g()
  {
    for (;;)
    {
      try
      {
        aj.a();
        Object localObject1 = this.a;
        c.a localA = this.b;
        Object localObject2 = ((Context)localObject1).getPackageManager();
        String str2 = ((Context)localObject1).getPackageName();
        localA.a(b((Context)localObject1));
        try
        {
          localObject1 = ((PackageManager)localObject2).getPackageInfo(str2, 0);
          int i = ((PackageInfo)localObject1).versionCode;
          localObject1 = ((PackageInfo)localObject1).versionName;
          localObject2 = a();
          if (localObject2 != null)
          {
            localA.b = ((TelephonyManager)localObject2).getPhoneType();
            str2 = ((TelephonyManager)localObject2).getDeviceId();
            localObject1 = ((TelephonyManager)localObject2).getSubscriberId();
            localObject2 = ((TelephonyManager)localObject2).getLine1Number();
            str2 = ak.a(str2, ak.a);
            localObject1 = ak.a((String)localObject1, ak.b);
            localObject2 = ak.a((String)localObject2, ak.c);
            localA.c = str2;
            localA.d = ((String)localObject1);
            localA.e = ((String)localObject2);
          }
          localObject1 = b();
          if (localObject1 != null)
          {
            localObject1 = ((WifiManager)localObject1).getConnectionInfo();
            if (localObject1 != null)
            {
              localObject1 = ((WifiInfo)localObject1).getMacAddress();
              localA.f = ak.a(c.a.b((String)localObject1).replaceAll(":", "").toUpperCase(Locale.ENGLISH), ak.d);
            }
          }
          else
          {
            aj.a();
            return;
          }
        }
        catch (PackageManager.NameNotFoundException localNameNotFoundException)
        {
          PackageInfo localPackageInfo = new PackageInfo();
          continue;
        }
        String str1 = "";
      }
      catch (Throwable localThrowable)
      {
        aj.a("doInBg: app status init error", localThrowable);
        return;
      }
    }
  }
}
