package com.jshyproject.price.ztool;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Iterator;

public class ZProgressChanger
{
  private boolean a;
  private int b = 1024;
  private HashSet c = new HashSet();
  private InputStream d;
  private OutputStream e;
  private long f;
  
  public ZProgressChanger(ZProgressListener paramZProgressListener, InputStream paramInputStream, OutputStream paramOutputStream, long paramLong)
  {
    this.d = paramInputStream;
    this.e = paramOutputStream;
    this.f = paramLong;
    this.c.add(paramZProgressListener);
  }
  
  public ZProgressChanger(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    this(null, paramInputStream, paramOutputStream, 0L);
  }
  
  public void cancel()
  {
    this.a = true;
  }
  
  public void clear()
  {
    try
    {
      if (this.d != null) {
        this.d.close();
      }
      if (this.e != null) {
        this.e.close();
      }
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  public void clearLinsteners()
  {
    this.c.clear();
  }
  
  public InputStream getInputStream()
  {
    return this.d;
  }
  
  public int getMaxBufferLenght()
  {
    return this.b;
  }
  
  public long getMaxLenght()
  {
    return this.f;
  }
  
  public OutputStream getOutputStream()
  {
    return this.e;
  }
  
  public HashSet getZProgressLinsteners()
  {
    return this.c;
  }
  
  public boolean isCancel()
  {
    return this.a;
  }
  
  public void setCancel(boolean paramBoolean)
  {
    this.a = paramBoolean;
  }
  
  public void setInputStream(InputStream paramInputStream)
  {
    this.d = paramInputStream;
  }
  
  public void setMaxBufferLenght(int paramInt)
  {
    this.b = paramInt;
  }
  
  public void setMaxLenght(long paramLong)
  {
    this.f = paramLong;
  }
  
  public void setOutputStream(OutputStream paramOutputStream)
  {
    this.e = paramOutputStream;
  }
  
  public void setZProgressLinstener(ZProgressListener paramZProgressListener, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      this.c.clear();
      this.c.add(paramZProgressListener);
      return;
    }
    this.c.add(paramZProgressListener);
  }
  
  public boolean start()
  {
    return start(0L);
  }
  
  public boolean start(long paramLong)
  {
    if ((this.d == null) || (this.e == null)) {
      return false;
    }
    byte[] arrayOfByte = new byte[this.b];
    try
    {
      long l;
      do
      {
        do
        {
          do
          {
            do
            {
              int i = this.d.read(arrayOfByte);
              if (i == -1) {
                return true;
              }
              if (this.a) {
                return false;
              }
              this.e.write(arrayOfByte, 0, i);
              this.e.flush();
              l = paramLong + i;
              paramLong = l;
            } while (this.f == 0L);
            paramLong = l;
          } while (l > this.f);
          paramLong = l;
        } while (this.c == null);
        paramLong = l;
      } while (this.c.size() <= 0);
      Iterator localIterator = this.c.iterator();
      for (;;)
      {
        paramLong = l;
        if (!localIterator.hasNext()) {
          break;
        }
        ZProgressListener localZProgressListener = (ZProgressListener)localIterator.next();
        if (localZProgressListener != null) {
          localZProgressListener.onProgressChange(l, this.f);
        }
      }
      return false;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
}
