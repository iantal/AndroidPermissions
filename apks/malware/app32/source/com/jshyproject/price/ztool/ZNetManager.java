package com.jshyproject.price.ztool;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;

public class ZNetManager
{
  private static HttpClient a;
  
  public ZNetManager() {}
  
  public static byte[] getByteFromNet(String paramString, List paramList, int paramInt, ProgressChangeListener paramProgressChangeListener)
  {
    paramString = getEntityFromNet(paramString, paramList, paramInt);
    if (paramString == null) {
      return null;
    }
    if (paramProgressChangeListener != null) {
      paramInt = 1;
    }
    for (;;)
    {
      try
      {
        paramList = paramString.getContent();
        ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
        byte[] arrayOfByte = new byte['Ð€'];
        long l1 = 0L;
        long l3 = paramString.getContentLength();
        int i = paramList.read(arrayOfByte);
        if (i == -1) {
          return localByteArrayOutputStream.toByteArray();
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
        localByteArrayOutputStream.flush();
        long l2 = l1 + i;
        l1 = l2;
        if (paramInt != 0)
        {
          l1 = l2;
          if (l3 >= l2)
          {
            l1 = l2;
            if (l3 > 0L)
            {
              paramProgressChangeListener.onProgressChange(l2, l3);
              l1 = l2;
              continue;
              paramInt = 0;
            }
          }
        }
      }
      catch (IllegalStateException paramString)
      {
        paramString.printStackTrace();
        return null;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
        return null;
      }
    }
  }
  
  public static HttpEntity getEntityFromNet(String paramString, List paramList, int paramInt)
  {
    if (a == null)
    {
      BasicHttpParams localBasicHttpParams = new BasicHttpParams();
      HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
      HttpProtocolParams.setContentCharset(localBasicHttpParams, "ISO-8859-1");
      HttpProtocolParams.setUseExpectContinue(localBasicHttpParams, true);
      SchemeRegistry localSchemeRegistry = new SchemeRegistry();
      localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
      localSchemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
      a = new DefaultHttpClient(new ThreadSafeClientConnManager(localBasicHttpParams, localSchemeRegistry), localBasicHttpParams);
    }
    a.getParams().setParameter("http.connection.timeout", Integer.valueOf(20000));
    a.getParams().setParameter("http.socket.timeout", Integer.valueOf(20000));
    if (paramString == null) {
      return null;
    }
    switch (paramInt)
    {
    default: 
      return null;
    case 0: 
      if (paramList == null) {}
      for (paramString = new HttpGet(paramString);; paramString = new HttpGet(paramString + "?" + paramList))
      {
        try
        {
          paramString = a.execute(paramString).getEntity();
          return paramString;
        }
        catch (ClientProtocolException paramString)
        {
          paramString.printStackTrace();
          return null;
        }
        catch (IOException paramString)
        {
          paramString.printStackTrace();
          return null;
        }
        paramList = URLEncodedUtils.format(paramList, "UTF-8");
      }
    }
    if (paramList == null)
    {
      paramString = new HttpGet(paramString);
      try
      {
        paramString = a.execute(paramString).getEntity();
        return paramString;
      }
      catch (ClientProtocolException paramString)
      {
        paramString.printStackTrace();
        return null;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
        return null;
      }
    }
    paramString = new HttpPost(paramString);
    try
    {
      paramString.setEntity(new UrlEncodedFormEntity(paramList, "UTF-8"));
      paramString = a.execute(paramString).getEntity();
      return paramString;
    }
    catch (UnsupportedEncodingException paramString)
    {
      paramString.printStackTrace();
      return null;
    }
    catch (ClientProtocolException paramString)
    {
      paramString.printStackTrace();
      return null;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static HttpClient getHttpClient()
  {
    return a;
  }
}
