package com.todddavies.components.progressbar;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.RectF;
import android.graphics.Shader;
import android.os.Handler;
import android.util.AttributeSet;
import android.view.View;

public class ProgressWheel
  extends View
{
  private RectF A = new RectF();
  private RectF B = new RectF();
  private RectF C = new RectF();
  private int D = 2;
  private int E = 0;
  private Handler F = new a(this);
  private String G = "";
  private String[] H = new String[0];
  int a = 0;
  boolean b = false;
  private int c = 0;
  private int d = 0;
  private int e = 100;
  private int f = 80;
  private int g = 60;
  private int h = 20;
  private int i = 20;
  private int j = 20;
  private float k = 0.0F;
  private int l = 5;
  private int m = 5;
  private int n = 5;
  private int o = 5;
  private int p = -1442840576;
  private int q = -1442840576;
  private int r = 0;
  private int s = -1428300323;
  private int t = -16777216;
  private Paint u = new Paint();
  private Paint v = new Paint();
  private Paint w = new Paint();
  private Paint x = new Paint();
  private Paint y = new Paint();
  private RectF z = new RectF();
  
  public ProgressWheel(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    a(paramContext.obtainStyledAttributes(paramAttributeSet, c.ProgressWheel));
  }
  
  private void a()
  {
    this.u.setColor(this.p);
    this.u.setAntiAlias(true);
    this.u.setStyle(Paint.Style.STROKE);
    this.u.setStrokeWidth(this.h);
    this.w.setColor(this.s);
    this.w.setAntiAlias(true);
    this.w.setStyle(Paint.Style.STROKE);
    this.w.setStrokeWidth(this.i);
    this.v.setColor(this.r);
    this.v.setAntiAlias(true);
    this.v.setStyle(Paint.Style.FILL);
    this.x.setColor(this.t);
    this.x.setStyle(Paint.Style.FILL);
    this.x.setAntiAlias(true);
    this.x.setTextSize(this.j);
    this.y.setColor(this.q);
    this.y.setAntiAlias(true);
    this.y.setStyle(Paint.Style.STROKE);
    this.y.setStrokeWidth(this.k);
  }
  
  private void a(TypedArray paramTypedArray)
  {
    this.h = ((int)paramTypedArray.getDimension(10, this.h));
    this.i = ((int)paramTypedArray.getDimension(5, this.i));
    this.D = ((int)paramTypedArray.getDimension(6, this.D));
    this.E = paramTypedArray.getInteger(7, this.E);
    if (this.E < 0) {
      this.E = 0;
    }
    this.p = paramTypedArray.getColor(3, this.p);
    this.g = ((int)paramTypedArray.getDimension(11, this.g));
    this.j = ((int)paramTypedArray.getDimension(2, this.j));
    this.t = paramTypedArray.getColor(1, this.t);
    if (paramTypedArray.hasValue(0)) {
      setText(paramTypedArray.getString(0));
    }
    this.s = paramTypedArray.getColor(4, this.s);
    this.r = paramTypedArray.getColor(8, this.r);
    this.q = paramTypedArray.getColor(12, this.q);
    this.k = paramTypedArray.getDimension(13, this.k);
    paramTypedArray.recycle();
  }
  
  private void b()
  {
    int i2 = Math.min(this.d, this.c);
    int i1 = this.d - i2;
    i2 = this.c - i2;
    this.l = (getPaddingTop() + i2 / 2);
    int i3 = getPaddingBottom();
    this.m = (i2 / 2 + i3);
    this.n = (getPaddingLeft() + i1 / 2);
    this.o = (getPaddingRight() + i1 / 2);
    i1 = getWidth();
    i2 = getHeight();
    this.z = new RectF(this.n, this.l, i1 - this.o, i2 - this.m);
    this.A = new RectF(this.n + this.h, this.l + this.h, i1 - this.o - this.h, i2 - this.m - this.h);
    this.C = new RectF(this.A.left + this.i / 2.0F + this.k / 2.0F, this.A.top + this.i / 2.0F + this.k / 2.0F, this.A.right - this.i / 2.0F - this.k / 2.0F, this.A.bottom - this.i / 2.0F - this.k / 2.0F);
    this.B = new RectF(this.A.left - this.i / 2.0F - this.k / 2.0F, this.A.top - this.i / 2.0F - this.k / 2.0F, this.A.right + this.i / 2.0F + this.k / 2.0F, this.A.bottom + this.i / 2.0F + this.k / 2.0F);
    this.e = ((i1 - this.o - this.h) / 2);
    this.f = (this.e - this.h + 1);
  }
  
  public int getBarColor()
  {
    return this.p;
  }
  
  public int getBarLength()
  {
    return this.g;
  }
  
  public int getBarWidth()
  {
    return this.h;
  }
  
  public int getCircleColor()
  {
    return this.r;
  }
  
  public int getCircleRadius()
  {
    return this.f;
  }
  
  public int getDelayMillis()
  {
    return this.E;
  }
  
  public int getPaddingBottom()
  {
    return this.m;
  }
  
  public int getPaddingLeft()
  {
    return this.n;
  }
  
  public int getPaddingRight()
  {
    return this.o;
  }
  
  public int getPaddingTop()
  {
    return this.l;
  }
  
  public int getRimColor()
  {
    return this.s;
  }
  
  public Shader getRimShader()
  {
    return this.w.getShader();
  }
  
  public int getRimWidth()
  {
    return this.i;
  }
  
  public int getSpinSpeed()
  {
    return this.D;
  }
  
  public int getTextColor()
  {
    return this.t;
  }
  
  public int getTextSize()
  {
    return this.j;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    int i1 = 0;
    super.onDraw(paramCanvas);
    paramCanvas.drawArc(this.A, 360.0F, 360.0F, false, this.v);
    paramCanvas.drawArc(this.A, 360.0F, 360.0F, false, this.w);
    paramCanvas.drawArc(this.B, 360.0F, 360.0F, false, this.y);
    paramCanvas.drawArc(this.C, 360.0F, 360.0F, false, this.y);
    float f1;
    float f2;
    String[] arrayOfString;
    int i2;
    if (this.b)
    {
      paramCanvas.drawArc(this.A, this.a - 90, this.g, false, this.u);
      f1 = (this.x.descent() - this.x.ascent()) / 2.0F;
      f2 = this.x.descent();
      arrayOfString = this.H;
      i2 = arrayOfString.length;
    }
    for (;;)
    {
      if (i1 >= i2)
      {
        return;
        paramCanvas.drawArc(this.A, -90.0F, this.a, false, this.u);
        break;
      }
      String str = arrayOfString[i1];
      float f3 = this.x.measureText(str) / 2.0F;
      paramCanvas.drawText(str, getWidth() / 2 - f3, getHeight() / 2 + (f1 - f2), this.x);
      i1 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    paramInt1 = getMeasuredWidth();
    paramInt2 = getMeasuredHeight();
    paramInt1 = paramInt1 - getPaddingLeft() - getPaddingRight();
    paramInt2 = paramInt2 - getPaddingTop() - getPaddingBottom();
    if (paramInt1 > paramInt2) {
      paramInt1 = paramInt2;
    }
    for (;;)
    {
      setMeasuredDimension(getPaddingLeft() + paramInt1 + getPaddingRight(), paramInt1 + getPaddingTop() + getPaddingBottom());
      return;
    }
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    this.d = paramInt1;
    this.c = paramInt2;
    b();
    a();
    invalidate();
  }
  
  public void setBarColor(int paramInt)
  {
    this.p = paramInt;
  }
  
  public void setBarLength(int paramInt)
  {
    this.g = paramInt;
  }
  
  public void setBarWidth(int paramInt)
  {
    this.h = paramInt;
  }
  
  public void setCircleColor(int paramInt)
  {
    this.r = paramInt;
  }
  
  public void setCircleRadius(int paramInt)
  {
    this.f = paramInt;
  }
  
  public void setDelayMillis(int paramInt)
  {
    this.E = paramInt;
  }
  
  public void setPaddingBottom(int paramInt)
  {
    this.m = paramInt;
  }
  
  public void setPaddingLeft(int paramInt)
  {
    this.n = paramInt;
  }
  
  public void setPaddingRight(int paramInt)
  {
    this.o = paramInt;
  }
  
  public void setPaddingTop(int paramInt)
  {
    this.l = paramInt;
  }
  
  public void setProgress(int paramInt)
  {
    this.b = false;
    this.a = paramInt;
    this.F.sendEmptyMessage(0);
  }
  
  public void setRimColor(int paramInt)
  {
    this.s = paramInt;
  }
  
  public void setRimShader(Shader paramShader)
  {
    this.w.setShader(paramShader);
  }
  
  public void setRimWidth(int paramInt)
  {
    this.i = paramInt;
  }
  
  public void setSpinSpeed(int paramInt)
  {
    this.D = paramInt;
  }
  
  public void setText(String paramString)
  {
    this.G = paramString;
    this.H = this.G.split("\n");
  }
  
  public void setTextColor(int paramInt)
  {
    this.t = paramInt;
  }
  
  public void setTextSize(int paramInt)
  {
    this.j = paramInt;
  }
}
