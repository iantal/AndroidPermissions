package com.mv.xing2;

import aa.ff.MyBroadcastMgr;
import android.content.ContentResolver;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import com.b.a.a.k;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

public class Util
{
  public static final int Iworld_CMCC = 1;
  public static final int Iworld_NoSIM = 2;
  public static final int Iworld_NotCMCC = 0;
  public static final int NET = 2;
  public static final Uri PREFERRED_APN_URI = Uri.parse("content://telephony/carriers/preferapn");
  private static String User_Agent = null;
  public static final int WAP = 1;
  public static final int WLAN = 0;
  private static WifiManager _wifiManager = null;
  public static final String clientcode = "SHXL2014-0001-20151019";
  public static int gen_imsi;
  private static HashMap mvInfo = null;
  private static WifiInfo wifiInfo;
  
  static
  {
    gen_imsi = 0;
  }
  
  public Util() {}
  
  public static int CheckPhoneNumber(String paramString)
  {
    if ((paramString != null) && (paramString.length() >= 5))
    {
      paramString = (String)paramString.subSequence(3, 5);
      if ((paramString.equals("00")) || (paramString.equals("02")) || (paramString.equals("07")) || (paramString.equals("08"))) {
        return 1;
      }
      return 0;
    }
    return 2;
  }
  
  public static void Log(String paramString)
  {
    com.zyypt.video.a.a(paramString);
  }
  
  public static boolean checkAPNState(Context paramContext, boolean paramBoolean)
  {
    String str = getNetworkInfo(paramContext);
    if (!paramBoolean) {}
    for (paramContext = "DISCONNECTED"; paramContext.equalsIgnoreCase(str); paramContext = "CONNECTED") {
      return true;
    }
    return false;
  }
  
  public static int checkAPNType(Context paramContext)
  {
    paramContext = getCurrentApn(paramContext);
    if ((paramContext != null) && (paramContext.length() > 0) && (paramContext.toLowerCase().contains("wap"))) {
      return 1;
    }
    return 2;
  }
  
  public static int checkNetWork(Context paramContext)
  {
    _wifiManager = (WifiManager)paramContext.getSystemService("wifi");
    wifiInfo = _wifiManager.getConnectionInfo();
    if ((_wifiManager.isWifiEnabled()) && (wifiInfo.getNetworkId() != -1) && (wifiInfo.getSSID() != null) && (isWifiConnected(paramContext))) {
      return 0;
    }
    return checkAPNType(paramContext);
  }
  
  public static boolean closeWifi(Context paramContext)
  {
    try
    {
      boolean bool = ((WifiManager)paramContext.getSystemService("wifi")).setWifiEnabled(false);
      return bool;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
  
  public static void downloadRtspInThread(String paramString, int paramInt)
  {
    new Util.3(paramString, paramInt).start();
  }
  
  public static void downloadm3u8(Context paramContext, String paramString)
  {
    com.b.a.a.a localA = new com.b.a.a.a();
    localA.a(15000);
    k localK = new k();
    localA.a(false);
    localA.a(paramString, localK, new Util.2(paramContext, paramString));
  }
  
  private static void downloadm3u8InThread(Context paramContext, String paramString1, String paramString2)
  {
    new Util.1(paramString2, paramString1, paramContext).start();
  }
  
  public static void downloadts(String paramString)
  {
    try
    {
      paramString = (HttpURLConnection)new URL(paramString).openConnection();
      paramString.setUseCaches(false);
      paramString.setInstanceFollowRedirects(true);
      paramString.setConnectTimeout(30000);
      paramString.setReadTimeout(30000);
      paramString.setDoInput(true);
      paramString.setDoOutput(false);
      paramString.setRequestMethod("GET");
      int i = paramString.getResponseCode();
      if (i == 200)
      {
        InputStream localInputStream = paramString.getInputStream();
        byte[] arrayOfByte = new byte['Ð€'];
        while (localInputStream.read(arrayOfByte, 0, arrayOfByte.length) != -1) {}
        localInputStream.close();
      }
      for (;;)
      {
        paramString.disconnect();
        return;
        Log("downloadts httpstatus:" + i);
      }
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  private static String genIMSI(Context paramContext)
  {
    Object localObject2 = javaGetDataFromSharedPref(paramContext, "tomorrow");
    Object localObject1;
    if (localObject2 != null)
    {
      localObject1 = localObject2;
      if (((String)localObject2).length() != 0) {}
    }
    else
    {
      localObject1 = new StringBuilder(16);
      ((StringBuilder)localObject1).append("4");
      ((StringBuilder)localObject1).append(Integer.toString(6002));
      localObject2 = new Random();
      int i = 0;
      while (i < 10)
      {
        ((StringBuilder)localObject1).append(((Random)localObject2).nextInt(10));
        i += 1;
      }
      localObject1 = ((StringBuilder)localObject1).toString();
      javaSetDataToSharedPref(paramContext, "tomorrow", (String)localObject1);
    }
    return localObject1;
  }
  
  public static int getAndroidSDKVersion()
  {
    return Integer.valueOf(Build.VERSION.SDK_INT).intValue();
  }
  
  public static String getClientCode(Context paramContext)
  {
    return "SHXL2014-0001-20151019";
  }
  
  public static String getClientVersion(Context paramContext)
  {
    return "2.3.1";
  }
  
  public static String getCurrentApn(Context paramContext)
  {
    Cursor localCursor = null;
    boolean bool;
    if (getAndroidSDKVersion() < 17)
    {
      localCursor = paramContext.getContentResolver().query(PREFERRED_APN_URI, null, null, null, null);
      if (localCursor == null) {
        break label169;
      }
      bool = localCursor.moveToFirst();
      paramContext = null;
      if (bool)
      {
        paramContext = localCursor.getString(localCursor.getColumnIndex("apn"));
        if ((paramContext == null) || (paramContext.length() <= 0)) {}
      }
      else
      {
        localCursor.close();
      }
    }
    for (;;)
    {
      return paramContext;
      bool = localCursor.moveToNext();
      break;
      NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getNetworkInfo(0);
      paramContext = localCursor;
      if (localNetworkInfo != null)
      {
        paramContext = localCursor;
        if (localNetworkInfo.getExtraInfo() != null)
        {
          if ((localNetworkInfo.getExtraInfo().equals("cmnet")) && (localNetworkInfo.isConnected())) {
            return "cmnet";
          }
          paramContext = localCursor;
          if (localNetworkInfo.getExtraInfo().equals("cmwap"))
          {
            paramContext = localCursor;
            if (localNetworkInfo.isConnected())
            {
              return "cmwap";
              label169:
              paramContext = null;
            }
          }
        }
      }
    }
  }
  
  public static String getIMEI(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      Object localObject = paramContext;
      if (paramContext == null) {
        localObject = "";
      }
      return localObject;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        paramContext = null;
      }
    }
  }
  
  public static String getIMSI(Context paramContext)
  {
    Object localObject1 = null;
    Object localObject2 = (TelephonyManager)paramContext.getSystemService("phone");
    if (((TelephonyManager)localObject2).getSimState() == 5) {
      localObject1 = ((TelephonyManager)localObject2).getSubscriberId();
    }
    if ((localObject1 != null) && (CheckPhoneNumber((String)localObject1) == 1)) {
      localObject2 = localObject1;
    }
    do
    {
      do
      {
        return localObject2;
        try
        {
          localObject2 = Class.forName("com.mediatek.telephony.TelephonyManagerEx");
          Object localObject3 = ((Class)localObject2).getDeclaredMethod("getDefault", new Class[0]).invoke(null, new Object[0]);
          localObject2 = (String)((Class)localObject2).getDeclaredMethod("getSubscriberId", new Class[] { Integer.TYPE }).invoke(localObject3, new Object[] { Integer.valueOf(1) });
          localObject1 = localObject2;
        }
        catch (Exception localException2)
        {
          for (;;) {}
        }
        if ((localObject1 != null) && (CheckPhoneNumber((String)localObject1) == 1)) {
          return localObject1;
        }
        try
        {
          localObject2 = (String)Class.forName("android.telephony.TelephonyManager2").getDeclaredMethod("getSubscriberId", new Class[0]).invoke(paramContext.getSystemService("phone2"), new Object[0]);
          localObject1 = localObject2;
        }
        catch (Exception localException1)
        {
          for (;;) {}
        }
        if (localObject1 == null) {
          break;
        }
        localObject2 = localObject1;
      } while (CheckPhoneNumber((String)localObject1) == 1);
      if ((localObject1 == null) || (((String)localObject1).trim().length() == 0)) {
        break;
      }
      localObject2 = localObject1;
    } while (!((String)localObject1).startsWith("00000"));
    gen_imsi = 1;
    return genIMSI(paramContext);
  }
  
  private static String getNetworkInfo(Context paramContext)
  {
    return ((ConnectivityManager)paramContext.getSystemService("connectivity")).getNetworkInfo(0).getState().toString();
  }
  
  public static String getSDKVersion(Context paramContext)
  {
    return Build.VERSION.SDK;
  }
  
  public static String getUserAgent()
  {
    if (User_Agent == null)
    {
      User_Agent = Build.MODEL;
      User_Agent = Pattern.compile("[^a-zA-Z0-9]").matcher(User_Agent).replaceAll("").trim();
      User_Agent = User_Agent.toLowerCase().replaceAll(" ", "_");
      User_Agent = User_Agent.replaceAll("/", "_");
      User_Agent = User_Agent + "_" + "android";
    }
    return User_Agent;
  }
  
  public static boolean isWifiConnected(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.isConnected()) && (paramContext.getType() == 1);
  }
  
  public static boolean javaAddSmsListen(Context paramContext, String paramString1, String paramString2, int paramInt)
  {
    MyBroadcastMgr.getInstance(paramContext).javaAddListenRecord(paramString1, paramString2, paramInt);
    return true;
  }
  
  public static void javaCloseOrderPage() {}
  
  public static String javaGetDataFromSharedPref(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences("TESTSDKJar", 0).getString(paramString, null);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String javaGetIMEI(Context paramContext)
  {
    return getIMEI(paramContext);
  }
  
  public static String javaGetIMSI(Context paramContext)
  {
    return getIMSI(paramContext);
  }
  
  public static int javaGetNetworkType(Context paramContext)
  {
    return checkNetWork(paramContext);
  }
  
  public static String javaGetUserAgent()
  {
    return getUserAgent();
  }
  
  public static void javaSetDataToSharedPref(Context paramContext, String paramString1, String paramString2)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences("TESTSDKJar", 0).edit();
      paramContext.putString(paramString1, paramString2);
      paramContext.commit();
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public static void javaShowOrderPage() {}
  
  public static byte[] javaUnGZip(byte[] paramArrayOfByte)
  {
    ByteArrayOutputStream localByteArrayOutputStream;
    try
    {
      paramArrayOfByte = new GZIPInputStream(new ByteArrayInputStream(paramArrayOfByte));
      localByteArrayOutputStream = new ByteArrayOutputStream();
      byte[] arrayOfByte = new byte['Ð€'];
      for (;;)
      {
        int i = paramArrayOfByte.read(arrayOfByte, 0, arrayOfByte.length);
        if (i == -1) {
          break;
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      paramArrayOfByte.close();
    }
    catch (IOException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
      return null;
    }
    localByteArrayOutputStream.close();
    paramArrayOfByte = localByteArrayOutputStream.toByteArray();
    return paramArrayOfByte;
  }
  
  public static void javaUpdateVedio(String paramString, int paramInt)
  {
    if (mvInfo == null) {
      mvInfo = new HashMap();
    }
    mvInfo.put(paramString, Integer.valueOf(paramInt));
    if (paramInt == 1) {
      com.zyypt.adplugin.a.a(26);
    }
  }
  
  public static boolean javaWaitSms(Context paramContext, String paramString1, String paramString2, int paramInt)
  {
    MyBroadcastMgr.getInstance(paramContext).javaWaitSms(paramString1, paramString2, paramInt);
    return true;
  }
  
  public static int javaWaitSmsResult(Context paramContext)
  {
    return MyBroadcastMgr.getInstance(paramContext).javaGetWaitResult();
  }
  
  public static int javaWaitVedioResult(String paramString)
  {
    if (mvInfo != null) {}
    for (paramString = (Integer)mvInfo.get(paramString); paramString != null; paramString = null) {
      return paramString.intValue();
    }
    return 0;
  }
  
  public static boolean openWifi(Context paramContext)
  {
    try
    {
      boolean bool = ((WifiManager)paramContext.getSystemService("wifi")).setWifiEnabled(true);
      return bool;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
  
  public static void sayHelloT(String paramString1, String paramString2)
  {
    MvSdkJar.sayHelloT(paramString1, paramString2);
  }
  
  public static boolean setAPNState(Context paramContext, boolean paramBoolean)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    try
    {
      Object localObject = Class.forName(ConnectivityManager.class.getName()).getDeclaredField("mService");
      ((Field)localObject).setAccessible(true);
      paramContext = ((Field)localObject).get(paramContext);
      localObject = Class.forName(paramContext.getClass().getName()).getDeclaredMethod("setMobileDataEnabled", new Class[] { Boolean.TYPE });
      ((Method)localObject).setAccessible(true);
      ((Method)localObject).invoke(paramContext, new Object[] { Boolean.valueOf(paramBoolean) });
      return true;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
}
