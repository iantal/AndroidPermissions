package com.mv.xing2;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.widget.Button;
import com.b.a.a.a;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import org.apache.http.entity.StringEntity;

public class MvSdkJar
{
  public static final String TAG = "TESTSDKJar";
  public static Button button;
  private static Handler handler_interface;
  public static Handler handler_internal;
  private static MessageHandler messageHandler;
  public static Context owner = null;
  
  static
  {
    button = null;
    handler_internal = new MvSdkJar.1();
    System.loadLibrary("minivenus");
  }
  
  public MvSdkJar() {}
  
  public static int DoSearchOrderList(Context paramContext, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler)
  {
    Util.Log("TESTSDKJarDoSearchOrderList");
    owner = paramContext;
    handler_interface = paramHandler;
    Util.Log("channelID =" + paramString1);
    Util.Log("packageName =" + paramString3);
    return nativeDoSearchOrderList(paramContext, paramInt, paramString1, paramString2, paramString3, paramString4, paramString5, handler_internal);
  }
  
  public static int MonitorNetworkStatus(Context paramContext, String paramString, Handler paramHandler)
  {
    owner = paramContext;
    handler_interface = paramHandler;
    nativeMonitorNetworkStatus(paramContext, paramString, handler_internal);
    return 0;
  }
  
  public static int MonitorNetworkStatus2(Context paramContext, String paramString, Handler paramHandler)
  {
    owner = paramContext;
    handler_interface = paramHandler;
    nativeMonitorNetworkStatus2(paramContext, paramString, handler_internal);
    return 0;
  }
  
  public static int callMethod(Context paramContext, int paramInt, Bundle paramBundle, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler)
  {
    owner = paramContext;
    handler_interface = paramHandler;
    return nativeCallMethod(paramContext, paramInt, paramBundle, paramString1, paramString2, paramString3, paramString4, paramString5, handler_internal);
  }
  
  public static int doAuth2(Context paramContext, String paramString1, int paramInt1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt2, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, int paramInt3, String paramString14, Handler paramHandler)
  {
    Util.Log("TESTSDKJardoAuth2");
    owner = paramContext;
    handler_interface = paramHandler;
    Util.Log("rootnodeID =" + paramString1);
    Util.Log("nodeID =" + paramString2);
    Util.Log("contentID =" + paramString3);
    Util.Log("playerType =" + paramInt2);
    Util.Log("rate =" + paramString6);
    Util.Log("channelID =" + paramString10);
    Util.Log("packageName =" + paramString12);
    return nativeDoAuth2(paramContext, paramInt1, paramString1, paramString2, paramString3, paramString4, paramString5, paramInt2, paramString6, paramString7, paramString8, paramString9, paramString10, paramString11, paramString12, paramString13, paramInt3, paramString14, handler_internal);
  }
  
  public static int doCancel(Context paramContext, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, Handler paramHandler)
  {
    owner = paramContext;
    handler_interface = paramHandler;
    return nativeDoCancel(paramContext, paramInt, paramString1, paramString2, paramString3, paramString4, paramString5, paramString6, handler_internal);
  }
  
  private static void doClick()
  {
    int i = (int)System.currentTimeMillis();
    messageHandler = new MessageHandler(Looper.myLooper());
    new MvSdkJar.2(i).start();
  }
  
  public static int doLogin(Context paramContext, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler)
  {
    Util.Log("TESTSDKJardoLogin");
    owner = paramContext;
    handler_interface = paramHandler;
    Util.Log("channelID =" + paramString1);
    Util.Log("packageName =" + paramString3);
    return nativeDoLogin(paramContext, paramInt, paramString1, paramString2, paramString3, paramString4, paramString5, handler_internal);
  }
  
  public static int getKey(Context paramContext, String paramString, Handler paramHandler)
  {
    paramContext = new a();
    paramContext.a(15000);
    paramContext.a(Util.getUserAgent());
    paramContext.a(paramString, new MvSdkJar.6(paramHandler));
    return 0;
  }
  
  public static String getStatOrderSign(Context paramContext, Bundle paramBundle, int paramInt)
  {
    owner = paramContext;
    return nativeGetStatOrderSign(paramContext, paramBundle, paramInt);
  }
  
  public static int init(Context paramContext, Handler paramHandler)
  {
    Util.Log("TESTSDKJarinit");
    owner = paramContext;
    handler_interface = paramHandler;
    paramHandler = paramContext.getSharedPreferences("TESTSDKJar", 0);
    if (paramHandler.getLong("first_start_time", 0L) == 0L)
    {
      paramHandler = paramHandler.edit();
      paramHandler.putLong("first_start_time", System.currentTimeMillis());
      paramHandler.commit();
    }
    paramHandler = paramContext.getPackageName();
    paramHandler = "/data/data/" + paramHandler + "/";
    System.loadLibrary("minivenus");
    nativeInit(paramContext, paramHandler, handler_internal);
    return 0;
  }
  
  public static void javaCallHttp(String paramString1, ArrayList paramArrayList, String paramString2, long paramLong1, long paramLong2)
  {
    a localA = new a();
    localA.a(15000);
    int i;
    int j;
    if (paramArrayList != null)
    {
      i = paramArrayList.size();
      j = 0;
      label30:
      if (j >= i) {
        break label113;
      }
      if (!((String)paramArrayList.get(j)).equals("User-Agent")) {
        break label85;
      }
      localA.a((String)paramArrayList.get(j + 1));
    }
    for (;;)
    {
      j += 2;
      break label30;
      i = 0;
      break;
      label85:
      localA.a((String)paramArrayList.get(j), (String)paramArrayList.get(j + 1));
    }
    try
    {
      label113:
      paramArrayList = new StringEntity(paramString2);
      localA.a(owner, paramString1, paramArrayList, "application/x-www-form-urlencoded", new MvSdkJar.4(paramLong1, paramString1, paramLong2));
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void javaGetHttpFile(String paramString1, long paramLong1, long paramLong2, String paramString2)
  {
    a localA = new a();
    localA.a(15000);
    try
    {
      localA.a(paramString1, new MvSdkJar.5(paramString1, paramString2));
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static native int nativeCallMethod(Context paramContext, int paramInt, Bundle paramBundle, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler);
  
  public static native int nativeCallTimer(int paramInt, long paramLong1, long paramLong2);
  
  public static native int nativeDoAuth2(Context paramContext, int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt2, String paramString6, String paramString7, String paramString8, String paramString9, String paramString10, String paramString11, String paramString12, String paramString13, int paramInt3, String paramString14, Handler paramHandler);
  
  public static native int nativeDoCancel(Context paramContext, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, Handler paramHandler);
  
  public static native int nativeDoLogin(Context paramContext, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler);
  
  public static native int nativeDoSearchOrderList(Context paramContext, int paramInt, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler);
  
  public static native void nativeDownloadRtsp(String paramString1, int paramInt1, String paramString2, int paramInt2);
  
  public static native String nativeGetStatOrderSign(Context paramContext, Bundle paramBundle, int paramInt);
  
  public static native int nativeHttpResponse(String paramString, byte[] paramArrayOfByte, long paramLong1, long paramLong2);
  
  public static native void nativeInit(Context paramContext, String paramString, Handler paramHandler);
  
  public static native int nativeInitData(Context paramContext, String paramString, Handler paramHandler);
  
  public static native int nativeMonitorNetworkStatus(Context paramContext, String paramString, Handler paramHandler);
  
  public static native int nativeMonitorNetworkStatus2(Context paramContext, String paramString, Handler paramHandler);
  
  public static native int nativeParseResponse(int paramInt1, String paramString1, String paramString2, int paramInt2, String paramString3);
  
  public static native void nativeQueryToken();
  
  public static native void nativeSayHelloT(String paramString1, String paramString2);
  
  public static native int nativeStartSo(Context paramContext, Bundle paramBundle, Handler paramHandler, String paramString1, String paramString2, String paramString3);
  
  public static void sayHelloT(String paramString1, String paramString2)
  {
    nativeSayHelloT(paramString1, paramString2);
  }
  
  public static void sendRequest(int paramInt1, String paramString1, ArrayList paramArrayList, String paramString2, int paramInt2, String paramString3)
  {
    a localA = new a();
    localA.a(15000);
    int j = paramArrayList.size();
    int i = 0;
    if (i < j)
    {
      if (((String)paramArrayList.get(i)).equals("User-Agent")) {
        localA.a((String)paramArrayList.get(i + 1));
      }
      for (;;)
      {
        i += 2;
        break;
        localA.a((String)paramArrayList.get(i), (String)paramArrayList.get(i + 1));
      }
    }
    if (Util.checkNetWork(owner) == 0) {
      localA.a("x-up-bear-type", "TD-SCDMA");
    }
    if (paramInt1 != 0) {
      try
      {
        paramArrayList = new StringEntity(paramString2);
        localA.a(owner, paramString1, paramArrayList, "application/x-www-form-urlencoded", new MvSdkJar.3(paramInt1, paramString1, paramInt2, paramString3));
        return;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        paramString1.printStackTrace();
        return;
      }
    }
    javaGetHttpFile(paramString1, paramInt1, paramInt2, paramString3);
  }
  
  public static int visit(Context paramContext, String paramString, Handler paramHandler)
  {
    owner = paramContext;
    handler_interface = paramHandler;
    return nativeInitData(paramContext, paramString, handler_internal);
  }
}
