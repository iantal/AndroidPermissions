package com.jiexinhongye.adsdk;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Environment;
import android.util.SparseArray;
import android.widget.GridView;
import com.jiexinhongye.adsdk.activity.AppMarket;
import com.jiexinhongye.adsdk.adapter.QuitDialogAdapter;
import com.jiexinhongye.adsdk.data.DataHelper;
import com.jiexinhongye.adsdk.model.AppADItem;
import com.jiexinhongye.libforztool.android.ZDownloadTask;
import com.jiexinhongye.libforztool.android.ZPhoneInfo;
import com.jiexinhongye.libforztool.android.Zlog;
import com.jiexinhongye.libforztool.android.display.CloseListener;
import com.jiexinhongye.libforztool.android.display.DisplayUtil;
import com.jiexinhongye.libforztool.android.display.ShowListener;
import com.jiexinhongye.libforztool.ztool.JsonTool;
import com.jiexinhongye.libforztool.ztool.ZNetTask;
import com.jiexinhongye.libforztool.ztool.ZProgressListener;
import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import org.json.JSONException;
import org.json.JSONObject;

public class ADUtil
  implements ADUtilInterface
{
  public static final String REC_ACTION = "ztool_push_donwload";
  public static int SYNC_AD_SIZE = 5;
  private static ADUtil a;
  public static Executor exec = Executors.newFixedThreadPool(10);
  private Context b;
  private LinkedList c = new LinkedList();
  private LinkedList d = new LinkedList();
  private LinkedList e = new LinkedList();
  private File f;
  private File g;
  private boolean h = false;
  private BroadcastReceiver i = new j(this);
  
  private ADUtil() {}
  
  private void a()
  {
    if (!this.h) {
      throw new RuntimeException("ADUtil is not init ... ");
    }
  }
  
  private static void a(Context paramContext)
  {
    if ((paramContext instanceof Activity)) {
      DisplayUtil.getInstance().flushWithActivity((Activity)paramContext);
    }
  }
  
  public static ADUtil getInstance()
  {
    try
    {
      if (a == null) {
        a = new ADUtil();
      }
      ADUtil localADUtil = a;
      return localADUtil;
    }
    finally {}
  }
  
  public File getCacheDir()
  {
    return this.f;
  }
  
  public File getDownloadFile()
  {
    return this.g;
  }
  
  public File getItemDirFile(AppADItem paramAppADItem)
  {
    paramAppADItem = new File(getInstance().getCacheDir() + File.separator + paramAppADItem.getId());
    if (!paramAppADItem.isDirectory()) {
      paramAppADItem.mkdir();
    }
    return paramAppADItem;
  }
  
  public File getItemDownloadApkPath(AppADItem paramAppADItem)
  {
    return new File(getItemDirFile(paramAppADItem) + File.separator + "app.apk");
  }
  
  public ZDownloadTask getItemDownloadTask(AppADItem paramAppADItem, ZProgressListener paramZProgressListener)
  {
    paramZProgressListener = new ZDownloadTask(this.g, paramAppADItem.getAppurl(), getItemDownloadApkPath(paramAppADItem), paramZProgressListener);
    paramZProgressListener.setMainCallback(new q(this, paramAppADItem));
    return paramZProgressListener;
  }
  
  public File getItemIconFile(AppADItem paramAppADItem)
  {
    return new File(getItemDirFile(paramAppADItem) + File.separator + "icon.png");
  }
  
  public void init(Context paramContext)
  {
    DisplayUtil.getInstance().init(paramContext);
    PreData.init(paramContext);
    this.g = paramContext.getFilesDir();
    if (Environment.getExternalStorageState().equals("mounted")) {}
    for (this.f = new File(Environment.getExternalStorageDirectory(), "ADUtil");; this.f = new File(paramContext.getCacheDir(), "ADUtil"))
    {
      if (!this.f.isDirectory()) {
        this.f.mkdir();
      }
      this.h = true;
      this.b = paramContext;
      IntentFilter localIntentFilter = new IntentFilter("ztool_push_donwload");
      localIntentFilter.setPriority(Integer.MAX_VALUE);
      paramContext.registerReceiver(this.i, localIntentFilter);
      UserInfo.init(paramContext);
      return;
    }
  }
  
  public void onDestroy()
  {
    this.b.unregisterReceiver(this.i);
  }
  
  public void showBanner(Context paramContext)
  {
    showBanner(paramContext, 80);
  }
  
  public void showBanner(Context paramContext, int paramInt)
  {
    showBanner(paramContext, paramInt, null, null);
  }
  
  public void showBanner(Context paramContext, int paramInt, ShowListener paramShowListener, CloseListener paramCloseListener)
  {
    a(paramContext);
    a();
    exec.execute(new l(this, paramContext, paramInt, paramShowListener, paramCloseListener));
  }
  
  public void showMarket(Context paramContext)
  {
    Intent localIntent = new Intent(paramContext, AppMarket.class);
    localIntent.setFlags(268435456);
    paramContext.startActivity(localIntent);
  }
  
  public void showPush(Context paramContext)
  {
    a();
    exec.execute(new m(this, paramContext));
  }
  
  public void showQuitDialog(Activity paramActivity)
  {
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(paramActivity);
    localBuilder.setTitle("退出");
    GridView localGridView = new GridView(paramActivity);
    localGridView.setNumColumns(4);
    localBuilder.setView(localGridView);
    QuitDialogAdapter localQuitDialogAdapter = new QuitDialogAdapter(paramActivity);
    localGridView.setAdapter(localQuitDialogAdapter);
    localQuitDialogAdapter.data().load();
    localBuilder.setNegativeButton("退出", new n(this, paramActivity));
    localBuilder.setPositiveButton("取消", new o(this));
    localBuilder.create().show();
    localGridView.setOnItemClickListener(new p(this, localQuitDialogAdapter));
  }
  
  public void showSpotAD(Context paramContext)
  {
    showSpotAD(paramContext, null, null);
  }
  
  public void showSpotAD(Context paramContext, ShowListener paramShowListener, CloseListener paramCloseListener)
  {
    a(paramContext);
    a();
    exec.execute(new k(this, paramContext, paramShowListener, paramCloseListener));
  }
  
  protected void startADTask(AppADItem paramAppADItem, Context paramContext, ShowListener paramShowListener, CloseListener paramCloseListener)
  {
    File localFile = new File(this.f, paramAppADItem.getId());
    if (!localFile.isDirectory()) {
      localFile.mkdir();
    }
    paramContext = new ADTask(paramContext, paramAppADItem, localFile, this.g);
    paramContext.setShowListener(paramShowListener);
    paramContext.setCloseListener(paramCloseListener);
    exec.execute(paramContext);
    ADTask.taskMap.put(paramAppADItem.getId().intValue(), paramContext);
  }
  
  protected void syncList(LinkedList paramLinkedList, String paramString, Context paramContext)
  {
    paramString = DataUrl.makeBaseParams(paramContext) + "&showType=" + paramString + "&count=" + SYNC_AD_SIZE + "&showedADs=" + PreData.get(paramString, "0") + "&page=0";
    Object localObject = ZNetTask.getStr("http://115.28.222.200:8080/AdShow/get_ads.do", paramString, 0);
    Zlog.syso("sync..List.request:" + paramString + ",back:" + (String)localObject);
    if (localObject == null) {
      return;
    }
    for (;;)
    {
      try
      {
        paramString = new JSONObject((String)localObject);
        if (!"200".equals(paramString.getString("state"))) {
          break;
        }
        paramString = (LinkedList)JsonTool.getListModeFromJson(paramString.getString("data"), AppADItem.class, new LinkedList());
        try
        {
          paramString = paramString.iterator();
          if (!paramString.hasNext()) {
            return;
          }
        }
        finally {}
        localObject = (AppADItem)paramString.next();
      }
      catch (JSONException paramLinkedList)
      {
        paramLinkedList.printStackTrace();
        return;
      }
      if (!ZPhoneInfo.isPackageInstalled(paramContext, ((AppADItem)localObject).getPackagename())) {
        paramLinkedList.add(localObject);
      }
    }
  }
}
