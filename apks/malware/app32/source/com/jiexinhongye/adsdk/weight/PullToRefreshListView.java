package com.jiexinhongye.adsdk.weight;

import android.content.Context;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewTreeObserver;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.OvershootInterpolator;
import android.view.animation.RotateAnimation;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.jiexinhongye.libforztool.android.ResHelper;
import java.text.SimpleDateFormat;
import java.util.Date;

public class PullToRefreshListView
  extends ListView
{
  private static String a = "ptr_header";
  private static int b;
  private PullToRefreshListView.OnRefreshListener A;
  private float B;
  private boolean c;
  private boolean d;
  private boolean e;
  private boolean f;
  private String g = "下拉刷新应用列表";
  private String h = "松开开始刷新";
  private String i = "正在刷新";
  private String j = "最后加载完毕";
  private SimpleDateFormat k = new SimpleDateFormat("dd/MM HH:mm");
  private float l;
  private int m;
  private boolean n;
  private long o = -1L;
  private f p;
  private LinearLayout q;
  private RelativeLayout r;
  private RotateAnimation s;
  private RotateAnimation t;
  private ImageView u;
  private ProgressBar v;
  private TextView w;
  private TextView x;
  private AdapterView.OnItemClickListener y;
  private AdapterView.OnItemLongClickListener z;
  
  public PullToRefreshListView(Context paramContext)
  {
    super(paramContext);
    b();
  }
  
  public PullToRefreshListView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    b();
  }
  
  public PullToRefreshListView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    b();
  }
  
  private void a(f paramF)
  {
    this.p = paramF;
    switch (f()[paramF.ordinal()])
    {
    default: 
    case 1: 
      do
      {
        return;
        this.v.setVisibility(4);
        this.u.setVisibility(0);
        this.w.setText(this.g);
      } while ((!this.f) || (this.o == -1L));
      this.x.setVisibility(0);
      this.x.setText(String.format(this.j, new Object[] { this.k.format(new Date(this.o)) }));
      return;
    case 2: 
      this.v.setVisibility(4);
      this.u.setVisibility(0);
      this.w.setText(this.h);
      return;
    }
    e();
    this.o = System.currentTimeMillis();
    if (this.A == null)
    {
      a(f.a);
      return;
    }
    this.A.onRefresh();
  }
  
  private void b()
  {
    setVerticalFadingEdgeEnabled(false);
    this.q = ((LinearLayout)LayoutInflater.from(getContext()).inflate(ResHelper.getLayoutId(getContext(), a), null));
    this.r = ((RelativeLayout)this.q.findViewById(ResHelper.getId(getContext(), "ptr_id_header")));
    this.w = ((TextView)this.r.findViewById(ResHelper.getId(getContext(), "ptr_id_text")));
    this.x = ((TextView)this.r.findViewById(ResHelper.getId(getContext(), "ptr_id_last_updated")));
    this.u = ((ImageView)this.r.findViewById(ResHelper.getId(getContext(), "ptr_id_image")));
    this.v = ((ProgressBar)this.r.findViewById(ResHelper.getId(getContext(), "ptr_id_spinner")));
    this.s = new RotateAnimation(0.0F, -180.0F, 1, 0.5F, 1, 0.5F);
    this.s.setInterpolator(new LinearInterpolator());
    this.s.setDuration(250L);
    this.s.setFillAfter(true);
    this.t = new RotateAnimation(-180.0F, 0.0F, 1, 0.5F, 1, 0.5F);
    this.t.setInterpolator(new LinearInterpolator());
    this.t.setDuration(250L);
    this.t.setFillAfter(true);
    addHeaderView(this.q);
    a(f.a);
    this.c = isVerticalScrollBarEnabled();
    this.r.getViewTreeObserver().addOnGlobalLayoutListener(new c(this, (byte)0));
    super.setOnItemClickListener(new d(this, (byte)0));
    super.setOnItemLongClickListener(new e(this, (byte)0));
  }
  
  private void b(int paramInt)
  {
    this.m = paramInt;
    ViewGroup.MarginLayoutParams localMarginLayoutParams = (ViewGroup.MarginLayoutParams)this.r.getLayoutParams();
    localMarginLayoutParams.setMargins(0, Math.round(paramInt), 0, 0);
    this.r.setLayoutParams(localMarginLayoutParams);
  }
  
  private void c()
  {
    if (this.p == f.c) {}
    for (int i1 = this.r.getHeight() - this.q.getHeight();; i1 = -this.q.getHeight() - this.q.getTop() + getPaddingTop())
    {
      TranslateAnimation localTranslateAnimation = new TranslateAnimation(0, 0.0F, 0, 0.0F, 0, 0.0F, 0, i1);
      localTranslateAnimation.setDuration(700L);
      localTranslateAnimation.setFillEnabled(true);
      localTranslateAnimation.setFillAfter(false);
      localTranslateAnimation.setFillBefore(true);
      localTranslateAnimation.setInterpolator(new OvershootInterpolator(1.4F));
      localTranslateAnimation.setAnimationListener(new a(this, i1));
      startAnimation(localTranslateAnimation);
      return;
    }
  }
  
  private void d()
  {
    if (getFirstVisiblePosition() > 0)
    {
      b(-this.r.getHeight());
      a(f.a);
      return;
    }
    if ((getAnimation() != null) && (!getAnimation().hasEnded()))
    {
      this.d = true;
      return;
    }
    c();
  }
  
  private void e()
  {
    this.v.setVisibility(0);
    this.u.clearAnimation();
    this.u.setVisibility(4);
    this.w.setText(this.i);
  }
  
  public boolean isRefreshing()
  {
    return this.p == f.c;
  }
  
  public void onRefreshComplete()
  {
    this.p = f.a;
    d();
    this.o = System.currentTimeMillis();
  }
  
  protected void onScrollChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onScrollChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (!this.n)
    {
      if ((b > 0) && (this.p != f.c)) {
        b(-b);
      }
      this.n = true;
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if ((this.e) && ((this.p == f.c) || ((getAnimation() != null) && (!getAnimation().hasEnded())))) {
      return true;
    }
    switch (paramMotionEvent.getAction())
    {
    }
    for (;;)
    {
      return super.onTouchEvent(paramMotionEvent);
      if (getFirstVisiblePosition() == 0) {}
      for (this.l = paramMotionEvent.getY();; this.l = -1.0F)
      {
        this.B = paramMotionEvent.getY();
        break;
      }
      if ((this.l != -1.0F) && ((this.p == f.b) || (getFirstVisiblePosition() == 0))) {
        switch (f()[this.p.ordinal()])
        {
        default: 
          break;
        case 1: 
          d();
          break;
        case 2: 
          a(f.c);
          c();
          continue;
          if ((this.l != -1.0F) && (getFirstVisiblePosition() == 0) && (Math.abs(this.B - paramMotionEvent.getY()) > 5.0F))
          {
            float f3 = paramMotionEvent.getY();
            float f2 = f3 - this.l;
            float f1 = f2;
            if (f2 > 0.0F) {
              f1 = f2 / 1.7F;
            }
            this.l = f3;
            int i1 = Math.max(Math.round(f1 + this.m), -this.r.getHeight());
            if ((i1 != this.m) && (this.p != f.c))
            {
              b(i1);
              if ((this.p == f.a) && (this.m > 0))
              {
                a(f.b);
                this.u.clearAnimation();
                this.u.startAnimation(this.s);
              }
              else if ((this.p == f.b) && (this.m < 0))
              {
                a(f.a);
                this.u.clearAnimation();
                this.u.startAnimation(this.t);
              }
            }
          }
          break;
        }
      }
    }
  }
  
  public void setLastUpdatedDateFormat(SimpleDateFormat paramSimpleDateFormat)
  {
    this.k = paramSimpleDateFormat;
  }
  
  public void setLockScrollWhileRefreshing(boolean paramBoolean)
  {
    this.e = paramBoolean;
  }
  
  public void setOnItemClickListener(AdapterView.OnItemClickListener paramOnItemClickListener)
  {
    this.y = paramOnItemClickListener;
  }
  
  public void setOnItemLongClickListener(AdapterView.OnItemLongClickListener paramOnItemLongClickListener)
  {
    this.z = paramOnItemLongClickListener;
  }
  
  public void setOnRefreshListener(PullToRefreshListView.OnRefreshListener paramOnRefreshListener)
  {
    this.A = paramOnRefreshListener;
  }
  
  public void setRefreshing()
  {
    this.p = f.c;
    scrollTo(0, 0);
    e();
    b(0);
  }
  
  public void setShowLastUpdatedText(boolean paramBoolean)
  {
    this.f = paramBoolean;
    if (!paramBoolean) {
      this.x.setVisibility(8);
    }
  }
  
  public void setTextPullToRefresh(String paramString)
  {
    this.g = paramString;
    if (this.p == f.a) {
      this.w.setText(paramString);
    }
  }
  
  public void setTextRefreshing(String paramString)
  {
    this.i = paramString;
    if (this.p == f.c) {
      this.w.setText(paramString);
    }
  }
  
  public void setTextReleaseToRefresh(String paramString)
  {
    this.h = paramString;
    if (this.p == f.b) {
      this.w.setText(paramString);
    }
  }
}
