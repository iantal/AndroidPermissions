package com.jiexinhongye.libforztool.android;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import com.jiexinhongye.libforztool.ztool.MD5Tool;
import com.jiexinhongye.libforztool.ztool.ZFileTask;
import com.jiexinhongye.libforztool.ztool.ZNetTask;
import com.jiexinhongye.libforztool.ztool.ZProgressChanger;
import com.jiexinhongye.libforztool.ztool.ZProgressListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public class ZDownloadTask
  implements Runnable
{
  public static final int HANDLE_WHAT_CALLBACK = 10;
  public static final String JSON_FILE = "file";
  public static final String JSON_MAXLENGTH = "maxLength";
  public static final String JSON_URL = "url";
  public static final int TASK_CACHE_200 = 9;
  public static final int TASK_CANCEL = 7;
  public static final int TASK_DOWNLOAD_OK = 5;
  public static final int TASK_ERROR = 8;
  public static final int TASK_NET_416 = 6;
  public static File cacheDir;
  public static HashMap runtimes = new HashMap();
  private String a;
  private File b;
  private int c = 0;
  private ZProgressListener d;
  private Handler e;
  private TaskMainCallback f;
  private TaskWorkCallback g;
  private boolean h = false;
  private ZProgressChanger i;
  private ZFileTask j;
  private long k = -1L;
  
  public ZDownloadTask(File paramFile1, String paramString, File paramFile2, ZProgressListener paramZProgressListener)
  {
    this.a = paramString;
    this.b = paramFile2;
    this.d = paramZProgressListener;
    cacheDir = paramFile1;
    Logger.i("download.file:" + paramFile2.toString());
    this.e = new c(this, Looper.getMainLooper());
    this.i = new ZProgressChanger(paramZProgressListener, null, null, 0L);
  }
  
  private boolean a()
  {
    if (new File(cacheDir, getTaskMD5()).exists()) {
      try
      {
        String str = readDownloadInfo().getString("url");
        boolean bool = this.a.equals(str);
        return bool;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
    return false;
  }
  
  public static void setCacheDir(File paramFile)
  {
    cacheDir = paramFile;
  }
  
  public void cancel()
  {
    if (this.j != null) {
      this.j.cancel();
    }
  }
  
  public ZDownloadTask.TaskState checkState()
  {
    ZDownloadTask.TaskState localTaskState = new ZDownloadTask.TaskState();
    JSONObject localJSONObject = readDownloadInfo();
    if (localJSONObject != null)
    {
      localTaskState.hasCache = true;
      localTaskState.cacheLength = this.b.length();
    }
    try
    {
      localTaskState.maxLength = localJSONObject.getLong("maxLength");
      return localTaskState;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    return localTaskState;
  }
  
  public void clear()
  {
    File localFile = new File(cacheDir, getTaskMD5());
    if (localFile.exists()) {
      localFile.delete();
    }
  }
  
  public File getFile()
  {
    return this.b;
  }
  
  public TaskMainCallback getMainCallback()
  {
    return this.f;
  }
  
  public String getTaskMD5()
  {
    return MD5Tool.getMd5(this.a);
  }
  
  public int getTaskState()
  {
    return this.c;
  }
  
  public String getUrl()
  {
    return this.a;
  }
  
  public TaskWorkCallback getWorkCallback()
  {
    return this.g;
  }
  
  public boolean isCancel()
  {
    return this.h;
  }
  
  public JSONObject readDownloadInfo()
  {
    Object localObject = new File(cacheDir, getTaskMD5());
    if (((File)localObject).exists())
    {
      localObject = ZFileTask.getStr((File)localObject);
      if (localObject != null) {
        try
        {
          localObject = new JSONObject((String)localObject);
          return localObject;
        }
        catch (JSONException localJSONException)
        {
          localJSONException.printStackTrace();
        }
      }
    }
    return null;
  }
  
  public void run()
  {
    boolean bool = false;
    if (this.h) {
      this.h = false;
    }
    Object localObject2 = runtimes.keySet();
    Object localObject1 = getTaskMD5();
    localObject2 = ((Set)localObject2).iterator();
    if (!((Iterator)localObject2).hasNext()) {}
    for (int m = 0;; m = 1)
    {
      if (m == 0) {
        break label112;
      }
      localObject1 = (ZDownloadTask)runtimes.get(getTaskMD5());
      if (localObject1 == null) {
        break label112;
      }
      if (((ZDownloadTask)localObject1).j != null) {
        ((ZDownloadTask)localObject1).j.updataProgressLinstener(this.d, true);
      }
      return;
      if (!((String)((Iterator)localObject2).next()).equals(localObject1)) {
        break;
      }
    }
    label112:
    runtimes.put(getTaskMD5(), this);
    if (a()) {}
    for (;;)
    {
      try
      {
        localObject1 = readDownloadInfo();
        if (localObject1 != null) {
          continue;
        }
        System.out.println("cache..read..json..null");
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
        continue;
        setTaskState(9);
        continue;
      }
      catch (IllegalStateException localIllegalStateException)
      {
        localIllegalStateException.printStackTrace();
        continue;
        if (localObject2 == null) {
          continue;
        }
        this.j = new ZFileTask();
        bool = this.j.writeFileWithStream((InputStream)localObject2, this.b, this.b.length() + localIllegalStateException.getContentLenght(), this.d, true, this.b.length());
        if (!bool) {
          continue;
        }
        setTaskState(5);
        continue;
        setTaskState(8);
        continue;
      }
      if ((this.f != null) && (!this.h))
      {
        localObject1 = Message.obtain();
        ((Message)localObject1).what = 10;
        ((Message)localObject1).obj = this.b;
        this.e.sendMessage((Message)localObject1);
      }
      if ((this.g != null) && (!this.h)) {
        this.g.onTaskOver(this.c, this.b);
      }
      runtimes.remove(getTaskMD5());
      return;
      localObject1 = new File(((JSONObject)localObject1).getString("file"));
      if (!((File)localObject1).toString().equals(this.b.toString())) {
        ZFileTask.copyFile((File)localObject1, this.b);
      }
      localObject1 = new ZNetTask(this.a, null, "Range|bytes=" + this.b.length() + "-", null);
      localObject2 = ((ZNetTask)localObject1).getTaskInputStream(0);
      if (this.b.length() == 0L)
      {
        this.k = ((ZNetTask)localObject1).getContentLenght();
        writeDownloadInfo();
      }
      m = ((ZNetTask)localObject1).getResponseCode();
      if (m != 206) {
        if (m == 416)
        {
          setTaskState(6);
          continue;
        }
      }
      if ((!this.b.exists()) || (this.b.delete()))
      {
        ZNetTask localZNetTask = new ZNetTask(this.a, null, null, null);
        Logger.i("d.task.url:" + this.a);
        localObject2 = localZNetTask.getTaskInputStream(0);
        this.k = localZNetTask.getContentLenght();
        writeDownloadInfo();
        this.j = new ZFileTask();
        if (this.j.writeFileWithStream((InputStream)localObject2, this.b, localZNetTask.getContentLenght(), this.d, false)) {
          setTaskState(5);
        } else {
          setTaskState(8);
        }
      }
    }
  }
  
  public void setCancel(boolean paramBoolean)
  {
    this.h = paramBoolean;
  }
  
  public void setFile(File paramFile)
  {
    this.b = paramFile;
  }
  
  public void setMainCallback(TaskMainCallback paramTaskMainCallback)
  {
    this.f = paramTaskMainCallback;
  }
  
  public void setTaskState(int paramInt)
  {
    this.c = paramInt;
  }
  
  public void setUrl(String paramString)
  {
    this.a = paramString;
  }
  
  public void setWorkCallback(TaskWorkCallback paramTaskWorkCallback)
  {
    this.g = paramTaskWorkCallback;
  }
  
  public final String toString()
  {
    return "ZDownloadTask [url=" + this.a + ", file=" + this.b + ", taskState=" + this.c + ", pcl=" + this.d + ", handler=" + this.e + ", mainCallback=" + this.f + ", workCallback=" + this.g + ", isCancel=" + this.h + ", zpc=" + this.i + ", fileTask=" + this.j + "]";
  }
  
  public void writeDownloadInfo()
  {
    File localFile = new File(cacheDir, getTaskMD5());
    try
    {
      this.b.createNewFile();
      JSONObject localJSONObject = new JSONObject();
      localJSONObject.put("url", this.a);
      localJSONObject.put("file", this.b.toString());
      localJSONObject.put("maxLength", this.k);
      ZFileTask.writeFile(localJSONObject.toString().getBytes(), localFile);
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
      return;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
  }
}
