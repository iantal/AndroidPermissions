package com.payeco.android.plugin.a;

import android.util.Base64;
import java.security.KeyFactory;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;
import javax.crypto.Cipher;

public final class f
{
  public f() {}
  
  public static String a(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = new X509EncodedKeySpec(Base64.decode(paramString1.replace("-----BEGIN PUBLIC KEY-----", "").replace("-----END PUBLIC KEY-----", ""), 0));
      paramString1 = KeyFactory.getInstance("RSA").generatePublic(paramString1);
      Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1PADDING");
      localCipher.init(1, paramString1);
      paramString1 = a.a(localCipher.doFinal(paramString2.getBytes())).replaceAll("\t|\r|\n", "");
      return paramString1;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return "";
  }
  
  public static String a(byte[] paramArrayOfByte, String paramString)
  {
    try
    {
      paramString = a.a(paramString);
      paramString = (RSAPublicKey)KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(paramString));
      Cipher localCipher = Cipher.getInstance("RSA/ECB/PKCS1PADDING");
      localCipher.init(1, paramString);
      paramArrayOfByte = a.a(localCipher.doFinal(paramArrayOfByte));
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return "";
  }
}
