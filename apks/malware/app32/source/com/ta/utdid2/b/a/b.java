package com.ta.utdid2.b.a;

import java.io.UnsupportedEncodingException;

public class b
{
  static
  {
    if (!b.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      a = bool;
      return;
    }
  }
  
  private b() {}
  
  public static String a(byte[] paramArrayOfByte, int paramInt)
  {
    int i;
    int k;
    label72:
    label121:
    label169:
    for (;;)
    {
      int j;
      b.c localC;
      try
      {
        j = paramArrayOfByte.length;
        localC = new b.c(paramInt);
        i = j / 3 * 4;
        if (!localC.d) {
          break label121;
        }
        paramInt = i;
        if (j % 3 > 0) {
          paramInt = i + 4;
        }
        if ((!localC.e) || (j <= 0)) {
          break label169;
        }
        k = (j - 1) / 57;
        if (!localC.f) {
          break;
        }
        i = 2;
      }
      catch (UnsupportedEncodingException paramArrayOfByte)
      {
        throw new AssertionError(paramArrayOfByte);
      }
      localC.a = new byte[paramInt];
      localC.a(paramArrayOfByte, j);
      if ((!a) && (localC.b != paramInt))
      {
        throw new AssertionError();
        paramInt = i;
      }
      switch (j % 3)
      {
      case 0: 
        paramArrayOfByte = new String(localC.a, "US-ASCII");
        return paramArrayOfByte;
      }
    }
    for (;;)
    {
      paramInt = i * (k + 1) + paramInt;
      break label72;
      paramInt = i;
      break;
      paramInt = i + 2;
      break;
      paramInt = i + 3;
      break;
      i = 1;
    }
  }
  
  public static byte[] a(String paramString)
  {
    byte[] arrayOfByte = paramString.getBytes();
    int i = arrayOfByte.length;
    paramString = new b.b(new byte[i * 3 / 4]);
    if (!paramString.a(arrayOfByte, i)) {
      throw new IllegalArgumentException("bad base-64");
    }
    if (paramString.b == paramString.a.length) {
      return paramString.a;
    }
    arrayOfByte = new byte[paramString.b];
    System.arraycopy(paramString.a, 0, arrayOfByte, 0, paramString.b);
    return arrayOfByte;
  }
}
