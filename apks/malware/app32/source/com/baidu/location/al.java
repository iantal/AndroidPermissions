package com.baidu.location;

import android.os.Bundle;
import android.os.Message;
import android.os.Messenger;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.message.BasicNameValuePair;

class al
  extends cb
{
  boolean a = false;
  String b = null;
  Messenger c = null;
  
  public al(ak paramAk)
  {
    this.h = new ArrayList();
  }
  
  void a()
  {
    this.e = bh.e();
    if (ak.a(this.d) == null) {
      ak.a(this.d, Jni.a("none"));
    }
    this.h.add(new BasicNameValuePair("erpt[0]", ak.a(this.d)));
    if (ak.b(this.d) == null) {
      ak.b(this.d, "none");
    }
    this.h.add(new BasicNameValuePair("erpt[1]", Jni.a(ak.b(this.d))));
    if (this.b == null) {
      this.b = "none";
    }
    this.h.add(new BasicNameValuePair("erpt[2]", Jni.a(this.b)));
    StringBuffer localStringBuffer = new StringBuffer(512);
    localStringBuffer.append("&t1=");
    localStringBuffer.append(ak.c(this.d));
    localStringBuffer.append("&t2=");
    localStringBuffer.append(ak.d(this.d));
    String str = cl.a().f();
    if (str != null) {
      localStringBuffer.append(str);
    }
    this.h.add(new BasicNameValuePair("erpt[3]", Jni.a(localStringBuffer.toString())));
    ak.a(this.d, null);
    ak.b(this.d, null);
    ak.a(this.d, 0L);
  }
  
  public void a(Message paramMessage)
  {
    this.c = paramMessage.replyTo;
    if (this.a) {
      paramMessage = Message.obtain(null, 204);
    }
    try
    {
      this.c.send(paramMessage);
      return;
    }
    catch (Exception paramMessage) {}
    this.a = true;
    this.b = paramMessage.getData().getString("errInfo");
    e();
    return;
  }
  
  void a(boolean paramBoolean)
  {
    if (this.h != null) {
      this.h.clear();
    }
    Message localMessage;
    if (paramBoolean) {
      localMessage = Message.obtain(null, 205);
    }
    try
    {
      for (;;)
      {
        this.c.send(localMessage);
        this.a = false;
        return;
        localMessage = Message.obtain(null, 204);
      }
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
  }
}
