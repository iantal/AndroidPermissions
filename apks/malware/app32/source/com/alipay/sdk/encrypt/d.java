package com.alipay.sdk.encrypt;

import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

public final class d
{
  public static final String a = "SHA1WithRSA";
  private static final String b = "RSA";
  
  public d() {}
  
  /* Error */
  public static String a(String paramString1, String paramString2)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: new 23	java/security/spec/X509EncodedKeySpec
    //   6: dup
    //   7: aload_1
    //   8: invokestatic 28	com/alipay/sdk/encrypt/a:a	(Ljava/lang/String;)[B
    //   11: invokespecial 31	java/security/spec/X509EncodedKeySpec:<init>	([B)V
    //   14: astore_1
    //   15: ldc 11
    //   17: invokestatic 37	java/security/KeyFactory:getInstance	(Ljava/lang/String;)Ljava/security/KeyFactory;
    //   20: aload_1
    //   21: invokevirtual 41	java/security/KeyFactory:generatePublic	(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;
    //   24: astore 6
    //   26: ldc 43
    //   28: invokestatic 48	javax/crypto/Cipher:getInstance	(Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   31: astore_1
    //   32: aload_1
    //   33: iconst_1
    //   34: aload 6
    //   36: invokevirtual 52	javax/crypto/Cipher:init	(ILjava/security/Key;)V
    //   39: aload_0
    //   40: ldc 54
    //   42: invokevirtual 59	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   45: astore 6
    //   47: aload_1
    //   48: invokevirtual 63	javax/crypto/Cipher:getBlockSize	()I
    //   51: istore 4
    //   53: new 65	java/io/ByteArrayOutputStream
    //   56: dup
    //   57: invokespecial 66	java/io/ByteArrayOutputStream:<init>	()V
    //   60: astore_0
    //   61: iconst_0
    //   62: istore_2
    //   63: iload_2
    //   64: aload 6
    //   66: arraylength
    //   67: if_icmpge +39 -> 106
    //   70: aload 6
    //   72: arraylength
    //   73: iload_2
    //   74: isub
    //   75: iload 4
    //   77: if_icmpge +103 -> 180
    //   80: aload 6
    //   82: arraylength
    //   83: iload_2
    //   84: isub
    //   85: istore_3
    //   86: aload_0
    //   87: aload_1
    //   88: aload 6
    //   90: iload_2
    //   91: iload_3
    //   92: invokevirtual 70	javax/crypto/Cipher:doFinal	([BII)[B
    //   95: invokevirtual 73	java/io/ByteArrayOutputStream:write	([B)V
    //   98: iload_2
    //   99: iload 4
    //   101: iadd
    //   102: istore_2
    //   103: goto -40 -> 63
    //   106: new 56	java/lang/String
    //   109: dup
    //   110: aload_0
    //   111: invokevirtual 77	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   114: invokestatic 80	com/alipay/sdk/encrypt/a:a	([B)Ljava/lang/String;
    //   117: invokespecial 83	java/lang/String:<init>	(Ljava/lang/String;)V
    //   120: astore_1
    //   121: aload_0
    //   122: invokevirtual 86	java/io/ByteArrayOutputStream:close	()V
    //   125: aload_1
    //   126: areturn
    //   127: astore_0
    //   128: aconst_null
    //   129: astore_0
    //   130: aload_0
    //   131: ifnull +47 -> 178
    //   134: aload_0
    //   135: invokevirtual 86	java/io/ByteArrayOutputStream:close	()V
    //   138: aconst_null
    //   139: areturn
    //   140: astore_0
    //   141: aconst_null
    //   142: areturn
    //   143: astore_0
    //   144: aload 5
    //   146: astore_1
    //   147: aload_1
    //   148: ifnull +7 -> 155
    //   151: aload_1
    //   152: invokevirtual 86	java/io/ByteArrayOutputStream:close	()V
    //   155: aload_0
    //   156: athrow
    //   157: astore_0
    //   158: aload_1
    //   159: areturn
    //   160: astore_1
    //   161: goto -6 -> 155
    //   164: astore 5
    //   166: aload_0
    //   167: astore_1
    //   168: aload 5
    //   170: astore_0
    //   171: goto -24 -> 147
    //   174: astore_1
    //   175: goto -45 -> 130
    //   178: aconst_null
    //   179: areturn
    //   180: iload 4
    //   182: istore_3
    //   183: goto -97 -> 86
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	186	0	paramString1	String
    //   0	186	1	paramString2	String
    //   62	41	2	i	int
    //   85	98	3	j	int
    //   51	130	4	k	int
    //   1	144	5	localObject1	Object
    //   164	5	5	localObject2	Object
    //   24	65	6	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   3	61	127	java/lang/Exception
    //   134	138	140	java/io/IOException
    //   3	61	143	finally
    //   121	125	157	java/io/IOException
    //   151	155	160	java/io/IOException
    //   63	86	164	finally
    //   86	98	164	finally
    //   106	121	164	finally
    //   63	86	174	java/lang/Exception
    //   86	98	174	java/lang/Exception
    //   106	121	174	java/lang/Exception
  }
  
  private static boolean a(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString3 = KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(a.a(paramString3)));
      Signature localSignature = Signature.getInstance("SHA1WithRSA");
      localSignature.initVerify(paramString3);
      localSignature.update(paramString1.getBytes("utf-8"));
      boolean bool = localSignature.verify(a.a(paramString2));
      return bool;
    }
    catch (Exception paramString1) {}
    return false;
  }
  
  private static PublicKey b(String paramString1, String paramString2)
  {
    paramString2 = new X509EncodedKeySpec(a.a(paramString2));
    return KeyFactory.getInstance(paramString1).generatePublic(paramString2);
  }
  
  /* Error */
  private static String c(String paramString1, String paramString2)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: new 109	java/security/spec/PKCS8EncodedKeySpec
    //   6: dup
    //   7: aload_1
    //   8: invokestatic 28	com/alipay/sdk/encrypt/a:a	(Ljava/lang/String;)[B
    //   11: invokespecial 110	java/security/spec/PKCS8EncodedKeySpec:<init>	([B)V
    //   14: astore_1
    //   15: ldc 11
    //   17: invokestatic 37	java/security/KeyFactory:getInstance	(Ljava/lang/String;)Ljava/security/KeyFactory;
    //   20: aload_1
    //   21: invokevirtual 114	java/security/KeyFactory:generatePrivate	(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;
    //   24: astore 6
    //   26: ldc 43
    //   28: invokestatic 48	javax/crypto/Cipher:getInstance	(Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   31: astore_1
    //   32: aload_1
    //   33: iconst_2
    //   34: aload 6
    //   36: invokevirtual 52	javax/crypto/Cipher:init	(ILjava/security/Key;)V
    //   39: aload_0
    //   40: invokestatic 28	com/alipay/sdk/encrypt/a:a	(Ljava/lang/String;)[B
    //   43: astore 6
    //   45: aload_1
    //   46: invokevirtual 63	javax/crypto/Cipher:getBlockSize	()I
    //   49: istore 4
    //   51: new 65	java/io/ByteArrayOutputStream
    //   54: dup
    //   55: invokespecial 66	java/io/ByteArrayOutputStream:<init>	()V
    //   58: astore_0
    //   59: iconst_0
    //   60: istore_2
    //   61: iload_2
    //   62: aload 6
    //   64: arraylength
    //   65: if_icmpge +39 -> 104
    //   68: aload 6
    //   70: arraylength
    //   71: iload_2
    //   72: isub
    //   73: iload 4
    //   75: if_icmpge +100 -> 175
    //   78: aload 6
    //   80: arraylength
    //   81: iload_2
    //   82: isub
    //   83: istore_3
    //   84: aload_0
    //   85: aload_1
    //   86: aload 6
    //   88: iload_2
    //   89: iload_3
    //   90: invokevirtual 70	javax/crypto/Cipher:doFinal	([BII)[B
    //   93: invokevirtual 73	java/io/ByteArrayOutputStream:write	([B)V
    //   96: iload_2
    //   97: iload 4
    //   99: iadd
    //   100: istore_2
    //   101: goto -40 -> 61
    //   104: new 56	java/lang/String
    //   107: dup
    //   108: aload_0
    //   109: invokevirtual 77	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   112: invokespecial 115	java/lang/String:<init>	([B)V
    //   115: astore_1
    //   116: aload_0
    //   117: invokevirtual 86	java/io/ByteArrayOutputStream:close	()V
    //   120: aload_1
    //   121: areturn
    //   122: astore_0
    //   123: aconst_null
    //   124: astore_0
    //   125: aload_0
    //   126: ifnull +47 -> 173
    //   129: aload_0
    //   130: invokevirtual 86	java/io/ByteArrayOutputStream:close	()V
    //   133: aconst_null
    //   134: areturn
    //   135: astore_0
    //   136: aconst_null
    //   137: areturn
    //   138: astore_0
    //   139: aload 5
    //   141: astore_1
    //   142: aload_1
    //   143: ifnull +7 -> 150
    //   146: aload_1
    //   147: invokevirtual 86	java/io/ByteArrayOutputStream:close	()V
    //   150: aload_0
    //   151: athrow
    //   152: astore_0
    //   153: aload_1
    //   154: areturn
    //   155: astore_1
    //   156: goto -6 -> 150
    //   159: astore 5
    //   161: aload_0
    //   162: astore_1
    //   163: aload 5
    //   165: astore_0
    //   166: goto -24 -> 142
    //   169: astore_1
    //   170: goto -45 -> 125
    //   173: aconst_null
    //   174: areturn
    //   175: iload 4
    //   177: istore_3
    //   178: goto -94 -> 84
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	181	0	paramString1	String
    //   0	181	1	paramString2	String
    //   60	41	2	i	int
    //   83	95	3	j	int
    //   49	127	4	k	int
    //   1	139	5	localObject1	Object
    //   159	5	5	localObject2	Object
    //   24	63	6	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   3	59	122	java/lang/Exception
    //   129	133	135	java/io/IOException
    //   3	59	138	finally
    //   116	120	152	java/io/IOException
    //   146	150	155	java/io/IOException
    //   61	84	159	finally
    //   84	96	159	finally
    //   104	116	159	finally
    //   61	84	169	java/lang/Exception
    //   84	96	169	java/lang/Exception
    //   104	116	169	java/lang/Exception
  }
  
  private static String d(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new PKCS8EncodedKeySpec(a.a(paramString2));
      paramString2 = KeyFactory.getInstance("RSA").generatePrivate(paramString2);
      Signature localSignature = Signature.getInstance("SHA1WithRSA");
      localSignature.initSign(paramString2);
      localSignature.update(paramString1.getBytes("utf-8"));
      paramString1 = a.a(localSignature.sign());
      return paramString1;
    }
    catch (Exception paramString1) {}
    return null;
  }
}
