package com.alipay.a.a;

import a.b.a.c;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Map;
import java.util.TreeMap;

public final class g
  implements i, j
{
  public g() {}
  
  public final Object a(Object paramObject)
  {
    TreeMap localTreeMap = new TreeMap();
    Class localClass = paramObject.getClass();
    for (Field[] arrayOfField = localClass.getDeclaredFields(); !localClass.equals(Object.class); arrayOfField = localClass.getDeclaredFields())
    {
      if ((arrayOfField != null) && (arrayOfField.length > 0))
      {
        int j = arrayOfField.length;
        int i = 0;
        if (i < j)
        {
          Field localField = arrayOfField[i];
          Object localObject;
          if ((localField == null) || (paramObject == null)) {
            localObject = null;
          }
          for (;;)
          {
            if (localObject != null) {
              localTreeMap.put(localField.getName(), localObject);
            }
            i += 1;
            break;
            if ("this$0".equals(localField.getName()))
            {
              localObject = null;
            }
            else
            {
              boolean bool = localField.isAccessible();
              localField.setAccessible(true);
              localObject = localField.get(paramObject);
              if (localObject == null)
              {
                localObject = null;
              }
              else
              {
                localField.setAccessible(bool);
                localObject = f.b(localObject);
              }
            }
          }
        }
      }
      localClass = localClass.getSuperclass();
    }
    return localTreeMap;
  }
  
  public final Object a(Object paramObject, Type paramType)
  {
    if (!paramObject.getClass().equals(c.class))
    {
      paramType = null;
      return paramType;
    }
    c localC = (c)paramObject;
    paramObject = (Class)paramType;
    Object localObject1 = paramObject.newInstance();
    for (;;)
    {
      paramType = localObject1;
      if (paramObject.equals(Object.class)) {
        break;
      }
      paramType = paramObject.getDeclaredFields();
      if ((paramType != null) && (paramType.length > 0))
      {
        int j = paramType.length;
        int i = 0;
        while (i < j)
        {
          Object localObject2 = paramType[i];
          String str = localObject2.getName();
          Type localType = localObject2.getGenericType();
          if (localC.b(str))
          {
            localObject2.setAccessible(true);
            localObject2.set(localObject1, e.a(localC.a(str), localType));
          }
          i += 1;
        }
      }
      paramObject = paramObject.getSuperclass();
    }
  }
  
  public final boolean a(Class paramClass)
  {
    return true;
  }
}
