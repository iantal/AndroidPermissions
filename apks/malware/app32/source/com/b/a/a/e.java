package com.b.a.a;

import android.util.Log;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.UnknownHostException;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.protocol.HttpContext;

class e
  implements Runnable
{
  private final AbstractHttpClient a;
  private final HttpContext b;
  private final HttpUriRequest c;
  private final n d;
  private int e;
  
  public e(AbstractHttpClient paramAbstractHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, n paramN)
  {
    this.a = paramAbstractHttpClient;
    this.b = paramHttpContext;
    this.c = paramHttpUriRequest;
    this.d = paramN;
  }
  
  private void a()
  {
    if (!Thread.currentThread().isInterrupted())
    {
      if (this.c.getURI().getScheme() == null) {
        throw new MalformedURLException("No valid URI scheme was provided");
      }
      HttpResponse localHttpResponse = this.a.execute(this.c, this.b);
      if ((!Thread.currentThread().isInterrupted()) && (this.d != null)) {
        this.d.sendResponseMessage(localHttpResponse);
      }
    }
  }
  
  private void b()
  {
    Object localObject = null;
    HttpRequestRetryHandler localHttpRequestRetryHandler = this.a.getHttpRequestRetryHandler();
    int j = 1;
    if (j != 0) {}
    label287:
    for (;;)
    {
      try
      {
        a();
        return;
      }
      catch (UnknownHostException localUnknownHostException)
      {
        IOException localIOException1 = new IOException("UnknownHostException exception: " + localUnknownHostException.getMessage());
        if (this.e > 0)
        {
          i = this.e + 1;
          this.e = i;
          if (localHttpRequestRetryHandler.retryRequest(localIOException1, i, this.b))
          {
            bool = true;
            break label287;
            localObject = localIOException1;
            j = bool;
            if (!bool) {
              break;
            }
            localObject = localIOException1;
            j = bool;
            if (this.d == null) {
              break;
            }
            this.d.sendRetryMessage();
            localObject = localIOException1;
            j = bool;
            break;
          }
        }
      }
      catch (Exception localException)
      {
        Log.e("AsyncHttpRequest", "Unhandled exception origin cause", localException);
        localObject = new IOException("Unhandled exception: " + localException.getMessage());
        throw ((Throwable)localObject);
        bool = false;
      }
      catch (NullPointerException localNullPointerException)
      {
        IOException localIOException2 = new IOException("NPE in HttpClient: " + localNullPointerException.getMessage());
        i = this.e + 1;
        this.e = i;
        bool = localHttpRequestRetryHandler.retryRequest(localIOException2, i, this.b);
      }
      catch (IOException localIOException3)
      {
        int i = this.e + 1;
        this.e = i;
        boolean bool = localHttpRequestRetryHandler.retryRequest(localIOException3, i, this.b);
      }
    }
  }
  
  public void run()
  {
    if (this.d != null) {
      this.d.sendStartMessage();
    }
    try
    {
      b();
      if (this.d != null) {
        this.d.sendFinishMessage();
      }
      return;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        if (this.d != null) {
          this.d.sendFailureMessage(0, null, null, localIOException);
        }
      }
    }
  }
}
