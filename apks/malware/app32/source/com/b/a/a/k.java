package com.b.a.a;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;

public class k
{
  protected boolean a = false;
  protected ConcurrentHashMap b;
  protected ConcurrentHashMap c;
  protected ConcurrentHashMap d;
  protected ConcurrentHashMap e;
  
  public k()
  {
    this((Map)null);
  }
  
  public k(Map paramMap)
  {
    d();
    if (paramMap != null)
    {
      paramMap = paramMap.entrySet().iterator();
      while (paramMap.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramMap.next();
        a((String)localEntry.getKey(), (String)localEntry.getValue());
      }
    }
  }
  
  private List a(String paramString, Object paramObject)
  {
    LinkedList localLinkedList = new LinkedList();
    Object localObject1;
    if ((paramObject instanceof Map))
    {
      localObject1 = (Map)paramObject;
      paramObject = new ArrayList(((Map)localObject1).keySet());
      Collections.sort(paramObject);
      Iterator localIterator = paramObject.iterator();
      Object localObject2;
      do
      {
        if (!localIterator.hasNext()) {
          break;
        }
        paramObject = (String)localIterator.next();
        localObject2 = ((Map)localObject1).get(paramObject);
      } while (localObject2 == null);
      if (paramString == null) {}
      for (;;)
      {
        localLinkedList.addAll(a(paramObject, localObject2));
        break;
        paramObject = String.format("%s[%s]", new Object[] { paramString, paramObject });
      }
    }
    if ((paramObject instanceof List))
    {
      paramObject = ((List)paramObject).iterator();
      while (paramObject.hasNext())
      {
        localObject1 = paramObject.next();
        localLinkedList.addAll(a(String.format("%s[]", new Object[] { paramString }), localObject1));
      }
    }
    if ((paramObject instanceof Object[]))
    {
      paramObject = (Object[])paramObject;
      int j = paramObject.length;
      int i = 0;
      while (i < j)
      {
        localObject1 = paramObject[i];
        localLinkedList.addAll(a(String.format("%s[]", new Object[] { paramString }), localObject1));
        i += 1;
      }
    }
    if ((paramObject instanceof Set))
    {
      paramObject = ((Set)paramObject).iterator();
      while (paramObject.hasNext()) {
        localLinkedList.addAll(a(paramString, paramObject.next()));
      }
    }
    if ((paramObject instanceof String)) {
      localLinkedList.add(new BasicNameValuePair(paramString, (String)paramObject));
    }
    return localLinkedList;
  }
  
  private HttpEntity b(n paramN)
  {
    paramN = new p(paramN);
    paramN.a(this.a);
    Iterator localIterator = this.b.entrySet().iterator();
    Object localObject1;
    while (localIterator.hasNext())
    {
      localObject1 = (Map.Entry)localIterator.next();
      paramN.a((String)((Map.Entry)localObject1).getKey(), (String)((Map.Entry)localObject1).getValue());
    }
    localIterator = a(null, this.e).iterator();
    while (localIterator.hasNext())
    {
      localObject1 = (BasicNameValuePair)localIterator.next();
      paramN.a(((BasicNameValuePair)localObject1).getName(), ((BasicNameValuePair)localObject1).getValue());
    }
    localIterator = this.c.entrySet().iterator();
    Object localObject2;
    while (localIterator.hasNext())
    {
      localObject1 = (Map.Entry)localIterator.next();
      localObject2 = (m)((Map.Entry)localObject1).getValue();
      if (((m)localObject2).a != null) {
        paramN.a((String)((Map.Entry)localObject1).getKey(), ((m)localObject2).b, ((m)localObject2).a, ((m)localObject2).c);
      }
    }
    localIterator = this.d.entrySet().iterator();
    while (localIterator.hasNext())
    {
      localObject1 = (Map.Entry)localIterator.next();
      localObject2 = (l)((Map.Entry)localObject1).getValue();
      paramN.a((String)((Map.Entry)localObject1).getKey(), ((l)localObject2).a, ((l)localObject2).b);
    }
    return paramN;
  }
  
  private HttpEntity c()
  {
    try
    {
      UrlEncodedFormEntity localUrlEncodedFormEntity = new UrlEncodedFormEntity(a(), "UTF-8");
      return localUrlEncodedFormEntity;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException) {}
    return null;
  }
  
  private void d()
  {
    this.b = new ConcurrentHashMap();
    this.c = new ConcurrentHashMap();
    this.d = new ConcurrentHashMap();
    this.e = new ConcurrentHashMap();
  }
  
  protected List a()
  {
    LinkedList localLinkedList = new LinkedList();
    Iterator localIterator = this.b.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localLinkedList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    localLinkedList.addAll(a(null, this.e));
    return localLinkedList;
  }
  
  public HttpEntity a(n paramN)
  {
    if ((this.c.isEmpty()) && (this.d.isEmpty())) {
      return c();
    }
    return b(paramN);
  }
  
  public void a(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      this.b.put(paramString1, paramString2);
    }
  }
  
  protected String b()
  {
    return URLEncodedUtils.format(a(), "UTF-8");
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = this.b.entrySet().iterator();
    Object localObject;
    while (localIterator.hasNext())
    {
      localObject = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)((Map.Entry)localObject).getKey());
      localStringBuilder.append("=");
      localStringBuilder.append((String)((Map.Entry)localObject).getValue());
    }
    localIterator = this.c.entrySet().iterator();
    while (localIterator.hasNext())
    {
      localObject = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)((Map.Entry)localObject).getKey());
      localStringBuilder.append("=");
      localStringBuilder.append("STREAM");
    }
    localIterator = this.d.entrySet().iterator();
    while (localIterator.hasNext())
    {
      localObject = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)((Map.Entry)localObject).getKey());
      localStringBuilder.append("=");
      localStringBuilder.append("FILE");
    }
    localIterator = a(null, this.e).iterator();
    while (localIterator.hasNext())
    {
      localObject = (BasicNameValuePair)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append(((BasicNameValuePair)localObject).getName());
      localStringBuilder.append("=");
      localStringBuilder.append(((BasicNameValuePair)localObject).getValue());
    }
    return localStringBuilder.toString();
  }
}
