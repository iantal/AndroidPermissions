package com.b.a.a;

import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.message.BasicHeader;

class p
  implements HttpEntity
{
  private static final byte[] a = "\r\n".getBytes();
  private static final byte[] b = "Content-Transfer-Encoding: binary\r\n".getBytes();
  private static final char[] c = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
  private String d;
  private byte[] e;
  private byte[] f;
  private boolean g = false;
  private List h = new ArrayList();
  private ByteArrayOutputStream i = new ByteArrayOutputStream();
  private n j;
  private int k;
  private int l;
  
  public p(n paramN)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Random localRandom = new Random();
    while (m < 30)
    {
      localStringBuilder.append(c[localRandom.nextInt(c.length)]);
      m += 1;
    }
    this.d = localStringBuilder.toString();
    this.e = ("--" + this.d + "\r\n").getBytes();
    this.f = ("--" + this.d + "--\r\n").getBytes();
    this.j = paramN;
  }
  
  private void a(int paramInt)
  {
    this.k += paramInt;
    this.j.sendProgressMessage(this.k, this.l);
  }
  
  private byte[] a(String paramString)
  {
    return ("Content-Type: " + paramString + "\r\n").getBytes();
  }
  
  private byte[] b(String paramString)
  {
    return ("Content-Disposition: form-data; name=\"" + paramString + "\"\r\n").getBytes();
  }
  
  private byte[] b(String paramString1, String paramString2)
  {
    return ("Content-Disposition: form-data; name=\"" + paramString1 + "\"; filename=\"" + paramString2 + "\"\r\n").getBytes();
  }
  
  public void a(String paramString1, File paramFile, String paramString2)
  {
    String str = paramString2;
    if (paramString2 == null) {
      str = "application/octet-stream";
    }
    this.h.add(new q(this, paramString1, paramFile, str));
  }
  
  public void a(String paramString1, String paramString2)
  {
    a(paramString1, paramString2, "text/plain; charset=UTF-8");
  }
  
  public void a(String paramString1, String paramString2, InputStream paramInputStream, String paramString3)
  {
    String str = paramString3;
    if (paramString3 == null) {
      str = "application/octet-stream";
    }
    this.i.write(this.e);
    this.i.write(b(paramString1, paramString2));
    this.i.write(a(str));
    this.i.write(b);
    this.i.write(a);
    paramString1 = new byte['á€€'];
    for (;;)
    {
      int m = paramInputStream.read(paramString1);
      if (m == -1) {
        break;
      }
      this.i.write(paramString1, 0, m);
    }
    this.i.write(a);
    this.i.flush();
    try
    {
      paramInputStream.close();
      return;
    }
    catch (IOException paramString1)
    {
      Log.w("SimpleMultipartEntity", "Cannot close input stream", paramString1);
    }
  }
  
  public void a(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      this.i.write(this.e);
      this.i.write(b(paramString1));
      this.i.write(a(paramString3));
      this.i.write(a);
      this.i.write(paramString2.getBytes());
      this.i.write(a);
      return;
    }
    catch (IOException paramString1)
    {
      Log.e("SimpleMultipartEntity", "addPart ByteArrayOutputStream exception", paramString1);
    }
  }
  
  public void a(boolean paramBoolean)
  {
    this.g = paramBoolean;
  }
  
  public void consumeContent()
  {
    if (isStreaming()) {
      throw new UnsupportedOperationException("Streaming entity does not implement #consumeContent()");
    }
  }
  
  public InputStream getContent()
  {
    throw new UnsupportedOperationException("getContent() is not supported. Use writeTo() instead.");
  }
  
  public Header getContentEncoding()
  {
    return null;
  }
  
  public long getContentLength()
  {
    long l1 = this.i.size();
    Iterator localIterator = this.h.iterator();
    while (localIterator.hasNext())
    {
      long l2 = ((q)localIterator.next()).a();
      if (l2 < 0L) {
        return -1L;
      }
      l1 += l2;
    }
    return l1 + this.f.length;
  }
  
  public Header getContentType()
  {
    return new BasicHeader("Content-Type", "multipart/form-data; boundary=" + this.d);
  }
  
  public boolean isChunked()
  {
    return false;
  }
  
  public boolean isRepeatable()
  {
    return this.g;
  }
  
  public boolean isStreaming()
  {
    return false;
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    this.k = 0;
    this.l = ((int)getContentLength());
    this.i.writeTo(paramOutputStream);
    a(this.i.size());
    Iterator localIterator = this.h.iterator();
    while (localIterator.hasNext()) {
      ((q)localIterator.next()).a(paramOutputStream);
    }
    paramOutputStream.write(this.f);
    a(this.f.length);
  }
}
