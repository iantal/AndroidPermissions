package com.a.a;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

public class f
{
  public static HashMap a = new HashMap();
  
  public static InputStream a(File paramFile)
  {
    if (paramFile == null) {}
    while ((paramFile.isDirectory()) || (!paramFile.exists())) {
      return null;
    }
    try
    {
      paramFile = new FileInputStream(paramFile);
      return paramFile;
    }
    catch (FileNotFoundException paramFile)
    {
      paramFile.printStackTrace();
    }
    return null;
  }
  
  private static Object a(String paramString)
  {
    try
    {
      Object localObject2 = a.get(paramString);
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject1 = new Object();
        a.put(paramString, localObject1);
      }
      return localObject1;
    }
    finally {}
  }
  
  public static boolean a(File paramFile1, File paramFile2)
  {
    if ((paramFile1.exists()) && (paramFile1.isFile())) {
      return a(a(paramFile1), paramFile2, paramFile1.length(), null);
    }
    return false;
  }
  
  public static boolean a(InputStream paramInputStream, File paramFile, long paramLong, c paramC)
  {
    return a(paramInputStream, paramFile, paramLong, paramC, false);
  }
  
  public static boolean a(InputStream paramInputStream, File paramFile, long paramLong, c paramC, boolean paramBoolean)
  {
    return a(paramInputStream, paramFile, paramLong, paramC, paramBoolean, 0L);
  }
  
  public static boolean a(InputStream paramInputStream, File paramFile, long paramLong1, c paramC, boolean paramBoolean, long paramLong2)
  {
    int i;
    if (paramInputStream == null)
    {
      i = 1;
      if (paramFile != null) {
        break label30;
      }
    }
    label30:
    for (int j = 1;; j = 0)
    {
      if ((j | i) == 0) {
        break label36;
      }
      return false;
      i = 0;
      break;
    }
    label36:
    if (paramC != null) {
      i = 1;
    }
    for (;;)
    {
      try
      {
        ??? = paramFile.toString();
        paramFile = new FileOutputStream(paramFile, true);
        byte[] arrayOfByte = new byte['Ѐ'];
        long l = paramLong1 + paramLong2;
        synchronized (a((String)???))
        {
          j = paramInputStream.read(arrayOfByte);
          if (j == -1)
          {
            paramFile.close();
            if (!paramBoolean) {
              paramInputStream.close();
            }
            return true;
          }
          paramFile.write(arrayOfByte, 0, j);
          paramFile.flush();
          paramLong1 = paramLong2 + j;
          paramLong2 = paramLong1;
          if (i == 0) {
            continue;
          }
          paramLong2 = paramLong1;
          if (l < paramLong1) {
            continue;
          }
          paramLong2 = paramLong1;
          if (l <= 0L) {
            continue;
          }
          paramC.a(paramLong1, l);
          paramLong2 = paramLong1;
          if (!paramC.a()) {
            continue;
          }
          paramFile.close();
          paramInputStream.close();
          return false;
        }
        i = 0;
      }
      catch (FileNotFoundException paramInputStream)
      {
        paramInputStream.printStackTrace();
        return false;
      }
      catch (IOException paramInputStream)
      {
        paramInputStream.printStackTrace();
      }
    }
  }
  
  public static boolean a(byte[] paramArrayOfByte, File paramFile)
  {
    return a(paramArrayOfByte, paramFile, false);
  }
  
  public static boolean a(byte[] paramArrayOfByte, File paramFile, boolean paramBoolean)
  {
    int i;
    if (paramArrayOfByte == null)
    {
      i = 1;
      if (paramFile != null) {
        break label27;
      }
    }
    label27:
    for (int j = 1;; j = 0)
    {
      if ((j | i) == 0) {
        break label33;
      }
      return false;
      i = 0;
      break;
    }
    try
    {
      label33:
      synchronized (a(paramFile.toString()))
      {
        paramFile = new FileOutputStream(paramFile, paramBoolean);
        paramFile.write(paramArrayOfByte);
        paramFile.close();
        return true;
      }
      return false;
    }
    catch (FileNotFoundException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
      return false;
    }
    catch (IOException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
  }
  
  public static byte[] a(File paramFile, c paramC)
  {
    int i = 0;
    InputStream localInputStream = a(paramFile);
    if (localInputStream == null) {
      return null;
    }
    if (paramC != null) {
      i = 1;
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte['Ѐ'];
    long l3 = paramFile.length();
    long l1 = 0L;
    try
    {
      for (;;)
      {
        int j = localInputStream.read(arrayOfByte);
        if (j == -1) {
          return localByteArrayOutputStream.toByteArray();
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, j);
        long l2 = l1 + j;
        localByteArrayOutputStream.flush();
        l1 = l2;
        if (i != 0)
        {
          l1 = l2;
          if (l3 >= l2)
          {
            paramC.a(l2, l3);
            l1 = l2;
          }
        }
      }
      return null;
    }
    catch (IOException paramFile)
    {
      paramFile.printStackTrace();
    }
  }
}
