package com.a.a;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.TextView;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class g
{
  public static TextView a;
  private static boolean b = true;
  private static final Calendar c = Calendar.getInstance();
  private static Handler d = new h(Looper.getMainLooper());
  
  private static void a()
  {
    c.clear();
    c.setTime(new Date(System.currentTimeMillis()));
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public static void a(Context paramContext, String paramString1, String paramString2, String paramString3, int paramInt)
  {
    for (;;)
    {
      try
      {
        if (!b) {
          break label203;
        }
        String str = paramString1;
        if (paramString1 == null) {
          str = "default.txt";
        }
        paramString1 = new StringBuffer();
        paramString1.append("").append(paramString2).append("").append(paramString3);
        if (paramContext == null) {
          break label204;
        }
        paramContext = paramContext.getApplicationContext().getApplicationInfo().packageName;
        paramString1.append("_").append(paramContext);
        a();
        paramContext = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss").format(c.getTime());
        paramString1.append("_").append(paramContext).append("\r\n");
        paramContext = paramString1.toString();
        switch (paramInt)
        {
        case 0: 
          if (b())
          {
            paramString1 = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);
            if (!paramString1.exists()) {
              paramString1.mkdir();
            }
            a(new File(paramString1, str), paramContext);
            return;
          }
          break;
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
      System.out.println("sdcard can't write");
      return;
      Log.i("Zlog", paramContext);
      return;
      label203:
      return;
      label204:
      paramContext = "";
    }
  }
  
  private static void a(File paramFile)
  {
    try
    {
      BufferedReader localBufferedReader = new BufferedReader(new FileReader(paramFile));
      int i = 0;
      ByteArrayOutputStream localByteArrayOutputStream;
      if (i >= 100) {
        localByteArrayOutputStream = new ByteArrayOutputStream();
      }
      for (;;)
      {
        if (!localBufferedReader.ready()) {}
        String str;
        do
        {
          f.a(localByteArrayOutputStream.toByteArray(), paramFile);
          localByteArrayOutputStream.close();
          localBufferedReader.close();
          return;
          localBufferedReader.readLine();
          i += 1;
          break;
          str = localBufferedReader.readLine();
        } while (str == null);
        localByteArrayOutputStream.write(str.getBytes());
        localByteArrayOutputStream.write("\r\n".getBytes());
      }
      return;
    }
    catch (FileNotFoundException paramFile)
    {
      paramFile.printStackTrace();
      return;
    }
    catch (IOException paramFile)
    {
      paramFile.printStackTrace();
    }
  }
  
  private static void a(File paramFile, String paramString)
  {
    if (paramFile.length() > 102400L) {
      a(paramFile);
    }
    f.a(paramString.getBytes(), paramFile, true);
  }
  
  public static void a(String paramString)
  {
    a(null, "syso", "->", paramString, 1);
  }
  
  private static boolean b()
  {
    return "mounted".equals(Environment.getExternalStorageState());
  }
}
