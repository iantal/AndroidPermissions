package com.tencent.beacon.scheduler.a;

import android.content.Context;
import android.text.TextUtils;
import com.tencent.beacon.scheduler.AccessIP;
import com.tencent.beacon.scheduler.a.b.b.a;
import com.tencent.beacon.scheduler.b.e;
import com.tencent.beacon.scheduler.b.f;
import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.zip.Deflater;

public class b
{
  public b() {}
  
  public static String a(com.tencent.beacon.scheduler.c.d paramD)
  {
    localStringBuilder = new StringBuilder();
    Object localObject1 = new StringBuilder();
    long l = System.currentTimeMillis();
    Object localObject2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    Object localObject3 = Calendar.getInstance();
    ((Calendar)localObject3).setTimeInMillis(l);
    localStringBuilder.append(((SimpleDateFormat)localObject2).format(((Calendar)localObject3).getTime()) + "|");
    localStringBuilder.append("INFO|");
    localStringBuilder.append(g.c() + "|");
    localObject3 = com.tencent.beacon.scheduler.c.b.i();
    if (localObject3 != null) {
      localStringBuilder.append(com.tencent.beacon.scheduler.c.b.i().c() + "|");
    }
    for (;;)
    {
      localStringBuilder.append("beacon|");
      localStringBuilder.append("1.8.1|");
      localObject1 = paramD.e();
      try
      {
        localObject2 = URLEncoder.encode(paramD.e(), "utf-8");
        localObject1 = localObject2;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        for (;;)
        {
          localUnsupportedEncodingException.printStackTrace();
          continue;
          localStringBuilder.append("unknow\n");
        }
      }
      localStringBuilder.append((String)localObject1 + "|");
      localStringBuilder.append("qua|");
      localStringBuilder.append("upload_ip|");
      localStringBuilder.append("unknown|");
      localStringBuilder.append(paramD.d() + "|");
      localStringBuilder.append(paramD.g() + "|");
      localStringBuilder.append(paramD.a() + "|");
      localStringBuilder.append(paramD.c() + "|");
      localStringBuilder.append(paramD.b() + "|");
      localObject1 = a(paramD.h());
      localStringBuilder.append((String)localObject1 + "|");
      localObject1 = new StringBuilder();
      l = paramD.f();
      paramD = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      localObject2 = Calendar.getInstance();
      ((Calendar)localObject2).setTimeInMillis(l);
      localStringBuilder.append(paramD.format(((Calendar)localObject2).getTime()) + "|");
      localStringBuilder.append("upload_time|");
      if (localObject3 == null) {
        break;
      }
      localStringBuilder.append(((com.tencent.beacon.scheduler.c.b)localObject3).b() + "\n");
      return localStringBuilder.toString();
      localStringBuilder.append("unknow|");
    }
  }
  
  public static String a(String paramString)
  {
    String str2 = "";
    String str1 = str2;
    if (paramString != null)
    {
      str1 = str2;
      if (!"".equals(paramString)) {
        str1 = paramString.replace('\n', ' ').replace('\r', ' ').replace("|", "%7C").replace("&", "%26").replace("=", "%3D");
      }
    }
    return str1;
  }
  
  public static String a(Map paramMap)
  {
    if (paramMap == null) {
      return "";
    }
    Object localObject = paramMap.keySet();
    if (localObject == null) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer();
    localObject = ((Set)localObject).iterator();
    while (((Iterator)localObject).hasNext())
    {
      String str = (String)((Iterator)localObject).next();
      localStringBuffer.append("&");
      localStringBuffer.append(str);
      localStringBuffer.append("=");
      localStringBuffer.append((String)paramMap.get(str));
    }
    paramMap = localStringBuffer.substring(1);
    localStringBuffer.setLength(0);
    return paramMap;
  }
  
  public static Socket a(String paramString, int[] paramArrayOfInt, int paramInt1, int paramInt2, ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    com.tencent.beacon.scheduler.e.c.a("ParallelResolver", "getFastSocketByDnsAndDefault start. domain:" + paramString + ",ports:" + paramArrayOfInt + ",timeout:" + paramInt1 + ",parallelNum:" + paramInt2 + ",defaultTryList:" + paramArrayList1.size());
    paramString = new com.tencent.beacon.scheduler.b.d(paramString, paramArrayOfInt, paramInt1, paramInt2);
    com.tencent.beacon.scheduler.b.g.a().a(paramString);
    paramArrayOfInt = new f(paramArrayList1, paramInt1);
    com.tencent.beacon.scheduler.b.g.a().a(paramArrayOfInt);
    while ((!paramString.e) || (!paramArrayOfInt.e))
    {
      if ((paramString.e) && (paramString.b) && (paramString.a != null))
      {
        paramArrayList2.addAll(paramString.a);
        if ((paramString.c != null) && (paramString.c.isConnected())) {
          return paramString.c;
        }
      }
      if ((paramArrayOfInt.e) && (paramArrayOfInt.a != null) && (paramArrayOfInt.a.isConnected())) {
        return paramArrayOfInt.a;
      }
    }
    if ((paramString.e) && (paramString.b) && (paramString.a != null))
    {
      paramArrayList2.addAll(paramString.a);
      if ((paramString.c != null) && (paramString.c.isConnected())) {
        return paramString.c;
      }
    }
    if ((paramArrayOfInt.e) && (paramArrayOfInt.a != null) && (paramArrayOfInt.a.isConnected())) {
      return paramArrayOfInt.a;
    }
    return null;
  }
  
  public static Socket a(ArrayList paramArrayList, int paramInt)
  {
    int j = 0;
    if ((paramArrayList == null) || (paramArrayList.size() <= 0)) {
      return null;
    }
    int k = paramArrayList.size();
    com.tencent.beacon.scheduler.b.c[] arrayOfC = new com.tencent.beacon.scheduler.b.c[k];
    int i = 0;
    while (i < k)
    {
      arrayOfC[i] = new com.tencent.beacon.scheduler.b.c((AccessIP)paramArrayList.get(i), paramInt);
      com.tencent.beacon.scheduler.b.g.a().a(arrayOfC[i]);
      i += 1;
    }
    ArrayList localArrayList1 = null;
    paramInt = 0;
    if (paramInt == 0)
    {
      paramInt = 1;
      i = 0;
      label87:
      paramArrayList = localArrayList1;
      if (i < k)
      {
        if ((arrayOfC[i].e) && (arrayOfC[i].a != null) && (arrayOfC[i].a.isConnected())) {
          paramArrayList = arrayOfC[i].a;
        }
      }
      else
      {
        if (paramArrayList == null) {
          break label250;
        }
        paramInt = j;
        label143:
        if (paramInt >= k) {
          break label226;
        }
        if (paramInt != i)
        {
          arrayOfC[paramInt].b = true;
          if ((!arrayOfC[paramInt].e) || (arrayOfC[paramInt].a == null)) {}
        }
      }
    }
    for (;;)
    {
      try
      {
        arrayOfC[paramInt].a.close();
        arrayOfC[paramInt].a = null;
        paramInt += 1;
        break label143;
        if (!arrayOfC[i].e) {
          paramInt = 0;
        }
        i += 1;
        break label87;
        label226:
        com.tencent.beacon.scheduler.e.c.a("ParallelResolver", "getFastSocket end. socket:" + paramArrayList);
        return paramArrayList;
        try
        {
          label250:
          Thread.sleep(50L);
          localArrayList1 = paramArrayList;
        }
        catch (Exception localException1)
        {
          ArrayList localArrayList2 = paramArrayList;
        }
      }
      catch (Exception localException2)
      {
        continue;
      }
      paramArrayList = localException2;
    }
  }
  
  public static ArrayList a(String paramString, int[] paramArrayOfInt, int paramInt)
  {
    com.tencent.beacon.scheduler.e.c.a("ParallelResolver", "getDnsIpList start. domain:" + paramString + ",ports:" + paramArrayOfInt + ",timeout:" + paramInt);
    if ((paramString == null) || (paramString.length() <= 0)) {
      return null;
    }
    com.tencent.beacon.scheduler.b.g localG = com.tencent.beacon.scheduler.b.g.a();
    paramString = new e(paramString, paramArrayOfInt);
    localG.a(paramString);
    int i = paramInt / 50;
    paramInt = 0;
    while ((paramInt < i) && (!paramString.e))
    {
      paramInt += 1;
      try
      {
        Thread.sleep(50L);
      }
      catch (InterruptedException paramArrayOfInt)
      {
        paramArrayOfInt.printStackTrace();
      }
    }
    com.tencent.beacon.scheduler.e.c.a("ParallelResolver", "getDnsIpList end. _dnsIpList:" + paramString.a);
    if (paramString.a != null) {
      com.tencent.beacon.scheduler.e.c.a("ParallelResolver", "getDnsIpList. _dnsIpList size:" + paramString.a.size());
    }
    return paramString.a;
  }
  
  public static ArrayList a(InetAddress[] paramArrayOfInetAddress, int[] paramArrayOfInt)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (paramArrayOfInetAddress != null)
    {
      localObject1 = localObject2;
      if (paramArrayOfInetAddress.length > 0)
      {
        localObject1 = new ArrayList(paramArrayOfInetAddress.length * paramArrayOfInt.length);
        int i = 0;
        while (i < paramArrayOfInetAddress.length)
        {
          int j = 0;
          while (j < paramArrayOfInt.length)
          {
            ((ArrayList)localObject1).add(new AccessIP(paramArrayOfInetAddress[i].getHostAddress(), paramArrayOfInt[j]));
            j += 1;
          }
          i += 1;
        }
      }
    }
    return localObject1;
  }
  
  public static HashMap a(b.a paramA)
  {
    HashMap localHashMap = new HashMap();
    Object localObject1 = com.tencent.beacon.scheduler.c.b.i();
    localHashMap.put("A1", g.f());
    localHashMap.put("A2", ((com.tencent.beacon.scheduler.c.b)localObject1).d());
    localHashMap.put("A4", ((com.tencent.beacon.scheduler.c.b)localObject1).f());
    localHashMap.put("A6", ((com.tencent.beacon.scheduler.c.b)localObject1).g());
    localHashMap.put("A7", ((com.tencent.beacon.scheduler.c.b)localObject1).h());
    localHashMap.put("A23", g.h());
    StringBuilder localStringBuilder = new StringBuilder();
    Object localObject2 = g.b();
    localObject1 = "null";
    if (com.tencent.beacon.scheduler.c.c.a((Context)localObject2) != null)
    {
      localObject2 = com.tencent.beacon.scheduler.c.c.f((Context)localObject2);
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = "null";
      }
    }
    localHashMap.put("A33", (String)localObject1);
    localHashMap.put("B50", paramA.a);
    localHashMap.put("B51", a(paramA.b));
    localHashMap.put("B52", paramA.c);
    localHashMap.put("B53", a(paramA.d));
    localHashMap.put("B54", paramA.e);
    localHashMap.put("B55", paramA.f);
    localHashMap.put("B56", paramA.g);
    if (!TextUtils.isEmpty(paramA.h)) {
      localHashMap.put("B57", a(paramA.h));
    }
    if ((!TextUtils.isEmpty(paramA.i)) && (!paramA.i.equals("null"))) {
      localHashMap.put("B58", a(paramA.i));
    }
    localHashMap.put("B59", paramA.j);
    localHashMap.put("B60", paramA.k);
    localHashMap.put("B61", paramA.l);
    localHashMap.put("B62", paramA.m);
    return localHashMap;
  }
  
  public static byte[] a(byte[] paramArrayOfByte)
  {
    if ((paramArrayOfByte == null) || (paramArrayOfByte.length == 0)) {
      return paramArrayOfByte;
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    Deflater localDeflater = new Deflater();
    localDeflater.setInput(paramArrayOfByte);
    localDeflater.finish();
    paramArrayOfByte = new byte['Ā'];
    while (!localDeflater.finished()) {
      localByteArrayOutputStream.write(paramArrayOfByte, 0, localDeflater.deflate(paramArrayOfByte));
    }
    localDeflater.finish();
    return localByteArrayOutputStream.toByteArray();
  }
  
  public static com.tencent.beacon.scheduler.c.d b(String paramString)
  {
    if (paramString == null) {}
    com.tencent.beacon.scheduler.c.b localB;
    do
    {
      return null;
      localB = com.tencent.beacon.scheduler.c.b.i();
    } while (localB == null);
    long l = System.currentTimeMillis();
    HashMap localHashMap = new HashMap();
    localHashMap.put("A23", c(localB.e()));
    com.tencent.beacon.scheduler.c.d localD = new com.tencent.beacon.scheduler.c.d();
    localD.c(paramString);
    localD.a(l);
    localD.a(localHashMap);
    localD.b(localB.a());
    localD.a("");
    return localD;
  }
  
  public static String b(byte[] paramArrayOfByte)
  {
    Object localObject;
    if (paramArrayOfByte == null)
    {
      localObject = "";
      return localObject;
    }
    String str = "";
    int i = 0;
    for (;;)
    {
      localObject = str;
      if (i >= paramArrayOfByte.length) {
        break;
      }
      str = str + Integer.toHexString(paramArrayOfByte[i] >> 4 & 0xF);
      str = str + Integer.toHexString(paramArrayOfByte[i] & 0xF);
      i += 1;
    }
  }
  
  private static String c(String paramString)
  {
    String str2 = "";
    String str1 = str2;
    if (paramString != null)
    {
      str1 = str2;
      if ("".equals(paramString)) {}
    }
    try
    {
      str1 = URLEncoder.encode(paramString, "utf-8");
      return str1;
    }
    catch (UnsupportedEncodingException paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
}
