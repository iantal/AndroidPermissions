package com.tencent.beacon.scheduler.b;

import com.tencent.beacon.scheduler.a.b;
import com.tencent.beacon.scheduler.e.c;
import java.net.Socket;
import java.util.ArrayList;

public final class d
  extends g.a
{
  public static int d = -1;
  public ArrayList a;
  public boolean b = false;
  public Socket c;
  private int f;
  private String g;
  private int[] h;
  private int i;
  private int j;
  
  public d(String paramString, int[] paramArrayOfInt, int paramInt1, int paramInt2)
  {
    this.g = new String(paramString);
    this.h = paramArrayOfInt;
    this.i = paramInt1;
    this.j = paramInt2;
  }
  
  public final void run()
  {
    c.c("DnsIpListRunnable", "Thread:" + Thread.currentThread().getName() + " isDaemon:" + Thread.currentThread().isDaemon());
    c.a("DnsIpListRunnable", "DnsIpListRunnable run start. _domain:" + this.g + ",_ports" + this.h + ",_timeout" + this.i + ",_parallelNum:" + this.j);
    long l1 = System.currentTimeMillis();
    this.a = b.a(this.g, this.h, this.i);
    long l2 = System.currentTimeMillis();
    if ((this.a == null) || (this.a.size() <= 0))
    {
      this.e = true;
      c.a("DnsIpListRunnable", "DnsIpListRunnable run. getDnsIpList fail.");
      return;
    }
    d = (int)(l2 - l1);
    this.f = Math.min(this.j, this.a.size());
    ArrayList localArrayList = new ArrayList(this.f);
    localArrayList.addAll(this.a.subList(0, this.f));
    this.b = true;
    this.c = b.a(localArrayList, this.i);
    this.e = true;
    c.a("DnsIpListRunnable", "DnsIpListRunnable run end. _triedNum:" + this.f + ",_retSk:" + this.c);
  }
}
