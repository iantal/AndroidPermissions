package com.tencent.beacon.scheduler.b;

import com.tencent.beacon.scheduler.AccessIP;
import com.tencent.beacon.scheduler.a.c.a.a;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public final class b
  implements a
{
  private int A = 0;
  private OutputStream B = null;
  private InputStream C = null;
  private int D = -1;
  private int E = -1;
  private AccessIP F;
  private int G = -1;
  private int H = -1;
  private int a = 1;
  private int b = 1;
  private int c = 20000;
  private int d = 20000;
  private int e = 3;
  private ArrayList f = null;
  private int g = 0;
  private boolean h = false;
  private boolean i = false;
  private ArrayList j = null;
  private int k = 0;
  private boolean l = false;
  private boolean m = false;
  private boolean n = false;
  private ArrayList o = new ArrayList();
  private int p = 0;
  private boolean q = false;
  private boolean r = false;
  private String s = "dispatcher.3g.qq.com";
  private int[] t = com.tencent.beacon.scheduler.a.a.b.a;
  private byte[] u;
  private byte[] v;
  private Socket w = null;
  private int x = 0;
  private String y;
  private Exception z;
  
  public b()
  {
    int i1 = com.tencent.beacon.scheduler.a.a.a.a().b.d;
    this.a = i1;
    this.b = i1;
    a.a localA = com.tencent.beacon.scheduler.a.c.b.a().a(this.s);
    if (localA != null)
    {
      ArrayList localArrayList = new ArrayList();
      localArrayList.addAll(localA.c());
      this.f = localArrayList;
    }
    this.j = com.tencent.beacon.scheduler.a.a.a.a().a.c();
    this.g = 0;
    label314:
    long l1;
    if ((this.f == null) || (this.f.size() <= 0))
    {
      bool1 = true;
      this.h = bool1;
      if ((this.f == null) || (this.f.size() <= 0)) {
        break label388;
      }
      bool1 = true;
      this.i = bool1;
      l1 = com.tencent.beacon.scheduler.a.a.a.a().a.b;
      if (l1 > 0L) {
        break label393;
      }
      this.m = true;
      label342:
      this.k = 0;
      if (this.j != null) {
        break label432;
      }
      bool1 = true;
      label356:
      this.l = bool1;
      if ((this.i) || (!this.m)) {
        break label437;
      }
    }
    label388:
    label393:
    label432:
    label437:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      this.n = bool1;
      return;
      bool1 = false;
      break;
      bool1 = false;
      break label314;
      long l2 = System.currentTimeMillis();
      if (l1 + com.tencent.beacon.scheduler.a.a.a.a().b.e * 60 * 1000 >= l2) {
        break label342;
      }
      this.m = true;
      break label342;
      bool1 = false;
      break label356;
    }
  }
  
  private static ArrayList a(ArrayList paramArrayList, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if ((paramArrayList == null) || (paramArrayList.size() <= 0) || (paramInt1 >= paramArrayList.size())) {}
    do
    {
      return null;
      paramInt2 = Math.min(paramInt2, paramArrayList.size() - paramInt1);
    } while (paramInt2 <= 0);
    ArrayList localArrayList = new ArrayList(paramInt2);
    paramArrayList = paramArrayList.subList(paramInt1, paramInt1 + paramInt2);
    if (paramBoolean)
    {
      paramInt1 = 0;
      while (paramInt1 < paramInt2)
      {
        AccessIP localAccessIP = (AccessIP)paramArrayList.get(paramInt1);
        localArrayList.add(new AccessIP(localAccessIP.getIp(), localAccessIP.getPort()));
        paramInt1 += 1;
      }
    }
    localArrayList.addAll(paramArrayList);
    return localArrayList;
  }
  
  /* Error */
  private void j()
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_0
    //   2: getfield 110	com/tencent/beacon/scheduler/b/b:A	I
    //   5: iconst_1
    //   6: iadd
    //   7: putfield 110	com/tencent/beacon/scheduler/b/b:A	I
    //   10: aload_0
    //   11: getfield 71	com/tencent/beacon/scheduler/b/b:h	Z
    //   14: ifne +88 -> 102
    //   17: aload_0
    //   18: getfield 67	com/tencent/beacon/scheduler/b/b:f	Ljava/util/ArrayList;
    //   21: aload_0
    //   22: getfield 69	com/tencent/beacon/scheduler/b/b:g	I
    //   25: aload_0
    //   26: getfield 57	com/tencent/beacon/scheduler/b/b:a	I
    //   29: iconst_1
    //   30: invokestatic 211	com/tencent/beacon/scheduler/b/b:a	(Ljava/util/ArrayList;IIZ)Ljava/util/ArrayList;
    //   33: astore_1
    //   34: aload_1
    //   35: ifnull +37 -> 72
    //   38: aload_1
    //   39: invokevirtual 162	java/util/ArrayList:size	()I
    //   42: ifle +30 -> 72
    //   45: aload_0
    //   46: aload_0
    //   47: getfield 69	com/tencent/beacon/scheduler/b/b:g	I
    //   50: aload_1
    //   51: invokevirtual 162	java/util/ArrayList:size	()I
    //   54: iadd
    //   55: putfield 69	com/tencent/beacon/scheduler/b/b:g	I
    //   58: aload_0
    //   59: getfield 69	com/tencent/beacon/scheduler/b/b:g	I
    //   62: aload_0
    //   63: getfield 67	com/tencent/beacon/scheduler/b/b:f	Ljava/util/ArrayList;
    //   66: invokevirtual 162	java/util/ArrayList:size	()I
    //   69: if_icmplt +8 -> 77
    //   72: aload_0
    //   73: iconst_1
    //   74: putfield 71	com/tencent/beacon/scheduler/b/b:h	Z
    //   77: aload_0
    //   78: aload_1
    //   79: aload_0
    //   80: getfield 61	com/tencent/beacon/scheduler/b/b:c	I
    //   83: invokestatic 216	com/tencent/beacon/scheduler/a/b:a	(Ljava/util/ArrayList;I)Ljava/net/Socket;
    //   86: putfield 106	com/tencent/beacon/scheduler/b/b:w	Ljava/net/Socket;
    //   89: aload_0
    //   90: getfield 94	com/tencent/beacon/scheduler/b/b:r	Z
    //   93: ifne +8 -> 101
    //   96: aload_0
    //   97: iconst_0
    //   98: putfield 116	com/tencent/beacon/scheduler/b/b:D	I
    //   101: return
    //   102: aload_0
    //   103: getfield 83	com/tencent/beacon/scheduler/b/b:n	Z
    //   106: ifne +44 -> 150
    //   109: invokestatic 220	com/tencent/beacon/scheduler/e/b:c	()I
    //   112: iconst_1
    //   113: if_icmpne +20 -> 133
    //   116: aload_0
    //   117: invokespecial 223	com/tencent/beacon/scheduler/b/b:l	()Z
    //   120: ifne -31 -> 89
    //   123: aload_0
    //   124: invokespecial 225	com/tencent/beacon/scheduler/b/b:m	()Z
    //   127: ifne -38 -> 89
    //   130: goto -41 -> 89
    //   133: aload_0
    //   134: invokespecial 225	com/tencent/beacon/scheduler/b/b:m	()Z
    //   137: ifne -48 -> 89
    //   140: aload_0
    //   141: invokespecial 223	com/tencent/beacon/scheduler/b/b:l	()Z
    //   144: ifne -55 -> 89
    //   147: goto -58 -> 89
    //   150: new 85	java/util/ArrayList
    //   153: dup
    //   154: invokespecial 86	java/util/ArrayList:<init>	()V
    //   157: astore_2
    //   158: aload_0
    //   159: getfield 79	com/tencent/beacon/scheduler/b/b:l	Z
    //   162: ifne +393 -> 555
    //   165: aload_2
    //   166: astore_1
    //   167: aload_0
    //   168: getfield 75	com/tencent/beacon/scheduler/b/b:j	Ljava/util/ArrayList;
    //   171: ifnull +86 -> 257
    //   174: aload_2
    //   175: astore_1
    //   176: aload_0
    //   177: getfield 75	com/tencent/beacon/scheduler/b/b:j	Ljava/util/ArrayList;
    //   180: invokevirtual 162	java/util/ArrayList:size	()I
    //   183: ifle +74 -> 257
    //   186: aload_2
    //   187: astore_1
    //   188: aload_0
    //   189: getfield 77	com/tencent/beacon/scheduler/b/b:k	I
    //   192: aload_0
    //   193: getfield 75	com/tencent/beacon/scheduler/b/b:j	Ljava/util/ArrayList;
    //   196: invokevirtual 162	java/util/ArrayList:size	()I
    //   199: if_icmpge +58 -> 257
    //   202: aload_0
    //   203: getfield 75	com/tencent/beacon/scheduler/b/b:j	Ljava/util/ArrayList;
    //   206: aload_0
    //   207: getfield 77	com/tencent/beacon/scheduler/b/b:k	I
    //   210: aload_0
    //   211: getfield 59	com/tencent/beacon/scheduler/b/b:b	I
    //   214: iconst_1
    //   215: invokestatic 211	com/tencent/beacon/scheduler/b/b:a	(Ljava/util/ArrayList;IIZ)Ljava/util/ArrayList;
    //   218: astore_1
    //   219: aload_1
    //   220: ifnull +127 -> 347
    //   223: aload_1
    //   224: invokevirtual 162	java/util/ArrayList:size	()I
    //   227: ifle +120 -> 347
    //   230: aload_0
    //   231: aload_0
    //   232: getfield 77	com/tencent/beacon/scheduler/b/b:k	I
    //   235: aload_1
    //   236: invokevirtual 162	java/util/ArrayList:size	()I
    //   239: iadd
    //   240: putfield 77	com/tencent/beacon/scheduler/b/b:k	I
    //   243: aload_0
    //   244: getfield 77	com/tencent/beacon/scheduler/b/b:k	I
    //   247: aload_0
    //   248: getfield 75	com/tencent/beacon/scheduler/b/b:j	Ljava/util/ArrayList;
    //   251: invokevirtual 162	java/util/ArrayList:size	()I
    //   254: if_icmplt +298 -> 552
    //   257: aload_0
    //   258: iconst_1
    //   259: putfield 79	com/tencent/beacon/scheduler/b/b:l	Z
    //   262: aload_0
    //   263: getfield 94	com/tencent/beacon/scheduler/b/b:r	Z
    //   266: ifne +89 -> 355
    //   269: aload_0
    //   270: aload_0
    //   271: getfield 98	com/tencent/beacon/scheduler/b/b:s	Ljava/lang/String;
    //   274: aload_0
    //   275: getfield 104	com/tencent/beacon/scheduler/b/b:t	[I
    //   278: aload_0
    //   279: getfield 61	com/tencent/beacon/scheduler/b/b:c	I
    //   282: aload_0
    //   283: getfield 59	com/tencent/beacon/scheduler/b/b:b	I
    //   286: aload_1
    //   287: aload_0
    //   288: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   291: invokestatic 228	com/tencent/beacon/scheduler/a/b:a	(Ljava/lang/String;[IIILjava/util/ArrayList;Ljava/util/ArrayList;)Ljava/net/Socket;
    //   294: putfield 106	com/tencent/beacon/scheduler/b/b:w	Ljava/net/Socket;
    //   297: aload_0
    //   298: iconst_1
    //   299: putfield 94	com/tencent/beacon/scheduler/b/b:r	Z
    //   302: aload_0
    //   303: aload_0
    //   304: getfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   307: aload_0
    //   308: getfield 59	com/tencent/beacon/scheduler/b/b:b	I
    //   311: aload_0
    //   312: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   315: invokevirtual 162	java/util/ArrayList:size	()I
    //   318: invokestatic 180	java/lang/Math:min	(II)I
    //   321: iadd
    //   322: putfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   325: aload_0
    //   326: getfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   329: aload_0
    //   330: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   333: invokevirtual 162	java/util/ArrayList:size	()I
    //   336: if_icmplt -247 -> 89
    //   339: aload_0
    //   340: iconst_1
    //   341: putfield 92	com/tencent/beacon/scheduler/b/b:q	Z
    //   344: goto -255 -> 89
    //   347: aload_0
    //   348: iconst_1
    //   349: putfield 79	com/tencent/beacon/scheduler/b/b:l	Z
    //   352: goto -90 -> 262
    //   355: new 85	java/util/ArrayList
    //   358: dup
    //   359: invokespecial 86	java/util/ArrayList:<init>	()V
    //   362: astore_3
    //   363: aload_3
    //   364: astore_2
    //   365: aload_0
    //   366: getfield 92	com/tencent/beacon/scheduler/b/b:q	Z
    //   369: ifne +104 -> 473
    //   372: aload_3
    //   373: astore_2
    //   374: aload_0
    //   375: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   378: ifnull +90 -> 468
    //   381: aload_3
    //   382: astore_2
    //   383: aload_0
    //   384: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   387: invokevirtual 162	java/util/ArrayList:size	()I
    //   390: ifle +78 -> 468
    //   393: aload_3
    //   394: astore_2
    //   395: aload_0
    //   396: getfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   399: aload_0
    //   400: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   403: invokevirtual 162	java/util/ArrayList:size	()I
    //   406: if_icmpge +62 -> 468
    //   409: aload_0
    //   410: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   413: aload_0
    //   414: getfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   417: aload_0
    //   418: getfield 59	com/tencent/beacon/scheduler/b/b:b	I
    //   421: iconst_0
    //   422: invokestatic 211	com/tencent/beacon/scheduler/b/b:a	(Ljava/util/ArrayList;IIZ)Ljava/util/ArrayList;
    //   425: astore_3
    //   426: aload_3
    //   427: ifnull +102 -> 529
    //   430: aload_3
    //   431: invokevirtual 162	java/util/ArrayList:size	()I
    //   434: ifle +95 -> 529
    //   437: aload_0
    //   438: aload_0
    //   439: getfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   442: aload_3
    //   443: invokevirtual 162	java/util/ArrayList:size	()I
    //   446: iadd
    //   447: putfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   450: aload_3
    //   451: astore_2
    //   452: aload_0
    //   453: getfield 90	com/tencent/beacon/scheduler/b/b:p	I
    //   456: aload_0
    //   457: getfield 88	com/tencent/beacon/scheduler/b/b:o	Ljava/util/ArrayList;
    //   460: invokevirtual 162	java/util/ArrayList:size	()I
    //   463: if_icmplt +10 -> 473
    //   466: aload_3
    //   467: astore_2
    //   468: aload_0
    //   469: iconst_1
    //   470: putfield 92	com/tencent/beacon/scheduler/b/b:q	Z
    //   473: aload_2
    //   474: invokevirtual 162	java/util/ArrayList:size	()I
    //   477: aload_1
    //   478: invokevirtual 162	java/util/ArrayList:size	()I
    //   481: iadd
    //   482: ifle +57 -> 539
    //   485: new 85	java/util/ArrayList
    //   488: dup
    //   489: aload_2
    //   490: invokevirtual 162	java/util/ArrayList:size	()I
    //   493: aload_1
    //   494: invokevirtual 162	java/util/ArrayList:size	()I
    //   497: iadd
    //   498: invokespecial 183	java/util/ArrayList:<init>	(I)V
    //   501: astore_3
    //   502: aload_3
    //   503: aload_2
    //   504: invokevirtual 152	java/util/ArrayList:addAll	(Ljava/util/Collection;)Z
    //   507: pop
    //   508: aload_3
    //   509: aload_1
    //   510: invokevirtual 152	java/util/ArrayList:addAll	(Ljava/util/Collection;)Z
    //   513: pop
    //   514: aload_0
    //   515: aload_3
    //   516: aload_0
    //   517: getfield 61	com/tencent/beacon/scheduler/b/b:c	I
    //   520: invokestatic 216	com/tencent/beacon/scheduler/a/b:a	(Ljava/util/ArrayList;I)Ljava/net/Socket;
    //   523: putfield 106	com/tencent/beacon/scheduler/b/b:w	Ljava/net/Socket;
    //   526: goto -437 -> 89
    //   529: aload_0
    //   530: iconst_1
    //   531: putfield 92	com/tencent/beacon/scheduler/b/b:q	Z
    //   534: aload_3
    //   535: astore_2
    //   536: goto -63 -> 473
    //   539: aload_0
    //   540: iconst_1
    //   541: putfield 92	com/tencent/beacon/scheduler/b/b:q	Z
    //   544: aload_0
    //   545: iconst_1
    //   546: putfield 79	com/tencent/beacon/scheduler/b/b:l	Z
    //   549: goto -460 -> 89
    //   552: goto -290 -> 262
    //   555: aload_2
    //   556: astore_1
    //   557: goto -295 -> 262
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	560	0	this	b
    //   33	524	1	localObject1	Object
    //   157	399	2	localObject2	Object
    //   362	173	3	localArrayList	ArrayList
  }
  
  private void k()
  {
    this.x = 0;
    l1 = System.currentTimeMillis();
    for (;;)
    {
      try
      {
        this.w.setSoTimeout(this.d);
        this.w.setReceiveBufferSize(524288);
        com.tencent.beacon.scheduler.e.c.b("ConnectorImpl", "doSendReceive try send...sk:" + this.w);
        this.B = this.w.getOutputStream();
        this.B.write(this.u, 0, this.u.length);
        this.B.flush();
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "doSendReceive: sent data len:" + this.u.length + ",data:" + com.tencent.beacon.scheduler.a.b.b(this.u));
        if (this.x == 0) {}
      }
      catch (Exception localException2)
      {
        localException2.printStackTrace();
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", localException2);
        this.x = -5;
        this.z = localException2;
        if (this.x == 0) {
          continue;
        }
        try
        {
          this.B.close();
          this.w.close();
          return;
        }
        catch (Exception localException3)
        {
          localException3.printStackTrace();
          return;
        }
      }
      finally
      {
        if (this.x == 0) {
          continue;
        }
        try
        {
          this.B.close();
          this.w.close();
          throw localObject1;
        }
        catch (Exception localException10)
        {
          localException10.printStackTrace();
          continue;
        }
        i2 = i1;
        if (i3 == -1) {
          break label946;
        }
        continue;
        this.x = -6;
        this.y = ("readLen != 4, readLen:" + i2);
        try
        {
          this.B.close();
          this.C.close();
          this.w.close();
          return;
        }
        catch (Exception localException5)
        {
          localException5.printStackTrace();
          return;
        }
        this.G = ((int)(System.currentTimeMillis() - l1));
        l1 = System.currentTimeMillis();
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "socket ok, try doSendReceive...start:" + l1);
        this.v = new byte[i1];
        System.arraycopy(localException5, 0, this.v, 0, 4);
        if (i2 >= i1) {
          continue;
        }
        i3 = i1 - i2;
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "try read:" + i3);
        i3 = this.C.read(this.v, i2, i3);
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "read ret:" + i3);
        if (i3 <= 0) {
          continue;
        }
        i2 += i3;
        continue;
        if (i3 != -1) {
          continue;
        }
        this.x = 0;
        if (i2 == i1) {
          continue;
        }
        com.tencent.beacon.scheduler.e.c.c("ConnectorImpl", "read fail. readLen:" + i2 + ",packSize:" + i1);
        this.x = -6;
        this.y = ("readLen != packSize, readLen:" + i2 + ",packSize:" + i1);
        try
        {
          this.B.close();
          this.C.close();
          this.w.close();
          return;
        }
        catch (Exception localException6)
        {
          localException6.printStackTrace();
          return;
        }
        com.tencent.beacon.scheduler.e.c.b("ConnectorImpl", "doSendReceive: read finish,readLen=" + i2);
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "doSendReceive read data:" + com.tencent.beacon.scheduler.a.b.b(this.v));
        this.x = 0;
        l2 = System.currentTimeMillis();
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "socket ok, try doSendReceive...end:" + l2 + ",readTime:" + this.H);
        this.H = ((int)(l2 - l1));
        try
        {
          this.B.close();
          this.C.close();
          this.w.close();
          return;
        }
        catch (Exception localException7)
        {
          localException7.printStackTrace();
          return;
        }
      }
      try
      {
        this.B.close();
        this.w.close();
        try
        {
          com.tencent.beacon.scheduler.e.c.b("ConnectorImpl", "doSendReceive: try read data...sk:" + this.w);
          this.C = this.w.getInputStream();
          byte[] arrayOfByte = new byte[4];
          i1 = 0;
          i2 = i1;
          if (i1 >= 4) {
            break label946;
          }
          com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "try read packet size: 4 bytes");
          i3 = this.C.read(arrayOfByte, i1, 4 - i1);
          if (i3 <= 0) {
            continue;
          }
          i2 = i1 + i3;
          i1 = i2;
          if (i2 != 4) {
            continue;
          }
        }
        catch (Exception localException8)
        {
          int i3;
          long l2;
          localException8.printStackTrace();
          com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", localException8);
          this.x = -7;
          this.z = localException8;
          try
          {
            this.B.close();
            this.C.close();
            this.w.close();
            return;
          }
          catch (Exception localException9)
          {
            localException9.printStackTrace();
            return;
          }
        }
        finally
        {
          int i2;
          try
          {
            this.B.close();
            this.C.close();
            this.w.close();
            throw localObject2;
          }
          catch (Exception localException11)
          {
            for (;;)
            {
              localException11.printStackTrace();
            }
          }
          if (i2 != 4) {
            continue;
          }
          int i1 = (localObject2[0] << 24 & 0xFF000000) + (localObject2[1] << 16 & 0xFF0000) + (localObject2[2] << 8 & 0xFF00) + (localObject2[3] & 0xFF);
          if (i1 <= 4) {
            continue;
          }
          if (i1 <= 524288) {
            continue;
          }
          continue;
        }
        this.x = -6;
        this.y = ("packSize:" + i1);
      }
      catch (Exception localException1)
      {
        try
        {
          this.B.close();
          this.C.close();
          this.w.close();
          return;
        }
        catch (Exception localException4)
        {
          localException4.printStackTrace();
          return;
        }
        localException1 = localException1;
        localException1.printStackTrace();
      }
    }
  }
  
  private boolean l()
  {
    if (!this.q)
    {
      if (!this.r)
      {
        this.o = com.tencent.beacon.scheduler.a.b.a(this.s, this.t, this.c);
        this.r = true;
      }
      if ((this.o != null) && (this.o.size() > 0) && (this.p < this.o.size()))
      {
        ArrayList localArrayList = a(this.o, this.p, this.b, false);
        if ((localArrayList != null) && (localArrayList.size() > 0))
        {
          this.p += localArrayList.size();
          if (this.p < this.o.size()) {}
        }
        else
        {
          this.q = true;
        }
        this.w = com.tencent.beacon.scheduler.a.b.a(localArrayList, this.c);
        return true;
      }
      this.q = true;
    }
    return false;
  }
  
  private boolean m()
  {
    if (!this.l)
    {
      if ((this.j != null) && (this.j.size() > 0) && (this.k < this.j.size()))
      {
        ArrayList localArrayList = a(this.j, this.k, this.b, true);
        if ((localArrayList != null) && (localArrayList.size() > 0))
        {
          this.k += localArrayList.size();
          if (this.k < this.j.size()) {}
        }
        else
        {
          this.l = true;
        }
        this.w = com.tencent.beacon.scheduler.a.b.a(localArrayList, this.c);
        return true;
      }
      this.l = true;
    }
    return false;
  }
  
  public final void a(byte[] paramArrayOfByte)
  {
    com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "sendReq...");
    this.u = paramArrayOfByte;
    for (;;)
    {
      if (((!this.h) || (!this.l) || (!this.q)) && (this.A <= this.e))
      {
        long l1 = System.currentTimeMillis();
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "sendReq... try connect, time:" + l1);
        j();
        long l2 = System.currentTimeMillis();
        this.E = ((int)(l2 - l1));
        com.tencent.beacon.scheduler.e.c.a("ConnectorImpl", "sendReq... connect End, time:" + l2 + ", connectTime:" + this.E);
        if ((this.w != null) && (this.w.isConnected()))
        {
          this.F = new AccessIP(this.w.getInetAddress().getHostAddress(), this.w.getPort());
          k();
          if (this.x != 0) {
            continue;
          }
        }
      }
      else
      {
        this.D = d.d;
        d.d = -1;
        return;
      }
      if (com.tencent.beacon.scheduler.e.b.e()) {
        this.x = -3;
      } else {
        this.x = -4;
      }
    }
  }
  
  public final byte[] a()
  {
    return this.v;
  }
  
  public final int b()
  {
    return this.x;
  }
  
  public final Exception c()
  {
    return this.z;
  }
  
  public final String d()
  {
    return this.y;
  }
  
  public final int e()
  {
    return this.D;
  }
  
  public final int f()
  {
    return this.E;
  }
  
  public final int g()
  {
    return this.G;
  }
  
  public final int h()
  {
    return this.H;
  }
  
  public final AccessIP i()
  {
    return this.F;
  }
}
