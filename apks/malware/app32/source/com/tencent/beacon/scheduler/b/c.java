package com.tencent.beacon.scheduler.b;

import com.tencent.beacon.scheduler.AccessIP;
import java.net.InetSocketAddress;
import java.net.Socket;

public final class c
  extends g.a
{
  public Socket a = null;
  public volatile boolean b = false;
  private AccessIP c;
  private int d = 10000;
  
  public c(AccessIP paramAccessIP, int paramInt)
  {
    this.c = paramAccessIP;
    this.d = paramInt;
  }
  
  public final void run()
  {
    com.tencent.beacon.scheduler.e.c.c("ConnectIpRunnable", "Thread:" + Thread.currentThread().getName() + " isDaemon:" + Thread.currentThread().isDaemon());
    long l1 = System.currentTimeMillis();
    com.tencent.beacon.scheduler.e.c.a("ConnectIpRunnable", "ConnectIpRunnable run start. ip:" + this.c.getIp() + ",port:" + this.c.getPort());
    InetSocketAddress localInetSocketAddress = new InetSocketAddress(this.c.getIp(), this.c.getPort());
    Socket localSocket = new Socket();
    try
    {
      localSocket.connect(localInetSocketAddress, this.d);
      if (localSocket.isConnected()) {
        this.a = localSocket;
      }
      if ((!this.b) || (this.a == null)) {}
    }
    catch (Exception localException1)
    {
      try
      {
        this.a.close();
        this.a = null;
        this.e = true;
        long l2 = System.currentTimeMillis();
        com.tencent.beacon.scheduler.e.c.a("ConnectIpRunnable", "ConnectIpRunnable run end. ip:" + this.c.getIp() + ",port:" + this.c.getPort() + ",_sk:" + this.a + ",cost:" + (l2 - l1));
        return;
        localException1 = localException1;
        localException1.printStackTrace();
        this.a = null;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
    }
  }
}
