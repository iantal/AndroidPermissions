package com.zhangzhifu.sdk.util.sms.util;

import android.content.ContentResolver;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.preference.PreferenceManager;
import android.telephony.TelephonyManager;
import android.text.format.DateUtils;
import android.text.format.Time;
import android.util.Log;
import java.io.PrintStream;

public class MessageUtils
{
  public MessageUtils() {}
  
  public static void deleteSentSms(Context paramContext, String paramString)
  {
    Object localObject2 = new StringBuilder();
    for (;;)
    {
      Uri localUri;
      int i;
      try
      {
        localObject1 = Uri.parse("content://sms/sent");
        localUri = Uri.parse("content://sms");
        localObject1 = paramContext.getContentResolver().query((Uri)localObject1, new String[] { "_id", "address", "person", "body", "date", "type", "thread_id" }, null, null, "_id desc");
        if ((localObject1 == null) || (((Cursor)localObject1).getCount() <= 0)) {
          break label747;
        }
        ((Cursor)localObject1).moveToFirst();
        if (((Cursor)localObject1).isAfterLast())
        {
          if (((Cursor)localObject1).isClosed()) {
            break label755;
          }
          ((Cursor)localObject1).close();
          return;
        }
        ((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("body"));
        ((Cursor)localObject1).getString(((Cursor)localObject1).getColumnIndex("address"));
        ((Cursor)localObject1).getInt(((Cursor)localObject1).getColumnIndex("person"));
        if ((paramString == null) || (paramString == "") || (!paramString.contains("#"))) {
          break label515;
        }
        localObject2 = paramString.split("\\#");
        System.out.println("address contains #");
        if (localObject2 == null) {
          break label756;
        }
        i = 0;
        if (i < localObject2.length) {
          break label275;
        }
      }
      catch (SQLiteException paramContext)
      {
        Object localObject1;
        Log.d("SQLiteException in getSmsInPhone", paramContext.getMessage());
        paramContext.printStackTrace();
        System.err.println("删除出错了。。。。");
        return;
      }
      if (i >= localObject2.length)
      {
        ((Cursor)localObject1).moveToNext();
        continue;
        try
        {
          label275:
          paramContext.getContentResolver().delete(localUri, "address=?", new String[] { localObject2[i] });
          i += 1;
        }
        catch (Exception localException4)
        {
          for (;;)
          {
            System.out.println("=-===============================数据库中没有该字段");
            localException4.printStackTrace();
          }
        }
      }
      else
      {
        int j = localObject2[i].length();
        if (j == 11) {}
        for (;;)
        {
          try
          {
            Object localObject4 = new StringBuffer(localObject2[i]);
            ((StringBuffer)localObject4).insert(3, " ");
            ((StringBuffer)localObject4).insert(8, " ");
            localObject4 = ((StringBuffer)localObject4).toString();
            paramContext.getContentResolver().delete(localUri, "address=?", new String[] { localObject4 });
            i += 1;
          }
          catch (Exception localException5)
          {
            localException5.printStackTrace();
            System.out.println("=-===============================11位号码删除失败");
            continue;
          }
          if (localObject2[i].length() == 10)
          {
            Object localObject5 = new StringBuffer(localObject2[i]);
            ((StringBuffer)localObject5).insert(2, " ");
            ((StringBuffer)localObject5).insert(7, " ");
            localObject5 = ((StringBuffer)localObject5).toString();
            try
            {
              paramContext.getContentResolver().delete(localUri, "address=?", new String[] { localObject5 });
            }
            catch (Exception localException6)
            {
              System.out.println("=-===============================10位号码删除失败");
              localException6.printStackTrace();
            }
          }
        }
        label515:
        System.out.println("address not contains #");
        if ((paramString != null) && (paramString != ""))
        {
          try
          {
            paramContext.getContentResolver().delete(localUri, "address=?", new String[] { paramString });
            i = paramString.length();
            if (i == 11) {
              try
              {
                localObject2 = new StringBuffer(paramString);
                ((StringBuffer)localObject2).insert(3, " ");
                ((StringBuffer)localObject2).insert(8, " ");
                localObject2 = ((StringBuffer)localObject2).toString();
                paramContext.getContentResolver().delete(localUri, "address=?", new String[] { localObject2 });
              }
              catch (Exception localException1)
              {
                localException1.printStackTrace();
                System.out.println("=-===============================11位号码删除失败");
              }
            }
          }
          catch (Exception localException2)
          {
            for (;;)
            {
              System.out.println("=-===============================数据库中没有该字段");
              localException2.printStackTrace();
            }
          }
          if (paramString.length() == 10)
          {
            Object localObject3 = new StringBuffer(paramString);
            ((StringBuffer)localObject3).insert(2, " ");
            ((StringBuffer)localObject3).insert(7, " ");
            localObject3 = ((StringBuffer)localObject3).toString();
            try
            {
              paramContext.getContentResolver().delete(localUri, "address=?", new String[] { localObject3 });
            }
            catch (Exception localException3)
            {
              System.out.println("=-===============================10位号码删除失败");
              localException3.printStackTrace();
            }
            continue;
            label747:
            localException3.append("没有短信!");
            label755:
            return;
            label756:
            if (localException3 != null) {
              i = 0;
            }
          }
        }
      }
    }
  }
  
  public static String fetchMCC(Context paramContext)
  {
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimOperator();
    if (paramContext != null)
    {
      if (paramContext.startsWith("460")) {
        return "+86";
      }
      if (paramContext.startsWith("454")) {
        return "+852";
      }
      if (paramContext.startsWith("455")) {
        return "+853";
      }
      if (paramContext.startsWith("466")) {
        return "+886";
      }
    }
    return "+86";
  }
  
  public static String formatTimeStampString(Context paramContext, long paramLong, boolean paramBoolean)
  {
    Time localTime1 = new Time();
    localTime1.set(paramLong);
    Time localTime2 = new Time();
    localTime2.setToNow();
    int i;
    if (localTime1.year != localTime2.year) {
      i = 527124;
    }
    for (;;)
    {
      int j = i;
      if (paramBoolean) {
        j = i | 0x11;
      }
      return DateUtils.formatDateTime(paramContext, paramLong, j);
      if (localTime1.yearDay != localTime2.yearDay) {
        i = 527120;
      } else {
        i = 527105;
      }
    }
  }
  
  public static String readAppVerSharedPreferences(Context paramContext)
  {
    return PreferenceManager.getDefaultSharedPreferences(paramContext).getString("AppVer", "0.0.2.2");
  }
  
  public static Boolean readBooleanSharedPreferences(Context paramContext, String paramString)
  {
    return Boolean.valueOf(PreferenceManager.getDefaultSharedPreferences(paramContext).getBoolean(paramString, false));
  }
  
  public static int readIntSharedPreferences(Context paramContext, String paramString)
  {
    return PreferenceManager.getDefaultSharedPreferences(paramContext).getInt(paramString, 0);
  }
  
  public static String readStringSharedPreferences(Context paramContext, String paramString)
  {
    return PreferenceManager.getDefaultSharedPreferences(paramContext).getString(paramString, null);
  }
  
  public static int readUnreadCountSharedPreferences(Context paramContext)
  {
    return PreferenceManager.getDefaultSharedPreferences(paramContext).getInt("UnreadNotifi", 0);
  }
  
  public static void writeAppVerSharedPreferences(Context paramContext, String paramString)
  {
    paramContext = PreferenceManager.getDefaultSharedPreferences(paramContext).edit();
    paramContext.putString("AppVer", paramString);
    paramContext.commit();
  }
  
  public static void writeBooleanSharedPreferences(Context paramContext, String paramString, Boolean paramBoolean)
  {
    paramContext = PreferenceManager.getDefaultSharedPreferences(paramContext).edit();
    paramContext.putBoolean(paramString, paramBoolean.booleanValue());
    paramContext.commit();
  }
  
  public static void writeIntSharedPreferences(Context paramContext, String paramString, int paramInt)
  {
    paramContext = PreferenceManager.getDefaultSharedPreferences(paramContext).edit();
    paramContext.putInt(paramString, paramInt);
    paramContext.commit();
  }
  
  public static void writeStringSharedPreferences(Context paramContext, String paramString1, String paramString2)
  {
    paramContext = PreferenceManager.getDefaultSharedPreferences(paramContext).edit();
    paramContext.putString(paramString1, paramString2);
    paramContext.commit();
  }
  
  public static void writeUnreadCountSharedPreferences(Context paramContext, int paramInt)
  {
    paramContext = PreferenceManager.getDefaultSharedPreferences(paramContext).edit();
    paramContext.putInt("UnreadNotifi", paramInt);
    paramContext.commit();
  }
}
