package com.oimobi.oim.common;

import java.lang.reflect.Method;

public abstract class OIKM
{
  protected Object mKitManager;
  protected String mKitManagerName;
  
  public OIKM() {}
  
  protected Method getMethod(Object paramObject, String paramString)
  {
    try
    {
      paramObject = paramObject.getClass();
      paramObject = paramObject.getMethod(paramString, getParamTypes(paramObject, paramString));
      return paramObject;
    }
    catch (Exception paramObject) {}
    return null;
  }
  
  protected Class<?>[] getParamTypes(Class<?> paramClass, String paramString)
  {
    Object localObject = null;
    Method[] arrayOfMethod = paramClass.getDeclaredMethods();
    int j = arrayOfMethod.length;
    int i = 0;
    paramClass = localObject;
    if (i < j)
    {
      if (!arrayOfMethod[i].getName().equals(paramString)) {}
      for (;;)
      {
        i += 1;
        break;
        paramClass = arrayOfMethod[i].getParameterTypes();
      }
    }
    return paramClass;
  }
  
  public abstract String gkmn();
  
  protected Object invokeMethod(Object paramObject, Method paramMethod, Object[] paramArrayOfObject)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (paramObject != null)
    {
      localObject1 = localObject2;
      if (paramMethod == null) {}
    }
    try
    {
      paramMethod.setAccessible(true);
      localObject1 = paramMethod.invoke(paramObject, paramArrayOfObject);
      return localObject1;
    }
    catch (Exception paramObject) {}
    return null;
  }
  
  public abstract void sm(Object paramObject)
    throws Exception;
}
