package com.oimobi.oim;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources.Theme;
import android.os.Bundle;
import android.util.AttributeSet;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import com.oimobi.oim.common.ClassLoader;
import com.oimobi.oim.common.OIABM;

public class OIA
  extends Activity
{
  private OIABM mAIAM;
  
  public OIA() {}
  
  private OIABM getRSAM()
    throws Exception
  {
    if (this.mAIAM == null)
    {
      this.mAIAM = ((OIABM)ClassLoader.getManager(this, OIABM.class));
      this.mAIAM.acMethod(this);
    }
    return this.mAIAM;
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    super.onActivityResult(paramInt1, paramInt2, paramIntent);
    try
    {
      getRSAM().onActivityResult(paramInt1, paramInt2, paramIntent);
      return;
    }
    catch (Exception paramIntent) {}
  }
  
  protected void onApplyThemeResource(Resources.Theme paramTheme, int paramInt, boolean paramBoolean)
  {
    super.onApplyThemeResource(paramTheme, paramInt, paramBoolean);
    try
    {
      getRSAM().onApplyThemeResource(paramTheme, paramInt, paramBoolean);
      return;
    }
    catch (Exception paramTheme) {}
  }
  
  public void onBackPressed()
  {
    super.onBackPressed();
    try
    {
      getRSAM().onBackPressed();
      return;
    }
    catch (Exception localException) {}
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    try
    {
      getRSAM().onConfigurationChanged(paramConfiguration);
      return;
    }
    catch (Exception paramConfiguration) {}
  }
  
  public void onContentChanged()
  {
    super.onContentChanged();
    try
    {
      getRSAM().onContentChanged();
      return;
    }
    catch (Exception localException) {}
  }
  
  public boolean onContextItemSelected(MenuItem paramMenuItem)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onContextItemSelected(paramMenuItem);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onContextItemSelected(paramMenuItem);
  }
  
  public void onContextMenuClosed(Menu paramMenu)
  {
    super.onContextMenuClosed(paramMenu);
    try
    {
      getRSAM().onContextMenuClosed(paramMenu);
      return;
    }
    catch (Exception paramMenu) {}
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    try
    {
      getRSAM().onCreate(paramBundle);
      return;
    }
    catch (Exception paramBundle) {}
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    super.onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
    try
    {
      getRSAM().onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
      return;
    }
    catch (Exception paramContextMenu) {}
  }
  
  protected Dialog onCreateDialog(int paramInt)
  {
    Dialog localDialog1 = super.onCreateDialog(paramInt);
    try
    {
      Dialog localDialog2 = getRSAM().onCreateDialog(paramInt);
      return localDialog2;
    }
    catch (Exception localException) {}
    return localDialog1;
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onCreateOptionsMenu(paramMenu);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onCreateOptionsMenu(paramMenu);
  }
  
  public boolean onCreatePanelMenu(int paramInt, Menu paramMenu)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onCreatePanelMenu(paramInt, paramMenu);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onCreatePanelMenu(paramInt, paramMenu);
  }
  
  public View onCreatePanelView(int paramInt)
  {
    View localView1 = super.onCreatePanelView(paramInt);
    try
    {
      View localView2 = getRSAM().onCreatePanelView(paramInt);
      return localView2;
    }
    catch (Exception localException) {}
    return localView1;
  }
  
  public View onCreateView(String paramString, Context paramContext, AttributeSet paramAttributeSet)
  {
    View localView = super.onCreateView(paramString, paramContext, paramAttributeSet);
    try
    {
      paramString = getRSAM().onCreateView(paramString, paramContext, paramAttributeSet);
      return paramString;
    }
    catch (Exception paramString) {}
    return localView;
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    try
    {
      getRSAM().onDestroy();
      return;
    }
    catch (Exception localException) {}
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onKeyDown(paramInt, paramKeyEvent);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public boolean onKeyLongPress(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onKeyLongPress(paramInt, paramKeyEvent);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onKeyLongPress(paramInt, paramKeyEvent);
  }
  
  public boolean onKeyMultiple(int paramInt1, int paramInt2, KeyEvent paramKeyEvent)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onKeyMultiple(paramInt1, paramInt2, paramKeyEvent);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onKeyMultiple(paramInt1, paramInt2, paramKeyEvent);
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onKeyUp(paramInt, paramKeyEvent);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onKeyUp(paramInt, paramKeyEvent);
  }
  
  public boolean onMenuItemSelected(int paramInt, MenuItem paramMenuItem)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onMenuItemSelected(paramInt, paramMenuItem);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onMenuItemSelected(paramInt, paramMenuItem);
  }
  
  public boolean onMenuOpened(int paramInt, Menu paramMenu)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onMenuOpened(paramInt, paramMenu);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onMenuOpened(paramInt, paramMenu);
  }
  
  protected void onNewIntent(Intent paramIntent)
  {
    super.onNewIntent(paramIntent);
    try
    {
      getRSAM().onNewIntent(paramIntent);
      return;
    }
    catch (Exception paramIntent) {}
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onOptionsItemSelected(paramMenuItem);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onOptionsItemSelected(paramMenuItem);
  }
  
  public void onOptionsMenuClosed(Menu paramMenu)
  {
    super.onOptionsMenuClosed(paramMenu);
    try
    {
      getRSAM().onOptionsMenuClosed(paramMenu);
      return;
    }
    catch (Exception paramMenu) {}
  }
  
  public void onPanelClosed(int paramInt, Menu paramMenu)
  {
    super.onPanelClosed(paramInt, paramMenu);
    try
    {
      getRSAM().onPanelClosed(paramInt, paramMenu);
      return;
    }
    catch (Exception paramMenu) {}
  }
  
  protected void onPause()
  {
    super.onPause();
    try
    {
      getRSAM().onPause();
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onRestart()
  {
    super.onRestart();
    try
    {
      getRSAM().onRestart();
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onRestoreInstanceState(Bundle paramBundle)
  {
    super.onRestoreInstanceState(paramBundle);
    try
    {
      getRSAM().onRestoreInstanceState(paramBundle);
      return;
    }
    catch (Exception paramBundle) {}
  }
  
  protected void onResume()
  {
    super.onResume();
    try
    {
      getRSAM().onResume();
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    try
    {
      getRSAM().onSaveInstanceState(paramBundle);
      return;
    }
    catch (Exception paramBundle) {}
  }
  
  protected void onStart()
  {
    super.onStart();
    try
    {
      getRSAM().onStart();
      return;
    }
    catch (Exception localException) {}
  }
  
  protected void onStop()
  {
    super.onStop();
    try
    {
      getRSAM().onStop();
      return;
    }
    catch (Exception localException) {}
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool1 = false;
    try
    {
      boolean bool2 = getRSAM().onTouchEvent(paramMotionEvent);
      bool1 = bool2;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    if (bool1) {
      return bool1;
    }
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    try
    {
      getRSAM().onWindowFocusChanged(paramBoolean);
      return;
    }
    catch (Exception localException) {}
  }
  
  public void setTheme(int paramInt)
  {
    int i = paramInt;
    try
    {
      paramInt = getRSAM().setTheme(paramInt);
      super.setTheme(paramInt);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        paramInt = i;
      }
    }
  }
}
