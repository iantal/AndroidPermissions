package com.snowfish.cn.ganga.offline.b;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import com.snowfish.cn.ganga.offline.a.c;
import com.snowfish.cn.ganga.offline.basic.SFPayAdapter;
import com.snowfish.cn.ganga.offline.sf.SFChannelAdapterAHelper;
import com.snowfish.cn.ganga.offline.sf.b;
import java.io.File;
import java.lang.reflect.Method;
import org.json.JSONObject;

public final class h
{
  private static Context a;
  private static boolean b = false;
  private static long c = 0L;
  private static boolean d = false;
  private static Handler e = null;
  private static j[] f = { new j(0), new j(1) };
  private static Method g;
  private static Context h = null;
  
  public static Context a()
  {
    return a;
  }
  
  public static String a(Context paramContext, int paramInt)
  {
    Object localObject = "";
    try
    {
      String str = c(paramContext, paramInt);
      if (str == null) {
        return str;
      }
      if (str.length() <= 5) {
        return str;
      }
      str = str.substring(0, 5);
      localObject = str;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
      return localThrowable;
    }
    if (((localObject == null) || (((String)localObject).equals(""))) && (paramInt == 0)) {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimOperator();
        return paramContext;
      }
      catch (Throwable paramContext) {}
    }
    return localObject;
  }
  
  private static String a(String paramString)
  {
    try
    {
      if (g == null)
      {
        Method localMethod = Class.forName("android.os.SystemProperties").getDeclaredMethod("get", new Class[] { String.class });
        g = localMethod;
        localMethod.setAccessible(true);
      }
      paramString = (String)g.invoke(null, new Object[] { paramString });
      return paramString;
    }
    catch (Exception paramString) {}
    return "";
  }
  
  public static void a(Context paramContext)
  {
    a = paramContext.getApplicationContext();
  }
  
  public static void a(Context paramContext, int paramInt1, int paramInt2, int paramInt3)
  {
    try
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("@");
      JSONObject localJSONObject = new JSONObject();
      localJSONObject.put("id", paramInt1);
      localJSONObject.put("type", paramInt2);
      localJSONObject.put("time", paramInt3);
      ((StringBuilder)localObject).append(localJSONObject.toString());
      localObject = ((StringBuilder)localObject).toString();
      b.a();
      b.b().createPayAdapter(paramContext, "").setPaid(paramContext, (String)localObject);
      return;
    }
    catch (Throwable paramContext) {}
  }
  
  public static void a(Context paramContext, boolean paramBoolean)
  {
    h = paramContext;
    if (e == null) {
      e = new i(Looper.getMainLooper());
    }
    if (paramBoolean) {}
    for (int i = 1;; i = 2)
    {
      e.sendEmptyMessage(i);
      return;
    }
  }
  
  public static void a(boolean paramBoolean)
  {
    b = paramBoolean;
  }
  
  private static boolean a(int paramInt)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    try
    {
      if (Environment.getExternalStorageState().equals("mounted"))
      {
        StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
        long l = localStatFs.getBlockSize() * localStatFs.getAvailableBlocks() / 1024L;
        bool1 = bool2;
        if (l > paramInt) {
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
    }
    return false;
  }
  
  public static boolean a(Context paramContext, String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("@");
      JSONObject localJSONObject = new JSONObject();
      localJSONObject.put("id", paramString);
      localJSONObject.put("type", paramInt1);
      localJSONObject.put("time", paramInt2);
      localStringBuilder.append(localJSONObject.toString());
      b.a();
      boolean bool = b.b().createPayAdapter(paramContext, "").isPaid(paramContext, localStringBuilder.toString());
      return bool;
    }
    catch (Throwable paramContext) {}
    return false;
  }
  
  public static byte[] a(Context paramContext, byte[] paramArrayOfByte)
  {
    try
    {
      b.a();
      paramContext = b.b().createPayAdapter(paramContext, "").call(paramContext, paramArrayOfByte);
      return paramContext;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static int b(Context paramContext, int paramInt)
  {
    if (paramInt == 0) {}
    try
    {
      String str2;
      for (String str1 = a("gsm.sim.state");; str1 = a("gsm.sim.state.2"))
      {
        str2 = str1;
        if (str1 != null) {
          str2 = str1.split(",")[0];
        }
        if (!"ABSENT".equals(str2)) {
          break;
        }
        return 1;
      }
      if ("PIN_REQUIRED".equals(str2)) {
        return 2;
      }
      if ("PUK_REQUIRED".equals(str2)) {
        return 3;
      }
      if ("NETWORK_LOCKED".equals(str2)) {
        return 4;
      }
      if ("READY".equals(str2)) {
        return 5;
      }
      if (paramInt == 0)
      {
        paramInt = ((TelephonyManager)paramContext.getSystemService("phone")).getSimState();
        return paramInt;
      }
      return 0;
    }
    catch (Throwable paramContext) {}
    return 0;
  }
  
  public static String b()
  {
    new String();
    if (a(300)) {}
    for (String str = Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + new String(g.b);; str = a.getDir(new String(g.b), 0).getAbsolutePath())
    {
      File localFile = new File(str);
      if (!localFile.exists()) {
        localFile.mkdirs();
      }
      return str;
    }
  }
  
  public static void b(boolean paramBoolean)
  {
    if (paramBoolean) {
      c = System.currentTimeMillis();
    }
    d = paramBoolean;
  }
  
  public static String c()
  {
    new String();
    String str = a.getDir(new String(g.b), 0).getAbsolutePath();
    File localFile = new File(str);
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    return str;
  }
  
  private static String c(Context paramContext, int paramInt)
  {
    Object localObject = "";
    try
    {
      String str = (String)f[paramInt].a("getSubscriberId", new Class[0], new Object[0]);
      localObject = str;
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    if (((localObject == null) || (((String)localObject).equals(""))) && (paramInt == 0)) {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
        return paramContext;
      }
      catch (Throwable paramContext) {}
    }
    return localObject;
  }
  
  public static long d()
  {
    try
    {
      long l = c.a(a.getPackageManager().getApplicationInfo(a.getPackageName(), 128).metaData.getString("com.snowfish.appid"));
      return l;
    }
    catch (Exception localException) {}
    return 0L;
  }
  
  public static boolean e()
  {
    return b;
  }
  
  public static boolean f()
  {
    if (!d) {
      return false;
    }
    if (System.currentTimeMillis() - c > 10000L) {
      b(false);
    }
    return d;
  }
}
