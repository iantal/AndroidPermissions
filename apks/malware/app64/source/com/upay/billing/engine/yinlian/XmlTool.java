package com.upay.billing.engine.yinlian;

import android.util.Log;
import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.lang.reflect.Field;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

public class XmlTool
{
  public XmlTool() {}
  
  public static String objectToXml(MerchantObject paramMerchantObject)
  {
    int i = 0;
    StringWriter localStringWriter = new StringWriter();
    for (;;)
    {
      XmlSerializer localXmlSerializer;
      try
      {
        localXmlSerializer = XmlPullParserFactory.newInstance().newSerializer();
        localXmlSerializer.setOutput(localStringWriter);
        localXmlSerializer.startDocument("UTF-8", Boolean.valueOf(false));
        Object localObject1 = paramMerchantObject.getClass();
        Field[] arrayOfField = ((Class)localObject1).getDeclaredFields();
        localXmlSerializer.startTag("", "pomp");
        Object localObject2 = ((Class)localObject1).getDeclaredField("application");
        ((Field)localObject2).setAccessible(true);
        localXmlSerializer.attribute(null, "application", String.valueOf(((Field)localObject2).get(paramMerchantObject)));
        try
        {
          localObject1 = ((Class)localObject1).getDeclaredField("version");
          ((Field)localObject1).setAccessible(true);
          localXmlSerializer.attribute(null, "version", String.valueOf(((Field)localObject1).get(paramMerchantObject)));
          int j = arrayOfField.length;
          if (i < j)
          {
            localObject2 = arrayOfField[i];
            ((Field)localObject2).setAccessible(true);
            localObject1 = ((Field)localObject2).getName();
            if ((((String)localObject1).equals("application")) || (((String)localObject1).equals("version"))) {
              break label283;
            }
            localObject2 = ((Field)localObject2).get(paramMerchantObject);
            if (localObject2 == null) {
              break label283;
            }
            localObject2 = String.valueOf(localObject2);
            localXmlSerializer.startTag("", (String)localObject1);
            localXmlSerializer.cdsect((String)localObject2);
            localXmlSerializer.endTag("", (String)localObject1);
          }
        }
        catch (NoSuchFieldException localNoSuchFieldException)
        {
          Log.i("XmlTool", "no such version field");
          continue;
        }
        localXmlSerializer.endTag("", "pomp");
      }
      catch (Exception paramMerchantObject)
      {
        paramMerchantObject.printStackTrace();
        return localStringWriter.toString();
      }
      localXmlSerializer.endDocument();
      continue;
      label283:
      i += 1;
    }
  }
  
  public static Object xmlToObject(String paramString, Class paramClass, int paramInt)
  {
    Object localObject = null;
    if (paramString != null) {}
    try
    {
      paramString = new ByteArrayInputStream(paramString.getBytes());
      localObject = new MerchantXmlParseService().getByParseXml(paramString, paramClass, paramInt);
      return localObject;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
}
