package com.rollbar.android.http;

import android.util.Log;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class HttpRequest
  implements Runnable
{
  private static final int REQUEST_TIMEOUT = 5000;
  private int attemptNumber;
  private byte[] body;
  private HttpURLConnection connection;
  private HttpResponseHandler handler;
  private String method;
  private HashMap<String, String> requestProperties;
  private URL url;
  
  public HttpRequest(URL paramURL, String paramString, HttpResponseHandler paramHttpResponseHandler)
  {
    this.url = paramURL;
    this.method = paramString;
    this.handler = paramHttpResponseHandler;
    this.requestProperties = new HashMap();
    this.attemptNumber = 1;
  }
  
  private String getResponseText(InputStream paramInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte['Ð€'];
    int i;
    for (String str = "";; str = str.concat(new String(arrayOfByte, 0, i)))
    {
      i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        return str;
      }
    }
  }
  
  private void handleFailureWithRetries(HttpResponse paramHttpResponse)
  {
    if ((this.attemptNumber < 5) && (!paramHttpResponse.hasStatusCode()))
    {
      this.attemptNumber += 1;
      HttpRequestManager.getInstance().retryRequest(this);
      return;
    }
    this.handler.onFailure(paramHttpResponse);
  }
  
  public int getAttemptNumber()
  {
    return this.attemptNumber;
  }
  
  public void run()
  {
    for (;;)
    {
      try
      {
        this.connection = ((HttpURLConnection)this.url.openConnection());
      }
      catch (IOException localIOException1)
      {
        Object localObject1;
        int i;
        handleFailureWithRetries(new HttpResponse(localIOException1.toString()));
        return;
      }
      try
      {
        this.connection.setRequestMethod(this.method);
        this.connection.setConnectTimeout(5000);
        this.connection.setReadTimeout(5000);
        localObject1 = this.requestProperties.entrySet().iterator();
        if (((Iterator)localObject1).hasNext()) {
          break label195;
        }
        if (this.body != null)
        {
          this.connection.setDoOutput(true);
          localObject1 = new BufferedOutputStream(this.connection.getOutputStream());
          ((OutputStream)localObject1).write(this.body);
          ((OutputStream)localObject1).close();
        }
        i = this.connection.getResponseCode();
        if (i != 200) {
          break;
        }
        localObject1 = this.connection.getInputStream();
      }
      catch (IOException localIOException2)
      {
        Map.Entry localEntry;
        handleFailureWithRetries(new HttpResponse(localIOException2.toString()));
        return;
        InputStream localInputStream = this.connection.getErrorStream();
        continue;
        handleFailureWithRetries(localInputStream);
        continue;
      }
      finally
      {
        this.connection.disconnect();
      }
      localObject1 = new HttpResponse(i, getResponseText(new BufferedInputStream((InputStream)localObject1)));
      if (i != 200) {
        break label268;
      }
      this.handler.onSuccess((HttpResponse)localObject1);
      this.connection.disconnect();
      return;
      label195:
      localEntry = (Map.Entry)localIOException1.next();
      this.connection.setRequestProperty((String)localEntry.getKey(), (String)localEntry.getValue());
    }
  }
  
  public void setBody(String paramString)
  {
    try
    {
      this.body = paramString.getBytes("UTF-8");
      return;
    }
    catch (UnsupportedEncodingException paramString)
    {
      Log.e("Rollbar", "Cannot encode body: " + paramString.toString());
    }
  }
  
  public void setMethod(String paramString)
  {
    this.method = paramString;
  }
  
  public void setRequestProperty(String paramString1, String paramString2)
  {
    this.requestProperties.put(paramString1, paramString2);
  }
}
