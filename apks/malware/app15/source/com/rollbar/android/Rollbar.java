package com.rollbar.android;

import android.content.Context;
import android.util.Log;
import java.util.Map;
import org.json.JSONObject;

public class Rollbar
{
  public static final String TAG = "Rollbar";
  private static Notifier notifier;
  
  public Rollbar() {}
  
  private static void ensureInit(Runnable paramRunnable)
  {
    if (isInit()) {
      try
      {
        paramRunnable.run();
        return;
      }
      catch (Exception paramRunnable)
      {
        Log.e("Rollbar", "Exception when interacting with Rollbar", paramRunnable);
        return;
      }
    }
    Log.e("Rollbar", "Rollbar not initialized with an access token!");
  }
  
  public static void init(Context paramContext, String paramString1, String paramString2)
  {
    if (isInit())
    {
      Log.w("Rollbar", "Rollbar.init() called when it was already initialized.");
      return;
    }
    notifier = new Notifier(paramContext, paramString1, paramString2);
  }
  
  public static boolean isInit()
  {
    return notifier != null;
  }
  
  public static void reportException(Throwable paramThrowable)
  {
    reportException(paramThrowable, null, null);
  }
  
  public static void reportException(Throwable paramThrowable, String paramString)
  {
    reportException(paramThrowable, paramString, null);
  }
  
  public static void reportException(Throwable paramThrowable, final String paramString1, final String paramString2)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.reportException(Rollbar.this, paramString1, paramString2);
      }
    });
  }
  
  public static void reportMessage(String paramString)
  {
    reportMessage(paramString, "info");
  }
  
  public static void reportMessage(String paramString1, final String paramString2)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.reportMessage(Rollbar.this, paramString2);
      }
    });
  }
  
  public static void reportMessage(String paramString1, final String paramString2, final Map<String, String> paramMap)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.reportMessage(Rollbar.this, paramString2, paramMap);
      }
    });
  }
  
  public static void setDefaultCaughtExceptionLevel(String paramString)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setDefaultCaughtExceptionLevel(Rollbar.this);
      }
    });
  }
  
  public static void setEndpoint(String paramString)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setEndpoint(Rollbar.this);
      }
    });
  }
  
  public static void setIncludeLogcat(boolean paramBoolean)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setIncludeLogcat(this.val$includeLogcat);
      }
    });
  }
  
  public static void setPersonData(String paramString1, final String paramString2, final String paramString3)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setPersonData(Rollbar.this, paramString2, paramString3);
      }
    });
  }
  
  public static void setPersonData(JSONObject paramJSONObject)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setPersonData(Rollbar.this);
      }
    });
  }
  
  public static void setReportUncaughtExceptions(boolean paramBoolean)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setReportUncaughtExceptions(this.val$report);
      }
    });
  }
  
  public static void setSendOnUncaughtException(boolean paramBoolean)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setSendOnUncaughtException(this.val$send);
      }
    });
  }
  
  public static void setUncaughtExceptionLevel(String paramString)
  {
    ensureInit(new Runnable()
    {
      public void run()
      {
        Rollbar.notifier.setUncaughtExceptionLevel(Rollbar.this);
      }
    });
  }
}
