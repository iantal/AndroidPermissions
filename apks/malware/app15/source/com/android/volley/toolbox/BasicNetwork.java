package com.android.volley.toolbox;

import android.os.SystemClock;
import com.android.volley.AuthFailureError;
import com.android.volley.Cache.Entry;
import com.android.volley.Error;
import com.android.volley.Network;
import com.android.volley.NetworkError;
import com.android.volley.NetworkResponse;
import com.android.volley.NoConnectionError;
import com.android.volley.Request;
import com.android.volley.RetryPolicy;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyLog;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.cookie.DateUtils;

public class BasicNetwork
  implements Network
{
  protected static final boolean DEBUG = VolleyLog.DEBUG;
  private static int DEFAULT_POOL_SIZE = 4096;
  private static int SLOW_REQUEST_THRESHOLD_MS = 3000;
  protected final HttpStack mHttpStack;
  protected final ByteArrayPool mPool;
  
  public BasicNetwork(HttpStack paramHttpStack)
  {
    this(paramHttpStack, new ByteArrayPool(DEFAULT_POOL_SIZE));
  }
  
  public BasicNetwork(HttpStack paramHttpStack, ByteArrayPool paramByteArrayPool)
  {
    this.mHttpStack = paramHttpStack;
    this.mPool = paramByteArrayPool;
  }
  
  private void addCacheHeaders(Map<String, String> paramMap, Cache.Entry paramEntry)
  {
    if (paramEntry == null) {}
    do
    {
      return;
      if (paramEntry.etag != null) {
        paramMap.put("If-None-Match", paramEntry.etag);
      }
    } while (paramEntry.serverDate <= 0L);
    paramMap.put("If-Modified-Since", DateUtils.formatDate(new Date(paramEntry.serverDate)));
  }
  
  private static void attemptRetryOnException(String paramString, Request<?> paramRequest, Error paramError)
    throws Error
  {
    RetryPolicy localRetryPolicy = paramRequest.getRetryPolicy();
    int i = paramRequest.getTimeoutMs();
    try
    {
      localRetryPolicy.retry(paramError);
      paramRequest.addMarker(String.format("%s-retry [timeout=%s]", new Object[] { paramString, Integer.valueOf(i) }));
      return;
    }
    catch (Error paramError)
    {
      paramRequest.addMarker(String.format("%s-timeout-giveup [timeout=%s]", new Object[] { paramString, Integer.valueOf(i) }));
      throw paramError;
    }
  }
  
  private static Map<String, String> convertHeaders(Header[] paramArrayOfHeader)
  {
    HashMap localHashMap = new HashMap();
    int i = 0;
    while (i < paramArrayOfHeader.length)
    {
      localHashMap.put(paramArrayOfHeader[i].getName(), paramArrayOfHeader[i].getValue());
      i += 1;
    }
    return localHashMap;
  }
  
  private byte[] entityToBytes(HttpEntity paramHttpEntity)
    throws IOException, ServerError
  {
    Object localObject2 = null;
    PoolingByteArrayOutputStream localPoolingByteArrayOutputStream = new PoolingByteArrayOutputStream(this.mPool, (int)paramHttpEntity.getContentLength());
    Object localObject1 = localObject2;
    Object localObject4;
    try
    {
      localObject4 = paramHttpEntity.getContent();
      if (localObject4 == null)
      {
        localObject1 = localObject2;
        throw new ServerError();
      }
    }
    finally {}
    try
    {
      paramHttpEntity.consumeContent();
      this.mPool.returnBuf((byte[])localObject1);
      localPoolingByteArrayOutputStream.close();
      throw localObject3;
      localObject1 = localObject3;
      byte[] arrayOfByte = this.mPool.getBuf(1024);
      for (;;)
      {
        localObject1 = arrayOfByte;
        int i = ((InputStream)localObject4).read(arrayOfByte);
        if (i == -1) {
          break;
        }
        localObject1 = arrayOfByte;
        localPoolingByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      localObject1 = arrayOfByte;
      localObject4 = localPoolingByteArrayOutputStream.toByteArray();
      try
      {
        paramHttpEntity.consumeContent();
        this.mPool.returnBuf(arrayOfByte);
        localPoolingByteArrayOutputStream.close();
        return localObject4;
      }
      catch (IOException paramHttpEntity)
      {
        for (;;)
        {
          VolleyLog.v("Error occured when calling consumingContent", new Object[0]);
        }
      }
    }
    catch (IOException paramHttpEntity)
    {
      for (;;)
      {
        VolleyLog.v("Error occured when calling consumingContent", new Object[0]);
      }
    }
  }
  
  private void logSlowRequests(long paramLong, Request<?> paramRequest, byte[] paramArrayOfByte, StatusLine paramStatusLine)
  {
    if ((DEBUG) || (paramLong > SLOW_REQUEST_THRESHOLD_MS)) {
      if (paramArrayOfByte == null) {
        break label82;
      }
    }
    label82:
    for (paramArrayOfByte = Integer.valueOf(paramArrayOfByte.length);; paramArrayOfByte = "null")
    {
      VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], [rc=%d], [retryCount=%s]", new Object[] { paramRequest, Long.valueOf(paramLong), paramArrayOfByte, Integer.valueOf(paramStatusLine.getStatusCode()), Integer.valueOf(paramRequest.getRetryPolicy().getCurrentRetryCount()) });
      return;
    }
  }
  
  protected void logError(String paramString1, String paramString2, long paramLong)
  {
    VolleyLog.v("HTTP ERROR(%s) %d ms to fetch %s", new Object[] { paramString1, Long.valueOf(SystemClock.elapsedRealtime() - paramLong), paramString2 });
  }
  
  public NetworkResponse performRequest(Request<?> paramRequest)
    throws Error
  {
    long l = SystemClock.elapsedRealtime();
    Object localObject3;
    for (;;)
    {
      localObject3 = null;
      Object localObject1 = null;
      localHashMap = new HashMap();
      Object localObject4;
      try
      {
        localObject4 = new HashMap();
        addCacheHeaders((Map)localObject4, paramRequest.getCacheEntry());
        localObject4 = this.mHttpStack.performRequest(paramRequest, (Map)localObject4);
        try
        {
          localStatusLine = ((HttpResponse)localObject4).getStatusLine();
          i = localStatusLine.getStatusCode();
          localObject5 = convertHeaders(((HttpResponse)localObject4).getAllHeaders());
          localObject1 = null;
          if (i != 304) {}
        }
        catch (IOException localIOException1)
        {
          for (;;)
          {
            StatusLine localStatusLine;
            int i;
            Object localObject2;
            NetworkResponse localNetworkResponse;
            Object localObject5 = localHashMap;
          }
        }
        try
        {
          return new NetworkResponse(304, paramRequest.getCacheEntry().data, (Map)localObject5, true);
        }
        catch (IOException localIOException2)
        {
          break label303;
        }
        localObject3 = ((HttpResponse)localObject4).getEntity();
        localObject1 = null;
        if (localObject3 != null)
        {
          localObject3 = entityToBytes(((HttpResponse)localObject4).getEntity());
          localObject1 = localObject3;
          logSlowRequests(SystemClock.elapsedRealtime() - l, paramRequest, (byte[])localObject3, localStatusLine);
          if ((i >= 200) && (i <= 299)) {
            break label213;
          }
          localObject1 = localObject3;
          throw new IOException();
        }
      }
      catch (SocketTimeoutException localSocketTimeoutException)
      {
        for (;;)
        {
          attemptRetryOnException("socket", paramRequest, new TimeoutError());
          break;
          localObject3 = new byte[0];
        }
        localObject2 = localObject3;
        localObject3 = new NetworkResponse(i, (byte[])localObject3, (Map)localObject5, false);
        return localObject3;
      }
      catch (ConnectTimeoutException localConnectTimeoutException)
      {
        attemptRetryOnException("connection", paramRequest, new TimeoutError());
      }
      catch (MalformedURLException localMalformedURLException)
      {
        throw new RuntimeException("Bad URL " + paramRequest.getUrl(), localMalformedURLException);
      }
      catch (IOException localIOException3)
      {
        label213:
        localObject4 = localObject3;
        localObject5 = localHashMap;
        localObject3 = localIOException3;
      }
      label303:
      if (localObject4 == null) {
        break;
      }
      i = ((HttpResponse)localObject4).getStatusLine().getStatusCode();
      VolleyLog.e("Unexpected response code %d for %s", new Object[] { Integer.valueOf(i), paramRequest.getUrl() });
      if (localMalformedURLException == null) {
        break label418;
      }
      localNetworkResponse = new NetworkResponse(i, localMalformedURLException, (Map)localObject5, false);
      if ((i != 401) && (i != 403)) {
        break label408;
      }
      attemptRetryOnException("auth", paramRequest, new AuthFailureError(localNetworkResponse));
    }
    throw new NoConnectionError((Throwable)localObject3);
    label408:
    throw new ServerError(localNetworkResponse);
    label418:
    throw new NetworkError(null);
  }
}
