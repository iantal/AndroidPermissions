package com.android.volley.toolbox;

import android.os.SystemClock;
import com.android.volley.Cache;
import com.android.volley.Cache.Entry;
import com.android.volley.VolleyLog;
import java.io.EOFException;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class DiskBasedCache
  implements Cache
{
  private static final int CACHE_MAGIC = 538051844;
  private static final int DEFAULT_DISK_USAGE_BYTES = 5242880;
  private static final float HYSTERESIS_FACTOR = 0.9F;
  private final Map<String, CacheHeader> mEntries = new LinkedHashMap(16, 0.75F, true);
  private final int mMaxCacheSizeInBytes;
  private final File mRootDirectory;
  private long mTotalSize = 0L;
  
  public DiskBasedCache(File paramFile)
  {
    this(paramFile, 5242880);
  }
  
  public DiskBasedCache(File paramFile, int paramInt)
  {
    this.mRootDirectory = paramFile;
    this.mMaxCacheSizeInBytes = paramInt;
  }
  
  private String getFilenameForKey(String paramString)
  {
    int i = paramString.length() / 2;
    int j = paramString.substring(0, i).hashCode();
    return String.valueOf(j) + String.valueOf(paramString.substring(i).hashCode());
  }
  
  private void pruneIfNeeded(int paramInt)
  {
    if (this.mTotalSize + paramInt < this.mMaxCacheSizeInBytes) {}
    label119:
    label229:
    label233:
    for (;;)
    {
      return;
      if (VolleyLog.DEBUG) {
        VolleyLog.v("Pruning old cache entries.", new Object[0]);
      }
      long l1 = this.mTotalSize;
      long l2 = SystemClock.elapsedRealtime();
      Iterator localIterator = this.mEntries.entrySet().iterator();
      int i = 0;
      CacheHeader localCacheHeader;
      if (localIterator.hasNext())
      {
        localCacheHeader = (CacheHeader)((Map.Entry)localIterator.next()).getValue();
        if (getFileForKey(localCacheHeader.key).delete())
        {
          this.mTotalSize -= localCacheHeader.size;
          localIterator.remove();
          i += 1;
          if ((float)(this.mTotalSize + paramInt) >= 0.9F * this.mMaxCacheSizeInBytes) {
            break label229;
          }
        }
      }
      for (;;)
      {
        if (!VolleyLog.DEBUG) {
          break label233;
        }
        VolleyLog.v("pruned %d files, %d bytes, %d ms", new Object[] { Integer.valueOf(i), Long.valueOf(this.mTotalSize - l1), Long.valueOf(SystemClock.elapsedRealtime() - l2) });
        return;
        VolleyLog.d("Could not delete cache entry for key=%s, filename=%s", new Object[] { localCacheHeader.key, getFilenameForKey(localCacheHeader.key) });
        break label119;
        break;
      }
    }
  }
  
  private void putEntry(String paramString, CacheHeader paramCacheHeader)
  {
    if (!this.mEntries.containsKey(paramString)) {}
    CacheHeader localCacheHeader;
    for (this.mTotalSize += paramCacheHeader.size;; this.mTotalSize += paramCacheHeader.size - localCacheHeader.size)
    {
      this.mEntries.put(paramString, paramCacheHeader);
      return;
      localCacheHeader = (CacheHeader)this.mEntries.get(paramString);
    }
  }
  
  private static int read(InputStream paramInputStream)
    throws IOException
  {
    int i = paramInputStream.read();
    if (i == -1) {
      throw new EOFException();
    }
    return i;
  }
  
  static int readInt(InputStream paramInputStream)
    throws IOException
  {
    return read(paramInputStream) << 0 | 0x0 | read(paramInputStream) << 8 | read(paramInputStream) << 16 | read(paramInputStream) << 24;
  }
  
  static long readLong(InputStream paramInputStream)
    throws IOException
  {
    return 0L | (read(paramInputStream) & 0xFF) << 0 | (read(paramInputStream) & 0xFF) << 8 | (read(paramInputStream) & 0xFF) << 16 | (read(paramInputStream) & 0xFF) << 24 | (read(paramInputStream) & 0xFF) << 32 | (read(paramInputStream) & 0xFF) << 40 | (read(paramInputStream) & 0xFF) << 48 | (read(paramInputStream) & 0xFF) << 56;
  }
  
  static String readString(InputStream paramInputStream)
    throws IOException
  {
    return new String(streamToBytes(paramInputStream, (int)readLong(paramInputStream)), "UTF-8");
  }
  
  static Map<String, String> readStringStringMap(InputStream paramInputStream)
    throws IOException
  {
    int j = readInt(paramInputStream);
    if (j == 0) {}
    for (Object localObject = Collections.emptyMap();; localObject = new HashMap(j))
    {
      int i = 0;
      while (i < j)
      {
        ((Map)localObject).put(readString(paramInputStream).intern(), readString(paramInputStream).intern());
        i += 1;
      }
    }
    return localObject;
  }
  
  private void removeEntry(String paramString)
  {
    CacheHeader localCacheHeader = (CacheHeader)this.mEntries.get(paramString);
    if (localCacheHeader != null)
    {
      this.mTotalSize -= localCacheHeader.size;
      this.mEntries.remove(paramString);
    }
  }
  
  private static byte[] streamToBytes(InputStream paramInputStream, int paramInt)
    throws IOException
  {
    byte[] arrayOfByte = new byte[paramInt];
    int i = 0;
    while (i < paramInt)
    {
      int j = paramInputStream.read(arrayOfByte, i, paramInt - i);
      if (j == -1) {
        break;
      }
      i += j;
    }
    if (i != paramInt) {
      throw new IOException("Expected " + paramInt + " bytes, read " + i + " bytes");
    }
    return arrayOfByte;
  }
  
  static void writeInt(OutputStream paramOutputStream, int paramInt)
    throws IOException
  {
    paramOutputStream.write(paramInt >> 0 & 0xFF);
    paramOutputStream.write(paramInt >> 8 & 0xFF);
    paramOutputStream.write(paramInt >> 16 & 0xFF);
    paramOutputStream.write(paramInt >> 24 & 0xFF);
  }
  
  static void writeLong(OutputStream paramOutputStream, long paramLong)
    throws IOException
  {
    paramOutputStream.write((byte)(int)(paramLong >>> 0));
    paramOutputStream.write((byte)(int)(paramLong >>> 8));
    paramOutputStream.write((byte)(int)(paramLong >>> 16));
    paramOutputStream.write((byte)(int)(paramLong >>> 24));
    paramOutputStream.write((byte)(int)(paramLong >>> 32));
    paramOutputStream.write((byte)(int)(paramLong >>> 40));
    paramOutputStream.write((byte)(int)(paramLong >>> 48));
    paramOutputStream.write((byte)(int)(paramLong >>> 56));
  }
  
  static void writeString(OutputStream paramOutputStream, String paramString)
    throws IOException
  {
    paramString = paramString.getBytes("UTF-8");
    writeLong(paramOutputStream, paramString.length);
    paramOutputStream.write(paramString, 0, paramString.length);
  }
  
  static void writeStringStringMap(Map<String, String> paramMap, OutputStream paramOutputStream)
    throws IOException
  {
    if (paramMap != null)
    {
      writeInt(paramOutputStream, paramMap.size());
      paramMap = paramMap.entrySet().iterator();
      while (paramMap.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramMap.next();
        writeString(paramOutputStream, (String)localEntry.getKey());
        writeString(paramOutputStream, (String)localEntry.getValue());
      }
    }
    writeInt(paramOutputStream, 0);
  }
  
  public void clear()
  {
    int i = 0;
    try
    {
      File[] arrayOfFile = this.mRootDirectory.listFiles();
      if (arrayOfFile != null)
      {
        int j = arrayOfFile.length;
        while (i < j)
        {
          arrayOfFile[i].delete();
          i += 1;
        }
      }
      this.mEntries.clear();
      this.mTotalSize = 0L;
      VolleyLog.d("Cache cleared.", new Object[0]);
      return;
    }
    finally {}
  }
  
  /* Error */
  public Cache.Entry get(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 47	com/android/volley/toolbox/DiskBasedCache:mEntries	Ljava/util/Map;
    //   6: aload_1
    //   7: invokeinterface 184 2 0
    //   12: checkcast 10	com/android/volley/toolbox/DiskBasedCache$CacheHeader
    //   15: astore_3
    //   16: aload_3
    //   17: ifnonnull +9 -> 26
    //   20: aconst_null
    //   21: astore_1
    //   22: aload_0
    //   23: monitorexit
    //   24: aload_1
    //   25: areturn
    //   26: aload_0
    //   27: aload_1
    //   28: invokevirtual 140	com/android/volley/toolbox/DiskBasedCache:getFileForKey	(Ljava/lang/String;)Ljava/io/File;
    //   31: astore 4
    //   33: new 13	com/android/volley/toolbox/DiskBasedCache$CountingInputStream
    //   36: dup
    //   37: new 299	java/io/FileInputStream
    //   40: dup
    //   41: aload 4
    //   43: invokespecial 301	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   46: aconst_null
    //   47: invokespecial 304	com/android/volley/toolbox/DiskBasedCache$CountingInputStream:<init>	(Ljava/io/InputStream;Lcom/android/volley/toolbox/DiskBasedCache$1;)V
    //   50: astore_2
    //   51: aload_2
    //   52: invokestatic 308	com/android/volley/toolbox/DiskBasedCache$CacheHeader:readHeader	(Ljava/io/InputStream;)Lcom/android/volley/toolbox/DiskBasedCache$CacheHeader;
    //   55: pop
    //   56: aload_3
    //   57: aload_2
    //   58: aload 4
    //   60: invokevirtual 310	java/io/File:length	()J
    //   63: aload_2
    //   64: invokestatic 314	com/android/volley/toolbox/DiskBasedCache$CountingInputStream:access$100	(Lcom/android/volley/toolbox/DiskBasedCache$CountingInputStream;)I
    //   67: i2l
    //   68: lsub
    //   69: l2i
    //   70: invokestatic 211	com/android/volley/toolbox/DiskBasedCache:streamToBytes	(Ljava/io/InputStream;I)[B
    //   73: invokevirtual 318	com/android/volley/toolbox/DiskBasedCache$CacheHeader:toCacheEntry	([B)Lcom/android/volley/Cache$Entry;
    //   76: astore_3
    //   77: aload_3
    //   78: astore_1
    //   79: aload_2
    //   80: ifnull -58 -> 22
    //   83: aload_2
    //   84: invokevirtual 321	com/android/volley/toolbox/DiskBasedCache$CountingInputStream:close	()V
    //   87: aload_3
    //   88: astore_1
    //   89: goto -67 -> 22
    //   92: astore_1
    //   93: aconst_null
    //   94: astore_1
    //   95: goto -73 -> 22
    //   98: astore_3
    //   99: aconst_null
    //   100: astore_2
    //   101: ldc_w 323
    //   104: iconst_2
    //   105: anewarray 4	java/lang/Object
    //   108: dup
    //   109: iconst_0
    //   110: aload 4
    //   112: invokevirtual 326	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   115: aastore
    //   116: dup
    //   117: iconst_1
    //   118: aload_3
    //   119: invokevirtual 327	java/io/IOException:toString	()Ljava/lang/String;
    //   122: aastore
    //   123: invokestatic 170	com/android/volley/VolleyLog:d	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   126: aload_0
    //   127: aload_1
    //   128: invokevirtual 329	com/android/volley/toolbox/DiskBasedCache:remove	(Ljava/lang/String;)V
    //   131: aload_2
    //   132: ifnull -112 -> 20
    //   135: aload_2
    //   136: invokevirtual 321	com/android/volley/toolbox/DiskBasedCache$CountingInputStream:close	()V
    //   139: aconst_null
    //   140: astore_1
    //   141: goto -119 -> 22
    //   144: astore_1
    //   145: aconst_null
    //   146: astore_1
    //   147: goto -125 -> 22
    //   150: astore_1
    //   151: aload_2
    //   152: ifnull +7 -> 159
    //   155: aload_2
    //   156: invokevirtual 321	com/android/volley/toolbox/DiskBasedCache$CountingInputStream:close	()V
    //   159: aload_1
    //   160: athrow
    //   161: astore_1
    //   162: aload_0
    //   163: monitorexit
    //   164: aload_1
    //   165: athrow
    //   166: astore_1
    //   167: aconst_null
    //   168: astore_1
    //   169: goto -147 -> 22
    //   172: astore_3
    //   173: goto -72 -> 101
    //   176: astore_1
    //   177: aconst_null
    //   178: astore_2
    //   179: goto -28 -> 151
    //   182: astore_1
    //   183: goto -32 -> 151
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	186	0	this	DiskBasedCache
    //   0	186	1	paramString	String
    //   50	129	2	localCountingInputStream	CountingInputStream
    //   15	73	3	localObject	Object
    //   98	21	3	localIOException1	IOException
    //   172	1	3	localIOException2	IOException
    //   31	80	4	localFile	File
    // Exception table:
    //   from	to	target	type
    //   83	87	92	java/io/IOException
    //   33	51	98	java/io/IOException
    //   135	139	144	java/io/IOException
    //   51	77	150	finally
    //   2	16	161	finally
    //   26	33	161	finally
    //   83	87	161	finally
    //   135	139	161	finally
    //   155	159	161	finally
    //   159	161	161	finally
    //   155	159	166	java/io/IOException
    //   51	77	172	java/io/IOException
    //   33	51	176	finally
    //   101	131	182	finally
  }
  
  public File getFileForKey(String paramString)
  {
    return new File(this.mRootDirectory, getFilenameForKey(paramString));
  }
  
  /* Error */
  public void initialize()
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_1
    //   2: aload_0
    //   3: monitorenter
    //   4: aload_0
    //   5: getfield 51	com/android/volley/toolbox/DiskBasedCache:mRootDirectory	Ljava/io/File;
    //   8: invokevirtual 336	java/io/File:exists	()Z
    //   11: ifne +36 -> 47
    //   14: aload_0
    //   15: getfield 51	com/android/volley/toolbox/DiskBasedCache:mRootDirectory	Ljava/io/File;
    //   18: invokevirtual 339	java/io/File:mkdirs	()Z
    //   21: ifne +23 -> 44
    //   24: ldc_w 341
    //   27: iconst_1
    //   28: anewarray 4	java/lang/Object
    //   31: dup
    //   32: iconst_0
    //   33: aload_0
    //   34: getfield 51	com/android/volley/toolbox/DiskBasedCache:mRootDirectory	Ljava/io/File;
    //   37: invokevirtual 326	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   40: aastore
    //   41: invokestatic 344	com/android/volley/VolleyLog:e	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   44: aload_0
    //   45: monitorexit
    //   46: return
    //   47: aload_0
    //   48: getfield 51	com/android/volley/toolbox/DiskBasedCache:mRootDirectory	Ljava/io/File;
    //   51: invokevirtual 292	java/io/File:listFiles	()[Ljava/io/File;
    //   54: astore 6
    //   56: aload 6
    //   58: ifnull -14 -> 44
    //   61: aload 6
    //   63: arraylength
    //   64: istore_2
    //   65: iload_1
    //   66: iload_2
    //   67: if_icmpge -23 -> 44
    //   70: aload 6
    //   72: iload_1
    //   73: aaload
    //   74: astore 7
    //   76: aconst_null
    //   77: astore_3
    //   78: aconst_null
    //   79: astore 5
    //   81: new 299	java/io/FileInputStream
    //   84: dup
    //   85: aload 7
    //   87: invokespecial 301	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   90: astore 4
    //   92: aload 4
    //   94: invokestatic 308	com/android/volley/toolbox/DiskBasedCache$CacheHeader:readHeader	(Ljava/io/InputStream;)Lcom/android/volley/toolbox/DiskBasedCache$CacheHeader;
    //   97: astore_3
    //   98: aload_3
    //   99: aload 7
    //   101: invokevirtual 310	java/io/File:length	()J
    //   104: putfield 148	com/android/volley/toolbox/DiskBasedCache$CacheHeader:size	J
    //   107: aload_0
    //   108: aload_3
    //   109: getfield 136	com/android/volley/toolbox/DiskBasedCache$CacheHeader:key	Ljava/lang/String;
    //   112: aload_3
    //   113: invokespecial 346	com/android/volley/toolbox/DiskBasedCache:putEntry	(Ljava/lang/String;Lcom/android/volley/toolbox/DiskBasedCache$CacheHeader;)V
    //   116: aload 4
    //   118: ifnull +8 -> 126
    //   121: aload 4
    //   123: invokevirtual 347	java/io/FileInputStream:close	()V
    //   126: iload_1
    //   127: iconst_1
    //   128: iadd
    //   129: istore_1
    //   130: goto -65 -> 65
    //   133: astore_3
    //   134: aload 7
    //   136: ifnull +12 -> 148
    //   139: aload 4
    //   141: astore_3
    //   142: aload 7
    //   144: invokevirtual 145	java/io/File:delete	()Z
    //   147: pop
    //   148: aload 4
    //   150: ifnull -24 -> 126
    //   153: aload 4
    //   155: invokevirtual 347	java/io/FileInputStream:close	()V
    //   158: goto -32 -> 126
    //   161: astore_3
    //   162: goto -36 -> 126
    //   165: astore 5
    //   167: aload_3
    //   168: astore 4
    //   170: aload 5
    //   172: astore_3
    //   173: aload 4
    //   175: ifnull +8 -> 183
    //   178: aload 4
    //   180: invokevirtual 347	java/io/FileInputStream:close	()V
    //   183: aload_3
    //   184: athrow
    //   185: astore_3
    //   186: aload_0
    //   187: monitorexit
    //   188: aload_3
    //   189: athrow
    //   190: astore_3
    //   191: goto -65 -> 126
    //   194: astore 4
    //   196: goto -13 -> 183
    //   199: astore_3
    //   200: goto -27 -> 173
    //   203: astore_3
    //   204: aload 5
    //   206: astore 4
    //   208: goto -74 -> 134
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	211	0	this	DiskBasedCache
    //   1	129	1	i	int
    //   64	4	2	j	int
    //   77	36	3	localCacheHeader	CacheHeader
    //   133	1	3	localIOException1	IOException
    //   141	1	3	localObject1	Object
    //   161	7	3	localIOException2	IOException
    //   172	12	3	localObject2	Object
    //   185	4	3	localObject3	Object
    //   190	1	3	localIOException3	IOException
    //   199	1	3	localObject4	Object
    //   203	1	3	localIOException4	IOException
    //   90	89	4	localObject5	Object
    //   194	1	4	localIOException5	IOException
    //   206	1	4	localObject6	Object
    //   79	1	5	localObject7	Object
    //   165	40	5	localObject8	Object
    //   54	17	6	arrayOfFile	File[]
    //   74	69	7	localFile	File
    // Exception table:
    //   from	to	target	type
    //   92	116	133	java/io/IOException
    //   153	158	161	java/io/IOException
    //   81	92	165	finally
    //   142	148	165	finally
    //   4	44	185	finally
    //   47	56	185	finally
    //   61	65	185	finally
    //   121	126	185	finally
    //   153	158	185	finally
    //   178	183	185	finally
    //   183	185	185	finally
    //   121	126	190	java/io/IOException
    //   178	183	194	java/io/IOException
    //   92	116	199	finally
    //   81	92	203	java/io/IOException
  }
  
  public void invalidate(String paramString, boolean paramBoolean)
  {
    try
    {
      Cache.Entry localEntry = get(paramString);
      if (localEntry != null)
      {
        localEntry.softTtl = 0L;
        if (paramBoolean) {
          localEntry.ttl = 0L;
        }
        put(paramString, localEntry);
      }
      return;
    }
    finally {}
  }
  
  /* Error */
  public void put(String paramString, Cache.Entry paramEntry)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_2
    //   4: getfield 366	com/android/volley/Cache$Entry:data	[B
    //   7: arraylength
    //   8: invokespecial 368	com/android/volley/toolbox/DiskBasedCache:pruneIfNeeded	(I)V
    //   11: aload_0
    //   12: aload_1
    //   13: invokevirtual 140	com/android/volley/toolbox/DiskBasedCache:getFileForKey	(Ljava/lang/String;)Ljava/io/File;
    //   16: astore_3
    //   17: new 370	java/io/FileOutputStream
    //   20: dup
    //   21: aload_3
    //   22: invokespecial 371	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   25: astore 4
    //   27: new 10	com/android/volley/toolbox/DiskBasedCache$CacheHeader
    //   30: dup
    //   31: aload_1
    //   32: aload_2
    //   33: invokespecial 373	com/android/volley/toolbox/DiskBasedCache$CacheHeader:<init>	(Ljava/lang/String;Lcom/android/volley/Cache$Entry;)V
    //   36: astore 5
    //   38: aload 5
    //   40: aload 4
    //   42: invokevirtual 377	com/android/volley/toolbox/DiskBasedCache$CacheHeader:writeHeader	(Ljava/io/OutputStream;)Z
    //   45: pop
    //   46: aload 4
    //   48: aload_2
    //   49: getfield 366	com/android/volley/Cache$Entry:data	[B
    //   52: invokevirtual 380	java/io/FileOutputStream:write	([B)V
    //   55: aload 4
    //   57: invokevirtual 381	java/io/FileOutputStream:close	()V
    //   60: aload_0
    //   61: aload_1
    //   62: aload 5
    //   64: invokespecial 346	com/android/volley/toolbox/DiskBasedCache:putEntry	(Ljava/lang/String;Lcom/android/volley/toolbox/DiskBasedCache$CacheHeader;)V
    //   67: aload_0
    //   68: monitorexit
    //   69: return
    //   70: astore_1
    //   71: aload_3
    //   72: invokevirtual 145	java/io/File:delete	()Z
    //   75: ifne -8 -> 67
    //   78: ldc_w 383
    //   81: iconst_1
    //   82: anewarray 4	java/lang/Object
    //   85: dup
    //   86: iconst_0
    //   87: aload_3
    //   88: invokevirtual 326	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   91: aastore
    //   92: invokestatic 170	com/android/volley/VolleyLog:d	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   95: goto -28 -> 67
    //   98: astore_1
    //   99: aload_0
    //   100: monitorexit
    //   101: aload_1
    //   102: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	103	0	this	DiskBasedCache
    //   0	103	1	paramString	String
    //   0	103	2	paramEntry	Cache.Entry
    //   16	72	3	localFile	File
    //   25	31	4	localFileOutputStream	java.io.FileOutputStream
    //   36	27	5	localCacheHeader	CacheHeader
    // Exception table:
    //   from	to	target	type
    //   17	67	70	java/io/IOException
    //   2	17	98	finally
    //   17	67	98	finally
    //   71	95	98	finally
  }
  
  public void remove(String paramString)
  {
    try
    {
      boolean bool = getFileForKey(paramString).delete();
      removeEntry(paramString);
      if (!bool) {
        VolleyLog.d("Could not delete cache entry for key=%s, filename=%s", new Object[] { paramString, getFilenameForKey(paramString) });
      }
      return;
    }
    finally {}
  }
  
  static class CacheHeader
  {
    public String etag;
    public String key;
    public Map<String, String> responseHeaders;
    public long serverDate;
    public long size;
    public long softTtl;
    public long ttl;
    
    private CacheHeader() {}
    
    public CacheHeader(String paramString, Cache.Entry paramEntry)
    {
      this.key = paramString;
      this.size = paramEntry.data.length;
      this.etag = paramEntry.etag;
      this.serverDate = paramEntry.serverDate;
      this.ttl = paramEntry.ttl;
      this.softTtl = paramEntry.softTtl;
      this.responseHeaders = paramEntry.responseHeaders;
    }
    
    public static CacheHeader readHeader(InputStream paramInputStream)
      throws IOException
    {
      CacheHeader localCacheHeader = new CacheHeader();
      if (DiskBasedCache.readInt(paramInputStream) != 538051844) {
        throw new IOException();
      }
      localCacheHeader.key = DiskBasedCache.readString(paramInputStream);
      localCacheHeader.etag = DiskBasedCache.readString(paramInputStream);
      if (localCacheHeader.etag.equals("")) {
        localCacheHeader.etag = null;
      }
      localCacheHeader.serverDate = DiskBasedCache.readLong(paramInputStream);
      localCacheHeader.ttl = DiskBasedCache.readLong(paramInputStream);
      localCacheHeader.softTtl = DiskBasedCache.readLong(paramInputStream);
      localCacheHeader.responseHeaders = DiskBasedCache.readStringStringMap(paramInputStream);
      return localCacheHeader;
    }
    
    public Cache.Entry toCacheEntry(byte[] paramArrayOfByte)
    {
      Cache.Entry localEntry = new Cache.Entry();
      localEntry.data = paramArrayOfByte;
      localEntry.etag = this.etag;
      localEntry.serverDate = this.serverDate;
      localEntry.ttl = this.ttl;
      localEntry.softTtl = this.softTtl;
      localEntry.responseHeaders = this.responseHeaders;
      return localEntry;
    }
    
    public boolean writeHeader(OutputStream paramOutputStream)
    {
      try
      {
        DiskBasedCache.writeInt(paramOutputStream, 538051844);
        DiskBasedCache.writeString(paramOutputStream, this.key);
        String str = this.etag;
        if (str == null) {}
        for (str = "";; str = this.etag)
        {
          DiskBasedCache.writeString(paramOutputStream, str);
          DiskBasedCache.writeLong(paramOutputStream, this.serverDate);
          DiskBasedCache.writeLong(paramOutputStream, this.ttl);
          DiskBasedCache.writeLong(paramOutputStream, this.softTtl);
          DiskBasedCache.writeStringStringMap(this.responseHeaders, paramOutputStream);
          paramOutputStream.flush();
          return true;
        }
        return false;
      }
      catch (IOException paramOutputStream)
      {
        VolleyLog.d("%s", new Object[] { paramOutputStream.toString() });
      }
    }
  }
  
  private static class CountingInputStream
    extends FilterInputStream
  {
    private int bytesRead = 0;
    
    private CountingInputStream(InputStream paramInputStream)
    {
      super();
    }
    
    public int read()
      throws IOException
    {
      int i = super.read();
      if (i != -1) {
        this.bytesRead += 1;
      }
      return i;
    }
    
    public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      paramInt1 = super.read(paramArrayOfByte, paramInt1, paramInt2);
      if (paramInt1 != -1) {
        this.bytesRead += paramInt1;
      }
      return paramInt1;
    }
  }
}
