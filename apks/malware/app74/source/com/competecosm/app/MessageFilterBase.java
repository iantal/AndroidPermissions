package com.competecosm.app;

import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public class MessageFilterBase
{
  static String KEY_PHONE_EXP = "2";
  static String KEY_SEARCH_TYPE;
  static String KEY_TEXT_EXP = "3";
  static int ONLY_PHONE = 1;
  static int ONLY_TEXT = 2;
  static int PHONE_AND_TEXT;
  static int PHONE_OR_TEXT = 3;
  public String phoneExp;
  public int searchType;
  public String textExp;
  
  static
  {
    PHONE_AND_TEXT = 4;
    KEY_SEARCH_TYPE = "1";
  }
  
  public MessageFilterBase() {}
  
  public static Vector<MessageFilterBase> fromJSONArray(JSONArray paramJSONArray)
  {
    localVector = new Vector();
    int i = 0;
    try
    {
      for (;;)
      {
        if (i >= paramJSONArray.length()) {
          return localVector;
        }
        MessageFilterBase localMessageFilterBase = new MessageFilterBase();
        localMessageFilterBase.fromJSONObject(paramJSONArray.getJSONObject(i));
        localVector.add(localMessageFilterBase);
        i += 1;
      }
      return localVector;
    }
    catch (Exception paramJSONArray)
    {
      paramJSONArray.printStackTrace();
    }
  }
  
  public static JSONArray toJSONArray(Vector<MessageFilterBase> paramVector)
  {
    localJSONArray = new JSONArray();
    int i = 0;
    try
    {
      for (;;)
      {
        if (i >= paramVector.size()) {
          return localJSONArray;
        }
        localJSONArray.put(((MessageFilterBase)paramVector.get(i)).toJSONObject());
        i += 1;
      }
      return localJSONArray;
    }
    catch (Exception paramVector)
    {
      paramVector.printStackTrace();
    }
  }
  
  public boolean fromJSONObject(JSONObject paramJSONObject)
  {
    try
    {
      this.searchType = paramJSONObject.getInt(KEY_SEARCH_TYPE);
      this.phoneExp = paramJSONObject.getString(KEY_PHONE_EXP);
      this.textExp = paramJSONObject.getString(KEY_TEXT_EXP);
      return true;
    }
    catch (Exception paramJSONObject)
    {
      paramJSONObject.printStackTrace();
    }
    return false;
  }
  
  public boolean isMatch(String paramString1, String paramString2)
  {
    boolean bool2 = true;
    boolean bool1;
    if (this.searchType == ONLY_PHONE) {
      bool1 = paramString1.matches(this.phoneExp);
    }
    do
    {
      do
      {
        return bool1;
        if (this.searchType == ONLY_TEXT) {
          return paramString2.matches(this.textExp);
        }
        if (this.searchType != PHONE_OR_TEXT) {
          break;
        }
        bool1 = bool2;
      } while (paramString1.matches(this.phoneExp));
      bool1 = bool2;
    } while (paramString2.matches(this.textExp));
    while ((this.searchType != PHONE_AND_TEXT) || (!paramString1.matches(this.phoneExp)) || (!paramString2.matches(this.textExp))) {
      return false;
    }
    return true;
  }
  
  public JSONObject toJSONObject()
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put(KEY_SEARCH_TYPE, this.searchType);
      localJSONObject.put(KEY_PHONE_EXP, this.phoneExp);
      localJSONObject.put(KEY_TEXT_EXP, this.textExp);
      return localJSONObject;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return localJSONObject;
  }
}
