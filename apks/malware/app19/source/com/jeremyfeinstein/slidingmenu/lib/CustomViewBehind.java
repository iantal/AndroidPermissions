package com.jeremyfeinstein.slidingmenu.lib;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;

public class CustomViewBehind
  extends ViewGroup
{
  private int a = 0;
  private CustomViewAbove b;
  private View c;
  private View d;
  private int e = (int)TypedValue.applyDimension(1, 48.0F, getResources().getDisplayMetrics());
  private int f;
  private k g;
  private boolean h;
  private int i;
  private boolean j;
  private final Paint k = new Paint();
  private float l;
  private Drawable m;
  private Drawable n;
  private int o;
  private float p;
  private boolean q = true;
  private Bitmap r;
  private View s;
  
  public CustomViewBehind(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public CustomViewBehind(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
  }
  
  private int getSelectorTop()
  {
    return this.s.getTop() + (this.s.getHeight() - this.r.getHeight()) / 2;
  }
  
  public int a(int paramInt)
  {
    int i1;
    if (paramInt > 1) {
      i1 = 2;
    }
    while ((this.i == 0) && (i1 > 1))
    {
      return 0;
      i1 = paramInt;
      if (paramInt < 1) {
        i1 = 0;
      }
    }
    if ((this.i == 1) && (i1 < 1)) {
      return 2;
    }
    return i1;
  }
  
  public int a(View paramView)
  {
    if ((this.i == 0) || (this.i == 2)) {
      return paramView.getLeft() - getBehindWidth();
    }
    if (this.i == 1) {
      return paramView.getLeft();
    }
    return 0;
  }
  
  public int a(View paramView, int paramInt)
  {
    if (this.i == 0) {
      switch (paramInt)
      {
      }
    }
    for (;;)
    {
      return paramView.getLeft();
      return paramView.getLeft() - getBehindWidth();
      return paramView.getLeft();
      if (this.i == 1) {
        switch (paramInt)
        {
        case 1: 
        default: 
          break;
        case 0: 
          return paramView.getLeft();
        case 2: 
          return paramView.getLeft() + getBehindWidth();
        }
      } else if (this.i == 2) {
        switch (paramInt)
        {
        }
      }
    }
    return paramView.getLeft() - getBehindWidth();
    return paramView.getLeft() + getBehindWidth();
  }
  
  public void a(View paramView, int paramInt1, int paramInt2)
  {
    int i3 = 0;
    int i4 = 0;
    int i2 = 0;
    int i1 = 0;
    if (this.i == 0)
    {
      if (paramInt1 >= paramView.getLeft()) {
        i1 = 4;
      }
      scrollTo((int)((getBehindWidth() + paramInt1) * this.l), paramInt2);
    }
    for (;;)
    {
      if (i1 == 4) {
        Log.v("CustomViewBehind", "behind INVISIBLE");
      }
      setVisibility(i1);
      return;
      if (this.i == 1)
      {
        i1 = i4;
        if (paramInt1 <= paramView.getLeft()) {
          i1 = 4;
        }
        scrollTo((int)(getBehindWidth() - getWidth() + (paramInt1 - getBehindWidth()) * this.l), paramInt2);
      }
      else
      {
        i1 = i3;
        if (this.i == 2)
        {
          View localView = this.c;
          if (paramInt1 >= paramView.getLeft())
          {
            i1 = 4;
            label153:
            localView.setVisibility(i1);
            localView = this.d;
            if (paramInt1 > paramView.getLeft()) {
              break label230;
            }
          }
          label230:
          for (i1 = 4;; i1 = 0)
          {
            localView.setVisibility(i1);
            i1 = i2;
            if (paramInt1 == 0) {
              i1 = 4;
            }
            if (paramInt1 > paramView.getLeft()) {
              break label236;
            }
            scrollTo((int)((getBehindWidth() + paramInt1) * this.l), paramInt2);
            break;
            i1 = 0;
            break label153;
          }
          label236:
          scrollTo((int)(getBehindWidth() - getWidth() + (paramInt1 - getBehindWidth()) * this.l), paramInt2);
        }
      }
    }
  }
  
  public void a(View paramView, Canvas paramCanvas)
  {
    if ((this.m == null) || (this.o <= 0)) {
      return;
    }
    int i1;
    if (this.i == 0) {
      i1 = paramView.getLeft() - this.o;
    }
    for (;;)
    {
      this.m.setBounds(i1, 0, this.o + i1, getHeight());
      this.m.draw(paramCanvas);
      return;
      if (this.i == 1)
      {
        i1 = paramView.getRight();
      }
      else if (this.i == 2)
      {
        if (this.n != null)
        {
          i1 = paramView.getRight();
          this.n.setBounds(i1, 0, this.o + i1, getHeight());
          this.n.draw(paramCanvas);
        }
        i1 = paramView.getLeft() - this.o;
      }
      else
      {
        i1 = 0;
      }
    }
  }
  
  public void a(View paramView, Canvas paramCanvas, float paramFloat)
  {
    int i1 = 0;
    if (!this.j) {
      return;
    }
    int i2 = (int)(255.0F * this.p * Math.abs(1.0F - paramFloat));
    this.k.setColor(Color.argb(i2, 0, 0, 0));
    if (this.i == 0)
    {
      i1 = paramView.getLeft() - getBehindWidth();
      i2 = paramView.getLeft();
    }
    for (;;)
    {
      paramCanvas.drawRect(i1, 0.0F, i2, getHeight(), this.k);
      return;
      if (this.i == 1)
      {
        i1 = paramView.getRight();
        i2 = paramView.getRight() + getBehindWidth();
      }
      else if (this.i == 2)
      {
        i1 = paramView.getLeft();
        i2 = getBehindWidth();
        int i3 = paramView.getLeft();
        paramCanvas.drawRect(i1 - i2, 0.0F, i3, getHeight(), this.k);
        i1 = paramView.getRight();
        i2 = paramView.getRight() + getBehindWidth();
      }
      else
      {
        i2 = 0;
      }
    }
  }
  
  public boolean a(float paramFloat)
  {
    boolean bool = false;
    if (this.i == 0) {
      if (paramFloat <= 0.0F) {}
    }
    do
    {
      do
      {
        bool = true;
        return bool;
        if (this.i != 1) {
          break;
        }
      } while (paramFloat < 0.0F);
      return false;
    } while (this.i == 2);
    return false;
  }
  
  public boolean a(View paramView, int paramInt, float paramFloat)
  {
    switch (this.a)
    {
    default: 
      return false;
    case 1: 
      return true;
    }
    return b(paramView, paramInt, paramFloat);
  }
  
  public int b(View paramView)
  {
    if (this.i == 0) {
      return paramView.getLeft();
    }
    if ((this.i == 1) || (this.i == 2)) {
      return paramView.getLeft() + getBehindWidth();
    }
    return 0;
  }
  
  public void b(View paramView, Canvas paramCanvas, float paramFloat)
  {
    if (!this.q) {}
    while ((this.r == null) || (this.s == null) || (!((String)this.s.getTag(f.selected_view)).equals("CustomViewBehindSelectedView"))) {
      return;
    }
    paramCanvas.save();
    int i1 = (int)(this.r.getWidth() * paramFloat);
    int i2;
    if (this.i == 0)
    {
      i2 = paramView.getLeft();
      i1 = i2 - i1;
      paramCanvas.clipRect(i1, 0, i2, getHeight());
      paramCanvas.drawBitmap(this.r, i1, getSelectorTop(), null);
    }
    for (;;)
    {
      paramCanvas.restore();
      return;
      if (this.i == 1)
      {
        i2 = paramView.getRight();
        i1 += i2;
        paramCanvas.clipRect(i2, 0, i1, getHeight());
        paramCanvas.drawBitmap(this.r, i1 - this.r.getWidth(), getSelectorTop(), null);
      }
    }
  }
  
  public boolean b(float paramFloat)
  {
    boolean bool = false;
    if (this.i == 0) {
      if (paramFloat >= 0.0F) {}
    }
    do
    {
      do
      {
        bool = true;
        return bool;
        if (this.i != 1) {
          break;
        }
      } while (paramFloat > 0.0F);
      return false;
    } while (this.i == 2);
    return false;
  }
  
  public boolean b(View paramView, int paramInt)
  {
    boolean bool2 = false;
    int i1 = paramView.getLeft();
    int i2 = paramView.getRight();
    boolean bool1;
    if (this.i == 0)
    {
      bool1 = bool2;
      if (paramInt >= i1)
      {
        bool1 = bool2;
        if (paramInt > i1 + this.e) {}
      }
    }
    do
    {
      bool1 = true;
      do
      {
        do
        {
          do
          {
            return bool1;
            if (this.i != 1) {
              break;
            }
            bool1 = bool2;
          } while (paramInt > i2);
          if (paramInt >= i2 - this.e) {
            break;
          }
          return false;
          bool1 = bool2;
        } while (this.i != 2);
        if ((paramInt >= i1) && (paramInt <= i1 + this.e)) {
          break;
        }
        bool1 = bool2;
      } while (paramInt > i2);
    } while (paramInt >= i2 - this.e);
    return false;
  }
  
  public boolean b(View paramView, int paramInt, float paramFloat)
  {
    boolean bool2 = false;
    boolean bool1;
    if ((this.i == 0) || ((this.i == 2) && (paramInt == 0)))
    {
      bool1 = bool2;
      if (paramFloat >= paramView.getLeft()) {
        bool1 = true;
      }
    }
    do
    {
      do
      {
        do
        {
          return bool1;
          if (this.i == 1) {
            break;
          }
          bool1 = bool2;
        } while (this.i != 2);
        bool1 = bool2;
      } while (paramInt != 2);
      bool1 = bool2;
    } while (paramFloat > paramView.getRight());
    return true;
  }
  
  protected void dispatchDraw(Canvas paramCanvas)
  {
    if (this.g != null)
    {
      paramCanvas.save();
      this.g.a(paramCanvas, this.b.getPercentOpen());
      super.dispatchDraw(paramCanvas);
      paramCanvas.restore();
      return;
    }
    super.dispatchDraw(paramCanvas);
  }
  
  public int getBehindWidth()
  {
    return this.c.getWidth();
  }
  
  public View getContent()
  {
    return this.c;
  }
  
  public int getMarginThreshold()
  {
    return this.e;
  }
  
  public int getMode()
  {
    return this.i;
  }
  
  public float getScrollScale()
  {
    return this.l;
  }
  
  public View getSecondaryContent()
  {
    return this.d;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    return !this.h;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt1 = paramInt3 - paramInt1;
    paramInt2 = paramInt4 - paramInt2;
    this.c.layout(0, 0, paramInt1 - this.f, paramInt2);
    if (this.d != null) {
      this.d.layout(0, 0, paramInt1 - this.f, paramInt2);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i2 = getDefaultSize(0, paramInt1);
    int i1 = getDefaultSize(0, paramInt2);
    setMeasuredDimension(i2, i1);
    paramInt1 = getChildMeasureSpec(paramInt1, 0, i2 - this.f);
    paramInt2 = getChildMeasureSpec(paramInt2, 0, i1);
    this.c.measure(paramInt1, paramInt2);
    if (this.d != null) {
      this.d.measure(paramInt1, paramInt2);
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    return !this.h;
  }
  
  public void scrollTo(int paramInt1, int paramInt2)
  {
    super.scrollTo(paramInt1, paramInt2);
    if (this.g != null) {
      invalidate();
    }
  }
  
  public void setCanvasTransformer(k paramK)
  {
    this.g = paramK;
  }
  
  public void setChildrenEnabled(boolean paramBoolean)
  {
    this.h = paramBoolean;
  }
  
  public void setContent(View paramView)
  {
    if (this.c != null) {
      removeView(this.c);
    }
    this.c = paramView;
    addView(this.c);
  }
  
  public void setCustomViewAbove(CustomViewAbove paramCustomViewAbove)
  {
    this.b = paramCustomViewAbove;
  }
  
  public void setFadeDegree(float paramFloat)
  {
    if ((paramFloat > 1.0F) || (paramFloat < 0.0F)) {
      throw new IllegalStateException("The BehindFadeDegree must be between 0.0f and 1.0f");
    }
    this.p = paramFloat;
  }
  
  public void setFadeEnabled(boolean paramBoolean)
  {
    this.j = paramBoolean;
  }
  
  public void setMarginThreshold(int paramInt)
  {
    this.e = paramInt;
  }
  
  public void setMode(int paramInt)
  {
    if ((paramInt == 0) || (paramInt == 1))
    {
      if (this.c != null) {
        this.c.setVisibility(0);
      }
      if (this.d != null) {
        this.d.setVisibility(4);
      }
    }
    this.i = paramInt;
  }
  
  public void setScrollScale(float paramFloat)
  {
    this.l = paramFloat;
  }
  
  public void setSecondaryContent(View paramView)
  {
    if (this.d != null) {
      removeView(this.d);
    }
    this.d = paramView;
    addView(this.d);
  }
  
  public void setSecondaryShadowDrawable(Drawable paramDrawable)
  {
    this.n = paramDrawable;
    invalidate();
  }
  
  public void setSelectedView(View paramView)
  {
    if (this.s != null)
    {
      this.s.setTag(f.selected_view, null);
      this.s = null;
    }
    if ((paramView != null) && (paramView.getParent() != null))
    {
      this.s = paramView;
      this.s.setTag(f.selected_view, "CustomViewBehindSelectedView");
      invalidate();
    }
  }
  
  public void setSelectorBitmap(Bitmap paramBitmap)
  {
    this.r = paramBitmap;
    refreshDrawableState();
  }
  
  public void setSelectorEnabled(boolean paramBoolean)
  {
    this.q = paramBoolean;
  }
  
  public void setShadowDrawable(Drawable paramDrawable)
  {
    this.m = paramDrawable;
    invalidate();
  }
  
  public void setShadowWidth(int paramInt)
  {
    this.o = paramInt;
    invalidate();
  }
  
  public void setTouchMode(int paramInt)
  {
    this.a = paramInt;
  }
  
  public void setWidthOffset(int paramInt)
  {
    this.f = paramInt;
    requestLayout();
  }
}
