package com.snowfish.a.a.l;

import android.content.Context;
import android.os.Environment;
import android.os.StatFs;
import android.util.Log;
import com.snowfish.a.a.p.ILoader;
import com.snowfish.a.a.p.IReloadable;
import java.io.File;
import java.lang.reflect.Constructor;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public final class i
  implements ILoader
{
  private static i a;
  private static byte[] d = { 114, 101, 115, 46, 98, 105, 110 };
  private static byte[] e = { 114, 101, 115, 46, 97, 112, 107 };
  private static byte[] f = { 83, 111, 110, 110, 101, 110, 98, 108, 117, 109, 101 };
  private static String g = e.a(d);
  private static String h = e.a(e);
  private Context b;
  private long c;
  private long i;
  private Map j = new HashMap();
  private ClassLoader k;
  private File l;
  private long m;
  private boolean n;
  
  private i(Context paramContext)
  {
    this.b = paramContext;
    this.l = new File(b(paramContext), h);
    this.m = h.a(g, "/assets/Sonnenblume/", h, b(paramContext));
  }
  
  public static i a(Context paramContext)
  {
    try
    {
      if (a == null) {
        a = new i(paramContext);
      }
      paramContext = a;
      return paramContext;
    }
    finally {}
  }
  
  private static boolean a()
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    try
    {
      if (Environment.getExternalStorageState().equals("mounted"))
      {
        StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
        long l1 = localStatFs.getBlockSize();
        l1 = localStatFs.getAvailableBlocks() * l1 / 1024L;
        bool1 = bool2;
        if (l1 > 300L) {
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (Throwable localThrowable)
    {
      localThrowable.printStackTrace();
    }
    return false;
  }
  
  private static File b(Context paramContext)
  {
    if (a()) {
      return new File(Environment.getExternalStorageDirectory().getPath(), e.a(f));
    }
    return paramContext.getDir(e.a(f), 3);
  }
  
  public final IReloadable a(String paramString)
  {
    d localD1;
    Object localObject1;
    long l1;
    for (;;)
    {
      try
      {
        localD1 = (d)this.j.get(paramString);
        localObject1 = this.k;
        boolean bool = this.l.exists();
        if (bool) {
          break;
        }
        if (localD1 == null) {
          try
          {
            Thread.sleep(100L);
            this.m = h.a(g, "/assets/Sonnenblume/", h, b(this.b));
            l1 = this.m;
            if (l1 >= 0L) {
              break;
            }
            paramString = null;
            return paramString;
          }
          catch (InterruptedException localInterruptedException)
          {
            localInterruptedException.printStackTrace();
            continue;
          }
        }
        paramString = localD1.a;
      }
      finally {}
    }
    Object localObject2 = this.j.values().iterator();
    label127:
    if (!((Iterator)localObject2).hasNext())
    {
      i1 = 1;
      label139:
      if (i1 == 0) {
        break label276;
      }
      l1 = this.l.lastModified();
      if (l1 == this.i) {
        break label574;
      }
      this.i = l1;
    }
    label276:
    label565:
    label568:
    label574:
    for (int i1 = 1;; i1 = 0)
    {
      if (i1 == 0) {
        if (this.n) {
          break label568;
        }
      }
      for (;;)
      {
        this.n = false;
        if (localObject1 == null)
        {
          this.m = h.a(this.l);
          localObject1 = f.a(this.l, this.b);
          if (localObject1 == null)
          {
            if (localD1 == null)
            {
              paramString = null;
              break;
              d localD2 = (d)((Iterator)localObject2).next();
              if ((localD2.a.isReloadable()) || (localD2.b != this.c)) {
                break label127;
              }
              i1 = 0;
              break label139;
              if ((localD1 == null) || (localD1.b != this.c)) {
                break label565;
              }
              paramString = localD1.a;
              break;
            }
            paramString = localD1.a;
            break;
          }
          this.k = ((ClassLoader)localObject1);
          this.c += 1L;
        }
        try
        {
          localObject2 = Class.forName(paramString, true, this.k);
          try
          {
            localObject1 = (IReloadable)((Class)localObject2).getConstructor(new Class[] { ILoader.class, Context.class }).newInstance(new Object[] { this, this.b });
            if (localD1 != null)
            {
              localObject2 = localD1.a.onUnload();
              ((IReloadable)localObject1).onReload(this.b, localObject2);
            }
            localObject2 = new d(this, (byte)0);
            ((d)localObject2).b = this.c;
            ((d)localObject2).a = ((IReloadable)localObject1);
            this.j.put(paramString, localObject2);
            paramString = (String)localObject1;
          }
          catch (Exception localException1)
          {
            for (;;)
            {
              Log.e("idle", "LE1 ", localException1);
              try
              {
                IReloadable localIReloadable1 = (IReloadable)((Class)localObject2).getConstructor(new Class[] { Context.class }).newInstance(new Object[] { this.b });
              }
              catch (Exception localException2)
              {
                Log.e("idle", "LE2 ", localException2);
                localIReloadable2 = (IReloadable)((Class)localObject2).newInstance();
              }
            }
          }
        }
        catch (Exception paramString)
        {
          Log.e("idle", "LE3 ", paramString);
          if (localD1 == null)
          {
            paramString = null;
            break;
          }
          paramString = localD1.a;
        }
        break;
        continue;
        IReloadable localIReloadable2 = null;
      }
    }
  }
  
  public final Object forceReload(String paramString, boolean paramBoolean)
  {
    this.n = true;
    if ((paramBoolean) && (paramString != null)) {
      return a(paramString);
    }
    return null;
  }
  
  public final long getLoadedVersion()
  {
    return this.m;
  }
  
  public final long getLoaderVersion()
  {
    return this.c;
  }
}
