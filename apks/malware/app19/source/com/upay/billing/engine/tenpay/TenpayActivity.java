package com.upay.billing.engine.tenpay;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.KeyEvent;
import android.view.ViewGroup.LayoutParams;
import android.webkit.CookieManager;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Trade;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

@SuppressLint({"HandlerLeak"})
public class TenpayActivity
  extends Activity
{
  private static final String TAG = "TenpayActivity";
  private static final String payUrl = "http://121.52.218.66:8011/request_v2.php";
  private int PAY_CODE = 121;
  private RelativeLayout container;
  private String goodsName = null;
  private Handler mHandler = new TenpayActivity.1(this);
  private Trade mTrade;
  private String price = null;
  private int result;
  private int result_charge;
  private String tradeId = null;
  private String uid = null;
  Handler verifyHandler = new TenpayActivity.2(this);
  private WebView webView;
  
  public TenpayActivity() {}
  
  private void exit()
  {
    if (this.PAY_CODE == 200)
    {
      UpayCore.getInstance(this).paymentCompleted(this.mTrade, this.PAY_CODE);
      UpayCore.getInstance(this).tradeUpdated(this.mTrade, "tenpay", 1, 200);
      this.result = this.PAY_CODE;
    }
    for (this.result_charge = this.PAY_CODE;; this.result_charge = 146)
    {
      UpayCore.getInstance(this).logEvent(this.mTrade.appKey, "exec_pay", Json.createObject(new Object[] { "trade_id", this.mTrade.id, "goods_key", this.mTrade.goodsKey, "cmd_key", "tenpay", "bt_key", "tenpay", "target", "", "sn", this.mTrade.id + "01", "request", "", "response", "", "result", Integer.valueOf(this.result), "ts", Long.valueOf(Util.getTs()), "price", this.price }).asObject().toString());
      if (this.result_charge == 200) {
        UpayCore.getInstance(this).logEvent(this.mTrade.appKey, "charge_handle", Json.createObject(new Object[] { "trade_id", this.mTrade.id, "goods_key", this.mTrade.goodsKey, "cmd_key", "tenpay", "bt_key", "tenpay", "description", "", "mt_msg", "", "mt_num", "", "result", Integer.valueOf(this.result_charge), "sn", this.mTrade.id + "01", "ts", Long.valueOf(Util.getTs()), "price", this.price }).asObject().toString());
      }
      finish();
      return;
      UpayCore.getInstance(this).paymentCompleted(this.mTrade, this.PAY_CODE);
      this.result = this.PAY_CODE;
    }
  }
  
  @SuppressLint({"SetJavaScriptEnabled"})
  private void initWebView(String paramString)
  {
    Log.i("TenpayActivity", "startTenpayView");
    Object localObject = new ArrayList();
    ((List)localObject).add(new BasicNameValuePair("goodsName", this.goodsName));
    ((List)localObject).add(new BasicNameValuePair("tradeId", this.tradeId + "01"));
    ((List)localObject).add(new BasicNameValuePair("price", this.price));
    ((List)localObject).add(new BasicNameValuePair("uid", this.uid));
    localObject = URLEncodedUtils.format((List)localObject, "UTF-8");
    this.webView = new WebView(this);
    this.webView.setId(1000);
    this.webView.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    this.webView.getSettings().setJavaScriptEnabled(true);
    CookieManager.getInstance().setAcceptCookie(true);
    ProgressBar localProgressBar = new ProgressBar(this, null, 16842871);
    localProgressBar.setMax(100);
    localProgressBar.setVisibility(8);
    localProgressBar.setLayoutParams(new ViewGroup.LayoutParams(-2, -2));
    this.container = new RelativeLayout(this);
    this.container.setBackgroundColor(Color.parseColor("#ffffff"));
    this.container.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(-2, -2);
    localLayoutParams.addRule(13, -1);
    this.container.addView(this.webView);
    this.container.addView(localProgressBar, localLayoutParams);
    this.webView.setWebViewClient(new TenpayActivity.3(this));
    this.webView.setWebChromeClient(new TenpayActivity.4(this, localProgressBar));
    setContentView(this.container);
    this.webView.loadUrl(paramString + "?" + (String)localObject);
  }
  
  public void cancelPay()
  {
    UpayCore.getInstance(this).paymentCompleted(this.mTrade, 110);
    UpayCore.getInstance(this).logEvent(this.mTrade.appKey, "exec_pay", Json.createObject(new Object[] { "trade_id", this.mTrade.id, "goods_key", this.mTrade.goodsKey, "cmd_key", "tenpay", "bt_key", "tenpay", "target", "", "sn", this.mTrade.id + "01", "request", "", "response", "", "result", Integer.valueOf(110), "ts", Long.valueOf(Util.getTs()), "price", this.price }).asObject().toString());
  }
  
  public boolean judgeAlipayUrl(String paramString)
  {
    boolean bool = false;
    paramString = paramString.substring(0, paramString.indexOf("?")).split("/");
    if (("asyn_payment_result.htm".equals(paramString[4].trim())) || ("common_check_code.htm".equals(paramString[4].trim()))) {
      bool = true;
    }
    return bool;
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    requestWindowFeature(1);
    Log.i("TenpayActivity", "startTenpayActivity");
    this.goodsName = getIntent().getStringExtra("goodsName");
    this.tradeId = getIntent().getStringExtra("tradeId");
    this.price = getIntent().getStringExtra("price");
    this.uid = getIntent().getStringExtra("uid");
    this.mTrade = UpayCore.getInstance(this).getCurrentTrade();
    this.PAY_CODE = 200;
    this.mHandler.sendEmptyMessage(0);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    if (this.webView != null)
    {
      this.container.removeView(this.webView);
      this.webView.removeAllViews();
      this.webView.destroy();
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (this.webView.canGoBack())
    {
      this.webView.goBack();
      return true;
    }
    cancelPay();
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
}
