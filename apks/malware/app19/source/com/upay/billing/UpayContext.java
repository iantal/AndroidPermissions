package com.upay.billing;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build;
import android.os.Build.VERSION;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import android.widget.Toast;
import com.upay.billing.bean.Op;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;

public class UpayContext
{
  private UpayCore core;
  public String iccid;
  public String imei;
  public String imsi;
  public String mac;
  public String model;
  public Op op;
  public String os;
  public boolean root = false;
  public String screen;
  
  @SuppressLint({"NewApi"})
  public UpayContext(UpayCore paramUpayCore)
  {
    this.core = paramUpayCore;
    paramUpayCore = paramUpayCore.getContext();
    Object localObject = (TelephonyManager)paramUpayCore.getSystemService("phone");
    this.imei = Util.ifEmpty(((TelephonyManager)localObject).getDeviceId(), "");
    this.mac = Util.ifEmpty(Util.getMac(paramUpayCore), "");
    this.model = Util.ifEmpty(Build.MODEL, "unknown");
    this.os = ("android " + Build.VERSION.RELEASE + " level " + Build.VERSION.SDK_INT);
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramUpayCore.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    this.screen = (localDisplayMetrics.widthPixels + "*" + localDisplayMetrics.heightPixels);
    this.root = Util.checkRoot();
    this.op = Op.NONE;
    this.imsi = "";
    this.iccid = "";
    if (((TelephonyManager)localObject).getSimState() == 5)
    {
      this.imsi = Util.ifEmpty(((TelephonyManager)localObject).getSubscriberId(), "");
      if ((this.imsi.startsWith("46000")) || (this.imsi.startsWith("46002")) || (this.imsi.startsWith("46007")))
      {
        this.op = Op.CMCC;
        this.iccid = Util.ifEmpty(((TelephonyManager)localObject).getSimSerialNumber(), "");
        if ((Util.empty(this.iccid)) || (this.iccid.length() < 16)) {
          this.iccid = "";
        }
        label293:
        if (Util.empty(this.iccid))
        {
          if (Util.empty(this.imsi)) {
            break label525;
          }
          this.iccid = ("imsi:" + this.imsi);
        }
      }
    }
    for (;;)
    {
      if (Util.empty(this.iccid))
      {
        this.iccid = Util.getString(paramUpayCore, "iccid");
        if (Util.empty(this.iccid))
        {
          this.iccid = ("id:" + Util.formatDate("yyMMddHHmm", new Date()) + (100000 + new Random().nextInt(900000)));
          Util.saveString(paramUpayCore, "iccid", this.iccid);
        }
      }
      return;
      if ((this.imsi.startsWith("46001")) || (this.imsi.startsWith("46006")))
      {
        this.op = Op.UNICOM;
        break;
      }
      if ((!this.imsi.startsWith("46003")) && (!this.imsi.startsWith("46005")) && (!this.imsi.startsWith("46011"))) {
        break;
      }
      this.op = Op.TELECOM;
      break;
      Toast.makeText(paramUpayCore, "SIM卡状态有误，请检查SIM卡！", 1).show();
      break label293;
      label525:
      if (!Util.empty(this.imei))
      {
        this.iccid = ("imei:" + this.imei);
      }
      else if (!Util.empty(this.mac))
      {
        this.iccid = ("mac:" + this.mac);
      }
      else
      {
        localObject = Settings.Secure.getString(paramUpayCore.getContentResolver(), "android_id");
        if (!Util.empty((String)localObject))
        {
          this.iccid = ("aid:" + (String)localObject);
        }
        else if (Build.VERSION.SDK_INT >= 9)
        {
          localObject = Build.SERIAL;
          if (!Util.empty((String)localObject)) {
            this.iccid = ("sn1:" + (String)localObject);
          }
        }
      }
    }
  }
  
  public HashMap getParamMap(String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("user_id", this.core.getUser().getStr("id", ""));
    localHashMap.put("mobile", this.core.getUser().getStr("mobile", ""));
    localHashMap.put("app_key", paramString1);
    localHashMap.put("ch_key", paramString2);
    localHashMap.put("iccid", this.iccid);
    localHashMap.put("imei", this.imei);
    localHashMap.put("imsi", this.imsi);
    localHashMap.put("mac", this.mac);
    localHashMap.put("model", this.model);
    localHashMap.put("op", Integer.toString(this.op.ordinal()));
    localHashMap.put("os", this.os);
    localHashMap.put("screen", this.screen);
    if (this.root) {}
    for (paramString1 = "1";; paramString1 = "0")
    {
      localHashMap.put("root", paramString1);
      localHashMap.put("net", Util.getNetType(this.core.getContext()));
      paramString2 = Util.createInstance(this.core.context, "com.upay.billing.engine.PackageData");
      paramString1 = (String)Util.invokeGetter(paramString2, "getVersion");
      paramString2 = (String)Util.invokeGetter(paramString2, "getBuildDate");
      localHashMap.put("vcode", paramString1 + "/" + paramString2);
      localHashMap.put("ts", Long.toString(System.currentTimeMillis()));
      return localHashMap;
    }
  }
  
  public boolean hasMobileNo()
  {
    return !Util.empty(this.core.getUser().getStr("mobile"));
  }
  
  public boolean hasNetwork()
  {
    return Util.isNetworkAvailable(this.core.getContext());
  }
  
  public boolean hasSms()
  {
    return this.op != Op.NONE;
  }
  
  public boolean is3G()
  {
    return (Util.isNetworkAvailable(this.core.getContext())) && (!"WIFI".equals(Util.getNetType(this.core.getContext())));
  }
}
