package com.baidu.mobstat;

import android.content.Context;
import android.location.LocationManager;
import java.io.IOException;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

public class i
  extends h
{
  private String g;
  private JSONObject h;
  private JSONObject i;
  private JSONObject j;
  private boolean k;
  
  public i(Context paramContext, String paramString)
  {
    super(paramContext, paramString);
    this.c = getClass().getName();
  }
  
  private JSONObject a(Context paramContext)
  {
    LocationManager localLocationManager = (LocationManager)paramContext.getSystemService("location");
    JSONObject localJSONObject = new JSONObject();
    for (;;)
    {
      try
      {
        localJSONObject.put("appkey", f.b(paramContext));
        localJSONObject.put("channel", f.a(this.a));
        localJSONObject.put("os_version", f.e(paramContext));
        localJSONObject.put("manufacturer", f.g(paramContext));
        localJSONObject.put("phone_type", f.j(paramContext));
        localJSONObject.put("deviceid", f.h(paramContext));
        localJSONObject.put("imei", f.l(paramContext));
        localJSONObject.put("resolution", f.n(paramContext));
        localJSONObject.put("platform", "android");
        localJSONObject.put("is_mobile_device", true);
        localJSONObject.put("language", Locale.getDefault().getLanguage());
        localJSONObject.put("modulename", CooperService.getPhoneModel());
        localJSONObject.put("wifimac", f.i(paramContext));
        if (localLocationManager != null) {
          continue;
        }
        bool = false;
        localJSONObject.put("havegps", bool);
        localJSONObject.put("os_sdk", f.f(paramContext));
        localJSONObject.put("tg", CooperService.getTagValue());
        localJSONObject.put("cuid", f.k(paramContext));
      }
      catch (Exception paramContext)
      {
        boolean bool;
        paramContext.printStackTrace();
        continue;
      }
      m.a().a(new Object[] { "Satic Data : " + localJSONObject.toString() });
      return localJSONObject;
      bool = true;
    }
  }
  
  private JSONObject b(Context paramContext)
  {
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("time", f.a());
      localJSONObject.put("version_name", f.c(paramContext));
      localJSONObject.put("version_code", f.d(paramContext));
      localJSONObject.put("network_type", f.m(paramContext));
      localJSONObject.put("latlongitude", f.a(paramContext, CooperService.checkGPSLocationSetting(paramContext)));
      m.a().a(new Object[] { "Dyna Data : " + localJSONObject.toString() });
      return localJSONObject;
    }
    catch (JSONException paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
  }
  
  private boolean g()
  {
    this.g = ("kirin_static_data_" + this.a.getPackageName());
    this.i = k.a(this.a, this.g);
    if (this.i == null)
    {
      m.a().a(new Object[] { "Static file is empty, need collect static data!" });
      this.h = a(this.a);
    }
    do
    {
      return true;
      this.h = a(this.a);
    } while (!o.a(l.a(this.i.toString())).equals(o.a(l.a(this.h.toString()))));
    return false;
  }
  
  protected void b()
  {
    this.k = g();
    try
    {
      this.j = b(this.a);
      this.d = l.a(this.d, this.h);
      this.d = l.a(this.d, this.j);
      if (this.k)
      {
        m.a().a(new Object[] { "send new static data!" });
        this.d.put("isUpdateClientData", "1");
        return;
      }
      m.a().a(new Object[] { "send cache static data!" });
      this.d.put("isUpdateClientData", "0");
      return;
    }
    catch (Exception localException)
    {
      m.a().a(new Object[] { "what's going on?? : " + localException.toString() });
      localException.printStackTrace();
    }
  }
  
  protected void e()
  {
    m.a().a(new Object[] { "isInfoChanged : " + this.k + "  dump static data after success!!" });
    if (this.k) {}
    try
    {
      k.a(this.a, this.g, this.h);
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        try
        {
          Object localObject = new JSONObject(this.e.getString("updateConfig"));
          g.a(this.a).a(true, (JSONObject)localObject);
          localObject = this.e.getString("logID");
          g.a(this.a).b((String)localObject);
          return;
        }
        catch (JSONException localJSONException)
        {
          localJSONException.printStackTrace();
          g.a(this.a).a(false, null);
          g.a(this.a).b("0");
        }
        localIOException = localIOException;
        m.a().b("Dump static file has exception!!");
        localIOException.printStackTrace();
      }
    }
  }
  
  protected void f()
  {
    if (f.p(this.a)) {
      g.a(this.a).a(false, null);
    }
  }
}
