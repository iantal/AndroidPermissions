package com.c101416193190.download;

import com.c101416193190.util.NetUtil;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;

public final class v
  extends Thread
{
  HttpClient a = null;
  HttpGet b = null;
  private w c;
  private URL d;
  private boolean e = false;
  
  public v(URL paramURL)
  {
    this.d = paramURL;
  }
  
  private void a(HttpResponse paramHttpResponse)
  {
    Object localObject1 = null;
    Header[] arrayOfHeader = paramHttpResponse.getAllHeaders();
    int i = 0;
    int j = 0;
    paramHttpResponse = (HttpResponse)localObject1;
    if (i >= arrayOfHeader.length) {}
    do
    {
      if (paramHttpResponse != null)
      {
        localObject1 = paramHttpResponse;
        if (!paramHttpResponse.equals("")) {}
      }
      else
      {
        localObject1 = System.currentTimeMillis() + ".mp4";
      }
      if (!this.e) {
        this.c.a((String)localObject1, j);
      }
      if (this.e) {
        this.c.a();
      }
      return;
      localObject1 = arrayOfHeader[i];
    } while (localObject1 == null);
    Object localObject2 = ((Header)localObject1).getName().toLowerCase();
    String str = ((Header)localObject1).getValue().toLowerCase();
    int k;
    if (((String)localObject2).equals("content-disposition"))
    {
      localObject2 = Pattern.compile(".*filename=(.*)").matcher(str.toLowerCase());
      k = j;
      localObject1 = paramHttpResponse;
      if (((Matcher)localObject2).find())
      {
        paramHttpResponse = ((Matcher)localObject2).group(1).replaceAll("\"", "");
        k = j;
        localObject1 = paramHttpResponse;
        if (paramHttpResponse.contains(";"))
        {
          localObject1 = paramHttpResponse.substring(0, paramHttpResponse.indexOf(";"));
          k = j;
        }
      }
    }
    for (;;)
    {
      i += 1;
      j = k;
      paramHttpResponse = (HttpResponse)localObject1;
      break;
      k = j;
      localObject1 = paramHttpResponse;
      if (((String)localObject2).equals("content-range"))
      {
        localObject2 = Pattern.compile(".*/(.*)").matcher(str.toLowerCase());
        k = j;
        localObject1 = paramHttpResponse;
        if (((Matcher)localObject2).find())
        {
          k = Integer.valueOf(((Matcher)localObject2).group(1)).intValue();
          localObject1 = paramHttpResponse;
        }
      }
    }
  }
  
  public final void a()
  {
    try
    {
      if ((this.b != null) && (this.b.isAborted()))
      {
        this.b.abort();
        this.b = null;
      }
      this.e = true;
      return;
    }
    finally {}
  }
  
  public final void a(w paramW)
  {
    this.c = paramW;
  }
  
  public final void run()
  {
    this.e = false;
    int i = 0;
    k = i;
    m = i;
    j = i;
    for (;;)
    {
      try
      {
        this.a = NetUtil.createHttpClient(180000, 60000);
        k = i;
        m = i;
        j = i;
        this.b = new HttpGet(this.d.toURI());
        k = i;
        m = i;
        j = i;
        this.b.setHeader("Accept", "*/*");
        k = i;
        m = i;
        j = i;
        this.b.setHeader("User-Agent", "(C)NokiaE5-00/SymbianOS/9.1 Series60/3.0");
        k = i;
        m = i;
        j = i;
        this.b.setHeader("Range", "bytes=0-1");
        k = i;
        m = i;
        j = i;
        this.b.setHeader("Content-Type", "application/octet-stream");
        k = i;
        m = i;
        j = i;
        HttpResponse localHttpResponse = this.a.execute(this.b);
        if (localHttpResponse != null)
        {
          k = i;
          m = i;
          j = i;
          int n = localHttpResponse.getStatusLine().getStatusCode();
          if ((n < 200) || (n > 300)) {
            continue;
          }
          k = i;
          m = i;
          j = i;
          a(localHttpResponse);
        }
      }
      catch (MalformedURLException localMalformedURLException)
      {
        localMalformedURLException.printStackTrace();
        if ((this.e) || (k + 1 < 5)) {
          continue;
        }
        this.c.a(0, localMalformedURLException.getMessage());
        continue;
      }
      catch (IOException localIOException)
      {
        localIOException.printStackTrace();
        if ((this.e) || (m + 1 < 5)) {
          continue;
        }
        this.c.a(0, localIOException.getMessage());
        continue;
      }
      catch (URISyntaxException localURISyntaxException)
      {
        localURISyntaxException.printStackTrace();
        if ((this.e) || (j + 1 < 5)) {
          continue;
        }
        this.c.a(0, localURISyntaxException.getMessage());
        continue;
      }
      if (this.b != null) {
        this.b.abort();
      }
      return;
      j = i + 1;
      i = j;
      if (j < 5) {
        break;
      }
      k = j;
      m = j;
      this.c.a(1, " code > 300");
    }
  }
}
