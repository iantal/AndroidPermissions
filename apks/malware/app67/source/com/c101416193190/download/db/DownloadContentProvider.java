package com.c101416193190.download.db;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.text.TextUtils;
import java.util.HashMap;
import java.util.List;

public class DownloadContentProvider
  extends ContentProvider
{
  public static final UriMatcher a;
  public static HashMap b;
  private b c;
  
  static
  {
    Object localObject = new UriMatcher(-1);
    a = (UriMatcher)localObject;
    ((UriMatcher)localObject).addURI("com.c101416193190.download.db.DownloadContentProvider", "download", 1);
    a.addURI("com.c101416193190.download.db.DownloadContentProvider", "download/#", 2);
    localObject = new HashMap();
    b = (HashMap)localObject;
    ((HashMap)localObject).put("_id", "_id");
    b.put("name", "name");
    b.put("title", "title");
    b.put("cid", "cid");
    b.put("download_url", "download_url");
    b.put("pic_url", "pic_url");
    b.put("total_size", "total_size");
    b.put("completed_size", "completed_size");
    b.put("folder_path", "folder_path");
    b.put("status", "status");
    b.put("progress", "progress");
    b.put("notification_id", "notification_id");
  }
  
  public DownloadContentProvider() {}
  
  public int delete(Uri paramUri, String paramString, String[] paramArrayOfString)
  {
    SQLiteDatabase localSQLiteDatabase = this.c.getWritableDatabase();
    switch (a.match(paramUri))
    {
    default: 
      throw new UnsupportedOperationException("Not Support Operation" + paramUri);
    case 1: 
      return localSQLiteDatabase.delete("download", paramString, paramArrayOfString);
    }
    return localSQLiteDatabase.delete("download", null, paramArrayOfString);
  }
  
  public String getType(Uri paramUri)
  {
    switch (a.match(paramUri))
    {
    default: 
      throw new IllegalArgumentException("Unknow URI " + paramUri);
    case 1: 
      return "vnd.android.cursor.dir/vnd.downloadprovider.download";
    }
    return "vnd.android.cursor.item/vnd.downloadprovider.download";
  }
  
  public Uri insert(Uri paramUri, ContentValues paramContentValues)
  {
    long l = this.c.getWritableDatabase().insert("download", null, paramContentValues);
    if (l > 0L)
    {
      paramUri = ContentUris.withAppendedId(d.a, l);
      getContext().getContentResolver().notifyChange(paramUri, null);
      return paramUri;
    }
    throw new SQLException("Failed to insert row into " + paramUri);
  }
  
  public boolean onCreate()
  {
    this.c = new b(getContext(), "downloadProvider.db", '\000');
    return true;
  }
  
  public Cursor query(Uri paramUri, String[] paramArrayOfString1, String paramString1, String[] paramArrayOfString2, String paramString2)
  {
    SQLiteQueryBuilder localSQLiteQueryBuilder = new SQLiteQueryBuilder();
    switch (a.match(paramUri))
    {
    default: 
      if (TextUtils.isEmpty(paramString2)) {
        paramString2 = "_id desc";
      }
      break;
    }
    for (;;)
    {
      paramArrayOfString1 = localSQLiteQueryBuilder.query(this.c.getWritableDatabase(), paramArrayOfString1, paramString1, paramArrayOfString2, null, null, paramString2);
      paramArrayOfString1.setNotificationUri(getContext().getContentResolver(), paramUri);
      return paramArrayOfString1;
      localSQLiteQueryBuilder.setTables("download");
      localSQLiteQueryBuilder.setProjectionMap(b);
      break;
      localSQLiteQueryBuilder.setTables("download");
      localSQLiteQueryBuilder.setProjectionMap(b);
      localSQLiteQueryBuilder.appendWhere("_id=" + (String)paramUri.getPathSegments().get(1));
      break;
    }
  }
  
  public int update(Uri paramUri, ContentValues paramContentValues, String paramString, String[] paramArrayOfString)
  {
    SQLiteDatabase localSQLiteDatabase = this.c.getWritableDatabase();
    switch (a.match(paramUri))
    {
    default: 
      throw new UnsupportedOperationException("Not Support Operation" + paramUri);
    }
    int i = localSQLiteDatabase.update("download", paramContentValues, paramString, paramArrayOfString);
    if (i > 0)
    {
      paramUri = ContentUris.withAppendedId(d.a, i);
      getContext().getContentResolver().notifyChange(paramUri, null);
    }
    return i;
  }
}
