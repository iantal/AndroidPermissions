package com.c101416193190.d;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import com.c101416193190.f.c;
import com.c101416193190.util.NetUtil;
import com.c101416193190.util.h;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public final class b
{
  private static String a = "ImageLoader";
  private static f b = new f();
  private static Map c = Collections.synchronizedMap(new WeakHashMap());
  private static ExecutorService d = Executors.newFixedThreadPool(5);
  
  private static Bitmap a(File paramFile)
  {
    int i = 1;
    try
    {
      BitmapFactory.Options localOptions = new BitmapFactory.Options();
      localOptions.inJustDecodeBounds = true;
      BitmapFactory.decodeStream(new FileInputStream(paramFile), null, localOptions);
      int k = localOptions.outWidth;
      int j = localOptions.outHeight;
      while ((k / 2 >= 100) && (j / 2 >= 100))
      {
        k /= 2;
        j /= 2;
        i *= 2;
      }
      localOptions.inJustDecodeBounds = false;
      localOptions.inSampleSize = i;
      paramFile = BitmapFactory.decodeStream(new FileInputStream(paramFile), null, localOptions);
      return paramFile;
    }
    catch (FileNotFoundException paramFile)
    {
      paramFile.printStackTrace();
    }
    return null;
  }
  
  private static void a(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    try
    {
      byte[] arrayOfByte = new byte['Ð€'];
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte, 0, 1024);
        if (i == -1) {
          break;
        }
        paramOutputStream.write(arrayOfByte, 0, i);
      }
    }
    catch (Exception paramInputStream) {}finally
    {
      h.a(paramOutputStream);
    }
  }
  
  public static void a(String paramString, ImageView paramImageView)
  {
    c.put(paramImageView, paramString);
    Bitmap localBitmap = b.a(paramString);
    if (localBitmap != null)
    {
      paramImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
      paramImageView.setImageBitmap(localBitmap);
      return;
    }
    paramString = new d(paramString, paramImageView);
    d.submit(new e(paramString));
  }
  
  private static Bitmap b(String paramString)
  {
    Bitmap localBitmap2 = null;
    Object localObject3 = null;
    Object localObject4 = null;
    File localFile = a.a(paramString);
    if ((localFile != null) && (localFile.exists())) {}
    for (Bitmap localBitmap1 = a(localFile);; localBitmap1 = null)
    {
      if (localBitmap1 != null) {
        return localBitmap1;
      }
      Object localObject1 = localBitmap2;
      Object localObject2 = localObject3;
      try
      {
        byte[] arrayOfByte = NetUtil.httpGet(paramString).b;
        paramString = localObject4;
        if (arrayOfByte != null)
        {
          localObject1 = localBitmap2;
          localObject2 = localObject3;
          paramString = new ByteArrayInputStream(arrayOfByte);
        }
        localObject1 = localBitmap1;
        if (paramString != null)
        {
          localObject1 = paramString;
          localObject2 = paramString;
          a(paramString, new FileOutputStream(localFile));
          localObject1 = paramString;
          localObject2 = paramString;
          localBitmap2 = a(localFile);
          localObject1 = localBitmap2;
        }
        h.a(paramString);
        return localObject1;
      }
      catch (Exception paramString)
      {
        localObject2 = localObject1;
        paramString.printStackTrace();
        paramString = localBitmap1;
        if (localObject1 != null)
        {
          localObject2 = localObject1;
          paramString = BitmapFactory.decodeStream((InputStream)localObject1);
        }
        return paramString;
      }
      finally
      {
        h.a((InputStream)localObject2);
      }
    }
  }
}
