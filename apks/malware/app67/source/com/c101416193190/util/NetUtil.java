package com.c101416193190.util;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.net.Proxy;
import android.os.SystemClock;
import com.c101416193190.f.c;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.zip.GZIPInputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.conn.HttpHostConnectException;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class NetUtil
{
  private static final int CONNECTION_TIMEOUT = 20000;
  private static final int COUNT = 5;
  private static final int REQUEST_ERROR = -1;
  private static final int REQUEST_OK = 1;
  private static final int REQUEST_TIMEOUT = -2;
  private static String TAG = "NetUtil";
  private static final int TIMEOUT = 20000;
  
  public NetUtil() {}
  
  private static String changeHost(String paramString)
  {
    String str = paramString;
    if (h.a < 5)
    {
      h.a += 1;
      str = paramString.replace(paramString.substring(0, paramString.lastIndexOf("/") + 1), h.a(h.a));
    }
    return str;
  }
  
  private static void closeHttpConnection(HttpClient paramHttpClient)
  {
    if (paramHttpClient != null)
    {
      paramHttpClient.getConnectionManager().closeExpiredConnections();
      paramHttpClient.getConnectionManager().shutdown();
    }
  }
  
  public static DefaultHttpClient createHttpClient(int paramInt1, int paramInt2)
  {
    Object localObject2 = h.n();
    Object localObject1 = ((ConnectivityManager)localObject2).getActiveNetworkInfo();
    localObject2 = ((ConnectivityManager)localObject2).getAllNetworkInfo();
    if ((localObject1 != null) && (localObject2.length != 0))
    {
      localObject1 = localObject2[0];
      if ((((NetworkInfo)localObject1).getState() == NetworkInfo.State.CONNECTED) && (((NetworkInfo)localObject1).getType() == 0))
      {
        localObject1 = h.p();
        if ((localObject1 != null) && (((String)localObject1).contains("wap")))
        {
          if (((String)localObject1).equalsIgnoreCase("ctwap")) {}
          for (localObject1 = "10.0.0.200";; localObject1 = "10.0.0.172") {
            return httpClientFactory(paramInt1, paramInt2, localObject1 + ":" + "80");
          }
        }
      }
      return httpClientFactory(paramInt1, paramInt2, null);
    }
    return httpClientFactory(200, 100, null);
  }
  
  public static DefaultHttpClient getHttpClient()
  {
    Object localObject1 = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, 20000);
    HttpConnectionParams.setSoTimeout((HttpParams)localObject1, 20000);
    Object localObject2 = new SchemeRegistry();
    ((SchemeRegistry)localObject2).register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    localObject1 = new DefaultHttpClient(new ThreadSafeClientConnManager((HttpParams)localObject1, (SchemeRegistry)localObject2), (HttpParams)localObject1);
    ((DefaultHttpClient)localObject1).setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler());
    localObject2 = getProxyInfo();
    if ((localObject2 != null) && (((String)localObject2).length() > 0)) {
      ((DefaultHttpClient)localObject1).getParams().setParameter("http.route.default-proxy", parseProxyHost((String)localObject2));
    }
    return localObject1;
  }
  
  private static String getProxyInfo()
  {
    Object localObject = h.n().getActiveNetworkInfo();
    if ((localObject != null) && (((NetworkInfo)localObject).getType() == 0))
    {
      localObject = Proxy.getDefaultHost();
      if (localObject != null)
      {
        localObject = new StringBuffer((String)localObject);
        ((StringBuffer)localObject).append(":").append(Proxy.getDefaultPort());
        return ((StringBuffer)localObject).toString();
      }
    }
    return null;
  }
  
  private static int getShort(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 8 | paramArrayOfByte[1] & 0xFF;
  }
  
  public static boolean hasNetwork()
  {
    NetworkInfo localNetworkInfo = h.n().getActiveNetworkInfo();
    return (localNetworkInfo != null) && (localNetworkInfo.isAvailable());
  }
  
  private static DefaultHttpClient httpClientFactory(int paramInt1, int paramInt2, String paramString)
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    if (paramInt1 != -1) {
      HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, paramInt1);
    }
    if (paramInt2 != -1) {
      HttpConnectionParams.setSoTimeout(localBasicHttpParams, paramInt2);
    }
    if ((paramString != null) && (paramString.length() > 0)) {
      localBasicHttpParams.setParameter("http.route.default-proxy", parseProxyHost(paramString));
    }
    paramString = new SchemeRegistry();
    paramString.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    return new DefaultHttpClient(new ThreadSafeClientConnManager(localBasicHttpParams, paramString), localBasicHttpParams);
  }
  
  public static c httpGet(String paramString)
  {
    DefaultHttpClient localDefaultHttpClient = getHttpClient();
    Object localObject = new HttpGet(paramString);
    ((HttpGet)localObject).setHeader("Accept", "*/*");
    ((HttpGet)localObject).setHeader("User-Agent", h.w());
    ((HttpGet)localObject).setHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
    ((HttpGet)localObject).addHeader("Accept-Encoding", "gzip,deflate");
    c localC = new c();
    for (;;)
    {
      try
      {
        localObject = localDefaultHttpClient.execute((HttpUriRequest)localObject);
        if (localObject != null)
        {
          int i = ((HttpResponse)localObject).getStatusLine().getStatusCode();
          switch (i)
          {
          }
        }
      }
      catch (Exception localException)
      {
        if ((!(localException instanceof UnknownHostException)) && (!(localException instanceof HttpHostConnectException))) {
          break label264;
        }
        localC.a = -1;
        closeHttpConnection(localDefaultHttpClient);
        continue;
        localC.a = -1;
        continue;
      }
      finally
      {
        closeHttpConnection(localDefaultHttpClient);
      }
      closeHttpConnection(localDefaultHttpClient);
      if ((paramString.contains("preln?")) || (paramString.contains("alh?")) || (paramString.contains("specllist?")) || (paramString.contains("xyzplay?"))) {
        paramString = localC.b;
      }
      return localC;
      localC.b = writeByteArray((HttpResponse)localObject);
      if (localC.b == null) {
        continue;
      }
      localC.a = 1;
    }
    for (;;)
    {
      localC.a = -1;
      break;
      label264:
      if (((localException instanceof SocketTimeoutException)) || ((localException instanceof ConnectTimeoutException))) {
        localC.a = -2;
      }
    }
  }
  
  public static InputStream parseInputStream(InputStream paramInputStream)
  {
    paramInputStream = new BufferedInputStream(paramInputStream);
    try
    {
      paramInputStream.mark(2);
      Object localObject = new byte[2];
      int i = paramInputStream.read((byte[])localObject);
      paramInputStream.reset();
      int j = getShort((byte[])localObject);
      if ((i != -1) && (j == 8075))
      {
        localObject = new GZIPInputStream(paramInputStream);
        return localObject;
      }
      return paramInputStream;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return paramInputStream;
  }
  
  public static HttpHost parseProxyHost(String paramString)
  {
    String[] arrayOfString = paramString.split(":");
    String str = arrayOfString[0];
    if (arrayOfString[1] != null) {}
    for (int i = Integer.valueOf(arrayOfString[1]).intValue();; i = 0)
    {
      if ((paramString != null) && (str != null) && (i != 0)) {
        return new HttpHost(str, i);
      }
      return null;
    }
  }
  
  private static c retryHttpRequest(String paramString)
  {
    new c();
    Object localObject = null;
    int i = 0;
    for (;;)
    {
      if (i >= 3) {}
      c localC;
      do
      {
        return localObject;
        localC = httpGet(paramString);
        localObject = localC;
      } while (localC.a == 1);
      SystemClock.sleep(1000L);
      i += 1;
      localObject = localC;
    }
  }
  
  public static byte[] sendHttpRequest(String paramString)
  {
    Object localObject1 = httpGet(paramString);
    Object localObject2 = localObject1;
    int i;
    if (((c)localObject1).a != 1)
    {
      i = 0;
      localObject2 = paramString;
    }
    for (;;)
    {
      if (i >= 5)
      {
        localObject2 = localObject1;
        h.a = 0;
        return ((c)localObject2).b;
      }
      localObject1 = retryHttpRequest((String)localObject2);
      switch (((c)localObject1).a)
      {
      }
      for (;;)
      {
        if (((c)localObject1).a == 1)
        {
          localObject2 = localObject1;
          if (h.a == 0) {
            break;
          }
          h.b(h.a);
          localObject2 = localObject1;
          break;
          localObject2 = changeHost(paramString);
          localObject1 = httpGet((String)localObject2);
          continue;
          c localC = retryHttpRequest((String)localObject2);
          localObject1 = localC;
          if (localC.a != 1) {
            if (visitBaidu().a == 1)
            {
              localObject2 = changeHost(paramString);
              localObject1 = httpGet((String)localObject2);
            }
            else
            {
              return localC.b;
            }
          }
        }
      }
      SystemClock.sleep(1000L);
      i += 1;
    }
  }
  
  public static c visitBaidu()
  {
    return httpGet("http://wap.baidu.com");
  }
  
  private static byte[] writeByteArray(HttpResponse paramHttpResponse)
  {
    try
    {
      paramHttpResponse = parseInputStream(paramHttpResponse.getEntity().getContent());
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      byte[] arrayOfByte = new byte['Ѐ'];
      for (;;)
      {
        int i = paramHttpResponse.read(arrayOfByte, 0, arrayOfByte.length);
        if (i == -1)
        {
          paramHttpResponse.close();
          localByteArrayOutputStream.close();
          paramHttpResponse = localByteArrayOutputStream.toByteArray();
          if ((paramHttpResponse == null) || (paramHttpResponse.length <= 20)) {
            break;
          }
          return paramHttpResponse;
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      return null;
    }
    catch (Exception paramHttpResponse)
    {
      paramHttpResponse.printStackTrace();
      return null;
    }
  }
}
