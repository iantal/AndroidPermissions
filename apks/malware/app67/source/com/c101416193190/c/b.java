package com.c101416193190.c;

import android.view.ViewGroup;
import com.c101416193190.ui.c;
import com.c101416193190.ui.g;
import com.c101416193190.ui.q;
import com.c101416193190.ui.y;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Observable;
import java.util.Set;

public final class b
  extends Observable
{
  private static b b = new b();
  private String a = "UIManager";
  private HashMap c = new HashMap();
  private c d;
  private ViewGroup e;
  
  private b() {}
  
  public static b a()
  {
    return b;
  }
  
  public final void a(ViewGroup paramViewGroup)
  {
    this.e = paramViewGroup;
  }
  
  public final void a(com.c101416193190.f.a paramA)
  {
    if (this.e == null) {}
    while ((this.d != null) && (this.d.getClass() == paramA.c) && (this.d.d().equals(paramA.a))) {
      return;
    }
    Object localObject = null;
    for (;;)
    {
      try
      {
        if (this.c.containsKey(paramA.c.getSimpleName()))
        {
          localObject = (c)this.c.get(paramA.c.getSimpleName());
          ((c)localObject).a(paramA.a);
          ((c)localObject).b(paramA);
          this.e.removeAllViewsInLayout();
          this.e.addView(((c)localObject).c());
          this.d = ((c)localObject);
          String str = paramA.a;
          setChanged();
          notifyObservers(str);
          if (this.c.containsKey(paramA.c.getSimpleName())) {
            break;
          }
          this.c.put(paramA.c.getSimpleName(), localObject);
          return;
        }
      }
      catch (Exception paramA)
      {
        paramA.printStackTrace();
        return;
      }
      if (paramA.c == y.class) {
        localObject = new y(this.e.getContext());
      } else if (paramA.c == com.c101416193190.ui.a.class) {
        localObject = new com.c101416193190.ui.a(this.e.getContext());
      } else if (paramA.c == q.class) {
        localObject = new q(this.e.getContext());
      } else if (paramA.c == g.class) {
        localObject = new g(this.e.getContext());
      }
    }
  }
  
  public final void b()
  {
    Iterator localIterator = this.c.entrySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        this.c.clear();
        this.d = null;
        return;
      }
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      ((c)this.c.get(localEntry.getKey())).e();
    }
  }
  
  public final boolean b(com.c101416193190.f.a paramA)
  {
    return this.c.containsKey(paramA.c.getSimpleName());
  }
}
