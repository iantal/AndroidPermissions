package cqmbkjulys.hienfdz.euul;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

class q
  implements Runnable
{
  q(DJMOBGM paramDJMOBGM, String paramString1, String paramString2, File paramFile) {}
  
  public void run()
  {
    System.out.println(this.b);
    Object localObject1 = new HttpGet(this.b);
    Object localObject2 = new DefaultHttpClient();
    ((HttpClient)localObject2).getParams().setParameter("http.connection.timeout", Integer.valueOf(20000));
    try
    {
      localObject1 = ((HttpClient)localObject2).execute((HttpUriRequest)localObject1);
      if (((HttpResponse)localObject1).getStatusLine().getStatusCode() == 200)
      {
        localObject1 = ((HttpResponse)localObject1).getEntity().getContent();
        localObject2 = new File(this.a.d, this.c + "_tmp");
        if (((File)localObject2).exists()) {
          ((File)localObject2).delete();
        }
        FileOutputStream localFileOutputStream = new FileOutputStream((File)localObject2);
        byte[] arrayOfByte = new byte['Ð€'];
        for (;;)
        {
          int i = ((InputStream)localObject1).read(arrayOfByte);
          if (i == -1)
          {
            localFileOutputStream.flush();
            localFileOutputStream.close();
            ((File)localObject2).renameTo(this.d);
            return;
          }
          localFileOutputStream.write(arrayOfByte, 0, i);
        }
      }
      return;
    }
    catch (ClientProtocolException localClientProtocolException)
    {
      return;
    }
    catch (IOException localIOException) {}
  }
}
