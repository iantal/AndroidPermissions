package cn.banny.rp.client;

import cn.banny.rp.RequestConnect;
import cn.banny.rp.ReverseProxy;
import java.io.EOFException;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;

public class SocketProxy
  implements SocketSession
{
  private final ReverseProxyClient client;
  private final RequestConnect connect;
  private final Selector selector;
  SocketChannel session;
  private final int socket;
  
  public SocketProxy(int paramInt, RequestConnect paramRequestConnect, ReverseProxyClient paramReverseProxyClient, Selector paramSelector)
  {
    this.socket = paramInt;
    this.connect = paramRequestConnect;
    this.client = paramReverseProxyClient;
    this.selector = paramSelector;
  }
  
  /* Error */
  private void messageReceived(SocketChannel paramSocketChannel, Object paramObject)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_1
    //   2: aload_2
    //   3: checkcast 36	[B
    //   6: astore_2
    //   7: new 38	java/io/ByteArrayOutputStream
    //   10: dup
    //   11: invokespecial 39	java/io/ByteArrayOutputStream:<init>	()V
    //   14: astore_3
    //   15: new 41	java/io/DataOutputStream
    //   18: dup
    //   19: aload_3
    //   20: invokespecial 44	java/io/DataOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   23: astore_1
    //   24: aload_1
    //   25: iconst_4
    //   26: invokevirtual 48	java/io/DataOutputStream:writeByte	(I)V
    //   29: aload_1
    //   30: aload_0
    //   31: getfield 23	cn/banny/rp/client/SocketProxy:socket	I
    //   34: invokevirtual 51	java/io/DataOutputStream:writeInt	(I)V
    //   37: aload_1
    //   38: aload_2
    //   39: arraylength
    //   40: invokevirtual 51	java/io/DataOutputStream:writeInt	(I)V
    //   43: aload_1
    //   44: aload_2
    //   45: invokevirtual 55	java/io/DataOutputStream:write	([B)V
    //   48: aload_0
    //   49: getfield 27	cn/banny/rp/client/SocketProxy:client	Lcn/banny/rp/client/ReverseProxyClient;
    //   52: aload_3
    //   53: invokevirtual 59	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   56: invokevirtual 64	cn/banny/rp/client/ReverseProxyClient:sendResponse	([B)V
    //   59: aload_3
    //   60: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   63: aload_1
    //   64: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   67: return
    //   68: astore_3
    //   69: aconst_null
    //   70: astore 4
    //   72: aload_1
    //   73: astore_2
    //   74: aload 4
    //   76: astore_1
    //   77: aload_3
    //   78: invokevirtual 72	java/io/IOException:printStackTrace	()V
    //   81: aload_0
    //   82: invokevirtual 75	cn/banny/rp/client/SocketProxy:close	()V
    //   85: aload_2
    //   86: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   89: aload_1
    //   90: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   93: return
    //   94: astore_2
    //   95: aconst_null
    //   96: astore_1
    //   97: aconst_null
    //   98: astore_3
    //   99: aload_3
    //   100: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   103: aload_1
    //   104: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   107: aload_2
    //   108: athrow
    //   109: astore_2
    //   110: aconst_null
    //   111: astore_1
    //   112: goto -13 -> 99
    //   115: astore_2
    //   116: goto -17 -> 99
    //   119: astore 4
    //   121: aload_2
    //   122: astore_3
    //   123: aload 4
    //   125: astore_2
    //   126: goto -27 -> 99
    //   129: astore 4
    //   131: aconst_null
    //   132: astore_1
    //   133: aload_3
    //   134: astore_2
    //   135: aload 4
    //   137: astore_3
    //   138: goto -61 -> 77
    //   141: astore 4
    //   143: aload_3
    //   144: astore_2
    //   145: aload 4
    //   147: astore_3
    //   148: goto -71 -> 77
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	151	0	this	SocketProxy
    //   0	151	1	paramSocketChannel	SocketChannel
    //   0	151	2	paramObject	Object
    //   14	46	3	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    //   68	10	3	localIOException1	IOException
    //   98	50	3	localObject1	Object
    //   70	5	4	localObject2	Object
    //   119	5	4	localObject3	Object
    //   129	7	4	localIOException2	IOException
    //   141	5	4	localIOException3	IOException
    // Exception table:
    //   from	to	target	type
    //   7	15	68	java/io/IOException
    //   7	15	94	finally
    //   15	24	109	finally
    //   24	59	115	finally
    //   77	85	119	finally
    //   15	24	129	java/io/IOException
    //   24	59	141	java/io/IOException
  }
  
  private void sessionOpened(SocketChannel paramSocketChannel)
  {
    if (this.session == null) {
      this.session = paramSocketChannel;
    }
  }
  
  void close()
  {
    if (this.session == null) {
      return;
    }
    SelectionKey localSelectionKey = this.session.keyFor(this.selector);
    if (localSelectionKey != null) {
      localSelectionKey.cancel();
    }
    ReverseProxy.closeQuietly(this.session);
    this.session = null;
    try
    {
      this.client.notifySessionClosed(this.socket);
      return;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
  }
  
  void connect()
  {
    SocketChannel localSocketChannel = SocketChannel.open();
    localSocketChannel.configureBlocking(false);
    Object localObject = localSocketChannel.socket();
    ((Socket)localObject).setKeepAlive(this.connect.isKeepAlive());
    ((Socket)localObject).setReceiveBufferSize(this.connect.getReceiveBufferSize());
    ((Socket)localObject).setSendBufferSize(this.connect.getSendBufferSize());
    ((Socket)localObject).setOOBInline(this.connect.isOobInline());
    ((Socket)localObject).setReuseAddress(this.connect.isReuseAddress());
    ((Socket)localObject).setTcpNoDelay(this.connect.isTcpNoDelay());
    ((Socket)localObject).setTrafficClass(this.connect.getTrafficClass());
    localObject = localSocketChannel.register(this.selector, 8);
    ((SelectionKey)localObject).attach(this);
    try
    {
      localSocketChannel.connect(new InetSocketAddress(this.connect.getHost(), this.connect.getPort()));
      sessionOpened(localSocketChannel);
      return;
    }
    catch (IOException localIOException)
    {
      ((SelectionKey)localObject).cancel();
      throw localIOException;
    }
  }
  
  public void exceptionCaught(SocketChannel paramSocketChannel, Throwable paramThrowable)
  {
    paramThrowable.printStackTrace();
  }
  
  public int getSocket()
  {
    return this.socket;
  }
  
  /* Error */
  public void processConnect(SocketChannel paramSocketChannel)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: aload_1
    //   3: invokevirtual 191	java/nio/channels/SocketChannel:finishConnect	()Z
    //   6: pop
    //   7: aload_1
    //   8: aload_0
    //   9: getfield 29	cn/banny/rp/client/SocketProxy:selector	Ljava/nio/channels/Selector;
    //   12: iconst_1
    //   13: invokevirtual 160	java/nio/channels/SocketChannel:register	(Ljava/nio/channels/Selector;I)Ljava/nio/channels/SelectionKey;
    //   16: aload_0
    //   17: invokevirtual 164	java/nio/channels/SelectionKey:attach	(Ljava/lang/Object;)Ljava/lang/Object;
    //   20: pop
    //   21: aload_1
    //   22: invokevirtual 107	java/nio/channels/SocketChannel:socket	()Ljava/net/Socket;
    //   25: astore 4
    //   27: new 38	java/io/ByteArrayOutputStream
    //   30: dup
    //   31: invokespecial 39	java/io/ByteArrayOutputStream:<init>	()V
    //   34: astore_3
    //   35: new 41	java/io/DataOutputStream
    //   38: dup
    //   39: aload_3
    //   40: invokespecial 44	java/io/DataOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   43: astore_1
    //   44: aload_1
    //   45: iconst_1
    //   46: invokevirtual 48	java/io/DataOutputStream:writeByte	(I)V
    //   49: aload_1
    //   50: aload_0
    //   51: getfield 23	cn/banny/rp/client/SocketProxy:socket	I
    //   54: invokevirtual 51	java/io/DataOutputStream:writeInt	(I)V
    //   57: aload 4
    //   59: invokevirtual 195	java/net/Socket:getLocalAddress	()Ljava/net/InetAddress;
    //   62: invokevirtual 200	java/net/InetAddress:getAddress	()[B
    //   65: astore_2
    //   66: aload_1
    //   67: aload_2
    //   68: arraylength
    //   69: invokevirtual 48	java/io/DataOutputStream:writeByte	(I)V
    //   72: aload_1
    //   73: aload_2
    //   74: invokevirtual 55	java/io/DataOutputStream:write	([B)V
    //   77: aload_1
    //   78: aload 4
    //   80: invokevirtual 203	java/net/Socket:getLocalPort	()I
    //   83: invokevirtual 206	java/io/DataOutputStream:writeShort	(I)V
    //   86: aload_0
    //   87: getfield 27	cn/banny/rp/client/SocketProxy:client	Lcn/banny/rp/client/ReverseProxyClient;
    //   90: aload_3
    //   91: invokevirtual 59	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   94: invokevirtual 64	cn/banny/rp/client/ReverseProxyClient:sendResponse	([B)V
    //   97: aload_3
    //   98: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   101: aload_1
    //   102: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   105: return
    //   106: astore_3
    //   107: aconst_null
    //   108: astore_1
    //   109: aload_3
    //   110: invokevirtual 72	java/io/IOException:printStackTrace	()V
    //   113: aload_0
    //   114: getfield 27	cn/banny/rp/client/SocketProxy:client	Lcn/banny/rp/client/ReverseProxyClient;
    //   117: aload_0
    //   118: getfield 23	cn/banny/rp/client/SocketProxy:socket	I
    //   121: aload_3
    //   122: invokevirtual 210	cn/banny/rp/client/ReverseProxyClient:sendException	(ILjava/lang/Throwable;)V
    //   125: aload_2
    //   126: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   129: aload_1
    //   130: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   133: return
    //   134: astore_2
    //   135: aconst_null
    //   136: astore_1
    //   137: aconst_null
    //   138: astore_3
    //   139: aload_3
    //   140: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   143: aload_1
    //   144: invokestatic 69	cn/banny/rp/ReverseProxy:closeQuietly	(Ljava/io/OutputStream;)V
    //   147: aload_2
    //   148: athrow
    //   149: astore_2
    //   150: aconst_null
    //   151: astore_1
    //   152: goto -13 -> 139
    //   155: astore_2
    //   156: goto -17 -> 139
    //   159: astore 4
    //   161: aload_2
    //   162: astore_3
    //   163: aload 4
    //   165: astore_2
    //   166: goto -27 -> 139
    //   169: astore 4
    //   171: aconst_null
    //   172: astore_1
    //   173: aload_3
    //   174: astore_2
    //   175: aload 4
    //   177: astore_3
    //   178: goto -69 -> 109
    //   181: astore 4
    //   183: aload_3
    //   184: astore_2
    //   185: aload 4
    //   187: astore_3
    //   188: goto -79 -> 109
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	191	0	this	SocketProxy
    //   0	191	1	paramSocketChannel	SocketChannel
    //   1	125	2	arrayOfByte	byte[]
    //   134	14	2	localObject1	Object
    //   149	1	2	localObject2	Object
    //   155	7	2	localObject3	Object
    //   165	20	2	localObject4	Object
    //   34	64	3	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    //   106	16	3	localIOException1	IOException
    //   138	50	3	localObject5	Object
    //   25	54	4	localSocket	Socket
    //   159	5	4	localObject6	Object
    //   169	7	4	localIOException2	IOException
    //   181	5	4	localIOException3	IOException
    // Exception table:
    //   from	to	target	type
    //   2	35	106	java/io/IOException
    //   2	35	134	finally
    //   35	44	149	finally
    //   44	97	155	finally
    //   109	125	159	finally
    //   35	44	169	java/io/IOException
    //   44	97	181	java/io/IOException
  }
  
  public void pushData(SocketChannel paramSocketChannel, byte[] paramArrayOfByte)
  {
    boolean bool = ReverseProxy.debug;
    messageReceived(paramSocketChannel, paramArrayOfByte);
  }
  
  public void sessionClosed(SocketChannel paramSocketChannel)
  {
    if (this.session != paramSocketChannel) {
      return;
    }
    close();
  }
  
  void writeData(byte[] paramArrayOfByte)
  {
    try
    {
      if (this.session.write(ByteBuffer.wrap(paramArrayOfByte)) < 1) {
        throw new EOFException();
      }
    }
    catch (IOException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
      close();
    }
  }
}
