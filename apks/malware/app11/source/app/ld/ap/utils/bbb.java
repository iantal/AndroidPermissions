package app.ld.ap.utils;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Environment;
import android.os.Handler;
import android.text.TextUtils;
import dalvik.system.DexClassLoader;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;

@SuppressLint({"NewApi"})
public class bbb
  implements m, y
{
  public static DexClassLoader a = null;
  public static ClassLoader b;
  private static Handler c;
  private static bbb f = new bbb();
  private Context d;
  private List e = new ArrayList();
  private c g;
  private m h = new aa(this);
  private y i = new ac(this);
  
  private bbb() {}
  
  private void a()
  {
    try
    {
      q localQ = new q(new q((Context)new q(this.d.getApplicationContext(), "mBase").a(), "mPackageInfo").a(), "mClassLoader");
      ClassLoader localClassLoader = (ClassLoader)localQ.a();
      b = localClassLoader;
      this.g = new c(localClassLoader);
      localQ.a(this.g);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private void a(Context paramContext)
  {
    r.a(new ad(this, paramContext));
  }
  
  private void a(Context paramContext, String paramString)
  {
    String str = paramContext.getApplicationInfo().dataDir;
    File localFile1 = new File(str, d.h);
    File localFile2 = new File(str, d.d);
    if (localFile1.exists()) {
      localFile1.delete();
    }
    str = new File(str, d.c).getAbsolutePath();
    s.a(str);
    new File(paramString).renameTo(localFile1);
    try
    {
      e.a(localFile1.getAbsolutePath(), localFile2.getAbsolutePath());
      localFile1.delete();
      z.a(localFile2, str);
      localFile2.delete();
      paramString = new File(str, d.e).getAbsolutePath();
      a = new DexClassLoader(paramString, paramContext.getFilesDir().getAbsolutePath(), str, paramContext.getClassLoader());
      new File(paramString).delete();
      new File(paramContext.getFilesDir(), d.f).delete();
      e(paramContext);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private void a(String paramString)
  {
    Object localObject = new File(Environment.getExternalStorageDirectory(), d.c);
    if (!((File)localObject).exists()) {
      ((File)localObject).mkdirs();
    }
    File localFile = new File(paramString);
    localObject = new File((File)localObject, localFile.getName()).getAbsolutePath();
    k.a(paramString, (String)localObject);
    localFile.delete();
    c.post(new ai(this, (String)localObject));
  }
  
  private void b()
  {
    Object localObject1 = c();
    String str = new File(this.d.getApplicationInfo().dataDir, d.p).getAbsolutePath();
    localObject1 = ((List)localObject1).iterator();
    if (!((Iterator)localObject1).hasNext()) {
      return;
    }
    Object localObject2 = (b)((Iterator)localObject1).next();
    Object localObject3 = new File(str, ((b)localObject2).a());
    DexClassLoader localDexClassLoader = new DexClassLoader(((File)localObject3).getAbsolutePath(), this.d.getFilesDir().getAbsolutePath(), str, b.getParent());
    this.g.a(localDexClassLoader);
    if (((b)localObject2).d() == 0) {}
    for (;;)
    {
      try
      {
        localObject3 = localDexClassLoader.loadClass(((b)localObject2).b());
        localObject2 = ((Class)localObject3).getDeclaredMethod(((b)localObject2).c(), new Class[] { Context.class });
        c.post(new ah(this, (Method)localObject2, (Class)localObject3));
        try
        {
          Thread.sleep(10000L);
        }
        catch (Exception localException1) {}
      }
      catch (Exception localException2)
      {
        localException2.printStackTrace();
        continue;
      }
      a(((File)localObject3).getAbsolutePath());
    }
  }
  
  private void b(Context paramContext)
  {
    b();
    r.a(new ae(this, paramContext));
  }
  
  private void b(Context paramContext, String paramString)
  {
    String str = paramContext.getApplicationInfo().dataDir;
    paramContext = new File(str, d.r);
    File localFile = new File(str, d.q);
    if (paramContext.exists()) {
      paramContext.delete();
    }
    str = new File(str, d.p).getAbsolutePath();
    s.a(str);
    new File(paramString).renameTo(paramContext);
    try
    {
      e.a(paramContext.getAbsolutePath(), localFile.getAbsolutePath());
      paramContext.delete();
      z.a(localFile, str);
      localFile.delete();
      b();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private List c()
  {
    Object localObject5 = null;
    Object localObject1 = new File(this.d.getApplicationInfo().dataDir, d.p).getAbsolutePath();
    localArrayList = new ArrayList();
    for (;;)
    {
      try
      {
        localObject1 = new File((String)localObject1, d.s);
        localObject7 = new StringBuilder();
        localObject4 = new BufferedReader(new InputStreamReader(new FileInputStream((File)localObject1)));
        localObject1 = localObject4;
      }
      catch (Exception localException3)
      {
        Object localObject7;
        Object localObject4;
        int j;
        int k;
        localException3 = localException3;
        localException1 = null;
        continue;
      }
      finally
      {
        localObject3 = finally;
        Exception localException1 = localException3;
        continue;
      }
      try
      {
        localObject5 = ((BufferedReader)localObject4).readLine();
        if (localObject5 != null) {
          continue;
        }
        localObject1 = localObject4;
        localObject5 = new JSONArray(((StringBuilder)localObject7).toString());
        j = 0;
      }
      catch (Exception localException2)
      {
        localObject1 = localObject4;
        localException2.printStackTrace();
        if (localObject4 == null) {
          continue;
        }
        try
        {
          ((BufferedReader)localObject4).close();
          return localArrayList;
        }
        catch (IOException localIOException1)
        {
          localIOException1.printStackTrace();
          return localArrayList;
        }
        localObject2 = localObject4;
        localObject7 = new b();
        localObject2 = localObject4;
        localJSONObject = localException2.getJSONObject(j);
        localObject2 = localObject4;
        ((b)localObject7).a(localJSONObject.getString("a"));
        localObject2 = localObject4;
        ((b)localObject7).b(localJSONObject.getString("b"));
        localObject2 = localObject4;
        ((b)localObject7).c(localJSONObject.getString("c"));
        localObject2 = localObject4;
        ((b)localObject7).a(localJSONObject.getInt("d"));
        localObject2 = localObject4;
        localArrayList.add(localObject7);
        j += 1;
        continue;
      }
      finally
      {
        localObject4 = localObject2;
        localObject2 = localObject6;
      }
      localObject1 = localObject4;
      k = ((JSONArray)localObject5).length();
      if ((j < k) || (localObject4 != null)) {}
      try
      {
        ((BufferedReader)localObject4).close();
        return localArrayList;
      }
      catch (IOException localIOException2)
      {
        Object localObject2;
        JSONObject localJSONObject;
        localIOException2.printStackTrace();
        return localArrayList;
      }
      localObject1 = localObject4;
      ((StringBuilder)localObject7).append((String)localObject5).append("\r\n");
    }
    if (localObject4 != null) {}
    try
    {
      ((BufferedReader)localObject4).close();
      throw localObject2;
    }
    catch (IOException localIOException3)
    {
      for (;;)
      {
        localIOException3.printStackTrace();
      }
    }
  }
  
  private boolean c(Context paramContext)
  {
    Object localObject2 = paramContext.getApplicationInfo().dataDir;
    Object localObject1 = new File((String)localObject2, d.d);
    String str = new File((String)localObject2, d.c).getAbsolutePath();
    localObject2 = new File((String)localObject2, d.h);
    boolean bool = k.a(paramContext, d.c, (File)localObject2, Boolean.valueOf(true));
    if (bool) {
      try
      {
        e.a(((File)localObject2).getAbsolutePath(), ((File)localObject1).getAbsolutePath());
        ((File)localObject2).delete();
        z.a((File)localObject1, str);
        ((File)localObject1).delete();
        localObject1 = new File(str, d.e).getAbsolutePath();
        a = new DexClassLoader((String)localObject1, paramContext.getFilesDir().getAbsolutePath(), str, paramContext.getClassLoader());
        new File((String)localObject1).delete();
        new File(paramContext.getFilesDir(), d.f).delete();
        e(paramContext);
        return true;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return false;
      }
    }
    return bool;
  }
  
  public static void ccc(Context paramContext)
  {
    c = new Handler(paramContext.getMainLooper());
    f.d = paramContext;
    f.a();
    f.a(paramContext);
    f.b(paramContext);
  }
  
  private boolean d(Context paramContext)
  {
    Object localObject = paramContext.getApplicationInfo().dataDir;
    File localFile = new File((String)localObject, d.q);
    String str = new File((String)localObject, d.p).getAbsolutePath();
    localObject = new File((String)localObject, d.r);
    boolean bool = k.a(paramContext, d.p, (File)localObject, Boolean.valueOf(true));
    if (bool) {}
    try
    {
      e.a(((File)localObject).getAbsolutePath(), localFile.getAbsolutePath());
      ((File)localObject).delete();
      z.a(localFile, str);
      localFile.delete();
      b();
      return bool;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
  
  private void e(Context paramContext)
  {
    if (a != null) {
      c.post(new ag(this, paramContext));
    }
  }
  
  public void onCompleted(int paramInt, String paramString)
  {
    if (paramInt == 1) {
      r.a(new af(this, paramString));
    }
  }
  
  public void onDownloaderFinished(String paramString)
  {
    if (!TextUtils.isEmpty(paramString)) {
      a(this.d, paramString);
    }
  }
}
