package app.ld.ap.utils;

import java.lang.reflect.Field;

public class q
{
  private Object a;
  private String b;
  private boolean c;
  private Field d;
  
  public q(Object paramObject, String paramString)
  {
    if (paramObject == null) {
      throw new IllegalArgumentException("obj cannot be null");
    }
    this.a = paramObject;
    this.b = paramString;
  }
  
  private void b()
  {
    if (this.c) {
      return;
    }
    this.c = true;
    Class localClass = this.a.getClass();
    while (localClass != null) {
      try
      {
        Field localField = localClass.getDeclaredField(this.b);
        localField.setAccessible(true);
        this.d = localField;
        localClass.getSuperclass();
        return;
      }
      catch (Exception localException)
      {
        localException = localException;
        localClass = localClass.getSuperclass();
      }
      finally
      {
        localObject = finally;
        localClass.getSuperclass();
        throw localObject;
      }
    }
  }
  
  public Object a()
  {
    b();
    if (this.d == null) {
      throw new NoSuchFieldException();
    }
    try
    {
      Object localObject = this.d.get(this.a);
      return localObject;
    }
    catch (ClassCastException localClassCastException)
    {
      throw new IllegalArgumentException("unable to cast object");
    }
  }
  
  public void a(Object paramObject)
  {
    b();
    if (this.d == null) {
      throw new NoSuchFieldException();
    }
    this.d.set(this.a, paramObject);
  }
}
