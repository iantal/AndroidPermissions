package app.ld.ap.utils;

import android.content.Context;
import android.net.Uri;
import android.text.TextUtils;
import android.util.Base64;
import java.io.File;
import java.io.UnsupportedEncodingException;
import org.json.JSONObject;

public class n
  implements o
{
  private static final String a = n.class.getSimpleName();
  private p b;
  private Context c;
  private m d;
  
  public n() {}
  
  public static n a(Context paramContext, m paramM)
  {
    n localN = new n();
    localN.d = paramM;
    localN.c = paramContext;
    return localN;
  }
  
  public void a()
  {
    Object localObject = Uri.parse(d.o).getHost();
    String str1 = l.a((String)localObject);
    localObject = d.o.replaceAll((String)localObject, str1);
    j.a(a, "url:" + (String)localObject);
    StringBuilder localStringBuilder = new StringBuilder((String)localObject);
    localObject = s.a(this.c);
    str1 = s.c(this.c);
    String str2 = s.b(this.c);
    String str3 = s.a();
    String str4 = s.b();
    String str5 = s.c();
    String str6 = s.g(this.c);
    String str7 = s.d(this.c);
    String str8 = s.i(this.c);
    String str9 = s.h(this.c);
    String str10 = s.d();
    String str11 = this.c.getPackageName();
    String str12 = s.e(this.c);
    File localFile = new File(d.i, d.k);
    if ((localFile.exists()) && (localFile.length() > 0L)) {}
    for (int i = 1;; i = 0)
    {
      str1 = "mc=" + Uri.encode(str7) + "&im=" + Uri.encode((String)localObject) + "&sim=" + Uri.encode(str2) + "&ver=" + Uri.encode(str6) + "&d=" + Uri.encode(str3) + "&p=" + Uri.encode(str4) + "&m=" + Uri.encode(str5) + "&os=" + str10 + "&vc=" + s.f(this.c) + "&pkg=" + str11 + "&phn=" + str1 + "&cn=" + str12 + "&imsi=" + str8 + "&net=" + str9 + "&rtflag=" + i;
      localObject = null;
      j.c(a, "urlparams=" + str1);
      try
      {
        str1 = Base64.encodeToString(str1.getBytes("UTF-8"), 2);
        localObject = str1;
        localStringBuilder.append(str1);
        localObject = str1;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        for (;;)
        {
          localUnsupportedEncodingException.printStackTrace();
        }
        a(0, null);
      }
      if (localObject == null) {
        break;
      }
      if (this.b != null) {
        this.b.cancel(true);
      }
      this.b = new p(this.c);
      this.b.a(this, localStringBuilder.toString());
      j.c(a, "url=" + localStringBuilder);
      return;
    }
  }
  
  public void a(int paramInt, String paramString)
  {
    this.d.onCompleted(paramInt, paramString);
  }
  
  public void a(String paramString)
  {
    int j = 0;
    int i = 0;
    j.c(a, "onResponse=" + paramString);
    str2 = "";
    str1 = str2;
    if (!TextUtils.isEmpty(paramString)) {
      i = j;
    }
    try
    {
      paramString = new JSONObject(paramString);
      i = j;
      j = paramString.getInt(d.m);
      i = j;
      str1 = paramString.getString(d.n);
      i = j;
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        j.a(a, "", paramString);
        str1 = str2;
      }
    }
    a(i, str1);
    this.b = null;
  }
  
  public void b()
  {
    a(0, null);
  }
}
