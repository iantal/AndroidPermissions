package com.lp.sdk.yninterface.util.request;

import android.app.Dialog;
import android.content.Context;
import com.lepeng.fastjson.JSON;
import com.lepeng.fastjson.JSONObject;
import com.lepeng.utils.L;
import com.lepeng.utils.StrUtil;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import com.lepeng.utils.http.core.RequestCallBack;
import com.lp.sdk.yninterface.data.EnumData.ErrorCodeType;

public abstract class ServiceRequester
  extends RequestCallBack
{
  public static int code;
  public static String errorMsg;
  public static String summary;
  private Dialog a;
  private Context ctx;
  
  public ServiceRequester() {}
  
  public ServiceRequester(Context paramContext)
  {
    this.ctx = paramContext;
  }
  
  public ServiceRequester(Context paramContext, String paramString)
  {
    this.ctx = paramContext;
    setId(paramString);
  }
  
  private void a(ResultEx paramResultEx)
  {
    o();
    try
    {
      String str = paramResultEx.getCode();
      if (str != null)
      {
        if (Integer.valueOf(str).intValue() != 0)
        {
          onError("ret != 0");
          return;
        }
        onResult(paramResultEx);
        return;
      }
    }
    catch (NumberFormatException paramResultEx)
    {
      L.e(EnumData.ErrorCodeType.REL_ILLEGAL.strName());
      onError(EnumData.ErrorCodeType.REL_ILLEGAL.strName());
      CheckedExceptionHandler.handleException(paramResultEx);
      return;
    }
    L.e(EnumData.ErrorCodeType.RET_NULL.strName());
    onError(EnumData.ErrorCodeType.RET_NULL.strName());
  }
  
  private void j(String paramString)
  {
    try
    {
      JSONObject localJSONObject = JSON.parseObject(paramString);
      Integer localInteger = localJSONObject.getInteger("code");
      code = localInteger.intValue();
      summary = localJSONObject.getString("summary");
      errorMsg = localJSONObject.getString("message");
      if ((localInteger != null) && (localInteger.intValue() != 0) && (StrUtil.notEmptyOrNull(errorMsg))) {
        L.toastShort(errorMsg);
      }
      paramString = (ResultEx)ResultEx.fromString(ResultEx.class, paramString.trim());
      if (paramString == null)
      {
        L.e(EnumData.ErrorCodeType.ILLEGAL_DATA_FORMAT.strName());
        onError(EnumData.ErrorCodeType.ILLEGAL_DATA_FORMAT.strName());
        return;
      }
      a(paramString);
      return;
    }
    catch (Exception paramString)
    {
      onError("解析结果出错");
      CheckedExceptionHandler.handleException(paramString);
    }
  }
  
  private void o()
  {
    if ((this.a != null) && (this.a.isShowing())) {
      this.a.dismiss();
    }
  }
  
  public void onError(String paramString)
  {
    o();
  }
  
  public void onFailure(Throwable paramThrowable, String paramString)
  {
    o();
    L.e(paramString, paramThrowable);
    onError(EnumData.ErrorCodeType.NETWORK_ERROR.strName());
  }
  
  public abstract void onResult(ResultEx paramResultEx);
  
  public void onSuccess(String paramString)
  {
    if (StrUtil.isEmptyOrNull(paramString))
    {
      L.e(EnumData.ErrorCodeType.RECEIVE_NOTHING.strName());
      onError(EnumData.ErrorCodeType.RECEIVE_NOTHING.strName());
      return;
    }
    L.i("return data [" + paramString.trim() + "]");
    j(paramString);
  }
  
  public void setbShowDlg(boolean paramBoolean)
  {
    if (paramBoolean) {}
  }
  
  public void setbShowDlg(boolean paramBoolean1, String paramString, boolean paramBoolean2) {}
}
