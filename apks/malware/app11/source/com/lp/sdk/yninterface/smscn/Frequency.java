package com.lp.sdk.yninterface.smscn;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class Frequency
{
  private boolean A = true;
  private Set d = new TreeSet();
  private Map map = new HashMap();
  
  public Frequency() {}
  
  private void dataChanged()
  {
    if ((!this.A) || (this.map == null) || (this.map.isEmpty()) || (this.map.keySet().isEmpty())) {}
    label127:
    for (;;)
    {
      return;
      Iterator localIterator = this.map.keySet().iterator();
      if (localIterator != null) {
        for (;;)
        {
          if (!localIterator.hasNext()) {
            break label127;
          }
          String str = (String)localIterator.next();
          if (this.d == null) {
            break;
          }
          this.d.add(new Frequency.Entiry(this, str, (Integer)this.map.get(str)));
          this.A = false;
        }
      }
    }
  }
  
  public void addStatistics(String paramString)
  {
    Integer localInteger = (Integer)this.map.get(paramString);
    Map localMap = this.map;
    if (localInteger == null) {}
    for (int i = 1;; i = localInteger.intValue() + 1)
    {
      localMap.put(paramString, Integer.valueOf(i));
      return;
    }
  }
  
  public List getDataDesc()
  {
    dataChanged();
    Iterator localIterator = this.d.iterator();
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return localArrayList;
      }
      Frequency.Entiry localEntiry = (Frequency.Entiry)localIterator.next();
      localArrayList.add(localEntiry);
      System.out.println(localEntiry.toString());
    }
  }
  
  public Frequency.Entiry getMaxValueItem()
  {
    dataChanged();
    if ((this.d == null) || (this.d.isEmpty())) {}
    Iterator localIterator;
    do
    {
      return null;
      localIterator = this.d.iterator();
    } while ((localIterator == null) || (!localIterator.hasNext()));
    return (Frequency.Entiry)localIterator.next();
  }
}
