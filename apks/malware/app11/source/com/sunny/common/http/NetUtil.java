package com.sunny.common.http;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import java.io.File;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.conn.util.InetAddressUtils;

public class NetUtil
{
  public NetUtil() {}
  
  public static boolean enable(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext != null) {
      return paramContext.isAvailable();
    }
    return false;
  }
  
  public static String getGetUrl(String paramString, HashMap paramHashMap)
  {
    paramHashMap = paramHashMap.entrySet().iterator();
    for (;;)
    {
      if (!paramHashMap.hasNext()) {
        return paramString;
      }
      Object localObject = (Map.Entry)paramHashMap.next();
      String str = (String)((Map.Entry)localObject).getKey();
      localObject = ((Map.Entry)localObject).getValue();
      paramString = paramString + "&" + str + "=" + localObject;
    }
  }
  
  public static String getLocalIpAddress()
  {
    try
    {
      InetAddress localInetAddress;
      do
      {
        localObject = NetworkInterface.getNetworkInterfaces();
        Enumeration localEnumeration;
        while (!localEnumeration.hasMoreElements())
        {
          if (!((Enumeration)localObject).hasMoreElements()) {
            break;
          }
          localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
        }
        localInetAddress = (InetAddress)localEnumeration.nextElement();
      } while ((localInetAddress.isLoopbackAddress()) || (!InetAddressUtils.isIPv4Address(localInetAddress.getHostAddress())));
      Object localObject = localInetAddress.getHostAddress().toString();
      return localObject;
    }
    catch (SocketException localSocketException) {}
    return null;
  }
  
  public static String getNetStatus(Context paramContext)
  {
    Object localObject1 = "";
    Object localObject2 = (ConnectivityManager)paramContext.getSystemService("connectivity");
    Object localObject3 = ((ConnectivityManager)localObject2).getNetworkInfo(0);
    paramContext = (Context)localObject1;
    if (localObject3 != null)
    {
      localObject3 = ((NetworkInfo)localObject3).getState();
      paramContext = (Context)localObject1;
      if (localObject3 != null)
      {
        paramContext = (Context)localObject1;
        if (((NetworkInfo.State)localObject3).toString().equals(NetworkInfo.State.CONNECTED.toString())) {
          paramContext = "3G";
        }
      }
    }
    localObject2 = ((ConnectivityManager)localObject2).getNetworkInfo(1);
    localObject1 = paramContext;
    if (localObject2 != null)
    {
      localObject2 = ((NetworkInfo)localObject2).getState();
      localObject1 = paramContext;
      if (localObject2 != null)
      {
        localObject1 = paramContext;
        if (((NetworkInfo.State)localObject2).toString().equals(NetworkInfo.State.CONNECTED.toString())) {
          localObject1 = "WIFI";
        }
      }
    }
    return localObject1;
  }
  
  public static boolean isRoot()
  {
    try
    {
      if (!new File("/system/bin/su").exists())
      {
        boolean bool = new File("/system/xbin/su").exists();
        if (!bool) {
          return false;
        }
      }
      return true;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public static boolean isWifi(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (paramContext == null) {
      return true;
    }
    int i = paramContext.getType();
    if (i == 0) {
      return false;
    }
    return i == 1;
  }
  
  public static String parserPostParams(HashMap paramHashMap)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    if ((paramHashMap != null) && (paramHashMap.size() > 0))
    {
      paramHashMap = paramHashMap.entrySet().iterator();
      for (;;)
      {
        if (!paramHashMap.hasNext()) {
          return localStringBuffer.subSequence(0, localStringBuffer.length() - 1).toString().trim();
        }
        Object localObject = (Map.Entry)paramHashMap.next();
        String str = (String)((Map.Entry)localObject).getKey();
        localObject = (String)((Map.Entry)localObject).getValue();
        localStringBuffer.append(str + "=" + (String)localObject + "&");
      }
    }
    return "";
  }
}
