package com.zdtpay.net;

import android.content.Context;
import android.text.TextUtils;
import com.duowan.mobile.netroid.RequestQueue;
import com.duowan.mobile.netroid.b.a;
import com.zdtpay.ZDTPayParamInfo;
import com.zdtpay.ZDTPaySDK;
import com.zdtpay.tools.MyLogPrinter;
import com.zdtpay.tools.b;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class DataRequestTask
{
  public static int a = 0;
  public static int b = 1;
  
  public static void a(Context paramContext, int paramInt, String paramString, HashMap paramHashMap, DataRequestTask.RequestCallBack paramRequestCallBack)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    RequestQueue localRequestQueue = com.zdtpay.f.b(paramContext);
    HashMap localHashMap = paramHashMap;
    if (paramHashMap == null) {}
    for (;;)
    {
      try
      {
        localHashMap = new HashMap();
        if (b.d != null)
        {
          localHashMap.put(com.zdtpay.tools.c.j, b.d.getAppkey());
          localHashMap.put("appsecret", b.d.getAppsecret());
          if (!TextUtils.isEmpty(b.d.getMobile()))
          {
            paramHashMap = new StringBuffer(b.d.getMobile());
            if (paramHashMap.length() > 11) {
              paramHashMap.delete(0, paramHashMap.length() - 11);
            }
            localHashMap.put(com.zdtpay.tools.c.k, paramHashMap.toString());
          }
          localHashMap.put(com.zdtpay.tools.c.l, b.d.getMobile_type());
          localHashMap.put(com.zdtpay.tools.c.n, b.d.getProvince());
        }
        localHashMap.put(com.zdtpay.tools.c.f, com.zdtpay.tools.f.h(paramContext));
        localHashMap.put(com.zdtpay.tools.c.g, com.zdtpay.tools.f.f(paramContext));
        localHashMap.put(com.zdtpay.tools.c.h, com.zdtpay.tools.f.g(paramContext));
        localHashMap.put("version", ZDTPaySDK.getVersion());
        localHashMap.put("type", com.zdtpay.tools.f.k(paramContext));
        paramContext = localHashMap.keySet().iterator();
        if (!paramContext.hasNext())
        {
          if (localStringBuffer.length() != 0) {
            localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
          }
          paramContext = paramString;
          if (paramInt == a) {
            paramContext = paramString + "?" + localStringBuffer.toString().trim();
          }
          MyLogPrinter.b("get url type = " + paramInt + " url = " + paramContext);
          paramContext = new d(paramInt, paramContext, new c(paramRequestCallBack), localHashMap);
          paramContext.a(TimeUnit.SECONDS, 5);
          localRequestQueue.a(paramContext);
          return;
        }
        paramHashMap = ((String)paramContext.next()).trim();
        if (localHashMap.get(paramHashMap) == null) {
          MyLogPrinter.b(paramHashMap + "=null");
        } else {
          localStringBuffer.append(paramHashMap + "=" + URLEncoder.encode((String)localHashMap.get(paramHashMap), "UTF-8") + "&");
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
    }
  }
  
  public static void a(Context paramContext, int paramInt1, String paramString, HashMap paramHashMap, DataRequestTask.RequestCallBack paramRequestCallBack, int paramInt2)
  {
    new Thread(new f(paramHashMap, paramContext, paramInt1, paramString, new e(paramContext.getMainLooper(), paramRequestCallBack))).start();
  }
}
