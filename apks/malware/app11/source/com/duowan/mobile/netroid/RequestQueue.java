package com.duowan.mobile.netroid;

import android.os.Handler;
import android.os.Looper;
import com.duowan.mobile.netroid.a.a;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class RequestQueue
{
  private AtomicInteger a = new AtomicInteger();
  private final Map b = new HashMap();
  private final Set c = new HashSet();
  private final PriorityBlockingQueue d = new PriorityBlockingQueue();
  private final PriorityBlockingQueue e = new PriorityBlockingQueue();
  private final a f;
  private final Network g;
  private final Delivery h;
  private u[] i;
  private b j;
  
  public RequestQueue(Network paramNetwork, int paramInt, Delivery paramDelivery, a paramA)
  {
    this.f = paramA;
    this.g = paramNetwork;
    this.h = paramDelivery;
    this.g.setDelivery(paramDelivery);
    this.i = new u[paramInt];
  }
  
  public RequestQueue(Network paramNetwork, int paramInt, a paramA)
  {
    this(paramNetwork, paramInt, new e(new Handler(Looper.getMainLooper())), paramA);
  }
  
  public Request a(Request paramRequest)
  {
    paramRequest.a(this);
    synchronized (this.c)
    {
      this.c.add(paramRequest);
      paramRequest.a(c());
      paramRequest.a("add-to-queue");
      if ((paramRequest.d()) || (!paramRequest.n()))
      {
        this.h.postNetworking(paramRequest);
        this.e.add(paramRequest);
        return paramRequest;
      }
    }
    for (;;)
    {
      String str;
      synchronized (this.b)
      {
        str = paramRequest.c();
        if (this.b.containsKey(str))
        {
          Queue localQueue = (Queue)this.b.get(str);
          ??? = localQueue;
          if (localQueue == null) {
            ??? = new LinkedList();
          }
          ((Queue)???).add(paramRequest);
          this.b.put(str, ???);
          if (r.b) {
            r.a("Request for cacheKey=%s is in flight, putting on hold.", new Object[] { str });
          }
          return paramRequest;
        }
      }
      this.b.put(str, null);
      this.d.add(paramRequest);
    }
  }
  
  public void a()
  {
    b();
    this.j = new b(this.d, this.e, this.f, this.h);
    this.j.start();
    int k = 0;
    for (;;)
    {
      if (k >= this.i.length) {
        return;
      }
      u localU = new u(this.e, this.g, this.f, this.h);
      this.i[k] = localU;
      localU.start();
      k += 1;
    }
  }
  
  public void b()
  {
    if (this.j != null) {
      this.j.a();
    }
    u[] arrayOfU = this.i;
    int m = arrayOfU.length;
    int k = 0;
    for (;;)
    {
      if (k >= m) {
        return;
      }
      u localU = arrayOfU[k];
      if (localU != null) {
        localU.a();
      }
      k += 1;
    }
  }
  
  void b(Request paramRequest)
  {
    synchronized (this.c)
    {
      this.c.remove(paramRequest);
      if ((paramRequest.d()) || (!paramRequest.n())) {}
    }
    synchronized (this.b)
    {
      paramRequest = paramRequest.c();
      Queue localQueue = (Queue)this.b.remove(paramRequest);
      if (localQueue != null)
      {
        if (r.b) {
          r.a("Releasing %d waiting requests for cacheKey=%s.", new Object[] { Integer.valueOf(localQueue.size()), paramRequest });
        }
        this.d.addAll(localQueue);
      }
      return;
      paramRequest = finally;
      throw paramRequest;
    }
  }
  
  public int c()
  {
    return this.a.incrementAndGet();
  }
}
