package com.zhangzhifu.sdk.util;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.text.TextUtils;
import android.text.format.Formatter;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.Proxy.Type;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SystemInfo
{
  private static String B = "";
  public static final String CHINA_MOBILE = "mobile";
  public static final String CHINA_TELECOM = "telecom";
  public static final String CHINA_UNICOM = "unicom";
  public static final String CMWAP = "cmwap";
  public static final String CTWAP = "ctwap";
  public static String LOG_TAG = "platform";
  public static final String NETWORK_TYPE_3G_NET = "3g-net";
  public static final String NETWORK_TYPE_3G_WAP = "3g-wap";
  public static final String NETWORK_TYPE_EDGE_NET = "edge-net";
  public static final String NETWORK_TYPE_EDGE_WAP = "edge-wap";
  public static final String NETWORK_TYPE_GPRS_NET = "gprs-net";
  public static final String NETWORK_TYPE_GPRS_WAP = "gprs-wap";
  public static final String NETWORK_TYPE_WIFI = "wifi";
  public static Uri PREFERRED_APN_URI;
  public static final String TAG = "zhangPay_log";
  public static final int TYPE_CM_CU_WAP = 4;
  public static final int TYPE_CT_WAP = 5;
  public static final int TYPE_NET_WORK_DISABLED = 0;
  public static final int TYPE_NET_WORK_EXCEPSION = 1;
  public static final int TYPE_OTHER_NET = 6;
  public static final int TYPE_OTHER_WIFI = 3;
  public static final String UNIWAP = "uniwap";
  public static final String UNKNOW = "unknow";
  public static final String WAP_3G = "3gwap";
  private static String bj;
  private static String bk;
  public static String cardType;
  private static String dX = "";
  private static String dY;
  private static boolean dZ;
  private static boolean ea;
  private static String eb;
  private static int ec;
  private static int ed;
  private static String ee;
  private static String ef;
  private static String eg;
  private static String eh;
  private static String ei;
  private static int ej;
  private static int ek;
  private static int el;
  private static int em;
  private static String en = "";
  private static Map eo;
  private static String ep;
  private static String eq;
  
  static
  {
    PREFERRED_APN_URI = Uri.parse("content://telephony/carriers/preferapn");
    dY = "00000000000";
    ee = "unknow";
    ek = -1;
    el = -1;
    em = -1;
  }
  
  public SystemInfo() {}
  
  private static void E(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    ed = localDisplayMetrics.heightPixels;
    ec = localDisplayMetrics.widthPixels;
  }
  
  public static void _getNetworkInfo(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    ee = "unknow";
    if (localNetworkInfo != null) {}
    switch (localNetworkInfo.getType())
    {
    default: 
      ee = "unknow";
      return;
    case 0: 
      int i = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
      paramContext = getProxy(paramContext);
      if (i == 1)
      {
        if (paramContext != null)
        {
          ee = "gprs-wap";
          return;
        }
        ee = "gprs-net";
        return;
      }
      if ((i == 2) || (i == 0))
      {
        if (paramContext != null)
        {
          ee = "edge-wap";
          return;
        }
        ee = "edge-net";
        return;
      }
      if (paramContext != null)
      {
        ee = "3g-wap";
        return;
      }
      ee = "3g-net";
      return;
    }
    ee = "wifi";
  }
  
  public static int checkNetworkType(Context paramContext)
  {
    try
    {
      NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localNetworkInfo == null) || (!localNetworkInfo.isAvailable()))
      {
        ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于无网络状态");
        return 6;
      }
      int i = localNetworkInfo.getType();
      if (i == 1)
      {
        ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于wifi网络");
        return 6;
      }
      if (i == 0)
      {
        paramContext = paramContext.getContentResolver().query(PREFERRED_APN_URI, null, null, null, null);
        if (paramContext != null)
        {
          paramContext.moveToFirst();
          String str = paramContext.getString(paramContext.getColumnIndex("user"));
          if (!TextUtils.isEmpty(str))
          {
            Log.i("", "代理：" + paramContext.getString(paramContext.getColumnIndex("proxy")));
            if (str.startsWith("ctwap"))
            {
              ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于电信wap网络");
              return 5;
            }
          }
        }
        paramContext.close();
        paramContext = localNetworkInfo.getExtraInfo();
        if (paramContext != null)
        {
          paramContext = paramContext.toLowerCase();
          if ((paramContext.equals("cmwap")) || (paramContext.equals("3gwap")) || (paramContext.equals("uniwap")))
          {
            ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于移动联通wap网络");
            return 4;
          }
        }
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      return 6;
    }
    return 6;
  }
  
  public static String getBT(Context paramContext)
  {
    if (ei != null) {
      return ei;
    }
    paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo();
    int i;
    if (paramContext != null)
    {
      paramContext = paramContext.getMacAddress();
      if (paramContext != null)
      {
        ei = "";
        i = 0;
      }
    }
    for (;;)
    {
      if (i >= paramContext.length()) {
        return ei;
      }
      char c = paramContext.charAt(i);
      if (c != ':') {
        ei += c;
      }
      i += 1;
    }
  }
  
  public static String getCardType(Context paramContext)
  {
    for (;;)
    {
      try
      {
        paramContext = getIMSI(paramContext);
        ZhangPayLog.showSaveLog("==", "imsi" + paramContext);
        if (paramContext == null) {
          continue;
        }
        if ((paramContext.startsWith("46000")) || (paramContext.startsWith("46002")) || (paramContext.startsWith("46007"))) {
          cardType = "mobile";
        }
        if (paramContext.startsWith("46001")) {
          cardType = "unicom";
        }
        if (!paramContext.startsWith("46003")) {
          continue;
        }
        cardType = "telecom";
      }
      catch (Exception paramContext)
      {
        cardType = "unknow";
        continue;
        cardType = "unknow";
        continue;
      }
      return cardType;
      cardType = "unknow";
    }
  }
  
  public static int getCpId(Context paramContext)
  {
    if (ek != -1) {
      return ek;
    }
    try
    {
      ek = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_CPID");
      return ek;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        ek = 0;
        ZhangPayLog.showSaveLog("===", "得到CPID 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String getCpuName()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/cpuinfo")).readLine().split(":\\s+", 2)[1];
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return null;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String getCurCpuFreq()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "N/A";
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return "N/A";
  }
  
  public static String getCurrentTime()
  {
    return new SimpleDateFormat("HHmmssSSS").format(Calendar.getInstance().getTime()) + ((int)(Math.random() * 900.0D) + 100);
  }
  
  public static int getFee(Context paramContext)
  {
    if (em != -1) {
      return em;
    }
    try
    {
      em = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_FEE");
      return em;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        em = -1;
        ZhangPayLog.showSaveLog("===", "得到fee 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String getIMEI(Context paramContext)
  {
    if (bj != null) {
      return bj;
    }
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    bj = paramContext;
    if (paramContext == null) {
      bj = "";
    }
    return bj;
  }
  
  public static String getIMSI(Context paramContext)
  {
    if (bk != null) {
      return bk;
    }
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    bk = paramContext;
    if (paramContext == null) {
      bk = "";
    }
    return bk;
  }
  
  public static String getLAC(Context paramContext)
  {
    if (eh != null) {
      return eh;
    }
    paramContext = (GsmCellLocation)((TelephonyManager)paramContext.getSystemService("phone")).getCellLocation();
    if (paramContext != null)
    {
      int i = paramContext.getLac();
      int j = paramContext.getCid();
      if (i != -1)
      {
        eh = i;
        if (j != -1) {
          eh = eh + "#" + j;
        }
      }
    }
    if (eh == null) {
      eh = "0000#00";
    }
    return eh;
  }
  
  public static String getMID(Context paramContext)
  {
    if (ef != null) {
      return ef;
    }
    paramContext = getSMSC() + '#' + getIMSI(paramContext);
    ef = paramContext;
    eg = paramContext;
    return ef;
  }
  
  public static String getMIDX(Context paramContext)
  {
    if (eg != null) {
      return eg;
    }
    paramContext = getMID(paramContext);
    eg = paramContext;
    return paramContext;
  }
  
  public static String getMTKDoubleSIMInfo(Context paramContext)
  {
    eo = new HashMap();
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    eo.put("CallState", paramContext.getCallState());
    eo.put("DataState", paramContext.getDataState());
    eo.put("DeviceId", paramContext.getDeviceId());
    eo.put("Line1Number", paramContext.getLine1Number());
    eo.put("NetworkCountryIso", paramContext.getNetworkCountryIso());
    eo.put("NetworkOperator", paramContext.getNetworkOperator());
    eo.put("NetworkOperatorName", paramContext.getNetworkOperatorName());
    eo.put("SimSerialNumber", paramContext.getSimSerialNumber());
    eo.put("PhoneType", paramContext.getPhoneType());
    eo.put("SimCountryIso", paramContext.getSimCountryIso());
    eo.put("SimOperator", paramContext.getSimOperator());
    eo.put("SimOperatorName", paramContext.getSimOperatorName());
    eo.put("SimSerialNumber", paramContext.getSimSerialNumber());
    eo.put("SimState", paramContext.getSimState());
    eo.put("SubscriberId", paramContext.getSubscriberId());
    ep = (String)eo.get("SubscriberId");
    try
    {
      Method localMethod = paramContext.getClass().getDeclaredMethod("getCallStateGemini", new Class[] { Integer.TYPE });
      String str = "SIM卡1信息:\n" + dX;
      dX = str;
      dX = str + "\n\nSIM卡2信息:";
      eo.put("CallState_1", localMethod.invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("DataState_1", paramContext.getClass().getMethod("getDataStateGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("DeviceId_1", paramContext.getClass().getMethod("getDeviceIdGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("Line1Number_1", paramContext.getClass().getMethod("getLine1NumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("NetworkCountryIso_1", paramContext.getClass().getMethod("getNetworkCountryIsoGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("NetworkOperator_1", paramContext.getClass().getMethod("getNetworkOperatorGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("NetworkOperatorName_1", paramContext.getClass().getMethod("getNetworkOperatorNameGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SimSerialNumber_1", paramContext.getClass().getMethod("getSimSerialNumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("PhoneType_1", paramContext.getClass().getMethod("getPhoneTypeGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SimCountryIso_1", paramContext.getClass().getMethod("getSimCountryIsoGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SimOperator_1", paramContext.getClass().getMethod("getSimOperatorGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SimOperatorName_1", paramContext.getClass().getMethod("getSimOperatorNameGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SimSerialNumber_1", paramContext.getClass().getMethod("getSimSerialNumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SimState_1", paramContext.getClass().getMethod("getSimStateGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eo.put("SubscriberId_1", paramContext.getClass().getMethod("getSubscriberIdGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      eq = (String)eo.get("SubscriberId_1");
      if ((ep != null) || (ep.length() > 0)) {
        return ep;
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        dX = "SIM卡信息:\n" + dX;
      }
      if ((ep != null) || ((ep.length() > 0) && (eq != null)) || (eq.length() > 0)) {
        return ep;
      }
      if ((ep == null) || ((ep.length() == 0) && (eq != null)) || (eq.length() > 0)) {
        return eq;
      }
    }
    return ep;
  }
  
  public static String getMaxCpuFreq()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  /* Error */
  public static String getMem_TOLAL()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 4
    //   5: new 384	java/io/BufferedReader
    //   8: dup
    //   9: new 386	java/io/FileReader
    //   12: dup
    //   13: ldc_w 701
    //   16: invokespecial 389	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   19: bipush 8
    //   21: invokespecial 704	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   24: astore_1
    //   25: aload_1
    //   26: astore_0
    //   27: aload_1
    //   28: invokevirtual 395	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   31: astore_2
    //   32: aload 4
    //   34: astore_0
    //   35: aload_2
    //   36: ifnull +5 -> 41
    //   39: aload_2
    //   40: astore_0
    //   41: aload_1
    //   42: invokevirtual 705	java/io/BufferedReader:close	()V
    //   45: new 247	java/lang/StringBuilder
    //   48: dup
    //   49: aload_0
    //   50: aload_0
    //   51: bipush 58
    //   53: invokevirtual 709	java/lang/String:indexOf	(I)I
    //   56: iconst_1
    //   57: iadd
    //   58: aload_0
    //   59: bipush 107
    //   61: invokevirtual 709	java/lang/String:indexOf	(I)I
    //   64: invokevirtual 713	java/lang/String:substring	(II)Ljava/lang/String;
    //   67: invokevirtual 409	java/lang/String:trim	()Ljava/lang/String;
    //   70: invokestatic 716	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   73: i2l
    //   74: invokestatic 719	java/lang/String:valueOf	(J)Ljava/lang/String;
    //   77: invokespecial 252	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   80: invokevirtual 262	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   83: areturn
    //   84: astore_2
    //   85: aconst_null
    //   86: astore_1
    //   87: aload_1
    //   88: astore_0
    //   89: aload_2
    //   90: invokevirtual 402	java/io/FileNotFoundException:printStackTrace	()V
    //   93: aload_3
    //   94: astore_0
    //   95: aload_1
    //   96: ifnull -51 -> 45
    //   99: aload_1
    //   100: invokevirtual 705	java/io/BufferedReader:close	()V
    //   103: aload_3
    //   104: astore_0
    //   105: goto -60 -> 45
    //   108: astore_0
    //   109: aload_0
    //   110: invokevirtual 403	java/io/IOException:printStackTrace	()V
    //   113: aload_3
    //   114: astore_0
    //   115: goto -70 -> 45
    //   118: astore_2
    //   119: aconst_null
    //   120: astore_1
    //   121: aload_1
    //   122: astore_0
    //   123: aload_2
    //   124: invokevirtual 403	java/io/IOException:printStackTrace	()V
    //   127: aload_3
    //   128: astore_0
    //   129: aload_1
    //   130: ifnull -85 -> 45
    //   133: aload_1
    //   134: invokevirtual 705	java/io/BufferedReader:close	()V
    //   137: aload_3
    //   138: astore_0
    //   139: goto -94 -> 45
    //   142: astore_0
    //   143: aload_0
    //   144: invokevirtual 403	java/io/IOException:printStackTrace	()V
    //   147: aload_3
    //   148: astore_0
    //   149: goto -104 -> 45
    //   152: astore_1
    //   153: aconst_null
    //   154: astore_0
    //   155: aload_0
    //   156: ifnull +7 -> 163
    //   159: aload_0
    //   160: invokevirtual 705	java/io/BufferedReader:close	()V
    //   163: aload_1
    //   164: athrow
    //   165: astore_0
    //   166: aload_0
    //   167: invokevirtual 403	java/io/IOException:printStackTrace	()V
    //   170: goto -7 -> 163
    //   173: astore_1
    //   174: aload_1
    //   175: invokevirtual 403	java/io/IOException:printStackTrace	()V
    //   178: goto -133 -> 45
    //   181: astore_1
    //   182: goto -27 -> 155
    //   185: astore_2
    //   186: goto -65 -> 121
    //   189: astore_2
    //   190: goto -103 -> 87
    // Local variable table:
    //   start	length	slot	name	signature
    //   26	79	0	localObject1	Object
    //   108	2	0	localIOException1	IOException
    //   114	25	0	localObject2	Object
    //   142	2	0	localIOException2	IOException
    //   148	12	0	localObject3	Object
    //   165	2	0	localIOException3	IOException
    //   24	110	1	localBufferedReader	BufferedReader
    //   152	12	1	localObject4	Object
    //   173	2	1	localIOException4	IOException
    //   181	1	1	localObject5	Object
    //   31	9	2	str	String
    //   84	6	2	localFileNotFoundException1	FileNotFoundException
    //   118	6	2	localIOException5	IOException
    //   185	1	2	localIOException6	IOException
    //   189	1	2	localFileNotFoundException2	FileNotFoundException
    //   1	147	3	localObject6	Object
    //   3	30	4	localObject7	Object
    // Exception table:
    //   from	to	target	type
    //   5	25	84	java/io/FileNotFoundException
    //   99	103	108	java/io/IOException
    //   5	25	118	java/io/IOException
    //   133	137	142	java/io/IOException
    //   5	25	152	finally
    //   159	163	165	java/io/IOException
    //   41	45	173	java/io/IOException
    //   27	32	181	finally
    //   89	93	181	finally
    //   123	127	181	finally
    //   27	32	185	java/io/IOException
    //   27	32	189	java/io/FileNotFoundException
  }
  
  public static String getMem_UNUSED(Context paramContext)
  {
    try
    {
      paramContext = (ActivityManager)paramContext.getSystemService("activity");
      ActivityManager.MemoryInfo localMemoryInfo = new ActivityManager.MemoryInfo();
      paramContext.getMemoryInfo(localMemoryInfo);
      l = localMemoryInfo.availMem / 1024L;
      return l;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        long l = 0L;
      }
    }
  }
  
  public static String getMinCpuFreq()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static String getMobileNum(Context paramContext)
  {
    return SharePreferUtil.getMOBILEFromDataBase(paramContext);
  }
  
  public static String getNativePhoneNumber(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
  }
  
  public static String getNetworkInfo(Context paramContext)
  {
    _getNetworkInfo(paramContext);
    return ee;
  }
  
  public static int getNetworkState(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (localNetworkInfo != null)
    {
      switch (localNetworkInfo.getType())
      {
      default: 
        return 0;
      case 0: 
        int i = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
        paramContext = getProxy(paramContext);
        if ((i == 1) || (i == 2))
        {
          if (paramContext != null) {
            return 4;
          }
          return 6;
        }
        if (i == 4)
        {
          if (paramContext != null) {
            return 5;
          }
          return 6;
        }
        if ((i == 5) || (i == 6))
        {
          if (paramContext != null) {
            return 5;
          }
          return 6;
        }
        if ((i == 3) || (i == 8))
        {
          if (paramContext != null) {
            return 4;
          }
          return 6;
        }
        if (paramContext != null) {
          return 4;
        }
        return 6;
      }
      return 3;
    }
    return 0;
  }
  
  public static String getOrderId()
  {
    return en;
  }
  
  public static String getP(Context paramContext)
  {
    if ((B != null) && (!B.trim().equals(""))) {
      return B;
    }
    try
    {
      B = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getString("ZPAY_P");
      return B;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        B = "";
        ZhangPayLog.showSaveLog("===", "得到备用字段 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String getPackageName(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    paramContext = paramContext.getPackageName();
    ZhangPayLog.showSaveLog("", "包名为" + paramContext);
    return paramContext;
  }
  
  public static java.net.Proxy getProxy(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.getType() == 1)) {
        return null;
      }
      paramContext = android.net.Proxy.getDefaultHost();
      if ((paramContext != null) && (!paramContext.equals("")))
      {
        paramContext = new java.net.Proxy(Proxy.Type.HTTP, new InetSocketAddress(android.net.Proxy.getDefaultHost(), android.net.Proxy.getDefaultPort()));
        return paramContext;
      }
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getSDAvailableSize(Context paramContext)
  {
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l = localStatFs.getBlockSize();
      paramContext = Formatter.formatFileSize(paramContext, localStatFs.getAvailableBlocks() * l);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static String getSDTotalSize(Context paramContext)
  {
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l = localStatFs.getBlockSize();
      paramContext = Formatter.formatFileSize(paramContext, localStatFs.getBlockCount() * l);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static String getSMSC()
  {
    return dY;
  }
  
  public static String getScreen(Context paramContext)
  {
    if (eb != null) {
      return eb;
    }
    paramContext = getScreenHeight(paramContext) + "*" + getScreenWidth(paramContext);
    eb = paramContext;
    return paramContext;
  }
  
  public static int getScreenHeight(Context paramContext)
  {
    if (ed > 0) {
      return ed;
    }
    E(paramContext);
    return ed;
  }
  
  public static int getScreenWidth(Context paramContext)
  {
    if (ec > 0) {
      return ec;
    }
    E(paramContext);
    return ec;
  }
  
  public static int getServiceId(Context paramContext)
  {
    if (el != -1) {
      return el;
    }
    try
    {
      el = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_APPFEE_ID");
      return el;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        el = -1;
        ZhangPayLog.showSaveLog("===", "得到serviceId 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static int getSimState(Context paramContext)
  {
    try
    {
      ej = ((TelephonyManager)paramContext.getSystemService("phone")).getSimState();
      return ej;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
  }
  
  public static boolean hasSuperAction()
  {
    return ea;
  }
  
  public static boolean isMobileNO(String paramString)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {
      return false;
    }
    Matcher localMatcher = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0-9]))\\d{8}$").matcher(paramString);
    ZhangPayLog.showSaveLog("", "输入的电话号码是 " + paramString + " ,,," + localMatcher.matches());
    return localMatcher.matches();
  }
  
  public static boolean isStartService()
  {
    return dZ;
  }
  
  public static void setCpId(int paramInt)
  {
    ek = paramInt;
  }
  
  public static void setFee(int paramInt)
  {
    em = paramInt;
  }
  
  public static void setHasSuperAction(boolean paramBoolean)
  {
    ea = paramBoolean;
  }
  
  public static void setOrderId(String paramString)
  {
    en = paramString;
  }
  
  public static void setSMSC(Context paramContext, String paramString)
  {
    if ((paramString != null) && (!paramString.trim().equals("")) && (paramString.length() == 11))
    {
      dY = paramString;
      paramContext = getSMSC() + '#' + getIMSI(paramContext);
      ef = paramContext;
      eg = paramContext;
    }
  }
  
  public static void setServiceId(int paramInt)
  {
    el = paramInt;
  }
  
  public static void setStartServiceState(boolean paramBoolean)
  {
    dZ = paramBoolean;
  }
  
  public static void updateIMSI(Context paramContext)
  {
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    bk = paramContext;
    if (paramContext != null)
    {
      if ((bk.startsWith("46000")) || (bk.startsWith("46002")) || (bk.startsWith("46007")))
      {
        cardType = "mobile";
        return;
      }
      if (bk.startsWith("46001"))
      {
        cardType = "unicom";
        return;
      }
      if (bk.startsWith("46003"))
      {
        cardType = "telecom";
        return;
      }
      cardType = "unknow";
      return;
    }
    bk = "";
    cardType = "unknown";
  }
  
  public long[] getSDCardMemory()
  {
    long[] arrayOfLong = new long[2];
    if ("mounted".equals(Environment.getExternalStorageState()))
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l1 = localStatFs.getBlockSize();
      long l2 = localStatFs.getBlockCount();
      long l3 = localStatFs.getAvailableBlocks();
      arrayOfLong[0] = (l2 * l1);
      arrayOfLong[1] = (l3 * l1);
    }
    return arrayOfLong;
  }
}
