package com.klw.json.zip;

import java.io.IOException;
import java.io.InputStream;

public class BitInputStream
  implements BitReader
{
  private int available = 0;
  private InputStream in;
  private long nrBits = 0L;
  private int unread = 0;
  
  public BitInputStream(InputStream paramInputStream)
  {
    this.in = paramInputStream;
  }
  
  public boolean bit()
  {
    return read(1) != 0;
  }
  
  public long nrBits()
  {
    return this.nrBits;
  }
  
  public boolean pad(int paramInt)
  {
    boolean bool1 = true;
    boolean bool2 = true;
    int j = (int)this.nrBits % paramInt;
    int i = j;
    if (j < 0) {
      i = j + paramInt;
    }
    if (i != 0)
    {
      paramInt -= i;
      bool1 = bool2;
    }
    for (;;)
    {
      if (paramInt <= 0) {
        return bool1;
      }
      if (bit()) {
        bool1 = false;
      }
      paramInt -= 1;
    }
  }
  
  public int read(int paramInt)
  {
    if (paramInt == 0) {
      return 0;
    }
    if ((paramInt < 0) || (paramInt > 32)) {
      throw new IOException("Bad read width.");
    }
    int i = 0;
    if (paramInt <= 0) {
      return i;
    }
    if (this.available == 0)
    {
      this.unread = this.in.read();
      if (this.unread < 0) {
        throw new IOException("Attempt to read past end.");
      }
      this.available = 8;
    }
    if (paramInt > this.available) {}
    for (int j = this.available;; j = paramInt)
    {
      i |= (this.unread >>> this.available - j & (1 << j) - 1) << paramInt - j;
      this.nrBits += j;
      this.available -= j;
      paramInt -= j;
      break;
    }
  }
}
