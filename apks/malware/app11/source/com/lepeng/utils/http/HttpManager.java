package com.lepeng.utils.http;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import com.lepeng.data.UtilApplication;
import com.lepeng.utils.http.core.HttpHandler;
import com.lepeng.utils.http.core.RequestCallBack;
import com.lepeng.utils.http.core.RequestParams;
import com.lepeng.utils.http.core.RetryHandler;
import com.lepeng.utils.http.core.SyncRequestHandler;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpVersion;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

class HttpManager
{
  private static int B = 3;
  private static final ThreadFactory jdField_a_of_type_JavaUtilConcurrentThreadFactory = new HttpManager.1();
  private static final Executor b = Executors.newFixedThreadPool(B, jdField_a_of_type_JavaUtilConcurrentThreadFactory);
  private static final String w = "Accept-Encoding";
  private static final String x = "gzip";
  private static int z = 20;
  private int A = 3;
  private final DefaultHttpClient jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient;
  private final HttpContext jdField_a_of_type_OrgApacheHttpProtocolHttpContext;
  private final Map e;
  
  public HttpManager()
  {
    Object localObject1 = new BasicHttpParams();
    ConnManagerParams.setTimeout((HttpParams)localObject1, 5000L);
    ConnManagerParams.setMaxConnectionsPerRoute((HttpParams)localObject1, new ConnPerRouteBean(z));
    ConnManagerParams.setMaxTotalConnections((HttpParams)localObject1, z);
    HttpConnectionParams.setSoTimeout((HttpParams)localObject1, 45000);
    HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, 8000);
    HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, 10000);
    HttpConnectionParams.setTcpNoDelay((HttpParams)localObject1, true);
    HttpConnectionParams.setSocketBufferSize((HttpParams)localObject1, 8192);
    HttpProtocolParams.setVersion((HttpParams)localObject1, HttpVersion.HTTP_1_1);
    Object localObject2 = new SchemeRegistry();
    ((SchemeRegistry)localObject2).register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    ((SchemeRegistry)localObject2).register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
    localObject2 = new ThreadSafeClientConnManager((HttpParams)localObject1, (SchemeRegistry)localObject2);
    this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext = new SyncBasicHttpContext(new BasicHttpContext());
    this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient = new DefaultHttpClient((ClientConnectionManager)localObject2, (HttpParams)localObject1);
    this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.addRequestInterceptor(new HttpManager.2(this));
    localObject1 = ((ConnectivityManager)UtilApplication.getInstance().ctx.getSystemService("connectivity")).getActiveNetworkInfo();
    if (localObject1 != null)
    {
      localObject1 = ((NetworkInfo)localObject1).getExtraInfo();
      if (localObject1 != null)
      {
        if ((!((String)localObject1).equals("cmwap")) && (!((String)localObject1).equals("uniwap")) && (!((String)localObject1).equals("3gwap"))) {
          break label329;
        }
        localObject1 = new HttpHost("10.0.0.172", 80);
        this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.getParams().setParameter("http.route.default-proxy", localObject1);
      }
    }
    for (;;)
    {
      this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.addResponseInterceptor(new HttpManager.3(this));
      this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.setHttpRequestRetryHandler(new RetryHandler(this.A));
      HttpProtocolParams.setUseExpectContinue(this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.getParams(), false);
      this.e = new HashMap();
      return;
      label329:
      if (((String)localObject1).equals("ctwap"))
      {
        localObject1 = new HttpHost("10.0.0.200", 80);
        this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.getParams().setParameter("http.route.default-proxy", localObject1);
      }
    }
  }
  
  public static String a(String paramString, RequestParams paramRequestParams)
  {
    String str = paramString;
    if (paramRequestParams != null)
    {
      paramRequestParams = paramRequestParams.getParamString();
      str = paramString + "?" + paramRequestParams;
    }
    return str;
  }
  
  public static HttpEntity a(RequestParams paramRequestParams)
  {
    HttpEntity localHttpEntity = null;
    if (paramRequestParams != null) {
      localHttpEntity = paramRequestParams.gotHttpEntity();
    }
    return localHttpEntity;
  }
  
  public static HttpEntityEnclosingRequestBase a(HttpEntityEnclosingRequestBase paramHttpEntityEnclosingRequestBase, HttpEntity paramHttpEntity)
  {
    if (paramHttpEntity != null) {
      paramHttpEntityEnclosingRequestBase.setEntity(paramHttpEntity);
    }
    return paramHttpEntityEnclosingRequestBase;
  }
  
  protected HttpHandler a(String paramString1, RequestParams paramRequestParams, String paramString2, boolean paramBoolean, RequestCallBack paramRequestCallBack)
  {
    paramString1 = new HttpGet(a(paramString1, paramRequestParams));
    paramRequestParams = new HttpHandler(this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient, this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext, paramRequestCallBack);
    paramRequestParams.executeOnExecutor(b, new Object[] { paramString1, paramString2, Boolean.valueOf(paramBoolean) });
    return paramRequestParams;
  }
  
  protected Object a(HttpUriRequest paramHttpUriRequest, String paramString)
  {
    if (paramString != null) {
      paramHttpUriRequest.addHeader("Content-Type", paramString);
    }
    return new SyncRequestHandler(this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient, this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext).sendRequest(new HttpUriRequest[] { paramHttpUriRequest });
  }
  
  public DefaultHttpClient a()
  {
    return this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient;
  }
  
  protected void a(HttpUriRequest paramHttpUriRequest, String paramString, RequestCallBack paramRequestCallBack)
  {
    if (paramString != null) {
      paramHttpUriRequest.addHeader("Content-Type", paramString);
    }
    new HttpHandler(this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient, this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext, paramRequestCallBack).executeOnExecutor(b, new Object[] { paramHttpUriRequest });
  }
  
  public void addHeader(String paramString1, String paramString2)
  {
    this.e.put(paramString1, paramString2);
  }
  
  public void configCookieStore(CookieStore paramCookieStore)
  {
    if (this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext != null) {
      this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext.setAttribute("http.cookie-store", paramCookieStore);
    }
  }
  
  public void configRequestExecutionRetryCount(int paramInt)
  {
    if (this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient != null) {
      this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.setHttpRequestRetryHandler(new RetryHandler(paramInt));
    }
  }
  
  public void configSSLSocketFactory(SSLSocketFactory paramSSLSocketFactory)
  {
    if (this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient != null)
    {
      paramSSLSocketFactory = new Scheme("https", paramSSLSocketFactory, 443);
      this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.getConnectionManager().getSchemeRegistry().register(paramSSLSocketFactory);
    }
  }
  
  public void configTimeout(int paramInt)
  {
    if (this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient != null)
    {
      HttpParams localHttpParams = this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.getParams();
      ConnManagerParams.setTimeout(localHttpParams, paramInt);
      HttpConnectionParams.setSoTimeout(localHttpParams, paramInt);
      HttpConnectionParams.setConnectionTimeout(localHttpParams, paramInt);
    }
  }
  
  public void configUserAgent(String paramString)
  {
    if (this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient != null) {
      HttpProtocolParams.setUserAgent(this.jdField_a_of_type_OrgApacheHttpImplClientDefaultHttpClient.getParams(), paramString);
    }
  }
  
  public HttpContext getHttpContext()
  {
    return this.jdField_a_of_type_OrgApacheHttpProtocolHttpContext;
  }
}
