package com.lepeng.utils.datastorage.db;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import com.lepeng.utils.L;
import com.lepeng.utils.datastorage.db.sqlite.SqlBuilder;
import com.lepeng.utils.datastorage.db.sqlite.SqlInfo;
import com.lepeng.utils.datastorage.db.table.Id;
import com.lepeng.utils.datastorage.db.table.KeyValue;
import com.lepeng.utils.datastorage.db.table.TableInfo;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class DbUtil
{
  private static HashMap jdField_a_of_type_JavaUtilHashMap = new HashMap();
  private SQLiteDatabase jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase;
  private String s;
  
  public DbUtil(DaoConfig paramDaoConfig)
  {
    if (paramDaoConfig == null) {
      throw new RuntimeException("daoConfig is null");
    }
    if (paramDaoConfig.getContext() == null) {
      throw new RuntimeException("android context is null");
    }
    this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase = new SqliteDbHelper(paramDaoConfig.getContext().getApplicationContext(), paramDaoConfig.getDbName(), paramDaoConfig.getDbVersion(), paramDaoConfig.getDbUpdateListener()).getWritableDatabase();
  }
  
  private void a(List paramList, ContentValues paramContentValues)
  {
    if ((paramList != null) && (paramContentValues != null))
    {
      paramList = paramList.iterator();
      for (;;)
      {
        if (!paramList.hasNext()) {
          return;
        }
        KeyValue localKeyValue = (KeyValue)paramList.next();
        paramContentValues.put(localKeyValue.getKey(), localKeyValue.getValue().toString());
      }
    }
    L.w("insertContentValues: List<KeyValue> is empty or ContentValues is empty!");
  }
  
  private boolean a(TableInfo paramTableInfo)
  {
    Object localObject3 = null;
    Object localObject4 = null;
    Cursor localCursor2 = null;
    if (paramTableInfo.isCheckDatabese()) {
      return true;
    }
    Cursor localCursor1 = localCursor2;
    Object localObject2 = localObject3;
    Object localObject1 = localObject4;
    for (;;)
    {
      try
      {
        String str = "SELECT COUNT(*) AS c FROM sqlite_master WHERE type ='table' AND name ='" + paramTableInfo.getTableName() + "' ";
        localCursor1 = localCursor2;
        localObject2 = localObject3;
        localObject1 = localObject4;
        f(str);
        localCursor1 = localCursor2;
        localObject2 = localObject3;
        localObject1 = localObject4;
        localCursor2 = this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.rawQuery(str, null);
        if (localCursor2 != null)
        {
          localCursor1 = localCursor2;
          localObject2 = localCursor2;
          localObject1 = localCursor2;
          if (localCursor2.moveToNext())
          {
            localCursor1 = localCursor2;
            localObject2 = localCursor2;
            localObject1 = localCursor2;
            if (localCursor2.getInt(0) > 0)
            {
              localCursor1 = localCursor2;
              localObject2 = localCursor2;
              localObject1 = localCursor2;
              paramTableInfo.setCheckDatabese(true);
              if (localCursor2 == null) {
                break;
              }
              localCursor2.close();
              return true;
            }
          }
        }
      }
      catch (SQLException paramTableInfo)
      {
        localObject1 = localCursor1;
        CheckedExceptionHandler.handleException(paramTableInfo);
        if (localCursor1 != null) {
          localCursor1.close();
        }
        return false;
      }
      catch (NullPointerException paramTableInfo)
      {
        localObject1 = localObject2;
        CheckedExceptionHandler.handleException(paramTableInfo);
        if (localObject2 == null) {
          continue;
        }
        ((Cursor)localObject2).close();
        continue;
      }
      finally
      {
        if (localObject1 != null) {
          ((Cursor)localObject1).close();
        }
      }
      if (localCursor2 != null) {
        localCursor2.close();
      }
    }
  }
  
  private void f(String paramString)
  {
    L.i("sql = [" + paramString + "]");
  }
  
  public static HashMap getDaoMap()
  {
    return jdField_a_of_type_JavaUtilHashMap;
  }
  
  public static void setDaoMap(HashMap paramHashMap)
  {
    jdField_a_of_type_JavaUtilHashMap = paramHashMap;
  }
  
  public void CreatTable(Class paramClass)
  {
    try
    {
      paramClass = SqlBuilder.getCreatTableSQL(paramClass);
      f(paramClass);
      this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.execSQL(paramClass);
      return;
    }
    catch (SQLException paramClass)
    {
      CheckedExceptionHandler.handleException(paramClass);
      return;
    }
    catch (NullPointerException paramClass)
    {
      CheckedExceptionHandler.handleException(paramClass);
    }
  }
  
  public void checkTableExist(Class paramClass)
  {
    try
    {
      if (!a(TableInfo.get(paramClass)))
      {
        paramClass = SqlBuilder.getCreatTableSQL(paramClass);
        f(paramClass);
        this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.execSQL(paramClass);
      }
      return;
    }
    catch (SQLException paramClass)
    {
      CheckedExceptionHandler.handleException(paramClass);
      return;
    }
    catch (NullPointerException paramClass)
    {
      CheckedExceptionHandler.handleException(paramClass);
    }
  }
  
  public void clear(Class paramClass)
  {
    checkTableExist(paramClass);
    this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.execSQL(SqlBuilder.getClearSql(paramClass));
  }
  
  public void delete(Object paramObject)
  {
    try
    {
      checkTableExist(paramObject.getClass());
      exeSqlInfo(SqlBuilder.buildDeleteSql(paramObject));
      return;
    }
    catch (Exception paramObject)
    {
      CheckedExceptionHandler.handleException(paramObject);
    }
  }
  
  public boolean delete(Object paramObject, boolean paramBoolean)
  {
    boolean bool = false;
    checkTableExist(paramObject.getClass());
    Object localObject = TableInfo.get(paramObject.getClass()).getId().getValue(paramObject);
    if (paramBoolean)
    {
      paramBoolean = bool;
      if (findById(localObject, paramObject.getClass()) != null)
      {
        exeSqlInfo(SqlBuilder.buildDeleteSql(paramObject));
        paramBoolean = true;
      }
      return paramBoolean;
    }
    exeSqlInfo(SqlBuilder.buildDeleteSql(paramObject));
    return false;
  }
  
  public void deleteById(Class paramClass, Object paramObject)
  {
    checkTableExist(paramClass);
    exeSqlInfo(SqlBuilder.buildDeleteSql(paramClass, paramObject));
  }
  
  public void deleteByWhere(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    paramClass = SqlBuilder.buildDeleteSql(paramClass, paramString);
    f(paramClass);
    this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.execSQL(paramClass);
  }
  
  public void exeSqlInfo(SqlInfo paramSqlInfo)
  {
    if (paramSqlInfo != null) {}
    try
    {
      f(paramSqlInfo.getSql());
      this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.execSQL(paramSqlInfo.getSql(), paramSqlInfo.getBindArgsAsArray());
      return;
    }
    catch (SQLException paramSqlInfo)
    {
      CheckedExceptionHandler.handleException(paramSqlInfo);
      return;
    }
    catch (NullPointerException paramSqlInfo)
    {
      CheckedExceptionHandler.handleException(paramSqlInfo);
    }
    L.e("sava error:sqlInfo is null");
    return;
  }
  
  public List findAll(Class paramClass)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass));
  }
  
  public List findAll(Class paramClass, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLLimit(paramClass, paramInteger1, paramInteger2));
  }
  
  public List findAll(Class paramClass, String paramString, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " ORDER BY " + paramString + " DESC" + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  public List findAllAsc(Class paramClass, String paramString, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " ORDER BY " + paramString + " ASC" + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  public List findAllById(Class paramClass, String paramString1, String paramString2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + "  ORDER BY " + paramString1 + " DESC");
  }
  
  public List findAllByKeyN(Class paramClass, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    TableInfo localTableInfo = TableInfo.get(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " ORDER BY " + localTableInfo.getId().getColumn() + "+0  DESC" + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  public List findAllByKeyWhereN(Class paramClass, String paramString, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    TableInfo localTableInfo = TableInfo.get(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString) + " ORDER BY " + localTableInfo.getId().getColumn() + "+0 DESC" + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  public List findAllByKeyWhereN(Class paramClass, String paramString1, String paramString2, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString1) + " ORDER BY " + paramString2 + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  /* Error */
  public List findAllBySql(Class paramClass, String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokevirtual 193	com/lepeng/utils/datastorage/db/DbUtil:checkTableExist	(Ljava/lang/Class;)V
    //   5: aload_0
    //   6: aload_2
    //   7: invokespecial 133	com/lepeng/utils/datastorage/db/DbUtil:f	(Ljava/lang/String;)V
    //   10: aload_0
    //   11: getfield 64	com/lepeng/utils/datastorage/db/DbUtil:jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase	Landroid/database/sqlite/SQLiteDatabase;
    //   14: aload_2
    //   15: aconst_null
    //   16: invokevirtual 139	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   19: astore 4
    //   21: aload 4
    //   23: astore_2
    //   24: new 304	java/util/ArrayList
    //   27: dup
    //   28: invokespecial 305	java/util/ArrayList:<init>	()V
    //   31: astore 5
    //   33: aload 4
    //   35: astore_2
    //   36: aload 4
    //   38: invokeinterface 144 1 0
    //   43: istore_3
    //   44: iload_3
    //   45: ifne +18 -> 63
    //   48: aload 4
    //   50: ifnull +10 -> 60
    //   53: aload 4
    //   55: invokeinterface 155 1 0
    //   60: aload 5
    //   62: areturn
    //   63: aload 4
    //   65: astore_2
    //   66: aload 5
    //   68: aload 4
    //   70: aload_1
    //   71: invokestatic 311	com/lepeng/utils/datastorage/db/sqlite/CursorUtils:getEntity	(Landroid/database/Cursor;Ljava/lang/Class;)Ljava/lang/Object;
    //   74: invokeinterface 315 2 0
    //   79: pop
    //   80: goto -47 -> 33
    //   83: astore_1
    //   84: aload 4
    //   86: astore_2
    //   87: aload_1
    //   88: invokestatic 161	com/lepeng/utils/exception/CheckedExceptionHandler:handleException	(Ljava/lang/Throwable;)V
    //   91: aload 4
    //   93: ifnull +10 -> 103
    //   96: aload 4
    //   98: invokeinterface 155 1 0
    //   103: aconst_null
    //   104: areturn
    //   105: astore_1
    //   106: aconst_null
    //   107: astore 4
    //   109: aload 4
    //   111: astore_2
    //   112: aload_1
    //   113: invokestatic 161	com/lepeng/utils/exception/CheckedExceptionHandler:handleException	(Ljava/lang/Throwable;)V
    //   116: aload 4
    //   118: ifnull -15 -> 103
    //   121: aload 4
    //   123: invokeinterface 155 1 0
    //   128: goto -25 -> 103
    //   131: astore_1
    //   132: aconst_null
    //   133: astore_2
    //   134: aload_2
    //   135: ifnull +9 -> 144
    //   138: aload_2
    //   139: invokeinterface 155 1 0
    //   144: aload_1
    //   145: athrow
    //   146: astore_1
    //   147: goto -13 -> 134
    //   150: astore_1
    //   151: goto -42 -> 109
    //   154: astore_1
    //   155: aconst_null
    //   156: astore 4
    //   158: goto -74 -> 84
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	161	0	this	DbUtil
    //   0	161	1	paramClass	Class
    //   0	161	2	paramString	String
    //   43	2	3	bool	boolean
    //   19	138	4	localCursor	Cursor
    //   31	36	5	localArrayList	java.util.ArrayList
    // Exception table:
    //   from	to	target	type
    //   24	33	83	android/database/SQLException
    //   36	44	83	android/database/SQLException
    //   66	80	83	android/database/SQLException
    //   10	21	105	java/lang/NullPointerException
    //   10	21	131	finally
    //   24	33	146	finally
    //   36	44	146	finally
    //   66	80	146	finally
    //   87	91	146	finally
    //   112	116	146	finally
    //   24	33	150	java/lang/NullPointerException
    //   36	44	150	java/lang/NullPointerException
    //   66	80	150	java/lang/NullPointerException
    //   10	21	154	android/database/SQLException
  }
  
  /* Error */
  public List findAllBySqlWithTable(Class paramClass, String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_2
    //   2: invokespecial 133	com/lepeng/utils/datastorage/db/DbUtil:f	(Ljava/lang/String;)V
    //   5: aload_0
    //   6: getfield 64	com/lepeng/utils/datastorage/db/DbUtil:jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase	Landroid/database/sqlite/SQLiteDatabase;
    //   9: aload_2
    //   10: aconst_null
    //   11: invokevirtual 139	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   14: astore 4
    //   16: aload 4
    //   18: astore_2
    //   19: new 304	java/util/ArrayList
    //   22: dup
    //   23: invokespecial 305	java/util/ArrayList:<init>	()V
    //   26: astore 5
    //   28: aload 4
    //   30: astore_2
    //   31: aload 4
    //   33: invokeinterface 144 1 0
    //   38: istore_3
    //   39: iload_3
    //   40: ifne +18 -> 58
    //   43: aload 4
    //   45: ifnull +10 -> 55
    //   48: aload 4
    //   50: invokeinterface 155 1 0
    //   55: aload 5
    //   57: areturn
    //   58: aload 4
    //   60: astore_2
    //   61: aload 5
    //   63: aload 4
    //   65: aload_1
    //   66: invokestatic 311	com/lepeng/utils/datastorage/db/sqlite/CursorUtils:getEntity	(Landroid/database/Cursor;Ljava/lang/Class;)Ljava/lang/Object;
    //   69: invokeinterface 315 2 0
    //   74: pop
    //   75: goto -47 -> 28
    //   78: astore_1
    //   79: aload 4
    //   81: astore_2
    //   82: aload_1
    //   83: invokestatic 161	com/lepeng/utils/exception/CheckedExceptionHandler:handleException	(Ljava/lang/Throwable;)V
    //   86: aload 4
    //   88: ifnull +10 -> 98
    //   91: aload 4
    //   93: invokeinterface 155 1 0
    //   98: aconst_null
    //   99: areturn
    //   100: astore_1
    //   101: aconst_null
    //   102: astore_2
    //   103: aload_2
    //   104: ifnull +9 -> 113
    //   107: aload_2
    //   108: invokeinterface 155 1 0
    //   113: aload_1
    //   114: athrow
    //   115: astore_1
    //   116: goto -13 -> 103
    //   119: astore_1
    //   120: aconst_null
    //   121: astore 4
    //   123: goto -44 -> 79
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	126	0	this	DbUtil
    //   0	126	1	paramClass	Class
    //   0	126	2	paramString	String
    //   38	2	3	bool	boolean
    //   14	108	4	localCursor	Cursor
    //   26	36	5	localArrayList	java.util.ArrayList
    // Exception table:
    //   from	to	target	type
    //   19	28	78	java/lang/Exception
    //   31	39	78	java/lang/Exception
    //   61	75	78	java/lang/Exception
    //   5	16	100	finally
    //   19	28	115	finally
    //   31	39	115	finally
    //   61	75	115	finally
    //   82	86	115	finally
    //   5	16	119	java/lang/Exception
  }
  
  public List findAllByWhereN(Class paramClass, String paramString1, String paramString2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString1) + " ORDER BY " + paramString2 + " ASC");
  }
  
  public List findAllByWhereNoCo(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString));
  }
  
  public List findAllN(Class paramClass, String paramString1, String paramString2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + paramString1 + " ORDER BY " + paramString2 + " DESC");
  }
  
  public List findAllWhereAsc(Class paramClass, String paramString1, String paramString2, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " WHERE " + paramString1 + " ORDER BY " + paramString2 + " ASC" + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  public List findAllWhereOrderBy(Class paramClass, String paramString1, String paramString2, Integer paramInteger1, Integer paramInteger2)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " WHERE " + paramString1 + " ORDER BY " + paramString2 + SqlBuilder.getLimit(paramInteger1, paramInteger2));
  }
  
  /* Error */
  public Object findById(Object paramObject, Class paramClass)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aload_0
    //   4: aload_2
    //   5: invokevirtual 193	com/lepeng/utils/datastorage/db/DbUtil:checkTableExist	(Ljava/lang/Class;)V
    //   8: aload_2
    //   9: aload_1
    //   10: invokestatic 326	com/lepeng/utils/datastorage/db/sqlite/SqlBuilder:getSelectSqlAsSqlInfo	(Ljava/lang/Class;Ljava/lang/Object;)Lcom/lepeng/utils/datastorage/db/sqlite/SqlInfo;
    //   13: astore_1
    //   14: aload 4
    //   16: astore_3
    //   17: aload_1
    //   18: ifnull +60 -> 78
    //   21: aload_0
    //   22: aload_1
    //   23: invokevirtual 241	com/lepeng/utils/datastorage/db/sqlite/SqlInfo:getSql	()Ljava/lang/String;
    //   26: invokespecial 133	com/lepeng/utils/datastorage/db/DbUtil:f	(Ljava/lang/String;)V
    //   29: aload_0
    //   30: getfield 64	com/lepeng/utils/datastorage/db/DbUtil:jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase	Landroid/database/sqlite/SQLiteDatabase;
    //   33: aload_1
    //   34: invokevirtual 241	com/lepeng/utils/datastorage/db/sqlite/SqlInfo:getSql	()Ljava/lang/String;
    //   37: aload_1
    //   38: invokevirtual 330	com/lepeng/utils/datastorage/db/sqlite/SqlInfo:getBindArgsAsStringArray	()[Ljava/lang/String;
    //   41: invokevirtual 139	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   44: astore_1
    //   45: aload_1
    //   46: astore_3
    //   47: aload_1
    //   48: invokeinterface 144 1 0
    //   53: ifeq +66 -> 119
    //   56: aload_1
    //   57: astore_3
    //   58: aload_1
    //   59: aload_2
    //   60: invokestatic 311	com/lepeng/utils/datastorage/db/sqlite/CursorUtils:getEntity	(Landroid/database/Cursor;Ljava/lang/Class;)Ljava/lang/Object;
    //   63: astore_2
    //   64: aload_2
    //   65: astore_3
    //   66: aload_1
    //   67: ifnull +11 -> 78
    //   70: aload_1
    //   71: invokeinterface 155 1 0
    //   76: aload_2
    //   77: astore_3
    //   78: aload_3
    //   79: areturn
    //   80: astore_2
    //   81: aconst_null
    //   82: astore_1
    //   83: aload_1
    //   84: astore_3
    //   85: aload_2
    //   86: invokestatic 161	com/lepeng/utils/exception/CheckedExceptionHandler:handleException	(Ljava/lang/Throwable;)V
    //   89: aload 4
    //   91: astore_3
    //   92: aload_1
    //   93: ifnull -15 -> 78
    //   96: aload_1
    //   97: invokeinterface 155 1 0
    //   102: aconst_null
    //   103: areturn
    //   104: astore_1
    //   105: aconst_null
    //   106: astore_3
    //   107: aload_3
    //   108: ifnull +9 -> 117
    //   111: aload_3
    //   112: invokeinterface 155 1 0
    //   117: aload_1
    //   118: athrow
    //   119: aload 4
    //   121: astore_3
    //   122: aload_1
    //   123: ifnull -45 -> 78
    //   126: aload_1
    //   127: invokeinterface 155 1 0
    //   132: aconst_null
    //   133: areturn
    //   134: astore_1
    //   135: goto -28 -> 107
    //   138: astore_2
    //   139: goto -56 -> 83
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	142	0	this	DbUtil
    //   0	142	1	paramObject	Object
    //   0	142	2	paramClass	Class
    //   16	106	3	localObject1	Object
    //   1	119	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   29	45	80	java/lang/Exception
    //   29	45	104	finally
    //   47	56	134	finally
    //   58	64	134	finally
    //   85	89	134	finally
    //   47	56	138	java/lang/Exception
    //   58	64	138	java/lang/Exception
  }
  
  /* Error */
  public Object findBySql(Class paramClass, String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aload_0
    //   3: aload_1
    //   4: invokevirtual 193	com/lepeng/utils/datastorage/db/DbUtil:checkTableExist	(Ljava/lang/Class;)V
    //   7: aload_0
    //   8: aload_2
    //   9: invokespecial 133	com/lepeng/utils/datastorage/db/DbUtil:f	(Ljava/lang/String;)V
    //   12: aload_0
    //   13: getfield 64	com/lepeng/utils/datastorage/db/DbUtil:jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase	Landroid/database/sqlite/SQLiteDatabase;
    //   16: aload_2
    //   17: aconst_null
    //   18: invokevirtual 139	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   21: astore_2
    //   22: aload_2
    //   23: invokeinterface 144 1 0
    //   28: pop
    //   29: aload_2
    //   30: aload_1
    //   31: invokestatic 311	com/lepeng/utils/datastorage/db/sqlite/CursorUtils:getEntity	(Landroid/database/Cursor;Ljava/lang/Class;)Ljava/lang/Object;
    //   34: astore_1
    //   35: aload_1
    //   36: astore_3
    //   37: aload_3
    //   38: astore_1
    //   39: aload_2
    //   40: ifnull +11 -> 51
    //   43: aload_2
    //   44: invokeinterface 155 1 0
    //   49: aload_3
    //   50: astore_1
    //   51: aload_1
    //   52: areturn
    //   53: astore_1
    //   54: aconst_null
    //   55: astore_2
    //   56: aload_3
    //   57: astore_1
    //   58: aload_2
    //   59: ifnull -8 -> 51
    //   62: aload_2
    //   63: invokeinterface 155 1 0
    //   68: aconst_null
    //   69: areturn
    //   70: astore_1
    //   71: aconst_null
    //   72: astore_2
    //   73: aload_3
    //   74: astore_1
    //   75: aload_2
    //   76: ifnull -25 -> 51
    //   79: aload_2
    //   80: invokeinterface 155 1 0
    //   85: aconst_null
    //   86: areturn
    //   87: astore_1
    //   88: aconst_null
    //   89: astore_2
    //   90: aload_2
    //   91: ifnull +9 -> 100
    //   94: aload_2
    //   95: invokeinterface 155 1 0
    //   100: aload_1
    //   101: athrow
    //   102: astore_1
    //   103: goto -13 -> 90
    //   106: astore_1
    //   107: goto -34 -> 73
    //   110: astore_1
    //   111: goto -55 -> 56
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	114	0	this	DbUtil
    //   0	114	1	paramClass	Class
    //   0	114	2	paramString	String
    //   1	73	3	localClass	Class
    // Exception table:
    //   from	to	target	type
    //   12	22	53	android/database/SQLException
    //   12	22	70	java/lang/NullPointerException
    //   12	22	87	finally
    //   22	35	102	finally
    //   22	35	106	java/lang/NullPointerException
    //   22	35	110	android/database/SQLException
  }
  
  /* Error */
  public com.lepeng.utils.datastorage.db.sqlite.DbModel findDbModelBySQL(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aload_0
    //   4: aload_1
    //   5: invokespecial 133	com/lepeng/utils/datastorage/db/DbUtil:f	(Ljava/lang/String;)V
    //   8: aload_0
    //   9: getfield 64	com/lepeng/utils/datastorage/db/DbUtil:jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase	Landroid/database/sqlite/SQLiteDatabase;
    //   12: aload_1
    //   13: aconst_null
    //   14: invokevirtual 139	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   17: astore_1
    //   18: aload_1
    //   19: astore_2
    //   20: aload_1
    //   21: invokeinterface 144 1 0
    //   26: ifeq +65 -> 91
    //   29: aload_1
    //   30: astore_2
    //   31: aload_1
    //   32: invokestatic 338	com/lepeng/utils/datastorage/db/sqlite/CursorUtils:getDbModel	(Landroid/database/Cursor;)Lcom/lepeng/utils/datastorage/db/sqlite/DbModel;
    //   35: astore_3
    //   36: aload_3
    //   37: astore_2
    //   38: aload_1
    //   39: ifnull +11 -> 50
    //   42: aload_1
    //   43: invokeinterface 155 1 0
    //   48: aload_3
    //   49: astore_2
    //   50: aload_2
    //   51: areturn
    //   52: astore_3
    //   53: aconst_null
    //   54: astore_1
    //   55: aload_1
    //   56: astore_2
    //   57: aload_3
    //   58: invokestatic 161	com/lepeng/utils/exception/CheckedExceptionHandler:handleException	(Ljava/lang/Throwable;)V
    //   61: aload 4
    //   63: astore_2
    //   64: aload_1
    //   65: ifnull -15 -> 50
    //   68: aload_1
    //   69: invokeinterface 155 1 0
    //   74: aconst_null
    //   75: areturn
    //   76: astore_1
    //   77: aconst_null
    //   78: astore_2
    //   79: aload_2
    //   80: ifnull +9 -> 89
    //   83: aload_2
    //   84: invokeinterface 155 1 0
    //   89: aload_1
    //   90: athrow
    //   91: aload 4
    //   93: astore_2
    //   94: aload_1
    //   95: ifnull -45 -> 50
    //   98: aload_1
    //   99: invokeinterface 155 1 0
    //   104: aconst_null
    //   105: areturn
    //   106: astore_1
    //   107: goto -28 -> 79
    //   110: astore_3
    //   111: goto -56 -> 55
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	114	0	this	DbUtil
    //   0	114	1	paramString	String
    //   19	75	2	localObject1	Object
    //   35	14	3	localDbModel	com.lepeng.utils.datastorage.db.sqlite.DbModel
    //   52	6	3	localException1	Exception
    //   110	1	3	localException2	Exception
    //   1	91	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   8	18	52	java/lang/Exception
    //   8	18	76	finally
    //   20	29	106	finally
    //   31	36	106	finally
    //   57	61	106	finally
    //   20	29	110	java/lang/Exception
    //   31	36	110	java/lang/Exception
  }
  
  /* Error */
  public List findDbModelListBySQL(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokespecial 133	com/lepeng/utils/datastorage/db/DbUtil:f	(Ljava/lang/String;)V
    //   5: aload_0
    //   6: getfield 64	com/lepeng/utils/datastorage/db/DbUtil:jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase	Landroid/database/sqlite/SQLiteDatabase;
    //   9: aload_1
    //   10: aconst_null
    //   11: invokevirtual 139	android/database/sqlite/SQLiteDatabase:rawQuery	(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;
    //   14: astore_3
    //   15: aload_3
    //   16: astore 4
    //   18: new 304	java/util/ArrayList
    //   21: dup
    //   22: invokespecial 305	java/util/ArrayList:<init>	()V
    //   25: astore_1
    //   26: aload_3
    //   27: astore 4
    //   29: aload_3
    //   30: invokeinterface 144 1 0
    //   35: istore_2
    //   36: iload_2
    //   37: ifne +22 -> 59
    //   40: aload_1
    //   41: astore 4
    //   43: aload_3
    //   44: ifnull +12 -> 56
    //   47: aload_3
    //   48: invokeinterface 155 1 0
    //   53: aload_1
    //   54: astore 4
    //   56: aload 4
    //   58: areturn
    //   59: aload_3
    //   60: astore 4
    //   62: aload_1
    //   63: aload_3
    //   64: invokestatic 338	com/lepeng/utils/datastorage/db/sqlite/CursorUtils:getDbModel	(Landroid/database/Cursor;)Lcom/lepeng/utils/datastorage/db/sqlite/DbModel;
    //   67: invokeinterface 315 2 0
    //   72: pop
    //   73: goto -47 -> 26
    //   76: astore 5
    //   78: aload_3
    //   79: astore 4
    //   81: aload 5
    //   83: invokestatic 161	com/lepeng/utils/exception/CheckedExceptionHandler:handleException	(Ljava/lang/Throwable;)V
    //   86: aload_1
    //   87: astore 4
    //   89: aload_3
    //   90: ifnull -34 -> 56
    //   93: aload_3
    //   94: invokeinterface 155 1 0
    //   99: aload_1
    //   100: areturn
    //   101: astore_1
    //   102: aconst_null
    //   103: astore 4
    //   105: aload 4
    //   107: ifnull +10 -> 117
    //   110: aload 4
    //   112: invokeinterface 155 1 0
    //   117: aload_1
    //   118: athrow
    //   119: astore_1
    //   120: goto -15 -> 105
    //   123: astore 5
    //   125: aconst_null
    //   126: astore_3
    //   127: aconst_null
    //   128: astore_1
    //   129: goto -51 -> 78
    //   132: astore 5
    //   134: aconst_null
    //   135: astore_1
    //   136: goto -58 -> 78
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	139	0	this	DbUtil
    //   0	139	1	paramString	String
    //   35	2	2	bool	boolean
    //   14	113	3	localCursor	Cursor
    //   16	95	4	localObject	Object
    //   76	6	5	localNullPointerException1	NullPointerException
    //   123	1	5	localNullPointerException2	NullPointerException
    //   132	1	5	localNullPointerException3	NullPointerException
    // Exception table:
    //   from	to	target	type
    //   29	36	76	java/lang/NullPointerException
    //   62	73	76	java/lang/NullPointerException
    //   5	15	101	finally
    //   18	26	119	finally
    //   29	36	119	finally
    //   62	73	119	finally
    //   81	86	119	finally
    //   5	15	123	java/lang/NullPointerException
    //   18	26	132	java/lang/NullPointerException
  }
  
  public Object findTopWithKeyByWhere(Class paramClass, String paramString1, String paramString2)
  {
    checkTableExist(paramClass);
    paramClass = findAllBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " WHERE " + paramString2 + " ORDER BY " + paramString1 + " DESC" + SqlBuilder.getLimit(Integer.valueOf(0), Integer.valueOf(1)));
    if ((paramClass != null) && (paramClass.size() > 0)) {
      return paramClass.get(0);
    }
    return null;
  }
  
  public SQLiteDatabase getDb()
  {
    return this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase;
  }
  
  public String getDbName()
  {
    return this.s;
  }
  
  public Integer getTableCount(Class paramClass)
  {
    Object localObject2 = null;
    Cursor localCursor2 = null;
    Object localObject3 = TableInfo.get(paramClass);
    Cursor localCursor1 = localCursor2;
    paramClass = localObject2;
    for (;;)
    {
      try
      {
        localObject3 = "SELECT COUNT(*) FROM " + ((TableInfo)localObject3).getTableName();
        localCursor1 = localCursor2;
        paramClass = localObject2;
        f((String)localObject3);
        localCursor1 = localCursor2;
        paramClass = localObject2;
        localCursor2 = this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.rawQuery((String)localObject3, null);
        if (localCursor2 != null)
        {
          localCursor1 = localCursor2;
          paramClass = localCursor2;
          if (localCursor2.moveToNext())
          {
            localCursor1 = localCursor2;
            paramClass = localCursor2;
            int i = localCursor2.getInt(0);
            return Integer.valueOf(i);
          }
        }
      }
      catch (Exception localException)
      {
        paramClass = localCursor1;
        CheckedExceptionHandler.handleException(localException);
        return Integer.valueOf(0);
      }
      finally
      {
        if (paramClass != null) {
          paramClass.close();
        }
      }
      if (localException != null) {
        localException.close();
      }
    }
  }
  
  public Integer getTableCountWhere(Class paramClass, String paramString)
  {
    Object localObject3 = null;
    Object localObject2 = null;
    TableInfo localTableInfo = TableInfo.get(paramClass);
    Object localObject1 = localObject2;
    paramClass = localObject3;
    for (;;)
    {
      try
      {
        paramString = "SELECT COUNT(*) FROM " + localTableInfo.getTableName() + " WHERE " + paramString;
        localObject1 = localObject2;
        paramClass = localObject3;
        f(paramString);
        localObject1 = localObject2;
        paramClass = localObject3;
        paramString = this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.rawQuery(paramString, null);
        if (paramString != null)
        {
          localObject1 = paramString;
          paramClass = paramString;
          if (paramString.moveToNext())
          {
            localObject1 = paramString;
            paramClass = paramString;
            int i = paramString.getInt(0);
            return Integer.valueOf(i);
          }
        }
      }
      catch (Exception paramString)
      {
        paramClass = (Class)localObject1;
        CheckedExceptionHandler.handleException(paramString);
        if (localObject1 != null) {
          ((Cursor)localObject1).close();
        }
        return Integer.valueOf(0);
      }
      finally
      {
        if (paramClass != null) {
          paramClass.close();
        }
      }
      if (paramString != null) {
        paramString.close();
      }
    }
  }
  
  public void pushToRealById(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    paramClass = TableInfo.get(paramClass);
    String str = paramClass.getId().getColumn();
    findDbModelBySQL("UPDATE  " + paramClass.getTableName() + " SET pushData = 0 where " + str + " = '" + paramString + "'");
  }
  
  public void removeDbUtil(DbUtil paramDbUtil)
  {
    if (jdField_a_of_type_JavaUtilHashMap.containsKey(paramDbUtil.getDbName()))
    {
      jdField_a_of_type_JavaUtilHashMap.remove(paramDbUtil.getDbName());
      this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.close();
      this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase = null;
    }
  }
  
  public void save(Object paramObject)
  {
    save(paramObject, true);
  }
  
  public void save(Object paramObject, Class paramClass)
  {
    checkTableExist(paramClass);
    exeSqlInfo(SqlBuilder.buildInsertSql(paramObject));
  }
  
  public void save(Object paramObject, boolean paramBoolean)
  {
    checkTableExist(paramObject.getClass());
    Object localObject = TableInfo.get(paramObject.getClass()).getId().getValue(paramObject);
    if (paramBoolean)
    {
      if (findById(localObject, paramObject.getClass()) == null)
      {
        exeSqlInfo(SqlBuilder.buildInsertSql(paramObject));
        return;
      }
      update(paramObject);
      return;
    }
    exeSqlInfo(SqlBuilder.buildInsertSql(paramObject));
  }
  
  public boolean save(Object paramObject, Class paramClass, boolean paramBoolean)
  {
    checkTableExist(paramClass);
    paramClass = TableInfo.get(paramObject.getClass()).getId().getValue(paramObject);
    if (paramBoolean)
    {
      if (findById(paramClass, paramObject.getClass()) == null)
      {
        checkTableExist(paramObject.getClass());
        exeSqlInfo(SqlBuilder.buildInsertSql(paramObject));
        return true;
      }
      update(paramObject);
      return false;
    }
    exeSqlInfo(SqlBuilder.buildInsertSql(paramObject));
    return false;
  }
  
  public void saveAll(List paramList)
  {
    if (paramList != null) {
      saveAll(paramList, true);
    }
  }
  
  public void saveAll(List paramList, boolean paramBoolean)
  {
    new Thread(new DbUtil.1(this, paramList, paramBoolean)).start();
  }
  
  public boolean saveBindId(Object paramObject)
  {
    checkTableExist(paramObject.getClass());
    Object localObject = SqlBuilder.getSaveKeyValueListByEntity(paramObject);
    TableInfo localTableInfo;
    if ((localObject != null) && (((List)localObject).size() > 0))
    {
      localTableInfo = TableInfo.get(paramObject.getClass());
      ContentValues localContentValues = new ContentValues();
      a((List)localObject, localContentValues);
      localObject = Long.valueOf(this.jdField_a_of_type_AndroidDatabaseSqliteSQLiteDatabase.insert(localTableInfo.getTableName(), null, localContentValues));
      if (((Long)localObject).longValue() != -1L) {}
    }
    else
    {
      return false;
    }
    localTableInfo.getId().setValue(paramObject, localObject);
    return true;
  }
  
  public void setDbName(String paramString)
  {
    this.s = paramString;
  }
  
  public void update(Object paramObject)
  {
    checkTableExist(paramObject.getClass());
    exeSqlInfo(SqlBuilder.getUpdateSqlAsSqlInfo(paramObject));
  }
  
  public void update(Object paramObject, String paramString)
  {
    checkTableExist(paramObject.getClass());
    exeSqlInfo(SqlBuilder.getUpdateSqlAsSqlInfo(paramObject, paramString));
  }
  
  public void updateBySql(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    paramClass = TableInfo.get(paramClass);
    findDbModelBySQL("UPDATE  " + paramClass.getTableName() + " SET " + paramString);
  }
  
  public void updateNoCheck(Object paramObject, String paramString)
  {
    exeSqlInfo(SqlBuilder.getUpdateSqlAsSqlInfo(paramObject, paramString));
  }
  
  public void updateWhere(Class paramClass, String paramString1, String paramString2)
  {
    checkTableExist(paramClass);
    paramClass = TableInfo.get(paramClass);
    findDbModelBySQL("UPDATE  " + paramClass.getTableName() + " SET " + paramString1 + " WHERE " + paramString2);
  }
}
