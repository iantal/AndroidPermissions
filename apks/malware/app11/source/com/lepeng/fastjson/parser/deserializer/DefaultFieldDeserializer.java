package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.DefaultJSONParser.ResolveTask;
import com.lepeng.fastjson.parser.ParseContext;
import com.lepeng.fastjson.parser.ParserConfig;
import com.lepeng.fastjson.util.FieldInfo;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Map;

public class DefaultFieldDeserializer
  extends FieldDeserializer
{
  private ObjectDeserializer b;
  
  public DefaultFieldDeserializer(ParserConfig paramParserConfig, Class paramClass, FieldInfo paramFieldInfo)
  {
    super(paramClass, paramFieldInfo);
  }
  
  public int getFastMatchToken()
  {
    if (this.b != null) {
      return this.b.getFastMatchToken();
    }
    return 2;
  }
  
  public void parseField(DefaultJSONParser paramDefaultJSONParser, Object paramObject, Type paramType, Map paramMap)
  {
    if (this.b == null) {
      this.b = paramDefaultJSONParser.getConfig().getDeserializer(this.fieldInfo);
    }
    if ((paramType instanceof ParameterizedType)) {
      paramDefaultJSONParser.getContext().setType(paramType);
    }
    paramType = this.b.deserialze(paramDefaultJSONParser, getFieldType(), this.fieldInfo.getName());
    if (paramDefaultJSONParser.getResolveStatus() == 1)
    {
      paramObject = paramDefaultJSONParser.getLastResolveTask();
      paramObject.setFieldDeserializer(this);
      paramObject.setOwnerContext(paramDefaultJSONParser.getContext());
      paramDefaultJSONParser.setResolveStatus(0);
      return;
    }
    if (paramObject == null)
    {
      paramMap.put(this.fieldInfo.getName(), paramType);
      return;
    }
    setValue(paramObject, paramType);
  }
}
