package com.lepeng.fastjson.parser.deserializer;

import com.lepeng.fastjson.JSONArray;
import com.lepeng.fastjson.parser.DefaultJSONParser;
import com.lepeng.fastjson.parser.JSONLexer;
import com.lepeng.fastjson.parser.ParseContext;
import com.lepeng.fastjson.util.TypeUtils;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;

public class ArrayDeserializer
  implements ObjectDeserializer
{
  public static final ArrayDeserializer instance = new ArrayDeserializer();
  
  public ArrayDeserializer() {}
  
  private Object a(DefaultJSONParser paramDefaultJSONParser, Class paramClass, JSONArray paramJSONArray)
  {
    if (paramJSONArray == null) {
      return null;
    }
    int m = paramJSONArray.size();
    Object localObject3 = Array.newInstance(paramClass, m);
    int i = 0;
    Object localObject2;
    for (;;)
    {
      if (i >= m)
      {
        paramJSONArray.setRelatedArray(localObject3);
        paramJSONArray.setComponentType(paramClass);
        return localObject3;
      }
      localObject2 = paramJSONArray.get(i);
      if (localObject2 != paramJSONArray) {
        break;
      }
      Array.set(localObject3, i, localObject3);
      i += 1;
    }
    if (paramClass.isArray())
    {
      if (paramClass.isInstance(localObject2)) {}
      for (localObject1 = localObject2;; localObject1 = a(paramDefaultJSONParser, paramClass, (JSONArray)localObject2))
      {
        Array.set(localObject3, i, localObject1);
        break;
      }
    }
    int j;
    int k;
    if ((localObject2 instanceof JSONArray))
    {
      localObject1 = (JSONArray)localObject2;
      int n = ((JSONArray)localObject1).size();
      j = 0;
      k = 0;
      label152:
      if (j >= n) {
        if (k == 0) {
          break label236;
        }
      }
    }
    label236:
    for (Object localObject1 = ((JSONArray)localObject1).toArray();; localObject1 = null)
    {
      if (localObject1 == null) {
        localObject1 = TypeUtils.cast(localObject2, paramClass, paramDefaultJSONParser.getConfig());
      }
      for (;;)
      {
        Array.set(localObject3, i, localObject1);
        break;
        if (((JSONArray)localObject1).get(j) == paramJSONArray)
        {
          ((JSONArray)localObject1).set(i, localObject3);
          k = 1;
        }
        j += 1;
        break label152;
      }
    }
  }
  
  public Object deserialze(DefaultJSONParser paramDefaultJSONParser, Type paramType, Object paramObject)
  {
    Object localObject1 = null;
    int j = 0;
    int i = 0;
    Object localObject2 = paramDefaultJSONParser.getLexer();
    if (((JSONLexer)localObject2).token() == 8)
    {
      ((JSONLexer)localObject2).nextToken(16);
      paramDefaultJSONParser = (DefaultJSONParser)localObject1;
      return paramDefaultJSONParser;
    }
    if (paramType == AtomicIntegerArray.class)
    {
      paramObject = new JSONArray();
      paramDefaultJSONParser.parseArray(paramObject);
      paramType = new AtomicIntegerArray(paramObject.size());
      i = 0;
      for (;;)
      {
        paramDefaultJSONParser = paramType;
        if (i >= paramObject.size()) {
          break;
        }
        paramType.set(i, paramObject.getInteger(i).intValue());
        i += 1;
      }
    }
    if (paramType == AtomicLongArray.class)
    {
      paramObject = new JSONArray();
      paramDefaultJSONParser.parseArray(paramObject);
      paramType = new AtomicLongArray(paramObject.size());
      for (;;)
      {
        paramDefaultJSONParser = paramType;
        if (i >= paramObject.size()) {
          break;
        }
        paramType.set(i, paramObject.getLong(i).longValue());
        i += 1;
      }
    }
    if (((JSONLexer)localObject2).token() == 4)
    {
      paramDefaultJSONParser = ((JSONLexer)localObject2).bytesValue();
      ((JSONLexer)localObject2).nextToken(16);
      return paramDefaultJSONParser;
    }
    TypeVariable[] arrayOfTypeVariable;
    if ((paramType instanceof GenericArrayType))
    {
      paramType = ((GenericArrayType)paramType).getGenericComponentType();
      if ((paramType instanceof TypeVariable))
      {
        localObject1 = (TypeVariable)paramType;
        paramType = paramDefaultJSONParser.getContext().getType();
        if ((paramType instanceof ParameterizedType))
        {
          localObject2 = (ParameterizedType)paramType;
          paramType = ((ParameterizedType)localObject2).getRawType();
          if (!(paramType instanceof Class)) {
            break label397;
          }
          arrayOfTypeVariable = ((Class)paramType).getTypeParameters();
          paramType = null;
          i = j;
          if (i < arrayOfTypeVariable.length) {}
        }
      }
    }
    for (;;)
    {
      if ((paramType instanceof Class)) {
        paramType = (Class)paramType;
      }
      for (;;)
      {
        localObject1 = new JSONArray();
        paramDefaultJSONParser.parseArray(paramType, (Collection)localObject1, paramObject);
        return a(paramDefaultJSONParser, paramType, (JSONArray)localObject1);
        if (arrayOfTypeVariable[i].getName().equals(((TypeVariable)localObject1).getName())) {
          paramType = localObject2.getActualTypeArguments()[i];
        }
        i += 1;
        break;
        paramType = Object.class;
        continue;
        paramType = Object.class;
        continue;
        paramType = (Class)paramType;
        continue;
        paramType = ((Class)paramType).getComponentType();
      }
      label397:
      paramType = null;
    }
  }
  
  public int getFastMatchToken()
  {
    return 14;
  }
}
