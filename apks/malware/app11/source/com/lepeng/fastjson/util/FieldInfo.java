package com.lepeng.fastjson.util;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;

public class FieldInfo
  implements Comparable
{
  private final Type b;
  private final Class d;
  private final Class e;
  private final Field field;
  private boolean g = false;
  private final Method method;
  private final String name;
  
  public FieldInfo(String paramString, Class paramClass1, Class paramClass2, Type paramType, Field paramField)
  {
    this.name = paramString;
    this.e = paramClass1;
    this.d = paramClass2;
    this.b = paramType;
    this.method = null;
    this.field = paramField;
    if (paramField != null) {
      paramField.setAccessible(true);
    }
  }
  
  public FieldInfo(String paramString, Method paramMethod, Field paramField)
  {
    this(paramString, paramMethod, paramField, null, null);
  }
  
  public FieldInfo(String paramString, Method paramMethod, Field paramField, Class paramClass, Type paramType)
  {
    this.name = paramString;
    this.method = paramMethod;
    this.field = paramField;
    if (paramMethod != null) {
      paramMethod.setAccessible(true);
    }
    if (paramField != null) {
      paramField.setAccessible(true);
    }
    if (paramMethod != null) {
      if (paramMethod.getParameterTypes().length == 1)
      {
        paramField = paramMethod.getParameterTypes()[0];
        paramString = paramMethod.getGenericParameterTypes()[0];
        this.e = paramMethod.getDeclaringClass();
        paramMethod = paramField;
      }
    }
    for (;;)
    {
      if ((paramClass == null) || (paramMethod != Object.class) || (!(paramString instanceof TypeVariable))) {
        break label164;
      }
      paramField = getInheritGenericType(paramClass, (TypeVariable)paramString);
      if (paramField == null) {
        break label164;
      }
      this.d = TypeUtils.getClass(paramField);
      this.b = paramField;
      return;
      paramField = paramMethod.getReturnType();
      paramString = paramMethod.getGenericReturnType();
      this.g = true;
      break;
      paramMethod = paramField.getType();
      paramString = paramField.getGenericType();
      this.e = paramField.getDeclaringClass();
    }
    label164:
    paramField = getFieldType(paramClass, paramType, paramString);
    if (paramField != paramString) {
      if ((paramField instanceof ParameterizedType)) {
        paramString = TypeUtils.getClass(paramField);
      }
    }
    for (;;)
    {
      this.b = paramField;
      this.d = paramString;
      return;
      if ((paramField instanceof Class)) {
        paramString = TypeUtils.getClass(paramField);
      } else {
        paramString = paramMethod;
      }
    }
  }
  
  public static Type getFieldType(Class paramClass, Type paramType1, Type paramType2)
  {
    if ((paramClass == null) || (paramType1 == null)) {}
    while (!(paramType1 instanceof ParameterizedType)) {
      return paramType2;
    }
    ParameterizedType localParameterizedType1;
    Object localObject;
    int i;
    if ((paramType2 instanceof TypeVariable))
    {
      localParameterizedType1 = (ParameterizedType)paramType1;
      localObject = (TypeVariable)paramType2;
      i = 0;
    }
    int j;
    for (;;)
    {
      if (i >= paramClass.getTypeParameters().length)
      {
        if (!(paramType2 instanceof ParameterizedType)) {
          break;
        }
        localParameterizedType1 = (ParameterizedType)paramType2;
        localObject = localParameterizedType1.getActualTypeArguments();
        j = 0;
        i = 0;
        if (j < localObject.length) {
          break label151;
        }
        if (i == 0) {
          break;
        }
        return new ParameterizedTypeImpl((Type[])localObject, localParameterizedType1.getOwnerType(), localParameterizedType1.getRawType());
      }
      if (paramClass.getTypeParameters()[i].getName().equals(((TypeVariable)localObject).getName())) {
        return localParameterizedType1.getActualTypeArguments()[i];
      }
      i += 1;
    }
    label151:
    TypeVariable localTypeVariable = localObject[j];
    ParameterizedType localParameterizedType2;
    int k;
    if ((localTypeVariable instanceof TypeVariable))
    {
      localTypeVariable = (TypeVariable)localTypeVariable;
      if ((paramType1 instanceof ParameterizedType))
      {
        localParameterizedType2 = (ParameterizedType)paramType1;
        k = 0;
        label189:
        if (k < paramClass.getTypeParameters().length) {}
      }
    }
    for (;;)
    {
      j += 1;
      break;
      if (paramClass.getTypeParameters()[k].getName().equals(localTypeVariable.getName()))
      {
        localObject[j] = localParameterizedType2.getActualTypeArguments()[k];
        i = 1;
      }
      k += 1;
      break label189;
    }
  }
  
  public static Type getInheritGenericType(Class paramClass, TypeVariable paramTypeVariable)
  {
    Object localObject = paramTypeVariable.getGenericDeclaration();
    Type localType;
    do
    {
      localType = paramClass.getGenericSuperclass();
      if (localType == null) {
        return null;
      }
      if ((localType instanceof ParameterizedType))
      {
        paramClass = (ParameterizedType)localType;
        if (paramClass.getRawType() == localObject)
        {
          localObject = ((GenericDeclaration)localObject).getTypeParameters();
          paramClass = paramClass.getActualTypeArguments();
          int i = 0;
          for (;;)
          {
            if (i >= localObject.length) {
              return null;
            }
            if (localObject[i] == paramTypeVariable) {
              return paramClass[i];
            }
            i += 1;
          }
        }
      }
      paramClass = TypeUtils.getClass(localType);
    } while (localType != null);
    return null;
  }
  
  public int compareTo(FieldInfo paramFieldInfo)
  {
    return this.name.compareTo(paramFieldInfo.name);
  }
  
  public Object get(Object paramObject)
  {
    if (this.method != null) {
      return this.method.invoke(paramObject, new Object[0]);
    }
    return this.field.get(paramObject);
  }
  
  public Annotation getAnnotation(Class paramClass)
  {
    Annotation localAnnotation1 = null;
    if (this.method != null) {
      localAnnotation1 = this.method.getAnnotation(paramClass);
    }
    Annotation localAnnotation2 = localAnnotation1;
    if (localAnnotation1 == null)
    {
      localAnnotation2 = localAnnotation1;
      if (this.field != null) {
        localAnnotation2 = this.field.getAnnotation(paramClass);
      }
    }
    return localAnnotation2;
  }
  
  public Class getDeclaringClass()
  {
    return this.e;
  }
  
  public Field getField()
  {
    return this.field;
  }
  
  public Class getFieldClass()
  {
    return this.d;
  }
  
  public Type getFieldType()
  {
    return this.b;
  }
  
  public Method getMethod()
  {
    return this.method;
  }
  
  public String getName()
  {
    return this.name;
  }
  
  public boolean isGetOnly()
  {
    return this.g;
  }
  
  public void set(Object paramObject1, Object paramObject2)
  {
    if (this.method != null)
    {
      this.method.invoke(paramObject1, new Object[] { paramObject2 });
      return;
    }
    this.field.set(paramObject1, paramObject2);
  }
  
  public void setAccessible(boolean paramBoolean)
  {
    if (this.method != null)
    {
      this.method.setAccessible(paramBoolean);
      return;
    }
    this.field.setAccessible(paramBoolean);
  }
  
  public String toString()
  {
    return this.name;
  }
}
