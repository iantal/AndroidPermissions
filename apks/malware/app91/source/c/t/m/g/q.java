package c.t.m.g;

import android.content.Context;
import android.net.Uri;
import android.util.Log;
import android.util.Pair;
import com.tencent.beacon.scheduler.exception.SchedulerInitException;
import com.tencent.beacon.scheduler.ext.http.HttpAccessClient;
import com.tencent.beacon.scheduler.ext.http.HttpAccessClientFactory;
import com.tencent.beacon.scheduler.ext.http.HttpAccessRequest;
import com.tencent.beacon.scheduler.ext.http.HttpAccessResponse;
import com.tencent.beacon.scheduler.ext.http.exception.AccessRequestCreateException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public final class q
  implements y
{
  private static final List a = Arrays.asList(new String[] { "lbs.map.qq.com", "lbssp.map.qq.com" });
  private HttpAccessClient b;
  
  public q(Context paramContext, String paramString)
  {
    try
    {
      HttpAccessClientFactory.getHttpAccessClient().initAccessScheduler(paramContext, "0M3006CS7U0ZC2K3", paramString, "test_uuid", a);
      this.b = HttpAccessClientFactory.getHttpAccessClient();
      return;
    }
    catch (SchedulerInitException paramContext)
    {
      Log.getStackTraceString(paramContext);
      aj.b();
    }
  }
  
  private static String a(String paramString)
  {
    String str2 = "GBK";
    String str1 = str2;
    int j;
    int i;
    if (paramString != null)
    {
      paramString = paramString.split(";");
      j = paramString.length;
      i = 0;
    }
    for (;;)
    {
      str1 = str2;
      if (i < j)
      {
        str1 = paramString[i].trim();
        int k = str1.indexOf("charset=");
        if (-1 != k) {
          str1 = str1.substring(k + 8, str1.length());
        }
      }
      else
      {
        return str1;
      }
      i += 1;
    }
  }
  
  public final Pair a(String paramString, byte[] paramArrayOfByte)
  {
    if (this.b == null) {
      throw new IOException("can not init net sdk");
    }
    HttpAccessClient localHttpAccessClient = this.b;
    Object localObject = Uri.parse(paramString);
    for (;;)
    {
      try
      {
        localObject = ((Uri)localObject).getHost();
        paramString = paramString.substring(paramString.lastIndexOf("/"), paramString.length());
        paramString = localHttpAccessClient.createHttpPostRequest((String)localObject, new int[] { 80 }, paramString, paramArrayOfByte);
        paramString.setMaxResponseDataSize(32768);
        paramString = localHttpAccessClient.doRequest(paramString);
        if ((paramString != null) && (paramString.getRetCode() == 0)) {
          return Pair.create(paramString.getResponseData(), a(paramString.getResponseHeader("content-type")));
        }
        if (paramString == null) {
          continue;
        }
        paramString = Integer.toString(paramString.getRetCode());
      }
      catch (AccessRequestCreateException paramString)
      {
        aj.a("postSync: AccessRequestCreateException", paramString);
        paramString = paramString.getMessage();
        continue;
      }
      catch (Exception paramString)
      {
        aj.a("postSync: Exception", paramString);
        paramString = paramString.getMessage();
        continue;
      }
      throw new IOException(paramString);
      paramString = "null response";
    }
  }
}
