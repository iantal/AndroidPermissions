package c.t.m.g;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import com.tencent.map.geolocation.TencentLocation;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public final class ag
  implements Thread.UncaughtExceptionHandler
{
  private static final String a = TencentLocation.class.getPackage().getName();
  private static ag b = null;
  private final Context c;
  private final String d;
  private final String e;
  private final Thread.UncaughtExceptionHandler f;
  
  private ag(Context paramContext, String paramString1, String paramString2)
  {
    this.c = paramContext;
    this.d = paramString1;
    this.e = paramString2;
    this.f = Thread.getDefaultUncaughtExceptionHandler();
  }
  
  private static String a(Context paramContext, Thread paramThread, Throwable paramThrowable)
  {
    try
    {
      Object localObject1 = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0);
      StringBuilder localStringBuilder = new StringBuilder("SDK_V4.0_Errlog|");
      localStringBuilder.append(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH).format(new Date())).append("|");
      localObject2 = (TelephonyManager)paramContext.getSystemService("phone");
      if (localObject2 != null)
      {
        localObject2 = ((TelephonyManager)localObject2).getDeviceId();
        localStringBuilder.append((String)localObject2).append("|");
        localStringBuilder.append("4.0|");
        localStringBuilder.append("139747|");
        localStringBuilder.append(paramContext.getPackageName()).append("|");
        localStringBuilder.append(((PackageInfo)localObject1).versionName).append("|");
        localStringBuilder.append(((PackageInfo)localObject1).versionCode).append("|");
        localStringBuilder.append(Build.VERSION.RELEASE).append("|");
        localStringBuilder.append(Build.MODEL).append("|");
        localStringBuilder.append("android-").append(Build.VERSION.SDK_INT).append("|");
        localStringBuilder.append(paramThread.getClass().getName()).append("|");
        localStringBuilder.append("ExceptionClass:").append(paramThrowable.getClass()).append("|");
        localStringBuilder.append("ExceptionMessage:").append(paramThrowable.getMessage()).append("|");
        localStringBuilder.append("ExceptionDetails:");
        localObject1 = new StringWriter();
        paramThread = new PrintWriter((Writer)localObject1);
        paramThrowable.printStackTrace(paramThread);
        localObject1 = localObject1.toString().replaceAll("\r|\n", "__");
        paramThread.close();
        localStringBuilder.append((String)localObject1);
        if ((paramThrowable instanceof LinkageError))
        {
          localStringBuilder.append("|").append(Build.CPU_ABI).append(",").append(Build.CPU_ABI2).append("|");
          paramContext = paramContext.getDir("lib", 0);
          if ((paramContext != null) && (paramContext.isDirectory())) {
            localStringBuilder.append(Arrays.toString(paramContext.list()));
          }
        }
        return localStringBuilder.toString();
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        PackageInfo localPackageInfo = new PackageInfo();
        continue;
        Object localObject2 = "";
      }
    }
  }
  
  public static void a(Context paramContext)
  {
    Object localObject = Thread.getDefaultUncaughtExceptionHandler();
    if (localObject != null)
    {
      new StringBuilder("current handler class=").append(localObject.getClass().getName()).toString();
      aj.a();
    }
    if (!(localObject instanceof ag))
    {
      localObject = new File(paramContext.getDir("txsdklog", 0), "raw");
      if (!((File)localObject).exists()) {
        ((File)localObject).mkdirs();
      }
      paramContext = new ag(paramContext, ((File)localObject).getAbsolutePath(), "http://moon.sinaapp.com/andr/uploadlog");
      b = paramContext;
      Thread.setDefaultUncaughtExceptionHandler(paramContext);
    }
  }
  
  private void a(Thread paramThread, Throwable paramThrowable, boolean paramBoolean)
  {
    int j = 0;
    int i = j;
    Object localObject1;
    if (paramThrowable != null) {
      localObject1 = paramThrowable;
    }
    for (;;)
    {
      i = j;
      Object localObject2;
      if (localObject1 != null)
      {
        localObject2 = ((Throwable)localObject1).getStackTrace();
        int k = localObject2.length;
        i = 0;
        label38:
        if (i >= k) {
          break label260;
        }
        Object localObject3 = localObject2[i];
        if (("TencentLocation".equals(localObject3.getFileName())) || (localObject3.getClassName().contains(a))) {
          i = 1;
        }
      }
      else if (i != 0)
      {
        localObject1 = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss_", Locale.ENGLISH).format(new Date()) + (int)(Math.random() * 10000.0D);
        localObject1 = (String)localObject1 + ".stacktrace";
        localObject2 = a(this.c, paramThread, paramThrowable);
        if (this.e != null) {
          localObject1 = ah.a(b.a(this.c), "http://lstest.map.qq.com/stat", (String)localObject2, this.d + "/" + (String)localObject1);
        }
      }
      try
      {
        ((CountDownLatch)localObject1).await(30L, TimeUnit.SECONDS);
        if (paramBoolean) {
          this.f.uncaughtException(paramThread, paramThrowable);
        }
        return;
        i += 1;
        break label38;
        label260:
        localObject1 = ((Throwable)localObject1).getCause();
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          localInterruptedException.printStackTrace();
        }
      }
    }
  }
  
  public static void a(Throwable paramThrowable)
  {
    if (b != null) {
      b.a(Thread.currentThread(), paramThrowable, false);
    }
  }
  
  public final void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    a(paramThread, paramThrowable, true);
  }
}
