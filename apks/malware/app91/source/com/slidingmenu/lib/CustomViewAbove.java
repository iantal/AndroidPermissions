package com.slidingmenu.lib;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.support.v4.view.KeyEventCompat;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.VelocityTrackerCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.ViewConfigurationCompat;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.FocusFinder;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.Interpolator;
import android.widget.LinearLayout;
import android.widget.Scroller;
import java.util.ArrayList;
import java.util.Comparator;

public class CustomViewAbove
  extends ViewGroup
{
  private static final Comparator COMPARATOR = new CustomViewAbove.1();
  private static final boolean DEBUG = false;
  private static final int INVALID_POINTER = -1;
  private static final int[] LAYOUT_ATTRS = { 16842931 };
  private static final int MAX_SETTLE_DURATION = 600;
  private static final int MIN_DISTANCE_FOR_FLING = 25;
  public static final int SCROLL_STATE_DRAGGING = 1;
  public static final int SCROLL_STATE_IDLE = 0;
  public static final int SCROLL_STATE_SETTLING = 2;
  private static final String TAG = "CustomViewAbove";
  private static final boolean USE_CACHE = false;
  private static final Interpolator sInterpolator = new CustomViewAbove.2();
  private int mActivePointerId = -1;
  private Paint mBehindFadePaint = new Paint();
  private int mBottomPageBounds;
  private boolean mCalledSuper;
  private int mChildHeightMeasureSpec;
  private int mChildWidthMeasureSpec;
  private CustomViewAbove.ItemInfo mContent;
  private int mCurItem;
  private CustomViewBehind mCustomViewBehind2;
  private boolean mEnabled = true;
  private float mFadeDegree;
  private boolean mFadeEnabled;
  private boolean mFirstLayout = true;
  private int mFlingDistance;
  private boolean mInLayout;
  private float mInitialMotionX;
  private CustomViewAbove.OnPageChangeListener mInternalPageChangeListener;
  private boolean mIsBeingDragged;
  private boolean mIsUnableToDrag;
  private float mLastMotionX;
  private float mLastMotionY;
  private boolean mLastTouchAllowed = false;
  private int mMaximumVelocity;
  private int mMinimumVelocity;
  private CustomViewAbove.OnPageChangeListener mOnPageChangeListener;
  private boolean mPopulatePending;
  private float mScrollScale;
  private int mScrollState = 0;
  private Scroller mScroller;
  private boolean mScrolling;
  private boolean mScrollingCacheEnabled;
  private Drawable mShadowDrawable;
  private int mShadowWidth;
  private int mSlidingMenuThreshold = 10;
  private int mTopPageBounds;
  private int mTouchModeAbove = 0;
  private int mTouchModeBehind = 0;
  private int mTouchSlop;
  private VelocityTracker mVelocityTracker;
  private CustomViewAbove.ItemInfo mWindow;
  
  public CustomViewAbove(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public CustomViewAbove(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, true);
  }
  
  public CustomViewAbove(Context paramContext, AttributeSet paramAttributeSet, boolean paramBoolean)
  {
    super(paramContext, paramAttributeSet);
    initCustomViewAbove(paramBoolean);
  }
  
  private void completeScroll()
  {
    boolean bool2 = this.mScrolling;
    if (bool2)
    {
      setScrollingCacheEnabled(false);
      this.mScroller.abortAnimation();
      int i = getScrollX();
      int j = getScrollY();
      int k = this.mScroller.getCurrX();
      int m = this.mScroller.getCurrY();
      if ((i != k) || (j != m)) {
        scrollTo(k, m);
      }
      setScrollState(0);
    }
    this.mPopulatePending = false;
    this.mScrolling = false;
    boolean bool1 = bool2;
    if (this.mWindow != null)
    {
      bool1 = bool2;
      if (this.mWindow.scrolling)
      {
        this.mWindow.scrolling = false;
        bool1 = true;
      }
    }
    bool2 = bool1;
    if (this.mContent != null)
    {
      bool2 = bool1;
      if (this.mContent.scrolling)
      {
        this.mContent.scrolling = false;
        bool2 = true;
      }
    }
    if (bool2) {
      populate();
    }
  }
  
  private int determineTargetPage(int paramInt1, float paramFloat, int paramInt2, int paramInt3)
  {
    if ((Math.abs(paramInt3) > this.mFlingDistance) && (Math.abs(paramInt2) > this.mMinimumVelocity))
    {
      if (paramInt2 > 0) {
        return paramInt1;
      }
      return paramInt1 + 1;
    }
    return (int)(paramInt1 + paramFloat + 0.5F);
  }
  
  private void endDrag()
  {
    this.mIsBeingDragged = false;
    this.mIsUnableToDrag = false;
    if (this.mVelocityTracker != null)
    {
      this.mVelocityTracker.recycle();
      this.mVelocityTracker = null;
    }
  }
  
  private void onDrawBehindFade(Canvas paramCanvas, float paramFloat, int paramInt)
  {
    int i = (int)(this.mFadeDegree * 255.0F * paramFloat);
    if (i > 0)
    {
      this.mBehindFadePaint.setColor(Color.argb(i, 0, 0, 0));
      paramCanvas.drawRect(0.0F, 0.0F, paramInt, getHeight(), this.mBehindFadePaint);
    }
  }
  
  private void onSecondaryPointerUp(MotionEvent paramMotionEvent)
  {
    int i = MotionEventCompat.getActionIndex(paramMotionEvent);
    if (MotionEventCompat.getPointerId(paramMotionEvent, i) == this.mActivePointerId) {
      if (i != 0) {
        break label56;
      }
    }
    label56:
    for (i = 1;; i = 0)
    {
      this.mLastMotionX = MotionEventCompat.getX(paramMotionEvent, i);
      this.mActivePointerId = MotionEventCompat.getPointerId(paramMotionEvent, i);
      if (this.mVelocityTracker != null) {
        this.mVelocityTracker.clear();
      }
      return;
    }
  }
  
  private void pageScrolled(int paramInt)
  {
    int i = getChildWidth(this.mCurItem) + this.mShadowWidth;
    int j = paramInt / i;
    paramInt %= i;
    float f = paramInt / i;
    this.mCalledSuper = false;
    onPageScrolled(j, f, paramInt);
    if (!this.mCalledSuper) {
      throw new IllegalStateException("onPageScrolled did not call superclass implementation");
    }
  }
  
  private void recomputeScrollPosition(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (paramInt2 > 0)
    {
      int i = getDestScrollX();
      paramInt2 += paramInt4;
      paramInt4 = i / paramInt2;
      float f1 = i % paramInt2 / paramInt2;
      float f2 = paramInt4;
      paramInt1 = (int)((paramInt1 + paramInt3) * (f1 + f2));
      scrollTo(paramInt1, getScrollY());
      if (!this.mScroller.isFinished())
      {
        paramInt2 = this.mScroller.getDuration();
        paramInt3 = this.mScroller.timePassed();
        this.mScroller.startScroll(paramInt1, 0, getChildLeft(this.mCurItem), 0, paramInt2 - paramInt3);
      }
    }
    do
    {
      return;
      paramInt1 = getChildLeft(this.mCurItem);
    } while (paramInt1 == getScrollX());
    completeScroll();
    scrollTo(paramInt1, getScrollY());
  }
  
  private void removeNonDecorViews()
  {
    int j;
    for (int i = 0;; i = j + 1)
    {
      if (i >= getChildCount()) {
        return;
      }
      j = i;
      if (!((CustomViewAbove.LayoutParams)getChildAt(i).getLayoutParams()).isDecor)
      {
        removeViewAt(i);
        j = i - 1;
      }
    }
  }
  
  private void setScrollState(int paramInt)
  {
    if (this.mScrollState == paramInt) {}
    do
    {
      return;
      this.mScrollState = paramInt;
    } while (this.mOnPageChangeListener == null);
    this.mOnPageChangeListener.onPageScrollStateChanged(paramInt);
  }
  
  private void setScrollingCacheEnabled(boolean paramBoolean)
  {
    if (this.mScrollingCacheEnabled != paramBoolean) {
      this.mScrollingCacheEnabled = paramBoolean;
    }
  }
  
  private boolean thisTouchAllowed(MotionEvent paramMotionEvent)
  {
    boolean bool2 = true;
    boolean bool1;
    if (isMenuOpen())
    {
      bool1 = bool2;
      switch (this.mTouchModeBehind)
      {
      default: 
        bool1 = false;
      }
    }
    do
    {
      do
      {
        return bool1;
        if (paramMotionEvent.getX() < getBehindWidth()) {
          break;
        }
        bool1 = bool2;
      } while (paramMotionEvent.getX() <= getWidth());
      return false;
      bool1 = bool2;
      switch (this.mTouchModeAbove)
      {
      case 1: 
      default: 
        return false;
      }
      if (paramMotionEvent.getX() < 0.0F) {
        break;
      }
      bool1 = bool2;
    } while (paramMotionEvent.getX() <= this.mSlidingMenuThreshold);
    return false;
  }
  
  public void addFocusables(ArrayList paramArrayList, int paramInt1, int paramInt2)
  {
    int j = paramArrayList.size();
    int k = getDescendantFocusability();
    int i;
    if (k != 393216)
    {
      i = 0;
      if (i < getChildCount()) {}
    }
    else
    {
      if (((k != 262144) || (j == paramArrayList.size())) && (isFocusable())) {
        break label115;
      }
    }
    label115:
    while ((((paramInt2 & 0x1) == 1) && (isInTouchMode()) && (!isFocusableInTouchMode())) || (paramArrayList == null))
    {
      return;
      View localView = getChildAt(i);
      if (localView.getVisibility() == 0)
      {
        CustomViewAbove.ItemInfo localItemInfo = infoForChild(localView);
        if ((localItemInfo != null) && (localItemInfo.position == this.mCurItem)) {
          localView.addFocusables(paramArrayList, paramInt1, paramInt2);
        }
      }
      i += 1;
      break;
    }
    paramArrayList.add(this);
  }
  
  public void addTouchables(ArrayList paramArrayList)
  {
    int i = 0;
    for (;;)
    {
      if (i >= getChildCount()) {
        return;
      }
      View localView = getChildAt(i);
      if (localView.getVisibility() == 0)
      {
        CustomViewAbove.ItemInfo localItemInfo = infoForChild(localView);
        if ((localItemInfo != null) && (localItemInfo.position == this.mCurItem)) {
          localView.addTouchables(paramArrayList);
        }
      }
      i += 1;
    }
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    if (!checkLayoutParams(paramLayoutParams)) {
      paramLayoutParams = generateLayoutParams(paramLayoutParams);
    }
    for (;;)
    {
      CustomViewAbove.LayoutParams localLayoutParams = (CustomViewAbove.LayoutParams)paramLayoutParams;
      localLayoutParams.isDecor |= paramView instanceof CustomViewAbove.Decor;
      if (this.mInLayout)
      {
        if ((localLayoutParams != null) && (localLayoutParams.isDecor)) {
          throw new IllegalStateException("Cannot add pager decor view during layout");
        }
        addViewInLayout(paramView, paramInt, paramLayoutParams);
        paramView.measure(this.mChildWidthMeasureSpec, this.mChildHeightMeasureSpec);
        return;
      }
      super.addView(paramView, paramInt, paramLayoutParams);
      return;
    }
  }
  
  public boolean arrowScroll(int paramInt)
  {
    View localView2 = findFocus();
    View localView1 = localView2;
    if (localView2 == this) {
      localView1 = null;
    }
    localView2 = FocusFinder.getInstance().findNextFocus(this, localView1, paramInt);
    boolean bool;
    if ((localView2 != null) && (localView2 != localView1)) {
      if (paramInt == 17) {
        if ((localView1 != null) && (localView2.getLeft() >= localView1.getLeft())) {
          bool = pageLeft();
        }
      }
    }
    for (;;)
    {
      if (bool) {
        playSoundEffect(SoundEffectConstants.getContantForFocusDirection(paramInt));
      }
      return bool;
      bool = localView2.requestFocus();
      continue;
      if (paramInt == 66)
      {
        if ((localView1 != null) && (localView2.getLeft() <= localView1.getLeft()))
        {
          bool = pageRight();
          continue;
        }
        bool = localView2.requestFocus();
        continue;
        if ((paramInt == 17) || (paramInt == 1))
        {
          bool = pageLeft();
          continue;
        }
        if ((paramInt == 66) || (paramInt == 2))
        {
          bool = pageRight();
          continue;
        }
      }
      bool = false;
    }
  }
  
  protected boolean canScroll(View paramView, boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3)
  {
    ViewGroup localViewGroup;
    int j;
    int k;
    int i;
    if ((paramView instanceof ViewGroup))
    {
      localViewGroup = (ViewGroup)paramView;
      j = paramView.getScrollX();
      k = paramView.getScrollY();
      i = localViewGroup.getChildCount() - 1;
    }
    for (;;)
    {
      if (i < 0) {
        if ((!paramBoolean) || (!ViewCompat.canScrollHorizontally(paramView, -paramInt1))) {
          break;
        }
      }
      View localView;
      do
      {
        return true;
        localView = localViewGroup.getChildAt(i);
      } while ((paramInt2 + j >= localView.getLeft()) && (paramInt2 + j < localView.getRight()) && (paramInt3 + k >= localView.getTop()) && (paramInt3 + k < localView.getBottom()) && (canScroll(localView, true, paramInt1, paramInt2 + j - localView.getLeft(), paramInt3 + k - localView.getTop())));
      i -= 1;
    }
    return false;
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof CustomViewAbove.LayoutParams)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void computeScroll()
  {
    if ((!this.mScroller.isFinished()) && (this.mScroller.computeScrollOffset()))
    {
      int i = getScrollX();
      int j = getScrollY();
      int k = this.mScroller.getCurrX();
      int m = this.mScroller.getCurrY();
      if ((i != k) || (j != m))
      {
        scrollTo(k, m);
        pageScrolled(k);
      }
      invalidate();
      return;
    }
    completeScroll();
  }
  
  void dataSetChanged()
  {
    int n = 1;
    ArrayList localArrayList = getItems();
    int k = 0;
    int i = -1;
    int j = 0;
    if (k >= localArrayList.size())
    {
      if (i < 0) {
        break label119;
      }
      setCurrentItemInternal(i, false, true);
    }
    label119:
    for (i = n;; i = j)
    {
      if (i != 0)
      {
        populate();
        requestLayout();
      }
      return;
      CustomViewAbove.ItemInfo localItemInfo = (CustomViewAbove.ItemInfo)localArrayList.get(k);
      int i1 = localItemInfo.position;
      int m = i;
      if (localItemInfo.position != i1)
      {
        if (localItemInfo.position == this.mCurItem) {
          i = i1;
        }
        localItemInfo.position = i1;
        j = 1;
        m = i;
      }
      k += 1;
      i = m;
      break;
    }
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent)
  {
    return (super.dispatchKeyEvent(paramKeyEvent)) || (executeKeyEvent(paramKeyEvent));
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return false;
      }
      View localView = getChildAt(i);
      if (localView.getVisibility() == 0)
      {
        CustomViewAbove.ItemInfo localItemInfo = infoForChild(localView);
        if ((localItemInfo != null) && (localItemInfo.position == this.mCurItem) && (localView.dispatchPopulateAccessibilityEvent(paramAccessibilityEvent))) {
          return true;
        }
      }
      i += 1;
    }
  }
  
  float distanceInfluenceForSnapDuration(float paramFloat)
  {
    return (float)Math.sin((float)((paramFloat - 0.5F) * 0.4712389167638204D));
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    Drawable localDrawable = this.mShadowDrawable;
    if ((localDrawable != null) && (localDrawable.isStateful())) {
      localDrawable.setState(getDrawableState());
    }
  }
  
  public boolean executeKeyEvent(KeyEvent paramKeyEvent)
  {
    if (paramKeyEvent.getAction() == 0) {
      switch (paramKeyEvent.getKeyCode())
      {
      }
    }
    do
    {
      do
      {
        return false;
        return arrowScroll(17);
        return arrowScroll(66);
      } while (Build.VERSION.SDK_INT < 11);
      if (KeyEventCompat.hasNoModifiers(paramKeyEvent)) {
        return arrowScroll(2);
      }
    } while (!KeyEventCompat.hasModifiers(paramKeyEvent, 1));
    return arrowScroll(1);
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new CustomViewAbove.LayoutParams();
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new CustomViewAbove.LayoutParams(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return generateDefaultLayoutParams();
  }
  
  public int getBehindWidth()
  {
    if (this.mCustomViewBehind2 == null) {
      return 0;
    }
    return this.mCustomViewBehind2.getWidth();
  }
  
  public int getChildLeft(int paramInt)
  {
    if (paramInt <= 0) {
      return 0;
    }
    return getChildWidth(paramInt - 1) + getChildLeft(paramInt - 1);
  }
  
  public int getChildRight(int paramInt)
  {
    return getChildLeft(paramInt) + getChildWidth(paramInt);
  }
  
  public int getChildWidth(int paramInt)
  {
    if (paramInt <= 0) {
      return getBehindWidth();
    }
    return getChildAt(paramInt).getMeasuredWidth();
  }
  
  int getCount()
  {
    int i = 0;
    if (this.mWindow != null) {
      i = 1;
    }
    int j = i;
    if (this.mContent != null) {
      j = i + 1;
    }
    return j;
  }
  
  public int getCurrentItem()
  {
    return this.mCurItem;
  }
  
  public int getCustomWidth()
  {
    if (isMenuOpen()) {}
    for (int i = 0;; i = 1) {
      return getChildWidth(i);
    }
  }
  
  public int getDestScrollX()
  {
    if (isMenuOpen()) {
      return getBehindWidth();
    }
    return 0;
  }
  
  ArrayList getItems()
  {
    ArrayList localArrayList = new ArrayList();
    if (this.mWindow != null) {
      localArrayList.add(this.mWindow);
    }
    if (this.mContent != null) {
      localArrayList.add(this.mContent);
    }
    return localArrayList;
  }
  
  public float getScrollScale()
  {
    return this.mScrollScale;
  }
  
  public int getShadowWidth()
  {
    return this.mShadowWidth;
  }
  
  public int getTouchModeAbove()
  {
    return this.mTouchModeAbove;
  }
  
  public int getTouchModeBehind()
  {
    return this.mTouchModeBehind;
  }
  
  CustomViewAbove.ItemInfo infoForAnyChild(View paramView)
  {
    for (;;)
    {
      ViewParent localViewParent = paramView.getParent();
      if (localViewParent == this) {
        return infoForChild(paramView);
      }
      if ((localViewParent == null) || (!(localViewParent instanceof View))) {
        return null;
      }
      paramView = (View)localViewParent;
    }
  }
  
  CustomViewAbove.ItemInfo infoForChild(View paramView)
  {
    if ((this.mWindow != null) && (paramView.equals(this.mWindow.object))) {
      return this.mWindow;
    }
    if ((this.mContent != null) && (paramView.equals(this.mContent.object))) {
      return this.mContent;
    }
    return null;
  }
  
  void initCustomViewAbove()
  {
    initCustomViewAbove(false);
  }
  
  void initCustomViewAbove(boolean paramBoolean)
  {
    setWillNotDraw(false);
    setDescendantFocusability(262144);
    setFocusable(true);
    Context localContext = getContext();
    this.mScroller = new Scroller(localContext, sInterpolator);
    Object localObject = ViewConfiguration.get(localContext);
    this.mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop((ViewConfiguration)localObject);
    this.mMinimumVelocity = ((ViewConfiguration)localObject).getScaledMinimumFlingVelocity();
    this.mMaximumVelocity = ((ViewConfiguration)localObject).getScaledMaximumFlingVelocity();
    if (paramBoolean)
    {
      localObject = new LinearLayout(getContext());
      ((View)localObject).setBackgroundResource(17170445);
      setMenu((View)localObject);
    }
    this.mFlingDistance = ((int)(localContext.getResources().getDisplayMetrics().density * 25.0F));
  }
  
  public boolean isMenuOpen()
  {
    return getCurrentItem() == 0;
  }
  
  boolean isNull()
  {
    return this.mContent == null;
  }
  
  public boolean isSlidingEnabled()
  {
    return this.mEnabled;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    this.mFirstLayout = true;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    int i = getBehindWidth();
    if ((this.mShadowWidth > 0) && (this.mShadowDrawable != null))
    {
      i -= this.mShadowWidth;
      this.mShadowDrawable.setBounds(i, this.mTopPageBounds, this.mShadowWidth + i, this.mBottomPageBounds);
      this.mShadowDrawable.draw(paramCanvas);
    }
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!this.mEnabled) {}
    int i;
    do
    {
      do
      {
        do
        {
          return false;
        } while (!thisTouchAllowed(paramMotionEvent));
        i = paramMotionEvent.getAction() & 0xFF;
        if ((i != 3) && (i != 1)) {
          break;
        }
        this.mIsBeingDragged = false;
        this.mIsUnableToDrag = false;
        this.mActivePointerId = -1;
      } while (this.mVelocityTracker == null);
      this.mVelocityTracker.recycle();
      this.mVelocityTracker = null;
      return false;
      if (i == 0) {
        break;
      }
      if (this.mIsBeingDragged) {
        return true;
      }
    } while (this.mIsUnableToDrag);
    switch (i)
    {
    }
    for (;;)
    {
      if (!this.mIsBeingDragged)
      {
        if (this.mVelocityTracker == null) {
          this.mVelocityTracker = VelocityTracker.obtain();
        }
        this.mVelocityTracker.addMovement(paramMotionEvent);
      }
      return this.mIsBeingDragged;
      i = this.mActivePointerId;
      if (i != -1)
      {
        i = MotionEventCompat.findPointerIndex(paramMotionEvent, i);
        float f1 = MotionEventCompat.getX(paramMotionEvent, i);
        float f2 = f1 - this.mLastMotionX;
        float f3 = Math.abs(f2);
        float f4 = MotionEventCompat.getY(paramMotionEvent, i);
        float f5 = Math.abs(f4 - this.mLastMotionY);
        if (canScroll(this, false, (int)f2, (int)f1, (int)f4))
        {
          this.mLastMotionX = f1;
          this.mInitialMotionX = f1;
          this.mLastMotionY = f4;
          return false;
        }
        if ((f3 > this.mTouchSlop) && (f3 > f5))
        {
          this.mIsBeingDragged = true;
          setScrollState(1);
          this.mLastMotionX = f1;
          setScrollingCacheEnabled(true);
        }
        else if (f5 > this.mTouchSlop)
        {
          this.mIsUnableToDrag = true;
          continue;
          f1 = paramMotionEvent.getX();
          this.mInitialMotionX = f1;
          this.mLastMotionX = f1;
          this.mLastMotionY = paramMotionEvent.getY();
          this.mActivePointerId = MotionEventCompat.getPointerId(paramMotionEvent, 0);
          if (this.mScrollState == 2)
          {
            this.mIsBeingDragged = true;
            this.mIsUnableToDrag = false;
            setScrollState(1);
          }
          else
          {
            if ((isMenuOpen()) || ((this.mTouchModeAbove != 1) && (thisTouchAllowed(paramMotionEvent))))
            {
              this.mIsBeingDragged = false;
              this.mIsUnableToDrag = false;
              return true;
            }
            completeScroll();
            this.mIsBeingDragged = false;
            this.mIsUnableToDrag = false;
            continue;
            onSecondaryPointerUp(paramMotionEvent);
          }
        }
      }
    }
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    this.mInLayout = true;
    populate();
    this.mInLayout = false;
    paramInt3 = getChildCount();
    int i = getPaddingTop();
    int j = getPaddingBottom();
    paramInt1 = 0;
    for (;;)
    {
      if (paramInt1 >= paramInt3)
      {
        this.mTopPageBounds = i;
        this.mBottomPageBounds = (paramInt4 - paramInt2 - j);
        this.mFirstLayout = false;
        return;
      }
      View localView = getChildAt(paramInt1);
      if (localView.getVisibility() != 8)
      {
        int k = getChildLeft(infoForChild(localView).position);
        localView.layout(k, 0, localView.getMeasuredWidth() + k, localView.getMeasuredHeight() + 0);
      }
      paramInt1 += 1;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(getDefaultSize(0, paramInt1), getDefaultSize(0, paramInt2));
    paramInt2 = getMeasuredWidth() - getPaddingLeft() - getPaddingRight();
    paramInt1 = getMeasuredHeight() - getPaddingTop() - getPaddingBottom();
    int i1 = getChildCount();
    int i = 0;
    label101:
    View localView;
    CustomViewAbove.LayoutParams localLayoutParams;
    int j;
    int m;
    int n;
    label190:
    label205:
    int k;
    if (i >= i1)
    {
      this.mChildWidthMeasureSpec = View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824);
      this.mChildHeightMeasureSpec = View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824);
      this.mInLayout = true;
      populate();
      this.mInLayout = false;
      paramInt2 = getChildCount();
      paramInt1 = 0;
      if (paramInt1 < paramInt2) {}
    }
    else
    {
      localView = getChildAt(i);
      if (localView.getVisibility() == 8) {
        break label384;
      }
      localLayoutParams = (CustomViewAbove.LayoutParams)localView.getLayoutParams();
      if ((localLayoutParams == null) || (!localLayoutParams.isDecor)) {
        break label384;
      }
      j = localLayoutParams.gravity & 0x7;
      paramInt2 = localLayoutParams.gravity & 0x70;
      m = Integer.MIN_VALUE;
      n = Integer.MIN_VALUE;
      if ((paramInt2 != 48) && (paramInt2 != 80))
      {
        paramInt2 = 0;
        if ((j == 3) || (j == 5)) {
          break label274;
        }
        j = 0;
        if (paramInt2 == 0) {
          break label280;
        }
        k = 1073741824;
        label214:
        m = getChildWidth(infoForChild(localView).position);
        localView.measure(View.MeasureSpec.makeMeasureSpec(m, k), View.MeasureSpec.makeMeasureSpec(paramInt1, n));
        if (paramInt2 == 0) {
          break label301;
        }
        paramInt1 -= localView.getMeasuredHeight();
        paramInt2 = m;
      }
    }
    label274:
    label280:
    label301:
    label384:
    for (;;)
    {
      i += 1;
      break;
      paramInt2 = 1;
      break label190;
      j = 1;
      break label205;
      k = m;
      if (j == 0) {
        break label214;
      }
      n = 1073741824;
      k = m;
      break label214;
      if (j != 0)
      {
        paramInt2 = m - localView.getMeasuredWidth();
        continue;
        localView = getChildAt(paramInt1);
        if (localView.getVisibility() != 8)
        {
          localLayoutParams = (CustomViewAbove.LayoutParams)localView.getLayoutParams();
          if ((localLayoutParams == null) || (!localLayoutParams.isDecor)) {
            localView.measure(this.mChildWidthMeasureSpec, this.mChildHeightMeasureSpec);
          }
        }
        paramInt1 += 1;
        break label101;
      }
      paramInt2 = m;
    }
  }
  
  protected void onPageScrolled(int paramInt1, float paramFloat, int paramInt2)
  {
    if (this.mOnPageChangeListener != null) {
      this.mOnPageChangeListener.onPageScrolled(paramInt1, paramFloat, paramInt2);
    }
    if (this.mInternalPageChangeListener != null) {
      this.mInternalPageChangeListener.onPageScrolled(paramInt1, paramFloat, paramInt2);
    }
    this.mCalledSuper = true;
  }
  
  protected boolean onRequestFocusInDescendants(int paramInt, Rect paramRect)
  {
    boolean bool2 = true;
    int k = -1;
    int j = getChildCount();
    int i;
    if ((paramInt & 0x2) != 0)
    {
      k = 1;
      i = 0;
    }
    for (;;)
    {
      boolean bool1;
      if (i == j) {
        bool1 = false;
      }
      View localView;
      do
      {
        return bool1;
        i = j - 1;
        j = -1;
        break;
        localView = getChildAt(i);
        if (localView.getVisibility() != 0) {
          break label100;
        }
        CustomViewAbove.ItemInfo localItemInfo = infoForChild(localView);
        if ((localItemInfo == null) || (localItemInfo.position != this.mCurItem)) {
          break label100;
        }
        bool1 = bool2;
      } while (localView.requestFocus(paramInt, paramRect));
      label100:
      i += k;
    }
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramInt1 != paramInt3) {
      recomputeScrollPosition(paramInt1, paramInt3, this.mShadowWidth, this.mShadowWidth);
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    float f1 = 0.0F;
    if (!this.mEnabled) {
      return false;
    }
    if ((!this.mLastTouchAllowed) && (!thisTouchAllowed(paramMotionEvent))) {
      return false;
    }
    int i = paramMotionEvent.getAction();
    if ((i == 1) || (i == 6) || (i == 3) || (i == 4)) {}
    for (this.mLastTouchAllowed = false; getCount() == 0; this.mLastTouchAllowed = true) {
      return false;
    }
    if (this.mVelocityTracker == null) {
      this.mVelocityTracker = VelocityTracker.obtain();
    }
    this.mVelocityTracker.addMovement(paramMotionEvent);
    float f2;
    float f3;
    switch (i & 0xFF)
    {
    case 4: 
    default: 
    case 0: 
    case 2: 
      do
      {
        for (;;)
        {
          return true;
          completeScroll();
          f1 = paramMotionEvent.getX();
          this.mInitialMotionX = f1;
          this.mLastMotionX = f1;
          this.mActivePointerId = MotionEventCompat.getPointerId(paramMotionEvent, 0);
        }
        if (!this.mIsBeingDragged)
        {
          i = MotionEventCompat.findPointerIndex(paramMotionEvent, this.mActivePointerId);
          f2 = MotionEventCompat.getX(paramMotionEvent, i);
          f3 = Math.abs(f2 - this.mLastMotionX);
          float f4 = Math.abs(MotionEventCompat.getY(paramMotionEvent, i) - this.mLastMotionY);
          if ((f3 > this.mTouchSlop) && (f3 > f4))
          {
            this.mIsBeingDragged = true;
            this.mLastMotionX = f2;
            setScrollState(1);
            setScrollingCacheEnabled(true);
          }
        }
      } while (!this.mIsBeingDragged);
      f2 = MotionEventCompat.getX(paramMotionEvent, MotionEventCompat.findPointerIndex(paramMotionEvent, this.mActivePointerId));
      f3 = this.mLastMotionX;
      this.mLastMotionX = f2;
      f2 = f3 - f2 + getScrollX();
      f3 = getBehindWidth();
      if (f2 >= 0.0F) {
        break;
      }
    }
    for (;;)
    {
      this.mLastMotionX += f1 - (int)f1;
      scrollTo((int)f1, getScrollY());
      pageScrolled((int)f1);
      break;
      if (f2 > f3)
      {
        f1 = f3;
        continue;
        if (this.mIsBeingDragged)
        {
          VelocityTracker localVelocityTracker = this.mVelocityTracker;
          localVelocityTracker.computeCurrentVelocity(1000, this.mMaximumVelocity);
          i = (int)VelocityTrackerCompat.getXVelocity(localVelocityTracker, this.mActivePointerId);
          this.mPopulatePending = true;
          int j = getChildWidth(this.mCurItem) + this.mShadowWidth;
          int k = getScrollX();
          setCurrentItemInternal(determineTargetPage(k / j, k % j / j, i, (int)(MotionEventCompat.getX(paramMotionEvent, MotionEventCompat.findPointerIndex(paramMotionEvent, this.mActivePointerId)) - this.mInitialMotionX)), true, true, i);
          this.mActivePointerId = -1;
          endDrag();
          break;
        }
        if (!isMenuOpen()) {
          break;
        }
        setCurrentItem(1);
        break;
        if (!this.mIsBeingDragged) {
          break;
        }
        setCurrentItemInternal(this.mCurItem, true, true);
        this.mActivePointerId = -1;
        endDrag();
        break;
        i = MotionEventCompat.getActionIndex(paramMotionEvent);
        this.mLastMotionX = MotionEventCompat.getX(paramMotionEvent, i);
        this.mActivePointerId = MotionEventCompat.getPointerId(paramMotionEvent, i);
        break;
        onSecondaryPointerUp(paramMotionEvent);
        this.mLastMotionX = MotionEventCompat.getX(paramMotionEvent, MotionEventCompat.findPointerIndex(paramMotionEvent, this.mActivePointerId));
        break;
      }
      f1 = f2;
    }
  }
  
  boolean pageLeft()
  {
    if (this.mCurItem > 0)
    {
      setCurrentItem(this.mCurItem - 1, true);
      return true;
    }
    return false;
  }
  
  boolean pageRight()
  {
    if (this.mCurItem < getCount() - 1)
    {
      setCurrentItem(this.mCurItem + 1, true);
      return true;
    }
    return false;
  }
  
  void populate()
  {
    if (this.mPopulatePending) {
      break label7;
    }
    label7:
    label41:
    label128:
    label157:
    label159:
    label162:
    for (;;)
    {
      return;
      if (getWindowToken() != null)
      {
        if ((this.mWindow != null) && (this.mWindow.position == this.mCurItem))
        {
          localObject = this.mWindow;
          if (!hasFocus()) {
            break label157;
          }
          localObject = findFocus();
          if (localObject == null) {
            break label159;
          }
        }
        for (Object localObject = infoForAnyChild((View)localObject);; localObject = null)
        {
          if ((localObject != null) && (((CustomViewAbove.ItemInfo)localObject).position == this.mCurItem)) {
            break label162;
          }
          int i = 0;
          for (;;)
          {
            if (i >= getChildCount()) {
              break label128;
            }
            localObject = getChildAt(i);
            CustomViewAbove.ItemInfo localItemInfo = infoForChild((View)localObject);
            if ((localItemInfo != null) && (localItemInfo.position == this.mCurItem) && (((View)localObject).requestFocus(2))) {
              break;
            }
            i += 1;
          }
          break label7;
          if ((this.mContent == null) || (this.mContent.position != this.mCurItem)) {
            break label41;
          }
          localObject = this.mContent;
          break label41;
          break label7;
        }
      }
    }
  }
  
  public void scrollTo(int paramInt1, int paramInt2)
  {
    super.scrollTo(paramInt1, paramInt2);
    if ((this.mCustomViewBehind2 != null) && (this.mEnabled)) {
      this.mCustomViewBehind2.scrollTo((int)(paramInt1 * this.mScrollScale), paramInt2);
    }
    invalidate();
  }
  
  public void setBehindFadeDegree(float paramFloat)
  {
    this.mFadeDegree = paramFloat;
  }
  
  public void setBehindFadeEnabled(boolean paramBoolean)
  {
    this.mFadeEnabled = paramBoolean;
  }
  
  public void setContent(View paramView)
  {
    CustomViewAbove.ItemInfo localItemInfo = new CustomViewAbove.ItemInfo();
    localItemInfo.position = 1;
    localItemInfo.object = paramView;
    if (this.mContent != null) {
      removeView((View)this.mContent.object);
    }
    addView(paramView);
    this.mContent = localItemInfo;
  }
  
  public void setCurrentItem(int paramInt)
  {
    this.mPopulatePending = false;
    if (this.mFirstLayout) {}
    for (boolean bool = false;; bool = true)
    {
      setCurrentItemInternal(paramInt, bool, false);
      return;
    }
  }
  
  public void setCurrentItem(int paramInt, boolean paramBoolean)
  {
    this.mPopulatePending = false;
    setCurrentItemInternal(paramInt, paramBoolean, false);
  }
  
  void setCurrentItemInternal(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    setCurrentItemInternal(paramInt, paramBoolean1, paramBoolean2, 0);
  }
  
  void setCurrentItemInternal(int paramInt1, boolean paramBoolean1, boolean paramBoolean2, int paramInt2)
  {
    int j = 1;
    if (isNull())
    {
      setScrollingCacheEnabled(false);
      return;
    }
    if ((!paramBoolean2) && (this.mCurItem == paramInt1) && (this.mWindow != null) && (this.mContent != null))
    {
      setScrollingCacheEnabled(false);
      return;
    }
    int i;
    if (paramInt1 < 0)
    {
      i = 0;
      label55:
      if ((i > 0) && (i < getCount()))
      {
        this.mWindow.scrolling = true;
        this.mContent.scrolling = true;
      }
      if (this.mCurItem == i) {
        break label197;
      }
    }
    label197:
    for (paramInt1 = j;; paramInt1 = 0)
    {
      this.mCurItem = i;
      populate();
      j = getChildLeft(this.mCurItem);
      if (!paramBoolean1) {
        break label202;
      }
      smoothScrollTo(j, 0, paramInt2);
      if ((paramInt1 != 0) && (this.mOnPageChangeListener != null)) {
        this.mOnPageChangeListener.onPageSelected(i);
      }
      if ((paramInt1 == 0) || (this.mInternalPageChangeListener == null)) {
        break;
      }
      this.mInternalPageChangeListener.onPageSelected(i);
      return;
      i = paramInt1;
      if (paramInt1 < getCount()) {
        break label55;
      }
      i = getCount() - 1;
      break label55;
    }
    label202:
    if ((paramInt1 != 0) && (this.mOnPageChangeListener != null)) {
      this.mOnPageChangeListener.onPageSelected(i);
    }
    if ((paramInt1 != 0) && (this.mInternalPageChangeListener != null)) {
      this.mInternalPageChangeListener.onPageSelected(i);
    }
    completeScroll();
    scrollTo(j, 0);
  }
  
  public void setCustomViewBehind2(CustomViewBehind paramCustomViewBehind)
  {
    this.mCustomViewBehind2 = paramCustomViewBehind;
  }
  
  CustomViewAbove.OnPageChangeListener setInternalPageChangeListener(CustomViewAbove.OnPageChangeListener paramOnPageChangeListener)
  {
    CustomViewAbove.OnPageChangeListener localOnPageChangeListener = this.mInternalPageChangeListener;
    this.mInternalPageChangeListener = paramOnPageChangeListener;
    return localOnPageChangeListener;
  }
  
  protected void setMenu(View paramView)
  {
    CustomViewAbove.ItemInfo localItemInfo = new CustomViewAbove.ItemInfo();
    localItemInfo.position = 0;
    localItemInfo.object = paramView;
    if (this.mWindow != null) {
      removeView((View)this.mWindow.object);
    }
    addView(paramView);
    this.mWindow = localItemInfo;
  }
  
  public void setOnPageChangeListener(CustomViewAbove.OnPageChangeListener paramOnPageChangeListener)
  {
    this.mOnPageChangeListener = paramOnPageChangeListener;
  }
  
  public void setScrollScale(float paramFloat)
  {
    if ((paramFloat >= 0.0F) && (paramFloat <= 1.0F)) {
      this.mScrollScale = paramFloat;
    }
  }
  
  public void setShadowDrawable(int paramInt)
  {
    setShadowDrawable(getContext().getResources().getDrawable(paramInt));
  }
  
  public void setShadowDrawable(Drawable paramDrawable)
  {
    this.mShadowDrawable = paramDrawable;
    if (paramDrawable != null) {
      refreshDrawableState();
    }
    if (paramDrawable == null) {}
    for (boolean bool = true;; bool = false)
    {
      setWillNotDraw(bool);
      invalidate();
      return;
    }
  }
  
  public void setShadowWidth(int paramInt)
  {
    int i = this.mShadowWidth;
    this.mShadowWidth = paramInt;
    invalidate();
  }
  
  public void setSlidingEnabled(boolean paramBoolean)
  {
    this.mEnabled = paramBoolean;
  }
  
  public void setTouchModeAbove(int paramInt)
  {
    this.mTouchModeAbove = paramInt;
  }
  
  public void setTouchModeBehind(int paramInt)
  {
    this.mTouchModeBehind = paramInt;
  }
  
  void smoothScrollTo(int paramInt1, int paramInt2)
  {
    smoothScrollTo(paramInt1, paramInt2, 0);
  }
  
  void smoothScrollTo(int paramInt1, int paramInt2, int paramInt3)
  {
    if (getChildCount() == 0)
    {
      setScrollingCacheEnabled(false);
      return;
    }
    int i = getScrollX();
    int j = getScrollY();
    int k = paramInt1 - i;
    paramInt2 -= j;
    if ((k == 0) && (paramInt2 == 0))
    {
      completeScroll();
      setScrollState(0);
      return;
    }
    setScrollingCacheEnabled(true);
    this.mScrolling = true;
    setScrollState(2);
    paramInt1 = getCustomWidth();
    int m = paramInt1 / 2;
    float f3 = Math.min(1.0F, Math.abs(k) * 1.0F / paramInt1);
    float f1 = m;
    float f2 = m;
    f3 = distanceInfluenceForSnapDuration(f3);
    paramInt3 = Math.abs(paramInt3);
    if (paramInt3 > 0) {}
    for (paramInt1 = Math.round(1000.0F * Math.abs((f2 * f3 + f1) / paramInt3)) * 4;; paramInt1 = 600)
    {
      paramInt1 = Math.min(paramInt1, 600);
      this.mScroller.startScroll(i, j, k, paramInt2, paramInt1);
      invalidate();
      return;
      paramInt1 = (int)((Math.abs(k) / (paramInt1 + this.mShadowWidth) + 1.0F) * 100.0F);
    }
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == this.mShadowDrawable);
  }
}
