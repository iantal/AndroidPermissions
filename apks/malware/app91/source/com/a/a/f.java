package com.a.a;

import android.app.Activity;
import android.content.Context;

public class f
{
  private static boolean a = false;
  
  public static void a(int paramInt)
  {
    i.a().a(paramInt);
  }
  
  public static void a(Context paramContext)
  {
    for (;;)
    {
      try
      {
        boolean bool = a(paramContext, "onResume(...)");
        if (!bool) {
          return;
        }
        if (!a(Activity.class, "onResume")) {
          throw new SecurityException("onResume(Context context)不在Activity.onResume()中被调用||onResume(Context context)is not called in Activity.onResume().");
        }
      }
      finally {}
      d(paramContext);
      o.b().a(paramContext, System.currentTimeMillis());
    }
  }
  
  public static void a(Context paramContext, int paramInt)
  {
    if (!a(paramContext, "setOn(...)")) {}
    do
    {
      do
      {
        return;
        if (!a(Activity.class, "onCreate")) {
          throw new SecurityException("setOn()没有在Activity.onCreate()内被调用||setOn()is not called in Activity.onCreate().");
        }
      } while (a());
      b();
    } while ((paramInt & 0x1) == 0);
    c(paramContext);
  }
  
  public static void a(Context paramContext, e paramE, int paramInt, boolean paramBoolean)
  {
    if (!a(paramContext, "setSendLogStrategy(...)")) {
      return;
    }
    d(paramContext);
    i.a().a(paramContext.getApplicationContext(), paramE, paramInt, paramBoolean);
  }
  
  public static void a(Context paramContext, String paramString, boolean paramBoolean)
  {
    d.a().a(paramContext, paramString, paramBoolean);
  }
  
  private static boolean a()
  {
    return a;
  }
  
  private static boolean a(Context paramContext, String paramString)
  {
    if (paramContext == null)
    {
      y.b(new Object[] { "sdkstat", paramString + ":context=null" });
      return false;
    }
    return true;
  }
  
  static boolean a(Class paramClass, String paramString)
  {
    boolean bool2 = false;
    boolean bool1 = false;
    int i = 2;
    StackTraceElement[] arrayOfStackTraceElement = new Throwable().getStackTrace();
    y.a(new Object[] { "isCalledBy", Integer.valueOf(arrayOfStackTraceElement.length), paramClass, paramString });
    if (arrayOfStackTraceElement.length >= 2)
    {
      bool2 = bool1;
      if (i < arrayOfStackTraceElement.length)
      {
        Object localObject = arrayOfStackTraceElement[i];
        bool2 = bool1;
        if (((StackTraceElement)localObject).getMethodName().equals(paramString)) {
          try
          {
            localObject = Class.forName(((StackTraceElement)localObject).getClassName());
            y.a(new Object[] { "isCalledBy", localObject });
            while ((((Class)localObject).getSuperclass() != null) && (((Class)localObject).getSuperclass() != paramClass))
            {
              localObject = ((Class)localObject).getSuperclass();
              y.a(new Object[] { "isCalledBy", localObject });
              continue;
              i += 1;
            }
          }
          catch (Exception localException)
          {
            y.a(localException);
            bool2 = bool1;
          }
        }
        for (;;)
        {
          bool1 = bool2;
          break;
          bool2 = true;
        }
      }
    }
    return bool2;
  }
  
  private static void b()
  {
    a = true;
  }
  
  public static void b(int paramInt)
  {
    if (paramInt <= 0)
    {
      y.b("SessionTimeOut is between 1 and 600. Default value[30] is used");
      return;
    }
    if (paramInt <= 600)
    {
      o.b().a(paramInt);
      return;
    }
    y.b("SessionTimeOut is between 1 and 600. Value[600] is used");
    o.b().a(paramInt);
  }
  
  public static void b(Context paramContext)
  {
    for (;;)
    {
      try
      {
        boolean bool = a(paramContext, "onPause(...)");
        if (!bool) {
          return;
        }
        if (!a(Activity.class, "onPause")) {
          throw new SecurityException("onPause(Context context)不在Activity.onPause()中被调用||onPause(Context context)is not called in Activity.onPause().");
        }
      }
      finally {}
      o.b().b(paramContext, System.currentTimeMillis());
    }
  }
  
  private static void c(Context paramContext)
  {
    if (!a(paramContext, "onError(...)")) {
      return;
    }
    af.a().a(paramContext.getApplicationContext());
    i.a().a(true, paramContext.getApplicationContext());
  }
  
  private static void d(Context paramContext)
  {
    if (!h.a().b()) {
      h.a().a(paramContext.getApplicationContext());
    }
  }
}
