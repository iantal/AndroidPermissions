package com.upay.billing.utils;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.Process;
import android.util.Log;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayCore;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONObject;

public class h
  implements Thread.UncaughtExceptionHandler
{
  public static final String TAG = "UpayCrashHandler";
  private static h iv = new h();
  private Thread.UncaughtExceptionHandler iu;
  private String iw;
  private Map<String, String> ix = new HashMap();
  @SuppressLint({"SimpleDateFormat"})
  private DateFormat iy = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
  private Context mContext;
  
  private h() {}
  
  private boolean a(Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return false;
    }
    new i(this).start();
    a(this.mContext);
    b(paramThrowable);
    return true;
  }
  
  private String b(Throwable paramThrowable)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject1 = this.ix.entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (Map.Entry)((Iterator)localObject1).next();
      localObject2 = (String)((Map.Entry)localObject3).getKey();
      localObject3 = (String)((Map.Entry)localObject3).getValue();
      localStringBuffer.append((String)localObject2 + "=" + (String)localObject3 + "\n");
    }
    Object localObject2 = new StringWriter();
    Object localObject3 = new PrintWriter((Writer)localObject2);
    paramThrowable.printStackTrace((PrintWriter)localObject3);
    localObject1 = paramThrowable.getCause();
    String str = paramThrowable.getMessage();
    for (paramThrowable = (Throwable)localObject1; paramThrowable != null; paramThrowable = paramThrowable.getCause()) {
      paramThrowable.printStackTrace((PrintWriter)localObject3);
    }
    ((PrintWriter)localObject3).close();
    paramThrowable = localObject2.toString();
    localStringBuffer.append(paramThrowable);
    UpayCore.getInstance(this.mContext).logEvent(this.iw, "exception_info", Json.createObject(new Object[] { "message", str, "version", this.ix.get("version"), "ts", Util.getUnixTime(), "stack_trace", paramThrowable, "model", this.ix.get("model"), "package_name", this.ix.get("packageName"), "net", this.ix.get("net") }).asObject().toString());
    try
    {
      paramThrowable = this.iy.format(new Date());
      paramThrowable = "crash-" + paramThrowable + ".log";
      if (Environment.getExternalStorageState().equals("mounted"))
      {
        localObject1 = UpayConstant.SAVE_APP_PATH + "crash/";
        localObject2 = new File((String)localObject1);
        if (!((File)localObject2).exists()) {
          ((File)localObject2).mkdirs();
        }
        localObject1 = new FileOutputStream((String)localObject1 + paramThrowable);
        ((FileOutputStream)localObject1).write(localStringBuffer.toString().getBytes());
        ((FileOutputStream)localObject1).close();
      }
      return paramThrowable;
    }
    catch (Exception paramThrowable)
    {
      Log.i("UpayCrashHandler", "an error occured while writing file...", paramThrowable);
    }
    return null;
  }
  
  public static h e()
  {
    return iv;
  }
  
  public void a(Context paramContext)
  {
    try
    {
      PackageInfo localPackageInfo = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 1);
      if (localPackageInfo != null) {
        this.ix.put("packageName", localPackageInfo.packageName);
      }
      this.ix.put("model", Util.ifEmpty(Build.MODEL, "unknown"));
      this.ix.put("version", "android " + Build.VERSION.RELEASE + " sdk=" + Build.VERSION.SDK_INT);
      this.ix.put("net", Util.getNetType(paramContext));
      return;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      Log.i("UpayCrashHandler", "an error occured when collect package info", paramContext);
    }
  }
  
  public void a(Context paramContext, String paramString)
  {
    this.mContext = paramContext;
    this.iw = paramString;
    this.iu = Thread.getDefaultUncaughtExceptionHandler();
    Thread.setDefaultUncaughtExceptionHandler(this);
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    if ((!a(paramThrowable)) && (this.iu != null))
    {
      this.iu.uncaughtException(paramThread, paramThrowable);
      return;
    }
    try
    {
      Thread.sleep(3000L);
      Process.killProcess(Process.myPid());
      System.exit(1);
      return;
    }
    catch (InterruptedException paramThread)
    {
      for (;;)
      {
        Log.i("UpayCrashHandler", "error : ", paramThread);
      }
    }
  }
}
