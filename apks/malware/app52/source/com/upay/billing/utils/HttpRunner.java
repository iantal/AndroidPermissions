package com.upay.billing.utils;

import android.annotation.SuppressLint;
import android.util.Log;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HttpRunner
  implements Runnable
{
  private static final String TAG = "HttpRunner";
  private int connectTimeout = 0;
  private HashMap<String, String> headers;
  private String method = "GET";
  private HashMap<String, String> params;
  private byte[] postData = null;
  private int readTimeout = 0;
  private int retry = 0;
  private String url;
  
  public HttpRunner(String paramString)
  {
    this.url = paramString;
    this.params = new HashMap();
    this.headers = null;
  }
  
  public HttpRunner addHeader(String paramString1, String paramString2)
  {
    this.headers = Util.safePut(this.headers, paramString1, paramString2);
    return this;
  }
  
  public HttpRunner addParam(String paramString1, String paramString2)
  {
    return addParam(paramString1, paramString2, true);
  }
  
  public HttpRunner addParam(String paramString1, String paramString2, boolean paramBoolean)
  {
    if (this.postData != null) {
      throw new IllegalStateException("post data is not null");
    }
    try
    {
      HashMap localHashMap = this.params;
      String str;
      if (paramString2 == null) {
        str = "";
      }
      for (;;)
      {
        localHashMap.put(paramString1, str);
        return this;
        str = paramString2;
        if (paramBoolean) {
          str = URLEncoder.encode(paramString2, "UTF-8");
        }
      }
      return this;
    }
    catch (UnsupportedEncodingException paramString1) {}
  }
  
  public HttpRunner addParams(Map<String, String> paramMap, boolean paramBoolean)
  {
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      addParam((String)localEntry.getKey(), (String)localEntry.getValue(), paramBoolean);
    }
    return this;
  }
  
  public String getUrl()
  {
    return this.url;
  }
  
  protected void onFailed(int paramInt, String paramString) {}
  
  protected void onSuccess(byte[] paramArrayOfByte) {}
  
  @SuppressLint({"DefaultLocale"})
  public void run()
  {
    int j = 0;
    boolean bool = "GET".equals(this.method);
    Object localObject1;
    Object localObject3;
    String str;
    label155:
    Object localObject4;
    if ((this.params != null) && (this.params.size() > 0))
    {
      localObject1 = new StringBuffer();
      Iterator localIterator = this.params.entrySet().iterator();
      while (localIterator.hasNext())
      {
        localObject3 = (Map.Entry)localIterator.next();
        ((StringBuffer)localObject1).append((String)((Map.Entry)localObject3).getKey()).append('=').append((String)((Map.Entry)localObject3).getValue()).append('&');
      }
      str = ((StringBuffer)localObject1).substring(0, ((StringBuffer)localObject1).length() - 1);
      if (this.url.indexOf('?') > 0) {
        j = 1;
      }
      localObject3 = null;
      localObject1 = null;
      localIterator = null;
      if ((bool) && (str != null)) {}
      for (;;)
      {
        try
        {
          localObject4 = new StringBuilder().append(this.url);
          if (j == 0) {
            continue;
          }
          c = '&';
          localObject4 = c + str;
          localURL = new URL((String)localObject4);
          localObject3 = localObject1;
          try
          {
            localHttpURLConnection = (HttpURLConnection)localURL.openConnection();
            localObject3 = localObject1;
            localHttpURLConnection.setRequestMethod(this.method);
            localObject3 = localObject1;
            localHttpURLConnection.setConnectTimeout(this.connectTimeout);
            localObject3 = localObject1;
            localHttpURLConnection.setReadTimeout(this.readTimeout);
            localObject3 = localObject1;
            if (this.headers == null) {
              continue;
            }
            localObject3 = localObject1;
            localObject4 = this.headers.entrySet().iterator();
            localObject3 = localObject1;
            if (!((Iterator)localObject4).hasNext()) {
              continue;
            }
            localObject3 = localObject1;
            localObject5 = (Map.Entry)((Iterator)localObject4).next();
            localObject3 = localObject1;
            localHttpURLConnection.setRequestProperty((String)((Map.Entry)localObject5).getKey(), (String)((Map.Entry)localObject5).getValue());
            continue;
            Log.e("HttpRunner", "url=" + localObject3 + ",ex=" + localException1);
          }
          catch (Exception localException1)
          {
            localObject1 = localObject3;
            localObject3 = localURL;
          }
        }
        catch (Exception localException2)
        {
          char c;
          URL localURL;
          HttpURLConnection localHttpURLConnection;
          Object localObject5;
          Object localObject2;
          int i;
          label449:
          int k;
          label468:
          continue;
        }
        localObject4 = localException1.toString() + ",msg=" + localException1.getMessage();
        localException1.printStackTrace();
        localObject2 = localObject4;
        i = -1;
        k = this.retry;
        this.retry = (k - 1);
        if (k > 0) {
          break label702;
        }
        if (i != 200) {
          continue;
        }
        onSuccess((byte[])localObject1);
        return;
        c = '?';
        continue;
        localObject4 = this.url;
      }
      if (!bool)
      {
        localObject3 = localObject1;
        if (this.postData == null) {
          break label652;
        }
        localObject3 = localObject1;
        localObject4 = this.postData;
      }
    }
    for (;;)
    {
      if (localObject4 != null)
      {
        localObject3 = localObject1;
        localHttpURLConnection.setRequestProperty("Content-Length", Integer.toString(localObject4.length));
      }
      localObject3 = localObject1;
      localHttpURLConnection.setDoInput(true);
      localObject3 = localObject1;
      localHttpURLConnection.setDoOutput(true);
      if (localObject4 != null)
      {
        localObject3 = localObject1;
        localObject5 = localHttpURLConnection.getOutputStream();
        localObject3 = localObject1;
        ((OutputStream)localObject5).write((byte[])localObject4);
        localObject3 = localObject1;
        ((OutputStream)localObject5).flush();
      }
      localObject3 = localObject1;
      i = localHttpURLConnection.getResponseCode();
      if (i == 200)
      {
        localObject3 = localObject1;
        localObject4 = localHttpURLConnection.getInputStream();
        localObject3 = localObject1;
        localObject1 = Util.readStream((InputStream)localObject4);
        localObject3 = localObject1;
        ((InputStream)localObject4).close();
        break label468;
        label652:
        if (str == null) {
          break label711;
        }
        localObject3 = localObject1;
        localObject4 = Util.stringToBytes(str);
        continue;
      }
      localObject3 = localObject1;
      localObject2 = localHttpURLConnection.getResponseMessage();
      localObject3 = localURL;
      break label449;
      onFailed(i, (String)localObject2);
      return;
      label702:
      break label155;
      str = null;
      break;
      label711:
      localObject4 = null;
    }
  }
  
  public HttpRunner setConnectTimeout(int paramInt)
  {
    this.connectTimeout = paramInt;
    return this;
  }
  
  public HttpRunner setDoGet()
  {
    if (this.postData != null) {
      throw new IllegalStateException("post data is not null, only POST is available");
    }
    this.method = "GET";
    return this;
  }
  
  public HttpRunner setDoPost()
  {
    this.method = "POST";
    return this;
  }
  
  public HttpRunner setPostData(byte[] paramArrayOfByte)
  {
    if (this.params.size() > 0) {
      throw new IllegalStateException("param map is not empty");
    }
    setDoPost();
    this.postData = paramArrayOfByte;
    return this;
  }
  
  public HttpRunner setReadTimeout(int paramInt)
  {
    this.readTimeout = paramInt;
    return this;
  }
  
  public HttpRunner setRetry(int paramInt)
  {
    this.retry = paramInt;
    return this;
  }
}
