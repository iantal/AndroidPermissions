package com.a.a.a.a.a.a;

import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

final class a
  implements Closeable
{
  static final Pattern a = Pattern.compile("[a-z0-9_-]{1,64}");
  private static final OutputStream r = new c();
  final ThreadPoolExecutor b = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue());
  private final File c;
  private final File d;
  private final File e;
  private final File f;
  private final int g;
  private long h;
  private int i;
  private final int j;
  private long k = 0L;
  private int l = 0;
  private Writer m;
  private final LinkedHashMap<String, f> n = new LinkedHashMap(0, 0.75F, true);
  private int o;
  private long p = 0L;
  private final Callable<Void> q = new b(this);
  
  private a(File paramFile, int paramInt1, int paramInt2, long paramLong, int paramInt3)
  {
    this.c = paramFile;
    this.g = paramInt1;
    this.d = new File(paramFile, "journal");
    this.e = new File(paramFile, "journal.tmp");
    this.f = new File(paramFile, "journal.bkp");
    this.j = paramInt2;
    this.h = paramLong;
    this.i = paramInt3;
  }
  
  public static a a(File paramFile, int paramInt1, int paramInt2, long paramLong, int paramInt3)
  {
    if (paramLong <= 0L) {
      throw new IllegalArgumentException("maxSize <= 0");
    }
    if (paramInt3 <= 0) {
      throw new IllegalArgumentException("maxFileCount <= 0");
    }
    if (paramInt2 <= 0) {
      throw new IllegalArgumentException("valueCount <= 0");
    }
    Object localObject = new File(paramFile, "journal.bkp");
    File localFile;
    if (((File)localObject).exists())
    {
      localFile = new File(paramFile, "journal");
      if (!localFile.exists()) {
        break label165;
      }
      ((File)localObject).delete();
    }
    for (;;)
    {
      localObject = new a(paramFile, paramInt1, paramInt2, paramLong, paramInt3);
      if (!((a)localObject).d.exists()) {
        break label226;
      }
      try
      {
        ((a)localObject).c();
        ((a)localObject).d();
        ((a)localObject).m = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(((a)localObject).d, true), k.a));
        return localObject;
      }
      catch (IOException localIOException)
      {
        label165:
        System.out.println("DiskLruCache " + paramFile + " is corrupt: " + localIOException.getMessage() + ", removing");
        ((a)localObject).a();
      }
      a((File)localObject, localFile, false);
    }
    label226:
    paramFile.mkdirs();
    paramFile = new a(paramFile, paramInt1, paramInt2, paramLong, paramInt3);
    paramFile.e();
    return paramFile;
  }
  
  private d a(String paramString, long paramLong)
  {
    for (;;)
    {
      d localD;
      try
      {
        g();
        e(paramString);
        f localF = (f)this.n.get(paramString);
        if (paramLong != -1L) {
          if (localF != null)
          {
            long l1 = f.e(localF);
            if (l1 == paramLong) {}
          }
          else
          {
            paramString = null;
            return paramString;
          }
        }
        if (localF == null)
        {
          localF = new f(this, paramString, null);
          this.n.put(paramString, localF);
          localD = new d(this, localF, null);
          f.a(localF, localD);
          this.m.write("DIRTY " + paramString + '\n');
          this.m.flush();
          paramString = localD;
          continue;
        }
        localD = f.a(localF);
      }
      finally {}
      if (localD != null) {
        paramString = null;
      }
    }
  }
  
  private void a(d paramD, boolean paramBoolean)
  {
    int i3 = 0;
    f localF;
    try
    {
      localF = d.a(paramD);
      if (f.a(localF) != paramD) {
        throw new IllegalStateException();
      }
    }
    finally {}
    int i2 = i3;
    if (paramBoolean)
    {
      i2 = i3;
      if (!f.d(localF))
      {
        int i1 = 0;
        for (;;)
        {
          i2 = i3;
          if (i1 >= this.j) {
            break;
          }
          if (d.b(paramD)[i1] == 0)
          {
            paramD.b();
            throw new IllegalStateException("Newly created entry didn't create value for index " + i1);
          }
          if (!localF.b(i1).exists())
          {
            paramD.b();
            return;
          }
          i1 += 1;
        }
      }
    }
    for (;;)
    {
      long l1;
      if (i2 < this.j)
      {
        paramD = localF.b(i2);
        if (paramBoolean)
        {
          if (paramD.exists())
          {
            File localFile = localF.a(i2);
            paramD.renameTo(localFile);
            l1 = f.b(localF)[i2];
            long l2 = localFile.length();
            f.b(localF)[i2] = l2;
            this.k = (this.k - l1 + l2);
            this.l += 1;
          }
        }
        else {
          a(paramD);
        }
      }
      else
      {
        this.o += 1;
        f.a(localF, null);
        if ((f.d(localF) | paramBoolean))
        {
          f.a(localF, true);
          this.m.write("CLEAN " + f.c(localF) + localF.a() + '\n');
          if (paramBoolean)
          {
            l1 = this.p;
            this.p = (1L + l1);
            f.a(localF, l1);
          }
        }
        for (;;)
        {
          this.m.flush();
          if ((this.k <= this.h) && (this.l <= this.i) && (!f())) {
            break;
          }
          this.b.submit(this.q);
          break;
          this.n.remove(f.c(localF));
          this.m.write("REMOVE " + f.c(localF) + '\n');
        }
      }
      i2 += 1;
    }
  }
  
  private static void a(File paramFile)
  {
    if ((paramFile.exists()) && (!paramFile.delete())) {
      throw new IOException();
    }
  }
  
  private static void a(File paramFile1, File paramFile2, boolean paramBoolean)
  {
    if (paramBoolean) {
      a(paramFile2);
    }
    if (!paramFile1.renameTo(paramFile2)) {
      throw new IOException();
    }
  }
  
  private void c()
  {
    i localI = new i(new FileInputStream(this.d), k.a);
    int i1;
    try
    {
      String str1 = localI.a();
      String str2 = localI.a();
      String str3 = localI.a();
      String str4 = localI.a();
      String str5 = localI.a();
      if ((!"libcore.io.DiskLruCache".equals(str1)) || (!"1".equals(str2)) || (!Integer.toString(this.g).equals(str3)) || (!Integer.toString(this.j).equals(str4)) || (!"".equals(str5))) {
        throw new IOException("unexpected journal header: [" + str1 + ", " + str2 + ", " + str4 + ", " + str5 + "]");
      }
    }
    finally
    {
      k.a(localI);
      throw localObject;
    }
  }
  
  private void d()
  {
    a(this.e);
    Iterator localIterator = this.n.values().iterator();
    while (localIterator.hasNext())
    {
      f localF = (f)localIterator.next();
      int i1;
      if (f.a(localF) == null)
      {
        i1 = 0;
        while (i1 < this.j)
        {
          this.k += f.b(localF)[i1];
          this.l += 1;
          i1 += 1;
        }
      }
      else
      {
        f.a(localF, null);
        i1 = 0;
        while (i1 < this.j)
        {
          a(localF.a(i1));
          a(localF.b(i1));
          i1 += 1;
        }
        localIterator.remove();
      }
    }
  }
  
  private void d(String paramString)
  {
    int i1 = paramString.indexOf(' ');
    if (i1 == -1) {
      throw new IOException("unexpected journal line: " + paramString);
    }
    int i2 = i1 + 1;
    int i3 = paramString.indexOf(' ', i2);
    String str;
    if (i3 == -1)
    {
      str = paramString.substring(i2);
      if ((i1 == "REMOVE".length()) && (paramString.startsWith("REMOVE"))) {
        this.n.remove(str);
      }
    }
    else
    {
      str = paramString.substring(i2, i3);
    }
    for (;;)
    {
      f localF2 = (f)this.n.get(str);
      f localF1 = localF2;
      if (localF2 == null)
      {
        localF1 = new f(this, str, null);
        this.n.put(str, localF1);
      }
      if ((i3 != -1) && (i1 == "CLEAN".length()) && (paramString.startsWith("CLEAN")))
      {
        paramString = paramString.substring(i3 + 1).split(" ");
        f.a(localF1, true);
        f.a(localF1, null);
        f.a(localF1, paramString);
        return;
      }
      if ((i3 == -1) && (i1 == "DIRTY".length()) && (paramString.startsWith("DIRTY")))
      {
        f.a(localF1, new d(this, localF1, null));
        return;
      }
      if ((i3 == -1) && (i1 == "READ".length()) && (paramString.startsWith("READ"))) {
        break;
      }
      throw new IOException("unexpected journal line: " + paramString);
    }
  }
  
  private void e()
  {
    for (;;)
    {
      try
      {
        if (this.m != null) {
          this.m.close();
        }
        BufferedWriter localBufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.e), k.a));
        f localF;
        try
        {
          localBufferedWriter.write("libcore.io.DiskLruCache");
          localBufferedWriter.write("\n");
          localBufferedWriter.write("1");
          localBufferedWriter.write("\n");
          localBufferedWriter.write(Integer.toString(this.g));
          localBufferedWriter.write("\n");
          localBufferedWriter.write(Integer.toString(this.j));
          localBufferedWriter.write("\n");
          localBufferedWriter.write("\n");
          Iterator localIterator = this.n.values().iterator();
          if (!localIterator.hasNext()) {
            break;
          }
          localF = (f)localIterator.next();
          if (f.a(localF) != null)
          {
            localBufferedWriter.write("DIRTY " + f.c(localF) + '\n');
            continue;
            localObject1 = finally;
          }
        }
        finally
        {
          localBufferedWriter.close();
        }
        localObject1.write("CLEAN " + f.c(localF) + localF.a() + '\n');
      }
      finally {}
    }
    localObject1.close();
    if (this.d.exists()) {
      a(this.d, this.f, true);
    }
    a(this.e, this.d, false);
    this.f.delete();
    this.m = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.d, true), k.a));
  }
  
  private void e(String paramString)
  {
    if (!a.matcher(paramString).matches()) {
      throw new IllegalArgumentException("keys must match regex [a-z0-9_-]{1,64}: \"" + paramString + "\"");
    }
  }
  
  private boolean f()
  {
    return (this.o >= 2000) && (this.o >= this.n.size());
  }
  
  private void g()
  {
    if (this.m == null) {
      throw new IllegalStateException("cache is closed");
    }
  }
  
  private void h()
  {
    while (this.k > this.h) {
      c((String)((Map.Entry)this.n.entrySet().iterator().next()).getKey());
    }
  }
  
  private void i()
  {
    while (this.l > this.i) {
      c((String)((Map.Entry)this.n.entrySet().iterator().next()).getKey());
    }
  }
  
  public g a(String paramString)
  {
    label232:
    for (;;)
    {
      try
      {
        g();
        e(paramString);
        f localF = (f)this.n.get(paramString);
        if (localF == null)
        {
          paramString = null;
          return paramString;
        }
        if (!f.d(localF))
        {
          paramString = null;
        }
        else
        {
          File[] arrayOfFile = new File[this.j];
          InputStream[] arrayOfInputStream = new InputStream[this.j];
          int i1 = 0;
          try
          {
            if (i1 >= this.j) {
              continue;
            }
            File localFile = localF.a(i1);
            arrayOfFile[i1] = localFile;
            arrayOfInputStream[i1] = new FileInputStream(localFile);
            i1 += 1;
            continue;
            if (arrayOfInputStream[i1] == null) {
              break label232;
            }
          }
          catch (FileNotFoundException paramString)
          {
            i1 = 0;
            if (i1 >= this.j) {
              break label232;
            }
          }
          k.a(arrayOfInputStream[i1]);
          i1 += 1;
          continue;
          this.o += 1;
          this.m.append("READ " + paramString + '\n');
          if (f()) {
            this.b.submit(this.q);
          }
          paramString = new g(this, paramString, f.e(localF), arrayOfFile, arrayOfInputStream, f.b(localF), null);
          continue;
          paramString = null;
        }
      }
      finally {}
    }
  }
  
  public void a()
  {
    close();
    k.a(this.c);
  }
  
  public d b(String paramString)
  {
    return a(paramString, -1L);
  }
  
  public boolean c(String paramString)
  {
    int i1 = 0;
    for (;;)
    {
      try
      {
        g();
        e(paramString);
        f localF = (f)this.n.get(paramString);
        Object localObject;
        if (localF != null)
        {
          localObject = f.a(localF);
          if (localObject == null) {}
        }
        else
        {
          bool = false;
          return bool;
          this.k -= f.b(localF)[i1];
          this.l -= 1;
          f.b(localF)[i1] = 0L;
          i1 += 1;
        }
        if (i1 < this.j)
        {
          localObject = localF.a(i1);
          if ((!((File)localObject).exists()) || (((File)localObject).delete())) {
            continue;
          }
          throw new IOException("failed to delete " + localObject);
        }
      }
      finally {}
      this.o += 1;
      this.m.append("REMOVE " + paramString + '\n');
      this.n.remove(paramString);
      if (f()) {
        this.b.submit(this.q);
      }
      boolean bool = true;
    }
  }
  
  public void close()
  {
    for (;;)
    {
      try
      {
        Object localObject1 = this.m;
        if (localObject1 == null) {
          return;
        }
        localObject1 = new ArrayList(this.n.values()).iterator();
        if (((Iterator)localObject1).hasNext())
        {
          f localF = (f)((Iterator)localObject1).next();
          if (f.a(localF) == null) {
            continue;
          }
          f.a(localF).b();
          continue;
        }
        h();
      }
      finally {}
      i();
      this.m.close();
      this.m = null;
    }
  }
}
