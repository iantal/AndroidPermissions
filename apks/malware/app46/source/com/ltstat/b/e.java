package com.ltstat.b;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URL;

public final class e
{
  public static String a(String paramString1, String paramString2, String paramString3)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject1;
    try
    {
      paramString1 = (HttpURLConnection)new URL(paramString1).openConnection();
      paramString1.setRequestMethod("POST");
      paramString1.setConnectTimeout(10000);
      paramString1.setReadTimeout(15000);
      paramString1.setDoOutput(true);
      paramString1.setDoInput(true);
      paramString1.connect();
      Object localObject2;
      if ((paramString2 != null) && (!"".equals(paramString2)))
      {
        localObject1 = paramString1.getOutputStream();
        localObject2 = new OutputStreamWriter((OutputStream)localObject1, paramString3);
        BufferedWriter localBufferedWriter = new BufferedWriter((Writer)localObject2);
        localBufferedWriter.write(paramString2);
        localBufferedWriter.flush();
        localBufferedWriter.close();
        ((OutputStreamWriter)localObject2).close();
        ((OutputStream)localObject1).close();
      }
      if (paramString1.getResponseCode() == 200)
      {
        paramString2 = paramString1.getInputStream();
        paramString3 = new InputStreamReader(paramString2, paramString3);
        localObject1 = new BufferedReader(paramString3);
        for (;;)
        {
          localObject2 = ((BufferedReader)localObject1).readLine();
          if (localObject2 == null) {
            break;
          }
          localStringBuffer.append((String)localObject2).append(System.getProperty("line.separator"));
        }
        return localStringBuffer.toString().trim();
      }
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    for (;;)
    {
      ((BufferedReader)localObject1).close();
      paramString3.close();
      paramString2.close();
      paramString1.disconnect();
    }
  }
  
  public static boolean a(Context paramContext)
  {
    Object localObject = (ConnectivityManager)paramContext.getSystemService("connectivity");
    boolean bool1;
    if (localObject != null)
    {
      localObject = ((ConnectivityManager)localObject).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()) && (NetworkInfo.State.CONNECTED == ((NetworkInfo)localObject).getState())) {
        bool1 = true;
      }
    }
    for (;;)
    {
      return bool1;
      try
      {
        localObject = new g(paramContext, "stat");
        ((g)localObject).a();
        boolean bool2 = ((g)localObject).c();
        bool1 = bool2;
        if (!bool2)
        {
          ((g)localObject).b();
          return bool2;
        }
      }
      catch (Throwable localThrowable)
      {
        localThrowable.printStackTrace();
        new g(paramContext, "stat").b();
      }
    }
    return false;
  }
}
