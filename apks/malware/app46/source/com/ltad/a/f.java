package com.ltad.a;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.preference.PreferenceManager;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import org.apache.http.message.BasicNameValuePair;

public class f
{
  private static f a = null;
  private static HashMap i = new HashMap();
  private boolean b = false;
  private Context c = null;
  private boolean d = false;
  private String e = "";
  private String f = "";
  private Map g = null;
  private List h = null;
  
  private f(Context paramContext)
  {
    this.c = paramContext;
    String str = c();
    if (str.equals(""))
    {
      this.d = false;
      return;
    }
    this.d = true;
    if (this.b) {}
    for (;;)
    {
      try
      {
        paramContext = a(e.a(paramContext.getAssets().open(str)));
        this.h = a(paramContext);
        this.e = paramContext.getProperty(new String(new byte[] { 103, 97, 109, 101, 73, 100 }), "");
        this.f = paramContext.getProperty(new String(new byte[] { 99, 104, 97, 110, 110, 101, 108, 73, 100 }), "");
        this.g = b(paramContext);
        return;
      }
      catch (IOException paramContext)
      {
        throw new RuntimeException();
      }
      paramContext = a(str, paramContext);
    }
  }
  
  public static f a(Context paramContext)
  {
    if (a == null) {
      a = new f(paramContext);
    }
    if (a.c == null) {
      a.c = paramContext;
    }
    return a;
  }
  
  public static List a(Properties paramProperties)
  {
    ArrayList localArrayList = new ArrayList();
    paramProperties = paramProperties.entrySet().iterator();
    for (;;)
    {
      if (!paramProperties.hasNext()) {
        return localArrayList;
      }
      Map.Entry localEntry = (Map.Entry)paramProperties.next();
      localArrayList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
  }
  
  public static Properties a(String paramString, Context paramContext)
  {
    Properties localProperties = new Properties();
    try
    {
      paramString = paramContext.getAssets().open(paramString);
      localProperties.load(paramString);
      paramString.close();
      return localProperties;
    }
    catch (IOException paramString)
    {
      return localProperties;
    }
    catch (FileNotFoundException paramString) {}
    return localProperties;
  }
  
  public static Properties a(byte[] paramArrayOfByte)
  {
    Properties localProperties = new Properties();
    try
    {
      paramArrayOfByte = new ByteArrayInputStream(paramArrayOfByte);
      localProperties.load(paramArrayOfByte);
      paramArrayOfByte.close();
      return localProperties;
    }
    catch (Exception paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
    return localProperties;
  }
  
  public static boolean a(Context paramContext, String paramString)
  {
    boolean bool = false;
    if (i.containsKey(paramString)) {
      return ((Boolean)i.get(paramString)).booleanValue();
    }
    try
    {
      paramContext.getAssets().open(paramString);
      bool = true;
    }
    catch (IOException paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
    catch (FileNotFoundException paramContext)
    {
      for (;;) {}
    }
    i.put(paramString, Boolean.valueOf(bool));
    return bool;
  }
  
  public static int b(Context paramContext)
  {
    try
    {
      int j = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).versionCode;
      return j;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  private Map b(Properties paramProperties)
  {
    paramProperties = new HashMap(paramProperties);
    paramProperties.remove(this.e);
    paramProperties.remove(this.f);
    return paramProperties;
  }
  
  private String c()
  {
    byte[] arrayOfByte1 = new byte[7];
    byte[] tmp6_5 = arrayOfByte1;
    tmp6_5[0] = 99;
    byte[] tmp11_6 = tmp6_5;
    tmp11_6[1] = 104;
    byte[] tmp16_11 = tmp11_6;
    tmp16_11[2] = 97;
    byte[] tmp21_16 = tmp16_11;
    tmp21_16[3] = 46;
    byte[] tmp26_21 = tmp21_16;
    tmp26_21[4] = 112;
    byte[] tmp31_26 = tmp26_21;
    tmp31_26[5] = 114;
    byte[] tmp36_31 = tmp31_26;
    tmp36_31[6] = 111;
    tmp36_31;
    byte[] arrayOfByte2 = new byte[7];
    byte[] tmp49_48 = arrayOfByte2;
    tmp49_48[0] = 99;
    byte[] tmp54_49 = tmp49_48;
    tmp54_49[1] = 104;
    byte[] tmp59_54 = tmp54_49;
    tmp59_54[2] = 97;
    byte[] tmp64_59 = tmp59_54;
    tmp64_59[3] = 46;
    byte[] tmp69_64 = tmp64_59;
    tmp69_64[4] = 99;
    byte[] tmp74_69 = tmp69_64;
    tmp74_69[5] = 104;
    byte[] tmp79_74 = tmp74_69;
    tmp79_74[6] = 103;
    tmp79_74;
    byte[] arrayOfByte3 = new byte[7];
    byte[] tmp92_91 = arrayOfByte3;
    tmp92_91[0] = 99;
    byte[] tmp97_92 = tmp92_91;
    tmp97_92[1] = 104;
    byte[] tmp102_97 = tmp97_92;
    tmp102_97[2] = 97;
    byte[] tmp107_102 = tmp102_97;
    tmp107_102[3] = 46;
    byte[] tmp112_107 = tmp107_102;
    tmp112_107[4] = 116;
    byte[] tmp117_112 = tmp112_107;
    tmp117_112[5] = 120;
    byte[] tmp122_117 = tmp117_112;
    tmp122_117[6] = 116;
    tmp122_117;
    new StringBuilder(String.valueOf(new String(new byte[] { 99, 104, 97, 46, 112, 110, 103 }).hashCode())).toString();
    String str = d(this.c);
    if (!str.equals(""))
    {
      this.b = true;
      return str;
    }
    if (a(this.c, new String(arrayOfByte2))) {
      return new String(arrayOfByte2);
    }
    if (a(this.c, new String(arrayOfByte1))) {
      return new String(arrayOfByte1);
    }
    if (a(this.c, new String(arrayOfByte3))) {
      return new String(arrayOfByte3);
    }
    return "";
  }
  
  public static String c(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 0).versionName;
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      paramContext.printStackTrace();
    }
    return "none";
  }
  
  private String d(Context paramContext)
  {
    SharedPreferences localSharedPreferences = PreferenceManager.getDefaultSharedPreferences(paramContext);
    String str3 = new String(new byte[] { 99, 104, 97, 46, 112, 110, 103 });
    String str2 = localSharedPreferences.getString(str3, "");
    if ((str2.equals("")) || (d())) {}
    do
    {
      try
      {
        paramContext = paramContext.getAssets().list("");
        int j = 0;
        for (;;)
        {
          int k = paramContext.length;
          if (j >= k) {
            paramContext = "";
          }
          try
          {
            for (;;)
            {
              if (paramContext.equals(""))
              {
                localSharedPreferences.edit().putString(str3, "not").commit();
                Context localContext = paramContext;
                return localContext;
                if (paramContext[j].contains(str3.hashCode()))
                {
                  paramContext = paramContext[j];
                }
                else
                {
                  j += 1;
                  break;
                }
              }
            }
            localSharedPreferences.edit().putString(str3, paramContext).commit();
            return paramContext;
          }
          catch (IOException localIOException1) {}
        }
      }
      catch (IOException localIOException2)
      {
        for (;;)
        {
          String str1;
          paramContext = "";
        }
      }
      localIOException1.printStackTrace();
      return paramContext;
      if (str2.equals("not")) {
        break;
      }
      str1 = str2;
    } while (a(paramContext, str2));
    localSharedPreferences.edit().putString(str3, "").commit();
    return d(paramContext);
    return "";
  }
  
  private boolean d()
  {
    SharedPreferences localSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this.c);
    String str1 = localSharedPreferences.getString("curVersion", "");
    String str2 = b(this.c) + "_" + c(this.c);
    if (!str1.equals(str2))
    {
      localSharedPreferences.edit().putString("curVersion", str2).commit();
      return true;
    }
    return false;
  }
  
  public String a()
  {
    return this.e;
  }
  
  public String b()
  {
    return this.f;
  }
}
