package com.inmobi.signals;

import android.content.Context;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

public class n
{
  private static final String a = n.class.getSimpleName();
  private static n b;
  private static Object c = new Object();
  private static boolean d = false;
  private static LocationManager e;
  private static Object f = null;
  private static boolean g = false;
  
  private n()
  {
    e = (LocationManager)com.inmobi.commons.a.a.b().getSystemService("location");
  }
  
  public static n a()
  {
    Object localObject1 = b;
    if (localObject1 == null) {
      synchronized (c)
      {
        n localN2 = b;
        localObject1 = localN2;
        if (localN2 == null)
        {
          b = new n();
          localObject1 = b;
        }
        return localObject1;
      }
    }
    return localN1;
  }
  
  private String a(Location paramLocation)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramLocation.getLatitude());
    localStringBuilder.append(",");
    localStringBuilder.append(paramLocation.getLongitude());
    localStringBuilder.append(",");
    localStringBuilder.append((int)paramLocation.getAccuracy());
    return localStringBuilder.toString();
  }
  
  private HashMap a(Location paramLocation, boolean paramBoolean)
  {
    int j = 1;
    HashMap localHashMap = new HashMap();
    if (paramLocation != null)
    {
      if (paramLocation.getTime() > 0L) {
        localHashMap.put("u-ll-ts", Long.valueOf(paramLocation.getTime()));
      }
      localHashMap.put("u-latlong-accu", a(paramLocation));
      if (paramBoolean)
      {
        i = 1;
        localHashMap.put("sdk-collected", Integer.valueOf(i));
      }
    }
    else if (d)
    {
      if (!f()) {
        break label107;
      }
    }
    label107:
    for (int i = j;; i = 0)
    {
      localHashMap.put("loc-allowed", Integer.valueOf(i));
      return localHashMap;
      i = 0;
      break;
    }
  }
  
  private void a(Context paramContext)
  {
    if (f == null)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Connecting Google API client for location.");
      f = h.a(paramContext, new n.a(null), new n.a(null), "com.google.android.gms.location.LocationServices");
      h.a(f);
    }
  }
  
  private boolean f()
  {
    boolean bool3 = false;
    Context localContext = com.inmobi.commons.a.a.b();
    boolean bool2 = bool3;
    boolean bool1;
    if (e != null)
    {
      if (localContext.checkCallingOrSelfPermission("android.permission.ACCESS_FINE_LOCATION") != 0) {
        break label50;
      }
      bool1 = e.isProviderEnabled("gps");
      bool2 = false;
    }
    for (;;)
    {
      if (!bool2)
      {
        bool2 = bool3;
        if (!bool1) {}
      }
      else
      {
        bool2 = true;
      }
      return bool2;
      label50:
      if (localContext.checkCallingOrSelfPermission("android.permission.ACCESS_COARSE_LOCATION") == 0)
      {
        bool2 = e.isProviderEnabled("network");
        bool1 = false;
      }
      else
      {
        bool1 = false;
        bool2 = false;
      }
    }
  }
  
  private Location g()
  {
    boolean bool2 = true;
    Object localObject3 = com.inmobi.commons.a.a.b();
    String str = null;
    Object localObject1 = null;
    Object localObject2 = str;
    if (d)
    {
      localObject2 = str;
      if (f())
      {
        if (g)
        {
          localObject1 = h();
          localObject2 = Logger.InternalLogLevel.INTERNAL;
          str = a;
          StringBuilder localStringBuilder = new StringBuilder().append("Location info provided by Google Api client:");
          if (localObject1 == null) {
            break label250;
          }
          bool1 = true;
          Logger.a((Logger.InternalLogLevel)localObject2, str, bool1);
        }
        localObject2 = localObject1;
        if (localObject1 == null)
        {
          localObject2 = localObject1;
          if (e != null)
          {
            localObject2 = new Criteria();
            if (((Context)localObject3).checkCallingOrSelfPermission("android.permission.ACCESS_FINE_LOCATION") != 0) {
              break label255;
            }
            ((Criteria)localObject2).setAccuracy(1);
            label131:
            ((Criteria)localObject2).setCostAllowed(false);
            localObject2 = e.getBestProvider((Criteria)localObject2, true);
            if (localObject2 != null)
            {
              localObject2 = e.getLastKnownLocation((String)localObject2);
              localObject1 = localObject2;
              if (localObject2 == null) {
                localObject1 = i();
              }
            }
            localObject2 = Logger.InternalLogLevel.INTERNAL;
            str = a;
            localObject3 = new StringBuilder().append("Location info provided by Location manager:");
            if (localObject1 == null) {
              break label274;
            }
          }
        }
      }
    }
    label250:
    label255:
    label274:
    for (boolean bool1 = bool2;; bool1 = false)
    {
      Logger.a((Logger.InternalLogLevel)localObject2, str, bool1);
      localObject2 = localObject1;
      if (localObject2 == null) {
        com.inmobi.commons.core.c.a.a().a(new com.inmobi.commons.core.c.e("signals", "LocationFixFailed"));
      }
      return localObject2;
      bool1 = false;
      break;
      if (((Context)localObject3).checkCallingOrSelfPermission("android.permission.ACCESS_COARSE_LOCATION") != 0) {
        break label131;
      }
      ((Criteria)localObject2).setAccuracy(2);
      break label131;
    }
  }
  
  private Location h()
  {
    try
    {
      Object localObject = Class.forName("com.google.android.gms.location.LocationServices").getDeclaredField("FusedLocationApi");
      Class localClass = Class.forName("com.google.android.gms.common.api.GoogleApiClient");
      localObject = (Location)Class.forName("com.google.android.gms.location.FusedLocationProviderApi").getMethod("getLastLocation", new Class[] { localClass }).invoke(((Field)localObject).get(null), new Object[] { f });
      return localObject;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Unable to request activity updates from ActivityRecognition client", localInvocationTargetException);
      return null;
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Unable to request activity updates from ActivityRecognition client", localClassNotFoundException);
      return null;
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Unable to request activity updates from ActivityRecognition client", localIllegalAccessException);
      return null;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Unable to request activity updates from ActivityRecognition client", localNoSuchMethodException);
      return null;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Unable to request activity updates from ActivityRecognition client", localNoSuchFieldException);
    }
    return null;
  }
  
  private Location i()
  {
    Object localObject2 = null;
    List localList;
    int i;
    Object localObject1;
    if (e != null)
    {
      localList = e.getProviders(true);
      i = localList.size() - 1;
      localObject1 = null;
    }
    while (i >= 0)
    {
      localObject2 = (String)localList.get(i);
      if (e.isProviderEnabled((String)localObject2))
      {
        localObject2 = e.getLastKnownLocation((String)localObject2);
        localObject1 = localObject2;
        if (localObject2 != null) {
          return localObject2;
        }
      }
      i -= 1;
    }
    return localObject1;
  }
  
  public void a(boolean paramBoolean)
  {
    d = paramBoolean;
  }
  
  void b()
  {
    if ((d) && (h.a())) {
      a(com.inmobi.commons.a.a.b());
    }
  }
  
  public HashMap c()
  {
    try
    {
      HashMap localHashMap = a(g(), true);
      return localHashMap;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public HashMap d()
  {
    HashMap localHashMap2;
    for (;;)
    {
      try
      {
        localHashMap2 = new HashMap();
        Object localObject1 = g();
        if (localObject1 != null)
        {
          localObject1 = a((Location)localObject1, true);
          localObject1 = ((HashMap)localObject1).entrySet().iterator();
          if (!((Iterator)localObject1).hasNext()) {
            break;
          }
          Map.Entry localEntry = (Map.Entry)((Iterator)localObject1).next();
          localHashMap2.put(localEntry.getKey(), localEntry.getValue().toString());
          continue;
        }
        HashMap localHashMap1 = a(com.inmobi.commons.core.utilities.info.e.d(), false);
      }
      finally {}
    }
    return localHashMap2;
  }
}
