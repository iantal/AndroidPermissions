package com.inmobi.signals;

import com.inmobi.commons.core.configs.a;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import org.json.JSONException;
import org.json.JSONObject;

class q
  extends a
{
  private static final String a = a.class.getSimpleName();
  private q.b b = new q.b();
  private q.a c = new q.a();
  private JSONObject d;
  
  public q()
  {
    try
    {
      this.d = h();
      return;
    }
    catch (JSONException localJSONException)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Default telemetry config provided for ads is invalid.", localJSONException);
    }
  }
  
  private JSONObject h()
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("enabled", false);
    localJSONObject.put("samplingFactor", 0);
    localJSONObject.put("metricEnabled", false);
    return localJSONObject;
  }
  
  public String a()
  {
    return "signals";
  }
  
  public void a(JSONObject paramJSONObject)
  {
    super.a(paramJSONObject);
    JSONObject localJSONObject1 = paramJSONObject.getJSONObject("ice");
    q.b.a(this.b, localJSONObject1.getInt("sampleInterval"));
    q.b.b(this.b, localJSONObject1.getInt("sampleHistorySize"));
    q.b.c(this.b, localJSONObject1.getInt("stopRequestTimeout"));
    q.b.a(this.b, localJSONObject1.getBoolean("enabled"));
    q.b.a(this.b, localJSONObject1.getString("endPoint"));
    q.b.d(this.b, localJSONObject1.getInt("maxRetries"));
    q.b.e(this.b, localJSONObject1.getInt("retryInterval"));
    q.b.b(this.b, localJSONObject1.getBoolean("locationEnabled"));
    q.b.c(this.b, localJSONObject1.getBoolean("sessionEnabled"));
    JSONObject localJSONObject2 = localJSONObject1.getJSONObject("w");
    q.b.f(this.b, localJSONObject2.getInt("wf"));
    q.b.d(this.b, localJSONObject2.getBoolean("cwe"));
    q.b.e(this.b, localJSONObject2.getBoolean("vwe"));
    localJSONObject2 = localJSONObject1.getJSONObject("c");
    q.b.f(this.b, localJSONObject2.getBoolean("oe"));
    q.b.g(this.b, localJSONObject2.getBoolean("cce"));
    q.b.h(this.b, localJSONObject2.getBoolean("vce"));
    q.b.g(this.b, localJSONObject2.getInt("cof"));
    localJSONObject1 = localJSONObject1.getJSONObject("ar");
    q.b.i(this.b, localJSONObject1.getBoolean("e"));
    q.b.h(this.b, localJSONObject1.getInt("sampleInterval"));
    q.b.i(this.b, localJSONObject1.getInt("maxHistorySize"));
    localJSONObject1 = paramJSONObject.getJSONObject("carb");
    q.a.a(this.c, localJSONObject1.getBoolean("enabled"));
    q.a.a(this.c, localJSONObject1.getString("getEndPoint"));
    q.a.b(this.c, localJSONObject1.getString("postEndPoint"));
    q.a.a(this.c, localJSONObject1.getInt("retrieveFrequency"));
    q.a.b(this.c, localJSONObject1.getInt("maxRetries"));
    q.a.c(this.c, localJSONObject1.getInt("retryInterval"));
    q.a.d(this.c, localJSONObject1.getInt("timeoutInterval"));
    q.a.a(this.c, localJSONObject1.getLong("maxGetResponseSize"));
    this.d = paramJSONObject.optJSONObject("telemetry");
  }
  
  public JSONObject b()
  {
    JSONObject localJSONObject1 = super.b();
    JSONObject localJSONObject2 = new JSONObject();
    localJSONObject2.put("sampleInterval", q.b.a(this.b));
    localJSONObject2.put("stopRequestTimeout", q.b.b(this.b));
    localJSONObject2.put("sampleHistorySize", q.b.c(this.b));
    localJSONObject2.put("enabled", q.b.d(this.b));
    localJSONObject2.put("endPoint", q.b.e(this.b));
    localJSONObject2.put("maxRetries", q.b.f(this.b));
    localJSONObject2.put("retryInterval", q.b.g(this.b));
    localJSONObject2.put("locationEnabled", q.b.h(this.b));
    localJSONObject2.put("sessionEnabled", q.b.i(this.b));
    JSONObject localJSONObject3 = new JSONObject();
    localJSONObject3.put("wf", q.b.j(this.b));
    localJSONObject3.put("vwe", q.b.k(this.b));
    localJSONObject3.put("cwe", q.b.l(this.b));
    localJSONObject2.put("w", localJSONObject3);
    localJSONObject3 = new JSONObject();
    localJSONObject3.put("cof", q.b.m(this.b));
    localJSONObject3.put("vce", q.b.n(this.b));
    localJSONObject3.put("cce", q.b.o(this.b));
    localJSONObject3.put("oe", q.b.p(this.b));
    localJSONObject2.put("c", localJSONObject3);
    localJSONObject3 = new JSONObject();
    localJSONObject3.put("e", q.b.q(this.b));
    localJSONObject3.put("sampleInterval", q.b.r(this.b));
    localJSONObject3.put("maxHistorySize", q.b.s(this.b));
    localJSONObject2.put("ar", localJSONObject3);
    localJSONObject1.put("ice", localJSONObject2);
    localJSONObject2 = new JSONObject();
    localJSONObject2.put("enabled", q.a.a(this.c));
    localJSONObject2.put("getEndPoint", q.a.b(this.c));
    localJSONObject2.put("postEndPoint", q.a.c(this.c));
    localJSONObject2.put("retrieveFrequency", q.a.d(this.c));
    localJSONObject2.put("maxRetries", q.a.e(this.c));
    localJSONObject2.put("retryInterval", q.a.f(this.c));
    localJSONObject2.put("timeoutInterval", q.a.g(this.c));
    localJSONObject2.put("maxGetResponseSize", this.c.h());
    localJSONObject1.put("carb", localJSONObject2);
    localJSONObject1.put("telemetry", this.d);
    return localJSONObject1;
  }
  
  public boolean c()
  {
    if ((q.b.a(this.b) < 0) || (q.b.c(this.b) < 0) || (q.b.b(this.b) < 0) || (q.b.e(this.b).trim().length() == 0) || (q.b.f(this.b) < 0) || (q.b.g(this.b) < 0) || (this.b.j() < 0) || (this.b.m() < 0) || (q.b.s(this.b) < 0) || (q.b.r(this.b) < 0)) {}
    while ((q.a.b(this.c).trim().length() == 0) || (q.a.c(this.c).trim().length() == 0) || ((!q.a.b(this.c).startsWith("http://")) && (!q.a.b(this.c).startsWith("https://"))) || ((!q.a.c(this.c).startsWith("http://")) && (!q.a.c(this.c).startsWith("https://"))) || (q.a.d(this.c) < 0) || (q.a.e(this.c) < 0) || (q.a.f(this.c) < 0) || (q.a.g(this.c) < 0) || (q.a.h(this.c) < 0L)) {
      return false;
    }
    return true;
  }
  
  public a d()
  {
    return new q();
  }
  
  public JSONObject e()
  {
    return this.d;
  }
  
  public q.b f()
  {
    return this.b;
  }
  
  public q.a g()
  {
    return this.c;
  }
}
