package com.inmobi.ads;

import android.content.Context;
import android.os.SystemClock;
import android.util.Base64;
import android.view.ViewGroup;
import android.view.ViewParent;
import com.inmobi.commons.core.configs.a.a;
import com.inmobi.commons.core.configs.b.b;
import com.inmobi.commons.core.configs.f;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import com.inmobi.commons.core.utilities.uid.c;
import com.inmobi.rendering.RenderView;
import com.inmobi.rendering.RenderView.b;
import com.inmobi.rendering.RenderingProperties;
import com.inmobi.rendering.RenderingProperties.PlacementType;
import com.inmobi.signals.p;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

abstract class AdUnit
  implements g.a, b.b, RenderView.b
{
  private static final String a = AdUnit.class.getSimpleName();
  private AdUnit.AdState b;
  private Context c;
  private long d;
  private String e;
  private Map f;
  private b g;
  private String h;
  private String i;
  private AdUnit.a j;
  private RenderView k;
  private o l;
  private long m;
  private long n = 0L;
  
  public AdUnit(Context paramContext, long paramLong, AdUnit.a paramA)
  {
    this.c = paramContext;
    this.d = paramLong;
    this.j = paramA;
    v();
    a(AdUnit.AdState.STATE_CREATED);
  }
  
  private void v()
  {
    this.g = new b();
    com.inmobi.commons.core.configs.b.a().a(new f(), null);
    com.inmobi.commons.core.configs.b.a().a(this.g, this);
    this.l = new o(this);
    com.inmobi.commons.core.c.a.a().a(this.g.a(), this.g.m());
  }
  
  private h w()
  {
    h localH = new h();
    localH.b(this.e);
    localH.a(this.f);
    localH.a(this.d);
    localH.c(a());
    localH.a(k().a(a()));
    localH.b(e());
    localH.d(b());
    localH.a(this.g.e());
    localH.a(this.g.h());
    localH.e(c());
    localH.a(new com.inmobi.commons.core.utilities.uid.d(this.g.n().a()));
    return localH;
  }
  
  private void x()
  {
    s();
    this.l.sendEmptyMessageDelayed(0, k().j().i() * 1000);
  }
  
  protected abstract String a();
  
  protected void a(AdUnit.AdState paramAdState)
  {
    this.b = paramAdState;
  }
  
  public void a(InMobiAdRequestStatus paramInMobiAdRequestStatus)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Ad fetch failed. Status:" + paramInMobiAdRequestStatus.getStatusCode());
    a(paramInMobiAdRequestStatus, true);
    if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.INTERNAL_ERROR) {
      c("InternalError");
    }
  }
  
  protected void a(InMobiAdRequestStatus paramInMobiAdRequestStatus, boolean paramBoolean)
  {
    if ((g() == AdUnit.AdState.STATE_LOADING) && (paramBoolean)) {
      a(AdUnit.AdState.STATE_FAILED);
    }
    l().a(paramInMobiAdRequestStatus);
    if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.NO_FILL) {
      c("NoFill");
    }
    do
    {
      return;
      if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.SERVER_ERROR)
      {
        c("ServerError");
        return;
      }
      if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.NETWORK_UNREACHABLE)
      {
        c("NetworkUnreachable");
        return;
      }
      if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.AD_ACTIVE)
      {
        c("AdActive");
        return;
      }
      if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.REQUEST_PENDING)
      {
        c("RequestPending");
        return;
      }
      if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.REQUEST_INVALID)
      {
        c("RequestInvalid");
        return;
      }
      if (paramInMobiAdRequestStatus.getStatusCode() == InMobiAdRequestStatus.StatusCode.REQUEST_TIMED_OUT)
      {
        c("RequestTimedOut");
        return;
      }
    } while (paramInMobiAdRequestStatus.getStatusCode() != InMobiAdRequestStatus.StatusCode.EARLY_REFRESH_REQUEST);
    c("EarlyRefreshRequest");
  }
  
  public void a(a paramA)
  {
    if (g() == AdUnit.AdState.STATE_LOADING)
    {
      if (b(paramA))
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Ad fetch successful");
        a(AdUnit.AdState.STATE_AVAILABLE);
      }
    }
    else {
      return;
    }
    c("ParsingFailed");
    a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.INTERNAL_ERROR), true);
  }
  
  void a(h paramH)
  {
    this.m = System.currentTimeMillis();
    new g(paramH, this).a();
  }
  
  public void a(com.inmobi.commons.core.configs.a paramA)
  {
    this.g = ((b)paramA);
    com.inmobi.commons.core.c.a.a().a(this.g.a(), this.g.m());
  }
  
  public void a(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Render view signaled ad ready");
  }
  
  public void a(RenderView paramRenderView, HashMap paramHashMap)
  {
    Logger.InternalLogLevel localInternalLogLevel = Logger.InternalLogLevel.INTERNAL;
    String str = a;
    StringBuilder localStringBuilder = new StringBuilder().append("Ad reward action completed. Params:");
    if (paramHashMap == null) {}
    for (paramRenderView = null;; paramRenderView = paramHashMap.toString())
    {
      Logger.a(localInternalLogLevel, str, paramRenderView);
      l().b(paramHashMap);
      return;
    }
  }
  
  public void a(String paramString)
  {
    this.e = paramString;
  }
  
  public void a(Map paramMap)
  {
    this.f = paramMap;
  }
  
  protected String b()
  {
    return "json";
  }
  
  public void b(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Render view signaled ad failed");
    c("RenderFailed");
  }
  
  public void b(RenderView paramRenderView, HashMap paramHashMap)
  {
    Logger.InternalLogLevel localInternalLogLevel = Logger.InternalLogLevel.INTERNAL;
    String str = a;
    StringBuilder localStringBuilder = new StringBuilder().append("Ad interaction. Params:");
    if (paramHashMap == null) {}
    for (paramRenderView = null;; paramRenderView = paramHashMap.toString())
    {
      Logger.a(localInternalLogLevel, str, paramRenderView);
      l().a(paramHashMap);
      return;
    }
  }
  
  protected void b(String paramString)
  {
    this.n = SystemClock.elapsedRealtime();
    m().a(paramString);
    x();
  }
  
  public boolean b(a paramA)
  {
    boolean bool2 = false;
    try
    {
      JSONObject localJSONObject = new JSONObject(paramA.b());
      this.i = paramA.c();
      this.h = new String(Base64.decode(localJSONObject.getString("pubContent"), 0)).trim();
      boolean bool1 = bool2;
      if (this.h != null)
      {
        bool1 = bool2;
        if (this.h.trim().length() != 0)
        {
          this.h = this.h.replace("@__imm_aft@", String.valueOf(System.currentTimeMillis() - this.m));
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (JSONException paramA)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Exception while parsing received ad.", paramA);
      return false;
    }
    catch (IllegalArgumentException paramA)
    {
      Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Invalid Base64 encoding in received ad.", paramA);
    }
    return false;
  }
  
  protected abstract String c();
  
  public void c(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "RenderView completed loading ad content");
  }
  
  protected void c(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("impId", i());
    localHashMap.put("errorCode", paramString);
    localHashMap.put("type", a());
    if ((paramString != null) && ((paramString.trim().equalsIgnoreCase("RenderFailed")) || (paramString.trim().equalsIgnoreCase("RenderTimeOut")))) {
      localHashMap.put("renderLatency", Long.valueOf(SystemClock.elapsedRealtime() - this.n));
    }
    com.inmobi.commons.core.c.a.a().a("ads", "AdLoadFailed", localHashMap);
  }
  
  protected abstract RenderingProperties.PlacementType d();
  
  public void d(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Renderview visible");
  }
  
  protected void d(String paramString)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("impId", i());
    localHashMap.put("errorCode", paramString);
    localHashMap.put("type", a());
    com.inmobi.commons.core.c.a.a().a("ads", "AdShowFailed", localHashMap);
  }
  
  protected Map e()
  {
    return null;
  }
  
  public void e(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Ad displayed");
  }
  
  protected Context f()
  {
    return this.c;
  }
  
  public void f(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Ad dismissed");
  }
  
  public AdUnit.AdState g()
  {
    return this.b;
  }
  
  public void g(RenderView paramRenderView)
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "User left application");
    l().d();
  }
  
  protected String h()
  {
    return this.h;
  }
  
  protected String i()
  {
    return this.i;
  }
  
  protected void j()
  {
    this.h = null;
  }
  
  protected final b k()
  {
    return this.g;
  }
  
  protected final AdUnit.a l()
  {
    return this.j;
  }
  
  protected final RenderView m()
  {
    return this.k;
  }
  
  public void n()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", a());
    com.inmobi.commons.core.c.a.a().a("ads", "AdLoadRequested", localHashMap);
    if (!com.inmobi.commons.core.utilities.d.a())
    {
      a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.NETWORK_UNREACHABLE), true);
      return;
    }
    if ((this.b == AdUnit.AdState.STATE_LOADING) || (this.b == AdUnit.AdState.STATE_AVAILABLE))
    {
      a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.REQUEST_PENDING), false);
      Logger.a(Logger.InternalLogLevel.ERROR, a, "An ad load is already in progress. Please wait for the load to complete before requesting for another ad");
      return;
    }
    if (g() == AdUnit.AdState.STATE_ACTIVE)
    {
      a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.AD_ACTIVE), false);
      Logger.a(Logger.InternalLogLevel.ERROR, a, "An ad is currently being viewed by the user. Please wait for the user to close the ad before requesting for another ad");
      return;
    }
    r();
    this.b = AdUnit.AdState.STATE_LOADING;
    p.a().i();
    o();
    q();
    a(w());
  }
  
  protected void o()
  {
    this.k = new RenderView(f(), new RenderingProperties(d()));
    this.k.a(this, k().j(), k().k());
  }
  
  protected void p()
  {
    this.k.b("inmobi.recordEvent(120,null);");
  }
  
  void q()
  {
    c.a().e();
  }
  
  protected void r()
  {
    this.i = null;
    RenderView localRenderView = m();
    if (localRenderView != null)
    {
      ViewParent localViewParent = localRenderView.getParent();
      localRenderView.removeAllViews();
      if (localViewParent != null) {
        ((ViewGroup)localViewParent).removeView(localRenderView);
      }
      localRenderView.destroy();
    }
  }
  
  protected void s()
  {
    this.l.removeMessages(0);
  }
  
  protected void t()
  {
    Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Renderview timed out.");
    c("RenderTimeOut");
    if (g() == AdUnit.AdState.STATE_AVAILABLE)
    {
      a(AdUnit.AdState.STATE_FAILED);
      l().a(new InMobiAdRequestStatus(InMobiAdRequestStatus.StatusCode.INTERNAL_ERROR));
    }
  }
  
  protected void u()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("type", a());
    localHashMap.put("renderLatency", Long.valueOf(SystemClock.elapsedRealtime() - this.n));
    com.inmobi.commons.core.c.a.a().a("ads", "AdLoadSuccessful", localHashMap);
  }
}
