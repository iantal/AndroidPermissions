package com.inmobi.commons.core.utilities;

import android.annotation.TargetApi;
import android.app.Application;
import android.os.Build.VERSION;
import android.os.HandlerThread;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class a
{
  private static final String a = a.class.getSimpleName();
  private static List b = new ArrayList();
  private static HandlerThread c = null;
  private static Application d;
  private static final Object e = new Object();
  private static volatile a f;
  
  private a()
  {
    d = (Application)com.inmobi.commons.a.a.b();
  }
  
  public static a a()
  {
    Object localObject1 = f;
    if (localObject1 == null) {
      synchronized (e)
      {
        a localA2 = f;
        localObject1 = localA2;
        if (localA2 == null)
        {
          localObject1 = new a();
          f = (a)localObject1;
        }
        return localObject1;
      }
    }
    return localA1;
  }
  
  private static void b(Boolean paramBoolean)
  {
    Iterator localIterator = b.iterator();
    while (localIterator.hasNext()) {
      ((a.b)localIterator.next()).a(paramBoolean.booleanValue());
    }
  }
  
  @TargetApi(14)
  private void d()
  {
    c = new HandlerThread("ApplicationFocusChangeObserverHandler");
    c.start();
    Object localObject3 = Application.class.getDeclaredClasses();
    Object localObject1 = null;
    int j = localObject3.length;
    int i = 0;
    Object localObject2;
    if (i < j)
    {
      localObject2 = localObject3[i];
      if (!((Class)localObject2).getSimpleName().equalsIgnoreCase("ActivityLifecycleCallbacks")) {
        break label179;
      }
      localObject1 = localObject2;
    }
    label179:
    for (;;)
    {
      i += 1;
      break;
      localObject2 = localObject1.getClassLoader();
      localObject3 = new a.1(this);
      localObject2 = Proxy.newProxyInstance((ClassLoader)localObject2, new Class[] { localObject1 }, (InvocationHandler)localObject3);
      if (localObject2 != null) {}
      try
      {
        Application.class.getMethod("registerActivityLifecycleCallbacks", new Class[] { localObject1 }).invoke(d, new Object[] { localObject2 });
        return;
      }
      catch (NoSuchMethodException localNoSuchMethodException)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error while registering activity life cycle listener.", localNoSuchMethodException);
        return;
      }
      catch (InvocationTargetException localInvocationTargetException)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error while registering activity life cycle listener.", localInvocationTargetException);
        return;
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Error while registering activity life cycle listener.", localIllegalAccessException);
        return;
      }
    }
  }
  
  public void a(a.b paramB)
  {
    if (Build.VERSION.SDK_INT < 14) {}
    do
    {
      return;
      b.add(paramB);
    } while (b.size() != 1);
    d();
  }
}
