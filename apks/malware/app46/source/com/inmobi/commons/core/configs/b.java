package com.inmobi.commons.core.configs;

import android.os.HandlerThread;
import android.os.Message;
import com.inmobi.commons.core.utilities.Logger;
import com.inmobi.commons.core.utilities.Logger.InternalLogLevel;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class b
{
  private static final String a = b.class.getSimpleName();
  private static final Object b = new Object();
  private static Map c;
  private static g d;
  private static volatile b e;
  private static b.c f;
  private HandlerThread g;
  private b.a h;
  private boolean i = false;
  
  private b()
  {
    c = new HashMap();
    this.g = new HandlerThread("ConfigBootstrapHandler");
    this.g.start();
    this.h = new b.a(this.g.getLooper());
    d = new g();
  }
  
  public static b a()
  {
    Object localObject1 = e;
    if (localObject1 == null) {
      synchronized (b)
      {
        b localB2 = e;
        localObject1 = localB2;
        if (localB2 == null)
        {
          localObject1 = new b();
          e = (b)localObject1;
        }
        return localObject1;
      }
    }
    return localB1;
  }
  
  private boolean a(long paramLong1, long paramLong2)
  {
    return System.currentTimeMillis() - paramLong1 > paramLong2;
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    boolean bool = true;
    paramString1 = paramString1.split("\\.");
    paramString2 = paramString2.split("\\.");
    int j = 0;
    for (;;)
    {
      int k;
      try
      {
        if (j >= paramString1.length) {
          break label167;
        }
        if (Integer.valueOf(paramString1[j]).intValue() >= 0) {
          break label160;
        }
        return false;
      }
      catch (NumberFormatException paramString1) {}
      if (j < paramString2.length)
      {
        k = Integer.valueOf(paramString2[j]).intValue();
        if (k >= 0) {
          j += 1;
        }
      }
      else
      {
        if (paramString1.length < paramString2.length)
        {
          j = paramString1.length;
          k = 0;
          if (k >= j) {
            continue;
          }
          if (paramString1[k].equals(paramString2[k])) {
            continue;
          }
          if (Integer.valueOf(paramString1[k]).intValue() < Integer.valueOf(paramString2[k]).intValue())
          {
            bool = true;
            return bool;
          }
        }
        else
        {
          j = paramString2.length;
          continue;
        }
        bool = false;
        continue;
        k += 1;
        continue;
        if (paramString1.length < paramString2.length) {
          return bool;
        }
        bool = false;
        continue;
      }
      return false;
      label160:
      j += 1;
      continue;
      label167:
      j = 0;
    }
  }
  
  private static void b(a paramA)
  {
    ArrayList localArrayList = (ArrayList)c.get(paramA);
    if (localArrayList != null)
    {
      int j = 0;
      while (j < localArrayList.size())
      {
        if ((localArrayList.get(j) != null) && (((WeakReference)localArrayList.get(j)).get() != null)) {
          ((b.b)((WeakReference)localArrayList.get(j)).get()).a(paramA);
        }
        j += 1;
      }
    }
  }
  
  private void b(a paramA, b.b paramB)
  {
    ArrayList localArrayList = (ArrayList)c.get(paramA);
    if (localArrayList == null) {
      localArrayList = new ArrayList();
    }
    for (;;)
    {
      if (paramB == null) {}
      for (paramB = null;; paramB = new WeakReference(paramB))
      {
        localArrayList.add(paramB);
        c.put(paramA, localArrayList);
        return;
      }
    }
  }
  
  private final void c(a paramA)
  {
    for (;;)
    {
      c localC;
      try
      {
        localC = new c();
        if (!localC.a(d.a()))
        {
          Logger.a(Logger.InternalLogLevel.INTERNAL, a, "RootConfig not available. Fetching root and returning defaults for config type:" + paramA.a());
          d(d.d());
          return;
        }
        localC.b(d);
        if (a(localC.b(d.a()), d.a(d.a())))
        {
          Logger.a(Logger.InternalLogLevel.INTERNAL, a, "RootConfig expired. Fetching root.");
          d(d.d());
        }
        if (!localC.a(paramA.a()))
        {
          Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Requested config not present. Returning default and fetching. Config type:" + paramA.a());
          d(paramA.d());
          continue;
        }
        localC.b(paramA);
      }
      finally {}
      if (a(localC.b(paramA.a()), d.a(paramA.a())))
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Requested config expired. Returning currently cached and fetching. Config type:" + paramA.a());
        d(paramA.d());
      }
      else
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Serving config from cache. Config:" + paramA.a());
      }
    }
  }
  
  private void d(a paramA)
  {
    Message localMessage = this.h.obtainMessage();
    localMessage.what = 1;
    localMessage.obj = paramA;
    this.h.sendMessage(localMessage);
  }
  
  private void g()
  {
    Iterator localIterator = c.entrySet().iterator();
    while (localIterator.hasNext())
    {
      a localA = (a)((Map.Entry)localIterator.next()).getKey();
      c(localA);
      b(localA);
    }
  }
  
  /* Error */
  public final void a(a paramA, b.b paramB)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 40	com/inmobi/commons/core/configs/b:i	Z
    //   6: ifne +37 -> 43
    //   9: getstatic 162	com/inmobi/commons/core/utilities/Logger$InternalLogLevel:INTERNAL	Lcom/inmobi/commons/core/utilities/Logger$InternalLogLevel;
    //   12: getstatic 32	com/inmobi/commons/core/configs/b:a	Ljava/lang/String;
    //   15: new 164	java/lang/StringBuilder
    //   18: dup
    //   19: invokespecial 165	java/lang/StringBuilder:<init>	()V
    //   22: ldc -6
    //   24: invokevirtual 171	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   27: aload_1
    //   28: invokevirtual 174	com/inmobi/commons/core/configs/a:a	()Ljava/lang/String;
    //   31: invokevirtual 171	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   34: invokevirtual 177	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   37: invokestatic 182	com/inmobi/commons/core/utilities/Logger:a	(Lcom/inmobi/commons/core/utilities/Logger$InternalLogLevel;Ljava/lang/String;Ljava/lang/String;)V
    //   40: aload_0
    //   41: monitorexit
    //   42: return
    //   43: aload_0
    //   44: aload_1
    //   45: aload_2
    //   46: invokespecial 252	com/inmobi/commons/core/configs/b:b	(Lcom/inmobi/commons/core/configs/a;Lcom/inmobi/commons/core/configs/b$b;)V
    //   49: aload_0
    //   50: aload_1
    //   51: invokespecial 248	com/inmobi/commons/core/configs/b:c	(Lcom/inmobi/commons/core/configs/a;)V
    //   54: goto -14 -> 40
    //   57: astore_1
    //   58: aload_0
    //   59: monitorexit
    //   60: aload_1
    //   61: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	62	0	this	b
    //   0	62	1	paramA	a
    //   0	62	2	paramB	b.b
    // Exception table:
    //   from	to	target	type
    //   2	40	57	finally
    //   43	54	57	finally
  }
  
  public void b()
  {
    try
    {
      if (!this.i)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Starting config component.");
        this.i = true;
        com.inmobi.commons.core.c.a.a().a("root", d.i());
        if (f == null) {
          f = new b.c();
        }
        a(d, f);
        g();
      }
      return;
    }
    finally {}
  }
  
  public void c()
  {
    try
    {
      if (this.i)
      {
        Logger.a(Logger.InternalLogLevel.INTERNAL, a, "Stopping config component.");
        this.i = false;
        this.h.sendEmptyMessage(5);
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public final void d()
  {
    String str1 = d.h().a();
    String str2 = d.h().b();
    if ((str1.trim().length() != 0) && (a(com.inmobi.commons.a.b.b(), str1.trim()))) {
      Logger.a(Logger.InternalLogLevel.DEBUG, a, "A newer version (version " + str1 + ") of the InMobi SDK is available! " + "You are currently on an older version (Version " + com.inmobi.commons.a.b.b() + "). Please download the latest InMobi SDK from " + str2);
    }
  }
}
