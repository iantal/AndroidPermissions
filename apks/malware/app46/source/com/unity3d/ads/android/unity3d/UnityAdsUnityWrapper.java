package com.unity3d.ads.android.unity3d;

import android.app.Activity;
import com.unity3d.ads.android.IUnityAdsListener;
import com.unity3d.ads.android.UnityAds;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.webapp.UnityAdsWebData;
import com.unity3d.ads.android.zone.UnityAdsZoneManager;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class UnityAdsUnityWrapper
  implements IUnityAdsListener
{
  private static Boolean f = Boolean.valueOf(false);
  private static Boolean g = Boolean.valueOf(false);
  private Activity a = null;
  private String b = null;
  private String c = null;
  private Method d = null;
  private boolean e = false;
  
  public UnityAdsUnityWrapper()
  {
    if (!f.booleanValue()) {
      f = Boolean.valueOf(true);
    }
    try
    {
      this.d = Class.forName("com.unity3d.player.UnityPlayer").getDeclaredMethod("UnitySendMessage", new Class[] { String.class, String.class, String.class });
      return;
    }
    catch (Exception localException)
    {
      UnityAdsDeviceLog.error("Error getting class or method of com.unity3d.player.UnityPlayer, method UnitySendMessage(string, string, string). " + localException.getLocalizedMessage());
    }
  }
  
  public boolean canShow()
  {
    return UnityAds.canShow();
  }
  
  public boolean canShowZone(String paramString)
  {
    boolean bool2 = false;
    if ((paramString != null) && (paramString.length() > 0))
    {
      UnityAdsZoneManager localUnityAdsZoneManager = UnityAdsWebData.getZoneManager();
      boolean bool1 = bool2;
      if (localUnityAdsZoneManager != null)
      {
        bool1 = bool2;
        if (localUnityAdsZoneManager.getZone(paramString) != null) {
          bool1 = UnityAds.canShow();
        }
      }
      return bool1;
    }
    return UnityAds.canShow();
  }
  
  public void enableUnityDeveloperInternalTestMode() {}
  
  public String getCurrentRewardItemKey()
  {
    return UnityAds.getCurrentRewardItemKey();
  }
  
  public String getDefaultRewardItemKey()
  {
    return UnityAds.getDefaultRewardItemKey();
  }
  
  public String getRewardItemDetailsKeys()
  {
    return String.format("%s;%s", new Object[] { "name", "picture" });
  }
  
  public String getRewardItemDetailsWithKey(String paramString)
  {
    if (UnityAds.getRewardItemDetailsWithKey(paramString) != null)
    {
      UnityAdsDeviceLog.debug("Fetching reward data");
      paramString = (HashMap)UnityAds.getRewardItemDetailsWithKey(paramString);
      if (paramString != null)
      {
        String str = (String)paramString.get("name");
        return str + ";" + (String)paramString.get("picture");
      }
      UnityAdsDeviceLog.debug("Problems getting reward item details");
    }
    for (;;)
    {
      return "";
      UnityAdsDeviceLog.debug("Could not find reward item details");
    }
  }
  
  public String getRewardItemKeys()
  {
    Object localObject = null;
    if (UnityAds.getRewardItemKeys() == null) {}
    while (UnityAds.getRewardItemKeys().size() <= 0) {
      return localObject;
    }
    String str1 = "";
    Iterator localIterator = UnityAds.getRewardItemKeys().iterator();
    for (;;)
    {
      localObject = str1;
      if (!localIterator.hasNext()) {
        break;
      }
      String str2 = (String)localIterator.next();
      localObject = str1;
      if (UnityAds.getRewardItemKeys().indexOf(str2) > 0) {
        localObject = str1 + ";";
      }
      str1 = (String)localObject + str2;
    }
  }
  
  public String getSDKVersion()
  {
    return UnityAds.getSDKVersion();
  }
  
  public boolean hasMultipleRewardItems()
  {
    return UnityAds.hasMultipleRewardItems();
  }
  
  public void hide()
  {
    UnityAds.hide();
  }
  
  public void init(String paramString1, Activity paramActivity, boolean paramBoolean, int paramInt, String paramString2, String paramString3)
  {
    if (!g.booleanValue())
    {
      g = Boolean.valueOf(true);
      this.c = paramString1;
      this.b = paramString2;
      this.e = paramBoolean;
      if (this.a == null) {
        this.a = paramActivity;
      }
    }
    try
    {
      UnityAdsUtils.runOnUiThread(new b(this, paramInt, paramString3, this));
      return;
    }
    catch (Exception paramString1)
    {
      UnityAdsDeviceLog.error("Error occured while initializing Unity Ads");
    }
  }
  
  public boolean isSupported()
  {
    return UnityAds.isSupported();
  }
  
  public void onFetchCompleted()
  {
    sendMessageToUnity3D("onFetchCompleted", null);
  }
  
  public void onFetchFailed()
  {
    sendMessageToUnity3D("onFetchFailed", null);
  }
  
  public void onHide()
  {
    sendMessageToUnity3D("onHide", null);
  }
  
  public void onShow()
  {
    sendMessageToUnity3D("onShow", null);
  }
  
  public void onVideoCompleted(String paramString, boolean paramBoolean)
  {
    StringBuilder localStringBuilder = new StringBuilder().append(paramString).append(";");
    if (paramBoolean) {}
    for (paramString = "true";; paramString = "false")
    {
      sendMessageToUnity3D("onVideoCompleted", paramString);
      return;
    }
  }
  
  public void onVideoStarted()
  {
    sendMessageToUnity3D("onVideoStarted", null);
  }
  
  public void sendMessageToUnity3D(String paramString1, String paramString2)
  {
    String str = paramString2;
    if (paramString2 == null) {
      str = "";
    }
    if (this.d == null)
    {
      UnityAdsDeviceLog.error("Cannot send message to Unity3D. Method is null");
      return;
    }
    try
    {
      UnityAdsDeviceLog.debug("Sending message (" + paramString1 + ", " + str + ") to Unity3D");
      this.d.invoke(null, new Object[] { this.b, paramString1, str });
      return;
    }
    catch (Exception paramString1)
    {
      UnityAdsDeviceLog.error("Can't invoke UnitySendMessage method. Error = " + paramString1.getLocalizedMessage());
    }
  }
  
  public void setCampaignDataURL(String paramString)
  {
    UnityAds.setCampaignDataURL(paramString);
  }
  
  public void setDefaultRewardItemAsRewardItem() {}
  
  public void setLogLevel(int paramInt)
  {
    UnityAdsDeviceLog.setLogLevel(paramInt);
  }
  
  public boolean setRewardItemKey(String paramString)
  {
    return UnityAds.setRewardItemKey(paramString);
  }
  
  public boolean show(String paramString1, String paramString2, String paramString3)
  {
    if (canShowZone(paramString1))
    {
      Object localObject = null;
      if (paramString3.length() > 0)
      {
        HashMap localHashMap = new HashMap();
        paramString3 = paramString3.split(",");
        int j = paramString3.length;
        int i = 0;
        for (;;)
        {
          localObject = localHashMap;
          if (i >= j) {
            break;
          }
          localObject = paramString3[i].split(":");
          localHashMap.put(localObject[0], localObject[1]);
          i += 1;
        }
      }
      if (paramString2.length() > 0) {
        if ((paramString1 != null) && (paramString1.length() > 0)) {
          UnityAds.setZone(paramString1, paramString2);
        }
      }
      for (;;)
      {
        return UnityAds.show((Map)localObject);
        if ((paramString1 != null) && (paramString1.length() > 0)) {
          UnityAds.setZone(paramString1);
        }
      }
    }
    return false;
  }
}
