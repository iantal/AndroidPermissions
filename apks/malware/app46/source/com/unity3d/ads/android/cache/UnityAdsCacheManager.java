package com.unity3d.ads.android.cache;

import android.app.Activity;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.campaign.IUnityAdsCampaignHandlerListener;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import com.unity3d.ads.android.campaign.UnityAdsCampaignHandler;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

public class UnityAdsCacheManager
  implements IUnityAdsCampaignHandlerListener
{
  private IUnityAdsCacheListener a = null;
  private ArrayList b = null;
  private ArrayList c = null;
  private int d = 0;
  private int e = 0;
  
  public UnityAdsCacheManager(Activity paramActivity)
  {
    UnityAdsUtils.chooseCacheDirectory(paramActivity);
    UnityAdsDeviceLog.debug("Unity Ads cache directory: " + UnityAdsUtils.getCacheDirectory());
    if (UnityAdsUtils.canUseExternalStorage())
    {
      UnityAdsDeviceLog.debug("Cache directory created with result: " + UnityAdsUtils.createCacheDir());
      return;
    }
    UnityAdsDeviceLog.info("Could not create cache, no external memory present");
  }
  
  public void cacheNextVideo(UnityAdsCampaign paramUnityAdsCampaign)
  {
    new UnityAdsCampaignHandler(paramUnityAdsCampaign).downloadCampaign();
  }
  
  public void clearData()
  {
    if (this.a != null) {
      this.a = null;
    }
    Iterator localIterator;
    UnityAdsCampaignHandler localUnityAdsCampaignHandler;
    if (this.b != null)
    {
      localIterator = this.b.iterator();
      while (localIterator.hasNext())
      {
        localUnityAdsCampaignHandler = (UnityAdsCampaignHandler)localIterator.next();
        localUnityAdsCampaignHandler.setListener(null);
        localUnityAdsCampaignHandler.clearData();
      }
      this.b.clear();
      this.b = null;
    }
    if (this.c != null)
    {
      localIterator = this.c.iterator();
      while (localIterator.hasNext())
      {
        localUnityAdsCampaignHandler = (UnityAdsCampaignHandler)localIterator.next();
        localUnityAdsCampaignHandler.setListener(null);
        localUnityAdsCampaignHandler.clearData();
      }
      this.c.clear();
      this.c = null;
    }
  }
  
  public boolean hasDownloadingHandlers()
  {
    return (this.b != null) && (this.b.size() > 0);
  }
  
  public void initCache(ArrayList paramArrayList)
  {
    updateCache(paramArrayList);
  }
  
  public boolean isCampaignCached(UnityAdsCampaign paramUnityAdsCampaign, boolean paramBoolean)
  {
    if (UnityAdsUtils.isFileInCache(paramUnityAdsCampaign.getVideoFilename()))
    {
      if (!paramBoolean) {}
      long l1;
      long l2;
      do
      {
        return true;
        l1 = UnityAdsUtils.getSizeForLocalFile(paramUnityAdsCampaign.getVideoFilename());
        l2 = paramUnityAdsCampaign.getVideoFileExpectedSize();
      } while ((l1 > 0L) && (l2 > 0L) && (l1 == l2));
    }
    return false;
  }
  
  public void onCampaignHandled(UnityAdsCampaignHandler paramUnityAdsCampaignHandler)
  {
    this.d += 1;
    if (this.b != null) {
      this.b.remove(paramUnityAdsCampaignHandler);
    }
    if (this.c != null) {
      this.c.remove(paramUnityAdsCampaignHandler);
    }
    this.a.onCampaignReady(paramUnityAdsCampaignHandler);
    if (this.d == this.e) {
      this.a.onAllCampaignsReady();
    }
  }
  
  public void setDownloadListener(IUnityAdsCacheListener paramIUnityAdsCacheListener)
  {
    this.a = paramIUnityAdsCacheListener;
  }
  
  public void updateCache(ArrayList paramArrayList)
  {
    if (this.a != null) {
      this.a.onCampaignUpdateStarted();
    }
    this.d = 0;
    if (paramArrayList != null) {
      UnityAdsDeviceLog.debug(paramArrayList.toString());
    }
    Object localObject1;
    if (UnityAdsUtils.getCacheDirectory() != null)
    {
      localObject1 = new File(UnityAdsUtils.getCacheDirectory()).listFiles();
      if (localObject1 != null)
      {
        int j = localObject1.length;
        int i = 0;
        while (i < j)
        {
          Object localObject2 = localObject1[i];
          UnityAdsDeviceLog.debug("Checking file: " + localObject2.getName());
          if ((!localObject2.getName().equals("pendingrequests.dat")) && (!localObject2.getName().equals("manifest.json")) && (!UnityAdsUtils.isFileRequiredByCampaigns(localObject2.getName(), paramArrayList))) {
            UnityAdsUtils.removeFile(localObject2.getName());
          }
          i += 1;
        }
      }
    }
    if (paramArrayList != null)
    {
      this.e = paramArrayList.size();
      UnityAdsDeviceLog.debug("Updating cache: Going through active campaigns: " + this.e);
      paramArrayList = paramArrayList.iterator();
      for (boolean bool = true; paramArrayList.hasNext(); bool = false)
      {
        localObject1 = new UnityAdsCampaignHandler((UnityAdsCampaign)paramArrayList.next());
        if (this.c == null) {
          this.c = new ArrayList();
        }
        this.c.add(localObject1);
        ((UnityAdsCampaignHandler)localObject1).setListener(this);
        ((UnityAdsCampaignHandler)localObject1).initCampaign(bool);
        if (((UnityAdsCampaignHandler)localObject1).hasDownloads())
        {
          if (this.b == null) {
            this.b = new ArrayList();
          }
          this.b.add(localObject1);
        }
      }
    }
  }
}
