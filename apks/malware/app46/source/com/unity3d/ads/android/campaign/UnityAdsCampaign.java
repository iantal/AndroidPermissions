package com.unity3d.ads.android.campaign;

import com.unity3d.ads.android.UnityAdsDeviceLog;
import java.io.File;
import org.json.JSONObject;

public class UnityAdsCampaign
{
  private JSONObject a = null;
  private String[] b = { "endScreen", "clickUrl", "picture", "trailerDownloadable", "trailerStreaming", "gameId", "gameName", "id", "tagLine" };
  private UnityAdsCampaign.UnityAdsCampaignStatus c = UnityAdsCampaign.UnityAdsCampaignStatus.READY;
  
  public UnityAdsCampaign() {}
  
  public UnityAdsCampaign(JSONObject paramJSONObject)
  {
    this.a = paramJSONObject;
  }
  
  private boolean a()
  {
    String[] arrayOfString;
    int j;
    int i;
    if (this.a != null)
    {
      arrayOfString = this.b;
      j = arrayOfString.length;
      i = 0;
    }
    while (i < j)
    {
      String str = arrayOfString[i];
      if (!this.a.has(str)) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public Boolean allowCacheVideo()
  {
    if (a()) {
      try
      {
        boolean bool = this.a.getBoolean("allowCache");
        return Boolean.valueOf(bool);
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.warning("Key not found for campaign: " + getCampaignId());
      }
    }
    return Boolean.valueOf(false);
  }
  
  public Boolean allowStreamingVideo()
  {
    if (a()) {
      try
      {
        boolean bool = this.a.getBoolean("allowStreaming");
        return Boolean.valueOf(bool);
      }
      catch (Exception localException) {}
    }
    return Boolean.valueOf(true);
  }
  
  public void clearData()
  {
    this.a = null;
  }
  
  public String getCampaignId()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("id");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public UnityAdsCampaign.UnityAdsCampaignStatus getCampaignStatus()
  {
    return this.c;
  }
  
  public String getClickUrl()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("clickUrl");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getEndScreenUrl()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("endScreen");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getFilterMode()
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      if (a())
      {
        localObject1 = localObject2;
        if (this.a.has("filterMode")) {
          localObject1 = this.a.getString("filterMode");
        }
      }
      return localObject1;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public String getGameId()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("gameId");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getGameName()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("gameName");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getPicture()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("picture");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getStoreId()
  {
    if (this.a.has("storeId")) {
      try
      {
        String str1 = this.a.getString("storeId");
        return str1;
      }
      catch (Exception localException1)
      {
        UnityAdsDeviceLog.error("Was supposed to use UnityAdsConstants.UNITY_ADS_CAMPAIGN_STOREID_KEY but " + localException1.getMessage() + " occured");
      }
    }
    if (this.a.has("iTunesId")) {
      try
      {
        String str2 = this.a.getString("iTunesId");
        return str2;
      }
      catch (Exception localException2)
      {
        UnityAdsDeviceLog.error("Was supposed to use UnityAdsConstants.UNITY_ADS_CAMPAIGN_ITUNESID_KEY but " + localException2.getMessage() + " occured");
      }
    }
    return null;
  }
  
  public String getTagLine()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("tagLine");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public long getVideoFileExpectedSize()
  {
    long l = -1L;
    if (a()) {}
    try
    {
      String str = this.a.getString("trailerSize");
      try
      {
        l = Long.parseLong(str);
        return l;
      }
      catch (Exception localException1)
      {
        UnityAdsDeviceLog.error("Could not parse size: " + localException1.getMessage());
        return -1L;
      }
      return -1L;
    }
    catch (Exception localException2)
    {
      UnityAdsDeviceLog.error("Not found, returning -1");
    }
  }
  
  public String getVideoFilename()
  {
    if (a()) {
      try
      {
        Object localObject = new File(this.a.getString("trailerDownloadable"));
        localObject = getCampaignId() + "-" + ((File)localObject).getName();
        return localObject;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getVideoStreamUrl()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("trailerStreaming");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public String getVideoUrl()
  {
    if (a()) {
      try
      {
        String str = this.a.getString("trailerDownloadable");
        return str;
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.error("This should not happen!");
      }
    }
    return null;
  }
  
  public boolean hasValidData()
  {
    return a();
  }
  
  public Boolean isViewed()
  {
    if (this.c == UnityAdsCampaign.UnityAdsCampaignStatus.VIEWED) {
      return Boolean.valueOf(true);
    }
    return Boolean.valueOf(false);
  }
  
  public void setCampaignStatus(UnityAdsCampaign.UnityAdsCampaignStatus paramUnityAdsCampaignStatus)
  {
    this.c = paramUnityAdsCampaignStatus;
  }
  
  public Boolean shouldBypassAppSheet()
  {
    if (a()) {
      try
      {
        boolean bool = this.a.getBoolean("bypassAppSheet");
        return Boolean.valueOf(bool);
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.warning("Key not found for campaign: " + getCampaignId());
      }
    }
    return Boolean.valueOf(false);
  }
  
  public Boolean shouldCacheVideo()
  {
    if (a()) {
      try
      {
        boolean bool = this.a.getBoolean("cacheVideo");
        return Boolean.valueOf(bool);
      }
      catch (Exception localException)
      {
        UnityAdsDeviceLog.warning("Key not found for campaign: " + getCampaignId());
      }
    }
    return Boolean.valueOf(false);
  }
  
  public JSONObject toJson()
  {
    JSONObject localJSONObject = this.a;
    try
    {
      localJSONObject.put("status", getCampaignStatus().toString());
      return localJSONObject;
    }
    catch (Exception localException)
    {
      UnityAdsDeviceLog.error("Error creating campaign JSON");
    }
    return null;
  }
  
  public String toString()
  {
    return "<ID: " + getCampaignId() + ", STATUS: " + getCampaignStatus().toString() + ", URL: " + getVideoUrl() + ">";
  }
}
