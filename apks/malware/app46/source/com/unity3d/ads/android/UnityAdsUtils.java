package com.unity3d.ads.android;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.security.auth.x500.X500Principal;

@TargetApi(9)
public class UnityAdsUtils
{
  private static final X500Principal a = new X500Principal("CN=Android Debug,O=Android,C=US");
  private static String b = null;
  
  public UnityAdsUtils() {}
  
  @SuppressLint({"DefaultLocale"})
  public static String Md5(String paramString)
  {
    Object localObject1 = null;
    try
    {
      localObject2 = MessageDigest.getInstance("MD5");
      localObject1 = localObject2;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      for (;;)
      {
        Object localObject2;
        int i;
        localNoSuchAlgorithmException.printStackTrace();
      }
    }
    ((MessageDigest)localObject1).update(paramString.getBytes(), 0, paramString.length());
    localObject2 = ((MessageDigest)localObject1).digest();
    paramString = new String();
    i = 0;
    while (i < localObject2.length)
    {
      int j = localObject2[i] & 0xFF;
      localObject1 = paramString;
      if (j <= 15) {
        localObject1 = paramString + "0";
      }
      paramString = (String)localObject1 + Integer.toHexString(j);
      i += 1;
    }
    return paramString.toUpperCase();
  }
  
  public static String SHA1(String paramString)
  {
    Object localObject = MessageDigest.getInstance("SHA-1");
    ((MessageDigest)localObject).update(paramString.getBytes("iso-8859-1"), 0, paramString.length());
    paramString = ((MessageDigest)localObject).digest();
    localObject = new StringBuilder();
    int m = paramString.length;
    int i = 0;
    int n;
    int j;
    int k;
    if (i < m)
    {
      n = paramString[i];
      j = n >>> 4 & 0xF;
      k = 0;
    }
    for (;;)
    {
      if ((j >= 0) && (j <= 9)) {}
      for (char c = (char)(j + 48);; c = (char)(j - 10 + 97))
      {
        ((StringBuilder)localObject).append(c);
        if (k <= 0) {
          break label119;
        }
        i += 1;
        break;
      }
      return ((StringBuilder)localObject).toString();
      label119:
      k += 1;
      j = n & 0xF;
    }
  }
  
  public static boolean canUseExternalStorage()
  {
    return Environment.getExternalStorageState().equals("mounted");
  }
  
  public static void chooseCacheDirectory(Activity paramActivity)
  {
    paramActivity = paramActivity.getExternalCacheDir();
    if ((paramActivity != null) && (paramActivity.getAbsolutePath() != null))
    {
      b = paramActivity.getAbsolutePath() + "/UnityAdsVideoCache";
      return;
    }
    b = Environment.getExternalStorageDirectory() + "/UnityAdsVideoCache";
  }
  
  public static File createCacheDir()
  {
    File localFile = new File(getCacheDirectory());
    localFile.mkdirs();
    writeFile(new File(getCacheDirectory() + "/.nomedia"), "");
    return localFile;
  }
  
  public static String getCacheDirectory()
  {
    return b;
  }
  
  public static long getSizeForLocalFile(String paramString)
  {
    paramString = new File(paramString);
    paramString = new File(getCacheDirectory() + "/" + paramString.getName());
    long l = -1L;
    if (paramString.exists()) {
      l = paramString.length();
    }
    return l;
  }
  
  /* Error */
  public static boolean isDebuggable(android.content.Context paramContext)
  {
    // Byte code:
    //   0: iconst_1
    //   1: istore_3
    //   2: aload_0
    //   3: ifnonnull +5 -> 8
    //   6: iconst_0
    //   7: ireturn
    //   8: aload_0
    //   9: invokevirtual 174	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   12: astore 4
    //   14: aload 4
    //   16: aload_0
    //   17: invokevirtual 177	android/content/Context:getPackageName	()Ljava/lang/String;
    //   20: iconst_0
    //   21: invokevirtual 183	android/content/pm/PackageManager:getApplicationInfo	(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
    //   24: astore 4
    //   26: aload 4
    //   28: getfield 189	android/content/pm/ApplicationInfo:flags	I
    //   31: iconst_2
    //   32: iand
    //   33: istore_1
    //   34: aload 4
    //   36: iload_1
    //   37: putfield 189	android/content/pm/ApplicationInfo:flags	I
    //   40: iload_1
    //   41: ifeq +87 -> 128
    //   44: iconst_0
    //   45: istore_1
    //   46: iload_3
    //   47: istore_2
    //   48: iload_1
    //   49: ifeq +96 -> 145
    //   52: aload_0
    //   53: invokevirtual 174	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   56: aload_0
    //   57: invokevirtual 177	android/content/Context:getPackageName	()Ljava/lang/String;
    //   60: bipush 64
    //   62: invokevirtual 193	android/content/pm/PackageManager:getPackageInfo	(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    //   65: getfield 199	android/content/pm/PackageInfo:signatures	[Landroid/content/pm/Signature;
    //   68: astore_0
    //   69: iconst_0
    //   70: istore_1
    //   71: iload_3
    //   72: istore_2
    //   73: iload_1
    //   74: aload_0
    //   75: arraylength
    //   76: if_icmpge +85 -> 161
    //   79: ldc -55
    //   81: invokestatic 206	java/security/cert/CertificateFactory:getInstance	(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;
    //   84: new 208	java/io/ByteArrayInputStream
    //   87: dup
    //   88: aload_0
    //   89: iload_1
    //   90: aaload
    //   91: invokevirtual 213	android/content/pm/Signature:toByteArray	()[B
    //   94: invokespecial 216	java/io/ByteArrayInputStream:<init>	([B)V
    //   97: invokevirtual 220	java/security/cert/CertificateFactory:generateCertificate	(Ljava/io/InputStream;)Ljava/security/cert/Certificate;
    //   100: checkcast 222	java/security/cert/X509Certificate
    //   103: invokevirtual 226	java/security/cert/X509Certificate:getSubjectX500Principal	()Ljavax/security/auth/x500/X500Principal;
    //   106: getstatic 23	com/unity3d/ads/android/UnityAdsUtils:a	Ljavax/security/auth/x500/X500Principal;
    //   109: invokevirtual 227	javax/security/auth/x500/X500Principal:equals	(Ljava/lang/Object;)Z
    //   112: istore_3
    //   113: iload_3
    //   114: istore_2
    //   115: iload_3
    //   116: ifne +29 -> 145
    //   119: iload_1
    //   120: iconst_1
    //   121: iadd
    //   122: istore_1
    //   123: iload_3
    //   124: istore_2
    //   125: goto -52 -> 73
    //   128: iconst_0
    //   129: istore_3
    //   130: goto -86 -> 44
    //   133: astore 4
    //   135: iconst_1
    //   136: istore_1
    //   137: iconst_0
    //   138: istore_3
    //   139: goto -93 -> 46
    //   142: astore_0
    //   143: iload_3
    //   144: istore_2
    //   145: iload_2
    //   146: ireturn
    //   147: astore_0
    //   148: goto -3 -> 145
    //   151: astore_0
    //   152: iload_3
    //   153: istore_2
    //   154: goto -9 -> 145
    //   157: astore_0
    //   158: goto -13 -> 145
    //   161: goto -16 -> 145
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	164	0	paramContext	android.content.Context
    //   33	104	1	i	int
    //   47	107	2	bool1	boolean
    //   1	152	3	bool2	boolean
    //   12	23	4	localObject	Object
    //   133	1	4	localNameNotFoundException	android.content.pm.PackageManager.NameNotFoundException
    // Exception table:
    //   from	to	target	type
    //   14	40	133	android/content/pm/PackageManager$NameNotFoundException
    //   52	69	142	java/security/cert/CertificateException
    //   73	113	147	java/security/cert/CertificateException
    //   52	69	151	android/content/pm/PackageManager$NameNotFoundException
    //   73	113	157	android/content/pm/PackageManager$NameNotFoundException
  }
  
  public static boolean isFileInCache(String paramString)
  {
    paramString = new File(paramString);
    return new File(getCacheDirectory() + "/" + paramString.getName()).exists();
  }
  
  public static boolean isFileRequiredByCampaigns(String paramString, ArrayList paramArrayList)
  {
    if ((paramString == null) || (paramArrayList == null)) {
      return false;
    }
    paramString = new File(paramString);
    if (paramString.getName().equals(".nomedia")) {
      return true;
    }
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      File localFile = new File(((UnityAdsCampaign)paramArrayList.next()).getVideoFilename());
      if (paramString.getName().equals(localFile.getName())) {
        return true;
      }
    }
    return false;
  }
  
  public static String readFile(File paramFile, boolean paramBoolean)
  {
    String str = "";
    if ((paramFile.exists()) && (paramFile.canRead())) {
      try
      {
        BufferedReader localBufferedReader = new BufferedReader(new FileReader(paramFile));
        paramFile = str;
        for (;;)
        {
          str = localBufferedReader.readLine();
          if (str == null) {
            break;
          }
          str = paramFile.concat(str);
          paramFile = str;
          if (paramBoolean) {
            paramFile = str.concat("\n");
          }
        }
        try
        {
          localBufferedReader.close();
          return paramFile;
        }
        catch (Exception localException)
        {
          UnityAdsDeviceLog.error("Problem closing reader: " + localException.getMessage());
          return paramFile;
        }
      }
      catch (Exception paramFile)
      {
        UnityAdsDeviceLog.error("Problem reading file: " + paramFile.getMessage());
        return null;
      }
    }
    UnityAdsDeviceLog.error("File did not exist or couldn't be read");
    return null;
  }
  
  public static void removeFile(String paramString)
  {
    if (paramString != null)
    {
      paramString = new File(paramString);
      paramString = new File(getCacheDirectory() + "/" + paramString.getName());
      if (!paramString.exists()) {
        break label111;
      }
      if (!paramString.delete()) {
        UnityAdsDeviceLog.error("Could not delete: " + paramString.getAbsolutePath());
      }
    }
    else
    {
      return;
    }
    UnityAdsDeviceLog.debug("Deleted: " + paramString.getAbsolutePath());
    return;
    label111:
    UnityAdsDeviceLog.debug("File: " + paramString.getAbsolutePath() + " doesn't exist.");
  }
  
  public static void runOnUiThread(Runnable paramRunnable)
  {
    runOnUiThread(paramRunnable, 0L);
  }
  
  public static void runOnUiThread(Runnable paramRunnable, long paramLong)
  {
    Handler localHandler = new Handler(Looper.getMainLooper());
    if (paramLong > 0L)
    {
      localHandler.postDelayed(paramRunnable, paramLong);
      return;
    }
    localHandler.post(paramRunnable);
  }
  
  public static boolean writeFile(File paramFile, String paramString)
  {
    try
    {
      FileOutputStream localFileOutputStream = new FileOutputStream(paramFile);
      localFileOutputStream.write(paramString.getBytes());
      localFileOutputStream.flush();
      localFileOutputStream.close();
      UnityAdsDeviceLog.debug("Wrote file: " + paramFile.getAbsolutePath());
      return true;
    }
    catch (Exception paramFile)
    {
      UnityAdsDeviceLog.error("Could not write file: " + paramFile.getMessage());
    }
    return false;
  }
}
