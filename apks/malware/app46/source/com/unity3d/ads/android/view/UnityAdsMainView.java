package com.unity3d.ads.android.view;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.media.MediaPlayer;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout.LayoutParams;
import android.widget.RelativeLayout;
import com.unity3d.ads.android.IUnityAdsListener;
import com.unity3d.ads.android.UnityAds;
import com.unity3d.ads.android.UnityAdsDeviceLog;
import com.unity3d.ads.android.UnityAdsUtils;
import com.unity3d.ads.android.campaign.UnityAdsCampaign;
import com.unity3d.ads.android.campaign.UnityAdsCampaign.UnityAdsCampaignStatus;
import com.unity3d.ads.android.properties.UnityAdsProperties;
import com.unity3d.ads.android.video.IUnityAdsVideoPlayerListener;
import com.unity3d.ads.android.video.UnityAdsVideoPlayView;
import com.unity3d.ads.android.webapp.IUnityAdsWebBridgeListener;
import com.unity3d.ads.android.webapp.IUnityAdsWebViewListener;
import com.unity3d.ads.android.webapp.UnityAdsWebBridge;
import com.unity3d.ads.android.webapp.UnityAdsWebData;
import com.unity3d.ads.android.webapp.UnityAdsWebData.UnityAdsVideoPosition;
import com.unity3d.ads.android.webapp.UnityAdsWebView;
import com.unity3d.ads.android.zone.UnityAdsZone;
import com.unity3d.ads.android.zone.UnityAdsZoneManager;
import org.json.JSONObject;

@TargetApi(9)
public class UnityAdsMainView
  extends RelativeLayout
  implements IUnityAdsVideoPlayerListener, IUnityAdsWebViewListener
{
  private IUnityAdsMainViewListener a = null;
  private IUnityAdsWebBridgeListener b = null;
  private UnityAdsMainView.UnityAdsMainViewState c = UnityAdsMainView.UnityAdsMainViewState.WebView;
  public UnityAdsVideoPlayView videoplayerview = null;
  public UnityAdsWebView webview = null;
  
  public UnityAdsMainView(Context paramContext)
  {
    super(paramContext);
    a();
  }
  
  public UnityAdsMainView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    a();
  }
  
  public UnityAdsMainView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    a();
  }
  
  public UnityAdsMainView(Context paramContext, IUnityAdsMainViewListener paramIUnityAdsMainViewListener, IUnityAdsWebBridgeListener paramIUnityAdsWebBridgeListener)
  {
    super(paramContext);
    this.a = paramIUnityAdsMainViewListener;
    this.b = paramIUnityAdsWebBridgeListener;
    a();
  }
  
  private void a()
  {
    UnityAdsDeviceLog.entered();
    setId(1001);
    this.webview = new UnityAdsWebView(UnityAdsProperties.getCurrentActivity(), this, new UnityAdsWebBridge(this.b));
    this.webview.setId(1003);
    addView(this.webview, new FrameLayout.LayoutParams(-1, -1));
  }
  
  private static void a(View paramView)
  {
    if (paramView != null)
    {
      paramView.setFocusable(false);
      paramView.setFocusableInTouchMode(false);
      ViewGroup localViewGroup = (ViewGroup)paramView.getParent();
      if (localViewGroup != null) {
        localViewGroup.removeView(paramView);
      }
    }
  }
  
  private void a(UnityAdsMainView.UnityAdsMainViewAction paramUnityAdsMainViewAction)
  {
    if (this.a != null) {
      this.a.onMainViewAction(paramUnityAdsMainViewAction);
    }
  }
  
  private void b()
  {
    
    if (this.videoplayerview != null) {
      this.videoplayerview.clearVideoPlayer();
    }
    a(this.videoplayerview);
    this.videoplayerview = null;
  }
  
  private static void b(View paramView)
  {
    if (paramView != null)
    {
      paramView.setFocusable(true);
      paramView.setFocusableInTouchMode(true);
      paramView.requestFocus();
    }
  }
  
  public void afterVideoPlaybackOperations()
  {
    if (this.videoplayerview != null) {
      this.videoplayerview.setKeepScreenOn(false);
    }
    b();
    setViewState(UnityAdsMainView.UnityAdsMainViewState.WebView);
    Activity localActivity = UnityAdsProperties.getCurrentActivity();
    if (localActivity != null) {
      localActivity.setRequestedOrientation(-1);
    }
  }
  
  public void closeAds(JSONObject paramJSONObject)
  {
    if (getParent() != null)
    {
      paramJSONObject = (ViewGroup)getParent();
      if (paramJSONObject != null) {
        paramJSONObject.removeView(this);
      }
    }
    b();
    UnityAdsProperties.SELECTED_CAMPAIGN = null;
  }
  
  public void fixActivityAttachment()
  {
    if ((getParent() != null) && ((ViewGroup)getParent() != null)) {
      ((ViewGroup)getParent()).removeView(this);
    }
    UnityAdsProperties.getCurrentActivity().addContentView(this, new FrameLayout.LayoutParams(-1, -1));
  }
  
  public UnityAdsMainView.UnityAdsMainViewState getViewState()
  {
    return this.c;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    b(this);
  }
  
  public void onBackButtonClicked(View paramView)
  {
    UnityAdsDeviceLog.debug("Current state: " + this.c.toString());
    if (this.videoplayerview != null) {
      UnityAdsDeviceLog.debug("Seconds: " + this.videoplayerview.getSecondsUntilBackButtonAllowed());
    }
    if (((UnityAdsProperties.SELECTED_CAMPAIGN != null) && (UnityAdsProperties.SELECTED_CAMPAIGN.isViewed().booleanValue())) || (this.c != UnityAdsMainView.UnityAdsMainViewState.VideoPlayer) || ((this.c == UnityAdsMainView.UnityAdsMainViewState.VideoPlayer) && (this.videoplayerview != null) && (this.videoplayerview.getSecondsUntilBackButtonAllowed() == 0)) || ((this.c == UnityAdsMainView.UnityAdsMainViewState.VideoPlayer) && (UnityAdsWebData.getZoneManager().getCurrentZone().disableBackButtonForSeconds() == 0L)))
    {
      a(UnityAdsMainView.UnityAdsMainViewAction.BackButtonPressed);
      return;
    }
    UnityAdsDeviceLog.debug("Prevented back-button");
  }
  
  public void onCompletion(MediaPlayer paramMediaPlayer)
  {
    UnityAdsDeviceLog.entered();
    afterVideoPlaybackOperations();
    onEventPositionReached(UnityAdsWebData.UnityAdsVideoPosition.End);
    paramMediaPlayer = new JSONObject();
    try
    {
      paramMediaPlayer.put("campaignId", UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId());
      this.webview.sendNativeEventToWebApp("videoCompleted", paramMediaPlayer);
      a(UnityAdsMainView.UnityAdsMainViewAction.VideoEnd);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        UnityAdsDeviceLog.error("Could not create JSON");
      }
    }
  }
  
  public void onEventPositionReached(UnityAdsWebData.UnityAdsVideoPosition paramUnityAdsVideoPosition)
  {
    if ((UnityAdsProperties.SELECTED_CAMPAIGN != null) && (!UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignStatus().equals(UnityAdsCampaign.UnityAdsCampaignStatus.VIEWED))) {
      UnityAds.webdata.sendCampaignViewProgress(UnityAdsProperties.SELECTED_CAMPAIGN, paramUnityAdsVideoPosition);
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    switch (paramInt)
    {
    default: 
      return false;
    }
    onBackButtonClicked(this);
    return true;
  }
  
  public void onVideoHidden()
  {
    if (this.videoplayerview != null)
    {
      this.videoplayerview.setKeepScreenOn(false);
      this.videoplayerview.hideVideo();
      this.videoplayerview = null;
    }
    setViewState(UnityAdsMainView.UnityAdsMainViewState.WebView);
    Object localObject = UnityAdsProperties.getCurrentActivity();
    if (localObject != null) {
      ((Activity)localObject).setRequestedOrientation(-1);
    }
    localObject = new JSONObject();
    try
    {
      ((JSONObject)localObject).put("campaignId", UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId());
      this.webview.sendNativeEventToWebApp("videoCompleted", (JSONObject)localObject);
      a(UnityAdsMainView.UnityAdsMainViewAction.VideoSkipped);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        UnityAdsDeviceLog.error("Could not create JSON");
      }
    }
  }
  
  public void onVideoPlaybackError()
  {
    afterVideoPlaybackOperations();
    UnityAdsDeviceLog.entered();
    UnityAds.webdata.sendAnalyticsRequest("videoError", UnityAdsProperties.SELECTED_CAMPAIGN);
    JSONObject localJSONObject1 = new JSONObject();
    JSONObject localJSONObject2 = new JSONObject();
    JSONObject localJSONObject3 = new JSONObject();
    try
    {
      localJSONObject1.put("textKey", "videoPlaybackError");
      localJSONObject2.put("textKey", "buffering");
      localJSONObject3.put("campaignId", UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId());
      if (this.webview != null)
      {
        this.webview.setWebViewCurrentView("completed", localJSONObject3);
        this.webview.sendNativeEventToWebApp("showError", localJSONObject1);
        this.webview.sendNativeEventToWebApp("videoCompleted", localJSONObject3);
        this.webview.sendNativeEventToWebApp("hideSpinner", localJSONObject2);
      }
      if (UnityAdsProperties.SELECTED_CAMPAIGN != null)
      {
        UnityAdsProperties.SELECTED_CAMPAIGN.setCampaignStatus(UnityAdsCampaign.UnityAdsCampaignStatus.VIEWED);
        UnityAdsProperties.SELECTED_CAMPAIGN = null;
      }
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        UnityAdsDeviceLog.error("Could not create JSON");
      }
    }
  }
  
  public void onVideoPlaybackStarted()
  {
    UnityAdsDeviceLog.entered();
    JSONObject localJSONObject1 = new JSONObject();
    JSONObject localJSONObject2 = new JSONObject();
    try
    {
      localJSONObject1.put("campaignId", UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId());
      localJSONObject2.put("textKey", "buffering");
      a(UnityAdsMainView.UnityAdsMainViewAction.VideoStart);
      bringChildToFront(this.videoplayerview);
      int i = 6;
      if (Build.VERSION.SDK_INT < 9) {
        i = 0;
      }
      if (UnityAdsWebData.getZoneManager().getCurrentZone().useDeviceOrientationForVideo())
      {
        UnityAdsProperties.getCurrentActivity().setRequestedOrientation(0);
        i = -1;
      }
      Activity localActivity = UnityAdsProperties.getCurrentActivity();
      if (localActivity != null) {
        localActivity.setRequestedOrientation(i);
      }
      b(this.videoplayerview);
      if (this.webview != null)
      {
        this.webview.sendNativeEventToWebApp("hideSpinner", localJSONObject2);
        this.webview.setWebViewCurrentView("completed", localJSONObject1);
      }
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        UnityAdsDeviceLog.error("Could not create JSON");
      }
    }
  }
  
  public void onVideoSkip()
  {
    afterVideoPlaybackOperations();
    JSONObject localJSONObject = new JSONObject();
    try
    {
      localJSONObject.put("campaignId", UnityAdsProperties.SELECTED_CAMPAIGN.getCampaignId());
      this.webview.sendNativeEventToWebApp("videoCompleted", localJSONObject);
      a(UnityAdsMainView.UnityAdsMainViewAction.VideoSkipped);
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        UnityAdsDeviceLog.error("Could not create JSON");
      }
    }
  }
  
  public void onWebAppLoaded()
  {
    this.webview.initWebApp(UnityAds.webdata.getData());
  }
  
  public void openAds(String paramString, JSONObject paramJSONObject)
  {
    if ((UnityAdsProperties.getCurrentActivity() != null) && ((UnityAdsProperties.getCurrentActivity() instanceof UnityAdsFullscreenActivity)))
    {
      this.webview.setWebViewCurrentView(paramString, paramJSONObject);
      if ((getParent() != null) && ((ViewGroup)getParent() != null)) {
        ((ViewGroup)getParent()).removeView(this);
      }
      if (getParent() == null) {
        UnityAdsProperties.getCurrentActivity().addContentView(this, new FrameLayout.LayoutParams(-1, -1));
      }
      setViewState(UnityAdsMainView.UnityAdsMainViewState.WebView);
      return;
    }
    UnityAdsDeviceLog.error("Cannot open, wrong activity");
  }
  
  public void setViewState(UnityAdsMainView.UnityAdsMainViewState paramUnityAdsMainViewState)
  {
    if (!this.c.equals(paramUnityAdsMainViewState))
    {
      this.c = paramUnityAdsMainViewState;
      switch (a.a[paramUnityAdsMainViewState.ordinal()])
      {
      }
    }
    do
    {
      return;
      a(this.webview);
      addView(this.webview, new FrameLayout.LayoutParams(-1, -1));
      b(this.webview);
      return;
    } while (this.videoplayerview != null);
    this.videoplayerview = new UnityAdsVideoPlayView(UnityAdsProperties.getCurrentActivity().getBaseContext(), this);
    this.videoplayerview.setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
    this.videoplayerview.setId(1002);
    addView(this.videoplayerview);
    bringChildToFront(this.webview);
    b(this.webview);
  }
}
