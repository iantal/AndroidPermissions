package com.chartboost.sdk;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.text.TextUtils;
import com.chartboost.sdk.Libraries.CBLogging;
import com.chartboost.sdk.Libraries.CBLogging.Level;
import com.chartboost.sdk.Libraries.CBOrientation;
import com.chartboost.sdk.Libraries.CBOrientation.Difference;
import com.chartboost.sdk.Libraries.CBUtility;
import com.chartboost.sdk.Libraries.a;
import com.chartboost.sdk.Libraries.e.a;
import com.chartboost.sdk.Libraries.f;
import com.chartboost.sdk.Libraries.f.k;
import com.chartboost.sdk.impl.av;
import com.chartboost.sdk.impl.k.a;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public final class CBPreferences
{
  private static volatile CBPreferences p = null;
  private String a;
  private String b;
  private String c;
  private ChartboostDelegate d;
  private int e = 30000;
  private boolean f = false;
  private CBOrientation g;
  private boolean h;
  private boolean i = false;
  private boolean j = false;
  private String k = null;
  private Chartboost l = null;
  private String m = null;
  private SharedPreferences n = null;
  private boolean o = false;
  
  private CBPreferences() {}
  
  private SharedPreferences a()
  {
    if (this.n == null) {
      this.n = CBUtility.a();
    }
    return this.n;
  }
  
  public static CBPreferences getInstance()
  {
    Chartboost.sharedChartboost();
    if (p == null) {
      p = new CBPreferences();
    }
    return p;
  }
  
  protected void a(Chartboost.a paramA)
  {
    av localAv = new av("/api/config", null, "main");
    localAv.a(false);
    localAv.b(false);
    localAv.a(k.a.c);
    localAv.a(f.a(new f.k[] { f.a("status", a.a) }));
    localAv.a(new CBPreferences.1(this, paramA));
  }
  
  protected void a(e.a paramA)
  {
    if (paramA != null)
    {
      paramA = paramA.f();
      if (paramA != null)
      {
        SharedPreferences.Editor localEditor = a().edit();
        Iterator localIterator = paramA.keySet().iterator();
        while (localIterator.hasNext())
        {
          String str = (String)localIterator.next();
          Object localObject = paramA.get(str);
          if ((localObject instanceof String)) {
            localEditor.putString(str, (String)localObject);
          } else if ((localObject instanceof Integer)) {
            localEditor.putInt(str, ((Integer)localObject).intValue());
          } else if ((localObject instanceof Float)) {
            localEditor.putFloat(str, ((Float)localObject).floatValue());
          } else if ((localObject instanceof Long)) {
            localEditor.putLong(str, ((Long)localObject).longValue());
          } else if ((localObject instanceof Boolean)) {
            localEditor.putBoolean(str, ((Boolean)localObject).booleanValue());
          } else if (localObject != null) {
            localEditor.putString(str, localObject.toString());
          }
        }
        localEditor.commit();
      }
    }
  }
  
  public boolean getAnimationsOff()
  {
    return this.j;
  }
  
  public String getAppID()
  {
    this.a = a().getString("appId", this.a);
    return this.a;
  }
  
  public String getAppPublicKey()
  {
    this.c = a().getString("appPublicKey", this.c);
    return this.c;
  }
  
  public String getAppSignature()
  {
    this.b = a().getString("appSignature", this.b);
    return this.b;
  }
  
  public String getCustomID()
  {
    return this.m;
  }
  
  public ChartboostDelegate getDelegate()
  {
    return this.d;
  }
  
  public CBOrientation.Difference getForcedOrientationDifference()
  {
    if (!this.h) {
      return CBOrientation.Difference.ANGLE_0;
    }
    CBOrientation localCBOrientation1 = CBUtility.c(this.l.getContext());
    CBOrientation localCBOrientation2 = getOrientation();
    if ((localCBOrientation2 == CBOrientation.UNSPECIFIED) || (localCBOrientation2 == localCBOrientation1)) {
      return CBOrientation.Difference.ANGLE_0;
    }
    if (localCBOrientation2 == localCBOrientation1.rotate90()) {
      return CBOrientation.Difference.ANGLE_90;
    }
    if (localCBOrientation2 == localCBOrientation1.rotate180()) {
      return CBOrientation.Difference.ANGLE_180;
    }
    return CBOrientation.Difference.ANGLE_270;
  }
  
  public boolean getIgnoreErrors()
  {
    return this.i;
  }
  
  public boolean getImpressionsUseActivities()
  {
    return this.f;
  }
  
  public CBLogging.Level getLoggingLevel()
  {
    return CBLogging.a;
  }
  
  public CBOrientation getOrientation()
  {
    if (this.l.getContext() == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling getOrientation().");
    }
    if ((this.h) && (this.g != CBOrientation.UNSPECIFIED)) {
      return this.g;
    }
    return CBUtility.c(this.l.getContext());
  }
  
  public int getTimeout()
  {
    return this.e;
  }
  
  public JSONObject getTrackingLevels()
  {
    Object localObject = a().getString("trackingLevels", "");
    try
    {
      if (!TextUtils.isEmpty((CharSequence)localObject))
      {
        localObject = new JSONObject((String)localObject);
        return localObject;
      }
    }
    catch (JSONException localJSONException)
    {
      CBLogging.b("preferences", "error creating json", localJSONException);
    }
    return null;
  }
  
  public String getUserAgentSuffix()
  {
    if (this.k == null) {
      return "";
    }
    return this.k;
  }
  
  public void setAnimationsOff(boolean paramBoolean)
  {
    this.j = paramBoolean;
  }
  
  public void setAppID(String paramString)
  {
    this.a = paramString;
    a().edit().putString("appId", paramString).commit();
  }
  
  public void setAppPublicKey(String paramString)
  {
    this.c = paramString;
    a().edit().putString("appPublicKey", paramString).commit();
  }
  
  public void setAppSignature(String paramString)
  {
    this.b = paramString;
    a().edit().putString("appSignature", paramString).commit();
  }
  
  public void setCustomID(String paramString)
  {
    this.m = paramString;
  }
  
  public void setDelegate(ChartboostDelegate paramChartboostDelegate)
  {
    this.d = paramChartboostDelegate;
  }
  
  public void setIgnoreErrors(boolean paramBoolean)
  {
    this.i = paramBoolean;
  }
  
  public void setImpressionsUseActivities(boolean paramBoolean)
  {
    this.f = paramBoolean;
  }
  
  public void setLoggingLevel(CBLogging.Level paramLevel)
  {
    CBLogging.a = paramLevel;
  }
  
  public void setOrientation(CBOrientation paramCBOrientation)
  {
    boolean bool = true;
    if ((!this.o) && (this.l.getContext() != null) && (this.l.getContext().getApplicationInfo().targetSdkVersion >= 14))
    {
      this.o = true;
      CBLogging.a("The CBPreferences.setOrientation method is not supported when you set your app's targetSdkVersion to 14 or higher in your Android Manifest.");
    }
    if (paramCBOrientation != CBOrientation.UNSPECIFIED) {}
    for (;;)
    {
      this.h = bool;
      this.g = paramCBOrientation;
      return;
      bool = false;
    }
  }
  
  public void setTimeout(int paramInt)
  {
    this.e = paramInt;
  }
  
  public void setTrackingLevels(JSONObject paramJSONObject)
  {
    a().edit().putString("trackingLevels", paramJSONObject.toString()).commit();
  }
  
  public void setUserAgentSuffix(String paramString)
  {
    this.k = paramString;
  }
}
