package com.chartboost.sdk.impl;

import android.content.Context;
import android.os.Bundle;
import com.chartboost.sdk.Libraries.e.a;
import com.chartboost.sdk.Libraries.i;
import com.chartboost.sdk.Model.CBError.CBImpressionError;
import com.chartboost.sdk.Model.a;
import com.chartboost.sdk.d;
import com.chartboost.sdk.d.a;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class at
  extends d
{
  private List j = new ArrayList();
  private i k = new i(this);
  private i l = new i(this);
  private i m = new i(this);
  private Map n;
  
  public at(a paramA)
  {
    super(paramA);
  }
  
  protected d.a a(Context paramContext)
  {
    return new at.a(this, paramContext, null);
  }
  
  public boolean a(e.a paramA)
  {
    if (!super.a(paramA)) {
      return false;
    }
    paramA = paramA.a("cells");
    if (paramA.b())
    {
      a(CBError.CBImpressionError.INTERNAL);
      return false;
    }
    this.n = new HashMap();
    int i = 0;
    if (i < paramA.n())
    {
      e.a localA = paramA.c(i);
      this.j.add(localA);
      Object localObject = localA.a("type");
      if (((e.a)localObject).equals("regular"))
      {
        localA = localA.a("assets");
        if (localA.c())
        {
          localObject = new i(this);
          this.n.put("" + i, localObject);
          ((i)localObject).a(localA, "icon", new Bundle());
        }
      }
      for (;;)
      {
        i += 1;
        break;
        if (((e.a)localObject).equals("featured"))
        {
          localA = localA.a("assets");
          if (localA.c())
          {
            localObject = new i(this);
            this.n.put(String.format(Locale.US, "%d-%s", new Object[] { Integer.valueOf(i), "portrait" }), localObject);
            ((i)localObject).a(localA, "portrait", new Bundle());
            localObject = new i(this);
            this.n.put(String.format(Locale.US, "%d-%s", new Object[] { Integer.valueOf(i), "landscape" }), localObject);
            ((i)localObject).a(localA, "landscape", new Bundle());
          }
        }
        else if (!((e.a)localObject).equals("webview")) {}
      }
    }
    this.k.a("close");
    this.l.a("header-center");
    this.m.a("header-tile");
    return true;
  }
  
  public void d()
  {
    super.d();
    this.j = null;
    Iterator localIterator = this.n.entrySet().iterator();
    while (localIterator.hasNext()) {
      ((i)((Map.Entry)localIterator.next()).getValue()).d();
    }
    this.n.clear();
    this.k.d();
    this.l.d();
    this.m.d();
    this.k = null;
    this.m = null;
    this.l = null;
  }
}
