package com.chartboost.sdk.impl;

import android.os.Handler;
import android.os.Looper;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class l
{
  private AtomicInteger a = new AtomicInteger();
  private final Map b = new HashMap();
  private final Set c = new HashSet();
  private final PriorityBlockingQueue d = new PriorityBlockingQueue();
  private final PriorityBlockingQueue e = new PriorityBlockingQueue();
  private final b f;
  private final f g;
  private final n h;
  private g[] i;
  private c j;
  
  public l(b paramB, f paramF)
  {
    this(paramB, paramF, 4);
  }
  
  public l(b paramB, f paramF, int paramInt)
  {
    this(paramB, paramF, paramInt, new e(new Handler(Looper.getMainLooper())));
  }
  
  public l(b paramB, f paramF, int paramInt, n paramN)
  {
    this.f = paramB;
    this.g = paramF;
    this.i = new g[paramInt];
    this.h = paramN;
  }
  
  public k a(k paramK)
  {
    paramK.a(this);
    synchronized (this.c)
    {
      this.c.add(paramK);
      paramK.a(c());
      paramK.a("add-to-queue");
      if (!paramK.r())
      {
        this.e.add(paramK);
        return paramK;
      }
    }
    for (;;)
    {
      String str;
      synchronized (this.b)
      {
        str = paramK.e();
        if (this.b.containsKey(str))
        {
          Queue localQueue = (Queue)this.b.get(str);
          ??? = localQueue;
          if (localQueue == null) {
            ??? = new LinkedList();
          }
          ((Queue)???).add(paramK);
          this.b.put(str, ???);
          if (s.b) {
            s.a("Request for cacheKey=%s is in flight, putting on hold.", new Object[] { str });
          }
          return paramK;
        }
      }
      this.b.put(str, null);
      this.d.add(paramK);
    }
  }
  
  public void a()
  {
    b();
    this.j = new c(this.d, this.e, this.f, this.h);
    this.j.start();
    int k = 0;
    for (;;)
    {
      if (k >= this.i.length) {
        return;
      }
      g localG = new g(this.e, this.g, this.f, this.h);
      this.i[k] = localG;
      localG.start();
      k += 1;
    }
  }
  
  public void a(l.a paramA)
  {
    synchronized (this.c)
    {
      Iterator localIterator = this.c.iterator();
      k localK;
      do
      {
        if (!localIterator.hasNext()) {
          return;
        }
        localK = (k)localIterator.next();
      } while (!paramA.a(localK));
      localK.g();
    }
  }
  
  public void a(Object paramObject)
  {
    if (paramObject == null) {
      throw new IllegalArgumentException("Cannot cancelAll with a null tag");
    }
    a(new l.1(this, paramObject));
  }
  
  public void b()
  {
    if (this.j != null) {
      this.j.a();
    }
    int k = 0;
    for (;;)
    {
      if (k >= this.i.length) {
        return;
      }
      if (this.i[k] != null) {
        this.i[k].a();
      }
      k += 1;
    }
  }
  
  void b(k paramK)
  {
    synchronized (this.c)
    {
      this.c.remove(paramK);
      if (!paramK.r()) {}
    }
    synchronized (this.b)
    {
      paramK = paramK.e();
      Queue localQueue = (Queue)this.b.remove(paramK);
      if (localQueue != null)
      {
        if (s.b) {
          s.a("Releasing %d waiting requests for cacheKey=%s.", new Object[] { Integer.valueOf(localQueue.size()), paramK });
        }
        this.d.addAll(localQueue);
      }
      return;
      paramK = finally;
      throw paramK;
    }
  }
  
  public int c()
  {
    return this.a.incrementAndGet();
  }
}
