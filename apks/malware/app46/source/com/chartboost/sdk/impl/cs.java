package com.chartboost.sdk.impl;

import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public final class cs
{
  public static final byte[] a = new byte[0];
  public static final String[] b = new String[0];
  public static final InputStream c = new ByteArrayInputStream(a);
  public static final Charset d = Charset.forName("US-ASCII");
  public static final Charset e = Charset.forName("UTF-8");
  public static final List f = a(Arrays.asList(new cj[] { cj.a, cj.b, cj.c }));
  public static final List g = a(Arrays.asList(new cj[] { cj.b, cj.c }));
  public static final List h = a(Arrays.asList(new cj[] { cj.a, cj.c }));
  
  public static int a(String paramString)
  {
    if ("http".equals(paramString)) {
      return 80;
    }
    if ("https".equals(paramString)) {
      return 443;
    }
    return -1;
  }
  
  private static int a(String paramString, int paramInt)
  {
    if (paramInt != -1) {
      return paramInt;
    }
    return a(paramString);
  }
  
  public static int a(URI paramURI)
  {
    return a(paramURI.getScheme(), paramURI.getPort());
  }
  
  public static int a(URL paramURL)
  {
    return a(paramURL.getProtocol(), paramURL.getPort());
  }
  
  public static cj a(ds paramDs)
  {
    Object localObject;
    if (paramDs == null)
    {
      localObject = cj.c;
      return localObject;
    }
    cj[] arrayOfCj = cj.values();
    int j = arrayOfCj.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        break label54;
      }
      cj localCj = arrayOfCj[i];
      localObject = localCj;
      if (localCj.d.equals(paramDs)) {
        break;
      }
      i += 1;
    }
    label54:
    throw new IOException("Unexpected protocol: " + paramDs.a());
  }
  
  public static List a(List paramList)
  {
    return Collections.unmodifiableList(new ArrayList(paramList));
  }
  
  public static List a(Object[] paramArrayOfObject)
  {
    return Collections.unmodifiableList(Arrays.asList((Object[])paramArrayOfObject.clone()));
  }
  
  public static ThreadFactory a(String paramString, boolean paramBoolean)
  {
    return new cs.1(paramString, paramBoolean);
  }
  
  public static void a(long paramLong1, long paramLong2, long paramLong3)
  {
    if (((paramLong2 | paramLong3) < 0L) || (paramLong2 > paramLong1) || (paramLong1 - paramLong2 < paramLong3)) {
      throw new ArrayIndexOutOfBoundsException();
    }
  }
  
  public static void a(Closeable paramCloseable)
  {
    if (paramCloseable != null) {}
    try
    {
      paramCloseable.close();
      return;
    }
    catch (RuntimeException paramCloseable)
    {
      throw paramCloseable;
    }
    catch (Exception paramCloseable) {}
  }
  
  public static void a(Closeable paramCloseable1, Closeable paramCloseable2)
  {
    Object localObject = null;
    for (;;)
    {
      try
      {
        paramCloseable1.close();
        paramCloseable1 = localObject;
      }
      catch (Throwable paramCloseable1)
      {
        continue;
      }
      try
      {
        paramCloseable2.close();
        paramCloseable2 = paramCloseable1;
      }
      catch (Throwable localThrowable)
      {
        paramCloseable2 = paramCloseable1;
        if (paramCloseable1 != null) {
          continue;
        }
        paramCloseable2 = localThrowable;
        continue;
        if (!(paramCloseable2 instanceof IOException)) {
          continue;
        }
        throw ((IOException)paramCloseable2);
        if (!(paramCloseable2 instanceof RuntimeException)) {
          continue;
        }
        throw ((RuntimeException)paramCloseable2);
        if (!(paramCloseable2 instanceof Error)) {
          continue;
        }
        throw ((Error)paramCloseable2);
        throw new AssertionError(paramCloseable2);
      }
    }
    if (paramCloseable2 == null) {
      return;
    }
  }
  
  public static boolean a(ee paramEe, int paramInt)
  {
    long l = System.nanoTime();
    dx localDx = new dx();
    while (TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - l) < paramInt)
    {
      if (paramEe.b(localDx, 2048L) == -1L) {
        return true;
      }
      localDx.o();
    }
    return false;
  }
  
  public static boolean a(Object paramObject1, Object paramObject2)
  {
    return (paramObject1 == paramObject2) || ((paramObject1 != null) && (paramObject1.equals(paramObject2)));
  }
}
