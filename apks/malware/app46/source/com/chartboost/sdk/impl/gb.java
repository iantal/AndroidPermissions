package com.chartboost.sdk.impl;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;

final class gb
  implements gd, Map
{
  private final ConcurrentMap a;
  private final gd b;
  
  gb(ConcurrentMap paramConcurrentMap, gd paramGd)
  {
    this.a = ((ConcurrentMap)fy.a("map", paramConcurrentMap));
    this.b = ((gd)fy.a("function", paramGd));
  }
  
  public static Map a(gd paramGd)
  {
    return new gb(gc.c(), paramGd);
  }
  
  public Object a(Object paramObject)
  {
    return get(paramObject);
  }
  
  public void clear()
  {
    this.a.clear();
  }
  
  public boolean containsKey(Object paramObject)
  {
    return this.a.containsKey(paramObject);
  }
  
  public boolean containsValue(Object paramObject)
  {
    return this.a.containsValue(paramObject);
  }
  
  public Set entrySet()
  {
    return this.a.entrySet();
  }
  
  public boolean equals(Object paramObject)
  {
    return this.a.equals(paramObject);
  }
  
  public Object get(Object paramObject)
  {
    for (;;)
    {
      Object localObject = this.a.get(paramObject);
      if (localObject != null) {
        return localObject;
      }
      localObject = this.b.a(paramObject);
      if (localObject == null) {
        return null;
      }
      this.a.putIfAbsent(paramObject, localObject);
    }
  }
  
  public int hashCode()
  {
    return this.a.hashCode();
  }
  
  public boolean isEmpty()
  {
    return this.a.isEmpty();
  }
  
  public Set keySet()
  {
    return this.a.keySet();
  }
  
  public Object put(Object paramObject1, Object paramObject2)
  {
    return this.a.put(paramObject1, paramObject2);
  }
  
  public void putAll(Map paramMap)
  {
    this.a.putAll(paramMap);
  }
  
  public Object remove(Object paramObject)
  {
    return this.a.remove(paramObject);
  }
  
  public int size()
  {
    return this.a.size();
  }
  
  public Collection values()
  {
    return this.a.values();
  }
}
