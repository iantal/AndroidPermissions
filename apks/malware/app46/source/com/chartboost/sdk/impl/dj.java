package com.chartboost.sdk.impl;

import java.io.InputStream;
import java.net.CacheRequest;
import java.net.CacheResponse;
import java.net.HttpURLConnection;
import java.net.ResponseCache;
import java.net.SecureCacheResponse;
import java.net.URI;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.net.ssl.SSLPeerUnverifiedException;

public class dj
  implements ci
{
  private final ResponseCache a;
  
  public dj(ResponseCache paramResponseCache)
  {
    this.a = paramResponseCache;
  }
  
  private static cw a(CacheResponse paramCacheResponse)
  {
    Object localObject1 = paramCacheResponse.getHeaders();
    paramCacheResponse = new cw.a();
    localObject1 = ((Map)localObject1).entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      Object localObject2 = (Map.Entry)((Iterator)localObject1).next();
      String str = (String)((Map.Entry)localObject2).getKey();
      if (str != null)
      {
        localObject2 = ((List)((Map.Entry)localObject2).getValue()).iterator();
        while (((Iterator)localObject2).hasNext()) {
          paramCacheResponse.a(str, (String)((Iterator)localObject2).next());
        }
      }
    }
    return paramCacheResponse.a();
  }
  
  private static di.a a(cw paramCw, InputStream paramInputStream)
  {
    return new dj.1(paramCw, paramInputStream);
  }
  
  private static String b(CacheResponse paramCacheResponse)
  {
    paramCacheResponse = (List)paramCacheResponse.getHeaders().get(null);
    if ((paramCacheResponse == null) || (paramCacheResponse.size() == 0)) {
      return null;
    }
    return (String)paramCacheResponse.get(0);
  }
  
  private static HttpURLConnection b(di paramDi)
  {
    if (paramDi.a().k()) {
      return new dj.b(new dj.a(paramDi));
    }
    return new dj.a(paramDi);
  }
  
  private CacheResponse c(dg paramDg)
  {
    Map localMap = d(paramDg);
    return this.a.get(paramDg.b(), paramDg.c(), localMap);
  }
  
  private static Map d(dg paramDg)
  {
    return df.a(paramDg.d(), null);
  }
  
  private static RuntimeException f()
  {
    throw new UnsupportedOperationException("ResponseCache cannot modify the request.");
  }
  
  private static RuntimeException g()
  {
    throw new UnsupportedOperationException("ResponseCache cannot access request headers");
  }
  
  private static RuntimeException h()
  {
    throw new UnsupportedOperationException("ResponseCache cannot access SSL internals");
  }
  
  private static RuntimeException i()
  {
    throw new UnsupportedOperationException("ResponseCache cannot access the response body.");
  }
  
  public di a(dg paramDg)
  {
    Object localObject = c(paramDg);
    if (localObject == null) {
      return null;
    }
    di.b localB = new di.b();
    localB.a(paramDg);
    localB.a(b((CacheResponse)localObject));
    paramDg = a((CacheResponse)localObject);
    localB.a(paramDg);
    localB.a(ck.a);
    localB.a(a(paramDg, ((CacheResponse)localObject).getBody()));
    SecureCacheResponse localSecureCacheResponse;
    if ((localObject instanceof SecureCacheResponse)) {
      localSecureCacheResponse = (SecureCacheResponse)localObject;
    }
    try
    {
      paramDg = localSecureCacheResponse.getServerCertificateChain();
      List localList = localSecureCacheResponse.getLocalCertificateChain();
      localObject = localList;
      if (localList == null) {
        localObject = Collections.emptyList();
      }
      localB.a(cf.a(localSecureCacheResponse.getCipherSuite(), paramDg, (List)localObject));
      return localB.a();
    }
    catch (SSLPeerUnverifiedException paramDg)
    {
      for (;;)
      {
        paramDg = Collections.emptyList();
      }
    }
  }
  
  public CacheRequest a(di paramDi)
  {
    URI localURI = paramDi.a().b();
    paramDi = b(paramDi);
    return this.a.put(localURI, paramDi);
  }
  
  public void a() {}
  
  public void a(ck paramCk) {}
  
  public void a(di paramDi1, di paramDi2) {}
  
  public boolean b(dg paramDg)
  {
    return false;
  }
}
