package com.chartboost.sdk.impl;

import java.net.CacheRequest;
import java.net.Proxy;

public final class dc
  implements do
{
  private final da a;
  private final cy b;
  
  public dc(da paramDa, cy paramCy)
  {
    this.a = paramDa;
    this.b = paramCy;
  }
  
  public ed a(dg paramDg)
  {
    long l = df.a(paramDg);
    if (this.a.c)
    {
      if (l > 2147483647L) {
        throw new IllegalStateException("Use setFixedLengthStreamingMode() or setChunkedStreamingMode() for requests larger than 2 GiB.");
      }
      if (l != -1L)
      {
        b(paramDg);
        return new dk((int)l);
      }
      return new dk();
    }
    if ("chunked".equalsIgnoreCase(paramDg.a("Transfer-Encoding")))
    {
      b(paramDg);
      return this.b.f();
    }
    if (l != -1L)
    {
      b(paramDg);
      return this.b.a(l);
    }
    throw new IllegalStateException("Cannot stream a request body without chunked encoding or a known content length!");
  }
  
  public ee a(CacheRequest paramCacheRequest)
  {
    if (!this.a.o()) {
      return this.b.a(paramCacheRequest, 0L);
    }
    if ("chunked".equalsIgnoreCase(this.a.h().a("Transfer-Encoding"))) {
      return this.b.a(paramCacheRequest, this.a);
    }
    long l = df.a(this.a.h());
    if (l != -1L) {
      return this.b.a(paramCacheRequest, l);
    }
    return this.b.a(paramCacheRequest);
  }
  
  public void a()
  {
    this.b.d();
  }
  
  public void a(dk paramDk)
  {
    this.b.a(paramDk);
  }
  
  public di.b b()
  {
    return this.b.e();
  }
  
  public void b(dg paramDg)
  {
    this.a.b();
    String str = dh.a(paramDg, this.a.k().b().b().type(), this.a.k().k());
    this.b.a(paramDg.g(), str);
  }
  
  public void c()
  {
    if (d())
    {
      this.b.a();
      return;
    }
    this.b.b();
  }
  
  public boolean d()
  {
    if ("close".equalsIgnoreCase(this.a.g().a("Connection"))) {}
    while (("close".equalsIgnoreCase(this.a.h().a("Connection"))) || (this.b.c())) {
      return false;
    }
    return true;
  }
  
  public void e()
  {
    this.b.g();
  }
}
