package com.chartboost.sdk.impl;

import android.content.Context;
import android.os.CountDownTimer;
import android.os.Handler;
import android.text.TextUtils;
import com.chartboost.sdk.Libraries.CBLogging;
import com.chartboost.sdk.Libraries.e;
import com.chartboost.sdk.Libraries.e.a;
import com.chartboost.sdk.Libraries.e.b;
import com.chartboost.sdk.Libraries.g;
import com.chartboost.sdk.Model.CBError;
import com.chartboost.sdk.Model.CBError.a;
import com.chartboost.sdk.Tracking.a;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;

public class az
  implements Observer
{
  private static az c;
  private static List e = new ArrayList();
  private static long k = 240000L;
  private ax a = null;
  private Handler b = new Handler();
  private l d = aa.a(paramContext.getApplicationContext(), new az.a(this));
  private a f;
  private g g = new g("CBRequestManager", false);
  private ConcurrentHashMap h = new ConcurrentHashMap();
  private ConcurrentHashMap i = new ConcurrentHashMap();
  private CountDownTimer j;
  private volatile boolean l = false;
  
  private az(Context paramContext)
  {
    this.a.addObserver(this);
  }
  
  private ay a(String paramString)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (!TextUtils.isEmpty(paramString))
    {
      paramString = this.g.a(paramString);
      localObject1 = localObject2;
      if (paramString != null)
      {
        localObject1 = localObject2;
        if (paramString.a("isEncryptedCBRequest") != null)
        {
          if (!paramString.i("isEncryptedCBRequest")) {
            break label53;
          }
          localObject1 = bc.b(paramString);
        }
      }
    }
    return localObject1;
    label53:
    return av.a(paramString);
  }
  
  public static az a(Context paramContext)
  {
    if (c == null) {}
    try
    {
      if (c == null) {
        c = new az(paramContext);
      }
      return c;
    }
    finally {}
  }
  
  private void a(ay paramAy)
  {
    Object localObject;
    if (paramAy != null)
    {
      if (!paramAy.l) {
        break label93;
      }
      if (!(paramAy instanceof av)) {
        break label65;
      }
      localObject = (av)paramAy;
      localObject = this.g.a(null, ((av)localObject).a());
    }
    for (;;)
    {
      if (((paramAy.l) || (paramAy.s)) && (localObject != null)) {
        this.h.put(paramAy, localObject);
      }
      return;
      label65:
      if ((paramAy instanceof bc))
      {
        localObject = (bc)paramAy;
        localObject = this.g.a(null, ((bc)localObject).a());
      }
      else
      {
        label93:
        localObject = null;
      }
    }
  }
  
  private void a(ay paramAy, i paramI, CBError paramCBError, boolean paramBoolean)
  {
    if (paramAy == null) {
      return;
    }
    if (this.f == null) {
      this.f = a.a();
    }
    e.b localB1 = e.a("endpoint", paramAy.a);
    if (paramI == null)
    {
      paramI = "None";
      e.b localB2 = e.a("statuscode", paramI);
      if (paramCBError != null) {
        break label149;
      }
      paramI = "None";
      label52:
      e.b localB3 = e.a("error", paramI);
      if (paramCBError != null) {
        break label157;
      }
      paramI = "None";
      label67:
      paramI = e.a(new e.b[] { localB1, localB2, localB3, e.a("errorDescription", paramI), e.a("retryCount", Integer.valueOf(paramAy.r)) });
      if (!paramBoolean) {
        break label165;
      }
    }
    label149:
    label157:
    label165:
    for (paramAy = "success";; paramAy = "failure")
    {
      a.a("request_manager", "request", paramAy, null, null, null, paramI.e());
      return;
      paramI = Integer.valueOf(paramI.a);
      break;
      paramI = paramCBError.a();
      break label52;
      paramI = paramCBError.b();
      break label67;
    }
  }
  
  public static void b()
  {
    Object localObject1 = new ArrayList();
    try
    {
      ((List)localObject1).addAll(e);
      e.clear();
      localObject1 = ((List)localObject1).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        Runnable localRunnable = (Runnable)((Iterator)localObject1).next();
        aw.a().execute(localRunnable);
      }
      return;
    }
    finally {}
  }
  
  public l a()
  {
    return this.d;
  }
  
  protected void a(ay paramAy, ay.c paramC)
  {
    CBError localCBError;
    if (((paramAy instanceof bc)) && (bc.l() == null)) {
      if (paramC != null)
      {
        localCBError = new CBError(CBError.a.f, "app public key is not set");
        a(paramAy, null, localCBError, false);
        paramC.a(paramAy, localCBError, null);
      }
    }
    do
    {
      return;
      if (this.a.c()) {
        break;
      }
      localCBError = new CBError(CBError.a.b, null);
      paramAy.k = false;
      if (paramAy.t)
      {
        paramAy.t = false;
        a(paramAy);
      }
      a(paramAy, null, localCBError, false);
    } while (paramC == null);
    paramC.a(paramAy, localCBError, null);
    return;
    if (paramAy.t)
    {
      paramAy.t = false;
      a(paramAy);
    }
    a(new az.b(this, paramAy));
  }
  
  /* Error */
  public void a(Runnable paramRunnable)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_2
    //   2: ldc -30
    //   4: monitorenter
    //   5: invokestatic 306	com/chartboost/sdk/Libraries/c:c	()Lcom/chartboost/sdk/Libraries/c$a;
    //   8: astore_3
    //   9: aload_3
    //   10: getstatic 311	com/chartboost/sdk/Libraries/c$a:a	Lcom/chartboost/sdk/Libraries/c$a;
    //   13: if_acmpeq +10 -> 23
    //   16: aload_3
    //   17: getstatic 313	com/chartboost/sdk/Libraries/c$a:b	Lcom/chartboost/sdk/Libraries/c$a;
    //   20: if_acmpne +30 -> 50
    //   23: getstatic 38	com/chartboost/sdk/impl/az:e	Ljava/util/List;
    //   26: aload_1
    //   27: invokeinterface 317 2 0
    //   32: pop
    //   33: ldc -30
    //   35: monitorexit
    //   36: iload_2
    //   37: ifeq +12 -> 49
    //   40: invokestatic 256	com/chartboost/sdk/impl/aw:a	()Ljava/util/concurrent/ExecutorService;
    //   43: aload_1
    //   44: invokeinterface 262 2 0
    //   49: return
    //   50: iconst_1
    //   51: istore_2
    //   52: goto -19 -> 33
    //   55: astore_1
    //   56: ldc -30
    //   58: monitorexit
    //   59: aload_1
    //   60: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	61	0	this	az
    //   0	61	1	paramRunnable	Runnable
    //   1	51	2	m	int
    //   8	9	3	localA	com.chartboost.sdk.Libraries.c.a
    // Exception table:
    //   from	to	target	type
    //   5	23	55	finally
    //   23	33	55	finally
    //   33	36	55	finally
    //   56	59	55	finally
  }
  
  public void c()
  {
    int m = 0;
    Object localObject2;
    try
    {
      if ((this.h != null) && (!this.h.isEmpty()))
      {
        Iterator localIterator = this.h.keySet().iterator();
        while (localIterator.hasNext())
        {
          localObject2 = (ay)localIterator.next();
          if ((localObject2 != null) && (!((ay)localObject2).k))
          {
            ((ay)localObject2).r += 1;
            ((ay)localObject2).a(((ay)localObject2).i);
          }
        }
      }
      arrayOfString = this.g.a();
    }
    finally {}
    String[] arrayOfString;
    int n;
    if (arrayOfString != null) {
      n = arrayOfString.length;
    }
    for (;;)
    {
      if (m < n)
      {
        localObject2 = arrayOfString[m];
        ay localAy = a((String)localObject2);
        if (localAy != null)
        {
          this.h.put(localAy, this.g.c((String)localObject2));
          localAy.t = false;
          localAy.r += 1;
          localAy.a(localAy.i);
        }
      }
      else
      {
        d();
        e();
        return;
      }
      m += 1;
    }
  }
  
  public void d()
  {
    if (this.f == null) {
      this.f = a.a();
    }
    try
    {
      if (this.i.isEmpty())
      {
        boolean bool = this.l;
        if (!bool) {
          try
          {
            g localG = this.f.m();
            String[] arrayOfString = localG.a();
            if (arrayOfString != null)
            {
              int n = arrayOfString.length;
              int m = 0;
              while (m < n)
              {
                String str = arrayOfString[m];
                if (!this.f.b(str))
                {
                  this.l = true;
                  Object localObject2 = localG.a(str);
                  if (((e.a)localObject2).c())
                  {
                    CBLogging.a("CBRequestManager", "### Flushing out " + str + "track events from cache to server...");
                    localObject2 = this.f.a((e.a)localObject2);
                    this.i.put(localObject2, localG.c(str));
                    ((ay)localObject2).j();
                  }
                }
                m += 1;
              }
            }
          }
          catch (Exception localException)
          {
            CBLogging.b("CBRequestManager", "Error executing saved requests", localException);
          }
        }
      }
      return;
    }
    finally {}
  }
  
  public void e()
  {
    if (this.j == null) {
      this.j = new az.1(this, k, 1000L).start();
    }
  }
  
  public void f()
  {
    CBLogging.a("CBRequestManager", "Timer stopped:");
    if (this.j != null)
    {
      this.j.cancel();
      this.j = null;
    }
  }
  
  public void update(Observable paramObservable, Object paramObject)
  {
    if (this.j != null) {
      f();
    }
    c();
  }
}
