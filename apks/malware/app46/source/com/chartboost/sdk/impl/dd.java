package com.chartboost.sdk.impl;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpRetryException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.Proxy.Type;
import java.net.SocketPermission;
import java.net.URL;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class dd
  extends HttpURLConnection
{
  final ch a;
  protected IOException b;
  protected da c;
  cf d;
  private cw.a e = new cw.a();
  private long f = -1L;
  private int g;
  private cl h;
  
  public dd(URL paramURL, ch paramCh)
  {
    super(paramURL);
    this.a = paramCh;
  }
  
  private da a(String paramString, cd paramCd, dk paramDk)
  {
    Object localObject1 = new dg.b().a(getURL()).a(paramString, null);
    Object localObject2 = this.e.a();
    int i = 0;
    while (i < ((cw)localObject2).a())
    {
      ((dg.b)localObject1).b(((cw)localObject2).a(i), ((cw)localObject2).b(i));
      i += 1;
    }
    boolean bool;
    if (db.a(paramString)) {
      if (this.f != -1L)
      {
        ((dg.b)localObject1).a("Content-Length", Long.toString(this.f));
        bool = false;
      }
    }
    for (;;)
    {
      localObject2 = ((dg.b)localObject1).a();
      localObject1 = this.a;
      paramString = (String)localObject1;
      if (((ch)localObject1).f() != null)
      {
        paramString = (String)localObject1;
        if (!getUseCaches()) {
          paramString = this.a.o().a(null);
        }
      }
      return new da(paramString, (dg)localObject2, bool, paramCd, null, paramDk);
      if (this.chunkLength > 0)
      {
        ((dg.b)localObject1).a("Transfer-Encoding", "chunked");
        bool = false;
      }
      else
      {
        bool = true;
        continue;
        bool = false;
      }
    }
  }
  
  private void a()
  {
    if (this.b != null) {
      throw this.b;
    }
    if (this.c != null) {
      return;
    }
    this.connected = true;
    do
    {
      try
      {
        if (this.doOutput)
        {
          if (this.method.equals("GET")) {
            this.method = "POST";
          }
        }
        else
        {
          this.c = a(this.method, null, null);
          return;
        }
      }
      catch (IOException localIOException)
      {
        this.b = localIOException;
        throw localIOException;
      }
    } while (db.a(this.method));
    throw new ProtocolException(this.method + " does not support writing");
  }
  
  private void a(String paramString, boolean paramBoolean)
  {
    ArrayList localArrayList = new ArrayList();
    if (paramBoolean) {
      localArrayList.addAll(this.a.m());
    }
    paramString = paramString.split(",", -1);
    int j = paramString.length;
    int i = 0;
    while (i < j)
    {
      String str = paramString[i];
      try
      {
        localArrayList.add(cs.a(ds.a(str)));
        i += 1;
      }
      catch (IOException paramString)
      {
        throw new IllegalStateException(paramString);
      }
    }
    this.a.a(localArrayList);
  }
  
  /* Error */
  private boolean a(boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   4: invokevirtual 205	com/chartboost/sdk/impl/da:a	()V
    //   7: aload_0
    //   8: aload_0
    //   9: getfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   12: invokevirtual 209	com/chartboost/sdk/impl/da:l	()Lcom/chartboost/sdk/impl/cl;
    //   15: putfield 211	com/chartboost/sdk/impl/dd:h	Lcom/chartboost/sdk/impl/cl;
    //   18: aload_0
    //   19: getfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   22: invokevirtual 215	com/chartboost/sdk/impl/da:k	()Lcom/chartboost/sdk/impl/cd;
    //   25: ifnull +32 -> 57
    //   28: aload_0
    //   29: getfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   32: invokevirtual 215	com/chartboost/sdk/impl/da:k	()Lcom/chartboost/sdk/impl/cd;
    //   35: invokevirtual 221	com/chartboost/sdk/impl/cd:i	()Lcom/chartboost/sdk/impl/cf;
    //   38: astore_2
    //   39: aload_0
    //   40: aload_2
    //   41: putfield 223	com/chartboost/sdk/impl/dd:d	Lcom/chartboost/sdk/impl/cf;
    //   44: iload_1
    //   45: ifeq +10 -> 55
    //   48: aload_0
    //   49: getfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   52: invokevirtual 226	com/chartboost/sdk/impl/da:q	()V
    //   55: iconst_1
    //   56: ireturn
    //   57: aconst_null
    //   58: astore_2
    //   59: goto -20 -> 39
    //   62: astore_2
    //   63: aload_0
    //   64: getfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   67: aload_2
    //   68: invokevirtual 229	com/chartboost/sdk/impl/da:a	(Ljava/io/IOException;)Lcom/chartboost/sdk/impl/da;
    //   71: astore_3
    //   72: aload_3
    //   73: ifnull +10 -> 83
    //   76: aload_0
    //   77: aload_3
    //   78: putfield 121	com/chartboost/sdk/impl/dd:c	Lcom/chartboost/sdk/impl/da;
    //   81: iconst_0
    //   82: ireturn
    //   83: aload_0
    //   84: aload_2
    //   85: putfield 119	com/chartboost/sdk/impl/dd:b	Ljava/io/IOException;
    //   88: aload_2
    //   89: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	90	0	this	dd
    //   0	90	1	paramBoolean	boolean
    //   38	21	2	localCf	cf
    //   62	27	2	localIOException	IOException
    //   71	7	3	localDa	da
    // Exception table:
    //   from	to	target	type
    //   0	39	62	java/io/IOException
    //   39	44	62	java/io/IOException
    //   48	55	62	java/io/IOException
  }
  
  private da b()
  {
    a();
    if (this.c.f()) {
      return this.c;
    }
    for (;;)
    {
      if (a(true))
      {
        dd.a localA = c();
        if (localA == dd.a.a)
        {
          this.c.m();
          return this.c;
        }
        String str = this.method;
        ed localEd = this.c.d();
        int i = this.c.h().c();
        if ((i == 300) || (i == 301) || (i == 302) || (i == 303))
        {
          str = "GET";
          this.e.b("Content-Length");
          localEd = null;
        }
        if ((localEd != null) && (!(localEd instanceof dk))) {
          throw new HttpRetryException("Cannot retry streamed HTTP body", i);
        }
        if (localA == dd.a.c) {
          this.c.m();
        }
        this.c = a(str, this.c.n(), (dk)localEd);
      }
    }
  }
  
  private dd.a c()
  {
    Object localObject = this.c.k();
    if (localObject != null) {}
    for (localObject = ((cd)localObject).b().b();; localObject = this.a.c())
    {
      i = getResponseCode();
      switch (i)
      {
      default: 
        return dd.a.a;
      }
    }
    if (((Proxy)localObject).type() != Proxy.Type.HTTP) {
      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");
    }
    localObject = cx.a(this.a.i(), this.c.h(), (Proxy)localObject);
    if (localObject == null) {
      return dd.a.a;
    }
    this.e = ((dg)localObject).g().b();
    return dd.a.b;
    if (!getInstanceFollowRedirects()) {
      return dd.a.a;
    }
    int j = this.g + 1;
    this.g = j;
    if (j > 20) {
      throw new ProtocolException("Too many redirects: " + this.g);
    }
    if ((i == 307) && (!this.method.equals("GET")) && (!this.method.equals("HEAD"))) {
      return dd.a.a;
    }
    localObject = getHeaderField("Location");
    if (localObject == null) {
      return dd.a.a;
    }
    URL localURL = this.url;
    this.url = new URL(localURL, (String)localObject);
    if ((!this.url.getProtocol().equals("https")) && (!this.url.getProtocol().equals("http"))) {
      return dd.a.a;
    }
    boolean bool1 = localURL.getProtocol().equals(this.url.getProtocol());
    if ((!bool1) && (!this.a.k())) {
      return dd.a.a;
    }
    boolean bool2 = localURL.getHost().equals(this.url.getHost());
    if (cs.a(localURL) == cs.a(this.url)) {}
    for (int i = 1; (bool2) && (i != 0) && (bool1); i = 0) {
      return dd.a.b;
    }
    return dd.a.c;
  }
  
  public void a(long paramLong)
  {
    if (this.connected) {
      throw new IllegalStateException("Already connected");
    }
    if (this.chunkLength > 0) {
      throw new IllegalStateException("Already in chunked mode");
    }
    if (paramLong < 0L) {
      throw new IllegalArgumentException("contentLength < 0");
    }
    this.f = paramLong;
    this.fixedContentLength = ((int)Math.min(paramLong, 2147483647L));
  }
  
  public final void addRequestProperty(String paramString1, String paramString2)
  {
    if (this.connected) {
      throw new IllegalStateException("Cannot add request property after connection is made");
    }
    if (paramString1 == null) {
      throw new NullPointerException("field == null");
    }
    if (paramString2 == null)
    {
      cr.a().a("Ignoring header " + paramString1 + " because its value was null.");
      return;
    }
    if (("X-Android-Transports".equals(paramString1)) || ("X-Android-Protocols".equals(paramString1)))
    {
      a(paramString2, true);
      return;
    }
    this.e.a(paramString1, paramString2);
  }
  
  public final void connect()
  {
    a();
    while (!a(false)) {}
  }
  
  public final void disconnect()
  {
    if (this.c != null) {
      this.c.n();
    }
  }
  
  public int getConnectTimeout()
  {
    return this.a.a();
  }
  
  public final InputStream getErrorStream()
  {
    Object localObject2 = null;
    try
    {
      da localDa = b();
      Object localObject1 = localObject2;
      if (localDa.o())
      {
        localObject1 = localObject2;
        if (localDa.h().c() >= 400) {
          localObject1 = localDa.j();
        }
      }
      return localObject1;
    }
    catch (IOException localIOException) {}
    return null;
  }
  
  public final String getHeaderField(int paramInt)
  {
    try
    {
      String str = b().h().g().b(paramInt);
      return str;
    }
    catch (IOException localIOException) {}
    return null;
  }
  
  public final String getHeaderField(String paramString)
  {
    try
    {
      di localDi = b().h();
      if (paramString == null) {
        return localDi.b();
      }
      paramString = localDi.g().a(paramString);
      return paramString;
    }
    catch (IOException paramString) {}
    return null;
  }
  
  public final String getHeaderFieldKey(int paramInt)
  {
    try
    {
      String str = b().h().g().a(paramInt);
      return str;
    }
    catch (IOException localIOException) {}
    return null;
  }
  
  public final Map getHeaderFields()
  {
    try
    {
      Object localObject = b().h();
      localObject = df.a(((di)localObject).g(), ((di)localObject).b());
      return localObject;
    }
    catch (IOException localIOException) {}
    return Collections.emptyMap();
  }
  
  public final InputStream getInputStream()
  {
    if (!this.doInput) {
      throw new ProtocolException("This protocol does not support input");
    }
    Object localObject = b();
    if (getResponseCode() >= 400) {
      throw new FileNotFoundException(this.url.toString());
    }
    localObject = ((da)localObject).j();
    if (localObject == null) {
      throw new ProtocolException("No response body exists; responseCode=" + getResponseCode());
    }
    return localObject;
  }
  
  public final OutputStream getOutputStream()
  {
    connect();
    dq localDq = this.c.e();
    if (localDq == null) {
      throw new ProtocolException("method does not support a request body: " + this.method);
    }
    if (this.c.f()) {
      throw new ProtocolException("cannot write request body after response has been read");
    }
    return localDq.d();
  }
  
  public final Permission getPermission()
  {
    String str = getURL().getHost();
    int i = cs.a(getURL());
    if (usingProxy())
    {
      InetSocketAddress localInetSocketAddress = (InetSocketAddress)this.a.c().address();
      str = localInetSocketAddress.getHostName();
      i = localInetSocketAddress.getPort();
    }
    return new SocketPermission(str + ":" + i, "connect, resolve");
  }
  
  public int getReadTimeout()
  {
    return this.a.b();
  }
  
  public final Map getRequestProperties()
  {
    if (this.connected) {
      throw new IllegalStateException("Cannot access request header fields after connection is set");
    }
    return df.a(this.e.a(), null);
  }
  
  public final String getRequestProperty(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    return this.e.c(paramString);
  }
  
  public final int getResponseCode()
  {
    return b().h().c();
  }
  
  public String getResponseMessage()
  {
    return b().h().d();
  }
  
  public void setConnectTimeout(int paramInt)
  {
    this.a.a(paramInt, TimeUnit.MILLISECONDS);
  }
  
  public void setFixedLengthStreamingMode(int paramInt)
  {
    a(paramInt);
  }
  
  public void setIfModifiedSince(long paramLong)
  {
    super.setIfModifiedSince(paramLong);
    if (this.ifModifiedSince != 0L)
    {
      this.e.b("If-Modified-Since", cz.a(new Date(this.ifModifiedSince)));
      return;
    }
    this.e.b("If-Modified-Since");
  }
  
  public void setReadTimeout(int paramInt)
  {
    this.a.b(paramInt, TimeUnit.MILLISECONDS);
  }
  
  public void setRequestMethod(String paramString)
  {
    if (!db.a.contains(paramString)) {
      throw new ProtocolException("Expected one of " + db.a + " but was " + paramString);
    }
    this.method = paramString;
  }
  
  public final void setRequestProperty(String paramString1, String paramString2)
  {
    if (this.connected) {
      throw new IllegalStateException("Cannot set request property after connection is made");
    }
    if (paramString1 == null) {
      throw new NullPointerException("field == null");
    }
    if (paramString2 == null)
    {
      cr.a().a("Ignoring header " + paramString1 + " because its value was null.");
      return;
    }
    if (("X-Android-Transports".equals(paramString1)) || ("X-Android-Protocols".equals(paramString1)))
    {
      a(paramString2, false);
      return;
    }
    this.e.b(paramString1, paramString2);
  }
  
  public final boolean usingProxy()
  {
    if (this.h != null) {}
    for (Proxy localProxy = this.h.b(); (localProxy != null) && (localProxy.type() != Proxy.Type.DIRECT); localProxy = this.a.c()) {
      return true;
    }
    return false;
  }
}
