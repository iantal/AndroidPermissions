package com.chartboost.sdk.Libraries;

import android.os.Handler;
import android.util.SparseArray;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONObject;

public class e
{
  private static SparseArray a = new SparseArray();
  private static Handler b = new Handler();
  private static Runnable c = new e.1();
  
  public static e.a a(e.b... paramVarArgs)
  {
    e.a localA = e.a.a();
    int i = 0;
    while (i < paramVarArgs.length)
    {
      localA.a(e.b.a(paramVarArgs[i]), e.b.b(paramVarArgs[i]));
      i += 1;
    }
    return localA;
  }
  
  public static e.b a(String paramString, Object paramObject)
  {
    return new e.b(paramString, paramObject);
  }
  
  public static List a(JSONArray paramJSONArray)
  {
    if (paramJSONArray == null) {
      return null;
    }
    ArrayList localArrayList = new ArrayList();
    int i = 0;
    for (;;)
    {
      if (i < paramJSONArray.length()) {
        try
        {
          Object localObject = paramJSONArray.get(i);
          if ((localObject instanceof JSONObject)) {
            localObject = a((JSONObject)localObject);
          }
          for (;;)
          {
            localArrayList.add(localObject);
            break;
            if ((localObject instanceof JSONArray))
            {
              localObject = a((JSONArray)localObject);
            }
            else
            {
              boolean bool = localObject.equals(JSONObject.NULL);
              if (bool) {
                localObject = null;
              }
            }
          }
          return localArrayList;
        }
        catch (Exception localException)
        {
          CBLogging.b("CBJSON", "error converting json", localException);
        }
      }
      i += 1;
    }
  }
  
  public static Map a(JSONObject paramJSONObject)
  {
    if (paramJSONObject == null) {
      return null;
    }
    HashMap localHashMap = new HashMap();
    Iterator localIterator = paramJSONObject.keys();
    if (localIterator.hasNext()) {
      for (;;)
      {
        try
        {
          String str = (String)localIterator.next();
          Object localObject = paramJSONObject.get(str);
          if (!(localObject instanceof JSONObject)) {
            break label89;
          }
          localObject = a((JSONObject)localObject);
          localHashMap.put(str, localObject);
        }
        catch (Exception localException)
        {
          CBLogging.b("CBJSON", "error converting json", localException);
        }
        break;
        label89:
        List localList;
        if ((localException instanceof JSONArray))
        {
          localList = a((JSONArray)localException);
        }
        else
        {
          boolean bool = localList.equals(JSONObject.NULL);
          if (bool) {
            localList = null;
          }
        }
      }
    }
    return localHashMap;
  }
  
  public static JSONArray a(List paramList)
  {
    if (paramList == null) {
      return null;
    }
    JSONArray localJSONArray = new JSONArray();
    int i = 0;
    for (;;)
    {
      if (i < paramList.size()) {
        try
        {
          Object localObject2 = paramList.get(i);
          Object localObject1;
          if ((localObject2 instanceof Map)) {
            localObject1 = a((Map)localObject2);
          }
          for (;;)
          {
            localJSONArray.put(localObject1);
            break;
            if ((localObject2 instanceof List))
            {
              localObject1 = a((List)localObject2);
            }
            else
            {
              localObject1 = localObject2;
              if (localObject2 == null) {
                localObject1 = JSONObject.NULL;
              }
            }
          }
          return localJSONArray;
        }
        catch (Exception localException)
        {
          CBLogging.b("CBJSON", "error converting json", localException);
        }
      }
      i += 1;
    }
  }
  
  public static JSONObject a(Map paramMap)
  {
    if (paramMap == null) {
      return null;
    }
    JSONObject localJSONObject = new JSONObject();
    Iterator localIterator = paramMap.entrySet().iterator();
    if (localIterator.hasNext())
    {
      paramMap = (Map.Entry)localIterator.next();
      String str = paramMap.getKey().toString();
      Object localObject = paramMap.getValue();
      for (;;)
      {
        try
        {
          if (!(localObject instanceof Map)) {
            break label101;
          }
          paramMap = a((Map)localObject);
          localJSONObject.put(str, paramMap);
        }
        catch (Exception paramMap)
        {
          CBLogging.b("CBJSON", "error converting json", paramMap);
        }
        break;
        label101:
        if ((localObject instanceof List))
        {
          paramMap = a((List)localObject);
        }
        else
        {
          paramMap = localObject;
          if (localObject == null) {
            paramMap = JSONObject.NULL;
          }
        }
      }
    }
    return localJSONObject;
  }
}
