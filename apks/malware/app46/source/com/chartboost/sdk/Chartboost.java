package com.chartboost.sdk;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.text.TextUtils;
import android.util.SparseBooleanArray;
import android.view.Window;
import android.view.WindowManager.LayoutParams;
import com.chartboost.sdk.Libraries.CBLogging;
import com.chartboost.sdk.Libraries.CBUtility;
import com.chartboost.sdk.Libraries.k;
import com.chartboost.sdk.Model.CBError.CBImpressionError;
import com.chartboost.sdk.Model.a.b;
import com.chartboost.sdk.impl.ab;
import com.chartboost.sdk.impl.as;
import com.chartboost.sdk.impl.ax;
import com.chartboost.sdk.impl.az;
import com.chartboost.sdk.impl.bb;
import java.util.Locale;

public final class Chartboost
{
  private static volatile Chartboost c = null;
  private static volatile boolean q = false;
  protected com.chartboost.sdk.Libraries.l a = null;
  protected Handler b;
  private Context d = null;
  private CBImpressionActivity e = null;
  private com.chartboost.sdk.Model.a f = null;
  private CBPreferences g = null;
  private ax h = null;
  private az i = null;
  private com.chartboost.sdk.impl.l j = null;
  private com.chartboost.sdk.Tracking.a k = null;
  private boolean l = false;
  private boolean m = false;
  private SparseBooleanArray n = new SparseBooleanArray();
  private c o = null;
  private boolean p = false;
  private Runnable r = new Chartboost.b(this, null);
  
  private Chartboost()
  {
    c = this;
    this.b = new Handler();
    this.h = ax.a();
    this.o = c.a(this);
    this.g = CBPreferences.getInstance();
  }
  
  private void a(int paramInt, boolean paramBoolean)
  {
    this.n.put(paramInt, paramBoolean);
  }
  
  private void a(Activity paramActivity, String paramString1, String paramString2, ChartboostDelegate paramChartboostDelegate)
  {
    a("onCreate()");
    if ((this.a != null) && (!this.a.b(paramActivity)) && (f()))
    {
      e(this.a);
      a(this.a, false);
    }
    this.b.removeCallbacks(this.r);
    this.a = com.chartboost.sdk.Libraries.l.a(paramActivity);
    this.d = paramActivity.getApplicationContext();
    if (!this.l)
    {
      this.h.a(this.d);
      this.l = true;
    }
    com.chartboost.sdk.Libraries.c.a();
    this.g.setAppID(paramString1);
    this.g.setAppSignature(paramString2);
    this.g.setDelegate(paramChartboostDelegate);
    if (k.b) {
      k.a();
    }
    if (this.i == null)
    {
      this.i = az.a(this.d);
      this.j = this.i.a();
    }
  }
  
  private void a(Activity paramActivity, boolean paramBoolean)
  {
    if (paramActivity == null) {
      return;
    }
    a(paramActivity.hashCode(), paramBoolean);
  }
  
  private void a(com.chartboost.sdk.Libraries.l paramL, boolean paramBoolean)
  {
    if (paramL == null) {
      return;
    }
    a(paramL.a(), paramBoolean);
  }
  
  private void a(String paramString)
  {
    if ((!this.g.getIgnoreErrors()) && (!CBUtility.b())) {
      throw new IllegalStateException("It is illegal to call this method from any thread other than the UI thread. Please call it from the " + paramString + " method of your host activity.");
    }
  }
  
  private static void a(boolean paramBoolean)
  {
    q = paramBoolean;
  }
  
  private void b(com.chartboost.sdk.Libraries.l paramL, boolean paramBoolean) {}
  
  private boolean c(Activity paramActivity)
  {
    if (this.g.getImpressionsUseActivities()) {
      if (this.e != paramActivity) {}
    }
    do
    {
      return true;
      return false;
      if (this.a != null) {
        break;
      }
    } while (paramActivity == null);
    return false;
    return this.a.b(paramActivity);
  }
  
  private void cacheInterstitialData(String paramString, Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    e.a(paramString, paramCBAPIResponseCallback);
  }
  
  private void cacheInterstitialDataBatch(String paramString, int paramInt, Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    e.a(paramString, paramInt, paramCBAPIResponseCallback);
  }
  
  private void e(com.chartboost.sdk.Libraries.l paramL)
  {
    if (!this.g.getImpressionsUseActivities()) {
      d(paramL);
    }
    if (!(paramL.get() instanceof CBImpressionActivity)) {
      a(paramL, false);
    }
    this.h.c(this.d);
    this.j.b();
    this.i.f();
    if (this.k == null) {
      this.k = com.chartboost.sdk.Tracking.a.a();
    }
    this.k.c();
  }
  
  private boolean f()
  {
    return a(this.a);
  }
  
  private boolean f(com.chartboost.sdk.Libraries.l paramL)
  {
    if (this.g.getImpressionsUseActivities()) {
      if (paramL == null) {
        if (this.e != null) {}
      }
    }
    do
    {
      return true;
      return false;
      return paramL.b(this.e);
      if (this.a != null) {
        break;
      }
    } while (paramL == null);
    return false;
    return this.a.a(paramL);
  }
  
  private void g()
  {
    if (this.d == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling startSession().");
    }
    a(true);
    if (this.k == null) {
      this.k = com.chartboost.sdk.Tracking.a.a();
    }
    this.k.h();
    com.chartboost.sdk.Tracking.a.b();
    boolean bool = com.chartboost.sdk.Tracking.a.i();
    this.g.a(new Chartboost.1(this, bool));
  }
  
  public static boolean isSessionStarted()
  {
    return q;
  }
  
  public static Chartboost sharedChartboost()
  {
    if (c == null) {}
    try
    {
      if (c == null) {
        c = new Chartboost();
      }
      return c;
    }
    finally {}
  }
  
  private void showInterstitialData(String paramString, Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    e.b(paramString, paramCBAPIResponseCallback);
  }
  
  protected c a()
  {
    if (c() == null) {
      return null;
    }
    return this.o;
  }
  
  protected void a(Activity paramActivity)
  {
    this.d = paramActivity.getApplicationContext();
    if (!(paramActivity instanceof CBImpressionActivity))
    {
      this.a = com.chartboost.sdk.Libraries.l.a(paramActivity);
      a(this.a, true);
    }
    for (;;)
    {
      this.b.removeCallbacks(this.r);
      if ((paramActivity != null) && (c(paramActivity))) {
        break;
      }
      return;
      g();
      a((CBImpressionActivity)paramActivity);
    }
    b(com.chartboost.sdk.Libraries.l.a(paramActivity), true);
    if ((paramActivity instanceof CBImpressionActivity)) {
      this.p = false;
    }
    a.a().a(paramActivity, this.f);
    this.f = null;
  }
  
  protected void a(CBImpressionActivity paramCBImpressionActivity)
  {
    if (!this.m)
    {
      this.d = paramCBImpressionActivity.getApplicationContext();
      this.e = paramCBImpressionActivity;
      this.m = true;
    }
    this.b.removeCallbacks(this.r);
  }
  
  protected void a(com.chartboost.sdk.Model.a paramA)
  {
    boolean bool = true;
    if (this.g.getImpressionsUseActivities())
    {
      if (this.m)
      {
        localObject = a();
        if ((c() != null) && (localObject != null))
        {
          ((c)localObject).a(paramA);
          return;
        }
        CBLogging.b("Chartboost", "Missing CBViewController to manage the open CBImpressionActivity");
        return;
      }
      if (!f())
      {
        paramA.a(CBError.CBImpressionError.NO_HOST_ACTIVITY);
        return;
      }
      localObject = getHostActivity();
      if (localObject == null)
      {
        CBLogging.b("Chartboost", "Failed to display impression as the host activity reference has been lost!");
        paramA.a(CBError.CBImpressionError.NO_HOST_ACTIVITY);
        return;
      }
      if ((this.f != null) && (this.f != paramA))
      {
        paramA.a(CBError.CBImpressionError.IMPRESSION_ALREADY_VISIBLE);
        return;
      }
      this.f = paramA;
      paramA = new Intent((Context)localObject, CBImpressionActivity.class);
      int i1;
      int i2;
      if ((((Activity)localObject).getWindow().getAttributes().flags & 0x400) != 0)
      {
        i1 = 1;
        if ((((Activity)localObject).getWindow().getAttributes().flags & 0x800) == 0) {
          break label225;
        }
        i2 = 1;
        label178:
        if ((i1 == 0) || (i2 != 0)) {
          break label230;
        }
      }
      for (;;)
      {
        paramA.putExtra("paramFullscreen", bool);
        try
        {
          ((Activity)localObject).startActivity(paramA);
          this.p = true;
          return;
        }
        catch (ActivityNotFoundException paramA)
        {
          throw new RuntimeException("Chartboost impression activity not declared in manifest. Please add the following inside your manifest's <application> tag: \n<activity android:name=\"com.chartboost.sdk.CBImpressionActivity\" android:theme=\"@android:style/Theme.Translucent.NoTitleBar\" android:excludeFromRecents=\"true\" />");
        }
        i1 = 0;
        break;
        label225:
        i2 = 0;
        break label178;
        label230:
        bool = false;
      }
    }
    Object localObject = a();
    if ((localObject != null) && (f()))
    {
      ((c)localObject).a(paramA);
      return;
    }
    paramA.a(CBError.CBImpressionError.NO_HOST_ACTIVITY);
  }
  
  protected void a(Runnable paramRunnable)
  {
    if (!CBUtility.b())
    {
      this.b.post(paramRunnable);
      return;
    }
    paramRunnable.run();
  }
  
  protected boolean a(com.chartboost.sdk.Libraries.l paramL)
  {
    if (paramL == null) {}
    do
    {
      return false;
      paramL = Boolean.valueOf(this.n.get(paramL.a()));
    } while (paramL == null);
    return paramL.booleanValue();
  }
  
  protected void b(Activity paramActivity)
  {
    b(com.chartboost.sdk.Libraries.l.a(paramActivity), false);
  }
  
  protected void b(com.chartboost.sdk.Libraries.l paramL)
  {
    paramL = a.a().c();
    if (paramL != null) {
      paramL.q();
    }
  }
  
  protected boolean b()
  {
    Object localObject = a.a();
    com.chartboost.sdk.Model.a localA = ((a)localObject).c();
    if ((localA != null) && (localA.c == a.b.c))
    {
      if (localA.p()) {
        return true;
      }
      a(new Chartboost.2(this, (a)localObject));
      return true;
    }
    localObject = a();
    if ((localObject != null) && (((c)localObject).a()))
    {
      a(new Chartboost.3(this, (c)localObject));
      return true;
    }
    return false;
  }
  
  protected Activity c()
  {
    if (this.g.getImpressionsUseActivities()) {
      return this.e;
    }
    return getHostActivity();
  }
  
  protected void c(com.chartboost.sdk.Libraries.l paramL)
  {
    paramL = a.a().c();
    if (paramL != null) {
      paramL.r();
    }
  }
  
  public void cacheInterstitial()
  {
    cacheInterstitial("Default");
  }
  
  public void cacheInterstitial(String paramString)
  {
    if (this.a == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling cacheInterstitial().");
    }
    ab.e().b(paramString);
  }
  
  public void cacheMoreApps()
  {
    if (this.a == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling cacheMoreApps().");
    }
    as.e().g();
  }
  
  public void clearCache()
  {
    if (getContext() == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling clearImageCache().");
    }
    bb.a().b();
    ab.e().a();
    as.e().a();
  }
  
  public void clearImageCache() {}
  
  protected void d()
  {
    if (this.m)
    {
      this.e = null;
      this.m = false;
    }
  }
  
  protected void d(com.chartboost.sdk.Libraries.l paramL)
  {
    c localC = a();
    if ((f(paramL)) && (localC != null))
    {
      com.chartboost.sdk.Model.a localA = a.a().c();
      if (localA != null)
      {
        localC.b(localA);
        this.f = localA;
      }
      b(paramL, false);
      if ((paramL.get() instanceof CBImpressionActivity)) {
        d();
      }
    }
    if (!(paramL.get() instanceof CBImpressionActivity)) {
      a(paramL, false);
    }
  }
  
  public Context getContext()
  {
    return this.d;
  }
  
  public String getDeviceIdentifier()
  {
    return com.chartboost.sdk.Libraries.c.b();
  }
  
  protected Activity getHostActivity()
  {
    if (this.a != null) {
      return (Activity)this.a.get();
    }
    return null;
  }
  
  public CBPreferences getPreferences()
  {
    return this.g;
  }
  
  protected Context getValidContext()
  {
    if (this.a != null) {
      return this.a.b();
    }
    return getContext();
  }
  
  public boolean hasCachedInterstitial()
  {
    return hasCachedInterstitial("Default");
  }
  
  public boolean hasCachedInterstitial(String paramString)
  {
    return ab.e().c(paramString);
  }
  
  public boolean hasCachedMoreApps()
  {
    return as.e().h();
  }
  
  public boolean onBackPressed()
  {
    boolean bool = false;
    a("onBackPressed()");
    if (this.a == null) {
      throw new IllegalStateException("The Chartboost methods onCreate(), onStart(), onStop(), and onDestroy() must be called in the corresponding methods of your activity in order for Chartboost to function properly.");
    }
    if (this.g.getImpressionsUseActivities())
    {
      if (this.p)
      {
        this.p = false;
        b();
        bool = true;
      }
      return bool;
    }
    return b();
  }
  
  public void onCreate(Activity paramActivity, String paramString1, String paramString2, ChartboostDelegate paramChartboostDelegate)
  {
    a(paramActivity, paramString1, paramString2, paramChartboostDelegate);
  }
  
  public void onDestroy(Activity paramActivity)
  {
    if ((this.a == null) || (this.a.b(paramActivity)))
    {
      this.b.removeCallbacks(this.r);
      this.r = new Chartboost.b(this, null);
      this.b.postDelayed(this.r, 10000L);
    }
    b(paramActivity);
  }
  
  public void onStart(Activity paramActivity)
  {
    a("onStart()");
    this.b.removeCallbacks(this.r);
    if ((this.a != null) && (!this.a.b(paramActivity)) && (f()))
    {
      e(this.a);
      a(this.a, false);
    }
    a(paramActivity, true);
    this.a = com.chartboost.sdk.Libraries.l.a(paramActivity);
    this.d = paramActivity.getApplicationContext();
    if (!this.g.getImpressionsUseActivities()) {
      a(paramActivity);
    }
    this.h.b(this.d);
    this.j.a();
    this.i.e();
    g();
  }
  
  public void onStop(Activity paramActivity)
  {
    a("onStop()");
    paramActivity = com.chartboost.sdk.Libraries.l.a(paramActivity);
    if (a(paramActivity)) {
      e(paramActivity);
    }
  }
  
  @Deprecated
  public void setFramework(String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      this.g.setUserAgentSuffix(null);
      return;
    }
    if (paramString.startsWith("-"))
    {
      this.g.setUserAgentSuffix(paramString);
      return;
    }
    CBPreferences localCBPreferences = this.g;
    StringBuilder localStringBuilder = new StringBuilder().append("-").append(paramString.substring(0, 1).toUpperCase(Locale.US));
    if (paramString.length() > 1) {}
    for (paramString = paramString.substring(1);; paramString = "")
    {
      localCBPreferences.setUserAgentSuffix(paramString);
      return;
    }
  }
  
  public void showInterstitial()
  {
    showInterstitial("Default");
  }
  
  public void showInterstitial(String paramString)
  {
    if (this.a == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling showInterstitial().");
    }
    ab.e().a(paramString);
  }
  
  public void showMoreApps()
  {
    if (this.a == null) {
      throw new IllegalStateException("The context must be set through the Chartboost method onCreate() before calling showMoreApps().");
    }
    as.e().f();
  }
  
  public void showMoreAppsData(Chartboost.CBAPIResponseCallback paramCBAPIResponseCallback)
  {
    e.a(paramCBAPIResponseCallback);
  }
  
  public void startSession() {}
}
