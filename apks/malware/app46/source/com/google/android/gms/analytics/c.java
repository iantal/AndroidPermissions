package com.google.android.gms.analytics;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.RemoteException;
import com.google.android.gms.internal.fe;
import java.util.List;
import java.util.Map;

class c
  implements b
{
  private Context mContext;
  private fe tA;
  private ServiceConnection tx;
  private c.b ty;
  private c.c tz;
  
  public c(Context paramContext, c.b paramB, c.c paramC)
  {
    this.mContext = paramContext;
    if (paramB == null) {
      throw new IllegalArgumentException("onConnectedListener cannot be null");
    }
    this.ty = paramB;
    if (paramC == null) {
      throw new IllegalArgumentException("onConnectionFailedListener cannot be null");
    }
    this.tz = paramC;
  }
  
  private fe cm()
  {
    cn();
    return this.tA;
  }
  
  private void co()
  {
    cp();
  }
  
  private void cp()
  {
    this.ty.onConnected();
  }
  
  public void a(Map paramMap, long paramLong, String paramString, List paramList)
  {
    try
    {
      cm().a(paramMap, paramLong, paramString, paramList);
      return;
    }
    catch (RemoteException paramMap)
    {
      aa.A("sendHit failed: " + paramMap);
    }
  }
  
  public void cl()
  {
    try
    {
      cm().cl();
      return;
    }
    catch (RemoteException localRemoteException)
    {
      aa.A("clear hits failed: " + localRemoteException);
    }
  }
  
  protected void cn()
  {
    if (!isConnected()) {
      throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
    }
  }
  
  public void connect()
  {
    Intent localIntent = new Intent("com.google.android.gms.analytics.service.START");
    localIntent.setComponent(new ComponentName("com.google.android.gms", "com.google.android.gms.analytics.service.AnalyticsService"));
    localIntent.putExtra("app_package_name", this.mContext.getPackageName());
    if (this.tx != null) {
      aa.A("Calling connect() while still connected, missing disconnect().");
    }
    boolean bool;
    do
    {
      return;
      this.tx = new c.a(this);
      bool = this.mContext.bindService(localIntent, this.tx, 129);
      aa.C("connect: bindService returned " + bool + " for " + localIntent);
    } while (bool);
    this.tx = null;
    this.tz.a(1, null);
  }
  
  public void disconnect()
  {
    this.tA = null;
    if (this.tx != null) {}
    try
    {
      this.mContext.unbindService(this.tx);
      this.tx = null;
      this.ty.onDisconnected();
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      for (;;) {}
    }
    catch (IllegalStateException localIllegalStateException)
    {
      for (;;) {}
    }
  }
  
  public boolean isConnected()
  {
    return this.tA != null;
  }
}
