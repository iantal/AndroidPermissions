package com.google.android.gms.tagmanager;

import android.content.Context;
import com.google.android.gms.internal.c.f;
import com.google.android.gms.internal.c.i;
import com.google.android.gms.internal.c.j;
import com.google.android.gms.internal.d.a;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Container
{
  private final String aet;
  private final DataLayer aeu;
  private cs aev;
  private Map aew = new HashMap();
  private Map aex = new HashMap();
  private volatile long aey;
  private volatile String aez = "";
  private final Context mContext;
  
  Container(Context paramContext, DataLayer paramDataLayer, String paramString, long paramLong, c.j paramJ)
  {
    this.mContext = paramContext;
    this.aeu = paramDataLayer;
    this.aet = paramString;
    this.aey = paramLong;
    a(paramJ.fK);
    if (paramJ.fJ != null) {
      a(paramJ.fJ);
    }
  }
  
  Container(Context paramContext, DataLayer paramDataLayer, String paramString, long paramLong, cq.c paramC)
  {
    this.mContext = paramContext;
    this.aeu = paramDataLayer;
    this.aet = paramString;
    this.aey = paramLong;
    a(paramC);
  }
  
  private void a(c.f paramF)
  {
    if (paramF == null) {
      throw new NullPointerException();
    }
    try
    {
      cq.c localC = cq.b(paramF);
      a(localC);
      return;
    }
    catch (cq.g localG)
    {
      bh.A("Not loading resource: " + paramF + " because it is invalid: " + localG.toString());
    }
  }
  
  private void a(cq.c paramC)
  {
    this.aez = paramC.getVersion();
    ag localAg = bI(this.aez);
    a(new cs(this.mContext, paramC, this.aeu, new Container.a(this, null), new Container.b(this, null), localAg));
  }
  
  private void a(cs paramCs)
  {
    try
    {
      this.aev = paramCs;
      return;
    }
    finally
    {
      paramCs = finally;
      throw paramCs;
    }
  }
  
  private void a(c.i[] paramArrayOfI)
  {
    ArrayList localArrayList = new ArrayList();
    int j = paramArrayOfI.length;
    int i = 0;
    while (i < j)
    {
      localArrayList.add(paramArrayOfI[i]);
      i += 1;
    }
    ln().h(localArrayList);
  }
  
  private cs ln()
  {
    try
    {
      cs localCs = this.aev;
      return localCs;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  Container.FunctionCallMacroCallback bF(String paramString)
  {
    synchronized (this.aew)
    {
      paramString = (Container.FunctionCallMacroCallback)this.aew.get(paramString);
      return paramString;
    }
  }
  
  Container.FunctionCallTagCallback bG(String paramString)
  {
    synchronized (this.aex)
    {
      paramString = (Container.FunctionCallTagCallback)this.aex.get(paramString);
      return paramString;
    }
  }
  
  void bH(String paramString)
  {
    ln().bH(paramString);
  }
  
  ag bI(String paramString)
  {
    if (cd.md().me().equals(cd.a.agD)) {}
    return new bq();
  }
  
  public boolean getBoolean(String paramString)
  {
    cs localCs = ln();
    if (localCs == null)
    {
      bh.A("getBoolean called for closed container.");
      return dh.na().booleanValue();
    }
    try
    {
      boolean bool = dh.n((d.a)localCs.cj(paramString).getObject()).booleanValue();
      return bool;
    }
    catch (Exception paramString)
    {
      bh.A("Calling getBoolean() threw an exception: " + paramString.getMessage() + " Returning default value.");
    }
    return dh.na().booleanValue();
  }
  
  public String getContainerId()
  {
    return this.aet;
  }
  
  public double getDouble(String paramString)
  {
    cs localCs = ln();
    if (localCs == null)
    {
      bh.A("getDouble called for closed container.");
      return dh.mZ().doubleValue();
    }
    try
    {
      double d = dh.m((d.a)localCs.cj(paramString).getObject()).doubleValue();
      return d;
    }
    catch (Exception paramString)
    {
      bh.A("Calling getDouble() threw an exception: " + paramString.getMessage() + " Returning default value.");
    }
    return dh.mZ().doubleValue();
  }
  
  public long getLastRefreshTime()
  {
    return this.aey;
  }
  
  public long getLong(String paramString)
  {
    cs localCs = ln();
    if (localCs == null)
    {
      bh.A("getLong called for closed container.");
      return dh.mY().longValue();
    }
    try
    {
      long l = dh.l((d.a)localCs.cj(paramString).getObject()).longValue();
      return l;
    }
    catch (Exception paramString)
    {
      bh.A("Calling getLong() threw an exception: " + paramString.getMessage() + " Returning default value.");
    }
    return dh.mY().longValue();
  }
  
  public String getString(String paramString)
  {
    cs localCs = ln();
    if (localCs == null)
    {
      bh.A("getString called for closed container.");
      return dh.nc();
    }
    try
    {
      paramString = dh.j((d.a)localCs.cj(paramString).getObject());
      return paramString;
    }
    catch (Exception paramString)
    {
      bh.A("Calling getString() threw an exception: " + paramString.getMessage() + " Returning default value.");
    }
    return dh.nc();
  }
  
  public boolean isDefault()
  {
    return getLastRefreshTime() == 0L;
  }
  
  String lm()
  {
    return this.aez;
  }
  
  public void registerFunctionCallMacroCallback(String paramString, Container.FunctionCallMacroCallback paramFunctionCallMacroCallback)
  {
    if (paramFunctionCallMacroCallback == null) {
      throw new NullPointerException("Macro handler must be non-null");
    }
    synchronized (this.aew)
    {
      this.aew.put(paramString, paramFunctionCallMacroCallback);
      return;
    }
  }
  
  public void registerFunctionCallTagCallback(String paramString, Container.FunctionCallTagCallback paramFunctionCallTagCallback)
  {
    if (paramFunctionCallTagCallback == null) {
      throw new NullPointerException("Tag callback must be non-null");
    }
    synchronized (this.aex)
    {
      this.aex.put(paramString, paramFunctionCallTagCallback);
      return;
    }
  }
  
  void release()
  {
    this.aev = null;
  }
  
  public void unregisterFunctionCallMacroCallback(String paramString)
  {
    synchronized (this.aew)
    {
      this.aew.remove(paramString);
      return;
    }
  }
  
  public void unregisterFunctionCallTagCallback(String paramString)
  {
    synchronized (this.aex)
    {
      this.aex.remove(paramString);
      return;
    }
  }
}
