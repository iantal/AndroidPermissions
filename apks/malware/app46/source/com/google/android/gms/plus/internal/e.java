package com.google.android.gms.plus.internal;

import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Looper;
import android.os.RemoteException;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.a.d;
import com.google.android.gms.common.data.DataHolder;
import com.google.android.gms.internal.hb;
import com.google.android.gms.internal.hb.c;
import com.google.android.gms.internal.hb.e;
import com.google.android.gms.internal.hb.g;
import com.google.android.gms.internal.hg;
import com.google.android.gms.internal.hi;
import com.google.android.gms.internal.ie;
import com.google.android.gms.internal.kp;
import com.google.android.gms.internal.ks;
import com.google.android.gms.plus.model.moments.Moment;
import com.google.android.gms.plus.model.people.Person;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

public class e
  extends hb
{
  private Person abJ;
  private final h abK;
  
  public e(Context paramContext, Looper paramLooper, GoogleApiClient.ConnectionCallbacks paramConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener paramOnConnectionFailedListener, h paramH)
  {
    super(paramContext, paramLooper, paramConnectionCallbacks, paramOnConnectionFailedListener, paramH.jZ());
    this.abK = paramH;
  }
  
  @Deprecated
  public e(Context paramContext, GooglePlayServicesClient.ConnectionCallbacks paramConnectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener paramOnConnectionFailedListener, h paramH)
  {
    this(paramContext, paramContext.getMainLooper(), new hb.c(paramConnectionCallbacks), new hb.g(paramOnConnectionFailedListener), paramH);
  }
  
  public hg a(a.d paramD, int paramInt, String paramString)
  {
    cn();
    paramD = new e.e(this, paramD);
    try
    {
      paramString = ((d)ft()).a(paramD, 1, paramInt, -1, paramString);
      return paramString;
    }
    catch (RemoteException paramString)
    {
      paramD.a(DataHolder.af(8), null);
    }
    return null;
  }
  
  protected void a(int paramInt, IBinder paramIBinder, Bundle paramBundle)
  {
    if ((paramInt == 0) && (paramBundle != null) && (paramBundle.containsKey("loaded_person"))) {
      this.abJ = ks.i(paramBundle.getByteArray("loaded_person"));
    }
    super.a(paramInt, paramIBinder, paramBundle);
  }
  
  public void a(a.d paramD, int paramInt, String paramString1, Uri paramUri, String paramString2, String paramString3)
  {
    cn();
    if (paramD != null) {}
    for (paramD = new e.b(this, paramD);; paramD = null) {
      try
      {
        ((d)ft()).a(paramD, paramInt, paramString1, paramUri, paramString2, paramString3);
        return;
      }
      catch (RemoteException paramString1)
      {
        paramD.a(DataHolder.af(8), null, null);
      }
    }
  }
  
  public void a(a.d paramD, Moment paramMoment)
  {
    cn();
    if (paramD != null) {}
    for (paramD = new e.a(this, paramD);; paramD = null) {
      try
      {
        paramMoment = ie.a((kp)paramMoment);
        ((d)ft()).a(paramD, paramMoment);
        return;
      }
      catch (RemoteException paramMoment)
      {
        if (paramD != null) {
          break;
        }
        throw new IllegalStateException(paramMoment);
        paramD.am(new Status(8, null, null));
      }
    }
  }
  
  public void a(a.d paramD, Collection paramCollection)
  {
    cn();
    paramD = new e.e(this, paramD);
    try
    {
      ((d)ft()).a(paramD, new ArrayList(paramCollection));
      return;
    }
    catch (RemoteException paramCollection)
    {
      paramD.a(DataHolder.af(8), null);
    }
  }
  
  protected void a(hi paramHi, hb.e paramE)
  {
    Bundle localBundle = this.abK.kh();
    localBundle.putStringArray("request_visible_actions", this.abK.ka());
    paramHi.a(paramE, 5089000, this.abK.kd(), this.abK.kc(), fs(), this.abK.getAccountName(), localBundle);
  }
  
  protected d bn(IBinder paramIBinder)
  {
    return d.a.bm(paramIBinder);
  }
  
  protected String bu()
  {
    return "com.google.android.gms.plus.service.START";
  }
  
  protected String bv()
  {
    return "com.google.android.gms.plus.internal.IPlusService";
  }
  
  public boolean by(String paramString)
  {
    return Arrays.asList(fs()).contains(paramString);
  }
  
  public void clearDefaultAccount()
  {
    cn();
    try
    {
      this.abJ = null;
      ((d)ft()).clearDefaultAccount();
      return;
    }
    catch (RemoteException localRemoteException)
    {
      throw new IllegalStateException(localRemoteException);
    }
  }
  
  public void d(a.d paramD, String[] paramArrayOfString)
  {
    a(paramD, Arrays.asList(paramArrayOfString));
  }
  
  public String getAccountName()
  {
    cn();
    try
    {
      String str = ((d)ft()).getAccountName();
      return str;
    }
    catch (RemoteException localRemoteException)
    {
      throw new IllegalStateException(localRemoteException);
    }
  }
  
  public Person getCurrentPerson()
  {
    cn();
    return this.abJ;
  }
  
  public void k(a.d paramD)
  {
    a(paramD, 20, null, null, null, "me");
  }
  
  public void l(a.d paramD)
  {
    cn();
    paramD = new e.e(this, paramD);
    try
    {
      ((d)ft()).a(paramD, 2, 1, -1, null);
      return;
    }
    catch (RemoteException localRemoteException)
    {
      paramD.a(DataHolder.af(8), null);
    }
  }
  
  public void m(a.d paramD)
  {
    cn();
    clearDefaultAccount();
    paramD = new e.g(this, paramD);
    try
    {
      ((d)ft()).b(paramD);
      return;
    }
    catch (RemoteException localRemoteException)
    {
      paramD.h(8, null);
    }
  }
  
  public hg r(a.d paramD, String paramString)
  {
    return a(paramD, 0, paramString);
  }
  
  public void removeMoment(String paramString)
  {
    cn();
    try
    {
      ((d)ft()).removeMoment(paramString);
      return;
    }
    catch (RemoteException paramString)
    {
      throw new IllegalStateException(paramString);
    }
  }
}
