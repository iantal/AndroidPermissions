package com.google.android.gms.tagmanager;

import com.google.android.gms.internal.b;
import com.google.android.gms.internal.c.b;
import com.google.android.gms.internal.c.e;
import com.google.android.gms.internal.c.f;
import com.google.android.gms.internal.c.g;
import com.google.android.gms.internal.c.h;
import com.google.android.gms.internal.d.a;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class cq
{
  private static d.a a(int paramInt, c.f paramF, d.a[] paramArrayOfA, Set paramSet)
  {
    int k = 0;
    int m = 0;
    int j = 0;
    if (paramSet.contains(Integer.valueOf(paramInt))) {
      cd("Value cycle detected.  Current value reference: " + paramInt + "." + "  Previous value references: " + paramSet + ".");
    }
    d.a localA1 = (d.a)a(paramF.eX, paramInt, "values");
    if (paramArrayOfA[paramInt] != null) {
      return paramArrayOfA[paramInt];
    }
    Object localObject = null;
    paramSet.add(Integer.valueOf(paramInt));
    switch (localA1.type)
    {
    }
    for (;;)
    {
      if (localObject == null) {
        cd("Invalid value: " + localA1);
      }
      paramArrayOfA[paramInt] = localObject;
      paramSet.remove(Integer.valueOf(paramInt));
      return localObject;
      localObject = h(localA1);
      d.a localA2 = g(localA1);
      localA2.fO = new d.a[((c.h)localObject).fz.length];
      int[] arrayOfInt = ((c.h)localObject).fz;
      k = arrayOfInt.length;
      int i = 0;
      for (;;)
      {
        localObject = localA2;
        if (j >= k) {
          break;
        }
        m = arrayOfInt[j];
        localA2.fO[i] = a(m, paramF, paramArrayOfA, paramSet);
        j += 1;
        i += 1;
      }
      localA2 = g(localA1);
      localObject = h(localA1);
      if (((c.h)localObject).fA.length != ((c.h)localObject).fB.length) {
        cd("Uneven map keys (" + ((c.h)localObject).fA.length + ") and map values (" + ((c.h)localObject).fB.length + ")");
      }
      localA2.fP = new d.a[((c.h)localObject).fA.length];
      localA2.fQ = new d.a[((c.h)localObject).fA.length];
      arrayOfInt = ((c.h)localObject).fA;
      m = arrayOfInt.length;
      j = 0;
      i = 0;
      while (j < m)
      {
        int n = arrayOfInt[j];
        localA2.fP[i] = a(n, paramF, paramArrayOfA, paramSet);
        j += 1;
        i += 1;
      }
      arrayOfInt = ((c.h)localObject).fB;
      m = arrayOfInt.length;
      i = 0;
      j = k;
      for (;;)
      {
        localObject = localA2;
        if (j >= m) {
          break;
        }
        k = arrayOfInt[j];
        localA2.fQ[i] = a(k, paramF, paramArrayOfA, paramSet);
        j += 1;
        i += 1;
      }
      localObject = g(localA1);
      ((d.a)localObject).fR = dh.j(a(h(localA1).fE, paramF, paramArrayOfA, paramSet));
      continue;
      localA2 = g(localA1);
      localObject = h(localA1);
      localA2.fV = new d.a[((c.h)localObject).fD.length];
      arrayOfInt = ((c.h)localObject).fD;
      k = arrayOfInt.length;
      i = 0;
      j = m;
      for (;;)
      {
        localObject = localA2;
        if (j >= k) {
          break;
        }
        m = arrayOfInt[j];
        localA2.fV[i] = a(m, paramF, paramArrayOfA, paramSet);
        j += 1;
        i += 1;
      }
      localObject = localA1;
    }
  }
  
  private static cq.a a(c.b paramB, c.f paramF, d.a[] paramArrayOfA, int paramInt)
  {
    cq.b localB = cq.a.mn();
    paramB = paramB.eH;
    int i = paramB.length;
    paramInt = 0;
    if (paramInt < i)
    {
      int j = paramB[paramInt];
      Object localObject = (c.e)a(paramF.eY, Integer.valueOf(j).intValue(), "properties");
      String str = (String)a(paramF.eW, ((c.e)localObject).key, "keys");
      localObject = (d.a)a(paramArrayOfA, ((c.e)localObject).value, "values");
      if (b.dB.toString().equals(str)) {
        localB.i((d.a)localObject);
      }
      for (;;)
      {
        paramInt += 1;
        break;
        localB.b(str, (d.a)localObject);
      }
    }
    return localB.mq();
  }
  
  private static cq.e a(c.g paramG, List paramList1, List paramList2, List paramList3, c.f paramF)
  {
    cq.f localF = cq.e.mv();
    int[] arrayOfInt = paramG.fn;
    int j = arrayOfInt.length;
    int i = 0;
    while (i < j)
    {
      localF.b((cq.a)paramList3.get(Integer.valueOf(arrayOfInt[i]).intValue()));
      i += 1;
    }
    arrayOfInt = paramG.fo;
    j = arrayOfInt.length;
    i = 0;
    while (i < j)
    {
      localF.c((cq.a)paramList3.get(Integer.valueOf(arrayOfInt[i]).intValue()));
      i += 1;
    }
    paramList3 = paramG.fp;
    j = paramList3.length;
    i = 0;
    while (i < j)
    {
      localF.d((cq.a)paramList1.get(Integer.valueOf(paramList3[i]).intValue()));
      i += 1;
    }
    paramList3 = paramG.fr;
    j = paramList3.length;
    i = 0;
    int k;
    while (i < j)
    {
      k = paramList3[i];
      localF.cf(paramF.eX[Integer.valueOf(k).intValue()].fN);
      i += 1;
    }
    paramList3 = paramG.fq;
    j = paramList3.length;
    i = 0;
    while (i < j)
    {
      localF.e((cq.a)paramList1.get(Integer.valueOf(paramList3[i]).intValue()));
      i += 1;
    }
    paramList1 = paramG.fs;
    j = paramList1.length;
    i = 0;
    while (i < j)
    {
      k = paramList1[i];
      localF.cg(paramF.eX[Integer.valueOf(k).intValue()].fN);
      i += 1;
    }
    paramList1 = paramG.ft;
    j = paramList1.length;
    i = 0;
    while (i < j)
    {
      localF.f((cq.a)paramList2.get(Integer.valueOf(paramList1[i]).intValue()));
      i += 1;
    }
    paramList1 = paramG.fv;
    j = paramList1.length;
    i = 0;
    while (i < j)
    {
      k = paramList1[i];
      localF.ch(paramF.eX[Integer.valueOf(k).intValue()].fN);
      i += 1;
    }
    paramList1 = paramG.fu;
    j = paramList1.length;
    i = 0;
    while (i < j)
    {
      localF.g((cq.a)paramList2.get(Integer.valueOf(paramList1[i]).intValue()));
      i += 1;
    }
    paramG = paramG.fw;
    j = paramG.length;
    i = 0;
    while (i < j)
    {
      k = paramG[i];
      localF.ci(paramF.eX[Integer.valueOf(k).intValue()].fN);
      i += 1;
    }
    return localF.mG();
  }
  
  private static Object a(Object[] paramArrayOfObject, int paramInt, String paramString)
  {
    if ((paramInt < 0) || (paramInt >= paramArrayOfObject.length)) {
      cd("Index out of bounds detected: " + paramInt + " in " + paramString);
    }
    return paramArrayOfObject[paramInt];
  }
  
  public static cq.c b(c.f paramF)
  {
    int j = 0;
    Object localObject = new d.a[paramF.eX.length];
    int i = 0;
    while (i < paramF.eX.length)
    {
      a(i, paramF, (d.a[])localObject, new HashSet(0));
      i += 1;
    }
    cq.d localD = cq.c.mr();
    ArrayList localArrayList1 = new ArrayList();
    i = 0;
    while (i < paramF.fa.length)
    {
      localArrayList1.add(a(paramF.fa[i], paramF, (d.a[])localObject, i));
      i += 1;
    }
    ArrayList localArrayList2 = new ArrayList();
    i = 0;
    while (i < paramF.fb.length)
    {
      localArrayList2.add(a(paramF.fb[i], paramF, (d.a[])localObject, i));
      i += 1;
    }
    ArrayList localArrayList3 = new ArrayList();
    i = 0;
    while (i < paramF.eZ.length)
    {
      cq.a localA = a(paramF.eZ[i], paramF, (d.a[])localObject, i);
      localD.a(localA);
      localArrayList3.add(localA);
      i += 1;
    }
    localObject = paramF.fc;
    int k = localObject.length;
    i = j;
    while (i < k)
    {
      localD.a(a(localObject[i], localArrayList1, localArrayList3, localArrayList2, paramF));
      i += 1;
    }
    localD.ce(paramF.fg);
    localD.du(paramF.fl);
    return localD.mu();
  }
  
  public static void b(InputStream paramInputStream, OutputStream paramOutputStream)
  {
    byte[] arrayOfByte = new byte['Ð€'];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        return;
      }
      paramOutputStream.write(arrayOfByte, 0, i);
    }
  }
  
  private static void cd(String paramString)
  {
    bh.A(paramString);
    throw new cq.g(paramString);
  }
  
  public static d.a g(d.a paramA)
  {
    d.a localA = new d.a();
    localA.type = paramA.type;
    localA.fW = ((int[])paramA.fW.clone());
    if (paramA.fX) {
      localA.fX = paramA.fX;
    }
    return localA;
  }
  
  private static c.h h(d.a paramA)
  {
    if ((c.h)paramA.a(c.h.fx) == null) {
      cd("Expected a ServingValue and didn't get one. Value is: " + paramA);
    }
    return (c.h)paramA.a(c.h.fx);
  }
}
