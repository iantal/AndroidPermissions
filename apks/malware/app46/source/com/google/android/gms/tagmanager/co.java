package com.google.android.gms.tagmanager;

import android.content.Context;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

class co
  implements o.e
{
  private String aeP;
  private final String aet;
  private bg agN;
  private r agO;
  private final ScheduledExecutorService agQ;
  private final co.a agR;
  private ScheduledFuture agS;
  private boolean mClosed;
  private final Context mContext;
  
  public co(Context paramContext, String paramString, r paramR)
  {
    this(paramContext, paramString, paramR, null, null);
  }
  
  co(Context paramContext, String paramString, r paramR, co.b paramB, co.a paramA)
  {
    this.agO = paramR;
    this.mContext = paramContext;
    this.aet = paramString;
    paramContext = paramB;
    if (paramB == null) {
      paramContext = new co.1(this);
    }
    this.agQ = paramContext.mk();
    if (paramA == null)
    {
      this.agR = new co.2(this);
      return;
    }
    this.agR = paramA;
  }
  
  private cn cc(String paramString)
  {
    cn localCn = this.agR.a(this.agO);
    localCn.a(this.agN);
    localCn.bM(this.aeP);
    localCn.cb(paramString);
    return localCn;
  }
  
  private void mj()
  {
    try
    {
      if (this.mClosed) {
        throw new IllegalStateException("called method after closed");
      }
    }
    finally {}
  }
  
  public void a(bg paramBg)
  {
    try
    {
      mj();
      this.agN = paramBg;
      return;
    }
    finally
    {
      paramBg = finally;
      throw paramBg;
    }
  }
  
  public void bM(String paramString)
  {
    try
    {
      mj();
      this.aeP = paramString;
      return;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  public void e(long paramLong, String paramString)
  {
    try
    {
      bh.C("loadAfterDelay: containerId=" + this.aet + " delay=" + paramLong);
      mj();
      if (this.agN == null) {
        throw new IllegalStateException("callback must be set before loadAfterDelay() is called.");
      }
    }
    finally {}
    if (this.agS != null) {
      this.agS.cancel(false);
    }
    this.agS = this.agQ.schedule(cc(paramString), paramLong, TimeUnit.MILLISECONDS);
  }
  
  public void release()
  {
    try
    {
      mj();
      if (this.agS != null) {
        this.agS.cancel(false);
      }
      this.agQ.shutdown();
      this.mClosed = true;
      return;
    }
    finally {}
  }
}
