package com.google.android.gms.tagmanager;

class dg
  extends Number
  implements Comparable
{
  private double aik;
  private long ail;
  private boolean aim;
  
  private dg(double paramDouble)
  {
    this.aik = paramDouble;
    this.aim = false;
  }
  
  private dg(long paramLong)
  {
    this.ail = paramLong;
    this.aim = true;
  }
  
  public static dg a(Double paramDouble)
  {
    return new dg(paramDouble.doubleValue());
  }
  
  public static dg co(String paramString)
  {
    try
    {
      dg localDg1 = new dg(Long.parseLong(paramString));
      return localDg1;
    }
    catch (NumberFormatException localNumberFormatException1)
    {
      try
      {
        dg localDg2 = new dg(Double.parseDouble(paramString));
        return localDg2;
      }
      catch (NumberFormatException localNumberFormatException2)
      {
        throw new NumberFormatException(paramString + " is not a valid TypedNumber");
      }
    }
  }
  
  public static dg z(long paramLong)
  {
    return new dg(paramLong);
  }
  
  public int a(dg paramDg)
  {
    if ((mT()) && (paramDg.mT())) {
      return new Long(this.ail).compareTo(Long.valueOf(paramDg.ail));
    }
    return Double.compare(doubleValue(), paramDg.doubleValue());
  }
  
  public byte byteValue()
  {
    return (byte)(int)longValue();
  }
  
  public double doubleValue()
  {
    if (mT()) {
      return this.ail;
    }
    return this.aik;
  }
  
  public boolean equals(Object paramObject)
  {
    return ((paramObject instanceof dg)) && (a((dg)paramObject) == 0);
  }
  
  public float floatValue()
  {
    return (float)doubleValue();
  }
  
  public int hashCode()
  {
    return new Long(longValue()).hashCode();
  }
  
  public int intValue()
  {
    return mV();
  }
  
  public long longValue()
  {
    return mU();
  }
  
  public boolean mS()
  {
    return !mT();
  }
  
  public boolean mT()
  {
    return this.aim;
  }
  
  public long mU()
  {
    if (mT()) {
      return this.ail;
    }
    return this.aik;
  }
  
  public int mV()
  {
    return (int)longValue();
  }
  
  public short mW()
  {
    return (short)(int)longValue();
  }
  
  public short shortValue()
  {
    return mW();
  }
  
  public String toString()
  {
    if (mT()) {
      return Long.toString(this.ail);
    }
    return Double.toString(this.aik);
  }
}
