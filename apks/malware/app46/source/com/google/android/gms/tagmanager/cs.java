package com.google.android.gms.tagmanager;

import android.content.Context;
import com.google.android.gms.internal.c.i;
import com.google.android.gms.internal.d.a;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

class cs
{
  private static final by ahm = new by(dh.nd(), true);
  private final DataLayer aeu;
  private final cq.c ahn;
  private final ag aho;
  private final Map ahp;
  private final Map ahq;
  private final Map ahr;
  private final k ahs;
  private final k aht;
  private final Set ahu;
  private final Map ahv;
  private volatile String ahw;
  private int ahx;
  
  public cs(Context paramContext, cq.c paramC, DataLayer paramDataLayer, s.a paramA1, s.a paramA2, ag paramAg)
  {
    if (paramC == null) {
      throw new NullPointerException("resource cannot be null");
    }
    this.ahn = paramC;
    this.ahu = new HashSet(paramC.ms());
    this.aeu = paramDataLayer;
    this.aho = paramAg;
    paramC = new cs.1(this);
    this.ahs = new l().a(1048576, paramC);
    paramC = new cs.2(this);
    this.aht = new l().a(1048576, paramC);
    this.ahp = new HashMap();
    b(new i(paramContext));
    b(new s(paramA2));
    b(new w(paramDataLayer));
    b(new di(paramContext, paramDataLayer));
    this.ahq = new HashMap();
    c(new q());
    c(new ad());
    c(new ae());
    c(new al());
    c(new am());
    c(new bd());
    c(new be());
    c(new ch());
    c(new db());
    this.ahr = new HashMap();
    a(new b(paramContext));
    a(new c(paramContext));
    a(new e(paramContext));
    a(new f(paramContext));
    a(new g(paramContext));
    a(new h(paramContext));
    a(new m());
    a(new p(this.ahn.getVersion()));
    a(new s(paramA1));
    a(new u(paramDataLayer));
    a(new z(paramContext));
    a(new aa());
    a(new ac());
    a(new ah(this));
    a(new an());
    a(new ao());
    a(new ax(paramContext));
    a(new az());
    a(new bc());
    a(new bk(paramContext));
    a(new bz());
    a(new cb());
    a(new ce());
    a(new cg());
    a(new ci(paramContext));
    a(new ct());
    a(new cu());
    a(new dd());
    this.ahv = new HashMap();
    paramDataLayer = this.ahu.iterator();
    while (paramDataLayer.hasNext())
    {
      paramA1 = (cq.e)paramDataLayer.next();
      if (paramAg.lK())
      {
        a(paramA1.mA(), paramA1.mB(), "add macro");
        a(paramA1.mF(), paramA1.mC(), "remove macro");
        a(paramA1.my(), paramA1.mD(), "add tag");
        a(paramA1.mz(), paramA1.mE(), "remove tag");
      }
      int i = 0;
      while (i < paramA1.mA().size())
      {
        paramA2 = (cq.a)paramA1.mA().get(i);
        paramC = "Unknown";
        paramContext = paramC;
        if (paramAg.lK())
        {
          paramContext = paramC;
          if (i < paramA1.mB().size()) {
            paramContext = (String)paramA1.mB().get(i);
          }
        }
        paramC = d(this.ahv, h(paramA2));
        paramC.b(paramA1);
        paramC.a(paramA1, paramA2);
        paramC.a(paramA1, paramContext);
        i += 1;
      }
      i = 0;
      while (i < paramA1.mF().size())
      {
        paramA2 = (cq.a)paramA1.mF().get(i);
        paramC = "Unknown";
        paramContext = paramC;
        if (paramAg.lK())
        {
          paramContext = paramC;
          if (i < paramA1.mC().size()) {
            paramContext = (String)paramA1.mC().get(i);
          }
        }
        paramC = d(this.ahv, h(paramA2));
        paramC.b(paramA1);
        paramC.b(paramA1, paramA2);
        paramC.b(paramA1, paramContext);
        i += 1;
      }
    }
    paramContext = this.ahn.mt().entrySet().iterator();
    while (paramContext.hasNext())
    {
      paramC = (Map.Entry)paramContext.next();
      paramDataLayer = ((List)paramC.getValue()).iterator();
      while (paramDataLayer.hasNext())
      {
        paramA1 = (cq.a)paramDataLayer.next();
        if (!dh.n((d.a)paramA1.mo().get(com.google.android.gms.internal.b.dh.toString())).booleanValue()) {
          d(this.ahv, (String)paramC.getKey()).i(paramA1);
        }
      }
    }
  }
  
  private by a(d.a paramA, Set paramSet, dj paramDj)
  {
    if (!paramA.fX) {
      return new by(paramA, true);
    }
    by localBy1;
    switch (paramA.type)
    {
    case 5: 
    case 6: 
    default: 
      bh.A("Unknown type: " + paramA.type);
      return ahm;
    case 2: 
      localA = cq.g(paramA);
      localA.fO = new d.a[paramA.fO.length];
      i = 0;
      while (i < paramA.fO.length)
      {
        localBy1 = a(paramA.fO[i], paramSet, paramDj.dq(i));
        if (localBy1 == ahm) {
          return ahm;
        }
        localA.fO[i] = ((d.a)localBy1.getObject());
        i += 1;
      }
      return new by(localA, false);
    case 3: 
      localA = cq.g(paramA);
      if (paramA.fP.length != paramA.fQ.length)
      {
        bh.A("Invalid serving value: " + paramA.toString());
        return ahm;
      }
      localA.fP = new d.a[paramA.fP.length];
      localA.fQ = new d.a[paramA.fP.length];
      i = 0;
      while (i < paramA.fP.length)
      {
        localBy1 = a(paramA.fP[i], paramSet, paramDj.dr(i));
        by localBy2 = a(paramA.fQ[i], paramSet, paramDj.ds(i));
        if ((localBy1 == ahm) || (localBy2 == ahm)) {
          return ahm;
        }
        localA.fP[i] = ((d.a)localBy1.getObject());
        localA.fQ[i] = ((d.a)localBy2.getObject());
        i += 1;
      }
      return new by(localA, false);
    case 4: 
      if (paramSet.contains(paramA.fR))
      {
        bh.A("Macro cycle detected.  Current macro reference: " + paramA.fR + "." + "  Previous macro references: " + paramSet.toString() + ".");
        return ahm;
      }
      paramSet.add(paramA.fR);
      paramDj = dk.a(a(paramA.fR, paramSet, paramDj.lZ()), paramA.fW);
      paramSet.remove(paramA.fR);
      return paramDj;
    }
    d.a localA = cq.g(paramA);
    localA.fV = new d.a[paramA.fV.length];
    int i = 0;
    while (i < paramA.fV.length)
    {
      localBy1 = a(paramA.fV[i], paramSet, paramDj.dt(i));
      if (localBy1 == ahm) {
        return ahm;
      }
      localA.fV[i] = ((d.a)localBy1.getObject());
      i += 1;
    }
    return new by(localA, false);
  }
  
  private by a(String paramString, Set paramSet, bj paramBj)
  {
    this.ahx += 1;
    Object localObject = (cs.b)this.aht.get(paramString);
    if ((localObject != null) && (!this.aho.lK()))
    {
      a(((cs.b)localObject).mp(), paramSet);
      this.ahx -= 1;
      return ((cs.b)localObject).mJ();
    }
    localObject = (cs.c)this.ahv.get(paramString);
    if (localObject == null)
    {
      bh.A(mI() + "Invalid macro: " + paramString);
      this.ahx -= 1;
      return ahm;
    }
    by localBy = a(paramString, ((cs.c)localObject).mK(), ((cs.c)localObject).mL(), ((cs.c)localObject).mM(), ((cs.c)localObject).mO(), ((cs.c)localObject).mN(), paramSet, paramBj.lB());
    if (((Set)localBy.getObject()).isEmpty()) {}
    for (localObject = ((cs.c)localObject).mP(); localObject == null; localObject = (cq.a)((Set)localBy.getObject()).iterator().next())
    {
      this.ahx -= 1;
      return ahm;
      if (((Set)localBy.getObject()).size() > 1) {
        bh.D(mI() + "Multiple macros active for macroName " + paramString);
      }
    }
    paramBj = a(this.ahr, (cq.a)localObject, paramSet, paramBj.lQ());
    boolean bool;
    if ((localBy.ma()) && (paramBj.ma()))
    {
      bool = true;
      if (paramBj != ahm) {
        break label392;
      }
    }
    label392:
    for (paramBj = ahm;; paramBj = new by(paramBj.getObject(), bool))
    {
      localObject = ((cq.a)localObject).mp();
      if (paramBj.ma()) {
        this.aht.e(paramString, new cs.b(paramBj, (d.a)localObject));
      }
      a((d.a)localObject, paramSet);
      this.ahx -= 1;
      return paramBj;
      bool = false;
      break;
    }
  }
  
  private by a(Map paramMap, cq.a paramA, Set paramSet, cj paramCj)
  {
    boolean bool = true;
    Object localObject1 = (d.a)paramA.mo().get(com.google.android.gms.internal.b.cx.toString());
    if (localObject1 == null)
    {
      bh.A("No function id in properties");
      paramMap = ahm;
    }
    aj localAj;
    do
    {
      return paramMap;
      localObject1 = ((d.a)localObject1).fS;
      localAj = (aj)paramMap.get(localObject1);
      if (localAj == null)
      {
        bh.A((String)localObject1 + " has no backing implementation.");
        return ahm;
      }
      paramMap = (by)this.ahs.get(paramA);
    } while ((paramMap != null) && (!this.aho.lK()));
    paramMap = new HashMap();
    Iterator localIterator = paramA.mo().entrySet().iterator();
    int i = 1;
    if (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      Object localObject2 = paramCj.bZ((String)localEntry.getKey());
      localObject2 = a((d.a)localEntry.getValue(), paramSet, ((cl)localObject2).e((d.a)localEntry.getValue()));
      if (localObject2 == ahm) {
        return ahm;
      }
      if (((by)localObject2).ma()) {
        paramA.a((String)localEntry.getKey(), (d.a)((by)localObject2).getObject());
      }
      for (;;)
      {
        paramMap.put(localEntry.getKey(), ((by)localObject2).getObject());
        break;
        i = 0;
      }
    }
    if (!localAj.a(paramMap.keySet()))
    {
      bh.A("Incorrect keys for function " + (String)localObject1 + " required " + localAj.lM() + " had " + paramMap.keySet());
      return ahm;
    }
    if ((i != 0) && (localAj.lh())) {}
    for (;;)
    {
      paramMap = new by(localAj.w(paramMap), bool);
      if (bool) {
        this.ahs.e(paramA, paramMap);
      }
      paramCj.d((d.a)paramMap.getObject());
      return paramMap;
      bool = false;
    }
  }
  
  private by a(Set paramSet1, Set paramSet2, cs.a paramA, cr paramCr)
  {
    HashSet localHashSet1 = new HashSet();
    HashSet localHashSet2 = new HashSet();
    paramSet1 = paramSet1.iterator();
    boolean bool = true;
    if (paramSet1.hasNext())
    {
      cq.e localE = (cq.e)paramSet1.next();
      cm localCm = paramCr.lY();
      by localBy = a(localE, paramSet2, localCm);
      if (((Boolean)localBy.getObject()).booleanValue()) {
        paramA.a(localE, localHashSet1, localHashSet2, localCm);
      }
      if ((bool) && (localBy.ma())) {}
      for (bool = true;; bool = false) {
        break;
      }
    }
    localHashSet1.removeAll(localHashSet2);
    paramCr.b(localHashSet1);
    return new by(localHashSet1, bool);
  }
  
  private void a(d.a paramA, Set paramSet)
  {
    if (paramA == null) {}
    for (;;)
    {
      return;
      paramA = a(paramA, paramSet, new bw());
      if (paramA != ahm)
      {
        paramA = dh.o((d.a)paramA.getObject());
        if ((paramA instanceof Map))
        {
          paramA = (Map)paramA;
          this.aeu.push(paramA);
          return;
        }
        if (!(paramA instanceof List)) {
          break;
        }
        paramA = ((List)paramA).iterator();
        while (paramA.hasNext())
        {
          paramSet = paramA.next();
          if ((paramSet instanceof Map))
          {
            paramSet = (Map)paramSet;
            this.aeu.push(paramSet);
          }
          else
          {
            bh.D("pushAfterEvaluate: value not a Map");
          }
        }
      }
    }
    bh.D("pushAfterEvaluate: value not a Map or List");
  }
  
  private static void a(List paramList1, List paramList2, String paramString)
  {
    if (paramList1.size() != paramList2.size()) {
      bh.B("Invalid resource: imbalance of rule names of functions for " + paramString + " operation. Using default rule name instead");
    }
  }
  
  private static void a(Map paramMap, aj paramAj)
  {
    if (paramMap.containsKey(paramAj.lL())) {
      throw new IllegalArgumentException("Duplicate function type name: " + paramAj.lL());
    }
    paramMap.put(paramAj.lL(), paramAj);
  }
  
  private static cs.c d(Map paramMap, String paramString)
  {
    cs.c localC2 = (cs.c)paramMap.get(paramString);
    cs.c localC1 = localC2;
    if (localC2 == null)
    {
      localC1 = new cs.c();
      paramMap.put(paramString, localC1);
    }
    return localC1;
  }
  
  private static String h(cq.a paramA)
  {
    return dh.j((d.a)paramA.mo().get(com.google.android.gms.internal.b.cI.toString()));
  }
  
  private String mI()
  {
    if (this.ahx <= 1) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(Integer.toString(this.ahx));
    int i = 2;
    while (i < this.ahx)
    {
      localStringBuilder.append(' ');
      i += 1;
    }
    localStringBuilder.append(": ");
    return localStringBuilder.toString();
  }
  
  by a(cq.a paramA, Set paramSet, cj paramCj)
  {
    paramA = a(this.ahq, paramA, paramSet, paramCj);
    paramSet = dh.n((d.a)paramA.getObject());
    paramCj.d(dh.r(paramSet));
    return new by(paramSet, paramA.ma());
  }
  
  by a(cq.e paramE, Set paramSet, cm paramCm)
  {
    Object localObject = paramE.mx().iterator();
    boolean bool = true;
    if (((Iterator)localObject).hasNext())
    {
      by localBy = a((cq.a)((Iterator)localObject).next(), paramSet, paramCm.lS());
      if (((Boolean)localBy.getObject()).booleanValue())
      {
        paramCm.f(dh.r(Boolean.valueOf(false)));
        return new by(Boolean.valueOf(false), localBy.ma());
      }
      if ((bool) && (localBy.ma())) {}
      for (bool = true;; bool = false) {
        break;
      }
    }
    paramE = paramE.mw().iterator();
    while (paramE.hasNext())
    {
      localObject = a((cq.a)paramE.next(), paramSet, paramCm.lT());
      if (!((Boolean)((by)localObject).getObject()).booleanValue())
      {
        paramCm.f(dh.r(Boolean.valueOf(false)));
        return new by(Boolean.valueOf(false), ((by)localObject).ma());
      }
      if ((bool) && (((by)localObject).ma())) {
        bool = true;
      } else {
        bool = false;
      }
    }
    paramCm.f(dh.r(Boolean.valueOf(true)));
    return new by(Boolean.valueOf(true), bool);
  }
  
  by a(String paramString, Set paramSet1, Map paramMap1, Map paramMap2, Map paramMap3, Map paramMap4, Set paramSet2, cr paramCr)
  {
    return a(paramSet1, paramSet2, new cs.3(this, paramMap1, paramMap2, paramMap3, paramMap4), paramCr);
  }
  
  by a(Set paramSet, cr paramCr)
  {
    return a(paramSet, new HashSet(), new cs.4(this), paramCr);
  }
  
  void a(aj paramAj)
  {
    a(this.ahr, paramAj);
  }
  
  void b(aj paramAj)
  {
    a(this.ahp, paramAj);
  }
  
  public void bH(String paramString)
  {
    try
    {
      ck(paramString);
      paramString = this.aho.bT(paramString);
      t localT = paramString.lI();
      Iterator localIterator = ((Set)a(this.ahu, localT.lB()).getObject()).iterator();
      while (localIterator.hasNext())
      {
        cq.a localA = (cq.a)localIterator.next();
        a(this.ahp, localA, new HashSet(), localT.lA());
      }
      paramString.lJ();
    }
    finally {}
    ck(null);
  }
  
  void c(aj paramAj)
  {
    a(this.ahq, paramAj);
  }
  
  public by cj(String paramString)
  {
    this.ahx = 0;
    af localAf = this.aho.bS(paramString);
    paramString = a(paramString, new HashSet(), localAf.lH());
    localAf.lJ();
    return paramString;
  }
  
  void ck(String paramString)
  {
    try
    {
      this.ahw = paramString;
      return;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  public void h(List paramList)
  {
    for (;;)
    {
      try
      {
        paramList = paramList.iterator();
        if (!paramList.hasNext()) {
          break;
        }
        c.i localI = (c.i)paramList.next();
        if ((localI.name == null) || (!localI.name.startsWith("gaExperiment:"))) {
          bh.C("Ignored supplemental: " + localI);
        } else {
          ai.a(this.aeu, localI);
        }
      }
      finally {}
    }
  }
  
  String mH()
  {
    try
    {
      String str = this.ahw;
      return str;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
}
