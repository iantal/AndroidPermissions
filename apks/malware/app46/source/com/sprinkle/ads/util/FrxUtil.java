package com.sprinkle.ads.util;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.os.Build.VERSION;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

public class FrxUtil
{
  public FrxUtil() {}
  
  public static void delFile(String paramString)
  {
    paramString = new File(paramString);
    if (!paramString.exists()) {
      return;
    }
    File[] arrayOfFile;
    int j;
    int i;
    if (paramString.isDirectory())
    {
      arrayOfFile = paramString.listFiles();
      j = arrayOfFile.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= j)
      {
        paramString.delete();
        return;
      }
      delFile(arrayOfFile[i].getAbsolutePath());
      i += 1;
    }
  }
  
  public static String getSystemInfo(Context paramContext)
  {
    Object localObject1 = new StringBuffer();
    Object localObject2 = (TelephonyManager)paramContext.getSystemService("phone");
    Object localObject3 = ((TelephonyManager)localObject2).getDeviceId();
    if ((localObject3 != null) && (!"".equals(localObject3))) {
      ((StringBuffer)localObject1).append("&imei=").append((String)localObject3);
    }
    String str = ((TelephonyManager)localObject2).getSubscriberId();
    if ((str != null) && (!"".equals(str))) {
      ((StringBuffer)localObject1).append("&imsi=").append(str);
    }
    try
    {
      str = ((TelephonyManager)localObject2).getSimSerialNumber();
      long l1 = Settings.Secure.getString(paramContext.getContentResolver(), "android_id").hashCode();
      long l2 = ((String)localObject3).hashCode();
      localObject3 = new UUID(l1, str.hashCode() | l2 << 32).toString();
      if ((localObject3 != null) && (!"".equals(localObject3))) {
        ((StringBuffer)localObject1).append("&uuid=").append((String)localObject3);
      }
    }
    catch (Exception localException2)
    {
      for (;;) {}
    }
    if ((localObject2 != null) && (((TelephonyManager)localObject2).getSimState() == 5)) {
      ((StringBuffer)localObject1).append("&carrier=").append(((TelephonyManager)localObject2).getSimOperatorName());
    }
    localObject2 = Locale.getDefault().getCountry();
    localObject3 = Locale.getDefault().getLanguage();
    if ((localObject2 != null) && (!"".equals(localObject2))) {
      ((StringBuffer)localObject1).append("&country=").append((String)localObject2);
    }
    if ((localObject3 != null) && (!"".equals(localObject3))) {
      ((StringBuffer)localObject1).append("&language=").append((String)localObject3);
    }
    localObject2 = paramContext.getPackageName();
    if ((localObject2 != null) && (!"".equals(localObject2))) {
      ((StringBuffer)localObject1).append("&package=").append((String)localObject2);
    }
    localObject3 = paramContext.getPackageManager();
    try
    {
      localObject2 = ((PackageManager)localObject3).getPackageInfo((String)localObject2, 0);
      i = ((PackageInfo)localObject2).versionCode;
      localObject2 = ((PackageInfo)localObject2).versionName;
      if ((localObject2 != null) && (!"".equals(localObject2))) {
        ((StringBuffer)localObject1).append("&version_name=").append((String)localObject2);
      }
      if (i != -1) {
        ((StringBuffer)localObject1).append("&version_code=").append(i);
      }
    }
    catch (Exception localException1)
    {
      int i;
      for (;;) {}
    }
    i = Build.VERSION.SDK_INT;
    ((StringBuffer)localObject1).append("&os_version=").append(i);
    paramContext = paramContext.getResources().getDisplayMetrics();
    paramContext = paramContext.widthPixels + "*" + paramContext.heightPixels;
    if ((paramContext != null) && (!"".equals(paramContext))) {
      ((StringBuffer)localObject1).append("&screen_size=").append(paramContext);
    }
    localObject1 = ((StringBuffer)localObject1).toString();
    paramContext = (Context)localObject1;
    if (((String)localObject1).startsWith("&")) {
      paramContext = ((String)localObject1).substring(1);
    }
    return paramContext;
  }
  
  public static boolean isInstalledPackage(Context paramContext, String paramString)
  {
    paramContext = paramContext.getPackageManager().getInstalledPackages(0).iterator();
    do
    {
      if (!paramContext.hasNext()) {
        return false;
      }
    } while (!paramString.equals(((PackageInfo)paramContext.next()).packageName));
    return true;
  }
  
  public static boolean isNetworkAvaliable(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    if (paramContext != null)
    {
      paramContext = paramContext.getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.isConnected()) && (NetworkInfo.State.CONNECTED == paramContext.getState())) {
        return true;
      }
    }
    return false;
  }
  
  public static String sendGet(String paramString1, String paramString2, String paramString3)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    Object localObject = paramString1;
    if (paramString2 != null)
    {
      localObject = paramString1;
      if (!"".equals(paramString2)) {
        localObject = paramString1 + "?" + paramString2;
      }
    }
    for (;;)
    {
      try
      {
        paramString1 = (HttpURLConnection)new URL((String)localObject).openConnection();
        paramString1.setRequestMethod("GET");
        paramString1.setConnectTimeout(3000);
        paramString1.setReadTimeout(30000);
        paramString1.connect();
        if (paramString1.getResponseCode() == 200)
        {
          paramString2 = paramString1.getInputStream();
          paramString3 = new InputStreamReader(paramString2, paramString3);
          localObject = new BufferedReader(paramString3);
          str = ((BufferedReader)localObject).readLine();
          if (str != null) {
            continue;
          }
          ((BufferedReader)localObject).close();
          paramString3.close();
          paramString2.close();
          paramString1.disconnect();
        }
      }
      catch (Exception paramString1)
      {
        String str;
        paramString1.printStackTrace();
        continue;
      }
      return localStringBuffer.toString().trim();
      localStringBuffer.append(str).append(System.getProperty("line.separator"));
    }
  }
  
  public static String sendPost(String paramString1, String paramString2, String paramString3)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    for (;;)
    {
      try
      {
        paramString1 = (HttpURLConnection)new URL(paramString1).openConnection();
        paramString1.setRequestMethod("POST");
        paramString1.setDoOutput(true);
        paramString1.setDoInput(true);
        paramString1.setConnectTimeout(3000);
        paramString1.setReadTimeout(30000);
        paramString1.connect();
        Object localObject1;
        if ((paramString2 != null) && (!"".equals(paramString2)))
        {
          localObject1 = paramString1.getOutputStream();
          localObject2 = new BufferedOutputStream((OutputStream)localObject1);
          OutputStreamWriter localOutputStreamWriter = new OutputStreamWriter((OutputStream)localObject2);
          localOutputStreamWriter.write(paramString2);
          localOutputStreamWriter.flush();
          localOutputStreamWriter.close();
          ((BufferedOutputStream)localObject2).close();
          ((OutputStream)localObject1).close();
        }
        if (paramString1.getResponseCode() == 200)
        {
          paramString2 = paramString1.getInputStream();
          paramString3 = new InputStreamReader(paramString2, paramString3);
          localObject1 = new BufferedReader(paramString3);
          localObject2 = ((BufferedReader)localObject1).readLine();
          if (localObject2 != null) {
            continue;
          }
          ((BufferedReader)localObject1).close();
          paramString3.close();
          paramString2.close();
          paramString1.disconnect();
        }
      }
      catch (Exception paramString1)
      {
        Object localObject2;
        paramString1.printStackTrace();
        continue;
      }
      return localStringBuffer.toString().trim();
      localStringBuffer.append((String)localObject2).append(System.getProperty("line.separator"));
    }
  }
}
