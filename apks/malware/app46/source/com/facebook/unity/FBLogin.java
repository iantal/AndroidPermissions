package com.facebook.unity;

import android.app.Activity;
import android.content.Intent;
import android.util.Log;
import com.facebook.Request;
import com.facebook.Request.GraphUserCallback;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.Session.Builder;
import com.facebook.Session.NewPermissionsRequest;
import com.facebook.Session.OpenRequest;
import com.facebook.Session.StatusCallback;
import com.facebook.SessionDefaultAudience;
import com.facebook.SessionState;
import com.facebook.model.GraphUser;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class FBLogin
{
  public FBLogin() {}
  
  private static void finalizeLogin(Session paramSession, SessionState paramSessionState, Exception paramException, UnityMessage paramUnityMessage, Activity paramActivity)
  {
    if (paramActivity != null) {
      paramActivity.finish();
    }
    if ((!paramSession.isOpened()) && (paramSessionState != SessionState.CLOSED_LOGIN_FAILED))
    {
      paramUnityMessage.sendError("Unknown error while opening session. Check logcat for details.");
      return;
    }
    if (paramSession.isOpened()) {
      paramUnityMessage.put("opened", Boolean.valueOf(true));
    }
    while ((paramSession.getAccessToken() == null) || (paramSession.getAccessToken().equals("")))
    {
      paramUnityMessage.send();
      return;
      if (paramSessionState == SessionState.CLOSED_LOGIN_FAILED) {
        paramUnityMessage.putCancelled();
      }
    }
    paramSession.addCallback(new Session.StatusCallback()
    {
      public void call(Session paramAnonymousSession, SessionState paramAnonymousSessionState, Exception paramAnonymousException)
      {
        if ((paramAnonymousSession == null) || (paramAnonymousSession.getAccessToken() == null)) {
          return;
        }
        paramAnonymousSessionState = new UnityMessage("OnAccessTokenUpdate");
        paramAnonymousSessionState.put("access_token", paramAnonymousSession.getAccessToken());
        paramAnonymousSessionState.put("expiration_timestamp", "" + paramAnonymousSession.getExpirationDate().getTime() / 1000L);
        paramAnonymousSessionState.send();
      }
    });
    paramUnityMessage.put("access_token", paramSession.getAccessToken());
    paramUnityMessage.put("expiration_timestamp", "" + paramSession.getExpirationDate().getTime() / 1000L);
    Request.newMeRequest(paramSession, new Request.GraphUserCallback()
    {
      public void onCompleted(GraphUser paramAnonymousGraphUser, Response paramAnonymousResponse)
      {
        if (paramAnonymousGraphUser != null) {
          this.val$unityMessage.put("user_id", paramAnonymousGraphUser.getId());
        }
        this.val$unityMessage.send();
      }
    }).executeAsync();
  }
  
  private static Session.StatusCallback getAfterReadPermissionLoginCallback(UnityMessage paramUnityMessage, final List<String> paramList, final Activity paramActivity)
  {
    new Session.StatusCallback()
    {
      public void call(Session paramAnonymousSession, SessionState paramAnonymousSessionState, Exception paramAnonymousException)
      {
        if (paramAnonymousSession.getState().equals(SessionState.OPENING)) {
          return;
        }
        paramAnonymousSession.removeCallback(this);
        if ((!paramAnonymousSession.isOpened()) && (paramAnonymousSessionState != SessionState.CLOSED_LOGIN_FAILED))
        {
          this.val$unityMessage.sendError("Unknown error while opening session. Check logcat for details.");
          paramActivity.finish();
          return;
        }
        if ((paramAnonymousSession.getAccessToken() == null) || (paramAnonymousSession.getAccessToken().equals("")))
        {
          this.val$unityMessage.putCancelled();
          this.val$unityMessage.send();
          paramActivity.finish();
          return;
        }
        if (paramAnonymousSession.getPermissions().containsAll(paramList))
        {
          FBLogin.finalizeLogin(paramAnonymousSession, paramAnonymousSessionState, paramAnonymousException, this.val$unityMessage, paramActivity);
          return;
        }
        FBLogin.sessionOpenRequest(paramAnonymousSession, FBLogin.getFinalCallback(this.val$unityMessage, paramActivity), paramActivity, paramList, true);
      }
    };
  }
  
  private static Session.StatusCallback getFinalCallback(UnityMessage paramUnityMessage, final Activity paramActivity)
  {
    new Session.StatusCallback()
    {
      public void call(Session paramAnonymousSession, SessionState paramAnonymousSessionState, Exception paramAnonymousException)
      {
        if (paramAnonymousSession.getState().equals(SessionState.OPENING)) {
          return;
        }
        paramAnonymousSession.removeCallback(this);
        FBLogin.finalizeLogin(paramAnonymousSession, paramAnonymousSessionState, paramAnonymousException, this.val$unityMessage, paramActivity);
      }
    };
  }
  
  private static Session.NewPermissionsRequest getNewPermissionsRequest(Session paramSession, Session.StatusCallback paramStatusCallback, List<String> paramList, Activity paramActivity)
  {
    paramList = new Session.NewPermissionsRequest(paramActivity, paramList);
    paramList.setCallback(paramStatusCallback);
    paramSession.addCallback(paramStatusCallback);
    paramList.setDefaultAudience(SessionDefaultAudience.FRIENDS);
    return paramList;
  }
  
  private static Session.OpenRequest getOpenRequest(Session.StatusCallback paramStatusCallback, List<String> paramList, Activity paramActivity)
  {
    paramActivity = new Session.OpenRequest(paramActivity);
    paramActivity.setCallback(paramStatusCallback);
    paramActivity.setPermissions(paramList);
    paramActivity.setDefaultAudience(SessionDefaultAudience.FRIENDS);
    return paramActivity;
  }
  
  public static void init(String paramString)
  {
    if (FB.isLoggedIn())
    {
      Session localSession2 = Session.getActiveSession();
      localSession1 = localSession2;
      if (paramString != localSession2.getApplicationId()) {
        Log.w("FBUnitySDK", "App Id in active session (" + localSession2.getApplicationId() + ") doesn't match App Id passed in: " + paramString);
      }
    }
    for (Session localSession1 = new Session.Builder(FB.getUnityActivity()).setApplicationId(paramString).build();; localSession1 = new Session.Builder(FB.getUnityActivity()).setApplicationId(paramString).build())
    {
      Session.setActiveSession(localSession1);
      paramString = new UnityMessage("OnInitComplete");
      paramString.put("key_hash", FB.getKeyHash());
      if (!SessionState.CREATED_TOKEN_LOADED.equals(localSession1.getState())) {
        break;
      }
      sessionOpenRequest(localSession1, getFinalCallback(paramString, null), FB.getUnityActivity(), null, false);
      return;
    }
    paramString.send();
  }
  
  public static void login(String paramString, Activity paramActivity)
  {
    int i = 1;
    Object localObject2 = Session.getActiveSession();
    if (localObject2 == null)
    {
      Log.w("FBUnitySDK", "Session not found. Call init() before calling login()");
      return;
    }
    Object localObject1 = localObject2;
    if (((Session)localObject2).isClosed())
    {
      localObject1 = new Session.Builder(FB.getUnityActivity()).setApplicationId(((Session)localObject2).getApplicationId()).build();
      Session.setActiveSession((Session)localObject1);
    }
    UnityMessage localUnityMessage = new UnityMessage("OnLoginComplete");
    localUnityMessage.put("key_hash", FB.getKeyHash());
    localObject2 = new ArrayList();
    Object localObject3 = UnityParams.parse(paramString, "couldn't parse login params: " + paramString);
    paramString = (String)localObject2;
    if (((UnityParams)localObject3).hasString("scope").booleanValue()) {
      paramString = new ArrayList(Arrays.asList(((UnityParams)localObject3).getString("scope").split(",")));
    }
    localObject2 = new ArrayList();
    localObject3 = new ArrayList();
    if (paramString.size() > 0)
    {
      Iterator localIterator = paramString.iterator();
      while (localIterator.hasNext())
      {
        String str = (String)localIterator.next();
        if (str.length() != 0) {
          if (Session.isPublishPermission(str)) {
            ((List)localObject2).add(str);
          } else {
            ((List)localObject3).add(str);
          }
        }
      }
    }
    boolean bool;
    if (!((List)localObject2).isEmpty())
    {
      bool = true;
      if ((!bool) || (((Session)localObject1).getPermissions().containsAll((Collection)localObject3))) {
        break label317;
      }
    }
    for (;;)
    {
      if (i == 0) {
        break label322;
      }
      sessionOpenRequest((Session)localObject1, getAfterReadPermissionLoginCallback(localUnityMessage, (List)localObject2, paramActivity), paramActivity, (List)localObject3, false);
      return;
      bool = false;
      break;
      label317:
      i = 0;
    }
    label322:
    sessionOpenRequest((Session)localObject1, getFinalCallback(localUnityMessage, paramActivity), paramActivity, paramString, bool);
  }
  
  public static void onActivityResult(Activity paramActivity, int paramInt1, int paramInt2, Intent paramIntent)
  {
    Session.getActiveSession().onActivityResult(paramActivity, paramInt1, paramInt2, paramIntent);
  }
  
  static void sessionOpenRequest(Session paramSession, Session.StatusCallback paramStatusCallback, Activity paramActivity, List<String> paramList, boolean paramBoolean)
  {
    if (paramSession.isOpened())
    {
      paramStatusCallback = getNewPermissionsRequest(paramSession, paramStatusCallback, paramList, paramActivity);
      if (paramBoolean)
      {
        paramSession.requestNewPublishPermissions(paramStatusCallback);
        return;
      }
      paramSession.requestNewReadPermissions(paramStatusCallback);
      return;
    }
    paramStatusCallback = getOpenRequest(paramStatusCallback, paramList, paramActivity);
    if (paramBoolean)
    {
      paramSession.openForPublish(paramStatusCallback);
      return;
    }
    paramSession.openForRead(paramStatusCallback);
  }
}
