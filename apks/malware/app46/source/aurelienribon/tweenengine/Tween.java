package aurelienribon.tweenengine;

import aurelienribon.tweenengine.equations.Quad;
import java.util.HashMap;
import java.util.Map;

public final class Tween
  extends BaseTween
{
  public static final int INFINITY = -1;
  private static int combinedAttrsLimit;
  private static final Pool pool;
  private static final Pool.Callback poolCallback;
  private static final Map registeredAccessors;
  private static int waypointsLimit;
  private TweenAccessor accessor;
  private float[] accessorBuffer = new float[combinedAttrsLimit];
  private int combinedAttrsCnt;
  private TweenEquation equation;
  private boolean isFrom;
  private boolean isRelative;
  private TweenPath path;
  private float[] pathBuffer = new float[(waypointsLimit + 2) * combinedAttrsLimit];
  private final float[] startValues = new float[combinedAttrsLimit];
  private Object target;
  private Class targetClass;
  private final float[] targetValues = new float[combinedAttrsLimit];
  private int type;
  private final float[] waypoints = new float[waypointsLimit * combinedAttrsLimit];
  private int waypointsCnt;
  
  static
  {
    if (!Tween.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      $assertionsDisabled = bool;
      combinedAttrsLimit = 3;
      waypointsLimit = 0;
      poolCallback = new Tween.1();
      pool = new Tween.2(20, poolCallback);
      registeredAccessors = new HashMap();
      return;
    }
  }
  
  private Tween()
  {
    reset();
  }
  
  public static Tween call(TweenCallback paramTweenCallback)
  {
    Tween localTween = (Tween)pool.get();
    localTween.setup(null, -1, 0.0F);
    localTween.setCallback(paramTweenCallback);
    localTween.setCallbackTriggers(2);
    return localTween;
  }
  
  public static void ensurePoolCapacity(int paramInt)
  {
    pool.ensureCapacity(paramInt);
  }
  
  private Class findTargetClass()
  {
    Object localObject;
    if (registeredAccessors.containsKey(this.target.getClass()))
    {
      localObject = this.target.getClass();
      return localObject;
    }
    if ((this.target instanceof TweenAccessor)) {
      return this.target.getClass();
    }
    for (Class localClass = this.target.getClass().getSuperclass();; localClass = localClass.getSuperclass())
    {
      localObject = localClass;
      if (localClass == null) {
        break;
      }
      localObject = localClass;
      if (registeredAccessors.containsKey(localClass)) {
        break;
      }
    }
  }
  
  public static Tween from(Object paramObject, int paramInt, float paramFloat)
  {
    Tween localTween = (Tween)pool.get();
    localTween.setup(paramObject, paramInt, paramFloat);
    localTween.ease(Quad.INOUT);
    localTween.path(TweenPaths.catmullRom);
    localTween.isFrom = true;
    return localTween;
  }
  
  public static int getPoolSize()
  {
    return pool.size();
  }
  
  public static TweenAccessor getRegisteredAccessor(Class paramClass)
  {
    return (TweenAccessor)registeredAccessors.get(paramClass);
  }
  
  public static String getVersion()
  {
    return "6.3.0";
  }
  
  public static Tween mark()
  {
    Tween localTween = (Tween)pool.get();
    localTween.setup(null, -1, 0.0F);
    return localTween;
  }
  
  public static void registerAccessor(Class paramClass, TweenAccessor paramTweenAccessor)
  {
    registeredAccessors.put(paramClass, paramTweenAccessor);
  }
  
  public static Tween set(Object paramObject, int paramInt)
  {
    Tween localTween = (Tween)pool.get();
    localTween.setup(paramObject, paramInt, 0.0F);
    localTween.ease(Quad.INOUT);
    return localTween;
  }
  
  public static void setCombinedAttributesLimit(int paramInt)
  {
    combinedAttrsLimit = paramInt;
  }
  
  public static void setWaypointsLimit(int paramInt)
  {
    waypointsLimit = paramInt;
  }
  
  private void setup(Object paramObject, int paramInt, float paramFloat)
  {
    if (paramFloat < 0.0F) {
      throw new RuntimeException("Duration can't be negative");
    }
    this.target = paramObject;
    if (paramObject != null) {}
    for (paramObject = findTargetClass();; paramObject = null)
    {
      this.targetClass = paramObject;
      this.type = paramInt;
      this.duration = paramFloat;
      return;
    }
  }
  
  private void throwCombinedAttrsLimitReached()
  {
    throw new RuntimeException("You cannot combine more than " + combinedAttrsLimit + " attributes in a tween. You can raise this limit with Tween.setCombinedAttributesLimit(), which should be called once in application initialization code.");
  }
  
  private void throwWaypointsLimitReached()
  {
    throw new RuntimeException("You cannot add more than " + waypointsLimit + " waypoints to a tween. You can raise this limit with Tween.setWaypointsLimit(), which should be called once in application initialization code.");
  }
  
  public static Tween to(Object paramObject, int paramInt, float paramFloat)
  {
    Tween localTween = (Tween)pool.get();
    localTween.setup(paramObject, paramInt, paramFloat);
    localTween.ease(Quad.INOUT);
    localTween.path(TweenPaths.catmullRom);
    return localTween;
  }
  
  public final Tween build()
  {
    if (this.target == null) {}
    do
    {
      return this;
      this.accessor = ((TweenAccessor)registeredAccessors.get(this.targetClass));
      if ((this.accessor == null) && ((this.target instanceof TweenAccessor))) {
        this.accessor = ((TweenAccessor)this.target);
      }
      if (this.accessor == null) {
        break;
      }
      this.combinedAttrsCnt = this.accessor.getValues(this.target, this.type, this.accessorBuffer);
    } while (this.combinedAttrsCnt <= combinedAttrsLimit);
    throwCombinedAttrsLimitReached();
    return this;
    throw new RuntimeException("No TweenAccessor was found for the target");
  }
  
  public final Tween cast(Class paramClass)
  {
    if (isStarted()) {
      throw new RuntimeException("You can't cast the target of a tween once it is started");
    }
    this.targetClass = paramClass;
    return this;
  }
  
  protected final boolean containsTarget(Object paramObject)
  {
    return this.target == paramObject;
  }
  
  protected final boolean containsTarget(Object paramObject, int paramInt)
  {
    return (this.target == paramObject) && (this.type == paramInt);
  }
  
  public final Tween ease(TweenEquation paramTweenEquation)
  {
    this.equation = paramTweenEquation;
    return this;
  }
  
  protected final void forceEndValues()
  {
    if (this.target == null) {
      return;
    }
    this.accessor.setValues(this.target, this.type, this.targetValues);
  }
  
  protected final void forceStartValues()
  {
    if (this.target == null) {
      return;
    }
    this.accessor.setValues(this.target, this.type, this.startValues);
  }
  
  public final void free()
  {
    pool.free(this);
  }
  
  public final TweenAccessor getAccessor()
  {
    return this.accessor;
  }
  
  public final int getCombinedAttributesCount()
  {
    return this.combinedAttrsCnt;
  }
  
  public final TweenEquation getEasing()
  {
    return this.equation;
  }
  
  public final Object getTarget()
  {
    return this.target;
  }
  
  public final Class getTargetClass()
  {
    return this.targetClass;
  }
  
  public final float[] getTargetValues()
  {
    return this.targetValues;
  }
  
  public final int getType()
  {
    return this.type;
  }
  
  protected final void initializeOverride()
  {
    if (this.target == null) {}
    for (;;)
    {
      return;
      this.accessor.getValues(this.target, this.type, this.startValues);
      int i = 0;
      while (i < this.combinedAttrsCnt)
      {
        float[] arrayOfFloat = this.targetValues;
        float f2 = arrayOfFloat[i];
        int j;
        label75:
        int k;
        if (this.isRelative)
        {
          f1 = this.startValues[i];
          arrayOfFloat[i] = (f1 + f2);
          j = 0;
          if (j >= this.waypointsCnt) {
            break label148;
          }
          arrayOfFloat = this.waypoints;
          k = this.combinedAttrsCnt * j + i;
          f2 = arrayOfFloat[k];
          if (!this.isRelative) {
            break label143;
          }
        }
        label143:
        for (float f1 = this.startValues[i];; f1 = 0.0F)
        {
          arrayOfFloat[k] = (f1 + f2);
          j += 1;
          break label75;
          f1 = 0.0F;
          break;
        }
        label148:
        if (this.isFrom)
        {
          f1 = this.startValues[i];
          this.startValues[i] = this.targetValues[i];
          this.targetValues[i] = f1;
        }
        i += 1;
      }
    }
  }
  
  public final Tween path(TweenPath paramTweenPath)
  {
    this.path = paramTweenPath;
    return this;
  }
  
  protected final void reset()
  {
    super.reset();
    this.target = null;
    this.targetClass = null;
    this.accessor = null;
    this.type = -1;
    this.equation = null;
    this.path = null;
    this.isRelative = false;
    this.isFrom = false;
    this.waypointsCnt = 0;
    this.combinedAttrsCnt = 0;
    if (this.accessorBuffer.length != combinedAttrsLimit) {
      this.accessorBuffer = new float[combinedAttrsLimit];
    }
    if (this.pathBuffer.length != (waypointsLimit + 2) * combinedAttrsLimit) {
      this.pathBuffer = new float[(waypointsLimit + 2) * combinedAttrsLimit];
    }
  }
  
  public final Tween target(float paramFloat)
  {
    this.targetValues[0] = paramFloat;
    return this;
  }
  
  public final Tween target(float paramFloat1, float paramFloat2)
  {
    this.targetValues[0] = paramFloat1;
    this.targetValues[1] = paramFloat2;
    return this;
  }
  
  public final Tween target(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    this.targetValues[0] = paramFloat1;
    this.targetValues[1] = paramFloat2;
    this.targetValues[2] = paramFloat3;
    return this;
  }
  
  public final Tween target(float... paramVarArgs)
  {
    if (paramVarArgs.length > combinedAttrsLimit) {
      throwCombinedAttrsLimitReached();
    }
    System.arraycopy(paramVarArgs, 0, this.targetValues, 0, paramVarArgs.length);
    return this;
  }
  
  public final Tween targetRelative(float paramFloat)
  {
    this.isRelative = true;
    float[] arrayOfFloat = this.targetValues;
    float f = paramFloat;
    if (isInitialized()) {
      f = paramFloat + this.startValues[0];
    }
    arrayOfFloat[0] = f;
    return this;
  }
  
  public final Tween targetRelative(float paramFloat1, float paramFloat2)
  {
    this.isRelative = true;
    float[] arrayOfFloat = this.targetValues;
    float f = paramFloat1;
    if (isInitialized()) {
      f = paramFloat1 + this.startValues[0];
    }
    arrayOfFloat[0] = f;
    arrayOfFloat = this.targetValues;
    paramFloat1 = paramFloat2;
    if (isInitialized()) {
      paramFloat1 = paramFloat2 + this.startValues[1];
    }
    arrayOfFloat[1] = paramFloat1;
    return this;
  }
  
  public final Tween targetRelative(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    this.isRelative = true;
    float[] arrayOfFloat = this.targetValues;
    float f = paramFloat1;
    if (isInitialized()) {
      f = paramFloat1 + this.startValues[0];
    }
    arrayOfFloat[0] = f;
    arrayOfFloat = this.targetValues;
    paramFloat1 = paramFloat2;
    if (isInitialized()) {
      paramFloat1 = paramFloat2 + this.startValues[1];
    }
    arrayOfFloat[1] = paramFloat1;
    arrayOfFloat = this.targetValues;
    paramFloat1 = paramFloat3;
    if (isInitialized()) {
      paramFloat1 = paramFloat3 + this.startValues[2];
    }
    arrayOfFloat[2] = paramFloat1;
    return this;
  }
  
  public final Tween targetRelative(float... paramVarArgs)
  {
    if (paramVarArgs.length > combinedAttrsLimit) {
      throwCombinedAttrsLimitReached();
    }
    int i = 0;
    if (i < paramVarArgs.length)
    {
      float[] arrayOfFloat = this.targetValues;
      if (isInitialized()) {}
      for (float f = paramVarArgs[i] + this.startValues[i];; f = paramVarArgs[i])
      {
        arrayOfFloat[i] = f;
        i += 1;
        break;
      }
    }
    this.isRelative = true;
    return this;
  }
  
  protected final void updateOverride(int paramInt1, int paramInt2, boolean paramBoolean, float paramFloat)
  {
    if ((this.target == null) || (this.equation == null)) {
      return;
    }
    TweenAccessor localTweenAccessor;
    Object localObject;
    float[] arrayOfFloat;
    if ((!paramBoolean) && (paramInt1 > paramInt2))
    {
      localTweenAccessor = this.accessor;
      localObject = this.target;
      paramInt1 = this.type;
      if (isReverse(paramInt2)) {}
      for (arrayOfFloat = this.startValues;; arrayOfFloat = this.targetValues)
      {
        localTweenAccessor.setValues(localObject, paramInt1, arrayOfFloat);
        return;
      }
    }
    if ((!paramBoolean) && (paramInt1 < paramInt2))
    {
      localTweenAccessor = this.accessor;
      localObject = this.target;
      paramInt1 = this.type;
      if (isReverse(paramInt2)) {}
      for (arrayOfFloat = this.targetValues;; arrayOfFloat = this.startValues)
      {
        localTweenAccessor.setValues(localObject, paramInt1, arrayOfFloat);
        return;
      }
    }
    assert (paramBoolean);
    assert (getCurrentTime() >= 0.0F);
    assert (getCurrentTime() <= this.duration);
    if ((this.duration < 1.0E-11F) && (paramFloat > -1.0E-11F))
    {
      localTweenAccessor = this.accessor;
      localObject = this.target;
      paramInt2 = this.type;
      if (isReverse(paramInt1)) {}
      for (arrayOfFloat = this.targetValues;; arrayOfFloat = this.startValues)
      {
        localTweenAccessor.setValues(localObject, paramInt2, arrayOfFloat);
        return;
      }
    }
    if ((this.duration < 1.0E-11F) && (paramFloat < 1.0E-11F))
    {
      localTweenAccessor = this.accessor;
      localObject = this.target;
      paramInt2 = this.type;
      if (isReverse(paramInt1)) {}
      for (arrayOfFloat = this.startValues;; arrayOfFloat = this.targetValues)
      {
        localTweenAccessor.setValues(localObject, paramInt2, arrayOfFloat);
        return;
      }
    }
    if (isReverse(paramInt1)) {}
    for (paramFloat = this.duration - getCurrentTime();; paramFloat = getCurrentTime())
    {
      paramFloat = this.equation.compute(paramFloat / this.duration);
      if ((this.waypointsCnt != 0) && (this.path != null)) {
        break;
      }
      paramInt1 = 0;
      while (paramInt1 < this.combinedAttrsCnt)
      {
        this.accessorBuffer[paramInt1] = (this.startValues[paramInt1] + (this.targetValues[paramInt1] - this.startValues[paramInt1]) * paramFloat);
        paramInt1 += 1;
      }
    }
    paramInt1 = 0;
    while (paramInt1 < this.combinedAttrsCnt)
    {
      this.pathBuffer[0] = this.startValues[paramInt1];
      this.pathBuffer[(this.waypointsCnt + 1)] = this.targetValues[paramInt1];
      paramInt2 = 0;
      while (paramInt2 < this.waypointsCnt)
      {
        this.pathBuffer[(paramInt2 + 1)] = this.waypoints[(this.combinedAttrsCnt * paramInt2 + paramInt1)];
        paramInt2 += 1;
      }
      this.accessorBuffer[paramInt1] = this.path.compute(paramFloat, this.pathBuffer, this.waypointsCnt + 2);
      paramInt1 += 1;
    }
    this.accessor.setValues(this.target, this.type, this.accessorBuffer);
  }
  
  public final Tween waypoint(float paramFloat)
  {
    if (this.waypointsCnt == waypointsLimit) {
      throwWaypointsLimitReached();
    }
    this.waypoints[this.waypointsCnt] = paramFloat;
    this.waypointsCnt += 1;
    return this;
  }
  
  public final Tween waypoint(float paramFloat1, float paramFloat2)
  {
    if (this.waypointsCnt == waypointsLimit) {
      throwWaypointsLimitReached();
    }
    this.waypoints[(this.waypointsCnt * 2)] = paramFloat1;
    this.waypoints[(this.waypointsCnt * 2 + 1)] = paramFloat2;
    this.waypointsCnt += 1;
    return this;
  }
  
  public final Tween waypoint(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (this.waypointsCnt == waypointsLimit) {
      throwWaypointsLimitReached();
    }
    this.waypoints[(this.waypointsCnt * 3)] = paramFloat1;
    this.waypoints[(this.waypointsCnt * 3 + 1)] = paramFloat2;
    this.waypoints[(this.waypointsCnt * 3 + 2)] = paramFloat3;
    this.waypointsCnt += 1;
    return this;
  }
  
  public final Tween waypoint(float... paramVarArgs)
  {
    if (this.waypointsCnt == waypointsLimit) {
      throwWaypointsLimitReached();
    }
    System.arraycopy(paramVarArgs, 0, this.waypoints, this.waypointsCnt * paramVarArgs.length, paramVarArgs.length);
    this.waypointsCnt += 1;
    return this;
  }
}
