package aurelienribon.tweenengine;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class TweenManager
{
  private boolean isPaused = false;
  private final ArrayList objects = new ArrayList(20);
  
  public TweenManager() {}
  
  private static int getTimelinesCount(List paramList)
  {
    int k = paramList.size();
    int j = 0;
    int i = 0;
    if (j < k)
    {
      BaseTween localBaseTween = (BaseTween)paramList.get(j);
      if (!(localBaseTween instanceof Timeline)) {
        break label61;
      }
      i = getTimelinesCount(((Timeline)localBaseTween).getChildren()) + 1 + i;
    }
    label61:
    for (;;)
    {
      j += 1;
      break;
      return i;
    }
  }
  
  private static int getTweensCount(List paramList)
  {
    int k = paramList.size();
    int j = 0;
    int i = 0;
    if (j < k)
    {
      BaseTween localBaseTween = (BaseTween)paramList.get(j);
      if ((localBaseTween instanceof Tween)) {
        i += 1;
      }
      for (;;)
      {
        j += 1;
        break;
        i = getTweensCount(((Timeline)localBaseTween).getChildren()) + i;
      }
    }
    return i;
  }
  
  public static void setAutoRemove(BaseTween paramBaseTween, boolean paramBoolean)
  {
    paramBaseTween.isAutoRemoveEnabled = paramBoolean;
  }
  
  public static void setAutoStart(BaseTween paramBaseTween, boolean paramBoolean)
  {
    paramBaseTween.isAutoStartEnabled = paramBoolean;
  }
  
  public TweenManager add(BaseTween paramBaseTween)
  {
    if (!this.objects.contains(paramBaseTween)) {
      this.objects.add(paramBaseTween);
    }
    if (paramBaseTween.isAutoStartEnabled) {
      paramBaseTween.start();
    }
    return this;
  }
  
  public boolean containsTarget(Object paramObject)
  {
    int j = this.objects.size();
    int i = 0;
    while (i < j)
    {
      if (((BaseTween)this.objects.get(i)).containsTarget(paramObject)) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public boolean containsTarget(Object paramObject, int paramInt)
  {
    int j = this.objects.size();
    int i = 0;
    while (i < j)
    {
      if (((BaseTween)this.objects.get(i)).containsTarget(paramObject, paramInt)) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public void ensureCapacity(int paramInt)
  {
    this.objects.ensureCapacity(paramInt);
  }
  
  public List getObjects()
  {
    return Collections.unmodifiableList(this.objects);
  }
  
  public int getRunningTimelinesCount()
  {
    return getTimelinesCount(this.objects);
  }
  
  public int getRunningTweensCount()
  {
    return getTweensCount(this.objects);
  }
  
  public void killAll()
  {
    int j = this.objects.size();
    int i = 0;
    while (i < j)
    {
      ((BaseTween)this.objects.get(i)).kill();
      i += 1;
    }
  }
  
  public void killTarget(Object paramObject)
  {
    int j = this.objects.size();
    int i = 0;
    while (i < j)
    {
      ((BaseTween)this.objects.get(i)).killTarget(paramObject);
      i += 1;
    }
  }
  
  public void killTarget(Object paramObject, int paramInt)
  {
    int j = this.objects.size();
    int i = 0;
    while (i < j)
    {
      ((BaseTween)this.objects.get(i)).killTarget(paramObject, paramInt);
      i += 1;
    }
  }
  
  public void pause()
  {
    this.isPaused = true;
  }
  
  public void resume()
  {
    this.isPaused = false;
  }
  
  public int size()
  {
    return this.objects.size();
  }
  
  public void update(float paramFloat)
  {
    int i = this.objects.size() - 1;
    while (i >= 0)
    {
      BaseTween localBaseTween = (BaseTween)this.objects.get(i);
      if ((localBaseTween.isFinished()) && (localBaseTween.isAutoRemoveEnabled))
      {
        this.objects.remove(i);
        localBaseTween.free();
      }
      i -= 1;
    }
    if (!this.isPaused)
    {
      if (paramFloat >= 0.0F)
      {
        int j = this.objects.size();
        i = 0;
        while (i < j)
        {
          ((BaseTween)this.objects.get(i)).update(paramFloat);
          i += 1;
        }
      }
      i = this.objects.size() - 1;
      while (i >= 0)
      {
        ((BaseTween)this.objects.get(i)).update(paramFloat);
        i -= 1;
      }
    }
  }
}
