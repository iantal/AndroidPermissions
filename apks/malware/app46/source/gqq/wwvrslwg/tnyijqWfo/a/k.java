package gqq.wwvrslwg.tnyijqWfo.a;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

public final class k
{
  public static DefaultHttpClient a = null;
  
  public static String a(String paramString)
  {
    a();
    paramString = new HttpGet(paramString);
    return EntityUtils.toString(a.execute(paramString).getEntity(), "UTF-8");
  }
  
  public static String a(String paramString, List paramList)
  {
    try
    {
      a();
      HttpPost localHttpPost = new HttpPost(paramString);
      localHttpPost.setEntity(new UrlEncodedFormEntity(paramList, "UTF-8"));
      paramList = EntityUtils.toString(a.execute(localHttpPost).getEntity());
      return paramList;
    }
    catch (Throwable paramList)
    {
      new StringBuilder("访问").append(paramString).append("出错，返回\"\"");
    }
    return "";
  }
  
  private static void a()
  {
    if (a == null)
    {
      BasicHttpParams localBasicHttpParams = new BasicHttpParams();
      localBasicHttpParams.setParameter("http.protocol.version", HttpVersion.HTTP_1_1);
      localBasicHttpParams.setParameter("http.protocol.content-charset", "UTF-8");
      localBasicHttpParams.setParameter("http.useragent", "Apache-HttpClient/Android");
      localBasicHttpParams.setParameter("http.connection.timeout", Integer.valueOf(8000));
      localBasicHttpParams.setParameter("http.connection.stalecheck", Boolean.valueOf(false));
      SchemeRegistry localSchemeRegistry = new SchemeRegistry();
      localSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
      localSchemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
      a = new DefaultHttpClient(new ThreadSafeClientConnManager(localBasicHttpParams, localSchemeRegistry), localBasicHttpParams);
    }
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    if ((paramString1.endsWith(".png")) || (paramString1.endsWith(".jpg")) || (paramString1.endsWith(".bmp")) || (paramString1.endsWith(".jpeg")) || (paramString1.endsWith(".gif")) || (paramString1.endsWith(".PNG")) || (paramString1.endsWith(".JPG")) || (paramString1.endsWith(".BMP")) || (paramString1.endsWith(".JPEG")) || (paramString1.endsWith(".GIF")))
    {
      String str = paramString1.substring(paramString1.lastIndexOf('/') + 1);
      if (s.c(paramString2, str) == null)
      {
        int i = 0;
        boolean bool1 = false;
        while (i < 3) {
          try
          {
            s.a(paramString2, str);
            boolean bool2 = a(paramString1, paramString2, str);
            if (!bool2) {
              s.a(paramString2, str);
            }
            bool1 = bool2;
            if (!bool2)
            {
              i += 1;
              bool1 = bool2;
            }
          }
          catch (Exception paramString1)
          {
            s.a(paramString2, str);
            bool1 = false;
          }
        }
        return bool1;
      }
      return true;
    }
    return false;
  }
  
  /* Error */
  public static boolean a(String paramString1, String paramString2, String paramString3)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: aconst_null
    //   4: astore 5
    //   6: aconst_null
    //   7: astore 7
    //   9: ldc 2
    //   11: monitorenter
    //   12: new 196	java/io/File
    //   15: dup
    //   16: aload_1
    //   17: invokespecial 197	java/io/File:<init>	(Ljava/lang/String;)V
    //   20: astore 8
    //   22: aload 8
    //   24: invokevirtual 201	java/io/File:exists	()Z
    //   27: ifne +9 -> 36
    //   30: aload 8
    //   32: invokevirtual 204	java/io/File:mkdirs	()Z
    //   35: pop
    //   36: new 196	java/io/File
    //   39: dup
    //   40: new 60	java/lang/StringBuilder
    //   43: dup
    //   44: invokespecial 205	java/lang/StringBuilder:<init>	()V
    //   47: aload_1
    //   48: invokestatic 208	gqq/wwvrslwg/tnyijqWfo/a/s:d	(Ljava/lang/String;)Ljava/lang/String;
    //   51: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   54: aload_2
    //   55: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   58: invokevirtual 211	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   61: invokespecial 197	java/io/File:<init>	(Ljava/lang/String;)V
    //   64: astore 8
    //   66: aload 8
    //   68: invokevirtual 201	java/io/File:exists	()Z
    //   71: pop
    //   72: aload 8
    //   74: invokevirtual 201	java/io/File:exists	()Z
    //   77: ifeq +9 -> 86
    //   80: aload 8
    //   82: invokevirtual 214	java/io/File:delete	()Z
    //   85: pop
    //   86: sipush 4096
    //   89: newarray byte
    //   91: astore 8
    //   93: new 216	java/net/URL
    //   96: dup
    //   97: aload_0
    //   98: invokespecial 217	java/net/URL:<init>	(Ljava/lang/String;)V
    //   101: getstatic 223	java/net/Proxy:NO_PROXY	Ljava/net/Proxy;
    //   104: invokevirtual 227	java/net/URL:openConnection	(Ljava/net/Proxy;)Ljava/net/URLConnection;
    //   107: checkcast 229	java/net/HttpURLConnection
    //   110: astore_0
    //   111: aload_0
    //   112: ldc -25
    //   114: ldc -23
    //   116: invokevirtual 236	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   119: aload_0
    //   120: ldc -18
    //   122: ldc -16
    //   124: invokevirtual 236	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   127: aload_0
    //   128: ldc -14
    //   130: invokevirtual 245	java/net/HttpURLConnection:setRequestMethod	(Ljava/lang/String;)V
    //   133: aload_0
    //   134: ldc -9
    //   136: ldc -7
    //   138: invokevirtual 236	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   141: aload_0
    //   142: ldc -5
    //   144: ldc -3
    //   146: invokevirtual 236	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
    //   149: aload_0
    //   150: sipush 6000
    //   153: invokevirtual 257	java/net/HttpURLConnection:setConnectTimeout	(I)V
    //   156: aload_0
    //   157: sipush 6000
    //   160: invokevirtual 260	java/net/HttpURLConnection:setReadTimeout	(I)V
    //   163: aload_0
    //   164: invokevirtual 264	java/net/HttpURLConnection:getResponseCode	()I
    //   167: sipush 200
    //   170: if_icmpeq +32 -> 202
    //   173: aload_0
    //   174: invokevirtual 264	java/net/HttpURLConnection:getResponseCode	()I
    //   177: istore_3
    //   178: iload_3
    //   179: sipush 206
    //   182: if_icmpeq +20 -> 202
    //   185: aload_0
    //   186: ifnull +7 -> 193
    //   189: aload_0
    //   190: invokevirtual 267	java/net/HttpURLConnection:disconnect	()V
    //   193: iconst_0
    //   194: istore 4
    //   196: ldc 2
    //   198: monitorexit
    //   199: iload 4
    //   201: ireturn
    //   202: new 269	java/io/FileOutputStream
    //   205: dup
    //   206: new 60	java/lang/StringBuilder
    //   209: dup
    //   210: invokespecial 205	java/lang/StringBuilder:<init>	()V
    //   213: aload_1
    //   214: invokestatic 208	gqq/wwvrslwg/tnyijqWfo/a/s:d	(Ljava/lang/String;)Ljava/lang/String;
    //   217: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   220: aload_2
    //   221: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   224: invokevirtual 211	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   227: iconst_0
    //   228: invokespecial 272	java/io/FileOutputStream:<init>	(Ljava/lang/String;Z)V
    //   231: astore_1
    //   232: aload 7
    //   234: astore_2
    //   235: aload_0
    //   236: invokevirtual 276	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
    //   239: astore 5
    //   241: aload 5
    //   243: astore_2
    //   244: new 278	java/io/BufferedInputStream
    //   247: dup
    //   248: aload 5
    //   250: invokespecial 281	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   253: astore 6
    //   255: aload 5
    //   257: astore_2
    //   258: aload 6
    //   260: aload 8
    //   262: invokevirtual 285	java/io/BufferedInputStream:read	([B)I
    //   265: istore_3
    //   266: iload_3
    //   267: iconst_m1
    //   268: if_icmpeq +57 -> 325
    //   271: aload 5
    //   273: astore_2
    //   274: aload_1
    //   275: aload 8
    //   277: iconst_0
    //   278: iload_3
    //   279: invokevirtual 289	java/io/FileOutputStream:write	([BII)V
    //   282: goto -27 -> 255
    //   285: astore 5
    //   287: aload_0
    //   288: astore 5
    //   290: aload_1
    //   291: astore_0
    //   292: aload 5
    //   294: astore_1
    //   295: aload_1
    //   296: ifnull +7 -> 303
    //   299: aload_1
    //   300: invokevirtual 267	java/net/HttpURLConnection:disconnect	()V
    //   303: aload_2
    //   304: ifnull +7 -> 311
    //   307: aload_2
    //   308: invokevirtual 294	java/io/InputStream:close	()V
    //   311: aload_0
    //   312: ifnull +7 -> 319
    //   315: aload_0
    //   316: invokevirtual 295	java/io/FileOutputStream:close	()V
    //   319: iconst_0
    //   320: istore 4
    //   322: goto -126 -> 196
    //   325: aload 5
    //   327: astore_2
    //   328: aload_0
    //   329: invokevirtual 267	java/net/HttpURLConnection:disconnect	()V
    //   332: aload 5
    //   334: astore_2
    //   335: aload 5
    //   337: invokevirtual 294	java/io/InputStream:close	()V
    //   340: aload 5
    //   342: astore_2
    //   343: aload 6
    //   345: invokevirtual 296	java/io/BufferedInputStream:close	()V
    //   348: aload 5
    //   350: astore_2
    //   351: aload_1
    //   352: invokevirtual 299	java/io/FileOutputStream:flush	()V
    //   355: aload 5
    //   357: astore_2
    //   358: aload_1
    //   359: invokevirtual 295	java/io/FileOutputStream:close	()V
    //   362: aload_0
    //   363: ifnull +7 -> 370
    //   366: aload_0
    //   367: invokevirtual 267	java/net/HttpURLConnection:disconnect	()V
    //   370: aload 5
    //   372: ifnull +8 -> 380
    //   375: aload 5
    //   377: invokevirtual 294	java/io/InputStream:close	()V
    //   380: aload_1
    //   381: invokevirtual 295	java/io/FileOutputStream:close	()V
    //   384: iconst_1
    //   385: istore 4
    //   387: goto -191 -> 196
    //   390: astore_0
    //   391: aconst_null
    //   392: astore_1
    //   393: aconst_null
    //   394: astore_2
    //   395: aload_2
    //   396: ifnull +7 -> 403
    //   399: aload_2
    //   400: invokevirtual 267	java/net/HttpURLConnection:disconnect	()V
    //   403: aload_1
    //   404: ifnull +7 -> 411
    //   407: aload_1
    //   408: invokevirtual 294	java/io/InputStream:close	()V
    //   411: aload 5
    //   413: ifnull +8 -> 421
    //   416: aload 5
    //   418: invokevirtual 295	java/io/FileOutputStream:close	()V
    //   421: aload_0
    //   422: athrow
    //   423: astore_0
    //   424: ldc 2
    //   426: monitorexit
    //   427: aload_0
    //   428: athrow
    //   429: astore_0
    //   430: goto -237 -> 193
    //   433: astore_1
    //   434: goto -13 -> 421
    //   437: astore_1
    //   438: aload_0
    //   439: astore_2
    //   440: aload_1
    //   441: astore_0
    //   442: aconst_null
    //   443: astore_1
    //   444: goto -49 -> 395
    //   447: astore 7
    //   449: aconst_null
    //   450: astore 6
    //   452: aload_1
    //   453: astore 5
    //   455: aload_0
    //   456: astore_2
    //   457: aload 7
    //   459: astore_0
    //   460: aload 6
    //   462: astore_1
    //   463: goto -68 -> 395
    //   466: astore 7
    //   468: aload_1
    //   469: astore_2
    //   470: aload_0
    //   471: astore 6
    //   473: aload 7
    //   475: astore_0
    //   476: aload 5
    //   478: astore_1
    //   479: aload_2
    //   480: astore 5
    //   482: aload 6
    //   484: astore_2
    //   485: goto -90 -> 395
    //   488: astore_0
    //   489: goto -170 -> 319
    //   492: astore_0
    //   493: aconst_null
    //   494: astore_0
    //   495: aconst_null
    //   496: astore_1
    //   497: aload 6
    //   499: astore_2
    //   500: goto -205 -> 295
    //   503: astore_1
    //   504: aload_0
    //   505: astore_1
    //   506: aconst_null
    //   507: astore_0
    //   508: aload 6
    //   510: astore_2
    //   511: goto -216 -> 295
    //   514: astore_0
    //   515: goto -131 -> 384
    //   518: astore 8
    //   520: goto -434 -> 86
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	523	0	paramString1	String
    //   0	523	1	paramString2	String
    //   0	523	2	paramString3	String
    //   177	102	3	i	int
    //   194	192	4	bool	boolean
    //   4	268	5	localInputStream	java.io.InputStream
    //   285	1	5	localThrowable	Throwable
    //   288	193	5	str	String
    //   1	508	6	localObject1	Object
    //   7	226	7	localObject2	Object
    //   447	11	7	localObject3	Object
    //   466	8	7	localObject4	Object
    //   20	256	8	localObject5	Object
    //   518	1	8	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   235	241	285	java/lang/Throwable
    //   244	255	285	java/lang/Throwable
    //   258	266	285	java/lang/Throwable
    //   274	282	285	java/lang/Throwable
    //   328	332	285	java/lang/Throwable
    //   335	340	285	java/lang/Throwable
    //   343	348	285	java/lang/Throwable
    //   351	355	285	java/lang/Throwable
    //   358	362	285	java/lang/Throwable
    //   12	36	390	finally
    //   36	72	390	finally
    //   72	86	390	finally
    //   86	111	390	finally
    //   189	193	423	finally
    //   299	303	423	finally
    //   307	311	423	finally
    //   315	319	423	finally
    //   366	370	423	finally
    //   375	380	423	finally
    //   380	384	423	finally
    //   399	403	423	finally
    //   407	411	423	finally
    //   416	421	423	finally
    //   421	423	423	finally
    //   189	193	429	java/lang/Exception
    //   399	403	433	java/lang/Exception
    //   407	411	433	java/lang/Exception
    //   416	421	433	java/lang/Exception
    //   111	178	437	finally
    //   202	232	437	finally
    //   235	241	447	finally
    //   244	255	466	finally
    //   258	266	466	finally
    //   274	282	466	finally
    //   328	332	466	finally
    //   335	340	466	finally
    //   343	348	466	finally
    //   351	355	466	finally
    //   358	362	466	finally
    //   299	303	488	java/lang/Exception
    //   307	311	488	java/lang/Exception
    //   315	319	488	java/lang/Exception
    //   12	36	492	java/lang/Throwable
    //   36	72	492	java/lang/Throwable
    //   72	86	492	java/lang/Throwable
    //   86	111	492	java/lang/Throwable
    //   111	178	503	java/lang/Throwable
    //   202	232	503	java/lang/Throwable
    //   366	370	514	java/lang/Exception
    //   375	380	514	java/lang/Exception
    //   380	384	514	java/lang/Exception
    //   72	86	518	java/lang/Exception
  }
  
  public static boolean a(Map paramMap, String paramString1, String paramString2)
  {
    paramString1 = g.a(paramMap, paramString1).toString().getBytes();
    try
    {
      paramMap = (HttpURLConnection)new URL(paramString2).openConnection();
      paramMap.setConnectTimeout(5000);
      paramMap.setDoOutput(true);
      paramMap.setRequestMethod("POST");
      paramMap.setUseCaches(false);
      paramMap.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
      paramMap.setRequestProperty("Content-Length", String.valueOf(paramString1.length));
      paramString2 = paramMap.getOutputStream();
      paramString2.write(paramString1);
      paramString2.flush();
      paramString2.close();
      int i = paramMap.getResponseCode();
      if (i == 200)
      {
        paramString2 = new BufferedReader(new InputStreamReader(paramMap.getInputStream(), "UTF-8"));
        String str;
        for (paramMap = "";; paramMap = paramMap + str)
        {
          str = paramString2.readLine();
          if (str == null) {
            break;
          }
        }
        new StringBuilder("postResponse = ").append(i).append(">>><<<").append(new String(paramString1)).append("start_commit_retStr:--").append(paramMap);
        return true;
      }
    }
    catch (IOException paramMap)
    {
      return false;
    }
    catch (MalformedURLException paramMap)
    {
      for (;;) {}
    }
  }
}
