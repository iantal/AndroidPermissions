package gqq.wwvrslwg.tnyijqWfo.a;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public final class g
{
  public static int a()
  {
    return Calendar.getInstance().get(11);
  }
  
  public static int a(int paramInt)
  {
    switch (paramInt % 4)
    {
    default: 
      return 17301651;
    case 1: 
      return 17301555;
    case 2: 
      return 17301516;
    }
    return 17301545;
  }
  
  public static int a(long paramLong)
  {
    Calendar localCalendar = Calendar.getInstance();
    int i = localCalendar.get(5);
    localCalendar.setTimeInMillis(paramLong);
    return localCalendar.get(5) - i;
  }
  
  public static int a(Context paramContext, float paramFloat)
  {
    return (int)(paramContext.getResources().getDisplayMetrics().density * paramFloat + 0.5F);
  }
  
  public static int a(String... paramVarArgs)
  {
    int j = 0;
    int[] arrayOfInt = new int[paramVarArgs.length];
    int i = 0;
    while (i < paramVarArgs.length)
    {
      arrayOfInt[i] = Integer.parseInt(paramVarArgs[i]);
      i += 1;
    }
    int m = Calendar.getInstance().get(11);
    int k = 0;
    i = j;
    for (j = k; i < arrayOfInt.length; j = k)
    {
      k = j;
      if (arrayOfInt[j] >= m) {
        k = j + 1;
      }
      i += 1;
    }
    return j;
  }
  
  public static long a(int... paramVarArgs)
  {
    Calendar localCalendar = Calendar.getInstance();
    int k = localCalendar.get(11);
    Arrays.sort(paramVarArgs);
    int m = paramVarArgs.length;
    int i = 0;
    int j;
    if (i < m)
    {
      j = paramVarArgs[i];
      if (j - k <= 0) {}
    }
    for (i = j;; i = 0)
    {
      if (i == 0)
      {
        return 0L;
        i += 1;
        break;
      }
      long l = localCalendar.getTimeInMillis();
      localCalendar.add(10, i - k);
      localCalendar.set(12, 0);
      return localCalendar.getTimeInMillis() - l;
    }
  }
  
  public static String a(long paramLong1, long paramLong2)
  {
    paramLong1 -= paramLong2;
    return paramLong1 / 3600000L + "小时" + paramLong1 % 3600000L / 60000L + "分" + paramLong1 % 3600000L % 60000L / 1000L + "秒";
  }
  
  public static StringBuffer a(Map paramMap, String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    try
    {
      paramMap = paramMap.entrySet().iterator();
      while (paramMap.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramMap.next();
        localStringBuffer.append((String)localEntry.getKey()).append("=").append(URLEncoder.encode((String)localEntry.getValue(), paramString)).append("&");
      }
      localStringBuffer.deleteCharAt(localStringBuffer.length() - 1);
      return localStringBuffer;
    }
    catch (Exception paramMap) {}
    return localStringBuffer;
  }
  
  public static boolean a(Context paramContext, String paramString, File paramFile)
  {
    try
    {
      paramContext = paramContext.getAssets().open(paramString);
      paramString = new FileOutputStream(paramFile);
      paramFile = new byte['Ѐ'];
      for (;;)
      {
        int i = paramContext.read(paramFile);
        if (i <= 0) {
          break;
        }
        paramString.write(paramFile, 0, i);
      }
      paramString.close();
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      return false;
    }
    paramContext.close();
    return true;
  }
  
  public static boolean a(String paramString)
  {
    try
    {
      Class.forName(paramString);
      return true;
    }
    catch (ClassNotFoundException paramString)
    {
      return false;
    }
    catch (Exception paramString) {}
    return false;
  }
  
  public static boolean a(String paramString, String... paramVarArgs)
  {
    if (paramString == null) {}
    for (;;)
    {
      return true;
      int i = 0;
      try
      {
        for (;;)
        {
          if (i >= paramVarArgs.length) {
            break label34;
          }
          boolean bool = paramString.equals(paramVarArgs[i]);
          if (bool) {
            break;
          }
          i += 1;
        }
        return false;
      }
      catch (Exception paramString) {}
    }
  }
  
  public static boolean a(String[] paramArrayOfString1, String... paramVarArgs)
  {
    if (paramArrayOfString1 == null) {}
    for (;;)
    {
      return false;
      int i = 0;
      while (i < paramArrayOfString1.length)
      {
        int j = 0;
        while (j < paramVarArgs.length)
        {
          if (paramArrayOfString1[i].equals(paramVarArgs[j])) {
            return true;
          }
          j += 1;
        }
        i += 1;
      }
    }
  }
  
  public static boolean b(String paramString)
  {
    if ((paramString == null) || (paramString.equals(""))) {}
    for (;;)
    {
      return false;
      if ((paramString.toLowerCase().equals("true")) || (paramString.toLowerCase().equals("ture"))) {
        return true;
      }
      if (!paramString.toLowerCase().equals("false")) {
        try
        {
          int i = Integer.parseInt(paramString);
          if (i > 0) {
            return true;
          }
        }
        catch (Exception paramString) {}
      }
    }
    return false;
  }
  
  public static int[] b(String... paramVarArgs)
  {
    int[] arrayOfInt = new int[paramVarArgs.length];
    int i = 0;
    while (i < paramVarArgs.length)
    {
      arrayOfInt[i] = Integer.parseInt(paramVarArgs[i]);
      i += 1;
    }
    return arrayOfInt;
  }
  
  public static int c(String paramString)
  {
    if (paramString.length() != 8) {
      return 0;
    }
    return (int)Long.parseLong(paramString, 16);
  }
  
  public static int d(String paramString)
  {
    if ((paramString == null) || (paramString.equals(""))) {
      return 0;
    }
    try
    {
      int i = Integer.parseInt(paramString);
      return i;
    }
    catch (Exception paramString) {}
    return 0;
  }
  
  public static boolean e(String paramString)
  {
    try
    {
      boolean bool = paramString.equals("-1");
      return !bool;
    }
    catch (Exception paramString) {}
    return false;
  }
}
