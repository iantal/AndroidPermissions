package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.os.Parcelable;
import android.os.SystemClock;
import android.support.v4.view.an;
import android.support.v4.view.bb;
import android.support.v4.view.n;
import android.support.v4.view.r;
import android.support.v4.view.w;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;

public class DrawerLayout
  extends ViewGroup
{
  private static final int[] a = { 16842931 };
  private int b;
  private int c = -1728053248;
  private float d;
  private Paint e = new Paint();
  private final aj f;
  private final aj g;
  private final g h;
  private final g i;
  private int j;
  private boolean k;
  private boolean l = true;
  private int m;
  private int n;
  private boolean o;
  private boolean p;
  private e q;
  private float r;
  private float s;
  private Drawable t;
  private Drawable u;
  private CharSequence v;
  private CharSequence w;
  
  public DrawerLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public DrawerLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    float f1 = getResources().getDisplayMetrics().density;
    this.b = ((int)(64.0F * f1 + 0.5F));
    f1 *= 400.0F;
    this.h = new g(this, 3);
    this.i = new g(this, 5);
    this.f = aj.a(this, 1.0F, this.h);
    this.f.a(1);
    this.f.a(f1);
    this.h.a(this.f);
    this.g = aj.a(this, 1.0F, this.i);
    this.g.a(2);
    this.g.a(f1);
    this.i.a(this.g);
    setFocusableInTouchMode(true);
    an.a(this, new d(this));
    bb.a(this);
  }
  
  private void a(int paramInt1, int paramInt2)
  {
    paramInt2 = n.a(paramInt2, an.g(this));
    Object localObject;
    if (paramInt2 == 3)
    {
      this.m = paramInt1;
      if (paramInt1 != 0)
      {
        if (paramInt2 != 3) {
          break label74;
        }
        localObject = this.f;
        label33:
        ((aj)localObject).e();
      }
      switch (paramInt1)
      {
      }
    }
    label74:
    do
    {
      do
      {
        return;
        if (paramInt2 != 5) {
          break;
        }
        this.n = paramInt1;
        break;
        localObject = this.g;
        break label33;
        localObject = b(paramInt2);
      } while (localObject == null);
      g((View)localObject);
      return;
      localObject = b(paramInt2);
    } while (localObject == null);
    e((View)localObject);
  }
  
  private void a(boolean paramBoolean)
  {
    int i4 = getChildCount();
    int i2 = 0;
    int i1 = 0;
    if (i2 < i4)
    {
      View localView = getChildAt(i2);
      DrawerLayout.LayoutParams localLayoutParams = (DrawerLayout.LayoutParams)localView.getLayoutParams();
      boolean bool = i1;
      int i3;
      if (d(localView)) {
        if (paramBoolean)
        {
          bool = i1;
          if (!localLayoutParams.c) {}
        }
        else
        {
          i3 = localView.getWidth();
          if (!a(localView, 3)) {
            break label115;
          }
          i1 |= this.f.a(localView, -i3, localView.getTop());
        }
      }
      for (;;)
      {
        localLayoutParams.c = false;
        i3 = i1;
        i2 += 1;
        i1 = i3;
        break;
        label115:
        i1 |= this.g.a(localView, getWidth(), localView.getTop());
      }
    }
    this.h.a();
    this.i.a();
    if (i1 != 0) {
      invalidate();
    }
  }
  
  static float b(View paramView)
  {
    return ((DrawerLayout.LayoutParams)paramView.getLayoutParams()).b;
  }
  
  private View d()
  {
    int i3 = getChildCount();
    int i1 = 0;
    while (i1 < i3)
    {
      View localView = getChildAt(i1);
      if (d(localView))
      {
        if (!d(localView)) {
          throw new IllegalArgumentException("View " + localView + " is not a drawer");
        }
        if (((DrawerLayout.LayoutParams)localView.getLayoutParams()).b > 0.0F) {}
        for (int i2 = 1; i2 != 0; i2 = 0) {
          return localView;
        }
      }
      i1 += 1;
    }
    return null;
  }
  
  static boolean d(View paramView)
  {
    return (n.a(((DrawerLayout.LayoutParams)paramView.getLayoutParams()).a, an.g(paramView)) & 0x7) != 0;
  }
  
  private static boolean f(View paramView)
  {
    return ((DrawerLayout.LayoutParams)paramView.getLayoutParams()).a == 0;
  }
  
  private void g(View paramView)
  {
    if (!d(paramView)) {
      throw new IllegalArgumentException("View " + paramView + " is not a sliding drawer");
    }
    if (this.l)
    {
      paramView = (DrawerLayout.LayoutParams)paramView.getLayoutParams();
      paramView.b = 1.0F;
      paramView.d = true;
    }
    for (;;)
    {
      invalidate();
      return;
      if (a(paramView, 3)) {
        this.f.a(paramView, 0, paramView.getTop());
      } else {
        this.g.a(paramView, getWidth() - paramView.getWidth(), paramView.getTop());
      }
    }
  }
  
  public final int a(View paramView)
  {
    int i1 = c(paramView);
    if (i1 == 3) {
      return this.m;
    }
    if (i1 == 5) {
      return this.n;
    }
    return 0;
  }
  
  final View a()
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if (((DrawerLayout.LayoutParams)localView.getLayoutParams()).d) {
        return localView;
      }
      i1 += 1;
    }
    return null;
  }
  
  public final CharSequence a(int paramInt)
  {
    paramInt = n.a(paramInt, an.g(this));
    if (paramInt == 3) {
      return this.v;
    }
    if (paramInt == 5) {
      return this.w;
    }
    return null;
  }
  
  final void a(int paramInt, View paramView)
  {
    int i1 = this.f.a();
    int i2 = this.g.a();
    DrawerLayout.LayoutParams localLayoutParams;
    if ((i1 == 1) || (i2 == 1))
    {
      i1 = 1;
      if ((paramView != null) && (paramInt == 0))
      {
        localLayoutParams = (DrawerLayout.LayoutParams)paramView.getLayoutParams();
        if (localLayoutParams.b != 0.0F) {
          break label158;
        }
        paramView = (DrawerLayout.LayoutParams)paramView.getLayoutParams();
        if (paramView.d)
        {
          paramView.d = false;
          if (this.q != null) {
            paramView = this.q;
          }
          if (hasWindowFocus())
          {
            paramView = getRootView();
            if (paramView != null) {
              paramView.sendAccessibilityEvent(32);
            }
          }
        }
      }
    }
    for (;;)
    {
      if (i1 != this.j)
      {
        this.j = i1;
        if (this.q != null) {
          paramView = this.q;
        }
      }
      return;
      if ((i1 == 2) || (i2 == 2))
      {
        i1 = 2;
        break;
      }
      i1 = 0;
      break;
      label158:
      if (localLayoutParams.b == 1.0F)
      {
        paramView = (DrawerLayout.LayoutParams)paramView.getLayoutParams();
        if (!paramView.d)
        {
          paramView.d = true;
          if (this.q != null) {
            paramView = this.q;
          }
          sendAccessibilityEvent(32);
        }
      }
    }
  }
  
  final void a(View paramView, float paramFloat)
  {
    paramView = (DrawerLayout.LayoutParams)paramView.getLayoutParams();
    if (paramFloat == paramView.b) {}
    do
    {
      return;
      paramView.b = paramFloat;
    } while (this.q == null);
    paramView = this.q;
  }
  
  final boolean a(View paramView, int paramInt)
  {
    return (c(paramView) & paramInt) == paramInt;
  }
  
  final View b(int paramInt)
  {
    int i1 = n.a(paramInt, an.g(this));
    int i2 = getChildCount();
    paramInt = 0;
    while (paramInt < i2)
    {
      View localView = getChildAt(paramInt);
      if ((c(localView) & 0x7) == (i1 & 0x7)) {
        return localView;
      }
      paramInt += 1;
    }
    return null;
  }
  
  final void b()
  {
    int i1 = 0;
    if (!this.p)
    {
      long l1 = SystemClock.uptimeMillis();
      MotionEvent localMotionEvent = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
      int i2 = getChildCount();
      while (i1 < i2)
      {
        getChildAt(i1).dispatchTouchEvent(localMotionEvent);
        i1 += 1;
      }
      localMotionEvent.recycle();
      this.p = true;
    }
  }
  
  final int c(View paramView)
  {
    return n.a(((DrawerLayout.LayoutParams)paramView.getLayoutParams()).a, an.g(this));
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof DrawerLayout.LayoutParams)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void computeScroll()
  {
    int i2 = getChildCount();
    float f1 = 0.0F;
    int i1 = 0;
    while (i1 < i2)
    {
      f1 = Math.max(f1, ((DrawerLayout.LayoutParams)getChildAt(i1).getLayoutParams()).b);
      i1 += 1;
    }
    this.d = f1;
    if ((this.f.g() | this.g.g())) {
      an.c(this);
    }
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    int i7 = getHeight();
    boolean bool1 = f(paramView);
    int i2 = 0;
    int i5 = 0;
    int i1 = getWidth();
    int i8 = paramCanvas.save();
    int i3 = i1;
    int i4;
    View localView;
    if (bool1)
    {
      int i9 = getChildCount();
      i4 = 0;
      i2 = i5;
      if (i4 < i9)
      {
        localView = getChildAt(i4);
        if ((localView != paramView) && (localView.getVisibility() == 0))
        {
          Drawable localDrawable = localView.getBackground();
          if (localDrawable != null) {
            if (localDrawable.getOpacity() == -1)
            {
              i3 = 1;
              label105:
              if ((i3 == 0) || (!d(localView)) || (localView.getHeight() < i7)) {
                break label215;
              }
              if (!a(localView, 3)) {
                break label193;
              }
              i3 = localView.getRight();
              if (i3 <= i2) {
                break label558;
              }
              i2 = i3;
            }
          }
        }
      }
    }
    label193:
    label215:
    label558:
    for (;;)
    {
      i5 = i2;
      i3 = i1;
      for (;;)
      {
        i4 += 1;
        i1 = i3;
        i2 = i5;
        break;
        i3 = 0;
        break label105;
        i3 = 0;
        break label105;
        int i6 = localView.getLeft();
        i3 = i6;
        i5 = i2;
        if (i6 >= i1)
        {
          i3 = i1;
          i5 = i2;
        }
      }
      paramCanvas.clipRect(i2, 0, i1, getHeight());
      i3 = i1;
      boolean bool2 = super.drawChild(paramCanvas, paramView, paramLong);
      paramCanvas.restoreToCount(i8);
      if ((this.d > 0.0F) && (bool1))
      {
        i1 = (int)(((this.c & 0xFF000000) >>> 24) * this.d);
        i4 = this.c;
        this.e.setColor(i1 << 24 | i4 & 0xFFFFFF);
        paramCanvas.drawRect(i2, 0.0F, i3, getHeight(), this.e);
      }
      do
      {
        return bool2;
        if ((this.t != null) && (a(paramView, 3)))
        {
          i1 = this.t.getIntrinsicWidth();
          i2 = paramView.getRight();
          i3 = this.f.b();
          f1 = Math.max(0.0F, Math.min(i2 / i3, 1.0F));
          this.t.setBounds(i2, paramView.getTop(), i1 + i2, paramView.getBottom());
          this.t.setAlpha((int)(255.0F * f1));
          this.t.draw(paramCanvas);
          return bool2;
        }
      } while ((this.u == null) || (!a(paramView, 5)));
      i1 = this.u.getIntrinsicWidth();
      i2 = paramView.getLeft();
      i3 = getWidth();
      i4 = this.g.b();
      float f1 = Math.max(0.0F, Math.min((i3 - i2) / i4, 1.0F));
      this.u.setBounds(i2 - i1, paramView.getTop(), i2, paramView.getBottom());
      this.u.setAlpha((int)(255.0F * f1));
      this.u.draw(paramCanvas);
      return bool2;
    }
  }
  
  public final void e(View paramView)
  {
    if (!d(paramView)) {
      throw new IllegalArgumentException("View " + paramView + " is not a sliding drawer");
    }
    if (this.l)
    {
      paramView = (DrawerLayout.LayoutParams)paramView.getLayoutParams();
      paramView.b = 0.0F;
      paramView.d = false;
    }
    for (;;)
    {
      invalidate();
      return;
      if (a(paramView, 3)) {
        this.f.a(paramView, -paramView.getWidth(), paramView.getTop());
      } else {
        this.g.a(paramView, getWidth(), paramView.getTop());
      }
    }
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new DrawerLayout.LayoutParams();
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new DrawerLayout.LayoutParams(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof DrawerLayout.LayoutParams)) {
      return new DrawerLayout.LayoutParams((DrawerLayout.LayoutParams)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new DrawerLayout.LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new DrawerLayout.LayoutParams(paramLayoutParams);
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    this.l = true;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    this.l = true;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool1 = false;
    int i1 = w.a(paramMotionEvent);
    boolean bool2 = this.f.a(paramMotionEvent);
    boolean bool3 = this.g.a(paramMotionEvent);
    switch (i1)
    {
    default: 
      i1 = 0;
      if ((!(bool2 | bool3)) && (i1 == 0))
      {
        int i2 = getChildCount();
        i1 = 0;
        if (i1 >= i2) {
          break label250;
        }
        if (!((DrawerLayout.LayoutParams)getChildAt(i1).getLayoutParams()).c) {
          break;
        }
        i1 = 1;
        if ((i1 == 0) && (!this.p)) {}
      }
      else
      {
        bool1 = true;
      }
      return bool1;
    case 0: 
      label63:
      label85:
      label113:
      float f1 = paramMotionEvent.getX();
      float f2 = paramMotionEvent.getY();
      this.r = f1;
      this.s = f2;
      if ((this.d <= 0.0F) || (!f(this.f.b((int)f1, (int)f2)))) {}
      break;
    }
    for (i1 = 1;; i1 = 0)
    {
      this.o = false;
      this.p = false;
      break label63;
      if (!this.f.h()) {
        break;
      }
      this.h.a();
      this.i.a();
      i1 = 0;
      break label63;
      a(true);
      this.o = false;
      this.p = false;
      break;
      i1 += 1;
      break label85;
      label250:
      i1 = 0;
      break label113;
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      if (d() != null) {}
      for (int i1 = 1; i1 != 0; i1 = 0)
      {
        r.c(paramKeyEvent);
        return true;
      }
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool = false;
    if (paramInt == 4)
    {
      paramKeyEvent = d();
      if ((paramKeyEvent != null) && (a(paramKeyEvent) == 0)) {
        a(false);
      }
      if (paramKeyEvent != null) {
        bool = true;
      }
      return bool;
    }
    return super.onKeyUp(paramInt, paramKeyEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    this.k = true;
    int i4 = paramInt3 - paramInt1;
    int i5 = getChildCount();
    paramInt3 = 0;
    while (paramInt3 < i5)
    {
      View localView = getChildAt(paramInt3);
      DrawerLayout.LayoutParams localLayoutParams;
      if (localView.getVisibility() != 8)
      {
        localLayoutParams = (DrawerLayout.LayoutParams)localView.getLayoutParams();
        if (f(localView)) {
          localView.layout(localLayoutParams.leftMargin, localLayoutParams.topMargin, localLayoutParams.leftMargin + localView.getMeasuredWidth(), localLayoutParams.topMargin + localView.getMeasuredHeight());
        }
      }
      else
      {
        paramInt3 += 1;
        continue;
      }
      int i6 = localView.getMeasuredWidth();
      int i7 = localView.getMeasuredHeight();
      int i1;
      float f1;
      label163:
      int i2;
      if (a(localView, 3))
      {
        paramInt1 = -i6;
        i1 = (int)(i6 * localLayoutParams.b) + paramInt1;
        f1 = (i6 + i1) / i6;
        if (f1 == localLayoutParams.b) {
          break label310;
        }
        i2 = 1;
        label177:
        switch (localLayoutParams.a & 0x70)
        {
        default: 
          localView.layout(i1, localLayoutParams.topMargin, i6 + i1, i7 + localLayoutParams.topMargin);
          label237:
          if (i2 != 0) {
            a(localView, f1);
          }
          if (localLayoutParams.b <= 0.0F) {
            break;
          }
        }
      }
      for (paramInt1 = 0; localView.getVisibility() != paramInt1; paramInt1 = 4)
      {
        localView.setVisibility(paramInt1);
        break;
        i1 = i4 - (int)(i6 * localLayoutParams.b);
        f1 = (i4 - i1) / i6;
        break label163;
        label310:
        i2 = 0;
        break label177;
        paramInt1 = paramInt4 - paramInt2;
        localView.layout(i1, paramInt1 - localLayoutParams.bottomMargin - localView.getMeasuredHeight(), i6 + i1, paramInt1 - localLayoutParams.bottomMargin);
        break label237;
        int i8 = paramInt4 - paramInt2;
        int i3 = (i8 - i7) / 2;
        if (i3 < localLayoutParams.topMargin) {
          paramInt1 = localLayoutParams.topMargin;
        }
        for (;;)
        {
          localView.layout(i1, paramInt1, i6 + i1, i7 + paramInt1);
          break;
          paramInt1 = i3;
          if (i3 + i7 > i8 - localLayoutParams.bottomMargin) {
            paramInt1 = i8 - localLayoutParams.bottomMargin - i7;
          }
        }
      }
    }
    this.k = false;
    this.l = false;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i4 = 300;
    int i7 = View.MeasureSpec.getMode(paramInt1);
    int i6 = View.MeasureSpec.getMode(paramInt2);
    int i3 = View.MeasureSpec.getSize(paramInt1);
    int i5 = View.MeasureSpec.getSize(paramInt2);
    int i2;
    if (i7 == 1073741824)
    {
      i2 = i3;
      if (i6 == 1073741824) {}
    }
    else if (isInEditMode())
    {
      i1 = i3;
      if (i7 != Integer.MIN_VALUE)
      {
        i1 = i3;
        if (i7 == 0) {
          i1 = 300;
        }
      }
      i2 = i1;
      if (i6 == Integer.MIN_VALUE) {
        break label425;
      }
      i2 = i1;
      if (i6 != 0) {
        break label425;
      }
      i2 = i1;
    }
    label227:
    label381:
    label425:
    for (int i1 = i4;; i1 = i5)
    {
      setMeasuredDimension(i2, i1);
      i4 = getChildCount();
      i3 = 0;
      if (i3 < i4)
      {
        Object localObject1 = getChildAt(i3);
        Object localObject2;
        if (((View)localObject1).getVisibility() != 8)
        {
          localObject2 = (DrawerLayout.LayoutParams)((View)localObject1).getLayoutParams();
          if (!f((View)localObject1)) {
            break label227;
          }
          ((View)localObject1).measure(View.MeasureSpec.makeMeasureSpec(i2 - ((DrawerLayout.LayoutParams)localObject2).leftMargin - ((DrawerLayout.LayoutParams)localObject2).rightMargin, 1073741824), View.MeasureSpec.makeMeasureSpec(i1 - ((DrawerLayout.LayoutParams)localObject2).topMargin - ((DrawerLayout.LayoutParams)localObject2).bottomMargin, 1073741824));
        }
        for (;;)
        {
          i3 += 1;
          break;
          throw new IllegalArgumentException("DrawerLayout must be measured with MeasureSpec.EXACTLY.");
          if (!d((View)localObject1)) {
            break label381;
          }
          i5 = c((View)localObject1) & 0x7;
          if ((i5 & 0x0) != 0)
          {
            localObject2 = new StringBuilder("Child drawer has absolute gravity ");
            if ((i5 & 0x3) == 3) {
              localObject1 = "LEFT";
            }
            for (;;)
            {
              throw new IllegalStateException((String)localObject1 + " but this DrawerLayout already has a drawer view along that edge");
              if ((i5 & 0x5) == 5) {
                localObject1 = "RIGHT";
              } else {
                localObject1 = Integer.toHexString(i5);
              }
            }
          }
          ((View)localObject1).measure(getChildMeasureSpec(paramInt1, this.b + ((DrawerLayout.LayoutParams)localObject2).leftMargin + ((DrawerLayout.LayoutParams)localObject2).rightMargin, ((DrawerLayout.LayoutParams)localObject2).width), getChildMeasureSpec(paramInt2, ((DrawerLayout.LayoutParams)localObject2).topMargin + ((DrawerLayout.LayoutParams)localObject2).bottomMargin, ((DrawerLayout.LayoutParams)localObject2).height));
        }
        throw new IllegalStateException("Child " + localObject1 + " at index " + i3 + " does not have a valid layout_gravity - must be Gravity.LEFT, Gravity.RIGHT or Gravity.NO_GRAVITY");
      }
      return;
    }
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    paramParcelable = (DrawerLayout.SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    if (paramParcelable.a != 0)
    {
      View localView = b(paramParcelable.a);
      if (localView != null) {
        g(localView);
      }
    }
    a(paramParcelable.b, 3);
    a(paramParcelable.c, 5);
  }
  
  protected Parcelable onSaveInstanceState()
  {
    DrawerLayout.SavedState localSavedState = new DrawerLayout.SavedState(super.onSaveInstanceState());
    int i2 = getChildCount();
    int i1 = 0;
    for (;;)
    {
      if (i1 < i2)
      {
        Object localObject = getChildAt(i1);
        if (d((View)localObject))
        {
          localObject = (DrawerLayout.LayoutParams)((View)localObject).getLayoutParams();
          if (((DrawerLayout.LayoutParams)localObject).d) {
            localSavedState.a = ((DrawerLayout.LayoutParams)localObject).a;
          }
        }
      }
      else
      {
        localSavedState.b = this.m;
        localSavedState.c = this.n;
        return localSavedState;
      }
      i1 += 1;
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    this.f.b(paramMotionEvent);
    this.g.b(paramMotionEvent);
    float f1;
    float f2;
    boolean bool;
    switch (paramMotionEvent.getAction() & 0xFF)
    {
    case 2: 
    default: 
      return true;
    case 0: 
      f1 = paramMotionEvent.getX();
      f2 = paramMotionEvent.getY();
      this.r = f1;
      this.s = f2;
      this.o = false;
      this.p = false;
      return true;
    case 1: 
      f2 = paramMotionEvent.getX();
      f1 = paramMotionEvent.getY();
      paramMotionEvent = this.f.b((int)f2, (int)f1);
      if ((paramMotionEvent != null) && (f(paramMotionEvent)))
      {
        f2 -= this.r;
        f1 -= this.s;
        int i1 = this.f.d();
        if (f2 * f2 + f1 * f1 < i1 * i1)
        {
          paramMotionEvent = a();
          if (paramMotionEvent != null) {
            if (a(paramMotionEvent) == 2) {
              bool = true;
            }
          }
        }
      }
      break;
    }
    for (;;)
    {
      a(bool);
      this.o = false;
      return true;
      bool = false;
      continue;
      a(true);
      this.o = false;
      this.p = false;
      return true;
      bool = true;
    }
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    super.requestDisallowInterceptTouchEvent(paramBoolean);
    this.o = paramBoolean;
    if (paramBoolean) {
      a(true);
    }
  }
  
  public void requestLayout()
  {
    if (!this.k) {
      super.requestLayout();
    }
  }
}
