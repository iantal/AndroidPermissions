package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.support.v4.view.w;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.Interpolator;
import java.util.Arrays;

public final class aj
{
  private static final Interpolator v = new ak();
  private int a;
  private int b;
  private int c = -1;
  private float[] d;
  private float[] e;
  private float[] f;
  private float[] g;
  private int[] h;
  private int[] i;
  private int[] j;
  private int k;
  private VelocityTracker l;
  private float m;
  private float n;
  private int o;
  private int p;
  private m q;
  private final am r;
  private View s;
  private boolean t;
  private final ViewGroup u;
  private final Runnable w = new al(this);
  
  private aj(Context paramContext, ViewGroup paramViewGroup, am paramAm)
  {
    if (paramViewGroup == null) {
      throw new IllegalArgumentException("Parent view may not be null");
    }
    if (paramAm == null) {
      throw new IllegalArgumentException("Callback may not be null");
    }
    this.u = paramViewGroup;
    this.r = paramAm;
    paramViewGroup = ViewConfiguration.get(paramContext);
    this.o = ((int)(paramContext.getResources().getDisplayMetrics().density * 20.0F + 0.5F));
    this.b = paramViewGroup.getScaledTouchSlop();
    this.m = paramViewGroup.getScaledMaximumFlingVelocity();
    this.n = paramViewGroup.getScaledMinimumFlingVelocity();
    this.q = m.a(paramContext, v);
  }
  
  private static float a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f1 = Math.abs(paramFloat1);
    if (f1 < paramFloat2) {
      paramFloat2 = 0.0F;
    }
    do
    {
      return paramFloat2;
      if (f1 <= paramFloat3) {
        break;
      }
      paramFloat2 = paramFloat3;
    } while (paramFloat1 > 0.0F);
    return -paramFloat3;
    return paramFloat1;
  }
  
  private int a(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 == 0) {
      return 0;
    }
    int i1 = this.u.getWidth();
    int i2 = i1 / 2;
    float f3 = Math.min(1.0F, Math.abs(paramInt1) / i1);
    float f1 = i2;
    float f2 = i2;
    f3 = (float)Math.sin((float)((f3 - 0.5F) * 0.4712389167638204D));
    paramInt2 = Math.abs(paramInt2);
    if (paramInt2 > 0) {}
    for (paramInt1 = Math.round(Math.abs((f3 * f2 + f1) / paramInt2) * 1000.0F) * 4;; paramInt1 = (int)((Math.abs(paramInt1) / paramInt3 + 1.0F) * 256.0F)) {
      return Math.min(paramInt1, 600);
    }
  }
  
  public static aj a(ViewGroup paramViewGroup, float paramFloat, am paramAm)
  {
    paramViewGroup = new aj(paramViewGroup.getContext(), paramViewGroup, paramAm);
    paramViewGroup.b = ((int)(paramViewGroup.b * (1.0F / paramFloat)));
    return paramViewGroup;
  }
  
  private void a(float paramFloat1, float paramFloat2, int paramInt)
  {
    int i2 = 0;
    if ((this.d == null) || (this.d.length <= paramInt))
    {
      localObject = new float[paramInt + 1];
      float[] arrayOfFloat1 = new float[paramInt + 1];
      float[] arrayOfFloat2 = new float[paramInt + 1];
      float[] arrayOfFloat3 = new float[paramInt + 1];
      int[] arrayOfInt1 = new int[paramInt + 1];
      int[] arrayOfInt2 = new int[paramInt + 1];
      int[] arrayOfInt3 = new int[paramInt + 1];
      if (this.d != null)
      {
        System.arraycopy(this.d, 0, localObject, 0, this.d.length);
        System.arraycopy(this.e, 0, arrayOfFloat1, 0, this.e.length);
        System.arraycopy(this.f, 0, arrayOfFloat2, 0, this.f.length);
        System.arraycopy(this.g, 0, arrayOfFloat3, 0, this.g.length);
        System.arraycopy(this.h, 0, arrayOfInt1, 0, this.h.length);
        System.arraycopy(this.i, 0, arrayOfInt2, 0, this.i.length);
        System.arraycopy(this.j, 0, arrayOfInt3, 0, this.j.length);
      }
      this.d = ((float[])localObject);
      this.e = arrayOfFloat1;
      this.f = arrayOfFloat2;
      this.g = arrayOfFloat3;
      this.h = arrayOfInt1;
      this.i = arrayOfInt2;
      this.j = arrayOfInt3;
    }
    Object localObject = this.d;
    this.f[paramInt] = paramFloat1;
    localObject[paramInt] = paramFloat1;
    localObject = this.e;
    this.g[paramInt] = paramFloat2;
    localObject[paramInt] = paramFloat2;
    localObject = this.h;
    int i4 = (int)paramFloat1;
    int i3 = (int)paramFloat2;
    if (i4 < this.u.getLeft() + this.o) {
      i2 = 1;
    }
    int i1 = i2;
    if (i3 < this.u.getTop() + this.o) {
      i1 = i2 | 0x4;
    }
    i2 = i1;
    if (i4 > this.u.getRight() - this.o) {
      i2 = i1 | 0x2;
    }
    i1 = i2;
    if (i3 > this.u.getBottom() - this.o) {
      i1 = i2 | 0x8;
    }
    localObject[paramInt] = i1;
    this.k |= 1 << paramInt;
  }
  
  private boolean a(float paramFloat1, float paramFloat2, int paramInt1, int paramInt2)
  {
    paramFloat1 = Math.abs(paramFloat1);
    paramFloat2 = Math.abs(paramFloat2);
    if (((this.h[paramInt1] & paramInt2) != paramInt2) || ((this.p & paramInt2) == 0) || ((this.j[paramInt1] & paramInt2) == paramInt2) || ((this.i[paramInt1] & paramInt2) == paramInt2) || ((paramFloat1 <= this.b) && (paramFloat2 <= this.b))) {}
    do
    {
      return false;
      if (paramFloat1 < paramFloat2 * 0.5F) {
        am localAm = this.r;
      }
    } while (((this.i[paramInt1] & paramInt2) != 0) || (paramFloat1 <= this.b));
    return true;
  }
  
  private boolean a(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = this.s.getLeft();
    int i2 = this.s.getTop();
    paramInt1 -= i1;
    paramInt2 -= i2;
    if ((paramInt1 == 0) && (paramInt2 == 0))
    {
      this.q.g();
      b(0);
      return false;
    }
    Object localObject = this.s;
    paramInt3 = b(paramInt3, (int)this.n, (int)this.m);
    paramInt4 = b(paramInt4, (int)this.n, (int)this.m);
    int i3 = Math.abs(paramInt1);
    int i4 = Math.abs(paramInt2);
    int i5 = Math.abs(paramInt3);
    int i6 = Math.abs(paramInt4);
    int i7 = i5 + i6;
    int i8 = i3 + i4;
    float f1;
    if (paramInt3 != 0)
    {
      f1 = i5 / i7;
      if (paramInt4 == 0) {
        break label237;
      }
    }
    label237:
    for (float f2 = i6 / i7;; f2 = i4 / i8)
    {
      paramInt3 = a(paramInt1, paramInt3, this.r.c((View)localObject));
      localObject = this.r;
      paramInt4 = a(paramInt2, paramInt4, 0);
      float f3 = paramInt3;
      paramInt3 = (int)(f2 * paramInt4 + f1 * f3);
      this.q.a(i1, i2, paramInt1, paramInt2, paramInt3);
      b(2);
      return true;
      f1 = i3 / i8;
      break;
    }
  }
  
  private boolean a(View paramView, float paramFloat)
  {
    if (paramView == null) {
      return false;
    }
    if (this.r.c(paramView) > 0) {}
    for (int i1 = 1;; i1 = 0)
    {
      paramView = this.r;
      if ((i1 == 0) || (Math.abs(paramFloat) <= this.b)) {
        break;
      }
      return true;
    }
  }
  
  private static int b(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1 = Math.abs(paramInt1);
    if (i1 < paramInt2) {
      paramInt2 = 0;
    }
    do
    {
      return paramInt2;
      if (i1 <= paramInt3) {
        break;
      }
      paramInt2 = paramInt3;
    } while (paramInt1 > 0);
    return -paramInt3;
    return paramInt1;
  }
  
  private void b(float paramFloat)
  {
    this.t = true;
    this.r.a(this.s, paramFloat);
    this.t = false;
    if (this.a == 1) {
      b(0);
    }
  }
  
  private void b(float paramFloat1, float paramFloat2, int paramInt)
  {
    int i2 = 1;
    if (a(paramFloat1, paramFloat2, paramInt, 1)) {}
    for (;;)
    {
      int i1 = i2;
      if (a(paramFloat2, paramFloat1, paramInt, 4)) {
        i1 = i2 | 0x4;
      }
      i2 = i1;
      if (a(paramFloat1, paramFloat2, paramInt, 2)) {
        i2 = i1 | 0x2;
      }
      i1 = i2;
      if (a(paramFloat2, paramFloat1, paramInt, 8)) {
        i1 = i2 | 0x8;
      }
      if (i1 != 0)
      {
        int[] arrayOfInt = this.i;
        arrayOfInt[paramInt] |= i1;
        this.r.a(i1, paramInt);
      }
      return;
      i2 = 0;
    }
  }
  
  private boolean b(View paramView, int paramInt)
  {
    if ((paramView == this.s) && (this.c == paramInt)) {
      return true;
    }
    if ((paramView != null) && (this.r.a(paramView)))
    {
      this.c = paramInt;
      a(paramView, paramInt);
      return true;
    }
    return false;
  }
  
  public static boolean b(View paramView, int paramInt1, int paramInt2)
  {
    if (paramView == null) {}
    while ((paramInt1 < paramView.getLeft()) || (paramInt1 >= paramView.getRight()) || (paramInt2 < paramView.getTop()) || (paramInt2 >= paramView.getBottom())) {
      return false;
    }
    return true;
  }
  
  private void c(int paramInt)
  {
    if (this.d == null) {
      return;
    }
    this.d[paramInt] = 0.0F;
    this.e[paramInt] = 0.0F;
    this.f[paramInt] = 0.0F;
    this.g[paramInt] = 0.0F;
    this.h[paramInt] = 0;
    this.i[paramInt] = 0;
    this.j[paramInt] = 0;
    this.k &= (1 << paramInt ^ 0xFFFFFFFF);
  }
  
  private void c(MotionEvent paramMotionEvent)
  {
    int i2 = w.c(paramMotionEvent);
    int i1 = 0;
    while (i1 < i2)
    {
      int i3 = w.b(paramMotionEvent, i1);
      float f1 = w.c(paramMotionEvent, i1);
      float f2 = w.d(paramMotionEvent, i1);
      this.f[i3] = f1;
      this.g[i3] = f2;
      i1 += 1;
    }
  }
  
  private void i()
  {
    this.l.computeCurrentVelocity(1000, this.m);
    float f1 = a(android.support.v4.view.aj.a(this.l, this.c), this.n, this.m);
    a(android.support.v4.view.aj.b(this.l, this.c), this.n, this.m);
    b(f1);
  }
  
  public final int a()
  {
    return this.a;
  }
  
  public final void a(float paramFloat)
  {
    this.n = paramFloat;
  }
  
  public final void a(int paramInt)
  {
    this.p = paramInt;
  }
  
  public final void a(View paramView, int paramInt)
  {
    if (paramView.getParent() != this.u) {
      throw new IllegalArgumentException("captureChildView: parameter must be a descendant of the ViewDragHelper's tracked parent view (" + this.u + ")");
    }
    this.s = paramView;
    this.c = paramInt;
    this.r.b(paramView);
    b(1);
  }
  
  public final boolean a(int paramInt1, int paramInt2)
  {
    if (!this.t) {
      throw new IllegalStateException("Cannot settleCapturedViewAt outside of a call to Callback#onViewReleased");
    }
    return a(paramInt1, paramInt2, (int)android.support.v4.view.aj.a(this.l, this.c), (int)android.support.v4.view.aj.b(this.l, this.c));
  }
  
  public final boolean a(MotionEvent paramMotionEvent)
  {
    int i2 = w.a(paramMotionEvent);
    int i1 = w.b(paramMotionEvent);
    if (i2 == 0) {
      e();
    }
    if (this.l == null) {
      this.l = VelocityTracker.obtain();
    }
    this.l.addMovement(paramMotionEvent);
    switch (i2)
    {
    }
    while (this.a == 1)
    {
      return true;
      float f1 = paramMotionEvent.getX();
      float f2 = paramMotionEvent.getY();
      i1 = w.b(paramMotionEvent, 0);
      a(f1, f2, i1);
      paramMotionEvent = b((int)f1, (int)f2);
      if ((paramMotionEvent == this.s) && (this.a == 2)) {
        b(paramMotionEvent, i1);
      }
      if ((this.h[i1] & this.p) != 0)
      {
        paramMotionEvent = this.r;
        i1 = this.p;
        paramMotionEvent.b();
        continue;
        i2 = w.b(paramMotionEvent, i1);
        f1 = w.c(paramMotionEvent, i1);
        f2 = w.d(paramMotionEvent, i1);
        a(f1, f2, i2);
        if (this.a == 0)
        {
          if ((this.h[i2] & this.p) != 0)
          {
            paramMotionEvent = this.r;
            i1 = this.p;
            paramMotionEvent.b();
          }
        }
        else if (this.a == 2)
        {
          paramMotionEvent = b((int)f1, (int)f2);
          if (paramMotionEvent == this.s)
          {
            b(paramMotionEvent, i2);
            continue;
            i2 = w.c(paramMotionEvent);
            i1 = 0;
            while (i1 < i2)
            {
              int i3 = w.b(paramMotionEvent, i1);
              f1 = w.c(paramMotionEvent, i1);
              f2 = w.d(paramMotionEvent, i1);
              float f3 = f1 - this.d[i3];
              b(f3, f2 - this.e[i3], i3);
              if (this.a == 1) {
                break;
              }
              View localView = b((int)f1, (int)f2);
              if ((localView != null) && (a(localView, f3)) && (b(localView, i3))) {
                break;
              }
              i1 += 1;
            }
            c(paramMotionEvent);
            continue;
            c(w.b(paramMotionEvent, i1));
            continue;
            e();
          }
        }
      }
    }
    return false;
  }
  
  public final boolean a(View paramView, int paramInt1, int paramInt2)
  {
    this.s = paramView;
    this.c = -1;
    return a(paramInt1, paramInt2, 0, 0);
  }
  
  public final int b()
  {
    return this.o;
  }
  
  public final View b(int paramInt1, int paramInt2)
  {
    int i1 = this.u.getChildCount() - 1;
    while (i1 >= 0)
    {
      Object localObject = this.u;
      am localAm = this.r;
      localObject = ((ViewGroup)localObject).getChildAt(i1);
      if ((paramInt1 >= ((View)localObject).getLeft()) && (paramInt1 < ((View)localObject).getRight()) && (paramInt2 >= ((View)localObject).getTop()) && (paramInt2 < ((View)localObject).getBottom())) {
        return localObject;
      }
      i1 -= 1;
    }
    return null;
  }
  
  final void b(int paramInt)
  {
    if (this.a != paramInt)
    {
      this.a = paramInt;
      this.r.a(paramInt);
      if (paramInt == 0) {
        this.s = null;
      }
    }
  }
  
  public final void b(MotionEvent paramMotionEvent)
  {
    int i1 = 0;
    int i2 = 0;
    int i4 = w.a(paramMotionEvent);
    int i3 = w.b(paramMotionEvent);
    if (i4 == 0) {
      e();
    }
    if (this.l == null) {
      this.l = VelocityTracker.obtain();
    }
    this.l.addMovement(paramMotionEvent);
    float f1;
    float f2;
    switch (i4)
    {
    case 4: 
    default: 
    case 0: 
    case 5: 
      do
      {
        do
        {
          do
          {
            return;
            f1 = paramMotionEvent.getX();
            f2 = paramMotionEvent.getY();
            i1 = w.b(paramMotionEvent, 0);
            paramMotionEvent = b((int)f1, (int)f2);
            a(f1, f2, i1);
            b(paramMotionEvent, i1);
          } while ((this.h[i1] & this.p) == 0);
          paramMotionEvent = this.r;
          i1 = this.p;
          paramMotionEvent.b();
          return;
          i1 = w.b(paramMotionEvent, i3);
          f1 = w.c(paramMotionEvent, i3);
          f2 = w.d(paramMotionEvent, i3);
          a(f1, f2, i1);
          if (this.a != 0) {
            break;
          }
          b(b((int)f1, (int)f2), i1);
        } while ((this.h[i1] & this.p) == 0);
        paramMotionEvent = this.r;
        i1 = this.p;
        paramMotionEvent.b();
        return;
        i2 = (int)f1;
        i3 = (int)f2;
      } while (!b(this.s, i2, i3));
      b(this.s, i1);
      return;
    case 2: 
      if (this.a == 1)
      {
        i1 = w.a(paramMotionEvent, this.c);
        f1 = w.c(paramMotionEvent, i1);
        f2 = w.d(paramMotionEvent, i1);
        i3 = (int)(f1 - this.f[this.c]);
        i4 = (int)(f2 - this.g[this.c]);
        i2 = this.s.getLeft() + i3;
        this.s.getTop();
        int i6 = this.s.getLeft();
        int i5 = this.s.getTop();
        i1 = i2;
        if (i3 != 0)
        {
          i1 = this.r.b(this.s, i2);
          this.s.offsetLeftAndRight(i1 - i6);
        }
        if (i4 != 0)
        {
          i2 = this.r.d(this.s);
          this.s.offsetTopAndBottom(i2 - i5);
        }
        if ((i3 != 0) || (i4 != 0)) {
          this.r.a(this.s, i1);
        }
        c(paramMotionEvent);
        return;
      }
      i3 = w.c(paramMotionEvent);
      i1 = i2;
      while (i1 < i3)
      {
        i2 = w.b(paramMotionEvent, i1);
        f1 = w.c(paramMotionEvent, i1);
        f2 = w.d(paramMotionEvent, i1);
        float f3 = f1 - this.d[i2];
        b(f3, f2 - this.e[i2], i2);
        if (this.a == 1) {
          break;
        }
        View localView = b((int)f1, (int)f2);
        if ((a(localView, f3)) && (b(localView, i2))) {
          break;
        }
        i1 += 1;
      }
      c(paramMotionEvent);
      return;
    case 6: 
      i2 = w.b(paramMotionEvent, i3);
      if ((this.a == 1) && (i2 == this.c))
      {
        i3 = w.c(paramMotionEvent);
        if (i1 >= i3) {
          break label762;
        }
        i4 = w.b(paramMotionEvent, i1);
        if (i4 == this.c) {
          break label718;
        }
        f1 = w.c(paramMotionEvent, i1);
        f2 = w.d(paramMotionEvent, i1);
        if ((b((int)f1, (int)f2) != this.s) || (!b(this.s, i4))) {
          break label718;
        }
      }
      break;
    }
    label718:
    label762:
    for (i1 = this.c;; i1 = -1)
    {
      if (i1 == -1) {
        i();
      }
      c(i2);
      return;
      i1 += 1;
      break;
      if (this.a == 1) {
        i();
      }
      e();
      return;
      if (this.a == 1) {
        b(0.0F);
      }
      e();
      return;
    }
  }
  
  public final View c()
  {
    return this.s;
  }
  
  public final int d()
  {
    return this.b;
  }
  
  public final void e()
  {
    this.c = -1;
    if (this.d != null)
    {
      Arrays.fill(this.d, 0.0F);
      Arrays.fill(this.e, 0.0F);
      Arrays.fill(this.f, 0.0F);
      Arrays.fill(this.g, 0.0F);
      Arrays.fill(this.h, 0);
      Arrays.fill(this.i, 0);
      Arrays.fill(this.j, 0);
      this.k = 0;
    }
    if (this.l != null)
    {
      this.l.recycle();
      this.l = null;
    }
  }
  
  public final void f()
  {
    e();
    if (this.a == 2)
    {
      this.q.b();
      this.q.c();
      this.q.g();
      int i1 = this.q.b();
      this.q.c();
      this.r.a(this.s, i1);
    }
    b(0);
  }
  
  public final boolean g()
  {
    if (this.a == 2)
    {
      boolean bool2 = this.q.f();
      int i1 = this.q.b();
      int i2 = this.q.c();
      int i3 = i1 - this.s.getLeft();
      int i4 = i2 - this.s.getTop();
      if (i3 != 0) {
        this.s.offsetLeftAndRight(i3);
      }
      if (i4 != 0) {
        this.s.offsetTopAndBottom(i4);
      }
      if ((i3 != 0) || (i4 != 0)) {
        this.r.a(this.s, i1);
      }
      boolean bool1 = bool2;
      if (bool2)
      {
        bool1 = bool2;
        if (i1 == this.q.d())
        {
          bool1 = bool2;
          if (i2 == this.q.e())
          {
            this.q.g();
            bool1 = this.q.a();
          }
        }
      }
      if (!bool1) {
        this.u.post(this.w);
      }
    }
    return this.a == 2;
  }
  
  public final boolean h()
  {
    int i3 = this.d.length;
    int i2 = 0;
    while (i2 < i3)
    {
      int i1;
      if ((this.k & 1 << i2) != 0)
      {
        i1 = 1;
        if (i1 == 0) {
          break label106;
        }
        float f1 = this.f[i2] - this.d[i2];
        float f2 = this.g[i2] - this.e[i2];
        if (f1 * f1 + f2 * f2 <= this.b * this.b) {
          break label101;
        }
        i1 = 1;
      }
      for (;;)
      {
        if (i1 == 0) {
          break label111;
        }
        return true;
        i1 = 0;
        break;
        label101:
        i1 = 0;
        continue;
        label106:
        i1 = 0;
      }
      label111:
      i2 += 1;
    }
    return false;
  }
}
