package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.os.Build.VERSION;
import android.support.v4.view.an;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.DecelerateInterpolator;
import android.widget.AbsListView;

public class SwipeRefreshLayout
  extends ViewGroup
{
  private static final int[] s = { 16842766 };
  private aa a;
  private View b;
  private int c;
  private ai d;
  private MotionEvent e;
  private int f;
  private boolean g = false;
  private int h;
  private float i = -1.0F;
  private float j;
  private int k;
  private float l = 0.0F;
  private float m = 0.0F;
  private int n;
  private int o;
  private boolean p;
  private final DecelerateInterpolator q;
  private final AccelerateInterpolator r;
  private final Animation t = new ab(this);
  private Animation u = new ac(this);
  private final Animation.AnimationListener v = new ad(this);
  private final Animation.AnimationListener w = new ae(this);
  private final Runnable x = new af(this);
  private final Runnable y = new ag(this);
  
  public SwipeRefreshLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    this.h = ViewConfiguration.get(paramContext).getScaledTouchSlop();
    this.k = getResources().getInteger(17694721);
    setWillNotDraw(false);
    this.a = new aa(this);
    this.n = ((int)(getResources().getDisplayMetrics().density * 4.0F));
    this.q = new DecelerateInterpolator(2.0F);
    this.r = new AccelerateInterpolator(1.5F);
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, s);
    setEnabled(paramContext.getBoolean(0, true));
    paramContext.recycle();
  }
  
  private void a()
  {
    if (this.b == null)
    {
      if ((getChildCount() > 1) && (!isInEditMode())) {
        throw new IllegalStateException("SwipeRefreshLayout can host only one direct child");
      }
      this.b = getChildAt(0);
      this.c = (this.b.getTop() + getPaddingTop());
    }
    if ((this.i == -1.0F) && (getParent() != null) && (((View)getParent()).getHeight() > 0))
    {
      DisplayMetrics localDisplayMetrics = getResources().getDisplayMetrics();
      this.i = ((int)Math.min(((View)getParent()).getHeight() * 0.6F, localDisplayMetrics.density * 120.0F));
    }
  }
  
  private void a(int paramInt)
  {
    this.b.offsetTopAndBottom(paramInt);
    this.o = this.b.getTop();
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    this.a.a(paramCanvas);
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    removeCallbacks(this.y);
    removeCallbacks(this.x);
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    removeCallbacks(this.x);
    removeCallbacks(this.y);
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    a();
    if ((this.p) && (paramMotionEvent.getAction() == 0)) {
      this.p = false;
    }
    if ((isEnabled()) && (!this.p)) {
      if (Build.VERSION.SDK_INT < 14) {
        if ((this.b instanceof AbsListView))
        {
          AbsListView localAbsListView = (AbsListView)this.b;
          if ((localAbsListView.getChildCount() > 0) && ((localAbsListView.getFirstVisiblePosition() > 0) || (localAbsListView.getChildAt(0).getTop() < localAbsListView.getPaddingTop())))
          {
            bool1 = true;
            if (bool1) {
              break label159;
            }
          }
        }
      }
    }
    label159:
    for (boolean bool1 = onTouchEvent(paramMotionEvent);; bool1 = false)
    {
      boolean bool2 = bool1;
      if (!bool1) {
        bool2 = super.onInterceptTouchEvent(paramMotionEvent);
      }
      return bool2;
      bool1 = false;
      break;
      if (this.b.getScrollY() > 0)
      {
        bool1 = true;
        break;
      }
      bool1 = false;
      break;
      bool1 = an.a(this.b);
      break;
    }
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt1 = getMeasuredWidth();
    paramInt2 = getMeasuredHeight();
    this.a.a(paramInt1, this.n);
    if (getChildCount() == 0) {
      return;
    }
    View localView = getChildAt(0);
    paramInt3 = getPaddingLeft();
    paramInt4 = this.o + getPaddingTop();
    localView.layout(paramInt3, paramInt4, paramInt1 - getPaddingLeft() - getPaddingRight() + paramInt3, paramInt2 - getPaddingTop() - getPaddingBottom() + paramInt4);
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    if ((getChildCount() > 1) && (!isInEditMode())) {
      throw new IllegalStateException("SwipeRefreshLayout can host only one direct child");
    }
    if (getChildCount() > 0) {
      getChildAt(0).measure(View.MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), 1073741824), View.MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), 1073741824));
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    switch (paramMotionEvent.getAction())
    {
    }
    label175:
    label261:
    label329:
    label344:
    do
    {
      float f3;
      float f2;
      do
      {
        do
        {
          return false;
          this.m = 0.0F;
          this.e = MotionEvent.obtain(paramMotionEvent);
          this.j = this.e.getY();
          return false;
        } while ((this.e == null) || (this.p));
        f3 = paramMotionEvent.getY();
        f2 = f3 - this.e.getY();
      } while (f2 <= this.h);
      if (f2 > this.i)
      {
        removeCallbacks(this.y);
        this.x.run();
        if (this.g != true)
        {
          a();
          this.m = 0.0F;
          this.g = true;
          if (!this.g) {
            break label175;
          }
          this.a.a();
        }
        for (;;)
        {
          paramMotionEvent = this.d;
          return true;
          this.a.b();
        }
      }
      float f1 = this.r.getInterpolation(f2 / this.i);
      int i2;
      int i1;
      if (f1 == 0.0F)
      {
        this.m = 0.0F;
        f1 = f2;
        if (this.j > f3) {
          f1 = f2 - this.h;
        }
        i2 = (int)f1;
        int i3 = this.b.getTop();
        if (i2 <= this.i) {
          break label329;
        }
        i1 = (int)this.i;
        a(i1 - i3);
        if ((this.j <= f3) || (this.b.getTop() >= this.h)) {
          break label344;
        }
        removeCallbacks(this.y);
      }
      for (;;)
      {
        this.j = paramMotionEvent.getY();
        return true;
        this.m = f1;
        this.a.a(f1);
        break;
        i1 = i2;
        if (i2 >= 0) {
          break label261;
        }
        i1 = 0;
        break label261;
        removeCallbacks(this.y);
        postDelayed(this.y, 300L);
      }
    } while (this.e == null);
    this.e.recycle();
    this.e = null;
    return false;
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean) {}
}
