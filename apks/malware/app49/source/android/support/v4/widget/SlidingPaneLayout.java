package android.support.v4.widget;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Parcelable;
import android.support.v4.view.an;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import java.util.ArrayList;

public class SlidingPaneLayout
  extends ViewGroup
{
  static final w a = new x();
  private int b = -858993460;
  private int c;
  private Drawable d;
  private final int e;
  private boolean f;
  private View g;
  private float h;
  private float i;
  private int j;
  private boolean k;
  private int l;
  private float m;
  private float n;
  private u o;
  private final aj p;
  private boolean q;
  private boolean r = true;
  private final Rect s = new Rect();
  private final ArrayList<s> t = new ArrayList();
  
  static
  {
    int i1 = Build.VERSION.SDK_INT;
    if (i1 >= 17)
    {
      a = new z();
      return;
    }
    if (i1 >= 16)
    {
      a = new y();
      return;
    }
  }
  
  public SlidingPaneLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public SlidingPaneLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    float f1 = paramContext.getResources().getDisplayMetrics().density;
    this.e = ((int)(32.0F * f1 + 0.5F));
    ViewConfiguration.get(paramContext);
    setWillNotDraw(false);
    an.a(this, new r(this));
    an.e(this);
    this.p = aj.a(this, 0.5F, new t(this, (byte)0));
    this.p.a(1);
    this.p.a(f1 * 400.0F);
  }
  
  private void a(View paramView, float paramFloat, int paramInt)
  {
    SlidingPaneLayout.LayoutParams localLayoutParams = (SlidingPaneLayout.LayoutParams)paramView.getLayoutParams();
    if ((paramFloat > 0.0F) && (paramInt != 0))
    {
      i1 = (int)(((0xFF000000 & paramInt) >>> 24) * paramFloat);
      if (localLayoutParams.d == null) {
        localLayoutParams.d = new Paint();
      }
      localLayoutParams.d.setColorFilter(new PorterDuffColorFilter(i1 << 24 | 0xFFFFFF & paramInt, PorterDuff.Mode.SRC_OVER));
      if (an.f(paramView) != 2) {
        an.a(paramView, 2, localLayoutParams.d);
      }
      c(paramView);
    }
    while (an.f(paramView) == 0)
    {
      int i1;
      return;
    }
    if (localLayoutParams.d != null) {
      localLayoutParams.d.setColorFilter(null);
    }
    paramView = new s(this, paramView);
    this.t.add(paramView);
    an.a(this, paramView);
  }
  
  private boolean a(float paramFloat)
  {
    if (!this.f) {
      return false;
    }
    SlidingPaneLayout.LayoutParams localLayoutParams = (SlidingPaneLayout.LayoutParams)this.g.getLayoutParams();
    int i1 = getPaddingLeft();
    i1 = (int)(localLayoutParams.leftMargin + i1 + this.j * paramFloat);
    if (this.p.a(this.g, i1, this.g.getTop()))
    {
      c();
      an.c(this);
      return true;
    }
    return false;
  }
  
  private void b(float paramFloat)
  {
    int i2 = 0;
    Object localObject = (SlidingPaneLayout.LayoutParams)this.g.getLayoutParams();
    if ((((SlidingPaneLayout.LayoutParams)localObject).c) && (((SlidingPaneLayout.LayoutParams)localObject).leftMargin <= 0)) {}
    for (int i1 = 1;; i1 = 0)
    {
      int i3 = getChildCount();
      while (i2 < i3)
      {
        localObject = getChildAt(i2);
        if (localObject != this.g)
        {
          int i4 = (int)((1.0F - this.i) * this.l);
          this.i = paramFloat;
          ((View)localObject).offsetLeftAndRight(i4 - (int)((1.0F - paramFloat) * this.l));
          if (i1 != 0) {
            a((View)localObject, 1.0F - this.i, this.c);
          }
        }
        i2 += 1;
      }
    }
  }
  
  private void c(View paramView)
  {
    a.a(this, paramView);
  }
  
  private boolean d()
  {
    boolean bool = false;
    if ((this.r) || (a(0.0F)))
    {
      this.q = false;
      bool = true;
    }
    return bool;
  }
  
  final void a()
  {
    if (this.o != null) {
      u localU = this.o;
    }
    sendAccessibilityEvent(32);
  }
  
  final void a(View paramView)
  {
    int i7 = getPaddingLeft();
    int i8 = getWidth();
    int i9 = getPaddingRight();
    int i10 = getPaddingTop();
    int i11 = getHeight();
    int i12 = getPaddingBottom();
    int i1;
    int i4;
    int i3;
    int i2;
    label75:
    int i5;
    label84:
    Object localObject;
    if (paramView != null) {
      if (an.i(paramView))
      {
        i1 = 1;
        if (i1 == 0) {
          break label247;
        }
        i4 = paramView.getLeft();
        i3 = paramView.getRight();
        i2 = paramView.getTop();
        i1 = paramView.getBottom();
        int i13 = getChildCount();
        i5 = 0;
        if (i5 >= i13) {
          return;
        }
        localObject = getChildAt(i5);
        if (localObject == paramView) {
          return;
        }
        i6 = Math.max(i7, ((View)localObject).getLeft());
        int i14 = Math.max(i10, ((View)localObject).getTop());
        int i15 = Math.min(i8 - i9, ((View)localObject).getRight());
        int i16 = Math.min(i11 - i12, ((View)localObject).getBottom());
        if ((i6 < i4) || (i14 < i2) || (i15 > i3) || (i16 > i1)) {
          break label260;
        }
      }
    }
    label247:
    label260:
    for (int i6 = 4;; i6 = 0)
    {
      ((View)localObject).setVisibility(i6);
      i5 += 1;
      break label84;
      if (Build.VERSION.SDK_INT < 18)
      {
        localObject = paramView.getBackground();
        if (localObject != null)
        {
          if (((Drawable)localObject).getOpacity() == -1)
          {
            i1 = 1;
            break;
          }
          i1 = 0;
          break;
        }
      }
      i1 = 0;
      break;
      i1 = 0;
      i2 = 0;
      i3 = 0;
      i4 = 0;
      break label75;
    }
  }
  
  final void b()
  {
    if (this.o != null) {
      u localU = this.o;
    }
    sendAccessibilityEvent(32);
  }
  
  final boolean b(View paramView)
  {
    if (paramView == null) {
      return false;
    }
    paramView = (SlidingPaneLayout.LayoutParams)paramView.getLayoutParams();
    return (this.f) && (paramView.c) && (this.h > 0.0F);
  }
  
  final void c()
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = getChildAt(i1);
      if (localView.getVisibility() == 4) {
        localView.setVisibility(0);
      }
      i1 += 1;
    }
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof SlidingPaneLayout.LayoutParams)) && (super.checkLayoutParams(paramLayoutParams));
  }
  
  public void computeScroll()
  {
    if (this.p.g())
    {
      if (!this.f) {
        this.p.f();
      }
    }
    else {
      return;
    }
    an.c(this);
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    if (getChildCount() > 1) {}
    for (View localView = getChildAt(1); (localView == null) || (this.d == null); localView = null) {
      return;
    }
    int i1 = this.d.getIntrinsicWidth();
    int i2 = localView.getLeft();
    int i3 = localView.getTop();
    int i4 = localView.getBottom();
    this.d.setBounds(i2 - i1, i3, i2, i4);
    this.d.draw(paramCanvas);
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    SlidingPaneLayout.LayoutParams localLayoutParams = (SlidingPaneLayout.LayoutParams)paramView.getLayoutParams();
    int i1 = paramCanvas.save(2);
    if ((this.f) && (!localLayoutParams.b) && (this.g != null))
    {
      paramCanvas.getClipBounds(this.s);
      this.s.right = Math.min(this.s.right, this.g.getLeft());
      paramCanvas.clipRect(this.s);
    }
    boolean bool;
    if (Build.VERSION.SDK_INT < 11)
    {
      if ((!localLayoutParams.c) || (this.h <= 0.0F)) {
        break label203;
      }
      if (!paramView.isDrawingCacheEnabled()) {
        paramView.setDrawingCacheEnabled(true);
      }
      Bitmap localBitmap = paramView.getDrawingCache();
      if (localBitmap != null)
      {
        paramCanvas.drawBitmap(localBitmap, paramView.getLeft(), paramView.getTop(), localLayoutParams.d);
        bool = false;
        paramCanvas.restoreToCount(i1);
        return bool;
      }
      Log.e("SlidingPaneLayout", "drawChild: child view " + paramView + " returned null drawing cache");
    }
    for (;;)
    {
      bool = super.drawChild(paramCanvas, paramView, paramLong);
      break;
      label203:
      if (paramView.isDrawingCacheEnabled()) {
        paramView.setDrawingCacheEnabled(false);
      }
    }
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new SlidingPaneLayout.LayoutParams();
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new SlidingPaneLayout.LayoutParams(getContext(), paramAttributeSet);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new SlidingPaneLayout.LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new SlidingPaneLayout.LayoutParams(paramLayoutParams);
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    this.r = true;
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    this.r = true;
    int i2 = this.t.size();
    int i1 = 0;
    while (i1 < i2)
    {
      ((s)this.t.get(i1)).run();
      i1 += 1;
    }
    this.t.clear();
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool2 = false;
    int i1 = android.support.v4.view.w.a(paramMotionEvent);
    Object localObject;
    if ((!this.f) && (i1 == 0) && (getChildCount() > 1))
    {
      localObject = getChildAt(1);
      if (localObject != null)
      {
        aj localAj = this.p;
        if (aj.b((View)localObject, (int)paramMotionEvent.getX(), (int)paramMotionEvent.getY())) {
          break label110;
        }
      }
    }
    label110:
    for (boolean bool1 = true;; bool1 = false)
    {
      this.q = bool1;
      if ((this.f) && ((!this.k) || (i1 == 0))) {
        break;
      }
      this.p.e();
      bool1 = super.onInterceptTouchEvent(paramMotionEvent);
      return bool1;
    }
    if ((i1 == 3) || (i1 == 1))
    {
      this.p.e();
      return false;
    }
    switch (i1)
    {
    }
    label164:
    float f1;
    float f2;
    do
    {
      for (i1 = 0;; i1 = 1)
      {
        if (!this.p.a(paramMotionEvent))
        {
          bool1 = bool2;
          if (i1 == 0) {
            break;
          }
        }
        return true;
        this.k = false;
        f1 = paramMotionEvent.getX();
        f2 = paramMotionEvent.getY();
        this.m = f1;
        this.n = f2;
        localObject = this.p;
        if ((!aj.b(this.g, (int)f1, (int)f2)) || (!b(this.g))) {
          break label164;
        }
      }
      f2 = paramMotionEvent.getX();
      f1 = paramMotionEvent.getY();
      f2 = Math.abs(f2 - this.m);
      f1 = Math.abs(f1 - this.n);
    } while ((f2 <= this.p.d()) || (f1 <= f2));
    this.p.e();
    this.k = true;
    return false;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i2 = paramInt3 - paramInt1;
    paramInt2 = getPaddingLeft();
    int i3 = getPaddingRight();
    int i4 = getPaddingTop();
    int i1 = getChildCount();
    float f1;
    if (this.r)
    {
      if ((this.f) && (this.q))
      {
        f1 = 1.0F;
        this.h = f1;
      }
    }
    else
    {
      paramInt3 = 0;
      paramInt1 = paramInt2;
      label64:
      if (paramInt3 >= i1) {
        break label319;
      }
      View localView = getChildAt(paramInt3);
      if (localView.getVisibility() == 8) {
        break label428;
      }
      SlidingPaneLayout.LayoutParams localLayoutParams = (SlidingPaneLayout.LayoutParams)localView.getLayoutParams();
      int i5 = localView.getMeasuredWidth();
      paramInt4 = 0;
      if (!localLayoutParams.b) {
        break label283;
      }
      int i6 = localLayoutParams.leftMargin;
      int i7 = localLayoutParams.rightMargin;
      i6 = Math.min(paramInt1, i2 - i3 - this.e) - paramInt2 - (i6 + i7);
      this.j = i6;
      if (localLayoutParams.leftMargin + paramInt2 + i6 + i5 / 2 <= i2 - i3) {
        break label278;
      }
      paramBoolean = true;
      label186:
      localLayoutParams.c = paramBoolean;
      i6 = (int)(i6 * this.h);
      paramInt2 = localLayoutParams.leftMargin + i6 + paramInt2;
      this.h = (i6 / this.j);
      paramInt4 = paramInt2 - paramInt4;
      localView.layout(paramInt4, i4, paramInt4 + i5, localView.getMeasuredHeight() + i4);
      paramInt1 += localView.getWidth();
    }
    label278:
    label283:
    label319:
    label394:
    label428:
    for (;;)
    {
      paramInt3 += 1;
      break label64;
      f1 = 0.0F;
      break;
      paramBoolean = false;
      break label186;
      if ((this.f) && (this.l != 0)) {}
      for (paramInt2 = (int)((1.0F - this.h) * this.l);; paramInt2 = 0)
      {
        paramInt4 = paramInt2;
        paramInt2 = paramInt1;
        break;
        if (this.r)
        {
          if (!this.f) {
            break label394;
          }
          if (this.l != 0) {
            b(this.h);
          }
          if (((SlidingPaneLayout.LayoutParams)this.g.getLayoutParams()).c) {
            a(this.g, this.h, this.b);
          }
        }
        for (;;)
        {
          a(this.g);
          this.r = false;
          return;
          paramInt1 = 0;
          while (paramInt1 < i1)
          {
            a(getChildAt(paramInt1), 0.0F, this.b);
            paramInt1 += 1;
          }
        }
      }
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i3 = View.MeasureSpec.getMode(paramInt1);
    int i1 = View.MeasureSpec.getSize(paramInt1);
    int i2 = View.MeasureSpec.getMode(paramInt2);
    paramInt1 = View.MeasureSpec.getSize(paramInt2);
    if (i3 != 1073741824) {
      if (isInEditMode())
      {
        if ((i3 == Integer.MIN_VALUE) || (i3 != 0)) {
          break label1071;
        }
        i1 = i2;
        i2 = 300;
      }
    }
    for (;;)
    {
      label93:
      boolean bool1;
      int i7;
      int i6;
      float f1;
      label141:
      View localView;
      SlidingPaneLayout.LayoutParams localLayoutParams;
      int i4;
      switch (i1)
      {
      default: 
        paramInt1 = 0;
        i3 = -1;
        bool1 = false;
        paramInt2 = i2 - getPaddingLeft() - getPaddingRight();
        i7 = getChildCount();
        if (i7 > 2) {
          Log.e("SlidingPaneLayout", "onMeasure: More than two child views are not supported.");
        }
        this.g = null;
        i6 = 0;
        f1 = 0.0F;
        if (i6 < i7)
        {
          localView = getChildAt(i6);
          localLayoutParams = (SlidingPaneLayout.LayoutParams)localView.getLayoutParams();
          if (localView.getVisibility() == 8)
          {
            localLayoutParams.c = false;
            i4 = paramInt2;
            paramInt2 = paramInt1;
            paramInt1 = i4;
          }
        }
        break;
      }
      for (;;)
      {
        i6 += 1;
        i4 = paramInt2;
        paramInt2 = paramInt1;
        paramInt1 = i4;
        break label141;
        throw new IllegalStateException("Width must have an exact value or MATCH_PARENT");
        if (i2 != 0) {
          break label1071;
        }
        if (isInEditMode())
        {
          if (i2 != 0) {
            break label1071;
          }
          paramInt2 = Integer.MIN_VALUE;
          i2 = i1;
          paramInt1 = 300;
          i1 = paramInt2;
          break;
        }
        throw new IllegalStateException("Height must not be UNSPECIFIED");
        paramInt1 = paramInt1 - getPaddingTop() - getPaddingBottom();
        i3 = paramInt1;
        break label93;
        i3 = getPaddingTop();
        i4 = getPaddingBottom();
        paramInt2 = 0;
        i3 = paramInt1 - i3 - i4;
        paramInt1 = paramInt2;
        break label93;
        float f2 = f1;
        if (localLayoutParams.a > 0.0F)
        {
          f2 = f1 + localLayoutParams.a;
          if (localLayoutParams.width == 0) {}
        }
        else
        {
          i4 = localLayoutParams.leftMargin + localLayoutParams.rightMargin;
          label376:
          int i5;
          label396:
          int i8;
          if (localLayoutParams.width == -2)
          {
            i4 = View.MeasureSpec.makeMeasureSpec(i2 - i4, Integer.MIN_VALUE);
            if (localLayoutParams.height != -2) {
              break label538;
            }
            i5 = View.MeasureSpec.makeMeasureSpec(i3, Integer.MIN_VALUE);
            localView.measure(i4, i5);
            i5 = localView.getMeasuredWidth();
            i8 = localView.getMeasuredHeight();
            i4 = paramInt1;
            if (i1 == Integer.MIN_VALUE)
            {
              i4 = paramInt1;
              if (i8 > paramInt1) {
                i4 = Math.min(i8, i3);
              }
            }
            paramInt1 = paramInt2 - i5;
            if (paramInt1 >= 0) {
              break label576;
            }
          }
          label538:
          label576:
          for (boolean bool2 = true;; bool2 = false)
          {
            localLayoutParams.b = bool2;
            if (localLayoutParams.b) {
              this.g = localView;
            }
            f1 = f2;
            bool1 = bool2 | bool1;
            paramInt2 = i4;
            break;
            if (localLayoutParams.width == -1)
            {
              i4 = View.MeasureSpec.makeMeasureSpec(i2 - i4, 1073741824);
              break label376;
            }
            i4 = View.MeasureSpec.makeMeasureSpec(localLayoutParams.width, 1073741824);
            break label376;
            if (localLayoutParams.height == -1)
            {
              i5 = View.MeasureSpec.makeMeasureSpec(i3, 1073741824);
              break label396;
            }
            i5 = View.MeasureSpec.makeMeasureSpec(localLayoutParams.height, 1073741824);
            break label396;
          }
          if ((bool1) || (f1 > 0.0F))
          {
            i6 = i2 - this.e;
            i4 = 0;
            if (i4 < i7)
            {
              localView = getChildAt(i4);
              if (localView.getVisibility() != 8)
              {
                localLayoutParams = (SlidingPaneLayout.LayoutParams)localView.getLayoutParams();
                if (localView.getVisibility() != 8)
                {
                  if ((localLayoutParams.width != 0) || (localLayoutParams.a <= 0.0F)) {
                    break label767;
                  }
                  i1 = 1;
                  label671:
                  if (i1 == 0) {
                    break label773;
                  }
                  i5 = 0;
                  label679:
                  if ((!bool1) || (localView == this.g)) {
                    break label837;
                  }
                  if ((localLayoutParams.width < 0) && ((i5 > i6) || (localLayoutParams.a > 0.0F)))
                  {
                    if (i1 == 0) {
                      break label821;
                    }
                    if (localLayoutParams.height != -2) {
                      break label783;
                    }
                    i1 = View.MeasureSpec.makeMeasureSpec(i3, Integer.MIN_VALUE);
                    label743:
                    localView.measure(View.MeasureSpec.makeMeasureSpec(i6, 1073741824), i1);
                  }
                }
              }
              for (;;)
              {
                i4 += 1;
                break;
                label767:
                i1 = 0;
                break label671;
                label773:
                i5 = localView.getMeasuredWidth();
                break label679;
                label783:
                if (localLayoutParams.height == -1)
                {
                  i1 = View.MeasureSpec.makeMeasureSpec(i3, 1073741824);
                  break label743;
                }
                i1 = View.MeasureSpec.makeMeasureSpec(localLayoutParams.height, 1073741824);
                break label743;
                label821:
                i1 = View.MeasureSpec.makeMeasureSpec(localView.getMeasuredHeight(), 1073741824);
                break label743;
                label837:
                if (localLayoutParams.a > 0.0F)
                {
                  if (localLayoutParams.width == 0) {
                    if (localLayoutParams.height == -2) {
                      i1 = View.MeasureSpec.makeMeasureSpec(i3, Integer.MIN_VALUE);
                    }
                  }
                  for (;;)
                  {
                    if (!bool1) {
                      break label983;
                    }
                    i8 = localLayoutParams.leftMargin;
                    i8 = i2 - (localLayoutParams.rightMargin + i8);
                    int i9 = View.MeasureSpec.makeMeasureSpec(i8, 1073741824);
                    if (i5 == i8) {
                      break;
                    }
                    localView.measure(i9, i1);
                    break;
                    if (localLayoutParams.height == -1)
                    {
                      i1 = View.MeasureSpec.makeMeasureSpec(i3, 1073741824);
                    }
                    else
                    {
                      i1 = View.MeasureSpec.makeMeasureSpec(localLayoutParams.height, 1073741824);
                      continue;
                      i1 = View.MeasureSpec.makeMeasureSpec(localView.getMeasuredHeight(), 1073741824);
                    }
                  }
                  label983:
                  i8 = Math.max(0, paramInt2);
                  localView.measure(View.MeasureSpec.makeMeasureSpec((int)(localLayoutParams.a * i8 / f1) + i5, 1073741824), i1);
                }
              }
            }
          }
          setMeasuredDimension(i2, paramInt1);
          this.f = bool1;
          if ((this.p.a() != 0) && (!bool1)) {
            this.p.f();
          }
          return;
        }
        i4 = paramInt1;
        f1 = f2;
        paramInt1 = paramInt2;
        paramInt2 = i4;
      }
      label1071:
      paramInt2 = i2;
      i2 = i1;
      i1 = paramInt2;
    }
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    paramParcelable = (SlidingPaneLayout.SavedState)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.getSuperState());
    View localView;
    if (paramParcelable.a)
    {
      localView = this.g;
      if ((this.r) || (a(1.0F))) {
        this.q = true;
      }
    }
    for (;;)
    {
      this.q = paramParcelable.a;
      return;
      localView = this.g;
      d();
    }
  }
  
  protected Parcelable onSaveInstanceState()
  {
    SlidingPaneLayout.SavedState localSavedState = new SlidingPaneLayout.SavedState(super.onSaveInstanceState());
    boolean bool;
    if (this.f) {
      if ((!this.f) || (this.h == 1.0F)) {
        bool = true;
      }
    }
    for (;;)
    {
      localSavedState.a = bool;
      return localSavedState;
      bool = false;
      continue;
      bool = this.q;
    }
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramInt1 != paramInt3) {
      this.r = true;
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (!this.f) {
      return super.onTouchEvent(paramMotionEvent);
    }
    this.p.b(paramMotionEvent);
    switch (paramMotionEvent.getAction() & 0xFF)
    {
    }
    for (;;)
    {
      return true;
      float f1 = paramMotionEvent.getX();
      float f2 = paramMotionEvent.getY();
      this.m = f1;
      this.n = f2;
      continue;
      if (b(this.g))
      {
        f1 = paramMotionEvent.getX();
        f2 = paramMotionEvent.getY();
        float f3 = f1 - this.m;
        float f4 = f2 - this.n;
        int i1 = this.p.d();
        if (f3 * f3 + f4 * f4 < i1 * i1)
        {
          paramMotionEvent = this.p;
          if (aj.b(this.g, (int)f1, (int)f2))
          {
            paramMotionEvent = this.g;
            d();
          }
        }
      }
    }
  }
  
  public void requestChildFocus(View paramView1, View paramView2)
  {
    super.requestChildFocus(paramView1, paramView2);
    if ((!isInTouchMode()) && (!this.f)) {
      if (paramView1 != this.g) {
        break label36;
      }
    }
    label36:
    for (boolean bool = true;; bool = false)
    {
      this.q = bool;
      return;
    }
  }
}
