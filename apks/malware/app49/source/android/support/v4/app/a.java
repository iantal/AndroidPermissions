package android.support.v4.app;

import android.support.v4.b.e;
import android.util.Log;
import java.io.PrintWriter;
import java.util.ArrayList;

final class a
  extends t
  implements Runnable
{
  final m a;
  b b;
  b c;
  int d;
  int e;
  int f;
  int g;
  int h;
  int i;
  int j;
  boolean k;
  boolean l = true;
  String m;
  boolean n;
  int o = -1;
  int p;
  CharSequence q;
  int r;
  CharSequence s;
  
  public a(m paramM)
  {
    this.a = paramM;
  }
  
  public final int a()
  {
    if (this.n) {
      throw new IllegalStateException("commit already called");
    }
    if (m.a)
    {
      Log.v("FragmentManager", "Commit: " + this);
      a("  ", new PrintWriter(new e("FragmentManager")));
    }
    this.n = true;
    if (this.k) {}
    for (this.o = this.a.a(this);; this.o = -1)
    {
      this.a.a(this);
      return this.o;
    }
  }
  
  public final t a(int paramInt, Fragment paramFragment, String paramString)
  {
    paramFragment.s = this.a;
    if (paramString != null)
    {
      if ((paramFragment.y != null) && (!paramString.equals(paramFragment.y))) {
        throw new IllegalStateException("Can't change tag of fragment " + paramFragment + ": was " + paramFragment.y + " now " + paramString);
      }
      paramFragment.y = paramString;
    }
    if (paramInt != 0)
    {
      if ((paramFragment.w != 0) && (paramFragment.w != paramInt)) {
        throw new IllegalStateException("Can't change container ID of fragment " + paramFragment + ": was " + paramFragment.w + " now " + paramInt);
      }
      paramFragment.w = paramInt;
      paramFragment.x = paramInt;
    }
    paramString = new b();
    paramString.c = 1;
    paramString.d = paramFragment;
    a(paramString);
    return this;
  }
  
  public final t a(Fragment paramFragment)
  {
    b localB = new b();
    localB.c = 6;
    localB.d = paramFragment;
    a(localB);
    return this;
  }
  
  final void a(int paramInt)
  {
    if (!this.k) {}
    for (;;)
    {
      return;
      if (m.a) {
        Log.v("FragmentManager", "Bump nesting in " + this + " by " + paramInt);
      }
      for (b localB = this.b; localB != null; localB = localB.a)
      {
        Fragment localFragment;
        if (localB.d != null)
        {
          localFragment = localB.d;
          localFragment.r += paramInt;
          if (m.a) {
            Log.v("FragmentManager", "Bump nesting of " + localB.d + " to " + localB.d.r);
          }
        }
        if (localB.i != null)
        {
          int i1 = localB.i.size() - 1;
          while (i1 >= 0)
          {
            localFragment = (Fragment)localB.i.get(i1);
            localFragment.r += paramInt;
            if (m.a) {
              Log.v("FragmentManager", "Bump nesting of " + localFragment + " to " + localFragment.r);
            }
            i1 -= 1;
          }
        }
      }
    }
  }
  
  final void a(b paramB)
  {
    if (this.b == null)
    {
      this.c = paramB;
      this.b = paramB;
    }
    for (;;)
    {
      paramB.e = this.e;
      paramB.f = this.f;
      paramB.g = this.g;
      paramB.h = this.h;
      this.d += 1;
      return;
      paramB.b = this.c;
      this.c.a = paramB;
      this.c = paramB;
    }
  }
  
  public final void a(String paramString, PrintWriter paramPrintWriter)
  {
    a(paramString, paramPrintWriter, true);
  }
  
  public final void a(String paramString, PrintWriter paramPrintWriter, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("mName=");
      paramPrintWriter.print(this.m);
      paramPrintWriter.print(" mIndex=");
      paramPrintWriter.print(this.o);
      paramPrintWriter.print(" mCommitted=");
      paramPrintWriter.println(this.n);
      if (this.i != 0)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mTransition=#");
        paramPrintWriter.print(Integer.toHexString(this.i));
        paramPrintWriter.print(" mTransitionStyle=#");
        paramPrintWriter.println(Integer.toHexString(this.j));
      }
      if ((this.e != 0) || (this.f != 0))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mEnterAnim=#");
        paramPrintWriter.print(Integer.toHexString(this.e));
        paramPrintWriter.print(" mExitAnim=#");
        paramPrintWriter.println(Integer.toHexString(this.f));
      }
      if ((this.g != 0) || (this.h != 0))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mPopEnterAnim=#");
        paramPrintWriter.print(Integer.toHexString(this.g));
        paramPrintWriter.print(" mPopExitAnim=#");
        paramPrintWriter.println(Integer.toHexString(this.h));
      }
      if ((this.p != 0) || (this.q != null))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mBreadCrumbTitleRes=#");
        paramPrintWriter.print(Integer.toHexString(this.p));
        paramPrintWriter.print(" mBreadCrumbTitleText=");
        paramPrintWriter.println(this.q);
      }
      if ((this.r != 0) || (this.s != null))
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mBreadCrumbShortTitleRes=#");
        paramPrintWriter.print(Integer.toHexString(this.r));
        paramPrintWriter.print(" mBreadCrumbShortTitleText=");
        paramPrintWriter.println(this.s);
      }
    }
    if (this.b != null)
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.println("Operations:");
      String str2 = paramString + "    ";
      b localB = this.b;
      int i1 = 0;
      while (localB != null)
      {
        String str1;
        int i2;
        switch (localB.c)
        {
        default: 
          str1 = "cmd=" + localB.c;
          paramPrintWriter.print(paramString);
          paramPrintWriter.print("  Op #");
          paramPrintWriter.print(i1);
          paramPrintWriter.print(": ");
          paramPrintWriter.print(str1);
          paramPrintWriter.print(" ");
          paramPrintWriter.println(localB.d);
          if (paramBoolean)
          {
            if ((localB.e != 0) || (localB.f != 0))
            {
              paramPrintWriter.print(paramString);
              paramPrintWriter.print("enterAnim=#");
              paramPrintWriter.print(Integer.toHexString(localB.e));
              paramPrintWriter.print(" exitAnim=#");
              paramPrintWriter.println(Integer.toHexString(localB.f));
            }
            if ((localB.g != 0) || (localB.h != 0))
            {
              paramPrintWriter.print(paramString);
              paramPrintWriter.print("popEnterAnim=#");
              paramPrintWriter.print(Integer.toHexString(localB.g));
              paramPrintWriter.print(" popExitAnim=#");
              paramPrintWriter.println(Integer.toHexString(localB.h));
            }
          }
          if ((localB.i == null) || (localB.i.size() <= 0)) {
            break label788;
          }
          i2 = 0;
          label622:
          if (i2 >= localB.i.size()) {
            break label788;
          }
          paramPrintWriter.print(str2);
          if (localB.i.size() == 1) {
            paramPrintWriter.print("Removed: ");
          }
          break;
        }
        for (;;)
        {
          paramPrintWriter.println(localB.i.get(i2));
          i2 += 1;
          break label622;
          str1 = "NULL";
          break;
          str1 = "ADD";
          break;
          str1 = "REPLACE";
          break;
          str1 = "REMOVE";
          break;
          str1 = "HIDE";
          break;
          str1 = "SHOW";
          break;
          str1 = "DETACH";
          break;
          str1 = "ATTACH";
          break;
          if (i2 == 0) {
            paramPrintWriter.println("Removed:");
          }
          paramPrintWriter.print(str2);
          paramPrintWriter.print("  #");
          paramPrintWriter.print(i2);
          paramPrintWriter.print(": ");
        }
        label788:
        localB = localB.a;
        i1 += 1;
      }
    }
  }
  
  public final t b(Fragment paramFragment)
  {
    b localB = new b();
    localB.c = 7;
    localB.d = paramFragment;
    a(localB);
    return this;
  }
  
  public final void b()
  {
    if (m.a)
    {
      Log.v("FragmentManager", "popFromBackStack: " + this);
      a("  ", new PrintWriter(new e("FragmentManager")));
    }
    a(-1);
    b localB = this.c;
    if (localB != null)
    {
      Fragment localFragment;
      switch (localB.c)
      {
      default: 
        throw new IllegalArgumentException("Unknown cmd: " + localB.c);
      case 1: 
        localFragment = localB.d;
        localFragment.G = localB.h;
        this.a.a(localFragment, m.c(this.i), this.j);
      }
      for (;;)
      {
        localB = localB.b;
        break;
        localFragment = localB.d;
        if (localFragment != null)
        {
          localFragment.G = localB.h;
          this.a.a(localFragment, m.c(this.i), this.j);
        }
        if (localB.i != null)
        {
          int i1 = 0;
          while (i1 < localB.i.size())
          {
            localFragment = (Fragment)localB.i.get(i1);
            localFragment.G = localB.g;
            this.a.a(localFragment, false);
            i1 += 1;
          }
          localFragment = localB.d;
          localFragment.G = localB.g;
          this.a.a(localFragment, false);
          continue;
          localFragment = localB.d;
          localFragment.G = localB.g;
          this.a.c(localFragment, m.c(this.i), this.j);
          continue;
          localFragment = localB.d;
          localFragment.G = localB.h;
          this.a.b(localFragment, m.c(this.i), this.j);
          continue;
          localFragment = localB.d;
          localFragment.G = localB.g;
          this.a.e(localFragment, m.c(this.i), this.j);
          continue;
          localFragment = localB.d;
          localFragment.G = localB.g;
          this.a.d(localFragment, m.c(this.i), this.j);
        }
      }
    }
    this.a.a(this.a.n, m.c(this.i), this.j, true);
    if (this.o >= 0)
    {
      this.a.b(this.o);
      this.o = -1;
    }
  }
  
  public final void run()
  {
    if (m.a) {
      Log.v("FragmentManager", "Run: " + this);
    }
    if ((this.k) && (this.o < 0)) {
      throw new IllegalStateException("addToBackStack() called after commit()");
    }
    a(1);
    b localB = this.b;
    if (localB != null)
    {
      Object localObject1;
      switch (localB.c)
      {
      default: 
        throw new IllegalArgumentException("Unknown cmd: " + localB.c);
      case 1: 
        localObject1 = localB.d;
        ((Fragment)localObject1).G = localB.e;
        this.a.a((Fragment)localObject1, false);
      }
      for (;;)
      {
        localB = localB.a;
        break;
        localObject1 = localB.d;
        Object localObject2;
        if (this.a.g != null)
        {
          int i1 = 0;
          localObject2 = localObject1;
          if (i1 < this.a.g.size())
          {
            Fragment localFragment = (Fragment)this.a.g.get(i1);
            if (m.a) {
              Log.v("FragmentManager", "OP_REPLACE: adding=" + localObject1 + " old=" + localFragment);
            }
            if (localObject1 != null)
            {
              localObject2 = localObject1;
              if (localFragment.x != ((Fragment)localObject1).x) {}
            }
            else
            {
              if (localFragment != localObject1) {
                break label307;
              }
              localObject2 = null;
              localB.d = null;
            }
            for (;;)
            {
              i1 += 1;
              localObject1 = localObject2;
              break;
              label307:
              if (localB.i == null) {
                localB.i = new ArrayList();
              }
              localB.i.add(localFragment);
              localFragment.G = localB.f;
              if (this.k)
              {
                localFragment.r += 1;
                if (m.a) {
                  Log.v("FragmentManager", "Bump nesting of " + localFragment + " to " + localFragment.r);
                }
              }
              this.a.a(localFragment, this.i, this.j);
              localObject2 = localObject1;
            }
          }
        }
        else
        {
          localObject2 = localObject1;
        }
        if (localObject2 != null)
        {
          localObject2.G = localB.e;
          this.a.a(localObject2, false);
          continue;
          localObject1 = localB.d;
          ((Fragment)localObject1).G = localB.f;
          this.a.a((Fragment)localObject1, this.i, this.j);
          continue;
          localObject1 = localB.d;
          ((Fragment)localObject1).G = localB.f;
          this.a.b((Fragment)localObject1, this.i, this.j);
          continue;
          localObject1 = localB.d;
          ((Fragment)localObject1).G = localB.e;
          this.a.c((Fragment)localObject1, this.i, this.j);
          continue;
          localObject1 = localB.d;
          ((Fragment)localObject1).G = localB.f;
          this.a.d((Fragment)localObject1, this.i, this.j);
          continue;
          localObject1 = localB.d;
          ((Fragment)localObject1).G = localB.e;
          this.a.e((Fragment)localObject1, this.i, this.j);
        }
      }
    }
    this.a.a(this.a.n, this.i, this.j, true);
    if (this.k) {
      this.a.b(this);
    }
  }
  
  public final String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder(128);
    localStringBuilder.append("BackStackEntry{");
    localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
    if (this.o >= 0)
    {
      localStringBuilder.append(" #");
      localStringBuilder.append(this.o);
    }
    if (this.m != null)
    {
      localStringBuilder.append(" ");
      localStringBuilder.append(this.m);
    }
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
}
