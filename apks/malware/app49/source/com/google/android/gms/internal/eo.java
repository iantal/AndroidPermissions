package com.google.android.gms.internal;

import android.app.Activity;
import android.content.Context;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import com.google.android.gms.ads.d;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public final class eo
{
  static final Set<String> a = new HashSet(Arrays.asList(new String[] { "top-left", "top-right", "top-center", "center", "bottom-left", "bottom-right", "bottom-center" }));
  private int b = -1;
  private int c = -1;
  private int d = 0;
  private int e = 0;
  private boolean f = true;
  private String g = "top-right";
  private final mm h;
  private final Map<String, String> i;
  private final Context j;
  
  public eo(mm paramMm, Map<String, String> paramMap)
  {
    this.h = paramMm;
    this.i = paramMap;
    this.j = paramMm.k();
  }
  
  public final void a()
  {
    mi.c("PLEASE IMPLEMENT mraid.resize()");
    if (this.j == null)
    {
      mi.e("Not an activity context. Cannot resize.");
      return;
    }
    if (this.h.e().f)
    {
      mi.e("Is interstitial. Cannot resize an interstitial.");
      return;
    }
    if (this.h.j())
    {
      mi.e("Is expanded. Cannot resize an expanded banner.");
      return;
    }
    Object localObject1 = lo.d(this.j);
    if (!TextUtils.isEmpty((CharSequence)this.i.get("width")))
    {
      m = lo.b((String)this.i.get("width"));
      k = localObject1[0];
      if ((m < 50) || (m >= k)) {
        break label384;
      }
      k = 1;
      if (k != 0) {
        this.b = m;
      }
    }
    if (!TextUtils.isEmpty((CharSequence)this.i.get("height")))
    {
      m = lo.b((String)this.i.get("height"));
      k = localObject1[1];
      if ((m < 50) || (m >= k)) {
        break label389;
      }
      k = 1;
      label183:
      if (k != 0) {
        this.c = m;
      }
    }
    if (!TextUtils.isEmpty((CharSequence)this.i.get("offsetX"))) {
      this.d = lo.b((String)this.i.get("offsetX"));
    }
    if (!TextUtils.isEmpty((CharSequence)this.i.get("offsetY"))) {
      this.e = lo.b((String)this.i.get("offsetY"));
    }
    if (!TextUtils.isEmpty((CharSequence)this.i.get("allowOffscreen"))) {
      this.f = Boolean.parseBoolean((String)this.i.get("allowOffscreen"));
    }
    localObject1 = (String)this.i.get("customClosePosition");
    if ((!TextUtils.isEmpty((CharSequence)localObject1)) && (a.contains(localObject1))) {
      this.g = ((String)localObject1);
    }
    if ((this.b >= 0) && (this.c >= 0)) {}
    for (int k = 1;; k = 0)
    {
      if (k != 0) {
        break label399;
      }
      mi.e("Invalid width and height options. Cannot resize.");
      return;
      label384:
      k = 0;
      break;
      label389:
      k = 0;
      break label183;
    }
    label399:
    localObject1 = (WindowManager)this.j.getSystemService("window");
    Object localObject2 = new DisplayMetrics();
    ((WindowManager)localObject1).getDefaultDisplay().getMetrics((DisplayMetrics)localObject2);
    k = mg.a((DisplayMetrics)localObject2, this.b);
    int m = mg.a((DisplayMetrics)localObject2, this.c);
    localObject1 = this.h.getParent();
    if ((localObject1 != null) && ((localObject1 instanceof ViewGroup))) {
      ((ViewGroup)localObject1).removeView(this.h);
    }
    localObject1 = new LinearLayout(this.j);
    ((LinearLayout)localObject1).setBackgroundColor(0);
    localObject2 = new PopupWindow(this.j);
    ((PopupWindow)localObject2).setHeight(m + 16);
    ((PopupWindow)localObject2).setWidth(k + 16);
    boolean bool;
    if (!this.f) {
      bool = true;
    }
    for (;;)
    {
      ((PopupWindow)localObject2).setClippingEnabled(bool);
      ((PopupWindow)localObject2).setContentView((View)localObject1);
      ((LinearLayout)localObject1).addView(this.h, -1, -1);
      ((PopupWindow)localObject2).showAtLocation(((Activity)this.j).getWindow().getDecorView(), 0, this.d, this.e);
      this.h.a(new ay(this.j, new d(this.b, this.c)));
      try
      {
        localObject1 = new JSONObject().put("x", this.d).put("y", this.e).put("width", this.b).put("height", this.c);
        this.h.b("onSizeChanged", (JSONObject)localObject1);
        try
        {
          localObject1 = new JSONObject().put("state", "resized");
          this.h.b("onStateChanged", (JSONObject)localObject1);
          return;
        }
        catch (JSONException localJSONException1)
        {
          mi.b("Error occured while dispatching state change.", localJSONException1);
          return;
        }
        bool = false;
      }
      catch (JSONException localJSONException2)
      {
        for (;;)
        {
          mi.b("Error occured while dispatching size change.", localJSONException2);
        }
      }
    }
  }
}
