package com.google.android.gms.fitness.result;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.p;
import com.google.android.gms.common.internal.ao;
import com.google.android.gms.common.internal.ap;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.fitness.data.Bucket;
import com.google.android.gms.fitness.data.DataSet;
import com.google.android.gms.fitness.data.DataSource;
import com.google.android.gms.fitness.data.DataType;
import com.google.android.gms.fitness.data.RawBucket;
import com.google.android.gms.fitness.data.RawDataSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class DataReadResult
  implements p, SafeParcelable
{
  public static final Parcelable.Creator<DataReadResult> CREATOR = new c();
  private final int a;
  private final List<DataSet> b;
  private final Status c;
  private final List<Bucket> d;
  private int e;
  private final List<DataSource> f;
  private final List<DataType> g;
  
  DataReadResult(int paramInt1, List<RawDataSet> paramList, Status paramStatus, List<RawBucket> paramList1, int paramInt2, List<DataSource> paramList2, List<DataType> paramList3)
  {
    this.a = paramInt1;
    this.c = paramStatus;
    this.e = paramInt2;
    this.f = paramList2;
    this.g = paramList3;
    this.b = new ArrayList(paramList.size());
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      paramStatus = (RawDataSet)paramList.next();
      this.b.add(new DataSet(paramStatus, paramList2));
    }
    this.d = new ArrayList(paramList1.size());
    paramList = paramList1.iterator();
    while (paramList.hasNext())
    {
      paramStatus = (RawBucket)paramList.next();
      this.d.add(new Bucket(paramStatus, paramList2));
    }
  }
  
  public final Status a()
  {
    return this.c;
  }
  
  public final int b()
  {
    return this.e;
  }
  
  final int c()
  {
    return this.a;
  }
  
  final List<RawBucket> d()
  {
    ArrayList localArrayList = new ArrayList(this.d.size());
    Iterator localIterator = this.d.iterator();
    while (localIterator.hasNext()) {
      localArrayList.add(new RawBucket((Bucket)localIterator.next(), this.f, this.g));
    }
    return localArrayList;
  }
  
  public int describeContents()
  {
    return 0;
  }
  
  final List<RawDataSet> e()
  {
    ArrayList localArrayList = new ArrayList(this.b.size());
    Iterator localIterator = this.b.iterator();
    while (localIterator.hasNext()) {
      localArrayList.add(new RawDataSet((DataSet)localIterator.next(), this.f, this.g));
    }
    return localArrayList;
  }
  
  public boolean equals(Object paramObject)
  {
    boolean bool2 = false;
    boolean bool1;
    if (this != paramObject)
    {
      bool1 = bool2;
      if (!(paramObject instanceof DataReadResult)) {
        break label76;
      }
      paramObject = (DataReadResult)paramObject;
      if ((!this.c.equals(paramObject.c)) || (!ao.a(this.b, paramObject.b)) || (!ao.a(this.d, paramObject.d))) {
        break label78;
      }
    }
    label76:
    label78:
    for (int i = 1;; i = 0)
    {
      bool1 = bool2;
      if (i != 0) {
        bool1 = true;
      }
      return bool1;
    }
  }
  
  final List<DataSource> f()
  {
    return this.f;
  }
  
  final List<DataType> g()
  {
    return this.g;
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(new Object[] { this.c, this.b, this.d });
  }
  
  public String toString()
  {
    ap localAp = ao.a(this).a("status", this.c);
    if (this.b.size() > 5)
    {
      localObject = this.b.size() + " data sets";
      localAp = localAp.a("dataSets", localObject);
      if (this.d.size() <= 5) {
        break label123;
      }
    }
    label123:
    for (Object localObject = this.d.size() + " buckets";; localObject = this.d)
    {
      return localAp.a("buckets", localObject).toString();
      localObject = this.b;
      break;
    }
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    c.a(this, paramParcel, paramInt);
  }
}
