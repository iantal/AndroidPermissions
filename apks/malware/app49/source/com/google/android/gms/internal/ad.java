package com.google.android.gms.internal;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.KeyguardManager;
import android.content.Context;
import android.os.Bundle;
import android.os.PowerManager;
import android.os.Process;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.webkit.WebView;
import android.widget.EditText;
import android.widget.TextView;
import java.util.Iterator;
import java.util.List;
import org.json.JSONException;
import org.json.JSONObject;

public final class ad
  extends Thread
{
  private boolean a = false;
  private boolean b = false;
  private boolean c = false;
  private final Object d;
  private final ac e;
  private final ab f;
  private final ib g;
  private final int h;
  private final int i;
  private final int j;
  private final int k;
  private final int l;
  
  public ad(ac paramAc, ab paramAb, Bundle paramBundle, ib paramIb)
  {
    this.e = paramAc;
    this.f = paramAb;
    this.g = paramIb;
    this.d = new Object();
    this.i = paramBundle.getInt(bt.h.a());
    this.j = paramBundle.getInt(bt.i.a());
    this.k = paramBundle.getInt(bt.j.a());
    this.l = paramBundle.getInt(bt.k.a());
    this.h = paramBundle.getInt(bt.l.a(), 10);
    setName("ContentFetchTask");
  }
  
  private ah a(View paramView, aa paramAa)
  {
    int m = 0;
    if (paramView == null) {
      return new ah(this, 0, 0);
    }
    if (((paramView instanceof TextView)) && (!(paramView instanceof EditText)))
    {
      paramAa.b(((TextView)paramView).getText().toString());
      return new ah(this, 1, 0);
    }
    if (((paramView instanceof WebView)) && (!(paramView instanceof mm)))
    {
      paramAa.e();
      paramView = (WebView)paramView;
      if (!po.b()) {}
      for (m = 0; m != 0; m = 1)
      {
        return new ah(this, 0, 1);
        paramAa.e();
        paramView.post(new af(this, paramAa, paramView));
      }
      return new ah(this, 0, 0);
    }
    if ((paramView instanceof ViewGroup))
    {
      paramView = (ViewGroup)paramView;
      int n = 0;
      int i1 = 0;
      while (m < paramView.getChildCount())
      {
        ah localAh = a(paramView.getChildAt(m), paramAa);
        i1 += localAh.a;
        n += localAh.b;
        m += 1;
      }
      return new ah(this, i1, n);
    }
    return new ah(this, 0, 0);
  }
  
  private boolean e()
  {
    try
    {
      Object localObject1 = this.e.b();
      if (localObject1 == null) {
        return false;
      }
      Object localObject2 = (ActivityManager)((Context)localObject1).getSystemService("activity");
      KeyguardManager localKeyguardManager = (KeyguardManager)((Context)localObject1).getSystemService("keyguard");
      localObject1 = (PowerManager)((Context)localObject1).getSystemService("power");
      if ((localObject2 != null) && (localKeyguardManager != null) && (localObject1 != null))
      {
        localObject2 = ((ActivityManager)localObject2).getRunningAppProcesses();
        if (localObject2 == null) {
          return false;
        }
        localObject2 = ((List)localObject2).iterator();
        while (((Iterator)localObject2).hasNext())
        {
          ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)((Iterator)localObject2).next();
          if (Process.myPid() == localRunningAppProcessInfo.pid) {
            if ((localRunningAppProcessInfo.importance == 100) && (!localKeyguardManager.inKeyguardRestrictedInputMode()))
            {
              boolean bool = ((PowerManager)localObject1).isScreenOn();
              if (bool) {
                return true;
              }
            }
          }
        }
        return false;
      }
    }
    catch (Throwable localThrowable)
    {
      return false;
    }
    return false;
  }
  
  public final void a()
  {
    synchronized (this.d)
    {
      if (this.a)
      {
        mi.a("Content hash thread already started, quiting...");
        return;
      }
      this.a = true;
      start();
      return;
    }
  }
  
  final void a(View paramView)
  {
    try
    {
      aa localAa = new aa(this.i, this.j, this.k, this.l);
      paramView = a(paramView, localAa);
      localAa.f();
      if ((paramView.a == 0) && (paramView.b == 0)) {
        return;
      }
      if (((paramView.b != 0) || (localAa.h() != 0)) && ((paramView.b != 0) || (!this.f.a(localAa))))
      {
        this.f.c(localAa);
        return;
      }
    }
    catch (Exception paramView)
    {
      mi.b("Exception in fetchContentOnUIThread", paramView);
      this.g.a(paramView);
    }
  }
  
  final void a(aa paramAa, WebView paramWebView, String paramString)
  {
    paramAa.d();
    try
    {
      if (!TextUtils.isEmpty(paramString))
      {
        paramString = new JSONObject(paramString).optString("text");
        if (TextUtils.isEmpty(paramWebView.getTitle())) {
          break label84;
        }
        paramAa.a(paramWebView.getTitle() + "\n" + paramString);
      }
      while (paramAa.a())
      {
        this.f.b(paramAa);
        return;
        label84:
        paramAa.a(paramString);
      }
      return;
    }
    catch (JSONException paramAa)
    {
      mi.a("Json string may be malformed.");
      return;
    }
    catch (Throwable paramAa)
    {
      mi.a("Failed to get webview content.", paramAa);
      this.g.a(paramAa);
    }
  }
  
  public final aa b()
  {
    return this.f.a();
  }
  
  public final void c()
  {
    synchronized (this.d)
    {
      this.b = false;
      this.d.notifyAll();
      mi.a("ContentFetchThread: wakeup");
      return;
    }
  }
  
  public final boolean d()
  {
    return this.b;
  }
  
  public final void run()
  {
    while (!this.c) {
      try
      {
        if (e())
        {
          localActivity = this.e.a();
          if (localActivity == null) {
            mi.a("ContentFetchThread: no activity");
          }
        }
      }
      catch (Throwable localThrowable)
      {
        Activity localActivity;
        mi.b("Error in ContentFetchTask", localThrowable);
        this.g.a(localThrowable);
        synchronized (this.d)
        {
          for (;;)
          {
            boolean bool = this.b;
            if (!bool) {
              break;
            }
            try
            {
              mi.a("ContentFetchTask: waiting");
              this.d.wait();
            }
            catch (InterruptedException localInterruptedException) {}
          }
          if (localActivity != null)
          {
            Object localObject2 = null;
            ??? = localObject2;
            if (localActivity.getWindow() != null)
            {
              ??? = localObject2;
              if (localActivity.getWindow().getDecorView() != null) {
                ??? = localActivity.getWindow().getDecorView().findViewById(16908290);
              }
            }
            if ((??? != null) && (??? != null)) {
              ((View)???).post(new ae(this, (View)???));
            }
          }
          for (;;)
          {
            Thread.sleep(this.h * 1000);
            break;
            mi.a("ContentFetchTask: sleeping");
            synchronized (this.d)
            {
              this.b = true;
              mi.a("ContentFetchThread: paused, mPause = " + this.b);
            }
          }
        }
      }
    }
  }
}
