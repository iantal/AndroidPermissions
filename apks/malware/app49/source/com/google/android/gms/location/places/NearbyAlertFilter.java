package com.google.android.gms.location.places;

import android.os.Parcel;
import com.google.android.gms.common.internal.ao;
import com.google.android.gms.common.internal.ap;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

public final class NearbyAlertFilter
  extends d
  implements SafeParcelable
{
  public static final g a = new g();
  final int b;
  final List<String> c;
  final List<Integer> d;
  final List<UserDataType> e;
  private final Set<String> f;
  private final Set<Integer> g;
  private final Set<UserDataType> h;
  
  NearbyAlertFilter(int paramInt, List<String> paramList, List<Integer> paramList1, List<UserDataType> paramList2)
  {
    this.b = paramInt;
    if (paramList1 == null)
    {
      paramList1 = Collections.emptyList();
      this.d = paramList1;
      if (paramList2 != null) {
        break label91;
      }
      paramList1 = Collections.emptyList();
      label31:
      this.e = paramList1;
      if (paramList != null) {
        break label100;
      }
    }
    label91:
    label100:
    for (paramList = Collections.emptyList();; paramList = Collections.unmodifiableList(paramList))
    {
      this.c = paramList;
      this.g = a(this.d);
      this.h = a(this.e);
      this.f = a(this.c);
      return;
      paramList1 = Collections.unmodifiableList(paramList1);
      break;
      paramList1 = Collections.unmodifiableList(paramList2);
      break label31;
    }
  }
  
  public static NearbyAlertFilter a(Collection<String> paramCollection, Collection<Integer> paramCollection1, Collection<UserDataType> paramCollection2)
  {
    if (((paramCollection == null) || (paramCollection.isEmpty())) && ((paramCollection1 == null) || (paramCollection1.isEmpty())) && ((paramCollection2 == null) || (paramCollection2.isEmpty()))) {
      throw new IllegalArgumentException("NearbyAlertFilters must contain at least onePlaceId, PlaceType, or UserDataType to match results with.");
    }
    return new NearbyAlertFilter(0, a(paramCollection), a(paramCollection1), a(paramCollection2));
  }
  
  public final int describeContents()
  {
    g localG = a;
    return 0;
  }
  
  public final boolean equals(Object paramObject)
  {
    if (this == paramObject) {}
    do
    {
      return true;
      if (!(paramObject instanceof NearbyAlertFilter)) {
        return false;
      }
      paramObject = (NearbyAlertFilter)paramObject;
    } while ((this.g.equals(paramObject.g)) && (this.h.equals(paramObject.h)) && (this.f.equals(paramObject.f)));
    return false;
  }
  
  public final int hashCode()
  {
    return Arrays.hashCode(new Object[] { this.g, this.h, this.f });
  }
  
  public final String toString()
  {
    ap localAp = ao.a(this);
    if (!this.g.isEmpty()) {
      localAp.a("types", this.g);
    }
    if (!this.f.isEmpty()) {
      localAp.a("placeIds", this.f);
    }
    if (!this.h.isEmpty()) {
      localAp.a("requestedUserDataTypes", this.h);
    }
    return localAp.toString();
  }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt)
  {
    g localG = a;
    g.a(this, paramParcel);
  }
}
