package com.google.android.gms.analytics.internal;

import android.content.Context;
import android.content.Intent;
import com.google.android.gms.analytics.AnalyticsReceiver;
import com.google.android.gms.analytics.AnalyticsService;
import com.google.android.gms.b.ua;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public final class v
  extends ac
{
  private final aq a;
  
  public v(ae paramAe, ag paramAg)
  {
    super(paramAe);
    com.google.android.gms.common.internal.aq.a(paramAg);
    this.a = paramAg.c(paramAe);
  }
  
  public final long a(ah paramAh)
  {
    C();
    com.google.android.gms.common.internal.aq.a(paramAh);
    l();
    long l = this.a.b(paramAh);
    if (l == 0L) {
      this.a.a(paramAh);
    }
    return l;
  }
  
  protected final void a()
  {
    this.a.D();
  }
  
  public final void a(bj paramBj)
  {
    C();
    q().a(new z(this, paramBj));
  }
  
  public final void a(d paramD)
  {
    com.google.android.gms.common.internal.aq.a(paramD);
    C();
    b("Hit delivery requested", paramD);
    q().a(new y(this, paramD));
  }
  
  public final void a(String paramString, Runnable paramRunnable)
  {
    com.google.android.gms.common.internal.aq.a(paramString, "campaign param can't be empty");
    q().a(new x(this, paramString, paramRunnable));
  }
  
  public final void a(boolean paramBoolean)
  {
    a("Network connectivity status changed", Boolean.valueOf(paramBoolean));
    q().a(new w(this, paramBoolean));
  }
  
  public final void b()
  {
    this.a.b();
  }
  
  public final void c()
  {
    C();
    Context localContext = n();
    if ((AnalyticsReceiver.a(localContext)) && (AnalyticsService.a(localContext)))
    {
      Intent localIntent = new Intent(localContext, AnalyticsService.class);
      localIntent.setAction("com.google.android.gms.analytics.ANALYTICS_DISPATCH");
      localContext.startService(localIntent);
      return;
    }
    a(null);
  }
  
  public final boolean d()
  {
    C();
    Future localFuture = q().a(new aa(this));
    try
    {
      localFuture.get();
      return true;
    }
    catch (InterruptedException localInterruptedException)
    {
      d("syncDispatchLocalHits interrupted", localInterruptedException);
      return false;
    }
    catch (ExecutionException localExecutionException)
    {
      e("syncDispatchLocalHits failed", localExecutionException);
    }
    return false;
  }
  
  public final void e()
  {
    C();
    ua.d();
    this.a.f();
  }
  
  final void f()
  {
    l();
    this.a.e();
  }
  
  final void g()
  {
    l();
    this.a.d();
  }
}
