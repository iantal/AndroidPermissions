package com.google.android.gms.internal;

import android.app.KeyguardManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.graphics.Rect;
import android.os.PowerManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.ViewTreeObserver.OnScrollChangedListener;
import android.view.WindowManager;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public final class h
  implements ViewTreeObserver.OnGlobalLayoutListener, ViewTreeObserver.OnScrollChangedListener
{
  private static final long m = TimeUnit.MILLISECONDS.toNanos(100L);
  private final Object a = new Object();
  private final WeakReference<kw> b;
  private WeakReference<ViewTreeObserver> c;
  private final WeakReference<View> d;
  private final f e;
  private final Context f;
  private final q g;
  private boolean h;
  private final WindowManager i;
  private final PowerManager j;
  private final KeyguardManager k;
  private p l;
  private boolean n = false;
  private boolean o = false;
  private final BlockingQueue<Runnable> p = new ArrayBlockingQueue(2);
  private long q = Long.MIN_VALUE;
  private boolean r;
  private boolean s;
  private BroadcastReceiver t;
  private final HashSet<e> u = new HashSet();
  
  public h(Context paramContext, ay paramAy, kw paramKw, View paramView, gt paramGt)
  {
    this(paramAy, paramKw, paramGt, paramView, new v(paramContext, paramGt));
  }
  
  private h(ay paramAy, kw paramKw, gt paramGt, View paramView, q paramQ)
  {
    this.b = new WeakReference(paramKw);
    this.d = new WeakReference(paramView);
    this.c = new WeakReference(null);
    this.r = true;
    this.e = new f(UUID.randomUUID().toString(), paramGt, paramAy.c, paramKw.j);
    this.g = paramQ;
    this.i = ((WindowManager)paramView.getContext().getSystemService("window"));
    this.j = ((PowerManager)paramView.getContext().getApplicationContext().getSystemService("power"));
    this.k = ((KeyguardManager)paramView.getContext().getSystemService("keyguard"));
    this.f = paramView.getContext().getApplicationContext();
    paramQ.a("https://googleads.g.doubleclick.net/mads/static/sdk/native/sdk-core-v40.html");
    this.g.a(new i(this, paramView));
    paramAy = this.g;
    paramAy.a("/updateActiveView", new m(this));
    paramAy.a("/untrackActiveViewUnit", new n(this));
    paramAy.a("/visibilityChanged", new o(this));
    paramAy.a("/viewabilityChanged", cg.a);
    try
    {
      paramAy = a(paramView);
      this.p.add(new j(this, paramAy));
      this.p.add(new k(this));
      mi.a("Tracking ad unit: " + this.e.d());
      return;
    }
    catch (Throwable paramAy)
    {
      for (;;) {}
    }
  }
  
  private static int a(int paramInt, DisplayMetrics paramDisplayMetrics)
  {
    float f1 = paramDisplayMetrics.density;
    return (int)(paramInt / f1);
  }
  
  private JSONObject a(View paramView)
  {
    boolean bool1 = true;
    Object localObject3 = new int[2];
    Object localObject1 = new int[2];
    paramView.getLocationOnScreen((int[])localObject3);
    paramView.getLocationInWindow((int[])localObject1);
    localObject1 = k();
    Object localObject2 = paramView.getContext().getResources().getDisplayMetrics();
    Rect localRect1 = new Rect();
    localRect1.left = localObject3[0];
    localRect1.top = localObject3[1];
    localRect1.right = (localRect1.left + paramView.getWidth());
    localRect1.bottom = (localRect1.top + paramView.getHeight());
    localObject3 = new Rect();
    ((Rect)localObject3).right = this.i.getDefaultDisplay().getWidth();
    ((Rect)localObject3).bottom = this.i.getDefaultDisplay().getHeight();
    Rect localRect2 = new Rect();
    boolean bool2 = paramView.getGlobalVisibleRect(localRect2, null);
    Rect localRect3 = new Rect();
    boolean bool3 = paramView.getLocalVisibleRect(localRect3);
    localObject2 = ((JSONObject)localObject1).put("viewBox", new JSONObject().put("top", a(((Rect)localObject3).top, (DisplayMetrics)localObject2)).put("bottom", a(((Rect)localObject3).bottom, (DisplayMetrics)localObject2)).put("left", a(((Rect)localObject3).left, (DisplayMetrics)localObject2)).put("right", a(((Rect)localObject3).right, (DisplayMetrics)localObject2))).put("adBox", new JSONObject().put("top", a(localRect1.top, (DisplayMetrics)localObject2)).put("bottom", a(localRect1.bottom, (DisplayMetrics)localObject2)).put("left", a(localRect1.left, (DisplayMetrics)localObject2)).put("right", a(localRect1.right, (DisplayMetrics)localObject2))).put("globalVisibleBox", new JSONObject().put("top", a(localRect2.top, (DisplayMetrics)localObject2)).put("bottom", a(localRect2.bottom, (DisplayMetrics)localObject2)).put("left", a(localRect2.left, (DisplayMetrics)localObject2)).put("right", a(localRect2.right, (DisplayMetrics)localObject2))).put("globalVisibleBoxVisible", bool2).put("localVisibleBox", new JSONObject().put("top", a(localRect3.top, (DisplayMetrics)localObject2)).put("bottom", a(localRect3.bottom, (DisplayMetrics)localObject2)).put("left", a(localRect3.left, (DisplayMetrics)localObject2)).put("right", a(localRect3.right, (DisplayMetrics)localObject2))).put("localVisibleBoxVisible", bool3).put("screenDensity", ((DisplayMetrics)localObject2).density);
    if ((paramView.getVisibility() == 0) && (paramView.isShown()) && (this.j.isScreenOn()) && (!this.k.inKeyguardRestrictedInputMode())) {}
    for (;;)
    {
      ((JSONObject)localObject2).put("isVisible", bool1).put("isStopped", this.o).put("isPaused", this.n);
      return localObject1;
      bool1 = false;
    }
  }
  
  private void j()
  {
    if (this.l != null) {
      this.l.a(this);
    }
  }
  
  private JSONObject k()
  {
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("afmaVersion", this.e.b()).put("activeViewJSON", this.e.c()).put("timestamp", TimeUnit.NANOSECONDS.toMillis(System.nanoTime())).put("adFormat", this.e.a()).put("hashCode", this.e.d());
    return localJSONObject;
  }
  
  protected final void a()
  {
    Object localObject = new ArrayList();
    this.p.drainTo((Collection)localObject);
    localObject = ((ArrayList)localObject).iterator();
    while (((Iterator)localObject).hasNext()) {
      ((Runnable)((Iterator)localObject).next()).run();
    }
  }
  
  public final void a(e paramE)
  {
    this.u.add(paramE);
  }
  
  public final void a(p paramP)
  {
    synchronized (this.a)
    {
      this.l = paramP;
      return;
    }
  }
  
  protected final void a(JSONObject paramJSONObject)
  {
    try
    {
      JSONArray localJSONArray = new JSONArray();
      JSONObject localJSONObject = new JSONObject();
      localJSONArray.put(paramJSONObject);
      localJSONObject.put("units", localJSONArray);
      this.g.a("AFMA_updateActiveView", localJSONObject);
      return;
    }
    catch (Throwable paramJSONObject)
    {
      mi.b("Skipping active view message.", paramJSONObject);
    }
  }
  
  protected final void a(boolean paramBoolean)
  {
    Iterator localIterator = this.u.iterator();
    while (localIterator.hasNext()) {
      ((e)localIterator.next()).a(paramBoolean);
    }
  }
  
  protected final boolean a(Map<String, String> paramMap)
  {
    if (paramMap == null) {
      return false;
    }
    paramMap = (String)paramMap.get("hashCode");
    return (!TextUtils.isEmpty(paramMap)) && (paramMap.equals(this.e.d()));
  }
  
  protected final void b()
  {
    synchronized (this.a)
    {
      if (this.t != null) {
        return;
      }
      IntentFilter localIntentFilter = new IntentFilter();
      localIntentFilter.addAction("android.intent.action.SCREEN_ON");
      localIntentFilter.addAction("android.intent.action.SCREEN_OFF");
      this.t = new l(this);
      this.f.registerReceiver(this.t, localIntentFilter);
      return;
    }
  }
  
  protected final void b(boolean paramBoolean)
  {
    long l1;
    synchronized (this.a)
    {
      if ((!this.h) || (!this.r)) {
        return;
      }
      l1 = System.nanoTime();
      if ((paramBoolean) && (this.q + m > l1)) {
        return;
      }
    }
    this.q = l1;
    Object localObject3 = (kw)this.b.get();
    Object localObject4 = (View)this.d.get();
    if (localObject4 != null) {
      if (localObject3 == null) {
        break label218;
      }
    }
    for (;;)
    {
      int i1;
      if (i1 != 0)
      {
        d();
        return;
        i1 = 0;
      }
      else
      {
        try
        {
          a(a((View)localObject4));
          localObject4 = (View)this.d.get();
          if (localObject4 != null)
          {
            localObject3 = (ViewTreeObserver)this.c.get();
            localObject4 = ((View)localObject4).getViewTreeObserver();
            if (localObject4 != localObject3)
            {
              this.c = new WeakReference(localObject4);
              ((ViewTreeObserver)localObject4).addOnScrollChangedListener(this);
              ((ViewTreeObserver)localObject4).addOnGlobalLayoutListener(this);
            }
          }
          j();
          return;
        }
        catch (JSONException localJSONException)
        {
          for (;;)
          {
            mi.a("Active view update failed.", localJSONException);
          }
        }
        label218:
        i1 = 1;
      }
    }
  }
  
  protected final void c()
  {
    for (;;)
    {
      synchronized (this.a)
      {
        ??? = (ViewTreeObserver)this.c.get();
        if ((??? == null) || (!((ViewTreeObserver)???).isAlive())) {
          synchronized (this.a)
          {
            if (this.t != null)
            {
              this.f.unregisterReceiver(this.t);
              this.t = null;
            }
            this.r = false;
          }
        }
      }
      try
      {
        this.g.c();
        j();
        return;
        ((ViewTreeObserver)???).removeOnScrollChangedListener(this);
        ((ViewTreeObserver)???).removeGlobalOnLayoutListener(this);
        continue;
        localObject3 = finally;
        throw localObject3;
        localObject4 = finally;
        throw localObject4;
      }
      catch (Throwable localThrowable)
      {
        for (;;) {}
      }
    }
  }
  
  public final void d()
  {
    synchronized (this.a)
    {
      if (this.r) {
        this.s = true;
      }
      try
      {
        JSONObject localJSONObject = k();
        localJSONObject.put("doneReasonCode", "u");
        a(localJSONObject);
        mi.a("Untracking ad unit: " + this.e.d());
        return;
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          mi.b("JSON Failure while processing active view data.", localJSONException);
        }
      }
    }
  }
  
  protected final void e()
  {
    b(false);
  }
  
  public final boolean f()
  {
    synchronized (this.a)
    {
      boolean bool = this.r;
      return bool;
    }
  }
  
  public final void g()
  {
    synchronized (this.a)
    {
      this.o = true;
      b(false);
      this.g.a();
      return;
    }
  }
  
  public final void h()
  {
    synchronized (this.a)
    {
      this.n = true;
      b(false);
      this.g.a();
      return;
    }
  }
  
  public final void i()
  {
    synchronized (this.a)
    {
      this.g.b();
      this.n = false;
      b(false);
      return;
    }
  }
  
  public final void onGlobalLayout()
  {
    b(false);
  }
  
  public final void onScrollChanged()
  {
    b(true);
  }
}
