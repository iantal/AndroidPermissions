package com.google.android.gms.b;

import com.google.android.gms.ads.internal.w;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;

public final class dp
{
  private static int b;
  final String a;
  private final LinkedList<do> c;
  private final Object d = new Object();
  private do e;
  
  public dp(String arg1)
  {
    this.a = ???;
    ??? = dh.x;
    b = ((Integer)w.n().a(???)).intValue();
    synchronized (this.d)
    {
      this.c = new LinkedList();
      return;
    }
  }
  
  public static do a()
  {
    if (!w.j().a()) {
      return null;
    }
    return new do(w.i().b(), null, null);
  }
  
  private static Map<String, String> a(String paramString, StringBuilder paramStringBuilder)
  {
    LinkedHashMap localLinkedHashMap = null;
    if (paramStringBuilder.length() > 0)
    {
      localLinkedHashMap = new LinkedHashMap();
      if (paramString != null) {
        localLinkedHashMap.put("action", paramString);
      }
      paramStringBuilder.setLength(paramStringBuilder.length() - 1);
      localLinkedHashMap.put("it", paramStringBuilder.toString());
    }
    return localLinkedHashMap;
  }
  
  public static Map<String, String> a(dp... paramVarArgs)
  {
    Object localObject1 = null;
    StringBuilder localStringBuilder = new StringBuilder(b * 10 * 20);
    int i = 0;
    if (i < paramVarArgs.length)
    {
      Map localMap = paramVarArgs[i].d();
      Object localObject2 = localObject1;
      if (localMap != null)
      {
        if (i != 0) {
          break label92;
        }
        localObject2 = (String)localMap.get("action");
        localStringBuilder.append((String)localMap.get("it")).append(",");
      }
      for (;;)
      {
        i += 1;
        localObject1 = localObject2;
        break;
        label92:
        if (((!localMap.containsKey("action")) && (localObject1 != null)) || ((localMap.containsKey("action")) && (!((String)localMap.get("action")).equals(localObject1)))) {
          throw new IllegalArgumentException("Can not merge report items for the tickers with different action names.");
        }
        localStringBuilder.append((String)localMap.get("it")).append(",");
        localObject2 = localObject1;
      }
    }
    return a(localObject1, localStringBuilder);
  }
  
  private boolean a(do paramDo, long paramLong, String... paramVarArgs)
  {
    synchronized (this.d)
    {
      int j = paramVarArgs.length;
      int i = 0;
      while (i < j)
      {
        do localDo = new do(paramLong, paramVarArgs[i], paramDo);
        this.c.add(localDo);
        i += 1;
      }
      return true;
    }
  }
  
  private Map<String, String> d()
  {
    StringBuilder localStringBuilder1 = new StringBuilder();
    synchronized (this.d)
    {
      Iterator localIterator = this.c.iterator();
      while (localIterator.hasNext())
      {
        do localDo = (do)localIterator.next();
        Long localLong = Long.valueOf(localDo.a());
        String str = localDo.b();
        localDo = localDo.c();
        if ((localDo != null) && (localLong.longValue() > 0L))
        {
          long l1 = localLong.longValue();
          long l2 = localDo.a();
          localStringBuilder1.append(str).append('.').append(l1 - l2).append(',');
        }
      }
    }
    this.c.clear();
    return a(this.a, localStringBuilder2);
  }
  
  public final boolean a(do paramDo, String... paramVarArgs)
  {
    if ((!w.j().a()) || (paramDo == null)) {
      return false;
    }
    return a(paramDo, w.i().b(), paramVarArgs);
  }
  
  public final void b()
  {
    this.e = a();
  }
  
  public final do c()
  {
    return this.e;
  }
}
