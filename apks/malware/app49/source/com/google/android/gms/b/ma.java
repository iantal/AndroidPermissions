package com.google.android.gms.b;

import com.google.android.gms.ads.internal.request.AdRequestInfoParcel;
import com.google.android.gms.ads.internal.request.AdResponseParcel;
import com.google.android.gms.ads.internal.util.client.b;
import com.google.android.gms.ads.internal.w;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public final class ma
{
  private String a;
  private String b;
  private String c;
  private List<String> d;
  private String e;
  private String f;
  private List<String> g;
  private long h = -1L;
  private boolean i = false;
  private final long j = -1L;
  private List<String> k;
  private long l = -1L;
  private int m = -1;
  private boolean n = false;
  private boolean o = false;
  private boolean p = false;
  private boolean q = true;
  private int r = 0;
  private final AdRequestInfoParcel s;
  
  public ma(AdRequestInfoParcel paramAdRequestInfoParcel)
  {
    this.s = paramAdRequestInfoParcel;
  }
  
  private static String a(Map<String, List<String>> paramMap, String paramString)
  {
    paramMap = (List)paramMap.get(paramString);
    if ((paramMap != null) && (!paramMap.isEmpty())) {
      return (String)paramMap.get(0);
    }
    return null;
  }
  
  private static long b(Map<String, List<String>> paramMap, String paramString)
  {
    paramMap = (List)paramMap.get(paramString);
    if ((paramMap != null) && (!paramMap.isEmpty()))
    {
      paramMap = (String)paramMap.get(0);
      try
      {
        float f1 = Float.parseFloat(paramMap);
        return (f1 * 1000.0F);
      }
      catch (NumberFormatException localNumberFormatException)
      {
        b.e("Could not parse float from " + paramString + " header: " + paramMap);
      }
    }
    return -1L;
  }
  
  private static List<String> c(Map<String, List<String>> paramMap, String paramString)
  {
    paramMap = (List)paramMap.get(paramString);
    if ((paramMap != null) && (!paramMap.isEmpty()))
    {
      paramMap = (String)paramMap.get(0);
      if (paramMap != null) {
        return Arrays.asList(paramMap.trim().split("\\s+"));
      }
    }
    return null;
  }
  
  private static boolean d(Map<String, List<String>> paramMap, String paramString)
  {
    paramMap = (List)paramMap.get(paramString);
    return (paramMap != null) && (!paramMap.isEmpty()) && (Boolean.valueOf((String)paramMap.get(0)).booleanValue());
  }
  
  public final AdResponseParcel a(long paramLong)
  {
    return new AdResponseParcel(this.s, this.b, this.c, this.d, this.g, this.h, this.i, this.k, this.l, this.m, this.a, paramLong, this.e, this.f, this.n, this.o, this.p, this.q, this.r);
  }
  
  public final void a(String paramString1, Map<String, List<String>> paramMap, String paramString2)
  {
    this.b = paramString1;
    this.c = paramString2;
    a(paramMap);
  }
  
  public final void a(Map<String, List<String>> paramMap)
  {
    this.a = a(paramMap, "X-Afma-Ad-Size");
    Object localObject = c(paramMap, "X-Afma-Click-Tracking-Urls");
    if (localObject != null) {
      this.d = ((List)localObject);
    }
    localObject = (List)paramMap.get("X-Afma-Debug-Dialog");
    if ((localObject != null) && (!((List)localObject).isEmpty())) {
      this.e = ((String)((List)localObject).get(0));
    }
    localObject = c(paramMap, "X-Afma-Tracking-Urls");
    if (localObject != null) {
      this.g = ((List)localObject);
    }
    long l1 = b(paramMap, "X-Afma-Interstitial-Timeout");
    if (l1 != -1L) {
      this.h = l1;
    }
    this.i |= d(paramMap, "X-Afma-Mediation");
    localObject = c(paramMap, "X-Afma-Manual-Tracking-Urls");
    if (localObject != null) {
      this.k = ((List)localObject);
    }
    l1 = b(paramMap, "X-Afma-Refresh-Rate");
    if (l1 != -1L) {
      this.l = l1;
    }
    localObject = (List)paramMap.get("X-Afma-Orientation");
    boolean bool1;
    if ((localObject != null) && (!((List)localObject).isEmpty()))
    {
      localObject = (String)((List)localObject).get(0);
      if ("portrait".equalsIgnoreCase((String)localObject)) {
        this.m = w.g().b();
      }
    }
    else
    {
      this.f = a(paramMap, "X-Afma-ActiveView");
      localObject = (List)paramMap.get("X-Afma-Use-HTTPS");
      if ((localObject != null) && (!((List)localObject).isEmpty())) {
        this.p = Boolean.valueOf((String)((List)localObject).get(0)).booleanValue();
      }
      this.n |= d(paramMap, "X-Afma-Custom-Rendering-Allowed");
      boolean bool2 = this.o;
      if ((this.s == null) || (this.s.n == 0)) {
        break label464;
      }
      bool1 = true;
      label325:
      this.o = (bool1 | bool2);
      localObject = (List)paramMap.get("X-Afma-Content-Url-Opted-Out");
      if ((localObject != null) && (!((List)localObject).isEmpty())) {
        this.q = Boolean.valueOf((String)((List)localObject).get(0)).booleanValue();
      }
      paramMap = c(paramMap, "X-Afma-OAuth-Token-Status");
      this.r = 0;
      if (paramMap != null) {
        paramMap = paramMap.iterator();
      }
    }
    label464:
    do
    {
      if (paramMap.hasNext())
      {
        localObject = (String)paramMap.next();
        if ("Clear".equalsIgnoreCase((String)localObject)) {
          this.r = 1;
        }
      }
      else
      {
        return;
        if (!"landscape".equalsIgnoreCase((String)localObject)) {
          break;
        }
        this.m = w.g().a();
        break;
        bool1 = false;
        break label325;
      }
    } while (!"No-Op".equalsIgnoreCase((String)localObject));
    this.r = 0;
  }
}
