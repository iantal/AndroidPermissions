package com.google.android.gms.tagmanager;

final class ef
  extends Number
  implements Comparable<ef>
{
  private double a;
  private long b;
  private boolean c;
  
  private ef(double paramDouble)
  {
    this.a = paramDouble;
    this.c = false;
  }
  
  private ef(long paramLong)
  {
    this.b = paramLong;
    this.c = true;
  }
  
  public static ef a(long paramLong)
  {
    return new ef(paramLong);
  }
  
  public static ef a(Double paramDouble)
  {
    return new ef(paramDouble.doubleValue());
  }
  
  public static ef a(String paramString)
  {
    try
    {
      ef localEf1 = new ef(Long.parseLong(paramString));
      return localEf1;
    }
    catch (NumberFormatException localNumberFormatException1)
    {
      try
      {
        ef localEf2 = new ef(Double.parseDouble(paramString));
        return localEf2;
      }
      catch (NumberFormatException localNumberFormatException2)
      {
        throw new NumberFormatException(paramString + " is not a valid TypedNumber");
      }
    }
  }
  
  public final int a(ef paramEf)
  {
    if ((this.c) && (paramEf.c)) {
      return new Long(this.b).compareTo(Long.valueOf(paramEf.b));
    }
    return Double.compare(doubleValue(), paramEf.doubleValue());
  }
  
  public final boolean a()
  {
    return !this.c;
  }
  
  public final boolean b()
  {
    return this.c;
  }
  
  public final byte byteValue()
  {
    return (byte)(int)longValue();
  }
  
  public final double doubleValue()
  {
    if (this.c) {
      return this.b;
    }
    return this.a;
  }
  
  public final boolean equals(Object paramObject)
  {
    return ((paramObject instanceof ef)) && (a((ef)paramObject) == 0);
  }
  
  public final float floatValue()
  {
    return (float)doubleValue();
  }
  
  public final int hashCode()
  {
    return new Long(longValue()).hashCode();
  }
  
  public final int intValue()
  {
    return (int)longValue();
  }
  
  public final long longValue()
  {
    if (this.c) {
      return this.b;
    }
    return this.a;
  }
  
  public final short shortValue()
  {
    return (short)(int)longValue();
  }
  
  public final String toString()
  {
    if (this.c) {
      return Long.toString(this.b);
    }
    return Double.toString(this.a);
  }
}
