package com.google.android.gms.analytics;

import android.content.Context;
import com.google.android.gms.analytics.internal.i;
import com.google.android.gms.analytics.internal.t;
import java.util.ArrayList;

public final class g
  implements Thread.UncaughtExceptionHandler
{
  private final Thread.UncaughtExceptionHandler a;
  private final r b;
  private final Context c;
  private f d;
  private h e;
  
  public g(r paramR, Thread.UncaughtExceptionHandler paramUncaughtExceptionHandler, Context paramContext)
  {
    if (paramR == null) {
      throw new NullPointerException("tracker cannot be null");
    }
    if (paramContext == null) {
      throw new NullPointerException("context cannot be null");
    }
    this.a = paramUncaughtExceptionHandler;
    this.b = paramR;
    this.d = new q(paramContext, new ArrayList());
    this.c = paramContext.getApplicationContext();
    paramContext = new StringBuilder("ExceptionReporter created, original handler is ");
    if (paramUncaughtExceptionHandler == null) {}
    for (paramR = "null";; paramR = paramUncaughtExceptionHandler.getClass().getName())
    {
      i.b(paramR);
      return;
    }
  }
  
  final Thread.UncaughtExceptionHandler a()
  {
    return this.a;
  }
  
  public final void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    Object localObject = "UncaughtException";
    if (this.d != null) {
      if (paramThread == null) {
        break label150;
      }
    }
    label150:
    for (localObject = paramThread.getName();; localObject = null)
    {
      localObject = this.d.a((String)localObject, paramThrowable);
      i.b("Reporting uncaught exception: " + (String)localObject);
      r localR = this.b;
      m localM = new m();
      localM.a("&exd", (String)localObject);
      localM.a("&exf", t.a());
      localR.a(localM.a());
      if (this.e == null) {
        this.e = h.a(this.c);
      }
      localObject = this.e;
      ((h)localObject).i();
      ((h)localObject).j();
      if (this.a != null)
      {
        i.b("Passing exception to the original handler");
        this.a.uncaughtException(paramThread, paramThrowable);
      }
      return;
    }
  }
}
