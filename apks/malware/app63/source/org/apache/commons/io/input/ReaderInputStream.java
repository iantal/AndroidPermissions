package org.apache.commons.io.input;

import java.io.InputStream;
import java.io.Reader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;

public class ReaderInputStream
  extends InputStream
{
  private static final int DEFAULT_BUFFER_SIZE = 1024;
  private final CharsetEncoder encoder;
  private final CharBuffer encoderIn;
  private final ByteBuffer encoderOut = ByteBuffer.allocate(128);
  private boolean endOfInput;
  private CoderResult lastCoderResult;
  private final Reader reader;
  
  public ReaderInputStream(Reader paramReader)
  {
    this(paramReader, Charset.defaultCharset());
  }
  
  public ReaderInputStream(Reader paramReader, String paramString)
  {
    this(paramReader, paramString, 1024);
  }
  
  public ReaderInputStream(Reader paramReader, String paramString, int paramInt)
  {
    this(paramReader, Charset.forName(paramString), paramInt);
  }
  
  public ReaderInputStream(Reader paramReader, Charset paramCharset)
  {
    this(paramReader, paramCharset, 1024);
  }
  
  public ReaderInputStream(Reader paramReader, Charset paramCharset, int paramInt)
  {
    this(paramReader, paramCharset.newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE), paramInt);
  }
  
  public ReaderInputStream(Reader paramReader, CharsetEncoder paramCharsetEncoder)
  {
    this(paramReader, paramCharsetEncoder, 1024);
  }
  
  public ReaderInputStream(Reader paramReader, CharsetEncoder paramCharsetEncoder, int paramInt)
  {
    this.reader = paramReader;
    this.encoder = paramCharsetEncoder;
    this.encoderIn = CharBuffer.allocate(paramInt);
    this.encoderIn.flip();
  }
  
  public void close()
  {
    this.reader.close();
  }
  
  public int read()
  {
    byte[] arrayOfByte = new byte[1];
    if (read(arrayOfByte) == -1) {
      return -1;
    }
    return arrayOfByte[0] & 0xFF;
  }
  
  public int read(byte[] paramArrayOfByte)
  {
    return read(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    int j = 0;
    int i = paramInt1;
    paramInt1 = j;
    int k;
    for (;;)
    {
      if (paramInt2 > 0) {
        if (this.encoderOut.position() > 0)
        {
          this.encoderOut.flip();
          j = Math.min(this.encoderOut.remaining(), paramInt2);
          this.encoderOut.get(paramArrayOfByte, i, j);
          i += j;
          paramInt2 -= j;
          paramInt1 += j;
          this.encoderOut.compact();
        }
        else if ((!this.endOfInput) && ((this.lastCoderResult == null) || (this.lastCoderResult.isUnderflow())))
        {
          this.encoderIn.compact();
          j = this.encoderIn.position();
          k = this.reader.read(this.encoderIn.array(), j, this.encoderIn.remaining());
          if (k != -1) {
            break label223;
          }
          this.endOfInput = true;
        }
      }
    }
    for (;;)
    {
      this.encoderIn.flip();
      this.lastCoderResult = this.encoder.encode(this.encoderIn, this.encoderOut, this.endOfInput);
      if ((!this.endOfInput) || (this.encoderOut.position() != 0)) {
        break;
      }
      if ((paramInt1 != 0) || (!this.endOfInput)) {
        return paramInt1;
      }
      return -1;
      label223:
      this.encoderIn.position(j + k);
    }
    return paramInt1;
  }
}
