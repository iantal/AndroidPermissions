package org.apache.commons.io.output;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import org.apache.commons.io.FileUtils;

public class LockableFileWriter
  extends Writer
{
  private static final String LCK = ".lck";
  private final File lockFile;
  private final Writer out;
  
  public LockableFileWriter(File paramFile)
  {
    this(paramFile, false, null);
  }
  
  public LockableFileWriter(File paramFile, String paramString)
  {
    this(paramFile, paramString, false, null);
  }
  
  public LockableFileWriter(File paramFile, String paramString1, boolean paramBoolean, String paramString2)
  {
    File localFile = paramFile.getAbsoluteFile();
    if (localFile.getParentFile() != null) {
      FileUtils.forceMkdir(localFile.getParentFile());
    }
    if (localFile.isDirectory()) {
      throw new IOException("File specified is a directory");
    }
    paramFile = paramString2;
    if (paramString2 == null) {
      paramFile = System.getProperty("java.io.tmpdir");
    }
    paramFile = new File(paramFile);
    FileUtils.forceMkdir(paramFile);
    testLockDir(paramFile);
    this.lockFile = new File(paramFile, localFile.getName() + ".lck");
    createLock();
    this.out = initWriter(localFile, paramString1, paramBoolean);
  }
  
  public LockableFileWriter(File paramFile, boolean paramBoolean)
  {
    this(paramFile, paramBoolean, null);
  }
  
  public LockableFileWriter(File paramFile, boolean paramBoolean, String paramString)
  {
    this(paramFile, null, paramBoolean, paramString);
  }
  
  public LockableFileWriter(String paramString)
  {
    this(paramString, false, null);
  }
  
  public LockableFileWriter(String paramString, boolean paramBoolean)
  {
    this(paramString, paramBoolean, null);
  }
  
  public LockableFileWriter(String paramString1, boolean paramBoolean, String paramString2)
  {
    this(new File(paramString1), paramBoolean, paramString2);
  }
  
  private void createLock()
  {
    try
    {
      if (!this.lockFile.createNewFile()) {
        throw new IOException("Can't write file, lock " + this.lockFile.getAbsolutePath() + " exists");
      }
    }
    finally {}
    this.lockFile.deleteOnExit();
  }
  
  /* Error */
  private Writer initWriter(File paramFile, String paramString, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokevirtual 113	java/io/File:exists	()Z
    //   4: istore 4
    //   6: aload_2
    //   7: ifnonnull +16 -> 23
    //   10: new 115	java/io/FileWriter
    //   13: dup
    //   14: aload_1
    //   15: invokevirtual 103	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   18: iload_3
    //   19: invokespecial 117	java/io/FileWriter:<init>	(Ljava/lang/String;Z)V
    //   22: areturn
    //   23: new 119	java/io/FileOutputStream
    //   26: dup
    //   27: aload_1
    //   28: invokevirtual 103	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   31: iload_3
    //   32: invokespecial 120	java/io/FileOutputStream:<init>	(Ljava/lang/String;Z)V
    //   35: astore 5
    //   37: new 122	java/io/OutputStreamWriter
    //   40: dup
    //   41: aload 5
    //   43: aload_2
    //   44: invokespecial 125	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;Ljava/lang/String;)V
    //   47: astore_2
    //   48: aload_2
    //   49: areturn
    //   50: astore_2
    //   51: aconst_null
    //   52: invokestatic 131	org/apache/commons/io/IOUtils:closeQuietly	(Ljava/io/Writer;)V
    //   55: aload 5
    //   57: invokestatic 134	org/apache/commons/io/IOUtils:closeQuietly	(Ljava/io/OutputStream;)V
    //   60: aload_0
    //   61: getfield 80	org/apache/commons/io/output/LockableFileWriter:lockFile	Ljava/io/File;
    //   64: invokestatic 138	org/apache/commons/io/FileUtils:deleteQuietly	(Ljava/io/File;)Z
    //   67: pop
    //   68: iload 4
    //   70: ifne +8 -> 78
    //   73: aload_1
    //   74: invokestatic 138	org/apache/commons/io/FileUtils:deleteQuietly	(Ljava/io/File;)Z
    //   77: pop
    //   78: aload_2
    //   79: athrow
    //   80: astore_2
    //   81: aconst_null
    //   82: astore 5
    //   84: aconst_null
    //   85: invokestatic 131	org/apache/commons/io/IOUtils:closeQuietly	(Ljava/io/Writer;)V
    //   88: aload 5
    //   90: invokestatic 134	org/apache/commons/io/IOUtils:closeQuietly	(Ljava/io/OutputStream;)V
    //   93: aload_0
    //   94: getfield 80	org/apache/commons/io/output/LockableFileWriter:lockFile	Ljava/io/File;
    //   97: invokestatic 138	org/apache/commons/io/FileUtils:deleteQuietly	(Ljava/io/File;)Z
    //   100: pop
    //   101: iload 4
    //   103: ifne +8 -> 111
    //   106: aload_1
    //   107: invokestatic 138	org/apache/commons/io/FileUtils:deleteQuietly	(Ljava/io/File;)Z
    //   110: pop
    //   111: aload_2
    //   112: athrow
    //   113: astore_2
    //   114: goto -30 -> 84
    //   117: astore_2
    //   118: aconst_null
    //   119: astore 5
    //   121: goto -70 -> 51
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	124	0	this	LockableFileWriter
    //   0	124	1	paramFile	File
    //   0	124	2	paramString	String
    //   0	124	3	paramBoolean	boolean
    //   4	98	4	bool	boolean
    //   35	85	5	localFileOutputStream	java.io.FileOutputStream
    // Exception table:
    //   from	to	target	type
    //   37	48	50	java/io/IOException
    //   10	23	80	java/lang/RuntimeException
    //   23	37	80	java/lang/RuntimeException
    //   37	48	113	java/lang/RuntimeException
    //   10	23	117	java/io/IOException
    //   23	37	117	java/io/IOException
  }
  
  private void testLockDir(File paramFile)
  {
    if (!paramFile.exists()) {
      throw new IOException("Could not find lockDir: " + paramFile.getAbsolutePath());
    }
    if (!paramFile.canWrite()) {
      throw new IOException("Could not write to lockDir: " + paramFile.getAbsolutePath());
    }
  }
  
  public void close()
  {
    try
    {
      this.out.close();
      return;
    }
    finally
    {
      this.lockFile.delete();
    }
  }
  
  public void flush()
  {
    this.out.flush();
  }
  
  public void write(int paramInt)
  {
    this.out.write(paramInt);
  }
  
  public void write(String paramString)
  {
    this.out.write(paramString);
  }
  
  public void write(String paramString, int paramInt1, int paramInt2)
  {
    this.out.write(paramString, paramInt1, paramInt2);
  }
  
  public void write(char[] paramArrayOfChar)
  {
    this.out.write(paramArrayOfChar);
  }
  
  public void write(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    this.out.write(paramArrayOfChar, paramInt1, paramInt2);
  }
}
