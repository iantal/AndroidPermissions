package org.meteoroid.plugin.device;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.DashPathEffect;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Paint.FontMetricsInt;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Region.Op;
import android.graphics.Typeface;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import com.a.a.a.e;
import com.a.a.a.i;
import com.a.a.a.j;
import com.a.a.e.b;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.microedition.media.MediaException;
import javax.microedition.media.Player;
import javax.microedition.media.PlayerListener;
import org.meteoroid.core.f;
import org.meteoroid.core.f.a;
import org.meteoroid.core.f.e;
import org.meteoroid.core.g.a;
import org.meteoroid.core.h;
import org.meteoroid.core.h.a;
import org.meteoroid.core.k;
import org.meteoroid.core.m;
import org.meteoroid.plugin.vd.ScreenWidget;
import org.meteoroid.plugin.vd.VirtualKey;

public class MIDPDevice
  extends ScreenWidget
  implements com.a.a.d.a, f.a, f.e, h.a
{
  public static final int ASTERISK = 11;
  public static final int AUTO_DETECT = -1;
  public static final int DOWN = 1;
  public static final int FIRE = 4;
  public static final int GAME_A = 5;
  public static final int GAME_B = 6;
  public static final int GAME_C = 7;
  public static final int GAME_D = 8;
  public static final int LEFT = 2;
  public static final int MSG_MIDP_COMMAND_EVENT = 44034;
  public static final int MSG_MIDP_DISPLAY_CALL_SERIALLY = 44035;
  public static final int MSG_MIDP_MIDLET_NOTIFYDESTROYED = 44036;
  public static final int MUTE_SWITCH = 2;
  public static final int POUND = 12;
  public static final int POWER = 0;
  public static final int RIGHT = 3;
  public static final int SENSOR_SWITCH = 1;
  public static final int SOFT1 = 9;
  public static final int SOFT2 = 10;
  public static final int UP = 0;
  public static final int URL = 8;
  public static final String[] iS = { "UP", "DOWN", "LEFT", "RIGHT", "SELECT", "GAME_A", "GAME_B", "GAME_C", "GAME_D", "SOFT1", "SOFT2", "ASTERISK", "POUND", "UP_LEFT", "UP_RIGHT", "DOWN_LEFT", "DOWN_RIGHT" };
  private static final HashMap<String, Integer> ja = new HashMap(iS.length);
  private static final Properties ji = new Properties();
  public static String jo = "";
  private int height = -1;
  private boolean iT;
  private boolean iU;
  private boolean iV;
  private boolean iW;
  private boolean iX;
  private boolean iY;
  private boolean iZ;
  private Bitmap jb;
  private Bitmap jc;
  private Bitmap jd;
  private Canvas je;
  private c jf;
  private c jg;
  private c jh;
  private int jj;
  private int jk;
  private int jl;
  private int jm;
  private int jn;
  public boolean jp = false;
  public String jq = "";
  private int width = -1;
  
  public MIDPDevice() {}
  
  public static int A(int paramInt)
  {
    if ((ja.containsKey(iS[0])) && (paramInt == ((Integer)ja.get(iS[0])).intValue())) {
      return 1;
    }
    if ((ja.containsKey(iS[1])) && (paramInt == ((Integer)ja.get(iS[1])).intValue())) {
      return 6;
    }
    if ((ja.containsKey(iS[2])) && (paramInt == ((Integer)ja.get(iS[2])).intValue())) {
      return 2;
    }
    if ((ja.containsKey(iS[3])) && (paramInt == ((Integer)ja.get(iS[3])).intValue())) {
      return 5;
    }
    if ((ja.containsKey(iS[4])) && (paramInt == ((Integer)ja.get(iS[4])).intValue())) {
      return 8;
    }
    if ((ja.containsKey(iS[5])) && (paramInt == ((Integer)ja.get(iS[5])).intValue())) {
      return 9;
    }
    if ((ja.containsKey(iS[6])) && (paramInt == ((Integer)ja.get(iS[6])).intValue())) {
      return 10;
    }
    if ((ja.containsKey(iS[7])) && (paramInt == ((Integer)ja.get(iS[7])).intValue())) {
      return 11;
    }
    if ((ja.containsKey(iS[12])) && (paramInt == ((Integer)ja.get(iS[12])).intValue())) {
      return 35;
    }
    if ((ja.containsKey(iS[11])) && (paramInt == ((Integer)ja.get(iS[11])).intValue())) {
      return 42;
    }
    if ((ja.containsKey("NUM_0")) && (paramInt == ((Integer)ja.get("NUM_0")).intValue())) {
      return 48;
    }
    if ((ja.containsKey("NUM_1")) && (paramInt == ((Integer)ja.get("NUM_1")).intValue())) {
      return 49;
    }
    if ((ja.containsKey("NUM_2")) && (paramInt == ((Integer)ja.get("NUM_2")).intValue())) {
      return 50;
    }
    if ((ja.containsKey("NUM_3")) && (paramInt == ((Integer)ja.get("NUM_3")).intValue())) {
      return 51;
    }
    if ((ja.containsKey("NUM_4")) && (paramInt == ((Integer)ja.get("NUM_4")).intValue())) {
      return 52;
    }
    if ((ja.containsKey("NUM_5")) && (paramInt == ((Integer)ja.get("NUM_5")).intValue())) {
      return 53;
    }
    if ((ja.containsKey("NUM_6")) && (paramInt == ((Integer)ja.get("NUM_6")).intValue())) {
      return 54;
    }
    if ((ja.containsKey("NUM_7")) && (paramInt == ((Integer)ja.get("NUM_7")).intValue())) {
      return 55;
    }
    if ((ja.containsKey("NUM_8")) && (paramInt == ((Integer)ja.get("NUM_8")).intValue())) {
      return 56;
    }
    if ((ja.containsKey("NUM_9")) && (paramInt == ((Integer)ja.get("NUM_9")).intValue())) {
      return 57;
    }
    return 0;
  }
  
  public static int B(int paramInt)
  {
    if (paramInt == 1) {
      return ((Integer)ja.get(iS[9])).intValue();
    }
    if (paramInt == 2) {
      return ((Integer)ja.get(iS[10])).intValue();
    }
    return 0;
  }
  
  private final int C(int paramInt)
  {
    int i = 1;
    if (paramInt == B(1))
    {
      i = 17;
      return i;
    }
    if (paramInt == B(2)) {
      return 18;
    }
    switch (A(paramInt))
    {
    case 49: 
    default: 
      return -1;
    case 1: 
      return 12;
    case 2: 
      return 13;
    case 5: 
      return 14;
    case 6: 
      return 15;
    case 8: 
      return 16;
    case 35: 
      return 11;
    case 42: 
      return 10;
    case 48: 
      return 0;
    case 50: 
      return 2;
    case 51: 
      return 3;
    case 52: 
      return 4;
    case 53: 
      return 5;
    case 54: 
      return 6;
    case 55: 
      return 7;
    case 56: 
      return 8;
    }
    return 9;
  }
  
  private boolean D(int paramInt)
  {
    return (1 << C(paramInt) & this.jn) != 0;
  }
  
  public static Matrix a(int paramInt, Matrix paramMatrix)
  {
    switch (paramInt)
    {
    default: 
      throw new IllegalArgumentException("Bad transform");
    case 5: 
      paramMatrix.preRotate(90.0F);
    case 0: 
      return paramMatrix;
    case 3: 
      paramMatrix.preRotate(180.0F);
      return paramMatrix;
    case 6: 
      paramMatrix.preRotate(270.0F);
      return paramMatrix;
    case 2: 
      paramMatrix.preScale(-1.0F, 1.0F);
      return paramMatrix;
    case 7: 
      paramMatrix.preScale(-1.0F, 1.0F);
      paramMatrix.preRotate(-90.0F);
      return paramMatrix;
    case 1: 
      paramMatrix.preScale(-1.0F, 1.0F);
      paramMatrix.preRotate(-180.0F);
      return paramMatrix;
    }
    paramMatrix.preScale(-1.0F, 1.0F);
    paramMatrix.preRotate(-270.0F);
    return paramMatrix;
  }
  
  private static c a(Bitmap paramBitmap)
  {
    return new c(new Canvas(paramBitmap));
  }
  
  private void a(Properties paramProperties)
  {
    int i;
    try
    {
      if (paramProperties.containsKey("screen.width"))
      {
        this.width = Integer.parseInt(paramProperties.getProperty("screen.width"));
        new StringBuilder("Set screen width ").append(this.width).toString();
      }
      if (paramProperties.containsKey("screen.height"))
      {
        this.height = Integer.parseInt(paramProperties.getProperty("screen.height"));
        new StringBuilder("Set screen height ").append(this.height).toString();
      }
      if (paramProperties.containsKey("font.size.large"))
      {
        b.SIZE_LARGE = Integer.parseInt(paramProperties.getProperty("font.size.large"));
        new StringBuilder("Set font.size.large ").append(b.SIZE_LARGE).toString();
      }
      if (paramProperties.containsKey("font.size.medium"))
      {
        b.SIZE_MEDIUM = Integer.parseInt(paramProperties.getProperty("font.size.medium"));
        new StringBuilder("Set font.size.medium ").append(b.SIZE_MEDIUM).toString();
      }
      if (!paramProperties.containsKey("font.size.small")) {
        break label549;
      }
      b.SIZE_SMALL = Integer.parseInt(paramProperties.getProperty("font.size.small"));
      new StringBuilder("Set font.size.small ").append(b.SIZE_SMALL).toString();
    }
    catch (Exception paramProperties)
    {
      int j;
      Log.w("MIDPDevice", "Device property exception. " + paramProperties);
      this.iU = b("hasRepeatEvents", false);
      this.iW = b("hasPointerMotionEvents", true);
      this.iX = b("isDoubleBuffered", true);
      this.iT = b("isPositiveUpdate", false);
      this.iY = b("enableMultiTouch", false);
      this.iZ = b("fixTouchPosition", false);
      return;
    }
    if (i < 10) {
      if (paramProperties.containsKey("key." + i))
      {
        j = Integer.parseInt(paramProperties.getProperty("key." + i).trim());
        ja.put("NUM_" + i, Integer.valueOf(j));
      }
    }
    for (;;)
    {
      if (i < iS.length)
      {
        if (paramProperties.containsKey("key." + iS[i]))
        {
          j = Integer.parseInt(paramProperties.getProperty("key." + iS[i]).trim());
          ja.put(iS[i], Integer.valueOf(j));
        }
      }
      else
      {
        Iterator localIterator = paramProperties.keySet().iterator();
        while (localIterator.hasNext())
        {
          Object localObject = localIterator.next();
          String str = paramProperties.getProperty((String)localObject);
          System.setProperty((String)localObject, str);
        }
        label549:
        i = 0;
        break;
        i += 1;
        break;
        i = 0;
        continue;
      }
      i += 1;
    }
  }
  
  private boolean b(String paramString, boolean paramBoolean)
  {
    new StringBuilder("Get device property:").append(paramString).toString();
    paramString = ji.getProperty(paramString);
    if (paramString == null) {
      return paramBoolean;
    }
    return Boolean.parseBoolean(paramString);
  }
  
  private final void l(int paramInt1, int paramInt2)
  {
    paramInt2 = C(paramInt2);
    if (paramInt2 != -1)
    {
      if (paramInt1 == 0) {
        this.jn = (1 << paramInt2 | this.jn);
      }
    }
    else {
      return;
    }
    this.jn = (1 << paramInt2 ^ this.jn);
  }
  
  private void lock()
  {
    try
    {
      wait(100L);
      return;
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;)
      {
        localInterruptedException = localInterruptedException;
      }
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private boolean m(int paramInt1, int paramInt2)
  {
    if (paramInt2 == 0) {
      return false;
    }
    switch (paramInt1)
    {
    default: 
      new StringBuilder("Unkown key event type:").append(paramInt1).append("[").append(paramInt2).append("]").toString();
      return false;
    case 0: 
      if (D(paramInt2)) {
        if (this.iU)
        {
          e.a(null).n(paramInt2);
          new StringBuilder("Dispatch key event type: REPEAT [").append(paramInt2).append("]").toString();
        }
      }
      for (;;)
      {
        l(paramInt1, paramInt2);
        return true;
        e.a(null).c(paramInt2);
        new StringBuilder("Dispatch key event type: DOWN [").append(paramInt2).append("]").toString();
      }
    }
    if (D(paramInt2))
    {
      e.a(null).d(paramInt2);
      new StringBuilder("Dispatch key event type: UP [").append(paramInt2).append("]").toString();
      l(paramInt1, paramInt2);
    }
    return true;
  }
  
  private void unlock()
  {
    try
    {
      notify();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public final void a(int paramInt1, float paramFloat1, float paramFloat2, int paramInt2)
  {
    if ((!this.iY) && (paramInt2 != 0)) {
      return;
    }
    h.b(h.a(44286, new int[] { paramInt1, (int)paramFloat1, (int)paramFloat2, paramInt2 }));
  }
  
  public final void a(AttributeSet paramAttributeSet, String paramString)
  {
    setTouchable(paramAttributeSet.getAttributeBooleanValue(paramString, "touchable", false));
    this.iV = isTouchable();
    e(paramAttributeSet.getAttributeBooleanValue(paramString, "filter", true));
    String str = paramAttributeSet.getAttributeValue(paramString, "origrect");
    if (str != null) {
      this.lo = b.I(str);
    }
    paramAttributeSet = paramAttributeSet.getAttributeValue(paramString, "rect");
    if (paramAttributeSet != null) {
      a(b.I(paramAttributeSet));
    }
  }
  
  public final void a(com.a.a.d.c paramC)
  {
    if (!m.iM)
    {
      if (!this.iX) {
        break label118;
      }
      this.jb = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.RGB_565);
      this.jc = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.RGB_565);
      this.jg = a(this.jb);
      this.jh = a(this.jc);
      this.jf = this.jg;
      this.jd = this.jc;
    }
    for (;;)
    {
      bE();
      if (this.iT) {
        m.bc();
      }
      e.a(null);
      e.j(getWidth(), getHeight());
      return;
      label118:
      this.jb = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.RGB_565);
      this.jc = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.RGB_565);
      this.jd = this.jc;
      this.je = new Canvas(this.jd);
      this.jf = a(this.jb);
    }
  }
  
  public final boolean a(final Message paramMessage)
  {
    int i = 0;
    if (paramMessage.what == 47872)
    {
      paramMessage = new HashMap();
      for (;;)
      {
        String str2;
        String str1;
        try
        {
          localObject1 = new BufferedReader(new InputStreamReader(k.getActivity().getAssets().open(b.F("META-INF" + File.separator + "MANIFEST.MF")), "UTF-8"));
          localObject2 = ((BufferedReader)localObject1).readLine();
          if (localObject2 == null) {
            break;
          }
          ((String)localObject2).trim();
          i = ((String)localObject2).indexOf(':');
          if (i < 0) {
            continue;
          }
          str2 = ((String)localObject2).substring(0, i).trim();
          str1 = ((String)localObject2).substring(i + 1).trim();
          if (!Pattern.compile("\\bMIDlet-\\d").matcher((CharSequence)localObject2).find()) {
            break label325;
          }
          i = str1.indexOf(',');
          j = str1.lastIndexOf(',');
          if ((i >= 0) && (j >= 0))
          {
            str2 = str1.substring(0, i).trim();
            str1.substring(i + 1, j).trim();
            paramMessage.put(str2, str1.substring(j + 1).trim());
            new StringBuilder("The midlet ").append((String)localObject2).append(" has added.").toString();
            continue;
          }
          Log.w("MIDPDevice", "The midlet " + str2 + ":" + str1 + " where p1=" + i + " p2=" + j);
        }
        catch (IOException paramMessage)
        {
          Log.w("MIDPDevice", "MANIFEST.MF may not exist or invalid.");
          k.a(k.getString(2131034120), 1);
          return true;
        }
        continue;
        label325:
        org.meteoroid.core.a.f(str2, str1);
      }
      if (paramMessage.isEmpty())
      {
        Log.w("MIDPDevice", "No midlets found in MANIFEST.MF.");
        k.a(k.getString(2131034120), 1);
        return true;
      }
      if (paramMessage.size() == 1)
      {
        org.meteoroid.core.a.p((String)paramMessage.values().toArray()[0]);
        return true;
      }
      Object localObject1 = new String[paramMessage.keySet().size()];
      paramMessage.keySet().toArray((Object[])localObject1);
      Object localObject2 = new AlertDialog.Builder(k.getActivity());
      ((AlertDialog.Builder)localObject2).setItems((CharSequence[])localObject1, new DialogInterface.OnClickListener()
      {
        public final void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          org.meteoroid.core.a.p((String)paramMessage.get(this.js[paramAnonymousInt]));
        }
      });
      ((AlertDialog.Builder)localObject2).setCancelable(false);
      k.getHandler().post(new Runnable()
      {
        public final void run()
        {
          this.iJ.create().show();
        }
      });
      return true;
    }
    if (paramMessage.what == 44036)
    {
      h.x(47875);
      return true;
    }
    if (paramMessage.what == -2023686143)
    {
      k.w((String)paramMessage.obj);
      h.c(-2023686142, Boolean.FALSE);
      return true;
    }
    boolean bool;
    switch (paramMessage.what)
    {
    default: 
      bool = false;
    case 44034: 
    case 44286: 
      for (;;)
      {
        return bool;
        paramMessage = (com.a.a.a.c)paramMessage.obj;
        e.a(null);
        e.b(paramMessage);
        return true;
        paramMessage = (int[])paramMessage.obj;
        new StringBuilder("action[").append(paramMessage[0]).append("]x:").append(paramMessage[1]).append(" y:").append(paramMessage[2]).toString();
        switch (paramMessage[0])
        {
        default: 
          return false;
        case 0: 
          if (this.iV)
          {
            e.a(null).g(paramMessage[1], paramMessage[2]);
            this.jj = paramMessage[1];
            this.jk = paramMessage[2];
          }
          bool = true;
          break;
        case 1: 
          if (this.iV) {
            e.a(null).h(paramMessage[1], paramMessage[2]);
          }
          bool = true;
        }
      }
      int k;
      if ((this.iV) && (this.iW))
      {
        k = paramMessage[1];
        j = paramMessage[2];
        if (this.iZ) {
          break label791;
        }
      }
      for (i = 1;; i = 1) {
        label791:
        do
        {
          if (i != 0) {
            e.a(null).i(paramMessage[1], paramMessage[2]);
          }
          bool = true;
          break;
          if (this.jl == 0) {
            this.jl = (getWidth() / 60);
          }
          if (this.jm == 0) {
            this.jm = (getHeight() / 60);
          }
        } while ((Math.abs(k - this.jj) < this.jl) && (Math.abs(j - this.jk) < this.jm));
      }
    }
    int j = ((VirtualKey)paramMessage.obj).bu();
    paramMessage = ((VirtualKey)paramMessage.obj).bG();
    if (ja.containsKey(paramMessage)) {}
    for (i = ((Integer)ja.get(paramMessage)).intValue();; i = 65535) {
      return m(j, i);
    }
  }
  
  public final boolean a(KeyEvent paramKeyEvent)
  {
    new StringBuilder("Native key event:").append(paramKeyEvent.getCharacters()).append("[").append(paramKeyEvent.getKeyCode()).append("]").toString();
    int j = paramKeyEvent.getAction();
    int i;
    switch (paramKeyEvent.getKeyCode())
    {
    default: 
      i = 0;
    }
    for (;;)
    {
      m(j, i);
      return false;
      i = ((Integer)ja.get(iS[4])).intValue();
      continue;
      i = ((Integer)ja.get(iS[0])).intValue();
      continue;
      i = ((Integer)ja.get(iS[1])).intValue();
      continue;
      i = ((Integer)ja.get(iS[2])).intValue();
      continue;
      i = ((Integer)ja.get(iS[3])).intValue();
      continue;
      i = ((Integer)ja.get(iS[9])).intValue();
      continue;
      i = ((Integer)ja.get("NUM_0")).intValue();
      continue;
      i = ((Integer)ja.get("NUM_1")).intValue();
      continue;
      i = ((Integer)ja.get("NUM_2")).intValue();
      continue;
      i = ((Integer)ja.get("NUM_3")).intValue();
      continue;
      i = ((Integer)ja.get("NUM_4")).intValue();
      continue;
      i = ((Integer)ja.get("NUM_5")).intValue();
      continue;
      if ((k.aP() != null) && (k.aP().startsWith("R800")))
      {
        i = ((Integer)ja.get("NUM_5")).intValue();
        continue;
        i = ((Integer)ja.get("NUM_6")).intValue();
        continue;
        i = ((Integer)ja.get("NUM_7")).intValue();
        continue;
        i = ((Integer)ja.get("NUM_8")).intValue();
        continue;
        i = ((Integer)ja.get("NUM_9")).intValue();
        continue;
        i = ((Integer)ja.get(iS[11])).intValue();
        continue;
        i = ((Integer)ja.get(iS[12])).intValue();
        continue;
        i = B(2);
        continue;
        i = B(1);
      }
      else
      {
        i = 0;
      }
    }
  }
  
  public final i bg()
  {
    return this.jf;
  }
  
  public final void bh()
  {
    if (this.iX) {
      if (this.jd == this.jb)
      {
        this.jd = this.jc;
        this.jf = this.jg;
      }
    }
    for (;;)
    {
      if (this.jf != null) {
        this.jf.V();
      }
      if (!this.iT) {
        break;
      }
      unlock();
      return;
      this.jd = this.jb;
      this.jf = this.jh;
      continue;
      if ((this.jb != null) && (!this.jb.isRecycled())) {
        this.je.drawBitmap(this.jb, 0.0F, 0.0F, null);
      }
    }
    m.bd();
  }
  
  public final Bitmap bi()
  {
    return this.jd;
  }
  
  public final int getHeight()
  {
    if (this.height == -1) {
      return bD().height();
    }
    return this.height;
  }
  
  public final int getWidth()
  {
    if (this.width == -1) {
      return bD().width();
    }
    return this.width;
  }
  
  public final void onCreate()
  {
    h.b(44286, "MSG_DEVICE_TOUCH_EVENT");
    h.b(44034, "MSG_MIDP_COMMAND_EVENT");
    h.b(44035, "MSG_MIDP_DISPLAY_CALL_SERIALLY");
    h.b(44287, "MSG_DEVICE_REQUEST_REFRESH");
    h.a(this);
    ji.clear();
    try
    {
      InputStream localInputStream = k.getActivity().getResources().openRawResource(b.H("device"));
      ji.load(localInputStream);
      a(ji);
      f.a(this);
      f.a(this);
      System.gc();
      return;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        Log.e("MIDPDevice", "device.properties not exist or valid." + localIOException);
      }
    }
  }
  
  public final void onDestroy()
  {
    if (this.jb != null) {
      this.jb.recycle();
    }
    this.jb = null;
    if (this.jc != null) {
      this.jc.recycle();
    }
    this.jc = null;
    if (this.jd != null) {
      this.jd.recycle();
    }
    this.jd = null;
    this.jf = null;
    boolean bool = this.jp;
  }
  
  public final void onDraw(Canvas paramCanvas)
  {
    if ((this.jd != null) && (!this.jd.isRecycled())) {
      paramCanvas.drawBitmap(this.jd, this.lo, bD(), this.ln);
    }
    if (this.iT) {
      lock();
    }
  }
  
  public final void setVisible(boolean paramBoolean) {}
  
  public static final class a
  {
    public final Paint fy = new Paint(1);
    public Paint.FontMetricsInt ju;
    private final char[] jv = new char[1];
    
    public a(Typeface paramTypeface, int paramInt, boolean paramBoolean)
    {
      this.fy.setTypeface(paramTypeface);
      this.fy.setTextSize(paramInt);
      this.fy.setUnderlineText(paramBoolean);
      this.ju = this.fy.getFontMetricsInt();
    }
  }
  
  public static final class b
  {
    public static int SIZE_LARGE = 16;
    public static int SIZE_MEDIUM;
    public static int SIZE_SMALL = 12;
    private static final HashMap<com.a.a.a.g, MIDPDevice.a> jw = new HashMap();
    
    static
    {
      SIZE_MEDIUM = 14;
    }
    
    public static int a(com.a.a.a.g paramG, String paramString)
    {
      return (int)b(paramG).fy.measureText(paramString);
    }
    
    public static MIDPDevice.a b(com.a.a.a.g paramG)
    {
      boolean bool = true;
      int k = 0;
      MIDPDevice.a localA = (MIDPDevice.a)jw.get(paramG);
      Object localObject = localA;
      if (localA == null)
      {
        localObject = Typeface.SANS_SERIF;
        if (paramG.O() != 0) {
          break label131;
        }
        localObject = Typeface.SANS_SERIF;
        if (((paramG.getStyle() & 0x0) != 0) && ((paramG.getStyle() & 0x1) == 0)) {
          break label203;
        }
      }
      label131:
      label203:
      for (int i = 1;; i = 0)
      {
        int j = i;
        if ((paramG.getStyle() & 0x2) != 0) {
          j = i | 0x2;
        }
        if ((paramG.getStyle() & 0x4) != 0) {}
        for (;;)
        {
          if (paramG.getSize() == 8) {
            i = SIZE_SMALL;
          }
          for (;;)
          {
            localObject = new MIDPDevice.a(Typeface.create((Typeface)localObject, j), i, bool);
            jw.put(paramG, localObject);
            return localObject;
            if (paramG.O() == 32)
            {
              localObject = Typeface.MONOSPACE;
              break;
            }
            if (paramG.O() != 64) {
              break;
            }
            localObject = Typeface.SANS_SERIF;
            break;
            if (paramG.getSize() == 0)
            {
              i = SIZE_MEDIUM;
            }
            else
            {
              i = k;
              if (paramG.getSize() == 16) {
                i = SIZE_LARGE;
              }
            }
          }
          bool = false;
        }
      }
    }
    
    public static int c(com.a.a.a.g paramG)
    {
      paramG = b(paramG);
      return paramG.fy.getFontMetricsInt(paramG.ju);
    }
  }
  
  public static final class c
    extends i
  {
    private static final DashPathEffect jA = new DashPathEffect(new float[] { 5.0F, 5.0F }, 0.0F);
    private Canvas jB;
    private com.a.a.a.g jC;
    private int jD = 0;
    private Matrix jE = new Matrix();
    private Bitmap jF;
    private int jG = 0;
    private int jH = 0;
    private int jI = 0;
    private int jJ = 0;
    private Paint jx = new Paint();
    private Paint jy = new Paint();
    private MIDPDevice.a jz;
    
    private c()
    {
      this.jx.setAntiAlias(true);
      this.jx.setStyle(Paint.Style.STROKE);
      this.jy.setAntiAlias(true);
      this.jy.setStyle(Paint.Style.FILL);
    }
    
    public c(Canvas paramCanvas)
    {
      this();
      a(paramCanvas);
    }
    
    private void a(Canvas paramCanvas)
    {
      this.jB = paramCanvas;
      a(com.a.a.a.g.N());
      translate(-T(), -U());
      setColor(0);
      if (this.jF != null)
      {
        f(0, 0, this.jF.getWidth(), this.jF.getHeight());
        return;
      }
      f(0, 0, org.meteoroid.core.c.hv.getWidth(), org.meteoroid.core.c.hv.getHeight());
    }
    
    public final int P()
    {
      return this.jJ;
    }
    
    public final int Q()
    {
      return this.jI;
    }
    
    public final int R()
    {
      return this.jG;
    }
    
    public final int S()
    {
      return this.jH;
    }
    
    public final void V()
    {
      a(this.jB);
    }
    
    public final void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
    {
      if ((this.jI <= 0) || (this.jJ <= 0) || (paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      RectF localRectF = new RectF(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4);
      this.jB.drawArc(localRectF, paramInt5, paramInt6, true, this.jx);
    }
    
    public final void a(com.a.a.a.g paramG)
    {
      com.a.a.a.g localG = paramG;
      if (paramG == null) {
        localG = com.a.a.a.g.N();
      }
      this.jC = localG;
      this.jz = MIDPDevice.b.b(localG);
    }
    
    public final void a(j paramJ, int paramInt1, int paramInt2, int paramInt3)
    {
      if ((paramJ == null) || (this.jI <= 0) || (this.jJ <= 0) || (paramJ.bitmap == null)) {
        return;
      }
      int i = paramInt3;
      if (paramInt3 == 0) {
        i = 20;
      }
      if ((i & 0x8) != 0)
      {
        paramInt3 = paramInt1 - paramJ.width;
        if ((i & 0x20) == 0) {
          break label111;
        }
        paramInt1 = paramInt2 - paramJ.height;
      }
      for (;;)
      {
        this.jB.drawBitmap(paramJ.bitmap, paramInt3, paramInt1, null);
        return;
        paramInt3 = paramInt1;
        if ((i & 0x1) == 0) {
          break;
        }
        paramInt3 = paramInt1 - paramJ.width / 2;
        break;
        label111:
        paramInt1 = paramInt2;
        if ((i & 0x2) != 0) {
          paramInt1 = paramInt2 - paramJ.height / 2;
        }
      }
    }
    
    public final void a(String paramString, int paramInt1, int paramInt2, int paramInt3)
    {
      if ((this.jI <= 0) || (this.jJ <= 0)) {
        return;
      }
      int i = paramInt3;
      if (paramInt3 == 0) {
        i = 20;
      }
      if ((i & 0x10) != 0)
      {
        paramInt3 = paramInt2 - this.jz.ju.top;
        if ((i & 0x1) == 0) {
          break label184;
        }
        this.jz.fy.setTextAlign(Paint.Align.CENTER);
      }
      for (;;)
      {
        this.jz.fy.setColor(this.jx.getColor());
        this.jB.drawText(paramString, paramInt1, paramInt3, this.jz.fy);
        return;
        if ((i & 0x20) != 0)
        {
          paramInt3 = paramInt2 - this.jz.ju.bottom;
          break;
        }
        paramInt3 = paramInt2;
        if ((i & 0x2) == 0) {
          break;
        }
        paramInt3 = paramInt2 + ((this.jz.ju.descent - this.jz.ju.ascent) / 2 - this.jz.ju.descent);
        break;
        label184:
        if ((i & 0x8) != 0) {
          this.jz.fy.setTextAlign(Paint.Align.RIGHT);
        } else if ((i & 0x4) != 0) {
          this.jz.fy.setTextAlign(Paint.Align.LEFT);
        }
      }
    }
    
    public final void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      int i;
      if (paramInt3 >= 0)
      {
        i = paramInt3;
        paramInt3 = paramInt4;
        if (paramInt4 >= 0) {}
      }
      else
      {
        paramInt3 = 0;
        i = 0;
      }
      this.jB.clipRect(paramInt1, paramInt2, paramInt1 + i, paramInt2 + paramInt3, Region.Op.INTERSECT);
      Rect localRect = this.jB.getClipBounds();
      this.jG = localRect.left;
      this.jH = localRect.top;
      this.jI = localRect.width();
      this.jJ = localRect.height();
    }
    
    public final void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
    {
      if ((this.jI <= 0) || (this.jJ <= 0) || (paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      RectF localRectF = new RectF(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4);
      this.jB.drawRoundRect(localRectF, paramInt5, paramInt6, this.jx);
    }
    
    public final void c(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      if ((this.jI <= 0) || (this.jJ <= 0)) {
        return;
      }
      if (paramInt1 > paramInt3)
      {
        paramInt1 += 1;
        if (paramInt2 <= paramInt4) {
          break label62;
        }
        paramInt2 += 1;
      }
      for (;;)
      {
        this.jB.drawLine(paramInt1, paramInt2, paramInt3, paramInt4, this.jx);
        return;
        paramInt3 += 1;
        break;
        label62:
        paramInt4 += 1;
      }
    }
    
    public final void c(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
    {
      if ((this.jI <= 0) || (this.jJ <= 0) || (paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      RectF localRectF = new RectF(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4);
      this.jB.drawArc(localRectF, paramInt5, paramInt6, true, this.jy);
    }
    
    public final void d(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      if ((this.jI <= 0) || (this.jJ <= 0) || (paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      this.jB.drawRect(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4, this.jx);
    }
    
    public final void d(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
    {
      if ((this.jI <= 0) || (this.jJ <= 0) || (paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      RectF localRectF = new RectF(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4);
      this.jB.drawRoundRect(localRectF, paramInt5, paramInt6, this.jy);
    }
    
    public final void e(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      if ((this.jI <= 0) || (this.jJ <= 0) || (paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      this.jB.drawRect(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4, this.jy);
    }
    
    public final void f(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      this.jG = paramInt1;
      this.jH = paramInt2;
      this.jI = paramInt3;
      this.jJ = paramInt4;
      if ((paramInt3 <= 0) || (paramInt4 <= 0)) {
        return;
      }
      this.jB.clipRect(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4, Region.Op.REPLACE);
    }
    
    public final void setColor(int paramInt)
    {
      this.jx.setColor(0xFF000000 | paramInt);
      this.jy.setColor(0xFF000000 | paramInt);
      super.setColor(paramInt);
    }
    
    public final void translate(int paramInt1, int paramInt2)
    {
      if ((paramInt1 == 0) && (paramInt2 == 0)) {
        return;
      }
      super.translate(paramInt1, paramInt2);
      this.jB.translate(paramInt1, paramInt2);
      f(this.jG - paramInt1, this.jH - paramInt2, this.jI, this.jJ);
    }
  }
  
  public static final class d
    implements MediaPlayer.OnCompletionListener, MediaPlayer.OnPreparedListener, Player
  {
    private static final String LOG_TAG = "MIDP player";
    private g.a jK;
    private HashSet<PlayerListener> jL;
    private int jM = 1;
    private int jN;
    private int state = 100;
    
    public d(g.a paramA)
    {
      this.jK = paramA;
      paramA.ib = org.meteoroid.core.g.ay();
      paramA.ic.setOnCompletionListener(this);
      paramA.ic.setOnPreparedListener(this);
      this.jL = new HashSet();
    }
    
    private final void a(String paramString, Object paramObject)
    {
      paramString = this.jL.iterator();
      while (paramString.hasNext())
      {
        paramObject = (PlayerListener)paramString.next();
        if (paramObject != null) {
          paramObject.Z();
        }
      }
    }
    
    public final void X()
    {
      try
      {
        if (this.state == 100)
        {
          this.jK.ic.reset();
          this.jK.ic.setDataSource(this.jK.hZ);
          this.state = 200;
        }
        return;
      }
      catch (Exception localException)
      {
        Log.w("MIDP player", localException);
        throw new MediaException();
      }
    }
    
    public final void Y()
    {
      X();
      if (this.state == 200) {}
      try
      {
        this.jK.ic.prepare();
        this.state = 300;
        return;
      }
      catch (Exception localException)
      {
        a("error", localException.getMessage());
        throw new MediaException();
      }
    }
    
    public final void onCompletion(MediaPlayer paramMediaPlayer)
    {
      new StringBuilder("playedCount:").append(this.jN).append(" loopCount:").append(this.jM).toString();
      if (paramMediaPlayer == this.jK.ic)
      {
        this.jN += 1;
        if (this.jN < this.jM) {
          break label93;
        }
        if (!this.jL.isEmpty()) {}
      }
      else
      {
        try
        {
          stop();
          return;
        }
        catch (MediaException paramMediaPlayer)
        {
          paramMediaPlayer.printStackTrace();
          return;
        }
      }
      a("endOfMedia", null);
      return;
      try
      {
        label93:
        this.state = 100;
        start();
        return;
      }
      catch (MediaException paramMediaPlayer)
      {
        paramMediaPlayer.printStackTrace();
      }
    }
    
    public final void onPrepared(MediaPlayer paramMediaPlayer)
    {
      new StringBuilder("onPrepared:").append(this.jN).append(" loopCount:").append(this.jM).toString();
    }
    
    public final void p(int paramInt)
    {
      new StringBuilder("setLoopCount ").append(-1).append(".").toString();
      this.jM = -1;
    }
    
    public final void start()
    {
      X();
      Y();
      if (this.state == 300) {
        try
        {
          if (this.jM == -1) {
            this.jK.ic.setLooping(true);
          }
          for (;;)
          {
            this.jK.ic.start();
            this.jK.ia = true;
            this.state = 400;
            a("started", null);
            return;
            this.jK.ic.setLooping(false);
          }
          return;
        }
        catch (Exception localException)
        {
          a("error", localException.getMessage());
          throw new MediaException();
        }
      }
    }
    
    public final void stop()
    {
      if (this.state == 400) {}
      try
      {
        if (this.jK.ic.isPlaying()) {
          this.jK.ic.stop();
        }
        this.jK.ia = false;
        this.jN = 0;
        return;
      }
      catch (Exception localException)
      {
        a("error", localException.getMessage());
        localException.printStackTrace();
        throw new MediaException();
      }
      finally
      {
        this.state = 300;
        a("stopped", null);
      }
    }
  }
}
