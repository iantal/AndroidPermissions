package org.meteoroid.plugin.vd;

import android.app.Activity;
import android.content.res.Resources;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.a.a.d.c.a;
import com.a.a.e.b;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Properties;
import org.meteoroid.core.e;
import org.meteoroid.core.e.a;
import org.meteoroid.core.f;
import org.meteoroid.core.f.b;
import org.meteoroid.core.h;
import org.meteoroid.core.k;

public class DefaultVirtualDevice
  implements com.a.a.d.c
{
  public static final int WIDGET_TYPE_ARCADE_JOYSTICK = 11;
  public static final int WIDGET_TYPE_BACKGROUND = 0;
  public static final int WIDGET_TYPE_CALL_OPTIONMENU = 12;
  public static final int WIDGET_TYPE_CHECKIN = 13;
  public static final int WIDGET_TYPE_DEVICE_SCREEN = 2;
  public static final int WIDGET_TYPE_DYNAMICJOYSTICK = 15;
  public static final int WIDGET_TYPE_EXIT_BUTTON = 6;
  public static final int WIDGET_TYPE_HIDE_VD = 10;
  public static final int WIDGET_TYPE_INTELEGENCE_BG = 7;
  public static final int WIDGET_TYPE_JOYSTICK = 3;
  public static final int WIDGET_TYPE_MUTE_SWITCHER = 4;
  public static final int WIDGET_TYPE_SENSOR_SWITCHER = 5;
  public static final int WIDGET_TYPE_SNSBUTTON = 14;
  public static final int WIDGET_TYPE_STEERINGWHEEL = 9;
  public static final int WIDGET_TYPE_URL_BUTTON = 8;
  public static final int WIDGET_TYPE_VIRTUAL_BUTTON = 1;
  public static final String[] ld = { "Background", "VirtualKey", "ScreenWidget", "Joystick", "MuteSwitcher", "SensorSwitcher", "CommandButton", "IntellegenceBackground", "URLButton", "SteeringWheel", "HideVirtualDeviceSwitcher", "ArcadeJoyStick", "CallOptionMenu", "CheckinButton", "SNSButton", "DynamicJoystick" };
  private final LinkedHashSet<c.a> lb = new LinkedHashSet();
  private ScreenWidget lc;
  private int le;
  
  public DefaultVirtualDevice() {}
  
  private void a(Properties paramProperties)
  {
    Object localObject1;
    a localA;
    int i;
    if (paramProperties.containsKey("widget.orientation"))
    {
      localObject1 = paramProperties.getProperty("widget.orientation");
      this.le = 2;
      if (((String)localObject1).equals("landscape"))
      {
        this.le = 0;
        k.z(this.le);
      }
    }
    else
    {
      if (!paramProperties.containsKey("widget.num")) {
        break label544;
      }
      int j = Integer.parseInt(paramProperties.getProperty("widget.num"));
      localA = new a(paramProperties);
      i = 1;
      label75:
      if (i > j) {
        break label544;
      }
    }
    for (;;)
    {
      try
      {
        if (!paramProperties.containsKey("widget." + i + ".type")) {
          continue;
        }
        localObject1 = paramProperties.getProperty("widget." + i + ".type");
      }
      catch (Exception localException1)
      {
        int k;
        Object localObject2;
        ScreenWidget localScreenWidget;
        Log.w("VirtualDevice", "Init widget[" + i + "] error." + localException1);
        localException1.printStackTrace();
        continue;
      }
      try
      {
        k = Integer.parseInt((String)localObject1);
        if ((k < 0) || (k >= ld.length)) {
          continue;
        }
        localObject2 = ld[k];
        localObject1 = localObject2;
      }
      catch (Exception localException2)
      {
        continue;
        new StringBuilder("Construct a [").append((String)localObject1).append("] widget.").toString();
        localObject1 = (c.a)Class.forName("org.meteoroid.plugin.vd." + (String)localObject1).newInstance();
      }
    }
    if (((String)localObject1).equals(ld[2]))
    {
      localObject1 = (ScreenWidget)org.meteoroid.core.c.hv;
      ((c.a)localObject1).a(localA, "widget." + i + ".");
      if (!this.lb.contains(localObject1))
      {
        ((c.a)localObject1).a(this);
        if ((localObject1 instanceof ScreenWidget))
        {
          localObject2 = (ScreenWidget)localObject1;
          ((ScreenWidget)localObject2).bE();
          if (this.lc != null)
          {
            localScreenWidget = this.lc;
            this.lb.remove(localScreenWidget);
            e.b(localScreenWidget);
            f.b(localScreenWidget);
          }
          this.lc = ((ScreenWidget)localObject2);
        }
        this.lb.add(localObject1);
        if (((c.a)localObject1).bf()) {
          e.a((e.a)localObject1);
        }
        if (((c.a)localObject1).isTouchable()) {
          f.a((f.b)localObject1);
        }
      }
    }
    for (;;)
    {
      i += 1;
      break label75;
      if (((String)localObject1).equals("portrait"))
      {
        this.le = 1;
        break;
      }
      if (((String)localObject1).equals("auto"))
      {
        this.le = 4;
        break;
      }
      Log.w("VirtualDevice", "Orientation not specificed. It will be decided by user. ");
      break;
      Log.w("VirtualDevice", "Unknown widget type:" + k);
      continue;
      new StringBuilder("Widget ").append(i).append(" not exist! Checkout it is not missing.").toString();
    }
    label544:
    paramProperties.clear();
    System.gc();
  }
  
  private static String bC()
  {
    Display localDisplay = k.getActivity().getWindowManager().getDefaultDisplay();
    int j = localDisplay.getWidth();
    int k = localDisplay.getHeight();
    int i = Math.min(j, k);
    j = Math.max(j, k);
    new StringBuilder("Screen full width is ").append(i).append("px and height is ").append(j).append("px.").toString();
    if ((i == 480) && (j == 854)) {
      return "fwvga";
    }
    if ((i == 480) && (j == 960)) {
      return "uwvga";
    }
    if ((i == 800) && (j == 960)) {
      return "dualwvga";
    }
    if ((i == 480) && (j == 800)) {
      return "wvga";
    }
    if ((i == 360) && (j == 640)) {
      return "nhd";
    }
    if ((i == 320) && (j >= 460) && (j <= 500)) {
      return "hvga";
    }
    if ((i == 240) && (j == 320)) {
      return "qvga";
    }
    if ((i == 240) && (j <= 400) && (j > 320)) {
      return "wqvga";
    }
    if ((i == 480) && (j == 640)) {
      return "vga";
    }
    if ((i == 600) && (j == 800)) {
      return "svga";
    }
    if ((i <= 600) && (i > 540) && (j <= 1024) && (j > 960)) {
      return "wsvga";
    }
    if ((i <= 768) && (i > 700) && (j == 1024)) {
      return "xga";
    }
    if ((i == 640) && (j == 960)) {
      return "retina";
    }
    if ((i == 540) && (j == 960)) {
      return "qhd";
    }
    if ((i <= 800) && (i > 720) && (j <= 1280) && (j >= 1100)) {
      return "wxga";
    }
    if ((i <= 720) && (i > 640) && (j <= 1280) && (j >= 1100)) {
      return "720hd";
    }
    if ((i <= 768) && (i >= 640) && (j == 1366)) {
      return "hd";
    }
    if ((i <= 1080) && (i >= 900) && (j == 1920)) {
      return "1080hd";
    }
    Log.w("VirtualDevice", "Unkown screen resolution:" + i + "x" + j);
    return null;
  }
  
  public final void A(String paramString)
  {
    onDestroy();
    b.bH();
    if (paramString == null)
    {
      onCreate();
      return;
    }
    Properties localProperties = new Properties();
    try
    {
      localProperties.load(k.v(paramString + File.separator + "res" + File.separator + "raw" + File.separator + "vd_" + bC() + ".properties"));
      b.E(paramString + File.separator + "res" + File.separator + "drawable-nodpi");
      a(localProperties);
      b.E(null);
      return;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        Log.e("VirtualDevice", "Error in reloading vd:" + paramString);
      }
    }
  }
  
  public final LinkedHashSet<c.a> bA()
  {
    return this.lb;
  }
  
  public final ScreenWidget bB()
  {
    return this.lc;
  }
  
  public final int getOrientation()
  {
    return this.le;
  }
  
  public final void onCreate()
  {
    h.b(7833601, "MSG_VIRTUAL_BUTTON_EVENT");
    try
    {
      Properties localProperties = new Properties();
      localProperties.load(k.getActivity().getResources().openRawResource(b.H("vd_" + bC())));
      a(localProperties);
      return;
    }
    catch (IOException localIOException)
    {
      Log.e("VirtualDevice", "Oooooooops, Fail to load virtual device by resolution. Maybe the resolution is odd or missing." + localIOException);
    }
  }
  
  public final void onDestroy()
  {
    Iterator localIterator = this.lb.iterator();
    while (localIterator.hasNext())
    {
      c.a localA = (c.a)localIterator.next();
      e.b(localA);
      f.b(localA);
    }
    this.lb.clear();
  }
}
