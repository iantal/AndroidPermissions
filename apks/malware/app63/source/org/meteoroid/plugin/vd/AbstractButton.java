package org.meteoroid.plugin.vd;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.util.AttributeSet;
import com.a.a.d.c;
import com.a.a.d.c.a;
import com.a.a.e.b;

public abstract class AbstractButton
  implements c.a
{
  public static final int PRESSED = 0;
  public static final int RELEASED = 1;
  public static final int UNAVAILABLE_POINTER_ID = -1;
  private int count;
  int delay;
  Paint fy = new Paint();
  private c iK;
  int id = -1;
  Rect kL;
  Rect kM;
  Bitmap[] kN;
  boolean kO;
  int kP;
  int kQ;
  boolean kR = true;
  private int kS;
  boolean kT = true;
  int kr;
  int state = 1;
  
  public AbstractButton() {}
  
  public void a(AttributeSet paramAttributeSet, String paramString)
  {
    this.kN = b.K(paramAttributeSet.getAttributeValue(paramString, "bitmap"));
    Object localObject = paramAttributeSet.getAttributeValue(paramString, "touch");
    if (localObject != null) {
      this.kL = b.I((String)localObject);
    }
    localObject = paramAttributeSet.getAttributeValue(paramString, "rect");
    if (localObject != null) {
      this.kM = b.I((String)localObject);
    }
    localObject = paramAttributeSet.getAttributeValue(paramString, "fade");
    if (localObject != null)
    {
      localObject = ((String)localObject).split(",");
      if (localObject.length <= 0) {
        break label149;
      }
    }
    label149:
    for (this.kP = Integer.parseInt(localObject[0]);; this.kP = -1)
    {
      if (localObject.length >= 2) {
        this.delay = Integer.parseInt(localObject[1]);
      }
      if ((this.kN != null) && (this.kN.length > 2))
      {
        this.kO = true;
        this.kr = paramAttributeSet.getAttributeIntValue(paramString, "interval", 40);
      }
      return;
    }
  }
  
  public void a(c paramC)
  {
    this.iK = paramC;
    if (this.kL == null) {
      this.kL = this.kM;
    }
  }
  
  public final boolean a(Bitmap[] paramArrayOfBitmap)
  {
    return (paramArrayOfBitmap != null) && (this.state >= 0) && (this.state <= paramArrayOfBitmap.length - 1) && (paramArrayOfBitmap[this.state] != null);
  }
  
  public boolean bf()
  {
    return this.kN != null;
  }
  
  public final int bu()
  {
    return this.state;
  }
  
  public final boolean g(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    return h(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public abstract boolean h(int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  
  public final boolean isTouchable()
  {
    return true;
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    Bitmap localBitmap;
    Rect localRect;
    if (this.kO)
    {
      this.count += 1;
      if (this.count >= this.kr)
      {
        this.count = 0;
        this.kS += 1;
        if ((this.kN != null) && (this.kS >= this.kN.length)) {
          this.kS = 0;
        }
      }
      if (a(this.kN))
      {
        localBitmap = this.kN[this.kS];
        localRect = this.kM;
        if ((this.kP == -1) || (this.state != 1)) {
          break label248;
        }
      }
    }
    label248:
    for (Paint localPaint = this.fy;; localPaint = null)
    {
      paramCanvas.drawBitmap(localBitmap, null, localRect, localPaint);
      do
      {
        return;
        if (this.delay > 0)
        {
          this.delay -= 1;
          return;
        }
        if (this.state == 0)
        {
          this.kQ = 0;
          this.kT = true;
        }
      } while (!this.kT);
      if ((this.kP > 0) && (this.state == 1))
      {
        this.kQ += 1;
        this.fy.setAlpha(255 - this.kQ * 255 / this.kP);
        if (this.kQ >= this.kP)
        {
          this.kQ = 0;
          this.kT = false;
        }
      }
      this.kS = this.state;
      break;
    }
  }
  
  public void setVisible(boolean paramBoolean)
  {
    this.kT = paramBoolean;
  }
}
