package org.meteoroid.plugin.feature;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Message;
import android.util.Log;
import com.a.a.e.a;
import com.a.a.e.b;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import org.meteoroid.core.h;
import org.meteoroid.core.h.a;
import org.meteoroid.core.j;
import org.meteoroid.core.j.a;
import org.meteoroid.core.k;
import org.meteoroid.core.l;

public abstract class AbstractDownloadAndInstall
  extends BroadcastReceiver
  implements h.a, AbstractPaymentManager.Payment
{
  public static final int INSTALL_FAIL = 3;
  public static final int INSTALL_NOT_START = 0;
  public static final int INSTALL_RUNNING = 1;
  public static final int INSTALL_SUCCESS = 2;
  private static final String fileName = "target.apk";
  private a[] jO;
  private ArrayList<a> jP;
  private a jQ;
  private boolean jR;
  private int jS = 0;
  private boolean jT;
  public a jU;
  public boolean jV;
  private String jW;
  private String jX;
  
  public AbstractDownloadAndInstall() {}
  
  private void b(Exception paramException)
  {
    this.jS = 3;
    int i = this.jS;
    if (paramException != null) {
      Log.w(getName(), "Invalid package:" + this.jQ.packageName + paramException);
    }
    if (!this.jV) {
      h.b(h.a(61699, this));
    }
  }
  
  private static void c(InputStream paramInputStream)
  {
    FileOutputStream localFileOutputStream = k.getActivity().openFileOutput("target.apk", 1);
    byte[] arrayOfByte = new byte[102400];
    for (;;)
    {
      int i = paramInputStream.read(arrayOfByte);
      if (i == -1) {
        break;
      }
      localFileOutputStream.write(arrayOfByte, 0, i);
    }
    localFileOutputStream.flush();
    localFileOutputStream.close();
  }
  
  private void installApk()
  {
    if (this.jX == null)
    {
      this.jW = (k.getActivity().getFilesDir().getAbsolutePath() + File.separator);
      this.jX = (this.jW + "target.apk");
    }
    Intent localIntent = new Intent("android.intent.action.VIEW");
    localIntent.setDataAndType(Uri.fromFile(new File(this.jX)), "application/vnd.android.package-archive");
    k.getActivity().startActivity(localIntent);
  }
  
  public final void B(String paramString)
  {
    int j = 0;
    this.jP = new ArrayList();
    this.jW = (k.getActivity().getFilesDir().getAbsolutePath() + File.separator);
    this.jX = (this.jW + "target.apk");
    this.jU = new a(paramString);
    paramString = this.jU.D("DOWNLOAD");
    if (paramString != null)
    {
      paramString = paramString.split("\\;");
      this.jO = new a[paramString.length];
      i = 0;
      while (i < paramString.length)
      {
        this.jO[i] = new a();
        this.jO[i].jY = paramString[i];
        getName();
        new StringBuilder("app[").append(i).append("] target is ").append(this.jO[i].jY).toString();
        i += 1;
      }
    }
    Log.e(getName(), "No app target url !!!!!!!");
    paramString = this.jU.D("PACKAGE");
    if (paramString != null)
    {
      paramString = paramString.split("\\;");
      i = 0;
      while (i < paramString.length)
      {
        this.jO[i].packageName = paramString[i];
        this.jO[i].jZ = j.y(0).getSharedPreferences().getBoolean(this.jO[i].packageName, false);
        getName();
        new StringBuilder("app[").append(i).append("] packageName is ").append(this.jO[i].packageName).append(" and install state is ").append(this.jO[i].jZ).toString();
        i += 1;
      }
    }
    paramString = this.jU.D("IMAGE");
    if (paramString != null)
    {
      paramString = paramString.split("\\;");
      i = 0;
      while (i < paramString.length)
      {
        this.jO[i].ka = paramString[i];
        getName();
        new StringBuilder("app[").append(i).append("] image is ").append(this.jO[i].ka).toString();
        i += 1;
      }
    }
    paramString = this.jU.D("THUMB");
    if (paramString != null)
    {
      paramString = paramString.split("\\;");
      i = 0;
      while (i < paramString.length)
      {
        this.jO[i].kb = paramString[i];
        getName();
        new StringBuilder("app[").append(i).append("] thumb is ").append(this.jO[i].kb).toString();
        i += 1;
      }
    }
    paramString = this.jU.D("FORCELAUNCH");
    if (paramString != null) {
      this.jR = Boolean.parseBoolean(paramString);
    }
    paramString = this.jU.D("SKIPCHECK");
    int i = j;
    if (paramString != null)
    {
      this.jT = Boolean.parseBoolean(paramString);
      i = j;
    }
    while (i < this.jO.length)
    {
      if (!this.jO[i].jZ) {
        this.jP.add(this.jO[i]);
      }
      i += 1;
    }
    h.a(this);
    paramString = new IntentFilter("android.intent.action.PACKAGE_ADDED");
    paramString.addAction("android.intent.action.PACKAGE_ADDED");
    paramString.addDataScheme("package");
    k.getActivity().registerReceiver(this, paramString);
  }
  
  public final void a(a paramA)
  {
    if (paramA.jZ)
    {
      k.a("不能重复安装同一个应用程序", 0);
      if (!this.jV) {
        h.b(h.a(61699, this));
      }
      return;
    }
    this.jQ = paramA;
    this.jS = 1;
    int i = this.jS;
    h.b(h.a(47887, new String[] { "StartInstallApp", k.aG() + "=" + paramA.packageName }));
    if ((paramA.jY.startsWith("market:")) || (paramA.jY.startsWith("http:")) || (paramA.jY.startsWith("https:")))
    {
      k.x(paramA.jY);
      return;
    }
    if (paramA.jY.startsWith("download:"))
    {
      paramA = "http:" + paramA.jY.substring(9);
      l.a(null, "正在下载", false, true);
      try
      {
        new b((byte)0).execute(new URL[] { new URL(paramA) });
        return;
      }
      catch (MalformedURLException paramA)
      {
        l.aU();
        b(paramA);
        return;
      }
    }
    try
    {
      paramA = k.v(b.F(this.jQ.jY));
      c(paramA);
      paramA.close();
      installApk();
      return;
    }
    catch (Exception paramA)
    {
      b(paramA);
    }
  }
  
  public final boolean a(Message paramMessage)
  {
    if (paramMessage.what == 61697) {
      ((AbstractPaymentManager)paramMessage.obj).a(this);
    }
    if ((paramMessage.what == 40961) && (this.jS == 1)) {
      b(null);
    }
    return false;
  }
  
  public final List<a> bj()
  {
    if (this.jT) {
      getName();
    }
    for (;;)
    {
      return this.jP;
      int i = 0;
      while (i < this.jO.length)
      {
        if (k.y(this.jO[i].packageName)) {
          this.jP.remove(this.jO[i]);
        }
        i += 1;
      }
      getName();
      new StringBuilder("Available apps are ").append(this.jP.size()).toString();
    }
  }
  
  public final void onDestroy()
  {
    k.getActivity().unregisterReceiver(this);
  }
  
  public void onReceive(Context paramContext, Intent paramIntent)
  {
    getName();
    new StringBuilder("The package has installed.").append(paramIntent.getDataString()).toString();
    if ((this.jQ != null) && (this.jQ.packageName != null) && (paramIntent.getDataString().indexOf(this.jQ.packageName) != -1))
    {
      this.jS = 2;
      int i = this.jS;
      j.y(0).getEditor().putBoolean(this.jQ.packageName, true).commit();
      this.jQ.jZ = true;
      if (bj().isEmpty()) {
        h.b(h.a(61700, this));
      }
      h.b(h.a(61698, this));
      h.b(h.a(47887, new String[] { "InstallAppSuccess", this.jQ.packageName + "=" + k.aG() }));
      if (this.jR) {
        k.launchExternalApplication(this.jQ.packageName);
      }
    }
  }
  
  public final class a
  {
    public String jY;
    public boolean jZ;
    public String ka;
    public String kb;
    public String packageName;
    
    public a() {}
  }
  
  private final class b
    extends AsyncTask<URL, Integer, Long>
  {
    private b() {}
    
    private Long doInBackground(URL... paramVarArgs)
    {
      try
      {
        Object localObject;
        HttpURLConnection localHttpURLConnection;
        if (!new File(AbstractDownloadAndInstall.a(AbstractDownloadAndInstall.this)).exists())
        {
          localObject = new File(AbstractDownloadAndInstall.b(AbstractDownloadAndInstall.this));
          ((File)localObject).mkdirs();
          if (!k.isConnect()) {
            return Long.valueOf(0L);
          }
          localHttpURLConnection = (HttpURLConnection)paramVarArgs[0].openConnection();
          localHttpURLConnection.setRequestMethod("GET");
          localHttpURLConnection.setDoOutput(true);
          localHttpURLConnection.connect();
          paramVarArgs = new File((File)localObject, "target.apk");
        }
        Log.e(AbstractDownloadAndInstall.this.getName(), "Fail to download the file.");
      }
      catch (IOException paramVarArgs)
      {
        try
        {
          localObject = localHttpURLConnection.getInputStream();
          AbstractDownloadAndInstall.a(AbstractDownloadAndInstall.this, (InputStream)localObject);
          ((InputStream)localObject).close();
          return Long.valueOf(100L);
        }
        catch (IOException localIOException)
        {
          for (;;) {}
        }
        paramVarArgs = paramVarArgs;
        paramVarArgs = null;
      }
      if ((paramVarArgs != null) && (paramVarArgs.exists())) {
        paramVarArgs.delete();
      }
      return Long.valueOf(-1L);
    }
  }
}
