package org.meteoroid.core;

import android.os.Message;
import android.util.SparseArray;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.LinkedBlockingQueue;

public final class h
  implements Runnable
{
  public static final String LOG_TAG = "MessageDispatchManager";
  public static final int MSG_ARG2_DONT_RECYCLE_ME = -13295;
  public static final int MSG_ARG_NONE = 0;
  private static final LinkedBlockingQueue<Message> jdField_if = new LinkedBlockingQueue();
  private static final LinkedBlockingQueue<a> ig = new LinkedBlockingQueue();
  private static final h ih = new h();
  private static final SparseArray<String> ii = new SparseArray();
  private static final ArrayList<a> ik = new ArrayList();
  private boolean ij;
  
  public h() {}
  
  public static Message a(int paramInt, Object paramObject)
  {
    return a(paramInt, paramObject, 0, 0);
  }
  
  public static Message a(int paramInt1, Object paramObject, int paramInt2, int paramInt3)
  {
    Message localMessage = Message.obtain();
    localMessage.what = paramInt1;
    localMessage.obj = paramObject;
    localMessage.arg1 = 0;
    localMessage.arg2 = paramInt3;
    return localMessage;
  }
  
  public static void a(a paramA)
  {
    if (!ig.contains(paramA)) {
      ig.add(paramA);
    }
  }
  
  public static final void aC()
  {
    if.clear();
  }
  
  protected static void ar()
  {
    new Thread(ih).start();
  }
  
  public static void b(int paramInt, Object paramObject)
  {
    b(a(paramInt, paramObject, 0, 0));
  }
  
  public static void b(int paramInt, String paramString)
  {
    ii.append(paramInt, paramString);
  }
  
  public static void b(Message paramMessage)
  {
    if.add(paramMessage);
  }
  
  public static void c(int paramInt, Object paramObject)
  {
    try
    {
      c(a(-2023686142, paramObject, 0, 0));
      return;
    }
    finally
    {
      paramObject = finally;
      throw paramObject;
    }
  }
  
  private static final void c(Message paramMessage)
  {
    Iterator localIterator = ig.iterator();
    while (localIterator.hasNext())
    {
      a localA = (a)localIterator.next();
      if (localA.a(paramMessage)) {
        new StringBuilder("The message [").append((String)ii.get(paramMessage.what)).append("] has been consumed by [").append(localA.getClass().getName()).append("]. And ").append(if.size()).append(" messages are waiting.").toString();
      }
    }
    for (int i = 1;; i = 0)
    {
      if (i == 0) {
        new StringBuilder("There is a message [").append((String)ii.get(paramMessage.what, Integer.toHexString(paramMessage.what))).append("] which no consumer could deal with it. ").append(if.size()).append(" messages left.").toString();
      }
      if (paramMessage.arg2 != 52241) {
        paramMessage.recycle();
      }
      return;
    }
  }
  
  protected static void onDestroy()
  {
    ih.ij = true;
    if.clear();
  }
  
  public static void x(int paramInt)
  {
    b(paramInt, null);
  }
  
  public final void run()
  {
    while (!this.ij)
    {
      Object localObject;
      for (;;)
      {
        localObject = (Message)if.poll();
        if (localObject == null) {
          break;
        }
        c((Message)localObject);
      }
      if (!ik.isEmpty())
      {
        localObject = ik.iterator();
        while (((Iterator)localObject).hasNext())
        {
          a localA = (a)((Iterator)localObject).next();
          ig.remove(localA);
        }
        ik.clear();
      }
      Thread.yield();
    }
  }
  
  public static abstract interface a
  {
    public abstract boolean a(Message paramMessage);
  }
}
