package org.meteoroid.core;

import android.app.Activity;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.SystemClock;
import android.view.GestureDetector;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnKeyListener;
import android.view.View.OnTouchListener;
import java.util.Iterator;
import java.util.LinkedHashSet;

public final class f
  extends GestureDetector.SimpleOnGestureListener
  implements View.OnKeyListener, View.OnTouchListener
{
  public static final String LOG_TAG = "InputManager";
  private static final f hE = new f();
  private static final LinkedHashSet<a> hH = new LinkedHashSet();
  private static final LinkedHashSet<b> hI = new LinkedHashSet();
  private static final LinkedHashSet<e> hJ = new LinkedHashSet();
  private static final LinkedHashSet<d> hK = new LinkedHashSet();
  private static final LinkedHashSet<InputManager.RawMotionEventListener> hL = new LinkedHashSet();
  private GestureDetector hF;
  private SensorManager hG;
  
  public f() {}
  
  protected static void a(Activity paramActivity)
  {
    hE.hF = new GestureDetector(paramActivity, hE);
    hE.hG = ((SensorManager)paramActivity.getSystemService("sensor"));
  }
  
  public static final void a(SensorEventListener paramSensorEventListener)
  {
    hE.hG.registerListener(paramSensorEventListener, hE.hG.getDefaultSensor(1), 3);
  }
  
  protected static void a(View paramView)
  {
    if (!l.iC) {
      paramView.setOnKeyListener(hE);
    }
    if (k.aO() >= 5)
    {
      localObject = hE;
      localObject.getClass();
    }
    for (Object localObject = new c((f)localObject, (byte)0);; localObject = hE)
    {
      paramView.setOnTouchListener((View.OnTouchListener)localObject);
      return;
    }
  }
  
  public static final void a(a paramA)
  {
    hH.add(paramA);
  }
  
  public static final void a(b paramB)
  {
    hI.add(paramB);
  }
  
  public static final void a(e paramE)
  {
    hJ.add(paramE);
  }
  
  public static final void b(SensorEventListener paramSensorEventListener)
  {
    hE.hG.unregisterListener(paramSensorEventListener);
  }
  
  protected static void b(View paramView)
  {
    paramView.setOnKeyListener(null);
    paramView.setOnTouchListener(null);
  }
  
  public static final void b(b paramB)
  {
    hI.remove(paramB);
  }
  
  public static final boolean g(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    Iterator localIterator = hI.iterator();
    while (localIterator.hasNext()) {
      if (((b)localIterator.next()).g(paramInt1, paramInt2, paramInt3, paramInt4)) {
        return true;
      }
    }
    return false;
  }
  
  protected static void onDestroy()
  {
    hK.clear();
    hI.clear();
    hJ.clear();
    hH.clear();
  }
  
  public static boolean onTrackballEvent(MotionEvent paramMotionEvent)
  {
    if (hJ.isEmpty()) {}
    for (;;)
    {
      return false;
      paramMotionEvent = hJ.iterator();
      while (paramMotionEvent.hasNext()) {
        paramMotionEvent.next();
      }
    }
  }
  
  public final boolean onFling(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    paramMotionEvent1 = hK.iterator();
    while (paramMotionEvent1.hasNext()) {
      if (((d)paramMotionEvent1.next()).ax()) {
        return true;
      }
    }
    return false;
  }
  
  public final boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    if (hH.isEmpty()) {}
    for (;;)
    {
      return false;
      paramView = hH.iterator();
      while (paramView.hasNext()) {
        ((a)paramView.next()).a(paramKeyEvent);
      }
    }
  }
  
  public final boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    SystemClock.sleep(34L);
    if (!hK.isEmpty()) {
      this.hF.onTouchEvent(paramMotionEvent);
    }
    if (!hL.isEmpty())
    {
      paramView = hL.iterator();
      while (paramView.hasNext()) {
        paramView.next();
      }
    }
    return g(paramMotionEvent.getAction(), (int)paramMotionEvent.getX(), (int)paramMotionEvent.getY(), 0);
  }
  
  public static abstract interface a
  {
    public abstract boolean a(KeyEvent paramKeyEvent);
  }
  
  public static abstract interface b
  {
    public abstract boolean g(int paramInt1, int paramInt2, int paramInt3, int paramInt4);
  }
  
  private final class c
    implements View.OnTouchListener
  {
    private c() {}
    
    public final boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      boolean bool1 = false;
      SystemClock.sleep(34L);
      if (!f.av().isEmpty()) {
        f.a(f.this).onTouchEvent(paramMotionEvent);
      }
      if (!f.aw().isEmpty())
      {
        paramView = f.aw().iterator();
        while (paramView.hasNext()) {
          paramView.next();
        }
      }
      int j = paramMotionEvent.getAction();
      int i = j & 0xFF;
      int k = j >> 8;
      boolean bool2;
      if (i == 6)
      {
        bool2 = f.g(1, (int)paramMotionEvent.getX(k), (int)paramMotionEvent.getY(k), k);
        return bool2;
      }
      if (i == 5) {
        return f.g(0, (int)paramMotionEvent.getX(k), (int)paramMotionEvent.getY(k), k);
      }
      k = paramMotionEvent.getPointerCount();
      i = 0;
      for (;;)
      {
        bool2 = bool1;
        if (i >= k) {
          break;
        }
        if (f.g(j, (int)paramMotionEvent.getX(i), (int)paramMotionEvent.getY(i), i)) {
          bool1 = true;
        }
        i += 1;
      }
    }
  }
  
  public static abstract interface d
  {
    public static final int GESTURE_SLIDE_DOWN = 2;
    public static final int GESTURE_SLIDE_LEFT = 3;
    public static final int GESTURE_SLIDE_RIGHT = 4;
    public static final int GESTURE_SLIDE_UP = 1;
    
    public abstract boolean ax();
  }
  
  public static abstract interface e {}
}
