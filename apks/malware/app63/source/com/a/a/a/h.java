package com.a.a.a;

import android.os.Handler;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class h
  extends m
{
  private List<k> fY;
  private ScrollView fZ;
  private LinearLayout ga = new LinearLayout(org.meteoroid.core.k.getActivity());
  private LinearLayout gb;
  
  public h(String paramString)
  {
    this(paramString, null);
  }
  
  private h(String paramString, k[] paramArrayOfK)
  {
    super(paramString);
    this.ga.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    this.ga.setOrientation(1);
    this.fY = new ArrayList();
    this.fZ = new ScrollView(org.meteoroid.core.k.getActivity());
    this.fZ.addView(this.ga);
    this.fZ.setVerticalScrollBarEnabled(true);
    this.fZ.setVerticalFadingEdgeEnabled(false);
    this.gb = new LinearLayout(org.meteoroid.core.k.getActivity());
    this.gb.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    this.gb.setOrientation(1);
    this.gb.addView(this.fZ);
  }
  
  public final int A()
  {
    return 2;
  }
  
  public final int a(final k paramK)
  {
    if (this.fY.add(paramK))
    {
      org.meteoroid.core.k.getHandler().post(new Runnable()
      {
        public final void run()
        {
          h.a(h.this).addView(paramK.getView(), new ViewGroup.LayoutParams(-1, -2));
        }
      });
      return this.fY.size() - 1;
    }
    throw new IllegalStateException();
  }
  
  protected final void f()
  {
    org.meteoroid.core.k.getHandler().post(new Runnable()
    {
      public final void run()
      {
        Iterator localIterator = h.b(h.this).iterator();
        while (localIterator.hasNext()) {
          ((k)localIterator.next()).f();
        }
        h.a(h.this).clearFocus();
      }
    });
  }
  
  protected final void g()
  {
    org.meteoroid.core.k.getHandler().post(new Runnable()
    {
      public final void run()
      {
        Iterator localIterator = h.b(h.this).iterator();
        while (localIterator.hasNext()) {
          ((k)localIterator.next()).g();
        }
        h.a(h.this).clearFocus();
      }
    });
  }
}
