package com.a.a.a;

import android.os.Handler;
import android.util.Log;
import com.a.a.d.a;
import java.util.ArrayList;
import java.util.Iterator;
import org.meteoroid.core.i;
import org.meteoroid.core.k;
import org.meteoroid.core.l.a;

public abstract class f
  implements l.a
{
  public static final int ALERT = 5;
  public static final int CANVAS = 0;
  public static final int FORM = 2;
  public static final int GAMECANVAS = 1;
  public static final int LIST = 3;
  public static final int TEXTBOX = 4;
  protected e fL = null;
  public boolean fM = false;
  private ArrayList<c> fN = new ArrayList();
  private d fO = null;
  private String fP;
  private boolean fQ;
  private int height = -1;
  private int width = -1;
  
  f() {}
  
  private void I()
  {
    if (this.fQ) {
      k.getHandler().post(new Runnable()
      {
        public final void run()
        {
          f.this.M();
          f.this.C();
        }
      });
    }
  }
  
  private void L()
  {
    this.width = org.meteoroid.core.c.hv.getWidth();
    this.height = org.meteoroid.core.c.hv.getHeight();
  }
  
  public abstract int A();
  
  public void C()
  {
    Iterator localIterator = this.fN.iterator();
    while (localIterator.hasNext()) {
      i.a((c)localIterator.next());
    }
    if (!this.fQ) {}
    try
    {
      f();
      new StringBuilder().append(getClass().getSimpleName()).append(" shownotify called.").toString();
      this.fQ = true;
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Log.w("Displayable", localException);
      }
    }
  }
  
  public boolean D()
  {
    return false;
  }
  
  public final ArrayList<c> J()
  {
    return this.fN;
  }
  
  public final d K()
  {
    return this.fO;
  }
  
  public void M()
  {
    Iterator localIterator = this.fN.iterator();
    while (localIterator.hasNext()) {
      i.b((c)localIterator.next());
    }
    if (this.fQ) {}
    try
    {
      g();
      new StringBuilder().append(getClass().getSimpleName()).append(" hidenotify called.").toString();
      this.fQ = false;
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        Log.w("Displayable", localException);
      }
    }
  }
  
  public final void a(d paramD)
  {
    this.fO = paramD;
  }
  
  protected void c(int paramInt) {}
  
  public final void c(c paramC)
  {
    int k = 0;
    new StringBuilder().append(paramC.E()).append(" has added.").toString();
    int m = paramC.getPriority();
    int i = 0;
    for (;;)
    {
      int j = k;
      if (i < this.fN.size())
      {
        if (m <= ((c)this.fN.get(i)).getPriority())
        {
          this.fN.add(i, paramC);
          I();
          j = 1;
        }
      }
      else
      {
        if (j == 0)
        {
          this.fN.add(paramC);
          I();
        }
        return;
      }
      i += 1;
    }
  }
  
  protected void d(int paramInt) {}
  
  protected void f() {}
  
  protected void g() {}
  
  public final int getHeight()
  {
    if (this.height == -1) {
      L();
    }
    return this.height;
  }
  
  public final String getTitle()
  {
    return this.fP;
  }
  
  public final int getWidth()
  {
    if (this.width == -1) {
      L();
    }
    return this.width;
  }
  
  public final boolean isShown()
  {
    return this.fQ;
  }
  
  public final void j(String paramString)
  {
    this.fP = paramString;
  }
}
