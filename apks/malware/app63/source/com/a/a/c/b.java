package com.a.a.c;

import android.util.Log;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import javax.microedition.rms.RecordListener;

public final class b
{
  public static final int AUTHMODE_ANY = 1;
  public static final int AUTHMODE_PRIVATE = 0;
  public static final String LOG_TAG = "RMS";
  private static final String PREFIX = "rms_";
  private int fX;
  private HashMap<Integer, byte[]> gF = new HashMap();
  private int gG;
  private HashSet<RecordListener> gH = new HashSet();
  private boolean gI;
  private long lastModified;
  private String name;
  private int version;
  
  private b(String paramString)
  {
    this.name = paramString;
  }
  
  public static b a(String paramString, boolean paramBoolean)
  {
    new StringBuilder("openRecordStore:").append(paramString).toString();
    b localB = new b(paramString);
    if (org.meteoroid.core.b.r("rms_" + paramString)) {
      new StringBuilder().append(paramString).append(" exist.").toString();
    }
    for (;;)
    {
      try
      {
        paramString = new DataInputStream(org.meteoroid.core.b.t("rms_" + paramString));
        localB.a(paramString);
        paramString.close();
        localB.gI = true;
        return localB;
      }
      catch (Exception paramString)
      {
        Log.e("RMS", paramString.getMessage());
        throw new c();
      }
      if (!paramBoolean)
      {
        new StringBuilder().append(paramString).append(" not exist and not necessary to create.").toString();
        throw new e();
      }
      new StringBuilder().append(paramString).append(" not exist and necessary to create.").toString();
      try
      {
        localB.ae();
      }
      catch (Exception paramString)
      {
        Log.e("RMS", paramString.getMessage());
        throw new c();
      }
    }
  }
  
  private void a(DataInputStream paramDataInputStream)
  {
    try
    {
      this.version = paramDataInputStream.readInt();
      this.lastModified = paramDataInputStream.readLong();
      this.gG = paramDataInputStream.readInt();
      int j = paramDataInputStream.readInt();
      int i = 0;
      while (i < j)
      {
        int k = paramDataInputStream.readInt();
        byte[] arrayOfByte = new byte[paramDataInputStream.readInt()];
        paramDataInputStream.read(arrayOfByte);
        this.gF.put(Integer.valueOf(k), arrayOfByte);
        i += 1;
      }
      ac();
      return;
    }
    finally {}
  }
  
  private void a(DataOutputStream paramDataOutputStream)
  {
    try
    {
      this.version += 1;
      paramDataOutputStream.writeInt(this.version);
      paramDataOutputStream.writeLong(System.currentTimeMillis());
      paramDataOutputStream.writeInt(this.gG);
      paramDataOutputStream.writeInt(this.gF.size());
      Iterator localIterator = this.gF.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Object localObject = (Map.Entry)localIterator.next();
        paramDataOutputStream.writeInt(((Integer)((Map.Entry)localObject).getKey()).intValue());
        localObject = (byte[])((Map.Entry)localObject).getValue();
        paramDataOutputStream.writeInt(localObject.length);
        paramDataOutputStream.write((byte[])localObject);
      }
    }
    finally {}
  }
  
  private void ac()
  {
    this.fX = 0;
    Iterator localIterator = this.gF.values().iterator();
    while (localIterator.hasNext())
    {
      byte[] arrayOfByte = (byte[])localIterator.next();
      int i = this.fX;
      this.fX = (arrayOfByte.length + i);
    }
    new StringBuilder("calcTheSizeOfRecords:").append(this.fX).toString();
  }
  
  /* Error */
  private void ad()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: new 54	java/lang/StringBuilder
    //   5: dup
    //   6: ldc 16
    //   8: invokespecial 58	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   11: aload_0
    //   12: getfield 47	com/a/a/c/b:name	Ljava/lang/String;
    //   15: invokevirtual 62	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   18: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   21: invokestatic 73	org/meteoroid/core/b:r	(Ljava/lang/String;)Z
    //   24: istore_2
    //   25: iload_2
    //   26: ifeq +112 -> 138
    //   29: new 78	java/io/DataInputStream
    //   32: dup
    //   33: new 54	java/lang/StringBuilder
    //   36: dup
    //   37: ldc 16
    //   39: invokespecial 58	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   42: aload_0
    //   43: getfield 47	com/a/a/c/b:name	Ljava/lang/String;
    //   46: invokevirtual 62	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   49: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   52: invokestatic 82	org/meteoroid/core/b:t	(Ljava/lang/String;)Ljava/io/InputStream;
    //   55: invokespecial 85	java/io/DataInputStream:<init>	(Ljava/io/InputStream;)V
    //   58: astore_3
    //   59: aload_3
    //   60: invokevirtual 119	java/io/DataInputStream:readInt	()I
    //   63: istore_1
    //   64: new 54	java/lang/StringBuilder
    //   67: dup
    //   68: ldc -37
    //   70: invokespecial 58	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   73: aload_0
    //   74: getfield 121	com/a/a/c/b:version	I
    //   77: invokevirtual 216	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   80: ldc -35
    //   82: invokevirtual 62	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   85: iload_1
    //   86: invokevirtual 216	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   89: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   92: pop
    //   93: aload_3
    //   94: invokevirtual 91	java/io/DataInputStream:close	()V
    //   97: iload_1
    //   98: aload_0
    //   99: getfield 121	com/a/a/c/b:version	I
    //   102: if_icmple +36 -> 138
    //   105: aload_0
    //   106: new 78	java/io/DataInputStream
    //   109: dup
    //   110: new 54	java/lang/StringBuilder
    //   113: dup
    //   114: ldc 16
    //   116: invokespecial 58	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   119: aload_0
    //   120: getfield 47	com/a/a/c/b:name	Ljava/lang/String;
    //   123: invokevirtual 62	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   126: invokevirtual 66	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   129: invokestatic 82	org/meteoroid/core/b:t	(Ljava/lang/String;)Ljava/io/InputStream;
    //   132: invokespecial 85	java/io/DataInputStream:<init>	(Ljava/io/InputStream;)V
    //   135: invokespecial 88	com/a/a/c/b:a	(Ljava/io/DataInputStream;)V
    //   138: aload_0
    //   139: monitorexit
    //   140: return
    //   141: astore_3
    //   142: ldc 13
    //   144: aload_3
    //   145: invokevirtual 96	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   148: invokestatic 102	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   151: pop
    //   152: goto -14 -> 138
    //   155: astore_3
    //   156: aload_0
    //   157: monitorexit
    //   158: aload_3
    //   159: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	160	0	this	b
    //   63	40	1	i	int
    //   24	2	2	bool	boolean
    //   58	36	3	localDataInputStream	DataInputStream
    //   141	4	3	localException	Exception
    //   155	4	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   29	138	141	java/lang/Exception
    //   2	25	155	finally
    //   29	138	155	finally
    //   142	152	155	finally
  }
  
  private void ae()
  {
    try
    {
      DataOutputStream localDataOutputStream = new DataOutputStream(org.meteoroid.core.b.s("rms_" + this.name));
      a(localDataOutputStream);
      localDataOutputStream.flush();
      localDataOutputStream.close();
      ac();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private boolean isOpen()
  {
    if (!this.gI)
    {
      Log.e("RMS", "RecordStoreNotOpenException");
      throw new f();
    }
    return this.gI;
  }
  
  public final void a(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3)
  {
    isOpen();
    new StringBuilder("setRecord:").append(1).append(" data:").append(paramArrayOfByte.length).toString();
    if (this.gF.containsKey(Integer.valueOf(1)))
    {
      this.gF.remove(Integer.valueOf(1));
      byte[] arrayOfByte = new byte[paramInt3];
      System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, paramInt3);
      this.gF.put(Integer.valueOf(1), arrayOfByte);
    }
    try
    {
      ae();
      paramArrayOfByte = this.gH.iterator();
      while (paramArrayOfByte.hasNext())
      {
        paramArrayOfByte.next();
        continue;
        throw new a();
      }
    }
    catch (Exception paramArrayOfByte)
    {
      for (;;) {}
    }
  }
  
  public final void af()
  {
    isOpen();
    ad();
    new StringBuilder("closeRecordStore").append(this.name).append(" at version:").append(this.version).toString();
    this.gH.clear();
    this.gH = null;
    this.gF.clear();
    this.gI = false;
    this.gF = null;
    this.name = null;
    System.gc();
  }
  
  public final int ag()
  {
    isOpen();
    ad();
    new StringBuilder("getNumRecords").append(this.gF.size()).toString();
    return this.gF.size();
  }
  
  public final int d(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    isOpen();
    this.gG += 1;
    new StringBuilder("addRecord:").append(this.gG).append(" offset:0").append(" numBytes:").append(paramInt2).toString();
    byte[] arrayOfByte = new byte[paramInt2];
    if (paramInt2 != 0) {
      System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, paramInt2);
    }
    this.gF.put(Integer.valueOf(this.gG), arrayOfByte);
    try
    {
      ae();
      paramArrayOfByte = this.gH.iterator();
      while (paramArrayOfByte.hasNext())
      {
        paramArrayOfByte.next();
        paramInt1 = this.gG;
      }
      return this.gG;
    }
    catch (Exception paramArrayOfByte)
    {
      throw new c();
    }
  }
  
  public final byte[] q(int paramInt)
  {
    isOpen();
    ad();
    if (this.gF.containsKey(Integer.valueOf(1)))
    {
      new StringBuilder("getRecord").append(1).append(" length:").append(((byte[])this.gF.get(Integer.valueOf(1))).length).toString();
      return (byte[])this.gF.get(Integer.valueOf(1));
    }
    throw new a("recordId=" + 1);
  }
}
