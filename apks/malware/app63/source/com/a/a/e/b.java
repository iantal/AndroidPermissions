package com.a.a.e;

import android.app.Activity;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.util.Log;
import com.androidbox.shhgzhsjcnhi.R.drawable;
import com.androidbox.shhgzhsjcnhi.R.raw;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import org.meteoroid.core.e;
import org.meteoroid.core.k;

public final class b
{
  public static final String LOG_TAG = "ResourceUtils";
  private static String lI;
  private static final HashMap<String, Bitmap> lJ = new HashMap();
  
  public static void E(String paramString)
  {
    if (paramString != null)
    {
      lI = paramString + File.separator;
      return;
    }
    lI = null;
  }
  
  public static final String F(String paramString)
  {
    return "abresource" + File.separator + paramString;
  }
  
  private static int G(String paramString)
  {
    try
    {
      int i = b(R.drawable.class, paramString);
      return i;
    }
    catch (Exception localException)
    {
      throw new IOException("Fail to get resource id:" + paramString);
    }
  }
  
  public static int H(String paramString)
  {
    try
    {
      int i = b(R.raw.class, paramString);
      return i;
    }
    catch (Exception localException)
    {
      throw new IOException("Fail to get raw id:" + paramString);
    }
  }
  
  public static Rect I(String paramString)
  {
    if (paramString == null)
    {
      Log.w("ResourceUtils", "Rect string couldn't be null.");
      return null;
    }
    String[] arrayOfString = paramString.split(",");
    if (arrayOfString.length != 4) {
      throw new IllegalArgumentException("Invalid rect string:" + paramString);
    }
    int i = Integer.parseInt(arrayOfString[0].trim());
    int j = Integer.parseInt(arrayOfString[1].trim());
    return new Rect(i, j, Integer.parseInt(arrayOfString[2].trim()) + i, Integer.parseInt(arrayOfString[3].trim()) + j);
  }
  
  public static Bitmap J(String paramString)
  {
    if (paramString == null) {
      Log.e("ResourceUtils", "Bitmap string couldn't be null.");
    }
    while (paramString.trim().length() == 0) {
      return null;
    }
    if (lJ.containsKey(paramString))
    {
      new StringBuilder("Wow, ").append(paramString).append(" hit the bitmap cache.").toString();
      return (Bitmap)lJ.get(paramString);
    }
    if (lI != null) {}
    for (int i = 1; i != 0; i = 0)
    {
      localObject = e.b(k.v(lI + paramString + ".png"));
      lJ.put(paramString, localObject);
      return localObject;
    }
    Object localObject = k.getActivity().getResources();
    try
    {
      localObject = BitmapFactory.decodeResource((Resources)localObject, G(paramString.trim()));
      lJ.put(paramString, localObject);
      return localObject;
    }
    catch (Exception localException)
    {
      throw new IOException("Fail to load bitmap " + paramString + ":" + localException.toString());
    }
  }
  
  public static Bitmap[] K(String paramString)
  {
    if (paramString == null) {
      Log.e("ResourceUtils", "Bitmap string couldn't be null.");
    }
    do
    {
      return null;
      paramString = paramString.split(",");
    } while (paramString.length <= 0);
    Bitmap[] arrayOfBitmap = new Bitmap[paramString.length];
    int i = 0;
    while (i < paramString.length)
    {
      arrayOfBitmap[i] = J(paramString[i].trim());
      i += 1;
    }
    return arrayOfBitmap;
  }
  
  public static final String L(String paramString)
  {
    int i = paramString.lastIndexOf(File.separator);
    if (i == -1) {
      return paramString;
    }
    return paramString.substring(i + 1);
  }
  
  private static int b(Class<?> paramClass, String paramString)
  {
    return paramClass.getField(paramString).getInt(null);
  }
  
  public static void bH()
  {
    lJ.clear();
  }
  
  public static final String getPath(String paramString)
  {
    int i = paramString.lastIndexOf(File.separator);
    if (i == -1) {
      return "";
    }
    return paramString.substring(0, i + 1);
  }
}
