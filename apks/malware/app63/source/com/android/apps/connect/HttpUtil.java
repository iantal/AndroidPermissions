package com.android.apps.connect;

import com.android.apps.activity.ViewOne;
import com.android.apps.bean.AdAdvertisement;
import com.android.apps.bean.AdInfo;
import com.android.apps.util.AdManager;
import com.android.apps.util.Base64DecoderException;
import com.android.apps.util.Base64Util;
import com.android.apps.util.Config;
import com.android.apps.util.JsonUtil;
import com.android.apps.util.NativeAd;
import com.android.apps.util.UserInfo;
import com.google.gson.Gson;
import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;

public class HttpUtil
{
  private static final String HOST = "aHR0cDovL21lcmN1cnkuZ2FsbC5tZS9tZXJjdXJ5YXBpL2RldmljZQ==";
  private static final String HOST_TEST = "aHR0cDovL3Rlc3QuZ2FsbC5tZS9tZXJjdXJ5YXBpL2RldmljZQ==";
  static HttpClient client;
  static HttpPost request;
  static HttpResponse response;
  static int timeoutConnection = 60000;
  private String host;
  
  public HttpUtil() {}
  
  private String getServerAddress()
  {
    if (this.host == null) {}
    for (;;)
    {
      try
      {
        if (!AdManager.isTestMode()) {
          continue;
        }
        str = "aHR0cDovL3Rlc3QuZ2FsbC5tZS9tZXJjdXJ5YXBpL2RldmljZQ==";
        this.host = new String(Base64Util.decodeWebSafe(str), "UTF-8");
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        String str;
        localUnsupportedEncodingException.printStackTrace();
        continue;
      }
      catch (Base64DecoderException localBase64DecoderException)
      {
        localBase64DecoderException.printStackTrace();
        continue;
      }
      return this.host;
      str = "aHR0cDovL21lcmN1cnkuZ2FsbC5tZS9tZXJjdXJ5YXBpL2RldmljZQ==";
    }
  }
  
  public List<AdAdvertisement> getOnLineAd(boolean paramBoolean)
  {
    try
    {
      Object localObject1 = getServerAddress() + "/adlist/json.do?stage=1&imsi=" + AdManager.device_uuid + "&iconDpi=" + AdManager.dpiStr2 + "&isFree=" + paramBoolean + "&mid=" + AdManager.mercuryId + "&macAddress=" + AdManager.mac + "&gamePackage=" + AdManager.gamePackage + "&pageNo=1&pageSize=20&networkType=" + AdManager.connectType + "&osVersion=" + URLEncoder.encode(AdManager.sdkVersion, "utf8") + "&carrier=" + AdManager.carrier_id;
      new StringBuilder("请求广告链接：").append((String)localObject1).toString();
      Object localObject2 = new BasicHttpParams();
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject2, timeoutConnection);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject2, timeoutConnection);
      request = new HttpPost((String)localObject1);
      localObject1 = new DefaultHttpClient((HttpParams)localObject2);
      client = (HttpClient)localObject1;
      localObject1 = ((HttpClient)localObject1).execute(request);
      response = (HttpResponse)localObject1;
      if (((HttpResponse)localObject1).getStatusLine().getStatusCode() == 200)
      {
        AdManager.erInternet = false;
        localObject1 = EntityUtils.toString(response.getEntity());
        localObject1 = (AdInfo)new Gson().fromJson((String)localObject1, AdInfo.class);
        localObject2 = ((AdInfo)localObject1).getAds();
        AdManager.mercuryViewType = ((AdInfo)localObject1).getShowType();
        AdManager.mercuryActivationMsg = ((AdInfo)localObject1).getActivationMsg();
        return localObject2;
      }
      AdManager.erInternet = true;
      AdManager.mercuryViewType = "one";
      localObject1 = NativeAd.serchNvAd();
      ViewOne.listNvAd = (List)localObject1;
      if (localObject1 != null)
      {
        localObject1 = ViewOne.listNvAd;
        return localObject1;
      }
      return null;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      AdManager.erInternet = true;
      List localList = NativeAd.serchNvAd();
      ViewOne.listNvAd = localList;
      if (localList != null) {
        return ViewOne.listNvAd;
      }
    }
    return null;
  }
  
  public void sendButtonCount(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    String str = null;
    if (paramString1.equals("list")) {
      str = getServerAddress() + "/dev/manyClick/response.do?stage=1&imsi=" + AdManager.device_uuid + "&macAddress=" + AdManager.mac + "&mid=" + AdManager.mercuryId + "&gamePackage=" + AdManager.gamePackage + "&adId=" + paramString2 + "&downLoadBtn=" + paramString3 + "&installBtn=" + paramString4;
    }
    for (;;)
    {
      new StringBuilder("现在发送按钮点击信息：").append(str).toString();
      try
      {
        paramString1 = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(paramString1, timeoutConnection);
        HttpConnectionParams.setSoTimeout(paramString1, timeoutConnection);
        request = new HttpPost(str);
        paramString1 = new DefaultHttpClient(paramString1);
        client = paramString1;
        paramString1 = paramString1.execute(request);
        response = paramString1;
        paramString1.getStatusLine().getStatusCode();
        return;
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
      }
      if (paramString1.equals("one")) {
        str = getServerAddress() + "/dev/oneClick/response.do?stage=1&imsi=" + AdManager.device_uuid + "&macAddress=" + AdManager.mac + "&mid=" + AdManager.mercuryId + "&gamePackage=" + AdManager.gamePackage + "&adId=" + paramString2 + "&downLoadBtn=" + paramString3 + "&installBtn=" + paramString4 + "&changeBtn=" + paramString5;
      } else if (paramString1.equals("three")) {
        str = getServerAddress() + "/dev/threeClick/response.do?stage=1&imsi=" + AdManager.device_uuid + "&macAddress=" + AdManager.mac + "&mid=" + AdManager.mercuryId + "&gamePackage=" + AdManager.gamePackage + "&adId=" + paramString2 + "&downLoadBtn=" + paramString3 + "&installBtn=" + paramString4 + "&changeBtn=" + paramString5;
      } else if (paramString1.equals("package")) {
        str = getServerAddress() + "/dev/classOneClick/response.do?stage=1&imsi=" + AdManager.device_uuid + "&macAddress=" + AdManager.mac + "&mid=" + AdManager.mercuryId + "&gamePackage=" + AdManager.gamePackage + "&adId=" + paramString2 + "&downLoadBtn=" + paramString3 + "&installBtn=" + paramString4 + "&changeBtn=" + paramString5;
      }
    }
  }
  
  public void sendInedAd()
  {
    try
    {
      Object localObject1 = new BasicHttpParams();
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject1, timeoutConnection);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject1, timeoutConnection);
      request = new HttpPost(getServerAddress() + "/ad/offLineInstallAds.do");
      Object localObject2 = JsonUtil.initInedAd();
      new StringBuilder("测试发送离线信息：").append(((JSONArray)localObject2).toString().substring(1, ((JSONArray)localObject2).toString().length() - 1)).toString();
      localObject2 = new StringEntity(((JSONArray)localObject2).toString(), "utf-8");
      request.setEntity((HttpEntity)localObject2);
      request.setHeader("Content-type", "application/json;charset=UTF-8");
      localObject1 = new DefaultHttpClient((HttpParams)localObject1).execute(request);
      response = (HttpResponse)localObject1;
      if (((HttpResponse)localObject1).getStatusLine().getStatusCode() == 200)
      {
        new UserInfo().setLastConnect();
        new FileOutputStream(new File(Config.GAME_BASE_PATH + File.separator, "inedAd.txt"));
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void sendInfo(String paramString1, int paramInt, String paramString2, String paramString3)
  {
    String str = null;
    try
    {
      if (paramString1.equals("downSuccess")) {
        str = getServerAddress() + "/downloadSuccess/apk/response.do?stage=1&imsi=" + AdManager.device_uuid + "&adId=" + paramInt + "&mid=" + URLEncoder.encode(AdManager.mercuryId, "utf8") + "&type=" + paramString2 + "&macAddress=" + AdManager.mac + "&gamePackage=" + AdManager.gamePackage + "&way=" + paramString3;
      }
      for (;;)
      {
        new StringBuilder("成功发送信息的url:").append(str).toString();
        paramString1 = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(paramString1, timeoutConnection);
        HttpConnectionParams.setSoTimeout(paramString1, timeoutConnection);
        request = new HttpPost(str);
        paramString1 = new DefaultHttpClient(paramString1);
        client = paramString1;
        paramString1 = paramString1.execute(request);
        response = paramString1;
        paramString1.getStatusLine().getStatusCode();
        return;
        if (paramString1.equals("install")) {
          str = getServerAddress() + "/apk/install.do?stage=1&imsi=" + AdManager.device_uuid + "&adId=" + paramInt + "&mid=" + URLEncoder.encode(AdManager.mercuryId, "utf8") + "&type=" + paramString2 + "&macAddress=" + AdManager.mac + "&gamePackage=" + AdManager.gamePackage + "&way=" + paramString3;
        } else if (paramString1.equals("installSuccess")) {
          str = getServerAddress() + "/apk/install/success/response.do?stage=1&imei=" + AdManager.device_uuid + "&adId=" + paramInt + "&mid=" + URLEncoder.encode(AdManager.mercuryId, "utf8") + "&type=" + paramString2 + "&macAddress=" + AdManager.mac + "&gamePackage=" + AdManager.gamePackage + "&way=" + paramString3 + "&manufacturer=" + AdManager.manufacturer + "&imsi=" + AdManager.carrier_id + "&mobile=" + AdManager.name;
        } else if (paramString1.equals("apkStart")) {
          str = getServerAddress() + "/apk/apkStart/response.do?stage=1&imsi=" + AdManager.device_uuid + "&adId=" + paramInt + "&mid=" + URLEncoder.encode(AdManager.mercuryId, "utf8") + "&type=" + paramString2 + "&macAddress=" + AdManager.mac + "&gamePackage=" + AdManager.gamePackage + "&way=" + paramString3 + "&apkStart=1";
        }
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public void sendSuccess(int paramInt, String paramString)
  {
    try
    {
      new StringBuilder("成功安装的广告id:").append(paramInt).toString();
      paramString = getServerAddress() + "/ad/success/response.do?stage=1&imsi=" + AdManager.device_uuid + "&adId=" + paramInt + "&mid=" + URLEncoder.encode(AdManager.mercuryId, "utf8") + "&type=" + paramString + "&macAddress=" + AdManager.mac + "&gamePackage=" + AdManager.gamePackage;
      new StringBuilder("成功安装的url:").append(paramString).toString();
      BasicHttpParams localBasicHttpParams = new BasicHttpParams();
      HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, timeoutConnection);
      HttpConnectionParams.setSoTimeout(localBasicHttpParams, timeoutConnection);
      request = new HttpPost(paramString);
      paramString = new DefaultHttpClient(localBasicHttpParams);
      client = paramString;
      paramString = paramString.execute(request);
      response = paramString;
      paramString.getStatusLine().getStatusCode();
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public void sendUserInfo()
  {
    try
    {
      UserInfo localUserInfo = new UserInfo();
      Object localObject = new BasicHttpParams();
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject, timeoutConnection);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject, timeoutConnection);
      if ((AdManager.carrier_id == null) || (AdManager.carrier_id.equals(""))) {
        AdManager.carrier_id = "-1";
      }
      if ((AdManager.mac == null) || (AdManager.mac.equals(""))) {
        AdManager.mac = "-1";
      }
      String str = getServerAddress() + "/info/response.do?phoneMobile=" + AdManager.name + "&imsi=" + AdManager.device_uuid + "&macAddress=" + AdManager.mac + "&phoneResolution=" + URLEncoder.encode(AdManager.resolution, "utf8") + "&phoneCarrier=" + AdManager.carrier_id + "&stage=1&mid=" + AdManager.mercuryId + "&phoneManufacturer=" + AdManager.manufacturer;
      new StringBuilder("参数的url是：").append(str).toString();
      request = new HttpPost(str);
      localObject = new DefaultHttpClient((HttpParams)localObject);
      client = (HttpClient)localObject;
      localObject = ((HttpClient)localObject).execute(request);
      response = (HttpResponse)localObject;
      if (((HttpResponse)localObject).getStatusLine().getStatusCode() == 200) {
        localUserInfo.setFirst();
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
}
