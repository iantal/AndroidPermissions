package com.android.apps.activity;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import com.android.apps.R.id;
import com.android.apps.R.layout;
import com.android.apps.bean.AdAdvertisement;
import com.android.apps.connect.HttpUtil;
import com.android.apps.listenerinterface.OnAdStateListener;
import com.android.apps.threadpool.MercuryExecutorService;
import com.android.apps.threadpool.Task;
import com.android.apps.util.AdManager;
import com.android.apps.util.ApkUtil;
import com.android.apps.util.CheckNet;
import com.android.apps.util.Config;
import com.android.apps.util.ImageLoader;
import com.android.apps.util.LoggerUtil;
import com.android.apps.util.OneAdapter;
import com.android.apps.util.SystemProject;
import com.android.apps.util.ToastUtil;
import com.android.apps.util.UserInfo;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViewOne
  extends Activity
  implements OnAdStateListener
{
  public static List<AdAdvertisement> listNvAd;
  public static Context mContext;
  private String TAG = "TAG";
  private int adNum = 0;
  OneAdapter adapter;
  private ApkUtil apkUtil;
  private int backNum = 0;
  private int count = 0;
  private HttpUtil httpUtil;
  private boolean isDownloadFlag = false;
  private List<Map<String, Object>> listItem;
  private ListView listView;
  List<Map<String, Object>> listitem = new ArrayList();
  private Handler mHandler;
  private TextView marqueeTextView;
  private int newIntentAdId = -1;
  private ImageButton nextButton;
  SharedPreferences preferences;
  private ProgressDialog progressDialog;
  private String promptMsg = "已有应用开始下载，请等待下载完成。";
  private int scroll_pos;
  private ImageButton setupButton;
  private ToastUtil toastUtil;
  
  public ViewOne() {}
  
  private List<Map<String, Object>> getListItem()
  {
    this.listitem = new ArrayList();
    HashMap localHashMap = new HashMap();
    String str2 = ((AdAdvertisement)listNvAd.get(this.adNum)).getlIconUrl();
    String str1 = str2;
    if (!str2.startsWith("http")) {
      str1 = AdManager.dpiStr + str2;
    }
    localHashMap.put("image", str1);
    localHashMap.put("appName", ((AdAdvertisement)listNvAd.get(this.adNum)).getName());
    localHashMap.put("appInfo", ((AdAdvertisement)listNvAd.get(this.adNum)).getApkInfo());
    localHashMap.put("apkUri", ((AdAdvertisement)listNvAd.get(this.adNum)).getApkName());
    this.listitem.add(localHashMap);
    return this.listitem;
  }
  
  private void init()
  {
    setContentView(R.layout.adview);
    this.marqueeTextView = ((TextView)findViewById(R.id.oneShow_marquee_TextView));
    this.listView = ((ListView)findViewById(R.id.adview_listview));
    this.setupButton = ((ImageButton)findViewById(R.id.adView_Imagebutton1));
    this.setupButton.setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        if ((ViewOne.this.isDownloadFlag) && (AdManager.isDwonFail)) {
          ViewOne.access$002(ViewOne.this, false);
        }
        ViewOne.access$108(ViewOne.this);
        if (ViewOne.this.isDownloadFlag) {
          ViewOne.this.toastUtil.toast("正在下载，请您耐心等待...");
        }
        label387:
        do
        {
          AdAdvertisement localAdAdvertisement;
          do
          {
            return;
            ViewOne.access$002(ViewOne.this, true);
            AdManager.currentAd = (AdAdvertisement)ViewOne.listNvAd.get(ViewOne.this.adNum);
            int i = ViewOne.this.adNum;
            paramAnonymousView = ViewOne.listNvAd;
            new StringBuilder("+++++++++广告单的大小为+").append(paramAnonymousView.size()).append("  ,当前广告是第").append(i).append("个").toString();
            localAdAdvertisement = (AdAdvertisement)ViewOne.listNvAd.get(ViewOne.this.adNum);
          } while ((localAdAdvertisement.getApkUrl() == null) || ("".equals(localAdAdvertisement.getApkUrl())));
          String str = ViewOne.this.apkUtil.getKindOfApkName(localAdAdvertisement.getApkName());
          if (SystemProject.checkSDcard()) {}
          for (paramAnonymousView = new File(Config.AD_APK_PATH + File.separator + str);; paramAnonymousView = new File(ViewOne.mContext.getFilesDir().getAbsolutePath() + File.separator + str))
          {
            if (!paramAnonymousView.exists()) {
              break label387;
            }
            ViewOne.this.apkUtil.opApk(str, ((AdAdvertisement)ViewOne.listNvAd.get(ViewOne.this.adNum)).getId());
            if (!AdManager.isConnect) {
              break;
            }
            MercuryExecutorService.execute(new Task("one", ((AdAdvertisement)ViewOne.listNvAd.get(ViewOne.this.adNum)).getId(), "-1", "1", "-1", ViewOne.this.httpUtil));
            return;
          }
          ViewOne.this.toastUtil.toast("开始下载，下载完成后自动安装");
          if (localAdAdvertisement != null) {
            ViewOne.this.apkUtil.downApk(localAdAdvertisement.getName(), localAdAdvertisement.getApkName() + ".apk", localAdAdvertisement.getId(), localAdAdvertisement.getCategoryId(), ((AdAdvertisement)ViewOne.listNvAd.get(ViewOne.this.adNum)).getApkUrl());
          }
        } while (!AdManager.isConnect);
        MercuryExecutorService.execute(new Task("one", ((AdAdvertisement)ViewOne.listNvAd.get(ViewOne.this.adNum)).getId(), "1", "-1", "-1", ViewOne.this.httpUtil));
      }
    });
    this.nextButton = ((ImageButton)findViewById(R.id.adView_Imagebutton2));
    this.nextButton.setOnClickListener(new View.OnClickListener()
    {
      public final void onClick(View paramAnonymousView)
      {
        if ((ViewOne.this.isDownloadFlag) && (AdManager.isDwonFail)) {
          ViewOne.access$002(ViewOne.this, false);
        }
        if (ViewOne.this.isDownloadFlag)
        {
          ViewOne.this.toastUtil.toast("正在下载，请您耐心等待...");
          return;
        }
        ViewOne.access$312(ViewOne.this, 1);
        if (ViewOne.this.adNum > ViewOne.listNvAd.size() - 1) {
          ViewOne.access$302(ViewOne.this, 0);
        }
        ViewOne.this.setupAdapter();
        if (AdManager.isConnect) {
          MercuryExecutorService.execute(new Task("one", "-1", "-1", "-1", "1", ViewOne.this.httpUtil));
        }
        paramAnonymousView = new HashMap();
        paramAnonymousView.put("AppPackageName", ViewOne.mContext.getPackageName());
        paramAnonymousView.put("AdName", ((AdAdvertisement)ViewOne.listNvAd.get(0)).getName());
        paramAnonymousView.put("AdId", String.valueOf(((AdAdvertisement)ViewOne.listNvAd.get(0)).getId()));
        paramAnonymousView.put("Mercury_ID", AdManager.getMercuryId(ViewOne.mContext));
        LoggerUtil.log(ViewOne.this, "M_Click_Next", paramAnonymousView);
      }
    });
    this.listView.setEnabled(false);
  }
  
  private void setupAdapter()
  {
    this.listItem = getListItem();
    this.adapter = new OneAdapter(this.listItem, this.adNum, this);
    this.listView.setAdapter(this.adapter);
  }
  
  private void startMarquee(String paramString)
  {
    this.marqueeTextView.setBackgroundColor(Color.argb(77, 0, 0, 0));
    this.marqueeTextView.setSelected(true);
    this.marqueeTextView.setTextColor(-1);
    this.marqueeTextView.setTextSize(18.0F);
    this.marqueeTextView.setText(paramString);
  }
  
  public void notifyAdViewType(String paramString)
  {
    String str = this.TAG;
    new StringBuilder("Got notified ad type.").append(paramString).toString();
    if (AdManager.listNvAd != null)
    {
      listNvAd = AdManager.listNvAd;
      paramString = this.mHandler.obtainMessage();
      paramString.what = 4;
      this.mHandler.sendMessage(paramString);
    }
  }
  
  public void onActivateFailed(String paramString)
  {
    finish();
  }
  
  public void onActivateSucceed(AdAdvertisement paramAdAdvertisement)
  {
    finish();
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    boolean bool;
    if (paramInt1 == 1024)
    {
      bool = CheckNet.isConnect();
      new StringBuilder("重新判断网络连接！").append(bool).toString();
      if ((bool) || (AdManager.sdkVersion.equals("15"))) {
        break label63;
      }
      AdManager.openConnect(listNvAd, this);
    }
    for (;;)
    {
      super.onActivityResult(paramInt1, paramInt2, paramIntent);
      return;
      label63:
      AdManager.isConnect = bool;
      AdManager.getAd();
      AdManager.adViewDestory();
      AdManager.initAdView();
    }
  }
  
  public void onAutoStartFail(String paramString)
  {
    finish();
  }
  
  public void onBack()
  {
    finish();
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    getWindow().requestFeature(1);
    super.onCreate(paramBundle);
    paramBundle = this.TAG;
    init();
    AdManager.checkQuietlyDownloadPermission(this);
  }
  
  protected void onDestroy()
  {
    super.onDestroy();
    this.count = 0;
    String str = this.TAG;
  }
  
  public void onDonwlaodFail(String paramString)
  {
    finish();
  }
  
  public void onInstallFail(String paramString)
  {
    finish();
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (this.backNum <= 0)
    {
      this.backNum += 1;
      this.toastUtil.toast("退出安装则游戏无法被激活，再按一次退出程序。");
      return false;
    }
    if ((paramInt == 4) && (paramKeyEvent.getRepeatCount() == 0))
    {
      OnAdStateListener localOnAdStateListener = AdManager.adactivation;
      if (localOnAdStateListener != null) {
        localOnAdStateListener.onBack();
      }
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public void onNewIntent(Intent paramIntent)
  {
    String str = this.TAG;
    this.newIntentAdId = paramIntent.getIntExtra("NOTIFICATION_AD_ID", -1);
  }
  
  protected void onPause()
  {
    LoggerUtil.pause(this);
    super.onPause();
    String str = this.TAG;
  }
  
  protected void onResume()
  {
    LoggerUtil.resume(this);
    if (SystemProject.mContext == null) {
      SystemProject.mContext = getApplicationContext();
    }
    mContext = this;
    if (AdManager.adContext == null) {
      AdManager.adContext = mContext;
    }
    if (UserInfo.mContext == null) {
      UserInfo.mContext = this;
    }
    if (ImageLoader.context == null) {
      ImageLoader.context = this;
    }
    if (this.httpUtil == null) {
      this.httpUtil = new HttpUtil();
    }
    if (this.apkUtil == null)
    {
      this.apkUtil = new ApkUtil(this);
      this.apkUtil.initState();
    }
    if (this.toastUtil == null) {
      this.toastUtil = new ToastUtil(mContext);
    }
    if (this.mHandler == null) {
      this.mHandler = new a();
    }
    Object localObject = AdManager.listNvAd;
    listNvAd = (List)localObject;
    AdManager.openConnect((List)localObject, this);
    if (AdManager.erInternet) {
      this.toastUtil.toast("网络连接异常，请您稍后再试。");
    }
    refresh();
    localObject = this.TAG;
    this.count = 0;
    this.isDownloadFlag = false;
    super.onResume();
  }
  
  protected void onStop()
  {
    super.onStop();
    String str = this.TAG;
  }
  
  public void onUnavailableAds()
  {
    String str = this.TAG;
    finish();
  }
  
  public void refresh()
  {
    if (listNvAd != null)
    {
      int j;
      if (getIntent() != null)
      {
        int i = getIntent().getIntExtra("NOTIFICATION_AD_ID", -1);
        localObject = this.TAG;
        new StringBuilder("push id=").append(i).toString();
        if (this.newIntentAdId != -1)
        {
          i = this.newIntentAdId;
          this.newIntentAdId = -1;
        }
        if (i != -1)
        {
          j = 0;
          if (j < listNvAd.size())
          {
            if (((AdAdvertisement)listNvAd.get(j)).getId() != i) {
              break label273;
            }
            this.adNum = j;
            localObject = this.TAG;
            new StringBuilder("push广告进入").append(((AdAdvertisement)listNvAd.get(j)).getName()).toString();
            localObject = new HashMap();
            ((HashMap)localObject).put("AdName", ((AdAdvertisement)listNvAd.get(j)).getName());
            ((HashMap)localObject).put("Mercury_ID", AdManager.getMercuryId(this));
            ((HashMap)localObject).put("AppPackageName", getPackageName());
            ((HashMap)localObject).put("AdId", String.valueOf(((AdAdvertisement)listNvAd.get(j)).getId()));
            LoggerUtil.log(this, "M_Notification_Click", (Map)localObject);
          }
        }
      }
      for (;;)
      {
        if (!listNvAd.isEmpty()) {
          setupAdapter();
        }
        localObject = this.mHandler.obtainMessage();
        ((Message)localObject).what = 1;
        this.mHandler.sendMessage((Message)localObject);
        return;
        label273:
        j += 1;
        break;
        localObject = this.TAG;
      }
    }
    AdManager.init(this, AdManager.getMercuryId(this), this);
    if (this.progressDialog == null) {
      this.progressDialog = new ProgressDialog(this);
    }
    this.progressDialog.setMessage("读取中，请稍候");
    this.progressDialog.setCancelable(false);
    this.progressDialog.setIndeterminate(true);
    this.progressDialog.show();
    Object localObject = this.TAG;
  }
  
  public static class ListItemView
  {
    public TextView appInfo;
    public TextView appName;
    public ImageView imageView;
    
    public ListItemView() {}
  }
  
  final class a
    extends Handler
  {
    public a() {}
    
    public final void handleMessage(Message paramMessage)
    {
      switch (paramMessage.what)
      {
      }
      do
      {
        do
        {
          return;
        } while ((AdManager.mercuryActivationMsg == null) || ("".equals(AdManager.mercuryActivationMsg)));
        ViewOne.this.startMarquee(AdManager.mercuryActivationMsg);
        return;
        ViewOne.this.refresh();
      } while ((ViewOne.this.progressDialog == null) || (!ViewOne.this.progressDialog.isShowing()));
      ViewOne.this.progressDialog.dismiss();
    }
  }
}
