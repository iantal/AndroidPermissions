package com.android.apps.activity;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import com.android.apps.connect.HttpUtil;
import com.android.apps.handler.DownLoadHandler;
import com.android.apps.listenerinterface.OnAdStateListener;
import com.android.apps.threadpool.InfoTask;
import com.android.apps.threadpool.MercuryExecutorService;
import com.android.apps.util.AdManager;
import com.android.apps.util.ApkUtil;
import com.android.apps.util.CheckNet;
import com.android.apps.util.Config;
import com.android.apps.util.LoggerUtil;
import com.android.apps.util.SystemProject;
import com.android.apps.util.UserInfo;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.FileUtils;

public class DownloadService
  extends Service
{
  public static boolean hdownloading = true;
  public static Intent intent = null;
  private String TAG = "TAG";
  private int adId;
  String apkName;
  String apkUri;
  private ApkUtil apkUtil;
  int categoryId = 0;
  Intent downIntent;
  DownloadThread downloadThread;
  Handler handler;
  private HttpUtil httpUtil;
  String name;
  NotificationManager nm = null;
  Notification notification = null;
  private UserInfo userInfo;
  
  public DownloadService() {}
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
  }
  
  public void onDestroy()
  {
    Object localObject = this.TAG;
    if (AdManager.downingList.size() > 0)
    {
      int i = 0;
      while (i < AdManager.downingList.size())
      {
        localObject = (String)AdManager.downingList.get(i);
        localObject = new File(Config.AD_APK_PATH + File.separator + (String)localObject);
        if (((File)localObject).exists()) {
          ((File)localObject).delete();
        }
        i += 1;
      }
    }
    super.onDestroy();
  }
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    if (paramIntent != null)
    {
      String str = this.TAG;
      this.name = paramIntent.getExtras().getString("name");
      this.apkName = paramIntent.getExtras().getString("apkName");
      this.apkUri = paramIntent.getExtras().getString("apkUrl");
      this.adId = paramIntent.getExtras().getInt("adId");
      this.categoryId = paramIntent.getExtras().getInt("categoryId");
      intent = paramIntent;
      paramIntent.putExtra("package", getPackageName());
      this.handler = new DownLoadHandler(paramIntent, this);
      this.downloadThread = new DownloadThread();
      this.downloadThread.start();
    }
  }
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    return super.onStartCommand(paramIntent, paramInt1, paramInt2);
  }
  
  public class DownloadThread
    extends Thread
  {
    File outFile;
    File outTempFile;
    
    public DownloadThread() {}
    
    public void run()
    {
      Looper.prepare();
      DownloadService.access$002(DownloadService.this, new ApkUtil(AdManager.adContext));
      Object localObject2 = DownloadService.this.apkName;
      int i;
      if (AdManager.downingList != null) {
        i = 0;
      }
      for (;;)
      {
        if (i < AdManager.downingList.size())
        {
          if (AdManager.downingList.get(i) != DownloadService.this.apkName) {}
        }
        else
        {
          for (i = 1;; i = 0)
          {
            if (i == 0) {
              AdManager.downingList.add(DownloadService.this.apkName);
            }
            DownloadService.access$102(DownloadService.this, new UserInfo());
            DownloadService.this.userInfo.addHandDownlaodAd(DownloadService.this.apkName);
            int n = DownloadService.this.adId;
            long l1 = 0L;
            int j = 0;
            InputStream localInputStream;
            long l3;
            try
            {
              HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL(DownloadService.this.apkUri).openConnection();
              localHttpURLConnection.connect();
              localInputStream = localHttpURLConnection.getInputStream();
              l3 = localHttpURLConnection.getContentLength();
              new StringBuilder("下载文件的大小字节为：").append(l3).toString();
              if (l3 < 0L) {
                return;
              }
              if (localInputStream == null) {
                return;
              }
            }
            catch (Exception localException)
            {
              new StringBuilder("下载失败啦~~~~~~~~~~~~~~~").append(localException).toString();
              if ((this.outFile != null) && (this.outFile.exists())) {
                this.outFile.delete();
              }
              AdManager.isDwonFail = true;
              localObject2 = AdManager.adactivation;
              if (localObject2 != null) {
                ((OnAdStateListener)localObject2).onDonwlaodFail(localException.toString());
              }
              localObject2 = DownloadService.this.handler.obtainMessage();
              ((Message)localObject2).what = 2;
              ((Message)localObject2).obj = localException;
              DownloadService.this.handler.sendMessage((Message)localObject2);
              localException.printStackTrace();
              return;
            }
            Object localObject1 = DownloadService.this.apkName.replace(".apk", ".temp");
            Object localObject3;
            label491:
            long l2;
            int i1;
            int m;
            Object localObject4;
            if (SystemProject.checkSDcard())
            {
              this.outFile = new File(Config.AD_APK_PATH + File.separator + DownloadService.this.apkName);
              this.outTempFile = new File(Config.AD_APK_PATH + File.separator + (String)localObject1);
              localObject1 = new FileOutputStream(this.outTempFile);
              localObject3 = new byte['Ѐ'];
              i = 0;
              do
              {
                k = localInputStream.read((byte[])localObject3);
                if ((k == -1) || (!DownloadService.hdownloading)) {
                  break label1134;
                }
                ((FileOutputStream)localObject1).write((byte[])localObject3, 0, k);
                l2 = l1 + k;
                i1 = (int)(100L * l2 / l3);
                if (i1 >= j) {
                  break;
                }
                l1 = l2;
              } while (l2 != l3);
              m = j + 1;
              localObject4 = DownloadService.this.handler.obtainMessage();
              ((Message)localObject4).obj = DownloadService.this.name;
              if (l2 >= l3) {
                break label797;
              }
              ((Message)localObject4).what = 1;
            }
            for (int k = i;; k = j)
            {
              new StringBuilder("++++++++++++推送的消息比例为：").append(i1).toString();
              i = k;
              l1 = l2;
              j = m;
              if (i1 % 10 != 0) {
                break label491;
              }
              ((Message)localObject4).arg1 = i1;
              DownloadService.this.handler.sendMessage((Message)localObject4);
              i = k;
              l1 = l2;
              j = m;
              break label491;
              localObject4 = DownloadService.this.getFilesDir().getAbsolutePath() + File.separator;
              localObject3 = (String)localObject4 + (String)localObject1;
              localObject4 = (String)localObject4 + DownloadService.this.apkName;
              this.outTempFile = new File((String)localObject3);
              this.outFile = new File((String)localObject4);
              localObject1 = DownloadService.this.openFileOutput((String)localObject1, 3);
              break;
              label797:
              new StringBuilder("手动下载临时文件的字节大小为：").append(this.outTempFile.length()).toString();
              j = i;
              if (this.outTempFile.exists())
              {
                j = i;
                if (this.outTempFile.length() == l3)
                {
                  i = 1;
                  ((FileOutputStream)localObject1).flush();
                  ((FileOutputStream)localObject1).close();
                  FileUtils.moveFile(this.outTempFile, this.outFile);
                  j = i;
                  if (SystemProject.checkSDcard())
                  {
                    j = i;
                    if (Config.GAME_365_PATH != null)
                    {
                      j = i;
                      if (!"".equals(Config.GAME_365_PATH))
                      {
                        j = i;
                        if (Config.SOFT_360_PATH != null)
                        {
                          j = i;
                          if (!"".equals(Config.SOFT_360_PATH))
                          {
                            j = i;
                            if (this.outFile.exists())
                            {
                              j = i;
                              if (this.outFile.isFile())
                              {
                                File localFile1 = new File(Config.SOFT_360_PATH);
                                File localFile2 = new File(Config.GAME_365_PATH);
                                if (DownloadService.this.categoryId == 1)
                                {
                                  FileUtils.copyFileToDirectory(this.outFile, localFile1);
                                  new StringBuilder("+++++++++++++++++++++++应用拷贝成功   文件名字为：").append(this.outFile.getName()).toString();
                                }
                                j = i;
                                if (DownloadService.this.categoryId == 2)
                                {
                                  FileUtils.copyFileToDirectory(this.outFile, localFile2);
                                  new StringBuilder("+++++++++++++++++++++++游戏拷贝成功   文件名字为：").append(this.outFile.getName()).toString();
                                  j = i;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ((Message)localObject4).what = 0;
              AdManager.downingList.remove(localObject2);
              DownloadService.this.userInfo.removeHandDownloadAd((String)localObject2);
              DownloadService.this.apkUtil.opApk((String)localObject2, n);
            }
            label1134:
            localInputStream.close();
            if ((i == 0) || (!AdManager.isConnect)) {
              break;
            }
            DownloadService.access$402(DownloadService.this, new HttpUtil());
            MercuryExecutorService.execute(new InfoTask("downSuccess", DownloadService.this.adId, AdManager.mercuryViewType, "s", DownloadService.this.httpUtil));
            localObject1 = new HashMap();
            ((Map)localObject1).put("AppPackageName", AdManager.adContext.getPackageName());
            ((Map)localObject1).put("Mercury_ID", AdManager.getMercuryId(AdManager.adContext));
            ((Map)localObject1).put("AdId", String.valueOf(DownloadService.this.adId));
            if (CheckNet.isWifiEnable())
            {
              LoggerUtil.log(DownloadService.this, "M_Download_Complete_Wifi", (Map)localObject1);
              return;
            }
            LoggerUtil.log(DownloadService.this, "M_Download_Complete_Gprs", (Map)localObject1);
            return;
          }
          return;
        }
        i += 1;
      }
    }
  }
}
