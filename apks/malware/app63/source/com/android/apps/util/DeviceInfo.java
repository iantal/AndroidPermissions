package com.android.apps.util;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;

public class DeviceInfo
{
  public static String carrier_id;
  public static String device_uuid;
  public static int dpi;
  public static int height;
  public static Context mContext;
  public static String manufacturer;
  public static String name;
  public static String phoneNumber;
  public static String sdkVersion;
  public static String time;
  public static int width;
  
  public DeviceInfo() {}
  
  public static String getConnectType()
  {
    Object localObject2;
    try
    {
      Object localObject1 = ((ConnectivityManager)mContext.getSystemService("connectivity")).getActiveNetworkInfo();
      localObject2 = ((NetworkInfo)localObject1).getTypeName();
      if ((localObject2 != null) && (((String)localObject2).toLowerCase().equals("wifi"))) {
        return ((String)localObject2).toLowerCase();
      }
      localObject1 = ((NetworkInfo)localObject1).getSubtypeName();
      localObject2 = localObject1;
      if (localObject1 == null) {
        return "";
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      localObject2 = "";
    }
    return localObject2;
  }
  
  public static String getHostIp()
  {
    try
    {
      InetAddress localInetAddress;
      do
      {
        localObject = NetworkInterface.getNetworkInterfaces();
        Enumeration localEnumeration;
        while (!localEnumeration.hasMoreElements())
        {
          if (!((Enumeration)localObject).hasMoreElements()) {
            break;
          }
          localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
        }
        localInetAddress = (InetAddress)localEnumeration.nextElement();
      } while (localInetAddress.isLoopbackAddress());
      Object localObject = localInetAddress.getHostAddress();
      return localObject;
    }
    catch (Exception localException)
    {
      return null;
    }
    catch (SocketException localSocketException)
    {
      for (;;) {}
    }
  }
  
  public int getDpi()
  {
    int i = new DisplayMetrics().densityDpi;
    dpi = i;
    return i;
  }
  
  public int getHeight()
  {
    int i = mContext.getWallpaperDesiredMinimumHeight();
    height = i;
    return i;
  }
  
  public String getLocalMacAddress()
  {
    try
    {
      String str = ((WifiManager)mContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "-1";
  }
  
  public String getManufacturer()
  {
    try
    {
      String str = Build.MANUFACTURER;
      manufacturer = str;
      return str;
    }
    catch (Exception localException) {}
    return "-1";
  }
  
  public String getName()
  {
    String str = Build.DEVICE;
    name = str;
    return str;
  }
  
  public String getPhoneImei()
  {
    try
    {
      String str = ((TelephonyManager)mContext.getSystemService("phone")).getDeviceId();
      device_uuid = str;
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "-1";
  }
  
  public String getPhoneNumber()
  {
    try
    {
      String str = ((TelephonyManager)mContext.getSystemService("phone")).getLine1Number();
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "-1";
  }
  
  public String getSdkVersion()
  {
    try
    {
      String str = Build.VERSION.SDK;
      sdkVersion = str;
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "-1";
  }
  
  public String getSimOperatorName()
  {
    try
    {
      String str = ((TelephonyManager)mContext.getSystemService("phone")).getSimOperator();
      carrier_id = str;
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "-1";
  }
  
  public String getTime()
  {
    Object localObject = new Date();
    Calendar.getInstance();
    localObject = ((SimpleDateFormat)SimpleDateFormat.getDateInstance()).format((Date)localObject);
    time = (String)localObject;
    return localObject;
  }
  
  public int getWidth()
  {
    int i = mContext.getWallpaperDesiredMinimumWidth();
    width = i;
    return i;
  }
}
