package com.android.apps.util;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.os.Bundle;
import com.android.apps.activity.BGDownloadService;
import com.android.apps.activity.DownloadService;
import com.android.apps.bean.AdAdvertisement;
import com.android.apps.connect.HttpUtil;
import com.android.apps.listenerinterface.OnAdStateListener;
import com.android.apps.listenerinterface.OnQuietlyDownLintener;
import com.android.apps.threadpool.InfoTask;
import com.android.apps.threadpool.MercuryExecutorService;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ApkUtil
{
  public static OnQuietlyDownLintener quietlyDownLintener;
  public static List<AdAdvertisement> quietlyList;
  private String TAG = "ApkUtil";
  private HttpUtil httpUtil;
  public Context mContext;
  
  public ApkUtil(Context paramContext)
  {
    this.mContext = paramContext;
  }
  
  public void downApk(String paramString1, String paramString2, int paramInt1, int paramInt2, String paramString3)
  {
    Intent localIntent = new Intent();
    paramString3 = paramString3 + "?imsi=" + AdManager.device_uuid + "&macAddress=" + AdManager.mac + "&mid=" + AdManager.mercuryId + "&adId=" + paramInt1 + "&way=s&gamePackage=" + AdManager.gamePackage + "&stage=1";
    HashMap localHashMap = new HashMap();
    localHashMap.put("AppPackageName", this.mContext.getPackageName());
    localHashMap.put("AdName", paramString1);
    localHashMap.put("AdId", String.valueOf(paramInt1));
    localHashMap.put("Mercury_ID", AdManager.getMercuryId(this.mContext));
    LoggerUtil.log(this.mContext, "M_Click_Download", localHashMap);
    new StringBuilder("downApk的url:").append(paramString3).toString();
    localIntent.putExtra("name", paramString1);
    localIntent.putExtra("apkName", "j_" + paramString2);
    localIntent.putExtra("adId", paramInt1);
    localIntent.putExtra("categoryId", paramInt2);
    localIntent.putExtra("apkUrl", paramString3);
    localIntent.setClass(this.mContext, DownloadService.class);
    DownloadService.hdownloading = true;
    this.mContext.startService(localIntent);
  }
  
  public List<AdAdvertisement> filterAd(List<AdAdvertisement> paramList)
  {
    ArrayList localArrayList = new ArrayList();
    UserInfo localUserInfo = new UserInfo();
    Iterator localIterator = paramList.iterator();
    while (localIterator.hasNext())
    {
      AdAdvertisement localAdAdvertisement = (AdAdvertisement)localIterator.next();
      if ((localUserInfo.checkAd(localAdAdvertisement.getApkPackage()) != null) || (NativeAd.isInstalled(localAdAdvertisement.getApkPackage()))) {
        localArrayList.add(localAdAdvertisement);
      }
    }
    paramList.removeAll(localArrayList);
    return paramList;
  }
  
  public String getKindOfApkName(String paramString)
  {
    Object localObject2 = null;
    for (;;)
    {
      int i;
      try
      {
        Object localObject1;
        Object localObject3;
        if (SystemProject.checkSDcard())
        {
          localObject1 = new File(Config.AD_APK_PATH);
          if (!((File)localObject1).exists()) {
            break;
          }
          localObject3 = ((File)localObject1).list();
          if ((paramString == null) || ("".equals(paramString)) || (localObject3 == null) || (localObject3.length <= 0)) {
            break;
          }
          int j = localObject3.length;
          i = 0;
          localObject1 = null;
          localObject2 = localObject1;
          if (i >= j) {
            break label303;
          }
          localObject2 = localObject3[i];
          if ((localObject2 == null) || ("".equals(localObject2)) || (!localObject2.trim().toLowerCase().endsWith(paramString.trim().toLowerCase() + ".apk"))) {
            break label293;
          }
          localObject1 = localObject2;
          break label293;
        }
        if (paramString.indexOf("j_") == -1)
        {
          paramString = "j_" + paramString;
          localObject1 = paramString;
          if (paramString.indexOf(".apk") == -1) {
            localObject1 = paramString + ".apk";
          }
          localObject3 = new File(this.mContext.getFilesDir().getAbsolutePath() + File.separator + (String)localObject1);
          paramString = localObject2;
          if (!((File)localObject3).exists()) {
            return paramString;
          }
          long l = ((File)localObject3).length();
          paramString = localObject2;
          if (l <= 0L) {
            return paramString;
          }
          return localObject1;
        }
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return null;
      }
      continue;
      label293:
      i += 1;
    }
    localObject2 = null;
    label303:
    paramString = localObject2;
    return paramString;
  }
  
  public void initState()
  {
    AdManager.successInstallAd = null;
    AdManager.successActivate = false;
    AdManager.isAutoStartFail = false;
    AdManager.isDwonFail = false;
    AdManager.isInstallFail = false;
  }
  
  public boolean isDownloding(String paramString)
  {
    try
    {
      if (AdManager.downingList != null)
      {
        int i = 0;
        while (i < AdManager.downingList.size())
        {
          if (paramString.equals(AdManager.downingList.get(i)))
          {
            new StringBuilder("检测的名字：").append((String)AdManager.downingList.get(i)).toString();
            return true;
          }
          i += 1;
        }
      }
      return false;
    }
    catch (Exception paramString)
    {
      new StringBuilder("测试出现异常~~~~~~~~~~~").append(paramString).toString();
      paramString.printStackTrace();
    }
    return false;
  }
  
  public boolean launchExternalApplication(String paramString)
  {
    Object localObject1 = this.mContext.getPackageManager();
    try
    {
      Object localObject2 = ((PackageManager)localObject1).getPackageInfo(paramString, 0);
      Intent localIntent = new Intent("android.intent.action.MAIN", null);
      localIntent.addCategory("android.intent.category.LAUNCHER");
      localIntent.setPackage(((PackageInfo)localObject2).packageName);
      localObject1 = (ResolveInfo)((PackageManager)localObject1).queryIntentActivities(localIntent, 0).iterator().next();
      if (localObject1 != null)
      {
        localObject1 = ((ResolveInfo)localObject1).activityInfo.name;
        localObject2 = new Intent("android.intent.action.MAIN");
        ((Intent)localObject2).addCategory("android.intent.category.LAUNCHER");
        ((Intent)localObject2).setComponent(new ComponentName(paramString, (String)localObject1));
        this.mContext.startActivity((Intent)localObject2);
      }
      if (AdManager.isConnect)
      {
        paramString = getKindOfApkName(AdManager.successInstallAd.getApkName());
        this.httpUtil = new HttpUtil();
        localObject1 = this.TAG;
        MercuryExecutorService.execute(new InfoTask("apkStart", AdManager.successInstallAd.getId(), AdManager.mercuryViewType, paramString.substring(0, 1), this.httpUtil));
      }
      return true;
    }
    catch (Exception paramString)
    {
      AdManager.isAutoStartFail = true;
      localObject1 = AdManager.adactivation;
      if (localObject1 != null) {
        ((OnAdStateListener)localObject1).onAutoStartFail(paramString.toString());
      }
      paramString.printStackTrace();
    }
    return false;
  }
  
  public void opApk(String paramString, int paramInt)
  {
    Object localObject1 = new ToastUtil(this.mContext);
    this.httpUtil = new HttpUtil();
    localObject2 = new HashMap();
    ((Map)localObject2).put("AppPackageName", this.mContext.getPackageName());
    ((Map)localObject2).put("Mercury_ID", AdManager.getMercuryId(this.mContext));
    ((Map)localObject2).put("AdId", String.valueOf(paramInt));
    LoggerUtil.log(this.mContext, "M_Click_Install", (Map)localObject2);
    new StringBuilder("开始安装：").append(paramString).toString();
    new StringBuilder("判断要安装的应用是否在静默下载apkUri.substring(0, 1).equals(j):").append(paramString.substring(0, 1).equals("j")).toString();
    new StringBuilder("判断要安装的应用是否在静默下载apkUri.equals(QuietlyDownService.apkName):").append(paramString.equals(BGDownloadService.apkName)).toString();
    new StringBuilder("判断要安装的应用是否在正常下载isDownloding(apkName):").append(isDownloding(paramString)).append("....apkUrl:").append(paramString).toString();
    if ((paramString.substring(0, 1).equals("j")) && (paramString.equals(BGDownloadService.apkName)))
    {
      if (BGDownloadService.totalSize != 0)
      {
        ((ToastUtil)localObject1).toast("开始下载，完成后自动打开。");
        quietlyDownLintener = new OnQuietlyDownLintener()
        {
          public final void onQuietlyDownOverListener(boolean paramAnonymousBoolean)
          {
            if (paramAnonymousBoolean) {
              ApkUtil.this.opApk(BGDownloadService.apkName, BGDownloadService.adId);
            }
          }
          
          public final void onQuietlyDownloadDestory() {}
        };
        return;
      }
      for (;;)
      {
        try
        {
          quietlyDownLintener = new OnQuietlyDownLintener()
          {
            public final void onQuietlyDownOverListener(boolean paramAnonymousBoolean) {}
            
            public final void onQuietlyDownloadDestory() {}
          };
          localObject2 = new Intent();
          ((Intent)localObject2).setAction("android.intent.action.VIEW");
          if (SystemProject.checkSDcard())
          {
            localObject1 = new File(Config.AD_APK_PATH + File.separator + paramString);
            ((Intent)localObject2).setDataAndType(Uri.fromFile((File)localObject1), "application/vnd.android.package-archive");
            this.mContext.startActivity((Intent)localObject2);
            if (!AdManager.isConnect) {
              break;
            }
            localObject1 = this.TAG;
            MercuryExecutorService.execute(new InfoTask("install", paramInt, AdManager.mercuryViewType, paramString.substring(0, 1), this.httpUtil));
            return;
          }
        }
        catch (Exception paramString)
        {
          AdManager.isInstallFail = true;
          localObject1 = AdManager.adactivation;
          if (localObject1 != null) {
            ((OnAdStateListener)localObject1).onInstallFail(paramString.toString());
          }
          paramString.printStackTrace();
          return;
        }
        localObject1 = new File(this.mContext.getFilesDir().getAbsolutePath() + File.separator + paramString);
      }
    }
    if ((isDownloding(paramString)) && (!paramString.substring(0, 1).equals("j")) && (!paramString.equals(BGDownloadService.apkName)))
    {
      ((ToastUtil)localObject1).toast("正在下载，完成后自动打开。");
      return;
    }
    for (;;)
    {
      try
      {
        quietlyDownLintener = new OnQuietlyDownLintener()
        {
          public final void onQuietlyDownOverListener(boolean paramAnonymousBoolean) {}
          
          public final void onQuietlyDownloadDestory() {}
        };
      }
      catch (Exception paramString)
      {
        AdManager.isInstallFail = true;
        localObject1 = AdManager.adactivation;
        if (localObject1 != null) {
          ((OnAdStateListener)localObject1).onInstallFail(paramString.toString());
        }
        paramString.printStackTrace();
        return;
      }
      try
      {
        localObject2 = new Intent();
        ((Intent)localObject2).setAction("android.intent.action.VIEW");
        if (!SystemProject.checkSDcard()) {
          break label641;
        }
        localObject1 = new File(Config.AD_APK_PATH + File.separator + paramString);
        ((Intent)localObject2).setDataAndType(Uri.fromFile((File)localObject1), "application/vnd.android.package-archive");
        this.mContext.startActivity((Intent)localObject2);
      }
      catch (Exception localException)
      {
        localObject2 = this.TAG;
        localException.printStackTrace();
        continue;
      }
      if (!AdManager.isConnect) {
        break;
      }
      MercuryExecutorService.execute(new InfoTask("install", paramInt, AdManager.mercuryViewType, paramString.substring(0, 1), this.httpUtil));
      return;
      label641:
      localObject1 = new File(this.mContext.getFilesDir().getAbsolutePath() + File.separator + paramString);
    }
  }
  
  public void quietlyDown(List<AdAdvertisement> paramList)
  {
    if ((paramList != null) && (paramList.size() > 0))
    {
      quietlyList = new ArrayList();
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        AdAdvertisement localAdAdvertisement = (AdAdvertisement)paramList.next();
        String str = getKindOfApkName(localAdAdvertisement.getApkName());
        if ((str == null) || ("".equals(str))) {
          quietlyList.add(localAdAdvertisement);
        }
      }
      paramList = new Intent();
      paramList.setClass(this.mContext, BGDownloadService.class);
      paramList.putExtras(new Bundle());
      this.mContext.startService(paramList);
    }
  }
  
  public AdAdvertisement setNullAd(String paramString1, String paramString2)
  {
    AdAdvertisement localAdAdvertisement = new AdAdvertisement();
    localAdAdvertisement.setName(paramString1);
    localAdAdvertisement.setApkInfo(paramString2);
    localAdAdvertisement.setlIconUrl(" ");
    localAdAdvertisement.setApkName(" ");
    localAdAdvertisement.setApkUrl(" ");
    localAdAdvertisement.setApkPackage(" ");
    localAdAdvertisement.setsIconUrl(" ");
    localAdAdvertisement.setbIconUrl(" ");
    localAdAdvertisement.setDetails(" ");
    return localAdAdvertisement;
  }
}
