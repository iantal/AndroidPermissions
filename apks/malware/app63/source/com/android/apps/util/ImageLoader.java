package com.android.apps.util;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Message;
import android.widget.ImageView;
import com.android.apps.R.drawable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

public class ImageLoader
{
  public static Context context;
  static String imageUrl2 = null;
  private String TAG = "TAG";
  
  public ImageLoader() {}
  
  public Bitmap initImage(String paramString, ImageView paramImageView, Context paramContext, ImageCallback paramImageCallback)
  {
    boolean bool2 = true;
    boolean bool1 = true;
    if ((paramString.startsWith("http")) || (paramString.startsWith("android")))
    {
      paramContext = paramString.substring(paramString.lastIndexOf("/"));
      paramContext = BitmapFactory.decodeFile(Config.IMAGE_TEMP + paramContext);
      Object localObject = this.TAG;
      localObject = new StringBuilder("++++++++++++ sd img url is : ").append(paramString).append("+++++++++++++++bitmap is null :");
      if (paramContext == null) {}
      for (;;)
      {
        ((StringBuilder)localObject).append(bool1).toString();
        if ((paramContext != null) || (imageUrl2 == paramString)) {
          break;
        }
        imageUrl2 = paramString;
        loadBitmap(paramString, paramImageView, paramImageCallback);
        return null;
        bool1 = false;
      }
      return paramContext;
    }
    try
    {
      paramImageView = BitmapFactory.decodeStream(paramContext.getResources().getAssets().open(paramString));
      paramContext = this.TAG;
      paramString = new StringBuilder("++++++++++++ assets img url is : ").append(paramString).append("+++++++++++++++bitmap is null :");
      if (paramImageView == null) {}
      for (bool1 = bool2;; bool1 = false)
      {
        paramString.append(bool1).toString();
        return paramImageView;
      }
      return null;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public void loadBitmap(final String paramString, ImageView paramImageView, final ImageCallback paramImageCallback)
  {
    new Thread()
    {
      public final void handleMessage(Message paramAnonymousMessage)
      {
        paramImageCallback.imageLoaded((Bitmap)paramAnonymousMessage.obj);
      }
    }
    {
      public final void run()
      {
        Object localObject = ImageLoader.this.loadImageFromUrl(paramString);
        localObject = this.ax.obtainMessage(0, localObject);
        this.ax.sendMessage((Message)localObject);
      }
    }.start();
  }
  
  protected Bitmap loadImageFromUrl(String paramString)
  {
    try
    {
      InputStream localInputStream = new URL(paramString).openStream();
      paramString = paramString.substring(paramString.lastIndexOf("/"));
      FileOutputStream localFileOutputStream = new FileOutputStream(new File(Config.IMAGE_TEMP + paramString));
      byte[] arrayOfByte = new byte['Ð€'];
      for (;;)
      {
        int i = localInputStream.read(arrayOfByte);
        if (i == -1) {
          break;
        }
        localFileOutputStream.write(arrayOfByte, 0, i);
      }
      return BitmapFactory.decodeResource(context.getResources(), R.drawable.mercury_nullimagelist);
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      if ((AdManager.mercuryViewType.equals("one")) || (AdManager.mercuryViewType.equals("banner")))
      {
        return BitmapFactory.decodeResource(context.getResources(), R.drawable.mercury_nullimage);
        localInputStream.close();
        localFileOutputStream.flush();
        localFileOutputStream.close();
        paramString = BitmapFactory.decodeFile(Config.IMAGE_TEMP + paramString);
        return paramString;
      }
    }
  }
  
  public static class CallbackImpl
    implements ImageLoader.ImageCallback
  {
    private ImageView imageView;
    
    public CallbackImpl(ImageView paramImageView)
    {
      this.imageView = paramImageView;
    }
    
    public void imageLoaded(Bitmap paramBitmap)
    {
      this.imageView.setImageBitmap(paramBitmap);
      this.imageView.invalidate();
    }
  }
  
  public static abstract interface ImageCallback
  {
    public abstract void imageLoaded(Bitmap paramBitmap);
  }
}
