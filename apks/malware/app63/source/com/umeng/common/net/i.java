package com.umeng.common.net;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Environment;
import android.view.animation.Animation;
import android.widget.ImageView;
import com.umeng.common.Log;
import com.umeng.common.b;
import com.umeng.common.b.g;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Date;
import java.util.Stack;

public class i
{
  public static boolean a = false;
  private static final String b = i.class.getName();
  private static final long c = 104857600L;
  private static final long d = 10485760L;
  
  public i() {}
  
  private static long a(File paramFile)
  {
    long l1 = 0L;
    long l2 = l1;
    if (paramFile != null)
    {
      l2 = l1;
      if (paramFile.exists())
      {
        if (paramFile.isDirectory()) {
          break label32;
        }
        l2 = l1;
      }
    }
    return l2;
    label32:
    Stack localStack = new Stack();
    localStack.clear();
    localStack.push(paramFile);
    int i;
    do
    {
      l2 = l1;
      if (localStack.isEmpty()) {
        break;
      }
      paramFile = ((File)localStack.pop()).listFiles();
      i = 0;
      l2 = l1;
      l1 = l2;
    } while (i >= paramFile.length);
    if (paramFile[i].isDirectory()) {
      localStack.push(paramFile[i]);
    }
    for (;;)
    {
      i += 1;
      break;
      l2 += paramFile[i].length();
    }
  }
  
  public static String a(Context paramContext, String paramString)
  {
    if (g.c(paramString)) {
      return null;
    }
    for (;;)
    {
      Object localObject;
      byte[] arrayOfByte;
      int i;
      try
      {
        localObject = b(paramString) + ".tmp";
        if (b.b())
        {
          paramContext = Environment.getExternalStorageDirectory().getCanonicalPath();
          l = 104857600L;
          paramContext = new File(paramContext + "/download/.um");
          if (!paramContext.exists()) {
            continue;
          }
          if (a(paramContext.getCanonicalFile()) > l) {
            b(paramContext);
          }
          localObject = new File(paramContext, (String)localObject);
        }
      }
      catch (Exception paramContext)
      {
        long l;
        InputStream localInputStream;
        localObject = null;
      }
      try
      {
        ((File)localObject).createNewFile();
        paramContext = new FileOutputStream((File)localObject);
        localInputStream = (InputStream)new URL(paramString).openConnection().getContent();
        arrayOfByte = new byte['á€€'];
        i = localInputStream.read(arrayOfByte);
        if (i != -1) {
          break label373;
        }
        paramContext.flush();
        localInputStream.close();
        paramContext.close();
        paramContext = new File(((File)localObject).getParent(), ((File)localObject).getName().replace(".tmp", ""));
        ((File)localObject).renameTo(paramContext);
        Log.a(b, "download img[" + paramString + "]  to " + paramContext.getCanonicalPath());
        paramContext = paramContext.getCanonicalPath();
        return paramContext;
      }
      catch (Exception paramContext)
      {
        label373:
        for (;;) {}
      }
      paramContext = paramContext.getCacheDir().getCanonicalPath();
      l = 10485760L;
      continue;
      if (!paramContext.mkdirs())
      {
        Log.b(b, "Failed to create directory" + paramContext.getAbsolutePath() + ". Check permission. Make sure WRITE_EXTERNAL_STORAGE is added in your Manifest.xml");
        continue;
        Log.a(b, paramContext.getStackTrace().toString() + "\t url:\t" + g.a + paramString);
        if ((localObject != null) && (((File)localObject).exists())) {
          ((File)localObject).deleteOnExit();
        }
        return null;
        paramContext.write(arrayOfByte, 0, i);
      }
    }
  }
  
  public static void a(Context paramContext, ImageView paramImageView, String paramString, boolean paramBoolean)
  {
    a(paramContext, paramImageView, paramString, paramBoolean, null, null);
  }
  
  public static void a(Context paramContext, ImageView paramImageView, String paramString, boolean paramBoolean, a paramA)
  {
    a(paramContext, paramImageView, paramString, paramBoolean, paramA, null);
  }
  
  public static void a(Context paramContext, ImageView paramImageView, String paramString, boolean paramBoolean, a paramA, Animation paramAnimation)
  {
    if (paramImageView == null) {}
    do
    {
      return;
      try
      {
        File localFile = b(paramContext, paramString);
        if ((localFile == null) || (!localFile.exists()) || (a)) {
          break;
        }
        if (paramA != null) {
          paramA.a(b.a);
        }
        b(paramContext, paramImageView, c(localFile.getAbsolutePath()), paramBoolean, paramA, paramAnimation);
        return;
      }
      catch (IOException paramContext) {}
    } while (paramA == null);
    paramA.a(h.a.b);
    return;
    new c(paramContext, paramImageView, paramString, b.b, paramBoolean, paramA, paramAnimation).execute(new Object[0]);
  }
  
  protected static File b(Context paramContext, String paramString)
  {
    paramString = b(paramString);
    if (b.b()) {}
    for (paramContext = Environment.getExternalStorageDirectory().getCanonicalPath();; paramContext = paramContext.getCacheDir().getCanonicalPath())
    {
      paramContext = new File(new File(paramContext + "/download/.um"), paramString);
      if (!paramContext.exists()) {
        break;
      }
      return paramContext;
    }
    return null;
  }
  
  private static String b(String paramString)
  {
    int i = paramString.lastIndexOf(".");
    String str = "";
    if (i >= 0) {
      str = paramString.substring(i);
    }
    return g.a(paramString) + str;
  }
  
  private static void b(Context paramContext, ImageView paramImageView, Drawable paramDrawable, boolean paramBoolean, a paramA, Animation paramAnimation)
  {
    if (((paramDrawable != null) && (paramImageView != null)) || (paramA != null)) {}
    try
    {
      paramA.a(h.a.b);
      Log.e(b, "bind drawable failed. drawable [" + paramDrawable + "]  imageView[+" + paramImageView + "+]");
      return;
    }
    finally {}
    if (paramBoolean) {
      paramImageView.setBackgroundDrawable(paramDrawable);
    }
    for (;;)
    {
      if (paramAnimation != null) {
        paramImageView.startAnimation(paramAnimation);
      }
      if (paramA == null) {
        break;
      }
      paramA.a(h.a.a);
      break;
      paramImageView.setImageDrawable(paramDrawable);
    }
  }
  
  private static void b(File paramFile)
  {
    if ((paramFile == null) || (!paramFile.exists()) || (!paramFile.canWrite()) || (!paramFile.isDirectory())) {
      return;
    }
    paramFile = paramFile.listFiles();
    int i = 0;
    label33:
    if (i < paramFile.length)
    {
      if (!paramFile[i].isDirectory()) {
        break label61;
      }
      b(paramFile[i]);
    }
    for (;;)
    {
      i += 1;
      break label33;
      break;
      label61:
      if (new Date().getTime() - paramFile[i].lastModified() > 1800L) {
        paramFile[i].delete();
      }
    }
  }
  
  private static Drawable c(String paramString)
  {
    try
    {
      paramString = Drawable.createFromPath(paramString);
      return paramString;
    }
    catch (OutOfMemoryError paramString)
    {
      Log.e(b, "Resutil fetchImage OutOfMemoryError:" + paramString.toString());
    }
    return null;
  }
  
  public static abstract interface a
  {
    public abstract void a(h.a paramA);
    
    public abstract void a(i.b paramB);
  }
  
  public static enum b {}
  
  static class c
    extends AsyncTask<Object, Integer, Drawable>
  {
    private Context a;
    private String b;
    private ImageView c;
    private i.b d;
    private boolean e;
    private i.a f;
    private Animation g;
    
    public c(Context paramContext, ImageView paramImageView, String paramString, i.b paramB, boolean paramBoolean, i.a paramA, Animation paramAnimation)
    {
      this.a = paramContext;
      this.b = paramString;
      this.f = paramA;
      this.d = paramB;
      this.e = paramBoolean;
      this.g = paramAnimation;
      this.c = paramImageView;
    }
    
    protected Drawable a(Object... paramVarArgs)
    {
      if (i.a) {}
      try
      {
        Thread.sleep(3000L);
        i.a(this.a, this.b);
        localObject = null;
      }
      catch (InterruptedException paramVarArgs)
      {
        for (;;)
        {
          try
          {
            Object localObject;
            File localFile = i.b(this.a, this.b);
            paramVarArgs = localObject;
            if (localFile != null)
            {
              paramVarArgs = localObject;
              if (localFile.exists()) {
                paramVarArgs = i.a(localFile.getAbsolutePath());
              }
            }
            return paramVarArgs;
          }
          catch (IOException paramVarArgs)
          {
            Log.e(i.a(), paramVarArgs.toString());
          }
          paramVarArgs = paramVarArgs;
          paramVarArgs.printStackTrace();
        }
      }
      return null;
    }
    
    protected void a(Drawable paramDrawable)
    {
      i.a(this.a, this.c, paramDrawable, this.e, this.f, this.g);
    }
    
    protected void onPreExecute()
    {
      super.onPreExecute();
      if (this.f != null) {
        this.f.a(this.d);
      }
    }
  }
}
