package me.gall.tinybee;

import android.app.Activity;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Process;
import android.util.Log;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

public class LoggerManager
{
  private static final String TAG = "LoggerManager";
  private static boolean isTestMode = false;
  private static HashMap<String, Logger> loggers = new HashMap();
  
  public LoggerManager() {}
  
  public static void enableTestMode(boolean paramBoolean)
  {
    isTestMode = paramBoolean;
  }
  
  static void forceFinish()
  {
    Log.w("LoggerManager", "Force finish.");
    Iterator localIterator = loggers.values().iterator();
    if (!localIterator.hasNext()) {
      localIterator = loggers.values().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        System.gc();
        System.exit(0);
        Process.killProcess(Process.myPid());
        return;
        ((Logger)localIterator.next()).finish();
        break;
      }
      Logger localLogger = (Logger)localIterator.next();
      if (localLogger.getContext() != null) {
        try
        {
          ((Activity)localLogger.getContext()).finish();
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  private static String generateLoggerKey(String paramString1, String paramString2, String paramString3)
  {
    return paramString1 + "_TB_" + paramString2 + "_TB_" + paramString3;
  }
  
  public static Logger getLogger(Context paramContext)
  {
    localObject1 = null;
    localObject2 = "";
    localObject3 = "";
    localObject7 = localObject3;
    localObject6 = localObject2;
    Object localObject4 = localObject1;
    try
    {
      ApplicationInfo localApplicationInfo = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128);
      localObject7 = localObject3;
      localObject6 = localObject2;
      localObject4 = localObject1;
      localObject1 = localApplicationInfo.metaData.getString("TB_APP_ID");
      localObject7 = localObject3;
      localObject6 = localObject2;
      localObject4 = localObject1;
      localObject2 = localApplicationInfo.metaData.getString("TB_CHANNEL_ID");
      localObject7 = localObject3;
      localObject6 = localObject2;
      localObject4 = localObject1;
      localObject3 = localApplicationInfo.metaData.getString("TB_CHANNEL_NAME");
      localObject7 = localObject3;
      localObject6 = localObject2;
      localObject4 = localObject1;
      bool1 = localApplicationInfo.metaData.getBoolean("TB_SANDBOX_MODE");
      bool2 = bool1;
      localObject7 = localObject3;
      localObject6 = localObject2;
      localObject4 = localObject1;
      if (localObject1 != null) {
        break label180;
      }
      try
      {
        throw new Exception("TB_APP_ID must be valid.");
      }
      catch (Exception localException1) {}
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        boolean bool2;
        label180:
        boolean bool1 = false;
        localObject3 = localObject7;
        localObject2 = localObject6;
        localObject1 = localObject5;
        Object localObject5 = localException2;
      }
    }
    Log.w("LoggerManager", localException1.getMessage());
    localObject5 = localObject1;
    localObject6 = localObject2;
    localObject7 = localObject3;
    bool2 = bool1;
    return getLogger(paramContext, localObject5, localObject6, localObject7, bool2);
  }
  
  public static Logger getLogger(Context paramContext, String paramString)
  {
    return getLogger(paramContext, paramString, "", "", false);
  }
  
  public static Logger getLogger(Context paramContext, String paramString1, String paramString2)
  {
    return getLogger(paramContext, paramString1, paramString2, "", false);
  }
  
  public static Logger getLogger(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    return getLogger(paramContext, paramString1, paramString2, paramString3, false);
  }
  
  public static Logger getLogger(Context paramContext, String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    String str2 = generateLoggerKey(paramString1, paramString2, paramString3);
    if (!loggers.containsKey(str2))
    {
      if ((paramString1 == null) || (paramString1.equals(""))) {
        throw new NullPointerException("APPID can not be null");
      }
      String str1 = paramString2;
      if (paramString2 == null) {
        str1 = "";
      }
      paramString2 = paramString3;
      if (paramString3 == null) {
        paramString2 = "";
      }
      paramContext = new TinybeeLogger(paramContext, paramString1, str1, paramString2);
      paramContext.setSandboxMode(paramBoolean);
      paramContext.init();
      loggers.put(str2, paramContext);
    }
    return (Logger)loggers.get(str2);
  }
  
  public static boolean isTestMode()
  {
    return isTestMode;
  }
}
