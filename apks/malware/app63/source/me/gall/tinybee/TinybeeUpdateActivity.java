package me.gall.tinybee;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.TextView;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Map;

public class TinybeeUpdateActivity
  extends Activity
  implements Handler.Callback
{
  public static final String LOG = "TinybeeUpdate";
  public static final int MSG_ID_REFRESH_BUTTON_TEXT = 1;
  private static final String fileName = "tb_update.apk";
  private Button confirm;
  private boolean force;
  public Handler handler;
  private Logger logger;
  private Map<String, String> params;
  private String url;
  private int urlType;
  private int viewType;
  private WebView wv;
  
  public TinybeeUpdateActivity() {}
  
  public static final View findViewByName(Context paramContext, View paramView, String paramString)
  {
    return paramView.findViewById(getViewIdentifier(paramContext, paramString));
  }
  
  private static final int getDrawableIdentifier(Context paramContext, String paramString)
  {
    return getIdentifier(paramContext, paramString, "drawable");
  }
  
  private String getFilePath()
  {
    return getFilesDir().getAbsolutePath() + File.separator + "tb_update.apk";
  }
  
  private static final int getIdentifier(Context paramContext, String paramString1, String paramString2)
  {
    int i = paramContext.getResources().getIdentifier(paramString1, paramString2, paramContext.getPackageName());
    if (i == 0) {
      throw new FileNotFoundException(paramString1 + " is not found in res/" + paramString2 + "/.");
    }
    return i;
  }
  
  private static final int getLayoutIdentifier(Context paramContext, String paramString)
  {
    return getIdentifier(paramContext, paramString, "layout");
  }
  
  private static final int getViewIdentifier(Context paramContext, String paramString)
  {
    try
    {
      int i = getIdentifier(paramContext, paramString, "id");
      return i;
    }
    catch (FileNotFoundException paramContext)
    {
      throw new NullPointerException(paramString + " is not found.");
    }
  }
  
  private static final View inflateView(Context paramContext, String paramString)
  {
    return ((LayoutInflater)paramContext.getSystemService("layout_inflater")).inflate(getLayoutIdentifier(paramContext, paramString), null);
  }
  
  private void installApk()
  {
    Intent localIntent = new Intent("android.intent.action.VIEW");
    localIntent.setDataAndType(Uri.fromFile(new File(getFilePath())), "application/vnd.android.package-archive");
    startActivity(localIntent);
  }
  
  public boolean handleMessage(Message paramMessage)
  {
    if (paramMessage.what == 1)
    {
      paramMessage = (String)paramMessage.obj;
      this.confirm.setText(paramMessage);
      if (paramMessage.equals("安装")) {
        this.confirm.setEnabled(true);
      }
    }
    return false;
  }
  
  public void onBackPressed()
  {
    if (!this.force) {
      finish();
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = getIntent();
    this.logger = LoggerManager.getLogger(this, paramBundle.getStringExtra("AppId"), paramBundle.getStringExtra("ChannelId"), paramBundle.getStringExtra("ChannelName"), paramBundle.getBooleanExtra("SandboxMode", false));
    this.viewType = paramBundle.getIntExtra("View", 0);
    this.force = paramBundle.getBooleanExtra("Force", true);
    new StringBuilder("Force:").append(this.force).toString();
    this.handler = new Handler(this);
    getWindow().requestFeature(1);
    this.url = paramBundle.getStringExtra("URL");
    this.params = new HashMap();
    try
    {
      this.params.put("VERSIONSCODE", String.valueOf(getPackageManager().getPackageInfo(getPackageName(), 0).versionCode));
      this.params.put("PACKAGENAME", getPackageName());
      if (this.viewType == 0) {
        this.urlType = paramBundle.getIntExtra("URL_Type", 1);
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        try
        {
          View localView = inflateView(this, "tb_update_main_normal");
          setContentView(localView);
          ((TextView)findViewByName(this, localView, "title")).setText(paramBundle.getStringExtra("Title"));
          WebView localWebView = (WebView)findViewByName(this, localView, "webcontainer");
          localWebView.getSettings().setDefaultTextEncodingName("UTF-8");
          localWebView.loadDataWithBaseURL(null, paramBundle.getStringExtra("Content"), "text/html", "UTF-8", null);
          this.confirm = ((Button)findViewByName(this, localView, "confirm"));
          this.confirm.setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              TinybeeUpdateActivity.this.logger.send("_TB_UPDATE_CONFIRM", TinybeeUpdateActivity.this.params);
              if (TinybeeUpdateActivity.this.urlType == 1)
              {
                paramAnonymousView = new Intent("android.intent.action.VIEW", Uri.parse(TinybeeUpdateActivity.this.url));
                TinybeeUpdateActivity.this.startActivity(paramAnonymousView);
              }
              while (TinybeeUpdateActivity.this.urlType != 0) {
                return;
              }
              if (((Button)paramAnonymousView).getText().equals("安装"))
              {
                TinybeeUpdateActivity.this.installApk();
                return;
              }
              ((Button)paramAnonymousView).setText("开始下载");
              paramAnonymousView.postInvalidate();
              try
              {
                new TinybeeUpdateActivity.DownloadAndInstallTask(TinybeeUpdateActivity.this).execute(new URL[] { new URL(TinybeeUpdateActivity.this.url) });
                paramAnonymousView.setEnabled(false);
                return;
              }
              catch (MalformedURLException localMalformedURLException)
              {
                for (;;)
                {
                  localMalformedURLException.printStackTrace();
                }
              }
            }
          });
          ((Button)findViewByName(this, localView, "cancel")).setOnClickListener(new View.OnClickListener()
          {
            public void onClick(View paramAnonymousView)
            {
              TinybeeUpdateActivity.this.logger.send("_TB_UPDATE_CANCEL", TinybeeUpdateActivity.this.params);
              TinybeeUpdateActivity.this.finish();
            }
          });
          this.logger.send("_TB_UPDATE_INTRO", this.params);
          return;
          localNameNotFoundException = localNameNotFoundException;
          localNameNotFoundException.printStackTrace();
        }
        catch (FileNotFoundException paramBundle)
        {
          paramBundle.printStackTrace();
          continue;
        }
        this.wv = new WebView(this);
        this.wv.loadUrl(this.url);
        setContentView(this.wv);
      }
    }
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if (this.force) {
      LoggerManager.forceFinish();
    }
  }
  
  public void onResume()
  {
    super.onResume();
    if (!TinybeeLogger.Config.isConnect(this))
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(this);
      localBuilder.setMessage("哎哟，您的网络不给力啊，赶快检查检查");
      localBuilder.setPositiveButton("设置网络", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          paramAnonymousDialogInterface = new Intent("android.settings.WIFI_SETTINGS");
          TinybeeUpdateActivity.this.startActivity(paramAnonymousDialogInterface);
        }
      });
      localBuilder.setNegativeButton("退出", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          TinybeeUpdateActivity.this.finish();
        }
      });
      localBuilder.setCancelable(false);
      localBuilder.show();
    }
    if ((TinybeeLogger.Config.isConnect(this)) && (this.wv != null)) {
      this.wv.reload();
    }
  }
  
  final class DownloadAndInstallTask
    extends AsyncTask<URL, Integer, Long>
  {
    DownloadAndInstallTask() {}
    
    private void downloadFile(int paramInt, InputStream paramInputStream)
    {
      new StringBuilder("Download file totalSize:").append(paramInt).toString();
      FileOutputStream localFileOutputStream = TinybeeUpdateActivity.this.openFileOutput("tb_update.apk", 1);
      byte[] arrayOfByte = new byte['⠀'];
      int i = 0;
      for (;;)
      {
        int j = paramInputStream.read(arrayOfByte);
        if (j == -1)
        {
          localFileOutputStream.flush();
          localFileOutputStream.close();
          return;
        }
        localFileOutputStream.write(arrayOfByte, 0, j);
        j = i + j;
        new StringBuilder("Download part size:").append(j).toString();
        i = j;
        if (TinybeeUpdateActivity.this.confirm != null)
        {
          Object localObject = NumberFormat.getPercentInstance();
          ((NumberFormat)localObject).setMaximumIntegerDigits(3);
          ((NumberFormat)localObject).setMinimumIntegerDigits(1);
          i = j;
          if (j > paramInt) {
            i = paramInt;
          }
          localObject = ((NumberFormat)localObject).format(i / paramInt);
          Message localMessage = TinybeeUpdateActivity.this.handler.obtainMessage(1);
          localMessage.obj = ("下载中(" + (String)localObject + ")");
          TinybeeUpdateActivity.this.handler.sendMessage(localMessage);
        }
      }
    }
    
    protected final Long doInBackground(URL... paramVarArgs)
    {
      try
      {
        Object localObject = new File(TinybeeUpdateActivity.this.getFilePath());
        if (((File)localObject).exists()) {
          ((File)localObject).delete();
        }
        localObject = (HttpURLConnection)paramVarArgs[0].openConnection();
        ((HttpURLConnection)localObject).setRequestMethod("GET");
        ((HttpURLConnection)localObject).setDoInput(true);
        ((HttpURLConnection)localObject).connect();
        paramVarArgs = ((HttpURLConnection)localObject).getInputStream();
        try
        {
          i = Integer.parseInt(((HttpURLConnection)localObject).getHeaderField("Content-Length"));
          downloadFile(i, paramVarArgs);
          TinybeeUpdateActivity.this.logger.send("_TB_UPDATE_SUCCESS", TinybeeUpdateActivity.this.params);
          paramVarArgs.close();
          paramVarArgs = TinybeeUpdateActivity.this.handler.obtainMessage(1);
          paramVarArgs.obj = "安装";
          TinybeeUpdateActivity.this.handler.sendMessage(paramVarArgs);
          return Long.valueOf(100L);
        }
        catch (Exception localException)
        {
          for (;;)
          {
            localException.printStackTrace();
            int i = 10485760;
          }
        }
        return Long.valueOf(-1L);
      }
      catch (IOException paramVarArgs)
      {
        Log.e("TinybeeUpdate", "Fail to download the file." + paramVarArgs);
      }
    }
    
    protected final void onPostExecute(Long paramLong)
    {
      if (paramLong.longValue() == 100L)
      {
        TinybeeUpdateActivity.this.installApk();
        return;
      }
      if (paramLong.longValue() == -1L)
      {
        paramLong = new AlertDialog.Builder(TinybeeUpdateActivity.this);
        paramLong.setMessage("呃，下载出了点小问题，您可以立刻重试或者退出");
        paramLong.setPositiveButton("重试", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            paramAnonymousDialogInterface.dismiss();
            try
            {
              new TinybeeUpdateActivity.DownloadAndInstallTask(TinybeeUpdateActivity.this).execute(new URL[] { new URL(TinybeeUpdateActivity.this.url) });
              return;
            }
            catch (MalformedURLException paramAnonymousDialogInterface)
            {
              paramAnonymousDialogInterface.printStackTrace();
            }
          }
        });
        paramLong.setNegativeButton("退出", new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            TinybeeUpdateActivity.this.finish();
          }
        });
        paramLong.setCancelable(false);
        paramLong.show();
        return;
      }
      new StringBuilder("On Post Execute result...").append(paramLong).toString();
    }
  }
}
