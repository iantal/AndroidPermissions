package me.gall.tinybee;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Binder;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Process;
import android.os.SystemClock;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.json.JSONException;
import org.json.JSONObject;

public class TinybeeLogger
  implements Logger
{
  public static final String TAG = "TinybeeLogger";
  private static final String TINYBEE_RUNTIMES = "_TB_RUNTIMES";
  private static final String TINYBEE_UUIDS = "_TB_UUIDS";
  public static final int URL_TYPE_APK_DOWNLOAD = 0;
  public static final int URL_TYPE_WEB_PAGE = 1;
  private static final String UUID = "UUID";
  public static final int VIEW_FULLSCREEN = 1;
  public static final int VIEW_NORMAL = 0;
  private static final String _TB_launch = "_TB_launch";
  private static boolean networkError;
  private static int retry;
  private String appId = null;
  private Context context;
  private ExecutorService executorService;
  private boolean sandboxMode;
  
  protected TinybeeLogger(Context paramContext, String paramString1, String paramString2, String paramString3)
  {
    this.context = paramContext;
    if (paramString1 == null) {
      throw new NullPointerException("AppId must not be null.");
    }
    this.appId = paramString1;
    if ((paramString2 != null) && (paramString3 != null))
    {
      paramContext = paramContext.getSharedPreferences("_TB_" + paramString1, 0).edit();
      paramContext.putString("_TB_CHANNELID", paramString2);
      paramContext.putString("_TB_CHANNELNAME", paramString3);
      paramContext.commit();
    }
    if (this.executorService == null) {
      this.executorService = Executors.newSingleThreadExecutor();
    }
  }
  
  private void clearUpdateInfo()
  {
    SharedPreferences.Editor localEditor = this.context.getSharedPreferences("_TB_UPDATEINFO_" + this.appId, 0).edit();
    localEditor.clear();
    localEditor.commit();
  }
  
  private void fillIntent(Intent paramIntent)
  {
    SharedPreferences localSharedPreferences = this.context.getSharedPreferences("_TB_UPDATEINFO_" + this.appId, 0);
    paramIntent.putExtra("Title", localSharedPreferences.getString("Title", "Untilted"));
    paramIntent.putExtra("View", localSharedPreferences.getInt("View", 0));
    paramIntent.putExtra("Content", localSharedPreferences.getString("Content", ""));
    paramIntent.putExtra("URL_Type", localSharedPreferences.getInt("URL_Type", 1));
    paramIntent.putExtra("URL", localSharedPreferences.getString("URL", "http://gall.me"));
    paramIntent.putExtra("Version", localSharedPreferences.getInt("Version", 1));
    paramIntent.putExtra("Force", localSharedPreferences.getBoolean("Force", true));
    paramIntent.putExtra("AppId", this.appId);
    paramIntent.putExtra("ChannelId", getChannelId(this.context, this.appId));
    paramIntent.putExtra("ChannelName", getChannelName(this.context, this.appId));
    paramIntent.putExtra("SandboxMode", this.sandboxMode);
  }
  
  public static String getChannelId(Context paramContext, String paramString)
  {
    return paramContext.getSharedPreferences("_TB_" + paramString, 0).getString("_TB_CHANNELID", "");
  }
  
  public static String getChannelName(Context paramContext, String paramString)
  {
    return paramContext.getSharedPreferences("_TB_" + paramString, 0).getString("_TB_CHANNELNAME", "");
  }
  
  private static String getUUID(Context paramContext, String paramString)
  {
    return paramContext.getSharedPreferences("_TB_UUIDS", 0).getString(paramString, null);
  }
  
  static List<EventTask> retrieveAllRemainTasks(Context paramContext, String paramString, TinybeeLogger paramTinybeeLogger)
  {
    int i = 0;
    ArrayList localArrayList = new ArrayList();
    SharedPreferences localSharedPreferences = paramContext.getSharedPreferences("_TB_" + paramString, 0);
    int j = localSharedPreferences.getInt("_TB_Length", 0);
    new StringBuilder("load() length = ").append(j).toString();
    for (;;)
    {
      if (i >= j)
      {
        paramContext = localSharedPreferences.edit();
        paramContext.clear();
        paramContext.commit();
        return localArrayList;
      }
      Object localObject = localSharedPreferences.getString("_TB_KEY_" + i + "event", "");
      String str1 = localSharedPreferences.getString("_TB_KEY_" + i + "value", null);
      String str2 = localSharedPreferences.getString("_TB_KEY_" + i + "timeStamp", "0");
      new StringBuilder("load()  event:").append((String)localObject).append("   value:").append(str1).append("   timestamp:").append(str2).toString();
      if (localObject != null)
      {
        paramTinybeeLogger.getClass();
        localObject = new EventTask(paramTinybeeLogger, paramContext, paramString, (String)localObject);
        if (str1 == null) {}
      }
      try
      {
        ((EventTask)localObject).params = new JSONObject(str1);
        ((EventTask)localObject).timestamp = Long.parseLong(str2);
        localArrayList.add(localObject);
        i += 1;
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          new StringBuilder("invalid content = ").append(str1).toString();
        }
      }
    }
  }
  
  private static void saveUUID(Context paramContext, String paramString1, String paramString2)
  {
    paramContext.getSharedPreferences("_TB_UUIDS", 0).edit().putString(paramString1, paramString2).commit();
  }
  
  private void saveUpdateInfo(String paramString1, int paramInt1, String paramString2, int paramInt2, String paramString3, int paramInt3, boolean paramBoolean)
  {
    SharedPreferences.Editor localEditor = this.context.getSharedPreferences("_TB_UPDATEINFO_" + this.appId, 0).edit();
    localEditor.clear();
    localEditor.commit();
    localEditor.putString("Title", paramString1);
    localEditor.putInt("View", paramInt1);
    localEditor.putString("Content", paramString2);
    localEditor.putInt("URL_Type", paramInt2);
    localEditor.putString("URL", paramString3);
    localEditor.putInt("Version", paramInt3);
    localEditor.putBoolean("Force", paramBoolean);
    localEditor.commit();
  }
  
  private void updateIfNeed()
  {
    int j = this.context.getSharedPreferences("_TB_UPDATEINFO_" + this.appId, 0).getInt("Version", 1);
    try
    {
      i = this.context.getPackageManager().getPackageInfo(this.context.getPackageName(), 0).versionCode;
      if (j > i)
      {
        Intent localIntent = new Intent();
        fillIntent(localIntent);
        localIntent.setFlags(603979776);
        localIntent.setClass(this.context, TinybeeUpdateActivity.class);
        this.context.startActivity(localIntent);
        return;
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      int i;
      for (;;)
      {
        localNameNotFoundException.printStackTrace();
        i = 1;
      }
      new StringBuilder("No need to update.").append(j).append("<=").append(i).toString();
    }
  }
  
  public void executeTask(EventTask paramEventTask)
  {
    if ((this.executorService.isShutdown()) || (this.executorService.isTerminated()))
    {
      paramEventTask.saveEvent(this.context);
      return;
    }
    this.executorService.execute(paramEventTask);
  }
  
  public void finish()
  {
    Iterator localIterator = this.executorService.shutdownNow().iterator();
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      ((EventTask)localIterator.next()).saveEvent(this.context);
    }
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public void init()
  {
    updateIfNeed();
    new StringBuilder("SandboxMode is ").append(this.sandboxMode).toString();
    launch();
    Iterator localIterator;
    if (Config.isConnect(this.context)) {
      localIterator = retrieveAllRemainTasks(this.context, this.appId, this).iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext()) {
        return;
      }
      executeTask((EventTask)localIterator.next());
    }
  }
  
  public boolean isSandboxMode()
  {
    return this.sandboxMode;
  }
  
  protected void launch()
  {
    EventTask localEventTask = new EventTask(this.context, this.appId, "_TB_launch");
    localEventTask.addParam("NETWORK", Config.getNetwork(this.context));
    localEventTask.addParam("IMSI", Config.getIMSI(this.context));
    localEventTask.addParam("CHANNELNAME", getChannelName(this.context, this.appId));
    localEventTask.addParam("CHANNELID", getChannelId(this.context, this.appId));
    try
    {
      localEventTask.addParam("VERSIONSCODE", String.valueOf(this.context.getPackageManager().getPackageInfo(this.context.getPackageName(), 0).versionCode));
      localEventTask.addParam("VERSIONSNAME", String.valueOf(this.context.getPackageManager().getPackageInfo(this.context.getPackageName(), 0).versionName));
      localEventTask.addParam("PACKAGENAME", this.context.getPackageName());
      executeTask(localEventTask);
      executeTask(new RequestUpdateTask(this.context, this.appId));
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;) {}
    }
  }
  
  public void onPause(Context paramContext)
  {
    long l1 = paramContext.getSharedPreferences("_TB_RUNTIMES", 0).getLong(this.appId, 0L);
    if (l1 == 0L)
    {
      Log.w("TinybeeLogger", "Invalid start time 0. May onResume() not called");
      return;
    }
    long l2 = Config.getTimeStamp();
    paramContext = new EventTask(paramContext, this.appId, "_TB_runtime");
    paramContext.addParam("RUNTIME", String.valueOf(l2 - l1));
    executeTask(paramContext);
  }
  
  public void onResume(Context paramContext)
  {
    paramContext.getSharedPreferences("_TB_RUNTIMES", 0).edit().putLong(this.appId, Config.getTimeStamp()).commit();
  }
  
  public void send(String paramString)
  {
    send(paramString, null);
  }
  
  public void send(String paramString, Map<String, String> paramMap)
  {
    paramString = new EventTask(this.context, this.appId, paramString);
    Iterator localIterator;
    if (paramMap != null) {
      localIterator = paramMap.keySet().iterator();
    }
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        executeTask(paramString);
        return;
      }
      String str = (String)localIterator.next();
      if (paramMap.containsKey(str)) {
        paramString.addParam(str, (String)paramMap.get(str));
      }
    }
  }
  
  public void setOnlineParamCallback(Logger.OnlineParamCallback paramOnlineParamCallback)
  {
    if (paramOnlineParamCallback != null) {
      updateOnlineParam(paramOnlineParamCallback);
    }
  }
  
  public void setSandboxMode(boolean paramBoolean)
  {
    this.sandboxMode = paramBoolean;
  }
  
  public void updateOnlineParam(Logger.OnlineParamCallback paramOnlineParamCallback)
  {
    try
    {
      executeTask(new RequestLiveParamsTask(this.context, this.appId, paramOnlineParamCallback));
      return;
    }
    catch (Exception paramOnlineParamCallback)
    {
      Log.e("TinybeeLogger", "初始化或更新在线参数异常:" + paramOnlineParamCallback.getMessage());
    }
  }
  
  public static final class Config
  {
    protected static final String CONNECTIVITY_CHANGE_ACTION = "android.net.conn.CONNECTIVITY_CHANGE";
    private static final String HOST = "http://tinybee.savenumber.com/";
    private static final String HOST_TEST = "http://test.gall.me/tinybee/";
    protected static String network = "";
    
    public Config() {}
    
    protected static boolean checkCallingPermission(String paramString, Context paramContext)
    {
      if (Binder.getCallingPid() == Process.myPid()) {}
      while (paramContext.checkCallingPermission(paramString) == 0) {
        return true;
      }
      return false;
    }
    
    static String getAnalysisURL(boolean paramBoolean)
    {
      return getHost(paramBoolean) + "analysis/";
    }
    
    protected static String getAndroidID(Context paramContext)
    {
      paramContext = Settings.Secure.getString(paramContext.getContentResolver(), "android_id");
      if (!"9774d56d682e549c".equals(paramContext)) {
        try
        {
          Object localObject = Class.forName("android.os.SystemProperties");
          localObject = (String)((Class)localObject).getMethod("get", new Class[] { String.class }).invoke(localObject, new Object[] { "ro.serialno" });
          return localObject;
        }
        catch (Exception localException) {}
      }
      return paramContext;
    }
    
    public static String getDataConnectionNetworkInfo(Context paramContext)
    {
      if (paramContext.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") != 0) {
        return null;
      }
      try
      {
        paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getNetworkInfo(0).getExtraInfo();
        return paramContext;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      return null;
    }
    
    protected static String getHost(boolean paramBoolean)
    {
      if (paramBoolean) {
        return "http://test.gall.me/tinybee/";
      }
      return "http://tinybee.savenumber.com/";
    }
    
    protected static String getIMEI(Context paramContext)
    {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
        return paramContext;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      return "";
    }
    
    protected static String getIMSI(Context paramContext)
    {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
        return paramContext;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      return "";
    }
    
    static String getLiveParamsURL(boolean paramBoolean)
    {
      return getHost(paramBoolean) + "customparameters/";
    }
    
    protected static String getMAC(Context paramContext)
    {
      try
      {
        paramContext = (WifiManager)paramContext.getSystemService("wifi");
        if (paramContext == null) {}
        for (paramContext = null;; paramContext = paramContext.getConnectionInfo()) {
          return paramContext.getMacAddress();
        }
        return "";
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
    }
    
    protected static String getManufacturer()
    {
      return Build.MANUFACTURER;
    }
    
    protected static String getModel()
    {
      return Build.MODEL;
    }
    
    protected static String getNetwork(Context paramContext)
    {
      if (!isConnect(paramContext)) {
        return "NONETWORK";
      }
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      try
      {
        if (paramContext.getTypeName().toUpperCase().indexOf("MOBILE") != -1) {
          network = paramContext.getExtraInfo();
        }
        for (;;)
        {
          return network;
          if (paramContext.getTypeName().toUpperCase().indexOf("WIFI") != -1) {
            network = "WIFI";
          }
        }
      }
      catch (Exception paramContext)
      {
        for (;;)
        {
          network = "NONETWORK";
        }
      }
    }
    
    protected static String getNumber(Context paramContext)
    {
      try
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
        return paramContext;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      return "";
    }
    
    protected static String getOs()
    {
      return "android";
    }
    
    protected static String getOsVerSion()
    {
      return Build.VERSION.RELEASE;
    }
    
    protected static String getResolution(Context paramContext)
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      return localDisplayMetrics.widthPixels + "*" + localDisplayMetrics.heightPixels;
    }
    
    private static TelephonyManager getTelephonyManager(Context paramContext)
    {
      return (TelephonyManager)paramContext.getSystemService("phone");
    }
    
    protected static long getTimeStamp()
    {
      return System.currentTimeMillis();
    }
    
    static String getUpdateInfoURL(boolean paramBoolean)
    {
      return getHost(paramBoolean) + "update/info";
    }
    
    public static final boolean isConnect(Context paramContext)
    {
      return (isWifiConnect(paramContext)) || (isDataConnect(paramContext));
    }
    
    public static boolean isDataConnect(Context paramContext)
    {
      if (paramContext.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") != 0) {
        return true;
      }
      try
      {
        NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getNetworkInfo(0);
        if ((localNetworkInfo.isConnectedOrConnecting()) || (getTelephonyManager(paramContext).getDataState() == 2))
        {
          new StringBuilder("mobile is connected. Type:").append(localNetworkInfo.getTypeName()).append(" APN:").append(localNetworkInfo.getExtraInfo()).toString();
          return true;
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      return false;
    }
    
    public static boolean isWifiConnect(Context paramContext)
    {
      if (paramContext.checkCallingOrSelfPermission("android.permission.ACCESS_WIFI_STATE") != 0) {
        return true;
      }
      try
      {
        boolean bool = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getNetworkInfo(1).isConnected();
        return bool;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      return false;
    }
    
    protected static final String replace(String paramString1, String paramString2, String paramString3)
    {
      try
      {
        paramString2 = paramString1.replace(paramString2, paramString3);
        return paramString2;
      }
      catch (Exception paramString2)
      {
        Log.e("TinybeeLogger", "Config.replace()出错:" + paramString2.getMessage());
      }
      return paramString1;
    }
    
    public static void setMobileDataEnabled(Context paramContext, boolean paramBoolean)
    {
      new StringBuilder("SDK_INT is ").append(Build.VERSION.SDK_INT).toString();
      if (Build.VERSION.SDK_INT >= 9)
      {
        paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
        localObject = Class.forName(paramContext.getClass().getName()).getDeclaredField("mService");
        ((Field)localObject).setAccessible(true);
        paramContext = ((Field)localObject).get(paramContext);
        localObject = Class.forName(paramContext.getClass().getName()).getDeclaredMethod("setMobileDataEnabled", new Class[] { Boolean.TYPE });
        ((Method)localObject).setAccessible(true);
        ((Method)localObject).invoke(paramContext, new Object[] { Boolean.valueOf(paramBoolean) });
        SystemClock.sleep(2000L);
        return;
      }
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if ((paramContext.getDataState() != 2) || (!paramBoolean)) {
        paramContext.getDataState();
      }
      Object localObject = Class.forName(paramContext.getClass().getName()).getDeclaredMethod("getITelephony", new Class[0]);
      ((Method)localObject).setAccessible(true);
      localObject = ((Method)localObject).invoke(paramContext, new Object[0]);
      paramContext = Class.forName(localObject.getClass().getName());
      if (!paramBoolean) {}
      for (paramContext = paramContext.getDeclaredMethod("disableDataConnectivity", new Class[0]);; paramContext = paramContext.getDeclaredMethod("enableDataConnectivity", new Class[0]))
      {
        paramContext.setAccessible(true);
        paramContext.invoke(localObject, new Object[0]);
        break;
      }
    }
    
    public static void setWifiEnabled(Context paramContext, boolean paramBoolean)
    {
      ((WifiManager)paramContext.getSystemService("wifi")).setWifiEnabled(paramBoolean);
      SystemClock.sleep(2000L);
    }
  }
  
  class EventTask
    implements Runnable
  {
    public static final String APPID = "APPID";
    public static final String TIMESTAMP = "TIMESTAMP";
    private String appId;
    protected Context context;
    private String eventId;
    private JSONObject params;
    private long timestamp;
    
    public EventTask(Context paramContext, String paramString1, String paramString2)
    {
      this.context = paramContext;
      this.appId = paramString1;
      this.eventId = paramString2;
      this.params = new JSONObject();
    }
    
    public void addParam(String paramString1, String paramString2)
    {
      if ((paramString1 != null) && (paramString2 != null)) {
        try
        {
          this.params.put(paramString1, paramString2);
          return;
        }
        catch (JSONException paramString1)
        {
          Log.e("TinybeeLogger", paramString1.getMessage());
          paramString1.printStackTrace();
          return;
        }
      }
      Log.w("TinybeeLogger", paramString1 + " must not be null.");
    }
    
    public boolean catchErrorCode(int paramInt)
    {
      return false;
    }
    
    public void consumeContent(String paramString) {}
    
    public String getAppId()
    {
      return this.appId;
    }
    
    public String getEventId()
    {
      return this.eventId;
    }
    
    public long getTimestamp()
    {
      return this.timestamp;
    }
    
    public boolean isNetworkError()
    {
      return TinybeeLogger.networkError;
    }
    
    public String read(InputStream paramInputStream, String paramString)
    {
      byte[] arrayOfByte = new byte['Ѐ'];
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream(1024);
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte);
        if (i == -1)
        {
          localByteArrayOutputStream.flush();
          localByteArrayOutputStream.close();
          paramInputStream = new String(localByteArrayOutputStream.toByteArray(), paramString);
          new StringBuilder("Data:").append(paramInputStream).toString();
          return paramInputStream;
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
    }
    
    /* Error */
    public void registerForUUID()
    {
      // Byte code:
      //   0: aconst_null
      //   1: astore_3
      //   2: aconst_null
      //   3: astore 5
      //   5: aload_3
      //   6: astore_2
      //   7: new 142	java/net/URL
      //   10: dup
      //   11: new 74	java/lang/StringBuilder
      //   14: dup
      //   15: aload_0
      //   16: getfield 28	me/gall/tinybee/TinybeeLogger$EventTask:this$0	Lme/gall/tinybee/TinybeeLogger;
      //   19: invokestatic 145	me/gall/tinybee/TinybeeLogger:access$1	(Lme/gall/tinybee/TinybeeLogger;)Z
      //   22: invokestatic 151	me/gall/tinybee/TinybeeLogger$Config:getAnalysisURL	(Z)Ljava/lang/String;
      //   25: invokestatic 80	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
      //   28: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   31: ldc -103
      //   33: invokevirtual 89	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   36: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   39: invokespecial 154	java/net/URL:<init>	(Ljava/lang/String;)V
      //   42: astore 4
      //   44: aload_3
      //   45: astore_2
      //   46: new 74	java/lang/StringBuilder
      //   49: dup
      //   50: ldc -100
      //   52: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   55: aload 4
      //   57: invokevirtual 159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      //   60: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   63: pop
      //   64: aload_3
      //   65: astore_2
      //   66: aload 4
      //   68: invokevirtual 163	java/net/URL:openConnection	()Ljava/net/URLConnection;
      //   71: checkcast 165	java/net/HttpURLConnection
      //   74: astore_3
      //   75: aload_3
      //   76: iconst_1
      //   77: invokevirtual 169	java/net/HttpURLConnection:setDoOutput	(Z)V
      //   80: aload_3
      //   81: iconst_1
      //   82: invokevirtual 172	java/net/HttpURLConnection:setDoInput	(Z)V
      //   85: aload_3
      //   86: ldc -82
      //   88: invokevirtual 177	java/net/HttpURLConnection:setRequestMethod	(Ljava/lang/String;)V
      //   91: aload_3
      //   92: iconst_0
      //   93: invokevirtual 180	java/net/HttpURLConnection:setUseCaches	(Z)V
      //   96: aload_3
      //   97: ldc -74
      //   99: ldc -72
      //   101: invokevirtual 187	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
      //   104: aload_3
      //   105: sipush 10000
      //   108: invokevirtual 190	java/net/HttpURLConnection:setConnectTimeout	(I)V
      //   111: new 39	org/json/JSONObject
      //   114: dup
      //   115: invokespecial 40	org/json/JSONObject:<init>	()V
      //   118: astore_2
      //   119: aload_2
      //   120: ldc 12
      //   122: aload_0
      //   123: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   126: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   129: pop
      //   130: aload_2
      //   131: ldc -64
      //   133: invokestatic 195	me/gall/tinybee/TinybeeLogger$Config:getModel	()Ljava/lang/String;
      //   136: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   139: pop
      //   140: aload_2
      //   141: ldc -59
      //   143: invokestatic 200	me/gall/tinybee/TinybeeLogger$Config:getManufacturer	()Ljava/lang/String;
      //   146: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   149: pop
      //   150: aload_2
      //   151: ldc -54
      //   153: invokestatic 205	me/gall/tinybee/TinybeeLogger$Config:getOs	()Ljava/lang/String;
      //   156: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   159: pop
      //   160: aload_2
      //   161: ldc -49
      //   163: aload_0
      //   164: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   167: invokestatic 211	me/gall/tinybee/TinybeeLogger$Config:getResolution	(Landroid/content/Context;)Ljava/lang/String;
      //   170: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   173: pop
      //   174: aload_2
      //   175: ldc -43
      //   177: aload_0
      //   178: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   181: invokestatic 216	me/gall/tinybee/TinybeeLogger$Config:getNetwork	(Landroid/content/Context;)Ljava/lang/String;
      //   184: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   187: pop
      //   188: aload_2
      //   189: ldc -38
      //   191: aload_0
      //   192: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   195: invokestatic 221	me/gall/tinybee/TinybeeLogger$Config:getIMEI	(Landroid/content/Context;)Ljava/lang/String;
      //   198: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   201: pop
      //   202: aload_2
      //   203: ldc -33
      //   205: aload_0
      //   206: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   209: invokestatic 226	me/gall/tinybee/TinybeeLogger$Config:getMAC	(Landroid/content/Context;)Ljava/lang/String;
      //   212: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   215: pop
      //   216: aload_2
      //   217: ldc -28
      //   219: aload_0
      //   220: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   223: aload_0
      //   224: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   227: invokestatic 232	me/gall/tinybee/TinybeeLogger:getChannelId	(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
      //   230: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   233: pop
      //   234: aload_2
      //   235: ldc -22
      //   237: aload_0
      //   238: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   241: aload_0
      //   242: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   245: invokestatic 237	me/gall/tinybee/TinybeeLogger:getChannelName	(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
      //   248: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   251: pop
      //   252: aload_2
      //   253: ldc -17
      //   255: aload_0
      //   256: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   259: invokestatic 242	me/gall/tinybee/TinybeeLogger$Config:getAndroidID	(Landroid/content/Context;)Ljava/lang/String;
      //   262: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   265: pop
      //   266: aload_2
      //   267: ldc -12
      //   269: aload_0
      //   270: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   273: invokestatic 247	me/gall/tinybee/TinybeeLogger$Config:getIMSI	(Landroid/content/Context;)Ljava/lang/String;
      //   276: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   279: pop
      //   280: aload_2
      //   281: ldc -7
      //   283: aload_0
      //   284: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   287: invokestatic 252	me/gall/tinybee/TinybeeLogger$Config:getNumber	(Landroid/content/Context;)Ljava/lang/String;
      //   290: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   293: pop
      //   294: new 74	java/lang/StringBuilder
      //   297: dup
      //   298: ldc -2
      //   300: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   303: aload_2
      //   304: invokevirtual 255	org/json/JSONObject:toString	()Ljava/lang/String;
      //   307: invokevirtual 89	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   310: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   313: pop
      //   314: aload_3
      //   315: invokevirtual 259	java/net/HttpURLConnection:getOutputStream	()Ljava/io/OutputStream;
      //   318: astore 4
      //   320: aload 4
      //   322: aload_2
      //   323: invokevirtual 255	org/json/JSONObject:toString	()Ljava/lang/String;
      //   326: ldc_w 261
      //   329: invokevirtual 265	java/lang/String:getBytes	(Ljava/lang/String;)[B
      //   332: invokevirtual 270	java/io/OutputStream:write	([B)V
      //   335: aload 4
      //   337: invokevirtual 271	java/io/OutputStream:flush	()V
      //   340: aload 4
      //   342: invokevirtual 272	java/io/OutputStream:close	()V
      //   345: aload_3
      //   346: invokevirtual 276	java/net/HttpURLConnection:getResponseCode	()I
      //   349: istore_1
      //   350: new 74	java/lang/StringBuilder
      //   353: dup
      //   354: ldc_w 278
      //   357: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   360: iload_1
      //   361: invokevirtual 281	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   364: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   367: pop
      //   368: iload_1
      //   369: sipush 200
      //   372: if_icmpeq +17 -> 389
      //   375: iload_1
      //   376: sipush 201
      //   379: if_icmpeq +10 -> 389
      //   382: iload_1
      //   383: sipush 304
      //   386: if_icmpne +115 -> 501
      //   389: new 39	org/json/JSONObject
      //   392: dup
      //   393: aload_0
      //   394: aload_3
      //   395: invokevirtual 285	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
      //   398: ldc_w 261
      //   401: invokevirtual 287	me/gall/tinybee/TinybeeLogger$EventTask:read	(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;
      //   404: invokespecial 288	org/json/JSONObject:<init>	(Ljava/lang/String;)V
      //   407: ldc_w 290
      //   410: invokevirtual 294	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   413: astore_2
      //   414: aload_2
      //   415: ifnull +49 -> 464
      //   418: aload_2
      //   419: invokevirtual 297	java/lang/String:length	()I
      //   422: ifle +42 -> 464
      //   425: aload_0
      //   426: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   429: aload_0
      //   430: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   433: aload_2
      //   434: invokestatic 301	me/gall/tinybee/TinybeeLogger:access$2	(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
      //   437: new 74	java/lang/StringBuilder
      //   440: dup
      //   441: ldc_w 303
      //   444: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   447: aload_2
      //   448: invokevirtual 89	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   451: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   454: pop
      //   455: aload_3
      //   456: ifnull +7 -> 463
      //   459: aload_3
      //   460: invokevirtual 306	java/net/HttpURLConnection:disconnect	()V
      //   463: return
      //   464: new 140	java/lang/Exception
      //   467: dup
      //   468: ldc_w 308
      //   471: invokespecial 309	java/lang/Exception:<init>	(Ljava/lang/String;)V
      //   474: athrow
      //   475: astore 4
      //   477: aload_3
      //   478: astore_2
      //   479: aload 4
      //   481: invokevirtual 310	java/lang/Exception:printStackTrace	()V
      //   484: aload_3
      //   485: astore_2
      //   486: aload_0
      //   487: iconst_3
      //   488: iconst_0
      //   489: invokevirtual 314	me/gall/tinybee/TinybeeLogger$EventTask:retry	(IZ)V
      //   492: aload_3
      //   493: ifnull -30 -> 463
      //   496: aload_3
      //   497: invokevirtual 306	java/net/HttpURLConnection:disconnect	()V
      //   500: return
      //   501: new 140	java/lang/Exception
      //   504: dup
      //   505: new 74	java/lang/StringBuilder
      //   508: dup
      //   509: ldc_w 316
      //   512: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   515: iload_1
      //   516: invokevirtual 281	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   519: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   522: invokespecial 309	java/lang/Exception:<init>	(Ljava/lang/String;)V
      //   525: athrow
      //   526: astore_2
      //   527: aload_3
      //   528: astore 4
      //   530: aload_2
      //   531: astore_3
      //   532: aload 4
      //   534: ifnull +8 -> 542
      //   537: aload 4
      //   539: invokevirtual 306	java/net/HttpURLConnection:disconnect	()V
      //   542: aload_3
      //   543: athrow
      //   544: astore_3
      //   545: aload_2
      //   546: astore 4
      //   548: goto -16 -> 532
      //   551: astore 4
      //   553: aload 5
      //   555: astore_3
      //   556: goto -79 -> 477
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	559	0	this	EventTask
      //   349	167	1	i	int
      //   6	480	2	localObject1	Object
      //   526	20	2	localObject2	Object
      //   1	542	3	localObject3	Object
      //   544	1	3	localObject4	Object
      //   555	1	3	localObject5	Object
      //   42	299	4	localObject6	Object
      //   475	5	4	localException1	Exception
      //   528	19	4	localObject7	Object
      //   551	1	4	localException2	Exception
      //   3	551	5	localObject8	Object
      // Exception table:
      //   from	to	target	type
      //   75	368	475	java/lang/Exception
      //   389	414	475	java/lang/Exception
      //   418	455	475	java/lang/Exception
      //   464	475	475	java/lang/Exception
      //   501	526	475	java/lang/Exception
      //   75	368	526	finally
      //   389	414	526	finally
      //   418	455	526	finally
      //   464	475	526	finally
      //   501	526	526	finally
      //   7	44	544	finally
      //   46	64	544	finally
      //   66	75	544	finally
      //   479	484	544	finally
      //   486	492	544	finally
      //   7	44	551	java/lang/Exception
      //   46	64	551	java/lang/Exception
      //   66	75	551	java/lang/Exception
    }
    
    public void retry(int paramInt, boolean paramBoolean)
    {
      TinybeeLogger.retry += 1;
      new StringBuilder("Retry count:").append(TinybeeLogger.retry).toString();
      if ((TinybeeLogger.retry > paramInt) || (TinybeeLogger.networkError))
      {
        TinybeeLogger.networkError = true;
        if (paramBoolean)
        {
          Log.w("TinybeeLogger", "Network fatal error. Save right now.");
          saveEvent(this.context);
        }
        return;
      }
      uploadEvent();
    }
    
    public void run()
    {
      if ((TinybeeLogger.Config.isConnect(this.context)) && (!TinybeeLogger.networkError))
      {
        uploadEvent();
        return;
      }
      new StringBuilder("Network disabled. Save event[").append(this.eventId).append("].").toString();
      saveEvent(this.context);
    }
    
    public void saveEvent(Context paramContext)
    {
      paramContext = paramContext.getSharedPreferences("_TB_" + this.appId, 0);
      int i = paramContext.getInt("_TB_Length", 0);
      new StringBuilder("save length:").append(i).toString();
      SharedPreferences.Editor localEditor = paramContext.edit();
      paramContext = null;
      if (this.params.length() > 0) {
        paramContext = this.params.toString();
      }
      long l = TinybeeLogger.Config.getTimeStamp();
      new StringBuilder("save()  event:").append(this.eventId).append("   value:").append(paramContext).append("   timestamp:").append(l).toString();
      localEditor.putString("_TB_KEY_" + i + "event", this.eventId);
      localEditor.putString("_TB_KEY_" + i + "value", paramContext);
      localEditor.putString("_TB_KEY_" + i + "timeStamp", String.valueOf(l));
      localEditor.putInt("_TB_Length", i + 1);
      localEditor.commit();
    }
    
    public void setAppId(String paramString)
    {
      this.appId = paramString;
    }
    
    public void setEventId(String paramString)
    {
      this.eventId = paramString;
    }
    
    public void setTimestamp(long paramLong)
    {
      this.timestamp = paramLong;
    }
    
    /* Error */
    public void uploadEvent()
    {
      // Byte code:
      //   0: aload_0
      //   1: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   4: aload_0
      //   5: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   8: invokestatic 411	me/gall/tinybee/TinybeeLogger:access$3	(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
      //   11: ifnonnull +7 -> 18
      //   14: aload_0
      //   15: invokevirtual 413	me/gall/tinybee/TinybeeLogger$EventTask:registerForUUID	()V
      //   18: aconst_null
      //   19: astore_3
      //   20: aconst_null
      //   21: astore 5
      //   23: aload_3
      //   24: astore_2
      //   25: new 142	java/net/URL
      //   28: dup
      //   29: new 74	java/lang/StringBuilder
      //   32: dup
      //   33: aload_0
      //   34: getfield 28	me/gall/tinybee/TinybeeLogger$EventTask:this$0	Lme/gall/tinybee/TinybeeLogger;
      //   37: invokestatic 145	me/gall/tinybee/TinybeeLogger:access$1	(Lme/gall/tinybee/TinybeeLogger;)Z
      //   40: invokestatic 151	me/gall/tinybee/TinybeeLogger$Config:getAnalysisURL	(Z)Ljava/lang/String;
      //   43: invokestatic 80	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
      //   46: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   49: aload_0
      //   50: getfield 37	me/gall/tinybee/TinybeeLogger$EventTask:eventId	Ljava/lang/String;
      //   53: invokevirtual 89	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   56: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   59: invokespecial 154	java/net/URL:<init>	(Ljava/lang/String;)V
      //   62: astore 4
      //   64: aload_3
      //   65: astore_2
      //   66: new 74	java/lang/StringBuilder
      //   69: dup
      //   70: ldc_w 415
      //   73: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   76: aload 4
      //   78: invokevirtual 159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      //   81: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   84: pop
      //   85: aload_3
      //   86: astore_2
      //   87: aload 4
      //   89: invokevirtual 163	java/net/URL:openConnection	()Ljava/net/URLConnection;
      //   92: checkcast 165	java/net/HttpURLConnection
      //   95: astore_3
      //   96: aload_3
      //   97: iconst_1
      //   98: invokevirtual 169	java/net/HttpURLConnection:setDoOutput	(Z)V
      //   101: aload_3
      //   102: iconst_1
      //   103: invokevirtual 172	java/net/HttpURLConnection:setDoInput	(Z)V
      //   106: aload_3
      //   107: ldc -82
      //   109: invokevirtual 177	java/net/HttpURLConnection:setRequestMethod	(Ljava/lang/String;)V
      //   112: aload_3
      //   113: iconst_0
      //   114: invokevirtual 180	java/net/HttpURLConnection:setUseCaches	(Z)V
      //   117: aload_3
      //   118: ldc -74
      //   120: ldc -72
      //   122: invokevirtual 187	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
      //   125: aload_3
      //   126: ldc_w 290
      //   129: aload_0
      //   130: getfield 33	me/gall/tinybee/TinybeeLogger$EventTask:context	Landroid/content/Context;
      //   133: aload_0
      //   134: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   137: invokestatic 411	me/gall/tinybee/TinybeeLogger:access$3	(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
      //   140: invokevirtual 187	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
      //   143: aload_0
      //   144: getfield 49	me/gall/tinybee/TinybeeLogger$EventTask:timestamp	J
      //   147: lconst_0
      //   148: lcmp
      //   149: ifeq +16 -> 165
      //   152: aload_3
      //   153: ldc 14
      //   155: aload_0
      //   156: getfield 49	me/gall/tinybee/TinybeeLogger$EventTask:timestamp	J
      //   159: invokestatic 397	java/lang/String:valueOf	(J)Ljava/lang/String;
      //   162: invokevirtual 187	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
      //   165: aload_3
      //   166: sipush 10000
      //   169: invokevirtual 190	java/net/HttpURLConnection:setConnectTimeout	(I)V
      //   172: aload_0
      //   173: getfield 42	me/gall/tinybee/TinybeeLogger$EventTask:params	Lorg/json/JSONObject;
      //   176: ldc 12
      //   178: aload_0
      //   179: getfield 35	me/gall/tinybee/TinybeeLogger$EventTask:appId	Ljava/lang/String;
      //   182: invokevirtual 57	org/json/JSONObject:put	(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;
      //   185: pop
      //   186: aload_0
      //   187: getfield 42	me/gall/tinybee/TinybeeLogger$EventTask:params	Lorg/json/JSONObject;
      //   190: invokevirtual 368	org/json/JSONObject:length	()I
      //   193: ifle +56 -> 249
      //   196: new 74	java/lang/StringBuilder
      //   199: dup
      //   200: ldc -2
      //   202: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   205: aload_0
      //   206: getfield 42	me/gall/tinybee/TinybeeLogger$EventTask:params	Lorg/json/JSONObject;
      //   209: invokevirtual 255	org/json/JSONObject:toString	()Ljava/lang/String;
      //   212: invokevirtual 89	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   215: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   218: pop
      //   219: aload_3
      //   220: invokevirtual 259	java/net/HttpURLConnection:getOutputStream	()Ljava/io/OutputStream;
      //   223: astore_2
      //   224: aload_2
      //   225: aload_0
      //   226: getfield 42	me/gall/tinybee/TinybeeLogger$EventTask:params	Lorg/json/JSONObject;
      //   229: invokevirtual 255	org/json/JSONObject:toString	()Ljava/lang/String;
      //   232: ldc_w 261
      //   235: invokevirtual 265	java/lang/String:getBytes	(Ljava/lang/String;)[B
      //   238: invokevirtual 270	java/io/OutputStream:write	([B)V
      //   241: aload_2
      //   242: invokevirtual 271	java/io/OutputStream:flush	()V
      //   245: aload_2
      //   246: invokevirtual 272	java/io/OutputStream:close	()V
      //   249: aload_3
      //   250: invokevirtual 276	java/net/HttpURLConnection:getResponseCode	()I
      //   253: istore_1
      //   254: new 74	java/lang/StringBuilder
      //   257: dup
      //   258: ldc_w 278
      //   261: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   264: iload_1
      //   265: invokevirtual 281	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   268: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   271: pop
      //   272: iload_1
      //   273: sipush 200
      //   276: if_icmpeq +10 -> 286
      //   279: iload_1
      //   280: sipush 201
      //   283: if_icmpne +27 -> 310
      //   286: aload_0
      //   287: aload_0
      //   288: aload_3
      //   289: invokevirtual 285	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
      //   292: ldc_w 261
      //   295: invokevirtual 287	me/gall/tinybee/TinybeeLogger$EventTask:read	(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;
      //   298: invokevirtual 417	me/gall/tinybee/TinybeeLogger$EventTask:consumeContent	(Ljava/lang/String;)V
      //   301: aload_3
      //   302: ifnull +7 -> 309
      //   305: aload_3
      //   306: invokevirtual 306	java/net/HttpURLConnection:disconnect	()V
      //   309: return
      //   310: iload_1
      //   311: sipush 304
      //   314: if_icmpeq -13 -> 301
      //   317: aload_0
      //   318: iload_1
      //   319: invokevirtual 419	me/gall/tinybee/TinybeeLogger$EventTask:catchErrorCode	(I)Z
      //   322: ifne +54 -> 376
      //   325: new 140	java/lang/Exception
      //   328: dup
      //   329: new 74	java/lang/StringBuilder
      //   332: dup
      //   333: ldc_w 316
      //   336: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   339: iload_1
      //   340: invokevirtual 281	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   343: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   346: invokespecial 309	java/lang/Exception:<init>	(Ljava/lang/String;)V
      //   349: athrow
      //   350: astore 4
      //   352: aload_3
      //   353: astore_2
      //   354: aload 4
      //   356: invokevirtual 310	java/lang/Exception:printStackTrace	()V
      //   359: aload_3
      //   360: astore_2
      //   361: aload_0
      //   362: iconst_3
      //   363: iconst_1
      //   364: invokevirtual 314	me/gall/tinybee/TinybeeLogger$EventTask:retry	(IZ)V
      //   367: aload_3
      //   368: ifnull -59 -> 309
      //   371: aload_3
      //   372: invokevirtual 306	java/net/HttpURLConnection:disconnect	()V
      //   375: return
      //   376: new 74	java/lang/StringBuilder
      //   379: dup
      //   380: ldc_w 278
      //   383: invokespecial 83	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   386: iload_1
      //   387: invokevirtual 281	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   390: ldc_w 421
      //   393: invokevirtual 89	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   396: invokevirtual 92	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   399: pop
      //   400: goto -99 -> 301
      //   403: astore_2
      //   404: aload_3
      //   405: astore 4
      //   407: aload_2
      //   408: astore_3
      //   409: aload 4
      //   411: ifnull +8 -> 419
      //   414: aload 4
      //   416: invokevirtual 306	java/net/HttpURLConnection:disconnect	()V
      //   419: aload_3
      //   420: athrow
      //   421: astore_3
      //   422: aload_2
      //   423: astore 4
      //   425: goto -16 -> 409
      //   428: astore 4
      //   430: aload 5
      //   432: astore_3
      //   433: goto -81 -> 352
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	436	0	this	EventTask
      //   253	134	1	i	int
      //   24	337	2	localObject1	Object
      //   403	20	2	localObject2	Object
      //   19	401	3	localObject3	Object
      //   421	1	3	localObject4	Object
      //   432	1	3	localObject5	Object
      //   62	26	4	localURL	URL
      //   350	5	4	localException1	Exception
      //   405	19	4	localObject6	Object
      //   428	1	4	localException2	Exception
      //   21	410	5	localObject7	Object
      // Exception table:
      //   from	to	target	type
      //   96	165	350	java/lang/Exception
      //   165	249	350	java/lang/Exception
      //   249	272	350	java/lang/Exception
      //   286	301	350	java/lang/Exception
      //   317	350	350	java/lang/Exception
      //   376	400	350	java/lang/Exception
      //   96	165	403	finally
      //   165	249	403	finally
      //   249	272	403	finally
      //   286	301	403	finally
      //   317	350	403	finally
      //   376	400	403	finally
      //   25	64	421	finally
      //   66	85	421	finally
      //   87	96	421	finally
      //   354	359	421	finally
      //   361	367	421	finally
      //   25	64	428	java/lang/Exception
      //   66	85	428	java/lang/Exception
      //   87	96	428	java/lang/Exception
    }
  }
  
  class RequestLiveParamsTask
    extends TinybeeLogger.EventTask
  {
    private static final String TB_LIVE_PARAMS = "_TB_LIVE_PARAMS_";
    private Logger.OnlineParamCallback callback;
    
    public RequestLiveParamsTask(Context paramContext, String paramString, Logger.OnlineParamCallback paramOnlineParamCallback)
    {
      super(paramContext, paramString, null);
      this.callback = paramOnlineParamCallback;
    }
    
    private String getLastTimestamp()
    {
      return this.context.getSharedPreferences("_TB_" + getAppId(), 0).getString("_TB_LAST_LIVEPARAM_REQUEST_TIMESTAMP", "0");
    }
    
    private Map<String, String> getLiveParams()
    {
      return this.context.getSharedPreferences("_TB_LIVE_PARAMS_" + getAppId(), 0).getAll();
    }
    
    private void updateLastTimestamp(String paramString)
    {
      this.context.getSharedPreferences("_TB_" + getAppId(), 0).edit().putString("_TB_LAST_LIVEPARAM_REQUEST_TIMESTAMP", paramString).commit();
    }
    
    private void updateLiveParams(JSONObject paramJSONObject)
    {
      SharedPreferences.Editor localEditor = this.context.getSharedPreferences("_TB_LIVE_PARAMS_" + getAppId(), 0).edit();
      localEditor.clear();
      localEditor.commit();
      for (;;)
      {
        try
        {
          localIterator = paramJSONObject.keys();
          boolean bool = localIterator.hasNext();
          if (bool) {
            continue;
          }
        }
        catch (Exception paramJSONObject)
        {
          Iterator localIterator;
          String str;
          new StringBuilder("Live params persist error.").append(paramJSONObject).toString();
          continue;
        }
        localEditor.commit();
        return;
        str = (String)localIterator.next();
        localEditor.putString(str, paramJSONObject.getString(str));
      }
    }
    
    /* Error */
    public void requestLiveParams()
    {
      // Byte code:
      //   0: aconst_null
      //   1: astore_3
      //   2: aconst_null
      //   3: astore 5
      //   5: aload_3
      //   6: astore_2
      //   7: new 122	java/net/URL
      //   10: dup
      //   11: new 33	java/lang/StringBuilder
      //   14: dup
      //   15: aload_0
      //   16: getfield 19	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:this$0	Lme/gall/tinybee/TinybeeLogger;
      //   19: invokestatic 126	me/gall/tinybee/TinybeeLogger:access$1	(Lme/gall/tinybee/TinybeeLogger;)Z
      //   22: invokestatic 132	me/gall/tinybee/TinybeeLogger$Config:getLiveParamsURL	(Z)Ljava/lang/String;
      //   25: invokestatic 136	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
      //   28: invokespecial 38	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   31: aload_0
      //   32: invokevirtual 41	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:getAppId	()Ljava/lang/String;
      //   35: invokevirtual 45	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   38: ldc -118
      //   40: invokevirtual 45	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   43: invokevirtual 48	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   46: invokespecial 139	java/net/URL:<init>	(Ljava/lang/String;)V
      //   49: astore 4
      //   51: aload_3
      //   52: astore_2
      //   53: new 33	java/lang/StringBuilder
      //   56: dup
      //   57: ldc -115
      //   59: invokespecial 38	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   62: aload 4
      //   64: invokevirtual 118	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      //   67: invokevirtual 48	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   70: pop
      //   71: aload_3
      //   72: astore_2
      //   73: aload 4
      //   75: invokevirtual 145	java/net/URL:openConnection	()Ljava/net/URLConnection;
      //   78: checkcast 147	java/net/HttpURLConnection
      //   81: astore_3
      //   82: aload_3
      //   83: iconst_1
      //   84: invokevirtual 151	java/net/HttpURLConnection:setDoOutput	(Z)V
      //   87: aload_3
      //   88: iconst_1
      //   89: invokevirtual 154	java/net/HttpURLConnection:setDoInput	(Z)V
      //   92: aload_3
      //   93: ldc -100
      //   95: invokevirtual 159	java/net/HttpURLConnection:setRequestMethod	(Ljava/lang/String;)V
      //   98: aload_3
      //   99: iconst_0
      //   100: invokevirtual 162	java/net/HttpURLConnection:setUseCaches	(Z)V
      //   103: aload_0
      //   104: invokespecial 164	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:getLastTimestamp	()Ljava/lang/String;
      //   107: astore_2
      //   108: aload_3
      //   109: ldc -90
      //   111: aload_2
      //   112: invokevirtual 170	java/net/HttpURLConnection:setRequestProperty	(Ljava/lang/String;Ljava/lang/String;)V
      //   115: new 33	java/lang/StringBuilder
      //   118: dup
      //   119: ldc -84
      //   121: invokespecial 38	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   124: aload_2
      //   125: invokevirtual 45	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   128: invokevirtual 48	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   131: pop
      //   132: aload_3
      //   133: sipush 10000
      //   136: invokevirtual 176	java/net/HttpURLConnection:setConnectTimeout	(I)V
      //   139: aload_3
      //   140: invokevirtual 180	java/net/HttpURLConnection:getResponseCode	()I
      //   143: istore_1
      //   144: new 33	java/lang/StringBuilder
      //   147: dup
      //   148: ldc -74
      //   150: invokespecial 38	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   153: iload_1
      //   154: invokevirtual 185	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   157: invokevirtual 48	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   160: pop
      //   161: iload_1
      //   162: sipush 200
      //   165: if_icmpne +63 -> 228
      //   168: aload_0
      //   169: new 95	org/json/JSONObject
      //   172: dup
      //   173: aload_0
      //   174: aload_3
      //   175: invokevirtual 189	java/net/HttpURLConnection:getInputStream	()Ljava/io/InputStream;
      //   178: ldc -65
      //   180: invokevirtual 195	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:read	(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;
      //   183: invokespecial 196	org/json/JSONObject:<init>	(Ljava/lang/String;)V
      //   186: invokespecial 198	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:updateLiveParams	(Lorg/json/JSONObject;)V
      //   189: aload_0
      //   190: invokestatic 202	me/gall/tinybee/TinybeeLogger$Config:getTimeStamp	()J
      //   193: invokestatic 205	java/lang/String:valueOf	(J)Ljava/lang/String;
      //   196: invokespecial 207	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:updateLastTimestamp	(Ljava/lang/String;)V
      //   199: aload_0
      //   200: getfield 24	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:callback	Lme/gall/tinybee/Logger$OnlineParamCallback;
      //   203: ifnull +16 -> 219
      //   206: aload_0
      //   207: getfield 24	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:callback	Lme/gall/tinybee/Logger$OnlineParamCallback;
      //   210: aload_0
      //   211: invokespecial 209	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:getLiveParams	()Ljava/util/Map;
      //   214: invokeinterface 215 2 0
      //   219: aload_3
      //   220: ifnull +7 -> 227
      //   223: aload_3
      //   224: invokevirtual 218	java/net/HttpURLConnection:disconnect	()V
      //   227: return
      //   228: iload_1
      //   229: sipush 304
      //   232: if_icmpne +52 -> 284
      //   235: aload_0
      //   236: getfield 24	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:callback	Lme/gall/tinybee/Logger$OnlineParamCallback;
      //   239: ifnull -20 -> 219
      //   242: aload_0
      //   243: getfield 24	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:callback	Lme/gall/tinybee/Logger$OnlineParamCallback;
      //   246: aload_0
      //   247: invokespecial 209	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:getLiveParams	()Ljava/util/Map;
      //   250: invokeinterface 215 2 0
      //   255: goto -36 -> 219
      //   258: astore 4
      //   260: aload_3
      //   261: astore_2
      //   262: aload 4
      //   264: invokevirtual 221	java/lang/Exception:printStackTrace	()V
      //   267: aload_3
      //   268: astore_2
      //   269: aload_0
      //   270: iconst_3
      //   271: iconst_1
      //   272: invokevirtual 225	me/gall/tinybee/TinybeeLogger$RequestLiveParamsTask:retry	(IZ)V
      //   275: aload_3
      //   276: ifnull -49 -> 227
      //   279: aload_3
      //   280: invokevirtual 218	java/net/HttpURLConnection:disconnect	()V
      //   283: return
      //   284: new 90	java/lang/Exception
      //   287: dup
      //   288: new 33	java/lang/StringBuilder
      //   291: dup
      //   292: ldc -29
      //   294: invokespecial 38	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
      //   297: iload_1
      //   298: invokevirtual 185	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   301: invokevirtual 48	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   304: invokespecial 228	java/lang/Exception:<init>	(Ljava/lang/String;)V
      //   307: athrow
      //   308: astore_2
      //   309: aload_3
      //   310: astore 4
      //   312: aload_2
      //   313: astore_3
      //   314: aload 4
      //   316: ifnull +8 -> 324
      //   319: aload 4
      //   321: invokevirtual 218	java/net/HttpURLConnection:disconnect	()V
      //   324: aload_3
      //   325: athrow
      //   326: astore_3
      //   327: aload_2
      //   328: astore 4
      //   330: goto -16 -> 314
      //   333: astore 4
      //   335: aload 5
      //   337: astore_3
      //   338: goto -78 -> 260
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	341	0	this	RequestLiveParamsTask
      //   143	155	1	i	int
      //   6	263	2	localObject1	Object
      //   308	20	2	localObject2	Object
      //   1	324	3	localObject3	Object
      //   326	1	3	localObject4	Object
      //   337	1	3	localObject5	Object
      //   49	25	4	localURL	URL
      //   258	5	4	localException1	Exception
      //   310	19	4	localObject6	Object
      //   333	1	4	localException2	Exception
      //   3	333	5	localObject7	Object
      // Exception table:
      //   from	to	target	type
      //   82	161	258	java/lang/Exception
      //   168	219	258	java/lang/Exception
      //   235	255	258	java/lang/Exception
      //   284	308	258	java/lang/Exception
      //   82	161	308	finally
      //   168	219	308	finally
      //   235	255	308	finally
      //   284	308	308	finally
      //   7	51	326	finally
      //   53	71	326	finally
      //   73	82	326	finally
      //   262	267	326	finally
      //   269	275	326	finally
      //   7	51	333	java/lang/Exception
      //   53	71	333	java/lang/Exception
      //   73	82	333	java/lang/Exception
    }
    
    public void run()
    {
      if ((TinybeeLogger.Config.isConnect(this.context)) && (!isNetworkError())) {
        requestLiveParams();
      }
      while (this.callback == null) {
        return;
      }
      this.callback.requestComplete(getLiveParams());
    }
    
    public void saveEvent(Context paramContext) {}
  }
  
  class RequestUpdateTask
    extends TinybeeLogger.EventTask
  {
    public RequestUpdateTask(Context paramContext, String paramString)
    {
      super(paramContext, paramString, null);
    }
    
    private String getLastTimestamp()
    {
      return this.context.getSharedPreferences("_TB_" + getAppId(), 0).getString("_TB_LAST_UPDATE_TIMESTAMP", "0");
    }
    
    private void updateLastTimestamp(String paramString)
    {
      this.context.getSharedPreferences("_TB_" + getAppId(), 0).edit().putString("_TB_LAST_UPDATE_TIMESTAMP", paramString).commit();
    }
    
    public void consumeContent(String paramString)
    {
      try
      {
        paramString = new JSONObject(paramString);
        TinybeeLogger.this.saveUpdateInfo(paramString.getString("TITLE"), paramString.getInt("VIEW"), paramString.getString("CONTENT"), paramString.getInt("URL_TYPE"), paramString.getString("URL"), paramString.getInt("VERSION"), paramString.getBoolean("FORCE"));
        TinybeeLogger.this.updateIfNeed();
        return;
      }
      catch (JSONException paramString)
      {
        Log.w("TinybeeLogger", "Invalid update info:" + paramString);
      }
    }
    
    public void run()
    {
      if ((TinybeeLogger.Config.isConnect(this.context)) && (!isNetworkError())) {
        updateInfo();
      }
    }
    
    public void saveEvent(Context paramContext) {}
    
    public void updateInfo()
    {
      localObject7 = null;
      localObject9 = null;
      localObject1 = localObject7;
      try
      {
        i = this.context.getPackageManager().getPackageInfo(this.context.getPackageName(), 0).versionCode;
        localObject3 = String.valueOf(i);
      }
      catch (Exception localException1)
      {
        int i;
        for (;;)
        {
          Object localObject3;
          localObject1 = localObject7;
          localException1.printStackTrace();
          localObject4 = "1";
          continue;
          if (i != 304) {
            break;
          }
          updateLastTimestamp(String.valueOf(TinybeeLogger.Config.getTimeStamp()));
        }
        throw new Exception("Invalid response:" + i);
      }
      finally
      {
        for (;;)
        {
          localObject8 = localObject2;
        }
      }
      localObject1 = localObject7;
      for (;;)
      {
        try
        {
          localObject3 = new URL(TinybeeLogger.Config.getUpdateInfoURL(TinybeeLogger.this.sandboxMode) + "?appid=" + getAppId() + "&timestamp=" + getLastTimestamp() + "&packagename=" + this.context.getPackageName() + "&versioncode=" + (String)localObject3);
          localObject1 = localObject7;
          new StringBuilder("GET:").append(localObject3).toString();
          localObject1 = localObject7;
          localObject3 = (HttpURLConnection)((URL)localObject3).openConnection();
        }
        catch (Exception localException3)
        {
          Object localObject4;
          Object localObject8;
          Object localObject6 = localObject9;
          continue;
        }
        try
        {
          ((HttpURLConnection)localObject3).setDoInput(true);
          ((HttpURLConnection)localObject3).setRequestMethod("GET");
          ((HttpURLConnection)localObject3).setUseCaches(false);
          ((HttpURLConnection)localObject3).setConnectTimeout(10000);
          i = ((HttpURLConnection)localObject3).getResponseCode();
          new StringBuilder("ResponseCode:").append(i).toString();
          if (i != 200) {
            continue;
          }
          updateLastTimestamp(String.valueOf(TinybeeLogger.Config.getTimeStamp()));
          consumeContent(read(((HttpURLConnection)localObject3).getInputStream(), "UTF-8"));
        }
        catch (Exception localException2)
        {
          localObject1 = localObject4;
          localException2.printStackTrace();
          localObject1 = localObject4;
          retry(3, true);
          if (localObject4 == null) {
            continue;
          }
          ((HttpURLConnection)localObject4).disconnect();
          return;
          if (i != 404) {
            continue;
          }
          updateLastTimestamp(String.valueOf(TinybeeLogger.Config.getTimeStamp()));
          TinybeeLogger.this.clearUpdateInfo();
        }
        finally
        {
          localObject8 = localObject4;
          localObject4 = localObject2;
          if (localObject8 == null) {
            continue;
          }
          localObject8.disconnect();
        }
      }
      if (localObject3 != null) {
        ((HttpURLConnection)localObject3).disconnect();
      }
    }
  }
}
