.class public abstract Lcom/studio/motionwelder/MPlayer;
.super Ljava/lang/Object;


# instance fields
.field private eP:Lcom/studio/motionwelder/MSpriteData;

.field private eQ:I

.field private eR:I

.field private eS:I

.field private eT:I

.field private eU:I

.field private eV:[I

.field private final eW:B

.field private final eX:B

.field private final eY:B

.field private final eZ:B

.field private ep:I

.field private final fa:B

.field private final fb:B

.field private final fc:B

.field private final fd:B

.field private final fe:B

.field private final ff:B

.field private final fg:B


# direct methods
.method public constructor <init>(Lcom/studio/motionwelder/MSpriteData;)V
    .locals 2

    const/4 v1, 0x4

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    new-array v0, v1, [I

    iput-object v0, p0, Lcom/studio/motionwelder/MPlayer;->eV:[I

    const/4 v0, 0x0

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->eW:B

    const/4 v0, 0x2

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->eX:B

    iput-byte v1, p0, Lcom/studio/motionwelder/MPlayer;->eY:B

    const/4 v0, 0x1

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->eZ:B

    const/4 v0, 0x3

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->fa:B

    const/4 v0, 0x5

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->fb:B

    const/4 v0, 0x7

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->fc:B

    const/16 v0, 0x9

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->fd:B

    const/16 v0, 0xb

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->fe:B

    const/16 v0, 0xd

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->ff:B

    const/16 v0, 0xf

    iput-byte v0, p0, Lcom/studio/motionwelder/MPlayer;->fg:B

    iput-object p1, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    return-void
.end method

.method private l(I)V
    .locals 2

    iput p1, p0, Lcom/studio/motionwelder/MPlayer;->ep:I

    const/4 v0, 0x0

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->eT:I

    iget-object v0, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v0, v0, Lcom/studio/motionwelder/MSpriteData;->fk:[S

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->eQ:I

    shl-int/lit8 v1, v1, 0x1

    aget-short v0, v0, v1

    add-int/2addr v0, p1

    iget-object v1, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v1, v1, Lcom/studio/motionwelder/MSpriteData;->fl:[S

    shl-int/lit8 v0, v0, 0x2

    aget-short v0, v1, v0

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->eU:I

    return-void
.end method


# virtual methods
.method protected abstract f(II)V
.end method

.method public final f(Lcom/a/a/a/i;)V
    .locals 22

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v3, v3, Lcom/studio/motionwelder/MSpriteData;->fu:[S

    move-object/from16 v0, p0

    iget v4, v0, Lcom/studio/motionwelder/MPlayer;->eU:I

    shl-int/lit8 v4, v4, 0x1

    aget-short v3, v3, v4

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v4, v4, Lcom/studio/motionwelder/MSpriteData;->fu:[S

    move-object/from16 v0, p0

    iget v5, v0, Lcom/studio/motionwelder/MPlayer;->eU:I

    shl-int/lit8 v5, v5, 0x1

    add-int/lit8 v5, v5, 0x1

    aget-short v12, v4, v5

    invoke-virtual/range {p1 .. p1}, Lcom/a/a/a/i;->R()I

    move-result v13

    invoke-virtual/range {p1 .. p1}, Lcom/a/a/a/i;->S()I

    move-result v14

    invoke-virtual/range {p1 .. p1}, Lcom/a/a/a/i;->Q()I

    move-result v15

    invoke-virtual/range {p1 .. p1}, Lcom/a/a/a/i;->P()I

    move-result v16

    :goto_0
    if-lt v3, v12, :cond_0

    return-void

    :cond_0
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v4, v4, Lcom/studio/motionwelder/MSpriteData;->fm:[S

    add-int/lit8 v5, v3, 0x1

    aget-short v9, v4, v3

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v3, v3, Lcom/studio/motionwelder/MSpriteData;->fm:[S

    add-int/lit8 v6, v5, 0x1

    aget-short v4, v3, v5

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v3, v3, Lcom/studio/motionwelder/MSpriteData;->fm:[S

    add-int/lit8 v5, v6, 0x1

    aget-short v3, v3, v6

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v6, v6, Lcom/studio/motionwelder/MSpriteData;->fm:[S

    add-int/lit8 v11, v5, 0x1

    aget-short v5, v6, v5

    int-to-byte v5, v5

    and-int/lit8 v6, v5, 0x1

    if-nez v6, :cond_9

    and-int/lit16 v6, v5, 0xf8

    shr-int/lit8 v6, v6, 0x3

    int-to-byte v10, v6

    and-int/lit8 v5, v5, 0x7

    int-to-byte v5, v5

    shr-int/lit8 v5, v5, 0x1

    int-to-byte v5, v5

    mul-int/lit8 v6, v9, 0x4

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v7, v7, Lcom/studio/motionwelder/MSpriteData;->fn:[S

    add-int/lit8 v8, v6, 0x1

    aget-short v7, v7, v6

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v6, v6, Lcom/studio/motionwelder/MSpriteData;->fn:[S

    add-int/lit8 v17, v8, 0x1

    aget-short v6, v6, v8

    move-object/from16 v0, p0

    iget-object v8, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v8, v8, Lcom/studio/motionwelder/MSpriteData;->fn:[S

    add-int/lit8 v18, v17, 0x1

    aget-short v17, v8, v17

    move-object/from16 v0, p0

    iget-object v8, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v8, v8, Lcom/studio/motionwelder/MSpriteData;->fn:[S

    aget-short v18, v8, v18

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v19

    move/from16 v0, v19

    if-ne v5, v0, :cond_2

    const/4 v5, 0x0

    move v8, v5

    :goto_1
    const/4 v5, 0x1

    move/from16 v0, v19

    if-ne v0, v5, :cond_5

    neg-int v4, v4

    sub-int v4, v4, v17

    move v5, v4

    move v4, v3

    :goto_2
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-boolean v3, v3, Lcom/studio/motionwelder/MSpriteData;->fv:Z

    if-eqz v3, :cond_6

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v3, v3, Lcom/studio/motionwelder/MSpriteData;->fw:Ljava/util/Vector;

    invoke-virtual {v3, v10}, Ljava/util/Vector;->elementAt(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, [[Lcom/a/a/a/j;

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v6, v6, Lcom/studio/motionwelder/MSpriteData;->ft:[S

    aget-short v6, v6, v10

    sub-int v6, v9, v6

    aget-object v3, v3, v6

    aget-object v3, v3, v8

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v6

    add-int/2addr v5, v6

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v6

    add-int/2addr v4, v6

    invoke-virtual {v3}, Lcom/a/a/a/j;->getWidth()I

    move-result v6

    invoke-virtual {v3}, Lcom/a/a/a/j;->getHeight()I

    move-result v7

    move-object/from16 v0, p1

    invoke-virtual {v0, v5, v4, v6, v7}, Lcom/a/a/a/i;->f(IIII)V

    const/16 v6, 0x14

    move-object/from16 v0, p1

    invoke-virtual {v0, v3, v5, v4, v6}, Lcom/a/a/a/i;->a(Lcom/a/a/a/j;III)V

    :cond_1
    :goto_3
    move-object/from16 v0, p1

    move/from16 v1, v16

    invoke-virtual {v0, v13, v14, v15, v1}, Lcom/a/a/a/i;->f(IIII)V

    move v3, v11

    goto/16 :goto_0

    :cond_2
    if-eqz v5, :cond_3

    if-nez v19, :cond_4

    :cond_3
    add-int v5, v5, v19

    int-to-byte v5, v5

    move v8, v5

    goto :goto_1

    :cond_4
    sget-object v3, Ljava/lang/System;->out:Ljava/io/PrintStream;

    const-string v4, "FLIP H and FLIP V, cannot be used at a same time, use your own implementation"

    invoke-virtual {v3, v4}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V

    goto :goto_3

    :cond_5
    const/4 v5, 0x2

    move/from16 v0, v19

    if-ne v0, v5, :cond_1e

    neg-int v3, v3

    sub-int v3, v3, v18

    move v5, v4

    move v4, v3

    goto :goto_2

    :cond_6
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v3, v3, Lcom/studio/motionwelder/MSpriteData;->fw:Ljava/util/Vector;

    invoke-virtual {v3, v10}, Ljava/util/Vector;->elementAt(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, [Lcom/a/a/a/j;

    const/4 v9, 0x1

    if-ne v8, v9, :cond_8

    const/4 v9, 0x0

    aget-object v9, v3, v9

    invoke-virtual {v9}, Lcom/a/a/a/j;->getWidth()I

    move-result v9

    sub-int v9, v9, v17

    sub-int v7, v9, v7

    :cond_7
    :goto_4
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v9

    add-int/2addr v5, v9

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v9

    add-int/2addr v4, v9

    move-object/from16 v0, p1

    move/from16 v1, v17

    move/from16 v2, v18

    invoke-virtual {v0, v5, v4, v1, v2}, Lcom/a/a/a/i;->b(IIII)V

    move-object/from16 v0, p1

    move/from16 v1, v17

    move/from16 v2, v18

    invoke-virtual {v0, v5, v4, v1, v2}, Lcom/a/a/a/i;->f(IIII)V

    aget-object v3, v3, v8

    sub-int/2addr v5, v7

    sub-int/2addr v4, v6

    const/16 v6, 0x14

    move-object/from16 v0, p1

    invoke-virtual {v0, v3, v5, v4, v6}, Lcom/a/a/a/i;->a(Lcom/a/a/a/j;III)V

    goto :goto_3

    :cond_8
    const/4 v9, 0x1

    if-ne v8, v9, :cond_7

    const/4 v9, 0x0

    aget-object v9, v3, v9

    invoke-virtual {v9}, Lcom/a/a/a/j;->getHeight()I

    move-result v9

    sub-int v9, v9, v18

    sub-int v6, v9, v6

    goto :goto_4

    :cond_9
    const/4 v6, 0x1

    if-eq v5, v6, :cond_a

    const/4 v6, 0x3

    if-ne v5, v6, :cond_f

    :cond_a
    mul-int/lit8 v10, v9, 0x5

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v6, v6, Lcom/studio/motionwelder/MSpriteData;->fo:[I

    aget v6, v6, v10

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v7, v7, Lcom/studio/motionwelder/MSpriteData;->fo:[I

    add-int/lit8 v8, v10, 0x1

    aget v7, v7, v8

    move-object/from16 v0, p0

    iget-object v8, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v8, v8, Lcom/studio/motionwelder/MSpriteData;->fo:[I

    add-int/lit8 v9, v10, 0x2

    aget v8, v8, v9

    move-object/from16 v0, p0

    iget-object v9, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v9, v9, Lcom/studio/motionwelder/MSpriteData;->fo:[I

    add-int/lit8 v17, v10, 0x3

    aget v9, v9, v17

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    move-object/from16 v17, v0

    move-object/from16 v0, v17

    iget-object v0, v0, Lcom/studio/motionwelder/MSpriteData;->fo:[I

    move-object/from16 v17, v0

    add-int/lit8 v10, v10, 0x4

    aget v17, v17, v10

    const/4 v10, 0x3

    if-ne v5, v10, :cond_c

    const/4 v5, 0x1

    move v10, v5

    :goto_5
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v5

    const/16 v18, 0x1

    move/from16 v0, v18

    if-ne v5, v0, :cond_d

    neg-int v4, v4

    sub-int/2addr v4, v6

    :cond_b
    :goto_6
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v5

    add-int/2addr v4, v5

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v5

    add-int/2addr v5, v3

    move-object/from16 v0, p1

    move/from16 v1, v17

    invoke-virtual {v0, v1}, Lcom/a/a/a/i;->setColor(I)V

    if-eqz v10, :cond_e

    move-object/from16 v3, p1

    invoke-virtual/range {v3 .. v9}, Lcom/a/a/a/i;->c(IIIIII)V

    goto/16 :goto_3

    :cond_c
    const/4 v5, 0x0

    move v10, v5

    goto :goto_5

    :cond_d
    const/16 v18, 0x2

    move/from16 v0, v18

    if-ne v5, v0, :cond_b

    neg-int v3, v3

    sub-int/2addr v3, v7

    goto :goto_6

    :cond_e
    move-object/from16 v3, p1

    invoke-virtual/range {v3 .. v9}, Lcom/a/a/a/i;->a(IIIIII)V

    goto/16 :goto_3

    :cond_f
    const/4 v6, 0x5

    if-ne v5, v6, :cond_11

    mul-int/lit8 v7, v9, 0x3

    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v5, v5, Lcom/studio/motionwelder/MSpriteData;->fp:[I

    aget v6, v5, v7

    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v5, v5, Lcom/studio/motionwelder/MSpriteData;->fp:[I

    add-int/lit8 v8, v7, 0x1

    aget v5, v5, v8

    move-object/from16 v0, p0

    iget-object v8, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v8, v8, Lcom/studio/motionwelder/MSpriteData;->fp:[I

    add-int/lit8 v7, v7, 0x2

    aget v8, v8, v7

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v7

    const/4 v9, 0x1

    if-ne v7, v9, :cond_10

    neg-int v7, v4

    neg-int v4, v6

    move v6, v7

    move/from16 v20, v3

    move v3, v5

    move/from16 v5, v20

    :goto_7
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v7

    add-int/2addr v6, v7

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v7

    add-int/2addr v4, v7

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v7

    add-int/2addr v5, v7

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v7

    add-int/2addr v3, v7

    move-object/from16 v0, p1

    invoke-virtual {v0, v8}, Lcom/a/a/a/i;->setColor(I)V

    move-object/from16 v0, p1

    invoke-virtual {v0, v6, v5, v4, v3}, Lcom/a/a/a/i;->c(IIII)V

    goto/16 :goto_3

    :cond_10
    const/4 v9, 0x2

    if-ne v7, v9, :cond_1d

    neg-int v7, v3

    neg-int v3, v5

    move v5, v7

    move/from16 v20, v6

    move v6, v4

    move/from16 v4, v20

    goto :goto_7

    :cond_11
    const/4 v6, 0x7

    if-eq v5, v6, :cond_12

    const/16 v6, 0x9

    if-ne v5, v6, :cond_17

    :cond_12
    mul-int/lit8 v6, v9, 0x3

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v7, v7, Lcom/studio/motionwelder/MSpriteData;->fq:[I

    aget v7, v7, v6

    move-object/from16 v0, p0

    iget-object v8, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v8, v8, Lcom/studio/motionwelder/MSpriteData;->fq:[I

    add-int/lit8 v9, v6, 0x1

    aget v8, v8, v9

    move-object/from16 v0, p0

    iget-object v9, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v9, v9, Lcom/studio/motionwelder/MSpriteData;->fq:[I

    add-int/lit8 v6, v6, 0x2

    aget v6, v9, v6

    const/16 v9, 0x9

    if-ne v5, v9, :cond_14

    const/4 v5, 0x1

    :goto_8
    move-object/from16 v0, p1

    invoke-virtual {v0, v6}, Lcom/a/a/a/i;->setColor(I)V

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v6

    const/4 v9, 0x1

    if-ne v6, v9, :cond_15

    neg-int v4, v4

    sub-int/2addr v4, v7

    :cond_13
    :goto_9
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v6

    add-int/2addr v4, v6

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v6

    add-int/2addr v3, v6

    if-eqz v5, :cond_16

    move-object/from16 v0, p1

    invoke-virtual {v0, v4, v3, v7, v8}, Lcom/a/a/a/i;->e(IIII)V

    goto/16 :goto_3

    :cond_14
    const/4 v5, 0x0

    goto :goto_8

    :cond_15
    const/4 v9, 0x2

    if-ne v6, v9, :cond_13

    neg-int v3, v3

    sub-int/2addr v3, v8

    goto :goto_9

    :cond_16
    move-object/from16 v0, p1

    invoke-virtual {v0, v4, v3, v7, v8}, Lcom/a/a/a/i;->d(IIII)V

    goto/16 :goto_3

    :cond_17
    const/16 v6, 0xb

    if-eq v5, v6, :cond_18

    const/16 v6, 0xd

    if-ne v5, v6, :cond_1

    :cond_18
    mul-int/lit8 v10, v9, 0x5

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v6, v6, Lcom/studio/motionwelder/MSpriteData;->fr:[I

    aget v6, v6, v10

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v7, v7, Lcom/studio/motionwelder/MSpriteData;->fr:[I

    add-int/lit8 v8, v10, 0x1

    aget v7, v7, v8

    move-object/from16 v0, p0

    iget-object v8, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v8, v8, Lcom/studio/motionwelder/MSpriteData;->fr:[I

    add-int/lit8 v9, v10, 0x2

    aget v8, v8, v9

    move-object/from16 v0, p0

    iget-object v9, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v9, v9, Lcom/studio/motionwelder/MSpriteData;->fr:[I

    add-int/lit8 v17, v10, 0x3

    aget v9, v9, v17

    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    move-object/from16 v17, v0

    move-object/from16 v0, v17

    iget-object v0, v0, Lcom/studio/motionwelder/MSpriteData;->fr:[I

    move-object/from16 v17, v0

    add-int/lit8 v10, v10, 0x4

    aget v17, v17, v10

    const/16 v10, 0xd

    if-ne v5, v10, :cond_1a

    const/4 v5, 0x1

    move v10, v5

    :goto_a
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v5

    const/16 v18, 0x1

    move/from16 v0, v18

    if-ne v5, v0, :cond_1b

    neg-int v4, v4

    sub-int/2addr v4, v6

    :cond_19
    :goto_b
    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->s()I

    move-result v5

    add-int/2addr v4, v5

    invoke-virtual/range {p0 .. p0}, Lcom/studio/motionwelder/MPlayer;->t()I

    move-result v5

    add-int/2addr v5, v3

    move-object/from16 v0, p1

    move/from16 v1, v17

    invoke-virtual {v0, v1}, Lcom/a/a/a/i;->setColor(I)V

    if-eqz v10, :cond_1c

    move-object/from16 v3, p1

    invoke-virtual/range {v3 .. v9}, Lcom/a/a/a/i;->d(IIIIII)V

    goto/16 :goto_3

    :cond_1a
    const/4 v5, 0x0

    move v10, v5

    goto :goto_a

    :cond_1b
    const/16 v18, 0x2

    move/from16 v0, v18

    if-ne v5, v0, :cond_19

    neg-int v3, v3

    sub-int/2addr v3, v7

    goto :goto_b

    :cond_1c
    move-object/from16 v3, p1

    invoke-virtual/range {v3 .. v9}, Lcom/a/a/a/i;->b(IIIIII)V

    goto/16 :goto_3

    :cond_1d
    move/from16 v20, v5

    move v5, v3

    move/from16 v3, v20

    move/from16 v21, v6

    move v6, v4

    move/from16 v4, v21

    goto/16 :goto_7

    :cond_1e
    move v5, v4

    move v4, v3

    goto/16 :goto_2
.end method

.method public final k(I)V
    .locals 4

    const/4 v3, 0x0

    iput v3, p0, Lcom/studio/motionwelder/MPlayer;->eQ:I

    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->eQ:I

    shl-int/lit8 v0, v0, 0x1

    iget-object v1, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v1, v1, Lcom/studio/motionwelder/MSpriteData;->fk:[S

    add-int/lit8 v2, v0, 0x1

    aget-short v1, v1, v2

    iget-object v2, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v2, v2, Lcom/studio/motionwelder/MSpriteData;->fk:[S

    aget-short v0, v2, v0

    sub-int v0, v1, v0

    add-int/lit8 v0, v0, 0x1

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->eR:I

    invoke-direct {p0, v3}, Lcom/studio/motionwelder/MPlayer;->l(I)V

    invoke-virtual {p0}, Lcom/studio/motionwelder/MPlayer;->x()V

    return-void
.end method

.method public final m(I)V
    .locals 1

    const/4 v0, -0x1

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->eS:I

    return-void
.end method

.method protected abstract s()I
.end method

.method protected abstract t()I
.end method

.method protected abstract u()B
.end method

.method public final update()V
    .locals 4

    iget-object v0, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v0, v0, Lcom/studio/motionwelder/MSpriteData;->fk:[S

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->eQ:I

    shl-int/lit8 v1, v1, 0x1

    aget-short v0, v0, v1

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->ep:I

    add-int/2addr v0, v1

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->eT:I

    iget-object v2, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v2, v2, Lcom/studio/motionwelder/MSpriteData;->fl:[S

    shl-int/lit8 v0, v0, 0x2

    add-int/lit8 v0, v0, 0x1

    aget-short v0, v2, v0

    if-ge v1, v0, :cond_0

    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->eT:I

    add-int/lit8 v0, v0, 0x1

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->eT:I

    :goto_0
    return-void

    :cond_0
    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->ep:I

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->eR:I

    add-int/lit8 v1, v1, -0x1

    if-lt v0, v1, :cond_2

    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->eS:I

    if-gez v0, :cond_1

    invoke-virtual {p0}, Lcom/studio/motionwelder/MPlayer;->y()V

    goto :goto_0

    :cond_1
    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->eS:I

    add-int/lit8 v0, v0, -0x1

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->ep:I

    :cond_2
    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->ep:I

    add-int/lit8 v0, v0, 0x1

    invoke-direct {p0, v0}, Lcom/studio/motionwelder/MPlayer;->l(I)V

    iget-object v0, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v0, v0, Lcom/studio/motionwelder/MSpriteData;->fk:[S

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->eQ:I

    shl-int/lit8 v1, v1, 0x1

    aget-short v0, v0, v1

    iget v1, p0, Lcom/studio/motionwelder/MPlayer;->ep:I

    add-int/2addr v1, v0

    iget-object v0, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v0, v0, Lcom/studio/motionwelder/MSpriteData;->fl:[S

    shl-int/lit8 v2, v1, 0x2

    add-int/lit8 v2, v2, 0x2

    aget-short v0, v0, v2

    iget-object v2, p0, Lcom/studio/motionwelder/MPlayer;->eP:Lcom/studio/motionwelder/MSpriteData;

    iget-object v2, v2, Lcom/studio/motionwelder/MSpriteData;->fl:[S

    shl-int/lit8 v1, v1, 0x2

    add-int/lit8 v1, v1, 0x3

    aget-short v1, v2, v1

    invoke-virtual {p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v2

    const/4 v3, 0x1

    if-ne v2, v3, :cond_3

    neg-int v0, v0

    :cond_3
    invoke-virtual {p0}, Lcom/studio/motionwelder/MPlayer;->u()B

    move-result v2

    const/4 v3, 0x2

    if-ne v2, v3, :cond_4

    neg-int v1, v1

    :cond_4
    invoke-virtual {p0, v0, v1}, Lcom/studio/motionwelder/MPlayer;->f(II)V

    iget v0, p0, Lcom/studio/motionwelder/MPlayer;->eT:I

    add-int/lit8 v0, v0, 0x1

    iput v0, p0, Lcom/studio/motionwelder/MPlayer;->eT:I

    goto :goto_0
.end method

.method protected abstract x()V
.end method

.method protected abstract y()V
.end method
