package com.upay.billing.utils;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.net.Proxy;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.telephony.TelephonyManager;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import com.upay.billing.UpayConstant;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpParams;
import org.json.JSONObject;

public class Util
{
  private static final char[] HEX = "0123456789ABCDEF".toCharArray();
  private static final String PREFERENCE_NAME = "upay_pay";
  private static final long START_DATE = parseDate("yyyyMMdd", "20140101").getTime();
  private static final char[] TABLE = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };
  private static final String TAG = "Util";
  private static final HashMap<String, SimpleDateFormat> formatters = new HashMap();
  private static long lastClickTime;
  private static ProgressDialog mProgressDialog;
  private static SharedPreferences mSharedPreferences;
  private static String mymobile;
  private static final Pattern outClass = Pattern.compile("^com\\.upay\\.billing\\.engine\\..+$");
  private static HashMap<Character, Integer> reverseTable = null;
  
  public Util() {}
  
  public static void addTask(Runnable paramRunnable)
  {
    new Thread(paramRunnable).start();
  }
  
  public static boolean appInstalled(Context paramContext)
  {
    boolean bool = false;
    try
    {
      paramContext = paramContext.getPackageManager().getPackageInfo("com.upay.billing", 0);
      if (paramContext != null) {
        bool = true;
      }
      return bool;
    }
    catch (PackageManager.NameNotFoundException paramContext) {}
    return false;
  }
  
  public static long appLastModified(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    try
    {
      paramContext = localPackageManager.getApplicationInfo(paramContext.getPackageName(), 0);
      return new File(paramContext.sourceDir).lastModified();
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        paramContext = null;
      }
    }
  }
  
  public static final boolean assetExist(Context paramContext, String paramString)
  {
    boolean bool2 = false;
    boolean bool1 = false;
    try
    {
      paramContext = paramContext.getResources().getAssets().open(paramString);
      if (paramContext != null) {
        bool1 = true;
      }
      bool2 = bool1;
      paramContext.close();
      return bool1;
    }
    catch (IOException paramContext) {}
    return bool2;
  }
  
  public static final String bytesToString(byte[] paramArrayOfByte)
  {
    int j = 0;
    int i = j;
    try
    {
      if (paramArrayOfByte.length >= 3)
      {
        i = j;
        if (paramArrayOfByte[0] == 239)
        {
          i = j;
          if (paramArrayOfByte[1] == 187)
          {
            i = j;
            if (paramArrayOfByte[2] == 191) {
              i = 3;
            }
          }
        }
      }
      paramArrayOfByte = new String(paramArrayOfByte, i, paramArrayOfByte.length - i, "UTF-8");
      return paramArrayOfByte;
    }
    catch (UnsupportedEncodingException paramArrayOfByte) {}
    return null;
  }
  
  public static final boolean checkRoot()
  {
    return new File("/system/bin/su").exists();
  }
  
  public static void closeWaitDialog()
  {
    mProgressDialog.cancel();
  }
  
  public static final Object createInstance(Context paramContext, String paramString)
  {
    Log.i("Util", "createInstance,class=" + paramString);
    File localFile = new File(NativeUtil.getExtPath());
    if (localFile.exists())
    {
      paramContext = paramContext.getDir("dex", 0);
      String str = localFile.getParentFile().getAbsolutePath();
      paramContext = new l(localFile.getAbsolutePath(), paramContext.getAbsolutePath(), str, ClassLoader.getSystemClassLoader());
      try
      {
        paramContext = paramContext.loadClass(paramString);
        Log.i("Util", "dex class loaded: " + paramString);
        paramContext = paramContext.newInstance();
        return paramContext;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
    }
    try
    {
      paramContext = Class.forName(paramString);
      Log.i("Util", "in-apk class loaded: " + paramString);
      paramContext = paramContext.newInstance();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static void deleteFile(File paramFile)
  {
    if (paramFile.isFile()) {
      paramFile.delete();
    }
    while (!paramFile.isDirectory()) {
      return;
    }
    File[] arrayOfFile = paramFile.listFiles();
    if ((arrayOfFile == null) || (arrayOfFile.length == 0))
    {
      paramFile.delete();
      return;
    }
    int i = 0;
    while (i < arrayOfFile.length)
    {
      deleteFile(arrayOfFile[i]);
      i += 1;
    }
    paramFile.delete();
  }
  
  public static final int dp2px(Context paramContext, float paramFloat)
  {
    return (int)TypedValue.applyDimension(1, paramFloat, paramContext.getApplicationContext().getResources().getDisplayMetrics());
  }
  
  public static final boolean empty(String paramString)
  {
    return (paramString == null) || (paramString.length() == 0);
  }
  
  public static final <T> boolean empty(Collection<T> paramCollection)
  {
    return (paramCollection == null) || (paramCollection.size() == 0);
  }
  
  public static final <K, V> boolean empty(Map<K, V> paramMap)
  {
    return (paramMap == null) || (paramMap.size() == 0);
  }
  
  public static final String extract(String paramString, Pattern paramPattern, int paramInt)
  {
    paramString = extract(paramString, paramPattern);
    if ((paramString != null) && (paramInt < paramString.length)) {
      return paramString[paramInt];
    }
    return null;
  }
  
  public static final String[] extract(String paramString, Pattern paramPattern)
  {
    Matcher localMatcher = paramPattern.matcher(paramString);
    boolean bool = localMatcher.find();
    paramString = null;
    if (bool)
    {
      paramPattern = new String[localMatcher.groupCount() + 1];
      int i = paramPattern.length;
      for (;;)
      {
        i -= 1;
        paramString = paramPattern;
        if (i < 0) {
          break;
        }
        paramPattern[i] = localMatcher.group(i);
      }
    }
    return paramString;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public static final String formatDate(String paramString, Date paramDate)
  {
    Object localObject2 = (SimpleDateFormat)formatters.get("pattern");
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject2 = formatters;
      localObject1 = new SimpleDateFormat(paramString);
      ((HashMap)localObject2).put(paramString, localObject1);
    }
    return ((SimpleDateFormat)localObject1).format(paramDate);
  }
  
  @SuppressLint({"InlinedApi"})
  public static int getInt(Context paramContext, String paramString)
  {
    mSharedPreferences = paramContext.getSharedPreferences("upay_pay", 4);
    return mSharedPreferences.getInt(paramString, 0);
  }
  
  public static String getIp(Context paramContext)
  {
    try
    {
      paramContext = (WifiManager)paramContext.getSystemService("wifi");
      if (paramContext.isWifiEnabled()) {
        return intToIp(paramContext.getConnectionInfo().getIpAddress());
      }
      InetAddress localInetAddress;
      do
      {
        paramContext = NetworkInterface.getNetworkInterfaces();
        Enumeration localEnumeration;
        while (!localEnumeration.hasMoreElements())
        {
          if (!paramContext.hasMoreElements()) {
            break;
          }
          localEnumeration = ((NetworkInterface)paramContext.nextElement()).getInetAddresses();
        }
        localInetAddress = (InetAddress)localEnumeration.nextElement();
      } while ((localInetAddress.isLoopbackAddress()) || (!(localInetAddress instanceof Inet4Address)));
      paramContext = localInetAddress.getHostAddress().toString();
      return paramContext;
    }
    catch (SocketException paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  @SuppressLint({"InlinedApi"})
  public static long getLong(Context paramContext, String paramString)
  {
    mSharedPreferences = paramContext.getSharedPreferences("upay_pay", 4);
    return mSharedPreferences.getLong(paramString, 0L);
  }
  
  public static final String getMac(Context paramContext)
  {
    WifiManager localWifiManager = (WifiManager)paramContext.getSystemService("wifi");
    String str = localWifiManager.getConnectionInfo().getMacAddress();
    paramContext = str;
    if (str == null)
    {
      paramContext = str;
      if (!localWifiManager.isWifiEnabled())
      {
        localWifiManager.setWifiEnabled(true);
        do
        {
          paramContext = localWifiManager.getConnectionInfo().getMacAddress();
        } while (paramContext == null);
        localWifiManager.setWifiEnabled(false);
      }
    }
    return paramContext;
  }
  
  public static String getNetType(Context paramContext)
  {
    Object localObject = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if ((localObject != null) && (((NetworkInfo)localObject).isConnected()))
    {
      localObject = ((NetworkInfo)localObject).getTypeName();
      if (((String)localObject).equalsIgnoreCase("WIFI")) {
        return "WIFI";
      }
      if (((String)localObject).equalsIgnoreCase("MOBILE"))
      {
        if (empty(Proxy.getDefaultHost()))
        {
          if (isFastMobileNetwork(paramContext)) {
            return "3G";
          }
          return "2G";
        }
        return "WAP";
      }
    }
    return null;
  }
  
  public static void getPhoneNumber(Context paramContext)
  {
    TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    addTask(new m(UpayConstant.API_BASE_URL + "user/modempool_get", localTelephonyManager, paramContext));
  }
  
  @SuppressLint({"InlinedApi"})
  public static String getString(Context paramContext, String paramString)
  {
    mSharedPreferences = paramContext.getSharedPreferences("upay_pay", 4);
    return mSharedPreferences.getString(paramString, "");
  }
  
  public static boolean getTimeDiff(Context paramContext)
  {
    boolean bool2 = false;
    long l = getLong(paramContext, "zcurlupdatatime");
    boolean bool1 = bool2;
    if (l > 0L)
    {
      bool1 = bool2;
      if (new Date(System.currentTimeMillis()).getTime() - l > 7200000L) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public static final long getTs()
  {
    return System.currentTimeMillis();
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public static final String getUnixTime()
  {
    return Long.toString(System.currentTimeMillis() / 1000L);
  }
  
  public static void getUser(Context paramContext)
  {
    TelephonyManager localTelephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    for (;;)
    {
      try
      {
        Log.i("Util", "startGetUser");
        localObject3 = localTelephonyManager.getSimSerialNumber();
        localObject1 = "";
        if (!empty((String)localObject3))
        {
          localObject2 = localObject3;
          if (((String)localObject3).length() >= 16) {}
        }
        else
        {
          localObject2 = localTelephonyManager.getSubscriberId();
          localObject1 = "imsi:";
        }
        if (!empty((String)localObject2)) {
          break label399;
        }
        localObject1 = localTelephonyManager.getDeviceId();
        localObject2 = "imei:";
        localObject3 = new ArrayList();
        ((List)localObject3).add(new BasicNameValuePair("iccid", (String)localObject2 + (String)localObject1));
        localObject1 = URLEncodedUtils.format((List)localObject3, "UTF-8");
        localObject1 = new HttpGet(UpayConstant.API_BASE_URL + "user/show" + "?" + (String)localObject1);
        localObject2 = new DefaultHttpClient();
        ((HttpClient)localObject2).getParams().setParameter("http.connection.timeout", Integer.valueOf(30000));
        ((HttpClient)localObject2).getParams().setParameter("http.socket.timeout", Integer.valueOf(30000));
        localObject1 = ((HttpClient)localObject2).execute((HttpUriRequest)localObject1);
        if (((HttpResponse)localObject1).getStatusLine().getStatusCode() == 200)
        {
          localObject1 = new BufferedReader(new InputStreamReader(((HttpResponse)localObject1).getEntity().getContent()));
          localObject2 = new StringBuffer();
          localObject3 = ((BufferedReader)localObject1).readLine();
          if (localObject3 != null)
          {
            ((StringBuffer)localObject2).append((String)localObject3);
            continue;
          }
        }
        else
        {
          return;
        }
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
      }
      do
      {
        do
        {
          do
          {
            localObject1 = ((StringBuffer)localObject2).toString();
          } while ((localObject1 == null) || ("".equals(((String)localObject1).trim())));
          localObject1 = new JSONObject((String)localObject1);
        } while (((JSONObject)localObject1).getInt("result") != 200);
        mymobile = ((JSONObject)localObject1).getString("mobile");
      } while ((mymobile == null) && ("".equals(mymobile.trim())));
      saveString(paramContext, "mymobile", mymobile);
      saveString(paramContext, "imsi", ((JSONObject)localObject1).getString("imsi"));
      return;
      label399:
      Object localObject3 = localObject1;
      Object localObject1 = localObject2;
      Object localObject2 = localObject3;
    }
  }
  
  public static final String ifEmpty(String paramString1, String paramString2)
  {
    if (empty(paramString1)) {
      return paramString2;
    }
    return paramString1;
  }
  
  private static String intToIp(int paramInt)
  {
    return (paramInt & 0xFF) + "." + (paramInt >> 8 & 0xFF) + "." + (paramInt >> 16 & 0xFF) + "." + (paramInt >> 24 & 0xFF);
  }
  
  public static final Object invokeGetter(Object paramObject, String paramString)
  {
    try
    {
      paramObject = paramObject.getClass().getMethod(paramString, new Class[0]).invoke(paramObject, new Object[0]);
      return paramObject;
    }
    catch (Exception paramObject)
    {
      Log.e("Util", "invokeGetter(" + paramString + "), ex=" + paramObject);
    }
    return null;
  }
  
  private static boolean isFastMobileNetwork(Context paramContext)
  {
    switch (((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType())
    {
    default: 
      return false;
    case 7: 
      return false;
    case 4: 
      return false;
    case 2: 
      return false;
    case 5: 
      return true;
    case 6: 
      return true;
    case 1: 
      return false;
    case 8: 
      return true;
    case 10: 
      return true;
    case 9: 
      return true;
    case 3: 
      return true;
    case 14: 
      return true;
    case 12: 
      return true;
    case 15: 
      return true;
    case 11: 
      return false;
    case 13: 
      return true;
    }
    return false;
  }
  
  public static boolean isNetworkAvailable(Context paramContext)
  {
    paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
    if (paramContext != null)
    {
      paramContext = paramContext.getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.isConnected()) && (paramContext.getState() == NetworkInfo.State.CONNECTED)) {
        return true;
      }
    }
    return false;
  }
  
  public static final String loadAssetsText(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getResources().getAssets().open(paramString);
      paramString = readText(paramContext);
      paramContext.close();
      return paramString;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static final String loadLocalText(String paramString)
  {
    try
    {
      paramString = new FileInputStream(paramString);
      String str = readText(paramString);
      paramString.close();
      return str;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static final <K, V> void mapListAdd(HashMap<K, ArrayList<V>> paramHashMap, K paramK, V paramV)
  {
    ArrayList localArrayList2 = (ArrayList)paramHashMap.get(paramK);
    ArrayList localArrayList1 = localArrayList2;
    if (localArrayList2 == null)
    {
      localArrayList1 = new ArrayList();
      paramHashMap.put(paramK, localArrayList1);
    }
    localArrayList1.add(paramV);
  }
  
  public static final <K, S, V> void mapMapAdd(HashMap<K, HashMap<S, V>> paramHashMap, K paramK, S paramS, V paramV)
  {
    HashMap localHashMap2 = (HashMap)paramHashMap.get(paramK);
    HashMap localHashMap1 = localHashMap2;
    if (localHashMap2 == null)
    {
      localHashMap1 = new HashMap();
      paramHashMap.put(paramK, localHashMap1);
    }
    localHashMap1.put(paramS, paramV);
  }
  
  public static final <K, S, V> V mapMapGet(HashMap<K, HashMap<S, V>> paramHashMap, K paramK, S paramS, V paramV)
  {
    paramK = (HashMap)paramHashMap.get(paramK);
    paramHashMap = paramV;
    if (paramK != null)
    {
      paramK = paramK.get(paramS);
      paramHashMap = paramV;
      if (paramK != null) {
        paramHashMap = paramK;
      }
    }
    return paramHashMap;
  }
  
  public static final <T> Json mapToJson(HashMap<String, T> paramHashMap)
  {
    Json localJson = Json.parse("{}");
    Iterator localIterator = paramHashMap.entrySet().iterator();
    if (localIterator.hasNext())
    {
      paramHashMap = (Map.Entry)localIterator.next();
      String str = (String)paramHashMap.getKey();
      paramHashMap = paramHashMap.getValue();
      if (paramHashMap != null) {}
      for (;;)
      {
        localJson.put(str, paramHashMap);
        break;
        paramHashMap = "";
      }
    }
    return localJson;
  }
  
  public static final String md5(String paramString)
  {
    return md5(paramString, true);
  }
  
  @SuppressLint({"DefaultLocale"})
  public static final String md5(String paramString, boolean paramBoolean)
  {
    try
    {
      Object localObject = MessageDigest.getInstance("MD5");
      ((MessageDigest)localObject).reset();
      ((MessageDigest)localObject).update(paramString.getBytes("UTF-8"));
      paramString = ((MessageDigest)localObject).digest();
      localObject = new StringBuffer();
      int j = paramString.length;
      int i = 0;
      while (i < j)
      {
        int k = paramString[i];
        ((StringBuffer)localObject).append(HEX[((k & 0xF0) >>> 4)]).append(HEX[(k & 0xF)]);
        i += 1;
      }
      paramString = ((StringBuffer)localObject).toString();
      if (paramBoolean) {
        return paramString;
      }
      paramString = paramString.toLowerCase();
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  @SuppressLint({"SimpleDateFormat"})
  public static final Date parseDate(String paramString1, String paramString2)
  {
    Object localObject2 = (SimpleDateFormat)formatters.get("pattern");
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject2 = formatters;
      localObject1 = new SimpleDateFormat(paramString1);
      ((HashMap)localObject2).put(paramString1, localObject1);
    }
    try
    {
      localObject1 = ((SimpleDateFormat)localObject1).parse(paramString2);
      return localObject1;
    }
    catch (Exception localException)
    {
      throw new IllegalArgumentException("parseDate: pattern=" + paramString1 + ",dateStr=" + paramString2);
    }
  }
  
  public static final float px2dp(Context paramContext, float paramFloat)
  {
    return paramFloat / paramContext.getResources().getDisplayMetrics().density;
  }
  
  public static final byte[] readStream(InputStream paramInputStream)
  {
    try
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      paramInputStream = new BufferedInputStream(paramInputStream);
      byte[] arrayOfByte = new byte[100000];
      for (int i = paramInputStream.read(arrayOfByte); i > 0; i = paramInputStream.read(arrayOfByte)) {
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      paramInputStream = localByteArrayOutputStream.toByteArray();
      return paramInputStream;
    }
    catch (IOException paramInputStream)
    {
      paramInputStream.printStackTrace();
    }
    return null;
  }
  
  public static final String readText(InputStream paramInputStream)
  {
    return bytesToString(readStream(paramInputStream));
  }
  
  public static void runWithTimeCheck(Runnable paramRunnable, int paramInt1, Handler paramHandler, int paramInt2)
  {
    runWithTimeCheck(paramRunnable, paramInt1, new k(paramHandler, paramInt2));
  }
  
  public static void runWithTimeCheck(Runnable paramRunnable, int paramInt, TimerTask paramTimerTask)
  {
    Timer localTimer = new Timer();
    localTimer.schedule(paramTimerTask, paramInt);
    long l = System.currentTimeMillis();
    paramRunnable.run();
    if (System.currentTimeMillis() - l < paramInt) {
      localTimer.cancel();
    }
  }
  
  public static final <T> Iterable<T> safeIter(Iterable<T> paramIterable)
  {
    if (paramIterable != null) {
      return paramIterable;
    }
    return new ArrayList(0);
  }
  
  public static final <K, V> Map<K, V> safeMap(Map<K, V> paramMap)
  {
    if (paramMap != null) {
      return paramMap;
    }
    return new HashMap(0);
  }
  
  public static final <K, V> HashMap<K, V> safePut(HashMap<K, V> paramHashMap, K paramK, V paramV)
  {
    Object localObject = paramHashMap;
    if (paramHashMap == null) {
      localObject = new HashMap();
    }
    ((HashMap)localObject).put(paramK, paramV);
    return localObject;
  }
  
  @SuppressLint({"InlinedApi"})
  public static void saveInt(Context paramContext, String paramString, int paramInt)
  {
    mSharedPreferences = paramContext.getSharedPreferences("upay_pay", 4);
    mSharedPreferences.edit().putInt(paramString, paramInt).commit();
  }
  
  @SuppressLint({"InlinedApi"})
  public static void saveLong(Context paramContext, String paramString, long paramLong)
  {
    mSharedPreferences = paramContext.getSharedPreferences("upay_pay", 4);
    mSharedPreferences.edit().putLong(paramString, paramLong).commit();
  }
  
  @SuppressLint({"InlinedApi"})
  public static void saveString(Context paramContext, String paramString1, String paramString2)
  {
    mSharedPreferences = paramContext.getSharedPreferences("upay_pay", 4);
    mSharedPreferences.edit().putString(paramString1, paramString2).commit();
  }
  
  public static final String serialize(Object paramObject)
  {
    try
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      ObjectOutputStream localObjectOutputStream = new ObjectOutputStream(localByteArrayOutputStream);
      localObjectOutputStream.writeObject(paramObject);
      localObjectOutputStream.close();
      paramObject = Base64.encodeToString(NativeUtil.encrypt(localByteArrayOutputStream.toByteArray()), 0);
      return paramObject;
    }
    catch (Exception paramObject)
    {
      paramObject.printStackTrace();
      throw new RuntimeException(paramObject);
    }
  }
  
  public static final String shortenSn(String paramString, boolean paramBoolean)
  {
    int i = 8;
    long l = ((parseDate("yyMMddHH", paramString.substring(0, 8)).getTime() - START_DATE) / 360000L + Integer.parseInt(paramString.substring(16, 18))) * 100000000L + Long.parseLong(paramString.substring(8, 16));
    if (l > 99999999999999L) {
      throw new IllegalArgumentException("trade date must be in 2014-01-01 ~ 2024-12-30");
    }
    if (paramBoolean) {
      return zeroPad(Long.valueOf(l), 14);
    }
    paramString = new StringBuffer();
    for (;;)
    {
      i -= 1;
      if (i < 0) {
        break;
      }
      paramString.append(TABLE[((int)(0x3F & l))]);
      l >>= 6;
    }
    return paramString.reverse().toString();
  }
  
  public static void showWaitDialog(Context paramContext, String paramString)
  {
    mProgressDialog = new ProgressDialog(paramContext);
    mProgressDialog.setProgressStyle(0);
    mProgressDialog.setMessage(paramString);
    mProgressDialog.setIndeterminate(false);
    mProgressDialog.show();
  }
  
  public static final int sp2px(Context paramContext, float paramFloat)
  {
    return (int)TypedValue.applyDimension(2, paramFloat, paramContext.getApplicationContext().getResources().getDisplayMetrics());
  }
  
  public static final byte[] stringToBytes(String paramString)
  {
    try
    {
      paramString = paramString.getBytes("UTF-8");
      return paramString;
    }
    catch (UnsupportedEncodingException paramString) {}
    return null;
  }
  
  public static boolean unFastDoubleClick()
  {
    long l1 = System.currentTimeMillis();
    long l2 = l1 - lastClickTime;
    if ((0L < l2) && (l2 < 500L)) {
      return false;
    }
    lastClickTime = l1;
    return true;
  }
  
  public static final Object unserialize(String paramString)
  {
    paramString = new ObjectInputStream(new ByteArrayInputStream(NativeUtil.decrypt(Base64.decode(paramString, 0))));
    Object localObject = paramString.readObject();
    paramString.close();
    return localObject;
  }
  
  public static final String unshorten(String paramString, boolean paramBoolean)
  {
    if (((paramBoolean) && (paramString.length() != 14)) || ((!paramBoolean) && (paramString.length() != 8))) {
      throw new IllegalArgumentException("shortSn=" + paramString + ",digitOnly=" + paramBoolean);
    }
    Object localObject;
    if (reverseTable == null)
    {
      localObject = new HashMap();
      reverseTable = (HashMap)localObject;
      i = TABLE.length;
      for (;;)
      {
        i -= 1;
        if (i < 0) {
          break;
        }
        ((HashMap)localObject).put(Character.valueOf(TABLE[i]), Integer.valueOf(i));
      }
    }
    long l2;
    if (paramBoolean)
    {
      l2 = Long.parseLong(paramString);
      l1 = l2 / 100000000L;
      paramString = zeroPad(Long.valueOf(l2 % 100000000L), 8);
      localObject = zeroPad(Long.valueOf(l1 % 10L), 2);
      String str = formatDate("yyMMddHH", new Date(l1 / 10L * 3600000L + START_DATE));
      return str + paramString + (String)localObject;
    }
    long l1 = 0L;
    int i = 0;
    for (;;)
    {
      l2 = l1;
      if (i >= 8) {
        break;
      }
      l2 = ((Integer)reverseTable.get(Character.valueOf(paramString.charAt(i)))).intValue();
      i += 1;
      l1 = (l1 << 6) + l2;
    }
  }
  
  public static final void unzip(InputStream paramInputStream, File paramFile)
  {
    try
    {
      ZipInputStream localZipInputStream = new ZipInputStream(paramInputStream);
      byte[] arrayOfByte = new byte[200000];
      for (;;)
      {
        Object localObject = localZipInputStream.getNextEntry();
        if (localObject == null) {
          break;
        }
        if (!((ZipEntry)localObject).isDirectory())
        {
          localObject = new FileOutputStream(new File(paramFile, ((ZipEntry)localObject).getName()));
          for (int i = localZipInputStream.read(arrayOfByte); i > 0; i = localZipInputStream.read(arrayOfByte)) {
            ((FileOutputStream)localObject).write(arrayOfByte, 0, i);
          }
          localZipInputStream.closeEntry();
          ((FileOutputStream)localObject).close();
        }
      }
      paramInputStream.close();
    }
    catch (Exception paramInputStream)
    {
      Log.e("Util", "unzip", paramInputStream);
      return;
    }
  }
  
  public static final void writeToFile(String paramString, File paramFile)
  {
    writeToFile(stringToBytes(paramString), paramFile);
  }
  
  public static final void writeToFile(byte[] paramArrayOfByte, File paramFile)
  {
    try
    {
      paramFile.getParentFile().mkdirs();
      paramFile = new FileOutputStream(paramFile);
      paramFile.write(paramArrayOfByte);
      paramFile.close();
      return;
    }
    catch (IOException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
    }
  }
  
  public static final String zeroPad(Number paramNumber, int paramInt)
  {
    String str = paramNumber.toString();
    int i = str.length();
    paramNumber = str;
    if (i < paramInt)
    {
      paramNumber = new StringBuffer();
      paramInt -= i;
      for (;;)
      {
        paramInt -= 1;
        if (paramInt < 0) {
          break;
        }
        paramNumber.append('0');
      }
      paramNumber = str;
    }
    return paramNumber;
  }
}
