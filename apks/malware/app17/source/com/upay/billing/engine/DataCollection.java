package com.upay.billing.engine;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.telephony.TelephonyManager;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class DataCollection
{
  public DataCollection() {}
  
  public static String getAppVersion(Context paramContext, String paramString)
  {
    Object localObject = null;
    paramContext = paramContext.getPackageManager();
    try
    {
      paramString = paramContext.getPackageInfo(paramString, 0);
      paramContext = localObject;
      if (paramString != null) {
        paramContext = paramString.versionName;
      }
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      return null;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String getBrand()
  {
    try
    {
      String str = Build.BRAND;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String getDevice()
  {
    try
    {
      String str = Build.DEVICE;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String getIccid(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSimSerialNumber();
      return paramContext;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String getIccid_GT(Context paramContext, int paramInt)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      Object localObject = Integer.TYPE;
      localObject = paramContext.getClass().getDeclaredMethod("getSimSerialNumber", new Class[] { localObject });
      ((Method)localObject).setAccessible(true);
      paramContext = (String)((Method)localObject).invoke(paramContext, new Object[] { Integer.valueOf(paramInt) });
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getIccid_MIUI(Context paramContext, int paramInt)
  {
    try
    {
      Class localClass = Class.forName("android.telephony.MSimTelephonyManager");
      paramContext = paramContext.getSystemService("phone_msim");
      paramContext = (String)localClass.getMethod("getSimSerialNumber", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(paramInt) });
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getIccid_MTK(Context paramContext, int paramInt)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      Object localObject = Integer.TYPE;
      localObject = paramContext.getClass().getDeclaredMethod("getSimSerialNumberGemini", new Class[] { localObject });
      ((Method)localObject).setAccessible(true);
      paramContext = (String)((Method)localObject).invoke(paramContext, new Object[] { Integer.valueOf(paramInt) });
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getImsi(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
      return paramContext;
    }
    catch (Throwable paramContext) {}
    return null;
  }
  
  public static String getImsi_GT(Context paramContext, int paramInt)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      Object localObject = Integer.TYPE;
      localObject = paramContext.getClass().getDeclaredMethod("getSubscriberId", new Class[] { localObject });
      ((Method)localObject).setAccessible(true);
      paramContext = (String)((Method)localObject).invoke(paramContext, new Object[] { Integer.valueOf(paramInt) });
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getImsi_MIUI(Context paramContext, int paramInt)
  {
    try
    {
      Class localClass = Class.forName("android.telephony.MSimTelephonyManager");
      paramContext = paramContext.getSystemService("phone_msim");
      paramContext = (String)localClass.getMethod("getSubscriberId", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(paramInt) });
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getImsi_MTK(Context paramContext, int paramInt)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      Object localObject = Integer.TYPE;
      localObject = paramContext.getClass().getDeclaredMethod("getSubscriberIdGemini", new Class[] { localObject });
      ((Method)localObject).setAccessible(true);
      paramContext = (String)((Method)localObject).invoke(paramContext, new Object[] { Integer.valueOf(paramInt) });
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getImsi_ZX(Context paramContext, int paramInt)
  {
    try
    {
      Class localClass = Class.forName("com.android.internal.telephony.PhoneFactory");
      paramContext = ((TelephonyManager)paramContext.getSystemService((String)localClass.getMethod("getServiceName", new Class[] { String.class, Integer.TYPE }).invoke(localClass, new Object[] { "phone", Integer.valueOf(paramInt) }))).getSubscriberId();
      return paramContext;
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getManufacturer()
  {
    try
    {
      String str = Build.MANUFACTURER;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String getModel()
  {
    try
    {
      String str = Build.MODEL;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  public static String getProduct()
  {
    try
    {
      String str = Build.PRODUCT;
      return str;
    }
    catch (Throwable localThrowable) {}
    return null;
  }
  
  @SuppressLint({"UseValueOf"})
  public static boolean isDoubleTelephone(Context paramContext)
  {
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    try
    {
      Method localMethod = TelephonyManager.class.getMethod("getSimStateGemini", new Class[] { Integer.TYPE });
      localMethod.invoke(paramContext, new Object[] { new Integer(0) });
      localMethod.invoke(paramContext, new Object[] { new Integer(1) });
      return true;
    }
    catch (NoSuchMethodException paramContext)
    {
      return false;
    }
    catch (SecurityException paramContext)
    {
      return false;
    }
    catch (IllegalArgumentException paramContext)
    {
      return false;
    }
    catch (InvocationTargetException paramContext)
    {
      return false;
    }
    catch (Exception paramContext)
    {
      return false;
    }
    catch (Throwable paramContext) {}
    return false;
  }
  
  public static boolean isInstallApp(Context paramContext, String paramString)
  {
    boolean bool = false;
    paramContext = paramContext.getPackageManager();
    try
    {
      paramContext = paramContext.getPackageInfo(paramString, 0);
      if (paramContext != null) {
        bool = true;
      }
      return bool;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      return false;
    }
    catch (Throwable paramContext) {}
    return false;
  }
  
  public static boolean isRoot()
  {
    try
    {
      if (!new File("/system/bin/su").exists())
      {
        boolean bool = new File("/system/xbin/su").exists();
        if (!bool) {
          return false;
        }
      }
      return true;
    }
    catch (Exception localException)
    {
      return false;
    }
    catch (Throwable localThrowable) {}
    return false;
  }
  
  /* Error */
  public static String shell(String paramString, int paramInt)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore 6
    //   6: aconst_null
    //   7: astore 4
    //   9: aload 5
    //   11: astore_2
    //   12: aload 6
    //   14: astore_3
    //   15: invokestatic 181	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   18: aload_0
    //   19: invokevirtual 185	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   22: pop
    //   23: aload 5
    //   25: astore_2
    //   26: aload 6
    //   28: astore_3
    //   29: new 187	java/io/BufferedReader
    //   32: dup
    //   33: new 189	java/io/InputStreamReader
    //   36: dup
    //   37: invokestatic 181	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   40: aload_0
    //   41: invokevirtual 185	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   44: invokevirtual 195	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   47: invokespecial 198	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   50: invokespecial 201	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   53: astore 5
    //   55: aload 4
    //   57: astore_0
    //   58: aload_0
    //   59: astore_2
    //   60: aload_0
    //   61: astore_3
    //   62: aload 5
    //   64: invokevirtual 204	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   67: astore 6
    //   69: aload_0
    //   70: astore 4
    //   72: aload 6
    //   74: ifnull +117 -> 191
    //   77: aload_0
    //   78: astore_2
    //   79: aload_0
    //   80: astore 4
    //   82: aload_0
    //   83: astore_3
    //   84: aload 6
    //   86: ldc -50
    //   88: invokevirtual 210	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   91: ifne +100 -> 191
    //   94: iload_1
    //   95: ifne +55 -> 150
    //   98: aload_0
    //   99: astore_2
    //   100: aload_0
    //   101: astore_3
    //   102: ldc -44
    //   104: invokestatic 218	java/util/regex/Pattern:compile	(Ljava/lang/String;)Ljava/util/regex/Pattern;
    //   107: aload 6
    //   109: invokevirtual 222	java/util/regex/Pattern:matcher	(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
    //   112: invokevirtual 227	java/util/regex/Matcher:find	()Z
    //   115: ifeq -57 -> 58
    //   118: aload_0
    //   119: astore_2
    //   120: aload_0
    //   121: astore_3
    //   122: new 229	java/lang/StringBuilder
    //   125: dup
    //   126: invokespecial 230	java/lang/StringBuilder:<init>	()V
    //   129: aload_0
    //   130: invokevirtual 234	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   133: aload 6
    //   135: invokevirtual 234	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   138: ldc -20
    //   140: invokevirtual 234	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   143: invokevirtual 239	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   146: astore_0
    //   147: goto -89 -> 58
    //   150: iload_1
    //   151: iconst_1
    //   152: if_icmpne -94 -> 58
    //   155: aload_0
    //   156: astore_2
    //   157: aload_0
    //   158: astore_3
    //   159: new 229	java/lang/StringBuilder
    //   162: dup
    //   163: invokespecial 230	java/lang/StringBuilder:<init>	()V
    //   166: aload_0
    //   167: invokevirtual 234	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   170: aload 6
    //   172: invokevirtual 234	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: ldc -20
    //   177: invokevirtual 234	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   180: invokevirtual 239	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   183: astore_0
    //   184: goto -126 -> 58
    //   187: astore_0
    //   188: aload_2
    //   189: astore 4
    //   191: aload 4
    //   193: ldc -50
    //   195: ldc -15
    //   197: invokevirtual 245	java/lang/String:replace	(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   200: areturn
    //   201: astore_0
    //   202: aload_3
    //   203: astore 4
    //   205: goto -14 -> 191
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	208	0	paramString	String
    //   0	208	1	paramInt	int
    //   11	178	2	localObject1	Object
    //   14	189	3	str1	String
    //   7	197	4	localObject2	Object
    //   1	62	5	localBufferedReader	java.io.BufferedReader
    //   4	167	6	str2	String
    // Exception table:
    //   from	to	target	type
    //   15	23	187	java/io/IOException
    //   29	55	187	java/io/IOException
    //   62	69	187	java/io/IOException
    //   84	94	187	java/io/IOException
    //   102	118	187	java/io/IOException
    //   122	147	187	java/io/IOException
    //   159	184	187	java/io/IOException
    //   15	23	201	java/lang/Throwable
    //   29	55	201	java/lang/Throwable
    //   62	69	201	java/lang/Throwable
    //   84	94	201	java/lang/Throwable
    //   102	118	201	java/lang/Throwable
    //   122	147	201	java/lang/Throwable
    //   159	184	201	java/lang/Throwable
  }
}
