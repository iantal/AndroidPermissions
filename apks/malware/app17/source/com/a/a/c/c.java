package com.a.a.c;

import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public final class c
{
  public static void a(Closeable paramCloseable)
  {
    try
    {
      paramCloseable.close();
      return;
    }
    catch (Exception paramCloseable) {}
  }
  
  public static void a(InputStream paramInputStream)
  {
    byte[] arrayOfByte = new byte[32768];
    try
    {
      int i;
      do
      {
        i = paramInputStream.read(arrayOfByte, 0, 32768);
      } while (i != -1);
      a(paramInputStream);
      return;
    }
    catch (IOException localIOException)
    {
      localIOException = localIOException;
      a(paramInputStream);
      return;
    }
    finally
    {
      localObject = finally;
      a(paramInputStream);
      throw localObject;
    }
  }
  
  private static boolean a(d paramD, int paramInt1, int paramInt2)
  {
    return (paramD != null) && (!paramD.a(paramInt1, paramInt2)) && (paramInt1 * 100 / paramInt2 < 75);
  }
  
  public static boolean a(InputStream paramInputStream, OutputStream paramOutputStream, d paramD, int paramInt)
  {
    int k = paramInputStream.available();
    byte[] arrayOfByte = new byte[paramInt];
    if (a(paramD, 0, k)) {
      return false;
    }
    int i = 0;
    int j;
    do
    {
      j = paramInputStream.read(arrayOfByte, 0, paramInt);
      if (j == -1) {
        break;
      }
      paramOutputStream.write(arrayOfByte, 0, j);
      j = i + j;
      i = j;
    } while (!a(paramD, j, k));
    return false;
    return true;
  }
}
