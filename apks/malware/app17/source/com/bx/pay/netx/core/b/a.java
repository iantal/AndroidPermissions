package com.bx.pay.netx.core.b;

import android.text.TextUtils;
import com.bx.pay.netx.core.ab;
import com.bx.pay.netx.core.ad;
import com.bx.pay.netx.core.af;
import com.bx.pay.netx.core.d;
import com.bx.pay.netx.core.e;
import com.bx.pay.netx.core.p;
import com.bx.pay.netx.core.u;
import com.bx.pay.netx.core.v;
import com.bx.pay.netx.core.w;
import java.io.File;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.util.zip.GZIPInputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;

public final class a
  extends ab
{
  private File a;
  private File b;
  
  public a(String paramString1, String paramString2)
  {
    super(paramString2);
    this.a = new File(paramString1);
    this.b = new File(paramString1 + ".tmp");
    a(new d(2500, 200));
  }
  
  protected final af a(u paramU)
  {
    if (!i())
    {
      if ((this.b.canRead()) && (this.b.length() > 0L))
      {
        if (this.b.renameTo(this.a)) {
          return af.a(null, paramU);
        }
        return af.a(new v("Can't rename the download temporary file!"));
      }
      return af.a(new v("Download temporary file was invalid!"));
    }
    return af.a(new v("Request was Canceled!"));
  }
  
  public final byte[] a(HttpResponse paramHttpResponse, e paramE)
  {
    HttpEntity localHttpEntity = paramHttpResponse.getEntity();
    long l3 = localHttpEntity.getContentLength();
    if (l3 <= 0L) {
      w.b("Response doesn't present Content-Length!", new Object[0]);
    }
    long l1 = this.b.length();
    int i;
    if (TextUtils.equals(p.a(paramHttpResponse, "Accept-Ranges"), "bytes")) {
      i = 1;
    }
    long l2;
    Object localObject1;
    for (;;)
    {
      l2 = l3;
      if (i == 0) {
        break;
      }
      l3 += l1;
      localObject1 = p.a(paramHttpResponse, "Content-Range");
      l2 = l3;
      if (TextUtils.isEmpty((CharSequence)localObject1)) {
        break;
      }
      localObject2 = "bytes " + l1 + "-" + (l3 - 1L);
      l2 = l3;
      if (TextUtils.indexOf((CharSequence)localObject1, (CharSequence)localObject2) != -1) {
        break;
      }
      throw new IllegalStateException("The Content-Range Header is invalid Assume[" + (String)localObject2 + "] vs Real[" + (String)localObject1 + "], please remove the temporary file [" + this.b + "].");
      localObject1 = p.a(paramHttpResponse, "Content-Range");
      if ((localObject1 != null) && (((String)localObject1).startsWith("bytes"))) {
        i = 1;
      } else {
        i = 0;
      }
    }
    if ((l2 > 0L) && (this.a.length() == l2))
    {
      this.a.renameTo(this.b);
      paramE.a(this, l2, l2);
      return null;
    }
    Object localObject2 = new RandomAccessFile(this.b, "rw");
    if (i != 0) {
      ((RandomAccessFile)localObject2).seek(l1);
    }
    try
    {
      localObject1 = localHttpEntity.getContent();
      if ((p.b(paramHttpResponse)) && (!(localObject1 instanceof GZIPInputStream)))
      {
        paramHttpResponse = new GZIPInputStream((InputStream)localObject1);
        localObject1 = new byte['á €'];
        i = paramHttpResponse.read((byte[])localObject1);
        if (i == -1) {
          if (localHttpEntity == null) {}
        }
      }
    }
    finally
    {
      for (;;)
      {
        try
        {
          localHttpEntity.consumeContent();
          ((RandomAccessFile)localObject2).close();
          return null;
          ((RandomAccessFile)localObject2).setLength(0L);
          l1 = 0L;
          continue;
          ((RandomAccessFile)localObject2).write((byte[])localObject1, 0, i);
          l1 += i;
          paramE.a(this, l2, l1);
          if (!i()) {
            continue;
          }
          paramE.b(this);
          continue;
          paramHttpResponse = finally;
          if (localHttpEntity != null) {}
          try
          {
            localHttpEntity.consumeContent();
            ((RandomAccessFile)localObject2).close();
            throw paramHttpResponse;
          }
          catch (Exception paramE)
          {
            w.a("Error occured when calling consumingContent", new Object[0]);
            continue;
          }
        }
        catch (Exception paramHttpResponse)
        {
          w.a("Error occured when calling consumingContent", new Object[0]);
          continue;
        }
        paramHttpResponse = (HttpResponse)localObject1;
      }
    }
  }
  
  public final void l()
  {
    a("Range", "bytes=" + this.b.length() + "-");
  }
  
  public final ad o()
  {
    return ad.a;
  }
}
