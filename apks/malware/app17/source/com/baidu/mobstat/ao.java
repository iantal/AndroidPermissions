package com.baidu.mobstat;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.location.Location;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.util.List;
import java.util.zip.GZIPOutputStream;

final class ao
{
  public static int a(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    try
    {
      paramContext = j(paramContext);
      return paramContext.widthPixels;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        au.a().a("createAdReqURL", paramContext);
        paramContext = localDisplayMetrics;
      }
    }
  }
  
  public static String a()
  {
    String str2 = "";
    String str1 = str2;
    try
    {
      BluetoothAdapter localBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
      str1 = str2;
      if (localBluetoothAdapter != null)
      {
        str1 = str2;
        str2 = localBluetoothAdapter.getAddress();
        str1 = str2;
        if (str2 != null)
        {
          str1 = str2;
          str2 = b.a(ap.a("30212102dicudiab", "30212102dicudiab", str2.getBytes()), "utf-8");
          str1 = str2;
        }
      }
      return str1;
    }
    catch (Exception localException)
    {
      au.a().a("statsdk", localException);
    }
    return str1;
  }
  
  public static String a(Context paramContext, String paramString)
  {
    String str = "";
    Object localObject = paramContext.getPackageManager();
    label122:
    do
    {
      do
      {
        try
        {
          localObject = ((PackageManager)localObject).getApplicationInfo(paramContext.getPackageName(), 128);
          paramContext = str;
          if (localObject != null)
          {
            Bundle localBundle = ((ApplicationInfo)localObject).metaData;
            paramContext = null;
            if (localBundle != null) {
              paramContext = ((ApplicationInfo)localObject).metaData.get(paramString);
            }
            if (paramContext != null) {
              break label122;
            }
            au.a().a("StatSDK", "null,can't find information for key:" + paramString);
            paramContext = str;
            if (paramString == "BaiduMobAd_STAT_ID")
            {
              au.a().b("不能在manifest.xml中找到APP Key||can't find app key in manifest.xml.");
              paramContext = str;
            }
          }
        }
        catch (PackageManager.NameNotFoundException paramContext)
        {
          do
          {
            paramContext = str;
          } while (paramString != "BaiduMobAd_STAT_ID");
          au.a().b("不能在manifest.xml中找到APP Key||can't find app key in manifest.xml.");
          return "";
        }
        return paramContext;
        str = paramContext.toString();
        paramContext = str;
      } while (!str.trim().equals(""));
      paramContext = str;
    } while (paramString != "BaiduMobAd_STAT_ID");
    au.a().b("APP Key值为空||The value of APP Key is empty.");
    return str;
  }
  
  public static String a(Context paramContext, String paramString1, String paramString2, int paramInt1, int paramInt2)
  {
    Object localObject = null;
    HttpURLConnection localHttpURLConnection = ar.a(paramContext, paramString1, paramInt1, paramInt2);
    localHttpURLConnection.setDoOutput(true);
    localHttpURLConnection.setInstanceFollowRedirects(false);
    localHttpURLConnection.setUseCaches(false);
    localHttpURLConnection.setRequestProperty("Content-Type", "gzip");
    localHttpURLConnection.connect();
    au.a().a(new Object[] { "AdUtil.httpPost connected" });
    paramString1 = new StringBuilder();
    for (;;)
    {
      try
      {
        paramContext = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(localHttpURLConnection.getOutputStream())));
      }
      catch (IOException paramString1)
      {
        paramContext = null;
        paramString2 = localObject;
        continue;
      }
      try
      {
        paramContext.write(paramString2);
        paramContext.close();
        paramContext = new BufferedReader(new InputStreamReader(localHttpURLConnection.getInputStream()));
        try
        {
          paramString2 = paramContext.readLine();
          if (paramString2 == null) {
            continue;
          }
          paramString1.append(paramString2);
          continue;
          if (paramContext == null) {
            continue;
          }
        }
        catch (IOException paramString1)
        {
          paramString2 = localObject;
        }
      }
      catch (IOException paramString1)
      {
        paramString2 = paramContext;
        paramContext = null;
      }
    }
    paramContext.close();
    if (paramString2 != null) {
      paramString2.close();
    }
    localHttpURLConnection.disconnect();
    throw paramString1;
    paramContext.close();
    localHttpURLConnection.disconnect();
    paramInt1 = localHttpURLConnection.getContentLength();
    if ((localHttpURLConnection.getResponseCode() != 200) || (paramInt1 != 0)) {
      throw new IOException("http code =" + localHttpURLConnection.getResponseCode() + "& contentResponse=" + paramString1);
    }
    return paramString1.toString();
  }
  
  public static int b(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    try
    {
      paramContext = j(paramContext);
      return paramContext.heightPixels;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        au.a().a("createAdReqURL", paramContext);
        paramContext = localDisplayMetrics;
      }
    }
  }
  
  public static int c(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getPackageName();
    try
    {
      int i = localPackageManager.getPackageInfo(paramContext, 0).versionCode;
      return i;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      au.a().c(new Object[] { "statsdk", "get app version code exception" });
    }
    return 1;
  }
  
  public static String d(Context paramContext)
  {
    PackageManager localPackageManager = paramContext.getPackageManager();
    paramContext = paramContext.getPackageName();
    try
    {
      paramContext = localPackageManager.getPackageInfo(paramContext, 0).versionName;
      return paramContext;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      au.a().c(new Object[] { "statsdk", "get app version name exception" });
    }
    return "";
  }
  
  public static String e(Context paramContext)
  {
    String str = String.format("%s_%s_%s", new Object[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) });
    try
    {
      if ((ar.e(paramContext, "android.permission.ACCESS_FINE_LOCATION")) || (ar.e(paramContext, "android.permission.ACCESS_COARSE_LOCATION")))
      {
        paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getCellLocation();
        au.a().a("getLocation cell:", paramContext + "");
        if (paramContext == null) {
          return str;
        }
        if ((paramContext instanceof GsmCellLocation))
        {
          paramContext = (GsmCellLocation)paramContext;
          return String.format("%s_%s_%s", new Object[] { String.format("%d", new Object[] { Integer.valueOf(paramContext.getCid()) }), String.format("%d", new Object[] { Integer.valueOf(paramContext.getLac()) }), Integer.valueOf(0) });
        }
        paramContext = paramContext.toString().replace("[", "").replace("]", "").split(",");
        paramContext = String.format("%s_%s_%s", new Object[] { paramContext[0], paramContext[3], paramContext[4] });
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      au.a().a("getLocation", paramContext);
    }
    return str;
  }
  
  public static String f(Context paramContext)
  {
    try
    {
      if (ar.e(paramContext, "android.permission.ACCESS_FINE_LOCATION"))
      {
        paramContext = ((LocationManager)paramContext.getSystemService("location")).getLastKnownLocation("gps");
        au.a().a("statsdk", "location: " + paramContext);
        if (paramContext != null)
        {
          paramContext = String.format("%s_%s_%s", new Object[] { Long.valueOf(paramContext.getTime()), Double.valueOf(paramContext.getLongitude()), Double.valueOf(paramContext.getLatitude()) });
          return paramContext;
        }
      }
    }
    catch (Exception paramContext)
    {
      au.a().a("statsdk", paramContext);
    }
    return "";
  }
  
  public static String g(Context paramContext)
  {
    Object localObject = null;
    try
    {
      if (ar.e(paramContext, "android.permission.ACCESS_WIFI_STATE"))
      {
        localWifiInfo = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo();
        paramContext = localWifiInfo.getMacAddress();
      }
    }
    catch (Exception localException2)
    {
      WifiInfo localWifiInfo;
      paramContext = localObject;
      localObject = localException2;
    }
    try
    {
      au.a().a(new Object[] { String.format("ssid=%s mac=%s", new Object[] { localWifiInfo.getSSID(), localWifiInfo.getMacAddress() }) });
      return paramContext;
    }
    catch (Exception localException1)
    {
      for (;;) {}
    }
    au.a().b("You need the android.Manifest.permission.ACCESS_WIFI_STATE permission. Open AndroidManifest.xml and just before the final </manifest> tag add:android.permission.ACCESS_WIFI_STATE");
    return null;
    au.a().a("statsdk", localObject);
    return paramContext;
  }
  
  public static String h(Context paramContext)
  {
    int i = 0;
    for (;;)
    {
      try
      {
        if (!ar.e(paramContext, "android.permission.ACCESS_WIFI_STATE")) {
          break label334;
        }
        Object localObject = (WifiManager)paramContext.getSystemService("wifi");
        if (!((WifiManager)localObject).isWifiEnabled()) {
          break label334;
        }
        au.a().a("[d]", ((WifiManager)localObject).getScanResults() + "");
        k = Integer.MAX_VALUE;
        j = -1;
        if (i < ((WifiManager)localObject).getScanResults().size())
        {
          paramContext = (ScanResult)((WifiManager)localObject).getScanResults().get(i);
          m = Math.abs(paramContext.level);
          au.a().a(new Object[] { String.format("%s %s_%s", new Object[] { paramContext.SSID, paramContext.BSSID, Integer.valueOf(m) }) });
          if (k <= m) {
            break label323;
          }
          j = m;
          k = i;
          break label337;
        }
        if (j >= 0)
        {
          paramContext = (ScanResult)((WifiManager)localObject).getScanResults().get(j);
          paramContext = String.format("%s_%s", new Object[] { paramContext.BSSID.replace(":", "").toLowerCase(), Integer.valueOf(Math.abs(paramContext.level)) });
        }
        paramContext = "";
      }
      catch (Exception localException1)
      {
        try
        {
          localObject = ((WifiManager)localObject).getConnectionInfo();
          au.a().a(new Object[] { String.format("[active]%s %s_%s", new Object[] { ((WifiInfo)localObject).getSSID(), ((WifiInfo)localObject).getMacAddress(), Integer.valueOf(Math.abs(((WifiInfo)localObject).getRssi())) }) });
          return paramContext;
        }
        catch (Exception localException2)
        {
          continue;
        }
        localException1 = localException1;
        paramContext = "";
        au.a().a("getWifiLocation", localException1);
        return paramContext;
      }
      continue;
      label323:
      int m = j;
      int j = k;
      int k = m;
      break label337;
      label334:
      return "";
      label337:
      i += 1;
      m = k;
      k = j;
      j = m;
    }
  }
  
  public static String i(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    String str = localNetworkInfo.getTypeName();
    paramContext = str;
    if (!str.equals("WIFI"))
    {
      paramContext = str;
      if (localNetworkInfo.getSubtypeName() != null) {
        paramContext = localNetworkInfo.getSubtypeName();
      }
    }
    return paramContext;
  }
  
  public static DisplayMetrics j(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getApplicationContext().getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics;
  }
}
