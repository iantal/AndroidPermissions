package com.baidu.mobads;

import android.os.Bundle;
import android.os.Handler.Callback;
import android.os.Message;
import com.baidu.mobads.a.d;
import org.json.JSONObject;

class a
  implements Handler.Callback
{
  private final AdViewListener a;
  private final AdView b;
  
  public a(AdViewListener paramAdViewListener, AdView paramAdView)
  {
    this.a = paramAdViewListener;
    this.b = paramAdView;
  }
  
  public boolean handleMessage(Message paramMessage)
  {
    try
    {
      localObject = paramMessage.getData();
      paramMessage = ((Bundle)localObject).getString("method");
      d.a(new Object[] { "AdView.setListener handleMessage", localObject });
      if ("onAdReady".equals(paramMessage))
      {
        this.a.onAdReady(this.b);
        return false;
      }
      if (!"onAdShow".equals(paramMessage)) {
        break label115;
      }
      paramMessage = new JSONObject();
    }
    catch (Exception paramMessage)
    {
      Object localObject;
      label86:
      d.b(paramMessage);
      return false;
    }
    try
    {
      localObject = new JSONObject(((Bundle)localObject).getString("p_jsonInfo"));
      paramMessage = (Message)localObject;
    }
    catch (Exception localException1)
    {
      d.b(localException1);
      break label86;
    }
    this.a.onAdShow(paramMessage);
    return false;
    label115:
    if ("onAdClick".equals(paramMessage))
    {
      paramMessage = new JSONObject();
      try
      {
        JSONObject localJSONObject = new JSONObject(localException1.getString("p_jsonInfo"));
        paramMessage = localJSONObject;
      }
      catch (Exception localException2)
      {
        for (;;)
        {
          d.b(localException2);
        }
      }
      this.a.onAdClick(paramMessage);
      return false;
    }
    if ("onAdFailed".equals(paramMessage))
    {
      paramMessage = localException2.getString("p_reason");
      this.a.onAdFailed(paramMessage);
      return false;
    }
    if ("onAdSwitch".equals(paramMessage))
    {
      this.a.onAdSwitch();
      return false;
    }
    if ("onVideoStart".equals(paramMessage))
    {
      this.a.onVideoStart();
      return false;
    }
    if ("onVideoFinish".equals(paramMessage))
    {
      this.a.onVideoFinish();
      return false;
    }
    if ("onVideoError".equals(paramMessage))
    {
      this.a.onVideoError();
      return false;
    }
    if ("onVideoClickClose".equals(paramMessage))
    {
      this.a.onVideoClickClose();
      return false;
    }
    if ("onVideoClickAd".equals(paramMessage))
    {
      this.a.onVideoClickAd();
      return false;
    }
    if ("onVideoClickReplay".equals(paramMessage)) {
      this.a.onVideoClickReplay();
    }
    return false;
  }
}
