package com.snowfish.cn.ganga.offline.b;

import com.snowfish.cn.ganga.offline.basic.IPR;

public final class b
  implements IPR
{
  private byte[] a;
  private int b;
  private int c;
  private int d;
  private boolean e;
  
  public b(IPR paramIPR, int paramInt)
  {
    paramIPR = (b)paramIPR;
    this.a = paramIPR.a;
    this.b = paramIPR.b;
    this.c = paramIPR.c;
    this.d = (paramIPR.c + paramInt);
    this.e = paramIPR.e;
  }
  
  public b(byte[] paramArrayOfByte)
  {
    this(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public b(byte[] paramArrayOfByte, int paramInt)
  {
    this(paramArrayOfByte, 0, paramInt);
  }
  
  public b(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    this.a = paramArrayOfByte;
    this.b = paramInt1;
    this.c = paramInt1;
    this.d = (paramInt2 + paramInt1);
    this.e = false;
  }
  
  public final byte[] byteArray()
  {
    return this.a;
  }
  
  public final int getPos()
  {
    return this.c;
  }
  
  public final boolean isBad()
  {
    return this.e;
  }
  
  public final void read(byte[] paramArrayOfByte, int paramInt)
  {
    read(paramArrayOfByte, 0, paramInt);
  }
  
  public final void read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (this.e) {
      return;
    }
    if (this.c + paramInt2 > this.d)
    {
      setBad(true);
      return;
    }
    System.arraycopy(this.a, this.c, paramArrayOfByte, paramInt1, paramInt2);
    this.c += paramInt2;
  }
  
  public final boolean readBoolean()
  {
    return readI8() != 0;
  }
  
  public final int readI16()
  {
    if (this.c + 2 > this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 2;
    return this.a[(this.c - 2)] << 8 | this.a[(this.c - 1)] & 0xFF;
  }
  
  public final int readI16LE()
  {
    if (this.c + 2 > this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 2;
    return this.a[(this.c - 1)] << 8 | this.a[(this.c - 2)] & 0xFF;
  }
  
  public final int readI32()
  {
    if (this.c + 4 > this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 4;
    return this.a[(this.c - 4)] << 24 | (this.a[(this.c - 3)] & 0xFF) << 16 | (this.a[(this.c - 2)] & 0xFF) << 8 | this.a[(this.c - 1)] & 0xFF;
  }
  
  public final int readI32LE()
  {
    if (this.c + 4 > this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 4;
    return this.a[(this.c - 1)] << 24 | (this.a[(this.c - 2)] & 0xFF) << 16 | (this.a[(this.c - 3)] & 0xFF) << 8 | this.a[(this.c - 4)] & 0xFF;
  }
  
  public final long readI64()
  {
    int i = readI32();
    int j = readI32();
    long l = i;
    return j & 0xFFFFFFFF | l << 32;
  }
  
  public final long readI64LE()
  {
    return readU64LE();
  }
  
  public final int readI8()
  {
    if (this.c >= this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 1;
    return this.a[(this.c - 1)];
  }
  
  public final int readU16()
  {
    if (this.c + 2 > this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 2;
    return (this.a[(this.c - 2)] & 0xFF) << 8 | this.a[(this.c - 1)] & 0xFF;
  }
  
  public final int readU16LE()
  {
    if (this.c + 2 > this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 2;
    return (this.a[(this.c - 1)] & 0xFF) << 8 | this.a[(this.c - 2)] & 0xFF;
  }
  
  public final long readU32()
  {
    if (this.c + 4 > this.d)
    {
      setBad(true);
      return 0L;
    }
    this.c += 4;
    return (0xFF & this.a[(this.c - 4)]) << 24 | (this.a[(this.c - 3)] & 0xFF) << 16 | (this.a[(this.c - 2)] & 0xFF) << 8 | this.a[(this.c - 1)] & 0xFF;
  }
  
  public final long readU32LE()
  {
    if (this.c + 4 > this.d)
    {
      setBad(true);
      return 0L;
    }
    this.c += 4;
    return (this.a[(this.c - 1)] & 0xFF) << 24 | (this.a[(this.c - 2)] & 0xFF) << 16 | (this.a[(this.c - 3)] & 0xFF) << 8 | this.a[(this.c - 4)] & 0xFF;
  }
  
  public final long readU64()
  {
    int i = readI32();
    int j = readI32();
    long l = i;
    return j & 0xFFFFFFFF | l << 32;
  }
  
  public final long readU64LE()
  {
    return readU32LE() | readU32LE() << 32;
  }
  
  public final int readU8()
  {
    if (this.c >= this.d)
    {
      setBad(true);
      return 0;
    }
    this.c += 1;
    return this.a[(this.c - 1)] & 0xFF;
  }
  
  public final String readUTF16AsString(int paramInt1, int paramInt2)
  {
    if (paramInt2 <= 0) {
      return "";
    }
    if (paramInt1 == 0)
    {
      skip(paramInt2 * 2);
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer();
    if (this.c + paramInt2 * 2 > this.d)
    {
      setBad(true);
      return "";
    }
    if ((paramInt1 > 0) && (paramInt1 <= paramInt2)) {}
    for (;;)
    {
      int i = 0;
      for (;;)
      {
        if (i >= paramInt1)
        {
          if (paramInt2 > paramInt1) {
            skip((paramInt2 - paramInt1) * 2);
          }
          return localStringBuffer.toString();
        }
        localStringBuffer.append((char)readU16());
        i += 1;
      }
      paramInt1 = paramInt2;
    }
  }
  
  public final String readUTF16AsStringWithByteLength(int paramInt1, int paramInt2)
  {
    switch (paramInt2)
    {
    case 3: 
    default: 
      setBad(true);
      return "";
    case 1: 
      paramInt2 = readU8();
    }
    for (;;)
    {
      return readUTF16AsString(paramInt1, paramInt2 >> 1);
      paramInt2 = readU16();
      continue;
      paramInt2 = readI32();
    }
  }
  
  public final String readUTF16AsStringWithLength(int paramInt)
  {
    return readUTF16AsStringWithLength(-1, paramInt);
  }
  
  public final String readUTF16AsStringWithLength(int paramInt1, int paramInt2)
  {
    switch (paramInt2)
    {
    case 3: 
    default: 
      setBad(true);
      return "";
    case 1: 
      paramInt2 = readU8();
    }
    for (;;)
    {
      return readUTF16AsString(paramInt1, paramInt2);
      paramInt2 = readU16();
      continue;
      paramInt2 = readI32();
    }
  }
  
  public final String readUTF8AsString(int paramInt1, int paramInt2)
  {
    if (paramInt2 <= 0) {
      return "";
    }
    if (paramInt1 == 0)
    {
      skip(paramInt2);
      return "";
    }
    if (this.c + paramInt2 > this.d)
    {
      setBad(true);
      return "";
    }
    if ((paramInt1 > 0) && (paramInt1 <= paramInt2)) {}
    for (;;)
    {
      try
      {
        String str1 = new String(this.a, this.c, paramInt1);
        this.c += paramInt2;
        return str1;
      }
      catch (Exception localException)
      {
        setBad(true);
        String str2 = "";
        continue;
      }
      paramInt1 = paramInt2;
    }
  }
  
  public final String readUTF8AsStringWithLength(int paramInt)
  {
    return readUTF8AsStringWithLength(-1, paramInt);
  }
  
  public final String readUTF8AsStringWithLength(int paramInt1, int paramInt2)
  {
    switch (paramInt2)
    {
    case 3: 
    default: 
      setBad(true);
      return "";
    case 1: 
      paramInt2 = readU8();
    }
    for (;;)
    {
      return readUTF8AsString(paramInt1, paramInt2);
      paramInt2 = readU16();
      continue;
      paramInt2 = readI32();
    }
  }
  
  public final int remain()
  {
    return this.d - this.c;
  }
  
  public final void seek(int paramInt1, int paramInt2)
  {
    switch (paramInt2)
    {
    default: 
      setBad(true);
    }
    do
    {
      do
      {
        do
        {
          return;
          this.c = (this.b + paramInt1);
        } while (this.c <= this.d);
        setBad(true);
        return;
        this.c += paramInt1;
      } while (this.c <= this.d);
      setBad(true);
      return;
      this.c = (this.d - paramInt1);
    } while (this.c >= this.b);
    setBad(true);
  }
  
  public final void setBad(boolean paramBoolean)
  {
    this.e = paramBoolean;
  }
  
  public final void skip(int paramInt)
  {
    if ((this.c + paramInt > this.d) || (this.c + paramInt < 0))
    {
      setBad(true);
      return;
    }
    this.c += paramInt;
  }
  
  public final void skipWithByteLength(int paramInt)
  {
    switch (paramInt)
    {
    case 3: 
    default: 
      setBad(true);
      return;
    case 1: 
      paramInt = readU8();
    }
    for (;;)
    {
      skip(paramInt);
      return;
      paramInt = readU16();
      continue;
      paramInt = readI32();
    }
  }
  
  public final void skipWithUTF16Length(int paramInt)
  {
    switch (paramInt)
    {
    case 3: 
    default: 
      setBad(true);
      return;
    case 1: 
      paramInt = readU8();
    }
    for (;;)
    {
      skip(paramInt * 2);
      return;
      paramInt = readU16();
      continue;
      paramInt = readI32();
    }
  }
}
