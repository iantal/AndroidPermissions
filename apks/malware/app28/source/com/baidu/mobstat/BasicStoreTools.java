package com.baidu.mobstat;

import android.content.Context;

public class BasicStoreTools
  extends BasicStoreToolsBase
{
  public static final String APP_ANALYSIS_EXCEPTION = "exceptionanalysisflag";
  public static final String APP_ANALYSIS_EXCEPTION_TAG = "exceptionanalysistag";
  public static final String APP_MAC_ADDRESS = "mtjsdkmacss";
  public static final String APP_SET_APPKEY = "mjsetappkey";
  public static final String APP_SET_CHANNEL = "setchannelwithcodevalue";
  public static final String APP_SET_CHANNEL_WITH_CODE = "setchannelwithcode";
  public static final String DEVICE_CUID = "cuidsec";
  public static final String DEVICE_ID = "device_id";
  public static final String LAST_SEND_TIME = "lastsendtime";
  public static final String ONLY_WIFI = "onlywifi";
  public static final String SEND_LOG_TYPE = "sendLogtype";
  public static final String TIME_INTERVAL = "timeinterval";
  static BasicStoreTools a = new BasicStoreTools();
  
  private BasicStoreTools() {}
  
  public static BasicStoreTools getInstance()
  {
    return a;
  }
  
  protected boolean getAppChannelWithCode(Context paramContext)
  {
    return getBoolean(paramContext, "setchannelwithcode", false);
  }
  
  protected String getAppChannelWithPreference(Context paramContext)
  {
    return getString(paramContext, "setchannelwithcodevalue", null);
  }
  
  protected String getAppDeviceMac(Context paramContext)
  {
    return getString(paramContext, "mtjsdkmacss", null);
  }
  
  protected String getAppKey(Context paramContext)
  {
    return getString(paramContext, "mjsetappkey", null);
  }
  
  protected String getExceptionHeadTag(Context paramContext)
  {
    return getString(paramContext, "exceptionanalysistag", null);
  }
  
  protected boolean getExceptionTurn(Context paramContext)
  {
    return getBoolean(paramContext, "exceptionanalysisflag", false);
  }
  
  protected String getGenerateDeviceCUID(Context paramContext)
  {
    return getString(paramContext, "cuidsec", null);
  }
  
  protected String getGenerateDeviceId(Context paramContext)
  {
    return getString(paramContext, "device_id", null);
  }
  
  protected long getLastSendTime(Context paramContext)
  {
    return getLong(paramContext, "lastsendtime", 0L);
  }
  
  protected boolean getOnlyWifiChannel(Context paramContext)
  {
    return getBoolean(paramContext, "onlywifi", false);
  }
  
  protected int getSendStrategy(Context paramContext)
  {
    return getInt(paramContext, "sendLogtype", 0);
  }
  
  protected int getSendStrategyTime(Context paramContext)
  {
    return getInt(paramContext, "timeinterval", 1);
  }
  
  protected void setAppChannelWithCode(Context paramContext, boolean paramBoolean)
  {
    putBoolean(paramContext, "setchannelwithcode", paramBoolean);
  }
  
  protected void setAppChannelWithPreference(Context paramContext, String paramString)
  {
    putString(paramContext, "setchannelwithcodevalue", paramString);
  }
  
  protected void setAppDeviceMac(Context paramContext, String paramString)
  {
    putString(paramContext, "mtjsdkmacss", paramString);
  }
  
  protected void setAppKey(Context paramContext, String paramString)
  {
    putString(paramContext, "mjsetappkey", paramString);
  }
  
  protected void setExceptionHeadTag(Context paramContext, String paramString)
  {
    putString(paramContext, "exceptionanalysistag", paramString);
  }
  
  protected void setExceptionTurn(Context paramContext, boolean paramBoolean)
  {
    putBoolean(paramContext, "exceptionanalysisflag", paramBoolean);
  }
  
  protected void setGenerateDeviceCUID(Context paramContext, String paramString)
  {
    if (getString(paramContext, "cuid", null) != null) {
      removeString(paramContext, "cuid");
    }
    putString(paramContext, "cuidsec", paramString);
  }
  
  protected void setGenerateDeviceId(Context paramContext, String paramString)
  {
    putString(paramContext, "device_id", paramString);
  }
  
  protected void setLastSendTime(Context paramContext, long paramLong)
  {
    putLong(paramContext, "lastsendtime", paramLong);
  }
  
  protected void setOnlyWifi(Context paramContext, boolean paramBoolean)
  {
    putBoolean(paramContext, "onlywifi", paramBoolean);
  }
  
  protected void setSendStrategy(Context paramContext, int paramInt)
  {
    putInt(paramContext, "sendLogtype", paramInt);
  }
  
  protected void setSendStrategyTime(Context paramContext, int paramInt)
  {
    putInt(paramContext, "timeinterval", paramInt);
  }
}
