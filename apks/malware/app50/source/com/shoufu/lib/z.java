package com.shoufu.lib;

import android.util.Log;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Locale;
import org.json.JSONArray;
import org.json.JSONObject;

public class z
{
  private static String a = "JsonParser";
  
  public static Object a(Object paramObject, JSONObject paramJSONObject)
  {
    Field[] arrayOfField = Class.forName(paramObject.getClass().getName()).getDeclaredFields();
    int k = arrayOfField.length;
    int i = 0;
    if (i >= k) {
      return paramObject;
    }
    Field localField = arrayOfField[i];
    localField.setAccessible(true);
    Object localObject = localField.getType();
    if (((Class)localObject).isPrimitive()) {
      a(paramObject, localField, paramJSONObject.opt(localField.getName()));
    }
    for (;;)
    {
      i += 1;
      break;
      localObject = ((Class)localObject).newInstance();
      if ((localObject instanceof List))
      {
        Class localClass = (Class)((java.lang.reflect.ParameterizedType)localField.getGenericType()).getActualTypeArguments()[0];
        JSONArray localJSONArray = paramJSONObject.getJSONArray(localField.getName());
        int j = 0;
        for (;;)
        {
          if (j >= localJSONArray.length())
          {
            a(paramObject, localField, localObject);
            break;
          }
          ((List)localObject).add(a(localClass.newInstance(), paramJSONObject.getJSONArray(localField.getName()).getJSONObject(j)));
          j += 1;
        }
      }
      if ((localObject instanceof String)) {
        a(paramObject, localField, paramJSONObject.opt(localField.getName()));
      } else {
        a(paramObject, localField, a(localObject, paramJSONObject.getJSONObject(localField.getName())));
      }
    }
  }
  
  private static void a(Object paramObject1, Field paramField, Object paramObject2)
  {
    Class localClass = Class.forName(paramObject1.getClass().getName());
    try
    {
      localClass.getDeclaredMethod("set" + paramField.getName().substring(0, 1).toUpperCase(Locale.getDefault()) + paramField.getName().substring(1), new Class[] { paramField.getType() }).invoke(paramObject1, new Object[] { paramObject2 });
      return;
    }
    catch (NoSuchMethodException paramObject1)
    {
      Log.d(a, "method [set" + paramField.getName().substring(0, 1).toUpperCase(Locale.getDefault()) + paramField.getName().substring(1) + "] not found");
      return;
    }
    catch (IllegalArgumentException paramObject1)
    {
      Log.d(a, "method [set" + paramField.getName().substring(0, 1).toUpperCase(Locale.getDefault()) + paramField.getName().substring(1) + "] illegal argument:" + paramObject1.getMessage());
    }
  }
}
