package com.shoufu.lib;

import android.os.Handler;
import android.os.Message;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.URL;

public class ev
{
  String a;
  String b;
  String c;
  String d;
  String e;
  String f;
  Handler g;
  int h = 9006;
  
  public ev(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    this.a = paramString1;
    this.b = paramString2;
    this.c = paramString3;
    this.d = paramString4;
    this.e = paramString5;
    this.f = "";
  }
  
  private String a(String paramString1, String paramString2)
  {
    Object localObject2 = "";
    String str1 = "0000";
    byte[] arrayOfByte = paramString2.getBytes("UTF-8");
    String str2 = null;
    Object localObject3 = null;
    Object localObject1 = null;
    for (;;)
    {
      try
      {
        paramString2 = (HttpURLConnection)new URL(paramString1).openConnection();
      }
      catch (ProtocolException paramString1)
      {
        paramString2 = (String)localObject1;
        paramString1.printStackTrace();
        if (paramString2 != null) {
          paramString2.disconnect();
        }
        return "0000" + "<:>" + "";
      }
      catch (UnsupportedEncodingException paramString1)
      {
        paramString2 = str2;
        paramString1.printStackTrace();
        if (paramString2 != null) {
          paramString2.disconnect();
        }
        return "0000" + "<:>" + "";
      }
      catch (IOException paramString1)
      {
        paramString2 = localObject3;
        paramString1.printStackTrace();
        if (paramString2 != null) {
          paramString2.disconnect();
        }
        return "0000" + "<:>" + "";
      }
      try
      {
        paramString2.setDoOutput(true);
        paramString2.setUseCaches(false);
        paramString2.setRequestMethod("POST");
        paramString2.setRequestProperty("Content-length", arrayOfByte.length);
        paramString2.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        paramString2.setRequestProperty("Content-Version", "1.0");
        paramString2.setRequestProperty("Charset", "UTF-8");
        paramString2.setRequestProperty("Connection", "Close");
        paramString2.setConnectTimeout(6000);
        paramString2.setReadTimeout(15000);
        paramString1 = paramString2.getOutputStream();
      }
      catch (IOException paramString1)
      {
        continue;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        continue;
      }
      catch (ProtocolException paramString1)
      {
        label372:
        continue;
      }
      try
      {
        paramString1.write(arrayOfByte);
        paramString1.close();
        localObject1 = localObject2;
        if (200 == paramString2.getResponseCode())
        {
          paramString1 = new StringBuffer();
          localObject1 = new BufferedReader(new InputStreamReader(paramString2.getInputStream(), "UTF-8"));
          str2 = ((BufferedReader)localObject1).readLine();
          if (str2 != null) {
            break label372;
          }
          ((BufferedReader)localObject1).close();
          localObject1 = paramString1.toString();
        }
        paramString1 = str1;
        localObject2 = localObject1;
        if (paramString2 != null)
        {
          paramString2.disconnect();
          localObject2 = localObject1;
          paramString1 = str1;
        }
      }
      catch (SocketTimeoutException paramString1)
      {
        paramString1 = "0001";
        if (paramString2 == null) {
          continue;
        }
        paramString2.disconnect();
        paramString1 = "0001";
        paramString2 = "";
        continue;
      }
      catch (IOException paramString1)
      {
        paramString1 = "0001";
        if (paramString2 == null) {
          continue;
        }
        paramString2.disconnect();
        paramString1 = "0001";
        paramString2 = "";
        continue;
      }
      finally
      {
        if (paramString2 == null) {
          break;
        }
        paramString2.disconnect();
      }
      paramString2 = (String)localObject2;
      return paramString1 + "<:>" + paramString2;
      paramString1.append(str2).append("\n");
    }
  }
  
  public String a(int paramInt, String paramString)
  {
    switch (paramInt)
    {
    default: 
      return "";
    case -1: 
      return paramInt + "<:>" + this.e + "<:end>";
    case 0: 
      return paramInt + "<:>" + this.a + "<:>" + this.b + "<:>" + this.c + "<:>" + this.d + "<:>" + this.e + "<:>" + this.f + "<:end>";
    }
    return paramInt + "<:>" + paramString + "<:end>";
  }
  
  public String a(String paramString)
  {
    int i = paramString.indexOf("cellphone");
    if (i <= 0) {
      return "";
    }
    i = paramString.indexOf("\"", paramString.indexOf(":", i + 1));
    return paramString.substring(i + 1, paramString.indexOf("\"", i + 1)).replace("+86", "");
  }
  
  public void a()
  {
    Object localObject3;
    int i;
    try
    {
      localSocket = new Socket("218.16.118.218", this.h);
      localInputStream = localSocket.getInputStream();
      localOutputStream = localSocket.getOutputStream();
      localObject1 = "";
      localObject3 = "";
      arrayOfByte = new byte['⠀'];
      i = -1;
    }
    catch (Exception localException)
    {
      Socket localSocket;
      InputStream localInputStream;
      OutputStream localOutputStream;
      Object localObject1;
      byte[] arrayOfByte;
      localException.printStackTrace();
      b(104, "连接服务器失败");
      return;
    }
    localInputStream.close();
    localOutputStream.close();
    localSocket.close();
    b(4, (String)localObject1);
    return;
    label151:
    label286:
    label437:
    for (;;)
    {
      Object localObject4;
      if ((!this.c.equals("")) && (i == -1))
      {
        localObject4 = localObject3;
      }
      else
      {
        if (i == 0)
        {
          if (this.c.length() != 11)
          {
            localObject1 = "号码错误!";
            break;
          }
          if (this.b.length() != 15)
          {
            localObject1 = "IMSI错误!";
            break;
          }
        }
        localOutputStream.write(a(i, (String)localObject1).getBytes());
        localObject1 = "";
        int j = localInputStream.read(arrayOfByte);
        if (j == -1) {}
        for (;;)
        {
          localObject3 = ((String)localObject1).replace("<:end>", "");
          localObject1 = localObject3;
          if (i == 5) {
            break;
          }
          localObject1 = ((String)localObject3).split("<:>");
          if (c(i, localObject1[2])) {
            break label286;
          }
          localObject1 = "error(" + i + "):" + localObject1[2];
          break;
          localObject3 = localObject1 + new String(arrayOfByte, 0, j, "GBK");
          localObject1 = localObject3;
          if (!((String)localObject3).contains("<:end>")) {
            break label151;
          }
          localObject1 = localObject3;
        }
        if (i == -1) {
          Thread.sleep(5000L);
        }
        String str = a(localObject1[0], localObject1[1]);
        localObject4 = localObject3;
        localObject1 = str;
        if (i == -1)
        {
          this.c = a(str);
          if (this.c.equals(""))
          {
            localObject1 = "取号失败!" + str;
            break;
          }
          b(100, "取号成功" + this.c);
          localObject1 = "";
          localObject4 = localObject3;
        }
      }
      for (;;)
      {
        if (i < 6) {
          break label437;
        }
        Object localObject2 = localObject3;
        break;
        i += 1;
        localObject3 = localObject4;
      }
    }
  }
  
  public void a(Handler paramHandler)
  {
    this.g = paramHandler;
    new ew(this).start();
  }
  
  void b(int paramInt, String paramString)
  {
    Message localMessage = new Message();
    localMessage.what = paramInt;
    localMessage.obj = paramString;
    this.g.sendMessage(localMessage);
  }
  
  public boolean c(int paramInt, String paramString)
  {
    return (paramString.contains("nothing")) || (paramString.contains("\"resultCode\": \"0000\""));
  }
}
