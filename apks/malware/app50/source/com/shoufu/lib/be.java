package com.shoufu.lib;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.util.Base64;
import android.util.Log;
import java.io.IOException;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.apache.http.util.ByteArrayBuffer;
import org.apache.http.util.EntityUtils;

public class be
{
  public static String a(String paramString)
  {
    Object localObject1 = null;
    paramString = new HttpGet(paramString);
    Object localObject2 = new DefaultHttpClient();
    ((HttpClient)localObject2).getParams().setParameter("http.connection.timeout", Integer.valueOf(30000));
    ((HttpClient)localObject2).getParams().setParameter("http.socket.timeout", Integer.valueOf(30000));
    try
    {
      localObject2 = ((HttpClient)localObject2).execute(paramString);
      paramString = localObject1;
      if (((HttpResponse)localObject2).getStatusLine().getStatusCode() == 200) {
        paramString = EntityUtils.toString(((HttpResponse)localObject2).getEntity(), "utf-8");
      }
      return paramString;
    }
    catch (IOException paramString)
    {
      return null;
    }
    catch (ClientProtocolException paramString) {}
    return null;
  }
  
  public static String a(String paramString1, String paramString2)
  {
    Object localObject = null;
    paramString1 = new HttpPost(paramString1);
    DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
    localDefaultHttpClient.getParams().setParameter("http.connection.timeout", Integer.valueOf(30000));
    localDefaultHttpClient.getParams().setParameter("http.socket.timeout", Integer.valueOf(30000));
    try
    {
      paramString1.setEntity(new StringEntity(paramString2));
      paramString2 = localDefaultHttpClient.execute(paramString1);
      paramString1 = localObject;
      if (paramString2.getStatusLine().getStatusCode() == 200) {
        paramString1 = EntityUtils.toString(paramString2.getEntity(), "utf-8");
      }
      return paramString1;
    }
    catch (IOException paramString1)
    {
      return null;
    }
    catch (ClientProtocolException paramString1) {}
    return null;
  }
  
  public static String a(String paramString, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    Object localObject = null;
    try
    {
      paramString = new HttpPost(paramString);
      DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
      new ByteArrayBuffer(paramInt2).append(paramArrayOfByte, paramInt1, paramInt2);
      paramArrayOfByte = new ByteArrayEntity(paramArrayOfByte);
      paramArrayOfByte.setContentEncoding("gzip");
      paramArrayOfByte.setContentType("application/octet-stream");
      paramString.setEntity(paramArrayOfByte);
      paramArrayOfByte = localDefaultHttpClient.execute(paramString);
      paramString = localObject;
      if (paramArrayOfByte.getStatusLine().getStatusCode() == 200) {
        paramString = EntityUtils.toString(paramArrayOfByte.getEntity(), "utf-8");
      }
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static boolean a(Context paramContext)
  {
    if (paramContext != null)
    {
      try
      {
        paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
        if (paramContext != null)
        {
          paramContext = paramContext.getActiveNetworkInfo();
          if ((paramContext != null) && (paramContext.isConnected()))
          {
            if (paramContext.getState() == NetworkInfo.State.CONNECTED) {
              return true;
            }
            Log.d("IAP", "isConnect() network disconnected");
          }
          else
          {
            Log.d("IAP", "isConnect() network disconnected");
          }
        }
      }
      catch (Exception paramContext)
      {
        Log.d("IAP", "isConnect() exception:" + paramContext.getMessage());
        return true;
      }
      Log.d("IAP", "isConnect() cannot get connectivity");
    }
    else
    {
      Log.d("IAP", "isConnect() cannot get context");
      return true;
    }
    return false;
  }
  
  public static String b(Context paramContext)
  {
    int i;
    if (a(paramContext))
    {
      i = 0;
      if (i < 3) {}
    }
    else
    {
      paramContext = null;
    }
    String str1;
    String str2;
    do
    {
      return paramContext;
      paramContext = av.a(i);
      if ((paramContext == null) || (paramContext.length() <= 0)) {
        break;
      }
      str1 = paramContext + "?operation=100";
      str2 = a(str1, "{\"params\":\"" + Base64.encodeToString("operation=100".getBytes(), 0) + "\"}");
    } while ((str2 != null) && (str2.equals("true")));
    Log.d("IAP", "access url[" + i + "] error:" + str1);
    for (;;)
    {
      i += 1;
      break;
      Log.d("IAP", "not set url[" + i + "]");
    }
  }
}
