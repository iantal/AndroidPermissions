package com.baidu.location;

import java.util.List;

class aq
  implements au
{
  public static String kf = null;
  public int ka = 0;
  private int kb = 1;
  private List kc = null;
  private final boolean kd = false;
  private double ke = 0.0D;
  private String kg = "";
  private boolean kh = false;
  private double ki = 0.0D;
  private char kj = 'N';
  private String kk = "";
  private boolean kl = false;
  private int km = 0;
  private boolean kn = false;
  private int ko = 0;
  private int kp = 0;
  private String kq = "";
  private String kr = "";
  private boolean ks = false;
  
  public aq(List paramList, String paramString1, String paramString2, String paramString3)
  {
    this.kc = paramList;
    this.kk = paramString1;
    this.kq = paramString2;
    this.kr = paramString3;
    cD();
  }
  
  private void cD()
  {
    int i = 0;
    if (t(this.kr))
    {
      Object localObject = this.kr.substring(0, this.kr.length() - 3);
      int k;
      for (int j = 0; i < ((String)localObject).length(); j = k)
      {
        k = j;
        if (((String)localObject).charAt(i) == ',') {
          k = j + 1;
        }
        i += 1;
      }
      localObject = ((String)localObject).split(",", j + 1);
      if (localObject.length < 6) {
        return;
      }
      if ((!localObject[2].equals("")) && (!localObject[(localObject.length - 3)].equals("")) && (!localObject[(localObject.length - 2)].equals("")) && (!localObject[(localObject.length - 1)].equals("")))
      {
        this.kb = Integer.valueOf(localObject[2]).intValue();
        this.ki = Double.valueOf(localObject[(localObject.length - 3)]).doubleValue();
        this.ke = Double.valueOf(localObject[(localObject.length - 2)]).doubleValue();
        this.kn = true;
      }
    }
    this.kl = this.kn;
  }
  
  private boolean t(String paramString)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramString != null)
    {
      bool1 = bool2;
      if (paramString.length() > 8)
      {
        int i = 1;
        int j = 0;
        while (i < paramString.length() - 3)
        {
          j ^= paramString.charAt(i);
          i += 1;
        }
        bool1 = bool2;
        if (Integer.toHexString(j).equalsIgnoreCase(paramString.substring(paramString.length() - 2, paramString.length()))) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public double cE()
  {
    return this.ke;
  }
  
  public String cF()
  {
    return this.kg;
  }
  
  public boolean cG()
  {
    return this.kl;
  }
  
  public double cH()
  {
    return this.ki;
  }
  
  public int cI()
  {
    return this.km;
  }
}
