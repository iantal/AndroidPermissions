package net.tsz.afinal;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.zip.GZIPInputStream;
import net.tsz.afinal.http.AjaxCallBack;
import net.tsz.afinal.http.AjaxParams;
import net.tsz.afinal.http.HttpHandler;
import net.tsz.afinal.http.RetryHandler;
import net.tsz.afinal.http.SyncRequestHandler;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpRequest;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.HttpResponse;
import org.apache.http.HttpResponseInterceptor;
import org.apache.http.HttpVersion;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.params.ConnPerRouteBean;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.HttpEntityWrapper;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.SyncBasicHttpContext;

public class FinalHttp
{
  private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
  private static final String ENCODING_GZIP = "gzip";
  private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
  private static final Executor executor = Executors.newFixedThreadPool(httpThreadCount, sThreadFactory);
  private static int httpThreadCount;
  private static int maxConnections = 10;
  private static int maxRetries;
  private static final ThreadFactory sThreadFactory;
  private static int socketTimeout = 10000;
  private String charset = "utf-8";
  private final Map<String, String> clientHeaderMap;
  private final DefaultHttpClient httpClient;
  private final HttpContext httpContext;
  
  static
  {
    maxRetries = 5;
    httpThreadCount = 3;
    sThreadFactory = new ThreadFactory()
    {
      private final AtomicInteger mCount = new AtomicInteger(1);
      
      public Thread newThread(Runnable paramAnonymousRunnable)
      {
        paramAnonymousRunnable = new Thread(paramAnonymousRunnable, "FinalHttp #" + this.mCount.getAndIncrement());
        paramAnonymousRunnable.setPriority(4);
        return paramAnonymousRunnable;
      }
    };
  }
  
  public FinalHttp()
  {
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    ConnManagerParams.setTimeout(localBasicHttpParams, socketTimeout);
    ConnManagerParams.setMaxConnectionsPerRoute(localBasicHttpParams, new ConnPerRouteBean(maxConnections));
    ConnManagerParams.setMaxTotalConnections(localBasicHttpParams, 10);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, socketTimeout);
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, socketTimeout);
    HttpConnectionParams.setTcpNoDelay(localBasicHttpParams, true);
    HttpConnectionParams.setSocketBufferSize(localBasicHttpParams, 8192);
    HttpProtocolParams.setVersion(localBasicHttpParams, HttpVersion.HTTP_1_1);
    Object localObject = new SchemeRegistry();
    ((SchemeRegistry)localObject).register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    ((SchemeRegistry)localObject).register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
    localObject = new ThreadSafeClientConnManager(localBasicHttpParams, (SchemeRegistry)localObject);
    this.httpContext = new SyncBasicHttpContext(new BasicHttpContext());
    this.httpClient = new DefaultHttpClient((ClientConnectionManager)localObject, localBasicHttpParams);
    this.httpClient.addRequestInterceptor(new HttpRequestInterceptor()
    {
      public void process(HttpRequest paramAnonymousHttpRequest, HttpContext paramAnonymousHttpContext)
      {
        if (!paramAnonymousHttpRequest.containsHeader("Accept-Encoding")) {
          paramAnonymousHttpRequest.addHeader("Accept-Encoding", "gzip");
        }
        paramAnonymousHttpContext = FinalHttp.this.clientHeaderMap.keySet().iterator();
        for (;;)
        {
          if (!paramAnonymousHttpContext.hasNext()) {
            return;
          }
          String str = (String)paramAnonymousHttpContext.next();
          paramAnonymousHttpRequest.addHeader(str, (String)FinalHttp.this.clientHeaderMap.get(str));
        }
      }
    });
    this.httpClient.addResponseInterceptor(new HttpResponseInterceptor()
    {
      public void process(HttpResponse paramAnonymousHttpResponse, HttpContext paramAnonymousHttpContext)
      {
        paramAnonymousHttpContext = paramAnonymousHttpResponse.getEntity();
        if (paramAnonymousHttpContext == null) {}
        for (;;)
        {
          return;
          paramAnonymousHttpContext = paramAnonymousHttpContext.getContentEncoding();
          if (paramAnonymousHttpContext != null)
          {
            paramAnonymousHttpContext = paramAnonymousHttpContext.getElements();
            int j = paramAnonymousHttpContext.length;
            int i = 0;
            while (i < j)
            {
              if (paramAnonymousHttpContext[i].getName().equalsIgnoreCase("gzip"))
              {
                paramAnonymousHttpResponse.setEntity(new FinalHttp.InflatingEntity(paramAnonymousHttpResponse.getEntity()));
                return;
              }
              i += 1;
            }
          }
        }
      }
    });
    this.httpClient.setHttpRequestRetryHandler(new RetryHandler(maxRetries));
    this.clientHeaderMap = new HashMap();
  }
  
  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase paramHttpEntityEnclosingRequestBase, HttpEntity paramHttpEntity)
  {
    if (paramHttpEntity != null) {
      paramHttpEntityEnclosingRequestBase.setEntity(paramHttpEntity);
    }
    return paramHttpEntityEnclosingRequestBase;
  }
  
  public static String getUrlWithQueryString(String paramString, AjaxParams paramAjaxParams)
  {
    String str = paramString;
    if (paramAjaxParams != null)
    {
      paramAjaxParams = paramAjaxParams.getParamString();
      str = paramString + "?" + paramAjaxParams;
    }
    return str;
  }
  
  private HttpEntity paramsToEntity(AjaxParams paramAjaxParams)
  {
    HttpEntity localHttpEntity = null;
    if (paramAjaxParams != null) {
      localHttpEntity = paramAjaxParams.getEntity();
    }
    return localHttpEntity;
  }
  
  public void addHeader(String paramString1, String paramString2)
  {
    this.clientHeaderMap.put(paramString1, paramString2);
  }
  
  public void configCharset(String paramString)
  {
    if ((paramString != null) && (paramString.trim().length() != 0)) {
      this.charset = paramString;
    }
  }
  
  public void configCookieStore(CookieStore paramCookieStore)
  {
    this.httpContext.setAttribute("http.cookie-store", paramCookieStore);
  }
  
  public void configRequestExecutionRetryCount(int paramInt)
  {
    this.httpClient.setHttpRequestRetryHandler(new RetryHandler(paramInt));
  }
  
  public void configSSLSocketFactory(SSLSocketFactory paramSSLSocketFactory)
  {
    paramSSLSocketFactory = new Scheme("https", paramSSLSocketFactory, 443);
    this.httpClient.getConnectionManager().getSchemeRegistry().register(paramSSLSocketFactory);
  }
  
  public void configTimeout(int paramInt)
  {
    HttpParams localHttpParams = this.httpClient.getParams();
    ConnManagerParams.setTimeout(localHttpParams, paramInt);
    HttpConnectionParams.setSoTimeout(localHttpParams, paramInt);
    HttpConnectionParams.setConnectionTimeout(localHttpParams, paramInt);
  }
  
  public void configUserAgent(String paramString)
  {
    HttpProtocolParams.setUserAgent(this.httpClient.getParams(), paramString);
  }
  
  public void delete(String paramString, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    paramString = new HttpDelete(paramString);
    sendRequest(this.httpClient, this.httpContext, paramString, null, paramAjaxCallBack);
  }
  
  public void delete(String paramString, Header[] paramArrayOfHeader, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    paramString = new HttpDelete(paramString);
    if (paramArrayOfHeader != null) {
      paramString.setHeaders(paramArrayOfHeader);
    }
    sendRequest(this.httpClient, this.httpContext, paramString, null, paramAjaxCallBack);
  }
  
  public Object deleteSync(String paramString)
  {
    return deleteSync(paramString, null);
  }
  
  public Object deleteSync(String paramString, Header[] paramArrayOfHeader)
  {
    paramString = new HttpDelete(paramString);
    if (paramArrayOfHeader != null) {
      paramString.setHeaders(paramArrayOfHeader);
    }
    return sendSyncRequest(this.httpClient, this.httpContext, paramString, null);
  }
  
  public HttpHandler<File> download(String paramString1, String paramString2, AjaxCallBack<File> paramAjaxCallBack)
  {
    return download(paramString1, null, paramString2, false, paramAjaxCallBack);
  }
  
  public HttpHandler<File> download(String paramString1, String paramString2, boolean paramBoolean, AjaxCallBack<File> paramAjaxCallBack)
  {
    return download(paramString1, null, paramString2, paramBoolean, paramAjaxCallBack);
  }
  
  public HttpHandler<File> download(String paramString1, AjaxParams paramAjaxParams, String paramString2, AjaxCallBack<File> paramAjaxCallBack)
  {
    return download(paramString1, paramAjaxParams, paramString2, false, paramAjaxCallBack);
  }
  
  public HttpHandler<File> download(String paramString1, AjaxParams paramAjaxParams, String paramString2, boolean paramBoolean, AjaxCallBack<File> paramAjaxCallBack)
  {
    paramString1 = new HttpGet(getUrlWithQueryString(paramString1, paramAjaxParams));
    paramAjaxParams = new HttpHandler(this.httpClient, this.httpContext, paramAjaxCallBack, this.charset);
    paramAjaxParams.executeOnExecutor(executor, new Object[] { paramString1, paramString2, Boolean.valueOf(paramBoolean) });
    return paramAjaxParams;
  }
  
  public void get(String paramString, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    get(paramString, null, paramAjaxCallBack);
  }
  
  public void get(String paramString, AjaxParams paramAjaxParams, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    sendRequest(this.httpClient, this.httpContext, new HttpGet(getUrlWithQueryString(paramString, paramAjaxParams)), null, paramAjaxCallBack);
  }
  
  public void get(String paramString, Header[] paramArrayOfHeader, AjaxParams paramAjaxParams, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    paramString = new HttpGet(getUrlWithQueryString(paramString, paramAjaxParams));
    if (paramArrayOfHeader != null) {
      paramString.setHeaders(paramArrayOfHeader);
    }
    sendRequest(this.httpClient, this.httpContext, paramString, null, paramAjaxCallBack);
  }
  
  public HttpClient getHttpClient()
  {
    return this.httpClient;
  }
  
  public HttpContext getHttpContext()
  {
    return this.httpContext;
  }
  
  public Object getSync(String paramString)
  {
    return getSync(paramString, null);
  }
  
  public Object getSync(String paramString, AjaxParams paramAjaxParams)
  {
    paramString = new HttpGet(getUrlWithQueryString(paramString, paramAjaxParams));
    return sendSyncRequest(this.httpClient, this.httpContext, paramString, null);
  }
  
  public Object getSync(String paramString, Header[] paramArrayOfHeader, AjaxParams paramAjaxParams)
  {
    paramString = new HttpGet(getUrlWithQueryString(paramString, paramAjaxParams));
    if (paramArrayOfHeader != null) {
      paramString.setHeaders(paramArrayOfHeader);
    }
    return sendSyncRequest(this.httpClient, this.httpContext, paramString, null);
  }
  
  public void post(String paramString, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    post(paramString, null, paramAjaxCallBack);
  }
  
  public void post(String paramString, AjaxParams paramAjaxParams, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    post(paramString, paramsToEntity(paramAjaxParams), null, paramAjaxCallBack);
  }
  
  public void post(String paramString1, HttpEntity paramHttpEntity, String paramString2, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    sendRequest(this.httpClient, this.httpContext, addEntityToRequestBase(new HttpPost(paramString1), paramHttpEntity), paramString2, paramAjaxCallBack);
  }
  
  public <T> void post(String paramString1, Header[] paramArrayOfHeader, AjaxParams paramAjaxParams, String paramString2, AjaxCallBack<T> paramAjaxCallBack)
  {
    paramString1 = new HttpPost(paramString1);
    if (paramAjaxParams != null) {
      paramString1.setEntity(paramsToEntity(paramAjaxParams));
    }
    if (paramArrayOfHeader != null) {
      paramString1.setHeaders(paramArrayOfHeader);
    }
    sendRequest(this.httpClient, this.httpContext, paramString1, paramString2, paramAjaxCallBack);
  }
  
  public void post(String paramString1, Header[] paramArrayOfHeader, HttpEntity paramHttpEntity, String paramString2, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    paramString1 = addEntityToRequestBase(new HttpPost(paramString1), paramHttpEntity);
    if (paramArrayOfHeader != null) {
      paramString1.setHeaders(paramArrayOfHeader);
    }
    sendRequest(this.httpClient, this.httpContext, paramString1, paramString2, paramAjaxCallBack);
  }
  
  public Object postSync(String paramString)
  {
    return postSync(paramString, null);
  }
  
  public Object postSync(String paramString, AjaxParams paramAjaxParams)
  {
    return postSync(paramString, paramsToEntity(paramAjaxParams), null);
  }
  
  public Object postSync(String paramString1, HttpEntity paramHttpEntity, String paramString2)
  {
    return sendSyncRequest(this.httpClient, this.httpContext, addEntityToRequestBase(new HttpPost(paramString1), paramHttpEntity), paramString2);
  }
  
  public Object postSync(String paramString1, Header[] paramArrayOfHeader, AjaxParams paramAjaxParams, String paramString2)
  {
    paramString1 = new HttpPost(paramString1);
    if (paramAjaxParams != null) {
      paramString1.setEntity(paramsToEntity(paramAjaxParams));
    }
    if (paramArrayOfHeader != null) {
      paramString1.setHeaders(paramArrayOfHeader);
    }
    return sendSyncRequest(this.httpClient, this.httpContext, paramString1, paramString2);
  }
  
  public Object postSync(String paramString1, Header[] paramArrayOfHeader, HttpEntity paramHttpEntity, String paramString2)
  {
    paramString1 = addEntityToRequestBase(new HttpPost(paramString1), paramHttpEntity);
    if (paramArrayOfHeader != null) {
      paramString1.setHeaders(paramArrayOfHeader);
    }
    return sendSyncRequest(this.httpClient, this.httpContext, paramString1, paramString2);
  }
  
  public void put(String paramString, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    put(paramString, null, paramAjaxCallBack);
  }
  
  public void put(String paramString, AjaxParams paramAjaxParams, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    put(paramString, paramsToEntity(paramAjaxParams), null, paramAjaxCallBack);
  }
  
  public void put(String paramString1, HttpEntity paramHttpEntity, String paramString2, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    sendRequest(this.httpClient, this.httpContext, addEntityToRequestBase(new HttpPut(paramString1), paramHttpEntity), paramString2, paramAjaxCallBack);
  }
  
  public void put(String paramString1, Header[] paramArrayOfHeader, HttpEntity paramHttpEntity, String paramString2, AjaxCallBack<? extends Object> paramAjaxCallBack)
  {
    paramString1 = addEntityToRequestBase(new HttpPut(paramString1), paramHttpEntity);
    if (paramArrayOfHeader != null) {
      paramString1.setHeaders(paramArrayOfHeader);
    }
    sendRequest(this.httpClient, this.httpContext, paramString1, paramString2, paramAjaxCallBack);
  }
  
  public Object putSync(String paramString)
  {
    return putSync(paramString, null);
  }
  
  public Object putSync(String paramString, AjaxParams paramAjaxParams)
  {
    return putSync(paramString, paramsToEntity(paramAjaxParams), null);
  }
  
  public Object putSync(String paramString1, HttpEntity paramHttpEntity, String paramString2)
  {
    return putSync(paramString1, null, paramHttpEntity, paramString2);
  }
  
  public Object putSync(String paramString1, Header[] paramArrayOfHeader, HttpEntity paramHttpEntity, String paramString2)
  {
    paramString1 = addEntityToRequestBase(new HttpPut(paramString1), paramHttpEntity);
    if (paramArrayOfHeader != null) {
      paramString1.setHeaders(paramArrayOfHeader);
    }
    return sendSyncRequest(this.httpClient, this.httpContext, paramString1, paramString2);
  }
  
  protected <T> void sendRequest(DefaultHttpClient paramDefaultHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, String paramString, AjaxCallBack<T> paramAjaxCallBack)
  {
    if (paramString != null) {
      paramHttpUriRequest.addHeader("Content-Type", paramString);
    }
    new HttpHandler(paramDefaultHttpClient, paramHttpContext, paramAjaxCallBack, this.charset).executeOnExecutor(executor, new Object[] { paramHttpUriRequest });
  }
  
  protected Object sendSyncRequest(DefaultHttpClient paramDefaultHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, String paramString)
  {
    if (paramString != null) {
      paramHttpUriRequest.addHeader("Content-Type", paramString);
    }
    return new SyncRequestHandler(paramDefaultHttpClient, paramHttpContext, this.charset).sendRequest(new HttpUriRequest[] { paramHttpUriRequest });
  }
  
  private static class InflatingEntity
    extends HttpEntityWrapper
  {
    public InflatingEntity(HttpEntity paramHttpEntity)
    {
      super();
    }
    
    public InputStream getContent()
      throws IOException
    {
      return new GZIPInputStream(this.wrappedEntity.getContent());
    }
    
    public long getContentLength()
    {
      return -1L;
    }
  }
}
