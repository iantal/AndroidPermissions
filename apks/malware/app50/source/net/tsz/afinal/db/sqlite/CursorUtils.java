package net.tsz.afinal.db.sqlite;

import android.database.Cursor;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import net.tsz.afinal.FinalDb;
import net.tsz.afinal.db.table.Id;
import net.tsz.afinal.db.table.ManyToOne;
import net.tsz.afinal.db.table.OneToMany;
import net.tsz.afinal.db.table.Property;
import net.tsz.afinal.db.table.TableInfo;

public class CursorUtils
{
  public CursorUtils() {}
  
  public static <T> T dbModel2Entity(DbModel paramDbModel, Class<?> paramClass)
  {
    if (paramDbModel != null) {
      paramDbModel = paramDbModel.getDataMap();
    }
    Object localObject1;
    String str;
    TableInfo localTableInfo;
    do
    {
      for (;;)
      {
        try
        {
          localObject1 = paramClass.newInstance();
          Iterator localIterator = paramDbModel.entrySet().iterator();
          if (!localIterator.hasNext()) {
            return localObject1;
          }
          paramDbModel = (Map.Entry)localIterator.next();
          str = (String)paramDbModel.getKey();
          localTableInfo = TableInfo.get(paramClass);
          localObject2 = (Property)localTableInfo.propertyMap.get(str);
          if (localObject2 == null) {
            break;
          }
          if (paramDbModel.getValue() == null)
          {
            paramDbModel = null;
            ((Property)localObject2).setValue(localObject1, paramDbModel);
            continue;
            return null;
          }
        }
        catch (Exception paramDbModel)
        {
          paramDbModel.printStackTrace();
        }
        paramDbModel = paramDbModel.getValue().toString();
      }
    } while (!localTableInfo.getId().getColumn().equals(str));
    Object localObject2 = localTableInfo.getId();
    if (paramDbModel.getValue() == null) {}
    for (paramDbModel = null;; paramDbModel = paramDbModel.getValue().toString())
    {
      ((Id)localObject2).setValue(localObject1, paramDbModel);
      break;
    }
  }
  
  public static DbModel getDbModel(Cursor paramCursor)
  {
    if ((paramCursor != null) && (paramCursor.getColumnCount() > 0))
    {
      DbModel localDbModel = new DbModel();
      int j = paramCursor.getColumnCount();
      int i = 0;
      for (;;)
      {
        if (i >= j) {
          return localDbModel;
        }
        localDbModel.set(paramCursor.getColumnName(i), paramCursor.getString(i));
        i += 1;
      }
    }
    return null;
  }
  
  public static <T> T getEntity(Cursor paramCursor, Class<T> paramClass, FinalDb paramFinalDb)
  {
    if (paramCursor != null) {}
    for (;;)
    {
      Object localObject2;
      Object localObject1;
      int i;
      try
      {
        localObject2 = TableInfo.get(paramClass);
        int j = paramCursor.getColumnCount();
        if (j > 0)
        {
          localObject1 = paramClass.newInstance();
          i = 0;
          if (i >= j)
          {
            paramCursor = ((TableInfo)localObject2).oneToManyMap.values().iterator();
            if (paramCursor.hasNext()) {
              break label175;
            }
            paramCursor = ((TableInfo)localObject2).manyToOneMap.values().iterator();
            if (paramCursor.hasNext()) {
              break label222;
            }
            return localObject1;
          }
          localObject3 = paramCursor.getColumnName(i);
          Property localProperty = (Property)((TableInfo)localObject2).propertyMap.get(localObject3);
          if (localProperty != null) {
            localProperty.setValue(localObject1, paramCursor.getString(i));
          } else if (((TableInfo)localObject2).getId().getColumn().equals(localObject3)) {
            ((TableInfo)localObject2).getId().setValue(localObject1, paramCursor.getString(i));
          }
        }
      }
      catch (Exception paramCursor)
      {
        paramCursor.printStackTrace();
      }
      return null;
      label175:
      Object localObject3 = (OneToMany)paramCursor.next();
      if (((OneToMany)localObject3).getDataType() == OneToManyLazyLoader.class)
      {
        ((OneToMany)localObject3).setValue(localObject1, new OneToManyLazyLoader(localObject1, paramClass, ((OneToMany)localObject3).getOneClass(), paramFinalDb));
        continue;
        label222:
        localObject2 = (ManyToOne)paramCursor.next();
        if (((ManyToOne)localObject2).getDataType() == ManyToOneLazyLoader.class)
        {
          ((ManyToOne)localObject2).setValue(localObject1, new ManyToOneLazyLoader(localObject1, paramClass, ((ManyToOne)localObject2).getManyClass(), paramFinalDb));
          continue;
          i += 1;
        }
      }
    }
  }
}
