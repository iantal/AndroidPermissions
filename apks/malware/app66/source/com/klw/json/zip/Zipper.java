package com.klw.json.zip;

import com.klw.json.JSONArray;
import com.klw.json.JSONException;
import com.klw.json.JSONObject;
import com.klw.json.Kim;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;

public class Zipper
  extends JSONzip
{
  final BitWriter bitwriter;
  
  public Zipper(BitWriter paramBitWriter)
  {
    this.bitwriter = paramBitWriter;
  }
  
  private static int bcd(char paramChar)
  {
    if ((paramChar >= '0') && (paramChar <= '9')) {
      return paramChar - '0';
    }
    switch (paramChar)
    {
    case ',': 
    default: 
      return 13;
    case '.': 
      return 10;
    case '-': 
      return 11;
    }
    return 12;
  }
  
  private void one()
  {
    write(1, 1);
  }
  
  private void write(int paramInt1, int paramInt2)
  {
    try
    {
      this.bitwriter.write(paramInt1, paramInt2);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw new JSONException(localThrowable);
    }
  }
  
  private void write(int paramInt, Huff paramHuff)
  {
    paramHuff.write(paramInt, this.bitwriter);
  }
  
  private void write(int paramInt, Keep paramKeep)
  {
    int i = paramKeep.bitsize();
    paramKeep.tick(paramInt);
    write(paramInt, i);
  }
  
  private void write(JSONArray paramJSONArray)
  {
    int k = 0;
    int i = 1;
    int j = paramJSONArray.length();
    if (j == 0)
    {
      write(1, 3);
      return;
    }
    Object localObject2 = paramJSONArray.get(0);
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = JSONObject.NULL;
    }
    if ((localObject1 instanceof String))
    {
      write(6, 3);
      writeString((String)localObject1);
      k = 1;
    }
    while (i >= j)
    {
      zero();
      zero();
      return;
      write(7, 3);
      writeValue(localObject1);
    }
    localObject2 = paramJSONArray.get(i);
    localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = JSONObject.NULL;
    }
    if (localObject1 instanceof String != k) {
      zero();
    }
    one();
    if ((localObject1 instanceof String)) {
      writeString((String)localObject1);
    }
    for (;;)
    {
      i += 1;
      break;
      writeValue(localObject1);
    }
  }
  
  private void write(JSONObject paramJSONObject)
  {
    int i = 1;
    Iterator localIterator = paramJSONObject.keys();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        if (i == 0) {
          break;
        }
        write(0, 3);
        return;
      }
      Object localObject = localIterator.next();
      if ((localObject instanceof String))
      {
        if (i != 0)
        {
          write(5, 3);
          i = 0;
        }
        for (;;)
        {
          writeName((String)localObject);
          localObject = paramJSONObject.get((String)localObject);
          if (!(localObject instanceof String)) {
            break label106;
          }
          zero();
          writeString((String)localObject);
          break;
          one();
        }
        label106:
        one();
        writeValue(localObject);
      }
    }
    zero();
  }
  
  private void write(Kim paramKim, Huff paramHuff1, Huff paramHuff2)
  {
    int i = 0;
    if (i >= paramKim.length) {
      return;
    }
    int j = paramKim.get(i);
    write(j, paramHuff1);
    for (;;)
    {
      if ((j & 0x80) != 128)
      {
        i += 1;
        break;
      }
      i += 1;
      j = paramKim.get(i);
      write(j, paramHuff2);
    }
  }
  
  private void writeJSON(Object paramObject)
  {
    if (JSONObject.NULL.equals(paramObject))
    {
      write(4, 3);
      return;
    }
    if (Boolean.FALSE.equals(paramObject))
    {
      write(3, 3);
      return;
    }
    if (Boolean.TRUE.equals(paramObject))
    {
      write(2, 3);
      return;
    }
    if ((paramObject instanceof Map)) {
      paramObject = new JSONObject((Map)paramObject);
    }
    for (;;)
    {
      if ((paramObject instanceof JSONObject))
      {
        write((JSONObject)paramObject);
        return;
        if ((paramObject instanceof Collection)) {
          paramObject = new JSONArray((Collection)paramObject);
        } else if (paramObject.getClass().isArray()) {
          paramObject = new JSONArray(paramObject);
        }
      }
      else
      {
        if ((paramObject instanceof JSONArray))
        {
          write((JSONArray)paramObject);
          return;
        }
        throw new JSONException("Unrecognized object");
      }
    }
  }
  
  private void writeName(String paramString)
  {
    paramString = new Kim(paramString);
    int i = this.namekeep.find(paramString);
    if (i != -1)
    {
      one();
      write(i, this.namekeep);
      return;
    }
    zero();
    write(paramString, this.namehuff, this.namehuffext);
    write(256, this.namehuff);
    this.namekeep.register(paramString);
  }
  
  private void writeString(String paramString)
  {
    if (paramString.length() == 0)
    {
      zero();
      write(256, this.stringhuff);
      return;
    }
    paramString = new Kim(paramString);
    int i = this.stringkeep.find(paramString);
    if (i != -1)
    {
      one();
      write(i, this.stringkeep);
      return;
    }
    zero();
    write(paramString, this.stringhuff, this.stringhuffext);
    write(256, this.stringhuff);
    this.stringkeep.register(paramString);
  }
  
  private void writeValue(Object paramObject)
  {
    if ((paramObject instanceof Number))
    {
      String str = JSONObject.numberToString((Number)paramObject);
      int i = this.valuekeep.find(str);
      if (i != -1)
      {
        write(2, 2);
        write(i, this.valuekeep);
        return;
      }
      if (((paramObject instanceof Integer)) || ((paramObject instanceof Long)))
      {
        long l = ((Number)paramObject).longValue();
        if ((l >= 0L) && (l < 16528L))
        {
          write(0, 2);
          if (l < 16L)
          {
            zero();
            write((int)l, 4);
            return;
          }
          one();
          if (l < 144L)
          {
            zero();
            write((int)(l - 16L), 7);
            return;
          }
          one();
          write((int)(l - 144L), 14);
          return;
        }
      }
      write(1, 2);
      i = 0;
      for (;;)
      {
        if (i >= str.length())
        {
          write(endOfNumber, 4);
          this.valuekeep.register(str);
          return;
        }
        write(bcd(str.charAt(i)), 4);
        i += 1;
      }
    }
    write(3, 2);
    writeJSON(paramObject);
  }
  
  private void zero()
  {
    write(0, 1);
  }
  
  public void encode(JSONArray paramJSONArray)
  {
    generate();
    writeJSON(paramJSONArray);
  }
  
  public void encode(JSONObject paramJSONObject)
  {
    generate();
    writeJSON(paramJSONObject);
  }
  
  public void flush()
  {
    pad(8);
  }
  
  public void pad(int paramInt)
  {
    try
    {
      this.bitwriter.pad(paramInt);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw new JSONException(localThrowable);
    }
  }
}
