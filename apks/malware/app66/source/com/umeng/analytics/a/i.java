package com.umeng.analytics.a;

import com.umeng.common.Log;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONObject;

public class i
  implements g
{
  public ArrayList a = new ArrayList();
  public ArrayList b = new ArrayList();
  public ArrayList c = new ArrayList();
  public ArrayList d = new ArrayList();
  public ArrayList e = new ArrayList();
  private final String f = "launch";
  private final String g = "terminate";
  private final String h = "error";
  private final String i = "event";
  private final String j = "ekv";
  
  public i() {}
  
  private JSONArray a(ArrayList paramArrayList)
  {
    JSONArray localJSONArray;
    if (paramArrayList.size() > 0)
    {
      localJSONArray = new JSONArray();
      Iterator localIterator = paramArrayList.iterator();
      paramArrayList = null;
      while (localIterator.hasNext())
      {
        Object localObject = (g)localIterator.next();
        try
        {
          localObject = new j(this, (g)localObject);
          paramArrayList = (ArrayList)localObject;
        }
        catch (Exception localException)
        {
          for (;;)
          {
            Log.a("MobclickAgent", "Fail to write json ...", localException);
          }
          localJSONArray.put(paramArrayList);
        }
        if (paramArrayList == null) {}
      }
    }
    for (paramArrayList = localJSONArray;; paramArrayList = null)
    {
      if ((paramArrayList == null) || (paramArrayList.length() == 0)) {
        return null;
      }
      return paramArrayList;
    }
  }
  
  private void b(ArrayList paramArrayList)
  {
    if (paramArrayList.isEmpty()) {}
    for (;;)
    {
      return;
      Object localObject = new HashMap();
      paramArrayList = paramArrayList.iterator();
      b localB;
      while (paramArrayList.hasNext())
      {
        localB = (b)paramArrayList.next();
        if (((HashMap)localObject).containsKey(localB.a)) {
          ((b)((HashMap)localObject).get(localB.a)).a(localB);
        } else {
          ((HashMap)localObject).put(localB.a, localB);
        }
      }
      paramArrayList = this.e.iterator();
      while (paramArrayList.hasNext())
      {
        localB = (b)paramArrayList.next();
        if (((HashMap)localObject).containsKey(localB.a)) {
          ((b)((HashMap)localObject).get(localB.a)).a(localB);
        } else {
          ((HashMap)localObject).put(localB.a, localB);
        }
      }
      this.e.clear();
      paramArrayList = ((HashMap)localObject).values().iterator();
      while (paramArrayList.hasNext())
      {
        localObject = (b)paramArrayList.next();
        this.e.add(localObject);
      }
    }
  }
  
  private void c(JSONObject paramJSONObject)
  {
    if (paramJSONObject.has("launch"))
    {
      paramJSONObject = paramJSONObject.getJSONArray("launch");
      int k = 0;
      while (k < paramJSONObject.length())
      {
        h localH = new h();
        localH.a(paramJSONObject.getJSONObject(k));
        a(localH);
        k += 1;
      }
    }
  }
  
  private void d(JSONObject paramJSONObject)
  {
    if (paramJSONObject.has("terminate"))
    {
      paramJSONObject = paramJSONObject.getJSONArray("terminate");
      int k = 0;
      while (k < paramJSONObject.length())
      {
        m localM = new m();
        localM.a(paramJSONObject.getJSONObject(k));
        a(localM);
        k += 1;
      }
    }
  }
  
  private void e(JSONObject paramJSONObject)
  {
    if (paramJSONObject.has("event"))
    {
      paramJSONObject = paramJSONObject.getJSONArray("event");
      int k = 0;
      while (k < paramJSONObject.length())
      {
        e localE = new e();
        localE.a(paramJSONObject.getJSONObject(k));
        a(localE);
        k += 1;
      }
    }
  }
  
  private void f(JSONObject paramJSONObject)
  {
    if (paramJSONObject.has("ekv"))
    {
      paramJSONObject = paramJSONObject.getJSONArray("ekv");
      int k = 0;
      while (k < paramJSONObject.length())
      {
        b localB = new b();
        localB.a(paramJSONObject.getJSONObject(k));
        a(localB);
        k += 1;
      }
    }
  }
  
  private void g(JSONObject paramJSONObject)
  {
    if (paramJSONObject.has("error"))
    {
      paramJSONObject = paramJSONObject.getJSONArray("error");
      int k = 0;
      while (k < paramJSONObject.length())
      {
        d localD = new d();
        localD.a(paramJSONObject.getJSONObject(k));
        a(localD);
        k += 1;
      }
    }
  }
  
  public void a(b paramB)
  {
    if ((paramB != null) && (paramB.a())) {
      this.e.add(paramB);
    }
  }
  
  public void a(d paramD)
  {
    if ((paramD != null) && (paramD.a())) {
      this.c.add(paramD);
    }
  }
  
  public void a(e paramE)
  {
    if ((paramE != null) && (paramE.a())) {
      this.d.add(paramE);
    }
  }
  
  public void a(h paramH)
  {
    if ((paramH != null) && (paramH.a())) {
      this.a.add(paramH);
    }
  }
  
  public void a(i paramI)
  {
    this.a.addAll(paramI.a);
    this.b.addAll(paramI.b);
    this.d.addAll(paramI.d);
    this.c.addAll(paramI.c);
    b(paramI.e);
  }
  
  public void a(m paramM)
  {
    if ((paramM != null) && (paramM.a())) {
      this.b.add(paramM);
    }
  }
  
  public void a(String paramString, a paramA)
  {
    Iterator localIterator;
    if ((paramA != null) && (paramA.a())) {
      localIterator = this.e.iterator();
    }
    while (localIterator.hasNext())
    {
      b localB = (b)localIterator.next();
      if (localB.a.equals(paramString))
      {
        localB.b.add(paramA);
        return;
      }
    }
    this.e.add(new b(paramString, paramA));
  }
  
  public void a(JSONObject paramJSONObject)
  {
    if (paramJSONObject == null) {
      return;
    }
    try
    {
      c(paramJSONObject);
      d(paramJSONObject);
      e(paramJSONObject);
      f(paramJSONObject);
      g(paramJSONObject);
      return;
    }
    catch (Exception paramJSONObject)
    {
      Log.b("MobclickAgent", "merge log body eror", paramJSONObject);
    }
  }
  
  public boolean a()
  {
    Iterator localIterator = this.a.iterator();
    while (localIterator.hasNext()) {
      if (!((g)localIterator.next()).a()) {
        return false;
      }
    }
    localIterator = this.b.iterator();
    while (localIterator.hasNext()) {
      if (!((g)localIterator.next()).a()) {
        return false;
      }
    }
    localIterator = this.d.iterator();
    while (localIterator.hasNext()) {
      if (!((g)localIterator.next()).a()) {
        return false;
      }
    }
    localIterator = this.e.iterator();
    while (localIterator.hasNext()) {
      if (!((g)localIterator.next()).a()) {
        return false;
      }
    }
    localIterator = this.c.iterator();
    while (localIterator.hasNext()) {
      if (!((g)localIterator.next()).a()) {
        return false;
      }
    }
    return (this.a.size() != 0) || (this.b.size() != 0) || (this.d.size() != 0) || (this.e.size() != 0) || (this.c.size() != 0);
  }
  
  public int b()
  {
    Iterator localIterator = this.e.iterator();
    for (int k = 0; localIterator.hasNext(); k = ((b)localIterator.next()).b.size() + k) {}
    return this.a.size() + k + this.b.size() + this.d.size() + this.c.size();
  }
  
  public void b(JSONObject paramJSONObject)
  {
    JSONArray localJSONArray1 = a(this.a);
    JSONArray localJSONArray2 = a(this.b);
    JSONArray localJSONArray3 = a(this.d);
    JSONArray localJSONArray4 = a(this.c);
    JSONArray localJSONArray5 = a(this.e);
    if (localJSONArray1 != null) {
      paramJSONObject.put("launch", localJSONArray1);
    }
    if (localJSONArray2 != null) {
      paramJSONObject.put("terminate", localJSONArray2);
    }
    if (localJSONArray3 != null) {
      paramJSONObject.put("event", localJSONArray3);
    }
    if (localJSONArray4 != null) {
      paramJSONObject.put("error", localJSONArray4);
    }
    if (localJSONArray5 != null) {
      paramJSONObject.put("ekv", localJSONArray5);
    }
  }
  
  public void c()
  {
    this.a.clear();
    this.b.clear();
    this.d.clear();
    this.e.clear();
    this.c.clear();
  }
}
