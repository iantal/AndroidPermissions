package com.duowan.mobile.netroid.stack;

import android.text.TextUtils;
import com.duowan.mobile.netroid.Request;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolVersion;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.message.BasicStatusLine;

public class c
  implements HttpStack
{
  private String a;
  private final SSLSocketFactory b;
  
  public c(String paramString, SSLSocketFactory paramSSLSocketFactory)
  {
    this.b = paramSSLSocketFactory;
    this.a = paramString;
  }
  
  private HttpURLConnection a(URL paramURL)
  {
    return (HttpURLConnection)paramURL.openConnection();
  }
  
  private HttpURLConnection a(URL paramURL, Request paramRequest)
  {
    HttpURLConnection localHttpURLConnection = a(paramURL);
    int i = paramRequest.p();
    localHttpURLConnection.setConnectTimeout(i);
    localHttpURLConnection.setReadTimeout(i);
    localHttpURLConnection.setUseCaches(false);
    localHttpURLConnection.setDoInput(true);
    if (("https".equals(paramURL.getProtocol())) && (this.b != null)) {
      ((HttpsURLConnection)localHttpURLConnection).setSSLSocketFactory(this.b);
    }
    return localHttpURLConnection;
  }
  
  private static HttpEntity a(HttpURLConnection paramHttpURLConnection)
  {
    BasicHttpEntity localBasicHttpEntity = new BasicHttpEntity();
    try
    {
      InputStream localInputStream1 = paramHttpURLConnection.getInputStream();
      localBasicHttpEntity.setContent(localInputStream1);
      localBasicHttpEntity.setContentLength(paramHttpURLConnection.getContentLength());
      localBasicHttpEntity.setContentEncoding(paramHttpURLConnection.getContentEncoding());
      localBasicHttpEntity.setContentType(paramHttpURLConnection.getContentType());
      return localBasicHttpEntity;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        InputStream localInputStream2 = paramHttpURLConnection.getErrorStream();
      }
    }
  }
  
  private static void a(HttpURLConnection paramHttpURLConnection, Request paramRequest)
  {
    switch (paramRequest.a())
    {
    default: 
      throw new IllegalStateException("Unknown method type.");
    case 0: 
      paramHttpURLConnection.setRequestMethod("GET");
      return;
    case 3: 
      paramHttpURLConnection.setRequestMethod("DELETE");
      return;
    case 1: 
      paramHttpURLConnection.setRequestMethod("POST");
      b(paramHttpURLConnection, paramRequest);
      return;
    case 2: 
      paramHttpURLConnection.setRequestMethod("PUT");
      b(paramHttpURLConnection, paramRequest);
      return;
    case 4: 
      paramHttpURLConnection.setRequestMethod("HEAD");
      return;
    case 5: 
      paramHttpURLConnection.setRequestMethod("OPTIONS");
      return;
    case 6: 
      paramHttpURLConnection.setRequestMethod("TRACE");
      return;
    }
    b(paramHttpURLConnection, paramRequest);
    paramHttpURLConnection.setRequestMethod("PATCH");
  }
  
  private static void b(HttpURLConnection paramHttpURLConnection, Request paramRequest)
  {
    byte[] arrayOfByte = paramRequest.k();
    if (arrayOfByte != null)
    {
      paramHttpURLConnection.setDoOutput(true);
      paramHttpURLConnection.addRequestProperty("Content-Type", paramRequest.j());
      paramHttpURLConnection = new DataOutputStream(paramHttpURLConnection.getOutputStream());
      paramHttpURLConnection.write(arrayOfByte);
      paramHttpURLConnection.close();
    }
  }
  
  public HttpResponse performRequest(Request paramRequest)
  {
    Object localObject2 = new HashMap();
    if (!TextUtils.isEmpty(this.a)) {
      ((HashMap)localObject2).put("User-Agent", this.a);
    }
    ((HashMap)localObject2).putAll(paramRequest.g());
    Object localObject1 = a(new URL(paramRequest.b()), paramRequest);
    Iterator localIterator = ((HashMap)localObject2).keySet().iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        a((HttpURLConnection)localObject1, paramRequest);
        if (((HttpURLConnection)localObject1).getResponseCode() != -1) {
          break;
        }
        throw new IOException("Could not retrieve response code from HttpUrlConnection.");
      }
      String str = (String)localIterator.next();
      ((HttpURLConnection)localObject1).addRequestProperty(str, (String)((HashMap)localObject2).get(str));
    }
    paramRequest = new BasicHttpResponse(new BasicStatusLine(new ProtocolVersion("HTTP", 1, 1), ((HttpURLConnection)localObject1).getResponseCode(), ((HttpURLConnection)localObject1).getResponseMessage()));
    paramRequest.setEntity(a((HttpURLConnection)localObject1));
    localObject1 = ((HttpURLConnection)localObject1).getHeaderFields().entrySet().iterator();
    for (;;)
    {
      if (!((Iterator)localObject1).hasNext()) {
        return paramRequest;
      }
      localObject2 = (Map.Entry)((Iterator)localObject1).next();
      if (((Map.Entry)localObject2).getKey() != null) {
        paramRequest.addHeader(new BasicHeader((String)((Map.Entry)localObject2).getKey(), (String)((List)((Map.Entry)localObject2).getValue()).get(0)));
      }
    }
  }
}
