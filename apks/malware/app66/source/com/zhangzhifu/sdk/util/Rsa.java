package com.zhangzhifu.sdk.util;

import android.util.Log;
import java.security.KeyFactory;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

public class Rsa
{
  public static final String SIGN_ALGORITHMS = "SHA1WithRSA";
  
  public Rsa() {}
  
  public static boolean doCheck(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString3 = KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(Base64.decode(paramString3)));
      Signature localSignature = Signature.getInstance("SHA1WithRSA");
      localSignature.initVerify(paramString3);
      localSignature.update(paramString1.getBytes("utf-8"));
      boolean bool = localSignature.verify(Base64.decode(paramString2));
      return bool;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
    }
    return false;
  }
  
  public static String sign(String paramString1, String paramString2)
  {
    try
    {
      paramString2 = new PKCS8EncodedKeySpec(Base64.decode(paramString2));
      paramString2 = KeyFactory.getInstance("RSA", "BC").generatePrivate(paramString2);
      Signature localSignature = Signature.getInstance("SHA1WithRSA");
      localSignature.initSign(paramString2);
      localSignature.update(paramString1.getBytes("utf-8"));
      paramString1 = Base64.encode(localSignature.sign());
      return paramString1;
    }
    catch (Exception paramString1)
    {
      Log.e("", paramString1.getMessage());
      paramString1.printStackTrace();
    }
    return null;
  }
}
