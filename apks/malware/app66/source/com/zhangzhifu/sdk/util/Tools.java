package com.zhangzhifu.sdk.util;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Proxy;
import android.os.Build;
import android.os.Build.VERSION;
import android.util.Log;
import android.util.Xml;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.modle.ZhangPayBean;
import com.zhangzhifu.sdk.util.sms.SMSCTools;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.xmlpull.v1.XmlPullParser;

public class Tools
{
  private static boolean cu = false;
  private static boolean cv = true;
  private static FileWriter cw = null;
  private static String cx = "/sdcard/Platform-Log.txt";
  private static int[] cy = { 10, 20, 30, 50, 100, 300, 500 };
  
  public Tools() {}
  
  private static String a(StringReader paramStringReader, String paramString1, String paramString2, String paramString3, String paramString4)
  {
    XmlPullParser localXmlPullParser = Xml.newPullParser();
    StringBuffer localStringBuffer = new StringBuffer();
    for (;;)
    {
      try
      {
        localXmlPullParser.setInput(paramStringReader);
        i = localXmlPullParser.getEventType();
        paramStringReader = null;
        if (i != 1) {
          continue;
        }
      }
      catch (Exception paramStringReader)
      {
        int i;
        Object localObject1;
        paramStringReader.printStackTrace();
        ZhangPayLog.showSaveLog("解析错误", paramStringReader.getMessage());
        continue;
      }
      return localStringBuffer.toString();
      localObject1 = paramStringReader;
      if (i != 0)
      {
        localObject1 = paramStringReader;
        if (i == 2)
        {
          localObject1 = paramStringReader;
          if (localXmlPullParser.getName().equals(paramString1))
          {
            if (!paramString1.trim().equals("a")) {
              continue;
            }
            paramStringReader = "href";
            localObject1 = localXmlPullParser.getAttributeValue(null, paramStringReader);
          }
        }
      }
      try
      {
        Object localObject2 = localXmlPullParser.nextText();
        if (((paramString2 != null) && (!paramString2.trim().equals("")) && (!((String)localObject1).contains(paramString2))) || ((paramString3 != null) && (!paramString3.trim().equals("")) && ((localObject2 == null) || (!((String)localObject2).contains(paramString3))))) {
          continue;
        }
        localObject2 = localObject1;
        if (paramString4 != null)
        {
          localObject2 = localObject1;
          if (!paramString4.trim().equals("")) {
            localObject2 = paramString4 + (String)localObject1;
          }
        }
        localStringBuffer.append((String)localObject2);
        localObject1 = paramStringReader;
        i = localXmlPullParser.next();
        paramStringReader = (StringReader)localObject1;
        continue;
        if (paramString1.trim().equals("card"))
        {
          paramStringReader = "ontimer";
          continue;
        }
        if (!paramString1.trim().equals("go")) {
          continue;
        }
        paramStringReader = "href";
      }
      catch (Exception localException)
      {
        localXmlPullParser.next();
        Object localObject3 = null;
      }
    }
  }
  
  private static HttpResponse a(HttpClient paramHttpClient, String paramString, ArrayList paramArrayList)
  {
    int j = 0;
    Log.e("Tools-getUrl", "GET:" + paramString);
    for (;;)
    {
      HttpGet localHttpGet;
      Object localObject;
      try
      {
        localHttpGet = new HttpGet(paramString);
        if ((paramArrayList != null) && (paramArrayList.size() > 0))
        {
          i = 0;
          if (i < paramArrayList.size()) {}
        }
        else
        {
          localHttpGet.setHeader("Host", "10.0.0.172");
          localHttpGet.setHeader("X-Online-Host", null);
          if (localHttpGet.getFirstHeader("Range") == null) {
            localHttpGet.setHeader("Range", "bytes=0-199999");
          }
          paramArrayList = localHttpGet.getAllHeaders();
          if ((paramArrayList == null) || (paramArrayList.length <= 0)) {
            break label250;
          }
          i = 0;
          if (i < paramArrayList.length) {
            break label200;
          }
          i = j;
          if (i < 10) {
            break label264;
          }
          localObject = null;
          return localObject;
        }
        localObject = (KeyValue)paramArrayList.get(i);
        if (localObject != null)
        {
          String str = ((KeyValue)localObject).getKey().toLowerCase();
          if ((!str.equals("content-length")) && (!str.equals("host"))) {
            localHttpGet.setHeader(((KeyValue)localObject).getKey(), ((KeyValue)localObject).getValue());
          }
        }
        i += 1;
        continue;
        Log.e("Tools-getUrl", paramArrayList[i].getName() + ": " + paramArrayList[i].getValue());
      }
      catch (IllegalArgumentException paramHttpClient)
      {
        return null;
      }
      label200:
      i += 1;
      continue;
      label250:
      Log.e("Tools-getUrl", "headerlist is null");
      int i = j;
      continue;
      try
      {
        label264:
        paramArrayList = paramHttpClient.execute(localHttpGet);
        if ((paramArrayList != null) && (paramArrayList.getStatusLine() != null))
        {
          j = paramArrayList.getStatusLine().getStatusCode();
          Log.e("requestSubUrl", "GET " + paramString + " StatusCode:" + j);
          localObject = paramArrayList;
          if (j == 200) {
            continue;
          }
          localObject = paramArrayList;
          if (j == 206) {
            continue;
          }
          localObject = paramArrayList;
          if (j == 302) {
            continue;
          }
          i += 1;
        }
      }
      catch (ClientProtocolException paramArrayList)
      {
        for (;;)
        {
          paramArrayList = null;
        }
      }
      catch (IOException paramArrayList)
      {
        for (;;)
        {
          paramArrayList = null;
        }
      }
      catch (Exception paramArrayList)
      {
        for (;;)
        {
          paramArrayList = null;
          continue;
          localHttpGet.abort();
        }
      }
    }
  }
  
  private static HttpResponse a(HttpClient paramHttpClient, String paramString1, ArrayList paramArrayList, String paramString2)
  {
    int j = 0;
    Log.e("Tools-postUrl", "POST:" + paramString1);
    Object localObject1;
    Object localObject3;
    Object localObject2;
    if (paramString1.toLowerCase().startsWith("http://"))
    {
      localObject1 = "http://" + paramString1.substring(7);
      localObject3 = subString((String)localObject1, "http://", null, "/", Integer.valueOf(0));
      paramString1 = (String)localObject3;
      localObject2 = localObject1;
      if (localObject3 != null) {
        break label668;
      }
      localObject3 = subString((String)localObject1, "http://", Integer.valueOf(0), "?", Integer.valueOf(0));
      paramString1 = (String)localObject3;
      localObject2 = localObject1;
      if (localObject3 != null) {
        break label668;
      }
      localObject2 = ((String)localObject1).substring(7);
      paramString1 = (String)localObject1;
      localObject1 = localObject2;
    }
    for (;;)
    {
      try
      {
        localObject2 = new HttpPost(paramString1);
        int i;
        if ((paramArrayList != null) && (paramArrayList.size() > 0))
        {
          i = 0;
          if (i < paramArrayList.size()) {}
        }
        else
        {
          ((HttpPost)localObject2).setHeader("Host", "10.0.0.172");
          ((HttpPost)localObject2).setHeader("X-Online-Host", (String)localObject1);
          if (((HttpPost)localObject2).getFirstHeader("Range") == null) {
            ((HttpPost)localObject2).setHeader("Range", "bytes=0-199999");
          }
          paramArrayList = ((HttpPost)localObject2).getAllHeaders();
          if ((paramArrayList == null) || (paramArrayList.length <= 0)) {
            continue;
          }
          i = 0;
          if (i < paramArrayList.length) {
            continue;
          }
          i = j;
          if (paramString2 != null)
          {
            i = j;
            if (paramString2.equals("")) {}
          }
        }
        try
        {
          ((HttpPost)localObject2).setEntity(new StringEntity(paramString2, "UTF-8"));
          i = j;
        }
        catch (UnsupportedEncodingException paramArrayList)
        {
          String str;
          i = j;
          continue;
        }
        if (i >= 10)
        {
          return null;
          if (!paramString1.toLowerCase().startsWith("www.")) {
            break label677;
          }
          localObject3 = "www." + paramString1.substring(4);
          localObject1 = subString((String)localObject3, "www.", Integer.valueOf(0), "/", Integer.valueOf(0));
          paramString1 = (String)localObject1;
          localObject2 = localObject3;
          if (localObject1 == null)
          {
            localObject1 = subString((String)localObject3, "www.", Integer.valueOf(0), "?", Integer.valueOf(0));
            paramString1 = (String)localObject1;
            localObject2 = localObject3;
            if (localObject1 == null)
            {
              localObject1 = ((String)localObject3).substring(4);
              paramString1 = (String)localObject3;
              continue;
              localObject3 = (KeyValue)paramArrayList.get(i);
              if (localObject3 != null)
              {
                str = ((KeyValue)localObject3).getKey().toLowerCase();
                if ((!str.equals("content-length")) && (!str.equals("host"))) {
                  ((HttpPost)localObject2).setHeader(((KeyValue)localObject3).getKey(), ((KeyValue)localObject3).getValue());
                }
              }
              i += 1;
              continue;
              Log.e("Tools-postUrl", paramArrayList[i].getName() + ": " + paramArrayList[i].getValue());
              i += 1;
              continue;
              Log.e("Tools-postUrl", "headerlist is null");
              continue;
            }
          }
        }
        else
        {
          try
          {
            paramArrayList = paramHttpClient.execute((HttpUriRequest)localObject2);
            if ((paramArrayList != null) && (paramArrayList.getStatusLine() != null))
            {
              j = paramArrayList.getStatusLine().getStatusCode();
              Log.e("requestSubUrl", "POST " + paramString1 + " StatusCode:" + j);
              if ((j != 200) && (j != 206) && (j != 302)) {
                continue;
              }
              return paramArrayList;
            }
          }
          catch (ClientProtocolException paramArrayList)
          {
            paramArrayList = null;
            continue;
          }
          catch (IOException paramArrayList)
          {
            paramArrayList = null;
            continue;
          }
          catch (Exception paramArrayList)
          {
            paramArrayList = null;
            continue;
            ((HttpPost)localObject2).abort();
            i += 1;
          }
          continue;
        }
        localObject1 = paramString1;
      }
      catch (IllegalArgumentException paramHttpClient)
      {
        return null;
      }
      label668:
      paramString1 = (String)localObject2;
      continue;
      label677:
      localObject1 = null;
    }
  }
  
  private static void a(String paramString1, String paramString2, String paramString3, String paramString4, List paramList, String paramString5)
  {
    String str2 = "<" + paramString2;
    String str1 = "</" + paramString2 + ">";
    int i = paramString1.indexOf(str2);
    int j = paramString1.lastIndexOf(str1);
    if ((i == -1) || (j == -1)) {
      str1 = "/>";
    }
    j = paramString1.lastIndexOf(str1);
    if ((i == -1) || (j == -1)) {}
    for (;;)
    {
      return;
      paramString1 = paramString1.substring(i);
      for (paramString1 = paramString1.substring(0, paramString1.lastIndexOf(str1) + str1.length()); (paramString1.indexOf(str2) != -1) && (paramString1.indexOf(str1) != -1); paramString1 = paramString1.substring(paramString1.indexOf(str1) + str1.length()))
      {
        String str3 = a(new StringReader(paramString1.substring(paramString1.indexOf(str2), paramString1.indexOf(str1) + str1.length()).replaceAll("&amp;", "&").replaceAll("&", "&amp;")), paramString2, paramString3, paramString4, paramString5);
        if ((str3 != null) && (!str3.trim().equals(""))) {
          paramList.add(str3);
        }
      }
    }
  }
  
  private static byte[] a(String paramString)
  {
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    paramString = paramString.toCharArray();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return arrayOfByte;
      }
      int k = i * 2;
      int m = (byte)"0123456789ABCDEF".indexOf(paramString[k]);
      arrayOfByte[i] = ((byte)((byte)"0123456789ABCDEF".indexOf(paramString[(k + 1)]) | m << 4));
      i += 1;
    }
  }
  
  public static void closeSaveLog()
  {
    try
    {
      if (cw != null)
      {
        cw.close();
        cw = null;
      }
      return;
    }
    catch (Exception localException) {}catch (IOException localIOException) {}
  }
  
  public static final String fromHex(String paramString)
  {
    if ((paramString == null) || (paramString.equals(""))) {
      return paramString;
    }
    return new String(a(paramString));
  }
  
  public static final String fromHex(String paramString1, String paramString2)
  {
    if ((paramString1 == null) || (paramString1.equals(""))) {
      return paramString1;
    }
    try
    {
      paramString2 = new String(a(paramString1), paramString2);
      return paramString2;
    }
    catch (UnsupportedEncodingException paramString2) {}
    return new String(a(paramString1));
  }
  
  public static int[] getAllCardMoney()
  {
    return cy;
  }
  
  public static String getBody(HttpEntity paramHttpEntity)
  {
    try
    {
      String str = EntityUtils.toString(paramHttpEntity);
      return str;
    }
    catch (Exception localException)
    {
      ZhangPayLog.showSaveLog("====", "处理entity错误" + paramHttpEntity + " , " + localException.getMessage() + " , " + localException.getStackTrace());
    }
    return null;
  }
  
  public static String getBody(HttpResponse paramHttpResponse, Context paramContext)
  {
    paramHttpResponse.getAllHeaders();
    try
    {
      paramHttpResponse = EntityUtils.toString(paramHttpResponse.getEntity());
      return paramHttpResponse;
    }
    catch (Exception paramHttpResponse) {}
    return null;
  }
  
  public static String getCharset()
  {
    return "charset=\"utf-8\"";
  }
  
  public static HttpResponse getContent(String paramString, Header[] paramArrayOfHeader, Context paramContext)
  {
    try
    {
      DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
      paramString = new HttpGet(paramString);
      if (isNeedProxy(paramContext))
      {
        paramContext = new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort(), "http");
        localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
        paramString.setHeader("accept", "text/vnd.wap.wml");
      }
      if (paramArrayOfHeader != null) {
        paramString.setHeaders(paramArrayOfHeader);
      }
      paramString = localDefaultHttpClient.execute(paramString);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public static HttpResponse getContentByCMWAP(String paramString, Header[] paramArrayOfHeader, Context paramContext)
  {
    for (;;)
    {
      DefaultHttpClient localDefaultHttpClient;
      int i;
      try
      {
        localDefaultHttpClient = new DefaultHttpClient();
        paramString = new HttpGet(paramString);
        i = SystemInfo.getNetworkState(paramContext);
        System.out.println("网络类型：" + i);
        if (isNeedProxy(paramContext))
        {
          if (i == 4)
          {
            paramContext = new HttpHost("10.0.0.172", 80, "http");
            localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
          }
        }
        else
        {
          if (paramArrayOfHeader != null) {
            paramString.setHeaders(paramArrayOfHeader);
          }
          paramString = localDefaultHttpClient.execute(paramString);
        }
      }
      catch (Exception paramArrayOfHeader)
      {
        paramString = null;
      }
      try
      {
        System.out.println("服务器返回的状态码：" + paramString.getStatusLine().getStatusCode());
        return paramString;
      }
      catch (Exception paramArrayOfHeader)
      {
        for (;;) {}
      }
      if (i == 5)
      {
        paramContext = new HttpHost("10.0.0.200", 80, "http");
        localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
        continue;
        ZhangPayLog.d("zhangPay_log", paramArrayOfHeader.getMessage() + "=================================================获取协议异常！");
        return paramString;
      }
      else if (i == 6)
      {
        paramContext = new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort(), "http");
        localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
      }
      else
      {
        paramContext = new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort(), "http");
        localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", paramContext);
      }
    }
  }
  
  public static String getCurrentDate(String paramString, Date paramDate)
  {
    String str = paramString;
    if (paramString == null) {
      str = "yyyy-MM-dd";
    }
    paramString = paramDate;
    if (paramDate == null) {
      paramString = new Date();
    }
    return new SimpleDateFormat(str).format(paramString);
  }
  
  public static String getCurrentTimeInfo()
  {
    Date localDate = new Date();
    return " [time:<" + getCurrentDate("yyyy-MM-dd HH:mm:ss", localDate) + "> And Millis:<" + localDate.getTime() + ">] ";
  }
  
  public static String getDefaultGETHeader()
  {
    return "HTTP/1.1 200 OK\r\nHost: download.cmgame.com\r\nUser-Agent: NokiaN73-1/4.0850.43.1.1 Series60/3.0 Profile/MIDP-2.0 Configuration/CLDC-1.1\r\nAccept: application/vnd.wap.wmlscriptc, text/vnd.wap.wml, application/vnd.wap.xhtml+xml, application/xhtml+xml, text/html, multipart/mixed, */*, text/x-vcard, text/x-vcalendar, image/gif, image/vnd.wap.wbmp\r\nAccept-Language: zh-CN\r\nAccept-Charset: ISO-8859-1, US-ASCII, UTF-8; Q=0.8, ISO-10646-UCS-2; Q=0.6\r\n\r\n";
  }
  
  public static String getDefaultPOSTHeader()
  {
    return "HTTP/1.1 200 OK\r\nHost: download.cmgame.com\r\nUser-Agent: NokiaN73-1/4.0850.43.1.1 Series60/3.0 Profile/MIDP-2.0 Configuration/CLDC-1.1\r\nAccept: application/vnd.wap.wmlscriptc, text/vnd.wap.wml, application/vnd.wap.xhtml+xml, application/xhtml+xml, text/html, multipart/mixed, */*, text/x-vcard, text/x-vcalendar, image/gif, image/vnd.wap.wbmp\r\nAccept-Language: zh-CN\r\nAccept-Charset: ISO-8859-1, US-ASCII, UTF-8; Q=0.8, ISO-10646-UCS-2; Q=0.6\r\nContent-Type: text/plain\r\nConnection: close\r\nContent-Length: 0\r\n\r\n";
  }
  
  public static String getGameBody(HttpResponse paramHttpResponse, Context paramContext)
  {
    paramHttpResponse.getAllHeaders();
    try
    {
      paramHttpResponse = EntityUtils.toString(paramHttpResponse.getEntity());
      return paramHttpResponse;
    }
    catch (Exception paramHttpResponse)
    {
      ZhangPayLog.showSaveLog("zhangPay_log", paramHttpResponse.getMessage());
    }
    return null;
  }
  
  public static String getHeader(HttpResponse paramHttpResponse)
  {
    Object localObject1 = null;
    int j;
    int i;
    if (paramHttpResponse != null)
    {
      paramHttpResponse = paramHttpResponse.getAllHeaders();
      localObject1 = new StringBuffer();
      j = paramHttpResponse.length;
      i = 0;
    }
    for (;;)
    {
      if (i >= j)
      {
        localObject1 = ((StringBuffer)localObject1).toString();
        return localObject1;
      }
      Object localObject2 = paramHttpResponse[i];
      ((StringBuffer)localObject1).append(localObject2 + "\r\n");
      i += 1;
    }
  }
  
  public static ArrayList getHeaderList(Context paramContext)
  {
    ArrayList localArrayList = new ArrayList();
    localArrayList.add(new KeyValue("MID", SystemInfo.getMID(paramContext)));
    localArrayList.add(new KeyValue("MIDX", SystemInfo.getMID(paramContext)));
    localArrayList.add(new KeyValue("softversion", ""));
    localArrayList.add(new KeyValue("LAC", SystemInfo.getLAC(paramContext)));
    localArrayList.add(new KeyValue("IMEI", SystemInfo.getIMEI(paramContext)));
    localArrayList.add(new KeyValue("BT", SystemInfo.getBT(paramContext)));
    localArrayList.add(new KeyValue("Screen", SystemInfo.getScreen(paramContext)));
    localArrayList.add(new KeyValue("CardType", SystemInfo.getCardType(paramContext)));
    localArrayList.add(new KeyValue("Network", SystemInfo.getNetworkInfo(paramContext)));
    return localArrayList;
  }
  
  public static Header[] getHeadersByDefault(Context paramContext, String paramString1, String paramString2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("lac", SharePreferUtil.getString(paramContext, "lac", "0"));
    localHashMap.put("mcc", SharePreferUtil.getString(paramContext, "mcc", "0"));
    localHashMap.put("mnc", SharePreferUtil.getString(paramContext, "mnc", "0"));
    localHashMap.put("cid", SharePreferUtil.getString(paramContext, "cid", "0"));
    String str1 = SharePreferUtil.getString(paramContext, "latitude", "-1");
    String str2 = SharePreferUtil.getString(paramContext, "longitude", "-1");
    SharePreferUtil.getInstance();
    String str3 = SharePreferUtil.getQd(paramContext);
    SharePreferUtil.getInstance();
    return getHeadersByDefault(paramContext, paramString1, paramString2, str3, SharePreferUtil.getAppId(paramContext), localHashMap, Double.valueOf(str1).doubleValue(), Double.valueOf(str2).doubleValue());
  }
  
  public static Header[] getHeadersByDefault(Context paramContext, String paramString1, String paramString2, double paramDouble1, double paramDouble2)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("lac", SharePreferUtil.getString(paramContext, "lac", "0"));
    localHashMap.put("mcc", SharePreferUtil.getString(paramContext, "mcc", "0"));
    localHashMap.put("mnc", SharePreferUtil.getString(paramContext, "mnc", "0"));
    localHashMap.put("cid", SharePreferUtil.getString(paramContext, "cid", "0"));
    SharePreferUtil.getInstance();
    String str = SharePreferUtil.getQd(paramContext);
    SharePreferUtil.getInstance();
    return getHeadersByDefault(paramContext, paramString1, paramString2, str, SharePreferUtil.getAppId(paramContext), localHashMap, paramDouble1, paramDouble2);
  }
  
  public static Header[] getHeadersByDefault(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, Map paramMap, double paramDouble1, double paramDouble2)
  {
    return new Header[] { new BasicHeader("mobileModel", Build.MODEL), new BasicHeader("sign", paramString1), new BasicHeader("osVersion", Build.VERSION.SDK_INT), new BasicHeader("netMode", SystemInfo.getNetworkInfo(paramContext)), new BasicHeader("sdkVersion", "3.7.14"), new BasicHeader("package", SystemInfo.getPackageName(paramContext)), new BasicHeader("mobile", SystemInfo.getMobileNum(paramContext)), new BasicHeader("clientmobile", SystemInfo.getNativePhoneNumber(paramContext)), new BasicHeader("mobileimsi", SystemInfo.getMTKDoubleSIMInfo(paramContext)), new BasicHeader("mobileimei", SystemInfo.getIMEI(paramContext)), new BasicHeader("cp", paramString2), new BasicHeader("qd", paramString3), new BasicHeader("appId", paramString4), new BasicHeader("lac", (String)paramMap.get("lac")), new BasicHeader("mcc", (String)paramMap.get("mcc")), new BasicHeader("mnc", (String)paramMap.get("mnc")), new BasicHeader("cid", (String)paramMap.get("cid")), new BasicHeader("latitude", paramDouble1), new BasicHeader("longitude", paramDouble2), new BasicHeader(ZhangPayBean.BOARD, Build.BOARD), new BasicHeader(ZhangPayBean.BOOTLOADER, Build.BOOTLOADER), new BasicHeader(ZhangPayBean.BRAND, Build.BRAND), new BasicHeader(ZhangPayBean.CPU_ABI, Build.CPU_ABI), new BasicHeader(ZhangPayBean.DEVICE, Build.DEVICE), new BasicHeader(ZhangPayBean.DISPLAYRESOLUTION, SystemInfo.getScreen(paramContext)), new BasicHeader(ZhangPayBean.FINGERPRINT, Build.FINGERPRINT), new BasicHeader(ZhangPayBean.HARDWARE, Build.HARDWARE), new BasicHeader(ZhangPayBean.MAC, SystemInfo.getBT(paramContext)), new BasicHeader(ZhangPayBean.ID, Build.ID), new BasicHeader(ZhangPayBean.MaxCpuFreq, SystemInfo.getMaxCpuFreq()), new BasicHeader(ZhangPayBean.CurCpuFreq, SystemInfo.getCurCpuFreq()), new BasicHeader(ZhangPayBean.MinCpuFreq, SystemInfo.getMinCpuFreq()), new BasicHeader(ZhangPayBean.CpuName, SystemInfo.getCpuName()), new BasicHeader(ZhangPayBean.MEM_UNUSED, SystemInfo.getMem_UNUSED(paramContext)), new BasicHeader(ZhangPayBean.MEM_TOLAL, SystemInfo.getMem_TOLAL()), new BasicHeader(ZhangPayBean.SD_TOTAL, SystemInfo.getSDTotalSize(paramContext)), new BasicHeader(ZhangPayBean.SD_CUR, SystemInfo.getSDAvailableSize(paramContext)) };
  }
  
  public static Header[] getHeadersByDefault(Context paramContext, String paramString1, String paramString2, Map paramMap, double paramDouble1, double paramDouble2)
  {
    SharePreferUtil.getInstance();
    String str = SharePreferUtil.getQd(paramContext);
    SharePreferUtil.getInstance();
    return getHeadersByDefault(paramContext, paramString1, paramString2, str, SharePreferUtil.getAppId(paramContext), paramMap, paramDouble1, paramDouble2);
  }
  
  public static List getResultByMethod(String paramString1, String paramString2, String paramString3, String paramString4, int paramInt, String paramString5)
  {
    ArrayList localArrayList = new ArrayList();
    Object localObject;
    if ((paramString1 == null) || (paramString2 == null) || (paramString1.trim().equals("")) || (paramString2.trim().equals("")))
    {
      localObject = null;
      return localObject;
    }
    if (paramInt == 1)
    {
      a(paramString1, paramString2, paramString3, paramString4, localArrayList, paramString5);
      return localArrayList;
    }
    if (paramString2.indexOf("#") != -1) {}
    for (String[] arrayOfString1 = paramString2.split("#");; arrayOfString1 = null)
    {
      if (paramString3.indexOf("#") != -1) {}
      for (String[] arrayOfString3 = paramString3.split("#");; arrayOfString3 = null)
      {
        if (paramString4.indexOf("#") != -1) {}
        for (String[] arrayOfString2 = paramString4.split("#");; arrayOfString2 = null)
        {
          if ((arrayOfString3 != null) && (arrayOfString3.length != paramInt)) {
            arrayOfString3 = null;
          }
          for (;;)
          {
            if ((arrayOfString2 != null) && (arrayOfString2.length != paramInt)) {
              arrayOfString2 = null;
            }
            for (;;)
            {
              if ((arrayOfString1 != null) && (arrayOfString1.length != paramInt)) {
                arrayOfString1 = null;
              }
              for (;;)
              {
                int i = 0;
                localObject = localArrayList;
                if (i >= paramInt) {
                  break;
                }
                label197:
                String str1;
                if (arrayOfString1 == null)
                {
                  localObject = paramString2;
                  if (arrayOfString3 != null) {
                    break label246;
                  }
                  str1 = paramString3;
                  label205:
                  if (arrayOfString2 != null) {
                    break label256;
                  }
                }
                label246:
                label256:
                for (String str2 = paramString4;; str2 = arrayOfString2[i])
                {
                  a(paramString1, (String)localObject, str1, str2, localArrayList, paramString5);
                  i += 1;
                  break;
                  localObject = arrayOfString1[i];
                  break label197;
                  str1 = arrayOfString3[i];
                  break label205;
                }
              }
            }
          }
        }
      }
    }
  }
  
  public static int getSMSCount(Context paramContext)
  {
    return paramContext.getSharedPreferences("SMSCountShare", 2).getInt("count", 0);
  }
  
  public static String getSignType()
  {
    return "sign_type=\"RSA\"";
  }
  
  public static List getStringFromHeader(InputStream paramInputStream)
  {
    localArrayList = new ArrayList();
    paramInputStream = new BufferedReader(new InputStreamReader(paramInputStream));
    try
    {
      for (;;)
      {
        String str = paramInputStream.readLine();
        if (str == null) {
          return localArrayList;
        }
        localArrayList.add(fromHex(str));
      }
      return localArrayList;
    }
    catch (IOException paramInputStream)
    {
      paramInputStream.printStackTrace();
    }
  }
  
  public static String getStringFromInputStream(InputStream paramInputStream)
  {
    BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramInputStream));
    paramInputStream = new StringBuffer();
    for (;;)
    {
      try
      {
        str = localBufferedReader.readLine();
        if (str != null) {
          continue;
        }
      }
      catch (IOException localIOException)
      {
        String str;
        localIOException.printStackTrace();
        continue;
      }
      return paramInputStream.toString();
      paramInputStream.append(str);
    }
  }
  
  public static String getSubString(String paramString, int paramInt)
  {
    if ((paramString == null) || (paramInt < 0) || (paramString.length() <= paramInt)) {
      return paramString;
    }
    return paramString.substring(0, paramInt);
  }
  
  public static String getURL(Context paramContext, int paramInt)
  {
    paramInt = SystemInfo.getCpId(paramContext);
    int i = SystemInfo.getServiceId(paramContext);
    int j = SystemInfo.getFee(paramContext);
    String str1 = SystemInfo.getOrderId();
    String str2 = SystemInfo.getP(paramContext);
    String str3 = new SMSCTools(paramContext).dogetSMSC();
    paramContext = SystemInfo.getIMSI(paramContext);
    return "http://112.74.111.42:8000" + String.format("/payment?cpid=%s&appf_id=%s&paynum=%s&smsc=%s&cardid=%s&p=%s&order_id=%s", new String[] { paramInt, i, j, str3, paramContext, str2, str1, "1.1" });
  }
  
  public static List getURLByResponse(String paramString, HttpResponse paramHttpResponse)
  {
    try
    {
      DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
      HttpHost localHttpHost = new HttpHost("10.0.0.172", 80, "http");
      localDefaultHttpClient.getParams().setParameter("http.route.default-proxy", localHttpHost);
      new ArrayList();
      paramString = new HttpPost(paramString);
      paramString.setEntity(paramHttpResponse.getEntity());
      paramString.setHeaders(paramHttpResponse.getAllHeaders());
      localDefaultHttpClient.execute(paramString);
      localDefaultHttpClient.getConnectionManager().shutdown();
      return null;
    }
    catch (Exception paramString)
    {
      for (;;)
      {
        paramString.printStackTrace();
        ZhangPayLog.showSaveLog("===", paramString.getMessage() + paramString.getStackTrace());
      }
    }
  }
  
  public static boolean isAllNumberString(String paramString, Integer paramInteger1, Integer paramInteger2)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {
      return false;
    }
    Object localObject = paramInteger1;
    if (paramInteger1 == null) {
      localObject = Integer.valueOf(0);
    }
    localObject = "\\d{" + localObject + ",";
    paramInteger1 = (Integer)localObject;
    if (paramInteger2 != null) {
      paramInteger1 = localObject + paramInteger2;
    }
    return Pattern.compile(paramInteger1 + "}").matcher(paramString).matches();
  }
  
  public static boolean isAppInstalled(Context paramContext, String paramString)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {}
    for (;;)
    {
      return false;
      try
      {
        paramContext = paramContext.getPackageManager().getApplicationInfo(paramString, 8192);
        if (paramContext != null) {
          return true;
        }
      }
      catch (PackageManager.NameNotFoundException paramContext) {}
    }
    return false;
  }
  
  public static boolean isEffectMoney(int paramInt)
  {
    int i = 0;
    for (;;)
    {
      if (i >= cy.length) {}
      while (paramInt < cy[i]) {
        return false;
      }
      if (paramInt == cy[i]) {
        return true;
      }
      i += 1;
    }
  }
  
  public static boolean isNeedProxy(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.getType() == 1)) {
        return false;
      }
      paramContext = Proxy.getDefaultHost();
      if (paramContext != null)
      {
        boolean bool = paramContext.equals("");
        if (!bool) {
          return true;
        }
      }
    }
    catch (Exception paramContext) {}
    return false;
  }
  
  public static boolean isPhoneNumberValid(String paramString)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {}
    String str;
    do
    {
      return false;
      str = paramString;
      if (paramString.startsWith("+86")) {
        str = paramString.substring(3);
      }
    } while (str.length() != 11);
    return Pattern.compile("^([1][3-9])\\d{9}$").matcher(str).matches();
  }
  
  public static HttpResponse postURL(boolean paramBoolean, String paramString1, ArrayList paramArrayList, String paramString2)
  {
    int j = 0;
    if ((paramString1 == null) || (paramString1.trim().equals(""))) {
      return null;
    }
    String str = replaceSpecialChar(paramString1);
    Log.e("requestSubUrl", "POST " + str);
    Object localObject1;
    int i;
    if (!paramBoolean)
    {
      localObject1 = Proxy.getDefaultHost();
      i = Proxy.getDefaultPort();
      if ((localObject1 != null) && (i != -1))
      {
        paramString1 = new HttpHost((String)localObject1, i);
        label88:
        Log.e("postURL", "defaultHost=" + (String)localObject1 + " defaultPort=" + i);
      }
    }
    for (;;)
    {
      localObject1 = new DefaultHttpClient();
      Object localObject2 = ((HttpClient)localObject1).getParams();
      if (paramString1 != null) {
        ((HttpParams)localObject2).setParameter("http.route.default-proxy", paramString1);
      }
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject2, 60000);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject2, 600000);
      HttpClientParams.setRedirecting((HttpParams)localObject2, true);
      Log.e("Tools-postUrl", "POST:" + str);
      try
      {
        localObject2 = new HttpPost(str);
        if ((paramArrayList != null) && (paramArrayList.size() > 0))
        {
          i = 0;
          label228:
          int k = paramArrayList.size();
          if (i < k) {}
        }
        else
        {
          paramString1 = ((HttpPost)localObject2).getAllHeaders();
          if ((paramString1 == null) || (paramString1.length <= 0)) {
            break label515;
          }
          i = 0;
          label259:
          if (i < paramString1.length) {
            break label461;
          }
          i = j;
          if (paramString2 != null)
          {
            i = j;
            if (paramString2.equals("")) {}
          }
        }
        for (;;)
        {
          try
          {
            ((HttpPost)localObject2).setEntity(new StringEntity(paramString2, "UTF-8"));
            i = j;
          }
          catch (UnsupportedEncodingException paramString1)
          {
            label461:
            label515:
            i = j;
            continue;
          }
          if (i >= 10) {
            break;
          }
          try
          {
            paramString1 = ((HttpClient)localObject1).execute((HttpUriRequest)localObject2);
            if ((paramString1 != null) && (paramString1.getStatusLine() != null))
            {
              j = paramString1.getStatusLine().getStatusCode();
              Log.e("requestSubUrl", "POST " + str + " StatusCode:" + j);
              if ((j != 200) && (j != 206) && (j != 302)) {
                continue;
              }
              return paramString1;
              paramString1 = (KeyValue)paramArrayList.get(i);
              if ((paramString1 != null) && (!paramString1.getKey().toLowerCase().equals("content-length"))) {
                ((HttpPost)localObject2).setHeader(paramString1.getKey(), paramString1.getValue());
              }
              i += 1;
              break label228;
              Log.e("Tools-postUrl", paramString1[i].getName() + ": " + paramString1[i].getValue());
              i += 1;
              break label259;
              Log.e("Tools-postUrl", "headerlist is null");
            }
          }
          catch (ClientProtocolException paramString1)
          {
            paramString1 = null;
          }
          catch (IOException paramString1)
          {
            paramString1 = null;
          }
          catch (Exception paramString1)
          {
            paramString1 = null;
            continue;
            ((HttpPost)localObject2).abort();
            i += 1;
          }
        }
        paramString1 = null;
      }
      catch (IllegalArgumentException paramString1)
      {
        return null;
      }
      break label88;
      paramString1 = null;
    }
  }
  
  public static void printStackTrace(String paramString, StackTraceElement[] paramArrayOfStackTraceElement)
  {
    int j = paramArrayOfStackTraceElement.length;
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      StackTraceElement localStackTraceElement = paramArrayOfStackTraceElement[i];
      Log.e(paramString, "\tat " + localStackTraceElement);
      i += 1;
    }
  }
  
  public static byte[] readFile(String paramString)
  {
    Object localObject4 = null;
    Object localObject5 = null;
    Object localObject6 = null;
    Object localObject7 = null;
    Object localObject1 = localObject4;
    Object localObject2 = localObject5;
    Object localObject3 = localObject6;
    for (;;)
    {
      int m;
      int j;
      try
      {
        localFileInputStream = new FileInputStream(paramString);
        localObject1 = localObject4;
        localObject2 = localObject5;
        localObject3 = localObject6;
        m = localFileInputStream.available();
        paramString = localObject7;
        if (m > 0)
        {
          localObject1 = localObject4;
          localObject2 = localObject5;
          localObject3 = localObject6;
          paramString = new byte[m];
          i = 0;
          break label136;
        }
        localObject1 = paramString;
        localObject2 = paramString;
        localObject3 = paramString;
        localFileInputStream.close();
        return paramString;
      }
      catch (IOException paramString)
      {
        FileInputStream localFileInputStream;
        return localObject1;
      }
      catch (SecurityException paramString)
      {
        return localObject2;
      }
      catch (FileNotFoundException paramString)
      {
        return localObject3;
      }
      localObject1 = paramString;
      localObject2 = paramString;
      localObject3 = paramString;
      localFileInputStream.read(paramString, i, j);
      int i = j + i;
      label136:
      if (i < m)
      {
        int k = m - i;
        j = k;
        if (k >= 1024) {
          j = 1024;
        }
      }
    }
  }
  
  public static String replaceAll(String paramString1, String paramString2, String paramString3)
  {
    String str = paramString1;
    if (paramString1 != null)
    {
      str = paramString1;
      if (!paramString1.equals(""))
      {
        str = paramString1;
        if (paramString2 != null)
        {
          if (!paramString2.equals("")) {
            break label41;
          }
          str = paramString1;
        }
      }
    }
    return str;
    label41:
    for (int i = paramString1.indexOf(paramString2, 0);; i = paramString1.indexOf(paramString2))
    {
      str = paramString1;
      if (i < 0) {
        break;
      }
      paramString1 = paramString1.substring(0, i) + paramString3 + paramString1.substring(i + paramString2.length());
    }
  }
  
  public static String replaceSpecialChar(String paramString)
  {
    int i = 0;
    String str = paramString;
    if (paramString != null)
    {
      if (paramString.trim().equals("")) {
        str = paramString;
      }
    }
    else {
      return str;
    }
    String[] arrayOfString = new String[6];
    arrayOfString[0] = "&lt;";
    arrayOfString[1] = "&gt;";
    arrayOfString[2] = "&amp;";
    arrayOfString[3] = "&apos;";
    arrayOfString[4] = "&quot;";
    arrayOfString[5] = "&nbsp;";
    for (;;)
    {
      str = paramString;
      if (i >= arrayOfString.length) {
        break;
      }
      paramString = paramString.replaceAll(arrayOfString[i], new String[] { "<", ">", "&", "'", "\"", " " }[i]);
      i += 1;
    }
  }
  
  public static HttpResponse requestSubUrl(String paramString1, boolean paramBoolean, ArrayList paramArrayList, String paramString2)
  {
    if ((paramString1 == null) || (paramString1.trim().equals(""))) {
      return null;
    }
    String str = replaceSpecialChar(paramString1);
    if (paramBoolean) {}
    DefaultHttpClient localDefaultHttpClient;
    for (paramString1 = "POST ";; paramString1 = "GET ")
    {
      Log.e("requestSubUrl", paramString1 + str);
      paramString1 = new HttpHost("10.0.0.172", 80);
      localDefaultHttpClient = new DefaultHttpClient();
      HttpParams localHttpParams = localDefaultHttpClient.getParams();
      localHttpParams.setParameter("http.route.default-proxy", paramString1);
      HttpConnectionParams.setConnectionTimeout(localHttpParams, 60000);
      HttpConnectionParams.setSoTimeout(localHttpParams, 600000);
      HttpClientParams.setRedirecting(localHttpParams, false);
      if (paramBoolean) {
        break;
      }
      return a(localDefaultHttpClient, str, paramArrayList);
    }
    return a(localDefaultHttpClient, str, paramArrayList, paramString2);
  }
  
  public static void saveFile(String paramString1, String paramString2, boolean paramBoolean)
  {
    try
    {
      paramString2 = new FileWriter(paramString2, paramBoolean);
      paramString2.write(paramString1);
      paramString2.flush();
      paramString2.close();
      return;
    }
    catch (IOException paramString1) {}
  }
  
  public static void saveLog(String paramString1, String paramString2, boolean paramBoolean)
  {
    if (cu) {}
    try
    {
      paramString2 = new FileWriter(paramString2, paramBoolean);
      paramString2.write(paramString1);
      paramString2.flush();
      paramString2.close();
      return;
    }
    catch (IOException paramString1) {}
  }
  
  public static void setShowLog(boolean paramBoolean)
  {
    cv = paramBoolean;
  }
  
  public static void showLog(String paramString1, String paramString2)
  {
    if (cv) {
      Log.e(paramString1, paramString2);
    }
  }
  
  public static void showSaveLog(String paramString1, String paramString2)
  {
    if (cv) {
      Log.e(paramString1, paramString2);
    }
    if (cu) {}
    try
    {
      if (cw == null) {
        cw = new FileWriter(cx, true);
      }
      if ((paramString1 != null) && (paramString2 != null))
      {
        String str = paramString1 + ":";
        paramString1 = str;
        if (paramString2.length() >= 100) {
          paramString1 = str + "\r\n";
        }
        cw.write(paramString1 + paramString2 + "\r\n");
        cw.flush();
      }
      return;
    }
    catch (Exception paramString1) {}catch (IOException paramString1) {}
  }
  
  public static String sign(String paramString1, String paramString2, String paramString3)
  {
    return Rsa.sign(paramString2, paramString3);
  }
  
  public static String subString(String paramString1, String paramString2, Integer paramInteger1, String paramString3, Integer paramInteger2)
  {
    if ((paramString1 == null) || (paramString2 == null) || (paramString3 == null)) {}
    int i;
    int j;
    do
    {
      Integer localInteger;
      do
      {
        return null;
        localInteger = paramInteger1;
        if (paramInteger1 == null) {
          localInteger = Integer.valueOf(paramString2.length());
        }
        paramInteger1 = paramInteger2;
        if (paramInteger2 == null) {
          paramInteger1 = Integer.valueOf(paramString3.length());
        }
        i = paramString1.indexOf(paramString2);
      } while (i < 0);
      i += localInteger.intValue();
      j = paramString1.indexOf(paramString3, i) + paramInteger1.intValue();
      int k = paramString1.length();
      if ((i >= 0) && (j <= k) && (j > i)) {
        return paramString1.substring(i, j);
      }
    } while (i != j);
    return "";
  }
  
  public static final String toHex(String paramString)
  {
    if ((paramString == null) || (paramString.equals(""))) {
      return paramString;
    }
    paramString = paramString.getBytes();
    if (paramString == null) {
      return null;
    }
    if (paramString.length == 0) {
      return "";
    }
    StringBuffer localStringBuffer = new StringBuffer(paramString.length * 2);
    int i = 0;
    for (;;)
    {
      if (i >= paramString.length) {
        return localStringBuffer.toString();
      }
      String str = Integer.toHexString(paramString[i] & 0xFF);
      if (str.length() < 2) {
        localStringBuffer.append(0);
      }
      localStringBuffer.append(str.toUpperCase());
      i += 1;
    }
  }
  
  public static void updateSMSCount(Context paramContext)
  {
    int i = 1;
    paramContext = paramContext.getSharedPreferences("SMSCountShare", 2);
    SharedPreferences.Editor localEditor = paramContext.edit();
    String str1 = paramContext.getString("month", null);
    String str2 = getCurrentDate("yyyy-MM", null);
    if ((str1 != null) && (str1.equals(str1)))
    {
      i = paramContext.getInt("count", 0) + 1;
      localEditor.putInt("count", i);
    }
    for (;;)
    {
      Log.e("cont", "count is " + i + ", month is " + str2);
      localEditor.commit();
      return;
      localEditor.putString("month", str2);
      localEditor.putInt("count", 1);
    }
  }
}
