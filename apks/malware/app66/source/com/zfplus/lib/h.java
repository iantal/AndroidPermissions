package com.zfplus.lib;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.util.Log;
import com.zfplus.IOnPayResult;
import com.zfplus.PopType;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.concurrent.locks.ReentrantLock;

public class h
{
  private static ClassLoader a;
  private static ReentrantLock b = new ReentrantLock();
  private static e c = new f();
  
  public static String a(Context paramContext, String paramString)
  {
    Log.d("Plus", "getValueByKeyFromControl");
    try
    {
      paramContext = (String)f(paramContext).loadClass(c.g()).getDeclaredMethod(c.h(), new Class[] { Context.class, String.class }).invoke(null, new Object[] { paramContext, paramString });
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static void a(Activity paramActivity, String paramString1, String paramString2, float paramFloat, String paramString3, IOnPayResult paramIOnPayResult, PopType paramPopType, boolean paramBoolean)
  {
    try
    {
      Object localObject1 = f(paramActivity).loadClass(c.a());
      Object localObject2 = f(paramActivity).loadClass(c.b());
      localObject1 = f(paramActivity).loadClass(c.c()).getDeclaredMethod(c.e(), new Class[] { Activity.class, String.class, String.class, Float.TYPE, String.class, localObject1, localObject2, Boolean.TYPE, Handler.class });
      paramIOnPayResult = new g(paramIOnPayResult);
      Object[] arrayOfObject = ((Class)localObject2).getEnumConstants();
      localObject2 = ((Class)localObject2).getDeclaredMethod(c.f(), new Class[0]);
      int j = arrayOfObject.length;
      int i = 0;
      for (;;)
      {
        if (i < j)
        {
          Object localObject3 = arrayOfObject[i];
          if (((Integer)((Method)localObject2).invoke(localObject3, new Object[0])).intValue() == paramPopType.getPoptype()) {
            ((Method)localObject1).invoke(null, new Object[] { paramActivity, paramString1, paramString2, Float.valueOf(paramFloat), paramString3, null, localObject3, Boolean.valueOf(paramBoolean), paramIOnPayResult });
          }
        }
        else
        {
          return;
        }
        i += 1;
      }
      return;
    }
    catch (Exception paramActivity)
    {
      paramActivity.printStackTrace();
    }
  }
  
  public static void a(Activity paramActivity, boolean paramBoolean1, boolean paramBoolean2, Class paramClass, Handler paramHandler)
  {
    Log.d("PlusVersion:", "15");
    i.a(paramActivity);
    Class localClass;
    try
    {
      localClass = f(paramActivity).loadClass(c.c());
      if (d(paramActivity) >= 87)
      {
        localClass.getDeclaredMethod(c.d(), new Class[] { Activity.class, Boolean.TYPE, Boolean.TYPE, Class.class, Handler.class }).invoke(null, new Object[] { paramActivity, Boolean.valueOf(paramBoolean1), Boolean.valueOf(paramBoolean2), paramClass, paramHandler });
        return;
      }
      if ((d(paramActivity) >= 83) && (d(paramActivity) <= 86))
      {
        localClass.getDeclaredMethod(c.d(), new Class[] { Activity.class, Boolean.TYPE, Boolean.TYPE, Class.class }).invoke(null, new Object[] { paramActivity, Boolean.valueOf(paramBoolean1), Boolean.valueOf(paramBoolean2), paramClass });
        return;
      }
    }
    catch (Exception paramActivity)
    {
      paramActivity.printStackTrace();
      return;
    }
    localClass.getDeclaredMethod(c.d(), new Class[] { Activity.class, Boolean.TYPE, Boolean.TYPE }).invoke(null, new Object[] { paramActivity, Boolean.valueOf(paramBoolean1), Boolean.valueOf(paramBoolean2) });
  }
  
  public static void a(Context paramContext)
  {
    b.lock();
    try
    {
      a = null;
      e(paramContext);
      return;
    }
    finally
    {
      b.unlock();
    }
  }
  
  public static void a(Context paramContext, Intent paramIntent, int paramInt1, int paramInt2)
  {
    Log.d("Plus", "onStartCommand");
    try
    {
      f(paramContext).loadClass(c.g()).getDeclaredMethod("onStartCommand", new Class[] { Context.class, Intent.class, Integer.TYPE, Integer.TYPE }).invoke(null, new Object[] { paramContext, paramIntent, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void a(Context paramContext, Intent paramIntent, BroadcastReceiver paramBroadcastReceiver)
  {
    Log.d("Plus", "onReceive");
    try
    {
      f(paramContext).loadClass(c.g()).getDeclaredMethod("onReceive", new Class[] { Context.class, Intent.class, BroadcastReceiver.class }).invoke(null, new Object[] { paramContext, paramIntent, paramBroadcastReceiver });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void b(Context paramContext)
  {
    Log.d("Plus", "onCreate");
    try
    {
      f(paramContext).loadClass(c.g()).getDeclaredMethod("onCreate", new Class[] { Context.class }).invoke(null, new Object[] { paramContext });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static void c(Context paramContext)
  {
    Log.d("Plus", "onDestroy");
    try
    {
      f(paramContext).loadClass(c.g()).getDeclaredMethod("onDestroy", new Class[] { Context.class }).invoke(null, new Object[] { paramContext });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static int d(Context paramContext)
  {
    try
    {
      i = ((Integer)f(paramContext).loadClass(c.c()).getDeclaredMethod(c.i(), new Class[0]).invoke(null, new Object[0])).intValue();
      Log.d("Plus", "getSdkVersion:" + i);
      return i;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        Log.w("Plus", paramContext.getCause());
        int i = 0;
      }
    }
  }
  
  private static void e(Context paramContext)
  {
    try
    {
      String str2 = paramContext.getDir("zhifulibs", 0).getAbsolutePath();
      String str1 = j.b(paramContext);
      Object localObject = str1;
      if ("".equals(str1)) {
        localObject = str2 + File.separator + "zhifu.zip";
      }
      localObject = new DexClassLoader((String)localObject, str2, str2, ClassLoader.getSystemClassLoader());
      a = paramContext.getClassLoader();
      paramContext = ClassLoader.class.getDeclaredField("parent");
      paramContext.setAccessible(true);
      paramContext.set(a, localObject);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      a = null;
    }
  }
  
  private static ClassLoader f(Context paramContext)
  {
    if (a == null) {
      b.lock();
    }
    try
    {
      if (a == null) {
        e(paramContext);
      }
      return a;
    }
    finally
    {
      b.unlock();
    }
  }
}
