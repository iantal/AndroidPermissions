package com.lp.sdk.yninterface.util;

import android.content.Context;
import com.lepeng.utils.datastorage.db.DaoConfig;
import com.lepeng.utils.datastorage.db.DbUpdateListener;
import com.lepeng.utils.datastorage.db.DbUtil;
import com.lepeng.utils.datastorage.db.sqlite.DbModel;
import com.lepeng.utils.datastorage.db.sqlite.SqlBuilder;
import com.lepeng.utils.datastorage.db.table.TableInfo;
import com.lepeng.utils.exception.CheckedExceptionHandler;
import java.util.HashMap;
import java.util.List;

public class LPDbUtil
  extends DbUtil
{
  public LPDbUtil(DaoConfig paramDaoConfig)
  {
    super(paramDaoConfig);
  }
  
  private static LPDbUtil a(DaoConfig paramDaoConfig)
  {
    try
    {
      LPDbUtil localLPDbUtil2 = (LPDbUtil)getDaoMap().get(paramDaoConfig.getDbName());
      LPDbUtil localLPDbUtil1 = localLPDbUtil2;
      if (localLPDbUtil2 == null)
      {
        localLPDbUtil1 = new LPDbUtil(paramDaoConfig);
        localLPDbUtil1.setDbName(paramDaoConfig.getDbName());
        getDaoMap().put(paramDaoConfig.getDbName(), localLPDbUtil1);
      }
      return localLPDbUtil1;
    }
    finally {}
  }
  
  public static LPDbUtil create(Context paramContext)
  {
    DaoConfig localDaoConfig = new DaoConfig();
    localDaoConfig.setContext(paramContext);
    return a(localDaoConfig);
  }
  
  public static LPDbUtil create(Context paramContext, String paramString)
  {
    DaoConfig localDaoConfig = new DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDbName(paramString);
    return a(localDaoConfig);
  }
  
  public static LPDbUtil create(Context paramContext, String paramString, int paramInt, DbUpdateListener paramDbUpdateListener)
  {
    DaoConfig localDaoConfig = new DaoConfig();
    localDaoConfig.setContext(paramContext);
    localDaoConfig.setDbName(paramString);
    localDaoConfig.setDbVersion(paramInt);
    localDaoConfig.setDbUpdateListener(paramDbUpdateListener);
    return a(localDaoConfig);
  }
  
  public static LPDbUtil create(DaoConfig paramDaoConfig)
  {
    return a(paramDaoConfig);
  }
  
  public List findAllByWhereN(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    return findAllBySql(paramClass, SqlBuilder.getSelectSQLByWhere(paramClass, paramString));
  }
  
  public Object findByWhere(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    return findBySql(paramClass, SqlBuilder.getSelectSQL(paramClass) + " WHERE " + paramString);
  }
  
  public Integer findCountBySql(Class paramClass, String paramString)
  {
    checkTableExist(paramClass);
    paramClass = TableInfo.get(paramClass);
    paramString = findDbModelBySQL("SELECT count(*) as count  FROM " + paramClass.getTableName() + " WHERE " + paramString);
    paramClass = null;
    if (paramString != null) {}
    try
    {
      int i = paramString.getInt("count");
      paramClass = Integer.valueOf(i);
      return paramClass;
    }
    catch (Exception paramClass)
    {
      CheckedExceptionHandler.handleException(paramClass);
    }
    return null;
  }
}
