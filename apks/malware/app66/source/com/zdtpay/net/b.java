package com.zdtpay.net;

import android.text.TextUtils;
import com.zdtpay.tools.MyLogPrinter;
import com.zdtpay.tools.c;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.AbstractHttpMessage;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.util.EntityUtils;

public class b
  extends a
{
  private HttpGet b = null;
  private HttpPost c = null;
  private DefaultHttpClient d = null;
  
  public b(int paramInt)
  {
    super(paramInt);
  }
  
  private String a(int paramInt, String paramString, HashMap paramHashMap)
  {
    Object localObject3;
    Object localObject1;
    Object localObject4;
    Object localObject2;
    if (paramInt == 0)
    {
      localObject3 = new StringBuffer();
      localObject1 = paramString;
      Iterator localIterator;
      if (paramHashMap != null)
      {
        localObject4 = new StringBuffer();
        localIterator = paramHashMap.keySet().iterator();
      }
      for (;;)
      {
        if (!localIterator.hasNext())
        {
          localObject1 = paramString;
          if (((StringBuffer)localObject4).length() != 0)
          {
            ((StringBuffer)localObject4).deleteCharAt(((StringBuffer)localObject4).length() - 1);
            localObject1 = paramString + "?" + ((StringBuffer)localObject4).toString().trim();
          }
          MyLogPrinter.b(false, "get url = " + (String)localObject1);
          this.b = new HttpGet((String)localObject1);
          a(this.b, g.a());
          paramString = new BasicHttpParams();
          HttpConnectionParams.setConnectionTimeout(paramString, 30000);
          HttpConnectionParams.setSoTimeout(paramString, 30000);
          this.d = new DefaultHttpClient(paramString);
          paramString = this.d.execute(this.b);
          MyLogPrinter.a("StatusCode = " + paramString.getStatusLine().getStatusCode());
          if (paramString.getStatusLine().getStatusCode() == 200) {
            break;
          }
          throw new IOException();
        }
        String str = ((String)localIterator.next()).trim();
        localObject2 = (String)paramHashMap.get(str);
        localObject1 = localObject2;
        if (!TextUtils.isEmpty((CharSequence)localObject2))
        {
          localObject1 = localObject2;
          if (str.equals(c.r)) {
            localObject1 = new String(((String)localObject2).getBytes(), "UTF-8");
          }
          ((StringBuffer)localObject4).append(str + "=" + URLEncoder.encode((String)localObject1, "UTF-8") + "&");
        }
        ((StringBuffer)localObject3).append(str + "=" + (String)localObject1 + "&");
      }
      paramString = new BufferedReader(new InputStreamReader(paramString.getEntity().getContent(), "UTF-8"));
      paramHashMap = new StringBuffer();
      for (;;)
      {
        localObject1 = paramString.readLine();
        if (localObject1 == null) {
          return paramHashMap.toString();
        }
        paramHashMap.append((String)localObject1);
      }
    }
    if (paramInt == 1)
    {
      MyLogPrinter.a("post url = " + paramString);
      this.c = new HttpPost(paramString);
      a(this.c, g.a());
      if (paramHashMap != null)
      {
        localObject1 = new ArrayList();
        localObject2 = paramHashMap.keySet().iterator();
      }
      for (paramString = "";; paramString = paramString + (String)localObject3 + "=" + (String)paramHashMap.get(localObject3) + "&")
      {
        if (!((Iterator)localObject2).hasNext())
        {
          MyLogPrinter.b("params = " + paramString);
          MyLogPrinter.b("params = " + ((ArrayList)localObject1).toString());
          this.c.setEntity(new UrlEncodedFormEntity((List)localObject1, "UTF-8"));
          paramString = new BasicHttpParams();
          HttpConnectionParams.setConnectionTimeout(paramString, 30000);
          HttpConnectionParams.setSoTimeout(paramString, 30000);
          this.d = new DefaultHttpClient(paramString);
          paramString = this.d.execute(this.c);
          if (paramString.getStatusLine().getStatusCode() == 200) {
            break;
          }
          throw new IOException("http status=" + paramString.getStatusLine().getStatusCode());
        }
        localObject3 = (String)((Iterator)localObject2).next();
        localObject4 = (String)paramHashMap.get(localObject3);
        if (!TextUtils.isEmpty((CharSequence)localObject4)) {
          ((ArrayList)localObject1).add(new BasicNameValuePair((String)localObject3, (String)localObject4));
        }
      }
      return EntityUtils.toString(paramString.getEntity(), "UTF-8");
    }
    return null;
  }
  
  private void a(AbstractHttpMessage paramAbstractHttpMessage, Map paramMap)
  {
    paramMap = paramMap.entrySet().iterator();
    for (;;)
    {
      if (!paramMap.hasNext()) {
        return;
      }
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      paramAbstractHttpMessage.setHeader((String)localEntry.getKey(), (String)localEntry.getValue());
    }
  }
  
  public String a(String paramString, HashMap paramHashMap)
  {
    switch (this.a)
    {
    default: 
      return a(1, paramString, paramHashMap);
    }
    return a(this.a, paramString, paramHashMap);
  }
}
