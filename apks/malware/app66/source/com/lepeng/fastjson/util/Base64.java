package com.lepeng.fastjson.util;

import java.util.Arrays;

public class Base64
{
  public static final char[] CA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".toCharArray();
  public static final int[] IA = new int['Ä€'];
  
  static
  {
    Arrays.fill(IA, -1);
    int j = CA.length;
    int i = 0;
    for (;;)
    {
      if (i >= j)
      {
        IA[61] = 0;
        return;
      }
      IA[CA[i]] = i;
      i += 1;
    }
  }
  
  public Base64() {}
  
  public static final byte[] decodeFast(String paramString)
  {
    int i2 = 0;
    int n = paramString.length();
    if (n == 0) {
      return new byte[0];
    }
    int i = n - 1;
    int j = 0;
    int k;
    if (j < i) {
      if (IA[(paramString.charAt(j) & 0xFF)] >= 0) {
        k = i;
      }
    }
    for (;;)
    {
      label48:
      int m;
      label93:
      int i3;
      label124:
      int i1;
      label129:
      byte[] arrayOfByte;
      int i4;
      if ((k <= 0) || (IA[(paramString.charAt(k) & 0xFF)] >= 0))
      {
        if (paramString.charAt(k) != '=') {
          break label228;
        }
        if (paramString.charAt(k - 1) != '=') {
          break label222;
        }
        m = 2;
        i3 = k - j + 1;
        if (n <= 76) {
          break label239;
        }
        if (paramString.charAt(76) != '\r') {
          break label234;
        }
        i = i3 / 78;
        i1 = i << 1;
        i3 = ((i3 - i1) * 6 >> 3) - m;
        arrayOfByte = new byte[i3];
        i4 = i3 / 3;
        n = 0;
        i = 0;
      }
      label161:
      label184:
      label222:
      label228:
      label234:
      label239:
      label418:
      label481:
      label484:
      for (;;)
      {
        if (i >= i4 * 3) {
          if (i < i3)
          {
            i1 = j;
            n = 0;
            j = i2;
            i2 = j;
            if (i1 <= k - m) {
              break label418;
            }
            j = 16;
          }
        }
        for (;;)
        {
          if (i >= i3)
          {
            return arrayOfByte;
            j += 1;
            break;
            k -= 1;
            break label48;
            m = 1;
            break label93;
            m = 0;
            break label93;
            i = 0;
            break label124;
            i1 = 0;
            break label129;
            int[] arrayOfInt = IA;
            int i6 = j + 1;
            int i5 = arrayOfInt[paramString.charAt(j)];
            arrayOfInt = IA;
            j = i6 + 1;
            i6 = arrayOfInt[paramString.charAt(i6)];
            arrayOfInt = IA;
            int i7 = j + 1;
            int i8 = arrayOfInt[paramString.charAt(j)];
            arrayOfInt = IA;
            j = i7 + 1;
            i5 = arrayOfInt[paramString.charAt(i7)] | i5 << 18 | i6 << 12 | i8 << 6;
            i6 = i + 1;
            arrayOfByte[i] = ((byte)(i5 >> 16));
            i7 = i6 + 1;
            arrayOfByte[i6] = ((byte)(i5 >> 8));
            i = i7 + 1;
            arrayOfByte[i7] = ((byte)i5);
            if (i1 <= 0) {
              break label484;
            }
            n += 1;
            if (n != 19) {
              break label481;
            }
            n = 0;
            j += 2;
            break label161;
            i4 = IA[paramString.charAt(i1)];
            j = i2 + 1;
            n = i4 << 18 - i2 * 6 | n;
            i1 += 1;
            break label184;
          }
          arrayOfByte[i] = ((byte)(n >> j));
          j -= 8;
          i += 1;
        }
      }
      k = i;
    }
  }
  
  public static final byte[] decodeFast(String paramString, int paramInt1, int paramInt2)
  {
    if (paramInt2 == 0) {
      return new byte[0];
    }
    int i = paramInt1 + paramInt2 - 1;
    if (paramInt1 < i) {
      if (IA[paramString.charAt(paramInt1)] < 0) {}
    }
    for (;;)
    {
      label31:
      int j;
      label72:
      int k;
      label102:
      int m;
      label107:
      int i1;
      byte[] arrayOfByte;
      int i2;
      int n;
      if ((i <= 0) || (IA[paramString.charAt(i)] >= 0))
      {
        if (paramString.charAt(i) != '=') {
          break label215;
        }
        if (paramString.charAt(i - 1) != '=') {
          break label209;
        }
        j = 2;
        k = i - paramInt1 + 1;
        if (paramInt2 <= 76) {
          break label226;
        }
        if (paramString.charAt(76) != '\r') {
          break label221;
        }
        paramInt2 = k / 78;
        m = paramInt2 << 1;
        i1 = ((k - m) * 6 >> 3) - j;
        arrayOfByte = new byte[i1];
        i2 = i1 / 3;
        n = 0;
        k = 0;
        paramInt2 = paramInt1;
        paramInt1 = n;
      }
      label145:
      label171:
      label209:
      label215:
      label221:
      label226:
      label405:
      label468:
      label471:
      for (;;)
      {
        if (paramInt1 >= i2 * 3) {
          if (paramInt1 < i1)
          {
            n = 0;
            k = 0;
            m = paramInt2;
            paramInt2 = n;
            n = paramInt2;
            if (m <= i - j) {
              break label405;
            }
            paramInt2 = 16;
          }
        }
        for (;;)
        {
          if (paramInt1 >= i1)
          {
            return arrayOfByte;
            paramInt1 += 1;
            break;
            i -= 1;
            break label31;
            j = 1;
            break label72;
            j = 0;
            break label72;
            paramInt2 = 0;
            break label102;
            m = 0;
            break label107;
            int[] arrayOfInt = IA;
            int i3 = paramInt2 + 1;
            n = arrayOfInt[paramString.charAt(paramInt2)];
            arrayOfInt = IA;
            paramInt2 = i3 + 1;
            i3 = arrayOfInt[paramString.charAt(i3)];
            arrayOfInt = IA;
            int i4 = paramInt2 + 1;
            int i5 = arrayOfInt[paramString.charAt(paramInt2)];
            arrayOfInt = IA;
            paramInt2 = i4 + 1;
            n = arrayOfInt[paramString.charAt(i4)] | n << 18 | i3 << 12 | i5 << 6;
            i3 = paramInt1 + 1;
            arrayOfByte[paramInt1] = ((byte)(n >> 16));
            i4 = i3 + 1;
            arrayOfByte[i3] = ((byte)(n >> 8));
            paramInt1 = i4 + 1;
            arrayOfByte[i4] = ((byte)n);
            if (m <= 0) {
              break label471;
            }
            k += 1;
            if (k != 19) {
              break label468;
            }
            paramInt2 += 2;
            k = 0;
            break label145;
            i2 = IA[paramString.charAt(m)];
            paramInt2 = n + 1;
            k = i2 << 18 - n * 6 | k;
            m += 1;
            break label171;
          }
          arrayOfByte[paramInt1] = ((byte)(k >> paramInt2));
          paramInt2 -= 8;
          paramInt1 += 1;
        }
      }
    }
  }
  
  public static final byte[] decodeFast(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    if (paramInt2 == 0) {
      return new byte[0];
    }
    int i = paramInt1 + paramInt2 - 1;
    if (paramInt1 < i) {
      if (IA[paramArrayOfChar[paramInt1]] < 0) {}
    }
    for (;;)
    {
      label29:
      int j;
      label64:
      int k;
      label92:
      int m;
      label97:
      int i1;
      byte[] arrayOfByte;
      int i2;
      int n;
      if ((i <= 0) || (IA[paramArrayOfChar[i]] >= 0))
      {
        if (paramArrayOfChar[i] != '=') {
          break label205;
        }
        if (paramArrayOfChar[(i - 1)] != '=') {
          break label199;
        }
        j = 2;
        k = i - paramInt1 + 1;
        if (paramInt2 <= 76) {
          break label216;
        }
        if (paramArrayOfChar[76] != '\r') {
          break label211;
        }
        paramInt2 = k / 78;
        m = paramInt2 << 1;
        i1 = ((k - m) * 6 >> 3) - j;
        arrayOfByte = new byte[i1];
        i2 = i1 / 3;
        n = 0;
        k = 0;
        paramInt2 = paramInt1;
        paramInt1 = n;
      }
      label135:
      label161:
      label199:
      label205:
      label211:
      label216:
      label387:
      label448:
      label451:
      for (;;)
      {
        if (paramInt1 >= i2 * 3) {
          if (paramInt1 < i1)
          {
            n = 0;
            k = 0;
            m = paramInt2;
            paramInt2 = n;
            n = paramInt2;
            if (m <= i - j) {
              break label387;
            }
            paramInt2 = 16;
          }
        }
        for (;;)
        {
          if (paramInt1 >= i1)
          {
            return arrayOfByte;
            paramInt1 += 1;
            break;
            i -= 1;
            break label29;
            j = 1;
            break label64;
            j = 0;
            break label64;
            paramInt2 = 0;
            break label92;
            m = 0;
            break label97;
            int[] arrayOfInt = IA;
            int i3 = paramInt2 + 1;
            n = arrayOfInt[paramArrayOfChar[paramInt2]];
            arrayOfInt = IA;
            paramInt2 = i3 + 1;
            i3 = arrayOfInt[paramArrayOfChar[i3]];
            arrayOfInt = IA;
            int i4 = paramInt2 + 1;
            int i5 = arrayOfInt[paramArrayOfChar[paramInt2]];
            arrayOfInt = IA;
            paramInt2 = i4 + 1;
            n = arrayOfInt[paramArrayOfChar[i4]] | n << 18 | i3 << 12 | i5 << 6;
            i3 = paramInt1 + 1;
            arrayOfByte[paramInt1] = ((byte)(n >> 16));
            i4 = i3 + 1;
            arrayOfByte[i3] = ((byte)(n >> 8));
            paramInt1 = i4 + 1;
            arrayOfByte[i4] = ((byte)n);
            if (m <= 0) {
              break label451;
            }
            k += 1;
            if (k != 19) {
              break label448;
            }
            paramInt2 += 2;
            k = 0;
            break label135;
            i2 = IA[paramArrayOfChar[m]];
            paramInt2 = n + 1;
            k = i2 << 18 - n * 6 | k;
            m += 1;
            break label161;
          }
          arrayOfByte[paramInt1] = ((byte)(k >> paramInt2));
          paramInt2 -= 8;
          paramInt1 += 1;
        }
      }
    }
  }
}
