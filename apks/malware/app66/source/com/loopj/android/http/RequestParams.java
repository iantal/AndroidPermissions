package com.loopj.android.http;

import java.io.File;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;

public class RequestParams
{
  protected ConcurrentHashMap fileParams;
  protected boolean isRepeatable = false;
  protected ConcurrentHashMap streamParams;
  protected ConcurrentHashMap urlParams;
  protected ConcurrentHashMap urlParamsWithObjects;
  
  public RequestParams()
  {
    this((Map)null);
  }
  
  public RequestParams(String paramString1, String paramString2)
  {
    this(new RequestParams.1(paramString1, paramString2));
  }
  
  public RequestParams(Map paramMap)
  {
    init();
    if (paramMap != null)
    {
      paramMap = paramMap.entrySet().iterator();
      while (paramMap.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramMap.next();
        put((String)localEntry.getKey(), (String)localEntry.getValue());
      }
    }
  }
  
  public RequestParams(Object... paramVarArgs)
  {
    init();
    int j = paramVarArgs.length;
    if (j % 2 != 0) {
      throw new IllegalArgumentException("Supplied arguments must be even");
    }
    while (i < j)
    {
      put(String.valueOf(paramVarArgs[i]), String.valueOf(paramVarArgs[(i + 1)]));
      i += 2;
    }
  }
  
  private HttpEntity createFormEntity()
  {
    try
    {
      UrlEncodedFormEntity localUrlEncodedFormEntity = new UrlEncodedFormEntity(getParamsList(), "UTF-8");
      return localUrlEncodedFormEntity;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException) {}
    return null;
  }
  
  private HttpEntity createMultipartEntity(ResponseHandlerInterface paramResponseHandlerInterface)
  {
    paramResponseHandlerInterface = new SimpleMultipartEntity(paramResponseHandlerInterface);
    paramResponseHandlerInterface.setIsRepeatable(this.isRepeatable);
    Iterator localIterator = this.urlParams.entrySet().iterator();
    Object localObject1;
    while (localIterator.hasNext())
    {
      localObject1 = (Map.Entry)localIterator.next();
      paramResponseHandlerInterface.addPart((String)((Map.Entry)localObject1).getKey(), (String)((Map.Entry)localObject1).getValue());
    }
    localIterator = getParamsList(null, this.urlParamsWithObjects).iterator();
    while (localIterator.hasNext())
    {
      localObject1 = (BasicNameValuePair)localIterator.next();
      paramResponseHandlerInterface.addPart(((BasicNameValuePair)localObject1).getName(), ((BasicNameValuePair)localObject1).getValue());
    }
    localIterator = this.streamParams.entrySet().iterator();
    Object localObject2;
    while (localIterator.hasNext())
    {
      localObject1 = (Map.Entry)localIterator.next();
      localObject2 = (RequestParams.StreamWrapper)((Map.Entry)localObject1).getValue();
      if (((RequestParams.StreamWrapper)localObject2).inputStream != null) {
        paramResponseHandlerInterface.addPart((String)((Map.Entry)localObject1).getKey(), ((RequestParams.StreamWrapper)localObject2).name, ((RequestParams.StreamWrapper)localObject2).inputStream, ((RequestParams.StreamWrapper)localObject2).contentType);
      }
    }
    localIterator = this.fileParams.entrySet().iterator();
    while (localIterator.hasNext())
    {
      localObject1 = (Map.Entry)localIterator.next();
      localObject2 = (RequestParams.FileWrapper)((Map.Entry)localObject1).getValue();
      paramResponseHandlerInterface.addPart((String)((Map.Entry)localObject1).getKey(), ((RequestParams.FileWrapper)localObject2).file, ((RequestParams.FileWrapper)localObject2).contentType);
    }
    return paramResponseHandlerInterface;
  }
  
  private List getParamsList(String paramString, Object paramObject)
  {
    LinkedList localLinkedList = new LinkedList();
    Object localObject1;
    if ((paramObject instanceof Map))
    {
      localObject1 = (Map)paramObject;
      paramObject = new ArrayList(((Map)localObject1).keySet());
      Collections.sort(paramObject);
      Iterator localIterator = paramObject.iterator();
      Object localObject2;
      do
      {
        if (!localIterator.hasNext()) {
          break;
        }
        paramObject = (String)localIterator.next();
        localObject2 = ((Map)localObject1).get(paramObject);
      } while (localObject2 == null);
      if (paramString == null) {}
      for (;;)
      {
        localLinkedList.addAll(getParamsList(paramObject, localObject2));
        break;
        paramObject = String.format("%s[%s]", new Object[] { paramString, paramObject });
      }
    }
    if ((paramObject instanceof List))
    {
      paramObject = ((List)paramObject).iterator();
      while (paramObject.hasNext())
      {
        localObject1 = paramObject.next();
        localLinkedList.addAll(getParamsList(String.format("%s[]", new Object[] { paramString }), localObject1));
      }
    }
    if ((paramObject instanceof Object[]))
    {
      paramObject = (Object[])paramObject;
      int j = paramObject.length;
      int i = 0;
      while (i < j)
      {
        localObject1 = paramObject[i];
        localLinkedList.addAll(getParamsList(String.format("%s[]", new Object[] { paramString }), localObject1));
        i += 1;
      }
    }
    if ((paramObject instanceof Set))
    {
      paramObject = ((Set)paramObject).iterator();
      while (paramObject.hasNext()) {
        localLinkedList.addAll(getParamsList(paramString, paramObject.next()));
      }
    }
    if ((paramObject instanceof String)) {
      localLinkedList.add(new BasicNameValuePair(paramString, (String)paramObject));
    }
    return localLinkedList;
  }
  
  private void init()
  {
    this.urlParams = new ConcurrentHashMap();
    this.streamParams = new ConcurrentHashMap();
    this.fileParams = new ConcurrentHashMap();
    this.urlParamsWithObjects = new ConcurrentHashMap();
  }
  
  public void add(String paramString1, String paramString2)
  {
    Object localObject1;
    if ((paramString1 != null) && (paramString2 != null))
    {
      Object localObject2 = this.urlParamsWithObjects.get(paramString1);
      localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject1 = new HashSet();
        put(paramString1, localObject1);
      }
      if (!(localObject1 instanceof List)) {
        break label59;
      }
      ((List)localObject1).add(paramString2);
    }
    label59:
    while (!(localObject1 instanceof Set)) {
      return;
    }
    ((Set)localObject1).add(paramString2);
  }
  
  public HttpEntity getEntity(ResponseHandlerInterface paramResponseHandlerInterface)
  {
    if ((this.streamParams.isEmpty()) && (this.fileParams.isEmpty())) {
      return createFormEntity();
    }
    return createMultipartEntity(paramResponseHandlerInterface);
  }
  
  protected String getParamString()
  {
    return URLEncodedUtils.format(getParamsList(), "UTF-8");
  }
  
  protected List getParamsList()
  {
    LinkedList localLinkedList = new LinkedList();
    Iterator localIterator = this.urlParams.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localLinkedList.add(new BasicNameValuePair((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    localLinkedList.addAll(getParamsList(null, this.urlParamsWithObjects));
    return localLinkedList;
  }
  
  public void put(String paramString, File paramFile)
  {
    put(paramString, paramFile, null);
  }
  
  public void put(String paramString1, File paramFile, String paramString2)
  {
    if ((paramString1 != null) && (paramFile != null)) {
      this.fileParams.put(paramString1, new RequestParams.FileWrapper(paramFile, paramString2));
    }
  }
  
  public void put(String paramString, InputStream paramInputStream)
  {
    put(paramString, paramInputStream, null);
  }
  
  public void put(String paramString1, InputStream paramInputStream, String paramString2)
  {
    put(paramString1, paramInputStream, paramString2, null);
  }
  
  public void put(String paramString1, InputStream paramInputStream, String paramString2, String paramString3)
  {
    if ((paramString1 != null) && (paramInputStream != null)) {
      this.streamParams.put(paramString1, new RequestParams.StreamWrapper(paramInputStream, paramString2, paramString3));
    }
  }
  
  public void put(String paramString, Object paramObject)
  {
    if ((paramString != null) && (paramObject != null)) {
      this.urlParamsWithObjects.put(paramString, paramObject);
    }
  }
  
  public void put(String paramString1, String paramString2)
  {
    if ((paramString1 != null) && (paramString2 != null)) {
      this.urlParams.put(paramString1, paramString2);
    }
  }
  
  public void remove(String paramString)
  {
    this.urlParams.remove(paramString);
    this.streamParams.remove(paramString);
    this.fileParams.remove(paramString);
    this.urlParamsWithObjects.remove(paramString);
  }
  
  public void setHttpEntityIsRepeatable(boolean paramBoolean)
  {
    this.isRepeatable = paramBoolean;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Iterator localIterator = this.urlParams.entrySet().iterator();
    Object localObject;
    while (localIterator.hasNext())
    {
      localObject = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)((Map.Entry)localObject).getKey());
      localStringBuilder.append("=");
      localStringBuilder.append((String)((Map.Entry)localObject).getValue());
    }
    localIterator = this.streamParams.entrySet().iterator();
    while (localIterator.hasNext())
    {
      localObject = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)((Map.Entry)localObject).getKey());
      localStringBuilder.append("=");
      localStringBuilder.append("STREAM");
    }
    localIterator = this.fileParams.entrySet().iterator();
    while (localIterator.hasNext())
    {
      localObject = (Map.Entry)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append((String)((Map.Entry)localObject).getKey());
      localStringBuilder.append("=");
      localStringBuilder.append("FILE");
    }
    localIterator = getParamsList(null, this.urlParamsWithObjects).iterator();
    while (localIterator.hasNext())
    {
      localObject = (BasicNameValuePair)localIterator.next();
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("&");
      }
      localStringBuilder.append(((BasicNameValuePair)localObject).getName());
      localStringBuilder.append("=");
      localStringBuilder.append(((BasicNameValuePair)localObject).getValue());
    }
    return localStringBuilder.toString();
  }
}
