package com.loopj.android.http;

import android.util.Log;
import org.apache.http.Header;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

public class JsonHttpResponseHandler
  extends TextHttpResponseHandler
{
  private static final String LOG_TAG = "JsonHttpResponseHandler";
  
  public JsonHttpResponseHandler()
  {
    super("UTF-8");
  }
  
  public JsonHttpResponseHandler(String paramString)
  {
    super(paramString);
  }
  
  public void onFailure(int paramInt, Throwable paramThrowable, JSONArray paramJSONArray)
  {
    onFailure(paramThrowable, paramJSONArray);
  }
  
  public void onFailure(int paramInt, Throwable paramThrowable, JSONObject paramJSONObject)
  {
    onFailure(paramThrowable, paramJSONObject);
  }
  
  public void onFailure(int paramInt, Header[] paramArrayOfHeader, String paramString, Throwable paramThrowable)
  {
    if (paramString != null)
    {
      new Thread(new JsonHttpResponseHandler.2(this, paramString, paramInt, paramArrayOfHeader, paramThrowable)).start();
      return;
    }
    Log.v("JsonHttpResponseHandler", "response body is null, calling onFailure(Throwable, JSONObject)");
    onFailure(paramInt, paramArrayOfHeader, paramThrowable, (JSONObject)null);
  }
  
  public void onFailure(int paramInt, Header[] paramArrayOfHeader, Throwable paramThrowable, JSONArray paramJSONArray)
  {
    onFailure(paramInt, paramThrowable, paramJSONArray);
  }
  
  public void onFailure(int paramInt, Header[] paramArrayOfHeader, Throwable paramThrowable, JSONObject paramJSONObject)
  {
    onFailure(paramInt, paramThrowable, paramJSONObject);
  }
  
  public void onFailure(Throwable paramThrowable, JSONArray paramJSONArray)
  {
    onFailure(paramThrowable);
  }
  
  public void onFailure(Throwable paramThrowable, JSONObject paramJSONObject)
  {
    onFailure(paramThrowable);
  }
  
  public void onSuccess(int paramInt, JSONArray paramJSONArray)
  {
    onSuccess(paramJSONArray);
  }
  
  public void onSuccess(int paramInt, JSONObject paramJSONObject)
  {
    onSuccess(paramJSONObject);
  }
  
  public void onSuccess(int paramInt, Header[] paramArrayOfHeader, String paramString)
  {
    if (paramInt != 204)
    {
      new Thread(new JsonHttpResponseHandler.1(this, paramString, paramInt, paramArrayOfHeader)).start();
      return;
    }
    onSuccess(paramInt, paramArrayOfHeader, new JSONObject());
  }
  
  public void onSuccess(int paramInt, Header[] paramArrayOfHeader, JSONArray paramJSONArray)
  {
    onSuccess(paramInt, paramJSONArray);
  }
  
  public void onSuccess(int paramInt, Header[] paramArrayOfHeader, JSONObject paramJSONObject)
  {
    onSuccess(paramInt, paramJSONObject);
  }
  
  public void onSuccess(JSONArray paramJSONArray) {}
  
  public void onSuccess(JSONObject paramJSONObject) {}
  
  protected Object parseResponse(String paramString)
  {
    Object localObject2 = null;
    Object localObject1;
    if (paramString == null) {
      localObject1 = null;
    }
    do
    {
      return localObject1;
      localObject1 = paramString.trim();
      if (!((String)localObject1).startsWith("{"))
      {
        paramString = localObject2;
        if (!((String)localObject1).startsWith("[")) {}
      }
      else
      {
        paramString = new JSONTokener((String)localObject1).nextValue();
      }
    } while (paramString == null);
    return paramString;
  }
}
