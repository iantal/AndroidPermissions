package com.push2.sdk;

import android.content.Context;
import com.push2.sdk.b.b;
import com.push2.sdk.util.a;
import com.push2.sdk.util.e;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;

public class c
  implements Thread.UncaughtExceptionHandler
{
  private static Thread.UncaughtExceptionHandler a;
  private static c b = new c();
  private Context c;
  private Map d = new HashMap();
  
  private c() {}
  
  public static c a()
  {
    if (b == null) {
      b = new c();
    }
    return b;
  }
  
  private boolean a(Throwable paramThrowable)
  {
    if (paramThrowable == null) {
      return false;
    }
    Object localObject = b(paramThrowable);
    paramThrowable = new b("-2001", paramThrowable.getCause().getClass().getName(), (String)localObject);
    for (;;)
    {
      try
      {
        e.a(paramThrowable);
        return true;
      }
      catch (IOException paramThrowable)
      {
        localObject = new b("-2002", paramThrowable.getClass().getName(), paramThrowable.getMessage());
      }
      try
      {
        e.a((b)localObject);
        paramThrowable.printStackTrace();
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  private String b(Throwable paramThrowable)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    for (;;)
    {
      try
      {
        StringWriter localStringWriter = new StringWriter();
        localPrintWriter = new PrintWriter(localStringWriter);
        paramThrowable.printStackTrace(localPrintWriter);
        paramThrowable = paramThrowable.getCause();
        if (paramThrowable != null) {
          continue;
        }
        localPrintWriter.close();
        localStringBuilder.append(localStringWriter.toString());
      }
      catch (Exception paramThrowable)
      {
        PrintWriter localPrintWriter;
        paramThrowable.printStackTrace();
        continue;
      }
      return localStringBuilder.toString();
      paramThrowable.printStackTrace(localPrintWriter);
      paramThrowable = paramThrowable.getCause();
    }
  }
  
  public void a(Context paramContext, String paramString1, String paramString2)
  {
    this.c = paramContext;
    a = Thread.getDefaultUncaughtExceptionHandler();
    Thread.setDefaultUncaughtExceptionHandler(this);
    new e(this.c, paramString2, paramString1);
    new a(this.c, paramString1, paramString2);
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    a(paramThrowable);
    a.uncaughtException(paramThread, paramThrowable);
  }
}
