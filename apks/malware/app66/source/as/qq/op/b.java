package as.qq.op;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class b
{
  private static String a = "AES";
  
  public b() {}
  
  private byte a(char paramChar)
  {
    return (byte)"0123456789ABCDEF".indexOf(paramChar);
  }
  
  public static String a(String paramString)
  {
    b localB = new b();
    try
    {
      String str = localB.b(paramString);
      paramString = localB.a(paramString.substring(2).replace(str, ""), str);
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  private byte[] a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    paramArrayOfByte2 = new SecretKeySpec(paramArrayOfByte2, a);
    Cipher localCipher = Cipher.getInstance(a);
    localCipher.init(2, paramArrayOfByte2);
    return localCipher.doFinal(paramArrayOfByte1);
  }
  
  private byte[] c(String paramString)
  {
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    paramString = paramString.toCharArray();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return arrayOfByte;
      }
      int k = i * 2;
      int m = a(paramString[k]);
      arrayOfByte[i] = ((byte)(a(paramString[(k + 1)]) | m << 4));
      i += 1;
    }
  }
  
  public final String a(String paramString1, String paramString2)
  {
    paramString2 = c(paramString2);
    return new String(a(c(paramString1), paramString2), "gbk");
  }
  
  public String b(String paramString)
  {
    int i = Integer.parseInt(paramString.substring(0, 2));
    int j = (paramString.length() - i) / 2;
    return paramString.substring(j + 1, i + j + 1);
  }
}
