package cn.yyf.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Random;

public class b
{
  public static String a = null;
  private static final String b = b.class.getName();
  private static File c = null;
  
  public b() {}
  
  public static boolean a(InputStream paramInputStream, String paramString)
  {
    paramString = c(paramString);
    new Random().nextInt(2048);
    try
    {
      paramString = new FileOutputStream(paramString);
      byte[] arrayOfByte = new byte['Ð€'];
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte);
        if (i == -1)
        {
          paramString.flush();
          paramString.close();
          paramInputStream.close();
          return true;
        }
        paramString.write(arrayOfByte, 0, i);
      }
      return false;
    }
    catch (FileNotFoundException paramInputStream)
    {
      paramInputStream.printStackTrace();
      return false;
    }
    catch (IOException paramInputStream)
    {
      paramInputStream.printStackTrace();
    }
  }
  
  public static boolean a(String paramString)
  {
    return new File(paramString).exists();
  }
  
  /* Error */
  public static boolean b(String paramString)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 4
    //   3: iload 4
    //   5: istore_3
    //   6: aload_0
    //   7: invokestatic 86	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   10: ifne +107 -> 117
    //   13: new 71	java/io/File
    //   16: dup
    //   17: aload_0
    //   18: invokespecial 74	java/io/File:<init>	(Ljava/lang/String;)V
    //   21: astore 5
    //   23: iload 4
    //   25: istore_3
    //   26: aload 5
    //   28: invokevirtual 89	java/io/File:isDirectory	()Z
    //   31: ifeq +86 -> 117
    //   34: new 71	java/io/File
    //   37: dup
    //   38: aload_0
    //   39: invokespecial 74	java/io/File:<init>	(Ljava/lang/String;)V
    //   42: invokevirtual 93	java/io/File:listFiles	()[Ljava/io/File;
    //   45: astore 6
    //   47: aload 6
    //   49: arraylength
    //   50: istore_2
    //   51: iconst_0
    //   52: istore_1
    //   53: iconst_0
    //   54: istore_3
    //   55: iload_1
    //   56: iload_2
    //   57: if_icmplt +62 -> 119
    //   60: aload 5
    //   62: invokevirtual 94	java/io/File:getName	()Ljava/lang/String;
    //   65: astore_0
    //   66: aload 5
    //   68: invokevirtual 97	java/io/File:delete	()Z
    //   71: istore 4
    //   73: iload 4
    //   75: istore_3
    //   76: getstatic 19	cn/yyf/utils/b:b	Ljava/lang/String;
    //   79: astore 5
    //   81: new 99	java/lang/StringBuilder
    //   84: dup
    //   85: ldc 101
    //   87: invokespecial 102	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   90: aload_0
    //   91: invokevirtual 106	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   94: astore 6
    //   96: iload_3
    //   97: ifeq +96 -> 193
    //   100: ldc 108
    //   102: astore_0
    //   103: aload 5
    //   105: aload 6
    //   107: aload_0
    //   108: invokevirtual 106	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   111: invokevirtual 111	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   114: invokestatic 116	cn/yyf/utils/Tool:a	(Ljava/lang/String;Ljava/lang/Object;)V
    //   117: iload_3
    //   118: ireturn
    //   119: aload 6
    //   121: iload_1
    //   122: aaload
    //   123: invokevirtual 94	java/io/File:getName	()Ljava/lang/String;
    //   126: astore_0
    //   127: aload 6
    //   129: iload_1
    //   130: aaload
    //   131: invokevirtual 97	java/io/File:delete	()Z
    //   134: istore 4
    //   136: iload 4
    //   138: istore_3
    //   139: getstatic 19	cn/yyf/utils/b:b	Ljava/lang/String;
    //   142: astore 7
    //   144: new 99	java/lang/StringBuilder
    //   147: dup
    //   148: ldc 118
    //   150: invokespecial 102	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   153: aload_0
    //   154: invokevirtual 106	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   157: astore 8
    //   159: iload_3
    //   160: ifeq +27 -> 187
    //   163: ldc 108
    //   165: astore_0
    //   166: aload 7
    //   168: aload 8
    //   170: aload_0
    //   171: invokevirtual 106	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   174: invokevirtual 111	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   177: invokestatic 116	cn/yyf/utils/Tool:a	(Ljava/lang/String;Ljava/lang/Object;)V
    //   180: iload_1
    //   181: iconst_1
    //   182: iadd
    //   183: istore_1
    //   184: goto -129 -> 55
    //   187: ldc 120
    //   189: astore_0
    //   190: goto -24 -> 166
    //   193: ldc 122
    //   195: astore_0
    //   196: goto -93 -> 103
    //   199: astore_0
    //   200: iconst_0
    //   201: istore_3
    //   202: aload_0
    //   203: invokevirtual 123	java/lang/Exception:printStackTrace	()V
    //   206: iload_3
    //   207: ireturn
    //   208: astore_0
    //   209: goto -7 -> 202
    //   212: astore_0
    //   213: goto -11 -> 202
    //   216: astore_0
    //   217: goto -15 -> 202
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	220	0	paramString	String
    //   52	132	1	i	int
    //   50	8	2	j	int
    //   5	202	3	bool1	boolean
    //   1	136	4	bool2	boolean
    //   21	83	5	localObject1	Object
    //   45	83	6	localObject2	Object
    //   142	25	7	str	String
    //   157	12	8	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   6	23	199	java/lang/Exception
    //   26	51	199	java/lang/Exception
    //   76	96	208	java/lang/Exception
    //   103	117	208	java/lang/Exception
    //   60	73	212	java/lang/Exception
    //   119	136	212	java/lang/Exception
    //   139	159	216	java/lang/Exception
    //   166	180	216	java/lang/Exception
  }
  
  private static File c(String paramString)
  {
    paramString = new File(paramString);
    File localFile = paramString.getParentFile();
    if (!localFile.exists()) {
      localFile.mkdirs();
    }
    try
    {
      if (!paramString.exists()) {
        paramString.createNewFile();
      }
      return paramString;
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return paramString;
  }
}
