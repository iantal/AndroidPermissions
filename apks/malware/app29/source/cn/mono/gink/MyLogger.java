package cn.mono.gink;

import android.util.Log;

public class MyLogger
{
  private static boolean logFlag = false;
  public static int logLevel = 2;
  private static MyLogger logger = new MyLogger();
  
  private MyLogger() {}
  
  private String getFunctionName()
  {
    StackTraceElement[] arrayOfStackTraceElement = Thread.currentThread().getStackTrace();
    if (arrayOfStackTraceElement == null) {
      return null;
    }
    int j = arrayOfStackTraceElement.length;
    int i = 0;
    label18:
    StackTraceElement localStackTraceElement;
    if (i < j)
    {
      localStackTraceElement = arrayOfStackTraceElement[i];
      if (!localStackTraceElement.isNativeMethod()) {
        break label43;
      }
    }
    label43:
    while ((localStackTraceElement.getClassName().equals(Thread.class.getName())) || (localStackTraceElement.getClassName().equals(getClass().getName())))
    {
      i += 1;
      break label18;
      break;
    }
    return "[ " + Thread.currentThread().getName() + ": " + localStackTraceElement.getFileName() + ":" + localStackTraceElement.getLineNumber() + " ]";
  }
  
  public static MyLogger getLogger()
  {
    return logger;
  }
  
  public void d(String paramString, Object paramObject)
  {
    if (!logFlag) {}
    while (logLevel > 3) {
      return;
    }
    String str = getFunctionName();
    if (str != null)
    {
      Log.e(paramString, str + " - " + paramObject);
      return;
    }
    Log.e(paramString, paramObject.toString());
  }
  
  public void e(String paramString, Object paramObject)
  {
    if (!logFlag) {}
    while (logLevel > 6) {
      return;
    }
    String str = getFunctionName();
    if (str != null)
    {
      Log.e(paramString, str + " - " + paramObject);
      return;
    }
    Log.e(paramString, paramObject.toString());
  }
  
  public void i(String paramString, Object paramObject)
  {
    if (!logFlag) {}
    while (logLevel > 4) {
      return;
    }
    String str = getFunctionName();
    if (str != null)
    {
      Log.i(paramString, str + " - " + paramObject);
      return;
    }
    Log.i(paramString, paramObject.toString());
  }
  
  public void v(String paramString, Object paramObject)
  {
    if (!logFlag) {}
    while (logLevel > 2) {
      return;
    }
    String str = getFunctionName();
    if (str != null)
    {
      Log.v(paramString, str + " - " + paramObject);
      return;
    }
    Log.v(paramString, paramObject.toString());
  }
  
  public void w(String paramString, Exception paramException)
  {
    if (!logFlag) {}
    while (logLevel > 5) {
      return;
    }
    Log.w(paramString, "error", paramException);
  }
  
  public void w(String paramString, Object paramObject)
  {
    if (!logFlag) {}
    while (logLevel > 5) {
      return;
    }
    String str = getFunctionName();
    if (str != null)
    {
      Log.w(paramString, str + " - " + paramObject);
      return;
    }
    Log.w(paramString, paramObject.toString());
  }
}
