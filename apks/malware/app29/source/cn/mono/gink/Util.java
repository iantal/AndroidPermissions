package cn.mono.gink;

import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.telephony.TelephonyManager;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.RequestParams;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

public class Util
{
  public static final String AADD_MESSAGE = "aadd_message";
  public static final String AADD_URL = "aadd_url";
  public static final int Iworld_CMCC = 1;
  public static final int Iworld_CMTN = 3;
  public static final int Iworld_CMUN = 2;
  public static final int Iworld_NoSIM = 5;
  public static final int Iworld_NotCMCC = 0;
  public static final int MESSAGE_DDJJ = 2040;
  public static final int MESSAGE_DELAYFLUSH = 2023;
  public static final int MESSAGE_DELAYORDER = 2025;
  public static final int MESSAGE_DELAYPLAY = 2022;
  public static final int MESSAGE_DOCHECK = 2026;
  public static final int MESSAGE_DOLOGIN = 2015;
  public static final int MESSAGE_FIRSTUSE = 2004;
  public static final int MESSAGE_PUSHAPP = 2024;
  public static final int MESSAGE_QUIT = 2020;
  public static final int MESSAGE_SHOWHOME = 2021;
  public static final int NET = 2;
  static final boolean OUT_RELEASE = true;
  public static final Uri PREFERRED_APN_URI = Uri.parse("content://telephony/carriers/preferapn");
  protected static final String TAG = "Util";
  public static final int WAP = 1;
  public static final int WLAN = 0;
  private static WifiManager _wifiManager = null;
  private static int currentNetType = -1;
  protected static MyLogger logger = ;
  public static final int timeout = 50000;
  private static WifiInfo wifiInfo;
  
  public Util() {}
  
  public static int CheckPhoneNumber2(String paramString)
  {
    int j = 5;
    logger.d("Util", paramString);
    int i = j;
    if (paramString != null)
    {
      i = j;
      if (paramString.length() >= 5)
      {
        paramString = (String)paramString.subSequence(3, 5);
        if ((!paramString.equals("00")) && (!paramString.equals("02")) && (!paramString.equals("07")) && (!paramString.equals("08"))) {
          break label77;
        }
      }
    }
    label77:
    do
    {
      i = 1;
      return i;
      if ((paramString.equals("01")) || (paramString.equals("06"))) {
        return 2;
      }
    } while ((!paramString.equals("03")) && (!paramString.equals("05")));
    return 3;
  }
  
  public static String XorEn(String paramString)
  {
    paramString = paramString.toCharArray();
    int i = 0;
    if (i < paramString.length)
    {
      switch (paramString[i])
      {
      }
      for (;;)
      {
        i += 1;
        break;
        paramString[i] = 86;
        continue;
        paramString[i] = 65;
        continue;
        paramString[i] = 89;
        continue;
        paramString[i] = 66;
        continue;
        paramString[i] = 82;
        continue;
        paramString[i] = 67;
        continue;
        paramString[i] = 90;
        continue;
        paramString[i] = 68;
        continue;
        paramString[i] = 84;
        continue;
        paramString[i] = 69;
        continue;
        paramString[i] = 78;
        continue;
        paramString[i] = 77;
        continue;
        paramString[i] = 88;
        continue;
        paramString[i] = 80;
        continue;
        paramString[i] = 103;
        continue;
        paramString[i] = 51;
        continue;
        paramString[i] = 83;
        continue;
        paramString[i] = 53;
        continue;
        paramString[i] = 54;
        continue;
        paramString[i] = 52;
        continue;
        paramString[i] = 70;
        continue;
        paramString[i] = 49;
        continue;
        paramString[i] = 111;
        continue;
        paramString[i] = 48;
        continue;
        paramString[i] = 113;
        continue;
        paramString[i] = 57;
      }
    }
    return String.valueOf(paramString);
  }
  
  public static int checkNetWork(Context paramContext)
  {
    _wifiManager = (WifiManager)paramContext.getSystemService("wifi");
    wifiInfo = _wifiManager.getConnectionInfo();
    if ((_wifiManager.isWifiEnabled()) && (wifiInfo.getNetworkId() != -1) && (wifiInfo.getSSID() != null) && (isWifiConnected(paramContext))) {
      currentNetType = 0;
    }
    for (;;)
    {
      return currentNetType;
      paramContext = getCurrentApn(paramContext);
      if ((paramContext != null) && (paramContext.length() > 0) && (paramContext.toLowerCase().contains("wap"))) {
        currentNetType = 1;
      } else {
        currentNetType = 2;
      }
    }
  }
  
  public static void dodownloadm3u8(String paramString)
  {
    AsyncHttpClient localAsyncHttpClient = new AsyncHttpClient();
    localAsyncHttpClient.setTimeout(50000);
    localAsyncHttpClient.get(paramString, new RequestParams(), new Util.1(paramString));
  }
  
  public static void dodownloadts(String paramString)
  {
    try
    {
      paramString = (HttpURLConnection)new URL(paramString).openConnection();
      paramString.setUseCaches(false);
      paramString.setInstanceFollowRedirects(true);
      paramString.setConnectTimeout(30000);
      paramString.setReadTimeout(30000);
      paramString.setDoInput(true);
      paramString.setDoOutput(false);
      paramString.setRequestMethod("GET");
      int i = paramString.getResponseCode();
      if (i == 200)
      {
        InputStream localInputStream = paramString.getInputStream();
        byte[] arrayOfByte = new byte['Ѐ'];
        while (localInputStream.read(arrayOfByte, 0, arrayOfByte.length) != -1) {}
        localInputStream.close();
      }
      for (;;)
      {
        paramString.disconnect();
        return;
        logger.d("Util", "onFailuredownloadts httpstatus:" + i);
      }
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  private static void downloadm3u8InThread(String paramString1, String paramString2)
  {
    new Util.2(paramString2, paramString1).start();
  }
  
  public static int getAndroidSDKVersion()
  {
    try
    {
      int i = Integer.valueOf(Build.VERSION.SDK_INT).intValue();
      return i;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      localNumberFormatException.printStackTrace();
    }
    return 1;
  }
  
  public static String getCurrentApn(Context paramContext)
  {
    Object localObject = null;
    NetworkInfo localNetworkInfo = null;
    if (getAndroidSDKVersion() < 17)
    {
      Cursor localCursor = paramContext.getContentResolver().query(PREFERRED_APN_URI, null, null, null, null);
      for (localObject = localNetworkInfo;; localObject = localCursor.getString(localCursor.getColumnIndex("apn")))
      {
        paramContext = (Context)localObject;
        if (localCursor == null) {
          break;
        }
        paramContext = (Context)localObject;
        if (!localCursor.moveToNext()) {
          break;
        }
      }
    }
    localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getNetworkInfo(0);
    paramContext = (Context)localObject;
    if (localNetworkInfo != null)
    {
      paramContext = (Context)localObject;
      if (localNetworkInfo.getExtraInfo() != null)
      {
        if ((!localNetworkInfo.getExtraInfo().equals("cmnet")) || (!localNetworkInfo.isConnected())) {
          break label121;
        }
        paramContext = "cmnet";
      }
    }
    label121:
    do
    {
      do
      {
        return paramContext;
        paramContext = (Context)localObject;
      } while (!localNetworkInfo.getExtraInfo().equals("cmwap"));
      paramContext = (Context)localObject;
    } while (!localNetworkInfo.isConnected());
    return "cmwap";
  }
  
  public static String getIMSI(Context paramContext)
  {
    SharedPreferences localSharedPreferences = paramContext.getSharedPreferences("IMSI_INFO", 0);
    String str2 = localSharedPreferences.getString("IMSI_REC", null);
    String str1 = str2;
    if (str2 == null)
    {
      str1 = javagetIMSI(paramContext);
      paramContext = localSharedPreferences.edit();
      paramContext.putString("IMSI_REC", str1);
      paramContext.commit();
    }
    return str1;
  }
  
  public static void installApk(Context paramContext, String paramString)
  {
    try
    {
      File localFile = new File(Environment.getExternalStorageDirectory(), paramString);
      if (localFile.exists()) {
        localFile.delete();
      }
      localFile.createNewFile();
      Object localObject = new FileOutputStream(localFile);
      paramString = paramContext.getResources().getAssets().open(paramString);
      byte[] arrayOfByte = new byte['Ѐ'];
      for (int i = paramString.read(arrayOfByte); i > 0; i = paramString.read(arrayOfByte)) {
        ((FileOutputStream)localObject).write(arrayOfByte);
      }
      paramString = new Intent("android.intent.action.VIEW");
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("application/vnd");
      ((StringBuilder)localObject).append(".android.p");
      ((StringBuilder)localObject).append("ackage-archive");
      paramString.setDataAndType(Uri.fromFile(localFile), ((StringBuilder)localObject).toString());
      paramContext.startActivity(paramString);
      return;
    }
    catch (IOException paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public static boolean isWifiConnected(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.isConnected()) && (paramContext.getType() == 1);
  }
  
  public static int javaGetNetworkType(Context paramContext)
  {
    return checkNetWork(paramContext);
  }
  
  public static String javaGetUserAgent()
  {
    String str2 = Build.BRAND + "_" + Build.MANUFACTURER + "_" + Build.MODEL;
    String str1 = Pattern.compile("[^a-zA-Z0-9_]").matcher(str2.replace(" ", "_")).replaceAll("").trim();
    if ((str1 == null) || (str2.equalsIgnoreCase("__"))) {
      str1 = "android";
    }
    return str1.toLowerCase() + "_android";
  }
  
  public static byte[] javaUnGZip(byte[] paramArrayOfByte)
  {
    ByteArrayOutputStream localByteArrayOutputStream;
    try
    {
      paramArrayOfByte = new GZIPInputStream(new ByteArrayInputStream(paramArrayOfByte));
      localByteArrayOutputStream = new ByteArrayOutputStream();
      byte[] arrayOfByte = new byte['Ѐ'];
      for (;;)
      {
        int i = paramArrayOfByte.read(arrayOfByte, 0, arrayOfByte.length);
        if (i == -1) {
          break;
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      paramArrayOfByte.close();
    }
    catch (IOException paramArrayOfByte)
    {
      paramArrayOfByte.printStackTrace();
      return null;
    }
    localByteArrayOutputStream.close();
    paramArrayOfByte = localByteArrayOutputStream.toByteArray();
    return paramArrayOfByte;
  }
  
  public static String javagetIMSI(Context paramContext)
  {
    Object localObject1 = (TelephonyManager)paramContext.getSystemService("phone");
    if (((TelephonyManager)localObject1).getSimState() == 5) {}
    for (localObject1 = ((TelephonyManager)localObject1).getSubscriberId();; localObject1 = null)
    {
      if ((localObject1 != null) && (!((String)localObject1).startsWith("00")) && (CheckPhoneNumber2((String)localObject1) == 1)) {}
      for (;;)
      {
        Object localObject4 = localObject1;
        label48:
        return localObject4;
        try
        {
          Object localObject2 = Class.forName("com.mediatek.telephony.TelephonyManagerEx");
          localObject4 = ((Class)localObject2).getDeclaredMethod("getDefault", new Class[0]).invoke(null, new Object[0]);
          localObject2 = (String)((Class)localObject2).getDeclaredMethod("getSubscriberId", new Class[] { Integer.TYPE }).invoke(localObject4, new Object[] { Integer.valueOf(1) });
          if ((localObject2 != null) && (!((String)localObject2).startsWith("00")) && (CheckPhoneNumber2((String)localObject2) == 1)) {
            return localObject2;
          }
          try
          {
            paramContext = (String)Class.forName("android.telephony.TelephonyManager2").getDeclaredMethod("getSubscriberId", new Class[0]).invoke(paramContext.getSystemService("phone2"), new Object[0]);
            if ((paramContext != null) && (!paramContext.startsWith("00")))
            {
              localObject4 = paramContext;
              if (CheckPhoneNumber2(paramContext) == 1) {
                break label48;
              }
            }
            if ((localObject1 == null) || (((String)localObject1).startsWith("00")) || (((String)localObject1).trim().length() <= 0))
            {
              if ((localObject2 != null) && (!((String)localObject2).startsWith("00")) && (((String)localObject2).trim().length() > 0)) {
                return localObject2;
              }
              if ((paramContext != null) && (!paramContext.startsWith("00")))
              {
                localObject4 = paramContext;
                if (paramContext.trim().length() > 0) {
                  break label48;
                }
              }
              paramContext = new StringBuilder(16);
              paramContext.append("46002");
              localObject1 = new Random();
              int i = 0;
              while (i < 10)
              {
                paramContext.append(((Random)localObject1).nextInt(10));
                i += 1;
              }
              return paramContext.toString();
            }
          }
          catch (Exception paramContext)
          {
            for (;;)
            {
              paramContext = null;
            }
          }
        }
        catch (Exception localException)
        {
          for (;;)
          {
            Object localObject3 = null;
          }
        }
      }
    }
  }
  
  public static void setDataConnectionState(Context paramContext, boolean paramBoolean)
  {
    try
    {
      paramContext = (ConnectivityManager)paramContext.getSystemService("connectivity");
      paramContext.getClass().getMethod("setMobileDataEnabled", new Class[] { Boolean.TYPE }).invoke(paramContext, new Object[] { Boolean.valueOf(paramBoolean) });
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
}
