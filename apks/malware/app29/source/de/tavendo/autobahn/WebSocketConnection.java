package de.tavendo.autobahn;

import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.util.Log;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.channels.SocketChannel;
import java.util.List;
import org.apache.http.message.BasicNameValuePair;

public class WebSocketConnection
  implements WebSocket
{
  private static final boolean DEBUG = true;
  private static final String TAG = WebSocketConnection.class.getName();
  private boolean mActive;
  protected Handler mMasterHandler;
  protected WebSocketOptions mOptions;
  private boolean mPrevConnected;
  protected WebSocketReader mReader;
  protected SocketChannel mTransportChannel;
  protected WebSocketWriter mWriter;
  protected HandlerThread mWriterThread;
  private WebSocket.ConnectionHandler mWsHandler;
  private List<BasicNameValuePair> mWsHeaders;
  private String mWsHost;
  private String mWsPath;
  private int mWsPort;
  private String mWsQuery;
  private String mWsScheme;
  private String[] mWsSubprotocols;
  private URI mWsUri;
  
  public WebSocketConnection()
  {
    Log.d(TAG, "created");
    createHandler();
    this.mActive = false;
    this.mPrevConnected = false;
  }
  
  /* Error */
  private void failConnection(int paramInt, String paramString)
  {
    // Byte code:
    //   0: getstatic 50	de/tavendo/autobahn/WebSocketConnection:TAG	Ljava/lang/String;
    //   3: new 116	java/lang/StringBuilder
    //   6: dup
    //   7: ldc 118
    //   9: invokespecial 121	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   12: iload_1
    //   13: invokevirtual 125	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   16: ldc 127
    //   18: invokevirtual 130	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   21: aload_2
    //   22: invokevirtual 130	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   25: invokevirtual 133	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   28: invokestatic 62	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   31: pop
    //   32: aload_0
    //   33: getfield 135	de/tavendo/autobahn/WebSocketConnection:mReader	Lde/tavendo/autobahn/WebSocketReader;
    //   36: ifnull +83 -> 119
    //   39: aload_0
    //   40: getfield 135	de/tavendo/autobahn/WebSocketConnection:mReader	Lde/tavendo/autobahn/WebSocketReader;
    //   43: invokevirtual 140	de/tavendo/autobahn/WebSocketReader:quit	()V
    //   46: aload_0
    //   47: getfield 135	de/tavendo/autobahn/WebSocketConnection:mReader	Lde/tavendo/autobahn/WebSocketReader;
    //   50: invokevirtual 143	de/tavendo/autobahn/WebSocketReader:join	()V
    //   53: aload_0
    //   54: getfield 145	de/tavendo/autobahn/WebSocketConnection:mWriter	Lde/tavendo/autobahn/WebSocketWriter;
    //   57: ifnull +82 -> 139
    //   60: aload_0
    //   61: getfield 145	de/tavendo/autobahn/WebSocketConnection:mWriter	Lde/tavendo/autobahn/WebSocketWriter;
    //   64: new 147	de/tavendo/autobahn/WebSocketMessage$Quit
    //   67: dup
    //   68: invokespecial 148	de/tavendo/autobahn/WebSocketMessage$Quit:<init>	()V
    //   71: invokevirtual 154	de/tavendo/autobahn/WebSocketWriter:forward	(Ljava/lang/Object;)V
    //   74: aload_0
    //   75: getfield 156	de/tavendo/autobahn/WebSocketConnection:mWriterThread	Landroid/os/HandlerThread;
    //   78: invokevirtual 159	android/os/HandlerThread:join	()V
    //   81: aload_0
    //   82: getfield 161	de/tavendo/autobahn/WebSocketConnection:mTransportChannel	Ljava/nio/channels/SocketChannel;
    //   85: ifnull +74 -> 159
    //   88: aload_0
    //   89: getfield 161	de/tavendo/autobahn/WebSocketConnection:mTransportChannel	Ljava/nio/channels/SocketChannel;
    //   92: invokevirtual 166	java/nio/channels/SocketChannel:close	()V
    //   95: aload_0
    //   96: iload_1
    //   97: aload_2
    //   98: invokespecial 89	de/tavendo/autobahn/WebSocketConnection:onClose	(ILjava/lang/String;)V
    //   101: getstatic 50	de/tavendo/autobahn/WebSocketConnection:TAG	Ljava/lang/String;
    //   104: ldc -88
    //   106: invokestatic 62	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   109: pop
    //   110: return
    //   111: astore_3
    //   112: aload_3
    //   113: invokevirtual 171	java/lang/InterruptedException:printStackTrace	()V
    //   116: goto -63 -> 53
    //   119: getstatic 50	de/tavendo/autobahn/WebSocketConnection:TAG	Ljava/lang/String;
    //   122: ldc -83
    //   124: invokestatic 62	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   127: pop
    //   128: goto -75 -> 53
    //   131: astore_3
    //   132: aload_3
    //   133: invokevirtual 171	java/lang/InterruptedException:printStackTrace	()V
    //   136: goto -55 -> 81
    //   139: getstatic 50	de/tavendo/autobahn/WebSocketConnection:TAG	Ljava/lang/String;
    //   142: ldc -81
    //   144: invokestatic 62	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   147: pop
    //   148: goto -67 -> 81
    //   151: astore_3
    //   152: aload_3
    //   153: invokevirtual 176	java/io/IOException:printStackTrace	()V
    //   156: goto -61 -> 95
    //   159: getstatic 50	de/tavendo/autobahn/WebSocketConnection:TAG	Ljava/lang/String;
    //   162: ldc -78
    //   164: invokestatic 62	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   167: pop
    //   168: goto -73 -> 95
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	171	0	this	WebSocketConnection
    //   0	171	1	paramInt	int
    //   0	171	2	paramString	String
    //   111	2	3	localInterruptedException1	InterruptedException
    //   131	2	3	localInterruptedException2	InterruptedException
    //   151	2	3	localIOException	java.io.IOException
    // Exception table:
    //   from	to	target	type
    //   46	53	111	java/lang/InterruptedException
    //   74	81	131	java/lang/InterruptedException
    //   88	95	151	java/io/IOException
  }
  
  private void onClose(int paramInt, String paramString)
  {
    boolean bool;
    if (paramInt != 2)
    {
      bool = false;
      if (paramInt != 3) {}
    }
    else
    {
      bool = scheduleReconnect();
    }
    if (this.mWsHandler != null)
    {
      if (bool) {}
      try
      {
        this.mWsHandler.onClose(7, paramString);
        return;
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return;
      }
      this.mWsHandler.onClose(paramInt, paramString);
      return;
    }
    Log.d(TAG, "mWsHandler already NULL");
  }
  
  public void connect(String paramString, WebSocket.ConnectionHandler paramConnectionHandler)
  {
    connect(paramString, null, paramConnectionHandler, new WebSocketOptions(), null);
  }
  
  public void connect(String paramString, WebSocket.ConnectionHandler paramConnectionHandler, WebSocketOptions paramWebSocketOptions)
  {
    connect(paramString, null, paramConnectionHandler, paramWebSocketOptions, null);
  }
  
  public void connect(String paramString, String[] paramArrayOfString, WebSocket.ConnectionHandler paramConnectionHandler, WebSocketOptions paramWebSocketOptions, List<BasicNameValuePair> paramList)
  {
    if ((this.mTransportChannel != null) && (this.mTransportChannel.isConnected())) {
      throw new WebSocketException("already connected");
    }
    try
    {
      this.mWsUri = new URI(paramString);
      if ((!this.mWsUri.getScheme().equals("ws")) && (!this.mWsUri.getScheme().equals("wss"))) {
        throw new WebSocketException("unsupported scheme for WebSockets URI");
      }
    }
    catch (URISyntaxException paramString)
    {
      throw new WebSocketException("invalid WebSockets URI");
    }
    if (this.mWsUri.getScheme().equals("wss")) {
      throw new WebSocketException("secure WebSockets not implemented");
    }
    this.mWsScheme = this.mWsUri.getScheme();
    if (this.mWsUri.getPort() == -1) {
      if (this.mWsScheme.equals("ws")) {
        this.mWsPort = 80;
      }
    }
    while (this.mWsUri.getHost() == null)
    {
      throw new WebSocketException("no host specified in WebSockets URI");
      this.mWsPort = 443;
      continue;
      this.mWsPort = this.mWsUri.getPort();
    }
    this.mWsHost = this.mWsUri.getHost();
    if ((this.mWsUri.getRawPath() == null) || (this.mWsUri.getRawPath().equals("")))
    {
      this.mWsPath = "/";
      if ((this.mWsUri.getRawQuery() != null) && (!this.mWsUri.getRawQuery().equals(""))) {
        break label332;
      }
    }
    label332:
    for (this.mWsQuery = null;; this.mWsQuery = this.mWsUri.getRawQuery())
    {
      this.mWsSubprotocols = paramArrayOfString;
      this.mWsHeaders = paramList;
      this.mWsHandler = paramConnectionHandler;
      this.mOptions = new WebSocketOptions(paramWebSocketOptions);
      this.mActive = true;
      new WebSocketConnection.WebSocketConnector(this, null).start();
      return;
      this.mWsPath = this.mWsUri.getRawPath();
      break;
    }
  }
  
  protected void createHandler()
  {
    this.mMasterHandler = new WebSocketConnection.2(this, Looper.getMainLooper());
  }
  
  protected void createReader()
  {
    this.mReader = new WebSocketReader(this.mMasterHandler, this.mTransportChannel, this.mOptions, "WebSocketReader");
    this.mReader.start();
    Log.d(TAG, "WS reader created and started");
  }
  
  protected void createWriter()
  {
    this.mWriterThread = new HandlerThread("WebSocketWriter");
    this.mWriterThread.start();
    this.mWriter = new WebSocketWriter(this.mWriterThread.getLooper(), this.mMasterHandler, this.mTransportChannel, this.mOptions);
    Log.d(TAG, "WS writer created and started");
  }
  
  public void disconnect()
  {
    if (this.mWriter != null)
    {
      this.mWriter.forward(new WebSocketMessage.Close(1000));
      if (this.mReader == null) {
        break label62;
      }
      this.mReader.quit();
    }
    for (;;)
    {
      this.mActive = false;
      this.mPrevConnected = false;
      return;
      Log.d(TAG, "could not send Close .. writer already NULL");
      break;
      label62:
      Log.d(TAG, "could not send Close .. reader already NULL");
    }
  }
  
  public boolean isConnected()
  {
    return (this.mTransportChannel != null) && (this.mTransportChannel.isConnected());
  }
  
  protected void processAppMessage(Object paramObject) {}
  
  public boolean reconnect()
  {
    if ((!isConnected()) && (this.mWsUri != null))
    {
      new WebSocketConnection.WebSocketConnector(this, null).start();
      return true;
    }
    return false;
  }
  
  protected boolean scheduleReconnect()
  {
    int i = this.mOptions.getReconnectInterval();
    if ((this.mActive) && (this.mPrevConnected) && (i > 0)) {}
    for (boolean bool = true;; bool = false)
    {
      if (bool)
      {
        Log.d(TAG, "Reconnection scheduled");
        this.mMasterHandler.postDelayed(new WebSocketConnection.1(this), i);
      }
      return bool;
    }
  }
  
  public void sendBinaryMessage(byte[] paramArrayOfByte)
  {
    this.mWriter.forward(new WebSocketMessage.BinaryMessage(paramArrayOfByte));
  }
  
  public void sendRawTextMessage(byte[] paramArrayOfByte)
  {
    this.mWriter.forward(new WebSocketMessage.RawTextMessage(paramArrayOfByte));
  }
  
  public void sendTextMessage(String paramString)
  {
    this.mWriter.forward(new WebSocketMessage.TextMessage(paramString));
  }
}
