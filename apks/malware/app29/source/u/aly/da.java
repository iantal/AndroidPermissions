package u.aly;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

class da
  extends di<at>
{
  private da() {}
  
  public void a(gw paramGw, at paramAt)
  {
    paramGw.f();
    Object localObject = paramGw.h();
    if (((gt)localObject).b == 0)
    {
      paramGw.g();
      if (!paramAt.c()) {
        throw new cz("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
    }
    else
    {
      switch (((gt)localObject).c)
      {
      default: 
        gz.a(paramGw, ((gt)localObject).b);
      }
      for (;;)
      {
        paramGw.i();
        break;
        if (((gt)localObject).b == 13)
        {
          localObject = paramGw.j();
          paramAt.a = new HashMap(((gv)localObject).c * 2);
          int i = 0;
          while (i < ((gv)localObject).c)
          {
            String str = paramGw.v();
            au localAu = new au();
            localAu.a(paramGw);
            paramAt.a.put(str, localAu);
            i += 1;
          }
          paramGw.k();
          paramAt.a(true);
        }
        else
        {
          gz.a(paramGw, ((gt)localObject).b);
          continue;
          if (((gt)localObject).b == 8)
          {
            paramAt.b = paramGw.s();
            paramAt.b(true);
          }
          else
          {
            gz.a(paramGw, ((gt)localObject).b);
            continue;
            if (((gt)localObject).b == 11)
            {
              paramAt.c = paramGw.v();
              paramAt.c(true);
            }
            else
            {
              gz.a(paramGw, ((gt)localObject).b);
            }
          }
        }
      }
    }
    paramAt.e();
  }
  
  public void b(gw paramGw, at paramAt)
  {
    paramAt.e();
    paramGw.a(at.f());
    if (paramAt.a != null)
    {
      paramGw.a(at.g());
      paramGw.a(new gv((byte)11, (byte)12, paramAt.a.size()));
      Iterator localIterator = paramAt.a.entrySet().iterator();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        paramGw.a((String)localEntry.getKey());
        ((au)localEntry.getValue()).b(paramGw);
      }
      paramGw.d();
      paramGw.b();
    }
    paramGw.a(at.h());
    paramGw.a(paramAt.b);
    paramGw.b();
    if (paramAt.c != null)
    {
      paramGw.a(at.i());
      paramGw.a(paramAt.c);
      paramGw.b();
    }
    paramGw.c();
    paramGw.a();
  }
}
