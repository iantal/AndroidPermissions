package com.loopj.android.http;

import android.os.SystemClock;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Iterator;
import javax.net.ssl.SSLException;
import org.apache.http.NoHttpResponseException;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.protocol.HttpContext;

class RetryHandler
  implements HttpRequestRetryHandler
{
  private static HashSet<Class<?>> exceptionBlacklist;
  private static HashSet<Class<?>> exceptionWhitelist = new HashSet();
  private final int maxRetries;
  private final int retrySleepTimeMS;
  
  static
  {
    exceptionBlacklist = new HashSet();
    exceptionWhitelist.add(NoHttpResponseException.class);
    exceptionWhitelist.add(UnknownHostException.class);
    exceptionWhitelist.add(SocketException.class);
    exceptionBlacklist.add(InterruptedIOException.class);
    exceptionBlacklist.add(SSLException.class);
  }
  
  public RetryHandler(int paramInt1, int paramInt2)
  {
    this.maxRetries = paramInt1;
    this.retrySleepTimeMS = paramInt2;
  }
  
  protected boolean isInList(HashSet<Class<?>> paramHashSet, Throwable paramThrowable)
  {
    paramHashSet = paramHashSet.iterator();
    while (paramHashSet.hasNext()) {
      if (((Class)paramHashSet.next()).isInstance(paramThrowable)) {
        return true;
      }
    }
    return false;
  }
  
  public boolean retryRequest(IOException paramIOException, int paramInt, HttpContext paramHttpContext)
  {
    boolean bool2 = false;
    Boolean localBoolean = (Boolean)paramHttpContext.getAttribute("http.request_sent");
    int i;
    boolean bool1;
    if ((localBoolean != null) && (localBoolean.booleanValue()))
    {
      i = 1;
      if (paramInt <= this.maxRetries) {
        break label72;
      }
      bool1 = false;
    }
    for (;;)
    {
      if (bool1)
      {
        paramHttpContext = (HttpUriRequest)paramHttpContext.getAttribute("http.request");
        if (paramHttpContext == null)
        {
          return false;
          i = 0;
          break;
          label72:
          if (isInList(exceptionBlacklist, paramIOException))
          {
            bool1 = false;
            continue;
          }
          if (isInList(exceptionWhitelist, paramIOException))
          {
            bool1 = true;
            continue;
          }
          if (i != 0) {
            break label161;
          }
          bool1 = true;
          continue;
        }
        bool1 = bool2;
        if (!paramHttpContext.getMethod().equals("POST")) {
          bool1 = true;
        }
      }
    }
    for (;;)
    {
      if (bool1)
      {
        SystemClock.sleep(this.retrySleepTimeMS);
        return bool1;
      }
      paramIOException.printStackTrace();
      return bool1;
      label161:
      bool1 = true;
      break;
    }
  }
}
