package com.loopj.android.http;

import org.apache.http.Header;

public abstract class BaseJsonHttpResponseHandler<JSON_TYPE>
  extends TextHttpResponseHandler
{
  private static final String LOG_TAG = "BaseJsonHttpResponseHandler";
  
  public BaseJsonHttpResponseHandler()
  {
    super("UTF-8");
  }
  
  public BaseJsonHttpResponseHandler(String paramString)
  {
    super(paramString);
  }
  
  public final void onFailure(int paramInt, Throwable paramThrowable, String paramString)
  {
    super.onFailure(paramInt, paramThrowable, paramString);
  }
  
  public void onFailure(int paramInt, Header[] paramArrayOfHeader, String paramString, Throwable paramThrowable)
  {
    if (paramString != null)
    {
      new Thread(new BaseJsonHttpResponseHandler.2(this, paramString, paramInt, paramArrayOfHeader, paramThrowable)).start();
      return;
    }
    onFailure(paramInt, paramArrayOfHeader, paramThrowable, null, null);
  }
  
  public final void onFailure(int paramInt, Header[] paramArrayOfHeader, Throwable paramThrowable, String paramString)
  {
    super.onFailure(paramInt, paramArrayOfHeader, paramThrowable, paramString);
  }
  
  public abstract void onFailure(int paramInt, Header[] paramArrayOfHeader, Throwable paramThrowable, String paramString, JSON_TYPE paramJSON_TYPE);
  
  public final void onFailure(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte, Throwable paramThrowable)
  {
    super.onFailure(paramInt, paramArrayOfHeader, paramArrayOfByte, paramThrowable);
  }
  
  public final void onFailure(String paramString, Throwable paramThrowable)
  {
    super.onFailure(paramString, paramThrowable);
  }
  
  public final void onFailure(Throwable paramThrowable)
  {
    super.onFailure(paramThrowable);
  }
  
  public final void onFailure(Throwable paramThrowable, String paramString)
  {
    super.onFailure(paramThrowable, paramString);
  }
  
  public final void onSuccess(int paramInt, String paramString)
  {
    super.onSuccess(paramInt, paramString);
  }
  
  public void onSuccess(int paramInt, Header[] paramArrayOfHeader, String paramString)
  {
    if (paramInt != 204)
    {
      new Thread(new BaseJsonHttpResponseHandler.1(this, paramString, paramInt, paramArrayOfHeader)).start();
      return;
    }
    onSuccess(paramInt, paramArrayOfHeader, null, null);
  }
  
  public abstract void onSuccess(int paramInt, Header[] paramArrayOfHeader, String paramString, JSON_TYPE paramJSON_TYPE);
  
  public final void onSuccess(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte)
  {
    super.onSuccess(paramInt, paramArrayOfHeader, paramArrayOfByte);
  }
  
  public final void onSuccess(String paramString)
  {
    super.onSuccess(paramString);
  }
  
  protected abstract JSON_TYPE parseResponse(String paramString);
}
