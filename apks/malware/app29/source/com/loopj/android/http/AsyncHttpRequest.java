package com.loopj.android.http;

import android.util.Log;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.UnknownHostException;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.protocol.HttpContext;

class AsyncHttpRequest
  implements Runnable
{
  private final AbstractHttpClient client;
  private final HttpContext context;
  private int executionCount;
  private final HttpUriRequest request;
  private final ResponseHandlerInterface responseHandler;
  
  public AsyncHttpRequest(AbstractHttpClient paramAbstractHttpClient, HttpContext paramHttpContext, HttpUriRequest paramHttpUriRequest, ResponseHandlerInterface paramResponseHandlerInterface)
  {
    this.client = paramAbstractHttpClient;
    this.context = paramHttpContext;
    this.request = paramHttpUriRequest;
    this.responseHandler = paramResponseHandlerInterface;
  }
  
  private void makeRequest()
  {
    if (!Thread.currentThread().isInterrupted())
    {
      if (this.request.getURI().getScheme() == null) {
        throw new MalformedURLException("No valid URI scheme was provided");
      }
      HttpResponse localHttpResponse = this.client.execute(this.request, this.context);
      if ((!Thread.currentThread().isInterrupted()) && (this.responseHandler != null)) {
        this.responseHandler.sendResponseMessage(localHttpResponse);
      }
    }
  }
  
  private void makeRequestWithRetries()
  {
    HttpRequestRetryHandler localHttpRequestRetryHandler = this.client.getHttpRequestRetryHandler();
    Object localObject = null;
    int j = 1;
    for (;;)
    {
      if (j != 0) {}
      try
      {
        makeRequest();
        return;
      }
      catch (UnknownHostException localUnknownHostException)
      {
        IOException localIOException1 = new IOException("UnknownHostException exception: " + localUnknownHostException.getMessage());
        for (;;)
        {
          try
          {
            if (this.executionCount <= 0) {
              break label183;
            }
            i = this.executionCount + 1;
            this.executionCount = i;
            if (!localHttpRequestRetryHandler.retryRequest(localIOException1, i, this.context)) {
              break label183;
            }
            bool = true;
            localObject = localIOException1;
            j = bool;
            if (!bool) {
              break;
            }
            localObject = localIOException1;
            j = bool;
            if (this.responseHandler == null) {
              break;
            }
            this.responseHandler.sendRetryMessage();
            localObject = localIOException1;
            j = bool;
          }
          catch (Exception localException1) {}
          Log.e("AsyncHttpRequest", "Unhandled exception origin cause", localException1);
          localObject = new IOException("Unhandled exception: " + localException1.getMessage());
          throw ((Throwable)localObject);
          bool = false;
        }
      }
      catch (NullPointerException localNullPointerException)
      {
        for (;;)
        {
          IOException localIOException2 = new IOException("NPE in HttpClient: " + localNullPointerException.getMessage());
          i = this.executionCount + 1;
          this.executionCount = i;
          bool = localHttpRequestRetryHandler.retryRequest(localIOException2, i, this.context);
        }
      }
      catch (IOException localIOException3)
      {
        for (;;)
        {
          int i = this.executionCount + 1;
          this.executionCount = i;
          boolean bool = localHttpRequestRetryHandler.retryRequest(localIOException3, i, this.context);
        }
      }
      catch (Exception localException2)
      {
        label183:
        for (;;) {}
      }
    }
  }
  
  public void run()
  {
    if (this.responseHandler != null) {
      this.responseHandler.sendStartMessage();
    }
    try
    {
      makeRequestWithRetries();
      if (this.responseHandler != null) {
        this.responseHandler.sendFinishMessage();
      }
      return;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        if (this.responseHandler != null) {
          this.responseHandler.sendFailureMessage(0, null, null, localIOException);
        }
      }
    }
  }
}
