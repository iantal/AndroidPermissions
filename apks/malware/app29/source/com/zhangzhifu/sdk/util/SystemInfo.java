package com.zhangzhifu.sdk.util;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.text.TextUtils;
import android.text.format.Formatter;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.zhangzhifu.sdk.db.SharePreferUtil;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.Proxy.Type;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SystemInfo
{
  public static final String CHINA_MOBILE = "mobile";
  public static final String CHINA_TELECOM = "telecom";
  public static final String CHINA_UNICOM = "unicom";
  public static final String CMWAP = "cmwap";
  public static final String CTWAP = "ctwap";
  public static String LOG_TAG = "platform";
  public static final String NETWORK_TYPE_3G_NET = "3g-net";
  public static final String NETWORK_TYPE_3G_WAP = "3g-wap";
  public static final String NETWORK_TYPE_EDGE_NET = "edge-net";
  public static final String NETWORK_TYPE_EDGE_WAP = "edge-wap";
  public static final String NETWORK_TYPE_GPRS_NET = "gprs-net";
  public static final String NETWORK_TYPE_GPRS_WAP = "gprs-wap";
  public static final String NETWORK_TYPE_WIFI = "wifi";
  public static Uri PREFERRED_APN_URI = Uri.parse("content://telephony/carriers/preferapn");
  public static final String TAG = "zhangPay_log";
  public static final int TYPE_CM_CU_WAP = 4;
  public static final int TYPE_CT_WAP = 5;
  public static final int TYPE_NET_WORK_DISABLED = 0;
  public static final int TYPE_NET_WORK_EXCEPSION = 1;
  public static final int TYPE_OTHER_NET = 6;
  public static final int TYPE_OTHER_WIFI = 3;
  public static final String UNIWAP = "uniwap";
  public static final String UNKNOW = "unknow";
  public static final String WAP_3G = "3gwap";
  private static String bU;
  private static String bY = "";
  private static String bZ;
  private static String ca = "00000000000";
  public static String cardType;
  private static boolean cb;
  private static boolean cc;
  private static String cd;
  private static int ce;
  private static int cf;
  private static String cg = "unknow";
  private static String ch;
  private static String ci;
  private static String cj;
  private static String ck;
  private static int cl;
  private static int cm = -1;
  private static int cn = -1;
  private static int co = -1;
  private static String cp = "";
  private static String cq = "";
  private static Map cr;
  private static String cs;
  private static String ct;
  public static PackageManager pm;
  
  public SystemInfo() {}
  
  public static void _getNetworkInfo(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    cg = "unknow";
    if (localNetworkInfo != null) {}
    switch (localNetworkInfo.getType())
    {
    default: 
      cg = "unknow";
      return;
    case 0: 
      int i = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
      paramContext = getProxy(paramContext);
      if (i == 1)
      {
        if (paramContext != null)
        {
          cg = "gprs-wap";
          return;
        }
        cg = "gprs-net";
        return;
      }
      if ((i == 2) || (i == 0))
      {
        if (paramContext != null)
        {
          cg = "edge-wap";
          return;
        }
        cg = "edge-net";
        return;
      }
      if (paramContext != null)
      {
        cg = "3g-wap";
        return;
      }
      cg = "3g-net";
      return;
    }
    cg = "wifi";
  }
  
  private static void c(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    cf = localDisplayMetrics.heightPixels;
    ce = localDisplayMetrics.widthPixels;
  }
  
  public static int checkNetworkType(Context paramContext)
  {
    try
    {
      NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localNetworkInfo == null) || (!localNetworkInfo.isAvailable()))
      {
        ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于无网络状态");
        return 6;
      }
      int i = localNetworkInfo.getType();
      if (i == 1)
      {
        ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于wifi网络");
        return 6;
      }
      if (i == 0)
      {
        paramContext = paramContext.getContentResolver().query(PREFERRED_APN_URI, null, null, null, null);
        if (paramContext != null)
        {
          paramContext.moveToFirst();
          String str = paramContext.getString(paramContext.getColumnIndex("user"));
          if (!TextUtils.isEmpty(str))
          {
            Log.i("", "代理：" + paramContext.getString(paramContext.getColumnIndex("proxy")));
            if (str.startsWith("ctwap"))
            {
              ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于电信wap网络");
              return 5;
            }
          }
        }
        paramContext.close();
        paramContext = localNetworkInfo.getExtraInfo();
        if (paramContext != null)
        {
          paramContext = paramContext.toLowerCase();
          if ((paramContext.equals("cmwap")) || (paramContext.equals("3gwap")) || (paramContext.equals("uniwap")))
          {
            ZhangPayLog.showSaveLog("zhangPay_log", "此刻手机处于移动联通wap网络");
            return 4;
          }
        }
      }
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
      return 6;
    }
    return 6;
  }
  
  public static String getBT(Context paramContext)
  {
    if (ck != null) {
      return ck;
    }
    paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo();
    int i;
    if (paramContext != null)
    {
      paramContext = paramContext.getMacAddress();
      if (paramContext != null)
      {
        ck = "";
        i = 0;
      }
    }
    for (;;)
    {
      if (i >= paramContext.length()) {
        return ck;
      }
      char c = paramContext.charAt(i);
      if (c != ':') {
        ck += c;
      }
      i += 1;
    }
  }
  
  public static String getCardType(Context paramContext)
  {
    for (;;)
    {
      try
      {
        paramContext = getIMSI(paramContext);
        ZhangPayLog.showSaveLog("==", "imsi" + paramContext);
        if (paramContext == null) {
          continue;
        }
        if ((paramContext.startsWith("46000")) || (paramContext.startsWith("46002")) || (paramContext.startsWith("46007"))) {
          cardType = "mobile";
        }
        if (paramContext.startsWith("46001")) {
          cardType = "unicom";
        }
        if (!paramContext.startsWith("46003")) {
          continue;
        }
        cardType = "telecom";
      }
      catch (Exception paramContext)
      {
        cardType = "unknow";
        continue;
        cardType = "unknow";
        continue;
      }
      return cardType;
      cardType = "unknow";
    }
  }
  
  public static int getCpId(Context paramContext)
  {
    if (cm != -1) {
      return cm;
    }
    try
    {
      cm = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_CPID");
      return cm;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        cm = 0;
        ZhangPayLog.showSaveLog("===", "得到CPID 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String getCpuName()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/cpuinfo")).readLine().split(":\\s+", 2)[1];
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return null;
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String getCurCpuFreq()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "N/A";
    }
    catch (IOException localIOException)
    {
      localIOException.printStackTrace();
    }
    return "N/A";
  }
  
  public static String getCurrentTime()
  {
    return new SimpleDateFormat("HHmmssSSS").format(Calendar.getInstance().getTime()) + ((int)(900.0D * Math.random()) + 100);
  }
  
  public static int getFee(Context paramContext)
  {
    if (co != -1) {
      return co;
    }
    try
    {
      co = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_FEE");
      return co;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        co = -1;
        ZhangPayLog.showSaveLog("===", "得到fee 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String getIMEI(Context paramContext)
  {
    if (bZ != null) {
      return bZ;
    }
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    bZ = paramContext;
    if (paramContext == null) {
      bZ = "";
    }
    return bZ;
  }
  
  public static String getIMSI(Context paramContext)
  {
    if (bU != null) {
      return bU;
    }
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    bU = paramContext;
    if (paramContext == null) {
      bU = "";
    }
    return bU;
  }
  
  public static String getLAC(Context paramContext)
  {
    if (cj != null) {
      return cj;
    }
    paramContext = (GsmCellLocation)((TelephonyManager)paramContext.getSystemService("phone")).getCellLocation();
    if (paramContext != null)
    {
      int i = paramContext.getLac();
      int j = paramContext.getCid();
      if (i != -1)
      {
        cj = i;
        if (j != -1) {
          cj = cj + "#" + j;
        }
      }
    }
    if (cj == null) {
      cj = "0000#00";
    }
    return cj;
  }
  
  public static String getMID(Context paramContext)
  {
    if (ch != null) {
      return ch;
    }
    paramContext = getSMSC() + '#' + getIMSI(paramContext);
    ch = paramContext;
    ci = paramContext;
    return ch;
  }
  
  public static String getMIDX(Context paramContext)
  {
    if (ci != null) {
      return ci;
    }
    paramContext = getMID(paramContext);
    ci = paramContext;
    return paramContext;
  }
  
  public static String getMTKDoubleSIMInfo(Context paramContext)
  {
    cr = new HashMap();
    paramContext = (TelephonyManager)paramContext.getSystemService("phone");
    cr.put("CallState", paramContext.getCallState());
    cr.put("DataState", paramContext.getDataState());
    cr.put("DeviceId", paramContext.getDeviceId());
    cr.put("Line1Number", paramContext.getLine1Number());
    cr.put("NetworkCountryIso", paramContext.getNetworkCountryIso());
    cr.put("NetworkOperator", paramContext.getNetworkOperator());
    cr.put("NetworkOperatorName", paramContext.getNetworkOperatorName());
    cr.put("SimSerialNumber", paramContext.getSimSerialNumber());
    cr.put("PhoneType", paramContext.getPhoneType());
    cr.put("SimCountryIso", paramContext.getSimCountryIso());
    cr.put("SimOperator", paramContext.getSimOperator());
    cr.put("SimOperatorName", paramContext.getSimOperatorName());
    cr.put("SimSerialNumber", paramContext.getSimSerialNumber());
    cr.put("SimState", paramContext.getSimState());
    cr.put("SubscriberId", paramContext.getSubscriberId());
    cs = (String)cr.get("SubscriberId");
    try
    {
      Method localMethod = paramContext.getClass().getDeclaredMethod("getCallStateGemini", new Class[] { Integer.TYPE });
      String str = "SIM卡1信息:\n" + bY;
      bY = str;
      bY = str + "\n\nSIM卡2信息:";
      cr.put("CallState_1", localMethod.invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("DataState_1", paramContext.getClass().getMethod("getDataStateGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("DeviceId_1", paramContext.getClass().getMethod("getDeviceIdGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("Line1Number_1", paramContext.getClass().getMethod("getLine1NumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("NetworkCountryIso_1", paramContext.getClass().getMethod("getNetworkCountryIsoGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("NetworkOperator_1", paramContext.getClass().getMethod("getNetworkOperatorGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("NetworkOperatorName_1", paramContext.getClass().getMethod("getNetworkOperatorNameGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SimSerialNumber_1", paramContext.getClass().getMethod("getSimSerialNumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("PhoneType_1", paramContext.getClass().getMethod("getPhoneTypeGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SimCountryIso_1", paramContext.getClass().getMethod("getSimCountryIsoGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SimOperator_1", paramContext.getClass().getMethod("getSimOperatorGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SimOperatorName_1", paramContext.getClass().getMethod("getSimOperatorNameGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SimSerialNumber_1", paramContext.getClass().getMethod("getSimSerialNumberGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SimState_1", paramContext.getClass().getMethod("getSimStateGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      cr.put("SubscriberId_1", paramContext.getClass().getMethod("getSubscriberIdGemini", new Class[] { Integer.TYPE }).invoke(paramContext, new Object[] { Integer.valueOf(1) }));
      ct = (String)cr.get("SubscriberId_1");
      if ((cs != null) || (cs.length() > 0)) {
        return cs;
      }
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        bY = "SIM卡信息:\n" + bY;
      }
      if ((cs != null) || ((cs.length() > 0) && (ct != null)) || (ct.length() > 0)) {
        return cs;
      }
      if ((cs == null) || ((cs.length() == 0) && (ct != null)) || (ct.length() > 0)) {
        return ct;
      }
    }
    return cs;
  }
  
  public static String getMaxCpuFreq()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  /* Error */
  public static String getMem_TOLAL()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore_0
    //   4: aconst_null
    //   5: astore_2
    //   6: new 386	java/io/BufferedReader
    //   9: dup
    //   10: new 388	java/io/FileReader
    //   13: dup
    //   14: ldc_w 703
    //   17: invokespecial 391	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   20: bipush 8
    //   22: invokespecial 706	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   25: astore_1
    //   26: aload_1
    //   27: astore_0
    //   28: aload_1
    //   29: invokevirtual 397	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   32: astore 4
    //   34: aload_2
    //   35: astore_0
    //   36: aload 4
    //   38: ifnull +6 -> 44
    //   41: aload 4
    //   43: astore_0
    //   44: aload_1
    //   45: invokevirtual 707	java/io/BufferedReader:close	()V
    //   48: new 249	java/lang/StringBuilder
    //   51: dup
    //   52: aload_0
    //   53: aload_0
    //   54: bipush 58
    //   56: invokevirtual 711	java/lang/String:indexOf	(I)I
    //   59: iconst_1
    //   60: iadd
    //   61: aload_0
    //   62: bipush 107
    //   64: invokevirtual 711	java/lang/String:indexOf	(I)I
    //   67: invokevirtual 715	java/lang/String:substring	(II)Ljava/lang/String;
    //   70: invokevirtual 411	java/lang/String:trim	()Ljava/lang/String;
    //   73: invokestatic 718	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   76: i2l
    //   77: invokestatic 721	java/lang/String:valueOf	(J)Ljava/lang/String;
    //   80: invokespecial 254	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   83: invokevirtual 264	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   86: areturn
    //   87: astore_2
    //   88: aconst_null
    //   89: astore_1
    //   90: aload_1
    //   91: astore_0
    //   92: aload_2
    //   93: invokevirtual 404	java/io/FileNotFoundException:printStackTrace	()V
    //   96: aload_3
    //   97: astore_0
    //   98: aload_1
    //   99: ifnull -51 -> 48
    //   102: aload_1
    //   103: invokevirtual 707	java/io/BufferedReader:close	()V
    //   106: aload_3
    //   107: astore_0
    //   108: goto -60 -> 48
    //   111: astore_0
    //   112: aload_0
    //   113: invokevirtual 405	java/io/IOException:printStackTrace	()V
    //   116: aload_3
    //   117: astore_0
    //   118: goto -70 -> 48
    //   121: astore_2
    //   122: aconst_null
    //   123: astore_1
    //   124: aload_1
    //   125: astore_0
    //   126: aload_2
    //   127: invokevirtual 405	java/io/IOException:printStackTrace	()V
    //   130: aload_3
    //   131: astore_0
    //   132: aload_1
    //   133: ifnull -85 -> 48
    //   136: aload_1
    //   137: invokevirtual 707	java/io/BufferedReader:close	()V
    //   140: aload_3
    //   141: astore_0
    //   142: goto -94 -> 48
    //   145: astore_0
    //   146: aload_0
    //   147: invokevirtual 405	java/io/IOException:printStackTrace	()V
    //   150: aload_3
    //   151: astore_0
    //   152: goto -104 -> 48
    //   155: astore_1
    //   156: aload_0
    //   157: ifnull +7 -> 164
    //   160: aload_0
    //   161: invokevirtual 707	java/io/BufferedReader:close	()V
    //   164: aload_1
    //   165: athrow
    //   166: astore_0
    //   167: aload_0
    //   168: invokevirtual 405	java/io/IOException:printStackTrace	()V
    //   171: goto -7 -> 164
    //   174: astore_1
    //   175: aload_1
    //   176: invokevirtual 405	java/io/IOException:printStackTrace	()V
    //   179: goto -131 -> 48
    //   182: astore_2
    //   183: goto -93 -> 90
    //   186: astore_2
    //   187: goto -63 -> 124
    //   190: astore_1
    //   191: goto -35 -> 156
    // Local variable table:
    //   start	length	slot	name	signature
    //   3	105	0	localObject1	Object
    //   111	2	0	localIOException1	IOException
    //   117	25	0	localObject2	Object
    //   145	2	0	localIOException2	IOException
    //   151	10	0	localObject3	Object
    //   166	2	0	localIOException3	IOException
    //   25	112	1	localBufferedReader	BufferedReader
    //   155	10	1	localObject4	Object
    //   174	2	1	localIOException4	IOException
    //   190	1	1	localObject5	Object
    //   5	30	2	localObject6	Object
    //   87	6	2	localFileNotFoundException1	FileNotFoundException
    //   121	6	2	localIOException5	IOException
    //   182	1	2	localFileNotFoundException2	FileNotFoundException
    //   186	1	2	localIOException6	IOException
    //   1	150	3	localObject7	Object
    //   32	10	4	str	String
    // Exception table:
    //   from	to	target	type
    //   6	26	87	java/io/FileNotFoundException
    //   102	106	111	java/io/IOException
    //   6	26	121	java/io/IOException
    //   136	140	145	java/io/IOException
    //   28	34	155	finally
    //   92	96	155	finally
    //   126	130	155	finally
    //   160	164	166	java/io/IOException
    //   44	48	174	java/io/IOException
    //   28	34	182	java/io/FileNotFoundException
    //   28	34	186	java/io/IOException
    //   6	26	190	finally
  }
  
  public static String getMem_UNUSED(Context paramContext)
  {
    try
    {
      paramContext = (ActivityManager)paramContext.getSystemService("activity");
      ActivityManager.MemoryInfo localMemoryInfo = new ActivityManager.MemoryInfo();
      paramContext.getMemoryInfo(localMemoryInfo);
      l = localMemoryInfo.availMem / 1024L;
      return l;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        long l = 0L;
      }
    }
  }
  
  public static String getMinCpuFreq()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static String getMobileNum(Context paramContext)
  {
    return SharePreferUtil.getMOBILEFromDataBase(paramContext);
  }
  
  public static String getNativePhoneNumber(Context paramContext)
  {
    return ((TelephonyManager)paramContext.getSystemService("phone")).getLine1Number();
  }
  
  public static String getNetworkInfo(Context paramContext)
  {
    _getNetworkInfo(paramContext);
    return cg;
  }
  
  public static int getNetworkState(Context paramContext)
  {
    NetworkInfo localNetworkInfo = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if (localNetworkInfo != null)
    {
      switch (localNetworkInfo.getType())
      {
      default: 
        return 0;
      case 0: 
        int i = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
        paramContext = getProxy(paramContext);
        if ((i == 1) || (i == 2))
        {
          if (paramContext != null) {
            return 4;
          }
          return 6;
        }
        if (i == 4)
        {
          if (paramContext != null) {
            return 5;
          }
          return 6;
        }
        if ((i == 5) || (i == 6))
        {
          if (paramContext != null) {
            return 5;
          }
          return 6;
        }
        if ((i == 3) || (i == 8))
        {
          if (paramContext != null) {
            return 4;
          }
          return 6;
        }
        if (paramContext != null) {
          return 4;
        }
        return 6;
      }
      return 3;
    }
    return 0;
  }
  
  public static String getOrderId()
  {
    return cq;
  }
  
  public static String getP(Context paramContext)
  {
    if ((cp != null) && (!cp.trim().equals(""))) {
      return cp;
    }
    try
    {
      cp = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getString("ZPAY_P");
      return cp;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        cp = "";
        ZhangPayLog.showSaveLog("===", "得到备用字段 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static String getPackageName(Context paramContext)
  {
    if (paramContext == null) {
      return null;
    }
    paramContext = paramContext.getPackageName();
    ZhangPayLog.showSaveLog("", "包名为" + paramContext);
    return paramContext;
  }
  
  public static java.net.Proxy getProxy(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((paramContext != null) && (paramContext.getType() == 1)) {
        return null;
      }
      paramContext = android.net.Proxy.getDefaultHost();
      if ((paramContext != null) && (!paramContext.equals("")))
      {
        paramContext = new java.net.Proxy(Proxy.Type.HTTP, new InetSocketAddress(android.net.Proxy.getDefaultHost(), android.net.Proxy.getDefaultPort()));
        return paramContext;
      }
    }
    catch (Exception paramContext) {}
    return null;
  }
  
  public static String getSDAvailableSize(Context paramContext)
  {
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l = localStatFs.getBlockSize();
      paramContext = Formatter.formatFileSize(paramContext, localStatFs.getAvailableBlocks() * l);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static String getSDTotalSize(Context paramContext)
  {
    try
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l = localStatFs.getBlockSize();
      paramContext = Formatter.formatFileSize(paramContext, localStatFs.getBlockCount() * l);
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return null;
  }
  
  public static String getSMSC()
  {
    return ca;
  }
  
  public static String getScreen(Context paramContext)
  {
    if (cd != null) {
      return cd;
    }
    paramContext = getScreenHeight(paramContext) + "*" + getScreenWidth(paramContext);
    cd = paramContext;
    return paramContext;
  }
  
  public static int getScreenHeight(Context paramContext)
  {
    if (cf > 0) {
      return cf;
    }
    c(paramContext);
    return cf;
  }
  
  public static int getScreenWidth(Context paramContext)
  {
    if (ce > 0) {
      return ce;
    }
    c(paramContext);
    return ce;
  }
  
  public static int getServiceId(Context paramContext)
  {
    if (cn != -1) {
      return cn;
    }
    try
    {
      cn = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 128).metaData.getInt("ZPAY_APPFEE_ID");
      return cn;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        cn = -1;
        ZhangPayLog.showSaveLog("===", "得到serviceId 异常" + paramContext.getMessage());
      }
    }
  }
  
  public static int getSimState(Context paramContext)
  {
    try
    {
      cl = ((TelephonyManager)paramContext.getSystemService("phone")).getSimState();
      return cl;
    }
    catch (Exception paramContext)
    {
      for (;;) {}
    }
  }
  
  public static boolean hasSuperAction()
  {
    return cc;
  }
  
  public static boolean isMobileNO(String paramString)
  {
    if ((paramString == null) || (paramString.trim().equals(""))) {
      return false;
    }
    Matcher localMatcher = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0-9]))\\d{8}$").matcher(paramString);
    ZhangPayLog.showSaveLog("", "输入的电话号码是 " + paramString + " ,,," + localMatcher.matches());
    return localMatcher.matches();
  }
  
  public static boolean isStartService()
  {
    return cb;
  }
  
  public static void setCpId(int paramInt)
  {
    cm = paramInt;
  }
  
  public static void setFee(int paramInt)
  {
    co = paramInt;
  }
  
  public static void setHasSuperAction(boolean paramBoolean)
  {
    cc = paramBoolean;
  }
  
  public static void setOrderId(String paramString)
  {
    cq = paramString;
  }
  
  public static void setSMSC(Context paramContext, String paramString)
  {
    if ((paramString != null) && (!paramString.trim().equals("")) && (paramString.length() == 11))
    {
      ca = paramString;
      paramContext = getSMSC() + '#' + getIMSI(paramContext);
      ch = paramContext;
      ci = paramContext;
    }
  }
  
  public static void setServiceId(int paramInt)
  {
    cn = paramInt;
  }
  
  public static void setStartServiceState(boolean paramBoolean)
  {
    cb = paramBoolean;
  }
  
  public static void updateIMSI(Context paramContext)
  {
    paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    bU = paramContext;
    if (paramContext != null)
    {
      if ((bU.startsWith("46000")) || (bU.startsWith("46002")) || (bU.startsWith("46007")))
      {
        cardType = "mobile";
        return;
      }
      if (bU.startsWith("46001"))
      {
        cardType = "unicom";
        return;
      }
      if (bU.startsWith("46003"))
      {
        cardType = "telecom";
        return;
      }
      cardType = "unknow";
      return;
    }
    bU = "";
    cardType = "unknown";
  }
  
  public long[] getSDCardMemory()
  {
    long[] arrayOfLong = new long[2];
    if ("mounted".equals(Environment.getExternalStorageState()))
    {
      StatFs localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      long l1 = localStatFs.getBlockSize();
      long l2 = localStatFs.getBlockCount();
      long l3 = localStatFs.getAvailableBlocks();
      arrayOfLong[0] = (l2 * l1);
      arrayOfLong[1] = (l1 * l3);
    }
    return arrayOfLong;
  }
}
