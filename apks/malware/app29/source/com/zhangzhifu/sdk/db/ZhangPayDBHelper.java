package com.zhangzhifu.sdk.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class ZhangPayDBHelper
  extends SQLiteOpenHelper
{
  public static final String DB_NAME = "zpay_db";
  public static final int DB_VERSION = 19;
  public static final String FILTER_TABLE = "filter";
  public static final String FILTER_TABLE_FILTER_ID = "_ID";
  public static final String FILTER_TABLE_FILTER_INFO = "filter_info";
  public static final String FILTER_TABLE_FILTER_PORT = "filter_port";
  public static final String FILTER_TABLE_INSERT_TIME = "insert_time";
  public static final String IVR_TABLE = "ivr";
  public static final String IVR_TABLE_ID = "_ID";
  public static final String IVR_TABLE_PORT = "port";
  public static final String IVR_TABLE_SMS_DELAY_TIME = "sms_delay_time";
  public static final String LOCK = "lock";
  public static final String MMPROCEDURE_AURL = "aurl";
  public static final String MMPROCEDURE_ID = "_ID";
  public static final String MMPROCEDURE_SMS_NUM = "smsnum";
  public static final String MMPROCEDURE_TIMER = "timer";
  public static final String MMPROCEDURE_TYPE = "type";
  public static final String MMPROCEDURE_WHICH_WAP_ID = "pc_which_id";
  public static final String MMRPROCEDURE_AURL = "aurl";
  public static final String MMRPROCEDURE_ID = "_ID";
  public static final String MMRPROCEDURE_SMS_NUM = "smsnum";
  public static final String MMRPROCEDURE_TABLE = "mmrprocedure";
  public static final String MMRPROCEDURE_TIMER = "timer";
  public static final String MMRPROCEDURE_TYPE = "type";
  public static final String MMRPROCEDURE_WHICH_WAP_ID = "pc_which_id";
  public static final String MMR_ID = "_ID";
  public static final String MMR_TABLE = "mmr";
  public static final String MM_ID = "_ID";
  public static final String MSPROCEDURE_AURL = "aurl";
  public static final String MSPROCEDURE_ID = "_ID";
  public static final String MSPROCEDURE_SMS_NUM = "smsnum";
  public static final String MSPROCEDURE_TABLE = "msprocedure";
  public static final String MSPROCEDURE_TIMER = "timer";
  public static final String MSPROCEDURE_TYPE = "type";
  public static final String MSPROCEDURE_WHICH_WAP_ID = "pc_which_id";
  public static final String MS_ID = "_ID";
  public static final String MS_TABLE = "ms";
  public static final String ONLINEGAMEPROCEDURE_AURL = "aurl";
  public static final String ONLINEGAMEPROCEDURE_ID = "_ID";
  public static final String ONLINEGAMEPROCEDURE_SMS_NUM = "smsnum";
  public static final String ONLINEGAMEPROCEDURE_TABLE = "onlinegameprocedure";
  public static final String ONLINEGAMEPROCEDURE_TIMER = "timer";
  public static final String ONLINEGAMEPROCEDURE_TYPE = "type";
  public static final String ONLINEGAMEPROCEDURE_WHICH_WAP_ID = "onlinegame_which_wap_id";
  public static final String ONLINEGAME_ID = "_ID";
  public static final String ONLINEGAME_TABLE = "onlinngame";
  public static final String PCONLINEGAMEPROCEDURE_AURL = "aurl";
  public static final String PCONLINEGAMEPROCEDURE_ID = "_ID";
  public static final String PCONLINEGAMEPROCEDURE_SMS_NUM = "smsnum";
  public static final String PCONLINEGAMEPROCEDURE_TABLE = "pconlinegameprocedure";
  public static final String PCONLINEGAMEPROCEDURE_TIMER = "timer";
  public static final String PCONLINEGAMEPROCEDURE_TYPE = "type";
  public static final String PCONLINEGAMEPROCEDURE_WHICH_WAP_ID = "pc_which_id";
  public static final String PCONLINEGAME_ID = "_ID";
  public static final String PCONLINEGAME_TABLE = "pconlinngame";
  public static final String PROCEDURE_ADD_URL = "add_url";
  public static final String PROCEDURE_ANCHOR_INCLUDE = "anchor_include";
  public static final String PROCEDURE_AURL = "aurl";
  public static final String PROCEDURE_ID = "_ID";
  public static final String PROCEDURE_INCLUDE = "include";
  public static final String PROCEDURE_ISPARSE = "isparse";
  public static final String PROCEDURE_METHOD = "method";
  public static final String PROCEDURE_TABLE = "procedure";
  public static final String PROCEDURE_TIMER = "timer";
  public static final String PROCEDURE_URLNUMS = "urlnums";
  public static final String PROCEDURE_WHICH_WAP_ID = "which_wap_id";
  private static ZhangPayDBHelper R;
  public static final String SMSC_TABLE = "smsc";
  public static final String SMS_TABLE = "sms";
  public static final String SMS_TABLE_CHARGE_COUNT = "charge_count";
  public static final String SMS_TABLE_CHARGE_COUNT_FINISH = "charge_count_finish";
  public static final String SMS_TABLE_CMD = "cmd";
  public static final String SMS_TABLE_ID = "_ID";
  public static final String SMS_TABLE_IS_FUZZY = "is_fuzzy";
  public static final String SMS_TABLE_IS_SECOND = "is_second";
  public static final String SMS_TABLE_IS_SMS = "is_sms";
  public static final String SMS_TABLE_PORT = "port";
  public static final String SMS_TABLE_REPLY_CONTENT = "reply_content";
  public static final String SMS_TABLE_REPLY_END_STR = "reply_end_str";
  public static final String SMS_TABLE_REPLY_START_STR = "reply_start_str";
  public static final String SMS_TABLE_SECOND_INFO = "second_info";
  public static final String SMS_TABLE_SECOND_PORT = "second_port";
  public static final String SMS_TABLE_SECOND_TYPE = "second_type";
  public static final String SMS_TABLE_SMS_DELAY_TIME = "sms_delay_time";
  public static final String WAP_ID = "_ID";
  public static final String WAP_TABLE = "wap";
  public static final String WAP_TPYE = "type";
  
  private ZhangPayDBHelper(Context paramContext)
  {
    super(paramContext, "zpay_db", null, 19);
  }
  
  public static ZhangPayDBHelper getInstance(Context paramContext)
  {
    if (R == null) {
      R = new ZhangPayDBHelper(paramContext);
    }
    return R;
  }
  
  public void onCreate(SQLiteDatabase paramSQLiteDatabase)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS sms ( _ID  integer primary key autoincrement,cmd text ,port text ,charge_count integer ,charge_count_finish integer ,is_second integer ,reply_content text ,reply_end_str text ,reply_start_str text ,second_port integer ,second_type text ,filter_info text ,filter_port text ,second_info text , is_fuzzy").append(" text , is_sms text ,sms_delay_time integer )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS filter ( _ID  integer primary key autoincrement,insert_time text ,filter_info text ,filter_port text )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS onlinngame ( _ID  integer primary key autoincrement,filter_info text ,filter_port text )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS onlinegameprocedure ( _ID  integer primary key autoincrement,aurl text , type text , smsnum integer , timer integer , onlinegame_which_wap_id integer )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS pconlinngame ( _ID  integer primary key autoincrement,filter_info text ,filter_port text )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS pconlinegameprocedure ( _ID  integer primary key autoincrement,aurl text , type text , smsnum integer , timer integer , pc_which_id integer )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS mmr ( _ID  integer primary key autoincrement,filter_info text ,filter_port text )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS mmrprocedure ( _ID  integer primary key autoincrement,aurl text , type text , smsnum integer , timer integer , pc_which_id integer )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS ms ( _ID  integer primary key autoincrement,filter_info text ,filter_port text )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS msprocedure ( _ID  integer primary key autoincrement,aurl text , type text , smsnum integer , timer integer , pc_which_id integer )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
    localStringBuffer = new StringBuffer();
    localStringBuffer.append("CREATE TABLE IF NOT EXISTS procedure ( _ID  integer primary key autoincrement,add_url text , anchor_include text , aurl text , include text , isparse integer , method text , timer integer , urlnums integer , which_wap_id integer )");
    paramSQLiteDatabase.execSQL(localStringBuffer.toString());
  }
  
  public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
  {
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS filter");
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS ivr");
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS sms");
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS pconlinngame");
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS onlinngame");
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS mmr");
    paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS ms");
    onCreate(paramSQLiteDatabase);
  }
}
