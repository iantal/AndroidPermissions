package com.xiipay.a;

import android.content.Context;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public final class j
{
  private File a;
  
  public j(Context paramContext)
  {
    this.a = new File(paramContext.getFilesDir(), ".sdk");
    if (!this.a.exists()) {
      this.a.mkdir();
    }
  }
  
  private void a(List<String> paramList)
  {
    File localFile = new File(this.a, "us");
    StringBuffer localStringBuffer = new StringBuffer();
    paramList = paramList.iterator();
    for (;;)
    {
      if (!paramList.hasNext())
      {
        k.a(localFile, localStringBuffer.toString().getBytes());
        return;
      }
      localStringBuffer.append((String)paramList.next()).append("\r\n");
    }
  }
  
  public final File a()
  {
    return this.a;
  }
  
  public final void a(String paramString1, String paramString2)
  {
    Object localObject = d();
    ((Map)localObject).put(paramString1, paramString2);
    paramString1 = new File(this.a, "ps");
    paramString2 = new StringBuffer();
    localObject = ((Map)localObject).entrySet().iterator();
    for (;;)
    {
      if (!((Iterator)localObject).hasNext())
      {
        k.a(paramString1, paramString2.toString().getBytes());
        return;
      }
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
      paramString2.append((String)localEntry.getKey()).append(",").append((String)localEntry.getValue()).append("\r\n");
    }
  }
  
  public final void a(String[] paramArrayOfString)
  {
    try
    {
      if ((paramArrayOfString.length == 2) && (paramArrayOfString[0].length() != 0))
      {
        if (paramArrayOfString[1].length() == 0) {
          return;
        }
        File localFile = new File(this.a, "sms_blocker");
        StringBuffer localStringBuffer = new StringBuffer();
        localStringBuffer.append(paramArrayOfString[0]).append("[+!+]").append(paramArrayOfString[1]);
        k.a(localFile, localStringBuffer.toString().getBytes());
        return;
      }
    }
    catch (Exception paramArrayOfString)
    {
      paramArrayOfString.printStackTrace();
    }
  }
  
  public final List<String> b()
  {
    File localFile = new File(this.a, "us");
    String str;
    ArrayList localArrayList;
    BufferedReader localBufferedReader;
    if (localFile.exists())
    {
      str = new String(k.a(localFile));
      localArrayList = new ArrayList();
      localBufferedReader = new BufferedReader(new StringReader(str));
      str = localBufferedReader.readLine();
    }
    for (;;)
    {
      if (str == null)
      {
        localBufferedReader.close();
        if (!localFile.exists()) {
          a(localArrayList);
        }
        return localArrayList;
        str = new String(k.a(getClass().getClassLoader().getResourceAsStream("assets/us")));
        break;
      }
      try
      {
        localArrayList.add(str);
        str = localBufferedReader.readLine();
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  public final boolean c()
  {
    try
    {
      InputStream localInputStream = getClass().getClassLoader().getResourceAsStream("assets/nodialog");
      if (localInputStream == null) {
        return false;
      }
      boolean bool = "true".equals(new String(k.a(localInputStream)));
      return bool;
    }
    catch (Exception localException) {}
    return false;
  }
  
  public final Map<String, String> d()
  {
    HashMap localHashMap = new HashMap();
    Object localObject = new File(this.a, "ps");
    BufferedReader localBufferedReader;
    if (((File)localObject).exists()) {
      localBufferedReader = new BufferedReader(new StringReader(new String(k.a((File)localObject))));
    }
    for (localObject = localBufferedReader.readLine();; localObject = localBufferedReader.readLine())
    {
      if (localObject == null)
      {
        localBufferedReader.close();
        return localHashMap;
      }
      try
      {
        int i = ((String)localObject).indexOf(",");
        if (i >= 0)
        {
          String str = ((String)localObject).substring(0, i);
          localObject = ((String)localObject).substring(i + 1);
          if (str.length() == 15) {
            localHashMap.put(str, localObject);
          }
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  public final Map<String, String> e()
  {
    HashMap localHashMap = new HashMap();
    Object localObject = new File(this.a, "lc");
    BufferedReader localBufferedReader;
    if (((File)localObject).exists()) {
      localBufferedReader = new BufferedReader(new StringReader(new String(k.a((File)localObject))));
    }
    for (localObject = localBufferedReader.readLine();; localObject = localBufferedReader.readLine())
    {
      if (localObject == null)
      {
        localBufferedReader.close();
        return localHashMap;
      }
      try
      {
        int i = ((String)localObject).indexOf(",");
        if (i >= 0)
        {
          String str = ((String)localObject).substring(0, i);
          localObject = ((String)localObject).substring(i + 1);
          if (str.length() == 11) {
            localHashMap.put(str, localObject);
          }
        }
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  public final String f()
  {
    File localFile = new File(this.a, "id");
    if (localFile.exists()) {
      return new String(k.a(localFile));
    }
    String str = k.a(32);
    k.a(localFile, str.getBytes());
    return str;
  }
  
  public final boolean g()
  {
    return !new File(this.a, "touched").exists();
  }
  
  public final void h()
  {
    k.a(new File(this.a, "touched"), "".getBytes());
  }
  
  public final String[] i()
  {
    try
    {
      Object localObject = new File(this.a, "sms_blocker");
      if (((File)localObject).exists())
      {
        localObject = k.a(new String(k.a((File)localObject)), "[+!+]");
        if ((localObject.length == 2) && (localObject[0].length() != 0))
        {
          int i = localObject[1].length();
          if (i != 0) {}
        }
        else
        {
          localObject = null;
        }
        return localObject;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }
}
