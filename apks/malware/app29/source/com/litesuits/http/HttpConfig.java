package com.litesuits.http;

import android.content.Context;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import com.litesuits.http.concurrent.OverloadPolicy;
import com.litesuits.http.concurrent.SchedulePolicy;
import com.litesuits.http.data.NameValuePair;
import com.litesuits.http.listener.GlobalHttpListener;
import com.litesuits.http.log.HttpLog;
import com.litesuits.http.network.Network.NetType;
import com.litesuits.http.request.param.CacheMode;
import com.litesuits.http.request.param.HttpMethods;
import com.litesuits.http.request.query.JsonQueryBuilder;
import com.litesuits.http.request.query.ModelQueryBuilder;
import com.litesuits.http.utils.HttpUtil;
import java.io.File;
import java.util.List;

public class HttpConfig
{
  public static final int DEFAULT_BUFFER_SIZE = 4096;
  public static final int DEFAULT_HTTPS_PORT = 443;
  public static final int DEFAULT_HTTP_PORT = 80;
  public static final int DEFAULT_MAX_REDIRECT_TIMES = 5;
  public static final int DEFAULT_MAX_RETRY_TIMES = 3;
  public static final int DEFAULT_TIMEOUT = 20000;
  public static final int DEFAULT_TRY_WAIT_TIME = 3000;
  public static final int FLAG_NET_DISABLE_ALL;
  public static final int FLAG_NET_DISABLE_MOBILE;
  public static final int FLAG_NET_DISABLE_NONE = 0;
  public static final int FLAG_NET_DISABLE_OTHER = Network.NetType.Other.value;
  public static final int FLAG_NET_DISABLE_WIFI;
  protected static final String TAG = HttpConfig.class.getSimpleName();
  protected static final String VERSION = "2.0";
  protected String cacheDirPath = Environment.getExternalStorageDirectory() + "/lite/http-cache";
  protected List<NameValuePair> commonHeaders;
  protected int concurrentSize = HttpUtil.getCoresNumbers();
  protected int connectTimeout = 20000;
  protected Context context;
  protected long defaultCacheExpireMillis;
  protected CacheMode defaultCacheMode;
  protected String defaultCharSet = "UTF-8";
  protected HttpMethods defaultHttpMethod = HttpMethods.Get;
  protected int defaultMaxRedirectTimes = 5;
  protected int defaultMaxRetryTimes = 3;
  protected ModelQueryBuilder defaultModelQueryBuilder = new JsonQueryBuilder();
  protected boolean detectNetwork;
  protected int disableNetworkFlags;
  protected boolean doStatistics;
  protected GlobalHttpListener globalHttpListener;
  protected String globalSchemeHost;
  protected LiteHttp liteHttp;
  protected long maxMemCacheBytesSize = 524288L;
  protected OverloadPolicy overloadPolicy;
  protected boolean requestSentRetryEnabled;
  protected int retrySleepMillis = 3000;
  protected SchedulePolicy schedulePolicy;
  protected int socketBufferSize = 4096;
  protected int socketTimeout = 20000;
  protected String userAgent = String.format("litehttp%s (android-%s; api-%s; %s; %s)", new Object[] { "2.0", Build.VERSION.RELEASE, Integer.valueOf(Build.VERSION.SDK_INT), Build.BRAND, Build.MODEL });
  protected int waitingQueueSize = this.concurrentSize * 20;
  
  static
  {
    FLAG_NET_DISABLE_ALL = Network.NetType.None.value;
    FLAG_NET_DISABLE_MOBILE = Network.NetType.Mobile.value;
    FLAG_NET_DISABLE_WIFI = Network.NetType.Wifi.value;
  }
  
  public HttpConfig(Context paramContext)
  {
    if (paramContext != null)
    {
      this.context = paramContext.getApplicationContext();
      this.cacheDirPath = (paramContext.getFilesDir() + "/lite/http-cache");
    }
    HttpLog.i(TAG, "lite http cache file dir: " + this.cacheDirPath);
  }
  
  public HttpConfig(Context paramContext, boolean paramBoolean1, boolean paramBoolean2)
  {
    this(paramContext);
    this.doStatistics = paramBoolean1;
    this.detectNetwork = paramBoolean2;
  }
  
  public boolean detectNetworkNeeded()
  {
    return (this.detectNetwork) && (this.context != null);
  }
  
  public String getCacheDirPath()
  {
    return this.cacheDirPath;
  }
  
  public List<NameValuePair> getCommonHeaders()
  {
    return this.commonHeaders;
  }
  
  public int getConcurrentSize()
  {
    return this.concurrentSize;
  }
  
  public int getConnectTimeout()
  {
    return this.connectTimeout;
  }
  
  public Context getContext()
  {
    return this.context;
  }
  
  public long getDefaultCacheExpireMillis()
  {
    return this.defaultCacheExpireMillis;
  }
  
  public CacheMode getDefaultCacheMode()
  {
    return this.defaultCacheMode;
  }
  
  public String getDefaultCharSet()
  {
    return this.defaultCharSet;
  }
  
  public HttpMethods getDefaultHttpMethod()
  {
    return this.defaultHttpMethod;
  }
  
  public int getDefaultMaxRedirectTimes()
  {
    return this.defaultMaxRedirectTimes;
  }
  
  public int getDefaultMaxRetryTimes()
  {
    return this.defaultMaxRetryTimes;
  }
  
  public ModelQueryBuilder getDefaultModelQueryBuilder()
  {
    return this.defaultModelQueryBuilder;
  }
  
  public int getDisableNetworkFlags()
  {
    return this.disableNetworkFlags;
  }
  
  public GlobalHttpListener getGlobalHttpListener()
  {
    return this.globalHttpListener;
  }
  
  public String getGlobalSchemeHost()
  {
    return this.globalSchemeHost;
  }
  
  public long getMaxMemCacheBytesSize()
  {
    return this.maxMemCacheBytesSize;
  }
  
  public OverloadPolicy getOverloadPolicy()
  {
    return this.overloadPolicy;
  }
  
  public int getRetrySleepMillis()
  {
    return this.retrySleepMillis;
  }
  
  public SchedulePolicy getSchedulePolicy()
  {
    return this.schedulePolicy;
  }
  
  public int getSocketBufferSize()
  {
    return this.socketBufferSize;
  }
  
  public int getSocketTimeout()
  {
    return this.socketTimeout;
  }
  
  public String getUserAgent()
  {
    return this.userAgent;
  }
  
  public int getWaitingQueueSize()
  {
    return this.waitingQueueSize;
  }
  
  public boolean isDetectNetwork()
  {
    return this.detectNetwork;
  }
  
  public boolean isDisableAllNetwork()
  {
    return (this.disableNetworkFlags & FLAG_NET_DISABLE_ALL) == FLAG_NET_DISABLE_ALL;
  }
  
  public boolean isDisableNetwork(int paramInt)
  {
    return (this.disableNetworkFlags & paramInt) == paramInt;
  }
  
  public boolean isDoStatistics()
  {
    return this.doStatistics;
  }
  
  public boolean isRequestSentRetryEnabled()
  {
    return this.requestSentRetryEnabled;
  }
  
  public HttpConfig restoreToDefault()
  {
    this.userAgent = String.format("litehttp%s (android-%s; api-%s; %s; %s)", new Object[] { "2.0", Build.VERSION.RELEASE, Integer.valueOf(Build.VERSION.SDK_INT), Build.BRAND, Build.MODEL });
    this.connectTimeout = 20000;
    this.socketTimeout = 20000;
    this.socketBufferSize = 4096;
    this.disableNetworkFlags = 0;
    this.doStatistics = false;
    this.detectNetwork = false;
    this.requestSentRetryEnabled = false;
    this.retrySleepMillis = 3000;
    this.concurrentSize = HttpUtil.getCoresNumbers();
    this.waitingQueueSize = (this.concurrentSize * 20);
    this.schedulePolicy = SchedulePolicy.FirstInFistRun;
    this.overloadPolicy = OverloadPolicy.DiscardOldTaskInQueue;
    this.maxMemCacheBytesSize = 524288L;
    this.cacheDirPath = (Environment.getExternalStorageDirectory() + "/lite/http-cache");
    this.commonHeaders = null;
    this.defaultCharSet = "UTF-8";
    this.defaultHttpMethod = HttpMethods.Get;
    this.defaultCacheMode = null;
    this.defaultCacheExpireMillis = 0L;
    this.defaultMaxRetryTimes = 3;
    this.defaultMaxRedirectTimes = 5;
    this.defaultModelQueryBuilder = new JsonQueryBuilder();
    this.globalHttpListener = null;
    this.globalSchemeHost = null;
    if (this.liteHttp != null) {
      this.liteHttp.initConfig(this);
    }
    return this;
  }
  
  public HttpConfig setCacheDirPath(String paramString)
  {
    this.cacheDirPath = paramString;
    paramString = new File(paramString);
    if (!paramString.exists())
    {
      boolean bool = paramString.mkdirs();
      HttpLog.i(TAG, paramString.getAbsolutePath() + "  mkdirs: " + bool);
    }
    return this;
  }
  
  public HttpConfig setCommonHeaders(List<NameValuePair> paramList)
  {
    this.commonHeaders = paramList;
    return this;
  }
  
  public HttpConfig setConcurrentSize(int paramInt)
  {
    this.concurrentSize = paramInt;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForSmartExecutor(paramInt, this.waitingQueueSize);
    }
    return this;
  }
  
  public HttpConfig setContext(Context paramContext)
  {
    this.context = paramContext.getApplicationContext();
    return this;
  }
  
  public HttpConfig setDefaultCacheExpireMillis(long paramLong)
  {
    this.defaultCacheExpireMillis = paramLong;
    return this;
  }
  
  public HttpConfig setDefaultCacheMode(CacheMode paramCacheMode)
  {
    this.defaultCacheMode = paramCacheMode;
    return this;
  }
  
  public HttpConfig setDefaultCharSet(String paramString)
  {
    this.defaultCharSet = paramString;
    return this;
  }
  
  public HttpConfig setDefaultHttpMethod(HttpMethods paramHttpMethods)
  {
    this.defaultHttpMethod = paramHttpMethods;
    return this;
  }
  
  public HttpConfig setDefaultMaxRedirectTimes(int paramInt)
  {
    this.defaultMaxRedirectTimes = paramInt;
    return this;
  }
  
  public HttpConfig setDefaultMaxRetryTimes(int paramInt)
  {
    this.defaultMaxRetryTimes = paramInt;
    return this;
  }
  
  public HttpConfig setDefaultModelQueryBuilder(ModelQueryBuilder paramModelQueryBuilder)
  {
    this.defaultModelQueryBuilder = paramModelQueryBuilder;
    return this;
  }
  
  public HttpConfig setDetectNetwork(boolean paramBoolean)
  {
    this.detectNetwork = paramBoolean;
    return this;
  }
  
  public HttpConfig setDisableNetworkFlags(int paramInt)
  {
    this.disableNetworkFlags = paramInt;
    return this;
  }
  
  public HttpConfig setDoStatistics(boolean paramBoolean)
  {
    this.doStatistics = paramBoolean;
    return this;
  }
  
  public HttpConfig setForRetry(int paramInt, boolean paramBoolean)
  {
    this.retrySleepMillis = paramInt;
    this.requestSentRetryEnabled = paramBoolean;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForRetryHandler(paramInt, paramBoolean);
    }
    return this;
  }
  
  public HttpConfig setGlobalHttpListener(GlobalHttpListener paramGlobalHttpListener)
  {
    this.globalHttpListener = paramGlobalHttpListener;
    return this;
  }
  
  public HttpConfig setGlobalSchemeHost(String paramString)
  {
    this.globalSchemeHost = paramString;
    return this;
  }
  
  protected HttpConfig setLiteHttp(LiteHttp paramLiteHttp)
  {
    this.liteHttp = paramLiteHttp;
    return this;
  }
  
  public HttpConfig setMaxMemCacheBytesSize(long paramLong)
  {
    this.maxMemCacheBytesSize = paramLong;
    return this;
  }
  
  public HttpConfig setOverloadPolicy(OverloadPolicy paramOverloadPolicy)
  {
    this.overloadPolicy = paramOverloadPolicy;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForSmartExecutor(this.schedulePolicy, paramOverloadPolicy);
    }
    return this;
  }
  
  public HttpConfig setSchedulePolicy(SchedulePolicy paramSchedulePolicy)
  {
    this.schedulePolicy = paramSchedulePolicy;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForSmartExecutor(paramSchedulePolicy, this.overloadPolicy);
    }
    return this;
  }
  
  public HttpConfig setSocketBufferSize(int paramInt)
  {
    this.socketBufferSize = paramInt;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForHttpParams(this.connectTimeout, this.socketTimeout, paramInt);
    }
    return this;
  }
  
  public HttpConfig setTimeOut(int paramInt1, int paramInt2)
  {
    this.connectTimeout = paramInt1;
    this.socketTimeout = paramInt2;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForHttpParams(paramInt1, paramInt2, this.socketBufferSize);
    }
    return this;
  }
  
  public HttpConfig setUserAgent(String paramString)
  {
    this.userAgent = paramString;
    if (this.liteHttp != null) {
      this.liteHttp.setUserAgent(paramString);
    }
    return this;
  }
  
  public HttpConfig setWaitingQueueSize(int paramInt)
  {
    this.waitingQueueSize = paramInt;
    if (this.liteHttp != null) {
      this.liteHttp.setConfigForSmartExecutor(this.concurrentSize, paramInt);
    }
    return this;
  }
  
  public String toString()
  {
    return "HttpConfig{context=" + this.context + ", userAgent='" + this.userAgent + '\'' + ", connectTimeout=" + this.connectTimeout + ", socketTimeout=" + this.socketTimeout + ", socketBufferSize=" + this.socketBufferSize + ", disableNetworkFlags=" + this.disableNetworkFlags + ", doStatistics=" + this.doStatistics + ", detectNetwork=" + this.detectNetwork + ", requestSentRetryEnabled=" + this.requestSentRetryEnabled + ", retrySleepMillis=" + this.retrySleepMillis + ", concurrentSize=" + this.concurrentSize + ", waitingQueueSize=" + this.waitingQueueSize + ", schedulePolicy=" + this.schedulePolicy + ", overloadPolicy=" + this.overloadPolicy + ", maxMemCacheBytesSize=" + this.maxMemCacheBytesSize + ", cacheDirPath='" + this.cacheDirPath + '\'' + ", commonHeaders=" + this.commonHeaders + ", defaultCharSet='" + this.defaultCharSet + '\'' + ", defaultHttpMethod=" + this.defaultHttpMethod + ", defaultCacheMode=" + this.defaultCacheMode + ", defaultCacheExpireMillis=" + this.defaultCacheExpireMillis + ", defaultMaxRetryTimes=" + this.defaultMaxRetryTimes + ", defaultMaxRedirectTimes=" + this.defaultMaxRedirectTimes + ", defaultModelQueryBuilder=" + this.defaultModelQueryBuilder + ", globalHttpListener=" + this.globalHttpListener + ", globalSchemeHost=" + this.globalSchemeHost + '}';
  }
}
