package com.litesuits.http.exception.handler;

import com.litesuits.http.data.HttpStatus;
import com.litesuits.http.exception.ClientException;
import com.litesuits.http.exception.HttpClientException;
import com.litesuits.http.exception.HttpException;
import com.litesuits.http.exception.HttpNetException;
import com.litesuits.http.exception.HttpServerException;
import com.litesuits.http.exception.NetException;
import com.litesuits.http.exception.ServerException;

public abstract class HttpExceptionHandler
{
  public HttpExceptionHandler() {}
  
  public HttpExceptionHandler handleException(HttpException paramHttpException)
  {
    Object localObject;
    if (paramHttpException != null)
    {
      if (!(paramHttpException instanceof HttpClientException)) {
        break label33;
      }
      localObject = (HttpClientException)paramHttpException;
      onClientException((HttpClientException)localObject, ((HttpClientException)localObject).getExceptionType());
    }
    for (;;)
    {
      paramHttpException.setHandled(true);
      return this;
      label33:
      if ((paramHttpException instanceof HttpNetException))
      {
        localObject = (HttpNetException)paramHttpException;
        onNetException((HttpNetException)localObject, ((HttpNetException)localObject).getExceptionType());
      }
      else if ((paramHttpException instanceof HttpServerException))
      {
        localObject = (HttpServerException)paramHttpException;
        onServerException((HttpServerException)localObject, ((HttpServerException)localObject).getExceptionType(), ((HttpServerException)localObject).getHttpStatus());
      }
      else
      {
        localObject = new HttpClientException(paramHttpException);
        onClientException((HttpClientException)localObject, ((HttpClientException)localObject).getExceptionType());
      }
    }
  }
  
  protected abstract void onClientException(HttpClientException paramHttpClientException, ClientException paramClientException);
  
  protected abstract void onNetException(HttpNetException paramHttpNetException, NetException paramNetException);
  
  protected abstract void onServerException(HttpServerException paramHttpServerException, ServerException paramServerException, HttpStatus paramHttpStatus);
}
