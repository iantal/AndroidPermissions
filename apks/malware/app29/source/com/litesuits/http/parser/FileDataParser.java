package com.litesuits.http.parser;

import com.litesuits.http.log.HttpLog;
import com.litesuits.http.request.AbstractRequest;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

public abstract class FileDataParser<T>
  extends DataParser<T>
{
  protected File file;
  
  public FileDataParser(AbstractRequest<T> paramAbstractRequest)
  {
    super(paramAbstractRequest);
  }
  
  public FileDataParser(AbstractRequest<T> paramAbstractRequest, File paramFile)
  {
    super(paramAbstractRequest);
    this.file = paramFile;
  }
  
  public File getSpecifyFile(String paramString)
  {
    if (this.file != null) {
      return this.file;
    }
    return new File(paramString, this.request.getCacheKey());
  }
  
  public boolean isMemCacheSupport()
  {
    return false;
  }
  
  protected final File streamToFile(InputStream paramInputStream, long paramLong, String paramString)
  {
    File localFile = getSpecifyFile(paramString);
    paramString = null;
    try
    {
      localObject = localFile.getParentFile();
      if (!((File)localObject).exists())
      {
        boolean bool = ((File)localObject).mkdirs();
        if (HttpLog.isPrint) {
          HttpLog.i(TAG, "keep cache mkdirs result: " + bool + "  path:" + ((File)localObject).getAbsolutePath());
        }
      }
      localObject = new FileOutputStream(localFile);
      try
      {
        paramString = new byte[this.buffSize];
        while (!this.request.isCancelledOrInterrupted())
        {
          int i = paramInputStream.read(paramString);
          if (i == -1) {
            break;
          }
          paramString = translateBytes(paramString);
          ((FileOutputStream)localObject).write(paramString, 0, i);
          this.readLength += i;
          notifyReading(paramLong, this.readLength);
        }
        if (paramString == null) {
          break label179;
        }
      }
      finally
      {
        paramString = (String)localObject;
      }
    }
    finally
    {
      Object localObject;
      for (;;) {}
    }
    paramString.close();
    label179:
    throw paramInputStream;
    if ((HttpLog.isPrint) && (localFile != null)) {
      HttpLog.i("FileParser", "file len: " + localFile.length());
    }
    if (localObject != null) {
      ((FileOutputStream)localObject).close();
    }
    return localFile;
  }
}
