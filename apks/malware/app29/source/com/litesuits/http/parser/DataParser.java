package com.litesuits.http.parser;

import com.litesuits.http.listener.HttpListener;
import com.litesuits.http.request.AbstractRequest;
import java.io.File;
import java.io.InputStream;

public abstract class DataParser<T>
{
  protected static final String TAG = DataParser.class.getSimpleName();
  protected int buffSize = 4096;
  protected String charSet = "UTF-8";
  protected T data;
  protected long readLength;
  protected AbstractRequest<T> request;
  
  public DataParser(AbstractRequest<T> paramAbstractRequest)
  {
    this.request = paramAbstractRequest;
    if (paramAbstractRequest.getCharSet() != null) {
      this.charSet = paramAbstractRequest.getCharSet();
    }
  }
  
  public final T getData()
  {
    return this.data;
  }
  
  public String getRawString()
  {
    return null;
  }
  
  public final long getReadedLength()
  {
    return this.readLength;
  }
  
  public abstract File getSpecifyFile(String paramString);
  
  public abstract boolean isMemCacheSupport();
  
  protected final void notifyReading(long paramLong1, long paramLong2)
  {
    HttpListener localHttpListener = this.request.getHttpListener();
    if (localHttpListener != null) {
      localHttpListener.notifyCallLoading(this.request, paramLong1, paramLong2);
    }
  }
  
  protected abstract T parseNetStream(InputStream paramInputStream, long paramLong, String paramString1, String paramString2);
  
  public abstract T readFromDiskCache(File paramFile);
  
  public final T readFromMemoryCache(T paramT)
  {
    if (isMemCacheSupport()) {
      this.data = paramT;
    }
    return this.data;
  }
  
  public final T readFromNetStream(InputStream paramInputStream, long paramLong, String paramString1, String paramString2)
  {
    if (paramInputStream != null) {}
    try
    {
      this.data = parseNetStream(paramInputStream, paramLong, paramString1, paramString2);
      return this.data;
    }
    finally
    {
      paramInputStream.close();
    }
  }
  
  public final void setRequest(AbstractRequest<T> paramAbstractRequest)
  {
    this.request = paramAbstractRequest;
    if (paramAbstractRequest.getCharSet() != null) {
      this.charSet = paramAbstractRequest.getCharSet();
    }
  }
  
  public String toString()
  {
    return "DataParser{buffSize=" + this.buffSize + ", readLength=" + this.readLength + '}';
  }
  
  protected byte[] translateBytes(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte;
  }
}
