package com.litesuits.http.listener;

import android.os.SystemClock;
import com.litesuits.http.data.StatisticsInfo;
import com.litesuits.http.request.AbstractRequest;
import com.litesuits.http.response.InternalResponse;
import com.litesuits.http.response.Response;

public class StatisticsListener
{
  private static final String TAG = StatisticsListener.class.getSimpleName();
  private long connect;
  private long connectStart;
  private long headLen;
  private InternalResponse internalResponse;
  private long read;
  private long readLen;
  private long readStart;
  private StatisticsInfo statisticsInfo;
  private long total;
  
  public StatisticsListener(InternalResponse paramInternalResponse, StatisticsInfo paramStatisticsInfo)
  {
    this.internalResponse = paramInternalResponse;
    this.statisticsInfo = paramStatisticsInfo;
  }
  
  public void onAfterConnect(AbstractRequest paramAbstractRequest)
  {
    this.connect += SystemClock.uptimeMillis() - this.connectStart;
  }
  
  public void onAfterRead(AbstractRequest paramAbstractRequest)
  {
    this.read += SystemClock.uptimeMillis() - this.readStart;
  }
  
  public void onEnd(Response paramResponse)
  {
    if (this.total > 0L)
    {
      this.total = (SystemClock.uptimeMillis() - this.total);
      this.internalResponse.setUseTime(this.total);
      this.statisticsInfo.addConnectTime(this.total);
      this.headLen = this.internalResponse.getContentLength();
      this.readLen = this.internalResponse.getReadedLength();
      if (this.readLen <= 0L) {
        break label116;
      }
    }
    label116:
    for (long l1 = this.readLen;; l1 = 0L)
    {
      long l2 = l1;
      if (l1 == 0L)
      {
        l2 = l1;
        if (this.headLen > 0L) {
          l2 = this.headLen;
        }
      }
      this.statisticsInfo.addDataLength(l2);
      return;
    }
  }
  
  public void onPreConnect(AbstractRequest paramAbstractRequest)
  {
    this.connectStart = SystemClock.uptimeMillis();
  }
  
  public void onPreRead(AbstractRequest paramAbstractRequest)
  {
    this.readStart = SystemClock.uptimeMillis();
  }
  
  public void onRedirect(AbstractRequest paramAbstractRequest) {}
  
  public void onRetry(AbstractRequest paramAbstractRequest, int paramInt1, int paramInt2) {}
  
  public void onStart(AbstractRequest paramAbstractRequest)
  {
    this.total = SystemClock.uptimeMillis();
  }
  
  public String resToString()
  {
    return "\n[length]   headerLen: " + this.headLen + " B,    readedLen: " + this.readLen + " B,    global total len: " + this.statisticsInfo.getDataLength() + " B" + "\n[time]   connect  : " + this.connect + " MS,    read: " + this.read + " MS,    total: " + this.total + " MS,    global total time: " + this.statisticsInfo.getConnectTime() + " MS";
  }
  
  public String toString()
  {
    return resToString();
  }
}
