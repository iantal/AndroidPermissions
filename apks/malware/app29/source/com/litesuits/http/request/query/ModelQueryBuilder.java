package com.litesuits.http.request.query;

import com.litesuits.http.request.param.HttpCustomParam;
import com.litesuits.http.request.param.HttpCustomParam.CustomValueBuilder;
import com.litesuits.http.request.param.HttpParamModel;
import com.litesuits.http.request.param.NonHttpParam;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.LinkedHashMap;

public abstract class ModelQueryBuilder
{
  protected String charSet = "UTF-8";
  
  public ModelQueryBuilder() {}
  
  protected static ArrayList<Field> getAllDeclaredFields(Class<?> paramClass)
  {
    ArrayList localArrayList = new ArrayList();
    while ((paramClass != null) && (paramClass != Object.class))
    {
      Field[] arrayOfField = paramClass.getDeclaredFields();
      int i = 0;
      while (i < arrayOfField.length)
      {
        Field localField = arrayOfField[i];
        if (!isInvalidField(localField)) {
          localArrayList.add(localField);
        }
        i += 1;
      }
      paramClass = paramClass.getSuperclass();
    }
    return localArrayList;
  }
  
  protected static boolean isInvalidField(Field paramField)
  {
    return ((Modifier.isStatic(paramField.getModifiers())) && (Modifier.isFinal(paramField.getModifiers()))) || (paramField.getAnnotation(NonHttpParam.class) != null) || (paramField.isSynthetic());
  }
  
  protected static boolean isPrimitive(Object paramObject)
  {
    return ((paramObject instanceof CharSequence)) || ((paramObject instanceof Number)) || ((paramObject instanceof Boolean)) || ((paramObject instanceof Character));
  }
  
  public LinkedHashMap<String, String> buildPrimaryMap(HttpParamModel paramHttpParamModel)
  {
    if (paramHttpParamModel == null) {
      return null;
    }
    ArrayList localArrayList = getAllDeclaredFields(paramHttpParamModel.getClass());
    LinkedHashMap localLinkedHashMap = new LinkedHashMap(localArrayList.size());
    int k = localArrayList.size();
    int i = 0;
    if (i < k)
    {
      Object localObject = (Field)localArrayList.get(i);
      ((Field)localObject).setAccessible(true);
      String str = ((Field)localObject).getName();
      localObject = ((Field)localObject).get(paramHttpParamModel);
      if (localObject != null)
      {
        if (!isPrimitive(localObject)) {
          break label109;
        }
        localLinkedHashMap.put(str, localObject.toString());
      }
      for (;;)
      {
        i += 1;
        break;
        label109:
        if ((localObject instanceof HttpCustomParam))
        {
          Method[] arrayOfMethod = HttpCustomParam.class.getDeclaredMethods();
          int m = arrayOfMethod.length;
          int j = 0;
          for (;;)
          {
            if (j >= m) {
              break label198;
            }
            Method localMethod = arrayOfMethod[j];
            if (localMethod.getAnnotation(HttpCustomParam.CustomValueBuilder.class) != null)
            {
              localMethod.setAccessible(true);
              localObject = localMethod.invoke(localObject, new Object[0]);
              if (localObject == null) {
                break;
              }
              localLinkedHashMap.put(str, localObject.toString());
              break;
            }
            j += 1;
          }
        }
        else
        {
          label198:
          localObject = buildSencondaryValue(localObject);
          if (localObject != null) {
            localLinkedHashMap.put(str, ((CharSequence)localObject).toString());
          }
        }
      }
    }
    return localLinkedHashMap;
  }
  
  protected abstract CharSequence buildSencondaryValue(Object paramObject);
  
  protected StringBuilder buildUriKey(StringBuilder paramStringBuilder, String paramString)
  {
    if (paramString != null) {
      paramStringBuilder.append(encode(paramString)).append("=");
    }
    return paramStringBuilder;
  }
  
  public String decode(String paramString)
  {
    return URLDecoder.decode(paramString, this.charSet);
  }
  
  public String encode(String paramString)
  {
    return URLEncoder.encode(paramString, this.charSet);
  }
}
