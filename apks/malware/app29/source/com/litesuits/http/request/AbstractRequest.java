package com.litesuits.http.request;

import android.net.Uri;
import android.net.Uri.Builder;
import com.litesuits.http.annotation.HttpCacheExpire;
import com.litesuits.http.annotation.HttpCacheKey;
import com.litesuits.http.annotation.HttpCacheMode;
import com.litesuits.http.annotation.HttpCharSet;
import com.litesuits.http.annotation.HttpID;
import com.litesuits.http.annotation.HttpMaxRedirect;
import com.litesuits.http.annotation.HttpMaxRetry;
import com.litesuits.http.annotation.HttpMethod;
import com.litesuits.http.annotation.HttpSchemeHost;
import com.litesuits.http.annotation.HttpTag;
import com.litesuits.http.annotation.HttpUri;
import com.litesuits.http.data.NameValuePair;
import com.litesuits.http.exception.ClientException;
import com.litesuits.http.exception.HttpClientException;
import com.litesuits.http.listener.GlobalHttpListener;
import com.litesuits.http.listener.HttpListener;
import com.litesuits.http.log.HttpLog;
import com.litesuits.http.parser.DataParser;
import com.litesuits.http.request.content.HttpBody;
import com.litesuits.http.request.param.CacheMode;
import com.litesuits.http.request.param.HttpMethods;
import com.litesuits.http.request.param.HttpParamModel;
import com.litesuits.http.request.param.HttpRichParamModel;
import com.litesuits.http.request.query.ModelQueryBuilder;
import com.litesuits.http.utils.HexUtil;
import com.litesuits.http.utils.MD5Util;
import com.litesuits.http.utils.UriUtil;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class AbstractRequest<T>
{
  private static final String ENCODE_PATTERN_URL = "^.+\\?(%[0-9a-fA-F]+|[=&A-Za-z0-9_#\\-\\.\\*])*$";
  private static final String TAG = AbstractRequest.class.getSimpleName();
  private long cacheExpireMillis;
  private String cacheKey;
  private CacheMode cacheMode;
  private AtomicBoolean cancel = new AtomicBoolean();
  private String charSet;
  private GlobalHttpListener globalHttpListener;
  private LinkedHashMap<String, String> headers;
  private HttpBody httpBody;
  private HttpListener<T> httpListener;
  private long id;
  private int maxRedirectTimes;
  private int maxRetryTimes;
  private HttpMethods method;
  private LinkedHashMap<String, String> paramMap;
  private HttpParamModel paramModel;
  private ModelQueryBuilder queryBuilder;
  private String schemeHost;
  private Object tag;
  private String uri;
  
  public AbstractRequest(HttpParamModel paramHttpParamModel)
  {
    setParamModel(paramHttpParamModel);
  }
  
  public AbstractRequest(HttpParamModel paramHttpParamModel, HttpListener<T> paramHttpListener)
  {
    setParamModel(paramHttpParamModel);
    setHttpListener(paramHttpListener);
  }
  
  public AbstractRequest(String paramString)
  {
    this.uri = paramString;
  }
  
  public AbstractRequest(String paramString, HttpParamModel paramHttpParamModel)
  {
    setParamModel(paramHttpParamModel);
    this.uri = paramString;
  }
  
  public <S extends AbstractRequest<T>> S addHeader(String paramString1, String paramString2)
  {
    if (paramString2 != null)
    {
      if (this.headers == null) {
        this.headers = new LinkedHashMap();
      }
      this.headers.put(paramString1, paramString2);
    }
    return this;
  }
  
  public <S extends AbstractRequest<T>> S addHeader(List<NameValuePair> paramList)
  {
    if (paramList != null)
    {
      if (this.headers == null) {
        this.headers = new LinkedHashMap();
      }
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        NameValuePair localNameValuePair = (NameValuePair)paramList.next();
        this.headers.put(localNameValuePair.getName(), localNameValuePair.getValue());
      }
    }
    return this;
  }
  
  public <S extends AbstractRequest<T>> S addHeader(Map<String, String> paramMap1)
  {
    if (paramMap1 != null)
    {
      if (this.headers == null) {
        this.headers = new LinkedHashMap();
      }
      this.headers.putAll(paramMap1);
    }
    return this;
  }
  
  public <S extends AbstractRequest<T>> S addUrlParam(String paramString1, String paramString2)
  {
    if (paramString2 != null)
    {
      if (this.paramMap == null) {
        this.paramMap = new LinkedHashMap();
      }
      this.paramMap.put(paramString1, paramString2);
    }
    return this;
  }
  
  public <S extends AbstractRequest<T>> S addUrlPrifix(String paramString)
  {
    setUri(paramString + this.uri);
    return this;
  }
  
  public <S extends AbstractRequest<T>> S addUrlSuffix(String paramString)
  {
    setUri(this.uri + paramString);
    return this;
  }
  
  public void cancel()
  {
    this.cancel.set(true);
  }
  
  public boolean doNotCache()
  {
    return (this.cacheMode == null) || (this.cacheMode == CacheMode.NetOnly);
  }
  
  public LinkedHashMap<String, String> getBasicParams()
  {
    LinkedHashMap localLinkedHashMap1 = new LinkedHashMap();
    if (this.paramMap != null) {
      localLinkedHashMap1.putAll(this.paramMap);
    }
    if ((this.paramModel != null) && ((this.paramModel instanceof HttpRichParamModel)) && (((HttpRichParamModel)this.paramModel).isAttachToUrl()))
    {
      LinkedHashMap localLinkedHashMap2 = getQueryBuilder().buildPrimaryMap(this.paramModel);
      if (localLinkedHashMap2 != null) {
        localLinkedHashMap1.putAll(localLinkedHashMap2);
      }
    }
    return localLinkedHashMap1;
  }
  
  public long getCacheExpireMillis()
  {
    return this.cacheExpireMillis;
  }
  
  public String getCacheKey()
  {
    if (this.cacheKey == null)
    {
      this.cacheKey = HexUtil.encodeHexStr(MD5Util.md5(getUri()));
      if (HttpLog.isPrint) {
        HttpLog.v(TAG, "generate cache key: " + this.cacheKey);
      }
    }
    return this.cacheKey;
  }
  
  public CacheMode getCacheMode()
  {
    return this.cacheMode;
  }
  
  public String getCharSet()
  {
    return this.charSet;
  }
  
  public abstract <D extends DataParser<T>> D getDataParser();
  
  public String getFullUri()
  {
    if (this.uri == null) {
      throw new HttpClientException(ClientException.UrlIsNull);
    }
    if (this.schemeHost != null)
    {
      if (!this.schemeHost.startsWith("http")) {
        throw new HttpClientException(ClientException.IllegalScheme);
      }
      if (!this.uri.startsWith("http")) {
        this.uri = (this.schemeHost + this.uri);
      }
    }
    StringBuilder localStringBuilder;
    boolean bool;
    Object localObject2;
    Object localObject3;
    try
    {
      localStringBuilder = new StringBuilder();
      bool = this.uri.contains("?");
      if ((!bool) || (this.uri.matches("^.+\\?(%[0-9a-fA-F]+|[=&A-Za-z0-9_#\\-\\.\\*])*$"))) {
        break label340;
      }
      Uri localUri = Uri.parse(this.uri);
      localObject2 = localUri.buildUpon();
      ((Uri.Builder)localObject2).query(null);
      localObject3 = UriUtil.getQueryParameterNames(localUri).iterator();
      while (((Iterator)localObject3).hasNext())
      {
        String str = (String)((Iterator)localObject3).next();
        Iterator localIterator = UriUtil.getQueryParameters(localUri, str).iterator();
        while (localIterator.hasNext()) {
          ((Uri.Builder)localObject2).appendQueryParameter(str, (String)localIterator.next());
        }
      }
      if (!HttpLog.isPrint) {
        break label271;
      }
    }
    catch (Exception localException)
    {
      throw new HttpClientException(localException);
    }
    HttpLog.d(TAG, "param uri origin: " + localException);
    label271:
    Object localObject1 = ((Uri.Builder)localObject2).build();
    if (HttpLog.isPrint) {
      HttpLog.d(TAG, "param uri encode: " + localObject1);
    }
    localStringBuilder.append(localObject1);
    while ((this.paramMap == null) && (this.paramModel == null))
    {
      return localStringBuilder.toString();
      label340:
      localStringBuilder.append(this.uri);
    }
    if (bool)
    {
      localStringBuilder.append("&");
      localObject1 = getBasicParams();
      int j = ((LinkedHashMap)localObject1).size();
      localObject2 = ((LinkedHashMap)localObject1).entrySet().iterator();
      int i = 0;
      label392:
      if (!((Iterator)localObject2).hasNext()) {
        break label500;
      }
      localObject1 = (Map.Entry)((Iterator)localObject2).next();
      localObject3 = localStringBuilder.append(URLEncoder.encode((String)((Map.Entry)localObject1).getKey(), this.charSet)).append("=").append(URLEncoder.encode((String)((Map.Entry)localObject1).getValue(), this.charSet));
      i += 1;
      if (i != j) {
        break label510;
      }
    }
    label500:
    label510:
    for (localObject1 = "";; localObject1 = "&")
    {
      ((StringBuilder)localObject3).append((String)localObject1);
      break label392;
      localStringBuilder.append("?");
      break;
      localObject1 = localStringBuilder.toString();
      return localObject1;
    }
  }
  
  public GlobalHttpListener getGlobalHttpListener()
  {
    return this.globalHttpListener;
  }
  
  public LinkedHashMap<String, String> getHeaders()
  {
    return this.headers;
  }
  
  public HttpBody getHttpBody()
  {
    return this.httpBody;
  }
  
  public HttpListener<T> getHttpListener()
  {
    return this.httpListener;
  }
  
  public long getId()
  {
    return this.id;
  }
  
  public int getMaxRedirectTimes()
  {
    return this.maxRedirectTimes;
  }
  
  public int getMaxRetryTimes()
  {
    return this.maxRetryTimes;
  }
  
  public HttpMethods getMethod()
  {
    return this.method;
  }
  
  public LinkedHashMap<String, String> getParamMap()
  {
    return this.paramMap;
  }
  
  public HttpParamModel getParamModel()
  {
    return this.paramModel;
  }
  
  public ModelQueryBuilder getQueryBuilder()
  {
    return this.queryBuilder;
  }
  
  public String getSchemeHost()
  {
    return this.schemeHost;
  }
  
  public Object getTag()
  {
    return this.tag;
  }
  
  public String getUri()
  {
    return this.uri;
  }
  
  public boolean isCancelled()
  {
    return this.cancel.get();
  }
  
  public boolean isCancelledOrInterrupted()
  {
    return (this.cancel.get()) || (Thread.currentThread().isInterrupted());
  }
  
  public boolean needCache()
  {
    return (this.cacheMode != null) && (this.cacheMode != CacheMode.NetOnly);
  }
  
  public String reqToString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("\n_____________________ lite http request start _____________________").append("\n class            : ").append(getClass().getSimpleName()).append("\n id               : ").append(this.id).append("\n uri              : ").append(this.uri).append("\n method           : ").append(this.method).append("\n tag              : ").append(this.tag).append("\n charSet          : ").append(this.charSet).append("\n maxRetryTimes    : ").append(this.maxRetryTimes).append("\n maxRedirectTimes : ").append(this.maxRedirectTimes).append("\n httpListener     : ").append(this.httpListener).append("\n cancelled        : ").append(this.cancel.get()).append("\n cacheMode        : ").append(this.cacheMode).append("\n cacheKey         : ").append(this.cacheKey).append("\n cacheExpireMillis: ").append(this.cacheExpireMillis).append("\n model            : ").append(this.paramModel).append("\n queryBuilder     : ").append(this.queryBuilder).append("\n httpBody         : ").append(this.httpBody).append("\n dataParser       : ").append(getDataParser()).append("\n header           ");
    if (this.headers == null)
    {
      localStringBuilder.append(": null");
      localStringBuilder.append("\n paramMap         ");
      if (this.paramMap != null) {
        break label383;
      }
      localStringBuilder.append(": null");
    }
    for (;;)
    {
      localStringBuilder.append("\n_____________________ lite http request end ______________________");
      return localStringBuilder.toString();
      Iterator localIterator = this.headers.entrySet().iterator();
      Map.Entry localEntry;
      while (localIterator.hasNext())
      {
        localEntry = (Map.Entry)localIterator.next();
        localStringBuilder.append("\n|    ").append(String.format("%-20s", new Object[] { localEntry.getKey() })).append(" = ").append((String)localEntry.getValue());
      }
      break;
      label383:
      localIterator = this.paramMap.entrySet().iterator();
      while (localIterator.hasNext())
      {
        localEntry = (Map.Entry)localIterator.next();
        localStringBuilder.append("\n|    ").append(String.format("%-20s", new Object[] { localEntry.getKey() })).append(" = ").append((String)localEntry.getValue());
      }
    }
  }
  
  public <S extends AbstractRequest<T>> S setCacheExpire(long paramLong, TimeUnit paramTimeUnit)
  {
    this.cacheExpireMillis = paramTimeUnit.toMillis(paramLong);
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setCacheExpireMillis(long paramLong)
  {
    this.cacheExpireMillis = paramLong;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setCacheKey(String paramString)
  {
    this.cacheKey = paramString;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setCacheMode(CacheMode paramCacheMode)
  {
    this.cacheMode = paramCacheMode;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setCacheMode(CacheMode paramCacheMode, long paramLong, TimeUnit paramTimeUnit)
  {
    this.cacheMode = paramCacheMode;
    this.cacheExpireMillis = paramTimeUnit.toMillis(paramLong);
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setCacheMode(CacheMode paramCacheMode, String paramString)
  {
    this.cacheMode = paramCacheMode;
    this.cacheKey = paramString;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setCharSet(String paramString)
  {
    this.charSet = paramString;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setGlobalHttpListener(GlobalHttpListener paramGlobalHttpListener)
  {
    this.globalHttpListener = paramGlobalHttpListener;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setHeaders(LinkedHashMap<String, String> paramLinkedHashMap)
  {
    this.headers = paramLinkedHashMap;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setHttpBody(HttpBody paramHttpBody)
  {
    if (paramHttpBody != null) {
      paramHttpBody.setRequest(this);
    }
    this.httpBody = paramHttpBody;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setHttpBody(HttpBody paramHttpBody, HttpMethods paramHttpMethods)
  {
    setMethod(paramHttpMethods);
    setHttpBody(paramHttpBody);
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setHttpListener(HttpListener<T> paramHttpListener)
  {
    this.httpListener = paramHttpListener;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setId(long paramLong)
  {
    this.id = paramLong;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setLinkedHttpListener(HttpListener<T> paramHttpListener)
  {
    if (this.httpListener != null)
    {
      HttpListener localHttpListener2 = this.httpListener;
      HttpListener localHttpListener1 = localHttpListener2;
      if (paramHttpListener == localHttpListener2) {
        throw new RuntimeException("Circular refrence:  " + paramHttpListener);
      }
      do
      {
        localHttpListener2 = localHttpListener1.getLinkedListener();
        if (localHttpListener2 == null) {
          break;
        }
        localHttpListener1 = localHttpListener2;
      } while (paramHttpListener != localHttpListener2);
      throw new RuntimeException("Circular refrence:  " + paramHttpListener);
      paramHttpListener.setLinkedListener(this.httpListener);
    }
    this.httpListener = paramHttpListener;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setMaxRedirectTimes(int paramInt)
  {
    this.maxRedirectTimes = paramInt;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setMaxRetryTimes(int paramInt)
  {
    this.maxRetryTimes = paramInt;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setMethod(HttpMethods paramHttpMethods)
  {
    this.method = paramHttpMethods;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setParamMap(LinkedHashMap<String, String> paramLinkedHashMap)
  {
    this.paramMap = paramLinkedHashMap;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setParamModel(HttpParamModel paramHttpParamModel)
  {
    if (paramHttpParamModel != null)
    {
      this.paramModel = paramHttpParamModel;
      HttpRichParamModel localHttpRichParamModel;
      if ((paramHttpParamModel instanceof HttpRichParamModel))
      {
        localHttpRichParamModel = (HttpRichParamModel)paramHttpParamModel;
        addHeader(localHttpRichParamModel.getHeaders());
        if (this.httpBody == null) {
          setHttpBody(localHttpRichParamModel.getHttpBody());
        }
        if (this.httpListener == null) {
          setHttpListener(localHttpRichParamModel.getHttpListener());
        }
        if (this.queryBuilder == null) {
          setQueryBuilder(localHttpRichParamModel.getModelQueryBuilder());
        }
      }
      paramHttpParamModel = paramHttpParamModel.getClass().getAnnotations();
      if ((paramHttpParamModel != null) && (paramHttpParamModel.length > 0))
      {
        int j = paramHttpParamModel.length;
        int i = 0;
        if (i < j)
        {
          localHttpRichParamModel = paramHttpParamModel[i];
          if ((localHttpRichParamModel instanceof HttpID)) {
            if (this.id == 0L) {
              setId(((HttpID)localHttpRichParamModel).value());
            }
          }
          for (;;)
          {
            i += 1;
            break;
            if ((localHttpRichParamModel instanceof HttpTag))
            {
              if (this.tag == null) {
                setTag(((HttpTag)localHttpRichParamModel).value());
              }
            }
            else if ((localHttpRichParamModel instanceof HttpSchemeHost))
            {
              if (this.schemeHost == null) {
                this.schemeHost = ((HttpUri)localHttpRichParamModel).value();
              }
            }
            else if ((localHttpRichParamModel instanceof HttpUri))
            {
              if (this.uri == null) {
                this.uri = ((HttpUri)localHttpRichParamModel).value();
              }
            }
            else if ((localHttpRichParamModel instanceof HttpMethod))
            {
              if (this.method == null) {
                this.method = ((HttpMethod)localHttpRichParamModel).value();
              }
            }
            else if ((localHttpRichParamModel instanceof HttpCacheMode))
            {
              if (this.cacheMode == null) {
                this.cacheMode = ((HttpCacheMode)localHttpRichParamModel).value();
              }
            }
            else if ((localHttpRichParamModel instanceof HttpCacheExpire))
            {
              if (this.cacheExpireMillis == 0L)
              {
                TimeUnit localTimeUnit = ((HttpCacheExpire)localHttpRichParamModel).unit();
                long l = ((HttpCacheExpire)localHttpRichParamModel).value();
                if (localTimeUnit != null) {
                  this.cacheExpireMillis = localTimeUnit.toMillis(l);
                } else {
                  this.cacheExpireMillis = l;
                }
              }
            }
            else if ((localHttpRichParamModel instanceof HttpCacheKey))
            {
              if (this.cacheKey == null) {
                this.cacheKey = ((HttpCacheKey)localHttpRichParamModel).value();
              }
            }
            else if ((localHttpRichParamModel instanceof HttpCharSet))
            {
              if (this.charSet == null) {
                this.charSet = ((HttpCharSet)localHttpRichParamModel).value();
              }
            }
            else if ((localHttpRichParamModel instanceof HttpMaxRedirect))
            {
              if (this.maxRedirectTimes == 0) {
                this.maxRetryTimes = ((HttpMaxRedirect)localHttpRichParamModel).value();
              }
            }
            else if (((localHttpRichParamModel instanceof HttpMaxRetry)) && (this.maxRetryTimes == 0)) {
              this.maxRetryTimes = ((HttpMaxRetry)localHttpRichParamModel).value();
            }
          }
        }
      }
    }
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setQueryBuilder(ModelQueryBuilder paramModelQueryBuilder)
  {
    this.queryBuilder = paramModelQueryBuilder;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setSchemeHost(String paramString)
  {
    this.schemeHost = paramString;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setTag(Object paramObject)
  {
    this.tag = paramObject;
    return this;
  }
  
  public <S extends AbstractRequest<T>> S setUri(String paramString)
  {
    this.uri = paramString;
    return this;
  }
  
  public String toString()
  {
    return reqToString();
  }
}
