package com.litesuits.http.impl.apache.entity;

import com.litesuits.http.listener.HttpListener;
import com.litesuits.http.request.AbstractRequest;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.message.BasicHeader;

public abstract class AbstractHttpEntity
  implements HttpEntity
{
  protected static final int BUFFER_SIZE = 4096;
  protected long bytesWritten;
  protected boolean chunked;
  protected Header contentEncoding;
  protected Header contentType;
  protected HttpListener httpListener;
  protected AbstractRequest request;
  protected long totalSize;
  
  protected AbstractHttpEntity() {}
  
  public void consumeContent()
  {
    if (isStreaming()) {
      throw new UnsupportedOperationException("streaming entity does not implement consumeContent()");
    }
  }
  
  public Header getContentEncoding()
  {
    return this.contentEncoding;
  }
  
  public Header getContentType()
  {
    return this.contentType;
  }
  
  public HttpListener getHttpListener()
  {
    return this.httpListener;
  }
  
  public AbstractRequest getRequest()
  {
    return this.request;
  }
  
  public boolean isChunked()
  {
    return this.chunked;
  }
  
  public void setChunked(boolean paramBoolean)
  {
    this.chunked = paramBoolean;
  }
  
  public void setContentEncoding(String paramString)
  {
    BasicHeader localBasicHeader = null;
    if (paramString != null) {
      localBasicHeader = new BasicHeader("Content-Encoding", paramString);
    }
    setContentEncoding(localBasicHeader);
  }
  
  public void setContentEncoding(Header paramHeader)
  {
    this.contentEncoding = paramHeader;
  }
  
  public void setContentType(String paramString)
  {
    BasicHeader localBasicHeader = null;
    if (paramString != null) {
      localBasicHeader = new BasicHeader("Content-Type", paramString);
    }
    setContentType(localBasicHeader);
  }
  
  public void setContentType(Header paramHeader)
  {
    this.contentType = paramHeader;
  }
  
  public void setHttpListener(HttpListener paramHttpListener)
  {
    this.httpListener = paramHttpListener;
  }
  
  public void setRequest(AbstractRequest paramAbstractRequest)
  {
    this.request = paramAbstractRequest;
    setHttpListener(paramAbstractRequest.getHttpListener());
  }
  
  protected void updateProgress(long paramLong)
  {
    this.bytesWritten += paramLong;
    if (this.httpListener != null) {
      this.httpListener.notifyCallUploading(this.request, this.totalSize, this.bytesWritten);
    }
  }
}
