package com.litesuits.http.impl.apache;

import com.litesuits.http.exception.HttpClientException;
import com.litesuits.http.impl.apache.entity.FileEntity;
import com.litesuits.http.impl.apache.entity.InputStreamEntity;
import com.litesuits.http.impl.apache.entity.MultipartEntity;
import com.litesuits.http.request.AbstractRequest;
import com.litesuits.http.request.content.ByteArrayBody;
import com.litesuits.http.request.content.FileBody;
import com.litesuits.http.request.content.HttpBody;
import com.litesuits.http.request.content.InputStreamBody;
import com.litesuits.http.request.content.StringBody;
import com.litesuits.http.request.content.multi.MultipartBody;
import java.io.InputStream;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;

public class EntityBuilder
{
  public EntityBuilder() {}
  
  public static HttpEntity build(AbstractRequest paramAbstractRequest)
  {
    try
    {
      Object localObject = paramAbstractRequest.getHttpBody();
      if (localObject != null)
      {
        paramAbstractRequest.addHeader("Content-Type", ((HttpBody)localObject).getContentType());
        if ((localObject instanceof StringBody))
        {
          paramAbstractRequest = (StringBody)localObject;
          return new StringEntity(paramAbstractRequest.string, paramAbstractRequest.charset);
        }
        if ((localObject instanceof ByteArrayBody)) {
          return new ByteArrayEntity(((ByteArrayBody)localObject).bytes);
        }
        if ((localObject instanceof InputStreamBody))
        {
          localObject = (InputStreamBody)localObject;
          return new InputStreamEntity(((InputStreamBody)localObject).inputStream, ((InputStreamBody)localObject).inputStream.available(), paramAbstractRequest);
        }
        if ((localObject instanceof FileBody))
        {
          localObject = (FileBody)localObject;
          return new FileEntity(((FileBody)localObject).file, ((FileBody)localObject).contentType, paramAbstractRequest);
        }
        if ((localObject instanceof MultipartBody)) {
          return new MultipartEntity((MultipartBody)localObject);
        }
        throw new RuntimeException("Unpredictable Entity Body(非法实体)");
      }
    }
    catch (Exception paramAbstractRequest)
    {
      throw new HttpClientException(paramAbstractRequest);
    }
    return null;
  }
}
