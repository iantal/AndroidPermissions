package com.litesuits.http.impl.apache.entity;

import com.litesuits.http.request.AbstractRequest;
import java.io.InputStream;
import java.io.OutputStream;

public class InputStreamEntity
  extends AbstractHttpEntity
{
  private boolean consumed = false;
  private final InputStream content;
  private final long length;
  
  public InputStreamEntity(InputStream paramInputStream, long paramLong, AbstractRequest paramAbstractRequest)
  {
    if (paramInputStream == null) {
      throw new IllegalArgumentException("Source input stream may not be null");
    }
    this.content = paramInputStream;
    this.length = paramLong;
    setRequest(paramAbstractRequest);
  }
  
  public void consumeContent()
  {
    this.consumed = true;
    this.content.close();
  }
  
  public InputStream getContent()
  {
    return this.content;
  }
  
  public long getContentLength()
  {
    return this.length;
  }
  
  public boolean isRepeatable()
  {
    return false;
  }
  
  public boolean isStreaming()
  {
    return !this.consumed;
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    if (paramOutputStream == null) {
      throw new IllegalArgumentException("Output stream may not be null");
    }
    InputStream localInputStream = this.content;
    byte[] arrayOfByte = new byte['á€€'];
    this.bytesWritten = 0L;
    int i;
    if (this.length < 0L)
    {
      this.totalSize = localInputStream.available();
      for (;;)
      {
        i = localInputStream.read(arrayOfByte);
        if (i == -1) {
          break;
        }
        paramOutputStream.write(arrayOfByte, 0, i);
        updateProgress(i);
      }
    }
    this.totalSize = this.length;
    for (long l = this.length;; l -= i)
    {
      if (l > 0L)
      {
        i = localInputStream.read(arrayOfByte, 0, (int)Math.min(4096L, l));
        if (i != -1) {}
      }
      else
      {
        this.consumed = true;
        return;
      }
      paramOutputStream.write(arrayOfByte, 0, i);
      updateProgress(i);
    }
  }
}
