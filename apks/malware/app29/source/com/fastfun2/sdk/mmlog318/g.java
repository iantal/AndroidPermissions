package com.fastfun2.sdk.mmlog318;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.security.MessageDigest;
import java.util.Locale;
import java.util.Random;

public final class g
{
  public g() {}
  
  public static String a()
  {
    return a(Build.MODEL);
  }
  
  public static String a(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
      return a(paramContext);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext = "";
      }
    }
  }
  
  public static String a(Context paramContext, String paramString)
  {
    try
    {
      int i = new Random().nextInt(10);
      paramContext = String.valueOf(b(System.currentTimeMillis() + paramString + a(paramContext) + g(paramContext) + i).toCharArray(), 8, 16);
      return c(paramContext);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext = "";
      }
    }
  }
  
  protected static String a(String paramString)
  {
    if (paramString == null) {
      return "";
    }
    String str = paramString;
    if (paramString.length() > 2000) {
      str = paramString.substring(0, 1999);
    }
    return str.replace("\\", "").replace("|", "");
  }
  
  protected static boolean a(String paramString, int paramInt)
  {
    return (paramString != null) && (paramString.length() > paramInt);
  }
  
  public static String b()
  {
    return a(Build.MANUFACTURER);
  }
  
  public static String b(Context paramContext)
  {
    try
    {
      String str = a(paramContext);
      if ((str != null) && (str.length() > 6)) {
        return String.valueOf(b(str).toCharArray(), 7, 18);
      }
      str = g(paramContext);
      if ((str != null) && (str.length() >= 9)) {
        return String.valueOf(b(str).toCharArray(), 7, 18);
      }
      paramContext = c(paramContext);
      if ((paramContext != null) && (paramContext.length() != 0)) {
        return String.valueOf(b(paramContext).toCharArray(), 7, 18);
      }
      paramContext = String.valueOf(b(a(Build.MODEL)).toCharArray(), 7, 18);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  private static String b(String paramString)
  {
    int j = 0;
    for (;;)
    {
      int i;
      try
      {
        Object localObject = MessageDigest.getInstance("MD5");
        paramString = paramString.toCharArray();
        byte[] arrayOfByte = new byte[paramString.length];
        i = 0;
        if (i >= paramString.length)
        {
          paramString = ((MessageDigest)localObject).digest(arrayOfByte);
          localObject = new StringBuffer();
          i = j;
          if (i >= paramString.length)
          {
            paramString = ((StringBuffer)localObject).toString();
            return paramString;
          }
          j = paramString[i] & 0xFF;
          if (j < 16) {
            ((StringBuffer)localObject).append("0");
          }
          ((StringBuffer)localObject).append(Integer.toHexString(j));
          i += 1;
          continue;
        }
        arrayOfByte[i] = ((byte)paramString[i]);
      }
      catch (Exception paramString)
      {
        paramString.printStackTrace();
        return "";
      }
      i += 1;
    }
  }
  
  private static boolean b(Context paramContext, String paramString)
  {
    boolean bool = false;
    try
    {
      int i = paramContext.getPackageManager().checkPermission(paramString, paramContext.getPackageName());
      if (i == 0) {
        bool = true;
      }
      return bool;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return false;
  }
  
  public static String c()
  {
    return a("android " + Build.VERSION.RELEASE);
  }
  
  public static String c(Context paramContext)
  {
    try
    {
      paramContext = (TelephonyManager)paramContext.getSystemService("phone");
      if (paramContext == null) {
        break label60;
      }
      paramContext = paramContext.getSubscriberId();
      if (paramContext == null) {
        break label54;
      }
      paramContext = paramContext.trim();
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext = "";
        Log.i("MobileUtils", "can't not read imsi");
        continue;
        label54:
        paramContext = "";
        continue;
        label60:
        paramContext = "";
      }
    }
    e.a("MobileUtils", paramContext);
    return c(paramContext);
  }
  
  private static String c(String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "";
    }
    return str;
  }
  
  public static int d(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.widthPixels;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static String d()
  {
    try
    {
      String str1 = Locale.getDefault().getCountry();
      return c(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static int e(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.heightPixels;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static String e()
  {
    try
    {
      String str1 = Locale.getDefault().getLanguage();
      return c(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static int f(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.densityDpi;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  /* Error */
  public static String f()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: aconst_null
    //   3: astore_1
    //   4: ldc 38
    //   6: astore_3
    //   7: new 235	java/lang/ProcessBuilder
    //   10: dup
    //   11: iconst_2
    //   12: anewarray 56	java/lang/String
    //   15: dup
    //   16: iconst_0
    //   17: ldc -19
    //   19: aastore
    //   20: dup
    //   21: iconst_1
    //   22: ldc -17
    //   24: aastore
    //   25: invokespecial 242	java/lang/ProcessBuilder:<init>	([Ljava/lang/String;)V
    //   28: invokevirtual 246	java/lang/ProcessBuilder:start	()Ljava/lang/Process;
    //   31: invokevirtual 252	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   34: astore 4
    //   36: aload 4
    //   38: astore_1
    //   39: aload 4
    //   41: astore_2
    //   42: bipush 24
    //   44: newarray byte
    //   46: astore 5
    //   48: aload 4
    //   50: astore_1
    //   51: aload 4
    //   53: astore_2
    //   54: aload 4
    //   56: aload 5
    //   58: invokevirtual 258	java/io/InputStream:read	([B)I
    //   61: istore_0
    //   62: iload_0
    //   63: iconst_m1
    //   64: if_icmpne +13 -> 77
    //   67: aload 4
    //   69: invokevirtual 261	java/io/InputStream:close	()V
    //   72: aload_3
    //   73: invokevirtual 170	java/lang/String:trim	()Ljava/lang/String;
    //   76: areturn
    //   77: aload 4
    //   79: astore_1
    //   80: aload 4
    //   82: astore_2
    //   83: new 48	java/lang/StringBuilder
    //   86: dup
    //   87: aload_3
    //   88: invokestatic 264	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   91: invokespecial 63	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   94: new 56	java/lang/String
    //   97: dup
    //   98: aload 5
    //   100: invokespecial 267	java/lang/String:<init>	([B)V
    //   103: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   106: invokevirtual 78	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   109: astore_3
    //   110: goto -62 -> 48
    //   113: astore_3
    //   114: aload_1
    //   115: astore_2
    //   116: aload_3
    //   117: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   120: ldc 38
    //   122: astore_3
    //   123: aload_1
    //   124: invokevirtual 261	java/io/InputStream:close	()V
    //   127: goto -55 -> 72
    //   130: astore_1
    //   131: aload_1
    //   132: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   135: goto -63 -> 72
    //   138: astore_1
    //   139: aload_2
    //   140: invokevirtual 261	java/io/InputStream:close	()V
    //   143: aload_1
    //   144: athrow
    //   145: astore_2
    //   146: aload_2
    //   147: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   150: goto -7 -> 143
    //   153: astore_1
    //   154: aload_1
    //   155: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   158: goto -86 -> 72
    // Local variable table:
    //   start	length	slot	name	signature
    //   61	4	0	i	int
    //   3	121	1	localObject1	Object
    //   130	2	1	localException1	Exception
    //   138	6	1	localObject2	Object
    //   153	2	1	localException2	Exception
    //   1	139	2	localObject3	Object
    //   145	2	2	localException3	Exception
    //   6	104	3	str1	String
    //   113	4	3	localException4	Exception
    //   122	1	3	str2	String
    //   34	47	4	localInputStream	java.io.InputStream
    //   46	53	5	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   7	36	113	java/lang/Exception
    //   42	48	113	java/lang/Exception
    //   54	62	113	java/lang/Exception
    //   83	110	113	java/lang/Exception
    //   123	127	130	java/lang/Exception
    //   7	36	138	finally
    //   42	48	138	finally
    //   54	62	138	finally
    //   83	110	138	finally
    //   116	120	138	finally
    //   139	143	145	java/lang/Exception
    //   67	72	153	java/lang/Exception
  }
  
  /* Error */
  public static String g()
  {
    // Byte code:
    //   0: new 269	java/io/FileReader
    //   3: dup
    //   4: ldc_w 271
    //   7: invokespecial 272	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   10: astore_1
    //   11: aload_1
    //   12: astore_0
    //   13: new 274	java/io/BufferedReader
    //   16: dup
    //   17: aload_1
    //   18: invokespecial 277	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   21: invokevirtual 280	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   24: invokevirtual 170	java/lang/String:trim	()Ljava/lang/String;
    //   27: astore_2
    //   28: aload_1
    //   29: invokevirtual 281	java/io/FileReader:close	()V
    //   32: aload_2
    //   33: areturn
    //   34: astore_0
    //   35: aload_0
    //   36: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   39: aload_2
    //   40: areturn
    //   41: astore_2
    //   42: aconst_null
    //   43: astore_1
    //   44: aload_1
    //   45: astore_0
    //   46: aload_2
    //   47: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   50: aload_1
    //   51: invokevirtual 281	java/io/FileReader:close	()V
    //   54: ldc 38
    //   56: areturn
    //   57: astore_0
    //   58: aload_0
    //   59: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   62: goto -8 -> 54
    //   65: astore_1
    //   66: aconst_null
    //   67: astore_0
    //   68: aload_0
    //   69: invokevirtual 281	java/io/FileReader:close	()V
    //   72: aload_1
    //   73: athrow
    //   74: astore_0
    //   75: aload_0
    //   76: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   79: goto -7 -> 72
    //   82: astore_1
    //   83: goto -15 -> 68
    //   86: astore_2
    //   87: goto -43 -> 44
    // Local variable table:
    //   start	length	slot	name	signature
    //   12	1	0	localFileReader1	java.io.FileReader
    //   34	2	0	localException1	Exception
    //   45	1	0	localFileReader2	java.io.FileReader
    //   57	2	0	localException2	Exception
    //   67	2	0	localObject1	Object
    //   74	2	0	localException3	Exception
    //   10	41	1	localFileReader3	java.io.FileReader
    //   65	8	1	localObject2	Object
    //   82	1	1	localObject3	Object
    //   27	13	2	str	String
    //   41	6	2	localException4	Exception
    //   86	1	2	localException5	Exception
    // Exception table:
    //   from	to	target	type
    //   28	32	34	java/lang/Exception
    //   0	11	41	java/lang/Exception
    //   50	54	57	java/lang/Exception
    //   0	11	65	finally
    //   68	72	74	java/lang/Exception
    //   13	28	82	finally
    //   46	50	82	finally
    //   13	28	86	java/lang/Exception
  }
  
  public static String g(Context paramContext)
  {
    try
    {
      if (b(paramContext, "android.permission.ACCESS_WIFI_STATE"))
      {
        paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
        if (paramContext != null)
        {
          boolean bool = paramContext.equals("");
          if (!bool) {
            break label46;
          }
        }
      }
      for (paramContext = "unknown";; paramContext = "unknown")
      {
        label46:
        return c(paramContext);
        Log.w("MobileUtils", "Could not read MAC, forget to include ACCESS_WIFI_STATE permission?");
      }
      return "unknown";
    }
    catch (Exception paramContext)
    {
      Log.w("MobileUtils", "Could not read MAC, forget to include ACCESS_WIFI_STATE permission?", paramContext);
    }
  }
  
  /* Error */
  public static String h()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: aconst_null
    //   3: astore_0
    //   4: new 269	java/io/FileReader
    //   7: dup
    //   8: ldc_w 315
    //   11: invokespecial 272	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   14: astore_1
    //   15: new 274	java/io/BufferedReader
    //   18: dup
    //   19: aload_1
    //   20: sipush 8192
    //   23: invokespecial 318	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   26: astore_0
    //   27: aload_0
    //   28: invokevirtual 280	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   31: astore_2
    //   32: aload_2
    //   33: ifnonnull +22 -> 55
    //   36: aload_1
    //   37: invokevirtual 281	java/io/FileReader:close	()V
    //   40: aload_0
    //   41: invokevirtual 319	java/io/BufferedReader:close	()V
    //   44: ldc 38
    //   46: areturn
    //   47: astore_0
    //   48: aload_0
    //   49: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   52: goto -8 -> 44
    //   55: aload_2
    //   56: aload_2
    //   57: ldc_w 321
    //   60: invokevirtual 325	java/lang/String:indexOf	(Ljava/lang/String;)I
    //   63: iconst_2
    //   64: iadd
    //   65: aload_2
    //   66: ldc_w 327
    //   69: invokevirtual 325	java/lang/String:indexOf	(Ljava/lang/String;)I
    //   72: iconst_1
    //   73: isub
    //   74: invokevirtual 99	java/lang/String:substring	(II)Ljava/lang/String;
    //   77: invokevirtual 170	java/lang/String:trim	()Ljava/lang/String;
    //   80: astore_2
    //   81: ldc -84
    //   83: aload_2
    //   84: invokestatic 177	com/fastfun2/sdk/mmlog318/e:a	(Ljava/lang/String;Ljava/lang/String;)V
    //   87: aload_2
    //   88: invokestatic 91	com/fastfun2/sdk/mmlog318/g:c	(Ljava/lang/String;)Ljava/lang/String;
    //   91: astore_2
    //   92: aload_1
    //   93: invokevirtual 281	java/io/FileReader:close	()V
    //   96: aload_0
    //   97: invokevirtual 319	java/io/BufferedReader:close	()V
    //   100: aload_2
    //   101: areturn
    //   102: astore_0
    //   103: aload_0
    //   104: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   107: aload_2
    //   108: areturn
    //   109: astore_2
    //   110: aconst_null
    //   111: astore_3
    //   112: aload_0
    //   113: astore_1
    //   114: aload_3
    //   115: astore_0
    //   116: aload_2
    //   117: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   120: aload_1
    //   121: invokevirtual 281	java/io/FileReader:close	()V
    //   124: aload_0
    //   125: invokevirtual 319	java/io/BufferedReader:close	()V
    //   128: ldc 38
    //   130: areturn
    //   131: astore_0
    //   132: aload_0
    //   133: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   136: goto -8 -> 128
    //   139: astore_0
    //   140: aconst_null
    //   141: astore_1
    //   142: aload_1
    //   143: invokevirtual 281	java/io/FileReader:close	()V
    //   146: aload_2
    //   147: invokevirtual 319	java/io/BufferedReader:close	()V
    //   150: aload_0
    //   151: athrow
    //   152: astore_1
    //   153: aload_1
    //   154: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   157: goto -7 -> 150
    //   160: astore_0
    //   161: goto -19 -> 142
    //   164: astore_3
    //   165: aload_0
    //   166: astore_2
    //   167: aload_3
    //   168: astore_0
    //   169: goto -27 -> 142
    //   172: astore_3
    //   173: aload_0
    //   174: astore_2
    //   175: aload_3
    //   176: astore_0
    //   177: goto -35 -> 142
    //   180: astore_2
    //   181: goto -65 -> 116
    //   184: astore_2
    //   185: aconst_null
    //   186: astore_0
    //   187: goto -71 -> 116
    // Local variable table:
    //   start	length	slot	name	signature
    //   3	38	0	localBufferedReader	java.io.BufferedReader
    //   47	50	0	localException1	Exception
    //   102	11	0	localException2	Exception
    //   115	10	0	localObject1	Object
    //   131	2	0	localException3	Exception
    //   139	12	0	localObject2	Object
    //   160	6	0	localObject3	Object
    //   168	19	0	localObject4	Object
    //   14	129	1	localObject5	Object
    //   152	2	1	localException4	Exception
    //   1	107	2	str	String
    //   109	38	2	localException5	Exception
    //   166	9	2	localObject6	Object
    //   180	1	2	localException6	Exception
    //   184	1	2	localException7	Exception
    //   111	4	3	localObject7	Object
    //   164	4	3	localObject8	Object
    //   172	4	3	localObject9	Object
    // Exception table:
    //   from	to	target	type
    //   36	44	47	java/lang/Exception
    //   92	100	102	java/lang/Exception
    //   4	15	109	java/lang/Exception
    //   120	128	131	java/lang/Exception
    //   4	15	139	finally
    //   142	150	152	java/lang/Exception
    //   15	27	160	finally
    //   27	32	164	finally
    //   55	92	164	finally
    //   116	120	172	finally
    //   27	32	180	java/lang/Exception
    //   55	92	180	java/lang/Exception
    //   15	27	184	java/lang/Exception
  }
  
  public static String h(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_APPKEY", "");
      boolean bool;
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        bool = paramContext.equals("");
        if (bool) {
          paramContext = null;
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = null;
    }
    return paramContext;
  }
  
  public static String i(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_CHANNEL", "");
      boolean bool;
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        bool = paramContext.equals("");
        if (bool) {
          paramContext = null;
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = null;
    }
    return paramContext;
  }
  
  public static String j(Context paramContext)
  {
    paramContext = e.d(paramContext).getString("md5", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  public static String k(Context paramContext)
  {
    try
    {
      paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return c(paramContext);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
        paramContext = "";
      }
    }
  }
  
  public static String l(Context paramContext)
  {
    try
    {
      if (b(paramContext, "android.permission.ACCESS_NETWORK_STATE"))
      {
        paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
        if (paramContext == null) {
          return "unknown";
        }
        int i = paramContext.getType();
        if (i == 1) {
          return "wifi";
        }
        paramContext = paramContext.getExtraInfo();
        if (paramContext == null) {
          return "unknown";
        }
        e.a("MobileUtils", "net type:" + paramContext);
        paramContext = paramContext.trim();
        return paramContext;
      }
      return "unknown";
    }
    catch (Exception paramContext)
    {
      Log.w("MobileUtils", "Could not read ACCESSPOINT, forget to include ACCESS_NETSTATE_STATE permission?", paramContext);
    }
    return "unknown";
  }
  
  /* Error */
  public static long[] m(Context paramContext)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 10
    //   3: aconst_null
    //   4: astore 9
    //   6: aload_0
    //   7: invokestatic 379	com/fastfun2/sdk/mmlog318/g:w	(Landroid/content/Context;)I
    //   10: istore_1
    //   11: new 48	java/lang/StringBuilder
    //   14: dup
    //   15: ldc_w 381
    //   18: invokespecial 63	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   21: iload_1
    //   22: invokevirtual 75	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   25: ldc_w 383
    //   28: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   31: invokevirtual 78	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   34: astore_0
    //   35: new 48	java/lang/StringBuilder
    //   38: dup
    //   39: ldc_w 381
    //   42: invokespecial 63	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   45: iload_1
    //   46: invokevirtual 75	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   49: ldc_w 385
    //   52: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   55: invokevirtual 78	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   58: astore 11
    //   60: new 269	java/io/FileReader
    //   63: dup
    //   64: aload_0
    //   65: invokespecial 272	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   68: astore 8
    //   70: new 274	java/io/BufferedReader
    //   73: dup
    //   74: aload 8
    //   76: sipush 500
    //   79: invokespecial 318	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   82: astore_0
    //   83: aload_0
    //   84: invokevirtual 280	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   87: invokevirtual 386	java/lang/String:toString	()Ljava/lang/String;
    //   90: invokevirtual 170	java/lang/String:trim	()Ljava/lang/String;
    //   93: invokestatic 392	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   96: lstore_2
    //   97: aload 8
    //   99: invokevirtual 281	java/io/FileReader:close	()V
    //   102: aload_0
    //   103: invokevirtual 319	java/io/BufferedReader:close	()V
    //   106: aconst_null
    //   107: astore_0
    //   108: aload 9
    //   110: astore 8
    //   112: new 269	java/io/FileReader
    //   115: dup
    //   116: aload 11
    //   118: invokespecial 272	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   121: astore 9
    //   123: new 274	java/io/BufferedReader
    //   126: dup
    //   127: aload 9
    //   129: sipush 500
    //   132: invokespecial 318	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   135: astore 8
    //   137: aload 8
    //   139: invokevirtual 280	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   142: invokevirtual 386	java/lang/String:toString	()Ljava/lang/String;
    //   145: invokevirtual 170	java/lang/String:trim	()Ljava/lang/String;
    //   148: invokestatic 392	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   151: lstore 4
    //   153: aload 9
    //   155: invokevirtual 281	java/io/FileReader:close	()V
    //   158: aload 8
    //   160: invokevirtual 319	java/io/BufferedReader:close	()V
    //   163: ldc -84
    //   165: new 48	java/lang/StringBuilder
    //   168: dup
    //   169: ldc_w 394
    //   172: invokespecial 63	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   175: lload_2
    //   176: invokevirtual 397	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   179: ldc_w 399
    //   182: invokevirtual 67	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   185: lload 4
    //   187: invokevirtual 397	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   190: invokevirtual 78	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   193: invokestatic 177	com/fastfun2/sdk/mmlog318/e:a	(Ljava/lang/String;Ljava/lang/String;)V
    //   196: lload_2
    //   197: lconst_0
    //   198: lcmp
    //   199: ifge +285 -> 484
    //   202: lconst_0
    //   203: lstore_2
    //   204: lload 4
    //   206: lstore 6
    //   208: lload 4
    //   210: lconst_0
    //   211: lcmp
    //   212: ifge +6 -> 218
    //   215: lconst_0
    //   216: lstore 6
    //   218: iconst_2
    //   219: newarray long
    //   221: dup
    //   222: iconst_0
    //   223: lload_2
    //   224: lastore
    //   225: dup
    //   226: iconst_1
    //   227: lload 6
    //   229: lastore
    //   230: areturn
    //   231: astore_0
    //   232: aconst_null
    //   233: astore 8
    //   235: aload 10
    //   237: astore 9
    //   239: aload 8
    //   241: ifnull +13 -> 254
    //   244: aload 8
    //   246: invokevirtual 281	java/io/FileReader:close	()V
    //   249: aload 9
    //   251: invokevirtual 319	java/io/BufferedReader:close	()V
    //   254: aload_0
    //   255: athrow
    //   256: astore 8
    //   258: aload 8
    //   260: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   263: goto -9 -> 254
    //   266: astore_0
    //   267: aconst_null
    //   268: astore_0
    //   269: aconst_null
    //   270: astore 8
    //   272: aload 8
    //   274: ifnull +190 -> 464
    //   277: aload 8
    //   279: invokevirtual 281	java/io/FileReader:close	()V
    //   282: aload_0
    //   283: invokevirtual 319	java/io/BufferedReader:close	()V
    //   286: aconst_null
    //   287: astore_0
    //   288: lconst_0
    //   289: lstore_2
    //   290: aload 9
    //   292: astore 8
    //   294: goto -182 -> 112
    //   297: astore 9
    //   299: aload 9
    //   301: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   304: lconst_0
    //   305: lstore_2
    //   306: goto -194 -> 112
    //   309: astore 9
    //   311: aload 9
    //   313: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   316: goto -204 -> 112
    //   319: astore 9
    //   321: aload 8
    //   323: astore 10
    //   325: aload_0
    //   326: astore 8
    //   328: aload 9
    //   330: astore_0
    //   331: aload 10
    //   333: ifnull +13 -> 346
    //   336: aload 10
    //   338: invokevirtual 281	java/io/FileReader:close	()V
    //   341: aload 8
    //   343: invokevirtual 319	java/io/BufferedReader:close	()V
    //   346: aload_0
    //   347: athrow
    //   348: astore 8
    //   350: aload 8
    //   352: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   355: goto -9 -> 346
    //   358: astore 9
    //   360: aload 8
    //   362: ifnull +96 -> 458
    //   365: aload 8
    //   367: invokevirtual 281	java/io/FileReader:close	()V
    //   370: aload_0
    //   371: invokevirtual 319	java/io/BufferedReader:close	()V
    //   374: lconst_0
    //   375: lstore 4
    //   377: goto -214 -> 163
    //   380: astore_0
    //   381: aload_0
    //   382: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   385: lconst_0
    //   386: lstore 4
    //   388: goto -225 -> 163
    //   391: astore_0
    //   392: aload_0
    //   393: invokevirtual 143	java/lang/Exception:printStackTrace	()V
    //   396: goto -233 -> 163
    //   399: astore 10
    //   401: aload_0
    //   402: astore 8
    //   404: aload 10
    //   406: astore_0
    //   407: aload 9
    //   409: astore 10
    //   411: goto -80 -> 331
    //   414: astore_0
    //   415: aload 9
    //   417: astore 10
    //   419: goto -88 -> 331
    //   422: astore_0
    //   423: aload 8
    //   425: astore_0
    //   426: aload 9
    //   428: astore 8
    //   430: goto -70 -> 360
    //   433: astore_0
    //   434: aload 10
    //   436: astore 9
    //   438: goto -199 -> 239
    //   441: astore 10
    //   443: aload_0
    //   444: astore 9
    //   446: aload 10
    //   448: astore_0
    //   449: goto -210 -> 239
    //   452: astore_0
    //   453: aconst_null
    //   454: astore_0
    //   455: goto -183 -> 272
    //   458: lconst_0
    //   459: lstore 4
    //   461: goto -298 -> 163
    //   464: aconst_null
    //   465: astore_0
    //   466: lconst_0
    //   467: lstore_2
    //   468: aload 9
    //   470: astore 8
    //   472: goto -360 -> 112
    //   475: astore 8
    //   477: aload 9
    //   479: astore 8
    //   481: goto -121 -> 360
    //   484: goto -280 -> 204
    //   487: astore 10
    //   489: goto -217 -> 272
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	492	0	paramContext	Context
    //   10	36	1	i	int
    //   96	372	2	l1	long
    //   151	309	4	l2	long
    //   206	22	6	l3	long
    //   68	177	8	localObject1	Object
    //   256	3	8	localException1	Exception
    //   270	72	8	localObject2	Object
    //   348	18	8	localException2	Exception
    //   402	69	8	localObject3	Object
    //   475	1	8	localException3	Exception
    //   479	1	8	localObject4	Object
    //   4	287	9	localObject5	Object
    //   297	3	9	localException4	Exception
    //   309	3	9	localException5	Exception
    //   319	10	9	localObject6	Object
    //   358	69	9	localException6	Exception
    //   436	42	9	localObject7	Object
    //   1	336	10	localObject8	Object
    //   399	6	10	localObject9	Object
    //   409	26	10	localObject10	Object
    //   441	6	10	localObject11	Object
    //   487	1	10	localException7	Exception
    //   58	59	11	str	String
    // Exception table:
    //   from	to	target	type
    //   60	70	231	finally
    //   244	254	256	java/lang/Exception
    //   60	70	266	java/lang/Exception
    //   277	286	297	java/lang/Exception
    //   97	106	309	java/lang/Exception
    //   112	123	319	finally
    //   336	346	348	java/lang/Exception
    //   112	123	358	java/lang/Exception
    //   365	374	380	java/lang/Exception
    //   153	163	391	java/lang/Exception
    //   123	137	399	finally
    //   137	153	414	finally
    //   137	153	422	java/lang/Exception
    //   70	83	433	finally
    //   83	97	441	finally
    //   70	83	452	java/lang/Exception
    //   123	137	475	java/lang/Exception
    //   83	97	487	java/lang/Exception
  }
  
  public static String n(Context paramContext)
  {
    try
    {
      Object localObject = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()))
      {
        localObject = ((NetworkInfo)localObject).getTypeName();
        boolean bool = ((String)localObject).equalsIgnoreCase("WIFI");
        if (bool) {
          return "WIFI";
        }
        if (((String)localObject).equalsIgnoreCase("MOBILE"))
        {
          int i = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
          return String.valueOf(i);
        }
      }
      else
      {
        return "";
      }
    }
    catch (Exception paramContext)
    {
      return "";
    }
    return "";
  }
  
  private static int o(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      float f = localDisplayMetrics.density;
      return (int)f;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  private static String p(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_WW_CHANNEL", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  private static String q(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_VERSION", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  private static String r(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_PACKAGE_NAME", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  private static String s(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_PROGRAM_ID", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  private static String t(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getPackageName();
      return c(paramContext);
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext = "";
      }
    }
  }
  
  private static String u(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_VERSION_CODE", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  private static String v(Context paramContext)
  {
    paramContext = paramContext.getSharedPreferences("lxdMoblieAgent_sys_config", 0).getString("MOBILE_VERSION_NAME", "");
    if (paramContext.trim().equals("")) {
      return null;
    }
    return paramContext.trim();
  }
  
  private static int w(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 1).uid;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
}
