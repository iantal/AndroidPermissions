package com.fastfun2.sdk.util;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.Locale;

public class DeviceUtils
{
  public DeviceUtils() {}
  
  public static void appendDeviceInfo(Context paramContext, StringBuffer paramStringBuffer)
  {
    int j = 0;
    paramStringBuffer.append("&imei=").append(getImei(paramContext));
    paramStringBuffer.append("&imsi=").append(getImsi(paramContext));
    StringBuffer localStringBuffer = paramStringBuffer.append("&aimei=");
    if (getImeiAuthenticity(paramContext)) {}
    for (int i = 1;; i = 0)
    {
      localStringBuffer.append(i);
      localStringBuffer = paramStringBuffer.append("&aimsi=");
      i = j;
      if (getImsiAuthenticity(paramContext)) {
        i = 1;
      }
      localStringBuffer.append(i);
      paramStringBuffer.append("&iccid=").append(getIccid(paramContext));
      paramStringBuffer.append("&pmodel=").append(encodeData(getModel()));
      paramStringBuffer.append("&osversion=").append(encodeData(getRelease()));
      paramStringBuffer.append("&nwtype=").append(encodeData(getNetWorkType(paramContext)));
      paramStringBuffer.append("&ctech=").append(encodeData(getNetworkClass(paramContext)));
      return;
    }
  }
  
  private static String emptyStr(String paramString)
  {
    String str = paramString;
    if (TextUtils.isEmpty(paramString)) {
      str = "";
    }
    return str;
  }
  
  private static String encodeData(String paramString)
  {
    try
    {
      paramString = URLEncoder.encode(paramString, "UTF-8");
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static String getCarrierName(Context paramContext)
  {
    try
    {
      String str = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkOperatorName();
      return str;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return getImsi(paramContext);
  }
  
  public static String getCountryCode()
  {
    try
    {
      String str1 = Locale.getDefault().getCountry();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getCpuRatioCur()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")).readLine().trim();
      return str;
    }
    catch (FileNotFoundException localFileNotFoundException)
    {
      localFileNotFoundException.printStackTrace();
      return "";
    }
    catch (IOException localIOException)
    {
      for (;;)
      {
        localIOException.printStackTrace();
      }
    }
  }
  
  public static String getCpuRatioMax()
  {
    for (String str1 = "";; str1 = str1 + new String(arrayOfByte))
    {
      try
      {
        InputStream localInputStream = new ProcessBuilder(new String[] { "/system/bin/cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" }).start().getInputStream();
        arrayOfByte = new byte[24];
        if (localInputStream.read(arrayOfByte) != -1) {
          continue;
        }
        localInputStream.close();
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          byte[] arrayOfByte;
          localIOException.printStackTrace();
          String str2 = "N/A";
        }
      }
      return str1.trim();
    }
  }
  
  public static int getHeightPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.heightPixels;
  }
  
  public static final String getIccid(Context paramContext)
  {
    try
    {
      paramContext = IccidUtil.getIccid(paramContext);
      return paramContext;
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getImei(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getDeviceId();
    if ((str == null) || (str.length() != 15))
    {
      str = getImsi(paramContext);
      SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMEI_A", false);
      return str;
    }
    SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMEI_A", true);
    return str;
  }
  
  public static boolean getImeiAuthenticity(Context paramContext)
  {
    return SharedUtil.getBoolean(paramContext, "device_authenticity", "Key_IMEI_A", false);
  }
  
  public static final String getImsi(Context paramContext)
  {
    String str = ((TelephonyManager)paramContext.getSystemService("phone")).getSubscriberId();
    if ((str == null) || (str.length() != 15))
    {
      str = ImsiUtil.getImsi(paramContext);
      SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMSI_A", false);
      return str;
    }
    SharedUtil.editBoolean(paramContext, "device_authenticity", "Key_IMSI_A", true);
    return str;
  }
  
  public static boolean getImsiAuthenticity(Context paramContext)
  {
    return SharedUtil.getBoolean(paramContext, "device_authenticity", "Key_IMSI_A", false);
  }
  
  public static String getIpAddress()
  {
    try
    {
      localObject = NetworkInterface.getNetworkInterfaces();
      boolean bool = ((Enumeration)localObject).hasMoreElements();
      if (bool) {
        break label18;
      }
    }
    catch (SocketException localSocketException)
    {
      for (;;)
      {
        Object localObject;
        label18:
        Enumeration localEnumeration;
        InetAddress localInetAddress;
        Log.e("WifiPreference IpAddress", localSocketException.toString());
      }
    }
    return "";
    localEnumeration = ((NetworkInterface)((Enumeration)localObject).nextElement()).getInetAddresses();
    do
    {
      if (!localEnumeration.hasMoreElements()) {
        break;
      }
      localInetAddress = (InetAddress)localEnumeration.nextElement();
    } while (localInetAddress.isLoopbackAddress());
    localObject = localInetAddress.getHostAddress().toString();
    return localObject;
  }
  
  public static String getLanguageCode()
  {
    try
    {
      String str1 = Locale.getDefault().getLanguage();
      return emptyStr(str1);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2 = "";
      }
    }
  }
  
  public static String getMacAddress(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getMacAddress();
      if (paramContext != null) {}
      boolean bool;
      localException1.printStackTrace();
    }
    catch (Exception localException1)
    {
      try
      {
        bool = paramContext.equals("");
        if (bool) {
          paramContext = "unknown";
        }
        return paramContext;
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
      localException1 = localException1;
      paramContext = "unknown";
    }
    return paramContext;
  }
  
  public static String getManufacturer()
  {
    return Build.MANUFACTURER;
  }
  
  public static String getMenoryRatio()
  {
    try
    {
      String str = new BufferedReader(new FileReader("/proc/meminfo"), 8192).readLine();
      if (str != null)
      {
        str = str.substring(str.indexOf(":") + 2, str.indexOf("k") - 1).trim();
        return str;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "";
  }
  
  public static String getModel()
  {
    return Build.MODEL;
  }
  
  public static String getNetWorkType(Context paramContext)
  {
    try
    {
      Object localObject = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if ((localObject != null) && (((NetworkInfo)localObject).isConnected()))
      {
        localObject = ((NetworkInfo)localObject).getTypeName();
        boolean bool = ((String)localObject).equalsIgnoreCase("WIFI");
        if (bool) {
          return "WIFI";
        }
        if (((String)localObject).equalsIgnoreCase("MOBILE"))
        {
          paramContext = ((TelephonyManager)paramContext.getSystemService("phone")).getNetworkType();
          return paramContext;
        }
        return "";
      }
    }
    catch (Exception paramContext) {}
    return "";
  }
  
  public static String getNetworkClass(Context paramContext)
  {
    return NetworkClassUtil.getNetworkClass(getNetWorkType(paramContext));
  }
  
  public static String getNetworkTypeName(Context paramContext)
  {
    try
    {
      paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
      if (paramContext == null) {
        return "GPRS";
      }
      paramContext = paramContext.getTypeName();
      if (paramContext.compareTo("MOBILE") != 0)
      {
        int i = paramContext.compareTo("mobile");
        if (i != 0) {}
      }
      else
      {
        return "GPRS";
      }
      paramContext = paramContext.trim();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "GPRS";
  }
  
  public static String getRelease()
  {
    return Build.VERSION.RELEASE;
  }
  
  public static String getSSID(Context paramContext)
  {
    try
    {
      paramContext = ((WifiManager)paramContext.getSystemService("wifi")).getConnectionInfo().getSSID();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "";
  }
  
  public static int getScreenDensity(Context paramContext)
  {
    try
    {
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
      int i = localDisplayMetrics.densityDpi;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  /* Error */
  public static long[] getTcpRxTxBytes(Context paramContext)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 12
    //   3: aconst_null
    //   4: astore 11
    //   6: aconst_null
    //   7: astore 9
    //   9: aload_0
    //   10: invokestatic 398	com/fastfun2/sdk/util/DeviceUtils:getUid	(Landroid/content/Context;)I
    //   13: istore_1
    //   14: new 178	java/lang/StringBuilder
    //   17: dup
    //   18: ldc_w 400
    //   21: invokespecial 183	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   24: iload_1
    //   25: invokevirtual 403	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   28: ldc_w 405
    //   31: invokevirtual 189	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   34: invokevirtual 192	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   37: astore_0
    //   38: new 178	java/lang/StringBuilder
    //   41: dup
    //   42: ldc_w 400
    //   45: invokespecial 183	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   48: iload_1
    //   49: invokevirtual 403	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   52: ldc_w 407
    //   55: invokevirtual 189	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   58: invokevirtual 192	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   61: astore 13
    //   63: new 129	java/io/FileReader
    //   66: dup
    //   67: aload_0
    //   68: invokespecial 134	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   71: astore_0
    //   72: new 127	java/io/BufferedReader
    //   75: dup
    //   76: aload_0
    //   77: sipush 500
    //   80: invokespecial 324	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   83: astore 8
    //   85: aload 8
    //   87: invokevirtual 140	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   90: invokevirtual 279	java/lang/String:toString	()Ljava/lang/String;
    //   93: invokevirtual 145	java/lang/String:trim	()Ljava/lang/String;
    //   96: invokestatic 413	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   99: lstore 4
    //   101: aload_0
    //   102: invokevirtual 414	java/io/FileReader:close	()V
    //   105: aload 8
    //   107: invokevirtual 415	java/io/BufferedReader:close	()V
    //   110: new 129	java/io/FileReader
    //   113: dup
    //   114: aload 13
    //   116: invokespecial 134	java/io/FileReader:<init>	(Ljava/lang/String;)V
    //   119: astore_0
    //   120: new 127	java/io/BufferedReader
    //   123: dup
    //   124: aload_0
    //   125: sipush 500
    //   128: invokespecial 324	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   131: astore 8
    //   133: aload 8
    //   135: invokevirtual 140	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   138: invokevirtual 279	java/lang/String:toString	()Ljava/lang/String;
    //   141: invokevirtual 145	java/lang/String:trim	()Ljava/lang/String;
    //   144: invokestatic 413	java/lang/Long:parseLong	(Ljava/lang/String;)J
    //   147: lstore_2
    //   148: aload_0
    //   149: invokevirtual 414	java/io/FileReader:close	()V
    //   152: aload 8
    //   154: invokevirtual 415	java/io/BufferedReader:close	()V
    //   157: lload 4
    //   159: lconst_0
    //   160: lcmp
    //   161: ifge +356 -> 517
    //   164: lconst_0
    //   165: lstore 4
    //   167: lload_2
    //   168: lstore 6
    //   170: lload_2
    //   171: lconst_0
    //   172: lcmp
    //   173: ifge +6 -> 179
    //   176: lconst_0
    //   177: lstore 6
    //   179: iconst_2
    //   180: newarray long
    //   182: dup
    //   183: iconst_0
    //   184: lload 4
    //   186: lastore
    //   187: dup
    //   188: iconst_1
    //   189: lload 6
    //   191: lastore
    //   192: areturn
    //   193: astore 9
    //   195: aconst_null
    //   196: astore 8
    //   198: aconst_null
    //   199: astore_0
    //   200: aload 9
    //   202: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   205: aload 8
    //   207: ifnull +8 -> 215
    //   210: aload 8
    //   212: invokevirtual 414	java/io/FileReader:close	()V
    //   215: aload_0
    //   216: ifnull +290 -> 506
    //   219: aload_0
    //   220: invokevirtual 415	java/io/BufferedReader:close	()V
    //   223: lconst_0
    //   224: lstore 4
    //   226: goto -116 -> 110
    //   229: astore_0
    //   230: aload_0
    //   231: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   234: lconst_0
    //   235: lstore 4
    //   237: goto -127 -> 110
    //   240: astore_0
    //   241: aconst_null
    //   242: astore 8
    //   244: aload 8
    //   246: ifnull +8 -> 254
    //   249: aload 8
    //   251: invokevirtual 414	java/io/FileReader:close	()V
    //   254: aload 9
    //   256: ifnull +8 -> 264
    //   259: aload 9
    //   261: invokevirtual 415	java/io/BufferedReader:close	()V
    //   264: aload_0
    //   265: athrow
    //   266: astore 8
    //   268: aload 8
    //   270: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   273: goto -9 -> 264
    //   276: astore_0
    //   277: aload_0
    //   278: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   281: goto -171 -> 110
    //   284: astore 8
    //   286: aconst_null
    //   287: astore_0
    //   288: aload 12
    //   290: astore 9
    //   292: aload 8
    //   294: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   297: aload_0
    //   298: ifnull +7 -> 305
    //   301: aload_0
    //   302: invokevirtual 414	java/io/FileReader:close	()V
    //   305: aload 9
    //   307: ifnull +205 -> 512
    //   310: aload 9
    //   312: invokevirtual 415	java/io/BufferedReader:close	()V
    //   315: lconst_0
    //   316: lstore_2
    //   317: goto -160 -> 157
    //   320: astore_0
    //   321: aload_0
    //   322: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   325: lconst_0
    //   326: lstore_2
    //   327: goto -170 -> 157
    //   330: astore_0
    //   331: aconst_null
    //   332: astore 8
    //   334: aload 11
    //   336: astore 9
    //   338: aload 8
    //   340: ifnull +8 -> 348
    //   343: aload 8
    //   345: invokevirtual 414	java/io/FileReader:close	()V
    //   348: aload 9
    //   350: ifnull +8 -> 358
    //   353: aload 9
    //   355: invokevirtual 415	java/io/BufferedReader:close	()V
    //   358: aload_0
    //   359: athrow
    //   360: astore 8
    //   362: aload 8
    //   364: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   367: goto -9 -> 358
    //   370: astore_0
    //   371: aload_0
    //   372: invokevirtual 94	java/lang/Exception:printStackTrace	()V
    //   375: goto -218 -> 157
    //   378: astore 10
    //   380: aload_0
    //   381: astore 8
    //   383: aload 11
    //   385: astore 9
    //   387: aload 10
    //   389: astore_0
    //   390: goto -52 -> 338
    //   393: astore 10
    //   395: aload_0
    //   396: astore 8
    //   398: aload 10
    //   400: astore_0
    //   401: goto -157 -> 244
    //   404: astore 9
    //   406: aload_0
    //   407: astore 8
    //   409: aconst_null
    //   410: astore_0
    //   411: goto -211 -> 200
    //   414: astore 10
    //   416: aload_0
    //   417: astore 9
    //   419: aload 8
    //   421: astore_0
    //   422: aload 9
    //   424: astore 8
    //   426: aload 10
    //   428: astore 9
    //   430: goto -230 -> 200
    //   433: astore 10
    //   435: aload_0
    //   436: astore 11
    //   438: aload 8
    //   440: astore 9
    //   442: aload 10
    //   444: astore_0
    //   445: aload 11
    //   447: astore 8
    //   449: goto -205 -> 244
    //   452: astore 10
    //   454: aload 8
    //   456: astore 9
    //   458: aload 10
    //   460: astore 8
    //   462: goto -170 -> 292
    //   465: astore 9
    //   467: aload_0
    //   468: astore 10
    //   470: aload 9
    //   472: astore_0
    //   473: aload 8
    //   475: astore 9
    //   477: aload 10
    //   479: astore 8
    //   481: goto -143 -> 338
    //   484: astore 10
    //   486: aload_0
    //   487: astore 8
    //   489: aload 10
    //   491: astore_0
    //   492: goto -154 -> 338
    //   495: astore 10
    //   497: aload_0
    //   498: astore 9
    //   500: aload 10
    //   502: astore_0
    //   503: goto -259 -> 244
    //   506: lconst_0
    //   507: lstore 4
    //   509: goto -399 -> 110
    //   512: lconst_0
    //   513: lstore_2
    //   514: goto -357 -> 157
    //   517: goto -350 -> 167
    //   520: astore 8
    //   522: aload 12
    //   524: astore 9
    //   526: goto -234 -> 292
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	529	0	paramContext	Context
    //   13	36	1	i	int
    //   147	367	2	l1	long
    //   99	409	4	l2	long
    //   168	22	6	l3	long
    //   83	167	8	localBufferedReader	BufferedReader
    //   266	3	8	localException1	Exception
    //   284	9	8	localException2	Exception
    //   332	12	8	localObject1	Object
    //   360	3	8	localException3	Exception
    //   381	107	8	localObject2	Object
    //   520	1	8	localException4	Exception
    //   7	1	9	localObject3	Object
    //   193	67	9	localException5	Exception
    //   290	96	9	localObject4	Object
    //   404	1	9	localException6	Exception
    //   417	40	9	localObject5	Object
    //   465	6	9	localObject6	Object
    //   475	50	9	localObject7	Object
    //   378	10	10	localObject8	Object
    //   393	6	10	localObject9	Object
    //   414	13	10	localException7	Exception
    //   433	10	10	localObject10	Object
    //   452	7	10	localException8	Exception
    //   468	10	10	localContext1	Context
    //   484	6	10	localObject11	Object
    //   495	6	10	localObject12	Object
    //   4	442	11	localContext2	Context
    //   1	522	12	localObject13	Object
    //   61	54	13	str	String
    // Exception table:
    //   from	to	target	type
    //   63	72	193	java/lang/Exception
    //   210	215	229	java/lang/Exception
    //   219	223	229	java/lang/Exception
    //   63	72	240	finally
    //   249	254	266	java/lang/Exception
    //   259	264	266	java/lang/Exception
    //   101	110	276	java/lang/Exception
    //   110	120	284	java/lang/Exception
    //   301	305	320	java/lang/Exception
    //   310	315	320	java/lang/Exception
    //   110	120	330	finally
    //   343	348	360	java/lang/Exception
    //   353	358	360	java/lang/Exception
    //   148	157	370	java/lang/Exception
    //   120	133	378	finally
    //   72	85	393	finally
    //   72	85	404	java/lang/Exception
    //   85	101	414	java/lang/Exception
    //   85	101	433	finally
    //   133	148	452	java/lang/Exception
    //   133	148	465	finally
    //   292	297	484	finally
    //   200	205	495	finally
    //   120	133	520	java/lang/Exception
  }
  
  private static int getUid(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getApplicationInfo(paramContext.getPackageName(), 1).uid;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return -1;
  }
  
  public static int getVersionCode(Context paramContext)
  {
    try
    {
      int i = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 16384).versionCode;
      return i;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return 0;
  }
  
  public static int getWidthPixels(Context paramContext)
  {
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay().getMetrics(localDisplayMetrics);
    return localDisplayMetrics.widthPixels;
  }
}
