package com.umpay.huafubao.b;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import java.net.URI;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpResponseException;

public abstract class f
  implements r
{
  String a = "UTF-8";
  private final Handler b = new g(this);
  private Boolean c = Boolean.valueOf(false);
  private URI d = null;
  private Header[] e = null;
  
  public f()
  {
    a(null);
  }
  
  private Message a(int paramInt, Object paramObject)
  {
    return this.b.obtainMessage(paramInt, paramObject);
  }
  
  /* Error */
  private byte[] a(org.apache.http.HttpEntity paramHttpEntity)
  {
    // Byte code:
    //   0: sipush 4096
    //   3: istore_2
    //   4: iconst_0
    //   5: istore_3
    //   6: aload_1
    //   7: ifnull +175 -> 182
    //   10: aload_1
    //   11: invokeinterface 62 1 0
    //   16: astore 6
    //   18: aload 6
    //   20: ifnull +162 -> 182
    //   23: aload_1
    //   24: invokeinterface 66 1 0
    //   29: lstore 4
    //   31: lload 4
    //   33: ldc2_w 67
    //   36: lcmp
    //   37: ifle +13 -> 50
    //   40: new 70	java/lang/IllegalArgumentException
    //   43: dup
    //   44: ldc 72
    //   46: invokespecial 75	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   49: athrow
    //   50: lload 4
    //   52: lconst_0
    //   53: lcmp
    //   54: ifge +109 -> 163
    //   57: new 77	org/apache/http/util/ByteArrayBuffer
    //   60: dup
    //   61: iload_2
    //   62: invokespecial 80	org/apache/http/util/ByteArrayBuffer:<init>	(I)V
    //   65: astore_1
    //   66: sipush 4096
    //   69: newarray byte
    //   71: astore 7
    //   73: iload_3
    //   74: istore_2
    //   75: aload 6
    //   77: aload 7
    //   79: invokevirtual 86	java/io/InputStream:read	([B)I
    //   82: istore_3
    //   83: iload_3
    //   84: iconst_m1
    //   85: if_icmpeq +85 -> 170
    //   88: invokestatic 92	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   91: invokevirtual 96	java/lang/Thread:isInterrupted	()Z
    //   94: ifne +76 -> 170
    //   97: iload_2
    //   98: iload_3
    //   99: iadd
    //   100: istore_2
    //   101: aload_1
    //   102: aload 7
    //   104: iconst_0
    //   105: iload_3
    //   106: invokevirtual 100	org/apache/http/util/ByteArrayBuffer:append	([BII)V
    //   109: aload_0
    //   110: aload_0
    //   111: iconst_4
    //   112: iconst_2
    //   113: anewarray 4	java/lang/Object
    //   116: dup
    //   117: iconst_0
    //   118: iload_2
    //   119: invokestatic 105	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   122: aastore
    //   123: dup
    //   124: iconst_1
    //   125: lload 4
    //   127: l2i
    //   128: invokestatic 105	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   131: aastore
    //   132: invokespecial 107	com/umpay/huafubao/b/f:a	(ILjava/lang/Object;)Landroid/os/Message;
    //   135: invokespecial 110	com/umpay/huafubao/b/f:b	(Landroid/os/Message;)V
    //   138: goto -63 -> 75
    //   141: astore_1
    //   142: aload 6
    //   144: invokevirtual 113	java/io/InputStream:close	()V
    //   147: aload_1
    //   148: athrow
    //   149: astore_1
    //   150: invokestatic 118	java/lang/System:gc	()V
    //   153: new 120	java/io/IOException
    //   156: dup
    //   157: ldc 122
    //   159: invokespecial 123	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   162: athrow
    //   163: lload 4
    //   165: l2i
    //   166: istore_2
    //   167: goto -110 -> 57
    //   170: aload 6
    //   172: invokevirtual 113	java/io/InputStream:close	()V
    //   175: aload_1
    //   176: invokevirtual 127	org/apache/http/util/ByteArrayBuffer:toByteArray	()[B
    //   179: astore_1
    //   180: aload_1
    //   181: areturn
    //   182: aconst_null
    //   183: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	184	0	this	f
    //   0	184	1	paramHttpEntity	org.apache.http.HttpEntity
    //   3	164	2	i	int
    //   5	101	3	j	int
    //   29	135	4	l	long
    //   16	155	6	localInputStream	java.io.InputStream
    //   71	32	7	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   66	73	141	finally
    //   75	83	141	finally
    //   88	97	141	finally
    //   101	138	141	finally
    //   57	66	149	java/lang/OutOfMemoryError
    //   142	149	149	java/lang/OutOfMemoryError
    //   170	180	149	java/lang/OutOfMemoryError
  }
  
  private void b(Message paramMessage)
  {
    if (this.c.booleanValue()) {
      a(paramMessage);
    }
    while (Thread.currentThread().isInterrupted()) {
      return;
    }
    this.b.sendMessage(paramMessage);
  }
  
  public final String a()
  {
    if (this.a == null) {
      return "UTF-8";
    }
    return this.a;
  }
  
  public final void a(int paramInt)
  {
    b(a(5, new Object[] { Integer.valueOf(paramInt) }));
  }
  
  public abstract void a(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte);
  
  public abstract void a(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte, Throwable paramThrowable);
  
  protected final void a(Message paramMessage)
  {
    switch (paramMessage.what)
    {
    default: 
      return;
    case 0: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length >= 3))
      {
        a(((Integer)paramMessage[0]).intValue(), (Header[])paramMessage[1], (byte[])paramMessage[2]);
        return;
      }
      Log.e("AsyncHttpResponseHandler", "SUCCESS_MESSAGE didn't got enough params");
      return;
    case 1: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length >= 4))
      {
        a(((Integer)paramMessage[0]).intValue(), (Header[])paramMessage[1], (byte[])paramMessage[2], (Throwable)paramMessage[3]);
        return;
      }
      Log.e("AsyncHttpResponseHandler", "FAILURE_MESSAGE didn't got enough params");
      return;
    case 2: 
      b();
      return;
    case 3: 
      c();
      return;
    case 4: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length >= 2)) {
        for (;;)
        {
          try
          {
            int j = ((Integer)paramMessage[0]).intValue();
            int k = ((Integer)paramMessage[1]).intValue();
            if (k > 0)
            {
              i = j / k * 100;
              Log.v("AsyncHttpResponseHandler", String.format("Progress %d from %d (%d%%)", new Object[] { Integer.valueOf(j), Integer.valueOf(k), Integer.valueOf(i) }));
              return;
            }
          }
          catch (Throwable paramMessage)
          {
            Log.e("AsyncHttpResponseHandler", "custom onProgress contains an error", paramMessage);
            return;
          }
          int i = -1;
        }
      }
      Log.e("AsyncHttpResponseHandler", "PROGRESS_MESSAGE didn't got enough params");
      return;
    case 5: 
      paramMessage = (Object[])paramMessage.obj;
      if ((paramMessage != null) && (paramMessage.length == 1))
      {
        Log.d("AsyncHttpResponseHandler", String.format("Request retry no. %d", new Object[] { Integer.valueOf(((Integer)paramMessage[0]).intValue()) }));
        return;
      }
      Log.e("AsyncHttpResponseHandler", "RETRY_MESSAGE didn't get enough params");
      return;
    }
    Log.d("AsyncHttpResponseHandler", "Request got cancelled");
  }
  
  protected final void a(Runnable paramRunnable)
  {
    if (Looper.myLooper() == null) {}
    for (int i = 1;; i = 0)
    {
      if (i != 0) {
        Looper.prepare();
      }
      if (paramRunnable != null) {
        this.b.post(paramRunnable);
      }
      if (i != 0) {
        Looper.loop();
      }
      return;
    }
  }
  
  public final void a(URI paramURI)
  {
    this.d = paramURI;
  }
  
  public final void a(HttpResponse paramHttpResponse)
  {
    StatusLine localStatusLine;
    byte[] arrayOfByte;
    if (!Thread.currentThread().isInterrupted())
    {
      localStatusLine = paramHttpResponse.getStatusLine();
      arrayOfByte = a(paramHttpResponse.getEntity());
      if (!Thread.currentThread().isInterrupted())
      {
        if (localStatusLine.getStatusCode() < 300) {
          break label85;
        }
        b(localStatusLine.getStatusCode(), paramHttpResponse.getAllHeaders(), arrayOfByte, new HttpResponseException(localStatusLine.getStatusCode(), localStatusLine.getReasonPhrase()));
      }
    }
    return;
    label85:
    b(a(0, new Object[] { Integer.valueOf(localStatusLine.getStatusCode()), paramHttpResponse.getAllHeaders(), arrayOfByte }));
  }
  
  public final void a(Header[] paramArrayOfHeader)
  {
    this.e = paramArrayOfHeader;
  }
  
  public void b() {}
  
  public final void b(int paramInt, Header[] paramArrayOfHeader, byte[] paramArrayOfByte, Throwable paramThrowable)
  {
    b(a(1, new Object[] { Integer.valueOf(paramInt), paramArrayOfHeader, paramArrayOfByte, paramThrowable }));
  }
  
  public void c() {}
  
  public final void d()
  {
    b(a(2, null));
  }
  
  public final void e()
  {
    b(a(3, null));
  }
  
  public final void f()
  {
    b(a(6, null));
  }
}
