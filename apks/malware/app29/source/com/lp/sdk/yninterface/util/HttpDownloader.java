package com.lp.sdk.yninterface.util;

import android.content.Context;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class HttpDownloader
{
  private static URL url = null;
  
  public HttpDownloader(Context paramContext) {}
  
  /* Error */
  public static String download(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 5
    //   3: aconst_null
    //   4: astore_2
    //   5: aconst_null
    //   6: astore_3
    //   7: aconst_null
    //   8: astore 4
    //   10: new 23	java/lang/StringBuffer
    //   13: dup
    //   14: invokespecial 24	java/lang/StringBuffer:<init>	()V
    //   17: astore 6
    //   19: aload_0
    //   20: invokestatic 28	com/lp/sdk/yninterface/util/HttpDownloader:getInputStreamFromUrl	(Ljava/lang/String;)Ljava/io/InputStream;
    //   23: astore_0
    //   24: aload_0
    //   25: astore_1
    //   26: aload_3
    //   27: astore_2
    //   28: new 30	java/io/BufferedReader
    //   31: dup
    //   32: new 32	java/io/InputStreamReader
    //   35: dup
    //   36: aload_0
    //   37: invokespecial 35	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
    //   40: invokespecial 38	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   43: astore_3
    //   44: aload_3
    //   45: invokevirtual 42	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   48: astore_1
    //   49: aload_1
    //   50: ifnonnull +25 -> 75
    //   53: aload_3
    //   54: ifnull +7 -> 61
    //   57: aload_3
    //   58: invokevirtual 45	java/io/BufferedReader:close	()V
    //   61: aload_0
    //   62: ifnull +7 -> 69
    //   65: aload_0
    //   66: invokevirtual 48	java/io/InputStream:close	()V
    //   69: aload 6
    //   71: invokevirtual 51	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   74: areturn
    //   75: aload 6
    //   77: aload_1
    //   78: invokevirtual 55	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   81: pop
    //   82: goto -38 -> 44
    //   85: astore_1
    //   86: aload_3
    //   87: astore 4
    //   89: aload_1
    //   90: astore_3
    //   91: aload_0
    //   92: astore_1
    //   93: aload 4
    //   95: astore_2
    //   96: aload_3
    //   97: invokevirtual 58	java/net/MalformedURLException:printStackTrace	()V
    //   100: aload 4
    //   102: ifnull +8 -> 110
    //   105: aload 4
    //   107: invokevirtual 45	java/io/BufferedReader:close	()V
    //   110: aload_0
    //   111: ifnull -42 -> 69
    //   114: aload_0
    //   115: invokevirtual 48	java/io/InputStream:close	()V
    //   118: goto -49 -> 69
    //   121: astore_0
    //   122: aload_0
    //   123: invokevirtual 59	java/io/IOException:printStackTrace	()V
    //   126: goto -57 -> 69
    //   129: astore_1
    //   130: aload_3
    //   131: astore 4
    //   133: aload_1
    //   134: astore_3
    //   135: aload_0
    //   136: astore_1
    //   137: aload 4
    //   139: astore_2
    //   140: aload_3
    //   141: invokevirtual 59	java/io/IOException:printStackTrace	()V
    //   144: aload 4
    //   146: ifnull +8 -> 154
    //   149: aload 4
    //   151: invokevirtual 45	java/io/BufferedReader:close	()V
    //   154: aload_0
    //   155: ifnull -86 -> 69
    //   158: aload_0
    //   159: invokevirtual 48	java/io/InputStream:close	()V
    //   162: goto -93 -> 69
    //   165: astore_0
    //   166: aload_0
    //   167: invokevirtual 59	java/io/IOException:printStackTrace	()V
    //   170: goto -101 -> 69
    //   173: astore_0
    //   174: aconst_null
    //   175: astore_1
    //   176: aload_2
    //   177: ifnull +7 -> 184
    //   180: aload_2
    //   181: invokevirtual 45	java/io/BufferedReader:close	()V
    //   184: aload_1
    //   185: ifnull +7 -> 192
    //   188: aload_1
    //   189: invokevirtual 48	java/io/InputStream:close	()V
    //   192: aload_0
    //   193: athrow
    //   194: astore_1
    //   195: aload_1
    //   196: invokevirtual 59	java/io/IOException:printStackTrace	()V
    //   199: goto -7 -> 192
    //   202: astore_0
    //   203: aload_0
    //   204: invokevirtual 59	java/io/IOException:printStackTrace	()V
    //   207: goto -138 -> 69
    //   210: astore_2
    //   211: aload_0
    //   212: astore_1
    //   213: aload_2
    //   214: astore_0
    //   215: aload_3
    //   216: astore_2
    //   217: goto -41 -> 176
    //   220: astore_0
    //   221: goto -18 -> 203
    //   224: astore_3
    //   225: aconst_null
    //   226: astore_0
    //   227: goto -136 -> 91
    //   230: astore_3
    //   231: goto -140 -> 91
    //   234: astore_0
    //   235: goto -59 -> 176
    //   238: astore_3
    //   239: aconst_null
    //   240: astore_0
    //   241: aload 5
    //   243: astore 4
    //   245: goto -110 -> 135
    //   248: astore_3
    //   249: aload 5
    //   251: astore 4
    //   253: goto -118 -> 135
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	256	0	paramString	String
    //   25	53	1	str1	String
    //   85	5	1	localMalformedURLException1	MalformedURLException
    //   92	1	1	str2	String
    //   129	5	1	localIOException1	IOException
    //   136	53	1	str3	String
    //   194	2	1	localIOException2	IOException
    //   212	1	1	str4	String
    //   4	177	2	localObject1	Object
    //   210	4	2	localObject2	Object
    //   216	1	2	localObject3	Object
    //   6	210	3	localObject4	Object
    //   224	1	3	localMalformedURLException2	MalformedURLException
    //   230	1	3	localMalformedURLException3	MalformedURLException
    //   238	1	3	localIOException3	IOException
    //   248	1	3	localIOException4	IOException
    //   8	244	4	localObject5	Object
    //   1	249	5	localObject6	Object
    //   17	59	6	localStringBuffer	StringBuffer
    // Exception table:
    //   from	to	target	type
    //   44	49	85	java/net/MalformedURLException
    //   75	82	85	java/net/MalformedURLException
    //   105	110	121	java/io/IOException
    //   114	118	121	java/io/IOException
    //   44	49	129	java/io/IOException
    //   75	82	129	java/io/IOException
    //   149	154	165	java/io/IOException
    //   158	162	165	java/io/IOException
    //   19	24	173	finally
    //   180	184	194	java/io/IOException
    //   188	192	194	java/io/IOException
    //   57	61	202	java/io/IOException
    //   44	49	210	finally
    //   75	82	210	finally
    //   65	69	220	java/io/IOException
    //   19	24	224	java/net/MalformedURLException
    //   28	44	230	java/net/MalformedURLException
    //   28	44	234	finally
    //   96	100	234	finally
    //   140	144	234	finally
    //   19	24	238	java/io/IOException
    //   28	44	248	java/io/IOException
  }
  
  public static InputStream getInputStreamFromUrl(String paramString)
  {
    url = new URL(paramString);
    return ((HttpURLConnection)url.openConnection()).getInputStream();
  }
  
  public int downloadFile(String paramString1, String paramString2, String paramString3)
  {
    Object localObject5 = null;
    Object localObject6 = null;
    Object localObject4 = null;
    Object localObject2 = localObject4;
    Object localObject3 = localObject5;
    Object localObject1 = localObject6;
    try
    {
      FileUtils localFileUtils = new FileUtils();
      localObject2 = localObject4;
      localObject3 = localObject5;
      localObject1 = localObject6;
      if (localFileUtils.isFileExist(paramString2 + paramString3)) {
        return 1;
      }
      localObject2 = localObject4;
      localObject3 = localObject5;
      localObject1 = localObject6;
      paramString1 = getInputStreamFromUrl(paramString1);
      localObject2 = paramString1;
      localObject3 = paramString1;
      localObject1 = paramString1;
      paramString2 = localFileUtils.write2SDFromInput(paramString2, paramString3, paramString1);
      if (paramString2 == null)
      {
        if (paramString1 == null) {
          break label221;
        }
        try
        {
          paramString1.close();
          return -1;
        }
        catch (IOException paramString1)
        {
          paramString1.printStackTrace();
          return -1;
        }
      }
      return -1;
    }
    catch (MalformedURLException paramString1)
    {
      localObject1 = localObject2;
      paramString1.printStackTrace();
      if (localObject2 != null) {
        try
        {
          ((InputStream)localObject2).close();
          return -1;
        }
        catch (IOException paramString1)
        {
          paramString1.printStackTrace();
          return -1;
        }
      }
    }
    catch (IOException paramString1)
    {
      localObject1 = localObject3;
      paramString1.printStackTrace();
      if (localObject3 != null) {
        try
        {
          ((InputStream)localObject3).close();
          return -1;
        }
        catch (IOException paramString1)
        {
          paramString1.printStackTrace();
          return -1;
        }
      }
    }
    finally
    {
      if (localObject1 != null) {}
      try
      {
        ((InputStream)localObject1).close();
        throw paramString1;
      }
      catch (IOException paramString2)
      {
        for (;;)
        {
          paramString2.printStackTrace();
        }
      }
      if (paramString1 != null) {}
      try
      {
        paramString1.close();
        return 0;
      }
      catch (IOException paramString1)
      {
        for (;;)
        {
          paramString1.printStackTrace();
        }
      }
    }
  }
}
