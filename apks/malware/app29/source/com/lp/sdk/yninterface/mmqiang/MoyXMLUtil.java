package com.lp.sdk.yninterface.mmqiang;

import android.annotation.SuppressLint;
import com.lepeng.utils.L;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class MoyXMLUtil
{
  private Node m_currentNode;
  private NodeList m_nodeList;
  
  public MoyXMLUtil(String paramString)
  {
    try
    {
      DocumentBuilderFactory localDocumentBuilderFactory = DocumentBuilderFactory.newInstance();
      L.i(paramString);
      this.m_nodeList = localDocumentBuilderFactory.newDocumentBuilder().parse(String2InputStream(paramString)).getChildNodes();
      this.m_currentNode = this.m_nodeList.item(0);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
  }
  
  static InputStream String2InputStream(String paramString)
  {
    return new ByteArrayInputStream(paramString.getBytes());
  }
  
  public void back()
  {
    this.m_currentNode = this.m_currentNode.getParentNode();
  }
  
  @SuppressLint({"NewApi"})
  public String getChildContent(String paramString, int paramInt)
  {
    if (this.m_nodeList == null) {}
    for (;;)
    {
      return null;
      NodeList localNodeList = this.m_currentNode.getChildNodes();
      int k = -1;
      int j = 0;
      while (j < localNodeList.getLength())
      {
        Node localNode = localNodeList.item(j);
        int i = k;
        if (localNode.getNodeName().equals(paramString))
        {
          k += 1;
          i = k;
          if (paramInt == k) {
            return localNode.getTextContent();
          }
        }
        j += 1;
        k = i;
      }
    }
  }
  
  @SuppressLint({"NewApi"})
  public String getContent()
  {
    if (this.m_nodeList == null) {
      return null;
    }
    return this.m_currentNode.getTextContent();
  }
  
  public void setCurrentNode(int paramInt)
  {
    if (this.m_nodeList == null) {
      return;
    }
    this.m_currentNode = this.m_nodeList.item(paramInt);
  }
  
  public void setCurrentNode(String paramString, int paramInt)
  {
    NodeList localNodeList = this.m_currentNode.getChildNodes();
    int k = -1;
    int j = 0;
    for (;;)
    {
      if (j >= localNodeList.getLength()) {
        return;
      }
      Node localNode = localNodeList.item(j);
      int i = k;
      if (localNode.getNodeName().equals(paramString))
      {
        k += 1;
        i = k;
        if (paramInt == k)
        {
          this.m_currentNode = localNode;
          return;
        }
      }
      j += 1;
      k = i;
    }
  }
}
