package com.lp.sdk.yninterface.mmqiang;

public class Base64Str
{
  private static final byte[] decodingTable;
  private static final byte[] encodingTable = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };
  
  static
  {
    decodingTable = new byte['Â€'];
    int i = 0;
    if (i >= 128)
    {
      i = 65;
      label405:
      if (i <= 90) {
        break label459;
      }
      i = 97;
      label414:
      if (i <= 122) {
        break label476;
      }
      i = 48;
    }
    for (;;)
    {
      if (i > 57)
      {
        decodingTable[43] = 62;
        decodingTable[47] = 63;
        return;
        decodingTable[i] = -1;
        i += 1;
        break;
        label459:
        decodingTable[i] = ((byte)(i - 65));
        i += 1;
        break label405;
        label476:
        decodingTable[i] = ((byte)(i - 97 + 26));
        i += 1;
        break label414;
      }
      decodingTable[i] = ((byte)(i - 48 + 52));
      i += 1;
    }
  }
  
  public Base64Str() {}
  
  public static byte[] decode(String paramString)
  {
    int i = 0;
    String str = discardNonBase64Chars(paramString);
    if (str.charAt(str.length() - 2) == '=')
    {
      paramString = new byte[(str.length() / 4 - 1) * 3 + 1];
      j = 0;
    }
    for (;;)
    {
      if (j >= str.length() - 4)
      {
        if (str.charAt(str.length() - 2) != '=') {
          break label277;
        }
        i = decodingTable[str.charAt(str.length() - 4)];
        j = decodingTable[str.charAt(str.length() - 3)];
        paramString[(paramString.length - 1)] = ((byte)(i << 2 | j >> 4));
        return paramString;
        if (str.charAt(str.length() - 1) == '=')
        {
          paramString = new byte[(str.length() / 4 - 1) * 3 + 2];
          break;
        }
        paramString = new byte[str.length() / 4 * 3];
        break;
      }
      k = decodingTable[str.charAt(j)];
      m = decodingTable[str.charAt(j + 1)];
      int n = decodingTable[str.charAt(j + 2)];
      int i1 = decodingTable[str.charAt(j + 3)];
      paramString[i] = ((byte)(k << 2 | m >> 4));
      paramString[(i + 1)] = ((byte)(m << 4 | n >> 2));
      paramString[(i + 2)] = ((byte)(n << 6 | i1));
      j += 4;
      i += 3;
    }
    label277:
    if (str.charAt(str.length() - 1) == '=')
    {
      i = decodingTable[str.charAt(str.length() - 4)];
      j = decodingTable[str.charAt(str.length() - 3)];
      k = decodingTable[str.charAt(str.length() - 2)];
      paramString[(paramString.length - 2)] = ((byte)(i << 2 | j >> 4));
      paramString[(paramString.length - 1)] = ((byte)(j << 4 | k >> 2));
      return paramString;
    }
    i = decodingTable[str.charAt(str.length() - 4)];
    int j = decodingTable[str.charAt(str.length() - 3)];
    int k = decodingTable[str.charAt(str.length() - 2)];
    int m = decodingTable[str.charAt(str.length() - 1)];
    paramString[(paramString.length - 3)] = ((byte)(i << 2 | j >> 4));
    paramString[(paramString.length - 2)] = ((byte)(j << 4 | k >> 2));
    paramString[(paramString.length - 1)] = ((byte)(k << 6 | m));
    return paramString;
  }
  
  public static byte[] decode(byte[] paramArrayOfByte)
  {
    int i = 0;
    byte[] arrayOfByte = discardNonBase64Bytes(paramArrayOfByte);
    if (arrayOfByte[(arrayOfByte.length - 2)] == 61)
    {
      paramArrayOfByte = new byte[(arrayOfByte.length / 4 - 1) * 3 + 1];
      j = 0;
    }
    for (;;)
    {
      if (j >= arrayOfByte.length - 4)
      {
        if (arrayOfByte[(arrayOfByte.length - 2)] != 61) {
          break label241;
        }
        i = decodingTable[arrayOfByte[(arrayOfByte.length - 4)]];
        j = decodingTable[arrayOfByte[(arrayOfByte.length - 3)]];
        paramArrayOfByte[(paramArrayOfByte.length - 1)] = ((byte)(i << 2 | j >> 4));
        return paramArrayOfByte;
        if (arrayOfByte[(arrayOfByte.length - 1)] == 61)
        {
          paramArrayOfByte = new byte[(arrayOfByte.length / 4 - 1) * 3 + 2];
          break;
        }
        paramArrayOfByte = new byte[arrayOfByte.length / 4 * 3];
        break;
      }
      k = decodingTable[arrayOfByte[j]];
      m = decodingTable[arrayOfByte[(j + 1)]];
      int n = decodingTable[arrayOfByte[(j + 2)]];
      int i1 = decodingTable[arrayOfByte[(j + 3)]];
      paramArrayOfByte[i] = ((byte)(k << 2 | m >> 4));
      paramArrayOfByte[(i + 1)] = ((byte)(m << 4 | n >> 2));
      paramArrayOfByte[(i + 2)] = ((byte)(n << 6 | i1));
      j += 4;
      i += 3;
    }
    label241:
    if (arrayOfByte[(arrayOfByte.length - 1)] == 61)
    {
      i = decodingTable[arrayOfByte[(arrayOfByte.length - 4)]];
      j = decodingTable[arrayOfByte[(arrayOfByte.length - 3)]];
      k = decodingTable[arrayOfByte[(arrayOfByte.length - 2)]];
      paramArrayOfByte[(paramArrayOfByte.length - 2)] = ((byte)(i << 2 | j >> 4));
      paramArrayOfByte[(paramArrayOfByte.length - 1)] = ((byte)(j << 4 | k >> 2));
      return paramArrayOfByte;
    }
    i = decodingTable[arrayOfByte[(arrayOfByte.length - 4)]];
    int j = decodingTable[arrayOfByte[(arrayOfByte.length - 3)]];
    int k = decodingTable[arrayOfByte[(arrayOfByte.length - 2)]];
    int m = decodingTable[arrayOfByte[(arrayOfByte.length - 1)]];
    paramArrayOfByte[(paramArrayOfByte.length - 3)] = ((byte)(i << 2 | j >> 4));
    paramArrayOfByte[(paramArrayOfByte.length - 2)] = ((byte)(j << 4 | k >> 2));
    paramArrayOfByte[(paramArrayOfByte.length - 1)] = ((byte)(k << 6 | m));
    return paramArrayOfByte;
  }
  
  private static byte[] discardNonBase64Bytes(byte[] paramArrayOfByte)
  {
    byte[] arrayOfByte = new byte[paramArrayOfByte.length];
    int i = 0;
    int k;
    for (int j = 0;; j = k)
    {
      if (i >= paramArrayOfByte.length)
      {
        paramArrayOfByte = new byte[j];
        System.arraycopy(arrayOfByte, 0, paramArrayOfByte, 0, j);
        return paramArrayOfByte;
      }
      k = j;
      if (isValidBase64Byte(paramArrayOfByte[i]))
      {
        arrayOfByte[j] = paramArrayOfByte[i];
        k = j + 1;
      }
      i += 1;
    }
  }
  
  private static String discardNonBase64Chars(String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int j = paramString.length();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return localStringBuffer.toString();
      }
      if (isValidBase64Byte((byte)paramString.charAt(i))) {
        localStringBuffer.append(paramString.charAt(i));
      }
      i += 1;
    }
  }
  
  public static byte[] encode(byte[] paramArrayOfByte)
  {
    int i = 0;
    int k = paramArrayOfByte.length % 3;
    byte[] arrayOfByte;
    label21:
    int m;
    if (k == 0)
    {
      arrayOfByte = new byte[paramArrayOfByte.length * 4 / 3];
      m = paramArrayOfByte.length;
      j = 0;
    }
    for (;;)
    {
      if (j >= m - k) {}
      switch (k)
      {
      default: 
        return arrayOfByte;
        arrayOfByte = new byte[(paramArrayOfByte.length / 3 + 1) * 4];
        break label21;
        int n = paramArrayOfByte[j] & 0xFF;
        int i1 = paramArrayOfByte[(j + 1)] & 0xFF;
        int i2 = paramArrayOfByte[(j + 2)] & 0xFF;
        arrayOfByte[i] = encodingTable[(n >>> 2 & 0x3F)];
        arrayOfByte[(i + 1)] = encodingTable[((n << 4 | i1 >>> 4) & 0x3F)];
        arrayOfByte[(i + 2)] = encodingTable[((i1 << 2 | i2 >>> 6) & 0x3F)];
        arrayOfByte[(i + 3)] = encodingTable[(i2 & 0x3F)];
        j += 3;
        i += 4;
      }
    }
    i = paramArrayOfByte[(paramArrayOfByte.length - 1)] & 0xFF;
    arrayOfByte[(arrayOfByte.length - 4)] = encodingTable[(i >>> 2 & 0x3F)];
    arrayOfByte[(arrayOfByte.length - 3)] = encodingTable[(i << 4 & 0x3F)];
    arrayOfByte[(arrayOfByte.length - 2)] = 61;
    arrayOfByte[(arrayOfByte.length - 1)] = 61;
    return arrayOfByte;
    i = paramArrayOfByte[(paramArrayOfByte.length - 2)] & 0xFF;
    int j = paramArrayOfByte[(paramArrayOfByte.length - 1)] & 0xFF;
    arrayOfByte[(arrayOfByte.length - 4)] = encodingTable[(i >>> 2 & 0x3F)];
    arrayOfByte[(arrayOfByte.length - 3)] = encodingTable[((i << 4 | j >>> 4) & 0x3F)];
    arrayOfByte[(arrayOfByte.length - 2)] = encodingTable[(j << 2 & 0x3F)];
    arrayOfByte[(arrayOfByte.length - 1)] = 61;
    return arrayOfByte;
  }
  
  private static boolean isValidBase64Byte(byte paramByte)
  {
    boolean bool2 = false;
    if (paramByte == 61) {}
    do
    {
      boolean bool1 = true;
      do
      {
        do
        {
          return bool1;
          bool1 = bool2;
        } while (paramByte < 0);
        bool1 = bool2;
      } while (paramByte >= 128);
    } while (decodingTable[paramByte] != -1);
    return false;
  }
}
